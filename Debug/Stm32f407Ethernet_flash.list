
Stm32f407Ethernet_flash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00029768  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000050a0  080298f8  080298f8  000398f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802e998  0802e998  00040244  2**0
                  CONTENTS
  4 .ARM          00000008  0802e998  0802e998  0003e998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802e9a0  0802e9a0  00040244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802e9a0  0802e9a0  0003e9a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802e9a4  0802e9a4  0003e9a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000244  10000000  0802e9a8  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000244  10000244  00040244  2**0
                  CONTENTS
 10 .bss          0001bd54  20000000  20000000  00050000  2**3
                  ALLOC
 11 ._user_heap_stack 00002204  10000244  10000244  00040244  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00040244  2**0
                  CONTENTS, READONLY
 13 .debug_info   0005c5cd  00000000  00000000  00040274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000cb94  00000000  00000000  0009c841  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000036f0  00000000  00000000  000a93d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000034b0  00000000  00000000  000acac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003c888  00000000  00000000  000aff78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00059f3c  00000000  00000000  000ec800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fce62  00000000  00000000  0014673c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0024359e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000f6f0  00000000  00000000  002435f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000000 	.word	0x20000000
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080298e0 	.word	0x080298e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000004 	.word	0x20000004
 80001cc:	080298e0 	.word	0x080298e0

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1c:	f000 b9aa 	b.w	8000f74 <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f83c 	bl	8000ca4 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2lz>:
 8000c38:	b538      	push	{r3, r4, r5, lr}
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	4604      	mov	r4, r0
 8000c40:	460d      	mov	r5, r1
 8000c42:	f7ff ff5b 	bl	8000afc <__aeabi_dcmplt>
 8000c46:	b928      	cbnz	r0, 8000c54 <__aeabi_d2lz+0x1c>
 8000c48:	4620      	mov	r0, r4
 8000c4a:	4629      	mov	r1, r5
 8000c4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c50:	f000 b80a 	b.w	8000c68 <__aeabi_d2ulz>
 8000c54:	4620      	mov	r0, r4
 8000c56:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c5a:	f000 f805 	bl	8000c68 <__aeabi_d2ulz>
 8000c5e:	4240      	negs	r0, r0
 8000c60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c64:	bd38      	pop	{r3, r4, r5, pc}
 8000c66:	bf00      	nop

08000c68 <__aeabi_d2ulz>:
 8000c68:	b5d0      	push	{r4, r6, r7, lr}
 8000c6a:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <__aeabi_d2ulz+0x34>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	4606      	mov	r6, r0
 8000c70:	460f      	mov	r7, r1
 8000c72:	f7ff fcd1 	bl	8000618 <__aeabi_dmul>
 8000c76:	f7ff ffa7 	bl	8000bc8 <__aeabi_d2uiz>
 8000c7a:	4604      	mov	r4, r0
 8000c7c:	f7ff fc52 	bl	8000524 <__aeabi_ui2d>
 8000c80:	4b07      	ldr	r3, [pc, #28]	; (8000ca0 <__aeabi_d2ulz+0x38>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	f7ff fcc8 	bl	8000618 <__aeabi_dmul>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	460b      	mov	r3, r1
 8000c8c:	4630      	mov	r0, r6
 8000c8e:	4639      	mov	r1, r7
 8000c90:	f7ff fb0a 	bl	80002a8 <__aeabi_dsub>
 8000c94:	f7ff ff98 	bl	8000bc8 <__aeabi_d2uiz>
 8000c98:	4621      	mov	r1, r4
 8000c9a:	bdd0      	pop	{r4, r6, r7, pc}
 8000c9c:	3df00000 	.word	0x3df00000
 8000ca0:	41f00000 	.word	0x41f00000

08000ca4 <__udivmoddi4>:
 8000ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ca8:	9d08      	ldr	r5, [sp, #32]
 8000caa:	4604      	mov	r4, r0
 8000cac:	468e      	mov	lr, r1
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d14d      	bne.n	8000d4e <__udivmoddi4+0xaa>
 8000cb2:	428a      	cmp	r2, r1
 8000cb4:	4694      	mov	ip, r2
 8000cb6:	d969      	bls.n	8000d8c <__udivmoddi4+0xe8>
 8000cb8:	fab2 f282 	clz	r2, r2
 8000cbc:	b152      	cbz	r2, 8000cd4 <__udivmoddi4+0x30>
 8000cbe:	fa01 f302 	lsl.w	r3, r1, r2
 8000cc2:	f1c2 0120 	rsb	r1, r2, #32
 8000cc6:	fa20 f101 	lsr.w	r1, r0, r1
 8000cca:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cce:	ea41 0e03 	orr.w	lr, r1, r3
 8000cd2:	4094      	lsls	r4, r2
 8000cd4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd8:	0c21      	lsrs	r1, r4, #16
 8000cda:	fbbe f6f8 	udiv	r6, lr, r8
 8000cde:	fa1f f78c 	uxth.w	r7, ip
 8000ce2:	fb08 e316 	mls	r3, r8, r6, lr
 8000ce6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cea:	fb06 f107 	mul.w	r1, r6, r7
 8000cee:	4299      	cmp	r1, r3
 8000cf0:	d90a      	bls.n	8000d08 <__udivmoddi4+0x64>
 8000cf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cfa:	f080 811f 	bcs.w	8000f3c <__udivmoddi4+0x298>
 8000cfe:	4299      	cmp	r1, r3
 8000d00:	f240 811c 	bls.w	8000f3c <__udivmoddi4+0x298>
 8000d04:	3e02      	subs	r6, #2
 8000d06:	4463      	add	r3, ip
 8000d08:	1a5b      	subs	r3, r3, r1
 8000d0a:	b2a4      	uxth	r4, r4
 8000d0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d10:	fb08 3310 	mls	r3, r8, r0, r3
 8000d14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d18:	fb00 f707 	mul.w	r7, r0, r7
 8000d1c:	42a7      	cmp	r7, r4
 8000d1e:	d90a      	bls.n	8000d36 <__udivmoddi4+0x92>
 8000d20:	eb1c 0404 	adds.w	r4, ip, r4
 8000d24:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d28:	f080 810a 	bcs.w	8000f40 <__udivmoddi4+0x29c>
 8000d2c:	42a7      	cmp	r7, r4
 8000d2e:	f240 8107 	bls.w	8000f40 <__udivmoddi4+0x29c>
 8000d32:	4464      	add	r4, ip
 8000d34:	3802      	subs	r0, #2
 8000d36:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d3a:	1be4      	subs	r4, r4, r7
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	b11d      	cbz	r5, 8000d48 <__udivmoddi4+0xa4>
 8000d40:	40d4      	lsrs	r4, r2
 8000d42:	2300      	movs	r3, #0
 8000d44:	e9c5 4300 	strd	r4, r3, [r5]
 8000d48:	4631      	mov	r1, r6
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d909      	bls.n	8000d66 <__udivmoddi4+0xc2>
 8000d52:	2d00      	cmp	r5, #0
 8000d54:	f000 80ef 	beq.w	8000f36 <__udivmoddi4+0x292>
 8000d58:	2600      	movs	r6, #0
 8000d5a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d5e:	4630      	mov	r0, r6
 8000d60:	4631      	mov	r1, r6
 8000d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d66:	fab3 f683 	clz	r6, r3
 8000d6a:	2e00      	cmp	r6, #0
 8000d6c:	d14a      	bne.n	8000e04 <__udivmoddi4+0x160>
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d302      	bcc.n	8000d78 <__udivmoddi4+0xd4>
 8000d72:	4282      	cmp	r2, r0
 8000d74:	f200 80f9 	bhi.w	8000f6a <__udivmoddi4+0x2c6>
 8000d78:	1a84      	subs	r4, r0, r2
 8000d7a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d7e:	2001      	movs	r0, #1
 8000d80:	469e      	mov	lr, r3
 8000d82:	2d00      	cmp	r5, #0
 8000d84:	d0e0      	beq.n	8000d48 <__udivmoddi4+0xa4>
 8000d86:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d8a:	e7dd      	b.n	8000d48 <__udivmoddi4+0xa4>
 8000d8c:	b902      	cbnz	r2, 8000d90 <__udivmoddi4+0xec>
 8000d8e:	deff      	udf	#255	; 0xff
 8000d90:	fab2 f282 	clz	r2, r2
 8000d94:	2a00      	cmp	r2, #0
 8000d96:	f040 8092 	bne.w	8000ebe <__udivmoddi4+0x21a>
 8000d9a:	eba1 010c 	sub.w	r1, r1, ip
 8000d9e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da2:	fa1f fe8c 	uxth.w	lr, ip
 8000da6:	2601      	movs	r6, #1
 8000da8:	0c20      	lsrs	r0, r4, #16
 8000daa:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dae:	fb07 1113 	mls	r1, r7, r3, r1
 8000db2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000db6:	fb0e f003 	mul.w	r0, lr, r3
 8000dba:	4288      	cmp	r0, r1
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x12c>
 8000dbe:	eb1c 0101 	adds.w	r1, ip, r1
 8000dc2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dc6:	d202      	bcs.n	8000dce <__udivmoddi4+0x12a>
 8000dc8:	4288      	cmp	r0, r1
 8000dca:	f200 80cb 	bhi.w	8000f64 <__udivmoddi4+0x2c0>
 8000dce:	4643      	mov	r3, r8
 8000dd0:	1a09      	subs	r1, r1, r0
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dd8:	fb07 1110 	mls	r1, r7, r0, r1
 8000ddc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000de0:	fb0e fe00 	mul.w	lr, lr, r0
 8000de4:	45a6      	cmp	lr, r4
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x156>
 8000de8:	eb1c 0404 	adds.w	r4, ip, r4
 8000dec:	f100 31ff 	add.w	r1, r0, #4294967295
 8000df0:	d202      	bcs.n	8000df8 <__udivmoddi4+0x154>
 8000df2:	45a6      	cmp	lr, r4
 8000df4:	f200 80bb 	bhi.w	8000f6e <__udivmoddi4+0x2ca>
 8000df8:	4608      	mov	r0, r1
 8000dfa:	eba4 040e 	sub.w	r4, r4, lr
 8000dfe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e02:	e79c      	b.n	8000d3e <__udivmoddi4+0x9a>
 8000e04:	f1c6 0720 	rsb	r7, r6, #32
 8000e08:	40b3      	lsls	r3, r6
 8000e0a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e0e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e12:	fa20 f407 	lsr.w	r4, r0, r7
 8000e16:	fa01 f306 	lsl.w	r3, r1, r6
 8000e1a:	431c      	orrs	r4, r3
 8000e1c:	40f9      	lsrs	r1, r7
 8000e1e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e22:	fa00 f306 	lsl.w	r3, r0, r6
 8000e26:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e2a:	0c20      	lsrs	r0, r4, #16
 8000e2c:	fa1f fe8c 	uxth.w	lr, ip
 8000e30:	fb09 1118 	mls	r1, r9, r8, r1
 8000e34:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e38:	fb08 f00e 	mul.w	r0, r8, lr
 8000e3c:	4288      	cmp	r0, r1
 8000e3e:	fa02 f206 	lsl.w	r2, r2, r6
 8000e42:	d90b      	bls.n	8000e5c <__udivmoddi4+0x1b8>
 8000e44:	eb1c 0101 	adds.w	r1, ip, r1
 8000e48:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e4c:	f080 8088 	bcs.w	8000f60 <__udivmoddi4+0x2bc>
 8000e50:	4288      	cmp	r0, r1
 8000e52:	f240 8085 	bls.w	8000f60 <__udivmoddi4+0x2bc>
 8000e56:	f1a8 0802 	sub.w	r8, r8, #2
 8000e5a:	4461      	add	r1, ip
 8000e5c:	1a09      	subs	r1, r1, r0
 8000e5e:	b2a4      	uxth	r4, r4
 8000e60:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e64:	fb09 1110 	mls	r1, r9, r0, r1
 8000e68:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e6c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e70:	458e      	cmp	lr, r1
 8000e72:	d908      	bls.n	8000e86 <__udivmoddi4+0x1e2>
 8000e74:	eb1c 0101 	adds.w	r1, ip, r1
 8000e78:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e7c:	d26c      	bcs.n	8000f58 <__udivmoddi4+0x2b4>
 8000e7e:	458e      	cmp	lr, r1
 8000e80:	d96a      	bls.n	8000f58 <__udivmoddi4+0x2b4>
 8000e82:	3802      	subs	r0, #2
 8000e84:	4461      	add	r1, ip
 8000e86:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e8a:	fba0 9402 	umull	r9, r4, r0, r2
 8000e8e:	eba1 010e 	sub.w	r1, r1, lr
 8000e92:	42a1      	cmp	r1, r4
 8000e94:	46c8      	mov	r8, r9
 8000e96:	46a6      	mov	lr, r4
 8000e98:	d356      	bcc.n	8000f48 <__udivmoddi4+0x2a4>
 8000e9a:	d053      	beq.n	8000f44 <__udivmoddi4+0x2a0>
 8000e9c:	b15d      	cbz	r5, 8000eb6 <__udivmoddi4+0x212>
 8000e9e:	ebb3 0208 	subs.w	r2, r3, r8
 8000ea2:	eb61 010e 	sbc.w	r1, r1, lr
 8000ea6:	fa01 f707 	lsl.w	r7, r1, r7
 8000eaa:	fa22 f306 	lsr.w	r3, r2, r6
 8000eae:	40f1      	lsrs	r1, r6
 8000eb0:	431f      	orrs	r7, r3
 8000eb2:	e9c5 7100 	strd	r7, r1, [r5]
 8000eb6:	2600      	movs	r6, #0
 8000eb8:	4631      	mov	r1, r6
 8000eba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ebe:	f1c2 0320 	rsb	r3, r2, #32
 8000ec2:	40d8      	lsrs	r0, r3
 8000ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec8:	fa21 f303 	lsr.w	r3, r1, r3
 8000ecc:	4091      	lsls	r1, r2
 8000ece:	4301      	orrs	r1, r0
 8000ed0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed4:	fa1f fe8c 	uxth.w	lr, ip
 8000ed8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000edc:	fb07 3610 	mls	r6, r7, r0, r3
 8000ee0:	0c0b      	lsrs	r3, r1, #16
 8000ee2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000ee6:	fb00 f60e 	mul.w	r6, r0, lr
 8000eea:	429e      	cmp	r6, r3
 8000eec:	fa04 f402 	lsl.w	r4, r4, r2
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x260>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000efa:	d22f      	bcs.n	8000f5c <__udivmoddi4+0x2b8>
 8000efc:	429e      	cmp	r6, r3
 8000efe:	d92d      	bls.n	8000f5c <__udivmoddi4+0x2b8>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	1b9b      	subs	r3, r3, r6
 8000f06:	b289      	uxth	r1, r1
 8000f08:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f0c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f10:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f14:	fb06 f30e 	mul.w	r3, r6, lr
 8000f18:	428b      	cmp	r3, r1
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x28a>
 8000f1c:	eb1c 0101 	adds.w	r1, ip, r1
 8000f20:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f24:	d216      	bcs.n	8000f54 <__udivmoddi4+0x2b0>
 8000f26:	428b      	cmp	r3, r1
 8000f28:	d914      	bls.n	8000f54 <__udivmoddi4+0x2b0>
 8000f2a:	3e02      	subs	r6, #2
 8000f2c:	4461      	add	r1, ip
 8000f2e:	1ac9      	subs	r1, r1, r3
 8000f30:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f34:	e738      	b.n	8000da8 <__udivmoddi4+0x104>
 8000f36:	462e      	mov	r6, r5
 8000f38:	4628      	mov	r0, r5
 8000f3a:	e705      	b.n	8000d48 <__udivmoddi4+0xa4>
 8000f3c:	4606      	mov	r6, r0
 8000f3e:	e6e3      	b.n	8000d08 <__udivmoddi4+0x64>
 8000f40:	4618      	mov	r0, r3
 8000f42:	e6f8      	b.n	8000d36 <__udivmoddi4+0x92>
 8000f44:	454b      	cmp	r3, r9
 8000f46:	d2a9      	bcs.n	8000e9c <__udivmoddi4+0x1f8>
 8000f48:	ebb9 0802 	subs.w	r8, r9, r2
 8000f4c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f50:	3801      	subs	r0, #1
 8000f52:	e7a3      	b.n	8000e9c <__udivmoddi4+0x1f8>
 8000f54:	4646      	mov	r6, r8
 8000f56:	e7ea      	b.n	8000f2e <__udivmoddi4+0x28a>
 8000f58:	4620      	mov	r0, r4
 8000f5a:	e794      	b.n	8000e86 <__udivmoddi4+0x1e2>
 8000f5c:	4640      	mov	r0, r8
 8000f5e:	e7d1      	b.n	8000f04 <__udivmoddi4+0x260>
 8000f60:	46d0      	mov	r8, sl
 8000f62:	e77b      	b.n	8000e5c <__udivmoddi4+0x1b8>
 8000f64:	3b02      	subs	r3, #2
 8000f66:	4461      	add	r1, ip
 8000f68:	e732      	b.n	8000dd0 <__udivmoddi4+0x12c>
 8000f6a:	4630      	mov	r0, r6
 8000f6c:	e709      	b.n	8000d82 <__udivmoddi4+0xde>
 8000f6e:	4464      	add	r4, ip
 8000f70:	3802      	subs	r0, #2
 8000f72:	e742      	b.n	8000dfa <__udivmoddi4+0x156>

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <DS18B20_IsValid>:
  * @brief  The function is used to check valid DS18B20 ROM
  * @retval Return in OK = 1, Failed = 0
  * @param  ROM		Pointer to ROM number
  */
uint8_t DS18B20_IsValid(uint8_t *ROM)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
	/* Checks if first byte is equal to DS18B20's family code */
	return (*ROM == DS18B20_FAMILY_CODE) ? 1 : 0;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	2b28      	cmp	r3, #40	; 0x28
 8000f86:	bf0c      	ite	eq
 8000f88:	2301      	moveq	r3, #1
 8000f8a:	2300      	movne	r3, #0
 8000f8c:	b2db      	uxtb	r3, r3
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr

08000f9a <DS18B20_SetResolution>:
  * @param  ROM			Pointer to ROM number
  * @param  Resolution	Resolution in 9 - 12
  */
uint8_t DS18B20_SetResolution(OneWire_t* OW, uint8_t *ROM,
		DS18B20_Res_t Resolution)
{
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b086      	sub	sp, #24
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	60f8      	str	r0, [r7, #12]
 8000fa2:	60b9      	str	r1, [r7, #8]
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	71fb      	strb	r3, [r7, #7]
	uint8_t th, tl, conf;

	/* Check valid ROM */
	if (!DS18B20_IsValid(ROM)) return 0;
 8000fa8:	68b8      	ldr	r0, [r7, #8]
 8000faa:	f7ff ffe5 	bl	8000f78 <DS18B20_IsValid>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d101      	bne.n	8000fb8 <DS18B20_SetResolution+0x1e>
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	e074      	b.n	80010a2 <DS18B20_SetResolution+0x108>

	/* Reset line */
	OneWire_Reset(OW);
 8000fb8:	68f8      	ldr	r0, [r7, #12]
 8000fba:	f000 fbc8 	bl	800174e <OneWire_Reset>

	/* Select ROM number */
	OneWire_SelectWithPointer(OW, ROM);
 8000fbe:	68b9      	ldr	r1, [r7, #8]
 8000fc0:	68f8      	ldr	r0, [r7, #12]
 8000fc2:	f000 fcfc 	bl	80019be <OneWire_SelectWithPointer>

	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OW, DS18B20_CMD_READSCRATCHPAD);
 8000fc6:	21be      	movs	r1, #190	; 0xbe
 8000fc8:	68f8      	ldr	r0, [r7, #12]
 8000fca:	f000 fb81 	bl	80016d0 <OneWire_WriteByte>

	/* Ignore first 2 bytes */
	OneWire_ReadByte(OW);
 8000fce:	68f8      	ldr	r0, [r7, #12]
 8000fd0:	f000 fb9c 	bl	800170c <OneWire_ReadByte>
	OneWire_ReadByte(OW);
 8000fd4:	68f8      	ldr	r0, [r7, #12]
 8000fd6:	f000 fb99 	bl	800170c <OneWire_ReadByte>

	th = OneWire_ReadByte(OW);
 8000fda:	68f8      	ldr	r0, [r7, #12]
 8000fdc:	f000 fb96 	bl	800170c <OneWire_ReadByte>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	75bb      	strb	r3, [r7, #22]
	tl = OneWire_ReadByte(OW);
 8000fe4:	68f8      	ldr	r0, [r7, #12]
 8000fe6:	f000 fb91 	bl	800170c <OneWire_ReadByte>
 8000fea:	4603      	mov	r3, r0
 8000fec:	757b      	strb	r3, [r7, #21]
	conf = OneWire_ReadByte(OW);
 8000fee:	68f8      	ldr	r0, [r7, #12]
 8000ff0:	f000 fb8c 	bl	800170c <OneWire_ReadByte>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	75fb      	strb	r3, [r7, #23]

	if (Resolution == DS18B20_Resolution_9bits) {
 8000ff8:	79fb      	ldrb	r3, [r7, #7]
 8000ffa:	2b09      	cmp	r3, #9
 8000ffc:	d108      	bne.n	8001010 <DS18B20_SetResolution+0x76>
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 8000ffe:	7dfb      	ldrb	r3, [r7, #23]
 8001000:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001004:	75fb      	strb	r3, [r7, #23]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8001006:	7dfb      	ldrb	r3, [r7, #23]
 8001008:	f023 0320 	bic.w	r3, r3, #32
 800100c:	75fb      	strb	r3, [r7, #23]
 800100e:	e022      	b.n	8001056 <DS18B20_SetResolution+0xbc>
	} else if (Resolution == DS18B20_Resolution_10bits) {
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	2b0a      	cmp	r3, #10
 8001014:	d108      	bne.n	8001028 <DS18B20_SetResolution+0x8e>
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 8001016:	7dfb      	ldrb	r3, [r7, #23]
 8001018:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800101c:	75fb      	strb	r3, [r7, #23]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 800101e:	7dfb      	ldrb	r3, [r7, #23]
 8001020:	f043 0320 	orr.w	r3, r3, #32
 8001024:	75fb      	strb	r3, [r7, #23]
 8001026:	e016      	b.n	8001056 <DS18B20_SetResolution+0xbc>
	} else if (Resolution == DS18B20_Resolution_11bits) {
 8001028:	79fb      	ldrb	r3, [r7, #7]
 800102a:	2b0b      	cmp	r3, #11
 800102c:	d108      	bne.n	8001040 <DS18B20_SetResolution+0xa6>
		conf |= 1 << DS18B20_RESOLUTION_R1;
 800102e:	7dfb      	ldrb	r3, [r7, #23]
 8001030:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001034:	75fb      	strb	r3, [r7, #23]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8001036:	7dfb      	ldrb	r3, [r7, #23]
 8001038:	f023 0320 	bic.w	r3, r3, #32
 800103c:	75fb      	strb	r3, [r7, #23]
 800103e:	e00a      	b.n	8001056 <DS18B20_SetResolution+0xbc>
	} else if (Resolution == DS18B20_Resolution_12bits) {
 8001040:	79fb      	ldrb	r3, [r7, #7]
 8001042:	2b0c      	cmp	r3, #12
 8001044:	d107      	bne.n	8001056 <DS18B20_SetResolution+0xbc>
		conf |= 1 << DS18B20_RESOLUTION_R1;
 8001046:	7dfb      	ldrb	r3, [r7, #23]
 8001048:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800104c:	75fb      	strb	r3, [r7, #23]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 800104e:	7dfb      	ldrb	r3, [r7, #23]
 8001050:	f043 0320 	orr.w	r3, r3, #32
 8001054:	75fb      	strb	r3, [r7, #23]
	}

	/* Reset line */
	OneWire_Reset(OW);
 8001056:	68f8      	ldr	r0, [r7, #12]
 8001058:	f000 fb79 	bl	800174e <OneWire_Reset>

	/* Select ROM number */
	OneWire_SelectWithPointer(OW, ROM);
 800105c:	68b9      	ldr	r1, [r7, #8]
 800105e:	68f8      	ldr	r0, [r7, #12]
 8001060:	f000 fcad 	bl	80019be <OneWire_SelectWithPointer>

	/* Write scratchpad command by onewire protocol, only th, tl and conf
	 * register can be written */
	OneWire_WriteByte(OW, DS18B20_CMD_WRITESCRATCHPAD);
 8001064:	214e      	movs	r1, #78	; 0x4e
 8001066:	68f8      	ldr	r0, [r7, #12]
 8001068:	f000 fb32 	bl	80016d0 <OneWire_WriteByte>

	/* Write bytes */
	OneWire_WriteByte(OW, th);
 800106c:	7dbb      	ldrb	r3, [r7, #22]
 800106e:	4619      	mov	r1, r3
 8001070:	68f8      	ldr	r0, [r7, #12]
 8001072:	f000 fb2d 	bl	80016d0 <OneWire_WriteByte>
	OneWire_WriteByte(OW, tl);
 8001076:	7d7b      	ldrb	r3, [r7, #21]
 8001078:	4619      	mov	r1, r3
 800107a:	68f8      	ldr	r0, [r7, #12]
 800107c:	f000 fb28 	bl	80016d0 <OneWire_WriteByte>
	OneWire_WriteByte(OW, conf);
 8001080:	7dfb      	ldrb	r3, [r7, #23]
 8001082:	4619      	mov	r1, r3
 8001084:	68f8      	ldr	r0, [r7, #12]
 8001086:	f000 fb23 	bl	80016d0 <OneWire_WriteByte>

	/* Reset line */
	OneWire_Reset(OW);
 800108a:	68f8      	ldr	r0, [r7, #12]
 800108c:	f000 fb5f 	bl	800174e <OneWire_Reset>

	/* Select ROM number */
	OneWire_SelectWithPointer(OW, ROM);
 8001090:	68b9      	ldr	r1, [r7, #8]
 8001092:	68f8      	ldr	r0, [r7, #12]
 8001094:	f000 fc93 	bl	80019be <OneWire_SelectWithPointer>

	/* Copy scratchpad to EEPROM of DS18B20 */
	OneWire_WriteByte(OW, DS18B20_CMD_COPYSCRATCHPAD);
 8001098:	2148      	movs	r1, #72	; 0x48
 800109a:	68f8      	ldr	r0, [r7, #12]
 800109c:	f000 fb18 	bl	80016d0 <OneWire_WriteByte>

	return 1;
 80010a0:	2301      	movs	r3, #1
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3718      	adds	r7, #24
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <DS18B20_StartAll>:
/**
  * @brief  The function is used as start all ROM device
  * @param  OW			OneWire HandleTypedef
  */
void DS18B20_StartAll(OneWire_t* OW)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b082      	sub	sp, #8
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
	/* Reset pulse */
	OneWire_Reset(OW);
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f000 fb4b 	bl	800174e <OneWire_Reset>

	/* Skip rom */
	OneWire_WriteByte(OW, ONEWIRE_CMD_SKIPROM);
 80010b8:	21cc      	movs	r1, #204	; 0xcc
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f000 fb08 	bl	80016d0 <OneWire_WriteByte>

	/* Start conversion on all connected devices */
	OneWire_WriteByte(OW, DS18B20_CMD_CONVERT);
 80010c0:	2144      	movs	r1, #68	; 0x44
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f000 fb04 	bl	80016d0 <OneWire_WriteByte>
}
 80010c8:	bf00      	nop
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <DS18B20_Read>:
  * @param  OW				OneWire HandleTypedef
  * @param  ROM				Pointer to ROM number
  * @param  Destination		Pointer to return value
  */
uint8_t DS18B20_Read(OneWire_t* OW, uint8_t *ROM, float *Destination)
{
 80010d0:	b590      	push	{r4, r7, lr}
 80010d2:	b08b      	sub	sp, #44	; 0x2c
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	60f8      	str	r0, [r7, #12]
 80010d8:	60b9      	str	r1, [r7, #8]
 80010da:	607a      	str	r2, [r7, #4]
	uint16_t temperature;
	uint8_t resolution;
	int8_t digit, minus = 0;
 80010dc:	2300      	movs	r3, #0
 80010de:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	float decimal;
	uint8_t i = 0;
 80010e2:	2300      	movs	r3, #0
 80010e4:	77fb      	strb	r3, [r7, #31]
	uint8_t data[9];
	uint8_t crc;

	/* Check if device is DS18B20 */
	if (!DS18B20_IsValid(ROM)) return 0;
 80010e6:	68b8      	ldr	r0, [r7, #8]
 80010e8:	f7ff ff46 	bl	8000f78 <DS18B20_IsValid>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d101      	bne.n	80010f6 <DS18B20_Read+0x26>
 80010f2:	2300      	movs	r3, #0
 80010f4:	e0e8      	b.n	80012c8 <DS18B20_Read+0x1f8>

	/* Wait until line is released, then coversion is completed */
	while(!OneWire_ReadBit(OW)) {};
 80010f6:	bf00      	nop
 80010f8:	68f8      	ldr	r0, [r7, #12]
 80010fa:	f000 fac1 	bl	8001680 <OneWire_ReadBit>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d0f9      	beq.n	80010f8 <DS18B20_Read+0x28>

	/* Reset line */
	OneWire_Reset(OW);
 8001104:	68f8      	ldr	r0, [r7, #12]
 8001106:	f000 fb22 	bl	800174e <OneWire_Reset>

	/* Select ROM number */
	OneWire_SelectWithPointer(OW, ROM);
 800110a:	68b9      	ldr	r1, [r7, #8]
 800110c:	68f8      	ldr	r0, [r7, #12]
 800110e:	f000 fc56 	bl	80019be <OneWire_SelectWithPointer>

	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OW, DS18B20_CMD_READSCRATCHPAD);
 8001112:	21be      	movs	r1, #190	; 0xbe
 8001114:	68f8      	ldr	r0, [r7, #12]
 8001116:	f000 fadb 	bl	80016d0 <OneWire_WriteByte>

	/* Get data */
	for (i = 0; i < 9; i++) {
 800111a:	2300      	movs	r3, #0
 800111c:	77fb      	strb	r3, [r7, #31]
 800111e:	e00d      	b.n	800113c <DS18B20_Read+0x6c>
		/* Read byte by byte */
		data[i] = OneWire_ReadByte(OW);
 8001120:	7ffc      	ldrb	r4, [r7, #31]
 8001122:	68f8      	ldr	r0, [r7, #12]
 8001124:	f000 faf2 	bl	800170c <OneWire_ReadByte>
 8001128:	4603      	mov	r3, r0
 800112a:	461a      	mov	r2, r3
 800112c:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8001130:	443b      	add	r3, r7
 8001132:	f803 2c14 	strb.w	r2, [r3, #-20]
	for (i = 0; i < 9; i++) {
 8001136:	7ffb      	ldrb	r3, [r7, #31]
 8001138:	3301      	adds	r3, #1
 800113a:	77fb      	strb	r3, [r7, #31]
 800113c:	7ffb      	ldrb	r3, [r7, #31]
 800113e:	2b08      	cmp	r3, #8
 8001140:	d9ee      	bls.n	8001120 <DS18B20_Read+0x50>
	}

	/* Calculate CRC */
	crc = OneWire_CRC8(data, 8);
 8001142:	f107 0314 	add.w	r3, r7, #20
 8001146:	2108      	movs	r1, #8
 8001148:	4618      	mov	r0, r3
 800114a:	f000 fc57 	bl	80019fc <OneWire_CRC8>
 800114e:	4603      	mov	r3, r0
 8001150:	77bb      	strb	r3, [r7, #30]

	/* Check if CRC is ok */
	if (crc != data[8]) {
 8001152:	7f3b      	ldrb	r3, [r7, #28]
 8001154:	7fba      	ldrb	r2, [r7, #30]
 8001156:	429a      	cmp	r2, r3
 8001158:	d001      	beq.n	800115e <DS18B20_Read+0x8e>
		/* CRC invalid */
		return 0;
 800115a:	2300      	movs	r3, #0
 800115c:	e0b4      	b.n	80012c8 <DS18B20_Read+0x1f8>
	}

	/* First two bytes of scratchpad are temperature values */
	temperature = data[0] | (data[1] << 8);
 800115e:	7d3b      	ldrb	r3, [r7, #20]
 8001160:	b21a      	sxth	r2, r3
 8001162:	7d7b      	ldrb	r3, [r7, #21]
 8001164:	021b      	lsls	r3, r3, #8
 8001166:	b21b      	sxth	r3, r3
 8001168:	4313      	orrs	r3, r2
 800116a:	b21b      	sxth	r3, r3
 800116c:	84fb      	strh	r3, [r7, #38]	; 0x26

	/* Reset line */
	OneWire_Reset(OW);
 800116e:	68f8      	ldr	r0, [r7, #12]
 8001170:	f000 faed 	bl	800174e <OneWire_Reset>

	/* Check if temperature is negative */
	if (temperature & 0x8000) {
 8001174:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001178:	2b00      	cmp	r3, #0
 800117a:	da05      	bge.n	8001188 <DS18B20_Read+0xb8>
		/* Two's complement, temperature is negative */
		temperature = ~temperature + 1;
 800117c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800117e:	425b      	negs	r3, r3
 8001180:	84fb      	strh	r3, [r7, #38]	; 0x26
		minus = 1;
 8001182:	2301      	movs	r3, #1
 8001184:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	}

	/* Get sensor resolution */
	resolution = ((data[4] & 0x60) >> 5) + 9;
 8001188:	7e3b      	ldrb	r3, [r7, #24]
 800118a:	115b      	asrs	r3, r3, #5
 800118c:	b2db      	uxtb	r3, r3
 800118e:	f003 0303 	and.w	r3, r3, #3
 8001192:	b2db      	uxtb	r3, r3
 8001194:	3309      	adds	r3, #9
 8001196:	777b      	strb	r3, [r7, #29]

	/* Store temperature integer digits and decimal digits */
	digit = temperature >> 4;
 8001198:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800119a:	091b      	lsrs	r3, r3, #4
 800119c:	b29b      	uxth	r3, r3
 800119e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	digit |= ((temperature >> 8) & 0x7) << 4;
 80011a2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80011a4:	0a1b      	lsrs	r3, r3, #8
 80011a6:	b29b      	uxth	r3, r3
 80011a8:	011b      	lsls	r3, r3, #4
 80011aa:	b25b      	sxtb	r3, r3
 80011ac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80011b0:	b25a      	sxtb	r2, r3
 80011b2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80011b6:	4313      	orrs	r3, r2
 80011b8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	/* Store decimal digits */
	switch (resolution) {
 80011bc:	7f7b      	ldrb	r3, [r7, #29]
 80011be:	3b09      	subs	r3, #9
 80011c0:	2b03      	cmp	r3, #3
 80011c2:	d859      	bhi.n	8001278 <DS18B20_Read+0x1a8>
 80011c4:	a201      	add	r2, pc, #4	; (adr r2, 80011cc <DS18B20_Read+0xfc>)
 80011c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011ca:	bf00      	nop
 80011cc:	080011dd 	.word	0x080011dd
 80011d0:	08001205 	.word	0x08001205
 80011d4:	0800122d 	.word	0x0800122d
 80011d8:	08001255 	.word	0x08001255
		case 9: {
			decimal = (temperature >> 3) & 0x01;
 80011dc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80011de:	08db      	lsrs	r3, r3, #3
 80011e0:	b29b      	uxth	r3, r3
 80011e2:	f003 0301 	and.w	r3, r3, #1
 80011e6:	ee07 3a90 	vmov	s15, r3
 80011ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011ee:	edc7 7a08 	vstr	s15, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_9BIT;
 80011f2:	edd7 7a08 	vldr	s15, [r7, #32]
 80011f6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80011fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011fe:	edc7 7a08 	vstr	s15, [r7, #32]
		} break;
 8001202:	e03e      	b.n	8001282 <DS18B20_Read+0x1b2>
		case 10: {
			decimal = (temperature >> 2) & 0x03;
 8001204:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001206:	089b      	lsrs	r3, r3, #2
 8001208:	b29b      	uxth	r3, r3
 800120a:	f003 0303 	and.w	r3, r3, #3
 800120e:	ee07 3a90 	vmov	s15, r3
 8001212:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001216:	edc7 7a08 	vstr	s15, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_10BIT;
 800121a:	edd7 7a08 	vldr	s15, [r7, #32]
 800121e:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8001222:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001226:	edc7 7a08 	vstr	s15, [r7, #32]
		} break;
 800122a:	e02a      	b.n	8001282 <DS18B20_Read+0x1b2>
		case 11: {
			decimal = (temperature >> 1) & 0x07;
 800122c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800122e:	085b      	lsrs	r3, r3, #1
 8001230:	b29b      	uxth	r3, r3
 8001232:	f003 0307 	and.w	r3, r3, #7
 8001236:	ee07 3a90 	vmov	s15, r3
 800123a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800123e:	edc7 7a08 	vstr	s15, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_11BIT;
 8001242:	edd7 7a08 	vldr	s15, [r7, #32]
 8001246:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 800124a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800124e:	edc7 7a08 	vstr	s15, [r7, #32]
		} break;
 8001252:	e016      	b.n	8001282 <DS18B20_Read+0x1b2>
		case 12: {
			decimal = temperature & 0x0F;
 8001254:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001256:	f003 030f 	and.w	r3, r3, #15
 800125a:	ee07 3a90 	vmov	s15, r3
 800125e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001262:	edc7 7a08 	vstr	s15, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_12BIT;
 8001266:	edd7 7a08 	vldr	s15, [r7, #32]
 800126a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80012d0 <DS18B20_Read+0x200>
 800126e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001272:	edc7 7a08 	vstr	s15, [r7, #32]
		} break;
 8001276:	e004      	b.n	8001282 <DS18B20_Read+0x1b2>
		default: {
			decimal = 0xFF;
 8001278:	4b16      	ldr	r3, [pc, #88]	; (80012d4 <DS18B20_Read+0x204>)
 800127a:	623b      	str	r3, [r7, #32]
			digit = 0;
 800127c:	2300      	movs	r3, #0
 800127e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		}
	}

	/* Check for negative part */
	decimal = digit + decimal;
 8001282:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8001286:	ee07 3a90 	vmov	s15, r3
 800128a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800128e:	ed97 7a08 	vldr	s14, [r7, #32]
 8001292:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001296:	edc7 7a08 	vstr	s15, [r7, #32]
	if (minus) {
 800129a:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d007      	beq.n	80012b2 <DS18B20_Read+0x1e2>
		decimal = 0 - decimal;
 80012a2:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80012d8 <DS18B20_Read+0x208>
 80012a6:	edd7 7a08 	vldr	s15, [r7, #32]
 80012aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012ae:	edc7 7a08 	vstr	s15, [r7, #32]
	}

	/* Set to pointer */
	*Destination = decimal;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6a3a      	ldr	r2, [r7, #32]
 80012b6:	601a      	str	r2, [r3, #0]

	/* Return 1, temperature valid */
	return decimal;
 80012b8:	edd7 7a08 	vldr	s15, [r7, #32]
 80012bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012c0:	edc7 7a00 	vstr	s15, [r7]
 80012c4:	783b      	ldrb	r3, [r7, #0]
 80012c6:	b2db      	uxtb	r3, r3
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	372c      	adds	r7, #44	; 0x2c
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd90      	pop	{r4, r7, pc}
 80012d0:	3d800000 	.word	0x3d800000
 80012d4:	437f0000 	.word	0x437f0000
 80012d8:	00000000 	.word	0x00000000

080012dc <DS18B20_SetTempAlarm>:
  * @param  Low		Low temperature alarm, value > -55, 0 = reset
  * @param  High	High temperature alarm,, value < 125, 0 = reset
  */
uint8_t DS18B20_SetTempAlarm(OneWire_t* OW, uint8_t *ROM, int8_t Low,
		int8_t High)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b086      	sub	sp, #24
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	60f8      	str	r0, [r7, #12]
 80012e4:	60b9      	str	r1, [r7, #8]
 80012e6:	4611      	mov	r1, r2
 80012e8:	461a      	mov	r2, r3
 80012ea:	460b      	mov	r3, r1
 80012ec:	71fb      	strb	r3, [r7, #7]
 80012ee:	4613      	mov	r3, r2
 80012f0:	71bb      	strb	r3, [r7, #6]
	uint8_t tl, th, conf;

	/* Check if device is DS18B20 */
	if (!DS18B20_IsValid(ROM)) return 0;
 80012f2:	68b8      	ldr	r0, [r7, #8]
 80012f4:	f7ff fe40 	bl	8000f78 <DS18B20_IsValid>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d101      	bne.n	8001302 <DS18B20_SetTempAlarm+0x26>
 80012fe:	2300      	movs	r3, #0
 8001300:	e065      	b.n	80013ce <DS18B20_SetTempAlarm+0xf2>

	Low = ((Low < -55) || (Low == 0)) ? -55 : Low;
 8001302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001306:	f113 0f37 	cmn.w	r3, #55	; 0x37
 800130a:	db06      	blt.n	800131a <DS18B20_SetTempAlarm+0x3e>
 800130c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d002      	beq.n	800131a <DS18B20_SetTempAlarm+0x3e>
 8001314:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001318:	e001      	b.n	800131e <DS18B20_SetTempAlarm+0x42>
 800131a:	f06f 0336 	mvn.w	r3, #54	; 0x36
 800131e:	71fb      	strb	r3, [r7, #7]
	High = ((High > 125) || (High == 0)) ? 125 : High;
 8001320:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001324:	2b7d      	cmp	r3, #125	; 0x7d
 8001326:	dc06      	bgt.n	8001336 <DS18B20_SetTempAlarm+0x5a>
 8001328:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d002      	beq.n	8001336 <DS18B20_SetTempAlarm+0x5a>
 8001330:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001334:	e000      	b.n	8001338 <DS18B20_SetTempAlarm+0x5c>
 8001336:	237d      	movs	r3, #125	; 0x7d
 8001338:	71bb      	strb	r3, [r7, #6]

	/* Reset line */
	OneWire_Reset(OW);
 800133a:	68f8      	ldr	r0, [r7, #12]
 800133c:	f000 fa07 	bl	800174e <OneWire_Reset>

	/* Select ROM number */
	OneWire_SelectWithPointer(OW, ROM);
 8001340:	68b9      	ldr	r1, [r7, #8]
 8001342:	68f8      	ldr	r0, [r7, #12]
 8001344:	f000 fb3b 	bl	80019be <OneWire_SelectWithPointer>

	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OW, DS18B20_CMD_READSCRATCHPAD);
 8001348:	21be      	movs	r1, #190	; 0xbe
 800134a:	68f8      	ldr	r0, [r7, #12]
 800134c:	f000 f9c0 	bl	80016d0 <OneWire_WriteByte>

	/* Ignore first 2 bytes */
	OneWire_ReadByte(OW);
 8001350:	68f8      	ldr	r0, [r7, #12]
 8001352:	f000 f9db 	bl	800170c <OneWire_ReadByte>
	OneWire_ReadByte(OW);
 8001356:	68f8      	ldr	r0, [r7, #12]
 8001358:	f000 f9d8 	bl	800170c <OneWire_ReadByte>

	th = OneWire_ReadByte(OW);
 800135c:	68f8      	ldr	r0, [r7, #12]
 800135e:	f000 f9d5 	bl	800170c <OneWire_ReadByte>
 8001362:	4603      	mov	r3, r0
 8001364:	75fb      	strb	r3, [r7, #23]
	tl = OneWire_ReadByte(OW);
 8001366:	68f8      	ldr	r0, [r7, #12]
 8001368:	f000 f9d0 	bl	800170c <OneWire_ReadByte>
 800136c:	4603      	mov	r3, r0
 800136e:	75bb      	strb	r3, [r7, #22]
	conf = OneWire_ReadByte(OW);
 8001370:	68f8      	ldr	r0, [r7, #12]
 8001372:	f000 f9cb 	bl	800170c <OneWire_ReadByte>
 8001376:	4603      	mov	r3, r0
 8001378:	757b      	strb	r3, [r7, #21]

	th = (uint8_t)High;
 800137a:	79bb      	ldrb	r3, [r7, #6]
 800137c:	75fb      	strb	r3, [r7, #23]
	tl = (uint8_t)Low;
 800137e:	79fb      	ldrb	r3, [r7, #7]
 8001380:	75bb      	strb	r3, [r7, #22]

	/* Reset line */
	OneWire_Reset(OW);
 8001382:	68f8      	ldr	r0, [r7, #12]
 8001384:	f000 f9e3 	bl	800174e <OneWire_Reset>

	/* Select ROM number */
	OneWire_SelectWithPointer(OW, ROM);
 8001388:	68b9      	ldr	r1, [r7, #8]
 800138a:	68f8      	ldr	r0, [r7, #12]
 800138c:	f000 fb17 	bl	80019be <OneWire_SelectWithPointer>

	/* Write scratchpad command by onewire protocol, only th, tl and conf
	 * register can be written */
	OneWire_WriteByte(OW, DS18B20_CMD_WRITESCRATCHPAD);
 8001390:	214e      	movs	r1, #78	; 0x4e
 8001392:	68f8      	ldr	r0, [r7, #12]
 8001394:	f000 f99c 	bl	80016d0 <OneWire_WriteByte>

	/* Write bytes */
	OneWire_WriteByte(OW, th);
 8001398:	7dfb      	ldrb	r3, [r7, #23]
 800139a:	4619      	mov	r1, r3
 800139c:	68f8      	ldr	r0, [r7, #12]
 800139e:	f000 f997 	bl	80016d0 <OneWire_WriteByte>
	OneWire_WriteByte(OW, tl);
 80013a2:	7dbb      	ldrb	r3, [r7, #22]
 80013a4:	4619      	mov	r1, r3
 80013a6:	68f8      	ldr	r0, [r7, #12]
 80013a8:	f000 f992 	bl	80016d0 <OneWire_WriteByte>
	OneWire_WriteByte(OW, conf);
 80013ac:	7d7b      	ldrb	r3, [r7, #21]
 80013ae:	4619      	mov	r1, r3
 80013b0:	68f8      	ldr	r0, [r7, #12]
 80013b2:	f000 f98d 	bl	80016d0 <OneWire_WriteByte>

	/* Reset line */
	OneWire_Reset(OW);
 80013b6:	68f8      	ldr	r0, [r7, #12]
 80013b8:	f000 f9c9 	bl	800174e <OneWire_Reset>

	/* Select ROM number */
	OneWire_SelectWithPointer(OW, ROM);
 80013bc:	68b9      	ldr	r1, [r7, #8]
 80013be:	68f8      	ldr	r0, [r7, #12]
 80013c0:	f000 fafd 	bl	80019be <OneWire_SelectWithPointer>

	/* Copy scratchpad to EEPROM of DS18B20 */
	OneWire_WriteByte(OW, DS18B20_CMD_COPYSCRATCHPAD);
 80013c4:	2148      	movs	r1, #72	; 0x48
 80013c6:	68f8      	ldr	r0, [r7, #12]
 80013c8:	f000 f982 	bl	80016d0 <OneWire_WriteByte>

	return 1;
 80013cc:	2301      	movs	r3, #1
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3718      	adds	r7, #24
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <DS18B20_AlarmSearch>:
  * @retval status of search, OK = 1, Failed = 0
  * @param  DS		DS18B20 HandleTypedef
  * @param  OW		OneWire HandleTypedef
  */
uint8_t DS18B20_AlarmSearch(DS18B20_Drv_t *DS, OneWire_t* OW)
{
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b084      	sub	sp, #16
 80013da:	af00      	add	r7, sp, #0
 80013dc:	6078      	str	r0, [r7, #4]
 80013de:	6039      	str	r1, [r7, #0]
	uint8_t t = 0;
 80013e0:	2300      	movs	r3, #0
 80013e2:	73fb      	strb	r3, [r7, #15]

	/* Reset Alarm in DS */
	for(uint8_t i = 0; i < DS18B20_MaxCnt; i++)
 80013e4:	2300      	movs	r3, #0
 80013e6:	73bb      	strb	r3, [r7, #14]
 80013e8:	e014      	b.n	8001414 <DS18B20_AlarmSearch+0x3e>
	{
		for(uint8_t j = 0; j < 8; j++)
 80013ea:	2300      	movs	r3, #0
 80013ec:	737b      	strb	r3, [r7, #13]
 80013ee:	e00b      	b.n	8001408 <DS18B20_AlarmSearch+0x32>
		{
			DS->AlmAddr[i][j] = 0;
 80013f0:	7bba      	ldrb	r2, [r7, #14]
 80013f2:	7b7b      	ldrb	r3, [r7, #13]
 80013f4:	6879      	ldr	r1, [r7, #4]
 80013f6:	00d2      	lsls	r2, r2, #3
 80013f8:	440a      	add	r2, r1
 80013fa:	4413      	add	r3, r2
 80013fc:	3310      	adds	r3, #16
 80013fe:	2200      	movs	r2, #0
 8001400:	701a      	strb	r2, [r3, #0]
		for(uint8_t j = 0; j < 8; j++)
 8001402:	7b7b      	ldrb	r3, [r7, #13]
 8001404:	3301      	adds	r3, #1
 8001406:	737b      	strb	r3, [r7, #13]
 8001408:	7b7b      	ldrb	r3, [r7, #13]
 800140a:	2b07      	cmp	r3, #7
 800140c:	d9f0      	bls.n	80013f0 <DS18B20_AlarmSearch+0x1a>
	for(uint8_t i = 0; i < DS18B20_MaxCnt; i++)
 800140e:	7bbb      	ldrb	r3, [r7, #14]
 8001410:	3301      	adds	r3, #1
 8001412:	73bb      	strb	r3, [r7, #14]
 8001414:	7bbb      	ldrb	r3, [r7, #14]
 8001416:	2b01      	cmp	r3, #1
 8001418:	d9e7      	bls.n	80013ea <DS18B20_AlarmSearch+0x14>
		}
	}

	/* Start alarm search */
	while (OneWire_Search(OW, DS18B20_CMD_ALARM_SEARCH))
 800141a:	e00b      	b.n	8001434 <DS18B20_AlarmSearch+0x5e>
	{
		/* Store ROM of device which has alarm flag set */
		OneWire_GetDevRom(OW, DS->AlmAddr[t]);
 800141c:	7bfb      	ldrb	r3, [r7, #15]
 800141e:	3302      	adds	r3, #2
 8001420:	00db      	lsls	r3, r3, #3
 8001422:	687a      	ldr	r2, [r7, #4]
 8001424:	4413      	add	r3, r2
 8001426:	4619      	mov	r1, r3
 8001428:	6838      	ldr	r0, [r7, #0]
 800142a:	f000 fa7b 	bl	8001924 <OneWire_GetDevRom>
		t++;
 800142e:	7bfb      	ldrb	r3, [r7, #15]
 8001430:	3301      	adds	r3, #1
 8001432:	73fb      	strb	r3, [r7, #15]
	while (OneWire_Search(OW, DS18B20_CMD_ALARM_SEARCH))
 8001434:	21ec      	movs	r1, #236	; 0xec
 8001436:	6838      	ldr	r0, [r7, #0]
 8001438:	f000 f9ae 	bl	8001798 <OneWire_Search>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d1ec      	bne.n	800141c <DS18B20_AlarmSearch+0x46>
	}
	return (t > 0) ? 1 : 0;
 8001442:	7bfb      	ldrb	r3, [r7, #15]
 8001444:	2b00      	cmp	r3, #0
 8001446:	bf14      	ite	ne
 8001448:	2301      	movne	r3, #1
 800144a:	2300      	moveq	r3, #0
 800144c:	b2db      	uxtb	r3, r3
}
 800144e:	4618      	mov	r0, r3
 8001450:	3710      	adds	r7, #16
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}

08001456 <DS18B20_Init>:
  * @retval Rom detect status, OK = 1, No Rom detected = 0
  * @param  DS			DS18B20 HandleTypedef
  * @param  OW			OneWire HandleTypedef
  */
uint8_t DS18B20_Init(DS18B20_Drv_t *DS, OneWire_t *OW)
{
 8001456:	b580      	push	{r7, lr}
 8001458:	b082      	sub	sp, #8
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
 800145e:	6039      	str	r1, [r7, #0]
	/* Initialize OneWire and reset all data */
	OneWire_Init(OW);
 8001460:	6838      	ldr	r0, [r7, #0]
 8001462:	f000 fa7c 	bl	800195e <OneWire_Init>

	/* Search all OneWire devices ROM */
	while(1)
	{
		/* Start searching for OneWire devices along the line */
		if(OneWire_Search(OW, ONEWIRE_CMD_SEARCHROM) != 1) break;
 8001466:	21f0      	movs	r1, #240	; 0xf0
 8001468:	6838      	ldr	r0, [r7, #0]
 800146a:	f000 f995 	bl	8001798 <OneWire_Search>
 800146e:	4603      	mov	r3, r0
 8001470:	2b01      	cmp	r3, #1
 8001472:	d121      	bne.n	80014b8 <DS18B20_Init+0x62>

		/* Get device ROM */
		OneWire_GetDevRom(OW, DS->DevAddr[OW->RomCnt]);
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	7adb      	ldrb	r3, [r3, #11]
 8001478:	00db      	lsls	r3, r3, #3
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	4413      	add	r3, r2
 800147e:	4619      	mov	r1, r3
 8001480:	6838      	ldr	r0, [r7, #0]
 8001482:	f000 fa4f 	bl	8001924 <OneWire_GetDevRom>

		/* Set ROM Resolution */
		DS18B20_SetResolution(OW, &OW->RomCnt, DS->Resolution);
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	f103 010b 	add.w	r1, r3, #11
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001492:	461a      	mov	r2, r3
 8001494:	6838      	ldr	r0, [r7, #0]
 8001496:	f7ff fd80 	bl	8000f9a <DS18B20_SetResolution>

		/* Reset Temperature Alarm */
		DS18B20_SetTempAlarm(OW, &OW->RomCnt, 0, 0);
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	f103 010b 	add.w	r1, r3, #11
 80014a0:	2300      	movs	r3, #0
 80014a2:	2200      	movs	r2, #0
 80014a4:	6838      	ldr	r0, [r7, #0]
 80014a6:	f7ff ff19 	bl	80012dc <DS18B20_SetTempAlarm>

		OW->RomCnt++;
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	7adb      	ldrb	r3, [r3, #11]
 80014ae:	3301      	adds	r3, #1
 80014b0:	b2da      	uxtb	r2, r3
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	72da      	strb	r2, [r3, #11]
		if(OneWire_Search(OW, ONEWIRE_CMD_SEARCHROM) != 1) break;
 80014b6:	e7d6      	b.n	8001466 <DS18B20_Init+0x10>
 80014b8:	bf00      	nop
	}

	return (OW->RomCnt != 0) ? 1 : 0;
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	7adb      	ldrb	r3, [r3, #11]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	bf14      	ite	ne
 80014c2:	2301      	movne	r3, #1
 80014c4:	2300      	moveq	r3, #0
 80014c6:	b2db      	uxtb	r3, r3
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3708      	adds	r7, #8
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <DwtInit>:

/**
  * @brief  Initialize DWT
  */
void DwtInit(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
	SysCClk 		= (SystemCoreClock / 1000000);	// Calculate in us
 80014d4:	4b10      	ldr	r3, [pc, #64]	; (8001518 <DwtInit+0x48>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a10      	ldr	r2, [pc, #64]	; (800151c <DwtInit+0x4c>)
 80014da:	fba2 2303 	umull	r2, r3, r2, r3
 80014de:	0c9b      	lsrs	r3, r3, #18
 80014e0:	4a0f      	ldr	r2, [pc, #60]	; (8001520 <DwtInit+0x50>)
 80014e2:	6013      	str	r3, [r2, #0]
	DWT_LAR			|= DWT_LAR_UNLOCK;
 80014e4:	4b0f      	ldr	r3, [pc, #60]	; (8001524 <DwtInit+0x54>)
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	490e      	ldr	r1, [pc, #56]	; (8001524 <DwtInit+0x54>)
 80014ea:	4b0f      	ldr	r3, [pc, #60]	; (8001528 <DwtInit+0x58>)
 80014ec:	4313      	orrs	r3, r2
 80014ee:	600b      	str	r3, [r1, #0]
	DEM_CR			|= (uint32_t)DEM_CR_TRCENA;
 80014f0:	4b0e      	ldr	r3, [pc, #56]	; (800152c <DwtInit+0x5c>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a0d      	ldr	r2, [pc, #52]	; (800152c <DwtInit+0x5c>)
 80014f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014fa:	6013      	str	r3, [r2, #0]
	DWT_CYCCNT		= (uint32_t)0u;					// Reset the clock counter
 80014fc:	4b0c      	ldr	r3, [pc, #48]	; (8001530 <DwtInit+0x60>)
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]
	DWT_CR			|= (uint32_t)DWT_CR_CYCCNTENA;
 8001502:	4b0c      	ldr	r3, [pc, #48]	; (8001534 <DwtInit+0x64>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a0b      	ldr	r2, [pc, #44]	; (8001534 <DwtInit+0x64>)
 8001508:	f043 0301 	orr.w	r3, r3, #1
 800150c:	6013      	str	r3, [r2, #0]
}
 800150e:	bf00      	nop
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr
 8001518:	10000050 	.word	0x10000050
 800151c:	431bde83 	.word	0x431bde83
 8001520:	2000001c 	.word	0x2000001c
 8001524:	e0001fb0 	.word	0xe0001fb0
 8001528:	c5acce55 	.word	0xc5acce55
 800152c:	e000edfc 	.word	0xe000edfc
 8001530:	e0001004 	.word	0xe0001004
 8001534:	e0001000 	.word	0xe0001000

08001538 <DwtDelay_us>:
/**
  * @brief  Function to delay in microsecond
  * @param	usec	Period in microsecond
  */
inline void DwtDelay_us(uint32_t usec)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
	start = DWT_CYCCNT;
 8001540:	4b0b      	ldr	r3, [pc, #44]	; (8001570 <DwtDelay_us+0x38>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a0b      	ldr	r2, [pc, #44]	; (8001574 <DwtDelay_us+0x3c>)
 8001546:	6013      	str	r3, [r2, #0]
	while(((DWT_CYCCNT - start) / SysCClk) < usec) {};
 8001548:	bf00      	nop
 800154a:	4b09      	ldr	r3, [pc, #36]	; (8001570 <DwtDelay_us+0x38>)
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	4b09      	ldr	r3, [pc, #36]	; (8001574 <DwtDelay_us+0x3c>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	1ad2      	subs	r2, r2, r3
 8001554:	4b08      	ldr	r3, [pc, #32]	; (8001578 <DwtDelay_us+0x40>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	fbb2 f3f3 	udiv	r3, r2, r3
 800155c:	687a      	ldr	r2, [r7, #4]
 800155e:	429a      	cmp	r2, r3
 8001560:	d8f3      	bhi.n	800154a <DwtDelay_us+0x12>
}
 8001562:	bf00      	nop
 8001564:	bf00      	nop
 8001566:	370c      	adds	r7, #12
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr
 8001570:	e0001004 	.word	0xe0001004
 8001574:	20000020 	.word	0x20000020
 8001578:	2000001c 	.word	0x2000001c

0800157c <OneWire_Pin_Mode>:
  * @brief  The internal function is used as gpio pin mode
  * @param  OW		OneWire HandleTypedef
  * @param  Mode	Input or Output
  */
static void OneWire_Pin_Mode(OneWire_t* OW, PinMode Mode)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b088      	sub	sp, #32
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	460b      	mov	r3, r1
 8001586:	70fb      	strb	r3, [r7, #3]
		LL_GPIO_SetPinMode(OW->DataPort, OW->DataPin, LL_GPIO_MODE_INPUT);
	}else{
		LL_GPIO_SetPinMode(OW->DataPort, OW->DataPin, LL_GPIO_MODE_OUTPUT);
	}
#else
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001588:	f107 030c 	add.w	r3, r7, #12
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	605a      	str	r2, [r3, #4]
 8001592:	609a      	str	r2, [r3, #8]
 8001594:	60da      	str	r2, [r3, #12]
 8001596:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = OW->DataPin;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	899b      	ldrh	r3, [r3, #12]
 800159c:	60fb      	str	r3, [r7, #12]
	if(Mode == Input)
 800159e:	78fb      	ldrb	r3, [r7, #3]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d102      	bne.n	80015aa <OneWire_Pin_Mode+0x2e>
	{
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015a4:	2300      	movs	r3, #0
 80015a6:	613b      	str	r3, [r7, #16]
 80015a8:	e001      	b.n	80015ae <OneWire_Pin_Mode+0x32>
	}else{
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015aa:	2301      	movs	r3, #1
 80015ac:	613b      	str	r3, [r7, #16]
	}
	HAL_GPIO_Init(OW->DataPort, &GPIO_InitStruct);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	691b      	ldr	r3, [r3, #16]
 80015b2:	f107 020c 	add.w	r2, r7, #12
 80015b6:	4611      	mov	r1, r2
 80015b8:	4618      	mov	r0, r3
 80015ba:	f00b fd11 	bl	800cfe0 <HAL_GPIO_Init>
#endif
}
 80015be:	bf00      	nop
 80015c0:	3720      	adds	r7, #32
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <OneWire_Pin_Level>:
  * @brief  The internal function is used as gpio pin level
  * @param  OW		OneWire HandleTypedef
  * @param  Mode	Level: Set/High = 1, Reset/Low = 0
  */
static void OneWire_Pin_Level(OneWire_t* OW, uint8_t Level)
{
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b082      	sub	sp, #8
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
 80015ce:	460b      	mov	r3, r1
 80015d0:	70fb      	strb	r3, [r7, #3]
		LL_GPIO_SetOutputPin(OW->DataPort, OW->DataPin);
	}else{
		LL_GPIO_ResetOutputPin(OW->DataPort, OW->DataPin);
	}
#else
	HAL_GPIO_WritePin(OW->DataPort, OW->DataPin, Level);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6918      	ldr	r0, [r3, #16]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	899b      	ldrh	r3, [r3, #12]
 80015da:	78fa      	ldrb	r2, [r7, #3]
 80015dc:	4619      	mov	r1, r3
 80015de:	f00b feb3 	bl	800d348 <HAL_GPIO_WritePin>
#endif
}
 80015e2:	bf00      	nop
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}

080015ea <OneWire_Pin_Read>:
  * @brief  The internal function is used to read data pin
  * @retval Pin level status
  * @param  OW		OneWire HandleTypedef
  */
static uint8_t OneWire_Pin_Read(OneWire_t* OW)
{
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b082      	sub	sp, #8
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
#ifdef LL_Driver
	return ((OW->DataPort->IDR & OW->DataPin) != 0x00U) ? 1 : 0;
#else
	return HAL_GPIO_ReadPin(OW->DataPort, OW->DataPin);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	691a      	ldr	r2, [r3, #16]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	899b      	ldrh	r3, [r3, #12]
 80015fa:	4619      	mov	r1, r3
 80015fc:	4610      	mov	r0, r2
 80015fe:	f00b fe8b 	bl	800d318 <HAL_GPIO_ReadPin>
 8001602:	4603      	mov	r3, r0
#endif
}
 8001604:	4618      	mov	r0, r3
 8001606:	3708      	adds	r7, #8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <OneWire_WriteBit>:
  * @brief  The internal function is used to write bit
  * @param  OW		OneWire HandleTypedef
  * @param  bit		bit in 0 or 1
  */
static void OneWire_WriteBit(OneWire_t* OW, uint8_t bit)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	460b      	mov	r3, r1
 8001616:	70fb      	strb	r3, [r7, #3]
	if(bit)
 8001618:	78fb      	ldrb	r3, [r7, #3]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d016      	beq.n	800164c <OneWire_WriteBit+0x40>
	{
		/* Set line low */
		OneWire_Pin_Level(OW, 0);
 800161e:	2100      	movs	r1, #0
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f7ff ffd0 	bl	80015c6 <OneWire_Pin_Level>
		OneWire_Pin_Mode(OW, Output);
 8001626:	2101      	movs	r1, #1
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f7ff ffa7 	bl	800157c <OneWire_Pin_Mode>
		DwtDelay_us(10);
 800162e:	200a      	movs	r0, #10
 8001630:	f7ff ff82 	bl	8001538 <DwtDelay_us>

		/* Bit high */
		OneWire_Pin_Mode(OW, Input);
 8001634:	2100      	movs	r1, #0
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f7ff ffa0 	bl	800157c <OneWire_Pin_Mode>

		/* Wait for 55 us and release the line */
		DwtDelay_us(55);
 800163c:	2037      	movs	r0, #55	; 0x37
 800163e:	f7ff ff7b 	bl	8001538 <DwtDelay_us>
		OneWire_Pin_Mode(OW, Input);
 8001642:	2100      	movs	r1, #0
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f7ff ff99 	bl	800157c <OneWire_Pin_Mode>

		/* Wait for 5 us and release the line */
		DwtDelay_us(5);
		OneWire_Pin_Mode(OW, Input);
	}
}
 800164a:	e015      	b.n	8001678 <OneWire_WriteBit+0x6c>
		OneWire_Pin_Level(OW, 0);
 800164c:	2100      	movs	r1, #0
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f7ff ffb9 	bl	80015c6 <OneWire_Pin_Level>
		OneWire_Pin_Mode(OW, Output);
 8001654:	2101      	movs	r1, #1
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f7ff ff90 	bl	800157c <OneWire_Pin_Mode>
		DwtDelay_us(65);
 800165c:	2041      	movs	r0, #65	; 0x41
 800165e:	f7ff ff6b 	bl	8001538 <DwtDelay_us>
		OneWire_Pin_Mode(OW, Input);
 8001662:	2100      	movs	r1, #0
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f7ff ff89 	bl	800157c <OneWire_Pin_Mode>
		DwtDelay_us(5);
 800166a:	2005      	movs	r0, #5
 800166c:	f7ff ff64 	bl	8001538 <DwtDelay_us>
		OneWire_Pin_Mode(OW, Input);
 8001670:	2100      	movs	r1, #0
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f7ff ff82 	bl	800157c <OneWire_Pin_Mode>
}
 8001678:	bf00      	nop
 800167a:	3708      	adds	r7, #8
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}

08001680 <OneWire_ReadBit>:
  * @brief  The function is used to read bit
  * @retval bit
  * @param  OW		OneWire HandleTypedef
  */
uint8_t OneWire_ReadBit(OneWire_t* OW)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
	uint8_t bit = 0;
 8001688:	2300      	movs	r3, #0
 800168a:	73fb      	strb	r3, [r7, #15]

	/* Line low */
	OneWire_Pin_Level(OW, 0);
 800168c:	2100      	movs	r1, #0
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f7ff ff99 	bl	80015c6 <OneWire_Pin_Level>
	OneWire_Pin_Mode(OW, Output);
 8001694:	2101      	movs	r1, #1
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f7ff ff70 	bl	800157c <OneWire_Pin_Mode>
	DwtDelay_us(3);
 800169c:	2003      	movs	r0, #3
 800169e:	f7ff ff4b 	bl	8001538 <DwtDelay_us>

	/* Release line */
	OneWire_Pin_Mode(OW, Input);
 80016a2:	2100      	movs	r1, #0
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f7ff ff69 	bl	800157c <OneWire_Pin_Mode>
	DwtDelay_us(10);
 80016aa:	200a      	movs	r0, #10
 80016ac:	f7ff ff44 	bl	8001538 <DwtDelay_us>

	/* Read line value */
	if (OneWire_Pin_Read(OW))
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f7ff ff9a 	bl	80015ea <OneWire_Pin_Read>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <OneWire_ReadBit+0x40>
	{
		/* Bit is HIGH */
		bit = 1;
 80016bc:	2301      	movs	r3, #1
 80016be:	73fb      	strb	r3, [r7, #15]
	}

	/* Wait 50us to complete 60us period */
	DwtDelay_us(50);
 80016c0:	2032      	movs	r0, #50	; 0x32
 80016c2:	f7ff ff39 	bl	8001538 <DwtDelay_us>

	/* Return bit value */
	return bit;
 80016c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3710      	adds	r7, #16
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <OneWire_WriteByte>:
  * @brief  The function is used to write byte
  * @param  OW		OneWire HandleTypedef
  * @param  byte	byte to write
  */
void OneWire_WriteByte(OneWire_t* OW, uint8_t byte)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	460b      	mov	r3, r1
 80016da:	70fb      	strb	r3, [r7, #3]
	uint8_t bit = 8;
 80016dc:	2308      	movs	r3, #8
 80016de:	73fb      	strb	r3, [r7, #15]
	/* Write 8 bits */
	while (bit--) {
 80016e0:	e00a      	b.n	80016f8 <OneWire_WriteByte+0x28>
		/* LSB bit is first */
		OneWire_WriteBit(OW, byte & 0x01);
 80016e2:	78fb      	ldrb	r3, [r7, #3]
 80016e4:	f003 0301 	and.w	r3, r3, #1
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	4619      	mov	r1, r3
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f7ff ff8d 	bl	800160c <OneWire_WriteBit>
		byte >>= 1;
 80016f2:	78fb      	ldrb	r3, [r7, #3]
 80016f4:	085b      	lsrs	r3, r3, #1
 80016f6:	70fb      	strb	r3, [r7, #3]
	while (bit--) {
 80016f8:	7bfb      	ldrb	r3, [r7, #15]
 80016fa:	1e5a      	subs	r2, r3, #1
 80016fc:	73fa      	strb	r2, [r7, #15]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d1ef      	bne.n	80016e2 <OneWire_WriteByte+0x12>
	}
}
 8001702:	bf00      	nop
 8001704:	bf00      	nop
 8001706:	3710      	adds	r7, #16
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}

0800170c <OneWire_ReadByte>:
  * @brief  The function is used to read byte
  * @retval byte from device
  * @param  OW		OneWire HandleTypedef
  */
uint8_t OneWire_ReadByte(OneWire_t* OW)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
	uint8_t bit = 8, byte = 0;
 8001714:	2308      	movs	r3, #8
 8001716:	73fb      	strb	r3, [r7, #15]
 8001718:	2300      	movs	r3, #0
 800171a:	73bb      	strb	r3, [r7, #14]
	while (bit--) {
 800171c:	e00d      	b.n	800173a <OneWire_ReadByte+0x2e>
		byte >>= 1;
 800171e:	7bbb      	ldrb	r3, [r7, #14]
 8001720:	085b      	lsrs	r3, r3, #1
 8001722:	73bb      	strb	r3, [r7, #14]
		byte |= (OneWire_ReadBit(OW) << 7);
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f7ff ffab 	bl	8001680 <OneWire_ReadBit>
 800172a:	4603      	mov	r3, r0
 800172c:	01db      	lsls	r3, r3, #7
 800172e:	b25a      	sxtb	r2, r3
 8001730:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001734:	4313      	orrs	r3, r2
 8001736:	b25b      	sxtb	r3, r3
 8001738:	73bb      	strb	r3, [r7, #14]
	while (bit--) {
 800173a:	7bfb      	ldrb	r3, [r7, #15]
 800173c:	1e5a      	subs	r2, r3, #1
 800173e:	73fa      	strb	r2, [r7, #15]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d1ec      	bne.n	800171e <OneWire_ReadByte+0x12>
	}

	return byte;
 8001744:	7bbb      	ldrb	r3, [r7, #14]
}
 8001746:	4618      	mov	r0, r3
 8001748:	3710      	adds	r7, #16
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}

0800174e <OneWire_Reset>:
  * @brief  The function is used to reset device
  * @retval respond from device
  * @param  OW		OneWire HandleTypedef
  */
uint8_t OneWire_Reset(OneWire_t* OW)
{
 800174e:	b580      	push	{r7, lr}
 8001750:	b084      	sub	sp, #16
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
	/* Line low, and wait 480us */
	OneWire_Pin_Level(OW, 0);
 8001756:	2100      	movs	r1, #0
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	f7ff ff34 	bl	80015c6 <OneWire_Pin_Level>
	OneWire_Pin_Mode(OW, Output);
 800175e:	2101      	movs	r1, #1
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f7ff ff0b 	bl	800157c <OneWire_Pin_Mode>
	DwtDelay_us(480);
 8001766:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 800176a:	f7ff fee5 	bl	8001538 <DwtDelay_us>

	/* Release line and wait for 70us */
	OneWire_Pin_Mode(OW, Input);
 800176e:	2100      	movs	r1, #0
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	f7ff ff03 	bl	800157c <OneWire_Pin_Mode>
	DwtDelay_us(70);
 8001776:	2046      	movs	r0, #70	; 0x46
 8001778:	f7ff fede 	bl	8001538 <DwtDelay_us>

	/* Check bit value */
	uint8_t rslt = OneWire_Pin_Read(OW);
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f7ff ff34 	bl	80015ea <OneWire_Pin_Read>
 8001782:	4603      	mov	r3, r0
 8001784:	73fb      	strb	r3, [r7, #15]

	/* Delay for 410 us */
	DwtDelay_us(410);
 8001786:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 800178a:	f7ff fed5 	bl	8001538 <DwtDelay_us>

	return rslt;
 800178e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001790:	4618      	mov	r0, r3
 8001792:	3710      	adds	r7, #16
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}

08001798 <OneWire_Search>:
  * @brief  The function is used to search device
  * @retval Search result
  * @param  OW		OneWire HandleTypedef
  */
uint8_t OneWire_Search(OneWire_t* OW, uint8_t Cmd)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	460b      	mov	r3, r1
 80017a2:	70fb      	strb	r3, [r7, #3]
	uint8_t id_bit_number 	= 1;
 80017a4:	2301      	movs	r3, #1
 80017a6:	73fb      	strb	r3, [r7, #15]
	uint8_t last_zero 		= 0;
 80017a8:	2300      	movs	r3, #0
 80017aa:	73bb      	strb	r3, [r7, #14]
	uint8_t rom_byte_number = 0;
 80017ac:	2300      	movs	r3, #0
 80017ae:	737b      	strb	r3, [r7, #13]
	uint8_t search_result 	= 0;
 80017b0:	2300      	movs	r3, #0
 80017b2:	733b      	strb	r3, [r7, #12]
	uint8_t rom_byte_mask 	= 1;
 80017b4:	2301      	movs	r3, #1
 80017b6:	72fb      	strb	r3, [r7, #11]
	uint8_t id_bit, cmp_id_bit, search_direction;

	/* if the last call was not the last one */
	if (!OW->LastDeviceFlag)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	789b      	ldrb	r3, [r3, #2]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	f040 809a 	bne.w	80018f6 <OneWire_Search+0x15e>
	{
		if (OneWire_Reset(OW))
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f7ff ffc3 	bl	800174e <OneWire_Reset>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d00a      	beq.n	80017e4 <OneWire_Search+0x4c>
		{
			OW->LastDiscrepancy = 0;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2200      	movs	r2, #0
 80017d2:	701a      	strb	r2, [r3, #0]
			OW->LastDeviceFlag = 0;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2200      	movs	r2, #0
 80017d8:	709a      	strb	r2, [r3, #2]
			OW->LastFamilyDiscrepancy = 0;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2200      	movs	r2, #0
 80017de:	705a      	strb	r2, [r3, #1]
			return 0;
 80017e0:	2300      	movs	r3, #0
 80017e2:	e09b      	b.n	800191c <OneWire_Search+0x184>
		}

		// issue the search command
		OneWire_WriteByte(OW, Cmd);
 80017e4:	78fb      	ldrb	r3, [r7, #3]
 80017e6:	4619      	mov	r1, r3
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f7ff ff71 	bl	80016d0 <OneWire_WriteByte>

		// loop to do the search
		do {
			// read a bit and its complement
			id_bit = OneWire_ReadBit(OW);
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f7ff ff46 	bl	8001680 <OneWire_ReadBit>
 80017f4:	4603      	mov	r3, r0
 80017f6:	727b      	strb	r3, [r7, #9]
			cmp_id_bit = OneWire_ReadBit(OW);
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f7ff ff41 	bl	8001680 <OneWire_ReadBit>
 80017fe:	4603      	mov	r3, r0
 8001800:	723b      	strb	r3, [r7, #8]

			// check for no devices on 1-wire
			if ((id_bit == 1) && (cmp_id_bit == 1))
 8001802:	7a7b      	ldrb	r3, [r7, #9]
 8001804:	2b01      	cmp	r3, #1
 8001806:	d102      	bne.n	800180e <OneWire_Search+0x76>
 8001808:	7a3b      	ldrb	r3, [r7, #8]
 800180a:	2b01      	cmp	r3, #1
 800180c:	d064      	beq.n	80018d8 <OneWire_Search+0x140>
			{
				break;
			} else {
				// all devices coupled have 0 or 1
				if (id_bit != cmp_id_bit)
 800180e:	7a7a      	ldrb	r2, [r7, #9]
 8001810:	7a3b      	ldrb	r3, [r7, #8]
 8001812:	429a      	cmp	r2, r3
 8001814:	d002      	beq.n	800181c <OneWire_Search+0x84>
				{
					search_direction = id_bit;  // bit write value for search
 8001816:	7a7b      	ldrb	r3, [r7, #9]
 8001818:	72bb      	strb	r3, [r7, #10]
 800181a:	e026      	b.n	800186a <OneWire_Search+0xd2>
				} else {
					/* if this discrepancy if before the Last Discrepancy
					 * on a previous next then pick the same as last time */
					if (id_bit_number < OW->LastDiscrepancy)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	7bfa      	ldrb	r2, [r7, #15]
 8001822:	429a      	cmp	r2, r3
 8001824:	d20d      	bcs.n	8001842 <OneWire_Search+0xaa>
					{
						search_direction = ((OW->RomByte[rom_byte_number] & rom_byte_mask) > 0);
 8001826:	7b7b      	ldrb	r3, [r7, #13]
 8001828:	687a      	ldr	r2, [r7, #4]
 800182a:	4413      	add	r3, r2
 800182c:	78da      	ldrb	r2, [r3, #3]
 800182e:	7afb      	ldrb	r3, [r7, #11]
 8001830:	4013      	ands	r3, r2
 8001832:	b2db      	uxtb	r3, r3
 8001834:	2b00      	cmp	r3, #0
 8001836:	bf14      	ite	ne
 8001838:	2301      	movne	r3, #1
 800183a:	2300      	moveq	r3, #0
 800183c:	b2db      	uxtb	r3, r3
 800183e:	72bb      	strb	r3, [r7, #10]
 8001840:	e008      	b.n	8001854 <OneWire_Search+0xbc>
					} else {
						// if equal to last pick 1, if not then pick 0
						search_direction = (id_bit_number == OW->LastDiscrepancy);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	7bfa      	ldrb	r2, [r7, #15]
 8001848:	429a      	cmp	r2, r3
 800184a:	bf0c      	ite	eq
 800184c:	2301      	moveq	r3, #1
 800184e:	2300      	movne	r3, #0
 8001850:	b2db      	uxtb	r3, r3
 8001852:	72bb      	strb	r3, [r7, #10]
					}

					// if 0 was picked then record its position in LastZero
					if (search_direction == 0)
 8001854:	7abb      	ldrb	r3, [r7, #10]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d107      	bne.n	800186a <OneWire_Search+0xd2>
					{
						last_zero = id_bit_number;
 800185a:	7bfb      	ldrb	r3, [r7, #15]
 800185c:	73bb      	strb	r3, [r7, #14]

						// check for Last discrepancy in family
						if (last_zero < 9)
 800185e:	7bbb      	ldrb	r3, [r7, #14]
 8001860:	2b08      	cmp	r3, #8
 8001862:	d802      	bhi.n	800186a <OneWire_Search+0xd2>
						{
							OW->LastFamilyDiscrepancy = last_zero;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	7bba      	ldrb	r2, [r7, #14]
 8001868:	705a      	strb	r2, [r3, #1]
					}
				}

				/* set or clear the bit in the ROM byte rom_byte_number
				 * with mask rom_byte_mask */
				if (search_direction == 1)
 800186a:	7abb      	ldrb	r3, [r7, #10]
 800186c:	2b01      	cmp	r3, #1
 800186e:	d10c      	bne.n	800188a <OneWire_Search+0xf2>
				{
					OW->RomByte[rom_byte_number] |= rom_byte_mask;
 8001870:	7b7b      	ldrb	r3, [r7, #13]
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	4413      	add	r3, r2
 8001876:	78d9      	ldrb	r1, [r3, #3]
 8001878:	7b7b      	ldrb	r3, [r7, #13]
 800187a:	7afa      	ldrb	r2, [r7, #11]
 800187c:	430a      	orrs	r2, r1
 800187e:	b2d1      	uxtb	r1, r2
 8001880:	687a      	ldr	r2, [r7, #4]
 8001882:	4413      	add	r3, r2
 8001884:	460a      	mov	r2, r1
 8001886:	70da      	strb	r2, [r3, #3]
 8001888:	e010      	b.n	80018ac <OneWire_Search+0x114>
				} else {
					OW->RomByte[rom_byte_number] &= ~rom_byte_mask;
 800188a:	7b7b      	ldrb	r3, [r7, #13]
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	4413      	add	r3, r2
 8001890:	78db      	ldrb	r3, [r3, #3]
 8001892:	b25a      	sxtb	r2, r3
 8001894:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001898:	43db      	mvns	r3, r3
 800189a:	b25b      	sxtb	r3, r3
 800189c:	4013      	ands	r3, r2
 800189e:	b25a      	sxtb	r2, r3
 80018a0:	7b7b      	ldrb	r3, [r7, #13]
 80018a2:	b2d1      	uxtb	r1, r2
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	4413      	add	r3, r2
 80018a8:	460a      	mov	r2, r1
 80018aa:	70da      	strb	r2, [r3, #3]
				}

				// serial number search direction write bit
				OneWire_WriteBit(OW, search_direction);
 80018ac:	7abb      	ldrb	r3, [r7, #10]
 80018ae:	4619      	mov	r1, r3
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f7ff feab 	bl	800160c <OneWire_WriteBit>

				/* increment the byte counter id_bit_number and shift the
				 * mask rom_byte_mask */
				id_bit_number++;
 80018b6:	7bfb      	ldrb	r3, [r7, #15]
 80018b8:	3301      	adds	r3, #1
 80018ba:	73fb      	strb	r3, [r7, #15]
				rom_byte_mask <<= 1;
 80018bc:	7afb      	ldrb	r3, [r7, #11]
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	72fb      	strb	r3, [r7, #11]

				/* if the mask is 0 then go to new SerialNum byte
				 * rom_byte_number and reset mask */
				if (rom_byte_mask == 0)
 80018c2:	7afb      	ldrb	r3, [r7, #11]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d104      	bne.n	80018d2 <OneWire_Search+0x13a>
				{
					rom_byte_number++;
 80018c8:	7b7b      	ldrb	r3, [r7, #13]
 80018ca:	3301      	adds	r3, #1
 80018cc:	737b      	strb	r3, [r7, #13]
					rom_byte_mask = 1;
 80018ce:	2301      	movs	r3, #1
 80018d0:	72fb      	strb	r3, [r7, #11]
				}
			}
		} while (rom_byte_number < 8);  /* loop until through all ROM bytes 0-7
 80018d2:	7b7b      	ldrb	r3, [r7, #13]
 80018d4:	2b07      	cmp	r3, #7
 80018d6:	d98a      	bls.n	80017ee <OneWire_Search+0x56>
		if the search was successful then */

		if (!(id_bit_number < 65))
 80018d8:	7bfb      	ldrb	r3, [r7, #15]
 80018da:	2b40      	cmp	r3, #64	; 0x40
 80018dc:	d90b      	bls.n	80018f6 <OneWire_Search+0x15e>
		{
			/* search successful so set LastDiscrepancy, LastDeviceFlag,
			 * search_result */
			OW->LastDiscrepancy = last_zero;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	7bba      	ldrb	r2, [r7, #14]
 80018e2:	701a      	strb	r2, [r3, #0]
			// check for last device
			if (OW->LastDiscrepancy == 0) {
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d102      	bne.n	80018f2 <OneWire_Search+0x15a>
				OW->LastDeviceFlag = 1;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2201      	movs	r2, #1
 80018f0:	709a      	strb	r2, [r3, #2]
			}
			search_result = 1;
 80018f2:	2301      	movs	r3, #1
 80018f4:	733b      	strb	r3, [r7, #12]
		}
	}

	/* if no device found then reset counters so next 'search' will be like a
	 * first */
	if (!search_result || !OW->RomByte[0])
 80018f6:	7b3b      	ldrb	r3, [r7, #12]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d003      	beq.n	8001904 <OneWire_Search+0x16c>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	78db      	ldrb	r3, [r3, #3]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d10a      	bne.n	800191a <OneWire_Search+0x182>
	{
		OW->LastDiscrepancy = 0;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2200      	movs	r2, #0
 8001908:	701a      	strb	r2, [r3, #0]
		OW->LastDeviceFlag = 0;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2200      	movs	r2, #0
 800190e:	709a      	strb	r2, [r3, #2]
		OW->LastFamilyDiscrepancy = 0;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2200      	movs	r2, #0
 8001914:	705a      	strb	r2, [r3, #1]
		search_result = 0;
 8001916:	2300      	movs	r3, #0
 8001918:	733b      	strb	r3, [r7, #12]
	}

	return search_result;
 800191a:	7b3b      	ldrb	r3, [r7, #12]
}
 800191c:	4618      	mov	r0, r3
 800191e:	3710      	adds	r7, #16
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}

08001924 <OneWire_GetDevRom>:
  * @brief  The function is used get ROM full address
  * @param  OW		OneWire HandleTypedef
  * @param  ROM		Pointer to device ROM
  */
void OneWire_GetDevRom(OneWire_t* OW, uint8_t *ROM)
{
 8001924:	b480      	push	{r7}
 8001926:	b085      	sub	sp, #20
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	6039      	str	r1, [r7, #0]
	for (uint8_t i = 0; i < 8; i++) {
 800192e:	2300      	movs	r3, #0
 8001930:	73fb      	strb	r3, [r7, #15]
 8001932:	e00a      	b.n	800194a <OneWire_GetDevRom+0x26>
		*(ROM + i) = OW->RomByte[i];
 8001934:	7bfa      	ldrb	r2, [r7, #15]
 8001936:	7bfb      	ldrb	r3, [r7, #15]
 8001938:	6839      	ldr	r1, [r7, #0]
 800193a:	440b      	add	r3, r1
 800193c:	6879      	ldr	r1, [r7, #4]
 800193e:	440a      	add	r2, r1
 8001940:	78d2      	ldrb	r2, [r2, #3]
 8001942:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 8; i++) {
 8001944:	7bfb      	ldrb	r3, [r7, #15]
 8001946:	3301      	adds	r3, #1
 8001948:	73fb      	strb	r3, [r7, #15]
 800194a:	7bfb      	ldrb	r3, [r7, #15]
 800194c:	2b07      	cmp	r3, #7
 800194e:	d9f1      	bls.n	8001934 <OneWire_GetDevRom+0x10>
	}
}
 8001950:	bf00      	nop
 8001952:	bf00      	nop
 8001954:	3714      	adds	r7, #20
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr

0800195e <OneWire_Init>:
/**
  * @brief  The function is used to initialize OneWire Communication
  * @param  OW		OneWire HandleTypedef
  */
void OneWire_Init(OneWire_t* OW)
{
 800195e:	b580      	push	{r7, lr}
 8001960:	b082      	sub	sp, #8
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
	OneWire_Pin_Mode(OW, Output);
 8001966:	2101      	movs	r1, #1
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f7ff fe07 	bl	800157c <OneWire_Pin_Mode>
	OneWire_Pin_Level(OW, 1);
 800196e:	2101      	movs	r1, #1
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f7ff fe28 	bl	80015c6 <OneWire_Pin_Level>
	DwtDelay_us(1000);
 8001976:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800197a:	f7ff fddd 	bl	8001538 <DwtDelay_us>
	OneWire_Pin_Level(OW, 0);
 800197e:	2100      	movs	r1, #0
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f7ff fe20 	bl	80015c6 <OneWire_Pin_Level>
	DwtDelay_us(1000);
 8001986:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800198a:	f7ff fdd5 	bl	8001538 <DwtDelay_us>
	OneWire_Pin_Level(OW, 1);
 800198e:	2101      	movs	r1, #1
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f7ff fe18 	bl	80015c6 <OneWire_Pin_Level>
	DwtDelay_us(2000);
 8001996:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800199a:	f7ff fdcd 	bl	8001538 <DwtDelay_us>

	/* Reset the search state */
	OW->LastDiscrepancy 		= 0;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2200      	movs	r2, #0
 80019a2:	701a      	strb	r2, [r3, #0]
	OW->LastDeviceFlag 			= 0;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2200      	movs	r2, #0
 80019a8:	709a      	strb	r2, [r3, #2]
	OW->LastFamilyDiscrepancy 	= 0;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2200      	movs	r2, #0
 80019ae:	705a      	strb	r2, [r3, #1]
	OW->RomCnt 					= 0;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2200      	movs	r2, #0
 80019b4:	72da      	strb	r2, [r3, #11]
}
 80019b6:	bf00      	nop
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}

080019be <OneWire_SelectWithPointer>:
  * @brief  The function is used selected specific device ROM
  * @param  OW		OneWire HandleTypedef
  * @param  ROM		Pointer to device ROM
  */
void OneWire_SelectWithPointer(OneWire_t* OW, uint8_t *ROM)
{
 80019be:	b580      	push	{r7, lr}
 80019c0:	b084      	sub	sp, #16
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
 80019c6:	6039      	str	r1, [r7, #0]
	OneWire_WriteByte(OW, ONEWIRE_CMD_MATCHROM);
 80019c8:	2155      	movs	r1, #85	; 0x55
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f7ff fe80 	bl	80016d0 <OneWire_WriteByte>

	for (uint8_t i = 0; i < 8; i++)
 80019d0:	2300      	movs	r3, #0
 80019d2:	73fb      	strb	r3, [r7, #15]
 80019d4:	e00a      	b.n	80019ec <OneWire_SelectWithPointer+0x2e>
	{
		OneWire_WriteByte(OW, *(ROM + i));
 80019d6:	7bfb      	ldrb	r3, [r7, #15]
 80019d8:	683a      	ldr	r2, [r7, #0]
 80019da:	4413      	add	r3, r2
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	4619      	mov	r1, r3
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f7ff fe75 	bl	80016d0 <OneWire_WriteByte>
	for (uint8_t i = 0; i < 8; i++)
 80019e6:	7bfb      	ldrb	r3, [r7, #15]
 80019e8:	3301      	adds	r3, #1
 80019ea:	73fb      	strb	r3, [r7, #15]
 80019ec:	7bfb      	ldrb	r3, [r7, #15]
 80019ee:	2b07      	cmp	r3, #7
 80019f0:	d9f1      	bls.n	80019d6 <OneWire_SelectWithPointer+0x18>
	}
}
 80019f2:	bf00      	nop
 80019f4:	bf00      	nop
 80019f6:	3710      	adds	r7, #16
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}

080019fc <OneWire_CRC8>:
  * @brief  The function is used check CRC
  * @param  Addr	Pointer to address
  * @param  ROM		Number of byte
  */
uint8_t OneWire_CRC8(uint8_t *Addr, uint8_t Len)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b085      	sub	sp, #20
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	460b      	mov	r3, r1
 8001a06:	70fb      	strb	r3, [r7, #3]
	uint8_t crc = 0;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	73fb      	strb	r3, [r7, #15]
	uint8_t inbyte, i, mix;

	while (Len--)
 8001a0c:	e026      	b.n	8001a5c <OneWire_CRC8+0x60>
	{
		inbyte = *Addr++;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	1c5a      	adds	r2, r3, #1
 8001a12:	607a      	str	r2, [r7, #4]
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	73bb      	strb	r3, [r7, #14]

		for (i = 8; i; i--)
 8001a18:	2308      	movs	r3, #8
 8001a1a:	737b      	strb	r3, [r7, #13]
 8001a1c:	e01b      	b.n	8001a56 <OneWire_CRC8+0x5a>
		{
			mix = (crc ^ inbyte) & 0x01;
 8001a1e:	7bfa      	ldrb	r2, [r7, #15]
 8001a20:	7bbb      	ldrb	r3, [r7, #14]
 8001a22:	4053      	eors	r3, r2
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	733b      	strb	r3, [r7, #12]
			crc >>= 1;
 8001a2c:	7bfb      	ldrb	r3, [r7, #15]
 8001a2e:	085b      	lsrs	r3, r3, #1
 8001a30:	73fb      	strb	r3, [r7, #15]
			crc ^= (mix) ? 0x8C : 0;
 8001a32:	7b3b      	ldrb	r3, [r7, #12]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d002      	beq.n	8001a3e <OneWire_CRC8+0x42>
 8001a38:	f06f 0273 	mvn.w	r2, #115	; 0x73
 8001a3c:	e000      	b.n	8001a40 <OneWire_CRC8+0x44>
 8001a3e:	2200      	movs	r2, #0
 8001a40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a44:	4053      	eors	r3, r2
 8001a46:	b25b      	sxtb	r3, r3
 8001a48:	73fb      	strb	r3, [r7, #15]
			inbyte >>= 1;
 8001a4a:	7bbb      	ldrb	r3, [r7, #14]
 8001a4c:	085b      	lsrs	r3, r3, #1
 8001a4e:	73bb      	strb	r3, [r7, #14]
		for (i = 8; i; i--)
 8001a50:	7b7b      	ldrb	r3, [r7, #13]
 8001a52:	3b01      	subs	r3, #1
 8001a54:	737b      	strb	r3, [r7, #13]
 8001a56:	7b7b      	ldrb	r3, [r7, #13]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d1e0      	bne.n	8001a1e <OneWire_CRC8+0x22>
	while (Len--)
 8001a5c:	78fb      	ldrb	r3, [r7, #3]
 8001a5e:	1e5a      	subs	r2, r3, #1
 8001a60:	70fa      	strb	r2, [r7, #3]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d1d3      	bne.n	8001a0e <OneWire_CRC8+0x12>
		}
	}
	return crc;
 8001a66:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3714      	adds	r7, #20
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <GetSector>:
 *  Sector 4 as 64KB
 *  Sector 5 to Sector 7 each 128KB
 */

static uint32_t GetSector(uint32_t Address)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b085      	sub	sp, #20
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	60fb      	str	r3, [r7, #12]

  if((Address < 0x08003FFF) && (Address >= 0x08000000))
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	4a44      	ldr	r2, [pc, #272]	; (8001b94 <GetSector+0x120>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d806      	bhi.n	8001a96 <GetSector+0x22>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001a8e:	d302      	bcc.n	8001a96 <GetSector+0x22>
  {
    sector = FLASH_SECTOR_0;
 8001a90:	2300      	movs	r3, #0
 8001a92:	60fb      	str	r3, [r7, #12]
 8001a94:	e077      	b.n	8001b86 <GetSector+0x112>
  }
  else if((Address < 0x08007FFF) && (Address >= 0x08004000))
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4a3f      	ldr	r2, [pc, #252]	; (8001b98 <GetSector+0x124>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d806      	bhi.n	8001aac <GetSector+0x38>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4a3e      	ldr	r2, [pc, #248]	; (8001b9c <GetSector+0x128>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d302      	bcc.n	8001aac <GetSector+0x38>
  {
    sector = FLASH_SECTOR_1;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	60fb      	str	r3, [r7, #12]
 8001aaa:	e06c      	b.n	8001b86 <GetSector+0x112>
  }
  else if((Address < 0x0800BFFF) && (Address >= 0x08008000))
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	4a3c      	ldr	r2, [pc, #240]	; (8001ba0 <GetSector+0x12c>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d806      	bhi.n	8001ac2 <GetSector+0x4e>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	4a3b      	ldr	r2, [pc, #236]	; (8001ba4 <GetSector+0x130>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d302      	bcc.n	8001ac2 <GetSector+0x4e>
  {
    sector = FLASH_SECTOR_2;
 8001abc:	2302      	movs	r3, #2
 8001abe:	60fb      	str	r3, [r7, #12]
 8001ac0:	e061      	b.n	8001b86 <GetSector+0x112>
  }
  else if((Address < 0x0800FFFF) && (Address >= 0x0800C000))
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4a38      	ldr	r2, [pc, #224]	; (8001ba8 <GetSector+0x134>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d206      	bcs.n	8001ad8 <GetSector+0x64>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4a37      	ldr	r2, [pc, #220]	; (8001bac <GetSector+0x138>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d302      	bcc.n	8001ad8 <GetSector+0x64>
  {
    sector = FLASH_SECTOR_3;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	60fb      	str	r3, [r7, #12]
 8001ad6:	e056      	b.n	8001b86 <GetSector+0x112>
  }
  else if((Address < 0x0801FFFF) && (Address >= 0x08010000))
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	4a35      	ldr	r2, [pc, #212]	; (8001bb0 <GetSector+0x13c>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d206      	bcs.n	8001aee <GetSector+0x7a>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	4a31      	ldr	r2, [pc, #196]	; (8001ba8 <GetSector+0x134>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d902      	bls.n	8001aee <GetSector+0x7a>
  {
    sector = FLASH_SECTOR_4;
 8001ae8:	2304      	movs	r3, #4
 8001aea:	60fb      	str	r3, [r7, #12]
 8001aec:	e04b      	b.n	8001b86 <GetSector+0x112>
  }
  else if((Address < 0x0803FFFF) && (Address >= 0x08020000))
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4a30      	ldr	r2, [pc, #192]	; (8001bb4 <GetSector+0x140>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d206      	bcs.n	8001b04 <GetSector+0x90>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4a2d      	ldr	r2, [pc, #180]	; (8001bb0 <GetSector+0x13c>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d902      	bls.n	8001b04 <GetSector+0x90>
  {
    sector = FLASH_SECTOR_5;
 8001afe:	2305      	movs	r3, #5
 8001b00:	60fb      	str	r3, [r7, #12]
 8001b02:	e040      	b.n	8001b86 <GetSector+0x112>
  }
  else if((Address < 0x0805FFFF) && (Address >= 0x08040000))
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	4a2c      	ldr	r2, [pc, #176]	; (8001bb8 <GetSector+0x144>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d206      	bcs.n	8001b1a <GetSector+0xa6>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	4a29      	ldr	r2, [pc, #164]	; (8001bb4 <GetSector+0x140>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d902      	bls.n	8001b1a <GetSector+0xa6>
  {
    sector = FLASH_SECTOR_6;
 8001b14:	2306      	movs	r3, #6
 8001b16:	60fb      	str	r3, [r7, #12]
 8001b18:	e035      	b.n	8001b86 <GetSector+0x112>
  }
  else if((Address < 0x0807FFFF) && (Address >= 0x08060000))
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4a27      	ldr	r2, [pc, #156]	; (8001bbc <GetSector+0x148>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d206      	bcs.n	8001b30 <GetSector+0xbc>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a24      	ldr	r2, [pc, #144]	; (8001bb8 <GetSector+0x144>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d902      	bls.n	8001b30 <GetSector+0xbc>
  {
    sector = FLASH_SECTOR_7;
 8001b2a:	2307      	movs	r3, #7
 8001b2c:	60fb      	str	r3, [r7, #12]
 8001b2e:	e02a      	b.n	8001b86 <GetSector+0x112>
  }
  else if((Address < 0x0809FFFF) && (Address >= 0x08080000))
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	4a23      	ldr	r2, [pc, #140]	; (8001bc0 <GetSector+0x14c>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d206      	bcs.n	8001b46 <GetSector+0xd2>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	4a20      	ldr	r2, [pc, #128]	; (8001bbc <GetSector+0x148>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d902      	bls.n	8001b46 <GetSector+0xd2>
  {
    sector = FLASH_SECTOR_8;
 8001b40:	2308      	movs	r3, #8
 8001b42:	60fb      	str	r3, [r7, #12]
 8001b44:	e01f      	b.n	8001b86 <GetSector+0x112>
  }
  else if((Address < 0x080BFFFF) && (Address >= 0x080A0000))
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4a1e      	ldr	r2, [pc, #120]	; (8001bc4 <GetSector+0x150>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d206      	bcs.n	8001b5c <GetSector+0xe8>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4a1b      	ldr	r2, [pc, #108]	; (8001bc0 <GetSector+0x14c>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d902      	bls.n	8001b5c <GetSector+0xe8>
  {
    sector = FLASH_SECTOR_9;
 8001b56:	2309      	movs	r3, #9
 8001b58:	60fb      	str	r3, [r7, #12]
 8001b5a:	e014      	b.n	8001b86 <GetSector+0x112>
  }
  else if((Address < 0x080DFFFF) && (Address >= 0x080C0000))
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	4a1a      	ldr	r2, [pc, #104]	; (8001bc8 <GetSector+0x154>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d806      	bhi.n	8001b72 <GetSector+0xfe>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	4a17      	ldr	r2, [pc, #92]	; (8001bc4 <GetSector+0x150>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d902      	bls.n	8001b72 <GetSector+0xfe>
  {
    sector = FLASH_SECTOR_10;
 8001b6c:	230a      	movs	r3, #10
 8001b6e:	60fb      	str	r3, [r7, #12]
 8001b70:	e009      	b.n	8001b86 <GetSector+0x112>
  }
  else if((Address < 0x080FFFFF) && (Address >= 0x080E0000))
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4a15      	ldr	r2, [pc, #84]	; (8001bcc <GetSector+0x158>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d805      	bhi.n	8001b86 <GetSector+0x112>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a14      	ldr	r2, [pc, #80]	; (8001bd0 <GetSector+0x15c>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d901      	bls.n	8001b86 <GetSector+0x112>
  {
    sector = FLASH_SECTOR_11;
 8001b82:	230b      	movs	r3, #11
 8001b84:	60fb      	str	r3, [r7, #12]
//  }
//  else if((Address < 0x081FFFFF) && (Address >= 0x081E0000))
//  {
//    sector = FLASH_SECTOR_23;
//  }
  return sector;
 8001b86:	68fb      	ldr	r3, [r7, #12]
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3714      	adds	r7, #20
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr
 8001b94:	08003ffe 	.word	0x08003ffe
 8001b98:	08007ffe 	.word	0x08007ffe
 8001b9c:	08004000 	.word	0x08004000
 8001ba0:	0800bffe 	.word	0x0800bffe
 8001ba4:	08008000 	.word	0x08008000
 8001ba8:	0800ffff 	.word	0x0800ffff
 8001bac:	0800c000 	.word	0x0800c000
 8001bb0:	0801ffff 	.word	0x0801ffff
 8001bb4:	0803ffff 	.word	0x0803ffff
 8001bb8:	0805ffff 	.word	0x0805ffff
 8001bbc:	0807ffff 	.word	0x0807ffff
 8001bc0:	0809ffff 	.word	0x0809ffff
 8001bc4:	080bffff 	.word	0x080bffff
 8001bc8:	080dfffe 	.word	0x080dfffe
 8001bcc:	080ffffe 	.word	0x080ffffe
 8001bd0:	080dffff 	.word	0x080dffff

08001bd4 <Flash_Write_Data>:
   return float_variable;
}


uint32_t Flash_Write_Data (uint32_t StartSectorAddress, uint32_t *Data, uint16_t numberofwords)
{
 8001bd4:	b5b0      	push	{r4, r5, r7, lr}
 8001bd6:	b08a      	sub	sp, #40	; 0x28
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	60f8      	str	r0, [r7, #12]
 8001bdc:	60b9      	str	r1, [r7, #8]
 8001bde:	4613      	mov	r3, r2
 8001be0:	80fb      	strh	r3, [r7, #6]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SECTORError;
	int sofar=0;
 8001be2:	2300      	movs	r3, #0
 8001be4:	627b      	str	r3, [r7, #36]	; 0x24


	 /* Unlock the Flash to enable the flash control register access *************/
	  HAL_FLASH_Unlock();
 8001be6:	f00a ff6b 	bl	800cac0 <HAL_FLASH_Unlock>

	  /* Erase the user Flash area */

	  /* Get the number of sector to erase from 1st sector */

	  uint32_t StartSector = GetSector(StartSectorAddress);
 8001bea:	68f8      	ldr	r0, [r7, #12]
 8001bec:	f7ff ff42 	bl	8001a74 <GetSector>
 8001bf0:	6238      	str	r0, [r7, #32]
	  uint32_t EndSectorAddress = StartSectorAddress + numberofwords*4;
 8001bf2:	88fb      	ldrh	r3, [r7, #6]
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	4413      	add	r3, r2
 8001bfc:	61fb      	str	r3, [r7, #28]
	  uint32_t EndSector = GetSector(EndSectorAddress);
 8001bfe:	69f8      	ldr	r0, [r7, #28]
 8001c00:	f7ff ff38 	bl	8001a74 <GetSector>
 8001c04:	61b8      	str	r0, [r7, #24]

	  /* Fill EraseInit structure*/
	  EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 8001c06:	4b21      	ldr	r3, [pc, #132]	; (8001c8c <Flash_Write_Data+0xb8>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	601a      	str	r2, [r3, #0]
	  EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8001c0c:	4b1f      	ldr	r3, [pc, #124]	; (8001c8c <Flash_Write_Data+0xb8>)
 8001c0e:	2202      	movs	r2, #2
 8001c10:	611a      	str	r2, [r3, #16]
	  EraseInitStruct.Sector        = StartSector;
 8001c12:	4a1e      	ldr	r2, [pc, #120]	; (8001c8c <Flash_Write_Data+0xb8>)
 8001c14:	6a3b      	ldr	r3, [r7, #32]
 8001c16:	6093      	str	r3, [r2, #8]
	  EraseInitStruct.NbSectors     = (EndSector - StartSector) + 1;
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	6a3b      	ldr	r3, [r7, #32]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	3301      	adds	r3, #1
 8001c20:	4a1a      	ldr	r2, [pc, #104]	; (8001c8c <Flash_Write_Data+0xb8>)
 8001c22:	60d3      	str	r3, [r2, #12]

	  /* Note: If an erase operation in Flash memory also concerns data in the data or instruction cache,
	     you have to make sure that these data are rewritten before they are accessed during code
	     execution. If this cannot be done safely, it is recommended to flush the caches by setting the
	     DCRST and ICRST bits in the FLASH_CR register. */
	  if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 8001c24:	f107 0314 	add.w	r3, r7, #20
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4818      	ldr	r0, [pc, #96]	; (8001c8c <Flash_Write_Data+0xb8>)
 8001c2c:	f00b f8b6 	bl	800cd9c <HAL_FLASHEx_Erase>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d01f      	beq.n	8001c76 <Flash_Write_Data+0xa2>
	  {
		  return HAL_FLASH_GetError ();
 8001c36:	f00a ff75 	bl	800cb24 <HAL_FLASH_GetError>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	e022      	b.n	8001c84 <Flash_Write_Data+0xb0>
	  /* Program the user Flash area word by word
	    (area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/

	   while (sofar<numberofwords)
	   {
	     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartSectorAddress, Data[sofar]) == HAL_OK)
 8001c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	68ba      	ldr	r2, [r7, #8]
 8001c44:	4413      	add	r3, r2
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	461c      	mov	r4, r3
 8001c4c:	4615      	mov	r5, r2
 8001c4e:	4622      	mov	r2, r4
 8001c50:	462b      	mov	r3, r5
 8001c52:	68f9      	ldr	r1, [r7, #12]
 8001c54:	2002      	movs	r0, #2
 8001c56:	f00a fedf 	bl	800ca18 <HAL_FLASH_Program>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d106      	bne.n	8001c6e <Flash_Write_Data+0x9a>
	     {
	    	 StartSectorAddress += 4;  // use StartPageAddress += 2 for half word and 8 for double word
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	3304      	adds	r3, #4
 8001c64:	60fb      	str	r3, [r7, #12]
	    	 sofar++;
 8001c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c68:	3301      	adds	r3, #1
 8001c6a:	627b      	str	r3, [r7, #36]	; 0x24
 8001c6c:	e003      	b.n	8001c76 <Flash_Write_Data+0xa2>
	     }
	     else
	     {
	       /* Error occurred while writing data in Flash memory*/
	    	 return HAL_FLASH_GetError ();
 8001c6e:	f00a ff59 	bl	800cb24 <HAL_FLASH_GetError>
 8001c72:	4603      	mov	r3, r0
 8001c74:	e006      	b.n	8001c84 <Flash_Write_Data+0xb0>
	   while (sofar<numberofwords)
 8001c76:	88fb      	ldrh	r3, [r7, #6]
 8001c78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	dbdf      	blt.n	8001c3e <Flash_Write_Data+0x6a>
	     }
	   }

	  /* Lock the Flash to disable the flash control register access (recommended
	     to protect the FLASH memory against possible unwanted operation) *********/
	  HAL_FLASH_Lock();
 8001c7e:	f00a ff41 	bl	800cb04 <HAL_FLASH_Lock>

	   return 0;
 8001c82:	2300      	movs	r3, #0
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3728      	adds	r7, #40	; 0x28
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bdb0      	pop	{r4, r5, r7, pc}
 8001c8c:	20000024 	.word	0x20000024

08001c90 <Flash_Read_Data>:


void Flash_Read_Data (uint32_t StartSectorAddress, uint32_t *RxBuf, uint16_t numberofwords)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b085      	sub	sp, #20
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	60f8      	str	r0, [r7, #12]
 8001c98:	60b9      	str	r1, [r7, #8]
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	80fb      	strh	r3, [r7, #6]
	while (1)
	{

		*RxBuf = *(__IO uint32_t *)StartSectorAddress;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	601a      	str	r2, [r3, #0]
		StartSectorAddress += 4;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	3304      	adds	r3, #4
 8001caa:	60fb      	str	r3, [r7, #12]
		RxBuf++;
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	3304      	adds	r3, #4
 8001cb0:	60bb      	str	r3, [r7, #8]
		if (!(numberofwords--)) break;
 8001cb2:	88fb      	ldrh	r3, [r7, #6]
 8001cb4:	1e5a      	subs	r2, r3, #1
 8001cb6:	80fa      	strh	r2, [r7, #6]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d000      	beq.n	8001cbe <Flash_Read_Data+0x2e>
		*RxBuf = *(__IO uint32_t *)StartSectorAddress;
 8001cbc:	e7ef      	b.n	8001c9e <Flash_Read_Data+0xe>
		if (!(numberofwords--)) break;
 8001cbe:	bf00      	nop
	}
}
 8001cc0:	bf00      	nop
 8001cc2:	3714      	adds	r7, #20
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <RingAdd>:


/* Ring Buffer functions */
// This function must be called only after disabling USART RX interrupt or inside of the RX interrupt
void RingAdd(modbusRingBuffer_t *xRingBuffer, uint8_t u8Val)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	70fb      	strb	r3, [r7, #3]

	xRingBuffer->uxBuffer[xRingBuffer->u8end] = u8Val;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8001cde:	4619      	mov	r1, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	78fa      	ldrb	r2, [r7, #3]
 8001ce4:	545a      	strb	r2, [r3, r1]
	xRingBuffer->u8end = (xRingBuffer->u8end + 1) % MAX_BUFFER;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8001cec:	3301      	adds	r3, #1
 8001cee:	425a      	negs	r2, r3
 8001cf0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001cf4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001cf8:	bf58      	it	pl
 8001cfa:	4253      	negpl	r3, r2
 8001cfc:	b2da      	uxtb	r2, r3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	if (xRingBuffer->u8available == MAX_BUFFER)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8001d0a:	2b80      	cmp	r3, #128	; 0x80
 8001d0c:	d113      	bne.n	8001d36 <RingAdd+0x6a>
	{
		xRingBuffer->overflow = true;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2201      	movs	r2, #1
 8001d12:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	425a      	negs	r2, r3
 8001d20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d24:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001d28:	bf58      	it	pl
 8001d2a:	4253      	negpl	r3, r2
 8001d2c:	b2da      	uxtb	r2, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	{
		xRingBuffer->overflow = false;
		xRingBuffer->u8available++;
	}

}
 8001d34:	e00b      	b.n	8001d4e <RingAdd+0x82>
		xRingBuffer->overflow = false;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
		xRingBuffer->u8available++;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8001d44:	3301      	adds	r3, #1
 8001d46:	b2da      	uxtb	r2, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
}
 8001d4e:	bf00      	nop
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr

08001d5a <RingGetAllBytes>:

// This function must be called only after disabling USART RX interrupt
uint8_t RingGetAllBytes(modbusRingBuffer_t *xRingBuffer, uint8_t *buffer)
{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b082      	sub	sp, #8
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
 8001d62:	6039      	str	r1, [r7, #0]
	return RingGetNBytes(xRingBuffer, buffer, xRingBuffer->u8available);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	6839      	ldr	r1, [r7, #0]
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f000 f805 	bl	8001d7e <RingGetNBytes>
 8001d74:	4603      	mov	r3, r0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <RingGetNBytes>:

// This function must be called only after disabling USART RX interrupt
uint8_t RingGetNBytes(modbusRingBuffer_t *xRingBuffer, uint8_t *buffer, uint8_t uNumber)
{
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b086      	sub	sp, #24
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	60f8      	str	r0, [r7, #12]
 8001d86:	60b9      	str	r1, [r7, #8]
 8001d88:	4613      	mov	r3, r2
 8001d8a:	71fb      	strb	r3, [r7, #7]
	uint8_t uCounter;
	if(xRingBuffer->u8available == 0  || uNumber == 0 ) return 0;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d002      	beq.n	8001d9c <RingGetNBytes+0x1e>
 8001d96:	79fb      	ldrb	r3, [r7, #7]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d101      	bne.n	8001da0 <RingGetNBytes+0x22>
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	e03e      	b.n	8001e1e <RingGetNBytes+0xa0>
	if(uNumber > MAX_BUFFER) return 0;
 8001da0:	79fb      	ldrb	r3, [r7, #7]
 8001da2:	2b80      	cmp	r3, #128	; 0x80
 8001da4:	d901      	bls.n	8001daa <RingGetNBytes+0x2c>
 8001da6:	2300      	movs	r3, #0
 8001da8:	e039      	b.n	8001e1e <RingGetNBytes+0xa0>

	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 8001daa:	2300      	movs	r3, #0
 8001dac:	75fb      	strb	r3, [r7, #23]
 8001dae:	e01b      	b.n	8001de8 <RingGetNBytes+0x6a>
	{
		buffer[uCounter] = xRingBuffer->uxBuffer[xRingBuffer->u8start];
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8001db6:	4619      	mov	r1, r3
 8001db8:	7dfb      	ldrb	r3, [r7, #23]
 8001dba:	68ba      	ldr	r2, [r7, #8]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	68fa      	ldr	r2, [r7, #12]
 8001dc0:	5c52      	ldrb	r2, [r2, r1]
 8001dc2:	701a      	strb	r2, [r3, #0]
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8001dca:	3301      	adds	r3, #1
 8001dcc:	425a      	negs	r2, r3
 8001dce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001dd2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001dd6:	bf58      	it	pl
 8001dd8:	4253      	negpl	r3, r2
 8001dda:	b2da      	uxtb	r2, r3
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 8001de2:	7dfb      	ldrb	r3, [r7, #23]
 8001de4:	3301      	adds	r3, #1
 8001de6:	75fb      	strb	r3, [r7, #23]
 8001de8:	7dfa      	ldrb	r2, [r7, #23]
 8001dea:	79fb      	ldrb	r3, [r7, #7]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d205      	bcs.n	8001dfc <RingGetNBytes+0x7e>
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8001df6:	7dfa      	ldrb	r2, [r7, #23]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d3d9      	bcc.n	8001db0 <RingGetNBytes+0x32>
	}
	xRingBuffer->u8available = xRingBuffer->u8available - uCounter;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	f893 2082 	ldrb.w	r2, [r3, #130]	; 0x82
 8001e02:	7dfb      	ldrb	r3, [r7, #23]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	b2da      	uxtb	r2, r3
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
	xRingBuffer->overflow = false;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	2200      	movs	r2, #0
 8001e12:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
	RingClear(xRingBuffer);
 8001e16:	68f8      	ldr	r0, [r7, #12]
 8001e18:	f000 f805 	bl	8001e26 <RingClear>

	return uCounter;
 8001e1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3718      	adds	r7, #24
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}

08001e26 <RingClear>:
{
return xRingBuffer->u8available;
}

void RingClear(modbusRingBuffer_t *xRingBuffer)
{
 8001e26:	b480      	push	{r7}
 8001e28:	b083      	sub	sp, #12
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
xRingBuffer->u8start = 0;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
xRingBuffer->u8end = 0;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
xRingBuffer->u8available = 0;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
xRingBuffer->overflow = false;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
}
 8001e4e:	bf00      	nop
 8001e50:	370c      	adds	r7, #12
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
	...

08001e5c <ModbusInit>:
 * of the modbus handler
 *
 * @param modH   modbus handler
 */
void ModbusInit(modbusHandler_t * modH)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af02      	add	r7, sp, #8
 8001e62:	6078      	str	r0, [r7, #4]

  if (numberHandlers < MAX_M_HANDLERS)
 8001e64:	4b42      	ldr	r3, [pc, #264]	; (8001f70 <ModbusInit+0x114>)
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d87d      	bhi.n	8001f68 <ModbusInit+0x10c>
  {

	  //Initialize the ring buffer

	  RingClear(&modH->xBufferRX);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	33bc      	adds	r3, #188	; 0xbc
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7ff ffd8 	bl	8001e26 <RingClear>

	  if(modH->uModbusType == MB_SLAVE)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	2b03      	cmp	r3, #3
 8001e7c:	d109      	bne.n	8001e92 <ModbusInit+0x36>
		  }
		  else{
			  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusSlave, modH, &myTaskModbusA_attributes);
		  }
#else
		  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusSlave, modH, &myTaskModbusA_attributes);
 8001e7e:	4a3d      	ldr	r2, [pc, #244]	; (8001f74 <ModbusInit+0x118>)
 8001e80:	6879      	ldr	r1, [r7, #4]
 8001e82:	483d      	ldr	r0, [pc, #244]	; (8001f78 <ModbusInit+0x11c>)
 8001e84:	f00f fe93 	bl	8011bae <osThreadNew>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 8001e90:	e033      	b.n	8001efa <ModbusInit+0x9e>
#endif


	  }
	  else if (modH->uModbusType == MB_MASTER)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	2b04      	cmp	r3, #4
 8001e98:	d12e      	bne.n	8001ef8 <ModbusInit+0x9c>
		  else
		  {
		     modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusMaster, modH, &myTaskModbusB_attributes);
		  }
#else
		  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusMaster, modH, &myTaskModbusB_attributes);
 8001e9a:	4a38      	ldr	r2, [pc, #224]	; (8001f7c <ModbusInit+0x120>)
 8001e9c:	6879      	ldr	r1, [r7, #4]
 8001e9e:	4838      	ldr	r0, [pc, #224]	; (8001f80 <ModbusInit+0x124>)
 8001ea0:	f00f fe85 	bl	8011bae <osThreadNew>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif



		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
				  	  	modH->u16timeOut ,     		// The timer period in ticks.
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	; 0xa2
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 8001eb2:	4619      	mov	r1, r3
						pdFALSE,         // The timers will auto-reload themselves when they expire.
						( void * )modH->xTimerTimeout,     // Assign each timer a unique id equal to its array index.
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 8001eba:	4a32      	ldr	r2, [pc, #200]	; (8001f84 <ModbusInit+0x128>)
 8001ebc:	9200      	str	r2, [sp, #0]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	4831      	ldr	r0, [pc, #196]	; (8001f88 <ModbusInit+0x12c>)
 8001ec2:	f012 fe7b 	bl	8014bbc <xTimerCreate>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
						(TimerCallbackFunction_t) vTimerCallbackTimeout  // Each timer calls the same callback when it expires.
                  	  	);

		  if(modH->xTimerTimeout == NULL)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d100      	bne.n	8001eda <ModbusInit+0x7e>
		  {
			  while(1); //error creating timer, check heap and stack size
 8001ed8:	e7fe      	b.n	8001ed8 <ModbusInit+0x7c>
		  }


		  modH->QueueTelegramHandle = osMessageQueueNew (MAX_TELEGRAMS, sizeof(modbus_t), &QueueTelegram_attributes);
 8001eda:	4a2c      	ldr	r2, [pc, #176]	; (8001f8c <ModbusInit+0x130>)
 8001edc:	2110      	movs	r1, #16
 8001ede:	2002      	movs	r0, #2
 8001ee0:	f010 f94c 	bl	801217c <osMessageQueueNew>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

		  if(modH->QueueTelegramHandle == NULL)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d101      	bne.n	8001efa <ModbusInit+0x9e>
		  {
			  while(1); //error creating queue for telegrams, check heap and stack size
 8001ef6:	e7fe      	b.n	8001ef6 <ModbusInit+0x9a>
		  }

	  }
	  else
	  {
		  while(1); //Error Modbus type not supported choose a valid Type
 8001ef8:	e7fe      	b.n	8001ef8 <ModbusInit+0x9c>
	  }

	  if  (modH->myTaskModbusAHandle == NULL)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d100      	bne.n	8001f06 <ModbusInit+0xaa>
	  {
		  while(1); //Error creating Modbus task, check heap and stack size
 8001f04:	e7fe      	b.n	8001f04 <ModbusInit+0xa8>


	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
		  	  	  	  	  	  	  	T35 ,     // The timer period in ticks.
                                    pdFALSE,         // The timers will auto-reload themselves when they expire.
									( void * )modH->xTimerT35,     // Assign each timer a unique id equal to its array index.
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
 8001f0c:	4a20      	ldr	r2, [pc, #128]	; (8001f90 <ModbusInit+0x134>)
 8001f0e:	9200      	str	r2, [sp, #0]
 8001f10:	2200      	movs	r2, #0
 8001f12:	2102      	movs	r1, #2
 8001f14:	481f      	ldr	r0, [pc, #124]	; (8001f94 <ModbusInit+0x138>)
 8001f16:	f012 fe51 	bl	8014bbc <xTimerCreate>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
                                    (TimerCallbackFunction_t) vTimerCallbackT35     // Each timer calls the same callback when it expires.
                                    );
	  if (modH->xTimerT35 == NULL)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d100      	bne.n	8001f2e <ModbusInit+0xd2>
	  {
		  while(1); //Error creating the timer, check heap and stack size
 8001f2c:	e7fe      	b.n	8001f2c <ModbusInit+0xd0>
	  }


	  modH->ModBusSphrHandle = osSemaphoreNew(1, 1, &ModBusSphr_attributes);
 8001f2e:	4a1a      	ldr	r2, [pc, #104]	; (8001f98 <ModbusInit+0x13c>)
 8001f30:	2101      	movs	r1, #1
 8001f32:	2001      	movs	r0, #1
 8001f34:	f010 f802 	bl	8011f3c <osSemaphoreNew>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

	  if(modH->ModBusSphrHandle == NULL)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d100      	bne.n	8001f4c <ModbusInit+0xf0>
	  {
		  while(1); //Error creating the semaphore, check heap and stack size
 8001f4a:	e7fe      	b.n	8001f4a <ModbusInit+0xee>
	  }

	  mHandlers[numberHandlers] = modH;
 8001f4c:	4b08      	ldr	r3, [pc, #32]	; (8001f70 <ModbusInit+0x114>)
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	4619      	mov	r1, r3
 8001f52:	4a12      	ldr	r2, [pc, #72]	; (8001f9c <ModbusInit+0x140>)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	  numberHandlers++;
 8001f5a:	4b05      	ldr	r3, [pc, #20]	; (8001f70 <ModbusInit+0x114>)
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	3301      	adds	r3, #1
 8001f60:	b2da      	uxtb	r2, r3
 8001f62:	4b03      	ldr	r3, [pc, #12]	; (8001f70 <ModbusInit+0x114>)
 8001f64:	701a      	strb	r2, [r3, #0]
  else
  {
	  while(1); //error no more Modbus handlers supported
  }

}
 8001f66:	e000      	b.n	8001f6a <ModbusInit+0x10e>
	  while(1); //error no more Modbus handlers supported
 8001f68:	e7fe      	b.n	8001f68 <ModbusInit+0x10c>
}
 8001f6a:	3708      	adds	r7, #8
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	20000038 	.word	0x20000038
 8001f74:	0802e210 	.word	0x0802e210
 8001f78:	080021b9 	.word	0x080021b9
 8001f7c:	0802e234 	.word	0x0802e234
 8001f80:	0800267d 	.word	0x0800267d
 8001f84:	0800215d 	.word	0x0800215d
 8001f88:	0802993c 	.word	0x0802993c
 8001f8c:	0802e1f8 	.word	0x0802e1f8
 8001f90:	080020d9 	.word	0x080020d9
 8001f94:	0802994c 	.word	0x0802994c
 8001f98:	0802e258 	.word	0x0802e258
 8001f9c:	20013a84 	.word	0x20013a84

08001fa0 <ModbusStart>:
 * ModbusRtu's own begin() functions.)
 *
 * @ingroup setup
 */
void ModbusStart(modbusHandler_t * modH)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]

	if(modH->xTypeHW != USART_HW && modH->xTypeHW != TCP_HW && modH->xTypeHW != USB_CDC_HW  && modH->xTypeHW != USART_HW_DMA )
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d00f      	beq.n	8001fd2 <ModbusStart+0x32>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8001fb8:	2b03      	cmp	r3, #3
 8001fba:	d00a      	beq.n	8001fd2 <ModbusStart+0x32>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d005      	beq.n	8001fd2 <ModbusStart+0x32>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8001fcc:	2b04      	cmp	r3, #4
 8001fce:	d000      	beq.n	8001fd2 <ModbusStart+0x32>
	{

		while(1); //ERROR select the type of hardware
 8001fd0:	e7fe      	b.n	8001fd0 <ModbusStart+0x30>
		while(1); //ERROR To use USART_HW_DMA you need to enable it in the ModbusConfig.h file
	}



	if (modH->xTypeHW == USART_HW || modH->xTypeHW ==  USART_HW_DMA )
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d004      	beq.n	8001fe6 <ModbusStart+0x46>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8001fe2:	2b04      	cmp	r3, #4
 8001fe4:	d15a      	bne.n	800209c <ModbusStart+0xfc>
	{

	      if (modH->EN_Port != NULL )
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d007      	beq.n	8001ffe <ModbusStart+0x5e>
          {
              // return RS485 transceiver to transmit mode
	    	  HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	68d8      	ldr	r0, [r3, #12]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	8a1b      	ldrh	r3, [r3, #16]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	f00b f9a5 	bl	800d348 <HAL_GPIO_WritePin>
//	    	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
          }

          if (modH->uModbusType == MB_SLAVE &&  modH->u16regs == NULL )
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	2b03      	cmp	r3, #3
 8002004:	d105      	bne.n	8002012 <ModbusStart+0x72>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800200c:	2b00      	cmp	r3, #0
 800200e:	d100      	bne.n	8002012 <ModbusStart+0x72>
          {
          	while(1); //ERROR define the DATA pointer shared through Modbus
 8002010:	e7fe      	b.n	8002010 <ModbusStart+0x70>
          }

          //check that port is initialized
          while (HAL_UART_GetState(modH->port) != HAL_UART_STATE_READY)
 8002012:	bf00      	nop
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	4618      	mov	r0, r3
 800201a:	f00e fa13 	bl	8010444 <HAL_UART_GetState>
 800201e:	4603      	mov	r3, r0
 8002020:	2b20      	cmp	r3, #32
 8002022:	d1f7      	bne.n	8002014 <ModbusStart+0x74>
          {

          }

#if ENABLE_USART_DMA ==1
          if( modH->xTypeHW == USART_HW_DMA )
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800202a:	2b04      	cmp	r3, #4
 800202c:	d118      	bne.n	8002060 <ModbusStart+0xc0>
          {


        	  if(HAL_UARTEx_ReceiveToIdle_DMA(modH->port, modH->xBufferRX.uxBuffer, MAX_BUFFER ) != HAL_OK)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6858      	ldr	r0, [r3, #4]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	33bc      	adds	r3, #188	; 0xbc
 8002036:	2280      	movs	r2, #128	; 0x80
 8002038:	4619      	mov	r1, r3
 800203a:	f00d fdd8 	bl	800fbee <HAL_UARTEx_ReceiveToIdle_DMA>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d000      	beq.n	8002046 <ModbusStart+0xa6>
        	   {
        	         while(1)
 8002044:	e7fe      	b.n	8002044 <ModbusStart+0xa4>
        	         {
        	                    	  //error in your initialization code
        	         }
        	   }
        	  __HAL_DMA_DISABLE_IT(modH->port->hdmarx, DMA_IT_HT); // we don't need half-transfer interrupt
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f022 0208 	bic.w	r2, r2, #8
 800205c:	601a      	str	r2, [r3, #0]
 800205e:	e00b      	b.n	8002078 <ModbusStart+0xd8>

          }
          else{

        	  // Receive data from serial port for Modbus using interrupt
        	  if(HAL_UART_Receive_IT(modH->port, &modH->dataRX, 1) != HAL_OK)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6858      	ldr	r0, [r3, #4]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	33a6      	adds	r3, #166	; 0xa6
 8002068:	2201      	movs	r2, #1
 800206a:	4619      	mov	r1, r3
 800206c:	f00d fc92 	bl	800f994 <HAL_UART_Receive_IT>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d000      	beq.n	8002078 <ModbusStart+0xd8>
        	  {
        	           while(1)
 8002076:	e7fe      	b.n	8002076 <ModbusStart+0xd6>
                 }
          }

#endif

          if(modH->u8id !=0 && modH->uModbusType == MB_MASTER )
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	7a1b      	ldrb	r3, [r3, #8]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d004      	beq.n	800208a <ModbusStart+0xea>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	2b04      	cmp	r3, #4
 8002086:	d100      	bne.n	800208a <ModbusStart+0xea>
          {
        	  while(1)
 8002088:	e7fe      	b.n	8002088 <ModbusStart+0xe8>
        	     	  //error Master ID must be zero
        	  }

          }

          if(modH->u8id ==0 && modH->uModbusType == MB_SLAVE )
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	7a1b      	ldrb	r3, [r3, #8]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d104      	bne.n	800209c <ModbusStart+0xfc>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	2b03      	cmp	r3, #3
 8002098:	d100      	bne.n	800209c <ModbusStart+0xfc>
          {
             	  while(1)
 800209a:	e7fe      	b.n	800209a <ModbusStart+0xfa>


#endif


    modH->u8lastRec = modH->u8BufferSize = 0;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f893 2093 	ldrb.w	r2, [r3, #147]	; 0x93
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
    modH->u16InCnt = modH->u16OutCnt = modH->u16errCnt = 0;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f8b3 20a0 	ldrh.w	r2, [r3, #160]	; 0xa0
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f8b3 209e 	ldrh.w	r2, [r3, #158]	; 0x9e
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

}
 80020d0:	bf00      	nop
 80020d2:	3708      	adds	r7, #8
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <vTimerCallbackT35>:
}
#endif


void vTimerCallbackT35(TimerHandle_t *pxTimer)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b086      	sub	sp, #24
 80020dc:	af02      	add	r7, sp, #8
 80020de:	6078      	str	r0, [r7, #4]
	//Notify that a stream has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
 80020e0:	2300      	movs	r3, #0
 80020e2:	60fb      	str	r3, [r7, #12]
 80020e4:	e02a      	b.n	800213c <vTimerCallbackT35+0x64>
	{

		if( (TimerHandle_t *)mHandlers[i]->xTimerT35 ==  pxTimer ){
 80020e6:	4a1b      	ldr	r2, [pc, #108]	; (8002154 <vTimerCallbackT35+0x7c>)
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d11e      	bne.n	8002136 <vTimerCallbackT35+0x5e>
			if(mHandlers[i]->uModbusType == MB_MASTER)
 80020f8:	4a16      	ldr	r2, [pc, #88]	; (8002154 <vTimerCallbackT35+0x7c>)
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	2b04      	cmp	r3, #4
 8002104:	d10c      	bne.n	8002120 <vTimerCallbackT35+0x48>
			{
				xTimerStop(mHandlers[i]->xTimerTimeout,0);
 8002106:	4a13      	ldr	r2, [pc, #76]	; (8002154 <vTimerCallbackT35+0x7c>)
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800210e:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
 8002112:	2300      	movs	r3, #0
 8002114:	9300      	str	r3, [sp, #0]
 8002116:	2300      	movs	r3, #0
 8002118:	2200      	movs	r2, #0
 800211a:	2103      	movs	r1, #3
 800211c:	f012 fdaa 	bl	8014c74 <xTimerGenericCommand>
			}
			xTaskNotify(mHandlers[i]->myTaskModbusAHandle, 0, eSetValueWithOverwrite);
 8002120:	4a0c      	ldr	r2, [pc, #48]	; (8002154 <vTimerCallbackT35+0x7c>)
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002128:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
 800212c:	2300      	movs	r3, #0
 800212e:	2203      	movs	r2, #3
 8002130:	2100      	movs	r1, #0
 8002132:	f012 fb13 	bl	801475c <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	3301      	adds	r3, #1
 800213a:	60fb      	str	r3, [r7, #12]
 800213c:	4b06      	ldr	r3, [pc, #24]	; (8002158 <vTimerCallbackT35+0x80>)
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	461a      	mov	r2, r3
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	4293      	cmp	r3, r2
 8002146:	dbce      	blt.n	80020e6 <vTimerCallbackT35+0xe>
		}

	}
}
 8002148:	bf00      	nop
 800214a:	bf00      	nop
 800214c:	3710      	adds	r7, #16
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	20013a84 	.word	0x20013a84
 8002158:	20000038 	.word	0x20000038

0800215c <vTimerCallbackTimeout>:

void vTimerCallbackTimeout(TimerHandle_t *pxTimer)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b084      	sub	sp, #16
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
	//Notify that a stream has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
 8002164:	2300      	movs	r3, #0
 8002166:	60fb      	str	r3, [r7, #12]
 8002168:	e017      	b.n	800219a <vTimerCallbackTimeout+0x3e>
	{

		if( (TimerHandle_t *)mHandlers[i]->xTimerTimeout ==  pxTimer ){
 800216a:	4a11      	ldr	r2, [pc, #68]	; (80021b0 <vTimerCallbackTimeout+0x54>)
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002172:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	429a      	cmp	r2, r3
 800217a:	d10b      	bne.n	8002194 <vTimerCallbackTimeout+0x38>
				xTaskNotify(mHandlers[i]->myTaskModbusAHandle, ERR_TIME_OUT, eSetValueWithOverwrite);
 800217c:	4a0c      	ldr	r2, [pc, #48]	; (80021b0 <vTimerCallbackTimeout+0x54>)
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002184:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
 8002188:	2300      	movs	r3, #0
 800218a:	2203      	movs	r2, #3
 800218c:	f06f 0107 	mvn.w	r1, #7
 8002190:	f012 fae4 	bl	801475c <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	3301      	adds	r3, #1
 8002198:	60fb      	str	r3, [r7, #12]
 800219a:	4b06      	ldr	r3, [pc, #24]	; (80021b4 <vTimerCallbackTimeout+0x58>)
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	461a      	mov	r2, r3
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	4293      	cmp	r3, r2
 80021a4:	dbe1      	blt.n	800216a <vTimerCallbackTimeout+0xe>
		}

	}

}
 80021a6:	bf00      	nop
 80021a8:	bf00      	nop
 80021aa:	3710      	adds	r7, #16
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	20013a84 	.word	0x20013a84
 80021b4:	20000038 	.word	0x20000038

080021b8 <StartTaskModbusSlave>:
#endif



void StartTaskModbusSlave(void *argument)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]

  modbusHandler_t *modH =  (modbusHandler_t *)argument;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	60fb      	str	r3, [r7, #12]
#endif

  for(;;)
  {

	modH->i8lastError = 0;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2200      	movs	r2, #0
 80021c8:	749a      	strb	r2, [r3, #18]

	  }
#endif


   if(modH->xTypeHW == USART_HW || modH->xTypeHW == USART_HW_DMA)
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d004      	beq.n	80021de <StartTaskModbusSlave+0x26>
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 80021da:	2b04      	cmp	r3, #4
 80021dc:	d117      	bne.n	800220e <StartTaskModbusSlave+0x56>
   {

	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY); /* Block until a Modbus Frame arrives */
 80021de:	f04f 31ff 	mov.w	r1, #4294967295
 80021e2:	2001      	movs	r0, #1
 80021e4:	f012 fa72 	bl	80146cc <ulTaskNotifyTake>

	  if (getRxBuffer(modH) == ERR_BUFF_OVERFLOW)
 80021e8:	68f8      	ldr	r0, [r7, #12]
 80021ea:	f000 fc15 	bl	8002a18 <getRxBuffer>
 80021ee:	4603      	mov	r3, r0
 80021f0:	f113 0f03 	cmn.w	r3, #3
 80021f4:	d10b      	bne.n	800220e <StartTaskModbusSlave+0x56>
	  {
	      modH->i8lastError = ERR_BUFF_OVERFLOW;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	22fd      	movs	r2, #253	; 0xfd
 80021fa:	749a      	strb	r2, [r3, #18]
	   	  modH->u16errCnt++;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8002202:	3301      	adds	r3, #1
 8002204:	b29a      	uxth	r2, r3
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
		  continue;
 800220c:	e0a1      	b.n	8002352 <StartTaskModbusSlave+0x19a>
	  }

   }

   if (modH->u8BufferSize < 7)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002214:	2b06      	cmp	r3, #6
 8002216:	d80b      	bhi.n	8002230 <StartTaskModbusSlave+0x78>
   {
      //The size of the frame is invalid
      modH->i8lastError = ERR_BAD_SIZE;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	22fa      	movs	r2, #250	; 0xfa
 800221c:	749a      	strb	r2, [r3, #18]
      modH->u16errCnt++;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8002224:	3301      	adds	r3, #1
 8002226:	b29a      	uxth	r2, r3
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0

	  continue;
 800222e:	e090      	b.n	8002352 <StartTaskModbusSlave+0x19a>
    }


   // check slave id
    if ( modH->u8Buffer[ID] !=  modH->u8id)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	7cda      	ldrb	r2, [r3, #19]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	7a1b      	ldrb	r3, [r3, #8]
 8002238:	429a      	cmp	r2, r3
 800223a:	f040 8089 	bne.w	8002350 <StartTaskModbusSlave+0x198>
    	}
#endif
	 }

	  // validate message: CRC, FCT, address and size
    uint8_t u8exception = validateRequest(modH);
 800223e:	68f8      	ldr	r0, [r7, #12]
 8002240:	f000 fc34 	bl	8002aac <validateRequest>
 8002244:	4603      	mov	r3, r0
 8002246:	72fb      	strb	r3, [r7, #11]
	if (u8exception > 0)
 8002248:	7afb      	ldrb	r3, [r7, #11]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d00c      	beq.n	8002268 <StartTaskModbusSlave+0xb0>
	{
	    if (u8exception != ERR_TIME_OUT)
		{
		    buildException( u8exception, modH);
 800224e:	7afb      	ldrb	r3, [r7, #11]
 8002250:	68f9      	ldr	r1, [r7, #12]
 8002252:	4618      	mov	r0, r3
 8002254:	f000 fdce 	bl	8002df4 <buildException>
			sendTxBuffer(modH);
 8002258:	68f8      	ldr	r0, [r7, #12]
 800225a:	f000 fdea 	bl	8002e32 <sendTxBuffer>
		}
		modH->i8lastError = u8exception;
 800225e:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	749a      	strb	r2, [r3, #18]
		//return u8exception

		continue;
 8002266:	e074      	b.n	8002352 <StartTaskModbusSlave+0x19a>
	 }

	 modH->i8lastError = 0;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2200      	movs	r2, #0
 800226c:	749a      	strb	r2, [r3, #18]
	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8002274:	f04f 31ff 	mov.w	r1, #4294967295
 8002278:	4618      	mov	r0, r3
 800227a:	f010 fefd 	bl	8013078 <xQueueSemaphoreTake>

	 // process message
	 switch(modH->u8Buffer[ FUNC ] )
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	7d1b      	ldrb	r3, [r3, #20]
 8002282:	3b01      	subs	r3, #1
 8002284:	2b0f      	cmp	r3, #15
 8002286:	d859      	bhi.n	800233c <StartTaskModbusSlave+0x184>
 8002288:	a201      	add	r2, pc, #4	; (adr r2, 8002290 <StartTaskModbusSlave+0xd8>)
 800228a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800228e:	bf00      	nop
 8002290:	080022d1 	.word	0x080022d1
 8002294:	080022d1 	.word	0x080022d1
 8002298:	080022e3 	.word	0x080022e3
 800229c:	080022e3 	.word	0x080022e3
 80022a0:	080022f5 	.word	0x080022f5
 80022a4:	08002307 	.word	0x08002307
 80022a8:	0800233d 	.word	0x0800233d
 80022ac:	0800233d 	.word	0x0800233d
 80022b0:	0800233d 	.word	0x0800233d
 80022b4:	0800233d 	.word	0x0800233d
 80022b8:	0800233d 	.word	0x0800233d
 80022bc:	0800233d 	.word	0x0800233d
 80022c0:	0800233d 	.word	0x0800233d
 80022c4:	0800233d 	.word	0x0800233d
 80022c8:	08002319 	.word	0x08002319
 80022cc:	0800232b 	.word	0x0800232b
	 {
			case MB_FC_READ_COILS:
			case MB_FC_READ_DISCRETE_INPUT:
				modH->i8state = process_FC1(modH);
 80022d0:	68f8      	ldr	r0, [r7, #12]
 80022d2:	f000 fe50 	bl	8002f76 <process_FC1>
 80022d6:	4603      	mov	r3, r0
 80022d8:	461a      	mov	r2, r3
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 80022e0:	e02d      	b.n	800233e <StartTaskModbusSlave+0x186>
			case MB_FC_READ_INPUT_REGISTER:
			case MB_FC_READ_REGISTERS :
				modH->i8state = process_FC3(modH);
 80022e2:	68f8      	ldr	r0, [r7, #12]
 80022e4:	f000 fefc 	bl	80030e0 <process_FC3>
 80022e8:	4603      	mov	r3, r0
 80022ea:	461a      	mov	r2, r3
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 80022f2:	e024      	b.n	800233e <StartTaskModbusSlave+0x186>
			case MB_FC_WRITE_COIL:
				modH->i8state = process_FC5(modH);
 80022f4:	68f8      	ldr	r0, [r7, #12]
 80022f6:	f000 ff5e 	bl	80031b6 <process_FC5>
 80022fa:	4603      	mov	r3, r0
 80022fc:	461a      	mov	r2, r3
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 8002304:	e01b      	b.n	800233e <StartTaskModbusSlave+0x186>
			case MB_FC_WRITE_REGISTER :
				modH->i8state = process_FC6(modH);
 8002306:	68f8      	ldr	r0, [r7, #12]
 8002308:	f000 ffae 	bl	8003268 <process_FC6>
 800230c:	4603      	mov	r3, r0
 800230e:	461a      	mov	r2, r3
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 8002316:	e012      	b.n	800233e <StartTaskModbusSlave+0x186>
			case MB_FC_WRITE_MULTIPLE_COILS:
				modH->i8state = process_FC15(modH);
 8002318:	68f8      	ldr	r0, [r7, #12]
 800231a:	f000 ffd7 	bl	80032cc <process_FC15>
 800231e:	4603      	mov	r3, r0
 8002320:	461a      	mov	r2, r3
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 8002328:	e009      	b.n	800233e <StartTaskModbusSlave+0x186>
			case MB_FC_WRITE_MULTIPLE_REGISTERS :
				modH->i8state = process_FC16(modH);
 800232a:	68f8      	ldr	r0, [r7, #12]
 800232c:	f001 f85c 	bl	80033e8 <process_FC16>
 8002330:	4603      	mov	r3, r0
 8002332:	461a      	mov	r2, r3
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 800233a:	e000      	b.n	800233e <StartTaskModbusSlave+0x186>
			default:
				break;
 800233c:	bf00      	nop
	 }


	 xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 8002344:	2300      	movs	r3, #0
 8002346:	2200      	movs	r2, #0
 8002348:	2100      	movs	r1, #0
 800234a:	f010 fb8f 	bl	8012a6c <xQueueGenericSend>

	 continue;
 800234e:	e000      	b.n	8002352 <StartTaskModbusSlave+0x19a>
    	continue; // continue this is not for us
 8002350:	bf00      	nop
  {
 8002352:	e737      	b.n	80021c4 <StartTaskModbusSlave+0xc>

08002354 <ModbusQuery>:
}



void ModbusQuery(modbusHandler_t * modH, modbus_t telegram )
{
 8002354:	b084      	sub	sp, #16
 8002356:	b580      	push	{r7, lr}
 8002358:	b082      	sub	sp, #8
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
 800235e:	f107 0014 	add.w	r0, r7, #20
 8002362:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	//Add the telegram to the TX tail Queue of Modbus
	if (modH->uModbusType == MB_MASTER)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	2b04      	cmp	r3, #4
 800236c:	d10d      	bne.n	800238a <ModbusQuery+0x36>
	{
	telegram.u32CurrentTask = (uint32_t *) osThreadGetId();
 800236e:	f00f fcb1 	bl	8011cd4 <osThreadGetId>
 8002372:	4603      	mov	r3, r0
 8002374:	623b      	str	r3, [r7, #32]
	xQueueSendToBack(modH->QueueTelegramHandle, &telegram, 0);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	f8d3 00a8 	ldr.w	r0, [r3, #168]	; 0xa8
 800237c:	f107 0114 	add.w	r1, r7, #20
 8002380:	2300      	movs	r3, #0
 8002382:	2200      	movs	r2, #0
 8002384:	f010 fb72 	bl	8012a6c <xQueueGenericSend>
	}
	else
		printf("error a slave cannot send queries as a master\n");
//		while(1);// error a slave cannot send queries as a master

}
 8002388:	e002      	b.n	8002390 <ModbusQuery+0x3c>
		printf("error a slave cannot send queries as a master\n");
 800238a:	4805      	ldr	r0, [pc, #20]	; (80023a0 <ModbusQuery+0x4c>)
 800238c:	f023 fa94 	bl	80258b8 <puts>
}
 8002390:	bf00      	nop
 8002392:	3708      	adds	r7, #8
 8002394:	46bd      	mov	sp, r7
 8002396:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800239a:	b004      	add	sp, #16
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	08029958 	.word	0x08029958

080023a4 <SendQuery>:
 * @param modH  modbus handler
 * @param modbus_t  modbus telegram structure (id, fct, ...)
 * @ingroup loop
 */
int8_t SendQuery(modbusHandler_t *modH ,  modbus_t telegram )
{
 80023a4:	b084      	sub	sp, #16
 80023a6:	b580      	push	{r7, lr}
 80023a8:	b084      	sub	sp, #16
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]
 80023ae:	f107 001c 	add.w	r0, r7, #28
 80023b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}


	uint8_t u8regsno, u8bytesno;
	uint8_t  error = 0;
 80023b6:	2300      	movs	r3, #0
 80023b8:	73bb      	strb	r3, [r7, #14]
	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80023c0:	f04f 31ff 	mov.w	r1, #4294967295
 80023c4:	4618      	mov	r0, r3
 80023c6:	f010 fe57 	bl	8013078 <xQueueSemaphoreTake>

	if (modH->u8id!=0) error = ERR_NOT_MASTER;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	7a1b      	ldrb	r3, [r3, #8]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <SendQuery+0x32>
 80023d2:	23ff      	movs	r3, #255	; 0xff
 80023d4:	73bb      	strb	r3, [r7, #14]
	if (modH->i8state != COM_IDLE) error = ERR_POLLING ;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f993 30a7 	ldrsb.w	r3, [r3, #167]	; 0xa7
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <SendQuery+0x40>
 80023e0:	23fe      	movs	r3, #254	; 0xfe
 80023e2:	73bb      	strb	r3, [r7, #14]
	if ((telegram.u8id==0) || (telegram.u8id>247)) error = ERR_BAD_SLAVE_ID;
 80023e4:	7f3b      	ldrb	r3, [r7, #28]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d002      	beq.n	80023f0 <SendQuery+0x4c>
 80023ea:	7f3b      	ldrb	r3, [r7, #28]
 80023ec:	2bf7      	cmp	r3, #247	; 0xf7
 80023ee:	d901      	bls.n	80023f4 <SendQuery+0x50>
 80023f0:	23f7      	movs	r3, #247	; 0xf7
 80023f2:	73bb      	strb	r3, [r7, #14]


	if(error)
 80023f4:	7bbb      	ldrb	r3, [r7, #14]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d00e      	beq.n	8002418 <SendQuery+0x74>
	{
		 modH->i8lastError = error;
 80023fa:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	749a      	strb	r2, [r3, #18]
		 xSemaphoreGive(modH->ModBusSphrHandle);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 8002408:	2300      	movs	r3, #0
 800240a:	2200      	movs	r2, #0
 800240c:	2100      	movs	r1, #0
 800240e:	f010 fb2d 	bl	8012a6c <xQueueGenericSend>
		 return error;
 8002412:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002416:	e129      	b.n	800266c <SendQuery+0x2c8>
	}


	modH->u16regs = telegram.u16reg;
 8002418:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

	// telegram header
	modH->u8Buffer[ ID ]         = telegram.u8id;
 8002420:	7f3a      	ldrb	r2, [r7, #28]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	74da      	strb	r2, [r3, #19]
	modH->u8Buffer[ FUNC ]       = telegram.u8fct;
 8002426:	7f7a      	ldrb	r2, [r7, #29]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	751a      	strb	r2, [r3, #20]
	modH->u8Buffer[ ADD_HI ]     = highByte(telegram.u16RegAdd );
 800242c:	8bfb      	ldrh	r3, [r7, #30]
 800242e:	0a1b      	lsrs	r3, r3, #8
 8002430:	b29b      	uxth	r3, r3
 8002432:	b2da      	uxtb	r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	755a      	strb	r2, [r3, #21]
	modH->u8Buffer[ ADD_LO ]     = lowByte( telegram.u16RegAdd );
 8002438:	8bfb      	ldrh	r3, [r7, #30]
 800243a:	b2da      	uxtb	r2, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	759a      	strb	r2, [r3, #22]

	switch( telegram.u8fct )
 8002440:	7f7b      	ldrb	r3, [r7, #29]
 8002442:	3b01      	subs	r3, #1
 8002444:	2b0f      	cmp	r3, #15
 8002446:	f200 80fe 	bhi.w	8002646 <SendQuery+0x2a2>
 800244a:	a201      	add	r2, pc, #4	; (adr r2, 8002450 <SendQuery+0xac>)
 800244c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002450:	08002491 	.word	0x08002491
 8002454:	08002491 	.word	0x08002491
 8002458:	08002491 	.word	0x08002491
 800245c:	08002491 	.word	0x08002491
 8002460:	080024af 	.word	0x080024af
 8002464:	080024d1 	.word	0x080024d1
 8002468:	08002647 	.word	0x08002647
 800246c:	08002647 	.word	0x08002647
 8002470:	08002647 	.word	0x08002647
 8002474:	08002647 	.word	0x08002647
 8002478:	08002647 	.word	0x08002647
 800247c:	08002647 	.word	0x08002647
 8002480:	08002647 	.word	0x08002647
 8002484:	08002647 	.word	0x08002647
 8002488:	080024f3 	.word	0x080024f3
 800248c:	080025b1 	.word	0x080025b1
	{
	case MB_FC_READ_COILS:
	case MB_FC_READ_DISCRETE_INPUT:
	case MB_FC_READ_REGISTERS:
	case MB_FC_READ_INPUT_REGISTER:
	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 8002490:	8c3b      	ldrh	r3, [r7, #32]
 8002492:	0a1b      	lsrs	r3, r3, #8
 8002494:	b29b      	uxth	r3, r3
 8002496:	b2da      	uxtb	r2, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 800249c:	8c3b      	ldrh	r3, [r7, #32]
 800249e:	b2da      	uxtb	r2, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2206      	movs	r2, #6
 80024a8:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    break;
 80024ac:	e0cb      	b.n	8002646 <SendQuery+0x2a2>
	case MB_FC_WRITE_COIL:
	    modH->u8Buffer[ NB_HI ]      = (( telegram.u16reg[0]> 0) ? 0xff : 0);
 80024ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b0:	881b      	ldrh	r3, [r3, #0]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <SendQuery+0x116>
 80024b6:	22ff      	movs	r2, #255	; 0xff
 80024b8:	e000      	b.n	80024bc <SendQuery+0x118>
 80024ba:	2200      	movs	r2, #0
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = 0;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2206      	movs	r2, #6
 80024ca:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    break;
 80024ce:	e0ba      	b.n	8002646 <SendQuery+0x2a2>
	case MB_FC_WRITE_REGISTER:
	    modH->u8Buffer[ NB_HI ]      = highByte( telegram.u16reg[0]);
 80024d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d2:	881b      	ldrh	r3, [r3, #0]
 80024d4:	0a1b      	lsrs	r3, r3, #8
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	b2da      	uxtb	r2, r3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16reg[0]);
 80024de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e0:	881b      	ldrh	r3, [r3, #0]
 80024e2:	b2da      	uxtb	r2, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2206      	movs	r2, #6
 80024ec:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    break;
 80024f0:	e0a9      	b.n	8002646 <SendQuery+0x2a2>
	case MB_FC_WRITE_MULTIPLE_COILS: // TODO: implement "sending coils"
	    u8regsno = telegram.u16CoilsNo / 16;
 80024f2:	8c3b      	ldrh	r3, [r7, #32]
 80024f4:	091b      	lsrs	r3, r3, #4
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	727b      	strb	r3, [r7, #9]
	    u8bytesno = u8regsno * 2;
 80024fa:	7a7b      	ldrb	r3, [r7, #9]
 80024fc:	005b      	lsls	r3, r3, #1
 80024fe:	73fb      	strb	r3, [r7, #15]
	    if ((telegram.u16CoilsNo % 16) != 0)
 8002500:	8c3b      	ldrh	r3, [r7, #32]
 8002502:	f003 030f 	and.w	r3, r3, #15
 8002506:	b29b      	uxth	r3, r3
 8002508:	2b00      	cmp	r3, #0
 800250a:	d005      	beq.n	8002518 <SendQuery+0x174>
	    {
	        u8bytesno++;
 800250c:	7bfb      	ldrb	r3, [r7, #15]
 800250e:	3301      	adds	r3, #1
 8002510:	73fb      	strb	r3, [r7, #15]
	        u8regsno++;
 8002512:	7a7b      	ldrb	r3, [r7, #9]
 8002514:	3301      	adds	r3, #1
 8002516:	727b      	strb	r3, [r7, #9]
	    }

	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 8002518:	8c3b      	ldrh	r3, [r7, #32]
 800251a:	0a1b      	lsrs	r3, r3, #8
 800251c:	b29b      	uxth	r3, r3
 800251e:	b2da      	uxtb	r2, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 8002524:	8c3b      	ldrh	r3, [r7, #32]
 8002526:	b2da      	uxtb	r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	761a      	strb	r2, [r3, #24]
	    modH->u8Buffer[ BYTE_CNT ]    = u8bytesno;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	7bfa      	ldrb	r2, [r7, #15]
 8002530:	765a      	strb	r2, [r3, #25]
	    modH->u8BufferSize = 7;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2207      	movs	r2, #7
 8002536:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

	    for (uint16_t i = 0; i < u8bytesno; i++)
 800253a:	2300      	movs	r3, #0
 800253c:	81bb      	strh	r3, [r7, #12]
 800253e:	e031      	b.n	80025a4 <SendQuery+0x200>
	    {
	        if(i%2)
 8002540:	89bb      	ldrh	r3, [r7, #12]
 8002542:	f003 0301 	and.w	r3, r3, #1
 8002546:	b29b      	uxth	r3, r3
 8002548:	2b00      	cmp	r3, #0
 800254a:	d00f      	beq.n	800256c <SendQuery+0x1c8>
	        {
	        	modH->u8Buffer[ modH->u8BufferSize ] = lowByte( telegram.u16reg[ i/2 ] );
 800254c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800254e:	89bb      	ldrh	r3, [r7, #12]
 8002550:	085b      	lsrs	r3, r3, #1
 8002552:	b29b      	uxth	r3, r3
 8002554:	005b      	lsls	r3, r3, #1
 8002556:	4413      	add	r3, r2
 8002558:	881a      	ldrh	r2, [r3, #0]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002560:	4619      	mov	r1, r3
 8002562:	b2d2      	uxtb	r2, r2
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	440b      	add	r3, r1
 8002568:	74da      	strb	r2, [r3, #19]
 800256a:	e010      	b.n	800258e <SendQuery+0x1ea>
	        }
	        else
	        {
	        	modH->u8Buffer[  modH->u8BufferSize ] = highByte( telegram.u16reg[ i/2 ] );
 800256c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800256e:	89bb      	ldrh	r3, [r7, #12]
 8002570:	085b      	lsrs	r3, r3, #1
 8002572:	b29b      	uxth	r3, r3
 8002574:	005b      	lsls	r3, r3, #1
 8002576:	4413      	add	r3, r2
 8002578:	881b      	ldrh	r3, [r3, #0]
 800257a:	0a1b      	lsrs	r3, r3, #8
 800257c:	b29a      	uxth	r2, r3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002584:	4619      	mov	r1, r3
 8002586:	b2d2      	uxtb	r2, r2
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	440b      	add	r3, r1
 800258c:	74da      	strb	r2, [r3, #19]

	        }
	        modH->u8BufferSize++;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002594:	3301      	adds	r3, #1
 8002596:	b2da      	uxtb	r2, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    for (uint16_t i = 0; i < u8bytesno; i++)
 800259e:	89bb      	ldrh	r3, [r7, #12]
 80025a0:	3301      	adds	r3, #1
 80025a2:	81bb      	strh	r3, [r7, #12]
 80025a4:	7bfb      	ldrb	r3, [r7, #15]
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	89ba      	ldrh	r2, [r7, #12]
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d3c8      	bcc.n	8002540 <SendQuery+0x19c>
	    }
	    break;
 80025ae:	e04a      	b.n	8002646 <SendQuery+0x2a2>

	case MB_FC_WRITE_MULTIPLE_REGISTERS:
	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 80025b0:	8c3b      	ldrh	r3, [r7, #32]
 80025b2:	0a1b      	lsrs	r3, r3, #8
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	b2da      	uxtb	r2, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 80025bc:	8c3b      	ldrh	r3, [r7, #32]
 80025be:	b2da      	uxtb	r2, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	761a      	strb	r2, [r3, #24]
	    modH->u8Buffer[ BYTE_CNT ]    = (uint8_t) ( telegram.u16CoilsNo * 2 );
 80025c4:	8c3b      	ldrh	r3, [r7, #32]
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	b2da      	uxtb	r2, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	765a      	strb	r2, [r3, #25]
	    modH->u8BufferSize = 7;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2207      	movs	r2, #7
 80025d4:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 80025d8:	2300      	movs	r3, #0
 80025da:	817b      	strh	r3, [r7, #10]
 80025dc:	e02e      	b.n	800263c <SendQuery+0x298>
	    {

	        modH->u8Buffer[  modH->u8BufferSize ] = highByte(  telegram.u16reg[ i ] );
 80025de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025e0:	897b      	ldrh	r3, [r7, #10]
 80025e2:	005b      	lsls	r3, r3, #1
 80025e4:	4413      	add	r3, r2
 80025e6:	881b      	ldrh	r3, [r3, #0]
 80025e8:	0a1b      	lsrs	r3, r3, #8
 80025ea:	b29a      	uxth	r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80025f2:	4619      	mov	r1, r3
 80025f4:	b2d2      	uxtb	r2, r2
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	440b      	add	r3, r1
 80025fa:	74da      	strb	r2, [r3, #19]
	        modH->u8BufferSize++;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002602:	3301      	adds	r3, #1
 8002604:	b2da      	uxtb	r2, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	        modH->u8Buffer[  modH->u8BufferSize ] = lowByte( telegram.u16reg[ i ] );
 800260c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800260e:	897b      	ldrh	r3, [r7, #10]
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	4413      	add	r3, r2
 8002614:	881a      	ldrh	r2, [r3, #0]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800261c:	4619      	mov	r1, r3
 800261e:	b2d2      	uxtb	r2, r2
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	440b      	add	r3, r1
 8002624:	74da      	strb	r2, [r3, #19]
	        modH->u8BufferSize++;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800262c:	3301      	adds	r3, #1
 800262e:	b2da      	uxtb	r2, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 8002636:	897b      	ldrh	r3, [r7, #10]
 8002638:	3301      	adds	r3, #1
 800263a:	817b      	strh	r3, [r7, #10]
 800263c:	8c3b      	ldrh	r3, [r7, #32]
 800263e:	897a      	ldrh	r2, [r7, #10]
 8002640:	429a      	cmp	r2, r3
 8002642:	d3cc      	bcc.n	80025de <SendQuery+0x23a>
	    }
	    break;
 8002644:	bf00      	nop
	}


	sendTxBuffer(modH);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f000 fbf3 	bl	8002e32 <sendTxBuffer>

	xSemaphoreGive(modH->ModBusSphrHandle);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 8002652:	2300      	movs	r3, #0
 8002654:	2200      	movs	r2, #0
 8002656:	2100      	movs	r1, #0
 8002658:	f010 fa08 	bl	8012a6c <xQueueGenericSend>

	modH->i8state = COM_WAITING;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2201      	movs	r2, #1
 8002660:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
	modH->i8lastError = 0;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2200      	movs	r2, #0
 8002668:	749a      	strb	r2, [r3, #18]
	return 0;
 800266a:	2300      	movs	r3, #0


}
 800266c:	4618      	mov	r0, r3
 800266e:	3710      	adds	r7, #16
 8002670:	46bd      	mov	sp, r7
 8002672:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002676:	b004      	add	sp, #16
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop

0800267c <StartTaskModbusMaster>:
}

#endif

void StartTaskModbusMaster(void *argument)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b08c      	sub	sp, #48	; 0x30
 8002680:	af02      	add	r7, sp, #8
 8002682:	6078      	str	r0, [r7, #4]

  modbusHandler_t *modH =  (modbusHandler_t *)argument;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	627b      	str	r3, [r7, #36]	; 0x24


  for(;;)
  {
	  /*Wait indefinitely for a telegram to send */
	  xQueueReceive(modH->QueueTelegramHandle, &telegram, portMAX_DELAY);
 8002688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800268e:	f107 010c 	add.w	r1, r7, #12
 8002692:	f04f 32ff 	mov.w	r2, #4294967295
 8002696:	4618      	mov	r0, r3
 8002698:	f010 fc0e 	bl	8012eb8 <xQueueReceive>
       /* Block until a Modbus Frame arrives or query timeouts*/
   	   ulNotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
     }
#else
     // This is the case for implementations with only USART support
     SendQuery(modH, telegram);
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	9300      	str	r3, [sp, #0]
 80026a0:	f107 030c 	add.w	r3, r7, #12
 80026a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80026a8:	f7ff fe7c 	bl	80023a4 <SendQuery>
     /* Block indefinitely until a Modbus Frame arrives or query timeouts*/
     ulNotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80026ac:	f04f 31ff 	mov.w	r1, #4294967295
 80026b0:	2001      	movs	r0, #1
 80026b2:	f012 f80b 	bl	80146cc <ulTaskNotifyTake>
 80026b6:	6238      	str	r0, [r7, #32]

#endif

	  // notify the task the request timeout
      modH->i8lastError = 0;
 80026b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ba:	2200      	movs	r2, #0
 80026bc:	749a      	strb	r2, [r3, #18]
      if(ulNotificationValue)
 80026be:	6a3b      	ldr	r3, [r7, #32]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d018      	beq.n	80026f6 <StartTaskModbusMaster+0x7a>
      {
    	  modH->i8state = COM_IDLE;
 80026c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c6:	2200      	movs	r2, #0
 80026c8:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
    	  modH->i8lastError = ERR_TIME_OUT;
 80026cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ce:	22f8      	movs	r2, #248	; 0xf8
 80026d0:	749a      	strb	r2, [r3, #18]
    	  modH->u16errCnt++;
 80026d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d4:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 80026d8:	3301      	adds	r3, #1
 80026da:	b29a      	uxth	r2, r3
 80026dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026de:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
    	  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 80026e2:	69b8      	ldr	r0, [r7, #24]
 80026e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e6:	f993 3012 	ldrsb.w	r3, [r3, #18]
 80026ea:	4619      	mov	r1, r3
 80026ec:	2300      	movs	r3, #0
 80026ee:	2203      	movs	r2, #3
 80026f0:	f012 f834 	bl	801475c <xTaskGenericNotify>
    	  continue;
 80026f4:	e09a      	b.n	800282c <StartTaskModbusMaster+0x1b0>
      {
    	  getRxBuffer(modH);
      }

#else
      getRxBuffer(modH);
 80026f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80026f8:	f000 f98e 	bl	8002a18 <getRxBuffer>
#endif



	  if ( modH->u8BufferSize < 6){
 80026fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fe:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002702:	2b05      	cmp	r3, #5
 8002704:	d818      	bhi.n	8002738 <StartTaskModbusMaster+0xbc>

		  modH->i8state = COM_IDLE;
 8002706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002708:	2200      	movs	r2, #0
 800270a:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
		  modH->i8lastError = ERR_BAD_SIZE;
 800270e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002710:	22fa      	movs	r2, #250	; 0xfa
 8002712:	749a      	strb	r2, [r3, #18]
		  modH->u16errCnt++;
 8002714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002716:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 800271a:	3301      	adds	r3, #1
 800271c:	b29a      	uxth	r2, r3
 800271e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002720:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
		  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 8002724:	69b8      	ldr	r0, [r7, #24]
 8002726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002728:	f993 3012 	ldrsb.w	r3, [r3, #18]
 800272c:	4619      	mov	r1, r3
 800272e:	2300      	movs	r3, #0
 8002730:	2203      	movs	r2, #3
 8002732:	f012 f813 	bl	801475c <xTaskGenericNotify>
		  continue;
 8002736:	e079      	b.n	800282c <StartTaskModbusMaster+0x1b0>
	  }

	  xTimerStop(modH->xTimerTimeout,0); // cancel timeout timer
 8002738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273a:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
 800273e:	2300      	movs	r3, #0
 8002740:	9300      	str	r3, [sp, #0]
 8002742:	2300      	movs	r3, #0
 8002744:	2200      	movs	r2, #0
 8002746:	2103      	movs	r1, #3
 8002748:	f012 fa94 	bl	8014c74 <xTimerGenericCommand>


	  // validate message: id, CRC, FCT, exception
	  int8_t u8exception = validateAnswer(modH);
 800274c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800274e:	f000 f8f5 	bl	800293c <validateAnswer>
 8002752:	4603      	mov	r3, r0
 8002754:	77fb      	strb	r3, [r7, #31]
	  if (u8exception != 0)
 8002756:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d010      	beq.n	8002780 <StartTaskModbusMaster+0x104>
	  {
		 modH->i8state = COM_IDLE;
 800275e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002760:	2200      	movs	r2, #0
 8002762:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
         modH->i8lastError = u8exception;
 8002766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002768:	7ffa      	ldrb	r2, [r7, #31]
 800276a:	749a      	strb	r2, [r3, #18]
		 xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 800276c:	69b8      	ldr	r0, [r7, #24]
 800276e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002770:	f993 3012 	ldrsb.w	r3, [r3, #18]
 8002774:	4619      	mov	r1, r3
 8002776:	2300      	movs	r3, #0
 8002778:	2203      	movs	r2, #3
 800277a:	f011 ffef 	bl	801475c <xTaskGenericNotify>
	     continue;
 800277e:	e055      	b.n	800282c <StartTaskModbusMaster+0x1b0>
	  }

	  modH->i8lastError = u8exception;
 8002780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002782:	7ffa      	ldrb	r2, [r7, #31]
 8002784:	749a      	strb	r2, [r3, #18]

	  xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 8002786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002788:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800278c:	f04f 31ff 	mov.w	r1, #4294967295
 8002790:	4618      	mov	r0, r3
 8002792:	f010 fc71 	bl	8013078 <xQueueSemaphoreTake>
	  // process answer
	  switch( modH->u8Buffer[ FUNC ] )
 8002796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002798:	7d1b      	ldrb	r3, [r3, #20]
 800279a:	3b01      	subs	r3, #1
 800279c:	2b0f      	cmp	r3, #15
 800279e:	d82b      	bhi.n	80027f8 <StartTaskModbusMaster+0x17c>
 80027a0:	a201      	add	r2, pc, #4	; (adr r2, 80027a8 <StartTaskModbusMaster+0x12c>)
 80027a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027a6:	bf00      	nop
 80027a8:	080027e9 	.word	0x080027e9
 80027ac:	080027e9 	.word	0x080027e9
 80027b0:	080027f1 	.word	0x080027f1
 80027b4:	080027f1 	.word	0x080027f1
 80027b8:	080027f9 	.word	0x080027f9
 80027bc:	080027f9 	.word	0x080027f9
 80027c0:	080027f9 	.word	0x080027f9
 80027c4:	080027f9 	.word	0x080027f9
 80027c8:	080027f9 	.word	0x080027f9
 80027cc:	080027f9 	.word	0x080027f9
 80027d0:	080027f9 	.word	0x080027f9
 80027d4:	080027f9 	.word	0x080027f9
 80027d8:	080027f9 	.word	0x080027f9
 80027dc:	080027f9 	.word	0x080027f9
 80027e0:	080027f9 	.word	0x080027f9
 80027e4:	080027f9 	.word	0x080027f9
	  {
	  case MB_FC_READ_COILS:
	  case MB_FC_READ_DISCRETE_INPUT:
	      //call get_FC1 to transfer the incoming message to u16regs buffer
	      get_FC1(modH);
 80027e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80027ea:	f000 f821 	bl	8002830 <get_FC1>
	      break;
 80027ee:	e004      	b.n	80027fa <StartTaskModbusMaster+0x17e>
	  case MB_FC_READ_INPUT_REGISTER:
	  case MB_FC_READ_REGISTERS :
	      // call get_FC3 to transfer the incoming message to u16regs buffer
	      get_FC3(modH);
 80027f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80027f2:	f000 f874 	bl	80028de <get_FC3>
	      break;
 80027f6:	e000      	b.n	80027fa <StartTaskModbusMaster+0x17e>
	  case MB_FC_WRITE_MULTIPLE_COILS:
	  case MB_FC_WRITE_MULTIPLE_REGISTERS :
	      // nothing to do
	      break;
	  default:
	      break;
 80027f8:	bf00      	nop
	  }
	  modH->i8state = COM_IDLE;
 80027fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fc:	2200      	movs	r2, #0
 80027fe:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7

	  if (modH->i8lastError ==0) // no error the error_OK, we need to use a different value than 0 to detect the timeout
 8002802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002804:	f993 3012 	ldrsb.w	r3, [r3, #18]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d10e      	bne.n	800282a <StartTaskModbusMaster+0x1ae>
	  {
		  xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 800280c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280e:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 8002812:	2300      	movs	r3, #0
 8002814:	2200      	movs	r2, #0
 8002816:	2100      	movs	r1, #0
 8002818:	f010 f928 	bl	8012a6c <xQueueGenericSend>
		  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, ERR_OK_QUERY, eSetValueWithOverwrite);
 800281c:	69b8      	ldr	r0, [r7, #24]
 800281e:	2300      	movs	r3, #0
 8002820:	2203      	movs	r2, #3
 8002822:	f06f 010a 	mvn.w	r1, #10
 8002826:	f011 ff99 	bl	801475c <xTaskGenericNotify>
	  }


	  continue;
 800282a:	bf00      	nop
  {
 800282c:	e72c      	b.n	8002688 <StartTaskModbusMaster+0xc>
 800282e:	bf00      	nop

08002830 <get_FC1>:
 * This method puts the slave answer into master data buffer
 *
 * @ingroup register
 */
void get_FC1(modbusHandler_t *modH)
{
 8002830:	b590      	push	{r4, r7, lr}
 8002832:	b085      	sub	sp, #20
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
    uint8_t u8byte, i;
    u8byte = 3;
 8002838:	2303      	movs	r3, #3
 800283a:	73bb      	strb	r3, [r7, #14]
     for (i=0; i< modH->u8Buffer[2]; i++) {
 800283c:	2300      	movs	r3, #0
 800283e:	73fb      	strb	r3, [r7, #15]
 8002840:	e043      	b.n	80028ca <get_FC1+0x9a>

        if(i%2)
 8002842:	7bfb      	ldrb	r3, [r7, #15]
 8002844:	f003 0301 	and.w	r3, r3, #1
 8002848:	b2db      	uxtb	r3, r3
 800284a:	2b00      	cmp	r3, #0
 800284c:	d01c      	beq.n	8002888 <get_FC1+0x58>
        {
        	modH->u16regs[i/2]= word(modH->u8Buffer[i+u8byte], lowByte(modH->u16regs[i/2]));
 800284e:	7bfa      	ldrb	r2, [r7, #15]
 8002850:	7bbb      	ldrb	r3, [r7, #14]
 8002852:	4413      	add	r3, r2
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	4413      	add	r3, r2
 8002858:	7cd8      	ldrb	r0, [r3, #19]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8002860:	7bfb      	ldrb	r3, [r7, #15]
 8002862:	085b      	lsrs	r3, r3, #1
 8002864:	b2db      	uxtb	r3, r3
 8002866:	005b      	lsls	r3, r3, #1
 8002868:	4413      	add	r3, r2
 800286a:	881b      	ldrh	r3, [r3, #0]
 800286c:	b2d9      	uxtb	r1, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8002874:	7bfb      	ldrb	r3, [r7, #15]
 8002876:	085b      	lsrs	r3, r3, #1
 8002878:	b2db      	uxtb	r3, r3
 800287a:	005b      	lsls	r3, r3, #1
 800287c:	18d4      	adds	r4, r2, r3
 800287e:	f000 fa5f 	bl	8002d40 <word>
 8002882:	4603      	mov	r3, r0
 8002884:	8023      	strh	r3, [r4, #0]
 8002886:	e01d      	b.n	80028c4 <get_FC1+0x94>
        }
        else
        {

        	modH->u16regs[i/2]= word(highByte(modH->u16regs[i/2]), modH->u8Buffer[i+u8byte]);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800288e:	7bfb      	ldrb	r3, [r7, #15]
 8002890:	085b      	lsrs	r3, r3, #1
 8002892:	b2db      	uxtb	r3, r3
 8002894:	005b      	lsls	r3, r3, #1
 8002896:	4413      	add	r3, r2
 8002898:	881b      	ldrh	r3, [r3, #0]
 800289a:	0a1b      	lsrs	r3, r3, #8
 800289c:	b29b      	uxth	r3, r3
 800289e:	b2d8      	uxtb	r0, r3
 80028a0:	7bfa      	ldrb	r2, [r7, #15]
 80028a2:	7bbb      	ldrb	r3, [r7, #14]
 80028a4:	4413      	add	r3, r2
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	4413      	add	r3, r2
 80028aa:	7cd9      	ldrb	r1, [r3, #19]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80028b2:	7bfb      	ldrb	r3, [r7, #15]
 80028b4:	085b      	lsrs	r3, r3, #1
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	18d4      	adds	r4, r2, r3
 80028bc:	f000 fa40 	bl	8002d40 <word>
 80028c0:	4603      	mov	r3, r0
 80028c2:	8023      	strh	r3, [r4, #0]
     for (i=0; i< modH->u8Buffer[2]; i++) {
 80028c4:	7bfb      	ldrb	r3, [r7, #15]
 80028c6:	3301      	adds	r3, #1
 80028c8:	73fb      	strb	r3, [r7, #15]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	7d5b      	ldrb	r3, [r3, #21]
 80028ce:	7bfa      	ldrb	r2, [r7, #15]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d3b6      	bcc.n	8002842 <get_FC1+0x12>
        }

     }
}
 80028d4:	bf00      	nop
 80028d6:	bf00      	nop
 80028d8:	3714      	adds	r7, #20
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd90      	pop	{r4, r7, pc}

080028de <get_FC3>:
 * This method puts the slave answer into master data buffer
 *
 * @ingroup register
 */
void get_FC3(modbusHandler_t *modH)
{
 80028de:	b590      	push	{r4, r7, lr}
 80028e0:	b085      	sub	sp, #20
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
    uint8_t u8byte, i;
    u8byte = 3;
 80028e6:	2303      	movs	r3, #3
 80028e8:	73fb      	strb	r3, [r7, #15]

    for (i=0; i< modH->u8Buffer[ 2 ] /2; i++)
 80028ea:	2300      	movs	r3, #0
 80028ec:	73bb      	strb	r3, [r7, #14]
 80028ee:	e018      	b.n	8002922 <get_FC3+0x44>
    {
    	modH->u16regs[ i ] = word(modH->u8Buffer[ u8byte ], modH->u8Buffer[ u8byte +1 ]);
 80028f0:	7bfb      	ldrb	r3, [r7, #15]
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	4413      	add	r3, r2
 80028f6:	7cd8      	ldrb	r0, [r3, #19]
 80028f8:	7bfb      	ldrb	r3, [r7, #15]
 80028fa:	3301      	adds	r3, #1
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	4413      	add	r3, r2
 8002900:	7cd9      	ldrb	r1, [r3, #19]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8002908:	7bbb      	ldrb	r3, [r7, #14]
 800290a:	005b      	lsls	r3, r3, #1
 800290c:	18d4      	adds	r4, r2, r3
 800290e:	f000 fa17 	bl	8002d40 <word>
 8002912:	4603      	mov	r3, r0
 8002914:	8023      	strh	r3, [r4, #0]
        u8byte += 2;
 8002916:	7bfb      	ldrb	r3, [r7, #15]
 8002918:	3302      	adds	r3, #2
 800291a:	73fb      	strb	r3, [r7, #15]
    for (i=0; i< modH->u8Buffer[ 2 ] /2; i++)
 800291c:	7bbb      	ldrb	r3, [r7, #14]
 800291e:	3301      	adds	r3, #1
 8002920:	73bb      	strb	r3, [r7, #14]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	7d5b      	ldrb	r3, [r3, #21]
 8002926:	085b      	lsrs	r3, r3, #1
 8002928:	b2db      	uxtb	r3, r3
 800292a:	7bba      	ldrb	r2, [r7, #14]
 800292c:	429a      	cmp	r2, r3
 800292e:	d3df      	bcc.n	80028f0 <get_FC3+0x12>
    }
}
 8002930:	bf00      	nop
 8002932:	bf00      	nop
 8002934:	3714      	adds	r7, #20
 8002936:	46bd      	mov	sp, r7
 8002938:	bd90      	pop	{r4, r7, pc}
	...

0800293c <validateAnswer>:
 *
 * @return 0 if OK, EXCEPTION if anything fails
 * @ingroup buffer
 */
uint8_t validateAnswer(modbusHandler_t *modH)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
#if ENABLE_TCP ==1
	if(modH->xTypeHW != TCP_HW)
	{
#endif
	uint16_t u16MsgCRC =
        ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800294a:	3b02      	subs	r3, #2
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	4413      	add	r3, r2
 8002950:	7cdb      	ldrb	r3, [r3, #19]
 8002952:	021b      	lsls	r3, r3, #8
         | modH->u8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 8002954:	b21a      	sxth	r2, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800295c:	3b01      	subs	r3, #1
 800295e:	6879      	ldr	r1, [r7, #4]
 8002960:	440b      	add	r3, r1
 8002962:	7cdb      	ldrb	r3, [r3, #19]
 8002964:	b21b      	sxth	r3, r3
 8002966:	4313      	orrs	r3, r2
 8002968:	b21b      	sxth	r3, r3
	uint16_t u16MsgCRC =
 800296a:	81bb      	strh	r3, [r7, #12]
    if ( calcCRC(modH->u8Buffer,  modH->u8BufferSize-2) != u16MsgCRC )
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f103 0213 	add.w	r2, r3, #19
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002978:	3b02      	subs	r3, #2
 800297a:	b2db      	uxtb	r3, r3
 800297c:	4619      	mov	r1, r3
 800297e:	4610      	mov	r0, r2
 8002980:	f000 f9f1 	bl	8002d66 <calcCRC>
 8002984:	4603      	mov	r3, r0
 8002986:	461a      	mov	r2, r3
 8002988:	89bb      	ldrh	r3, [r7, #12]
 800298a:	4293      	cmp	r3, r2
 800298c:	d009      	beq.n	80029a2 <validateAnswer+0x66>
    {
    	modH->u16errCnt ++;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8002994:	3301      	adds	r3, #1
 8002996:	b29a      	uxth	r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
        return ERR_BAD_CRC;
 800299e:	23fc      	movs	r3, #252	; 0xfc
 80029a0:	e034      	b.n	8002a0c <validateAnswer+0xd0>
	}
#endif


    // check exception
    if ((modH->u8Buffer[ FUNC ] & 0x80) != 0)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	7d1b      	ldrb	r3, [r3, #20]
 80029a6:	b25b      	sxtb	r3, r3
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	da09      	bge.n	80029c0 <validateAnswer+0x84>
    {
    	modH->u16errCnt ++;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 80029b2:	3301      	adds	r3, #1
 80029b4:	b29a      	uxth	r2, r3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
        return ERR_EXCEPTION;
 80029bc:	23fb      	movs	r3, #251	; 0xfb
 80029be:	e025      	b.n	8002a0c <validateAnswer+0xd0>
    }

    // check fct code
    bool isSupported = false;
 80029c0:	2300      	movs	r3, #0
 80029c2:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 80029c4:	2300      	movs	r3, #0
 80029c6:	73bb      	strb	r3, [r7, #14]
 80029c8:	e00c      	b.n	80029e4 <validateAnswer+0xa8>
    {
        if (fctsupported[i] == modH->u8Buffer[FUNC])
 80029ca:	7bbb      	ldrb	r3, [r7, #14]
 80029cc:	4a11      	ldr	r2, [pc, #68]	; (8002a14 <validateAnswer+0xd8>)
 80029ce:	5cd2      	ldrb	r2, [r2, r3]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	7d1b      	ldrb	r3, [r3, #20]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d102      	bne.n	80029de <validateAnswer+0xa2>
        {
            isSupported = 1;
 80029d8:	2301      	movs	r3, #1
 80029da:	73fb      	strb	r3, [r7, #15]
            break;
 80029dc:	e005      	b.n	80029ea <validateAnswer+0xae>
    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 80029de:	7bbb      	ldrb	r3, [r7, #14]
 80029e0:	3301      	adds	r3, #1
 80029e2:	73bb      	strb	r3, [r7, #14]
 80029e4:	7bbb      	ldrb	r3, [r7, #14]
 80029e6:	2b07      	cmp	r3, #7
 80029e8:	d9ef      	bls.n	80029ca <validateAnswer+0x8e>
        }
    }
    if (!isSupported)
 80029ea:	7bfb      	ldrb	r3, [r7, #15]
 80029ec:	f083 0301 	eor.w	r3, r3, #1
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d009      	beq.n	8002a0a <validateAnswer+0xce>
    {
    	modH->u16errCnt ++;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 80029fc:	3301      	adds	r3, #1
 80029fe:	b29a      	uxth	r2, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
        return EXC_FUNC_CODE;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e000      	b.n	8002a0c <validateAnswer+0xd0>
    }

    return 0; // OK, no exception code thrown
 8002a0a:	2300      	movs	r3, #0
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3710      	adds	r7, #16
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	0802e268 	.word	0x0802e268

08002a18 <getRxBuffer>:
 *
 * @return buffer size if OK, ERR_BUFF_OVERFLOW if u8BufferSize >= MAX_BUFFER
 * @ingroup buffer
 */
int16_t getRxBuffer(modbusHandler_t *modH)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]

    int16_t i16result;

    if(modH->xTypeHW == USART_HW)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d104      	bne.n	8002a34 <getRxBuffer+0x1c>
    {
    	HAL_UART_AbortReceive_IT(modH->port); // disable interrupts to avoid race conditions on serial port
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f00d f942 	bl	800fcb8 <HAL_UART_AbortReceive_IT>
    }

	if (modH->xBufferRX.overflow)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d008      	beq.n	8002a50 <getRxBuffer+0x38>
    {
       	RingClear(&modH->xBufferRX); // clean up the overflowed buffer
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	33bc      	adds	r3, #188	; 0xbc
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7ff f9ef 	bl	8001e26 <RingClear>
       	i16result =  ERR_BUFF_OVERFLOW;
 8002a48:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 8002a4c:	81fb      	strh	r3, [r7, #14]
 8002a4e:	e019      	b.n	8002a84 <getRxBuffer+0x6c>
    }
	else
	{
		modH->u8BufferSize = RingGetAllBytes(&modH->xBufferRX, modH->u8Buffer);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f103 02bc 	add.w	r2, r3, #188	; 0xbc
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	3313      	adds	r3, #19
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	4610      	mov	r0, r2
 8002a5e:	f7ff f97c 	bl	8001d5a <RingGetAllBytes>
 8002a62:	4603      	mov	r3, r0
 8002a64:	461a      	mov	r2, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
		modH->u16InCnt++;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8002a72:	3301      	adds	r3, #1
 8002a74:	b29a      	uxth	r2, r3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
		i16result = modH->u8BufferSize;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002a82:	81fb      	strh	r3, [r7, #14]
	}

	if(modH->xTypeHW == USART_HW)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d107      	bne.n	8002a9e <getRxBuffer+0x86>
	{
		HAL_UART_Receive_IT(modH->port, &modH->dataRX, 1);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6858      	ldr	r0, [r3, #4]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	33a6      	adds	r3, #166	; 0xa6
 8002a96:	2201      	movs	r2, #1
 8002a98:	4619      	mov	r1, r3
 8002a9a:	f00c ff7b 	bl	800f994 <HAL_UART_Receive_IT>
	}

    return i16result;
 8002a9e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3710      	adds	r7, #16
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
	...

08002aac <validateRequest>:
 *
 * @return 0 if OK, EXCEPTION if anything fails
 * @ingroup modH Modbus handler
 */
uint8_t validateRequest(modbusHandler_t *modH)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
	    		return ERR_BAD_CRC;
	    		}
	    }
#else
	    uint16_t u16MsgCRC;
	    u16MsgCRC= ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002aba:	3b02      	subs	r3, #2
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	4413      	add	r3, r2
 8002ac0:	7cdb      	ldrb	r3, [r3, #19]
 8002ac2:	021b      	lsls	r3, r3, #8
	    		   	         | modH->u8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 8002ac4:	b21a      	sxth	r2, r3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002acc:	3b01      	subs	r3, #1
 8002ace:	6879      	ldr	r1, [r7, #4]
 8002ad0:	440b      	add	r3, r1
 8002ad2:	7cdb      	ldrb	r3, [r3, #19]
 8002ad4:	b21b      	sxth	r3, r3
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	b21b      	sxth	r3, r3
	    u16MsgCRC= ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 8002ada:	813b      	strh	r3, [r7, #8]


	    if ( calcCRC( modH->u8Buffer,  modH->u8BufferSize-2 ) != u16MsgCRC )
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f103 0213 	add.w	r2, r3, #19
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002ae8:	3b02      	subs	r3, #2
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	4619      	mov	r1, r3
 8002aee:	4610      	mov	r0, r2
 8002af0:	f000 f939 	bl	8002d66 <calcCRC>
 8002af4:	4603      	mov	r3, r0
 8002af6:	461a      	mov	r2, r3
 8002af8:	893b      	ldrh	r3, [r7, #8]
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d009      	beq.n	8002b12 <validateRequest+0x66>
	    {
	       		modH->u16errCnt ++;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8002b04:	3301      	adds	r3, #1
 8002b06:	b29a      	uxth	r2, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
	       		return ERR_BAD_CRC;
 8002b0e:	23fc      	movs	r3, #252	; 0xfc
 8002b10:	e10f      	b.n	8002d32 <validateRequest+0x286>


#endif

	    // check fct code
	    bool isSupported = false;
 8002b12:	2300      	movs	r3, #0
 8002b14:	73fb      	strb	r3, [r7, #15]
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 8002b16:	2300      	movs	r3, #0
 8002b18:	73bb      	strb	r3, [r7, #14]
 8002b1a:	e00c      	b.n	8002b36 <validateRequest+0x8a>
	    {
	        if (fctsupported[i] == modH->u8Buffer[FUNC])
 8002b1c:	7bbb      	ldrb	r3, [r7, #14]
 8002b1e:	4a87      	ldr	r2, [pc, #540]	; (8002d3c <validateRequest+0x290>)
 8002b20:	5cd2      	ldrb	r2, [r2, r3]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	7d1b      	ldrb	r3, [r3, #20]
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d102      	bne.n	8002b30 <validateRequest+0x84>
	        {
	            isSupported = 1;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	73fb      	strb	r3, [r7, #15]
	            break;
 8002b2e:	e005      	b.n	8002b3c <validateRequest+0x90>
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 8002b30:	7bbb      	ldrb	r3, [r7, #14]
 8002b32:	3301      	adds	r3, #1
 8002b34:	73bb      	strb	r3, [r7, #14]
 8002b36:	7bbb      	ldrb	r3, [r7, #14]
 8002b38:	2b07      	cmp	r3, #7
 8002b3a:	d9ef      	bls.n	8002b1c <validateRequest+0x70>
	        }
	    }
	    if (!isSupported)
 8002b3c:	7bfb      	ldrb	r3, [r7, #15]
 8002b3e:	f083 0301 	eor.w	r3, r3, #1
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d009      	beq.n	8002b5c <validateRequest+0xb0>
	    {
	    	modH->u16errCnt ++;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8002b4e:	3301      	adds	r3, #1
 8002b50:	b29a      	uxth	r2, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
	        return EXC_FUNC_CODE;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e0ea      	b.n	8002d32 <validateRequest+0x286>
	    }

	    // check start address & nb range
	    uint16_t u16AdRegs = 0;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	81bb      	strh	r3, [r7, #12]
	    uint16_t u16NRegs = 0;
 8002b60:	2300      	movs	r3, #0
 8002b62:	817b      	strh	r3, [r7, #10]

	    //uint8_t u8regs;
	    switch ( modH->u8Buffer[ FUNC ] )
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	7d1b      	ldrb	r3, [r3, #20]
 8002b68:	3b01      	subs	r3, #1
 8002b6a:	2b0f      	cmp	r3, #15
 8002b6c:	f200 80e0 	bhi.w	8002d30 <validateRequest+0x284>
 8002b70:	a201      	add	r2, pc, #4	; (adr r2, 8002b78 <validateRequest+0xcc>)
 8002b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b76:	bf00      	nop
 8002b78:	08002bb9 	.word	0x08002bb9
 8002b7c:	08002bb9 	.word	0x08002bb9
 8002b80:	08002cd1 	.word	0x08002cd1
 8002b84:	08002cd1 	.word	0x08002cd1
 8002b88:	08002c65 	.word	0x08002c65
 8002b8c:	08002cad 	.word	0x08002cad
 8002b90:	08002d31 	.word	0x08002d31
 8002b94:	08002d31 	.word	0x08002d31
 8002b98:	08002d31 	.word	0x08002d31
 8002b9c:	08002d31 	.word	0x08002d31
 8002ba0:	08002d31 	.word	0x08002d31
 8002ba4:	08002d31 	.word	0x08002d31
 8002ba8:	08002d31 	.word	0x08002d31
 8002bac:	08002d31 	.word	0x08002d31
 8002bb0:	08002bb9 	.word	0x08002bb9
 8002bb4:	08002cd1 	.word	0x08002cd1
	    {
	    case MB_FC_READ_COILS:
	    case MB_FC_READ_DISCRETE_INPUT:
	    case MB_FC_WRITE_MULTIPLE_COILS:
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) / 16;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	7d5a      	ldrb	r2, [r3, #21]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	7d9b      	ldrb	r3, [r3, #22]
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	4610      	mov	r0, r2
 8002bc4:	f000 f8bc 	bl	8002d40 <word>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	091b      	lsrs	r3, r3, #4
 8002bcc:	81bb      	strh	r3, [r7, #12]
	    	u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) /16;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	7dda      	ldrb	r2, [r3, #23]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	7e1b      	ldrb	r3, [r3, #24]
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	4610      	mov	r0, r2
 8002bda:	f000 f8b1 	bl	8002d40 <word>
 8002bde:	4603      	mov	r3, r0
 8002be0:	091b      	lsrs	r3, r3, #4
 8002be2:	817b      	strh	r3, [r7, #10]
	    	if(word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) % 16) u16NRegs++; // check for incomplete words
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	7dda      	ldrb	r2, [r3, #23]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	7e1b      	ldrb	r3, [r3, #24]
 8002bec:	4619      	mov	r1, r3
 8002bee:	4610      	mov	r0, r2
 8002bf0:	f000 f8a6 	bl	8002d40 <word>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	f003 030f 	and.w	r3, r3, #15
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d002      	beq.n	8002c06 <validateRequest+0x15a>
 8002c00:	897b      	ldrh	r3, [r7, #10]
 8002c02:	3301      	adds	r3, #1
 8002c04:	817b      	strh	r3, [r7, #10]
	    	// verify address range
	    	if((u16AdRegs + u16NRegs) > modH->u16regsize) return EXC_ADDR_RANGE;
 8002c06:	89ba      	ldrh	r2, [r7, #12]
 8002c08:	897b      	ldrh	r3, [r7, #10]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	f8b2 20a4 	ldrh.w	r2, [r2, #164]	; 0xa4
 8002c12:	4293      	cmp	r3, r2
 8002c14:	dd01      	ble.n	8002c1a <validateRequest+0x16e>
 8002c16:	2302      	movs	r3, #2
 8002c18:	e08b      	b.n	8002d32 <validateRequest+0x286>

	    	//verify answer frame size in bytes

	    	u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) / 8;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	7dda      	ldrb	r2, [r3, #23]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	7e1b      	ldrb	r3, [r3, #24]
 8002c22:	4619      	mov	r1, r3
 8002c24:	4610      	mov	r0, r2
 8002c26:	f000 f88b 	bl	8002d40 <word>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	08db      	lsrs	r3, r3, #3
 8002c2e:	817b      	strh	r3, [r7, #10]
	    	if(word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) % 8) u16NRegs++;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	7dda      	ldrb	r2, [r3, #23]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	7e1b      	ldrb	r3, [r3, #24]
 8002c38:	4619      	mov	r1, r3
 8002c3a:	4610      	mov	r0, r2
 8002c3c:	f000 f880 	bl	8002d40 <word>
 8002c40:	4603      	mov	r3, r0
 8002c42:	f003 0307 	and.w	r3, r3, #7
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d002      	beq.n	8002c52 <validateRequest+0x1a6>
 8002c4c:	897b      	ldrh	r3, [r7, #10]
 8002c4e:	3301      	adds	r3, #1
 8002c50:	817b      	strh	r3, [r7, #10]
	    	u16NRegs = u16NRegs + 5; // adding the header  and CRC ( Slave address + Function code  + number of data bytes to follow + 2-byte CRC )
 8002c52:	897b      	ldrh	r3, [r7, #10]
 8002c54:	3305      	adds	r3, #5
 8002c56:	817b      	strh	r3, [r7, #10]
	        if(u16NRegs > 256) return EXC_REGS_QUANT;
 8002c58:	897b      	ldrh	r3, [r7, #10]
 8002c5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c5e:	d960      	bls.n	8002d22 <validateRequest+0x276>
 8002c60:	2303      	movs	r3, #3
 8002c62:	e066      	b.n	8002d32 <validateRequest+0x286>

	        break;
	    case MB_FC_WRITE_COIL:
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) / 16;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	7d5a      	ldrb	r2, [r3, #21]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	7d9b      	ldrb	r3, [r3, #22]
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	4610      	mov	r0, r2
 8002c70:	f000 f866 	bl	8002d40 <word>
 8002c74:	4603      	mov	r3, r0
 8002c76:	091b      	lsrs	r3, r3, #4
 8002c78:	81bb      	strh	r3, [r7, #12]
	    	if(word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) % 16) u16AdRegs++;	// check for incomplete words
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	7d5a      	ldrb	r2, [r3, #21]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	7d9b      	ldrb	r3, [r3, #22]
 8002c82:	4619      	mov	r1, r3
 8002c84:	4610      	mov	r0, r2
 8002c86:	f000 f85b 	bl	8002d40 <word>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	f003 030f 	and.w	r3, r3, #15
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d002      	beq.n	8002c9c <validateRequest+0x1f0>
 8002c96:	89bb      	ldrh	r3, [r7, #12]
 8002c98:	3301      	adds	r3, #1
 8002c9a:	81bb      	strh	r3, [r7, #12]
	        if (u16AdRegs > modH->u16regsize) return EXC_ADDR_RANGE;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 8002ca2:	89ba      	ldrh	r2, [r7, #12]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d93e      	bls.n	8002d26 <validateRequest+0x27a>
 8002ca8:	2302      	movs	r3, #2
 8002caa:	e042      	b.n	8002d32 <validateRequest+0x286>
	        break;
	    case MB_FC_WRITE_REGISTER :
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	7d5a      	ldrb	r2, [r3, #21]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	7d9b      	ldrb	r3, [r3, #22]
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	4610      	mov	r0, r2
 8002cb8:	f000 f842 	bl	8002d40 <word>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	81bb      	strh	r3, [r7, #12]
	        if (u16AdRegs > modH-> u16regsize) return EXC_ADDR_RANGE;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 8002cc6:	89ba      	ldrh	r2, [r7, #12]
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d92e      	bls.n	8002d2a <validateRequest+0x27e>
 8002ccc:	2302      	movs	r3, #2
 8002cce:	e030      	b.n	8002d32 <validateRequest+0x286>
	        break;
	    case MB_FC_READ_REGISTERS :
	    case MB_FC_READ_INPUT_REGISTER :
	    case MB_FC_WRITE_MULTIPLE_REGISTERS :
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	7d5a      	ldrb	r2, [r3, #21]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	7d9b      	ldrb	r3, [r3, #22]
 8002cd8:	4619      	mov	r1, r3
 8002cda:	4610      	mov	r0, r2
 8002cdc:	f000 f830 	bl	8002d40 <word>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	81bb      	strh	r3, [r7, #12]
	        u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	7dda      	ldrb	r2, [r3, #23]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	7e1b      	ldrb	r3, [r3, #24]
 8002cec:	4619      	mov	r1, r3
 8002cee:	4610      	mov	r0, r2
 8002cf0:	f000 f826 	bl	8002d40 <word>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	817b      	strh	r3, [r7, #10]
	        if (( u16AdRegs + u16NRegs ) > modH->u16regsize) return EXC_ADDR_RANGE;
 8002cf8:	89ba      	ldrh	r2, [r7, #12]
 8002cfa:	897b      	ldrh	r3, [r7, #10]
 8002cfc:	4413      	add	r3, r2
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	f8b2 20a4 	ldrh.w	r2, [r2, #164]	; 0xa4
 8002d04:	4293      	cmp	r3, r2
 8002d06:	dd01      	ble.n	8002d0c <validateRequest+0x260>
 8002d08:	2302      	movs	r3, #2
 8002d0a:	e012      	b.n	8002d32 <validateRequest+0x286>

	        //verify answer frame size in bytes
	        u16NRegs = u16NRegs*2 + 5; // adding the header  and CRC
 8002d0c:	897b      	ldrh	r3, [r7, #10]
 8002d0e:	005b      	lsls	r3, r3, #1
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	3305      	adds	r3, #5
 8002d14:	817b      	strh	r3, [r7, #10]
	        if ( u16NRegs > 256 ) return EXC_REGS_QUANT;
 8002d16:	897b      	ldrh	r3, [r7, #10]
 8002d18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d1c:	d907      	bls.n	8002d2e <validateRequest+0x282>
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e007      	b.n	8002d32 <validateRequest+0x286>
	        break;
 8002d22:	bf00      	nop
 8002d24:	e004      	b.n	8002d30 <validateRequest+0x284>
	        break;
 8002d26:	bf00      	nop
 8002d28:	e002      	b.n	8002d30 <validateRequest+0x284>
	        break;
 8002d2a:	bf00      	nop
 8002d2c:	e000      	b.n	8002d30 <validateRequest+0x284>
	        break;
 8002d2e:	bf00      	nop
	    }
	    return 0; // OK, no exception code thrown
 8002d30:	2300      	movs	r3, #0

}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3710      	adds	r7, #16
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	0802e268 	.word	0x0802e268

08002d40 <word>:
 * @return uint16_t (word)
 * @ingroup H  Most significant byte
 * @ingroup L  Less significant byte
 */
uint16_t word(uint8_t H, uint8_t L)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b085      	sub	sp, #20
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	4603      	mov	r3, r0
 8002d48:	460a      	mov	r2, r1
 8002d4a:	71fb      	strb	r3, [r7, #7]
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	71bb      	strb	r3, [r7, #6]
	bytesFields W;
	W.u8[0] = L;
 8002d50:	79bb      	ldrb	r3, [r7, #6]
 8002d52:	733b      	strb	r3, [r7, #12]
	W.u8[1] = H;
 8002d54:	79fb      	ldrb	r3, [r7, #7]
 8002d56:	737b      	strb	r3, [r7, #13]

	return W.u16[0];
 8002d58:	89bb      	ldrh	r3, [r7, #12]
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3714      	adds	r7, #20
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr

08002d66 <calcCRC>:
 * @return uint16_t calculated CRC value for the message
 * @ingroup Buffer
 * @ingroup u8length
 */
uint16_t calcCRC(uint8_t *Buffer, uint8_t u8length)
{
 8002d66:	b480      	push	{r7}
 8002d68:	b087      	sub	sp, #28
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
 8002d6e:	460b      	mov	r3, r1
 8002d70:	70fb      	strb	r3, [r7, #3]
    unsigned int temp, temp2, flag;
    temp = 0xFFFF;
 8002d72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d76:	617b      	str	r3, [r7, #20]
    for (unsigned char i = 0; i < u8length; i++)
 8002d78:	2300      	movs	r3, #0
 8002d7a:	74fb      	strb	r3, [r7, #19]
 8002d7c:	e023      	b.n	8002dc6 <calcCRC+0x60>
    {
        temp = temp ^ Buffer[i];
 8002d7e:	7cfb      	ldrb	r3, [r7, #19]
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	4413      	add	r3, r2
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	461a      	mov	r2, r3
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	4053      	eors	r3, r2
 8002d8c:	617b      	str	r3, [r7, #20]
        for (unsigned char j = 1; j <= 8; j++)
 8002d8e:	2301      	movs	r3, #1
 8002d90:	74bb      	strb	r3, [r7, #18]
 8002d92:	e012      	b.n	8002dba <calcCRC+0x54>
        {
            flag = temp & 0x0001;
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	f003 0301 	and.w	r3, r3, #1
 8002d9a:	60bb      	str	r3, [r7, #8]
            temp >>=1;
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	085b      	lsrs	r3, r3, #1
 8002da0:	617b      	str	r3, [r7, #20]
            if (flag)
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d005      	beq.n	8002db4 <calcCRC+0x4e>
                temp ^= 0xA001;
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	f483 4320 	eor.w	r3, r3, #40960	; 0xa000
 8002dae:	f083 0301 	eor.w	r3, r3, #1
 8002db2:	617b      	str	r3, [r7, #20]
        for (unsigned char j = 1; j <= 8; j++)
 8002db4:	7cbb      	ldrb	r3, [r7, #18]
 8002db6:	3301      	adds	r3, #1
 8002db8:	74bb      	strb	r3, [r7, #18]
 8002dba:	7cbb      	ldrb	r3, [r7, #18]
 8002dbc:	2b08      	cmp	r3, #8
 8002dbe:	d9e9      	bls.n	8002d94 <calcCRC+0x2e>
    for (unsigned char i = 0; i < u8length; i++)
 8002dc0:	7cfb      	ldrb	r3, [r7, #19]
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	74fb      	strb	r3, [r7, #19]
 8002dc6:	7cfa      	ldrb	r2, [r7, #19]
 8002dc8:	78fb      	ldrb	r3, [r7, #3]
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d3d7      	bcc.n	8002d7e <calcCRC+0x18>
        }
    }
    // Reverse byte order.
    temp2 = temp >> 8;
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	0a1b      	lsrs	r3, r3, #8
 8002dd2:	60fb      	str	r3, [r7, #12]
    temp = (temp << 8) | temp2;
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	021b      	lsls	r3, r3, #8
 8002dd8:	68fa      	ldr	r2, [r7, #12]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	617b      	str	r3, [r7, #20]
    temp &= 0xFFFF;
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	617b      	str	r3, [r7, #20]
    // the returned value is already swapped
    // crcLo byte is first & crcHi byte is last
    return temp;
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	b29b      	uxth	r3, r3

}
 8002de8:	4618      	mov	r0, r3
 8002dea:	371c      	adds	r7, #28
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <buildException>:
 *
 * @ingroup u8exception exception number
 * @ingroup modH modbus handler
 */
void buildException( uint8_t u8exception, modbusHandler_t *modH )
{
 8002df4:	b480      	push	{r7}
 8002df6:	b085      	sub	sp, #20
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	6039      	str	r1, [r7, #0]
 8002dfe:	71fb      	strb	r3, [r7, #7]
    uint8_t u8func = modH->u8Buffer[ FUNC ];  // get the original FUNC code
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	7d1b      	ldrb	r3, [r3, #20]
 8002e04:	73fb      	strb	r3, [r7, #15]

    modH->u8Buffer[ ID ]      = modH->u8id;
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	7a1a      	ldrb	r2, [r3, #8]
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	74da      	strb	r2, [r3, #19]
    modH->u8Buffer[ FUNC ]    = u8func + 0x80;
 8002e0e:	7bfb      	ldrb	r3, [r7, #15]
 8002e10:	3b80      	subs	r3, #128	; 0x80
 8002e12:	b2da      	uxtb	r2, r3
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	751a      	strb	r2, [r3, #20]
    modH->u8Buffer[ 2 ]       = u8exception;
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	79fa      	ldrb	r2, [r7, #7]
 8002e1c:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = EXCEPTION_SIZE;
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	2203      	movs	r2, #3
 8002e22:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
}
 8002e26:	bf00      	nop
 8002e28:	3714      	adds	r7, #20
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr

08002e32 <sendTxBuffer>:
 *
 * @return nothing
 * @ingroup modH Modbus handler
 */
static void sendTxBuffer(modbusHandler_t *modH)
{
 8002e32:	b590      	push	{r4, r7, lr}
 8002e34:	b087      	sub	sp, #28
 8002e36:	af02      	add	r7, sp, #8
 8002e38:	6078      	str	r0, [r7, #4]
#if  ENABLE_TCP == 1
if(modH->xTypeHW != TCP_HW)
	 {
#endif

	uint16_t u16crc = calcCRC(modH->u8Buffer, modH->u8BufferSize);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f103 0213 	add.w	r2, r3, #19
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002e46:	4619      	mov	r1, r3
 8002e48:	4610      	mov	r0, r2
 8002e4a:	f7ff ff8c 	bl	8002d66 <calcCRC>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	81fb      	strh	r3, [r7, #14]
    modH->u8Buffer[ modH->u8BufferSize ] = u16crc >> 8;
 8002e52:	89fb      	ldrh	r3, [r7, #14]
 8002e54:	0a1b      	lsrs	r3, r3, #8
 8002e56:	b29a      	uxth	r2, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002e5e:	4619      	mov	r1, r3
 8002e60:	b2d2      	uxtb	r2, r2
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	440b      	add	r3, r1
 8002e66:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002e6e:	3301      	adds	r3, #1
 8002e70:	b2da      	uxtb	r2, r3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    modH->u8Buffer[ modH->u8BufferSize ] = u16crc & 0x00ff;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002e7e:	4619      	mov	r1, r3
 8002e80:	89fb      	ldrh	r3, [r7, #14]
 8002e82:	b2da      	uxtb	r2, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	440b      	add	r3, r1
 8002e88:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002e90:	3301      	adds	r3, #1
 8002e92:	b2da      	uxtb	r2, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
#if ENABLE_USB_CDC == 1 || ENABLE_TCP == 1
    if(modH->xTypeHW == USART_HW || modH->xTypeHW == USART_HW_DMA )
    {
#endif

    	if (modH->EN_Port != NULL)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d00c      	beq.n	8002ebc <sendTxBuffer+0x8a>
        {
    		//enable transmitter, disable receiver to avoid echo on RS485 transceivers
    		HAL_HalfDuplex_EnableTransmitter(modH->port);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f00d fa64 	bl	8010374 <HAL_HalfDuplex_EnableTransmitter>
    		HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_SET);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	68d8      	ldr	r0, [r3, #12]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	8a1b      	ldrh	r3, [r3, #16]
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	f00a fa46 	bl	800d348 <HAL_GPIO_WritePin>
//    		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
        }

#if ENABLE_USART_DMA ==1
    	if(modH->xTypeHW == USART_HW)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d10c      	bne.n	8002ee0 <sendTxBuffer+0xae>
    	{
#endif
    		// transfer buffer to serial line IT
    		HAL_UART_Transmit_IT(modH->port, modH->u8Buffer,  modH->u8BufferSize);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6858      	ldr	r0, [r3, #4]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f103 0113 	add.w	r1, r3, #19
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	461a      	mov	r2, r3
 8002eda:	f00c fd16 	bl	800f90a <HAL_UART_Transmit_IT>
 8002ede:	e00b      	b.n	8002ef8 <sendTxBuffer+0xc6>
#if ENABLE_USART_DMA ==1
    	}
        else
        {
        	//transfer buffer to serial line DMA
        	HAL_UART_Transmit_DMA(modH->port, modH->u8Buffer, modH->u8BufferSize);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6858      	ldr	r0, [r3, #4]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f103 0113 	add.w	r1, r3, #19
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	f00c fd7e 	bl	800f9f4 <HAL_UART_Transmit_DMA>

        }
#endif
        ulTaskNotifyTake(pdTRUE, 250); //wait notification from TXE interrupt
 8002ef8:	21fa      	movs	r1, #250	; 0xfa
 8002efa:	2001      	movs	r0, #1
 8002efc:	f011 fbe6 	bl	80146cc <ulTaskNotifyTake>
*/
#if defined(STM32H7)  || defined(STM32F3) || defined(STM32L4)  
          while((modH->port->Instance->ISR & USART_ISR_TC) ==0 )
#else
          // F429, F103, L152 ...
	  while((modH->port->Instance->SR & USART_SR_TC) ==0 )
 8002f00:	bf00      	nop
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d0f7      	beq.n	8002f02 <sendTxBuffer+0xd0>
         {
 	        //block the task until the the last byte is send out of the shifting buffer in USART
         }


         if (modH->EN_Port != NULL)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d00c      	beq.n	8002f34 <sendTxBuffer+0x102>
         {

             //return RS485 transceiver to receive mode
        	 HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	68d8      	ldr	r0, [r3, #12]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	8a1b      	ldrh	r3, [r3, #16]
 8002f22:	2200      	movs	r2, #0
 8002f24:	4619      	mov	r1, r3
 8002f26:	f00a fa0f 	bl	800d348 <HAL_GPIO_WritePin>
//        	 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
        	 //enable receiver, disable transmitter
        	 HAL_HalfDuplex_EnableReceiver(modH->port);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f00d fa54 	bl	80103dc <HAL_HalfDuplex_EnableReceiver>

         }

         // set timeout for master query
         if(modH->uModbusType == MB_MASTER )
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	781b      	ldrb	r3, [r3, #0]
 8002f38:	2b04      	cmp	r3, #4
 8002f3a:	d10c      	bne.n	8002f56 <sendTxBuffer+0x124>
         {
        	 xTimerReset(modH->xTimerTimeout,0);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 8002f42:	f010 fee1 	bl	8013d08 <xTaskGetTickCount>
 8002f46:	4602      	mov	r2, r0
 8002f48:	2300      	movs	r3, #0
 8002f4a:	9300      	str	r3, [sp, #0]
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	2102      	movs	r1, #2
 8002f50:	4620      	mov	r0, r4
 8002f52:	f011 fe8f 	bl	8014c74 <xTimerGenericCommand>

#endif

#endif

     modH->u8BufferSize = 0;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
     // increase message counter
     modH->u16OutCnt++;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 8002f64:	3301      	adds	r3, #1
 8002f66:	b29a      	uxth	r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e


}
 8002f6e:	bf00      	nop
 8002f70:	3714      	adds	r7, #20
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd90      	pop	{r4, r7, pc}

08002f76 <process_FC1>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC1(modbusHandler_t *modH )
{
 8002f76:	b580      	push	{r7, lr}
 8002f78:	b086      	sub	sp, #24
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	6078      	str	r0, [r7, #4]
    uint8_t u8currentBit, u8bytesno, u8bitsno;
    uint8_t u8CopyBufferSize;
    uint16_t u16currentCoil, u16coil;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	7d5a      	ldrb	r2, [r3, #21]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	7d9b      	ldrb	r3, [r3, #22]
 8002f86:	4619      	mov	r1, r3
 8002f88:	4610      	mov	r0, r2
 8002f8a:	f7ff fed9 	bl	8002d40 <word>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	827b      	strh	r3, [r7, #18]
    uint16_t u16Coilno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	7dda      	ldrb	r2, [r3, #23]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	7e1b      	ldrb	r3, [r3, #24]
 8002f9a:	4619      	mov	r1, r3
 8002f9c:	4610      	mov	r0, r2
 8002f9e:	f7ff fecf 	bl	8002d40 <word>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	823b      	strh	r3, [r7, #16]

    // put the number of bytes in the outcoming message
    u8bytesno = (uint8_t) (u16Coilno / 8);
 8002fa6:	8a3b      	ldrh	r3, [r7, #16]
 8002fa8:	08db      	lsrs	r3, r3, #3
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	75fb      	strb	r3, [r7, #23]
    if (u16Coilno % 8 != 0) u8bytesno ++;
 8002fae:	8a3b      	ldrh	r3, [r7, #16]
 8002fb0:	f003 0307 	and.w	r3, r3, #7
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d002      	beq.n	8002fc0 <process_FC1+0x4a>
 8002fba:	7dfb      	ldrb	r3, [r7, #23]
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	75fb      	strb	r3, [r7, #23]
    modH->u8Buffer[ ADD_HI ]  = u8bytesno;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	7dfa      	ldrb	r2, [r7, #23]
 8002fc4:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = ADD_LO;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2203      	movs	r2, #3
 8002fca:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    modH->u8Buffer[modH->u8BufferSize + u8bytesno - 1 ] = 0;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	7dfb      	ldrb	r3, [r7, #23]
 8002fd8:	4413      	add	r3, r2
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	4413      	add	r3, r2
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	74da      	strb	r2, [r3, #19]

    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	75bb      	strb	r3, [r7, #22]

    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8002fe8:	2300      	movs	r3, #0
 8002fea:	82bb      	strh	r3, [r7, #20]
 8002fec:	e058      	b.n	80030a0 <process_FC1+0x12a>
    {
        u16coil = u16StartCoil + u16currentCoil;
 8002fee:	8a7a      	ldrh	r2, [r7, #18]
 8002ff0:	8abb      	ldrh	r3, [r7, #20]
 8002ff2:	4413      	add	r3, r2
 8002ff4:	81bb      	strh	r3, [r7, #12]
        u16currentRegister =  (u16coil / 16);
 8002ff6:	89bb      	ldrh	r3, [r7, #12]
 8002ff8:	091b      	lsrs	r3, r3, #4
 8002ffa:	817b      	strh	r3, [r7, #10]
        u8currentBit = (uint8_t) (u16coil % 16);
 8002ffc:	89bb      	ldrh	r3, [r7, #12]
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	f003 030f 	and.w	r3, r3, #15
 8003004:	727b      	strb	r3, [r7, #9]

        bitWrite(
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800300c:	897b      	ldrh	r3, [r7, #10]
 800300e:	005b      	lsls	r3, r3, #1
 8003010:	4413      	add	r3, r2
 8003012:	881b      	ldrh	r3, [r3, #0]
 8003014:	461a      	mov	r2, r3
 8003016:	7a7b      	ldrb	r3, [r7, #9]
 8003018:	fa42 f303 	asr.w	r3, r2, r3
 800301c:	f003 0301 	and.w	r3, r3, #1
 8003020:	2b00      	cmp	r3, #0
 8003022:	d014      	beq.n	800304e <process_FC1+0xd8>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800302a:	461a      	mov	r2, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	4413      	add	r3, r2
 8003030:	7cda      	ldrb	r2, [r3, #19]
 8003032:	7dbb      	ldrb	r3, [r7, #22]
 8003034:	2101      	movs	r1, #1
 8003036:	fa01 f303 	lsl.w	r3, r1, r3
 800303a:	b2db      	uxtb	r3, r3
 800303c:	6879      	ldr	r1, [r7, #4]
 800303e:	f891 1093 	ldrb.w	r1, [r1, #147]	; 0x93
 8003042:	4313      	orrs	r3, r2
 8003044:	b2da      	uxtb	r2, r3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	440b      	add	r3, r1
 800304a:	74da      	strb	r2, [r3, #19]
 800304c:	e015      	b.n	800307a <process_FC1+0x104>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8003054:	461a      	mov	r2, r3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4413      	add	r3, r2
 800305a:	7cda      	ldrb	r2, [r3, #19]
 800305c:	7dbb      	ldrb	r3, [r7, #22]
 800305e:	2101      	movs	r1, #1
 8003060:	fa01 f303 	lsl.w	r3, r1, r3
 8003064:	b2db      	uxtb	r3, r3
 8003066:	43db      	mvns	r3, r3
 8003068:	b2db      	uxtb	r3, r3
 800306a:	6879      	ldr	r1, [r7, #4]
 800306c:	f891 1093 	ldrb.w	r1, [r1, #147]	; 0x93
 8003070:	4013      	ands	r3, r2
 8003072:	b2da      	uxtb	r2, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	440b      	add	r3, r1
 8003078:	74da      	strb	r2, [r3, #19]
        	modH->u8Buffer[ modH->u8BufferSize ],
            u8bitsno,
		    bitRead( modH->u16regs[ u16currentRegister ], u8currentBit ) );
        u8bitsno ++;
 800307a:	7dbb      	ldrb	r3, [r7, #22]
 800307c:	3301      	adds	r3, #1
 800307e:	75bb      	strb	r3, [r7, #22]

        if (u8bitsno > 7)
 8003080:	7dbb      	ldrb	r3, [r7, #22]
 8003082:	2b07      	cmp	r3, #7
 8003084:	d909      	bls.n	800309a <process_FC1+0x124>
        {
            u8bitsno = 0;
 8003086:	2300      	movs	r3, #0
 8003088:	75bb      	strb	r3, [r7, #22]
            modH->u8BufferSize++;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8003090:	3301      	adds	r3, #1
 8003092:	b2da      	uxtb	r2, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 800309a:	8abb      	ldrh	r3, [r7, #20]
 800309c:	3301      	adds	r3, #1
 800309e:	82bb      	strh	r3, [r7, #20]
 80030a0:	8aba      	ldrh	r2, [r7, #20]
 80030a2:	8a3b      	ldrh	r3, [r7, #16]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d3a2      	bcc.n	8002fee <process_FC1+0x78>
        }
    }

    // send outcoming message
    if (u16Coilno % 8 != 0) modH->u8BufferSize ++;
 80030a8:	8a3b      	ldrh	r3, [r7, #16]
 80030aa:	f003 0307 	and.w	r3, r3, #7
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d007      	beq.n	80030c4 <process_FC1+0x14e>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80030ba:	3301      	adds	r3, #1
 80030bc:	b2da      	uxtb	r2, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    u8CopyBufferSize = modH->u8BufferSize +2;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80030ca:	3302      	adds	r3, #2
 80030cc:	73fb      	strb	r3, [r7, #15]
    sendTxBuffer(modH);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f7ff feaf 	bl	8002e32 <sendTxBuffer>
    return u8CopyBufferSize;
 80030d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3718      	adds	r7, #24
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}

080030e0 <process_FC3>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC3(modbusHandler_t *modH)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]

    uint16_t u16StartAdd = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	7d5a      	ldrb	r2, [r3, #21]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	7d9b      	ldrb	r3, [r3, #22]
 80030f0:	4619      	mov	r1, r3
 80030f2:	4610      	mov	r0, r2
 80030f4:	f7ff fe24 	bl	8002d40 <word>
 80030f8:	4603      	mov	r3, r0
 80030fa:	81bb      	strh	r3, [r7, #12]
    uint8_t u8regsno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	7dda      	ldrb	r2, [r3, #23]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	7e1b      	ldrb	r3, [r3, #24]
 8003104:	4619      	mov	r1, r3
 8003106:	4610      	mov	r0, r2
 8003108:	f7ff fe1a 	bl	8002d40 <word>
 800310c:	4603      	mov	r3, r0
 800310e:	72fb      	strb	r3, [r7, #11]
    uint8_t u8CopyBufferSize;
    uint16_t i;

    modH->u8Buffer[ 2 ]       = u8regsno * 2;
 8003110:	7afb      	ldrb	r3, [r7, #11]
 8003112:	005b      	lsls	r3, r3, #1
 8003114:	b2da      	uxtb	r2, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = 3;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2203      	movs	r2, #3
 800311e:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

    for (i = u16StartAdd; i < u16StartAdd + u8regsno; i++)
 8003122:	89bb      	ldrh	r3, [r7, #12]
 8003124:	81fb      	strh	r3, [r7, #14]
 8003126:	e032      	b.n	800318e <process_FC3+0xae>
    {
    	modH->u8Buffer[ modH->u8BufferSize ] = highByte(modH->u16regs[i]);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800312e:	89fb      	ldrh	r3, [r7, #14]
 8003130:	005b      	lsls	r3, r3, #1
 8003132:	4413      	add	r3, r2
 8003134:	881b      	ldrh	r3, [r3, #0]
 8003136:	0a1b      	lsrs	r3, r3, #8
 8003138:	b29a      	uxth	r2, r3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8003140:	4619      	mov	r1, r3
 8003142:	b2d2      	uxtb	r2, r2
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	440b      	add	r3, r1
 8003148:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8003150:	3301      	adds	r3, #1
 8003152:	b2da      	uxtb	r2, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    	modH->u8Buffer[ modH->u8BufferSize ] = lowByte(modH->u16regs[i]);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8003160:	89fb      	ldrh	r3, [r7, #14]
 8003162:	005b      	lsls	r3, r3, #1
 8003164:	4413      	add	r3, r2
 8003166:	881a      	ldrh	r2, [r3, #0]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800316e:	4619      	mov	r1, r3
 8003170:	b2d2      	uxtb	r2, r2
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	440b      	add	r3, r1
 8003176:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800317e:	3301      	adds	r3, #1
 8003180:	b2da      	uxtb	r2, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    for (i = u16StartAdd; i < u16StartAdd + u8regsno; i++)
 8003188:	89fb      	ldrh	r3, [r7, #14]
 800318a:	3301      	adds	r3, #1
 800318c:	81fb      	strh	r3, [r7, #14]
 800318e:	89fa      	ldrh	r2, [r7, #14]
 8003190:	89b9      	ldrh	r1, [r7, #12]
 8003192:	7afb      	ldrb	r3, [r7, #11]
 8003194:	440b      	add	r3, r1
 8003196:	429a      	cmp	r2, r3
 8003198:	dbc6      	blt.n	8003128 <process_FC3+0x48>
    }
    u8CopyBufferSize = modH->u8BufferSize +2;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80031a0:	3302      	adds	r3, #2
 80031a2:	72bb      	strb	r3, [r7, #10]
    sendTxBuffer(modH);
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f7ff fe44 	bl	8002e32 <sendTxBuffer>

    return u8CopyBufferSize;
 80031aa:	f997 300a 	ldrsb.w	r3, [r7, #10]
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3710      	adds	r7, #16
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}

080031b6 <process_FC5>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC5( modbusHandler_t *modH )
{
 80031b6:	b580      	push	{r7, lr}
 80031b8:	b084      	sub	sp, #16
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
    uint8_t u8currentBit;
    uint16_t u16currentRegister;
    uint8_t u8CopyBufferSize;
    uint16_t u16coil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	7d5a      	ldrb	r2, [r3, #21]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	7d9b      	ldrb	r3, [r3, #22]
 80031c6:	4619      	mov	r1, r3
 80031c8:	4610      	mov	r0, r2
 80031ca:	f7ff fdb9 	bl	8002d40 <word>
 80031ce:	4603      	mov	r3, r0
 80031d0:	81fb      	strh	r3, [r7, #14]

    // point to the register and its bit
    u16currentRegister = (u16coil / 16);
 80031d2:	89fb      	ldrh	r3, [r7, #14]
 80031d4:	091b      	lsrs	r3, r3, #4
 80031d6:	81bb      	strh	r3, [r7, #12]
    u8currentBit = (uint8_t) (u16coil % 16);
 80031d8:	89fb      	ldrh	r3, [r7, #14]
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	f003 030f 	and.w	r3, r3, #15
 80031e0:	72fb      	strb	r3, [r7, #11]

    // write to coil
    bitWrite(
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	7ddb      	ldrb	r3, [r3, #23]
 80031e6:	2bff      	cmp	r3, #255	; 0xff
 80031e8:	d115      	bne.n	8003216 <process_FC5+0x60>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80031f0:	89bb      	ldrh	r3, [r7, #12]
 80031f2:	005b      	lsls	r3, r3, #1
 80031f4:	4413      	add	r3, r2
 80031f6:	8819      	ldrh	r1, [r3, #0]
 80031f8:	7afb      	ldrb	r3, [r7, #11]
 80031fa:	2201      	movs	r2, #1
 80031fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003200:	b29a      	uxth	r2, r3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
 8003208:	89bb      	ldrh	r3, [r7, #12]
 800320a:	005b      	lsls	r3, r3, #1
 800320c:	4403      	add	r3, r0
 800320e:	430a      	orrs	r2, r1
 8003210:	b292      	uxth	r2, r2
 8003212:	801a      	strh	r2, [r3, #0]
 8003214:	e016      	b.n	8003244 <process_FC5+0x8e>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800321c:	89bb      	ldrh	r3, [r7, #12]
 800321e:	005b      	lsls	r3, r3, #1
 8003220:	4413      	add	r3, r2
 8003222:	8819      	ldrh	r1, [r3, #0]
 8003224:	7afb      	ldrb	r3, [r7, #11]
 8003226:	2201      	movs	r2, #1
 8003228:	fa02 f303 	lsl.w	r3, r2, r3
 800322c:	b29b      	uxth	r3, r3
 800322e:	43db      	mvns	r3, r3
 8003230:	b29a      	uxth	r2, r3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
 8003238:	89bb      	ldrh	r3, [r7, #12]
 800323a:	005b      	lsls	r3, r3, #1
 800323c:	4403      	add	r3, r0
 800323e:	400a      	ands	r2, r1
 8003240:	b292      	uxth	r2, r2
 8003242:	801a      	strh	r2, [r3, #0]
        u8currentBit,
		modH->u8Buffer[ NB_HI ] == 0xff );


    // send answer to master
    modH->u8BufferSize = 6;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2206      	movs	r2, #6
 8003248:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    u8CopyBufferSize =  modH->u8BufferSize +2;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8003252:	3302      	adds	r3, #2
 8003254:	72bb      	strb	r3, [r7, #10]
    sendTxBuffer(modH);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f7ff fdeb 	bl	8002e32 <sendTxBuffer>

    return u8CopyBufferSize;
 800325c:	f997 300a 	ldrsb.w	r3, [r7, #10]
}
 8003260:	4618      	mov	r0, r3
 8003262:	3710      	adds	r7, #16
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}

08003268 <process_FC6>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC6(modbusHandler_t *modH )
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b084      	sub	sp, #16
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]

    uint16_t u16add = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	7d5a      	ldrb	r2, [r3, #21]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	7d9b      	ldrb	r3, [r3, #22]
 8003278:	4619      	mov	r1, r3
 800327a:	4610      	mov	r0, r2
 800327c:	f7ff fd60 	bl	8002d40 <word>
 8003280:	4603      	mov	r3, r0
 8003282:	81fb      	strh	r3, [r7, #14]
    uint8_t u8CopyBufferSize;
    uint16_t u16val = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	7dda      	ldrb	r2, [r3, #23]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	7e1b      	ldrb	r3, [r3, #24]
 800328c:	4619      	mov	r1, r3
 800328e:	4610      	mov	r0, r2
 8003290:	f7ff fd56 	bl	8002d40 <word>
 8003294:	4603      	mov	r3, r0
 8003296:	81bb      	strh	r3, [r7, #12]

    modH->u16regs[ u16add ] = u16val;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800329e:	89fb      	ldrh	r3, [r7, #14]
 80032a0:	005b      	lsls	r3, r3, #1
 80032a2:	4413      	add	r3, r2
 80032a4:	89ba      	ldrh	r2, [r7, #12]
 80032a6:	801a      	strh	r2, [r3, #0]

    // keep the same header
    modH->u8BufferSize = RESPONSE_SIZE;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2206      	movs	r2, #6
 80032ac:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

    u8CopyBufferSize = modH->u8BufferSize + 2;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80032b6:	3302      	adds	r3, #2
 80032b8:	72fb      	strb	r3, [r7, #11]
    sendTxBuffer(modH);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f7ff fdb9 	bl	8002e32 <sendTxBuffer>

    return u8CopyBufferSize;
 80032c0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3710      	adds	r7, #16
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}

080032cc <process_FC15>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC15( modbusHandler_t *modH )
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b086      	sub	sp, #24
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
    uint8_t u8CopyBufferSize;
    uint16_t u16currentCoil, u16coil;
    bool bTemp;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	7d5a      	ldrb	r2, [r3, #21]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	7d9b      	ldrb	r3, [r3, #22]
 80032dc:	4619      	mov	r1, r3
 80032de:	4610      	mov	r0, r2
 80032e0:	f7ff fd2e 	bl	8002d40 <word>
 80032e4:	4603      	mov	r3, r0
 80032e6:	827b      	strh	r3, [r7, #18]
    uint16_t u16Coilno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	7dda      	ldrb	r2, [r3, #23]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	7e1b      	ldrb	r3, [r3, #24]
 80032f0:	4619      	mov	r1, r3
 80032f2:	4610      	mov	r0, r2
 80032f4:	f7ff fd24 	bl	8002d40 <word>
 80032f8:	4603      	mov	r3, r0
 80032fa:	823b      	strh	r3, [r7, #16]


    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
 80032fc:	2300      	movs	r3, #0
 80032fe:	75bb      	strb	r3, [r7, #22]
    u8frameByte = 7;
 8003300:	2307      	movs	r3, #7
 8003302:	75fb      	strb	r3, [r7, #23]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8003304:	2300      	movs	r3, #0
 8003306:	82bb      	strh	r3, [r7, #20]
 8003308:	e058      	b.n	80033bc <process_FC15+0xf0>
    {

        u16coil = u16StartCoil + u16currentCoil;
 800330a:	8a7a      	ldrh	r2, [r7, #18]
 800330c:	8abb      	ldrh	r3, [r7, #20]
 800330e:	4413      	add	r3, r2
 8003310:	81bb      	strh	r3, [r7, #12]
        u16currentRegister = (u16coil / 16);
 8003312:	89bb      	ldrh	r3, [r7, #12]
 8003314:	091b      	lsrs	r3, r3, #4
 8003316:	817b      	strh	r3, [r7, #10]
        u8currentBit = (uint8_t) (u16coil % 16);
 8003318:	89bb      	ldrh	r3, [r7, #12]
 800331a:	b2db      	uxtb	r3, r3
 800331c:	f003 030f 	and.w	r3, r3, #15
 8003320:	727b      	strb	r3, [r7, #9]

        bTemp = bitRead(
 8003322:	7dfb      	ldrb	r3, [r7, #23]
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	4413      	add	r3, r2
 8003328:	7cdb      	ldrb	r3, [r3, #19]
 800332a:	461a      	mov	r2, r3
 800332c:	7dbb      	ldrb	r3, [r7, #22]
 800332e:	fa42 f303 	asr.w	r3, r2, r3
 8003332:	f003 0301 	and.w	r3, r3, #1
 8003336:	2b00      	cmp	r3, #0
 8003338:	bf14      	ite	ne
 800333a:	2301      	movne	r3, #1
 800333c:	2300      	moveq	r3, #0
 800333e:	723b      	strb	r3, [r7, #8]
        			modH->u8Buffer[ u8frameByte ],
                    u8bitsno );

        bitWrite(
 8003340:	7a3b      	ldrb	r3, [r7, #8]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d015      	beq.n	8003372 <process_FC15+0xa6>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800334c:	897b      	ldrh	r3, [r7, #10]
 800334e:	005b      	lsls	r3, r3, #1
 8003350:	4413      	add	r3, r2
 8003352:	8819      	ldrh	r1, [r3, #0]
 8003354:	7a7b      	ldrb	r3, [r7, #9]
 8003356:	2201      	movs	r2, #1
 8003358:	fa02 f303 	lsl.w	r3, r2, r3
 800335c:	b29a      	uxth	r2, r3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
 8003364:	897b      	ldrh	r3, [r7, #10]
 8003366:	005b      	lsls	r3, r3, #1
 8003368:	4403      	add	r3, r0
 800336a:	430a      	orrs	r2, r1
 800336c:	b292      	uxth	r2, r2
 800336e:	801a      	strh	r2, [r3, #0]
 8003370:	e016      	b.n	80033a0 <process_FC15+0xd4>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8003378:	897b      	ldrh	r3, [r7, #10]
 800337a:	005b      	lsls	r3, r3, #1
 800337c:	4413      	add	r3, r2
 800337e:	8819      	ldrh	r1, [r3, #0]
 8003380:	7a7b      	ldrb	r3, [r7, #9]
 8003382:	2201      	movs	r2, #1
 8003384:	fa02 f303 	lsl.w	r3, r2, r3
 8003388:	b29b      	uxth	r3, r3
 800338a:	43db      	mvns	r3, r3
 800338c:	b29a      	uxth	r2, r3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
 8003394:	897b      	ldrh	r3, [r7, #10]
 8003396:	005b      	lsls	r3, r3, #1
 8003398:	4403      	add	r3, r0
 800339a:	400a      	ands	r2, r1
 800339c:	b292      	uxth	r2, r2
 800339e:	801a      	strh	r2, [r3, #0]
            modH->u16regs[ u16currentRegister ],
            u8currentBit,
            bTemp );

        u8bitsno ++;
 80033a0:	7dbb      	ldrb	r3, [r7, #22]
 80033a2:	3301      	adds	r3, #1
 80033a4:	75bb      	strb	r3, [r7, #22]

        if (u8bitsno > 7)
 80033a6:	7dbb      	ldrb	r3, [r7, #22]
 80033a8:	2b07      	cmp	r3, #7
 80033aa:	d904      	bls.n	80033b6 <process_FC15+0xea>
        {
            u8bitsno = 0;
 80033ac:	2300      	movs	r3, #0
 80033ae:	75bb      	strb	r3, [r7, #22]
            u8frameByte++;
 80033b0:	7dfb      	ldrb	r3, [r7, #23]
 80033b2:	3301      	adds	r3, #1
 80033b4:	75fb      	strb	r3, [r7, #23]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 80033b6:	8abb      	ldrh	r3, [r7, #20]
 80033b8:	3301      	adds	r3, #1
 80033ba:	82bb      	strh	r3, [r7, #20]
 80033bc:	8aba      	ldrh	r2, [r7, #20]
 80033be:	8a3b      	ldrh	r3, [r7, #16]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d3a2      	bcc.n	800330a <process_FC15+0x3e>
        }
    }

    // send outcoming message
    // it's just a copy of the incomping frame until 6th byte
    modH->u8BufferSize         = 6;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2206      	movs	r2, #6
 80033c8:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    u8CopyBufferSize = modH->u8BufferSize +2;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80033d2:	3302      	adds	r3, #2
 80033d4:	73fb      	strb	r3, [r7, #15]
    sendTxBuffer(modH);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f7ff fd2b 	bl	8002e32 <sendTxBuffer>
    return u8CopyBufferSize;
 80033dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3718      	adds	r7, #24
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <process_FC16>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC16(modbusHandler_t *modH )
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b086      	sub	sp, #24
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
    uint16_t u16StartAdd = modH->u8Buffer[ ADD_HI ] << 8 | modH->u8Buffer[ ADD_LO ];
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	7d5b      	ldrb	r3, [r3, #21]
 80033f4:	021b      	lsls	r3, r3, #8
 80033f6:	b21a      	sxth	r2, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	7d9b      	ldrb	r3, [r3, #22]
 80033fc:	b21b      	sxth	r3, r3
 80033fe:	4313      	orrs	r3, r2
 8003400:	b21b      	sxth	r3, r3
 8003402:	82bb      	strh	r3, [r7, #20]
    uint16_t u16regsno = modH->u8Buffer[ NB_HI ] << 8 | modH->u8Buffer[ NB_LO ];
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	7ddb      	ldrb	r3, [r3, #23]
 8003408:	021b      	lsls	r3, r3, #8
 800340a:	b21a      	sxth	r2, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	7e1b      	ldrb	r3, [r3, #24]
 8003410:	b21b      	sxth	r3, r3
 8003412:	4313      	orrs	r3, r2
 8003414:	b21b      	sxth	r3, r3
 8003416:	827b      	strh	r3, [r7, #18]
    uint8_t u8CopyBufferSize;
    uint16_t i;
    uint16_t temp;

    // build header
    modH->u8Buffer[ NB_HI ]   = 0;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2200      	movs	r2, #0
 800341c:	75da      	strb	r2, [r3, #23]
    modH->u8Buffer[ NB_LO ]   = (uint8_t) u16regsno; // answer is always 256 or less bytes
 800341e:	8a7b      	ldrh	r3, [r7, #18]
 8003420:	b2da      	uxtb	r2, r3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	761a      	strb	r2, [r3, #24]
    modH->u8BufferSize         = RESPONSE_SIZE;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2206      	movs	r2, #6
 800342a:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

    // write registers
    for (i = 0; i < u16regsno; i++)
 800342e:	2300      	movs	r3, #0
 8003430:	82fb      	strh	r3, [r7, #22]
 8003432:	e01d      	b.n	8003470 <process_FC16+0x88>
    {
        temp = word(
        		modH->u8Buffer[ (BYTE_CNT + 1) + i * 2 ],
 8003434:	8afb      	ldrh	r3, [r7, #22]
 8003436:	005b      	lsls	r3, r3, #1
 8003438:	3307      	adds	r3, #7
        temp = word(
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	4413      	add	r3, r2
 800343e:	7cd8      	ldrb	r0, [r3, #19]
				modH->u8Buffer[ (BYTE_CNT + 2) + i * 2 ]);
 8003440:	8afb      	ldrh	r3, [r7, #22]
 8003442:	3304      	adds	r3, #4
 8003444:	005b      	lsls	r3, r3, #1
        temp = word(
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	4413      	add	r3, r2
 800344a:	7cdb      	ldrb	r3, [r3, #19]
 800344c:	4619      	mov	r1, r3
 800344e:	f7ff fc77 	bl	8002d40 <word>
 8003452:	4603      	mov	r3, r0
 8003454:	81fb      	strh	r3, [r7, #14]

        modH->u16regs[ u16StartAdd + i ] = temp;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800345c:	8ab9      	ldrh	r1, [r7, #20]
 800345e:	8afb      	ldrh	r3, [r7, #22]
 8003460:	440b      	add	r3, r1
 8003462:	005b      	lsls	r3, r3, #1
 8003464:	4413      	add	r3, r2
 8003466:	89fa      	ldrh	r2, [r7, #14]
 8003468:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < u16regsno; i++)
 800346a:	8afb      	ldrh	r3, [r7, #22]
 800346c:	3301      	adds	r3, #1
 800346e:	82fb      	strh	r3, [r7, #22]
 8003470:	8afa      	ldrh	r2, [r7, #22]
 8003472:	8a7b      	ldrh	r3, [r7, #18]
 8003474:	429a      	cmp	r2, r3
 8003476:	d3dd      	bcc.n	8003434 <process_FC16+0x4c>
    }
    u8CopyBufferSize = modH->u8BufferSize +2;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800347e:	3302      	adds	r3, #2
 8003480:	747b      	strb	r3, [r7, #17]
    sendTxBuffer(modH);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f7ff fcd5 	bl	8002e32 <sendTxBuffer>

    return u8CopyBufferSize;
 8003488:	f997 3011 	ldrsb.w	r3, [r7, #17]
}
 800348c:	4618      	mov	r0, r3
 800348e:	3718      	adds	r7, #24
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <modbus_master_set_one>:
modbusHandler_t ModbusH2;
int16_t ModbusDATA2[8];
modbus_t telegram;

int8_t modbus_master_set_one(uint8_t slave_id, uint8_t function_code, uint16_t reg_start, uint16_t data) // modbus_parameter: 0-HOLDING, 1-INPUT, 2-COIL, 3-DISCRETE
{
 8003494:	b590      	push	{r4, r7, lr}
 8003496:	b087      	sub	sp, #28
 8003498:	af02      	add	r7, sp, #8
 800349a:	4604      	mov	r4, r0
 800349c:	4608      	mov	r0, r1
 800349e:	4611      	mov	r1, r2
 80034a0:	461a      	mov	r2, r3
 80034a2:	4623      	mov	r3, r4
 80034a4:	71fb      	strb	r3, [r7, #7]
 80034a6:	4603      	mov	r3, r0
 80034a8:	71bb      	strb	r3, [r7, #6]
 80034aa:	460b      	mov	r3, r1
 80034ac:	80bb      	strh	r3, [r7, #4]
 80034ae:	4613      	mov	r3, r2
 80034b0:	807b      	strh	r3, [r7, #2]
	uint32_t u32NotificationValue;

	telegram.u8id = slave_id; // slave address
 80034b2:	4a1a      	ldr	r2, [pc, #104]	; (800351c <modbus_master_set_one+0x88>)
 80034b4:	79fb      	ldrb	r3, [r7, #7]
 80034b6:	7013      	strb	r3, [r2, #0]
	telegram.u8fct = function_code; // function code (this one is registers read)
 80034b8:	4a18      	ldr	r2, [pc, #96]	; (800351c <modbus_master_set_one+0x88>)
 80034ba:	79bb      	ldrb	r3, [r7, #6]
 80034bc:	7053      	strb	r3, [r2, #1]
	telegram.u16RegAdd = reg_start; // start address in slave
 80034be:	4a17      	ldr	r2, [pc, #92]	; (800351c <modbus_master_set_one+0x88>)
 80034c0:	88bb      	ldrh	r3, [r7, #4]
 80034c2:	8053      	strh	r3, [r2, #2]
	telegram.u16CoilsNo = 1; // number of elements (coils or registers) to read
 80034c4:	4b15      	ldr	r3, [pc, #84]	; (800351c <modbus_master_set_one+0x88>)
 80034c6:	2201      	movs	r2, #1
 80034c8:	809a      	strh	r2, [r3, #4]
	ModbusDATA2[0] = data;
 80034ca:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80034ce:	4b14      	ldr	r3, [pc, #80]	; (8003520 <modbus_master_set_one+0x8c>)
 80034d0:	801a      	strh	r2, [r3, #0]
	telegram.u16reg = ModbusDATA2; // pointer to a memory array
 80034d2:	4b12      	ldr	r3, [pc, #72]	; (800351c <modbus_master_set_one+0x88>)
 80034d4:	4a12      	ldr	r2, [pc, #72]	; (8003520 <modbus_master_set_one+0x8c>)
 80034d6:	609a      	str	r2, [r3, #8]

	ModbusQuery(&ModbusH2, telegram);
 80034d8:	4b10      	ldr	r3, [pc, #64]	; (800351c <modbus_master_set_one+0x88>)
 80034da:	68da      	ldr	r2, [r3, #12]
 80034dc:	9200      	str	r2, [sp, #0]
 80034de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034e0:	4810      	ldr	r0, [pc, #64]	; (8003524 <modbus_master_set_one+0x90>)
 80034e2:	f7fe ff37 	bl	8002354 <ModbusQuery>
	u32NotificationValue = ulTaskNotifyTake(pdTRUE, 500);
 80034e6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80034ea:	2001      	movs	r0, #1
 80034ec:	f011 f8ee 	bl	80146cc <ulTaskNotifyTake>
 80034f0:	60f8      	str	r0, [r7, #12]
	if (u32NotificationValue == 0)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d102      	bne.n	80034fe <modbus_master_set_one+0x6a>
	{
		return -1;
 80034f8:	f04f 33ff 	mov.w	r3, #4294967295
 80034fc:	e009      	b.n	8003512 <modbus_master_set_one+0x7e>
	}
	if (ModbusH2.i8lastError == ERR_TIME_OUT)
 80034fe:	4b09      	ldr	r3, [pc, #36]	; (8003524 <modbus_master_set_one+0x90>)
 8003500:	f993 3012 	ldrsb.w	r3, [r3, #18]
 8003504:	f113 0f08 	cmn.w	r3, #8
 8003508:	d102      	bne.n	8003510 <modbus_master_set_one+0x7c>
	{
		return -2;
 800350a:	f06f 0301 	mvn.w	r3, #1
 800350e:	e000      	b.n	8003512 <modbus_master_set_one+0x7e>
	}
	return 1;
 8003510:	2301      	movs	r3, #1
}
 8003512:	4618      	mov	r0, r3
 8003514:	3714      	adds	r7, #20
 8003516:	46bd      	mov	sp, r7
 8003518:	bd90      	pop	{r4, r7, pc}
 800351a:	bf00      	nop
 800351c:	20013bd0 	.word	0x20013bd0
 8003520:	20013be0 	.word	0x20013be0
 8003524:	20013a8c 	.word	0x20013a8c

08003528 <modbus_master_get_one>:

int32_t modbus_master_get_one(uint8_t slave_id, uint8_t function_code, uint16_t reg_start) // modbus_parameter: 0-HOLDING, 1-INPUT, 2-COIL, 3-DISCRETE
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b086      	sub	sp, #24
 800352c:	af02      	add	r7, sp, #8
 800352e:	4603      	mov	r3, r0
 8003530:	71fb      	strb	r3, [r7, #7]
 8003532:	460b      	mov	r3, r1
 8003534:	71bb      	strb	r3, [r7, #6]
 8003536:	4613      	mov	r3, r2
 8003538:	80bb      	strh	r3, [r7, #4]
	uint32_t u32NotificationValue;

	telegram.u8id = slave_id; // slave address
 800353a:	4a19      	ldr	r2, [pc, #100]	; (80035a0 <modbus_master_get_one+0x78>)
 800353c:	79fb      	ldrb	r3, [r7, #7]
 800353e:	7013      	strb	r3, [r2, #0]
	telegram.u8fct = function_code; // function code (this one is registers read)
 8003540:	4a17      	ldr	r2, [pc, #92]	; (80035a0 <modbus_master_get_one+0x78>)
 8003542:	79bb      	ldrb	r3, [r7, #6]
 8003544:	7053      	strb	r3, [r2, #1]
	telegram.u16RegAdd = reg_start; // start address in slave
 8003546:	4a16      	ldr	r2, [pc, #88]	; (80035a0 <modbus_master_get_one+0x78>)
 8003548:	88bb      	ldrh	r3, [r7, #4]
 800354a:	8053      	strh	r3, [r2, #2]
	telegram.u16CoilsNo = 1; // number of elements (coils or registers) to read
 800354c:	4b14      	ldr	r3, [pc, #80]	; (80035a0 <modbus_master_get_one+0x78>)
 800354e:	2201      	movs	r2, #1
 8003550:	809a      	strh	r2, [r3, #4]
	telegram.u16reg = ModbusDATA2; // pointer to a memory array
 8003552:	4b13      	ldr	r3, [pc, #76]	; (80035a0 <modbus_master_get_one+0x78>)
 8003554:	4a13      	ldr	r2, [pc, #76]	; (80035a4 <modbus_master_get_one+0x7c>)
 8003556:	609a      	str	r2, [r3, #8]

	ModbusQuery(&ModbusH2, telegram);
 8003558:	4b11      	ldr	r3, [pc, #68]	; (80035a0 <modbus_master_get_one+0x78>)
 800355a:	68da      	ldr	r2, [r3, #12]
 800355c:	9200      	str	r2, [sp, #0]
 800355e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003560:	4811      	ldr	r0, [pc, #68]	; (80035a8 <modbus_master_get_one+0x80>)
 8003562:	f7fe fef7 	bl	8002354 <ModbusQuery>
	u32NotificationValue = ulTaskNotifyTake(pdTRUE, 500);
 8003566:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800356a:	2001      	movs	r0, #1
 800356c:	f011 f8ae 	bl	80146cc <ulTaskNotifyTake>
 8003570:	60f8      	str	r0, [r7, #12]
	if (u32NotificationValue == 0)
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d102      	bne.n	800357e <modbus_master_get_one+0x56>
	{
		return -1;
 8003578:	f04f 33ff 	mov.w	r3, #4294967295
 800357c:	e00b      	b.n	8003596 <modbus_master_get_one+0x6e>
	}
	if (ModbusH2.i8lastError == ERR_TIME_OUT)
 800357e:	4b0a      	ldr	r3, [pc, #40]	; (80035a8 <modbus_master_get_one+0x80>)
 8003580:	f993 3012 	ldrsb.w	r3, [r3, #18]
 8003584:	f113 0f08 	cmn.w	r3, #8
 8003588:	d102      	bne.n	8003590 <modbus_master_get_one+0x68>
	{
		return -2;
 800358a:	f06f 0301 	mvn.w	r3, #1
 800358e:	e002      	b.n	8003596 <modbus_master_get_one+0x6e>
	}
	return ModbusDATA2[0];
 8003590:	4b04      	ldr	r3, [pc, #16]	; (80035a4 <modbus_master_get_one+0x7c>)
 8003592:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8003596:	4618      	mov	r0, r3
 8003598:	3710      	adds	r7, #16
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	20013bd0 	.word	0x20013bd0
 80035a4:	20013be0 	.word	0x20013be0
 80035a8:	20013a8c 	.word	0x20013a8c

080035ac <init_modbus_master>:
	return 1;
}

/* Master initialization */
void init_modbus_master()
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	af00      	add	r7, sp, #0
	ModbusH2.uModbusType = MB_MASTER;
 80035b0:	4b13      	ldr	r3, [pc, #76]	; (8003600 <init_modbus_master+0x54>)
 80035b2:	2204      	movs	r2, #4
 80035b4:	701a      	strb	r2, [r3, #0]
	ModbusH2.port =  &huart5;
 80035b6:	4b12      	ldr	r3, [pc, #72]	; (8003600 <init_modbus_master+0x54>)
 80035b8:	4a12      	ldr	r2, [pc, #72]	; (8003604 <init_modbus_master+0x58>)
 80035ba:	605a      	str	r2, [r3, #4]
	ModbusH2.u8id = 0; // For master it must be 0
 80035bc:	4b10      	ldr	r3, [pc, #64]	; (8003600 <init_modbus_master+0x54>)
 80035be:	2200      	movs	r2, #0
 80035c0:	721a      	strb	r2, [r3, #8]
	ModbusH2.u16timeOut = 100;
 80035c2:	4b0f      	ldr	r3, [pc, #60]	; (8003600 <init_modbus_master+0x54>)
 80035c4:	2264      	movs	r2, #100	; 0x64
 80035c6:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
	ModbusH2.EN_Port = UART5_DIR_GPIO_Port;
 80035ca:	4b0d      	ldr	r3, [pc, #52]	; (8003600 <init_modbus_master+0x54>)
 80035cc:	4a0e      	ldr	r2, [pc, #56]	; (8003608 <init_modbus_master+0x5c>)
 80035ce:	60da      	str	r2, [r3, #12]
	ModbusH2.EN_Pin = UART5_DIR_Pin;
 80035d0:	4b0b      	ldr	r3, [pc, #44]	; (8003600 <init_modbus_master+0x54>)
 80035d2:	2208      	movs	r2, #8
 80035d4:	821a      	strh	r2, [r3, #16]
	ModbusH2.u16regs = ModbusDATA2;
 80035d6:	4b0a      	ldr	r3, [pc, #40]	; (8003600 <init_modbus_master+0x54>)
 80035d8:	4a0c      	ldr	r2, [pc, #48]	; (800360c <init_modbus_master+0x60>)
 80035da:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	ModbusH2.u16regsize= sizeof(ModbusDATA2)/sizeof(ModbusDATA2[0]);
 80035de:	4b08      	ldr	r3, [pc, #32]	; (8003600 <init_modbus_master+0x54>)
 80035e0:	2208      	movs	r2, #8
 80035e2:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
	ModbusH2.xTypeHW = USART_HW_DMA;
 80035e6:	4b06      	ldr	r3, [pc, #24]	; (8003600 <init_modbus_master+0x54>)
 80035e8:	2204      	movs	r2, #4
 80035ea:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
	//Initialize Modbus library
	ModbusInit(&ModbusH2);
 80035ee:	4804      	ldr	r0, [pc, #16]	; (8003600 <init_modbus_master+0x54>)
 80035f0:	f7fe fc34 	bl	8001e5c <ModbusInit>
	//Start capturing traffic on serial Port
	ModbusStart(&ModbusH2);
 80035f4:	4802      	ldr	r0, [pc, #8]	; (8003600 <init_modbus_master+0x54>)
 80035f6:	f7fe fcd3 	bl	8001fa0 <ModbusStart>
}
 80035fa:	bf00      	nop
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	20013a8c 	.word	0x20013a8c
 8003604:	200143cc 	.word	0x200143cc
 8003608:	40020c00 	.word	0x40020c00
 800360c:	20013be0 	.word	0x20013be0

08003610 <HAL_UART_TxCpltCallback>:
 * Modbus functionality.
 * @ingroup UartHandle UART HAL handler
 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b086      	sub	sp, #24
 8003614:	af02      	add	r7, sp, #8
 8003616:	6078      	str	r0, [r7, #4]
	/* Modbus RTU TX callback BEGIN */
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8003618:	2300      	movs	r3, #0
 800361a:	60bb      	str	r3, [r7, #8]
	int i;
	for (i = 0; i < numberHandlers; i++ )
 800361c:	2300      	movs	r3, #0
 800361e:	60fb      	str	r3, [r7, #12]
 8003620:	e019      	b.n	8003656 <HAL_UART_TxCpltCallback+0x46>
	{
	   	if (mHandlers[i]->port == huart  )
 8003622:	4a17      	ldr	r2, [pc, #92]	; (8003680 <HAL_UART_TxCpltCallback+0x70>)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	429a      	cmp	r2, r3
 8003630:	d10e      	bne.n	8003650 <HAL_UART_TxCpltCallback+0x40>
	   	{
	   		// notify the end of TX
	   		xTaskNotifyFromISR(mHandlers[i]->myTaskModbusAHandle, 0, eNoAction, &xHigherPriorityTaskWoken);
 8003632:	4a13      	ldr	r2, [pc, #76]	; (8003680 <HAL_UART_TxCpltCallback+0x70>)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800363a:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
 800363e:	f107 0308 	add.w	r3, r7, #8
 8003642:	9300      	str	r3, [sp, #0]
 8003644:	2300      	movs	r3, #0
 8003646:	2200      	movs	r2, #0
 8003648:	2100      	movs	r1, #0
 800364a:	f011 f93f 	bl	80148cc <xTaskGenericNotifyFromISR>
	   		break;
 800364e:	e008      	b.n	8003662 <HAL_UART_TxCpltCallback+0x52>
	for (i = 0; i < numberHandlers; i++ )
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	3301      	adds	r3, #1
 8003654:	60fb      	str	r3, [r7, #12]
 8003656:	4b0b      	ldr	r3, [pc, #44]	; (8003684 <HAL_UART_TxCpltCallback+0x74>)
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	461a      	mov	r2, r3
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	4293      	cmp	r3, r2
 8003660:	dbdf      	blt.n	8003622 <HAL_UART_TxCpltCallback+0x12>
	   	}

	}
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d007      	beq.n	8003678 <HAL_UART_TxCpltCallback+0x68>
 8003668:	4b07      	ldr	r3, [pc, #28]	; (8003688 <HAL_UART_TxCpltCallback+0x78>)
 800366a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800366e:	601a      	str	r2, [r3, #0]
 8003670:	f3bf 8f4f 	dsb	sy
 8003674:	f3bf 8f6f 	isb	sy
	/*
	 * Here you should implement the callback code for other UARTs not used by Modbus
	 *
	 * */

}
 8003678:	bf00      	nop
 800367a:	3710      	adds	r7, #16
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}
 8003680:	20013a84 	.word	0x20013a84
 8003684:	20000038 	.word	0x20000038
 8003688:	e000ed04 	.word	0xe000ed04

0800368c <HAL_UART_RxCpltCallback>:
 * user should implement the correct control flow and verification to maintain
 * Modbus functionality.
 * @ingroup UartHandle UART HAL handler
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 800368c:	b590      	push	{r4, r7, lr}
 800368e:	b087      	sub	sp, #28
 8003690:	af02      	add	r7, sp, #8
 8003692:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8003694:	2300      	movs	r3, #0
 8003696:	60bb      	str	r3, [r7, #8]

	/* Modbus RTU RX callback BEGIN */
    int i;
    for (i = 0; i < numberHandlers; i++ )
 8003698:	2300      	movs	r3, #0
 800369a:	60fb      	str	r3, [r7, #12]
 800369c:	e042      	b.n	8003724 <HAL_UART_RxCpltCallback+0x98>
    {
    	if (mHandlers[i]->port == UartHandle  )
 800369e:	4a2d      	ldr	r2, [pc, #180]	; (8003754 <HAL_UART_RxCpltCallback+0xc8>)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d137      	bne.n	800371e <HAL_UART_RxCpltCallback+0x92>
    	{

    		if(mHandlers[i]->xTypeHW == USART_HW)
 80036ae:	4a29      	ldr	r2, [pc, #164]	; (8003754 <HAL_UART_RxCpltCallback+0xc8>)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036b6:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d139      	bne.n	8003732 <HAL_UART_RxCpltCallback+0xa6>
    		{
    			RingAdd(&mHandlers[i]->xBufferRX, mHandlers[i]->dataRX);
 80036be:	4a25      	ldr	r2, [pc, #148]	; (8003754 <HAL_UART_RxCpltCallback+0xc8>)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036c6:	f103 02bc 	add.w	r2, r3, #188	; 0xbc
 80036ca:	4922      	ldr	r1, [pc, #136]	; (8003754 <HAL_UART_RxCpltCallback+0xc8>)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80036d2:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 80036d6:	4619      	mov	r1, r3
 80036d8:	4610      	mov	r0, r2
 80036da:	f7fe faf7 	bl	8001ccc <RingAdd>
    			HAL_UART_Receive_IT(mHandlers[i]->port, &mHandlers[i]->dataRX, 1);
 80036de:	4a1d      	ldr	r2, [pc, #116]	; (8003754 <HAL_UART_RxCpltCallback+0xc8>)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036e6:	6858      	ldr	r0, [r3, #4]
 80036e8:	4a1a      	ldr	r2, [pc, #104]	; (8003754 <HAL_UART_RxCpltCallback+0xc8>)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036f0:	33a6      	adds	r3, #166	; 0xa6
 80036f2:	2201      	movs	r2, #1
 80036f4:	4619      	mov	r1, r3
 80036f6:	f00c f94d 	bl	800f994 <HAL_UART_Receive_IT>
    			xTimerResetFromISR(mHandlers[i]->xTimerT35, &xHigherPriorityTaskWoken);
 80036fa:	4a16      	ldr	r2, [pc, #88]	; (8003754 <HAL_UART_RxCpltCallback+0xc8>)
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003702:	f8d3 40b0 	ldr.w	r4, [r3, #176]	; 0xb0
 8003706:	f010 fb0f 	bl	8013d28 <xTaskGetTickCountFromISR>
 800370a:	4602      	mov	r2, r0
 800370c:	f107 0308 	add.w	r3, r7, #8
 8003710:	2100      	movs	r1, #0
 8003712:	9100      	str	r1, [sp, #0]
 8003714:	2107      	movs	r1, #7
 8003716:	4620      	mov	r0, r4
 8003718:	f011 faac 	bl	8014c74 <xTimerGenericCommand>
    		}
    		break;
 800371c:	e009      	b.n	8003732 <HAL_UART_RxCpltCallback+0xa6>
    for (i = 0; i < numberHandlers; i++ )
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	3301      	adds	r3, #1
 8003722:	60fb      	str	r3, [r7, #12]
 8003724:	4b0c      	ldr	r3, [pc, #48]	; (8003758 <HAL_UART_RxCpltCallback+0xcc>)
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	461a      	mov	r2, r3
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	4293      	cmp	r3, r2
 800372e:	dbb6      	blt.n	800369e <HAL_UART_RxCpltCallback+0x12>
 8003730:	e000      	b.n	8003734 <HAL_UART_RxCpltCallback+0xa8>
    		break;
 8003732:	bf00      	nop
    	}
    }
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d007      	beq.n	800374a <HAL_UART_RxCpltCallback+0xbe>
 800373a:	4b08      	ldr	r3, [pc, #32]	; (800375c <HAL_UART_RxCpltCallback+0xd0>)
 800373c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003740:	601a      	str	r2, [r3, #0]
 8003742:	f3bf 8f4f 	dsb	sy
 8003746:	f3bf 8f6f 	isb	sy
	 * Here you should implement the callback code for other UARTs not used by Modbus
	 *
	 *
	 * */

}
 800374a:	bf00      	nop
 800374c:	3714      	adds	r7, #20
 800374e:	46bd      	mov	sp, r7
 8003750:	bd90      	pop	{r4, r7, pc}
 8003752:	bf00      	nop
 8003754:	20013a84 	.word	0x20013a84
 8003758:	20000038 	.word	0x20000038
 800375c:	e000ed04 	.word	0xe000ed04

08003760 <HAL_UART_ErrorCallback>:
 * handled by the HAL
 * */


void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]

 int i;

 for (i = 0; i < numberHandlers; i++ )
 8003768:	2300      	movs	r3, #0
 800376a:	60fb      	str	r3, [r7, #12]
 800376c:	e03f      	b.n	80037ee <HAL_UART_ErrorCallback+0x8e>
 {
    	if (mHandlers[i]->port == huart  )
 800376e:	4a26      	ldr	r2, [pc, #152]	; (8003808 <HAL_UART_ErrorCallback+0xa8>)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	429a      	cmp	r2, r3
 800377c:	d134      	bne.n	80037e8 <HAL_UART_ErrorCallback+0x88>
    	{

    		if(mHandlers[i]->xTypeHW == USART_HW_DMA)
 800377e:	4a22      	ldr	r2, [pc, #136]	; (8003808 <HAL_UART_ErrorCallback+0xa8>)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003786:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800378a:	2b04      	cmp	r3, #4
 800378c:	d136      	bne.n	80037fc <HAL_UART_ErrorCallback+0x9c>
    		{
    			while(HAL_UARTEx_ReceiveToIdle_DMA(mHandlers[i]->port, mHandlers[i]->xBufferRX.uxBuffer, MAX_BUFFER) != HAL_OK)
 800378e:	e007      	b.n	80037a0 <HAL_UART_ErrorCallback+0x40>
    		    {
    					HAL_UART_DMAStop(mHandlers[i]->port);
 8003790:	4a1d      	ldr	r2, [pc, #116]	; (8003808 <HAL_UART_ErrorCallback+0xa8>)
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	4618      	mov	r0, r3
 800379c:	f00c f9a8 	bl	800faf0 <HAL_UART_DMAStop>
    			while(HAL_UARTEx_ReceiveToIdle_DMA(mHandlers[i]->port, mHandlers[i]->xBufferRX.uxBuffer, MAX_BUFFER) != HAL_OK)
 80037a0:	4a19      	ldr	r2, [pc, #100]	; (8003808 <HAL_UART_ErrorCallback+0xa8>)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037a8:	6858      	ldr	r0, [r3, #4]
 80037aa:	4a17      	ldr	r2, [pc, #92]	; (8003808 <HAL_UART_ErrorCallback+0xa8>)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037b2:	33bc      	adds	r3, #188	; 0xbc
 80037b4:	2280      	movs	r2, #128	; 0x80
 80037b6:	4619      	mov	r1, r3
 80037b8:	f00c fa19 	bl	800fbee <HAL_UARTEx_ReceiveToIdle_DMA>
 80037bc:	4603      	mov	r3, r0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d1e6      	bne.n	8003790 <HAL_UART_ErrorCallback+0x30>
   				}
				__HAL_DMA_DISABLE_IT(mHandlers[i]->port->hdmarx, DMA_IT_HT); // we don't need half-transfer interrupt
 80037c2:	4a11      	ldr	r2, [pc, #68]	; (8003808 <HAL_UART_ErrorCallback+0xa8>)
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	490d      	ldr	r1, [pc, #52]	; (8003808 <HAL_UART_ErrorCallback+0xa8>)
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f022 0208 	bic.w	r2, r2, #8
 80037e4:	601a      	str	r2, [r3, #0]

    		}

    		break;
 80037e6:	e009      	b.n	80037fc <HAL_UART_ErrorCallback+0x9c>
 for (i = 0; i < numberHandlers; i++ )
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	3301      	adds	r3, #1
 80037ec:	60fb      	str	r3, [r7, #12]
 80037ee:	4b07      	ldr	r3, [pc, #28]	; (800380c <HAL_UART_ErrorCallback+0xac>)
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	461a      	mov	r2, r3
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	4293      	cmp	r3, r2
 80037f8:	dbb9      	blt.n	800376e <HAL_UART_ErrorCallback+0xe>
    	}
   }
}
 80037fa:	e000      	b.n	80037fe <HAL_UART_ErrorCallback+0x9e>
    		break;
 80037fc:	bf00      	nop
}
 80037fe:	bf00      	nop
 8003800:	3710      	adds	r7, #16
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	20013a84 	.word	0x20013a84
 800380c:	20000038 	.word	0x20000038

08003810 <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b086      	sub	sp, #24
 8003814:	af02      	add	r7, sp, #8
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	460b      	mov	r3, r1
 800381a:	807b      	strh	r3, [r7, #2]
	    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800381c:	2300      	movs	r3, #0
 800381e:	60bb      	str	r3, [r7, #8]
		/* Modbus RTU RX callback BEGIN */
	    int i;
	    for (i = 0; i < numberHandlers; i++ )
 8003820:	2300      	movs	r3, #0
 8003822:	60fb      	str	r3, [r7, #12]
 8003824:	e05f      	b.n	80038e6 <HAL_UARTEx_RxEventCallback+0xd6>
	    {
	    	if (mHandlers[i]->port == huart  )
 8003826:	4a3b      	ldr	r2, [pc, #236]	; (8003914 <HAL_UARTEx_RxEventCallback+0x104>)
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	429a      	cmp	r2, r3
 8003834:	d154      	bne.n	80038e0 <HAL_UARTEx_RxEventCallback+0xd0>
	    	{


	    		if(mHandlers[i]->xTypeHW == USART_HW_DMA)
 8003836:	4a37      	ldr	r2, [pc, #220]	; (8003914 <HAL_UARTEx_RxEventCallback+0x104>)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800383e:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8003842:	2b04      	cmp	r3, #4
 8003844:	d156      	bne.n	80038f4 <HAL_UARTEx_RxEventCallback+0xe4>
	    		{
	    			if(Size) //check if we have received any byte
 8003846:	887b      	ldrh	r3, [r7, #2]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d053      	beq.n	80038f4 <HAL_UARTEx_RxEventCallback+0xe4>
	    			{
		    				mHandlers[i]->xBufferRX.u8available = Size;
 800384c:	4a31      	ldr	r2, [pc, #196]	; (8003914 <HAL_UARTEx_RxEventCallback+0x104>)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003854:	887a      	ldrh	r2, [r7, #2]
 8003856:	b2d2      	uxtb	r2, r2
 8003858:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
		    				mHandlers[i]->xBufferRX.overflow = false;
 800385c:	4a2d      	ldr	r2, [pc, #180]	; (8003914 <HAL_UARTEx_RxEventCallback+0x104>)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003864:	2200      	movs	r2, #0
 8003866:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f

		    				while(HAL_UARTEx_ReceiveToIdle_DMA(mHandlers[i]->port, mHandlers[i]->xBufferRX.uxBuffer, MAX_BUFFER) != HAL_OK)
 800386a:	e007      	b.n	800387c <HAL_UARTEx_RxEventCallback+0x6c>
		    				{
		    					HAL_UART_DMAStop(mHandlers[i]->port);
 800386c:	4a29      	ldr	r2, [pc, #164]	; (8003914 <HAL_UARTEx_RxEventCallback+0x104>)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	4618      	mov	r0, r3
 8003878:	f00c f93a 	bl	800faf0 <HAL_UART_DMAStop>
		    				while(HAL_UARTEx_ReceiveToIdle_DMA(mHandlers[i]->port, mHandlers[i]->xBufferRX.uxBuffer, MAX_BUFFER) != HAL_OK)
 800387c:	4a25      	ldr	r2, [pc, #148]	; (8003914 <HAL_UARTEx_RxEventCallback+0x104>)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003884:	6858      	ldr	r0, [r3, #4]
 8003886:	4a23      	ldr	r2, [pc, #140]	; (8003914 <HAL_UARTEx_RxEventCallback+0x104>)
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800388e:	33bc      	adds	r3, #188	; 0xbc
 8003890:	2280      	movs	r2, #128	; 0x80
 8003892:	4619      	mov	r1, r3
 8003894:	f00c f9ab 	bl	800fbee <HAL_UARTEx_ReceiveToIdle_DMA>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d1e6      	bne.n	800386c <HAL_UARTEx_RxEventCallback+0x5c>

		    				}
		    				__HAL_DMA_DISABLE_IT(mHandlers[i]->port->hdmarx, DMA_IT_HT); // we don't need half-transfer interrupt
 800389e:	4a1d      	ldr	r2, [pc, #116]	; (8003914 <HAL_UARTEx_RxEventCallback+0x104>)
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	4919      	ldr	r1, [pc, #100]	; (8003914 <HAL_UARTEx_RxEventCallback+0x104>)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f022 0208 	bic.w	r2, r2, #8
 80038c0:	601a      	str	r2, [r3, #0]

		    				xTaskNotifyFromISR(mHandlers[i]->myTaskModbusAHandle, 0 , eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 80038c2:	4a14      	ldr	r2, [pc, #80]	; (8003914 <HAL_UARTEx_RxEventCallback+0x104>)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038ca:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
 80038ce:	f107 0308 	add.w	r3, r7, #8
 80038d2:	9300      	str	r3, [sp, #0]
 80038d4:	2300      	movs	r3, #0
 80038d6:	2203      	movs	r2, #3
 80038d8:	2100      	movs	r1, #0
 80038da:	f010 fff7 	bl	80148cc <xTaskGenericNotifyFromISR>
	    			}
	    		}

	    		break;
 80038de:	e009      	b.n	80038f4 <HAL_UARTEx_RxEventCallback+0xe4>
	    for (i = 0; i < numberHandlers; i++ )
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	3301      	adds	r3, #1
 80038e4:	60fb      	str	r3, [r7, #12]
 80038e6:	4b0c      	ldr	r3, [pc, #48]	; (8003918 <HAL_UARTEx_RxEventCallback+0x108>)
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	461a      	mov	r2, r3
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	4293      	cmp	r3, r2
 80038f0:	db99      	blt.n	8003826 <HAL_UARTEx_RxEventCallback+0x16>
 80038f2:	e000      	b.n	80038f6 <HAL_UARTEx_RxEventCallback+0xe6>
	    		break;
 80038f4:	bf00      	nop
	    	}
	    }
	    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d007      	beq.n	800390c <HAL_UARTEx_RxEventCallback+0xfc>
 80038fc:	4b07      	ldr	r3, [pc, #28]	; (800391c <HAL_UARTEx_RxEventCallback+0x10c>)
 80038fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003902:	601a      	str	r2, [r3, #0]
 8003904:	f3bf 8f4f 	dsb	sy
 8003908:	f3bf 8f6f 	isb	sy
}
 800390c:	bf00      	nop
 800390e:	3710      	adds	r7, #16
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}
 8003914:	20013a84 	.word	0x20013a84
 8003918:	20000038 	.word	0x20000038
 800391c:	e000ed04 	.word	0xe000ed04

08003920 <cJSON_GetErrorPtr>:
    size_t position;
} error;
static error global_error = { NULL, 0 };

CJSON_PUBLIC(const char *) cJSON_GetErrorPtr(void)
{
 8003920:	b480      	push	{r7}
 8003922:	af00      	add	r7, sp, #0
    return (const char*) (global_error.json + global_error.position);
 8003924:	4b04      	ldr	r3, [pc, #16]	; (8003938 <cJSON_GetErrorPtr+0x18>)
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	4b03      	ldr	r3, [pc, #12]	; (8003938 <cJSON_GetErrorPtr+0x18>)
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	4413      	add	r3, r2
}
 800392e:	4618      	mov	r0, r3
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr
 8003938:	2000003c 	.word	0x2000003c

0800393c <case_insensitive_strcmp>:
    return version;
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 800393c:	b480      	push	{r7}
 800393e:	b085      	sub	sp, #20
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d002      	beq.n	8003952 <case_insensitive_strcmp+0x16>
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d101      	bne.n	8003956 <case_insensitive_strcmp+0x1a>
    {
        return 1;
 8003952:	2301      	movs	r3, #1
 8003954:	e056      	b.n	8003a04 <case_insensitive_strcmp+0xc8>
    }

    if (string1 == string2)
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	429a      	cmp	r2, r3
 800395c:	d10d      	bne.n	800397a <case_insensitive_strcmp+0x3e>
    {
        return 0;
 800395e:	2300      	movs	r3, #0
 8003960:	e050      	b.n	8003a04 <case_insensitive_strcmp+0xc8>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d101      	bne.n	800396e <case_insensitive_strcmp+0x32>
        {
            return 0;
 800396a:	2300      	movs	r3, #0
 800396c:	e04a      	b.n	8003a04 <case_insensitive_strcmp+0xc8>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	3301      	adds	r3, #1
 8003972:	607b      	str	r3, [r7, #4]
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	3301      	adds	r3, #1
 8003978:	603b      	str	r3, [r7, #0]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	73fb      	strb	r3, [r7, #15]
 8003980:	7bfb      	ldrb	r3, [r7, #15]
 8003982:	3301      	adds	r3, #1
 8003984:	4a22      	ldr	r2, [pc, #136]	; (8003a10 <case_insensitive_strcmp+0xd4>)
 8003986:	4413      	add	r3, r2
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	f003 0303 	and.w	r3, r3, #3
 800398e:	2b01      	cmp	r3, #1
 8003990:	d103      	bne.n	800399a <case_insensitive_strcmp+0x5e>
 8003992:	7bfb      	ldrb	r3, [r7, #15]
 8003994:	f103 0220 	add.w	r2, r3, #32
 8003998:	e000      	b.n	800399c <case_insensitive_strcmp+0x60>
 800399a:	7bfa      	ldrb	r2, [r7, #15]
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	781b      	ldrb	r3, [r3, #0]
 80039a0:	73bb      	strb	r3, [r7, #14]
 80039a2:	7bbb      	ldrb	r3, [r7, #14]
 80039a4:	3301      	adds	r3, #1
 80039a6:	491a      	ldr	r1, [pc, #104]	; (8003a10 <case_insensitive_strcmp+0xd4>)
 80039a8:	440b      	add	r3, r1
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	f003 0303 	and.w	r3, r3, #3
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d102      	bne.n	80039ba <case_insensitive_strcmp+0x7e>
 80039b4:	7bbb      	ldrb	r3, [r7, #14]
 80039b6:	3320      	adds	r3, #32
 80039b8:	e000      	b.n	80039bc <case_insensitive_strcmp+0x80>
 80039ba:	7bbb      	ldrb	r3, [r7, #14]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d0d0      	beq.n	8003962 <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	737b      	strb	r3, [r7, #13]
 80039c6:	7b7b      	ldrb	r3, [r7, #13]
 80039c8:	3301      	adds	r3, #1
 80039ca:	4a11      	ldr	r2, [pc, #68]	; (8003a10 <case_insensitive_strcmp+0xd4>)
 80039cc:	4413      	add	r3, r2
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	f003 0303 	and.w	r3, r3, #3
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d103      	bne.n	80039e0 <case_insensitive_strcmp+0xa4>
 80039d8:	7b7b      	ldrb	r3, [r7, #13]
 80039da:	f103 0220 	add.w	r2, r3, #32
 80039de:	e000      	b.n	80039e2 <case_insensitive_strcmp+0xa6>
 80039e0:	7b7a      	ldrb	r2, [r7, #13]
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	733b      	strb	r3, [r7, #12]
 80039e8:	7b3b      	ldrb	r3, [r7, #12]
 80039ea:	3301      	adds	r3, #1
 80039ec:	4908      	ldr	r1, [pc, #32]	; (8003a10 <case_insensitive_strcmp+0xd4>)
 80039ee:	440b      	add	r3, r1
 80039f0:	781b      	ldrb	r3, [r3, #0]
 80039f2:	f003 0303 	and.w	r3, r3, #3
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d102      	bne.n	8003a00 <case_insensitive_strcmp+0xc4>
 80039fa:	7b3b      	ldrb	r3, [r7, #12]
 80039fc:	3320      	adds	r3, #32
 80039fe:	e000      	b.n	8003a02 <case_insensitive_strcmp+0xc6>
 8003a00:	7b3b      	ldrb	r3, [r7, #12]
 8003a02:	1ad3      	subs	r3, r2, r3
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3714      	adds	r7, #20
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr
 8003a10:	0802e47e 	.word	0x0802e47e

08003a14 <cJSON_strdup>:
#define static_strlen(string_literal) (sizeof(string_literal) - sizeof(""))

static internal_hooks global_hooks = { internal_malloc, internal_free, internal_realloc };

static unsigned char* cJSON_strdup(const unsigned char* string, const internal_hooks * const hooks)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	6039      	str	r1, [r7, #0]
    size_t length = 0;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	60fb      	str	r3, [r7, #12]
    unsigned char *copy = NULL;
 8003a22:	2300      	movs	r3, #0
 8003a24:	60bb      	str	r3, [r7, #8]

    if (string == NULL)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d101      	bne.n	8003a30 <cJSON_strdup+0x1c>
    {
        return NULL;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	e015      	b.n	8003a5c <cJSON_strdup+0x48>
    }

    length = strlen((const char*)string) + sizeof("");
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f7fc fbd7 	bl	80001e4 <strlen>
 8003a36:	4603      	mov	r3, r0
 8003a38:	3301      	adds	r3, #1
 8003a3a:	60fb      	str	r3, [r7, #12]
    copy = (unsigned char*)hooks->allocate(length);
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	68f8      	ldr	r0, [r7, #12]
 8003a42:	4798      	blx	r3
 8003a44:	60b8      	str	r0, [r7, #8]
    if (copy == NULL)
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d101      	bne.n	8003a50 <cJSON_strdup+0x3c>
    {
        return NULL;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	e005      	b.n	8003a5c <cJSON_strdup+0x48>
    }
    memcpy(copy, string, length);
 8003a50:	68fa      	ldr	r2, [r7, #12]
 8003a52:	6879      	ldr	r1, [r7, #4]
 8003a54:	68b8      	ldr	r0, [r7, #8]
 8003a56:	f020 ffd5 	bl	8024a04 <memcpy>

    return copy;
 8003a5a:	68bb      	ldr	r3, [r7, #8]
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3710      	adds	r7, #16
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	2028      	movs	r0, #40	; 0x28
 8003a72:	4798      	blx	r3
 8003a74:	60f8      	str	r0, [r7, #12]
    if (node)
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d004      	beq.n	8003a86 <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 8003a7c:	2228      	movs	r2, #40	; 0x28
 8003a7e:	2100      	movs	r1, #0
 8003a80:	68f8      	ldr	r0, [r7, #12]
 8003a82:	f020 ffe7 	bl	8024a54 <memset>
    }

    return node;
 8003a86:	68fb      	ldr	r3, [r7, #12]
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3710      	adds	r7, #16
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 8003a9c:	e037      	b.n	8003b0e <cJSON_Delete+0x7e>
    {
        next = item->next;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d108      	bne.n	8003ac2 <cJSON_Delete+0x32>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d004      	beq.n	8003ac2 <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	4618      	mov	r0, r3
 8003abe:	f7ff ffe7 	bl	8003a90 <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d109      	bne.n	8003ae2 <cJSON_Delete+0x52>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d005      	beq.n	8003ae2 <cJSON_Delete+0x52>
        {
            global_hooks.deallocate(item->valuestring);
 8003ad6:	4b12      	ldr	r3, [pc, #72]	; (8003b20 <cJSON_Delete+0x90>)
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	6912      	ldr	r2, [r2, #16]
 8003ade:	4610      	mov	r0, r2
 8003ae0:	4798      	blx	r3
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d109      	bne.n	8003b02 <cJSON_Delete+0x72>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a1b      	ldr	r3, [r3, #32]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d005      	beq.n	8003b02 <cJSON_Delete+0x72>
        {
            global_hooks.deallocate(item->string);
 8003af6:	4b0a      	ldr	r3, [pc, #40]	; (8003b20 <cJSON_Delete+0x90>)
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	6a12      	ldr	r2, [r2, #32]
 8003afe:	4610      	mov	r0, r2
 8003b00:	4798      	blx	r3
        }
        global_hooks.deallocate(item);
 8003b02:	4b07      	ldr	r3, [pc, #28]	; (8003b20 <cJSON_Delete+0x90>)
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	4798      	blx	r3
        item = next;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d1c4      	bne.n	8003a9e <cJSON_Delete+0xe>
    }
}
 8003b14:	bf00      	nop
 8003b16:	bf00      	nop
 8003b18:	3710      	adds	r7, #16
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	10000000 	.word	0x10000000

08003b24 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 8003b24:	b480      	push	{r7}
 8003b26:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 8003b28:	232e      	movs	r3, #46	; 0x2e
#endif
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr
 8003b34:	0000      	movs	r0, r0
	...

08003b38 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b098      	sub	sp, #96	; 0x60
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	6039      	str	r1, [r7, #0]
    double number = 0;
 8003b42:	f04f 0200 	mov.w	r2, #0
 8003b46:	f04f 0300 	mov.w	r3, #0
 8003b4a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    unsigned char *after_end = NULL;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	64bb      	str	r3, [r7, #72]	; 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 8003b52:	f7ff ffe7 	bl	8003b24 <get_decimal_point>
 8003b56:	4603      	mov	r3, r0
 8003b58:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    size_t i = 0;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	65fb      	str	r3, [r7, #92]	; 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d003      	beq.n	8003b6e <parse_number+0x36>
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d101      	bne.n	8003b72 <parse_number+0x3a>
    {
        return false;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	e0c6      	b.n	8003d00 <parse_number+0x1c8>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 8003b72:	2300      	movs	r3, #0
 8003b74:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b76:	e063      	b.n	8003c40 <parse_number+0x108>
    {
        switch (buffer_at_offset(input_buffer)[i])
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	6899      	ldr	r1, [r3, #8]
 8003b80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b82:	440b      	add	r3, r1
 8003b84:	4413      	add	r3, r2
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	2b45      	cmp	r3, #69	; 0x45
 8003b8a:	dc3d      	bgt.n	8003c08 <parse_number+0xd0>
 8003b8c:	2b2b      	cmp	r3, #43	; 0x2b
 8003b8e:	db66      	blt.n	8003c5e <parse_number+0x126>
 8003b90:	3b2b      	subs	r3, #43	; 0x2b
 8003b92:	2b1a      	cmp	r3, #26
 8003b94:	d863      	bhi.n	8003c5e <parse_number+0x126>
 8003b96:	a201      	add	r2, pc, #4	; (adr r2, 8003b9c <parse_number+0x64>)
 8003b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b9c:	08003c0d 	.word	0x08003c0d
 8003ba0:	08003c5f 	.word	0x08003c5f
 8003ba4:	08003c0d 	.word	0x08003c0d
 8003ba8:	08003c2b 	.word	0x08003c2b
 8003bac:	08003c5f 	.word	0x08003c5f
 8003bb0:	08003c0d 	.word	0x08003c0d
 8003bb4:	08003c0d 	.word	0x08003c0d
 8003bb8:	08003c0d 	.word	0x08003c0d
 8003bbc:	08003c0d 	.word	0x08003c0d
 8003bc0:	08003c0d 	.word	0x08003c0d
 8003bc4:	08003c0d 	.word	0x08003c0d
 8003bc8:	08003c0d 	.word	0x08003c0d
 8003bcc:	08003c0d 	.word	0x08003c0d
 8003bd0:	08003c0d 	.word	0x08003c0d
 8003bd4:	08003c0d 	.word	0x08003c0d
 8003bd8:	08003c5f 	.word	0x08003c5f
 8003bdc:	08003c5f 	.word	0x08003c5f
 8003be0:	08003c5f 	.word	0x08003c5f
 8003be4:	08003c5f 	.word	0x08003c5f
 8003be8:	08003c5f 	.word	0x08003c5f
 8003bec:	08003c5f 	.word	0x08003c5f
 8003bf0:	08003c5f 	.word	0x08003c5f
 8003bf4:	08003c5f 	.word	0x08003c5f
 8003bf8:	08003c5f 	.word	0x08003c5f
 8003bfc:	08003c5f 	.word	0x08003c5f
 8003c00:	08003c5f 	.word	0x08003c5f
 8003c04:	08003c0d 	.word	0x08003c0d
 8003c08:	2b65      	cmp	r3, #101	; 0x65
 8003c0a:	d128      	bne.n	8003c5e <parse_number+0x126>
            case '9':
            case '+':
            case '-':
            case 'e':
            case 'E':
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	6899      	ldr	r1, [r3, #8]
 8003c14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c16:	440b      	add	r3, r1
 8003c18:	4413      	add	r3, r2
 8003c1a:	7819      	ldrb	r1, [r3, #0]
 8003c1c:	f107 0208 	add.w	r2, r7, #8
 8003c20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c22:	4413      	add	r3, r2
 8003c24:	460a      	mov	r2, r1
 8003c26:	701a      	strb	r2, [r3, #0]
                break;
 8003c28:	e007      	b.n	8003c3a <parse_number+0x102>

            case '.':
                number_c_string[i] = decimal_point;
 8003c2a:	f107 0208 	add.w	r2, r7, #8
 8003c2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c30:	4413      	add	r3, r2
 8003c32:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8003c36:	701a      	strb	r2, [r3, #0]
                break;
 8003c38:	bf00      	nop
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 8003c3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c3c:	3301      	adds	r3, #1
 8003c3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c42:	2b3e      	cmp	r3, #62	; 0x3e
 8003c44:	d80d      	bhi.n	8003c62 <parse_number+0x12a>
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d00a      	beq.n	8003c62 <parse_number+0x12a>
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	689a      	ldr	r2, [r3, #8]
 8003c50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c52:	441a      	add	r2, r3
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d38d      	bcc.n	8003b78 <parse_number+0x40>

            default:
                goto loop_end;
        }
    }
loop_end:
 8003c5c:	e001      	b.n	8003c62 <parse_number+0x12a>
                goto loop_end;
 8003c5e:	bf00      	nop
 8003c60:	e000      	b.n	8003c64 <parse_number+0x12c>
loop_end:
 8003c62:	bf00      	nop
    number_c_string[i] = '\0';
 8003c64:	f107 0208 	add.w	r2, r7, #8
 8003c68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c6a:	4413      	add	r3, r2
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	701a      	strb	r2, [r3, #0]

    number = strtod((const char*)number_c_string, (char**)&after_end);
 8003c70:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003c74:	f107 0308 	add.w	r3, r7, #8
 8003c78:	4611      	mov	r1, r2
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f022 fd4a 	bl	8026714 <strtod>
 8003c80:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50
    if (number_c_string == after_end)
 8003c84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c86:	f107 0308 	add.w	r3, r7, #8
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d101      	bne.n	8003c92 <parse_number+0x15a>
    {
        return false; /* parse_error */
 8003c8e:	2300      	movs	r3, #0
 8003c90:	e036      	b.n	8003d00 <parse_number+0x1c8>
    }

    item->valuedouble = number;
 8003c92:	6879      	ldr	r1, [r7, #4]
 8003c94:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003c98:	e9c1 2306 	strd	r2, r3, [r1, #24]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 8003c9c:	a31b      	add	r3, pc, #108	; (adr r3, 8003d0c <parse_number+0x1d4>)
 8003c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ca2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003ca6:	f7fc ff3d 	bl	8000b24 <__aeabi_dcmpge>
 8003caa:	4603      	mov	r3, r0
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d004      	beq.n	8003cba <parse_number+0x182>
    {
        item->valueint = INT_MAX;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003cb6:	615a      	str	r2, [r3, #20]
 8003cb8:	e015      	b.n	8003ce6 <parse_number+0x1ae>
    }
    else if (number <= (double)INT_MIN)
 8003cba:	f04f 0200 	mov.w	r2, #0
 8003cbe:	4b12      	ldr	r3, [pc, #72]	; (8003d08 <parse_number+0x1d0>)
 8003cc0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003cc4:	f7fc ff24 	bl	8000b10 <__aeabi_dcmple>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d004      	beq.n	8003cd8 <parse_number+0x1a0>
    {
        item->valueint = INT_MIN;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003cd4:	615a      	str	r2, [r3, #20]
 8003cd6:	e006      	b.n	8003ce6 <parse_number+0x1ae>
    }
    else
    {
        item->valueint = (int)number;
 8003cd8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003cdc:	f7fc ff4c 	bl	8000b78 <__aeabi_d2iz>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	615a      	str	r2, [r3, #20]
    }

    item->type = cJSON_Number;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2208      	movs	r2, #8
 8003cea:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003cf2:	f107 0208 	add.w	r2, r7, #8
 8003cf6:	1a8a      	subs	r2, r1, r2
 8003cf8:	441a      	add	r2, r3
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	609a      	str	r2, [r3, #8]
    return true;
 8003cfe:	2301      	movs	r3, #1
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3760      	adds	r7, #96	; 0x60
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	c1e00000 	.word	0xc1e00000
 8003d0c:	ffc00000 	.word	0xffc00000
 8003d10:	41dfffff 	.word	0x41dfffff

08003d14 <ensure>:
    internal_hooks hooks;
} printbuffer;

/* realloc printbuffer if necessary to have at least "needed" bytes more */
static unsigned char* ensure(printbuffer * const p, size_t needed)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b084      	sub	sp, #16
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	6039      	str	r1, [r7, #0]
    unsigned char *newbuffer = NULL;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	60fb      	str	r3, [r7, #12]
    size_t newsize = 0;
 8003d22:	2300      	movs	r3, #0
 8003d24:	60bb      	str	r3, [r7, #8]

    if ((p == NULL) || (p->buffer == NULL))
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d003      	beq.n	8003d34 <ensure+0x20>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d101      	bne.n	8003d38 <ensure+0x24>
    {
        return NULL;
 8003d34:	2300      	movs	r3, #0
 8003d36:	e086      	b.n	8003e46 <ensure+0x132>
    }

    if ((p->length > 0) && (p->offset >= p->length))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d007      	beq.n	8003d50 <ensure+0x3c>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	689a      	ldr	r2, [r3, #8]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d301      	bcc.n	8003d50 <ensure+0x3c>
    {
        /* make sure that offset is valid */
        return NULL;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	e07a      	b.n	8003e46 <ensure+0x132>
    }

    if (needed > INT_MAX)
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	da01      	bge.n	8003d5a <ensure+0x46>
    {
        /* sizes bigger than INT_MAX are currently not supported */
        return NULL;
 8003d56:	2300      	movs	r3, #0
 8003d58:	e075      	b.n	8003e46 <ensure+0x132>
    }

    needed += p->offset + 1;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	689a      	ldr	r2, [r3, #8]
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	4413      	add	r3, r2
 8003d62:	3301      	adds	r3, #1
 8003d64:	603b      	str	r3, [r7, #0]
    if (needed <= p->length)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	683a      	ldr	r2, [r7, #0]
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d805      	bhi.n	8003d7c <ensure+0x68>
    {
        return p->buffer + p->offset;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	4413      	add	r3, r2
 8003d7a:	e064      	b.n	8003e46 <ensure+0x132>
    }

    if (p->noalloc) {
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	691b      	ldr	r3, [r3, #16]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d001      	beq.n	8003d88 <ensure+0x74>
        return NULL;
 8003d84:	2300      	movs	r3, #0
 8003d86:	e05e      	b.n	8003e46 <ensure+0x132>
    }

    /* calculate new buffer size */
    if (needed > (INT_MAX / 2))
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d8e:	d308      	bcc.n	8003da2 <ensure+0x8e>
    {
        /* overflow of int, use INT_MAX if possible */
        if (needed <= INT_MAX)
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	db03      	blt.n	8003d9e <ensure+0x8a>
        {
            newsize = INT_MAX;
 8003d96:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8003d9a:	60bb      	str	r3, [r7, #8]
 8003d9c:	e004      	b.n	8003da8 <ensure+0x94>
        }
        else
        {
            return NULL;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	e051      	b.n	8003e46 <ensure+0x132>
        }
    }
    else
    {
        newsize = needed * 2;
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	005b      	lsls	r3, r3, #1
 8003da6:	60bb      	str	r3, [r7, #8]
    }

    if (p->hooks.reallocate != NULL)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a1b      	ldr	r3, [r3, #32]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d018      	beq.n	8003de2 <ensure+0xce>
    {
        /* reallocate with realloc if available */
        newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6a1b      	ldr	r3, [r3, #32]
 8003db4:	687a      	ldr	r2, [r7, #4]
 8003db6:	6812      	ldr	r2, [r2, #0]
 8003db8:	68b9      	ldr	r1, [r7, #8]
 8003dba:	4610      	mov	r0, r2
 8003dbc:	4798      	blx	r3
 8003dbe:	60f8      	str	r0, [r7, #12]
        if (newbuffer == NULL)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d135      	bne.n	8003e32 <ensure+0x11e>
        {
            p->hooks.deallocate(p->buffer);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	69db      	ldr	r3, [r3, #28]
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	6812      	ldr	r2, [r2, #0]
 8003dce:	4610      	mov	r0, r2
 8003dd0:	4798      	blx	r3
            p->length = 0;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	601a      	str	r2, [r3, #0]

            return NULL;
 8003dde:	2300      	movs	r3, #0
 8003de0:	e031      	b.n	8003e46 <ensure+0x132>
        }
    }
    else
    {
        /* otherwise reallocate manually */
        newbuffer = (unsigned char*)p->hooks.allocate(newsize);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	699b      	ldr	r3, [r3, #24]
 8003de6:	68b8      	ldr	r0, [r7, #8]
 8003de8:	4798      	blx	r3
 8003dea:	60f8      	str	r0, [r7, #12]
        if (!newbuffer)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d10d      	bne.n	8003e0e <ensure+0xfa>
        {
            p->hooks.deallocate(p->buffer);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	69db      	ldr	r3, [r3, #28]
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	6812      	ldr	r2, [r2, #0]
 8003dfa:	4610      	mov	r0, r2
 8003dfc:	4798      	blx	r3
            p->length = 0;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	601a      	str	r2, [r3, #0]

            return NULL;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	e01b      	b.n	8003e46 <ensure+0x132>
        }
        if (newbuffer)
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d008      	beq.n	8003e26 <ensure+0x112>
        {
            memcpy(newbuffer, p->buffer, p->offset + 1);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6819      	ldr	r1, [r3, #0]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	3301      	adds	r3, #1
 8003e1e:	461a      	mov	r2, r3
 8003e20:	68f8      	ldr	r0, [r7, #12]
 8003e22:	f020 fdef 	bl	8024a04 <memcpy>
        }
        p->hooks.deallocate(p->buffer);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	69db      	ldr	r3, [r3, #28]
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	6812      	ldr	r2, [r2, #0]
 8003e2e:	4610      	mov	r0, r2
 8003e30:	4798      	blx	r3
    }
    p->length = newsize;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	68ba      	ldr	r2, [r7, #8]
 8003e36:	605a      	str	r2, [r3, #4]
    p->buffer = newbuffer;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	68fa      	ldr	r2, [r7, #12]
 8003e3c:	601a      	str	r2, [r3, #0]

    return newbuffer + p->offset;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	68fa      	ldr	r2, [r7, #12]
 8003e44:	4413      	add	r3, r2
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3710      	adds	r7, #16
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}

08003e4e <update_offset>:

/* calculate the new length of the string in a printbuffer and update the offset */
static void update_offset(printbuffer * const buffer)
{
 8003e4e:	b590      	push	{r4, r7, lr}
 8003e50:	b085      	sub	sp, #20
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
    const unsigned char *buffer_pointer = NULL;
 8003e56:	2300      	movs	r3, #0
 8003e58:	60fb      	str	r3, [r7, #12]
    if ((buffer == NULL) || (buffer->buffer == NULL))
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d013      	beq.n	8003e88 <update_offset+0x3a>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d00f      	beq.n	8003e88 <update_offset+0x3a>
    {
        return;
    }
    buffer_pointer = buffer->buffer + buffer->offset;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	4413      	add	r3, r2
 8003e72:	60fb      	str	r3, [r7, #12]

    buffer->offset += strlen((const char*)buffer_pointer);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	689c      	ldr	r4, [r3, #8]
 8003e78:	68f8      	ldr	r0, [r7, #12]
 8003e7a:	f7fc f9b3 	bl	80001e4 <strlen>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	18e2      	adds	r2, r4, r3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	609a      	str	r2, [r3, #8]
 8003e86:	e000      	b.n	8003e8a <update_offset+0x3c>
        return;
 8003e88:	bf00      	nop
}
 8003e8a:	3714      	adds	r7, #20
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd90      	pop	{r4, r7, pc}

08003e90 <compare_double>:

/* securely comparison of floating-point variables */
static cJSON_bool compare_double(double a, double b)
{
 8003e90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003e94:	b087      	sub	sp, #28
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	ed87 0b02 	vstr	d0, [r7, #8]
 8003e9c:	ed87 1b00 	vstr	d1, [r7]
    double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);
 8003ea0:	68b8      	ldr	r0, [r7, #8]
 8003ea2:	68fe      	ldr	r6, [r7, #12]
 8003ea4:	f026 4100 	bic.w	r1, r6, #2147483648	; 0x80000000
 8003ea8:	683a      	ldr	r2, [r7, #0]
 8003eaa:	687e      	ldr	r6, [r7, #4]
 8003eac:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8003eb0:	f7fc fe42 	bl	8000b38 <__aeabi_dcmpgt>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d004      	beq.n	8003ec4 <compare_double+0x34>
 8003eba:	68bc      	ldr	r4, [r7, #8]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8003ec2:	e003      	b.n	8003ecc <compare_double+0x3c>
 8003ec4:	683c      	ldr	r4, [r7, #0]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8003ecc:	e9c7 4504 	strd	r4, r5, [r7, #16]
    return (fabs(a - b) <= maxVal * DBL_EPSILON);
 8003ed0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ed4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003ed8:	f7fc f9e6 	bl	80002a8 <__aeabi_dsub>
 8003edc:	4602      	mov	r2, r0
 8003ede:	460b      	mov	r3, r1
 8003ee0:	4690      	mov	r8, r2
 8003ee2:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8003ee6:	f04f 0200 	mov.w	r2, #0
 8003eea:	4b0c      	ldr	r3, [pc, #48]	; (8003f1c <compare_double+0x8c>)
 8003eec:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003ef0:	f7fc fb92 	bl	8000618 <__aeabi_dmul>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	460b      	mov	r3, r1
 8003ef8:	2101      	movs	r1, #1
 8003efa:	460c      	mov	r4, r1
 8003efc:	4640      	mov	r0, r8
 8003efe:	4649      	mov	r1, r9
 8003f00:	f7fc fe06 	bl	8000b10 <__aeabi_dcmple>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d101      	bne.n	8003f0e <compare_double+0x7e>
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	461c      	mov	r4, r3
 8003f0e:	b2e3      	uxtb	r3, r4
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	371c      	adds	r7, #28
 8003f14:	46bd      	mov	sp, r7
 8003f16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003f1a:	bf00      	nop
 8003f1c:	3cb00000 	.word	0x3cb00000

08003f20 <print_number>:

/* Render the number nicely from the given item into a string. */
static cJSON_bool print_number(const cJSON * const item, printbuffer * const output_buffer)
{
 8003f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f22:	b093      	sub	sp, #76	; 0x4c
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	63fb      	str	r3, [r7, #60]	; 0x3c
    double d = item->valuedouble;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003f34:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    int length = 0;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	647b      	str	r3, [r7, #68]	; 0x44
    size_t i = 0;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	643b      	str	r3, [r7, #64]	; 0x40
    unsigned char number_buffer[26] = {0}; /* temporary buffer to print the number into */
 8003f40:	2300      	movs	r3, #0
 8003f42:	617b      	str	r3, [r7, #20]
 8003f44:	f107 0318 	add.w	r3, r7, #24
 8003f48:	2200      	movs	r2, #0
 8003f4a:	601a      	str	r2, [r3, #0]
 8003f4c:	605a      	str	r2, [r3, #4]
 8003f4e:	609a      	str	r2, [r3, #8]
 8003f50:	60da      	str	r2, [r3, #12]
 8003f52:	611a      	str	r2, [r3, #16]
 8003f54:	829a      	strh	r2, [r3, #20]
    unsigned char decimal_point = get_decimal_point();
 8003f56:	f7ff fde5 	bl	8003b24 <get_decimal_point>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    double test = 0.0;
 8003f60:	f04f 0200 	mov.w	r2, #0
 8003f64:	f04f 0300 	mov.w	r3, #0
 8003f68:	e9c7 2302 	strd	r2, r3, [r7, #8]

    if (output_buffer == NULL)
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d101      	bne.n	8003f76 <print_number+0x56>
    {
        return false;
 8003f72:	2300      	movs	r3, #0
 8003f74:	e09c      	b.n	80040b0 <print_number+0x190>
    }

    /* This checks for NaN and Infinity */
    if (isnan(d) || isinf(d))
 8003f76:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003f7a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003f7e:	f7fc fde5 	bl	8000b4c <__aeabi_dcmpun>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d121      	bne.n	8003fcc <print_number+0xac>
 8003f88:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 8003f8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f8c:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8003f90:	2301      	movs	r3, #1
 8003f92:	461e      	mov	r6, r3
 8003f94:	f04f 32ff 	mov.w	r2, #4294967295
 8003f98:	4b47      	ldr	r3, [pc, #284]	; (80040b8 <print_number+0x198>)
 8003f9a:	4620      	mov	r0, r4
 8003f9c:	4629      	mov	r1, r5
 8003f9e:	f7fc fdd5 	bl	8000b4c <__aeabi_dcmpun>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d10b      	bne.n	8003fc0 <print_number+0xa0>
 8003fa8:	f04f 32ff 	mov.w	r2, #4294967295
 8003fac:	4b42      	ldr	r3, [pc, #264]	; (80040b8 <print_number+0x198>)
 8003fae:	4620      	mov	r0, r4
 8003fb0:	4629      	mov	r1, r5
 8003fb2:	f7fc fdad 	bl	8000b10 <__aeabi_dcmple>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d101      	bne.n	8003fc0 <print_number+0xa0>
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	461e      	mov	r6, r3
 8003fc0:	b2f3      	uxtb	r3, r6
 8003fc2:	f083 0301 	eor.w	r3, r3, #1
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d007      	beq.n	8003fdc <print_number+0xbc>
    {
        length = sprintf((char*)number_buffer, "null");
 8003fcc:	f107 0314 	add.w	r3, r7, #20
 8003fd0:	493a      	ldr	r1, [pc, #232]	; (80040bc <print_number+0x19c>)
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f021 fcce 	bl	8025974 <siprintf>
 8003fd8:	6478      	str	r0, [r7, #68]	; 0x44
 8003fda:	e027      	b.n	800402c <print_number+0x10c>
    }
    else
    {
        /* Try 15 decimal places of precision to avoid nonsignificant nonzero digits */
        length = sprintf((char*)number_buffer, "%1.15g", d);
 8003fdc:	f107 0014 	add.w	r0, r7, #20
 8003fe0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003fe4:	4936      	ldr	r1, [pc, #216]	; (80040c0 <print_number+0x1a0>)
 8003fe6:	f021 fcc5 	bl	8025974 <siprintf>
 8003fea:	6478      	str	r0, [r7, #68]	; 0x44

        /* Check whether the original double can be recovered */
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || !compare_double((double)test, d))
 8003fec:	f107 0208 	add.w	r2, r7, #8
 8003ff0:	f107 0314 	add.w	r3, r7, #20
 8003ff4:	4933      	ldr	r1, [pc, #204]	; (80040c4 <print_number+0x1a4>)
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f021 fcdc 	bl	80259b4 <siscanf>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d10c      	bne.n	800401c <print_number+0xfc>
 8004002:	ed97 7b02 	vldr	d7, [r7, #8]
 8004006:	ed97 1b0c 	vldr	d1, [r7, #48]	; 0x30
 800400a:	eeb0 0a47 	vmov.f32	s0, s14
 800400e:	eef0 0a67 	vmov.f32	s1, s15
 8004012:	f7ff ff3d 	bl	8003e90 <compare_double>
 8004016:	4603      	mov	r3, r0
 8004018:	2b00      	cmp	r3, #0
 800401a:	d107      	bne.n	800402c <print_number+0x10c>
        {
            /* If not, print with 17 decimal places of precision */
            length = sprintf((char*)number_buffer, "%1.17g", d);
 800401c:	f107 0014 	add.w	r0, r7, #20
 8004020:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004024:	4928      	ldr	r1, [pc, #160]	; (80040c8 <print_number+0x1a8>)
 8004026:	f021 fca5 	bl	8025974 <siprintf>
 800402a:	6478      	str	r0, [r7, #68]	; 0x44
        }
    }

    /* sprintf failed or buffer overrun occurred */
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
 800402c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800402e:	2b00      	cmp	r3, #0
 8004030:	db02      	blt.n	8004038 <print_number+0x118>
 8004032:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004034:	2b19      	cmp	r3, #25
 8004036:	dd01      	ble.n	800403c <print_number+0x11c>
    {
        return false;
 8004038:	2300      	movs	r3, #0
 800403a:	e039      	b.n	80040b0 <print_number+0x190>
    }

    /* reserve appropriate space in the output */
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
 800403c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800403e:	3301      	adds	r3, #1
 8004040:	4619      	mov	r1, r3
 8004042:	6838      	ldr	r0, [r7, #0]
 8004044:	f7ff fe66 	bl	8003d14 <ensure>
 8004048:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (output_pointer == NULL)
 800404a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800404c:	2b00      	cmp	r3, #0
 800404e:	d101      	bne.n	8004054 <print_number+0x134>
    {
        return false;
 8004050:	2300      	movs	r3, #0
 8004052:	e02d      	b.n	80040b0 <print_number+0x190>
    }

    /* copy the printed number to the output and replace locale
     * dependent decimal point with '.' */
    for (i = 0; i < ((size_t)length); i++)
 8004054:	2300      	movs	r3, #0
 8004056:	643b      	str	r3, [r7, #64]	; 0x40
 8004058:	e01a      	b.n	8004090 <print_number+0x170>
    {
        if (number_buffer[i] == decimal_point)
 800405a:	f107 0214 	add.w	r2, r7, #20
 800405e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004060:	4413      	add	r3, r2
 8004062:	781b      	ldrb	r3, [r3, #0]
 8004064:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8004068:	429a      	cmp	r2, r3
 800406a:	d105      	bne.n	8004078 <print_number+0x158>
        {
            output_pointer[i] = '.';
 800406c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800406e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004070:	4413      	add	r3, r2
 8004072:	222e      	movs	r2, #46	; 0x2e
 8004074:	701a      	strb	r2, [r3, #0]
            continue;
 8004076:	e008      	b.n	800408a <print_number+0x16a>
        }

        output_pointer[i] = number_buffer[i];
 8004078:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800407a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800407c:	4413      	add	r3, r2
 800407e:	f107 0114 	add.w	r1, r7, #20
 8004082:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004084:	440a      	add	r2, r1
 8004086:	7812      	ldrb	r2, [r2, #0]
 8004088:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < ((size_t)length); i++)
 800408a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800408c:	3301      	adds	r3, #1
 800408e:	643b      	str	r3, [r7, #64]	; 0x40
 8004090:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004092:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004094:	429a      	cmp	r2, r3
 8004096:	d3e0      	bcc.n	800405a <print_number+0x13a>
    }
    output_pointer[i] = '\0';
 8004098:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800409a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800409c:	4413      	add	r3, r2
 800409e:	2200      	movs	r2, #0
 80040a0:	701a      	strb	r2, [r3, #0]

    output_buffer->offset += (size_t)length;
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	689a      	ldr	r2, [r3, #8]
 80040a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040a8:	441a      	add	r2, r3
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	609a      	str	r2, [r3, #8]

    return true;
 80040ae:	2301      	movs	r3, #1
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	374c      	adds	r7, #76	; 0x4c
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040b8:	7fefffff 	.word	0x7fefffff
 80040bc:	08029994 	.word	0x08029994
 80040c0:	0802999c 	.word	0x0802999c
 80040c4:	080299a4 	.word	0x080299a4
 80040c8:	080299a8 	.word	0x080299a8

080040cc <parse_hex4>:

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b085      	sub	sp, #20
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 80040d4:	2300      	movs	r3, #0
 80040d6:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 80040d8:	2300      	movs	r3, #0
 80040da:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 80040dc:	2300      	movs	r3, #0
 80040de:	60bb      	str	r3, [r7, #8]
 80040e0:	e04c      	b.n	800417c <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	4413      	add	r3, r2
 80040e8:	781b      	ldrb	r3, [r3, #0]
 80040ea:	2b2f      	cmp	r3, #47	; 0x2f
 80040ec:	d90f      	bls.n	800410e <parse_hex4+0x42>
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	4413      	add	r3, r2
 80040f4:	781b      	ldrb	r3, [r3, #0]
 80040f6:	2b39      	cmp	r3, #57	; 0x39
 80040f8:	d809      	bhi.n	800410e <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	4413      	add	r3, r2
 8004100:	781b      	ldrb	r3, [r3, #0]
 8004102:	461a      	mov	r2, r3
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	4413      	add	r3, r2
 8004108:	3b30      	subs	r3, #48	; 0x30
 800410a:	60fb      	str	r3, [r7, #12]
 800410c:	e02d      	b.n	800416a <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	4413      	add	r3, r2
 8004114:	781b      	ldrb	r3, [r3, #0]
 8004116:	2b40      	cmp	r3, #64	; 0x40
 8004118:	d90f      	bls.n	800413a <parse_hex4+0x6e>
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	4413      	add	r3, r2
 8004120:	781b      	ldrb	r3, [r3, #0]
 8004122:	2b46      	cmp	r3, #70	; 0x46
 8004124:	d809      	bhi.n	800413a <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	4413      	add	r3, r2
 800412c:	781b      	ldrb	r3, [r3, #0]
 800412e:	461a      	mov	r2, r3
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	4413      	add	r3, r2
 8004134:	3b37      	subs	r3, #55	; 0x37
 8004136:	60fb      	str	r3, [r7, #12]
 8004138:	e017      	b.n	800416a <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	4413      	add	r3, r2
 8004140:	781b      	ldrb	r3, [r3, #0]
 8004142:	2b60      	cmp	r3, #96	; 0x60
 8004144:	d90f      	bls.n	8004166 <parse_hex4+0x9a>
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	4413      	add	r3, r2
 800414c:	781b      	ldrb	r3, [r3, #0]
 800414e:	2b66      	cmp	r3, #102	; 0x66
 8004150:	d809      	bhi.n	8004166 <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	4413      	add	r3, r2
 8004158:	781b      	ldrb	r3, [r3, #0]
 800415a:	461a      	mov	r2, r3
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	4413      	add	r3, r2
 8004160:	3b57      	subs	r3, #87	; 0x57
 8004162:	60fb      	str	r3, [r7, #12]
 8004164:	e001      	b.n	800416a <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 8004166:	2300      	movs	r3, #0
 8004168:	e00c      	b.n	8004184 <parse_hex4+0xb8>
        }

        if (i < 3)
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	2b02      	cmp	r3, #2
 800416e:	d802      	bhi.n	8004176 <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	011b      	lsls	r3, r3, #4
 8004174:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	3301      	adds	r3, #1
 800417a:	60bb      	str	r3, [r7, #8]
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	2b03      	cmp	r3, #3
 8004180:	d9af      	bls.n	80040e2 <parse_hex4+0x16>
        }
    }

    return h;
 8004182:	68fb      	ldr	r3, [r7, #12]
}
 8004184:	4618      	mov	r0, r3
 8004186:	3714      	adds	r7, #20
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr

08004190 <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b08a      	sub	sp, #40	; 0x28
 8004194:	af00      	add	r7, sp, #0
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	60b9      	str	r1, [r7, #8]
 800419a:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 800419c:	2300      	movs	r3, #0
 800419e:	627b      	str	r3, [r7, #36]	; 0x24
    unsigned int first_code = 0;
 80041a0:	2300      	movs	r3, #0
 80041a2:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 80041a8:	2300      	movs	r3, #0
 80041aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    unsigned char utf8_position = 0;
 80041ae:	2300      	movs	r3, #0
 80041b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    unsigned char sequence_length = 0;
 80041b4:	2300      	movs	r3, #0
 80041b6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    unsigned char first_byte_mark = 0;
 80041ba:	2300      	movs	r3, #0
 80041bc:	f887 3020 	strb.w	r3, [r7, #32]

    if ((input_end - first_sequence) < 6)
 80041c0:	68ba      	ldr	r2, [r7, #8]
 80041c2:	69bb      	ldr	r3, [r7, #24]
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	2b05      	cmp	r3, #5
 80041c8:	f340 80b7 	ble.w	800433a <utf16_literal_to_utf8+0x1aa>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 80041cc:	69bb      	ldr	r3, [r7, #24]
 80041ce:	3302      	adds	r3, #2
 80041d0:	4618      	mov	r0, r3
 80041d2:	f7ff ff7b 	bl	80040cc <parse_hex4>
 80041d6:	61f8      	str	r0, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 80041d8:	69fb      	ldr	r3, [r7, #28]
 80041da:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 80041de:	d304      	bcc.n	80041ea <utf16_literal_to_utf8+0x5a>
 80041e0:	69fb      	ldr	r3, [r7, #28]
 80041e2:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 80041e6:	f0c0 80aa 	bcc.w	800433e <utf16_literal_to_utf8+0x1ae>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 80041ea:	69fb      	ldr	r3, [r7, #28]
 80041ec:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 80041f0:	d337      	bcc.n	8004262 <utf16_literal_to_utf8+0xd2>
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 80041f8:	d233      	bcs.n	8004262 <utf16_literal_to_utf8+0xd2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	3306      	adds	r3, #6
 80041fe:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 8004200:	2300      	movs	r3, #0
 8004202:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 8004204:	230c      	movs	r3, #12
 8004206:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

        if ((input_end - second_sequence) < 6)
 800420a:	68ba      	ldr	r2, [r7, #8]
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	2b05      	cmp	r3, #5
 8004212:	f340 8096 	ble.w	8004342 <utf16_literal_to_utf8+0x1b2>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	2b5c      	cmp	r3, #92	; 0x5c
 800421c:	f040 8093 	bne.w	8004346 <utf16_literal_to_utf8+0x1b6>
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	3301      	adds	r3, #1
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	2b75      	cmp	r3, #117	; 0x75
 8004228:	f040 808d 	bne.w	8004346 <utf16_literal_to_utf8+0x1b6>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	3302      	adds	r3, #2
 8004230:	4618      	mov	r0, r3
 8004232:	f7ff ff4b 	bl	80040cc <parse_hex4>
 8004236:	6138      	str	r0, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 800423e:	f0c0 8084 	bcc.w	800434a <utf16_literal_to_utf8+0x1ba>
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 8004248:	d27f      	bcs.n	800434a <utf16_literal_to_utf8+0x1ba>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	029a      	lsls	r2, r3, #10
 800424e:	4b43      	ldr	r3, [pc, #268]	; (800435c <utf16_literal_to_utf8+0x1cc>)
 8004250:	4013      	ands	r3, r2
 8004252:	693a      	ldr	r2, [r7, #16]
 8004254:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004258:	4313      	orrs	r3, r2
 800425a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800425e:	627b      	str	r3, [r7, #36]	; 0x24
    {
 8004260:	e004      	b.n	800426c <utf16_literal_to_utf8+0xdc>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 8004262:	2306      	movs	r3, #6
 8004264:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        codepoint = first_code;
 8004268:	69fb      	ldr	r3, [r7, #28]
 800426a:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 800426c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426e:	2b7f      	cmp	r3, #127	; 0x7f
 8004270:	d803      	bhi.n	800427a <utf16_literal_to_utf8+0xea>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 8004272:	2301      	movs	r3, #1
 8004274:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004278:	e01f      	b.n	80042ba <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x800)
 800427a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004280:	d206      	bcs.n	8004290 <utf16_literal_to_utf8+0x100>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 8004282:	2302      	movs	r3, #2
 8004284:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xC0; /* 11000000 */
 8004288:	23c0      	movs	r3, #192	; 0xc0
 800428a:	f887 3020 	strb.w	r3, [r7, #32]
 800428e:	e014      	b.n	80042ba <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x10000)
 8004290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004292:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004296:	d206      	bcs.n	80042a6 <utf16_literal_to_utf8+0x116>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 8004298:	2303      	movs	r3, #3
 800429a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xE0; /* 11100000 */
 800429e:	23e0      	movs	r3, #224	; 0xe0
 80042a0:	f887 3020 	strb.w	r3, [r7, #32]
 80042a4:	e009      	b.n	80042ba <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint <= 0x10FFFF)
 80042a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a8:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 80042ac:	d24f      	bcs.n	800434e <utf16_literal_to_utf8+0x1be>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 80042ae:	2304      	movs	r3, #4
 80042b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xF0; /* 11110000 */
 80042b4:	23f0      	movs	r3, #240	; 0xf0
 80042b6:	f887 3020 	strb.w	r3, [r7, #32]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 80042ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80042be:	3b01      	subs	r3, #1
 80042c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80042c4:	e015      	b.n	80042f2 <utf16_literal_to_utf8+0x162>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 80042c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042ce:	b2da      	uxtb	r2, r3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6819      	ldr	r1, [r3, #0]
 80042d4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80042d8:	440b      	add	r3, r1
 80042da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80042de:	b2d2      	uxtb	r2, r2
 80042e0:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 80042e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e4:	099b      	lsrs	r3, r3, #6
 80042e6:	627b      	str	r3, [r7, #36]	; 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 80042e8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80042ec:	3b01      	subs	r3, #1
 80042ee:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80042f2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d1e5      	bne.n	80042c6 <utf16_literal_to_utf8+0x136>
    }
    /* encode first byte */
    if (utf8_length > 1)
 80042fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d909      	bls.n	8004316 <utf16_literal_to_utf8+0x186>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 8004302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004304:	b2d9      	uxtb	r1, r3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800430e:	430a      	orrs	r2, r1
 8004310:	b2d2      	uxtb	r2, r2
 8004312:	701a      	strb	r2, [r3, #0]
 8004314:	e007      	b.n	8004326 <utf16_literal_to_utf8+0x196>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 8004316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004318:	b2da      	uxtb	r2, r3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004322:	b2d2      	uxtb	r2, r2
 8004324:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800432e:	441a      	add	r2, r3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	601a      	str	r2, [r3, #0]

    return sequence_length;
 8004334:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8004338:	e00b      	b.n	8004352 <utf16_literal_to_utf8+0x1c2>
        goto fail;
 800433a:	bf00      	nop
 800433c:	e008      	b.n	8004350 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 800433e:	bf00      	nop
 8004340:	e006      	b.n	8004350 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 8004342:	bf00      	nop
 8004344:	e004      	b.n	8004350 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 8004346:	bf00      	nop
 8004348:	e002      	b.n	8004350 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 800434a:	bf00      	nop
 800434c:	e000      	b.n	8004350 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 800434e:	bf00      	nop

fail:
    return 0;
 8004350:	2300      	movs	r3, #0
}
 8004352:	4618      	mov	r0, r3
 8004354:	3728      	adds	r7, #40	; 0x28
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
 800435a:	bf00      	nop
 800435c:	000ffc00 	.word	0x000ffc00

08004360 <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b08a      	sub	sp, #40	; 0x28
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	3301      	adds	r3, #1
 8004374:	4413      	add	r3, r2
 8004376:	627b      	str	r3, [r7, #36]	; 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	3301      	adds	r3, #1
 8004382:	4413      	add	r3, r2
 8004384:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 8004386:	2300      	movs	r3, #0
 8004388:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 800438a:	2300      	movs	r3, #0
 800438c:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	4413      	add	r3, r2
 8004398:	781b      	ldrb	r3, [r3, #0]
 800439a:	2b22      	cmp	r3, #34	; 0x22
 800439c:	f040 8102 	bne.w	80045a4 <parse_string+0x244>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 80043a0:	2300      	movs	r3, #0
 80043a2:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 80043a4:	2300      	movs	r3, #0
 80043a6:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 80043a8:	e017      	b.n	80043da <parse_string+0x7a>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 80043aa:	6a3b      	ldr	r3, [r7, #32]
 80043ac:	781b      	ldrb	r3, [r3, #0]
 80043ae:	2b5c      	cmp	r3, #92	; 0x5c
 80043b0:	d110      	bne.n	80043d4 <parse_string+0x74>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 80043b2:	6a3b      	ldr	r3, [r7, #32]
 80043b4:	1c5a      	adds	r2, r3, #1
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	1ad3      	subs	r3, r2, r3
 80043bc:	461a      	mov	r2, r3
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	429a      	cmp	r2, r3
 80043c4:	f080 80f0 	bcs.w	80045a8 <parse_string+0x248>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 80043c8:	69bb      	ldr	r3, [r7, #24]
 80043ca:	3301      	adds	r3, #1
 80043cc:	61bb      	str	r3, [r7, #24]
                input_end++;
 80043ce:	6a3b      	ldr	r3, [r7, #32]
 80043d0:	3301      	adds	r3, #1
 80043d2:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 80043d4:	6a3b      	ldr	r3, [r7, #32]
 80043d6:	3301      	adds	r3, #1
 80043d8:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	6a3a      	ldr	r2, [r7, #32]
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	461a      	mov	r2, r3
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d203      	bcs.n	80043f4 <parse_string+0x94>
 80043ec:	6a3b      	ldr	r3, [r7, #32]
 80043ee:	781b      	ldrb	r3, [r3, #0]
 80043f0:	2b22      	cmp	r3, #34	; 0x22
 80043f2:	d1da      	bne.n	80043aa <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	6a3a      	ldr	r2, [r7, #32]
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	461a      	mov	r2, r3
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	429a      	cmp	r2, r3
 8004404:	f080 80d2 	bcs.w	80045ac <parse_string+0x24c>
 8004408:	6a3b      	ldr	r3, [r7, #32]
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	2b22      	cmp	r3, #34	; 0x22
 800440e:	f040 80cd 	bne.w	80045ac <parse_string+0x24c>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	4413      	add	r3, r2
 800441c:	6a3a      	ldr	r2, [r7, #32]
 800441e:	1ad3      	subs	r3, r2, r3
 8004420:	461a      	mov	r2, r3
 8004422:	69bb      	ldr	r3, [r7, #24]
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	691b      	ldr	r3, [r3, #16]
 800442c:	693a      	ldr	r2, [r7, #16]
 800442e:	3201      	adds	r2, #1
 8004430:	4610      	mov	r0, r2
 8004432:	4798      	blx	r3
 8004434:	61f8      	str	r0, [r7, #28]
        if (output == NULL)
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	2b00      	cmp	r3, #0
 800443a:	f000 80b9 	beq.w	80045b0 <parse_string+0x250>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 8004442:	e093      	b.n	800456c <parse_string+0x20c>
    {
        if (*input_pointer != '\\')
 8004444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004446:	781b      	ldrb	r3, [r3, #0]
 8004448:	2b5c      	cmp	r3, #92	; 0x5c
 800444a:	d008      	beq.n	800445e <parse_string+0xfe>
        {
            *output_pointer++ = *input_pointer++;
 800444c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800444e:	1c53      	adds	r3, r2, #1
 8004450:	627b      	str	r3, [r7, #36]	; 0x24
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	1c59      	adds	r1, r3, #1
 8004456:	60f9      	str	r1, [r7, #12]
 8004458:	7812      	ldrb	r2, [r2, #0]
 800445a:	701a      	strb	r2, [r3, #0]
 800445c:	e086      	b.n	800456c <parse_string+0x20c>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 800445e:	2302      	movs	r3, #2
 8004460:	75fb      	strb	r3, [r7, #23]
            if ((input_end - input_pointer) < 1)
 8004462:	6a3a      	ldr	r2, [r7, #32]
 8004464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	2b00      	cmp	r3, #0
 800446a:	f340 80a3 	ble.w	80045b4 <parse_string+0x254>
            {
                goto fail;
            }

            switch (input_pointer[1])
 800446e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004470:	3301      	adds	r3, #1
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	2b75      	cmp	r3, #117	; 0x75
 8004476:	f300 809f 	bgt.w	80045b8 <parse_string+0x258>
 800447a:	2b5c      	cmp	r3, #92	; 0x5c
 800447c:	da04      	bge.n	8004488 <parse_string+0x128>
 800447e:	2b22      	cmp	r3, #34	; 0x22
 8004480:	d05c      	beq.n	800453c <parse_string+0x1dc>
 8004482:	2b2f      	cmp	r3, #47	; 0x2f
 8004484:	d05a      	beq.n	800453c <parse_string+0x1dc>
                        goto fail;
                    }
                    break;

                default:
                    goto fail;
 8004486:	e097      	b.n	80045b8 <parse_string+0x258>
            switch (input_pointer[1])
 8004488:	3b5c      	subs	r3, #92	; 0x5c
 800448a:	2b19      	cmp	r3, #25
 800448c:	f200 8094 	bhi.w	80045b8 <parse_string+0x258>
 8004490:	a201      	add	r2, pc, #4	; (adr r2, 8004498 <parse_string+0x138>)
 8004492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004496:	bf00      	nop
 8004498:	0800453d 	.word	0x0800453d
 800449c:	080045b9 	.word	0x080045b9
 80044a0:	080045b9 	.word	0x080045b9
 80044a4:	080045b9 	.word	0x080045b9
 80044a8:	080045b9 	.word	0x080045b9
 80044ac:	080045b9 	.word	0x080045b9
 80044b0:	08004501 	.word	0x08004501
 80044b4:	080045b9 	.word	0x080045b9
 80044b8:	080045b9 	.word	0x080045b9
 80044bc:	080045b9 	.word	0x080045b9
 80044c0:	0800450d 	.word	0x0800450d
 80044c4:	080045b9 	.word	0x080045b9
 80044c8:	080045b9 	.word	0x080045b9
 80044cc:	080045b9 	.word	0x080045b9
 80044d0:	080045b9 	.word	0x080045b9
 80044d4:	080045b9 	.word	0x080045b9
 80044d8:	080045b9 	.word	0x080045b9
 80044dc:	080045b9 	.word	0x080045b9
 80044e0:	08004519 	.word	0x08004519
 80044e4:	080045b9 	.word	0x080045b9
 80044e8:	080045b9 	.word	0x080045b9
 80044ec:	080045b9 	.word	0x080045b9
 80044f0:	08004525 	.word	0x08004525
 80044f4:	080045b9 	.word	0x080045b9
 80044f8:	08004531 	.word	0x08004531
 80044fc:	0800454b 	.word	0x0800454b
                    *output_pointer++ = '\b';
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	1c5a      	adds	r2, r3, #1
 8004504:	60fa      	str	r2, [r7, #12]
 8004506:	2208      	movs	r2, #8
 8004508:	701a      	strb	r2, [r3, #0]
                    break;
 800450a:	e02b      	b.n	8004564 <parse_string+0x204>
                    *output_pointer++ = '\f';
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	1c5a      	adds	r2, r3, #1
 8004510:	60fa      	str	r2, [r7, #12]
 8004512:	220c      	movs	r2, #12
 8004514:	701a      	strb	r2, [r3, #0]
                    break;
 8004516:	e025      	b.n	8004564 <parse_string+0x204>
                    *output_pointer++ = '\n';
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	1c5a      	adds	r2, r3, #1
 800451c:	60fa      	str	r2, [r7, #12]
 800451e:	220a      	movs	r2, #10
 8004520:	701a      	strb	r2, [r3, #0]
                    break;
 8004522:	e01f      	b.n	8004564 <parse_string+0x204>
                    *output_pointer++ = '\r';
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	1c5a      	adds	r2, r3, #1
 8004528:	60fa      	str	r2, [r7, #12]
 800452a:	220d      	movs	r2, #13
 800452c:	701a      	strb	r2, [r3, #0]
                    break;
 800452e:	e019      	b.n	8004564 <parse_string+0x204>
                    *output_pointer++ = '\t';
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	1c5a      	adds	r2, r3, #1
 8004534:	60fa      	str	r2, [r7, #12]
 8004536:	2209      	movs	r2, #9
 8004538:	701a      	strb	r2, [r3, #0]
                    break;
 800453a:	e013      	b.n	8004564 <parse_string+0x204>
                    *output_pointer++ = input_pointer[1];
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	1c5a      	adds	r2, r3, #1
 8004540:	60fa      	str	r2, [r7, #12]
 8004542:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004544:	7852      	ldrb	r2, [r2, #1]
 8004546:	701a      	strb	r2, [r3, #0]
                    break;
 8004548:	e00c      	b.n	8004564 <parse_string+0x204>
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 800454a:	f107 030c 	add.w	r3, r7, #12
 800454e:	461a      	mov	r2, r3
 8004550:	6a39      	ldr	r1, [r7, #32]
 8004552:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004554:	f7ff fe1c 	bl	8004190 <utf16_literal_to_utf8>
 8004558:	4603      	mov	r3, r0
 800455a:	75fb      	strb	r3, [r7, #23]
                    if (sequence_length == 0)
 800455c:	7dfb      	ldrb	r3, [r7, #23]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d02c      	beq.n	80045bc <parse_string+0x25c>
                    break;
 8004562:	bf00      	nop
            }
            input_pointer += sequence_length;
 8004564:	7dfb      	ldrb	r3, [r7, #23]
 8004566:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004568:	4413      	add	r3, r2
 800456a:	627b      	str	r3, [r7, #36]	; 0x24
    while (input_pointer < input_end)
 800456c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800456e:	6a3b      	ldr	r3, [r7, #32]
 8004570:	429a      	cmp	r2, r3
 8004572:	f4ff af67 	bcc.w	8004444 <parse_string+0xe4>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2200      	movs	r2, #0
 800457a:	701a      	strb	r2, [r3, #0]

    item->type = cJSON_String;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2210      	movs	r2, #16
 8004580:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	69fa      	ldr	r2, [r7, #28]
 8004586:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	6a3a      	ldr	r2, [r7, #32]
 800458e:	1ad3      	subs	r3, r2, r3
 8004590:	461a      	mov	r2, r3
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	1c5a      	adds	r2, r3, #1
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	609a      	str	r2, [r3, #8]

    return true;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e01e      	b.n	80045e2 <parse_string+0x282>
        goto fail;
 80045a4:	bf00      	nop
 80045a6:	e00a      	b.n	80045be <parse_string+0x25e>
                    goto fail;
 80045a8:	bf00      	nop
 80045aa:	e008      	b.n	80045be <parse_string+0x25e>
            goto fail; /* string ended unexpectedly */
 80045ac:	bf00      	nop
 80045ae:	e006      	b.n	80045be <parse_string+0x25e>
            goto fail; /* allocation failure */
 80045b0:	bf00      	nop
 80045b2:	e004      	b.n	80045be <parse_string+0x25e>
                goto fail;
 80045b4:	bf00      	nop
 80045b6:	e002      	b.n	80045be <parse_string+0x25e>
                    goto fail;
 80045b8:	bf00      	nop
 80045ba:	e000      	b.n	80045be <parse_string+0x25e>
                        goto fail;
 80045bc:	bf00      	nop

fail:
    if (output != NULL)
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d003      	beq.n	80045cc <parse_string+0x26c>
    {
        input_buffer->hooks.deallocate(output);
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	695b      	ldr	r3, [r3, #20]
 80045c8:	69f8      	ldr	r0, [r7, #28]
 80045ca:	4798      	blx	r3
    }

    if (input_pointer != NULL)
 80045cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d006      	beq.n	80045e0 <parse_string+0x280>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045d8:	1ad3      	subs	r3, r2, r3
 80045da:	461a      	mov	r2, r3
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	609a      	str	r2, [r3, #8]
    }

    return false;
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3728      	adds	r7, #40	; 0x28
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop

080045ec <print_string_ptr>:

/* Render the cstring provided to an escaped version that can be printed. */
static cJSON_bool print_string_ptr(const unsigned char * const input, printbuffer * const output_buffer)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b088      	sub	sp, #32
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = NULL;
 80045f6:	2300      	movs	r3, #0
 80045f8:	61fb      	str	r3, [r7, #28]
    unsigned char *output = NULL;
 80045fa:	2300      	movs	r3, #0
 80045fc:	613b      	str	r3, [r7, #16]
    unsigned char *output_pointer = NULL;
 80045fe:	2300      	movs	r3, #0
 8004600:	61bb      	str	r3, [r7, #24]
    size_t output_length = 0;
 8004602:	2300      	movs	r3, #0
 8004604:	60fb      	str	r3, [r7, #12]
    /* numbers of additional characters needed for escaping */
    size_t escape_characters = 0;
 8004606:	2300      	movs	r3, #0
 8004608:	617b      	str	r3, [r7, #20]

    if (output_buffer == NULL)
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d101      	bne.n	8004614 <print_string_ptr+0x28>
    {
        return false;
 8004610:	2300      	movs	r3, #0
 8004612:	e110      	b.n	8004836 <print_string_ptr+0x24a>
    }

    /* empty string */
    if (input == NULL)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d111      	bne.n	800463e <print_string_ptr+0x52>
    {
        output = ensure(output_buffer, sizeof("\"\""));
 800461a:	2103      	movs	r1, #3
 800461c:	6838      	ldr	r0, [r7, #0]
 800461e:	f7ff fb79 	bl	8003d14 <ensure>
 8004622:	6138      	str	r0, [r7, #16]
        if (output == NULL)
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d101      	bne.n	800462e <print_string_ptr+0x42>
        {
            return false;
 800462a:	2300      	movs	r3, #0
 800462c:	e103      	b.n	8004836 <print_string_ptr+0x24a>
        }
        strcpy((char*)output, "\"\"");
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	4a83      	ldr	r2, [pc, #524]	; (8004840 <print_string_ptr+0x254>)
 8004632:	8811      	ldrh	r1, [r2, #0]
 8004634:	7892      	ldrb	r2, [r2, #2]
 8004636:	8019      	strh	r1, [r3, #0]
 8004638:	709a      	strb	r2, [r3, #2]

        return true;
 800463a:	2301      	movs	r3, #1
 800463c:	e0fb      	b.n	8004836 <print_string_ptr+0x24a>
    }

    /* set "flag" to 1 if something needs to be escaped */
    for (input_pointer = input; *input_pointer; input_pointer++)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	61fb      	str	r3, [r7, #28]
 8004642:	e023      	b.n	800468c <print_string_ptr+0xa0>
    {
        switch (*input_pointer)
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	2b22      	cmp	r3, #34	; 0x22
 800464a:	dc0e      	bgt.n	800466a <print_string_ptr+0x7e>
 800464c:	2b08      	cmp	r3, #8
 800464e:	db12      	blt.n	8004676 <print_string_ptr+0x8a>
 8004650:	3b08      	subs	r3, #8
 8004652:	2201      	movs	r2, #1
 8004654:	409a      	lsls	r2, r3
 8004656:	4b7b      	ldr	r3, [pc, #492]	; (8004844 <print_string_ptr+0x258>)
 8004658:	4013      	ands	r3, r2
 800465a:	2b00      	cmp	r3, #0
 800465c:	bf14      	ite	ne
 800465e:	2301      	movne	r3, #1
 8004660:	2300      	moveq	r3, #0
 8004662:	b2db      	uxtb	r3, r3
 8004664:	2b00      	cmp	r3, #0
 8004666:	d102      	bne.n	800466e <print_string_ptr+0x82>
 8004668:	e005      	b.n	8004676 <print_string_ptr+0x8a>
 800466a:	2b5c      	cmp	r3, #92	; 0x5c
 800466c:	d103      	bne.n	8004676 <print_string_ptr+0x8a>
            case '\f':
            case '\n':
            case '\r':
            case '\t':
                /* one character escape sequence */
                escape_characters++;
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	3301      	adds	r3, #1
 8004672:	617b      	str	r3, [r7, #20]
                break;
 8004674:	e007      	b.n	8004686 <print_string_ptr+0x9a>
            default:
                if (*input_pointer < 32)
 8004676:	69fb      	ldr	r3, [r7, #28]
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	2b1f      	cmp	r3, #31
 800467c:	d802      	bhi.n	8004684 <print_string_ptr+0x98>
                {
                    /* UTF-16 escape sequence uXXXX */
                    escape_characters += 5;
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	3305      	adds	r3, #5
 8004682:	617b      	str	r3, [r7, #20]
                }
                break;
 8004684:	bf00      	nop
    for (input_pointer = input; *input_pointer; input_pointer++)
 8004686:	69fb      	ldr	r3, [r7, #28]
 8004688:	3301      	adds	r3, #1
 800468a:	61fb      	str	r3, [r7, #28]
 800468c:	69fb      	ldr	r3, [r7, #28]
 800468e:	781b      	ldrb	r3, [r3, #0]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d1d7      	bne.n	8004644 <print_string_ptr+0x58>
        }
    }
    output_length = (size_t)(input_pointer - input) + escape_characters;
 8004694:	69fa      	ldr	r2, [r7, #28]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	461a      	mov	r2, r3
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	4413      	add	r3, r2
 80046a0:	60fb      	str	r3, [r7, #12]

    output = ensure(output_buffer, output_length + sizeof("\"\""));
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	3303      	adds	r3, #3
 80046a6:	4619      	mov	r1, r3
 80046a8:	6838      	ldr	r0, [r7, #0]
 80046aa:	f7ff fb33 	bl	8003d14 <ensure>
 80046ae:	6138      	str	r0, [r7, #16]
    if (output == NULL)
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d101      	bne.n	80046ba <print_string_ptr+0xce>
    {
        return false;
 80046b6:	2300      	movs	r3, #0
 80046b8:	e0bd      	b.n	8004836 <print_string_ptr+0x24a>
    }

    /* no characters have to be escaped */
    if (escape_characters == 0)
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d117      	bne.n	80046f0 <print_string_ptr+0x104>
    {
        output[0] = '\"';
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	2222      	movs	r2, #34	; 0x22
 80046c4:	701a      	strb	r2, [r3, #0]
        memcpy(output + 1, input, output_length);
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	3301      	adds	r3, #1
 80046ca:	68fa      	ldr	r2, [r7, #12]
 80046cc:	6879      	ldr	r1, [r7, #4]
 80046ce:	4618      	mov	r0, r3
 80046d0:	f020 f998 	bl	8024a04 <memcpy>
        output[output_length + 1] = '\"';
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	3301      	adds	r3, #1
 80046d8:	693a      	ldr	r2, [r7, #16]
 80046da:	4413      	add	r3, r2
 80046dc:	2222      	movs	r2, #34	; 0x22
 80046de:	701a      	strb	r2, [r3, #0]
        output[output_length + 2] = '\0';
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	3302      	adds	r3, #2
 80046e4:	693a      	ldr	r2, [r7, #16]
 80046e6:	4413      	add	r3, r2
 80046e8:	2200      	movs	r2, #0
 80046ea:	701a      	strb	r2, [r3, #0]

        return true;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e0a2      	b.n	8004836 <print_string_ptr+0x24a>
    }

    output[0] = '\"';
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	2222      	movs	r2, #34	; 0x22
 80046f4:	701a      	strb	r2, [r3, #0]
    output_pointer = output + 1;
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	3301      	adds	r3, #1
 80046fa:	61bb      	str	r3, [r7, #24]
    /* copy the string */
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	61fb      	str	r3, [r7, #28]
 8004700:	e087      	b.n	8004812 <print_string_ptr+0x226>
    {
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	2b1f      	cmp	r3, #31
 8004708:	d90c      	bls.n	8004724 <print_string_ptr+0x138>
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	781b      	ldrb	r3, [r3, #0]
 800470e:	2b22      	cmp	r3, #34	; 0x22
 8004710:	d008      	beq.n	8004724 <print_string_ptr+0x138>
 8004712:	69fb      	ldr	r3, [r7, #28]
 8004714:	781b      	ldrb	r3, [r3, #0]
 8004716:	2b5c      	cmp	r3, #92	; 0x5c
 8004718:	d004      	beq.n	8004724 <print_string_ptr+0x138>
        {
            /* normal character, copy */
            *output_pointer = *input_pointer;
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	781a      	ldrb	r2, [r3, #0]
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	701a      	strb	r2, [r3, #0]
 8004722:	e070      	b.n	8004806 <print_string_ptr+0x21a>
        }
        else
        {
            /* character needs to be escaped */
            *output_pointer++ = '\\';
 8004724:	69bb      	ldr	r3, [r7, #24]
 8004726:	1c5a      	adds	r2, r3, #1
 8004728:	61ba      	str	r2, [r7, #24]
 800472a:	225c      	movs	r2, #92	; 0x5c
 800472c:	701a      	strb	r2, [r3, #0]
            switch (*input_pointer)
 800472e:	69fb      	ldr	r3, [r7, #28]
 8004730:	781b      	ldrb	r3, [r3, #0]
 8004732:	2b22      	cmp	r3, #34	; 0x22
 8004734:	dc3e      	bgt.n	80047b4 <print_string_ptr+0x1c8>
 8004736:	2b08      	cmp	r3, #8
 8004738:	db5a      	blt.n	80047f0 <print_string_ptr+0x204>
 800473a:	3b08      	subs	r3, #8
 800473c:	2b1a      	cmp	r3, #26
 800473e:	d857      	bhi.n	80047f0 <print_string_ptr+0x204>
 8004740:	a201      	add	r2, pc, #4	; (adr r2, 8004748 <print_string_ptr+0x15c>)
 8004742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004746:	bf00      	nop
 8004748:	080047c9 	.word	0x080047c9
 800474c:	080047e9 	.word	0x080047e9
 8004750:	080047d9 	.word	0x080047d9
 8004754:	080047f1 	.word	0x080047f1
 8004758:	080047d1 	.word	0x080047d1
 800475c:	080047e1 	.word	0x080047e1
 8004760:	080047f1 	.word	0x080047f1
 8004764:	080047f1 	.word	0x080047f1
 8004768:	080047f1 	.word	0x080047f1
 800476c:	080047f1 	.word	0x080047f1
 8004770:	080047f1 	.word	0x080047f1
 8004774:	080047f1 	.word	0x080047f1
 8004778:	080047f1 	.word	0x080047f1
 800477c:	080047f1 	.word	0x080047f1
 8004780:	080047f1 	.word	0x080047f1
 8004784:	080047f1 	.word	0x080047f1
 8004788:	080047f1 	.word	0x080047f1
 800478c:	080047f1 	.word	0x080047f1
 8004790:	080047f1 	.word	0x080047f1
 8004794:	080047f1 	.word	0x080047f1
 8004798:	080047f1 	.word	0x080047f1
 800479c:	080047f1 	.word	0x080047f1
 80047a0:	080047f1 	.word	0x080047f1
 80047a4:	080047f1 	.word	0x080047f1
 80047a8:	080047f1 	.word	0x080047f1
 80047ac:	080047f1 	.word	0x080047f1
 80047b0:	080047c1 	.word	0x080047c1
 80047b4:	2b5c      	cmp	r3, #92	; 0x5c
 80047b6:	d11b      	bne.n	80047f0 <print_string_ptr+0x204>
            {
                case '\\':
                    *output_pointer = '\\';
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	225c      	movs	r2, #92	; 0x5c
 80047bc:	701a      	strb	r2, [r3, #0]
                    break;
 80047be:	e022      	b.n	8004806 <print_string_ptr+0x21a>
                case '\"':
                    *output_pointer = '\"';
 80047c0:	69bb      	ldr	r3, [r7, #24]
 80047c2:	2222      	movs	r2, #34	; 0x22
 80047c4:	701a      	strb	r2, [r3, #0]
                    break;
 80047c6:	e01e      	b.n	8004806 <print_string_ptr+0x21a>
                case '\b':
                    *output_pointer = 'b';
 80047c8:	69bb      	ldr	r3, [r7, #24]
 80047ca:	2262      	movs	r2, #98	; 0x62
 80047cc:	701a      	strb	r2, [r3, #0]
                    break;
 80047ce:	e01a      	b.n	8004806 <print_string_ptr+0x21a>
                case '\f':
                    *output_pointer = 'f';
 80047d0:	69bb      	ldr	r3, [r7, #24]
 80047d2:	2266      	movs	r2, #102	; 0x66
 80047d4:	701a      	strb	r2, [r3, #0]
                    break;
 80047d6:	e016      	b.n	8004806 <print_string_ptr+0x21a>
                case '\n':
                    *output_pointer = 'n';
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	226e      	movs	r2, #110	; 0x6e
 80047dc:	701a      	strb	r2, [r3, #0]
                    break;
 80047de:	e012      	b.n	8004806 <print_string_ptr+0x21a>
                case '\r':
                    *output_pointer = 'r';
 80047e0:	69bb      	ldr	r3, [r7, #24]
 80047e2:	2272      	movs	r2, #114	; 0x72
 80047e4:	701a      	strb	r2, [r3, #0]
                    break;
 80047e6:	e00e      	b.n	8004806 <print_string_ptr+0x21a>
                case '\t':
                    *output_pointer = 't';
 80047e8:	69bb      	ldr	r3, [r7, #24]
 80047ea:	2274      	movs	r2, #116	; 0x74
 80047ec:	701a      	strb	r2, [r3, #0]
                    break;
 80047ee:	e00a      	b.n	8004806 <print_string_ptr+0x21a>
                default:
                    /* escape and print as unicode codepoint */
                    sprintf((char*)output_pointer, "u%04x", *input_pointer);
 80047f0:	69fb      	ldr	r3, [r7, #28]
 80047f2:	781b      	ldrb	r3, [r3, #0]
 80047f4:	461a      	mov	r2, r3
 80047f6:	4914      	ldr	r1, [pc, #80]	; (8004848 <print_string_ptr+0x25c>)
 80047f8:	69b8      	ldr	r0, [r7, #24]
 80047fa:	f021 f8bb 	bl	8025974 <siprintf>
                    output_pointer += 4;
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	3304      	adds	r3, #4
 8004802:	61bb      	str	r3, [r7, #24]
                    break;
 8004804:	bf00      	nop
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	3301      	adds	r3, #1
 800480a:	61fb      	str	r3, [r7, #28]
 800480c:	69bb      	ldr	r3, [r7, #24]
 800480e:	3301      	adds	r3, #1
 8004810:	61bb      	str	r3, [r7, #24]
 8004812:	69fb      	ldr	r3, [r7, #28]
 8004814:	781b      	ldrb	r3, [r3, #0]
 8004816:	2b00      	cmp	r3, #0
 8004818:	f47f af73 	bne.w	8004702 <print_string_ptr+0x116>
            }
        }
    }
    output[output_length + 1] = '\"';
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	3301      	adds	r3, #1
 8004820:	693a      	ldr	r2, [r7, #16]
 8004822:	4413      	add	r3, r2
 8004824:	2222      	movs	r2, #34	; 0x22
 8004826:	701a      	strb	r2, [r3, #0]
    output[output_length + 2] = '\0';
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	3302      	adds	r3, #2
 800482c:	693a      	ldr	r2, [r7, #16]
 800482e:	4413      	add	r3, r2
 8004830:	2200      	movs	r2, #0
 8004832:	701a      	strb	r2, [r3, #0]

    return true;
 8004834:	2301      	movs	r3, #1
}
 8004836:	4618      	mov	r0, r3
 8004838:	3720      	adds	r7, #32
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop
 8004840:	080299b0 	.word	0x080299b0
 8004844:	04000037 	.word	0x04000037
 8004848:	080299b4 	.word	0x080299b4

0800484c <print_string>:

/* Invoke print_string_ptr (which is useful) on an item. */
static cJSON_bool print_string(const cJSON * const item, printbuffer * const p)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b082      	sub	sp, #8
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	6039      	str	r1, [r7, #0]
    return print_string_ptr((unsigned char*)item->valuestring, p);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	691b      	ldr	r3, [r3, #16]
 800485a:	6839      	ldr	r1, [r7, #0]
 800485c:	4618      	mov	r0, r3
 800485e:	f7ff fec5 	bl	80045ec <print_string_ptr>
 8004862:	4603      	mov	r3, r0
}
 8004864:	4618      	mov	r0, r3
 8004866:	3708      	adds	r7, #8
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}

0800486c <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d003      	beq.n	8004882 <buffer_skip_whitespace+0x16>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d101      	bne.n	8004886 <buffer_skip_whitespace+0x1a>
    {
        return NULL;
 8004882:	2300      	movs	r3, #0
 8004884:	e02c      	b.n	80048e0 <buffer_skip_whitespace+0x74>
    }

    if (cannot_access_at_index(buffer, 0))
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d005      	beq.n	8004898 <buffer_skip_whitespace+0x2c>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	689a      	ldr	r2, [r3, #8]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	429a      	cmp	r2, r3
 8004896:	d306      	bcc.n	80048a6 <buffer_skip_whitespace+0x3a>
    {
        return buffer;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	e021      	b.n	80048e0 <buffer_skip_whitespace+0x74>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	1c5a      	adds	r2, r3, #1
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d00d      	beq.n	80048c8 <buffer_skip_whitespace+0x5c>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	689a      	ldr	r2, [r3, #8]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d207      	bcs.n	80048c8 <buffer_skip_whitespace+0x5c>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	4413      	add	r3, r2
 80048c2:	781b      	ldrb	r3, [r3, #0]
 80048c4:	2b20      	cmp	r3, #32
 80048c6:	d9e9      	bls.n	800489c <buffer_skip_whitespace+0x30>
    }

    if (buffer->offset == buffer->length)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	689a      	ldr	r2, [r3, #8]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d104      	bne.n	80048de <buffer_skip_whitespace+0x72>
    {
        buffer->offset--;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	1e5a      	subs	r2, r3, #1
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 80048de:	687b      	ldr	r3, [r7, #4]
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	370c      	adds	r7, #12
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr

080048ec <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b082      	sub	sp, #8
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d007      	beq.n	800490a <skip_utf8_bom+0x1e>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d003      	beq.n	800490a <skip_utf8_bom+0x1e>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d001      	beq.n	800490e <skip_utf8_bom+0x22>
    {
        return NULL;
 800490a:	2300      	movs	r3, #0
 800490c:	e01c      	b.n	8004948 <skip_utf8_bom+0x5c>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d018      	beq.n	8004946 <skip_utf8_bom+0x5a>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	1d1a      	adds	r2, r3, #4
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	429a      	cmp	r2, r3
 8004920:	d211      	bcs.n	8004946 <skip_utf8_bom+0x5a>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	4413      	add	r3, r2
 800492c:	2203      	movs	r2, #3
 800492e:	4908      	ldr	r1, [pc, #32]	; (8004950 <skip_utf8_bom+0x64>)
 8004930:	4618      	mov	r0, r3
 8004932:	f021 f8b8 	bl	8025aa6 <strncmp>
 8004936:	4603      	mov	r3, r0
 8004938:	2b00      	cmp	r3, #0
 800493a:	d104      	bne.n	8004946 <skip_utf8_bom+0x5a>
    {
        buffer->offset += 3;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	1cda      	adds	r2, r3, #3
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 8004946:	687b      	ldr	r3, [r7, #4]
}
 8004948:	4618      	mov	r0, r3
 800494a:	3708      	adds	r7, #8
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}
 8004950:	080299bc 	.word	0x080299bc

08004954 <cJSON_ParseWithOpts>:

CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b086      	sub	sp, #24
 8004958:	af00      	add	r7, sp, #0
 800495a:	60f8      	str	r0, [r7, #12]
 800495c:	60b9      	str	r1, [r7, #8]
 800495e:	607a      	str	r2, [r7, #4]
    size_t buffer_length;

    if (NULL == value)
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d101      	bne.n	800496a <cJSON_ParseWithOpts+0x16>
    {
        return NULL;
 8004966:	2300      	movs	r3, #0
 8004968:	e00c      	b.n	8004984 <cJSON_ParseWithOpts+0x30>
    }

    /* Adding null character size due to require_null_terminated. */
    buffer_length = strlen(value) + sizeof("");
 800496a:	68f8      	ldr	r0, [r7, #12]
 800496c:	f7fb fc3a 	bl	80001e4 <strlen>
 8004970:	4603      	mov	r3, r0
 8004972:	3301      	adds	r3, #1
 8004974:	617b      	str	r3, [r7, #20]

    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	68ba      	ldr	r2, [r7, #8]
 800497a:	6979      	ldr	r1, [r7, #20]
 800497c:	68f8      	ldr	r0, [r7, #12]
 800497e:	f000 f805 	bl	800498c <cJSON_ParseWithLengthOpts>
 8004982:	4603      	mov	r3, r0
}
 8004984:	4618      	mov	r0, r3
 8004986:	3718      	adds	r7, #24
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}

0800498c <cJSON_ParseWithLengthOpts>:

/* Parse an object - create a new root, and populate. */
CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b08e      	sub	sp, #56	; 0x38
 8004990:	af00      	add	r7, sp, #0
 8004992:	60f8      	str	r0, [r7, #12]
 8004994:	60b9      	str	r1, [r7, #8]
 8004996:	607a      	str	r2, [r7, #4]
 8004998:	603b      	str	r3, [r7, #0]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 800499a:	f107 0318 	add.w	r3, r7, #24
 800499e:	2200      	movs	r2, #0
 80049a0:	601a      	str	r2, [r3, #0]
 80049a2:	605a      	str	r2, [r3, #4]
 80049a4:	609a      	str	r2, [r3, #8]
 80049a6:	60da      	str	r2, [r3, #12]
 80049a8:	611a      	str	r2, [r3, #16]
 80049aa:	615a      	str	r2, [r3, #20]
 80049ac:	619a      	str	r2, [r3, #24]
    cJSON *item = NULL;
 80049ae:	2300      	movs	r3, #0
 80049b0:	637b      	str	r3, [r7, #52]	; 0x34

    /* reset error position */
    global_error.json = NULL;
 80049b2:	4b41      	ldr	r3, [pc, #260]	; (8004ab8 <cJSON_ParseWithLengthOpts+0x12c>)
 80049b4:	2200      	movs	r2, #0
 80049b6:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 80049b8:	4b3f      	ldr	r3, [pc, #252]	; (8004ab8 <cJSON_ParseWithLengthOpts+0x12c>)
 80049ba:	2200      	movs	r2, #0
 80049bc:	605a      	str	r2, [r3, #4]

    if (value == NULL || 0 == buffer_length)
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d042      	beq.n	8004a4a <cJSON_ParseWithLengthOpts+0xbe>
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d03f      	beq.n	8004a4a <cJSON_ParseWithLengthOpts+0xbe>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	61bb      	str	r3, [r7, #24]
    buffer.length = buffer_length;
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	61fb      	str	r3, [r7, #28]
    buffer.offset = 0;
 80049d2:	2300      	movs	r3, #0
 80049d4:	623b      	str	r3, [r7, #32]
    buffer.hooks = global_hooks;
 80049d6:	4a39      	ldr	r2, [pc, #228]	; (8004abc <cJSON_ParseWithLengthOpts+0x130>)
 80049d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80049dc:	ca07      	ldmia	r2, {r0, r1, r2}
 80049de:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    item = cJSON_New_Item(&global_hooks);
 80049e2:	4836      	ldr	r0, [pc, #216]	; (8004abc <cJSON_ParseWithLengthOpts+0x130>)
 80049e4:	f7ff f83e 	bl	8003a64 <cJSON_New_Item>
 80049e8:	6378      	str	r0, [r7, #52]	; 0x34
    if (item == NULL) /* memory fail */
 80049ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d02e      	beq.n	8004a4e <cJSON_ParseWithLengthOpts+0xc2>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 80049f0:	f107 0318 	add.w	r3, r7, #24
 80049f4:	4618      	mov	r0, r3
 80049f6:	f7ff ff79 	bl	80048ec <skip_utf8_bom>
 80049fa:	4603      	mov	r3, r0
 80049fc:	4618      	mov	r0, r3
 80049fe:	f7ff ff35 	bl	800486c <buffer_skip_whitespace>
 8004a02:	4603      	mov	r3, r0
 8004a04:	4619      	mov	r1, r3
 8004a06:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004a08:	f000 f8fc 	bl	8004c04 <parse_value>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d01f      	beq.n	8004a52 <cJSON_ParseWithLengthOpts+0xc6>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d00e      	beq.n	8004a36 <cJSON_ParseWithLengthOpts+0xaa>
    {
        buffer_skip_whitespace(&buffer);
 8004a18:	f107 0318 	add.w	r3, r7, #24
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f7ff ff25 	bl	800486c <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 8004a22:	6a3a      	ldr	r2, [r7, #32]
 8004a24:	69fb      	ldr	r3, [r7, #28]
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d215      	bcs.n	8004a56 <cJSON_ParseWithLengthOpts+0xca>
 8004a2a:	69ba      	ldr	r2, [r7, #24]
 8004a2c:	6a3b      	ldr	r3, [r7, #32]
 8004a2e:	4413      	add	r3, r2
 8004a30:	781b      	ldrb	r3, [r3, #0]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d10f      	bne.n	8004a56 <cJSON_ParseWithLengthOpts+0xca>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d004      	beq.n	8004a46 <cJSON_ParseWithLengthOpts+0xba>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 8004a3c:	69ba      	ldr	r2, [r7, #24]
 8004a3e:	6a3b      	ldr	r3, [r7, #32]
 8004a40:	441a      	add	r2, r3
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	601a      	str	r2, [r3, #0]
    }

    return item;
 8004a46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a48:	e031      	b.n	8004aae <cJSON_ParseWithLengthOpts+0x122>
        goto fail;
 8004a4a:	bf00      	nop
 8004a4c:	e004      	b.n	8004a58 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 8004a4e:	bf00      	nop
 8004a50:	e002      	b.n	8004a58 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 8004a52:	bf00      	nop
 8004a54:	e000      	b.n	8004a58 <cJSON_ParseWithLengthOpts+0xcc>
            goto fail;
 8004a56:	bf00      	nop

fail:
    if (item != NULL)
 8004a58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d002      	beq.n	8004a64 <cJSON_ParseWithLengthOpts+0xd8>
    {
        cJSON_Delete(item);
 8004a5e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004a60:	f7ff f816 	bl	8003a90 <cJSON_Delete>
    }

    if (value != NULL)
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d020      	beq.n	8004aac <cJSON_ParseWithLengthOpts+0x120>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	613b      	str	r3, [r7, #16]
        local_error.position = 0;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	617b      	str	r3, [r7, #20]

        if (buffer.offset < buffer.length)
 8004a72:	6a3a      	ldr	r2, [r7, #32]
 8004a74:	69fb      	ldr	r3, [r7, #28]
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d202      	bcs.n	8004a80 <cJSON_ParseWithLengthOpts+0xf4>
        {
            local_error.position = buffer.offset;
 8004a7a:	6a3b      	ldr	r3, [r7, #32]
 8004a7c:	617b      	str	r3, [r7, #20]
 8004a7e:	e005      	b.n	8004a8c <cJSON_ParseWithLengthOpts+0x100>
        }
        else if (buffer.length > 0)
 8004a80:	69fb      	ldr	r3, [r7, #28]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d002      	beq.n	8004a8c <cJSON_ParseWithLengthOpts+0x100>
        {
            local_error.position = buffer.length - 1;
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	3b01      	subs	r3, #1
 8004a8a:	617b      	str	r3, [r7, #20]
        }

        if (return_parse_end != NULL)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d004      	beq.n	8004a9c <cJSON_ParseWithLengthOpts+0x110>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 8004a92:	693a      	ldr	r2, [r7, #16]
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	441a      	add	r2, r3
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 8004a9c:	4b06      	ldr	r3, [pc, #24]	; (8004ab8 <cJSON_ParseWithLengthOpts+0x12c>)
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	f107 0310 	add.w	r3, r7, #16
 8004aa4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004aa8:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    return NULL;
 8004aac:	2300      	movs	r3, #0
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3738      	adds	r7, #56	; 0x38
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	2000003c 	.word	0x2000003c
 8004abc:	10000000 	.word	0x10000000

08004ac0 <cJSON_Parse>:

/* Default options for cJSON_Parse */
CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b082      	sub	sp, #8
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
    return cJSON_ParseWithOpts(value, 0, 0);
 8004ac8:	2200      	movs	r2, #0
 8004aca:	2100      	movs	r1, #0
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f7ff ff41 	bl	8004954 <cJSON_ParseWithOpts>
 8004ad2:	4603      	mov	r3, r0
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3708      	adds	r7, #8
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}

08004adc <print>:
}

#define cjson_min(a, b) (((a) < (b)) ? (a) : (b))

static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b08e      	sub	sp, #56	; 0x38
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	60f8      	str	r0, [r7, #12]
 8004ae4:	60b9      	str	r1, [r7, #8]
 8004ae6:	607a      	str	r2, [r7, #4]
    static const size_t default_buffer_size = 256;
    printbuffer buffer[1];
    unsigned char *printed = NULL;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	637b      	str	r3, [r7, #52]	; 0x34

    memset(buffer, 0, sizeof(buffer));
 8004aec:	f107 0310 	add.w	r3, r7, #16
 8004af0:	2224      	movs	r2, #36	; 0x24
 8004af2:	2100      	movs	r1, #0
 8004af4:	4618      	mov	r0, r3
 8004af6:	f01f ffad 	bl	8024a54 <memset>

    /* create buffer */
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a38      	ldr	r2, [pc, #224]	; (8004be0 <print+0x104>)
 8004b00:	6812      	ldr	r2, [r2, #0]
 8004b02:	4610      	mov	r0, r2
 8004b04:	4798      	blx	r3
 8004b06:	4603      	mov	r3, r0
 8004b08:	613b      	str	r3, [r7, #16]
    buffer->length = default_buffer_size;
 8004b0a:	4b35      	ldr	r3, [pc, #212]	; (8004be0 <print+0x104>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	617b      	str	r3, [r7, #20]
    buffer->format = format;
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	627b      	str	r3, [r7, #36]	; 0x24
    buffer->hooks = *hooks;
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004b1a:	ca07      	ldmia	r2, {r0, r1, r2}
 8004b1c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    if (buffer->buffer == NULL)
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d040      	beq.n	8004ba8 <print+0xcc>
    {
        goto fail;
    }

    /* print the value */
    if (!print_value(item, buffer))
 8004b26:	f107 0310 	add.w	r3, r7, #16
 8004b2a:	4619      	mov	r1, r3
 8004b2c:	68f8      	ldr	r0, [r7, #12]
 8004b2e:	f000 f955 	bl	8004ddc <print_value>
 8004b32:	4603      	mov	r3, r0
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d039      	beq.n	8004bac <print+0xd0>
    {
        goto fail;
    }
    update_offset(buffer);
 8004b38:	f107 0310 	add.w	r3, r7, #16
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f7ff f986 	bl	8003e4e <update_offset>

    /* check if reallocate is available */
    if (hooks->reallocate != NULL)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d00d      	beq.n	8004b66 <print+0x8a>
    {
        printed = (unsigned char*) hooks->reallocate(buffer->buffer, buffer->offset + 1);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	6938      	ldr	r0, [r7, #16]
 8004b50:	69ba      	ldr	r2, [r7, #24]
 8004b52:	3201      	adds	r2, #1
 8004b54:	4611      	mov	r1, r2
 8004b56:	4798      	blx	r3
 8004b58:	6378      	str	r0, [r7, #52]	; 0x34
        if (printed == NULL) {
 8004b5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d027      	beq.n	8004bb0 <print+0xd4>
            goto fail;
        }
        buffer->buffer = NULL;
 8004b60:	2300      	movs	r3, #0
 8004b62:	613b      	str	r3, [r7, #16]
 8004b64:	e01e      	b.n	8004ba4 <print+0xc8>
    }
    else /* otherwise copy the JSON over to a new buffer */
    {
        printed = (unsigned char*) hooks->allocate(buffer->offset + 1);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	69ba      	ldr	r2, [r7, #24]
 8004b6c:	3201      	adds	r2, #1
 8004b6e:	4610      	mov	r0, r2
 8004b70:	4798      	blx	r3
 8004b72:	6378      	str	r0, [r7, #52]	; 0x34
        if (printed == NULL)
 8004b74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d01c      	beq.n	8004bb4 <print+0xd8>
        {
            goto fail;
        }
        memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
 8004b7a:	6939      	ldr	r1, [r7, #16]
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	1c5a      	adds	r2, r3, #1
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	4293      	cmp	r3, r2
 8004b84:	bf28      	it	cs
 8004b86:	4613      	movcs	r3, r2
 8004b88:	461a      	mov	r2, r3
 8004b8a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004b8c:	f01f ff3a 	bl	8024a04 <memcpy>
        printed[buffer->offset] = '\0'; /* just to be sure */
 8004b90:	69bb      	ldr	r3, [r7, #24]
 8004b92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b94:	4413      	add	r3, r2
 8004b96:	2200      	movs	r2, #0
 8004b98:	701a      	strb	r2, [r3, #0]

        /* free the buffer */
        hooks->deallocate(buffer->buffer);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	693a      	ldr	r2, [r7, #16]
 8004ba0:	4610      	mov	r0, r2
 8004ba2:	4798      	blx	r3
    }

    return printed;
 8004ba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ba6:	e016      	b.n	8004bd6 <print+0xfa>
        goto fail;
 8004ba8:	bf00      	nop
 8004baa:	e004      	b.n	8004bb6 <print+0xda>
        goto fail;
 8004bac:	bf00      	nop
 8004bae:	e002      	b.n	8004bb6 <print+0xda>
            goto fail;
 8004bb0:	bf00      	nop
 8004bb2:	e000      	b.n	8004bb6 <print+0xda>
            goto fail;
 8004bb4:	bf00      	nop

fail:
    if (buffer->buffer != NULL)
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d004      	beq.n	8004bc6 <print+0xea>
    {
        hooks->deallocate(buffer->buffer);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	693a      	ldr	r2, [r7, #16]
 8004bc2:	4610      	mov	r0, r2
 8004bc4:	4798      	blx	r3
    }

    if (printed != NULL)
 8004bc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d003      	beq.n	8004bd4 <print+0xf8>
    {
        hooks->deallocate(printed);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004bd2:	4798      	blx	r3
    }

    return NULL;
 8004bd4:	2300      	movs	r3, #0
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3738      	adds	r7, #56	; 0x38
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	0802e270 	.word	0x0802e270

08004be4 <cJSON_Print>:

/* Render a cJSON item/entity/structure to text. */
CJSON_PUBLIC(char *) cJSON_Print(const cJSON *item)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b082      	sub	sp, #8
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
    return (char*)print(item, true, &global_hooks);
 8004bec:	4a04      	ldr	r2, [pc, #16]	; (8004c00 <cJSON_Print+0x1c>)
 8004bee:	2101      	movs	r1, #1
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f7ff ff73 	bl	8004adc <print>
 8004bf6:	4603      	mov	r3, r0
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3708      	adds	r7, #8
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}
 8004c00:	10000000 	.word	0x10000000

08004c04 <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b082      	sub	sp, #8
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
 8004c0c:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d003      	beq.n	8004c1c <parse_value+0x18>
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d101      	bne.n	8004c20 <parse_value+0x1c>
    {
        return false; /* no input */
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	e0d2      	b.n	8004dc6 <parse_value+0x1c2>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d01d      	beq.n	8004c62 <parse_value+0x5e>
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	1d1a      	adds	r2, r3, #4
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d816      	bhi.n	8004c62 <parse_value+0x5e>
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	4413      	add	r3, r2
 8004c3e:	2204      	movs	r2, #4
 8004c40:	4963      	ldr	r1, [pc, #396]	; (8004dd0 <parse_value+0x1cc>)
 8004c42:	4618      	mov	r0, r3
 8004c44:	f020 ff2f 	bl	8025aa6 <strncmp>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d109      	bne.n	8004c62 <parse_value+0x5e>
    {
        item->type = cJSON_NULL;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2204      	movs	r2, #4
 8004c52:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	1d1a      	adds	r2, r3, #4
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	609a      	str	r2, [r3, #8]
        return true;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e0b1      	b.n	8004dc6 <parse_value+0x1c2>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d01d      	beq.n	8004ca4 <parse_value+0xa0>
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	1d5a      	adds	r2, r3, #5
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d816      	bhi.n	8004ca4 <parse_value+0xa0>
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	4413      	add	r3, r2
 8004c80:	2205      	movs	r2, #5
 8004c82:	4954      	ldr	r1, [pc, #336]	; (8004dd4 <parse_value+0x1d0>)
 8004c84:	4618      	mov	r0, r3
 8004c86:	f020 ff0e 	bl	8025aa6 <strncmp>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d109      	bne.n	8004ca4 <parse_value+0xa0>
    {
        item->type = cJSON_False;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2201      	movs	r2, #1
 8004c94:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	1d5a      	adds	r2, r3, #5
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	609a      	str	r2, [r3, #8]
        return true;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e090      	b.n	8004dc6 <parse_value+0x1c2>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d020      	beq.n	8004cec <parse_value+0xe8>
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	1d1a      	adds	r2, r3, #4
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d819      	bhi.n	8004cec <parse_value+0xe8>
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	4413      	add	r3, r2
 8004cc2:	2204      	movs	r2, #4
 8004cc4:	4944      	ldr	r1, [pc, #272]	; (8004dd8 <parse_value+0x1d4>)
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f020 feed 	bl	8025aa6 <strncmp>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d10c      	bne.n	8004cec <parse_value+0xe8>
    {
        item->type = cJSON_True;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2202      	movs	r2, #2
 8004cd6:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	1d1a      	adds	r2, r3, #4
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	609a      	str	r2, [r3, #8]
        return true;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e06c      	b.n	8004dc6 <parse_value+0x1c2>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d013      	beq.n	8004d1a <parse_value+0x116>
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	689a      	ldr	r2, [r3, #8]
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d20d      	bcs.n	8004d1a <parse_value+0x116>
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	4413      	add	r3, r2
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	2b22      	cmp	r3, #34	; 0x22
 8004d0c:	d105      	bne.n	8004d1a <parse_value+0x116>
    {
        return parse_string(item, input_buffer);
 8004d0e:	6839      	ldr	r1, [r7, #0]
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f7ff fb25 	bl	8004360 <parse_string>
 8004d16:	4603      	mov	r3, r0
 8004d18:	e055      	b.n	8004dc6 <parse_value+0x1c2>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d023      	beq.n	8004d68 <parse_value+0x164>
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	689a      	ldr	r2, [r3, #8]
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d21d      	bcs.n	8004d68 <parse_value+0x164>
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	4413      	add	r3, r2
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	2b2d      	cmp	r3, #45	; 0x2d
 8004d3a:	d00f      	beq.n	8004d5c <parse_value+0x158>
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	4413      	add	r3, r2
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	2b2f      	cmp	r3, #47	; 0x2f
 8004d4a:	d90d      	bls.n	8004d68 <parse_value+0x164>
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	4413      	add	r3, r2
 8004d56:	781b      	ldrb	r3, [r3, #0]
 8004d58:	2b39      	cmp	r3, #57	; 0x39
 8004d5a:	d805      	bhi.n	8004d68 <parse_value+0x164>
    {
        return parse_number(item, input_buffer);
 8004d5c:	6839      	ldr	r1, [r7, #0]
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f7fe feea 	bl	8003b38 <parse_number>
 8004d64:	4603      	mov	r3, r0
 8004d66:	e02e      	b.n	8004dc6 <parse_value+0x1c2>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d013      	beq.n	8004d96 <parse_value+0x192>
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	689a      	ldr	r2, [r3, #8]
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d20d      	bcs.n	8004d96 <parse_value+0x192>
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	4413      	add	r3, r2
 8004d84:	781b      	ldrb	r3, [r3, #0]
 8004d86:	2b5b      	cmp	r3, #91	; 0x5b
 8004d88:	d105      	bne.n	8004d96 <parse_value+0x192>
    {
        return parse_array(item, input_buffer);
 8004d8a:	6839      	ldr	r1, [r7, #0]
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f000 f909 	bl	8004fa4 <parse_array>
 8004d92:	4603      	mov	r3, r0
 8004d94:	e017      	b.n	8004dc6 <parse_value+0x1c2>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d013      	beq.n	8004dc4 <parse_value+0x1c0>
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	689a      	ldr	r2, [r3, #8]
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d20d      	bcs.n	8004dc4 <parse_value+0x1c0>
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	4413      	add	r3, r2
 8004db2:	781b      	ldrb	r3, [r3, #0]
 8004db4:	2b7b      	cmp	r3, #123	; 0x7b
 8004db6:	d105      	bne.n	8004dc4 <parse_value+0x1c0>
    {
        return parse_object(item, input_buffer);
 8004db8:	6839      	ldr	r1, [r7, #0]
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f000 fa3c 	bl	8005238 <parse_object>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	e000      	b.n	8004dc6 <parse_value+0x1c2>
    }

    return false;
 8004dc4:	2300      	movs	r3, #0
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3708      	adds	r7, #8
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
 8004dce:	bf00      	nop
 8004dd0:	08029994 	.word	0x08029994
 8004dd4:	080299c0 	.word	0x080299c0
 8004dd8:	080299c8 	.word	0x080299c8

08004ddc <print_value>:

/* Render a value to text. */
static cJSON_bool print_value(const cJSON * const item, printbuffer * const output_buffer)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	6039      	str	r1, [r7, #0]
    unsigned char *output = NULL;
 8004de6:	2300      	movs	r3, #0
 8004de8:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (output_buffer == NULL))
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d002      	beq.n	8004df6 <print_value+0x1a>
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d101      	bne.n	8004dfa <print_value+0x1e>
    {
        return false;
 8004df6:	2300      	movs	r3, #0
 8004df8:	e0c9      	b.n	8004f8e <print_value+0x1b2>
    }

    switch ((item->type) & 0xFF)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	68db      	ldr	r3, [r3, #12]
 8004dfe:	b2db      	uxtb	r3, r3
 8004e00:	2b80      	cmp	r3, #128	; 0x80
 8004e02:	f000 808e 	beq.w	8004f22 <print_value+0x146>
 8004e06:	2b80      	cmp	r3, #128	; 0x80
 8004e08:	f300 80c0 	bgt.w	8004f8c <print_value+0x1b0>
 8004e0c:	2b20      	cmp	r3, #32
 8004e0e:	dc49      	bgt.n	8004ea4 <print_value+0xc8>
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	f340 80bb 	ble.w	8004f8c <print_value+0x1b0>
 8004e16:	3b01      	subs	r3, #1
 8004e18:	2b1f      	cmp	r3, #31
 8004e1a:	f200 80b7 	bhi.w	8004f8c <print_value+0x1b0>
 8004e1e:	a201      	add	r2, pc, #4	; (adr r2, 8004e24 <print_value+0x48>)
 8004e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e24:	08004ecf 	.word	0x08004ecf
 8004e28:	08004ef3 	.word	0x08004ef3
 8004e2c:	08004f8d 	.word	0x08004f8d
 8004e30:	08004eab 	.word	0x08004eab
 8004e34:	08004f8d 	.word	0x08004f8d
 8004e38:	08004f8d 	.word	0x08004f8d
 8004e3c:	08004f8d 	.word	0x08004f8d
 8004e40:	08004f17 	.word	0x08004f17
 8004e44:	08004f8d 	.word	0x08004f8d
 8004e48:	08004f8d 	.word	0x08004f8d
 8004e4c:	08004f8d 	.word	0x08004f8d
 8004e50:	08004f8d 	.word	0x08004f8d
 8004e54:	08004f8d 	.word	0x08004f8d
 8004e58:	08004f8d 	.word	0x08004f8d
 8004e5c:	08004f8d 	.word	0x08004f8d
 8004e60:	08004f69 	.word	0x08004f69
 8004e64:	08004f8d 	.word	0x08004f8d
 8004e68:	08004f8d 	.word	0x08004f8d
 8004e6c:	08004f8d 	.word	0x08004f8d
 8004e70:	08004f8d 	.word	0x08004f8d
 8004e74:	08004f8d 	.word	0x08004f8d
 8004e78:	08004f8d 	.word	0x08004f8d
 8004e7c:	08004f8d 	.word	0x08004f8d
 8004e80:	08004f8d 	.word	0x08004f8d
 8004e84:	08004f8d 	.word	0x08004f8d
 8004e88:	08004f8d 	.word	0x08004f8d
 8004e8c:	08004f8d 	.word	0x08004f8d
 8004e90:	08004f8d 	.word	0x08004f8d
 8004e94:	08004f8d 	.word	0x08004f8d
 8004e98:	08004f8d 	.word	0x08004f8d
 8004e9c:	08004f8d 	.word	0x08004f8d
 8004ea0:	08004f75 	.word	0x08004f75
 8004ea4:	2b40      	cmp	r3, #64	; 0x40
 8004ea6:	d06b      	beq.n	8004f80 <print_value+0x1a4>
 8004ea8:	e070      	b.n	8004f8c <print_value+0x1b0>
    {
        case cJSON_NULL:
            output = ensure(output_buffer, 5);
 8004eaa:	2105      	movs	r1, #5
 8004eac:	6838      	ldr	r0, [r7, #0]
 8004eae:	f7fe ff31 	bl	8003d14 <ensure>
 8004eb2:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d101      	bne.n	8004ebe <print_value+0xe2>
            {
                return false;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	e067      	b.n	8004f8e <print_value+0x1b2>
            }
            strcpy((char*)output, "null");
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	4a35      	ldr	r2, [pc, #212]	; (8004f98 <print_value+0x1bc>)
 8004ec2:	6810      	ldr	r0, [r2, #0]
 8004ec4:	6018      	str	r0, [r3, #0]
 8004ec6:	7912      	ldrb	r2, [r2, #4]
 8004ec8:	711a      	strb	r2, [r3, #4]
            return true;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e05f      	b.n	8004f8e <print_value+0x1b2>

        case cJSON_False:
            output = ensure(output_buffer, 6);
 8004ece:	2106      	movs	r1, #6
 8004ed0:	6838      	ldr	r0, [r7, #0]
 8004ed2:	f7fe ff1f 	bl	8003d14 <ensure>
 8004ed6:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d101      	bne.n	8004ee2 <print_value+0x106>
            {
                return false;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	e055      	b.n	8004f8e <print_value+0x1b2>
            }
            strcpy((char*)output, "false");
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	4a2d      	ldr	r2, [pc, #180]	; (8004f9c <print_value+0x1c0>)
 8004ee6:	6810      	ldr	r0, [r2, #0]
 8004ee8:	6018      	str	r0, [r3, #0]
 8004eea:	8892      	ldrh	r2, [r2, #4]
 8004eec:	809a      	strh	r2, [r3, #4]
            return true;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e04d      	b.n	8004f8e <print_value+0x1b2>

        case cJSON_True:
            output = ensure(output_buffer, 5);
 8004ef2:	2105      	movs	r1, #5
 8004ef4:	6838      	ldr	r0, [r7, #0]
 8004ef6:	f7fe ff0d 	bl	8003d14 <ensure>
 8004efa:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d101      	bne.n	8004f06 <print_value+0x12a>
            {
                return false;
 8004f02:	2300      	movs	r3, #0
 8004f04:	e043      	b.n	8004f8e <print_value+0x1b2>
            }
            strcpy((char*)output, "true");
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	4a25      	ldr	r2, [pc, #148]	; (8004fa0 <print_value+0x1c4>)
 8004f0a:	6810      	ldr	r0, [r2, #0]
 8004f0c:	6018      	str	r0, [r3, #0]
 8004f0e:	7912      	ldrb	r2, [r2, #4]
 8004f10:	711a      	strb	r2, [r3, #4]
            return true;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e03b      	b.n	8004f8e <print_value+0x1b2>

        case cJSON_Number:
            return print_number(item, output_buffer);
 8004f16:	6839      	ldr	r1, [r7, #0]
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f7ff f801 	bl	8003f20 <print_number>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	e035      	b.n	8004f8e <print_value+0x1b2>

        case cJSON_Raw:
        {
            size_t raw_length = 0;
 8004f22:	2300      	movs	r3, #0
 8004f24:	60bb      	str	r3, [r7, #8]
            if (item->valuestring == NULL)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d101      	bne.n	8004f32 <print_value+0x156>
            {
                return false;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	e02d      	b.n	8004f8e <print_value+0x1b2>
            }

            raw_length = strlen(item->valuestring) + sizeof("");
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	691b      	ldr	r3, [r3, #16]
 8004f36:	4618      	mov	r0, r3
 8004f38:	f7fb f954 	bl	80001e4 <strlen>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	3301      	adds	r3, #1
 8004f40:	60bb      	str	r3, [r7, #8]
            output = ensure(output_buffer, raw_length);
 8004f42:	68b9      	ldr	r1, [r7, #8]
 8004f44:	6838      	ldr	r0, [r7, #0]
 8004f46:	f7fe fee5 	bl	8003d14 <ensure>
 8004f4a:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d101      	bne.n	8004f56 <print_value+0x17a>
            {
                return false;
 8004f52:	2300      	movs	r3, #0
 8004f54:	e01b      	b.n	8004f8e <print_value+0x1b2>
            }
            memcpy(output, item->valuestring, raw_length);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	691b      	ldr	r3, [r3, #16]
 8004f5a:	68ba      	ldr	r2, [r7, #8]
 8004f5c:	4619      	mov	r1, r3
 8004f5e:	68f8      	ldr	r0, [r7, #12]
 8004f60:	f01f fd50 	bl	8024a04 <memcpy>
            return true;
 8004f64:	2301      	movs	r3, #1
 8004f66:	e012      	b.n	8004f8e <print_value+0x1b2>
        }

        case cJSON_String:
            return print_string(item, output_buffer);
 8004f68:	6839      	ldr	r1, [r7, #0]
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f7ff fc6e 	bl	800484c <print_string>
 8004f70:	4603      	mov	r3, r0
 8004f72:	e00c      	b.n	8004f8e <print_value+0x1b2>

        case cJSON_Array:
            return print_array(item, output_buffer);
 8004f74:	6839      	ldr	r1, [r7, #0]
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f000 f8d8 	bl	800512c <print_array>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	e006      	b.n	8004f8e <print_value+0x1b2>

        case cJSON_Object:
            return print_object(item, output_buffer);
 8004f80:	6839      	ldr	r1, [r7, #0]
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f000 fa57 	bl	8005436 <print_object>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	e000      	b.n	8004f8e <print_value+0x1b2>

        default:
            return false;
 8004f8c:	2300      	movs	r3, #0
    }
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3710      	adds	r7, #16
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	bf00      	nop
 8004f98:	08029994 	.word	0x08029994
 8004f9c:	080299c0 	.word	0x080299c0
 8004fa0:	080299c8 	.word	0x080299c8

08004fa4 <parse_array>:

/* Build an array from input text. */
static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b086      	sub	sp, #24
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* head of the linked list */
 8004fae:	2300      	movs	r3, #0
 8004fb0:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004fbe:	d301      	bcc.n	8004fc4 <parse_array+0x20>
    {
        return false; /* to deeply nested */
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	e0af      	b.n	8005124 <parse_array+0x180>
    }
    input_buffer->depth++;
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	68db      	ldr	r3, [r3, #12]
 8004fc8:	1c5a      	adds	r2, r3, #1
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	4413      	add	r3, r2
 8004fd8:	781b      	ldrb	r3, [r3, #0]
 8004fda:	2b5b      	cmp	r3, #91	; 0x5b
 8004fdc:	f040 8094 	bne.w	8005108 <parse_array+0x164>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	1c5a      	adds	r2, r3, #1
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8004fea:	6838      	ldr	r0, [r7, #0]
 8004fec:	f7ff fc3e 	bl	800486c <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d00d      	beq.n	8005012 <parse_array+0x6e>
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	689a      	ldr	r2, [r3, #8]
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	429a      	cmp	r2, r3
 8005000:	d207      	bcs.n	8005012 <parse_array+0x6e>
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	4413      	add	r3, r2
 800500c:	781b      	ldrb	r3, [r3, #0]
 800500e:	2b5d      	cmp	r3, #93	; 0x5d
 8005010:	d061      	beq.n	80050d6 <parse_array+0x132>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d005      	beq.n	8005024 <parse_array+0x80>
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	689a      	ldr	r2, [r3, #8]
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	429a      	cmp	r2, r3
 8005022:	d305      	bcc.n	8005030 <parse_array+0x8c>
    {
        input_buffer->offset--;
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	1e5a      	subs	r2, r3, #1
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	609a      	str	r2, [r3, #8]
        goto fail;
 800502e:	e072      	b.n	8005116 <parse_array+0x172>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	1e5a      	subs	r2, r3, #1
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	3310      	adds	r3, #16
 800503e:	4618      	mov	r0, r3
 8005040:	f7fe fd10 	bl	8003a64 <cJSON_New_Item>
 8005044:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d05f      	beq.n	800510c <parse_array+0x168>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d104      	bne.n	800505c <parse_array+0xb8>
        {
            /* start the linked list */
            current_item = head = new_item;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	617b      	str	r3, [r7, #20]
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	613b      	str	r3, [r7, #16]
 800505a:	e007      	b.n	800506c <parse_array+0xc8>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	68fa      	ldr	r2, [r7, #12]
 8005060:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	693a      	ldr	r2, [r7, #16]
 8005066:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	1c5a      	adds	r2, r3, #1
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8005076:	6838      	ldr	r0, [r7, #0]
 8005078:	f7ff fbf8 	bl	800486c <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 800507c:	6839      	ldr	r1, [r7, #0]
 800507e:	6938      	ldr	r0, [r7, #16]
 8005080:	f7ff fdc0 	bl	8004c04 <parse_value>
 8005084:	4603      	mov	r3, r0
 8005086:	2b00      	cmp	r3, #0
 8005088:	d042      	beq.n	8005110 <parse_array+0x16c>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 800508a:	6838      	ldr	r0, [r7, #0]
 800508c:	f7ff fbee 	bl	800486c <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d00d      	beq.n	80050b2 <parse_array+0x10e>
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	689a      	ldr	r2, [r3, #8]
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	429a      	cmp	r2, r3
 80050a0:	d207      	bcs.n	80050b2 <parse_array+0x10e>
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	4413      	add	r3, r2
 80050ac:	781b      	ldrb	r3, [r3, #0]
 80050ae:	2b2c      	cmp	r3, #44	; 0x2c
 80050b0:	d0c3      	beq.n	800503a <parse_array+0x96>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d02d      	beq.n	8005114 <parse_array+0x170>
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	689a      	ldr	r2, [r3, #8]
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d227      	bcs.n	8005114 <parse_array+0x170>
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	4413      	add	r3, r2
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	2b5d      	cmp	r3, #93	; 0x5d
 80050d2:	d11f      	bne.n	8005114 <parse_array+0x170>
    {
        goto fail; /* expected end of array */
    }

success:
 80050d4:	e000      	b.n	80050d8 <parse_array+0x134>
        goto success;
 80050d6:	bf00      	nop
    input_buffer->depth--;
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	1e5a      	subs	r2, r3, #1
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d002      	beq.n	80050ee <parse_array+0x14a>
        head->prev = current_item;
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	693a      	ldr	r2, [r7, #16]
 80050ec:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Array;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2220      	movs	r2, #32
 80050f2:	60da      	str	r2, [r3, #12]
    item->child = head;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	697a      	ldr	r2, [r7, #20]
 80050f8:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	1c5a      	adds	r2, r3, #1
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	609a      	str	r2, [r3, #8]

    return true;
 8005104:	2301      	movs	r3, #1
 8005106:	e00d      	b.n	8005124 <parse_array+0x180>
        goto fail;
 8005108:	bf00      	nop
 800510a:	e004      	b.n	8005116 <parse_array+0x172>
            goto fail; /* allocation failure */
 800510c:	bf00      	nop
 800510e:	e002      	b.n	8005116 <parse_array+0x172>
            goto fail; /* failed to parse value */
 8005110:	bf00      	nop
 8005112:	e000      	b.n	8005116 <parse_array+0x172>
        goto fail; /* expected end of array */
 8005114:	bf00      	nop

fail:
    if (head != NULL)
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d002      	beq.n	8005122 <parse_array+0x17e>
    {
        cJSON_Delete(head);
 800511c:	6978      	ldr	r0, [r7, #20]
 800511e:	f7fe fcb7 	bl	8003a90 <cJSON_Delete>
    }

    return false;
 8005122:	2300      	movs	r3, #0
}
 8005124:	4618      	mov	r0, r3
 8005126:	3718      	adds	r7, #24
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}

0800512c <print_array>:

/* Render an array to text */
static cJSON_bool print_array(const cJSON * const item, printbuffer * const output_buffer)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b086      	sub	sp, #24
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 8005136:	2300      	movs	r3, #0
 8005138:	617b      	str	r3, [r7, #20]
    size_t length = 0;
 800513a:	2300      	movs	r3, #0
 800513c:	60fb      	str	r3, [r7, #12]
    cJSON *current_element = item->child;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	613b      	str	r3, [r7, #16]

    if (output_buffer == NULL)
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d101      	bne.n	800514e <print_array+0x22>
    {
        return false;
 800514a:	2300      	movs	r3, #0
 800514c:	e070      	b.n	8005230 <print_array+0x104>
    }

    /* Compose the output array. */
    /* opening square bracket */
    output_pointer = ensure(output_buffer, 1);
 800514e:	2101      	movs	r1, #1
 8005150:	6838      	ldr	r0, [r7, #0]
 8005152:	f7fe fddf 	bl	8003d14 <ensure>
 8005156:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d101      	bne.n	8005162 <print_array+0x36>
    {
        return false;
 800515e:	2300      	movs	r3, #0
 8005160:	e066      	b.n	8005230 <print_array+0x104>
    }

    *output_pointer = '[';
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	225b      	movs	r2, #91	; 0x5b
 8005166:	701a      	strb	r2, [r3, #0]
    output_buffer->offset++;
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	1c5a      	adds	r2, r3, #1
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	609a      	str	r2, [r3, #8]
    output_buffer->depth++;
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	68db      	ldr	r3, [r3, #12]
 8005176:	1c5a      	adds	r2, r3, #1
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	60da      	str	r2, [r3, #12]

    while (current_element != NULL)
 800517c:	e03d      	b.n	80051fa <print_array+0xce>
    {
        if (!print_value(current_element, output_buffer))
 800517e:	6839      	ldr	r1, [r7, #0]
 8005180:	6938      	ldr	r0, [r7, #16]
 8005182:	f7ff fe2b 	bl	8004ddc <print_value>
 8005186:	4603      	mov	r3, r0
 8005188:	2b00      	cmp	r3, #0
 800518a:	d101      	bne.n	8005190 <print_array+0x64>
        {
            return false;
 800518c:	2300      	movs	r3, #0
 800518e:	e04f      	b.n	8005230 <print_array+0x104>
        }
        update_offset(output_buffer);
 8005190:	6838      	ldr	r0, [r7, #0]
 8005192:	f7fe fe5c 	bl	8003e4e <update_offset>
        if (current_element->next)
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d02a      	beq.n	80051f4 <print_array+0xc8>
        {
            length = (size_t) (output_buffer->format ? 2 : 1);
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	695b      	ldr	r3, [r3, #20]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d001      	beq.n	80051aa <print_array+0x7e>
 80051a6:	2302      	movs	r3, #2
 80051a8:	e000      	b.n	80051ac <print_array+0x80>
 80051aa:	2301      	movs	r3, #1
 80051ac:	60fb      	str	r3, [r7, #12]
            output_pointer = ensure(output_buffer, length + 1);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	3301      	adds	r3, #1
 80051b2:	4619      	mov	r1, r3
 80051b4:	6838      	ldr	r0, [r7, #0]
 80051b6:	f7fe fdad 	bl	8003d14 <ensure>
 80051ba:	6178      	str	r0, [r7, #20]
            if (output_pointer == NULL)
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d101      	bne.n	80051c6 <print_array+0x9a>
            {
                return false;
 80051c2:	2300      	movs	r3, #0
 80051c4:	e034      	b.n	8005230 <print_array+0x104>
            }
            *output_pointer++ = ',';
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	1c5a      	adds	r2, r3, #1
 80051ca:	617a      	str	r2, [r7, #20]
 80051cc:	222c      	movs	r2, #44	; 0x2c
 80051ce:	701a      	strb	r2, [r3, #0]
            if(output_buffer->format)
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	695b      	ldr	r3, [r3, #20]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d004      	beq.n	80051e2 <print_array+0xb6>
            {
                *output_pointer++ = ' ';
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	1c5a      	adds	r2, r3, #1
 80051dc:	617a      	str	r2, [r7, #20]
 80051de:	2220      	movs	r2, #32
 80051e0:	701a      	strb	r2, [r3, #0]
            }
            *output_pointer = '\0';
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	2200      	movs	r2, #0
 80051e6:	701a      	strb	r2, [r3, #0]
            output_buffer->offset += length;
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	689a      	ldr	r2, [r3, #8]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	441a      	add	r2, r3
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	609a      	str	r2, [r3, #8]
        }
        current_element = current_element->next;
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	613b      	str	r3, [r7, #16]
    while (current_element != NULL)
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d1be      	bne.n	800517e <print_array+0x52>
    }

    output_pointer = ensure(output_buffer, 2);
 8005200:	2102      	movs	r1, #2
 8005202:	6838      	ldr	r0, [r7, #0]
 8005204:	f7fe fd86 	bl	8003d14 <ensure>
 8005208:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d101      	bne.n	8005214 <print_array+0xe8>
    {
        return false;
 8005210:	2300      	movs	r3, #0
 8005212:	e00d      	b.n	8005230 <print_array+0x104>
    }
    *output_pointer++ = ']';
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	1c5a      	adds	r2, r3, #1
 8005218:	617a      	str	r2, [r7, #20]
 800521a:	225d      	movs	r2, #93	; 0x5d
 800521c:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	2200      	movs	r2, #0
 8005222:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	1e5a      	subs	r2, r3, #1
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	60da      	str	r2, [r3, #12]

    return true;
 800522e:	2301      	movs	r3, #1
}
 8005230:	4618      	mov	r0, r3
 8005232:	3718      	adds	r7, #24
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}

08005238 <parse_object>:

/* Build an object from the text. */
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b086      	sub	sp, #24
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* linked list head */
 8005242:	2300      	movs	r3, #0
 8005244:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8005246:	2300      	movs	r3, #0
 8005248:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	68db      	ldr	r3, [r3, #12]
 800524e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005252:	d301      	bcc.n	8005258 <parse_object+0x20>
    {
        return false; /* to deeply nested */
 8005254:	2300      	movs	r3, #0
 8005256:	e0ea      	b.n	800542e <parse_object+0x1f6>
    }
    input_buffer->depth++;
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	1c5a      	adds	r2, r3, #1
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	2b00      	cmp	r3, #0
 8005266:	f000 80d0 	beq.w	800540a <parse_object+0x1d2>
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	689a      	ldr	r2, [r3, #8]
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	429a      	cmp	r2, r3
 8005274:	f080 80c9 	bcs.w	800540a <parse_object+0x1d2>
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	4413      	add	r3, r2
 8005282:	781b      	ldrb	r3, [r3, #0]
 8005284:	2b7b      	cmp	r3, #123	; 0x7b
 8005286:	f040 80c0 	bne.w	800540a <parse_object+0x1d2>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	1c5a      	adds	r2, r3, #1
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8005294:	6838      	ldr	r0, [r7, #0]
 8005296:	f7ff fae9 	bl	800486c <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d00e      	beq.n	80052be <parse_object+0x86>
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	689a      	ldr	r2, [r3, #8]
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d208      	bcs.n	80052be <parse_object+0x86>
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	4413      	add	r3, r2
 80052b6:	781b      	ldrb	r3, [r3, #0]
 80052b8:	2b7d      	cmp	r3, #125	; 0x7d
 80052ba:	f000 808d 	beq.w	80053d8 <parse_object+0x1a0>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d005      	beq.n	80052d0 <parse_object+0x98>
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	689a      	ldr	r2, [r3, #8]
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d305      	bcc.n	80052dc <parse_object+0xa4>
    {
        input_buffer->offset--;
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	1e5a      	subs	r2, r3, #1
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	609a      	str	r2, [r3, #8]
        goto fail;
 80052da:	e0a1      	b.n	8005420 <parse_object+0x1e8>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	1e5a      	subs	r2, r3, #1
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	3310      	adds	r3, #16
 80052ea:	4618      	mov	r0, r3
 80052ec:	f7fe fbba 	bl	8003a64 <cJSON_New_Item>
 80052f0:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	f000 808a 	beq.w	800540e <parse_object+0x1d6>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d104      	bne.n	800530a <parse_object+0xd2>
        {
            /* start the linked list */
            current_item = head = new_item;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	617b      	str	r3, [r7, #20]
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	613b      	str	r3, [r7, #16]
 8005308:	e007      	b.n	800531a <parse_object+0xe2>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	68fa      	ldr	r2, [r7, #12]
 800530e:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	693a      	ldr	r2, [r7, #16]
 8005314:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	613b      	str	r3, [r7, #16]
        }

        /* parse the name of the child */
        input_buffer->offset++;
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	1c5a      	adds	r2, r3, #1
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8005324:	6838      	ldr	r0, [r7, #0]
 8005326:	f7ff faa1 	bl	800486c <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 800532a:	6839      	ldr	r1, [r7, #0]
 800532c:	6938      	ldr	r0, [r7, #16]
 800532e:	f7ff f817 	bl	8004360 <parse_string>
 8005332:	4603      	mov	r3, r0
 8005334:	2b00      	cmp	r3, #0
 8005336:	d06c      	beq.n	8005412 <parse_object+0x1da>
        {
            goto fail; /* failed to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 8005338:	6838      	ldr	r0, [r7, #0]
 800533a:	f7ff fa97 	bl	800486c <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	691a      	ldr	r2, [r3, #16]
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	2200      	movs	r2, #0
 800534a:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d061      	beq.n	8005416 <parse_object+0x1de>
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	689a      	ldr	r2, [r3, #8]
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	429a      	cmp	r2, r3
 800535c:	d25b      	bcs.n	8005416 <parse_object+0x1de>
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	4413      	add	r3, r2
 8005368:	781b      	ldrb	r3, [r3, #0]
 800536a:	2b3a      	cmp	r3, #58	; 0x3a
 800536c:	d153      	bne.n	8005416 <parse_object+0x1de>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	1c5a      	adds	r2, r3, #1
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8005378:	6838      	ldr	r0, [r7, #0]
 800537a:	f7ff fa77 	bl	800486c <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 800537e:	6839      	ldr	r1, [r7, #0]
 8005380:	6938      	ldr	r0, [r7, #16]
 8005382:	f7ff fc3f 	bl	8004c04 <parse_value>
 8005386:	4603      	mov	r3, r0
 8005388:	2b00      	cmp	r3, #0
 800538a:	d046      	beq.n	800541a <parse_object+0x1e2>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 800538c:	6838      	ldr	r0, [r7, #0]
 800538e:	f7ff fa6d 	bl	800486c <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d00d      	beq.n	80053b4 <parse_object+0x17c>
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	689a      	ldr	r2, [r3, #8]
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d207      	bcs.n	80053b4 <parse_object+0x17c>
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	4413      	add	r3, r2
 80053ae:	781b      	ldrb	r3, [r3, #0]
 80053b0:	2b2c      	cmp	r3, #44	; 0x2c
 80053b2:	d098      	beq.n	80052e6 <parse_object+0xae>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d031      	beq.n	800541e <parse_object+0x1e6>
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	689a      	ldr	r2, [r3, #8]
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	429a      	cmp	r2, r3
 80053c4:	d22b      	bcs.n	800541e <parse_object+0x1e6>
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	4413      	add	r3, r2
 80053d0:	781b      	ldrb	r3, [r3, #0]
 80053d2:	2b7d      	cmp	r3, #125	; 0x7d
 80053d4:	d123      	bne.n	800541e <parse_object+0x1e6>
    {
        goto fail; /* expected end of object */
    }

success:
 80053d6:	e000      	b.n	80053da <parse_object+0x1a2>
        goto success; /* empty object */
 80053d8:	bf00      	nop
    input_buffer->depth--;
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	68db      	ldr	r3, [r3, #12]
 80053de:	1e5a      	subs	r2, r3, #1
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d002      	beq.n	80053f0 <parse_object+0x1b8>
        head->prev = current_item;
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	693a      	ldr	r2, [r7, #16]
 80053ee:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Object;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2240      	movs	r2, #64	; 0x40
 80053f4:	60da      	str	r2, [r3, #12]
    item->child = head;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	697a      	ldr	r2, [r7, #20]
 80053fa:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	1c5a      	adds	r2, r3, #1
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	609a      	str	r2, [r3, #8]
    return true;
 8005406:	2301      	movs	r3, #1
 8005408:	e011      	b.n	800542e <parse_object+0x1f6>
        goto fail; /* not an object */
 800540a:	bf00      	nop
 800540c:	e008      	b.n	8005420 <parse_object+0x1e8>
            goto fail; /* allocation failure */
 800540e:	bf00      	nop
 8005410:	e006      	b.n	8005420 <parse_object+0x1e8>
            goto fail; /* failed to parse name */
 8005412:	bf00      	nop
 8005414:	e004      	b.n	8005420 <parse_object+0x1e8>
            goto fail; /* invalid object */
 8005416:	bf00      	nop
 8005418:	e002      	b.n	8005420 <parse_object+0x1e8>
            goto fail; /* failed to parse value */
 800541a:	bf00      	nop
 800541c:	e000      	b.n	8005420 <parse_object+0x1e8>
        goto fail; /* expected end of object */
 800541e:	bf00      	nop

fail:
    if (head != NULL)
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d002      	beq.n	800542c <parse_object+0x1f4>
    {
        cJSON_Delete(head);
 8005426:	6978      	ldr	r0, [r7, #20]
 8005428:	f7fe fb32 	bl	8003a90 <cJSON_Delete>
    }

    return false;
 800542c:	2300      	movs	r3, #0
}
 800542e:	4618      	mov	r0, r3
 8005430:	3718      	adds	r7, #24
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}

08005436 <print_object>:

/* Render an object to text. */
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer)
{
 8005436:	b580      	push	{r7, lr}
 8005438:	b088      	sub	sp, #32
 800543a:	af00      	add	r7, sp, #0
 800543c:	6078      	str	r0, [r7, #4]
 800543e:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 8005440:	2300      	movs	r3, #0
 8005442:	61fb      	str	r3, [r7, #28]
    size_t length = 0;
 8005444:	2300      	movs	r3, #0
 8005446:	60fb      	str	r3, [r7, #12]
    cJSON *current_item = item->child;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	61bb      	str	r3, [r7, #24]

    if (output_buffer == NULL)
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d101      	bne.n	8005458 <print_object+0x22>
    {
        return false;
 8005454:	2300      	movs	r3, #0
 8005456:	e108      	b.n	800566a <print_object+0x234>
    }

    /* Compose the output: */
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	695b      	ldr	r3, [r3, #20]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d001      	beq.n	8005464 <print_object+0x2e>
 8005460:	2302      	movs	r3, #2
 8005462:	e000      	b.n	8005466 <print_object+0x30>
 8005464:	2301      	movs	r3, #1
 8005466:	60fb      	str	r3, [r7, #12]
    output_pointer = ensure(output_buffer, length + 1);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	3301      	adds	r3, #1
 800546c:	4619      	mov	r1, r3
 800546e:	6838      	ldr	r0, [r7, #0]
 8005470:	f7fe fc50 	bl	8003d14 <ensure>
 8005474:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 8005476:	69fb      	ldr	r3, [r7, #28]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d101      	bne.n	8005480 <print_object+0x4a>
    {
        return false;
 800547c:	2300      	movs	r3, #0
 800547e:	e0f4      	b.n	800566a <print_object+0x234>
    }

    *output_pointer++ = '{';
 8005480:	69fb      	ldr	r3, [r7, #28]
 8005482:	1c5a      	adds	r2, r3, #1
 8005484:	61fa      	str	r2, [r7, #28]
 8005486:	227b      	movs	r2, #123	; 0x7b
 8005488:	701a      	strb	r2, [r3, #0]
    output_buffer->depth++;
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	68db      	ldr	r3, [r3, #12]
 800548e:	1c5a      	adds	r2, r3, #1
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	60da      	str	r2, [r3, #12]
    if (output_buffer->format)
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	695b      	ldr	r3, [r3, #20]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d004      	beq.n	80054a6 <print_object+0x70>
    {
        *output_pointer++ = '\n';
 800549c:	69fb      	ldr	r3, [r7, #28]
 800549e:	1c5a      	adds	r2, r3, #1
 80054a0:	61fa      	str	r2, [r7, #28]
 80054a2:	220a      	movs	r2, #10
 80054a4:	701a      	strb	r2, [r3, #0]
    }
    output_buffer->offset += length;
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	689a      	ldr	r2, [r3, #8]
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	441a      	add	r2, r3
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	609a      	str	r2, [r3, #8]

    while (current_item)
 80054b2:	e0a0      	b.n	80055f6 <print_object+0x1c0>
    {
        if (output_buffer->format)
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	695b      	ldr	r3, [r3, #20]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d022      	beq.n	8005502 <print_object+0xcc>
        {
            size_t i;
            output_pointer = ensure(output_buffer, output_buffer->depth);
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	4619      	mov	r1, r3
 80054c2:	6838      	ldr	r0, [r7, #0]
 80054c4:	f7fe fc26 	bl	8003d14 <ensure>
 80054c8:	61f8      	str	r0, [r7, #28]
            if (output_pointer == NULL)
 80054ca:	69fb      	ldr	r3, [r7, #28]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d101      	bne.n	80054d4 <print_object+0x9e>
            {
                return false;
 80054d0:	2300      	movs	r3, #0
 80054d2:	e0ca      	b.n	800566a <print_object+0x234>
            }
            for (i = 0; i < output_buffer->depth; i++)
 80054d4:	2300      	movs	r3, #0
 80054d6:	617b      	str	r3, [r7, #20]
 80054d8:	e007      	b.n	80054ea <print_object+0xb4>
            {
                *output_pointer++ = '\t';
 80054da:	69fb      	ldr	r3, [r7, #28]
 80054dc:	1c5a      	adds	r2, r3, #1
 80054de:	61fa      	str	r2, [r7, #28]
 80054e0:	2209      	movs	r2, #9
 80054e2:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < output_buffer->depth; i++)
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	3301      	adds	r3, #1
 80054e8:	617b      	str	r3, [r7, #20]
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	68db      	ldr	r3, [r3, #12]
 80054ee:	697a      	ldr	r2, [r7, #20]
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d3f2      	bcc.n	80054da <print_object+0xa4>
            }
            output_buffer->offset += output_buffer->depth;
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	689a      	ldr	r2, [r3, #8]
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	68db      	ldr	r3, [r3, #12]
 80054fc:	441a      	add	r2, r3
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	609a      	str	r2, [r3, #8]
        }

        /* print key */
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
 8005502:	69bb      	ldr	r3, [r7, #24]
 8005504:	6a1b      	ldr	r3, [r3, #32]
 8005506:	6839      	ldr	r1, [r7, #0]
 8005508:	4618      	mov	r0, r3
 800550a:	f7ff f86f 	bl	80045ec <print_string_ptr>
 800550e:	4603      	mov	r3, r0
 8005510:	2b00      	cmp	r3, #0
 8005512:	d101      	bne.n	8005518 <print_object+0xe2>
        {
            return false;
 8005514:	2300      	movs	r3, #0
 8005516:	e0a8      	b.n	800566a <print_object+0x234>
        }
        update_offset(output_buffer);
 8005518:	6838      	ldr	r0, [r7, #0]
 800551a:	f7fe fc98 	bl	8003e4e <update_offset>

        length = (size_t) (output_buffer->format ? 2 : 1);
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	695b      	ldr	r3, [r3, #20]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d001      	beq.n	800552a <print_object+0xf4>
 8005526:	2302      	movs	r3, #2
 8005528:	e000      	b.n	800552c <print_object+0xf6>
 800552a:	2301      	movs	r3, #1
 800552c:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length);
 800552e:	68f9      	ldr	r1, [r7, #12]
 8005530:	6838      	ldr	r0, [r7, #0]
 8005532:	f7fe fbef 	bl	8003d14 <ensure>
 8005536:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d101      	bne.n	8005542 <print_object+0x10c>
        {
            return false;
 800553e:	2300      	movs	r3, #0
 8005540:	e093      	b.n	800566a <print_object+0x234>
        }
        *output_pointer++ = ':';
 8005542:	69fb      	ldr	r3, [r7, #28]
 8005544:	1c5a      	adds	r2, r3, #1
 8005546:	61fa      	str	r2, [r7, #28]
 8005548:	223a      	movs	r2, #58	; 0x3a
 800554a:	701a      	strb	r2, [r3, #0]
        if (output_buffer->format)
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	695b      	ldr	r3, [r3, #20]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d004      	beq.n	800555e <print_object+0x128>
        {
            *output_pointer++ = '\t';
 8005554:	69fb      	ldr	r3, [r7, #28]
 8005556:	1c5a      	adds	r2, r3, #1
 8005558:	61fa      	str	r2, [r7, #28]
 800555a:	2209      	movs	r2, #9
 800555c:	701a      	strb	r2, [r3, #0]
        }
        output_buffer->offset += length;
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	689a      	ldr	r2, [r3, #8]
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	441a      	add	r2, r3
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	609a      	str	r2, [r3, #8]

        /* print value */
        if (!print_value(current_item, output_buffer))
 800556a:	6839      	ldr	r1, [r7, #0]
 800556c:	69b8      	ldr	r0, [r7, #24]
 800556e:	f7ff fc35 	bl	8004ddc <print_value>
 8005572:	4603      	mov	r3, r0
 8005574:	2b00      	cmp	r3, #0
 8005576:	d101      	bne.n	800557c <print_object+0x146>
        {
            return false;
 8005578:	2300      	movs	r3, #0
 800557a:	e076      	b.n	800566a <print_object+0x234>
        }
        update_offset(output_buffer);
 800557c:	6838      	ldr	r0, [r7, #0]
 800557e:	f7fe fc66 	bl	8003e4e <update_offset>

        /* print comma if not last */
        length = ((size_t)(output_buffer->format ? 1 : 0) + (size_t)(current_item->next ? 1 : 0));
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	695b      	ldr	r3, [r3, #20]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d001      	beq.n	800558e <print_object+0x158>
 800558a:	2201      	movs	r2, #1
 800558c:	e000      	b.n	8005590 <print_object+0x15a>
 800558e:	2200      	movs	r2, #0
 8005590:	69bb      	ldr	r3, [r7, #24]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d001      	beq.n	800559c <print_object+0x166>
 8005598:	2301      	movs	r3, #1
 800559a:	e000      	b.n	800559e <print_object+0x168>
 800559c:	2300      	movs	r3, #0
 800559e:	4413      	add	r3, r2
 80055a0:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length + 1);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	3301      	adds	r3, #1
 80055a6:	4619      	mov	r1, r3
 80055a8:	6838      	ldr	r0, [r7, #0]
 80055aa:	f7fe fbb3 	bl	8003d14 <ensure>
 80055ae:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 80055b0:	69fb      	ldr	r3, [r7, #28]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d101      	bne.n	80055ba <print_object+0x184>
        {
            return false;
 80055b6:	2300      	movs	r3, #0
 80055b8:	e057      	b.n	800566a <print_object+0x234>
        }
        if (current_item->next)
 80055ba:	69bb      	ldr	r3, [r7, #24]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d004      	beq.n	80055cc <print_object+0x196>
        {
            *output_pointer++ = ',';
 80055c2:	69fb      	ldr	r3, [r7, #28]
 80055c4:	1c5a      	adds	r2, r3, #1
 80055c6:	61fa      	str	r2, [r7, #28]
 80055c8:	222c      	movs	r2, #44	; 0x2c
 80055ca:	701a      	strb	r2, [r3, #0]
        }

        if (output_buffer->format)
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	695b      	ldr	r3, [r3, #20]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d004      	beq.n	80055de <print_object+0x1a8>
        {
            *output_pointer++ = '\n';
 80055d4:	69fb      	ldr	r3, [r7, #28]
 80055d6:	1c5a      	adds	r2, r3, #1
 80055d8:	61fa      	str	r2, [r7, #28]
 80055da:	220a      	movs	r2, #10
 80055dc:	701a      	strb	r2, [r3, #0]
        }
        *output_pointer = '\0';
 80055de:	69fb      	ldr	r3, [r7, #28]
 80055e0:	2200      	movs	r2, #0
 80055e2:	701a      	strb	r2, [r3, #0]
        output_buffer->offset += length;
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	689a      	ldr	r2, [r3, #8]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	441a      	add	r2, r3
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	609a      	str	r2, [r3, #8]

        current_item = current_item->next;
 80055f0:	69bb      	ldr	r3, [r7, #24]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	61bb      	str	r3, [r7, #24]
    while (current_item)
 80055f6:	69bb      	ldr	r3, [r7, #24]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	f47f af5b 	bne.w	80054b4 <print_object+0x7e>
    }

    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	695b      	ldr	r3, [r3, #20]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d003      	beq.n	800560e <print_object+0x1d8>
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	68db      	ldr	r3, [r3, #12]
 800560a:	3301      	adds	r3, #1
 800560c:	e000      	b.n	8005610 <print_object+0x1da>
 800560e:	2302      	movs	r3, #2
 8005610:	4619      	mov	r1, r3
 8005612:	6838      	ldr	r0, [r7, #0]
 8005614:	f7fe fb7e 	bl	8003d14 <ensure>
 8005618:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 800561a:	69fb      	ldr	r3, [r7, #28]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d101      	bne.n	8005624 <print_object+0x1ee>
    {
        return false;
 8005620:	2300      	movs	r3, #0
 8005622:	e022      	b.n	800566a <print_object+0x234>
    }
    if (output_buffer->format)
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	695b      	ldr	r3, [r3, #20]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d010      	beq.n	800564e <print_object+0x218>
    {
        size_t i;
        for (i = 0; i < (output_buffer->depth - 1); i++)
 800562c:	2300      	movs	r3, #0
 800562e:	613b      	str	r3, [r7, #16]
 8005630:	e007      	b.n	8005642 <print_object+0x20c>
        {
            *output_pointer++ = '\t';
 8005632:	69fb      	ldr	r3, [r7, #28]
 8005634:	1c5a      	adds	r2, r3, #1
 8005636:	61fa      	str	r2, [r7, #28]
 8005638:	2209      	movs	r2, #9
 800563a:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < (output_buffer->depth - 1); i++)
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	3301      	adds	r3, #1
 8005640:	613b      	str	r3, [r7, #16]
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	68db      	ldr	r3, [r3, #12]
 8005646:	3b01      	subs	r3, #1
 8005648:	693a      	ldr	r2, [r7, #16]
 800564a:	429a      	cmp	r2, r3
 800564c:	d3f1      	bcc.n	8005632 <print_object+0x1fc>
        }
    }
    *output_pointer++ = '}';
 800564e:	69fb      	ldr	r3, [r7, #28]
 8005650:	1c5a      	adds	r2, r3, #1
 8005652:	61fa      	str	r2, [r7, #28]
 8005654:	227d      	movs	r2, #125	; 0x7d
 8005656:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 8005658:	69fb      	ldr	r3, [r7, #28]
 800565a:	2200      	movs	r2, #0
 800565c:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	68db      	ldr	r3, [r3, #12]
 8005662:	1e5a      	subs	r2, r3, #1
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	60da      	str	r2, [r3, #12]

    return true;
 8005668:	2301      	movs	r3, #1
}
 800566a:	4618      	mov	r0, r3
 800566c:	3720      	adds	r7, #32
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}

08005672 <cJSON_GetArraySize>:

/* Get Array size/item / object item. */
CJSON_PUBLIC(int) cJSON_GetArraySize(const cJSON *array)
{
 8005672:	b480      	push	{r7}
 8005674:	b085      	sub	sp, #20
 8005676:	af00      	add	r7, sp, #0
 8005678:	6078      	str	r0, [r7, #4]
    cJSON *child = NULL;
 800567a:	2300      	movs	r3, #0
 800567c:	60fb      	str	r3, [r7, #12]
    size_t size = 0;
 800567e:	2300      	movs	r3, #0
 8005680:	60bb      	str	r3, [r7, #8]

    if (array == NULL)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d101      	bne.n	800568c <cJSON_GetArraySize+0x1a>
    {
        return 0;
 8005688:	2300      	movs	r3, #0
 800568a:	e00d      	b.n	80056a8 <cJSON_GetArraySize+0x36>
    }

    child = array->child;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	60fb      	str	r3, [r7, #12]

    while(child != NULL)
 8005692:	e005      	b.n	80056a0 <cJSON_GetArraySize+0x2e>
    {
        size++;
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	3301      	adds	r3, #1
 8005698:	60bb      	str	r3, [r7, #8]
        child = child->next;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	60fb      	str	r3, [r7, #12]
    while(child != NULL)
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d1f6      	bne.n	8005694 <cJSON_GetArraySize+0x22>
    }

    /* FIXME: Can overflow here. Cannot be fixed without breaking the API */

    return (int)size;
 80056a6:	68bb      	ldr	r3, [r7, #8]
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3714      	adds	r7, #20
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr

080056b4 <get_array_item>:

static cJSON* get_array_item(const cJSON *array, size_t index)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b085      	sub	sp, #20
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
 80056bc:	6039      	str	r1, [r7, #0]
    cJSON *current_child = NULL;
 80056be:	2300      	movs	r3, #0
 80056c0:	60fb      	str	r3, [r7, #12]

    if (array == NULL)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d101      	bne.n	80056cc <get_array_item+0x18>
    {
        return NULL;
 80056c8:	2300      	movs	r3, #0
 80056ca:	e010      	b.n	80056ee <get_array_item+0x3a>
    }

    current_child = array->child;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	60fb      	str	r3, [r7, #12]
    while ((current_child != NULL) && (index > 0))
 80056d2:	e005      	b.n	80056e0 <get_array_item+0x2c>
    {
        index--;
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	3b01      	subs	r3, #1
 80056d8:	603b      	str	r3, [r7, #0]
        current_child = current_child->next;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	60fb      	str	r3, [r7, #12]
    while ((current_child != NULL) && (index > 0))
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d002      	beq.n	80056ec <get_array_item+0x38>
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d1f3      	bne.n	80056d4 <get_array_item+0x20>
    }

    return current_child;
 80056ec:	68fb      	ldr	r3, [r7, #12]
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3714      	adds	r7, #20
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr

080056fa <cJSON_GetArrayItem>:

CJSON_PUBLIC(cJSON *) cJSON_GetArrayItem(const cJSON *array, int index)
{
 80056fa:	b580      	push	{r7, lr}
 80056fc:	b082      	sub	sp, #8
 80056fe:	af00      	add	r7, sp, #0
 8005700:	6078      	str	r0, [r7, #4]
 8005702:	6039      	str	r1, [r7, #0]
    if (index < 0)
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	2b00      	cmp	r3, #0
 8005708:	da01      	bge.n	800570e <cJSON_GetArrayItem+0x14>
    {
        return NULL;
 800570a:	2300      	movs	r3, #0
 800570c:	e005      	b.n	800571a <cJSON_GetArrayItem+0x20>
    }

    return get_array_item(array, (size_t)index);
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	4619      	mov	r1, r3
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f7ff ffce 	bl	80056b4 <get_array_item>
 8005718:	4603      	mov	r3, r0
}
 800571a:	4618      	mov	r0, r3
 800571c:	3708      	adds	r7, #8
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}

08005722 <get_object_item>:

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 8005722:	b580      	push	{r7, lr}
 8005724:	b086      	sub	sp, #24
 8005726:	af00      	add	r7, sp, #0
 8005728:	60f8      	str	r0, [r7, #12]
 800572a:	60b9      	str	r1, [r7, #8]
 800572c:	607a      	str	r2, [r7, #4]
    cJSON *current_element = NULL;
 800572e:	2300      	movs	r3, #0
 8005730:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d002      	beq.n	800573e <get_object_item+0x1c>
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d101      	bne.n	8005742 <get_object_item+0x20>
    {
        return NULL;
 800573e:	2300      	movs	r3, #0
 8005740:	e033      	b.n	80057aa <get_object_item+0x88>
    }

    current_element = object->child;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d017      	beq.n	800577e <get_object_item+0x5c>
    {
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 800574e:	e002      	b.n	8005756 <get_object_item+0x34>
        {
            current_element = current_element->next;
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d01c      	beq.n	8005796 <get_object_item+0x74>
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	6a1b      	ldr	r3, [r3, #32]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d018      	beq.n	8005796 <get_object_item+0x74>
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	6a1b      	ldr	r3, [r3, #32]
 8005768:	4619      	mov	r1, r3
 800576a:	68b8      	ldr	r0, [r7, #8]
 800576c:	f7fa fd30 	bl	80001d0 <strcmp>
 8005770:	4603      	mov	r3, r0
 8005772:	2b00      	cmp	r3, #0
 8005774:	d1ec      	bne.n	8005750 <get_object_item+0x2e>
 8005776:	e00e      	b.n	8005796 <get_object_item+0x74>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d008      	beq.n	8005796 <get_object_item+0x74>
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	6a1b      	ldr	r3, [r3, #32]
 8005788:	4619      	mov	r1, r3
 800578a:	68b8      	ldr	r0, [r7, #8]
 800578c:	f7fe f8d6 	bl	800393c <case_insensitive_strcmp>
 8005790:	4603      	mov	r3, r0
 8005792:	2b00      	cmp	r3, #0
 8005794:	d1f0      	bne.n	8005778 <get_object_item+0x56>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d003      	beq.n	80057a4 <get_object_item+0x82>
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	6a1b      	ldr	r3, [r3, #32]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d101      	bne.n	80057a8 <get_object_item+0x86>
        return NULL;
 80057a4:	2300      	movs	r3, #0
 80057a6:	e000      	b.n	80057aa <get_object_item+0x88>
    }

    return current_element;
 80057a8:	697b      	ldr	r3, [r7, #20]
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3718      	adds	r7, #24
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}

080057b2 <cJSON_GetObjectItem>:

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItem(const cJSON * const object, const char * const string)
{
 80057b2:	b580      	push	{r7, lr}
 80057b4:	b082      	sub	sp, #8
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	6078      	str	r0, [r7, #4]
 80057ba:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, false);
 80057bc:	2200      	movs	r2, #0
 80057be:	6839      	ldr	r1, [r7, #0]
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f7ff ffae 	bl	8005722 <get_object_item>
 80057c6:	4603      	mov	r3, r0
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3708      	adds	r7, #8
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}

080057d0 <suffix_object>:
    return cJSON_GetObjectItem(object, string) ? 1 : 0;
}

/* Utility for array list handling. */
static void suffix_object(cJSON *prev, cJSON *item)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b083      	sub	sp, #12
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
 80057d8:	6039      	str	r1, [r7, #0]
    prev->next = item;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	683a      	ldr	r2, [r7, #0]
 80057de:	601a      	str	r2, [r3, #0]
    item->prev = prev;
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	605a      	str	r2, [r3, #4]
}
 80057e6:	bf00      	nop
 80057e8:	370c      	adds	r7, #12
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr

080057f2 <add_item_to_array>:
    reference->next = reference->prev = NULL;
    return reference;
}

static cJSON_bool add_item_to_array(cJSON *array, cJSON *item)
{
 80057f2:	b580      	push	{r7, lr}
 80057f4:	b084      	sub	sp, #16
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	6078      	str	r0, [r7, #4]
 80057fa:	6039      	str	r1, [r7, #0]
    cJSON *child = NULL;
 80057fc:	2300      	movs	r3, #0
 80057fe:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (array == NULL) || (array == item))
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d006      	beq.n	8005814 <add_item_to_array+0x22>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d003      	beq.n	8005814 <add_item_to_array+0x22>
 800580c:	687a      	ldr	r2, [r7, #4]
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	429a      	cmp	r2, r3
 8005812:	d101      	bne.n	8005818 <add_item_to_array+0x26>
    {
        return false;
 8005814:	2300      	movs	r3, #0
 8005816:	e01e      	b.n	8005856 <add_item_to_array+0x64>
    }

    child = array->child;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	60fb      	str	r3, [r7, #12]
    /*
     * To find the last item in array quickly, we use prev in array
     */
    if (child == NULL)
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d109      	bne.n	8005838 <add_item_to_array+0x46>
    {
        /* list is empty, start new one */
        array->child = item;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	683a      	ldr	r2, [r7, #0]
 8005828:	609a      	str	r2, [r3, #8]
        item->prev = item;
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	683a      	ldr	r2, [r7, #0]
 800582e:	605a      	str	r2, [r3, #4]
        item->next = NULL;
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	2200      	movs	r2, #0
 8005834:	601a      	str	r2, [r3, #0]
 8005836:	e00d      	b.n	8005854 <add_item_to_array+0x62>
    }
    else
    {
        /* append to the end */
        if (child->prev)
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d009      	beq.n	8005854 <add_item_to_array+0x62>
        {
            suffix_object(child->prev, item);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	6839      	ldr	r1, [r7, #0]
 8005846:	4618      	mov	r0, r3
 8005848:	f7ff ffc2 	bl	80057d0 <suffix_object>
            array->child->prev = item;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	683a      	ldr	r2, [r7, #0]
 8005852:	605a      	str	r2, [r3, #4]
        }
    }

    return true;
 8005854:	2301      	movs	r3, #1
}
 8005856:	4618      	mov	r0, r3
 8005858:	3710      	adds	r7, #16
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}

0800585e <cast_away_const>:
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wcast-qual"
#endif
/* helper function to cast away const */
static void* cast_away_const(const void* string)
{
 800585e:	b480      	push	{r7}
 8005860:	b083      	sub	sp, #12
 8005862:	af00      	add	r7, sp, #0
 8005864:	6078      	str	r0, [r7, #4]
    return (void*)string;
 8005866:	687b      	ldr	r3, [r7, #4]
}
 8005868:	4618      	mov	r0, r3
 800586a:	370c      	adds	r7, #12
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr

08005874 <add_item_to_object>:
    #pragma GCC diagnostic pop
#endif


static cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b086      	sub	sp, #24
 8005878:	af00      	add	r7, sp, #0
 800587a:	60f8      	str	r0, [r7, #12]
 800587c:	60b9      	str	r1, [r7, #8]
 800587e:	607a      	str	r2, [r7, #4]
 8005880:	603b      	str	r3, [r7, #0]
    char *new_key = NULL;
 8005882:	2300      	movs	r3, #0
 8005884:	617b      	str	r3, [r7, #20]
    int new_type = cJSON_Invalid;
 8005886:	2300      	movs	r3, #0
 8005888:	613b      	str	r3, [r7, #16]

    if ((object == NULL) || (string == NULL) || (item == NULL) || (object == item))
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d009      	beq.n	80058a4 <add_item_to_object+0x30>
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d006      	beq.n	80058a4 <add_item_to_object+0x30>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d003      	beq.n	80058a4 <add_item_to_object+0x30>
 800589c:	68fa      	ldr	r2, [r7, #12]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d101      	bne.n	80058a8 <add_item_to_object+0x34>
    {
        return false;
 80058a4:	2300      	movs	r3, #0
 80058a6:	e036      	b.n	8005916 <add_item_to_object+0xa2>
    }

    if (constant_key)
 80058a8:	6a3b      	ldr	r3, [r7, #32]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d009      	beq.n	80058c2 <add_item_to_object+0x4e>
    {
        new_key = (char*)cast_away_const(string);
 80058ae:	68b8      	ldr	r0, [r7, #8]
 80058b0:	f7ff ffd5 	bl	800585e <cast_away_const>
 80058b4:	6178      	str	r0, [r7, #20]
        new_type = item->type | cJSON_StringIsConst;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	68db      	ldr	r3, [r3, #12]
 80058ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80058be:	613b      	str	r3, [r7, #16]
 80058c0:	e00e      	b.n	80058e0 <add_item_to_object+0x6c>
    }
    else
    {
        new_key = (char*)cJSON_strdup((const unsigned char*)string, hooks);
 80058c2:	6839      	ldr	r1, [r7, #0]
 80058c4:	68b8      	ldr	r0, [r7, #8]
 80058c6:	f7fe f8a5 	bl	8003a14 <cJSON_strdup>
 80058ca:	6178      	str	r0, [r7, #20]
        if (new_key == NULL)
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d101      	bne.n	80058d6 <add_item_to_object+0x62>
        {
            return false;
 80058d2:	2300      	movs	r3, #0
 80058d4:	e01f      	b.n	8005916 <add_item_to_object+0xa2>
        }

        new_type = item->type & ~cJSON_StringIsConst;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	68db      	ldr	r3, [r3, #12]
 80058da:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80058de:	613b      	str	r3, [r7, #16]
    }

    if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	68db      	ldr	r3, [r3, #12]
 80058e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d109      	bne.n	8005900 <add_item_to_object+0x8c>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6a1b      	ldr	r3, [r3, #32]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d005      	beq.n	8005900 <add_item_to_object+0x8c>
    {
        hooks->deallocate(item->string);
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	687a      	ldr	r2, [r7, #4]
 80058fa:	6a12      	ldr	r2, [r2, #32]
 80058fc:	4610      	mov	r0, r2
 80058fe:	4798      	blx	r3
    }

    item->string = new_key;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	697a      	ldr	r2, [r7, #20]
 8005904:	621a      	str	r2, [r3, #32]
    item->type = new_type;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	693a      	ldr	r2, [r7, #16]
 800590a:	60da      	str	r2, [r3, #12]

    return add_item_to_array(object, item);
 800590c:	6879      	ldr	r1, [r7, #4]
 800590e:	68f8      	ldr	r0, [r7, #12]
 8005910:	f7ff ff6f 	bl	80057f2 <add_item_to_array>
 8005914:	4603      	mov	r3, r0
}
 8005916:	4618      	mov	r0, r3
 8005918:	3718      	adds	r7, #24
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}
	...

08005920 <cJSON_AddItemToObject>:

CJSON_PUBLIC(cJSON_bool) cJSON_AddItemToObject(cJSON *object, const char *string, cJSON *item)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b086      	sub	sp, #24
 8005924:	af02      	add	r7, sp, #8
 8005926:	60f8      	str	r0, [r7, #12]
 8005928:	60b9      	str	r1, [r7, #8]
 800592a:	607a      	str	r2, [r7, #4]
    return add_item_to_object(object, string, item, &global_hooks, false);
 800592c:	2300      	movs	r3, #0
 800592e:	9300      	str	r3, [sp, #0]
 8005930:	4b05      	ldr	r3, [pc, #20]	; (8005948 <cJSON_AddItemToObject+0x28>)
 8005932:	687a      	ldr	r2, [r7, #4]
 8005934:	68b9      	ldr	r1, [r7, #8]
 8005936:	68f8      	ldr	r0, [r7, #12]
 8005938:	f7ff ff9c 	bl	8005874 <add_item_to_object>
 800593c:	4603      	mov	r3, r0
}
 800593e:	4618      	mov	r0, r3
 8005940:	3710      	adds	r7, #16
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}
 8005946:	bf00      	nop
 8005948:	10000000 	.word	0x10000000

0800594c <cJSON_AddNumberToObject>:
    cJSON_Delete(bool_item);
    return NULL;
}

CJSON_PUBLIC(cJSON*) cJSON_AddNumberToObject(cJSON * const object, const char * const name, const double number)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b088      	sub	sp, #32
 8005950:	af02      	add	r7, sp, #8
 8005952:	60f8      	str	r0, [r7, #12]
 8005954:	60b9      	str	r1, [r7, #8]
 8005956:	ed87 0b00 	vstr	d0, [r7]
    cJSON *number_item = cJSON_CreateNumber(number);
 800595a:	ed97 0b00 	vldr	d0, [r7]
 800595e:	f000 f83b 	bl	80059d8 <cJSON_CreateNumber>
 8005962:	6178      	str	r0, [r7, #20]
    if (add_item_to_object(object, name, number_item, &global_hooks, false))
 8005964:	2300      	movs	r3, #0
 8005966:	9300      	str	r3, [sp, #0]
 8005968:	4b09      	ldr	r3, [pc, #36]	; (8005990 <cJSON_AddNumberToObject+0x44>)
 800596a:	697a      	ldr	r2, [r7, #20]
 800596c:	68b9      	ldr	r1, [r7, #8]
 800596e:	68f8      	ldr	r0, [r7, #12]
 8005970:	f7ff ff80 	bl	8005874 <add_item_to_object>
 8005974:	4603      	mov	r3, r0
 8005976:	2b00      	cmp	r3, #0
 8005978:	d001      	beq.n	800597e <cJSON_AddNumberToObject+0x32>
    {
        return number_item;
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	e003      	b.n	8005986 <cJSON_AddNumberToObject+0x3a>
    }

    cJSON_Delete(number_item);
 800597e:	6978      	ldr	r0, [r7, #20]
 8005980:	f7fe f886 	bl	8003a90 <cJSON_Delete>
    return NULL;
 8005984:	2300      	movs	r3, #0
}
 8005986:	4618      	mov	r0, r3
 8005988:	3718      	adds	r7, #24
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}
 800598e:	bf00      	nop
 8005990:	10000000 	.word	0x10000000

08005994 <cJSON_AddStringToObject>:

CJSON_PUBLIC(cJSON*) cJSON_AddStringToObject(cJSON * const object, const char * const name, const char * const string)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b088      	sub	sp, #32
 8005998:	af02      	add	r7, sp, #8
 800599a:	60f8      	str	r0, [r7, #12]
 800599c:	60b9      	str	r1, [r7, #8]
 800599e:	607a      	str	r2, [r7, #4]
    cJSON *string_item = cJSON_CreateString(string);
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f000 f861 	bl	8005a68 <cJSON_CreateString>
 80059a6:	6178      	str	r0, [r7, #20]
    if (add_item_to_object(object, name, string_item, &global_hooks, false))
 80059a8:	2300      	movs	r3, #0
 80059aa:	9300      	str	r3, [sp, #0]
 80059ac:	4b09      	ldr	r3, [pc, #36]	; (80059d4 <cJSON_AddStringToObject+0x40>)
 80059ae:	697a      	ldr	r2, [r7, #20]
 80059b0:	68b9      	ldr	r1, [r7, #8]
 80059b2:	68f8      	ldr	r0, [r7, #12]
 80059b4:	f7ff ff5e 	bl	8005874 <add_item_to_object>
 80059b8:	4603      	mov	r3, r0
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d001      	beq.n	80059c2 <cJSON_AddStringToObject+0x2e>
    {
        return string_item;
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	e003      	b.n	80059ca <cJSON_AddStringToObject+0x36>
    }

    cJSON_Delete(string_item);
 80059c2:	6978      	ldr	r0, [r7, #20]
 80059c4:	f7fe f864 	bl	8003a90 <cJSON_Delete>
    return NULL;
 80059c8:	2300      	movs	r3, #0
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3718      	adds	r7, #24
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}
 80059d2:	bf00      	nop
 80059d4:	10000000 	.word	0x10000000

080059d8 <cJSON_CreateNumber>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateNumber(double num)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b084      	sub	sp, #16
 80059dc:	af00      	add	r7, sp, #0
 80059de:	ed87 0b00 	vstr	d0, [r7]
    cJSON *item = cJSON_New_Item(&global_hooks);
 80059e2:	481f      	ldr	r0, [pc, #124]	; (8005a60 <cJSON_CreateNumber+0x88>)
 80059e4:	f7fe f83e 	bl	8003a64 <cJSON_New_Item>
 80059e8:	60f8      	str	r0, [r7, #12]
    if(item)
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d02c      	beq.n	8005a4a <cJSON_CreateNumber+0x72>
    {
        item->type = cJSON_Number;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2208      	movs	r2, #8
 80059f4:	60da      	str	r2, [r3, #12]
        item->valuedouble = num;
 80059f6:	68f9      	ldr	r1, [r7, #12]
 80059f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059fc:	e9c1 2306 	strd	r2, r3, [r1, #24]

        /* use saturation in case of overflow */
        if (num >= INT_MAX)
 8005a00:	a315      	add	r3, pc, #84	; (adr r3, 8005a58 <cJSON_CreateNumber+0x80>)
 8005a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a06:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a0a:	f7fb f88b 	bl	8000b24 <__aeabi_dcmpge>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d004      	beq.n	8005a1e <cJSON_CreateNumber+0x46>
        {
            item->valueint = INT_MAX;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8005a1a:	615a      	str	r2, [r3, #20]
 8005a1c:	e015      	b.n	8005a4a <cJSON_CreateNumber+0x72>
        }
        else if (num <= (double)INT_MIN)
 8005a1e:	f04f 0200 	mov.w	r2, #0
 8005a22:	4b10      	ldr	r3, [pc, #64]	; (8005a64 <cJSON_CreateNumber+0x8c>)
 8005a24:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a28:	f7fb f872 	bl	8000b10 <__aeabi_dcmple>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d004      	beq.n	8005a3c <cJSON_CreateNumber+0x64>
        {
            item->valueint = INT_MIN;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005a38:	615a      	str	r2, [r3, #20]
 8005a3a:	e006      	b.n	8005a4a <cJSON_CreateNumber+0x72>
        }
        else
        {
            item->valueint = (int)num;
 8005a3c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a40:	f7fb f89a 	bl	8000b78 <__aeabi_d2iz>
 8005a44:	4602      	mov	r2, r0
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	615a      	str	r2, [r3, #20]
        }
    }

    return item;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3710      	adds	r7, #16
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}
 8005a54:	f3af 8000 	nop.w
 8005a58:	ffc00000 	.word	0xffc00000
 8005a5c:	41dfffff 	.word	0x41dfffff
 8005a60:	10000000 	.word	0x10000000
 8005a64:	c1e00000 	.word	0xc1e00000

08005a68 <cJSON_CreateString>:

CJSON_PUBLIC(cJSON *) cJSON_CreateString(const char *string)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b084      	sub	sp, #16
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
    cJSON *item = cJSON_New_Item(&global_hooks);
 8005a70:	480f      	ldr	r0, [pc, #60]	; (8005ab0 <cJSON_CreateString+0x48>)
 8005a72:	f7fd fff7 	bl	8003a64 <cJSON_New_Item>
 8005a76:	60f8      	str	r0, [r7, #12]
    if(item)
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d012      	beq.n	8005aa4 <cJSON_CreateString+0x3c>
    {
        item->type = cJSON_String;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2210      	movs	r2, #16
 8005a82:	60da      	str	r2, [r3, #12]
        item->valuestring = (char*)cJSON_strdup((const unsigned char*)string, &global_hooks);
 8005a84:	490a      	ldr	r1, [pc, #40]	; (8005ab0 <cJSON_CreateString+0x48>)
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f7fd ffc4 	bl	8003a14 <cJSON_strdup>
 8005a8c:	4602      	mov	r2, r0
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	611a      	str	r2, [r3, #16]
        if(!item->valuestring)
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	691b      	ldr	r3, [r3, #16]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d104      	bne.n	8005aa4 <cJSON_CreateString+0x3c>
        {
            cJSON_Delete(item);
 8005a9a:	68f8      	ldr	r0, [r7, #12]
 8005a9c:	f7fd fff8 	bl	8003a90 <cJSON_Delete>
            return NULL;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	e000      	b.n	8005aa6 <cJSON_CreateString+0x3e>
        }
    }

    return item;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3710      	adds	r7, #16
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}
 8005aae:	bf00      	nop
 8005ab0:	10000000 	.word	0x10000000

08005ab4 <cJSON_CreateObject>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b082      	sub	sp, #8
 8005ab8:	af00      	add	r7, sp, #0
    cJSON *item = cJSON_New_Item(&global_hooks);
 8005aba:	4807      	ldr	r0, [pc, #28]	; (8005ad8 <cJSON_CreateObject+0x24>)
 8005abc:	f7fd ffd2 	bl	8003a64 <cJSON_New_Item>
 8005ac0:	6078      	str	r0, [r7, #4]
    if (item)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d002      	beq.n	8005ace <cJSON_CreateObject+0x1a>
    {
        item->type = cJSON_Object;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2240      	movs	r2, #64	; 0x40
 8005acc:	60da      	str	r2, [r3, #12]
    }

    return item;
 8005ace:	687b      	ldr	r3, [r7, #4]
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3708      	adds	r7, #8
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}
 8005ad8:	10000000 	.word	0x10000000

08005adc <cJSON_free>:
{
    return global_hooks.allocate(size);
}

CJSON_PUBLIC(void) cJSON_free(void *object)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b082      	sub	sp, #8
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
    global_hooks.deallocate(object);
 8005ae4:	4b03      	ldr	r3, [pc, #12]	; (8005af4 <cJSON_free+0x18>)
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	4798      	blx	r3
}
 8005aec:	bf00      	nop
 8005aee:	3708      	adds	r7, #8
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}
 8005af4:	10000000 	.word	0x10000000

08005af8 <check_js_param_int>:

    return (delta * dividend + (divisor / 2)) / divisor + out_min;
}

bool check_js_param_int(cJSON *data_json, char *key, int *set_value)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b086      	sub	sp, #24
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	60f8      	str	r0, [r7, #12]
 8005b00:	60b9      	str	r1, [r7, #8]
 8005b02:	607a      	str	r2, [r7, #4]
    cJSON *param = cJSON_GetObjectItem(data_json, key);
 8005b04:	68b9      	ldr	r1, [r7, #8]
 8005b06:	68f8      	ldr	r0, [r7, #12]
 8005b08:	f7ff fe53 	bl	80057b2 <cJSON_GetObjectItem>
 8005b0c:	6178      	str	r0, [r7, #20]
    if (param != NULL)
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d00c      	beq.n	8005b2e <check_js_param_int+0x36>
    {
        *set_value = param->valueint;
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	695a      	ldr	r2, [r3, #20]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	601a      	str	r2, [r3, #0]
        DEBUG_UTILS("Set param %s = %i\n", key, param->valueint);
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	695b      	ldr	r3, [r3, #20]
 8005b20:	461a      	mov	r2, r3
 8005b22:	68b9      	ldr	r1, [r7, #8]
 8005b24:	4804      	ldr	r0, [pc, #16]	; (8005b38 <check_js_param_int+0x40>)
 8005b26:	f01f fe41 	bl	80257ac <iprintf>
        return true;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e000      	b.n	8005b30 <check_js_param_int+0x38>
    }
    return false;
 8005b2e:	2300      	movs	r3, #0
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3718      	adds	r7, #24
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}
 8005b38:	080299d0 	.word	0x080299d0

08005b3c <check_js_param_u8>:

bool check_js_param_u8(cJSON *data_json, char *key, uint8_t *set_value)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b086      	sub	sp, #24
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	60f8      	str	r0, [r7, #12]
 8005b44:	60b9      	str	r1, [r7, #8]
 8005b46:	607a      	str	r2, [r7, #4]
    cJSON *param = cJSON_GetObjectItem(data_json, key);
 8005b48:	68b9      	ldr	r1, [r7, #8]
 8005b4a:	68f8      	ldr	r0, [r7, #12]
 8005b4c:	f7ff fe31 	bl	80057b2 <cJSON_GetObjectItem>
 8005b50:	6178      	str	r0, [r7, #20]
    if (param != NULL)
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d00d      	beq.n	8005b74 <check_js_param_u8+0x38>
    {
        *set_value = param->valueint;
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	695b      	ldr	r3, [r3, #20]
 8005b5c:	b2da      	uxtb	r2, r3
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	701a      	strb	r2, [r3, #0]
        DEBUG_UTILS("Set param %s = %i\n", key, param->valueint);
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	695b      	ldr	r3, [r3, #20]
 8005b66:	461a      	mov	r2, r3
 8005b68:	68b9      	ldr	r1, [r7, #8]
 8005b6a:	4805      	ldr	r0, [pc, #20]	; (8005b80 <check_js_param_u8+0x44>)
 8005b6c:	f01f fe1e 	bl	80257ac <iprintf>
        return true;
 8005b70:	2301      	movs	r3, #1
 8005b72:	e000      	b.n	8005b76 <check_js_param_u8+0x3a>
    }
    return false;
 8005b74:	2300      	movs	r3, #0
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3718      	adds	r7, #24
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
 8005b7e:	bf00      	nop
 8005b80:	080299d0 	.word	0x080299d0

08005b84 <check_char_mode>:
bool check_char_mode(cJSON *data_json, char *key, uint8_t *set_value)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b086      	sub	sp, #24
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	60f8      	str	r0, [r7, #12]
 8005b8c:	60b9      	str	r1, [r7, #8]
 8005b8e:	607a      	str	r2, [r7, #4]
    cJSON *param = cJSON_GetObjectItem(data_json, key);
 8005b90:	68b9      	ldr	r1, [r7, #8]
 8005b92:	68f8      	ldr	r0, [r7, #12]
 8005b94:	f7ff fe0d 	bl	80057b2 <cJSON_GetObjectItem>
 8005b98:	6178      	str	r0, [r7, #20]
    if (param != NULL)
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d037      	beq.n	8005c10 <check_char_mode+0x8c>
    {
        if (strcmp(param->valuestring, "inflow") == 0)
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	691b      	ldr	r3, [r3, #16]
 8005ba4:	491d      	ldr	r1, [pc, #116]	; (8005c1c <check_char_mode+0x98>)
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f7fa fb12 	bl	80001d0 <strcmp>
 8005bac:	4603      	mov	r3, r0
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d102      	bne.n	8005bb8 <check_char_mode+0x34>
            *set_value = INFLOW_MODE;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	701a      	strb	r2, [r3, #0]
        if (strcmp(param->valuestring, "smart") == 0)
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	691b      	ldr	r3, [r3, #16]
 8005bbc:	4918      	ldr	r1, [pc, #96]	; (8005c20 <check_char_mode+0x9c>)
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f7fa fb06 	bl	80001d0 <strcmp>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d102      	bne.n	8005bd0 <check_char_mode+0x4c>
            *set_value = SMART_MODE;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2201      	movs	r2, #1
 8005bce:	701a      	strb	r2, [r3, #0]
        if (strcmp(param->valuestring, "inflow_max") == 0)
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	691b      	ldr	r3, [r3, #16]
 8005bd4:	4913      	ldr	r1, [pc, #76]	; (8005c24 <check_char_mode+0xa0>)
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f7fa fafa 	bl	80001d0 <strcmp>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d10d      	bne.n	8005bfe <check_char_mode+0x7a>
        {
            if (device->mode != INFLOW_MAX_MODE)
 8005be2:	4b11      	ldr	r3, [pc, #68]	; (8005c28 <check_char_mode+0xa4>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	7b5b      	ldrb	r3, [r3, #13]
 8005be8:	2b02      	cmp	r3, #2
 8005bea:	d005      	beq.n	8005bf8 <check_char_mode+0x74>
                device->last_mode = device->mode;
 8005bec:	4b0e      	ldr	r3, [pc, #56]	; (8005c28 <check_char_mode+0xa4>)
 8005bee:	681a      	ldr	r2, [r3, #0]
 8005bf0:	4b0d      	ldr	r3, [pc, #52]	; (8005c28 <check_char_mode+0xa4>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	7b52      	ldrb	r2, [r2, #13]
 8005bf6:	739a      	strb	r2, [r3, #14]
            *set_value = INFLOW_MAX_MODE;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2202      	movs	r2, #2
 8005bfc:	701a      	strb	r2, [r3, #0]
        }

        DEBUG_UTILS("Set param %s = %s\n", key, param->valuestring);
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	691b      	ldr	r3, [r3, #16]
 8005c02:	461a      	mov	r2, r3
 8005c04:	68b9      	ldr	r1, [r7, #8]
 8005c06:	4809      	ldr	r0, [pc, #36]	; (8005c2c <check_char_mode+0xa8>)
 8005c08:	f01f fdd0 	bl	80257ac <iprintf>
        return true;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	e000      	b.n	8005c12 <check_char_mode+0x8e>
    }
    return false;
 8005c10:	2300      	movs	r3, #0
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3718      	adds	r7, #24
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
 8005c1a:	bf00      	nop
 8005c1c:	080299ec 	.word	0x080299ec
 8005c20:	080299f4 	.word	0x080299f4
 8005c24:	080299fc 	.word	0x080299fc
 8005c28:	20013a78 	.word	0x20013a78
 8005c2c:	08029a08 	.word	0x08029a08

08005c30 <check_char_on_off>:
bool check_char_on_off(cJSON *data_json, char *key, uint8_t *set_value)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b086      	sub	sp, #24
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	60f8      	str	r0, [r7, #12]
 8005c38:	60b9      	str	r1, [r7, #8]
 8005c3a:	607a      	str	r2, [r7, #4]
    cJSON *param = cJSON_GetObjectItem(data_json, key);
 8005c3c:	68b9      	ldr	r1, [r7, #8]
 8005c3e:	68f8      	ldr	r0, [r7, #12]
 8005c40:	f7ff fdb7 	bl	80057b2 <cJSON_GetObjectItem>
 8005c44:	6178      	str	r0, [r7, #20]
    if (param != NULL)
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d020      	beq.n	8005c8e <check_char_on_off+0x5e>
    {
        if (strcmp(param->valuestring, "on") == 0)
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	691b      	ldr	r3, [r3, #16]
 8005c50:	4911      	ldr	r1, [pc, #68]	; (8005c98 <check_char_on_off+0x68>)
 8005c52:	4618      	mov	r0, r3
 8005c54:	f7fa fabc 	bl	80001d0 <strcmp>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d102      	bne.n	8005c64 <check_char_on_off+0x34>
            *set_value = 1;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2201      	movs	r2, #1
 8005c62:	701a      	strb	r2, [r3, #0]
        if (strcmp(param->valuestring, "off") == 0)
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	691b      	ldr	r3, [r3, #16]
 8005c68:	490c      	ldr	r1, [pc, #48]	; (8005c9c <check_char_on_off+0x6c>)
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f7fa fab0 	bl	80001d0 <strcmp>
 8005c70:	4603      	mov	r3, r0
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d102      	bne.n	8005c7c <check_char_on_off+0x4c>
            *set_value = 0;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	701a      	strb	r2, [r3, #0]
        DEBUG_UTILS("Set param %s = %s\n", key, param->valuestring);
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	691b      	ldr	r3, [r3, #16]
 8005c80:	461a      	mov	r2, r3
 8005c82:	68b9      	ldr	r1, [r7, #8]
 8005c84:	4806      	ldr	r0, [pc, #24]	; (8005ca0 <check_char_on_off+0x70>)
 8005c86:	f01f fd91 	bl	80257ac <iprintf>
        return true;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e000      	b.n	8005c90 <check_char_on_off+0x60>
    }
    return false;
 8005c8e:	2300      	movs	r3, #0
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3718      	adds	r7, #24
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}
 8005c98:	08029a24 	.word	0x08029a24
 8005c9c:	08029a28 	.word	0x08029a28
 8005ca0:	08029a08 	.word	0x08029a08

08005ca4 <check_js_param_double>:

bool check_js_param_double(cJSON *data_json, char *key, double *set_value)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b086      	sub	sp, #24
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	60f8      	str	r0, [r7, #12]
 8005cac:	60b9      	str	r1, [r7, #8]
 8005cae:	607a      	str	r2, [r7, #4]
    cJSON *param = cJSON_GetObjectItem(data_json, key);
 8005cb0:	68b9      	ldr	r1, [r7, #8]
 8005cb2:	68f8      	ldr	r0, [r7, #12]
 8005cb4:	f7ff fd7d 	bl	80057b2 <cJSON_GetObjectItem>
 8005cb8:	6178      	str	r0, [r7, #20]
    if (param != NULL)
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d00e      	beq.n	8005cde <check_js_param_double+0x3a>
    {
        *set_value = param->valuedouble;
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8005cc6:	6879      	ldr	r1, [r7, #4]
 8005cc8:	e9c1 2300 	strd	r2, r3, [r1]
        DEBUG_UTILS("Set param %s = %0.1f\n", key, param->valuedouble);
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8005cd2:	68b9      	ldr	r1, [r7, #8]
 8005cd4:	4804      	ldr	r0, [pc, #16]	; (8005ce8 <check_js_param_double+0x44>)
 8005cd6:	f01f fd69 	bl	80257ac <iprintf>
        return true;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e000      	b.n	8005ce0 <check_js_param_double+0x3c>
    }
    return false;
 8005cde:	2300      	movs	r3, #0
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	3718      	adds	r7, #24
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}
 8005ce8:	08029a2c 	.word	0x08029a2c

08005cec <check_js_param_char>:
    }
    return false;
}

bool check_js_param_char(cJSON *data_json, char *key, char *set_value)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b086      	sub	sp, #24
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	60f8      	str	r0, [r7, #12]
 8005cf4:	60b9      	str	r1, [r7, #8]
 8005cf6:	607a      	str	r2, [r7, #4]
    cJSON *param = cJSON_GetObjectItem(data_json, key);
 8005cf8:	68b9      	ldr	r1, [r7, #8]
 8005cfa:	68f8      	ldr	r0, [r7, #12]
 8005cfc:	f7ff fd59 	bl	80057b2 <cJSON_GetObjectItem>
 8005d00:	6178      	str	r0, [r7, #20]
    if (param != NULL)
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d00e      	beq.n	8005d26 <check_js_param_char+0x3a>
    {
        strcpy(set_value, param->valuestring);
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	691b      	ldr	r3, [r3, #16]
 8005d0c:	4619      	mov	r1, r3
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f01f fec1 	bl	8025a96 <strcpy>
        DEBUG_UTILS("Set param %s = %s\n", key, param->valuestring);
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	691b      	ldr	r3, [r3, #16]
 8005d18:	461a      	mov	r2, r3
 8005d1a:	68b9      	ldr	r1, [r7, #8]
 8005d1c:	4804      	ldr	r0, [pc, #16]	; (8005d30 <check_js_param_char+0x44>)
 8005d1e:	f01f fd45 	bl	80257ac <iprintf>
        return true;
 8005d22:	2301      	movs	r3, #1
 8005d24:	e000      	b.n	8005d28 <check_js_param_char+0x3c>
    }
    return false;
 8005d26:	2300      	movs	r3, #0
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3718      	adds	r7, #24
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}
 8005d30:	08029a08 	.word	0x08029a08

08005d34 <temp_cold>:
uint64_t cold_time;
uint64_t hot_time;
uint64_t inflow_max_time;

void temp_cold()
{
 8005d34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d38:	b08a      	sub	sp, #40	; 0x28
 8005d3a:	af00      	add	r7, sp, #0
    if (device->error_stop_cold == true && ((HAL_GetTick() - cold_time) > 60 * MINUTE))
 8005d3c:	4b9a      	ldr	r3, [pc, #616]	; (8005fa8 <temp_cold+0x274>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	799b      	ldrb	r3, [r3, #6]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d020      	beq.n	8005d88 <temp_cold+0x54>
 8005d46:	f004 ff95 	bl	800ac74 <HAL_GetTick>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	469a      	mov	sl, r3
 8005d50:	4693      	mov	fp, r2
 8005d52:	4b96      	ldr	r3, [pc, #600]	; (8005fac <temp_cold+0x278>)
 8005d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d58:	ebba 0402 	subs.w	r4, sl, r2
 8005d5c:	eb6b 0503 	sbc.w	r5, fp, r3
 8005d60:	4b93      	ldr	r3, [pc, #588]	; (8005fb0 <temp_cold+0x27c>)
 8005d62:	429c      	cmp	r4, r3
 8005d64:	f175 0300 	sbcs.w	r3, r5, #0
 8005d68:	d30e      	bcc.n	8005d88 <temp_cold+0x54>
    {
    	cold_time = HAL_GetTick();
 8005d6a:	f004 ff83 	bl	800ac74 <HAL_GetTick>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	2200      	movs	r2, #0
 8005d72:	623b      	str	r3, [r7, #32]
 8005d74:	627a      	str	r2, [r7, #36]	; 0x24
 8005d76:	4b8d      	ldr	r3, [pc, #564]	; (8005fac <temp_cold+0x278>)
 8005d78:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005d7c:	e9c3 1200 	strd	r1, r2, [r3]
        device->error_stop_cold = false;
 8005d80:	4b89      	ldr	r3, [pc, #548]	; (8005fa8 <temp_cold+0x274>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	2200      	movs	r2, #0
 8005d86:	719a      	strb	r2, [r3, #6]
    }
    if(device->error_stop_cold == false && ((HAL_GetTick() - cold_time) > device->extra_options.check_time * MINUTE))
 8005d88:	4b87      	ldr	r3, [pc, #540]	; (8005fa8 <temp_cold+0x274>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	799b      	ldrb	r3, [r3, #6]
 8005d8e:	f083 0301 	eor.w	r3, r3, #1
 8005d92:	b2db      	uxtb	r3, r3
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	f000 8102 	beq.w	8005f9e <temp_cold+0x26a>
 8005d9a:	f004 ff6b 	bl	800ac74 <HAL_GetTick>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	2200      	movs	r2, #0
 8005da2:	61bb      	str	r3, [r7, #24]
 8005da4:	61fa      	str	r2, [r7, #28]
 8005da6:	4b81      	ldr	r3, [pc, #516]	; (8005fac <temp_cold+0x278>)
 8005da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dac:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8005db0:	4621      	mov	r1, r4
 8005db2:	ebb1 0802 	subs.w	r8, r1, r2
 8005db6:	4629      	mov	r1, r5
 8005db8:	eb61 0903 	sbc.w	r9, r1, r3
 8005dbc:	4b7a      	ldr	r3, [pc, #488]	; (8005fa8 <temp_cold+0x274>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	7e9b      	ldrb	r3, [r3, #26]
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	f64e 2360 	movw	r3, #60000	; 0xea60
 8005dc8:	fb02 f303 	mul.w	r3, r2, r3
 8005dcc:	17da      	asrs	r2, r3, #31
 8005dce:	613b      	str	r3, [r7, #16]
 8005dd0:	617a      	str	r2, [r7, #20]
 8005dd2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005dd6:	460b      	mov	r3, r1
 8005dd8:	4543      	cmp	r3, r8
 8005dda:	4613      	mov	r3, r2
 8005ddc:	eb73 0309 	sbcs.w	r3, r3, r9
 8005de0:	f080 80dd 	bcs.w	8005f9e <temp_cold+0x26a>
    {
    	cold_time = HAL_GetTick();
 8005de4:	f004 ff46 	bl	800ac74 <HAL_GetTick>
 8005de8:	4603      	mov	r3, r0
 8005dea:	2200      	movs	r2, #0
 8005dec:	60bb      	str	r3, [r7, #8]
 8005dee:	60fa      	str	r2, [r7, #12]
 8005df0:	4b6e      	ldr	r3, [pc, #440]	; (8005fac <temp_cold+0x278>)
 8005df2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005df6:	e9c3 1200 	strd	r1, r2, [r3]
        DEBUG_MODES("callback_temp_cold_timer\n");
 8005dfa:	486e      	ldr	r0, [pc, #440]	; (8005fb4 <temp_cold+0x280>)
 8005dfc:	f01f fd5c 	bl	80258b8 <puts>
        if (device->state == ON	&& damper_state == 2 && sensors_data->out_state && sensors_data->in_state && inflow_max_flag == false &&
 8005e00:	4b69      	ldr	r3, [pc, #420]	; (8005fa8 <temp_cold+0x274>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	789b      	ldrb	r3, [r3, #2]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	f000 8090 	beq.w	8005f2c <temp_cold+0x1f8>
 8005e0c:	4b6a      	ldr	r3, [pc, #424]	; (8005fb8 <temp_cold+0x284>)
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	2b02      	cmp	r3, #2
 8005e12:	f040 808b 	bne.w	8005f2c <temp_cold+0x1f8>
 8005e16:	4b69      	ldr	r3, [pc, #420]	; (8005fbc <temp_cold+0x288>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	7f1b      	ldrb	r3, [r3, #28]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	f000 8085 	beq.w	8005f2c <temp_cold+0x1f8>
 8005e22:	4b66      	ldr	r3, [pc, #408]	; (8005fbc <temp_cold+0x288>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	7f5b      	ldrb	r3, [r3, #29]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d07f      	beq.n	8005f2c <temp_cold+0x1f8>
 8005e2c:	4b64      	ldr	r3, [pc, #400]	; (8005fc0 <temp_cold+0x28c>)
 8005e2e:	781b      	ldrb	r3, [r3, #0]
 8005e30:	f083 0301 	eor.w	r3, r3, #1
 8005e34:	b2db      	uxtb	r3, r3
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d078      	beq.n	8005f2c <temp_cold+0x1f8>
            device->inflow_speed > 0 && (ave < (heaters->ten.temp_limit - device->extra_options.deviation)) && (heaters->ten.power >= 970)) // должно быть 970
 8005e3a:	4b5b      	ldr	r3, [pc, #364]	; (8005fa8 <temp_cold+0x274>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	7bdb      	ldrb	r3, [r3, #15]
        if (device->state == ON	&& damper_state == 2 && sensors_data->out_state && sensors_data->in_state && inflow_max_flag == false &&
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d073      	beq.n	8005f2c <temp_cold+0x1f8>
            device->inflow_speed > 0 && (ave < (heaters->ten.temp_limit - device->extra_options.deviation)) && (heaters->ten.power >= 970)) // должно быть 970
 8005e44:	4b5f      	ldr	r3, [pc, #380]	; (8005fc4 <temp_cold+0x290>)
 8005e46:	781b      	ldrb	r3, [r3, #0]
 8005e48:	4619      	mov	r1, r3
 8005e4a:	4b5f      	ldr	r3, [pc, #380]	; (8005fc8 <temp_cold+0x294>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	4a55      	ldr	r2, [pc, #340]	; (8005fa8 <temp_cold+0x274>)
 8005e52:	6812      	ldr	r2, [r2, #0]
 8005e54:	7e52      	ldrb	r2, [r2, #25]
 8005e56:	1a9b      	subs	r3, r3, r2
 8005e58:	4299      	cmp	r1, r3
 8005e5a:	da67      	bge.n	8005f2c <temp_cold+0x1f8>
 8005e5c:	4b5a      	ldr	r3, [pc, #360]	; (8005fc8 <temp_cold+0x294>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	8a1b      	ldrh	r3, [r3, #16]
 8005e62:	f240 32c9 	movw	r2, #969	; 0x3c9
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d960      	bls.n	8005f2c <temp_cold+0x1f8>
        {
            if (temp_cold_state == false)
 8005e6a:	4b58      	ldr	r3, [pc, #352]	; (8005fcc <temp_cold+0x298>)
 8005e6c:	781b      	ldrb	r3, [r3, #0]
 8005e6e:	f083 0301 	eor.w	r3, r3, #1
 8005e72:	b2db      	uxtb	r3, r3
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d00e      	beq.n	8005e96 <temp_cold+0x162>
            {
                temp_cold_state = true;
 8005e78:	4b54      	ldr	r3, [pc, #336]	; (8005fcc <temp_cold+0x298>)
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	701a      	strb	r2, [r3, #0]
                cold_speed = device->speed_arr[device->inflow_speed];
 8005e7e:	4b4a      	ldr	r3, [pc, #296]	; (8005fa8 <temp_cold+0x274>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a49      	ldr	r2, [pc, #292]	; (8005fa8 <temp_cold+0x274>)
 8005e84:	6812      	ldr	r2, [r2, #0]
 8005e86:	7bd2      	ldrb	r2, [r2, #15]
 8005e88:	4413      	add	r3, r2
 8005e8a:	7c5a      	ldrb	r2, [r3, #17]
 8005e8c:	4b50      	ldr	r3, [pc, #320]	; (8005fd0 <temp_cold+0x29c>)
 8005e8e:	701a      	strb	r2, [r3, #0]
                DEBUG_MODES("ZAFIKSIROVAL SKOROST\n");
 8005e90:	4850      	ldr	r0, [pc, #320]	; (8005fd4 <temp_cold+0x2a0>)
 8005e92:	f01f fd11 	bl	80258b8 <puts>
            }
            if (cold_speed <= device->speed_arr[1])
 8005e96:	4b44      	ldr	r3, [pc, #272]	; (8005fa8 <temp_cold+0x274>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	7c9a      	ldrb	r2, [r3, #18]
 8005e9c:	4b4c      	ldr	r3, [pc, #304]	; (8005fd0 <temp_cold+0x29c>)
 8005e9e:	781b      	ldrb	r3, [r3, #0]
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	d32f      	bcc.n	8005f04 <temp_cold+0x1d0>
            {
                if (ave < (10 - device->extra_options.deviation)) // должно быть 10
 8005ea4:	4b47      	ldr	r3, [pc, #284]	; (8005fc4 <temp_cold+0x290>)
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	461a      	mov	r2, r3
 8005eaa:	4b3f      	ldr	r3, [pc, #252]	; (8005fa8 <temp_cold+0x274>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	7e5b      	ldrb	r3, [r3, #25]
 8005eb0:	f1c3 030a 	rsb	r3, r3, #10
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	da1c      	bge.n	8005ef2 <temp_cold+0x1be>
                {
                    device->error_stop_cold = true;
 8005eb8:	4b3b      	ldr	r3, [pc, #236]	; (8005fa8 <temp_cold+0x274>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	719a      	strb	r2, [r3, #6]
                    device->error_temp_cold = false;
 8005ec0:	4b39      	ldr	r3, [pc, #228]	; (8005fa8 <temp_cold+0x274>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	711a      	strb	r2, [r3, #4]
                    cold_time = HAL_GetTick();
 8005ec8:	f004 fed4 	bl	800ac74 <HAL_GetTick>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	2200      	movs	r2, #0
 8005ed0:	603b      	str	r3, [r7, #0]
 8005ed2:	607a      	str	r2, [r7, #4]
 8005ed4:	4b35      	ldr	r3, [pc, #212]	; (8005fac <temp_cold+0x278>)
 8005ed6:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005eda:	e9c3 1200 	strd	r1, r2, [r3]
                    DEBUG_MODES("ERROR_STOP\n");
 8005ede:	483e      	ldr	r0, [pc, #248]	; (8005fd8 <temp_cold+0x2a4>)
 8005ee0:	f01f fcea 	bl	80258b8 <puts>
                    DEBUG_MODES("ERROR_STOP\n");
 8005ee4:	483c      	ldr	r0, [pc, #240]	; (8005fd8 <temp_cold+0x2a4>)
 8005ee6:	f01f fce7 	bl	80258b8 <puts>
                    DEBUG_MODES("ERROR_STOP\n");
 8005eea:	483b      	ldr	r0, [pc, #236]	; (8005fd8 <temp_cold+0x2a4>)
 8005eec:	f01f fce4 	bl	80258b8 <puts>
 8005ef0:	e014      	b.n	8005f1c <temp_cold+0x1e8>
                }
                else
                {
                    cold_speed = device->speed_arr[1];
 8005ef2:	4b2d      	ldr	r3, [pc, #180]	; (8005fa8 <temp_cold+0x274>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	7c9a      	ldrb	r2, [r3, #18]
 8005ef8:	4b35      	ldr	r3, [pc, #212]	; (8005fd0 <temp_cold+0x29c>)
 8005efa:	701a      	strb	r2, [r3, #0]
                    DEBUG_MODES("PERVAYA SKOROST\n");
 8005efc:	4837      	ldr	r0, [pc, #220]	; (8005fdc <temp_cold+0x2a8>)
 8005efe:	f01f fcdb 	bl	80258b8 <puts>
 8005f02:	e00b      	b.n	8005f1c <temp_cold+0x1e8>
                }
            }
            else
            {
                cold_speed = cold_speed - device->extra_options.step_pwm;
 8005f04:	4b32      	ldr	r3, [pc, #200]	; (8005fd0 <temp_cold+0x29c>)
 8005f06:	781a      	ldrb	r2, [r3, #0]
 8005f08:	4b27      	ldr	r3, [pc, #156]	; (8005fa8 <temp_cold+0x274>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	7edb      	ldrb	r3, [r3, #27]
 8005f0e:	1ad3      	subs	r3, r2, r3
 8005f10:	b2da      	uxtb	r2, r3
 8005f12:	4b2f      	ldr	r3, [pc, #188]	; (8005fd0 <temp_cold+0x29c>)
 8005f14:	701a      	strb	r2, [r3, #0]
                DEBUG_MODES("UBAVILI NA 5\n");
 8005f16:	4832      	ldr	r0, [pc, #200]	; (8005fe0 <temp_cold+0x2ac>)
 8005f18:	f01f fcce 	bl	80258b8 <puts>
            }
            device->error_temp_cold = true;
 8005f1c:	4b22      	ldr	r3, [pc, #136]	; (8005fa8 <temp_cold+0x274>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	2201      	movs	r2, #1
 8005f22:	711a      	strb	r2, [r3, #4]
            DEBUG_MODES("error_temp_cold\n");
 8005f24:	482f      	ldr	r0, [pc, #188]	; (8005fe4 <temp_cold+0x2b0>)
 8005f26:	f01f fcc7 	bl	80258b8 <puts>
                device->error_temp_cold = false;
                DEBUG_MODES("VSE OK\n");
            }
        }
    }
}
 8005f2a:	e038      	b.n	8005f9e <temp_cold+0x26a>
            if (temp_cold_state)
 8005f2c:	4b27      	ldr	r3, [pc, #156]	; (8005fcc <temp_cold+0x298>)
 8005f2e:	781b      	ldrb	r3, [r3, #0]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d02d      	beq.n	8005f90 <temp_cold+0x25c>
                cold_speed = cold_speed + device->extra_options.step_pwm;
 8005f34:	4b1c      	ldr	r3, [pc, #112]	; (8005fa8 <temp_cold+0x274>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	7eda      	ldrb	r2, [r3, #27]
 8005f3a:	4b25      	ldr	r3, [pc, #148]	; (8005fd0 <temp_cold+0x29c>)
 8005f3c:	781b      	ldrb	r3, [r3, #0]
 8005f3e:	4413      	add	r3, r2
 8005f40:	b2da      	uxtb	r2, r3
 8005f42:	4b23      	ldr	r3, [pc, #140]	; (8005fd0 <temp_cold+0x29c>)
 8005f44:	701a      	strb	r2, [r3, #0]
                DEBUG_MODES("PRIBAVILI NA 5\n");
 8005f46:	4828      	ldr	r0, [pc, #160]	; (8005fe8 <temp_cold+0x2b4>)
 8005f48:	f01f fcb6 	bl	80258b8 <puts>
                if (cold_speed >= device->speed_arr[device->inflow_speed])
 8005f4c:	4b16      	ldr	r3, [pc, #88]	; (8005fa8 <temp_cold+0x274>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a15      	ldr	r2, [pc, #84]	; (8005fa8 <temp_cold+0x274>)
 8005f52:	6812      	ldr	r2, [r2, #0]
 8005f54:	7bd2      	ldrb	r2, [r2, #15]
 8005f56:	4413      	add	r3, r2
 8005f58:	7c5a      	ldrb	r2, [r3, #17]
 8005f5a:	4b1d      	ldr	r3, [pc, #116]	; (8005fd0 <temp_cold+0x29c>)
 8005f5c:	781b      	ldrb	r3, [r3, #0]
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	d81d      	bhi.n	8005f9e <temp_cold+0x26a>
                    cold_speed = device->speed_arr[device->inflow_speed];
 8005f62:	4b11      	ldr	r3, [pc, #68]	; (8005fa8 <temp_cold+0x274>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a10      	ldr	r2, [pc, #64]	; (8005fa8 <temp_cold+0x274>)
 8005f68:	6812      	ldr	r2, [r2, #0]
 8005f6a:	7bd2      	ldrb	r2, [r2, #15]
 8005f6c:	4413      	add	r3, r2
 8005f6e:	7c5a      	ldrb	r2, [r3, #17]
 8005f70:	4b17      	ldr	r3, [pc, #92]	; (8005fd0 <temp_cold+0x29c>)
 8005f72:	701a      	strb	r2, [r3, #0]
                    temp_cold_state = false;
 8005f74:	4b15      	ldr	r3, [pc, #84]	; (8005fcc <temp_cold+0x298>)
 8005f76:	2200      	movs	r2, #0
 8005f78:	701a      	strb	r2, [r3, #0]
                    DEBUG_MODES("SRAVNYALI ISHODNOE ZNACHENIE\n");
 8005f7a:	481c      	ldr	r0, [pc, #112]	; (8005fec <temp_cold+0x2b8>)
 8005f7c:	f01f fc9c 	bl	80258b8 <puts>
                    device->error_temp_cold = false;
 8005f80:	4b09      	ldr	r3, [pc, #36]	; (8005fa8 <temp_cold+0x274>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	2200      	movs	r2, #0
 8005f86:	711a      	strb	r2, [r3, #4]
                    DEBUG_MODES("VSE OK\n");
 8005f88:	4819      	ldr	r0, [pc, #100]	; (8005ff0 <temp_cold+0x2bc>)
 8005f8a:	f01f fc95 	bl	80258b8 <puts>
}
 8005f8e:	e006      	b.n	8005f9e <temp_cold+0x26a>
                device->error_temp_cold = false;
 8005f90:	4b05      	ldr	r3, [pc, #20]	; (8005fa8 <temp_cold+0x274>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	2200      	movs	r2, #0
 8005f96:	711a      	strb	r2, [r3, #4]
                DEBUG_MODES("VSE OK\n");
 8005f98:	4815      	ldr	r0, [pc, #84]	; (8005ff0 <temp_cold+0x2bc>)
 8005f9a:	f01f fc8d 	bl	80258b8 <puts>
}
 8005f9e:	bf00      	nop
 8005fa0:	3728      	adds	r7, #40	; 0x28
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005fa8:	20013a78 	.word	0x20013a78
 8005fac:	20013c48 	.word	0x20013c48
 8005fb0:	0036ee81 	.word	0x0036ee81
 8005fb4:	08029a4c 	.word	0x08029a4c
 8005fb8:	20013d94 	.word	0x20013d94
 8005fbc:	20013a80 	.word	0x20013a80
 8005fc0:	20013e50 	.word	0x20013e50
 8005fc4:	1000004e 	.word	0x1000004e
 8005fc8:	200139cc 	.word	0x200139cc
 8005fcc:	20000044 	.word	0x20000044
 8005fd0:	20013c50 	.word	0x20013c50
 8005fd4:	08029a6c 	.word	0x08029a6c
 8005fd8:	08029a88 	.word	0x08029a88
 8005fdc:	08029a9c 	.word	0x08029a9c
 8005fe0:	08029ab4 	.word	0x08029ab4
 8005fe4:	08029ac8 	.word	0x08029ac8
 8005fe8:	08029ae0 	.word	0x08029ae0
 8005fec:	08029af8 	.word	0x08029af8
 8005ff0:	08029b1c 	.word	0x08029b1c

08005ff4 <temp_hot>:

void temp_hot()
{
 8005ff4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ff8:	af00      	add	r7, sp, #0
	if (device->error_temp_hot == true && ((HAL_GetTick() - hot_time) > 3 * MINUTE))
 8005ffa:	4b23      	ldr	r3, [pc, #140]	; (8006088 <temp_hot+0x94>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	78db      	ldrb	r3, [r3, #3]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d022      	beq.n	800604a <temp_hot+0x56>
 8006004:	f004 fe36 	bl	800ac74 <HAL_GetTick>
 8006008:	4603      	mov	r3, r0
 800600a:	2200      	movs	r2, #0
 800600c:	4698      	mov	r8, r3
 800600e:	4691      	mov	r9, r2
 8006010:	4b1e      	ldr	r3, [pc, #120]	; (800608c <temp_hot+0x98>)
 8006012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006016:	ebb8 0402 	subs.w	r4, r8, r2
 800601a:	eb69 0503 	sbc.w	r5, r9, r3
 800601e:	4b1c      	ldr	r3, [pc, #112]	; (8006090 <temp_hot+0x9c>)
 8006020:	429c      	cmp	r4, r3
 8006022:	f175 0300 	sbcs.w	r3, r5, #0
 8006026:	d310      	bcc.n	800604a <temp_hot+0x56>
	{
	    device->error_stop_hot = true;
 8006028:	4b17      	ldr	r3, [pc, #92]	; (8006088 <temp_hot+0x94>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	2201      	movs	r2, #1
 800602e:	715a      	strb	r2, [r3, #5]
	    device->error_temp_hot = false;
 8006030:	4b15      	ldr	r3, [pc, #84]	; (8006088 <temp_hot+0x94>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	2200      	movs	r2, #0
 8006036:	70da      	strb	r2, [r3, #3]
	    DEBUG_MODES("ERROR_STOP\n");
 8006038:	4816      	ldr	r0, [pc, #88]	; (8006094 <temp_hot+0xa0>)
 800603a:	f01f fc3d 	bl	80258b8 <puts>
	    DEBUG_MODES("ERROR_STOP\n");
 800603e:	4815      	ldr	r0, [pc, #84]	; (8006094 <temp_hot+0xa0>)
 8006040:	f01f fc3a 	bl	80258b8 <puts>
	    DEBUG_MODES("ERROR_STOP\n");
 8006044:	4813      	ldr	r0, [pc, #76]	; (8006094 <temp_hot+0xa0>)
 8006046:	f01f fc37 	bl	80258b8 <puts>
	}
    if (device->error_stop_hot == false && ave >= HOT_TEMP) // должно быть 60
 800604a:	4b0f      	ldr	r3, [pc, #60]	; (8006088 <temp_hot+0x94>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	795b      	ldrb	r3, [r3, #5]
 8006050:	f083 0301 	eor.w	r3, r3, #1
 8006054:	b2db      	uxtb	r3, r3
 8006056:	2b00      	cmp	r3, #0
 8006058:	d013      	beq.n	8006082 <temp_hot+0x8e>
 800605a:	4b0f      	ldr	r3, [pc, #60]	; (8006098 <temp_hot+0xa4>)
 800605c:	781b      	ldrb	r3, [r3, #0]
 800605e:	2b3b      	cmp	r3, #59	; 0x3b
 8006060:	d90f      	bls.n	8006082 <temp_hot+0x8e>
    {
        device->error_temp_hot = true;
 8006062:	4b09      	ldr	r3, [pc, #36]	; (8006088 <temp_hot+0x94>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	2201      	movs	r2, #1
 8006068:	70da      	strb	r2, [r3, #3]
        hot_time = HAL_GetTick();
 800606a:	f004 fe03 	bl	800ac74 <HAL_GetTick>
 800606e:	4603      	mov	r3, r0
 8006070:	2200      	movs	r2, #0
 8006072:	469a      	mov	sl, r3
 8006074:	4693      	mov	fp, r2
 8006076:	4b05      	ldr	r3, [pc, #20]	; (800608c <temp_hot+0x98>)
 8006078:	e9c3 ab00 	strd	sl, fp, [r3]
        DEBUG_MODES("error_temp_hot\n");
 800607c:	4807      	ldr	r0, [pc, #28]	; (800609c <temp_hot+0xa8>)
 800607e:	f01f fc1b 	bl	80258b8 <puts>
    }
}
 8006082:	bf00      	nop
 8006084:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006088:	20013a78 	.word	0x20013a78
 800608c:	20013d98 	.word	0x20013d98
 8006090:	0002bf21 	.word	0x0002bf21
 8006094:	08029a88 	.word	0x08029a88
 8006098:	1000004e 	.word	0x1000004e
 800609c:	08029b2c 	.word	0x08029b2c

080060a0 <inflow_mode>:

void inflow_mode()
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	af00      	add	r7, sp, #0
    if (device->error_temp_hot == false && device->error_temp_cold == false && device->error_stop_hot == false && device->error_stop_cold == false && device->error_fan == false)
 80060a4:	4b3a      	ldr	r3, [pc, #232]	; (8006190 <inflow_mode+0xf0>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	78db      	ldrb	r3, [r3, #3]
 80060aa:	f083 0301 	eor.w	r3, r3, #1
 80060ae:	b2db      	uxtb	r3, r3
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d028      	beq.n	8006106 <inflow_mode+0x66>
 80060b4:	4b36      	ldr	r3, [pc, #216]	; (8006190 <inflow_mode+0xf0>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	791b      	ldrb	r3, [r3, #4]
 80060ba:	f083 0301 	eor.w	r3, r3, #1
 80060be:	b2db      	uxtb	r3, r3
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d020      	beq.n	8006106 <inflow_mode+0x66>
 80060c4:	4b32      	ldr	r3, [pc, #200]	; (8006190 <inflow_mode+0xf0>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	795b      	ldrb	r3, [r3, #5]
 80060ca:	f083 0301 	eor.w	r3, r3, #1
 80060ce:	b2db      	uxtb	r3, r3
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d018      	beq.n	8006106 <inflow_mode+0x66>
 80060d4:	4b2e      	ldr	r3, [pc, #184]	; (8006190 <inflow_mode+0xf0>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	799b      	ldrb	r3, [r3, #6]
 80060da:	f083 0301 	eor.w	r3, r3, #1
 80060de:	b2db      	uxtb	r3, r3
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d010      	beq.n	8006106 <inflow_mode+0x66>
 80060e4:	4b2a      	ldr	r3, [pc, #168]	; (8006190 <inflow_mode+0xf0>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	7a5b      	ldrb	r3, [r3, #9]
 80060ea:	f083 0301 	eor.w	r3, r3, #1
 80060ee:	b2db      	uxtb	r3, r3
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d008      	beq.n	8006106 <inflow_mode+0x66>
    {
        inst_speed = device->speed_arr[device->inflow_speed];
 80060f4:	4b26      	ldr	r3, [pc, #152]	; (8006190 <inflow_mode+0xf0>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a25      	ldr	r2, [pc, #148]	; (8006190 <inflow_mode+0xf0>)
 80060fa:	6812      	ldr	r2, [r2, #0]
 80060fc:	7bd2      	ldrb	r2, [r2, #15]
 80060fe:	4413      	add	r3, r2
 8006100:	7c5a      	ldrb	r2, [r3, #17]
 8006102:	4b24      	ldr	r3, [pc, #144]	; (8006194 <inflow_mode+0xf4>)
 8006104:	701a      	strb	r2, [r3, #0]
    }
    if (device->error_temp_hot == true && device->error_stop_hot == false)
 8006106:	4b22      	ldr	r3, [pc, #136]	; (8006190 <inflow_mode+0xf0>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	78db      	ldrb	r3, [r3, #3]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d00d      	beq.n	800612c <inflow_mode+0x8c>
 8006110:	4b1f      	ldr	r3, [pc, #124]	; (8006190 <inflow_mode+0xf0>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	795b      	ldrb	r3, [r3, #5]
 8006116:	f083 0301 	eor.w	r3, r3, #1
 800611a:	b2db      	uxtb	r3, r3
 800611c:	2b00      	cmp	r3, #0
 800611e:	d005      	beq.n	800612c <inflow_mode+0x8c>
    {
        inst_speed = MAXIMUM;
 8006120:	4b1c      	ldr	r3, [pc, #112]	; (8006194 <inflow_mode+0xf4>)
 8006122:	2264      	movs	r2, #100	; 0x64
 8006124:	701a      	strb	r2, [r3, #0]
        DEBUG_MODES("speed = MAXIMUM\n");
 8006126:	481c      	ldr	r0, [pc, #112]	; (8006198 <inflow_mode+0xf8>)
 8006128:	f01f fbc6 	bl	80258b8 <puts>
    }
    if (device->error_temp_cold == true && device->error_stop_cold == false)
 800612c:	4b18      	ldr	r3, [pc, #96]	; (8006190 <inflow_mode+0xf0>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	791b      	ldrb	r3, [r3, #4]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d00e      	beq.n	8006154 <inflow_mode+0xb4>
 8006136:	4b16      	ldr	r3, [pc, #88]	; (8006190 <inflow_mode+0xf0>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	799b      	ldrb	r3, [r3, #6]
 800613c:	f083 0301 	eor.w	r3, r3, #1
 8006140:	b2db      	uxtb	r3, r3
 8006142:	2b00      	cmp	r3, #0
 8006144:	d006      	beq.n	8006154 <inflow_mode+0xb4>
    {
        inst_speed = cold_speed;
 8006146:	4b15      	ldr	r3, [pc, #84]	; (800619c <inflow_mode+0xfc>)
 8006148:	781a      	ldrb	r2, [r3, #0]
 800614a:	4b12      	ldr	r3, [pc, #72]	; (8006194 <inflow_mode+0xf4>)
 800614c:	701a      	strb	r2, [r3, #0]
        DEBUG_MODES("speed = cold speed\n");
 800614e:	4814      	ldr	r0, [pc, #80]	; (80061a0 <inflow_mode+0x100>)
 8006150:	f01f fbb2 	bl	80258b8 <puts>
    }
    if (device->error_stop_hot || device->error_stop_cold)
 8006154:	4b0e      	ldr	r3, [pc, #56]	; (8006190 <inflow_mode+0xf0>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	795b      	ldrb	r3, [r3, #5]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d104      	bne.n	8006168 <inflow_mode+0xc8>
 800615e:	4b0c      	ldr	r3, [pc, #48]	; (8006190 <inflow_mode+0xf0>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	799b      	ldrb	r3, [r3, #6]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d005      	beq.n	8006174 <inflow_mode+0xd4>
    {
        inst_speed = 0;
 8006168:	4b0a      	ldr	r3, [pc, #40]	; (8006194 <inflow_mode+0xf4>)
 800616a:	2200      	movs	r2, #0
 800616c:	701a      	strb	r2, [r3, #0]
        DEBUG_MODES("finish\n");
 800616e:	480d      	ldr	r0, [pc, #52]	; (80061a4 <inflow_mode+0x104>)
 8006170:	f01f fba2 	bl	80258b8 <puts>
    }
    DEBUG_MODES("inst_speed %i\n", inst_speed);
 8006174:	4b07      	ldr	r3, [pc, #28]	; (8006194 <inflow_mode+0xf4>)
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	4619      	mov	r1, r3
 800617a:	480b      	ldr	r0, [pc, #44]	; (80061a8 <inflow_mode+0x108>)
 800617c:	f01f fb16 	bl	80257ac <iprintf>
    set_inflow_fan1(inst_speed);
 8006180:	4b04      	ldr	r3, [pc, #16]	; (8006194 <inflow_mode+0xf4>)
 8006182:	781b      	ldrb	r3, [r3, #0]
 8006184:	4618      	mov	r0, r3
 8006186:	f001 ffe5 	bl	8008154 <set_inflow_fan1>
}
 800618a:	bf00      	nop
 800618c:	bd80      	pop	{r7, pc}
 800618e:	bf00      	nop
 8006190:	20013a78 	.word	0x20013a78
 8006194:	20013a29 	.word	0x20013a29
 8006198:	08029b44 	.word	0x08029b44
 800619c:	20013c50 	.word	0x20013c50
 80061a0:	08029b5c 	.word	0x08029b5c
 80061a4:	08029b78 	.word	0x08029b78
 80061a8:	08029b88 	.word	0x08029b88

080061ac <inflow_max_mode>:

void inflow_max_mode()
{
 80061ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80061b0:	b082      	sub	sp, #8
 80061b2:	af00      	add	r7, sp, #0
    if (!inflow_max_flag)
 80061b4:	4b2d      	ldr	r3, [pc, #180]	; (800626c <inflow_max_mode+0xc0>)
 80061b6:	781b      	ldrb	r3, [r3, #0]
 80061b8:	f083 0301 	eor.w	r3, r3, #1
 80061bc:	b2db      	uxtb	r3, r3
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d016      	beq.n	80061f0 <inflow_max_mode+0x44>
    {
        inflow_max_flag = true;
 80061c2:	4b2a      	ldr	r3, [pc, #168]	; (800626c <inflow_max_mode+0xc0>)
 80061c4:	2201      	movs	r2, #1
 80061c6:	701a      	strb	r2, [r3, #0]
        inflow_max_time = HAL_GetTick();
 80061c8:	f004 fd54 	bl	800ac74 <HAL_GetTick>
 80061cc:	4603      	mov	r3, r0
 80061ce:	2200      	movs	r2, #0
 80061d0:	603b      	str	r3, [r7, #0]
 80061d2:	607a      	str	r2, [r7, #4]
 80061d4:	4b26      	ldr	r3, [pc, #152]	; (8006270 <inflow_max_mode+0xc4>)
 80061d6:	e9d7 1200 	ldrd	r1, r2, [r7]
 80061da:	e9c3 1200 	strd	r1, r2, [r3]
        set_inflow_fan1(device->speed_arr[7]);
 80061de:	4b25      	ldr	r3, [pc, #148]	; (8006274 <inflow_max_mode+0xc8>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	7e1b      	ldrb	r3, [r3, #24]
 80061e4:	4618      	mov	r0, r3
 80061e6:	f001 ffb5 	bl	8008154 <set_inflow_fan1>
        DEBUG_MODES("Start inflow max mode\n");
 80061ea:	4823      	ldr	r0, [pc, #140]	; (8006278 <inflow_max_mode+0xcc>)
 80061ec:	f01f fb64 	bl	80258b8 <puts>
    }
    if (HAL_GetTick() - inflow_max_time > INFLOW_MAX_MODE_TIME)
 80061f0:	f004 fd40 	bl	800ac74 <HAL_GetTick>
 80061f4:	4603      	mov	r3, r0
 80061f6:	2200      	movs	r2, #0
 80061f8:	469a      	mov	sl, r3
 80061fa:	4693      	mov	fp, r2
 80061fc:	4b1c      	ldr	r3, [pc, #112]	; (8006270 <inflow_max_mode+0xc4>)
 80061fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006202:	ebba 0402 	subs.w	r4, sl, r2
 8006206:	eb6b 0503 	sbc.w	r5, fp, r3
 800620a:	4b1c      	ldr	r3, [pc, #112]	; (800627c <inflow_max_mode+0xd0>)
 800620c:	429c      	cmp	r4, r3
 800620e:	f175 0300 	sbcs.w	r3, r5, #0
 8006212:	d30c      	bcc.n	800622e <inflow_max_mode+0x82>
    {
        device->mode = device->last_mode;
 8006214:	4b17      	ldr	r3, [pc, #92]	; (8006274 <inflow_max_mode+0xc8>)
 8006216:	681a      	ldr	r2, [r3, #0]
 8006218:	4b16      	ldr	r3, [pc, #88]	; (8006274 <inflow_max_mode+0xc8>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	7b92      	ldrb	r2, [r2, #14]
 800621e:	735a      	strb	r2, [r3, #13]
        DEBUG_MODES("Set last mode = %i\n", device->mode);
 8006220:	4b14      	ldr	r3, [pc, #80]	; (8006274 <inflow_max_mode+0xc8>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	7b5b      	ldrb	r3, [r3, #13]
 8006226:	4619      	mov	r1, r3
 8006228:	4815      	ldr	r0, [pc, #84]	; (8006280 <inflow_max_mode+0xd4>)
 800622a:	f01f fabf 	bl	80257ac <iprintf>
    }
    if (inflow_max_time > HAL_GetTick())
 800622e:	f004 fd21 	bl	800ac74 <HAL_GetTick>
 8006232:	4603      	mov	r3, r0
 8006234:	2200      	movs	r2, #0
 8006236:	4698      	mov	r8, r3
 8006238:	4691      	mov	r9, r2
 800623a:	4b0d      	ldr	r3, [pc, #52]	; (8006270 <inflow_max_mode+0xc4>)
 800623c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006240:	4590      	cmp	r8, r2
 8006242:	eb79 0303 	sbcs.w	r3, r9, r3
 8006246:	d20c      	bcs.n	8006262 <inflow_max_mode+0xb6>
    {
        device->mode = device->last_mode;
 8006248:	4b0a      	ldr	r3, [pc, #40]	; (8006274 <inflow_max_mode+0xc8>)
 800624a:	681a      	ldr	r2, [r3, #0]
 800624c:	4b09      	ldr	r3, [pc, #36]	; (8006274 <inflow_max_mode+0xc8>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	7b92      	ldrb	r2, [r2, #14]
 8006252:	735a      	strb	r2, [r3, #13]
        DEBUG_MODES("TIME RESET Set last mode = %i\n", device->mode);
 8006254:	4b07      	ldr	r3, [pc, #28]	; (8006274 <inflow_max_mode+0xc8>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	7b5b      	ldrb	r3, [r3, #13]
 800625a:	4619      	mov	r1, r3
 800625c:	4809      	ldr	r0, [pc, #36]	; (8006284 <inflow_max_mode+0xd8>)
 800625e:	f01f faa5 	bl	80257ac <iprintf>
    }

}
 8006262:	bf00      	nop
 8006264:	3708      	adds	r7, #8
 8006266:	46bd      	mov	sp, r7
 8006268:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800626c:	20013e50 	.word	0x20013e50
 8006270:	20013e48 	.word	0x20013e48
 8006274:	20013a78 	.word	0x20013a78
 8006278:	08029ba0 	.word	0x08029ba0
 800627c:	000493e1 	.word	0x000493e1
 8006280:	08029bc0 	.word	0x08029bc0
 8006284:	08029bdc 	.word	0x08029bdc

08006288 <mode_handler>:

void mode_handler()
{
 8006288:	b580      	push	{r7, lr}
 800628a:	af00      	add	r7, sp, #0
    switch (device->mode)
 800628c:	4b0d      	ldr	r3, [pc, #52]	; (80062c4 <mode_handler+0x3c>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	7b5b      	ldrb	r3, [r3, #13]
 8006292:	2b02      	cmp	r3, #2
 8006294:	d010      	beq.n	80062b8 <mode_handler+0x30>
 8006296:	2b02      	cmp	r3, #2
 8006298:	dc11      	bgt.n	80062be <mode_handler+0x36>
 800629a:	2b00      	cmp	r3, #0
 800629c:	d002      	beq.n	80062a4 <mode_handler+0x1c>
 800629e:	2b01      	cmp	r3, #1
 80062a0:	d006      	beq.n	80062b0 <mode_handler+0x28>
        break;
    case INFLOW_MAX_MODE:
        inflow_max_mode();
        break;
    default:
        break;
 80062a2:	e00c      	b.n	80062be <mode_handler+0x36>
        inflow_max_flag = false;
 80062a4:	4b08      	ldr	r3, [pc, #32]	; (80062c8 <mode_handler+0x40>)
 80062a6:	2200      	movs	r2, #0
 80062a8:	701a      	strb	r2, [r3, #0]
        inflow_mode();
 80062aa:	f7ff fef9 	bl	80060a0 <inflow_mode>
        break;
 80062ae:	e007      	b.n	80062c0 <mode_handler+0x38>
        inflow_max_flag = false;
 80062b0:	4b05      	ldr	r3, [pc, #20]	; (80062c8 <mode_handler+0x40>)
 80062b2:	2200      	movs	r2, #0
 80062b4:	701a      	strb	r2, [r3, #0]
        break;
 80062b6:	e003      	b.n	80062c0 <mode_handler+0x38>
        inflow_max_mode();
 80062b8:	f7ff ff78 	bl	80061ac <inflow_max_mode>
        break;
 80062bc:	e000      	b.n	80062c0 <mode_handler+0x38>
        break;
 80062be:	bf00      	nop
    }
}
 80062c0:	bf00      	nop
 80062c2:	bd80      	pop	{r7, pc}
 80062c4:	20013a78 	.word	0x20013a78
 80062c8:	20013e50 	.word	0x20013e50

080062cc <inflow_handler>:

void inflow_handler()
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	af00      	add	r7, sp, #0
    if (device->state == ON && damper_state == 2 && sensors_data->out_state && sensors_data->in_state)
 80062d0:	4b0d      	ldr	r3, [pc, #52]	; (8006308 <inflow_handler+0x3c>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	789b      	ldrb	r3, [r3, #2]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d010      	beq.n	80062fc <inflow_handler+0x30>
 80062da:	4b0c      	ldr	r3, [pc, #48]	; (800630c <inflow_handler+0x40>)
 80062dc:	781b      	ldrb	r3, [r3, #0]
 80062de:	2b02      	cmp	r3, #2
 80062e0:	d10c      	bne.n	80062fc <inflow_handler+0x30>
 80062e2:	4b0b      	ldr	r3, [pc, #44]	; (8006310 <inflow_handler+0x44>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	7f1b      	ldrb	r3, [r3, #28]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d007      	beq.n	80062fc <inflow_handler+0x30>
 80062ec:	4b08      	ldr	r3, [pc, #32]	; (8006310 <inflow_handler+0x44>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	7f5b      	ldrb	r3, [r3, #29]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d002      	beq.n	80062fc <inflow_handler+0x30>
        mode_handler();
 80062f6:	f7ff ffc7 	bl	8006288 <mode_handler>
 80062fa:	e003      	b.n	8006304 <inflow_handler+0x38>
    else
    	set_inflow_fan1(OFF);
 80062fc:	2000      	movs	r0, #0
 80062fe:	f001 ff29 	bl	8008154 <set_inflow_fan1>
}
 8006302:	bf00      	nop
 8006304:	bf00      	nop
 8006306:	bd80      	pop	{r7, pc}
 8006308:	20013a78 	.word	0x20013a78
 800630c:	20013d94 	.word	0x20013d94
 8006310:	20013a80 	.word	0x20013a80

08006314 <MainTask>:

void MainTask(void *argument)
{
 8006314:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006316:	b089      	sub	sp, #36	; 0x24
 8006318:	af06      	add	r7, sp, #24
 800631a:	6078      	str	r0, [r7, #4]
    DEBUG_MODES("DEVICE STATE %i\n", device->state);
 800631c:	4b24      	ldr	r3, [pc, #144]	; (80063b0 <MainTask+0x9c>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	789b      	ldrb	r3, [r3, #2]
 8006322:	4619      	mov	r1, r3
 8006324:	4823      	ldr	r0, [pc, #140]	; (80063b4 <MainTask+0xa0>)
 8006326:	f01f fa41 	bl	80257ac <iprintf>
    DEBUG_MODES("DEVICE MODE %i\n", device->mode);
 800632a:	4b21      	ldr	r3, [pc, #132]	; (80063b0 <MainTask+0x9c>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	7b5b      	ldrb	r3, [r3, #13]
 8006330:	4619      	mov	r1, r3
 8006332:	4821      	ldr	r0, [pc, #132]	; (80063b8 <MainTask+0xa4>)
 8006334:	f01f fa3a 	bl	80257ac <iprintf>
    DEBUG_MODES("DEVICE inflow_speed %i\n", device->inflow_speed);
 8006338:	4b1d      	ldr	r3, [pc, #116]	; (80063b0 <MainTask+0x9c>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	7bdb      	ldrb	r3, [r3, #15]
 800633e:	4619      	mov	r1, r3
 8006340:	481e      	ldr	r0, [pc, #120]	; (80063bc <MainTask+0xa8>)
 8006342:	f01f fa33 	bl	80257ac <iprintf>
    DEBUG_MODES("speed {%i,%i,%i,%i,%i,%i,%i,%i}\n", device->speed_arr[0], device->speed_arr[1], device->speed_arr[2], device->speed_arr[3], device->speed_arr[4], device->speed_arr[5], device->speed_arr[6], device->speed_arr[7]);
 8006346:	4b1a      	ldr	r3, [pc, #104]	; (80063b0 <MainTask+0x9c>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	7c5b      	ldrb	r3, [r3, #17]
 800634c:	461d      	mov	r5, r3
 800634e:	4b18      	ldr	r3, [pc, #96]	; (80063b0 <MainTask+0x9c>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	7c9b      	ldrb	r3, [r3, #18]
 8006354:	461e      	mov	r6, r3
 8006356:	4b16      	ldr	r3, [pc, #88]	; (80063b0 <MainTask+0x9c>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	7cdb      	ldrb	r3, [r3, #19]
 800635c:	469c      	mov	ip, r3
 800635e:	4b14      	ldr	r3, [pc, #80]	; (80063b0 <MainTask+0x9c>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	7d1b      	ldrb	r3, [r3, #20]
 8006364:	461a      	mov	r2, r3
 8006366:	4b12      	ldr	r3, [pc, #72]	; (80063b0 <MainTask+0x9c>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	7d5b      	ldrb	r3, [r3, #21]
 800636c:	4619      	mov	r1, r3
 800636e:	4b10      	ldr	r3, [pc, #64]	; (80063b0 <MainTask+0x9c>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	7d9b      	ldrb	r3, [r3, #22]
 8006374:	4618      	mov	r0, r3
 8006376:	4b0e      	ldr	r3, [pc, #56]	; (80063b0 <MainTask+0x9c>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	7ddb      	ldrb	r3, [r3, #23]
 800637c:	461c      	mov	r4, r3
 800637e:	4b0c      	ldr	r3, [pc, #48]	; (80063b0 <MainTask+0x9c>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	7e1b      	ldrb	r3, [r3, #24]
 8006384:	9304      	str	r3, [sp, #16]
 8006386:	9403      	str	r4, [sp, #12]
 8006388:	9002      	str	r0, [sp, #8]
 800638a:	9101      	str	r1, [sp, #4]
 800638c:	9200      	str	r2, [sp, #0]
 800638e:	4663      	mov	r3, ip
 8006390:	4632      	mov	r2, r6
 8006392:	4629      	mov	r1, r5
 8006394:	480a      	ldr	r0, [pc, #40]	; (80063c0 <MainTask+0xac>)
 8006396:	f01f fa09 	bl	80257ac <iprintf>
    for(;;)
    {
    	temp_hot();  // функция проверки перегрева
 800639a:	f7ff fe2b 	bl	8005ff4 <temp_hot>
    	temp_cold(); // функция проверки переохлаждения
 800639e:	f7ff fcc9 	bl	8005d34 <temp_cold>
    	inflow_handler();
 80063a2:	f7ff ff93 	bl	80062cc <inflow_handler>
        osDelay(300);
 80063a6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80063aa:	f00b fc9e 	bl	8011cea <osDelay>
    	temp_hot();  // функция проверки перегрева
 80063ae:	e7f4      	b.n	800639a <MainTask+0x86>
 80063b0:	20013a78 	.word	0x20013a78
 80063b4:	08029c04 	.word	0x08029c04
 80063b8:	08029c1c 	.word	0x08029c1c
 80063bc:	08029c34 	.word	0x08029c34
 80063c0:	08029c54 	.word	0x08029c54

080063c4 <capabilities>:
#include "../../Inc/cJSON/cJSON.h"
#include "../Storage/storage.h"
#include "../../Inc/cJSON/utils.h"

void capabilities(cJSON *capabilities_js)
{
 80063c4:	b5b0      	push	{r4, r5, r7, lr}
 80063c6:	b082      	sub	sp, #8
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
    check_char_on_off(capabilities_js, "on_off", &device->state);
 80063cc:	4b1a      	ldr	r3, [pc, #104]	; (8006438 <capabilities+0x74>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	3302      	adds	r3, #2
 80063d2:	461a      	mov	r2, r3
 80063d4:	4919      	ldr	r1, [pc, #100]	; (800643c <capabilities+0x78>)
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f7ff fc2a 	bl	8005c30 <check_char_on_off>
    check_char_mode(capabilities_js, "mode", &device->mode);
 80063dc:	4b16      	ldr	r3, [pc, #88]	; (8006438 <capabilities+0x74>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	330d      	adds	r3, #13
 80063e2:	461a      	mov	r2, r3
 80063e4:	4916      	ldr	r1, [pc, #88]	; (8006440 <capabilities+0x7c>)
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f7ff fbcc 	bl	8005b84 <check_char_mode>
    check_js_param_u8(capabilities_js, "speed", &device->inflow_speed);
 80063ec:	4b12      	ldr	r3, [pc, #72]	; (8006438 <capabilities+0x74>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	330f      	adds	r3, #15
 80063f2:	461a      	mov	r2, r3
 80063f4:	4913      	ldr	r1, [pc, #76]	; (8006444 <capabilities+0x80>)
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f7ff fba0 	bl	8005b3c <check_js_param_u8>
    check_js_param_u8(capabilities_js, "heat", &heaters->ten.temp_limit);
 80063fc:	4b12      	ldr	r3, [pc, #72]	; (8006448 <capabilities+0x84>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	3304      	adds	r3, #4
 8006402:	461a      	mov	r2, r3
 8006404:	4911      	ldr	r1, [pc, #68]	; (800644c <capabilities+0x88>)
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f7ff fb98 	bl	8005b3c <check_js_param_u8>
    device_check = *device;
 800640c:	4b0a      	ldr	r3, [pc, #40]	; (8006438 <capabilities+0x74>)
 800640e:	681a      	ldr	r2, [r3, #0]
 8006410:	4b0f      	ldr	r3, [pc, #60]	; (8006450 <capabilities+0x8c>)
 8006412:	6814      	ldr	r4, [r2, #0]
 8006414:	6850      	ldr	r0, [r2, #4]
 8006416:	6891      	ldr	r1, [r2, #8]
 8006418:	68d5      	ldr	r5, [r2, #12]
 800641a:	601c      	str	r4, [r3, #0]
 800641c:	6058      	str	r0, [r3, #4]
 800641e:	6099      	str	r1, [r3, #8]
 8006420:	60dd      	str	r5, [r3, #12]
 8006422:	6914      	ldr	r4, [r2, #16]
 8006424:	6950      	ldr	r0, [r2, #20]
 8006426:	6991      	ldr	r1, [r2, #24]
 8006428:	611c      	str	r4, [r3, #16]
 800642a:	6158      	str	r0, [r3, #20]
 800642c:	6199      	str	r1, [r3, #24]
}
 800642e:	bf00      	nop
 8006430:	3708      	adds	r7, #8
 8006432:	46bd      	mov	sp, r7
 8006434:	bdb0      	pop	{r4, r5, r7, pc}
 8006436:	bf00      	nop
 8006438:	20013a78 	.word	0x20013a78
 800643c:	08029c7c 	.word	0x08029c7c
 8006440:	08029c84 	.word	0x08029c84
 8006444:	08029c8c 	.word	0x08029c8c
 8006448:	200139cc 	.word	0x200139cc
 800644c:	08029c94 	.word	0x08029c94
 8006450:	200139d0 	.word	0x200139d0

08006454 <set_ten_settings>:

void set_ten_settings(cJSON *data_json)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b082      	sub	sp, #8
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
    check_char_on_off(data_json, "on_off", &heaters->on_off_ten);
 800645c:	4b22      	ldr	r3, [pc, #136]	; (80064e8 <set_ten_settings+0x94>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	3330      	adds	r3, #48	; 0x30
 8006462:	461a      	mov	r2, r3
 8006464:	4921      	ldr	r1, [pc, #132]	; (80064ec <set_ten_settings+0x98>)
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f7ff fbe2 	bl	8005c30 <check_char_on_off>
    check_js_param_u8(data_json, "started_value", &heaters->ten.started_value);
 800646c:	4b1e      	ldr	r3, [pc, #120]	; (80064e8 <set_ten_settings+0x94>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	3312      	adds	r3, #18
 8006472:	461a      	mov	r2, r3
 8006474:	491e      	ldr	r1, [pc, #120]	; (80064f0 <set_ten_settings+0x9c>)
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f7ff fb60 	bl	8005b3c <check_js_param_u8>
    check_js_param_int(data_json, "temp_limit", &heaters->ten.temp_limit);
 800647c:	4b1a      	ldr	r3, [pc, #104]	; (80064e8 <set_ten_settings+0x94>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	3304      	adds	r3, #4
 8006482:	461a      	mov	r2, r3
 8006484:	491b      	ldr	r1, [pc, #108]	; (80064f4 <set_ten_settings+0xa0>)
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f7ff fb36 	bl	8005af8 <check_js_param_int>
    check_js_param_int(data_json, "off_temp", &heaters->ten.off_temp);
 800648c:	4b16      	ldr	r3, [pc, #88]	; (80064e8 <set_ten_settings+0x94>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	3308      	adds	r3, #8
 8006492:	461a      	mov	r2, r3
 8006494:	4918      	ldr	r1, [pc, #96]	; (80064f8 <set_ten_settings+0xa4>)
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f7ff fb2e 	bl	8005af8 <check_js_param_int>
    check_js_param_int(data_json, "off_temp_under", &heaters->ten.off_temp_under);
 800649c:	4b12      	ldr	r3, [pc, #72]	; (80064e8 <set_ten_settings+0x94>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	330c      	adds	r3, #12
 80064a2:	461a      	mov	r2, r3
 80064a4:	4915      	ldr	r1, [pc, #84]	; (80064fc <set_ten_settings+0xa8>)
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f7ff fb26 	bl	8005af8 <check_js_param_int>
    check_js_param_int(data_json, "koef_grow", &heaters->koef_grow);
 80064ac:	4b0e      	ldr	r3, [pc, #56]	; (80064e8 <set_ten_settings+0x94>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	3324      	adds	r3, #36	; 0x24
 80064b2:	461a      	mov	r2, r3
 80064b4:	4912      	ldr	r1, [pc, #72]	; (8006500 <set_ten_settings+0xac>)
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f7ff fb1e 	bl	8005af8 <check_js_param_int>
    check_js_param_int(data_json, "update_koef_time", &heaters->update_koef_time);
 80064bc:	4b0a      	ldr	r3, [pc, #40]	; (80064e8 <set_ten_settings+0x94>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	3328      	adds	r3, #40	; 0x28
 80064c2:	461a      	mov	r2, r3
 80064c4:	490f      	ldr	r1, [pc, #60]	; (8006504 <set_ten_settings+0xb0>)
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f7ff fb16 	bl	8005af8 <check_js_param_int>
    check_js_param_int(data_json, "delta", &heaters->delta);
 80064cc:	4b06      	ldr	r3, [pc, #24]	; (80064e8 <set_ten_settings+0x94>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	331c      	adds	r3, #28
 80064d2:	461a      	mov	r2, r3
 80064d4:	490c      	ldr	r1, [pc, #48]	; (8006508 <set_ten_settings+0xb4>)
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f7ff fb0e 	bl	8005af8 <check_js_param_int>
    DEBUG_MQTT("Set ten temp_limit = %i", heaters->ten.temp_limit);
    DEBUG_MQTT("Set ten off_temp = %i", heaters->ten.off_temp);
    DEBUG_MQTT("Set ten off_temp_under = %i", heaters->ten.off_temp_under);
    DEBUG_MQTT("Set ten started_value = %i", heaters->ten.started_value);
    DEBUG_MQTT("Set ten power_koef = %i", heaters->ten.power_koef);
    write_heaters();
 80064dc:	f002 fe94 	bl	8009208 <write_heaters>
}
 80064e0:	bf00      	nop
 80064e2:	3708      	adds	r7, #8
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}
 80064e8:	200139cc 	.word	0x200139cc
 80064ec:	08029c7c 	.word	0x08029c7c
 80064f0:	08029c9c 	.word	0x08029c9c
 80064f4:	08029cac 	.word	0x08029cac
 80064f8:	08029cb8 	.word	0x08029cb8
 80064fc:	08029cc4 	.word	0x08029cc4
 8006500:	08029cd4 	.word	0x08029cd4
 8006504:	08029ce0 	.word	0x08029ce0
 8006508:	08029cf4 	.word	0x08029cf4

0800650c <settings_handler>:

void settings_handler(cJSON *settings_js)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b084      	sub	sp, #16
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
    cJSON *ten_js = cJSON_GetObjectItem(settings_js, "ten");
 8006514:	4915      	ldr	r1, [pc, #84]	; (800656c <settings_handler+0x60>)
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f7ff f94b 	bl	80057b2 <cJSON_GetObjectItem>
 800651c:	60f8      	str	r0, [r7, #12]

    if (ten_js != NULL)
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d002      	beq.n	800652a <settings_handler+0x1e>
        set_ten_settings(ten_js);
 8006524:	68f8      	ldr	r0, [r7, #12]
 8006526:	f7ff ff95 	bl	8006454 <set_ten_settings>
    if (check_js_param_char(settings_js, "mqtt_ip", &wireless_params->vakio_mqtt.host))
 800652a:	4b11      	ldr	r3, [pc, #68]	; (8006570 <settings_handler+0x64>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	3360      	adds	r3, #96	; 0x60
 8006530:	461a      	mov	r2, r3
 8006532:	4910      	ldr	r1, [pc, #64]	; (8006574 <settings_handler+0x68>)
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f7ff fbd9 	bl	8005cec <check_js_param_char>
 800653a:	4603      	mov	r3, r0
 800653c:	2b00      	cmp	r3, #0
 800653e:	d003      	beq.n	8006548 <settings_handler+0x3c>
    {
        write_wireless_params();
 8006540:	f002 fe42 	bl	80091c8 <write_wireless_params>
        set_mqtt_parameters();
 8006544:	f000 fd16 	bl	8006f74 <set_mqtt_parameters>
    }
    if (check_js_param_u8(settings_js, "damper", &device->damper))
 8006548:	4b0b      	ldr	r3, [pc, #44]	; (8006578 <settings_handler+0x6c>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	3301      	adds	r3, #1
 800654e:	461a      	mov	r2, r3
 8006550:	490a      	ldr	r1, [pc, #40]	; (800657c <settings_handler+0x70>)
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f7ff faf2 	bl	8005b3c <check_js_param_u8>
 8006558:	4603      	mov	r3, r0
 800655a:	2b00      	cmp	r3, #0
 800655c:	d001      	beq.n	8006562 <settings_handler+0x56>
        write_device_params();
 800655e:	f002 fe73 	bl	8009248 <write_device_params>
}
 8006562:	bf00      	nop
 8006564:	3710      	adds	r7, #16
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}
 800656a:	bf00      	nop
 800656c:	08029cfc 	.word	0x08029cfc
 8006570:	20013a7c 	.word	0x20013a7c
 8006574:	08029d00 	.word	0x08029d00
 8006578:	20013a78 	.word	0x20013a78
 800657c:	08029d08 	.word	0x08029d08

08006580 <mode_topic_handler>:

void mode_topic_handler(char *data)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b08c      	sub	sp, #48	; 0x30
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
    cJSON *data_json = cJSON_Parse(data);
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f7fe fa99 	bl	8004ac0 <cJSON_Parse>
 800658e:	6278      	str	r0, [r7, #36]	; 0x24
    if (data == NULL)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d10e      	bne.n	80065b4 <mode_topic_handler+0x34>
    {
        const char *error_ptr = cJSON_GetErrorPtr();
 8006596:	f7fd f9c3 	bl	8003920 <cJSON_GetErrorPtr>
 800659a:	60b8      	str	r0, [r7, #8]
        if (error_ptr != NULL)
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d047      	beq.n	8006632 <mode_topic_handler+0xb2>
        {
            fprintf(stderr, "Error before: %s\n", error_ptr);
 80065a2:	4b26      	ldr	r3, [pc, #152]	; (800663c <mode_topic_handler+0xbc>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	68db      	ldr	r3, [r3, #12]
 80065a8:	68ba      	ldr	r2, [r7, #8]
 80065aa:	4925      	ldr	r1, [pc, #148]	; (8006640 <mode_topic_handler+0xc0>)
 80065ac:	4618      	mov	r0, r3
 80065ae:	f01e f9d3 	bl	8024958 <fiprintf>
        }
        return;
 80065b2:	e03e      	b.n	8006632 <mode_topic_handler+0xb2>
    }
    cJSON *capabilities_js_arr = cJSON_GetObjectItem(data_json, "capabilities");
 80065b4:	4923      	ldr	r1, [pc, #140]	; (8006644 <mode_topic_handler+0xc4>)
 80065b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80065b8:	f7ff f8fb 	bl	80057b2 <cJSON_GetObjectItem>
 80065bc:	6238      	str	r0, [r7, #32]
    cJSON *settings_js_arr = cJSON_GetObjectItem(data_json, "settings");
 80065be:	4922      	ldr	r1, [pc, #136]	; (8006648 <mode_topic_handler+0xc8>)
 80065c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80065c2:	f7ff f8f6 	bl	80057b2 <cJSON_GetObjectItem>
 80065c6:	61f8      	str	r0, [r7, #28]

    if (settings_js_arr != NULL)
 80065c8:	69fb      	ldr	r3, [r7, #28]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d015      	beq.n	80065fa <mode_topic_handler+0x7a>
    {
        int js_size = cJSON_GetArraySize(settings_js_arr);
 80065ce:	69f8      	ldr	r0, [r7, #28]
 80065d0:	f7ff f84f 	bl	8005672 <cJSON_GetArraySize>
 80065d4:	61b8      	str	r0, [r7, #24]
        DEBUG_MQTT("Get settings_js_arr %i\n", js_size);
        for (int count = 0; count < js_size; count++)
 80065d6:	2300      	movs	r3, #0
 80065d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065da:	e00a      	b.n	80065f2 <mode_topic_handler+0x72>
        {
            cJSON *settings_js = cJSON_GetArrayItem(settings_js_arr, count);
 80065dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80065de:	69f8      	ldr	r0, [r7, #28]
 80065e0:	f7ff f88b 	bl	80056fa <cJSON_GetArrayItem>
 80065e4:	6178      	str	r0, [r7, #20]
            settings_handler(settings_js);
 80065e6:	6978      	ldr	r0, [r7, #20]
 80065e8:	f7ff ff90 	bl	800650c <settings_handler>
        for (int count = 0; count < js_size; count++)
 80065ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ee:	3301      	adds	r3, #1
 80065f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80065f4:	69bb      	ldr	r3, [r7, #24]
 80065f6:	429a      	cmp	r2, r3
 80065f8:	dbf0      	blt.n	80065dc <mode_topic_handler+0x5c>
        }
    }

    if (capabilities_js_arr != NULL)
 80065fa:	6a3b      	ldr	r3, [r7, #32]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d019      	beq.n	8006634 <mode_topic_handler+0xb4>
    {
        int js_size = cJSON_GetArraySize(capabilities_js_arr);
 8006600:	6a38      	ldr	r0, [r7, #32]
 8006602:	f7ff f836 	bl	8005672 <cJSON_GetArraySize>
 8006606:	6138      	str	r0, [r7, #16]
        DEBUG_MQTT("Get capabilities %i\n", js_size);
        for (int count = 0; count < js_size; count++)
 8006608:	2300      	movs	r3, #0
 800660a:	62bb      	str	r3, [r7, #40]	; 0x28
 800660c:	e00a      	b.n	8006624 <mode_topic_handler+0xa4>
        {
            cJSON *capabilities_js = cJSON_GetArrayItem(capabilities_js_arr, count);
 800660e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006610:	6a38      	ldr	r0, [r7, #32]
 8006612:	f7ff f872 	bl	80056fa <cJSON_GetArrayItem>
 8006616:	60f8      	str	r0, [r7, #12]
            capabilities(capabilities_js);
 8006618:	68f8      	ldr	r0, [r7, #12]
 800661a:	f7ff fed3 	bl	80063c4 <capabilities>
        for (int count = 0; count < js_size; count++)
 800661e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006620:	3301      	adds	r3, #1
 8006622:	62bb      	str	r3, [r7, #40]	; 0x28
 8006624:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	429a      	cmp	r2, r3
 800662a:	dbf0      	blt.n	800660e <mode_topic_handler+0x8e>
        }
        write_device_params();
 800662c:	f002 fe0c 	bl	8009248 <write_device_params>
 8006630:	e000      	b.n	8006634 <mode_topic_handler+0xb4>
        return;
 8006632:	bf00      	nop
    }
}
 8006634:	3730      	adds	r7, #48	; 0x30
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}
 800663a:	bf00      	nop
 800663c:	10000070 	.word	0x10000070
 8006640:	08029d10 	.word	0x08029d10
 8006644:	08029d24 	.word	0x08029d24
 8006648:	08029d34 	.word	0x08029d34

0800664c <mqtt_pub_request_cb>:
void connect_mqtt(mqtt_client_t *client);
extern struct netif gnetif;
/* Private function prototypes -----------------------------------------------*/

static void mqtt_pub_request_cb(void *arg, err_t result)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b082      	sub	sp, #8
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
 8006654:	460b      	mov	r3, r1
 8006656:	70fb      	strb	r3, [r7, #3]
	if (result != ERR_OK)
 8006658:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d005      	beq.n	800666c <mqtt_pub_request_cb+0x20>
	{
		DEBUG_MQTT("Publish result: %d\n", result);
 8006660:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006664:	4619      	mov	r1, r3
 8006666:	4803      	ldr	r0, [pc, #12]	; (8006674 <mqtt_pub_request_cb+0x28>)
 8006668:	f01f f8a0 	bl	80257ac <iprintf>
	}
}
 800666c:	bf00      	nop
 800666e:	3708      	adds	r7, #8
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}
 8006674:	08029d40 	.word	0x08029d40

08006678 <publish_message>:
		DEBUG_MQTT("Publish err: %d\n", err);
	}
}

void publish_message(char topic[], char message[])
{
 8006678:	b590      	push	{r4, r7, lr}
 800667a:	b089      	sub	sp, #36	; 0x24
 800667c:	af04      	add	r7, sp, #16
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	6039      	str	r1, [r7, #0]
	void *arg = NULL;
 8006682:	2300      	movs	r3, #0
 8006684:	60fb      	str	r3, [r7, #12]
	err_t err;
	u8_t qos = 1; /* 0 1 or 2, see MQTT specification */
 8006686:	2301      	movs	r3, #1
 8006688:	72fb      	strb	r3, [r7, #11]
	u8_t retain = 0; /* No don't retain such crappy payload... */
 800668a:	2300      	movs	r3, #0
 800668c:	72bb      	strb	r3, [r7, #10]
	err = mqtt_publish(client, topic, message, strlen(message), qos, retain, mqtt_pub_request_cb, arg);
 800668e:	4b12      	ldr	r3, [pc, #72]	; (80066d8 <publish_message+0x60>)
 8006690:	681c      	ldr	r4, [r3, #0]
 8006692:	6838      	ldr	r0, [r7, #0]
 8006694:	f7f9 fda6 	bl	80001e4 <strlen>
 8006698:	4603      	mov	r3, r0
 800669a:	b29a      	uxth	r2, r3
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	9303      	str	r3, [sp, #12]
 80066a0:	4b0e      	ldr	r3, [pc, #56]	; (80066dc <publish_message+0x64>)
 80066a2:	9302      	str	r3, [sp, #8]
 80066a4:	7abb      	ldrb	r3, [r7, #10]
 80066a6:	9301      	str	r3, [sp, #4]
 80066a8:	7afb      	ldrb	r3, [r7, #11]
 80066aa:	9300      	str	r3, [sp, #0]
 80066ac:	4613      	mov	r3, r2
 80066ae:	683a      	ldr	r2, [r7, #0]
 80066b0:	6879      	ldr	r1, [r7, #4]
 80066b2:	4620      	mov	r0, r4
 80066b4:	f010 fc9c 	bl	8016ff0 <mqtt_publish>
 80066b8:	4603      	mov	r3, r0
 80066ba:	727b      	strb	r3, [r7, #9]
	if (err != ERR_OK)
 80066bc:	f997 3009 	ldrsb.w	r3, [r7, #9]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d005      	beq.n	80066d0 <publish_message+0x58>
	{
		DEBUG_MQTT("Publish err: %d\n", err);
 80066c4:	f997 3009 	ldrsb.w	r3, [r7, #9]
 80066c8:	4619      	mov	r1, r3
 80066ca:	4805      	ldr	r0, [pc, #20]	; (80066e0 <publish_message+0x68>)
 80066cc:	f01f f86e 	bl	80257ac <iprintf>
	}
}
 80066d0:	bf00      	nop
 80066d2:	3714      	adds	r7, #20
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd90      	pop	{r4, r7, pc}
 80066d8:	20013f84 	.word	0x20013f84
 80066dc:	0800664d 	.word	0x0800664d
 80066e0:	08029d5c 	.word	0x08029d5c

080066e4 <mqtt_incoming_publish_cb>:

static int inpub_id;
static void mqtt_incoming_publish_cb(void *arg, const char *topic, u32_t tot_len)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b084      	sub	sp, #16
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	60f8      	str	r0, [r7, #12]
 80066ec:	60b9      	str	r1, [r7, #8]
 80066ee:	607a      	str	r2, [r7, #4]
	DEBUG_MQTT("Incoming publish at topic %s with total length %u\n", topic, (unsigned int) tot_len);
 80066f0:	687a      	ldr	r2, [r7, #4]
 80066f2:	68b9      	ldr	r1, [r7, #8]
 80066f4:	4827      	ldr	r0, [pc, #156]	; (8006794 <mqtt_incoming_publish_cb+0xb0>)
 80066f6:	f01f f859 	bl	80257ac <iprintf>
	/* Decode topic string into a user defined reference */
	if (strcmp(topic, mode_topic) == 0)
 80066fa:	4927      	ldr	r1, [pc, #156]	; (8006798 <mqtt_incoming_publish_cb+0xb4>)
 80066fc:	68b8      	ldr	r0, [r7, #8]
 80066fe:	f7f9 fd67 	bl	80001d0 <strcmp>
 8006702:	4603      	mov	r3, r0
 8006704:	2b00      	cmp	r3, #0
 8006706:	d103      	bne.n	8006710 <mqtt_incoming_publish_cb+0x2c>
		inpub_id = 0;
 8006708:	4b24      	ldr	r3, [pc, #144]	; (800679c <mqtt_incoming_publish_cb+0xb8>)
 800670a:	2200      	movs	r2, #0
 800670c:	601a      	str	r2, [r3, #0]
 800670e:	e009      	b.n	8006724 <mqtt_incoming_publish_cb+0x40>
	else if (strcmp(topic, system_topic) == 0)
 8006710:	4923      	ldr	r1, [pc, #140]	; (80067a0 <mqtt_incoming_publish_cb+0xbc>)
 8006712:	68b8      	ldr	r0, [r7, #8]
 8006714:	f7f9 fd5c 	bl	80001d0 <strcmp>
 8006718:	4603      	mov	r3, r0
 800671a:	2b00      	cmp	r3, #0
 800671c:	d102      	bne.n	8006724 <mqtt_incoming_publish_cb+0x40>
		inpub_id = 1;
 800671e:	4b1f      	ldr	r3, [pc, #124]	; (800679c <mqtt_incoming_publish_cb+0xb8>)
 8006720:	2201      	movs	r2, #1
 8006722:	601a      	str	r2, [r3, #0]
    if (wireless_params->mqtt_type != VAKIO_MQTT)
 8006724:	4b1f      	ldr	r3, [pc, #124]	; (80067a4 <mqtt_incoming_publish_cb+0xc0>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800672c:	f083 0301 	eor.w	r3, r3, #1
 8006730:	b2db      	uxtb	r3, r3
 8006732:	2b00      	cmp	r3, #0
 8006734:	d02a      	beq.n	800678c <mqtt_incoming_publish_cb+0xa8>
    {
        if (strcmp(topic, workmode_topic) == 0)
 8006736:	491c      	ldr	r1, [pc, #112]	; (80067a8 <mqtt_incoming_publish_cb+0xc4>)
 8006738:	68b8      	ldr	r0, [r7, #8]
 800673a:	f7f9 fd49 	bl	80001d0 <strcmp>
 800673e:	4603      	mov	r3, r0
 8006740:	2b00      	cmp	r3, #0
 8006742:	d103      	bne.n	800674c <mqtt_incoming_publish_cb+0x68>
        	inpub_id = 2;
 8006744:	4b15      	ldr	r3, [pc, #84]	; (800679c <mqtt_incoming_publish_cb+0xb8>)
 8006746:	2202      	movs	r2, #2
 8006748:	601a      	str	r2, [r3, #0]
        else if (strcmp(topic, speed_topic) == 0)
        	inpub_id = 4;
        else if (strcmp(topic, temp_limit_topic) == 0)
        	inpub_id = 5;
    }
}
 800674a:	e01f      	b.n	800678c <mqtt_incoming_publish_cb+0xa8>
        else if (strcmp(topic, state_topic) == 0)
 800674c:	4917      	ldr	r1, [pc, #92]	; (80067ac <mqtt_incoming_publish_cb+0xc8>)
 800674e:	68b8      	ldr	r0, [r7, #8]
 8006750:	f7f9 fd3e 	bl	80001d0 <strcmp>
 8006754:	4603      	mov	r3, r0
 8006756:	2b00      	cmp	r3, #0
 8006758:	d103      	bne.n	8006762 <mqtt_incoming_publish_cb+0x7e>
        	inpub_id = 3;
 800675a:	4b10      	ldr	r3, [pc, #64]	; (800679c <mqtt_incoming_publish_cb+0xb8>)
 800675c:	2203      	movs	r2, #3
 800675e:	601a      	str	r2, [r3, #0]
}
 8006760:	e014      	b.n	800678c <mqtt_incoming_publish_cb+0xa8>
        else if (strcmp(topic, speed_topic) == 0)
 8006762:	4913      	ldr	r1, [pc, #76]	; (80067b0 <mqtt_incoming_publish_cb+0xcc>)
 8006764:	68b8      	ldr	r0, [r7, #8]
 8006766:	f7f9 fd33 	bl	80001d0 <strcmp>
 800676a:	4603      	mov	r3, r0
 800676c:	2b00      	cmp	r3, #0
 800676e:	d103      	bne.n	8006778 <mqtt_incoming_publish_cb+0x94>
        	inpub_id = 4;
 8006770:	4b0a      	ldr	r3, [pc, #40]	; (800679c <mqtt_incoming_publish_cb+0xb8>)
 8006772:	2204      	movs	r2, #4
 8006774:	601a      	str	r2, [r3, #0]
}
 8006776:	e009      	b.n	800678c <mqtt_incoming_publish_cb+0xa8>
        else if (strcmp(topic, temp_limit_topic) == 0)
 8006778:	490e      	ldr	r1, [pc, #56]	; (80067b4 <mqtt_incoming_publish_cb+0xd0>)
 800677a:	68b8      	ldr	r0, [r7, #8]
 800677c:	f7f9 fd28 	bl	80001d0 <strcmp>
 8006780:	4603      	mov	r3, r0
 8006782:	2b00      	cmp	r3, #0
 8006784:	d102      	bne.n	800678c <mqtt_incoming_publish_cb+0xa8>
        	inpub_id = 5;
 8006786:	4b05      	ldr	r3, [pc, #20]	; (800679c <mqtt_incoming_publish_cb+0xb8>)
 8006788:	2205      	movs	r2, #5
 800678a:	601a      	str	r2, [r3, #0]
}
 800678c:	bf00      	nop
 800678e:	3710      	adds	r7, #16
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}
 8006794:	08029d74 	.word	0x08029d74
 8006798:	20013da4 	.word	0x20013da4
 800679c:	20000048 	.word	0x20000048
 80067a0:	20013ea4 	.word	0x20013ea4
 80067a4:	20013a7c 	.word	0x20013a7c
 80067a8:	20013df4 	.word	0x20013df4
 80067ac:	20013ca4 	.word	0x20013ca4
 80067b0:	20013d44 	.word	0x20013d44
 80067b4:	20013bf4 	.word	0x20013bf4

080067b8 <mqtt_incoming_data_cb>:

static void mqtt_incoming_data_cb(void *arg, const u8_t *data, u16_t len, u8_t flags)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b086      	sub	sp, #24
 80067bc:	af00      	add	r7, sp, #0
 80067be:	60f8      	str	r0, [r7, #12]
 80067c0:	60b9      	str	r1, [r7, #8]
 80067c2:	4611      	mov	r1, r2
 80067c4:	461a      	mov	r2, r3
 80067c6:	460b      	mov	r3, r1
 80067c8:	80fb      	strh	r3, [r7, #6]
 80067ca:	4613      	mov	r3, r2
 80067cc:	717b      	strb	r3, [r7, #5]
	DEBUG_MQTT("Incoming publish payload with length %d, flags %u\n", len, (unsigned int) flags);
 80067ce:	88fb      	ldrh	r3, [r7, #6]
 80067d0:	797a      	ldrb	r2, [r7, #5]
 80067d2:	4619      	mov	r1, r3
 80067d4:	4873      	ldr	r0, [pc, #460]	; (80069a4 <mqtt_incoming_data_cb+0x1ec>)
 80067d6:	f01e ffe9 	bl	80257ac <iprintf>
	if (flags & MQTT_DATA_FLAG_LAST)
 80067da:	797b      	ldrb	r3, [r7, #5]
 80067dc:	f003 0301 	and.w	r3, r3, #1
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	f000 80db 	beq.w	800699c <mqtt_incoming_data_cb+0x1e4>
	{
		DEBUG_MQTT("mqtt_incoming_data_cb: %s\n", (char*) data);
 80067e6:	68b9      	ldr	r1, [r7, #8]
 80067e8:	486f      	ldr	r0, [pc, #444]	; (80069a8 <mqtt_incoming_data_cb+0x1f0>)
 80067ea:	f01e ffdf 	bl	80257ac <iprintf>
		if (inpub_id == 0)            //mode_topic
 80067ee:	4b6f      	ldr	r3, [pc, #444]	; (80069ac <mqtt_incoming_data_cb+0x1f4>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d103      	bne.n	80067fe <mqtt_incoming_data_cb+0x46>
			mode_topic_handler(data);
 80067f6:	68b8      	ldr	r0, [r7, #8]
 80067f8:	f7ff fec2 	bl	8006580 <mode_topic_handler>
 80067fc:	e006      	b.n	800680c <mqtt_incoming_data_cb+0x54>
		else if (inpub_id == 1)       //system topic
 80067fe:	4b6b      	ldr	r3, [pc, #428]	; (80069ac <mqtt_incoming_data_cb+0x1f4>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	2b01      	cmp	r3, #1
 8006804:	d102      	bne.n	800680c <mqtt_incoming_data_cb+0x54>
			system_topic_handler(data);
 8006806:	68b8      	ldr	r0, [r7, #8]
 8006808:	f001 fb6a 	bl	8007ee0 <system_topic_handler>
	    if (wireless_params->mqtt_type != VAKIO_MQTT)
 800680c:	4b68      	ldr	r3, [pc, #416]	; (80069b0 <mqtt_incoming_data_cb+0x1f8>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8006814:	f083 0301 	eor.w	r3, r3, #1
 8006818:	b2db      	uxtb	r3, r3
 800681a:	2b00      	cmp	r3, #0
 800681c:	f000 80b8 	beq.w	8006990 <mqtt_incoming_data_cb+0x1d8>
	    {
            if (inpub_id == 2)        //workmode topic)
 8006820:	4b62      	ldr	r3, [pc, #392]	; (80069ac <mqtt_incoming_data_cb+0x1f4>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	2b02      	cmp	r3, #2
 8006826:	d12b      	bne.n	8006880 <mqtt_incoming_data_cb+0xc8>
            {
                if (!iSendMode)
 8006828:	4b62      	ldr	r3, [pc, #392]	; (80069b4 <mqtt_incoming_data_cb+0x1fc>)
 800682a:	781b      	ldrb	r3, [r3, #0]
 800682c:	f083 0301 	eor.w	r3, r3, #1
 8006830:	b2db      	uxtb	r3, r3
 8006832:	2b00      	cmp	r3, #0
 8006834:	d020      	beq.n	8006878 <mqtt_incoming_data_cb+0xc0>
                {
                    if (strcmp((char*)data, "inflow_mode") == 0)
 8006836:	4960      	ldr	r1, [pc, #384]	; (80069b8 <mqtt_incoming_data_cb+0x200>)
 8006838:	68b8      	ldr	r0, [r7, #8]
 800683a:	f7f9 fcc9 	bl	80001d0 <strcmp>
 800683e:	4603      	mov	r3, r0
 8006840:	2b00      	cmp	r3, #0
 8006842:	d104      	bne.n	800684e <mqtt_incoming_data_cb+0x96>
                        device->mode = INFLOW_MODE;
 8006844:	4b5d      	ldr	r3, [pc, #372]	; (80069bc <mqtt_incoming_data_cb+0x204>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	2200      	movs	r2, #0
 800684a:	735a      	strb	r2, [r3, #13]
 800684c:	e00a      	b.n	8006864 <mqtt_incoming_data_cb+0xac>
                    else if (strcmp((char*)data, "inflow_max_mode") == 0)
 800684e:	495c      	ldr	r1, [pc, #368]	; (80069c0 <mqtt_incoming_data_cb+0x208>)
 8006850:	68b8      	ldr	r0, [r7, #8]
 8006852:	f7f9 fcbd 	bl	80001d0 <strcmp>
 8006856:	4603      	mov	r3, r0
 8006858:	2b00      	cmp	r3, #0
 800685a:	d103      	bne.n	8006864 <mqtt_incoming_data_cb+0xac>
                        device->mode = INFLOW_MAX_MODE;
 800685c:	4b57      	ldr	r3, [pc, #348]	; (80069bc <mqtt_incoming_data_cb+0x204>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	2202      	movs	r2, #2
 8006862:	735a      	strb	r2, [r3, #13]
                    device_check.mode = device->mode;
 8006864:	4b55      	ldr	r3, [pc, #340]	; (80069bc <mqtt_incoming_data_cb+0x204>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	7b5a      	ldrb	r2, [r3, #13]
 800686a:	4b56      	ldr	r3, [pc, #344]	; (80069c4 <mqtt_incoming_data_cb+0x20c>)
 800686c:	735a      	strb	r2, [r3, #13]
                    device_send.mode = device->mode;
 800686e:	4b53      	ldr	r3, [pc, #332]	; (80069bc <mqtt_incoming_data_cb+0x204>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	7b5a      	ldrb	r2, [r3, #13]
 8006874:	4b54      	ldr	r3, [pc, #336]	; (80069c8 <mqtt_incoming_data_cb+0x210>)
 8006876:	735a      	strb	r2, [r3, #13]
                }
                iSendMode = false;
 8006878:	4b4e      	ldr	r3, [pc, #312]	; (80069b4 <mqtt_incoming_data_cb+0x1fc>)
 800687a:	2200      	movs	r2, #0
 800687c:	701a      	strb	r2, [r3, #0]
 800687e:	e087      	b.n	8006990 <mqtt_incoming_data_cb+0x1d8>
            }
            else if (inpub_id == 3)   //state topic
 8006880:	4b4a      	ldr	r3, [pc, #296]	; (80069ac <mqtt_incoming_data_cb+0x1f4>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	2b03      	cmp	r3, #3
 8006886:	d12b      	bne.n	80068e0 <mqtt_incoming_data_cb+0x128>
            {
                if (!iSendState)
 8006888:	4b50      	ldr	r3, [pc, #320]	; (80069cc <mqtt_incoming_data_cb+0x214>)
 800688a:	781b      	ldrb	r3, [r3, #0]
 800688c:	f083 0301 	eor.w	r3, r3, #1
 8006890:	b2db      	uxtb	r3, r3
 8006892:	2b00      	cmp	r3, #0
 8006894:	d020      	beq.n	80068d8 <mqtt_incoming_data_cb+0x120>
                {

                    if (strcmp((char*)data, "on") == 0)
 8006896:	494e      	ldr	r1, [pc, #312]	; (80069d0 <mqtt_incoming_data_cb+0x218>)
 8006898:	68b8      	ldr	r0, [r7, #8]
 800689a:	f7f9 fc99 	bl	80001d0 <strcmp>
 800689e:	4603      	mov	r3, r0
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d104      	bne.n	80068ae <mqtt_incoming_data_cb+0xf6>
                        device->state = true;
 80068a4:	4b45      	ldr	r3, [pc, #276]	; (80069bc <mqtt_incoming_data_cb+0x204>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	2201      	movs	r2, #1
 80068aa:	709a      	strb	r2, [r3, #2]
 80068ac:	e00a      	b.n	80068c4 <mqtt_incoming_data_cb+0x10c>
                    else if (strcmp((char*)data, "off") == 0)
 80068ae:	4949      	ldr	r1, [pc, #292]	; (80069d4 <mqtt_incoming_data_cb+0x21c>)
 80068b0:	68b8      	ldr	r0, [r7, #8]
 80068b2:	f7f9 fc8d 	bl	80001d0 <strcmp>
 80068b6:	4603      	mov	r3, r0
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d103      	bne.n	80068c4 <mqtt_incoming_data_cb+0x10c>
                        device->state = false;
 80068bc:	4b3f      	ldr	r3, [pc, #252]	; (80069bc <mqtt_incoming_data_cb+0x204>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	2200      	movs	r2, #0
 80068c2:	709a      	strb	r2, [r3, #2]
                    device_check.state = device->state;
 80068c4:	4b3d      	ldr	r3, [pc, #244]	; (80069bc <mqtt_incoming_data_cb+0x204>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	789a      	ldrb	r2, [r3, #2]
 80068ca:	4b3e      	ldr	r3, [pc, #248]	; (80069c4 <mqtt_incoming_data_cb+0x20c>)
 80068cc:	709a      	strb	r2, [r3, #2]
                    device_send.state = device->state;
 80068ce:	4b3b      	ldr	r3, [pc, #236]	; (80069bc <mqtt_incoming_data_cb+0x204>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	789a      	ldrb	r2, [r3, #2]
 80068d4:	4b3c      	ldr	r3, [pc, #240]	; (80069c8 <mqtt_incoming_data_cb+0x210>)
 80068d6:	709a      	strb	r2, [r3, #2]
                }
                iSendState = false;
 80068d8:	4b3c      	ldr	r3, [pc, #240]	; (80069cc <mqtt_incoming_data_cb+0x214>)
 80068da:	2200      	movs	r2, #0
 80068dc:	701a      	strb	r2, [r3, #0]
 80068de:	e057      	b.n	8006990 <mqtt_incoming_data_cb+0x1d8>
            }
            else if (inpub_id == 4)   //speed topic
 80068e0:	4b32      	ldr	r3, [pc, #200]	; (80069ac <mqtt_incoming_data_cb+0x1f4>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	2b04      	cmp	r3, #4
 80068e6:	d123      	bne.n	8006930 <mqtt_incoming_data_cb+0x178>
            {
                if (!iSendSpeed)
 80068e8:	4b3b      	ldr	r3, [pc, #236]	; (80069d8 <mqtt_incoming_data_cb+0x220>)
 80068ea:	781b      	ldrb	r3, [r3, #0]
 80068ec:	f083 0301 	eor.w	r3, r3, #1
 80068f0:	b2db      	uxtb	r3, r3
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d018      	beq.n	8006928 <mqtt_incoming_data_cb+0x170>
                 {
                     uint8_t speed_ = data[0] - '0';
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	781b      	ldrb	r3, [r3, #0]
 80068fa:	3b30      	subs	r3, #48	; 0x30
 80068fc:	74fb      	strb	r3, [r7, #19]
                     device->inflow_speed = speed_;
 80068fe:	4b2f      	ldr	r3, [pc, #188]	; (80069bc <mqtt_incoming_data_cb+0x204>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	7cfa      	ldrb	r2, [r7, #19]
 8006904:	73da      	strb	r2, [r3, #15]
                     if (speed_ > 7)
 8006906:	7cfb      	ldrb	r3, [r7, #19]
 8006908:	2b07      	cmp	r3, #7
 800690a:	d903      	bls.n	8006914 <mqtt_incoming_data_cb+0x15c>
                         device->inflow_speed = 7;
 800690c:	4b2b      	ldr	r3, [pc, #172]	; (80069bc <mqtt_incoming_data_cb+0x204>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	2207      	movs	r2, #7
 8006912:	73da      	strb	r2, [r3, #15]
                     device_check.inflow_speed = device->inflow_speed;
 8006914:	4b29      	ldr	r3, [pc, #164]	; (80069bc <mqtt_incoming_data_cb+0x204>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	7bda      	ldrb	r2, [r3, #15]
 800691a:	4b2a      	ldr	r3, [pc, #168]	; (80069c4 <mqtt_incoming_data_cb+0x20c>)
 800691c:	73da      	strb	r2, [r3, #15]
                     device_send.inflow_speed = device->inflow_speed;
 800691e:	4b27      	ldr	r3, [pc, #156]	; (80069bc <mqtt_incoming_data_cb+0x204>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	7bda      	ldrb	r2, [r3, #15]
 8006924:	4b28      	ldr	r3, [pc, #160]	; (80069c8 <mqtt_incoming_data_cb+0x210>)
 8006926:	73da      	strb	r2, [r3, #15]
                 }
                 iSendSpeed = false;
 8006928:	4b2b      	ldr	r3, [pc, #172]	; (80069d8 <mqtt_incoming_data_cb+0x220>)
 800692a:	2200      	movs	r2, #0
 800692c:	701a      	strb	r2, [r3, #0]
 800692e:	e02f      	b.n	8006990 <mqtt_incoming_data_cb+0x1d8>
            }
            else if (inpub_id == 5)   //temp_limit topic
 8006930:	4b1e      	ldr	r3, [pc, #120]	; (80069ac <mqtt_incoming_data_cb+0x1f4>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	2b05      	cmp	r3, #5
 8006936:	d12b      	bne.n	8006990 <mqtt_incoming_data_cb+0x1d8>
            {
                if (!iSendTemp)
 8006938:	4b28      	ldr	r3, [pc, #160]	; (80069dc <mqtt_incoming_data_cb+0x224>)
 800693a:	781b      	ldrb	r3, [r3, #0]
 800693c:	f083 0301 	eor.w	r3, r3, #1
 8006940:	b2db      	uxtb	r3, r3
 8006942:	2b00      	cmp	r3, #0
 8006944:	d021      	beq.n	800698a <mqtt_incoming_data_cb+0x1d2>
                {
                    int temp_ = 0;
 8006946:	2300      	movs	r3, #0
 8006948:	617b      	str	r3, [r7, #20]
                    temp_ = atoi((char*)data);
 800694a:	68b8      	ldr	r0, [r7, #8]
 800694c:	f01e f800 	bl	8024950 <atoi>
 8006950:	6178      	str	r0, [r7, #20]
                    heaters->ten.temp_limit = temp_;
 8006952:	4b23      	ldr	r3, [pc, #140]	; (80069e0 <mqtt_incoming_data_cb+0x228>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	697a      	ldr	r2, [r7, #20]
 8006958:	605a      	str	r2, [r3, #4]
                    if (temp_ > 30)
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	2b1e      	cmp	r3, #30
 800695e:	dd03      	ble.n	8006968 <mqtt_incoming_data_cb+0x1b0>
                        heaters->ten.temp_limit = 30;
 8006960:	4b1f      	ldr	r3, [pc, #124]	; (80069e0 <mqtt_incoming_data_cb+0x228>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	221e      	movs	r2, #30
 8006966:	605a      	str	r2, [r3, #4]
                    if (temp_ < 10)
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	2b09      	cmp	r3, #9
 800696c:	dc03      	bgt.n	8006976 <mqtt_incoming_data_cb+0x1be>
                        heaters->ten.temp_limit = 10;
 800696e:	4b1c      	ldr	r3, [pc, #112]	; (80069e0 <mqtt_incoming_data_cb+0x228>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	220a      	movs	r2, #10
 8006974:	605a      	str	r2, [r3, #4]
                    heaters_check.ten.temp_limit = heaters->ten.temp_limit;
 8006976:	4b1a      	ldr	r3, [pc, #104]	; (80069e0 <mqtt_incoming_data_cb+0x228>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	4a19      	ldr	r2, [pc, #100]	; (80069e4 <mqtt_incoming_data_cb+0x22c>)
 800697e:	6053      	str	r3, [r2, #4]
                    heaters_send.ten.temp_limit = heaters->ten.temp_limit;
 8006980:	4b17      	ldr	r3, [pc, #92]	; (80069e0 <mqtt_incoming_data_cb+0x228>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	4a18      	ldr	r2, [pc, #96]	; (80069e8 <mqtt_incoming_data_cb+0x230>)
 8006988:	6053      	str	r3, [r2, #4]
                }
                iSendTemp = false;
 800698a:	4b14      	ldr	r3, [pc, #80]	; (80069dc <mqtt_incoming_data_cb+0x224>)
 800698c:	2200      	movs	r2, #0
 800698e:	701a      	strb	r2, [r3, #0]
            }
	    }
	memset((char*)data, 0, len);
 8006990:	88fb      	ldrh	r3, [r7, #6]
 8006992:	461a      	mov	r2, r3
 8006994:	2100      	movs	r1, #0
 8006996:	68b8      	ldr	r0, [r7, #8]
 8006998:	f01e f85c 	bl	8024a54 <memset>
	}
	else
	{
		/* Handle fragmented payload, store in buffer, write to file or whatever */
	}
}
 800699c:	bf00      	nop
 800699e:	3718      	adds	r7, #24
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}
 80069a4:	08029db0 	.word	0x08029db0
 80069a8:	08029dec 	.word	0x08029dec
 80069ac:	20000048 	.word	0x20000048
 80069b0:	20013a7c 	.word	0x20013a7c
 80069b4:	200139ca 	.word	0x200139ca
 80069b8:	08029e10 	.word	0x08029e10
 80069bc:	20013a78 	.word	0x20013a78
 80069c0:	08029e1c 	.word	0x08029e1c
 80069c4:	200139d0 	.word	0x200139d0
 80069c8:	20013a5c 	.word	0x20013a5c
 80069cc:	200139c8 	.word	0x200139c8
 80069d0:	08029e2c 	.word	0x08029e2c
 80069d4:	08029e30 	.word	0x08029e30
 80069d8:	200139c9 	.word	0x200139c9
 80069dc:	20013a28 	.word	0x20013a28
 80069e0:	200139cc 	.word	0x200139cc
 80069e4:	200139f0 	.word	0x200139f0
 80069e8:	20013938 	.word	0x20013938

080069ec <mqtt_sub_request_cb>:

uint8_t count_sub_request_cb = 0;
bool sub_request_cb = false;
static void mqtt_sub_request_cb(void *arg, err_t result)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b082      	sub	sp, #8
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
 80069f4:	460b      	mov	r3, r1
 80069f6:	70fb      	strb	r3, [r7, #3]
	DEBUG_MQTT("Subscribe result: %d\n", result);
 80069f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80069fc:	4619      	mov	r1, r3
 80069fe:	480a      	ldr	r0, [pc, #40]	; (8006a28 <mqtt_sub_request_cb+0x3c>)
 8006a00:	f01e fed4 	bl	80257ac <iprintf>
	count_sub_request_cb--;
 8006a04:	4b09      	ldr	r3, [pc, #36]	; (8006a2c <mqtt_sub_request_cb+0x40>)
 8006a06:	781b      	ldrb	r3, [r3, #0]
 8006a08:	3b01      	subs	r3, #1
 8006a0a:	b2da      	uxtb	r2, r3
 8006a0c:	4b07      	ldr	r3, [pc, #28]	; (8006a2c <mqtt_sub_request_cb+0x40>)
 8006a0e:	701a      	strb	r2, [r3, #0]
	if (count_sub_request_cb == 0)
 8006a10:	4b06      	ldr	r3, [pc, #24]	; (8006a2c <mqtt_sub_request_cb+0x40>)
 8006a12:	781b      	ldrb	r3, [r3, #0]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d102      	bne.n	8006a1e <mqtt_sub_request_cb+0x32>
	{
		sub_request_cb = true;
 8006a18:	4b05      	ldr	r3, [pc, #20]	; (8006a30 <mqtt_sub_request_cb+0x44>)
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	701a      	strb	r2, [r3, #0]
	}
}
 8006a1e:	bf00      	nop
 8006a20:	3708      	adds	r7, #8
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}
 8006a26:	bf00      	nop
 8006a28:	08029e34 	.word	0x08029e34
 8006a2c:	2000004c 	.word	0x2000004c
 8006a30:	2000004d 	.word	0x2000004d

08006a34 <mqtt_connection_cb>:
char speeds_str[4];
char temp_str[4];
char gnetif_str[24];

static void mqtt_connection_cb(mqtt_client_t *client, void *arg, mqtt_connection_status_t status)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b088      	sub	sp, #32
 8006a38:	af02      	add	r7, sp, #8
 8006a3a:	60f8      	str	r0, [r7, #12]
 8006a3c:	60b9      	str	r1, [r7, #8]
 8006a3e:	4613      	mov	r3, r2
 8006a40:	80fb      	strh	r3, [r7, #6]
	err_t err;
	if (status == MQTT_CONNECT_ACCEPTED)
 8006a42:	88fb      	ldrh	r3, [r7, #6]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	f040 80a9 	bne.w	8006b9c <mqtt_connection_cb+0x168>
	{
		DEBUG_MQTT("mqtt_connection_cb: Successfully connected\n");
 8006a4a:	485d      	ldr	r0, [pc, #372]	; (8006bc0 <mqtt_connection_cb+0x18c>)
 8006a4c:	f01e ff34 	bl	80258b8 <puts>
		mqtt_set_inpub_callback(client, mqtt_incoming_publish_cb, mqtt_incoming_data_cb, arg);
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	4a5c      	ldr	r2, [pc, #368]	; (8006bc4 <mqtt_connection_cb+0x190>)
 8006a54:	495c      	ldr	r1, [pc, #368]	; (8006bc8 <mqtt_connection_cb+0x194>)
 8006a56:	68f8      	ldr	r0, [r7, #12]
 8006a58:	f010 fc7a 	bl	8017350 <mqtt_set_inpub_callback>

		/* Subscribe to a topic named "subtopic" with QoS level 1, call mqtt_sub_request_cb with result */
		err = mqtt_subscribe(client, mode_topic, 1, mqtt_sub_request_cb, arg);
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	9301      	str	r3, [sp, #4]
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	9300      	str	r3, [sp, #0]
 8006a64:	4b59      	ldr	r3, [pc, #356]	; (8006bcc <mqtt_connection_cb+0x198>)
 8006a66:	2201      	movs	r2, #1
 8006a68:	4959      	ldr	r1, [pc, #356]	; (8006bd0 <mqtt_connection_cb+0x19c>)
 8006a6a:	68f8      	ldr	r0, [r7, #12]
 8006a6c:	f010 fb98 	bl	80171a0 <mqtt_sub_unsub>
 8006a70:	4603      	mov	r3, r0
 8006a72:	75fb      	strb	r3, [r7, #23]
		if (err == ERR_OK)
 8006a74:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d108      	bne.n	8006a8e <mqtt_connection_cb+0x5a>
		{
			count_sub_request_cb++;
 8006a7c:	4b55      	ldr	r3, [pc, #340]	; (8006bd4 <mqtt_connection_cb+0x1a0>)
 8006a7e:	781b      	ldrb	r3, [r3, #0]
 8006a80:	3301      	adds	r3, #1
 8006a82:	b2da      	uxtb	r2, r3
 8006a84:	4b53      	ldr	r3, [pc, #332]	; (8006bd4 <mqtt_connection_cb+0x1a0>)
 8006a86:	701a      	strb	r2, [r3, #0]
			DEBUG_MQTT("subscribe to mode_topic\n");
 8006a88:	4853      	ldr	r0, [pc, #332]	; (8006bd8 <mqtt_connection_cb+0x1a4>)
 8006a8a:	f01e ff15 	bl	80258b8 <puts>
		}
		err = mqtt_subscribe(client, system_topic, 1, mqtt_sub_request_cb, arg);
 8006a8e:	2301      	movs	r3, #1
 8006a90:	9301      	str	r3, [sp, #4]
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	9300      	str	r3, [sp, #0]
 8006a96:	4b4d      	ldr	r3, [pc, #308]	; (8006bcc <mqtt_connection_cb+0x198>)
 8006a98:	2201      	movs	r2, #1
 8006a9a:	4950      	ldr	r1, [pc, #320]	; (8006bdc <mqtt_connection_cb+0x1a8>)
 8006a9c:	68f8      	ldr	r0, [r7, #12]
 8006a9e:	f010 fb7f 	bl	80171a0 <mqtt_sub_unsub>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	75fb      	strb	r3, [r7, #23]
		if (err == ERR_OK)
 8006aa6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d108      	bne.n	8006ac0 <mqtt_connection_cb+0x8c>
		{
			count_sub_request_cb++;
 8006aae:	4b49      	ldr	r3, [pc, #292]	; (8006bd4 <mqtt_connection_cb+0x1a0>)
 8006ab0:	781b      	ldrb	r3, [r3, #0]
 8006ab2:	3301      	adds	r3, #1
 8006ab4:	b2da      	uxtb	r2, r3
 8006ab6:	4b47      	ldr	r3, [pc, #284]	; (8006bd4 <mqtt_connection_cb+0x1a0>)
 8006ab8:	701a      	strb	r2, [r3, #0]
			DEBUG_MQTT("subscribe to system_topic\n");
 8006aba:	4849      	ldr	r0, [pc, #292]	; (8006be0 <mqtt_connection_cb+0x1ac>)
 8006abc:	f01e fefc 	bl	80258b8 <puts>
		}
		if (wireless_params->mqtt_type != VAKIO_MQTT)
 8006ac0:	4b48      	ldr	r3, [pc, #288]	; (8006be4 <mqtt_connection_cb+0x1b0>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8006ac8:	f083 0301 	eor.w	r3, r3, #1
 8006acc:	b2db      	uxtb	r3, r3
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d071      	beq.n	8006bb6 <mqtt_connection_cb+0x182>
		{
			err = mqtt_subscribe(client, speed_topic, 1, mqtt_sub_request_cb, arg);
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	9301      	str	r3, [sp, #4]
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	9300      	str	r3, [sp, #0]
 8006ada:	4b3c      	ldr	r3, [pc, #240]	; (8006bcc <mqtt_connection_cb+0x198>)
 8006adc:	2201      	movs	r2, #1
 8006ade:	4942      	ldr	r1, [pc, #264]	; (8006be8 <mqtt_connection_cb+0x1b4>)
 8006ae0:	68f8      	ldr	r0, [r7, #12]
 8006ae2:	f010 fb5d 	bl	80171a0 <mqtt_sub_unsub>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	75fb      	strb	r3, [r7, #23]
			if (err == ERR_OK)
 8006aea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d108      	bne.n	8006b04 <mqtt_connection_cb+0xd0>
			{
				count_sub_request_cb++;
 8006af2:	4b38      	ldr	r3, [pc, #224]	; (8006bd4 <mqtt_connection_cb+0x1a0>)
 8006af4:	781b      	ldrb	r3, [r3, #0]
 8006af6:	3301      	adds	r3, #1
 8006af8:	b2da      	uxtb	r2, r3
 8006afa:	4b36      	ldr	r3, [pc, #216]	; (8006bd4 <mqtt_connection_cb+0x1a0>)
 8006afc:	701a      	strb	r2, [r3, #0]
				DEBUG_MQTT("subscribe to speed_topic\n");
 8006afe:	483b      	ldr	r0, [pc, #236]	; (8006bec <mqtt_connection_cb+0x1b8>)
 8006b00:	f01e feda 	bl	80258b8 <puts>
			}
			err = mqtt_subscribe(client, temp_limit_topic, 1, mqtt_sub_request_cb, arg);
 8006b04:	2301      	movs	r3, #1
 8006b06:	9301      	str	r3, [sp, #4]
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	9300      	str	r3, [sp, #0]
 8006b0c:	4b2f      	ldr	r3, [pc, #188]	; (8006bcc <mqtt_connection_cb+0x198>)
 8006b0e:	2201      	movs	r2, #1
 8006b10:	4937      	ldr	r1, [pc, #220]	; (8006bf0 <mqtt_connection_cb+0x1bc>)
 8006b12:	68f8      	ldr	r0, [r7, #12]
 8006b14:	f010 fb44 	bl	80171a0 <mqtt_sub_unsub>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	75fb      	strb	r3, [r7, #23]
			if (err == ERR_OK)
 8006b1c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d108      	bne.n	8006b36 <mqtt_connection_cb+0x102>
			{
				count_sub_request_cb++;
 8006b24:	4b2b      	ldr	r3, [pc, #172]	; (8006bd4 <mqtt_connection_cb+0x1a0>)
 8006b26:	781b      	ldrb	r3, [r3, #0]
 8006b28:	3301      	adds	r3, #1
 8006b2a:	b2da      	uxtb	r2, r3
 8006b2c:	4b29      	ldr	r3, [pc, #164]	; (8006bd4 <mqtt_connection_cb+0x1a0>)
 8006b2e:	701a      	strb	r2, [r3, #0]
				DEBUG_MQTT("subscribe to temp_limit_topic\n");
 8006b30:	4830      	ldr	r0, [pc, #192]	; (8006bf4 <mqtt_connection_cb+0x1c0>)
 8006b32:	f01e fec1 	bl	80258b8 <puts>
			}
			err = mqtt_subscribe(client, workmode_topic, 1, mqtt_sub_request_cb, arg);
 8006b36:	2301      	movs	r3, #1
 8006b38:	9301      	str	r3, [sp, #4]
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	9300      	str	r3, [sp, #0]
 8006b3e:	4b23      	ldr	r3, [pc, #140]	; (8006bcc <mqtt_connection_cb+0x198>)
 8006b40:	2201      	movs	r2, #1
 8006b42:	492d      	ldr	r1, [pc, #180]	; (8006bf8 <mqtt_connection_cb+0x1c4>)
 8006b44:	68f8      	ldr	r0, [r7, #12]
 8006b46:	f010 fb2b 	bl	80171a0 <mqtt_sub_unsub>
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	75fb      	strb	r3, [r7, #23]
			if (err == ERR_OK)
 8006b4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d108      	bne.n	8006b68 <mqtt_connection_cb+0x134>
			{
				count_sub_request_cb++;
 8006b56:	4b1f      	ldr	r3, [pc, #124]	; (8006bd4 <mqtt_connection_cb+0x1a0>)
 8006b58:	781b      	ldrb	r3, [r3, #0]
 8006b5a:	3301      	adds	r3, #1
 8006b5c:	b2da      	uxtb	r2, r3
 8006b5e:	4b1d      	ldr	r3, [pc, #116]	; (8006bd4 <mqtt_connection_cb+0x1a0>)
 8006b60:	701a      	strb	r2, [r3, #0]
				DEBUG_MQTT("subscribe to workmode_topic\n");
 8006b62:	4826      	ldr	r0, [pc, #152]	; (8006bfc <mqtt_connection_cb+0x1c8>)
 8006b64:	f01e fea8 	bl	80258b8 <puts>
			}
			err = mqtt_subscribe(client, state_topic, 1, mqtt_sub_request_cb, arg);
 8006b68:	2301      	movs	r3, #1
 8006b6a:	9301      	str	r3, [sp, #4]
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	9300      	str	r3, [sp, #0]
 8006b70:	4b16      	ldr	r3, [pc, #88]	; (8006bcc <mqtt_connection_cb+0x198>)
 8006b72:	2201      	movs	r2, #1
 8006b74:	4922      	ldr	r1, [pc, #136]	; (8006c00 <mqtt_connection_cb+0x1cc>)
 8006b76:	68f8      	ldr	r0, [r7, #12]
 8006b78:	f010 fb12 	bl	80171a0 <mqtt_sub_unsub>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	75fb      	strb	r3, [r7, #23]
			if (err == ERR_OK)
 8006b80:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d116      	bne.n	8006bb6 <mqtt_connection_cb+0x182>
			{
				count_sub_request_cb++;
 8006b88:	4b12      	ldr	r3, [pc, #72]	; (8006bd4 <mqtt_connection_cb+0x1a0>)
 8006b8a:	781b      	ldrb	r3, [r3, #0]
 8006b8c:	3301      	adds	r3, #1
 8006b8e:	b2da      	uxtb	r2, r3
 8006b90:	4b10      	ldr	r3, [pc, #64]	; (8006bd4 <mqtt_connection_cb+0x1a0>)
 8006b92:	701a      	strb	r2, [r3, #0]
				DEBUG_MQTT("subscribe to state_topic\n");
 8006b94:	481b      	ldr	r0, [pc, #108]	; (8006c04 <mqtt_connection_cb+0x1d0>)
 8006b96:	f01e fe8f 	bl	80258b8 <puts>
		DEBUG_MQTT("mqtt_connection_cb: Disconnected, reason: %d\n", status);
		mqtt_status = false;
		mqtt_disconnect(client);
		init_mqtt();
	}
}
 8006b9a:	e00c      	b.n	8006bb6 <mqtt_connection_cb+0x182>
		DEBUG_MQTT("mqtt_connection_cb: Disconnected, reason: %d\n", status);
 8006b9c:	88fb      	ldrh	r3, [r7, #6]
 8006b9e:	4619      	mov	r1, r3
 8006ba0:	4819      	ldr	r0, [pc, #100]	; (8006c08 <mqtt_connection_cb+0x1d4>)
 8006ba2:	f01e fe03 	bl	80257ac <iprintf>
		mqtt_status = false;
 8006ba6:	4b19      	ldr	r3, [pc, #100]	; (8006c0c <mqtt_connection_cb+0x1d8>)
 8006ba8:	2200      	movs	r2, #0
 8006baa:	701a      	strb	r2, [r3, #0]
		mqtt_disconnect(client);
 8006bac:	68f8      	ldr	r0, [r7, #12]
 8006bae:	f010 fe81 	bl	80178b4 <mqtt_disconnect>
		init_mqtt();
 8006bb2:	f000 fb5b 	bl	800726c <init_mqtt>
}
 8006bb6:	bf00      	nop
 8006bb8:	3718      	adds	r7, #24
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}
 8006bbe:	bf00      	nop
 8006bc0:	08029e50 	.word	0x08029e50
 8006bc4:	080067b9 	.word	0x080067b9
 8006bc8:	080066e5 	.word	0x080066e5
 8006bcc:	080069ed 	.word	0x080069ed
 8006bd0:	20013da4 	.word	0x20013da4
 8006bd4:	2000004c 	.word	0x2000004c
 8006bd8:	08029e84 	.word	0x08029e84
 8006bdc:	20013ea4 	.word	0x20013ea4
 8006be0:	08029ea4 	.word	0x08029ea4
 8006be4:	20013a7c 	.word	0x20013a7c
 8006be8:	20013d44 	.word	0x20013d44
 8006bec:	08029ec4 	.word	0x08029ec4
 8006bf0:	20013bf4 	.word	0x20013bf4
 8006bf4:	08029ee4 	.word	0x08029ee4
 8006bf8:	20013df4 	.word	0x20013df4
 8006bfc:	08029f08 	.word	0x08029f08
 8006c00:	20013ca4 	.word	0x20013ca4
 8006c04:	08029f2c 	.word	0x08029f2c
 8006c08:	08029f4c 	.word	0x08029f4c
 8006c0c:	20013a54 	.word	0x20013a54

08006c10 <connect_mqtt>:

void connect_mqtt(mqtt_client_t *client)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b086      	sub	sp, #24
 8006c14:	af02      	add	r7, sp, #8
 8006c16:	6078      	str	r0, [r7, #4]
	err_t err;
	err = mqtt_client_connect(client, &ip_addr, mqtt_port, mqtt_connection_cb, 0, &ci);
 8006c18:	4b12      	ldr	r3, [pc, #72]	; (8006c64 <connect_mqtt+0x54>)
 8006c1a:	881a      	ldrh	r2, [r3, #0]
 8006c1c:	4b12      	ldr	r3, [pc, #72]	; (8006c68 <connect_mqtt+0x58>)
 8006c1e:	9301      	str	r3, [sp, #4]
 8006c20:	2300      	movs	r3, #0
 8006c22:	9300      	str	r3, [sp, #0]
 8006c24:	4b11      	ldr	r3, [pc, #68]	; (8006c6c <connect_mqtt+0x5c>)
 8006c26:	4912      	ldr	r1, [pc, #72]	; (8006c70 <connect_mqtt+0x60>)
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f010 fbc3 	bl	80173b4 <mqtt_client_connect>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	73fb      	strb	r3, [r7, #15]
	if (err != ERR_OK)
 8006c32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d009      	beq.n	8006c4e <connect_mqtt+0x3e>
	{
		mqtt_status = false;
 8006c3a:	4b0e      	ldr	r3, [pc, #56]	; (8006c74 <connect_mqtt+0x64>)
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	701a      	strb	r2, [r3, #0]
		DEBUG_MQTT("mqtt_connect return %d\n", err);
 8006c40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c44:	4619      	mov	r1, r3
 8006c46:	480c      	ldr	r0, [pc, #48]	; (8006c78 <connect_mqtt+0x68>)
 8006c48:	f01e fdb0 	bl	80257ac <iprintf>
	else
	{
		mqtt_status = true;
		DEBUG_MQTT("client ok\n");
	}
}
 8006c4c:	e005      	b.n	8006c5a <connect_mqtt+0x4a>
		mqtt_status = true;
 8006c4e:	4b09      	ldr	r3, [pc, #36]	; (8006c74 <connect_mqtt+0x64>)
 8006c50:	2201      	movs	r2, #1
 8006c52:	701a      	strb	r2, [r3, #0]
		DEBUG_MQTT("client ok\n");
 8006c54:	4809      	ldr	r0, [pc, #36]	; (8006c7c <connect_mqtt+0x6c>)
 8006c56:	f01e fe2f 	bl	80258b8 <puts>
}
 8006c5a:	bf00      	nop
 8006c5c:	3710      	adds	r7, #16
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}
 8006c62:	bf00      	nop
 8006c64:	20013f80 	.word	0x20013f80
 8006c68:	20013f44 	.word	0x20013f44
 8006c6c:	08006a35 	.word	0x08006a35
 8006c70:	20013f7c 	.word	0x20013f7c
 8006c74:	20013a54 	.word	0x20013a54
 8006c78:	08029f80 	.word	0x08029f80
 8006c7c:	08029fa0 	.word	0x08029fa0

08006c80 <publish_message_topic>:

void publish_message_topic()
{
 8006c80:	b5b0      	push	{r4, r5, r7, lr}
 8006c82:	b084      	sub	sp, #16
 8006c84:	af04      	add	r7, sp, #16
	/* Publish message to a topic*/
    if (wireless_params->mqtt_type != VAKIO_MQTT)
 8006c86:	4b34      	ldr	r3, [pc, #208]	; (8006d58 <publish_message_topic+0xd8>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8006c8e:	f083 0301 	eor.w	r3, r3, #1
 8006c92:	b2db      	uxtb	r3, r3
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d02d      	beq.n	8006cf4 <publish_message_topic+0x74>
    {
        	publish_message(workmode_topic, modes_str_s[device->mode]);
 8006c98:	4b30      	ldr	r3, [pc, #192]	; (8006d5c <publish_message_topic+0xdc>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	7b5b      	ldrb	r3, [r3, #13]
 8006c9e:	461a      	mov	r2, r3
 8006ca0:	4b2f      	ldr	r3, [pc, #188]	; (8006d60 <publish_message_topic+0xe0>)
 8006ca2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ca6:	4619      	mov	r1, r3
 8006ca8:	482e      	ldr	r0, [pc, #184]	; (8006d64 <publish_message_topic+0xe4>)
 8006caa:	f7ff fce5 	bl	8006678 <publish_message>
        	publish_message(state_topic, on_off_str_s[device->state]);
 8006cae:	4b2b      	ldr	r3, [pc, #172]	; (8006d5c <publish_message_topic+0xdc>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	789b      	ldrb	r3, [r3, #2]
 8006cb4:	461a      	mov	r2, r3
 8006cb6:	4b2c      	ldr	r3, [pc, #176]	; (8006d68 <publish_message_topic+0xe8>)
 8006cb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cbc:	4619      	mov	r1, r3
 8006cbe:	482b      	ldr	r0, [pc, #172]	; (8006d6c <publish_message_topic+0xec>)
 8006cc0:	f7ff fcda 	bl	8006678 <publish_message>
            sprintf(speeds_str, "%i", device->inflow_speed);
 8006cc4:	4b25      	ldr	r3, [pc, #148]	; (8006d5c <publish_message_topic+0xdc>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	7bdb      	ldrb	r3, [r3, #15]
 8006cca:	461a      	mov	r2, r3
 8006ccc:	4928      	ldr	r1, [pc, #160]	; (8006d70 <publish_message_topic+0xf0>)
 8006cce:	4829      	ldr	r0, [pc, #164]	; (8006d74 <publish_message_topic+0xf4>)
 8006cd0:	f01e fe50 	bl	8025974 <siprintf>
            publish_message(speed_topic, speeds_str);
 8006cd4:	4927      	ldr	r1, [pc, #156]	; (8006d74 <publish_message_topic+0xf4>)
 8006cd6:	4828      	ldr	r0, [pc, #160]	; (8006d78 <publish_message_topic+0xf8>)
 8006cd8:	f7ff fcce 	bl	8006678 <publish_message>
            sprintf(temp_str, "%i", heaters->ten.temp_limit);
 8006cdc:	4b27      	ldr	r3, [pc, #156]	; (8006d7c <publish_message_topic+0xfc>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	461a      	mov	r2, r3
 8006ce4:	4922      	ldr	r1, [pc, #136]	; (8006d70 <publish_message_topic+0xf0>)
 8006ce6:	4826      	ldr	r0, [pc, #152]	; (8006d80 <publish_message_topic+0x100>)
 8006ce8:	f01e fe44 	bl	8025974 <siprintf>
            publish_message(temp_limit_topic, temp_str);
 8006cec:	4924      	ldr	r1, [pc, #144]	; (8006d80 <publish_message_topic+0x100>)
 8006cee:	4825      	ldr	r0, [pc, #148]	; (8006d84 <publish_message_topic+0x104>)
 8006cf0:	f7ff fcc2 	bl	8006678 <publish_message>
    }
        sprintf(gnetif_str, "%x:%x:%x:%x:%x:%x", gnetif.hwaddr[0], gnetif.hwaddr[1], gnetif.hwaddr[2], gnetif.hwaddr[3], gnetif.hwaddr[4], gnetif.hwaddr[5]);
 8006cf4:	4b24      	ldr	r3, [pc, #144]	; (8006d88 <publish_message_topic+0x108>)
 8006cf6:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8006cfa:	461c      	mov	r4, r3
 8006cfc:	4b22      	ldr	r3, [pc, #136]	; (8006d88 <publish_message_topic+0x108>)
 8006cfe:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8006d02:	461d      	mov	r5, r3
 8006d04:	4b20      	ldr	r3, [pc, #128]	; (8006d88 <publish_message_topic+0x108>)
 8006d06:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006d0a:	461a      	mov	r2, r3
 8006d0c:	4b1e      	ldr	r3, [pc, #120]	; (8006d88 <publish_message_topic+0x108>)
 8006d0e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006d12:	4619      	mov	r1, r3
 8006d14:	4b1c      	ldr	r3, [pc, #112]	; (8006d88 <publish_message_topic+0x108>)
 8006d16:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	4b1a      	ldr	r3, [pc, #104]	; (8006d88 <publish_message_topic+0x108>)
 8006d1e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006d22:	9303      	str	r3, [sp, #12]
 8006d24:	9002      	str	r0, [sp, #8]
 8006d26:	9101      	str	r1, [sp, #4]
 8006d28:	9200      	str	r2, [sp, #0]
 8006d2a:	462b      	mov	r3, r5
 8006d2c:	4622      	mov	r2, r4
 8006d2e:	4917      	ldr	r1, [pc, #92]	; (8006d8c <publish_message_topic+0x10c>)
 8006d30:	4817      	ldr	r0, [pc, #92]	; (8006d90 <publish_message_topic+0x110>)
 8006d32:	f01e fe1f 	bl	8025974 <siprintf>
        publish_auth(VERSION, gnetif_str, SERIES, SUBTYPE, XTAL_FREQ);
 8006d36:	4b17      	ldr	r3, [pc, #92]	; (8006d94 <publish_message_topic+0x114>)
 8006d38:	9300      	str	r3, [sp, #0]
 8006d3a:	4b17      	ldr	r3, [pc, #92]	; (8006d98 <publish_message_topic+0x118>)
 8006d3c:	4a17      	ldr	r2, [pc, #92]	; (8006d9c <publish_message_topic+0x11c>)
 8006d3e:	4914      	ldr	r1, [pc, #80]	; (8006d90 <publish_message_topic+0x110>)
 8006d40:	4817      	ldr	r0, [pc, #92]	; (8006da0 <publish_message_topic+0x120>)
 8006d42:	f000 faa3 	bl	800728c <publish_auth>
        publish_capabilities();
 8006d46:	f000 fae7 	bl	8007318 <publish_capabilities>
        publish_settings();
 8006d4a:	f000 fb2b 	bl	80073a4 <publish_settings>
        publish_errors();
 8006d4e:	f000 fb43 	bl	80073d8 <publish_errors>
}
 8006d52:	bf00      	nop
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bdb0      	pop	{r4, r5, r7, pc}
 8006d58:	20013a7c 	.word	0x20013a7c
 8006d5c:	20013a78 	.word	0x20013a78
 8006d60:	10000014 	.word	0x10000014
 8006d64:	20013df4 	.word	0x20013df4
 8006d68:	1000000c 	.word	0x1000000c
 8006d6c:	20013ca4 	.word	0x20013ca4
 8006d70:	08029fb0 	.word	0x08029fb0
 8006d74:	20013f78 	.word	0x20013f78
 8006d78:	20013d44 	.word	0x20013d44
 8006d7c:	200139cc 	.word	0x200139cc
 8006d80:	20013f88 	.word	0x20013f88
 8006d84:	20013bf4 	.word	0x20013bf4
 8006d88:	20014608 	.word	0x20014608
 8006d8c:	08029fb4 	.word	0x08029fb4
 8006d90:	20013f60 	.word	0x20013f60
 8006d94:	08029fe0 	.word	0x08029fe0
 8006d98:	08029fc8 	.word	0x08029fc8
 8006d9c:	08029fd0 	.word	0x08029fd0
 8006da0:	08029fd8 	.word	0x08029fd8

08006da4 <start_mqtt>:

void start_mqtt()
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	af00      	add	r7, sp, #0
	if(netif_is_link_up(&gnetif))
 8006da8:	4b13      	ldr	r3, [pc, #76]	; (8006df8 <start_mqtt+0x54>)
 8006daa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006dae:	089b      	lsrs	r3, r3, #2
 8006db0:	f003 0301 	and.w	r3, r3, #1
 8006db4:	b2db      	uxtb	r3, r3
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d01b      	beq.n	8006df2 <start_mqtt+0x4e>
	{
		if(!mqtt_status)
 8006dba:	4b10      	ldr	r3, [pc, #64]	; (8006dfc <start_mqtt+0x58>)
 8006dbc:	781b      	ldrb	r3, [r3, #0]
 8006dbe:	f083 0301 	eor.w	r3, r3, #1
 8006dc2:	b2db      	uxtb	r3, r3
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d009      	beq.n	8006ddc <start_mqtt+0x38>
		{
			connect_mqtt(client);
 8006dc8:	4b0d      	ldr	r3, [pc, #52]	; (8006e00 <start_mqtt+0x5c>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f7ff ff1f 	bl	8006c10 <connect_mqtt>
			osDelay(3000);
 8006dd2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8006dd6:	f00a ff88 	bl	8011cea <osDelay>
				publish_message_topic();
			}
			send_server();
		}
	}
}
 8006dda:	e00a      	b.n	8006df2 <start_mqtt+0x4e>
			if(sub_request_cb)
 8006ddc:	4b09      	ldr	r3, [pc, #36]	; (8006e04 <start_mqtt+0x60>)
 8006dde:	781b      	ldrb	r3, [r3, #0]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d004      	beq.n	8006dee <start_mqtt+0x4a>
				sub_request_cb = false;
 8006de4:	4b07      	ldr	r3, [pc, #28]	; (8006e04 <start_mqtt+0x60>)
 8006de6:	2200      	movs	r2, #0
 8006de8:	701a      	strb	r2, [r3, #0]
				publish_message_topic();
 8006dea:	f7ff ff49 	bl	8006c80 <publish_message_topic>
			send_server();
 8006dee:	f000 fe75 	bl	8007adc <send_server>
}
 8006df2:	bf00      	nop
 8006df4:	bd80      	pop	{r7, pc}
 8006df6:	bf00      	nop
 8006df8:	20014608 	.word	0x20014608
 8006dfc:	20013a54 	.word	0x20013a54
 8006e00:	20013f84 	.word	0x20013f84
 8006e04:	2000004d 	.word	0x2000004d

08006e08 <update_mqtt_parameters>:

void update_mqtt_parameters(char *host, int port, char *username, char *password, char *client_id)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b086      	sub	sp, #24
 8006e0c:	af02      	add	r7, sp, #8
 8006e0e:	60f8      	str	r0, [r7, #12]
 8006e10:	60b9      	str	r1, [r7, #8]
 8006e12:	607a      	str	r2, [r7, #4]
 8006e14:	603b      	str	r3, [r7, #0]
	memset(&ci, 0, sizeof(ci));
 8006e16:	221c      	movs	r2, #28
 8006e18:	2100      	movs	r1, #0
 8006e1a:	484c      	ldr	r0, [pc, #304]	; (8006f4c <update_mqtt_parameters+0x144>)
 8006e1c:	f01d fe1a 	bl	8024a54 <memset>
	IP4_ADDR(&ip_addr, host[0], host[1], host[2], host[3]);
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	781b      	ldrb	r3, [r3, #0]
 8006e24:	061a      	lsls	r2, r3, #24
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	3301      	adds	r3, #1
 8006e2a:	781b      	ldrb	r3, [r3, #0]
 8006e2c:	041b      	lsls	r3, r3, #16
 8006e2e:	431a      	orrs	r2, r3
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	3302      	adds	r3, #2
 8006e34:	781b      	ldrb	r3, [r3, #0]
 8006e36:	021b      	lsls	r3, r3, #8
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	68fa      	ldr	r2, [r7, #12]
 8006e3c:	3203      	adds	r2, #3
 8006e3e:	7812      	ldrb	r2, [r2, #0]
 8006e40:	4313      	orrs	r3, r2
 8006e42:	061a      	lsls	r2, r3, #24
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	781b      	ldrb	r3, [r3, #0]
 8006e48:	0619      	lsls	r1, r3, #24
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	3301      	adds	r3, #1
 8006e4e:	781b      	ldrb	r3, [r3, #0]
 8006e50:	041b      	lsls	r3, r3, #16
 8006e52:	4319      	orrs	r1, r3
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	3302      	adds	r3, #2
 8006e58:	781b      	ldrb	r3, [r3, #0]
 8006e5a:	021b      	lsls	r3, r3, #8
 8006e5c:	430b      	orrs	r3, r1
 8006e5e:	68f9      	ldr	r1, [r7, #12]
 8006e60:	3103      	adds	r1, #3
 8006e62:	7809      	ldrb	r1, [r1, #0]
 8006e64:	430b      	orrs	r3, r1
 8006e66:	021b      	lsls	r3, r3, #8
 8006e68:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006e6c:	431a      	orrs	r2, r3
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	781b      	ldrb	r3, [r3, #0]
 8006e72:	0619      	lsls	r1, r3, #24
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	3301      	adds	r3, #1
 8006e78:	781b      	ldrb	r3, [r3, #0]
 8006e7a:	041b      	lsls	r3, r3, #16
 8006e7c:	4319      	orrs	r1, r3
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	3302      	adds	r3, #2
 8006e82:	781b      	ldrb	r3, [r3, #0]
 8006e84:	021b      	lsls	r3, r3, #8
 8006e86:	430b      	orrs	r3, r1
 8006e88:	68f9      	ldr	r1, [r7, #12]
 8006e8a:	3103      	adds	r1, #3
 8006e8c:	7809      	ldrb	r1, [r1, #0]
 8006e8e:	430b      	orrs	r3, r1
 8006e90:	0a1b      	lsrs	r3, r3, #8
 8006e92:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006e96:	431a      	orrs	r2, r3
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	781b      	ldrb	r3, [r3, #0]
 8006e9c:	0619      	lsls	r1, r3, #24
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	3301      	adds	r3, #1
 8006ea2:	781b      	ldrb	r3, [r3, #0]
 8006ea4:	041b      	lsls	r3, r3, #16
 8006ea6:	4319      	orrs	r1, r3
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	3302      	adds	r3, #2
 8006eac:	781b      	ldrb	r3, [r3, #0]
 8006eae:	021b      	lsls	r3, r3, #8
 8006eb0:	430b      	orrs	r3, r1
 8006eb2:	68f9      	ldr	r1, [r7, #12]
 8006eb4:	3103      	adds	r1, #3
 8006eb6:	7809      	ldrb	r1, [r1, #0]
 8006eb8:	430b      	orrs	r3, r1
 8006eba:	0e1b      	lsrs	r3, r3, #24
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	4a24      	ldr	r2, [pc, #144]	; (8006f50 <update_mqtt_parameters+0x148>)
 8006ec0:	6013      	str	r3, [r2, #0]
	mqtt_port = port;
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	b29a      	uxth	r2, r3
 8006ec6:	4b23      	ldr	r3, [pc, #140]	; (8006f54 <update_mqtt_parameters+0x14c>)
 8006ec8:	801a      	strh	r2, [r3, #0]
    ci.client_user = username;
 8006eca:	4a20      	ldr	r2, [pc, #128]	; (8006f4c <update_mqtt_parameters+0x144>)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6053      	str	r3, [r2, #4]
    ci.client_pass = password;
 8006ed0:	4a1e      	ldr	r2, [pc, #120]	; (8006f4c <update_mqtt_parameters+0x144>)
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	6093      	str	r3, [r2, #8]
    ci.client_id = client_id;
 8006ed6:	4a1d      	ldr	r2, [pc, #116]	; (8006f4c <update_mqtt_parameters+0x144>)
 8006ed8:	69bb      	ldr	r3, [r7, #24]
 8006eda:	6013      	str	r3, [r2, #0]
    ci.keep_alive = 60;
 8006edc:	4b1b      	ldr	r3, [pc, #108]	; (8006f4c <update_mqtt_parameters+0x144>)
 8006ede:	223c      	movs	r2, #60	; 0x3c
 8006ee0:	819a      	strh	r2, [r3, #12]
    DEBUG_MQTT("***************UPDATE MQTT***********\n");
 8006ee2:	481d      	ldr	r0, [pc, #116]	; (8006f58 <update_mqtt_parameters+0x150>)
 8006ee4:	f01e fce8 	bl	80258b8 <puts>
    DEBUG_MQTT("host = %i.%i.%i.%i\n", host[0], host[1], host[2], host[3]);
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	781b      	ldrb	r3, [r3, #0]
 8006eec:	4619      	mov	r1, r3
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	3301      	adds	r3, #1
 8006ef2:	781b      	ldrb	r3, [r3, #0]
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	3302      	adds	r3, #2
 8006efa:	781b      	ldrb	r3, [r3, #0]
 8006efc:	4618      	mov	r0, r3
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	3303      	adds	r3, #3
 8006f02:	781b      	ldrb	r3, [r3, #0]
 8006f04:	9300      	str	r3, [sp, #0]
 8006f06:	4603      	mov	r3, r0
 8006f08:	4814      	ldr	r0, [pc, #80]	; (8006f5c <update_mqtt_parameters+0x154>)
 8006f0a:	f01e fc4f 	bl	80257ac <iprintf>
    DEBUG_MQTT("login = %s\n", ci.client_user);
 8006f0e:	4b0f      	ldr	r3, [pc, #60]	; (8006f4c <update_mqtt_parameters+0x144>)
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	4619      	mov	r1, r3
 8006f14:	4812      	ldr	r0, [pc, #72]	; (8006f60 <update_mqtt_parameters+0x158>)
 8006f16:	f01e fc49 	bl	80257ac <iprintf>
    DEBUG_MQTT("password = %s\n", ci.client_pass);
 8006f1a:	4b0c      	ldr	r3, [pc, #48]	; (8006f4c <update_mqtt_parameters+0x144>)
 8006f1c:	689b      	ldr	r3, [r3, #8]
 8006f1e:	4619      	mov	r1, r3
 8006f20:	4810      	ldr	r0, [pc, #64]	; (8006f64 <update_mqtt_parameters+0x15c>)
 8006f22:	f01e fc43 	bl	80257ac <iprintf>
    DEBUG_MQTT("port = %i\n", mqtt_port);
 8006f26:	4b0b      	ldr	r3, [pc, #44]	; (8006f54 <update_mqtt_parameters+0x14c>)
 8006f28:	881b      	ldrh	r3, [r3, #0]
 8006f2a:	4619      	mov	r1, r3
 8006f2c:	480e      	ldr	r0, [pc, #56]	; (8006f68 <update_mqtt_parameters+0x160>)
 8006f2e:	f01e fc3d 	bl	80257ac <iprintf>
    DEBUG_MQTT("client_id = %s\n", ci.client_id);
 8006f32:	4b06      	ldr	r3, [pc, #24]	; (8006f4c <update_mqtt_parameters+0x144>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4619      	mov	r1, r3
 8006f38:	480c      	ldr	r0, [pc, #48]	; (8006f6c <update_mqtt_parameters+0x164>)
 8006f3a:	f01e fc37 	bl	80257ac <iprintf>
    DEBUG_MQTT("***********************************\n");
 8006f3e:	480c      	ldr	r0, [pc, #48]	; (8006f70 <update_mqtt_parameters+0x168>)
 8006f40:	f01e fcba 	bl	80258b8 <puts>
}
 8006f44:	bf00      	nop
 8006f46:	3710      	adds	r7, #16
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}
 8006f4c:	20013f44 	.word	0x20013f44
 8006f50:	20013f7c 	.word	0x20013f7c
 8006f54:	20013f80 	.word	0x20013f80
 8006f58:	08029fe4 	.word	0x08029fe4
 8006f5c:	0802a010 	.word	0x0802a010
 8006f60:	0802a02c 	.word	0x0802a02c
 8006f64:	0802a040 	.word	0x0802a040
 8006f68:	0802a058 	.word	0x0802a058
 8006f6c:	0802a06c 	.word	0x0802a06c
 8006f70:	0802a084 	.word	0x0802a084

08006f74 <set_mqtt_parameters>:

void set_mqtt_parameters()
{
 8006f74:	b590      	push	{r4, r7, lr}
 8006f76:	b083      	sub	sp, #12
 8006f78:	af02      	add	r7, sp, #8
    // Передаем параметры для подключения в зависимости от выбранного типа mqtt
    if (wireless_params->mqtt_type == VAKIO_MQTT)
 8006f7a:	4b75      	ldr	r3, [pc, #468]	; (8007150 <set_mqtt_parameters+0x1dc>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d072      	beq.n	800706c <set_mqtt_parameters+0xf8>
    {
        sprintf(wireless_params->vakio_mqtt.client_id, "%s_%s", wireless_params->vakio.device_id, gnetif.hwaddr);
 8006f86:	4b72      	ldr	r3, [pc, #456]	; (8007150 <set_mqtt_parameters+0x1dc>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f103 0054 	add.w	r0, r3, #84	; 0x54
 8006f8e:	4b70      	ldr	r3, [pc, #448]	; (8007150 <set_mqtt_parameters+0x1dc>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f103 0278 	add.w	r2, r3, #120	; 0x78
 8006f96:	4b6f      	ldr	r3, [pc, #444]	; (8007154 <set_mqtt_parameters+0x1e0>)
 8006f98:	496f      	ldr	r1, [pc, #444]	; (8007158 <set_mqtt_parameters+0x1e4>)
 8006f9a:	f01e fceb 	bl	8025974 <siprintf>
        update_mqtt_parameters(wireless_params->vakio_mqtt.host,
 8006f9e:	4b6c      	ldr	r3, [pc, #432]	; (8007150 <set_mqtt_parameters+0x1dc>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f103 0060 	add.w	r0, r3, #96	; 0x60
                               wireless_params->vakio_mqtt.port,
 8006fa6:	4b6a      	ldr	r3, [pc, #424]	; (8007150 <set_mqtt_parameters+0x1dc>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
        update_mqtt_parameters(wireless_params->vakio_mqtt.host,
 8006faa:	6e99      	ldr	r1, [r3, #104]	; 0x68
                               wireless_params->vakio_mqtt.login,
 8006fac:	4b68      	ldr	r3, [pc, #416]	; (8007150 <set_mqtt_parameters+0x1dc>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f103 023c 	add.w	r2, r3, #60	; 0x3c
                               wireless_params->vakio_mqtt.password,
 8006fb4:	4b66      	ldr	r3, [pc, #408]	; (8007150 <set_mqtt_parameters+0x1dc>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f103 0448 	add.w	r4, r3, #72	; 0x48
                               wireless_params->vakio_mqtt.client_id);
 8006fbc:	4b64      	ldr	r3, [pc, #400]	; (8007150 <set_mqtt_parameters+0x1dc>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	3354      	adds	r3, #84	; 0x54
        update_mqtt_parameters(wireless_params->vakio_mqtt.host,
 8006fc2:	9300      	str	r3, [sp, #0]
 8006fc4:	4623      	mov	r3, r4
 8006fc6:	f7ff ff1f 	bl	8006e08 <update_mqtt_parameters>
        DEBUG_MQTT("DEVICE LOGIN %s\n", wireless_params->vakio_mqtt.login);
 8006fca:	4b61      	ldr	r3, [pc, #388]	; (8007150 <set_mqtt_parameters+0x1dc>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	333c      	adds	r3, #60	; 0x3c
 8006fd0:	4619      	mov	r1, r3
 8006fd2:	4862      	ldr	r0, [pc, #392]	; (800715c <set_mqtt_parameters+0x1e8>)
 8006fd4:	f01e fbea 	bl	80257ac <iprintf>
        DEBUG_MQTT("DEVICE PASSWORD %s\n", wireless_params->vakio_mqtt.password);
 8006fd8:	4b5d      	ldr	r3, [pc, #372]	; (8007150 <set_mqtt_parameters+0x1dc>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	3348      	adds	r3, #72	; 0x48
 8006fde:	4619      	mov	r1, r3
 8006fe0:	485f      	ldr	r0, [pc, #380]	; (8007160 <set_mqtt_parameters+0x1ec>)
 8006fe2:	f01e fbe3 	bl	80257ac <iprintf>
        // Записываем топики для подписки и публикаций
        sprintf(log_pub_topic, "device/%s/%s/VK200/log", wireless_params->vakio.user_id, wireless_params->vakio.device_id);
 8006fe6:	4b5a      	ldr	r3, [pc, #360]	; (8007150 <set_mqtt_parameters+0x1dc>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8006fee:	4b58      	ldr	r3, [pc, #352]	; (8007150 <set_mqtt_parameters+0x1dc>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	3378      	adds	r3, #120	; 0x78
 8006ff4:	495b      	ldr	r1, [pc, #364]	; (8007164 <set_mqtt_parameters+0x1f0>)
 8006ff6:	485c      	ldr	r0, [pc, #368]	; (8007168 <set_mqtt_parameters+0x1f4>)
 8006ff8:	f01e fcbc 	bl	8025974 <siprintf>
        sprintf(mode_topic, "server/%s/%s/VK200/mode", wireless_params->vakio.user_id, wireless_params->vakio.device_id);
 8006ffc:	4b54      	ldr	r3, [pc, #336]	; (8007150 <set_mqtt_parameters+0x1dc>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8007004:	4b52      	ldr	r3, [pc, #328]	; (8007150 <set_mqtt_parameters+0x1dc>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	3378      	adds	r3, #120	; 0x78
 800700a:	4958      	ldr	r1, [pc, #352]	; (800716c <set_mqtt_parameters+0x1f8>)
 800700c:	4858      	ldr	r0, [pc, #352]	; (8007170 <set_mqtt_parameters+0x1fc>)
 800700e:	f01e fcb1 	bl	8025974 <siprintf>
        sprintf(mode_pub_topic, "device/%s/%s/VK200/mode", wireless_params->vakio.user_id, wireless_params->vakio.device_id);
 8007012:	4b4f      	ldr	r3, [pc, #316]	; (8007150 <set_mqtt_parameters+0x1dc>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f103 0280 	add.w	r2, r3, #128	; 0x80
 800701a:	4b4d      	ldr	r3, [pc, #308]	; (8007150 <set_mqtt_parameters+0x1dc>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	3378      	adds	r3, #120	; 0x78
 8007020:	4954      	ldr	r1, [pc, #336]	; (8007174 <set_mqtt_parameters+0x200>)
 8007022:	4855      	ldr	r0, [pc, #340]	; (8007178 <set_mqtt_parameters+0x204>)
 8007024:	f01e fca6 	bl	8025974 <siprintf>
        sprintf(system_topic, "server/%s/%s/VK200/system", wireless_params->vakio.user_id, wireless_params->vakio.device_id);
 8007028:	4b49      	ldr	r3, [pc, #292]	; (8007150 <set_mqtt_parameters+0x1dc>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8007030:	4b47      	ldr	r3, [pc, #284]	; (8007150 <set_mqtt_parameters+0x1dc>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	3378      	adds	r3, #120	; 0x78
 8007036:	4951      	ldr	r1, [pc, #324]	; (800717c <set_mqtt_parameters+0x208>)
 8007038:	4851      	ldr	r0, [pc, #324]	; (8007180 <set_mqtt_parameters+0x20c>)
 800703a:	f01e fc9b 	bl	8025974 <siprintf>
        sprintf(system_pub_topic, "device/%s/%s/VK200/system", wireless_params->vakio.user_id, wireless_params->vakio.device_id);
 800703e:	4b44      	ldr	r3, [pc, #272]	; (8007150 <set_mqtt_parameters+0x1dc>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8007046:	4b42      	ldr	r3, [pc, #264]	; (8007150 <set_mqtt_parameters+0x1dc>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	3378      	adds	r3, #120	; 0x78
 800704c:	494d      	ldr	r1, [pc, #308]	; (8007184 <set_mqtt_parameters+0x210>)
 800704e:	484e      	ldr	r0, [pc, #312]	; (8007188 <set_mqtt_parameters+0x214>)
 8007050:	f01e fc90 	bl	8025974 <siprintf>
        sprintf(temp_log_pub_topic, "device/%s/%s/VK200/temp", wireless_params->vakio.user_id, wireless_params->vakio.device_id);
 8007054:	4b3e      	ldr	r3, [pc, #248]	; (8007150 <set_mqtt_parameters+0x1dc>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f103 0280 	add.w	r2, r3, #128	; 0x80
 800705c:	4b3c      	ldr	r3, [pc, #240]	; (8007150 <set_mqtt_parameters+0x1dc>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	3378      	adds	r3, #120	; 0x78
 8007062:	494a      	ldr	r1, [pc, #296]	; (800718c <set_mqtt_parameters+0x218>)
 8007064:	484a      	ldr	r0, [pc, #296]	; (8007190 <set_mqtt_parameters+0x21c>)
 8007066:	f01e fc85 	bl	8025974 <siprintf>
 800706a:	e05d      	b.n	8007128 <set_mqtt_parameters+0x1b4>
    }
    else
    {
        update_mqtt_parameters(wireless_params->user_mqtt.host,
 800706c:	4b38      	ldr	r3, [pc, #224]	; (8007150 <set_mqtt_parameters+0x1dc>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f103 0024 	add.w	r0, r3, #36	; 0x24
                               wireless_params->user_mqtt.port,
 8007074:	4b36      	ldr	r3, [pc, #216]	; (8007150 <set_mqtt_parameters+0x1dc>)
 8007076:	681b      	ldr	r3, [r3, #0]
        update_mqtt_parameters(wireless_params->user_mqtt.host,
 8007078:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
                               wireless_params->user_mqtt.login,
 800707a:	4b35      	ldr	r3, [pc, #212]	; (8007150 <set_mqtt_parameters+0x1dc>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	461c      	mov	r4, r3
                               wireless_params->user_mqtt.password,
 8007080:	4b33      	ldr	r3, [pc, #204]	; (8007150 <set_mqtt_parameters+0x1dc>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f103 020c 	add.w	r2, r3, #12
                               wireless_params->user_mqtt.client_id);
 8007088:	4b31      	ldr	r3, [pc, #196]	; (8007150 <set_mqtt_parameters+0x1dc>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	3318      	adds	r3, #24
        update_mqtt_parameters(wireless_params->user_mqtt.host,
 800708e:	9300      	str	r3, [sp, #0]
 8007090:	4613      	mov	r3, r2
 8007092:	4622      	mov	r2, r4
 8007094:	f7ff feb8 	bl	8006e08 <update_mqtt_parameters>
        // Записываем топики для подписки и публикаций
        sprintf(log_pub_topic, "device/%s/VK200/log", wireless_params->user_mqtt.topic);
 8007098:	4b2d      	ldr	r3, [pc, #180]	; (8007150 <set_mqtt_parameters+0x1dc>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	3330      	adds	r3, #48	; 0x30
 800709e:	461a      	mov	r2, r3
 80070a0:	493c      	ldr	r1, [pc, #240]	; (8007194 <set_mqtt_parameters+0x220>)
 80070a2:	4831      	ldr	r0, [pc, #196]	; (8007168 <set_mqtt_parameters+0x1f4>)
 80070a4:	f01e fc66 	bl	8025974 <siprintf>
        sprintf(mode_topic, "server/%s/VK200/mode", wireless_params->user_mqtt.topic);
 80070a8:	4b29      	ldr	r3, [pc, #164]	; (8007150 <set_mqtt_parameters+0x1dc>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	3330      	adds	r3, #48	; 0x30
 80070ae:	461a      	mov	r2, r3
 80070b0:	4939      	ldr	r1, [pc, #228]	; (8007198 <set_mqtt_parameters+0x224>)
 80070b2:	482f      	ldr	r0, [pc, #188]	; (8007170 <set_mqtt_parameters+0x1fc>)
 80070b4:	f01e fc5e 	bl	8025974 <siprintf>
        sprintf(mode_pub_topic, "device/%s/VK200/mode", wireless_params->user_mqtt.topic);
 80070b8:	4b25      	ldr	r3, [pc, #148]	; (8007150 <set_mqtt_parameters+0x1dc>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	3330      	adds	r3, #48	; 0x30
 80070be:	461a      	mov	r2, r3
 80070c0:	4936      	ldr	r1, [pc, #216]	; (800719c <set_mqtt_parameters+0x228>)
 80070c2:	482d      	ldr	r0, [pc, #180]	; (8007178 <set_mqtt_parameters+0x204>)
 80070c4:	f01e fc56 	bl	8025974 <siprintf>
        sprintf(system_topic, "server/%s/VK200/system", wireless_params->user_mqtt.topic);
 80070c8:	4b21      	ldr	r3, [pc, #132]	; (8007150 <set_mqtt_parameters+0x1dc>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	3330      	adds	r3, #48	; 0x30
 80070ce:	461a      	mov	r2, r3
 80070d0:	4933      	ldr	r1, [pc, #204]	; (80071a0 <set_mqtt_parameters+0x22c>)
 80070d2:	482b      	ldr	r0, [pc, #172]	; (8007180 <set_mqtt_parameters+0x20c>)
 80070d4:	f01e fc4e 	bl	8025974 <siprintf>
        sprintf(system_pub_topic, "device/%s/VK200/system", wireless_params->user_mqtt.topic);
 80070d8:	4b1d      	ldr	r3, [pc, #116]	; (8007150 <set_mqtt_parameters+0x1dc>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	3330      	adds	r3, #48	; 0x30
 80070de:	461a      	mov	r2, r3
 80070e0:	4930      	ldr	r1, [pc, #192]	; (80071a4 <set_mqtt_parameters+0x230>)
 80070e2:	4829      	ldr	r0, [pc, #164]	; (8007188 <set_mqtt_parameters+0x214>)
 80070e4:	f01e fc46 	bl	8025974 <siprintf>
        sprintf(workmode_topic, "%s/workmode", wireless_params->user_mqtt.topic);     // изменения
 80070e8:	4b19      	ldr	r3, [pc, #100]	; (8007150 <set_mqtt_parameters+0x1dc>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	3330      	adds	r3, #48	; 0x30
 80070ee:	461a      	mov	r2, r3
 80070f0:	492d      	ldr	r1, [pc, #180]	; (80071a8 <set_mqtt_parameters+0x234>)
 80070f2:	482e      	ldr	r0, [pc, #184]	; (80071ac <set_mqtt_parameters+0x238>)
 80070f4:	f01e fc3e 	bl	8025974 <siprintf>
        sprintf(speed_topic, "%s/speed", wireless_params->user_mqtt.topic);           // изменения
 80070f8:	4b15      	ldr	r3, [pc, #84]	; (8007150 <set_mqtt_parameters+0x1dc>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	3330      	adds	r3, #48	; 0x30
 80070fe:	461a      	mov	r2, r3
 8007100:	492b      	ldr	r1, [pc, #172]	; (80071b0 <set_mqtt_parameters+0x23c>)
 8007102:	482c      	ldr	r0, [pc, #176]	; (80071b4 <set_mqtt_parameters+0x240>)
 8007104:	f01e fc36 	bl	8025974 <siprintf>
        sprintf(temp_limit_topic, "%s/temp_limit", wireless_params->user_mqtt.topic); // изменения
 8007108:	4b11      	ldr	r3, [pc, #68]	; (8007150 <set_mqtt_parameters+0x1dc>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	3330      	adds	r3, #48	; 0x30
 800710e:	461a      	mov	r2, r3
 8007110:	4929      	ldr	r1, [pc, #164]	; (80071b8 <set_mqtt_parameters+0x244>)
 8007112:	482a      	ldr	r0, [pc, #168]	; (80071bc <set_mqtt_parameters+0x248>)
 8007114:	f01e fc2e 	bl	8025974 <siprintf>
        sprintf(state_topic, "%s/state", wireless_params->user_mqtt.topic);           // изменения
 8007118:	4b0d      	ldr	r3, [pc, #52]	; (8007150 <set_mqtt_parameters+0x1dc>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	3330      	adds	r3, #48	; 0x30
 800711e:	461a      	mov	r2, r3
 8007120:	4927      	ldr	r1, [pc, #156]	; (80071c0 <set_mqtt_parameters+0x24c>)
 8007122:	4828      	ldr	r0, [pc, #160]	; (80071c4 <set_mqtt_parameters+0x250>)
 8007124:	f01e fc26 	bl	8025974 <siprintf>
    }
    DEBUG_MQTT("mode_topic %s\n", mode_topic);
 8007128:	4911      	ldr	r1, [pc, #68]	; (8007170 <set_mqtt_parameters+0x1fc>)
 800712a:	4827      	ldr	r0, [pc, #156]	; (80071c8 <set_mqtt_parameters+0x254>)
 800712c:	f01e fb3e 	bl	80257ac <iprintf>
    DEBUG_MQTT("mode_pub_topic %s\n", mode_pub_topic);
 8007130:	4911      	ldr	r1, [pc, #68]	; (8007178 <set_mqtt_parameters+0x204>)
 8007132:	4826      	ldr	r0, [pc, #152]	; (80071cc <set_mqtt_parameters+0x258>)
 8007134:	f01e fb3a 	bl	80257ac <iprintf>
    DEBUG_MQTT("system_topic %s\n", system_topic);
 8007138:	4911      	ldr	r1, [pc, #68]	; (8007180 <set_mqtt_parameters+0x20c>)
 800713a:	4825      	ldr	r0, [pc, #148]	; (80071d0 <set_mqtt_parameters+0x25c>)
 800713c:	f01e fb36 	bl	80257ac <iprintf>
    DEBUG_MQTT("system_pub_topic %s\n", system_pub_topic);
 8007140:	4911      	ldr	r1, [pc, #68]	; (8007188 <set_mqtt_parameters+0x214>)
 8007142:	4824      	ldr	r0, [pc, #144]	; (80071d4 <set_mqtt_parameters+0x260>)
 8007144:	f01e fb32 	bl	80257ac <iprintf>
}
 8007148:	bf00      	nop
 800714a:	3704      	adds	r7, #4
 800714c:	46bd      	mov	sp, r7
 800714e:	bd90      	pop	{r4, r7, pc}
 8007150:	20013a7c 	.word	0x20013a7c
 8007154:	20014632 	.word	0x20014632
 8007158:	0802a0b0 	.word	0x0802a0b0
 800715c:	0802a0b8 	.word	0x0802a0b8
 8007160:	0802a0d0 	.word	0x0802a0d0
 8007164:	0802a0ec 	.word	0x0802a0ec
 8007168:	20013ef4 	.word	0x20013ef4
 800716c:	0802a104 	.word	0x0802a104
 8007170:	20013da4 	.word	0x20013da4
 8007174:	0802a11c 	.word	0x0802a11c
 8007178:	20013e54 	.word	0x20013e54
 800717c:	0802a134 	.word	0x0802a134
 8007180:	20013ea4 	.word	0x20013ea4
 8007184:	0802a150 	.word	0x0802a150
 8007188:	20013c54 	.word	0x20013c54
 800718c:	0802a16c 	.word	0x0802a16c
 8007190:	20013cf4 	.word	0x20013cf4
 8007194:	0802a184 	.word	0x0802a184
 8007198:	0802a198 	.word	0x0802a198
 800719c:	0802a1b0 	.word	0x0802a1b0
 80071a0:	0802a1c8 	.word	0x0802a1c8
 80071a4:	0802a1e0 	.word	0x0802a1e0
 80071a8:	0802a1f8 	.word	0x0802a1f8
 80071ac:	20013df4 	.word	0x20013df4
 80071b0:	0802a204 	.word	0x0802a204
 80071b4:	20013d44 	.word	0x20013d44
 80071b8:	0802a210 	.word	0x0802a210
 80071bc:	20013bf4 	.word	0x20013bf4
 80071c0:	0802a220 	.word	0x0802a220
 80071c4:	20013ca4 	.word	0x20013ca4
 80071c8:	0802a22c 	.word	0x0802a22c
 80071cc:	0802a244 	.word	0x0802a244
 80071d0:	0802a260 	.word	0x0802a260
 80071d4:	0802a278 	.word	0x0802a278

080071d8 <set_user_test>:

void set_user_test()
{
 80071d8:	b480      	push	{r7}
 80071da:	b083      	sub	sp, #12
 80071dc:	af00      	add	r7, sp, #0
	wireless_params->mqtt_type = USER_MQTT;
 80071de:	4b1d      	ldr	r3, [pc, #116]	; (8007254 <set_user_test+0x7c>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	2200      	movs	r2, #0
 80071e4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

	uint8_t test_ip[] = { 195, 140, 146, 112 };
 80071e8:	4b1b      	ldr	r3, [pc, #108]	; (8007258 <set_user_test+0x80>)
 80071ea:	607b      	str	r3, [r7, #4]
	memcpy(wireless_params->user_mqtt.host, test_ip, 4);
 80071ec:	4b19      	ldr	r3, [pc, #100]	; (8007254 <set_user_test+0x7c>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	3324      	adds	r3, #36	; 0x24
 80071f2:	687a      	ldr	r2, [r7, #4]
 80071f4:	601a      	str	r2, [r3, #0]
	wireless_params->user_mqtt.port = 12212;
 80071f6:	4b17      	ldr	r3, [pc, #92]	; (8007254 <set_user_test+0x7c>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f642 72b4 	movw	r2, #12212	; 0x2fb4
 80071fe:	62da      	str	r2, [r3, #44]	; 0x2c
	strcpy(wireless_params->user_mqtt.login, "u_Ioo5RJ\0");
 8007200:	4b14      	ldr	r3, [pc, #80]	; (8007254 <set_user_test+0x7c>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	461a      	mov	r2, r3
 8007206:	4b15      	ldr	r3, [pc, #84]	; (800725c <set_user_test+0x84>)
 8007208:	cb03      	ldmia	r3!, {r0, r1}
 800720a:	6010      	str	r0, [r2, #0]
 800720c:	6051      	str	r1, [r2, #4]
 800720e:	781b      	ldrb	r3, [r3, #0]
 8007210:	7213      	strb	r3, [r2, #8]
	strcpy(wireless_params->user_mqtt.password, "7L8Uuagq\0");
 8007212:	4b10      	ldr	r3, [pc, #64]	; (8007254 <set_user_test+0x7c>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	330c      	adds	r3, #12
 8007218:	4911      	ldr	r1, [pc, #68]	; (8007260 <set_user_test+0x88>)
 800721a:	461a      	mov	r2, r3
 800721c:	460b      	mov	r3, r1
 800721e:	cb03      	ldmia	r3!, {r0, r1}
 8007220:	6010      	str	r0, [r2, #0]
 8007222:	6051      	str	r1, [r2, #4]
 8007224:	781b      	ldrb	r3, [r3, #0]
 8007226:	7213      	strb	r3, [r2, #8]
	strcpy(wireless_params->user_mqtt.client_id, "STM32\0");
 8007228:	4b0a      	ldr	r3, [pc, #40]	; (8007254 <set_user_test+0x7c>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	3318      	adds	r3, #24
 800722e:	4a0d      	ldr	r2, [pc, #52]	; (8007264 <set_user_test+0x8c>)
 8007230:	6810      	ldr	r0, [r2, #0]
 8007232:	6018      	str	r0, [r3, #0]
 8007234:	8892      	ldrh	r2, [r2, #4]
 8007236:	809a      	strh	r2, [r3, #4]
	strcpy(wireless_params->user_mqtt.topic, "VAKIO");
 8007238:	4b06      	ldr	r3, [pc, #24]	; (8007254 <set_user_test+0x7c>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	3330      	adds	r3, #48	; 0x30
 800723e:	4a0a      	ldr	r2, [pc, #40]	; (8007268 <set_user_test+0x90>)
 8007240:	6810      	ldr	r0, [r2, #0]
 8007242:	6018      	str	r0, [r3, #0]
 8007244:	8892      	ldrh	r2, [r2, #4]
 8007246:	809a      	strh	r2, [r3, #4]
}
 8007248:	bf00      	nop
 800724a:	370c      	adds	r7, #12
 800724c:	46bd      	mov	sp, r7
 800724e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007252:	4770      	bx	lr
 8007254:	20013a7c 	.word	0x20013a7c
 8007258:	70928cc3 	.word	0x70928cc3
 800725c:	0802a294 	.word	0x0802a294
 8007260:	0802a2a0 	.word	0x0802a2a0
 8007264:	0802a2ac 	.word	0x0802a2ac
 8007268:	0802a2b4 	.word	0x0802a2b4

0800726c <init_mqtt>:

void init_mqtt()
{
 800726c:	b580      	push	{r7, lr}
 800726e:	af00      	add	r7, sp, #0
	client = mqtt_client_new();
 8007270:	f010 f896 	bl	80173a0 <mqtt_client_new>
 8007274:	4603      	mov	r3, r0
 8007276:	4a04      	ldr	r2, [pc, #16]	; (8007288 <init_mqtt+0x1c>)
 8007278:	6013      	str	r3, [r2, #0]
	set_user_test();
 800727a:	f7ff ffad 	bl	80071d8 <set_user_test>
	set_mqtt_parameters();
 800727e:	f7ff fe79 	bl	8006f74 <set_mqtt_parameters>
}
 8007282:	bf00      	nop
 8007284:	bd80      	pop	{r7, pc}
 8007286:	bf00      	nop
 8007288:	20013f84 	.word	0x20013f84

0800728c <publish_auth>:
#include "mqtt_objects.h"
#include <stdlib.h>
#include "cmsis_os.h"

void publish_auth(char *version, char *mac_address, char *series, char *subtype, char *xtal_freq)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b08a      	sub	sp, #40	; 0x28
 8007290:	af04      	add	r7, sp, #16
 8007292:	60f8      	str	r0, [r7, #12]
 8007294:	60b9      	str	r1, [r7, #8]
 8007296:	607a      	str	r2, [r7, #4]
 8007298:	603b      	str	r3, [r7, #0]
    char *message = malloc(256);
 800729a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800729e:	f01d fb91 	bl	80249c4 <malloc>
 80072a2:	4603      	mov	r3, r0
 80072a4:	617b      	str	r3, [r7, #20]
    while (message == NULL)
 80072a6:	e008      	b.n	80072ba <publish_auth+0x2e>
    {
    	osDelay(10);
 80072a8:	200a      	movs	r0, #10
 80072aa:	f00a fd1e 	bl	8011cea <osDelay>
        message = malloc(256);
 80072ae:	f44f 7080 	mov.w	r0, #256	; 0x100
 80072b2:	f01d fb87 	bl	80249c4 <malloc>
 80072b6:	4603      	mov	r3, r0
 80072b8:	617b      	str	r3, [r7, #20]
    while (message == NULL)
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d0f3      	beq.n	80072a8 <publish_auth+0x1c>
    }
    sprintf(message, "{\"type\": \"auth\", \"auth\":{\"device_mac\":\"%s\",\"version\":\"%s\"}, \"device_subtype\":{\"series\":\"%s\",\"subtype\":\"%s\",\"xtal_freq\":\"%s\"}}", mac_address, version, series, subtype, xtal_freq);
 80072c0:	6a3b      	ldr	r3, [r7, #32]
 80072c2:	9302      	str	r3, [sp, #8]
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	9301      	str	r3, [sp, #4]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	9300      	str	r3, [sp, #0]
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	68ba      	ldr	r2, [r7, #8]
 80072d0:	490c      	ldr	r1, [pc, #48]	; (8007304 <publish_auth+0x78>)
 80072d2:	6978      	ldr	r0, [r7, #20]
 80072d4:	f01e fb4e 	bl	8025974 <siprintf>
    DEBUG_MQTT("AUTH\n");
 80072d8:	480b      	ldr	r0, [pc, #44]	; (8007308 <publish_auth+0x7c>)
 80072da:	f01e faed 	bl	80258b8 <puts>
    DEBUG_MQTT("%s\n", message);
 80072de:	6979      	ldr	r1, [r7, #20]
 80072e0:	480a      	ldr	r0, [pc, #40]	; (800730c <publish_auth+0x80>)
 80072e2:	f01e fa63 	bl	80257ac <iprintf>
    DEBUG_MQTT("system_pub_topic %s\n", system_pub_topic);
 80072e6:	490a      	ldr	r1, [pc, #40]	; (8007310 <publish_auth+0x84>)
 80072e8:	480a      	ldr	r0, [pc, #40]	; (8007314 <publish_auth+0x88>)
 80072ea:	f01e fa5f 	bl	80257ac <iprintf>
    publish_message(system_pub_topic, message);
 80072ee:	6979      	ldr	r1, [r7, #20]
 80072f0:	4807      	ldr	r0, [pc, #28]	; (8007310 <publish_auth+0x84>)
 80072f2:	f7ff f9c1 	bl	8006678 <publish_message>
    free(message);
 80072f6:	6978      	ldr	r0, [r7, #20]
 80072f8:	f01d fb6c 	bl	80249d4 <free>
}
 80072fc:	bf00      	nop
 80072fe:	3718      	adds	r7, #24
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}
 8007304:	0802a2bc 	.word	0x0802a2bc
 8007308:	0802a33c 	.word	0x0802a33c
 800730c:	0802a348 	.word	0x0802a348
 8007310:	20013c54 	.word	0x20013c54
 8007314:	0802a354 	.word	0x0802a354

08007318 <publish_capabilities>:


char *on_off[2] = {"off", "on"};

void publish_capabilities()
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b082      	sub	sp, #8
 800731c:	af00      	add	r7, sp, #0
    char *capabilities = malloc(300);
 800731e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007322:	f01d fb4f 	bl	80249c4 <malloc>
 8007326:	4603      	mov	r3, r0
 8007328:	607b      	str	r3, [r7, #4]
    while (capabilities == NULL)
 800732a:	e008      	b.n	800733e <publish_capabilities+0x26>
    {
        vTaskDelay(10);
 800732c:	200a      	movs	r0, #10
 800732e:	f00c fba5 	bl	8013a7c <vTaskDelay>
        capabilities = malloc(300);
 8007332:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007336:	f01d fb45 	bl	80249c4 <malloc>
 800733a:	4603      	mov	r3, r0
 800733c:	607b      	str	r3, [r7, #4]
    while (capabilities == NULL)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d0f3      	beq.n	800732c <publish_capabilities+0x14>
    }
    get_str_capabiities(capabilities);
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f000 f87b 	bl	8007440 <get_str_capabiities>
    publish_message(mode_pub_topic, capabilities);
 800734a:	6879      	ldr	r1, [r7, #4]
 800734c:	4804      	ldr	r0, [pc, #16]	; (8007360 <publish_capabilities+0x48>)
 800734e:	f7ff f993 	bl	8006678 <publish_message>
    free(capabilities);
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f01d fb3e 	bl	80249d4 <free>
}
 8007358:	bf00      	nop
 800735a:	3708      	adds	r7, #8
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}
 8007360:	20013e54 	.word	0x20013e54

08007364 <publish_system>:
    publish_message(temp_log_pub_topic, temp_log);
    free(temp_log);
}

void publish_system()
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b082      	sub	sp, #8
 8007368:	af00      	add	r7, sp, #0
    char *system = malloc(300);
 800736a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800736e:	f01d fb29 	bl	80249c4 <malloc>
 8007372:	4603      	mov	r3, r0
 8007374:	607b      	str	r3, [r7, #4]
    get_str_system_status(system);
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f000 f9f0 	bl	800775c <get_str_system_status>
    DEBUG_MQTT("Device system %s\n", system);
 800737c:	6879      	ldr	r1, [r7, #4]
 800737e:	4807      	ldr	r0, [pc, #28]	; (800739c <publish_system+0x38>)
 8007380:	f01e fa14 	bl	80257ac <iprintf>
    publish_message(log_pub_topic, system);
 8007384:	6879      	ldr	r1, [r7, #4]
 8007386:	4806      	ldr	r0, [pc, #24]	; (80073a0 <publish_system+0x3c>)
 8007388:	f7ff f976 	bl	8006678 <publish_message>
    free(system);
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f01d fb21 	bl	80249d4 <free>
}
 8007392:	bf00      	nop
 8007394:	3708      	adds	r7, #8
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}
 800739a:	bf00      	nop
 800739c:	0802a378 	.word	0x0802a378
 80073a0:	20013ef4 	.word	0x20013ef4

080073a4 <publish_settings>:

void publish_settings()
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b082      	sub	sp, #8
 80073a8:	af00      	add	r7, sp, #0
    char *settings = malloc(600);
 80073aa:	f44f 7016 	mov.w	r0, #600	; 0x258
 80073ae:	f01d fb09 	bl	80249c4 <malloc>
 80073b2:	4603      	mov	r3, r0
 80073b4:	607b      	str	r3, [r7, #4]
    get_str_settings(settings);
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f000 f8c8 	bl	800754c <get_str_settings>
    publish_message(mode_pub_topic, settings);
 80073bc:	6879      	ldr	r1, [r7, #4]
 80073be:	4805      	ldr	r0, [pc, #20]	; (80073d4 <publish_settings+0x30>)
 80073c0:	f7ff f95a 	bl	8006678 <publish_message>
    free(settings);
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f01d fb05 	bl	80249d4 <free>
}
 80073ca:	bf00      	nop
 80073cc:	3708      	adds	r7, #8
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}
 80073d2:	bf00      	nop
 80073d4:	20013e54 	.word	0x20013e54

080073d8 <publish_errors>:

void publish_errors()
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b082      	sub	sp, #8
 80073dc:	af00      	add	r7, sp, #0
    char *errors = malloc(600);
 80073de:	f44f 7016 	mov.w	r0, #600	; 0x258
 80073e2:	f01d faef 	bl	80249c4 <malloc>
 80073e6:	4603      	mov	r3, r0
 80073e8:	607b      	str	r3, [r7, #4]
    get_str_errors(errors);
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f000 f930 	bl	8007650 <get_str_errors>
    publish_message(system_pub_topic, errors);
 80073f0:	6879      	ldr	r1, [r7, #4]
 80073f2:	4805      	ldr	r0, [pc, #20]	; (8007408 <publish_errors+0x30>)
 80073f4:	f7ff f940 	bl	8006678 <publish_message>
    free(errors);
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f01d faeb 	bl	80249d4 <free>
}
 80073fe:	bf00      	nop
 8007400:	3708      	adds	r7, #8
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}
 8007406:	bf00      	nop
 8007408:	20013c54 	.word	0x20013c54

0800740c <publish_extra_options>:
    DEBUG_MQTT("LOG %s\n", log);
    publish_message_qos0(log_pub_topic, message);
}

void publish_extra_options()
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b082      	sub	sp, #8
 8007410:	af00      	add	r7, sp, #0

    char *extra = malloc(600);
 8007412:	f44f 7016 	mov.w	r0, #600	; 0x258
 8007416:	f01d fad5 	bl	80249c4 <malloc>
 800741a:	4603      	mov	r3, r0
 800741c:	607b      	str	r3, [r7, #4]
    get_str_extra_options(extra);
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f000 fa1a 	bl	8007858 <get_str_extra_options>
    publish_message(log_pub_topic, extra);
 8007424:	6879      	ldr	r1, [r7, #4]
 8007426:	4805      	ldr	r0, [pc, #20]	; (800743c <publish_extra_options+0x30>)
 8007428:	f7ff f926 	bl	8006678 <publish_message>
    free(extra);
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f01d fad1 	bl	80249d4 <free>
}
 8007432:	bf00      	nop
 8007434:	3708      	adds	r7, #8
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}
 800743a:	bf00      	nop
 800743c:	20013ef4 	.word	0x20013ef4

08007440 <get_str_capabiities>:

char *on_off_[2] = {"off", "on"};
char *modes[4] = {"inflow", "inflow_max", "smart"};

void get_str_capabiities(char *capabilities_str)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b086      	sub	sp, #24
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
    cJSON *root, *capabilities;
    root = cJSON_CreateObject();
 8007448:	f7fe fb34 	bl	8005ab4 <cJSON_CreateObject>
 800744c:	6178      	str	r0, [r7, #20]
    while (root == NULL)
 800744e:	e005      	b.n	800745c <get_str_capabiities+0x1c>
    {
    	osDelay(10);
 8007450:	200a      	movs	r0, #10
 8007452:	f00a fc4a 	bl	8011cea <osDelay>
        root = cJSON_CreateObject();
 8007456:	f7fe fb2d 	bl	8005ab4 <cJSON_CreateObject>
 800745a:	6178      	str	r0, [r7, #20]
    while (root == NULL)
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d0f6      	beq.n	8007450 <get_str_capabiities+0x10>
    }
    capabilities = cJSON_CreateObject();
 8007462:	f7fe fb27 	bl	8005ab4 <cJSON_CreateObject>
 8007466:	6138      	str	r0, [r7, #16]
    while (capabilities == NULL)
 8007468:	e005      	b.n	8007476 <get_str_capabiities+0x36>
    {
    	osDelay(10);
 800746a:	200a      	movs	r0, #10
 800746c:	f00a fc3d 	bl	8011cea <osDelay>
        capabilities = cJSON_CreateObject();
 8007470:	f7fe fb20 	bl	8005ab4 <cJSON_CreateObject>
 8007474:	6138      	str	r0, [r7, #16]
    while (capabilities == NULL)
 8007476:	693b      	ldr	r3, [r7, #16]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d0f6      	beq.n	800746a <get_str_capabiities+0x2a>
    }
    cJSON_AddItemToObject(root, "capabilities", capabilities);
 800747c:	693a      	ldr	r2, [r7, #16]
 800747e:	492a      	ldr	r1, [pc, #168]	; (8007528 <get_str_capabiities+0xe8>)
 8007480:	6978      	ldr	r0, [r7, #20]
 8007482:	f7fe fa4d 	bl	8005920 <cJSON_AddItemToObject>
    cJSON_AddStringToObject(capabilities, "mode", modes[device->mode]);
 8007486:	4b29      	ldr	r3, [pc, #164]	; (800752c <get_str_capabiities+0xec>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	7b5b      	ldrb	r3, [r3, #13]
 800748c:	461a      	mov	r2, r3
 800748e:	4b28      	ldr	r3, [pc, #160]	; (8007530 <get_str_capabiities+0xf0>)
 8007490:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007494:	461a      	mov	r2, r3
 8007496:	4927      	ldr	r1, [pc, #156]	; (8007534 <get_str_capabiities+0xf4>)
 8007498:	6938      	ldr	r0, [r7, #16]
 800749a:	f7fe fa7b 	bl	8005994 <cJSON_AddStringToObject>
    cJSON_AddStringToObject(capabilities, "on_off", on_off_[device->state]);
 800749e:	4b23      	ldr	r3, [pc, #140]	; (800752c <get_str_capabiities+0xec>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	789b      	ldrb	r3, [r3, #2]
 80074a4:	461a      	mov	r2, r3
 80074a6:	4b24      	ldr	r3, [pc, #144]	; (8007538 <get_str_capabiities+0xf8>)
 80074a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074ac:	461a      	mov	r2, r3
 80074ae:	4923      	ldr	r1, [pc, #140]	; (800753c <get_str_capabiities+0xfc>)
 80074b0:	6938      	ldr	r0, [r7, #16]
 80074b2:	f7fe fa6f 	bl	8005994 <cJSON_AddStringToObject>
    cJSON_AddNumberToObject(capabilities, "speed", device->inflow_speed);
 80074b6:	4b1d      	ldr	r3, [pc, #116]	; (800752c <get_str_capabiities+0xec>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	7bdb      	ldrb	r3, [r3, #15]
 80074bc:	4618      	mov	r0, r3
 80074be:	f7f9 f831 	bl	8000524 <__aeabi_ui2d>
 80074c2:	4602      	mov	r2, r0
 80074c4:	460b      	mov	r3, r1
 80074c6:	ec43 2b10 	vmov	d0, r2, r3
 80074ca:	491d      	ldr	r1, [pc, #116]	; (8007540 <get_str_capabiities+0x100>)
 80074cc:	6938      	ldr	r0, [r7, #16]
 80074ce:	f7fe fa3d 	bl	800594c <cJSON_AddNumberToObject>
    cJSON_AddNumberToObject(capabilities, "heat", heaters->ten.temp_limit);
 80074d2:	4b1c      	ldr	r3, [pc, #112]	; (8007544 <get_str_capabiities+0x104>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	685b      	ldr	r3, [r3, #4]
 80074d8:	4618      	mov	r0, r3
 80074da:	f7f9 f833 	bl	8000544 <__aeabi_i2d>
 80074de:	4602      	mov	r2, r0
 80074e0:	460b      	mov	r3, r1
 80074e2:	ec43 2b10 	vmov	d0, r2, r3
 80074e6:	4918      	ldr	r1, [pc, #96]	; (8007548 <get_str_capabiities+0x108>)
 80074e8:	6938      	ldr	r0, [r7, #16]
 80074ea:	f7fe fa2f 	bl	800594c <cJSON_AddNumberToObject>
    char *js_str = cJSON_Print(root);
 80074ee:	6978      	ldr	r0, [r7, #20]
 80074f0:	f7fd fb78 	bl	8004be4 <cJSON_Print>
 80074f4:	60f8      	str	r0, [r7, #12]
    while (js_str == NULL)
 80074f6:	e006      	b.n	8007506 <get_str_capabiities+0xc6>
    {
    	osDelay(10);
 80074f8:	200a      	movs	r0, #10
 80074fa:	f00a fbf6 	bl	8011cea <osDelay>
        js_str = cJSON_Print(root);
 80074fe:	6978      	ldr	r0, [r7, #20]
 8007500:	f7fd fb70 	bl	8004be4 <cJSON_Print>
 8007504:	60f8      	str	r0, [r7, #12]
    while (js_str == NULL)
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d0f5      	beq.n	80074f8 <get_str_capabiities+0xb8>
    }
    strcpy(capabilities_str, js_str);
 800750c:	68f9      	ldr	r1, [r7, #12]
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f01e fac1 	bl	8025a96 <strcpy>
    cJSON_Delete(root);
 8007514:	6978      	ldr	r0, [r7, #20]
 8007516:	f7fc fabb 	bl	8003a90 <cJSON_Delete>
    cJSON_free(js_str);
 800751a:	68f8      	ldr	r0, [r7, #12]
 800751c:	f7fe fade 	bl	8005adc <cJSON_free>
}
 8007520:	bf00      	nop
 8007522:	3718      	adds	r7, #24
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}
 8007528:	0802a3e0 	.word	0x0802a3e0
 800752c:	20013a78 	.word	0x20013a78
 8007530:	10000024 	.word	0x10000024
 8007534:	0802a3f0 	.word	0x0802a3f0
 8007538:	1000001c 	.word	0x1000001c
 800753c:	0802a3f8 	.word	0x0802a3f8
 8007540:	0802a400 	.word	0x0802a400
 8007544:	200139cc 	.word	0x200139cc
 8007548:	0802a408 	.word	0x0802a408

0800754c <get_str_settings>:

void get_str_settings(char *settings)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b086      	sub	sp, #24
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
    cJSON *root, *settings_js, *ten;
    root = cJSON_CreateObject();
 8007554:	f7fe faae 	bl	8005ab4 <cJSON_CreateObject>
 8007558:	6178      	str	r0, [r7, #20]
    cJSON_AddItemToObject(root, "settings", settings_js = cJSON_CreateObject());
 800755a:	f7fe faab 	bl	8005ab4 <cJSON_CreateObject>
 800755e:	6138      	str	r0, [r7, #16]
 8007560:	693a      	ldr	r2, [r7, #16]
 8007562:	4933      	ldr	r1, [pc, #204]	; (8007630 <get_str_settings+0xe4>)
 8007564:	6978      	ldr	r0, [r7, #20]
 8007566:	f7fe f9db 	bl	8005920 <cJSON_AddItemToObject>
    cJSON_AddItemToObject(settings_js, "ten", ten = cJSON_CreateObject());
 800756a:	f7fe faa3 	bl	8005ab4 <cJSON_CreateObject>
 800756e:	60f8      	str	r0, [r7, #12]
 8007570:	68fa      	ldr	r2, [r7, #12]
 8007572:	4930      	ldr	r1, [pc, #192]	; (8007634 <get_str_settings+0xe8>)
 8007574:	6938      	ldr	r0, [r7, #16]
 8007576:	f7fe f9d3 	bl	8005920 <cJSON_AddItemToObject>
    cJSON_AddNumberToObject(ten, "temp_limit", heaters->ten.temp_limit);
 800757a:	4b2f      	ldr	r3, [pc, #188]	; (8007638 <get_str_settings+0xec>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	685b      	ldr	r3, [r3, #4]
 8007580:	4618      	mov	r0, r3
 8007582:	f7f8 ffdf 	bl	8000544 <__aeabi_i2d>
 8007586:	4602      	mov	r2, r0
 8007588:	460b      	mov	r3, r1
 800758a:	ec43 2b10 	vmov	d0, r2, r3
 800758e:	492b      	ldr	r1, [pc, #172]	; (800763c <get_str_settings+0xf0>)
 8007590:	68f8      	ldr	r0, [r7, #12]
 8007592:	f7fe f9db 	bl	800594c <cJSON_AddNumberToObject>
    cJSON_AddNumberToObject(ten, "on_off", heaters->on_off_ten);
 8007596:	4b28      	ldr	r3, [pc, #160]	; (8007638 <get_str_settings+0xec>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800759e:	4618      	mov	r0, r3
 80075a0:	f7f8 ffc0 	bl	8000524 <__aeabi_ui2d>
 80075a4:	4602      	mov	r2, r0
 80075a6:	460b      	mov	r3, r1
 80075a8:	ec43 2b10 	vmov	d0, r2, r3
 80075ac:	4924      	ldr	r1, [pc, #144]	; (8007640 <get_str_settings+0xf4>)
 80075ae:	68f8      	ldr	r0, [r7, #12]
 80075b0:	f7fe f9cc 	bl	800594c <cJSON_AddNumberToObject>
    cJSON_AddNumberToObject(ten, "koef_grow", heaters->koef_grow);
 80075b4:	4b20      	ldr	r3, [pc, #128]	; (8007638 <get_str_settings+0xec>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ba:	4618      	mov	r0, r3
 80075bc:	f7f8 ffc2 	bl	8000544 <__aeabi_i2d>
 80075c0:	4602      	mov	r2, r0
 80075c2:	460b      	mov	r3, r1
 80075c4:	ec43 2b10 	vmov	d0, r2, r3
 80075c8:	491e      	ldr	r1, [pc, #120]	; (8007644 <get_str_settings+0xf8>)
 80075ca:	68f8      	ldr	r0, [r7, #12]
 80075cc:	f7fe f9be 	bl	800594c <cJSON_AddNumberToObject>
    cJSON_AddNumberToObject(ten, "update_koef_time", heaters->update_koef_time);
 80075d0:	4b19      	ldr	r3, [pc, #100]	; (8007638 <get_str_settings+0xec>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80075d8:	4610      	mov	r0, r2
 80075da:	4619      	mov	r1, r3
 80075dc:	f7f8 ffe6 	bl	80005ac <__aeabi_ul2d>
 80075e0:	4602      	mov	r2, r0
 80075e2:	460b      	mov	r3, r1
 80075e4:	ec43 2b10 	vmov	d0, r2, r3
 80075e8:	4917      	ldr	r1, [pc, #92]	; (8007648 <get_str_settings+0xfc>)
 80075ea:	68f8      	ldr	r0, [r7, #12]
 80075ec:	f7fe f9ae 	bl	800594c <cJSON_AddNumberToObject>
    cJSON_AddNumberToObject(ten, "delta", heaters->delta);
 80075f0:	4b11      	ldr	r3, [pc, #68]	; (8007638 <get_str_settings+0xec>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	69db      	ldr	r3, [r3, #28]
 80075f6:	4618      	mov	r0, r3
 80075f8:	f7f8 ffb6 	bl	8000568 <__aeabi_f2d>
 80075fc:	4602      	mov	r2, r0
 80075fe:	460b      	mov	r3, r1
 8007600:	ec43 2b10 	vmov	d0, r2, r3
 8007604:	4911      	ldr	r1, [pc, #68]	; (800764c <get_str_settings+0x100>)
 8007606:	68f8      	ldr	r0, [r7, #12]
 8007608:	f7fe f9a0 	bl	800594c <cJSON_AddNumberToObject>

    char *js_str = cJSON_Print(root);
 800760c:	6978      	ldr	r0, [r7, #20]
 800760e:	f7fd fae9 	bl	8004be4 <cJSON_Print>
 8007612:	60b8      	str	r0, [r7, #8]
    strcpy(settings, js_str);
 8007614:	68b9      	ldr	r1, [r7, #8]
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f01e fa3d 	bl	8025a96 <strcpy>
    cJSON_Delete(root);
 800761c:	6978      	ldr	r0, [r7, #20]
 800761e:	f7fc fa37 	bl	8003a90 <cJSON_Delete>
    cJSON_free(js_str);
 8007622:	68b8      	ldr	r0, [r7, #8]
 8007624:	f7fe fa5a 	bl	8005adc <cJSON_free>
}
 8007628:	bf00      	nop
 800762a:	3718      	adds	r7, #24
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}
 8007630:	0802a410 	.word	0x0802a410
 8007634:	0802a41c 	.word	0x0802a41c
 8007638:	200139cc 	.word	0x200139cc
 800763c:	0802a420 	.word	0x0802a420
 8007640:	0802a3f8 	.word	0x0802a3f8
 8007644:	0802a42c 	.word	0x0802a42c
 8007648:	0802a438 	.word	0x0802a438
 800764c:	0802a44c 	.word	0x0802a44c

08007650 <get_str_errors>:

void get_str_errors(char *errors)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b086      	sub	sp, #24
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
    cJSON *root, *errors_js;
    root = cJSON_CreateObject();
 8007658:	f7fe fa2c 	bl	8005ab4 <cJSON_CreateObject>
 800765c:	6178      	str	r0, [r7, #20]
    cJSON_AddItemToObject(root, "errors", errors_js = cJSON_CreateObject());
 800765e:	f7fe fa29 	bl	8005ab4 <cJSON_CreateObject>
 8007662:	6138      	str	r0, [r7, #16]
 8007664:	693a      	ldr	r2, [r7, #16]
 8007666:	4935      	ldr	r1, [pc, #212]	; (800773c <get_str_errors+0xec>)
 8007668:	6978      	ldr	r0, [r7, #20]
 800766a:	f7fe f959 	bl	8005920 <cJSON_AddItemToObject>
    cJSON_AddNumberToObject(errors_js, "temp_hot", device->error_temp_hot);
 800766e:	4b34      	ldr	r3, [pc, #208]	; (8007740 <get_str_errors+0xf0>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	78db      	ldrb	r3, [r3, #3]
 8007674:	4618      	mov	r0, r3
 8007676:	f7f8 ff55 	bl	8000524 <__aeabi_ui2d>
 800767a:	4602      	mov	r2, r0
 800767c:	460b      	mov	r3, r1
 800767e:	ec43 2b10 	vmov	d0, r2, r3
 8007682:	4930      	ldr	r1, [pc, #192]	; (8007744 <get_str_errors+0xf4>)
 8007684:	6938      	ldr	r0, [r7, #16]
 8007686:	f7fe f961 	bl	800594c <cJSON_AddNumberToObject>
    cJSON_AddNumberToObject(errors_js, "temp_cold", device->error_temp_cold);
 800768a:	4b2d      	ldr	r3, [pc, #180]	; (8007740 <get_str_errors+0xf0>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	791b      	ldrb	r3, [r3, #4]
 8007690:	4618      	mov	r0, r3
 8007692:	f7f8 ff47 	bl	8000524 <__aeabi_ui2d>
 8007696:	4602      	mov	r2, r0
 8007698:	460b      	mov	r3, r1
 800769a:	ec43 2b10 	vmov	d0, r2, r3
 800769e:	492a      	ldr	r1, [pc, #168]	; (8007748 <get_str_errors+0xf8>)
 80076a0:	6938      	ldr	r0, [r7, #16]
 80076a2:	f7fe f953 	bl	800594c <cJSON_AddNumberToObject>
    cJSON_AddNumberToObject(errors_js, "stop_hot", device->error_stop_hot);
 80076a6:	4b26      	ldr	r3, [pc, #152]	; (8007740 <get_str_errors+0xf0>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	795b      	ldrb	r3, [r3, #5]
 80076ac:	4618      	mov	r0, r3
 80076ae:	f7f8 ff39 	bl	8000524 <__aeabi_ui2d>
 80076b2:	4602      	mov	r2, r0
 80076b4:	460b      	mov	r3, r1
 80076b6:	ec43 2b10 	vmov	d0, r2, r3
 80076ba:	4924      	ldr	r1, [pc, #144]	; (800774c <get_str_errors+0xfc>)
 80076bc:	6938      	ldr	r0, [r7, #16]
 80076be:	f7fe f945 	bl	800594c <cJSON_AddNumberToObject>
    cJSON_AddNumberToObject(errors_js, "stop_cold", device->error_stop_cold);
 80076c2:	4b1f      	ldr	r3, [pc, #124]	; (8007740 <get_str_errors+0xf0>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	799b      	ldrb	r3, [r3, #6]
 80076c8:	4618      	mov	r0, r3
 80076ca:	f7f8 ff2b 	bl	8000524 <__aeabi_ui2d>
 80076ce:	4602      	mov	r2, r0
 80076d0:	460b      	mov	r3, r1
 80076d2:	ec43 2b10 	vmov	d0, r2, r3
 80076d6:	491e      	ldr	r1, [pc, #120]	; (8007750 <get_str_errors+0x100>)
 80076d8:	6938      	ldr	r0, [r7, #16]
 80076da:	f7fe f937 	bl	800594c <cJSON_AddNumberToObject>
    cJSON_AddNumberToObject(errors_js, "ds18_bus", device->error_ds18_bus);
 80076de:	4b18      	ldr	r3, [pc, #96]	; (8007740 <get_str_errors+0xf0>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	79db      	ldrb	r3, [r3, #7]
 80076e4:	4618      	mov	r0, r3
 80076e6:	f7f8 ff1d 	bl	8000524 <__aeabi_ui2d>
 80076ea:	4602      	mov	r2, r0
 80076ec:	460b      	mov	r3, r1
 80076ee:	ec43 2b10 	vmov	d0, r2, r3
 80076f2:	4918      	ldr	r1, [pc, #96]	; (8007754 <get_str_errors+0x104>)
 80076f4:	6938      	ldr	r0, [r7, #16]
 80076f6:	f7fe f929 	bl	800594c <cJSON_AddNumberToObject>
    cJSON_AddNumberToObject(errors_js, "ds18_lack", device->error_ds18_lack);
 80076fa:	4b11      	ldr	r3, [pc, #68]	; (8007740 <get_str_errors+0xf0>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	7a1b      	ldrb	r3, [r3, #8]
 8007700:	4618      	mov	r0, r3
 8007702:	f7f8 ff0f 	bl	8000524 <__aeabi_ui2d>
 8007706:	4602      	mov	r2, r0
 8007708:	460b      	mov	r3, r1
 800770a:	ec43 2b10 	vmov	d0, r2, r3
 800770e:	4912      	ldr	r1, [pc, #72]	; (8007758 <get_str_errors+0x108>)
 8007710:	6938      	ldr	r0, [r7, #16]
 8007712:	f7fe f91b 	bl	800594c <cJSON_AddNumberToObject>

    char *js_str = cJSON_Print(root);
 8007716:	6978      	ldr	r0, [r7, #20]
 8007718:	f7fd fa64 	bl	8004be4 <cJSON_Print>
 800771c:	60f8      	str	r0, [r7, #12]
    strcpy(errors, js_str);
 800771e:	68f9      	ldr	r1, [r7, #12]
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f01e f9b8 	bl	8025a96 <strcpy>
    cJSON_Delete(root);
 8007726:	6978      	ldr	r0, [r7, #20]
 8007728:	f7fc f9b2 	bl	8003a90 <cJSON_Delete>
    cJSON_free(js_str);
 800772c:	68f8      	ldr	r0, [r7, #12]
 800772e:	f7fe f9d5 	bl	8005adc <cJSON_free>
}
 8007732:	bf00      	nop
 8007734:	3718      	adds	r7, #24
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}
 800773a:	bf00      	nop
 800773c:	0802a454 	.word	0x0802a454
 8007740:	20013a78 	.word	0x20013a78
 8007744:	0802a45c 	.word	0x0802a45c
 8007748:	0802a468 	.word	0x0802a468
 800774c:	0802a474 	.word	0x0802a474
 8007750:	0802a480 	.word	0x0802a480
 8007754:	0802a48c 	.word	0x0802a48c
 8007758:	0802a498 	.word	0x0802a498

0800775c <get_str_system_status>:

void get_str_system_status(char *system_str)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b084      	sub	sp, #16
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
    cJSON *root;
    root = cJSON_CreateObject();
 8007764:	f7fe f9a6 	bl	8005ab4 <cJSON_CreateObject>
 8007768:	60f8      	str	r0, [r7, #12]
    cJSON_AddNumberToObject(root, "heat_koef", heaters->koef);
 800776a:	4b33      	ldr	r3, [pc, #204]	; (8007838 <get_str_system_status+0xdc>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	699b      	ldr	r3, [r3, #24]
 8007770:	4618      	mov	r0, r3
 8007772:	f7f8 fee7 	bl	8000544 <__aeabi_i2d>
 8007776:	4602      	mov	r2, r0
 8007778:	460b      	mov	r3, r1
 800777a:	ec43 2b10 	vmov	d0, r2, r3
 800777e:	492f      	ldr	r1, [pc, #188]	; (800783c <get_str_system_status+0xe0>)
 8007780:	68f8      	ldr	r0, [r7, #12]
 8007782:	f7fe f8e3 	bl	800594c <cJSON_AddNumberToObject>
    cJSON_AddNumberToObject(root, "ten_power", heaters->ten.power);
 8007786:	4b2c      	ldr	r3, [pc, #176]	; (8007838 <get_str_system_status+0xdc>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	8a1b      	ldrh	r3, [r3, #16]
 800778c:	4618      	mov	r0, r3
 800778e:	f7f8 fec9 	bl	8000524 <__aeabi_ui2d>
 8007792:	4602      	mov	r2, r0
 8007794:	460b      	mov	r3, r1
 8007796:	ec43 2b10 	vmov	d0, r2, r3
 800779a:	4929      	ldr	r1, [pc, #164]	; (8007840 <get_str_system_status+0xe4>)
 800779c:	68f8      	ldr	r0, [r7, #12]
 800779e:	f7fe f8d5 	bl	800594c <cJSON_AddNumberToObject>
    cJSON_AddNumberToObject(root, "temp_out", sensors_data->out);
 80077a2:	4b28      	ldr	r3, [pc, #160]	; (8007844 <get_str_system_status+0xe8>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	4618      	mov	r0, r3
 80077aa:	f7f8 fedd 	bl	8000568 <__aeabi_f2d>
 80077ae:	4602      	mov	r2, r0
 80077b0:	460b      	mov	r3, r1
 80077b2:	ec43 2b10 	vmov	d0, r2, r3
 80077b6:	4924      	ldr	r1, [pc, #144]	; (8007848 <get_str_system_status+0xec>)
 80077b8:	68f8      	ldr	r0, [r7, #12]
 80077ba:	f7fe f8c7 	bl	800594c <cJSON_AddNumberToObject>
    cJSON_AddNumberToObject(root, "temp_in", sensors_data->in);
 80077be:	4b21      	ldr	r3, [pc, #132]	; (8007844 <get_str_system_status+0xe8>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	689b      	ldr	r3, [r3, #8]
 80077c4:	4618      	mov	r0, r3
 80077c6:	f7f8 fecf 	bl	8000568 <__aeabi_f2d>
 80077ca:	4602      	mov	r2, r0
 80077cc:	460b      	mov	r3, r1
 80077ce:	ec43 2b10 	vmov	d0, r2, r3
 80077d2:	491e      	ldr	r1, [pc, #120]	; (800784c <get_str_system_status+0xf0>)
 80077d4:	68f8      	ldr	r0, [r7, #12]
 80077d6:	f7fe f8b9 	bl	800594c <cJSON_AddNumberToObject>
    cJSON_AddNumberToObject(root, "state_out_sensor", sensors_data->out_state);
 80077da:	4b1a      	ldr	r3, [pc, #104]	; (8007844 <get_str_system_status+0xe8>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	7f1b      	ldrb	r3, [r3, #28]
 80077e0:	4618      	mov	r0, r3
 80077e2:	f7f8 fe9f 	bl	8000524 <__aeabi_ui2d>
 80077e6:	4602      	mov	r2, r0
 80077e8:	460b      	mov	r3, r1
 80077ea:	ec43 2b10 	vmov	d0, r2, r3
 80077ee:	4918      	ldr	r1, [pc, #96]	; (8007850 <get_str_system_status+0xf4>)
 80077f0:	68f8      	ldr	r0, [r7, #12]
 80077f2:	f7fe f8ab 	bl	800594c <cJSON_AddNumberToObject>
    cJSON_AddNumberToObject(root, "state_in_sensor", sensors_data->in_state);
 80077f6:	4b13      	ldr	r3, [pc, #76]	; (8007844 <get_str_system_status+0xe8>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	7f5b      	ldrb	r3, [r3, #29]
 80077fc:	4618      	mov	r0, r3
 80077fe:	f7f8 fe91 	bl	8000524 <__aeabi_ui2d>
 8007802:	4602      	mov	r2, r0
 8007804:	460b      	mov	r3, r1
 8007806:	ec43 2b10 	vmov	d0, r2, r3
 800780a:	4912      	ldr	r1, [pc, #72]	; (8007854 <get_str_system_status+0xf8>)
 800780c:	68f8      	ldr	r0, [r7, #12]
 800780e:	f7fe f89d 	bl	800594c <cJSON_AddNumberToObject>

    // {"entity_on_off_dependence":"off","entity_dependence":{"device_id_master":0,"mode":"humidity","value":50}}
    char *js_str = cJSON_Print(root);
 8007812:	68f8      	ldr	r0, [r7, #12]
 8007814:	f7fd f9e6 	bl	8004be4 <cJSON_Print>
 8007818:	60b8      	str	r0, [r7, #8]
    strcpy(system_str, js_str);
 800781a:	68b9      	ldr	r1, [r7, #8]
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f01e f93a 	bl	8025a96 <strcpy>
    cJSON_Delete(root);
 8007822:	68f8      	ldr	r0, [r7, #12]
 8007824:	f7fc f934 	bl	8003a90 <cJSON_Delete>
    cJSON_free(js_str);
 8007828:	68b8      	ldr	r0, [r7, #8]
 800782a:	f7fe f957 	bl	8005adc <cJSON_free>
}
 800782e:	bf00      	nop
 8007830:	3710      	adds	r7, #16
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}
 8007836:	bf00      	nop
 8007838:	200139cc 	.word	0x200139cc
 800783c:	0802a4a4 	.word	0x0802a4a4
 8007840:	0802a4b0 	.word	0x0802a4b0
 8007844:	20013a80 	.word	0x20013a80
 8007848:	0802a4bc 	.word	0x0802a4bc
 800784c:	0802a4c8 	.word	0x0802a4c8
 8007850:	0802a4d0 	.word	0x0802a4d0
 8007854:	0802a4e4 	.word	0x0802a4e4

08007858 <get_str_extra_options>:
    cJSON_Delete(root);
    cJSON_free(js_str);
}

void get_str_extra_options(char *extra)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b086      	sub	sp, #24
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
    cJSON *root, *extra_js;
    root = cJSON_CreateObject();
 8007860:	f7fe f928 	bl	8005ab4 <cJSON_CreateObject>
 8007864:	6178      	str	r0, [r7, #20]
    cJSON_AddItemToObject(root, "extra_options", extra_js = cJSON_CreateObject());
 8007866:	f7fe f925 	bl	8005ab4 <cJSON_CreateObject>
 800786a:	6138      	str	r0, [r7, #16]
 800786c:	693a      	ldr	r2, [r7, #16]
 800786e:	4920      	ldr	r1, [pc, #128]	; (80078f0 <get_str_extra_options+0x98>)
 8007870:	6978      	ldr	r0, [r7, #20]
 8007872:	f7fe f855 	bl	8005920 <cJSON_AddItemToObject>
    cJSON_AddNumberToObject(extra_js, "deviation", device->extra_options.deviation);
 8007876:	4b1f      	ldr	r3, [pc, #124]	; (80078f4 <get_str_extra_options+0x9c>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	7e5b      	ldrb	r3, [r3, #25]
 800787c:	4618      	mov	r0, r3
 800787e:	f7f8 fe51 	bl	8000524 <__aeabi_ui2d>
 8007882:	4602      	mov	r2, r0
 8007884:	460b      	mov	r3, r1
 8007886:	ec43 2b10 	vmov	d0, r2, r3
 800788a:	491b      	ldr	r1, [pc, #108]	; (80078f8 <get_str_extra_options+0xa0>)
 800788c:	6938      	ldr	r0, [r7, #16]
 800788e:	f7fe f85d 	bl	800594c <cJSON_AddNumberToObject>
    cJSON_AddNumberToObject(extra_js, "check_time", device->extra_options.check_time);
 8007892:	4b18      	ldr	r3, [pc, #96]	; (80078f4 <get_str_extra_options+0x9c>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	7e9b      	ldrb	r3, [r3, #26]
 8007898:	4618      	mov	r0, r3
 800789a:	f7f8 fe43 	bl	8000524 <__aeabi_ui2d>
 800789e:	4602      	mov	r2, r0
 80078a0:	460b      	mov	r3, r1
 80078a2:	ec43 2b10 	vmov	d0, r2, r3
 80078a6:	4915      	ldr	r1, [pc, #84]	; (80078fc <get_str_extra_options+0xa4>)
 80078a8:	6938      	ldr	r0, [r7, #16]
 80078aa:	f7fe f84f 	bl	800594c <cJSON_AddNumberToObject>
    cJSON_AddNumberToObject(extra_js, "step_pwm", device->extra_options.step_pwm);
 80078ae:	4b11      	ldr	r3, [pc, #68]	; (80078f4 <get_str_extra_options+0x9c>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	7edb      	ldrb	r3, [r3, #27]
 80078b4:	4618      	mov	r0, r3
 80078b6:	f7f8 fe35 	bl	8000524 <__aeabi_ui2d>
 80078ba:	4602      	mov	r2, r0
 80078bc:	460b      	mov	r3, r1
 80078be:	ec43 2b10 	vmov	d0, r2, r3
 80078c2:	490f      	ldr	r1, [pc, #60]	; (8007900 <get_str_extra_options+0xa8>)
 80078c4:	6938      	ldr	r0, [r7, #16]
 80078c6:	f7fe f841 	bl	800594c <cJSON_AddNumberToObject>

    char *js_str = cJSON_Print(root);
 80078ca:	6978      	ldr	r0, [r7, #20]
 80078cc:	f7fd f98a 	bl	8004be4 <cJSON_Print>
 80078d0:	60f8      	str	r0, [r7, #12]
    strcpy(extra, js_str);
 80078d2:	68f9      	ldr	r1, [r7, #12]
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f01e f8de 	bl	8025a96 <strcpy>
    cJSON_Delete(root);
 80078da:	6978      	ldr	r0, [r7, #20]
 80078dc:	f7fc f8d8 	bl	8003a90 <cJSON_Delete>
    cJSON_free(js_str);
 80078e0:	68f8      	ldr	r0, [r7, #12]
 80078e2:	f7fe f8fb 	bl	8005adc <cJSON_free>
}
 80078e6:	bf00      	nop
 80078e8:	3718      	adds	r7, #24
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}
 80078ee:	bf00      	nop
 80078f0:	0802a520 	.word	0x0802a520
 80078f4:	20013a78 	.word	0x20013a78
 80078f8:	0802a530 	.word	0x0802a530
 80078fc:	0802a53c 	.word	0x0802a53c
 8007900:	0802a548 	.word	0x0802a548

08007904 <publish_from_timer>:
bool send_array_entity[10][5];
bool start_timer_f;
uint32_t  server_time = 0;

void publish_from_timer()
{
 8007904:	b580      	push	{r7, lr}
 8007906:	af00      	add	r7, sp, #0
    start_timer_f = false;
 8007908:	4b45      	ldr	r3, [pc, #276]	; (8007a20 <publish_from_timer+0x11c>)
 800790a:	2200      	movs	r2, #0
 800790c:	701a      	strb	r2, [r3, #0]
    DEBUG_SEND("Timer done!\n");
    if (wireless_params->mqtt_type != VAKIO_MQTT)
 800790e:	4b45      	ldr	r3, [pc, #276]	; (8007a24 <publish_from_timer+0x120>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8007916:	f083 0301 	eor.w	r3, r3, #1
 800791a:	b2db      	uxtb	r3, r3
 800791c:	2b00      	cmp	r3, #0
 800791e:	d061      	beq.n	80079e4 <publish_from_timer+0xe0>
    {
        if (device_send.mode != device_check.mode)
 8007920:	4b41      	ldr	r3, [pc, #260]	; (8007a28 <publish_from_timer+0x124>)
 8007922:	7b5a      	ldrb	r2, [r3, #13]
 8007924:	4b41      	ldr	r3, [pc, #260]	; (8007a2c <publish_from_timer+0x128>)
 8007926:	7b5b      	ldrb	r3, [r3, #13]
 8007928:	429a      	cmp	r2, r3
 800792a:	d011      	beq.n	8007950 <publish_from_timer+0x4c>
        {
            iSendMode = true;
 800792c:	4b40      	ldr	r3, [pc, #256]	; (8007a30 <publish_from_timer+0x12c>)
 800792e:	2201      	movs	r2, #1
 8007930:	701a      	strb	r2, [r3, #0]
            publish_message(workmode_topic, modes_str_send[device->mode]);
 8007932:	4b40      	ldr	r3, [pc, #256]	; (8007a34 <publish_from_timer+0x130>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	7b5b      	ldrb	r3, [r3, #13]
 8007938:	461a      	mov	r2, r3
 800793a:	4b3f      	ldr	r3, [pc, #252]	; (8007a38 <publish_from_timer+0x134>)
 800793c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007940:	4619      	mov	r1, r3
 8007942:	483e      	ldr	r0, [pc, #248]	; (8007a3c <publish_from_timer+0x138>)
 8007944:	f7fe fe98 	bl	8006678 <publish_message>
            device_send.mode = device_check.mode;
 8007948:	4b38      	ldr	r3, [pc, #224]	; (8007a2c <publish_from_timer+0x128>)
 800794a:	7b5a      	ldrb	r2, [r3, #13]
 800794c:	4b36      	ldr	r3, [pc, #216]	; (8007a28 <publish_from_timer+0x124>)
 800794e:	735a      	strb	r2, [r3, #13]
        }
        if (device_send.state != device_check.state)
 8007950:	4b35      	ldr	r3, [pc, #212]	; (8007a28 <publish_from_timer+0x124>)
 8007952:	789a      	ldrb	r2, [r3, #2]
 8007954:	4b35      	ldr	r3, [pc, #212]	; (8007a2c <publish_from_timer+0x128>)
 8007956:	789b      	ldrb	r3, [r3, #2]
 8007958:	429a      	cmp	r2, r3
 800795a:	d011      	beq.n	8007980 <publish_from_timer+0x7c>
        {
            iSendState = true;
 800795c:	4b38      	ldr	r3, [pc, #224]	; (8007a40 <publish_from_timer+0x13c>)
 800795e:	2201      	movs	r2, #1
 8007960:	701a      	strb	r2, [r3, #0]
            publish_message(state_topic, on_off_str_send[device->state]);
 8007962:	4b34      	ldr	r3, [pc, #208]	; (8007a34 <publish_from_timer+0x130>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	789b      	ldrb	r3, [r3, #2]
 8007968:	461a      	mov	r2, r3
 800796a:	4b36      	ldr	r3, [pc, #216]	; (8007a44 <publish_from_timer+0x140>)
 800796c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007970:	4619      	mov	r1, r3
 8007972:	4835      	ldr	r0, [pc, #212]	; (8007a48 <publish_from_timer+0x144>)
 8007974:	f7fe fe80 	bl	8006678 <publish_message>
            device_send.state = device_check.state;
 8007978:	4b2c      	ldr	r3, [pc, #176]	; (8007a2c <publish_from_timer+0x128>)
 800797a:	789a      	ldrb	r2, [r3, #2]
 800797c:	4b2a      	ldr	r3, [pc, #168]	; (8007a28 <publish_from_timer+0x124>)
 800797e:	709a      	strb	r2, [r3, #2]
        }
        if (device_send.inflow_speed != device_check.inflow_speed)
 8007980:	4b29      	ldr	r3, [pc, #164]	; (8007a28 <publish_from_timer+0x124>)
 8007982:	7bda      	ldrb	r2, [r3, #15]
 8007984:	4b29      	ldr	r3, [pc, #164]	; (8007a2c <publish_from_timer+0x128>)
 8007986:	7bdb      	ldrb	r3, [r3, #15]
 8007988:	429a      	cmp	r2, r3
 800798a:	d012      	beq.n	80079b2 <publish_from_timer+0xae>
        {
            iSendSpeed = true;
 800798c:	4b2f      	ldr	r3, [pc, #188]	; (8007a4c <publish_from_timer+0x148>)
 800798e:	2201      	movs	r2, #1
 8007990:	701a      	strb	r2, [r3, #0]
            sprintf(speeds_str_send, "%i", device->inflow_speed);
 8007992:	4b28      	ldr	r3, [pc, #160]	; (8007a34 <publish_from_timer+0x130>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	7bdb      	ldrb	r3, [r3, #15]
 8007998:	461a      	mov	r2, r3
 800799a:	492d      	ldr	r1, [pc, #180]	; (8007a50 <publish_from_timer+0x14c>)
 800799c:	482d      	ldr	r0, [pc, #180]	; (8007a54 <publish_from_timer+0x150>)
 800799e:	f01d ffe9 	bl	8025974 <siprintf>
            publish_message(speed_topic, speeds_str_send);
 80079a2:	492c      	ldr	r1, [pc, #176]	; (8007a54 <publish_from_timer+0x150>)
 80079a4:	482c      	ldr	r0, [pc, #176]	; (8007a58 <publish_from_timer+0x154>)
 80079a6:	f7fe fe67 	bl	8006678 <publish_message>
            device_send.inflow_speed = device_check.inflow_speed;
 80079aa:	4b20      	ldr	r3, [pc, #128]	; (8007a2c <publish_from_timer+0x128>)
 80079ac:	7bda      	ldrb	r2, [r3, #15]
 80079ae:	4b1e      	ldr	r3, [pc, #120]	; (8007a28 <publish_from_timer+0x124>)
 80079b0:	73da      	strb	r2, [r3, #15]
        }
        if (heaters_send.ten.temp_limit != heaters_check.ten.temp_limit)
 80079b2:	4b2a      	ldr	r3, [pc, #168]	; (8007a5c <publish_from_timer+0x158>)
 80079b4:	685a      	ldr	r2, [r3, #4]
 80079b6:	4b2a      	ldr	r3, [pc, #168]	; (8007a60 <publish_from_timer+0x15c>)
 80079b8:	685b      	ldr	r3, [r3, #4]
 80079ba:	429a      	cmp	r2, r3
 80079bc:	d012      	beq.n	80079e4 <publish_from_timer+0xe0>
        {
            iSendTemp = true;
 80079be:	4b29      	ldr	r3, [pc, #164]	; (8007a64 <publish_from_timer+0x160>)
 80079c0:	2201      	movs	r2, #1
 80079c2:	701a      	strb	r2, [r3, #0]
            sprintf(temp_str_send, "%i", heaters->ten.temp_limit);
 80079c4:	4b28      	ldr	r3, [pc, #160]	; (8007a68 <publish_from_timer+0x164>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	685b      	ldr	r3, [r3, #4]
 80079ca:	461a      	mov	r2, r3
 80079cc:	4920      	ldr	r1, [pc, #128]	; (8007a50 <publish_from_timer+0x14c>)
 80079ce:	4827      	ldr	r0, [pc, #156]	; (8007a6c <publish_from_timer+0x168>)
 80079d0:	f01d ffd0 	bl	8025974 <siprintf>
            publish_message(temp_limit_topic, temp_str_send);
 80079d4:	4925      	ldr	r1, [pc, #148]	; (8007a6c <publish_from_timer+0x168>)
 80079d6:	4826      	ldr	r0, [pc, #152]	; (8007a70 <publish_from_timer+0x16c>)
 80079d8:	f7fe fe4e 	bl	8006678 <publish_message>
            heaters_send.ten.temp_limit = heaters_check.ten.temp_limit;
 80079dc:	4b20      	ldr	r3, [pc, #128]	; (8007a60 <publish_from_timer+0x15c>)
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	4a1e      	ldr	r2, [pc, #120]	; (8007a5c <publish_from_timer+0x158>)
 80079e2:	6053      	str	r3, [r2, #4]
        }
    }

    if (send_array_device[CAPABILITIES])
 80079e4:	4b23      	ldr	r3, [pc, #140]	; (8007a74 <publish_from_timer+0x170>)
 80079e6:	781b      	ldrb	r3, [r3, #0]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d004      	beq.n	80079f6 <publish_from_timer+0xf2>
    {
        publish_capabilities();
 80079ec:	f7ff fc94 	bl	8007318 <publish_capabilities>
        send_array_device[CAPABILITIES] = false;
 80079f0:	4b20      	ldr	r3, [pc, #128]	; (8007a74 <publish_from_timer+0x170>)
 80079f2:	2200      	movs	r2, #0
 80079f4:	701a      	strb	r2, [r3, #0]
    }
    if (send_array_device[SETTINGS])
 80079f6:	4b1f      	ldr	r3, [pc, #124]	; (8007a74 <publish_from_timer+0x170>)
 80079f8:	785b      	ldrb	r3, [r3, #1]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d004      	beq.n	8007a08 <publish_from_timer+0x104>
    {
        send_array_device[SETTINGS] = false;
 80079fe:	4b1d      	ldr	r3, [pc, #116]	; (8007a74 <publish_from_timer+0x170>)
 8007a00:	2200      	movs	r2, #0
 8007a02:	705a      	strb	r2, [r3, #1]
        publish_settings();
 8007a04:	f7ff fcce 	bl	80073a4 <publish_settings>
    }
    if (send_array_device[FAULTS])
 8007a08:	4b1a      	ldr	r3, [pc, #104]	; (8007a74 <publish_from_timer+0x170>)
 8007a0a:	78db      	ldrb	r3, [r3, #3]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d004      	beq.n	8007a1a <publish_from_timer+0x116>
    {
        send_array_device[FAULTS] = false;
 8007a10:	4b18      	ldr	r3, [pc, #96]	; (8007a74 <publish_from_timer+0x170>)
 8007a12:	2200      	movs	r2, #0
 8007a14:	70da      	strb	r2, [r3, #3]
        publish_errors();
 8007a16:	f7ff fcdf 	bl	80073d8 <publish_errors>
    }
}
 8007a1a:	bf00      	nop
 8007a1c:	bd80      	pop	{r7, pc}
 8007a1e:	bf00      	nop
 8007a20:	20013fea 	.word	0x20013fea
 8007a24:	20013a7c 	.word	0x20013a7c
 8007a28:	20013a5c 	.word	0x20013a5c
 8007a2c:	200139d0 	.word	0x200139d0
 8007a30:	200139ca 	.word	0x200139ca
 8007a34:	20013a78 	.word	0x20013a78
 8007a38:	10000034 	.word	0x10000034
 8007a3c:	20013df4 	.word	0x20013df4
 8007a40:	200139c8 	.word	0x200139c8
 8007a44:	1000003c 	.word	0x1000003c
 8007a48:	20013ca4 	.word	0x20013ca4
 8007a4c:	200139c9 	.word	0x200139c9
 8007a50:	0802a578 	.word	0x0802a578
 8007a54:	20013f8c 	.word	0x20013f8c
 8007a58:	20013d44 	.word	0x20013d44
 8007a5c:	20013938 	.word	0x20013938
 8007a60:	200139f0 	.word	0x200139f0
 8007a64:	20013a28 	.word	0x20013a28
 8007a68:	200139cc 	.word	0x200139cc
 8007a6c:	20013f98 	.word	0x20013f98
 8007a70:	20013bf4 	.word	0x20013bf4
 8007a74:	20000050 	.word	0x20000050

08007a78 <check_param_u8>:

bool check_param_u8(uint8_t *param_send, uint8_t *param, char *key)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b086      	sub	sp, #24
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	60f8      	str	r0, [r7, #12]
 8007a80:	60b9      	str	r1, [r7, #8]
 8007a82:	607a      	str	r2, [r7, #4]
    bool check = false;
 8007a84:	2300      	movs	r3, #0
 8007a86:	75fb      	strb	r3, [r7, #23]
    if (*param_send != *param)
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	781a      	ldrb	r2, [r3, #0]
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	781b      	ldrb	r3, [r3, #0]
 8007a90:	429a      	cmp	r2, r3
 8007a92:	d01a      	beq.n	8007aca <check_param_u8+0x52>
    {
        DEBUG_SEND(" Param |%s| not equal { %i != %i }\n", key, *param_send, *param);
        *param_send = *param;
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	781a      	ldrb	r2, [r3, #0]
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	701a      	strb	r2, [r3, #0]
        check = true;
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	75fb      	strb	r3, [r7, #23]
        if (!start_timer_f)
 8007aa0:	4b0c      	ldr	r3, [pc, #48]	; (8007ad4 <check_param_u8+0x5c>)
 8007aa2:	781b      	ldrb	r3, [r3, #0]
 8007aa4:	f083 0301 	eor.w	r3, r3, #1
 8007aa8:	b2db      	uxtb	r3, r3
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d008      	beq.n	8007ac0 <check_param_u8+0x48>
        {
            DEBUG_SEND("Timer start 5 sec\n");
            start_timer_f = true;
 8007aae:	4b09      	ldr	r3, [pc, #36]	; (8007ad4 <check_param_u8+0x5c>)
 8007ab0:	2201      	movs	r2, #1
 8007ab2:	701a      	strb	r2, [r3, #0]
            server_time = HAL_GetTick();
 8007ab4:	f003 f8de 	bl	800ac74 <HAL_GetTick>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	4a07      	ldr	r2, [pc, #28]	; (8007ad8 <check_param_u8+0x60>)
 8007abc:	6013      	str	r3, [r2, #0]
 8007abe:	e004      	b.n	8007aca <check_param_u8+0x52>
        }
        else
        {
            DEBUG_SEND("Timer restart 5 sec\n");
            server_time = HAL_GetTick();
 8007ac0:	f003 f8d8 	bl	800ac74 <HAL_GetTick>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	4a04      	ldr	r2, [pc, #16]	; (8007ad8 <check_param_u8+0x60>)
 8007ac8:	6013      	str	r3, [r2, #0]
        }
    }
    return check;
 8007aca:	7dfb      	ldrb	r3, [r7, #23]
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	3718      	adds	r7, #24
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}
 8007ad4:	20013fea 	.word	0x20013fea
 8007ad8:	2000005c 	.word	0x2000005c

08007adc <send_server>:

void send_server()
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	af00      	add	r7, sp, #0
	if (start_timer_f && (HAL_GetTick() - server_time) > 5000)
 8007ae0:	4b48      	ldr	r3, [pc, #288]	; (8007c04 <send_server+0x128>)
 8007ae2:	781b      	ldrb	r3, [r3, #0]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d00b      	beq.n	8007b00 <send_server+0x24>
 8007ae8:	f003 f8c4 	bl	800ac74 <HAL_GetTick>
 8007aec:	4602      	mov	r2, r0
 8007aee:	4b46      	ldr	r3, [pc, #280]	; (8007c08 <send_server+0x12c>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	1ad3      	subs	r3, r2, r3
 8007af4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d901      	bls.n	8007b00 <send_server+0x24>
		publish_from_timer();
 8007afc:	f7ff ff02 	bl	8007904 <publish_from_timer>

    if (check_param_u8(&device_check.state, &device->state, "State") ||
 8007b00:	4b42      	ldr	r3, [pc, #264]	; (8007c0c <send_server+0x130>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	3302      	adds	r3, #2
 8007b06:	4a42      	ldr	r2, [pc, #264]	; (8007c10 <send_server+0x134>)
 8007b08:	4619      	mov	r1, r3
 8007b0a:	4842      	ldr	r0, [pc, #264]	; (8007c14 <send_server+0x138>)
 8007b0c:	f7ff ffb4 	bl	8007a78 <check_param_u8>
 8007b10:	4603      	mov	r3, r0
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d120      	bne.n	8007b58 <send_server+0x7c>
        check_param_u8(&device_check.inflow_speed, &device->inflow_speed, "Speed") ||
 8007b16:	4b3d      	ldr	r3, [pc, #244]	; (8007c0c <send_server+0x130>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	330f      	adds	r3, #15
 8007b1c:	4a3e      	ldr	r2, [pc, #248]	; (8007c18 <send_server+0x13c>)
 8007b1e:	4619      	mov	r1, r3
 8007b20:	483e      	ldr	r0, [pc, #248]	; (8007c1c <send_server+0x140>)
 8007b22:	f7ff ffa9 	bl	8007a78 <check_param_u8>
 8007b26:	4603      	mov	r3, r0
    if (check_param_u8(&device_check.state, &device->state, "State") ||
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d115      	bne.n	8007b58 <send_server+0x7c>
        check_param_u8(&device_check.mode, &device->mode, "Mode") ||
 8007b2c:	4b37      	ldr	r3, [pc, #220]	; (8007c0c <send_server+0x130>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	330d      	adds	r3, #13
 8007b32:	4a3b      	ldr	r2, [pc, #236]	; (8007c20 <send_server+0x144>)
 8007b34:	4619      	mov	r1, r3
 8007b36:	483b      	ldr	r0, [pc, #236]	; (8007c24 <send_server+0x148>)
 8007b38:	f7ff ff9e 	bl	8007a78 <check_param_u8>
 8007b3c:	4603      	mov	r3, r0
        check_param_u8(&device_check.inflow_speed, &device->inflow_speed, "Speed") ||
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d10a      	bne.n	8007b58 <send_server+0x7c>
        check_param_u8(&heaters_check.ten.temp_limit, &heaters->ten.temp_limit, "Temp"))
 8007b42:	4b39      	ldr	r3, [pc, #228]	; (8007c28 <send_server+0x14c>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	3304      	adds	r3, #4
 8007b48:	4a38      	ldr	r2, [pc, #224]	; (8007c2c <send_server+0x150>)
 8007b4a:	4619      	mov	r1, r3
 8007b4c:	4838      	ldr	r0, [pc, #224]	; (8007c30 <send_server+0x154>)
 8007b4e:	f7ff ff93 	bl	8007a78 <check_param_u8>
 8007b52:	4603      	mov	r3, r0
        check_param_u8(&device_check.mode, &device->mode, "Mode") ||
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d002      	beq.n	8007b5e <send_server+0x82>

        send_array_device[CAPABILITIES] = true;
 8007b58:	4b36      	ldr	r3, [pc, #216]	; (8007c34 <send_server+0x158>)
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	701a      	strb	r2, [r3, #0]

    if (check_param_u8(&device_check.error_temp_hot, &device->error_temp_hot, "temp_hot") ||
 8007b5e:	4b2b      	ldr	r3, [pc, #172]	; (8007c0c <send_server+0x130>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	3303      	adds	r3, #3
 8007b64:	4a34      	ldr	r2, [pc, #208]	; (8007c38 <send_server+0x15c>)
 8007b66:	4619      	mov	r1, r3
 8007b68:	4834      	ldr	r0, [pc, #208]	; (8007c3c <send_server+0x160>)
 8007b6a:	f7ff ff85 	bl	8007a78 <check_param_u8>
 8007b6e:	4603      	mov	r3, r0
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d141      	bne.n	8007bf8 <send_server+0x11c>
        check_param_u8(&device_check.error_stop_hot, &device->error_stop_hot, "stop_hot") ||
 8007b74:	4b25      	ldr	r3, [pc, #148]	; (8007c0c <send_server+0x130>)
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	3305      	adds	r3, #5
 8007b7a:	4a31      	ldr	r2, [pc, #196]	; (8007c40 <send_server+0x164>)
 8007b7c:	4619      	mov	r1, r3
 8007b7e:	4831      	ldr	r0, [pc, #196]	; (8007c44 <send_server+0x168>)
 8007b80:	f7ff ff7a 	bl	8007a78 <check_param_u8>
 8007b84:	4603      	mov	r3, r0
    if (check_param_u8(&device_check.error_temp_hot, &device->error_temp_hot, "temp_hot") ||
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d136      	bne.n	8007bf8 <send_server+0x11c>
        check_param_u8(&device_check.error_temp_cold, &device->error_temp_cold, "temp_cold") ||
 8007b8a:	4b20      	ldr	r3, [pc, #128]	; (8007c0c <send_server+0x130>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	3304      	adds	r3, #4
 8007b90:	4a2d      	ldr	r2, [pc, #180]	; (8007c48 <send_server+0x16c>)
 8007b92:	4619      	mov	r1, r3
 8007b94:	482d      	ldr	r0, [pc, #180]	; (8007c4c <send_server+0x170>)
 8007b96:	f7ff ff6f 	bl	8007a78 <check_param_u8>
 8007b9a:	4603      	mov	r3, r0
        check_param_u8(&device_check.error_stop_hot, &device->error_stop_hot, "stop_hot") ||
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d12b      	bne.n	8007bf8 <send_server+0x11c>
        check_param_u8(&device_check.error_stop_cold, &device->error_stop_cold, "stop_cold") ||
 8007ba0:	4b1a      	ldr	r3, [pc, #104]	; (8007c0c <send_server+0x130>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	3306      	adds	r3, #6
 8007ba6:	4a2a      	ldr	r2, [pc, #168]	; (8007c50 <send_server+0x174>)
 8007ba8:	4619      	mov	r1, r3
 8007baa:	482a      	ldr	r0, [pc, #168]	; (8007c54 <send_server+0x178>)
 8007bac:	f7ff ff64 	bl	8007a78 <check_param_u8>
 8007bb0:	4603      	mov	r3, r0
        check_param_u8(&device_check.error_temp_cold, &device->error_temp_cold, "temp_cold") ||
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d120      	bne.n	8007bf8 <send_server+0x11c>
        check_param_u8(&device_check.error_ds18_bus, &device->error_ds18_bus, "DS18_bus") ||
 8007bb6:	4b15      	ldr	r3, [pc, #84]	; (8007c0c <send_server+0x130>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	3307      	adds	r3, #7
 8007bbc:	4a26      	ldr	r2, [pc, #152]	; (8007c58 <send_server+0x17c>)
 8007bbe:	4619      	mov	r1, r3
 8007bc0:	4826      	ldr	r0, [pc, #152]	; (8007c5c <send_server+0x180>)
 8007bc2:	f7ff ff59 	bl	8007a78 <check_param_u8>
 8007bc6:	4603      	mov	r3, r0
        check_param_u8(&device_check.error_stop_cold, &device->error_stop_cold, "stop_cold") ||
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d115      	bne.n	8007bf8 <send_server+0x11c>
        check_param_u8(&device_check.error_ds18_lack, &device->error_ds18_lack, "DS18_lack") ||
 8007bcc:	4b0f      	ldr	r3, [pc, #60]	; (8007c0c <send_server+0x130>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	3308      	adds	r3, #8
 8007bd2:	4a23      	ldr	r2, [pc, #140]	; (8007c60 <send_server+0x184>)
 8007bd4:	4619      	mov	r1, r3
 8007bd6:	4823      	ldr	r0, [pc, #140]	; (8007c64 <send_server+0x188>)
 8007bd8:	f7ff ff4e 	bl	8007a78 <check_param_u8>
 8007bdc:	4603      	mov	r3, r0
        check_param_u8(&device_check.error_ds18_bus, &device->error_ds18_bus, "DS18_bus") ||
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d10a      	bne.n	8007bf8 <send_server+0x11c>
        check_param_u8(&device_check.remote_control.error, &device->remote_control.error, "remote_control"))
 8007be2:	4b0a      	ldr	r3, [pc, #40]	; (8007c0c <send_server+0x130>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	330b      	adds	r3, #11
 8007be8:	4a1f      	ldr	r2, [pc, #124]	; (8007c68 <send_server+0x18c>)
 8007bea:	4619      	mov	r1, r3
 8007bec:	481f      	ldr	r0, [pc, #124]	; (8007c6c <send_server+0x190>)
 8007bee:	f7ff ff43 	bl	8007a78 <check_param_u8>
 8007bf2:	4603      	mov	r3, r0
        check_param_u8(&device_check.error_ds18_lack, &device->error_ds18_lack, "DS18_lack") ||
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d002      	beq.n	8007bfe <send_server+0x122>

        send_array_device[FAULTS] = true;
 8007bf8:	4b0e      	ldr	r3, [pc, #56]	; (8007c34 <send_server+0x158>)
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	70da      	strb	r2, [r3, #3]
}
 8007bfe:	bf00      	nop
 8007c00:	bd80      	pop	{r7, pc}
 8007c02:	bf00      	nop
 8007c04:	20013fea 	.word	0x20013fea
 8007c08:	2000005c 	.word	0x2000005c
 8007c0c:	20013a78 	.word	0x20013a78
 8007c10:	0802a57c 	.word	0x0802a57c
 8007c14:	200139d2 	.word	0x200139d2
 8007c18:	0802a584 	.word	0x0802a584
 8007c1c:	200139df 	.word	0x200139df
 8007c20:	0802a58c 	.word	0x0802a58c
 8007c24:	200139dd 	.word	0x200139dd
 8007c28:	200139cc 	.word	0x200139cc
 8007c2c:	0802a594 	.word	0x0802a594
 8007c30:	200139f4 	.word	0x200139f4
 8007c34:	20000050 	.word	0x20000050
 8007c38:	0802a59c 	.word	0x0802a59c
 8007c3c:	200139d3 	.word	0x200139d3
 8007c40:	0802a5a8 	.word	0x0802a5a8
 8007c44:	200139d5 	.word	0x200139d5
 8007c48:	0802a5b4 	.word	0x0802a5b4
 8007c4c:	200139d4 	.word	0x200139d4
 8007c50:	0802a5c0 	.word	0x0802a5c0
 8007c54:	200139d6 	.word	0x200139d6
 8007c58:	0802a5cc 	.word	0x0802a5cc
 8007c5c:	200139d7 	.word	0x200139d7
 8007c60:	0802a5d8 	.word	0x0802a5d8
 8007c64:	200139d8 	.word	0x200139d8
 8007c68:	0802a5e4 	.word	0x0802a5e4
 8007c6c:	200139db 	.word	0x200139db

08007c70 <set_sensor_value>:
    check_js_param_u8(data_json, "speed_num", &speed_num);
    check_js_param_u8(data_json, "value", &device->speed_arr[speed_num]);
}

void set_sensor_value(cJSON *data_json)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b082      	sub	sp, #8
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]

    if (check_js_param_double(data_json, "out", &sensors_data->out))
 8007c78:	4b10      	ldr	r3, [pc, #64]	; (8007cbc <set_sensor_value+0x4c>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	461a      	mov	r2, r3
 8007c7e:	4910      	ldr	r1, [pc, #64]	; (8007cc0 <set_sensor_value+0x50>)
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f7fe f80f 	bl	8005ca4 <check_js_param_double>
 8007c86:	4603      	mov	r3, r0
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d003      	beq.n	8007c94 <set_sensor_value+0x24>
        sensors_data->out_state = true;
 8007c8c:	4b0b      	ldr	r3, [pc, #44]	; (8007cbc <set_sensor_value+0x4c>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	2201      	movs	r2, #1
 8007c92:	771a      	strb	r2, [r3, #28]
    if (check_js_param_double(data_json, "in", &sensors_data->in))
 8007c94:	4b09      	ldr	r3, [pc, #36]	; (8007cbc <set_sensor_value+0x4c>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	3308      	adds	r3, #8
 8007c9a:	461a      	mov	r2, r3
 8007c9c:	4909      	ldr	r1, [pc, #36]	; (8007cc4 <set_sensor_value+0x54>)
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f7fe f800 	bl	8005ca4 <check_js_param_double>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d003      	beq.n	8007cb2 <set_sensor_value+0x42>
        sensors_data->in_state = true;
 8007caa:	4b04      	ldr	r3, [pc, #16]	; (8007cbc <set_sensor_value+0x4c>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	2201      	movs	r2, #1
 8007cb0:	775a      	strb	r2, [r3, #29]
    DEBUG_MQTT("Set out temp %0.1f\n", sensors_data->out);
    DEBUG_MQTT("Set in temp %0.1f\n", sensors_data->in);
}
 8007cb2:	bf00      	nop
 8007cb4:	3708      	adds	r7, #8
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd80      	pop	{r7, pc}
 8007cba:	bf00      	nop
 8007cbc:	20013a80 	.word	0x20013a80
 8007cc0:	0802a608 	.word	0x0802a608
 8007cc4:	0802a60c 	.word	0x0802a60c

08007cc8 <firmware_handler>:
    if (error != NULL && state != NULL)
        DEBUG_MQTT("Set error %s state %i\n", error->valuestring, state->valueint);
}

void firmware_handler(cJSON *firmware_js)
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b083      	sub	sp, #12
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
//                start_update_firmware_isr();
//        }
//        else
//            start_update_firmware_isr();
//    }
}
 8007cd0:	bf00      	nop
 8007cd2:	370c      	adds	r7, #12
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cda:	4770      	bx	lr

08007cdc <error_handler>:

void error_handler(cJSON *error_js)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b082      	sub	sp, #8
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
    if (check_js_param_u8(error_js, "temp_hot", &device->error_temp_hot))
 8007ce4:	4b1d      	ldr	r3, [pc, #116]	; (8007d5c <error_handler+0x80>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	3303      	adds	r3, #3
 8007cea:	461a      	mov	r2, r3
 8007cec:	491c      	ldr	r1, [pc, #112]	; (8007d60 <error_handler+0x84>)
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f7fd ff24 	bl	8005b3c <check_js_param_u8>
    {
    }
    if (check_js_param_u8(error_js, "stop_hot", &device->error_stop_hot))
 8007cf4:	4b19      	ldr	r3, [pc, #100]	; (8007d5c <error_handler+0x80>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	3305      	adds	r3, #5
 8007cfa:	461a      	mov	r2, r3
 8007cfc:	4919      	ldr	r1, [pc, #100]	; (8007d64 <error_handler+0x88>)
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	f7fd ff1c 	bl	8005b3c <check_js_param_u8>
    {
    }
    if (check_js_param_u8(error_js, "temp_cold", &device->error_temp_cold))
 8007d04:	4b15      	ldr	r3, [pc, #84]	; (8007d5c <error_handler+0x80>)
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	3304      	adds	r3, #4
 8007d0a:	461a      	mov	r2, r3
 8007d0c:	4916      	ldr	r1, [pc, #88]	; (8007d68 <error_handler+0x8c>)
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f7fd ff14 	bl	8005b3c <check_js_param_u8>
    {
    }
    if (check_js_param_u8(error_js, "stop_cold", &device->error_stop_cold))
 8007d14:	4b11      	ldr	r3, [pc, #68]	; (8007d5c <error_handler+0x80>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	3306      	adds	r3, #6
 8007d1a:	461a      	mov	r2, r3
 8007d1c:	4913      	ldr	r1, [pc, #76]	; (8007d6c <error_handler+0x90>)
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f7fd ff0c 	bl	8005b3c <check_js_param_u8>
    {
    }
    if (cJSON_GetObjectItem(error_js, "reset_error") != NULL)
 8007d24:	4912      	ldr	r1, [pc, #72]	; (8007d70 <error_handler+0x94>)
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f7fd fd43 	bl	80057b2 <cJSON_GetObjectItem>
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d00f      	beq.n	8007d52 <error_handler+0x76>
    {
        device->error_temp_hot = false;
 8007d32:	4b0a      	ldr	r3, [pc, #40]	; (8007d5c <error_handler+0x80>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	2200      	movs	r2, #0
 8007d38:	70da      	strb	r2, [r3, #3]
        device->error_stop_hot = false;
 8007d3a:	4b08      	ldr	r3, [pc, #32]	; (8007d5c <error_handler+0x80>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	715a      	strb	r2, [r3, #5]
        device->error_temp_cold = false;
 8007d42:	4b06      	ldr	r3, [pc, #24]	; (8007d5c <error_handler+0x80>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	2200      	movs	r2, #0
 8007d48:	711a      	strb	r2, [r3, #4]
        device->error_stop_cold = false;
 8007d4a:	4b04      	ldr	r3, [pc, #16]	; (8007d5c <error_handler+0x80>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	719a      	strb	r2, [r3, #6]
    }
}
 8007d52:	bf00      	nop
 8007d54:	3708      	adds	r7, #8
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}
 8007d5a:	bf00      	nop
 8007d5c:	20013a78 	.word	0x20013a78
 8007d60:	0802a624 	.word	0x0802a624
 8007d64:	0802a630 	.word	0x0802a630
 8007d68:	0802a63c 	.word	0x0802a63c
 8007d6c:	0802a648 	.word	0x0802a648
 8007d70:	0802a654 	.word	0x0802a654

08007d74 <reset_handler>:
void reset_handler(cJSON *reset_js)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b090      	sub	sp, #64	; 0x40
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
    char reset_option[50];
    if (check_js_param_char(reset_js, "wireless", &reset_option))
 8007d7c:	f107 030c 	add.w	r3, r7, #12
 8007d80:	461a      	mov	r2, r3
 8007d82:	491a      	ldr	r1, [pc, #104]	; (8007dec <reset_handler+0x78>)
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f7fd ffb1 	bl	8005cec <check_js_param_char>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d001      	beq.n	8007d94 <reset_handler+0x20>
    {
        first_init_wireless();
 8007d90:	f001 f962 	bl	8009058 <first_init_wireless>
    }
    if (check_js_param_char(reset_js, "device", &reset_option))
 8007d94:	f107 030c 	add.w	r3, r7, #12
 8007d98:	461a      	mov	r2, r3
 8007d9a:	4915      	ldr	r1, [pc, #84]	; (8007df0 <reset_handler+0x7c>)
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f7fd ffa5 	bl	8005cec <check_js_param_char>
 8007da2:	4603      	mov	r3, r0
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d001      	beq.n	8007dac <reset_handler+0x38>
    {
        first_init_device();
 8007da8:	f001 f9b6 	bl	8009118 <first_init_device>
    }
    if (check_js_param_char(reset_js, "heaters", &reset_option))
 8007dac:	f107 030c 	add.w	r3, r7, #12
 8007db0:	461a      	mov	r2, r3
 8007db2:	4910      	ldr	r1, [pc, #64]	; (8007df4 <reset_handler+0x80>)
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f7fd ff99 	bl	8005cec <check_js_param_char>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d001      	beq.n	8007dc4 <reset_handler+0x50>
    {
        first_init_heaters();
 8007dc0:	f001 f90e 	bl	8008fe0 <first_init_heaters>
    }
    if (check_js_param_char(reset_js, "all", &reset_option))
 8007dc4:	f107 030c 	add.w	r3, r7, #12
 8007dc8:	461a      	mov	r2, r3
 8007dca:	490b      	ldr	r1, [pc, #44]	; (8007df8 <reset_handler+0x84>)
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f7fd ff8d 	bl	8005cec <check_js_param_char>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d005      	beq.n	8007de4 <reset_handler+0x70>
    {
        first_init_device();
 8007dd8:	f001 f99e 	bl	8009118 <first_init_device>
        first_init_heaters();
 8007ddc:	f001 f900 	bl	8008fe0 <first_init_heaters>
        first_init_wireless();
 8007de0:	f001 f93a 	bl	8009058 <first_init_wireless>
    }
}
 8007de4:	bf00      	nop
 8007de6:	3740      	adds	r7, #64	; 0x40
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}
 8007dec:	0802a660 	.word	0x0802a660
 8007df0:	0802a66c 	.word	0x0802a66c
 8007df4:	0802a674 	.word	0x0802a674
 8007df8:	0802a67c 	.word	0x0802a67c

08007dfc <logging_handler>:

void logging_handler(cJSON *logging_js)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b090      	sub	sp, #64	; 0x40
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
    char log_type[50];
    check_js_param_char(logging_js, "type", log_type);
 8007e04:	f107 030c 	add.w	r3, r7, #12
 8007e08:	461a      	mov	r2, r3
 8007e0a:	491b      	ldr	r1, [pc, #108]	; (8007e78 <logging_handler+0x7c>)
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f7fd ff6d 	bl	8005cec <check_js_param_char>
    if (strcmp("system", log_type) == 0)
 8007e12:	f107 030c 	add.w	r3, r7, #12
 8007e16:	4619      	mov	r1, r3
 8007e18:	4818      	ldr	r0, [pc, #96]	; (8007e7c <logging_handler+0x80>)
 8007e1a:	f7f8 f9d9 	bl	80001d0 <strcmp>
 8007e1e:	4603      	mov	r3, r0
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d102      	bne.n	8007e2a <logging_handler+0x2e>
    {
        publish_system();
 8007e24:	f7ff fa9e 	bl	8007364 <publish_system>
    }
    else if (strcmp("extra_options", log_type) == 0)
    {
        publish_extra_options();
    }
}
 8007e28:	e022      	b.n	8007e70 <logging_handler+0x74>
    else if (strcmp("settings", log_type) == 0)
 8007e2a:	f107 030c 	add.w	r3, r7, #12
 8007e2e:	4619      	mov	r1, r3
 8007e30:	4813      	ldr	r0, [pc, #76]	; (8007e80 <logging_handler+0x84>)
 8007e32:	f7f8 f9cd 	bl	80001d0 <strcmp>
 8007e36:	4603      	mov	r3, r0
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d102      	bne.n	8007e42 <logging_handler+0x46>
        publish_settings();
 8007e3c:	f7ff fab2 	bl	80073a4 <publish_settings>
}
 8007e40:	e016      	b.n	8007e70 <logging_handler+0x74>
    else if (strcmp("capabilities", log_type) == 0)
 8007e42:	f107 030c 	add.w	r3, r7, #12
 8007e46:	4619      	mov	r1, r3
 8007e48:	480e      	ldr	r0, [pc, #56]	; (8007e84 <logging_handler+0x88>)
 8007e4a:	f7f8 f9c1 	bl	80001d0 <strcmp>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d102      	bne.n	8007e5a <logging_handler+0x5e>
        publish_capabilities();
 8007e54:	f7ff fa60 	bl	8007318 <publish_capabilities>
}
 8007e58:	e00a      	b.n	8007e70 <logging_handler+0x74>
    else if (strcmp("extra_options", log_type) == 0)
 8007e5a:	f107 030c 	add.w	r3, r7, #12
 8007e5e:	4619      	mov	r1, r3
 8007e60:	4809      	ldr	r0, [pc, #36]	; (8007e88 <logging_handler+0x8c>)
 8007e62:	f7f8 f9b5 	bl	80001d0 <strcmp>
 8007e66:	4603      	mov	r3, r0
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d101      	bne.n	8007e70 <logging_handler+0x74>
        publish_extra_options();
 8007e6c:	f7ff face 	bl	800740c <publish_extra_options>
}
 8007e70:	bf00      	nop
 8007e72:	3740      	adds	r7, #64	; 0x40
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}
 8007e78:	0802a680 	.word	0x0802a680
 8007e7c:	0802a688 	.word	0x0802a688
 8007e80:	0802a690 	.word	0x0802a690
 8007e84:	0802a69c 	.word	0x0802a69c
 8007e88:	0802a6ac 	.word	0x0802a6ac

08007e8c <set_extra_options_handler>:

void set_extra_options_handler(cJSON *data_json)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b082      	sub	sp, #8
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
    check_js_param_u8(data_json, "deviation", &device->extra_options.deviation);
 8007e94:	4b0e      	ldr	r3, [pc, #56]	; (8007ed0 <set_extra_options_handler+0x44>)
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	3319      	adds	r3, #25
 8007e9a:	461a      	mov	r2, r3
 8007e9c:	490d      	ldr	r1, [pc, #52]	; (8007ed4 <set_extra_options_handler+0x48>)
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f7fd fe4c 	bl	8005b3c <check_js_param_u8>
    check_js_param_u8(data_json, "check_time", &device->extra_options.check_time);
 8007ea4:	4b0a      	ldr	r3, [pc, #40]	; (8007ed0 <set_extra_options_handler+0x44>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	331a      	adds	r3, #26
 8007eaa:	461a      	mov	r2, r3
 8007eac:	490a      	ldr	r1, [pc, #40]	; (8007ed8 <set_extra_options_handler+0x4c>)
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f7fd fe44 	bl	8005b3c <check_js_param_u8>
    check_js_param_u8(data_json, "step_pwm", &device->extra_options.step_pwm);
 8007eb4:	4b06      	ldr	r3, [pc, #24]	; (8007ed0 <set_extra_options_handler+0x44>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	331b      	adds	r3, #27
 8007eba:	461a      	mov	r2, r3
 8007ebc:	4907      	ldr	r1, [pc, #28]	; (8007edc <set_extra_options_handler+0x50>)
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f7fd fe3c 	bl	8005b3c <check_js_param_u8>
    DEBUG_MQTT("Set deviation %i\n", device->extra_options.deviation);
    DEBUG_MQTT("Set check_time %i\n", device->extra_options.check_time);
    DEBUG_MQTT("Set step_pwm %i\n", device->extra_options.step_pwm);
    write_device_params();
 8007ec4:	f001 f9c0 	bl	8009248 <write_device_params>
}
 8007ec8:	bf00      	nop
 8007eca:	3708      	adds	r7, #8
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd80      	pop	{r7, pc}
 8007ed0:	20013a78 	.word	0x20013a78
 8007ed4:	0802a6bc 	.word	0x0802a6bc
 8007ed8:	0802a6c8 	.word	0x0802a6c8
 8007edc:	0802a6d4 	.word	0x0802a6d4

08007ee0 <system_topic_handler>:

void system_topic_handler(char *data)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b094      	sub	sp, #80	; 0x50
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
    cJSON *data_json = cJSON_Parse(data);
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f7fc fde9 	bl	8004ac0 <cJSON_Parse>
 8007eee:	6438      	str	r0, [r7, #64]	; 0x40
    if (data == NULL)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d10f      	bne.n	8007f16 <system_topic_handler+0x36>
    {
        const char *error_ptr = cJSON_GetErrorPtr();
 8007ef6:	f7fb fd13 	bl	8003920 <cJSON_GetErrorPtr>
 8007efa:	60f8      	str	r0, [r7, #12]
        if (error_ptr != NULL)
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	f000 8085 	beq.w	800800e <system_topic_handler+0x12e>
        {
            fprintf(stderr, "Error before: %s\n", error_ptr);
 8007f04:	4b44      	ldr	r3, [pc, #272]	; (8008018 <system_topic_handler+0x138>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	68db      	ldr	r3, [r3, #12]
 8007f0a:	68fa      	ldr	r2, [r7, #12]
 8007f0c:	4943      	ldr	r1, [pc, #268]	; (800801c <system_topic_handler+0x13c>)
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f01c fd22 	bl	8024958 <fiprintf>
        }
        return;
 8007f14:	e07b      	b.n	800800e <system_topic_handler+0x12e>
    }
    // Ищем основные команды
    cJSON *error_js_arr = cJSON_GetObjectItem(data_json, "errors");
 8007f16:	4942      	ldr	r1, [pc, #264]	; (8008020 <system_topic_handler+0x140>)
 8007f18:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8007f1a:	f7fd fc4a 	bl	80057b2 <cJSON_GetObjectItem>
 8007f1e:	63f8      	str	r0, [r7, #60]	; 0x3c
    cJSON *reset_js_arr = cJSON_GetObjectItem(data_json, "reset");
 8007f20:	4940      	ldr	r1, [pc, #256]	; (8008024 <system_topic_handler+0x144>)
 8007f22:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8007f24:	f7fd fc45 	bl	80057b2 <cJSON_GetObjectItem>
 8007f28:	63b8      	str	r0, [r7, #56]	; 0x38
    cJSON *firmware_js_arr = cJSON_GetObjectItem(data_json, "firmware");
 8007f2a:	493f      	ldr	r1, [pc, #252]	; (8008028 <system_topic_handler+0x148>)
 8007f2c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8007f2e:	f7fd fc40 	bl	80057b2 <cJSON_GetObjectItem>
 8007f32:	6378      	str	r0, [r7, #52]	; 0x34
    cJSON *test_sensor_js = cJSON_GetObjectItem(data_json, "test_sensor");
 8007f34:	493d      	ldr	r1, [pc, #244]	; (800802c <system_topic_handler+0x14c>)
 8007f36:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8007f38:	f7fd fc3b 	bl	80057b2 <cJSON_GetObjectItem>
 8007f3c:	6338      	str	r0, [r7, #48]	; 0x30
    cJSON *loggin_js = cJSON_GetObjectItem(data_json, "logging");
 8007f3e:	493c      	ldr	r1, [pc, #240]	; (8008030 <system_topic_handler+0x150>)
 8007f40:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8007f42:	f7fd fc36 	bl	80057b2 <cJSON_GetObjectItem>
 8007f46:	62f8      	str	r0, [r7, #44]	; 0x2c
    cJSON *extra_options_js = cJSON_GetObjectItem(data_json, "extra_options");
 8007f48:	493a      	ldr	r1, [pc, #232]	; (8008034 <system_topic_handler+0x154>)
 8007f4a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8007f4c:	f7fd fc31 	bl	80057b2 <cJSON_GetObjectItem>
 8007f50:	62b8      	str	r0, [r7, #40]	; 0x28
    if (loggin_js != NULL)
 8007f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d002      	beq.n	8007f5e <system_topic_handler+0x7e>
        logging_handler(loggin_js);
 8007f58:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007f5a:	f7ff ff4f 	bl	8007dfc <logging_handler>
    if (test_sensor_js != NULL)
 8007f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d002      	beq.n	8007f6a <system_topic_handler+0x8a>
        set_sensor_value(test_sensor_js);
 8007f64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f66:	f7ff fe83 	bl	8007c70 <set_sensor_value>
    if (extra_options_js != NULL)
 8007f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d002      	beq.n	8007f76 <system_topic_handler+0x96>
        set_extra_options_handler(extra_options_js);
 8007f70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f72:	f7ff ff8b 	bl	8007e8c <set_extra_options_handler>
    if (error_js_arr != NULL)
 8007f76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d015      	beq.n	8007fa8 <system_topic_handler+0xc8>
    {
        int js_size = cJSON_GetArraySize(error_js_arr);
 8007f7c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007f7e:	f7fd fb78 	bl	8005672 <cJSON_GetArraySize>
 8007f82:	6278      	str	r0, [r7, #36]	; 0x24

        DEBUG_MQTT("Get error_js_arr %i\n", js_size);
        for (int count = 0; count < js_size; count++)
 8007f84:	2300      	movs	r3, #0
 8007f86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f88:	e00a      	b.n	8007fa0 <system_topic_handler+0xc0>
        {
            cJSON *error_js = cJSON_GetArrayItem(error_js_arr, count);
 8007f8a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8007f8c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007f8e:	f7fd fbb4 	bl	80056fa <cJSON_GetArrayItem>
 8007f92:	6238      	str	r0, [r7, #32]
            error_handler(error_js);
 8007f94:	6a38      	ldr	r0, [r7, #32]
 8007f96:	f7ff fea1 	bl	8007cdc <error_handler>
        for (int count = 0; count < js_size; count++)
 8007f9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f9c:	3301      	adds	r3, #1
 8007f9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007fa0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa4:	429a      	cmp	r2, r3
 8007fa6:	dbf0      	blt.n	8007f8a <system_topic_handler+0xaa>
        }
    }
    if (reset_js_arr != NULL)
 8007fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d015      	beq.n	8007fda <system_topic_handler+0xfa>
    {
        int js_size = cJSON_GetArraySize(reset_js_arr);
 8007fae:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007fb0:	f7fd fb5f 	bl	8005672 <cJSON_GetArraySize>
 8007fb4:	61f8      	str	r0, [r7, #28]

        DEBUG_MQTT("Get reset_js_arr %i\n", js_size);
        for (int count = 0; count < js_size; count++)
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	64bb      	str	r3, [r7, #72]	; 0x48
 8007fba:	e00a      	b.n	8007fd2 <system_topic_handler+0xf2>
        {
            cJSON *reset_js = cJSON_GetArrayItem(reset_js_arr, count);
 8007fbc:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007fbe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007fc0:	f7fd fb9b 	bl	80056fa <cJSON_GetArrayItem>
 8007fc4:	61b8      	str	r0, [r7, #24]
            reset_handler(reset_js);
 8007fc6:	69b8      	ldr	r0, [r7, #24]
 8007fc8:	f7ff fed4 	bl	8007d74 <reset_handler>
        for (int count = 0; count < js_size; count++)
 8007fcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007fce:	3301      	adds	r3, #1
 8007fd0:	64bb      	str	r3, [r7, #72]	; 0x48
 8007fd2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007fd4:	69fb      	ldr	r3, [r7, #28]
 8007fd6:	429a      	cmp	r2, r3
 8007fd8:	dbf0      	blt.n	8007fbc <system_topic_handler+0xdc>
        }
    }
    if (firmware_js_arr != NULL)
 8007fda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d017      	beq.n	8008010 <system_topic_handler+0x130>
    {
        int js_size = cJSON_GetArraySize(firmware_js_arr);
 8007fe0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007fe2:	f7fd fb46 	bl	8005672 <cJSON_GetArraySize>
 8007fe6:	6178      	str	r0, [r7, #20]

        DEBUG_MQTT("Get firmware_js_arr %i\n", js_size);
        for (int count = 0; count < js_size; count++)
 8007fe8:	2300      	movs	r3, #0
 8007fea:	647b      	str	r3, [r7, #68]	; 0x44
 8007fec:	e00a      	b.n	8008004 <system_topic_handler+0x124>
        {
            cJSON *firmware_js = cJSON_GetArrayItem(firmware_js_arr, count);
 8007fee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007ff0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007ff2:	f7fd fb82 	bl	80056fa <cJSON_GetArrayItem>
 8007ff6:	6138      	str	r0, [r7, #16]
            firmware_handler(firmware_js);
 8007ff8:	6938      	ldr	r0, [r7, #16]
 8007ffa:	f7ff fe65 	bl	8007cc8 <firmware_handler>
        for (int count = 0; count < js_size; count++)
 8007ffe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008000:	3301      	adds	r3, #1
 8008002:	647b      	str	r3, [r7, #68]	; 0x44
 8008004:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008006:	697b      	ldr	r3, [r7, #20]
 8008008:	429a      	cmp	r2, r3
 800800a:	dbf0      	blt.n	8007fee <system_topic_handler+0x10e>
 800800c:	e000      	b.n	8008010 <system_topic_handler+0x130>
        return;
 800800e:	bf00      	nop
        }
    }
}
 8008010:	3750      	adds	r7, #80	; 0x50
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}
 8008016:	bf00      	nop
 8008018:	10000070 	.word	0x10000070
 800801c:	0802a6e0 	.word	0x0802a6e0
 8008020:	0802a6f4 	.word	0x0802a6f4
 8008024:	0802a6fc 	.word	0x0802a6fc
 8008028:	0802a704 	.word	0x0802a704
 800802c:	0802a710 	.word	0x0802a710
 8008030:	0802a71c 	.word	0x0802a71c
 8008034:	0802a6ac 	.word	0x0802a6ac

08008038 <open_damper>:
#define OPENING_TIME (45 * SECOND)

uint32_t damper_time;

void open_damper()
{
 8008038:	b580      	push	{r7, lr}
 800803a:	af00      	add	r7, sp, #0
    if (damper_state == 0)
 800803c:	4b0b      	ldr	r3, [pc, #44]	; (800806c <open_damper+0x34>)
 800803e:	781b      	ldrb	r3, [r3, #0]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d110      	bne.n	8008066 <open_damper+0x2e>
    {
    	damper_state = 1;
 8008044:	4b09      	ldr	r3, [pc, #36]	; (800806c <open_damper+0x34>)
 8008046:	2201      	movs	r2, #1
 8008048:	701a      	strb	r2, [r3, #0]
    	damper_time = HAL_GetTick();
 800804a:	f002 fe13 	bl	800ac74 <HAL_GetTick>
 800804e:	4603      	mov	r3, r0
 8008050:	4a07      	ldr	r2, [pc, #28]	; (8008070 <open_damper+0x38>)
 8008052:	6013      	str	r3, [r2, #0]
    	HAL_GPIO_WritePin(RELAY_CH1_GPIO_Port, RELAY_CH1_Pin, GPIO_PIN_SET);
 8008054:	2201      	movs	r2, #1
 8008056:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800805a:	4806      	ldr	r0, [pc, #24]	; (8008074 <open_damper+0x3c>)
 800805c:	f005 f974 	bl	800d348 <HAL_GPIO_WritePin>
        DEBUG_DAMP("opens damper\n");
 8008060:	4805      	ldr	r0, [pc, #20]	; (8008078 <open_damper+0x40>)
 8008062:	f01d fc29 	bl	80258b8 <puts>
    }
}
 8008066:	bf00      	nop
 8008068:	bd80      	pop	{r7, pc}
 800806a:	bf00      	nop
 800806c:	20013d94 	.word	0x20013d94
 8008070:	20013fec 	.word	0x20013fec
 8008074:	40020c00 	.word	0x40020c00
 8008078:	0802a724 	.word	0x0802a724

0800807c <close_damper>:

void close_damper()
{
 800807c:	b580      	push	{r7, lr}
 800807e:	af00      	add	r7, sp, #0
	damper_state = 0;
 8008080:	4b06      	ldr	r3, [pc, #24]	; (800809c <close_damper+0x20>)
 8008082:	2200      	movs	r2, #0
 8008084:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(RELAY_CH1_GPIO_Port, RELAY_CH1_Pin, GPIO_PIN_RESET);
 8008086:	2200      	movs	r2, #0
 8008088:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800808c:	4804      	ldr	r0, [pc, #16]	; (80080a0 <close_damper+0x24>)
 800808e:	f005 f95b 	bl	800d348 <HAL_GPIO_WritePin>
	DEBUG_DAMP("close damper\n");
 8008092:	4804      	ldr	r0, [pc, #16]	; (80080a4 <close_damper+0x28>)
 8008094:	f01d fc10 	bl	80258b8 <puts>
}
 8008098:	bf00      	nop
 800809a:	bd80      	pop	{r7, pc}
 800809c:	20013d94 	.word	0x20013d94
 80080a0:	40020c00 	.word	0x40020c00
 80080a4:	0802a73c 	.word	0x0802a73c

080080a8 <DamperTask>:

void DamperTask(void *argument)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b082      	sub	sp, #8
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
	damper_state = 0;
 80080b0:	4b22      	ldr	r3, [pc, #136]	; (800813c <DamperTask+0x94>)
 80080b2:	2200      	movs	r2, #0
 80080b4:	701a      	strb	r2, [r3, #0]
    for(;;)
    {
    	if(device->state == ON && device->error_stop_hot == false && device->error_stop_cold == false &&
 80080b6:	4b22      	ldr	r3, [pc, #136]	; (8008140 <DamperTask+0x98>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	789b      	ldrb	r3, [r3, #2]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d034      	beq.n	800812a <DamperTask+0x82>
 80080c0:	4b1f      	ldr	r3, [pc, #124]	; (8008140 <DamperTask+0x98>)
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	795b      	ldrb	r3, [r3, #5]
 80080c6:	f083 0301 	eor.w	r3, r3, #1
 80080ca:	b2db      	uxtb	r3, r3
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d02c      	beq.n	800812a <DamperTask+0x82>
 80080d0:	4b1b      	ldr	r3, [pc, #108]	; (8008140 <DamperTask+0x98>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	799b      	ldrb	r3, [r3, #6]
 80080d6:	f083 0301 	eor.w	r3, r3, #1
 80080da:	b2db      	uxtb	r3, r3
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d024      	beq.n	800812a <DamperTask+0x82>
            sensors_data->out_state && sensors_data->in_state && ds_count == 2)
 80080e0:	4b18      	ldr	r3, [pc, #96]	; (8008144 <DamperTask+0x9c>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	7f1b      	ldrb	r3, [r3, #28]
    	if(device->state == ON && device->error_stop_hot == false && device->error_stop_cold == false &&
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d01f      	beq.n	800812a <DamperTask+0x82>
            sensors_data->out_state && sensors_data->in_state && ds_count == 2)
 80080ea:	4b16      	ldr	r3, [pc, #88]	; (8008144 <DamperTask+0x9c>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	7f5b      	ldrb	r3, [r3, #29]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d01a      	beq.n	800812a <DamperTask+0x82>
 80080f4:	4b14      	ldr	r3, [pc, #80]	; (8008148 <DamperTask+0xa0>)
 80080f6:	781b      	ldrb	r3, [r3, #0]
 80080f8:	2b02      	cmp	r3, #2
 80080fa:	d116      	bne.n	800812a <DamperTask+0x82>
    	{
    		open_damper();
 80080fc:	f7ff ff9c 	bl	8008038 <open_damper>
    		if(damper_state == 1 && ((HAL_GetTick() - damper_time) > OPENING_TIME))
 8008100:	4b0e      	ldr	r3, [pc, #56]	; (800813c <DamperTask+0x94>)
 8008102:	781b      	ldrb	r3, [r3, #0]
 8008104:	2b01      	cmp	r3, #1
 8008106:	d113      	bne.n	8008130 <DamperTask+0x88>
 8008108:	f002 fdb4 	bl	800ac74 <HAL_GetTick>
 800810c:	4602      	mov	r2, r0
 800810e:	4b0f      	ldr	r3, [pc, #60]	; (800814c <DamperTask+0xa4>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	1ad3      	subs	r3, r2, r3
 8008114:	f64a 72c8 	movw	r2, #45000	; 0xafc8
 8008118:	4293      	cmp	r3, r2
 800811a:	d909      	bls.n	8008130 <DamperTask+0x88>
    		{
    			damper_state = 2;
 800811c:	4b07      	ldr	r3, [pc, #28]	; (800813c <DamperTask+0x94>)
 800811e:	2202      	movs	r2, #2
 8008120:	701a      	strb	r2, [r3, #0]
    			DEBUG_DAMP("opened damper\n");
 8008122:	480b      	ldr	r0, [pc, #44]	; (8008150 <DamperTask+0xa8>)
 8008124:	f01d fbc8 	bl	80258b8 <puts>
    		if(damper_state == 1 && ((HAL_GetTick() - damper_time) > OPENING_TIME))
 8008128:	e002      	b.n	8008130 <DamperTask+0x88>
    		}
    	}
        else
        	close_damper();
 800812a:	f7ff ffa7 	bl	800807c <close_damper>
 800812e:	e000      	b.n	8008132 <DamperTask+0x8a>
    		if(damper_state == 1 && ((HAL_GetTick() - damper_time) > OPENING_TIME))
 8008130:	bf00      	nop
        osDelay(1000);
 8008132:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008136:	f009 fdd8 	bl	8011cea <osDelay>
    	if(device->state == ON && device->error_stop_hot == false && device->error_stop_cold == false &&
 800813a:	e7bc      	b.n	80080b6 <DamperTask+0xe>
 800813c:	20013d94 	.word	0x20013d94
 8008140:	20013a78 	.word	0x20013a78
 8008144:	20013a80 	.word	0x20013a80
 8008148:	20013e44 	.word	0x20013e44
 800814c:	20013fec 	.word	0x20013fec
 8008150:	0802a754 	.word	0x0802a754

08008154 <set_inflow_fan1>:
#include "fan.h"
#include "tim.h"

void set_inflow_fan1(uint8_t value)
{
 8008154:	b480      	push	{r7}
 8008156:	b083      	sub	sp, #12
 8008158:	af00      	add	r7, sp, #0
 800815a:	4603      	mov	r3, r0
 800815c:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, value * 65535 / 100);
 800815e:	79fa      	ldrb	r2, [r7, #7]
 8008160:	4613      	mov	r3, r2
 8008162:	041b      	lsls	r3, r3, #16
 8008164:	1a9b      	subs	r3, r3, r2
 8008166:	4a07      	ldr	r2, [pc, #28]	; (8008184 <set_inflow_fan1+0x30>)
 8008168:	fb82 1203 	smull	r1, r2, r2, r3
 800816c:	1152      	asrs	r2, r2, #5
 800816e:	17db      	asrs	r3, r3, #31
 8008170:	1ad2      	subs	r2, r2, r3
 8008172:	4b05      	ldr	r3, [pc, #20]	; (8008188 <set_inflow_fan1+0x34>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	639a      	str	r2, [r3, #56]	; 0x38
}
 8008178:	bf00      	nop
 800817a:	370c      	adds	r7, #12
 800817c:	46bd      	mov	sp, r7
 800817e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008182:	4770      	bx	lr
 8008184:	51eb851f 	.word	0x51eb851f
 8008188:	200141bc 	.word	0x200141bc

0800818c <start_failure_led>:
    if (service_response == 4)
    	HAL_GPIO_TogglePin(LED_FAILURE_GPIO_Port, LED_FAILURE_Pin);
}

void start_failure_led()
{
 800818c:	b580      	push	{r7, lr}
 800818e:	af00      	add	r7, sp, #0
	if (device->error_temp_hot || device->error_temp_cold || device->error_stop_hot || device->error_stop_cold)
 8008190:	4b10      	ldr	r3, [pc, #64]	; (80081d4 <start_failure_led+0x48>)
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	78db      	ldrb	r3, [r3, #3]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d10e      	bne.n	80081b8 <start_failure_led+0x2c>
 800819a:	4b0e      	ldr	r3, [pc, #56]	; (80081d4 <start_failure_led+0x48>)
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	791b      	ldrb	r3, [r3, #4]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d109      	bne.n	80081b8 <start_failure_led+0x2c>
 80081a4:	4b0b      	ldr	r3, [pc, #44]	; (80081d4 <start_failure_led+0x48>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	795b      	ldrb	r3, [r3, #5]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d104      	bne.n	80081b8 <start_failure_led+0x2c>
 80081ae:	4b09      	ldr	r3, [pc, #36]	; (80081d4 <start_failure_led+0x48>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	799b      	ldrb	r3, [r3, #6]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d005      	beq.n	80081c4 <start_failure_led+0x38>
		HAL_GPIO_WritePin(LED_FAILURE_GPIO_Port, LED_FAILURE_Pin, GPIO_PIN_SET);
 80081b8:	2201      	movs	r2, #1
 80081ba:	2180      	movs	r1, #128	; 0x80
 80081bc:	4806      	ldr	r0, [pc, #24]	; (80081d8 <start_failure_led+0x4c>)
 80081be:	f005 f8c3 	bl	800d348 <HAL_GPIO_WritePin>
 80081c2:	e005      	b.n	80081d0 <start_failure_led+0x44>
    else
    	HAL_GPIO_WritePin(LED_FAILURE_GPIO_Port, LED_FAILURE_Pin, GPIO_PIN_RESET);
 80081c4:	2200      	movs	r2, #0
 80081c6:	2180      	movs	r1, #128	; 0x80
 80081c8:	4803      	ldr	r0, [pc, #12]	; (80081d8 <start_failure_led+0x4c>)
 80081ca:	f005 f8bd 	bl	800d348 <HAL_GPIO_WritePin>
}
 80081ce:	bf00      	nop
 80081d0:	bf00      	nop
 80081d2:	bd80      	pop	{r7, pc}
 80081d4:	20013a78 	.word	0x20013a78
 80081d8:	40020c00 	.word	0x40020c00

080081dc <start_work_led>:

void start_work_led()
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	af00      	add	r7, sp, #0
	if(mqtt_status)
 80081e0:	4b08      	ldr	r3, [pc, #32]	; (8008204 <start_work_led+0x28>)
 80081e2:	781b      	ldrb	r3, [r3, #0]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d005      	beq.n	80081f4 <start_work_led+0x18>
		HAL_GPIO_WritePin(LED_WORK_GPIO_Port, LED_WORK_Pin, GPIO_PIN_SET);
 80081e8:	2201      	movs	r2, #1
 80081ea:	2140      	movs	r1, #64	; 0x40
 80081ec:	4806      	ldr	r0, [pc, #24]	; (8008208 <start_work_led+0x2c>)
 80081ee:	f005 f8ab 	bl	800d348 <HAL_GPIO_WritePin>
    else
    	HAL_GPIO_WritePin(LED_WORK_GPIO_Port, LED_WORK_Pin, GPIO_PIN_RESET);
}
 80081f2:	e004      	b.n	80081fe <start_work_led+0x22>
    	HAL_GPIO_WritePin(LED_WORK_GPIO_Port, LED_WORK_Pin, GPIO_PIN_RESET);
 80081f4:	2200      	movs	r2, #0
 80081f6:	2140      	movs	r1, #64	; 0x40
 80081f8:	4803      	ldr	r0, [pc, #12]	; (8008208 <start_work_led+0x2c>)
 80081fa:	f005 f8a5 	bl	800d348 <HAL_GPIO_WritePin>
}
 80081fe:	bf00      	nop
 8008200:	bd80      	pop	{r7, pc}
 8008202:	bf00      	nop
 8008204:	20013a54 	.word	0x20013a54
 8008208:	40020c00 	.word	0x40020c00

0800820c <start_link_led>:

void start_link_led()
{
 800820c:	b580      	push	{r7, lr}
 800820e:	af00      	add	r7, sp, #0
	if(netif_is_link_up(&gnetif))
 8008210:	4b0f      	ldr	r3, [pc, #60]	; (8008250 <start_link_led+0x44>)
 8008212:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008216:	089b      	lsrs	r3, r3, #2
 8008218:	f003 0301 	and.w	r3, r3, #1
 800821c:	b2db      	uxtb	r3, r3
 800821e:	2b00      	cmp	r3, #0
 8008220:	d00f      	beq.n	8008242 <start_link_led+0x36>
    {
        if(mqtt_status)
 8008222:	4b0c      	ldr	r3, [pc, #48]	; (8008254 <start_link_led+0x48>)
 8008224:	781b      	ldrb	r3, [r3, #0]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d007      	beq.n	800823a <start_link_led+0x2e>
        {
        	link_IP = false;
 800822a:	4b0b      	ldr	r3, [pc, #44]	; (8008258 <start_link_led+0x4c>)
 800822c:	2200      	movs	r2, #0
 800822e:	701a      	strb	r2, [r3, #0]
        	HAL_GPIO_TogglePin(LED_LINK_GPIO_Port, LED_LINK_Pin);
 8008230:	2120      	movs	r1, #32
 8008232:	480a      	ldr	r0, [pc, #40]	; (800825c <start_link_led+0x50>)
 8008234:	f005 f8a1 	bl	800d37a <HAL_GPIO_TogglePin>
        else
        	link_IP = true;
    }
    else
    	HAL_GPIO_WritePin(LED_LINK_GPIO_Port, LED_LINK_Pin, GPIO_PIN_RESET);
}
 8008238:	e008      	b.n	800824c <start_link_led+0x40>
        	link_IP = true;
 800823a:	4b07      	ldr	r3, [pc, #28]	; (8008258 <start_link_led+0x4c>)
 800823c:	2201      	movs	r2, #1
 800823e:	701a      	strb	r2, [r3, #0]
}
 8008240:	e004      	b.n	800824c <start_link_led+0x40>
    	HAL_GPIO_WritePin(LED_LINK_GPIO_Port, LED_LINK_Pin, GPIO_PIN_RESET);
 8008242:	2200      	movs	r2, #0
 8008244:	2120      	movs	r1, #32
 8008246:	4805      	ldr	r0, [pc, #20]	; (800825c <start_link_led+0x50>)
 8008248:	f005 f87e 	bl	800d348 <HAL_GPIO_WritePin>
}
 800824c:	bf00      	nop
 800824e:	bd80      	pop	{r7, pc}
 8008250:	20014608 	.word	0x20014608
 8008254:	20013a54 	.word	0x20013a54
 8008258:	20013ff0 	.word	0x20013ff0
 800825c:	40020c00 	.word	0x40020c00

08008260 <start_service_led>:

void start_service_led()
{
 8008260:	b580      	push	{r7, lr}
 8008262:	af00      	add	r7, sp, #0
	if(service_response == 1)//вошли в сервисный режим
 8008264:	4b23      	ldr	r3, [pc, #140]	; (80082f4 <start_service_led+0x94>)
 8008266:	781b      	ldrb	r3, [r3, #0]
 8008268:	2b01      	cmp	r3, #1
 800826a:	d10e      	bne.n	800828a <start_service_led+0x2a>
    {
		DEBUG_LED_BUT_CONTROL("service_response = 1\n");
 800826c:	4822      	ldr	r0, [pc, #136]	; (80082f8 <start_service_led+0x98>)
 800826e:	f01d fb23 	bl	80258b8 <puts>
		HAL_GPIO_TogglePin(LED_LINK_GPIO_Port, LED_LINK_Pin);
 8008272:	2120      	movs	r1, #32
 8008274:	4821      	ldr	r0, [pc, #132]	; (80082fc <start_service_led+0x9c>)
 8008276:	f005 f880 	bl	800d37a <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED_WORK_GPIO_Port, LED_WORK_Pin);
 800827a:	2140      	movs	r1, #64	; 0x40
 800827c:	481f      	ldr	r0, [pc, #124]	; (80082fc <start_service_led+0x9c>)
 800827e:	f005 f87c 	bl	800d37a <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED_FAILURE_GPIO_Port, LED_FAILURE_Pin);
 8008282:	2180      	movs	r1, #128	; 0x80
 8008284:	481d      	ldr	r0, [pc, #116]	; (80082fc <start_service_led+0x9c>)
 8008286:	f005 f878 	bl	800d37a <HAL_GPIO_TogglePin>
    }
    if(service_response == 3)//сброс ошибок
 800828a:	4b1a      	ldr	r3, [pc, #104]	; (80082f4 <start_service_led+0x94>)
 800828c:	781b      	ldrb	r3, [r3, #0]
 800828e:	2b03      	cmp	r3, #3
 8008290:	d10c      	bne.n	80082ac <start_service_led+0x4c>
    {
    	DEBUG_LED_BUT_CONTROL("service_response = 3\n");
 8008292:	481b      	ldr	r0, [pc, #108]	; (8008300 <start_service_led+0xa0>)
 8008294:	f01d fb10 	bl	80258b8 <puts>
    	HAL_GPIO_WritePin(LED_LINK_GPIO_Port, LED_LINK_Pin, GPIO_PIN_RESET);
 8008298:	2200      	movs	r2, #0
 800829a:	2120      	movs	r1, #32
 800829c:	4817      	ldr	r0, [pc, #92]	; (80082fc <start_service_led+0x9c>)
 800829e:	f005 f853 	bl	800d348 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(LED_FAILURE_GPIO_Port, LED_FAILURE_Pin, GPIO_PIN_RESET);
 80082a2:	2200      	movs	r2, #0
 80082a4:	2180      	movs	r1, #128	; 0x80
 80082a6:	4815      	ldr	r0, [pc, #84]	; (80082fc <start_service_led+0x9c>)
 80082a8:	f005 f84e 	bl	800d348 <HAL_GPIO_WritePin>
    }
    if(service_response == 4)//сброс памяти
 80082ac:	4b11      	ldr	r3, [pc, #68]	; (80082f4 <start_service_led+0x94>)
 80082ae:	781b      	ldrb	r3, [r3, #0]
 80082b0:	2b04      	cmp	r3, #4
 80082b2:	d10c      	bne.n	80082ce <start_service_led+0x6e>
    {
    	DEBUG_LED_BUT_CONTROL("service_response = 4\n");
 80082b4:	4813      	ldr	r0, [pc, #76]	; (8008304 <start_service_led+0xa4>)
 80082b6:	f01d faff 	bl	80258b8 <puts>
    	HAL_GPIO_WritePin(LED_LINK_GPIO_Port, LED_LINK_Pin, GPIO_PIN_RESET);
 80082ba:	2200      	movs	r2, #0
 80082bc:	2120      	movs	r1, #32
 80082be:	480f      	ldr	r0, [pc, #60]	; (80082fc <start_service_led+0x9c>)
 80082c0:	f005 f842 	bl	800d348 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(LED_WORK_GPIO_Port, LED_WORK_Pin, GPIO_PIN_RESET);
 80082c4:	2200      	movs	r2, #0
 80082c6:	2140      	movs	r1, #64	; 0x40
 80082c8:	480c      	ldr	r0, [pc, #48]	; (80082fc <start_service_led+0x9c>)
 80082ca:	f005 f83d 	bl	800d348 <HAL_GPIO_WritePin>
    }
	if((service_response > 0) && ((HAL_GetTick() - timme) > 10000))
 80082ce:	4b09      	ldr	r3, [pc, #36]	; (80082f4 <start_service_led+0x94>)
 80082d0:	781b      	ldrb	r3, [r3, #0]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d00c      	beq.n	80082f0 <start_service_led+0x90>
 80082d6:	f002 fccd 	bl	800ac74 <HAL_GetTick>
 80082da:	4602      	mov	r2, r0
 80082dc:	4b0a      	ldr	r3, [pc, #40]	; (8008308 <start_service_led+0xa8>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	1ad3      	subs	r3, r2, r3
 80082e2:	f242 7210 	movw	r2, #10000	; 0x2710
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d902      	bls.n	80082f0 <start_service_led+0x90>
		service_response = 0;
 80082ea:	4b02      	ldr	r3, [pc, #8]	; (80082f4 <start_service_led+0x94>)
 80082ec:	2200      	movs	r2, #0
 80082ee:	701a      	strb	r2, [r3, #0]
}
 80082f0:	bf00      	nop
 80082f2:	bd80      	pop	{r7, pc}
 80082f4:	20000064 	.word	0x20000064
 80082f8:	0802a76c 	.word	0x0802a76c
 80082fc:	40020c00 	.word	0x40020c00
 8008300:	0802a798 	.word	0x0802a798
 8008304:	0802a7c4 	.word	0x0802a7c4
 8008308:	20000060 	.word	0x20000060

0800830c <LedsTask>:

void LedsTask(void *argument)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b082      	sub	sp, #8
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
    for (;;)
    {
    	if (service_response == 0)
 8008314:	4b08      	ldr	r3, [pc, #32]	; (8008338 <LedsTask+0x2c>)
 8008316:	781b      	ldrb	r3, [r3, #0]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d106      	bne.n	800832a <LedsTask+0x1e>
    	{
            start_link_led();
 800831c:	f7ff ff76 	bl	800820c <start_link_led>
            start_work_led();
 8008320:	f7ff ff5c 	bl	80081dc <start_work_led>
            start_failure_led();
 8008324:	f7ff ff32 	bl	800818c <start_failure_led>
 8008328:	e001      	b.n	800832e <LedsTask+0x22>
    	}
    	else
    		start_service_led();
 800832a:	f7ff ff99 	bl	8008260 <start_service_led>
        osDelay(1000);
 800832e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008332:	f009 fcda 	bl	8011cea <osDelay>
    	if (service_response == 0)
 8008336:	e7ed      	b.n	8008314 <LedsTask+0x8>
 8008338:	20000064 	.word	0x20000064

0800833c <constrain>:

float P, I, D, En;
float En1 = 0;

int constrain(int X, int min, int max)
{
 800833c:	b480      	push	{r7}
 800833e:	b085      	sub	sp, #20
 8008340:	af00      	add	r7, sp, #0
 8008342:	60f8      	str	r0, [r7, #12]
 8008344:	60b9      	str	r1, [r7, #8]
 8008346:	607a      	str	r2, [r7, #4]
    if (X > max)
 8008348:	68fa      	ldr	r2, [r7, #12]
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	429a      	cmp	r2, r3
 800834e:	dd01      	ble.n	8008354 <constrain+0x18>
    {
        return max;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	e006      	b.n	8008362 <constrain+0x26>
    }
    else if (X < min)
 8008354:	68fa      	ldr	r2, [r7, #12]
 8008356:	68bb      	ldr	r3, [r7, #8]
 8008358:	429a      	cmp	r2, r3
 800835a:	da01      	bge.n	8008360 <constrain+0x24>
    {
        return min;
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	e000      	b.n	8008362 <constrain+0x26>
    }
    else
    {
        return X;
 8008360:	68fb      	ldr	r3, [r7, #12]
    }
}
 8008362:	4618      	mov	r0, r3
 8008364:	3714      	adds	r7, #20
 8008366:	46bd      	mov	sp, r7
 8008368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836c:	4770      	bx	lr
	...

08008370 <set_ten_power>:

void set_ten_power(uint8_t power)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b082      	sub	sp, #8
 8008374:	af00      	add	r7, sp, #0
 8008376:	4603      	mov	r3, r0
 8008378:	71fb      	strb	r3, [r7, #7]
	if (_ten_power != power)
 800837a:	4b12      	ldr	r3, [pc, #72]	; (80083c4 <set_ten_power+0x54>)
 800837c:	781b      	ldrb	r3, [r3, #0]
 800837e:	79fa      	ldrb	r2, [r7, #7]
 8008380:	429a      	cmp	r2, r3
 8008382:	d01b      	beq.n	80083bc <set_ten_power+0x4c>
	{
        if (power > 0)
 8008384:	79fb      	ldrb	r3, [r7, #7]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d006      	beq.n	8008398 <set_ten_power+0x28>
        {
        	HAL_GPIO_WritePin (RELAY_CH2_GPIO_Port, RELAY_CH2_Pin, ON);
 800838a:	2201      	movs	r2, #1
 800838c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008390:	480d      	ldr	r0, [pc, #52]	; (80083c8 <set_ten_power+0x58>)
 8008392:	f004 ffd9 	bl	800d348 <HAL_GPIO_WritePin>
 8008396:	e005      	b.n	80083a4 <set_ten_power+0x34>
        }
        else
        {
        	HAL_GPIO_WritePin (RELAY_CH2_GPIO_Port, RELAY_CH2_Pin, OFF);
 8008398:	2200      	movs	r2, #0
 800839a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800839e:	480a      	ldr	r0, [pc, #40]	; (80083c8 <set_ten_power+0x58>)
 80083a0:	f004 ffd2 	bl	800d348 <HAL_GPIO_WritePin>
        }
        _ten_power = power;
 80083a4:	4a07      	ldr	r2, [pc, #28]	; (80083c4 <set_ten_power+0x54>)
 80083a6:	79fb      	ldrb	r3, [r7, #7]
 80083a8:	7013      	strb	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_2, power); // * 65535 / 100);
 80083aa:	4b08      	ldr	r3, [pc, #32]	; (80083cc <set_ten_power+0x5c>)
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	79fa      	ldrb	r2, [r7, #7]
 80083b0:	639a      	str	r2, [r3, #56]	; 0x38
		DEBUG_TEN("Set power = %i \n", power);
 80083b2:	79fb      	ldrb	r3, [r7, #7]
 80083b4:	4619      	mov	r1, r3
 80083b6:	4806      	ldr	r0, [pc, #24]	; (80083d0 <set_ten_power+0x60>)
 80083b8:	f01d f9f8 	bl	80257ac <iprintf>
	}
}
 80083bc:	bf00      	nop
 80083be:	3708      	adds	r7, #8
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bd80      	pop	{r7, pc}
 80083c4:	20013ff8 	.word	0x20013ff8
 80083c8:	40020c00 	.word	0x40020c00
 80083cc:	20014294 	.word	0x20014294
 80083d0:	0802a7f0 	.word	0x0802a7f0

080083d4 <computePID_true>:

int computePID_true(float Xn, float X0n, float Kp, float Ki, float Kd, float dt, int min, int max)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b088      	sub	sp, #32
 80083d8:	af00      	add	r7, sp, #0
 80083da:	ed87 0a07 	vstr	s0, [r7, #28]
 80083de:	edc7 0a06 	vstr	s1, [r7, #24]
 80083e2:	ed87 1a05 	vstr	s2, [r7, #20]
 80083e6:	edc7 1a04 	vstr	s3, [r7, #16]
 80083ea:	ed87 2a03 	vstr	s4, [r7, #12]
 80083ee:	edc7 2a02 	vstr	s5, [r7, #8]
 80083f2:	6078      	str	r0, [r7, #4]
 80083f4:	6039      	str	r1, [r7, #0]
    En = X0n - Xn;
 80083f6:	ed97 7a06 	vldr	s14, [r7, #24]
 80083fa:	edd7 7a07 	vldr	s15, [r7, #28]
 80083fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008402:	4b2c      	ldr	r3, [pc, #176]	; (80084b4 <computePID_true+0xe0>)
 8008404:	edc3 7a00 	vstr	s15, [r3]
    P = Kp * En;
 8008408:	4b2a      	ldr	r3, [pc, #168]	; (80084b4 <computePID_true+0xe0>)
 800840a:	ed93 7a00 	vldr	s14, [r3]
 800840e:	edd7 7a05 	vldr	s15, [r7, #20]
 8008412:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008416:	4b28      	ldr	r3, [pc, #160]	; (80084b8 <computePID_true+0xe4>)
 8008418:	edc3 7a00 	vstr	s15, [r3]
    I = constrain(I + Ki * En, min, max);
 800841c:	4b25      	ldr	r3, [pc, #148]	; (80084b4 <computePID_true+0xe0>)
 800841e:	ed93 7a00 	vldr	s14, [r3]
 8008422:	edd7 7a04 	vldr	s15, [r7, #16]
 8008426:	ee27 7a27 	vmul.f32	s14, s14, s15
 800842a:	4b24      	ldr	r3, [pc, #144]	; (80084bc <computePID_true+0xe8>)
 800842c:	edd3 7a00 	vldr	s15, [r3]
 8008430:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008434:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008438:	683a      	ldr	r2, [r7, #0]
 800843a:	6879      	ldr	r1, [r7, #4]
 800843c:	ee17 0a90 	vmov	r0, s15
 8008440:	f7ff ff7c 	bl	800833c <constrain>
 8008444:	ee07 0a90 	vmov	s15, r0
 8008448:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800844c:	4b1b      	ldr	r3, [pc, #108]	; (80084bc <computePID_true+0xe8>)
 800844e:	edc3 7a00 	vstr	s15, [r3]
    D = Kd * (En - En1) / dt;
 8008452:	4b18      	ldr	r3, [pc, #96]	; (80084b4 <computePID_true+0xe0>)
 8008454:	ed93 7a00 	vldr	s14, [r3]
 8008458:	4b19      	ldr	r3, [pc, #100]	; (80084c0 <computePID_true+0xec>)
 800845a:	edd3 7a00 	vldr	s15, [r3]
 800845e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008462:	edd7 7a03 	vldr	s15, [r7, #12]
 8008466:	ee67 6a27 	vmul.f32	s13, s14, s15
 800846a:	ed97 7a02 	vldr	s14, [r7, #8]
 800846e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008472:	4b14      	ldr	r3, [pc, #80]	; (80084c4 <computePID_true+0xf0>)
 8008474:	edc3 7a00 	vstr	s15, [r3]
    En1 = En;
 8008478:	4b0e      	ldr	r3, [pc, #56]	; (80084b4 <computePID_true+0xe0>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	4a10      	ldr	r2, [pc, #64]	; (80084c0 <computePID_true+0xec>)
 800847e:	6013      	str	r3, [r2, #0]
    return constrain(P + I + D, min, max);
 8008480:	4b0d      	ldr	r3, [pc, #52]	; (80084b8 <computePID_true+0xe4>)
 8008482:	ed93 7a00 	vldr	s14, [r3]
 8008486:	4b0d      	ldr	r3, [pc, #52]	; (80084bc <computePID_true+0xe8>)
 8008488:	edd3 7a00 	vldr	s15, [r3]
 800848c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008490:	4b0c      	ldr	r3, [pc, #48]	; (80084c4 <computePID_true+0xf0>)
 8008492:	edd3 7a00 	vldr	s15, [r3]
 8008496:	ee77 7a27 	vadd.f32	s15, s14, s15
 800849a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800849e:	683a      	ldr	r2, [r7, #0]
 80084a0:	6879      	ldr	r1, [r7, #4]
 80084a2:	ee17 0a90 	vmov	r0, s15
 80084a6:	f7ff ff49 	bl	800833c <constrain>
 80084aa:	4603      	mov	r3, r0
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	3720      	adds	r7, #32
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}
 80084b4:	20013ffc 	.word	0x20013ffc
 80084b8:	20014004 	.word	0x20014004
 80084bc:	20014000 	.word	0x20014000
 80084c0:	20000068 	.word	0x20000068
 80084c4:	20013ff4 	.word	0x20013ff4

080084c8 <ten_handler>:

void ten_handler()
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	af00      	add	r7, sp, #0
	if (device->state == ON && damper_state == 2 &&
 80084cc:	4b38      	ldr	r3, [pc, #224]	; (80085b0 <ten_handler+0xe8>)
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	789b      	ldrb	r3, [r3, #2]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d055      	beq.n	8008582 <ten_handler+0xba>
 80084d6:	4b37      	ldr	r3, [pc, #220]	; (80085b4 <ten_handler+0xec>)
 80084d8:	781b      	ldrb	r3, [r3, #0]
 80084da:	2b02      	cmp	r3, #2
 80084dc:	d151      	bne.n	8008582 <ten_handler+0xba>
		heaters->on_off_ten == ON && device->inflow_speed > 0 && sensors_data->in_state && sensors_data->out_state &&
 80084de:	4b36      	ldr	r3, [pc, #216]	; (80085b8 <ten_handler+0xf0>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
	if (device->state == ON && damper_state == 2 &&
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d04b      	beq.n	8008582 <ten_handler+0xba>
		heaters->on_off_ten == ON && device->inflow_speed > 0 && sensors_data->in_state && sensors_data->out_state &&
 80084ea:	4b31      	ldr	r3, [pc, #196]	; (80085b0 <ten_handler+0xe8>)
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	7bdb      	ldrb	r3, [r3, #15]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d046      	beq.n	8008582 <ten_handler+0xba>
 80084f4:	4b31      	ldr	r3, [pc, #196]	; (80085bc <ten_handler+0xf4>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	7f5b      	ldrb	r3, [r3, #29]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d041      	beq.n	8008582 <ten_handler+0xba>
 80084fe:	4b2f      	ldr	r3, [pc, #188]	; (80085bc <ten_handler+0xf4>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	7f1b      	ldrb	r3, [r3, #28]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d03c      	beq.n	8008582 <ten_handler+0xba>
		device->error_temp_hot == false && device->error_stop_hot == false && device->error_stop_cold == false)
 8008508:	4b29      	ldr	r3, [pc, #164]	; (80085b0 <ten_handler+0xe8>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	78db      	ldrb	r3, [r3, #3]
 800850e:	f083 0301 	eor.w	r3, r3, #1
 8008512:	b2db      	uxtb	r3, r3
		heaters->on_off_ten == ON && device->inflow_speed > 0 && sensors_data->in_state && sensors_data->out_state &&
 8008514:	2b00      	cmp	r3, #0
 8008516:	d034      	beq.n	8008582 <ten_handler+0xba>
		device->error_temp_hot == false && device->error_stop_hot == false && device->error_stop_cold == false)
 8008518:	4b25      	ldr	r3, [pc, #148]	; (80085b0 <ten_handler+0xe8>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	795b      	ldrb	r3, [r3, #5]
 800851e:	f083 0301 	eor.w	r3, r3, #1
 8008522:	b2db      	uxtb	r3, r3
 8008524:	2b00      	cmp	r3, #0
 8008526:	d02c      	beq.n	8008582 <ten_handler+0xba>
 8008528:	4b21      	ldr	r3, [pc, #132]	; (80085b0 <ten_handler+0xe8>)
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	799b      	ldrb	r3, [r3, #6]
 800852e:	f083 0301 	eor.w	r3, r3, #1
 8008532:	b2db      	uxtb	r3, r3
 8008534:	2b00      	cmp	r3, #0
 8008536:	d024      	beq.n	8008582 <ten_handler+0xba>
	{
		heaters->ten.power = computePID_true(sensors_data->out, heaters->ten.temp_limit, 75, 3.0, 13, 1, 0, 65535);
 8008538:	4b20      	ldr	r3, [pc, #128]	; (80085bc <ten_handler+0xf4>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	edd3 7a00 	vldr	s15, [r3]
 8008540:	4b1d      	ldr	r3, [pc, #116]	; (80085b8 <ten_handler+0xf0>)
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	685b      	ldr	r3, [r3, #4]
 8008546:	ee07 3a10 	vmov	s14, r3
 800854a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800854e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008552:	2000      	movs	r0, #0
 8008554:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 8008558:	eeb2 2a0a 	vmov.f32	s4, #42	; 0x41500000  13.0
 800855c:	eef0 1a08 	vmov.f32	s3, #8	; 0x40400000  3.0
 8008560:	ed9f 1a17 	vldr	s2, [pc, #92]	; 80085c0 <ten_handler+0xf8>
 8008564:	eef0 0a47 	vmov.f32	s1, s14
 8008568:	eeb0 0a67 	vmov.f32	s0, s15
 800856c:	f7ff ff32 	bl	80083d4 <computePID_true>
 8008570:	4602      	mov	r2, r0
 8008572:	4b11      	ldr	r3, [pc, #68]	; (80085b8 <ten_handler+0xf0>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	b292      	uxth	r2, r2
 8008578:	821a      	strh	r2, [r3, #16]
		DEBUG_TEN("work mode\n");
 800857a:	4812      	ldr	r0, [pc, #72]	; (80085c4 <ten_handler+0xfc>)
 800857c:	f01d f99c 	bl	80258b8 <puts>
 8008580:	e006      	b.n	8008590 <ten_handler+0xc8>
	}
	else
	{
		heaters->ten.power = 0;
 8008582:	4b0d      	ldr	r3, [pc, #52]	; (80085b8 <ten_handler+0xf0>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	2200      	movs	r2, #0
 8008588:	821a      	strh	r2, [r3, #16]
		DEBUG_TEN("ten off\n");
 800858a:	480f      	ldr	r0, [pc, #60]	; (80085c8 <ten_handler+0x100>)
 800858c:	f01d f994 	bl	80258b8 <puts>
	}
	set_ten_power(heaters->ten.power);
 8008590:	4b09      	ldr	r3, [pc, #36]	; (80085b8 <ten_handler+0xf0>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	8a1b      	ldrh	r3, [r3, #16]
 8008596:	b2db      	uxtb	r3, r3
 8008598:	4618      	mov	r0, r3
 800859a:	f7ff fee9 	bl	8008370 <set_ten_power>
	// publish_temp_log();
	DEBUG_TEN("TEN_POWER %i\n", heaters->ten.power);
 800859e:	4b06      	ldr	r3, [pc, #24]	; (80085b8 <ten_handler+0xf0>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	8a1b      	ldrh	r3, [r3, #16]
 80085a4:	4619      	mov	r1, r3
 80085a6:	4809      	ldr	r0, [pc, #36]	; (80085cc <ten_handler+0x104>)
 80085a8:	f01d f900 	bl	80257ac <iprintf>
}
 80085ac:	bf00      	nop
 80085ae:	bd80      	pop	{r7, pc}
 80085b0:	20013a78 	.word	0x20013a78
 80085b4:	20013d94 	.word	0x20013d94
 80085b8:	200139cc 	.word	0x200139cc
 80085bc:	20013a80 	.word	0x20013a80
 80085c0:	42960000 	.word	0x42960000
 80085c4:	0802a808 	.word	0x0802a808
 80085c8:	0802a818 	.word	0x0802a818
 80085cc:	0802a828 	.word	0x0802a828

080085d0 <modbus_set_holding>:
  .stack_size = 256 * 6,
  .priority = (osPriority_t) osPriorityNormal,
};

int8_t modbus_set_holding(uint8_t slave_id, uint16_t reg_start, uint16_t data)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b082      	sub	sp, #8
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	4603      	mov	r3, r0
 80085d8:	71fb      	strb	r3, [r7, #7]
 80085da:	460b      	mov	r3, r1
 80085dc:	80bb      	strh	r3, [r7, #4]
 80085de:	4613      	mov	r3, r2
 80085e0:	807b      	strh	r3, [r7, #2]
	return modbus_master_set_one(slave_id, MB_FC_WRITE_MULTIPLE_REGISTERS, reg_start, data);
 80085e2:	887b      	ldrh	r3, [r7, #2]
 80085e4:	88ba      	ldrh	r2, [r7, #4]
 80085e6:	79f8      	ldrb	r0, [r7, #7]
 80085e8:	2110      	movs	r1, #16
 80085ea:	f7fa ff53 	bl	8003494 <modbus_master_set_one>
 80085ee:	4603      	mov	r3, r0
}
 80085f0:	4618      	mov	r0, r3
 80085f2:	3708      	adds	r7, #8
 80085f4:	46bd      	mov	sp, r7
 80085f6:	bd80      	pop	{r7, pc}

080085f8 <modbus_get_holding>:

int32_t modbus_get_holding(uint8_t slave_id, uint16_t reg_start)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b082      	sub	sp, #8
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	4603      	mov	r3, r0
 8008600:	460a      	mov	r2, r1
 8008602:	71fb      	strb	r3, [r7, #7]
 8008604:	4613      	mov	r3, r2
 8008606:	80bb      	strh	r3, [r7, #4]
	return modbus_master_get_one(slave_id, MB_FC_READ_REGISTERS, reg_start);
 8008608:	88ba      	ldrh	r2, [r7, #4]
 800860a:	79fb      	ldrb	r3, [r7, #7]
 800860c:	2103      	movs	r1, #3
 800860e:	4618      	mov	r0, r3
 8008610:	f7fa ff8a 	bl	8003528 <modbus_master_get_one>
 8008614:	4603      	mov	r3, r0
}
 8008616:	4618      	mov	r0, r3
 8008618:	3708      	adds	r7, #8
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}
	...

08008620 <rc_receive_temp>:
bool pult_link = true;   // переменная состояния связи пульта
uint8_t count_error = 0; // счетчик количества ошибочных пакетов
uint8_t count_link = 0;  // счетчик попыток соединений после разрыва связи

void rc_receive_temp()
{
 8008620:	b580      	push	{r7, lr}
 8008622:	af00      	add	r7, sp, #0
    new_reg_temp = modbus_get_holding(DEFAUL_PULT_ID, REG_TEMP);
 8008624:	2102      	movs	r1, #2
 8008626:	2001      	movs	r0, #1
 8008628:	f7ff ffe6 	bl	80085f8 <modbus_get_holding>
 800862c:	4603      	mov	r3, r0
 800862e:	b21a      	sxth	r2, r3
 8008630:	4b1b      	ldr	r3, [pc, #108]	; (80086a0 <rc_receive_temp+0x80>)
 8008632:	801a      	strh	r2, [r3, #0]
    DEBUG_RC("new_reg_temp = %i\n", new_reg_temp);
 8008634:	4b1a      	ldr	r3, [pc, #104]	; (80086a0 <rc_receive_temp+0x80>)
 8008636:	f9b3 3000 	ldrsh.w	r3, [r3]
 800863a:	4619      	mov	r1, r3
 800863c:	4819      	ldr	r0, [pc, #100]	; (80086a4 <rc_receive_temp+0x84>)
 800863e:	f01d f8b5 	bl	80257ac <iprintf>
    if (new_reg_temp >= 0 && reg_temp != new_reg_temp)
 8008642:	4b17      	ldr	r3, [pc, #92]	; (80086a0 <rc_receive_temp+0x80>)
 8008644:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008648:	2b00      	cmp	r3, #0
 800864a:	db26      	blt.n	800869a <rc_receive_temp+0x7a>
 800864c:	4b16      	ldr	r3, [pc, #88]	; (80086a8 <rc_receive_temp+0x88>)
 800864e:	781b      	ldrb	r3, [r3, #0]
 8008650:	461a      	mov	r2, r3
 8008652:	4b13      	ldr	r3, [pc, #76]	; (80086a0 <rc_receive_temp+0x80>)
 8008654:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008658:	429a      	cmp	r2, r3
 800865a:	d01e      	beq.n	800869a <rc_receive_temp+0x7a>
    {
        reg_temp = new_reg_temp;
 800865c:	4b10      	ldr	r3, [pc, #64]	; (80086a0 <rc_receive_temp+0x80>)
 800865e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008662:	b2da      	uxtb	r2, r3
 8008664:	4b10      	ldr	r3, [pc, #64]	; (80086a8 <rc_receive_temp+0x88>)
 8008666:	701a      	strb	r2, [r3, #0]
        if (reg_temp < 10)
 8008668:	4b0f      	ldr	r3, [pc, #60]	; (80086a8 <rc_receive_temp+0x88>)
 800866a:	781b      	ldrb	r3, [r3, #0]
 800866c:	2b09      	cmp	r3, #9
 800866e:	d805      	bhi.n	800867c <rc_receive_temp+0x5c>
        {
            limit_temp = true;
 8008670:	4b0e      	ldr	r3, [pc, #56]	; (80086ac <rc_receive_temp+0x8c>)
 8008672:	2201      	movs	r2, #1
 8008674:	701a      	strb	r2, [r3, #0]
            reg_temp = 10;
 8008676:	4b0c      	ldr	r3, [pc, #48]	; (80086a8 <rc_receive_temp+0x88>)
 8008678:	220a      	movs	r2, #10
 800867a:	701a      	strb	r2, [r3, #0]
        }
        if (reg_temp > 25)
 800867c:	4b0a      	ldr	r3, [pc, #40]	; (80086a8 <rc_receive_temp+0x88>)
 800867e:	781b      	ldrb	r3, [r3, #0]
 8008680:	2b19      	cmp	r3, #25
 8008682:	d905      	bls.n	8008690 <rc_receive_temp+0x70>
        {
            limit_temp = true;
 8008684:	4b09      	ldr	r3, [pc, #36]	; (80086ac <rc_receive_temp+0x8c>)
 8008686:	2201      	movs	r2, #1
 8008688:	701a      	strb	r2, [r3, #0]
            reg_temp = 25;
 800868a:	4b07      	ldr	r3, [pc, #28]	; (80086a8 <rc_receive_temp+0x88>)
 800868c:	2219      	movs	r2, #25
 800868e:	701a      	strb	r2, [r3, #0]
        }
        heaters->ten.temp_limit = reg_temp;
 8008690:	4b05      	ldr	r3, [pc, #20]	; (80086a8 <rc_receive_temp+0x88>)
 8008692:	781a      	ldrb	r2, [r3, #0]
 8008694:	4b06      	ldr	r3, [pc, #24]	; (80086b0 <rc_receive_temp+0x90>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	605a      	str	r2, [r3, #4]
    }
}
 800869a:	bf00      	nop
 800869c:	bd80      	pop	{r7, pc}
 800869e:	bf00      	nop
 80086a0:	2001400c 	.word	0x2001400c
 80086a4:	0802a850 	.word	0x0802a850
 80086a8:	20014014 	.word	0x20014014
 80086ac:	2001400b 	.word	0x2001400b
 80086b0:	200139cc 	.word	0x200139cc

080086b4 <rc_receive_fan>:

void rc_receive_fan()
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b082      	sub	sp, #8
 80086b8:	af00      	add	r7, sp, #0
    new_reg_fan = modbus_get_holding(DEFAUL_PULT_ID, REG_FAN);
 80086ba:	2101      	movs	r1, #1
 80086bc:	2001      	movs	r0, #1
 80086be:	f7ff ff9b 	bl	80085f8 <modbus_get_holding>
 80086c2:	4603      	mov	r3, r0
 80086c4:	b21a      	sxth	r2, r3
 80086c6:	4b46      	ldr	r3, [pc, #280]	; (80087e0 <rc_receive_fan+0x12c>)
 80086c8:	801a      	strh	r2, [r3, #0]
    DEBUG_RC("new_reg_fan = %i\n", new_reg_fan);
 80086ca:	4b45      	ldr	r3, [pc, #276]	; (80087e0 <rc_receive_fan+0x12c>)
 80086cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80086d0:	4619      	mov	r1, r3
 80086d2:	4844      	ldr	r0, [pc, #272]	; (80087e4 <rc_receive_fan+0x130>)
 80086d4:	f01d f86a 	bl	80257ac <iprintf>
    if (new_reg_fan >= 0 && reg_fan != new_reg_fan)
 80086d8:	4b41      	ldr	r3, [pc, #260]	; (80087e0 <rc_receive_fan+0x12c>)
 80086da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	db7a      	blt.n	80087d8 <rc_receive_fan+0x124>
 80086e2:	4b41      	ldr	r3, [pc, #260]	; (80087e8 <rc_receive_fan+0x134>)
 80086e4:	781b      	ldrb	r3, [r3, #0]
 80086e6:	461a      	mov	r2, r3
 80086e8:	4b3d      	ldr	r3, [pc, #244]	; (80087e0 <rc_receive_fan+0x12c>)
 80086ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80086ee:	429a      	cmp	r2, r3
 80086f0:	d072      	beq.n	80087d8 <rc_receive_fan+0x124>
    {
        int16_t reg_fan_smart = reg_fan;
 80086f2:	4b3d      	ldr	r3, [pc, #244]	; (80087e8 <rc_receive_fan+0x134>)
 80086f4:	781b      	ldrb	r3, [r3, #0]
 80086f6:	80fb      	strh	r3, [r7, #6]
        reg_fan = new_reg_fan;
 80086f8:	4b39      	ldr	r3, [pc, #228]	; (80087e0 <rc_receive_fan+0x12c>)
 80086fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80086fe:	b2da      	uxtb	r2, r3
 8008700:	4b39      	ldr	r3, [pc, #228]	; (80087e8 <rc_receive_fan+0x134>)
 8008702:	701a      	strb	r2, [r3, #0]
        if (reg_fan == 0)
 8008704:	4b38      	ldr	r3, [pc, #224]	; (80087e8 <rc_receive_fan+0x134>)
 8008706:	781b      	ldrb	r3, [r3, #0]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d105      	bne.n	8008718 <rc_receive_fan+0x64>
        {
            reg_fan = 1;
 800870c:	4b36      	ldr	r3, [pc, #216]	; (80087e8 <rc_receive_fan+0x134>)
 800870e:	2201      	movs	r2, #1
 8008710:	701a      	strb	r2, [r3, #0]
            limit_fan = true;
 8008712:	4b36      	ldr	r3, [pc, #216]	; (80087ec <rc_receive_fan+0x138>)
 8008714:	2201      	movs	r2, #1
 8008716:	701a      	strb	r2, [r3, #0]
        }
        if (device->mode == INFLOW_MODE)
 8008718:	4b35      	ldr	r3, [pc, #212]	; (80087f0 <rc_receive_fan+0x13c>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	7b5b      	ldrb	r3, [r3, #13]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d122      	bne.n	8008768 <rc_receive_fan+0xb4>
        {
            if (reg_fan == 1)
 8008722:	4b31      	ldr	r3, [pc, #196]	; (80087e8 <rc_receive_fan+0x134>)
 8008724:	781b      	ldrb	r3, [r3, #0]
 8008726:	2b01      	cmp	r3, #1
 8008728:	d104      	bne.n	8008734 <rc_receive_fan+0x80>
                device->inflow_speed = 1;
 800872a:	4b31      	ldr	r3, [pc, #196]	; (80087f0 <rc_receive_fan+0x13c>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	2201      	movs	r2, #1
 8008730:	73da      	strb	r2, [r3, #15]
 8008732:	e019      	b.n	8008768 <rc_receive_fan+0xb4>
            else if (reg_fan == 2)
 8008734:	4b2c      	ldr	r3, [pc, #176]	; (80087e8 <rc_receive_fan+0x134>)
 8008736:	781b      	ldrb	r3, [r3, #0]
 8008738:	2b02      	cmp	r3, #2
 800873a:	d104      	bne.n	8008746 <rc_receive_fan+0x92>
                device->inflow_speed = 3;
 800873c:	4b2c      	ldr	r3, [pc, #176]	; (80087f0 <rc_receive_fan+0x13c>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	2203      	movs	r2, #3
 8008742:	73da      	strb	r2, [r3, #15]
 8008744:	e010      	b.n	8008768 <rc_receive_fan+0xb4>
            else if (reg_fan == 3)
 8008746:	4b28      	ldr	r3, [pc, #160]	; (80087e8 <rc_receive_fan+0x134>)
 8008748:	781b      	ldrb	r3, [r3, #0]
 800874a:	2b03      	cmp	r3, #3
 800874c:	d104      	bne.n	8008758 <rc_receive_fan+0xa4>
                device->inflow_speed = 5;
 800874e:	4b28      	ldr	r3, [pc, #160]	; (80087f0 <rc_receive_fan+0x13c>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	2205      	movs	r2, #5
 8008754:	73da      	strb	r2, [r3, #15]
 8008756:	e007      	b.n	8008768 <rc_receive_fan+0xb4>
            else if (reg_fan == 4)
 8008758:	4b23      	ldr	r3, [pc, #140]	; (80087e8 <rc_receive_fan+0x134>)
 800875a:	781b      	ldrb	r3, [r3, #0]
 800875c:	2b04      	cmp	r3, #4
 800875e:	d103      	bne.n	8008768 <rc_receive_fan+0xb4>
                device->inflow_speed = 7;
 8008760:	4b23      	ldr	r3, [pc, #140]	; (80087f0 <rc_receive_fan+0x13c>)
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	2207      	movs	r2, #7
 8008766:	73da      	strb	r2, [r3, #15]
        }
        if (device->mode == SMART_MODE)
 8008768:	4b21      	ldr	r3, [pc, #132]	; (80087f0 <rc_receive_fan+0x13c>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	7b5b      	ldrb	r3, [r3, #13]
 800876e:	2b01      	cmp	r3, #1
 8008770:	d106      	bne.n	8008780 <rc_receive_fan+0xcc>
        {
            reg_fan = reg_fan_smart;
 8008772:	88fb      	ldrh	r3, [r7, #6]
 8008774:	b2da      	uxtb	r2, r3
 8008776:	4b1c      	ldr	r3, [pc, #112]	; (80087e8 <rc_receive_fan+0x134>)
 8008778:	701a      	strb	r2, [r3, #0]
            limit_fan = true;
 800877a:	4b1c      	ldr	r3, [pc, #112]	; (80087ec <rc_receive_fan+0x138>)
 800877c:	2201      	movs	r2, #1
 800877e:	701a      	strb	r2, [r3, #0]
        }
        if (device->mode == INFLOW_MAX_MODE)
 8008780:	4b1b      	ldr	r3, [pc, #108]	; (80087f0 <rc_receive_fan+0x13c>)
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	7b5b      	ldrb	r3, [r3, #13]
 8008786:	2b02      	cmp	r3, #2
 8008788:	d126      	bne.n	80087d8 <rc_receive_fan+0x124>
        {
            device->mode = INFLOW_MODE;
 800878a:	4b19      	ldr	r3, [pc, #100]	; (80087f0 <rc_receive_fan+0x13c>)
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	2200      	movs	r2, #0
 8008790:	735a      	strb	r2, [r3, #13]
            if (reg_fan == 1)
 8008792:	4b15      	ldr	r3, [pc, #84]	; (80087e8 <rc_receive_fan+0x134>)
 8008794:	781b      	ldrb	r3, [r3, #0]
 8008796:	2b01      	cmp	r3, #1
 8008798:	d104      	bne.n	80087a4 <rc_receive_fan+0xf0>
                device->inflow_speed = 1;
 800879a:	4b15      	ldr	r3, [pc, #84]	; (80087f0 <rc_receive_fan+0x13c>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	2201      	movs	r2, #1
 80087a0:	73da      	strb	r2, [r3, #15]
                device->inflow_speed = 5;
            else if (reg_fan == 4)
                device->inflow_speed = 7;
        }
    }
}
 80087a2:	e019      	b.n	80087d8 <rc_receive_fan+0x124>
            else if (reg_fan == 2)
 80087a4:	4b10      	ldr	r3, [pc, #64]	; (80087e8 <rc_receive_fan+0x134>)
 80087a6:	781b      	ldrb	r3, [r3, #0]
 80087a8:	2b02      	cmp	r3, #2
 80087aa:	d104      	bne.n	80087b6 <rc_receive_fan+0x102>
                device->inflow_speed = 3;
 80087ac:	4b10      	ldr	r3, [pc, #64]	; (80087f0 <rc_receive_fan+0x13c>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	2203      	movs	r2, #3
 80087b2:	73da      	strb	r2, [r3, #15]
}
 80087b4:	e010      	b.n	80087d8 <rc_receive_fan+0x124>
            else if (reg_fan == 3)
 80087b6:	4b0c      	ldr	r3, [pc, #48]	; (80087e8 <rc_receive_fan+0x134>)
 80087b8:	781b      	ldrb	r3, [r3, #0]
 80087ba:	2b03      	cmp	r3, #3
 80087bc:	d104      	bne.n	80087c8 <rc_receive_fan+0x114>
                device->inflow_speed = 5;
 80087be:	4b0c      	ldr	r3, [pc, #48]	; (80087f0 <rc_receive_fan+0x13c>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	2205      	movs	r2, #5
 80087c4:	73da      	strb	r2, [r3, #15]
}
 80087c6:	e007      	b.n	80087d8 <rc_receive_fan+0x124>
            else if (reg_fan == 4)
 80087c8:	4b07      	ldr	r3, [pc, #28]	; (80087e8 <rc_receive_fan+0x134>)
 80087ca:	781b      	ldrb	r3, [r3, #0]
 80087cc:	2b04      	cmp	r3, #4
 80087ce:	d103      	bne.n	80087d8 <rc_receive_fan+0x124>
                device->inflow_speed = 7;
 80087d0:	4b07      	ldr	r3, [pc, #28]	; (80087f0 <rc_receive_fan+0x13c>)
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	2207      	movs	r2, #7
 80087d6:	73da      	strb	r2, [r3, #15]
}
 80087d8:	bf00      	nop
 80087da:	3708      	adds	r7, #8
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd80      	pop	{r7, pc}
 80087e0:	2001401a 	.word	0x2001401a
 80087e4:	0802a874 	.word	0x0802a874
 80087e8:	20014015 	.word	0x20014015
 80087ec:	20014016 	.word	0x20014016
 80087f0:	20013a78 	.word	0x20013a78

080087f4 <rc_receive_work>:

void rc_receive_work()
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	af00      	add	r7, sp, #0
    new_reg_work = modbus_get_holding(DEFAUL_PULT_ID, REG_WORK);
 80087f8:	2107      	movs	r1, #7
 80087fa:	2001      	movs	r0, #1
 80087fc:	f7ff fefc 	bl	80085f8 <modbus_get_holding>
 8008800:	4603      	mov	r3, r0
 8008802:	b21a      	sxth	r2, r3
 8008804:	4b15      	ldr	r3, [pc, #84]	; (800885c <rc_receive_work+0x68>)
 8008806:	801a      	strh	r2, [r3, #0]
    DEBUG_RC("new_reg_work = %i\n", new_reg_work);
 8008808:	4b14      	ldr	r3, [pc, #80]	; (800885c <rc_receive_work+0x68>)
 800880a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800880e:	4619      	mov	r1, r3
 8008810:	4813      	ldr	r0, [pc, #76]	; (8008860 <rc_receive_work+0x6c>)
 8008812:	f01c ffcb 	bl	80257ac <iprintf>
    if (new_reg_work >= 0 && reg_work != new_reg_work)
 8008816:	4b11      	ldr	r3, [pc, #68]	; (800885c <rc_receive_work+0x68>)
 8008818:	f9b3 3000 	ldrsh.w	r3, [r3]
 800881c:	2b00      	cmp	r3, #0
 800881e:	db1a      	blt.n	8008856 <rc_receive_work+0x62>
 8008820:	4b10      	ldr	r3, [pc, #64]	; (8008864 <rc_receive_work+0x70>)
 8008822:	781b      	ldrb	r3, [r3, #0]
 8008824:	461a      	mov	r2, r3
 8008826:	4b0d      	ldr	r3, [pc, #52]	; (800885c <rc_receive_work+0x68>)
 8008828:	f9b3 3000 	ldrsh.w	r3, [r3]
 800882c:	429a      	cmp	r2, r3
 800882e:	d012      	beq.n	8008856 <rc_receive_work+0x62>
    {
        reg_work = new_reg_work;
 8008830:	4b0a      	ldr	r3, [pc, #40]	; (800885c <rc_receive_work+0x68>)
 8008832:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008836:	b2da      	uxtb	r2, r3
 8008838:	4b0a      	ldr	r3, [pc, #40]	; (8008864 <rc_receive_work+0x70>)
 800883a:	701a      	strb	r2, [r3, #0]
        if (reg_work == 0)
 800883c:	4b09      	ldr	r3, [pc, #36]	; (8008864 <rc_receive_work+0x70>)
 800883e:	781b      	ldrb	r3, [r3, #0]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d104      	bne.n	800884e <rc_receive_work+0x5a>
            device->mode = INFLOW_MODE;
 8008844:	4b08      	ldr	r3, [pc, #32]	; (8008868 <rc_receive_work+0x74>)
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	2200      	movs	r2, #0
 800884a:	735a      	strb	r2, [r3, #13]
//                reg_work = 0;
//                limit_work = true;
//            }
        }
    }
}
 800884c:	e003      	b.n	8008856 <rc_receive_work+0x62>
                device->mode = SMART_MODE;
 800884e:	4b06      	ldr	r3, [pc, #24]	; (8008868 <rc_receive_work+0x74>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	2201      	movs	r2, #1
 8008854:	735a      	strb	r2, [r3, #13]
}
 8008856:	bf00      	nop
 8008858:	bd80      	pop	{r7, pc}
 800885a:	bf00      	nop
 800885c:	20014018 	.word	0x20014018
 8008860:	0802a898 	.word	0x0802a898
 8008864:	2001401c 	.word	0x2001401c
 8008868:	20013a78 	.word	0x20013a78

0800886c <rc_receive_switch>:

void rc_receive_switch()
{
 800886c:	b580      	push	{r7, lr}
 800886e:	af00      	add	r7, sp, #0
    new_reg_switch = modbus_get_holding(DEFAUL_PULT_ID, REG_SWITCH);
 8008870:	2100      	movs	r1, #0
 8008872:	2001      	movs	r0, #1
 8008874:	f7ff fec0 	bl	80085f8 <modbus_get_holding>
 8008878:	4603      	mov	r3, r0
 800887a:	b21a      	sxth	r2, r3
 800887c:	4b25      	ldr	r3, [pc, #148]	; (8008914 <rc_receive_switch+0xa8>)
 800887e:	801a      	strh	r2, [r3, #0]
    DEBUG_RC("new_reg_switch = %i\n", new_reg_switch);
 8008880:	4b24      	ldr	r3, [pc, #144]	; (8008914 <rc_receive_switch+0xa8>)
 8008882:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008886:	4619      	mov	r1, r3
 8008888:	4823      	ldr	r0, [pc, #140]	; (8008918 <rc_receive_switch+0xac>)
 800888a:	f01c ff8f 	bl	80257ac <iprintf>
    if (new_reg_switch >= 0)
 800888e:	4b21      	ldr	r3, [pc, #132]	; (8008914 <rc_receive_switch+0xa8>)
 8008890:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008894:	2b00      	cmp	r3, #0
 8008896:	db1e      	blt.n	80088d6 <rc_receive_switch+0x6a>
    {
        pult_link = true;
 8008898:	4b20      	ldr	r3, [pc, #128]	; (800891c <rc_receive_switch+0xb0>)
 800889a:	2201      	movs	r2, #1
 800889c:	701a      	strb	r2, [r3, #0]
        count_error = 0;
 800889e:	4b20      	ldr	r3, [pc, #128]	; (8008920 <rc_receive_switch+0xb4>)
 80088a0:	2200      	movs	r2, #0
 80088a2:	701a      	strb	r2, [r3, #0]
        if (reg_switch != new_reg_switch)
 80088a4:	4b1f      	ldr	r3, [pc, #124]	; (8008924 <rc_receive_switch+0xb8>)
 80088a6:	781b      	ldrb	r3, [r3, #0]
 80088a8:	461a      	mov	r2, r3
 80088aa:	4b1a      	ldr	r3, [pc, #104]	; (8008914 <rc_receive_switch+0xa8>)
 80088ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80088b0:	429a      	cmp	r2, r3
 80088b2:	d02c      	beq.n	800890e <rc_receive_switch+0xa2>
        {
            reg_switch = new_reg_switch;
 80088b4:	4b17      	ldr	r3, [pc, #92]	; (8008914 <rc_receive_switch+0xa8>)
 80088b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80088ba:	b2da      	uxtb	r2, r3
 80088bc:	4b19      	ldr	r3, [pc, #100]	; (8008924 <rc_receive_switch+0xb8>)
 80088be:	701a      	strb	r2, [r3, #0]
            device->state = reg_switch;
 80088c0:	4b18      	ldr	r3, [pc, #96]	; (8008924 <rc_receive_switch+0xb8>)
 80088c2:	781a      	ldrb	r2, [r3, #0]
 80088c4:	4b18      	ldr	r3, [pc, #96]	; (8008928 <rc_receive_switch+0xbc>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	2a00      	cmp	r2, #0
 80088ca:	bf14      	ite	ne
 80088cc:	2201      	movne	r2, #1
 80088ce:	2200      	moveq	r2, #0
 80088d0:	b2d2      	uxtb	r2, r2
 80088d2:	709a      	strb	r2, [r3, #2]
            write_device_params(device);
            pult_link = false;
            DEBUG_RC("remote_control communication break\n");
        }
    }
}
 80088d4:	e01b      	b.n	800890e <rc_receive_switch+0xa2>
        count_error++;
 80088d6:	4b12      	ldr	r3, [pc, #72]	; (8008920 <rc_receive_switch+0xb4>)
 80088d8:	781b      	ldrb	r3, [r3, #0]
 80088da:	3301      	adds	r3, #1
 80088dc:	b2da      	uxtb	r2, r3
 80088de:	4b10      	ldr	r3, [pc, #64]	; (8008920 <rc_receive_switch+0xb4>)
 80088e0:	701a      	strb	r2, [r3, #0]
        if (count_error == LIMIT_ERROR)
 80088e2:	4b0f      	ldr	r3, [pc, #60]	; (8008920 <rc_receive_switch+0xb4>)
 80088e4:	781b      	ldrb	r3, [r3, #0]
 80088e6:	2b03      	cmp	r3, #3
 80088e8:	d111      	bne.n	800890e <rc_receive_switch+0xa2>
            count_error = 0;
 80088ea:	4b0d      	ldr	r3, [pc, #52]	; (8008920 <rc_receive_switch+0xb4>)
 80088ec:	2200      	movs	r2, #0
 80088ee:	701a      	strb	r2, [r3, #0]
            device->remote_control.error = true;
 80088f0:	4b0d      	ldr	r3, [pc, #52]	; (8008928 <rc_receive_switch+0xbc>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	2201      	movs	r2, #1
 80088f6:	72da      	strb	r2, [r3, #11]
            write_device_params(device);
 80088f8:	4b0b      	ldr	r3, [pc, #44]	; (8008928 <rc_receive_switch+0xbc>)
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	4618      	mov	r0, r3
 80088fe:	f000 fca3 	bl	8009248 <write_device_params>
            pult_link = false;
 8008902:	4b06      	ldr	r3, [pc, #24]	; (800891c <rc_receive_switch+0xb0>)
 8008904:	2200      	movs	r2, #0
 8008906:	701a      	strb	r2, [r3, #0]
            DEBUG_RC("remote_control communication break\n");
 8008908:	4808      	ldr	r0, [pc, #32]	; (800892c <rc_receive_switch+0xc0>)
 800890a:	f01c ffd5 	bl	80258b8 <puts>
}
 800890e:	bf00      	nop
 8008910:	bd80      	pop	{r7, pc}
 8008912:	bf00      	nop
 8008914:	20014008 	.word	0x20014008
 8008918:	0802a8bc 	.word	0x0802a8bc
 800891c:	10000044 	.word	0x10000044
 8008920:	2000006e 	.word	0x2000006e
 8008924:	2001400a 	.word	0x2001400a
 8008928:	20013a78 	.word	0x20013a78
 800892c:	0802a8e4 	.word	0x0802a8e4

08008930 <rc_receive_handler>:

void rc_receive_handler()
{
 8008930:	b580      	push	{r7, lr}
 8008932:	af00      	add	r7, sp, #0
    rc_receive_switch();
 8008934:	f7ff ff9a 	bl	800886c <rc_receive_switch>
    if (device->state)
 8008938:	4b06      	ldr	r3, [pc, #24]	; (8008954 <rc_receive_handler+0x24>)
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	789b      	ldrb	r3, [r3, #2]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d005      	beq.n	800894e <rc_receive_handler+0x1e>
    {
        rc_receive_work();
 8008942:	f7ff ff57 	bl	80087f4 <rc_receive_work>
        rc_receive_fan();
 8008946:	f7ff feb5 	bl	80086b4 <rc_receive_fan>
        rc_receive_temp();
 800894a:	f7ff fe69 	bl	8008620 <rc_receive_temp>
    }
}
 800894e:	bf00      	nop
 8008950:	bd80      	pop	{r7, pc}
 8008952:	bf00      	nop
 8008954:	20013a78 	.word	0x20013a78

08008958 <check_limit_temp>:

void check_limit_temp()
{
 8008958:	b580      	push	{r7, lr}
 800895a:	af00      	add	r7, sp, #0
    if (limit_temp)
 800895c:	4b08      	ldr	r3, [pc, #32]	; (8008980 <check_limit_temp+0x28>)
 800895e:	781b      	ldrb	r3, [r3, #0]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d00a      	beq.n	800897a <check_limit_temp+0x22>
    {
        limit_temp = false;
 8008964:	4b06      	ldr	r3, [pc, #24]	; (8008980 <check_limit_temp+0x28>)
 8008966:	2200      	movs	r2, #0
 8008968:	701a      	strb	r2, [r3, #0]
        modbus_set_holding(DEFAUL_PULT_ID, REG_TEMP, reg_temp);
 800896a:	4b06      	ldr	r3, [pc, #24]	; (8008984 <check_limit_temp+0x2c>)
 800896c:	781b      	ldrb	r3, [r3, #0]
 800896e:	b29b      	uxth	r3, r3
 8008970:	461a      	mov	r2, r3
 8008972:	2102      	movs	r1, #2
 8008974:	2001      	movs	r0, #1
 8008976:	f7ff fe2b 	bl	80085d0 <modbus_set_holding>
    }
}
 800897a:	bf00      	nop
 800897c:	bd80      	pop	{r7, pc}
 800897e:	bf00      	nop
 8008980:	2001400b 	.word	0x2001400b
 8008984:	20014014 	.word	0x20014014

08008988 <check_limit_fan>:

void check_limit_fan()
{
 8008988:	b580      	push	{r7, lr}
 800898a:	af00      	add	r7, sp, #0
    if (limit_fan)
 800898c:	4b08      	ldr	r3, [pc, #32]	; (80089b0 <check_limit_fan+0x28>)
 800898e:	781b      	ldrb	r3, [r3, #0]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d00a      	beq.n	80089aa <check_limit_fan+0x22>
    {
        limit_fan = false;
 8008994:	4b06      	ldr	r3, [pc, #24]	; (80089b0 <check_limit_fan+0x28>)
 8008996:	2200      	movs	r2, #0
 8008998:	701a      	strb	r2, [r3, #0]
        modbus_set_holding(DEFAUL_PULT_ID, REG_FAN, reg_fan);
 800899a:	4b06      	ldr	r3, [pc, #24]	; (80089b4 <check_limit_fan+0x2c>)
 800899c:	781b      	ldrb	r3, [r3, #0]
 800899e:	b29b      	uxth	r3, r3
 80089a0:	461a      	mov	r2, r3
 80089a2:	2101      	movs	r1, #1
 80089a4:	2001      	movs	r0, #1
 80089a6:	f7ff fe13 	bl	80085d0 <modbus_set_holding>
    }
}
 80089aa:	bf00      	nop
 80089ac:	bd80      	pop	{r7, pc}
 80089ae:	bf00      	nop
 80089b0:	20014016 	.word	0x20014016
 80089b4:	20014015 	.word	0x20014015

080089b8 <check_limit_work>:

void check_limit_work()
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	af00      	add	r7, sp, #0
    if (limit_work)
 80089bc:	4b08      	ldr	r3, [pc, #32]	; (80089e0 <check_limit_work+0x28>)
 80089be:	781b      	ldrb	r3, [r3, #0]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d00a      	beq.n	80089da <check_limit_work+0x22>
    {
        limit_work = false;
 80089c4:	4b06      	ldr	r3, [pc, #24]	; (80089e0 <check_limit_work+0x28>)
 80089c6:	2200      	movs	r2, #0
 80089c8:	701a      	strb	r2, [r3, #0]
        modbus_set_holding(DEFAUL_PULT_ID, REG_WORK, reg_work);
 80089ca:	4b06      	ldr	r3, [pc, #24]	; (80089e4 <check_limit_work+0x2c>)
 80089cc:	781b      	ldrb	r3, [r3, #0]
 80089ce:	b29b      	uxth	r3, r3
 80089d0:	461a      	mov	r2, r3
 80089d2:	2107      	movs	r1, #7
 80089d4:	2001      	movs	r0, #1
 80089d6:	f7ff fdfb 	bl	80085d0 <modbus_set_holding>
    }
}
 80089da:	bf00      	nop
 80089dc:	bd80      	pop	{r7, pc}
 80089de:	bf00      	nop
 80089e0:	2000006d 	.word	0x2000006d
 80089e4:	2001401c 	.word	0x2001401c

080089e8 <check_changes>:

void check_changes()
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	af00      	add	r7, sp, #0
    // проверяем изменения вкл/выкл прибора
    if (device->state != reg_switch)
 80089ec:	4b72      	ldr	r3, [pc, #456]	; (8008bb8 <check_changes+0x1d0>)
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	789b      	ldrb	r3, [r3, #2]
 80089f2:	461a      	mov	r2, r3
 80089f4:	4b71      	ldr	r3, [pc, #452]	; (8008bbc <check_changes+0x1d4>)
 80089f6:	781b      	ldrb	r3, [r3, #0]
 80089f8:	429a      	cmp	r2, r3
 80089fa:	d008      	beq.n	8008a0e <check_changes+0x26>
        modbus_set_holding(DEFAUL_PULT_ID, REG_SWITCH, device->state);
 80089fc:	4b6e      	ldr	r3, [pc, #440]	; (8008bb8 <check_changes+0x1d0>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	789b      	ldrb	r3, [r3, #2]
 8008a02:	b29b      	uxth	r3, r3
 8008a04:	461a      	mov	r2, r3
 8008a06:	2100      	movs	r1, #0
 8008a08:	2001      	movs	r0, #1
 8008a0a:	f7ff fde1 	bl	80085d0 <modbus_set_holding>
    if (device->state == ON)
 8008a0e:	4b6a      	ldr	r3, [pc, #424]	; (8008bb8 <check_changes+0x1d0>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	789b      	ldrb	r3, [r3, #2]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	f000 80cc 	beq.w	8008bb2 <check_changes+0x1ca>
    {
        // проверяем изменения в установке выбранного режима
        if (device->mode != reg_work)
 8008a1a:	4b67      	ldr	r3, [pc, #412]	; (8008bb8 <check_changes+0x1d0>)
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	7b5a      	ldrb	r2, [r3, #13]
 8008a20:	4b67      	ldr	r3, [pc, #412]	; (8008bc0 <check_changes+0x1d8>)
 8008a22:	781b      	ldrb	r3, [r3, #0]
 8008a24:	429a      	cmp	r2, r3
 8008a26:	d02b      	beq.n	8008a80 <check_changes+0x98>
        {
            if (device->mode == INFLOW_MODE)
 8008a28:	4b63      	ldr	r3, [pc, #396]	; (8008bb8 <check_changes+0x1d0>)
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	7b5b      	ldrb	r3, [r3, #13]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d107      	bne.n	8008a42 <check_changes+0x5a>
            {
                modbus_set_holding(DEFAUL_PULT_ID, REG_WORK, 0);
 8008a32:	2200      	movs	r2, #0
 8008a34:	2107      	movs	r1, #7
 8008a36:	2001      	movs	r0, #1
 8008a38:	f7ff fdca 	bl	80085d0 <modbus_set_holding>
                DEBUG_RC("sent a message INFLOW_MODE\n");
 8008a3c:	4861      	ldr	r0, [pc, #388]	; (8008bc4 <check_changes+0x1dc>)
 8008a3e:	f01c ff3b 	bl	80258b8 <puts>
            }
            if (device->mode == SMART_MODE)
 8008a42:	4b5d      	ldr	r3, [pc, #372]	; (8008bb8 <check_changes+0x1d0>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	7b5b      	ldrb	r3, [r3, #13]
 8008a48:	2b01      	cmp	r3, #1
 8008a4a:	d107      	bne.n	8008a5c <check_changes+0x74>
            {
                modbus_set_holding(DEFAUL_PULT_ID, REG_WORK, 1);
 8008a4c:	2201      	movs	r2, #1
 8008a4e:	2107      	movs	r1, #7
 8008a50:	2001      	movs	r0, #1
 8008a52:	f7ff fdbd 	bl	80085d0 <modbus_set_holding>
                DEBUG_RC("sent a message SMART_MODE\n");
 8008a56:	485c      	ldr	r0, [pc, #368]	; (8008bc8 <check_changes+0x1e0>)
 8008a58:	f01c ff2e 	bl	80258b8 <puts>
            }
            if (device->mode == INFLOW_MAX_MODE)
 8008a5c:	4b56      	ldr	r3, [pc, #344]	; (8008bb8 <check_changes+0x1d0>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	7b5b      	ldrb	r3, [r3, #13]
 8008a62:	2b02      	cmp	r3, #2
 8008a64:	d10c      	bne.n	8008a80 <check_changes+0x98>
            {
                modbus_set_holding(DEFAUL_PULT_ID, REG_WORK, 0);
 8008a66:	2200      	movs	r2, #0
 8008a68:	2107      	movs	r1, #7
 8008a6a:	2001      	movs	r0, #1
 8008a6c:	f7ff fdb0 	bl	80085d0 <modbus_set_holding>
                modbus_set_holding(DEFAUL_PULT_ID, REG_FAN, 4);
 8008a70:	2204      	movs	r2, #4
 8008a72:	2101      	movs	r1, #1
 8008a74:	2001      	movs	r0, #1
 8008a76:	f7ff fdab 	bl	80085d0 <modbus_set_holding>
                DEBUG_RC("sent a message INFLOW_MAX_MODE\n");
 8008a7a:	4854      	ldr	r0, [pc, #336]	; (8008bcc <check_changes+0x1e4>)
 8008a7c:	f01c ff1c 	bl	80258b8 <puts>
            }
        }
        // проверяем изменения в установке скорости режима INFLOW_MODE
        if (device->mode == INFLOW_MODE)
 8008a80:	4b4d      	ldr	r3, [pc, #308]	; (8008bb8 <check_changes+0x1d0>)
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	7b5b      	ldrb	r3, [r3, #13]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d155      	bne.n	8008b36 <check_changes+0x14e>
        {
            // проверяем изменения в установке 1 скорости
            if (device->inflow_speed == 1 && reg_fan != 1)
 8008a8a:	4b4b      	ldr	r3, [pc, #300]	; (8008bb8 <check_changes+0x1d0>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	7bdb      	ldrb	r3, [r3, #15]
 8008a90:	2b01      	cmp	r3, #1
 8008a92:	d10c      	bne.n	8008aae <check_changes+0xc6>
 8008a94:	4b4e      	ldr	r3, [pc, #312]	; (8008bd0 <check_changes+0x1e8>)
 8008a96:	781b      	ldrb	r3, [r3, #0]
 8008a98:	2b01      	cmp	r3, #1
 8008a9a:	d008      	beq.n	8008aae <check_changes+0xc6>
            {
                modbus_set_holding(DEFAUL_PULT_ID, REG_FAN, 1);
 8008a9c:	2201      	movs	r2, #1
 8008a9e:	2101      	movs	r1, #1
 8008aa0:	2001      	movs	r0, #1
 8008aa2:	f7ff fd95 	bl	80085d0 <modbus_set_holding>
                DEBUG_RC("sent a message speed == 1\n");
 8008aa6:	484b      	ldr	r0, [pc, #300]	; (8008bd4 <check_changes+0x1ec>)
 8008aa8:	f01c ff06 	bl	80258b8 <puts>
 8008aac:	e043      	b.n	8008b36 <check_changes+0x14e>
            }
            // проверяем изменения в установке 3 скорости
            else if ((device->inflow_speed == 2 || device->inflow_speed == 3 || device->inflow_speed == 4) && reg_fan != 2)
 8008aae:	4b42      	ldr	r3, [pc, #264]	; (8008bb8 <check_changes+0x1d0>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	7bdb      	ldrb	r3, [r3, #15]
 8008ab4:	2b02      	cmp	r3, #2
 8008ab6:	d009      	beq.n	8008acc <check_changes+0xe4>
 8008ab8:	4b3f      	ldr	r3, [pc, #252]	; (8008bb8 <check_changes+0x1d0>)
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	7bdb      	ldrb	r3, [r3, #15]
 8008abe:	2b03      	cmp	r3, #3
 8008ac0:	d004      	beq.n	8008acc <check_changes+0xe4>
 8008ac2:	4b3d      	ldr	r3, [pc, #244]	; (8008bb8 <check_changes+0x1d0>)
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	7bdb      	ldrb	r3, [r3, #15]
 8008ac8:	2b04      	cmp	r3, #4
 8008aca:	d10c      	bne.n	8008ae6 <check_changes+0xfe>
 8008acc:	4b40      	ldr	r3, [pc, #256]	; (8008bd0 <check_changes+0x1e8>)
 8008ace:	781b      	ldrb	r3, [r3, #0]
 8008ad0:	2b02      	cmp	r3, #2
 8008ad2:	d008      	beq.n	8008ae6 <check_changes+0xfe>
            {
                modbus_set_holding(DEFAUL_PULT_ID, REG_FAN, 2);
 8008ad4:	2202      	movs	r2, #2
 8008ad6:	2101      	movs	r1, #1
 8008ad8:	2001      	movs	r0, #1
 8008ada:	f7ff fd79 	bl	80085d0 <modbus_set_holding>
                DEBUG_RC("sent a message speed == 3\n");
 8008ade:	483e      	ldr	r0, [pc, #248]	; (8008bd8 <check_changes+0x1f0>)
 8008ae0:	f01c feea 	bl	80258b8 <puts>
 8008ae4:	e027      	b.n	8008b36 <check_changes+0x14e>
            }
            // проверяем изменения в установке 5 скорости
            else if ((device->inflow_speed == 5 || device->inflow_speed == 6) && reg_fan != 3)
 8008ae6:	4b34      	ldr	r3, [pc, #208]	; (8008bb8 <check_changes+0x1d0>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	7bdb      	ldrb	r3, [r3, #15]
 8008aec:	2b05      	cmp	r3, #5
 8008aee:	d004      	beq.n	8008afa <check_changes+0x112>
 8008af0:	4b31      	ldr	r3, [pc, #196]	; (8008bb8 <check_changes+0x1d0>)
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	7bdb      	ldrb	r3, [r3, #15]
 8008af6:	2b06      	cmp	r3, #6
 8008af8:	d10c      	bne.n	8008b14 <check_changes+0x12c>
 8008afa:	4b35      	ldr	r3, [pc, #212]	; (8008bd0 <check_changes+0x1e8>)
 8008afc:	781b      	ldrb	r3, [r3, #0]
 8008afe:	2b03      	cmp	r3, #3
 8008b00:	d008      	beq.n	8008b14 <check_changes+0x12c>
            {
                modbus_set_holding(DEFAUL_PULT_ID, REG_FAN, 3);
 8008b02:	2203      	movs	r2, #3
 8008b04:	2101      	movs	r1, #1
 8008b06:	2001      	movs	r0, #1
 8008b08:	f7ff fd62 	bl	80085d0 <modbus_set_holding>
                DEBUG_RC("sent a message speed == 5\n");
 8008b0c:	4833      	ldr	r0, [pc, #204]	; (8008bdc <check_changes+0x1f4>)
 8008b0e:	f01c fed3 	bl	80258b8 <puts>
 8008b12:	e010      	b.n	8008b36 <check_changes+0x14e>
            }
            // проверяем изменения в установке 7 скорости
            else if (device->inflow_speed == 7 && reg_fan != 4)
 8008b14:	4b28      	ldr	r3, [pc, #160]	; (8008bb8 <check_changes+0x1d0>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	7bdb      	ldrb	r3, [r3, #15]
 8008b1a:	2b07      	cmp	r3, #7
 8008b1c:	d10b      	bne.n	8008b36 <check_changes+0x14e>
 8008b1e:	4b2c      	ldr	r3, [pc, #176]	; (8008bd0 <check_changes+0x1e8>)
 8008b20:	781b      	ldrb	r3, [r3, #0]
 8008b22:	2b04      	cmp	r3, #4
 8008b24:	d007      	beq.n	8008b36 <check_changes+0x14e>
            {
                modbus_set_holding(DEFAUL_PULT_ID, REG_FAN, 4);
 8008b26:	2204      	movs	r2, #4
 8008b28:	2101      	movs	r1, #1
 8008b2a:	2001      	movs	r0, #1
 8008b2c:	f7ff fd50 	bl	80085d0 <modbus_set_holding>
                DEBUG_RC("sent a message speed == 7\n");
 8008b30:	482b      	ldr	r0, [pc, #172]	; (8008be0 <check_changes+0x1f8>)
 8008b32:	f01c fec1 	bl	80258b8 <puts>
            }
        }
        // проверяем изменения в установке температуры тена
        if (heaters->ten.temp_limit != reg_temp)
 8008b36:	4b2b      	ldr	r3, [pc, #172]	; (8008be4 <check_changes+0x1fc>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	685b      	ldr	r3, [r3, #4]
 8008b3c:	4a2a      	ldr	r2, [pc, #168]	; (8008be8 <check_changes+0x200>)
 8008b3e:	7812      	ldrb	r2, [r2, #0]
 8008b40:	4293      	cmp	r3, r2
 8008b42:	d00b      	beq.n	8008b5c <check_changes+0x174>
        {
            modbus_set_holding(DEFAUL_PULT_ID, REG_TEMP, heaters->ten.temp_limit);
 8008b44:	4b27      	ldr	r3, [pc, #156]	; (8008be4 <check_changes+0x1fc>)
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	685b      	ldr	r3, [r3, #4]
 8008b4a:	b29b      	uxth	r3, r3
 8008b4c:	461a      	mov	r2, r3
 8008b4e:	2102      	movs	r1, #2
 8008b50:	2001      	movs	r0, #1
 8008b52:	f7ff fd3d 	bl	80085d0 <modbus_set_holding>
            DEBUG_RC("sent a message ten");
 8008b56:	4825      	ldr	r0, [pc, #148]	; (8008bec <check_changes+0x204>)
 8008b58:	f01c fe28 	bl	80257ac <iprintf>
        }
        // проверяем изменения в установке значка включения тена
        if (heaters->ten.power > 0 && !reg_heater)
 8008b5c:	4b21      	ldr	r3, [pc, #132]	; (8008be4 <check_changes+0x1fc>)
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	8a1b      	ldrh	r3, [r3, #16]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d011      	beq.n	8008b8a <check_changes+0x1a2>
 8008b66:	4b22      	ldr	r3, [pc, #136]	; (8008bf0 <check_changes+0x208>)
 8008b68:	781b      	ldrb	r3, [r3, #0]
 8008b6a:	f083 0301 	eor.w	r3, r3, #1
 8008b6e:	b2db      	uxtb	r3, r3
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d00a      	beq.n	8008b8a <check_changes+0x1a2>
        {
            reg_heater = true;
 8008b74:	4b1e      	ldr	r3, [pc, #120]	; (8008bf0 <check_changes+0x208>)
 8008b76:	2201      	movs	r2, #1
 8008b78:	701a      	strb	r2, [r3, #0]
            modbus_set_holding(DEFAUL_PULT_ID, REG_HEATER, ON);
 8008b7a:	2201      	movs	r2, #1
 8008b7c:	210a      	movs	r1, #10
 8008b7e:	2001      	movs	r0, #1
 8008b80:	f7ff fd26 	bl	80085d0 <modbus_set_holding>
            DEBUG_RC("sent a message ten.power > 0\n");
 8008b84:	481b      	ldr	r0, [pc, #108]	; (8008bf4 <check_changes+0x20c>)
 8008b86:	f01c fe97 	bl	80258b8 <puts>
        }
        if (heaters->ten.power == 0 && reg_heater)
 8008b8a:	4b16      	ldr	r3, [pc, #88]	; (8008be4 <check_changes+0x1fc>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	8a1b      	ldrh	r3, [r3, #16]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d10e      	bne.n	8008bb2 <check_changes+0x1ca>
 8008b94:	4b16      	ldr	r3, [pc, #88]	; (8008bf0 <check_changes+0x208>)
 8008b96:	781b      	ldrb	r3, [r3, #0]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d00a      	beq.n	8008bb2 <check_changes+0x1ca>
        {
            reg_heater = false;
 8008b9c:	4b14      	ldr	r3, [pc, #80]	; (8008bf0 <check_changes+0x208>)
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	701a      	strb	r2, [r3, #0]
            modbus_set_holding(DEFAUL_PULT_ID, REG_HEATER, OFF);
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	210a      	movs	r1, #10
 8008ba6:	2001      	movs	r0, #1
 8008ba8:	f7ff fd12 	bl	80085d0 <modbus_set_holding>
            DEBUG_RC("sent a message ten.power = 0\n");
 8008bac:	4812      	ldr	r0, [pc, #72]	; (8008bf8 <check_changes+0x210>)
 8008bae:	f01c fe83 	bl	80258b8 <puts>
        }
    }
}
 8008bb2:	bf00      	nop
 8008bb4:	bd80      	pop	{r7, pc}
 8008bb6:	bf00      	nop
 8008bb8:	20013a78 	.word	0x20013a78
 8008bbc:	2001400a 	.word	0x2001400a
 8008bc0:	2001401c 	.word	0x2001401c
 8008bc4:	0802a918 	.word	0x0802a918
 8008bc8:	0802a944 	.word	0x0802a944
 8008bcc:	0802a970 	.word	0x0802a970
 8008bd0:	20014015 	.word	0x20014015
 8008bd4:	0802a9a0 	.word	0x0802a9a0
 8008bd8:	0802a9cc 	.word	0x0802a9cc
 8008bdc:	0802a9f8 	.word	0x0802a9f8
 8008be0:	0802aa24 	.word	0x0802aa24
 8008be4:	200139cc 	.word	0x200139cc
 8008be8:	20014014 	.word	0x20014014
 8008bec:	0802aa50 	.word	0x0802aa50
 8008bf0:	2000006c 	.word	0x2000006c
 8008bf4:	0802aa74 	.word	0x0802aa74
 8008bf8:	0802aaa4 	.word	0x0802aaa4

08008bfc <rc_send_handler>:

void rc_send_handler()
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	af00      	add	r7, sp, #0
    check_limit_fan();
 8008c00:	f7ff fec2 	bl	8008988 <check_limit_fan>
    check_limit_temp();
 8008c04:	f7ff fea8 	bl	8008958 <check_limit_temp>
    check_changes();
 8008c08:	f7ff feee 	bl	80089e8 <check_changes>
    check_limit_work();
 8008c0c:	f7ff fed4 	bl	80089b8 <check_limit_work>
}
 8008c10:	bf00      	nop
 8008c12:	bd80      	pop	{r7, pc}

08008c14 <try_connect>:

void try_connect()
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	af00      	add	r7, sp, #0
    count_link++;
 8008c18:	4b12      	ldr	r3, [pc, #72]	; (8008c64 <try_connect+0x50>)
 8008c1a:	781b      	ldrb	r3, [r3, #0]
 8008c1c:	3301      	adds	r3, #1
 8008c1e:	b2da      	uxtb	r2, r3
 8008c20:	4b10      	ldr	r3, [pc, #64]	; (8008c64 <try_connect+0x50>)
 8008c22:	701a      	strb	r2, [r3, #0]
    if (count_link == LIMIT_LINK)
 8008c24:	4b0f      	ldr	r3, [pc, #60]	; (8008c64 <try_connect+0x50>)
 8008c26:	781b      	ldrb	r3, [r3, #0]
 8008c28:	2b1e      	cmp	r3, #30
 8008c2a:	d119      	bne.n	8008c60 <try_connect+0x4c>
    {
        count_link = 0;
 8008c2c:	4b0d      	ldr	r3, [pc, #52]	; (8008c64 <try_connect+0x50>)
 8008c2e:	2200      	movs	r2, #0
 8008c30:	701a      	strb	r2, [r3, #0]
//        mbc_master_destroy();
//        start_modbus_master();
        new_reg_switch = modbus_get_holding(DEFAUL_PULT_ID, REG_SWITCH);
 8008c32:	2100      	movs	r1, #0
 8008c34:	2001      	movs	r0, #1
 8008c36:	f7ff fcdf 	bl	80085f8 <modbus_get_holding>
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	b21a      	sxth	r2, r3
 8008c3e:	4b0a      	ldr	r3, [pc, #40]	; (8008c68 <try_connect+0x54>)
 8008c40:	801a      	strh	r2, [r3, #0]
        if (new_reg_switch >= 0)
 8008c42:	4b09      	ldr	r3, [pc, #36]	; (8008c68 <try_connect+0x54>)
 8008c44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	db09      	blt.n	8008c60 <try_connect+0x4c>
        {
            DEBUG_RC("connect pult\n");
 8008c4c:	4807      	ldr	r0, [pc, #28]	; (8008c6c <try_connect+0x58>)
 8008c4e:	f01c fe33 	bl	80258b8 <puts>
            pult_link = true;
 8008c52:	4b07      	ldr	r3, [pc, #28]	; (8008c70 <try_connect+0x5c>)
 8008c54:	2201      	movs	r2, #1
 8008c56:	701a      	strb	r2, [r3, #0]
            device->remote_control.error = OFF;
 8008c58:	4b06      	ldr	r3, [pc, #24]	; (8008c74 <try_connect+0x60>)
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	72da      	strb	r2, [r3, #11]
        }
    }
}
 8008c60:	bf00      	nop
 8008c62:	bd80      	pop	{r7, pc}
 8008c64:	2000006f 	.word	0x2000006f
 8008c68:	20014008 	.word	0x20014008
 8008c6c:	0802aad4 	.word	0x0802aad4
 8008c70:	10000044 	.word	0x10000044
 8008c74:	20013a78 	.word	0x20013a78

08008c78 <RemoteControlTask>:

void RemoteControlTask(void *argument)
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b082      	sub	sp, #8
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
	for (;;)
	{
        if (pult_link)
 8008c80:	4b07      	ldr	r3, [pc, #28]	; (8008ca0 <RemoteControlTask+0x28>)
 8008c82:	781b      	ldrb	r3, [r3, #0]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d004      	beq.n	8008c92 <RemoteControlTask+0x1a>
        {
            rc_receive_handler();
 8008c88:	f7ff fe52 	bl	8008930 <rc_receive_handler>
            rc_send_handler();
 8008c8c:	f7ff ffb6 	bl	8008bfc <rc_send_handler>
 8008c90:	e001      	b.n	8008c96 <RemoteControlTask+0x1e>
        }
        else
        {
        	try_connect();
 8008c92:	f7ff ffbf 	bl	8008c14 <try_connect>
        }
		osDelay(1000);
 8008c96:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008c9a:	f009 f826 	bl	8011cea <osDelay>
        if (pult_link)
 8008c9e:	e7ef      	b.n	8008c80 <RemoteControlTask+0x8>
 8008ca0:	10000044 	.word	0x10000044

08008ca4 <create_remote_control_task>:
	}
}

void create_remote_control_task()
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	af00      	add	r7, sp, #0
	modbusMasterTaskHandle = osThreadNew(RemoteControlTask, NULL, &modbusMasterTask_attributes);
 8008ca8:	4a04      	ldr	r2, [pc, #16]	; (8008cbc <create_remote_control_task+0x18>)
 8008caa:	2100      	movs	r1, #0
 8008cac:	4804      	ldr	r0, [pc, #16]	; (8008cc0 <create_remote_control_task+0x1c>)
 8008cae:	f008 ff7e 	bl	8011bae <osThreadNew>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	4a03      	ldr	r2, [pc, #12]	; (8008cc4 <create_remote_control_task+0x20>)
 8008cb6:	6013      	str	r3, [r2, #0]
}
 8008cb8:	bf00      	nop
 8008cba:	bd80      	pop	{r7, pc}
 8008cbc:	0802e274 	.word	0x0802e274
 8008cc0:	08008c79 	.word	0x08008c79
 8008cc4:	20014010 	.word	0x20014010

08008cc8 <check_remote_control>:

void check_remote_control()
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	af00      	add	r7, sp, #0
	if (modbus_set_holding(DEFAUL_PULT_ID, REG_SWITCH, 0) == 1)
 8008ccc:	2200      	movs	r2, #0
 8008cce:	2100      	movs	r1, #0
 8008cd0:	2001      	movs	r0, #1
 8008cd2:	f7ff fc7d 	bl	80085d0 <modbus_set_holding>
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	2b01      	cmp	r3, #1
 8008cda:	d106      	bne.n	8008cea <check_remote_control+0x22>
	{
		device->remote_control.find = ON;
 8008cdc:	4b08      	ldr	r3, [pc, #32]	; (8008d00 <check_remote_control+0x38>)
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	2201      	movs	r2, #1
 8008ce2:	729a      	strb	r2, [r3, #10]
		create_remote_control_task();
 8008ce4:	f7ff ffde 	bl	8008ca4 <create_remote_control_task>
	    {
	        device->remote_control.error = ON;
	    }
	}
//	write_device_params();
}
 8008ce8:	e008      	b.n	8008cfc <check_remote_control+0x34>
	    if (device->remote_control.find)
 8008cea:	4b05      	ldr	r3, [pc, #20]	; (8008d00 <check_remote_control+0x38>)
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	7a9b      	ldrb	r3, [r3, #10]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d003      	beq.n	8008cfc <check_remote_control+0x34>
	        device->remote_control.error = ON;
 8008cf4:	4b02      	ldr	r3, [pc, #8]	; (8008d00 <check_remote_control+0x38>)
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	2201      	movs	r2, #1
 8008cfa:	72da      	strb	r2, [r3, #11]
}
 8008cfc:	bf00      	nop
 8008cfe:	bd80      	pop	{r7, pc}
 8008d00:	20013a78 	.word	0x20013a78

08008d04 <middle_temp>:
uint8_t point[6] = {25, 25, 25, 25, 25, 25};
uint8_t ave = 25;


void middle_temp()
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b084      	sub	sp, #16
 8008d08:	af00      	add	r7, sp, #0
    float sum = 0.0; // переменная для суммы чисел в массиве
 8008d0a:	f04f 0300 	mov.w	r3, #0
 8008d0e:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < 6; i++)
 8008d10:	2300      	movs	r3, #0
 8008d12:	60bb      	str	r3, [r7, #8]
 8008d14:	e010      	b.n	8008d38 <middle_temp+0x34>
    {
        sum += point[i]; // накапливаем сумму
 8008d16:	4a16      	ldr	r2, [pc, #88]	; (8008d70 <middle_temp+0x6c>)
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	4413      	add	r3, r2
 8008d1c:	781b      	ldrb	r3, [r3, #0]
 8008d1e:	ee07 3a90 	vmov	s15, r3
 8008d22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008d26:	ed97 7a03 	vldr	s14, [r7, #12]
 8008d2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008d2e:	edc7 7a03 	vstr	s15, [r7, #12]
    for (int i = 0; i < 6; i++)
 8008d32:	68bb      	ldr	r3, [r7, #8]
 8008d34:	3301      	adds	r3, #1
 8008d36:	60bb      	str	r3, [r7, #8]
 8008d38:	68bb      	ldr	r3, [r7, #8]
 8008d3a:	2b05      	cmp	r3, #5
 8008d3c:	ddeb      	ble.n	8008d16 <middle_temp+0x12>
    }
    ave = (float)sum / 6; // вычисляем среднее арифметическое
 8008d3e:	ed97 7a03 	vldr	s14, [r7, #12]
 8008d42:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8008d46:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008d4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d4e:	edc7 7a01 	vstr	s15, [r7, #4]
 8008d52:	793b      	ldrb	r3, [r7, #4]
 8008d54:	b2da      	uxtb	r2, r3
 8008d56:	4b07      	ldr	r3, [pc, #28]	; (8008d74 <middle_temp+0x70>)
 8008d58:	701a      	strb	r2, [r3, #0]
    DEBUG_DS("AVE =%i\n", ave);
 8008d5a:	4b06      	ldr	r3, [pc, #24]	; (8008d74 <middle_temp+0x70>)
 8008d5c:	781b      	ldrb	r3, [r3, #0]
 8008d5e:	4619      	mov	r1, r3
 8008d60:	4805      	ldr	r0, [pc, #20]	; (8008d78 <middle_temp+0x74>)
 8008d62:	f01c fd23 	bl	80257ac <iprintf>
}
 8008d66:	bf00      	nop
 8008d68:	3710      	adds	r7, #16
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}
 8008d6e:	bf00      	nop
 8008d70:	10000048 	.word	0x10000048
 8008d74:	1000004e 	.word	0x1000004e
 8008d78:	0802aaf4 	.word	0x0802aaf4

08008d7c <mass_temp>:

void mass_temp()
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b082      	sub	sp, #8
 8008d80:	af00      	add	r7, sp, #0
    if (count < 6)
 8008d82:	4b15      	ldr	r3, [pc, #84]	; (8008dd8 <mass_temp+0x5c>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	2b05      	cmp	r3, #5
 8008d88:	d806      	bhi.n	8008d98 <mass_temp+0x1c>
    {
        point[count] = temp[1]; //sensors_data->out;
 8008d8a:	4b13      	ldr	r3, [pc, #76]	; (8008dd8 <mass_temp+0x5c>)
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	4a13      	ldr	r2, [pc, #76]	; (8008ddc <mass_temp+0x60>)
 8008d90:	7851      	ldrb	r1, [r2, #1]
 8008d92:	4a13      	ldr	r2, [pc, #76]	; (8008de0 <mass_temp+0x64>)
 8008d94:	54d1      	strb	r1, [r2, r3]
 8008d96:	e013      	b.n	8008dc0 <mass_temp+0x44>
    }
    else
    {
        for (uint8_t i = 0; i < 5; i++)
 8008d98:	2300      	movs	r3, #0
 8008d9a:	71fb      	strb	r3, [r7, #7]
 8008d9c:	e009      	b.n	8008db2 <mass_temp+0x36>
        {
            point[i] = point[i + 1];
 8008d9e:	79fb      	ldrb	r3, [r7, #7]
 8008da0:	1c5a      	adds	r2, r3, #1
 8008da2:	79fb      	ldrb	r3, [r7, #7]
 8008da4:	490e      	ldr	r1, [pc, #56]	; (8008de0 <mass_temp+0x64>)
 8008da6:	5c89      	ldrb	r1, [r1, r2]
 8008da8:	4a0d      	ldr	r2, [pc, #52]	; (8008de0 <mass_temp+0x64>)
 8008daa:	54d1      	strb	r1, [r2, r3]
        for (uint8_t i = 0; i < 5; i++)
 8008dac:	79fb      	ldrb	r3, [r7, #7]
 8008dae:	3301      	adds	r3, #1
 8008db0:	71fb      	strb	r3, [r7, #7]
 8008db2:	79fb      	ldrb	r3, [r7, #7]
 8008db4:	2b04      	cmp	r3, #4
 8008db6:	d9f2      	bls.n	8008d9e <mass_temp+0x22>
        }
        point[5] = temp[1]; //sensors_data->out;
 8008db8:	4b08      	ldr	r3, [pc, #32]	; (8008ddc <mass_temp+0x60>)
 8008dba:	785a      	ldrb	r2, [r3, #1]
 8008dbc:	4b08      	ldr	r3, [pc, #32]	; (8008de0 <mass_temp+0x64>)
 8008dbe:	715a      	strb	r2, [r3, #5]
    }
    count++;
 8008dc0:	4b05      	ldr	r3, [pc, #20]	; (8008dd8 <mass_temp+0x5c>)
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	3301      	adds	r3, #1
 8008dc6:	4a04      	ldr	r2, [pc, #16]	; (8008dd8 <mass_temp+0x5c>)
 8008dc8:	6013      	str	r3, [r2, #0]
//    DEBUG_DS("POINT[1]=%i\n", point[1]);
//    DEBUG_DS("POINT[2]=%i\n", point[2]);
//    DEBUG_DS("POINT[3]=%i\n", point[3]);
//    DEBUG_DS("POINT[4]=%i\n", point[4]);
//    DEBUG_DS("POINT[5]=%i\n", point[5]);
    middle_temp();
 8008dca:	f7ff ff9b 	bl	8008d04 <middle_temp>
}
 8008dce:	bf00      	nop
 8008dd0:	3708      	adds	r7, #8
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd80      	pop	{r7, pc}
 8008dd6:	bf00      	nop
 8008dd8:	200140a4 	.word	0x200140a4
 8008ddc:	20014034 	.word	0x20014034
 8008de0:	10000048 	.word	0x10000048

08008de4 <get_ds_data>:

void get_ds_data()
{
 8008de4:	b590      	push	{r4, r7, lr}
 8008de6:	b083      	sub	sp, #12
 8008de8:	af00      	add	r7, sp, #0
	DS18B20_StartAll(&OW);
 8008dea:	4848      	ldr	r0, [pc, #288]	; (8008f0c <get_ds_data+0x128>)
 8008dec:	f7f8 f95d 	bl	80010aa <DS18B20_StartAll>
	/* Read temperature from device and store it to DS data structure */
	ds_count = 0;
 8008df0:	4b47      	ldr	r3, [pc, #284]	; (8008f10 <get_ds_data+0x12c>)
 8008df2:	2200      	movs	r2, #0
 8008df4:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < OW.RomCnt; i++)
 8008df6:	2300      	movs	r3, #0
 8008df8:	71fb      	strb	r3, [r7, #7]
 8008dfa:	e032      	b.n	8008e62 <get_ds_data+0x7e>
	{
		temp[ds_count] = DS18B20_Read(&OW, DS.DevAddr[i], &DS.Temperature[i]);
 8008dfc:	79fb      	ldrb	r3, [r7, #7]
 8008dfe:	00db      	lsls	r3, r3, #3
 8008e00:	4a44      	ldr	r2, [pc, #272]	; (8008f14 <get_ds_data+0x130>)
 8008e02:	1899      	adds	r1, r3, r2
 8008e04:	79fb      	ldrb	r3, [r7, #7]
 8008e06:	3308      	adds	r3, #8
 8008e08:	009b      	lsls	r3, r3, #2
 8008e0a:	4a42      	ldr	r2, [pc, #264]	; (8008f14 <get_ds_data+0x130>)
 8008e0c:	4413      	add	r3, r2
 8008e0e:	4a40      	ldr	r2, [pc, #256]	; (8008f10 <get_ds_data+0x12c>)
 8008e10:	7812      	ldrb	r2, [r2, #0]
 8008e12:	4614      	mov	r4, r2
 8008e14:	461a      	mov	r2, r3
 8008e16:	483d      	ldr	r0, [pc, #244]	; (8008f0c <get_ds_data+0x128>)
 8008e18:	f7f8 f95a 	bl	80010d0 <DS18B20_Read>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	461a      	mov	r2, r3
 8008e20:	4b3d      	ldr	r3, [pc, #244]	; (8008f18 <get_ds_data+0x134>)
 8008e22:	551a      	strb	r2, [r3, r4]
		sensors_data->in = temp[ds_count];
 8008e24:	4b3a      	ldr	r3, [pc, #232]	; (8008f10 <get_ds_data+0x12c>)
 8008e26:	781b      	ldrb	r3, [r3, #0]
 8008e28:	461a      	mov	r2, r3
 8008e2a:	4b3b      	ldr	r3, [pc, #236]	; (8008f18 <get_ds_data+0x134>)
 8008e2c:	5c9a      	ldrb	r2, [r3, r2]
 8008e2e:	4b3b      	ldr	r3, [pc, #236]	; (8008f1c <get_ds_data+0x138>)
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	ee07 2a90 	vmov	s15, r2
 8008e36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e3a:	edc3 7a02 	vstr	s15, [r3, #8]
		DEBUG_DS("Temperature1 = %i\n", temp[ds_count]);
 8008e3e:	4b34      	ldr	r3, [pc, #208]	; (8008f10 <get_ds_data+0x12c>)
 8008e40:	781b      	ldrb	r3, [r3, #0]
 8008e42:	461a      	mov	r2, r3
 8008e44:	4b34      	ldr	r3, [pc, #208]	; (8008f18 <get_ds_data+0x134>)
 8008e46:	5c9b      	ldrb	r3, [r3, r2]
 8008e48:	4619      	mov	r1, r3
 8008e4a:	4835      	ldr	r0, [pc, #212]	; (8008f20 <get_ds_data+0x13c>)
 8008e4c:	f01c fcae 	bl	80257ac <iprintf>
		ds_count++;
 8008e50:	4b2f      	ldr	r3, [pc, #188]	; (8008f10 <get_ds_data+0x12c>)
 8008e52:	781b      	ldrb	r3, [r3, #0]
 8008e54:	3301      	adds	r3, #1
 8008e56:	b2da      	uxtb	r2, r3
 8008e58:	4b2d      	ldr	r3, [pc, #180]	; (8008f10 <get_ds_data+0x12c>)
 8008e5a:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < OW.RomCnt; i++)
 8008e5c:	79fb      	ldrb	r3, [r7, #7]
 8008e5e:	3301      	adds	r3, #1
 8008e60:	71fb      	strb	r3, [r7, #7]
 8008e62:	4b2a      	ldr	r3, [pc, #168]	; (8008f0c <get_ds_data+0x128>)
 8008e64:	7adb      	ldrb	r3, [r3, #11]
 8008e66:	79fa      	ldrb	r2, [r7, #7]
 8008e68:	429a      	cmp	r2, r3
 8008e6a:	d3c7      	bcc.n	8008dfc <get_ds_data+0x18>
	}
	/* Search Alarm triggered and store in DS data structure */
	DS18B20_AlarmSearch(&DS, &OW);
 8008e6c:	4927      	ldr	r1, [pc, #156]	; (8008f0c <get_ds_data+0x128>)
 8008e6e:	4829      	ldr	r0, [pc, #164]	; (8008f14 <get_ds_data+0x130>)
 8008e70:	f7f8 fab1 	bl	80013d6 <DS18B20_AlarmSearch>

	DS18B20_StartAll(&OW2);
 8008e74:	482b      	ldr	r0, [pc, #172]	; (8008f24 <get_ds_data+0x140>)
 8008e76:	f7f8 f918 	bl	80010aa <DS18B20_StartAll>
	/* Read temperature from device and store it to DS data structure */
	for(uint8_t i = 0; i < OW2.RomCnt; i++)
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	71bb      	strb	r3, [r7, #6]
 8008e7e:	e032      	b.n	8008ee6 <get_ds_data+0x102>
	{
		temp[ds_count] = DS18B20_Read(&OW2, DS2.DevAddr[i], &DS2.Temperature[i]);
 8008e80:	79bb      	ldrb	r3, [r7, #6]
 8008e82:	00db      	lsls	r3, r3, #3
 8008e84:	4a28      	ldr	r2, [pc, #160]	; (8008f28 <get_ds_data+0x144>)
 8008e86:	1899      	adds	r1, r3, r2
 8008e88:	79bb      	ldrb	r3, [r7, #6]
 8008e8a:	3308      	adds	r3, #8
 8008e8c:	009b      	lsls	r3, r3, #2
 8008e8e:	4a26      	ldr	r2, [pc, #152]	; (8008f28 <get_ds_data+0x144>)
 8008e90:	4413      	add	r3, r2
 8008e92:	4a1f      	ldr	r2, [pc, #124]	; (8008f10 <get_ds_data+0x12c>)
 8008e94:	7812      	ldrb	r2, [r2, #0]
 8008e96:	4614      	mov	r4, r2
 8008e98:	461a      	mov	r2, r3
 8008e9a:	4822      	ldr	r0, [pc, #136]	; (8008f24 <get_ds_data+0x140>)
 8008e9c:	f7f8 f918 	bl	80010d0 <DS18B20_Read>
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	461a      	mov	r2, r3
 8008ea4:	4b1c      	ldr	r3, [pc, #112]	; (8008f18 <get_ds_data+0x134>)
 8008ea6:	551a      	strb	r2, [r3, r4]
		sensors_data->out = temp[ds_count];
 8008ea8:	4b19      	ldr	r3, [pc, #100]	; (8008f10 <get_ds_data+0x12c>)
 8008eaa:	781b      	ldrb	r3, [r3, #0]
 8008eac:	461a      	mov	r2, r3
 8008eae:	4b1a      	ldr	r3, [pc, #104]	; (8008f18 <get_ds_data+0x134>)
 8008eb0:	5c9a      	ldrb	r2, [r3, r2]
 8008eb2:	4b1a      	ldr	r3, [pc, #104]	; (8008f1c <get_ds_data+0x138>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	ee07 2a90 	vmov	s15, r2
 8008eba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ebe:	edc3 7a00 	vstr	s15, [r3]
		DEBUG_DS("Temperature2 = %i\n", temp[ds_count]);
 8008ec2:	4b13      	ldr	r3, [pc, #76]	; (8008f10 <get_ds_data+0x12c>)
 8008ec4:	781b      	ldrb	r3, [r3, #0]
 8008ec6:	461a      	mov	r2, r3
 8008ec8:	4b13      	ldr	r3, [pc, #76]	; (8008f18 <get_ds_data+0x134>)
 8008eca:	5c9b      	ldrb	r3, [r3, r2]
 8008ecc:	4619      	mov	r1, r3
 8008ece:	4817      	ldr	r0, [pc, #92]	; (8008f2c <get_ds_data+0x148>)
 8008ed0:	f01c fc6c 	bl	80257ac <iprintf>
		ds_count++;
 8008ed4:	4b0e      	ldr	r3, [pc, #56]	; (8008f10 <get_ds_data+0x12c>)
 8008ed6:	781b      	ldrb	r3, [r3, #0]
 8008ed8:	3301      	adds	r3, #1
 8008eda:	b2da      	uxtb	r2, r3
 8008edc:	4b0c      	ldr	r3, [pc, #48]	; (8008f10 <get_ds_data+0x12c>)
 8008ede:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < OW2.RomCnt; i++)
 8008ee0:	79bb      	ldrb	r3, [r7, #6]
 8008ee2:	3301      	adds	r3, #1
 8008ee4:	71bb      	strb	r3, [r7, #6]
 8008ee6:	4b0f      	ldr	r3, [pc, #60]	; (8008f24 <get_ds_data+0x140>)
 8008ee8:	7adb      	ldrb	r3, [r3, #11]
 8008eea:	79ba      	ldrb	r2, [r7, #6]
 8008eec:	429a      	cmp	r2, r3
 8008eee:	d3c7      	bcc.n	8008e80 <get_ds_data+0x9c>
	}
	DEBUG_DS("ds_count = %i\n", ds_count);
 8008ef0:	4b07      	ldr	r3, [pc, #28]	; (8008f10 <get_ds_data+0x12c>)
 8008ef2:	781b      	ldrb	r3, [r3, #0]
 8008ef4:	4619      	mov	r1, r3
 8008ef6:	480e      	ldr	r0, [pc, #56]	; (8008f30 <get_ds_data+0x14c>)
 8008ef8:	f01c fc58 	bl	80257ac <iprintf>
	/* Search Alarm triggered and store in DS data structure */
	DS18B20_AlarmSearch(&DS2, &OW2);
 8008efc:	4909      	ldr	r1, [pc, #36]	; (8008f24 <get_ds_data+0x140>)
 8008efe:	480a      	ldr	r0, [pc, #40]	; (8008f28 <get_ds_data+0x144>)
 8008f00:	f7f8 fa69 	bl	80013d6 <DS18B20_AlarmSearch>
}
 8008f04:	bf00      	nop
 8008f06:	370c      	adds	r7, #12
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bd90      	pop	{r4, r7, pc}
 8008f0c:	20014038 	.word	0x20014038
 8008f10:	20013e44 	.word	0x20013e44
 8008f14:	20014078 	.word	0x20014078
 8008f18:	20014034 	.word	0x20014034
 8008f1c:	20013a80 	.word	0x20013a80
 8008f20:	0802ab08 	.word	0x0802ab08
 8008f24:	20014020 	.word	0x20014020
 8008f28:	2001404c 	.word	0x2001404c
 8008f2c:	0802ab24 	.word	0x0802ab24
 8008f30:	0802ab40 	.word	0x0802ab40

08008f34 <get_ds_data_mass>:

void get_ds_data_mass()
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	af00      	add	r7, sp, #0
	get_ds_data();
 8008f38:	f7ff ff54 	bl	8008de4 <get_ds_data>
	mass_temp();
 8008f3c:	f7ff ff1e 	bl	8008d7c <mass_temp>
}
 8008f40:	bf00      	nop
 8008f42:	bd80      	pop	{r7, pc}

08008f44 <init_ds_devices>:

void init_ds_devices()
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	af00      	add	r7, sp, #0
	DwtInit();
 8008f48:	f7f8 fac2 	bl	80014d0 <DwtInit>

	OW.DataPin = DS_Pin;
 8008f4c:	4b1d      	ldr	r3, [pc, #116]	; (8008fc4 <init_ds_devices+0x80>)
 8008f4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008f52:	819a      	strh	r2, [r3, #12]
	OW.DataPort = DS_GPIO_Port;
 8008f54:	4b1b      	ldr	r3, [pc, #108]	; (8008fc4 <init_ds_devices+0x80>)
 8008f56:	4a1c      	ldr	r2, [pc, #112]	; (8008fc8 <init_ds_devices+0x84>)
 8008f58:	611a      	str	r2, [r3, #16]
	DS.Resolution = DS18B20_Resolution_12bits;
 8008f5a:	4b1c      	ldr	r3, [pc, #112]	; (8008fcc <init_ds_devices+0x88>)
 8008f5c:	220c      	movs	r2, #12
 8008f5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	DS18B20_Init(&DS, &OW);
 8008f62:	4918      	ldr	r1, [pc, #96]	; (8008fc4 <init_ds_devices+0x80>)
 8008f64:	4819      	ldr	r0, [pc, #100]	; (8008fcc <init_ds_devices+0x88>)
 8008f66:	f7f8 fa76 	bl	8001456 <DS18B20_Init>
	/* Set high temperature alarm on device number 0, 31 Deg C */
	DS18B20_SetTempAlarm(&OW, DS.DevAddr[0], 0, 31);
 8008f6a:	231f      	movs	r3, #31
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	4917      	ldr	r1, [pc, #92]	; (8008fcc <init_ds_devices+0x88>)
 8008f70:	4814      	ldr	r0, [pc, #80]	; (8008fc4 <init_ds_devices+0x80>)
 8008f72:	f7f8 f9b3 	bl	80012dc <DS18B20_SetTempAlarm>
	if(OW.RomCnt == 1)
 8008f76:	4b13      	ldr	r3, [pc, #76]	; (8008fc4 <init_ds_devices+0x80>)
 8008f78:	7adb      	ldrb	r3, [r3, #11]
 8008f7a:	2b01      	cmp	r3, #1
 8008f7c:	d103      	bne.n	8008f86 <init_ds_devices+0x42>
		sensors_data->in_state = true;
 8008f7e:	4b14      	ldr	r3, [pc, #80]	; (8008fd0 <init_ds_devices+0x8c>)
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	2201      	movs	r2, #1
 8008f84:	775a      	strb	r2, [r3, #29]

	OW2.DataPin = DS_Pin2;
 8008f86:	4b13      	ldr	r3, [pc, #76]	; (8008fd4 <init_ds_devices+0x90>)
 8008f88:	2240      	movs	r2, #64	; 0x40
 8008f8a:	819a      	strh	r2, [r3, #12]
	OW2.DataPort = DS_GPIO_Port2;
 8008f8c:	4b11      	ldr	r3, [pc, #68]	; (8008fd4 <init_ds_devices+0x90>)
 8008f8e:	4a12      	ldr	r2, [pc, #72]	; (8008fd8 <init_ds_devices+0x94>)
 8008f90:	611a      	str	r2, [r3, #16]
	DS2.Resolution = DS18B20_Resolution_12bits;
 8008f92:	4b12      	ldr	r3, [pc, #72]	; (8008fdc <init_ds_devices+0x98>)
 8008f94:	220c      	movs	r2, #12
 8008f96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	/* Set high temperature alarm on device number 0, 31 Deg C */
	DS18B20_Init(&DS2, &OW2);
 8008f9a:	490e      	ldr	r1, [pc, #56]	; (8008fd4 <init_ds_devices+0x90>)
 8008f9c:	480f      	ldr	r0, [pc, #60]	; (8008fdc <init_ds_devices+0x98>)
 8008f9e:	f7f8 fa5a 	bl	8001456 <DS18B20_Init>
	DS18B20_SetTempAlarm(&OW2, DS2.DevAddr[0], 0, 60);
 8008fa2:	233c      	movs	r3, #60	; 0x3c
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	490d      	ldr	r1, [pc, #52]	; (8008fdc <init_ds_devices+0x98>)
 8008fa8:	480a      	ldr	r0, [pc, #40]	; (8008fd4 <init_ds_devices+0x90>)
 8008faa:	f7f8 f997 	bl	80012dc <DS18B20_SetTempAlarm>
	if(OW2.RomCnt == 1)
 8008fae:	4b09      	ldr	r3, [pc, #36]	; (8008fd4 <init_ds_devices+0x90>)
 8008fb0:	7adb      	ldrb	r3, [r3, #11]
 8008fb2:	2b01      	cmp	r3, #1
 8008fb4:	d103      	bne.n	8008fbe <init_ds_devices+0x7a>
		sensors_data->out_state = true;
 8008fb6:	4b06      	ldr	r3, [pc, #24]	; (8008fd0 <init_ds_devices+0x8c>)
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	2201      	movs	r2, #1
 8008fbc:	771a      	strb	r2, [r3, #28]
}
 8008fbe:	bf00      	nop
 8008fc0:	bd80      	pop	{r7, pc}
 8008fc2:	bf00      	nop
 8008fc4:	20014038 	.word	0x20014038
 8008fc8:	40020c00 	.word	0x40020c00
 8008fcc:	20014078 	.word	0x20014078
 8008fd0:	20013a80 	.word	0x20013a80
 8008fd4:	20014020 	.word	0x20014020
 8008fd8:	40020800 	.word	0x40020800
 8008fdc:	2001404c 	.word	0x2001404c

08008fe0 <first_init_heaters>:
#include "storage.h"
#include "main.h"
#include <string.h>

void first_init_heaters()
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	af00      	add	r7, sp, #0
    heaters->ten.off_temp = TEN_OFF_TEMP;
 8008fe4:	4b1a      	ldr	r3, [pc, #104]	; (8009050 <first_init_heaters+0x70>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	222d      	movs	r2, #45	; 0x2d
 8008fea:	609a      	str	r2, [r3, #8]
    heaters->ten.off_temp_under = TEN_OFF_UNDER;
 8008fec:	4b18      	ldr	r3, [pc, #96]	; (8009050 <first_init_heaters+0x70>)
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	2205      	movs	r2, #5
 8008ff2:	60da      	str	r2, [r3, #12]
    heaters->ten.temp_limit = TEN_TEMP_LIMIT;
 8008ff4:	4b16      	ldr	r3, [pc, #88]	; (8009050 <first_init_heaters+0x70>)
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	2219      	movs	r2, #25
 8008ffa:	605a      	str	r2, [r3, #4]
    heaters->ten.started_value = TEN_STARTED_VALUE;
 8008ffc:	4b14      	ldr	r3, [pc, #80]	; (8009050 <first_init_heaters+0x70>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	2203      	movs	r2, #3
 8009002:	749a      	strb	r2, [r3, #18]
    heaters->ten.power_koef = TEN_POWER_KOEF;
 8009004:	4b12      	ldr	r3, [pc, #72]	; (8009050 <first_init_heaters+0x70>)
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	2203      	movs	r2, #3
 800900a:	615a      	str	r2, [r3, #20]

    heaters->on_off_ten = ON;
 800900c:	4b10      	ldr	r3, [pc, #64]	; (8009050 <first_init_heaters+0x70>)
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	2201      	movs	r2, #1
 8009012:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    heaters->update_koef_time = 5000000;
 8009016:	4b0e      	ldr	r3, [pc, #56]	; (8009050 <first_init_heaters+0x70>)
 8009018:	6819      	ldr	r1, [r3, #0]
 800901a:	a30b      	add	r3, pc, #44	; (adr r3, 8009048 <first_init_heaters+0x68>)
 800901c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009020:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    heaters->delta = 1;
 8009024:	4b0a      	ldr	r3, [pc, #40]	; (8009050 <first_init_heaters+0x70>)
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800902c:	61da      	str	r2, [r3, #28]
    heaters->delta_high = 10;
 800902e:	4b08      	ldr	r3, [pc, #32]	; (8009050 <first_init_heaters+0x70>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	4a08      	ldr	r2, [pc, #32]	; (8009054 <first_init_heaters+0x74>)
 8009034:	621a      	str	r2, [r3, #32]
    heaters->koef_grow = 50;
 8009036:	4b06      	ldr	r3, [pc, #24]	; (8009050 <first_init_heaters+0x70>)
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	2232      	movs	r2, #50	; 0x32
 800903c:	625a      	str	r2, [r3, #36]	; 0x24
    write_heaters();
 800903e:	f000 f8e3 	bl	8009208 <write_heaters>
}
 8009042:	bf00      	nop
 8009044:	bd80      	pop	{r7, pc}
 8009046:	bf00      	nop
 8009048:	004c4b40 	.word	0x004c4b40
 800904c:	00000000 	.word	0x00000000
 8009050:	200139cc 	.word	0x200139cc
 8009054:	41200000 	.word	0x41200000

08009058 <first_init_wireless>:

void first_init_wireless()
{
 8009058:	b580      	push	{r7, lr}
 800905a:	af00      	add	r7, sp, #0
	// Настройки брокера Вакио
	wireless_params->vakio_mqtt.host[0] = 0;
 800905c:	4b2c      	ldr	r3, [pc, #176]	; (8009110 <first_init_wireless+0xb8>)
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	2200      	movs	r2, #0
 8009062:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	wireless_params->vakio_mqtt.login[0] = 0;
 8009066:	4b2a      	ldr	r3, [pc, #168]	; (8009110 <first_init_wireless+0xb8>)
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	2200      	movs	r2, #0
 800906c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	wireless_params->vakio_mqtt.password[0] = 0;
 8009070:	4b27      	ldr	r3, [pc, #156]	; (8009110 <first_init_wireless+0xb8>)
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	2200      	movs	r2, #0
 8009076:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	wireless_params->vakio_mqtt.port = DEFAULT_MQTT_PORT;
 800907a:	4b25      	ldr	r3, [pc, #148]	; (8009110 <first_init_wireless+0xb8>)
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	f240 725b 	movw	r2, #1883	; 0x75b
 8009082:	669a      	str	r2, [r3, #104]	; 0x68
	wireless_params->vakio_mqtt.client_id[0] = 0;
 8009084:	4b22      	ldr	r3, [pc, #136]	; (8009110 <first_init_wireless+0xb8>)
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	2200      	movs	r2, #0
 800908a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

	// Настройки брокера пользователя
	wireless_params->user_mqtt.host[0] = 0;
 800908e:	4b20      	ldr	r3, [pc, #128]	; (8009110 <first_init_wireless+0xb8>)
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	2200      	movs	r2, #0
 8009094:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	wireless_params->user_mqtt.login[0] = 0;
 8009098:	4b1d      	ldr	r3, [pc, #116]	; (8009110 <first_init_wireless+0xb8>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	2200      	movs	r2, #0
 800909e:	701a      	strb	r2, [r3, #0]
	wireless_params->user_mqtt.password[0] = 0;
 80090a0:	4b1b      	ldr	r3, [pc, #108]	; (8009110 <first_init_wireless+0xb8>)
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	2200      	movs	r2, #0
 80090a6:	731a      	strb	r2, [r3, #12]
	wireless_params->user_mqtt.port = DEFAULT_MQTT_PORT;
 80090a8:	4b19      	ldr	r3, [pc, #100]	; (8009110 <first_init_wireless+0xb8>)
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	f240 725b 	movw	r2, #1883	; 0x75b
 80090b0:	62da      	str	r2, [r3, #44]	; 0x2c
	wireless_params->user_mqtt.client_id[0] = 0;
 80090b2:	4b17      	ldr	r3, [pc, #92]	; (8009110 <first_init_wireless+0xb8>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	2200      	movs	r2, #0
 80090b8:	761a      	strb	r2, [r3, #24]
	strcpy(wireless_params->user_mqtt.topic, DEFAULT_USER_TOPIC);
 80090ba:	4b15      	ldr	r3, [pc, #84]	; (8009110 <first_init_wireless+0xb8>)
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	3330      	adds	r3, #48	; 0x30
 80090c0:	4a14      	ldr	r2, [pc, #80]	; (8009114 <first_init_wireless+0xbc>)
 80090c2:	6810      	ldr	r0, [r2, #0]
 80090c4:	6018      	str	r0, [r3, #0]
 80090c6:	8892      	ldrh	r2, [r2, #4]
 80090c8:	809a      	strh	r2, [r3, #4]

	// Идентификаторы прибора
	wireless_params->vakio.device_id[0] = 0;
 80090ca:	4b11      	ldr	r3, [pc, #68]	; (8009110 <first_init_wireless+0xb8>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	2200      	movs	r2, #0
 80090d0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	wireless_params->vakio.user_id[0] = 0;
 80090d4:	4b0e      	ldr	r3, [pc, #56]	; (8009110 <first_init_wireless+0xb8>)
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	2200      	movs	r2, #0
 80090da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

	// Тип подключения к брокеру
	wireless_params->mqtt_type = VAKIO_MQTT;
 80090de:	4b0c      	ldr	r3, [pc, #48]	; (8009110 <first_init_wireless+0xb8>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	2201      	movs	r2, #1
 80090e4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

	// Айпи сервера
	wireless_params->server_ip[0] = 0;
 80090e8:	4b09      	ldr	r3, [pc, #36]	; (8009110 <first_init_wireless+0xb8>)
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	2200      	movs	r2, #0
 80090ee:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
	wireless_params->vakio_mqtt_connect_ip = false;
 80090f2:	4b07      	ldr	r3, [pc, #28]	; (8009110 <first_init_wireless+0xb8>)
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	2200      	movs	r2, #0
 80090f8:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
	wireless_params->soft_ap_off_time = MIN_15_OFF_AP;
 80090fc:	4b04      	ldr	r3, [pc, #16]	; (8009110 <first_init_wireless+0xb8>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	2200      	movs	r2, #0
 8009102:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
	write_wireless_params();
 8009106:	f000 f85f 	bl	80091c8 <write_wireless_params>
}
 800910a:	bf00      	nop
 800910c:	bd80      	pop	{r7, pc}
 800910e:	bf00      	nop
 8009110:	20013a7c 	.word	0x20013a7c
 8009114:	0802ab58 	.word	0x0802ab58

08009118 <first_init_device>:

void first_init_device()
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b082      	sub	sp, #8
 800911c:	af00      	add	r7, sp, #0
	device->check_1_0_0 = CHECK_VALUE_1_0_0;
 800911e:	4b28      	ldr	r3, [pc, #160]	; (80091c0 <first_init_device+0xa8>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	2201      	movs	r2, #1
 8009124:	731a      	strb	r2, [r3, #12]
	device->state = OFF;
 8009126:	4b26      	ldr	r3, [pc, #152]	; (80091c0 <first_init_device+0xa8>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	2200      	movs	r2, #0
 800912c:	709a      	strb	r2, [r3, #2]
	device->firmware_flag = false;
 800912e:	4b24      	ldr	r3, [pc, #144]	; (80091c0 <first_init_device+0xa8>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	2200      	movs	r2, #0
 8009134:	701a      	strb	r2, [r3, #0]
	device->error_temp_hot = false;
 8009136:	4b22      	ldr	r3, [pc, #136]	; (80091c0 <first_init_device+0xa8>)
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	2200      	movs	r2, #0
 800913c:	70da      	strb	r2, [r3, #3]
	device->error_temp_cold = false;
 800913e:	4b20      	ldr	r3, [pc, #128]	; (80091c0 <first_init_device+0xa8>)
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	2200      	movs	r2, #0
 8009144:	711a      	strb	r2, [r3, #4]
	device->error_stop_hot = false;
 8009146:	4b1e      	ldr	r3, [pc, #120]	; (80091c0 <first_init_device+0xa8>)
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	2200      	movs	r2, #0
 800914c:	715a      	strb	r2, [r3, #5]
	device->error_stop_cold = false;
 800914e:	4b1c      	ldr	r3, [pc, #112]	; (80091c0 <first_init_device+0xa8>)
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	2200      	movs	r2, #0
 8009154:	719a      	strb	r2, [r3, #6]
	device->error_fan = false;
 8009156:	4b1a      	ldr	r3, [pc, #104]	; (80091c0 <first_init_device+0xa8>)
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	2200      	movs	r2, #0
 800915c:	725a      	strb	r2, [r3, #9]
	device->mode = INFLOW_MODE;
 800915e:	4b18      	ldr	r3, [pc, #96]	; (80091c0 <first_init_device+0xa8>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	2200      	movs	r2, #0
 8009164:	735a      	strb	r2, [r3, #13]
	device->last_mode = INFLOW_MODE;
 8009166:	4b16      	ldr	r3, [pc, #88]	; (80091c0 <first_init_device+0xa8>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	2200      	movs	r2, #0
 800916c:	739a      	strb	r2, [r3, #14]
	device->inflow_speed = 1;
 800916e:	4b14      	ldr	r3, [pc, #80]	; (80091c0 <first_init_device+0xa8>)
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	2201      	movs	r2, #1
 8009174:	73da      	strb	r2, [r3, #15]
	uint8_t speed_arr[8] = SPEED_ARR_DEFAUL;
 8009176:	4a13      	ldr	r2, [pc, #76]	; (80091c4 <first_init_device+0xac>)
 8009178:	463b      	mov	r3, r7
 800917a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800917e:	e883 0003 	stmia.w	r3, {r0, r1}
	memcpy(device->speed_arr, speed_arr, 8);
 8009182:	4b0f      	ldr	r3, [pc, #60]	; (80091c0 <first_init_device+0xa8>)
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	3311      	adds	r3, #17
 8009188:	461a      	mov	r2, r3
 800918a:	463b      	mov	r3, r7
 800918c:	cb03      	ldmia	r3!, {r0, r1}
 800918e:	6010      	str	r0, [r2, #0]
 8009190:	6051      	str	r1, [r2, #4]
	device->remote_control.find = OFF;
 8009192:	4b0b      	ldr	r3, [pc, #44]	; (80091c0 <first_init_device+0xa8>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	2200      	movs	r2, #0
 8009198:	729a      	strb	r2, [r3, #10]
	device->extra_options.deviation = 3;           // отклонение должно быть 3
 800919a:	4b09      	ldr	r3, [pc, #36]	; (80091c0 <first_init_device+0xa8>)
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	2203      	movs	r2, #3
 80091a0:	765a      	strb	r2, [r3, #25]
	device->extra_options.check_time = 1;          // время проверки должно быть 1-5 минут
 80091a2:	4b07      	ldr	r3, [pc, #28]	; (80091c0 <first_init_device+0xa8>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	2201      	movs	r2, #1
 80091a8:	769a      	strb	r2, [r3, #26]
	device->extra_options.step_pwm = 5;            // шаг шим должно быть 5
 80091aa:	4b05      	ldr	r3, [pc, #20]	; (80091c0 <first_init_device+0xa8>)
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	2205      	movs	r2, #5
 80091b0:	76da      	strb	r2, [r3, #27]
	write_device_params();
 80091b2:	f000 f849 	bl	8009248 <write_device_params>
}
 80091b6:	bf00      	nop
 80091b8:	3708      	adds	r7, #8
 80091ba:	46bd      	mov	sp, r7
 80091bc:	bd80      	pop	{r7, pc}
 80091be:	bf00      	nop
 80091c0:	20013a78 	.word	0x20013a78
 80091c4:	0802ab60 	.word	0x0802ab60

080091c8 <write_wireless_params>:
#define LOCATION_DEVICE 	0x080A0000 //0x081A0000
#define LOCATION_WIRELESS 	0x080C0000 //0x081C0000
#define LOCATION_HEATERS  	0x080E0000 //0x081E0000

void write_wireless_params()
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	af00      	add	r7, sp, #0
	Flash_Write_Data(LOCATION_WIRELESS, wireless_params, sizeof(wireless_parameters_s));
 80091cc:	4b04      	ldr	r3, [pc, #16]	; (80091e0 <write_wireless_params+0x18>)
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	22a0      	movs	r2, #160	; 0xa0
 80091d2:	4619      	mov	r1, r3
 80091d4:	4803      	ldr	r0, [pc, #12]	; (80091e4 <write_wireless_params+0x1c>)
 80091d6:	f7f8 fcfd 	bl	8001bd4 <Flash_Write_Data>
}
 80091da:	bf00      	nop
 80091dc:	bd80      	pop	{r7, pc}
 80091de:	bf00      	nop
 80091e0:	20013a7c 	.word	0x20013a7c
 80091e4:	080c0000 	.word	0x080c0000

080091e8 <read_wireless_params>:

void read_wireless_params()
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	af00      	add	r7, sp, #0
	Flash_Read_Data(LOCATION_WIRELESS, wireless_params, sizeof(wireless_parameters_s));
 80091ec:	4b04      	ldr	r3, [pc, #16]	; (8009200 <read_wireless_params+0x18>)
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	22a0      	movs	r2, #160	; 0xa0
 80091f2:	4619      	mov	r1, r3
 80091f4:	4803      	ldr	r0, [pc, #12]	; (8009204 <read_wireless_params+0x1c>)
 80091f6:	f7f8 fd4b 	bl	8001c90 <Flash_Read_Data>
}
 80091fa:	bf00      	nop
 80091fc:	bd80      	pop	{r7, pc}
 80091fe:	bf00      	nop
 8009200:	20013a7c 	.word	0x20013a7c
 8009204:	080c0000 	.word	0x080c0000

08009208 <write_heaters>:

void write_heaters()
{
 8009208:	b580      	push	{r7, lr}
 800920a:	af00      	add	r7, sp, #0
	Flash_Write_Data(LOCATION_HEATERS, heaters, sizeof(heaters_s));
 800920c:	4b04      	ldr	r3, [pc, #16]	; (8009220 <write_heaters+0x18>)
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	2238      	movs	r2, #56	; 0x38
 8009212:	4619      	mov	r1, r3
 8009214:	4803      	ldr	r0, [pc, #12]	; (8009224 <write_heaters+0x1c>)
 8009216:	f7f8 fcdd 	bl	8001bd4 <Flash_Write_Data>
}
 800921a:	bf00      	nop
 800921c:	bd80      	pop	{r7, pc}
 800921e:	bf00      	nop
 8009220:	200139cc 	.word	0x200139cc
 8009224:	080e0000 	.word	0x080e0000

08009228 <read_heaters>:

void read_heaters()
{
 8009228:	b580      	push	{r7, lr}
 800922a:	af00      	add	r7, sp, #0
	Flash_Read_Data(LOCATION_HEATERS, heaters, sizeof(heaters_s));
 800922c:	4b04      	ldr	r3, [pc, #16]	; (8009240 <read_heaters+0x18>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	2238      	movs	r2, #56	; 0x38
 8009232:	4619      	mov	r1, r3
 8009234:	4803      	ldr	r0, [pc, #12]	; (8009244 <read_heaters+0x1c>)
 8009236:	f7f8 fd2b 	bl	8001c90 <Flash_Read_Data>
}
 800923a:	bf00      	nop
 800923c:	bd80      	pop	{r7, pc}
 800923e:	bf00      	nop
 8009240:	200139cc 	.word	0x200139cc
 8009244:	080e0000 	.word	0x080e0000

08009248 <write_device_params>:

void write_device_params()
{
 8009248:	b580      	push	{r7, lr}
 800924a:	af00      	add	r7, sp, #0
	Flash_Write_Data(LOCATION_DEVICE, device, sizeof(device_s));
 800924c:	4b04      	ldr	r3, [pc, #16]	; (8009260 <write_device_params+0x18>)
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	221c      	movs	r2, #28
 8009252:	4619      	mov	r1, r3
 8009254:	4803      	ldr	r0, [pc, #12]	; (8009264 <write_device_params+0x1c>)
 8009256:	f7f8 fcbd 	bl	8001bd4 <Flash_Write_Data>
}
 800925a:	bf00      	nop
 800925c:	bd80      	pop	{r7, pc}
 800925e:	bf00      	nop
 8009260:	20013a78 	.word	0x20013a78
 8009264:	080a0000 	.word	0x080a0000

08009268 <read_device_params>:

void read_device_params()
{
 8009268:	b580      	push	{r7, lr}
 800926a:	af00      	add	r7, sp, #0
	Flash_Read_Data(LOCATION_DEVICE, device, sizeof(device_s));
 800926c:	4b04      	ldr	r3, [pc, #16]	; (8009280 <read_device_params+0x18>)
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	221c      	movs	r2, #28
 8009272:	4619      	mov	r1, r3
 8009274:	4803      	ldr	r0, [pc, #12]	; (8009284 <read_device_params+0x1c>)
 8009276:	f7f8 fd0b 	bl	8001c90 <Flash_Read_Data>
}
 800927a:	bf00      	nop
 800927c:	bd80      	pop	{r7, pc}
 800927e:	bf00      	nop
 8009280:	20013a78 	.word	0x20013a78
 8009284:	080a0000 	.word	0x080a0000

08009288 <first_start_init>:

void first_start_init()
{
 8009288:	b580      	push	{r7, lr}
 800928a:	af00      	add	r7, sp, #0
    first_init_device();
 800928c:	f7ff ff44 	bl	8009118 <first_init_device>
    first_init_wireless();
 8009290:	f7ff fee2 	bl	8009058 <first_init_wireless>
    first_init_heaters();
 8009294:	f7ff fea4 	bl	8008fe0 <first_init_heaters>
}
 8009298:	bf00      	nop
 800929a:	bd80      	pop	{r7, pc}

0800929c <second_start_init>:

void second_start_init()
{
 800929c:	b580      	push	{r7, lr}
 800929e:	af00      	add	r7, sp, #0
    read_device_params();
 80092a0:	f7ff ffe2 	bl	8009268 <read_device_params>
    read_wireless_params();
 80092a4:	f7ff ffa0 	bl	80091e8 <read_wireless_params>
    read_heaters();
 80092a8:	f7ff ffbe 	bl	8009228 <read_heaters>
}
 80092ac:	bf00      	nop
 80092ae:	bd80      	pop	{r7, pc}

080092b0 <malloc_memory_parameters>:

void malloc_memory_parameters()
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	af00      	add	r7, sp, #0
    device = malloc(sizeof(device_s));
 80092b4:	201c      	movs	r0, #28
 80092b6:	f01b fb85 	bl	80249c4 <malloc>
 80092ba:	4603      	mov	r3, r0
 80092bc:	461a      	mov	r2, r3
 80092be:	4b0c      	ldr	r3, [pc, #48]	; (80092f0 <malloc_memory_parameters+0x40>)
 80092c0:	601a      	str	r2, [r3, #0]
    wireless_params = malloc(sizeof(wireless_parameters_s));
 80092c2:	20a0      	movs	r0, #160	; 0xa0
 80092c4:	f01b fb7e 	bl	80249c4 <malloc>
 80092c8:	4603      	mov	r3, r0
 80092ca:	461a      	mov	r2, r3
 80092cc:	4b09      	ldr	r3, [pc, #36]	; (80092f4 <malloc_memory_parameters+0x44>)
 80092ce:	601a      	str	r2, [r3, #0]
    sensors_data = malloc(sizeof(sensors_data_s));
 80092d0:	2020      	movs	r0, #32
 80092d2:	f01b fb77 	bl	80249c4 <malloc>
 80092d6:	4603      	mov	r3, r0
 80092d8:	461a      	mov	r2, r3
 80092da:	4b07      	ldr	r3, [pc, #28]	; (80092f8 <malloc_memory_parameters+0x48>)
 80092dc:	601a      	str	r2, [r3, #0]
    heaters = malloc(sizeof(heaters_s));
 80092de:	2038      	movs	r0, #56	; 0x38
 80092e0:	f01b fb70 	bl	80249c4 <malloc>
 80092e4:	4603      	mov	r3, r0
 80092e6:	461a      	mov	r2, r3
 80092e8:	4b04      	ldr	r3, [pc, #16]	; (80092fc <malloc_memory_parameters+0x4c>)
 80092ea:	601a      	str	r2, [r3, #0]
}
 80092ec:	bf00      	nop
 80092ee:	bd80      	pop	{r7, pc}
 80092f0:	20013a78 	.word	0x20013a78
 80092f4:	20013a7c 	.word	0x20013a7c
 80092f8:	20013a80 	.word	0x20013a80
 80092fc:	200139cc 	.word	0x200139cc

08009300 <set_default_data>:
	device->check_1_0_0 = CHECK_VALUE_1_0_0 + 1;
	write_device_params();
}

void set_default_data()
{
 8009300:	b480      	push	{r7}
 8009302:	af00      	add	r7, sp, #0
	device->inflow_speed = 1;
 8009304:	4b1c      	ldr	r3, [pc, #112]	; (8009378 <set_default_data+0x78>)
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	2201      	movs	r2, #1
 800930a:	73da      	strb	r2, [r3, #15]
	heaters->ten.temp_limit = TEN_TEMP_LIMIT;
 800930c:	4b1b      	ldr	r3, [pc, #108]	; (800937c <set_default_data+0x7c>)
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	2219      	movs	r2, #25
 8009312:	605a      	str	r2, [r3, #4]
    device->remote_control.error = false;
 8009314:	4b18      	ldr	r3, [pc, #96]	; (8009378 <set_default_data+0x78>)
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	2200      	movs	r2, #0
 800931a:	72da      	strb	r2, [r3, #11]
    sensors_data->out_state = false;
 800931c:	4b18      	ldr	r3, [pc, #96]	; (8009380 <set_default_data+0x80>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	2200      	movs	r2, #0
 8009322:	771a      	strb	r2, [r3, #28]
    sensors_data->in_state = false;
 8009324:	4b16      	ldr	r3, [pc, #88]	; (8009380 <set_default_data+0x80>)
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	2200      	movs	r2, #0
 800932a:	775a      	strb	r2, [r3, #29]
    heaters->ten.state = OFF;
 800932c:	4b13      	ldr	r3, [pc, #76]	; (800937c <set_default_data+0x7c>)
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	2200      	movs	r2, #0
 8009332:	705a      	strb	r2, [r3, #1]
    heaters->update_koef_time = 5000000;
 8009334:	4b11      	ldr	r3, [pc, #68]	; (800937c <set_default_data+0x7c>)
 8009336:	6819      	ldr	r1, [r3, #0]
 8009338:	a30d      	add	r3, pc, #52	; (adr r3, 8009370 <set_default_data+0x70>)
 800933a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800933e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    heaters->koef = 0;
 8009342:	4b0e      	ldr	r3, [pc, #56]	; (800937c <set_default_data+0x7c>)
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	2200      	movs	r2, #0
 8009348:	619a      	str	r2, [r3, #24]
    heaters->delta = 1;
 800934a:	4b0c      	ldr	r3, [pc, #48]	; (800937c <set_default_data+0x7c>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8009352:	61da      	str	r2, [r3, #28]
    heaters->delta_high = 15;
 8009354:	4b09      	ldr	r3, [pc, #36]	; (800937c <set_default_data+0x7c>)
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	4a0a      	ldr	r2, [pc, #40]	; (8009384 <set_default_data+0x84>)
 800935a:	621a      	str	r2, [r3, #32]
    heaters->koef_grow = 50;
 800935c:	4b07      	ldr	r3, [pc, #28]	; (800937c <set_default_data+0x7c>)
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	2232      	movs	r2, #50	; 0x32
 8009362:	625a      	str	r2, [r3, #36]	; 0x24
}
 8009364:	bf00      	nop
 8009366:	46bd      	mov	sp, r7
 8009368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936c:	4770      	bx	lr
 800936e:	bf00      	nop
 8009370:	004c4b40 	.word	0x004c4b40
 8009374:	00000000 	.word	0x00000000
 8009378:	20013a78 	.word	0x20013a78
 800937c:	200139cc 	.word	0x200139cc
 8009380:	20013a80 	.word	0x20013a80
 8009384:	41700000 	.word	0x41700000

08009388 <init_storage>:

void init_storage()
{
 8009388:	b580      	push	{r7, lr}
 800938a:	af00      	add	r7, sp, #0
	malloc_memory_parameters();
 800938c:	f7ff ff90 	bl	80092b0 <malloc_memory_parameters>
	read_device_params();
 8009390:	f7ff ff6a 	bl	8009268 <read_device_params>
	// Проверка на первый запуск устройства
	if (device->check_1_0_0 != CHECK_VALUE_1_0_0)
 8009394:	4b06      	ldr	r3, [pc, #24]	; (80093b0 <init_storage+0x28>)
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	7b1b      	ldrb	r3, [r3, #12]
 800939a:	2b01      	cmp	r3, #1
 800939c:	d002      	beq.n	80093a4 <init_storage+0x1c>
	{
		first_start_init();
 800939e:	f7ff ff73 	bl	8009288 <first_start_init>
 80093a2:	e001      	b.n	80093a8 <init_storage+0x20>
	}
	else
	{
		second_start_init();
 80093a4:	f7ff ff7a 	bl	800929c <second_start_init>
	}
	set_default_data();
 80093a8:	f7ff ffaa 	bl	8009300 <set_default_data>
}
 80093ac:	bf00      	nop
 80093ae:	bd80      	pop	{r7, pc}
 80093b0:	20013a78 	.word	0x20013a78

080093b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b082      	sub	sp, #8
 80093b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80093ba:	2300      	movs	r3, #0
 80093bc:	607b      	str	r3, [r7, #4]
 80093be:	4b1f      	ldr	r3, [pc, #124]	; (800943c <MX_DMA_Init+0x88>)
 80093c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093c2:	4a1e      	ldr	r2, [pc, #120]	; (800943c <MX_DMA_Init+0x88>)
 80093c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80093c8:	6313      	str	r3, [r2, #48]	; 0x30
 80093ca:	4b1c      	ldr	r3, [pc, #112]	; (800943c <MX_DMA_Init+0x88>)
 80093cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80093d2:	607b      	str	r3, [r7, #4]
 80093d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80093d6:	2300      	movs	r3, #0
 80093d8:	603b      	str	r3, [r7, #0]
 80093da:	4b18      	ldr	r3, [pc, #96]	; (800943c <MX_DMA_Init+0x88>)
 80093dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093de:	4a17      	ldr	r2, [pc, #92]	; (800943c <MX_DMA_Init+0x88>)
 80093e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80093e4:	6313      	str	r3, [r2, #48]	; 0x30
 80093e6:	4b15      	ldr	r3, [pc, #84]	; (800943c <MX_DMA_Init+0x88>)
 80093e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80093ee:	603b      	str	r3, [r7, #0]
 80093f0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 80093f2:	2200      	movs	r2, #0
 80093f4:	2105      	movs	r1, #5
 80093f6:	200b      	movs	r0, #11
 80093f8:	f001 fd47 	bl	800ae8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80093fc:	200b      	movs	r0, #11
 80093fe:	f001 fd60 	bl	800aec2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8009402:	2200      	movs	r2, #0
 8009404:	2105      	movs	r1, #5
 8009406:	202f      	movs	r0, #47	; 0x2f
 8009408:	f001 fd3f 	bl	800ae8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 800940c:	202f      	movs	r0, #47	; 0x2f
 800940e:	f001 fd58 	bl	800aec2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8009412:	2200      	movs	r2, #0
 8009414:	2105      	movs	r1, #5
 8009416:	203a      	movs	r0, #58	; 0x3a
 8009418:	f001 fd37 	bl	800ae8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800941c:	203a      	movs	r0, #58	; 0x3a
 800941e:	f001 fd50 	bl	800aec2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8009422:	2200      	movs	r2, #0
 8009424:	2105      	movs	r1, #5
 8009426:	2046      	movs	r0, #70	; 0x46
 8009428:	f001 fd2f 	bl	800ae8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800942c:	2046      	movs	r0, #70	; 0x46
 800942e:	f001 fd48 	bl	800aec2 <HAL_NVIC_EnableIRQ>

}
 8009432:	bf00      	nop
 8009434:	3708      	adds	r7, #8
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}
 800943a:	bf00      	nop
 800943c:	40023800 	.word	0x40023800

08009440 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8009440:	b580      	push	{r7, lr}
 8009442:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8009444:	4a10      	ldr	r2, [pc, #64]	; (8009488 <MX_FREERTOS_Init+0x48>)
 8009446:	2100      	movs	r1, #0
 8009448:	4810      	ldr	r0, [pc, #64]	; (800948c <MX_FREERTOS_Init+0x4c>)
 800944a:	f008 fbb0 	bl	8011bae <osThreadNew>
 800944e:	4603      	mov	r3, r0
 8009450:	4a0f      	ldr	r2, [pc, #60]	; (8009490 <MX_FREERTOS_Init+0x50>)
 8009452:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  ledsTaskHandle = osThreadNew(LedsTask, NULL, &ledsTask_attributes);
 8009454:	4a0f      	ldr	r2, [pc, #60]	; (8009494 <MX_FREERTOS_Init+0x54>)
 8009456:	2100      	movs	r1, #0
 8009458:	480f      	ldr	r0, [pc, #60]	; (8009498 <MX_FREERTOS_Init+0x58>)
 800945a:	f008 fba8 	bl	8011bae <osThreadNew>
 800945e:	4603      	mov	r3, r0
 8009460:	4a0e      	ldr	r2, [pc, #56]	; (800949c <MX_FREERTOS_Init+0x5c>)
 8009462:	6013      	str	r3, [r2, #0]
  damperTaskHandle = osThreadNew(DamperTask, NULL, &damperTask_attributes);
 8009464:	4a0e      	ldr	r2, [pc, #56]	; (80094a0 <MX_FREERTOS_Init+0x60>)
 8009466:	2100      	movs	r1, #0
 8009468:	480e      	ldr	r0, [pc, #56]	; (80094a4 <MX_FREERTOS_Init+0x64>)
 800946a:	f008 fba0 	bl	8011bae <osThreadNew>
 800946e:	4603      	mov	r3, r0
 8009470:	4a0d      	ldr	r2, [pc, #52]	; (80094a8 <MX_FREERTOS_Init+0x68>)
 8009472:	6013      	str	r3, [r2, #0]
  mainTaskHandle = osThreadNew(MainTask, NULL, &mainTask_attributes);
 8009474:	4a0d      	ldr	r2, [pc, #52]	; (80094ac <MX_FREERTOS_Init+0x6c>)
 8009476:	2100      	movs	r1, #0
 8009478:	480d      	ldr	r0, [pc, #52]	; (80094b0 <MX_FREERTOS_Init+0x70>)
 800947a:	f008 fb98 	bl	8011bae <osThreadNew>
 800947e:	4603      	mov	r3, r0
 8009480:	4a0c      	ldr	r2, [pc, #48]	; (80094b4 <MX_FREERTOS_Init+0x74>)
 8009482:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8009484:	bf00      	nop
 8009486:	bd80      	pop	{r7, pc}
 8009488:	0802e304 	.word	0x0802e304
 800948c:	080094b9 	.word	0x080094b9
 8009490:	200140b0 	.word	0x200140b0
 8009494:	0802e298 	.word	0x0802e298
 8009498:	0800830d 	.word	0x0800830d
 800949c:	200140b4 	.word	0x200140b4
 80094a0:	0802e2bc 	.word	0x0802e2bc
 80094a4:	080080a9 	.word	0x080080a9
 80094a8:	200140a8 	.word	0x200140a8
 80094ac:	0802e2e0 	.word	0x0802e2e0
 80094b0:	08006315 	.word	0x08006315
 80094b4:	200140ac 	.word	0x200140ac

080094b8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80094b8:	b5b0      	push	{r4, r5, r7, lr}
 80094ba:	b082      	sub	sp, #8
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 80094c0:	f007 fe54 	bl	801116c <MX_LWIP_Init>
  /* USER CODE BEGIN StartDefaultTask */
//  http_server_init();
  check_remote_control();
 80094c4:	f7ff fc00 	bl	8008cc8 <check_remote_control>
  init_mqtt();
 80094c8:	f7fd fed0 	bl	800726c <init_mqtt>
  device_send = *device;
 80094cc:	4b14      	ldr	r3, [pc, #80]	; (8009520 <StartDefaultTask+0x68>)
 80094ce:	681a      	ldr	r2, [r3, #0]
 80094d0:	4b14      	ldr	r3, [pc, #80]	; (8009524 <StartDefaultTask+0x6c>)
 80094d2:	6814      	ldr	r4, [r2, #0]
 80094d4:	6850      	ldr	r0, [r2, #4]
 80094d6:	6891      	ldr	r1, [r2, #8]
 80094d8:	68d5      	ldr	r5, [r2, #12]
 80094da:	601c      	str	r4, [r3, #0]
 80094dc:	6058      	str	r0, [r3, #4]
 80094de:	6099      	str	r1, [r3, #8]
 80094e0:	60dd      	str	r5, [r3, #12]
 80094e2:	6914      	ldr	r4, [r2, #16]
 80094e4:	6950      	ldr	r0, [r2, #20]
 80094e6:	6991      	ldr	r1, [r2, #24]
 80094e8:	611c      	str	r4, [r3, #16]
 80094ea:	6158      	str	r0, [r3, #20]
 80094ec:	6199      	str	r1, [r3, #24]
  device_check = *device;
 80094ee:	4b0c      	ldr	r3, [pc, #48]	; (8009520 <StartDefaultTask+0x68>)
 80094f0:	681a      	ldr	r2, [r3, #0]
 80094f2:	4b0d      	ldr	r3, [pc, #52]	; (8009528 <StartDefaultTask+0x70>)
 80094f4:	6814      	ldr	r4, [r2, #0]
 80094f6:	6850      	ldr	r0, [r2, #4]
 80094f8:	6891      	ldr	r1, [r2, #8]
 80094fa:	68d5      	ldr	r5, [r2, #12]
 80094fc:	601c      	str	r4, [r3, #0]
 80094fe:	6058      	str	r0, [r3, #4]
 8009500:	6099      	str	r1, [r3, #8]
 8009502:	60dd      	str	r5, [r3, #12]
 8009504:	6914      	ldr	r4, [r2, #16]
 8009506:	6950      	ldr	r0, [r2, #20]
 8009508:	6991      	ldr	r1, [r2, #24]
 800950a:	611c      	str	r4, [r3, #16]
 800950c:	6158      	str	r0, [r3, #20]
 800950e:	6199      	str	r1, [r3, #24]
  /* Infinite loop */
  for(;;)
  {
	  start_mqtt();
 8009510:	f7fd fc48 	bl	8006da4 <start_mqtt>
	  osDelay(1000);
 8009514:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009518:	f008 fbe7 	bl	8011cea <osDelay>
	  start_mqtt();
 800951c:	e7f8      	b.n	8009510 <StartDefaultTask+0x58>
 800951e:	bf00      	nop
 8009520:	20013a78 	.word	0x20013a78
 8009524:	20013a5c 	.word	0x20013a5c
 8009528:	200139d0 	.word	0x200139d0

0800952c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b08c      	sub	sp, #48	; 0x30
 8009530:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009532:	f107 031c 	add.w	r3, r7, #28
 8009536:	2200      	movs	r2, #0
 8009538:	601a      	str	r2, [r3, #0]
 800953a:	605a      	str	r2, [r3, #4]
 800953c:	609a      	str	r2, [r3, #8]
 800953e:	60da      	str	r2, [r3, #12]
 8009540:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8009542:	2300      	movs	r3, #0
 8009544:	61bb      	str	r3, [r7, #24]
 8009546:	4b5a      	ldr	r3, [pc, #360]	; (80096b0 <MX_GPIO_Init+0x184>)
 8009548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800954a:	4a59      	ldr	r2, [pc, #356]	; (80096b0 <MX_GPIO_Init+0x184>)
 800954c:	f043 0310 	orr.w	r3, r3, #16
 8009550:	6313      	str	r3, [r2, #48]	; 0x30
 8009552:	4b57      	ldr	r3, [pc, #348]	; (80096b0 <MX_GPIO_Init+0x184>)
 8009554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009556:	f003 0310 	and.w	r3, r3, #16
 800955a:	61bb      	str	r3, [r7, #24]
 800955c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800955e:	2300      	movs	r3, #0
 8009560:	617b      	str	r3, [r7, #20]
 8009562:	4b53      	ldr	r3, [pc, #332]	; (80096b0 <MX_GPIO_Init+0x184>)
 8009564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009566:	4a52      	ldr	r2, [pc, #328]	; (80096b0 <MX_GPIO_Init+0x184>)
 8009568:	f043 0304 	orr.w	r3, r3, #4
 800956c:	6313      	str	r3, [r2, #48]	; 0x30
 800956e:	4b50      	ldr	r3, [pc, #320]	; (80096b0 <MX_GPIO_Init+0x184>)
 8009570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009572:	f003 0304 	and.w	r3, r3, #4
 8009576:	617b      	str	r3, [r7, #20]
 8009578:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800957a:	2300      	movs	r3, #0
 800957c:	613b      	str	r3, [r7, #16]
 800957e:	4b4c      	ldr	r3, [pc, #304]	; (80096b0 <MX_GPIO_Init+0x184>)
 8009580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009582:	4a4b      	ldr	r2, [pc, #300]	; (80096b0 <MX_GPIO_Init+0x184>)
 8009584:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009588:	6313      	str	r3, [r2, #48]	; 0x30
 800958a:	4b49      	ldr	r3, [pc, #292]	; (80096b0 <MX_GPIO_Init+0x184>)
 800958c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800958e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009592:	613b      	str	r3, [r7, #16]
 8009594:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009596:	2300      	movs	r3, #0
 8009598:	60fb      	str	r3, [r7, #12]
 800959a:	4b45      	ldr	r3, [pc, #276]	; (80096b0 <MX_GPIO_Init+0x184>)
 800959c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800959e:	4a44      	ldr	r2, [pc, #272]	; (80096b0 <MX_GPIO_Init+0x184>)
 80095a0:	f043 0301 	orr.w	r3, r3, #1
 80095a4:	6313      	str	r3, [r2, #48]	; 0x30
 80095a6:	4b42      	ldr	r3, [pc, #264]	; (80096b0 <MX_GPIO_Init+0x184>)
 80095a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095aa:	f003 0301 	and.w	r3, r3, #1
 80095ae:	60fb      	str	r3, [r7, #12]
 80095b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80095b2:	2300      	movs	r3, #0
 80095b4:	60bb      	str	r3, [r7, #8]
 80095b6:	4b3e      	ldr	r3, [pc, #248]	; (80096b0 <MX_GPIO_Init+0x184>)
 80095b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095ba:	4a3d      	ldr	r2, [pc, #244]	; (80096b0 <MX_GPIO_Init+0x184>)
 80095bc:	f043 0302 	orr.w	r3, r3, #2
 80095c0:	6313      	str	r3, [r2, #48]	; 0x30
 80095c2:	4b3b      	ldr	r3, [pc, #236]	; (80096b0 <MX_GPIO_Init+0x184>)
 80095c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095c6:	f003 0302 	and.w	r3, r3, #2
 80095ca:	60bb      	str	r3, [r7, #8]
 80095cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80095ce:	2300      	movs	r3, #0
 80095d0:	607b      	str	r3, [r7, #4]
 80095d2:	4b37      	ldr	r3, [pc, #220]	; (80096b0 <MX_GPIO_Init+0x184>)
 80095d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095d6:	4a36      	ldr	r2, [pc, #216]	; (80096b0 <MX_GPIO_Init+0x184>)
 80095d8:	f043 0308 	orr.w	r3, r3, #8
 80095dc:	6313      	str	r3, [r2, #48]	; 0x30
 80095de:	4b34      	ldr	r3, [pc, #208]	; (80096b0 <MX_GPIO_Init+0x184>)
 80095e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095e2:	f003 0308 	and.w	r3, r3, #8
 80095e6:	607b      	str	r3, [r7, #4]
 80095e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SW_DIP3_Pin|SW_DIP4_Pin|SW_DIP5_Pin|SW_DIP6_Pin
 80095ea:	2200      	movs	r2, #0
 80095ec:	213f      	movs	r1, #63	; 0x3f
 80095ee:	4831      	ldr	r0, [pc, #196]	; (80096b4 <MX_GPIO_Init+0x188>)
 80095f0:	f003 feaa 	bl	800d348 <HAL_GPIO_WritePin>
                          |SW_DIP1_Pin|SW_DIP2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|USART1_DIR_Pin, GPIO_PIN_RESET);
 80095f4:	2200      	movs	r2, #0
 80095f6:	f241 0110 	movw	r1, #4112	; 0x1010
 80095fa:	482f      	ldr	r0, [pc, #188]	; (80096b8 <MX_GPIO_Init+0x18c>)
 80095fc:	f003 fea4 	bl	800d348 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RELAY_CH1_Pin|RELAY_CH2_Pin|RELAY_CH3_Pin|RELAY_CH4_Pin
 8009600:	2200      	movs	r2, #0
 8009602:	f24f 01e8 	movw	r1, #61672	; 0xf0e8
 8009606:	482d      	ldr	r0, [pc, #180]	; (80096bc <MX_GPIO_Init+0x190>)
 8009608:	f003 fe9e 	bl	800d348 <HAL_GPIO_WritePin>
                          |UART5_DIR_Pin|LED_LINK_Pin|LED_WORK_Pin|LED_FAILURE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SSR_GATE1_GPIO_Port, SSR_GATE1_Pin, GPIO_PIN_RESET);
 800960c:	2200      	movs	r2, #0
 800960e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009612:	482b      	ldr	r0, [pc, #172]	; (80096c0 <MX_GPIO_Init+0x194>)
 8009614:	f003 fe98 	bl	800d348 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = SW_DIP3_Pin|SW_DIP4_Pin|SW_DIP5_Pin|SW_DIP6_Pin
 8009618:	233f      	movs	r3, #63	; 0x3f
 800961a:	61fb      	str	r3, [r7, #28]
                          |SW_DIP1_Pin|SW_DIP2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800961c:	2301      	movs	r3, #1
 800961e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009620:	2300      	movs	r3, #0
 8009622:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009624:	2300      	movs	r3, #0
 8009626:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8009628:	f107 031c 	add.w	r3, r7, #28
 800962c:	4619      	mov	r1, r3
 800962e:	4821      	ldr	r0, [pc, #132]	; (80096b4 <MX_GPIO_Init+0x188>)
 8009630:	f003 fcd6 	bl	800cfe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|USART1_DIR_Pin;
 8009634:	f241 0310 	movw	r3, #4112	; 0x1010
 8009638:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800963a:	2301      	movs	r3, #1
 800963c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800963e:	2300      	movs	r3, #0
 8009640:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009642:	2300      	movs	r3, #0
 8009644:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009646:	f107 031c 	add.w	r3, r7, #28
 800964a:	4619      	mov	r1, r3
 800964c:	481a      	ldr	r0, [pc, #104]	; (80096b8 <MX_GPIO_Init+0x18c>)
 800964e:	f003 fcc7 	bl	800cfe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SERVICE_BTN_Pin;
 8009652:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009656:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009658:	2300      	movs	r3, #0
 800965a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800965c:	2301      	movs	r3, #1
 800965e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SERVICE_BTN_GPIO_Port, &GPIO_InitStruct);
 8009660:	f107 031c 	add.w	r3, r7, #28
 8009664:	4619      	mov	r1, r3
 8009666:	4815      	ldr	r0, [pc, #84]	; (80096bc <MX_GPIO_Init+0x190>)
 8009668:	f003 fcba 	bl	800cfe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = RELAY_CH1_Pin|RELAY_CH2_Pin|RELAY_CH3_Pin|RELAY_CH4_Pin
 800966c:	f24f 03e8 	movw	r3, #61672	; 0xf0e8
 8009670:	61fb      	str	r3, [r7, #28]
                          |UART5_DIR_Pin|LED_LINK_Pin|LED_WORK_Pin|LED_FAILURE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009672:	2301      	movs	r3, #1
 8009674:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009676:	2300      	movs	r3, #0
 8009678:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800967a:	2300      	movs	r3, #0
 800967c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800967e:	f107 031c 	add.w	r3, r7, #28
 8009682:	4619      	mov	r1, r3
 8009684:	480d      	ldr	r0, [pc, #52]	; (80096bc <MX_GPIO_Init+0x190>)
 8009686:	f003 fcab 	bl	800cfe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SSR_GATE1_Pin;
 800968a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800968e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009690:	2301      	movs	r3, #1
 8009692:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009694:	2300      	movs	r3, #0
 8009696:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009698:	2300      	movs	r3, #0
 800969a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SSR_GATE1_GPIO_Port, &GPIO_InitStruct);
 800969c:	f107 031c 	add.w	r3, r7, #28
 80096a0:	4619      	mov	r1, r3
 80096a2:	4807      	ldr	r0, [pc, #28]	; (80096c0 <MX_GPIO_Init+0x194>)
 80096a4:	f003 fc9c 	bl	800cfe0 <HAL_GPIO_Init>

}
 80096a8:	bf00      	nop
 80096aa:	3730      	adds	r7, #48	; 0x30
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bd80      	pop	{r7, pc}
 80096b0:	40023800 	.word	0x40023800
 80096b4:	40021000 	.word	0x40021000
 80096b8:	40020000 	.word	0x40020000
 80096bc:	40020c00 	.word	0x40020c00
 80096c0:	40020800 	.word	0x40020800

080096c4 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80096c8:	4b12      	ldr	r3, [pc, #72]	; (8009714 <MX_I2C1_Init+0x50>)
 80096ca:	4a13      	ldr	r2, [pc, #76]	; (8009718 <MX_I2C1_Init+0x54>)
 80096cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80096ce:	4b11      	ldr	r3, [pc, #68]	; (8009714 <MX_I2C1_Init+0x50>)
 80096d0:	4a12      	ldr	r2, [pc, #72]	; (800971c <MX_I2C1_Init+0x58>)
 80096d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80096d4:	4b0f      	ldr	r3, [pc, #60]	; (8009714 <MX_I2C1_Init+0x50>)
 80096d6:	2200      	movs	r2, #0
 80096d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80096da:	4b0e      	ldr	r3, [pc, #56]	; (8009714 <MX_I2C1_Init+0x50>)
 80096dc:	2200      	movs	r2, #0
 80096de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80096e0:	4b0c      	ldr	r3, [pc, #48]	; (8009714 <MX_I2C1_Init+0x50>)
 80096e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80096e6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80096e8:	4b0a      	ldr	r3, [pc, #40]	; (8009714 <MX_I2C1_Init+0x50>)
 80096ea:	2200      	movs	r2, #0
 80096ec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80096ee:	4b09      	ldr	r3, [pc, #36]	; (8009714 <MX_I2C1_Init+0x50>)
 80096f0:	2200      	movs	r2, #0
 80096f2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80096f4:	4b07      	ldr	r3, [pc, #28]	; (8009714 <MX_I2C1_Init+0x50>)
 80096f6:	2200      	movs	r2, #0
 80096f8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80096fa:	4b06      	ldr	r3, [pc, #24]	; (8009714 <MX_I2C1_Init+0x50>)
 80096fc:	2200      	movs	r2, #0
 80096fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8009700:	4804      	ldr	r0, [pc, #16]	; (8009714 <MX_I2C1_Init+0x50>)
 8009702:	f003 fe55 	bl	800d3b0 <HAL_I2C_Init>
 8009706:	4603      	mov	r3, r0
 8009708:	2b00      	cmp	r3, #0
 800970a:	d001      	beq.n	8009710 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800970c:	f000 fa22 	bl	8009b54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8009710:	bf00      	nop
 8009712:	bd80      	pop	{r7, pc}
 8009714:	2001410c 	.word	0x2001410c
 8009718:	40005400 	.word	0x40005400
 800971c:	000186a0 	.word	0x000186a0

08009720 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8009724:	4b12      	ldr	r3, [pc, #72]	; (8009770 <MX_I2C3_Init+0x50>)
 8009726:	4a13      	ldr	r2, [pc, #76]	; (8009774 <MX_I2C3_Init+0x54>)
 8009728:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800972a:	4b11      	ldr	r3, [pc, #68]	; (8009770 <MX_I2C3_Init+0x50>)
 800972c:	4a12      	ldr	r2, [pc, #72]	; (8009778 <MX_I2C3_Init+0x58>)
 800972e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8009730:	4b0f      	ldr	r3, [pc, #60]	; (8009770 <MX_I2C3_Init+0x50>)
 8009732:	2200      	movs	r2, #0
 8009734:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8009736:	4b0e      	ldr	r3, [pc, #56]	; (8009770 <MX_I2C3_Init+0x50>)
 8009738:	2200      	movs	r2, #0
 800973a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800973c:	4b0c      	ldr	r3, [pc, #48]	; (8009770 <MX_I2C3_Init+0x50>)
 800973e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009742:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8009744:	4b0a      	ldr	r3, [pc, #40]	; (8009770 <MX_I2C3_Init+0x50>)
 8009746:	2200      	movs	r2, #0
 8009748:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800974a:	4b09      	ldr	r3, [pc, #36]	; (8009770 <MX_I2C3_Init+0x50>)
 800974c:	2200      	movs	r2, #0
 800974e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8009750:	4b07      	ldr	r3, [pc, #28]	; (8009770 <MX_I2C3_Init+0x50>)
 8009752:	2200      	movs	r2, #0
 8009754:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8009756:	4b06      	ldr	r3, [pc, #24]	; (8009770 <MX_I2C3_Init+0x50>)
 8009758:	2200      	movs	r2, #0
 800975a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800975c:	4804      	ldr	r0, [pc, #16]	; (8009770 <MX_I2C3_Init+0x50>)
 800975e:	f003 fe27 	bl	800d3b0 <HAL_I2C_Init>
 8009762:	4603      	mov	r3, r0
 8009764:	2b00      	cmp	r3, #0
 8009766:	d001      	beq.n	800976c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8009768:	f000 f9f4 	bl	8009b54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800976c:	bf00      	nop
 800976e:	bd80      	pop	{r7, pc}
 8009770:	200140b8 	.word	0x200140b8
 8009774:	40005c00 	.word	0x40005c00
 8009778:	000186a0 	.word	0x000186a0

0800977c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b08c      	sub	sp, #48	; 0x30
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009784:	f107 031c 	add.w	r3, r7, #28
 8009788:	2200      	movs	r2, #0
 800978a:	601a      	str	r2, [r3, #0]
 800978c:	605a      	str	r2, [r3, #4]
 800978e:	609a      	str	r2, [r3, #8]
 8009790:	60da      	str	r2, [r3, #12]
 8009792:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	4a42      	ldr	r2, [pc, #264]	; (80098a4 <HAL_I2C_MspInit+0x128>)
 800979a:	4293      	cmp	r3, r2
 800979c:	d12c      	bne.n	80097f8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800979e:	2300      	movs	r3, #0
 80097a0:	61bb      	str	r3, [r7, #24]
 80097a2:	4b41      	ldr	r3, [pc, #260]	; (80098a8 <HAL_I2C_MspInit+0x12c>)
 80097a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097a6:	4a40      	ldr	r2, [pc, #256]	; (80098a8 <HAL_I2C_MspInit+0x12c>)
 80097a8:	f043 0302 	orr.w	r3, r3, #2
 80097ac:	6313      	str	r3, [r2, #48]	; 0x30
 80097ae:	4b3e      	ldr	r3, [pc, #248]	; (80098a8 <HAL_I2C_MspInit+0x12c>)
 80097b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097b2:	f003 0302 	and.w	r3, r3, #2
 80097b6:	61bb      	str	r3, [r7, #24]
 80097b8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80097ba:	23c0      	movs	r3, #192	; 0xc0
 80097bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80097be:	2312      	movs	r3, #18
 80097c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097c2:	2300      	movs	r3, #0
 80097c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80097c6:	2303      	movs	r3, #3
 80097c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80097ca:	2304      	movs	r3, #4
 80097cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80097ce:	f107 031c 	add.w	r3, r7, #28
 80097d2:	4619      	mov	r1, r3
 80097d4:	4835      	ldr	r0, [pc, #212]	; (80098ac <HAL_I2C_MspInit+0x130>)
 80097d6:	f003 fc03 	bl	800cfe0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80097da:	2300      	movs	r3, #0
 80097dc:	617b      	str	r3, [r7, #20]
 80097de:	4b32      	ldr	r3, [pc, #200]	; (80098a8 <HAL_I2C_MspInit+0x12c>)
 80097e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097e2:	4a31      	ldr	r2, [pc, #196]	; (80098a8 <HAL_I2C_MspInit+0x12c>)
 80097e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80097e8:	6413      	str	r3, [r2, #64]	; 0x40
 80097ea:	4b2f      	ldr	r3, [pc, #188]	; (80098a8 <HAL_I2C_MspInit+0x12c>)
 80097ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80097f2:	617b      	str	r3, [r7, #20]
 80097f4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80097f6:	e050      	b.n	800989a <HAL_I2C_MspInit+0x11e>
  else if(i2cHandle->Instance==I2C3)
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	4a2c      	ldr	r2, [pc, #176]	; (80098b0 <HAL_I2C_MspInit+0x134>)
 80097fe:	4293      	cmp	r3, r2
 8009800:	d14b      	bne.n	800989a <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009802:	2300      	movs	r3, #0
 8009804:	613b      	str	r3, [r7, #16]
 8009806:	4b28      	ldr	r3, [pc, #160]	; (80098a8 <HAL_I2C_MspInit+0x12c>)
 8009808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800980a:	4a27      	ldr	r2, [pc, #156]	; (80098a8 <HAL_I2C_MspInit+0x12c>)
 800980c:	f043 0304 	orr.w	r3, r3, #4
 8009810:	6313      	str	r3, [r2, #48]	; 0x30
 8009812:	4b25      	ldr	r3, [pc, #148]	; (80098a8 <HAL_I2C_MspInit+0x12c>)
 8009814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009816:	f003 0304 	and.w	r3, r3, #4
 800981a:	613b      	str	r3, [r7, #16]
 800981c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800981e:	2300      	movs	r3, #0
 8009820:	60fb      	str	r3, [r7, #12]
 8009822:	4b21      	ldr	r3, [pc, #132]	; (80098a8 <HAL_I2C_MspInit+0x12c>)
 8009824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009826:	4a20      	ldr	r2, [pc, #128]	; (80098a8 <HAL_I2C_MspInit+0x12c>)
 8009828:	f043 0301 	orr.w	r3, r3, #1
 800982c:	6313      	str	r3, [r2, #48]	; 0x30
 800982e:	4b1e      	ldr	r3, [pc, #120]	; (80098a8 <HAL_I2C_MspInit+0x12c>)
 8009830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009832:	f003 0301 	and.w	r3, r3, #1
 8009836:	60fb      	str	r3, [r7, #12]
 8009838:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800983a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800983e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009840:	2312      	movs	r3, #18
 8009842:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009844:	2300      	movs	r3, #0
 8009846:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009848:	2303      	movs	r3, #3
 800984a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800984c:	2304      	movs	r3, #4
 800984e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009850:	f107 031c 	add.w	r3, r7, #28
 8009854:	4619      	mov	r1, r3
 8009856:	4817      	ldr	r0, [pc, #92]	; (80098b4 <HAL_I2C_MspInit+0x138>)
 8009858:	f003 fbc2 	bl	800cfe0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800985c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009860:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009862:	2312      	movs	r3, #18
 8009864:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009866:	2300      	movs	r3, #0
 8009868:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800986a:	2303      	movs	r3, #3
 800986c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800986e:	2304      	movs	r3, #4
 8009870:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009872:	f107 031c 	add.w	r3, r7, #28
 8009876:	4619      	mov	r1, r3
 8009878:	480f      	ldr	r0, [pc, #60]	; (80098b8 <HAL_I2C_MspInit+0x13c>)
 800987a:	f003 fbb1 	bl	800cfe0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800987e:	2300      	movs	r3, #0
 8009880:	60bb      	str	r3, [r7, #8]
 8009882:	4b09      	ldr	r3, [pc, #36]	; (80098a8 <HAL_I2C_MspInit+0x12c>)
 8009884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009886:	4a08      	ldr	r2, [pc, #32]	; (80098a8 <HAL_I2C_MspInit+0x12c>)
 8009888:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800988c:	6413      	str	r3, [r2, #64]	; 0x40
 800988e:	4b06      	ldr	r3, [pc, #24]	; (80098a8 <HAL_I2C_MspInit+0x12c>)
 8009890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009892:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009896:	60bb      	str	r3, [r7, #8]
 8009898:	68bb      	ldr	r3, [r7, #8]
}
 800989a:	bf00      	nop
 800989c:	3730      	adds	r7, #48	; 0x30
 800989e:	46bd      	mov	sp, r7
 80098a0:	bd80      	pop	{r7, pc}
 80098a2:	bf00      	nop
 80098a4:	40005400 	.word	0x40005400
 80098a8:	40023800 	.word	0x40023800
 80098ac:	40020400 	.word	0x40020400
 80098b0:	40005c00 	.word	0x40005c00
 80098b4:	40020800 	.word	0x40020800
 80098b8:	40020000 	.word	0x40020000

080098bc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80098bc:	b480      	push	{r7}
 80098be:	b083      	sub	sp, #12
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80098c4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80098c8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80098cc:	f003 0301 	and.w	r3, r3, #1
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d013      	beq.n	80098fc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80098d4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80098d8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80098dc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d00b      	beq.n	80098fc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80098e4:	e000      	b.n	80098e8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80098e6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80098e8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d0f9      	beq.n	80098e6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80098f2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80098f6:	687a      	ldr	r2, [r7, #4]
 80098f8:	b2d2      	uxtb	r2, r2
 80098fa:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80098fc:	687b      	ldr	r3, [r7, #4]
}
 80098fe:	4618      	mov	r0, r3
 8009900:	370c      	adds	r7, #12
 8009902:	46bd      	mov	sp, r7
 8009904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009908:	4770      	bx	lr

0800990a <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t falling;

int _write(int file, char *ptr, int len)
{
 800990a:	b580      	push	{r7, lr}
 800990c:	b086      	sub	sp, #24
 800990e:	af00      	add	r7, sp, #0
 8009910:	60f8      	str	r0, [r7, #12]
 8009912:	60b9      	str	r1, [r7, #8]
 8009914:	607a      	str	r2, [r7, #4]
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009916:	2300      	movs	r3, #0
 8009918:	617b      	str	r3, [r7, #20]
 800991a:	e009      	b.n	8009930 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 800991c:	68bb      	ldr	r3, [r7, #8]
 800991e:	1c5a      	adds	r2, r3, #1
 8009920:	60ba      	str	r2, [r7, #8]
 8009922:	781b      	ldrb	r3, [r3, #0]
 8009924:	4618      	mov	r0, r3
 8009926:	f7ff ffc9 	bl	80098bc <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800992a:	697b      	ldr	r3, [r7, #20]
 800992c:	3301      	adds	r3, #1
 800992e:	617b      	str	r3, [r7, #20]
 8009930:	697a      	ldr	r2, [r7, #20]
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	429a      	cmp	r2, r3
 8009936:	dbf1      	blt.n	800991c <_write+0x12>
  }
  return len;
 8009938:	687b      	ldr	r3, [r7, #4]
}
 800993a:	4618      	mov	r0, r3
 800993c:	3718      	adds	r7, #24
 800993e:	46bd      	mov	sp, r7
 8009940:	bd80      	pop	{r7, pc}
	...

08009944 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b082      	sub	sp, #8
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM1) // check if the interrupt comes from TIM1
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	4a07      	ldr	r2, [pc, #28]	; (8009970 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8009952:	4293      	cmp	r3, r2
 8009954:	d101      	bne.n	800995a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    get_ds_data_mass();
 8009956:	f7ff faed 	bl	8008f34 <get_ds_data_mass>
//    get_sht_data();
//    get_xgz_data();
//    get_aht_data();
  }
  if (htim->Instance == TIM2) // check if the interrupt comes from TIM1
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009962:	d101      	bne.n	8009968 <HAL_TIM_PeriodElapsedCallback+0x24>
  {
	  ten_handler();
 8009964:	f7fe fdb0 	bl	80084c8 <ten_handler>
  }
//  if (htim->Instance == TIM12) // check if the interrupt comes from TIM12
//  {
//    link_callback_IP();
//  }
}
 8009968:	bf00      	nop
 800996a:	3708      	adds	r7, #8
 800996c:	46bd      	mov	sp, r7
 800996e:	bd80      	pop	{r7, pc}
 8009970:	40010000 	.word	0x40010000

08009974 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b082      	sub	sp, #8
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3)
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	4a13      	ldr	r2, [pc, #76]	; (80099d0 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8009982:	4293      	cmp	r3, r2
 8009984:	d120      	bne.n	80099c8 <HAL_TIM_IC_CaptureCallback+0x54>
    {
        if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	7f1b      	ldrb	r3, [r3, #28]
 800998a:	2b04      	cmp	r3, #4
 800998c:	d114      	bne.n	80099b8 <HAL_TIM_IC_CaptureCallback+0x44>
        {
			falling = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_4); // чтение значения в регистре захвата/сравнения
 800998e:	210c      	movs	r1, #12
 8009990:	4810      	ldr	r0, [pc, #64]	; (80099d4 <HAL_TIM_IC_CaptureCallback+0x60>)
 8009992:	f005 f9ef 	bl	800ed74 <HAL_TIM_ReadCapturedValue>
 8009996:	4603      	mov	r3, r0
 8009998:	4a0f      	ldr	r2, [pc, #60]	; (80099d8 <HAL_TIM_IC_CaptureCallback+0x64>)
 800999a:	6013      	str	r3, [r2, #0]
			if(falling > 0)
 800999c:	4b0e      	ldr	r3, [pc, #56]	; (80099d8 <HAL_TIM_IC_CaptureCallback+0x64>)
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d004      	beq.n	80099ae <HAL_TIM_IC_CaptureCallback+0x3a>
				device->error_fan = false;
 80099a4:	4b0d      	ldr	r3, [pc, #52]	; (80099dc <HAL_TIM_IC_CaptureCallback+0x68>)
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	2200      	movs	r2, #0
 80099aa:	725a      	strb	r2, [r3, #9]
        else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4) // FALLING с HIGH на LOW
        {
        	__HAL_TIM_SET_COUNTER(&htim3, 0x0000); // обнуление счётчика
        }
    }
}
 80099ac:	e00c      	b.n	80099c8 <HAL_TIM_IC_CaptureCallback+0x54>
				device->error_fan = true;
 80099ae:	4b0b      	ldr	r3, [pc, #44]	; (80099dc <HAL_TIM_IC_CaptureCallback+0x68>)
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	2201      	movs	r2, #1
 80099b4:	725a      	strb	r2, [r3, #9]
}
 80099b6:	e007      	b.n	80099c8 <HAL_TIM_IC_CaptureCallback+0x54>
        else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4) // FALLING с HIGH на LOW
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	7f1b      	ldrb	r3, [r3, #28]
 80099bc:	2b08      	cmp	r3, #8
 80099be:	d103      	bne.n	80099c8 <HAL_TIM_IC_CaptureCallback+0x54>
        	__HAL_TIM_SET_COUNTER(&htim3, 0x0000); // обнуление счётчика
 80099c0:	4b04      	ldr	r3, [pc, #16]	; (80099d4 <HAL_TIM_IC_CaptureCallback+0x60>)
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	2200      	movs	r2, #0
 80099c6:	625a      	str	r2, [r3, #36]	; 0x24
}
 80099c8:	bf00      	nop
 80099ca:	3708      	adds	r7, #8
 80099cc:	46bd      	mov	sp, r7
 80099ce:	bd80      	pop	{r7, pc}
 80099d0:	40000400 	.word	0x40000400
 80099d4:	20014204 	.word	0x20014204
 80099d8:	20014160 	.word	0x20014160
 80099dc:	20013a78 	.word	0x20013a78

080099e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80099e4:	f001 f8e0 	bl	800aba8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80099e8:	f000 f84a 	bl	8009a80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80099ec:	f7ff fd9e 	bl	800952c <MX_GPIO_Init>
  MX_DMA_Init();
 80099f0:	f7ff fce0 	bl	80093b4 <MX_DMA_Init>
  MX_UART5_Init();
 80099f4:	f000 fe80 	bl	800a6f8 <MX_UART5_Init>
  MX_SPI1_Init();
 80099f8:	f000 f8b2 	bl	8009b60 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80099fc:	f000 fea6 	bl	800a74c <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8009a00:	f7ff fe60 	bl	80096c4 <MX_I2C1_Init>
  MX_TIM1_Init();
 8009a04:	f000 fae4 	bl	8009fd0 <MX_TIM1_Init>
  MX_TIM8_Init();
 8009a08:	f000 fbe6 	bl	800a1d8 <MX_TIM8_Init>
  MX_TIM12_Init();
 8009a0c:	f000 fcae 	bl	800a36c <MX_TIM12_Init>
  MX_I2C3_Init();
 8009a10:	f7ff fe86 	bl	8009720 <MX_I2C3_Init>
  MX_UART4_Init();
 8009a14:	f000 fe46 	bl	800a6a4 <MX_UART4_Init>
  MX_TIM2_Init();
 8009a18:	f000 fb2c 	bl	800a074 <MX_TIM2_Init>
  MX_TIM9_Init();
 8009a1c:	f000 fc60 	bl	800a2e0 <MX_TIM9_Init>
  MX_TIM3_Init();
 8009a20:	f000 fb76 	bl	800a110 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  init_storage();
 8009a24:	f7ff fcb0 	bl	8009388 <init_storage>
  init_ds_devices();
 8009a28:	f7ff fa8c 	bl	8008f44 <init_ds_devices>
//  init_sht_devices();
  HAL_TIM_Base_Start_IT(&htim1);
 8009a2c:	480f      	ldr	r0, [pc, #60]	; (8009a6c <main+0x8c>)
 8009a2e:	f004 fb73 	bl	800e118 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8009a32:	480f      	ldr	r0, [pc, #60]	; (8009a70 <main+0x90>)
 8009a34:	f004 fb70 	bl	800e118 <HAL_TIM_Base_Start_IT>
  init_modbus_master();
 8009a38:	f7f9 fdb8 	bl	80035ac <init_modbus_master>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8009a3c:	2104      	movs	r1, #4
 8009a3e:	480d      	ldr	r0, [pc, #52]	; (8009a74 <main+0x94>)
 8009a40:	f004 fc2a 	bl	800e298 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_2);
 8009a44:	2104      	movs	r1, #4
 8009a46:	480c      	ldr	r0, [pc, #48]	; (8009a78 <main+0x98>)
 8009a48:	f004 fc26 	bl	800e298 <HAL_TIM_PWM_Start>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_3);
 8009a4c:	2108      	movs	r1, #8
 8009a4e:	480b      	ldr	r0, [pc, #44]	; (8009a7c <main+0x9c>)
 8009a50:	f004 fd3a 	bl	800e4c8 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_4);
 8009a54:	210c      	movs	r1, #12
 8009a56:	4809      	ldr	r0, [pc, #36]	; (8009a7c <main+0x9c>)
 8009a58:	f004 fd36 	bl	800e4c8 <HAL_TIM_IC_Start_IT>
//  HAL_TIM_Base_Start_IT(&htim12);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8009a5c:	f008 f848 	bl	8011af0 <osKernelInitialize>
  MX_FREERTOS_Init();
 8009a60:	f7ff fcee 	bl	8009440 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8009a64:	f008 f868 	bl	8011b38 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8009a68:	e7fe      	b.n	8009a68 <main+0x88>
 8009a6a:	bf00      	nop
 8009a6c:	2001424c 	.word	0x2001424c
 8009a70:	200142dc 	.word	0x200142dc
 8009a74:	200141bc 	.word	0x200141bc
 8009a78:	20014294 	.word	0x20014294
 8009a7c:	20014204 	.word	0x20014204

08009a80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b094      	sub	sp, #80	; 0x50
 8009a84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009a86:	f107 0320 	add.w	r3, r7, #32
 8009a8a:	2230      	movs	r2, #48	; 0x30
 8009a8c:	2100      	movs	r1, #0
 8009a8e:	4618      	mov	r0, r3
 8009a90:	f01a ffe0 	bl	8024a54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009a94:	f107 030c 	add.w	r3, r7, #12
 8009a98:	2200      	movs	r2, #0
 8009a9a:	601a      	str	r2, [r3, #0]
 8009a9c:	605a      	str	r2, [r3, #4]
 8009a9e:	609a      	str	r2, [r3, #8]
 8009aa0:	60da      	str	r2, [r3, #12]
 8009aa2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	60bb      	str	r3, [r7, #8]
 8009aa8:	4b28      	ldr	r3, [pc, #160]	; (8009b4c <SystemClock_Config+0xcc>)
 8009aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aac:	4a27      	ldr	r2, [pc, #156]	; (8009b4c <SystemClock_Config+0xcc>)
 8009aae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009ab2:	6413      	str	r3, [r2, #64]	; 0x40
 8009ab4:	4b25      	ldr	r3, [pc, #148]	; (8009b4c <SystemClock_Config+0xcc>)
 8009ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ab8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009abc:	60bb      	str	r3, [r7, #8]
 8009abe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	607b      	str	r3, [r7, #4]
 8009ac4:	4b22      	ldr	r3, [pc, #136]	; (8009b50 <SystemClock_Config+0xd0>)
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	4a21      	ldr	r2, [pc, #132]	; (8009b50 <SystemClock_Config+0xd0>)
 8009aca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009ace:	6013      	str	r3, [r2, #0]
 8009ad0:	4b1f      	ldr	r3, [pc, #124]	; (8009b50 <SystemClock_Config+0xd0>)
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009ad8:	607b      	str	r3, [r7, #4]
 8009ada:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8009adc:	2301      	movs	r3, #1
 8009ade:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8009ae0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009ae4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009ae6:	2302      	movs	r3, #2
 8009ae8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009aea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009aee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8009af0:	2304      	movs	r3, #4
 8009af2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8009af4:	23a8      	movs	r3, #168	; 0xa8
 8009af6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8009af8:	2302      	movs	r3, #2
 8009afa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8009afc:	2304      	movs	r3, #4
 8009afe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009b00:	f107 0320 	add.w	r3, r7, #32
 8009b04:	4618      	mov	r0, r3
 8009b06:	f003 fd97 	bl	800d638 <HAL_RCC_OscConfig>
 8009b0a:	4603      	mov	r3, r0
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d001      	beq.n	8009b14 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8009b10:	f000 f820 	bl	8009b54 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009b14:	230f      	movs	r3, #15
 8009b16:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009b18:	2302      	movs	r3, #2
 8009b1a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8009b20:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8009b24:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8009b26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009b2a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8009b2c:	f107 030c 	add.w	r3, r7, #12
 8009b30:	2105      	movs	r1, #5
 8009b32:	4618      	mov	r0, r3
 8009b34:	f003 fff8 	bl	800db28 <HAL_RCC_ClockConfig>
 8009b38:	4603      	mov	r3, r0
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d001      	beq.n	8009b42 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8009b3e:	f000 f809 	bl	8009b54 <Error_Handler>
  }
}
 8009b42:	bf00      	nop
 8009b44:	3750      	adds	r7, #80	; 0x50
 8009b46:	46bd      	mov	sp, r7
 8009b48:	bd80      	pop	{r7, pc}
 8009b4a:	bf00      	nop
 8009b4c:	40023800 	.word	0x40023800
 8009b50:	40007000 	.word	0x40007000

08009b54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009b54:	b480      	push	{r7}
 8009b56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8009b58:	b672      	cpsid	i
}
 8009b5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8009b5c:	e7fe      	b.n	8009b5c <Error_Handler+0x8>
	...

08009b60 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8009b64:	4b17      	ldr	r3, [pc, #92]	; (8009bc4 <MX_SPI1_Init+0x64>)
 8009b66:	4a18      	ldr	r2, [pc, #96]	; (8009bc8 <MX_SPI1_Init+0x68>)
 8009b68:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8009b6a:	4b16      	ldr	r3, [pc, #88]	; (8009bc4 <MX_SPI1_Init+0x64>)
 8009b6c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8009b70:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8009b72:	4b14      	ldr	r3, [pc, #80]	; (8009bc4 <MX_SPI1_Init+0x64>)
 8009b74:	2200      	movs	r2, #0
 8009b76:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8009b78:	4b12      	ldr	r3, [pc, #72]	; (8009bc4 <MX_SPI1_Init+0x64>)
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8009b7e:	4b11      	ldr	r3, [pc, #68]	; (8009bc4 <MX_SPI1_Init+0x64>)
 8009b80:	2200      	movs	r2, #0
 8009b82:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8009b84:	4b0f      	ldr	r3, [pc, #60]	; (8009bc4 <MX_SPI1_Init+0x64>)
 8009b86:	2200      	movs	r2, #0
 8009b88:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8009b8a:	4b0e      	ldr	r3, [pc, #56]	; (8009bc4 <MX_SPI1_Init+0x64>)
 8009b8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009b90:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009b92:	4b0c      	ldr	r3, [pc, #48]	; (8009bc4 <MX_SPI1_Init+0x64>)
 8009b94:	2200      	movs	r2, #0
 8009b96:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8009b98:	4b0a      	ldr	r3, [pc, #40]	; (8009bc4 <MX_SPI1_Init+0x64>)
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8009b9e:	4b09      	ldr	r3, [pc, #36]	; (8009bc4 <MX_SPI1_Init+0x64>)
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009ba4:	4b07      	ldr	r3, [pc, #28]	; (8009bc4 <MX_SPI1_Init+0x64>)
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8009baa:	4b06      	ldr	r3, [pc, #24]	; (8009bc4 <MX_SPI1_Init+0x64>)
 8009bac:	220a      	movs	r2, #10
 8009bae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8009bb0:	4804      	ldr	r0, [pc, #16]	; (8009bc4 <MX_SPI1_Init+0x64>)
 8009bb2:	f004 f9d9 	bl	800df68 <HAL_SPI_Init>
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d001      	beq.n	8009bc0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8009bbc:	f7ff ffca 	bl	8009b54 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8009bc0:	bf00      	nop
 8009bc2:	bd80      	pop	{r7, pc}
 8009bc4:	20014164 	.word	0x20014164
 8009bc8:	40013000 	.word	0x40013000

08009bcc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b08a      	sub	sp, #40	; 0x28
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009bd4:	f107 0314 	add.w	r3, r7, #20
 8009bd8:	2200      	movs	r2, #0
 8009bda:	601a      	str	r2, [r3, #0]
 8009bdc:	605a      	str	r2, [r3, #4]
 8009bde:	609a      	str	r2, [r3, #8]
 8009be0:	60da      	str	r2, [r3, #12]
 8009be2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	4a28      	ldr	r2, [pc, #160]	; (8009c8c <HAL_SPI_MspInit+0xc0>)
 8009bea:	4293      	cmp	r3, r2
 8009bec:	d149      	bne.n	8009c82 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8009bee:	2300      	movs	r3, #0
 8009bf0:	613b      	str	r3, [r7, #16]
 8009bf2:	4b27      	ldr	r3, [pc, #156]	; (8009c90 <HAL_SPI_MspInit+0xc4>)
 8009bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bf6:	4a26      	ldr	r2, [pc, #152]	; (8009c90 <HAL_SPI_MspInit+0xc4>)
 8009bf8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009bfc:	6453      	str	r3, [r2, #68]	; 0x44
 8009bfe:	4b24      	ldr	r3, [pc, #144]	; (8009c90 <HAL_SPI_MspInit+0xc4>)
 8009c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009c06:	613b      	str	r3, [r7, #16]
 8009c08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	60fb      	str	r3, [r7, #12]
 8009c0e:	4b20      	ldr	r3, [pc, #128]	; (8009c90 <HAL_SPI_MspInit+0xc4>)
 8009c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c12:	4a1f      	ldr	r2, [pc, #124]	; (8009c90 <HAL_SPI_MspInit+0xc4>)
 8009c14:	f043 0301 	orr.w	r3, r3, #1
 8009c18:	6313      	str	r3, [r2, #48]	; 0x30
 8009c1a:	4b1d      	ldr	r3, [pc, #116]	; (8009c90 <HAL_SPI_MspInit+0xc4>)
 8009c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c1e:	f003 0301 	and.w	r3, r3, #1
 8009c22:	60fb      	str	r3, [r7, #12]
 8009c24:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009c26:	2300      	movs	r3, #0
 8009c28:	60bb      	str	r3, [r7, #8]
 8009c2a:	4b19      	ldr	r3, [pc, #100]	; (8009c90 <HAL_SPI_MspInit+0xc4>)
 8009c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c2e:	4a18      	ldr	r2, [pc, #96]	; (8009c90 <HAL_SPI_MspInit+0xc4>)
 8009c30:	f043 0302 	orr.w	r3, r3, #2
 8009c34:	6313      	str	r3, [r2, #48]	; 0x30
 8009c36:	4b16      	ldr	r3, [pc, #88]	; (8009c90 <HAL_SPI_MspInit+0xc4>)
 8009c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c3a:	f003 0302 	and.w	r3, r3, #2
 8009c3e:	60bb      	str	r3, [r7, #8]
 8009c40:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8009c42:	2360      	movs	r3, #96	; 0x60
 8009c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009c46:	2302      	movs	r3, #2
 8009c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009c4e:	2303      	movs	r3, #3
 8009c50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8009c52:	2305      	movs	r3, #5
 8009c54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009c56:	f107 0314 	add.w	r3, r7, #20
 8009c5a:	4619      	mov	r1, r3
 8009c5c:	480d      	ldr	r0, [pc, #52]	; (8009c94 <HAL_SPI_MspInit+0xc8>)
 8009c5e:	f003 f9bf 	bl	800cfe0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8009c62:	2320      	movs	r3, #32
 8009c64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009c66:	2302      	movs	r3, #2
 8009c68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009c6e:	2303      	movs	r3, #3
 8009c70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8009c72:	2305      	movs	r3, #5
 8009c74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009c76:	f107 0314 	add.w	r3, r7, #20
 8009c7a:	4619      	mov	r1, r3
 8009c7c:	4806      	ldr	r0, [pc, #24]	; (8009c98 <HAL_SPI_MspInit+0xcc>)
 8009c7e:	f003 f9af 	bl	800cfe0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8009c82:	bf00      	nop
 8009c84:	3728      	adds	r7, #40	; 0x28
 8009c86:	46bd      	mov	sp, r7
 8009c88:	bd80      	pop	{r7, pc}
 8009c8a:	bf00      	nop
 8009c8c:	40013000 	.word	0x40013000
 8009c90:	40023800 	.word	0x40023800
 8009c94:	40020000 	.word	0x40020000
 8009c98:	40020400 	.word	0x40020400

08009c9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b082      	sub	sp, #8
 8009ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	607b      	str	r3, [r7, #4]
 8009ca6:	4b12      	ldr	r3, [pc, #72]	; (8009cf0 <HAL_MspInit+0x54>)
 8009ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009caa:	4a11      	ldr	r2, [pc, #68]	; (8009cf0 <HAL_MspInit+0x54>)
 8009cac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009cb0:	6453      	str	r3, [r2, #68]	; 0x44
 8009cb2:	4b0f      	ldr	r3, [pc, #60]	; (8009cf0 <HAL_MspInit+0x54>)
 8009cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009cba:	607b      	str	r3, [r7, #4]
 8009cbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	603b      	str	r3, [r7, #0]
 8009cc2:	4b0b      	ldr	r3, [pc, #44]	; (8009cf0 <HAL_MspInit+0x54>)
 8009cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cc6:	4a0a      	ldr	r2, [pc, #40]	; (8009cf0 <HAL_MspInit+0x54>)
 8009cc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009ccc:	6413      	str	r3, [r2, #64]	; 0x40
 8009cce:	4b08      	ldr	r3, [pc, #32]	; (8009cf0 <HAL_MspInit+0x54>)
 8009cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009cd6:	603b      	str	r3, [r7, #0]
 8009cd8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8009cda:	2200      	movs	r2, #0
 8009cdc:	210f      	movs	r1, #15
 8009cde:	f06f 0001 	mvn.w	r0, #1
 8009ce2:	f001 f8d2 	bl	800ae8a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009ce6:	bf00      	nop
 8009ce8:	3708      	adds	r7, #8
 8009cea:	46bd      	mov	sp, r7
 8009cec:	bd80      	pop	{r7, pc}
 8009cee:	bf00      	nop
 8009cf0:	40023800 	.word	0x40023800

08009cf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009cf4:	b480      	push	{r7}
 8009cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8009cf8:	e7fe      	b.n	8009cf8 <NMI_Handler+0x4>

08009cfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009cfa:	b480      	push	{r7}
 8009cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009cfe:	e7fe      	b.n	8009cfe <HardFault_Handler+0x4>

08009d00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009d00:	b480      	push	{r7}
 8009d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009d04:	e7fe      	b.n	8009d04 <MemManage_Handler+0x4>

08009d06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009d06:	b480      	push	{r7}
 8009d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009d0a:	e7fe      	b.n	8009d0a <BusFault_Handler+0x4>

08009d0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009d0c:	b480      	push	{r7}
 8009d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009d10:	e7fe      	b.n	8009d10 <UsageFault_Handler+0x4>

08009d12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009d12:	b480      	push	{r7}
 8009d14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009d16:	bf00      	nop
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1e:	4770      	bx	lr

08009d20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009d24:	f000 ff92 	bl	800ac4c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8009d28:	f00a fb46 	bl	80143b8 <xTaskGetSchedulerState>
 8009d2c:	4603      	mov	r3, r0
 8009d2e:	2b01      	cmp	r3, #1
 8009d30:	d001      	beq.n	8009d36 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8009d32:	f00b fc61 	bl	80155f8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009d36:	bf00      	nop
 8009d38:	bd80      	pop	{r7, pc}
	...

08009d3c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8009d40:	4802      	ldr	r0, [pc, #8]	; (8009d4c <DMA1_Stream0_IRQHandler+0x10>)
 8009d42:	f001 fa71 	bl	800b228 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8009d46:	bf00      	nop
 8009d48:	bd80      	pop	{r7, pc}
 8009d4a:	bf00      	nop
 8009d4c:	200144f8 	.word	0x200144f8

08009d50 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8009d54:	4803      	ldr	r0, [pc, #12]	; (8009d64 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8009d56:	f004 fcdf 	bl	800e718 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8009d5a:	4803      	ldr	r0, [pc, #12]	; (8009d68 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8009d5c:	f004 fcdc 	bl	800e718 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8009d60:	bf00      	nop
 8009d62:	bd80      	pop	{r7, pc}
 8009d64:	2001424c 	.word	0x2001424c
 8009d68:	20014294 	.word	0x20014294

08009d6c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8009d70:	4802      	ldr	r0, [pc, #8]	; (8009d7c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8009d72:	f004 fcd1 	bl	800e718 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8009d76:	bf00      	nop
 8009d78:	bd80      	pop	{r7, pc}
 8009d7a:	bf00      	nop
 8009d7c:	2001424c 	.word	0x2001424c

08009d80 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8009d84:	4802      	ldr	r0, [pc, #8]	; (8009d90 <TIM2_IRQHandler+0x10>)
 8009d86:	f004 fcc7 	bl	800e718 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8009d8a:	bf00      	nop
 8009d8c:	bd80      	pop	{r7, pc}
 8009d8e:	bf00      	nop
 8009d90:	200142dc 	.word	0x200142dc

08009d94 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8009d98:	4802      	ldr	r0, [pc, #8]	; (8009da4 <TIM3_IRQHandler+0x10>)
 8009d9a:	f004 fcbd 	bl	800e718 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8009d9e:	bf00      	nop
 8009da0:	bd80      	pop	{r7, pc}
 8009da2:	bf00      	nop
 8009da4:	20014204 	.word	0x20014204

08009da8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8009dac:	4802      	ldr	r0, [pc, #8]	; (8009db8 <USART1_IRQHandler+0x10>)
 8009dae:	f006 f835 	bl	800fe1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8009db2:	bf00      	nop
 8009db4:	bd80      	pop	{r7, pc}
 8009db6:	bf00      	nop
 8009db8:	20014470 	.word	0x20014470

08009dbc <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8009dc0:	4803      	ldr	r0, [pc, #12]	; (8009dd0 <TIM8_BRK_TIM12_IRQHandler+0x14>)
 8009dc2:	f004 fca9 	bl	800e718 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 8009dc6:	4803      	ldr	r0, [pc, #12]	; (8009dd4 <TIM8_BRK_TIM12_IRQHandler+0x18>)
 8009dc8:	f004 fca6 	bl	800e718 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8009dcc:	bf00      	nop
 8009dce:	bd80      	pop	{r7, pc}
 8009dd0:	200141bc 	.word	0x200141bc
 8009dd4:	20014324 	.word	0x20014324

08009dd8 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8009ddc:	4802      	ldr	r0, [pc, #8]	; (8009de8 <DMA1_Stream7_IRQHandler+0x10>)
 8009dde:	f001 fa23 	bl	800b228 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8009de2:	bf00      	nop
 8009de4:	bd80      	pop	{r7, pc}
 8009de6:	bf00      	nop
 8009de8:	20014558 	.word	0x20014558

08009dec <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8009df0:	4802      	ldr	r0, [pc, #8]	; (8009dfc <UART4_IRQHandler+0x10>)
 8009df2:	f006 f813 	bl	800fe1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8009df6:	bf00      	nop
 8009df8:	bd80      	pop	{r7, pc}
 8009dfa:	bf00      	nop
 8009dfc:	200144b4 	.word	0x200144b4

08009e00 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8009e04:	4802      	ldr	r0, [pc, #8]	; (8009e10 <UART5_IRQHandler+0x10>)
 8009e06:	f006 f809 	bl	800fe1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8009e0a:	bf00      	nop
 8009e0c:	bd80      	pop	{r7, pc}
 8009e0e:	bf00      	nop
 8009e10:	200143cc 	.word	0x200143cc

08009e14 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8009e18:	4802      	ldr	r0, [pc, #8]	; (8009e24 <DMA2_Stream2_IRQHandler+0x10>)
 8009e1a:	f001 fa05 	bl	800b228 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8009e1e:	bf00      	nop
 8009e20:	bd80      	pop	{r7, pc}
 8009e22:	bf00      	nop
 8009e24:	20014410 	.word	0x20014410

08009e28 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8009e2c:	4802      	ldr	r0, [pc, #8]	; (8009e38 <ETH_IRQHandler+0x10>)
 8009e2e:	f002 f845 	bl	800bebc <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8009e32:	bf00      	nop
 8009e34:	bd80      	pop	{r7, pc}
 8009e36:	bf00      	nop
 8009e38:	20015f1c 	.word	0x20015f1c

08009e3c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8009e40:	4802      	ldr	r0, [pc, #8]	; (8009e4c <DMA2_Stream7_IRQHandler+0x10>)
 8009e42:	f001 f9f1 	bl	800b228 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8009e46:	bf00      	nop
 8009e48:	bd80      	pop	{r7, pc}
 8009e4a:	bf00      	nop
 8009e4c:	2001436c 	.word	0x2001436c

08009e50 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8009e50:	b480      	push	{r7}
 8009e52:	af00      	add	r7, sp, #0
  return 1;
 8009e54:	2301      	movs	r3, #1
}
 8009e56:	4618      	mov	r0, r3
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5e:	4770      	bx	lr

08009e60 <_kill>:

int _kill(int pid, int sig)
{
 8009e60:	b480      	push	{r7}
 8009e62:	b083      	sub	sp, #12
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
 8009e68:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8009e6a:	4b05      	ldr	r3, [pc, #20]	; (8009e80 <_kill+0x20>)
 8009e6c:	2216      	movs	r2, #22
 8009e6e:	601a      	str	r2, [r3, #0]
  return -1;
 8009e70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009e74:	4618      	mov	r0, r3
 8009e76:	370c      	adds	r7, #12
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7e:	4770      	bx	lr
 8009e80:	20013930 	.word	0x20013930

08009e84 <_exit>:

void _exit (int status)
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b082      	sub	sp, #8
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8009e8c:	f04f 31ff 	mov.w	r1, #4294967295
 8009e90:	6878      	ldr	r0, [r7, #4]
 8009e92:	f7ff ffe5 	bl	8009e60 <_kill>
  while (1) {}    /* Make sure we hang here */
 8009e96:	e7fe      	b.n	8009e96 <_exit+0x12>

08009e98 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b086      	sub	sp, #24
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	60f8      	str	r0, [r7, #12]
 8009ea0:	60b9      	str	r1, [r7, #8]
 8009ea2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	617b      	str	r3, [r7, #20]
 8009ea8:	e00a      	b.n	8009ec0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8009eaa:	f3af 8000 	nop.w
 8009eae:	4601      	mov	r1, r0
 8009eb0:	68bb      	ldr	r3, [r7, #8]
 8009eb2:	1c5a      	adds	r2, r3, #1
 8009eb4:	60ba      	str	r2, [r7, #8]
 8009eb6:	b2ca      	uxtb	r2, r1
 8009eb8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009eba:	697b      	ldr	r3, [r7, #20]
 8009ebc:	3301      	adds	r3, #1
 8009ebe:	617b      	str	r3, [r7, #20]
 8009ec0:	697a      	ldr	r2, [r7, #20]
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	429a      	cmp	r2, r3
 8009ec6:	dbf0      	blt.n	8009eaa <_read+0x12>
  }

  return len;
 8009ec8:	687b      	ldr	r3, [r7, #4]
}
 8009eca:	4618      	mov	r0, r3
 8009ecc:	3718      	adds	r7, #24
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	bd80      	pop	{r7, pc}

08009ed2 <_close>:
  }
  return len;
}

int _close(int file)
{
 8009ed2:	b480      	push	{r7}
 8009ed4:	b083      	sub	sp, #12
 8009ed6:	af00      	add	r7, sp, #0
 8009ed8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8009eda:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009ede:	4618      	mov	r0, r3
 8009ee0:	370c      	adds	r7, #12
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee8:	4770      	bx	lr

08009eea <_fstat>:


int _fstat(int file, struct stat *st)
{
 8009eea:	b480      	push	{r7}
 8009eec:	b083      	sub	sp, #12
 8009eee:	af00      	add	r7, sp, #0
 8009ef0:	6078      	str	r0, [r7, #4]
 8009ef2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009efa:	605a      	str	r2, [r3, #4]
  return 0;
 8009efc:	2300      	movs	r3, #0
}
 8009efe:	4618      	mov	r0, r3
 8009f00:	370c      	adds	r7, #12
 8009f02:	46bd      	mov	sp, r7
 8009f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f08:	4770      	bx	lr

08009f0a <_isatty>:

int _isatty(int file)
{
 8009f0a:	b480      	push	{r7}
 8009f0c:	b083      	sub	sp, #12
 8009f0e:	af00      	add	r7, sp, #0
 8009f10:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8009f12:	2301      	movs	r3, #1
}
 8009f14:	4618      	mov	r0, r3
 8009f16:	370c      	adds	r7, #12
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1e:	4770      	bx	lr

08009f20 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8009f20:	b480      	push	{r7}
 8009f22:	b085      	sub	sp, #20
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	60f8      	str	r0, [r7, #12]
 8009f28:	60b9      	str	r1, [r7, #8]
 8009f2a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8009f2c:	2300      	movs	r3, #0
}
 8009f2e:	4618      	mov	r0, r3
 8009f30:	3714      	adds	r7, #20
 8009f32:	46bd      	mov	sp, r7
 8009f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f38:	4770      	bx	lr
	...

08009f3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8009f3c:	b480      	push	{r7}
 8009f3e:	b087      	sub	sp, #28
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8009f44:	4a14      	ldr	r2, [pc, #80]	; (8009f98 <_sbrk+0x5c>)
 8009f46:	4b15      	ldr	r3, [pc, #84]	; (8009f9c <_sbrk+0x60>)
 8009f48:	1ad3      	subs	r3, r2, r3
 8009f4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8009f4c:	697b      	ldr	r3, [r7, #20]
 8009f4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8009f50:	4b13      	ldr	r3, [pc, #76]	; (8009fa0 <_sbrk+0x64>)
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d102      	bne.n	8009f5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8009f58:	4b11      	ldr	r3, [pc, #68]	; (8009fa0 <_sbrk+0x64>)
 8009f5a:	4a12      	ldr	r2, [pc, #72]	; (8009fa4 <_sbrk+0x68>)
 8009f5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8009f5e:	4b10      	ldr	r3, [pc, #64]	; (8009fa0 <_sbrk+0x64>)
 8009f60:	681a      	ldr	r2, [r3, #0]
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	4413      	add	r3, r2
 8009f66:	693a      	ldr	r2, [r7, #16]
 8009f68:	429a      	cmp	r2, r3
 8009f6a:	d205      	bcs.n	8009f78 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8009f6c:	4b0e      	ldr	r3, [pc, #56]	; (8009fa8 <_sbrk+0x6c>)
 8009f6e:	220c      	movs	r2, #12
 8009f70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8009f72:	f04f 33ff 	mov.w	r3, #4294967295
 8009f76:	e009      	b.n	8009f8c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8009f78:	4b09      	ldr	r3, [pc, #36]	; (8009fa0 <_sbrk+0x64>)
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8009f7e:	4b08      	ldr	r3, [pc, #32]	; (8009fa0 <_sbrk+0x64>)
 8009f80:	681a      	ldr	r2, [r3, #0]
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	4413      	add	r3, r2
 8009f86:	4a06      	ldr	r2, [pc, #24]	; (8009fa0 <_sbrk+0x64>)
 8009f88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
}
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	371c      	adds	r7, #28
 8009f90:	46bd      	mov	sp, r7
 8009f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f96:	4770      	bx	lr
 8009f98:	20020000 	.word	0x20020000
 8009f9c:	00002000 	.word	0x00002000
 8009fa0:	20000070 	.word	0x20000070
 8009fa4:	10000248 	.word	0x10000248
 8009fa8:	20013930 	.word	0x20013930

08009fac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8009fac:	b480      	push	{r7}
 8009fae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8009fb0:	4b06      	ldr	r3, [pc, #24]	; (8009fcc <SystemInit+0x20>)
 8009fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fb6:	4a05      	ldr	r2, [pc, #20]	; (8009fcc <SystemInit+0x20>)
 8009fb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009fbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8009fc0:	bf00      	nop
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc8:	4770      	bx	lr
 8009fca:	bf00      	nop
 8009fcc:	e000ed00 	.word	0xe000ed00

08009fd0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim9;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b086      	sub	sp, #24
 8009fd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009fd6:	f107 0308 	add.w	r3, r7, #8
 8009fda:	2200      	movs	r2, #0
 8009fdc:	601a      	str	r2, [r3, #0]
 8009fde:	605a      	str	r2, [r3, #4]
 8009fe0:	609a      	str	r2, [r3, #8]
 8009fe2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009fe4:	463b      	mov	r3, r7
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	601a      	str	r2, [r3, #0]
 8009fea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8009fec:	4b1f      	ldr	r3, [pc, #124]	; (800a06c <MX_TIM1_Init+0x9c>)
 8009fee:	4a20      	ldr	r2, [pc, #128]	; (800a070 <MX_TIM1_Init+0xa0>)
 8009ff0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 42000-1;
 8009ff2:	4b1e      	ldr	r3, [pc, #120]	; (800a06c <MX_TIM1_Init+0x9c>)
 8009ff4:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8009ff8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009ffa:	4b1c      	ldr	r3, [pc, #112]	; (800a06c <MX_TIM1_Init+0x9c>)
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 800a000:	4b1a      	ldr	r3, [pc, #104]	; (800a06c <MX_TIM1_Init+0x9c>)
 800a002:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800a006:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a008:	4b18      	ldr	r3, [pc, #96]	; (800a06c <MX_TIM1_Init+0x9c>)
 800a00a:	2200      	movs	r2, #0
 800a00c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800a00e:	4b17      	ldr	r3, [pc, #92]	; (800a06c <MX_TIM1_Init+0x9c>)
 800a010:	2200      	movs	r2, #0
 800a012:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a014:	4b15      	ldr	r3, [pc, #84]	; (800a06c <MX_TIM1_Init+0x9c>)
 800a016:	2200      	movs	r2, #0
 800a018:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800a01a:	4814      	ldr	r0, [pc, #80]	; (800a06c <MX_TIM1_Init+0x9c>)
 800a01c:	f004 f82d 	bl	800e07a <HAL_TIM_Base_Init>
 800a020:	4603      	mov	r3, r0
 800a022:	2b00      	cmp	r3, #0
 800a024:	d001      	beq.n	800a02a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800a026:	f7ff fd95 	bl	8009b54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a02a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a02e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800a030:	f107 0308 	add.w	r3, r7, #8
 800a034:	4619      	mov	r1, r3
 800a036:	480d      	ldr	r0, [pc, #52]	; (800a06c <MX_TIM1_Init+0x9c>)
 800a038:	f004 fdd4 	bl	800ebe4 <HAL_TIM_ConfigClockSource>
 800a03c:	4603      	mov	r3, r0
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d001      	beq.n	800a046 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800a042:	f7ff fd87 	bl	8009b54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a046:	2300      	movs	r3, #0
 800a048:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a04a:	2300      	movs	r3, #0
 800a04c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800a04e:	463b      	mov	r3, r7
 800a050:	4619      	mov	r1, r3
 800a052:	4806      	ldr	r0, [pc, #24]	; (800a06c <MX_TIM1_Init+0x9c>)
 800a054:	f005 fb2a 	bl	800f6ac <HAL_TIMEx_MasterConfigSynchronization>
 800a058:	4603      	mov	r3, r0
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d001      	beq.n	800a062 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800a05e:	f7ff fd79 	bl	8009b54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800a062:	bf00      	nop
 800a064:	3718      	adds	r7, #24
 800a066:	46bd      	mov	sp, r7
 800a068:	bd80      	pop	{r7, pc}
 800a06a:	bf00      	nop
 800a06c:	2001424c 	.word	0x2001424c
 800a070:	40010000 	.word	0x40010000

0800a074 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b086      	sub	sp, #24
 800a078:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a07a:	f107 0308 	add.w	r3, r7, #8
 800a07e:	2200      	movs	r2, #0
 800a080:	601a      	str	r2, [r3, #0]
 800a082:	605a      	str	r2, [r3, #4]
 800a084:	609a      	str	r2, [r3, #8]
 800a086:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a088:	463b      	mov	r3, r7
 800a08a:	2200      	movs	r2, #0
 800a08c:	601a      	str	r2, [r3, #0]
 800a08e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800a090:	4b1e      	ldr	r3, [pc, #120]	; (800a10c <MX_TIM2_Init+0x98>)
 800a092:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800a096:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400-1;
 800a098:	4b1c      	ldr	r3, [pc, #112]	; (800a10c <MX_TIM2_Init+0x98>)
 800a09a:	f242 02cf 	movw	r2, #8399	; 0x20cf
 800a09e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a0a0:	4b1a      	ldr	r3, [pc, #104]	; (800a10c <MX_TIM2_Init+0x98>)
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50000-1;
 800a0a6:	4b19      	ldr	r3, [pc, #100]	; (800a10c <MX_TIM2_Init+0x98>)
 800a0a8:	f24c 324f 	movw	r2, #49999	; 0xc34f
 800a0ac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a0ae:	4b17      	ldr	r3, [pc, #92]	; (800a10c <MX_TIM2_Init+0x98>)
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a0b4:	4b15      	ldr	r3, [pc, #84]	; (800a10c <MX_TIM2_Init+0x98>)
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800a0ba:	4814      	ldr	r0, [pc, #80]	; (800a10c <MX_TIM2_Init+0x98>)
 800a0bc:	f003 ffdd 	bl	800e07a <HAL_TIM_Base_Init>
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d001      	beq.n	800a0ca <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800a0c6:	f7ff fd45 	bl	8009b54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a0ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a0ce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800a0d0:	f107 0308 	add.w	r3, r7, #8
 800a0d4:	4619      	mov	r1, r3
 800a0d6:	480d      	ldr	r0, [pc, #52]	; (800a10c <MX_TIM2_Init+0x98>)
 800a0d8:	f004 fd84 	bl	800ebe4 <HAL_TIM_ConfigClockSource>
 800a0dc:	4603      	mov	r3, r0
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d001      	beq.n	800a0e6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800a0e2:	f7ff fd37 	bl	8009b54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800a0ee:	463b      	mov	r3, r7
 800a0f0:	4619      	mov	r1, r3
 800a0f2:	4806      	ldr	r0, [pc, #24]	; (800a10c <MX_TIM2_Init+0x98>)
 800a0f4:	f005 fada 	bl	800f6ac <HAL_TIMEx_MasterConfigSynchronization>
 800a0f8:	4603      	mov	r3, r0
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d001      	beq.n	800a102 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800a0fe:	f7ff fd29 	bl	8009b54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800a102:	bf00      	nop
 800a104:	3718      	adds	r7, #24
 800a106:	46bd      	mov	sp, r7
 800a108:	bd80      	pop	{r7, pc}
 800a10a:	bf00      	nop
 800a10c:	200142dc 	.word	0x200142dc

0800a110 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b086      	sub	sp, #24
 800a114:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a116:	f107 0310 	add.w	r3, r7, #16
 800a11a:	2200      	movs	r2, #0
 800a11c:	601a      	str	r2, [r3, #0]
 800a11e:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800a120:	463b      	mov	r3, r7
 800a122:	2200      	movs	r2, #0
 800a124:	601a      	str	r2, [r3, #0]
 800a126:	605a      	str	r2, [r3, #4]
 800a128:	609a      	str	r2, [r3, #8]
 800a12a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800a12c:	4b28      	ldr	r3, [pc, #160]	; (800a1d0 <MX_TIM3_Init+0xc0>)
 800a12e:	4a29      	ldr	r2, [pc, #164]	; (800a1d4 <MX_TIM3_Init+0xc4>)
 800a130:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8400-1;
 800a132:	4b27      	ldr	r3, [pc, #156]	; (800a1d0 <MX_TIM3_Init+0xc0>)
 800a134:	f242 02cf 	movw	r2, #8399	; 0x20cf
 800a138:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a13a:	4b25      	ldr	r3, [pc, #148]	; (800a1d0 <MX_TIM3_Init+0xc0>)
 800a13c:	2200      	movs	r2, #0
 800a13e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000-1;
 800a140:	4b23      	ldr	r3, [pc, #140]	; (800a1d0 <MX_TIM3_Init+0xc0>)
 800a142:	f24c 324f 	movw	r2, #49999	; 0xc34f
 800a146:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a148:	4b21      	ldr	r3, [pc, #132]	; (800a1d0 <MX_TIM3_Init+0xc0>)
 800a14a:	2200      	movs	r2, #0
 800a14c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a14e:	4b20      	ldr	r3, [pc, #128]	; (800a1d0 <MX_TIM3_Init+0xc0>)
 800a150:	2200      	movs	r2, #0
 800a152:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800a154:	481e      	ldr	r0, [pc, #120]	; (800a1d0 <MX_TIM3_Init+0xc0>)
 800a156:	f004 f967 	bl	800e428 <HAL_TIM_IC_Init>
 800a15a:	4603      	mov	r3, r0
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d001      	beq.n	800a164 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800a160:	f7ff fcf8 	bl	8009b54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a164:	2300      	movs	r3, #0
 800a166:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a168:	2300      	movs	r3, #0
 800a16a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800a16c:	f107 0310 	add.w	r3, r7, #16
 800a170:	4619      	mov	r1, r3
 800a172:	4817      	ldr	r0, [pc, #92]	; (800a1d0 <MX_TIM3_Init+0xc0>)
 800a174:	f005 fa9a 	bl	800f6ac <HAL_TIMEx_MasterConfigSynchronization>
 800a178:	4603      	mov	r3, r0
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d001      	beq.n	800a182 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 800a17e:	f7ff fce9 	bl	8009b54 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800a182:	2300      	movs	r3, #0
 800a184:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800a186:	2301      	movs	r3, #1
 800a188:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800a18a:	2300      	movs	r3, #0
 800a18c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800a18e:	2300      	movs	r3, #0
 800a190:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800a192:	463b      	mov	r3, r7
 800a194:	2208      	movs	r2, #8
 800a196:	4619      	mov	r1, r3
 800a198:	480d      	ldr	r0, [pc, #52]	; (800a1d0 <MX_TIM3_Init+0xc0>)
 800a19a:	f004 fbc5 	bl	800e928 <HAL_TIM_IC_ConfigChannel>
 800a19e:	4603      	mov	r3, r0
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d001      	beq.n	800a1a8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800a1a4:	f7ff fcd6 	bl	8009b54 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800a1a8:	2302      	movs	r3, #2
 800a1aa:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800a1ac:	2302      	movs	r3, #2
 800a1ae:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 800a1b0:	463b      	mov	r3, r7
 800a1b2:	220c      	movs	r2, #12
 800a1b4:	4619      	mov	r1, r3
 800a1b6:	4806      	ldr	r0, [pc, #24]	; (800a1d0 <MX_TIM3_Init+0xc0>)
 800a1b8:	f004 fbb6 	bl	800e928 <HAL_TIM_IC_ConfigChannel>
 800a1bc:	4603      	mov	r3, r0
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d001      	beq.n	800a1c6 <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 800a1c2:	f7ff fcc7 	bl	8009b54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800a1c6:	bf00      	nop
 800a1c8:	3718      	adds	r7, #24
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	bd80      	pop	{r7, pc}
 800a1ce:	bf00      	nop
 800a1d0:	20014204 	.word	0x20014204
 800a1d4:	40000400 	.word	0x40000400

0800a1d8 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b092      	sub	sp, #72	; 0x48
 800a1dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a1de:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	601a      	str	r2, [r3, #0]
 800a1e6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800a1e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	601a      	str	r2, [r3, #0]
 800a1f0:	605a      	str	r2, [r3, #4]
 800a1f2:	609a      	str	r2, [r3, #8]
 800a1f4:	60da      	str	r2, [r3, #12]
 800a1f6:	611a      	str	r2, [r3, #16]
 800a1f8:	615a      	str	r2, [r3, #20]
 800a1fa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800a1fc:	1d3b      	adds	r3, r7, #4
 800a1fe:	2220      	movs	r2, #32
 800a200:	2100      	movs	r1, #0
 800a202:	4618      	mov	r0, r3
 800a204:	f01a fc26 	bl	8024a54 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800a208:	4b33      	ldr	r3, [pc, #204]	; (800a2d8 <MX_TIM8_Init+0x100>)
 800a20a:	4a34      	ldr	r2, [pc, #208]	; (800a2dc <MX_TIM8_Init+0x104>)
 800a20c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 3-1;
 800a20e:	4b32      	ldr	r3, [pc, #200]	; (800a2d8 <MX_TIM8_Init+0x100>)
 800a210:	2202      	movs	r2, #2
 800a212:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a214:	4b30      	ldr	r3, [pc, #192]	; (800a2d8 <MX_TIM8_Init+0x100>)
 800a216:	2200      	movs	r2, #0
 800a218:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 56000-1;
 800a21a:	4b2f      	ldr	r3, [pc, #188]	; (800a2d8 <MX_TIM8_Init+0x100>)
 800a21c:	f64d 22bf 	movw	r2, #55999	; 0xdabf
 800a220:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a222:	4b2d      	ldr	r3, [pc, #180]	; (800a2d8 <MX_TIM8_Init+0x100>)
 800a224:	2200      	movs	r2, #0
 800a226:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800a228:	4b2b      	ldr	r3, [pc, #172]	; (800a2d8 <MX_TIM8_Init+0x100>)
 800a22a:	2200      	movs	r2, #0
 800a22c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a22e:	4b2a      	ldr	r3, [pc, #168]	; (800a2d8 <MX_TIM8_Init+0x100>)
 800a230:	2200      	movs	r2, #0
 800a232:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800a234:	4828      	ldr	r0, [pc, #160]	; (800a2d8 <MX_TIM8_Init+0x100>)
 800a236:	f003 ffdf 	bl	800e1f8 <HAL_TIM_PWM_Init>
 800a23a:	4603      	mov	r3, r0
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d001      	beq.n	800a244 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 800a240:	f7ff fc88 	bl	8009b54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a244:	2300      	movs	r3, #0
 800a246:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a248:	2300      	movs	r3, #0
 800a24a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800a24c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a250:	4619      	mov	r1, r3
 800a252:	4821      	ldr	r0, [pc, #132]	; (800a2d8 <MX_TIM8_Init+0x100>)
 800a254:	f005 fa2a 	bl	800f6ac <HAL_TIMEx_MasterConfigSynchronization>
 800a258:	4603      	mov	r3, r0
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d001      	beq.n	800a262 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 800a25e:	f7ff fc79 	bl	8009b54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a262:	2360      	movs	r3, #96	; 0x60
 800a264:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800a266:	2300      	movs	r3, #0
 800a268:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a26a:	2300      	movs	r3, #0
 800a26c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800a26e:	2300      	movs	r3, #0
 800a270:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a272:	2300      	movs	r3, #0
 800a274:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800a276:	2300      	movs	r3, #0
 800a278:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800a27a:	2300      	movs	r3, #0
 800a27c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800a27e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a282:	2204      	movs	r2, #4
 800a284:	4619      	mov	r1, r3
 800a286:	4814      	ldr	r0, [pc, #80]	; (800a2d8 <MX_TIM8_Init+0x100>)
 800a288:	f004 fbea 	bl	800ea60 <HAL_TIM_PWM_ConfigChannel>
 800a28c:	4603      	mov	r3, r0
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d001      	beq.n	800a296 <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 800a292:	f7ff fc5f 	bl	8009b54 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800a296:	2300      	movs	r3, #0
 800a298:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800a29a:	2300      	movs	r3, #0
 800a29c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800a29e:	2300      	movs	r3, #0
 800a2a0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800a2aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a2ae:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800a2b4:	1d3b      	adds	r3, r7, #4
 800a2b6:	4619      	mov	r1, r3
 800a2b8:	4807      	ldr	r0, [pc, #28]	; (800a2d8 <MX_TIM8_Init+0x100>)
 800a2ba:	f005 fa73 	bl	800f7a4 <HAL_TIMEx_ConfigBreakDeadTime>
 800a2be:	4603      	mov	r3, r0
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d001      	beq.n	800a2c8 <MX_TIM8_Init+0xf0>
  {
    Error_Handler();
 800a2c4:	f7ff fc46 	bl	8009b54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800a2c8:	4803      	ldr	r0, [pc, #12]	; (800a2d8 <MX_TIM8_Init+0x100>)
 800a2ca:	f000 f989 	bl	800a5e0 <HAL_TIM_MspPostInit>

}
 800a2ce:	bf00      	nop
 800a2d0:	3748      	adds	r7, #72	; 0x48
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	bd80      	pop	{r7, pc}
 800a2d6:	bf00      	nop
 800a2d8:	200141bc 	.word	0x200141bc
 800a2dc:	40010400 	.word	0x40010400

0800a2e0 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b088      	sub	sp, #32
 800a2e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800a2e6:	1d3b      	adds	r3, r7, #4
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	601a      	str	r2, [r3, #0]
 800a2ec:	605a      	str	r2, [r3, #4]
 800a2ee:	609a      	str	r2, [r3, #8]
 800a2f0:	60da      	str	r2, [r3, #12]
 800a2f2:	611a      	str	r2, [r3, #16]
 800a2f4:	615a      	str	r2, [r3, #20]
 800a2f6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800a2f8:	4b1a      	ldr	r3, [pc, #104]	; (800a364 <MX_TIM9_Init+0x84>)
 800a2fa:	4a1b      	ldr	r2, [pc, #108]	; (800a368 <MX_TIM9_Init+0x88>)
 800a2fc:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 30000-1;
 800a2fe:	4b19      	ldr	r3, [pc, #100]	; (800a364 <MX_TIM9_Init+0x84>)
 800a300:	f247 522f 	movw	r2, #29999	; 0x752f
 800a304:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a306:	4b17      	ldr	r3, [pc, #92]	; (800a364 <MX_TIM9_Init+0x84>)
 800a308:	2200      	movs	r2, #0
 800a30a:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 56000-1;
 800a30c:	4b15      	ldr	r3, [pc, #84]	; (800a364 <MX_TIM9_Init+0x84>)
 800a30e:	f64d 22bf 	movw	r2, #55999	; 0xdabf
 800a312:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a314:	4b13      	ldr	r3, [pc, #76]	; (800a364 <MX_TIM9_Init+0x84>)
 800a316:	2200      	movs	r2, #0
 800a318:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a31a:	4b12      	ldr	r3, [pc, #72]	; (800a364 <MX_TIM9_Init+0x84>)
 800a31c:	2200      	movs	r2, #0
 800a31e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 800a320:	4810      	ldr	r0, [pc, #64]	; (800a364 <MX_TIM9_Init+0x84>)
 800a322:	f003 ff69 	bl	800e1f8 <HAL_TIM_PWM_Init>
 800a326:	4603      	mov	r3, r0
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d001      	beq.n	800a330 <MX_TIM9_Init+0x50>
  {
    Error_Handler();
 800a32c:	f7ff fc12 	bl	8009b54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a330:	2360      	movs	r3, #96	; 0x60
 800a332:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800a334:	2300      	movs	r3, #0
 800a336:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a338:	2300      	movs	r3, #0
 800a33a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a33c:	2300      	movs	r3, #0
 800a33e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800a340:	1d3b      	adds	r3, r7, #4
 800a342:	2204      	movs	r2, #4
 800a344:	4619      	mov	r1, r3
 800a346:	4807      	ldr	r0, [pc, #28]	; (800a364 <MX_TIM9_Init+0x84>)
 800a348:	f004 fb8a 	bl	800ea60 <HAL_TIM_PWM_ConfigChannel>
 800a34c:	4603      	mov	r3, r0
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d001      	beq.n	800a356 <MX_TIM9_Init+0x76>
  {
    Error_Handler();
 800a352:	f7ff fbff 	bl	8009b54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 800a356:	4803      	ldr	r0, [pc, #12]	; (800a364 <MX_TIM9_Init+0x84>)
 800a358:	f000 f942 	bl	800a5e0 <HAL_TIM_MspPostInit>

}
 800a35c:	bf00      	nop
 800a35e:	3720      	adds	r7, #32
 800a360:	46bd      	mov	sp, r7
 800a362:	bd80      	pop	{r7, pc}
 800a364:	20014294 	.word	0x20014294
 800a368:	40014000 	.word	0x40014000

0800a36c <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b084      	sub	sp, #16
 800a370:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a372:	463b      	mov	r3, r7
 800a374:	2200      	movs	r2, #0
 800a376:	601a      	str	r2, [r3, #0]
 800a378:	605a      	str	r2, [r3, #4]
 800a37a:	609a      	str	r2, [r3, #8]
 800a37c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800a37e:	4b16      	ldr	r3, [pc, #88]	; (800a3d8 <MX_TIM12_Init+0x6c>)
 800a380:	4a16      	ldr	r2, [pc, #88]	; (800a3dc <MX_TIM12_Init+0x70>)
 800a382:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 8400-1;
 800a384:	4b14      	ldr	r3, [pc, #80]	; (800a3d8 <MX_TIM12_Init+0x6c>)
 800a386:	f242 02cf 	movw	r2, #8399	; 0x20cf
 800a38a:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a38c:	4b12      	ldr	r3, [pc, #72]	; (800a3d8 <MX_TIM12_Init+0x6c>)
 800a38e:	2200      	movs	r2, #0
 800a390:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 800a392:	4b11      	ldr	r3, [pc, #68]	; (800a3d8 <MX_TIM12_Init+0x6c>)
 800a394:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a398:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a39a:	4b0f      	ldr	r3, [pc, #60]	; (800a3d8 <MX_TIM12_Init+0x6c>)
 800a39c:	2200      	movs	r2, #0
 800a39e:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a3a0:	4b0d      	ldr	r3, [pc, #52]	; (800a3d8 <MX_TIM12_Init+0x6c>)
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 800a3a6:	480c      	ldr	r0, [pc, #48]	; (800a3d8 <MX_TIM12_Init+0x6c>)
 800a3a8:	f003 fe67 	bl	800e07a <HAL_TIM_Base_Init>
 800a3ac:	4603      	mov	r3, r0
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d001      	beq.n	800a3b6 <MX_TIM12_Init+0x4a>
  {
    Error_Handler();
 800a3b2:	f7ff fbcf 	bl	8009b54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a3b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a3ba:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 800a3bc:	463b      	mov	r3, r7
 800a3be:	4619      	mov	r1, r3
 800a3c0:	4805      	ldr	r0, [pc, #20]	; (800a3d8 <MX_TIM12_Init+0x6c>)
 800a3c2:	f004 fc0f 	bl	800ebe4 <HAL_TIM_ConfigClockSource>
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d001      	beq.n	800a3d0 <MX_TIM12_Init+0x64>
  {
    Error_Handler();
 800a3cc:	f7ff fbc2 	bl	8009b54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 800a3d0:	bf00      	nop
 800a3d2:	3710      	adds	r7, #16
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	bd80      	pop	{r7, pc}
 800a3d8:	20014324 	.word	0x20014324
 800a3dc:	40001800 	.word	0x40001800

0800a3e0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b086      	sub	sp, #24
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	4a2e      	ldr	r2, [pc, #184]	; (800a4a8 <HAL_TIM_Base_MspInit+0xc8>)
 800a3ee:	4293      	cmp	r3, r2
 800a3f0:	d11e      	bne.n	800a430 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	617b      	str	r3, [r7, #20]
 800a3f6:	4b2d      	ldr	r3, [pc, #180]	; (800a4ac <HAL_TIM_Base_MspInit+0xcc>)
 800a3f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3fa:	4a2c      	ldr	r2, [pc, #176]	; (800a4ac <HAL_TIM_Base_MspInit+0xcc>)
 800a3fc:	f043 0301 	orr.w	r3, r3, #1
 800a400:	6453      	str	r3, [r2, #68]	; 0x44
 800a402:	4b2a      	ldr	r3, [pc, #168]	; (800a4ac <HAL_TIM_Base_MspInit+0xcc>)
 800a404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a406:	f003 0301 	and.w	r3, r3, #1
 800a40a:	617b      	str	r3, [r7, #20]
 800a40c:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 800a40e:	2200      	movs	r2, #0
 800a410:	2105      	movs	r1, #5
 800a412:	2018      	movs	r0, #24
 800a414:	f000 fd39 	bl	800ae8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800a418:	2018      	movs	r0, #24
 800a41a:	f000 fd52 	bl	800aec2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 800a41e:	2200      	movs	r2, #0
 800a420:	2105      	movs	r1, #5
 800a422:	2019      	movs	r0, #25
 800a424:	f000 fd31 	bl	800ae8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800a428:	2019      	movs	r0, #25
 800a42a:	f000 fd4a 	bl	800aec2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 800a42e:	e036      	b.n	800a49e <HAL_TIM_Base_MspInit+0xbe>
  else if(tim_baseHandle->Instance==TIM2)
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a438:	d116      	bne.n	800a468 <HAL_TIM_Base_MspInit+0x88>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800a43a:	2300      	movs	r3, #0
 800a43c:	613b      	str	r3, [r7, #16]
 800a43e:	4b1b      	ldr	r3, [pc, #108]	; (800a4ac <HAL_TIM_Base_MspInit+0xcc>)
 800a440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a442:	4a1a      	ldr	r2, [pc, #104]	; (800a4ac <HAL_TIM_Base_MspInit+0xcc>)
 800a444:	f043 0301 	orr.w	r3, r3, #1
 800a448:	6413      	str	r3, [r2, #64]	; 0x40
 800a44a:	4b18      	ldr	r3, [pc, #96]	; (800a4ac <HAL_TIM_Base_MspInit+0xcc>)
 800a44c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a44e:	f003 0301 	and.w	r3, r3, #1
 800a452:	613b      	str	r3, [r7, #16]
 800a454:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800a456:	2200      	movs	r2, #0
 800a458:	2105      	movs	r1, #5
 800a45a:	201c      	movs	r0, #28
 800a45c:	f000 fd15 	bl	800ae8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800a460:	201c      	movs	r0, #28
 800a462:	f000 fd2e 	bl	800aec2 <HAL_NVIC_EnableIRQ>
}
 800a466:	e01a      	b.n	800a49e <HAL_TIM_Base_MspInit+0xbe>
  else if(tim_baseHandle->Instance==TIM12)
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	4a10      	ldr	r2, [pc, #64]	; (800a4b0 <HAL_TIM_Base_MspInit+0xd0>)
 800a46e:	4293      	cmp	r3, r2
 800a470:	d115      	bne.n	800a49e <HAL_TIM_Base_MspInit+0xbe>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800a472:	2300      	movs	r3, #0
 800a474:	60fb      	str	r3, [r7, #12]
 800a476:	4b0d      	ldr	r3, [pc, #52]	; (800a4ac <HAL_TIM_Base_MspInit+0xcc>)
 800a478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a47a:	4a0c      	ldr	r2, [pc, #48]	; (800a4ac <HAL_TIM_Base_MspInit+0xcc>)
 800a47c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a480:	6413      	str	r3, [r2, #64]	; 0x40
 800a482:	4b0a      	ldr	r3, [pc, #40]	; (800a4ac <HAL_TIM_Base_MspInit+0xcc>)
 800a484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a48a:	60fb      	str	r3, [r7, #12]
 800a48c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 5, 0);
 800a48e:	2200      	movs	r2, #0
 800a490:	2105      	movs	r1, #5
 800a492:	202b      	movs	r0, #43	; 0x2b
 800a494:	f000 fcf9 	bl	800ae8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 800a498:	202b      	movs	r0, #43	; 0x2b
 800a49a:	f000 fd12 	bl	800aec2 <HAL_NVIC_EnableIRQ>
}
 800a49e:	bf00      	nop
 800a4a0:	3718      	adds	r7, #24
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bd80      	pop	{r7, pc}
 800a4a6:	bf00      	nop
 800a4a8:	40010000 	.word	0x40010000
 800a4ac:	40023800 	.word	0x40023800
 800a4b0:	40001800 	.word	0x40001800

0800a4b4 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b08a      	sub	sp, #40	; 0x28
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a4bc:	f107 0314 	add.w	r3, r7, #20
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	601a      	str	r2, [r3, #0]
 800a4c4:	605a      	str	r2, [r3, #4]
 800a4c6:	609a      	str	r2, [r3, #8]
 800a4c8:	60da      	str	r2, [r3, #12]
 800a4ca:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM3)
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	4a1d      	ldr	r2, [pc, #116]	; (800a548 <HAL_TIM_IC_MspInit+0x94>)
 800a4d2:	4293      	cmp	r3, r2
 800a4d4:	d133      	bne.n	800a53e <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	613b      	str	r3, [r7, #16]
 800a4da:	4b1c      	ldr	r3, [pc, #112]	; (800a54c <HAL_TIM_IC_MspInit+0x98>)
 800a4dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4de:	4a1b      	ldr	r2, [pc, #108]	; (800a54c <HAL_TIM_IC_MspInit+0x98>)
 800a4e0:	f043 0302 	orr.w	r3, r3, #2
 800a4e4:	6413      	str	r3, [r2, #64]	; 0x40
 800a4e6:	4b19      	ldr	r3, [pc, #100]	; (800a54c <HAL_TIM_IC_MspInit+0x98>)
 800a4e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4ea:	f003 0302 	and.w	r3, r3, #2
 800a4ee:	613b      	str	r3, [r7, #16]
 800a4f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	60fb      	str	r3, [r7, #12]
 800a4f6:	4b15      	ldr	r3, [pc, #84]	; (800a54c <HAL_TIM_IC_MspInit+0x98>)
 800a4f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4fa:	4a14      	ldr	r2, [pc, #80]	; (800a54c <HAL_TIM_IC_MspInit+0x98>)
 800a4fc:	f043 0302 	orr.w	r3, r3, #2
 800a500:	6313      	str	r3, [r2, #48]	; 0x30
 800a502:	4b12      	ldr	r3, [pc, #72]	; (800a54c <HAL_TIM_IC_MspInit+0x98>)
 800a504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a506:	f003 0302 	and.w	r3, r3, #2
 800a50a:	60fb      	str	r3, [r7, #12]
 800a50c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800a50e:	2301      	movs	r3, #1
 800a510:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a512:	2302      	movs	r3, #2
 800a514:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a516:	2301      	movs	r3, #1
 800a518:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a51a:	2300      	movs	r3, #0
 800a51c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800a51e:	2302      	movs	r3, #2
 800a520:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a522:	f107 0314 	add.w	r3, r7, #20
 800a526:	4619      	mov	r1, r3
 800a528:	4809      	ldr	r0, [pc, #36]	; (800a550 <HAL_TIM_IC_MspInit+0x9c>)
 800a52a:	f002 fd59 	bl	800cfe0 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800a52e:	2200      	movs	r2, #0
 800a530:	2105      	movs	r1, #5
 800a532:	201d      	movs	r0, #29
 800a534:	f000 fca9 	bl	800ae8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800a538:	201d      	movs	r0, #29
 800a53a:	f000 fcc2 	bl	800aec2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800a53e:	bf00      	nop
 800a540:	3728      	adds	r7, #40	; 0x28
 800a542:	46bd      	mov	sp, r7
 800a544:	bd80      	pop	{r7, pc}
 800a546:	bf00      	nop
 800a548:	40000400 	.word	0x40000400
 800a54c:	40023800 	.word	0x40023800
 800a550:	40020400 	.word	0x40020400

0800a554 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b084      	sub	sp, #16
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM8)
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	4a1c      	ldr	r2, [pc, #112]	; (800a5d4 <HAL_TIM_PWM_MspInit+0x80>)
 800a562:	4293      	cmp	r3, r2
 800a564:	d116      	bne.n	800a594 <HAL_TIM_PWM_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800a566:	2300      	movs	r3, #0
 800a568:	60fb      	str	r3, [r7, #12]
 800a56a:	4b1b      	ldr	r3, [pc, #108]	; (800a5d8 <HAL_TIM_PWM_MspInit+0x84>)
 800a56c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a56e:	4a1a      	ldr	r2, [pc, #104]	; (800a5d8 <HAL_TIM_PWM_MspInit+0x84>)
 800a570:	f043 0302 	orr.w	r3, r3, #2
 800a574:	6453      	str	r3, [r2, #68]	; 0x44
 800a576:	4b18      	ldr	r3, [pc, #96]	; (800a5d8 <HAL_TIM_PWM_MspInit+0x84>)
 800a578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a57a:	f003 0302 	and.w	r3, r3, #2
 800a57e:	60fb      	str	r3, [r7, #12]
 800a580:	68fb      	ldr	r3, [r7, #12]

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 5, 0);
 800a582:	2200      	movs	r2, #0
 800a584:	2105      	movs	r1, #5
 800a586:	202b      	movs	r0, #43	; 0x2b
 800a588:	f000 fc7f 	bl	800ae8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 800a58c:	202b      	movs	r0, #43	; 0x2b
 800a58e:	f000 fc98 	bl	800aec2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 800a592:	e01a      	b.n	800a5ca <HAL_TIM_PWM_MspInit+0x76>
  else if(tim_pwmHandle->Instance==TIM9)
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	4a10      	ldr	r2, [pc, #64]	; (800a5dc <HAL_TIM_PWM_MspInit+0x88>)
 800a59a:	4293      	cmp	r3, r2
 800a59c:	d115      	bne.n	800a5ca <HAL_TIM_PWM_MspInit+0x76>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800a59e:	2300      	movs	r3, #0
 800a5a0:	60bb      	str	r3, [r7, #8]
 800a5a2:	4b0d      	ldr	r3, [pc, #52]	; (800a5d8 <HAL_TIM_PWM_MspInit+0x84>)
 800a5a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5a6:	4a0c      	ldr	r2, [pc, #48]	; (800a5d8 <HAL_TIM_PWM_MspInit+0x84>)
 800a5a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a5ac:	6453      	str	r3, [r2, #68]	; 0x44
 800a5ae:	4b0a      	ldr	r3, [pc, #40]	; (800a5d8 <HAL_TIM_PWM_MspInit+0x84>)
 800a5b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a5b6:	60bb      	str	r3, [r7, #8]
 800a5b8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	2105      	movs	r1, #5
 800a5be:	2018      	movs	r0, #24
 800a5c0:	f000 fc63 	bl	800ae8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800a5c4:	2018      	movs	r0, #24
 800a5c6:	f000 fc7c 	bl	800aec2 <HAL_NVIC_EnableIRQ>
}
 800a5ca:	bf00      	nop
 800a5cc:	3710      	adds	r7, #16
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	bd80      	pop	{r7, pc}
 800a5d2:	bf00      	nop
 800a5d4:	40010400 	.word	0x40010400
 800a5d8:	40023800 	.word	0x40023800
 800a5dc:	40014000 	.word	0x40014000

0800a5e0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b08a      	sub	sp, #40	; 0x28
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a5e8:	f107 0314 	add.w	r3, r7, #20
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	601a      	str	r2, [r3, #0]
 800a5f0:	605a      	str	r2, [r3, #4]
 800a5f2:	609a      	str	r2, [r3, #8]
 800a5f4:	60da      	str	r2, [r3, #12]
 800a5f6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	4a24      	ldr	r2, [pc, #144]	; (800a690 <HAL_TIM_MspPostInit+0xb0>)
 800a5fe:	4293      	cmp	r3, r2
 800a600:	d11e      	bne.n	800a640 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a602:	2300      	movs	r3, #0
 800a604:	613b      	str	r3, [r7, #16]
 800a606:	4b23      	ldr	r3, [pc, #140]	; (800a694 <HAL_TIM_MspPostInit+0xb4>)
 800a608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a60a:	4a22      	ldr	r2, [pc, #136]	; (800a694 <HAL_TIM_MspPostInit+0xb4>)
 800a60c:	f043 0304 	orr.w	r3, r3, #4
 800a610:	6313      	str	r3, [r2, #48]	; 0x30
 800a612:	4b20      	ldr	r3, [pc, #128]	; (800a694 <HAL_TIM_MspPostInit+0xb4>)
 800a614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a616:	f003 0304 	and.w	r3, r3, #4
 800a61a:	613b      	str	r3, [r7, #16]
 800a61c:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800a61e:	2380      	movs	r3, #128	; 0x80
 800a620:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a622:	2302      	movs	r3, #2
 800a624:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a626:	2300      	movs	r3, #0
 800a628:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a62a:	2300      	movs	r3, #0
 800a62c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800a62e:	2303      	movs	r3, #3
 800a630:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a632:	f107 0314 	add.w	r3, r7, #20
 800a636:	4619      	mov	r1, r3
 800a638:	4817      	ldr	r0, [pc, #92]	; (800a698 <HAL_TIM_MspPostInit+0xb8>)
 800a63a:	f002 fcd1 	bl	800cfe0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 800a63e:	e022      	b.n	800a686 <HAL_TIM_MspPostInit+0xa6>
  else if(timHandle->Instance==TIM9)
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	4a15      	ldr	r2, [pc, #84]	; (800a69c <HAL_TIM_MspPostInit+0xbc>)
 800a646:	4293      	cmp	r3, r2
 800a648:	d11d      	bne.n	800a686 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a64a:	2300      	movs	r3, #0
 800a64c:	60fb      	str	r3, [r7, #12]
 800a64e:	4b11      	ldr	r3, [pc, #68]	; (800a694 <HAL_TIM_MspPostInit+0xb4>)
 800a650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a652:	4a10      	ldr	r2, [pc, #64]	; (800a694 <HAL_TIM_MspPostInit+0xb4>)
 800a654:	f043 0301 	orr.w	r3, r3, #1
 800a658:	6313      	str	r3, [r2, #48]	; 0x30
 800a65a:	4b0e      	ldr	r3, [pc, #56]	; (800a694 <HAL_TIM_MspPostInit+0xb4>)
 800a65c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a65e:	f003 0301 	and.w	r3, r3, #1
 800a662:	60fb      	str	r3, [r7, #12]
 800a664:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800a666:	2308      	movs	r3, #8
 800a668:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a66a:	2302      	movs	r3, #2
 800a66c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a66e:	2300      	movs	r3, #0
 800a670:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a672:	2300      	movs	r3, #0
 800a674:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800a676:	2303      	movs	r3, #3
 800a678:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a67a:	f107 0314 	add.w	r3, r7, #20
 800a67e:	4619      	mov	r1, r3
 800a680:	4807      	ldr	r0, [pc, #28]	; (800a6a0 <HAL_TIM_MspPostInit+0xc0>)
 800a682:	f002 fcad 	bl	800cfe0 <HAL_GPIO_Init>
}
 800a686:	bf00      	nop
 800a688:	3728      	adds	r7, #40	; 0x28
 800a68a:	46bd      	mov	sp, r7
 800a68c:	bd80      	pop	{r7, pc}
 800a68e:	bf00      	nop
 800a690:	40010400 	.word	0x40010400
 800a694:	40023800 	.word	0x40023800
 800a698:	40020800 	.word	0x40020800
 800a69c:	40014000 	.word	0x40014000
 800a6a0:	40020000 	.word	0x40020000

0800a6a4 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart1_rx;
DMA_HandleTypeDef hdma_usart1_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800a6a8:	4b11      	ldr	r3, [pc, #68]	; (800a6f0 <MX_UART4_Init+0x4c>)
 800a6aa:	4a12      	ldr	r2, [pc, #72]	; (800a6f4 <MX_UART4_Init+0x50>)
 800a6ac:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800a6ae:	4b10      	ldr	r3, [pc, #64]	; (800a6f0 <MX_UART4_Init+0x4c>)
 800a6b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a6b4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800a6b6:	4b0e      	ldr	r3, [pc, #56]	; (800a6f0 <MX_UART4_Init+0x4c>)
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800a6bc:	4b0c      	ldr	r3, [pc, #48]	; (800a6f0 <MX_UART4_Init+0x4c>)
 800a6be:	2200      	movs	r2, #0
 800a6c0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800a6c2:	4b0b      	ldr	r3, [pc, #44]	; (800a6f0 <MX_UART4_Init+0x4c>)
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800a6c8:	4b09      	ldr	r3, [pc, #36]	; (800a6f0 <MX_UART4_Init+0x4c>)
 800a6ca:	220c      	movs	r2, #12
 800a6cc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a6ce:	4b08      	ldr	r3, [pc, #32]	; (800a6f0 <MX_UART4_Init+0x4c>)
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800a6d4:	4b06      	ldr	r3, [pc, #24]	; (800a6f0 <MX_UART4_Init+0x4c>)
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800a6da:	4805      	ldr	r0, [pc, #20]	; (800a6f0 <MX_UART4_Init+0x4c>)
 800a6dc:	f005 f8c8 	bl	800f870 <HAL_UART_Init>
 800a6e0:	4603      	mov	r3, r0
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d001      	beq.n	800a6ea <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800a6e6:	f7ff fa35 	bl	8009b54 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800a6ea:	bf00      	nop
 800a6ec:	bd80      	pop	{r7, pc}
 800a6ee:	bf00      	nop
 800a6f0:	200144b4 	.word	0x200144b4
 800a6f4:	40004c00 	.word	0x40004c00

0800a6f8 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800a6fc:	4b11      	ldr	r3, [pc, #68]	; (800a744 <MX_UART5_Init+0x4c>)
 800a6fe:	4a12      	ldr	r2, [pc, #72]	; (800a748 <MX_UART5_Init+0x50>)
 800a700:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 800a702:	4b10      	ldr	r3, [pc, #64]	; (800a744 <MX_UART5_Init+0x4c>)
 800a704:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800a708:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800a70a:	4b0e      	ldr	r3, [pc, #56]	; (800a744 <MX_UART5_Init+0x4c>)
 800a70c:	2200      	movs	r2, #0
 800a70e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800a710:	4b0c      	ldr	r3, [pc, #48]	; (800a744 <MX_UART5_Init+0x4c>)
 800a712:	2200      	movs	r2, #0
 800a714:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800a716:	4b0b      	ldr	r3, [pc, #44]	; (800a744 <MX_UART5_Init+0x4c>)
 800a718:	2200      	movs	r2, #0
 800a71a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800a71c:	4b09      	ldr	r3, [pc, #36]	; (800a744 <MX_UART5_Init+0x4c>)
 800a71e:	220c      	movs	r2, #12
 800a720:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a722:	4b08      	ldr	r3, [pc, #32]	; (800a744 <MX_UART5_Init+0x4c>)
 800a724:	2200      	movs	r2, #0
 800a726:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800a728:	4b06      	ldr	r3, [pc, #24]	; (800a744 <MX_UART5_Init+0x4c>)
 800a72a:	2200      	movs	r2, #0
 800a72c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800a72e:	4805      	ldr	r0, [pc, #20]	; (800a744 <MX_UART5_Init+0x4c>)
 800a730:	f005 f89e 	bl	800f870 <HAL_UART_Init>
 800a734:	4603      	mov	r3, r0
 800a736:	2b00      	cmp	r3, #0
 800a738:	d001      	beq.n	800a73e <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800a73a:	f7ff fa0b 	bl	8009b54 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800a73e:	bf00      	nop
 800a740:	bd80      	pop	{r7, pc}
 800a742:	bf00      	nop
 800a744:	200143cc 	.word	0x200143cc
 800a748:	40005000 	.word	0x40005000

0800a74c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800a750:	4b11      	ldr	r3, [pc, #68]	; (800a798 <MX_USART1_UART_Init+0x4c>)
 800a752:	4a12      	ldr	r2, [pc, #72]	; (800a79c <MX_USART1_UART_Init+0x50>)
 800a754:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800a756:	4b10      	ldr	r3, [pc, #64]	; (800a798 <MX_USART1_UART_Init+0x4c>)
 800a758:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a75c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800a75e:	4b0e      	ldr	r3, [pc, #56]	; (800a798 <MX_USART1_UART_Init+0x4c>)
 800a760:	2200      	movs	r2, #0
 800a762:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800a764:	4b0c      	ldr	r3, [pc, #48]	; (800a798 <MX_USART1_UART_Init+0x4c>)
 800a766:	2200      	movs	r2, #0
 800a768:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800a76a:	4b0b      	ldr	r3, [pc, #44]	; (800a798 <MX_USART1_UART_Init+0x4c>)
 800a76c:	2200      	movs	r2, #0
 800a76e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800a770:	4b09      	ldr	r3, [pc, #36]	; (800a798 <MX_USART1_UART_Init+0x4c>)
 800a772:	220c      	movs	r2, #12
 800a774:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a776:	4b08      	ldr	r3, [pc, #32]	; (800a798 <MX_USART1_UART_Init+0x4c>)
 800a778:	2200      	movs	r2, #0
 800a77a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800a77c:	4b06      	ldr	r3, [pc, #24]	; (800a798 <MX_USART1_UART_Init+0x4c>)
 800a77e:	2200      	movs	r2, #0
 800a780:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800a782:	4805      	ldr	r0, [pc, #20]	; (800a798 <MX_USART1_UART_Init+0x4c>)
 800a784:	f005 f874 	bl	800f870 <HAL_UART_Init>
 800a788:	4603      	mov	r3, r0
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d001      	beq.n	800a792 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800a78e:	f7ff f9e1 	bl	8009b54 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800a792:	bf00      	nop
 800a794:	bd80      	pop	{r7, pc}
 800a796:	bf00      	nop
 800a798:	20014470 	.word	0x20014470
 800a79c:	40011000 	.word	0x40011000

0800a7a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b090      	sub	sp, #64	; 0x40
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a7a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a7ac:	2200      	movs	r2, #0
 800a7ae:	601a      	str	r2, [r3, #0]
 800a7b0:	605a      	str	r2, [r3, #4]
 800a7b2:	609a      	str	r2, [r3, #8]
 800a7b4:	60da      	str	r2, [r3, #12]
 800a7b6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	4a86      	ldr	r2, [pc, #536]	; (800a9d8 <HAL_UART_MspInit+0x238>)
 800a7be:	4293      	cmp	r3, r2
 800a7c0:	d153      	bne.n	800a86a <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	62bb      	str	r3, [r7, #40]	; 0x28
 800a7c6:	4b85      	ldr	r3, [pc, #532]	; (800a9dc <HAL_UART_MspInit+0x23c>)
 800a7c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7ca:	4a84      	ldr	r2, [pc, #528]	; (800a9dc <HAL_UART_MspInit+0x23c>)
 800a7cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a7d0:	6413      	str	r3, [r2, #64]	; 0x40
 800a7d2:	4b82      	ldr	r3, [pc, #520]	; (800a9dc <HAL_UART_MspInit+0x23c>)
 800a7d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a7da:	62bb      	str	r3, [r7, #40]	; 0x28
 800a7dc:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a7de:	2300      	movs	r3, #0
 800a7e0:	627b      	str	r3, [r7, #36]	; 0x24
 800a7e2:	4b7e      	ldr	r3, [pc, #504]	; (800a9dc <HAL_UART_MspInit+0x23c>)
 800a7e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7e6:	4a7d      	ldr	r2, [pc, #500]	; (800a9dc <HAL_UART_MspInit+0x23c>)
 800a7e8:	f043 0301 	orr.w	r3, r3, #1
 800a7ec:	6313      	str	r3, [r2, #48]	; 0x30
 800a7ee:	4b7b      	ldr	r3, [pc, #492]	; (800a9dc <HAL_UART_MspInit+0x23c>)
 800a7f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7f2:	f003 0301 	and.w	r3, r3, #1
 800a7f6:	627b      	str	r3, [r7, #36]	; 0x24
 800a7f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	623b      	str	r3, [r7, #32]
 800a7fe:	4b77      	ldr	r3, [pc, #476]	; (800a9dc <HAL_UART_MspInit+0x23c>)
 800a800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a802:	4a76      	ldr	r2, [pc, #472]	; (800a9dc <HAL_UART_MspInit+0x23c>)
 800a804:	f043 0304 	orr.w	r3, r3, #4
 800a808:	6313      	str	r3, [r2, #48]	; 0x30
 800a80a:	4b74      	ldr	r3, [pc, #464]	; (800a9dc <HAL_UART_MspInit+0x23c>)
 800a80c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a80e:	f003 0304 	and.w	r3, r3, #4
 800a812:	623b      	str	r3, [r7, #32]
 800a814:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800a816:	2301      	movs	r3, #1
 800a818:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a81a:	2302      	movs	r3, #2
 800a81c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a81e:	2300      	movs	r3, #0
 800a820:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a822:	2303      	movs	r3, #3
 800a824:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800a826:	2308      	movs	r3, #8
 800a828:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a82a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a82e:	4619      	mov	r1, r3
 800a830:	486b      	ldr	r0, [pc, #428]	; (800a9e0 <HAL_UART_MspInit+0x240>)
 800a832:	f002 fbd5 	bl	800cfe0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800a836:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a83a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a83c:	2302      	movs	r3, #2
 800a83e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a840:	2300      	movs	r3, #0
 800a842:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a844:	2303      	movs	r3, #3
 800a846:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800a848:	2308      	movs	r3, #8
 800a84a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a84c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a850:	4619      	mov	r1, r3
 800a852:	4864      	ldr	r0, [pc, #400]	; (800a9e4 <HAL_UART_MspInit+0x244>)
 800a854:	f002 fbc4 	bl	800cfe0 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 800a858:	2200      	movs	r2, #0
 800a85a:	2105      	movs	r1, #5
 800a85c:	2034      	movs	r0, #52	; 0x34
 800a85e:	f000 fb14 	bl	800ae8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800a862:	2034      	movs	r0, #52	; 0x34
 800a864:	f000 fb2d 	bl	800aec2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800a868:	e161      	b.n	800ab2e <HAL_UART_MspInit+0x38e>
  else if(uartHandle->Instance==UART5)
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	4a5e      	ldr	r2, [pc, #376]	; (800a9e8 <HAL_UART_MspInit+0x248>)
 800a870:	4293      	cmp	r3, r2
 800a872:	f040 80c5 	bne.w	800aa00 <HAL_UART_MspInit+0x260>
    __HAL_RCC_UART5_CLK_ENABLE();
 800a876:	2300      	movs	r3, #0
 800a878:	61fb      	str	r3, [r7, #28]
 800a87a:	4b58      	ldr	r3, [pc, #352]	; (800a9dc <HAL_UART_MspInit+0x23c>)
 800a87c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a87e:	4a57      	ldr	r2, [pc, #348]	; (800a9dc <HAL_UART_MspInit+0x23c>)
 800a880:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a884:	6413      	str	r3, [r2, #64]	; 0x40
 800a886:	4b55      	ldr	r3, [pc, #340]	; (800a9dc <HAL_UART_MspInit+0x23c>)
 800a888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a88a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a88e:	61fb      	str	r3, [r7, #28]
 800a890:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a892:	2300      	movs	r3, #0
 800a894:	61bb      	str	r3, [r7, #24]
 800a896:	4b51      	ldr	r3, [pc, #324]	; (800a9dc <HAL_UART_MspInit+0x23c>)
 800a898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a89a:	4a50      	ldr	r2, [pc, #320]	; (800a9dc <HAL_UART_MspInit+0x23c>)
 800a89c:	f043 0304 	orr.w	r3, r3, #4
 800a8a0:	6313      	str	r3, [r2, #48]	; 0x30
 800a8a2:	4b4e      	ldr	r3, [pc, #312]	; (800a9dc <HAL_UART_MspInit+0x23c>)
 800a8a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8a6:	f003 0304 	and.w	r3, r3, #4
 800a8aa:	61bb      	str	r3, [r7, #24]
 800a8ac:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	617b      	str	r3, [r7, #20]
 800a8b2:	4b4a      	ldr	r3, [pc, #296]	; (800a9dc <HAL_UART_MspInit+0x23c>)
 800a8b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8b6:	4a49      	ldr	r2, [pc, #292]	; (800a9dc <HAL_UART_MspInit+0x23c>)
 800a8b8:	f043 0308 	orr.w	r3, r3, #8
 800a8bc:	6313      	str	r3, [r2, #48]	; 0x30
 800a8be:	4b47      	ldr	r3, [pc, #284]	; (800a9dc <HAL_UART_MspInit+0x23c>)
 800a8c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8c2:	f003 0308 	and.w	r3, r3, #8
 800a8c6:	617b      	str	r3, [r7, #20]
 800a8c8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800a8ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a8ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a8d0:	2302      	movs	r3, #2
 800a8d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a8d8:	2303      	movs	r3, #3
 800a8da:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800a8dc:	2308      	movs	r3, #8
 800a8de:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a8e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a8e4:	4619      	mov	r1, r3
 800a8e6:	483f      	ldr	r0, [pc, #252]	; (800a9e4 <HAL_UART_MspInit+0x244>)
 800a8e8:	f002 fb7a 	bl	800cfe0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800a8ec:	2304      	movs	r3, #4
 800a8ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a8f0:	2302      	movs	r3, #2
 800a8f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a8f8:	2303      	movs	r3, #3
 800a8fa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800a8fc:	2308      	movs	r3, #8
 800a8fe:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a900:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a904:	4619      	mov	r1, r3
 800a906:	4839      	ldr	r0, [pc, #228]	; (800a9ec <HAL_UART_MspInit+0x24c>)
 800a908:	f002 fb6a 	bl	800cfe0 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 800a90c:	4b38      	ldr	r3, [pc, #224]	; (800a9f0 <HAL_UART_MspInit+0x250>)
 800a90e:	4a39      	ldr	r2, [pc, #228]	; (800a9f4 <HAL_UART_MspInit+0x254>)
 800a910:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 800a912:	4b37      	ldr	r3, [pc, #220]	; (800a9f0 <HAL_UART_MspInit+0x250>)
 800a914:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a918:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a91a:	4b35      	ldr	r3, [pc, #212]	; (800a9f0 <HAL_UART_MspInit+0x250>)
 800a91c:	2200      	movs	r2, #0
 800a91e:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a920:	4b33      	ldr	r3, [pc, #204]	; (800a9f0 <HAL_UART_MspInit+0x250>)
 800a922:	2200      	movs	r2, #0
 800a924:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 800a926:	4b32      	ldr	r3, [pc, #200]	; (800a9f0 <HAL_UART_MspInit+0x250>)
 800a928:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a92c:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a92e:	4b30      	ldr	r3, [pc, #192]	; (800a9f0 <HAL_UART_MspInit+0x250>)
 800a930:	2200      	movs	r2, #0
 800a932:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a934:	4b2e      	ldr	r3, [pc, #184]	; (800a9f0 <HAL_UART_MspInit+0x250>)
 800a936:	2200      	movs	r2, #0
 800a938:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 800a93a:	4b2d      	ldr	r3, [pc, #180]	; (800a9f0 <HAL_UART_MspInit+0x250>)
 800a93c:	2200      	movs	r2, #0
 800a93e:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 800a940:	4b2b      	ldr	r3, [pc, #172]	; (800a9f0 <HAL_UART_MspInit+0x250>)
 800a942:	2200      	movs	r2, #0
 800a944:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800a946:	4b2a      	ldr	r3, [pc, #168]	; (800a9f0 <HAL_UART_MspInit+0x250>)
 800a948:	2200      	movs	r2, #0
 800a94a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 800a94c:	4828      	ldr	r0, [pc, #160]	; (800a9f0 <HAL_UART_MspInit+0x250>)
 800a94e:	f000 fad3 	bl	800aef8 <HAL_DMA_Init>
 800a952:	4603      	mov	r3, r0
 800a954:	2b00      	cmp	r3, #0
 800a956:	d001      	beq.n	800a95c <HAL_UART_MspInit+0x1bc>
      Error_Handler();
 800a958:	f7ff f8fc 	bl	8009b54 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	4a24      	ldr	r2, [pc, #144]	; (800a9f0 <HAL_UART_MspInit+0x250>)
 800a960:	639a      	str	r2, [r3, #56]	; 0x38
 800a962:	4a23      	ldr	r2, [pc, #140]	; (800a9f0 <HAL_UART_MspInit+0x250>)
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_uart5_tx.Instance = DMA1_Stream7;
 800a968:	4b23      	ldr	r3, [pc, #140]	; (800a9f8 <HAL_UART_MspInit+0x258>)
 800a96a:	4a24      	ldr	r2, [pc, #144]	; (800a9fc <HAL_UART_MspInit+0x25c>)
 800a96c:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 800a96e:	4b22      	ldr	r3, [pc, #136]	; (800a9f8 <HAL_UART_MspInit+0x258>)
 800a970:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a974:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a976:	4b20      	ldr	r3, [pc, #128]	; (800a9f8 <HAL_UART_MspInit+0x258>)
 800a978:	2240      	movs	r2, #64	; 0x40
 800a97a:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a97c:	4b1e      	ldr	r3, [pc, #120]	; (800a9f8 <HAL_UART_MspInit+0x258>)
 800a97e:	2200      	movs	r2, #0
 800a980:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 800a982:	4b1d      	ldr	r3, [pc, #116]	; (800a9f8 <HAL_UART_MspInit+0x258>)
 800a984:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a988:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a98a:	4b1b      	ldr	r3, [pc, #108]	; (800a9f8 <HAL_UART_MspInit+0x258>)
 800a98c:	2200      	movs	r2, #0
 800a98e:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a990:	4b19      	ldr	r3, [pc, #100]	; (800a9f8 <HAL_UART_MspInit+0x258>)
 800a992:	2200      	movs	r2, #0
 800a994:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 800a996:	4b18      	ldr	r3, [pc, #96]	; (800a9f8 <HAL_UART_MspInit+0x258>)
 800a998:	2200      	movs	r2, #0
 800a99a:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 800a99c:	4b16      	ldr	r3, [pc, #88]	; (800a9f8 <HAL_UART_MspInit+0x258>)
 800a99e:	2200      	movs	r2, #0
 800a9a0:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800a9a2:	4b15      	ldr	r3, [pc, #84]	; (800a9f8 <HAL_UART_MspInit+0x258>)
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 800a9a8:	4813      	ldr	r0, [pc, #76]	; (800a9f8 <HAL_UART_MspInit+0x258>)
 800a9aa:	f000 faa5 	bl	800aef8 <HAL_DMA_Init>
 800a9ae:	4603      	mov	r3, r0
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d001      	beq.n	800a9b8 <HAL_UART_MspInit+0x218>
      Error_Handler();
 800a9b4:	f7ff f8ce 	bl	8009b54 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart5_tx);
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	4a0f      	ldr	r2, [pc, #60]	; (800a9f8 <HAL_UART_MspInit+0x258>)
 800a9bc:	635a      	str	r2, [r3, #52]	; 0x34
 800a9be:	4a0e      	ldr	r2, [pc, #56]	; (800a9f8 <HAL_UART_MspInit+0x258>)
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	2105      	movs	r1, #5
 800a9c8:	2035      	movs	r0, #53	; 0x35
 800a9ca:	f000 fa5e 	bl	800ae8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800a9ce:	2035      	movs	r0, #53	; 0x35
 800a9d0:	f000 fa77 	bl	800aec2 <HAL_NVIC_EnableIRQ>
}
 800a9d4:	e0ab      	b.n	800ab2e <HAL_UART_MspInit+0x38e>
 800a9d6:	bf00      	nop
 800a9d8:	40004c00 	.word	0x40004c00
 800a9dc:	40023800 	.word	0x40023800
 800a9e0:	40020000 	.word	0x40020000
 800a9e4:	40020800 	.word	0x40020800
 800a9e8:	40005000 	.word	0x40005000
 800a9ec:	40020c00 	.word	0x40020c00
 800a9f0:	200144f8 	.word	0x200144f8
 800a9f4:	40026010 	.word	0x40026010
 800a9f8:	20014558 	.word	0x20014558
 800a9fc:	400260b8 	.word	0x400260b8
  else if(uartHandle->Instance==USART1)
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	4a4c      	ldr	r2, [pc, #304]	; (800ab38 <HAL_UART_MspInit+0x398>)
 800aa06:	4293      	cmp	r3, r2
 800aa08:	f040 8091 	bne.w	800ab2e <HAL_UART_MspInit+0x38e>
    __HAL_RCC_USART1_CLK_ENABLE();
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	613b      	str	r3, [r7, #16]
 800aa10:	4b4a      	ldr	r3, [pc, #296]	; (800ab3c <HAL_UART_MspInit+0x39c>)
 800aa12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa14:	4a49      	ldr	r2, [pc, #292]	; (800ab3c <HAL_UART_MspInit+0x39c>)
 800aa16:	f043 0310 	orr.w	r3, r3, #16
 800aa1a:	6453      	str	r3, [r2, #68]	; 0x44
 800aa1c:	4b47      	ldr	r3, [pc, #284]	; (800ab3c <HAL_UART_MspInit+0x39c>)
 800aa1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa20:	f003 0310 	and.w	r3, r3, #16
 800aa24:	613b      	str	r3, [r7, #16]
 800aa26:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800aa28:	2300      	movs	r3, #0
 800aa2a:	60fb      	str	r3, [r7, #12]
 800aa2c:	4b43      	ldr	r3, [pc, #268]	; (800ab3c <HAL_UART_MspInit+0x39c>)
 800aa2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa30:	4a42      	ldr	r2, [pc, #264]	; (800ab3c <HAL_UART_MspInit+0x39c>)
 800aa32:	f043 0301 	orr.w	r3, r3, #1
 800aa36:	6313      	str	r3, [r2, #48]	; 0x30
 800aa38:	4b40      	ldr	r3, [pc, #256]	; (800ab3c <HAL_UART_MspInit+0x39c>)
 800aa3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa3c:	f003 0301 	and.w	r3, r3, #1
 800aa40:	60fb      	str	r3, [r7, #12]
 800aa42:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800aa44:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800aa48:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aa4a:	2302      	movs	r3, #2
 800aa4c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa4e:	2300      	movs	r3, #0
 800aa50:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800aa52:	2303      	movs	r3, #3
 800aa54:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800aa56:	2307      	movs	r3, #7
 800aa58:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aa5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800aa5e:	4619      	mov	r1, r3
 800aa60:	4837      	ldr	r0, [pc, #220]	; (800ab40 <HAL_UART_MspInit+0x3a0>)
 800aa62:	f002 fabd 	bl	800cfe0 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800aa66:	4b37      	ldr	r3, [pc, #220]	; (800ab44 <HAL_UART_MspInit+0x3a4>)
 800aa68:	4a37      	ldr	r2, [pc, #220]	; (800ab48 <HAL_UART_MspInit+0x3a8>)
 800aa6a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800aa6c:	4b35      	ldr	r3, [pc, #212]	; (800ab44 <HAL_UART_MspInit+0x3a4>)
 800aa6e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800aa72:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800aa74:	4b33      	ldr	r3, [pc, #204]	; (800ab44 <HAL_UART_MspInit+0x3a4>)
 800aa76:	2200      	movs	r2, #0
 800aa78:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800aa7a:	4b32      	ldr	r3, [pc, #200]	; (800ab44 <HAL_UART_MspInit+0x3a4>)
 800aa7c:	2200      	movs	r2, #0
 800aa7e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800aa80:	4b30      	ldr	r3, [pc, #192]	; (800ab44 <HAL_UART_MspInit+0x3a4>)
 800aa82:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800aa86:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800aa88:	4b2e      	ldr	r3, [pc, #184]	; (800ab44 <HAL_UART_MspInit+0x3a4>)
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800aa8e:	4b2d      	ldr	r3, [pc, #180]	; (800ab44 <HAL_UART_MspInit+0x3a4>)
 800aa90:	2200      	movs	r2, #0
 800aa92:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800aa94:	4b2b      	ldr	r3, [pc, #172]	; (800ab44 <HAL_UART_MspInit+0x3a4>)
 800aa96:	2200      	movs	r2, #0
 800aa98:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800aa9a:	4b2a      	ldr	r3, [pc, #168]	; (800ab44 <HAL_UART_MspInit+0x3a4>)
 800aa9c:	2200      	movs	r2, #0
 800aa9e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800aaa0:	4b28      	ldr	r3, [pc, #160]	; (800ab44 <HAL_UART_MspInit+0x3a4>)
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800aaa6:	4827      	ldr	r0, [pc, #156]	; (800ab44 <HAL_UART_MspInit+0x3a4>)
 800aaa8:	f000 fa26 	bl	800aef8 <HAL_DMA_Init>
 800aaac:	4603      	mov	r3, r0
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d001      	beq.n	800aab6 <HAL_UART_MspInit+0x316>
      Error_Handler();
 800aab2:	f7ff f84f 	bl	8009b54 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	4a22      	ldr	r2, [pc, #136]	; (800ab44 <HAL_UART_MspInit+0x3a4>)
 800aaba:	639a      	str	r2, [r3, #56]	; 0x38
 800aabc:	4a21      	ldr	r2, [pc, #132]	; (800ab44 <HAL_UART_MspInit+0x3a4>)
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800aac2:	4b22      	ldr	r3, [pc, #136]	; (800ab4c <HAL_UART_MspInit+0x3ac>)
 800aac4:	4a22      	ldr	r2, [pc, #136]	; (800ab50 <HAL_UART_MspInit+0x3b0>)
 800aac6:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 800aac8:	4b20      	ldr	r3, [pc, #128]	; (800ab4c <HAL_UART_MspInit+0x3ac>)
 800aaca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800aace:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800aad0:	4b1e      	ldr	r3, [pc, #120]	; (800ab4c <HAL_UART_MspInit+0x3ac>)
 800aad2:	2240      	movs	r2, #64	; 0x40
 800aad4:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800aad6:	4b1d      	ldr	r3, [pc, #116]	; (800ab4c <HAL_UART_MspInit+0x3ac>)
 800aad8:	2200      	movs	r2, #0
 800aada:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800aadc:	4b1b      	ldr	r3, [pc, #108]	; (800ab4c <HAL_UART_MspInit+0x3ac>)
 800aade:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800aae2:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800aae4:	4b19      	ldr	r3, [pc, #100]	; (800ab4c <HAL_UART_MspInit+0x3ac>)
 800aae6:	2200      	movs	r2, #0
 800aae8:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800aaea:	4b18      	ldr	r3, [pc, #96]	; (800ab4c <HAL_UART_MspInit+0x3ac>)
 800aaec:	2200      	movs	r2, #0
 800aaee:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800aaf0:	4b16      	ldr	r3, [pc, #88]	; (800ab4c <HAL_UART_MspInit+0x3ac>)
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800aaf6:	4b15      	ldr	r3, [pc, #84]	; (800ab4c <HAL_UART_MspInit+0x3ac>)
 800aaf8:	2200      	movs	r2, #0
 800aafa:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800aafc:	4b13      	ldr	r3, [pc, #76]	; (800ab4c <HAL_UART_MspInit+0x3ac>)
 800aafe:	2200      	movs	r2, #0
 800ab00:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800ab02:	4812      	ldr	r0, [pc, #72]	; (800ab4c <HAL_UART_MspInit+0x3ac>)
 800ab04:	f000 f9f8 	bl	800aef8 <HAL_DMA_Init>
 800ab08:	4603      	mov	r3, r0
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d001      	beq.n	800ab12 <HAL_UART_MspInit+0x372>
      Error_Handler();
 800ab0e:	f7ff f821 	bl	8009b54 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	4a0d      	ldr	r2, [pc, #52]	; (800ab4c <HAL_UART_MspInit+0x3ac>)
 800ab16:	635a      	str	r2, [r3, #52]	; 0x34
 800ab18:	4a0c      	ldr	r2, [pc, #48]	; (800ab4c <HAL_UART_MspInit+0x3ac>)
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800ab1e:	2200      	movs	r2, #0
 800ab20:	2105      	movs	r1, #5
 800ab22:	2025      	movs	r0, #37	; 0x25
 800ab24:	f000 f9b1 	bl	800ae8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800ab28:	2025      	movs	r0, #37	; 0x25
 800ab2a:	f000 f9ca 	bl	800aec2 <HAL_NVIC_EnableIRQ>
}
 800ab2e:	bf00      	nop
 800ab30:	3740      	adds	r7, #64	; 0x40
 800ab32:	46bd      	mov	sp, r7
 800ab34:	bd80      	pop	{r7, pc}
 800ab36:	bf00      	nop
 800ab38:	40011000 	.word	0x40011000
 800ab3c:	40023800 	.word	0x40023800
 800ab40:	40020000 	.word	0x40020000
 800ab44:	20014410 	.word	0x20014410
 800ab48:	40026440 	.word	0x40026440
 800ab4c:	2001436c 	.word	0x2001436c
 800ab50:	400264b8 	.word	0x400264b8

0800ab54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800ab54:	f8df d034 	ldr.w	sp, [pc, #52]	; 800ab8c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800ab58:	480d      	ldr	r0, [pc, #52]	; (800ab90 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800ab5a:	490e      	ldr	r1, [pc, #56]	; (800ab94 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800ab5c:	4a0e      	ldr	r2, [pc, #56]	; (800ab98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800ab5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800ab60:	e002      	b.n	800ab68 <LoopCopyDataInit>

0800ab62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800ab62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800ab64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800ab66:	3304      	adds	r3, #4

0800ab68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800ab68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800ab6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800ab6c:	d3f9      	bcc.n	800ab62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800ab6e:	4a0b      	ldr	r2, [pc, #44]	; (800ab9c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800ab70:	4c0b      	ldr	r4, [pc, #44]	; (800aba0 <LoopFillZerobss+0x26>)
  movs r3, #0
 800ab72:	2300      	movs	r3, #0
  b LoopFillZerobss
 800ab74:	e001      	b.n	800ab7a <LoopFillZerobss>

0800ab76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800ab76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800ab78:	3204      	adds	r2, #4

0800ab7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800ab7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800ab7c:	d3fb      	bcc.n	800ab76 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800ab7e:	f7ff fa15 	bl	8009fac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800ab82:	f019 fefb 	bl	802497c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800ab86:	f7fe ff2b 	bl	80099e0 <main>
  bx  lr    
 800ab8a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800ab8c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800ab90:	10000000 	.word	0x10000000
  ldr r1, =_edata
 800ab94:	10000244 	.word	0x10000244
  ldr r2, =_sidata
 800ab98:	0802e9a8 	.word	0x0802e9a8
  ldr r2, =_sbss
 800ab9c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800aba0:	2001bd54 	.word	0x2001bd54

0800aba4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800aba4:	e7fe      	b.n	800aba4 <ADC_IRQHandler>
	...

0800aba8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800abac:	4b0e      	ldr	r3, [pc, #56]	; (800abe8 <HAL_Init+0x40>)
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	4a0d      	ldr	r2, [pc, #52]	; (800abe8 <HAL_Init+0x40>)
 800abb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800abb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800abb8:	4b0b      	ldr	r3, [pc, #44]	; (800abe8 <HAL_Init+0x40>)
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	4a0a      	ldr	r2, [pc, #40]	; (800abe8 <HAL_Init+0x40>)
 800abbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800abc2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800abc4:	4b08      	ldr	r3, [pc, #32]	; (800abe8 <HAL_Init+0x40>)
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	4a07      	ldr	r2, [pc, #28]	; (800abe8 <HAL_Init+0x40>)
 800abca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800abce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800abd0:	2003      	movs	r0, #3
 800abd2:	f000 f94f 	bl	800ae74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800abd6:	200f      	movs	r0, #15
 800abd8:	f000 f808 	bl	800abec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800abdc:	f7ff f85e 	bl	8009c9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800abe0:	2300      	movs	r3, #0
}
 800abe2:	4618      	mov	r0, r3
 800abe4:	bd80      	pop	{r7, pc}
 800abe6:	bf00      	nop
 800abe8:	40023c00 	.word	0x40023c00

0800abec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800abec:	b580      	push	{r7, lr}
 800abee:	b082      	sub	sp, #8
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800abf4:	4b12      	ldr	r3, [pc, #72]	; (800ac40 <HAL_InitTick+0x54>)
 800abf6:	681a      	ldr	r2, [r3, #0]
 800abf8:	4b12      	ldr	r3, [pc, #72]	; (800ac44 <HAL_InitTick+0x58>)
 800abfa:	781b      	ldrb	r3, [r3, #0]
 800abfc:	4619      	mov	r1, r3
 800abfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ac02:	fbb3 f3f1 	udiv	r3, r3, r1
 800ac06:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	f000 f967 	bl	800aede <HAL_SYSTICK_Config>
 800ac10:	4603      	mov	r3, r0
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d001      	beq.n	800ac1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800ac16:	2301      	movs	r3, #1
 800ac18:	e00e      	b.n	800ac38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	2b0f      	cmp	r3, #15
 800ac1e:	d80a      	bhi.n	800ac36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800ac20:	2200      	movs	r2, #0
 800ac22:	6879      	ldr	r1, [r7, #4]
 800ac24:	f04f 30ff 	mov.w	r0, #4294967295
 800ac28:	f000 f92f 	bl	800ae8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800ac2c:	4a06      	ldr	r2, [pc, #24]	; (800ac48 <HAL_InitTick+0x5c>)
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800ac32:	2300      	movs	r3, #0
 800ac34:	e000      	b.n	800ac38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800ac36:	2301      	movs	r3, #1
}
 800ac38:	4618      	mov	r0, r3
 800ac3a:	3708      	adds	r7, #8
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	bd80      	pop	{r7, pc}
 800ac40:	10000050 	.word	0x10000050
 800ac44:	10000058 	.word	0x10000058
 800ac48:	10000054 	.word	0x10000054

0800ac4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800ac4c:	b480      	push	{r7}
 800ac4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800ac50:	4b06      	ldr	r3, [pc, #24]	; (800ac6c <HAL_IncTick+0x20>)
 800ac52:	781b      	ldrb	r3, [r3, #0]
 800ac54:	461a      	mov	r2, r3
 800ac56:	4b06      	ldr	r3, [pc, #24]	; (800ac70 <HAL_IncTick+0x24>)
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	4413      	add	r3, r2
 800ac5c:	4a04      	ldr	r2, [pc, #16]	; (800ac70 <HAL_IncTick+0x24>)
 800ac5e:	6013      	str	r3, [r2, #0]
}
 800ac60:	bf00      	nop
 800ac62:	46bd      	mov	sp, r7
 800ac64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac68:	4770      	bx	lr
 800ac6a:	bf00      	nop
 800ac6c:	10000058 	.word	0x10000058
 800ac70:	200145b8 	.word	0x200145b8

0800ac74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800ac74:	b480      	push	{r7}
 800ac76:	af00      	add	r7, sp, #0
  return uwTick;
 800ac78:	4b03      	ldr	r3, [pc, #12]	; (800ac88 <HAL_GetTick+0x14>)
 800ac7a:	681b      	ldr	r3, [r3, #0]
}
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac84:	4770      	bx	lr
 800ac86:	bf00      	nop
 800ac88:	200145b8 	.word	0x200145b8

0800ac8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b084      	sub	sp, #16
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800ac94:	f7ff ffee 	bl	800ac74 <HAL_GetTick>
 800ac98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aca4:	d005      	beq.n	800acb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800aca6:	4b0a      	ldr	r3, [pc, #40]	; (800acd0 <HAL_Delay+0x44>)
 800aca8:	781b      	ldrb	r3, [r3, #0]
 800acaa:	461a      	mov	r2, r3
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	4413      	add	r3, r2
 800acb0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800acb2:	bf00      	nop
 800acb4:	f7ff ffde 	bl	800ac74 <HAL_GetTick>
 800acb8:	4602      	mov	r2, r0
 800acba:	68bb      	ldr	r3, [r7, #8]
 800acbc:	1ad3      	subs	r3, r2, r3
 800acbe:	68fa      	ldr	r2, [r7, #12]
 800acc0:	429a      	cmp	r2, r3
 800acc2:	d8f7      	bhi.n	800acb4 <HAL_Delay+0x28>
  {
  }
}
 800acc4:	bf00      	nop
 800acc6:	bf00      	nop
 800acc8:	3710      	adds	r7, #16
 800acca:	46bd      	mov	sp, r7
 800accc:	bd80      	pop	{r7, pc}
 800acce:	bf00      	nop
 800acd0:	10000058 	.word	0x10000058

0800acd4 <__NVIC_SetPriorityGrouping>:
{
 800acd4:	b480      	push	{r7}
 800acd6:	b085      	sub	sp, #20
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	f003 0307 	and.w	r3, r3, #7
 800ace2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800ace4:	4b0c      	ldr	r3, [pc, #48]	; (800ad18 <__NVIC_SetPriorityGrouping+0x44>)
 800ace6:	68db      	ldr	r3, [r3, #12]
 800ace8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800acea:	68ba      	ldr	r2, [r7, #8]
 800acec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800acf0:	4013      	ands	r3, r2
 800acf2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800acf8:	68bb      	ldr	r3, [r7, #8]
 800acfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800acfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800ad00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ad04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800ad06:	4a04      	ldr	r2, [pc, #16]	; (800ad18 <__NVIC_SetPriorityGrouping+0x44>)
 800ad08:	68bb      	ldr	r3, [r7, #8]
 800ad0a:	60d3      	str	r3, [r2, #12]
}
 800ad0c:	bf00      	nop
 800ad0e:	3714      	adds	r7, #20
 800ad10:	46bd      	mov	sp, r7
 800ad12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad16:	4770      	bx	lr
 800ad18:	e000ed00 	.word	0xe000ed00

0800ad1c <__NVIC_GetPriorityGrouping>:
{
 800ad1c:	b480      	push	{r7}
 800ad1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800ad20:	4b04      	ldr	r3, [pc, #16]	; (800ad34 <__NVIC_GetPriorityGrouping+0x18>)
 800ad22:	68db      	ldr	r3, [r3, #12]
 800ad24:	0a1b      	lsrs	r3, r3, #8
 800ad26:	f003 0307 	and.w	r3, r3, #7
}
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad32:	4770      	bx	lr
 800ad34:	e000ed00 	.word	0xe000ed00

0800ad38 <__NVIC_EnableIRQ>:
{
 800ad38:	b480      	push	{r7}
 800ad3a:	b083      	sub	sp, #12
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	4603      	mov	r3, r0
 800ad40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ad42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	db0b      	blt.n	800ad62 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ad4a:	79fb      	ldrb	r3, [r7, #7]
 800ad4c:	f003 021f 	and.w	r2, r3, #31
 800ad50:	4907      	ldr	r1, [pc, #28]	; (800ad70 <__NVIC_EnableIRQ+0x38>)
 800ad52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ad56:	095b      	lsrs	r3, r3, #5
 800ad58:	2001      	movs	r0, #1
 800ad5a:	fa00 f202 	lsl.w	r2, r0, r2
 800ad5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800ad62:	bf00      	nop
 800ad64:	370c      	adds	r7, #12
 800ad66:	46bd      	mov	sp, r7
 800ad68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6c:	4770      	bx	lr
 800ad6e:	bf00      	nop
 800ad70:	e000e100 	.word	0xe000e100

0800ad74 <__NVIC_SetPriority>:
{
 800ad74:	b480      	push	{r7}
 800ad76:	b083      	sub	sp, #12
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	4603      	mov	r3, r0
 800ad7c:	6039      	str	r1, [r7, #0]
 800ad7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ad80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	db0a      	blt.n	800ad9e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ad88:	683b      	ldr	r3, [r7, #0]
 800ad8a:	b2da      	uxtb	r2, r3
 800ad8c:	490c      	ldr	r1, [pc, #48]	; (800adc0 <__NVIC_SetPriority+0x4c>)
 800ad8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ad92:	0112      	lsls	r2, r2, #4
 800ad94:	b2d2      	uxtb	r2, r2
 800ad96:	440b      	add	r3, r1
 800ad98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800ad9c:	e00a      	b.n	800adb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ad9e:	683b      	ldr	r3, [r7, #0]
 800ada0:	b2da      	uxtb	r2, r3
 800ada2:	4908      	ldr	r1, [pc, #32]	; (800adc4 <__NVIC_SetPriority+0x50>)
 800ada4:	79fb      	ldrb	r3, [r7, #7]
 800ada6:	f003 030f 	and.w	r3, r3, #15
 800adaa:	3b04      	subs	r3, #4
 800adac:	0112      	lsls	r2, r2, #4
 800adae:	b2d2      	uxtb	r2, r2
 800adb0:	440b      	add	r3, r1
 800adb2:	761a      	strb	r2, [r3, #24]
}
 800adb4:	bf00      	nop
 800adb6:	370c      	adds	r7, #12
 800adb8:	46bd      	mov	sp, r7
 800adba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adbe:	4770      	bx	lr
 800adc0:	e000e100 	.word	0xe000e100
 800adc4:	e000ed00 	.word	0xe000ed00

0800adc8 <NVIC_EncodePriority>:
{
 800adc8:	b480      	push	{r7}
 800adca:	b089      	sub	sp, #36	; 0x24
 800adcc:	af00      	add	r7, sp, #0
 800adce:	60f8      	str	r0, [r7, #12]
 800add0:	60b9      	str	r1, [r7, #8]
 800add2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	f003 0307 	and.w	r3, r3, #7
 800adda:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800addc:	69fb      	ldr	r3, [r7, #28]
 800adde:	f1c3 0307 	rsb	r3, r3, #7
 800ade2:	2b04      	cmp	r3, #4
 800ade4:	bf28      	it	cs
 800ade6:	2304      	movcs	r3, #4
 800ade8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800adea:	69fb      	ldr	r3, [r7, #28]
 800adec:	3304      	adds	r3, #4
 800adee:	2b06      	cmp	r3, #6
 800adf0:	d902      	bls.n	800adf8 <NVIC_EncodePriority+0x30>
 800adf2:	69fb      	ldr	r3, [r7, #28]
 800adf4:	3b03      	subs	r3, #3
 800adf6:	e000      	b.n	800adfa <NVIC_EncodePriority+0x32>
 800adf8:	2300      	movs	r3, #0
 800adfa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800adfc:	f04f 32ff 	mov.w	r2, #4294967295
 800ae00:	69bb      	ldr	r3, [r7, #24]
 800ae02:	fa02 f303 	lsl.w	r3, r2, r3
 800ae06:	43da      	mvns	r2, r3
 800ae08:	68bb      	ldr	r3, [r7, #8]
 800ae0a:	401a      	ands	r2, r3
 800ae0c:	697b      	ldr	r3, [r7, #20]
 800ae0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800ae10:	f04f 31ff 	mov.w	r1, #4294967295
 800ae14:	697b      	ldr	r3, [r7, #20]
 800ae16:	fa01 f303 	lsl.w	r3, r1, r3
 800ae1a:	43d9      	mvns	r1, r3
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ae20:	4313      	orrs	r3, r2
}
 800ae22:	4618      	mov	r0, r3
 800ae24:	3724      	adds	r7, #36	; 0x24
 800ae26:	46bd      	mov	sp, r7
 800ae28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2c:	4770      	bx	lr
	...

0800ae30 <SysTick_Config>:
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b082      	sub	sp, #8
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	3b01      	subs	r3, #1
 800ae3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ae40:	d301      	bcc.n	800ae46 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800ae42:	2301      	movs	r3, #1
 800ae44:	e00f      	b.n	800ae66 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800ae46:	4a0a      	ldr	r2, [pc, #40]	; (800ae70 <SysTick_Config+0x40>)
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	3b01      	subs	r3, #1
 800ae4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800ae4e:	210f      	movs	r1, #15
 800ae50:	f04f 30ff 	mov.w	r0, #4294967295
 800ae54:	f7ff ff8e 	bl	800ad74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800ae58:	4b05      	ldr	r3, [pc, #20]	; (800ae70 <SysTick_Config+0x40>)
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800ae5e:	4b04      	ldr	r3, [pc, #16]	; (800ae70 <SysTick_Config+0x40>)
 800ae60:	2207      	movs	r2, #7
 800ae62:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800ae64:	2300      	movs	r3, #0
}
 800ae66:	4618      	mov	r0, r3
 800ae68:	3708      	adds	r7, #8
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	bd80      	pop	{r7, pc}
 800ae6e:	bf00      	nop
 800ae70:	e000e010 	.word	0xe000e010

0800ae74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b082      	sub	sp, #8
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800ae7c:	6878      	ldr	r0, [r7, #4]
 800ae7e:	f7ff ff29 	bl	800acd4 <__NVIC_SetPriorityGrouping>
}
 800ae82:	bf00      	nop
 800ae84:	3708      	adds	r7, #8
 800ae86:	46bd      	mov	sp, r7
 800ae88:	bd80      	pop	{r7, pc}

0800ae8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800ae8a:	b580      	push	{r7, lr}
 800ae8c:	b086      	sub	sp, #24
 800ae8e:	af00      	add	r7, sp, #0
 800ae90:	4603      	mov	r3, r0
 800ae92:	60b9      	str	r1, [r7, #8]
 800ae94:	607a      	str	r2, [r7, #4]
 800ae96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800ae98:	2300      	movs	r3, #0
 800ae9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800ae9c:	f7ff ff3e 	bl	800ad1c <__NVIC_GetPriorityGrouping>
 800aea0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800aea2:	687a      	ldr	r2, [r7, #4]
 800aea4:	68b9      	ldr	r1, [r7, #8]
 800aea6:	6978      	ldr	r0, [r7, #20]
 800aea8:	f7ff ff8e 	bl	800adc8 <NVIC_EncodePriority>
 800aeac:	4602      	mov	r2, r0
 800aeae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aeb2:	4611      	mov	r1, r2
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	f7ff ff5d 	bl	800ad74 <__NVIC_SetPriority>
}
 800aeba:	bf00      	nop
 800aebc:	3718      	adds	r7, #24
 800aebe:	46bd      	mov	sp, r7
 800aec0:	bd80      	pop	{r7, pc}

0800aec2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800aec2:	b580      	push	{r7, lr}
 800aec4:	b082      	sub	sp, #8
 800aec6:	af00      	add	r7, sp, #0
 800aec8:	4603      	mov	r3, r0
 800aeca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800aecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aed0:	4618      	mov	r0, r3
 800aed2:	f7ff ff31 	bl	800ad38 <__NVIC_EnableIRQ>
}
 800aed6:	bf00      	nop
 800aed8:	3708      	adds	r7, #8
 800aeda:	46bd      	mov	sp, r7
 800aedc:	bd80      	pop	{r7, pc}

0800aede <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800aede:	b580      	push	{r7, lr}
 800aee0:	b082      	sub	sp, #8
 800aee2:	af00      	add	r7, sp, #0
 800aee4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800aee6:	6878      	ldr	r0, [r7, #4]
 800aee8:	f7ff ffa2 	bl	800ae30 <SysTick_Config>
 800aeec:	4603      	mov	r3, r0
}
 800aeee:	4618      	mov	r0, r3
 800aef0:	3708      	adds	r7, #8
 800aef2:	46bd      	mov	sp, r7
 800aef4:	bd80      	pop	{r7, pc}
	...

0800aef8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b086      	sub	sp, #24
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800af00:	2300      	movs	r3, #0
 800af02:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800af04:	f7ff feb6 	bl	800ac74 <HAL_GetTick>
 800af08:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d101      	bne.n	800af14 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800af10:	2301      	movs	r3, #1
 800af12:	e099      	b.n	800b048 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	2202      	movs	r2, #2
 800af18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2200      	movs	r2, #0
 800af20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	681a      	ldr	r2, [r3, #0]
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	f022 0201 	bic.w	r2, r2, #1
 800af32:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800af34:	e00f      	b.n	800af56 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800af36:	f7ff fe9d 	bl	800ac74 <HAL_GetTick>
 800af3a:	4602      	mov	r2, r0
 800af3c:	693b      	ldr	r3, [r7, #16]
 800af3e:	1ad3      	subs	r3, r2, r3
 800af40:	2b05      	cmp	r3, #5
 800af42:	d908      	bls.n	800af56 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2220      	movs	r2, #32
 800af48:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	2203      	movs	r2, #3
 800af4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800af52:	2303      	movs	r3, #3
 800af54:	e078      	b.n	800b048 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	f003 0301 	and.w	r3, r3, #1
 800af60:	2b00      	cmp	r3, #0
 800af62:	d1e8      	bne.n	800af36 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800af6c:	697a      	ldr	r2, [r7, #20]
 800af6e:	4b38      	ldr	r3, [pc, #224]	; (800b050 <HAL_DMA_Init+0x158>)
 800af70:	4013      	ands	r3, r2
 800af72:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	685a      	ldr	r2, [r3, #4]
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	689b      	ldr	r3, [r3, #8]
 800af7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800af82:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	691b      	ldr	r3, [r3, #16]
 800af88:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800af8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	699b      	ldr	r3, [r3, #24]
 800af94:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800af9a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	6a1b      	ldr	r3, [r3, #32]
 800afa0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800afa2:	697a      	ldr	r2, [r7, #20]
 800afa4:	4313      	orrs	r3, r2
 800afa6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afac:	2b04      	cmp	r3, #4
 800afae:	d107      	bne.n	800afc0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afb8:	4313      	orrs	r3, r2
 800afba:	697a      	ldr	r2, [r7, #20]
 800afbc:	4313      	orrs	r3, r2
 800afbe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	697a      	ldr	r2, [r7, #20]
 800afc6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	695b      	ldr	r3, [r3, #20]
 800afce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800afd0:	697b      	ldr	r3, [r7, #20]
 800afd2:	f023 0307 	bic.w	r3, r3, #7
 800afd6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afdc:	697a      	ldr	r2, [r7, #20]
 800afde:	4313      	orrs	r3, r2
 800afe0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afe6:	2b04      	cmp	r3, #4
 800afe8:	d117      	bne.n	800b01a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afee:	697a      	ldr	r2, [r7, #20]
 800aff0:	4313      	orrs	r3, r2
 800aff2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d00e      	beq.n	800b01a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800affc:	6878      	ldr	r0, [r7, #4]
 800affe:	f000 fb01 	bl	800b604 <DMA_CheckFifoParam>
 800b002:	4603      	mov	r3, r0
 800b004:	2b00      	cmp	r3, #0
 800b006:	d008      	beq.n	800b01a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	2240      	movs	r2, #64	; 0x40
 800b00c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	2201      	movs	r2, #1
 800b012:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800b016:	2301      	movs	r3, #1
 800b018:	e016      	b.n	800b048 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	697a      	ldr	r2, [r7, #20]
 800b020:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800b022:	6878      	ldr	r0, [r7, #4]
 800b024:	f000 fab8 	bl	800b598 <DMA_CalcBaseAndBitshift>
 800b028:	4603      	mov	r3, r0
 800b02a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b030:	223f      	movs	r2, #63	; 0x3f
 800b032:	409a      	lsls	r2, r3
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	2200      	movs	r2, #0
 800b03c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	2201      	movs	r2, #1
 800b042:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800b046:	2300      	movs	r3, #0
}
 800b048:	4618      	mov	r0, r3
 800b04a:	3718      	adds	r7, #24
 800b04c:	46bd      	mov	sp, r7
 800b04e:	bd80      	pop	{r7, pc}
 800b050:	f010803f 	.word	0xf010803f

0800b054 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b086      	sub	sp, #24
 800b058:	af00      	add	r7, sp, #0
 800b05a:	60f8      	str	r0, [r7, #12]
 800b05c:	60b9      	str	r1, [r7, #8]
 800b05e:	607a      	str	r2, [r7, #4]
 800b060:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b062:	2300      	movs	r3, #0
 800b064:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b06a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b072:	2b01      	cmp	r3, #1
 800b074:	d101      	bne.n	800b07a <HAL_DMA_Start_IT+0x26>
 800b076:	2302      	movs	r3, #2
 800b078:	e040      	b.n	800b0fc <HAL_DMA_Start_IT+0xa8>
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	2201      	movs	r2, #1
 800b07e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b088:	b2db      	uxtb	r3, r3
 800b08a:	2b01      	cmp	r3, #1
 800b08c:	d12f      	bne.n	800b0ee <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	2202      	movs	r2, #2
 800b092:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	2200      	movs	r2, #0
 800b09a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800b09c:	683b      	ldr	r3, [r7, #0]
 800b09e:	687a      	ldr	r2, [r7, #4]
 800b0a0:	68b9      	ldr	r1, [r7, #8]
 800b0a2:	68f8      	ldr	r0, [r7, #12]
 800b0a4:	f000 fa4a 	bl	800b53c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b0ac:	223f      	movs	r2, #63	; 0x3f
 800b0ae:	409a      	lsls	r2, r3
 800b0b0:	693b      	ldr	r3, [r7, #16]
 800b0b2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	681a      	ldr	r2, [r3, #0]
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	f042 0216 	orr.w	r2, r2, #22
 800b0c2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d007      	beq.n	800b0dc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	681a      	ldr	r2, [r3, #0]
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	f042 0208 	orr.w	r2, r2, #8
 800b0da:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	681a      	ldr	r2, [r3, #0]
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	f042 0201 	orr.w	r2, r2, #1
 800b0ea:	601a      	str	r2, [r3, #0]
 800b0ec:	e005      	b.n	800b0fa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	2200      	movs	r2, #0
 800b0f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800b0f6:	2302      	movs	r3, #2
 800b0f8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800b0fa:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	3718      	adds	r7, #24
 800b100:	46bd      	mov	sp, r7
 800b102:	bd80      	pop	{r7, pc}

0800b104 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800b104:	b580      	push	{r7, lr}
 800b106:	b084      	sub	sp, #16
 800b108:	af00      	add	r7, sp, #0
 800b10a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b110:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800b112:	f7ff fdaf 	bl	800ac74 <HAL_GetTick>
 800b116:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b11e:	b2db      	uxtb	r3, r3
 800b120:	2b02      	cmp	r3, #2
 800b122:	d008      	beq.n	800b136 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	2280      	movs	r2, #128	; 0x80
 800b128:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	2200      	movs	r2, #0
 800b12e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800b132:	2301      	movs	r3, #1
 800b134:	e052      	b.n	800b1dc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	681a      	ldr	r2, [r3, #0]
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	f022 0216 	bic.w	r2, r2, #22
 800b144:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	695a      	ldr	r2, [r3, #20]
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b154:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d103      	bne.n	800b166 <HAL_DMA_Abort+0x62>
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b162:	2b00      	cmp	r3, #0
 800b164:	d007      	beq.n	800b176 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	681a      	ldr	r2, [r3, #0]
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	f022 0208 	bic.w	r2, r2, #8
 800b174:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	681a      	ldr	r2, [r3, #0]
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	f022 0201 	bic.w	r2, r2, #1
 800b184:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b186:	e013      	b.n	800b1b0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800b188:	f7ff fd74 	bl	800ac74 <HAL_GetTick>
 800b18c:	4602      	mov	r2, r0
 800b18e:	68bb      	ldr	r3, [r7, #8]
 800b190:	1ad3      	subs	r3, r2, r3
 800b192:	2b05      	cmp	r3, #5
 800b194:	d90c      	bls.n	800b1b0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	2220      	movs	r2, #32
 800b19a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	2203      	movs	r2, #3
 800b1a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800b1ac:	2303      	movs	r3, #3
 800b1ae:	e015      	b.n	800b1dc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	f003 0301 	and.w	r3, r3, #1
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d1e4      	bne.n	800b188 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b1c2:	223f      	movs	r2, #63	; 0x3f
 800b1c4:	409a      	lsls	r2, r3
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	2201      	movs	r2, #1
 800b1ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800b1da:	2300      	movs	r3, #0
}
 800b1dc:	4618      	mov	r0, r3
 800b1de:	3710      	adds	r7, #16
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	bd80      	pop	{r7, pc}

0800b1e4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800b1e4:	b480      	push	{r7}
 800b1e6:	b083      	sub	sp, #12
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b1f2:	b2db      	uxtb	r3, r3
 800b1f4:	2b02      	cmp	r3, #2
 800b1f6:	d004      	beq.n	800b202 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	2280      	movs	r2, #128	; 0x80
 800b1fc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800b1fe:	2301      	movs	r3, #1
 800b200:	e00c      	b.n	800b21c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	2205      	movs	r2, #5
 800b206:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	681a      	ldr	r2, [r3, #0]
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	f022 0201 	bic.w	r2, r2, #1
 800b218:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800b21a:	2300      	movs	r3, #0
}
 800b21c:	4618      	mov	r0, r3
 800b21e:	370c      	adds	r7, #12
 800b220:	46bd      	mov	sp, r7
 800b222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b226:	4770      	bx	lr

0800b228 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800b228:	b580      	push	{r7, lr}
 800b22a:	b086      	sub	sp, #24
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800b230:	2300      	movs	r3, #0
 800b232:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800b234:	4b8e      	ldr	r3, [pc, #568]	; (800b470 <HAL_DMA_IRQHandler+0x248>)
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	4a8e      	ldr	r2, [pc, #568]	; (800b474 <HAL_DMA_IRQHandler+0x24c>)
 800b23a:	fba2 2303 	umull	r2, r3, r2, r3
 800b23e:	0a9b      	lsrs	r3, r3, #10
 800b240:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b246:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800b248:	693b      	ldr	r3, [r7, #16]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b252:	2208      	movs	r2, #8
 800b254:	409a      	lsls	r2, r3
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	4013      	ands	r3, r2
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d01a      	beq.n	800b294 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	f003 0304 	and.w	r3, r3, #4
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d013      	beq.n	800b294 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	681a      	ldr	r2, [r3, #0]
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	f022 0204 	bic.w	r2, r2, #4
 800b27a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b280:	2208      	movs	r2, #8
 800b282:	409a      	lsls	r2, r3
 800b284:	693b      	ldr	r3, [r7, #16]
 800b286:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b28c:	f043 0201 	orr.w	r2, r3, #1
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b298:	2201      	movs	r2, #1
 800b29a:	409a      	lsls	r2, r3
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	4013      	ands	r3, r2
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d012      	beq.n	800b2ca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	695b      	ldr	r3, [r3, #20]
 800b2aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d00b      	beq.n	800b2ca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b2b6:	2201      	movs	r2, #1
 800b2b8:	409a      	lsls	r2, r3
 800b2ba:	693b      	ldr	r3, [r7, #16]
 800b2bc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2c2:	f043 0202 	orr.w	r2, r3, #2
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b2ce:	2204      	movs	r2, #4
 800b2d0:	409a      	lsls	r2, r3
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	4013      	ands	r3, r2
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d012      	beq.n	800b300 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	f003 0302 	and.w	r3, r3, #2
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d00b      	beq.n	800b300 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b2ec:	2204      	movs	r2, #4
 800b2ee:	409a      	lsls	r2, r3
 800b2f0:	693b      	ldr	r3, [r7, #16]
 800b2f2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2f8:	f043 0204 	orr.w	r2, r3, #4
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b304:	2210      	movs	r2, #16
 800b306:	409a      	lsls	r2, r3
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	4013      	ands	r3, r2
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d043      	beq.n	800b398 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	f003 0308 	and.w	r3, r3, #8
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d03c      	beq.n	800b398 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b322:	2210      	movs	r2, #16
 800b324:	409a      	lsls	r2, r3
 800b326:	693b      	ldr	r3, [r7, #16]
 800b328:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b334:	2b00      	cmp	r3, #0
 800b336:	d018      	beq.n	800b36a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b342:	2b00      	cmp	r3, #0
 800b344:	d108      	bne.n	800b358 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d024      	beq.n	800b398 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b352:	6878      	ldr	r0, [r7, #4]
 800b354:	4798      	blx	r3
 800b356:	e01f      	b.n	800b398 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d01b      	beq.n	800b398 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b364:	6878      	ldr	r0, [r7, #4]
 800b366:	4798      	blx	r3
 800b368:	e016      	b.n	800b398 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b374:	2b00      	cmp	r3, #0
 800b376:	d107      	bne.n	800b388 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	681a      	ldr	r2, [r3, #0]
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	f022 0208 	bic.w	r2, r2, #8
 800b386:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d003      	beq.n	800b398 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b394:	6878      	ldr	r0, [r7, #4]
 800b396:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b39c:	2220      	movs	r2, #32
 800b39e:	409a      	lsls	r2, r3
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	4013      	ands	r3, r2
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	f000 808f 	beq.w	800b4c8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	f003 0310 	and.w	r3, r3, #16
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	f000 8087 	beq.w	800b4c8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b3be:	2220      	movs	r2, #32
 800b3c0:	409a      	lsls	r2, r3
 800b3c2:	693b      	ldr	r3, [r7, #16]
 800b3c4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b3cc:	b2db      	uxtb	r3, r3
 800b3ce:	2b05      	cmp	r3, #5
 800b3d0:	d136      	bne.n	800b440 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	681a      	ldr	r2, [r3, #0]
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	f022 0216 	bic.w	r2, r2, #22
 800b3e0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	695a      	ldr	r2, [r3, #20]
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b3f0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d103      	bne.n	800b402 <HAL_DMA_IRQHandler+0x1da>
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d007      	beq.n	800b412 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	681a      	ldr	r2, [r3, #0]
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	f022 0208 	bic.w	r2, r2, #8
 800b410:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b416:	223f      	movs	r2, #63	; 0x3f
 800b418:	409a      	lsls	r2, r3
 800b41a:	693b      	ldr	r3, [r7, #16]
 800b41c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	2201      	movs	r2, #1
 800b422:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	2200      	movs	r2, #0
 800b42a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b432:	2b00      	cmp	r3, #0
 800b434:	d07e      	beq.n	800b534 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b43a:	6878      	ldr	r0, [r7, #4]
 800b43c:	4798      	blx	r3
        }
        return;
 800b43e:	e079      	b.n	800b534 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d01d      	beq.n	800b48a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d10d      	bne.n	800b478 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b460:	2b00      	cmp	r3, #0
 800b462:	d031      	beq.n	800b4c8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b468:	6878      	ldr	r0, [r7, #4]
 800b46a:	4798      	blx	r3
 800b46c:	e02c      	b.n	800b4c8 <HAL_DMA_IRQHandler+0x2a0>
 800b46e:	bf00      	nop
 800b470:	10000050 	.word	0x10000050
 800b474:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d023      	beq.n	800b4c8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b484:	6878      	ldr	r0, [r7, #4]
 800b486:	4798      	blx	r3
 800b488:	e01e      	b.n	800b4c8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b494:	2b00      	cmp	r3, #0
 800b496:	d10f      	bne.n	800b4b8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	681a      	ldr	r2, [r3, #0]
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	f022 0210 	bic.w	r2, r2, #16
 800b4a6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	2201      	movs	r2, #1
 800b4ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	2200      	movs	r2, #0
 800b4b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d003      	beq.n	800b4c8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4c4:	6878      	ldr	r0, [r7, #4]
 800b4c6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d032      	beq.n	800b536 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4d4:	f003 0301 	and.w	r3, r3, #1
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d022      	beq.n	800b522 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	2205      	movs	r2, #5
 800b4e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	681a      	ldr	r2, [r3, #0]
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	f022 0201 	bic.w	r2, r2, #1
 800b4f2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800b4f4:	68bb      	ldr	r3, [r7, #8]
 800b4f6:	3301      	adds	r3, #1
 800b4f8:	60bb      	str	r3, [r7, #8]
 800b4fa:	697a      	ldr	r2, [r7, #20]
 800b4fc:	429a      	cmp	r2, r3
 800b4fe:	d307      	bcc.n	800b510 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	f003 0301 	and.w	r3, r3, #1
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d1f2      	bne.n	800b4f4 <HAL_DMA_IRQHandler+0x2cc>
 800b50e:	e000      	b.n	800b512 <HAL_DMA_IRQHandler+0x2ea>
          break;
 800b510:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	2201      	movs	r2, #1
 800b516:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	2200      	movs	r2, #0
 800b51e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b526:	2b00      	cmp	r3, #0
 800b528:	d005      	beq.n	800b536 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b52e:	6878      	ldr	r0, [r7, #4]
 800b530:	4798      	blx	r3
 800b532:	e000      	b.n	800b536 <HAL_DMA_IRQHandler+0x30e>
        return;
 800b534:	bf00      	nop
    }
  }
}
 800b536:	3718      	adds	r7, #24
 800b538:	46bd      	mov	sp, r7
 800b53a:	bd80      	pop	{r7, pc}

0800b53c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b53c:	b480      	push	{r7}
 800b53e:	b085      	sub	sp, #20
 800b540:	af00      	add	r7, sp, #0
 800b542:	60f8      	str	r0, [r7, #12]
 800b544:	60b9      	str	r1, [r7, #8]
 800b546:	607a      	str	r2, [r7, #4]
 800b548:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	681a      	ldr	r2, [r3, #0]
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b558:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	683a      	ldr	r2, [r7, #0]
 800b560:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	689b      	ldr	r3, [r3, #8]
 800b566:	2b40      	cmp	r3, #64	; 0x40
 800b568:	d108      	bne.n	800b57c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	687a      	ldr	r2, [r7, #4]
 800b570:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	68ba      	ldr	r2, [r7, #8]
 800b578:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800b57a:	e007      	b.n	800b58c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	68ba      	ldr	r2, [r7, #8]
 800b582:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	687a      	ldr	r2, [r7, #4]
 800b58a:	60da      	str	r2, [r3, #12]
}
 800b58c:	bf00      	nop
 800b58e:	3714      	adds	r7, #20
 800b590:	46bd      	mov	sp, r7
 800b592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b596:	4770      	bx	lr

0800b598 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800b598:	b480      	push	{r7}
 800b59a:	b085      	sub	sp, #20
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	b2db      	uxtb	r3, r3
 800b5a6:	3b10      	subs	r3, #16
 800b5a8:	4a14      	ldr	r2, [pc, #80]	; (800b5fc <DMA_CalcBaseAndBitshift+0x64>)
 800b5aa:	fba2 2303 	umull	r2, r3, r2, r3
 800b5ae:	091b      	lsrs	r3, r3, #4
 800b5b0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800b5b2:	4a13      	ldr	r2, [pc, #76]	; (800b600 <DMA_CalcBaseAndBitshift+0x68>)
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	4413      	add	r3, r2
 800b5b8:	781b      	ldrb	r3, [r3, #0]
 800b5ba:	461a      	mov	r2, r3
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	2b03      	cmp	r3, #3
 800b5c4:	d909      	bls.n	800b5da <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800b5ce:	f023 0303 	bic.w	r3, r3, #3
 800b5d2:	1d1a      	adds	r2, r3, #4
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	659a      	str	r2, [r3, #88]	; 0x58
 800b5d8:	e007      	b.n	800b5ea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800b5e2:	f023 0303 	bic.w	r3, r3, #3
 800b5e6:	687a      	ldr	r2, [r7, #4]
 800b5e8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	3714      	adds	r7, #20
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f8:	4770      	bx	lr
 800b5fa:	bf00      	nop
 800b5fc:	aaaaaaab 	.word	0xaaaaaaab
 800b600:	0802e340 	.word	0x0802e340

0800b604 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800b604:	b480      	push	{r7}
 800b606:	b085      	sub	sp, #20
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b60c:	2300      	movs	r3, #0
 800b60e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b614:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	699b      	ldr	r3, [r3, #24]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d11f      	bne.n	800b65e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800b61e:	68bb      	ldr	r3, [r7, #8]
 800b620:	2b03      	cmp	r3, #3
 800b622:	d856      	bhi.n	800b6d2 <DMA_CheckFifoParam+0xce>
 800b624:	a201      	add	r2, pc, #4	; (adr r2, 800b62c <DMA_CheckFifoParam+0x28>)
 800b626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b62a:	bf00      	nop
 800b62c:	0800b63d 	.word	0x0800b63d
 800b630:	0800b64f 	.word	0x0800b64f
 800b634:	0800b63d 	.word	0x0800b63d
 800b638:	0800b6d3 	.word	0x0800b6d3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b640:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b644:	2b00      	cmp	r3, #0
 800b646:	d046      	beq.n	800b6d6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800b648:	2301      	movs	r3, #1
 800b64a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b64c:	e043      	b.n	800b6d6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b652:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800b656:	d140      	bne.n	800b6da <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800b658:	2301      	movs	r3, #1
 800b65a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b65c:	e03d      	b.n	800b6da <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	699b      	ldr	r3, [r3, #24]
 800b662:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b666:	d121      	bne.n	800b6ac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800b668:	68bb      	ldr	r3, [r7, #8]
 800b66a:	2b03      	cmp	r3, #3
 800b66c:	d837      	bhi.n	800b6de <DMA_CheckFifoParam+0xda>
 800b66e:	a201      	add	r2, pc, #4	; (adr r2, 800b674 <DMA_CheckFifoParam+0x70>)
 800b670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b674:	0800b685 	.word	0x0800b685
 800b678:	0800b68b 	.word	0x0800b68b
 800b67c:	0800b685 	.word	0x0800b685
 800b680:	0800b69d 	.word	0x0800b69d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800b684:	2301      	movs	r3, #1
 800b686:	73fb      	strb	r3, [r7, #15]
      break;
 800b688:	e030      	b.n	800b6ec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b68e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b692:	2b00      	cmp	r3, #0
 800b694:	d025      	beq.n	800b6e2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800b696:	2301      	movs	r3, #1
 800b698:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b69a:	e022      	b.n	800b6e2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6a0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800b6a4:	d11f      	bne.n	800b6e6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800b6a6:	2301      	movs	r3, #1
 800b6a8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800b6aa:	e01c      	b.n	800b6e6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800b6ac:	68bb      	ldr	r3, [r7, #8]
 800b6ae:	2b02      	cmp	r3, #2
 800b6b0:	d903      	bls.n	800b6ba <DMA_CheckFifoParam+0xb6>
 800b6b2:	68bb      	ldr	r3, [r7, #8]
 800b6b4:	2b03      	cmp	r3, #3
 800b6b6:	d003      	beq.n	800b6c0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800b6b8:	e018      	b.n	800b6ec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800b6ba:	2301      	movs	r3, #1
 800b6bc:	73fb      	strb	r3, [r7, #15]
      break;
 800b6be:	e015      	b.n	800b6ec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d00e      	beq.n	800b6ea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800b6cc:	2301      	movs	r3, #1
 800b6ce:	73fb      	strb	r3, [r7, #15]
      break;
 800b6d0:	e00b      	b.n	800b6ea <DMA_CheckFifoParam+0xe6>
      break;
 800b6d2:	bf00      	nop
 800b6d4:	e00a      	b.n	800b6ec <DMA_CheckFifoParam+0xe8>
      break;
 800b6d6:	bf00      	nop
 800b6d8:	e008      	b.n	800b6ec <DMA_CheckFifoParam+0xe8>
      break;
 800b6da:	bf00      	nop
 800b6dc:	e006      	b.n	800b6ec <DMA_CheckFifoParam+0xe8>
      break;
 800b6de:	bf00      	nop
 800b6e0:	e004      	b.n	800b6ec <DMA_CheckFifoParam+0xe8>
      break;
 800b6e2:	bf00      	nop
 800b6e4:	e002      	b.n	800b6ec <DMA_CheckFifoParam+0xe8>
      break;   
 800b6e6:	bf00      	nop
 800b6e8:	e000      	b.n	800b6ec <DMA_CheckFifoParam+0xe8>
      break;
 800b6ea:	bf00      	nop
    }
  } 
  
  return status; 
 800b6ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	3714      	adds	r7, #20
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f8:	4770      	bx	lr
 800b6fa:	bf00      	nop

0800b6fc <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b088      	sub	sp, #32
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 800b704:	2300      	movs	r3, #0
 800b706:	61fb      	str	r3, [r7, #28]
 800b708:	2300      	movs	r3, #0
 800b70a:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 800b70c:	4ba1      	ldr	r3, [pc, #644]	; (800b994 <HAL_ETH_Init+0x298>)
 800b70e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 800b710:	2300      	movs	r3, #0
 800b712:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 800b714:	2300      	movs	r3, #0
 800b716:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d101      	bne.n	800b722 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800b71e:	2301      	movs	r3, #1
 800b720:	e182      	b.n	800ba28 <HAL_ETH_Init+0x32c>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b728:	b2db      	uxtb	r3, r3
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d106      	bne.n	800b73c <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	2200      	movs	r2, #0
 800b732:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800b736:	6878      	ldr	r0, [r7, #4]
 800b738:	f005 fd8c 	bl	8011254 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b73c:	2300      	movs	r3, #0
 800b73e:	60bb      	str	r3, [r7, #8]
 800b740:	4b95      	ldr	r3, [pc, #596]	; (800b998 <HAL_ETH_Init+0x29c>)
 800b742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b744:	4a94      	ldr	r2, [pc, #592]	; (800b998 <HAL_ETH_Init+0x29c>)
 800b746:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b74a:	6453      	str	r3, [r2, #68]	; 0x44
 800b74c:	4b92      	ldr	r3, [pc, #584]	; (800b998 <HAL_ETH_Init+0x29c>)
 800b74e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b750:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b754:	60bb      	str	r3, [r7, #8]
 800b756:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800b758:	4b90      	ldr	r3, [pc, #576]	; (800b99c <HAL_ETH_Init+0x2a0>)
 800b75a:	685b      	ldr	r3, [r3, #4]
 800b75c:	4a8f      	ldr	r2, [pc, #572]	; (800b99c <HAL_ETH_Init+0x2a0>)
 800b75e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800b762:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800b764:	4b8d      	ldr	r3, [pc, #564]	; (800b99c <HAL_ETH_Init+0x2a0>)
 800b766:	685a      	ldr	r2, [r3, #4]
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	6a1b      	ldr	r3, [r3, #32]
 800b76c:	498b      	ldr	r1, [pc, #556]	; (800b99c <HAL_ETH_Init+0x2a0>)
 800b76e:	4313      	orrs	r3, r2
 800b770:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	687a      	ldr	r2, [r7, #4]
 800b77e:	6812      	ldr	r2, [r2, #0]
 800b780:	f043 0301 	orr.w	r3, r3, #1
 800b784:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b788:	6013      	str	r3, [r2, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800b78a:	f7ff fa73 	bl	800ac74 <HAL_GetTick>
 800b78e:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800b790:	e011      	b.n	800b7b6 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800b792:	f7ff fa6f 	bl	800ac74 <HAL_GetTick>
 800b796:	4602      	mov	r2, r0
 800b798:	697b      	ldr	r3, [r7, #20]
 800b79a:	1ad3      	subs	r3, r2, r3
 800b79c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800b7a0:	d909      	bls.n	800b7b6 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	2203      	movs	r2, #3
 800b7a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	2200      	movs	r2, #0
 800b7ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 800b7b2:	2303      	movs	r3, #3
 800b7b4:	e138      	b.n	800ba28 <HAL_ETH_Init+0x32c>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	f003 0301 	and.w	r3, r3, #1
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d1e4      	bne.n	800b792 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	691b      	ldr	r3, [r3, #16]
 800b7ce:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 800b7d0:	69fb      	ldr	r3, [r7, #28]
 800b7d2:	f023 031c 	bic.w	r3, r3, #28
 800b7d6:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800b7d8:	f002 fb92 	bl	800df00 <HAL_RCC_GetHCLKFreq>
 800b7dc:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800b7de:	69bb      	ldr	r3, [r7, #24]
 800b7e0:	4a6f      	ldr	r2, [pc, #444]	; (800b9a0 <HAL_ETH_Init+0x2a4>)
 800b7e2:	4293      	cmp	r3, r2
 800b7e4:	d908      	bls.n	800b7f8 <HAL_ETH_Init+0xfc>
 800b7e6:	69bb      	ldr	r3, [r7, #24]
 800b7e8:	4a6e      	ldr	r2, [pc, #440]	; (800b9a4 <HAL_ETH_Init+0x2a8>)
 800b7ea:	4293      	cmp	r3, r2
 800b7ec:	d804      	bhi.n	800b7f8 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800b7ee:	69fb      	ldr	r3, [r7, #28]
 800b7f0:	f043 0308 	orr.w	r3, r3, #8
 800b7f4:	61fb      	str	r3, [r7, #28]
 800b7f6:	e027      	b.n	800b848 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 800b7f8:	69bb      	ldr	r3, [r7, #24]
 800b7fa:	4a6a      	ldr	r2, [pc, #424]	; (800b9a4 <HAL_ETH_Init+0x2a8>)
 800b7fc:	4293      	cmp	r3, r2
 800b7fe:	d908      	bls.n	800b812 <HAL_ETH_Init+0x116>
 800b800:	69bb      	ldr	r3, [r7, #24]
 800b802:	4a64      	ldr	r2, [pc, #400]	; (800b994 <HAL_ETH_Init+0x298>)
 800b804:	4293      	cmp	r3, r2
 800b806:	d204      	bcs.n	800b812 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800b808:	69fb      	ldr	r3, [r7, #28]
 800b80a:	f043 030c 	orr.w	r3, r3, #12
 800b80e:	61fb      	str	r3, [r7, #28]
 800b810:	e01a      	b.n	800b848 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 800b812:	69bb      	ldr	r3, [r7, #24]
 800b814:	4a5f      	ldr	r2, [pc, #380]	; (800b994 <HAL_ETH_Init+0x298>)
 800b816:	4293      	cmp	r3, r2
 800b818:	d303      	bcc.n	800b822 <HAL_ETH_Init+0x126>
 800b81a:	69bb      	ldr	r3, [r7, #24]
 800b81c:	4a62      	ldr	r2, [pc, #392]	; (800b9a8 <HAL_ETH_Init+0x2ac>)
 800b81e:	4293      	cmp	r3, r2
 800b820:	d911      	bls.n	800b846 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 800b822:	69bb      	ldr	r3, [r7, #24]
 800b824:	4a60      	ldr	r2, [pc, #384]	; (800b9a8 <HAL_ETH_Init+0x2ac>)
 800b826:	4293      	cmp	r3, r2
 800b828:	d908      	bls.n	800b83c <HAL_ETH_Init+0x140>
 800b82a:	69bb      	ldr	r3, [r7, #24]
 800b82c:	4a5f      	ldr	r2, [pc, #380]	; (800b9ac <HAL_ETH_Init+0x2b0>)
 800b82e:	4293      	cmp	r3, r2
 800b830:	d804      	bhi.n	800b83c <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800b832:	69fb      	ldr	r3, [r7, #28]
 800b834:	f043 0304 	orr.w	r3, r3, #4
 800b838:	61fb      	str	r3, [r7, #28]
 800b83a:	e005      	b.n	800b848 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 800b83c:	69fb      	ldr	r3, [r7, #28]
 800b83e:	f043 0310 	orr.w	r3, r3, #16
 800b842:	61fb      	str	r3, [r7, #28]
 800b844:	e000      	b.n	800b848 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800b846:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	69fa      	ldr	r2, [r7, #28]
 800b84e:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 800b850:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800b854:	2100      	movs	r1, #0
 800b856:	6878      	ldr	r0, [r7, #4]
 800b858:	f000 fc10 	bl	800c07c <HAL_ETH_WritePHYRegister>
 800b85c:	4603      	mov	r3, r0
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d00b      	beq.n	800b87a <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800b862:	2301      	movs	r3, #1
 800b864:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800b866:	6939      	ldr	r1, [r7, #16]
 800b868:	6878      	ldr	r0, [r7, #4]
 800b86a:	f000 fdc5 	bl	800c3f8 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	2201      	movs	r2, #1
 800b872:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 800b876:	2301      	movs	r3, #1
 800b878:	e0d6      	b.n	800ba28 <HAL_ETH_Init+0x32c>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800b87a:	20ff      	movs	r0, #255	; 0xff
 800b87c:	f7ff fa06 	bl	800ac8c <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	685b      	ldr	r3, [r3, #4]
 800b884:	2b00      	cmp	r3, #0
 800b886:	f000 80a4 	beq.w	800b9d2 <HAL_ETH_Init+0x2d6>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800b88a:	f7ff f9f3 	bl	800ac74 <HAL_GetTick>
 800b88e:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800b890:	f107 030c 	add.w	r3, r7, #12
 800b894:	461a      	mov	r2, r3
 800b896:	2101      	movs	r1, #1
 800b898:	6878      	ldr	r0, [r7, #4]
 800b89a:	f000 fb87 	bl	800bfac <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800b89e:	f7ff f9e9 	bl	800ac74 <HAL_GetTick>
 800b8a2:	4602      	mov	r2, r0
 800b8a4:	697b      	ldr	r3, [r7, #20]
 800b8a6:	1ad3      	subs	r3, r2, r3
 800b8a8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b8ac:	4293      	cmp	r3, r2
 800b8ae:	d90f      	bls.n	800b8d0 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800b8b0:	2301      	movs	r3, #1
 800b8b2:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800b8b4:	6939      	ldr	r1, [r7, #16]
 800b8b6:	6878      	ldr	r0, [r7, #4]
 800b8b8:	f000 fd9e 	bl	800c3f8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	2201      	movs	r2, #1
 800b8c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	2200      	movs	r2, #0
 800b8c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800b8cc:	2303      	movs	r3, #3
 800b8ce:	e0ab      	b.n	800ba28 <HAL_ETH_Init+0x32c>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	f003 0304 	and.w	r3, r3, #4
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d0da      	beq.n	800b890 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800b8da:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b8de:	2100      	movs	r1, #0
 800b8e0:	6878      	ldr	r0, [r7, #4]
 800b8e2:	f000 fbcb 	bl	800c07c <HAL_ETH_WritePHYRegister>
 800b8e6:	4603      	mov	r3, r0
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d00b      	beq.n	800b904 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800b8ec:	2301      	movs	r3, #1
 800b8ee:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800b8f0:	6939      	ldr	r1, [r7, #16]
 800b8f2:	6878      	ldr	r0, [r7, #4]
 800b8f4:	f000 fd80 	bl	800c3f8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	2201      	movs	r2, #1
 800b8fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800b900:	2301      	movs	r3, #1
 800b902:	e091      	b.n	800ba28 <HAL_ETH_Init+0x32c>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 800b904:	f7ff f9b6 	bl	800ac74 <HAL_GetTick>
 800b908:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800b90a:	f107 030c 	add.w	r3, r7, #12
 800b90e:	461a      	mov	r2, r3
 800b910:	2101      	movs	r1, #1
 800b912:	6878      	ldr	r0, [r7, #4]
 800b914:	f000 fb4a 	bl	800bfac <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 800b918:	f7ff f9ac 	bl	800ac74 <HAL_GetTick>
 800b91c:	4602      	mov	r2, r0
 800b91e:	697b      	ldr	r3, [r7, #20]
 800b920:	1ad3      	subs	r3, r2, r3
 800b922:	f241 3288 	movw	r2, #5000	; 0x1388
 800b926:	4293      	cmp	r3, r2
 800b928:	d90f      	bls.n	800b94a <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800b92a:	2301      	movs	r3, #1
 800b92c:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800b92e:	6939      	ldr	r1, [r7, #16]
 800b930:	6878      	ldr	r0, [r7, #4]
 800b932:	f000 fd61 	bl	800c3f8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	2201      	movs	r2, #1
 800b93a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	2200      	movs	r2, #0
 800b942:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800b946:	2303      	movs	r3, #3
 800b948:	e06e      	b.n	800ba28 <HAL_ETH_Init+0x32c>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	f003 0320 	and.w	r3, r3, #32
 800b950:	2b00      	cmp	r3, #0
 800b952:	d0da      	beq.n	800b90a <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 800b954:	f107 030c 	add.w	r3, r7, #12
 800b958:	461a      	mov	r2, r3
 800b95a:	2110      	movs	r1, #16
 800b95c:	6878      	ldr	r0, [r7, #4]
 800b95e:	f000 fb25 	bl	800bfac <HAL_ETH_ReadPHYRegister>
 800b962:	4603      	mov	r3, r0
 800b964:	2b00      	cmp	r3, #0
 800b966:	d00b      	beq.n	800b980 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800b968:	2301      	movs	r3, #1
 800b96a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800b96c:	6939      	ldr	r1, [r7, #16]
 800b96e:	6878      	ldr	r0, [r7, #4]
 800b970:	f000 fd42 	bl	800c3f8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	2201      	movs	r2, #1
 800b978:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800b97c:	2301      	movs	r3, #1
 800b97e:	e053      	b.n	800ba28 <HAL_ETH_Init+0x32c>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	f003 0304 	and.w	r3, r3, #4
 800b986:	2b00      	cmp	r3, #0
 800b988:	d012      	beq.n	800b9b0 <HAL_ETH_Init+0x2b4>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b990:	60da      	str	r2, [r3, #12]
 800b992:	e010      	b.n	800b9b6 <HAL_ETH_Init+0x2ba>
 800b994:	03938700 	.word	0x03938700
 800b998:	40023800 	.word	0x40023800
 800b99c:	40013800 	.word	0x40013800
 800b9a0:	01312cff 	.word	0x01312cff
 800b9a4:	02160ebf 	.word	0x02160ebf
 800b9a8:	05f5e0ff 	.word	0x05f5e0ff
 800b9ac:	08f0d17f 	.word	0x08f0d17f
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	f003 0302 	and.w	r3, r3, #2
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d003      	beq.n	800b9c8 <HAL_ETH_Init+0x2cc>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	609a      	str	r2, [r3, #8]
 800b9c6:	e026      	b.n	800ba16 <HAL_ETH_Init+0x31a>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b9ce:	609a      	str	r2, [r3, #8]
 800b9d0:	e021      	b.n	800ba16 <HAL_ETH_Init+0x31a>
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	68db      	ldr	r3, [r3, #12]
 800b9d6:	08db      	lsrs	r3, r3, #3
 800b9d8:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	689b      	ldr	r3, [r3, #8]
 800b9de:	085b      	lsrs	r3, r3, #1
 800b9e0:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 800b9e2:	4313      	orrs	r3, r2
 800b9e4:	b29b      	uxth	r3, r3
 800b9e6:	461a      	mov	r2, r3
 800b9e8:	2100      	movs	r1, #0
 800b9ea:	6878      	ldr	r0, [r7, #4]
 800b9ec:	f000 fb46 	bl	800c07c <HAL_ETH_WritePHYRegister>
 800b9f0:	4603      	mov	r3, r0
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d00b      	beq.n	800ba0e <HAL_ETH_Init+0x312>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800b9f6:	2301      	movs	r3, #1
 800b9f8:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800b9fa:	6939      	ldr	r1, [r7, #16]
 800b9fc:	6878      	ldr	r0, [r7, #4]
 800b9fe:	f000 fcfb 	bl	800c3f8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	2201      	movs	r2, #1
 800ba06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 800ba0a:	2301      	movs	r3, #1
 800ba0c:	e00c      	b.n	800ba28 <HAL_ETH_Init+0x32c>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 800ba0e:	f640 70ff 	movw	r0, #4095	; 0xfff
 800ba12:	f7ff f93b 	bl	800ac8c <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 800ba16:	6939      	ldr	r1, [r7, #16]
 800ba18:	6878      	ldr	r0, [r7, #4]
 800ba1a:	f000 fced 	bl	800c3f8 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	2201      	movs	r2, #1
 800ba22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800ba26:	2300      	movs	r3, #0
}
 800ba28:	4618      	mov	r0, r3
 800ba2a:	3720      	adds	r7, #32
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	bd80      	pop	{r7, pc}

0800ba30 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 800ba30:	b480      	push	{r7}
 800ba32:	b087      	sub	sp, #28
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	60f8      	str	r0, [r7, #12]
 800ba38:	60b9      	str	r1, [r7, #8]
 800ba3a:	607a      	str	r2, [r7, #4]
 800ba3c:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 800ba3e:	2300      	movs	r3, #0
 800ba40:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ba48:	2b01      	cmp	r3, #1
 800ba4a:	d101      	bne.n	800ba50 <HAL_ETH_DMATxDescListInit+0x20>
 800ba4c:	2302      	movs	r3, #2
 800ba4e:	e051      	b.n	800baf4 <HAL_ETH_DMATxDescListInit+0xc4>
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	2201      	movs	r2, #1
 800ba54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	2202      	movs	r2, #2
 800ba5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	68ba      	ldr	r2, [r7, #8]
 800ba64:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 800ba66:	2300      	movs	r3, #0
 800ba68:	617b      	str	r3, [r7, #20]
 800ba6a:	e030      	b.n	800bace <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 800ba6c:	697b      	ldr	r3, [r7, #20]
 800ba6e:	015b      	lsls	r3, r3, #5
 800ba70:	68ba      	ldr	r2, [r7, #8]
 800ba72:	4413      	add	r3, r2
 800ba74:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800ba76:	693b      	ldr	r3, [r7, #16]
 800ba78:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800ba7c:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800ba7e:	697b      	ldr	r3, [r7, #20]
 800ba80:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800ba84:	fb02 f303 	mul.w	r3, r2, r3
 800ba88:	687a      	ldr	r2, [r7, #4]
 800ba8a:	4413      	add	r3, r2
 800ba8c:	461a      	mov	r2, r3
 800ba8e:	693b      	ldr	r3, [r7, #16]
 800ba90:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	69db      	ldr	r3, [r3, #28]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d105      	bne.n	800baa6 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800ba9a:	693b      	ldr	r3, [r7, #16]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800baa2:	693b      	ldr	r3, [r7, #16]
 800baa4:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 800baa6:	683b      	ldr	r3, [r7, #0]
 800baa8:	3b01      	subs	r3, #1
 800baaa:	697a      	ldr	r2, [r7, #20]
 800baac:	429a      	cmp	r2, r3
 800baae:	d208      	bcs.n	800bac2 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 800bab0:	697b      	ldr	r3, [r7, #20]
 800bab2:	3301      	adds	r3, #1
 800bab4:	015b      	lsls	r3, r3, #5
 800bab6:	68ba      	ldr	r2, [r7, #8]
 800bab8:	4413      	add	r3, r2
 800baba:	461a      	mov	r2, r3
 800babc:	693b      	ldr	r3, [r7, #16]
 800babe:	60da      	str	r2, [r3, #12]
 800bac0:	e002      	b.n	800bac8 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 800bac2:	68ba      	ldr	r2, [r7, #8]
 800bac4:	693b      	ldr	r3, [r7, #16]
 800bac6:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 800bac8:	697b      	ldr	r3, [r7, #20]
 800baca:	3301      	adds	r3, #1
 800bacc:	617b      	str	r3, [r7, #20]
 800bace:	697a      	ldr	r2, [r7, #20]
 800bad0:	683b      	ldr	r3, [r7, #0]
 800bad2:	429a      	cmp	r2, r3
 800bad4:	d3ca      	bcc.n	800ba6c <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	681a      	ldr	r2, [r3, #0]
 800bada:	68bb      	ldr	r3, [r7, #8]
 800badc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800bae0:	6113      	str	r3, [r2, #16]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	2201      	movs	r2, #1
 800bae6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	2200      	movs	r2, #0
 800baee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800baf2:	2300      	movs	r3, #0
}
 800baf4:	4618      	mov	r0, r3
 800baf6:	371c      	adds	r7, #28
 800baf8:	46bd      	mov	sp, r7
 800bafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bafe:	4770      	bx	lr

0800bb00 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 800bb00:	b480      	push	{r7}
 800bb02:	b087      	sub	sp, #28
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	60f8      	str	r0, [r7, #12]
 800bb08:	60b9      	str	r1, [r7, #8]
 800bb0a:	607a      	str	r2, [r7, #4]
 800bb0c:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 800bb0e:	2300      	movs	r3, #0
 800bb10:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bb18:	2b01      	cmp	r3, #1
 800bb1a:	d101      	bne.n	800bb20 <HAL_ETH_DMARxDescListInit+0x20>
 800bb1c:	2302      	movs	r3, #2
 800bb1e:	e055      	b.n	800bbcc <HAL_ETH_DMARxDescListInit+0xcc>
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	2201      	movs	r2, #1
 800bb24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	2202      	movs	r2, #2
 800bb2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	68ba      	ldr	r2, [r7, #8]
 800bb34:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 800bb36:	2300      	movs	r3, #0
 800bb38:	617b      	str	r3, [r7, #20]
 800bb3a:	e034      	b.n	800bba6 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 800bb3c:	697b      	ldr	r3, [r7, #20]
 800bb3e:	015b      	lsls	r3, r3, #5
 800bb40:	68ba      	ldr	r2, [r7, #8]
 800bb42:	4413      	add	r3, r2
 800bb44:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 800bb46:	693b      	ldr	r3, [r7, #16]
 800bb48:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bb4c:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 800bb4e:	693b      	ldr	r3, [r7, #16]
 800bb50:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800bb54:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 800bb56:	697b      	ldr	r3, [r7, #20]
 800bb58:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800bb5c:	fb02 f303 	mul.w	r3, r2, r3
 800bb60:	687a      	ldr	r2, [r7, #4]
 800bb62:	4413      	add	r3, r2
 800bb64:	461a      	mov	r2, r3
 800bb66:	693b      	ldr	r3, [r7, #16]
 800bb68:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	699b      	ldr	r3, [r3, #24]
 800bb6e:	2b01      	cmp	r3, #1
 800bb70:	d105      	bne.n	800bb7e <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 800bb72:	693b      	ldr	r3, [r7, #16]
 800bb74:	685b      	ldr	r3, [r3, #4]
 800bb76:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800bb7a:	693b      	ldr	r3, [r7, #16]
 800bb7c:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 800bb7e:	683b      	ldr	r3, [r7, #0]
 800bb80:	3b01      	subs	r3, #1
 800bb82:	697a      	ldr	r2, [r7, #20]
 800bb84:	429a      	cmp	r2, r3
 800bb86:	d208      	bcs.n	800bb9a <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 800bb88:	697b      	ldr	r3, [r7, #20]
 800bb8a:	3301      	adds	r3, #1
 800bb8c:	015b      	lsls	r3, r3, #5
 800bb8e:	68ba      	ldr	r2, [r7, #8]
 800bb90:	4413      	add	r3, r2
 800bb92:	461a      	mov	r2, r3
 800bb94:	693b      	ldr	r3, [r7, #16]
 800bb96:	60da      	str	r2, [r3, #12]
 800bb98:	e002      	b.n	800bba0 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 800bb9a:	68ba      	ldr	r2, [r7, #8]
 800bb9c:	693b      	ldr	r3, [r7, #16]
 800bb9e:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 800bba0:	697b      	ldr	r3, [r7, #20]
 800bba2:	3301      	adds	r3, #1
 800bba4:	617b      	str	r3, [r7, #20]
 800bba6:	697a      	ldr	r2, [r7, #20]
 800bba8:	683b      	ldr	r3, [r7, #0]
 800bbaa:	429a      	cmp	r2, r3
 800bbac:	d3c6      	bcc.n	800bb3c <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	681a      	ldr	r2, [r3, #0]
 800bbb2:	68bb      	ldr	r3, [r7, #8]
 800bbb4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800bbb8:	60d3      	str	r3, [r2, #12]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	2201      	movs	r2, #1
 800bbbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	2200      	movs	r2, #0
 800bbc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800bbca:	2300      	movs	r3, #0
}
 800bbcc:	4618      	mov	r0, r3
 800bbce:	371c      	adds	r7, #28
 800bbd0:	46bd      	mov	sp, r7
 800bbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd6:	4770      	bx	lr

0800bbd8 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 800bbd8:	b480      	push	{r7}
 800bbda:	b087      	sub	sp, #28
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	6078      	str	r0, [r7, #4]
 800bbe0:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	617b      	str	r3, [r7, #20]
 800bbe6:	2300      	movs	r3, #0
 800bbe8:	60fb      	str	r3, [r7, #12]
 800bbea:	2300      	movs	r3, #0
 800bbec:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bbf4:	2b01      	cmp	r3, #1
 800bbf6:	d101      	bne.n	800bbfc <HAL_ETH_TransmitFrame+0x24>
 800bbf8:	2302      	movs	r3, #2
 800bbfa:	e0cc      	b.n	800bd96 <HAL_ETH_TransmitFrame+0x1be>
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	2201      	movs	r2, #1
 800bc00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	2202      	movs	r2, #2
 800bc08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 800bc0c:	683b      	ldr	r3, [r7, #0]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d109      	bne.n	800bc26 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	2201      	movs	r2, #1
 800bc16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	2200      	movs	r2, #0
 800bc1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 800bc22:	2301      	movs	r3, #1
 800bc24:	e0b7      	b.n	800bd96 <HAL_ETH_TransmitFrame+0x1be>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	da09      	bge.n	800bc44 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	2212      	movs	r2, #18
 800bc34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	2200      	movs	r2, #0
 800bc3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 800bc40:	2301      	movs	r3, #1
 800bc42:	e0a8      	b.n	800bd96 <HAL_ETH_TransmitFrame+0x1be>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 800bc44:	683b      	ldr	r3, [r7, #0]
 800bc46:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800bc4a:	4293      	cmp	r3, r2
 800bc4c:	d915      	bls.n	800bc7a <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800bc4e:	683b      	ldr	r3, [r7, #0]
 800bc50:	4a54      	ldr	r2, [pc, #336]	; (800bda4 <HAL_ETH_TransmitFrame+0x1cc>)
 800bc52:	fba2 2303 	umull	r2, r3, r2, r3
 800bc56:	0a9b      	lsrs	r3, r3, #10
 800bc58:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 800bc5a:	683a      	ldr	r2, [r7, #0]
 800bc5c:	4b51      	ldr	r3, [pc, #324]	; (800bda4 <HAL_ETH_TransmitFrame+0x1cc>)
 800bc5e:	fba3 1302 	umull	r1, r3, r3, r2
 800bc62:	0a9b      	lsrs	r3, r3, #10
 800bc64:	f240 51f4 	movw	r1, #1524	; 0x5f4
 800bc68:	fb01 f303 	mul.w	r3, r1, r3
 800bc6c:	1ad3      	subs	r3, r2, r3
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d005      	beq.n	800bc7e <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800bc72:	697b      	ldr	r3, [r7, #20]
 800bc74:	3301      	adds	r3, #1
 800bc76:	617b      	str	r3, [r7, #20]
 800bc78:	e001      	b.n	800bc7e <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 800bc7a:	2301      	movs	r3, #1
 800bc7c:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 800bc7e:	697b      	ldr	r3, [r7, #20]
 800bc80:	2b01      	cmp	r3, #1
 800bc82:	d11c      	bne.n	800bcbe <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc88:	681a      	ldr	r2, [r3, #0]
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc8e:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800bc92:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc98:	683a      	ldr	r2, [r7, #0]
 800bc9a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800bc9e:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bca4:	681a      	ldr	r2, [r3, #0]
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcaa:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800bcae:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcb4:	68db      	ldr	r3, [r3, #12]
 800bcb6:	461a      	mov	r2, r3
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	62da      	str	r2, [r3, #44]	; 0x2c
 800bcbc:	e04b      	b.n	800bd56 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	613b      	str	r3, [r7, #16]
 800bcc2:	e044      	b.n	800bd4e <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcc8:	681a      	ldr	r2, [r3, #0]
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcce:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800bcd2:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 800bcd4:	693b      	ldr	r3, [r7, #16]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d107      	bne.n	800bcea <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcde:	681a      	ldr	r2, [r3, #0]
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bce4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800bce8:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcee:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800bcf2:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 800bcf4:	697b      	ldr	r3, [r7, #20]
 800bcf6:	3b01      	subs	r3, #1
 800bcf8:	693a      	ldr	r2, [r7, #16]
 800bcfa:	429a      	cmp	r2, r3
 800bcfc:	d116      	bne.n	800bd2c <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd02:	681a      	ldr	r2, [r3, #0]
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd08:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800bd0c:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 800bd0e:	697b      	ldr	r3, [r7, #20]
 800bd10:	4a25      	ldr	r2, [pc, #148]	; (800bda8 <HAL_ETH_TransmitFrame+0x1d0>)
 800bd12:	fb03 f202 	mul.w	r2, r3, r2
 800bd16:	683b      	ldr	r3, [r7, #0]
 800bd18:	4413      	add	r3, r2
 800bd1a:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800bd1e:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd24:	68fa      	ldr	r2, [r7, #12]
 800bd26:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800bd2a:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd30:	681a      	ldr	r2, [r3, #0]
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd36:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800bd3a:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd40:	68db      	ldr	r3, [r3, #12]
 800bd42:	461a      	mov	r2, r3
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 800bd48:	693b      	ldr	r3, [r7, #16]
 800bd4a:	3301      	adds	r3, #1
 800bd4c:	613b      	str	r3, [r7, #16]
 800bd4e:	693a      	ldr	r2, [r7, #16]
 800bd50:	697b      	ldr	r3, [r7, #20]
 800bd52:	429a      	cmp	r2, r3
 800bd54:	d3b6      	bcc.n	800bcc4 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd5e:	695b      	ldr	r3, [r3, #20]
 800bd60:	f003 0304 	and.w	r3, r3, #4
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d00d      	beq.n	800bd84 <HAL_ETH_TransmitFrame+0x1ac>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd70:	461a      	mov	r2, r3
 800bd72:	2304      	movs	r3, #4
 800bd74:	6153      	str	r3, [r2, #20]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd7e:	461a      	mov	r2, r3
 800bd80:	2300      	movs	r3, #0
 800bd82:	6053      	str	r3, [r2, #4]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	2201      	movs	r2, #1
 800bd88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	2200      	movs	r2, #0
 800bd90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800bd94:	2300      	movs	r3, #0
}
 800bd96:	4618      	mov	r0, r3
 800bd98:	371c      	adds	r7, #28
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda0:	4770      	bx	lr
 800bda2:	bf00      	nop
 800bda4:	ac02b00b 	.word	0xac02b00b
 800bda8:	fffffa0c 	.word	0xfffffa0c

0800bdac <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 800bdac:	b480      	push	{r7}
 800bdae:	b085      	sub	sp, #20
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bdbe:	2b01      	cmp	r3, #1
 800bdc0:	d101      	bne.n	800bdc6 <HAL_ETH_GetReceivedFrame_IT+0x1a>
 800bdc2:	2302      	movs	r3, #2
 800bdc4:	e074      	b.n	800beb0 <HAL_ETH_GetReceivedFrame_IT+0x104>
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	2201      	movs	r2, #1
 800bdca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	2202      	movs	r2, #2
 800bdd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800bdd6:	e05a      	b.n	800be8e <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	3301      	adds	r3, #1
 800bddc:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bde8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bdec:	d10d      	bne.n	800be0a <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	2201      	movs	r2, #1
 800bdfa:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be00:	68db      	ldr	r3, [r3, #12]
 800be02:	461a      	mov	r2, r3
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	629a      	str	r2, [r3, #40]	; 0x28
 800be08:	e041      	b.n	800be8e <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800be14:	2b00      	cmp	r3, #0
 800be16:	d10b      	bne.n	800be30 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be1c:	1c5a      	adds	r2, r3, #1
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be26:	68db      	ldr	r3, [r3, #12]
 800be28:	461a      	mov	r2, r3
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	629a      	str	r2, [r3, #40]	; 0x28
 800be2e:	e02e      	b.n	800be8e <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be3c:	1c5a      	adds	r2, r3, #1
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be46:	2b01      	cmp	r3, #1
 800be48:	d103      	bne.n	800be52 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	0c1b      	lsrs	r3, r3, #16
 800be5a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800be5e:	1f1a      	subs	r2, r3, #4
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be68:	689a      	ldr	r2, [r3, #8]
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be72:	68db      	ldr	r3, [r3, #12]
 800be74:	461a      	mov	r2, r3
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	2201      	movs	r2, #1
 800be7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	2200      	movs	r2, #0
 800be86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 800be8a:	2300      	movs	r3, #0
 800be8c:	e010      	b.n	800beb0 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	2b00      	cmp	r3, #0
 800be96:	db02      	blt.n	800be9e <HAL_ETH_GetReceivedFrame_IT+0xf2>
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	2b03      	cmp	r3, #3
 800be9c:	d99c      	bls.n	800bdd8 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	2201      	movs	r2, #1
 800bea2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	2200      	movs	r2, #0
 800beaa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 800beae:	2301      	movs	r3, #1
}
 800beb0:	4618      	mov	r0, r3
 800beb2:	3714      	adds	r7, #20
 800beb4:	46bd      	mov	sp, r7
 800beb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beba:	4770      	bx	lr

0800bebc <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 800bebc:	b580      	push	{r7, lr}
 800bebe:	b082      	sub	sp, #8
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800becc:	695b      	ldr	r3, [r3, #20]
 800bece:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bed2:	2b40      	cmp	r3, #64	; 0x40
 800bed4:	d112      	bne.n	800befc <HAL_ETH_IRQHandler+0x40>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 800bed6:	6878      	ldr	r0, [r7, #4]
 800bed8:	f005 fa6a 	bl	80113b0 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bee4:	461a      	mov	r2, r3
 800bee6:	2340      	movs	r3, #64	; 0x40
 800bee8:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	2201      	movs	r2, #1
 800beee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	2200      	movs	r2, #0
 800bef6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800befa:	e01a      	b.n	800bf32 <HAL_ETH_IRQHandler+0x76>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf04:	695b      	ldr	r3, [r3, #20]
 800bf06:	f003 0301 	and.w	r3, r3, #1
 800bf0a:	2b01      	cmp	r3, #1
 800bf0c:	d111      	bne.n	800bf32 <HAL_ETH_IRQHandler+0x76>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 800bf0e:	6878      	ldr	r0, [r7, #4]
 800bf10:	f000 f838 	bl	800bf84 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf1c:	461a      	mov	r2, r3
 800bf1e:	2301      	movs	r3, #1
 800bf20:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	2201      	movs	r2, #1
 800bf26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf3a:	461a      	mov	r2, r3
 800bf3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800bf40:	6153      	str	r3, [r2, #20]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf4a:	695b      	ldr	r3, [r3, #20]
 800bf4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bf50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bf54:	d112      	bne.n	800bf7c <HAL_ETH_IRQHandler+0xc0>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 800bf56:	6878      	ldr	r0, [r7, #4]
 800bf58:	f000 f81e 	bl	800bf98 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf64:	461a      	mov	r2, r3
 800bf66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bf6a:	6153      	str	r3, [r2, #20]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	2201      	movs	r2, #1
 800bf70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	2200      	movs	r2, #0
 800bf78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 800bf7c:	bf00      	nop
 800bf7e:	3708      	adds	r7, #8
 800bf80:	46bd      	mov	sp, r7
 800bf82:	bd80      	pop	{r7, pc}

0800bf84 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 800bf84:	b480      	push	{r7}
 800bf86:	b083      	sub	sp, #12
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 800bf8c:	bf00      	nop
 800bf8e:	370c      	adds	r7, #12
 800bf90:	46bd      	mov	sp, r7
 800bf92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf96:	4770      	bx	lr

0800bf98 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 800bf98:	b480      	push	{r7}
 800bf9a:	b083      	sub	sp, #12
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 800bfa0:	bf00      	nop
 800bfa2:	370c      	adds	r7, #12
 800bfa4:	46bd      	mov	sp, r7
 800bfa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfaa:	4770      	bx	lr

0800bfac <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 800bfac:	b580      	push	{r7, lr}
 800bfae:	b086      	sub	sp, #24
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	60f8      	str	r0, [r7, #12]
 800bfb4:	460b      	mov	r3, r1
 800bfb6:	607a      	str	r2, [r7, #4]
 800bfb8:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 800bfba:	2300      	movs	r3, #0
 800bfbc:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bfc8:	b2db      	uxtb	r3, r3
 800bfca:	2b82      	cmp	r3, #130	; 0x82
 800bfcc:	d101      	bne.n	800bfd2 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 800bfce:	2302      	movs	r3, #2
 800bfd0:	e050      	b.n	800c074 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	2282      	movs	r2, #130	; 0x82
 800bfd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	691b      	ldr	r3, [r3, #16]
 800bfe0:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800bfe2:	697b      	ldr	r3, [r7, #20]
 800bfe4:	f003 031c 	and.w	r3, r3, #28
 800bfe8:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	8a1b      	ldrh	r3, [r3, #16]
 800bfee:	02db      	lsls	r3, r3, #11
 800bff0:	b29b      	uxth	r3, r3
 800bff2:	697a      	ldr	r2, [r7, #20]
 800bff4:	4313      	orrs	r3, r2
 800bff6:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800bff8:	897b      	ldrh	r3, [r7, #10]
 800bffa:	019b      	lsls	r3, r3, #6
 800bffc:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800c000:	697a      	ldr	r2, [r7, #20]
 800c002:	4313      	orrs	r3, r2
 800c004:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800c006:	697b      	ldr	r3, [r7, #20]
 800c008:	f023 0302 	bic.w	r3, r3, #2
 800c00c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 800c00e:	697b      	ldr	r3, [r7, #20]
 800c010:	f043 0301 	orr.w	r3, r3, #1
 800c014:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	697a      	ldr	r2, [r7, #20]
 800c01c:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800c01e:	f7fe fe29 	bl	800ac74 <HAL_GetTick>
 800c022:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800c024:	e015      	b.n	800c052 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800c026:	f7fe fe25 	bl	800ac74 <HAL_GetTick>
 800c02a:	4602      	mov	r2, r0
 800c02c:	693b      	ldr	r3, [r7, #16]
 800c02e:	1ad3      	subs	r3, r2, r3
 800c030:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c034:	d309      	bcc.n	800c04a <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	2201      	movs	r2, #1
 800c03a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	2200      	movs	r2, #0
 800c042:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800c046:	2303      	movs	r3, #3
 800c048:	e014      	b.n	800c074 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	691b      	ldr	r3, [r3, #16]
 800c050:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800c052:	697b      	ldr	r3, [r7, #20]
 800c054:	f003 0301 	and.w	r3, r3, #1
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d1e4      	bne.n	800c026 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	695b      	ldr	r3, [r3, #20]
 800c062:	b29b      	uxth	r3, r3
 800c064:	461a      	mov	r2, r3
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	2201      	movs	r2, #1
 800c06e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800c072:	2300      	movs	r3, #0
}
 800c074:	4618      	mov	r0, r3
 800c076:	3718      	adds	r7, #24
 800c078:	46bd      	mov	sp, r7
 800c07a:	bd80      	pop	{r7, pc}

0800c07c <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 800c07c:	b580      	push	{r7, lr}
 800c07e:	b086      	sub	sp, #24
 800c080:	af00      	add	r7, sp, #0
 800c082:	60f8      	str	r0, [r7, #12]
 800c084:	460b      	mov	r3, r1
 800c086:	607a      	str	r2, [r7, #4]
 800c088:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 800c08a:	2300      	movs	r3, #0
 800c08c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800c08e:	2300      	movs	r3, #0
 800c090:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c098:	b2db      	uxtb	r3, r3
 800c09a:	2b42      	cmp	r3, #66	; 0x42
 800c09c:	d101      	bne.n	800c0a2 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 800c09e:	2302      	movs	r3, #2
 800c0a0:	e04e      	b.n	800c140 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	2242      	movs	r2, #66	; 0x42
 800c0a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	691b      	ldr	r3, [r3, #16]
 800c0b0:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800c0b2:	697b      	ldr	r3, [r7, #20]
 800c0b4:	f003 031c 	and.w	r3, r3, #28
 800c0b8:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	8a1b      	ldrh	r3, [r3, #16]
 800c0be:	02db      	lsls	r3, r3, #11
 800c0c0:	b29b      	uxth	r3, r3
 800c0c2:	697a      	ldr	r2, [r7, #20]
 800c0c4:	4313      	orrs	r3, r2
 800c0c6:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800c0c8:	897b      	ldrh	r3, [r7, #10]
 800c0ca:	019b      	lsls	r3, r3, #6
 800c0cc:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800c0d0:	697a      	ldr	r2, [r7, #20]
 800c0d2:	4313      	orrs	r3, r2
 800c0d4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800c0d6:	697b      	ldr	r3, [r7, #20]
 800c0d8:	f043 0302 	orr.w	r3, r3, #2
 800c0dc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800c0de:	697b      	ldr	r3, [r7, #20]
 800c0e0:	f043 0301 	orr.w	r3, r3, #1
 800c0e4:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	b29a      	uxth	r2, r3
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	697a      	ldr	r2, [r7, #20]
 800c0f6:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800c0f8:	f7fe fdbc 	bl	800ac74 <HAL_GetTick>
 800c0fc:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800c0fe:	e015      	b.n	800c12c <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 800c100:	f7fe fdb8 	bl	800ac74 <HAL_GetTick>
 800c104:	4602      	mov	r2, r0
 800c106:	693b      	ldr	r3, [r7, #16]
 800c108:	1ad3      	subs	r3, r2, r3
 800c10a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c10e:	d309      	bcc.n	800c124 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	2201      	movs	r2, #1
 800c114:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	2200      	movs	r2, #0
 800c11c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800c120:	2303      	movs	r3, #3
 800c122:	e00d      	b.n	800c140 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	691b      	ldr	r3, [r3, #16]
 800c12a:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800c12c:	697b      	ldr	r3, [r7, #20]
 800c12e:	f003 0301 	and.w	r3, r3, #1
 800c132:	2b00      	cmp	r3, #0
 800c134:	d1e4      	bne.n	800c100 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	2201      	movs	r2, #1
 800c13a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 800c13e:	2300      	movs	r3, #0
}
 800c140:	4618      	mov	r0, r3
 800c142:	3718      	adds	r7, #24
 800c144:	46bd      	mov	sp, r7
 800c146:	bd80      	pop	{r7, pc}

0800c148 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 800c148:	b580      	push	{r7, lr}
 800c14a:	b082      	sub	sp, #8
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c156:	2b01      	cmp	r3, #1
 800c158:	d101      	bne.n	800c15e <HAL_ETH_Start+0x16>
 800c15a:	2302      	movs	r3, #2
 800c15c:	e01f      	b.n	800c19e <HAL_ETH_Start+0x56>
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	2201      	movs	r2, #1
 800c162:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	2202      	movs	r2, #2
 800c16a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 800c16e:	6878      	ldr	r0, [r7, #4]
 800c170:	f000 fb40 	bl	800c7f4 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 800c174:	6878      	ldr	r0, [r7, #4]
 800c176:	f000 fb77 	bl	800c868 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800c17a:	6878      	ldr	r0, [r7, #4]
 800c17c:	f000 fc06 	bl	800c98c <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 800c180:	6878      	ldr	r0, [r7, #4]
 800c182:	f000 fbab 	bl	800c8dc <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 800c186:	6878      	ldr	r0, [r7, #4]
 800c188:	f000 fbd4 	bl	800c934 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	2201      	movs	r2, #1
 800c190:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	2200      	movs	r2, #0
 800c198:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800c19c:	2300      	movs	r3, #0
}
 800c19e:	4618      	mov	r0, r3
 800c1a0:	3708      	adds	r7, #8
 800c1a2:	46bd      	mov	sp, r7
 800c1a4:	bd80      	pop	{r7, pc}

0800c1a6 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 800c1a6:	b580      	push	{r7, lr}
 800c1a8:	b082      	sub	sp, #8
 800c1aa:	af00      	add	r7, sp, #0
 800c1ac:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c1b4:	2b01      	cmp	r3, #1
 800c1b6:	d101      	bne.n	800c1bc <HAL_ETH_Stop+0x16>
 800c1b8:	2302      	movs	r3, #2
 800c1ba:	e01f      	b.n	800c1fc <HAL_ETH_Stop+0x56>
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	2201      	movs	r2, #1
 800c1c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	2202      	movs	r2, #2
 800c1c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 800c1cc:	6878      	ldr	r0, [r7, #4]
 800c1ce:	f000 fb9b 	bl	800c908 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 800c1d2:	6878      	ldr	r0, [r7, #4]
 800c1d4:	f000 fbc4 	bl	800c960 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 800c1d8:	6878      	ldr	r0, [r7, #4]
 800c1da:	f000 fb62 	bl	800c8a2 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800c1de:	6878      	ldr	r0, [r7, #4]
 800c1e0:	f000 fbd4 	bl	800c98c <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 800c1e4:	6878      	ldr	r0, [r7, #4]
 800c1e6:	f000 fb22 	bl	800c82e <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	2201      	movs	r2, #1
 800c1ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	2200      	movs	r2, #0
 800c1f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800c1fa:	2300      	movs	r3, #0
}
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	3708      	adds	r7, #8
 800c200:	46bd      	mov	sp, r7
 800c202:	bd80      	pop	{r7, pc}

0800c204 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 800c204:	b580      	push	{r7, lr}
 800c206:	b084      	sub	sp, #16
 800c208:	af00      	add	r7, sp, #0
 800c20a:	6078      	str	r0, [r7, #4]
 800c20c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 800c20e:	2300      	movs	r3, #0
 800c210:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c218:	2b01      	cmp	r3, #1
 800c21a:	d101      	bne.n	800c220 <HAL_ETH_ConfigMAC+0x1c>
 800c21c:	2302      	movs	r3, #2
 800c21e:	e0e4      	b.n	800c3ea <HAL_ETH_ConfigMAC+0x1e6>
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	2201      	movs	r2, #1
 800c224:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	2202      	movs	r2, #2
 800c22c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 800c230:	683b      	ldr	r3, [r7, #0]
 800c232:	2b00      	cmp	r3, #0
 800c234:	f000 80b1 	beq.w	800c39a <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800c240:	68fa      	ldr	r2, [r7, #12]
 800c242:	4b6c      	ldr	r3, [pc, #432]	; (800c3f4 <HAL_ETH_ConfigMAC+0x1f0>)
 800c244:	4013      	ands	r3, r2
 800c246:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 800c248:	683b      	ldr	r3, [r7, #0]
 800c24a:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 800c24c:	683b      	ldr	r3, [r7, #0]
 800c24e:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 800c250:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 800c252:	683b      	ldr	r3, [r7, #0]
 800c254:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 800c256:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 800c258:	683b      	ldr	r3, [r7, #0]
 800c25a:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 800c25c:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 800c262:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 800c264:	683b      	ldr	r3, [r7, #0]
 800c266:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 800c268:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 800c26a:	683b      	ldr	r3, [r7, #0]
 800c26c:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 800c26e:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 800c274:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 800c276:	683b      	ldr	r3, [r7, #0]
 800c278:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 800c27a:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 800c27c:	683b      	ldr	r3, [r7, #0]
 800c27e:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 800c280:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 800c282:	683b      	ldr	r3, [r7, #0]
 800c284:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 800c286:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 800c288:	683b      	ldr	r3, [r7, #0]
 800c28a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 800c28c:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 800c28e:	683b      	ldr	r3, [r7, #0]
 800c290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 800c292:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 800c294:	68fa      	ldr	r2, [r7, #12]
 800c296:	4313      	orrs	r3, r2
 800c298:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	68fa      	ldr	r2, [r7, #12]
 800c2a0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800c2aa:	2001      	movs	r0, #1
 800c2ac:	f7fe fcee 	bl	800ac8c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	68fa      	ldr	r2, [r7, #12]
 800c2b6:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800c2b8:	683b      	ldr	r3, [r7, #0]
 800c2ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 800c2bc:	683b      	ldr	r3, [r7, #0]
 800c2be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800c2c0:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 800c2c2:	683b      	ldr	r3, [r7, #0]
 800c2c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 800c2c6:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 800c2c8:	683b      	ldr	r3, [r7, #0]
 800c2ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 800c2cc:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 800c2ce:	683b      	ldr	r3, [r7, #0]
 800c2d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 800c2d2:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 800c2d4:	683b      	ldr	r3, [r7, #0]
 800c2d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 800c2d8:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 800c2da:	683b      	ldr	r3, [r7, #0]
 800c2dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 800c2de:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 800c2e2:	683b      	ldr	r3, [r7, #0]
 800c2e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 800c2ea:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800c2ec:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	685b      	ldr	r3, [r3, #4]
 800c2f4:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800c2f6:	2001      	movs	r0, #1
 800c2f8:	f7fe fcc8 	bl	800ac8c <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	68fa      	ldr	r2, [r7, #12]
 800c302:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	683a      	ldr	r2, [r7, #0]
 800c30a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800c30c:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	683a      	ldr	r2, [r7, #0]
 800c314:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800c316:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	699b      	ldr	r3, [r3, #24]
 800c31e:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800c320:	68fa      	ldr	r2, [r7, #12]
 800c322:	f64f 7341 	movw	r3, #65345	; 0xff41
 800c326:	4013      	ands	r3, r2
 800c328:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 800c32a:	683b      	ldr	r3, [r7, #0]
 800c32c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c32e:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 800c330:	683b      	ldr	r3, [r7, #0]
 800c332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 800c334:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 800c336:	683b      	ldr	r3, [r7, #0]
 800c338:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 800c33a:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 800c33c:	683b      	ldr	r3, [r7, #0]
 800c33e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 800c340:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 800c342:	683b      	ldr	r3, [r7, #0]
 800c344:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 800c346:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 800c348:	683b      	ldr	r3, [r7, #0]
 800c34a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 800c34c:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 800c34e:	68fa      	ldr	r2, [r7, #12]
 800c350:	4313      	orrs	r3, r2
 800c352:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	68fa      	ldr	r2, [r7, #12]
 800c35a:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	699b      	ldr	r3, [r3, #24]
 800c362:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800c364:	2001      	movs	r0, #1
 800c366:	f7fe fc91 	bl	800ac8c <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	68fa      	ldr	r2, [r7, #12]
 800c370:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800c372:	683b      	ldr	r3, [r7, #0]
 800c374:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 800c376:	683b      	ldr	r3, [r7, #0]
 800c378:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	430a      	orrs	r2, r1
 800c380:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	69db      	ldr	r3, [r3, #28]
 800c388:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 800c38a:	2001      	movs	r0, #1
 800c38c:	f7fe fc7e 	bl	800ac8c <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	68fa      	ldr	r2, [r7, #12]
 800c396:	61da      	str	r2, [r3, #28]
 800c398:	e01e      	b.n	800c3d8 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800c3a8:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	689a      	ldr	r2, [r3, #8]
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	68db      	ldr	r3, [r3, #12]
 800c3b2:	4313      	orrs	r3, r2
 800c3b4:	68fa      	ldr	r2, [r7, #12]
 800c3b6:	4313      	orrs	r3, r2
 800c3b8:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	68fa      	ldr	r2, [r7, #12]
 800c3c0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800c3ca:	2001      	movs	r0, #1
 800c3cc:	f7fe fc5e 	bl	800ac8c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	68fa      	ldr	r2, [r7, #12]
 800c3d6:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	2201      	movs	r2, #1
 800c3dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	2200      	movs	r2, #0
 800c3e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 800c3e8:	2300      	movs	r3, #0
}
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	3710      	adds	r7, #16
 800c3ee:	46bd      	mov	sp, r7
 800c3f0:	bd80      	pop	{r7, pc}
 800c3f2:	bf00      	nop
 800c3f4:	ff20810f 	.word	0xff20810f

0800c3f8 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b0b0      	sub	sp, #192	; 0xc0
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	6078      	str	r0, [r7, #4]
 800c400:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 800c402:	2300      	movs	r3, #0
 800c404:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 800c408:	683b      	ldr	r3, [r7, #0]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d007      	beq.n	800c41e <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c414:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800c41c:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 800c41e:	2300      	movs	r3, #0
 800c420:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 800c422:	2300      	movs	r3, #0
 800c424:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800c426:	2300      	movs	r3, #0
 800c428:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800c42a:	2300      	movs	r3, #0
 800c42c:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800c42e:	2300      	movs	r3, #0
 800c430:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 800c432:	2300      	movs	r3, #0
 800c434:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	69db      	ldr	r3, [r3, #28]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d103      	bne.n	800c446 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800c43e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c442:	663b      	str	r3, [r7, #96]	; 0x60
 800c444:	e001      	b.n	800c44a <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800c446:	2300      	movs	r3, #0
 800c448:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800c44a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c44e:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 800c450:	2300      	movs	r3, #0
 800c452:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800c454:	2300      	movs	r3, #0
 800c456:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 800c458:	2300      	movs	r3, #0
 800c45a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 800c45c:	2300      	movs	r3, #0
 800c45e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 800c460:	2300      	movs	r3, #0
 800c462:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 800c464:	2340      	movs	r3, #64	; 0x40
 800c466:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 800c468:	2300      	movs	r3, #0
 800c46a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800c46e:	2300      	movs	r3, #0
 800c470:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 800c474:	2300      	movs	r3, #0
 800c476:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800c47a:	2300      	movs	r3, #0
 800c47c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 800c480:	2300      	movs	r3, #0
 800c482:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 800c486:	2300      	movs	r3, #0
 800c488:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 800c48c:	2300      	movs	r3, #0
 800c48e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 800c492:	2300      	movs	r3, #0
 800c494:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 800c498:	2380      	movs	r3, #128	; 0x80
 800c49a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800c49e:	2300      	movs	r3, #0
 800c4a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 800c4a4:	2300      	movs	r3, #0
 800c4a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800c4b6:	2300      	movs	r3, #0
 800c4b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 800c4bc:	2300      	movs	r3, #0
 800c4be:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800c4cc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800c4d0:	4baa      	ldr	r3, [pc, #680]	; (800c77c <ETH_MACDMAConfig+0x384>)
 800c4d2:	4013      	ands	r3, r2
 800c4d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800c4d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800c4da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800c4dc:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800c4de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 800c4e0:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 800c4e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 800c4e4:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800c4ea:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 800c4ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 800c4ee:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 800c4f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 800c4f2:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 800c4f8:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 800c4fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 800c4fc:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 800c4fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 800c500:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 800c502:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 800c504:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 800c506:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 800c508:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 800c50a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 800c50c:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800c50e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800c512:	4313      	orrs	r3, r2
 800c514:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800c520:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800c52c:	2001      	movs	r0, #1
 800c52e:	f7fe fbad 	bl	800ac8c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800c53a:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800c53c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800c53e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800c540:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 800c542:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 800c544:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 800c546:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800c54a:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 800c54c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 800c550:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 800c552:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 800c556:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 800c558:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 800c55c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 800c560:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 800c568:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800c56a:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	685b      	ldr	r3, [r3, #4]
 800c572:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800c576:	2001      	movs	r0, #1
 800c578:	f7fe fb88 	bl	800ac8c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800c584:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c58e:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800c598:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	699b      	ldr	r3, [r3, #24]
 800c5a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800c5a4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800c5a8:	f64f 7341 	movw	r3, #65345	; 0xff41
 800c5ac:	4013      	ands	r3, r2
 800c5ae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800c5b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c5b6:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 800c5b8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800c5bc:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800c5be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 800c5c2:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 800c5c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 800c5c8:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800c5ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800c5ce:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 800c5d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 800c5d4:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800c5d6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800c5da:	4313      	orrs	r3, r2
 800c5dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800c5e8:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	699b      	ldr	r3, [r3, #24]
 800c5f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800c5f4:	2001      	movs	r0, #1
 800c5f6:	f7fe fb49 	bl	800ac8c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800c602:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800c604:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 800c608:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	430a      	orrs	r2, r1
 800c612:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	69db      	ldr	r3, [r3, #28]
 800c61a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800c61e:	2001      	movs	r0, #1
 800c620:	f7fe fb34 	bl	800ac8c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800c62c:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800c62e:	2300      	movs	r3, #0
 800c630:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 800c632:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c636:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 800c638:	2300      	movs	r3, #0
 800c63a:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 800c63c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c640:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800c642:	2300      	movs	r3, #0
 800c644:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800c646:	2300      	movs	r3, #0
 800c648:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800c64a:	2300      	movs	r3, #0
 800c64c:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800c64e:	2300      	movs	r3, #0
 800c650:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 800c652:	2304      	movs	r3, #4
 800c654:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800c656:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c65a:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 800c65c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800c660:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800c662:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c666:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800c668:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c66c:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800c66e:	2380      	movs	r3, #128	; 0x80
 800c670:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 800c672:	2300      	movs	r3, #0
 800c674:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800c676:	2300      	movs	r3, #0
 800c678:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c682:	699b      	ldr	r3, [r3, #24]
 800c684:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800c688:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800c68c:	4b3c      	ldr	r3, [pc, #240]	; (800c780 <ETH_MACDMAConfig+0x388>)
 800c68e:	4013      	ands	r3, r2
 800c690:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800c694:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 800c696:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800c698:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 800c69a:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800c69c:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 800c69e:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 800c6a0:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 800c6a2:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 800c6a4:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 800c6a6:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800c6a8:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 800c6aa:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800c6ac:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 800c6ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 800c6b0:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 800c6b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 800c6b4:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800c6b6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800c6ba:	4313      	orrs	r3, r2
 800c6bc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c6c8:	461a      	mov	r2, r3
 800c6ca:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c6ce:	6193      	str	r3, [r2, #24]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c6d8:	699b      	ldr	r3, [r3, #24]
 800c6da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800c6de:	2001      	movs	r0, #1
 800c6e0:	f7fe fad4 	bl	800ac8c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c6ec:	461a      	mov	r2, r3
 800c6ee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c6f2:	6193      	str	r3, [r2, #24]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800c6f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800c6f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800c6f8:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800c6fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 800c6fc:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 800c6fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800c700:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 800c702:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 800c704:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 800c706:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c708:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800c70a:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 800c70c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 800c70e:	4313      	orrs	r3, r2
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800c710:	687a      	ldr	r2, [r7, #4]
 800c712:	6812      	ldr	r2, [r2, #0]
 800c714:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c718:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c71c:	6013      	str	r3, [r2, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800c72c:	2001      	movs	r0, #1
 800c72e:	f7fe faad 	bl	800ac8c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c73a:	461a      	mov	r2, r3
 800c73c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c740:	6013      	str	r3, [r2, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	699b      	ldr	r3, [r3, #24]
 800c746:	2b01      	cmp	r3, #1
 800c748:	d10d      	bne.n	800c766 <ETH_MACDMAConfig+0x36e>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c752:	69db      	ldr	r3, [r3, #28]
 800c754:	687a      	ldr	r2, [r7, #4]
 800c756:	6812      	ldr	r2, [r2, #0]
 800c758:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c75c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c760:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c764:	61d3      	str	r3, [r2, #28]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	695b      	ldr	r3, [r3, #20]
 800c76a:	461a      	mov	r2, r3
 800c76c:	2100      	movs	r1, #0
 800c76e:	6878      	ldr	r0, [r7, #4]
 800c770:	f000 f808 	bl	800c784 <ETH_MACAddressConfig>
}
 800c774:	bf00      	nop
 800c776:	37c0      	adds	r7, #192	; 0xc0
 800c778:	46bd      	mov	sp, r7
 800c77a:	bd80      	pop	{r7, pc}
 800c77c:	ff20810f 	.word	0xff20810f
 800c780:	f8de3f23 	.word	0xf8de3f23

0800c784 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800c784:	b480      	push	{r7}
 800c786:	b087      	sub	sp, #28
 800c788:	af00      	add	r7, sp, #0
 800c78a:	60f8      	str	r0, [r7, #12]
 800c78c:	60b9      	str	r1, [r7, #8]
 800c78e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	3305      	adds	r3, #5
 800c794:	781b      	ldrb	r3, [r3, #0]
 800c796:	021b      	lsls	r3, r3, #8
 800c798:	687a      	ldr	r2, [r7, #4]
 800c79a:	3204      	adds	r2, #4
 800c79c:	7812      	ldrb	r2, [r2, #0]
 800c79e:	4313      	orrs	r3, r2
 800c7a0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800c7a2:	68ba      	ldr	r2, [r7, #8]
 800c7a4:	4b11      	ldr	r3, [pc, #68]	; (800c7ec <ETH_MACAddressConfig+0x68>)
 800c7a6:	4413      	add	r3, r2
 800c7a8:	461a      	mov	r2, r3
 800c7aa:	697b      	ldr	r3, [r7, #20]
 800c7ac:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	3303      	adds	r3, #3
 800c7b2:	781b      	ldrb	r3, [r3, #0]
 800c7b4:	061a      	lsls	r2, r3, #24
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	3302      	adds	r3, #2
 800c7ba:	781b      	ldrb	r3, [r3, #0]
 800c7bc:	041b      	lsls	r3, r3, #16
 800c7be:	431a      	orrs	r2, r3
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	3301      	adds	r3, #1
 800c7c4:	781b      	ldrb	r3, [r3, #0]
 800c7c6:	021b      	lsls	r3, r3, #8
 800c7c8:	4313      	orrs	r3, r2
 800c7ca:	687a      	ldr	r2, [r7, #4]
 800c7cc:	7812      	ldrb	r2, [r2, #0]
 800c7ce:	4313      	orrs	r3, r2
 800c7d0:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800c7d2:	68ba      	ldr	r2, [r7, #8]
 800c7d4:	4b06      	ldr	r3, [pc, #24]	; (800c7f0 <ETH_MACAddressConfig+0x6c>)
 800c7d6:	4413      	add	r3, r2
 800c7d8:	461a      	mov	r2, r3
 800c7da:	697b      	ldr	r3, [r7, #20]
 800c7dc:	6013      	str	r3, [r2, #0]
}
 800c7de:	bf00      	nop
 800c7e0:	371c      	adds	r7, #28
 800c7e2:	46bd      	mov	sp, r7
 800c7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e8:	4770      	bx	lr
 800c7ea:	bf00      	nop
 800c7ec:	40028040 	.word	0x40028040
 800c7f0:	40028044 	.word	0x40028044

0800c7f4 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b084      	sub	sp, #16
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800c7fc:	2300      	movs	r3, #0
 800c7fe:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	681a      	ldr	r2, [r3, #0]
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	f042 0208 	orr.w	r2, r2, #8
 800c80e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800c818:	2001      	movs	r0, #1
 800c81a:	f000 f8dd 	bl	800c9d8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	68fa      	ldr	r2, [r7, #12]
 800c824:	601a      	str	r2, [r3, #0]
}
 800c826:	bf00      	nop
 800c828:	3710      	adds	r7, #16
 800c82a:	46bd      	mov	sp, r7
 800c82c:	bd80      	pop	{r7, pc}

0800c82e <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 800c82e:	b580      	push	{r7, lr}
 800c830:	b084      	sub	sp, #16
 800c832:	af00      	add	r7, sp, #0
 800c834:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800c836:	2300      	movs	r3, #0
 800c838:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	681a      	ldr	r2, [r3, #0]
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	f022 0208 	bic.w	r2, r2, #8
 800c848:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800c852:	2001      	movs	r0, #1
 800c854:	f000 f8c0 	bl	800c9d8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	68fa      	ldr	r2, [r7, #12]
 800c85e:	601a      	str	r2, [r3, #0]
}
 800c860:	bf00      	nop
 800c862:	3710      	adds	r7, #16
 800c864:	46bd      	mov	sp, r7
 800c866:	bd80      	pop	{r7, pc}

0800c868 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 800c868:	b580      	push	{r7, lr}
 800c86a:	b084      	sub	sp, #16
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800c870:	2300      	movs	r3, #0
 800c872:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	681a      	ldr	r2, [r3, #0]
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	f042 0204 	orr.w	r2, r2, #4
 800c882:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800c88c:	2001      	movs	r0, #1
 800c88e:	f000 f8a3 	bl	800c9d8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	68fa      	ldr	r2, [r7, #12]
 800c898:	601a      	str	r2, [r3, #0]
}
 800c89a:	bf00      	nop
 800c89c:	3710      	adds	r7, #16
 800c89e:	46bd      	mov	sp, r7
 800c8a0:	bd80      	pop	{r7, pc}

0800c8a2 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800c8a2:	b580      	push	{r7, lr}
 800c8a4:	b084      	sub	sp, #16
 800c8a6:	af00      	add	r7, sp, #0
 800c8a8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	681a      	ldr	r2, [r3, #0]
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	f022 0204 	bic.w	r2, r2, #4
 800c8bc:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800c8c6:	2001      	movs	r0, #1
 800c8c8:	f000 f886 	bl	800c9d8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	68fa      	ldr	r2, [r7, #12]
 800c8d2:	601a      	str	r2, [r3, #0]
}
 800c8d4:	bf00      	nop
 800c8d6:	3710      	adds	r7, #16
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	bd80      	pop	{r7, pc}

0800c8dc <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 800c8dc:	b480      	push	{r7}
 800c8de:	b083      	sub	sp, #12
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c8ec:	699b      	ldr	r3, [r3, #24]
 800c8ee:	687a      	ldr	r2, [r7, #4]
 800c8f0:	6812      	ldr	r2, [r2, #0]
 800c8f2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800c8f6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c8fa:	6193      	str	r3, [r2, #24]
}
 800c8fc:	bf00      	nop
 800c8fe:	370c      	adds	r7, #12
 800c900:	46bd      	mov	sp, r7
 800c902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c906:	4770      	bx	lr

0800c908 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 800c908:	b480      	push	{r7}
 800c90a:	b083      	sub	sp, #12
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c918:	699b      	ldr	r3, [r3, #24]
 800c91a:	687a      	ldr	r2, [r7, #4]
 800c91c:	6812      	ldr	r2, [r2, #0]
 800c91e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c922:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c926:	6193      	str	r3, [r2, #24]
}
 800c928:	bf00      	nop
 800c92a:	370c      	adds	r7, #12
 800c92c:	46bd      	mov	sp, r7
 800c92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c932:	4770      	bx	lr

0800c934 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 800c934:	b480      	push	{r7}
 800c936:	b083      	sub	sp, #12
 800c938:	af00      	add	r7, sp, #0
 800c93a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c944:	699b      	ldr	r3, [r3, #24]
 800c946:	687a      	ldr	r2, [r7, #4]
 800c948:	6812      	ldr	r2, [r2, #0]
 800c94a:	f043 0302 	orr.w	r3, r3, #2
 800c94e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c952:	6193      	str	r3, [r2, #24]
}
 800c954:	bf00      	nop
 800c956:	370c      	adds	r7, #12
 800c958:	46bd      	mov	sp, r7
 800c95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c95e:	4770      	bx	lr

0800c960 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800c960:	b480      	push	{r7}
 800c962:	b083      	sub	sp, #12
 800c964:	af00      	add	r7, sp, #0
 800c966:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c970:	699b      	ldr	r3, [r3, #24]
 800c972:	687a      	ldr	r2, [r7, #4]
 800c974:	6812      	ldr	r2, [r2, #0]
 800c976:	f023 0302 	bic.w	r3, r3, #2
 800c97a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c97e:	6193      	str	r3, [r2, #24]
}
 800c980:	bf00      	nop
 800c982:	370c      	adds	r7, #12
 800c984:	46bd      	mov	sp, r7
 800c986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c98a:	4770      	bx	lr

0800c98c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800c98c:	b580      	push	{r7, lr}
 800c98e:	b084      	sub	sp, #16
 800c990:	af00      	add	r7, sp, #0
 800c992:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800c994:	2300      	movs	r3, #0
 800c996:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c9a0:	699b      	ldr	r3, [r3, #24]
 800c9a2:	687a      	ldr	r2, [r7, #4]
 800c9a4:	6812      	ldr	r2, [r2, #0]
 800c9a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c9aa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c9ae:	6193      	str	r3, [r2, #24]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c9b8:	699b      	ldr	r3, [r3, #24]
 800c9ba:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800c9bc:	2001      	movs	r0, #1
 800c9be:	f000 f80b 	bl	800c9d8 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	681a      	ldr	r2, [r3, #0]
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c9cc:	6193      	str	r3, [r2, #24]
}
 800c9ce:	bf00      	nop
 800c9d0:	3710      	adds	r7, #16
 800c9d2:	46bd      	mov	sp, r7
 800c9d4:	bd80      	pop	{r7, pc}
	...

0800c9d8 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 800c9d8:	b480      	push	{r7}
 800c9da:	b085      	sub	sp, #20
 800c9dc:	af00      	add	r7, sp, #0
 800c9de:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800c9e0:	4b0b      	ldr	r3, [pc, #44]	; (800ca10 <ETH_Delay+0x38>)
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	4a0b      	ldr	r2, [pc, #44]	; (800ca14 <ETH_Delay+0x3c>)
 800c9e6:	fba2 2303 	umull	r2, r3, r2, r3
 800c9ea:	0a5b      	lsrs	r3, r3, #9
 800c9ec:	687a      	ldr	r2, [r7, #4]
 800c9ee:	fb02 f303 	mul.w	r3, r2, r3
 800c9f2:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 800c9f4:	bf00      	nop
  } 
  while (Delay --);
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	1e5a      	subs	r2, r3, #1
 800c9fa:	60fa      	str	r2, [r7, #12]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d1f9      	bne.n	800c9f4 <ETH_Delay+0x1c>
}
 800ca00:	bf00      	nop
 800ca02:	bf00      	nop
 800ca04:	3714      	adds	r7, #20
 800ca06:	46bd      	mov	sp, r7
 800ca08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca0c:	4770      	bx	lr
 800ca0e:	bf00      	nop
 800ca10:	10000050 	.word	0x10000050
 800ca14:	10624dd3 	.word	0x10624dd3

0800ca18 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800ca18:	b580      	push	{r7, lr}
 800ca1a:	b086      	sub	sp, #24
 800ca1c:	af00      	add	r7, sp, #0
 800ca1e:	60f8      	str	r0, [r7, #12]
 800ca20:	60b9      	str	r1, [r7, #8]
 800ca22:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800ca26:	2301      	movs	r3, #1
 800ca28:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800ca2a:	4b23      	ldr	r3, [pc, #140]	; (800cab8 <HAL_FLASH_Program+0xa0>)
 800ca2c:	7e1b      	ldrb	r3, [r3, #24]
 800ca2e:	2b01      	cmp	r3, #1
 800ca30:	d101      	bne.n	800ca36 <HAL_FLASH_Program+0x1e>
 800ca32:	2302      	movs	r3, #2
 800ca34:	e03b      	b.n	800caae <HAL_FLASH_Program+0x96>
 800ca36:	4b20      	ldr	r3, [pc, #128]	; (800cab8 <HAL_FLASH_Program+0xa0>)
 800ca38:	2201      	movs	r2, #1
 800ca3a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800ca3c:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ca40:	f000 f87c 	bl	800cb3c <FLASH_WaitForLastOperation>
 800ca44:	4603      	mov	r3, r0
 800ca46:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800ca48:	7dfb      	ldrb	r3, [r7, #23]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d12b      	bne.n	800caa6 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d105      	bne.n	800ca60 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800ca54:	783b      	ldrb	r3, [r7, #0]
 800ca56:	4619      	mov	r1, r3
 800ca58:	68b8      	ldr	r0, [r7, #8]
 800ca5a:	f000 f927 	bl	800ccac <FLASH_Program_Byte>
 800ca5e:	e016      	b.n	800ca8e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	2b01      	cmp	r3, #1
 800ca64:	d105      	bne.n	800ca72 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800ca66:	883b      	ldrh	r3, [r7, #0]
 800ca68:	4619      	mov	r1, r3
 800ca6a:	68b8      	ldr	r0, [r7, #8]
 800ca6c:	f000 f8fa 	bl	800cc64 <FLASH_Program_HalfWord>
 800ca70:	e00d      	b.n	800ca8e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	2b02      	cmp	r3, #2
 800ca76:	d105      	bne.n	800ca84 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800ca78:	683b      	ldr	r3, [r7, #0]
 800ca7a:	4619      	mov	r1, r3
 800ca7c:	68b8      	ldr	r0, [r7, #8]
 800ca7e:	f000 f8cf 	bl	800cc20 <FLASH_Program_Word>
 800ca82:	e004      	b.n	800ca8e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800ca84:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca88:	68b8      	ldr	r0, [r7, #8]
 800ca8a:	f000 f897 	bl	800cbbc <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800ca8e:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ca92:	f000 f853 	bl	800cb3c <FLASH_WaitForLastOperation>
 800ca96:	4603      	mov	r3, r0
 800ca98:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800ca9a:	4b08      	ldr	r3, [pc, #32]	; (800cabc <HAL_FLASH_Program+0xa4>)
 800ca9c:	691b      	ldr	r3, [r3, #16]
 800ca9e:	4a07      	ldr	r2, [pc, #28]	; (800cabc <HAL_FLASH_Program+0xa4>)
 800caa0:	f023 0301 	bic.w	r3, r3, #1
 800caa4:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800caa6:	4b04      	ldr	r3, [pc, #16]	; (800cab8 <HAL_FLASH_Program+0xa0>)
 800caa8:	2200      	movs	r2, #0
 800caaa:	761a      	strb	r2, [r3, #24]
  
  return status;
 800caac:	7dfb      	ldrb	r3, [r7, #23]
}
 800caae:	4618      	mov	r0, r3
 800cab0:	3718      	adds	r7, #24
 800cab2:	46bd      	mov	sp, r7
 800cab4:	bd80      	pop	{r7, pc}
 800cab6:	bf00      	nop
 800cab8:	200145bc 	.word	0x200145bc
 800cabc:	40023c00 	.word	0x40023c00

0800cac0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800cac0:	b480      	push	{r7}
 800cac2:	b083      	sub	sp, #12
 800cac4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800cac6:	2300      	movs	r3, #0
 800cac8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800caca:	4b0b      	ldr	r3, [pc, #44]	; (800caf8 <HAL_FLASH_Unlock+0x38>)
 800cacc:	691b      	ldr	r3, [r3, #16]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	da0b      	bge.n	800caea <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800cad2:	4b09      	ldr	r3, [pc, #36]	; (800caf8 <HAL_FLASH_Unlock+0x38>)
 800cad4:	4a09      	ldr	r2, [pc, #36]	; (800cafc <HAL_FLASH_Unlock+0x3c>)
 800cad6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800cad8:	4b07      	ldr	r3, [pc, #28]	; (800caf8 <HAL_FLASH_Unlock+0x38>)
 800cada:	4a09      	ldr	r2, [pc, #36]	; (800cb00 <HAL_FLASH_Unlock+0x40>)
 800cadc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800cade:	4b06      	ldr	r3, [pc, #24]	; (800caf8 <HAL_FLASH_Unlock+0x38>)
 800cae0:	691b      	ldr	r3, [r3, #16]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	da01      	bge.n	800caea <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800cae6:	2301      	movs	r3, #1
 800cae8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800caea:	79fb      	ldrb	r3, [r7, #7]
}
 800caec:	4618      	mov	r0, r3
 800caee:	370c      	adds	r7, #12
 800caf0:	46bd      	mov	sp, r7
 800caf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf6:	4770      	bx	lr
 800caf8:	40023c00 	.word	0x40023c00
 800cafc:	45670123 	.word	0x45670123
 800cb00:	cdef89ab 	.word	0xcdef89ab

0800cb04 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800cb04:	b480      	push	{r7}
 800cb06:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800cb08:	4b05      	ldr	r3, [pc, #20]	; (800cb20 <HAL_FLASH_Lock+0x1c>)
 800cb0a:	691b      	ldr	r3, [r3, #16]
 800cb0c:	4a04      	ldr	r2, [pc, #16]	; (800cb20 <HAL_FLASH_Lock+0x1c>)
 800cb0e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cb12:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800cb14:	2300      	movs	r3, #0
}
 800cb16:	4618      	mov	r0, r3
 800cb18:	46bd      	mov	sp, r7
 800cb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb1e:	4770      	bx	lr
 800cb20:	40023c00 	.word	0x40023c00

0800cb24 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 800cb24:	b480      	push	{r7}
 800cb26:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 800cb28:	4b03      	ldr	r3, [pc, #12]	; (800cb38 <HAL_FLASH_GetError+0x14>)
 800cb2a:	69db      	ldr	r3, [r3, #28]
}  
 800cb2c:	4618      	mov	r0, r3
 800cb2e:	46bd      	mov	sp, r7
 800cb30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb34:	4770      	bx	lr
 800cb36:	bf00      	nop
 800cb38:	200145bc 	.word	0x200145bc

0800cb3c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b084      	sub	sp, #16
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800cb44:	2300      	movs	r3, #0
 800cb46:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800cb48:	4b1a      	ldr	r3, [pc, #104]	; (800cbb4 <FLASH_WaitForLastOperation+0x78>)
 800cb4a:	2200      	movs	r2, #0
 800cb4c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800cb4e:	f7fe f891 	bl	800ac74 <HAL_GetTick>
 800cb52:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800cb54:	e010      	b.n	800cb78 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb5c:	d00c      	beq.n	800cb78 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d007      	beq.n	800cb74 <FLASH_WaitForLastOperation+0x38>
 800cb64:	f7fe f886 	bl	800ac74 <HAL_GetTick>
 800cb68:	4602      	mov	r2, r0
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	1ad3      	subs	r3, r2, r3
 800cb6e:	687a      	ldr	r2, [r7, #4]
 800cb70:	429a      	cmp	r2, r3
 800cb72:	d201      	bcs.n	800cb78 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800cb74:	2303      	movs	r3, #3
 800cb76:	e019      	b.n	800cbac <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800cb78:	4b0f      	ldr	r3, [pc, #60]	; (800cbb8 <FLASH_WaitForLastOperation+0x7c>)
 800cb7a:	68db      	ldr	r3, [r3, #12]
 800cb7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d1e8      	bne.n	800cb56 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800cb84:	4b0c      	ldr	r3, [pc, #48]	; (800cbb8 <FLASH_WaitForLastOperation+0x7c>)
 800cb86:	68db      	ldr	r3, [r3, #12]
 800cb88:	f003 0301 	and.w	r3, r3, #1
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d002      	beq.n	800cb96 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800cb90:	4b09      	ldr	r3, [pc, #36]	; (800cbb8 <FLASH_WaitForLastOperation+0x7c>)
 800cb92:	2201      	movs	r2, #1
 800cb94:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800cb96:	4b08      	ldr	r3, [pc, #32]	; (800cbb8 <FLASH_WaitForLastOperation+0x7c>)
 800cb98:	68db      	ldr	r3, [r3, #12]
 800cb9a:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d003      	beq.n	800cbaa <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800cba2:	f000 f8a5 	bl	800ccf0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800cba6:	2301      	movs	r3, #1
 800cba8:	e000      	b.n	800cbac <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800cbaa:	2300      	movs	r3, #0
  
}  
 800cbac:	4618      	mov	r0, r3
 800cbae:	3710      	adds	r7, #16
 800cbb0:	46bd      	mov	sp, r7
 800cbb2:	bd80      	pop	{r7, pc}
 800cbb4:	200145bc 	.word	0x200145bc
 800cbb8:	40023c00 	.word	0x40023c00

0800cbbc <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800cbbc:	b480      	push	{r7}
 800cbbe:	b085      	sub	sp, #20
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	60f8      	str	r0, [r7, #12]
 800cbc4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800cbc8:	4b14      	ldr	r3, [pc, #80]	; (800cc1c <FLASH_Program_DoubleWord+0x60>)
 800cbca:	691b      	ldr	r3, [r3, #16]
 800cbcc:	4a13      	ldr	r2, [pc, #76]	; (800cc1c <FLASH_Program_DoubleWord+0x60>)
 800cbce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cbd2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800cbd4:	4b11      	ldr	r3, [pc, #68]	; (800cc1c <FLASH_Program_DoubleWord+0x60>)
 800cbd6:	691b      	ldr	r3, [r3, #16]
 800cbd8:	4a10      	ldr	r2, [pc, #64]	; (800cc1c <FLASH_Program_DoubleWord+0x60>)
 800cbda:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800cbde:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800cbe0:	4b0e      	ldr	r3, [pc, #56]	; (800cc1c <FLASH_Program_DoubleWord+0x60>)
 800cbe2:	691b      	ldr	r3, [r3, #16]
 800cbe4:	4a0d      	ldr	r2, [pc, #52]	; (800cc1c <FLASH_Program_DoubleWord+0x60>)
 800cbe6:	f043 0301 	orr.w	r3, r3, #1
 800cbea:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	683a      	ldr	r2, [r7, #0]
 800cbf0:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800cbf2:	f3bf 8f6f 	isb	sy
}
 800cbf6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800cbf8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cbfc:	f04f 0200 	mov.w	r2, #0
 800cc00:	f04f 0300 	mov.w	r3, #0
 800cc04:	000a      	movs	r2, r1
 800cc06:	2300      	movs	r3, #0
 800cc08:	68f9      	ldr	r1, [r7, #12]
 800cc0a:	3104      	adds	r1, #4
 800cc0c:	4613      	mov	r3, r2
 800cc0e:	600b      	str	r3, [r1, #0]
}
 800cc10:	bf00      	nop
 800cc12:	3714      	adds	r7, #20
 800cc14:	46bd      	mov	sp, r7
 800cc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc1a:	4770      	bx	lr
 800cc1c:	40023c00 	.word	0x40023c00

0800cc20 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800cc20:	b480      	push	{r7}
 800cc22:	b083      	sub	sp, #12
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	6078      	str	r0, [r7, #4]
 800cc28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800cc2a:	4b0d      	ldr	r3, [pc, #52]	; (800cc60 <FLASH_Program_Word+0x40>)
 800cc2c:	691b      	ldr	r3, [r3, #16]
 800cc2e:	4a0c      	ldr	r2, [pc, #48]	; (800cc60 <FLASH_Program_Word+0x40>)
 800cc30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cc34:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800cc36:	4b0a      	ldr	r3, [pc, #40]	; (800cc60 <FLASH_Program_Word+0x40>)
 800cc38:	691b      	ldr	r3, [r3, #16]
 800cc3a:	4a09      	ldr	r2, [pc, #36]	; (800cc60 <FLASH_Program_Word+0x40>)
 800cc3c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800cc40:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800cc42:	4b07      	ldr	r3, [pc, #28]	; (800cc60 <FLASH_Program_Word+0x40>)
 800cc44:	691b      	ldr	r3, [r3, #16]
 800cc46:	4a06      	ldr	r2, [pc, #24]	; (800cc60 <FLASH_Program_Word+0x40>)
 800cc48:	f043 0301 	orr.w	r3, r3, #1
 800cc4c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	683a      	ldr	r2, [r7, #0]
 800cc52:	601a      	str	r2, [r3, #0]
}
 800cc54:	bf00      	nop
 800cc56:	370c      	adds	r7, #12
 800cc58:	46bd      	mov	sp, r7
 800cc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc5e:	4770      	bx	lr
 800cc60:	40023c00 	.word	0x40023c00

0800cc64 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800cc64:	b480      	push	{r7}
 800cc66:	b083      	sub	sp, #12
 800cc68:	af00      	add	r7, sp, #0
 800cc6a:	6078      	str	r0, [r7, #4]
 800cc6c:	460b      	mov	r3, r1
 800cc6e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800cc70:	4b0d      	ldr	r3, [pc, #52]	; (800cca8 <FLASH_Program_HalfWord+0x44>)
 800cc72:	691b      	ldr	r3, [r3, #16]
 800cc74:	4a0c      	ldr	r2, [pc, #48]	; (800cca8 <FLASH_Program_HalfWord+0x44>)
 800cc76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cc7a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800cc7c:	4b0a      	ldr	r3, [pc, #40]	; (800cca8 <FLASH_Program_HalfWord+0x44>)
 800cc7e:	691b      	ldr	r3, [r3, #16]
 800cc80:	4a09      	ldr	r2, [pc, #36]	; (800cca8 <FLASH_Program_HalfWord+0x44>)
 800cc82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cc86:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800cc88:	4b07      	ldr	r3, [pc, #28]	; (800cca8 <FLASH_Program_HalfWord+0x44>)
 800cc8a:	691b      	ldr	r3, [r3, #16]
 800cc8c:	4a06      	ldr	r2, [pc, #24]	; (800cca8 <FLASH_Program_HalfWord+0x44>)
 800cc8e:	f043 0301 	orr.w	r3, r3, #1
 800cc92:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	887a      	ldrh	r2, [r7, #2]
 800cc98:	801a      	strh	r2, [r3, #0]
}
 800cc9a:	bf00      	nop
 800cc9c:	370c      	adds	r7, #12
 800cc9e:	46bd      	mov	sp, r7
 800cca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca4:	4770      	bx	lr
 800cca6:	bf00      	nop
 800cca8:	40023c00 	.word	0x40023c00

0800ccac <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800ccac:	b480      	push	{r7}
 800ccae:	b083      	sub	sp, #12
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	6078      	str	r0, [r7, #4]
 800ccb4:	460b      	mov	r3, r1
 800ccb6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800ccb8:	4b0c      	ldr	r3, [pc, #48]	; (800ccec <FLASH_Program_Byte+0x40>)
 800ccba:	691b      	ldr	r3, [r3, #16]
 800ccbc:	4a0b      	ldr	r2, [pc, #44]	; (800ccec <FLASH_Program_Byte+0x40>)
 800ccbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ccc2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800ccc4:	4b09      	ldr	r3, [pc, #36]	; (800ccec <FLASH_Program_Byte+0x40>)
 800ccc6:	4a09      	ldr	r2, [pc, #36]	; (800ccec <FLASH_Program_Byte+0x40>)
 800ccc8:	691b      	ldr	r3, [r3, #16]
 800ccca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800cccc:	4b07      	ldr	r3, [pc, #28]	; (800ccec <FLASH_Program_Byte+0x40>)
 800ccce:	691b      	ldr	r3, [r3, #16]
 800ccd0:	4a06      	ldr	r2, [pc, #24]	; (800ccec <FLASH_Program_Byte+0x40>)
 800ccd2:	f043 0301 	orr.w	r3, r3, #1
 800ccd6:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	78fa      	ldrb	r2, [r7, #3]
 800ccdc:	701a      	strb	r2, [r3, #0]
}
 800ccde:	bf00      	nop
 800cce0:	370c      	adds	r7, #12
 800cce2:	46bd      	mov	sp, r7
 800cce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce8:	4770      	bx	lr
 800ccea:	bf00      	nop
 800ccec:	40023c00 	.word	0x40023c00

0800ccf0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800ccf0:	b480      	push	{r7}
 800ccf2:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800ccf4:	4b27      	ldr	r3, [pc, #156]	; (800cd94 <FLASH_SetErrorCode+0xa4>)
 800ccf6:	68db      	ldr	r3, [r3, #12]
 800ccf8:	f003 0310 	and.w	r3, r3, #16
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d008      	beq.n	800cd12 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800cd00:	4b25      	ldr	r3, [pc, #148]	; (800cd98 <FLASH_SetErrorCode+0xa8>)
 800cd02:	69db      	ldr	r3, [r3, #28]
 800cd04:	f043 0310 	orr.w	r3, r3, #16
 800cd08:	4a23      	ldr	r2, [pc, #140]	; (800cd98 <FLASH_SetErrorCode+0xa8>)
 800cd0a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800cd0c:	4b21      	ldr	r3, [pc, #132]	; (800cd94 <FLASH_SetErrorCode+0xa4>)
 800cd0e:	2210      	movs	r2, #16
 800cd10:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800cd12:	4b20      	ldr	r3, [pc, #128]	; (800cd94 <FLASH_SetErrorCode+0xa4>)
 800cd14:	68db      	ldr	r3, [r3, #12]
 800cd16:	f003 0320 	and.w	r3, r3, #32
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d008      	beq.n	800cd30 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800cd1e:	4b1e      	ldr	r3, [pc, #120]	; (800cd98 <FLASH_SetErrorCode+0xa8>)
 800cd20:	69db      	ldr	r3, [r3, #28]
 800cd22:	f043 0308 	orr.w	r3, r3, #8
 800cd26:	4a1c      	ldr	r2, [pc, #112]	; (800cd98 <FLASH_SetErrorCode+0xa8>)
 800cd28:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800cd2a:	4b1a      	ldr	r3, [pc, #104]	; (800cd94 <FLASH_SetErrorCode+0xa4>)
 800cd2c:	2220      	movs	r2, #32
 800cd2e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800cd30:	4b18      	ldr	r3, [pc, #96]	; (800cd94 <FLASH_SetErrorCode+0xa4>)
 800cd32:	68db      	ldr	r3, [r3, #12]
 800cd34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d008      	beq.n	800cd4e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800cd3c:	4b16      	ldr	r3, [pc, #88]	; (800cd98 <FLASH_SetErrorCode+0xa8>)
 800cd3e:	69db      	ldr	r3, [r3, #28]
 800cd40:	f043 0304 	orr.w	r3, r3, #4
 800cd44:	4a14      	ldr	r2, [pc, #80]	; (800cd98 <FLASH_SetErrorCode+0xa8>)
 800cd46:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800cd48:	4b12      	ldr	r3, [pc, #72]	; (800cd94 <FLASH_SetErrorCode+0xa4>)
 800cd4a:	2240      	movs	r2, #64	; 0x40
 800cd4c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800cd4e:	4b11      	ldr	r3, [pc, #68]	; (800cd94 <FLASH_SetErrorCode+0xa4>)
 800cd50:	68db      	ldr	r3, [r3, #12]
 800cd52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d008      	beq.n	800cd6c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800cd5a:	4b0f      	ldr	r3, [pc, #60]	; (800cd98 <FLASH_SetErrorCode+0xa8>)
 800cd5c:	69db      	ldr	r3, [r3, #28]
 800cd5e:	f043 0302 	orr.w	r3, r3, #2
 800cd62:	4a0d      	ldr	r2, [pc, #52]	; (800cd98 <FLASH_SetErrorCode+0xa8>)
 800cd64:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800cd66:	4b0b      	ldr	r3, [pc, #44]	; (800cd94 <FLASH_SetErrorCode+0xa4>)
 800cd68:	2280      	movs	r2, #128	; 0x80
 800cd6a:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800cd6c:	4b09      	ldr	r3, [pc, #36]	; (800cd94 <FLASH_SetErrorCode+0xa4>)
 800cd6e:	68db      	ldr	r3, [r3, #12]
 800cd70:	f003 0302 	and.w	r3, r3, #2
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d008      	beq.n	800cd8a <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800cd78:	4b07      	ldr	r3, [pc, #28]	; (800cd98 <FLASH_SetErrorCode+0xa8>)
 800cd7a:	69db      	ldr	r3, [r3, #28]
 800cd7c:	f043 0320 	orr.w	r3, r3, #32
 800cd80:	4a05      	ldr	r2, [pc, #20]	; (800cd98 <FLASH_SetErrorCode+0xa8>)
 800cd82:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800cd84:	4b03      	ldr	r3, [pc, #12]	; (800cd94 <FLASH_SetErrorCode+0xa4>)
 800cd86:	2202      	movs	r2, #2
 800cd88:	60da      	str	r2, [r3, #12]
  }
}
 800cd8a:	bf00      	nop
 800cd8c:	46bd      	mov	sp, r7
 800cd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd92:	4770      	bx	lr
 800cd94:	40023c00 	.word	0x40023c00
 800cd98:	200145bc 	.word	0x200145bc

0800cd9c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800cd9c:	b580      	push	{r7, lr}
 800cd9e:	b084      	sub	sp, #16
 800cda0:	af00      	add	r7, sp, #0
 800cda2:	6078      	str	r0, [r7, #4]
 800cda4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800cda6:	2301      	movs	r3, #1
 800cda8:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800cdaa:	2300      	movs	r3, #0
 800cdac:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800cdae:	4b31      	ldr	r3, [pc, #196]	; (800ce74 <HAL_FLASHEx_Erase+0xd8>)
 800cdb0:	7e1b      	ldrb	r3, [r3, #24]
 800cdb2:	2b01      	cmp	r3, #1
 800cdb4:	d101      	bne.n	800cdba <HAL_FLASHEx_Erase+0x1e>
 800cdb6:	2302      	movs	r3, #2
 800cdb8:	e058      	b.n	800ce6c <HAL_FLASHEx_Erase+0xd0>
 800cdba:	4b2e      	ldr	r3, [pc, #184]	; (800ce74 <HAL_FLASHEx_Erase+0xd8>)
 800cdbc:	2201      	movs	r2, #1
 800cdbe:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800cdc0:	f24c 3050 	movw	r0, #50000	; 0xc350
 800cdc4:	f7ff feba 	bl	800cb3c <FLASH_WaitForLastOperation>
 800cdc8:	4603      	mov	r3, r0
 800cdca:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800cdcc:	7bfb      	ldrb	r3, [r7, #15]
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d148      	bne.n	800ce64 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800cdd2:	683b      	ldr	r3, [r7, #0]
 800cdd4:	f04f 32ff 	mov.w	r2, #4294967295
 800cdd8:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	2b01      	cmp	r3, #1
 800cde0:	d115      	bne.n	800ce0e <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	691b      	ldr	r3, [r3, #16]
 800cde6:	b2da      	uxtb	r2, r3
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	685b      	ldr	r3, [r3, #4]
 800cdec:	4619      	mov	r1, r3
 800cdee:	4610      	mov	r0, r2
 800cdf0:	f000 f844 	bl	800ce7c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800cdf4:	f24c 3050 	movw	r0, #50000	; 0xc350
 800cdf8:	f7ff fea0 	bl	800cb3c <FLASH_WaitForLastOperation>
 800cdfc:	4603      	mov	r3, r0
 800cdfe:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 800ce00:	4b1d      	ldr	r3, [pc, #116]	; (800ce78 <HAL_FLASHEx_Erase+0xdc>)
 800ce02:	691b      	ldr	r3, [r3, #16]
 800ce04:	4a1c      	ldr	r2, [pc, #112]	; (800ce78 <HAL_FLASHEx_Erase+0xdc>)
 800ce06:	f023 0304 	bic.w	r3, r3, #4
 800ce0a:	6113      	str	r3, [r2, #16]
 800ce0c:	e028      	b.n	800ce60 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	689b      	ldr	r3, [r3, #8]
 800ce12:	60bb      	str	r3, [r7, #8]
 800ce14:	e01c      	b.n	800ce50 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	691b      	ldr	r3, [r3, #16]
 800ce1a:	b2db      	uxtb	r3, r3
 800ce1c:	4619      	mov	r1, r3
 800ce1e:	68b8      	ldr	r0, [r7, #8]
 800ce20:	f000 f850 	bl	800cec4 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800ce24:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ce28:	f7ff fe88 	bl	800cb3c <FLASH_WaitForLastOperation>
 800ce2c:	4603      	mov	r3, r0
 800ce2e:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800ce30:	4b11      	ldr	r3, [pc, #68]	; (800ce78 <HAL_FLASHEx_Erase+0xdc>)
 800ce32:	691b      	ldr	r3, [r3, #16]
 800ce34:	4a10      	ldr	r2, [pc, #64]	; (800ce78 <HAL_FLASHEx_Erase+0xdc>)
 800ce36:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800ce3a:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 800ce3c:	7bfb      	ldrb	r3, [r7, #15]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d003      	beq.n	800ce4a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800ce42:	683b      	ldr	r3, [r7, #0]
 800ce44:	68ba      	ldr	r2, [r7, #8]
 800ce46:	601a      	str	r2, [r3, #0]
          break;
 800ce48:	e00a      	b.n	800ce60 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800ce4a:	68bb      	ldr	r3, [r7, #8]
 800ce4c:	3301      	adds	r3, #1
 800ce4e:	60bb      	str	r3, [r7, #8]
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	68da      	ldr	r2, [r3, #12]
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	689b      	ldr	r3, [r3, #8]
 800ce58:	4413      	add	r3, r2
 800ce5a:	68ba      	ldr	r2, [r7, #8]
 800ce5c:	429a      	cmp	r2, r3
 800ce5e:	d3da      	bcc.n	800ce16 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800ce60:	f000 f878 	bl	800cf54 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800ce64:	4b03      	ldr	r3, [pc, #12]	; (800ce74 <HAL_FLASHEx_Erase+0xd8>)
 800ce66:	2200      	movs	r2, #0
 800ce68:	761a      	strb	r2, [r3, #24]

  return status;
 800ce6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	3710      	adds	r7, #16
 800ce70:	46bd      	mov	sp, r7
 800ce72:	bd80      	pop	{r7, pc}
 800ce74:	200145bc 	.word	0x200145bc
 800ce78:	40023c00 	.word	0x40023c00

0800ce7c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 800ce7c:	b480      	push	{r7}
 800ce7e:	b083      	sub	sp, #12
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	4603      	mov	r3, r0
 800ce84:	6039      	str	r1, [r7, #0]
 800ce86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800ce88:	4b0d      	ldr	r3, [pc, #52]	; (800cec0 <FLASH_MassErase+0x44>)
 800ce8a:	691b      	ldr	r3, [r3, #16]
 800ce8c:	4a0c      	ldr	r2, [pc, #48]	; (800cec0 <FLASH_MassErase+0x44>)
 800ce8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ce92:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800ce94:	4b0a      	ldr	r3, [pc, #40]	; (800cec0 <FLASH_MassErase+0x44>)
 800ce96:	691b      	ldr	r3, [r3, #16]
 800ce98:	4a09      	ldr	r2, [pc, #36]	; (800cec0 <FLASH_MassErase+0x44>)
 800ce9a:	f043 0304 	orr.w	r3, r3, #4
 800ce9e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 800cea0:	4b07      	ldr	r3, [pc, #28]	; (800cec0 <FLASH_MassErase+0x44>)
 800cea2:	691a      	ldr	r2, [r3, #16]
 800cea4:	79fb      	ldrb	r3, [r7, #7]
 800cea6:	021b      	lsls	r3, r3, #8
 800cea8:	4313      	orrs	r3, r2
 800ceaa:	4a05      	ldr	r2, [pc, #20]	; (800cec0 <FLASH_MassErase+0x44>)
 800ceac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ceb0:	6113      	str	r3, [r2, #16]
}
 800ceb2:	bf00      	nop
 800ceb4:	370c      	adds	r7, #12
 800ceb6:	46bd      	mov	sp, r7
 800ceb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cebc:	4770      	bx	lr
 800cebe:	bf00      	nop
 800cec0:	40023c00 	.word	0x40023c00

0800cec4 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800cec4:	b480      	push	{r7}
 800cec6:	b085      	sub	sp, #20
 800cec8:	af00      	add	r7, sp, #0
 800ceca:	6078      	str	r0, [r7, #4]
 800cecc:	460b      	mov	r3, r1
 800cece:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800ced0:	2300      	movs	r3, #0
 800ced2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800ced4:	78fb      	ldrb	r3, [r7, #3]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d102      	bne.n	800cee0 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800ceda:	2300      	movs	r3, #0
 800cedc:	60fb      	str	r3, [r7, #12]
 800cede:	e010      	b.n	800cf02 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800cee0:	78fb      	ldrb	r3, [r7, #3]
 800cee2:	2b01      	cmp	r3, #1
 800cee4:	d103      	bne.n	800ceee <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800cee6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ceea:	60fb      	str	r3, [r7, #12]
 800ceec:	e009      	b.n	800cf02 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800ceee:	78fb      	ldrb	r3, [r7, #3]
 800cef0:	2b02      	cmp	r3, #2
 800cef2:	d103      	bne.n	800cefc <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800cef4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cef8:	60fb      	str	r3, [r7, #12]
 800cefa:	e002      	b.n	800cf02 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800cefc:	f44f 7340 	mov.w	r3, #768	; 0x300
 800cf00:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800cf02:	4b13      	ldr	r3, [pc, #76]	; (800cf50 <FLASH_Erase_Sector+0x8c>)
 800cf04:	691b      	ldr	r3, [r3, #16]
 800cf06:	4a12      	ldr	r2, [pc, #72]	; (800cf50 <FLASH_Erase_Sector+0x8c>)
 800cf08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cf0c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800cf0e:	4b10      	ldr	r3, [pc, #64]	; (800cf50 <FLASH_Erase_Sector+0x8c>)
 800cf10:	691a      	ldr	r2, [r3, #16]
 800cf12:	490f      	ldr	r1, [pc, #60]	; (800cf50 <FLASH_Erase_Sector+0x8c>)
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	4313      	orrs	r3, r2
 800cf18:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800cf1a:	4b0d      	ldr	r3, [pc, #52]	; (800cf50 <FLASH_Erase_Sector+0x8c>)
 800cf1c:	691b      	ldr	r3, [r3, #16]
 800cf1e:	4a0c      	ldr	r2, [pc, #48]	; (800cf50 <FLASH_Erase_Sector+0x8c>)
 800cf20:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800cf24:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800cf26:	4b0a      	ldr	r3, [pc, #40]	; (800cf50 <FLASH_Erase_Sector+0x8c>)
 800cf28:	691a      	ldr	r2, [r3, #16]
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	00db      	lsls	r3, r3, #3
 800cf2e:	4313      	orrs	r3, r2
 800cf30:	4a07      	ldr	r2, [pc, #28]	; (800cf50 <FLASH_Erase_Sector+0x8c>)
 800cf32:	f043 0302 	orr.w	r3, r3, #2
 800cf36:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800cf38:	4b05      	ldr	r3, [pc, #20]	; (800cf50 <FLASH_Erase_Sector+0x8c>)
 800cf3a:	691b      	ldr	r3, [r3, #16]
 800cf3c:	4a04      	ldr	r2, [pc, #16]	; (800cf50 <FLASH_Erase_Sector+0x8c>)
 800cf3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cf42:	6113      	str	r3, [r2, #16]
}
 800cf44:	bf00      	nop
 800cf46:	3714      	adds	r7, #20
 800cf48:	46bd      	mov	sp, r7
 800cf4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf4e:	4770      	bx	lr
 800cf50:	40023c00 	.word	0x40023c00

0800cf54 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800cf54:	b480      	push	{r7}
 800cf56:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 800cf58:	4b20      	ldr	r3, [pc, #128]	; (800cfdc <FLASH_FlushCaches+0x88>)
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d017      	beq.n	800cf94 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800cf64:	4b1d      	ldr	r3, [pc, #116]	; (800cfdc <FLASH_FlushCaches+0x88>)
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	4a1c      	ldr	r2, [pc, #112]	; (800cfdc <FLASH_FlushCaches+0x88>)
 800cf6a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cf6e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800cf70:	4b1a      	ldr	r3, [pc, #104]	; (800cfdc <FLASH_FlushCaches+0x88>)
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	4a19      	ldr	r2, [pc, #100]	; (800cfdc <FLASH_FlushCaches+0x88>)
 800cf76:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800cf7a:	6013      	str	r3, [r2, #0]
 800cf7c:	4b17      	ldr	r3, [pc, #92]	; (800cfdc <FLASH_FlushCaches+0x88>)
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	4a16      	ldr	r2, [pc, #88]	; (800cfdc <FLASH_FlushCaches+0x88>)
 800cf82:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cf86:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800cf88:	4b14      	ldr	r3, [pc, #80]	; (800cfdc <FLASH_FlushCaches+0x88>)
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	4a13      	ldr	r2, [pc, #76]	; (800cfdc <FLASH_FlushCaches+0x88>)
 800cf8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800cf92:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800cf94:	4b11      	ldr	r3, [pc, #68]	; (800cfdc <FLASH_FlushCaches+0x88>)
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d017      	beq.n	800cfd0 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800cfa0:	4b0e      	ldr	r3, [pc, #56]	; (800cfdc <FLASH_FlushCaches+0x88>)
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	4a0d      	ldr	r2, [pc, #52]	; (800cfdc <FLASH_FlushCaches+0x88>)
 800cfa6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cfaa:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800cfac:	4b0b      	ldr	r3, [pc, #44]	; (800cfdc <FLASH_FlushCaches+0x88>)
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	4a0a      	ldr	r2, [pc, #40]	; (800cfdc <FLASH_FlushCaches+0x88>)
 800cfb2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800cfb6:	6013      	str	r3, [r2, #0]
 800cfb8:	4b08      	ldr	r3, [pc, #32]	; (800cfdc <FLASH_FlushCaches+0x88>)
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	4a07      	ldr	r2, [pc, #28]	; (800cfdc <FLASH_FlushCaches+0x88>)
 800cfbe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cfc2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800cfc4:	4b05      	ldr	r3, [pc, #20]	; (800cfdc <FLASH_FlushCaches+0x88>)
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	4a04      	ldr	r2, [pc, #16]	; (800cfdc <FLASH_FlushCaches+0x88>)
 800cfca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800cfce:	6013      	str	r3, [r2, #0]
  }
}
 800cfd0:	bf00      	nop
 800cfd2:	46bd      	mov	sp, r7
 800cfd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd8:	4770      	bx	lr
 800cfda:	bf00      	nop
 800cfdc:	40023c00 	.word	0x40023c00

0800cfe0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800cfe0:	b480      	push	{r7}
 800cfe2:	b089      	sub	sp, #36	; 0x24
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	6078      	str	r0, [r7, #4]
 800cfe8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800cfea:	2300      	movs	r3, #0
 800cfec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800cfee:	2300      	movs	r3, #0
 800cff0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800cff2:	2300      	movs	r3, #0
 800cff4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800cff6:	2300      	movs	r3, #0
 800cff8:	61fb      	str	r3, [r7, #28]
 800cffa:	e16b      	b.n	800d2d4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800cffc:	2201      	movs	r2, #1
 800cffe:	69fb      	ldr	r3, [r7, #28]
 800d000:	fa02 f303 	lsl.w	r3, r2, r3
 800d004:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800d006:	683b      	ldr	r3, [r7, #0]
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	697a      	ldr	r2, [r7, #20]
 800d00c:	4013      	ands	r3, r2
 800d00e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800d010:	693a      	ldr	r2, [r7, #16]
 800d012:	697b      	ldr	r3, [r7, #20]
 800d014:	429a      	cmp	r2, r3
 800d016:	f040 815a 	bne.w	800d2ce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800d01a:	683b      	ldr	r3, [r7, #0]
 800d01c:	685b      	ldr	r3, [r3, #4]
 800d01e:	f003 0303 	and.w	r3, r3, #3
 800d022:	2b01      	cmp	r3, #1
 800d024:	d005      	beq.n	800d032 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800d026:	683b      	ldr	r3, [r7, #0]
 800d028:	685b      	ldr	r3, [r3, #4]
 800d02a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800d02e:	2b02      	cmp	r3, #2
 800d030:	d130      	bne.n	800d094 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	689b      	ldr	r3, [r3, #8]
 800d036:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800d038:	69fb      	ldr	r3, [r7, #28]
 800d03a:	005b      	lsls	r3, r3, #1
 800d03c:	2203      	movs	r2, #3
 800d03e:	fa02 f303 	lsl.w	r3, r2, r3
 800d042:	43db      	mvns	r3, r3
 800d044:	69ba      	ldr	r2, [r7, #24]
 800d046:	4013      	ands	r3, r2
 800d048:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800d04a:	683b      	ldr	r3, [r7, #0]
 800d04c:	68da      	ldr	r2, [r3, #12]
 800d04e:	69fb      	ldr	r3, [r7, #28]
 800d050:	005b      	lsls	r3, r3, #1
 800d052:	fa02 f303 	lsl.w	r3, r2, r3
 800d056:	69ba      	ldr	r2, [r7, #24]
 800d058:	4313      	orrs	r3, r2
 800d05a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	69ba      	ldr	r2, [r7, #24]
 800d060:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	685b      	ldr	r3, [r3, #4]
 800d066:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800d068:	2201      	movs	r2, #1
 800d06a:	69fb      	ldr	r3, [r7, #28]
 800d06c:	fa02 f303 	lsl.w	r3, r2, r3
 800d070:	43db      	mvns	r3, r3
 800d072:	69ba      	ldr	r2, [r7, #24]
 800d074:	4013      	ands	r3, r2
 800d076:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800d078:	683b      	ldr	r3, [r7, #0]
 800d07a:	685b      	ldr	r3, [r3, #4]
 800d07c:	091b      	lsrs	r3, r3, #4
 800d07e:	f003 0201 	and.w	r2, r3, #1
 800d082:	69fb      	ldr	r3, [r7, #28]
 800d084:	fa02 f303 	lsl.w	r3, r2, r3
 800d088:	69ba      	ldr	r2, [r7, #24]
 800d08a:	4313      	orrs	r3, r2
 800d08c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	69ba      	ldr	r2, [r7, #24]
 800d092:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800d094:	683b      	ldr	r3, [r7, #0]
 800d096:	685b      	ldr	r3, [r3, #4]
 800d098:	f003 0303 	and.w	r3, r3, #3
 800d09c:	2b03      	cmp	r3, #3
 800d09e:	d017      	beq.n	800d0d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	68db      	ldr	r3, [r3, #12]
 800d0a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800d0a6:	69fb      	ldr	r3, [r7, #28]
 800d0a8:	005b      	lsls	r3, r3, #1
 800d0aa:	2203      	movs	r2, #3
 800d0ac:	fa02 f303 	lsl.w	r3, r2, r3
 800d0b0:	43db      	mvns	r3, r3
 800d0b2:	69ba      	ldr	r2, [r7, #24]
 800d0b4:	4013      	ands	r3, r2
 800d0b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800d0b8:	683b      	ldr	r3, [r7, #0]
 800d0ba:	689a      	ldr	r2, [r3, #8]
 800d0bc:	69fb      	ldr	r3, [r7, #28]
 800d0be:	005b      	lsls	r3, r3, #1
 800d0c0:	fa02 f303 	lsl.w	r3, r2, r3
 800d0c4:	69ba      	ldr	r2, [r7, #24]
 800d0c6:	4313      	orrs	r3, r2
 800d0c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	69ba      	ldr	r2, [r7, #24]
 800d0ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800d0d0:	683b      	ldr	r3, [r7, #0]
 800d0d2:	685b      	ldr	r3, [r3, #4]
 800d0d4:	f003 0303 	and.w	r3, r3, #3
 800d0d8:	2b02      	cmp	r3, #2
 800d0da:	d123      	bne.n	800d124 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800d0dc:	69fb      	ldr	r3, [r7, #28]
 800d0de:	08da      	lsrs	r2, r3, #3
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	3208      	adds	r2, #8
 800d0e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800d0ea:	69fb      	ldr	r3, [r7, #28]
 800d0ec:	f003 0307 	and.w	r3, r3, #7
 800d0f0:	009b      	lsls	r3, r3, #2
 800d0f2:	220f      	movs	r2, #15
 800d0f4:	fa02 f303 	lsl.w	r3, r2, r3
 800d0f8:	43db      	mvns	r3, r3
 800d0fa:	69ba      	ldr	r2, [r7, #24]
 800d0fc:	4013      	ands	r3, r2
 800d0fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800d100:	683b      	ldr	r3, [r7, #0]
 800d102:	691a      	ldr	r2, [r3, #16]
 800d104:	69fb      	ldr	r3, [r7, #28]
 800d106:	f003 0307 	and.w	r3, r3, #7
 800d10a:	009b      	lsls	r3, r3, #2
 800d10c:	fa02 f303 	lsl.w	r3, r2, r3
 800d110:	69ba      	ldr	r2, [r7, #24]
 800d112:	4313      	orrs	r3, r2
 800d114:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800d116:	69fb      	ldr	r3, [r7, #28]
 800d118:	08da      	lsrs	r2, r3, #3
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	3208      	adds	r2, #8
 800d11e:	69b9      	ldr	r1, [r7, #24]
 800d120:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800d12a:	69fb      	ldr	r3, [r7, #28]
 800d12c:	005b      	lsls	r3, r3, #1
 800d12e:	2203      	movs	r2, #3
 800d130:	fa02 f303 	lsl.w	r3, r2, r3
 800d134:	43db      	mvns	r3, r3
 800d136:	69ba      	ldr	r2, [r7, #24]
 800d138:	4013      	ands	r3, r2
 800d13a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800d13c:	683b      	ldr	r3, [r7, #0]
 800d13e:	685b      	ldr	r3, [r3, #4]
 800d140:	f003 0203 	and.w	r2, r3, #3
 800d144:	69fb      	ldr	r3, [r7, #28]
 800d146:	005b      	lsls	r3, r3, #1
 800d148:	fa02 f303 	lsl.w	r3, r2, r3
 800d14c:	69ba      	ldr	r2, [r7, #24]
 800d14e:	4313      	orrs	r3, r2
 800d150:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	69ba      	ldr	r2, [r7, #24]
 800d156:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800d158:	683b      	ldr	r3, [r7, #0]
 800d15a:	685b      	ldr	r3, [r3, #4]
 800d15c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800d160:	2b00      	cmp	r3, #0
 800d162:	f000 80b4 	beq.w	800d2ce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d166:	2300      	movs	r3, #0
 800d168:	60fb      	str	r3, [r7, #12]
 800d16a:	4b60      	ldr	r3, [pc, #384]	; (800d2ec <HAL_GPIO_Init+0x30c>)
 800d16c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d16e:	4a5f      	ldr	r2, [pc, #380]	; (800d2ec <HAL_GPIO_Init+0x30c>)
 800d170:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d174:	6453      	str	r3, [r2, #68]	; 0x44
 800d176:	4b5d      	ldr	r3, [pc, #372]	; (800d2ec <HAL_GPIO_Init+0x30c>)
 800d178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d17a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d17e:	60fb      	str	r3, [r7, #12]
 800d180:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800d182:	4a5b      	ldr	r2, [pc, #364]	; (800d2f0 <HAL_GPIO_Init+0x310>)
 800d184:	69fb      	ldr	r3, [r7, #28]
 800d186:	089b      	lsrs	r3, r3, #2
 800d188:	3302      	adds	r3, #2
 800d18a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d18e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800d190:	69fb      	ldr	r3, [r7, #28]
 800d192:	f003 0303 	and.w	r3, r3, #3
 800d196:	009b      	lsls	r3, r3, #2
 800d198:	220f      	movs	r2, #15
 800d19a:	fa02 f303 	lsl.w	r3, r2, r3
 800d19e:	43db      	mvns	r3, r3
 800d1a0:	69ba      	ldr	r2, [r7, #24]
 800d1a2:	4013      	ands	r3, r2
 800d1a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	4a52      	ldr	r2, [pc, #328]	; (800d2f4 <HAL_GPIO_Init+0x314>)
 800d1aa:	4293      	cmp	r3, r2
 800d1ac:	d02b      	beq.n	800d206 <HAL_GPIO_Init+0x226>
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	4a51      	ldr	r2, [pc, #324]	; (800d2f8 <HAL_GPIO_Init+0x318>)
 800d1b2:	4293      	cmp	r3, r2
 800d1b4:	d025      	beq.n	800d202 <HAL_GPIO_Init+0x222>
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	4a50      	ldr	r2, [pc, #320]	; (800d2fc <HAL_GPIO_Init+0x31c>)
 800d1ba:	4293      	cmp	r3, r2
 800d1bc:	d01f      	beq.n	800d1fe <HAL_GPIO_Init+0x21e>
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	4a4f      	ldr	r2, [pc, #316]	; (800d300 <HAL_GPIO_Init+0x320>)
 800d1c2:	4293      	cmp	r3, r2
 800d1c4:	d019      	beq.n	800d1fa <HAL_GPIO_Init+0x21a>
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	4a4e      	ldr	r2, [pc, #312]	; (800d304 <HAL_GPIO_Init+0x324>)
 800d1ca:	4293      	cmp	r3, r2
 800d1cc:	d013      	beq.n	800d1f6 <HAL_GPIO_Init+0x216>
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	4a4d      	ldr	r2, [pc, #308]	; (800d308 <HAL_GPIO_Init+0x328>)
 800d1d2:	4293      	cmp	r3, r2
 800d1d4:	d00d      	beq.n	800d1f2 <HAL_GPIO_Init+0x212>
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	4a4c      	ldr	r2, [pc, #304]	; (800d30c <HAL_GPIO_Init+0x32c>)
 800d1da:	4293      	cmp	r3, r2
 800d1dc:	d007      	beq.n	800d1ee <HAL_GPIO_Init+0x20e>
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	4a4b      	ldr	r2, [pc, #300]	; (800d310 <HAL_GPIO_Init+0x330>)
 800d1e2:	4293      	cmp	r3, r2
 800d1e4:	d101      	bne.n	800d1ea <HAL_GPIO_Init+0x20a>
 800d1e6:	2307      	movs	r3, #7
 800d1e8:	e00e      	b.n	800d208 <HAL_GPIO_Init+0x228>
 800d1ea:	2308      	movs	r3, #8
 800d1ec:	e00c      	b.n	800d208 <HAL_GPIO_Init+0x228>
 800d1ee:	2306      	movs	r3, #6
 800d1f0:	e00a      	b.n	800d208 <HAL_GPIO_Init+0x228>
 800d1f2:	2305      	movs	r3, #5
 800d1f4:	e008      	b.n	800d208 <HAL_GPIO_Init+0x228>
 800d1f6:	2304      	movs	r3, #4
 800d1f8:	e006      	b.n	800d208 <HAL_GPIO_Init+0x228>
 800d1fa:	2303      	movs	r3, #3
 800d1fc:	e004      	b.n	800d208 <HAL_GPIO_Init+0x228>
 800d1fe:	2302      	movs	r3, #2
 800d200:	e002      	b.n	800d208 <HAL_GPIO_Init+0x228>
 800d202:	2301      	movs	r3, #1
 800d204:	e000      	b.n	800d208 <HAL_GPIO_Init+0x228>
 800d206:	2300      	movs	r3, #0
 800d208:	69fa      	ldr	r2, [r7, #28]
 800d20a:	f002 0203 	and.w	r2, r2, #3
 800d20e:	0092      	lsls	r2, r2, #2
 800d210:	4093      	lsls	r3, r2
 800d212:	69ba      	ldr	r2, [r7, #24]
 800d214:	4313      	orrs	r3, r2
 800d216:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800d218:	4935      	ldr	r1, [pc, #212]	; (800d2f0 <HAL_GPIO_Init+0x310>)
 800d21a:	69fb      	ldr	r3, [r7, #28]
 800d21c:	089b      	lsrs	r3, r3, #2
 800d21e:	3302      	adds	r3, #2
 800d220:	69ba      	ldr	r2, [r7, #24]
 800d222:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800d226:	4b3b      	ldr	r3, [pc, #236]	; (800d314 <HAL_GPIO_Init+0x334>)
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d22c:	693b      	ldr	r3, [r7, #16]
 800d22e:	43db      	mvns	r3, r3
 800d230:	69ba      	ldr	r2, [r7, #24]
 800d232:	4013      	ands	r3, r2
 800d234:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800d236:	683b      	ldr	r3, [r7, #0]
 800d238:	685b      	ldr	r3, [r3, #4]
 800d23a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d003      	beq.n	800d24a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800d242:	69ba      	ldr	r2, [r7, #24]
 800d244:	693b      	ldr	r3, [r7, #16]
 800d246:	4313      	orrs	r3, r2
 800d248:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800d24a:	4a32      	ldr	r2, [pc, #200]	; (800d314 <HAL_GPIO_Init+0x334>)
 800d24c:	69bb      	ldr	r3, [r7, #24]
 800d24e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800d250:	4b30      	ldr	r3, [pc, #192]	; (800d314 <HAL_GPIO_Init+0x334>)
 800d252:	685b      	ldr	r3, [r3, #4]
 800d254:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d256:	693b      	ldr	r3, [r7, #16]
 800d258:	43db      	mvns	r3, r3
 800d25a:	69ba      	ldr	r2, [r7, #24]
 800d25c:	4013      	ands	r3, r2
 800d25e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800d260:	683b      	ldr	r3, [r7, #0]
 800d262:	685b      	ldr	r3, [r3, #4]
 800d264:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d003      	beq.n	800d274 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800d26c:	69ba      	ldr	r2, [r7, #24]
 800d26e:	693b      	ldr	r3, [r7, #16]
 800d270:	4313      	orrs	r3, r2
 800d272:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800d274:	4a27      	ldr	r2, [pc, #156]	; (800d314 <HAL_GPIO_Init+0x334>)
 800d276:	69bb      	ldr	r3, [r7, #24]
 800d278:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800d27a:	4b26      	ldr	r3, [pc, #152]	; (800d314 <HAL_GPIO_Init+0x334>)
 800d27c:	689b      	ldr	r3, [r3, #8]
 800d27e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d280:	693b      	ldr	r3, [r7, #16]
 800d282:	43db      	mvns	r3, r3
 800d284:	69ba      	ldr	r2, [r7, #24]
 800d286:	4013      	ands	r3, r2
 800d288:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800d28a:	683b      	ldr	r3, [r7, #0]
 800d28c:	685b      	ldr	r3, [r3, #4]
 800d28e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d292:	2b00      	cmp	r3, #0
 800d294:	d003      	beq.n	800d29e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800d296:	69ba      	ldr	r2, [r7, #24]
 800d298:	693b      	ldr	r3, [r7, #16]
 800d29a:	4313      	orrs	r3, r2
 800d29c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800d29e:	4a1d      	ldr	r2, [pc, #116]	; (800d314 <HAL_GPIO_Init+0x334>)
 800d2a0:	69bb      	ldr	r3, [r7, #24]
 800d2a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800d2a4:	4b1b      	ldr	r3, [pc, #108]	; (800d314 <HAL_GPIO_Init+0x334>)
 800d2a6:	68db      	ldr	r3, [r3, #12]
 800d2a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d2aa:	693b      	ldr	r3, [r7, #16]
 800d2ac:	43db      	mvns	r3, r3
 800d2ae:	69ba      	ldr	r2, [r7, #24]
 800d2b0:	4013      	ands	r3, r2
 800d2b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800d2b4:	683b      	ldr	r3, [r7, #0]
 800d2b6:	685b      	ldr	r3, [r3, #4]
 800d2b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d003      	beq.n	800d2c8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800d2c0:	69ba      	ldr	r2, [r7, #24]
 800d2c2:	693b      	ldr	r3, [r7, #16]
 800d2c4:	4313      	orrs	r3, r2
 800d2c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800d2c8:	4a12      	ldr	r2, [pc, #72]	; (800d314 <HAL_GPIO_Init+0x334>)
 800d2ca:	69bb      	ldr	r3, [r7, #24]
 800d2cc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800d2ce:	69fb      	ldr	r3, [r7, #28]
 800d2d0:	3301      	adds	r3, #1
 800d2d2:	61fb      	str	r3, [r7, #28]
 800d2d4:	69fb      	ldr	r3, [r7, #28]
 800d2d6:	2b0f      	cmp	r3, #15
 800d2d8:	f67f ae90 	bls.w	800cffc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800d2dc:	bf00      	nop
 800d2de:	bf00      	nop
 800d2e0:	3724      	adds	r7, #36	; 0x24
 800d2e2:	46bd      	mov	sp, r7
 800d2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e8:	4770      	bx	lr
 800d2ea:	bf00      	nop
 800d2ec:	40023800 	.word	0x40023800
 800d2f0:	40013800 	.word	0x40013800
 800d2f4:	40020000 	.word	0x40020000
 800d2f8:	40020400 	.word	0x40020400
 800d2fc:	40020800 	.word	0x40020800
 800d300:	40020c00 	.word	0x40020c00
 800d304:	40021000 	.word	0x40021000
 800d308:	40021400 	.word	0x40021400
 800d30c:	40021800 	.word	0x40021800
 800d310:	40021c00 	.word	0x40021c00
 800d314:	40013c00 	.word	0x40013c00

0800d318 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800d318:	b480      	push	{r7}
 800d31a:	b085      	sub	sp, #20
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	6078      	str	r0, [r7, #4]
 800d320:	460b      	mov	r3, r1
 800d322:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	691a      	ldr	r2, [r3, #16]
 800d328:	887b      	ldrh	r3, [r7, #2]
 800d32a:	4013      	ands	r3, r2
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d002      	beq.n	800d336 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800d330:	2301      	movs	r3, #1
 800d332:	73fb      	strb	r3, [r7, #15]
 800d334:	e001      	b.n	800d33a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800d336:	2300      	movs	r3, #0
 800d338:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800d33a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d33c:	4618      	mov	r0, r3
 800d33e:	3714      	adds	r7, #20
 800d340:	46bd      	mov	sp, r7
 800d342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d346:	4770      	bx	lr

0800d348 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800d348:	b480      	push	{r7}
 800d34a:	b083      	sub	sp, #12
 800d34c:	af00      	add	r7, sp, #0
 800d34e:	6078      	str	r0, [r7, #4]
 800d350:	460b      	mov	r3, r1
 800d352:	807b      	strh	r3, [r7, #2]
 800d354:	4613      	mov	r3, r2
 800d356:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800d358:	787b      	ldrb	r3, [r7, #1]
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d003      	beq.n	800d366 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800d35e:	887a      	ldrh	r2, [r7, #2]
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800d364:	e003      	b.n	800d36e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800d366:	887b      	ldrh	r3, [r7, #2]
 800d368:	041a      	lsls	r2, r3, #16
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	619a      	str	r2, [r3, #24]
}
 800d36e:	bf00      	nop
 800d370:	370c      	adds	r7, #12
 800d372:	46bd      	mov	sp, r7
 800d374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d378:	4770      	bx	lr

0800d37a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800d37a:	b480      	push	{r7}
 800d37c:	b085      	sub	sp, #20
 800d37e:	af00      	add	r7, sp, #0
 800d380:	6078      	str	r0, [r7, #4]
 800d382:	460b      	mov	r3, r1
 800d384:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	695b      	ldr	r3, [r3, #20]
 800d38a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800d38c:	887a      	ldrh	r2, [r7, #2]
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	4013      	ands	r3, r2
 800d392:	041a      	lsls	r2, r3, #16
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	43d9      	mvns	r1, r3
 800d398:	887b      	ldrh	r3, [r7, #2]
 800d39a:	400b      	ands	r3, r1
 800d39c:	431a      	orrs	r2, r3
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	619a      	str	r2, [r3, #24]
}
 800d3a2:	bf00      	nop
 800d3a4:	3714      	adds	r7, #20
 800d3a6:	46bd      	mov	sp, r7
 800d3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ac:	4770      	bx	lr
	...

0800d3b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800d3b0:	b580      	push	{r7, lr}
 800d3b2:	b084      	sub	sp, #16
 800d3b4:	af00      	add	r7, sp, #0
 800d3b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d101      	bne.n	800d3c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800d3be:	2301      	movs	r3, #1
 800d3c0:	e12b      	b.n	800d61a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d3c8:	b2db      	uxtb	r3, r3
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d106      	bne.n	800d3dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	2200      	movs	r2, #0
 800d3d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800d3d6:	6878      	ldr	r0, [r7, #4]
 800d3d8:	f7fc f9d0 	bl	800977c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	2224      	movs	r2, #36	; 0x24
 800d3e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	681a      	ldr	r2, [r3, #0]
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	f022 0201 	bic.w	r2, r2, #1
 800d3f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	681a      	ldr	r2, [r3, #0]
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d402:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	681a      	ldr	r2, [r3, #0]
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d412:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800d414:	f000 fd80 	bl	800df18 <HAL_RCC_GetPCLK1Freq>
 800d418:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	685b      	ldr	r3, [r3, #4]
 800d41e:	4a81      	ldr	r2, [pc, #516]	; (800d624 <HAL_I2C_Init+0x274>)
 800d420:	4293      	cmp	r3, r2
 800d422:	d807      	bhi.n	800d434 <HAL_I2C_Init+0x84>
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	4a80      	ldr	r2, [pc, #512]	; (800d628 <HAL_I2C_Init+0x278>)
 800d428:	4293      	cmp	r3, r2
 800d42a:	bf94      	ite	ls
 800d42c:	2301      	movls	r3, #1
 800d42e:	2300      	movhi	r3, #0
 800d430:	b2db      	uxtb	r3, r3
 800d432:	e006      	b.n	800d442 <HAL_I2C_Init+0x92>
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	4a7d      	ldr	r2, [pc, #500]	; (800d62c <HAL_I2C_Init+0x27c>)
 800d438:	4293      	cmp	r3, r2
 800d43a:	bf94      	ite	ls
 800d43c:	2301      	movls	r3, #1
 800d43e:	2300      	movhi	r3, #0
 800d440:	b2db      	uxtb	r3, r3
 800d442:	2b00      	cmp	r3, #0
 800d444:	d001      	beq.n	800d44a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800d446:	2301      	movs	r3, #1
 800d448:	e0e7      	b.n	800d61a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	4a78      	ldr	r2, [pc, #480]	; (800d630 <HAL_I2C_Init+0x280>)
 800d44e:	fba2 2303 	umull	r2, r3, r2, r3
 800d452:	0c9b      	lsrs	r3, r3, #18
 800d454:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	685b      	ldr	r3, [r3, #4]
 800d45c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	68ba      	ldr	r2, [r7, #8]
 800d466:	430a      	orrs	r2, r1
 800d468:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	6a1b      	ldr	r3, [r3, #32]
 800d470:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	685b      	ldr	r3, [r3, #4]
 800d478:	4a6a      	ldr	r2, [pc, #424]	; (800d624 <HAL_I2C_Init+0x274>)
 800d47a:	4293      	cmp	r3, r2
 800d47c:	d802      	bhi.n	800d484 <HAL_I2C_Init+0xd4>
 800d47e:	68bb      	ldr	r3, [r7, #8]
 800d480:	3301      	adds	r3, #1
 800d482:	e009      	b.n	800d498 <HAL_I2C_Init+0xe8>
 800d484:	68bb      	ldr	r3, [r7, #8]
 800d486:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800d48a:	fb02 f303 	mul.w	r3, r2, r3
 800d48e:	4a69      	ldr	r2, [pc, #420]	; (800d634 <HAL_I2C_Init+0x284>)
 800d490:	fba2 2303 	umull	r2, r3, r2, r3
 800d494:	099b      	lsrs	r3, r3, #6
 800d496:	3301      	adds	r3, #1
 800d498:	687a      	ldr	r2, [r7, #4]
 800d49a:	6812      	ldr	r2, [r2, #0]
 800d49c:	430b      	orrs	r3, r1
 800d49e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	69db      	ldr	r3, [r3, #28]
 800d4a6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800d4aa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	685b      	ldr	r3, [r3, #4]
 800d4b2:	495c      	ldr	r1, [pc, #368]	; (800d624 <HAL_I2C_Init+0x274>)
 800d4b4:	428b      	cmp	r3, r1
 800d4b6:	d819      	bhi.n	800d4ec <HAL_I2C_Init+0x13c>
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	1e59      	subs	r1, r3, #1
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	685b      	ldr	r3, [r3, #4]
 800d4c0:	005b      	lsls	r3, r3, #1
 800d4c2:	fbb1 f3f3 	udiv	r3, r1, r3
 800d4c6:	1c59      	adds	r1, r3, #1
 800d4c8:	f640 73fc 	movw	r3, #4092	; 0xffc
 800d4cc:	400b      	ands	r3, r1
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d00a      	beq.n	800d4e8 <HAL_I2C_Init+0x138>
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	1e59      	subs	r1, r3, #1
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	685b      	ldr	r3, [r3, #4]
 800d4da:	005b      	lsls	r3, r3, #1
 800d4dc:	fbb1 f3f3 	udiv	r3, r1, r3
 800d4e0:	3301      	adds	r3, #1
 800d4e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d4e6:	e051      	b.n	800d58c <HAL_I2C_Init+0x1dc>
 800d4e8:	2304      	movs	r3, #4
 800d4ea:	e04f      	b.n	800d58c <HAL_I2C_Init+0x1dc>
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	689b      	ldr	r3, [r3, #8]
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d111      	bne.n	800d518 <HAL_I2C_Init+0x168>
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	1e58      	subs	r0, r3, #1
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	6859      	ldr	r1, [r3, #4]
 800d4fc:	460b      	mov	r3, r1
 800d4fe:	005b      	lsls	r3, r3, #1
 800d500:	440b      	add	r3, r1
 800d502:	fbb0 f3f3 	udiv	r3, r0, r3
 800d506:	3301      	adds	r3, #1
 800d508:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	bf0c      	ite	eq
 800d510:	2301      	moveq	r3, #1
 800d512:	2300      	movne	r3, #0
 800d514:	b2db      	uxtb	r3, r3
 800d516:	e012      	b.n	800d53e <HAL_I2C_Init+0x18e>
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	1e58      	subs	r0, r3, #1
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	6859      	ldr	r1, [r3, #4]
 800d520:	460b      	mov	r3, r1
 800d522:	009b      	lsls	r3, r3, #2
 800d524:	440b      	add	r3, r1
 800d526:	0099      	lsls	r1, r3, #2
 800d528:	440b      	add	r3, r1
 800d52a:	fbb0 f3f3 	udiv	r3, r0, r3
 800d52e:	3301      	adds	r3, #1
 800d530:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d534:	2b00      	cmp	r3, #0
 800d536:	bf0c      	ite	eq
 800d538:	2301      	moveq	r3, #1
 800d53a:	2300      	movne	r3, #0
 800d53c:	b2db      	uxtb	r3, r3
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d001      	beq.n	800d546 <HAL_I2C_Init+0x196>
 800d542:	2301      	movs	r3, #1
 800d544:	e022      	b.n	800d58c <HAL_I2C_Init+0x1dc>
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	689b      	ldr	r3, [r3, #8]
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d10e      	bne.n	800d56c <HAL_I2C_Init+0x1bc>
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	1e58      	subs	r0, r3, #1
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	6859      	ldr	r1, [r3, #4]
 800d556:	460b      	mov	r3, r1
 800d558:	005b      	lsls	r3, r3, #1
 800d55a:	440b      	add	r3, r1
 800d55c:	fbb0 f3f3 	udiv	r3, r0, r3
 800d560:	3301      	adds	r3, #1
 800d562:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d566:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d56a:	e00f      	b.n	800d58c <HAL_I2C_Init+0x1dc>
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	1e58      	subs	r0, r3, #1
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	6859      	ldr	r1, [r3, #4]
 800d574:	460b      	mov	r3, r1
 800d576:	009b      	lsls	r3, r3, #2
 800d578:	440b      	add	r3, r1
 800d57a:	0099      	lsls	r1, r3, #2
 800d57c:	440b      	add	r3, r1
 800d57e:	fbb0 f3f3 	udiv	r3, r0, r3
 800d582:	3301      	adds	r3, #1
 800d584:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d588:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d58c:	6879      	ldr	r1, [r7, #4]
 800d58e:	6809      	ldr	r1, [r1, #0]
 800d590:	4313      	orrs	r3, r2
 800d592:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	69da      	ldr	r2, [r3, #28]
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	6a1b      	ldr	r3, [r3, #32]
 800d5a6:	431a      	orrs	r2, r3
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	430a      	orrs	r2, r1
 800d5ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	689b      	ldr	r3, [r3, #8]
 800d5b6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800d5ba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d5be:	687a      	ldr	r2, [r7, #4]
 800d5c0:	6911      	ldr	r1, [r2, #16]
 800d5c2:	687a      	ldr	r2, [r7, #4]
 800d5c4:	68d2      	ldr	r2, [r2, #12]
 800d5c6:	4311      	orrs	r1, r2
 800d5c8:	687a      	ldr	r2, [r7, #4]
 800d5ca:	6812      	ldr	r2, [r2, #0]
 800d5cc:	430b      	orrs	r3, r1
 800d5ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	68db      	ldr	r3, [r3, #12]
 800d5d6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	695a      	ldr	r2, [r3, #20]
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	699b      	ldr	r3, [r3, #24]
 800d5e2:	431a      	orrs	r2, r3
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	430a      	orrs	r2, r1
 800d5ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	681a      	ldr	r2, [r3, #0]
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	f042 0201 	orr.w	r2, r2, #1
 800d5fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	2200      	movs	r2, #0
 800d600:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	2220      	movs	r2, #32
 800d606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	2200      	movs	r2, #0
 800d60e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	2200      	movs	r2, #0
 800d614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800d618:	2300      	movs	r3, #0
}
 800d61a:	4618      	mov	r0, r3
 800d61c:	3710      	adds	r7, #16
 800d61e:	46bd      	mov	sp, r7
 800d620:	bd80      	pop	{r7, pc}
 800d622:	bf00      	nop
 800d624:	000186a0 	.word	0x000186a0
 800d628:	001e847f 	.word	0x001e847f
 800d62c:	003d08ff 	.word	0x003d08ff
 800d630:	431bde83 	.word	0x431bde83
 800d634:	10624dd3 	.word	0x10624dd3

0800d638 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d638:	b580      	push	{r7, lr}
 800d63a:	b086      	sub	sp, #24
 800d63c:	af00      	add	r7, sp, #0
 800d63e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	2b00      	cmp	r3, #0
 800d644:	d101      	bne.n	800d64a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800d646:	2301      	movs	r3, #1
 800d648:	e267      	b.n	800db1a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	f003 0301 	and.w	r3, r3, #1
 800d652:	2b00      	cmp	r3, #0
 800d654:	d075      	beq.n	800d742 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800d656:	4b88      	ldr	r3, [pc, #544]	; (800d878 <HAL_RCC_OscConfig+0x240>)
 800d658:	689b      	ldr	r3, [r3, #8]
 800d65a:	f003 030c 	and.w	r3, r3, #12
 800d65e:	2b04      	cmp	r3, #4
 800d660:	d00c      	beq.n	800d67c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d662:	4b85      	ldr	r3, [pc, #532]	; (800d878 <HAL_RCC_OscConfig+0x240>)
 800d664:	689b      	ldr	r3, [r3, #8]
 800d666:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800d66a:	2b08      	cmp	r3, #8
 800d66c:	d112      	bne.n	800d694 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d66e:	4b82      	ldr	r3, [pc, #520]	; (800d878 <HAL_RCC_OscConfig+0x240>)
 800d670:	685b      	ldr	r3, [r3, #4]
 800d672:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d676:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d67a:	d10b      	bne.n	800d694 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d67c:	4b7e      	ldr	r3, [pc, #504]	; (800d878 <HAL_RCC_OscConfig+0x240>)
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d684:	2b00      	cmp	r3, #0
 800d686:	d05b      	beq.n	800d740 <HAL_RCC_OscConfig+0x108>
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	685b      	ldr	r3, [r3, #4]
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d157      	bne.n	800d740 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800d690:	2301      	movs	r3, #1
 800d692:	e242      	b.n	800db1a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	685b      	ldr	r3, [r3, #4]
 800d698:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d69c:	d106      	bne.n	800d6ac <HAL_RCC_OscConfig+0x74>
 800d69e:	4b76      	ldr	r3, [pc, #472]	; (800d878 <HAL_RCC_OscConfig+0x240>)
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	4a75      	ldr	r2, [pc, #468]	; (800d878 <HAL_RCC_OscConfig+0x240>)
 800d6a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d6a8:	6013      	str	r3, [r2, #0]
 800d6aa:	e01d      	b.n	800d6e8 <HAL_RCC_OscConfig+0xb0>
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	685b      	ldr	r3, [r3, #4]
 800d6b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d6b4:	d10c      	bne.n	800d6d0 <HAL_RCC_OscConfig+0x98>
 800d6b6:	4b70      	ldr	r3, [pc, #448]	; (800d878 <HAL_RCC_OscConfig+0x240>)
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	4a6f      	ldr	r2, [pc, #444]	; (800d878 <HAL_RCC_OscConfig+0x240>)
 800d6bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d6c0:	6013      	str	r3, [r2, #0]
 800d6c2:	4b6d      	ldr	r3, [pc, #436]	; (800d878 <HAL_RCC_OscConfig+0x240>)
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	4a6c      	ldr	r2, [pc, #432]	; (800d878 <HAL_RCC_OscConfig+0x240>)
 800d6c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d6cc:	6013      	str	r3, [r2, #0]
 800d6ce:	e00b      	b.n	800d6e8 <HAL_RCC_OscConfig+0xb0>
 800d6d0:	4b69      	ldr	r3, [pc, #420]	; (800d878 <HAL_RCC_OscConfig+0x240>)
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	4a68      	ldr	r2, [pc, #416]	; (800d878 <HAL_RCC_OscConfig+0x240>)
 800d6d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d6da:	6013      	str	r3, [r2, #0]
 800d6dc:	4b66      	ldr	r3, [pc, #408]	; (800d878 <HAL_RCC_OscConfig+0x240>)
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	4a65      	ldr	r2, [pc, #404]	; (800d878 <HAL_RCC_OscConfig+0x240>)
 800d6e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d6e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	685b      	ldr	r3, [r3, #4]
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d013      	beq.n	800d718 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d6f0:	f7fd fac0 	bl	800ac74 <HAL_GetTick>
 800d6f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d6f6:	e008      	b.n	800d70a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d6f8:	f7fd fabc 	bl	800ac74 <HAL_GetTick>
 800d6fc:	4602      	mov	r2, r0
 800d6fe:	693b      	ldr	r3, [r7, #16]
 800d700:	1ad3      	subs	r3, r2, r3
 800d702:	2b64      	cmp	r3, #100	; 0x64
 800d704:	d901      	bls.n	800d70a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800d706:	2303      	movs	r3, #3
 800d708:	e207      	b.n	800db1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d70a:	4b5b      	ldr	r3, [pc, #364]	; (800d878 <HAL_RCC_OscConfig+0x240>)
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d712:	2b00      	cmp	r3, #0
 800d714:	d0f0      	beq.n	800d6f8 <HAL_RCC_OscConfig+0xc0>
 800d716:	e014      	b.n	800d742 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d718:	f7fd faac 	bl	800ac74 <HAL_GetTick>
 800d71c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d71e:	e008      	b.n	800d732 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d720:	f7fd faa8 	bl	800ac74 <HAL_GetTick>
 800d724:	4602      	mov	r2, r0
 800d726:	693b      	ldr	r3, [r7, #16]
 800d728:	1ad3      	subs	r3, r2, r3
 800d72a:	2b64      	cmp	r3, #100	; 0x64
 800d72c:	d901      	bls.n	800d732 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800d72e:	2303      	movs	r3, #3
 800d730:	e1f3      	b.n	800db1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d732:	4b51      	ldr	r3, [pc, #324]	; (800d878 <HAL_RCC_OscConfig+0x240>)
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d1f0      	bne.n	800d720 <HAL_RCC_OscConfig+0xe8>
 800d73e:	e000      	b.n	800d742 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d740:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	f003 0302 	and.w	r3, r3, #2
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d063      	beq.n	800d816 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800d74e:	4b4a      	ldr	r3, [pc, #296]	; (800d878 <HAL_RCC_OscConfig+0x240>)
 800d750:	689b      	ldr	r3, [r3, #8]
 800d752:	f003 030c 	and.w	r3, r3, #12
 800d756:	2b00      	cmp	r3, #0
 800d758:	d00b      	beq.n	800d772 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d75a:	4b47      	ldr	r3, [pc, #284]	; (800d878 <HAL_RCC_OscConfig+0x240>)
 800d75c:	689b      	ldr	r3, [r3, #8]
 800d75e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800d762:	2b08      	cmp	r3, #8
 800d764:	d11c      	bne.n	800d7a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d766:	4b44      	ldr	r3, [pc, #272]	; (800d878 <HAL_RCC_OscConfig+0x240>)
 800d768:	685b      	ldr	r3, [r3, #4]
 800d76a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d116      	bne.n	800d7a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d772:	4b41      	ldr	r3, [pc, #260]	; (800d878 <HAL_RCC_OscConfig+0x240>)
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	f003 0302 	and.w	r3, r3, #2
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d005      	beq.n	800d78a <HAL_RCC_OscConfig+0x152>
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	68db      	ldr	r3, [r3, #12]
 800d782:	2b01      	cmp	r3, #1
 800d784:	d001      	beq.n	800d78a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800d786:	2301      	movs	r3, #1
 800d788:	e1c7      	b.n	800db1a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d78a:	4b3b      	ldr	r3, [pc, #236]	; (800d878 <HAL_RCC_OscConfig+0x240>)
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	691b      	ldr	r3, [r3, #16]
 800d796:	00db      	lsls	r3, r3, #3
 800d798:	4937      	ldr	r1, [pc, #220]	; (800d878 <HAL_RCC_OscConfig+0x240>)
 800d79a:	4313      	orrs	r3, r2
 800d79c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d79e:	e03a      	b.n	800d816 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	68db      	ldr	r3, [r3, #12]
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d020      	beq.n	800d7ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800d7a8:	4b34      	ldr	r3, [pc, #208]	; (800d87c <HAL_RCC_OscConfig+0x244>)
 800d7aa:	2201      	movs	r2, #1
 800d7ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d7ae:	f7fd fa61 	bl	800ac74 <HAL_GetTick>
 800d7b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d7b4:	e008      	b.n	800d7c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d7b6:	f7fd fa5d 	bl	800ac74 <HAL_GetTick>
 800d7ba:	4602      	mov	r2, r0
 800d7bc:	693b      	ldr	r3, [r7, #16]
 800d7be:	1ad3      	subs	r3, r2, r3
 800d7c0:	2b02      	cmp	r3, #2
 800d7c2:	d901      	bls.n	800d7c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800d7c4:	2303      	movs	r3, #3
 800d7c6:	e1a8      	b.n	800db1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d7c8:	4b2b      	ldr	r3, [pc, #172]	; (800d878 <HAL_RCC_OscConfig+0x240>)
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	f003 0302 	and.w	r3, r3, #2
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d0f0      	beq.n	800d7b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d7d4:	4b28      	ldr	r3, [pc, #160]	; (800d878 <HAL_RCC_OscConfig+0x240>)
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	691b      	ldr	r3, [r3, #16]
 800d7e0:	00db      	lsls	r3, r3, #3
 800d7e2:	4925      	ldr	r1, [pc, #148]	; (800d878 <HAL_RCC_OscConfig+0x240>)
 800d7e4:	4313      	orrs	r3, r2
 800d7e6:	600b      	str	r3, [r1, #0]
 800d7e8:	e015      	b.n	800d816 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d7ea:	4b24      	ldr	r3, [pc, #144]	; (800d87c <HAL_RCC_OscConfig+0x244>)
 800d7ec:	2200      	movs	r2, #0
 800d7ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d7f0:	f7fd fa40 	bl	800ac74 <HAL_GetTick>
 800d7f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d7f6:	e008      	b.n	800d80a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d7f8:	f7fd fa3c 	bl	800ac74 <HAL_GetTick>
 800d7fc:	4602      	mov	r2, r0
 800d7fe:	693b      	ldr	r3, [r7, #16]
 800d800:	1ad3      	subs	r3, r2, r3
 800d802:	2b02      	cmp	r3, #2
 800d804:	d901      	bls.n	800d80a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800d806:	2303      	movs	r3, #3
 800d808:	e187      	b.n	800db1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d80a:	4b1b      	ldr	r3, [pc, #108]	; (800d878 <HAL_RCC_OscConfig+0x240>)
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	f003 0302 	and.w	r3, r3, #2
 800d812:	2b00      	cmp	r3, #0
 800d814:	d1f0      	bne.n	800d7f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	f003 0308 	and.w	r3, r3, #8
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d036      	beq.n	800d890 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	695b      	ldr	r3, [r3, #20]
 800d826:	2b00      	cmp	r3, #0
 800d828:	d016      	beq.n	800d858 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d82a:	4b15      	ldr	r3, [pc, #84]	; (800d880 <HAL_RCC_OscConfig+0x248>)
 800d82c:	2201      	movs	r2, #1
 800d82e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d830:	f7fd fa20 	bl	800ac74 <HAL_GetTick>
 800d834:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d836:	e008      	b.n	800d84a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d838:	f7fd fa1c 	bl	800ac74 <HAL_GetTick>
 800d83c:	4602      	mov	r2, r0
 800d83e:	693b      	ldr	r3, [r7, #16]
 800d840:	1ad3      	subs	r3, r2, r3
 800d842:	2b02      	cmp	r3, #2
 800d844:	d901      	bls.n	800d84a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800d846:	2303      	movs	r3, #3
 800d848:	e167      	b.n	800db1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d84a:	4b0b      	ldr	r3, [pc, #44]	; (800d878 <HAL_RCC_OscConfig+0x240>)
 800d84c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d84e:	f003 0302 	and.w	r3, r3, #2
 800d852:	2b00      	cmp	r3, #0
 800d854:	d0f0      	beq.n	800d838 <HAL_RCC_OscConfig+0x200>
 800d856:	e01b      	b.n	800d890 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d858:	4b09      	ldr	r3, [pc, #36]	; (800d880 <HAL_RCC_OscConfig+0x248>)
 800d85a:	2200      	movs	r2, #0
 800d85c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d85e:	f7fd fa09 	bl	800ac74 <HAL_GetTick>
 800d862:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d864:	e00e      	b.n	800d884 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d866:	f7fd fa05 	bl	800ac74 <HAL_GetTick>
 800d86a:	4602      	mov	r2, r0
 800d86c:	693b      	ldr	r3, [r7, #16]
 800d86e:	1ad3      	subs	r3, r2, r3
 800d870:	2b02      	cmp	r3, #2
 800d872:	d907      	bls.n	800d884 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800d874:	2303      	movs	r3, #3
 800d876:	e150      	b.n	800db1a <HAL_RCC_OscConfig+0x4e2>
 800d878:	40023800 	.word	0x40023800
 800d87c:	42470000 	.word	0x42470000
 800d880:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d884:	4b88      	ldr	r3, [pc, #544]	; (800daa8 <HAL_RCC_OscConfig+0x470>)
 800d886:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d888:	f003 0302 	and.w	r3, r3, #2
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d1ea      	bne.n	800d866 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	f003 0304 	and.w	r3, r3, #4
 800d898:	2b00      	cmp	r3, #0
 800d89a:	f000 8097 	beq.w	800d9cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d89e:	2300      	movs	r3, #0
 800d8a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d8a2:	4b81      	ldr	r3, [pc, #516]	; (800daa8 <HAL_RCC_OscConfig+0x470>)
 800d8a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d10f      	bne.n	800d8ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d8ae:	2300      	movs	r3, #0
 800d8b0:	60bb      	str	r3, [r7, #8]
 800d8b2:	4b7d      	ldr	r3, [pc, #500]	; (800daa8 <HAL_RCC_OscConfig+0x470>)
 800d8b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8b6:	4a7c      	ldr	r2, [pc, #496]	; (800daa8 <HAL_RCC_OscConfig+0x470>)
 800d8b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d8bc:	6413      	str	r3, [r2, #64]	; 0x40
 800d8be:	4b7a      	ldr	r3, [pc, #488]	; (800daa8 <HAL_RCC_OscConfig+0x470>)
 800d8c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d8c6:	60bb      	str	r3, [r7, #8]
 800d8c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d8ca:	2301      	movs	r3, #1
 800d8cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d8ce:	4b77      	ldr	r3, [pc, #476]	; (800daac <HAL_RCC_OscConfig+0x474>)
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d118      	bne.n	800d90c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800d8da:	4b74      	ldr	r3, [pc, #464]	; (800daac <HAL_RCC_OscConfig+0x474>)
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	4a73      	ldr	r2, [pc, #460]	; (800daac <HAL_RCC_OscConfig+0x474>)
 800d8e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d8e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800d8e6:	f7fd f9c5 	bl	800ac74 <HAL_GetTick>
 800d8ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d8ec:	e008      	b.n	800d900 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d8ee:	f7fd f9c1 	bl	800ac74 <HAL_GetTick>
 800d8f2:	4602      	mov	r2, r0
 800d8f4:	693b      	ldr	r3, [r7, #16]
 800d8f6:	1ad3      	subs	r3, r2, r3
 800d8f8:	2b02      	cmp	r3, #2
 800d8fa:	d901      	bls.n	800d900 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800d8fc:	2303      	movs	r3, #3
 800d8fe:	e10c      	b.n	800db1a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d900:	4b6a      	ldr	r3, [pc, #424]	; (800daac <HAL_RCC_OscConfig+0x474>)
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d0f0      	beq.n	800d8ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	689b      	ldr	r3, [r3, #8]
 800d910:	2b01      	cmp	r3, #1
 800d912:	d106      	bne.n	800d922 <HAL_RCC_OscConfig+0x2ea>
 800d914:	4b64      	ldr	r3, [pc, #400]	; (800daa8 <HAL_RCC_OscConfig+0x470>)
 800d916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d918:	4a63      	ldr	r2, [pc, #396]	; (800daa8 <HAL_RCC_OscConfig+0x470>)
 800d91a:	f043 0301 	orr.w	r3, r3, #1
 800d91e:	6713      	str	r3, [r2, #112]	; 0x70
 800d920:	e01c      	b.n	800d95c <HAL_RCC_OscConfig+0x324>
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	689b      	ldr	r3, [r3, #8]
 800d926:	2b05      	cmp	r3, #5
 800d928:	d10c      	bne.n	800d944 <HAL_RCC_OscConfig+0x30c>
 800d92a:	4b5f      	ldr	r3, [pc, #380]	; (800daa8 <HAL_RCC_OscConfig+0x470>)
 800d92c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d92e:	4a5e      	ldr	r2, [pc, #376]	; (800daa8 <HAL_RCC_OscConfig+0x470>)
 800d930:	f043 0304 	orr.w	r3, r3, #4
 800d934:	6713      	str	r3, [r2, #112]	; 0x70
 800d936:	4b5c      	ldr	r3, [pc, #368]	; (800daa8 <HAL_RCC_OscConfig+0x470>)
 800d938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d93a:	4a5b      	ldr	r2, [pc, #364]	; (800daa8 <HAL_RCC_OscConfig+0x470>)
 800d93c:	f043 0301 	orr.w	r3, r3, #1
 800d940:	6713      	str	r3, [r2, #112]	; 0x70
 800d942:	e00b      	b.n	800d95c <HAL_RCC_OscConfig+0x324>
 800d944:	4b58      	ldr	r3, [pc, #352]	; (800daa8 <HAL_RCC_OscConfig+0x470>)
 800d946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d948:	4a57      	ldr	r2, [pc, #348]	; (800daa8 <HAL_RCC_OscConfig+0x470>)
 800d94a:	f023 0301 	bic.w	r3, r3, #1
 800d94e:	6713      	str	r3, [r2, #112]	; 0x70
 800d950:	4b55      	ldr	r3, [pc, #340]	; (800daa8 <HAL_RCC_OscConfig+0x470>)
 800d952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d954:	4a54      	ldr	r2, [pc, #336]	; (800daa8 <HAL_RCC_OscConfig+0x470>)
 800d956:	f023 0304 	bic.w	r3, r3, #4
 800d95a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	689b      	ldr	r3, [r3, #8]
 800d960:	2b00      	cmp	r3, #0
 800d962:	d015      	beq.n	800d990 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d964:	f7fd f986 	bl	800ac74 <HAL_GetTick>
 800d968:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d96a:	e00a      	b.n	800d982 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d96c:	f7fd f982 	bl	800ac74 <HAL_GetTick>
 800d970:	4602      	mov	r2, r0
 800d972:	693b      	ldr	r3, [r7, #16]
 800d974:	1ad3      	subs	r3, r2, r3
 800d976:	f241 3288 	movw	r2, #5000	; 0x1388
 800d97a:	4293      	cmp	r3, r2
 800d97c:	d901      	bls.n	800d982 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800d97e:	2303      	movs	r3, #3
 800d980:	e0cb      	b.n	800db1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d982:	4b49      	ldr	r3, [pc, #292]	; (800daa8 <HAL_RCC_OscConfig+0x470>)
 800d984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d986:	f003 0302 	and.w	r3, r3, #2
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d0ee      	beq.n	800d96c <HAL_RCC_OscConfig+0x334>
 800d98e:	e014      	b.n	800d9ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d990:	f7fd f970 	bl	800ac74 <HAL_GetTick>
 800d994:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d996:	e00a      	b.n	800d9ae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d998:	f7fd f96c 	bl	800ac74 <HAL_GetTick>
 800d99c:	4602      	mov	r2, r0
 800d99e:	693b      	ldr	r3, [r7, #16]
 800d9a0:	1ad3      	subs	r3, r2, r3
 800d9a2:	f241 3288 	movw	r2, #5000	; 0x1388
 800d9a6:	4293      	cmp	r3, r2
 800d9a8:	d901      	bls.n	800d9ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800d9aa:	2303      	movs	r3, #3
 800d9ac:	e0b5      	b.n	800db1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d9ae:	4b3e      	ldr	r3, [pc, #248]	; (800daa8 <HAL_RCC_OscConfig+0x470>)
 800d9b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d9b2:	f003 0302 	and.w	r3, r3, #2
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d1ee      	bne.n	800d998 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800d9ba:	7dfb      	ldrb	r3, [r7, #23]
 800d9bc:	2b01      	cmp	r3, #1
 800d9be:	d105      	bne.n	800d9cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d9c0:	4b39      	ldr	r3, [pc, #228]	; (800daa8 <HAL_RCC_OscConfig+0x470>)
 800d9c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9c4:	4a38      	ldr	r2, [pc, #224]	; (800daa8 <HAL_RCC_OscConfig+0x470>)
 800d9c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d9ca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	699b      	ldr	r3, [r3, #24]
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	f000 80a1 	beq.w	800db18 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800d9d6:	4b34      	ldr	r3, [pc, #208]	; (800daa8 <HAL_RCC_OscConfig+0x470>)
 800d9d8:	689b      	ldr	r3, [r3, #8]
 800d9da:	f003 030c 	and.w	r3, r3, #12
 800d9de:	2b08      	cmp	r3, #8
 800d9e0:	d05c      	beq.n	800da9c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	699b      	ldr	r3, [r3, #24]
 800d9e6:	2b02      	cmp	r3, #2
 800d9e8:	d141      	bne.n	800da6e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d9ea:	4b31      	ldr	r3, [pc, #196]	; (800dab0 <HAL_RCC_OscConfig+0x478>)
 800d9ec:	2200      	movs	r2, #0
 800d9ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d9f0:	f7fd f940 	bl	800ac74 <HAL_GetTick>
 800d9f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d9f6:	e008      	b.n	800da0a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d9f8:	f7fd f93c 	bl	800ac74 <HAL_GetTick>
 800d9fc:	4602      	mov	r2, r0
 800d9fe:	693b      	ldr	r3, [r7, #16]
 800da00:	1ad3      	subs	r3, r2, r3
 800da02:	2b02      	cmp	r3, #2
 800da04:	d901      	bls.n	800da0a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800da06:	2303      	movs	r3, #3
 800da08:	e087      	b.n	800db1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800da0a:	4b27      	ldr	r3, [pc, #156]	; (800daa8 <HAL_RCC_OscConfig+0x470>)
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800da12:	2b00      	cmp	r3, #0
 800da14:	d1f0      	bne.n	800d9f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	69da      	ldr	r2, [r3, #28]
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	6a1b      	ldr	r3, [r3, #32]
 800da1e:	431a      	orrs	r2, r3
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da24:	019b      	lsls	r3, r3, #6
 800da26:	431a      	orrs	r2, r3
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da2c:	085b      	lsrs	r3, r3, #1
 800da2e:	3b01      	subs	r3, #1
 800da30:	041b      	lsls	r3, r3, #16
 800da32:	431a      	orrs	r2, r3
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da38:	061b      	lsls	r3, r3, #24
 800da3a:	491b      	ldr	r1, [pc, #108]	; (800daa8 <HAL_RCC_OscConfig+0x470>)
 800da3c:	4313      	orrs	r3, r2
 800da3e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800da40:	4b1b      	ldr	r3, [pc, #108]	; (800dab0 <HAL_RCC_OscConfig+0x478>)
 800da42:	2201      	movs	r2, #1
 800da44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800da46:	f7fd f915 	bl	800ac74 <HAL_GetTick>
 800da4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800da4c:	e008      	b.n	800da60 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800da4e:	f7fd f911 	bl	800ac74 <HAL_GetTick>
 800da52:	4602      	mov	r2, r0
 800da54:	693b      	ldr	r3, [r7, #16]
 800da56:	1ad3      	subs	r3, r2, r3
 800da58:	2b02      	cmp	r3, #2
 800da5a:	d901      	bls.n	800da60 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800da5c:	2303      	movs	r3, #3
 800da5e:	e05c      	b.n	800db1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800da60:	4b11      	ldr	r3, [pc, #68]	; (800daa8 <HAL_RCC_OscConfig+0x470>)
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d0f0      	beq.n	800da4e <HAL_RCC_OscConfig+0x416>
 800da6c:	e054      	b.n	800db18 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800da6e:	4b10      	ldr	r3, [pc, #64]	; (800dab0 <HAL_RCC_OscConfig+0x478>)
 800da70:	2200      	movs	r2, #0
 800da72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800da74:	f7fd f8fe 	bl	800ac74 <HAL_GetTick>
 800da78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800da7a:	e008      	b.n	800da8e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800da7c:	f7fd f8fa 	bl	800ac74 <HAL_GetTick>
 800da80:	4602      	mov	r2, r0
 800da82:	693b      	ldr	r3, [r7, #16]
 800da84:	1ad3      	subs	r3, r2, r3
 800da86:	2b02      	cmp	r3, #2
 800da88:	d901      	bls.n	800da8e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800da8a:	2303      	movs	r3, #3
 800da8c:	e045      	b.n	800db1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800da8e:	4b06      	ldr	r3, [pc, #24]	; (800daa8 <HAL_RCC_OscConfig+0x470>)
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800da96:	2b00      	cmp	r3, #0
 800da98:	d1f0      	bne.n	800da7c <HAL_RCC_OscConfig+0x444>
 800da9a:	e03d      	b.n	800db18 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	699b      	ldr	r3, [r3, #24]
 800daa0:	2b01      	cmp	r3, #1
 800daa2:	d107      	bne.n	800dab4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800daa4:	2301      	movs	r3, #1
 800daa6:	e038      	b.n	800db1a <HAL_RCC_OscConfig+0x4e2>
 800daa8:	40023800 	.word	0x40023800
 800daac:	40007000 	.word	0x40007000
 800dab0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800dab4:	4b1b      	ldr	r3, [pc, #108]	; (800db24 <HAL_RCC_OscConfig+0x4ec>)
 800dab6:	685b      	ldr	r3, [r3, #4]
 800dab8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	699b      	ldr	r3, [r3, #24]
 800dabe:	2b01      	cmp	r3, #1
 800dac0:	d028      	beq.n	800db14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800dacc:	429a      	cmp	r2, r3
 800dace:	d121      	bne.n	800db14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800dada:	429a      	cmp	r2, r3
 800dadc:	d11a      	bne.n	800db14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800dade:	68fa      	ldr	r2, [r7, #12]
 800dae0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800dae4:	4013      	ands	r3, r2
 800dae6:	687a      	ldr	r2, [r7, #4]
 800dae8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800daea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800daec:	4293      	cmp	r3, r2
 800daee:	d111      	bne.n	800db14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dafa:	085b      	lsrs	r3, r3, #1
 800dafc:	3b01      	subs	r3, #1
 800dafe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800db00:	429a      	cmp	r2, r3
 800db02:	d107      	bne.n	800db14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db0e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800db10:	429a      	cmp	r2, r3
 800db12:	d001      	beq.n	800db18 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800db14:	2301      	movs	r3, #1
 800db16:	e000      	b.n	800db1a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800db18:	2300      	movs	r3, #0
}
 800db1a:	4618      	mov	r0, r3
 800db1c:	3718      	adds	r7, #24
 800db1e:	46bd      	mov	sp, r7
 800db20:	bd80      	pop	{r7, pc}
 800db22:	bf00      	nop
 800db24:	40023800 	.word	0x40023800

0800db28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800db28:	b580      	push	{r7, lr}
 800db2a:	b084      	sub	sp, #16
 800db2c:	af00      	add	r7, sp, #0
 800db2e:	6078      	str	r0, [r7, #4]
 800db30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	2b00      	cmp	r3, #0
 800db36:	d101      	bne.n	800db3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800db38:	2301      	movs	r3, #1
 800db3a:	e0cc      	b.n	800dcd6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800db3c:	4b68      	ldr	r3, [pc, #416]	; (800dce0 <HAL_RCC_ClockConfig+0x1b8>)
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	f003 0307 	and.w	r3, r3, #7
 800db44:	683a      	ldr	r2, [r7, #0]
 800db46:	429a      	cmp	r2, r3
 800db48:	d90c      	bls.n	800db64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800db4a:	4b65      	ldr	r3, [pc, #404]	; (800dce0 <HAL_RCC_ClockConfig+0x1b8>)
 800db4c:	683a      	ldr	r2, [r7, #0]
 800db4e:	b2d2      	uxtb	r2, r2
 800db50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800db52:	4b63      	ldr	r3, [pc, #396]	; (800dce0 <HAL_RCC_ClockConfig+0x1b8>)
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	f003 0307 	and.w	r3, r3, #7
 800db5a:	683a      	ldr	r2, [r7, #0]
 800db5c:	429a      	cmp	r2, r3
 800db5e:	d001      	beq.n	800db64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800db60:	2301      	movs	r3, #1
 800db62:	e0b8      	b.n	800dcd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	f003 0302 	and.w	r3, r3, #2
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d020      	beq.n	800dbb2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	f003 0304 	and.w	r3, r3, #4
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d005      	beq.n	800db88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800db7c:	4b59      	ldr	r3, [pc, #356]	; (800dce4 <HAL_RCC_ClockConfig+0x1bc>)
 800db7e:	689b      	ldr	r3, [r3, #8]
 800db80:	4a58      	ldr	r2, [pc, #352]	; (800dce4 <HAL_RCC_ClockConfig+0x1bc>)
 800db82:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800db86:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	f003 0308 	and.w	r3, r3, #8
 800db90:	2b00      	cmp	r3, #0
 800db92:	d005      	beq.n	800dba0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800db94:	4b53      	ldr	r3, [pc, #332]	; (800dce4 <HAL_RCC_ClockConfig+0x1bc>)
 800db96:	689b      	ldr	r3, [r3, #8]
 800db98:	4a52      	ldr	r2, [pc, #328]	; (800dce4 <HAL_RCC_ClockConfig+0x1bc>)
 800db9a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800db9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800dba0:	4b50      	ldr	r3, [pc, #320]	; (800dce4 <HAL_RCC_ClockConfig+0x1bc>)
 800dba2:	689b      	ldr	r3, [r3, #8]
 800dba4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	689b      	ldr	r3, [r3, #8]
 800dbac:	494d      	ldr	r1, [pc, #308]	; (800dce4 <HAL_RCC_ClockConfig+0x1bc>)
 800dbae:	4313      	orrs	r3, r2
 800dbb0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	f003 0301 	and.w	r3, r3, #1
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d044      	beq.n	800dc48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	685b      	ldr	r3, [r3, #4]
 800dbc2:	2b01      	cmp	r3, #1
 800dbc4:	d107      	bne.n	800dbd6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800dbc6:	4b47      	ldr	r3, [pc, #284]	; (800dce4 <HAL_RCC_ClockConfig+0x1bc>)
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d119      	bne.n	800dc06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800dbd2:	2301      	movs	r3, #1
 800dbd4:	e07f      	b.n	800dcd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	685b      	ldr	r3, [r3, #4]
 800dbda:	2b02      	cmp	r3, #2
 800dbdc:	d003      	beq.n	800dbe6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800dbe2:	2b03      	cmp	r3, #3
 800dbe4:	d107      	bne.n	800dbf6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800dbe6:	4b3f      	ldr	r3, [pc, #252]	; (800dce4 <HAL_RCC_ClockConfig+0x1bc>)
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d109      	bne.n	800dc06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800dbf2:	2301      	movs	r3, #1
 800dbf4:	e06f      	b.n	800dcd6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800dbf6:	4b3b      	ldr	r3, [pc, #236]	; (800dce4 <HAL_RCC_ClockConfig+0x1bc>)
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	f003 0302 	and.w	r3, r3, #2
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d101      	bne.n	800dc06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800dc02:	2301      	movs	r3, #1
 800dc04:	e067      	b.n	800dcd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800dc06:	4b37      	ldr	r3, [pc, #220]	; (800dce4 <HAL_RCC_ClockConfig+0x1bc>)
 800dc08:	689b      	ldr	r3, [r3, #8]
 800dc0a:	f023 0203 	bic.w	r2, r3, #3
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	685b      	ldr	r3, [r3, #4]
 800dc12:	4934      	ldr	r1, [pc, #208]	; (800dce4 <HAL_RCC_ClockConfig+0x1bc>)
 800dc14:	4313      	orrs	r3, r2
 800dc16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800dc18:	f7fd f82c 	bl	800ac74 <HAL_GetTick>
 800dc1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800dc1e:	e00a      	b.n	800dc36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800dc20:	f7fd f828 	bl	800ac74 <HAL_GetTick>
 800dc24:	4602      	mov	r2, r0
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	1ad3      	subs	r3, r2, r3
 800dc2a:	f241 3288 	movw	r2, #5000	; 0x1388
 800dc2e:	4293      	cmp	r3, r2
 800dc30:	d901      	bls.n	800dc36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800dc32:	2303      	movs	r3, #3
 800dc34:	e04f      	b.n	800dcd6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800dc36:	4b2b      	ldr	r3, [pc, #172]	; (800dce4 <HAL_RCC_ClockConfig+0x1bc>)
 800dc38:	689b      	ldr	r3, [r3, #8]
 800dc3a:	f003 020c 	and.w	r2, r3, #12
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	685b      	ldr	r3, [r3, #4]
 800dc42:	009b      	lsls	r3, r3, #2
 800dc44:	429a      	cmp	r2, r3
 800dc46:	d1eb      	bne.n	800dc20 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800dc48:	4b25      	ldr	r3, [pc, #148]	; (800dce0 <HAL_RCC_ClockConfig+0x1b8>)
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	f003 0307 	and.w	r3, r3, #7
 800dc50:	683a      	ldr	r2, [r7, #0]
 800dc52:	429a      	cmp	r2, r3
 800dc54:	d20c      	bcs.n	800dc70 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800dc56:	4b22      	ldr	r3, [pc, #136]	; (800dce0 <HAL_RCC_ClockConfig+0x1b8>)
 800dc58:	683a      	ldr	r2, [r7, #0]
 800dc5a:	b2d2      	uxtb	r2, r2
 800dc5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800dc5e:	4b20      	ldr	r3, [pc, #128]	; (800dce0 <HAL_RCC_ClockConfig+0x1b8>)
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	f003 0307 	and.w	r3, r3, #7
 800dc66:	683a      	ldr	r2, [r7, #0]
 800dc68:	429a      	cmp	r2, r3
 800dc6a:	d001      	beq.n	800dc70 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800dc6c:	2301      	movs	r3, #1
 800dc6e:	e032      	b.n	800dcd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	f003 0304 	and.w	r3, r3, #4
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d008      	beq.n	800dc8e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800dc7c:	4b19      	ldr	r3, [pc, #100]	; (800dce4 <HAL_RCC_ClockConfig+0x1bc>)
 800dc7e:	689b      	ldr	r3, [r3, #8]
 800dc80:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	68db      	ldr	r3, [r3, #12]
 800dc88:	4916      	ldr	r1, [pc, #88]	; (800dce4 <HAL_RCC_ClockConfig+0x1bc>)
 800dc8a:	4313      	orrs	r3, r2
 800dc8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	f003 0308 	and.w	r3, r3, #8
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d009      	beq.n	800dcae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800dc9a:	4b12      	ldr	r3, [pc, #72]	; (800dce4 <HAL_RCC_ClockConfig+0x1bc>)
 800dc9c:	689b      	ldr	r3, [r3, #8]
 800dc9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	691b      	ldr	r3, [r3, #16]
 800dca6:	00db      	lsls	r3, r3, #3
 800dca8:	490e      	ldr	r1, [pc, #56]	; (800dce4 <HAL_RCC_ClockConfig+0x1bc>)
 800dcaa:	4313      	orrs	r3, r2
 800dcac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800dcae:	f000 f821 	bl	800dcf4 <HAL_RCC_GetSysClockFreq>
 800dcb2:	4602      	mov	r2, r0
 800dcb4:	4b0b      	ldr	r3, [pc, #44]	; (800dce4 <HAL_RCC_ClockConfig+0x1bc>)
 800dcb6:	689b      	ldr	r3, [r3, #8]
 800dcb8:	091b      	lsrs	r3, r3, #4
 800dcba:	f003 030f 	and.w	r3, r3, #15
 800dcbe:	490a      	ldr	r1, [pc, #40]	; (800dce8 <HAL_RCC_ClockConfig+0x1c0>)
 800dcc0:	5ccb      	ldrb	r3, [r1, r3]
 800dcc2:	fa22 f303 	lsr.w	r3, r2, r3
 800dcc6:	4a09      	ldr	r2, [pc, #36]	; (800dcec <HAL_RCC_ClockConfig+0x1c4>)
 800dcc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800dcca:	4b09      	ldr	r3, [pc, #36]	; (800dcf0 <HAL_RCC_ClockConfig+0x1c8>)
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	4618      	mov	r0, r3
 800dcd0:	f7fc ff8c 	bl	800abec <HAL_InitTick>

  return HAL_OK;
 800dcd4:	2300      	movs	r3, #0
}
 800dcd6:	4618      	mov	r0, r3
 800dcd8:	3710      	adds	r7, #16
 800dcda:	46bd      	mov	sp, r7
 800dcdc:	bd80      	pop	{r7, pc}
 800dcde:	bf00      	nop
 800dce0:	40023c00 	.word	0x40023c00
 800dce4:	40023800 	.word	0x40023800
 800dce8:	0802e328 	.word	0x0802e328
 800dcec:	10000050 	.word	0x10000050
 800dcf0:	10000054 	.word	0x10000054

0800dcf4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800dcf4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dcf8:	b094      	sub	sp, #80	; 0x50
 800dcfa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800dcfc:	2300      	movs	r3, #0
 800dcfe:	647b      	str	r3, [r7, #68]	; 0x44
 800dd00:	2300      	movs	r3, #0
 800dd02:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dd04:	2300      	movs	r3, #0
 800dd06:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800dd08:	2300      	movs	r3, #0
 800dd0a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800dd0c:	4b79      	ldr	r3, [pc, #484]	; (800def4 <HAL_RCC_GetSysClockFreq+0x200>)
 800dd0e:	689b      	ldr	r3, [r3, #8]
 800dd10:	f003 030c 	and.w	r3, r3, #12
 800dd14:	2b08      	cmp	r3, #8
 800dd16:	d00d      	beq.n	800dd34 <HAL_RCC_GetSysClockFreq+0x40>
 800dd18:	2b08      	cmp	r3, #8
 800dd1a:	f200 80e1 	bhi.w	800dee0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d002      	beq.n	800dd28 <HAL_RCC_GetSysClockFreq+0x34>
 800dd22:	2b04      	cmp	r3, #4
 800dd24:	d003      	beq.n	800dd2e <HAL_RCC_GetSysClockFreq+0x3a>
 800dd26:	e0db      	b.n	800dee0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800dd28:	4b73      	ldr	r3, [pc, #460]	; (800def8 <HAL_RCC_GetSysClockFreq+0x204>)
 800dd2a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800dd2c:	e0db      	b.n	800dee6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800dd2e:	4b73      	ldr	r3, [pc, #460]	; (800defc <HAL_RCC_GetSysClockFreq+0x208>)
 800dd30:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800dd32:	e0d8      	b.n	800dee6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800dd34:	4b6f      	ldr	r3, [pc, #444]	; (800def4 <HAL_RCC_GetSysClockFreq+0x200>)
 800dd36:	685b      	ldr	r3, [r3, #4]
 800dd38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dd3c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800dd3e:	4b6d      	ldr	r3, [pc, #436]	; (800def4 <HAL_RCC_GetSysClockFreq+0x200>)
 800dd40:	685b      	ldr	r3, [r3, #4]
 800dd42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d063      	beq.n	800de12 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800dd4a:	4b6a      	ldr	r3, [pc, #424]	; (800def4 <HAL_RCC_GetSysClockFreq+0x200>)
 800dd4c:	685b      	ldr	r3, [r3, #4]
 800dd4e:	099b      	lsrs	r3, r3, #6
 800dd50:	2200      	movs	r2, #0
 800dd52:	63bb      	str	r3, [r7, #56]	; 0x38
 800dd54:	63fa      	str	r2, [r7, #60]	; 0x3c
 800dd56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dd5c:	633b      	str	r3, [r7, #48]	; 0x30
 800dd5e:	2300      	movs	r3, #0
 800dd60:	637b      	str	r3, [r7, #52]	; 0x34
 800dd62:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800dd66:	4622      	mov	r2, r4
 800dd68:	462b      	mov	r3, r5
 800dd6a:	f04f 0000 	mov.w	r0, #0
 800dd6e:	f04f 0100 	mov.w	r1, #0
 800dd72:	0159      	lsls	r1, r3, #5
 800dd74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800dd78:	0150      	lsls	r0, r2, #5
 800dd7a:	4602      	mov	r2, r0
 800dd7c:	460b      	mov	r3, r1
 800dd7e:	4621      	mov	r1, r4
 800dd80:	1a51      	subs	r1, r2, r1
 800dd82:	6139      	str	r1, [r7, #16]
 800dd84:	4629      	mov	r1, r5
 800dd86:	eb63 0301 	sbc.w	r3, r3, r1
 800dd8a:	617b      	str	r3, [r7, #20]
 800dd8c:	f04f 0200 	mov.w	r2, #0
 800dd90:	f04f 0300 	mov.w	r3, #0
 800dd94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800dd98:	4659      	mov	r1, fp
 800dd9a:	018b      	lsls	r3, r1, #6
 800dd9c:	4651      	mov	r1, sl
 800dd9e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800dda2:	4651      	mov	r1, sl
 800dda4:	018a      	lsls	r2, r1, #6
 800dda6:	4651      	mov	r1, sl
 800dda8:	ebb2 0801 	subs.w	r8, r2, r1
 800ddac:	4659      	mov	r1, fp
 800ddae:	eb63 0901 	sbc.w	r9, r3, r1
 800ddb2:	f04f 0200 	mov.w	r2, #0
 800ddb6:	f04f 0300 	mov.w	r3, #0
 800ddba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ddbe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ddc2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ddc6:	4690      	mov	r8, r2
 800ddc8:	4699      	mov	r9, r3
 800ddca:	4623      	mov	r3, r4
 800ddcc:	eb18 0303 	adds.w	r3, r8, r3
 800ddd0:	60bb      	str	r3, [r7, #8]
 800ddd2:	462b      	mov	r3, r5
 800ddd4:	eb49 0303 	adc.w	r3, r9, r3
 800ddd8:	60fb      	str	r3, [r7, #12]
 800ddda:	f04f 0200 	mov.w	r2, #0
 800ddde:	f04f 0300 	mov.w	r3, #0
 800dde2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800dde6:	4629      	mov	r1, r5
 800dde8:	024b      	lsls	r3, r1, #9
 800ddea:	4621      	mov	r1, r4
 800ddec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800ddf0:	4621      	mov	r1, r4
 800ddf2:	024a      	lsls	r2, r1, #9
 800ddf4:	4610      	mov	r0, r2
 800ddf6:	4619      	mov	r1, r3
 800ddf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ddfa:	2200      	movs	r2, #0
 800ddfc:	62bb      	str	r3, [r7, #40]	; 0x28
 800ddfe:	62fa      	str	r2, [r7, #44]	; 0x2c
 800de00:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800de04:	f7f2 ff00 	bl	8000c08 <__aeabi_uldivmod>
 800de08:	4602      	mov	r2, r0
 800de0a:	460b      	mov	r3, r1
 800de0c:	4613      	mov	r3, r2
 800de0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800de10:	e058      	b.n	800dec4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800de12:	4b38      	ldr	r3, [pc, #224]	; (800def4 <HAL_RCC_GetSysClockFreq+0x200>)
 800de14:	685b      	ldr	r3, [r3, #4]
 800de16:	099b      	lsrs	r3, r3, #6
 800de18:	2200      	movs	r2, #0
 800de1a:	4618      	mov	r0, r3
 800de1c:	4611      	mov	r1, r2
 800de1e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800de22:	623b      	str	r3, [r7, #32]
 800de24:	2300      	movs	r3, #0
 800de26:	627b      	str	r3, [r7, #36]	; 0x24
 800de28:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800de2c:	4642      	mov	r2, r8
 800de2e:	464b      	mov	r3, r9
 800de30:	f04f 0000 	mov.w	r0, #0
 800de34:	f04f 0100 	mov.w	r1, #0
 800de38:	0159      	lsls	r1, r3, #5
 800de3a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800de3e:	0150      	lsls	r0, r2, #5
 800de40:	4602      	mov	r2, r0
 800de42:	460b      	mov	r3, r1
 800de44:	4641      	mov	r1, r8
 800de46:	ebb2 0a01 	subs.w	sl, r2, r1
 800de4a:	4649      	mov	r1, r9
 800de4c:	eb63 0b01 	sbc.w	fp, r3, r1
 800de50:	f04f 0200 	mov.w	r2, #0
 800de54:	f04f 0300 	mov.w	r3, #0
 800de58:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800de5c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800de60:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800de64:	ebb2 040a 	subs.w	r4, r2, sl
 800de68:	eb63 050b 	sbc.w	r5, r3, fp
 800de6c:	f04f 0200 	mov.w	r2, #0
 800de70:	f04f 0300 	mov.w	r3, #0
 800de74:	00eb      	lsls	r3, r5, #3
 800de76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800de7a:	00e2      	lsls	r2, r4, #3
 800de7c:	4614      	mov	r4, r2
 800de7e:	461d      	mov	r5, r3
 800de80:	4643      	mov	r3, r8
 800de82:	18e3      	adds	r3, r4, r3
 800de84:	603b      	str	r3, [r7, #0]
 800de86:	464b      	mov	r3, r9
 800de88:	eb45 0303 	adc.w	r3, r5, r3
 800de8c:	607b      	str	r3, [r7, #4]
 800de8e:	f04f 0200 	mov.w	r2, #0
 800de92:	f04f 0300 	mov.w	r3, #0
 800de96:	e9d7 4500 	ldrd	r4, r5, [r7]
 800de9a:	4629      	mov	r1, r5
 800de9c:	028b      	lsls	r3, r1, #10
 800de9e:	4621      	mov	r1, r4
 800dea0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800dea4:	4621      	mov	r1, r4
 800dea6:	028a      	lsls	r2, r1, #10
 800dea8:	4610      	mov	r0, r2
 800deaa:	4619      	mov	r1, r3
 800deac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800deae:	2200      	movs	r2, #0
 800deb0:	61bb      	str	r3, [r7, #24]
 800deb2:	61fa      	str	r2, [r7, #28]
 800deb4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800deb8:	f7f2 fea6 	bl	8000c08 <__aeabi_uldivmod>
 800debc:	4602      	mov	r2, r0
 800debe:	460b      	mov	r3, r1
 800dec0:	4613      	mov	r3, r2
 800dec2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800dec4:	4b0b      	ldr	r3, [pc, #44]	; (800def4 <HAL_RCC_GetSysClockFreq+0x200>)
 800dec6:	685b      	ldr	r3, [r3, #4]
 800dec8:	0c1b      	lsrs	r3, r3, #16
 800deca:	f003 0303 	and.w	r3, r3, #3
 800dece:	3301      	adds	r3, #1
 800ded0:	005b      	lsls	r3, r3, #1
 800ded2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800ded4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ded6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ded8:	fbb2 f3f3 	udiv	r3, r2, r3
 800dedc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800dede:	e002      	b.n	800dee6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800dee0:	4b05      	ldr	r3, [pc, #20]	; (800def8 <HAL_RCC_GetSysClockFreq+0x204>)
 800dee2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800dee4:	bf00      	nop
    }
  }
  return sysclockfreq;
 800dee6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800dee8:	4618      	mov	r0, r3
 800deea:	3750      	adds	r7, #80	; 0x50
 800deec:	46bd      	mov	sp, r7
 800deee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800def2:	bf00      	nop
 800def4:	40023800 	.word	0x40023800
 800def8:	00f42400 	.word	0x00f42400
 800defc:	007a1200 	.word	0x007a1200

0800df00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800df00:	b480      	push	{r7}
 800df02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800df04:	4b03      	ldr	r3, [pc, #12]	; (800df14 <HAL_RCC_GetHCLKFreq+0x14>)
 800df06:	681b      	ldr	r3, [r3, #0]
}
 800df08:	4618      	mov	r0, r3
 800df0a:	46bd      	mov	sp, r7
 800df0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df10:	4770      	bx	lr
 800df12:	bf00      	nop
 800df14:	10000050 	.word	0x10000050

0800df18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800df18:	b580      	push	{r7, lr}
 800df1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800df1c:	f7ff fff0 	bl	800df00 <HAL_RCC_GetHCLKFreq>
 800df20:	4602      	mov	r2, r0
 800df22:	4b05      	ldr	r3, [pc, #20]	; (800df38 <HAL_RCC_GetPCLK1Freq+0x20>)
 800df24:	689b      	ldr	r3, [r3, #8]
 800df26:	0a9b      	lsrs	r3, r3, #10
 800df28:	f003 0307 	and.w	r3, r3, #7
 800df2c:	4903      	ldr	r1, [pc, #12]	; (800df3c <HAL_RCC_GetPCLK1Freq+0x24>)
 800df2e:	5ccb      	ldrb	r3, [r1, r3]
 800df30:	fa22 f303 	lsr.w	r3, r2, r3
}
 800df34:	4618      	mov	r0, r3
 800df36:	bd80      	pop	{r7, pc}
 800df38:	40023800 	.word	0x40023800
 800df3c:	0802e338 	.word	0x0802e338

0800df40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800df40:	b580      	push	{r7, lr}
 800df42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800df44:	f7ff ffdc 	bl	800df00 <HAL_RCC_GetHCLKFreq>
 800df48:	4602      	mov	r2, r0
 800df4a:	4b05      	ldr	r3, [pc, #20]	; (800df60 <HAL_RCC_GetPCLK2Freq+0x20>)
 800df4c:	689b      	ldr	r3, [r3, #8]
 800df4e:	0b5b      	lsrs	r3, r3, #13
 800df50:	f003 0307 	and.w	r3, r3, #7
 800df54:	4903      	ldr	r1, [pc, #12]	; (800df64 <HAL_RCC_GetPCLK2Freq+0x24>)
 800df56:	5ccb      	ldrb	r3, [r1, r3]
 800df58:	fa22 f303 	lsr.w	r3, r2, r3
}
 800df5c:	4618      	mov	r0, r3
 800df5e:	bd80      	pop	{r7, pc}
 800df60:	40023800 	.word	0x40023800
 800df64:	0802e338 	.word	0x0802e338

0800df68 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800df68:	b580      	push	{r7, lr}
 800df6a:	b082      	sub	sp, #8
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	2b00      	cmp	r3, #0
 800df74:	d101      	bne.n	800df7a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800df76:	2301      	movs	r3, #1
 800df78:	e07b      	b.n	800e072 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d108      	bne.n	800df94 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	685b      	ldr	r3, [r3, #4]
 800df86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800df8a:	d009      	beq.n	800dfa0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	2200      	movs	r2, #0
 800df90:	61da      	str	r2, [r3, #28]
 800df92:	e005      	b.n	800dfa0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	2200      	movs	r2, #0
 800df98:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	2200      	movs	r2, #0
 800df9e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	2200      	movs	r2, #0
 800dfa4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800dfac:	b2db      	uxtb	r3, r3
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d106      	bne.n	800dfc0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	2200      	movs	r2, #0
 800dfb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800dfba:	6878      	ldr	r0, [r7, #4]
 800dfbc:	f7fb fe06 	bl	8009bcc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	2202      	movs	r2, #2
 800dfc4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	681a      	ldr	r2, [r3, #0]
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dfd6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	685b      	ldr	r3, [r3, #4]
 800dfdc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	689b      	ldr	r3, [r3, #8]
 800dfe4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800dfe8:	431a      	orrs	r2, r3
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	68db      	ldr	r3, [r3, #12]
 800dfee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dff2:	431a      	orrs	r2, r3
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	691b      	ldr	r3, [r3, #16]
 800dff8:	f003 0302 	and.w	r3, r3, #2
 800dffc:	431a      	orrs	r2, r3
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	695b      	ldr	r3, [r3, #20]
 800e002:	f003 0301 	and.w	r3, r3, #1
 800e006:	431a      	orrs	r2, r3
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	699b      	ldr	r3, [r3, #24]
 800e00c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e010:	431a      	orrs	r2, r3
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	69db      	ldr	r3, [r3, #28]
 800e016:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e01a:	431a      	orrs	r2, r3
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	6a1b      	ldr	r3, [r3, #32]
 800e020:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e024:	ea42 0103 	orr.w	r1, r2, r3
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e02c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	430a      	orrs	r2, r1
 800e036:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	699b      	ldr	r3, [r3, #24]
 800e03c:	0c1b      	lsrs	r3, r3, #16
 800e03e:	f003 0104 	and.w	r1, r3, #4
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e046:	f003 0210 	and.w	r2, r3, #16
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	430a      	orrs	r2, r1
 800e050:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	69da      	ldr	r2, [r3, #28]
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e060:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	2200      	movs	r2, #0
 800e066:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	2201      	movs	r2, #1
 800e06c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800e070:	2300      	movs	r3, #0
}
 800e072:	4618      	mov	r0, r3
 800e074:	3708      	adds	r7, #8
 800e076:	46bd      	mov	sp, r7
 800e078:	bd80      	pop	{r7, pc}

0800e07a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e07a:	b580      	push	{r7, lr}
 800e07c:	b082      	sub	sp, #8
 800e07e:	af00      	add	r7, sp, #0
 800e080:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	2b00      	cmp	r3, #0
 800e086:	d101      	bne.n	800e08c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e088:	2301      	movs	r3, #1
 800e08a:	e041      	b.n	800e110 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e092:	b2db      	uxtb	r3, r3
 800e094:	2b00      	cmp	r3, #0
 800e096:	d106      	bne.n	800e0a6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	2200      	movs	r2, #0
 800e09c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e0a0:	6878      	ldr	r0, [r7, #4]
 800e0a2:	f7fc f99d 	bl	800a3e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	2202      	movs	r2, #2
 800e0aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	681a      	ldr	r2, [r3, #0]
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	3304      	adds	r3, #4
 800e0b6:	4619      	mov	r1, r3
 800e0b8:	4610      	mov	r0, r2
 800e0ba:	f000 febd 	bl	800ee38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	2201      	movs	r2, #1
 800e0c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	2201      	movs	r2, #1
 800e0ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	2201      	movs	r2, #1
 800e0d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	2201      	movs	r2, #1
 800e0da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	2201      	movs	r2, #1
 800e0e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	2201      	movs	r2, #1
 800e0ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	2201      	movs	r2, #1
 800e0f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	2201      	movs	r2, #1
 800e0fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	2201      	movs	r2, #1
 800e102:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	2201      	movs	r2, #1
 800e10a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e10e:	2300      	movs	r3, #0
}
 800e110:	4618      	mov	r0, r3
 800e112:	3708      	adds	r7, #8
 800e114:	46bd      	mov	sp, r7
 800e116:	bd80      	pop	{r7, pc}

0800e118 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e118:	b480      	push	{r7}
 800e11a:	b085      	sub	sp, #20
 800e11c:	af00      	add	r7, sp, #0
 800e11e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e126:	b2db      	uxtb	r3, r3
 800e128:	2b01      	cmp	r3, #1
 800e12a:	d001      	beq.n	800e130 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e12c:	2301      	movs	r3, #1
 800e12e:	e04e      	b.n	800e1ce <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	2202      	movs	r2, #2
 800e134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	68da      	ldr	r2, [r3, #12]
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	f042 0201 	orr.w	r2, r2, #1
 800e146:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	4a23      	ldr	r2, [pc, #140]	; (800e1dc <HAL_TIM_Base_Start_IT+0xc4>)
 800e14e:	4293      	cmp	r3, r2
 800e150:	d022      	beq.n	800e198 <HAL_TIM_Base_Start_IT+0x80>
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e15a:	d01d      	beq.n	800e198 <HAL_TIM_Base_Start_IT+0x80>
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	4a1f      	ldr	r2, [pc, #124]	; (800e1e0 <HAL_TIM_Base_Start_IT+0xc8>)
 800e162:	4293      	cmp	r3, r2
 800e164:	d018      	beq.n	800e198 <HAL_TIM_Base_Start_IT+0x80>
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	4a1e      	ldr	r2, [pc, #120]	; (800e1e4 <HAL_TIM_Base_Start_IT+0xcc>)
 800e16c:	4293      	cmp	r3, r2
 800e16e:	d013      	beq.n	800e198 <HAL_TIM_Base_Start_IT+0x80>
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	4a1c      	ldr	r2, [pc, #112]	; (800e1e8 <HAL_TIM_Base_Start_IT+0xd0>)
 800e176:	4293      	cmp	r3, r2
 800e178:	d00e      	beq.n	800e198 <HAL_TIM_Base_Start_IT+0x80>
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	4a1b      	ldr	r2, [pc, #108]	; (800e1ec <HAL_TIM_Base_Start_IT+0xd4>)
 800e180:	4293      	cmp	r3, r2
 800e182:	d009      	beq.n	800e198 <HAL_TIM_Base_Start_IT+0x80>
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	4a19      	ldr	r2, [pc, #100]	; (800e1f0 <HAL_TIM_Base_Start_IT+0xd8>)
 800e18a:	4293      	cmp	r3, r2
 800e18c:	d004      	beq.n	800e198 <HAL_TIM_Base_Start_IT+0x80>
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	4a18      	ldr	r2, [pc, #96]	; (800e1f4 <HAL_TIM_Base_Start_IT+0xdc>)
 800e194:	4293      	cmp	r3, r2
 800e196:	d111      	bne.n	800e1bc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	689b      	ldr	r3, [r3, #8]
 800e19e:	f003 0307 	and.w	r3, r3, #7
 800e1a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	2b06      	cmp	r3, #6
 800e1a8:	d010      	beq.n	800e1cc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	681a      	ldr	r2, [r3, #0]
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	f042 0201 	orr.w	r2, r2, #1
 800e1b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e1ba:	e007      	b.n	800e1cc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	681a      	ldr	r2, [r3, #0]
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	f042 0201 	orr.w	r2, r2, #1
 800e1ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e1cc:	2300      	movs	r3, #0
}
 800e1ce:	4618      	mov	r0, r3
 800e1d0:	3714      	adds	r7, #20
 800e1d2:	46bd      	mov	sp, r7
 800e1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d8:	4770      	bx	lr
 800e1da:	bf00      	nop
 800e1dc:	40010000 	.word	0x40010000
 800e1e0:	40000400 	.word	0x40000400
 800e1e4:	40000800 	.word	0x40000800
 800e1e8:	40000c00 	.word	0x40000c00
 800e1ec:	40010400 	.word	0x40010400
 800e1f0:	40014000 	.word	0x40014000
 800e1f4:	40001800 	.word	0x40001800

0800e1f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e1f8:	b580      	push	{r7, lr}
 800e1fa:	b082      	sub	sp, #8
 800e1fc:	af00      	add	r7, sp, #0
 800e1fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	2b00      	cmp	r3, #0
 800e204:	d101      	bne.n	800e20a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e206:	2301      	movs	r3, #1
 800e208:	e041      	b.n	800e28e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e210:	b2db      	uxtb	r3, r3
 800e212:	2b00      	cmp	r3, #0
 800e214:	d106      	bne.n	800e224 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	2200      	movs	r2, #0
 800e21a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e21e:	6878      	ldr	r0, [r7, #4]
 800e220:	f7fc f998 	bl	800a554 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	2202      	movs	r2, #2
 800e228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	681a      	ldr	r2, [r3, #0]
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	3304      	adds	r3, #4
 800e234:	4619      	mov	r1, r3
 800e236:	4610      	mov	r0, r2
 800e238:	f000 fdfe 	bl	800ee38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	2201      	movs	r2, #1
 800e240:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	2201      	movs	r2, #1
 800e248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	2201      	movs	r2, #1
 800e250:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	2201      	movs	r2, #1
 800e258:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	2201      	movs	r2, #1
 800e260:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	2201      	movs	r2, #1
 800e268:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	2201      	movs	r2, #1
 800e270:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	2201      	movs	r2, #1
 800e278:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	2201      	movs	r2, #1
 800e280:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	2201      	movs	r2, #1
 800e288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e28c:	2300      	movs	r3, #0
}
 800e28e:	4618      	mov	r0, r3
 800e290:	3708      	adds	r7, #8
 800e292:	46bd      	mov	sp, r7
 800e294:	bd80      	pop	{r7, pc}
	...

0800e298 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e298:	b580      	push	{r7, lr}
 800e29a:	b084      	sub	sp, #16
 800e29c:	af00      	add	r7, sp, #0
 800e29e:	6078      	str	r0, [r7, #4]
 800e2a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e2a2:	683b      	ldr	r3, [r7, #0]
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d109      	bne.n	800e2bc <HAL_TIM_PWM_Start+0x24>
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e2ae:	b2db      	uxtb	r3, r3
 800e2b0:	2b01      	cmp	r3, #1
 800e2b2:	bf14      	ite	ne
 800e2b4:	2301      	movne	r3, #1
 800e2b6:	2300      	moveq	r3, #0
 800e2b8:	b2db      	uxtb	r3, r3
 800e2ba:	e022      	b.n	800e302 <HAL_TIM_PWM_Start+0x6a>
 800e2bc:	683b      	ldr	r3, [r7, #0]
 800e2be:	2b04      	cmp	r3, #4
 800e2c0:	d109      	bne.n	800e2d6 <HAL_TIM_PWM_Start+0x3e>
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800e2c8:	b2db      	uxtb	r3, r3
 800e2ca:	2b01      	cmp	r3, #1
 800e2cc:	bf14      	ite	ne
 800e2ce:	2301      	movne	r3, #1
 800e2d0:	2300      	moveq	r3, #0
 800e2d2:	b2db      	uxtb	r3, r3
 800e2d4:	e015      	b.n	800e302 <HAL_TIM_PWM_Start+0x6a>
 800e2d6:	683b      	ldr	r3, [r7, #0]
 800e2d8:	2b08      	cmp	r3, #8
 800e2da:	d109      	bne.n	800e2f0 <HAL_TIM_PWM_Start+0x58>
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e2e2:	b2db      	uxtb	r3, r3
 800e2e4:	2b01      	cmp	r3, #1
 800e2e6:	bf14      	ite	ne
 800e2e8:	2301      	movne	r3, #1
 800e2ea:	2300      	moveq	r3, #0
 800e2ec:	b2db      	uxtb	r3, r3
 800e2ee:	e008      	b.n	800e302 <HAL_TIM_PWM_Start+0x6a>
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e2f6:	b2db      	uxtb	r3, r3
 800e2f8:	2b01      	cmp	r3, #1
 800e2fa:	bf14      	ite	ne
 800e2fc:	2301      	movne	r3, #1
 800e2fe:	2300      	moveq	r3, #0
 800e300:	b2db      	uxtb	r3, r3
 800e302:	2b00      	cmp	r3, #0
 800e304:	d001      	beq.n	800e30a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800e306:	2301      	movs	r3, #1
 800e308:	e07c      	b.n	800e404 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e30a:	683b      	ldr	r3, [r7, #0]
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d104      	bne.n	800e31a <HAL_TIM_PWM_Start+0x82>
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	2202      	movs	r2, #2
 800e314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e318:	e013      	b.n	800e342 <HAL_TIM_PWM_Start+0xaa>
 800e31a:	683b      	ldr	r3, [r7, #0]
 800e31c:	2b04      	cmp	r3, #4
 800e31e:	d104      	bne.n	800e32a <HAL_TIM_PWM_Start+0x92>
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	2202      	movs	r2, #2
 800e324:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e328:	e00b      	b.n	800e342 <HAL_TIM_PWM_Start+0xaa>
 800e32a:	683b      	ldr	r3, [r7, #0]
 800e32c:	2b08      	cmp	r3, #8
 800e32e:	d104      	bne.n	800e33a <HAL_TIM_PWM_Start+0xa2>
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	2202      	movs	r2, #2
 800e334:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e338:	e003      	b.n	800e342 <HAL_TIM_PWM_Start+0xaa>
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	2202      	movs	r2, #2
 800e33e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	2201      	movs	r2, #1
 800e348:	6839      	ldr	r1, [r7, #0]
 800e34a:	4618      	mov	r0, r3
 800e34c:	f001 f988 	bl	800f660 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	4a2d      	ldr	r2, [pc, #180]	; (800e40c <HAL_TIM_PWM_Start+0x174>)
 800e356:	4293      	cmp	r3, r2
 800e358:	d004      	beq.n	800e364 <HAL_TIM_PWM_Start+0xcc>
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	4a2c      	ldr	r2, [pc, #176]	; (800e410 <HAL_TIM_PWM_Start+0x178>)
 800e360:	4293      	cmp	r3, r2
 800e362:	d101      	bne.n	800e368 <HAL_TIM_PWM_Start+0xd0>
 800e364:	2301      	movs	r3, #1
 800e366:	e000      	b.n	800e36a <HAL_TIM_PWM_Start+0xd2>
 800e368:	2300      	movs	r3, #0
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d007      	beq.n	800e37e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e37c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	4a22      	ldr	r2, [pc, #136]	; (800e40c <HAL_TIM_PWM_Start+0x174>)
 800e384:	4293      	cmp	r3, r2
 800e386:	d022      	beq.n	800e3ce <HAL_TIM_PWM_Start+0x136>
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e390:	d01d      	beq.n	800e3ce <HAL_TIM_PWM_Start+0x136>
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	4a1f      	ldr	r2, [pc, #124]	; (800e414 <HAL_TIM_PWM_Start+0x17c>)
 800e398:	4293      	cmp	r3, r2
 800e39a:	d018      	beq.n	800e3ce <HAL_TIM_PWM_Start+0x136>
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	4a1d      	ldr	r2, [pc, #116]	; (800e418 <HAL_TIM_PWM_Start+0x180>)
 800e3a2:	4293      	cmp	r3, r2
 800e3a4:	d013      	beq.n	800e3ce <HAL_TIM_PWM_Start+0x136>
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	4a1c      	ldr	r2, [pc, #112]	; (800e41c <HAL_TIM_PWM_Start+0x184>)
 800e3ac:	4293      	cmp	r3, r2
 800e3ae:	d00e      	beq.n	800e3ce <HAL_TIM_PWM_Start+0x136>
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	4a16      	ldr	r2, [pc, #88]	; (800e410 <HAL_TIM_PWM_Start+0x178>)
 800e3b6:	4293      	cmp	r3, r2
 800e3b8:	d009      	beq.n	800e3ce <HAL_TIM_PWM_Start+0x136>
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	4a18      	ldr	r2, [pc, #96]	; (800e420 <HAL_TIM_PWM_Start+0x188>)
 800e3c0:	4293      	cmp	r3, r2
 800e3c2:	d004      	beq.n	800e3ce <HAL_TIM_PWM_Start+0x136>
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	4a16      	ldr	r2, [pc, #88]	; (800e424 <HAL_TIM_PWM_Start+0x18c>)
 800e3ca:	4293      	cmp	r3, r2
 800e3cc:	d111      	bne.n	800e3f2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	689b      	ldr	r3, [r3, #8]
 800e3d4:	f003 0307 	and.w	r3, r3, #7
 800e3d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	2b06      	cmp	r3, #6
 800e3de:	d010      	beq.n	800e402 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	681a      	ldr	r2, [r3, #0]
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	f042 0201 	orr.w	r2, r2, #1
 800e3ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e3f0:	e007      	b.n	800e402 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	681a      	ldr	r2, [r3, #0]
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	f042 0201 	orr.w	r2, r2, #1
 800e400:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e402:	2300      	movs	r3, #0
}
 800e404:	4618      	mov	r0, r3
 800e406:	3710      	adds	r7, #16
 800e408:	46bd      	mov	sp, r7
 800e40a:	bd80      	pop	{r7, pc}
 800e40c:	40010000 	.word	0x40010000
 800e410:	40010400 	.word	0x40010400
 800e414:	40000400 	.word	0x40000400
 800e418:	40000800 	.word	0x40000800
 800e41c:	40000c00 	.word	0x40000c00
 800e420:	40014000 	.word	0x40014000
 800e424:	40001800 	.word	0x40001800

0800e428 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800e428:	b580      	push	{r7, lr}
 800e42a:	b082      	sub	sp, #8
 800e42c:	af00      	add	r7, sp, #0
 800e42e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	2b00      	cmp	r3, #0
 800e434:	d101      	bne.n	800e43a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800e436:	2301      	movs	r3, #1
 800e438:	e041      	b.n	800e4be <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e440:	b2db      	uxtb	r3, r3
 800e442:	2b00      	cmp	r3, #0
 800e444:	d106      	bne.n	800e454 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	2200      	movs	r2, #0
 800e44a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800e44e:	6878      	ldr	r0, [r7, #4]
 800e450:	f7fc f830 	bl	800a4b4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	2202      	movs	r2, #2
 800e458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	681a      	ldr	r2, [r3, #0]
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	3304      	adds	r3, #4
 800e464:	4619      	mov	r1, r3
 800e466:	4610      	mov	r0, r2
 800e468:	f000 fce6 	bl	800ee38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	2201      	movs	r2, #1
 800e470:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	2201      	movs	r2, #1
 800e478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	2201      	movs	r2, #1
 800e480:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	2201      	movs	r2, #1
 800e488:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	2201      	movs	r2, #1
 800e490:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	2201      	movs	r2, #1
 800e498:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	2201      	movs	r2, #1
 800e4a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	2201      	movs	r2, #1
 800e4a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	2201      	movs	r2, #1
 800e4b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	2201      	movs	r2, #1
 800e4b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e4bc:	2300      	movs	r3, #0
}
 800e4be:	4618      	mov	r0, r3
 800e4c0:	3708      	adds	r7, #8
 800e4c2:	46bd      	mov	sp, r7
 800e4c4:	bd80      	pop	{r7, pc}
	...

0800e4c8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e4c8:	b580      	push	{r7, lr}
 800e4ca:	b084      	sub	sp, #16
 800e4cc:	af00      	add	r7, sp, #0
 800e4ce:	6078      	str	r0, [r7, #4]
 800e4d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e4d2:	2300      	movs	r3, #0
 800e4d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800e4d6:	683b      	ldr	r3, [r7, #0]
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d104      	bne.n	800e4e6 <HAL_TIM_IC_Start_IT+0x1e>
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e4e2:	b2db      	uxtb	r3, r3
 800e4e4:	e013      	b.n	800e50e <HAL_TIM_IC_Start_IT+0x46>
 800e4e6:	683b      	ldr	r3, [r7, #0]
 800e4e8:	2b04      	cmp	r3, #4
 800e4ea:	d104      	bne.n	800e4f6 <HAL_TIM_IC_Start_IT+0x2e>
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800e4f2:	b2db      	uxtb	r3, r3
 800e4f4:	e00b      	b.n	800e50e <HAL_TIM_IC_Start_IT+0x46>
 800e4f6:	683b      	ldr	r3, [r7, #0]
 800e4f8:	2b08      	cmp	r3, #8
 800e4fa:	d104      	bne.n	800e506 <HAL_TIM_IC_Start_IT+0x3e>
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e502:	b2db      	uxtb	r3, r3
 800e504:	e003      	b.n	800e50e <HAL_TIM_IC_Start_IT+0x46>
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e50c:	b2db      	uxtb	r3, r3
 800e50e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800e510:	683b      	ldr	r3, [r7, #0]
 800e512:	2b00      	cmp	r3, #0
 800e514:	d104      	bne.n	800e520 <HAL_TIM_IC_Start_IT+0x58>
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e51c:	b2db      	uxtb	r3, r3
 800e51e:	e013      	b.n	800e548 <HAL_TIM_IC_Start_IT+0x80>
 800e520:	683b      	ldr	r3, [r7, #0]
 800e522:	2b04      	cmp	r3, #4
 800e524:	d104      	bne.n	800e530 <HAL_TIM_IC_Start_IT+0x68>
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e52c:	b2db      	uxtb	r3, r3
 800e52e:	e00b      	b.n	800e548 <HAL_TIM_IC_Start_IT+0x80>
 800e530:	683b      	ldr	r3, [r7, #0]
 800e532:	2b08      	cmp	r3, #8
 800e534:	d104      	bne.n	800e540 <HAL_TIM_IC_Start_IT+0x78>
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e53c:	b2db      	uxtb	r3, r3
 800e53e:	e003      	b.n	800e548 <HAL_TIM_IC_Start_IT+0x80>
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e546:	b2db      	uxtb	r3, r3
 800e548:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800e54a:	7bbb      	ldrb	r3, [r7, #14]
 800e54c:	2b01      	cmp	r3, #1
 800e54e:	d102      	bne.n	800e556 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800e550:	7b7b      	ldrb	r3, [r7, #13]
 800e552:	2b01      	cmp	r3, #1
 800e554:	d001      	beq.n	800e55a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800e556:	2301      	movs	r3, #1
 800e558:	e0cc      	b.n	800e6f4 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e55a:	683b      	ldr	r3, [r7, #0]
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d104      	bne.n	800e56a <HAL_TIM_IC_Start_IT+0xa2>
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	2202      	movs	r2, #2
 800e564:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e568:	e013      	b.n	800e592 <HAL_TIM_IC_Start_IT+0xca>
 800e56a:	683b      	ldr	r3, [r7, #0]
 800e56c:	2b04      	cmp	r3, #4
 800e56e:	d104      	bne.n	800e57a <HAL_TIM_IC_Start_IT+0xb2>
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	2202      	movs	r2, #2
 800e574:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e578:	e00b      	b.n	800e592 <HAL_TIM_IC_Start_IT+0xca>
 800e57a:	683b      	ldr	r3, [r7, #0]
 800e57c:	2b08      	cmp	r3, #8
 800e57e:	d104      	bne.n	800e58a <HAL_TIM_IC_Start_IT+0xc2>
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	2202      	movs	r2, #2
 800e584:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e588:	e003      	b.n	800e592 <HAL_TIM_IC_Start_IT+0xca>
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	2202      	movs	r2, #2
 800e58e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e592:	683b      	ldr	r3, [r7, #0]
 800e594:	2b00      	cmp	r3, #0
 800e596:	d104      	bne.n	800e5a2 <HAL_TIM_IC_Start_IT+0xda>
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	2202      	movs	r2, #2
 800e59c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e5a0:	e013      	b.n	800e5ca <HAL_TIM_IC_Start_IT+0x102>
 800e5a2:	683b      	ldr	r3, [r7, #0]
 800e5a4:	2b04      	cmp	r3, #4
 800e5a6:	d104      	bne.n	800e5b2 <HAL_TIM_IC_Start_IT+0xea>
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	2202      	movs	r2, #2
 800e5ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e5b0:	e00b      	b.n	800e5ca <HAL_TIM_IC_Start_IT+0x102>
 800e5b2:	683b      	ldr	r3, [r7, #0]
 800e5b4:	2b08      	cmp	r3, #8
 800e5b6:	d104      	bne.n	800e5c2 <HAL_TIM_IC_Start_IT+0xfa>
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	2202      	movs	r2, #2
 800e5bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e5c0:	e003      	b.n	800e5ca <HAL_TIM_IC_Start_IT+0x102>
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	2202      	movs	r2, #2
 800e5c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800e5ca:	683b      	ldr	r3, [r7, #0]
 800e5cc:	2b0c      	cmp	r3, #12
 800e5ce:	d841      	bhi.n	800e654 <HAL_TIM_IC_Start_IT+0x18c>
 800e5d0:	a201      	add	r2, pc, #4	; (adr r2, 800e5d8 <HAL_TIM_IC_Start_IT+0x110>)
 800e5d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5d6:	bf00      	nop
 800e5d8:	0800e60d 	.word	0x0800e60d
 800e5dc:	0800e655 	.word	0x0800e655
 800e5e0:	0800e655 	.word	0x0800e655
 800e5e4:	0800e655 	.word	0x0800e655
 800e5e8:	0800e61f 	.word	0x0800e61f
 800e5ec:	0800e655 	.word	0x0800e655
 800e5f0:	0800e655 	.word	0x0800e655
 800e5f4:	0800e655 	.word	0x0800e655
 800e5f8:	0800e631 	.word	0x0800e631
 800e5fc:	0800e655 	.word	0x0800e655
 800e600:	0800e655 	.word	0x0800e655
 800e604:	0800e655 	.word	0x0800e655
 800e608:	0800e643 	.word	0x0800e643
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	68da      	ldr	r2, [r3, #12]
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	f042 0202 	orr.w	r2, r2, #2
 800e61a:	60da      	str	r2, [r3, #12]
      break;
 800e61c:	e01d      	b.n	800e65a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	68da      	ldr	r2, [r3, #12]
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	f042 0204 	orr.w	r2, r2, #4
 800e62c:	60da      	str	r2, [r3, #12]
      break;
 800e62e:	e014      	b.n	800e65a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	68da      	ldr	r2, [r3, #12]
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	f042 0208 	orr.w	r2, r2, #8
 800e63e:	60da      	str	r2, [r3, #12]
      break;
 800e640:	e00b      	b.n	800e65a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	68da      	ldr	r2, [r3, #12]
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	f042 0210 	orr.w	r2, r2, #16
 800e650:	60da      	str	r2, [r3, #12]
      break;
 800e652:	e002      	b.n	800e65a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800e654:	2301      	movs	r3, #1
 800e656:	73fb      	strb	r3, [r7, #15]
      break;
 800e658:	bf00      	nop
  }

  if (status == HAL_OK)
 800e65a:	7bfb      	ldrb	r3, [r7, #15]
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d148      	bne.n	800e6f2 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	2201      	movs	r2, #1
 800e666:	6839      	ldr	r1, [r7, #0]
 800e668:	4618      	mov	r0, r3
 800e66a:	f000 fff9 	bl	800f660 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	4a22      	ldr	r2, [pc, #136]	; (800e6fc <HAL_TIM_IC_Start_IT+0x234>)
 800e674:	4293      	cmp	r3, r2
 800e676:	d022      	beq.n	800e6be <HAL_TIM_IC_Start_IT+0x1f6>
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e680:	d01d      	beq.n	800e6be <HAL_TIM_IC_Start_IT+0x1f6>
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	4a1e      	ldr	r2, [pc, #120]	; (800e700 <HAL_TIM_IC_Start_IT+0x238>)
 800e688:	4293      	cmp	r3, r2
 800e68a:	d018      	beq.n	800e6be <HAL_TIM_IC_Start_IT+0x1f6>
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	4a1c      	ldr	r2, [pc, #112]	; (800e704 <HAL_TIM_IC_Start_IT+0x23c>)
 800e692:	4293      	cmp	r3, r2
 800e694:	d013      	beq.n	800e6be <HAL_TIM_IC_Start_IT+0x1f6>
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	4a1b      	ldr	r2, [pc, #108]	; (800e708 <HAL_TIM_IC_Start_IT+0x240>)
 800e69c:	4293      	cmp	r3, r2
 800e69e:	d00e      	beq.n	800e6be <HAL_TIM_IC_Start_IT+0x1f6>
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	4a19      	ldr	r2, [pc, #100]	; (800e70c <HAL_TIM_IC_Start_IT+0x244>)
 800e6a6:	4293      	cmp	r3, r2
 800e6a8:	d009      	beq.n	800e6be <HAL_TIM_IC_Start_IT+0x1f6>
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	4a18      	ldr	r2, [pc, #96]	; (800e710 <HAL_TIM_IC_Start_IT+0x248>)
 800e6b0:	4293      	cmp	r3, r2
 800e6b2:	d004      	beq.n	800e6be <HAL_TIM_IC_Start_IT+0x1f6>
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	4a16      	ldr	r2, [pc, #88]	; (800e714 <HAL_TIM_IC_Start_IT+0x24c>)
 800e6ba:	4293      	cmp	r3, r2
 800e6bc:	d111      	bne.n	800e6e2 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	689b      	ldr	r3, [r3, #8]
 800e6c4:	f003 0307 	and.w	r3, r3, #7
 800e6c8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e6ca:	68bb      	ldr	r3, [r7, #8]
 800e6cc:	2b06      	cmp	r3, #6
 800e6ce:	d010      	beq.n	800e6f2 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	681a      	ldr	r2, [r3, #0]
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	f042 0201 	orr.w	r2, r2, #1
 800e6de:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e6e0:	e007      	b.n	800e6f2 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	681a      	ldr	r2, [r3, #0]
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	f042 0201 	orr.w	r2, r2, #1
 800e6f0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800e6f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6f4:	4618      	mov	r0, r3
 800e6f6:	3710      	adds	r7, #16
 800e6f8:	46bd      	mov	sp, r7
 800e6fa:	bd80      	pop	{r7, pc}
 800e6fc:	40010000 	.word	0x40010000
 800e700:	40000400 	.word	0x40000400
 800e704:	40000800 	.word	0x40000800
 800e708:	40000c00 	.word	0x40000c00
 800e70c:	40010400 	.word	0x40010400
 800e710:	40014000 	.word	0x40014000
 800e714:	40001800 	.word	0x40001800

0800e718 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e718:	b580      	push	{r7, lr}
 800e71a:	b082      	sub	sp, #8
 800e71c:	af00      	add	r7, sp, #0
 800e71e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	691b      	ldr	r3, [r3, #16]
 800e726:	f003 0302 	and.w	r3, r3, #2
 800e72a:	2b02      	cmp	r3, #2
 800e72c:	d122      	bne.n	800e774 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	68db      	ldr	r3, [r3, #12]
 800e734:	f003 0302 	and.w	r3, r3, #2
 800e738:	2b02      	cmp	r3, #2
 800e73a:	d11b      	bne.n	800e774 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	f06f 0202 	mvn.w	r2, #2
 800e744:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	2201      	movs	r2, #1
 800e74a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	699b      	ldr	r3, [r3, #24]
 800e752:	f003 0303 	and.w	r3, r3, #3
 800e756:	2b00      	cmp	r3, #0
 800e758:	d003      	beq.n	800e762 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e75a:	6878      	ldr	r0, [r7, #4]
 800e75c:	f7fb f90a 	bl	8009974 <HAL_TIM_IC_CaptureCallback>
 800e760:	e005      	b.n	800e76e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e762:	6878      	ldr	r0, [r7, #4]
 800e764:	f000 fb4a 	bl	800edfc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e768:	6878      	ldr	r0, [r7, #4]
 800e76a:	f000 fb51 	bl	800ee10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	2200      	movs	r2, #0
 800e772:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	691b      	ldr	r3, [r3, #16]
 800e77a:	f003 0304 	and.w	r3, r3, #4
 800e77e:	2b04      	cmp	r3, #4
 800e780:	d122      	bne.n	800e7c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	68db      	ldr	r3, [r3, #12]
 800e788:	f003 0304 	and.w	r3, r3, #4
 800e78c:	2b04      	cmp	r3, #4
 800e78e:	d11b      	bne.n	800e7c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	f06f 0204 	mvn.w	r2, #4
 800e798:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	2202      	movs	r2, #2
 800e79e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	699b      	ldr	r3, [r3, #24]
 800e7a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d003      	beq.n	800e7b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e7ae:	6878      	ldr	r0, [r7, #4]
 800e7b0:	f7fb f8e0 	bl	8009974 <HAL_TIM_IC_CaptureCallback>
 800e7b4:	e005      	b.n	800e7c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e7b6:	6878      	ldr	r0, [r7, #4]
 800e7b8:	f000 fb20 	bl	800edfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e7bc:	6878      	ldr	r0, [r7, #4]
 800e7be:	f000 fb27 	bl	800ee10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	2200      	movs	r2, #0
 800e7c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	691b      	ldr	r3, [r3, #16]
 800e7ce:	f003 0308 	and.w	r3, r3, #8
 800e7d2:	2b08      	cmp	r3, #8
 800e7d4:	d122      	bne.n	800e81c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	68db      	ldr	r3, [r3, #12]
 800e7dc:	f003 0308 	and.w	r3, r3, #8
 800e7e0:	2b08      	cmp	r3, #8
 800e7e2:	d11b      	bne.n	800e81c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	f06f 0208 	mvn.w	r2, #8
 800e7ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	2204      	movs	r2, #4
 800e7f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	69db      	ldr	r3, [r3, #28]
 800e7fa:	f003 0303 	and.w	r3, r3, #3
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d003      	beq.n	800e80a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e802:	6878      	ldr	r0, [r7, #4]
 800e804:	f7fb f8b6 	bl	8009974 <HAL_TIM_IC_CaptureCallback>
 800e808:	e005      	b.n	800e816 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e80a:	6878      	ldr	r0, [r7, #4]
 800e80c:	f000 faf6 	bl	800edfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e810:	6878      	ldr	r0, [r7, #4]
 800e812:	f000 fafd 	bl	800ee10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	2200      	movs	r2, #0
 800e81a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	691b      	ldr	r3, [r3, #16]
 800e822:	f003 0310 	and.w	r3, r3, #16
 800e826:	2b10      	cmp	r3, #16
 800e828:	d122      	bne.n	800e870 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	68db      	ldr	r3, [r3, #12]
 800e830:	f003 0310 	and.w	r3, r3, #16
 800e834:	2b10      	cmp	r3, #16
 800e836:	d11b      	bne.n	800e870 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	f06f 0210 	mvn.w	r2, #16
 800e840:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	2208      	movs	r2, #8
 800e846:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	69db      	ldr	r3, [r3, #28]
 800e84e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e852:	2b00      	cmp	r3, #0
 800e854:	d003      	beq.n	800e85e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e856:	6878      	ldr	r0, [r7, #4]
 800e858:	f7fb f88c 	bl	8009974 <HAL_TIM_IC_CaptureCallback>
 800e85c:	e005      	b.n	800e86a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e85e:	6878      	ldr	r0, [r7, #4]
 800e860:	f000 facc 	bl	800edfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e864:	6878      	ldr	r0, [r7, #4]
 800e866:	f000 fad3 	bl	800ee10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	2200      	movs	r2, #0
 800e86e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	691b      	ldr	r3, [r3, #16]
 800e876:	f003 0301 	and.w	r3, r3, #1
 800e87a:	2b01      	cmp	r3, #1
 800e87c:	d10e      	bne.n	800e89c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	68db      	ldr	r3, [r3, #12]
 800e884:	f003 0301 	and.w	r3, r3, #1
 800e888:	2b01      	cmp	r3, #1
 800e88a:	d107      	bne.n	800e89c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	f06f 0201 	mvn.w	r2, #1
 800e894:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e896:	6878      	ldr	r0, [r7, #4]
 800e898:	f7fb f854 	bl	8009944 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	691b      	ldr	r3, [r3, #16]
 800e8a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e8a6:	2b80      	cmp	r3, #128	; 0x80
 800e8a8:	d10e      	bne.n	800e8c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	68db      	ldr	r3, [r3, #12]
 800e8b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e8b4:	2b80      	cmp	r3, #128	; 0x80
 800e8b6:	d107      	bne.n	800e8c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e8c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e8c2:	6878      	ldr	r0, [r7, #4]
 800e8c4:	f000 ffca 	bl	800f85c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	691b      	ldr	r3, [r3, #16]
 800e8ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e8d2:	2b40      	cmp	r3, #64	; 0x40
 800e8d4:	d10e      	bne.n	800e8f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	68db      	ldr	r3, [r3, #12]
 800e8dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e8e0:	2b40      	cmp	r3, #64	; 0x40
 800e8e2:	d107      	bne.n	800e8f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e8ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e8ee:	6878      	ldr	r0, [r7, #4]
 800e8f0:	f000 fa98 	bl	800ee24 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	691b      	ldr	r3, [r3, #16]
 800e8fa:	f003 0320 	and.w	r3, r3, #32
 800e8fe:	2b20      	cmp	r3, #32
 800e900:	d10e      	bne.n	800e920 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	68db      	ldr	r3, [r3, #12]
 800e908:	f003 0320 	and.w	r3, r3, #32
 800e90c:	2b20      	cmp	r3, #32
 800e90e:	d107      	bne.n	800e920 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	f06f 0220 	mvn.w	r2, #32
 800e918:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e91a:	6878      	ldr	r0, [r7, #4]
 800e91c:	f000 ff94 	bl	800f848 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e920:	bf00      	nop
 800e922:	3708      	adds	r7, #8
 800e924:	46bd      	mov	sp, r7
 800e926:	bd80      	pop	{r7, pc}

0800e928 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800e928:	b580      	push	{r7, lr}
 800e92a:	b086      	sub	sp, #24
 800e92c:	af00      	add	r7, sp, #0
 800e92e:	60f8      	str	r0, [r7, #12]
 800e930:	60b9      	str	r1, [r7, #8]
 800e932:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e934:	2300      	movs	r3, #0
 800e936:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e93e:	2b01      	cmp	r3, #1
 800e940:	d101      	bne.n	800e946 <HAL_TIM_IC_ConfigChannel+0x1e>
 800e942:	2302      	movs	r3, #2
 800e944:	e088      	b.n	800ea58 <HAL_TIM_IC_ConfigChannel+0x130>
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	2201      	movs	r2, #1
 800e94a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	2b00      	cmp	r3, #0
 800e952:	d11b      	bne.n	800e98c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	6818      	ldr	r0, [r3, #0]
 800e958:	68bb      	ldr	r3, [r7, #8]
 800e95a:	6819      	ldr	r1, [r3, #0]
 800e95c:	68bb      	ldr	r3, [r7, #8]
 800e95e:	685a      	ldr	r2, [r3, #4]
 800e960:	68bb      	ldr	r3, [r7, #8]
 800e962:	68db      	ldr	r3, [r3, #12]
 800e964:	f000 fcb8 	bl	800f2d8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	699a      	ldr	r2, [r3, #24]
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	f022 020c 	bic.w	r2, r2, #12
 800e976:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	6999      	ldr	r1, [r3, #24]
 800e97e:	68bb      	ldr	r3, [r7, #8]
 800e980:	689a      	ldr	r2, [r3, #8]
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	430a      	orrs	r2, r1
 800e988:	619a      	str	r2, [r3, #24]
 800e98a:	e060      	b.n	800ea4e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	2b04      	cmp	r3, #4
 800e990:	d11c      	bne.n	800e9cc <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	6818      	ldr	r0, [r3, #0]
 800e996:	68bb      	ldr	r3, [r7, #8]
 800e998:	6819      	ldr	r1, [r3, #0]
 800e99a:	68bb      	ldr	r3, [r7, #8]
 800e99c:	685a      	ldr	r2, [r3, #4]
 800e99e:	68bb      	ldr	r3, [r7, #8]
 800e9a0:	68db      	ldr	r3, [r3, #12]
 800e9a2:	f000 fd3c 	bl	800f41e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	699a      	ldr	r2, [r3, #24]
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800e9b4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	6999      	ldr	r1, [r3, #24]
 800e9bc:	68bb      	ldr	r3, [r7, #8]
 800e9be:	689b      	ldr	r3, [r3, #8]
 800e9c0:	021a      	lsls	r2, r3, #8
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	430a      	orrs	r2, r1
 800e9c8:	619a      	str	r2, [r3, #24]
 800e9ca:	e040      	b.n	800ea4e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	2b08      	cmp	r3, #8
 800e9d0:	d11b      	bne.n	800ea0a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	6818      	ldr	r0, [r3, #0]
 800e9d6:	68bb      	ldr	r3, [r7, #8]
 800e9d8:	6819      	ldr	r1, [r3, #0]
 800e9da:	68bb      	ldr	r3, [r7, #8]
 800e9dc:	685a      	ldr	r2, [r3, #4]
 800e9de:	68bb      	ldr	r3, [r7, #8]
 800e9e0:	68db      	ldr	r3, [r3, #12]
 800e9e2:	f000 fd89 	bl	800f4f8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	69da      	ldr	r2, [r3, #28]
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	f022 020c 	bic.w	r2, r2, #12
 800e9f4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	69d9      	ldr	r1, [r3, #28]
 800e9fc:	68bb      	ldr	r3, [r7, #8]
 800e9fe:	689a      	ldr	r2, [r3, #8]
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	430a      	orrs	r2, r1
 800ea06:	61da      	str	r2, [r3, #28]
 800ea08:	e021      	b.n	800ea4e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	2b0c      	cmp	r3, #12
 800ea0e:	d11c      	bne.n	800ea4a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	6818      	ldr	r0, [r3, #0]
 800ea14:	68bb      	ldr	r3, [r7, #8]
 800ea16:	6819      	ldr	r1, [r3, #0]
 800ea18:	68bb      	ldr	r3, [r7, #8]
 800ea1a:	685a      	ldr	r2, [r3, #4]
 800ea1c:	68bb      	ldr	r3, [r7, #8]
 800ea1e:	68db      	ldr	r3, [r3, #12]
 800ea20:	f000 fda6 	bl	800f570 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	69da      	ldr	r2, [r3, #28]
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800ea32:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	69d9      	ldr	r1, [r3, #28]
 800ea3a:	68bb      	ldr	r3, [r7, #8]
 800ea3c:	689b      	ldr	r3, [r3, #8]
 800ea3e:	021a      	lsls	r2, r3, #8
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	430a      	orrs	r2, r1
 800ea46:	61da      	str	r2, [r3, #28]
 800ea48:	e001      	b.n	800ea4e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800ea4a:	2301      	movs	r3, #1
 800ea4c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	2200      	movs	r2, #0
 800ea52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ea56:	7dfb      	ldrb	r3, [r7, #23]
}
 800ea58:	4618      	mov	r0, r3
 800ea5a:	3718      	adds	r7, #24
 800ea5c:	46bd      	mov	sp, r7
 800ea5e:	bd80      	pop	{r7, pc}

0800ea60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ea60:	b580      	push	{r7, lr}
 800ea62:	b086      	sub	sp, #24
 800ea64:	af00      	add	r7, sp, #0
 800ea66:	60f8      	str	r0, [r7, #12]
 800ea68:	60b9      	str	r1, [r7, #8]
 800ea6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ea6c:	2300      	movs	r3, #0
 800ea6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ea76:	2b01      	cmp	r3, #1
 800ea78:	d101      	bne.n	800ea7e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ea7a:	2302      	movs	r3, #2
 800ea7c:	e0ae      	b.n	800ebdc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	2201      	movs	r2, #1
 800ea82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	2b0c      	cmp	r3, #12
 800ea8a:	f200 809f 	bhi.w	800ebcc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800ea8e:	a201      	add	r2, pc, #4	; (adr r2, 800ea94 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ea90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea94:	0800eac9 	.word	0x0800eac9
 800ea98:	0800ebcd 	.word	0x0800ebcd
 800ea9c:	0800ebcd 	.word	0x0800ebcd
 800eaa0:	0800ebcd 	.word	0x0800ebcd
 800eaa4:	0800eb09 	.word	0x0800eb09
 800eaa8:	0800ebcd 	.word	0x0800ebcd
 800eaac:	0800ebcd 	.word	0x0800ebcd
 800eab0:	0800ebcd 	.word	0x0800ebcd
 800eab4:	0800eb4b 	.word	0x0800eb4b
 800eab8:	0800ebcd 	.word	0x0800ebcd
 800eabc:	0800ebcd 	.word	0x0800ebcd
 800eac0:	0800ebcd 	.word	0x0800ebcd
 800eac4:	0800eb8b 	.word	0x0800eb8b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	68b9      	ldr	r1, [r7, #8]
 800eace:	4618      	mov	r0, r3
 800ead0:	f000 fa52 	bl	800ef78 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	699a      	ldr	r2, [r3, #24]
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	f042 0208 	orr.w	r2, r2, #8
 800eae2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	699a      	ldr	r2, [r3, #24]
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	f022 0204 	bic.w	r2, r2, #4
 800eaf2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	6999      	ldr	r1, [r3, #24]
 800eafa:	68bb      	ldr	r3, [r7, #8]
 800eafc:	691a      	ldr	r2, [r3, #16]
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	430a      	orrs	r2, r1
 800eb04:	619a      	str	r2, [r3, #24]
      break;
 800eb06:	e064      	b.n	800ebd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	68b9      	ldr	r1, [r7, #8]
 800eb0e:	4618      	mov	r0, r3
 800eb10:	f000 faa2 	bl	800f058 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	699a      	ldr	r2, [r3, #24]
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800eb22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	699a      	ldr	r2, [r3, #24]
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800eb32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	6999      	ldr	r1, [r3, #24]
 800eb3a:	68bb      	ldr	r3, [r7, #8]
 800eb3c:	691b      	ldr	r3, [r3, #16]
 800eb3e:	021a      	lsls	r2, r3, #8
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	430a      	orrs	r2, r1
 800eb46:	619a      	str	r2, [r3, #24]
      break;
 800eb48:	e043      	b.n	800ebd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	68b9      	ldr	r1, [r7, #8]
 800eb50:	4618      	mov	r0, r3
 800eb52:	f000 faf7 	bl	800f144 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	69da      	ldr	r2, [r3, #28]
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	f042 0208 	orr.w	r2, r2, #8
 800eb64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	69da      	ldr	r2, [r3, #28]
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	f022 0204 	bic.w	r2, r2, #4
 800eb74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	69d9      	ldr	r1, [r3, #28]
 800eb7c:	68bb      	ldr	r3, [r7, #8]
 800eb7e:	691a      	ldr	r2, [r3, #16]
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	430a      	orrs	r2, r1
 800eb86:	61da      	str	r2, [r3, #28]
      break;
 800eb88:	e023      	b.n	800ebd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	68b9      	ldr	r1, [r7, #8]
 800eb90:	4618      	mov	r0, r3
 800eb92:	f000 fb4b 	bl	800f22c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	69da      	ldr	r2, [r3, #28]
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800eba4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	69da      	ldr	r2, [r3, #28]
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ebb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	69d9      	ldr	r1, [r3, #28]
 800ebbc:	68bb      	ldr	r3, [r7, #8]
 800ebbe:	691b      	ldr	r3, [r3, #16]
 800ebc0:	021a      	lsls	r2, r3, #8
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	430a      	orrs	r2, r1
 800ebc8:	61da      	str	r2, [r3, #28]
      break;
 800ebca:	e002      	b.n	800ebd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800ebcc:	2301      	movs	r3, #1
 800ebce:	75fb      	strb	r3, [r7, #23]
      break;
 800ebd0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	2200      	movs	r2, #0
 800ebd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ebda:	7dfb      	ldrb	r3, [r7, #23]
}
 800ebdc:	4618      	mov	r0, r3
 800ebde:	3718      	adds	r7, #24
 800ebe0:	46bd      	mov	sp, r7
 800ebe2:	bd80      	pop	{r7, pc}

0800ebe4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ebe4:	b580      	push	{r7, lr}
 800ebe6:	b084      	sub	sp, #16
 800ebe8:	af00      	add	r7, sp, #0
 800ebea:	6078      	str	r0, [r7, #4]
 800ebec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ebee:	2300      	movs	r3, #0
 800ebf0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ebf8:	2b01      	cmp	r3, #1
 800ebfa:	d101      	bne.n	800ec00 <HAL_TIM_ConfigClockSource+0x1c>
 800ebfc:	2302      	movs	r3, #2
 800ebfe:	e0b4      	b.n	800ed6a <HAL_TIM_ConfigClockSource+0x186>
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	2201      	movs	r2, #1
 800ec04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	2202      	movs	r2, #2
 800ec0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	689b      	ldr	r3, [r3, #8]
 800ec16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ec18:	68bb      	ldr	r3, [r7, #8]
 800ec1a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800ec1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ec20:	68bb      	ldr	r3, [r7, #8]
 800ec22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ec26:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	68ba      	ldr	r2, [r7, #8]
 800ec2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ec30:	683b      	ldr	r3, [r7, #0]
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ec38:	d03e      	beq.n	800ecb8 <HAL_TIM_ConfigClockSource+0xd4>
 800ec3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ec3e:	f200 8087 	bhi.w	800ed50 <HAL_TIM_ConfigClockSource+0x16c>
 800ec42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ec46:	f000 8086 	beq.w	800ed56 <HAL_TIM_ConfigClockSource+0x172>
 800ec4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ec4e:	d87f      	bhi.n	800ed50 <HAL_TIM_ConfigClockSource+0x16c>
 800ec50:	2b70      	cmp	r3, #112	; 0x70
 800ec52:	d01a      	beq.n	800ec8a <HAL_TIM_ConfigClockSource+0xa6>
 800ec54:	2b70      	cmp	r3, #112	; 0x70
 800ec56:	d87b      	bhi.n	800ed50 <HAL_TIM_ConfigClockSource+0x16c>
 800ec58:	2b60      	cmp	r3, #96	; 0x60
 800ec5a:	d050      	beq.n	800ecfe <HAL_TIM_ConfigClockSource+0x11a>
 800ec5c:	2b60      	cmp	r3, #96	; 0x60
 800ec5e:	d877      	bhi.n	800ed50 <HAL_TIM_ConfigClockSource+0x16c>
 800ec60:	2b50      	cmp	r3, #80	; 0x50
 800ec62:	d03c      	beq.n	800ecde <HAL_TIM_ConfigClockSource+0xfa>
 800ec64:	2b50      	cmp	r3, #80	; 0x50
 800ec66:	d873      	bhi.n	800ed50 <HAL_TIM_ConfigClockSource+0x16c>
 800ec68:	2b40      	cmp	r3, #64	; 0x40
 800ec6a:	d058      	beq.n	800ed1e <HAL_TIM_ConfigClockSource+0x13a>
 800ec6c:	2b40      	cmp	r3, #64	; 0x40
 800ec6e:	d86f      	bhi.n	800ed50 <HAL_TIM_ConfigClockSource+0x16c>
 800ec70:	2b30      	cmp	r3, #48	; 0x30
 800ec72:	d064      	beq.n	800ed3e <HAL_TIM_ConfigClockSource+0x15a>
 800ec74:	2b30      	cmp	r3, #48	; 0x30
 800ec76:	d86b      	bhi.n	800ed50 <HAL_TIM_ConfigClockSource+0x16c>
 800ec78:	2b20      	cmp	r3, #32
 800ec7a:	d060      	beq.n	800ed3e <HAL_TIM_ConfigClockSource+0x15a>
 800ec7c:	2b20      	cmp	r3, #32
 800ec7e:	d867      	bhi.n	800ed50 <HAL_TIM_ConfigClockSource+0x16c>
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d05c      	beq.n	800ed3e <HAL_TIM_ConfigClockSource+0x15a>
 800ec84:	2b10      	cmp	r3, #16
 800ec86:	d05a      	beq.n	800ed3e <HAL_TIM_ConfigClockSource+0x15a>
 800ec88:	e062      	b.n	800ed50 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	6818      	ldr	r0, [r3, #0]
 800ec8e:	683b      	ldr	r3, [r7, #0]
 800ec90:	6899      	ldr	r1, [r3, #8]
 800ec92:	683b      	ldr	r3, [r7, #0]
 800ec94:	685a      	ldr	r2, [r3, #4]
 800ec96:	683b      	ldr	r3, [r7, #0]
 800ec98:	68db      	ldr	r3, [r3, #12]
 800ec9a:	f000 fcc1 	bl	800f620 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	689b      	ldr	r3, [r3, #8]
 800eca4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800eca6:	68bb      	ldr	r3, [r7, #8]
 800eca8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ecac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	68ba      	ldr	r2, [r7, #8]
 800ecb4:	609a      	str	r2, [r3, #8]
      break;
 800ecb6:	e04f      	b.n	800ed58 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	6818      	ldr	r0, [r3, #0]
 800ecbc:	683b      	ldr	r3, [r7, #0]
 800ecbe:	6899      	ldr	r1, [r3, #8]
 800ecc0:	683b      	ldr	r3, [r7, #0]
 800ecc2:	685a      	ldr	r2, [r3, #4]
 800ecc4:	683b      	ldr	r3, [r7, #0]
 800ecc6:	68db      	ldr	r3, [r3, #12]
 800ecc8:	f000 fcaa 	bl	800f620 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	689a      	ldr	r2, [r3, #8]
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ecda:	609a      	str	r2, [r3, #8]
      break;
 800ecdc:	e03c      	b.n	800ed58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	6818      	ldr	r0, [r3, #0]
 800ece2:	683b      	ldr	r3, [r7, #0]
 800ece4:	6859      	ldr	r1, [r3, #4]
 800ece6:	683b      	ldr	r3, [r7, #0]
 800ece8:	68db      	ldr	r3, [r3, #12]
 800ecea:	461a      	mov	r2, r3
 800ecec:	f000 fb68 	bl	800f3c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	2150      	movs	r1, #80	; 0x50
 800ecf6:	4618      	mov	r0, r3
 800ecf8:	f000 fc77 	bl	800f5ea <TIM_ITRx_SetConfig>
      break;
 800ecfc:	e02c      	b.n	800ed58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	6818      	ldr	r0, [r3, #0]
 800ed02:	683b      	ldr	r3, [r7, #0]
 800ed04:	6859      	ldr	r1, [r3, #4]
 800ed06:	683b      	ldr	r3, [r7, #0]
 800ed08:	68db      	ldr	r3, [r3, #12]
 800ed0a:	461a      	mov	r2, r3
 800ed0c:	f000 fbc4 	bl	800f498 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	2160      	movs	r1, #96	; 0x60
 800ed16:	4618      	mov	r0, r3
 800ed18:	f000 fc67 	bl	800f5ea <TIM_ITRx_SetConfig>
      break;
 800ed1c:	e01c      	b.n	800ed58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	6818      	ldr	r0, [r3, #0]
 800ed22:	683b      	ldr	r3, [r7, #0]
 800ed24:	6859      	ldr	r1, [r3, #4]
 800ed26:	683b      	ldr	r3, [r7, #0]
 800ed28:	68db      	ldr	r3, [r3, #12]
 800ed2a:	461a      	mov	r2, r3
 800ed2c:	f000 fb48 	bl	800f3c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	2140      	movs	r1, #64	; 0x40
 800ed36:	4618      	mov	r0, r3
 800ed38:	f000 fc57 	bl	800f5ea <TIM_ITRx_SetConfig>
      break;
 800ed3c:	e00c      	b.n	800ed58 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	681a      	ldr	r2, [r3, #0]
 800ed42:	683b      	ldr	r3, [r7, #0]
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	4619      	mov	r1, r3
 800ed48:	4610      	mov	r0, r2
 800ed4a:	f000 fc4e 	bl	800f5ea <TIM_ITRx_SetConfig>
      break;
 800ed4e:	e003      	b.n	800ed58 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800ed50:	2301      	movs	r3, #1
 800ed52:	73fb      	strb	r3, [r7, #15]
      break;
 800ed54:	e000      	b.n	800ed58 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800ed56:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	2201      	movs	r2, #1
 800ed5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	2200      	movs	r2, #0
 800ed64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ed68:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed6a:	4618      	mov	r0, r3
 800ed6c:	3710      	adds	r7, #16
 800ed6e:	46bd      	mov	sp, r7
 800ed70:	bd80      	pop	{r7, pc}
	...

0800ed74 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ed74:	b480      	push	{r7}
 800ed76:	b085      	sub	sp, #20
 800ed78:	af00      	add	r7, sp, #0
 800ed7a:	6078      	str	r0, [r7, #4]
 800ed7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800ed7e:	2300      	movs	r3, #0
 800ed80:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800ed82:	683b      	ldr	r3, [r7, #0]
 800ed84:	2b0c      	cmp	r3, #12
 800ed86:	d831      	bhi.n	800edec <HAL_TIM_ReadCapturedValue+0x78>
 800ed88:	a201      	add	r2, pc, #4	; (adr r2, 800ed90 <HAL_TIM_ReadCapturedValue+0x1c>)
 800ed8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed8e:	bf00      	nop
 800ed90:	0800edc5 	.word	0x0800edc5
 800ed94:	0800eded 	.word	0x0800eded
 800ed98:	0800eded 	.word	0x0800eded
 800ed9c:	0800eded 	.word	0x0800eded
 800eda0:	0800edcf 	.word	0x0800edcf
 800eda4:	0800eded 	.word	0x0800eded
 800eda8:	0800eded 	.word	0x0800eded
 800edac:	0800eded 	.word	0x0800eded
 800edb0:	0800edd9 	.word	0x0800edd9
 800edb4:	0800eded 	.word	0x0800eded
 800edb8:	0800eded 	.word	0x0800eded
 800edbc:	0800eded 	.word	0x0800eded
 800edc0:	0800ede3 	.word	0x0800ede3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800edca:	60fb      	str	r3, [r7, #12]

      break;
 800edcc:	e00f      	b.n	800edee <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800edd4:	60fb      	str	r3, [r7, #12]

      break;
 800edd6:	e00a      	b.n	800edee <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800edde:	60fb      	str	r3, [r7, #12]

      break;
 800ede0:	e005      	b.n	800edee <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ede8:	60fb      	str	r3, [r7, #12]

      break;
 800edea:	e000      	b.n	800edee <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800edec:	bf00      	nop
  }

  return tmpreg;
 800edee:	68fb      	ldr	r3, [r7, #12]
}
 800edf0:	4618      	mov	r0, r3
 800edf2:	3714      	adds	r7, #20
 800edf4:	46bd      	mov	sp, r7
 800edf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edfa:	4770      	bx	lr

0800edfc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800edfc:	b480      	push	{r7}
 800edfe:	b083      	sub	sp, #12
 800ee00:	af00      	add	r7, sp, #0
 800ee02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ee04:	bf00      	nop
 800ee06:	370c      	adds	r7, #12
 800ee08:	46bd      	mov	sp, r7
 800ee0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee0e:	4770      	bx	lr

0800ee10 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ee10:	b480      	push	{r7}
 800ee12:	b083      	sub	sp, #12
 800ee14:	af00      	add	r7, sp, #0
 800ee16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ee18:	bf00      	nop
 800ee1a:	370c      	adds	r7, #12
 800ee1c:	46bd      	mov	sp, r7
 800ee1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee22:	4770      	bx	lr

0800ee24 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ee24:	b480      	push	{r7}
 800ee26:	b083      	sub	sp, #12
 800ee28:	af00      	add	r7, sp, #0
 800ee2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ee2c:	bf00      	nop
 800ee2e:	370c      	adds	r7, #12
 800ee30:	46bd      	mov	sp, r7
 800ee32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee36:	4770      	bx	lr

0800ee38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ee38:	b480      	push	{r7}
 800ee3a:	b085      	sub	sp, #20
 800ee3c:	af00      	add	r7, sp, #0
 800ee3e:	6078      	str	r0, [r7, #4]
 800ee40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	4a40      	ldr	r2, [pc, #256]	; (800ef4c <TIM_Base_SetConfig+0x114>)
 800ee4c:	4293      	cmp	r3, r2
 800ee4e:	d013      	beq.n	800ee78 <TIM_Base_SetConfig+0x40>
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ee56:	d00f      	beq.n	800ee78 <TIM_Base_SetConfig+0x40>
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	4a3d      	ldr	r2, [pc, #244]	; (800ef50 <TIM_Base_SetConfig+0x118>)
 800ee5c:	4293      	cmp	r3, r2
 800ee5e:	d00b      	beq.n	800ee78 <TIM_Base_SetConfig+0x40>
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	4a3c      	ldr	r2, [pc, #240]	; (800ef54 <TIM_Base_SetConfig+0x11c>)
 800ee64:	4293      	cmp	r3, r2
 800ee66:	d007      	beq.n	800ee78 <TIM_Base_SetConfig+0x40>
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	4a3b      	ldr	r2, [pc, #236]	; (800ef58 <TIM_Base_SetConfig+0x120>)
 800ee6c:	4293      	cmp	r3, r2
 800ee6e:	d003      	beq.n	800ee78 <TIM_Base_SetConfig+0x40>
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	4a3a      	ldr	r2, [pc, #232]	; (800ef5c <TIM_Base_SetConfig+0x124>)
 800ee74:	4293      	cmp	r3, r2
 800ee76:	d108      	bne.n	800ee8a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ee7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ee80:	683b      	ldr	r3, [r7, #0]
 800ee82:	685b      	ldr	r3, [r3, #4]
 800ee84:	68fa      	ldr	r2, [r7, #12]
 800ee86:	4313      	orrs	r3, r2
 800ee88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	4a2f      	ldr	r2, [pc, #188]	; (800ef4c <TIM_Base_SetConfig+0x114>)
 800ee8e:	4293      	cmp	r3, r2
 800ee90:	d02b      	beq.n	800eeea <TIM_Base_SetConfig+0xb2>
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ee98:	d027      	beq.n	800eeea <TIM_Base_SetConfig+0xb2>
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	4a2c      	ldr	r2, [pc, #176]	; (800ef50 <TIM_Base_SetConfig+0x118>)
 800ee9e:	4293      	cmp	r3, r2
 800eea0:	d023      	beq.n	800eeea <TIM_Base_SetConfig+0xb2>
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	4a2b      	ldr	r2, [pc, #172]	; (800ef54 <TIM_Base_SetConfig+0x11c>)
 800eea6:	4293      	cmp	r3, r2
 800eea8:	d01f      	beq.n	800eeea <TIM_Base_SetConfig+0xb2>
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	4a2a      	ldr	r2, [pc, #168]	; (800ef58 <TIM_Base_SetConfig+0x120>)
 800eeae:	4293      	cmp	r3, r2
 800eeb0:	d01b      	beq.n	800eeea <TIM_Base_SetConfig+0xb2>
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	4a29      	ldr	r2, [pc, #164]	; (800ef5c <TIM_Base_SetConfig+0x124>)
 800eeb6:	4293      	cmp	r3, r2
 800eeb8:	d017      	beq.n	800eeea <TIM_Base_SetConfig+0xb2>
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	4a28      	ldr	r2, [pc, #160]	; (800ef60 <TIM_Base_SetConfig+0x128>)
 800eebe:	4293      	cmp	r3, r2
 800eec0:	d013      	beq.n	800eeea <TIM_Base_SetConfig+0xb2>
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	4a27      	ldr	r2, [pc, #156]	; (800ef64 <TIM_Base_SetConfig+0x12c>)
 800eec6:	4293      	cmp	r3, r2
 800eec8:	d00f      	beq.n	800eeea <TIM_Base_SetConfig+0xb2>
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	4a26      	ldr	r2, [pc, #152]	; (800ef68 <TIM_Base_SetConfig+0x130>)
 800eece:	4293      	cmp	r3, r2
 800eed0:	d00b      	beq.n	800eeea <TIM_Base_SetConfig+0xb2>
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	4a25      	ldr	r2, [pc, #148]	; (800ef6c <TIM_Base_SetConfig+0x134>)
 800eed6:	4293      	cmp	r3, r2
 800eed8:	d007      	beq.n	800eeea <TIM_Base_SetConfig+0xb2>
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	4a24      	ldr	r2, [pc, #144]	; (800ef70 <TIM_Base_SetConfig+0x138>)
 800eede:	4293      	cmp	r3, r2
 800eee0:	d003      	beq.n	800eeea <TIM_Base_SetConfig+0xb2>
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	4a23      	ldr	r2, [pc, #140]	; (800ef74 <TIM_Base_SetConfig+0x13c>)
 800eee6:	4293      	cmp	r3, r2
 800eee8:	d108      	bne.n	800eefc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800eef0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800eef2:	683b      	ldr	r3, [r7, #0]
 800eef4:	68db      	ldr	r3, [r3, #12]
 800eef6:	68fa      	ldr	r2, [r7, #12]
 800eef8:	4313      	orrs	r3, r2
 800eefa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ef02:	683b      	ldr	r3, [r7, #0]
 800ef04:	695b      	ldr	r3, [r3, #20]
 800ef06:	4313      	orrs	r3, r2
 800ef08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	68fa      	ldr	r2, [r7, #12]
 800ef0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ef10:	683b      	ldr	r3, [r7, #0]
 800ef12:	689a      	ldr	r2, [r3, #8]
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ef18:	683b      	ldr	r3, [r7, #0]
 800ef1a:	681a      	ldr	r2, [r3, #0]
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	4a0a      	ldr	r2, [pc, #40]	; (800ef4c <TIM_Base_SetConfig+0x114>)
 800ef24:	4293      	cmp	r3, r2
 800ef26:	d003      	beq.n	800ef30 <TIM_Base_SetConfig+0xf8>
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	4a0c      	ldr	r2, [pc, #48]	; (800ef5c <TIM_Base_SetConfig+0x124>)
 800ef2c:	4293      	cmp	r3, r2
 800ef2e:	d103      	bne.n	800ef38 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ef30:	683b      	ldr	r3, [r7, #0]
 800ef32:	691a      	ldr	r2, [r3, #16]
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	2201      	movs	r2, #1
 800ef3c:	615a      	str	r2, [r3, #20]
}
 800ef3e:	bf00      	nop
 800ef40:	3714      	adds	r7, #20
 800ef42:	46bd      	mov	sp, r7
 800ef44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef48:	4770      	bx	lr
 800ef4a:	bf00      	nop
 800ef4c:	40010000 	.word	0x40010000
 800ef50:	40000400 	.word	0x40000400
 800ef54:	40000800 	.word	0x40000800
 800ef58:	40000c00 	.word	0x40000c00
 800ef5c:	40010400 	.word	0x40010400
 800ef60:	40014000 	.word	0x40014000
 800ef64:	40014400 	.word	0x40014400
 800ef68:	40014800 	.word	0x40014800
 800ef6c:	40001800 	.word	0x40001800
 800ef70:	40001c00 	.word	0x40001c00
 800ef74:	40002000 	.word	0x40002000

0800ef78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ef78:	b480      	push	{r7}
 800ef7a:	b087      	sub	sp, #28
 800ef7c:	af00      	add	r7, sp, #0
 800ef7e:	6078      	str	r0, [r7, #4]
 800ef80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	6a1b      	ldr	r3, [r3, #32]
 800ef86:	f023 0201 	bic.w	r2, r3, #1
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	6a1b      	ldr	r3, [r3, #32]
 800ef92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	685b      	ldr	r3, [r3, #4]
 800ef98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	699b      	ldr	r3, [r3, #24]
 800ef9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800efa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	f023 0303 	bic.w	r3, r3, #3
 800efae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800efb0:	683b      	ldr	r3, [r7, #0]
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	68fa      	ldr	r2, [r7, #12]
 800efb6:	4313      	orrs	r3, r2
 800efb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800efba:	697b      	ldr	r3, [r7, #20]
 800efbc:	f023 0302 	bic.w	r3, r3, #2
 800efc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800efc2:	683b      	ldr	r3, [r7, #0]
 800efc4:	689b      	ldr	r3, [r3, #8]
 800efc6:	697a      	ldr	r2, [r7, #20]
 800efc8:	4313      	orrs	r3, r2
 800efca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	4a20      	ldr	r2, [pc, #128]	; (800f050 <TIM_OC1_SetConfig+0xd8>)
 800efd0:	4293      	cmp	r3, r2
 800efd2:	d003      	beq.n	800efdc <TIM_OC1_SetConfig+0x64>
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	4a1f      	ldr	r2, [pc, #124]	; (800f054 <TIM_OC1_SetConfig+0xdc>)
 800efd8:	4293      	cmp	r3, r2
 800efda:	d10c      	bne.n	800eff6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800efdc:	697b      	ldr	r3, [r7, #20]
 800efde:	f023 0308 	bic.w	r3, r3, #8
 800efe2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800efe4:	683b      	ldr	r3, [r7, #0]
 800efe6:	68db      	ldr	r3, [r3, #12]
 800efe8:	697a      	ldr	r2, [r7, #20]
 800efea:	4313      	orrs	r3, r2
 800efec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800efee:	697b      	ldr	r3, [r7, #20]
 800eff0:	f023 0304 	bic.w	r3, r3, #4
 800eff4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	4a15      	ldr	r2, [pc, #84]	; (800f050 <TIM_OC1_SetConfig+0xd8>)
 800effa:	4293      	cmp	r3, r2
 800effc:	d003      	beq.n	800f006 <TIM_OC1_SetConfig+0x8e>
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	4a14      	ldr	r2, [pc, #80]	; (800f054 <TIM_OC1_SetConfig+0xdc>)
 800f002:	4293      	cmp	r3, r2
 800f004:	d111      	bne.n	800f02a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f006:	693b      	ldr	r3, [r7, #16]
 800f008:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f00c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f00e:	693b      	ldr	r3, [r7, #16]
 800f010:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f014:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f016:	683b      	ldr	r3, [r7, #0]
 800f018:	695b      	ldr	r3, [r3, #20]
 800f01a:	693a      	ldr	r2, [r7, #16]
 800f01c:	4313      	orrs	r3, r2
 800f01e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f020:	683b      	ldr	r3, [r7, #0]
 800f022:	699b      	ldr	r3, [r3, #24]
 800f024:	693a      	ldr	r2, [r7, #16]
 800f026:	4313      	orrs	r3, r2
 800f028:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	693a      	ldr	r2, [r7, #16]
 800f02e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	68fa      	ldr	r2, [r7, #12]
 800f034:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f036:	683b      	ldr	r3, [r7, #0]
 800f038:	685a      	ldr	r2, [r3, #4]
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	697a      	ldr	r2, [r7, #20]
 800f042:	621a      	str	r2, [r3, #32]
}
 800f044:	bf00      	nop
 800f046:	371c      	adds	r7, #28
 800f048:	46bd      	mov	sp, r7
 800f04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f04e:	4770      	bx	lr
 800f050:	40010000 	.word	0x40010000
 800f054:	40010400 	.word	0x40010400

0800f058 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f058:	b480      	push	{r7}
 800f05a:	b087      	sub	sp, #28
 800f05c:	af00      	add	r7, sp, #0
 800f05e:	6078      	str	r0, [r7, #4]
 800f060:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	6a1b      	ldr	r3, [r3, #32]
 800f066:	f023 0210 	bic.w	r2, r3, #16
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	6a1b      	ldr	r3, [r3, #32]
 800f072:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	685b      	ldr	r3, [r3, #4]
 800f078:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	699b      	ldr	r3, [r3, #24]
 800f07e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f086:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f08e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f090:	683b      	ldr	r3, [r7, #0]
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	021b      	lsls	r3, r3, #8
 800f096:	68fa      	ldr	r2, [r7, #12]
 800f098:	4313      	orrs	r3, r2
 800f09a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f09c:	697b      	ldr	r3, [r7, #20]
 800f09e:	f023 0320 	bic.w	r3, r3, #32
 800f0a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f0a4:	683b      	ldr	r3, [r7, #0]
 800f0a6:	689b      	ldr	r3, [r3, #8]
 800f0a8:	011b      	lsls	r3, r3, #4
 800f0aa:	697a      	ldr	r2, [r7, #20]
 800f0ac:	4313      	orrs	r3, r2
 800f0ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	4a22      	ldr	r2, [pc, #136]	; (800f13c <TIM_OC2_SetConfig+0xe4>)
 800f0b4:	4293      	cmp	r3, r2
 800f0b6:	d003      	beq.n	800f0c0 <TIM_OC2_SetConfig+0x68>
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	4a21      	ldr	r2, [pc, #132]	; (800f140 <TIM_OC2_SetConfig+0xe8>)
 800f0bc:	4293      	cmp	r3, r2
 800f0be:	d10d      	bne.n	800f0dc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f0c0:	697b      	ldr	r3, [r7, #20]
 800f0c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f0c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f0c8:	683b      	ldr	r3, [r7, #0]
 800f0ca:	68db      	ldr	r3, [r3, #12]
 800f0cc:	011b      	lsls	r3, r3, #4
 800f0ce:	697a      	ldr	r2, [r7, #20]
 800f0d0:	4313      	orrs	r3, r2
 800f0d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f0d4:	697b      	ldr	r3, [r7, #20]
 800f0d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f0da:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	4a17      	ldr	r2, [pc, #92]	; (800f13c <TIM_OC2_SetConfig+0xe4>)
 800f0e0:	4293      	cmp	r3, r2
 800f0e2:	d003      	beq.n	800f0ec <TIM_OC2_SetConfig+0x94>
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	4a16      	ldr	r2, [pc, #88]	; (800f140 <TIM_OC2_SetConfig+0xe8>)
 800f0e8:	4293      	cmp	r3, r2
 800f0ea:	d113      	bne.n	800f114 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f0ec:	693b      	ldr	r3, [r7, #16]
 800f0ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f0f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f0f4:	693b      	ldr	r3, [r7, #16]
 800f0f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f0fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f0fc:	683b      	ldr	r3, [r7, #0]
 800f0fe:	695b      	ldr	r3, [r3, #20]
 800f100:	009b      	lsls	r3, r3, #2
 800f102:	693a      	ldr	r2, [r7, #16]
 800f104:	4313      	orrs	r3, r2
 800f106:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f108:	683b      	ldr	r3, [r7, #0]
 800f10a:	699b      	ldr	r3, [r3, #24]
 800f10c:	009b      	lsls	r3, r3, #2
 800f10e:	693a      	ldr	r2, [r7, #16]
 800f110:	4313      	orrs	r3, r2
 800f112:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	693a      	ldr	r2, [r7, #16]
 800f118:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	68fa      	ldr	r2, [r7, #12]
 800f11e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f120:	683b      	ldr	r3, [r7, #0]
 800f122:	685a      	ldr	r2, [r3, #4]
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	697a      	ldr	r2, [r7, #20]
 800f12c:	621a      	str	r2, [r3, #32]
}
 800f12e:	bf00      	nop
 800f130:	371c      	adds	r7, #28
 800f132:	46bd      	mov	sp, r7
 800f134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f138:	4770      	bx	lr
 800f13a:	bf00      	nop
 800f13c:	40010000 	.word	0x40010000
 800f140:	40010400 	.word	0x40010400

0800f144 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f144:	b480      	push	{r7}
 800f146:	b087      	sub	sp, #28
 800f148:	af00      	add	r7, sp, #0
 800f14a:	6078      	str	r0, [r7, #4]
 800f14c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	6a1b      	ldr	r3, [r3, #32]
 800f152:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	6a1b      	ldr	r3, [r3, #32]
 800f15e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	685b      	ldr	r3, [r3, #4]
 800f164:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	69db      	ldr	r3, [r3, #28]
 800f16a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f16c:	68fb      	ldr	r3, [r7, #12]
 800f16e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f172:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	f023 0303 	bic.w	r3, r3, #3
 800f17a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f17c:	683b      	ldr	r3, [r7, #0]
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	68fa      	ldr	r2, [r7, #12]
 800f182:	4313      	orrs	r3, r2
 800f184:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f186:	697b      	ldr	r3, [r7, #20]
 800f188:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f18c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f18e:	683b      	ldr	r3, [r7, #0]
 800f190:	689b      	ldr	r3, [r3, #8]
 800f192:	021b      	lsls	r3, r3, #8
 800f194:	697a      	ldr	r2, [r7, #20]
 800f196:	4313      	orrs	r3, r2
 800f198:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	4a21      	ldr	r2, [pc, #132]	; (800f224 <TIM_OC3_SetConfig+0xe0>)
 800f19e:	4293      	cmp	r3, r2
 800f1a0:	d003      	beq.n	800f1aa <TIM_OC3_SetConfig+0x66>
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	4a20      	ldr	r2, [pc, #128]	; (800f228 <TIM_OC3_SetConfig+0xe4>)
 800f1a6:	4293      	cmp	r3, r2
 800f1a8:	d10d      	bne.n	800f1c6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f1aa:	697b      	ldr	r3, [r7, #20]
 800f1ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f1b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f1b2:	683b      	ldr	r3, [r7, #0]
 800f1b4:	68db      	ldr	r3, [r3, #12]
 800f1b6:	021b      	lsls	r3, r3, #8
 800f1b8:	697a      	ldr	r2, [r7, #20]
 800f1ba:	4313      	orrs	r3, r2
 800f1bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f1be:	697b      	ldr	r3, [r7, #20]
 800f1c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f1c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	4a16      	ldr	r2, [pc, #88]	; (800f224 <TIM_OC3_SetConfig+0xe0>)
 800f1ca:	4293      	cmp	r3, r2
 800f1cc:	d003      	beq.n	800f1d6 <TIM_OC3_SetConfig+0x92>
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	4a15      	ldr	r2, [pc, #84]	; (800f228 <TIM_OC3_SetConfig+0xe4>)
 800f1d2:	4293      	cmp	r3, r2
 800f1d4:	d113      	bne.n	800f1fe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f1d6:	693b      	ldr	r3, [r7, #16]
 800f1d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f1dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f1de:	693b      	ldr	r3, [r7, #16]
 800f1e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f1e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f1e6:	683b      	ldr	r3, [r7, #0]
 800f1e8:	695b      	ldr	r3, [r3, #20]
 800f1ea:	011b      	lsls	r3, r3, #4
 800f1ec:	693a      	ldr	r2, [r7, #16]
 800f1ee:	4313      	orrs	r3, r2
 800f1f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f1f2:	683b      	ldr	r3, [r7, #0]
 800f1f4:	699b      	ldr	r3, [r3, #24]
 800f1f6:	011b      	lsls	r3, r3, #4
 800f1f8:	693a      	ldr	r2, [r7, #16]
 800f1fa:	4313      	orrs	r3, r2
 800f1fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	693a      	ldr	r2, [r7, #16]
 800f202:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	68fa      	ldr	r2, [r7, #12]
 800f208:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f20a:	683b      	ldr	r3, [r7, #0]
 800f20c:	685a      	ldr	r2, [r3, #4]
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	697a      	ldr	r2, [r7, #20]
 800f216:	621a      	str	r2, [r3, #32]
}
 800f218:	bf00      	nop
 800f21a:	371c      	adds	r7, #28
 800f21c:	46bd      	mov	sp, r7
 800f21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f222:	4770      	bx	lr
 800f224:	40010000 	.word	0x40010000
 800f228:	40010400 	.word	0x40010400

0800f22c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f22c:	b480      	push	{r7}
 800f22e:	b087      	sub	sp, #28
 800f230:	af00      	add	r7, sp, #0
 800f232:	6078      	str	r0, [r7, #4]
 800f234:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	6a1b      	ldr	r3, [r3, #32]
 800f23a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	6a1b      	ldr	r3, [r3, #32]
 800f246:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	685b      	ldr	r3, [r3, #4]
 800f24c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	69db      	ldr	r3, [r3, #28]
 800f252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f25a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f25c:	68fb      	ldr	r3, [r7, #12]
 800f25e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f262:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f264:	683b      	ldr	r3, [r7, #0]
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	021b      	lsls	r3, r3, #8
 800f26a:	68fa      	ldr	r2, [r7, #12]
 800f26c:	4313      	orrs	r3, r2
 800f26e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f270:	693b      	ldr	r3, [r7, #16]
 800f272:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f276:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f278:	683b      	ldr	r3, [r7, #0]
 800f27a:	689b      	ldr	r3, [r3, #8]
 800f27c:	031b      	lsls	r3, r3, #12
 800f27e:	693a      	ldr	r2, [r7, #16]
 800f280:	4313      	orrs	r3, r2
 800f282:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	4a12      	ldr	r2, [pc, #72]	; (800f2d0 <TIM_OC4_SetConfig+0xa4>)
 800f288:	4293      	cmp	r3, r2
 800f28a:	d003      	beq.n	800f294 <TIM_OC4_SetConfig+0x68>
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	4a11      	ldr	r2, [pc, #68]	; (800f2d4 <TIM_OC4_SetConfig+0xa8>)
 800f290:	4293      	cmp	r3, r2
 800f292:	d109      	bne.n	800f2a8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f294:	697b      	ldr	r3, [r7, #20]
 800f296:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f29a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f29c:	683b      	ldr	r3, [r7, #0]
 800f29e:	695b      	ldr	r3, [r3, #20]
 800f2a0:	019b      	lsls	r3, r3, #6
 800f2a2:	697a      	ldr	r2, [r7, #20]
 800f2a4:	4313      	orrs	r3, r2
 800f2a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	697a      	ldr	r2, [r7, #20]
 800f2ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	68fa      	ldr	r2, [r7, #12]
 800f2b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f2b4:	683b      	ldr	r3, [r7, #0]
 800f2b6:	685a      	ldr	r2, [r3, #4]
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	693a      	ldr	r2, [r7, #16]
 800f2c0:	621a      	str	r2, [r3, #32]
}
 800f2c2:	bf00      	nop
 800f2c4:	371c      	adds	r7, #28
 800f2c6:	46bd      	mov	sp, r7
 800f2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2cc:	4770      	bx	lr
 800f2ce:	bf00      	nop
 800f2d0:	40010000 	.word	0x40010000
 800f2d4:	40010400 	.word	0x40010400

0800f2d8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800f2d8:	b480      	push	{r7}
 800f2da:	b087      	sub	sp, #28
 800f2dc:	af00      	add	r7, sp, #0
 800f2de:	60f8      	str	r0, [r7, #12]
 800f2e0:	60b9      	str	r1, [r7, #8]
 800f2e2:	607a      	str	r2, [r7, #4]
 800f2e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	6a1b      	ldr	r3, [r3, #32]
 800f2ea:	f023 0201 	bic.w	r2, r3, #1
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	699b      	ldr	r3, [r3, #24]
 800f2f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800f2f8:	68fb      	ldr	r3, [r7, #12]
 800f2fa:	6a1b      	ldr	r3, [r3, #32]
 800f2fc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	4a28      	ldr	r2, [pc, #160]	; (800f3a4 <TIM_TI1_SetConfig+0xcc>)
 800f302:	4293      	cmp	r3, r2
 800f304:	d01b      	beq.n	800f33e <TIM_TI1_SetConfig+0x66>
 800f306:	68fb      	ldr	r3, [r7, #12]
 800f308:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f30c:	d017      	beq.n	800f33e <TIM_TI1_SetConfig+0x66>
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	4a25      	ldr	r2, [pc, #148]	; (800f3a8 <TIM_TI1_SetConfig+0xd0>)
 800f312:	4293      	cmp	r3, r2
 800f314:	d013      	beq.n	800f33e <TIM_TI1_SetConfig+0x66>
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	4a24      	ldr	r2, [pc, #144]	; (800f3ac <TIM_TI1_SetConfig+0xd4>)
 800f31a:	4293      	cmp	r3, r2
 800f31c:	d00f      	beq.n	800f33e <TIM_TI1_SetConfig+0x66>
 800f31e:	68fb      	ldr	r3, [r7, #12]
 800f320:	4a23      	ldr	r2, [pc, #140]	; (800f3b0 <TIM_TI1_SetConfig+0xd8>)
 800f322:	4293      	cmp	r3, r2
 800f324:	d00b      	beq.n	800f33e <TIM_TI1_SetConfig+0x66>
 800f326:	68fb      	ldr	r3, [r7, #12]
 800f328:	4a22      	ldr	r2, [pc, #136]	; (800f3b4 <TIM_TI1_SetConfig+0xdc>)
 800f32a:	4293      	cmp	r3, r2
 800f32c:	d007      	beq.n	800f33e <TIM_TI1_SetConfig+0x66>
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	4a21      	ldr	r2, [pc, #132]	; (800f3b8 <TIM_TI1_SetConfig+0xe0>)
 800f332:	4293      	cmp	r3, r2
 800f334:	d003      	beq.n	800f33e <TIM_TI1_SetConfig+0x66>
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	4a20      	ldr	r2, [pc, #128]	; (800f3bc <TIM_TI1_SetConfig+0xe4>)
 800f33a:	4293      	cmp	r3, r2
 800f33c:	d101      	bne.n	800f342 <TIM_TI1_SetConfig+0x6a>
 800f33e:	2301      	movs	r3, #1
 800f340:	e000      	b.n	800f344 <TIM_TI1_SetConfig+0x6c>
 800f342:	2300      	movs	r3, #0
 800f344:	2b00      	cmp	r3, #0
 800f346:	d008      	beq.n	800f35a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800f348:	697b      	ldr	r3, [r7, #20]
 800f34a:	f023 0303 	bic.w	r3, r3, #3
 800f34e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800f350:	697a      	ldr	r2, [r7, #20]
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	4313      	orrs	r3, r2
 800f356:	617b      	str	r3, [r7, #20]
 800f358:	e003      	b.n	800f362 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800f35a:	697b      	ldr	r3, [r7, #20]
 800f35c:	f043 0301 	orr.w	r3, r3, #1
 800f360:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f362:	697b      	ldr	r3, [r7, #20]
 800f364:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f368:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800f36a:	683b      	ldr	r3, [r7, #0]
 800f36c:	011b      	lsls	r3, r3, #4
 800f36e:	b2db      	uxtb	r3, r3
 800f370:	697a      	ldr	r2, [r7, #20]
 800f372:	4313      	orrs	r3, r2
 800f374:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f376:	693b      	ldr	r3, [r7, #16]
 800f378:	f023 030a 	bic.w	r3, r3, #10
 800f37c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800f37e:	68bb      	ldr	r3, [r7, #8]
 800f380:	f003 030a 	and.w	r3, r3, #10
 800f384:	693a      	ldr	r2, [r7, #16]
 800f386:	4313      	orrs	r3, r2
 800f388:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	697a      	ldr	r2, [r7, #20]
 800f38e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	693a      	ldr	r2, [r7, #16]
 800f394:	621a      	str	r2, [r3, #32]
}
 800f396:	bf00      	nop
 800f398:	371c      	adds	r7, #28
 800f39a:	46bd      	mov	sp, r7
 800f39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3a0:	4770      	bx	lr
 800f3a2:	bf00      	nop
 800f3a4:	40010000 	.word	0x40010000
 800f3a8:	40000400 	.word	0x40000400
 800f3ac:	40000800 	.word	0x40000800
 800f3b0:	40000c00 	.word	0x40000c00
 800f3b4:	40010400 	.word	0x40010400
 800f3b8:	40014000 	.word	0x40014000
 800f3bc:	40001800 	.word	0x40001800

0800f3c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f3c0:	b480      	push	{r7}
 800f3c2:	b087      	sub	sp, #28
 800f3c4:	af00      	add	r7, sp, #0
 800f3c6:	60f8      	str	r0, [r7, #12]
 800f3c8:	60b9      	str	r1, [r7, #8]
 800f3ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	6a1b      	ldr	r3, [r3, #32]
 800f3d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f3d2:	68fb      	ldr	r3, [r7, #12]
 800f3d4:	6a1b      	ldr	r3, [r3, #32]
 800f3d6:	f023 0201 	bic.w	r2, r3, #1
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	699b      	ldr	r3, [r3, #24]
 800f3e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f3e4:	693b      	ldr	r3, [r7, #16]
 800f3e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f3ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	011b      	lsls	r3, r3, #4
 800f3f0:	693a      	ldr	r2, [r7, #16]
 800f3f2:	4313      	orrs	r3, r2
 800f3f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f3f6:	697b      	ldr	r3, [r7, #20]
 800f3f8:	f023 030a 	bic.w	r3, r3, #10
 800f3fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f3fe:	697a      	ldr	r2, [r7, #20]
 800f400:	68bb      	ldr	r3, [r7, #8]
 800f402:	4313      	orrs	r3, r2
 800f404:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	693a      	ldr	r2, [r7, #16]
 800f40a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	697a      	ldr	r2, [r7, #20]
 800f410:	621a      	str	r2, [r3, #32]
}
 800f412:	bf00      	nop
 800f414:	371c      	adds	r7, #28
 800f416:	46bd      	mov	sp, r7
 800f418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f41c:	4770      	bx	lr

0800f41e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800f41e:	b480      	push	{r7}
 800f420:	b087      	sub	sp, #28
 800f422:	af00      	add	r7, sp, #0
 800f424:	60f8      	str	r0, [r7, #12]
 800f426:	60b9      	str	r1, [r7, #8]
 800f428:	607a      	str	r2, [r7, #4]
 800f42a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	6a1b      	ldr	r3, [r3, #32]
 800f430:	f023 0210 	bic.w	r2, r3, #16
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	699b      	ldr	r3, [r3, #24]
 800f43c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800f43e:	68fb      	ldr	r3, [r7, #12]
 800f440:	6a1b      	ldr	r3, [r3, #32]
 800f442:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800f444:	697b      	ldr	r3, [r7, #20]
 800f446:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f44a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	021b      	lsls	r3, r3, #8
 800f450:	697a      	ldr	r2, [r7, #20]
 800f452:	4313      	orrs	r3, r2
 800f454:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f456:	697b      	ldr	r3, [r7, #20]
 800f458:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f45c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800f45e:	683b      	ldr	r3, [r7, #0]
 800f460:	031b      	lsls	r3, r3, #12
 800f462:	b29b      	uxth	r3, r3
 800f464:	697a      	ldr	r2, [r7, #20]
 800f466:	4313      	orrs	r3, r2
 800f468:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f46a:	693b      	ldr	r3, [r7, #16]
 800f46c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800f470:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800f472:	68bb      	ldr	r3, [r7, #8]
 800f474:	011b      	lsls	r3, r3, #4
 800f476:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800f47a:	693a      	ldr	r2, [r7, #16]
 800f47c:	4313      	orrs	r3, r2
 800f47e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f480:	68fb      	ldr	r3, [r7, #12]
 800f482:	697a      	ldr	r2, [r7, #20]
 800f484:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	693a      	ldr	r2, [r7, #16]
 800f48a:	621a      	str	r2, [r3, #32]
}
 800f48c:	bf00      	nop
 800f48e:	371c      	adds	r7, #28
 800f490:	46bd      	mov	sp, r7
 800f492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f496:	4770      	bx	lr

0800f498 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f498:	b480      	push	{r7}
 800f49a:	b087      	sub	sp, #28
 800f49c:	af00      	add	r7, sp, #0
 800f49e:	60f8      	str	r0, [r7, #12]
 800f4a0:	60b9      	str	r1, [r7, #8]
 800f4a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f4a4:	68fb      	ldr	r3, [r7, #12]
 800f4a6:	6a1b      	ldr	r3, [r3, #32]
 800f4a8:	f023 0210 	bic.w	r2, r3, #16
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f4b0:	68fb      	ldr	r3, [r7, #12]
 800f4b2:	699b      	ldr	r3, [r3, #24]
 800f4b4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800f4b6:	68fb      	ldr	r3, [r7, #12]
 800f4b8:	6a1b      	ldr	r3, [r3, #32]
 800f4ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f4bc:	697b      	ldr	r3, [r7, #20]
 800f4be:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f4c2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	031b      	lsls	r3, r3, #12
 800f4c8:	697a      	ldr	r2, [r7, #20]
 800f4ca:	4313      	orrs	r3, r2
 800f4cc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f4ce:	693b      	ldr	r3, [r7, #16]
 800f4d0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800f4d4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f4d6:	68bb      	ldr	r3, [r7, #8]
 800f4d8:	011b      	lsls	r3, r3, #4
 800f4da:	693a      	ldr	r2, [r7, #16]
 800f4dc:	4313      	orrs	r3, r2
 800f4de:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	697a      	ldr	r2, [r7, #20]
 800f4e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	693a      	ldr	r2, [r7, #16]
 800f4ea:	621a      	str	r2, [r3, #32]
}
 800f4ec:	bf00      	nop
 800f4ee:	371c      	adds	r7, #28
 800f4f0:	46bd      	mov	sp, r7
 800f4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4f6:	4770      	bx	lr

0800f4f8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800f4f8:	b480      	push	{r7}
 800f4fa:	b087      	sub	sp, #28
 800f4fc:	af00      	add	r7, sp, #0
 800f4fe:	60f8      	str	r0, [r7, #12]
 800f500:	60b9      	str	r1, [r7, #8]
 800f502:	607a      	str	r2, [r7, #4]
 800f504:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	6a1b      	ldr	r3, [r3, #32]
 800f50a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	69db      	ldr	r3, [r3, #28]
 800f516:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	6a1b      	ldr	r3, [r3, #32]
 800f51c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800f51e:	697b      	ldr	r3, [r7, #20]
 800f520:	f023 0303 	bic.w	r3, r3, #3
 800f524:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800f526:	697a      	ldr	r2, [r7, #20]
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	4313      	orrs	r3, r2
 800f52c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800f52e:	697b      	ldr	r3, [r7, #20]
 800f530:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f534:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800f536:	683b      	ldr	r3, [r7, #0]
 800f538:	011b      	lsls	r3, r3, #4
 800f53a:	b2db      	uxtb	r3, r3
 800f53c:	697a      	ldr	r2, [r7, #20]
 800f53e:	4313      	orrs	r3, r2
 800f540:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800f542:	693b      	ldr	r3, [r7, #16]
 800f544:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800f548:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800f54a:	68bb      	ldr	r3, [r7, #8]
 800f54c:	021b      	lsls	r3, r3, #8
 800f54e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800f552:	693a      	ldr	r2, [r7, #16]
 800f554:	4313      	orrs	r3, r2
 800f556:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800f558:	68fb      	ldr	r3, [r7, #12]
 800f55a:	697a      	ldr	r2, [r7, #20]
 800f55c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	693a      	ldr	r2, [r7, #16]
 800f562:	621a      	str	r2, [r3, #32]
}
 800f564:	bf00      	nop
 800f566:	371c      	adds	r7, #28
 800f568:	46bd      	mov	sp, r7
 800f56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f56e:	4770      	bx	lr

0800f570 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800f570:	b480      	push	{r7}
 800f572:	b087      	sub	sp, #28
 800f574:	af00      	add	r7, sp, #0
 800f576:	60f8      	str	r0, [r7, #12]
 800f578:	60b9      	str	r1, [r7, #8]
 800f57a:	607a      	str	r2, [r7, #4]
 800f57c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	6a1b      	ldr	r3, [r3, #32]
 800f582:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f586:	68fb      	ldr	r3, [r7, #12]
 800f588:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	69db      	ldr	r3, [r3, #28]
 800f58e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	6a1b      	ldr	r3, [r3, #32]
 800f594:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800f596:	697b      	ldr	r3, [r7, #20]
 800f598:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f59c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	021b      	lsls	r3, r3, #8
 800f5a2:	697a      	ldr	r2, [r7, #20]
 800f5a4:	4313      	orrs	r3, r2
 800f5a6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800f5a8:	697b      	ldr	r3, [r7, #20]
 800f5aa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f5ae:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800f5b0:	683b      	ldr	r3, [r7, #0]
 800f5b2:	031b      	lsls	r3, r3, #12
 800f5b4:	b29b      	uxth	r3, r3
 800f5b6:	697a      	ldr	r2, [r7, #20]
 800f5b8:	4313      	orrs	r3, r2
 800f5ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800f5bc:	693b      	ldr	r3, [r7, #16]
 800f5be:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800f5c2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800f5c4:	68bb      	ldr	r3, [r7, #8]
 800f5c6:	031b      	lsls	r3, r3, #12
 800f5c8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800f5cc:	693a      	ldr	r2, [r7, #16]
 800f5ce:	4313      	orrs	r3, r2
 800f5d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	697a      	ldr	r2, [r7, #20]
 800f5d6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	693a      	ldr	r2, [r7, #16]
 800f5dc:	621a      	str	r2, [r3, #32]
}
 800f5de:	bf00      	nop
 800f5e0:	371c      	adds	r7, #28
 800f5e2:	46bd      	mov	sp, r7
 800f5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5e8:	4770      	bx	lr

0800f5ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f5ea:	b480      	push	{r7}
 800f5ec:	b085      	sub	sp, #20
 800f5ee:	af00      	add	r7, sp, #0
 800f5f0:	6078      	str	r0, [r7, #4]
 800f5f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	689b      	ldr	r3, [r3, #8]
 800f5f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f5fa:	68fb      	ldr	r3, [r7, #12]
 800f5fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f600:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f602:	683a      	ldr	r2, [r7, #0]
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	4313      	orrs	r3, r2
 800f608:	f043 0307 	orr.w	r3, r3, #7
 800f60c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	68fa      	ldr	r2, [r7, #12]
 800f612:	609a      	str	r2, [r3, #8]
}
 800f614:	bf00      	nop
 800f616:	3714      	adds	r7, #20
 800f618:	46bd      	mov	sp, r7
 800f61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f61e:	4770      	bx	lr

0800f620 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f620:	b480      	push	{r7}
 800f622:	b087      	sub	sp, #28
 800f624:	af00      	add	r7, sp, #0
 800f626:	60f8      	str	r0, [r7, #12]
 800f628:	60b9      	str	r1, [r7, #8]
 800f62a:	607a      	str	r2, [r7, #4]
 800f62c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	689b      	ldr	r3, [r3, #8]
 800f632:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f634:	697b      	ldr	r3, [r7, #20]
 800f636:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f63a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f63c:	683b      	ldr	r3, [r7, #0]
 800f63e:	021a      	lsls	r2, r3, #8
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	431a      	orrs	r2, r3
 800f644:	68bb      	ldr	r3, [r7, #8]
 800f646:	4313      	orrs	r3, r2
 800f648:	697a      	ldr	r2, [r7, #20]
 800f64a:	4313      	orrs	r3, r2
 800f64c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f64e:	68fb      	ldr	r3, [r7, #12]
 800f650:	697a      	ldr	r2, [r7, #20]
 800f652:	609a      	str	r2, [r3, #8]
}
 800f654:	bf00      	nop
 800f656:	371c      	adds	r7, #28
 800f658:	46bd      	mov	sp, r7
 800f65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f65e:	4770      	bx	lr

0800f660 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800f660:	b480      	push	{r7}
 800f662:	b087      	sub	sp, #28
 800f664:	af00      	add	r7, sp, #0
 800f666:	60f8      	str	r0, [r7, #12]
 800f668:	60b9      	str	r1, [r7, #8]
 800f66a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f66c:	68bb      	ldr	r3, [r7, #8]
 800f66e:	f003 031f 	and.w	r3, r3, #31
 800f672:	2201      	movs	r2, #1
 800f674:	fa02 f303 	lsl.w	r3, r2, r3
 800f678:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	6a1a      	ldr	r2, [r3, #32]
 800f67e:	697b      	ldr	r3, [r7, #20]
 800f680:	43db      	mvns	r3, r3
 800f682:	401a      	ands	r2, r3
 800f684:	68fb      	ldr	r3, [r7, #12]
 800f686:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f688:	68fb      	ldr	r3, [r7, #12]
 800f68a:	6a1a      	ldr	r2, [r3, #32]
 800f68c:	68bb      	ldr	r3, [r7, #8]
 800f68e:	f003 031f 	and.w	r3, r3, #31
 800f692:	6879      	ldr	r1, [r7, #4]
 800f694:	fa01 f303 	lsl.w	r3, r1, r3
 800f698:	431a      	orrs	r2, r3
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	621a      	str	r2, [r3, #32]
}
 800f69e:	bf00      	nop
 800f6a0:	371c      	adds	r7, #28
 800f6a2:	46bd      	mov	sp, r7
 800f6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6a8:	4770      	bx	lr
	...

0800f6ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f6ac:	b480      	push	{r7}
 800f6ae:	b085      	sub	sp, #20
 800f6b0:	af00      	add	r7, sp, #0
 800f6b2:	6078      	str	r0, [r7, #4]
 800f6b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f6bc:	2b01      	cmp	r3, #1
 800f6be:	d101      	bne.n	800f6c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f6c0:	2302      	movs	r3, #2
 800f6c2:	e05a      	b.n	800f77a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	2201      	movs	r2, #1
 800f6c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	2202      	movs	r2, #2
 800f6d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	685b      	ldr	r3, [r3, #4]
 800f6da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	689b      	ldr	r3, [r3, #8]
 800f6e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f6e4:	68fb      	ldr	r3, [r7, #12]
 800f6e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f6ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f6ec:	683b      	ldr	r3, [r7, #0]
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	68fa      	ldr	r2, [r7, #12]
 800f6f2:	4313      	orrs	r3, r2
 800f6f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	68fa      	ldr	r2, [r7, #12]
 800f6fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	681b      	ldr	r3, [r3, #0]
 800f702:	4a21      	ldr	r2, [pc, #132]	; (800f788 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800f704:	4293      	cmp	r3, r2
 800f706:	d022      	beq.n	800f74e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f710:	d01d      	beq.n	800f74e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	4a1d      	ldr	r2, [pc, #116]	; (800f78c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800f718:	4293      	cmp	r3, r2
 800f71a:	d018      	beq.n	800f74e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	4a1b      	ldr	r2, [pc, #108]	; (800f790 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800f722:	4293      	cmp	r3, r2
 800f724:	d013      	beq.n	800f74e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	4a1a      	ldr	r2, [pc, #104]	; (800f794 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800f72c:	4293      	cmp	r3, r2
 800f72e:	d00e      	beq.n	800f74e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	681b      	ldr	r3, [r3, #0]
 800f734:	4a18      	ldr	r2, [pc, #96]	; (800f798 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800f736:	4293      	cmp	r3, r2
 800f738:	d009      	beq.n	800f74e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	4a17      	ldr	r2, [pc, #92]	; (800f79c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800f740:	4293      	cmp	r3, r2
 800f742:	d004      	beq.n	800f74e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	4a15      	ldr	r2, [pc, #84]	; (800f7a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800f74a:	4293      	cmp	r3, r2
 800f74c:	d10c      	bne.n	800f768 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f74e:	68bb      	ldr	r3, [r7, #8]
 800f750:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f754:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f756:	683b      	ldr	r3, [r7, #0]
 800f758:	685b      	ldr	r3, [r3, #4]
 800f75a:	68ba      	ldr	r2, [r7, #8]
 800f75c:	4313      	orrs	r3, r2
 800f75e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	68ba      	ldr	r2, [r7, #8]
 800f766:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	2201      	movs	r2, #1
 800f76c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	2200      	movs	r2, #0
 800f774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f778:	2300      	movs	r3, #0
}
 800f77a:	4618      	mov	r0, r3
 800f77c:	3714      	adds	r7, #20
 800f77e:	46bd      	mov	sp, r7
 800f780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f784:	4770      	bx	lr
 800f786:	bf00      	nop
 800f788:	40010000 	.word	0x40010000
 800f78c:	40000400 	.word	0x40000400
 800f790:	40000800 	.word	0x40000800
 800f794:	40000c00 	.word	0x40000c00
 800f798:	40010400 	.word	0x40010400
 800f79c:	40014000 	.word	0x40014000
 800f7a0:	40001800 	.word	0x40001800

0800f7a4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800f7a4:	b480      	push	{r7}
 800f7a6:	b085      	sub	sp, #20
 800f7a8:	af00      	add	r7, sp, #0
 800f7aa:	6078      	str	r0, [r7, #4]
 800f7ac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800f7ae:	2300      	movs	r3, #0
 800f7b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f7b8:	2b01      	cmp	r3, #1
 800f7ba:	d101      	bne.n	800f7c0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800f7bc:	2302      	movs	r3, #2
 800f7be:	e03d      	b.n	800f83c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	2201      	movs	r2, #1
 800f7c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800f7c8:	68fb      	ldr	r3, [r7, #12]
 800f7ca:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800f7ce:	683b      	ldr	r3, [r7, #0]
 800f7d0:	68db      	ldr	r3, [r3, #12]
 800f7d2:	4313      	orrs	r3, r2
 800f7d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800f7d6:	68fb      	ldr	r3, [r7, #12]
 800f7d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800f7dc:	683b      	ldr	r3, [r7, #0]
 800f7de:	689b      	ldr	r3, [r3, #8]
 800f7e0:	4313      	orrs	r3, r2
 800f7e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800f7e4:	68fb      	ldr	r3, [r7, #12]
 800f7e6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800f7ea:	683b      	ldr	r3, [r7, #0]
 800f7ec:	685b      	ldr	r3, [r3, #4]
 800f7ee:	4313      	orrs	r3, r2
 800f7f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800f7f2:	68fb      	ldr	r3, [r7, #12]
 800f7f4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800f7f8:	683b      	ldr	r3, [r7, #0]
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	4313      	orrs	r3, r2
 800f7fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800f800:	68fb      	ldr	r3, [r7, #12]
 800f802:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f806:	683b      	ldr	r3, [r7, #0]
 800f808:	691b      	ldr	r3, [r3, #16]
 800f80a:	4313      	orrs	r3, r2
 800f80c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800f814:	683b      	ldr	r3, [r7, #0]
 800f816:	695b      	ldr	r3, [r3, #20]
 800f818:	4313      	orrs	r3, r2
 800f81a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800f822:	683b      	ldr	r3, [r7, #0]
 800f824:	69db      	ldr	r3, [r3, #28]
 800f826:	4313      	orrs	r3, r2
 800f828:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	681b      	ldr	r3, [r3, #0]
 800f82e:	68fa      	ldr	r2, [r7, #12]
 800f830:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	2200      	movs	r2, #0
 800f836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f83a:	2300      	movs	r3, #0
}
 800f83c:	4618      	mov	r0, r3
 800f83e:	3714      	adds	r7, #20
 800f840:	46bd      	mov	sp, r7
 800f842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f846:	4770      	bx	lr

0800f848 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f848:	b480      	push	{r7}
 800f84a:	b083      	sub	sp, #12
 800f84c:	af00      	add	r7, sp, #0
 800f84e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f850:	bf00      	nop
 800f852:	370c      	adds	r7, #12
 800f854:	46bd      	mov	sp, r7
 800f856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f85a:	4770      	bx	lr

0800f85c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f85c:	b480      	push	{r7}
 800f85e:	b083      	sub	sp, #12
 800f860:	af00      	add	r7, sp, #0
 800f862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f864:	bf00      	nop
 800f866:	370c      	adds	r7, #12
 800f868:	46bd      	mov	sp, r7
 800f86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f86e:	4770      	bx	lr

0800f870 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f870:	b580      	push	{r7, lr}
 800f872:	b082      	sub	sp, #8
 800f874:	af00      	add	r7, sp, #0
 800f876:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d101      	bne.n	800f882 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f87e:	2301      	movs	r3, #1
 800f880:	e03f      	b.n	800f902 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f888:	b2db      	uxtb	r3, r3
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d106      	bne.n	800f89c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	2200      	movs	r2, #0
 800f892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f896:	6878      	ldr	r0, [r7, #4]
 800f898:	f7fa ff82 	bl	800a7a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	2224      	movs	r2, #36	; 0x24
 800f8a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	681b      	ldr	r3, [r3, #0]
 800f8a8:	68da      	ldr	r2, [r3, #12]
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f8b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800f8b4:	6878      	ldr	r0, [r7, #4]
 800f8b6:	f001 f9e5 	bl	8010c84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	681b      	ldr	r3, [r3, #0]
 800f8be:	691a      	ldr	r2, [r3, #16]
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	681b      	ldr	r3, [r3, #0]
 800f8c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f8c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	695a      	ldr	r2, [r3, #20]
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f8d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	681b      	ldr	r3, [r3, #0]
 800f8de:	68da      	ldr	r2, [r3, #12]
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f8e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	2200      	movs	r2, #0
 800f8ee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	2220      	movs	r2, #32
 800f8f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	2220      	movs	r2, #32
 800f8fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800f900:	2300      	movs	r3, #0
}
 800f902:	4618      	mov	r0, r3
 800f904:	3708      	adds	r7, #8
 800f906:	46bd      	mov	sp, r7
 800f908:	bd80      	pop	{r7, pc}

0800f90a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f90a:	b480      	push	{r7}
 800f90c:	b085      	sub	sp, #20
 800f90e:	af00      	add	r7, sp, #0
 800f910:	60f8      	str	r0, [r7, #12]
 800f912:	60b9      	str	r1, [r7, #8]
 800f914:	4613      	mov	r3, r2
 800f916:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f918:	68fb      	ldr	r3, [r7, #12]
 800f91a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f91e:	b2db      	uxtb	r3, r3
 800f920:	2b20      	cmp	r3, #32
 800f922:	d130      	bne.n	800f986 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800f924:	68bb      	ldr	r3, [r7, #8]
 800f926:	2b00      	cmp	r3, #0
 800f928:	d002      	beq.n	800f930 <HAL_UART_Transmit_IT+0x26>
 800f92a:	88fb      	ldrh	r3, [r7, #6]
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d101      	bne.n	800f934 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800f930:	2301      	movs	r3, #1
 800f932:	e029      	b.n	800f988 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800f934:	68fb      	ldr	r3, [r7, #12]
 800f936:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f93a:	2b01      	cmp	r3, #1
 800f93c:	d101      	bne.n	800f942 <HAL_UART_Transmit_IT+0x38>
 800f93e:	2302      	movs	r3, #2
 800f940:	e022      	b.n	800f988 <HAL_UART_Transmit_IT+0x7e>
 800f942:	68fb      	ldr	r3, [r7, #12]
 800f944:	2201      	movs	r2, #1
 800f946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800f94a:	68fb      	ldr	r3, [r7, #12]
 800f94c:	68ba      	ldr	r2, [r7, #8]
 800f94e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800f950:	68fb      	ldr	r3, [r7, #12]
 800f952:	88fa      	ldrh	r2, [r7, #6]
 800f954:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	88fa      	ldrh	r2, [r7, #6]
 800f95a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	2200      	movs	r2, #0
 800f960:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	2221      	movs	r2, #33	; 0x21
 800f966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800f96a:	68fb      	ldr	r3, [r7, #12]
 800f96c:	2200      	movs	r2, #0
 800f96e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800f972:	68fb      	ldr	r3, [r7, #12]
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	68da      	ldr	r2, [r3, #12]
 800f978:	68fb      	ldr	r3, [r7, #12]
 800f97a:	681b      	ldr	r3, [r3, #0]
 800f97c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800f980:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800f982:	2300      	movs	r3, #0
 800f984:	e000      	b.n	800f988 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800f986:	2302      	movs	r3, #2
  }
}
 800f988:	4618      	mov	r0, r3
 800f98a:	3714      	adds	r7, #20
 800f98c:	46bd      	mov	sp, r7
 800f98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f992:	4770      	bx	lr

0800f994 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f994:	b580      	push	{r7, lr}
 800f996:	b084      	sub	sp, #16
 800f998:	af00      	add	r7, sp, #0
 800f99a:	60f8      	str	r0, [r7, #12]
 800f99c:	60b9      	str	r1, [r7, #8]
 800f99e:	4613      	mov	r3, r2
 800f9a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f9a2:	68fb      	ldr	r3, [r7, #12]
 800f9a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f9a8:	b2db      	uxtb	r3, r3
 800f9aa:	2b20      	cmp	r3, #32
 800f9ac:	d11d      	bne.n	800f9ea <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800f9ae:	68bb      	ldr	r3, [r7, #8]
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d002      	beq.n	800f9ba <HAL_UART_Receive_IT+0x26>
 800f9b4:	88fb      	ldrh	r3, [r7, #6]
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d101      	bne.n	800f9be <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800f9ba:	2301      	movs	r3, #1
 800f9bc:	e016      	b.n	800f9ec <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800f9be:	68fb      	ldr	r3, [r7, #12]
 800f9c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f9c4:	2b01      	cmp	r3, #1
 800f9c6:	d101      	bne.n	800f9cc <HAL_UART_Receive_IT+0x38>
 800f9c8:	2302      	movs	r3, #2
 800f9ca:	e00f      	b.n	800f9ec <HAL_UART_Receive_IT+0x58>
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	2201      	movs	r2, #1
 800f9d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f9d4:	68fb      	ldr	r3, [r7, #12]
 800f9d6:	2200      	movs	r2, #0
 800f9d8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800f9da:	88fb      	ldrh	r3, [r7, #6]
 800f9dc:	461a      	mov	r2, r3
 800f9de:	68b9      	ldr	r1, [r7, #8]
 800f9e0:	68f8      	ldr	r0, [r7, #12]
 800f9e2:	f000 fea0 	bl	8010726 <UART_Start_Receive_IT>
 800f9e6:	4603      	mov	r3, r0
 800f9e8:	e000      	b.n	800f9ec <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800f9ea:	2302      	movs	r3, #2
  }
}
 800f9ec:	4618      	mov	r0, r3
 800f9ee:	3710      	adds	r7, #16
 800f9f0:	46bd      	mov	sp, r7
 800f9f2:	bd80      	pop	{r7, pc}

0800f9f4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f9f4:	b580      	push	{r7, lr}
 800f9f6:	b08c      	sub	sp, #48	; 0x30
 800f9f8:	af00      	add	r7, sp, #0
 800f9fa:	60f8      	str	r0, [r7, #12]
 800f9fc:	60b9      	str	r1, [r7, #8]
 800f9fe:	4613      	mov	r3, r2
 800fa00:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800fa02:	68fb      	ldr	r3, [r7, #12]
 800fa04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fa08:	b2db      	uxtb	r3, r3
 800fa0a:	2b20      	cmp	r3, #32
 800fa0c:	d165      	bne.n	800fada <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800fa0e:	68bb      	ldr	r3, [r7, #8]
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d002      	beq.n	800fa1a <HAL_UART_Transmit_DMA+0x26>
 800fa14:	88fb      	ldrh	r3, [r7, #6]
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d101      	bne.n	800fa1e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800fa1a:	2301      	movs	r3, #1
 800fa1c:	e05e      	b.n	800fadc <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fa24:	2b01      	cmp	r3, #1
 800fa26:	d101      	bne.n	800fa2c <HAL_UART_Transmit_DMA+0x38>
 800fa28:	2302      	movs	r3, #2
 800fa2a:	e057      	b.n	800fadc <HAL_UART_Transmit_DMA+0xe8>
 800fa2c:	68fb      	ldr	r3, [r7, #12]
 800fa2e:	2201      	movs	r2, #1
 800fa30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800fa34:	68ba      	ldr	r2, [r7, #8]
 800fa36:	68fb      	ldr	r3, [r7, #12]
 800fa38:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800fa3a:	68fb      	ldr	r3, [r7, #12]
 800fa3c:	88fa      	ldrh	r2, [r7, #6]
 800fa3e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800fa40:	68fb      	ldr	r3, [r7, #12]
 800fa42:	88fa      	ldrh	r2, [r7, #6]
 800fa44:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	2200      	movs	r2, #0
 800fa4a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	2221      	movs	r2, #33	; 0x21
 800fa50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fa58:	4a22      	ldr	r2, [pc, #136]	; (800fae4 <HAL_UART_Transmit_DMA+0xf0>)
 800fa5a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800fa5c:	68fb      	ldr	r3, [r7, #12]
 800fa5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fa60:	4a21      	ldr	r2, [pc, #132]	; (800fae8 <HAL_UART_Transmit_DMA+0xf4>)
 800fa62:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fa68:	4a20      	ldr	r2, [pc, #128]	; (800faec <HAL_UART_Transmit_DMA+0xf8>)
 800fa6a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fa70:	2200      	movs	r2, #0
 800fa72:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800fa74:	f107 0308 	add.w	r3, r7, #8
 800fa78:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800fa7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa80:	6819      	ldr	r1, [r3, #0]
 800fa82:	68fb      	ldr	r3, [r7, #12]
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	3304      	adds	r3, #4
 800fa88:	461a      	mov	r2, r3
 800fa8a:	88fb      	ldrh	r3, [r7, #6]
 800fa8c:	f7fb fae2 	bl	800b054 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	681b      	ldr	r3, [r3, #0]
 800fa94:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800fa98:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	2200      	movs	r2, #0
 800fa9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800faa2:	68fb      	ldr	r3, [r7, #12]
 800faa4:	681b      	ldr	r3, [r3, #0]
 800faa6:	3314      	adds	r3, #20
 800faa8:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800faaa:	69bb      	ldr	r3, [r7, #24]
 800faac:	e853 3f00 	ldrex	r3, [r3]
 800fab0:	617b      	str	r3, [r7, #20]
   return(result);
 800fab2:	697b      	ldr	r3, [r7, #20]
 800fab4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fab8:	62bb      	str	r3, [r7, #40]	; 0x28
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	3314      	adds	r3, #20
 800fac0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fac2:	627a      	str	r2, [r7, #36]	; 0x24
 800fac4:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fac6:	6a39      	ldr	r1, [r7, #32]
 800fac8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800faca:	e841 2300 	strex	r3, r2, [r1]
 800face:	61fb      	str	r3, [r7, #28]
   return(result);
 800fad0:	69fb      	ldr	r3, [r7, #28]
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d1e5      	bne.n	800faa2 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800fad6:	2300      	movs	r3, #0
 800fad8:	e000      	b.n	800fadc <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800fada:	2302      	movs	r3, #2
  }
}
 800fadc:	4618      	mov	r0, r3
 800fade:	3730      	adds	r7, #48	; 0x30
 800fae0:	46bd      	mov	sp, r7
 800fae2:	bd80      	pop	{r7, pc}
 800fae4:	08010481 	.word	0x08010481
 800fae8:	0801051b 	.word	0x0801051b
 800faec:	08010693 	.word	0x08010693

0800faf0 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800faf0:	b580      	push	{r7, lr}
 800faf2:	b090      	sub	sp, #64	; 0x40
 800faf4:	af00      	add	r7, sp, #0
 800faf6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800faf8:	2300      	movs	r3, #0
 800fafa:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	695b      	ldr	r3, [r3, #20]
 800fb02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fb06:	2b80      	cmp	r3, #128	; 0x80
 800fb08:	bf0c      	ite	eq
 800fb0a:	2301      	moveq	r3, #1
 800fb0c:	2300      	movne	r3, #0
 800fb0e:	b2db      	uxtb	r3, r3
 800fb10:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fb18:	b2db      	uxtb	r3, r3
 800fb1a:	2b21      	cmp	r3, #33	; 0x21
 800fb1c:	d128      	bne.n	800fb70 <HAL_UART_DMAStop+0x80>
 800fb1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d025      	beq.n	800fb70 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	3314      	adds	r3, #20
 800fb2a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb2e:	e853 3f00 	ldrex	r3, [r3]
 800fb32:	623b      	str	r3, [r7, #32]
   return(result);
 800fb34:	6a3b      	ldr	r3, [r7, #32]
 800fb36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fb3a:	63bb      	str	r3, [r7, #56]	; 0x38
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	681b      	ldr	r3, [r3, #0]
 800fb40:	3314      	adds	r3, #20
 800fb42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fb44:	633a      	str	r2, [r7, #48]	; 0x30
 800fb46:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb48:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fb4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fb4c:	e841 2300 	strex	r3, r2, [r1]
 800fb50:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800fb52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d1e5      	bne.n	800fb24 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	d004      	beq.n	800fb6a <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb64:	4618      	mov	r0, r3
 800fb66:	f7fb facd 	bl	800b104 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 800fb6a:	6878      	ldr	r0, [r7, #4]
 800fb6c:	f000 feb0 	bl	80108d0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	695b      	ldr	r3, [r3, #20]
 800fb76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fb7a:	2b40      	cmp	r3, #64	; 0x40
 800fb7c:	bf0c      	ite	eq
 800fb7e:	2301      	moveq	r3, #1
 800fb80:	2300      	movne	r3, #0
 800fb82:	b2db      	uxtb	r3, r3
 800fb84:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fb8c:	b2db      	uxtb	r3, r3
 800fb8e:	2b22      	cmp	r3, #34	; 0x22
 800fb90:	d128      	bne.n	800fbe4 <HAL_UART_DMAStop+0xf4>
 800fb92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	d025      	beq.n	800fbe4 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	681b      	ldr	r3, [r3, #0]
 800fb9c:	3314      	adds	r3, #20
 800fb9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fba0:	693b      	ldr	r3, [r7, #16]
 800fba2:	e853 3f00 	ldrex	r3, [r3]
 800fba6:	60fb      	str	r3, [r7, #12]
   return(result);
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fbae:	637b      	str	r3, [r7, #52]	; 0x34
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	3314      	adds	r3, #20
 800fbb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fbb8:	61fa      	str	r2, [r7, #28]
 800fbba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbbc:	69b9      	ldr	r1, [r7, #24]
 800fbbe:	69fa      	ldr	r2, [r7, #28]
 800fbc0:	e841 2300 	strex	r3, r2, [r1]
 800fbc4:	617b      	str	r3, [r7, #20]
   return(result);
 800fbc6:	697b      	ldr	r3, [r7, #20]
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d1e5      	bne.n	800fb98 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d004      	beq.n	800fbde <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fbd8:	4618      	mov	r0, r3
 800fbda:	f7fb fa93 	bl	800b104 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 800fbde:	6878      	ldr	r0, [r7, #4]
 800fbe0:	f000 fe9e 	bl	8010920 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800fbe4:	2300      	movs	r3, #0
}
 800fbe6:	4618      	mov	r0, r3
 800fbe8:	3740      	adds	r7, #64	; 0x40
 800fbea:	46bd      	mov	sp, r7
 800fbec:	bd80      	pop	{r7, pc}

0800fbee <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fbee:	b580      	push	{r7, lr}
 800fbf0:	b08c      	sub	sp, #48	; 0x30
 800fbf2:	af00      	add	r7, sp, #0
 800fbf4:	60f8      	str	r0, [r7, #12]
 800fbf6:	60b9      	str	r1, [r7, #8]
 800fbf8:	4613      	mov	r3, r2
 800fbfa:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800fbfc:	68fb      	ldr	r3, [r7, #12]
 800fbfe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fc02:	b2db      	uxtb	r3, r3
 800fc04:	2b20      	cmp	r3, #32
 800fc06:	d152      	bne.n	800fcae <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 800fc08:	68bb      	ldr	r3, [r7, #8]
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d002      	beq.n	800fc14 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800fc0e:	88fb      	ldrh	r3, [r7, #6]
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d101      	bne.n	800fc18 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800fc14:	2301      	movs	r3, #1
 800fc16:	e04b      	b.n	800fcb0 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fc1e:	2b01      	cmp	r3, #1
 800fc20:	d101      	bne.n	800fc26 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 800fc22:	2302      	movs	r3, #2
 800fc24:	e044      	b.n	800fcb0 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 800fc26:	68fb      	ldr	r3, [r7, #12]
 800fc28:	2201      	movs	r2, #1
 800fc2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800fc2e:	68fb      	ldr	r3, [r7, #12]
 800fc30:	2201      	movs	r2, #1
 800fc32:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800fc34:	88fb      	ldrh	r3, [r7, #6]
 800fc36:	461a      	mov	r2, r3
 800fc38:	68b9      	ldr	r1, [r7, #8]
 800fc3a:	68f8      	ldr	r0, [r7, #12]
 800fc3c:	f000 fdae 	bl	801079c <UART_Start_Receive_DMA>
 800fc40:	4603      	mov	r3, r0
 800fc42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800fc46:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	d12c      	bne.n	800fca8 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fc4e:	68fb      	ldr	r3, [r7, #12]
 800fc50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc52:	2b01      	cmp	r3, #1
 800fc54:	d125      	bne.n	800fca2 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800fc56:	2300      	movs	r3, #0
 800fc58:	613b      	str	r3, [r7, #16]
 800fc5a:	68fb      	ldr	r3, [r7, #12]
 800fc5c:	681b      	ldr	r3, [r3, #0]
 800fc5e:	681b      	ldr	r3, [r3, #0]
 800fc60:	613b      	str	r3, [r7, #16]
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	681b      	ldr	r3, [r3, #0]
 800fc66:	685b      	ldr	r3, [r3, #4]
 800fc68:	613b      	str	r3, [r7, #16]
 800fc6a:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fc6c:	68fb      	ldr	r3, [r7, #12]
 800fc6e:	681b      	ldr	r3, [r3, #0]
 800fc70:	330c      	adds	r3, #12
 800fc72:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc74:	69bb      	ldr	r3, [r7, #24]
 800fc76:	e853 3f00 	ldrex	r3, [r3]
 800fc7a:	617b      	str	r3, [r7, #20]
   return(result);
 800fc7c:	697b      	ldr	r3, [r7, #20]
 800fc7e:	f043 0310 	orr.w	r3, r3, #16
 800fc82:	62bb      	str	r3, [r7, #40]	; 0x28
 800fc84:	68fb      	ldr	r3, [r7, #12]
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	330c      	adds	r3, #12
 800fc8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fc8c:	627a      	str	r2, [r7, #36]	; 0x24
 800fc8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc90:	6a39      	ldr	r1, [r7, #32]
 800fc92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fc94:	e841 2300 	strex	r3, r2, [r1]
 800fc98:	61fb      	str	r3, [r7, #28]
   return(result);
 800fc9a:	69fb      	ldr	r3, [r7, #28]
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d1e5      	bne.n	800fc6c <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 800fca0:	e002      	b.n	800fca8 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800fca2:	2301      	movs	r3, #1
 800fca4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800fca8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fcac:	e000      	b.n	800fcb0 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 800fcae:	2302      	movs	r3, #2
  }
}
 800fcb0:	4618      	mov	r0, r3
 800fcb2:	3730      	adds	r7, #48	; 0x30
 800fcb4:	46bd      	mov	sp, r7
 800fcb6:	bd80      	pop	{r7, pc}

0800fcb8 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 800fcb8:	b580      	push	{r7, lr}
 800fcba:	b09a      	sub	sp, #104	; 0x68
 800fcbc:	af00      	add	r7, sp, #0
 800fcbe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	330c      	adds	r3, #12
 800fcc6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fcc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fcca:	e853 3f00 	ldrex	r3, [r3]
 800fcce:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800fcd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fcd2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fcd6:	667b      	str	r3, [r7, #100]	; 0x64
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	681b      	ldr	r3, [r3, #0]
 800fcdc:	330c      	adds	r3, #12
 800fcde:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800fce0:	657a      	str	r2, [r7, #84]	; 0x54
 800fce2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fce4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fce6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fce8:	e841 2300 	strex	r3, r2, [r1]
 800fcec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800fcee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d1e5      	bne.n	800fcc0 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	681b      	ldr	r3, [r3, #0]
 800fcf8:	3314      	adds	r3, #20
 800fcfa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fcfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fcfe:	e853 3f00 	ldrex	r3, [r3]
 800fd02:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800fd04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd06:	f023 0301 	bic.w	r3, r3, #1
 800fd0a:	663b      	str	r3, [r7, #96]	; 0x60
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	3314      	adds	r3, #20
 800fd12:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fd14:	643a      	str	r2, [r7, #64]	; 0x40
 800fd16:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd18:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fd1a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fd1c:	e841 2300 	strex	r3, r2, [r1]
 800fd20:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fd22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	d1e5      	bne.n	800fcf4 <HAL_UART_AbortReceive_IT+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd2c:	2b01      	cmp	r3, #1
 800fd2e:	d119      	bne.n	800fd64 <HAL_UART_AbortReceive_IT+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	681b      	ldr	r3, [r3, #0]
 800fd34:	330c      	adds	r3, #12
 800fd36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd38:	6a3b      	ldr	r3, [r7, #32]
 800fd3a:	e853 3f00 	ldrex	r3, [r3]
 800fd3e:	61fb      	str	r3, [r7, #28]
   return(result);
 800fd40:	69fb      	ldr	r3, [r7, #28]
 800fd42:	f023 0310 	bic.w	r3, r3, #16
 800fd46:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	330c      	adds	r3, #12
 800fd4e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fd50:	62fa      	str	r2, [r7, #44]	; 0x2c
 800fd52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fd56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fd58:	e841 2300 	strex	r3, r2, [r1]
 800fd5c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fd5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d1e5      	bne.n	800fd30 <HAL_UART_AbortReceive_IT+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	695b      	ldr	r3, [r3, #20]
 800fd6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fd6e:	2b40      	cmp	r3, #64	; 0x40
 800fd70:	d13f      	bne.n	800fdf2 <HAL_UART_AbortReceive_IT+0x13a>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	681b      	ldr	r3, [r3, #0]
 800fd76:	3314      	adds	r3, #20
 800fd78:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd7a:	68fb      	ldr	r3, [r7, #12]
 800fd7c:	e853 3f00 	ldrex	r3, [r3]
 800fd80:	60bb      	str	r3, [r7, #8]
   return(result);
 800fd82:	68bb      	ldr	r3, [r7, #8]
 800fd84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fd88:	65bb      	str	r3, [r7, #88]	; 0x58
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	3314      	adds	r3, #20
 800fd90:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fd92:	61ba      	str	r2, [r7, #24]
 800fd94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd96:	6979      	ldr	r1, [r7, #20]
 800fd98:	69ba      	ldr	r2, [r7, #24]
 800fd9a:	e841 2300 	strex	r3, r2, [r1]
 800fd9e:	613b      	str	r3, [r7, #16]
   return(result);
 800fda0:	693b      	ldr	r3, [r7, #16]
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d1e5      	bne.n	800fd72 <HAL_UART_AbortReceive_IT+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d013      	beq.n	800fdd6 <HAL_UART_AbortReceive_IT+0x11e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fdb2:	4a19      	ldr	r2, [pc, #100]	; (800fe18 <HAL_UART_AbortReceive_IT+0x160>)
 800fdb4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fdba:	4618      	mov	r0, r3
 800fdbc:	f7fb fa12 	bl	800b1e4 <HAL_DMA_Abort_IT>
 800fdc0:	4603      	mov	r3, r0
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d022      	beq.n	800fe0c <HAL_UART_AbortReceive_IT+0x154>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fdca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fdcc:	687a      	ldr	r2, [r7, #4]
 800fdce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800fdd0:	4610      	mov	r0, r2
 800fdd2:	4798      	blx	r3
 800fdd4:	e01a      	b.n	800fe0c <HAL_UART_AbortReceive_IT+0x154>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	2200      	movs	r2, #0
 800fdda:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	2220      	movs	r2, #32
 800fde0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	2200      	movs	r2, #0
 800fde8:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 800fdea:	6878      	ldr	r0, [r7, #4]
 800fdec:	f000 fab8 	bl	8010360 <HAL_UART_AbortReceiveCpltCallback>
 800fdf0:	e00c      	b.n	800fe0c <HAL_UART_AbortReceive_IT+0x154>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	2200      	movs	r2, #0
 800fdf6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	2220      	movs	r2, #32
 800fdfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	2200      	movs	r2, #0
 800fe04:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 800fe06:	6878      	ldr	r0, [r7, #4]
 800fe08:	f000 faaa 	bl	8010360 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800fe0c:	2300      	movs	r3, #0
}
 800fe0e:	4618      	mov	r0, r3
 800fe10:	3768      	adds	r7, #104	; 0x68
 800fe12:	46bd      	mov	sp, r7
 800fe14:	bd80      	pop	{r7, pc}
 800fe16:	bf00      	nop
 800fe18:	08010a0f 	.word	0x08010a0f

0800fe1c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800fe1c:	b580      	push	{r7, lr}
 800fe1e:	b0ba      	sub	sp, #232	; 0xe8
 800fe20:	af00      	add	r7, sp, #0
 800fe22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	681b      	ldr	r3, [r3, #0]
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	68db      	ldr	r3, [r3, #12]
 800fe34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	695b      	ldr	r3, [r3, #20]
 800fe3e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800fe42:	2300      	movs	r3, #0
 800fe44:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800fe48:	2300      	movs	r3, #0
 800fe4a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800fe4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fe52:	f003 030f 	and.w	r3, r3, #15
 800fe56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800fe5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d10f      	bne.n	800fe82 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800fe62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fe66:	f003 0320 	and.w	r3, r3, #32
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	d009      	beq.n	800fe82 <HAL_UART_IRQHandler+0x66>
 800fe6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fe72:	f003 0320 	and.w	r3, r3, #32
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	d003      	beq.n	800fe82 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800fe7a:	6878      	ldr	r0, [r7, #4]
 800fe7c:	f000 fe47 	bl	8010b0e <UART_Receive_IT>
      return;
 800fe80:	e256      	b.n	8010330 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800fe82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	f000 80de 	beq.w	8010048 <HAL_UART_IRQHandler+0x22c>
 800fe8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800fe90:	f003 0301 	and.w	r3, r3, #1
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	d106      	bne.n	800fea6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800fe98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fe9c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	f000 80d1 	beq.w	8010048 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800fea6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800feaa:	f003 0301 	and.w	r3, r3, #1
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d00b      	beq.n	800feca <HAL_UART_IRQHandler+0xae>
 800feb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800feb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800feba:	2b00      	cmp	r3, #0
 800febc:	d005      	beq.n	800feca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fec2:	f043 0201 	orr.w	r2, r3, #1
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800feca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fece:	f003 0304 	and.w	r3, r3, #4
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d00b      	beq.n	800feee <HAL_UART_IRQHandler+0xd2>
 800fed6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800feda:	f003 0301 	and.w	r3, r3, #1
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d005      	beq.n	800feee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fee6:	f043 0202 	orr.w	r2, r3, #2
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800feee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fef2:	f003 0302 	and.w	r3, r3, #2
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d00b      	beq.n	800ff12 <HAL_UART_IRQHandler+0xf6>
 800fefa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800fefe:	f003 0301 	and.w	r3, r3, #1
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	d005      	beq.n	800ff12 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff0a:	f043 0204 	orr.w	r2, r3, #4
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800ff12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ff16:	f003 0308 	and.w	r3, r3, #8
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d011      	beq.n	800ff42 <HAL_UART_IRQHandler+0x126>
 800ff1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ff22:	f003 0320 	and.w	r3, r3, #32
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d105      	bne.n	800ff36 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800ff2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ff2e:	f003 0301 	and.w	r3, r3, #1
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d005      	beq.n	800ff42 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff3a:	f043 0208 	orr.w	r2, r3, #8
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	f000 81ed 	beq.w	8010326 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ff4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ff50:	f003 0320 	and.w	r3, r3, #32
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d008      	beq.n	800ff6a <HAL_UART_IRQHandler+0x14e>
 800ff58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ff5c:	f003 0320 	and.w	r3, r3, #32
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	d002      	beq.n	800ff6a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800ff64:	6878      	ldr	r0, [r7, #4]
 800ff66:	f000 fdd2 	bl	8010b0e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	681b      	ldr	r3, [r3, #0]
 800ff6e:	695b      	ldr	r3, [r3, #20]
 800ff70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ff74:	2b40      	cmp	r3, #64	; 0x40
 800ff76:	bf0c      	ite	eq
 800ff78:	2301      	moveq	r3, #1
 800ff7a:	2300      	movne	r3, #0
 800ff7c:	b2db      	uxtb	r3, r3
 800ff7e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff86:	f003 0308 	and.w	r3, r3, #8
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	d103      	bne.n	800ff96 <HAL_UART_IRQHandler+0x17a>
 800ff8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d04f      	beq.n	8010036 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ff96:	6878      	ldr	r0, [r7, #4]
 800ff98:	f000 fcc2 	bl	8010920 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	695b      	ldr	r3, [r3, #20]
 800ffa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ffa6:	2b40      	cmp	r3, #64	; 0x40
 800ffa8:	d141      	bne.n	801002e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	681b      	ldr	r3, [r3, #0]
 800ffae:	3314      	adds	r3, #20
 800ffb0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ffb4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ffb8:	e853 3f00 	ldrex	r3, [r3]
 800ffbc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800ffc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ffc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ffc8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	3314      	adds	r3, #20
 800ffd2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ffd6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ffda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ffde:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ffe2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ffe6:	e841 2300 	strex	r3, r2, [r1]
 800ffea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ffee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d1d9      	bne.n	800ffaa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	d013      	beq.n	8010026 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010002:	4a7d      	ldr	r2, [pc, #500]	; (80101f8 <HAL_UART_IRQHandler+0x3dc>)
 8010004:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801000a:	4618      	mov	r0, r3
 801000c:	f7fb f8ea 	bl	800b1e4 <HAL_DMA_Abort_IT>
 8010010:	4603      	mov	r3, r0
 8010012:	2b00      	cmp	r3, #0
 8010014:	d016      	beq.n	8010044 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801001a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801001c:	687a      	ldr	r2, [r7, #4]
 801001e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8010020:	4610      	mov	r0, r2
 8010022:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010024:	e00e      	b.n	8010044 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010026:	6878      	ldr	r0, [r7, #4]
 8010028:	f7f3 fb9a 	bl	8003760 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801002c:	e00a      	b.n	8010044 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801002e:	6878      	ldr	r0, [r7, #4]
 8010030:	f7f3 fb96 	bl	8003760 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010034:	e006      	b.n	8010044 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010036:	6878      	ldr	r0, [r7, #4]
 8010038:	f7f3 fb92 	bl	8003760 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	2200      	movs	r2, #0
 8010040:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8010042:	e170      	b.n	8010326 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010044:	bf00      	nop
    return;
 8010046:	e16e      	b.n	8010326 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801004c:	2b01      	cmp	r3, #1
 801004e:	f040 814a 	bne.w	80102e6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8010052:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010056:	f003 0310 	and.w	r3, r3, #16
 801005a:	2b00      	cmp	r3, #0
 801005c:	f000 8143 	beq.w	80102e6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8010060:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010064:	f003 0310 	and.w	r3, r3, #16
 8010068:	2b00      	cmp	r3, #0
 801006a:	f000 813c 	beq.w	80102e6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 801006e:	2300      	movs	r3, #0
 8010070:	60bb      	str	r3, [r7, #8]
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	681b      	ldr	r3, [r3, #0]
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	60bb      	str	r3, [r7, #8]
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	685b      	ldr	r3, [r3, #4]
 8010080:	60bb      	str	r3, [r7, #8]
 8010082:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	681b      	ldr	r3, [r3, #0]
 8010088:	695b      	ldr	r3, [r3, #20]
 801008a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801008e:	2b40      	cmp	r3, #64	; 0x40
 8010090:	f040 80b4 	bne.w	80101fc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010098:	681b      	ldr	r3, [r3, #0]
 801009a:	685b      	ldr	r3, [r3, #4]
 801009c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80100a0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	f000 8140 	beq.w	801032a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80100ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80100b2:	429a      	cmp	r2, r3
 80100b4:	f080 8139 	bcs.w	801032a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80100be:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80100c4:	69db      	ldr	r3, [r3, #28]
 80100c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80100ca:	f000 8088 	beq.w	80101de <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	330c      	adds	r3, #12
 80100d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80100d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80100dc:	e853 3f00 	ldrex	r3, [r3]
 80100e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80100e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80100e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80100ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	330c      	adds	r3, #12
 80100f6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80100fa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80100fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010102:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8010106:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801010a:	e841 2300 	strex	r3, r2, [r1]
 801010e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8010112:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010116:	2b00      	cmp	r3, #0
 8010118:	d1d9      	bne.n	80100ce <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	681b      	ldr	r3, [r3, #0]
 801011e:	3314      	adds	r3, #20
 8010120:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010122:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010124:	e853 3f00 	ldrex	r3, [r3]
 8010128:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 801012a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801012c:	f023 0301 	bic.w	r3, r3, #1
 8010130:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	681b      	ldr	r3, [r3, #0]
 8010138:	3314      	adds	r3, #20
 801013a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801013e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8010142:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010144:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8010146:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801014a:	e841 2300 	strex	r3, r2, [r1]
 801014e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8010150:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010152:	2b00      	cmp	r3, #0
 8010154:	d1e1      	bne.n	801011a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	681b      	ldr	r3, [r3, #0]
 801015a:	3314      	adds	r3, #20
 801015c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801015e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010160:	e853 3f00 	ldrex	r3, [r3]
 8010164:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8010166:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010168:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801016c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	681b      	ldr	r3, [r3, #0]
 8010174:	3314      	adds	r3, #20
 8010176:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801017a:	66fa      	str	r2, [r7, #108]	; 0x6c
 801017c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801017e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010180:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010182:	e841 2300 	strex	r3, r2, [r1]
 8010186:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8010188:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801018a:	2b00      	cmp	r3, #0
 801018c:	d1e3      	bne.n	8010156 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	2220      	movs	r2, #32
 8010192:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	2200      	movs	r2, #0
 801019a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	681b      	ldr	r3, [r3, #0]
 80101a0:	330c      	adds	r3, #12
 80101a2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80101a6:	e853 3f00 	ldrex	r3, [r3]
 80101aa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80101ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80101ae:	f023 0310 	bic.w	r3, r3, #16
 80101b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	330c      	adds	r3, #12
 80101bc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80101c0:	65ba      	str	r2, [r7, #88]	; 0x58
 80101c2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101c4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80101c6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80101c8:	e841 2300 	strex	r3, r2, [r1]
 80101cc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80101ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d1e3      	bne.n	801019c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80101d8:	4618      	mov	r0, r3
 80101da:	f7fa ff93 	bl	800b104 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80101e6:	b29b      	uxth	r3, r3
 80101e8:	1ad3      	subs	r3, r2, r3
 80101ea:	b29b      	uxth	r3, r3
 80101ec:	4619      	mov	r1, r3
 80101ee:	6878      	ldr	r0, [r7, #4]
 80101f0:	f7f3 fb0e 	bl	8003810 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80101f4:	e099      	b.n	801032a <HAL_UART_IRQHandler+0x50e>
 80101f6:	bf00      	nop
 80101f8:	080109e7 	.word	0x080109e7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8010204:	b29b      	uxth	r3, r3
 8010206:	1ad3      	subs	r3, r2, r3
 8010208:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8010210:	b29b      	uxth	r3, r3
 8010212:	2b00      	cmp	r3, #0
 8010214:	f000 808b 	beq.w	801032e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8010218:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801021c:	2b00      	cmp	r3, #0
 801021e:	f000 8086 	beq.w	801032e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	681b      	ldr	r3, [r3, #0]
 8010226:	330c      	adds	r3, #12
 8010228:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801022a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801022c:	e853 3f00 	ldrex	r3, [r3]
 8010230:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010234:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010238:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	330c      	adds	r3, #12
 8010242:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8010246:	647a      	str	r2, [r7, #68]	; 0x44
 8010248:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801024a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801024c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801024e:	e841 2300 	strex	r3, r2, [r1]
 8010252:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010254:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010256:	2b00      	cmp	r3, #0
 8010258:	d1e3      	bne.n	8010222 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	681b      	ldr	r3, [r3, #0]
 801025e:	3314      	adds	r3, #20
 8010260:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010264:	e853 3f00 	ldrex	r3, [r3]
 8010268:	623b      	str	r3, [r7, #32]
   return(result);
 801026a:	6a3b      	ldr	r3, [r7, #32]
 801026c:	f023 0301 	bic.w	r3, r3, #1
 8010270:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	3314      	adds	r3, #20
 801027a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801027e:	633a      	str	r2, [r7, #48]	; 0x30
 8010280:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010282:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010284:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010286:	e841 2300 	strex	r3, r2, [r1]
 801028a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801028c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801028e:	2b00      	cmp	r3, #0
 8010290:	d1e3      	bne.n	801025a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	2220      	movs	r2, #32
 8010296:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	2200      	movs	r2, #0
 801029e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	681b      	ldr	r3, [r3, #0]
 80102a4:	330c      	adds	r3, #12
 80102a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102a8:	693b      	ldr	r3, [r7, #16]
 80102aa:	e853 3f00 	ldrex	r3, [r3]
 80102ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80102b0:	68fb      	ldr	r3, [r7, #12]
 80102b2:	f023 0310 	bic.w	r3, r3, #16
 80102b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	681b      	ldr	r3, [r3, #0]
 80102be:	330c      	adds	r3, #12
 80102c0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80102c4:	61fa      	str	r2, [r7, #28]
 80102c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102c8:	69b9      	ldr	r1, [r7, #24]
 80102ca:	69fa      	ldr	r2, [r7, #28]
 80102cc:	e841 2300 	strex	r3, r2, [r1]
 80102d0:	617b      	str	r3, [r7, #20]
   return(result);
 80102d2:	697b      	ldr	r3, [r7, #20]
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d1e3      	bne.n	80102a0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80102d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80102dc:	4619      	mov	r1, r3
 80102de:	6878      	ldr	r0, [r7, #4]
 80102e0:	f7f3 fa96 	bl	8003810 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80102e4:	e023      	b.n	801032e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80102e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80102ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	d009      	beq.n	8010306 <HAL_UART_IRQHandler+0x4ea>
 80102f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80102f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	d003      	beq.n	8010306 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80102fe:	6878      	ldr	r0, [r7, #4]
 8010300:	f000 fb9d 	bl	8010a3e <UART_Transmit_IT>
    return;
 8010304:	e014      	b.n	8010330 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8010306:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801030a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801030e:	2b00      	cmp	r3, #0
 8010310:	d00e      	beq.n	8010330 <HAL_UART_IRQHandler+0x514>
 8010312:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801031a:	2b00      	cmp	r3, #0
 801031c:	d008      	beq.n	8010330 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 801031e:	6878      	ldr	r0, [r7, #4]
 8010320:	f000 fbdd 	bl	8010ade <UART_EndTransmit_IT>
    return;
 8010324:	e004      	b.n	8010330 <HAL_UART_IRQHandler+0x514>
    return;
 8010326:	bf00      	nop
 8010328:	e002      	b.n	8010330 <HAL_UART_IRQHandler+0x514>
      return;
 801032a:	bf00      	nop
 801032c:	e000      	b.n	8010330 <HAL_UART_IRQHandler+0x514>
      return;
 801032e:	bf00      	nop
  }
}
 8010330:	37e8      	adds	r7, #232	; 0xe8
 8010332:	46bd      	mov	sp, r7
 8010334:	bd80      	pop	{r7, pc}
 8010336:	bf00      	nop

08010338 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8010338:	b480      	push	{r7}
 801033a:	b083      	sub	sp, #12
 801033c:	af00      	add	r7, sp, #0
 801033e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8010340:	bf00      	nop
 8010342:	370c      	adds	r7, #12
 8010344:	46bd      	mov	sp, r7
 8010346:	f85d 7b04 	ldr.w	r7, [sp], #4
 801034a:	4770      	bx	lr

0801034c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801034c:	b480      	push	{r7}
 801034e:	b083      	sub	sp, #12
 8010350:	af00      	add	r7, sp, #0
 8010352:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8010354:	bf00      	nop
 8010356:	370c      	adds	r7, #12
 8010358:	46bd      	mov	sp, r7
 801035a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801035e:	4770      	bx	lr

08010360 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8010360:	b480      	push	{r7}
 8010362:	b083      	sub	sp, #12
 8010364:	af00      	add	r7, sp, #0
 8010366:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8010368:	bf00      	nop
 801036a:	370c      	adds	r7, #12
 801036c:	46bd      	mov	sp, r7
 801036e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010372:	4770      	bx	lr

08010374 <HAL_HalfDuplex_EnableTransmitter>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 8010374:	b480      	push	{r7}
 8010376:	b085      	sub	sp, #20
 8010378:	af00      	add	r7, sp, #0
 801037a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 801037c:	2300      	movs	r3, #0
 801037e:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010386:	2b01      	cmp	r3, #1
 8010388:	d101      	bne.n	801038e <HAL_HalfDuplex_EnableTransmitter+0x1a>
 801038a:	2302      	movs	r3, #2
 801038c:	e020      	b.n	80103d0 <HAL_HalfDuplex_EnableTransmitter+0x5c>
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	2201      	movs	r2, #1
 8010392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	2224      	movs	r2, #36	; 0x24
 801039a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	681b      	ldr	r3, [r3, #0]
 80103a2:	68db      	ldr	r3, [r3, #12]
 80103a4:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 80103a6:	68fb      	ldr	r3, [r7, #12]
 80103a8:	f023 030c 	bic.w	r3, r3, #12
 80103ac:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_TE;
 80103ae:	68fb      	ldr	r3, [r7, #12]
 80103b0:	f043 0308 	orr.w	r3, r3, #8
 80103b4:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	681b      	ldr	r3, [r3, #0]
 80103ba:	68fa      	ldr	r2, [r7, #12]
 80103bc:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	2220      	movs	r2, #32
 80103c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	2200      	movs	r2, #0
 80103ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80103ce:	2300      	movs	r3, #0
}
 80103d0:	4618      	mov	r0, r3
 80103d2:	3714      	adds	r7, #20
 80103d4:	46bd      	mov	sp, r7
 80103d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103da:	4770      	bx	lr

080103dc <HAL_HalfDuplex_EnableReceiver>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 80103dc:	b480      	push	{r7}
 80103de:	b085      	sub	sp, #20
 80103e0:	af00      	add	r7, sp, #0
 80103e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 80103e4:	2300      	movs	r3, #0
 80103e6:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80103ee:	2b01      	cmp	r3, #1
 80103f0:	d101      	bne.n	80103f6 <HAL_HalfDuplex_EnableReceiver+0x1a>
 80103f2:	2302      	movs	r3, #2
 80103f4:	e020      	b.n	8010438 <HAL_HalfDuplex_EnableReceiver+0x5c>
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	2201      	movs	r2, #1
 80103fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	2224      	movs	r2, #36	; 0x24
 8010402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	681b      	ldr	r3, [r3, #0]
 801040a:	68db      	ldr	r3, [r3, #12]
 801040c:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 801040e:	68fb      	ldr	r3, [r7, #12]
 8010410:	f023 030c 	bic.w	r3, r3, #12
 8010414:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_RE;
 8010416:	68fb      	ldr	r3, [r7, #12]
 8010418:	f043 0304 	orr.w	r3, r3, #4
 801041c:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	681b      	ldr	r3, [r3, #0]
 8010422:	68fa      	ldr	r2, [r7, #12]
 8010424:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	2220      	movs	r2, #32
 801042a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	2200      	movs	r2, #0
 8010432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010436:	2300      	movs	r3, #0
}
 8010438:	4618      	mov	r0, r3
 801043a:	3714      	adds	r7, #20
 801043c:	46bd      	mov	sp, r7
 801043e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010442:	4770      	bx	lr

08010444 <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 8010444:	b480      	push	{r7}
 8010446:	b085      	sub	sp, #20
 8010448:	af00      	add	r7, sp, #0
 801044a:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 801044c:	2300      	movs	r3, #0
 801044e:	60fb      	str	r3, [r7, #12]
 8010450:	2300      	movs	r3, #0
 8010452:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801045a:	b2db      	uxtb	r3, r3
 801045c:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010464:	b2db      	uxtb	r3, r3
 8010466:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8010468:	68fb      	ldr	r3, [r7, #12]
 801046a:	b2da      	uxtb	r2, r3
 801046c:	68bb      	ldr	r3, [r7, #8]
 801046e:	b2db      	uxtb	r3, r3
 8010470:	4313      	orrs	r3, r2
 8010472:	b2db      	uxtb	r3, r3
}
 8010474:	4618      	mov	r0, r3
 8010476:	3714      	adds	r7, #20
 8010478:	46bd      	mov	sp, r7
 801047a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801047e:	4770      	bx	lr

08010480 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8010480:	b580      	push	{r7, lr}
 8010482:	b090      	sub	sp, #64	; 0x40
 8010484:	af00      	add	r7, sp, #0
 8010486:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801048c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	681b      	ldr	r3, [r3, #0]
 8010492:	681b      	ldr	r3, [r3, #0]
 8010494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010498:	2b00      	cmp	r3, #0
 801049a:	d137      	bne.n	801050c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 801049c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801049e:	2200      	movs	r2, #0
 80104a0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80104a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80104a4:	681b      	ldr	r3, [r3, #0]
 80104a6:	3314      	adds	r3, #20
 80104a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104ac:	e853 3f00 	ldrex	r3, [r3]
 80104b0:	623b      	str	r3, [r7, #32]
   return(result);
 80104b2:	6a3b      	ldr	r3, [r7, #32]
 80104b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80104b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80104ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80104bc:	681b      	ldr	r3, [r3, #0]
 80104be:	3314      	adds	r3, #20
 80104c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80104c2:	633a      	str	r2, [r7, #48]	; 0x30
 80104c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80104c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80104ca:	e841 2300 	strex	r3, r2, [r1]
 80104ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80104d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d1e5      	bne.n	80104a2 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80104d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80104d8:	681b      	ldr	r3, [r3, #0]
 80104da:	330c      	adds	r3, #12
 80104dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104de:	693b      	ldr	r3, [r7, #16]
 80104e0:	e853 3f00 	ldrex	r3, [r3]
 80104e4:	60fb      	str	r3, [r7, #12]
   return(result);
 80104e6:	68fb      	ldr	r3, [r7, #12]
 80104e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80104ec:	637b      	str	r3, [r7, #52]	; 0x34
 80104ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80104f0:	681b      	ldr	r3, [r3, #0]
 80104f2:	330c      	adds	r3, #12
 80104f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80104f6:	61fa      	str	r2, [r7, #28]
 80104f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104fa:	69b9      	ldr	r1, [r7, #24]
 80104fc:	69fa      	ldr	r2, [r7, #28]
 80104fe:	e841 2300 	strex	r3, r2, [r1]
 8010502:	617b      	str	r3, [r7, #20]
   return(result);
 8010504:	697b      	ldr	r3, [r7, #20]
 8010506:	2b00      	cmp	r3, #0
 8010508:	d1e5      	bne.n	80104d6 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801050a:	e002      	b.n	8010512 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 801050c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801050e:	f7f3 f87f 	bl	8003610 <HAL_UART_TxCpltCallback>
}
 8010512:	bf00      	nop
 8010514:	3740      	adds	r7, #64	; 0x40
 8010516:	46bd      	mov	sp, r7
 8010518:	bd80      	pop	{r7, pc}

0801051a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801051a:	b580      	push	{r7, lr}
 801051c:	b084      	sub	sp, #16
 801051e:	af00      	add	r7, sp, #0
 8010520:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010526:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8010528:	68f8      	ldr	r0, [r7, #12]
 801052a:	f7ff ff05 	bl	8010338 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801052e:	bf00      	nop
 8010530:	3710      	adds	r7, #16
 8010532:	46bd      	mov	sp, r7
 8010534:	bd80      	pop	{r7, pc}

08010536 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8010536:	b580      	push	{r7, lr}
 8010538:	b09c      	sub	sp, #112	; 0x70
 801053a:	af00      	add	r7, sp, #0
 801053c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010542:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	681b      	ldr	r3, [r3, #0]
 8010548:	681b      	ldr	r3, [r3, #0]
 801054a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801054e:	2b00      	cmp	r3, #0
 8010550:	d172      	bne.n	8010638 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8010552:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010554:	2200      	movs	r2, #0
 8010556:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010558:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801055a:	681b      	ldr	r3, [r3, #0]
 801055c:	330c      	adds	r3, #12
 801055e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010560:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010562:	e853 3f00 	ldrex	r3, [r3]
 8010566:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8010568:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801056a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801056e:	66bb      	str	r3, [r7, #104]	; 0x68
 8010570:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010572:	681b      	ldr	r3, [r3, #0]
 8010574:	330c      	adds	r3, #12
 8010576:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010578:	65ba      	str	r2, [r7, #88]	; 0x58
 801057a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801057c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801057e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010580:	e841 2300 	strex	r3, r2, [r1]
 8010584:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8010586:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010588:	2b00      	cmp	r3, #0
 801058a:	d1e5      	bne.n	8010558 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801058c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	3314      	adds	r3, #20
 8010592:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010596:	e853 3f00 	ldrex	r3, [r3]
 801059a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801059c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801059e:	f023 0301 	bic.w	r3, r3, #1
 80105a2:	667b      	str	r3, [r7, #100]	; 0x64
 80105a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80105a6:	681b      	ldr	r3, [r3, #0]
 80105a8:	3314      	adds	r3, #20
 80105aa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80105ac:	647a      	str	r2, [r7, #68]	; 0x44
 80105ae:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105b0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80105b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80105b4:	e841 2300 	strex	r3, r2, [r1]
 80105b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80105ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d1e5      	bne.n	801058c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80105c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80105c2:	681b      	ldr	r3, [r3, #0]
 80105c4:	3314      	adds	r3, #20
 80105c6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105ca:	e853 3f00 	ldrex	r3, [r3]
 80105ce:	623b      	str	r3, [r7, #32]
   return(result);
 80105d0:	6a3b      	ldr	r3, [r7, #32]
 80105d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80105d6:	663b      	str	r3, [r7, #96]	; 0x60
 80105d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	3314      	adds	r3, #20
 80105de:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80105e0:	633a      	str	r2, [r7, #48]	; 0x30
 80105e2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105e4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80105e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80105e8:	e841 2300 	strex	r3, r2, [r1]
 80105ec:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80105ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d1e5      	bne.n	80105c0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80105f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80105f6:	2220      	movs	r2, #32
 80105f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80105fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80105fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010600:	2b01      	cmp	r3, #1
 8010602:	d119      	bne.n	8010638 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010604:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010606:	681b      	ldr	r3, [r3, #0]
 8010608:	330c      	adds	r3, #12
 801060a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801060c:	693b      	ldr	r3, [r7, #16]
 801060e:	e853 3f00 	ldrex	r3, [r3]
 8010612:	60fb      	str	r3, [r7, #12]
   return(result);
 8010614:	68fb      	ldr	r3, [r7, #12]
 8010616:	f023 0310 	bic.w	r3, r3, #16
 801061a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801061c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801061e:	681b      	ldr	r3, [r3, #0]
 8010620:	330c      	adds	r3, #12
 8010622:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010624:	61fa      	str	r2, [r7, #28]
 8010626:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010628:	69b9      	ldr	r1, [r7, #24]
 801062a:	69fa      	ldr	r2, [r7, #28]
 801062c:	e841 2300 	strex	r3, r2, [r1]
 8010630:	617b      	str	r3, [r7, #20]
   return(result);
 8010632:	697b      	ldr	r3, [r7, #20]
 8010634:	2b00      	cmp	r3, #0
 8010636:	d1e5      	bne.n	8010604 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010638:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801063a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801063c:	2b01      	cmp	r3, #1
 801063e:	d106      	bne.n	801064e <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010640:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010642:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8010644:	4619      	mov	r1, r3
 8010646:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8010648:	f7f3 f8e2 	bl	8003810 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801064c:	e002      	b.n	8010654 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 801064e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8010650:	f7f3 f81c 	bl	800368c <HAL_UART_RxCpltCallback>
}
 8010654:	bf00      	nop
 8010656:	3770      	adds	r7, #112	; 0x70
 8010658:	46bd      	mov	sp, r7
 801065a:	bd80      	pop	{r7, pc}

0801065c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801065c:	b580      	push	{r7, lr}
 801065e:	b084      	sub	sp, #16
 8010660:	af00      	add	r7, sp, #0
 8010662:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010668:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801066a:	68fb      	ldr	r3, [r7, #12]
 801066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801066e:	2b01      	cmp	r3, #1
 8010670:	d108      	bne.n	8010684 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8010672:	68fb      	ldr	r3, [r7, #12]
 8010674:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8010676:	085b      	lsrs	r3, r3, #1
 8010678:	b29b      	uxth	r3, r3
 801067a:	4619      	mov	r1, r3
 801067c:	68f8      	ldr	r0, [r7, #12]
 801067e:	f7f3 f8c7 	bl	8003810 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010682:	e002      	b.n	801068a <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8010684:	68f8      	ldr	r0, [r7, #12]
 8010686:	f7ff fe61 	bl	801034c <HAL_UART_RxHalfCpltCallback>
}
 801068a:	bf00      	nop
 801068c:	3710      	adds	r7, #16
 801068e:	46bd      	mov	sp, r7
 8010690:	bd80      	pop	{r7, pc}

08010692 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8010692:	b580      	push	{r7, lr}
 8010694:	b084      	sub	sp, #16
 8010696:	af00      	add	r7, sp, #0
 8010698:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 801069a:	2300      	movs	r3, #0
 801069c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80106a2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80106a4:	68bb      	ldr	r3, [r7, #8]
 80106a6:	681b      	ldr	r3, [r3, #0]
 80106a8:	695b      	ldr	r3, [r3, #20]
 80106aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80106ae:	2b80      	cmp	r3, #128	; 0x80
 80106b0:	bf0c      	ite	eq
 80106b2:	2301      	moveq	r3, #1
 80106b4:	2300      	movne	r3, #0
 80106b6:	b2db      	uxtb	r3, r3
 80106b8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80106ba:	68bb      	ldr	r3, [r7, #8]
 80106bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80106c0:	b2db      	uxtb	r3, r3
 80106c2:	2b21      	cmp	r3, #33	; 0x21
 80106c4:	d108      	bne.n	80106d8 <UART_DMAError+0x46>
 80106c6:	68fb      	ldr	r3, [r7, #12]
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d005      	beq.n	80106d8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80106cc:	68bb      	ldr	r3, [r7, #8]
 80106ce:	2200      	movs	r2, #0
 80106d0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80106d2:	68b8      	ldr	r0, [r7, #8]
 80106d4:	f000 f8fc 	bl	80108d0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80106d8:	68bb      	ldr	r3, [r7, #8]
 80106da:	681b      	ldr	r3, [r3, #0]
 80106dc:	695b      	ldr	r3, [r3, #20]
 80106de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80106e2:	2b40      	cmp	r3, #64	; 0x40
 80106e4:	bf0c      	ite	eq
 80106e6:	2301      	moveq	r3, #1
 80106e8:	2300      	movne	r3, #0
 80106ea:	b2db      	uxtb	r3, r3
 80106ec:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80106ee:	68bb      	ldr	r3, [r7, #8]
 80106f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80106f4:	b2db      	uxtb	r3, r3
 80106f6:	2b22      	cmp	r3, #34	; 0x22
 80106f8:	d108      	bne.n	801070c <UART_DMAError+0x7a>
 80106fa:	68fb      	ldr	r3, [r7, #12]
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d005      	beq.n	801070c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8010700:	68bb      	ldr	r3, [r7, #8]
 8010702:	2200      	movs	r2, #0
 8010704:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8010706:	68b8      	ldr	r0, [r7, #8]
 8010708:	f000 f90a 	bl	8010920 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801070c:	68bb      	ldr	r3, [r7, #8]
 801070e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010710:	f043 0210 	orr.w	r2, r3, #16
 8010714:	68bb      	ldr	r3, [r7, #8]
 8010716:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010718:	68b8      	ldr	r0, [r7, #8]
 801071a:	f7f3 f821 	bl	8003760 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801071e:	bf00      	nop
 8010720:	3710      	adds	r7, #16
 8010722:	46bd      	mov	sp, r7
 8010724:	bd80      	pop	{r7, pc}

08010726 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010726:	b480      	push	{r7}
 8010728:	b085      	sub	sp, #20
 801072a:	af00      	add	r7, sp, #0
 801072c:	60f8      	str	r0, [r7, #12]
 801072e:	60b9      	str	r1, [r7, #8]
 8010730:	4613      	mov	r3, r2
 8010732:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8010734:	68fb      	ldr	r3, [r7, #12]
 8010736:	68ba      	ldr	r2, [r7, #8]
 8010738:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 801073a:	68fb      	ldr	r3, [r7, #12]
 801073c:	88fa      	ldrh	r2, [r7, #6]
 801073e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8010740:	68fb      	ldr	r3, [r7, #12]
 8010742:	88fa      	ldrh	r2, [r7, #6]
 8010744:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010746:	68fb      	ldr	r3, [r7, #12]
 8010748:	2200      	movs	r2, #0
 801074a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801074c:	68fb      	ldr	r3, [r7, #12]
 801074e:	2222      	movs	r2, #34	; 0x22
 8010750:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010754:	68fb      	ldr	r3, [r7, #12]
 8010756:	2200      	movs	r2, #0
 8010758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 801075c:	68fb      	ldr	r3, [r7, #12]
 801075e:	681b      	ldr	r3, [r3, #0]
 8010760:	68da      	ldr	r2, [r3, #12]
 8010762:	68fb      	ldr	r3, [r7, #12]
 8010764:	681b      	ldr	r3, [r3, #0]
 8010766:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801076a:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	681b      	ldr	r3, [r3, #0]
 8010770:	695a      	ldr	r2, [r3, #20]
 8010772:	68fb      	ldr	r3, [r7, #12]
 8010774:	681b      	ldr	r3, [r3, #0]
 8010776:	f042 0201 	orr.w	r2, r2, #1
 801077a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	681b      	ldr	r3, [r3, #0]
 8010780:	68da      	ldr	r2, [r3, #12]
 8010782:	68fb      	ldr	r3, [r7, #12]
 8010784:	681b      	ldr	r3, [r3, #0]
 8010786:	f042 0220 	orr.w	r2, r2, #32
 801078a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801078c:	2300      	movs	r3, #0
}
 801078e:	4618      	mov	r0, r3
 8010790:	3714      	adds	r7, #20
 8010792:	46bd      	mov	sp, r7
 8010794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010798:	4770      	bx	lr
	...

0801079c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801079c:	b580      	push	{r7, lr}
 801079e:	b098      	sub	sp, #96	; 0x60
 80107a0:	af00      	add	r7, sp, #0
 80107a2:	60f8      	str	r0, [r7, #12]
 80107a4:	60b9      	str	r1, [r7, #8]
 80107a6:	4613      	mov	r3, r2
 80107a8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80107aa:	68ba      	ldr	r2, [r7, #8]
 80107ac:	68fb      	ldr	r3, [r7, #12]
 80107ae:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80107b0:	68fb      	ldr	r3, [r7, #12]
 80107b2:	88fa      	ldrh	r2, [r7, #6]
 80107b4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80107b6:	68fb      	ldr	r3, [r7, #12]
 80107b8:	2200      	movs	r2, #0
 80107ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80107bc:	68fb      	ldr	r3, [r7, #12]
 80107be:	2222      	movs	r2, #34	; 0x22
 80107c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80107c4:	68fb      	ldr	r3, [r7, #12]
 80107c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80107c8:	4a3e      	ldr	r2, [pc, #248]	; (80108c4 <UART_Start_Receive_DMA+0x128>)
 80107ca:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80107cc:	68fb      	ldr	r3, [r7, #12]
 80107ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80107d0:	4a3d      	ldr	r2, [pc, #244]	; (80108c8 <UART_Start_Receive_DMA+0x12c>)
 80107d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80107d4:	68fb      	ldr	r3, [r7, #12]
 80107d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80107d8:	4a3c      	ldr	r2, [pc, #240]	; (80108cc <UART_Start_Receive_DMA+0x130>)
 80107da:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80107dc:	68fb      	ldr	r3, [r7, #12]
 80107de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80107e0:	2200      	movs	r2, #0
 80107e2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80107e4:	f107 0308 	add.w	r3, r7, #8
 80107e8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80107ea:	68fb      	ldr	r3, [r7, #12]
 80107ec:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80107ee:	68fb      	ldr	r3, [r7, #12]
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	3304      	adds	r3, #4
 80107f4:	4619      	mov	r1, r3
 80107f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80107f8:	681a      	ldr	r2, [r3, #0]
 80107fa:	88fb      	ldrh	r3, [r7, #6]
 80107fc:	f7fa fc2a 	bl	800b054 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8010800:	2300      	movs	r3, #0
 8010802:	613b      	str	r3, [r7, #16]
 8010804:	68fb      	ldr	r3, [r7, #12]
 8010806:	681b      	ldr	r3, [r3, #0]
 8010808:	681b      	ldr	r3, [r3, #0]
 801080a:	613b      	str	r3, [r7, #16]
 801080c:	68fb      	ldr	r3, [r7, #12]
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	685b      	ldr	r3, [r3, #4]
 8010812:	613b      	str	r3, [r7, #16]
 8010814:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010816:	68fb      	ldr	r3, [r7, #12]
 8010818:	2200      	movs	r2, #0
 801081a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801081e:	68fb      	ldr	r3, [r7, #12]
 8010820:	681b      	ldr	r3, [r3, #0]
 8010822:	330c      	adds	r3, #12
 8010824:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010826:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010828:	e853 3f00 	ldrex	r3, [r3]
 801082c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801082e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010830:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010834:	65bb      	str	r3, [r7, #88]	; 0x58
 8010836:	68fb      	ldr	r3, [r7, #12]
 8010838:	681b      	ldr	r3, [r3, #0]
 801083a:	330c      	adds	r3, #12
 801083c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801083e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8010840:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010842:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8010844:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010846:	e841 2300 	strex	r3, r2, [r1]
 801084a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 801084c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801084e:	2b00      	cmp	r3, #0
 8010850:	d1e5      	bne.n	801081e <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010852:	68fb      	ldr	r3, [r7, #12]
 8010854:	681b      	ldr	r3, [r3, #0]
 8010856:	3314      	adds	r3, #20
 8010858:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801085a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801085c:	e853 3f00 	ldrex	r3, [r3]
 8010860:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010864:	f043 0301 	orr.w	r3, r3, #1
 8010868:	657b      	str	r3, [r7, #84]	; 0x54
 801086a:	68fb      	ldr	r3, [r7, #12]
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	3314      	adds	r3, #20
 8010870:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010872:	63ba      	str	r2, [r7, #56]	; 0x38
 8010874:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010876:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010878:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801087a:	e841 2300 	strex	r3, r2, [r1]
 801087e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010882:	2b00      	cmp	r3, #0
 8010884:	d1e5      	bne.n	8010852 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010886:	68fb      	ldr	r3, [r7, #12]
 8010888:	681b      	ldr	r3, [r3, #0]
 801088a:	3314      	adds	r3, #20
 801088c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801088e:	69bb      	ldr	r3, [r7, #24]
 8010890:	e853 3f00 	ldrex	r3, [r3]
 8010894:	617b      	str	r3, [r7, #20]
   return(result);
 8010896:	697b      	ldr	r3, [r7, #20]
 8010898:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801089c:	653b      	str	r3, [r7, #80]	; 0x50
 801089e:	68fb      	ldr	r3, [r7, #12]
 80108a0:	681b      	ldr	r3, [r3, #0]
 80108a2:	3314      	adds	r3, #20
 80108a4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80108a6:	627a      	str	r2, [r7, #36]	; 0x24
 80108a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108aa:	6a39      	ldr	r1, [r7, #32]
 80108ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80108ae:	e841 2300 	strex	r3, r2, [r1]
 80108b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80108b4:	69fb      	ldr	r3, [r7, #28]
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d1e5      	bne.n	8010886 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80108ba:	2300      	movs	r3, #0
}
 80108bc:	4618      	mov	r0, r3
 80108be:	3760      	adds	r7, #96	; 0x60
 80108c0:	46bd      	mov	sp, r7
 80108c2:	bd80      	pop	{r7, pc}
 80108c4:	08010537 	.word	0x08010537
 80108c8:	0801065d 	.word	0x0801065d
 80108cc:	08010693 	.word	0x08010693

080108d0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80108d0:	b480      	push	{r7}
 80108d2:	b089      	sub	sp, #36	; 0x24
 80108d4:	af00      	add	r7, sp, #0
 80108d6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	330c      	adds	r3, #12
 80108de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80108e0:	68fb      	ldr	r3, [r7, #12]
 80108e2:	e853 3f00 	ldrex	r3, [r3]
 80108e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80108e8:	68bb      	ldr	r3, [r7, #8]
 80108ea:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80108ee:	61fb      	str	r3, [r7, #28]
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	681b      	ldr	r3, [r3, #0]
 80108f4:	330c      	adds	r3, #12
 80108f6:	69fa      	ldr	r2, [r7, #28]
 80108f8:	61ba      	str	r2, [r7, #24]
 80108fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108fc:	6979      	ldr	r1, [r7, #20]
 80108fe:	69ba      	ldr	r2, [r7, #24]
 8010900:	e841 2300 	strex	r3, r2, [r1]
 8010904:	613b      	str	r3, [r7, #16]
   return(result);
 8010906:	693b      	ldr	r3, [r7, #16]
 8010908:	2b00      	cmp	r3, #0
 801090a:	d1e5      	bne.n	80108d8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	2220      	movs	r2, #32
 8010910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8010914:	bf00      	nop
 8010916:	3724      	adds	r7, #36	; 0x24
 8010918:	46bd      	mov	sp, r7
 801091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801091e:	4770      	bx	lr

08010920 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010920:	b480      	push	{r7}
 8010922:	b095      	sub	sp, #84	; 0x54
 8010924:	af00      	add	r7, sp, #0
 8010926:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	681b      	ldr	r3, [r3, #0]
 801092c:	330c      	adds	r3, #12
 801092e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010932:	e853 3f00 	ldrex	r3, [r3]
 8010936:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801093a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801093e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	681b      	ldr	r3, [r3, #0]
 8010944:	330c      	adds	r3, #12
 8010946:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010948:	643a      	str	r2, [r7, #64]	; 0x40
 801094a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801094c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801094e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010950:	e841 2300 	strex	r3, r2, [r1]
 8010954:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010958:	2b00      	cmp	r3, #0
 801095a:	d1e5      	bne.n	8010928 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	681b      	ldr	r3, [r3, #0]
 8010960:	3314      	adds	r3, #20
 8010962:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010964:	6a3b      	ldr	r3, [r7, #32]
 8010966:	e853 3f00 	ldrex	r3, [r3]
 801096a:	61fb      	str	r3, [r7, #28]
   return(result);
 801096c:	69fb      	ldr	r3, [r7, #28]
 801096e:	f023 0301 	bic.w	r3, r3, #1
 8010972:	64bb      	str	r3, [r7, #72]	; 0x48
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	681b      	ldr	r3, [r3, #0]
 8010978:	3314      	adds	r3, #20
 801097a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801097c:	62fa      	str	r2, [r7, #44]	; 0x2c
 801097e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010980:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010982:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010984:	e841 2300 	strex	r3, r2, [r1]
 8010988:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801098a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801098c:	2b00      	cmp	r3, #0
 801098e:	d1e5      	bne.n	801095c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010994:	2b01      	cmp	r3, #1
 8010996:	d119      	bne.n	80109cc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	330c      	adds	r3, #12
 801099e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109a0:	68fb      	ldr	r3, [r7, #12]
 80109a2:	e853 3f00 	ldrex	r3, [r3]
 80109a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80109a8:	68bb      	ldr	r3, [r7, #8]
 80109aa:	f023 0310 	bic.w	r3, r3, #16
 80109ae:	647b      	str	r3, [r7, #68]	; 0x44
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	681b      	ldr	r3, [r3, #0]
 80109b4:	330c      	adds	r3, #12
 80109b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80109b8:	61ba      	str	r2, [r7, #24]
 80109ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109bc:	6979      	ldr	r1, [r7, #20]
 80109be:	69ba      	ldr	r2, [r7, #24]
 80109c0:	e841 2300 	strex	r3, r2, [r1]
 80109c4:	613b      	str	r3, [r7, #16]
   return(result);
 80109c6:	693b      	ldr	r3, [r7, #16]
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d1e5      	bne.n	8010998 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	2220      	movs	r2, #32
 80109d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	2200      	movs	r2, #0
 80109d8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80109da:	bf00      	nop
 80109dc:	3754      	adds	r7, #84	; 0x54
 80109de:	46bd      	mov	sp, r7
 80109e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109e4:	4770      	bx	lr

080109e6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80109e6:	b580      	push	{r7, lr}
 80109e8:	b084      	sub	sp, #16
 80109ea:	af00      	add	r7, sp, #0
 80109ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80109f2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80109f4:	68fb      	ldr	r3, [r7, #12]
 80109f6:	2200      	movs	r2, #0
 80109f8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80109fa:	68fb      	ldr	r3, [r7, #12]
 80109fc:	2200      	movs	r2, #0
 80109fe:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010a00:	68f8      	ldr	r0, [r7, #12]
 8010a02:	f7f2 fead 	bl	8003760 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010a06:	bf00      	nop
 8010a08:	3710      	adds	r7, #16
 8010a0a:	46bd      	mov	sp, r7
 8010a0c:	bd80      	pop	{r7, pc}

08010a0e <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8010a0e:	b580      	push	{r7, lr}
 8010a10:	b084      	sub	sp, #16
 8010a12:	af00      	add	r7, sp, #0
 8010a14:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010a1a:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 8010a1c:	68fb      	ldr	r3, [r7, #12]
 8010a1e:	2200      	movs	r2, #0
 8010a20:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010a22:	68fb      	ldr	r3, [r7, #12]
 8010a24:	2220      	movs	r2, #32
 8010a26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010a2a:	68fb      	ldr	r3, [r7, #12]
 8010a2c:	2200      	movs	r2, #0
 8010a2e:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8010a30:	68f8      	ldr	r0, [r7, #12]
 8010a32:	f7ff fc95 	bl	8010360 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010a36:	bf00      	nop
 8010a38:	3710      	adds	r7, #16
 8010a3a:	46bd      	mov	sp, r7
 8010a3c:	bd80      	pop	{r7, pc}

08010a3e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8010a3e:	b480      	push	{r7}
 8010a40:	b085      	sub	sp, #20
 8010a42:	af00      	add	r7, sp, #0
 8010a44:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010a4c:	b2db      	uxtb	r3, r3
 8010a4e:	2b21      	cmp	r3, #33	; 0x21
 8010a50:	d13e      	bne.n	8010ad0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	689b      	ldr	r3, [r3, #8]
 8010a56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010a5a:	d114      	bne.n	8010a86 <UART_Transmit_IT+0x48>
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	691b      	ldr	r3, [r3, #16]
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	d110      	bne.n	8010a86 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	6a1b      	ldr	r3, [r3, #32]
 8010a68:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8010a6a:	68fb      	ldr	r3, [r7, #12]
 8010a6c:	881b      	ldrh	r3, [r3, #0]
 8010a6e:	461a      	mov	r2, r3
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	681b      	ldr	r3, [r3, #0]
 8010a74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010a78:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	6a1b      	ldr	r3, [r3, #32]
 8010a7e:	1c9a      	adds	r2, r3, #2
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	621a      	str	r2, [r3, #32]
 8010a84:	e008      	b.n	8010a98 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	6a1b      	ldr	r3, [r3, #32]
 8010a8a:	1c59      	adds	r1, r3, #1
 8010a8c:	687a      	ldr	r2, [r7, #4]
 8010a8e:	6211      	str	r1, [r2, #32]
 8010a90:	781a      	ldrb	r2, [r3, #0]
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	681b      	ldr	r3, [r3, #0]
 8010a96:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8010a9c:	b29b      	uxth	r3, r3
 8010a9e:	3b01      	subs	r3, #1
 8010aa0:	b29b      	uxth	r3, r3
 8010aa2:	687a      	ldr	r2, [r7, #4]
 8010aa4:	4619      	mov	r1, r3
 8010aa6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	d10f      	bne.n	8010acc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	681b      	ldr	r3, [r3, #0]
 8010ab0:	68da      	ldr	r2, [r3, #12]
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	681b      	ldr	r3, [r3, #0]
 8010ab6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010aba:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	681b      	ldr	r3, [r3, #0]
 8010ac0:	68da      	ldr	r2, [r3, #12]
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	681b      	ldr	r3, [r3, #0]
 8010ac6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010aca:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8010acc:	2300      	movs	r3, #0
 8010ace:	e000      	b.n	8010ad2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8010ad0:	2302      	movs	r3, #2
  }
}
 8010ad2:	4618      	mov	r0, r3
 8010ad4:	3714      	adds	r7, #20
 8010ad6:	46bd      	mov	sp, r7
 8010ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010adc:	4770      	bx	lr

08010ade <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010ade:	b580      	push	{r7, lr}
 8010ae0:	b082      	sub	sp, #8
 8010ae2:	af00      	add	r7, sp, #0
 8010ae4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	681b      	ldr	r3, [r3, #0]
 8010aea:	68da      	ldr	r2, [r3, #12]
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	681b      	ldr	r3, [r3, #0]
 8010af0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010af4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	2220      	movs	r2, #32
 8010afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010afe:	6878      	ldr	r0, [r7, #4]
 8010b00:	f7f2 fd86 	bl	8003610 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8010b04:	2300      	movs	r3, #0
}
 8010b06:	4618      	mov	r0, r3
 8010b08:	3708      	adds	r7, #8
 8010b0a:	46bd      	mov	sp, r7
 8010b0c:	bd80      	pop	{r7, pc}

08010b0e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8010b0e:	b580      	push	{r7, lr}
 8010b10:	b08c      	sub	sp, #48	; 0x30
 8010b12:	af00      	add	r7, sp, #0
 8010b14:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010b1c:	b2db      	uxtb	r3, r3
 8010b1e:	2b22      	cmp	r3, #34	; 0x22
 8010b20:	f040 80ab 	bne.w	8010c7a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	689b      	ldr	r3, [r3, #8]
 8010b28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010b2c:	d117      	bne.n	8010b5e <UART_Receive_IT+0x50>
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	691b      	ldr	r3, [r3, #16]
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	d113      	bne.n	8010b5e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8010b36:	2300      	movs	r3, #0
 8010b38:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010b3e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	681b      	ldr	r3, [r3, #0]
 8010b44:	685b      	ldr	r3, [r3, #4]
 8010b46:	b29b      	uxth	r3, r3
 8010b48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010b4c:	b29a      	uxth	r2, r3
 8010b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b50:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010b56:	1c9a      	adds	r2, r3, #2
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	629a      	str	r2, [r3, #40]	; 0x28
 8010b5c:	e026      	b.n	8010bac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010b62:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8010b64:	2300      	movs	r3, #0
 8010b66:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	689b      	ldr	r3, [r3, #8]
 8010b6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010b70:	d007      	beq.n	8010b82 <UART_Receive_IT+0x74>
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	689b      	ldr	r3, [r3, #8]
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d10a      	bne.n	8010b90 <UART_Receive_IT+0x82>
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	691b      	ldr	r3, [r3, #16]
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	d106      	bne.n	8010b90 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	681b      	ldr	r3, [r3, #0]
 8010b86:	685b      	ldr	r3, [r3, #4]
 8010b88:	b2da      	uxtb	r2, r3
 8010b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b8c:	701a      	strb	r2, [r3, #0]
 8010b8e:	e008      	b.n	8010ba2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	681b      	ldr	r3, [r3, #0]
 8010b94:	685b      	ldr	r3, [r3, #4]
 8010b96:	b2db      	uxtb	r3, r3
 8010b98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010b9c:	b2da      	uxtb	r2, r3
 8010b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ba0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010ba6:	1c5a      	adds	r2, r3, #1
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8010bb0:	b29b      	uxth	r3, r3
 8010bb2:	3b01      	subs	r3, #1
 8010bb4:	b29b      	uxth	r3, r3
 8010bb6:	687a      	ldr	r2, [r7, #4]
 8010bb8:	4619      	mov	r1, r3
 8010bba:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	d15a      	bne.n	8010c76 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	681b      	ldr	r3, [r3, #0]
 8010bc4:	68da      	ldr	r2, [r3, #12]
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	681b      	ldr	r3, [r3, #0]
 8010bca:	f022 0220 	bic.w	r2, r2, #32
 8010bce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	681b      	ldr	r3, [r3, #0]
 8010bd4:	68da      	ldr	r2, [r3, #12]
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	681b      	ldr	r3, [r3, #0]
 8010bda:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8010bde:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	681b      	ldr	r3, [r3, #0]
 8010be4:	695a      	ldr	r2, [r3, #20]
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	681b      	ldr	r3, [r3, #0]
 8010bea:	f022 0201 	bic.w	r2, r2, #1
 8010bee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	2220      	movs	r2, #32
 8010bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010bfc:	2b01      	cmp	r3, #1
 8010bfe:	d135      	bne.n	8010c6c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	2200      	movs	r2, #0
 8010c04:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	681b      	ldr	r3, [r3, #0]
 8010c0a:	330c      	adds	r3, #12
 8010c0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c0e:	697b      	ldr	r3, [r7, #20]
 8010c10:	e853 3f00 	ldrex	r3, [r3]
 8010c14:	613b      	str	r3, [r7, #16]
   return(result);
 8010c16:	693b      	ldr	r3, [r7, #16]
 8010c18:	f023 0310 	bic.w	r3, r3, #16
 8010c1c:	627b      	str	r3, [r7, #36]	; 0x24
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	681b      	ldr	r3, [r3, #0]
 8010c22:	330c      	adds	r3, #12
 8010c24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010c26:	623a      	str	r2, [r7, #32]
 8010c28:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c2a:	69f9      	ldr	r1, [r7, #28]
 8010c2c:	6a3a      	ldr	r2, [r7, #32]
 8010c2e:	e841 2300 	strex	r3, r2, [r1]
 8010c32:	61bb      	str	r3, [r7, #24]
   return(result);
 8010c34:	69bb      	ldr	r3, [r7, #24]
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d1e5      	bne.n	8010c06 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	681b      	ldr	r3, [r3, #0]
 8010c3e:	681b      	ldr	r3, [r3, #0]
 8010c40:	f003 0310 	and.w	r3, r3, #16
 8010c44:	2b10      	cmp	r3, #16
 8010c46:	d10a      	bne.n	8010c5e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8010c48:	2300      	movs	r3, #0
 8010c4a:	60fb      	str	r3, [r7, #12]
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	681b      	ldr	r3, [r3, #0]
 8010c50:	681b      	ldr	r3, [r3, #0]
 8010c52:	60fb      	str	r3, [r7, #12]
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	681b      	ldr	r3, [r3, #0]
 8010c58:	685b      	ldr	r3, [r3, #4]
 8010c5a:	60fb      	str	r3, [r7, #12]
 8010c5c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8010c62:	4619      	mov	r1, r3
 8010c64:	6878      	ldr	r0, [r7, #4]
 8010c66:	f7f2 fdd3 	bl	8003810 <HAL_UARTEx_RxEventCallback>
 8010c6a:	e002      	b.n	8010c72 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8010c6c:	6878      	ldr	r0, [r7, #4]
 8010c6e:	f7f2 fd0d 	bl	800368c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8010c72:	2300      	movs	r3, #0
 8010c74:	e002      	b.n	8010c7c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8010c76:	2300      	movs	r3, #0
 8010c78:	e000      	b.n	8010c7c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8010c7a:	2302      	movs	r3, #2
  }
}
 8010c7c:	4618      	mov	r0, r3
 8010c7e:	3730      	adds	r7, #48	; 0x30
 8010c80:	46bd      	mov	sp, r7
 8010c82:	bd80      	pop	{r7, pc}

08010c84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010c84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010c88:	b0c0      	sub	sp, #256	; 0x100
 8010c8a:	af00      	add	r7, sp, #0
 8010c8c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010c94:	681b      	ldr	r3, [r3, #0]
 8010c96:	691b      	ldr	r3, [r3, #16]
 8010c98:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8010c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010ca0:	68d9      	ldr	r1, [r3, #12]
 8010ca2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010ca6:	681a      	ldr	r2, [r3, #0]
 8010ca8:	ea40 0301 	orr.w	r3, r0, r1
 8010cac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8010cae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010cb2:	689a      	ldr	r2, [r3, #8]
 8010cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010cb8:	691b      	ldr	r3, [r3, #16]
 8010cba:	431a      	orrs	r2, r3
 8010cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010cc0:	695b      	ldr	r3, [r3, #20]
 8010cc2:	431a      	orrs	r2, r3
 8010cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010cc8:	69db      	ldr	r3, [r3, #28]
 8010cca:	4313      	orrs	r3, r2
 8010ccc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8010cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010cd4:	681b      	ldr	r3, [r3, #0]
 8010cd6:	68db      	ldr	r3, [r3, #12]
 8010cd8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8010cdc:	f021 010c 	bic.w	r1, r1, #12
 8010ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010ce4:	681a      	ldr	r2, [r3, #0]
 8010ce6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8010cea:	430b      	orrs	r3, r1
 8010cec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8010cee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010cf2:	681b      	ldr	r3, [r3, #0]
 8010cf4:	695b      	ldr	r3, [r3, #20]
 8010cf6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8010cfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010cfe:	6999      	ldr	r1, [r3, #24]
 8010d00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010d04:	681a      	ldr	r2, [r3, #0]
 8010d06:	ea40 0301 	orr.w	r3, r0, r1
 8010d0a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8010d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010d10:	681a      	ldr	r2, [r3, #0]
 8010d12:	4b8f      	ldr	r3, [pc, #572]	; (8010f50 <UART_SetConfig+0x2cc>)
 8010d14:	429a      	cmp	r2, r3
 8010d16:	d005      	beq.n	8010d24 <UART_SetConfig+0xa0>
 8010d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010d1c:	681a      	ldr	r2, [r3, #0]
 8010d1e:	4b8d      	ldr	r3, [pc, #564]	; (8010f54 <UART_SetConfig+0x2d0>)
 8010d20:	429a      	cmp	r2, r3
 8010d22:	d104      	bne.n	8010d2e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8010d24:	f7fd f90c 	bl	800df40 <HAL_RCC_GetPCLK2Freq>
 8010d28:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8010d2c:	e003      	b.n	8010d36 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8010d2e:	f7fd f8f3 	bl	800df18 <HAL_RCC_GetPCLK1Freq>
 8010d32:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010d36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010d3a:	69db      	ldr	r3, [r3, #28]
 8010d3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010d40:	f040 810c 	bne.w	8010f5c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8010d44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010d48:	2200      	movs	r2, #0
 8010d4a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8010d4e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8010d52:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8010d56:	4622      	mov	r2, r4
 8010d58:	462b      	mov	r3, r5
 8010d5a:	1891      	adds	r1, r2, r2
 8010d5c:	65b9      	str	r1, [r7, #88]	; 0x58
 8010d5e:	415b      	adcs	r3, r3
 8010d60:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010d62:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8010d66:	4621      	mov	r1, r4
 8010d68:	eb12 0801 	adds.w	r8, r2, r1
 8010d6c:	4629      	mov	r1, r5
 8010d6e:	eb43 0901 	adc.w	r9, r3, r1
 8010d72:	f04f 0200 	mov.w	r2, #0
 8010d76:	f04f 0300 	mov.w	r3, #0
 8010d7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8010d7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8010d82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8010d86:	4690      	mov	r8, r2
 8010d88:	4699      	mov	r9, r3
 8010d8a:	4623      	mov	r3, r4
 8010d8c:	eb18 0303 	adds.w	r3, r8, r3
 8010d90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8010d94:	462b      	mov	r3, r5
 8010d96:	eb49 0303 	adc.w	r3, r9, r3
 8010d9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8010d9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010da2:	685b      	ldr	r3, [r3, #4]
 8010da4:	2200      	movs	r2, #0
 8010da6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8010daa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8010dae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8010db2:	460b      	mov	r3, r1
 8010db4:	18db      	adds	r3, r3, r3
 8010db6:	653b      	str	r3, [r7, #80]	; 0x50
 8010db8:	4613      	mov	r3, r2
 8010dba:	eb42 0303 	adc.w	r3, r2, r3
 8010dbe:	657b      	str	r3, [r7, #84]	; 0x54
 8010dc0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8010dc4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8010dc8:	f7ef ff1e 	bl	8000c08 <__aeabi_uldivmod>
 8010dcc:	4602      	mov	r2, r0
 8010dce:	460b      	mov	r3, r1
 8010dd0:	4b61      	ldr	r3, [pc, #388]	; (8010f58 <UART_SetConfig+0x2d4>)
 8010dd2:	fba3 2302 	umull	r2, r3, r3, r2
 8010dd6:	095b      	lsrs	r3, r3, #5
 8010dd8:	011c      	lsls	r4, r3, #4
 8010dda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010dde:	2200      	movs	r2, #0
 8010de0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8010de4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8010de8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8010dec:	4642      	mov	r2, r8
 8010dee:	464b      	mov	r3, r9
 8010df0:	1891      	adds	r1, r2, r2
 8010df2:	64b9      	str	r1, [r7, #72]	; 0x48
 8010df4:	415b      	adcs	r3, r3
 8010df6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010df8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8010dfc:	4641      	mov	r1, r8
 8010dfe:	eb12 0a01 	adds.w	sl, r2, r1
 8010e02:	4649      	mov	r1, r9
 8010e04:	eb43 0b01 	adc.w	fp, r3, r1
 8010e08:	f04f 0200 	mov.w	r2, #0
 8010e0c:	f04f 0300 	mov.w	r3, #0
 8010e10:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8010e14:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8010e18:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010e1c:	4692      	mov	sl, r2
 8010e1e:	469b      	mov	fp, r3
 8010e20:	4643      	mov	r3, r8
 8010e22:	eb1a 0303 	adds.w	r3, sl, r3
 8010e26:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8010e2a:	464b      	mov	r3, r9
 8010e2c:	eb4b 0303 	adc.w	r3, fp, r3
 8010e30:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8010e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010e38:	685b      	ldr	r3, [r3, #4]
 8010e3a:	2200      	movs	r2, #0
 8010e3c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8010e40:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8010e44:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8010e48:	460b      	mov	r3, r1
 8010e4a:	18db      	adds	r3, r3, r3
 8010e4c:	643b      	str	r3, [r7, #64]	; 0x40
 8010e4e:	4613      	mov	r3, r2
 8010e50:	eb42 0303 	adc.w	r3, r2, r3
 8010e54:	647b      	str	r3, [r7, #68]	; 0x44
 8010e56:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8010e5a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8010e5e:	f7ef fed3 	bl	8000c08 <__aeabi_uldivmod>
 8010e62:	4602      	mov	r2, r0
 8010e64:	460b      	mov	r3, r1
 8010e66:	4611      	mov	r1, r2
 8010e68:	4b3b      	ldr	r3, [pc, #236]	; (8010f58 <UART_SetConfig+0x2d4>)
 8010e6a:	fba3 2301 	umull	r2, r3, r3, r1
 8010e6e:	095b      	lsrs	r3, r3, #5
 8010e70:	2264      	movs	r2, #100	; 0x64
 8010e72:	fb02 f303 	mul.w	r3, r2, r3
 8010e76:	1acb      	subs	r3, r1, r3
 8010e78:	00db      	lsls	r3, r3, #3
 8010e7a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8010e7e:	4b36      	ldr	r3, [pc, #216]	; (8010f58 <UART_SetConfig+0x2d4>)
 8010e80:	fba3 2302 	umull	r2, r3, r3, r2
 8010e84:	095b      	lsrs	r3, r3, #5
 8010e86:	005b      	lsls	r3, r3, #1
 8010e88:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8010e8c:	441c      	add	r4, r3
 8010e8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010e92:	2200      	movs	r2, #0
 8010e94:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8010e98:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8010e9c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8010ea0:	4642      	mov	r2, r8
 8010ea2:	464b      	mov	r3, r9
 8010ea4:	1891      	adds	r1, r2, r2
 8010ea6:	63b9      	str	r1, [r7, #56]	; 0x38
 8010ea8:	415b      	adcs	r3, r3
 8010eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010eac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8010eb0:	4641      	mov	r1, r8
 8010eb2:	1851      	adds	r1, r2, r1
 8010eb4:	6339      	str	r1, [r7, #48]	; 0x30
 8010eb6:	4649      	mov	r1, r9
 8010eb8:	414b      	adcs	r3, r1
 8010eba:	637b      	str	r3, [r7, #52]	; 0x34
 8010ebc:	f04f 0200 	mov.w	r2, #0
 8010ec0:	f04f 0300 	mov.w	r3, #0
 8010ec4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8010ec8:	4659      	mov	r1, fp
 8010eca:	00cb      	lsls	r3, r1, #3
 8010ecc:	4651      	mov	r1, sl
 8010ece:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8010ed2:	4651      	mov	r1, sl
 8010ed4:	00ca      	lsls	r2, r1, #3
 8010ed6:	4610      	mov	r0, r2
 8010ed8:	4619      	mov	r1, r3
 8010eda:	4603      	mov	r3, r0
 8010edc:	4642      	mov	r2, r8
 8010ede:	189b      	adds	r3, r3, r2
 8010ee0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8010ee4:	464b      	mov	r3, r9
 8010ee6:	460a      	mov	r2, r1
 8010ee8:	eb42 0303 	adc.w	r3, r2, r3
 8010eec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8010ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010ef4:	685b      	ldr	r3, [r3, #4]
 8010ef6:	2200      	movs	r2, #0
 8010ef8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8010efc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8010f00:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8010f04:	460b      	mov	r3, r1
 8010f06:	18db      	adds	r3, r3, r3
 8010f08:	62bb      	str	r3, [r7, #40]	; 0x28
 8010f0a:	4613      	mov	r3, r2
 8010f0c:	eb42 0303 	adc.w	r3, r2, r3
 8010f10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010f12:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8010f16:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8010f1a:	f7ef fe75 	bl	8000c08 <__aeabi_uldivmod>
 8010f1e:	4602      	mov	r2, r0
 8010f20:	460b      	mov	r3, r1
 8010f22:	4b0d      	ldr	r3, [pc, #52]	; (8010f58 <UART_SetConfig+0x2d4>)
 8010f24:	fba3 1302 	umull	r1, r3, r3, r2
 8010f28:	095b      	lsrs	r3, r3, #5
 8010f2a:	2164      	movs	r1, #100	; 0x64
 8010f2c:	fb01 f303 	mul.w	r3, r1, r3
 8010f30:	1ad3      	subs	r3, r2, r3
 8010f32:	00db      	lsls	r3, r3, #3
 8010f34:	3332      	adds	r3, #50	; 0x32
 8010f36:	4a08      	ldr	r2, [pc, #32]	; (8010f58 <UART_SetConfig+0x2d4>)
 8010f38:	fba2 2303 	umull	r2, r3, r2, r3
 8010f3c:	095b      	lsrs	r3, r3, #5
 8010f3e:	f003 0207 	and.w	r2, r3, #7
 8010f42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010f46:	681b      	ldr	r3, [r3, #0]
 8010f48:	4422      	add	r2, r4
 8010f4a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8010f4c:	e105      	b.n	801115a <UART_SetConfig+0x4d6>
 8010f4e:	bf00      	nop
 8010f50:	40011000 	.word	0x40011000
 8010f54:	40011400 	.word	0x40011400
 8010f58:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8010f5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010f60:	2200      	movs	r2, #0
 8010f62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8010f66:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8010f6a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8010f6e:	4642      	mov	r2, r8
 8010f70:	464b      	mov	r3, r9
 8010f72:	1891      	adds	r1, r2, r2
 8010f74:	6239      	str	r1, [r7, #32]
 8010f76:	415b      	adcs	r3, r3
 8010f78:	627b      	str	r3, [r7, #36]	; 0x24
 8010f7a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8010f7e:	4641      	mov	r1, r8
 8010f80:	1854      	adds	r4, r2, r1
 8010f82:	4649      	mov	r1, r9
 8010f84:	eb43 0501 	adc.w	r5, r3, r1
 8010f88:	f04f 0200 	mov.w	r2, #0
 8010f8c:	f04f 0300 	mov.w	r3, #0
 8010f90:	00eb      	lsls	r3, r5, #3
 8010f92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8010f96:	00e2      	lsls	r2, r4, #3
 8010f98:	4614      	mov	r4, r2
 8010f9a:	461d      	mov	r5, r3
 8010f9c:	4643      	mov	r3, r8
 8010f9e:	18e3      	adds	r3, r4, r3
 8010fa0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8010fa4:	464b      	mov	r3, r9
 8010fa6:	eb45 0303 	adc.w	r3, r5, r3
 8010faa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8010fae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010fb2:	685b      	ldr	r3, [r3, #4]
 8010fb4:	2200      	movs	r2, #0
 8010fb6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8010fba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8010fbe:	f04f 0200 	mov.w	r2, #0
 8010fc2:	f04f 0300 	mov.w	r3, #0
 8010fc6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8010fca:	4629      	mov	r1, r5
 8010fcc:	008b      	lsls	r3, r1, #2
 8010fce:	4621      	mov	r1, r4
 8010fd0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8010fd4:	4621      	mov	r1, r4
 8010fd6:	008a      	lsls	r2, r1, #2
 8010fd8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8010fdc:	f7ef fe14 	bl	8000c08 <__aeabi_uldivmod>
 8010fe0:	4602      	mov	r2, r0
 8010fe2:	460b      	mov	r3, r1
 8010fe4:	4b60      	ldr	r3, [pc, #384]	; (8011168 <UART_SetConfig+0x4e4>)
 8010fe6:	fba3 2302 	umull	r2, r3, r3, r2
 8010fea:	095b      	lsrs	r3, r3, #5
 8010fec:	011c      	lsls	r4, r3, #4
 8010fee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010ff2:	2200      	movs	r2, #0
 8010ff4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8010ff8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8010ffc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8011000:	4642      	mov	r2, r8
 8011002:	464b      	mov	r3, r9
 8011004:	1891      	adds	r1, r2, r2
 8011006:	61b9      	str	r1, [r7, #24]
 8011008:	415b      	adcs	r3, r3
 801100a:	61fb      	str	r3, [r7, #28]
 801100c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8011010:	4641      	mov	r1, r8
 8011012:	1851      	adds	r1, r2, r1
 8011014:	6139      	str	r1, [r7, #16]
 8011016:	4649      	mov	r1, r9
 8011018:	414b      	adcs	r3, r1
 801101a:	617b      	str	r3, [r7, #20]
 801101c:	f04f 0200 	mov.w	r2, #0
 8011020:	f04f 0300 	mov.w	r3, #0
 8011024:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8011028:	4659      	mov	r1, fp
 801102a:	00cb      	lsls	r3, r1, #3
 801102c:	4651      	mov	r1, sl
 801102e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8011032:	4651      	mov	r1, sl
 8011034:	00ca      	lsls	r2, r1, #3
 8011036:	4610      	mov	r0, r2
 8011038:	4619      	mov	r1, r3
 801103a:	4603      	mov	r3, r0
 801103c:	4642      	mov	r2, r8
 801103e:	189b      	adds	r3, r3, r2
 8011040:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011044:	464b      	mov	r3, r9
 8011046:	460a      	mov	r2, r1
 8011048:	eb42 0303 	adc.w	r3, r2, r3
 801104c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011054:	685b      	ldr	r3, [r3, #4]
 8011056:	2200      	movs	r2, #0
 8011058:	67bb      	str	r3, [r7, #120]	; 0x78
 801105a:	67fa      	str	r2, [r7, #124]	; 0x7c
 801105c:	f04f 0200 	mov.w	r2, #0
 8011060:	f04f 0300 	mov.w	r3, #0
 8011064:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8011068:	4649      	mov	r1, r9
 801106a:	008b      	lsls	r3, r1, #2
 801106c:	4641      	mov	r1, r8
 801106e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8011072:	4641      	mov	r1, r8
 8011074:	008a      	lsls	r2, r1, #2
 8011076:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 801107a:	f7ef fdc5 	bl	8000c08 <__aeabi_uldivmod>
 801107e:	4602      	mov	r2, r0
 8011080:	460b      	mov	r3, r1
 8011082:	4b39      	ldr	r3, [pc, #228]	; (8011168 <UART_SetConfig+0x4e4>)
 8011084:	fba3 1302 	umull	r1, r3, r3, r2
 8011088:	095b      	lsrs	r3, r3, #5
 801108a:	2164      	movs	r1, #100	; 0x64
 801108c:	fb01 f303 	mul.w	r3, r1, r3
 8011090:	1ad3      	subs	r3, r2, r3
 8011092:	011b      	lsls	r3, r3, #4
 8011094:	3332      	adds	r3, #50	; 0x32
 8011096:	4a34      	ldr	r2, [pc, #208]	; (8011168 <UART_SetConfig+0x4e4>)
 8011098:	fba2 2303 	umull	r2, r3, r2, r3
 801109c:	095b      	lsrs	r3, r3, #5
 801109e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80110a2:	441c      	add	r4, r3
 80110a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80110a8:	2200      	movs	r2, #0
 80110aa:	673b      	str	r3, [r7, #112]	; 0x70
 80110ac:	677a      	str	r2, [r7, #116]	; 0x74
 80110ae:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80110b2:	4642      	mov	r2, r8
 80110b4:	464b      	mov	r3, r9
 80110b6:	1891      	adds	r1, r2, r2
 80110b8:	60b9      	str	r1, [r7, #8]
 80110ba:	415b      	adcs	r3, r3
 80110bc:	60fb      	str	r3, [r7, #12]
 80110be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80110c2:	4641      	mov	r1, r8
 80110c4:	1851      	adds	r1, r2, r1
 80110c6:	6039      	str	r1, [r7, #0]
 80110c8:	4649      	mov	r1, r9
 80110ca:	414b      	adcs	r3, r1
 80110cc:	607b      	str	r3, [r7, #4]
 80110ce:	f04f 0200 	mov.w	r2, #0
 80110d2:	f04f 0300 	mov.w	r3, #0
 80110d6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80110da:	4659      	mov	r1, fp
 80110dc:	00cb      	lsls	r3, r1, #3
 80110de:	4651      	mov	r1, sl
 80110e0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80110e4:	4651      	mov	r1, sl
 80110e6:	00ca      	lsls	r2, r1, #3
 80110e8:	4610      	mov	r0, r2
 80110ea:	4619      	mov	r1, r3
 80110ec:	4603      	mov	r3, r0
 80110ee:	4642      	mov	r2, r8
 80110f0:	189b      	adds	r3, r3, r2
 80110f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80110f4:	464b      	mov	r3, r9
 80110f6:	460a      	mov	r2, r1
 80110f8:	eb42 0303 	adc.w	r3, r2, r3
 80110fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80110fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011102:	685b      	ldr	r3, [r3, #4]
 8011104:	2200      	movs	r2, #0
 8011106:	663b      	str	r3, [r7, #96]	; 0x60
 8011108:	667a      	str	r2, [r7, #100]	; 0x64
 801110a:	f04f 0200 	mov.w	r2, #0
 801110e:	f04f 0300 	mov.w	r3, #0
 8011112:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8011116:	4649      	mov	r1, r9
 8011118:	008b      	lsls	r3, r1, #2
 801111a:	4641      	mov	r1, r8
 801111c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8011120:	4641      	mov	r1, r8
 8011122:	008a      	lsls	r2, r1, #2
 8011124:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8011128:	f7ef fd6e 	bl	8000c08 <__aeabi_uldivmod>
 801112c:	4602      	mov	r2, r0
 801112e:	460b      	mov	r3, r1
 8011130:	4b0d      	ldr	r3, [pc, #52]	; (8011168 <UART_SetConfig+0x4e4>)
 8011132:	fba3 1302 	umull	r1, r3, r3, r2
 8011136:	095b      	lsrs	r3, r3, #5
 8011138:	2164      	movs	r1, #100	; 0x64
 801113a:	fb01 f303 	mul.w	r3, r1, r3
 801113e:	1ad3      	subs	r3, r2, r3
 8011140:	011b      	lsls	r3, r3, #4
 8011142:	3332      	adds	r3, #50	; 0x32
 8011144:	4a08      	ldr	r2, [pc, #32]	; (8011168 <UART_SetConfig+0x4e4>)
 8011146:	fba2 2303 	umull	r2, r3, r2, r3
 801114a:	095b      	lsrs	r3, r3, #5
 801114c:	f003 020f 	and.w	r2, r3, #15
 8011150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011154:	681b      	ldr	r3, [r3, #0]
 8011156:	4422      	add	r2, r4
 8011158:	609a      	str	r2, [r3, #8]
}
 801115a:	bf00      	nop
 801115c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8011160:	46bd      	mov	sp, r7
 8011162:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011166:	bf00      	nop
 8011168:	51eb851f 	.word	0x51eb851f

0801116c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 801116c:	b580      	push	{r7, lr}
 801116e:	b084      	sub	sp, #16
 8011170:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8011172:	2100      	movs	r1, #0
 8011174:	2000      	movs	r0, #0
 8011176:	f004 fe11 	bl	8015d9c <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 801117a:	4b2a      	ldr	r3, [pc, #168]	; (8011224 <MX_LWIP_Init+0xb8>)
 801117c:	2200      	movs	r2, #0
 801117e:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8011180:	4b29      	ldr	r3, [pc, #164]	; (8011228 <MX_LWIP_Init+0xbc>)
 8011182:	2200      	movs	r2, #0
 8011184:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 8011186:	4b29      	ldr	r3, [pc, #164]	; (801122c <MX_LWIP_Init+0xc0>)
 8011188:	2200      	movs	r2, #0
 801118a:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 801118c:	4b28      	ldr	r3, [pc, #160]	; (8011230 <MX_LWIP_Init+0xc4>)
 801118e:	9302      	str	r3, [sp, #8]
 8011190:	4b28      	ldr	r3, [pc, #160]	; (8011234 <MX_LWIP_Init+0xc8>)
 8011192:	9301      	str	r3, [sp, #4]
 8011194:	2300      	movs	r3, #0
 8011196:	9300      	str	r3, [sp, #0]
 8011198:	4b24      	ldr	r3, [pc, #144]	; (801122c <MX_LWIP_Init+0xc0>)
 801119a:	4a23      	ldr	r2, [pc, #140]	; (8011228 <MX_LWIP_Init+0xbc>)
 801119c:	4921      	ldr	r1, [pc, #132]	; (8011224 <MX_LWIP_Init+0xb8>)
 801119e:	4826      	ldr	r0, [pc, #152]	; (8011238 <MX_LWIP_Init+0xcc>)
 80111a0:	f007 f90e 	bl	80183c0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80111a4:	4824      	ldr	r0, [pc, #144]	; (8011238 <MX_LWIP_Init+0xcc>)
 80111a6:	f007 fac5 	bl	8018734 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80111aa:	4b23      	ldr	r3, [pc, #140]	; (8011238 <MX_LWIP_Init+0xcc>)
 80111ac:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80111b0:	089b      	lsrs	r3, r3, #2
 80111b2:	f003 0301 	and.w	r3, r3, #1
 80111b6:	b2db      	uxtb	r3, r3
 80111b8:	2b00      	cmp	r3, #0
 80111ba:	d003      	beq.n	80111c4 <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80111bc:	481e      	ldr	r0, [pc, #120]	; (8011238 <MX_LWIP_Init+0xcc>)
 80111be:	f007 fac9 	bl	8018754 <netif_set_up>
 80111c2:	e002      	b.n	80111ca <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80111c4:	481c      	ldr	r0, [pc, #112]	; (8011238 <MX_LWIP_Init+0xcc>)
 80111c6:	f007 fb31 	bl	801882c <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 80111ca:	491c      	ldr	r1, [pc, #112]	; (801123c <MX_LWIP_Init+0xd0>)
 80111cc:	481a      	ldr	r0, [pc, #104]	; (8011238 <MX_LWIP_Init+0xcc>)
 80111ce:	f007 fbc7 	bl	8018960 <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  Netif_LinkSemaphore = osSemaphoreNew(1, 1, NULL);
 80111d2:	2200      	movs	r2, #0
 80111d4:	2101      	movs	r1, #1
 80111d6:	2001      	movs	r0, #1
 80111d8:	f000 feb0 	bl	8011f3c <osSemaphoreNew>
 80111dc:	4603      	mov	r3, r0
 80111de:	4a18      	ldr	r2, [pc, #96]	; (8011240 <MX_LWIP_Init+0xd4>)
 80111e0:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 80111e2:	4b18      	ldr	r3, [pc, #96]	; (8011244 <MX_LWIP_Init+0xd8>)
 80111e4:	4a14      	ldr	r2, [pc, #80]	; (8011238 <MX_LWIP_Init+0xcc>)
 80111e6:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 80111e8:	4b15      	ldr	r3, [pc, #84]	; (8011240 <MX_LWIP_Init+0xd4>)
 80111ea:	681b      	ldr	r3, [r3, #0]
 80111ec:	4a15      	ldr	r2, [pc, #84]	; (8011244 <MX_LWIP_Init+0xd8>)
 80111ee:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 80111f0:	2224      	movs	r2, #36	; 0x24
 80111f2:	2100      	movs	r1, #0
 80111f4:	4814      	ldr	r0, [pc, #80]	; (8011248 <MX_LWIP_Init+0xdc>)
 80111f6:	f013 fc2d 	bl	8024a54 <memset>
  attributes.name = "LinkThr";
 80111fa:	4b13      	ldr	r3, [pc, #76]	; (8011248 <MX_LWIP_Init+0xdc>)
 80111fc:	4a13      	ldr	r2, [pc, #76]	; (801124c <MX_LWIP_Init+0xe0>)
 80111fe:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8011200:	4b11      	ldr	r3, [pc, #68]	; (8011248 <MX_LWIP_Init+0xdc>)
 8011202:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8011206:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 8011208:	4b0f      	ldr	r3, [pc, #60]	; (8011248 <MX_LWIP_Init+0xdc>)
 801120a:	2210      	movs	r2, #16
 801120c:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernetif_set_link, &link_arg, &attributes);
 801120e:	4a0e      	ldr	r2, [pc, #56]	; (8011248 <MX_LWIP_Init+0xdc>)
 8011210:	490c      	ldr	r1, [pc, #48]	; (8011244 <MX_LWIP_Init+0xd8>)
 8011212:	480f      	ldr	r0, [pc, #60]	; (8011250 <MX_LWIP_Init+0xe4>)
 8011214:	f000 fccb 	bl	8011bae <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8011218:	4807      	ldr	r0, [pc, #28]	; (8011238 <MX_LWIP_Init+0xcc>)
 801121a:	f00f fca9 	bl	8020b70 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 801121e:	bf00      	nop
 8011220:	46bd      	mov	sp, r7
 8011222:	bd80      	pop	{r7, pc}
 8011224:	20014640 	.word	0x20014640
 8011228:	20014644 	.word	0x20014644
 801122c:	20014648 	.word	0x20014648
 8011230:	08015cd9 	.word	0x08015cd9
 8011234:	08011899 	.word	0x08011899
 8011238:	20014608 	.word	0x20014608
 801123c:	0801197d 	.word	0x0801197d
 8011240:	20000074 	.word	0x20000074
 8011244:	200145dc 	.word	0x200145dc
 8011248:	200145e4 	.word	0x200145e4
 801124c:	0802ab98 	.word	0x0802ab98
 8011250:	08011905 	.word	0x08011905

08011254 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8011254:	b580      	push	{r7, lr}
 8011256:	b08e      	sub	sp, #56	; 0x38
 8011258:	af00      	add	r7, sp, #0
 801125a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801125c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011260:	2200      	movs	r2, #0
 8011262:	601a      	str	r2, [r3, #0]
 8011264:	605a      	str	r2, [r3, #4]
 8011266:	609a      	str	r2, [r3, #8]
 8011268:	60da      	str	r2, [r3, #12]
 801126a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	681b      	ldr	r3, [r3, #0]
 8011270:	4a4a      	ldr	r2, [pc, #296]	; (801139c <HAL_ETH_MspInit+0x148>)
 8011272:	4293      	cmp	r3, r2
 8011274:	f040 808d 	bne.w	8011392 <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8011278:	2300      	movs	r3, #0
 801127a:	623b      	str	r3, [r7, #32]
 801127c:	4b48      	ldr	r3, [pc, #288]	; (80113a0 <HAL_ETH_MspInit+0x14c>)
 801127e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011280:	4a47      	ldr	r2, [pc, #284]	; (80113a0 <HAL_ETH_MspInit+0x14c>)
 8011282:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8011286:	6313      	str	r3, [r2, #48]	; 0x30
 8011288:	4b45      	ldr	r3, [pc, #276]	; (80113a0 <HAL_ETH_MspInit+0x14c>)
 801128a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801128c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011290:	623b      	str	r3, [r7, #32]
 8011292:	6a3b      	ldr	r3, [r7, #32]
 8011294:	2300      	movs	r3, #0
 8011296:	61fb      	str	r3, [r7, #28]
 8011298:	4b41      	ldr	r3, [pc, #260]	; (80113a0 <HAL_ETH_MspInit+0x14c>)
 801129a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801129c:	4a40      	ldr	r2, [pc, #256]	; (80113a0 <HAL_ETH_MspInit+0x14c>)
 801129e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80112a2:	6313      	str	r3, [r2, #48]	; 0x30
 80112a4:	4b3e      	ldr	r3, [pc, #248]	; (80113a0 <HAL_ETH_MspInit+0x14c>)
 80112a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80112a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80112ac:	61fb      	str	r3, [r7, #28]
 80112ae:	69fb      	ldr	r3, [r7, #28]
 80112b0:	2300      	movs	r3, #0
 80112b2:	61bb      	str	r3, [r7, #24]
 80112b4:	4b3a      	ldr	r3, [pc, #232]	; (80113a0 <HAL_ETH_MspInit+0x14c>)
 80112b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80112b8:	4a39      	ldr	r2, [pc, #228]	; (80113a0 <HAL_ETH_MspInit+0x14c>)
 80112ba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80112be:	6313      	str	r3, [r2, #48]	; 0x30
 80112c0:	4b37      	ldr	r3, [pc, #220]	; (80113a0 <HAL_ETH_MspInit+0x14c>)
 80112c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80112c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80112c8:	61bb      	str	r3, [r7, #24]
 80112ca:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80112cc:	2300      	movs	r3, #0
 80112ce:	617b      	str	r3, [r7, #20]
 80112d0:	4b33      	ldr	r3, [pc, #204]	; (80113a0 <HAL_ETH_MspInit+0x14c>)
 80112d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80112d4:	4a32      	ldr	r2, [pc, #200]	; (80113a0 <HAL_ETH_MspInit+0x14c>)
 80112d6:	f043 0304 	orr.w	r3, r3, #4
 80112da:	6313      	str	r3, [r2, #48]	; 0x30
 80112dc:	4b30      	ldr	r3, [pc, #192]	; (80113a0 <HAL_ETH_MspInit+0x14c>)
 80112de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80112e0:	f003 0304 	and.w	r3, r3, #4
 80112e4:	617b      	str	r3, [r7, #20]
 80112e6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80112e8:	2300      	movs	r3, #0
 80112ea:	613b      	str	r3, [r7, #16]
 80112ec:	4b2c      	ldr	r3, [pc, #176]	; (80113a0 <HAL_ETH_MspInit+0x14c>)
 80112ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80112f0:	4a2b      	ldr	r2, [pc, #172]	; (80113a0 <HAL_ETH_MspInit+0x14c>)
 80112f2:	f043 0301 	orr.w	r3, r3, #1
 80112f6:	6313      	str	r3, [r2, #48]	; 0x30
 80112f8:	4b29      	ldr	r3, [pc, #164]	; (80113a0 <HAL_ETH_MspInit+0x14c>)
 80112fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80112fc:	f003 0301 	and.w	r3, r3, #1
 8011300:	613b      	str	r3, [r7, #16]
 8011302:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8011304:	2300      	movs	r3, #0
 8011306:	60fb      	str	r3, [r7, #12]
 8011308:	4b25      	ldr	r3, [pc, #148]	; (80113a0 <HAL_ETH_MspInit+0x14c>)
 801130a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801130c:	4a24      	ldr	r2, [pc, #144]	; (80113a0 <HAL_ETH_MspInit+0x14c>)
 801130e:	f043 0302 	orr.w	r3, r3, #2
 8011312:	6313      	str	r3, [r2, #48]	; 0x30
 8011314:	4b22      	ldr	r3, [pc, #136]	; (80113a0 <HAL_ETH_MspInit+0x14c>)
 8011316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011318:	f003 0302 	and.w	r3, r3, #2
 801131c:	60fb      	str	r3, [r7, #12]
 801131e:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8011320:	2332      	movs	r3, #50	; 0x32
 8011322:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011324:	2302      	movs	r3, #2
 8011326:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011328:	2300      	movs	r3, #0
 801132a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801132c:	2303      	movs	r3, #3
 801132e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8011330:	230b      	movs	r3, #11
 8011332:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8011334:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011338:	4619      	mov	r1, r3
 801133a:	481a      	ldr	r0, [pc, #104]	; (80113a4 <HAL_ETH_MspInit+0x150>)
 801133c:	f7fb fe50 	bl	800cfe0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8011340:	2386      	movs	r3, #134	; 0x86
 8011342:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011344:	2302      	movs	r3, #2
 8011346:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011348:	2300      	movs	r3, #0
 801134a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801134c:	2303      	movs	r3, #3
 801134e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8011350:	230b      	movs	r3, #11
 8011352:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011354:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011358:	4619      	mov	r1, r3
 801135a:	4813      	ldr	r0, [pc, #76]	; (80113a8 <HAL_ETH_MspInit+0x154>)
 801135c:	f7fb fe40 	bl	800cfe0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8011360:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8011364:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011366:	2302      	movs	r3, #2
 8011368:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801136a:	2300      	movs	r3, #0
 801136c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801136e:	2303      	movs	r3, #3
 8011370:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8011372:	230b      	movs	r3, #11
 8011374:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011376:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801137a:	4619      	mov	r1, r3
 801137c:	480b      	ldr	r0, [pc, #44]	; (80113ac <HAL_ETH_MspInit+0x158>)
 801137e:	f7fb fe2f 	bl	800cfe0 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8011382:	2200      	movs	r2, #0
 8011384:	2105      	movs	r1, #5
 8011386:	203d      	movs	r0, #61	; 0x3d
 8011388:	f7f9 fd7f 	bl	800ae8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 801138c:	203d      	movs	r0, #61	; 0x3d
 801138e:	f7f9 fd98 	bl	800aec2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8011392:	bf00      	nop
 8011394:	3738      	adds	r7, #56	; 0x38
 8011396:	46bd      	mov	sp, r7
 8011398:	bd80      	pop	{r7, pc}
 801139a:	bf00      	nop
 801139c:	40028000 	.word	0x40028000
 80113a0:	40023800 	.word	0x40023800
 80113a4:	40020800 	.word	0x40020800
 80113a8:	40020000 	.word	0x40020000
 80113ac:	40020400 	.word	0x40020400

080113b0 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 80113b0:	b580      	push	{r7, lr}
 80113b2:	b082      	sub	sp, #8
 80113b4:	af00      	add	r7, sp, #0
 80113b6:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 80113b8:	4b04      	ldr	r3, [pc, #16]	; (80113cc <HAL_ETH_RxCpltCallback+0x1c>)
 80113ba:	681b      	ldr	r3, [r3, #0]
 80113bc:	4618      	mov	r0, r3
 80113be:	f000 fe99 	bl	80120f4 <osSemaphoreRelease>
}
 80113c2:	bf00      	nop
 80113c4:	3708      	adds	r7, #8
 80113c6:	46bd      	mov	sp, r7
 80113c8:	bd80      	pop	{r7, pc}
 80113ca:	bf00      	nop
 80113cc:	20000078 	.word	0x20000078

080113d0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80113d0:	b580      	push	{r7, lr}
 80113d2:	b090      	sub	sp, #64	; 0x40
 80113d4:	af00      	add	r7, sp, #0
 80113d6:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 80113d8:	2300      	movs	r3, #0
 80113da:	637b      	str	r3, [r7, #52]	; 0x34
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80113dc:	4b64      	ldr	r3, [pc, #400]	; (8011570 <low_level_init+0x1a0>)
 80113de:	4a65      	ldr	r2, [pc, #404]	; (8011574 <low_level_init+0x1a4>)
 80113e0:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80113e2:	4b63      	ldr	r3, [pc, #396]	; (8011570 <low_level_init+0x1a0>)
 80113e4:	2201      	movs	r2, #1
 80113e6:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 80113e8:	4b61      	ldr	r3, [pc, #388]	; (8011570 <low_level_init+0x1a0>)
 80113ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80113ee:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80113f0:	4b5f      	ldr	r3, [pc, #380]	; (8011570 <low_level_init+0x1a0>)
 80113f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80113f6:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80113f8:	4b5d      	ldr	r3, [pc, #372]	; (8011570 <low_level_init+0x1a0>)
 80113fa:	2201      	movs	r2, #1
 80113fc:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 80113fe:	2300      	movs	r3, #0
 8011400:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8011402:	2380      	movs	r3, #128	; 0x80
 8011404:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8011406:	23e1      	movs	r3, #225	; 0xe1
 8011408:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 801140a:	2300      	movs	r3, #0
 801140c:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 801140e:	2300      	movs	r3, #0
 8011410:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8011412:	2300      	movs	r3, #0
 8011414:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8011416:	4a56      	ldr	r2, [pc, #344]	; (8011570 <low_level_init+0x1a0>)
 8011418:	f107 0308 	add.w	r3, r7, #8
 801141c:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 801141e:	4b54      	ldr	r3, [pc, #336]	; (8011570 <low_level_init+0x1a0>)
 8011420:	2201      	movs	r2, #1
 8011422:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8011424:	4b52      	ldr	r3, [pc, #328]	; (8011570 <low_level_init+0x1a0>)
 8011426:	2200      	movs	r2, #0
 8011428:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 801142a:	4b51      	ldr	r3, [pc, #324]	; (8011570 <low_level_init+0x1a0>)
 801142c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8011430:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
  uint32_t idBase = *((uint32_t *)UID_BASE);
 8011432:	4b51      	ldr	r3, [pc, #324]	; (8011578 <low_level_init+0x1a8>)
 8011434:	681b      	ldr	r3, [r3, #0]
 8011436:	63fb      	str	r3, [r7, #60]	; 0x3c
  MACAddr[3] = (idBase & 0x00ff0000) >> 16;
 8011438:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801143a:	0c1b      	lsrs	r3, r3, #16
 801143c:	b2db      	uxtb	r3, r3
 801143e:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = (idBase & 0x0000ff00) >> 8;
 8011440:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011442:	0a1b      	lsrs	r3, r3, #8
 8011444:	b2db      	uxtb	r3, r3
 8011446:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = (idBase & 0x000000ff);
 8011448:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801144a:	b2db      	uxtb	r3, r3
 801144c:	737b      	strb	r3, [r7, #13]
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 801144e:	4848      	ldr	r0, [pc, #288]	; (8011570 <low_level_init+0x1a0>)
 8011450:	f7fa f954 	bl	800b6fc <HAL_ETH_Init>
 8011454:	4603      	mov	r3, r0
 8011456:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  if (hal_eth_init_status == HAL_OK)
 801145a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801145e:	2b00      	cmp	r3, #0
 8011460:	d108      	bne.n	8011474 <low_level_init+0xa4>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011468:	f043 0304 	orr.w	r3, r3, #4
 801146c:	b2da      	uxtb	r2, r3
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8011474:	2304      	movs	r3, #4
 8011476:	4a41      	ldr	r2, [pc, #260]	; (801157c <low_level_init+0x1ac>)
 8011478:	4941      	ldr	r1, [pc, #260]	; (8011580 <low_level_init+0x1b0>)
 801147a:	483d      	ldr	r0, [pc, #244]	; (8011570 <low_level_init+0x1a0>)
 801147c:	f7fa fad8 	bl	800ba30 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8011480:	2304      	movs	r3, #4
 8011482:	4a40      	ldr	r2, [pc, #256]	; (8011584 <low_level_init+0x1b4>)
 8011484:	4940      	ldr	r1, [pc, #256]	; (8011588 <low_level_init+0x1b8>)
 8011486:	483a      	ldr	r0, [pc, #232]	; (8011570 <low_level_init+0x1a0>)
 8011488:	f7fa fb3a 	bl	800bb00 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	2206      	movs	r2, #6
 8011490:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8011494:	4b36      	ldr	r3, [pc, #216]	; (8011570 <low_level_init+0x1a0>)
 8011496:	695b      	ldr	r3, [r3, #20]
 8011498:	781a      	ldrb	r2, [r3, #0]
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80114a0:	4b33      	ldr	r3, [pc, #204]	; (8011570 <low_level_init+0x1a0>)
 80114a2:	695b      	ldr	r3, [r3, #20]
 80114a4:	785a      	ldrb	r2, [r3, #1]
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80114ac:	4b30      	ldr	r3, [pc, #192]	; (8011570 <low_level_init+0x1a0>)
 80114ae:	695b      	ldr	r3, [r3, #20]
 80114b0:	789a      	ldrb	r2, [r3, #2]
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80114b8:	4b2d      	ldr	r3, [pc, #180]	; (8011570 <low_level_init+0x1a0>)
 80114ba:	695b      	ldr	r3, [r3, #20]
 80114bc:	78da      	ldrb	r2, [r3, #3]
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80114c4:	4b2a      	ldr	r3, [pc, #168]	; (8011570 <low_level_init+0x1a0>)
 80114c6:	695b      	ldr	r3, [r3, #20]
 80114c8:	791a      	ldrb	r2, [r3, #4]
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80114d0:	4b27      	ldr	r3, [pc, #156]	; (8011570 <low_level_init+0x1a0>)
 80114d2:	695b      	ldr	r3, [r3, #20]
 80114d4:	795a      	ldrb	r2, [r3, #5]
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = 1500;
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80114e2:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80114ea:	f043 030a 	orr.w	r3, r3, #10
 80114ee:	b2da      	uxtb	r2, r3
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  s_xSemaphore = osSemaphoreNew(1, 1, NULL);
 80114f6:	2200      	movs	r2, #0
 80114f8:	2101      	movs	r1, #1
 80114fa:	2001      	movs	r0, #1
 80114fc:	f000 fd1e 	bl	8011f3c <osSemaphoreNew>
 8011500:	4603      	mov	r3, r0
 8011502:	4a22      	ldr	r2, [pc, #136]	; (801158c <low_level_init+0x1bc>)
 8011504:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8011506:	f107 0310 	add.w	r3, r7, #16
 801150a:	2224      	movs	r2, #36	; 0x24
 801150c:	2100      	movs	r1, #0
 801150e:	4618      	mov	r0, r3
 8011510:	f013 faa0 	bl	8024a54 <memset>
  attributes.name = "EthIf";
 8011514:	4b1e      	ldr	r3, [pc, #120]	; (8011590 <low_level_init+0x1c0>)
 8011516:	613b      	str	r3, [r7, #16]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8011518:	f44f 73af 	mov.w	r3, #350	; 0x15e
 801151c:	627b      	str	r3, [r7, #36]	; 0x24
  attributes.priority = osPriorityRealtime;
 801151e:	2330      	movs	r3, #48	; 0x30
 8011520:	62bb      	str	r3, [r7, #40]	; 0x28
  osThreadNew(ethernetif_input, netif, &attributes);
 8011522:	f107 0310 	add.w	r3, r7, #16
 8011526:	461a      	mov	r2, r3
 8011528:	6879      	ldr	r1, [r7, #4]
 801152a:	481a      	ldr	r0, [pc, #104]	; (8011594 <low_level_init+0x1c4>)
 801152c:	f000 fb3f 	bl	8011bae <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8011530:	480f      	ldr	r0, [pc, #60]	; (8011570 <low_level_init+0x1a0>)
 8011532:	f7fa fe09 	bl	800c148 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8011536:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801153a:	461a      	mov	r2, r3
 801153c:	211d      	movs	r1, #29
 801153e:	480c      	ldr	r0, [pc, #48]	; (8011570 <low_level_init+0x1a0>)
 8011540:	f7fa fd34 	bl	800bfac <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8011544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011546:	f043 030b 	orr.w	r3, r3, #11
 801154a:	637b      	str	r3, [r7, #52]	; 0x34

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 801154c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801154e:	461a      	mov	r2, r3
 8011550:	211d      	movs	r1, #29
 8011552:	4807      	ldr	r0, [pc, #28]	; (8011570 <low_level_init+0x1a0>)
 8011554:	f7fa fd92 	bl	800c07c <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8011558:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801155c:	461a      	mov	r2, r3
 801155e:	211d      	movs	r1, #29
 8011560:	4803      	ldr	r0, [pc, #12]	; (8011570 <low_level_init+0x1a0>)
 8011562:	f7fa fd23 	bl	800bfac <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8011566:	bf00      	nop
 8011568:	3740      	adds	r7, #64	; 0x40
 801156a:	46bd      	mov	sp, r7
 801156c:	bd80      	pop	{r7, pc}
 801156e:	bf00      	nop
 8011570:	20015f1c 	.word	0x20015f1c
 8011574:	40028000 	.word	0x40028000
 8011578:	1fff7a10 	.word	0x1fff7a10
 801157c:	20015f64 	.word	0x20015f64
 8011580:	2001464c 	.word	0x2001464c
 8011584:	200146cc 	.word	0x200146cc
 8011588:	20015e9c 	.word	0x20015e9c
 801158c:	20000078 	.word	0x20000078
 8011590:	0802aba0 	.word	0x0802aba0
 8011594:	08011839 	.word	0x08011839

08011598 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8011598:	b580      	push	{r7, lr}
 801159a:	b08a      	sub	sp, #40	; 0x28
 801159c:	af00      	add	r7, sp, #0
 801159e:	6078      	str	r0, [r7, #4]
 80115a0:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 80115a2:	4b4b      	ldr	r3, [pc, #300]	; (80116d0 <low_level_output+0x138>)
 80115a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115a6:	689b      	ldr	r3, [r3, #8]
 80115a8:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 80115aa:	2300      	movs	r3, #0
 80115ac:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 80115ae:	2300      	movs	r3, #0
 80115b0:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 80115b2:	2300      	movs	r3, #0
 80115b4:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 80115b6:	2300      	movs	r3, #0
 80115b8:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 80115ba:	4b45      	ldr	r3, [pc, #276]	; (80116d0 <low_level_output+0x138>)
 80115bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115be:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 80115c0:	2300      	movs	r3, #0
 80115c2:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 80115c4:	683b      	ldr	r3, [r7, #0]
 80115c6:	623b      	str	r3, [r7, #32]
 80115c8:	e05a      	b.n	8011680 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80115ca:	69bb      	ldr	r3, [r7, #24]
 80115cc:	681b      	ldr	r3, [r3, #0]
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	da03      	bge.n	80115da <low_level_output+0x42>
      {
        errval = ERR_USE;
 80115d2:	23f8      	movs	r3, #248	; 0xf8
 80115d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 80115d8:	e05c      	b.n	8011694 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 80115da:	6a3b      	ldr	r3, [r7, #32]
 80115dc:	895b      	ldrh	r3, [r3, #10]
 80115de:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 80115e0:	2300      	movs	r3, #0
 80115e2:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80115e4:	e02f      	b.n	8011646 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80115e6:	69fa      	ldr	r2, [r7, #28]
 80115e8:	693b      	ldr	r3, [r7, #16]
 80115ea:	18d0      	adds	r0, r2, r3
 80115ec:	6a3b      	ldr	r3, [r7, #32]
 80115ee:	685a      	ldr	r2, [r3, #4]
 80115f0:	68bb      	ldr	r3, [r7, #8]
 80115f2:	18d1      	adds	r1, r2, r3
 80115f4:	693b      	ldr	r3, [r7, #16]
 80115f6:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80115fa:	3304      	adds	r3, #4
 80115fc:	461a      	mov	r2, r3
 80115fe:	f013 fa01 	bl	8024a04 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8011602:	69bb      	ldr	r3, [r7, #24]
 8011604:	68db      	ldr	r3, [r3, #12]
 8011606:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8011608:	69bb      	ldr	r3, [r7, #24]
 801160a:	681b      	ldr	r3, [r3, #0]
 801160c:	2b00      	cmp	r3, #0
 801160e:	da03      	bge.n	8011618 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8011610:	23f8      	movs	r3, #248	; 0xf8
 8011612:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8011616:	e03d      	b.n	8011694 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8011618:	69bb      	ldr	r3, [r7, #24]
 801161a:	689b      	ldr	r3, [r3, #8]
 801161c:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 801161e:	693a      	ldr	r2, [r7, #16]
 8011620:	68fb      	ldr	r3, [r7, #12]
 8011622:	4413      	add	r3, r2
 8011624:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8011628:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 801162a:	68ba      	ldr	r2, [r7, #8]
 801162c:	693b      	ldr	r3, [r7, #16]
 801162e:	1ad3      	subs	r3, r2, r3
 8011630:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8011634:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8011636:	697a      	ldr	r2, [r7, #20]
 8011638:	693b      	ldr	r3, [r7, #16]
 801163a:	1ad3      	subs	r3, r2, r3
 801163c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8011640:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8011642:	2300      	movs	r3, #0
 8011644:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8011646:	68fa      	ldr	r2, [r7, #12]
 8011648:	693b      	ldr	r3, [r7, #16]
 801164a:	4413      	add	r3, r2
 801164c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8011650:	4293      	cmp	r3, r2
 8011652:	d8c8      	bhi.n	80115e6 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8011654:	69fa      	ldr	r2, [r7, #28]
 8011656:	693b      	ldr	r3, [r7, #16]
 8011658:	18d0      	adds	r0, r2, r3
 801165a:	6a3b      	ldr	r3, [r7, #32]
 801165c:	685a      	ldr	r2, [r3, #4]
 801165e:	68bb      	ldr	r3, [r7, #8]
 8011660:	4413      	add	r3, r2
 8011662:	68fa      	ldr	r2, [r7, #12]
 8011664:	4619      	mov	r1, r3
 8011666:	f013 f9cd 	bl	8024a04 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 801166a:	693a      	ldr	r2, [r7, #16]
 801166c:	68fb      	ldr	r3, [r7, #12]
 801166e:	4413      	add	r3, r2
 8011670:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8011672:	697a      	ldr	r2, [r7, #20]
 8011674:	68fb      	ldr	r3, [r7, #12]
 8011676:	4413      	add	r3, r2
 8011678:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 801167a:	6a3b      	ldr	r3, [r7, #32]
 801167c:	681b      	ldr	r3, [r3, #0]
 801167e:	623b      	str	r3, [r7, #32]
 8011680:	6a3b      	ldr	r3, [r7, #32]
 8011682:	2b00      	cmp	r3, #0
 8011684:	d1a1      	bne.n	80115ca <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8011686:	6979      	ldr	r1, [r7, #20]
 8011688:	4811      	ldr	r0, [pc, #68]	; (80116d0 <low_level_output+0x138>)
 801168a:	f7fa faa5 	bl	800bbd8 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 801168e:	2300      	movs	r3, #0
 8011690:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8011694:	4b0e      	ldr	r3, [pc, #56]	; (80116d0 <low_level_output+0x138>)
 8011696:	681b      	ldr	r3, [r3, #0]
 8011698:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801169c:	695b      	ldr	r3, [r3, #20]
 801169e:	f003 0320 	and.w	r3, r3, #32
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	d00d      	beq.n	80116c2 <low_level_output+0x12a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 80116a6:	4b0a      	ldr	r3, [pc, #40]	; (80116d0 <low_level_output+0x138>)
 80116a8:	681b      	ldr	r3, [r3, #0]
 80116aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80116ae:	461a      	mov	r2, r3
 80116b0:	2320      	movs	r3, #32
 80116b2:	6153      	str	r3, [r2, #20]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 80116b4:	4b06      	ldr	r3, [pc, #24]	; (80116d0 <low_level_output+0x138>)
 80116b6:	681b      	ldr	r3, [r3, #0]
 80116b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80116bc:	461a      	mov	r2, r3
 80116be:	2300      	movs	r3, #0
 80116c0:	6053      	str	r3, [r2, #4]
  }
  return errval;
 80116c2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80116c6:	4618      	mov	r0, r3
 80116c8:	3728      	adds	r7, #40	; 0x28
 80116ca:	46bd      	mov	sp, r7
 80116cc:	bd80      	pop	{r7, pc}
 80116ce:	bf00      	nop
 80116d0:	20015f1c 	.word	0x20015f1c

080116d4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80116d4:	b580      	push	{r7, lr}
 80116d6:	b08c      	sub	sp, #48	; 0x30
 80116d8:	af00      	add	r7, sp, #0
 80116da:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80116dc:	2300      	movs	r3, #0
 80116de:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 80116e0:	2300      	movs	r3, #0
 80116e2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 80116e4:	2300      	movs	r3, #0
 80116e6:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 80116e8:	2300      	movs	r3, #0
 80116ea:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 80116ec:	2300      	movs	r3, #0
 80116ee:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 80116f0:	2300      	movs	r3, #0
 80116f2:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 80116f4:	2300      	movs	r3, #0
 80116f6:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 80116f8:	484e      	ldr	r0, [pc, #312]	; (8011834 <low_level_input+0x160>)
 80116fa:	f7fa fb57 	bl	800bdac <HAL_ETH_GetReceivedFrame_IT>
 80116fe:	4603      	mov	r3, r0
 8011700:	2b00      	cmp	r3, #0
 8011702:	d001      	beq.n	8011708 <low_level_input+0x34>

    return NULL;
 8011704:	2300      	movs	r3, #0
 8011706:	e091      	b.n	801182c <low_level_input+0x158>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8011708:	4b4a      	ldr	r3, [pc, #296]	; (8011834 <low_level_input+0x160>)
 801170a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801170c:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 801170e:	4b49      	ldr	r3, [pc, #292]	; (8011834 <low_level_input+0x160>)
 8011710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011712:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8011714:	89fb      	ldrh	r3, [r7, #14]
 8011716:	2b00      	cmp	r3, #0
 8011718:	d007      	beq.n	801172a <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 801171a:	89fb      	ldrh	r3, [r7, #14]
 801171c:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8011720:	4619      	mov	r1, r3
 8011722:	2000      	movs	r0, #0
 8011724:	f007 f9e6 	bl	8018af4 <pbuf_alloc>
 8011728:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 801172a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801172c:	2b00      	cmp	r3, #0
 801172e:	d04b      	beq.n	80117c8 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8011730:	4b40      	ldr	r3, [pc, #256]	; (8011834 <low_level_input+0x160>)
 8011732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011734:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8011736:	2300      	movs	r3, #0
 8011738:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 801173a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801173c:	62bb      	str	r3, [r7, #40]	; 0x28
 801173e:	e040      	b.n	80117c2 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8011740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011742:	895b      	ldrh	r3, [r3, #10]
 8011744:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8011746:	2300      	movs	r3, #0
 8011748:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 801174a:	e021      	b.n	8011790 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 801174c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801174e:	685a      	ldr	r2, [r3, #4]
 8011750:	69bb      	ldr	r3, [r7, #24]
 8011752:	18d0      	adds	r0, r2, r3
 8011754:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011756:	69fb      	ldr	r3, [r7, #28]
 8011758:	18d1      	adds	r1, r2, r3
 801175a:	69fb      	ldr	r3, [r7, #28]
 801175c:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8011760:	3304      	adds	r3, #4
 8011762:	461a      	mov	r2, r3
 8011764:	f013 f94e 	bl	8024a04 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8011768:	6a3b      	ldr	r3, [r7, #32]
 801176a:	68db      	ldr	r3, [r3, #12]
 801176c:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 801176e:	6a3b      	ldr	r3, [r7, #32]
 8011770:	689b      	ldr	r3, [r3, #8]
 8011772:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8011774:	69fa      	ldr	r2, [r7, #28]
 8011776:	697b      	ldr	r3, [r7, #20]
 8011778:	4413      	add	r3, r2
 801177a:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 801177e:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8011780:	69ba      	ldr	r2, [r7, #24]
 8011782:	69fb      	ldr	r3, [r7, #28]
 8011784:	1ad3      	subs	r3, r2, r3
 8011786:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 801178a:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 801178c:	2300      	movs	r3, #0
 801178e:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8011790:	697a      	ldr	r2, [r7, #20]
 8011792:	69fb      	ldr	r3, [r7, #28]
 8011794:	4413      	add	r3, r2
 8011796:	f240 52f4 	movw	r2, #1524	; 0x5f4
 801179a:	4293      	cmp	r3, r2
 801179c:	d8d6      	bhi.n	801174c <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 801179e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117a0:	685a      	ldr	r2, [r3, #4]
 80117a2:	69bb      	ldr	r3, [r7, #24]
 80117a4:	18d0      	adds	r0, r2, r3
 80117a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80117a8:	69fb      	ldr	r3, [r7, #28]
 80117aa:	4413      	add	r3, r2
 80117ac:	697a      	ldr	r2, [r7, #20]
 80117ae:	4619      	mov	r1, r3
 80117b0:	f013 f928 	bl	8024a04 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80117b4:	69fa      	ldr	r2, [r7, #28]
 80117b6:	697b      	ldr	r3, [r7, #20]
 80117b8:	4413      	add	r3, r2
 80117ba:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80117bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117be:	681b      	ldr	r3, [r3, #0]
 80117c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80117c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	d1bb      	bne.n	8011740 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80117c8:	4b1a      	ldr	r3, [pc, #104]	; (8011834 <low_level_input+0x160>)
 80117ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80117cc:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80117ce:	2300      	movs	r3, #0
 80117d0:	613b      	str	r3, [r7, #16]
 80117d2:	e00b      	b.n	80117ec <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 80117d4:	6a3b      	ldr	r3, [r7, #32]
 80117d6:	681b      	ldr	r3, [r3, #0]
 80117d8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80117dc:	6a3b      	ldr	r3, [r7, #32]
 80117de:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80117e0:	6a3b      	ldr	r3, [r7, #32]
 80117e2:	68db      	ldr	r3, [r3, #12]
 80117e4:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80117e6:	693b      	ldr	r3, [r7, #16]
 80117e8:	3301      	adds	r3, #1
 80117ea:	613b      	str	r3, [r7, #16]
 80117ec:	4b11      	ldr	r3, [pc, #68]	; (8011834 <low_level_input+0x160>)
 80117ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80117f0:	693a      	ldr	r2, [r7, #16]
 80117f2:	429a      	cmp	r2, r3
 80117f4:	d3ee      	bcc.n	80117d4 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 80117f6:	4b0f      	ldr	r3, [pc, #60]	; (8011834 <low_level_input+0x160>)
 80117f8:	2200      	movs	r2, #0
 80117fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 80117fc:	4b0d      	ldr	r3, [pc, #52]	; (8011834 <low_level_input+0x160>)
 80117fe:	681b      	ldr	r3, [r3, #0]
 8011800:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011804:	695b      	ldr	r3, [r3, #20]
 8011806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801180a:	2b00      	cmp	r3, #0
 801180c:	d00d      	beq.n	801182a <low_level_input+0x156>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 801180e:	4b09      	ldr	r3, [pc, #36]	; (8011834 <low_level_input+0x160>)
 8011810:	681b      	ldr	r3, [r3, #0]
 8011812:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011816:	461a      	mov	r2, r3
 8011818:	2380      	movs	r3, #128	; 0x80
 801181a:	6153      	str	r3, [r2, #20]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 801181c:	4b05      	ldr	r3, [pc, #20]	; (8011834 <low_level_input+0x160>)
 801181e:	681b      	ldr	r3, [r3, #0]
 8011820:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011824:	461a      	mov	r2, r3
 8011826:	2300      	movs	r3, #0
 8011828:	6093      	str	r3, [r2, #8]
  }
  return p;
 801182a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 801182c:	4618      	mov	r0, r3
 801182e:	3730      	adds	r7, #48	; 0x30
 8011830:	46bd      	mov	sp, r7
 8011832:	bd80      	pop	{r7, pc}
 8011834:	20015f1c 	.word	0x20015f1c

08011838 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8011838:	b580      	push	{r7, lr}
 801183a:	b084      	sub	sp, #16
 801183c:	af00      	add	r7, sp, #0
 801183e:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8011844:	4b12      	ldr	r3, [pc, #72]	; (8011890 <ethernetif_input+0x58>)
 8011846:	681b      	ldr	r3, [r3, #0]
 8011848:	f04f 31ff 	mov.w	r1, #4294967295
 801184c:	4618      	mov	r0, r3
 801184e:	f000 fbff 	bl	8012050 <osSemaphoreAcquire>
 8011852:	4603      	mov	r3, r0
 8011854:	2b00      	cmp	r3, #0
 8011856:	d1f5      	bne.n	8011844 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8011858:	480e      	ldr	r0, [pc, #56]	; (8011894 <ethernetif_input+0x5c>)
 801185a:	f013 f81f 	bl	802489c <sys_mutex_lock>
        p = low_level_input( netif );
 801185e:	68f8      	ldr	r0, [r7, #12]
 8011860:	f7ff ff38 	bl	80116d4 <low_level_input>
 8011864:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 8011866:	68bb      	ldr	r3, [r7, #8]
 8011868:	2b00      	cmp	r3, #0
 801186a:	d00a      	beq.n	8011882 <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 801186c:	68fb      	ldr	r3, [r7, #12]
 801186e:	691b      	ldr	r3, [r3, #16]
 8011870:	68f9      	ldr	r1, [r7, #12]
 8011872:	68b8      	ldr	r0, [r7, #8]
 8011874:	4798      	blx	r3
 8011876:	4603      	mov	r3, r0
 8011878:	2b00      	cmp	r3, #0
 801187a:	d002      	beq.n	8011882 <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 801187c:	68b8      	ldr	r0, [r7, #8]
 801187e:	f007 fc1d 	bl	80190bc <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 8011882:	4804      	ldr	r0, [pc, #16]	; (8011894 <ethernetif_input+0x5c>)
 8011884:	f013 f819 	bl	80248ba <sys_mutex_unlock>
      } while(p!=NULL);
 8011888:	68bb      	ldr	r3, [r7, #8]
 801188a:	2b00      	cmp	r3, #0
 801188c:	d1e4      	bne.n	8011858 <ethernetif_input+0x20>
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 801188e:	e7d9      	b.n	8011844 <ethernetif_input+0xc>
 8011890:	20000078 	.word	0x20000078
 8011894:	20017774 	.word	0x20017774

08011898 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8011898:	b580      	push	{r7, lr}
 801189a:	b082      	sub	sp, #8
 801189c:	af00      	add	r7, sp, #0
 801189e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	2b00      	cmp	r3, #0
 80118a4:	d106      	bne.n	80118b4 <ethernetif_init+0x1c>
 80118a6:	4b0e      	ldr	r3, [pc, #56]	; (80118e0 <ethernetif_init+0x48>)
 80118a8:	f44f 720d 	mov.w	r2, #564	; 0x234
 80118ac:	490d      	ldr	r1, [pc, #52]	; (80118e4 <ethernetif_init+0x4c>)
 80118ae:	480e      	ldr	r0, [pc, #56]	; (80118e8 <ethernetif_init+0x50>)
 80118b0:	f013 ff7c 	bl	80257ac <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	2273      	movs	r2, #115	; 0x73
 80118b8:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	2274      	movs	r2, #116	; 0x74
 80118c0:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	4a09      	ldr	r2, [pc, #36]	; (80118ec <ethernetif_init+0x54>)
 80118c8:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	4a08      	ldr	r2, [pc, #32]	; (80118f0 <ethernetif_init+0x58>)
 80118ce:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80118d0:	6878      	ldr	r0, [r7, #4]
 80118d2:	f7ff fd7d 	bl	80113d0 <low_level_init>

  return ERR_OK;
 80118d6:	2300      	movs	r3, #0
}
 80118d8:	4618      	mov	r0, r3
 80118da:	3708      	adds	r7, #8
 80118dc:	46bd      	mov	sp, r7
 80118de:	bd80      	pop	{r7, pc}
 80118e0:	0802aba8 	.word	0x0802aba8
 80118e4:	0802abc4 	.word	0x0802abc4
 80118e8:	0802abd4 	.word	0x0802abd4
 80118ec:	08022a3d 	.word	0x08022a3d
 80118f0:	08011599 	.word	0x08011599

080118f4 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 80118f4:	b580      	push	{r7, lr}
 80118f6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80118f8:	f7f9 f9bc 	bl	800ac74 <HAL_GetTick>
 80118fc:	4603      	mov	r3, r0
}
 80118fe:	4618      	mov	r0, r3
 8011900:	bd80      	pop	{r7, pc}
	...

08011904 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void* argument)

{
 8011904:	b580      	push	{r7, lr}
 8011906:	b084      	sub	sp, #16
 8011908:	af00      	add	r7, sp, #0
 801190a:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 801190c:	2300      	movs	r3, #0
 801190e:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8011914:	f107 0308 	add.w	r3, r7, #8
 8011918:	461a      	mov	r2, r3
 801191a:	2101      	movs	r1, #1
 801191c:	4816      	ldr	r0, [pc, #88]	; (8011978 <ethernetif_set_link+0x74>)
 801191e:	f7fa fb45 	bl	800bfac <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 8011922:	68bb      	ldr	r3, [r7, #8]
 8011924:	f003 0304 	and.w	r3, r3, #4
 8011928:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 801192a:	68fb      	ldr	r3, [r7, #12]
 801192c:	681b      	ldr	r3, [r3, #0]
 801192e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011932:	f003 0304 	and.w	r3, r3, #4
 8011936:	2b00      	cmp	r3, #0
 8011938:	d108      	bne.n	801194c <ethernetif_set_link+0x48>
 801193a:	68bb      	ldr	r3, [r7, #8]
 801193c:	2b00      	cmp	r3, #0
 801193e:	d005      	beq.n	801194c <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 8011940:	68fb      	ldr	r3, [r7, #12]
 8011942:	681b      	ldr	r3, [r3, #0]
 8011944:	4618      	mov	r0, r3
 8011946:	f006 ffa3 	bl	8018890 <netif_set_link_up>
 801194a:	e011      	b.n	8011970 <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 801194c:	68fb      	ldr	r3, [r7, #12]
 801194e:	681b      	ldr	r3, [r3, #0]
 8011950:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011954:	089b      	lsrs	r3, r3, #2
 8011956:	f003 0301 	and.w	r3, r3, #1
 801195a:	b2db      	uxtb	r3, r3
 801195c:	2b00      	cmp	r3, #0
 801195e:	d007      	beq.n	8011970 <ethernetif_set_link+0x6c>
 8011960:	68bb      	ldr	r3, [r7, #8]
 8011962:	2b00      	cmp	r3, #0
 8011964:	d104      	bne.n	8011970 <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 8011966:	68fb      	ldr	r3, [r7, #12]
 8011968:	681b      	ldr	r3, [r3, #0]
 801196a:	4618      	mov	r0, r3
 801196c:	f006 ffc8 	bl	8018900 <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 8011970:	20c8      	movs	r0, #200	; 0xc8
 8011972:	f000 f9ba 	bl	8011cea <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8011976:	e7cd      	b.n	8011914 <ethernetif_set_link+0x10>
 8011978:	20015f1c 	.word	0x20015f1c

0801197c <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 801197c:	b580      	push	{r7, lr}
 801197e:	b084      	sub	sp, #16
 8011980:	af00      	add	r7, sp, #0
 8011982:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8011984:	2300      	movs	r3, #0
 8011986:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8011988:	2300      	movs	r3, #0
 801198a:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011992:	089b      	lsrs	r3, r3, #2
 8011994:	f003 0301 	and.w	r3, r3, #1
 8011998:	b2db      	uxtb	r3, r3
 801199a:	2b00      	cmp	r3, #0
 801199c:	d05d      	beq.n	8011a5a <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 801199e:	4b34      	ldr	r3, [pc, #208]	; (8011a70 <ethernetif_update_config+0xf4>)
 80119a0:	685b      	ldr	r3, [r3, #4]
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	d03f      	beq.n	8011a26 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 80119a6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80119aa:	2100      	movs	r1, #0
 80119ac:	4830      	ldr	r0, [pc, #192]	; (8011a70 <ethernetif_update_config+0xf4>)
 80119ae:	f7fa fb65 	bl	800c07c <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 80119b2:	f7f9 f95f 	bl	800ac74 <HAL_GetTick>
 80119b6:	4603      	mov	r3, r0
 80119b8:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80119ba:	f107 0308 	add.w	r3, r7, #8
 80119be:	461a      	mov	r2, r3
 80119c0:	2101      	movs	r1, #1
 80119c2:	482b      	ldr	r0, [pc, #172]	; (8011a70 <ethernetif_update_config+0xf4>)
 80119c4:	f7fa faf2 	bl	800bfac <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 80119c8:	f7f9 f954 	bl	800ac74 <HAL_GetTick>
 80119cc:	4602      	mov	r2, r0
 80119ce:	68fb      	ldr	r3, [r7, #12]
 80119d0:	1ad3      	subs	r3, r2, r3
 80119d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80119d6:	d828      	bhi.n	8011a2a <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80119d8:	68bb      	ldr	r3, [r7, #8]
 80119da:	f003 0320 	and.w	r3, r3, #32
 80119de:	2b00      	cmp	r3, #0
 80119e0:	d0eb      	beq.n	80119ba <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 80119e2:	f107 0308 	add.w	r3, r7, #8
 80119e6:	461a      	mov	r2, r3
 80119e8:	2110      	movs	r1, #16
 80119ea:	4821      	ldr	r0, [pc, #132]	; (8011a70 <ethernetif_update_config+0xf4>)
 80119ec:	f7fa fade 	bl	800bfac <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80119f0:	68bb      	ldr	r3, [r7, #8]
 80119f2:	f003 0304 	and.w	r3, r3, #4
 80119f6:	2b00      	cmp	r3, #0
 80119f8:	d004      	beq.n	8011a04 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80119fa:	4b1d      	ldr	r3, [pc, #116]	; (8011a70 <ethernetif_update_config+0xf4>)
 80119fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011a00:	60da      	str	r2, [r3, #12]
 8011a02:	e002      	b.n	8011a0a <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8011a04:	4b1a      	ldr	r3, [pc, #104]	; (8011a70 <ethernetif_update_config+0xf4>)
 8011a06:	2200      	movs	r2, #0
 8011a08:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8011a0a:	68bb      	ldr	r3, [r7, #8]
 8011a0c:	f003 0302 	and.w	r3, r3, #2
 8011a10:	2b00      	cmp	r3, #0
 8011a12:	d003      	beq.n	8011a1c <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8011a14:	4b16      	ldr	r3, [pc, #88]	; (8011a70 <ethernetif_update_config+0xf4>)
 8011a16:	2200      	movs	r2, #0
 8011a18:	609a      	str	r2, [r3, #8]
 8011a1a:	e016      	b.n	8011a4a <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8011a1c:	4b14      	ldr	r3, [pc, #80]	; (8011a70 <ethernetif_update_config+0xf4>)
 8011a1e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8011a22:	609a      	str	r2, [r3, #8]
 8011a24:	e011      	b.n	8011a4a <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8011a26:	bf00      	nop
 8011a28:	e000      	b.n	8011a2c <ethernetif_update_config+0xb0>
          goto error;
 8011a2a:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8011a2c:	4b10      	ldr	r3, [pc, #64]	; (8011a70 <ethernetif_update_config+0xf4>)
 8011a2e:	68db      	ldr	r3, [r3, #12]
 8011a30:	08db      	lsrs	r3, r3, #3
 8011a32:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8011a34:	4b0e      	ldr	r3, [pc, #56]	; (8011a70 <ethernetif_update_config+0xf4>)
 8011a36:	689b      	ldr	r3, [r3, #8]
 8011a38:	085b      	lsrs	r3, r3, #1
 8011a3a:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8011a3c:	4313      	orrs	r3, r2
 8011a3e:	b29b      	uxth	r3, r3
 8011a40:	461a      	mov	r2, r3
 8011a42:	2100      	movs	r1, #0
 8011a44:	480a      	ldr	r0, [pc, #40]	; (8011a70 <ethernetif_update_config+0xf4>)
 8011a46:	f7fa fb19 	bl	800c07c <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8011a4a:	2100      	movs	r1, #0
 8011a4c:	4808      	ldr	r0, [pc, #32]	; (8011a70 <ethernetif_update_config+0xf4>)
 8011a4e:	f7fa fbd9 	bl	800c204 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8011a52:	4807      	ldr	r0, [pc, #28]	; (8011a70 <ethernetif_update_config+0xf4>)
 8011a54:	f7fa fb78 	bl	800c148 <HAL_ETH_Start>
 8011a58:	e002      	b.n	8011a60 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8011a5a:	4805      	ldr	r0, [pc, #20]	; (8011a70 <ethernetif_update_config+0xf4>)
 8011a5c:	f7fa fba3 	bl	800c1a6 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8011a60:	6878      	ldr	r0, [r7, #4]
 8011a62:	f000 f807 	bl	8011a74 <ethernetif_notify_conn_changed>
}
 8011a66:	bf00      	nop
 8011a68:	3710      	adds	r7, #16
 8011a6a:	46bd      	mov	sp, r7
 8011a6c:	bd80      	pop	{r7, pc}
 8011a6e:	bf00      	nop
 8011a70:	20015f1c 	.word	0x20015f1c

08011a74 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8011a74:	b480      	push	{r7}
 8011a76:	b083      	sub	sp, #12
 8011a78:	af00      	add	r7, sp, #0
 8011a7a:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8011a7c:	bf00      	nop
 8011a7e:	370c      	adds	r7, #12
 8011a80:	46bd      	mov	sp, r7
 8011a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a86:	4770      	bx	lr

08011a88 <__NVIC_SetPriority>:
{
 8011a88:	b480      	push	{r7}
 8011a8a:	b083      	sub	sp, #12
 8011a8c:	af00      	add	r7, sp, #0
 8011a8e:	4603      	mov	r3, r0
 8011a90:	6039      	str	r1, [r7, #0]
 8011a92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8011a94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	db0a      	blt.n	8011ab2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011a9c:	683b      	ldr	r3, [r7, #0]
 8011a9e:	b2da      	uxtb	r2, r3
 8011aa0:	490c      	ldr	r1, [pc, #48]	; (8011ad4 <__NVIC_SetPriority+0x4c>)
 8011aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011aa6:	0112      	lsls	r2, r2, #4
 8011aa8:	b2d2      	uxtb	r2, r2
 8011aaa:	440b      	add	r3, r1
 8011aac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8011ab0:	e00a      	b.n	8011ac8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011ab2:	683b      	ldr	r3, [r7, #0]
 8011ab4:	b2da      	uxtb	r2, r3
 8011ab6:	4908      	ldr	r1, [pc, #32]	; (8011ad8 <__NVIC_SetPriority+0x50>)
 8011ab8:	79fb      	ldrb	r3, [r7, #7]
 8011aba:	f003 030f 	and.w	r3, r3, #15
 8011abe:	3b04      	subs	r3, #4
 8011ac0:	0112      	lsls	r2, r2, #4
 8011ac2:	b2d2      	uxtb	r2, r2
 8011ac4:	440b      	add	r3, r1
 8011ac6:	761a      	strb	r2, [r3, #24]
}
 8011ac8:	bf00      	nop
 8011aca:	370c      	adds	r7, #12
 8011acc:	46bd      	mov	sp, r7
 8011ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ad2:	4770      	bx	lr
 8011ad4:	e000e100 	.word	0xe000e100
 8011ad8:	e000ed00 	.word	0xe000ed00

08011adc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8011adc:	b580      	push	{r7, lr}
 8011ade:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8011ae0:	2100      	movs	r1, #0
 8011ae2:	f06f 0004 	mvn.w	r0, #4
 8011ae6:	f7ff ffcf 	bl	8011a88 <__NVIC_SetPriority>
#endif
}
 8011aea:	bf00      	nop
 8011aec:	bd80      	pop	{r7, pc}
	...

08011af0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8011af0:	b480      	push	{r7}
 8011af2:	b083      	sub	sp, #12
 8011af4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011af6:	f3ef 8305 	mrs	r3, IPSR
 8011afa:	603b      	str	r3, [r7, #0]
  return(result);
 8011afc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011afe:	2b00      	cmp	r3, #0
 8011b00:	d003      	beq.n	8011b0a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8011b02:	f06f 0305 	mvn.w	r3, #5
 8011b06:	607b      	str	r3, [r7, #4]
 8011b08:	e00c      	b.n	8011b24 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8011b0a:	4b0a      	ldr	r3, [pc, #40]	; (8011b34 <osKernelInitialize+0x44>)
 8011b0c:	681b      	ldr	r3, [r3, #0]
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	d105      	bne.n	8011b1e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8011b12:	4b08      	ldr	r3, [pc, #32]	; (8011b34 <osKernelInitialize+0x44>)
 8011b14:	2201      	movs	r2, #1
 8011b16:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8011b18:	2300      	movs	r3, #0
 8011b1a:	607b      	str	r3, [r7, #4]
 8011b1c:	e002      	b.n	8011b24 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8011b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8011b22:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8011b24:	687b      	ldr	r3, [r7, #4]
}
 8011b26:	4618      	mov	r0, r3
 8011b28:	370c      	adds	r7, #12
 8011b2a:	46bd      	mov	sp, r7
 8011b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b30:	4770      	bx	lr
 8011b32:	bf00      	nop
 8011b34:	2000007c 	.word	0x2000007c

08011b38 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8011b38:	b580      	push	{r7, lr}
 8011b3a:	b082      	sub	sp, #8
 8011b3c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011b3e:	f3ef 8305 	mrs	r3, IPSR
 8011b42:	603b      	str	r3, [r7, #0]
  return(result);
 8011b44:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011b46:	2b00      	cmp	r3, #0
 8011b48:	d003      	beq.n	8011b52 <osKernelStart+0x1a>
    stat = osErrorISR;
 8011b4a:	f06f 0305 	mvn.w	r3, #5
 8011b4e:	607b      	str	r3, [r7, #4]
 8011b50:	e010      	b.n	8011b74 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8011b52:	4b0b      	ldr	r3, [pc, #44]	; (8011b80 <osKernelStart+0x48>)
 8011b54:	681b      	ldr	r3, [r3, #0]
 8011b56:	2b01      	cmp	r3, #1
 8011b58:	d109      	bne.n	8011b6e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8011b5a:	f7ff ffbf 	bl	8011adc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8011b5e:	4b08      	ldr	r3, [pc, #32]	; (8011b80 <osKernelStart+0x48>)
 8011b60:	2202      	movs	r2, #2
 8011b62:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8011b64:	f001 ffbe 	bl	8013ae4 <vTaskStartScheduler>
      stat = osOK;
 8011b68:	2300      	movs	r3, #0
 8011b6a:	607b      	str	r3, [r7, #4]
 8011b6c:	e002      	b.n	8011b74 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8011b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8011b72:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8011b74:	687b      	ldr	r3, [r7, #4]
}
 8011b76:	4618      	mov	r0, r3
 8011b78:	3708      	adds	r7, #8
 8011b7a:	46bd      	mov	sp, r7
 8011b7c:	bd80      	pop	{r7, pc}
 8011b7e:	bf00      	nop
 8011b80:	2000007c 	.word	0x2000007c

08011b84 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8011b84:	b580      	push	{r7, lr}
 8011b86:	b082      	sub	sp, #8
 8011b88:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011b8a:	f3ef 8305 	mrs	r3, IPSR
 8011b8e:	603b      	str	r3, [r7, #0]
  return(result);
 8011b90:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	d003      	beq.n	8011b9e <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8011b96:	f002 f8c7 	bl	8013d28 <xTaskGetTickCountFromISR>
 8011b9a:	6078      	str	r0, [r7, #4]
 8011b9c:	e002      	b.n	8011ba4 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8011b9e:	f002 f8b3 	bl	8013d08 <xTaskGetTickCount>
 8011ba2:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8011ba4:	687b      	ldr	r3, [r7, #4]
}
 8011ba6:	4618      	mov	r0, r3
 8011ba8:	3708      	adds	r7, #8
 8011baa:	46bd      	mov	sp, r7
 8011bac:	bd80      	pop	{r7, pc}

08011bae <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8011bae:	b580      	push	{r7, lr}
 8011bb0:	b08e      	sub	sp, #56	; 0x38
 8011bb2:	af04      	add	r7, sp, #16
 8011bb4:	60f8      	str	r0, [r7, #12]
 8011bb6:	60b9      	str	r1, [r7, #8]
 8011bb8:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8011bba:	2300      	movs	r3, #0
 8011bbc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011bbe:	f3ef 8305 	mrs	r3, IPSR
 8011bc2:	617b      	str	r3, [r7, #20]
  return(result);
 8011bc4:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8011bc6:	2b00      	cmp	r3, #0
 8011bc8:	d17f      	bne.n	8011cca <osThreadNew+0x11c>
 8011bca:	68fb      	ldr	r3, [r7, #12]
 8011bcc:	2b00      	cmp	r3, #0
 8011bce:	d07c      	beq.n	8011cca <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 8011bd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011bd4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8011bd6:	2318      	movs	r3, #24
 8011bd8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8011bda:	2300      	movs	r3, #0
 8011bdc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8011bde:	f04f 33ff 	mov.w	r3, #4294967295
 8011be2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	d045      	beq.n	8011c76 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	681b      	ldr	r3, [r3, #0]
 8011bee:	2b00      	cmp	r3, #0
 8011bf0:	d002      	beq.n	8011bf8 <osThreadNew+0x4a>
        name = attr->name;
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	681b      	ldr	r3, [r3, #0]
 8011bf6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	699b      	ldr	r3, [r3, #24]
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	d002      	beq.n	8011c06 <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	699b      	ldr	r3, [r3, #24]
 8011c04:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8011c06:	69fb      	ldr	r3, [r7, #28]
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	d008      	beq.n	8011c1e <osThreadNew+0x70>
 8011c0c:	69fb      	ldr	r3, [r7, #28]
 8011c0e:	2b38      	cmp	r3, #56	; 0x38
 8011c10:	d805      	bhi.n	8011c1e <osThreadNew+0x70>
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	685b      	ldr	r3, [r3, #4]
 8011c16:	f003 0301 	and.w	r3, r3, #1
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	d001      	beq.n	8011c22 <osThreadNew+0x74>
        return (NULL);
 8011c1e:	2300      	movs	r3, #0
 8011c20:	e054      	b.n	8011ccc <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	695b      	ldr	r3, [r3, #20]
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	d003      	beq.n	8011c32 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	695b      	ldr	r3, [r3, #20]
 8011c2e:	089b      	lsrs	r3, r3, #2
 8011c30:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	689b      	ldr	r3, [r3, #8]
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	d00e      	beq.n	8011c58 <osThreadNew+0xaa>
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	68db      	ldr	r3, [r3, #12]
 8011c3e:	2b5b      	cmp	r3, #91	; 0x5b
 8011c40:	d90a      	bls.n	8011c58 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8011c46:	2b00      	cmp	r3, #0
 8011c48:	d006      	beq.n	8011c58 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	695b      	ldr	r3, [r3, #20]
 8011c4e:	2b00      	cmp	r3, #0
 8011c50:	d002      	beq.n	8011c58 <osThreadNew+0xaa>
        mem = 1;
 8011c52:	2301      	movs	r3, #1
 8011c54:	61bb      	str	r3, [r7, #24]
 8011c56:	e010      	b.n	8011c7a <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	689b      	ldr	r3, [r3, #8]
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	d10c      	bne.n	8011c7a <osThreadNew+0xcc>
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	68db      	ldr	r3, [r3, #12]
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	d108      	bne.n	8011c7a <osThreadNew+0xcc>
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	691b      	ldr	r3, [r3, #16]
 8011c6c:	2b00      	cmp	r3, #0
 8011c6e:	d104      	bne.n	8011c7a <osThreadNew+0xcc>
          mem = 0;
 8011c70:	2300      	movs	r3, #0
 8011c72:	61bb      	str	r3, [r7, #24]
 8011c74:	e001      	b.n	8011c7a <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 8011c76:	2300      	movs	r3, #0
 8011c78:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8011c7a:	69bb      	ldr	r3, [r7, #24]
 8011c7c:	2b01      	cmp	r3, #1
 8011c7e:	d110      	bne.n	8011ca2 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8011c84:	687a      	ldr	r2, [r7, #4]
 8011c86:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8011c88:	9202      	str	r2, [sp, #8]
 8011c8a:	9301      	str	r3, [sp, #4]
 8011c8c:	69fb      	ldr	r3, [r7, #28]
 8011c8e:	9300      	str	r3, [sp, #0]
 8011c90:	68bb      	ldr	r3, [r7, #8]
 8011c92:	6a3a      	ldr	r2, [r7, #32]
 8011c94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011c96:	68f8      	ldr	r0, [r7, #12]
 8011c98:	f001 fd4e 	bl	8013738 <xTaskCreateStatic>
 8011c9c:	4603      	mov	r3, r0
 8011c9e:	613b      	str	r3, [r7, #16]
 8011ca0:	e013      	b.n	8011cca <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 8011ca2:	69bb      	ldr	r3, [r7, #24]
 8011ca4:	2b00      	cmp	r3, #0
 8011ca6:	d110      	bne.n	8011cca <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8011ca8:	6a3b      	ldr	r3, [r7, #32]
 8011caa:	b29a      	uxth	r2, r3
 8011cac:	f107 0310 	add.w	r3, r7, #16
 8011cb0:	9301      	str	r3, [sp, #4]
 8011cb2:	69fb      	ldr	r3, [r7, #28]
 8011cb4:	9300      	str	r3, [sp, #0]
 8011cb6:	68bb      	ldr	r3, [r7, #8]
 8011cb8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011cba:	68f8      	ldr	r0, [r7, #12]
 8011cbc:	f001 fd99 	bl	80137f2 <xTaskCreate>
 8011cc0:	4603      	mov	r3, r0
 8011cc2:	2b01      	cmp	r3, #1
 8011cc4:	d001      	beq.n	8011cca <osThreadNew+0x11c>
            hTask = NULL;
 8011cc6:	2300      	movs	r3, #0
 8011cc8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8011cca:	693b      	ldr	r3, [r7, #16]
}
 8011ccc:	4618      	mov	r0, r3
 8011cce:	3728      	adds	r7, #40	; 0x28
 8011cd0:	46bd      	mov	sp, r7
 8011cd2:	bd80      	pop	{r7, pc}

08011cd4 <osThreadGetId>:
  }

  return (name);
}

osThreadId_t osThreadGetId (void) {
 8011cd4:	b580      	push	{r7, lr}
 8011cd6:	b082      	sub	sp, #8
 8011cd8:	af00      	add	r7, sp, #0
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 8011cda:	f002 fb5d 	bl	8014398 <xTaskGetCurrentTaskHandle>
 8011cde:	6078      	str	r0, [r7, #4]

  return (id);
 8011ce0:	687b      	ldr	r3, [r7, #4]
}
 8011ce2:	4618      	mov	r0, r3
 8011ce4:	3708      	adds	r7, #8
 8011ce6:	46bd      	mov	sp, r7
 8011ce8:	bd80      	pop	{r7, pc}

08011cea <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8011cea:	b580      	push	{r7, lr}
 8011cec:	b084      	sub	sp, #16
 8011cee:	af00      	add	r7, sp, #0
 8011cf0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011cf2:	f3ef 8305 	mrs	r3, IPSR
 8011cf6:	60bb      	str	r3, [r7, #8]
  return(result);
 8011cf8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011cfa:	2b00      	cmp	r3, #0
 8011cfc:	d003      	beq.n	8011d06 <osDelay+0x1c>
    stat = osErrorISR;
 8011cfe:	f06f 0305 	mvn.w	r3, #5
 8011d02:	60fb      	str	r3, [r7, #12]
 8011d04:	e007      	b.n	8011d16 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8011d06:	2300      	movs	r3, #0
 8011d08:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	2b00      	cmp	r3, #0
 8011d0e:	d002      	beq.n	8011d16 <osDelay+0x2c>
      vTaskDelay(ticks);
 8011d10:	6878      	ldr	r0, [r7, #4]
 8011d12:	f001 feb3 	bl	8013a7c <vTaskDelay>
    }
  }

  return (stat);
 8011d16:	68fb      	ldr	r3, [r7, #12]
}
 8011d18:	4618      	mov	r0, r3
 8011d1a:	3710      	adds	r7, #16
 8011d1c:	46bd      	mov	sp, r7
 8011d1e:	bd80      	pop	{r7, pc}

08011d20 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8011d20:	b580      	push	{r7, lr}
 8011d22:	b088      	sub	sp, #32
 8011d24:	af00      	add	r7, sp, #0
 8011d26:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8011d28:	2300      	movs	r3, #0
 8011d2a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011d2c:	f3ef 8305 	mrs	r3, IPSR
 8011d30:	60bb      	str	r3, [r7, #8]
  return(result);
 8011d32:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8011d34:	2b00      	cmp	r3, #0
 8011d36:	d174      	bne.n	8011e22 <osMutexNew+0x102>
    if (attr != NULL) {
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	2b00      	cmp	r3, #0
 8011d3c:	d003      	beq.n	8011d46 <osMutexNew+0x26>
      type = attr->attr_bits;
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	685b      	ldr	r3, [r3, #4]
 8011d42:	61bb      	str	r3, [r7, #24]
 8011d44:	e001      	b.n	8011d4a <osMutexNew+0x2a>
    } else {
      type = 0U;
 8011d46:	2300      	movs	r3, #0
 8011d48:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8011d4a:	69bb      	ldr	r3, [r7, #24]
 8011d4c:	f003 0301 	and.w	r3, r3, #1
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	d002      	beq.n	8011d5a <osMutexNew+0x3a>
      rmtx = 1U;
 8011d54:	2301      	movs	r3, #1
 8011d56:	617b      	str	r3, [r7, #20]
 8011d58:	e001      	b.n	8011d5e <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8011d5a:	2300      	movs	r3, #0
 8011d5c:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8011d5e:	69bb      	ldr	r3, [r7, #24]
 8011d60:	f003 0308 	and.w	r3, r3, #8
 8011d64:	2b00      	cmp	r3, #0
 8011d66:	d15c      	bne.n	8011e22 <osMutexNew+0x102>
      mem = -1;
 8011d68:	f04f 33ff 	mov.w	r3, #4294967295
 8011d6c:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	d015      	beq.n	8011da0 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	689b      	ldr	r3, [r3, #8]
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	d006      	beq.n	8011d8a <osMutexNew+0x6a>
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	68db      	ldr	r3, [r3, #12]
 8011d80:	2b4f      	cmp	r3, #79	; 0x4f
 8011d82:	d902      	bls.n	8011d8a <osMutexNew+0x6a>
          mem = 1;
 8011d84:	2301      	movs	r3, #1
 8011d86:	613b      	str	r3, [r7, #16]
 8011d88:	e00c      	b.n	8011da4 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	689b      	ldr	r3, [r3, #8]
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	d108      	bne.n	8011da4 <osMutexNew+0x84>
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	68db      	ldr	r3, [r3, #12]
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	d104      	bne.n	8011da4 <osMutexNew+0x84>
            mem = 0;
 8011d9a:	2300      	movs	r3, #0
 8011d9c:	613b      	str	r3, [r7, #16]
 8011d9e:	e001      	b.n	8011da4 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8011da0:	2300      	movs	r3, #0
 8011da2:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8011da4:	693b      	ldr	r3, [r7, #16]
 8011da6:	2b01      	cmp	r3, #1
 8011da8:	d112      	bne.n	8011dd0 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8011daa:	697b      	ldr	r3, [r7, #20]
 8011dac:	2b00      	cmp	r3, #0
 8011dae:	d007      	beq.n	8011dc0 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	689b      	ldr	r3, [r3, #8]
 8011db4:	4619      	mov	r1, r3
 8011db6:	2004      	movs	r0, #4
 8011db8:	f000 fd69 	bl	801288e <xQueueCreateMutexStatic>
 8011dbc:	61f8      	str	r0, [r7, #28]
 8011dbe:	e016      	b.n	8011dee <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	689b      	ldr	r3, [r3, #8]
 8011dc4:	4619      	mov	r1, r3
 8011dc6:	2001      	movs	r0, #1
 8011dc8:	f000 fd61 	bl	801288e <xQueueCreateMutexStatic>
 8011dcc:	61f8      	str	r0, [r7, #28]
 8011dce:	e00e      	b.n	8011dee <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8011dd0:	693b      	ldr	r3, [r7, #16]
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	d10b      	bne.n	8011dee <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8011dd6:	697b      	ldr	r3, [r7, #20]
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	d004      	beq.n	8011de6 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8011ddc:	2004      	movs	r0, #4
 8011dde:	f000 fd3e 	bl	801285e <xQueueCreateMutex>
 8011de2:	61f8      	str	r0, [r7, #28]
 8011de4:	e003      	b.n	8011dee <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8011de6:	2001      	movs	r0, #1
 8011de8:	f000 fd39 	bl	801285e <xQueueCreateMutex>
 8011dec:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8011dee:	69fb      	ldr	r3, [r7, #28]
 8011df0:	2b00      	cmp	r3, #0
 8011df2:	d00c      	beq.n	8011e0e <osMutexNew+0xee>
        if (attr != NULL) {
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	2b00      	cmp	r3, #0
 8011df8:	d003      	beq.n	8011e02 <osMutexNew+0xe2>
          name = attr->name;
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	681b      	ldr	r3, [r3, #0]
 8011dfe:	60fb      	str	r3, [r7, #12]
 8011e00:	e001      	b.n	8011e06 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8011e02:	2300      	movs	r3, #0
 8011e04:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8011e06:	68f9      	ldr	r1, [r7, #12]
 8011e08:	69f8      	ldr	r0, [r7, #28]
 8011e0a:	f001 fc0d 	bl	8013628 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8011e0e:	69fb      	ldr	r3, [r7, #28]
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	d006      	beq.n	8011e22 <osMutexNew+0x102>
 8011e14:	697b      	ldr	r3, [r7, #20]
 8011e16:	2b00      	cmp	r3, #0
 8011e18:	d003      	beq.n	8011e22 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8011e1a:	69fb      	ldr	r3, [r7, #28]
 8011e1c:	f043 0301 	orr.w	r3, r3, #1
 8011e20:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8011e22:	69fb      	ldr	r3, [r7, #28]
}
 8011e24:	4618      	mov	r0, r3
 8011e26:	3720      	adds	r7, #32
 8011e28:	46bd      	mov	sp, r7
 8011e2a:	bd80      	pop	{r7, pc}

08011e2c <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8011e2c:	b580      	push	{r7, lr}
 8011e2e:	b086      	sub	sp, #24
 8011e30:	af00      	add	r7, sp, #0
 8011e32:	6078      	str	r0, [r7, #4]
 8011e34:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	f023 0301 	bic.w	r3, r3, #1
 8011e3c:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	f003 0301 	and.w	r3, r3, #1
 8011e44:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8011e46:	2300      	movs	r3, #0
 8011e48:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011e4a:	f3ef 8305 	mrs	r3, IPSR
 8011e4e:	60bb      	str	r3, [r7, #8]
  return(result);
 8011e50:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d003      	beq.n	8011e5e <osMutexAcquire+0x32>
    stat = osErrorISR;
 8011e56:	f06f 0305 	mvn.w	r3, #5
 8011e5a:	617b      	str	r3, [r7, #20]
 8011e5c:	e02c      	b.n	8011eb8 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8011e5e:	693b      	ldr	r3, [r7, #16]
 8011e60:	2b00      	cmp	r3, #0
 8011e62:	d103      	bne.n	8011e6c <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8011e64:	f06f 0303 	mvn.w	r3, #3
 8011e68:	617b      	str	r3, [r7, #20]
 8011e6a:	e025      	b.n	8011eb8 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8011e6c:	68fb      	ldr	r3, [r7, #12]
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	d011      	beq.n	8011e96 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8011e72:	6839      	ldr	r1, [r7, #0]
 8011e74:	6938      	ldr	r0, [r7, #16]
 8011e76:	f000 fd59 	bl	801292c <xQueueTakeMutexRecursive>
 8011e7a:	4603      	mov	r3, r0
 8011e7c:	2b01      	cmp	r3, #1
 8011e7e:	d01b      	beq.n	8011eb8 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8011e80:	683b      	ldr	r3, [r7, #0]
 8011e82:	2b00      	cmp	r3, #0
 8011e84:	d003      	beq.n	8011e8e <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8011e86:	f06f 0301 	mvn.w	r3, #1
 8011e8a:	617b      	str	r3, [r7, #20]
 8011e8c:	e014      	b.n	8011eb8 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8011e8e:	f06f 0302 	mvn.w	r3, #2
 8011e92:	617b      	str	r3, [r7, #20]
 8011e94:	e010      	b.n	8011eb8 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8011e96:	6839      	ldr	r1, [r7, #0]
 8011e98:	6938      	ldr	r0, [r7, #16]
 8011e9a:	f001 f8ed 	bl	8013078 <xQueueSemaphoreTake>
 8011e9e:	4603      	mov	r3, r0
 8011ea0:	2b01      	cmp	r3, #1
 8011ea2:	d009      	beq.n	8011eb8 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8011ea4:	683b      	ldr	r3, [r7, #0]
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	d003      	beq.n	8011eb2 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8011eaa:	f06f 0301 	mvn.w	r3, #1
 8011eae:	617b      	str	r3, [r7, #20]
 8011eb0:	e002      	b.n	8011eb8 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8011eb2:	f06f 0302 	mvn.w	r3, #2
 8011eb6:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8011eb8:	697b      	ldr	r3, [r7, #20]
}
 8011eba:	4618      	mov	r0, r3
 8011ebc:	3718      	adds	r7, #24
 8011ebe:	46bd      	mov	sp, r7
 8011ec0:	bd80      	pop	{r7, pc}

08011ec2 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8011ec2:	b580      	push	{r7, lr}
 8011ec4:	b086      	sub	sp, #24
 8011ec6:	af00      	add	r7, sp, #0
 8011ec8:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	f023 0301 	bic.w	r3, r3, #1
 8011ed0:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	f003 0301 	and.w	r3, r3, #1
 8011ed8:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8011eda:	2300      	movs	r3, #0
 8011edc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011ede:	f3ef 8305 	mrs	r3, IPSR
 8011ee2:	60bb      	str	r3, [r7, #8]
  return(result);
 8011ee4:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	d003      	beq.n	8011ef2 <osMutexRelease+0x30>
    stat = osErrorISR;
 8011eea:	f06f 0305 	mvn.w	r3, #5
 8011eee:	617b      	str	r3, [r7, #20]
 8011ef0:	e01f      	b.n	8011f32 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8011ef2:	693b      	ldr	r3, [r7, #16]
 8011ef4:	2b00      	cmp	r3, #0
 8011ef6:	d103      	bne.n	8011f00 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8011ef8:	f06f 0303 	mvn.w	r3, #3
 8011efc:	617b      	str	r3, [r7, #20]
 8011efe:	e018      	b.n	8011f32 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8011f00:	68fb      	ldr	r3, [r7, #12]
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	d009      	beq.n	8011f1a <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8011f06:	6938      	ldr	r0, [r7, #16]
 8011f08:	f000 fcdc 	bl	80128c4 <xQueueGiveMutexRecursive>
 8011f0c:	4603      	mov	r3, r0
 8011f0e:	2b01      	cmp	r3, #1
 8011f10:	d00f      	beq.n	8011f32 <osMutexRelease+0x70>
        stat = osErrorResource;
 8011f12:	f06f 0302 	mvn.w	r3, #2
 8011f16:	617b      	str	r3, [r7, #20]
 8011f18:	e00b      	b.n	8011f32 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8011f1a:	2300      	movs	r3, #0
 8011f1c:	2200      	movs	r2, #0
 8011f1e:	2100      	movs	r1, #0
 8011f20:	6938      	ldr	r0, [r7, #16]
 8011f22:	f000 fda3 	bl	8012a6c <xQueueGenericSend>
 8011f26:	4603      	mov	r3, r0
 8011f28:	2b01      	cmp	r3, #1
 8011f2a:	d002      	beq.n	8011f32 <osMutexRelease+0x70>
        stat = osErrorResource;
 8011f2c:	f06f 0302 	mvn.w	r3, #2
 8011f30:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8011f32:	697b      	ldr	r3, [r7, #20]
}
 8011f34:	4618      	mov	r0, r3
 8011f36:	3718      	adds	r7, #24
 8011f38:	46bd      	mov	sp, r7
 8011f3a:	bd80      	pop	{r7, pc}

08011f3c <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8011f3c:	b580      	push	{r7, lr}
 8011f3e:	b08a      	sub	sp, #40	; 0x28
 8011f40:	af02      	add	r7, sp, #8
 8011f42:	60f8      	str	r0, [r7, #12]
 8011f44:	60b9      	str	r1, [r7, #8]
 8011f46:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8011f48:	2300      	movs	r3, #0
 8011f4a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011f4c:	f3ef 8305 	mrs	r3, IPSR
 8011f50:	613b      	str	r3, [r7, #16]
  return(result);
 8011f52:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	d175      	bne.n	8012044 <osSemaphoreNew+0x108>
 8011f58:	68fb      	ldr	r3, [r7, #12]
 8011f5a:	2b00      	cmp	r3, #0
 8011f5c:	d072      	beq.n	8012044 <osSemaphoreNew+0x108>
 8011f5e:	68ba      	ldr	r2, [r7, #8]
 8011f60:	68fb      	ldr	r3, [r7, #12]
 8011f62:	429a      	cmp	r2, r3
 8011f64:	d86e      	bhi.n	8012044 <osSemaphoreNew+0x108>
    mem = -1;
 8011f66:	f04f 33ff 	mov.w	r3, #4294967295
 8011f6a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	d015      	beq.n	8011f9e <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	689b      	ldr	r3, [r3, #8]
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	d006      	beq.n	8011f88 <osSemaphoreNew+0x4c>
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	68db      	ldr	r3, [r3, #12]
 8011f7e:	2b4f      	cmp	r3, #79	; 0x4f
 8011f80:	d902      	bls.n	8011f88 <osSemaphoreNew+0x4c>
        mem = 1;
 8011f82:	2301      	movs	r3, #1
 8011f84:	61bb      	str	r3, [r7, #24]
 8011f86:	e00c      	b.n	8011fa2 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	689b      	ldr	r3, [r3, #8]
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	d108      	bne.n	8011fa2 <osSemaphoreNew+0x66>
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	68db      	ldr	r3, [r3, #12]
 8011f94:	2b00      	cmp	r3, #0
 8011f96:	d104      	bne.n	8011fa2 <osSemaphoreNew+0x66>
          mem = 0;
 8011f98:	2300      	movs	r3, #0
 8011f9a:	61bb      	str	r3, [r7, #24]
 8011f9c:	e001      	b.n	8011fa2 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8011f9e:	2300      	movs	r3, #0
 8011fa0:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8011fa2:	69bb      	ldr	r3, [r7, #24]
 8011fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011fa8:	d04c      	beq.n	8012044 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8011faa:	68fb      	ldr	r3, [r7, #12]
 8011fac:	2b01      	cmp	r3, #1
 8011fae:	d128      	bne.n	8012002 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8011fb0:	69bb      	ldr	r3, [r7, #24]
 8011fb2:	2b01      	cmp	r3, #1
 8011fb4:	d10a      	bne.n	8011fcc <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	689b      	ldr	r3, [r3, #8]
 8011fba:	2203      	movs	r2, #3
 8011fbc:	9200      	str	r2, [sp, #0]
 8011fbe:	2200      	movs	r2, #0
 8011fc0:	2100      	movs	r1, #0
 8011fc2:	2001      	movs	r0, #1
 8011fc4:	f000 fb5c 	bl	8012680 <xQueueGenericCreateStatic>
 8011fc8:	61f8      	str	r0, [r7, #28]
 8011fca:	e005      	b.n	8011fd8 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8011fcc:	2203      	movs	r2, #3
 8011fce:	2100      	movs	r1, #0
 8011fd0:	2001      	movs	r0, #1
 8011fd2:	f000 fbcd 	bl	8012770 <xQueueGenericCreate>
 8011fd6:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8011fd8:	69fb      	ldr	r3, [r7, #28]
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	d022      	beq.n	8012024 <osSemaphoreNew+0xe8>
 8011fde:	68bb      	ldr	r3, [r7, #8]
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	d01f      	beq.n	8012024 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8011fe4:	2300      	movs	r3, #0
 8011fe6:	2200      	movs	r2, #0
 8011fe8:	2100      	movs	r1, #0
 8011fea:	69f8      	ldr	r0, [r7, #28]
 8011fec:	f000 fd3e 	bl	8012a6c <xQueueGenericSend>
 8011ff0:	4603      	mov	r3, r0
 8011ff2:	2b01      	cmp	r3, #1
 8011ff4:	d016      	beq.n	8012024 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8011ff6:	69f8      	ldr	r0, [r7, #28]
 8011ff8:	f001 f9ca 	bl	8013390 <vQueueDelete>
            hSemaphore = NULL;
 8011ffc:	2300      	movs	r3, #0
 8011ffe:	61fb      	str	r3, [r7, #28]
 8012000:	e010      	b.n	8012024 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8012002:	69bb      	ldr	r3, [r7, #24]
 8012004:	2b01      	cmp	r3, #1
 8012006:	d108      	bne.n	801201a <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	689b      	ldr	r3, [r3, #8]
 801200c:	461a      	mov	r2, r3
 801200e:	68b9      	ldr	r1, [r7, #8]
 8012010:	68f8      	ldr	r0, [r7, #12]
 8012012:	f000 fcc1 	bl	8012998 <xQueueCreateCountingSemaphoreStatic>
 8012016:	61f8      	str	r0, [r7, #28]
 8012018:	e004      	b.n	8012024 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 801201a:	68b9      	ldr	r1, [r7, #8]
 801201c:	68f8      	ldr	r0, [r7, #12]
 801201e:	f000 fcf2 	bl	8012a06 <xQueueCreateCountingSemaphore>
 8012022:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8012024:	69fb      	ldr	r3, [r7, #28]
 8012026:	2b00      	cmp	r3, #0
 8012028:	d00c      	beq.n	8012044 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	2b00      	cmp	r3, #0
 801202e:	d003      	beq.n	8012038 <osSemaphoreNew+0xfc>
          name = attr->name;
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	681b      	ldr	r3, [r3, #0]
 8012034:	617b      	str	r3, [r7, #20]
 8012036:	e001      	b.n	801203c <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8012038:	2300      	movs	r3, #0
 801203a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 801203c:	6979      	ldr	r1, [r7, #20]
 801203e:	69f8      	ldr	r0, [r7, #28]
 8012040:	f001 faf2 	bl	8013628 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8012044:	69fb      	ldr	r3, [r7, #28]
}
 8012046:	4618      	mov	r0, r3
 8012048:	3720      	adds	r7, #32
 801204a:	46bd      	mov	sp, r7
 801204c:	bd80      	pop	{r7, pc}
	...

08012050 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8012050:	b580      	push	{r7, lr}
 8012052:	b086      	sub	sp, #24
 8012054:	af00      	add	r7, sp, #0
 8012056:	6078      	str	r0, [r7, #4]
 8012058:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 801205e:	2300      	movs	r3, #0
 8012060:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8012062:	693b      	ldr	r3, [r7, #16]
 8012064:	2b00      	cmp	r3, #0
 8012066:	d103      	bne.n	8012070 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8012068:	f06f 0303 	mvn.w	r3, #3
 801206c:	617b      	str	r3, [r7, #20]
 801206e:	e039      	b.n	80120e4 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012070:	f3ef 8305 	mrs	r3, IPSR
 8012074:	60fb      	str	r3, [r7, #12]
  return(result);
 8012076:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8012078:	2b00      	cmp	r3, #0
 801207a:	d022      	beq.n	80120c2 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 801207c:	683b      	ldr	r3, [r7, #0]
 801207e:	2b00      	cmp	r3, #0
 8012080:	d003      	beq.n	801208a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8012082:	f06f 0303 	mvn.w	r3, #3
 8012086:	617b      	str	r3, [r7, #20]
 8012088:	e02c      	b.n	80120e4 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 801208a:	2300      	movs	r3, #0
 801208c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 801208e:	f107 0308 	add.w	r3, r7, #8
 8012092:	461a      	mov	r2, r3
 8012094:	2100      	movs	r1, #0
 8012096:	6938      	ldr	r0, [r7, #16]
 8012098:	f001 f8fa 	bl	8013290 <xQueueReceiveFromISR>
 801209c:	4603      	mov	r3, r0
 801209e:	2b01      	cmp	r3, #1
 80120a0:	d003      	beq.n	80120aa <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 80120a2:	f06f 0302 	mvn.w	r3, #2
 80120a6:	617b      	str	r3, [r7, #20]
 80120a8:	e01c      	b.n	80120e4 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 80120aa:	68bb      	ldr	r3, [r7, #8]
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	d019      	beq.n	80120e4 <osSemaphoreAcquire+0x94>
 80120b0:	4b0f      	ldr	r3, [pc, #60]	; (80120f0 <osSemaphoreAcquire+0xa0>)
 80120b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80120b6:	601a      	str	r2, [r3, #0]
 80120b8:	f3bf 8f4f 	dsb	sy
 80120bc:	f3bf 8f6f 	isb	sy
 80120c0:	e010      	b.n	80120e4 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80120c2:	6839      	ldr	r1, [r7, #0]
 80120c4:	6938      	ldr	r0, [r7, #16]
 80120c6:	f000 ffd7 	bl	8013078 <xQueueSemaphoreTake>
 80120ca:	4603      	mov	r3, r0
 80120cc:	2b01      	cmp	r3, #1
 80120ce:	d009      	beq.n	80120e4 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80120d0:	683b      	ldr	r3, [r7, #0]
 80120d2:	2b00      	cmp	r3, #0
 80120d4:	d003      	beq.n	80120de <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80120d6:	f06f 0301 	mvn.w	r3, #1
 80120da:	617b      	str	r3, [r7, #20]
 80120dc:	e002      	b.n	80120e4 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80120de:	f06f 0302 	mvn.w	r3, #2
 80120e2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80120e4:	697b      	ldr	r3, [r7, #20]
}
 80120e6:	4618      	mov	r0, r3
 80120e8:	3718      	adds	r7, #24
 80120ea:	46bd      	mov	sp, r7
 80120ec:	bd80      	pop	{r7, pc}
 80120ee:	bf00      	nop
 80120f0:	e000ed04 	.word	0xe000ed04

080120f4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80120f4:	b580      	push	{r7, lr}
 80120f6:	b086      	sub	sp, #24
 80120f8:	af00      	add	r7, sp, #0
 80120fa:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8012100:	2300      	movs	r3, #0
 8012102:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8012104:	693b      	ldr	r3, [r7, #16]
 8012106:	2b00      	cmp	r3, #0
 8012108:	d103      	bne.n	8012112 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 801210a:	f06f 0303 	mvn.w	r3, #3
 801210e:	617b      	str	r3, [r7, #20]
 8012110:	e02c      	b.n	801216c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012112:	f3ef 8305 	mrs	r3, IPSR
 8012116:	60fb      	str	r3, [r7, #12]
  return(result);
 8012118:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 801211a:	2b00      	cmp	r3, #0
 801211c:	d01a      	beq.n	8012154 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 801211e:	2300      	movs	r3, #0
 8012120:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8012122:	f107 0308 	add.w	r3, r7, #8
 8012126:	4619      	mov	r1, r3
 8012128:	6938      	ldr	r0, [r7, #16]
 801212a:	f000 fe38 	bl	8012d9e <xQueueGiveFromISR>
 801212e:	4603      	mov	r3, r0
 8012130:	2b01      	cmp	r3, #1
 8012132:	d003      	beq.n	801213c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8012134:	f06f 0302 	mvn.w	r3, #2
 8012138:	617b      	str	r3, [r7, #20]
 801213a:	e017      	b.n	801216c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 801213c:	68bb      	ldr	r3, [r7, #8]
 801213e:	2b00      	cmp	r3, #0
 8012140:	d014      	beq.n	801216c <osSemaphoreRelease+0x78>
 8012142:	4b0d      	ldr	r3, [pc, #52]	; (8012178 <osSemaphoreRelease+0x84>)
 8012144:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012148:	601a      	str	r2, [r3, #0]
 801214a:	f3bf 8f4f 	dsb	sy
 801214e:	f3bf 8f6f 	isb	sy
 8012152:	e00b      	b.n	801216c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8012154:	2300      	movs	r3, #0
 8012156:	2200      	movs	r2, #0
 8012158:	2100      	movs	r1, #0
 801215a:	6938      	ldr	r0, [r7, #16]
 801215c:	f000 fc86 	bl	8012a6c <xQueueGenericSend>
 8012160:	4603      	mov	r3, r0
 8012162:	2b01      	cmp	r3, #1
 8012164:	d002      	beq.n	801216c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8012166:	f06f 0302 	mvn.w	r3, #2
 801216a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 801216c:	697b      	ldr	r3, [r7, #20]
}
 801216e:	4618      	mov	r0, r3
 8012170:	3718      	adds	r7, #24
 8012172:	46bd      	mov	sp, r7
 8012174:	bd80      	pop	{r7, pc}
 8012176:	bf00      	nop
 8012178:	e000ed04 	.word	0xe000ed04

0801217c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 801217c:	b580      	push	{r7, lr}
 801217e:	b08a      	sub	sp, #40	; 0x28
 8012180:	af02      	add	r7, sp, #8
 8012182:	60f8      	str	r0, [r7, #12]
 8012184:	60b9      	str	r1, [r7, #8]
 8012186:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8012188:	2300      	movs	r3, #0
 801218a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801218c:	f3ef 8305 	mrs	r3, IPSR
 8012190:	613b      	str	r3, [r7, #16]
  return(result);
 8012192:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8012194:	2b00      	cmp	r3, #0
 8012196:	d15f      	bne.n	8012258 <osMessageQueueNew+0xdc>
 8012198:	68fb      	ldr	r3, [r7, #12]
 801219a:	2b00      	cmp	r3, #0
 801219c:	d05c      	beq.n	8012258 <osMessageQueueNew+0xdc>
 801219e:	68bb      	ldr	r3, [r7, #8]
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	d059      	beq.n	8012258 <osMessageQueueNew+0xdc>
    mem = -1;
 80121a4:	f04f 33ff 	mov.w	r3, #4294967295
 80121a8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	d029      	beq.n	8012204 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	689b      	ldr	r3, [r3, #8]
 80121b4:	2b00      	cmp	r3, #0
 80121b6:	d012      	beq.n	80121de <osMessageQueueNew+0x62>
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	68db      	ldr	r3, [r3, #12]
 80121bc:	2b4f      	cmp	r3, #79	; 0x4f
 80121be:	d90e      	bls.n	80121de <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80121c4:	2b00      	cmp	r3, #0
 80121c6:	d00a      	beq.n	80121de <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	695a      	ldr	r2, [r3, #20]
 80121cc:	68fb      	ldr	r3, [r7, #12]
 80121ce:	68b9      	ldr	r1, [r7, #8]
 80121d0:	fb01 f303 	mul.w	r3, r1, r3
 80121d4:	429a      	cmp	r2, r3
 80121d6:	d302      	bcc.n	80121de <osMessageQueueNew+0x62>
        mem = 1;
 80121d8:	2301      	movs	r3, #1
 80121da:	61bb      	str	r3, [r7, #24]
 80121dc:	e014      	b.n	8012208 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	689b      	ldr	r3, [r3, #8]
 80121e2:	2b00      	cmp	r3, #0
 80121e4:	d110      	bne.n	8012208 <osMessageQueueNew+0x8c>
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	68db      	ldr	r3, [r3, #12]
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	d10c      	bne.n	8012208 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80121f2:	2b00      	cmp	r3, #0
 80121f4:	d108      	bne.n	8012208 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	695b      	ldr	r3, [r3, #20]
 80121fa:	2b00      	cmp	r3, #0
 80121fc:	d104      	bne.n	8012208 <osMessageQueueNew+0x8c>
          mem = 0;
 80121fe:	2300      	movs	r3, #0
 8012200:	61bb      	str	r3, [r7, #24]
 8012202:	e001      	b.n	8012208 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8012204:	2300      	movs	r3, #0
 8012206:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8012208:	69bb      	ldr	r3, [r7, #24]
 801220a:	2b01      	cmp	r3, #1
 801220c:	d10b      	bne.n	8012226 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	691a      	ldr	r2, [r3, #16]
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	689b      	ldr	r3, [r3, #8]
 8012216:	2100      	movs	r1, #0
 8012218:	9100      	str	r1, [sp, #0]
 801221a:	68b9      	ldr	r1, [r7, #8]
 801221c:	68f8      	ldr	r0, [r7, #12]
 801221e:	f000 fa2f 	bl	8012680 <xQueueGenericCreateStatic>
 8012222:	61f8      	str	r0, [r7, #28]
 8012224:	e008      	b.n	8012238 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8012226:	69bb      	ldr	r3, [r7, #24]
 8012228:	2b00      	cmp	r3, #0
 801222a:	d105      	bne.n	8012238 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 801222c:	2200      	movs	r2, #0
 801222e:	68b9      	ldr	r1, [r7, #8]
 8012230:	68f8      	ldr	r0, [r7, #12]
 8012232:	f000 fa9d 	bl	8012770 <xQueueGenericCreate>
 8012236:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8012238:	69fb      	ldr	r3, [r7, #28]
 801223a:	2b00      	cmp	r3, #0
 801223c:	d00c      	beq.n	8012258 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	2b00      	cmp	r3, #0
 8012242:	d003      	beq.n	801224c <osMessageQueueNew+0xd0>
        name = attr->name;
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	681b      	ldr	r3, [r3, #0]
 8012248:	617b      	str	r3, [r7, #20]
 801224a:	e001      	b.n	8012250 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 801224c:	2300      	movs	r3, #0
 801224e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8012250:	6979      	ldr	r1, [r7, #20]
 8012252:	69f8      	ldr	r0, [r7, #28]
 8012254:	f001 f9e8 	bl	8013628 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8012258:	69fb      	ldr	r3, [r7, #28]
}
 801225a:	4618      	mov	r0, r3
 801225c:	3720      	adds	r7, #32
 801225e:	46bd      	mov	sp, r7
 8012260:	bd80      	pop	{r7, pc}
	...

08012264 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8012264:	b580      	push	{r7, lr}
 8012266:	b088      	sub	sp, #32
 8012268:	af00      	add	r7, sp, #0
 801226a:	60f8      	str	r0, [r7, #12]
 801226c:	60b9      	str	r1, [r7, #8]
 801226e:	603b      	str	r3, [r7, #0]
 8012270:	4613      	mov	r3, r2
 8012272:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8012274:	68fb      	ldr	r3, [r7, #12]
 8012276:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8012278:	2300      	movs	r3, #0
 801227a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801227c:	f3ef 8305 	mrs	r3, IPSR
 8012280:	617b      	str	r3, [r7, #20]
  return(result);
 8012282:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8012284:	2b00      	cmp	r3, #0
 8012286:	d028      	beq.n	80122da <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012288:	69bb      	ldr	r3, [r7, #24]
 801228a:	2b00      	cmp	r3, #0
 801228c:	d005      	beq.n	801229a <osMessageQueuePut+0x36>
 801228e:	68bb      	ldr	r3, [r7, #8]
 8012290:	2b00      	cmp	r3, #0
 8012292:	d002      	beq.n	801229a <osMessageQueuePut+0x36>
 8012294:	683b      	ldr	r3, [r7, #0]
 8012296:	2b00      	cmp	r3, #0
 8012298:	d003      	beq.n	80122a2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 801229a:	f06f 0303 	mvn.w	r3, #3
 801229e:	61fb      	str	r3, [r7, #28]
 80122a0:	e038      	b.n	8012314 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80122a2:	2300      	movs	r3, #0
 80122a4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80122a6:	f107 0210 	add.w	r2, r7, #16
 80122aa:	2300      	movs	r3, #0
 80122ac:	68b9      	ldr	r1, [r7, #8]
 80122ae:	69b8      	ldr	r0, [r7, #24]
 80122b0:	f000 fcda 	bl	8012c68 <xQueueGenericSendFromISR>
 80122b4:	4603      	mov	r3, r0
 80122b6:	2b01      	cmp	r3, #1
 80122b8:	d003      	beq.n	80122c2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80122ba:	f06f 0302 	mvn.w	r3, #2
 80122be:	61fb      	str	r3, [r7, #28]
 80122c0:	e028      	b.n	8012314 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80122c2:	693b      	ldr	r3, [r7, #16]
 80122c4:	2b00      	cmp	r3, #0
 80122c6:	d025      	beq.n	8012314 <osMessageQueuePut+0xb0>
 80122c8:	4b15      	ldr	r3, [pc, #84]	; (8012320 <osMessageQueuePut+0xbc>)
 80122ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80122ce:	601a      	str	r2, [r3, #0]
 80122d0:	f3bf 8f4f 	dsb	sy
 80122d4:	f3bf 8f6f 	isb	sy
 80122d8:	e01c      	b.n	8012314 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80122da:	69bb      	ldr	r3, [r7, #24]
 80122dc:	2b00      	cmp	r3, #0
 80122de:	d002      	beq.n	80122e6 <osMessageQueuePut+0x82>
 80122e0:	68bb      	ldr	r3, [r7, #8]
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	d103      	bne.n	80122ee <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80122e6:	f06f 0303 	mvn.w	r3, #3
 80122ea:	61fb      	str	r3, [r7, #28]
 80122ec:	e012      	b.n	8012314 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80122ee:	2300      	movs	r3, #0
 80122f0:	683a      	ldr	r2, [r7, #0]
 80122f2:	68b9      	ldr	r1, [r7, #8]
 80122f4:	69b8      	ldr	r0, [r7, #24]
 80122f6:	f000 fbb9 	bl	8012a6c <xQueueGenericSend>
 80122fa:	4603      	mov	r3, r0
 80122fc:	2b01      	cmp	r3, #1
 80122fe:	d009      	beq.n	8012314 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8012300:	683b      	ldr	r3, [r7, #0]
 8012302:	2b00      	cmp	r3, #0
 8012304:	d003      	beq.n	801230e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8012306:	f06f 0301 	mvn.w	r3, #1
 801230a:	61fb      	str	r3, [r7, #28]
 801230c:	e002      	b.n	8012314 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 801230e:	f06f 0302 	mvn.w	r3, #2
 8012312:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8012314:	69fb      	ldr	r3, [r7, #28]
}
 8012316:	4618      	mov	r0, r3
 8012318:	3720      	adds	r7, #32
 801231a:	46bd      	mov	sp, r7
 801231c:	bd80      	pop	{r7, pc}
 801231e:	bf00      	nop
 8012320:	e000ed04 	.word	0xe000ed04

08012324 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8012324:	b580      	push	{r7, lr}
 8012326:	b088      	sub	sp, #32
 8012328:	af00      	add	r7, sp, #0
 801232a:	60f8      	str	r0, [r7, #12]
 801232c:	60b9      	str	r1, [r7, #8]
 801232e:	607a      	str	r2, [r7, #4]
 8012330:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8012332:	68fb      	ldr	r3, [r7, #12]
 8012334:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8012336:	2300      	movs	r3, #0
 8012338:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801233a:	f3ef 8305 	mrs	r3, IPSR
 801233e:	617b      	str	r3, [r7, #20]
  return(result);
 8012340:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8012342:	2b00      	cmp	r3, #0
 8012344:	d028      	beq.n	8012398 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012346:	69bb      	ldr	r3, [r7, #24]
 8012348:	2b00      	cmp	r3, #0
 801234a:	d005      	beq.n	8012358 <osMessageQueueGet+0x34>
 801234c:	68bb      	ldr	r3, [r7, #8]
 801234e:	2b00      	cmp	r3, #0
 8012350:	d002      	beq.n	8012358 <osMessageQueueGet+0x34>
 8012352:	683b      	ldr	r3, [r7, #0]
 8012354:	2b00      	cmp	r3, #0
 8012356:	d003      	beq.n	8012360 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8012358:	f06f 0303 	mvn.w	r3, #3
 801235c:	61fb      	str	r3, [r7, #28]
 801235e:	e037      	b.n	80123d0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8012360:	2300      	movs	r3, #0
 8012362:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8012364:	f107 0310 	add.w	r3, r7, #16
 8012368:	461a      	mov	r2, r3
 801236a:	68b9      	ldr	r1, [r7, #8]
 801236c:	69b8      	ldr	r0, [r7, #24]
 801236e:	f000 ff8f 	bl	8013290 <xQueueReceiveFromISR>
 8012372:	4603      	mov	r3, r0
 8012374:	2b01      	cmp	r3, #1
 8012376:	d003      	beq.n	8012380 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8012378:	f06f 0302 	mvn.w	r3, #2
 801237c:	61fb      	str	r3, [r7, #28]
 801237e:	e027      	b.n	80123d0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8012380:	693b      	ldr	r3, [r7, #16]
 8012382:	2b00      	cmp	r3, #0
 8012384:	d024      	beq.n	80123d0 <osMessageQueueGet+0xac>
 8012386:	4b15      	ldr	r3, [pc, #84]	; (80123dc <osMessageQueueGet+0xb8>)
 8012388:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801238c:	601a      	str	r2, [r3, #0]
 801238e:	f3bf 8f4f 	dsb	sy
 8012392:	f3bf 8f6f 	isb	sy
 8012396:	e01b      	b.n	80123d0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8012398:	69bb      	ldr	r3, [r7, #24]
 801239a:	2b00      	cmp	r3, #0
 801239c:	d002      	beq.n	80123a4 <osMessageQueueGet+0x80>
 801239e:	68bb      	ldr	r3, [r7, #8]
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	d103      	bne.n	80123ac <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80123a4:	f06f 0303 	mvn.w	r3, #3
 80123a8:	61fb      	str	r3, [r7, #28]
 80123aa:	e011      	b.n	80123d0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80123ac:	683a      	ldr	r2, [r7, #0]
 80123ae:	68b9      	ldr	r1, [r7, #8]
 80123b0:	69b8      	ldr	r0, [r7, #24]
 80123b2:	f000 fd81 	bl	8012eb8 <xQueueReceive>
 80123b6:	4603      	mov	r3, r0
 80123b8:	2b01      	cmp	r3, #1
 80123ba:	d009      	beq.n	80123d0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80123bc:	683b      	ldr	r3, [r7, #0]
 80123be:	2b00      	cmp	r3, #0
 80123c0:	d003      	beq.n	80123ca <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80123c2:	f06f 0301 	mvn.w	r3, #1
 80123c6:	61fb      	str	r3, [r7, #28]
 80123c8:	e002      	b.n	80123d0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80123ca:	f06f 0302 	mvn.w	r3, #2
 80123ce:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80123d0:	69fb      	ldr	r3, [r7, #28]
}
 80123d2:	4618      	mov	r0, r3
 80123d4:	3720      	adds	r7, #32
 80123d6:	46bd      	mov	sp, r7
 80123d8:	bd80      	pop	{r7, pc}
 80123da:	bf00      	nop
 80123dc:	e000ed04 	.word	0xe000ed04

080123e0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80123e0:	b480      	push	{r7}
 80123e2:	b085      	sub	sp, #20
 80123e4:	af00      	add	r7, sp, #0
 80123e6:	60f8      	str	r0, [r7, #12]
 80123e8:	60b9      	str	r1, [r7, #8]
 80123ea:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80123ec:	68fb      	ldr	r3, [r7, #12]
 80123ee:	4a07      	ldr	r2, [pc, #28]	; (801240c <vApplicationGetIdleTaskMemory+0x2c>)
 80123f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80123f2:	68bb      	ldr	r3, [r7, #8]
 80123f4:	4a06      	ldr	r2, [pc, #24]	; (8012410 <vApplicationGetIdleTaskMemory+0x30>)
 80123f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80123fe:	601a      	str	r2, [r3, #0]
}
 8012400:	bf00      	nop
 8012402:	3714      	adds	r7, #20
 8012404:	46bd      	mov	sp, r7
 8012406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801240a:	4770      	bx	lr
 801240c:	20000080 	.word	0x20000080
 8012410:	200000dc 	.word	0x200000dc

08012414 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8012414:	b480      	push	{r7}
 8012416:	b085      	sub	sp, #20
 8012418:	af00      	add	r7, sp, #0
 801241a:	60f8      	str	r0, [r7, #12]
 801241c:	60b9      	str	r1, [r7, #8]
 801241e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8012420:	68fb      	ldr	r3, [r7, #12]
 8012422:	4a07      	ldr	r2, [pc, #28]	; (8012440 <vApplicationGetTimerTaskMemory+0x2c>)
 8012424:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8012426:	68bb      	ldr	r3, [r7, #8]
 8012428:	4a06      	ldr	r2, [pc, #24]	; (8012444 <vApplicationGetTimerTaskMemory+0x30>)
 801242a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012432:	601a      	str	r2, [r3, #0]
}
 8012434:	bf00      	nop
 8012436:	3714      	adds	r7, #20
 8012438:	46bd      	mov	sp, r7
 801243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801243e:	4770      	bx	lr
 8012440:	200010dc 	.word	0x200010dc
 8012444:	20001138 	.word	0x20001138

08012448 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8012448:	b480      	push	{r7}
 801244a:	b083      	sub	sp, #12
 801244c:	af00      	add	r7, sp, #0
 801244e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	f103 0208 	add.w	r2, r3, #8
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	f04f 32ff 	mov.w	r2, #4294967295
 8012460:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	f103 0208 	add.w	r2, r3, #8
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	f103 0208 	add.w	r2, r3, #8
 8012472:	687b      	ldr	r3, [r7, #4]
 8012474:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	2200      	movs	r2, #0
 801247a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801247c:	bf00      	nop
 801247e:	370c      	adds	r7, #12
 8012480:	46bd      	mov	sp, r7
 8012482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012486:	4770      	bx	lr

08012488 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8012488:	b480      	push	{r7}
 801248a:	b083      	sub	sp, #12
 801248c:	af00      	add	r7, sp, #0
 801248e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	2200      	movs	r2, #0
 8012494:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8012496:	bf00      	nop
 8012498:	370c      	adds	r7, #12
 801249a:	46bd      	mov	sp, r7
 801249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124a0:	4770      	bx	lr

080124a2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80124a2:	b480      	push	{r7}
 80124a4:	b085      	sub	sp, #20
 80124a6:	af00      	add	r7, sp, #0
 80124a8:	6078      	str	r0, [r7, #4]
 80124aa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	685b      	ldr	r3, [r3, #4]
 80124b0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80124b2:	683b      	ldr	r3, [r7, #0]
 80124b4:	68fa      	ldr	r2, [r7, #12]
 80124b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80124b8:	68fb      	ldr	r3, [r7, #12]
 80124ba:	689a      	ldr	r2, [r3, #8]
 80124bc:	683b      	ldr	r3, [r7, #0]
 80124be:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80124c0:	68fb      	ldr	r3, [r7, #12]
 80124c2:	689b      	ldr	r3, [r3, #8]
 80124c4:	683a      	ldr	r2, [r7, #0]
 80124c6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80124c8:	68fb      	ldr	r3, [r7, #12]
 80124ca:	683a      	ldr	r2, [r7, #0]
 80124cc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80124ce:	683b      	ldr	r3, [r7, #0]
 80124d0:	687a      	ldr	r2, [r7, #4]
 80124d2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	681b      	ldr	r3, [r3, #0]
 80124d8:	1c5a      	adds	r2, r3, #1
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	601a      	str	r2, [r3, #0]
}
 80124de:	bf00      	nop
 80124e0:	3714      	adds	r7, #20
 80124e2:	46bd      	mov	sp, r7
 80124e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124e8:	4770      	bx	lr

080124ea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80124ea:	b480      	push	{r7}
 80124ec:	b085      	sub	sp, #20
 80124ee:	af00      	add	r7, sp, #0
 80124f0:	6078      	str	r0, [r7, #4]
 80124f2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80124f4:	683b      	ldr	r3, [r7, #0]
 80124f6:	681b      	ldr	r3, [r3, #0]
 80124f8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80124fa:	68bb      	ldr	r3, [r7, #8]
 80124fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012500:	d103      	bne.n	801250a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	691b      	ldr	r3, [r3, #16]
 8012506:	60fb      	str	r3, [r7, #12]
 8012508:	e00c      	b.n	8012524 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	3308      	adds	r3, #8
 801250e:	60fb      	str	r3, [r7, #12]
 8012510:	e002      	b.n	8012518 <vListInsert+0x2e>
 8012512:	68fb      	ldr	r3, [r7, #12]
 8012514:	685b      	ldr	r3, [r3, #4]
 8012516:	60fb      	str	r3, [r7, #12]
 8012518:	68fb      	ldr	r3, [r7, #12]
 801251a:	685b      	ldr	r3, [r3, #4]
 801251c:	681b      	ldr	r3, [r3, #0]
 801251e:	68ba      	ldr	r2, [r7, #8]
 8012520:	429a      	cmp	r2, r3
 8012522:	d2f6      	bcs.n	8012512 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8012524:	68fb      	ldr	r3, [r7, #12]
 8012526:	685a      	ldr	r2, [r3, #4]
 8012528:	683b      	ldr	r3, [r7, #0]
 801252a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801252c:	683b      	ldr	r3, [r7, #0]
 801252e:	685b      	ldr	r3, [r3, #4]
 8012530:	683a      	ldr	r2, [r7, #0]
 8012532:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8012534:	683b      	ldr	r3, [r7, #0]
 8012536:	68fa      	ldr	r2, [r7, #12]
 8012538:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801253a:	68fb      	ldr	r3, [r7, #12]
 801253c:	683a      	ldr	r2, [r7, #0]
 801253e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8012540:	683b      	ldr	r3, [r7, #0]
 8012542:	687a      	ldr	r2, [r7, #4]
 8012544:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	681b      	ldr	r3, [r3, #0]
 801254a:	1c5a      	adds	r2, r3, #1
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	601a      	str	r2, [r3, #0]
}
 8012550:	bf00      	nop
 8012552:	3714      	adds	r7, #20
 8012554:	46bd      	mov	sp, r7
 8012556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801255a:	4770      	bx	lr

0801255c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801255c:	b480      	push	{r7}
 801255e:	b085      	sub	sp, #20
 8012560:	af00      	add	r7, sp, #0
 8012562:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	691b      	ldr	r3, [r3, #16]
 8012568:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	685b      	ldr	r3, [r3, #4]
 801256e:	687a      	ldr	r2, [r7, #4]
 8012570:	6892      	ldr	r2, [r2, #8]
 8012572:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	689b      	ldr	r3, [r3, #8]
 8012578:	687a      	ldr	r2, [r7, #4]
 801257a:	6852      	ldr	r2, [r2, #4]
 801257c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801257e:	68fb      	ldr	r3, [r7, #12]
 8012580:	685b      	ldr	r3, [r3, #4]
 8012582:	687a      	ldr	r2, [r7, #4]
 8012584:	429a      	cmp	r2, r3
 8012586:	d103      	bne.n	8012590 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	689a      	ldr	r2, [r3, #8]
 801258c:	68fb      	ldr	r3, [r7, #12]
 801258e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	2200      	movs	r2, #0
 8012594:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8012596:	68fb      	ldr	r3, [r7, #12]
 8012598:	681b      	ldr	r3, [r3, #0]
 801259a:	1e5a      	subs	r2, r3, #1
 801259c:	68fb      	ldr	r3, [r7, #12]
 801259e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80125a0:	68fb      	ldr	r3, [r7, #12]
 80125a2:	681b      	ldr	r3, [r3, #0]
}
 80125a4:	4618      	mov	r0, r3
 80125a6:	3714      	adds	r7, #20
 80125a8:	46bd      	mov	sp, r7
 80125aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125ae:	4770      	bx	lr

080125b0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80125b0:	b580      	push	{r7, lr}
 80125b2:	b084      	sub	sp, #16
 80125b4:	af00      	add	r7, sp, #0
 80125b6:	6078      	str	r0, [r7, #4]
 80125b8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80125be:	68fb      	ldr	r3, [r7, #12]
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d10a      	bne.n	80125da <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80125c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125c8:	f383 8811 	msr	BASEPRI, r3
 80125cc:	f3bf 8f6f 	isb	sy
 80125d0:	f3bf 8f4f 	dsb	sy
 80125d4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80125d6:	bf00      	nop
 80125d8:	e7fe      	b.n	80125d8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80125da:	f002 ff7b 	bl	80154d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80125de:	68fb      	ldr	r3, [r7, #12]
 80125e0:	681a      	ldr	r2, [r3, #0]
 80125e2:	68fb      	ldr	r3, [r7, #12]
 80125e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80125e6:	68f9      	ldr	r1, [r7, #12]
 80125e8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80125ea:	fb01 f303 	mul.w	r3, r1, r3
 80125ee:	441a      	add	r2, r3
 80125f0:	68fb      	ldr	r3, [r7, #12]
 80125f2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80125f4:	68fb      	ldr	r3, [r7, #12]
 80125f6:	2200      	movs	r2, #0
 80125f8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80125fa:	68fb      	ldr	r3, [r7, #12]
 80125fc:	681a      	ldr	r2, [r3, #0]
 80125fe:	68fb      	ldr	r3, [r7, #12]
 8012600:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012602:	68fb      	ldr	r3, [r7, #12]
 8012604:	681a      	ldr	r2, [r3, #0]
 8012606:	68fb      	ldr	r3, [r7, #12]
 8012608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801260a:	3b01      	subs	r3, #1
 801260c:	68f9      	ldr	r1, [r7, #12]
 801260e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8012610:	fb01 f303 	mul.w	r3, r1, r3
 8012614:	441a      	add	r2, r3
 8012616:	68fb      	ldr	r3, [r7, #12]
 8012618:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801261a:	68fb      	ldr	r3, [r7, #12]
 801261c:	22ff      	movs	r2, #255	; 0xff
 801261e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8012622:	68fb      	ldr	r3, [r7, #12]
 8012624:	22ff      	movs	r2, #255	; 0xff
 8012626:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801262a:	683b      	ldr	r3, [r7, #0]
 801262c:	2b00      	cmp	r3, #0
 801262e:	d114      	bne.n	801265a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012630:	68fb      	ldr	r3, [r7, #12]
 8012632:	691b      	ldr	r3, [r3, #16]
 8012634:	2b00      	cmp	r3, #0
 8012636:	d01a      	beq.n	801266e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012638:	68fb      	ldr	r3, [r7, #12]
 801263a:	3310      	adds	r3, #16
 801263c:	4618      	mov	r0, r3
 801263e:	f001 fced 	bl	801401c <xTaskRemoveFromEventList>
 8012642:	4603      	mov	r3, r0
 8012644:	2b00      	cmp	r3, #0
 8012646:	d012      	beq.n	801266e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8012648:	4b0c      	ldr	r3, [pc, #48]	; (801267c <xQueueGenericReset+0xcc>)
 801264a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801264e:	601a      	str	r2, [r3, #0]
 8012650:	f3bf 8f4f 	dsb	sy
 8012654:	f3bf 8f6f 	isb	sy
 8012658:	e009      	b.n	801266e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801265a:	68fb      	ldr	r3, [r7, #12]
 801265c:	3310      	adds	r3, #16
 801265e:	4618      	mov	r0, r3
 8012660:	f7ff fef2 	bl	8012448 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8012664:	68fb      	ldr	r3, [r7, #12]
 8012666:	3324      	adds	r3, #36	; 0x24
 8012668:	4618      	mov	r0, r3
 801266a:	f7ff feed 	bl	8012448 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801266e:	f002 ff61 	bl	8015534 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8012672:	2301      	movs	r3, #1
}
 8012674:	4618      	mov	r0, r3
 8012676:	3710      	adds	r7, #16
 8012678:	46bd      	mov	sp, r7
 801267a:	bd80      	pop	{r7, pc}
 801267c:	e000ed04 	.word	0xe000ed04

08012680 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8012680:	b580      	push	{r7, lr}
 8012682:	b08e      	sub	sp, #56	; 0x38
 8012684:	af02      	add	r7, sp, #8
 8012686:	60f8      	str	r0, [r7, #12]
 8012688:	60b9      	str	r1, [r7, #8]
 801268a:	607a      	str	r2, [r7, #4]
 801268c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801268e:	68fb      	ldr	r3, [r7, #12]
 8012690:	2b00      	cmp	r3, #0
 8012692:	d10a      	bne.n	80126aa <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8012694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012698:	f383 8811 	msr	BASEPRI, r3
 801269c:	f3bf 8f6f 	isb	sy
 80126a0:	f3bf 8f4f 	dsb	sy
 80126a4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80126a6:	bf00      	nop
 80126a8:	e7fe      	b.n	80126a8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80126aa:	683b      	ldr	r3, [r7, #0]
 80126ac:	2b00      	cmp	r3, #0
 80126ae:	d10a      	bne.n	80126c6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80126b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126b4:	f383 8811 	msr	BASEPRI, r3
 80126b8:	f3bf 8f6f 	isb	sy
 80126bc:	f3bf 8f4f 	dsb	sy
 80126c0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80126c2:	bf00      	nop
 80126c4:	e7fe      	b.n	80126c4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	2b00      	cmp	r3, #0
 80126ca:	d002      	beq.n	80126d2 <xQueueGenericCreateStatic+0x52>
 80126cc:	68bb      	ldr	r3, [r7, #8]
 80126ce:	2b00      	cmp	r3, #0
 80126d0:	d001      	beq.n	80126d6 <xQueueGenericCreateStatic+0x56>
 80126d2:	2301      	movs	r3, #1
 80126d4:	e000      	b.n	80126d8 <xQueueGenericCreateStatic+0x58>
 80126d6:	2300      	movs	r3, #0
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d10a      	bne.n	80126f2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80126dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126e0:	f383 8811 	msr	BASEPRI, r3
 80126e4:	f3bf 8f6f 	isb	sy
 80126e8:	f3bf 8f4f 	dsb	sy
 80126ec:	623b      	str	r3, [r7, #32]
}
 80126ee:	bf00      	nop
 80126f0:	e7fe      	b.n	80126f0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	2b00      	cmp	r3, #0
 80126f6:	d102      	bne.n	80126fe <xQueueGenericCreateStatic+0x7e>
 80126f8:	68bb      	ldr	r3, [r7, #8]
 80126fa:	2b00      	cmp	r3, #0
 80126fc:	d101      	bne.n	8012702 <xQueueGenericCreateStatic+0x82>
 80126fe:	2301      	movs	r3, #1
 8012700:	e000      	b.n	8012704 <xQueueGenericCreateStatic+0x84>
 8012702:	2300      	movs	r3, #0
 8012704:	2b00      	cmp	r3, #0
 8012706:	d10a      	bne.n	801271e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8012708:	f04f 0350 	mov.w	r3, #80	; 0x50
 801270c:	f383 8811 	msr	BASEPRI, r3
 8012710:	f3bf 8f6f 	isb	sy
 8012714:	f3bf 8f4f 	dsb	sy
 8012718:	61fb      	str	r3, [r7, #28]
}
 801271a:	bf00      	nop
 801271c:	e7fe      	b.n	801271c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801271e:	2350      	movs	r3, #80	; 0x50
 8012720:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8012722:	697b      	ldr	r3, [r7, #20]
 8012724:	2b50      	cmp	r3, #80	; 0x50
 8012726:	d00a      	beq.n	801273e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8012728:	f04f 0350 	mov.w	r3, #80	; 0x50
 801272c:	f383 8811 	msr	BASEPRI, r3
 8012730:	f3bf 8f6f 	isb	sy
 8012734:	f3bf 8f4f 	dsb	sy
 8012738:	61bb      	str	r3, [r7, #24]
}
 801273a:	bf00      	nop
 801273c:	e7fe      	b.n	801273c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801273e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012740:	683b      	ldr	r3, [r7, #0]
 8012742:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8012744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012746:	2b00      	cmp	r3, #0
 8012748:	d00d      	beq.n	8012766 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801274a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801274c:	2201      	movs	r2, #1
 801274e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012752:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8012756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012758:	9300      	str	r3, [sp, #0]
 801275a:	4613      	mov	r3, r2
 801275c:	687a      	ldr	r2, [r7, #4]
 801275e:	68b9      	ldr	r1, [r7, #8]
 8012760:	68f8      	ldr	r0, [r7, #12]
 8012762:	f000 f83f 	bl	80127e4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8012768:	4618      	mov	r0, r3
 801276a:	3730      	adds	r7, #48	; 0x30
 801276c:	46bd      	mov	sp, r7
 801276e:	bd80      	pop	{r7, pc}

08012770 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8012770:	b580      	push	{r7, lr}
 8012772:	b08a      	sub	sp, #40	; 0x28
 8012774:	af02      	add	r7, sp, #8
 8012776:	60f8      	str	r0, [r7, #12]
 8012778:	60b9      	str	r1, [r7, #8]
 801277a:	4613      	mov	r3, r2
 801277c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801277e:	68fb      	ldr	r3, [r7, #12]
 8012780:	2b00      	cmp	r3, #0
 8012782:	d10a      	bne.n	801279a <xQueueGenericCreate+0x2a>
	__asm volatile
 8012784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012788:	f383 8811 	msr	BASEPRI, r3
 801278c:	f3bf 8f6f 	isb	sy
 8012790:	f3bf 8f4f 	dsb	sy
 8012794:	613b      	str	r3, [r7, #16]
}
 8012796:	bf00      	nop
 8012798:	e7fe      	b.n	8012798 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801279a:	68fb      	ldr	r3, [r7, #12]
 801279c:	68ba      	ldr	r2, [r7, #8]
 801279e:	fb02 f303 	mul.w	r3, r2, r3
 80127a2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80127a4:	69fb      	ldr	r3, [r7, #28]
 80127a6:	3350      	adds	r3, #80	; 0x50
 80127a8:	4618      	mov	r0, r3
 80127aa:	f002 ffb5 	bl	8015718 <pvPortMalloc>
 80127ae:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80127b0:	69bb      	ldr	r3, [r7, #24]
 80127b2:	2b00      	cmp	r3, #0
 80127b4:	d011      	beq.n	80127da <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80127b6:	69bb      	ldr	r3, [r7, #24]
 80127b8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80127ba:	697b      	ldr	r3, [r7, #20]
 80127bc:	3350      	adds	r3, #80	; 0x50
 80127be:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80127c0:	69bb      	ldr	r3, [r7, #24]
 80127c2:	2200      	movs	r2, #0
 80127c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80127c8:	79fa      	ldrb	r2, [r7, #7]
 80127ca:	69bb      	ldr	r3, [r7, #24]
 80127cc:	9300      	str	r3, [sp, #0]
 80127ce:	4613      	mov	r3, r2
 80127d0:	697a      	ldr	r2, [r7, #20]
 80127d2:	68b9      	ldr	r1, [r7, #8]
 80127d4:	68f8      	ldr	r0, [r7, #12]
 80127d6:	f000 f805 	bl	80127e4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80127da:	69bb      	ldr	r3, [r7, #24]
	}
 80127dc:	4618      	mov	r0, r3
 80127de:	3720      	adds	r7, #32
 80127e0:	46bd      	mov	sp, r7
 80127e2:	bd80      	pop	{r7, pc}

080127e4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80127e4:	b580      	push	{r7, lr}
 80127e6:	b084      	sub	sp, #16
 80127e8:	af00      	add	r7, sp, #0
 80127ea:	60f8      	str	r0, [r7, #12]
 80127ec:	60b9      	str	r1, [r7, #8]
 80127ee:	607a      	str	r2, [r7, #4]
 80127f0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80127f2:	68bb      	ldr	r3, [r7, #8]
 80127f4:	2b00      	cmp	r3, #0
 80127f6:	d103      	bne.n	8012800 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80127f8:	69bb      	ldr	r3, [r7, #24]
 80127fa:	69ba      	ldr	r2, [r7, #24]
 80127fc:	601a      	str	r2, [r3, #0]
 80127fe:	e002      	b.n	8012806 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8012800:	69bb      	ldr	r3, [r7, #24]
 8012802:	687a      	ldr	r2, [r7, #4]
 8012804:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8012806:	69bb      	ldr	r3, [r7, #24]
 8012808:	68fa      	ldr	r2, [r7, #12]
 801280a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 801280c:	69bb      	ldr	r3, [r7, #24]
 801280e:	68ba      	ldr	r2, [r7, #8]
 8012810:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8012812:	2101      	movs	r1, #1
 8012814:	69b8      	ldr	r0, [r7, #24]
 8012816:	f7ff fecb 	bl	80125b0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801281a:	69bb      	ldr	r3, [r7, #24]
 801281c:	78fa      	ldrb	r2, [r7, #3]
 801281e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8012822:	bf00      	nop
 8012824:	3710      	adds	r7, #16
 8012826:	46bd      	mov	sp, r7
 8012828:	bd80      	pop	{r7, pc}

0801282a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 801282a:	b580      	push	{r7, lr}
 801282c:	b082      	sub	sp, #8
 801282e:	af00      	add	r7, sp, #0
 8012830:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	2b00      	cmp	r3, #0
 8012836:	d00e      	beq.n	8012856 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	2200      	movs	r2, #0
 801283c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	2200      	movs	r2, #0
 8012842:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	2200      	movs	r2, #0
 8012848:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 801284a:	2300      	movs	r3, #0
 801284c:	2200      	movs	r2, #0
 801284e:	2100      	movs	r1, #0
 8012850:	6878      	ldr	r0, [r7, #4]
 8012852:	f000 f90b 	bl	8012a6c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8012856:	bf00      	nop
 8012858:	3708      	adds	r7, #8
 801285a:	46bd      	mov	sp, r7
 801285c:	bd80      	pop	{r7, pc}

0801285e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 801285e:	b580      	push	{r7, lr}
 8012860:	b086      	sub	sp, #24
 8012862:	af00      	add	r7, sp, #0
 8012864:	4603      	mov	r3, r0
 8012866:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8012868:	2301      	movs	r3, #1
 801286a:	617b      	str	r3, [r7, #20]
 801286c:	2300      	movs	r3, #0
 801286e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8012870:	79fb      	ldrb	r3, [r7, #7]
 8012872:	461a      	mov	r2, r3
 8012874:	6939      	ldr	r1, [r7, #16]
 8012876:	6978      	ldr	r0, [r7, #20]
 8012878:	f7ff ff7a 	bl	8012770 <xQueueGenericCreate>
 801287c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 801287e:	68f8      	ldr	r0, [r7, #12]
 8012880:	f7ff ffd3 	bl	801282a <prvInitialiseMutex>

		return xNewQueue;
 8012884:	68fb      	ldr	r3, [r7, #12]
	}
 8012886:	4618      	mov	r0, r3
 8012888:	3718      	adds	r7, #24
 801288a:	46bd      	mov	sp, r7
 801288c:	bd80      	pop	{r7, pc}

0801288e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 801288e:	b580      	push	{r7, lr}
 8012890:	b088      	sub	sp, #32
 8012892:	af02      	add	r7, sp, #8
 8012894:	4603      	mov	r3, r0
 8012896:	6039      	str	r1, [r7, #0]
 8012898:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801289a:	2301      	movs	r3, #1
 801289c:	617b      	str	r3, [r7, #20]
 801289e:	2300      	movs	r3, #0
 80128a0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80128a2:	79fb      	ldrb	r3, [r7, #7]
 80128a4:	9300      	str	r3, [sp, #0]
 80128a6:	683b      	ldr	r3, [r7, #0]
 80128a8:	2200      	movs	r2, #0
 80128aa:	6939      	ldr	r1, [r7, #16]
 80128ac:	6978      	ldr	r0, [r7, #20]
 80128ae:	f7ff fee7 	bl	8012680 <xQueueGenericCreateStatic>
 80128b2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80128b4:	68f8      	ldr	r0, [r7, #12]
 80128b6:	f7ff ffb8 	bl	801282a <prvInitialiseMutex>

		return xNewQueue;
 80128ba:	68fb      	ldr	r3, [r7, #12]
	}
 80128bc:	4618      	mov	r0, r3
 80128be:	3718      	adds	r7, #24
 80128c0:	46bd      	mov	sp, r7
 80128c2:	bd80      	pop	{r7, pc}

080128c4 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80128c4:	b590      	push	{r4, r7, lr}
 80128c6:	b087      	sub	sp, #28
 80128c8:	af00      	add	r7, sp, #0
 80128ca:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80128d0:	693b      	ldr	r3, [r7, #16]
 80128d2:	2b00      	cmp	r3, #0
 80128d4:	d10a      	bne.n	80128ec <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 80128d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128da:	f383 8811 	msr	BASEPRI, r3
 80128de:	f3bf 8f6f 	isb	sy
 80128e2:	f3bf 8f4f 	dsb	sy
 80128e6:	60fb      	str	r3, [r7, #12]
}
 80128e8:	bf00      	nop
 80128ea:	e7fe      	b.n	80128ea <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80128ec:	693b      	ldr	r3, [r7, #16]
 80128ee:	689c      	ldr	r4, [r3, #8]
 80128f0:	f001 fd52 	bl	8014398 <xTaskGetCurrentTaskHandle>
 80128f4:	4603      	mov	r3, r0
 80128f6:	429c      	cmp	r4, r3
 80128f8:	d111      	bne.n	801291e <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80128fa:	693b      	ldr	r3, [r7, #16]
 80128fc:	68db      	ldr	r3, [r3, #12]
 80128fe:	1e5a      	subs	r2, r3, #1
 8012900:	693b      	ldr	r3, [r7, #16]
 8012902:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8012904:	693b      	ldr	r3, [r7, #16]
 8012906:	68db      	ldr	r3, [r3, #12]
 8012908:	2b00      	cmp	r3, #0
 801290a:	d105      	bne.n	8012918 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 801290c:	2300      	movs	r3, #0
 801290e:	2200      	movs	r2, #0
 8012910:	2100      	movs	r1, #0
 8012912:	6938      	ldr	r0, [r7, #16]
 8012914:	f000 f8aa 	bl	8012a6c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8012918:	2301      	movs	r3, #1
 801291a:	617b      	str	r3, [r7, #20]
 801291c:	e001      	b.n	8012922 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 801291e:	2300      	movs	r3, #0
 8012920:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8012922:	697b      	ldr	r3, [r7, #20]
	}
 8012924:	4618      	mov	r0, r3
 8012926:	371c      	adds	r7, #28
 8012928:	46bd      	mov	sp, r7
 801292a:	bd90      	pop	{r4, r7, pc}

0801292c <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 801292c:	b590      	push	{r4, r7, lr}
 801292e:	b087      	sub	sp, #28
 8012930:	af00      	add	r7, sp, #0
 8012932:	6078      	str	r0, [r7, #4]
 8012934:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 801293a:	693b      	ldr	r3, [r7, #16]
 801293c:	2b00      	cmp	r3, #0
 801293e:	d10a      	bne.n	8012956 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8012940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012944:	f383 8811 	msr	BASEPRI, r3
 8012948:	f3bf 8f6f 	isb	sy
 801294c:	f3bf 8f4f 	dsb	sy
 8012950:	60fb      	str	r3, [r7, #12]
}
 8012952:	bf00      	nop
 8012954:	e7fe      	b.n	8012954 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8012956:	693b      	ldr	r3, [r7, #16]
 8012958:	689c      	ldr	r4, [r3, #8]
 801295a:	f001 fd1d 	bl	8014398 <xTaskGetCurrentTaskHandle>
 801295e:	4603      	mov	r3, r0
 8012960:	429c      	cmp	r4, r3
 8012962:	d107      	bne.n	8012974 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8012964:	693b      	ldr	r3, [r7, #16]
 8012966:	68db      	ldr	r3, [r3, #12]
 8012968:	1c5a      	adds	r2, r3, #1
 801296a:	693b      	ldr	r3, [r7, #16]
 801296c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 801296e:	2301      	movs	r3, #1
 8012970:	617b      	str	r3, [r7, #20]
 8012972:	e00c      	b.n	801298e <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8012974:	6839      	ldr	r1, [r7, #0]
 8012976:	6938      	ldr	r0, [r7, #16]
 8012978:	f000 fb7e 	bl	8013078 <xQueueSemaphoreTake>
 801297c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 801297e:	697b      	ldr	r3, [r7, #20]
 8012980:	2b00      	cmp	r3, #0
 8012982:	d004      	beq.n	801298e <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8012984:	693b      	ldr	r3, [r7, #16]
 8012986:	68db      	ldr	r3, [r3, #12]
 8012988:	1c5a      	adds	r2, r3, #1
 801298a:	693b      	ldr	r3, [r7, #16]
 801298c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 801298e:	697b      	ldr	r3, [r7, #20]
	}
 8012990:	4618      	mov	r0, r3
 8012992:	371c      	adds	r7, #28
 8012994:	46bd      	mov	sp, r7
 8012996:	bd90      	pop	{r4, r7, pc}

08012998 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8012998:	b580      	push	{r7, lr}
 801299a:	b08a      	sub	sp, #40	; 0x28
 801299c:	af02      	add	r7, sp, #8
 801299e:	60f8      	str	r0, [r7, #12]
 80129a0:	60b9      	str	r1, [r7, #8]
 80129a2:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80129a4:	68fb      	ldr	r3, [r7, #12]
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	d10a      	bne.n	80129c0 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 80129aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129ae:	f383 8811 	msr	BASEPRI, r3
 80129b2:	f3bf 8f6f 	isb	sy
 80129b6:	f3bf 8f4f 	dsb	sy
 80129ba:	61bb      	str	r3, [r7, #24]
}
 80129bc:	bf00      	nop
 80129be:	e7fe      	b.n	80129be <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80129c0:	68ba      	ldr	r2, [r7, #8]
 80129c2:	68fb      	ldr	r3, [r7, #12]
 80129c4:	429a      	cmp	r2, r3
 80129c6:	d90a      	bls.n	80129de <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80129c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129cc:	f383 8811 	msr	BASEPRI, r3
 80129d0:	f3bf 8f6f 	isb	sy
 80129d4:	f3bf 8f4f 	dsb	sy
 80129d8:	617b      	str	r3, [r7, #20]
}
 80129da:	bf00      	nop
 80129dc:	e7fe      	b.n	80129dc <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80129de:	2302      	movs	r3, #2
 80129e0:	9300      	str	r3, [sp, #0]
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	2200      	movs	r2, #0
 80129e6:	2100      	movs	r1, #0
 80129e8:	68f8      	ldr	r0, [r7, #12]
 80129ea:	f7ff fe49 	bl	8012680 <xQueueGenericCreateStatic>
 80129ee:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80129f0:	69fb      	ldr	r3, [r7, #28]
 80129f2:	2b00      	cmp	r3, #0
 80129f4:	d002      	beq.n	80129fc <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80129f6:	69fb      	ldr	r3, [r7, #28]
 80129f8:	68ba      	ldr	r2, [r7, #8]
 80129fa:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80129fc:	69fb      	ldr	r3, [r7, #28]
	}
 80129fe:	4618      	mov	r0, r3
 8012a00:	3720      	adds	r7, #32
 8012a02:	46bd      	mov	sp, r7
 8012a04:	bd80      	pop	{r7, pc}

08012a06 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8012a06:	b580      	push	{r7, lr}
 8012a08:	b086      	sub	sp, #24
 8012a0a:	af00      	add	r7, sp, #0
 8012a0c:	6078      	str	r0, [r7, #4]
 8012a0e:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	2b00      	cmp	r3, #0
 8012a14:	d10a      	bne.n	8012a2c <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8012a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a1a:	f383 8811 	msr	BASEPRI, r3
 8012a1e:	f3bf 8f6f 	isb	sy
 8012a22:	f3bf 8f4f 	dsb	sy
 8012a26:	613b      	str	r3, [r7, #16]
}
 8012a28:	bf00      	nop
 8012a2a:	e7fe      	b.n	8012a2a <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8012a2c:	683a      	ldr	r2, [r7, #0]
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	429a      	cmp	r2, r3
 8012a32:	d90a      	bls.n	8012a4a <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8012a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a38:	f383 8811 	msr	BASEPRI, r3
 8012a3c:	f3bf 8f6f 	isb	sy
 8012a40:	f3bf 8f4f 	dsb	sy
 8012a44:	60fb      	str	r3, [r7, #12]
}
 8012a46:	bf00      	nop
 8012a48:	e7fe      	b.n	8012a48 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8012a4a:	2202      	movs	r2, #2
 8012a4c:	2100      	movs	r1, #0
 8012a4e:	6878      	ldr	r0, [r7, #4]
 8012a50:	f7ff fe8e 	bl	8012770 <xQueueGenericCreate>
 8012a54:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8012a56:	697b      	ldr	r3, [r7, #20]
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	d002      	beq.n	8012a62 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8012a5c:	697b      	ldr	r3, [r7, #20]
 8012a5e:	683a      	ldr	r2, [r7, #0]
 8012a60:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8012a62:	697b      	ldr	r3, [r7, #20]
	}
 8012a64:	4618      	mov	r0, r3
 8012a66:	3718      	adds	r7, #24
 8012a68:	46bd      	mov	sp, r7
 8012a6a:	bd80      	pop	{r7, pc}

08012a6c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8012a6c:	b580      	push	{r7, lr}
 8012a6e:	b08e      	sub	sp, #56	; 0x38
 8012a70:	af00      	add	r7, sp, #0
 8012a72:	60f8      	str	r0, [r7, #12]
 8012a74:	60b9      	str	r1, [r7, #8]
 8012a76:	607a      	str	r2, [r7, #4]
 8012a78:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8012a7a:	2300      	movs	r3, #0
 8012a7c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012a7e:	68fb      	ldr	r3, [r7, #12]
 8012a80:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a84:	2b00      	cmp	r3, #0
 8012a86:	d10a      	bne.n	8012a9e <xQueueGenericSend+0x32>
	__asm volatile
 8012a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a8c:	f383 8811 	msr	BASEPRI, r3
 8012a90:	f3bf 8f6f 	isb	sy
 8012a94:	f3bf 8f4f 	dsb	sy
 8012a98:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8012a9a:	bf00      	nop
 8012a9c:	e7fe      	b.n	8012a9c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012a9e:	68bb      	ldr	r3, [r7, #8]
 8012aa0:	2b00      	cmp	r3, #0
 8012aa2:	d103      	bne.n	8012aac <xQueueGenericSend+0x40>
 8012aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012aa8:	2b00      	cmp	r3, #0
 8012aaa:	d101      	bne.n	8012ab0 <xQueueGenericSend+0x44>
 8012aac:	2301      	movs	r3, #1
 8012aae:	e000      	b.n	8012ab2 <xQueueGenericSend+0x46>
 8012ab0:	2300      	movs	r3, #0
 8012ab2:	2b00      	cmp	r3, #0
 8012ab4:	d10a      	bne.n	8012acc <xQueueGenericSend+0x60>
	__asm volatile
 8012ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012aba:	f383 8811 	msr	BASEPRI, r3
 8012abe:	f3bf 8f6f 	isb	sy
 8012ac2:	f3bf 8f4f 	dsb	sy
 8012ac6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8012ac8:	bf00      	nop
 8012aca:	e7fe      	b.n	8012aca <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012acc:	683b      	ldr	r3, [r7, #0]
 8012ace:	2b02      	cmp	r3, #2
 8012ad0:	d103      	bne.n	8012ada <xQueueGenericSend+0x6e>
 8012ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012ad6:	2b01      	cmp	r3, #1
 8012ad8:	d101      	bne.n	8012ade <xQueueGenericSend+0x72>
 8012ada:	2301      	movs	r3, #1
 8012adc:	e000      	b.n	8012ae0 <xQueueGenericSend+0x74>
 8012ade:	2300      	movs	r3, #0
 8012ae0:	2b00      	cmp	r3, #0
 8012ae2:	d10a      	bne.n	8012afa <xQueueGenericSend+0x8e>
	__asm volatile
 8012ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ae8:	f383 8811 	msr	BASEPRI, r3
 8012aec:	f3bf 8f6f 	isb	sy
 8012af0:	f3bf 8f4f 	dsb	sy
 8012af4:	623b      	str	r3, [r7, #32]
}
 8012af6:	bf00      	nop
 8012af8:	e7fe      	b.n	8012af8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012afa:	f001 fc5d 	bl	80143b8 <xTaskGetSchedulerState>
 8012afe:	4603      	mov	r3, r0
 8012b00:	2b00      	cmp	r3, #0
 8012b02:	d102      	bne.n	8012b0a <xQueueGenericSend+0x9e>
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	2b00      	cmp	r3, #0
 8012b08:	d101      	bne.n	8012b0e <xQueueGenericSend+0xa2>
 8012b0a:	2301      	movs	r3, #1
 8012b0c:	e000      	b.n	8012b10 <xQueueGenericSend+0xa4>
 8012b0e:	2300      	movs	r3, #0
 8012b10:	2b00      	cmp	r3, #0
 8012b12:	d10a      	bne.n	8012b2a <xQueueGenericSend+0xbe>
	__asm volatile
 8012b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b18:	f383 8811 	msr	BASEPRI, r3
 8012b1c:	f3bf 8f6f 	isb	sy
 8012b20:	f3bf 8f4f 	dsb	sy
 8012b24:	61fb      	str	r3, [r7, #28]
}
 8012b26:	bf00      	nop
 8012b28:	e7fe      	b.n	8012b28 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012b2a:	f002 fcd3 	bl	80154d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012b36:	429a      	cmp	r2, r3
 8012b38:	d302      	bcc.n	8012b40 <xQueueGenericSend+0xd4>
 8012b3a:	683b      	ldr	r3, [r7, #0]
 8012b3c:	2b02      	cmp	r3, #2
 8012b3e:	d129      	bne.n	8012b94 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012b40:	683a      	ldr	r2, [r7, #0]
 8012b42:	68b9      	ldr	r1, [r7, #8]
 8012b44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012b46:	f000 fc5e 	bl	8013406 <prvCopyDataToQueue>
 8012b4a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b50:	2b00      	cmp	r3, #0
 8012b52:	d010      	beq.n	8012b76 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b56:	3324      	adds	r3, #36	; 0x24
 8012b58:	4618      	mov	r0, r3
 8012b5a:	f001 fa5f 	bl	801401c <xTaskRemoveFromEventList>
 8012b5e:	4603      	mov	r3, r0
 8012b60:	2b00      	cmp	r3, #0
 8012b62:	d013      	beq.n	8012b8c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8012b64:	4b3f      	ldr	r3, [pc, #252]	; (8012c64 <xQueueGenericSend+0x1f8>)
 8012b66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012b6a:	601a      	str	r2, [r3, #0]
 8012b6c:	f3bf 8f4f 	dsb	sy
 8012b70:	f3bf 8f6f 	isb	sy
 8012b74:	e00a      	b.n	8012b8c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8012b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b78:	2b00      	cmp	r3, #0
 8012b7a:	d007      	beq.n	8012b8c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8012b7c:	4b39      	ldr	r3, [pc, #228]	; (8012c64 <xQueueGenericSend+0x1f8>)
 8012b7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012b82:	601a      	str	r2, [r3, #0]
 8012b84:	f3bf 8f4f 	dsb	sy
 8012b88:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8012b8c:	f002 fcd2 	bl	8015534 <vPortExitCritical>
				return pdPASS;
 8012b90:	2301      	movs	r3, #1
 8012b92:	e063      	b.n	8012c5c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	2b00      	cmp	r3, #0
 8012b98:	d103      	bne.n	8012ba2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012b9a:	f002 fccb 	bl	8015534 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8012b9e:	2300      	movs	r3, #0
 8012ba0:	e05c      	b.n	8012c5c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012ba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012ba4:	2b00      	cmp	r3, #0
 8012ba6:	d106      	bne.n	8012bb6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012ba8:	f107 0314 	add.w	r3, r7, #20
 8012bac:	4618      	mov	r0, r3
 8012bae:	f001 fa99 	bl	80140e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012bb2:	2301      	movs	r3, #1
 8012bb4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012bb6:	f002 fcbd 	bl	8015534 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012bba:	f000 fff9 	bl	8013bb0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012bbe:	f002 fc89 	bl	80154d4 <vPortEnterCritical>
 8012bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bc4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012bc8:	b25b      	sxtb	r3, r3
 8012bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012bce:	d103      	bne.n	8012bd8 <xQueueGenericSend+0x16c>
 8012bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bd2:	2200      	movs	r2, #0
 8012bd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012bde:	b25b      	sxtb	r3, r3
 8012be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012be4:	d103      	bne.n	8012bee <xQueueGenericSend+0x182>
 8012be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012be8:	2200      	movs	r2, #0
 8012bea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012bee:	f002 fca1 	bl	8015534 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012bf2:	1d3a      	adds	r2, r7, #4
 8012bf4:	f107 0314 	add.w	r3, r7, #20
 8012bf8:	4611      	mov	r1, r2
 8012bfa:	4618      	mov	r0, r3
 8012bfc:	f001 fa88 	bl	8014110 <xTaskCheckForTimeOut>
 8012c00:	4603      	mov	r3, r0
 8012c02:	2b00      	cmp	r3, #0
 8012c04:	d124      	bne.n	8012c50 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8012c06:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012c08:	f000 fcf5 	bl	80135f6 <prvIsQueueFull>
 8012c0c:	4603      	mov	r3, r0
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	d018      	beq.n	8012c44 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8012c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c14:	3310      	adds	r3, #16
 8012c16:	687a      	ldr	r2, [r7, #4]
 8012c18:	4611      	mov	r1, r2
 8012c1a:	4618      	mov	r0, r3
 8012c1c:	f001 f9ae 	bl	8013f7c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8012c20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012c22:	f000 fc80 	bl	8013526 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8012c26:	f000 ffd1 	bl	8013bcc <xTaskResumeAll>
 8012c2a:	4603      	mov	r3, r0
 8012c2c:	2b00      	cmp	r3, #0
 8012c2e:	f47f af7c 	bne.w	8012b2a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8012c32:	4b0c      	ldr	r3, [pc, #48]	; (8012c64 <xQueueGenericSend+0x1f8>)
 8012c34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012c38:	601a      	str	r2, [r3, #0]
 8012c3a:	f3bf 8f4f 	dsb	sy
 8012c3e:	f3bf 8f6f 	isb	sy
 8012c42:	e772      	b.n	8012b2a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8012c44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012c46:	f000 fc6e 	bl	8013526 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012c4a:	f000 ffbf 	bl	8013bcc <xTaskResumeAll>
 8012c4e:	e76c      	b.n	8012b2a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8012c50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012c52:	f000 fc68 	bl	8013526 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012c56:	f000 ffb9 	bl	8013bcc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8012c5a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8012c5c:	4618      	mov	r0, r3
 8012c5e:	3738      	adds	r7, #56	; 0x38
 8012c60:	46bd      	mov	sp, r7
 8012c62:	bd80      	pop	{r7, pc}
 8012c64:	e000ed04 	.word	0xe000ed04

08012c68 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8012c68:	b580      	push	{r7, lr}
 8012c6a:	b090      	sub	sp, #64	; 0x40
 8012c6c:	af00      	add	r7, sp, #0
 8012c6e:	60f8      	str	r0, [r7, #12]
 8012c70:	60b9      	str	r1, [r7, #8]
 8012c72:	607a      	str	r2, [r7, #4]
 8012c74:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012c76:	68fb      	ldr	r3, [r7, #12]
 8012c78:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8012c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c7c:	2b00      	cmp	r3, #0
 8012c7e:	d10a      	bne.n	8012c96 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8012c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c84:	f383 8811 	msr	BASEPRI, r3
 8012c88:	f3bf 8f6f 	isb	sy
 8012c8c:	f3bf 8f4f 	dsb	sy
 8012c90:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8012c92:	bf00      	nop
 8012c94:	e7fe      	b.n	8012c94 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012c96:	68bb      	ldr	r3, [r7, #8]
 8012c98:	2b00      	cmp	r3, #0
 8012c9a:	d103      	bne.n	8012ca4 <xQueueGenericSendFromISR+0x3c>
 8012c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	d101      	bne.n	8012ca8 <xQueueGenericSendFromISR+0x40>
 8012ca4:	2301      	movs	r3, #1
 8012ca6:	e000      	b.n	8012caa <xQueueGenericSendFromISR+0x42>
 8012ca8:	2300      	movs	r3, #0
 8012caa:	2b00      	cmp	r3, #0
 8012cac:	d10a      	bne.n	8012cc4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8012cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012cb2:	f383 8811 	msr	BASEPRI, r3
 8012cb6:	f3bf 8f6f 	isb	sy
 8012cba:	f3bf 8f4f 	dsb	sy
 8012cbe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8012cc0:	bf00      	nop
 8012cc2:	e7fe      	b.n	8012cc2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012cc4:	683b      	ldr	r3, [r7, #0]
 8012cc6:	2b02      	cmp	r3, #2
 8012cc8:	d103      	bne.n	8012cd2 <xQueueGenericSendFromISR+0x6a>
 8012cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012cce:	2b01      	cmp	r3, #1
 8012cd0:	d101      	bne.n	8012cd6 <xQueueGenericSendFromISR+0x6e>
 8012cd2:	2301      	movs	r3, #1
 8012cd4:	e000      	b.n	8012cd8 <xQueueGenericSendFromISR+0x70>
 8012cd6:	2300      	movs	r3, #0
 8012cd8:	2b00      	cmp	r3, #0
 8012cda:	d10a      	bne.n	8012cf2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8012cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ce0:	f383 8811 	msr	BASEPRI, r3
 8012ce4:	f3bf 8f6f 	isb	sy
 8012ce8:	f3bf 8f4f 	dsb	sy
 8012cec:	623b      	str	r3, [r7, #32]
}
 8012cee:	bf00      	nop
 8012cf0:	e7fe      	b.n	8012cf0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012cf2:	f002 fcd1 	bl	8015698 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8012cf6:	f3ef 8211 	mrs	r2, BASEPRI
 8012cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012cfe:	f383 8811 	msr	BASEPRI, r3
 8012d02:	f3bf 8f6f 	isb	sy
 8012d06:	f3bf 8f4f 	dsb	sy
 8012d0a:	61fa      	str	r2, [r7, #28]
 8012d0c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8012d0e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012d10:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012d1a:	429a      	cmp	r2, r3
 8012d1c:	d302      	bcc.n	8012d24 <xQueueGenericSendFromISR+0xbc>
 8012d1e:	683b      	ldr	r3, [r7, #0]
 8012d20:	2b02      	cmp	r3, #2
 8012d22:	d12f      	bne.n	8012d84 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8012d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012d2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012d32:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012d34:	683a      	ldr	r2, [r7, #0]
 8012d36:	68b9      	ldr	r1, [r7, #8]
 8012d38:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012d3a:	f000 fb64 	bl	8013406 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8012d3e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8012d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d46:	d112      	bne.n	8012d6e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d4c:	2b00      	cmp	r3, #0
 8012d4e:	d016      	beq.n	8012d7e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d52:	3324      	adds	r3, #36	; 0x24
 8012d54:	4618      	mov	r0, r3
 8012d56:	f001 f961 	bl	801401c <xTaskRemoveFromEventList>
 8012d5a:	4603      	mov	r3, r0
 8012d5c:	2b00      	cmp	r3, #0
 8012d5e:	d00e      	beq.n	8012d7e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	2b00      	cmp	r3, #0
 8012d64:	d00b      	beq.n	8012d7e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8012d66:	687b      	ldr	r3, [r7, #4]
 8012d68:	2201      	movs	r2, #1
 8012d6a:	601a      	str	r2, [r3, #0]
 8012d6c:	e007      	b.n	8012d7e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012d6e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012d72:	3301      	adds	r3, #1
 8012d74:	b2db      	uxtb	r3, r3
 8012d76:	b25a      	sxtb	r2, r3
 8012d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8012d7e:	2301      	movs	r3, #1
 8012d80:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8012d82:	e001      	b.n	8012d88 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8012d84:	2300      	movs	r3, #0
 8012d86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012d88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d8a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8012d8c:	697b      	ldr	r3, [r7, #20]
 8012d8e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8012d92:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012d94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8012d96:	4618      	mov	r0, r3
 8012d98:	3740      	adds	r7, #64	; 0x40
 8012d9a:	46bd      	mov	sp, r7
 8012d9c:	bd80      	pop	{r7, pc}

08012d9e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012d9e:	b580      	push	{r7, lr}
 8012da0:	b08e      	sub	sp, #56	; 0x38
 8012da2:	af00      	add	r7, sp, #0
 8012da4:	6078      	str	r0, [r7, #4]
 8012da6:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8012dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dae:	2b00      	cmp	r3, #0
 8012db0:	d10a      	bne.n	8012dc8 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8012db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012db6:	f383 8811 	msr	BASEPRI, r3
 8012dba:	f3bf 8f6f 	isb	sy
 8012dbe:	f3bf 8f4f 	dsb	sy
 8012dc2:	623b      	str	r3, [r7, #32]
}
 8012dc4:	bf00      	nop
 8012dc6:	e7fe      	b.n	8012dc6 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8012dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012dcc:	2b00      	cmp	r3, #0
 8012dce:	d00a      	beq.n	8012de6 <xQueueGiveFromISR+0x48>
	__asm volatile
 8012dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012dd4:	f383 8811 	msr	BASEPRI, r3
 8012dd8:	f3bf 8f6f 	isb	sy
 8012ddc:	f3bf 8f4f 	dsb	sy
 8012de0:	61fb      	str	r3, [r7, #28]
}
 8012de2:	bf00      	nop
 8012de4:	e7fe      	b.n	8012de4 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8012de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012de8:	681b      	ldr	r3, [r3, #0]
 8012dea:	2b00      	cmp	r3, #0
 8012dec:	d103      	bne.n	8012df6 <xQueueGiveFromISR+0x58>
 8012dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012df0:	689b      	ldr	r3, [r3, #8]
 8012df2:	2b00      	cmp	r3, #0
 8012df4:	d101      	bne.n	8012dfa <xQueueGiveFromISR+0x5c>
 8012df6:	2301      	movs	r3, #1
 8012df8:	e000      	b.n	8012dfc <xQueueGiveFromISR+0x5e>
 8012dfa:	2300      	movs	r3, #0
 8012dfc:	2b00      	cmp	r3, #0
 8012dfe:	d10a      	bne.n	8012e16 <xQueueGiveFromISR+0x78>
	__asm volatile
 8012e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e04:	f383 8811 	msr	BASEPRI, r3
 8012e08:	f3bf 8f6f 	isb	sy
 8012e0c:	f3bf 8f4f 	dsb	sy
 8012e10:	61bb      	str	r3, [r7, #24]
}
 8012e12:	bf00      	nop
 8012e14:	e7fe      	b.n	8012e14 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012e16:	f002 fc3f 	bl	8015698 <vPortValidateInterruptPriority>
	__asm volatile
 8012e1a:	f3ef 8211 	mrs	r2, BASEPRI
 8012e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e22:	f383 8811 	msr	BASEPRI, r3
 8012e26:	f3bf 8f6f 	isb	sy
 8012e2a:	f3bf 8f4f 	dsb	sy
 8012e2e:	617a      	str	r2, [r7, #20]
 8012e30:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8012e32:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012e34:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012e3a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8012e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012e40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012e42:	429a      	cmp	r2, r3
 8012e44:	d22b      	bcs.n	8012e9e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8012e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012e4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e52:	1c5a      	adds	r2, r3, #1
 8012e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e56:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8012e58:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012e60:	d112      	bne.n	8012e88 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e66:	2b00      	cmp	r3, #0
 8012e68:	d016      	beq.n	8012e98 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e6c:	3324      	adds	r3, #36	; 0x24
 8012e6e:	4618      	mov	r0, r3
 8012e70:	f001 f8d4 	bl	801401c <xTaskRemoveFromEventList>
 8012e74:	4603      	mov	r3, r0
 8012e76:	2b00      	cmp	r3, #0
 8012e78:	d00e      	beq.n	8012e98 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8012e7a:	683b      	ldr	r3, [r7, #0]
 8012e7c:	2b00      	cmp	r3, #0
 8012e7e:	d00b      	beq.n	8012e98 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8012e80:	683b      	ldr	r3, [r7, #0]
 8012e82:	2201      	movs	r2, #1
 8012e84:	601a      	str	r2, [r3, #0]
 8012e86:	e007      	b.n	8012e98 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012e88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012e8c:	3301      	adds	r3, #1
 8012e8e:	b2db      	uxtb	r3, r3
 8012e90:	b25a      	sxtb	r2, r3
 8012e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8012e98:	2301      	movs	r3, #1
 8012e9a:	637b      	str	r3, [r7, #52]	; 0x34
 8012e9c:	e001      	b.n	8012ea2 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8012e9e:	2300      	movs	r3, #0
 8012ea0:	637b      	str	r3, [r7, #52]	; 0x34
 8012ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ea4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8012ea6:	68fb      	ldr	r3, [r7, #12]
 8012ea8:	f383 8811 	msr	BASEPRI, r3
}
 8012eac:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012eae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012eb0:	4618      	mov	r0, r3
 8012eb2:	3738      	adds	r7, #56	; 0x38
 8012eb4:	46bd      	mov	sp, r7
 8012eb6:	bd80      	pop	{r7, pc}

08012eb8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8012eb8:	b580      	push	{r7, lr}
 8012eba:	b08c      	sub	sp, #48	; 0x30
 8012ebc:	af00      	add	r7, sp, #0
 8012ebe:	60f8      	str	r0, [r7, #12]
 8012ec0:	60b9      	str	r1, [r7, #8]
 8012ec2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8012ec4:	2300      	movs	r3, #0
 8012ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012ec8:	68fb      	ldr	r3, [r7, #12]
 8012eca:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8012ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ece:	2b00      	cmp	r3, #0
 8012ed0:	d10a      	bne.n	8012ee8 <xQueueReceive+0x30>
	__asm volatile
 8012ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ed6:	f383 8811 	msr	BASEPRI, r3
 8012eda:	f3bf 8f6f 	isb	sy
 8012ede:	f3bf 8f4f 	dsb	sy
 8012ee2:	623b      	str	r3, [r7, #32]
}
 8012ee4:	bf00      	nop
 8012ee6:	e7fe      	b.n	8012ee6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012ee8:	68bb      	ldr	r3, [r7, #8]
 8012eea:	2b00      	cmp	r3, #0
 8012eec:	d103      	bne.n	8012ef6 <xQueueReceive+0x3e>
 8012eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012ef2:	2b00      	cmp	r3, #0
 8012ef4:	d101      	bne.n	8012efa <xQueueReceive+0x42>
 8012ef6:	2301      	movs	r3, #1
 8012ef8:	e000      	b.n	8012efc <xQueueReceive+0x44>
 8012efa:	2300      	movs	r3, #0
 8012efc:	2b00      	cmp	r3, #0
 8012efe:	d10a      	bne.n	8012f16 <xQueueReceive+0x5e>
	__asm volatile
 8012f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f04:	f383 8811 	msr	BASEPRI, r3
 8012f08:	f3bf 8f6f 	isb	sy
 8012f0c:	f3bf 8f4f 	dsb	sy
 8012f10:	61fb      	str	r3, [r7, #28]
}
 8012f12:	bf00      	nop
 8012f14:	e7fe      	b.n	8012f14 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012f16:	f001 fa4f 	bl	80143b8 <xTaskGetSchedulerState>
 8012f1a:	4603      	mov	r3, r0
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	d102      	bne.n	8012f26 <xQueueReceive+0x6e>
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	2b00      	cmp	r3, #0
 8012f24:	d101      	bne.n	8012f2a <xQueueReceive+0x72>
 8012f26:	2301      	movs	r3, #1
 8012f28:	e000      	b.n	8012f2c <xQueueReceive+0x74>
 8012f2a:	2300      	movs	r3, #0
 8012f2c:	2b00      	cmp	r3, #0
 8012f2e:	d10a      	bne.n	8012f46 <xQueueReceive+0x8e>
	__asm volatile
 8012f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f34:	f383 8811 	msr	BASEPRI, r3
 8012f38:	f3bf 8f6f 	isb	sy
 8012f3c:	f3bf 8f4f 	dsb	sy
 8012f40:	61bb      	str	r3, [r7, #24]
}
 8012f42:	bf00      	nop
 8012f44:	e7fe      	b.n	8012f44 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012f46:	f002 fac5 	bl	80154d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012f4e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f52:	2b00      	cmp	r3, #0
 8012f54:	d01f      	beq.n	8012f96 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012f56:	68b9      	ldr	r1, [r7, #8]
 8012f58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012f5a:	f000 fabe 	bl	80134da <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f60:	1e5a      	subs	r2, r3, #1
 8012f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f64:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f68:	691b      	ldr	r3, [r3, #16]
 8012f6a:	2b00      	cmp	r3, #0
 8012f6c:	d00f      	beq.n	8012f8e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f70:	3310      	adds	r3, #16
 8012f72:	4618      	mov	r0, r3
 8012f74:	f001 f852 	bl	801401c <xTaskRemoveFromEventList>
 8012f78:	4603      	mov	r3, r0
 8012f7a:	2b00      	cmp	r3, #0
 8012f7c:	d007      	beq.n	8012f8e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8012f7e:	4b3d      	ldr	r3, [pc, #244]	; (8013074 <xQueueReceive+0x1bc>)
 8012f80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012f84:	601a      	str	r2, [r3, #0]
 8012f86:	f3bf 8f4f 	dsb	sy
 8012f8a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8012f8e:	f002 fad1 	bl	8015534 <vPortExitCritical>
				return pdPASS;
 8012f92:	2301      	movs	r3, #1
 8012f94:	e069      	b.n	801306a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	2b00      	cmp	r3, #0
 8012f9a:	d103      	bne.n	8012fa4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012f9c:	f002 faca 	bl	8015534 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8012fa0:	2300      	movs	r3, #0
 8012fa2:	e062      	b.n	801306a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fa6:	2b00      	cmp	r3, #0
 8012fa8:	d106      	bne.n	8012fb8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012faa:	f107 0310 	add.w	r3, r7, #16
 8012fae:	4618      	mov	r0, r3
 8012fb0:	f001 f898 	bl	80140e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012fb4:	2301      	movs	r3, #1
 8012fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012fb8:	f002 fabc 	bl	8015534 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012fbc:	f000 fdf8 	bl	8013bb0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012fc0:	f002 fa88 	bl	80154d4 <vPortEnterCritical>
 8012fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fc6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012fca:	b25b      	sxtb	r3, r3
 8012fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012fd0:	d103      	bne.n	8012fda <xQueueReceive+0x122>
 8012fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fd4:	2200      	movs	r2, #0
 8012fd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fdc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012fe0:	b25b      	sxtb	r3, r3
 8012fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012fe6:	d103      	bne.n	8012ff0 <xQueueReceive+0x138>
 8012fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fea:	2200      	movs	r2, #0
 8012fec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012ff0:	f002 faa0 	bl	8015534 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012ff4:	1d3a      	adds	r2, r7, #4
 8012ff6:	f107 0310 	add.w	r3, r7, #16
 8012ffa:	4611      	mov	r1, r2
 8012ffc:	4618      	mov	r0, r3
 8012ffe:	f001 f887 	bl	8014110 <xTaskCheckForTimeOut>
 8013002:	4603      	mov	r3, r0
 8013004:	2b00      	cmp	r3, #0
 8013006:	d123      	bne.n	8013050 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013008:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801300a:	f000 fade 	bl	80135ca <prvIsQueueEmpty>
 801300e:	4603      	mov	r3, r0
 8013010:	2b00      	cmp	r3, #0
 8013012:	d017      	beq.n	8013044 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013016:	3324      	adds	r3, #36	; 0x24
 8013018:	687a      	ldr	r2, [r7, #4]
 801301a:	4611      	mov	r1, r2
 801301c:	4618      	mov	r0, r3
 801301e:	f000 ffad 	bl	8013f7c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013022:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013024:	f000 fa7f 	bl	8013526 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013028:	f000 fdd0 	bl	8013bcc <xTaskResumeAll>
 801302c:	4603      	mov	r3, r0
 801302e:	2b00      	cmp	r3, #0
 8013030:	d189      	bne.n	8012f46 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8013032:	4b10      	ldr	r3, [pc, #64]	; (8013074 <xQueueReceive+0x1bc>)
 8013034:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013038:	601a      	str	r2, [r3, #0]
 801303a:	f3bf 8f4f 	dsb	sy
 801303e:	f3bf 8f6f 	isb	sy
 8013042:	e780      	b.n	8012f46 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8013044:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013046:	f000 fa6e 	bl	8013526 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801304a:	f000 fdbf 	bl	8013bcc <xTaskResumeAll>
 801304e:	e77a      	b.n	8012f46 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8013050:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013052:	f000 fa68 	bl	8013526 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013056:	f000 fdb9 	bl	8013bcc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801305a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801305c:	f000 fab5 	bl	80135ca <prvIsQueueEmpty>
 8013060:	4603      	mov	r3, r0
 8013062:	2b00      	cmp	r3, #0
 8013064:	f43f af6f 	beq.w	8012f46 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8013068:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801306a:	4618      	mov	r0, r3
 801306c:	3730      	adds	r7, #48	; 0x30
 801306e:	46bd      	mov	sp, r7
 8013070:	bd80      	pop	{r7, pc}
 8013072:	bf00      	nop
 8013074:	e000ed04 	.word	0xe000ed04

08013078 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8013078:	b580      	push	{r7, lr}
 801307a:	b08e      	sub	sp, #56	; 0x38
 801307c:	af00      	add	r7, sp, #0
 801307e:	6078      	str	r0, [r7, #4]
 8013080:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8013082:	2300      	movs	r3, #0
 8013084:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 801308a:	2300      	movs	r3, #0
 801308c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801308e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013090:	2b00      	cmp	r3, #0
 8013092:	d10a      	bne.n	80130aa <xQueueSemaphoreTake+0x32>
	__asm volatile
 8013094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013098:	f383 8811 	msr	BASEPRI, r3
 801309c:	f3bf 8f6f 	isb	sy
 80130a0:	f3bf 8f4f 	dsb	sy
 80130a4:	623b      	str	r3, [r7, #32]
}
 80130a6:	bf00      	nop
 80130a8:	e7fe      	b.n	80130a8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80130aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80130ae:	2b00      	cmp	r3, #0
 80130b0:	d00a      	beq.n	80130c8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80130b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130b6:	f383 8811 	msr	BASEPRI, r3
 80130ba:	f3bf 8f6f 	isb	sy
 80130be:	f3bf 8f4f 	dsb	sy
 80130c2:	61fb      	str	r3, [r7, #28]
}
 80130c4:	bf00      	nop
 80130c6:	e7fe      	b.n	80130c6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80130c8:	f001 f976 	bl	80143b8 <xTaskGetSchedulerState>
 80130cc:	4603      	mov	r3, r0
 80130ce:	2b00      	cmp	r3, #0
 80130d0:	d102      	bne.n	80130d8 <xQueueSemaphoreTake+0x60>
 80130d2:	683b      	ldr	r3, [r7, #0]
 80130d4:	2b00      	cmp	r3, #0
 80130d6:	d101      	bne.n	80130dc <xQueueSemaphoreTake+0x64>
 80130d8:	2301      	movs	r3, #1
 80130da:	e000      	b.n	80130de <xQueueSemaphoreTake+0x66>
 80130dc:	2300      	movs	r3, #0
 80130de:	2b00      	cmp	r3, #0
 80130e0:	d10a      	bne.n	80130f8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80130e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130e6:	f383 8811 	msr	BASEPRI, r3
 80130ea:	f3bf 8f6f 	isb	sy
 80130ee:	f3bf 8f4f 	dsb	sy
 80130f2:	61bb      	str	r3, [r7, #24]
}
 80130f4:	bf00      	nop
 80130f6:	e7fe      	b.n	80130f6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80130f8:	f002 f9ec 	bl	80154d4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80130fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013100:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8013102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013104:	2b00      	cmp	r3, #0
 8013106:	d024      	beq.n	8013152 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8013108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801310a:	1e5a      	subs	r2, r3, #1
 801310c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801310e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013112:	681b      	ldr	r3, [r3, #0]
 8013114:	2b00      	cmp	r3, #0
 8013116:	d104      	bne.n	8013122 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8013118:	f001 fac4 	bl	80146a4 <pvTaskIncrementMutexHeldCount>
 801311c:	4602      	mov	r2, r0
 801311e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013120:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013124:	691b      	ldr	r3, [r3, #16]
 8013126:	2b00      	cmp	r3, #0
 8013128:	d00f      	beq.n	801314a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801312a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801312c:	3310      	adds	r3, #16
 801312e:	4618      	mov	r0, r3
 8013130:	f000 ff74 	bl	801401c <xTaskRemoveFromEventList>
 8013134:	4603      	mov	r3, r0
 8013136:	2b00      	cmp	r3, #0
 8013138:	d007      	beq.n	801314a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801313a:	4b54      	ldr	r3, [pc, #336]	; (801328c <xQueueSemaphoreTake+0x214>)
 801313c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013140:	601a      	str	r2, [r3, #0]
 8013142:	f3bf 8f4f 	dsb	sy
 8013146:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801314a:	f002 f9f3 	bl	8015534 <vPortExitCritical>
				return pdPASS;
 801314e:	2301      	movs	r3, #1
 8013150:	e097      	b.n	8013282 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013152:	683b      	ldr	r3, [r7, #0]
 8013154:	2b00      	cmp	r3, #0
 8013156:	d111      	bne.n	801317c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8013158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801315a:	2b00      	cmp	r3, #0
 801315c:	d00a      	beq.n	8013174 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 801315e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013162:	f383 8811 	msr	BASEPRI, r3
 8013166:	f3bf 8f6f 	isb	sy
 801316a:	f3bf 8f4f 	dsb	sy
 801316e:	617b      	str	r3, [r7, #20]
}
 8013170:	bf00      	nop
 8013172:	e7fe      	b.n	8013172 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8013174:	f002 f9de 	bl	8015534 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013178:	2300      	movs	r3, #0
 801317a:	e082      	b.n	8013282 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 801317c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801317e:	2b00      	cmp	r3, #0
 8013180:	d106      	bne.n	8013190 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013182:	f107 030c 	add.w	r3, r7, #12
 8013186:	4618      	mov	r0, r3
 8013188:	f000 ffac 	bl	80140e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801318c:	2301      	movs	r3, #1
 801318e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013190:	f002 f9d0 	bl	8015534 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013194:	f000 fd0c 	bl	8013bb0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013198:	f002 f99c 	bl	80154d4 <vPortEnterCritical>
 801319c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801319e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80131a2:	b25b      	sxtb	r3, r3
 80131a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80131a8:	d103      	bne.n	80131b2 <xQueueSemaphoreTake+0x13a>
 80131aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131ac:	2200      	movs	r2, #0
 80131ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80131b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80131b8:	b25b      	sxtb	r3, r3
 80131ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80131be:	d103      	bne.n	80131c8 <xQueueSemaphoreTake+0x150>
 80131c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131c2:	2200      	movs	r2, #0
 80131c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80131c8:	f002 f9b4 	bl	8015534 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80131cc:	463a      	mov	r2, r7
 80131ce:	f107 030c 	add.w	r3, r7, #12
 80131d2:	4611      	mov	r1, r2
 80131d4:	4618      	mov	r0, r3
 80131d6:	f000 ff9b 	bl	8014110 <xTaskCheckForTimeOut>
 80131da:	4603      	mov	r3, r0
 80131dc:	2b00      	cmp	r3, #0
 80131de:	d132      	bne.n	8013246 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80131e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80131e2:	f000 f9f2 	bl	80135ca <prvIsQueueEmpty>
 80131e6:	4603      	mov	r3, r0
 80131e8:	2b00      	cmp	r3, #0
 80131ea:	d026      	beq.n	801323a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80131ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131ee:	681b      	ldr	r3, [r3, #0]
 80131f0:	2b00      	cmp	r3, #0
 80131f2:	d109      	bne.n	8013208 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80131f4:	f002 f96e 	bl	80154d4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80131f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131fa:	689b      	ldr	r3, [r3, #8]
 80131fc:	4618      	mov	r0, r3
 80131fe:	f001 f8f9 	bl	80143f4 <xTaskPriorityInherit>
 8013202:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8013204:	f002 f996 	bl	8015534 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801320a:	3324      	adds	r3, #36	; 0x24
 801320c:	683a      	ldr	r2, [r7, #0]
 801320e:	4611      	mov	r1, r2
 8013210:	4618      	mov	r0, r3
 8013212:	f000 feb3 	bl	8013f7c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013216:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013218:	f000 f985 	bl	8013526 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801321c:	f000 fcd6 	bl	8013bcc <xTaskResumeAll>
 8013220:	4603      	mov	r3, r0
 8013222:	2b00      	cmp	r3, #0
 8013224:	f47f af68 	bne.w	80130f8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8013228:	4b18      	ldr	r3, [pc, #96]	; (801328c <xQueueSemaphoreTake+0x214>)
 801322a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801322e:	601a      	str	r2, [r3, #0]
 8013230:	f3bf 8f4f 	dsb	sy
 8013234:	f3bf 8f6f 	isb	sy
 8013238:	e75e      	b.n	80130f8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 801323a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801323c:	f000 f973 	bl	8013526 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013240:	f000 fcc4 	bl	8013bcc <xTaskResumeAll>
 8013244:	e758      	b.n	80130f8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8013246:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013248:	f000 f96d 	bl	8013526 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801324c:	f000 fcbe 	bl	8013bcc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013250:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013252:	f000 f9ba 	bl	80135ca <prvIsQueueEmpty>
 8013256:	4603      	mov	r3, r0
 8013258:	2b00      	cmp	r3, #0
 801325a:	f43f af4d 	beq.w	80130f8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801325e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013260:	2b00      	cmp	r3, #0
 8013262:	d00d      	beq.n	8013280 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8013264:	f002 f936 	bl	80154d4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8013268:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801326a:	f000 f8b4 	bl	80133d6 <prvGetDisinheritPriorityAfterTimeout>
 801326e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8013270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013272:	689b      	ldr	r3, [r3, #8]
 8013274:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013276:	4618      	mov	r0, r3
 8013278:	f001 f992 	bl	80145a0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 801327c:	f002 f95a 	bl	8015534 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8013280:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8013282:	4618      	mov	r0, r3
 8013284:	3738      	adds	r7, #56	; 0x38
 8013286:	46bd      	mov	sp, r7
 8013288:	bd80      	pop	{r7, pc}
 801328a:	bf00      	nop
 801328c:	e000ed04 	.word	0xe000ed04

08013290 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8013290:	b580      	push	{r7, lr}
 8013292:	b08e      	sub	sp, #56	; 0x38
 8013294:	af00      	add	r7, sp, #0
 8013296:	60f8      	str	r0, [r7, #12]
 8013298:	60b9      	str	r1, [r7, #8]
 801329a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801329c:	68fb      	ldr	r3, [r7, #12]
 801329e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80132a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132a2:	2b00      	cmp	r3, #0
 80132a4:	d10a      	bne.n	80132bc <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80132a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132aa:	f383 8811 	msr	BASEPRI, r3
 80132ae:	f3bf 8f6f 	isb	sy
 80132b2:	f3bf 8f4f 	dsb	sy
 80132b6:	623b      	str	r3, [r7, #32]
}
 80132b8:	bf00      	nop
 80132ba:	e7fe      	b.n	80132ba <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80132bc:	68bb      	ldr	r3, [r7, #8]
 80132be:	2b00      	cmp	r3, #0
 80132c0:	d103      	bne.n	80132ca <xQueueReceiveFromISR+0x3a>
 80132c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	d101      	bne.n	80132ce <xQueueReceiveFromISR+0x3e>
 80132ca:	2301      	movs	r3, #1
 80132cc:	e000      	b.n	80132d0 <xQueueReceiveFromISR+0x40>
 80132ce:	2300      	movs	r3, #0
 80132d0:	2b00      	cmp	r3, #0
 80132d2:	d10a      	bne.n	80132ea <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80132d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132d8:	f383 8811 	msr	BASEPRI, r3
 80132dc:	f3bf 8f6f 	isb	sy
 80132e0:	f3bf 8f4f 	dsb	sy
 80132e4:	61fb      	str	r3, [r7, #28]
}
 80132e6:	bf00      	nop
 80132e8:	e7fe      	b.n	80132e8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80132ea:	f002 f9d5 	bl	8015698 <vPortValidateInterruptPriority>
	__asm volatile
 80132ee:	f3ef 8211 	mrs	r2, BASEPRI
 80132f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132f6:	f383 8811 	msr	BASEPRI, r3
 80132fa:	f3bf 8f6f 	isb	sy
 80132fe:	f3bf 8f4f 	dsb	sy
 8013302:	61ba      	str	r2, [r7, #24]
 8013304:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8013306:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013308:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801330a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801330c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801330e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013312:	2b00      	cmp	r3, #0
 8013314:	d02f      	beq.n	8013376 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8013316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013318:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801331c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013320:	68b9      	ldr	r1, [r7, #8]
 8013322:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013324:	f000 f8d9 	bl	80134da <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801332a:	1e5a      	subs	r2, r3, #1
 801332c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801332e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8013330:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8013334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013338:	d112      	bne.n	8013360 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801333a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801333c:	691b      	ldr	r3, [r3, #16]
 801333e:	2b00      	cmp	r3, #0
 8013340:	d016      	beq.n	8013370 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013344:	3310      	adds	r3, #16
 8013346:	4618      	mov	r0, r3
 8013348:	f000 fe68 	bl	801401c <xTaskRemoveFromEventList>
 801334c:	4603      	mov	r3, r0
 801334e:	2b00      	cmp	r3, #0
 8013350:	d00e      	beq.n	8013370 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8013352:	687b      	ldr	r3, [r7, #4]
 8013354:	2b00      	cmp	r3, #0
 8013356:	d00b      	beq.n	8013370 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8013358:	687b      	ldr	r3, [r7, #4]
 801335a:	2201      	movs	r2, #1
 801335c:	601a      	str	r2, [r3, #0]
 801335e:	e007      	b.n	8013370 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8013360:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013364:	3301      	adds	r3, #1
 8013366:	b2db      	uxtb	r3, r3
 8013368:	b25a      	sxtb	r2, r3
 801336a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801336c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8013370:	2301      	movs	r3, #1
 8013372:	637b      	str	r3, [r7, #52]	; 0x34
 8013374:	e001      	b.n	801337a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8013376:	2300      	movs	r3, #0
 8013378:	637b      	str	r3, [r7, #52]	; 0x34
 801337a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801337c:	613b      	str	r3, [r7, #16]
	__asm volatile
 801337e:	693b      	ldr	r3, [r7, #16]
 8013380:	f383 8811 	msr	BASEPRI, r3
}
 8013384:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8013388:	4618      	mov	r0, r3
 801338a:	3738      	adds	r7, #56	; 0x38
 801338c:	46bd      	mov	sp, r7
 801338e:	bd80      	pop	{r7, pc}

08013390 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8013390:	b580      	push	{r7, lr}
 8013392:	b084      	sub	sp, #16
 8013394:	af00      	add	r7, sp, #0
 8013396:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801339c:	68fb      	ldr	r3, [r7, #12]
 801339e:	2b00      	cmp	r3, #0
 80133a0:	d10a      	bne.n	80133b8 <vQueueDelete+0x28>
	__asm volatile
 80133a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133a6:	f383 8811 	msr	BASEPRI, r3
 80133aa:	f3bf 8f6f 	isb	sy
 80133ae:	f3bf 8f4f 	dsb	sy
 80133b2:	60bb      	str	r3, [r7, #8]
}
 80133b4:	bf00      	nop
 80133b6:	e7fe      	b.n	80133b6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80133b8:	68f8      	ldr	r0, [r7, #12]
 80133ba:	f000 f95f 	bl	801367c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80133be:	68fb      	ldr	r3, [r7, #12]
 80133c0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80133c4:	2b00      	cmp	r3, #0
 80133c6:	d102      	bne.n	80133ce <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80133c8:	68f8      	ldr	r0, [r7, #12]
 80133ca:	f002 fa71 	bl	80158b0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80133ce:	bf00      	nop
 80133d0:	3710      	adds	r7, #16
 80133d2:	46bd      	mov	sp, r7
 80133d4:	bd80      	pop	{r7, pc}

080133d6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80133d6:	b480      	push	{r7}
 80133d8:	b085      	sub	sp, #20
 80133da:	af00      	add	r7, sp, #0
 80133dc:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80133de:	687b      	ldr	r3, [r7, #4]
 80133e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80133e2:	2b00      	cmp	r3, #0
 80133e4:	d006      	beq.n	80133f4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80133ea:	681b      	ldr	r3, [r3, #0]
 80133ec:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80133f0:	60fb      	str	r3, [r7, #12]
 80133f2:	e001      	b.n	80133f8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80133f4:	2300      	movs	r3, #0
 80133f6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80133f8:	68fb      	ldr	r3, [r7, #12]
	}
 80133fa:	4618      	mov	r0, r3
 80133fc:	3714      	adds	r7, #20
 80133fe:	46bd      	mov	sp, r7
 8013400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013404:	4770      	bx	lr

08013406 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8013406:	b580      	push	{r7, lr}
 8013408:	b086      	sub	sp, #24
 801340a:	af00      	add	r7, sp, #0
 801340c:	60f8      	str	r0, [r7, #12]
 801340e:	60b9      	str	r1, [r7, #8]
 8013410:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8013412:	2300      	movs	r3, #0
 8013414:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013416:	68fb      	ldr	r3, [r7, #12]
 8013418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801341a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801341c:	68fb      	ldr	r3, [r7, #12]
 801341e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013420:	2b00      	cmp	r3, #0
 8013422:	d10d      	bne.n	8013440 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013424:	68fb      	ldr	r3, [r7, #12]
 8013426:	681b      	ldr	r3, [r3, #0]
 8013428:	2b00      	cmp	r3, #0
 801342a:	d14d      	bne.n	80134c8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801342c:	68fb      	ldr	r3, [r7, #12]
 801342e:	689b      	ldr	r3, [r3, #8]
 8013430:	4618      	mov	r0, r3
 8013432:	f001 f847 	bl	80144c4 <xTaskPriorityDisinherit>
 8013436:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8013438:	68fb      	ldr	r3, [r7, #12]
 801343a:	2200      	movs	r2, #0
 801343c:	609a      	str	r2, [r3, #8]
 801343e:	e043      	b.n	80134c8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8013440:	687b      	ldr	r3, [r7, #4]
 8013442:	2b00      	cmp	r3, #0
 8013444:	d119      	bne.n	801347a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013446:	68fb      	ldr	r3, [r7, #12]
 8013448:	6858      	ldr	r0, [r3, #4]
 801344a:	68fb      	ldr	r3, [r7, #12]
 801344c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801344e:	461a      	mov	r2, r3
 8013450:	68b9      	ldr	r1, [r7, #8]
 8013452:	f011 fad7 	bl	8024a04 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013456:	68fb      	ldr	r3, [r7, #12]
 8013458:	685a      	ldr	r2, [r3, #4]
 801345a:	68fb      	ldr	r3, [r7, #12]
 801345c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801345e:	441a      	add	r2, r3
 8013460:	68fb      	ldr	r3, [r7, #12]
 8013462:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013464:	68fb      	ldr	r3, [r7, #12]
 8013466:	685a      	ldr	r2, [r3, #4]
 8013468:	68fb      	ldr	r3, [r7, #12]
 801346a:	689b      	ldr	r3, [r3, #8]
 801346c:	429a      	cmp	r2, r3
 801346e:	d32b      	bcc.n	80134c8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8013470:	68fb      	ldr	r3, [r7, #12]
 8013472:	681a      	ldr	r2, [r3, #0]
 8013474:	68fb      	ldr	r3, [r7, #12]
 8013476:	605a      	str	r2, [r3, #4]
 8013478:	e026      	b.n	80134c8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801347a:	68fb      	ldr	r3, [r7, #12]
 801347c:	68d8      	ldr	r0, [r3, #12]
 801347e:	68fb      	ldr	r3, [r7, #12]
 8013480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013482:	461a      	mov	r2, r3
 8013484:	68b9      	ldr	r1, [r7, #8]
 8013486:	f011 fabd 	bl	8024a04 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801348a:	68fb      	ldr	r3, [r7, #12]
 801348c:	68da      	ldr	r2, [r3, #12]
 801348e:	68fb      	ldr	r3, [r7, #12]
 8013490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013492:	425b      	negs	r3, r3
 8013494:	441a      	add	r2, r3
 8013496:	68fb      	ldr	r3, [r7, #12]
 8013498:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801349a:	68fb      	ldr	r3, [r7, #12]
 801349c:	68da      	ldr	r2, [r3, #12]
 801349e:	68fb      	ldr	r3, [r7, #12]
 80134a0:	681b      	ldr	r3, [r3, #0]
 80134a2:	429a      	cmp	r2, r3
 80134a4:	d207      	bcs.n	80134b6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80134a6:	68fb      	ldr	r3, [r7, #12]
 80134a8:	689a      	ldr	r2, [r3, #8]
 80134aa:	68fb      	ldr	r3, [r7, #12]
 80134ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80134ae:	425b      	negs	r3, r3
 80134b0:	441a      	add	r2, r3
 80134b2:	68fb      	ldr	r3, [r7, #12]
 80134b4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80134b6:	687b      	ldr	r3, [r7, #4]
 80134b8:	2b02      	cmp	r3, #2
 80134ba:	d105      	bne.n	80134c8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80134bc:	693b      	ldr	r3, [r7, #16]
 80134be:	2b00      	cmp	r3, #0
 80134c0:	d002      	beq.n	80134c8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80134c2:	693b      	ldr	r3, [r7, #16]
 80134c4:	3b01      	subs	r3, #1
 80134c6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80134c8:	693b      	ldr	r3, [r7, #16]
 80134ca:	1c5a      	adds	r2, r3, #1
 80134cc:	68fb      	ldr	r3, [r7, #12]
 80134ce:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80134d0:	697b      	ldr	r3, [r7, #20]
}
 80134d2:	4618      	mov	r0, r3
 80134d4:	3718      	adds	r7, #24
 80134d6:	46bd      	mov	sp, r7
 80134d8:	bd80      	pop	{r7, pc}

080134da <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80134da:	b580      	push	{r7, lr}
 80134dc:	b082      	sub	sp, #8
 80134de:	af00      	add	r7, sp, #0
 80134e0:	6078      	str	r0, [r7, #4]
 80134e2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80134e8:	2b00      	cmp	r3, #0
 80134ea:	d018      	beq.n	801351e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	68da      	ldr	r2, [r3, #12]
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80134f4:	441a      	add	r2, r3
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	68da      	ldr	r2, [r3, #12]
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	689b      	ldr	r3, [r3, #8]
 8013502:	429a      	cmp	r2, r3
 8013504:	d303      	bcc.n	801350e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8013506:	687b      	ldr	r3, [r7, #4]
 8013508:	681a      	ldr	r2, [r3, #0]
 801350a:	687b      	ldr	r3, [r7, #4]
 801350c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	68d9      	ldr	r1, [r3, #12]
 8013512:	687b      	ldr	r3, [r7, #4]
 8013514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013516:	461a      	mov	r2, r3
 8013518:	6838      	ldr	r0, [r7, #0]
 801351a:	f011 fa73 	bl	8024a04 <memcpy>
	}
}
 801351e:	bf00      	nop
 8013520:	3708      	adds	r7, #8
 8013522:	46bd      	mov	sp, r7
 8013524:	bd80      	pop	{r7, pc}

08013526 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8013526:	b580      	push	{r7, lr}
 8013528:	b084      	sub	sp, #16
 801352a:	af00      	add	r7, sp, #0
 801352c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801352e:	f001 ffd1 	bl	80154d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8013532:	687b      	ldr	r3, [r7, #4]
 8013534:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013538:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801353a:	e011      	b.n	8013560 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013540:	2b00      	cmp	r3, #0
 8013542:	d012      	beq.n	801356a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013544:	687b      	ldr	r3, [r7, #4]
 8013546:	3324      	adds	r3, #36	; 0x24
 8013548:	4618      	mov	r0, r3
 801354a:	f000 fd67 	bl	801401c <xTaskRemoveFromEventList>
 801354e:	4603      	mov	r3, r0
 8013550:	2b00      	cmp	r3, #0
 8013552:	d001      	beq.n	8013558 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8013554:	f000 fe3e 	bl	80141d4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8013558:	7bfb      	ldrb	r3, [r7, #15]
 801355a:	3b01      	subs	r3, #1
 801355c:	b2db      	uxtb	r3, r3
 801355e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013560:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013564:	2b00      	cmp	r3, #0
 8013566:	dce9      	bgt.n	801353c <prvUnlockQueue+0x16>
 8013568:	e000      	b.n	801356c <prvUnlockQueue+0x46>
					break;
 801356a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	22ff      	movs	r2, #255	; 0xff
 8013570:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8013574:	f001 ffde 	bl	8015534 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8013578:	f001 ffac 	bl	80154d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013582:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013584:	e011      	b.n	80135aa <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	691b      	ldr	r3, [r3, #16]
 801358a:	2b00      	cmp	r3, #0
 801358c:	d012      	beq.n	80135b4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801358e:	687b      	ldr	r3, [r7, #4]
 8013590:	3310      	adds	r3, #16
 8013592:	4618      	mov	r0, r3
 8013594:	f000 fd42 	bl	801401c <xTaskRemoveFromEventList>
 8013598:	4603      	mov	r3, r0
 801359a:	2b00      	cmp	r3, #0
 801359c:	d001      	beq.n	80135a2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801359e:	f000 fe19 	bl	80141d4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80135a2:	7bbb      	ldrb	r3, [r7, #14]
 80135a4:	3b01      	subs	r3, #1
 80135a6:	b2db      	uxtb	r3, r3
 80135a8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80135aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	dce9      	bgt.n	8013586 <prvUnlockQueue+0x60>
 80135b2:	e000      	b.n	80135b6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80135b4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	22ff      	movs	r2, #255	; 0xff
 80135ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80135be:	f001 ffb9 	bl	8015534 <vPortExitCritical>
}
 80135c2:	bf00      	nop
 80135c4:	3710      	adds	r7, #16
 80135c6:	46bd      	mov	sp, r7
 80135c8:	bd80      	pop	{r7, pc}

080135ca <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80135ca:	b580      	push	{r7, lr}
 80135cc:	b084      	sub	sp, #16
 80135ce:	af00      	add	r7, sp, #0
 80135d0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80135d2:	f001 ff7f 	bl	80154d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80135d6:	687b      	ldr	r3, [r7, #4]
 80135d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80135da:	2b00      	cmp	r3, #0
 80135dc:	d102      	bne.n	80135e4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80135de:	2301      	movs	r3, #1
 80135e0:	60fb      	str	r3, [r7, #12]
 80135e2:	e001      	b.n	80135e8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80135e4:	2300      	movs	r3, #0
 80135e6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80135e8:	f001 ffa4 	bl	8015534 <vPortExitCritical>

	return xReturn;
 80135ec:	68fb      	ldr	r3, [r7, #12]
}
 80135ee:	4618      	mov	r0, r3
 80135f0:	3710      	adds	r7, #16
 80135f2:	46bd      	mov	sp, r7
 80135f4:	bd80      	pop	{r7, pc}

080135f6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80135f6:	b580      	push	{r7, lr}
 80135f8:	b084      	sub	sp, #16
 80135fa:	af00      	add	r7, sp, #0
 80135fc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80135fe:	f001 ff69 	bl	80154d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8013602:	687b      	ldr	r3, [r7, #4]
 8013604:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801360a:	429a      	cmp	r2, r3
 801360c:	d102      	bne.n	8013614 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801360e:	2301      	movs	r3, #1
 8013610:	60fb      	str	r3, [r7, #12]
 8013612:	e001      	b.n	8013618 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8013614:	2300      	movs	r3, #0
 8013616:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013618:	f001 ff8c 	bl	8015534 <vPortExitCritical>

	return xReturn;
 801361c:	68fb      	ldr	r3, [r7, #12]
}
 801361e:	4618      	mov	r0, r3
 8013620:	3710      	adds	r7, #16
 8013622:	46bd      	mov	sp, r7
 8013624:	bd80      	pop	{r7, pc}
	...

08013628 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8013628:	b480      	push	{r7}
 801362a:	b085      	sub	sp, #20
 801362c:	af00      	add	r7, sp, #0
 801362e:	6078      	str	r0, [r7, #4]
 8013630:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013632:	2300      	movs	r3, #0
 8013634:	60fb      	str	r3, [r7, #12]
 8013636:	e014      	b.n	8013662 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8013638:	4a0f      	ldr	r2, [pc, #60]	; (8013678 <vQueueAddToRegistry+0x50>)
 801363a:	68fb      	ldr	r3, [r7, #12]
 801363c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8013640:	2b00      	cmp	r3, #0
 8013642:	d10b      	bne.n	801365c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8013644:	490c      	ldr	r1, [pc, #48]	; (8013678 <vQueueAddToRegistry+0x50>)
 8013646:	68fb      	ldr	r3, [r7, #12]
 8013648:	683a      	ldr	r2, [r7, #0]
 801364a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801364e:	4a0a      	ldr	r2, [pc, #40]	; (8013678 <vQueueAddToRegistry+0x50>)
 8013650:	68fb      	ldr	r3, [r7, #12]
 8013652:	00db      	lsls	r3, r3, #3
 8013654:	4413      	add	r3, r2
 8013656:	687a      	ldr	r2, [r7, #4]
 8013658:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801365a:	e006      	b.n	801366a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801365c:	68fb      	ldr	r3, [r7, #12]
 801365e:	3301      	adds	r3, #1
 8013660:	60fb      	str	r3, [r7, #12]
 8013662:	68fb      	ldr	r3, [r7, #12]
 8013664:	2b07      	cmp	r3, #7
 8013666:	d9e7      	bls.n	8013638 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8013668:	bf00      	nop
 801366a:	bf00      	nop
 801366c:	3714      	adds	r7, #20
 801366e:	46bd      	mov	sp, r7
 8013670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013674:	4770      	bx	lr
 8013676:	bf00      	nop
 8013678:	20017734 	.word	0x20017734

0801367c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 801367c:	b480      	push	{r7}
 801367e:	b085      	sub	sp, #20
 8013680:	af00      	add	r7, sp, #0
 8013682:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013684:	2300      	movs	r3, #0
 8013686:	60fb      	str	r3, [r7, #12]
 8013688:	e016      	b.n	80136b8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 801368a:	4a10      	ldr	r2, [pc, #64]	; (80136cc <vQueueUnregisterQueue+0x50>)
 801368c:	68fb      	ldr	r3, [r7, #12]
 801368e:	00db      	lsls	r3, r3, #3
 8013690:	4413      	add	r3, r2
 8013692:	685b      	ldr	r3, [r3, #4]
 8013694:	687a      	ldr	r2, [r7, #4]
 8013696:	429a      	cmp	r2, r3
 8013698:	d10b      	bne.n	80136b2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 801369a:	4a0c      	ldr	r2, [pc, #48]	; (80136cc <vQueueUnregisterQueue+0x50>)
 801369c:	68fb      	ldr	r3, [r7, #12]
 801369e:	2100      	movs	r1, #0
 80136a0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80136a4:	4a09      	ldr	r2, [pc, #36]	; (80136cc <vQueueUnregisterQueue+0x50>)
 80136a6:	68fb      	ldr	r3, [r7, #12]
 80136a8:	00db      	lsls	r3, r3, #3
 80136aa:	4413      	add	r3, r2
 80136ac:	2200      	movs	r2, #0
 80136ae:	605a      	str	r2, [r3, #4]
				break;
 80136b0:	e006      	b.n	80136c0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80136b2:	68fb      	ldr	r3, [r7, #12]
 80136b4:	3301      	adds	r3, #1
 80136b6:	60fb      	str	r3, [r7, #12]
 80136b8:	68fb      	ldr	r3, [r7, #12]
 80136ba:	2b07      	cmp	r3, #7
 80136bc:	d9e5      	bls.n	801368a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80136be:	bf00      	nop
 80136c0:	bf00      	nop
 80136c2:	3714      	adds	r7, #20
 80136c4:	46bd      	mov	sp, r7
 80136c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136ca:	4770      	bx	lr
 80136cc:	20017734 	.word	0x20017734

080136d0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80136d0:	b580      	push	{r7, lr}
 80136d2:	b086      	sub	sp, #24
 80136d4:	af00      	add	r7, sp, #0
 80136d6:	60f8      	str	r0, [r7, #12]
 80136d8:	60b9      	str	r1, [r7, #8]
 80136da:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80136dc:	68fb      	ldr	r3, [r7, #12]
 80136de:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80136e0:	f001 fef8 	bl	80154d4 <vPortEnterCritical>
 80136e4:	697b      	ldr	r3, [r7, #20]
 80136e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80136ea:	b25b      	sxtb	r3, r3
 80136ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80136f0:	d103      	bne.n	80136fa <vQueueWaitForMessageRestricted+0x2a>
 80136f2:	697b      	ldr	r3, [r7, #20]
 80136f4:	2200      	movs	r2, #0
 80136f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80136fa:	697b      	ldr	r3, [r7, #20]
 80136fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013700:	b25b      	sxtb	r3, r3
 8013702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013706:	d103      	bne.n	8013710 <vQueueWaitForMessageRestricted+0x40>
 8013708:	697b      	ldr	r3, [r7, #20]
 801370a:	2200      	movs	r2, #0
 801370c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013710:	f001 ff10 	bl	8015534 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8013714:	697b      	ldr	r3, [r7, #20]
 8013716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013718:	2b00      	cmp	r3, #0
 801371a:	d106      	bne.n	801372a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 801371c:	697b      	ldr	r3, [r7, #20]
 801371e:	3324      	adds	r3, #36	; 0x24
 8013720:	687a      	ldr	r2, [r7, #4]
 8013722:	68b9      	ldr	r1, [r7, #8]
 8013724:	4618      	mov	r0, r3
 8013726:	f000 fc4d 	bl	8013fc4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801372a:	6978      	ldr	r0, [r7, #20]
 801372c:	f7ff fefb 	bl	8013526 <prvUnlockQueue>
	}
 8013730:	bf00      	nop
 8013732:	3718      	adds	r7, #24
 8013734:	46bd      	mov	sp, r7
 8013736:	bd80      	pop	{r7, pc}

08013738 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8013738:	b580      	push	{r7, lr}
 801373a:	b08e      	sub	sp, #56	; 0x38
 801373c:	af04      	add	r7, sp, #16
 801373e:	60f8      	str	r0, [r7, #12]
 8013740:	60b9      	str	r1, [r7, #8]
 8013742:	607a      	str	r2, [r7, #4]
 8013744:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8013746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013748:	2b00      	cmp	r3, #0
 801374a:	d10a      	bne.n	8013762 <xTaskCreateStatic+0x2a>
	__asm volatile
 801374c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013750:	f383 8811 	msr	BASEPRI, r3
 8013754:	f3bf 8f6f 	isb	sy
 8013758:	f3bf 8f4f 	dsb	sy
 801375c:	623b      	str	r3, [r7, #32]
}
 801375e:	bf00      	nop
 8013760:	e7fe      	b.n	8013760 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8013762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013764:	2b00      	cmp	r3, #0
 8013766:	d10a      	bne.n	801377e <xTaskCreateStatic+0x46>
	__asm volatile
 8013768:	f04f 0350 	mov.w	r3, #80	; 0x50
 801376c:	f383 8811 	msr	BASEPRI, r3
 8013770:	f3bf 8f6f 	isb	sy
 8013774:	f3bf 8f4f 	dsb	sy
 8013778:	61fb      	str	r3, [r7, #28]
}
 801377a:	bf00      	nop
 801377c:	e7fe      	b.n	801377c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801377e:	235c      	movs	r3, #92	; 0x5c
 8013780:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8013782:	693b      	ldr	r3, [r7, #16]
 8013784:	2b5c      	cmp	r3, #92	; 0x5c
 8013786:	d00a      	beq.n	801379e <xTaskCreateStatic+0x66>
	__asm volatile
 8013788:	f04f 0350 	mov.w	r3, #80	; 0x50
 801378c:	f383 8811 	msr	BASEPRI, r3
 8013790:	f3bf 8f6f 	isb	sy
 8013794:	f3bf 8f4f 	dsb	sy
 8013798:	61bb      	str	r3, [r7, #24]
}
 801379a:	bf00      	nop
 801379c:	e7fe      	b.n	801379c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801379e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80137a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137a2:	2b00      	cmp	r3, #0
 80137a4:	d01e      	beq.n	80137e4 <xTaskCreateStatic+0xac>
 80137a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80137a8:	2b00      	cmp	r3, #0
 80137aa:	d01b      	beq.n	80137e4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80137ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137ae:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80137b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80137b4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80137b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137b8:	2202      	movs	r2, #2
 80137ba:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80137be:	2300      	movs	r3, #0
 80137c0:	9303      	str	r3, [sp, #12]
 80137c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137c4:	9302      	str	r3, [sp, #8]
 80137c6:	f107 0314 	add.w	r3, r7, #20
 80137ca:	9301      	str	r3, [sp, #4]
 80137cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137ce:	9300      	str	r3, [sp, #0]
 80137d0:	683b      	ldr	r3, [r7, #0]
 80137d2:	687a      	ldr	r2, [r7, #4]
 80137d4:	68b9      	ldr	r1, [r7, #8]
 80137d6:	68f8      	ldr	r0, [r7, #12]
 80137d8:	f000 f850 	bl	801387c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80137dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80137de:	f000 f8dd 	bl	801399c <prvAddNewTaskToReadyList>
 80137e2:	e001      	b.n	80137e8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80137e4:	2300      	movs	r3, #0
 80137e6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80137e8:	697b      	ldr	r3, [r7, #20]
	}
 80137ea:	4618      	mov	r0, r3
 80137ec:	3728      	adds	r7, #40	; 0x28
 80137ee:	46bd      	mov	sp, r7
 80137f0:	bd80      	pop	{r7, pc}

080137f2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80137f2:	b580      	push	{r7, lr}
 80137f4:	b08c      	sub	sp, #48	; 0x30
 80137f6:	af04      	add	r7, sp, #16
 80137f8:	60f8      	str	r0, [r7, #12]
 80137fa:	60b9      	str	r1, [r7, #8]
 80137fc:	603b      	str	r3, [r7, #0]
 80137fe:	4613      	mov	r3, r2
 8013800:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8013802:	88fb      	ldrh	r3, [r7, #6]
 8013804:	009b      	lsls	r3, r3, #2
 8013806:	4618      	mov	r0, r3
 8013808:	f001 ff86 	bl	8015718 <pvPortMalloc>
 801380c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801380e:	697b      	ldr	r3, [r7, #20]
 8013810:	2b00      	cmp	r3, #0
 8013812:	d00e      	beq.n	8013832 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8013814:	205c      	movs	r0, #92	; 0x5c
 8013816:	f001 ff7f 	bl	8015718 <pvPortMalloc>
 801381a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801381c:	69fb      	ldr	r3, [r7, #28]
 801381e:	2b00      	cmp	r3, #0
 8013820:	d003      	beq.n	801382a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8013822:	69fb      	ldr	r3, [r7, #28]
 8013824:	697a      	ldr	r2, [r7, #20]
 8013826:	631a      	str	r2, [r3, #48]	; 0x30
 8013828:	e005      	b.n	8013836 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801382a:	6978      	ldr	r0, [r7, #20]
 801382c:	f002 f840 	bl	80158b0 <vPortFree>
 8013830:	e001      	b.n	8013836 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8013832:	2300      	movs	r3, #0
 8013834:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8013836:	69fb      	ldr	r3, [r7, #28]
 8013838:	2b00      	cmp	r3, #0
 801383a:	d017      	beq.n	801386c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801383c:	69fb      	ldr	r3, [r7, #28]
 801383e:	2200      	movs	r2, #0
 8013840:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8013844:	88fa      	ldrh	r2, [r7, #6]
 8013846:	2300      	movs	r3, #0
 8013848:	9303      	str	r3, [sp, #12]
 801384a:	69fb      	ldr	r3, [r7, #28]
 801384c:	9302      	str	r3, [sp, #8]
 801384e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013850:	9301      	str	r3, [sp, #4]
 8013852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013854:	9300      	str	r3, [sp, #0]
 8013856:	683b      	ldr	r3, [r7, #0]
 8013858:	68b9      	ldr	r1, [r7, #8]
 801385a:	68f8      	ldr	r0, [r7, #12]
 801385c:	f000 f80e 	bl	801387c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013860:	69f8      	ldr	r0, [r7, #28]
 8013862:	f000 f89b 	bl	801399c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8013866:	2301      	movs	r3, #1
 8013868:	61bb      	str	r3, [r7, #24]
 801386a:	e002      	b.n	8013872 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801386c:	f04f 33ff 	mov.w	r3, #4294967295
 8013870:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8013872:	69bb      	ldr	r3, [r7, #24]
	}
 8013874:	4618      	mov	r0, r3
 8013876:	3720      	adds	r7, #32
 8013878:	46bd      	mov	sp, r7
 801387a:	bd80      	pop	{r7, pc}

0801387c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801387c:	b580      	push	{r7, lr}
 801387e:	b088      	sub	sp, #32
 8013880:	af00      	add	r7, sp, #0
 8013882:	60f8      	str	r0, [r7, #12]
 8013884:	60b9      	str	r1, [r7, #8]
 8013886:	607a      	str	r2, [r7, #4]
 8013888:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801388a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801388c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801388e:	687b      	ldr	r3, [r7, #4]
 8013890:	009b      	lsls	r3, r3, #2
 8013892:	461a      	mov	r2, r3
 8013894:	21a5      	movs	r1, #165	; 0xa5
 8013896:	f011 f8dd 	bl	8024a54 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801389a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801389c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801389e:	687b      	ldr	r3, [r7, #4]
 80138a0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80138a4:	3b01      	subs	r3, #1
 80138a6:	009b      	lsls	r3, r3, #2
 80138a8:	4413      	add	r3, r2
 80138aa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80138ac:	69bb      	ldr	r3, [r7, #24]
 80138ae:	f023 0307 	bic.w	r3, r3, #7
 80138b2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80138b4:	69bb      	ldr	r3, [r7, #24]
 80138b6:	f003 0307 	and.w	r3, r3, #7
 80138ba:	2b00      	cmp	r3, #0
 80138bc:	d00a      	beq.n	80138d4 <prvInitialiseNewTask+0x58>
	__asm volatile
 80138be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138c2:	f383 8811 	msr	BASEPRI, r3
 80138c6:	f3bf 8f6f 	isb	sy
 80138ca:	f3bf 8f4f 	dsb	sy
 80138ce:	617b      	str	r3, [r7, #20]
}
 80138d0:	bf00      	nop
 80138d2:	e7fe      	b.n	80138d2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80138d4:	68bb      	ldr	r3, [r7, #8]
 80138d6:	2b00      	cmp	r3, #0
 80138d8:	d01f      	beq.n	801391a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80138da:	2300      	movs	r3, #0
 80138dc:	61fb      	str	r3, [r7, #28]
 80138de:	e012      	b.n	8013906 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80138e0:	68ba      	ldr	r2, [r7, #8]
 80138e2:	69fb      	ldr	r3, [r7, #28]
 80138e4:	4413      	add	r3, r2
 80138e6:	7819      	ldrb	r1, [r3, #0]
 80138e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80138ea:	69fb      	ldr	r3, [r7, #28]
 80138ec:	4413      	add	r3, r2
 80138ee:	3334      	adds	r3, #52	; 0x34
 80138f0:	460a      	mov	r2, r1
 80138f2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80138f4:	68ba      	ldr	r2, [r7, #8]
 80138f6:	69fb      	ldr	r3, [r7, #28]
 80138f8:	4413      	add	r3, r2
 80138fa:	781b      	ldrb	r3, [r3, #0]
 80138fc:	2b00      	cmp	r3, #0
 80138fe:	d006      	beq.n	801390e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013900:	69fb      	ldr	r3, [r7, #28]
 8013902:	3301      	adds	r3, #1
 8013904:	61fb      	str	r3, [r7, #28]
 8013906:	69fb      	ldr	r3, [r7, #28]
 8013908:	2b0f      	cmp	r3, #15
 801390a:	d9e9      	bls.n	80138e0 <prvInitialiseNewTask+0x64>
 801390c:	e000      	b.n	8013910 <prvInitialiseNewTask+0x94>
			{
				break;
 801390e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8013910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013912:	2200      	movs	r2, #0
 8013914:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8013918:	e003      	b.n	8013922 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801391a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801391c:	2200      	movs	r2, #0
 801391e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8013922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013924:	2b37      	cmp	r3, #55	; 0x37
 8013926:	d901      	bls.n	801392c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8013928:	2337      	movs	r3, #55	; 0x37
 801392a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801392c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801392e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013930:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8013932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013934:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013936:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8013938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801393a:	2200      	movs	r2, #0
 801393c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801393e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013940:	3304      	adds	r3, #4
 8013942:	4618      	mov	r0, r3
 8013944:	f7fe fda0 	bl	8012488 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8013948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801394a:	3318      	adds	r3, #24
 801394c:	4618      	mov	r0, r3
 801394e:	f7fe fd9b 	bl	8012488 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8013952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013954:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013956:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801395a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801395e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013960:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8013962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013964:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013966:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8013968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801396a:	2200      	movs	r2, #0
 801396c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801396e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013970:	2200      	movs	r2, #0
 8013972:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8013976:	683a      	ldr	r2, [r7, #0]
 8013978:	68f9      	ldr	r1, [r7, #12]
 801397a:	69b8      	ldr	r0, [r7, #24]
 801397c:	f001 fc80 	bl	8015280 <pxPortInitialiseStack>
 8013980:	4602      	mov	r2, r0
 8013982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013984:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8013986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013988:	2b00      	cmp	r3, #0
 801398a:	d002      	beq.n	8013992 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801398c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801398e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013990:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013992:	bf00      	nop
 8013994:	3720      	adds	r7, #32
 8013996:	46bd      	mov	sp, r7
 8013998:	bd80      	pop	{r7, pc}
	...

0801399c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801399c:	b580      	push	{r7, lr}
 801399e:	b082      	sub	sp, #8
 80139a0:	af00      	add	r7, sp, #0
 80139a2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80139a4:	f001 fd96 	bl	80154d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80139a8:	4b2d      	ldr	r3, [pc, #180]	; (8013a60 <prvAddNewTaskToReadyList+0xc4>)
 80139aa:	681b      	ldr	r3, [r3, #0]
 80139ac:	3301      	adds	r3, #1
 80139ae:	4a2c      	ldr	r2, [pc, #176]	; (8013a60 <prvAddNewTaskToReadyList+0xc4>)
 80139b0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80139b2:	4b2c      	ldr	r3, [pc, #176]	; (8013a64 <prvAddNewTaskToReadyList+0xc8>)
 80139b4:	681b      	ldr	r3, [r3, #0]
 80139b6:	2b00      	cmp	r3, #0
 80139b8:	d109      	bne.n	80139ce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80139ba:	4a2a      	ldr	r2, [pc, #168]	; (8013a64 <prvAddNewTaskToReadyList+0xc8>)
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80139c0:	4b27      	ldr	r3, [pc, #156]	; (8013a60 <prvAddNewTaskToReadyList+0xc4>)
 80139c2:	681b      	ldr	r3, [r3, #0]
 80139c4:	2b01      	cmp	r3, #1
 80139c6:	d110      	bne.n	80139ea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80139c8:	f000 fc28 	bl	801421c <prvInitialiseTaskLists>
 80139cc:	e00d      	b.n	80139ea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80139ce:	4b26      	ldr	r3, [pc, #152]	; (8013a68 <prvAddNewTaskToReadyList+0xcc>)
 80139d0:	681b      	ldr	r3, [r3, #0]
 80139d2:	2b00      	cmp	r3, #0
 80139d4:	d109      	bne.n	80139ea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80139d6:	4b23      	ldr	r3, [pc, #140]	; (8013a64 <prvAddNewTaskToReadyList+0xc8>)
 80139d8:	681b      	ldr	r3, [r3, #0]
 80139da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80139e0:	429a      	cmp	r2, r3
 80139e2:	d802      	bhi.n	80139ea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80139e4:	4a1f      	ldr	r2, [pc, #124]	; (8013a64 <prvAddNewTaskToReadyList+0xc8>)
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80139ea:	4b20      	ldr	r3, [pc, #128]	; (8013a6c <prvAddNewTaskToReadyList+0xd0>)
 80139ec:	681b      	ldr	r3, [r3, #0]
 80139ee:	3301      	adds	r3, #1
 80139f0:	4a1e      	ldr	r2, [pc, #120]	; (8013a6c <prvAddNewTaskToReadyList+0xd0>)
 80139f2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80139f4:	4b1d      	ldr	r3, [pc, #116]	; (8013a6c <prvAddNewTaskToReadyList+0xd0>)
 80139f6:	681a      	ldr	r2, [r3, #0]
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80139fc:	687b      	ldr	r3, [r7, #4]
 80139fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013a00:	4b1b      	ldr	r3, [pc, #108]	; (8013a70 <prvAddNewTaskToReadyList+0xd4>)
 8013a02:	681b      	ldr	r3, [r3, #0]
 8013a04:	429a      	cmp	r2, r3
 8013a06:	d903      	bls.n	8013a10 <prvAddNewTaskToReadyList+0x74>
 8013a08:	687b      	ldr	r3, [r7, #4]
 8013a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a0c:	4a18      	ldr	r2, [pc, #96]	; (8013a70 <prvAddNewTaskToReadyList+0xd4>)
 8013a0e:	6013      	str	r3, [r2, #0]
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013a14:	4613      	mov	r3, r2
 8013a16:	009b      	lsls	r3, r3, #2
 8013a18:	4413      	add	r3, r2
 8013a1a:	009b      	lsls	r3, r3, #2
 8013a1c:	4a15      	ldr	r2, [pc, #84]	; (8013a74 <prvAddNewTaskToReadyList+0xd8>)
 8013a1e:	441a      	add	r2, r3
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	3304      	adds	r3, #4
 8013a24:	4619      	mov	r1, r3
 8013a26:	4610      	mov	r0, r2
 8013a28:	f7fe fd3b 	bl	80124a2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8013a2c:	f001 fd82 	bl	8015534 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8013a30:	4b0d      	ldr	r3, [pc, #52]	; (8013a68 <prvAddNewTaskToReadyList+0xcc>)
 8013a32:	681b      	ldr	r3, [r3, #0]
 8013a34:	2b00      	cmp	r3, #0
 8013a36:	d00e      	beq.n	8013a56 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8013a38:	4b0a      	ldr	r3, [pc, #40]	; (8013a64 <prvAddNewTaskToReadyList+0xc8>)
 8013a3a:	681b      	ldr	r3, [r3, #0]
 8013a3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013a3e:	687b      	ldr	r3, [r7, #4]
 8013a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a42:	429a      	cmp	r2, r3
 8013a44:	d207      	bcs.n	8013a56 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8013a46:	4b0c      	ldr	r3, [pc, #48]	; (8013a78 <prvAddNewTaskToReadyList+0xdc>)
 8013a48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013a4c:	601a      	str	r2, [r3, #0]
 8013a4e:	f3bf 8f4f 	dsb	sy
 8013a52:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013a56:	bf00      	nop
 8013a58:	3708      	adds	r7, #8
 8013a5a:	46bd      	mov	sp, r7
 8013a5c:	bd80      	pop	{r7, pc}
 8013a5e:	bf00      	nop
 8013a60:	2000360c 	.word	0x2000360c
 8013a64:	20003138 	.word	0x20003138
 8013a68:	20003618 	.word	0x20003618
 8013a6c:	20003628 	.word	0x20003628
 8013a70:	20003614 	.word	0x20003614
 8013a74:	2000313c 	.word	0x2000313c
 8013a78:	e000ed04 	.word	0xe000ed04

08013a7c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8013a7c:	b580      	push	{r7, lr}
 8013a7e:	b084      	sub	sp, #16
 8013a80:	af00      	add	r7, sp, #0
 8013a82:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8013a84:	2300      	movs	r3, #0
 8013a86:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8013a88:	687b      	ldr	r3, [r7, #4]
 8013a8a:	2b00      	cmp	r3, #0
 8013a8c:	d017      	beq.n	8013abe <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8013a8e:	4b13      	ldr	r3, [pc, #76]	; (8013adc <vTaskDelay+0x60>)
 8013a90:	681b      	ldr	r3, [r3, #0]
 8013a92:	2b00      	cmp	r3, #0
 8013a94:	d00a      	beq.n	8013aac <vTaskDelay+0x30>
	__asm volatile
 8013a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a9a:	f383 8811 	msr	BASEPRI, r3
 8013a9e:	f3bf 8f6f 	isb	sy
 8013aa2:	f3bf 8f4f 	dsb	sy
 8013aa6:	60bb      	str	r3, [r7, #8]
}
 8013aa8:	bf00      	nop
 8013aaa:	e7fe      	b.n	8013aaa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8013aac:	f000 f880 	bl	8013bb0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8013ab0:	2100      	movs	r1, #0
 8013ab2:	6878      	ldr	r0, [r7, #4]
 8013ab4:	f000 ffe6 	bl	8014a84 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8013ab8:	f000 f888 	bl	8013bcc <xTaskResumeAll>
 8013abc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8013abe:	68fb      	ldr	r3, [r7, #12]
 8013ac0:	2b00      	cmp	r3, #0
 8013ac2:	d107      	bne.n	8013ad4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8013ac4:	4b06      	ldr	r3, [pc, #24]	; (8013ae0 <vTaskDelay+0x64>)
 8013ac6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013aca:	601a      	str	r2, [r3, #0]
 8013acc:	f3bf 8f4f 	dsb	sy
 8013ad0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013ad4:	bf00      	nop
 8013ad6:	3710      	adds	r7, #16
 8013ad8:	46bd      	mov	sp, r7
 8013ada:	bd80      	pop	{r7, pc}
 8013adc:	20003634 	.word	0x20003634
 8013ae0:	e000ed04 	.word	0xe000ed04

08013ae4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8013ae4:	b580      	push	{r7, lr}
 8013ae6:	b08a      	sub	sp, #40	; 0x28
 8013ae8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8013aea:	2300      	movs	r3, #0
 8013aec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8013aee:	2300      	movs	r3, #0
 8013af0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8013af2:	463a      	mov	r2, r7
 8013af4:	1d39      	adds	r1, r7, #4
 8013af6:	f107 0308 	add.w	r3, r7, #8
 8013afa:	4618      	mov	r0, r3
 8013afc:	f7fe fc70 	bl	80123e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8013b00:	6839      	ldr	r1, [r7, #0]
 8013b02:	687b      	ldr	r3, [r7, #4]
 8013b04:	68ba      	ldr	r2, [r7, #8]
 8013b06:	9202      	str	r2, [sp, #8]
 8013b08:	9301      	str	r3, [sp, #4]
 8013b0a:	2300      	movs	r3, #0
 8013b0c:	9300      	str	r3, [sp, #0]
 8013b0e:	2300      	movs	r3, #0
 8013b10:	460a      	mov	r2, r1
 8013b12:	4921      	ldr	r1, [pc, #132]	; (8013b98 <vTaskStartScheduler+0xb4>)
 8013b14:	4821      	ldr	r0, [pc, #132]	; (8013b9c <vTaskStartScheduler+0xb8>)
 8013b16:	f7ff fe0f 	bl	8013738 <xTaskCreateStatic>
 8013b1a:	4603      	mov	r3, r0
 8013b1c:	4a20      	ldr	r2, [pc, #128]	; (8013ba0 <vTaskStartScheduler+0xbc>)
 8013b1e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8013b20:	4b1f      	ldr	r3, [pc, #124]	; (8013ba0 <vTaskStartScheduler+0xbc>)
 8013b22:	681b      	ldr	r3, [r3, #0]
 8013b24:	2b00      	cmp	r3, #0
 8013b26:	d002      	beq.n	8013b2e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8013b28:	2301      	movs	r3, #1
 8013b2a:	617b      	str	r3, [r7, #20]
 8013b2c:	e001      	b.n	8013b32 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8013b2e:	2300      	movs	r3, #0
 8013b30:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8013b32:	697b      	ldr	r3, [r7, #20]
 8013b34:	2b01      	cmp	r3, #1
 8013b36:	d102      	bne.n	8013b3e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8013b38:	f000 fff8 	bl	8014b2c <xTimerCreateTimerTask>
 8013b3c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8013b3e:	697b      	ldr	r3, [r7, #20]
 8013b40:	2b01      	cmp	r3, #1
 8013b42:	d116      	bne.n	8013b72 <vTaskStartScheduler+0x8e>
	__asm volatile
 8013b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b48:	f383 8811 	msr	BASEPRI, r3
 8013b4c:	f3bf 8f6f 	isb	sy
 8013b50:	f3bf 8f4f 	dsb	sy
 8013b54:	613b      	str	r3, [r7, #16]
}
 8013b56:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8013b58:	4b12      	ldr	r3, [pc, #72]	; (8013ba4 <vTaskStartScheduler+0xc0>)
 8013b5a:	f04f 32ff 	mov.w	r2, #4294967295
 8013b5e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8013b60:	4b11      	ldr	r3, [pc, #68]	; (8013ba8 <vTaskStartScheduler+0xc4>)
 8013b62:	2201      	movs	r2, #1
 8013b64:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8013b66:	4b11      	ldr	r3, [pc, #68]	; (8013bac <vTaskStartScheduler+0xc8>)
 8013b68:	2200      	movs	r2, #0
 8013b6a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8013b6c:	f001 fc10 	bl	8015390 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8013b70:	e00e      	b.n	8013b90 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8013b72:	697b      	ldr	r3, [r7, #20]
 8013b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013b78:	d10a      	bne.n	8013b90 <vTaskStartScheduler+0xac>
	__asm volatile
 8013b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b7e:	f383 8811 	msr	BASEPRI, r3
 8013b82:	f3bf 8f6f 	isb	sy
 8013b86:	f3bf 8f4f 	dsb	sy
 8013b8a:	60fb      	str	r3, [r7, #12]
}
 8013b8c:	bf00      	nop
 8013b8e:	e7fe      	b.n	8013b8e <vTaskStartScheduler+0xaa>
}
 8013b90:	bf00      	nop
 8013b92:	3718      	adds	r7, #24
 8013b94:	46bd      	mov	sp, r7
 8013b96:	bd80      	pop	{r7, pc}
 8013b98:	0802abfc 	.word	0x0802abfc
 8013b9c:	080141ed 	.word	0x080141ed
 8013ba0:	20003630 	.word	0x20003630
 8013ba4:	2000362c 	.word	0x2000362c
 8013ba8:	20003618 	.word	0x20003618
 8013bac:	20003610 	.word	0x20003610

08013bb0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8013bb0:	b480      	push	{r7}
 8013bb2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8013bb4:	4b04      	ldr	r3, [pc, #16]	; (8013bc8 <vTaskSuspendAll+0x18>)
 8013bb6:	681b      	ldr	r3, [r3, #0]
 8013bb8:	3301      	adds	r3, #1
 8013bba:	4a03      	ldr	r2, [pc, #12]	; (8013bc8 <vTaskSuspendAll+0x18>)
 8013bbc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8013bbe:	bf00      	nop
 8013bc0:	46bd      	mov	sp, r7
 8013bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bc6:	4770      	bx	lr
 8013bc8:	20003634 	.word	0x20003634

08013bcc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8013bcc:	b580      	push	{r7, lr}
 8013bce:	b084      	sub	sp, #16
 8013bd0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8013bd2:	2300      	movs	r3, #0
 8013bd4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8013bd6:	2300      	movs	r3, #0
 8013bd8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8013bda:	4b42      	ldr	r3, [pc, #264]	; (8013ce4 <xTaskResumeAll+0x118>)
 8013bdc:	681b      	ldr	r3, [r3, #0]
 8013bde:	2b00      	cmp	r3, #0
 8013be0:	d10a      	bne.n	8013bf8 <xTaskResumeAll+0x2c>
	__asm volatile
 8013be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013be6:	f383 8811 	msr	BASEPRI, r3
 8013bea:	f3bf 8f6f 	isb	sy
 8013bee:	f3bf 8f4f 	dsb	sy
 8013bf2:	603b      	str	r3, [r7, #0]
}
 8013bf4:	bf00      	nop
 8013bf6:	e7fe      	b.n	8013bf6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8013bf8:	f001 fc6c 	bl	80154d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8013bfc:	4b39      	ldr	r3, [pc, #228]	; (8013ce4 <xTaskResumeAll+0x118>)
 8013bfe:	681b      	ldr	r3, [r3, #0]
 8013c00:	3b01      	subs	r3, #1
 8013c02:	4a38      	ldr	r2, [pc, #224]	; (8013ce4 <xTaskResumeAll+0x118>)
 8013c04:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013c06:	4b37      	ldr	r3, [pc, #220]	; (8013ce4 <xTaskResumeAll+0x118>)
 8013c08:	681b      	ldr	r3, [r3, #0]
 8013c0a:	2b00      	cmp	r3, #0
 8013c0c:	d162      	bne.n	8013cd4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8013c0e:	4b36      	ldr	r3, [pc, #216]	; (8013ce8 <xTaskResumeAll+0x11c>)
 8013c10:	681b      	ldr	r3, [r3, #0]
 8013c12:	2b00      	cmp	r3, #0
 8013c14:	d05e      	beq.n	8013cd4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013c16:	e02f      	b.n	8013c78 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013c18:	4b34      	ldr	r3, [pc, #208]	; (8013cec <xTaskResumeAll+0x120>)
 8013c1a:	68db      	ldr	r3, [r3, #12]
 8013c1c:	68db      	ldr	r3, [r3, #12]
 8013c1e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013c20:	68fb      	ldr	r3, [r7, #12]
 8013c22:	3318      	adds	r3, #24
 8013c24:	4618      	mov	r0, r3
 8013c26:	f7fe fc99 	bl	801255c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013c2a:	68fb      	ldr	r3, [r7, #12]
 8013c2c:	3304      	adds	r3, #4
 8013c2e:	4618      	mov	r0, r3
 8013c30:	f7fe fc94 	bl	801255c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013c34:	68fb      	ldr	r3, [r7, #12]
 8013c36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013c38:	4b2d      	ldr	r3, [pc, #180]	; (8013cf0 <xTaskResumeAll+0x124>)
 8013c3a:	681b      	ldr	r3, [r3, #0]
 8013c3c:	429a      	cmp	r2, r3
 8013c3e:	d903      	bls.n	8013c48 <xTaskResumeAll+0x7c>
 8013c40:	68fb      	ldr	r3, [r7, #12]
 8013c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c44:	4a2a      	ldr	r2, [pc, #168]	; (8013cf0 <xTaskResumeAll+0x124>)
 8013c46:	6013      	str	r3, [r2, #0]
 8013c48:	68fb      	ldr	r3, [r7, #12]
 8013c4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013c4c:	4613      	mov	r3, r2
 8013c4e:	009b      	lsls	r3, r3, #2
 8013c50:	4413      	add	r3, r2
 8013c52:	009b      	lsls	r3, r3, #2
 8013c54:	4a27      	ldr	r2, [pc, #156]	; (8013cf4 <xTaskResumeAll+0x128>)
 8013c56:	441a      	add	r2, r3
 8013c58:	68fb      	ldr	r3, [r7, #12]
 8013c5a:	3304      	adds	r3, #4
 8013c5c:	4619      	mov	r1, r3
 8013c5e:	4610      	mov	r0, r2
 8013c60:	f7fe fc1f 	bl	80124a2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013c64:	68fb      	ldr	r3, [r7, #12]
 8013c66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013c68:	4b23      	ldr	r3, [pc, #140]	; (8013cf8 <xTaskResumeAll+0x12c>)
 8013c6a:	681b      	ldr	r3, [r3, #0]
 8013c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c6e:	429a      	cmp	r2, r3
 8013c70:	d302      	bcc.n	8013c78 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8013c72:	4b22      	ldr	r3, [pc, #136]	; (8013cfc <xTaskResumeAll+0x130>)
 8013c74:	2201      	movs	r2, #1
 8013c76:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013c78:	4b1c      	ldr	r3, [pc, #112]	; (8013cec <xTaskResumeAll+0x120>)
 8013c7a:	681b      	ldr	r3, [r3, #0]
 8013c7c:	2b00      	cmp	r3, #0
 8013c7e:	d1cb      	bne.n	8013c18 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8013c80:	68fb      	ldr	r3, [r7, #12]
 8013c82:	2b00      	cmp	r3, #0
 8013c84:	d001      	beq.n	8013c8a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8013c86:	f000 fb67 	bl	8014358 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8013c8a:	4b1d      	ldr	r3, [pc, #116]	; (8013d00 <xTaskResumeAll+0x134>)
 8013c8c:	681b      	ldr	r3, [r3, #0]
 8013c8e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8013c90:	687b      	ldr	r3, [r7, #4]
 8013c92:	2b00      	cmp	r3, #0
 8013c94:	d010      	beq.n	8013cb8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8013c96:	f000 f859 	bl	8013d4c <xTaskIncrementTick>
 8013c9a:	4603      	mov	r3, r0
 8013c9c:	2b00      	cmp	r3, #0
 8013c9e:	d002      	beq.n	8013ca6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8013ca0:	4b16      	ldr	r3, [pc, #88]	; (8013cfc <xTaskResumeAll+0x130>)
 8013ca2:	2201      	movs	r2, #1
 8013ca4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8013ca6:	687b      	ldr	r3, [r7, #4]
 8013ca8:	3b01      	subs	r3, #1
 8013caa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	2b00      	cmp	r3, #0
 8013cb0:	d1f1      	bne.n	8013c96 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8013cb2:	4b13      	ldr	r3, [pc, #76]	; (8013d00 <xTaskResumeAll+0x134>)
 8013cb4:	2200      	movs	r2, #0
 8013cb6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8013cb8:	4b10      	ldr	r3, [pc, #64]	; (8013cfc <xTaskResumeAll+0x130>)
 8013cba:	681b      	ldr	r3, [r3, #0]
 8013cbc:	2b00      	cmp	r3, #0
 8013cbe:	d009      	beq.n	8013cd4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8013cc0:	2301      	movs	r3, #1
 8013cc2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8013cc4:	4b0f      	ldr	r3, [pc, #60]	; (8013d04 <xTaskResumeAll+0x138>)
 8013cc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013cca:	601a      	str	r2, [r3, #0]
 8013ccc:	f3bf 8f4f 	dsb	sy
 8013cd0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013cd4:	f001 fc2e 	bl	8015534 <vPortExitCritical>

	return xAlreadyYielded;
 8013cd8:	68bb      	ldr	r3, [r7, #8]
}
 8013cda:	4618      	mov	r0, r3
 8013cdc:	3710      	adds	r7, #16
 8013cde:	46bd      	mov	sp, r7
 8013ce0:	bd80      	pop	{r7, pc}
 8013ce2:	bf00      	nop
 8013ce4:	20003634 	.word	0x20003634
 8013ce8:	2000360c 	.word	0x2000360c
 8013cec:	200035cc 	.word	0x200035cc
 8013cf0:	20003614 	.word	0x20003614
 8013cf4:	2000313c 	.word	0x2000313c
 8013cf8:	20003138 	.word	0x20003138
 8013cfc:	20003620 	.word	0x20003620
 8013d00:	2000361c 	.word	0x2000361c
 8013d04:	e000ed04 	.word	0xe000ed04

08013d08 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8013d08:	b480      	push	{r7}
 8013d0a:	b083      	sub	sp, #12
 8013d0c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8013d0e:	4b05      	ldr	r3, [pc, #20]	; (8013d24 <xTaskGetTickCount+0x1c>)
 8013d10:	681b      	ldr	r3, [r3, #0]
 8013d12:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8013d14:	687b      	ldr	r3, [r7, #4]
}
 8013d16:	4618      	mov	r0, r3
 8013d18:	370c      	adds	r7, #12
 8013d1a:	46bd      	mov	sp, r7
 8013d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d20:	4770      	bx	lr
 8013d22:	bf00      	nop
 8013d24:	20003610 	.word	0x20003610

08013d28 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8013d28:	b580      	push	{r7, lr}
 8013d2a:	b082      	sub	sp, #8
 8013d2c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013d2e:	f001 fcb3 	bl	8015698 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8013d32:	2300      	movs	r3, #0
 8013d34:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8013d36:	4b04      	ldr	r3, [pc, #16]	; (8013d48 <xTaskGetTickCountFromISR+0x20>)
 8013d38:	681b      	ldr	r3, [r3, #0]
 8013d3a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013d3c:	683b      	ldr	r3, [r7, #0]
}
 8013d3e:	4618      	mov	r0, r3
 8013d40:	3708      	adds	r7, #8
 8013d42:	46bd      	mov	sp, r7
 8013d44:	bd80      	pop	{r7, pc}
 8013d46:	bf00      	nop
 8013d48:	20003610 	.word	0x20003610

08013d4c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8013d4c:	b580      	push	{r7, lr}
 8013d4e:	b086      	sub	sp, #24
 8013d50:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8013d52:	2300      	movs	r3, #0
 8013d54:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013d56:	4b4f      	ldr	r3, [pc, #316]	; (8013e94 <xTaskIncrementTick+0x148>)
 8013d58:	681b      	ldr	r3, [r3, #0]
 8013d5a:	2b00      	cmp	r3, #0
 8013d5c:	f040 808f 	bne.w	8013e7e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8013d60:	4b4d      	ldr	r3, [pc, #308]	; (8013e98 <xTaskIncrementTick+0x14c>)
 8013d62:	681b      	ldr	r3, [r3, #0]
 8013d64:	3301      	adds	r3, #1
 8013d66:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8013d68:	4a4b      	ldr	r2, [pc, #300]	; (8013e98 <xTaskIncrementTick+0x14c>)
 8013d6a:	693b      	ldr	r3, [r7, #16]
 8013d6c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8013d6e:	693b      	ldr	r3, [r7, #16]
 8013d70:	2b00      	cmp	r3, #0
 8013d72:	d120      	bne.n	8013db6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8013d74:	4b49      	ldr	r3, [pc, #292]	; (8013e9c <xTaskIncrementTick+0x150>)
 8013d76:	681b      	ldr	r3, [r3, #0]
 8013d78:	681b      	ldr	r3, [r3, #0]
 8013d7a:	2b00      	cmp	r3, #0
 8013d7c:	d00a      	beq.n	8013d94 <xTaskIncrementTick+0x48>
	__asm volatile
 8013d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d82:	f383 8811 	msr	BASEPRI, r3
 8013d86:	f3bf 8f6f 	isb	sy
 8013d8a:	f3bf 8f4f 	dsb	sy
 8013d8e:	603b      	str	r3, [r7, #0]
}
 8013d90:	bf00      	nop
 8013d92:	e7fe      	b.n	8013d92 <xTaskIncrementTick+0x46>
 8013d94:	4b41      	ldr	r3, [pc, #260]	; (8013e9c <xTaskIncrementTick+0x150>)
 8013d96:	681b      	ldr	r3, [r3, #0]
 8013d98:	60fb      	str	r3, [r7, #12]
 8013d9a:	4b41      	ldr	r3, [pc, #260]	; (8013ea0 <xTaskIncrementTick+0x154>)
 8013d9c:	681b      	ldr	r3, [r3, #0]
 8013d9e:	4a3f      	ldr	r2, [pc, #252]	; (8013e9c <xTaskIncrementTick+0x150>)
 8013da0:	6013      	str	r3, [r2, #0]
 8013da2:	4a3f      	ldr	r2, [pc, #252]	; (8013ea0 <xTaskIncrementTick+0x154>)
 8013da4:	68fb      	ldr	r3, [r7, #12]
 8013da6:	6013      	str	r3, [r2, #0]
 8013da8:	4b3e      	ldr	r3, [pc, #248]	; (8013ea4 <xTaskIncrementTick+0x158>)
 8013daa:	681b      	ldr	r3, [r3, #0]
 8013dac:	3301      	adds	r3, #1
 8013dae:	4a3d      	ldr	r2, [pc, #244]	; (8013ea4 <xTaskIncrementTick+0x158>)
 8013db0:	6013      	str	r3, [r2, #0]
 8013db2:	f000 fad1 	bl	8014358 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8013db6:	4b3c      	ldr	r3, [pc, #240]	; (8013ea8 <xTaskIncrementTick+0x15c>)
 8013db8:	681b      	ldr	r3, [r3, #0]
 8013dba:	693a      	ldr	r2, [r7, #16]
 8013dbc:	429a      	cmp	r2, r3
 8013dbe:	d349      	bcc.n	8013e54 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013dc0:	4b36      	ldr	r3, [pc, #216]	; (8013e9c <xTaskIncrementTick+0x150>)
 8013dc2:	681b      	ldr	r3, [r3, #0]
 8013dc4:	681b      	ldr	r3, [r3, #0]
 8013dc6:	2b00      	cmp	r3, #0
 8013dc8:	d104      	bne.n	8013dd4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013dca:	4b37      	ldr	r3, [pc, #220]	; (8013ea8 <xTaskIncrementTick+0x15c>)
 8013dcc:	f04f 32ff 	mov.w	r2, #4294967295
 8013dd0:	601a      	str	r2, [r3, #0]
					break;
 8013dd2:	e03f      	b.n	8013e54 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013dd4:	4b31      	ldr	r3, [pc, #196]	; (8013e9c <xTaskIncrementTick+0x150>)
 8013dd6:	681b      	ldr	r3, [r3, #0]
 8013dd8:	68db      	ldr	r3, [r3, #12]
 8013dda:	68db      	ldr	r3, [r3, #12]
 8013ddc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8013dde:	68bb      	ldr	r3, [r7, #8]
 8013de0:	685b      	ldr	r3, [r3, #4]
 8013de2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8013de4:	693a      	ldr	r2, [r7, #16]
 8013de6:	687b      	ldr	r3, [r7, #4]
 8013de8:	429a      	cmp	r2, r3
 8013dea:	d203      	bcs.n	8013df4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8013dec:	4a2e      	ldr	r2, [pc, #184]	; (8013ea8 <xTaskIncrementTick+0x15c>)
 8013dee:	687b      	ldr	r3, [r7, #4]
 8013df0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8013df2:	e02f      	b.n	8013e54 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013df4:	68bb      	ldr	r3, [r7, #8]
 8013df6:	3304      	adds	r3, #4
 8013df8:	4618      	mov	r0, r3
 8013dfa:	f7fe fbaf 	bl	801255c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8013dfe:	68bb      	ldr	r3, [r7, #8]
 8013e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013e02:	2b00      	cmp	r3, #0
 8013e04:	d004      	beq.n	8013e10 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013e06:	68bb      	ldr	r3, [r7, #8]
 8013e08:	3318      	adds	r3, #24
 8013e0a:	4618      	mov	r0, r3
 8013e0c:	f7fe fba6 	bl	801255c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8013e10:	68bb      	ldr	r3, [r7, #8]
 8013e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013e14:	4b25      	ldr	r3, [pc, #148]	; (8013eac <xTaskIncrementTick+0x160>)
 8013e16:	681b      	ldr	r3, [r3, #0]
 8013e18:	429a      	cmp	r2, r3
 8013e1a:	d903      	bls.n	8013e24 <xTaskIncrementTick+0xd8>
 8013e1c:	68bb      	ldr	r3, [r7, #8]
 8013e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e20:	4a22      	ldr	r2, [pc, #136]	; (8013eac <xTaskIncrementTick+0x160>)
 8013e22:	6013      	str	r3, [r2, #0]
 8013e24:	68bb      	ldr	r3, [r7, #8]
 8013e26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013e28:	4613      	mov	r3, r2
 8013e2a:	009b      	lsls	r3, r3, #2
 8013e2c:	4413      	add	r3, r2
 8013e2e:	009b      	lsls	r3, r3, #2
 8013e30:	4a1f      	ldr	r2, [pc, #124]	; (8013eb0 <xTaskIncrementTick+0x164>)
 8013e32:	441a      	add	r2, r3
 8013e34:	68bb      	ldr	r3, [r7, #8]
 8013e36:	3304      	adds	r3, #4
 8013e38:	4619      	mov	r1, r3
 8013e3a:	4610      	mov	r0, r2
 8013e3c:	f7fe fb31 	bl	80124a2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013e40:	68bb      	ldr	r3, [r7, #8]
 8013e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013e44:	4b1b      	ldr	r3, [pc, #108]	; (8013eb4 <xTaskIncrementTick+0x168>)
 8013e46:	681b      	ldr	r3, [r3, #0]
 8013e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e4a:	429a      	cmp	r2, r3
 8013e4c:	d3b8      	bcc.n	8013dc0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8013e4e:	2301      	movs	r3, #1
 8013e50:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013e52:	e7b5      	b.n	8013dc0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8013e54:	4b17      	ldr	r3, [pc, #92]	; (8013eb4 <xTaskIncrementTick+0x168>)
 8013e56:	681b      	ldr	r3, [r3, #0]
 8013e58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013e5a:	4915      	ldr	r1, [pc, #84]	; (8013eb0 <xTaskIncrementTick+0x164>)
 8013e5c:	4613      	mov	r3, r2
 8013e5e:	009b      	lsls	r3, r3, #2
 8013e60:	4413      	add	r3, r2
 8013e62:	009b      	lsls	r3, r3, #2
 8013e64:	440b      	add	r3, r1
 8013e66:	681b      	ldr	r3, [r3, #0]
 8013e68:	2b01      	cmp	r3, #1
 8013e6a:	d901      	bls.n	8013e70 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8013e6c:	2301      	movs	r3, #1
 8013e6e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8013e70:	4b11      	ldr	r3, [pc, #68]	; (8013eb8 <xTaskIncrementTick+0x16c>)
 8013e72:	681b      	ldr	r3, [r3, #0]
 8013e74:	2b00      	cmp	r3, #0
 8013e76:	d007      	beq.n	8013e88 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8013e78:	2301      	movs	r3, #1
 8013e7a:	617b      	str	r3, [r7, #20]
 8013e7c:	e004      	b.n	8013e88 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8013e7e:	4b0f      	ldr	r3, [pc, #60]	; (8013ebc <xTaskIncrementTick+0x170>)
 8013e80:	681b      	ldr	r3, [r3, #0]
 8013e82:	3301      	adds	r3, #1
 8013e84:	4a0d      	ldr	r2, [pc, #52]	; (8013ebc <xTaskIncrementTick+0x170>)
 8013e86:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8013e88:	697b      	ldr	r3, [r7, #20]
}
 8013e8a:	4618      	mov	r0, r3
 8013e8c:	3718      	adds	r7, #24
 8013e8e:	46bd      	mov	sp, r7
 8013e90:	bd80      	pop	{r7, pc}
 8013e92:	bf00      	nop
 8013e94:	20003634 	.word	0x20003634
 8013e98:	20003610 	.word	0x20003610
 8013e9c:	200035c4 	.word	0x200035c4
 8013ea0:	200035c8 	.word	0x200035c8
 8013ea4:	20003624 	.word	0x20003624
 8013ea8:	2000362c 	.word	0x2000362c
 8013eac:	20003614 	.word	0x20003614
 8013eb0:	2000313c 	.word	0x2000313c
 8013eb4:	20003138 	.word	0x20003138
 8013eb8:	20003620 	.word	0x20003620
 8013ebc:	2000361c 	.word	0x2000361c

08013ec0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8013ec0:	b480      	push	{r7}
 8013ec2:	b085      	sub	sp, #20
 8013ec4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8013ec6:	4b28      	ldr	r3, [pc, #160]	; (8013f68 <vTaskSwitchContext+0xa8>)
 8013ec8:	681b      	ldr	r3, [r3, #0]
 8013eca:	2b00      	cmp	r3, #0
 8013ecc:	d003      	beq.n	8013ed6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8013ece:	4b27      	ldr	r3, [pc, #156]	; (8013f6c <vTaskSwitchContext+0xac>)
 8013ed0:	2201      	movs	r2, #1
 8013ed2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8013ed4:	e041      	b.n	8013f5a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8013ed6:	4b25      	ldr	r3, [pc, #148]	; (8013f6c <vTaskSwitchContext+0xac>)
 8013ed8:	2200      	movs	r2, #0
 8013eda:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013edc:	4b24      	ldr	r3, [pc, #144]	; (8013f70 <vTaskSwitchContext+0xb0>)
 8013ede:	681b      	ldr	r3, [r3, #0]
 8013ee0:	60fb      	str	r3, [r7, #12]
 8013ee2:	e010      	b.n	8013f06 <vTaskSwitchContext+0x46>
 8013ee4:	68fb      	ldr	r3, [r7, #12]
 8013ee6:	2b00      	cmp	r3, #0
 8013ee8:	d10a      	bne.n	8013f00 <vTaskSwitchContext+0x40>
	__asm volatile
 8013eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013eee:	f383 8811 	msr	BASEPRI, r3
 8013ef2:	f3bf 8f6f 	isb	sy
 8013ef6:	f3bf 8f4f 	dsb	sy
 8013efa:	607b      	str	r3, [r7, #4]
}
 8013efc:	bf00      	nop
 8013efe:	e7fe      	b.n	8013efe <vTaskSwitchContext+0x3e>
 8013f00:	68fb      	ldr	r3, [r7, #12]
 8013f02:	3b01      	subs	r3, #1
 8013f04:	60fb      	str	r3, [r7, #12]
 8013f06:	491b      	ldr	r1, [pc, #108]	; (8013f74 <vTaskSwitchContext+0xb4>)
 8013f08:	68fa      	ldr	r2, [r7, #12]
 8013f0a:	4613      	mov	r3, r2
 8013f0c:	009b      	lsls	r3, r3, #2
 8013f0e:	4413      	add	r3, r2
 8013f10:	009b      	lsls	r3, r3, #2
 8013f12:	440b      	add	r3, r1
 8013f14:	681b      	ldr	r3, [r3, #0]
 8013f16:	2b00      	cmp	r3, #0
 8013f18:	d0e4      	beq.n	8013ee4 <vTaskSwitchContext+0x24>
 8013f1a:	68fa      	ldr	r2, [r7, #12]
 8013f1c:	4613      	mov	r3, r2
 8013f1e:	009b      	lsls	r3, r3, #2
 8013f20:	4413      	add	r3, r2
 8013f22:	009b      	lsls	r3, r3, #2
 8013f24:	4a13      	ldr	r2, [pc, #76]	; (8013f74 <vTaskSwitchContext+0xb4>)
 8013f26:	4413      	add	r3, r2
 8013f28:	60bb      	str	r3, [r7, #8]
 8013f2a:	68bb      	ldr	r3, [r7, #8]
 8013f2c:	685b      	ldr	r3, [r3, #4]
 8013f2e:	685a      	ldr	r2, [r3, #4]
 8013f30:	68bb      	ldr	r3, [r7, #8]
 8013f32:	605a      	str	r2, [r3, #4]
 8013f34:	68bb      	ldr	r3, [r7, #8]
 8013f36:	685a      	ldr	r2, [r3, #4]
 8013f38:	68bb      	ldr	r3, [r7, #8]
 8013f3a:	3308      	adds	r3, #8
 8013f3c:	429a      	cmp	r2, r3
 8013f3e:	d104      	bne.n	8013f4a <vTaskSwitchContext+0x8a>
 8013f40:	68bb      	ldr	r3, [r7, #8]
 8013f42:	685b      	ldr	r3, [r3, #4]
 8013f44:	685a      	ldr	r2, [r3, #4]
 8013f46:	68bb      	ldr	r3, [r7, #8]
 8013f48:	605a      	str	r2, [r3, #4]
 8013f4a:	68bb      	ldr	r3, [r7, #8]
 8013f4c:	685b      	ldr	r3, [r3, #4]
 8013f4e:	68db      	ldr	r3, [r3, #12]
 8013f50:	4a09      	ldr	r2, [pc, #36]	; (8013f78 <vTaskSwitchContext+0xb8>)
 8013f52:	6013      	str	r3, [r2, #0]
 8013f54:	4a06      	ldr	r2, [pc, #24]	; (8013f70 <vTaskSwitchContext+0xb0>)
 8013f56:	68fb      	ldr	r3, [r7, #12]
 8013f58:	6013      	str	r3, [r2, #0]
}
 8013f5a:	bf00      	nop
 8013f5c:	3714      	adds	r7, #20
 8013f5e:	46bd      	mov	sp, r7
 8013f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f64:	4770      	bx	lr
 8013f66:	bf00      	nop
 8013f68:	20003634 	.word	0x20003634
 8013f6c:	20003620 	.word	0x20003620
 8013f70:	20003614 	.word	0x20003614
 8013f74:	2000313c 	.word	0x2000313c
 8013f78:	20003138 	.word	0x20003138

08013f7c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8013f7c:	b580      	push	{r7, lr}
 8013f7e:	b084      	sub	sp, #16
 8013f80:	af00      	add	r7, sp, #0
 8013f82:	6078      	str	r0, [r7, #4]
 8013f84:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8013f86:	687b      	ldr	r3, [r7, #4]
 8013f88:	2b00      	cmp	r3, #0
 8013f8a:	d10a      	bne.n	8013fa2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8013f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f90:	f383 8811 	msr	BASEPRI, r3
 8013f94:	f3bf 8f6f 	isb	sy
 8013f98:	f3bf 8f4f 	dsb	sy
 8013f9c:	60fb      	str	r3, [r7, #12]
}
 8013f9e:	bf00      	nop
 8013fa0:	e7fe      	b.n	8013fa0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013fa2:	4b07      	ldr	r3, [pc, #28]	; (8013fc0 <vTaskPlaceOnEventList+0x44>)
 8013fa4:	681b      	ldr	r3, [r3, #0]
 8013fa6:	3318      	adds	r3, #24
 8013fa8:	4619      	mov	r1, r3
 8013faa:	6878      	ldr	r0, [r7, #4]
 8013fac:	f7fe fa9d 	bl	80124ea <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8013fb0:	2101      	movs	r1, #1
 8013fb2:	6838      	ldr	r0, [r7, #0]
 8013fb4:	f000 fd66 	bl	8014a84 <prvAddCurrentTaskToDelayedList>
}
 8013fb8:	bf00      	nop
 8013fba:	3710      	adds	r7, #16
 8013fbc:	46bd      	mov	sp, r7
 8013fbe:	bd80      	pop	{r7, pc}
 8013fc0:	20003138 	.word	0x20003138

08013fc4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8013fc4:	b580      	push	{r7, lr}
 8013fc6:	b086      	sub	sp, #24
 8013fc8:	af00      	add	r7, sp, #0
 8013fca:	60f8      	str	r0, [r7, #12]
 8013fcc:	60b9      	str	r1, [r7, #8]
 8013fce:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8013fd0:	68fb      	ldr	r3, [r7, #12]
 8013fd2:	2b00      	cmp	r3, #0
 8013fd4:	d10a      	bne.n	8013fec <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8013fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013fda:	f383 8811 	msr	BASEPRI, r3
 8013fde:	f3bf 8f6f 	isb	sy
 8013fe2:	f3bf 8f4f 	dsb	sy
 8013fe6:	617b      	str	r3, [r7, #20]
}
 8013fe8:	bf00      	nop
 8013fea:	e7fe      	b.n	8013fea <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013fec:	4b0a      	ldr	r3, [pc, #40]	; (8014018 <vTaskPlaceOnEventListRestricted+0x54>)
 8013fee:	681b      	ldr	r3, [r3, #0]
 8013ff0:	3318      	adds	r3, #24
 8013ff2:	4619      	mov	r1, r3
 8013ff4:	68f8      	ldr	r0, [r7, #12]
 8013ff6:	f7fe fa54 	bl	80124a2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8013ffa:	687b      	ldr	r3, [r7, #4]
 8013ffc:	2b00      	cmp	r3, #0
 8013ffe:	d002      	beq.n	8014006 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8014000:	f04f 33ff 	mov.w	r3, #4294967295
 8014004:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8014006:	6879      	ldr	r1, [r7, #4]
 8014008:	68b8      	ldr	r0, [r7, #8]
 801400a:	f000 fd3b 	bl	8014a84 <prvAddCurrentTaskToDelayedList>
	}
 801400e:	bf00      	nop
 8014010:	3718      	adds	r7, #24
 8014012:	46bd      	mov	sp, r7
 8014014:	bd80      	pop	{r7, pc}
 8014016:	bf00      	nop
 8014018:	20003138 	.word	0x20003138

0801401c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801401c:	b580      	push	{r7, lr}
 801401e:	b086      	sub	sp, #24
 8014020:	af00      	add	r7, sp, #0
 8014022:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014024:	687b      	ldr	r3, [r7, #4]
 8014026:	68db      	ldr	r3, [r3, #12]
 8014028:	68db      	ldr	r3, [r3, #12]
 801402a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801402c:	693b      	ldr	r3, [r7, #16]
 801402e:	2b00      	cmp	r3, #0
 8014030:	d10a      	bne.n	8014048 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8014032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014036:	f383 8811 	msr	BASEPRI, r3
 801403a:	f3bf 8f6f 	isb	sy
 801403e:	f3bf 8f4f 	dsb	sy
 8014042:	60fb      	str	r3, [r7, #12]
}
 8014044:	bf00      	nop
 8014046:	e7fe      	b.n	8014046 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8014048:	693b      	ldr	r3, [r7, #16]
 801404a:	3318      	adds	r3, #24
 801404c:	4618      	mov	r0, r3
 801404e:	f7fe fa85 	bl	801255c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014052:	4b1e      	ldr	r3, [pc, #120]	; (80140cc <xTaskRemoveFromEventList+0xb0>)
 8014054:	681b      	ldr	r3, [r3, #0]
 8014056:	2b00      	cmp	r3, #0
 8014058:	d11d      	bne.n	8014096 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801405a:	693b      	ldr	r3, [r7, #16]
 801405c:	3304      	adds	r3, #4
 801405e:	4618      	mov	r0, r3
 8014060:	f7fe fa7c 	bl	801255c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8014064:	693b      	ldr	r3, [r7, #16]
 8014066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014068:	4b19      	ldr	r3, [pc, #100]	; (80140d0 <xTaskRemoveFromEventList+0xb4>)
 801406a:	681b      	ldr	r3, [r3, #0]
 801406c:	429a      	cmp	r2, r3
 801406e:	d903      	bls.n	8014078 <xTaskRemoveFromEventList+0x5c>
 8014070:	693b      	ldr	r3, [r7, #16]
 8014072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014074:	4a16      	ldr	r2, [pc, #88]	; (80140d0 <xTaskRemoveFromEventList+0xb4>)
 8014076:	6013      	str	r3, [r2, #0]
 8014078:	693b      	ldr	r3, [r7, #16]
 801407a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801407c:	4613      	mov	r3, r2
 801407e:	009b      	lsls	r3, r3, #2
 8014080:	4413      	add	r3, r2
 8014082:	009b      	lsls	r3, r3, #2
 8014084:	4a13      	ldr	r2, [pc, #76]	; (80140d4 <xTaskRemoveFromEventList+0xb8>)
 8014086:	441a      	add	r2, r3
 8014088:	693b      	ldr	r3, [r7, #16]
 801408a:	3304      	adds	r3, #4
 801408c:	4619      	mov	r1, r3
 801408e:	4610      	mov	r0, r2
 8014090:	f7fe fa07 	bl	80124a2 <vListInsertEnd>
 8014094:	e005      	b.n	80140a2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8014096:	693b      	ldr	r3, [r7, #16]
 8014098:	3318      	adds	r3, #24
 801409a:	4619      	mov	r1, r3
 801409c:	480e      	ldr	r0, [pc, #56]	; (80140d8 <xTaskRemoveFromEventList+0xbc>)
 801409e:	f7fe fa00 	bl	80124a2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80140a2:	693b      	ldr	r3, [r7, #16]
 80140a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80140a6:	4b0d      	ldr	r3, [pc, #52]	; (80140dc <xTaskRemoveFromEventList+0xc0>)
 80140a8:	681b      	ldr	r3, [r3, #0]
 80140aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80140ac:	429a      	cmp	r2, r3
 80140ae:	d905      	bls.n	80140bc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80140b0:	2301      	movs	r3, #1
 80140b2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80140b4:	4b0a      	ldr	r3, [pc, #40]	; (80140e0 <xTaskRemoveFromEventList+0xc4>)
 80140b6:	2201      	movs	r2, #1
 80140b8:	601a      	str	r2, [r3, #0]
 80140ba:	e001      	b.n	80140c0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80140bc:	2300      	movs	r3, #0
 80140be:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80140c0:	697b      	ldr	r3, [r7, #20]
}
 80140c2:	4618      	mov	r0, r3
 80140c4:	3718      	adds	r7, #24
 80140c6:	46bd      	mov	sp, r7
 80140c8:	bd80      	pop	{r7, pc}
 80140ca:	bf00      	nop
 80140cc:	20003634 	.word	0x20003634
 80140d0:	20003614 	.word	0x20003614
 80140d4:	2000313c 	.word	0x2000313c
 80140d8:	200035cc 	.word	0x200035cc
 80140dc:	20003138 	.word	0x20003138
 80140e0:	20003620 	.word	0x20003620

080140e4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80140e4:	b480      	push	{r7}
 80140e6:	b083      	sub	sp, #12
 80140e8:	af00      	add	r7, sp, #0
 80140ea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80140ec:	4b06      	ldr	r3, [pc, #24]	; (8014108 <vTaskInternalSetTimeOutState+0x24>)
 80140ee:	681a      	ldr	r2, [r3, #0]
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80140f4:	4b05      	ldr	r3, [pc, #20]	; (801410c <vTaskInternalSetTimeOutState+0x28>)
 80140f6:	681a      	ldr	r2, [r3, #0]
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	605a      	str	r2, [r3, #4]
}
 80140fc:	bf00      	nop
 80140fe:	370c      	adds	r7, #12
 8014100:	46bd      	mov	sp, r7
 8014102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014106:	4770      	bx	lr
 8014108:	20003624 	.word	0x20003624
 801410c:	20003610 	.word	0x20003610

08014110 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8014110:	b580      	push	{r7, lr}
 8014112:	b088      	sub	sp, #32
 8014114:	af00      	add	r7, sp, #0
 8014116:	6078      	str	r0, [r7, #4]
 8014118:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801411a:	687b      	ldr	r3, [r7, #4]
 801411c:	2b00      	cmp	r3, #0
 801411e:	d10a      	bne.n	8014136 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8014120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014124:	f383 8811 	msr	BASEPRI, r3
 8014128:	f3bf 8f6f 	isb	sy
 801412c:	f3bf 8f4f 	dsb	sy
 8014130:	613b      	str	r3, [r7, #16]
}
 8014132:	bf00      	nop
 8014134:	e7fe      	b.n	8014134 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8014136:	683b      	ldr	r3, [r7, #0]
 8014138:	2b00      	cmp	r3, #0
 801413a:	d10a      	bne.n	8014152 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 801413c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014140:	f383 8811 	msr	BASEPRI, r3
 8014144:	f3bf 8f6f 	isb	sy
 8014148:	f3bf 8f4f 	dsb	sy
 801414c:	60fb      	str	r3, [r7, #12]
}
 801414e:	bf00      	nop
 8014150:	e7fe      	b.n	8014150 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8014152:	f001 f9bf 	bl	80154d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8014156:	4b1d      	ldr	r3, [pc, #116]	; (80141cc <xTaskCheckForTimeOut+0xbc>)
 8014158:	681b      	ldr	r3, [r3, #0]
 801415a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	685b      	ldr	r3, [r3, #4]
 8014160:	69ba      	ldr	r2, [r7, #24]
 8014162:	1ad3      	subs	r3, r2, r3
 8014164:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8014166:	683b      	ldr	r3, [r7, #0]
 8014168:	681b      	ldr	r3, [r3, #0]
 801416a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801416e:	d102      	bne.n	8014176 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8014170:	2300      	movs	r3, #0
 8014172:	61fb      	str	r3, [r7, #28]
 8014174:	e023      	b.n	80141be <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8014176:	687b      	ldr	r3, [r7, #4]
 8014178:	681a      	ldr	r2, [r3, #0]
 801417a:	4b15      	ldr	r3, [pc, #84]	; (80141d0 <xTaskCheckForTimeOut+0xc0>)
 801417c:	681b      	ldr	r3, [r3, #0]
 801417e:	429a      	cmp	r2, r3
 8014180:	d007      	beq.n	8014192 <xTaskCheckForTimeOut+0x82>
 8014182:	687b      	ldr	r3, [r7, #4]
 8014184:	685b      	ldr	r3, [r3, #4]
 8014186:	69ba      	ldr	r2, [r7, #24]
 8014188:	429a      	cmp	r2, r3
 801418a:	d302      	bcc.n	8014192 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801418c:	2301      	movs	r3, #1
 801418e:	61fb      	str	r3, [r7, #28]
 8014190:	e015      	b.n	80141be <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8014192:	683b      	ldr	r3, [r7, #0]
 8014194:	681b      	ldr	r3, [r3, #0]
 8014196:	697a      	ldr	r2, [r7, #20]
 8014198:	429a      	cmp	r2, r3
 801419a:	d20b      	bcs.n	80141b4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801419c:	683b      	ldr	r3, [r7, #0]
 801419e:	681a      	ldr	r2, [r3, #0]
 80141a0:	697b      	ldr	r3, [r7, #20]
 80141a2:	1ad2      	subs	r2, r2, r3
 80141a4:	683b      	ldr	r3, [r7, #0]
 80141a6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80141a8:	6878      	ldr	r0, [r7, #4]
 80141aa:	f7ff ff9b 	bl	80140e4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80141ae:	2300      	movs	r3, #0
 80141b0:	61fb      	str	r3, [r7, #28]
 80141b2:	e004      	b.n	80141be <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80141b4:	683b      	ldr	r3, [r7, #0]
 80141b6:	2200      	movs	r2, #0
 80141b8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80141ba:	2301      	movs	r3, #1
 80141bc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80141be:	f001 f9b9 	bl	8015534 <vPortExitCritical>

	return xReturn;
 80141c2:	69fb      	ldr	r3, [r7, #28]
}
 80141c4:	4618      	mov	r0, r3
 80141c6:	3720      	adds	r7, #32
 80141c8:	46bd      	mov	sp, r7
 80141ca:	bd80      	pop	{r7, pc}
 80141cc:	20003610 	.word	0x20003610
 80141d0:	20003624 	.word	0x20003624

080141d4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80141d4:	b480      	push	{r7}
 80141d6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80141d8:	4b03      	ldr	r3, [pc, #12]	; (80141e8 <vTaskMissedYield+0x14>)
 80141da:	2201      	movs	r2, #1
 80141dc:	601a      	str	r2, [r3, #0]
}
 80141de:	bf00      	nop
 80141e0:	46bd      	mov	sp, r7
 80141e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141e6:	4770      	bx	lr
 80141e8:	20003620 	.word	0x20003620

080141ec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80141ec:	b580      	push	{r7, lr}
 80141ee:	b082      	sub	sp, #8
 80141f0:	af00      	add	r7, sp, #0
 80141f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80141f4:	f000 f852 	bl	801429c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80141f8:	4b06      	ldr	r3, [pc, #24]	; (8014214 <prvIdleTask+0x28>)
 80141fa:	681b      	ldr	r3, [r3, #0]
 80141fc:	2b01      	cmp	r3, #1
 80141fe:	d9f9      	bls.n	80141f4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8014200:	4b05      	ldr	r3, [pc, #20]	; (8014218 <prvIdleTask+0x2c>)
 8014202:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014206:	601a      	str	r2, [r3, #0]
 8014208:	f3bf 8f4f 	dsb	sy
 801420c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8014210:	e7f0      	b.n	80141f4 <prvIdleTask+0x8>
 8014212:	bf00      	nop
 8014214:	2000313c 	.word	0x2000313c
 8014218:	e000ed04 	.word	0xe000ed04

0801421c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801421c:	b580      	push	{r7, lr}
 801421e:	b082      	sub	sp, #8
 8014220:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014222:	2300      	movs	r3, #0
 8014224:	607b      	str	r3, [r7, #4]
 8014226:	e00c      	b.n	8014242 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8014228:	687a      	ldr	r2, [r7, #4]
 801422a:	4613      	mov	r3, r2
 801422c:	009b      	lsls	r3, r3, #2
 801422e:	4413      	add	r3, r2
 8014230:	009b      	lsls	r3, r3, #2
 8014232:	4a12      	ldr	r2, [pc, #72]	; (801427c <prvInitialiseTaskLists+0x60>)
 8014234:	4413      	add	r3, r2
 8014236:	4618      	mov	r0, r3
 8014238:	f7fe f906 	bl	8012448 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801423c:	687b      	ldr	r3, [r7, #4]
 801423e:	3301      	adds	r3, #1
 8014240:	607b      	str	r3, [r7, #4]
 8014242:	687b      	ldr	r3, [r7, #4]
 8014244:	2b37      	cmp	r3, #55	; 0x37
 8014246:	d9ef      	bls.n	8014228 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8014248:	480d      	ldr	r0, [pc, #52]	; (8014280 <prvInitialiseTaskLists+0x64>)
 801424a:	f7fe f8fd 	bl	8012448 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801424e:	480d      	ldr	r0, [pc, #52]	; (8014284 <prvInitialiseTaskLists+0x68>)
 8014250:	f7fe f8fa 	bl	8012448 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8014254:	480c      	ldr	r0, [pc, #48]	; (8014288 <prvInitialiseTaskLists+0x6c>)
 8014256:	f7fe f8f7 	bl	8012448 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801425a:	480c      	ldr	r0, [pc, #48]	; (801428c <prvInitialiseTaskLists+0x70>)
 801425c:	f7fe f8f4 	bl	8012448 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8014260:	480b      	ldr	r0, [pc, #44]	; (8014290 <prvInitialiseTaskLists+0x74>)
 8014262:	f7fe f8f1 	bl	8012448 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8014266:	4b0b      	ldr	r3, [pc, #44]	; (8014294 <prvInitialiseTaskLists+0x78>)
 8014268:	4a05      	ldr	r2, [pc, #20]	; (8014280 <prvInitialiseTaskLists+0x64>)
 801426a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801426c:	4b0a      	ldr	r3, [pc, #40]	; (8014298 <prvInitialiseTaskLists+0x7c>)
 801426e:	4a05      	ldr	r2, [pc, #20]	; (8014284 <prvInitialiseTaskLists+0x68>)
 8014270:	601a      	str	r2, [r3, #0]
}
 8014272:	bf00      	nop
 8014274:	3708      	adds	r7, #8
 8014276:	46bd      	mov	sp, r7
 8014278:	bd80      	pop	{r7, pc}
 801427a:	bf00      	nop
 801427c:	2000313c 	.word	0x2000313c
 8014280:	2000359c 	.word	0x2000359c
 8014284:	200035b0 	.word	0x200035b0
 8014288:	200035cc 	.word	0x200035cc
 801428c:	200035e0 	.word	0x200035e0
 8014290:	200035f8 	.word	0x200035f8
 8014294:	200035c4 	.word	0x200035c4
 8014298:	200035c8 	.word	0x200035c8

0801429c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801429c:	b580      	push	{r7, lr}
 801429e:	b082      	sub	sp, #8
 80142a0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80142a2:	e019      	b.n	80142d8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80142a4:	f001 f916 	bl	80154d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80142a8:	4b10      	ldr	r3, [pc, #64]	; (80142ec <prvCheckTasksWaitingTermination+0x50>)
 80142aa:	68db      	ldr	r3, [r3, #12]
 80142ac:	68db      	ldr	r3, [r3, #12]
 80142ae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80142b0:	687b      	ldr	r3, [r7, #4]
 80142b2:	3304      	adds	r3, #4
 80142b4:	4618      	mov	r0, r3
 80142b6:	f7fe f951 	bl	801255c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80142ba:	4b0d      	ldr	r3, [pc, #52]	; (80142f0 <prvCheckTasksWaitingTermination+0x54>)
 80142bc:	681b      	ldr	r3, [r3, #0]
 80142be:	3b01      	subs	r3, #1
 80142c0:	4a0b      	ldr	r2, [pc, #44]	; (80142f0 <prvCheckTasksWaitingTermination+0x54>)
 80142c2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80142c4:	4b0b      	ldr	r3, [pc, #44]	; (80142f4 <prvCheckTasksWaitingTermination+0x58>)
 80142c6:	681b      	ldr	r3, [r3, #0]
 80142c8:	3b01      	subs	r3, #1
 80142ca:	4a0a      	ldr	r2, [pc, #40]	; (80142f4 <prvCheckTasksWaitingTermination+0x58>)
 80142cc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80142ce:	f001 f931 	bl	8015534 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80142d2:	6878      	ldr	r0, [r7, #4]
 80142d4:	f000 f810 	bl	80142f8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80142d8:	4b06      	ldr	r3, [pc, #24]	; (80142f4 <prvCheckTasksWaitingTermination+0x58>)
 80142da:	681b      	ldr	r3, [r3, #0]
 80142dc:	2b00      	cmp	r3, #0
 80142de:	d1e1      	bne.n	80142a4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80142e0:	bf00      	nop
 80142e2:	bf00      	nop
 80142e4:	3708      	adds	r7, #8
 80142e6:	46bd      	mov	sp, r7
 80142e8:	bd80      	pop	{r7, pc}
 80142ea:	bf00      	nop
 80142ec:	200035e0 	.word	0x200035e0
 80142f0:	2000360c 	.word	0x2000360c
 80142f4:	200035f4 	.word	0x200035f4

080142f8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80142f8:	b580      	push	{r7, lr}
 80142fa:	b084      	sub	sp, #16
 80142fc:	af00      	add	r7, sp, #0
 80142fe:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8014300:	687b      	ldr	r3, [r7, #4]
 8014302:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8014306:	2b00      	cmp	r3, #0
 8014308:	d108      	bne.n	801431c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801430a:	687b      	ldr	r3, [r7, #4]
 801430c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801430e:	4618      	mov	r0, r3
 8014310:	f001 face 	bl	80158b0 <vPortFree>
				vPortFree( pxTCB );
 8014314:	6878      	ldr	r0, [r7, #4]
 8014316:	f001 facb 	bl	80158b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801431a:	e018      	b.n	801434e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801431c:	687b      	ldr	r3, [r7, #4]
 801431e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8014322:	2b01      	cmp	r3, #1
 8014324:	d103      	bne.n	801432e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8014326:	6878      	ldr	r0, [r7, #4]
 8014328:	f001 fac2 	bl	80158b0 <vPortFree>
	}
 801432c:	e00f      	b.n	801434e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801432e:	687b      	ldr	r3, [r7, #4]
 8014330:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8014334:	2b02      	cmp	r3, #2
 8014336:	d00a      	beq.n	801434e <prvDeleteTCB+0x56>
	__asm volatile
 8014338:	f04f 0350 	mov.w	r3, #80	; 0x50
 801433c:	f383 8811 	msr	BASEPRI, r3
 8014340:	f3bf 8f6f 	isb	sy
 8014344:	f3bf 8f4f 	dsb	sy
 8014348:	60fb      	str	r3, [r7, #12]
}
 801434a:	bf00      	nop
 801434c:	e7fe      	b.n	801434c <prvDeleteTCB+0x54>
	}
 801434e:	bf00      	nop
 8014350:	3710      	adds	r7, #16
 8014352:	46bd      	mov	sp, r7
 8014354:	bd80      	pop	{r7, pc}
	...

08014358 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8014358:	b480      	push	{r7}
 801435a:	b083      	sub	sp, #12
 801435c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801435e:	4b0c      	ldr	r3, [pc, #48]	; (8014390 <prvResetNextTaskUnblockTime+0x38>)
 8014360:	681b      	ldr	r3, [r3, #0]
 8014362:	681b      	ldr	r3, [r3, #0]
 8014364:	2b00      	cmp	r3, #0
 8014366:	d104      	bne.n	8014372 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8014368:	4b0a      	ldr	r3, [pc, #40]	; (8014394 <prvResetNextTaskUnblockTime+0x3c>)
 801436a:	f04f 32ff 	mov.w	r2, #4294967295
 801436e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8014370:	e008      	b.n	8014384 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014372:	4b07      	ldr	r3, [pc, #28]	; (8014390 <prvResetNextTaskUnblockTime+0x38>)
 8014374:	681b      	ldr	r3, [r3, #0]
 8014376:	68db      	ldr	r3, [r3, #12]
 8014378:	68db      	ldr	r3, [r3, #12]
 801437a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801437c:	687b      	ldr	r3, [r7, #4]
 801437e:	685b      	ldr	r3, [r3, #4]
 8014380:	4a04      	ldr	r2, [pc, #16]	; (8014394 <prvResetNextTaskUnblockTime+0x3c>)
 8014382:	6013      	str	r3, [r2, #0]
}
 8014384:	bf00      	nop
 8014386:	370c      	adds	r7, #12
 8014388:	46bd      	mov	sp, r7
 801438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801438e:	4770      	bx	lr
 8014390:	200035c4 	.word	0x200035c4
 8014394:	2000362c 	.word	0x2000362c

08014398 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8014398:	b480      	push	{r7}
 801439a:	b083      	sub	sp, #12
 801439c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 801439e:	4b05      	ldr	r3, [pc, #20]	; (80143b4 <xTaskGetCurrentTaskHandle+0x1c>)
 80143a0:	681b      	ldr	r3, [r3, #0]
 80143a2:	607b      	str	r3, [r7, #4]

		return xReturn;
 80143a4:	687b      	ldr	r3, [r7, #4]
	}
 80143a6:	4618      	mov	r0, r3
 80143a8:	370c      	adds	r7, #12
 80143aa:	46bd      	mov	sp, r7
 80143ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143b0:	4770      	bx	lr
 80143b2:	bf00      	nop
 80143b4:	20003138 	.word	0x20003138

080143b8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80143b8:	b480      	push	{r7}
 80143ba:	b083      	sub	sp, #12
 80143bc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80143be:	4b0b      	ldr	r3, [pc, #44]	; (80143ec <xTaskGetSchedulerState+0x34>)
 80143c0:	681b      	ldr	r3, [r3, #0]
 80143c2:	2b00      	cmp	r3, #0
 80143c4:	d102      	bne.n	80143cc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80143c6:	2301      	movs	r3, #1
 80143c8:	607b      	str	r3, [r7, #4]
 80143ca:	e008      	b.n	80143de <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80143cc:	4b08      	ldr	r3, [pc, #32]	; (80143f0 <xTaskGetSchedulerState+0x38>)
 80143ce:	681b      	ldr	r3, [r3, #0]
 80143d0:	2b00      	cmp	r3, #0
 80143d2:	d102      	bne.n	80143da <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80143d4:	2302      	movs	r3, #2
 80143d6:	607b      	str	r3, [r7, #4]
 80143d8:	e001      	b.n	80143de <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80143da:	2300      	movs	r3, #0
 80143dc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80143de:	687b      	ldr	r3, [r7, #4]
	}
 80143e0:	4618      	mov	r0, r3
 80143e2:	370c      	adds	r7, #12
 80143e4:	46bd      	mov	sp, r7
 80143e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143ea:	4770      	bx	lr
 80143ec:	20003618 	.word	0x20003618
 80143f0:	20003634 	.word	0x20003634

080143f4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80143f4:	b580      	push	{r7, lr}
 80143f6:	b084      	sub	sp, #16
 80143f8:	af00      	add	r7, sp, #0
 80143fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8014400:	2300      	movs	r3, #0
 8014402:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8014404:	687b      	ldr	r3, [r7, #4]
 8014406:	2b00      	cmp	r3, #0
 8014408:	d051      	beq.n	80144ae <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801440a:	68bb      	ldr	r3, [r7, #8]
 801440c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801440e:	4b2a      	ldr	r3, [pc, #168]	; (80144b8 <xTaskPriorityInherit+0xc4>)
 8014410:	681b      	ldr	r3, [r3, #0]
 8014412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014414:	429a      	cmp	r2, r3
 8014416:	d241      	bcs.n	801449c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8014418:	68bb      	ldr	r3, [r7, #8]
 801441a:	699b      	ldr	r3, [r3, #24]
 801441c:	2b00      	cmp	r3, #0
 801441e:	db06      	blt.n	801442e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014420:	4b25      	ldr	r3, [pc, #148]	; (80144b8 <xTaskPriorityInherit+0xc4>)
 8014422:	681b      	ldr	r3, [r3, #0]
 8014424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014426:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801442a:	68bb      	ldr	r3, [r7, #8]
 801442c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801442e:	68bb      	ldr	r3, [r7, #8]
 8014430:	6959      	ldr	r1, [r3, #20]
 8014432:	68bb      	ldr	r3, [r7, #8]
 8014434:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014436:	4613      	mov	r3, r2
 8014438:	009b      	lsls	r3, r3, #2
 801443a:	4413      	add	r3, r2
 801443c:	009b      	lsls	r3, r3, #2
 801443e:	4a1f      	ldr	r2, [pc, #124]	; (80144bc <xTaskPriorityInherit+0xc8>)
 8014440:	4413      	add	r3, r2
 8014442:	4299      	cmp	r1, r3
 8014444:	d122      	bne.n	801448c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014446:	68bb      	ldr	r3, [r7, #8]
 8014448:	3304      	adds	r3, #4
 801444a:	4618      	mov	r0, r3
 801444c:	f7fe f886 	bl	801255c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8014450:	4b19      	ldr	r3, [pc, #100]	; (80144b8 <xTaskPriorityInherit+0xc4>)
 8014452:	681b      	ldr	r3, [r3, #0]
 8014454:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014456:	68bb      	ldr	r3, [r7, #8]
 8014458:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801445a:	68bb      	ldr	r3, [r7, #8]
 801445c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801445e:	4b18      	ldr	r3, [pc, #96]	; (80144c0 <xTaskPriorityInherit+0xcc>)
 8014460:	681b      	ldr	r3, [r3, #0]
 8014462:	429a      	cmp	r2, r3
 8014464:	d903      	bls.n	801446e <xTaskPriorityInherit+0x7a>
 8014466:	68bb      	ldr	r3, [r7, #8]
 8014468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801446a:	4a15      	ldr	r2, [pc, #84]	; (80144c0 <xTaskPriorityInherit+0xcc>)
 801446c:	6013      	str	r3, [r2, #0]
 801446e:	68bb      	ldr	r3, [r7, #8]
 8014470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014472:	4613      	mov	r3, r2
 8014474:	009b      	lsls	r3, r3, #2
 8014476:	4413      	add	r3, r2
 8014478:	009b      	lsls	r3, r3, #2
 801447a:	4a10      	ldr	r2, [pc, #64]	; (80144bc <xTaskPriorityInherit+0xc8>)
 801447c:	441a      	add	r2, r3
 801447e:	68bb      	ldr	r3, [r7, #8]
 8014480:	3304      	adds	r3, #4
 8014482:	4619      	mov	r1, r3
 8014484:	4610      	mov	r0, r2
 8014486:	f7fe f80c 	bl	80124a2 <vListInsertEnd>
 801448a:	e004      	b.n	8014496 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801448c:	4b0a      	ldr	r3, [pc, #40]	; (80144b8 <xTaskPriorityInherit+0xc4>)
 801448e:	681b      	ldr	r3, [r3, #0]
 8014490:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014492:	68bb      	ldr	r3, [r7, #8]
 8014494:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8014496:	2301      	movs	r3, #1
 8014498:	60fb      	str	r3, [r7, #12]
 801449a:	e008      	b.n	80144ae <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801449c:	68bb      	ldr	r3, [r7, #8]
 801449e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80144a0:	4b05      	ldr	r3, [pc, #20]	; (80144b8 <xTaskPriorityInherit+0xc4>)
 80144a2:	681b      	ldr	r3, [r3, #0]
 80144a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80144a6:	429a      	cmp	r2, r3
 80144a8:	d201      	bcs.n	80144ae <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80144aa:	2301      	movs	r3, #1
 80144ac:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80144ae:	68fb      	ldr	r3, [r7, #12]
	}
 80144b0:	4618      	mov	r0, r3
 80144b2:	3710      	adds	r7, #16
 80144b4:	46bd      	mov	sp, r7
 80144b6:	bd80      	pop	{r7, pc}
 80144b8:	20003138 	.word	0x20003138
 80144bc:	2000313c 	.word	0x2000313c
 80144c0:	20003614 	.word	0x20003614

080144c4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80144c4:	b580      	push	{r7, lr}
 80144c6:	b086      	sub	sp, #24
 80144c8:	af00      	add	r7, sp, #0
 80144ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80144cc:	687b      	ldr	r3, [r7, #4]
 80144ce:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80144d0:	2300      	movs	r3, #0
 80144d2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80144d4:	687b      	ldr	r3, [r7, #4]
 80144d6:	2b00      	cmp	r3, #0
 80144d8:	d056      	beq.n	8014588 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80144da:	4b2e      	ldr	r3, [pc, #184]	; (8014594 <xTaskPriorityDisinherit+0xd0>)
 80144dc:	681b      	ldr	r3, [r3, #0]
 80144de:	693a      	ldr	r2, [r7, #16]
 80144e0:	429a      	cmp	r2, r3
 80144e2:	d00a      	beq.n	80144fa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80144e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144e8:	f383 8811 	msr	BASEPRI, r3
 80144ec:	f3bf 8f6f 	isb	sy
 80144f0:	f3bf 8f4f 	dsb	sy
 80144f4:	60fb      	str	r3, [r7, #12]
}
 80144f6:	bf00      	nop
 80144f8:	e7fe      	b.n	80144f8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80144fa:	693b      	ldr	r3, [r7, #16]
 80144fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80144fe:	2b00      	cmp	r3, #0
 8014500:	d10a      	bne.n	8014518 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8014502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014506:	f383 8811 	msr	BASEPRI, r3
 801450a:	f3bf 8f6f 	isb	sy
 801450e:	f3bf 8f4f 	dsb	sy
 8014512:	60bb      	str	r3, [r7, #8]
}
 8014514:	bf00      	nop
 8014516:	e7fe      	b.n	8014516 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8014518:	693b      	ldr	r3, [r7, #16]
 801451a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801451c:	1e5a      	subs	r2, r3, #1
 801451e:	693b      	ldr	r3, [r7, #16]
 8014520:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8014522:	693b      	ldr	r3, [r7, #16]
 8014524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014526:	693b      	ldr	r3, [r7, #16]
 8014528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801452a:	429a      	cmp	r2, r3
 801452c:	d02c      	beq.n	8014588 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801452e:	693b      	ldr	r3, [r7, #16]
 8014530:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014532:	2b00      	cmp	r3, #0
 8014534:	d128      	bne.n	8014588 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014536:	693b      	ldr	r3, [r7, #16]
 8014538:	3304      	adds	r3, #4
 801453a:	4618      	mov	r0, r3
 801453c:	f7fe f80e 	bl	801255c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8014540:	693b      	ldr	r3, [r7, #16]
 8014542:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014544:	693b      	ldr	r3, [r7, #16]
 8014546:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014548:	693b      	ldr	r3, [r7, #16]
 801454a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801454c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8014550:	693b      	ldr	r3, [r7, #16]
 8014552:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8014554:	693b      	ldr	r3, [r7, #16]
 8014556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014558:	4b0f      	ldr	r3, [pc, #60]	; (8014598 <xTaskPriorityDisinherit+0xd4>)
 801455a:	681b      	ldr	r3, [r3, #0]
 801455c:	429a      	cmp	r2, r3
 801455e:	d903      	bls.n	8014568 <xTaskPriorityDisinherit+0xa4>
 8014560:	693b      	ldr	r3, [r7, #16]
 8014562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014564:	4a0c      	ldr	r2, [pc, #48]	; (8014598 <xTaskPriorityDisinherit+0xd4>)
 8014566:	6013      	str	r3, [r2, #0]
 8014568:	693b      	ldr	r3, [r7, #16]
 801456a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801456c:	4613      	mov	r3, r2
 801456e:	009b      	lsls	r3, r3, #2
 8014570:	4413      	add	r3, r2
 8014572:	009b      	lsls	r3, r3, #2
 8014574:	4a09      	ldr	r2, [pc, #36]	; (801459c <xTaskPriorityDisinherit+0xd8>)
 8014576:	441a      	add	r2, r3
 8014578:	693b      	ldr	r3, [r7, #16]
 801457a:	3304      	adds	r3, #4
 801457c:	4619      	mov	r1, r3
 801457e:	4610      	mov	r0, r2
 8014580:	f7fd ff8f 	bl	80124a2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8014584:	2301      	movs	r3, #1
 8014586:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014588:	697b      	ldr	r3, [r7, #20]
	}
 801458a:	4618      	mov	r0, r3
 801458c:	3718      	adds	r7, #24
 801458e:	46bd      	mov	sp, r7
 8014590:	bd80      	pop	{r7, pc}
 8014592:	bf00      	nop
 8014594:	20003138 	.word	0x20003138
 8014598:	20003614 	.word	0x20003614
 801459c:	2000313c 	.word	0x2000313c

080145a0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80145a0:	b580      	push	{r7, lr}
 80145a2:	b088      	sub	sp, #32
 80145a4:	af00      	add	r7, sp, #0
 80145a6:	6078      	str	r0, [r7, #4]
 80145a8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80145ae:	2301      	movs	r3, #1
 80145b0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80145b2:	687b      	ldr	r3, [r7, #4]
 80145b4:	2b00      	cmp	r3, #0
 80145b6:	d06a      	beq.n	801468e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80145b8:	69bb      	ldr	r3, [r7, #24]
 80145ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80145bc:	2b00      	cmp	r3, #0
 80145be:	d10a      	bne.n	80145d6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80145c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145c4:	f383 8811 	msr	BASEPRI, r3
 80145c8:	f3bf 8f6f 	isb	sy
 80145cc:	f3bf 8f4f 	dsb	sy
 80145d0:	60fb      	str	r3, [r7, #12]
}
 80145d2:	bf00      	nop
 80145d4:	e7fe      	b.n	80145d4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80145d6:	69bb      	ldr	r3, [r7, #24]
 80145d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80145da:	683a      	ldr	r2, [r7, #0]
 80145dc:	429a      	cmp	r2, r3
 80145de:	d902      	bls.n	80145e6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80145e0:	683b      	ldr	r3, [r7, #0]
 80145e2:	61fb      	str	r3, [r7, #28]
 80145e4:	e002      	b.n	80145ec <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80145e6:	69bb      	ldr	r3, [r7, #24]
 80145e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80145ea:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80145ec:	69bb      	ldr	r3, [r7, #24]
 80145ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80145f0:	69fa      	ldr	r2, [r7, #28]
 80145f2:	429a      	cmp	r2, r3
 80145f4:	d04b      	beq.n	801468e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80145f6:	69bb      	ldr	r3, [r7, #24]
 80145f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80145fa:	697a      	ldr	r2, [r7, #20]
 80145fc:	429a      	cmp	r2, r3
 80145fe:	d146      	bne.n	801468e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8014600:	4b25      	ldr	r3, [pc, #148]	; (8014698 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8014602:	681b      	ldr	r3, [r3, #0]
 8014604:	69ba      	ldr	r2, [r7, #24]
 8014606:	429a      	cmp	r2, r3
 8014608:	d10a      	bne.n	8014620 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 801460a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801460e:	f383 8811 	msr	BASEPRI, r3
 8014612:	f3bf 8f6f 	isb	sy
 8014616:	f3bf 8f4f 	dsb	sy
 801461a:	60bb      	str	r3, [r7, #8]
}
 801461c:	bf00      	nop
 801461e:	e7fe      	b.n	801461e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8014620:	69bb      	ldr	r3, [r7, #24]
 8014622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014624:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8014626:	69bb      	ldr	r3, [r7, #24]
 8014628:	69fa      	ldr	r2, [r7, #28]
 801462a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801462c:	69bb      	ldr	r3, [r7, #24]
 801462e:	699b      	ldr	r3, [r3, #24]
 8014630:	2b00      	cmp	r3, #0
 8014632:	db04      	blt.n	801463e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014634:	69fb      	ldr	r3, [r7, #28]
 8014636:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801463a:	69bb      	ldr	r3, [r7, #24]
 801463c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801463e:	69bb      	ldr	r3, [r7, #24]
 8014640:	6959      	ldr	r1, [r3, #20]
 8014642:	693a      	ldr	r2, [r7, #16]
 8014644:	4613      	mov	r3, r2
 8014646:	009b      	lsls	r3, r3, #2
 8014648:	4413      	add	r3, r2
 801464a:	009b      	lsls	r3, r3, #2
 801464c:	4a13      	ldr	r2, [pc, #76]	; (801469c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801464e:	4413      	add	r3, r2
 8014650:	4299      	cmp	r1, r3
 8014652:	d11c      	bne.n	801468e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014654:	69bb      	ldr	r3, [r7, #24]
 8014656:	3304      	adds	r3, #4
 8014658:	4618      	mov	r0, r3
 801465a:	f7fd ff7f 	bl	801255c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801465e:	69bb      	ldr	r3, [r7, #24]
 8014660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014662:	4b0f      	ldr	r3, [pc, #60]	; (80146a0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8014664:	681b      	ldr	r3, [r3, #0]
 8014666:	429a      	cmp	r2, r3
 8014668:	d903      	bls.n	8014672 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 801466a:	69bb      	ldr	r3, [r7, #24]
 801466c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801466e:	4a0c      	ldr	r2, [pc, #48]	; (80146a0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8014670:	6013      	str	r3, [r2, #0]
 8014672:	69bb      	ldr	r3, [r7, #24]
 8014674:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014676:	4613      	mov	r3, r2
 8014678:	009b      	lsls	r3, r3, #2
 801467a:	4413      	add	r3, r2
 801467c:	009b      	lsls	r3, r3, #2
 801467e:	4a07      	ldr	r2, [pc, #28]	; (801469c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8014680:	441a      	add	r2, r3
 8014682:	69bb      	ldr	r3, [r7, #24]
 8014684:	3304      	adds	r3, #4
 8014686:	4619      	mov	r1, r3
 8014688:	4610      	mov	r0, r2
 801468a:	f7fd ff0a 	bl	80124a2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801468e:	bf00      	nop
 8014690:	3720      	adds	r7, #32
 8014692:	46bd      	mov	sp, r7
 8014694:	bd80      	pop	{r7, pc}
 8014696:	bf00      	nop
 8014698:	20003138 	.word	0x20003138
 801469c:	2000313c 	.word	0x2000313c
 80146a0:	20003614 	.word	0x20003614

080146a4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80146a4:	b480      	push	{r7}
 80146a6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80146a8:	4b07      	ldr	r3, [pc, #28]	; (80146c8 <pvTaskIncrementMutexHeldCount+0x24>)
 80146aa:	681b      	ldr	r3, [r3, #0]
 80146ac:	2b00      	cmp	r3, #0
 80146ae:	d004      	beq.n	80146ba <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80146b0:	4b05      	ldr	r3, [pc, #20]	; (80146c8 <pvTaskIncrementMutexHeldCount+0x24>)
 80146b2:	681b      	ldr	r3, [r3, #0]
 80146b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80146b6:	3201      	adds	r2, #1
 80146b8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80146ba:	4b03      	ldr	r3, [pc, #12]	; (80146c8 <pvTaskIncrementMutexHeldCount+0x24>)
 80146bc:	681b      	ldr	r3, [r3, #0]
	}
 80146be:	4618      	mov	r0, r3
 80146c0:	46bd      	mov	sp, r7
 80146c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146c6:	4770      	bx	lr
 80146c8:	20003138 	.word	0x20003138

080146cc <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 80146cc:	b580      	push	{r7, lr}
 80146ce:	b084      	sub	sp, #16
 80146d0:	af00      	add	r7, sp, #0
 80146d2:	6078      	str	r0, [r7, #4]
 80146d4:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 80146d6:	f000 fefd 	bl	80154d4 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 80146da:	4b1e      	ldr	r3, [pc, #120]	; (8014754 <ulTaskNotifyTake+0x88>)
 80146dc:	681b      	ldr	r3, [r3, #0]
 80146de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80146e0:	2b00      	cmp	r3, #0
 80146e2:	d113      	bne.n	801470c <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80146e4:	4b1b      	ldr	r3, [pc, #108]	; (8014754 <ulTaskNotifyTake+0x88>)
 80146e6:	681b      	ldr	r3, [r3, #0]
 80146e8:	2201      	movs	r2, #1
 80146ea:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 80146ee:	683b      	ldr	r3, [r7, #0]
 80146f0:	2b00      	cmp	r3, #0
 80146f2:	d00b      	beq.n	801470c <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80146f4:	2101      	movs	r1, #1
 80146f6:	6838      	ldr	r0, [r7, #0]
 80146f8:	f000 f9c4 	bl	8014a84 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80146fc:	4b16      	ldr	r3, [pc, #88]	; (8014758 <ulTaskNotifyTake+0x8c>)
 80146fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014702:	601a      	str	r2, [r3, #0]
 8014704:	f3bf 8f4f 	dsb	sy
 8014708:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 801470c:	f000 ff12 	bl	8015534 <vPortExitCritical>

		taskENTER_CRITICAL();
 8014710:	f000 fee0 	bl	80154d4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8014714:	4b0f      	ldr	r3, [pc, #60]	; (8014754 <ulTaskNotifyTake+0x88>)
 8014716:	681b      	ldr	r3, [r3, #0]
 8014718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801471a:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 801471c:	68fb      	ldr	r3, [r7, #12]
 801471e:	2b00      	cmp	r3, #0
 8014720:	d00c      	beq.n	801473c <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 8014722:	687b      	ldr	r3, [r7, #4]
 8014724:	2b00      	cmp	r3, #0
 8014726:	d004      	beq.n	8014732 <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8014728:	4b0a      	ldr	r3, [pc, #40]	; (8014754 <ulTaskNotifyTake+0x88>)
 801472a:	681b      	ldr	r3, [r3, #0]
 801472c:	2200      	movs	r2, #0
 801472e:	655a      	str	r2, [r3, #84]	; 0x54
 8014730:	e004      	b.n	801473c <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8014732:	4b08      	ldr	r3, [pc, #32]	; (8014754 <ulTaskNotifyTake+0x88>)
 8014734:	681b      	ldr	r3, [r3, #0]
 8014736:	68fa      	ldr	r2, [r7, #12]
 8014738:	3a01      	subs	r2, #1
 801473a:	655a      	str	r2, [r3, #84]	; 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801473c:	4b05      	ldr	r3, [pc, #20]	; (8014754 <ulTaskNotifyTake+0x88>)
 801473e:	681b      	ldr	r3, [r3, #0]
 8014740:	2200      	movs	r2, #0
 8014742:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 8014746:	f000 fef5 	bl	8015534 <vPortExitCritical>

		return ulReturn;
 801474a:	68fb      	ldr	r3, [r7, #12]
	}
 801474c:	4618      	mov	r0, r3
 801474e:	3710      	adds	r7, #16
 8014750:	46bd      	mov	sp, r7
 8014752:	bd80      	pop	{r7, pc}
 8014754:	20003138 	.word	0x20003138
 8014758:	e000ed04 	.word	0xe000ed04

0801475c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 801475c:	b580      	push	{r7, lr}
 801475e:	b08a      	sub	sp, #40	; 0x28
 8014760:	af00      	add	r7, sp, #0
 8014762:	60f8      	str	r0, [r7, #12]
 8014764:	60b9      	str	r1, [r7, #8]
 8014766:	603b      	str	r3, [r7, #0]
 8014768:	4613      	mov	r3, r2
 801476a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 801476c:	2301      	movs	r3, #1
 801476e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8014770:	68fb      	ldr	r3, [r7, #12]
 8014772:	2b00      	cmp	r3, #0
 8014774:	d10a      	bne.n	801478c <xTaskGenericNotify+0x30>
	__asm volatile
 8014776:	f04f 0350 	mov.w	r3, #80	; 0x50
 801477a:	f383 8811 	msr	BASEPRI, r3
 801477e:	f3bf 8f6f 	isb	sy
 8014782:	f3bf 8f4f 	dsb	sy
 8014786:	61bb      	str	r3, [r7, #24]
}
 8014788:	bf00      	nop
 801478a:	e7fe      	b.n	801478a <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 801478c:	68fb      	ldr	r3, [r7, #12]
 801478e:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8014790:	f000 fea0 	bl	80154d4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8014794:	683b      	ldr	r3, [r7, #0]
 8014796:	2b00      	cmp	r3, #0
 8014798:	d003      	beq.n	80147a2 <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 801479a:	6a3b      	ldr	r3, [r7, #32]
 801479c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801479e:	683b      	ldr	r3, [r7, #0]
 80147a0:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80147a2:	6a3b      	ldr	r3, [r7, #32]
 80147a4:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80147a8:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80147aa:	6a3b      	ldr	r3, [r7, #32]
 80147ac:	2202      	movs	r2, #2
 80147ae:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 80147b2:	79fb      	ldrb	r3, [r7, #7]
 80147b4:	2b04      	cmp	r3, #4
 80147b6:	d828      	bhi.n	801480a <xTaskGenericNotify+0xae>
 80147b8:	a201      	add	r2, pc, #4	; (adr r2, 80147c0 <xTaskGenericNotify+0x64>)
 80147ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80147be:	bf00      	nop
 80147c0:	0801482b 	.word	0x0801482b
 80147c4:	080147d5 	.word	0x080147d5
 80147c8:	080147e3 	.word	0x080147e3
 80147cc:	080147ef 	.word	0x080147ef
 80147d0:	080147f7 	.word	0x080147f7
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80147d4:	6a3b      	ldr	r3, [r7, #32]
 80147d6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80147d8:	68bb      	ldr	r3, [r7, #8]
 80147da:	431a      	orrs	r2, r3
 80147dc:	6a3b      	ldr	r3, [r7, #32]
 80147de:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80147e0:	e026      	b.n	8014830 <xTaskGenericNotify+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80147e2:	6a3b      	ldr	r3, [r7, #32]
 80147e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80147e6:	1c5a      	adds	r2, r3, #1
 80147e8:	6a3b      	ldr	r3, [r7, #32]
 80147ea:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80147ec:	e020      	b.n	8014830 <xTaskGenericNotify+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80147ee:	6a3b      	ldr	r3, [r7, #32]
 80147f0:	68ba      	ldr	r2, [r7, #8]
 80147f2:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80147f4:	e01c      	b.n	8014830 <xTaskGenericNotify+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80147f6:	7ffb      	ldrb	r3, [r7, #31]
 80147f8:	2b02      	cmp	r3, #2
 80147fa:	d003      	beq.n	8014804 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80147fc:	6a3b      	ldr	r3, [r7, #32]
 80147fe:	68ba      	ldr	r2, [r7, #8]
 8014800:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8014802:	e015      	b.n	8014830 <xTaskGenericNotify+0xd4>
						xReturn = pdFAIL;
 8014804:	2300      	movs	r3, #0
 8014806:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8014808:	e012      	b.n	8014830 <xTaskGenericNotify+0xd4>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 801480a:	6a3b      	ldr	r3, [r7, #32]
 801480c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801480e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014812:	d00c      	beq.n	801482e <xTaskGenericNotify+0xd2>
	__asm volatile
 8014814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014818:	f383 8811 	msr	BASEPRI, r3
 801481c:	f3bf 8f6f 	isb	sy
 8014820:	f3bf 8f4f 	dsb	sy
 8014824:	617b      	str	r3, [r7, #20]
}
 8014826:	bf00      	nop
 8014828:	e7fe      	b.n	8014828 <xTaskGenericNotify+0xcc>
					break;
 801482a:	bf00      	nop
 801482c:	e000      	b.n	8014830 <xTaskGenericNotify+0xd4>

					break;
 801482e:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8014830:	7ffb      	ldrb	r3, [r7, #31]
 8014832:	2b01      	cmp	r3, #1
 8014834:	d13a      	bne.n	80148ac <xTaskGenericNotify+0x150>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014836:	6a3b      	ldr	r3, [r7, #32]
 8014838:	3304      	adds	r3, #4
 801483a:	4618      	mov	r0, r3
 801483c:	f7fd fe8e 	bl	801255c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8014840:	6a3b      	ldr	r3, [r7, #32]
 8014842:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014844:	4b1d      	ldr	r3, [pc, #116]	; (80148bc <xTaskGenericNotify+0x160>)
 8014846:	681b      	ldr	r3, [r3, #0]
 8014848:	429a      	cmp	r2, r3
 801484a:	d903      	bls.n	8014854 <xTaskGenericNotify+0xf8>
 801484c:	6a3b      	ldr	r3, [r7, #32]
 801484e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014850:	4a1a      	ldr	r2, [pc, #104]	; (80148bc <xTaskGenericNotify+0x160>)
 8014852:	6013      	str	r3, [r2, #0]
 8014854:	6a3b      	ldr	r3, [r7, #32]
 8014856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014858:	4613      	mov	r3, r2
 801485a:	009b      	lsls	r3, r3, #2
 801485c:	4413      	add	r3, r2
 801485e:	009b      	lsls	r3, r3, #2
 8014860:	4a17      	ldr	r2, [pc, #92]	; (80148c0 <xTaskGenericNotify+0x164>)
 8014862:	441a      	add	r2, r3
 8014864:	6a3b      	ldr	r3, [r7, #32]
 8014866:	3304      	adds	r3, #4
 8014868:	4619      	mov	r1, r3
 801486a:	4610      	mov	r0, r2
 801486c:	f7fd fe19 	bl	80124a2 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8014870:	6a3b      	ldr	r3, [r7, #32]
 8014872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014874:	2b00      	cmp	r3, #0
 8014876:	d00a      	beq.n	801488e <xTaskGenericNotify+0x132>
	__asm volatile
 8014878:	f04f 0350 	mov.w	r3, #80	; 0x50
 801487c:	f383 8811 	msr	BASEPRI, r3
 8014880:	f3bf 8f6f 	isb	sy
 8014884:	f3bf 8f4f 	dsb	sy
 8014888:	613b      	str	r3, [r7, #16]
}
 801488a:	bf00      	nop
 801488c:	e7fe      	b.n	801488c <xTaskGenericNotify+0x130>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 801488e:	6a3b      	ldr	r3, [r7, #32]
 8014890:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014892:	4b0c      	ldr	r3, [pc, #48]	; (80148c4 <xTaskGenericNotify+0x168>)
 8014894:	681b      	ldr	r3, [r3, #0]
 8014896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014898:	429a      	cmp	r2, r3
 801489a:	d907      	bls.n	80148ac <xTaskGenericNotify+0x150>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 801489c:	4b0a      	ldr	r3, [pc, #40]	; (80148c8 <xTaskGenericNotify+0x16c>)
 801489e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80148a2:	601a      	str	r2, [r3, #0]
 80148a4:	f3bf 8f4f 	dsb	sy
 80148a8:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80148ac:	f000 fe42 	bl	8015534 <vPortExitCritical>

		return xReturn;
 80148b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80148b2:	4618      	mov	r0, r3
 80148b4:	3728      	adds	r7, #40	; 0x28
 80148b6:	46bd      	mov	sp, r7
 80148b8:	bd80      	pop	{r7, pc}
 80148ba:	bf00      	nop
 80148bc:	20003614 	.word	0x20003614
 80148c0:	2000313c 	.word	0x2000313c
 80148c4:	20003138 	.word	0x20003138
 80148c8:	e000ed04 	.word	0xe000ed04

080148cc <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80148cc:	b580      	push	{r7, lr}
 80148ce:	b08e      	sub	sp, #56	; 0x38
 80148d0:	af00      	add	r7, sp, #0
 80148d2:	60f8      	str	r0, [r7, #12]
 80148d4:	60b9      	str	r1, [r7, #8]
 80148d6:	603b      	str	r3, [r7, #0]
 80148d8:	4613      	mov	r3, r2
 80148da:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80148dc:	2301      	movs	r3, #1
 80148de:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80148e0:	68fb      	ldr	r3, [r7, #12]
 80148e2:	2b00      	cmp	r3, #0
 80148e4:	d10a      	bne.n	80148fc <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 80148e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80148ea:	f383 8811 	msr	BASEPRI, r3
 80148ee:	f3bf 8f6f 	isb	sy
 80148f2:	f3bf 8f4f 	dsb	sy
 80148f6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80148f8:	bf00      	nop
 80148fa:	e7fe      	b.n	80148fa <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80148fc:	f000 fecc 	bl	8015698 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8014900:	68fb      	ldr	r3, [r7, #12]
 8014902:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8014904:	f3ef 8211 	mrs	r2, BASEPRI
 8014908:	f04f 0350 	mov.w	r3, #80	; 0x50
 801490c:	f383 8811 	msr	BASEPRI, r3
 8014910:	f3bf 8f6f 	isb	sy
 8014914:	f3bf 8f4f 	dsb	sy
 8014918:	623a      	str	r2, [r7, #32]
 801491a:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 801491c:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801491e:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8014920:	683b      	ldr	r3, [r7, #0]
 8014922:	2b00      	cmp	r3, #0
 8014924:	d003      	beq.n	801492e <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8014926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014928:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801492a:	683b      	ldr	r3, [r7, #0]
 801492c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 801492e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014930:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8014934:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8014938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801493a:	2202      	movs	r2, #2
 801493c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 8014940:	79fb      	ldrb	r3, [r7, #7]
 8014942:	2b04      	cmp	r3, #4
 8014944:	d828      	bhi.n	8014998 <xTaskGenericNotifyFromISR+0xcc>
 8014946:	a201      	add	r2, pc, #4	; (adr r2, 801494c <xTaskGenericNotifyFromISR+0x80>)
 8014948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801494c:	080149b9 	.word	0x080149b9
 8014950:	08014961 	.word	0x08014961
 8014954:	0801496f 	.word	0x0801496f
 8014958:	0801497b 	.word	0x0801497b
 801495c:	08014983 	.word	0x08014983
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8014960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014962:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8014964:	68bb      	ldr	r3, [r7, #8]
 8014966:	431a      	orrs	r2, r3
 8014968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801496a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 801496c:	e027      	b.n	80149be <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 801496e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014972:	1c5a      	adds	r2, r3, #1
 8014974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014976:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8014978:	e021      	b.n	80149be <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 801497a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801497c:	68ba      	ldr	r2, [r7, #8]
 801497e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8014980:	e01d      	b.n	80149be <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8014982:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8014986:	2b02      	cmp	r3, #2
 8014988:	d003      	beq.n	8014992 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 801498a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801498c:	68ba      	ldr	r2, [r7, #8]
 801498e:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8014990:	e015      	b.n	80149be <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 8014992:	2300      	movs	r3, #0
 8014994:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8014996:	e012      	b.n	80149be <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8014998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801499a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801499c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80149a0:	d00c      	beq.n	80149bc <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 80149a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149a6:	f383 8811 	msr	BASEPRI, r3
 80149aa:	f3bf 8f6f 	isb	sy
 80149ae:	f3bf 8f4f 	dsb	sy
 80149b2:	61bb      	str	r3, [r7, #24]
}
 80149b4:	bf00      	nop
 80149b6:	e7fe      	b.n	80149b6 <xTaskGenericNotifyFromISR+0xea>
					break;
 80149b8:	bf00      	nop
 80149ba:	e000      	b.n	80149be <xTaskGenericNotifyFromISR+0xf2>
					break;
 80149bc:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80149be:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80149c2:	2b01      	cmp	r3, #1
 80149c4:	d146      	bne.n	8014a54 <xTaskGenericNotifyFromISR+0x188>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80149c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80149ca:	2b00      	cmp	r3, #0
 80149cc:	d00a      	beq.n	80149e4 <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 80149ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149d2:	f383 8811 	msr	BASEPRI, r3
 80149d6:	f3bf 8f6f 	isb	sy
 80149da:	f3bf 8f4f 	dsb	sy
 80149de:	617b      	str	r3, [r7, #20]
}
 80149e0:	bf00      	nop
 80149e2:	e7fe      	b.n	80149e2 <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80149e4:	4b21      	ldr	r3, [pc, #132]	; (8014a6c <xTaskGenericNotifyFromISR+0x1a0>)
 80149e6:	681b      	ldr	r3, [r3, #0]
 80149e8:	2b00      	cmp	r3, #0
 80149ea:	d11d      	bne.n	8014a28 <xTaskGenericNotifyFromISR+0x15c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80149ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149ee:	3304      	adds	r3, #4
 80149f0:	4618      	mov	r0, r3
 80149f2:	f7fd fdb3 	bl	801255c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80149f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80149fa:	4b1d      	ldr	r3, [pc, #116]	; (8014a70 <xTaskGenericNotifyFromISR+0x1a4>)
 80149fc:	681b      	ldr	r3, [r3, #0]
 80149fe:	429a      	cmp	r2, r3
 8014a00:	d903      	bls.n	8014a0a <xTaskGenericNotifyFromISR+0x13e>
 8014a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a06:	4a1a      	ldr	r2, [pc, #104]	; (8014a70 <xTaskGenericNotifyFromISR+0x1a4>)
 8014a08:	6013      	str	r3, [r2, #0]
 8014a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014a0e:	4613      	mov	r3, r2
 8014a10:	009b      	lsls	r3, r3, #2
 8014a12:	4413      	add	r3, r2
 8014a14:	009b      	lsls	r3, r3, #2
 8014a16:	4a17      	ldr	r2, [pc, #92]	; (8014a74 <xTaskGenericNotifyFromISR+0x1a8>)
 8014a18:	441a      	add	r2, r3
 8014a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a1c:	3304      	adds	r3, #4
 8014a1e:	4619      	mov	r1, r3
 8014a20:	4610      	mov	r0, r2
 8014a22:	f7fd fd3e 	bl	80124a2 <vListInsertEnd>
 8014a26:	e005      	b.n	8014a34 <xTaskGenericNotifyFromISR+0x168>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8014a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a2a:	3318      	adds	r3, #24
 8014a2c:	4619      	mov	r1, r3
 8014a2e:	4812      	ldr	r0, [pc, #72]	; (8014a78 <xTaskGenericNotifyFromISR+0x1ac>)
 8014a30:	f7fd fd37 	bl	80124a2 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014a38:	4b10      	ldr	r3, [pc, #64]	; (8014a7c <xTaskGenericNotifyFromISR+0x1b0>)
 8014a3a:	681b      	ldr	r3, [r3, #0]
 8014a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a3e:	429a      	cmp	r2, r3
 8014a40:	d908      	bls.n	8014a54 <xTaskGenericNotifyFromISR+0x188>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8014a42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014a44:	2b00      	cmp	r3, #0
 8014a46:	d002      	beq.n	8014a4e <xTaskGenericNotifyFromISR+0x182>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8014a48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014a4a:	2201      	movs	r2, #1
 8014a4c:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8014a4e:	4b0c      	ldr	r3, [pc, #48]	; (8014a80 <xTaskGenericNotifyFromISR+0x1b4>)
 8014a50:	2201      	movs	r2, #1
 8014a52:	601a      	str	r2, [r3, #0]
 8014a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a56:	613b      	str	r3, [r7, #16]
	__asm volatile
 8014a58:	693b      	ldr	r3, [r7, #16]
 8014a5a:	f383 8811 	msr	BASEPRI, r3
}
 8014a5e:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8014a60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8014a62:	4618      	mov	r0, r3
 8014a64:	3738      	adds	r7, #56	; 0x38
 8014a66:	46bd      	mov	sp, r7
 8014a68:	bd80      	pop	{r7, pc}
 8014a6a:	bf00      	nop
 8014a6c:	20003634 	.word	0x20003634
 8014a70:	20003614 	.word	0x20003614
 8014a74:	2000313c 	.word	0x2000313c
 8014a78:	200035cc 	.word	0x200035cc
 8014a7c:	20003138 	.word	0x20003138
 8014a80:	20003620 	.word	0x20003620

08014a84 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8014a84:	b580      	push	{r7, lr}
 8014a86:	b084      	sub	sp, #16
 8014a88:	af00      	add	r7, sp, #0
 8014a8a:	6078      	str	r0, [r7, #4]
 8014a8c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8014a8e:	4b21      	ldr	r3, [pc, #132]	; (8014b14 <prvAddCurrentTaskToDelayedList+0x90>)
 8014a90:	681b      	ldr	r3, [r3, #0]
 8014a92:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014a94:	4b20      	ldr	r3, [pc, #128]	; (8014b18 <prvAddCurrentTaskToDelayedList+0x94>)
 8014a96:	681b      	ldr	r3, [r3, #0]
 8014a98:	3304      	adds	r3, #4
 8014a9a:	4618      	mov	r0, r3
 8014a9c:	f7fd fd5e 	bl	801255c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8014aa0:	687b      	ldr	r3, [r7, #4]
 8014aa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014aa6:	d10a      	bne.n	8014abe <prvAddCurrentTaskToDelayedList+0x3a>
 8014aa8:	683b      	ldr	r3, [r7, #0]
 8014aaa:	2b00      	cmp	r3, #0
 8014aac:	d007      	beq.n	8014abe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014aae:	4b1a      	ldr	r3, [pc, #104]	; (8014b18 <prvAddCurrentTaskToDelayedList+0x94>)
 8014ab0:	681b      	ldr	r3, [r3, #0]
 8014ab2:	3304      	adds	r3, #4
 8014ab4:	4619      	mov	r1, r3
 8014ab6:	4819      	ldr	r0, [pc, #100]	; (8014b1c <prvAddCurrentTaskToDelayedList+0x98>)
 8014ab8:	f7fd fcf3 	bl	80124a2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8014abc:	e026      	b.n	8014b0c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8014abe:	68fa      	ldr	r2, [r7, #12]
 8014ac0:	687b      	ldr	r3, [r7, #4]
 8014ac2:	4413      	add	r3, r2
 8014ac4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8014ac6:	4b14      	ldr	r3, [pc, #80]	; (8014b18 <prvAddCurrentTaskToDelayedList+0x94>)
 8014ac8:	681b      	ldr	r3, [r3, #0]
 8014aca:	68ba      	ldr	r2, [r7, #8]
 8014acc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8014ace:	68ba      	ldr	r2, [r7, #8]
 8014ad0:	68fb      	ldr	r3, [r7, #12]
 8014ad2:	429a      	cmp	r2, r3
 8014ad4:	d209      	bcs.n	8014aea <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014ad6:	4b12      	ldr	r3, [pc, #72]	; (8014b20 <prvAddCurrentTaskToDelayedList+0x9c>)
 8014ad8:	681a      	ldr	r2, [r3, #0]
 8014ada:	4b0f      	ldr	r3, [pc, #60]	; (8014b18 <prvAddCurrentTaskToDelayedList+0x94>)
 8014adc:	681b      	ldr	r3, [r3, #0]
 8014ade:	3304      	adds	r3, #4
 8014ae0:	4619      	mov	r1, r3
 8014ae2:	4610      	mov	r0, r2
 8014ae4:	f7fd fd01 	bl	80124ea <vListInsert>
}
 8014ae8:	e010      	b.n	8014b0c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014aea:	4b0e      	ldr	r3, [pc, #56]	; (8014b24 <prvAddCurrentTaskToDelayedList+0xa0>)
 8014aec:	681a      	ldr	r2, [r3, #0]
 8014aee:	4b0a      	ldr	r3, [pc, #40]	; (8014b18 <prvAddCurrentTaskToDelayedList+0x94>)
 8014af0:	681b      	ldr	r3, [r3, #0]
 8014af2:	3304      	adds	r3, #4
 8014af4:	4619      	mov	r1, r3
 8014af6:	4610      	mov	r0, r2
 8014af8:	f7fd fcf7 	bl	80124ea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8014afc:	4b0a      	ldr	r3, [pc, #40]	; (8014b28 <prvAddCurrentTaskToDelayedList+0xa4>)
 8014afe:	681b      	ldr	r3, [r3, #0]
 8014b00:	68ba      	ldr	r2, [r7, #8]
 8014b02:	429a      	cmp	r2, r3
 8014b04:	d202      	bcs.n	8014b0c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8014b06:	4a08      	ldr	r2, [pc, #32]	; (8014b28 <prvAddCurrentTaskToDelayedList+0xa4>)
 8014b08:	68bb      	ldr	r3, [r7, #8]
 8014b0a:	6013      	str	r3, [r2, #0]
}
 8014b0c:	bf00      	nop
 8014b0e:	3710      	adds	r7, #16
 8014b10:	46bd      	mov	sp, r7
 8014b12:	bd80      	pop	{r7, pc}
 8014b14:	20003610 	.word	0x20003610
 8014b18:	20003138 	.word	0x20003138
 8014b1c:	200035f8 	.word	0x200035f8
 8014b20:	200035c8 	.word	0x200035c8
 8014b24:	200035c4 	.word	0x200035c4
 8014b28:	2000362c 	.word	0x2000362c

08014b2c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8014b2c:	b580      	push	{r7, lr}
 8014b2e:	b08a      	sub	sp, #40	; 0x28
 8014b30:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8014b32:	2300      	movs	r3, #0
 8014b34:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8014b36:	f000 fb63 	bl	8015200 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8014b3a:	4b1c      	ldr	r3, [pc, #112]	; (8014bac <xTimerCreateTimerTask+0x80>)
 8014b3c:	681b      	ldr	r3, [r3, #0]
 8014b3e:	2b00      	cmp	r3, #0
 8014b40:	d021      	beq.n	8014b86 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8014b42:	2300      	movs	r3, #0
 8014b44:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8014b46:	2300      	movs	r3, #0
 8014b48:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8014b4a:	1d3a      	adds	r2, r7, #4
 8014b4c:	f107 0108 	add.w	r1, r7, #8
 8014b50:	f107 030c 	add.w	r3, r7, #12
 8014b54:	4618      	mov	r0, r3
 8014b56:	f7fd fc5d 	bl	8012414 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8014b5a:	6879      	ldr	r1, [r7, #4]
 8014b5c:	68bb      	ldr	r3, [r7, #8]
 8014b5e:	68fa      	ldr	r2, [r7, #12]
 8014b60:	9202      	str	r2, [sp, #8]
 8014b62:	9301      	str	r3, [sp, #4]
 8014b64:	2302      	movs	r3, #2
 8014b66:	9300      	str	r3, [sp, #0]
 8014b68:	2300      	movs	r3, #0
 8014b6a:	460a      	mov	r2, r1
 8014b6c:	4910      	ldr	r1, [pc, #64]	; (8014bb0 <xTimerCreateTimerTask+0x84>)
 8014b6e:	4811      	ldr	r0, [pc, #68]	; (8014bb4 <xTimerCreateTimerTask+0x88>)
 8014b70:	f7fe fde2 	bl	8013738 <xTaskCreateStatic>
 8014b74:	4603      	mov	r3, r0
 8014b76:	4a10      	ldr	r2, [pc, #64]	; (8014bb8 <xTimerCreateTimerTask+0x8c>)
 8014b78:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8014b7a:	4b0f      	ldr	r3, [pc, #60]	; (8014bb8 <xTimerCreateTimerTask+0x8c>)
 8014b7c:	681b      	ldr	r3, [r3, #0]
 8014b7e:	2b00      	cmp	r3, #0
 8014b80:	d001      	beq.n	8014b86 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8014b82:	2301      	movs	r3, #1
 8014b84:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8014b86:	697b      	ldr	r3, [r7, #20]
 8014b88:	2b00      	cmp	r3, #0
 8014b8a:	d10a      	bne.n	8014ba2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8014b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b90:	f383 8811 	msr	BASEPRI, r3
 8014b94:	f3bf 8f6f 	isb	sy
 8014b98:	f3bf 8f4f 	dsb	sy
 8014b9c:	613b      	str	r3, [r7, #16]
}
 8014b9e:	bf00      	nop
 8014ba0:	e7fe      	b.n	8014ba0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8014ba2:	697b      	ldr	r3, [r7, #20]
}
 8014ba4:	4618      	mov	r0, r3
 8014ba6:	3718      	adds	r7, #24
 8014ba8:	46bd      	mov	sp, r7
 8014baa:	bd80      	pop	{r7, pc}
 8014bac:	20003668 	.word	0x20003668
 8014bb0:	0802ac04 	.word	0x0802ac04
 8014bb4:	08014da9 	.word	0x08014da9
 8014bb8:	2000366c 	.word	0x2000366c

08014bbc <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8014bbc:	b580      	push	{r7, lr}
 8014bbe:	b088      	sub	sp, #32
 8014bc0:	af02      	add	r7, sp, #8
 8014bc2:	60f8      	str	r0, [r7, #12]
 8014bc4:	60b9      	str	r1, [r7, #8]
 8014bc6:	607a      	str	r2, [r7, #4]
 8014bc8:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8014bca:	202c      	movs	r0, #44	; 0x2c
 8014bcc:	f000 fda4 	bl	8015718 <pvPortMalloc>
 8014bd0:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8014bd2:	697b      	ldr	r3, [r7, #20]
 8014bd4:	2b00      	cmp	r3, #0
 8014bd6:	d00d      	beq.n	8014bf4 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8014bd8:	697b      	ldr	r3, [r7, #20]
 8014bda:	2200      	movs	r2, #0
 8014bdc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8014be0:	697b      	ldr	r3, [r7, #20]
 8014be2:	9301      	str	r3, [sp, #4]
 8014be4:	6a3b      	ldr	r3, [r7, #32]
 8014be6:	9300      	str	r3, [sp, #0]
 8014be8:	683b      	ldr	r3, [r7, #0]
 8014bea:	687a      	ldr	r2, [r7, #4]
 8014bec:	68b9      	ldr	r1, [r7, #8]
 8014bee:	68f8      	ldr	r0, [r7, #12]
 8014bf0:	f000 f805 	bl	8014bfe <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8014bf4:	697b      	ldr	r3, [r7, #20]
	}
 8014bf6:	4618      	mov	r0, r3
 8014bf8:	3718      	adds	r7, #24
 8014bfa:	46bd      	mov	sp, r7
 8014bfc:	bd80      	pop	{r7, pc}

08014bfe <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8014bfe:	b580      	push	{r7, lr}
 8014c00:	b086      	sub	sp, #24
 8014c02:	af00      	add	r7, sp, #0
 8014c04:	60f8      	str	r0, [r7, #12]
 8014c06:	60b9      	str	r1, [r7, #8]
 8014c08:	607a      	str	r2, [r7, #4]
 8014c0a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8014c0c:	68bb      	ldr	r3, [r7, #8]
 8014c0e:	2b00      	cmp	r3, #0
 8014c10:	d10a      	bne.n	8014c28 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8014c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c16:	f383 8811 	msr	BASEPRI, r3
 8014c1a:	f3bf 8f6f 	isb	sy
 8014c1e:	f3bf 8f4f 	dsb	sy
 8014c22:	617b      	str	r3, [r7, #20]
}
 8014c24:	bf00      	nop
 8014c26:	e7fe      	b.n	8014c26 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8014c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c2a:	2b00      	cmp	r3, #0
 8014c2c:	d01e      	beq.n	8014c6c <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8014c2e:	f000 fae7 	bl	8015200 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8014c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c34:	68fa      	ldr	r2, [r7, #12]
 8014c36:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8014c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c3a:	68ba      	ldr	r2, [r7, #8]
 8014c3c:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8014c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c40:	683a      	ldr	r2, [r7, #0]
 8014c42:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8014c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c46:	6a3a      	ldr	r2, [r7, #32]
 8014c48:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8014c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c4c:	3304      	adds	r3, #4
 8014c4e:	4618      	mov	r0, r3
 8014c50:	f7fd fc1a 	bl	8012488 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8014c54:	687b      	ldr	r3, [r7, #4]
 8014c56:	2b00      	cmp	r3, #0
 8014c58:	d008      	beq.n	8014c6c <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8014c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014c60:	f043 0304 	orr.w	r3, r3, #4
 8014c64:	b2da      	uxtb	r2, r3
 8014c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c68:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8014c6c:	bf00      	nop
 8014c6e:	3718      	adds	r7, #24
 8014c70:	46bd      	mov	sp, r7
 8014c72:	bd80      	pop	{r7, pc}

08014c74 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8014c74:	b580      	push	{r7, lr}
 8014c76:	b08a      	sub	sp, #40	; 0x28
 8014c78:	af00      	add	r7, sp, #0
 8014c7a:	60f8      	str	r0, [r7, #12]
 8014c7c:	60b9      	str	r1, [r7, #8]
 8014c7e:	607a      	str	r2, [r7, #4]
 8014c80:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8014c82:	2300      	movs	r3, #0
 8014c84:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8014c86:	68fb      	ldr	r3, [r7, #12]
 8014c88:	2b00      	cmp	r3, #0
 8014c8a:	d10a      	bne.n	8014ca2 <xTimerGenericCommand+0x2e>
	__asm volatile
 8014c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c90:	f383 8811 	msr	BASEPRI, r3
 8014c94:	f3bf 8f6f 	isb	sy
 8014c98:	f3bf 8f4f 	dsb	sy
 8014c9c:	623b      	str	r3, [r7, #32]
}
 8014c9e:	bf00      	nop
 8014ca0:	e7fe      	b.n	8014ca0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8014ca2:	4b1a      	ldr	r3, [pc, #104]	; (8014d0c <xTimerGenericCommand+0x98>)
 8014ca4:	681b      	ldr	r3, [r3, #0]
 8014ca6:	2b00      	cmp	r3, #0
 8014ca8:	d02a      	beq.n	8014d00 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8014caa:	68bb      	ldr	r3, [r7, #8]
 8014cac:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8014cae:	687b      	ldr	r3, [r7, #4]
 8014cb0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8014cb2:	68fb      	ldr	r3, [r7, #12]
 8014cb4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8014cb6:	68bb      	ldr	r3, [r7, #8]
 8014cb8:	2b05      	cmp	r3, #5
 8014cba:	dc18      	bgt.n	8014cee <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8014cbc:	f7ff fb7c 	bl	80143b8 <xTaskGetSchedulerState>
 8014cc0:	4603      	mov	r3, r0
 8014cc2:	2b02      	cmp	r3, #2
 8014cc4:	d109      	bne.n	8014cda <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8014cc6:	4b11      	ldr	r3, [pc, #68]	; (8014d0c <xTimerGenericCommand+0x98>)
 8014cc8:	6818      	ldr	r0, [r3, #0]
 8014cca:	f107 0110 	add.w	r1, r7, #16
 8014cce:	2300      	movs	r3, #0
 8014cd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014cd2:	f7fd fecb 	bl	8012a6c <xQueueGenericSend>
 8014cd6:	6278      	str	r0, [r7, #36]	; 0x24
 8014cd8:	e012      	b.n	8014d00 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8014cda:	4b0c      	ldr	r3, [pc, #48]	; (8014d0c <xTimerGenericCommand+0x98>)
 8014cdc:	6818      	ldr	r0, [r3, #0]
 8014cde:	f107 0110 	add.w	r1, r7, #16
 8014ce2:	2300      	movs	r3, #0
 8014ce4:	2200      	movs	r2, #0
 8014ce6:	f7fd fec1 	bl	8012a6c <xQueueGenericSend>
 8014cea:	6278      	str	r0, [r7, #36]	; 0x24
 8014cec:	e008      	b.n	8014d00 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8014cee:	4b07      	ldr	r3, [pc, #28]	; (8014d0c <xTimerGenericCommand+0x98>)
 8014cf0:	6818      	ldr	r0, [r3, #0]
 8014cf2:	f107 0110 	add.w	r1, r7, #16
 8014cf6:	2300      	movs	r3, #0
 8014cf8:	683a      	ldr	r2, [r7, #0]
 8014cfa:	f7fd ffb5 	bl	8012c68 <xQueueGenericSendFromISR>
 8014cfe:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8014d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8014d02:	4618      	mov	r0, r3
 8014d04:	3728      	adds	r7, #40	; 0x28
 8014d06:	46bd      	mov	sp, r7
 8014d08:	bd80      	pop	{r7, pc}
 8014d0a:	bf00      	nop
 8014d0c:	20003668 	.word	0x20003668

08014d10 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8014d10:	b580      	push	{r7, lr}
 8014d12:	b088      	sub	sp, #32
 8014d14:	af02      	add	r7, sp, #8
 8014d16:	6078      	str	r0, [r7, #4]
 8014d18:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014d1a:	4b22      	ldr	r3, [pc, #136]	; (8014da4 <prvProcessExpiredTimer+0x94>)
 8014d1c:	681b      	ldr	r3, [r3, #0]
 8014d1e:	68db      	ldr	r3, [r3, #12]
 8014d20:	68db      	ldr	r3, [r3, #12]
 8014d22:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014d24:	697b      	ldr	r3, [r7, #20]
 8014d26:	3304      	adds	r3, #4
 8014d28:	4618      	mov	r0, r3
 8014d2a:	f7fd fc17 	bl	801255c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8014d2e:	697b      	ldr	r3, [r7, #20]
 8014d30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014d34:	f003 0304 	and.w	r3, r3, #4
 8014d38:	2b00      	cmp	r3, #0
 8014d3a:	d022      	beq.n	8014d82 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8014d3c:	697b      	ldr	r3, [r7, #20]
 8014d3e:	699a      	ldr	r2, [r3, #24]
 8014d40:	687b      	ldr	r3, [r7, #4]
 8014d42:	18d1      	adds	r1, r2, r3
 8014d44:	687b      	ldr	r3, [r7, #4]
 8014d46:	683a      	ldr	r2, [r7, #0]
 8014d48:	6978      	ldr	r0, [r7, #20]
 8014d4a:	f000 f8d1 	bl	8014ef0 <prvInsertTimerInActiveList>
 8014d4e:	4603      	mov	r3, r0
 8014d50:	2b00      	cmp	r3, #0
 8014d52:	d01f      	beq.n	8014d94 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8014d54:	2300      	movs	r3, #0
 8014d56:	9300      	str	r3, [sp, #0]
 8014d58:	2300      	movs	r3, #0
 8014d5a:	687a      	ldr	r2, [r7, #4]
 8014d5c:	2100      	movs	r1, #0
 8014d5e:	6978      	ldr	r0, [r7, #20]
 8014d60:	f7ff ff88 	bl	8014c74 <xTimerGenericCommand>
 8014d64:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8014d66:	693b      	ldr	r3, [r7, #16]
 8014d68:	2b00      	cmp	r3, #0
 8014d6a:	d113      	bne.n	8014d94 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8014d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d70:	f383 8811 	msr	BASEPRI, r3
 8014d74:	f3bf 8f6f 	isb	sy
 8014d78:	f3bf 8f4f 	dsb	sy
 8014d7c:	60fb      	str	r3, [r7, #12]
}
 8014d7e:	bf00      	nop
 8014d80:	e7fe      	b.n	8014d80 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8014d82:	697b      	ldr	r3, [r7, #20]
 8014d84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014d88:	f023 0301 	bic.w	r3, r3, #1
 8014d8c:	b2da      	uxtb	r2, r3
 8014d8e:	697b      	ldr	r3, [r7, #20]
 8014d90:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8014d94:	697b      	ldr	r3, [r7, #20]
 8014d96:	6a1b      	ldr	r3, [r3, #32]
 8014d98:	6978      	ldr	r0, [r7, #20]
 8014d9a:	4798      	blx	r3
}
 8014d9c:	bf00      	nop
 8014d9e:	3718      	adds	r7, #24
 8014da0:	46bd      	mov	sp, r7
 8014da2:	bd80      	pop	{r7, pc}
 8014da4:	20003660 	.word	0x20003660

08014da8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8014da8:	b580      	push	{r7, lr}
 8014daa:	b084      	sub	sp, #16
 8014dac:	af00      	add	r7, sp, #0
 8014dae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8014db0:	f107 0308 	add.w	r3, r7, #8
 8014db4:	4618      	mov	r0, r3
 8014db6:	f000 f857 	bl	8014e68 <prvGetNextExpireTime>
 8014dba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8014dbc:	68bb      	ldr	r3, [r7, #8]
 8014dbe:	4619      	mov	r1, r3
 8014dc0:	68f8      	ldr	r0, [r7, #12]
 8014dc2:	f000 f803 	bl	8014dcc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8014dc6:	f000 f8d5 	bl	8014f74 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8014dca:	e7f1      	b.n	8014db0 <prvTimerTask+0x8>

08014dcc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8014dcc:	b580      	push	{r7, lr}
 8014dce:	b084      	sub	sp, #16
 8014dd0:	af00      	add	r7, sp, #0
 8014dd2:	6078      	str	r0, [r7, #4]
 8014dd4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8014dd6:	f7fe feeb 	bl	8013bb0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8014dda:	f107 0308 	add.w	r3, r7, #8
 8014dde:	4618      	mov	r0, r3
 8014de0:	f000 f866 	bl	8014eb0 <prvSampleTimeNow>
 8014de4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8014de6:	68bb      	ldr	r3, [r7, #8]
 8014de8:	2b00      	cmp	r3, #0
 8014dea:	d130      	bne.n	8014e4e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8014dec:	683b      	ldr	r3, [r7, #0]
 8014dee:	2b00      	cmp	r3, #0
 8014df0:	d10a      	bne.n	8014e08 <prvProcessTimerOrBlockTask+0x3c>
 8014df2:	687a      	ldr	r2, [r7, #4]
 8014df4:	68fb      	ldr	r3, [r7, #12]
 8014df6:	429a      	cmp	r2, r3
 8014df8:	d806      	bhi.n	8014e08 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8014dfa:	f7fe fee7 	bl	8013bcc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8014dfe:	68f9      	ldr	r1, [r7, #12]
 8014e00:	6878      	ldr	r0, [r7, #4]
 8014e02:	f7ff ff85 	bl	8014d10 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8014e06:	e024      	b.n	8014e52 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8014e08:	683b      	ldr	r3, [r7, #0]
 8014e0a:	2b00      	cmp	r3, #0
 8014e0c:	d008      	beq.n	8014e20 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8014e0e:	4b13      	ldr	r3, [pc, #76]	; (8014e5c <prvProcessTimerOrBlockTask+0x90>)
 8014e10:	681b      	ldr	r3, [r3, #0]
 8014e12:	681b      	ldr	r3, [r3, #0]
 8014e14:	2b00      	cmp	r3, #0
 8014e16:	d101      	bne.n	8014e1c <prvProcessTimerOrBlockTask+0x50>
 8014e18:	2301      	movs	r3, #1
 8014e1a:	e000      	b.n	8014e1e <prvProcessTimerOrBlockTask+0x52>
 8014e1c:	2300      	movs	r3, #0
 8014e1e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8014e20:	4b0f      	ldr	r3, [pc, #60]	; (8014e60 <prvProcessTimerOrBlockTask+0x94>)
 8014e22:	6818      	ldr	r0, [r3, #0]
 8014e24:	687a      	ldr	r2, [r7, #4]
 8014e26:	68fb      	ldr	r3, [r7, #12]
 8014e28:	1ad3      	subs	r3, r2, r3
 8014e2a:	683a      	ldr	r2, [r7, #0]
 8014e2c:	4619      	mov	r1, r3
 8014e2e:	f7fe fc4f 	bl	80136d0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8014e32:	f7fe fecb 	bl	8013bcc <xTaskResumeAll>
 8014e36:	4603      	mov	r3, r0
 8014e38:	2b00      	cmp	r3, #0
 8014e3a:	d10a      	bne.n	8014e52 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8014e3c:	4b09      	ldr	r3, [pc, #36]	; (8014e64 <prvProcessTimerOrBlockTask+0x98>)
 8014e3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014e42:	601a      	str	r2, [r3, #0]
 8014e44:	f3bf 8f4f 	dsb	sy
 8014e48:	f3bf 8f6f 	isb	sy
}
 8014e4c:	e001      	b.n	8014e52 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8014e4e:	f7fe febd 	bl	8013bcc <xTaskResumeAll>
}
 8014e52:	bf00      	nop
 8014e54:	3710      	adds	r7, #16
 8014e56:	46bd      	mov	sp, r7
 8014e58:	bd80      	pop	{r7, pc}
 8014e5a:	bf00      	nop
 8014e5c:	20003664 	.word	0x20003664
 8014e60:	20003668 	.word	0x20003668
 8014e64:	e000ed04 	.word	0xe000ed04

08014e68 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8014e68:	b480      	push	{r7}
 8014e6a:	b085      	sub	sp, #20
 8014e6c:	af00      	add	r7, sp, #0
 8014e6e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8014e70:	4b0e      	ldr	r3, [pc, #56]	; (8014eac <prvGetNextExpireTime+0x44>)
 8014e72:	681b      	ldr	r3, [r3, #0]
 8014e74:	681b      	ldr	r3, [r3, #0]
 8014e76:	2b00      	cmp	r3, #0
 8014e78:	d101      	bne.n	8014e7e <prvGetNextExpireTime+0x16>
 8014e7a:	2201      	movs	r2, #1
 8014e7c:	e000      	b.n	8014e80 <prvGetNextExpireTime+0x18>
 8014e7e:	2200      	movs	r2, #0
 8014e80:	687b      	ldr	r3, [r7, #4]
 8014e82:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8014e84:	687b      	ldr	r3, [r7, #4]
 8014e86:	681b      	ldr	r3, [r3, #0]
 8014e88:	2b00      	cmp	r3, #0
 8014e8a:	d105      	bne.n	8014e98 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8014e8c:	4b07      	ldr	r3, [pc, #28]	; (8014eac <prvGetNextExpireTime+0x44>)
 8014e8e:	681b      	ldr	r3, [r3, #0]
 8014e90:	68db      	ldr	r3, [r3, #12]
 8014e92:	681b      	ldr	r3, [r3, #0]
 8014e94:	60fb      	str	r3, [r7, #12]
 8014e96:	e001      	b.n	8014e9c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8014e98:	2300      	movs	r3, #0
 8014e9a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8014e9c:	68fb      	ldr	r3, [r7, #12]
}
 8014e9e:	4618      	mov	r0, r3
 8014ea0:	3714      	adds	r7, #20
 8014ea2:	46bd      	mov	sp, r7
 8014ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ea8:	4770      	bx	lr
 8014eaa:	bf00      	nop
 8014eac:	20003660 	.word	0x20003660

08014eb0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8014eb0:	b580      	push	{r7, lr}
 8014eb2:	b084      	sub	sp, #16
 8014eb4:	af00      	add	r7, sp, #0
 8014eb6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8014eb8:	f7fe ff26 	bl	8013d08 <xTaskGetTickCount>
 8014ebc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8014ebe:	4b0b      	ldr	r3, [pc, #44]	; (8014eec <prvSampleTimeNow+0x3c>)
 8014ec0:	681b      	ldr	r3, [r3, #0]
 8014ec2:	68fa      	ldr	r2, [r7, #12]
 8014ec4:	429a      	cmp	r2, r3
 8014ec6:	d205      	bcs.n	8014ed4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8014ec8:	f000 f936 	bl	8015138 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8014ecc:	687b      	ldr	r3, [r7, #4]
 8014ece:	2201      	movs	r2, #1
 8014ed0:	601a      	str	r2, [r3, #0]
 8014ed2:	e002      	b.n	8014eda <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8014ed4:	687b      	ldr	r3, [r7, #4]
 8014ed6:	2200      	movs	r2, #0
 8014ed8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8014eda:	4a04      	ldr	r2, [pc, #16]	; (8014eec <prvSampleTimeNow+0x3c>)
 8014edc:	68fb      	ldr	r3, [r7, #12]
 8014ede:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8014ee0:	68fb      	ldr	r3, [r7, #12]
}
 8014ee2:	4618      	mov	r0, r3
 8014ee4:	3710      	adds	r7, #16
 8014ee6:	46bd      	mov	sp, r7
 8014ee8:	bd80      	pop	{r7, pc}
 8014eea:	bf00      	nop
 8014eec:	20003670 	.word	0x20003670

08014ef0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8014ef0:	b580      	push	{r7, lr}
 8014ef2:	b086      	sub	sp, #24
 8014ef4:	af00      	add	r7, sp, #0
 8014ef6:	60f8      	str	r0, [r7, #12]
 8014ef8:	60b9      	str	r1, [r7, #8]
 8014efa:	607a      	str	r2, [r7, #4]
 8014efc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8014efe:	2300      	movs	r3, #0
 8014f00:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8014f02:	68fb      	ldr	r3, [r7, #12]
 8014f04:	68ba      	ldr	r2, [r7, #8]
 8014f06:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8014f08:	68fb      	ldr	r3, [r7, #12]
 8014f0a:	68fa      	ldr	r2, [r7, #12]
 8014f0c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8014f0e:	68ba      	ldr	r2, [r7, #8]
 8014f10:	687b      	ldr	r3, [r7, #4]
 8014f12:	429a      	cmp	r2, r3
 8014f14:	d812      	bhi.n	8014f3c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014f16:	687a      	ldr	r2, [r7, #4]
 8014f18:	683b      	ldr	r3, [r7, #0]
 8014f1a:	1ad2      	subs	r2, r2, r3
 8014f1c:	68fb      	ldr	r3, [r7, #12]
 8014f1e:	699b      	ldr	r3, [r3, #24]
 8014f20:	429a      	cmp	r2, r3
 8014f22:	d302      	bcc.n	8014f2a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8014f24:	2301      	movs	r3, #1
 8014f26:	617b      	str	r3, [r7, #20]
 8014f28:	e01b      	b.n	8014f62 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8014f2a:	4b10      	ldr	r3, [pc, #64]	; (8014f6c <prvInsertTimerInActiveList+0x7c>)
 8014f2c:	681a      	ldr	r2, [r3, #0]
 8014f2e:	68fb      	ldr	r3, [r7, #12]
 8014f30:	3304      	adds	r3, #4
 8014f32:	4619      	mov	r1, r3
 8014f34:	4610      	mov	r0, r2
 8014f36:	f7fd fad8 	bl	80124ea <vListInsert>
 8014f3a:	e012      	b.n	8014f62 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8014f3c:	687a      	ldr	r2, [r7, #4]
 8014f3e:	683b      	ldr	r3, [r7, #0]
 8014f40:	429a      	cmp	r2, r3
 8014f42:	d206      	bcs.n	8014f52 <prvInsertTimerInActiveList+0x62>
 8014f44:	68ba      	ldr	r2, [r7, #8]
 8014f46:	683b      	ldr	r3, [r7, #0]
 8014f48:	429a      	cmp	r2, r3
 8014f4a:	d302      	bcc.n	8014f52 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8014f4c:	2301      	movs	r3, #1
 8014f4e:	617b      	str	r3, [r7, #20]
 8014f50:	e007      	b.n	8014f62 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8014f52:	4b07      	ldr	r3, [pc, #28]	; (8014f70 <prvInsertTimerInActiveList+0x80>)
 8014f54:	681a      	ldr	r2, [r3, #0]
 8014f56:	68fb      	ldr	r3, [r7, #12]
 8014f58:	3304      	adds	r3, #4
 8014f5a:	4619      	mov	r1, r3
 8014f5c:	4610      	mov	r0, r2
 8014f5e:	f7fd fac4 	bl	80124ea <vListInsert>
		}
	}

	return xProcessTimerNow;
 8014f62:	697b      	ldr	r3, [r7, #20]
}
 8014f64:	4618      	mov	r0, r3
 8014f66:	3718      	adds	r7, #24
 8014f68:	46bd      	mov	sp, r7
 8014f6a:	bd80      	pop	{r7, pc}
 8014f6c:	20003664 	.word	0x20003664
 8014f70:	20003660 	.word	0x20003660

08014f74 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8014f74:	b580      	push	{r7, lr}
 8014f76:	b08e      	sub	sp, #56	; 0x38
 8014f78:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8014f7a:	e0ca      	b.n	8015112 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8014f7c:	687b      	ldr	r3, [r7, #4]
 8014f7e:	2b00      	cmp	r3, #0
 8014f80:	da18      	bge.n	8014fb4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8014f82:	1d3b      	adds	r3, r7, #4
 8014f84:	3304      	adds	r3, #4
 8014f86:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8014f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f8a:	2b00      	cmp	r3, #0
 8014f8c:	d10a      	bne.n	8014fa4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8014f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f92:	f383 8811 	msr	BASEPRI, r3
 8014f96:	f3bf 8f6f 	isb	sy
 8014f9a:	f3bf 8f4f 	dsb	sy
 8014f9e:	61fb      	str	r3, [r7, #28]
}
 8014fa0:	bf00      	nop
 8014fa2:	e7fe      	b.n	8014fa2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8014fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014fa6:	681b      	ldr	r3, [r3, #0]
 8014fa8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014faa:	6850      	ldr	r0, [r2, #4]
 8014fac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014fae:	6892      	ldr	r2, [r2, #8]
 8014fb0:	4611      	mov	r1, r2
 8014fb2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8014fb4:	687b      	ldr	r3, [r7, #4]
 8014fb6:	2b00      	cmp	r3, #0
 8014fb8:	f2c0 80aa 	blt.w	8015110 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8014fbc:	68fb      	ldr	r3, [r7, #12]
 8014fbe:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8014fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014fc2:	695b      	ldr	r3, [r3, #20]
 8014fc4:	2b00      	cmp	r3, #0
 8014fc6:	d004      	beq.n	8014fd2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014fca:	3304      	adds	r3, #4
 8014fcc:	4618      	mov	r0, r3
 8014fce:	f7fd fac5 	bl	801255c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8014fd2:	463b      	mov	r3, r7
 8014fd4:	4618      	mov	r0, r3
 8014fd6:	f7ff ff6b 	bl	8014eb0 <prvSampleTimeNow>
 8014fda:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8014fdc:	687b      	ldr	r3, [r7, #4]
 8014fde:	2b09      	cmp	r3, #9
 8014fe0:	f200 8097 	bhi.w	8015112 <prvProcessReceivedCommands+0x19e>
 8014fe4:	a201      	add	r2, pc, #4	; (adr r2, 8014fec <prvProcessReceivedCommands+0x78>)
 8014fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014fea:	bf00      	nop
 8014fec:	08015015 	.word	0x08015015
 8014ff0:	08015015 	.word	0x08015015
 8014ff4:	08015015 	.word	0x08015015
 8014ff8:	08015089 	.word	0x08015089
 8014ffc:	0801509d 	.word	0x0801509d
 8015000:	080150e7 	.word	0x080150e7
 8015004:	08015015 	.word	0x08015015
 8015008:	08015015 	.word	0x08015015
 801500c:	08015089 	.word	0x08015089
 8015010:	0801509d 	.word	0x0801509d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8015014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015016:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801501a:	f043 0301 	orr.w	r3, r3, #1
 801501e:	b2da      	uxtb	r2, r3
 8015020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015022:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8015026:	68ba      	ldr	r2, [r7, #8]
 8015028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801502a:	699b      	ldr	r3, [r3, #24]
 801502c:	18d1      	adds	r1, r2, r3
 801502e:	68bb      	ldr	r3, [r7, #8]
 8015030:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015032:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015034:	f7ff ff5c 	bl	8014ef0 <prvInsertTimerInActiveList>
 8015038:	4603      	mov	r3, r0
 801503a:	2b00      	cmp	r3, #0
 801503c:	d069      	beq.n	8015112 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801503e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015040:	6a1b      	ldr	r3, [r3, #32]
 8015042:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015044:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015048:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801504c:	f003 0304 	and.w	r3, r3, #4
 8015050:	2b00      	cmp	r3, #0
 8015052:	d05e      	beq.n	8015112 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8015054:	68ba      	ldr	r2, [r7, #8]
 8015056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015058:	699b      	ldr	r3, [r3, #24]
 801505a:	441a      	add	r2, r3
 801505c:	2300      	movs	r3, #0
 801505e:	9300      	str	r3, [sp, #0]
 8015060:	2300      	movs	r3, #0
 8015062:	2100      	movs	r1, #0
 8015064:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015066:	f7ff fe05 	bl	8014c74 <xTimerGenericCommand>
 801506a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 801506c:	6a3b      	ldr	r3, [r7, #32]
 801506e:	2b00      	cmp	r3, #0
 8015070:	d14f      	bne.n	8015112 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8015072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015076:	f383 8811 	msr	BASEPRI, r3
 801507a:	f3bf 8f6f 	isb	sy
 801507e:	f3bf 8f4f 	dsb	sy
 8015082:	61bb      	str	r3, [r7, #24]
}
 8015084:	bf00      	nop
 8015086:	e7fe      	b.n	8015086 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801508a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801508e:	f023 0301 	bic.w	r3, r3, #1
 8015092:	b2da      	uxtb	r2, r3
 8015094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015096:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801509a:	e03a      	b.n	8015112 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801509c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801509e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80150a2:	f043 0301 	orr.w	r3, r3, #1
 80150a6:	b2da      	uxtb	r2, r3
 80150a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80150ae:	68ba      	ldr	r2, [r7, #8]
 80150b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150b2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80150b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150b6:	699b      	ldr	r3, [r3, #24]
 80150b8:	2b00      	cmp	r3, #0
 80150ba:	d10a      	bne.n	80150d2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80150bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80150c0:	f383 8811 	msr	BASEPRI, r3
 80150c4:	f3bf 8f6f 	isb	sy
 80150c8:	f3bf 8f4f 	dsb	sy
 80150cc:	617b      	str	r3, [r7, #20]
}
 80150ce:	bf00      	nop
 80150d0:	e7fe      	b.n	80150d0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80150d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150d4:	699a      	ldr	r2, [r3, #24]
 80150d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150d8:	18d1      	adds	r1, r2, r3
 80150da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80150de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80150e0:	f7ff ff06 	bl	8014ef0 <prvInsertTimerInActiveList>
					break;
 80150e4:	e015      	b.n	8015112 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80150e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80150ec:	f003 0302 	and.w	r3, r3, #2
 80150f0:	2b00      	cmp	r3, #0
 80150f2:	d103      	bne.n	80150fc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80150f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80150f6:	f000 fbdb 	bl	80158b0 <vPortFree>
 80150fa:	e00a      	b.n	8015112 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80150fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015102:	f023 0301 	bic.w	r3, r3, #1
 8015106:	b2da      	uxtb	r2, r3
 8015108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801510a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801510e:	e000      	b.n	8015112 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8015110:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8015112:	4b08      	ldr	r3, [pc, #32]	; (8015134 <prvProcessReceivedCommands+0x1c0>)
 8015114:	681b      	ldr	r3, [r3, #0]
 8015116:	1d39      	adds	r1, r7, #4
 8015118:	2200      	movs	r2, #0
 801511a:	4618      	mov	r0, r3
 801511c:	f7fd fecc 	bl	8012eb8 <xQueueReceive>
 8015120:	4603      	mov	r3, r0
 8015122:	2b00      	cmp	r3, #0
 8015124:	f47f af2a 	bne.w	8014f7c <prvProcessReceivedCommands+0x8>
	}
}
 8015128:	bf00      	nop
 801512a:	bf00      	nop
 801512c:	3730      	adds	r7, #48	; 0x30
 801512e:	46bd      	mov	sp, r7
 8015130:	bd80      	pop	{r7, pc}
 8015132:	bf00      	nop
 8015134:	20003668 	.word	0x20003668

08015138 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8015138:	b580      	push	{r7, lr}
 801513a:	b088      	sub	sp, #32
 801513c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801513e:	e048      	b.n	80151d2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8015140:	4b2d      	ldr	r3, [pc, #180]	; (80151f8 <prvSwitchTimerLists+0xc0>)
 8015142:	681b      	ldr	r3, [r3, #0]
 8015144:	68db      	ldr	r3, [r3, #12]
 8015146:	681b      	ldr	r3, [r3, #0]
 8015148:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801514a:	4b2b      	ldr	r3, [pc, #172]	; (80151f8 <prvSwitchTimerLists+0xc0>)
 801514c:	681b      	ldr	r3, [r3, #0]
 801514e:	68db      	ldr	r3, [r3, #12]
 8015150:	68db      	ldr	r3, [r3, #12]
 8015152:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015154:	68fb      	ldr	r3, [r7, #12]
 8015156:	3304      	adds	r3, #4
 8015158:	4618      	mov	r0, r3
 801515a:	f7fd f9ff 	bl	801255c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801515e:	68fb      	ldr	r3, [r7, #12]
 8015160:	6a1b      	ldr	r3, [r3, #32]
 8015162:	68f8      	ldr	r0, [r7, #12]
 8015164:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015166:	68fb      	ldr	r3, [r7, #12]
 8015168:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801516c:	f003 0304 	and.w	r3, r3, #4
 8015170:	2b00      	cmp	r3, #0
 8015172:	d02e      	beq.n	80151d2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8015174:	68fb      	ldr	r3, [r7, #12]
 8015176:	699b      	ldr	r3, [r3, #24]
 8015178:	693a      	ldr	r2, [r7, #16]
 801517a:	4413      	add	r3, r2
 801517c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801517e:	68ba      	ldr	r2, [r7, #8]
 8015180:	693b      	ldr	r3, [r7, #16]
 8015182:	429a      	cmp	r2, r3
 8015184:	d90e      	bls.n	80151a4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8015186:	68fb      	ldr	r3, [r7, #12]
 8015188:	68ba      	ldr	r2, [r7, #8]
 801518a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801518c:	68fb      	ldr	r3, [r7, #12]
 801518e:	68fa      	ldr	r2, [r7, #12]
 8015190:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8015192:	4b19      	ldr	r3, [pc, #100]	; (80151f8 <prvSwitchTimerLists+0xc0>)
 8015194:	681a      	ldr	r2, [r3, #0]
 8015196:	68fb      	ldr	r3, [r7, #12]
 8015198:	3304      	adds	r3, #4
 801519a:	4619      	mov	r1, r3
 801519c:	4610      	mov	r0, r2
 801519e:	f7fd f9a4 	bl	80124ea <vListInsert>
 80151a2:	e016      	b.n	80151d2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80151a4:	2300      	movs	r3, #0
 80151a6:	9300      	str	r3, [sp, #0]
 80151a8:	2300      	movs	r3, #0
 80151aa:	693a      	ldr	r2, [r7, #16]
 80151ac:	2100      	movs	r1, #0
 80151ae:	68f8      	ldr	r0, [r7, #12]
 80151b0:	f7ff fd60 	bl	8014c74 <xTimerGenericCommand>
 80151b4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80151b6:	687b      	ldr	r3, [r7, #4]
 80151b8:	2b00      	cmp	r3, #0
 80151ba:	d10a      	bne.n	80151d2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80151bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151c0:	f383 8811 	msr	BASEPRI, r3
 80151c4:	f3bf 8f6f 	isb	sy
 80151c8:	f3bf 8f4f 	dsb	sy
 80151cc:	603b      	str	r3, [r7, #0]
}
 80151ce:	bf00      	nop
 80151d0:	e7fe      	b.n	80151d0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80151d2:	4b09      	ldr	r3, [pc, #36]	; (80151f8 <prvSwitchTimerLists+0xc0>)
 80151d4:	681b      	ldr	r3, [r3, #0]
 80151d6:	681b      	ldr	r3, [r3, #0]
 80151d8:	2b00      	cmp	r3, #0
 80151da:	d1b1      	bne.n	8015140 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80151dc:	4b06      	ldr	r3, [pc, #24]	; (80151f8 <prvSwitchTimerLists+0xc0>)
 80151de:	681b      	ldr	r3, [r3, #0]
 80151e0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80151e2:	4b06      	ldr	r3, [pc, #24]	; (80151fc <prvSwitchTimerLists+0xc4>)
 80151e4:	681b      	ldr	r3, [r3, #0]
 80151e6:	4a04      	ldr	r2, [pc, #16]	; (80151f8 <prvSwitchTimerLists+0xc0>)
 80151e8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80151ea:	4a04      	ldr	r2, [pc, #16]	; (80151fc <prvSwitchTimerLists+0xc4>)
 80151ec:	697b      	ldr	r3, [r7, #20]
 80151ee:	6013      	str	r3, [r2, #0]
}
 80151f0:	bf00      	nop
 80151f2:	3718      	adds	r7, #24
 80151f4:	46bd      	mov	sp, r7
 80151f6:	bd80      	pop	{r7, pc}
 80151f8:	20003660 	.word	0x20003660
 80151fc:	20003664 	.word	0x20003664

08015200 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8015200:	b580      	push	{r7, lr}
 8015202:	b082      	sub	sp, #8
 8015204:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8015206:	f000 f965 	bl	80154d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801520a:	4b15      	ldr	r3, [pc, #84]	; (8015260 <prvCheckForValidListAndQueue+0x60>)
 801520c:	681b      	ldr	r3, [r3, #0]
 801520e:	2b00      	cmp	r3, #0
 8015210:	d120      	bne.n	8015254 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8015212:	4814      	ldr	r0, [pc, #80]	; (8015264 <prvCheckForValidListAndQueue+0x64>)
 8015214:	f7fd f918 	bl	8012448 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8015218:	4813      	ldr	r0, [pc, #76]	; (8015268 <prvCheckForValidListAndQueue+0x68>)
 801521a:	f7fd f915 	bl	8012448 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801521e:	4b13      	ldr	r3, [pc, #76]	; (801526c <prvCheckForValidListAndQueue+0x6c>)
 8015220:	4a10      	ldr	r2, [pc, #64]	; (8015264 <prvCheckForValidListAndQueue+0x64>)
 8015222:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8015224:	4b12      	ldr	r3, [pc, #72]	; (8015270 <prvCheckForValidListAndQueue+0x70>)
 8015226:	4a10      	ldr	r2, [pc, #64]	; (8015268 <prvCheckForValidListAndQueue+0x68>)
 8015228:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801522a:	2300      	movs	r3, #0
 801522c:	9300      	str	r3, [sp, #0]
 801522e:	4b11      	ldr	r3, [pc, #68]	; (8015274 <prvCheckForValidListAndQueue+0x74>)
 8015230:	4a11      	ldr	r2, [pc, #68]	; (8015278 <prvCheckForValidListAndQueue+0x78>)
 8015232:	2110      	movs	r1, #16
 8015234:	200a      	movs	r0, #10
 8015236:	f7fd fa23 	bl	8012680 <xQueueGenericCreateStatic>
 801523a:	4603      	mov	r3, r0
 801523c:	4a08      	ldr	r2, [pc, #32]	; (8015260 <prvCheckForValidListAndQueue+0x60>)
 801523e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8015240:	4b07      	ldr	r3, [pc, #28]	; (8015260 <prvCheckForValidListAndQueue+0x60>)
 8015242:	681b      	ldr	r3, [r3, #0]
 8015244:	2b00      	cmp	r3, #0
 8015246:	d005      	beq.n	8015254 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8015248:	4b05      	ldr	r3, [pc, #20]	; (8015260 <prvCheckForValidListAndQueue+0x60>)
 801524a:	681b      	ldr	r3, [r3, #0]
 801524c:	490b      	ldr	r1, [pc, #44]	; (801527c <prvCheckForValidListAndQueue+0x7c>)
 801524e:	4618      	mov	r0, r3
 8015250:	f7fe f9ea 	bl	8013628 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8015254:	f000 f96e 	bl	8015534 <vPortExitCritical>
}
 8015258:	bf00      	nop
 801525a:	46bd      	mov	sp, r7
 801525c:	bd80      	pop	{r7, pc}
 801525e:	bf00      	nop
 8015260:	20003668 	.word	0x20003668
 8015264:	20003638 	.word	0x20003638
 8015268:	2000364c 	.word	0x2000364c
 801526c:	20003660 	.word	0x20003660
 8015270:	20003664 	.word	0x20003664
 8015274:	20003714 	.word	0x20003714
 8015278:	20003674 	.word	0x20003674
 801527c:	0802ac0c 	.word	0x0802ac0c

08015280 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8015280:	b480      	push	{r7}
 8015282:	b085      	sub	sp, #20
 8015284:	af00      	add	r7, sp, #0
 8015286:	60f8      	str	r0, [r7, #12]
 8015288:	60b9      	str	r1, [r7, #8]
 801528a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801528c:	68fb      	ldr	r3, [r7, #12]
 801528e:	3b04      	subs	r3, #4
 8015290:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8015292:	68fb      	ldr	r3, [r7, #12]
 8015294:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8015298:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801529a:	68fb      	ldr	r3, [r7, #12]
 801529c:	3b04      	subs	r3, #4
 801529e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80152a0:	68bb      	ldr	r3, [r7, #8]
 80152a2:	f023 0201 	bic.w	r2, r3, #1
 80152a6:	68fb      	ldr	r3, [r7, #12]
 80152a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80152aa:	68fb      	ldr	r3, [r7, #12]
 80152ac:	3b04      	subs	r3, #4
 80152ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80152b0:	4a0c      	ldr	r2, [pc, #48]	; (80152e4 <pxPortInitialiseStack+0x64>)
 80152b2:	68fb      	ldr	r3, [r7, #12]
 80152b4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80152b6:	68fb      	ldr	r3, [r7, #12]
 80152b8:	3b14      	subs	r3, #20
 80152ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80152bc:	687a      	ldr	r2, [r7, #4]
 80152be:	68fb      	ldr	r3, [r7, #12]
 80152c0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80152c2:	68fb      	ldr	r3, [r7, #12]
 80152c4:	3b04      	subs	r3, #4
 80152c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80152c8:	68fb      	ldr	r3, [r7, #12]
 80152ca:	f06f 0202 	mvn.w	r2, #2
 80152ce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80152d0:	68fb      	ldr	r3, [r7, #12]
 80152d2:	3b20      	subs	r3, #32
 80152d4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80152d6:	68fb      	ldr	r3, [r7, #12]
}
 80152d8:	4618      	mov	r0, r3
 80152da:	3714      	adds	r7, #20
 80152dc:	46bd      	mov	sp, r7
 80152de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152e2:	4770      	bx	lr
 80152e4:	080152e9 	.word	0x080152e9

080152e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80152e8:	b480      	push	{r7}
 80152ea:	b085      	sub	sp, #20
 80152ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80152ee:	2300      	movs	r3, #0
 80152f0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80152f2:	4b12      	ldr	r3, [pc, #72]	; (801533c <prvTaskExitError+0x54>)
 80152f4:	681b      	ldr	r3, [r3, #0]
 80152f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80152fa:	d00a      	beq.n	8015312 <prvTaskExitError+0x2a>
	__asm volatile
 80152fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015300:	f383 8811 	msr	BASEPRI, r3
 8015304:	f3bf 8f6f 	isb	sy
 8015308:	f3bf 8f4f 	dsb	sy
 801530c:	60fb      	str	r3, [r7, #12]
}
 801530e:	bf00      	nop
 8015310:	e7fe      	b.n	8015310 <prvTaskExitError+0x28>
	__asm volatile
 8015312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015316:	f383 8811 	msr	BASEPRI, r3
 801531a:	f3bf 8f6f 	isb	sy
 801531e:	f3bf 8f4f 	dsb	sy
 8015322:	60bb      	str	r3, [r7, #8]
}
 8015324:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8015326:	bf00      	nop
 8015328:	687b      	ldr	r3, [r7, #4]
 801532a:	2b00      	cmp	r3, #0
 801532c:	d0fc      	beq.n	8015328 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801532e:	bf00      	nop
 8015330:	bf00      	nop
 8015332:	3714      	adds	r7, #20
 8015334:	46bd      	mov	sp, r7
 8015336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801533a:	4770      	bx	lr
 801533c:	1000005c 	.word	0x1000005c

08015340 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8015340:	4b07      	ldr	r3, [pc, #28]	; (8015360 <pxCurrentTCBConst2>)
 8015342:	6819      	ldr	r1, [r3, #0]
 8015344:	6808      	ldr	r0, [r1, #0]
 8015346:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801534a:	f380 8809 	msr	PSP, r0
 801534e:	f3bf 8f6f 	isb	sy
 8015352:	f04f 0000 	mov.w	r0, #0
 8015356:	f380 8811 	msr	BASEPRI, r0
 801535a:	4770      	bx	lr
 801535c:	f3af 8000 	nop.w

08015360 <pxCurrentTCBConst2>:
 8015360:	20003138 	.word	0x20003138
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8015364:	bf00      	nop
 8015366:	bf00      	nop

08015368 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8015368:	4808      	ldr	r0, [pc, #32]	; (801538c <prvPortStartFirstTask+0x24>)
 801536a:	6800      	ldr	r0, [r0, #0]
 801536c:	6800      	ldr	r0, [r0, #0]
 801536e:	f380 8808 	msr	MSP, r0
 8015372:	f04f 0000 	mov.w	r0, #0
 8015376:	f380 8814 	msr	CONTROL, r0
 801537a:	b662      	cpsie	i
 801537c:	b661      	cpsie	f
 801537e:	f3bf 8f4f 	dsb	sy
 8015382:	f3bf 8f6f 	isb	sy
 8015386:	df00      	svc	0
 8015388:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801538a:	bf00      	nop
 801538c:	e000ed08 	.word	0xe000ed08

08015390 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8015390:	b580      	push	{r7, lr}
 8015392:	b086      	sub	sp, #24
 8015394:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8015396:	4b46      	ldr	r3, [pc, #280]	; (80154b0 <xPortStartScheduler+0x120>)
 8015398:	681b      	ldr	r3, [r3, #0]
 801539a:	4a46      	ldr	r2, [pc, #280]	; (80154b4 <xPortStartScheduler+0x124>)
 801539c:	4293      	cmp	r3, r2
 801539e:	d10a      	bne.n	80153b6 <xPortStartScheduler+0x26>
	__asm volatile
 80153a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80153a4:	f383 8811 	msr	BASEPRI, r3
 80153a8:	f3bf 8f6f 	isb	sy
 80153ac:	f3bf 8f4f 	dsb	sy
 80153b0:	613b      	str	r3, [r7, #16]
}
 80153b2:	bf00      	nop
 80153b4:	e7fe      	b.n	80153b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80153b6:	4b3e      	ldr	r3, [pc, #248]	; (80154b0 <xPortStartScheduler+0x120>)
 80153b8:	681b      	ldr	r3, [r3, #0]
 80153ba:	4a3f      	ldr	r2, [pc, #252]	; (80154b8 <xPortStartScheduler+0x128>)
 80153bc:	4293      	cmp	r3, r2
 80153be:	d10a      	bne.n	80153d6 <xPortStartScheduler+0x46>
	__asm volatile
 80153c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80153c4:	f383 8811 	msr	BASEPRI, r3
 80153c8:	f3bf 8f6f 	isb	sy
 80153cc:	f3bf 8f4f 	dsb	sy
 80153d0:	60fb      	str	r3, [r7, #12]
}
 80153d2:	bf00      	nop
 80153d4:	e7fe      	b.n	80153d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80153d6:	4b39      	ldr	r3, [pc, #228]	; (80154bc <xPortStartScheduler+0x12c>)
 80153d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80153da:	697b      	ldr	r3, [r7, #20]
 80153dc:	781b      	ldrb	r3, [r3, #0]
 80153de:	b2db      	uxtb	r3, r3
 80153e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80153e2:	697b      	ldr	r3, [r7, #20]
 80153e4:	22ff      	movs	r2, #255	; 0xff
 80153e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80153e8:	697b      	ldr	r3, [r7, #20]
 80153ea:	781b      	ldrb	r3, [r3, #0]
 80153ec:	b2db      	uxtb	r3, r3
 80153ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80153f0:	78fb      	ldrb	r3, [r7, #3]
 80153f2:	b2db      	uxtb	r3, r3
 80153f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80153f8:	b2da      	uxtb	r2, r3
 80153fa:	4b31      	ldr	r3, [pc, #196]	; (80154c0 <xPortStartScheduler+0x130>)
 80153fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80153fe:	4b31      	ldr	r3, [pc, #196]	; (80154c4 <xPortStartScheduler+0x134>)
 8015400:	2207      	movs	r2, #7
 8015402:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015404:	e009      	b.n	801541a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8015406:	4b2f      	ldr	r3, [pc, #188]	; (80154c4 <xPortStartScheduler+0x134>)
 8015408:	681b      	ldr	r3, [r3, #0]
 801540a:	3b01      	subs	r3, #1
 801540c:	4a2d      	ldr	r2, [pc, #180]	; (80154c4 <xPortStartScheduler+0x134>)
 801540e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8015410:	78fb      	ldrb	r3, [r7, #3]
 8015412:	b2db      	uxtb	r3, r3
 8015414:	005b      	lsls	r3, r3, #1
 8015416:	b2db      	uxtb	r3, r3
 8015418:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801541a:	78fb      	ldrb	r3, [r7, #3]
 801541c:	b2db      	uxtb	r3, r3
 801541e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015422:	2b80      	cmp	r3, #128	; 0x80
 8015424:	d0ef      	beq.n	8015406 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8015426:	4b27      	ldr	r3, [pc, #156]	; (80154c4 <xPortStartScheduler+0x134>)
 8015428:	681b      	ldr	r3, [r3, #0]
 801542a:	f1c3 0307 	rsb	r3, r3, #7
 801542e:	2b04      	cmp	r3, #4
 8015430:	d00a      	beq.n	8015448 <xPortStartScheduler+0xb8>
	__asm volatile
 8015432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015436:	f383 8811 	msr	BASEPRI, r3
 801543a:	f3bf 8f6f 	isb	sy
 801543e:	f3bf 8f4f 	dsb	sy
 8015442:	60bb      	str	r3, [r7, #8]
}
 8015444:	bf00      	nop
 8015446:	e7fe      	b.n	8015446 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8015448:	4b1e      	ldr	r3, [pc, #120]	; (80154c4 <xPortStartScheduler+0x134>)
 801544a:	681b      	ldr	r3, [r3, #0]
 801544c:	021b      	lsls	r3, r3, #8
 801544e:	4a1d      	ldr	r2, [pc, #116]	; (80154c4 <xPortStartScheduler+0x134>)
 8015450:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8015452:	4b1c      	ldr	r3, [pc, #112]	; (80154c4 <xPortStartScheduler+0x134>)
 8015454:	681b      	ldr	r3, [r3, #0]
 8015456:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801545a:	4a1a      	ldr	r2, [pc, #104]	; (80154c4 <xPortStartScheduler+0x134>)
 801545c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801545e:	687b      	ldr	r3, [r7, #4]
 8015460:	b2da      	uxtb	r2, r3
 8015462:	697b      	ldr	r3, [r7, #20]
 8015464:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8015466:	4b18      	ldr	r3, [pc, #96]	; (80154c8 <xPortStartScheduler+0x138>)
 8015468:	681b      	ldr	r3, [r3, #0]
 801546a:	4a17      	ldr	r2, [pc, #92]	; (80154c8 <xPortStartScheduler+0x138>)
 801546c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8015470:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8015472:	4b15      	ldr	r3, [pc, #84]	; (80154c8 <xPortStartScheduler+0x138>)
 8015474:	681b      	ldr	r3, [r3, #0]
 8015476:	4a14      	ldr	r2, [pc, #80]	; (80154c8 <xPortStartScheduler+0x138>)
 8015478:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801547c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801547e:	f000 f8dd 	bl	801563c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8015482:	4b12      	ldr	r3, [pc, #72]	; (80154cc <xPortStartScheduler+0x13c>)
 8015484:	2200      	movs	r2, #0
 8015486:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8015488:	f000 f8fc 	bl	8015684 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801548c:	4b10      	ldr	r3, [pc, #64]	; (80154d0 <xPortStartScheduler+0x140>)
 801548e:	681b      	ldr	r3, [r3, #0]
 8015490:	4a0f      	ldr	r2, [pc, #60]	; (80154d0 <xPortStartScheduler+0x140>)
 8015492:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8015496:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8015498:	f7ff ff66 	bl	8015368 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801549c:	f7fe fd10 	bl	8013ec0 <vTaskSwitchContext>
	prvTaskExitError();
 80154a0:	f7ff ff22 	bl	80152e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80154a4:	2300      	movs	r3, #0
}
 80154a6:	4618      	mov	r0, r3
 80154a8:	3718      	adds	r7, #24
 80154aa:	46bd      	mov	sp, r7
 80154ac:	bd80      	pop	{r7, pc}
 80154ae:	bf00      	nop
 80154b0:	e000ed00 	.word	0xe000ed00
 80154b4:	410fc271 	.word	0x410fc271
 80154b8:	410fc270 	.word	0x410fc270
 80154bc:	e000e400 	.word	0xe000e400
 80154c0:	20003764 	.word	0x20003764
 80154c4:	20003768 	.word	0x20003768
 80154c8:	e000ed20 	.word	0xe000ed20
 80154cc:	1000005c 	.word	0x1000005c
 80154d0:	e000ef34 	.word	0xe000ef34

080154d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80154d4:	b480      	push	{r7}
 80154d6:	b083      	sub	sp, #12
 80154d8:	af00      	add	r7, sp, #0
	__asm volatile
 80154da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80154de:	f383 8811 	msr	BASEPRI, r3
 80154e2:	f3bf 8f6f 	isb	sy
 80154e6:	f3bf 8f4f 	dsb	sy
 80154ea:	607b      	str	r3, [r7, #4]
}
 80154ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80154ee:	4b0f      	ldr	r3, [pc, #60]	; (801552c <vPortEnterCritical+0x58>)
 80154f0:	681b      	ldr	r3, [r3, #0]
 80154f2:	3301      	adds	r3, #1
 80154f4:	4a0d      	ldr	r2, [pc, #52]	; (801552c <vPortEnterCritical+0x58>)
 80154f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80154f8:	4b0c      	ldr	r3, [pc, #48]	; (801552c <vPortEnterCritical+0x58>)
 80154fa:	681b      	ldr	r3, [r3, #0]
 80154fc:	2b01      	cmp	r3, #1
 80154fe:	d10f      	bne.n	8015520 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8015500:	4b0b      	ldr	r3, [pc, #44]	; (8015530 <vPortEnterCritical+0x5c>)
 8015502:	681b      	ldr	r3, [r3, #0]
 8015504:	b2db      	uxtb	r3, r3
 8015506:	2b00      	cmp	r3, #0
 8015508:	d00a      	beq.n	8015520 <vPortEnterCritical+0x4c>
	__asm volatile
 801550a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801550e:	f383 8811 	msr	BASEPRI, r3
 8015512:	f3bf 8f6f 	isb	sy
 8015516:	f3bf 8f4f 	dsb	sy
 801551a:	603b      	str	r3, [r7, #0]
}
 801551c:	bf00      	nop
 801551e:	e7fe      	b.n	801551e <vPortEnterCritical+0x4a>
	}
}
 8015520:	bf00      	nop
 8015522:	370c      	adds	r7, #12
 8015524:	46bd      	mov	sp, r7
 8015526:	f85d 7b04 	ldr.w	r7, [sp], #4
 801552a:	4770      	bx	lr
 801552c:	1000005c 	.word	0x1000005c
 8015530:	e000ed04 	.word	0xe000ed04

08015534 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8015534:	b480      	push	{r7}
 8015536:	b083      	sub	sp, #12
 8015538:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801553a:	4b12      	ldr	r3, [pc, #72]	; (8015584 <vPortExitCritical+0x50>)
 801553c:	681b      	ldr	r3, [r3, #0]
 801553e:	2b00      	cmp	r3, #0
 8015540:	d10a      	bne.n	8015558 <vPortExitCritical+0x24>
	__asm volatile
 8015542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015546:	f383 8811 	msr	BASEPRI, r3
 801554a:	f3bf 8f6f 	isb	sy
 801554e:	f3bf 8f4f 	dsb	sy
 8015552:	607b      	str	r3, [r7, #4]
}
 8015554:	bf00      	nop
 8015556:	e7fe      	b.n	8015556 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8015558:	4b0a      	ldr	r3, [pc, #40]	; (8015584 <vPortExitCritical+0x50>)
 801555a:	681b      	ldr	r3, [r3, #0]
 801555c:	3b01      	subs	r3, #1
 801555e:	4a09      	ldr	r2, [pc, #36]	; (8015584 <vPortExitCritical+0x50>)
 8015560:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8015562:	4b08      	ldr	r3, [pc, #32]	; (8015584 <vPortExitCritical+0x50>)
 8015564:	681b      	ldr	r3, [r3, #0]
 8015566:	2b00      	cmp	r3, #0
 8015568:	d105      	bne.n	8015576 <vPortExitCritical+0x42>
 801556a:	2300      	movs	r3, #0
 801556c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801556e:	683b      	ldr	r3, [r7, #0]
 8015570:	f383 8811 	msr	BASEPRI, r3
}
 8015574:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8015576:	bf00      	nop
 8015578:	370c      	adds	r7, #12
 801557a:	46bd      	mov	sp, r7
 801557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015580:	4770      	bx	lr
 8015582:	bf00      	nop
 8015584:	1000005c 	.word	0x1000005c
	...

08015590 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8015590:	f3ef 8009 	mrs	r0, PSP
 8015594:	f3bf 8f6f 	isb	sy
 8015598:	4b15      	ldr	r3, [pc, #84]	; (80155f0 <pxCurrentTCBConst>)
 801559a:	681a      	ldr	r2, [r3, #0]
 801559c:	f01e 0f10 	tst.w	lr, #16
 80155a0:	bf08      	it	eq
 80155a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80155a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80155aa:	6010      	str	r0, [r2, #0]
 80155ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80155b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80155b4:	f380 8811 	msr	BASEPRI, r0
 80155b8:	f3bf 8f4f 	dsb	sy
 80155bc:	f3bf 8f6f 	isb	sy
 80155c0:	f7fe fc7e 	bl	8013ec0 <vTaskSwitchContext>
 80155c4:	f04f 0000 	mov.w	r0, #0
 80155c8:	f380 8811 	msr	BASEPRI, r0
 80155cc:	bc09      	pop	{r0, r3}
 80155ce:	6819      	ldr	r1, [r3, #0]
 80155d0:	6808      	ldr	r0, [r1, #0]
 80155d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80155d6:	f01e 0f10 	tst.w	lr, #16
 80155da:	bf08      	it	eq
 80155dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80155e0:	f380 8809 	msr	PSP, r0
 80155e4:	f3bf 8f6f 	isb	sy
 80155e8:	4770      	bx	lr
 80155ea:	bf00      	nop
 80155ec:	f3af 8000 	nop.w

080155f0 <pxCurrentTCBConst>:
 80155f0:	20003138 	.word	0x20003138
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80155f4:	bf00      	nop
 80155f6:	bf00      	nop

080155f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80155f8:	b580      	push	{r7, lr}
 80155fa:	b082      	sub	sp, #8
 80155fc:	af00      	add	r7, sp, #0
	__asm volatile
 80155fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015602:	f383 8811 	msr	BASEPRI, r3
 8015606:	f3bf 8f6f 	isb	sy
 801560a:	f3bf 8f4f 	dsb	sy
 801560e:	607b      	str	r3, [r7, #4]
}
 8015610:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8015612:	f7fe fb9b 	bl	8013d4c <xTaskIncrementTick>
 8015616:	4603      	mov	r3, r0
 8015618:	2b00      	cmp	r3, #0
 801561a:	d003      	beq.n	8015624 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801561c:	4b06      	ldr	r3, [pc, #24]	; (8015638 <xPortSysTickHandler+0x40>)
 801561e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015622:	601a      	str	r2, [r3, #0]
 8015624:	2300      	movs	r3, #0
 8015626:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015628:	683b      	ldr	r3, [r7, #0]
 801562a:	f383 8811 	msr	BASEPRI, r3
}
 801562e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8015630:	bf00      	nop
 8015632:	3708      	adds	r7, #8
 8015634:	46bd      	mov	sp, r7
 8015636:	bd80      	pop	{r7, pc}
 8015638:	e000ed04 	.word	0xe000ed04

0801563c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801563c:	b480      	push	{r7}
 801563e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8015640:	4b0b      	ldr	r3, [pc, #44]	; (8015670 <vPortSetupTimerInterrupt+0x34>)
 8015642:	2200      	movs	r2, #0
 8015644:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8015646:	4b0b      	ldr	r3, [pc, #44]	; (8015674 <vPortSetupTimerInterrupt+0x38>)
 8015648:	2200      	movs	r2, #0
 801564a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801564c:	4b0a      	ldr	r3, [pc, #40]	; (8015678 <vPortSetupTimerInterrupt+0x3c>)
 801564e:	681b      	ldr	r3, [r3, #0]
 8015650:	4a0a      	ldr	r2, [pc, #40]	; (801567c <vPortSetupTimerInterrupt+0x40>)
 8015652:	fba2 2303 	umull	r2, r3, r2, r3
 8015656:	099b      	lsrs	r3, r3, #6
 8015658:	4a09      	ldr	r2, [pc, #36]	; (8015680 <vPortSetupTimerInterrupt+0x44>)
 801565a:	3b01      	subs	r3, #1
 801565c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801565e:	4b04      	ldr	r3, [pc, #16]	; (8015670 <vPortSetupTimerInterrupt+0x34>)
 8015660:	2207      	movs	r2, #7
 8015662:	601a      	str	r2, [r3, #0]
}
 8015664:	bf00      	nop
 8015666:	46bd      	mov	sp, r7
 8015668:	f85d 7b04 	ldr.w	r7, [sp], #4
 801566c:	4770      	bx	lr
 801566e:	bf00      	nop
 8015670:	e000e010 	.word	0xe000e010
 8015674:	e000e018 	.word	0xe000e018
 8015678:	10000050 	.word	0x10000050
 801567c:	10624dd3 	.word	0x10624dd3
 8015680:	e000e014 	.word	0xe000e014

08015684 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8015684:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8015694 <vPortEnableVFP+0x10>
 8015688:	6801      	ldr	r1, [r0, #0]
 801568a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801568e:	6001      	str	r1, [r0, #0]
 8015690:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8015692:	bf00      	nop
 8015694:	e000ed88 	.word	0xe000ed88

08015698 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8015698:	b480      	push	{r7}
 801569a:	b085      	sub	sp, #20
 801569c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801569e:	f3ef 8305 	mrs	r3, IPSR
 80156a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80156a4:	68fb      	ldr	r3, [r7, #12]
 80156a6:	2b0f      	cmp	r3, #15
 80156a8:	d914      	bls.n	80156d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80156aa:	4a17      	ldr	r2, [pc, #92]	; (8015708 <vPortValidateInterruptPriority+0x70>)
 80156ac:	68fb      	ldr	r3, [r7, #12]
 80156ae:	4413      	add	r3, r2
 80156b0:	781b      	ldrb	r3, [r3, #0]
 80156b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80156b4:	4b15      	ldr	r3, [pc, #84]	; (801570c <vPortValidateInterruptPriority+0x74>)
 80156b6:	781b      	ldrb	r3, [r3, #0]
 80156b8:	7afa      	ldrb	r2, [r7, #11]
 80156ba:	429a      	cmp	r2, r3
 80156bc:	d20a      	bcs.n	80156d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80156be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80156c2:	f383 8811 	msr	BASEPRI, r3
 80156c6:	f3bf 8f6f 	isb	sy
 80156ca:	f3bf 8f4f 	dsb	sy
 80156ce:	607b      	str	r3, [r7, #4]
}
 80156d0:	bf00      	nop
 80156d2:	e7fe      	b.n	80156d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80156d4:	4b0e      	ldr	r3, [pc, #56]	; (8015710 <vPortValidateInterruptPriority+0x78>)
 80156d6:	681b      	ldr	r3, [r3, #0]
 80156d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80156dc:	4b0d      	ldr	r3, [pc, #52]	; (8015714 <vPortValidateInterruptPriority+0x7c>)
 80156de:	681b      	ldr	r3, [r3, #0]
 80156e0:	429a      	cmp	r2, r3
 80156e2:	d90a      	bls.n	80156fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80156e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80156e8:	f383 8811 	msr	BASEPRI, r3
 80156ec:	f3bf 8f6f 	isb	sy
 80156f0:	f3bf 8f4f 	dsb	sy
 80156f4:	603b      	str	r3, [r7, #0]
}
 80156f6:	bf00      	nop
 80156f8:	e7fe      	b.n	80156f8 <vPortValidateInterruptPriority+0x60>
	}
 80156fa:	bf00      	nop
 80156fc:	3714      	adds	r7, #20
 80156fe:	46bd      	mov	sp, r7
 8015700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015704:	4770      	bx	lr
 8015706:	bf00      	nop
 8015708:	e000e3f0 	.word	0xe000e3f0
 801570c:	20003764 	.word	0x20003764
 8015710:	e000ed0c 	.word	0xe000ed0c
 8015714:	20003768 	.word	0x20003768

08015718 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8015718:	b580      	push	{r7, lr}
 801571a:	b08a      	sub	sp, #40	; 0x28
 801571c:	af00      	add	r7, sp, #0
 801571e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8015720:	2300      	movs	r3, #0
 8015722:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8015724:	f7fe fa44 	bl	8013bb0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8015728:	4b5b      	ldr	r3, [pc, #364]	; (8015898 <pvPortMalloc+0x180>)
 801572a:	681b      	ldr	r3, [r3, #0]
 801572c:	2b00      	cmp	r3, #0
 801572e:	d101      	bne.n	8015734 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8015730:	f000 f920 	bl	8015974 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8015734:	4b59      	ldr	r3, [pc, #356]	; (801589c <pvPortMalloc+0x184>)
 8015736:	681a      	ldr	r2, [r3, #0]
 8015738:	687b      	ldr	r3, [r7, #4]
 801573a:	4013      	ands	r3, r2
 801573c:	2b00      	cmp	r3, #0
 801573e:	f040 8093 	bne.w	8015868 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8015742:	687b      	ldr	r3, [r7, #4]
 8015744:	2b00      	cmp	r3, #0
 8015746:	d01d      	beq.n	8015784 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8015748:	2208      	movs	r2, #8
 801574a:	687b      	ldr	r3, [r7, #4]
 801574c:	4413      	add	r3, r2
 801574e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8015750:	687b      	ldr	r3, [r7, #4]
 8015752:	f003 0307 	and.w	r3, r3, #7
 8015756:	2b00      	cmp	r3, #0
 8015758:	d014      	beq.n	8015784 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801575a:	687b      	ldr	r3, [r7, #4]
 801575c:	f023 0307 	bic.w	r3, r3, #7
 8015760:	3308      	adds	r3, #8
 8015762:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015764:	687b      	ldr	r3, [r7, #4]
 8015766:	f003 0307 	and.w	r3, r3, #7
 801576a:	2b00      	cmp	r3, #0
 801576c:	d00a      	beq.n	8015784 <pvPortMalloc+0x6c>
	__asm volatile
 801576e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015772:	f383 8811 	msr	BASEPRI, r3
 8015776:	f3bf 8f6f 	isb	sy
 801577a:	f3bf 8f4f 	dsb	sy
 801577e:	617b      	str	r3, [r7, #20]
}
 8015780:	bf00      	nop
 8015782:	e7fe      	b.n	8015782 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8015784:	687b      	ldr	r3, [r7, #4]
 8015786:	2b00      	cmp	r3, #0
 8015788:	d06e      	beq.n	8015868 <pvPortMalloc+0x150>
 801578a:	4b45      	ldr	r3, [pc, #276]	; (80158a0 <pvPortMalloc+0x188>)
 801578c:	681b      	ldr	r3, [r3, #0]
 801578e:	687a      	ldr	r2, [r7, #4]
 8015790:	429a      	cmp	r2, r3
 8015792:	d869      	bhi.n	8015868 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8015794:	4b43      	ldr	r3, [pc, #268]	; (80158a4 <pvPortMalloc+0x18c>)
 8015796:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8015798:	4b42      	ldr	r3, [pc, #264]	; (80158a4 <pvPortMalloc+0x18c>)
 801579a:	681b      	ldr	r3, [r3, #0]
 801579c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801579e:	e004      	b.n	80157aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80157a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80157a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157a6:	681b      	ldr	r3, [r3, #0]
 80157a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80157aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157ac:	685b      	ldr	r3, [r3, #4]
 80157ae:	687a      	ldr	r2, [r7, #4]
 80157b0:	429a      	cmp	r2, r3
 80157b2:	d903      	bls.n	80157bc <pvPortMalloc+0xa4>
 80157b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157b6:	681b      	ldr	r3, [r3, #0]
 80157b8:	2b00      	cmp	r3, #0
 80157ba:	d1f1      	bne.n	80157a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80157bc:	4b36      	ldr	r3, [pc, #216]	; (8015898 <pvPortMalloc+0x180>)
 80157be:	681b      	ldr	r3, [r3, #0]
 80157c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80157c2:	429a      	cmp	r2, r3
 80157c4:	d050      	beq.n	8015868 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80157c6:	6a3b      	ldr	r3, [r7, #32]
 80157c8:	681b      	ldr	r3, [r3, #0]
 80157ca:	2208      	movs	r2, #8
 80157cc:	4413      	add	r3, r2
 80157ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80157d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157d2:	681a      	ldr	r2, [r3, #0]
 80157d4:	6a3b      	ldr	r3, [r7, #32]
 80157d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80157d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157da:	685a      	ldr	r2, [r3, #4]
 80157dc:	687b      	ldr	r3, [r7, #4]
 80157de:	1ad2      	subs	r2, r2, r3
 80157e0:	2308      	movs	r3, #8
 80157e2:	005b      	lsls	r3, r3, #1
 80157e4:	429a      	cmp	r2, r3
 80157e6:	d91f      	bls.n	8015828 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80157e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80157ea:	687b      	ldr	r3, [r7, #4]
 80157ec:	4413      	add	r3, r2
 80157ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80157f0:	69bb      	ldr	r3, [r7, #24]
 80157f2:	f003 0307 	and.w	r3, r3, #7
 80157f6:	2b00      	cmp	r3, #0
 80157f8:	d00a      	beq.n	8015810 <pvPortMalloc+0xf8>
	__asm volatile
 80157fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80157fe:	f383 8811 	msr	BASEPRI, r3
 8015802:	f3bf 8f6f 	isb	sy
 8015806:	f3bf 8f4f 	dsb	sy
 801580a:	613b      	str	r3, [r7, #16]
}
 801580c:	bf00      	nop
 801580e:	e7fe      	b.n	801580e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8015810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015812:	685a      	ldr	r2, [r3, #4]
 8015814:	687b      	ldr	r3, [r7, #4]
 8015816:	1ad2      	subs	r2, r2, r3
 8015818:	69bb      	ldr	r3, [r7, #24]
 801581a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801581c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801581e:	687a      	ldr	r2, [r7, #4]
 8015820:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8015822:	69b8      	ldr	r0, [r7, #24]
 8015824:	f000 f908 	bl	8015a38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8015828:	4b1d      	ldr	r3, [pc, #116]	; (80158a0 <pvPortMalloc+0x188>)
 801582a:	681a      	ldr	r2, [r3, #0]
 801582c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801582e:	685b      	ldr	r3, [r3, #4]
 8015830:	1ad3      	subs	r3, r2, r3
 8015832:	4a1b      	ldr	r2, [pc, #108]	; (80158a0 <pvPortMalloc+0x188>)
 8015834:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8015836:	4b1a      	ldr	r3, [pc, #104]	; (80158a0 <pvPortMalloc+0x188>)
 8015838:	681a      	ldr	r2, [r3, #0]
 801583a:	4b1b      	ldr	r3, [pc, #108]	; (80158a8 <pvPortMalloc+0x190>)
 801583c:	681b      	ldr	r3, [r3, #0]
 801583e:	429a      	cmp	r2, r3
 8015840:	d203      	bcs.n	801584a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8015842:	4b17      	ldr	r3, [pc, #92]	; (80158a0 <pvPortMalloc+0x188>)
 8015844:	681b      	ldr	r3, [r3, #0]
 8015846:	4a18      	ldr	r2, [pc, #96]	; (80158a8 <pvPortMalloc+0x190>)
 8015848:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801584a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801584c:	685a      	ldr	r2, [r3, #4]
 801584e:	4b13      	ldr	r3, [pc, #76]	; (801589c <pvPortMalloc+0x184>)
 8015850:	681b      	ldr	r3, [r3, #0]
 8015852:	431a      	orrs	r2, r3
 8015854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015856:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8015858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801585a:	2200      	movs	r2, #0
 801585c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801585e:	4b13      	ldr	r3, [pc, #76]	; (80158ac <pvPortMalloc+0x194>)
 8015860:	681b      	ldr	r3, [r3, #0]
 8015862:	3301      	adds	r3, #1
 8015864:	4a11      	ldr	r2, [pc, #68]	; (80158ac <pvPortMalloc+0x194>)
 8015866:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8015868:	f7fe f9b0 	bl	8013bcc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801586c:	69fb      	ldr	r3, [r7, #28]
 801586e:	f003 0307 	and.w	r3, r3, #7
 8015872:	2b00      	cmp	r3, #0
 8015874:	d00a      	beq.n	801588c <pvPortMalloc+0x174>
	__asm volatile
 8015876:	f04f 0350 	mov.w	r3, #80	; 0x50
 801587a:	f383 8811 	msr	BASEPRI, r3
 801587e:	f3bf 8f6f 	isb	sy
 8015882:	f3bf 8f4f 	dsb	sy
 8015886:	60fb      	str	r3, [r7, #12]
}
 8015888:	bf00      	nop
 801588a:	e7fe      	b.n	801588a <pvPortMalloc+0x172>
	return pvReturn;
 801588c:	69fb      	ldr	r3, [r7, #28]
}
 801588e:	4618      	mov	r0, r3
 8015890:	3728      	adds	r7, #40	; 0x28
 8015892:	46bd      	mov	sp, r7
 8015894:	bd80      	pop	{r7, pc}
 8015896:	bf00      	nop
 8015898:	20013774 	.word	0x20013774
 801589c:	20013788 	.word	0x20013788
 80158a0:	20013778 	.word	0x20013778
 80158a4:	2001376c 	.word	0x2001376c
 80158a8:	2001377c 	.word	0x2001377c
 80158ac:	20013780 	.word	0x20013780

080158b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80158b0:	b580      	push	{r7, lr}
 80158b2:	b086      	sub	sp, #24
 80158b4:	af00      	add	r7, sp, #0
 80158b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80158b8:	687b      	ldr	r3, [r7, #4]
 80158ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80158bc:	687b      	ldr	r3, [r7, #4]
 80158be:	2b00      	cmp	r3, #0
 80158c0:	d04d      	beq.n	801595e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80158c2:	2308      	movs	r3, #8
 80158c4:	425b      	negs	r3, r3
 80158c6:	697a      	ldr	r2, [r7, #20]
 80158c8:	4413      	add	r3, r2
 80158ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80158cc:	697b      	ldr	r3, [r7, #20]
 80158ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80158d0:	693b      	ldr	r3, [r7, #16]
 80158d2:	685a      	ldr	r2, [r3, #4]
 80158d4:	4b24      	ldr	r3, [pc, #144]	; (8015968 <vPortFree+0xb8>)
 80158d6:	681b      	ldr	r3, [r3, #0]
 80158d8:	4013      	ands	r3, r2
 80158da:	2b00      	cmp	r3, #0
 80158dc:	d10a      	bne.n	80158f4 <vPortFree+0x44>
	__asm volatile
 80158de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80158e2:	f383 8811 	msr	BASEPRI, r3
 80158e6:	f3bf 8f6f 	isb	sy
 80158ea:	f3bf 8f4f 	dsb	sy
 80158ee:	60fb      	str	r3, [r7, #12]
}
 80158f0:	bf00      	nop
 80158f2:	e7fe      	b.n	80158f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80158f4:	693b      	ldr	r3, [r7, #16]
 80158f6:	681b      	ldr	r3, [r3, #0]
 80158f8:	2b00      	cmp	r3, #0
 80158fa:	d00a      	beq.n	8015912 <vPortFree+0x62>
	__asm volatile
 80158fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015900:	f383 8811 	msr	BASEPRI, r3
 8015904:	f3bf 8f6f 	isb	sy
 8015908:	f3bf 8f4f 	dsb	sy
 801590c:	60bb      	str	r3, [r7, #8]
}
 801590e:	bf00      	nop
 8015910:	e7fe      	b.n	8015910 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8015912:	693b      	ldr	r3, [r7, #16]
 8015914:	685a      	ldr	r2, [r3, #4]
 8015916:	4b14      	ldr	r3, [pc, #80]	; (8015968 <vPortFree+0xb8>)
 8015918:	681b      	ldr	r3, [r3, #0]
 801591a:	4013      	ands	r3, r2
 801591c:	2b00      	cmp	r3, #0
 801591e:	d01e      	beq.n	801595e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8015920:	693b      	ldr	r3, [r7, #16]
 8015922:	681b      	ldr	r3, [r3, #0]
 8015924:	2b00      	cmp	r3, #0
 8015926:	d11a      	bne.n	801595e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8015928:	693b      	ldr	r3, [r7, #16]
 801592a:	685a      	ldr	r2, [r3, #4]
 801592c:	4b0e      	ldr	r3, [pc, #56]	; (8015968 <vPortFree+0xb8>)
 801592e:	681b      	ldr	r3, [r3, #0]
 8015930:	43db      	mvns	r3, r3
 8015932:	401a      	ands	r2, r3
 8015934:	693b      	ldr	r3, [r7, #16]
 8015936:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8015938:	f7fe f93a 	bl	8013bb0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801593c:	693b      	ldr	r3, [r7, #16]
 801593e:	685a      	ldr	r2, [r3, #4]
 8015940:	4b0a      	ldr	r3, [pc, #40]	; (801596c <vPortFree+0xbc>)
 8015942:	681b      	ldr	r3, [r3, #0]
 8015944:	4413      	add	r3, r2
 8015946:	4a09      	ldr	r2, [pc, #36]	; (801596c <vPortFree+0xbc>)
 8015948:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801594a:	6938      	ldr	r0, [r7, #16]
 801594c:	f000 f874 	bl	8015a38 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8015950:	4b07      	ldr	r3, [pc, #28]	; (8015970 <vPortFree+0xc0>)
 8015952:	681b      	ldr	r3, [r3, #0]
 8015954:	3301      	adds	r3, #1
 8015956:	4a06      	ldr	r2, [pc, #24]	; (8015970 <vPortFree+0xc0>)
 8015958:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801595a:	f7fe f937 	bl	8013bcc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801595e:	bf00      	nop
 8015960:	3718      	adds	r7, #24
 8015962:	46bd      	mov	sp, r7
 8015964:	bd80      	pop	{r7, pc}
 8015966:	bf00      	nop
 8015968:	20013788 	.word	0x20013788
 801596c:	20013778 	.word	0x20013778
 8015970:	20013784 	.word	0x20013784

08015974 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8015974:	b480      	push	{r7}
 8015976:	b085      	sub	sp, #20
 8015978:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801597a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801597e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8015980:	4b27      	ldr	r3, [pc, #156]	; (8015a20 <prvHeapInit+0xac>)
 8015982:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8015984:	68fb      	ldr	r3, [r7, #12]
 8015986:	f003 0307 	and.w	r3, r3, #7
 801598a:	2b00      	cmp	r3, #0
 801598c:	d00c      	beq.n	80159a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801598e:	68fb      	ldr	r3, [r7, #12]
 8015990:	3307      	adds	r3, #7
 8015992:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015994:	68fb      	ldr	r3, [r7, #12]
 8015996:	f023 0307 	bic.w	r3, r3, #7
 801599a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801599c:	68ba      	ldr	r2, [r7, #8]
 801599e:	68fb      	ldr	r3, [r7, #12]
 80159a0:	1ad3      	subs	r3, r2, r3
 80159a2:	4a1f      	ldr	r2, [pc, #124]	; (8015a20 <prvHeapInit+0xac>)
 80159a4:	4413      	add	r3, r2
 80159a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80159a8:	68fb      	ldr	r3, [r7, #12]
 80159aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80159ac:	4a1d      	ldr	r2, [pc, #116]	; (8015a24 <prvHeapInit+0xb0>)
 80159ae:	687b      	ldr	r3, [r7, #4]
 80159b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80159b2:	4b1c      	ldr	r3, [pc, #112]	; (8015a24 <prvHeapInit+0xb0>)
 80159b4:	2200      	movs	r2, #0
 80159b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80159b8:	687b      	ldr	r3, [r7, #4]
 80159ba:	68ba      	ldr	r2, [r7, #8]
 80159bc:	4413      	add	r3, r2
 80159be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80159c0:	2208      	movs	r2, #8
 80159c2:	68fb      	ldr	r3, [r7, #12]
 80159c4:	1a9b      	subs	r3, r3, r2
 80159c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80159c8:	68fb      	ldr	r3, [r7, #12]
 80159ca:	f023 0307 	bic.w	r3, r3, #7
 80159ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80159d0:	68fb      	ldr	r3, [r7, #12]
 80159d2:	4a15      	ldr	r2, [pc, #84]	; (8015a28 <prvHeapInit+0xb4>)
 80159d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80159d6:	4b14      	ldr	r3, [pc, #80]	; (8015a28 <prvHeapInit+0xb4>)
 80159d8:	681b      	ldr	r3, [r3, #0]
 80159da:	2200      	movs	r2, #0
 80159dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80159de:	4b12      	ldr	r3, [pc, #72]	; (8015a28 <prvHeapInit+0xb4>)
 80159e0:	681b      	ldr	r3, [r3, #0]
 80159e2:	2200      	movs	r2, #0
 80159e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80159e6:	687b      	ldr	r3, [r7, #4]
 80159e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80159ea:	683b      	ldr	r3, [r7, #0]
 80159ec:	68fa      	ldr	r2, [r7, #12]
 80159ee:	1ad2      	subs	r2, r2, r3
 80159f0:	683b      	ldr	r3, [r7, #0]
 80159f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80159f4:	4b0c      	ldr	r3, [pc, #48]	; (8015a28 <prvHeapInit+0xb4>)
 80159f6:	681a      	ldr	r2, [r3, #0]
 80159f8:	683b      	ldr	r3, [r7, #0]
 80159fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80159fc:	683b      	ldr	r3, [r7, #0]
 80159fe:	685b      	ldr	r3, [r3, #4]
 8015a00:	4a0a      	ldr	r2, [pc, #40]	; (8015a2c <prvHeapInit+0xb8>)
 8015a02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015a04:	683b      	ldr	r3, [r7, #0]
 8015a06:	685b      	ldr	r3, [r3, #4]
 8015a08:	4a09      	ldr	r2, [pc, #36]	; (8015a30 <prvHeapInit+0xbc>)
 8015a0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8015a0c:	4b09      	ldr	r3, [pc, #36]	; (8015a34 <prvHeapInit+0xc0>)
 8015a0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8015a12:	601a      	str	r2, [r3, #0]
}
 8015a14:	bf00      	nop
 8015a16:	3714      	adds	r7, #20
 8015a18:	46bd      	mov	sp, r7
 8015a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a1e:	4770      	bx	lr
 8015a20:	2000376c 	.word	0x2000376c
 8015a24:	2001376c 	.word	0x2001376c
 8015a28:	20013774 	.word	0x20013774
 8015a2c:	2001377c 	.word	0x2001377c
 8015a30:	20013778 	.word	0x20013778
 8015a34:	20013788 	.word	0x20013788

08015a38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8015a38:	b480      	push	{r7}
 8015a3a:	b085      	sub	sp, #20
 8015a3c:	af00      	add	r7, sp, #0
 8015a3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8015a40:	4b28      	ldr	r3, [pc, #160]	; (8015ae4 <prvInsertBlockIntoFreeList+0xac>)
 8015a42:	60fb      	str	r3, [r7, #12]
 8015a44:	e002      	b.n	8015a4c <prvInsertBlockIntoFreeList+0x14>
 8015a46:	68fb      	ldr	r3, [r7, #12]
 8015a48:	681b      	ldr	r3, [r3, #0]
 8015a4a:	60fb      	str	r3, [r7, #12]
 8015a4c:	68fb      	ldr	r3, [r7, #12]
 8015a4e:	681b      	ldr	r3, [r3, #0]
 8015a50:	687a      	ldr	r2, [r7, #4]
 8015a52:	429a      	cmp	r2, r3
 8015a54:	d8f7      	bhi.n	8015a46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8015a56:	68fb      	ldr	r3, [r7, #12]
 8015a58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8015a5a:	68fb      	ldr	r3, [r7, #12]
 8015a5c:	685b      	ldr	r3, [r3, #4]
 8015a5e:	68ba      	ldr	r2, [r7, #8]
 8015a60:	4413      	add	r3, r2
 8015a62:	687a      	ldr	r2, [r7, #4]
 8015a64:	429a      	cmp	r2, r3
 8015a66:	d108      	bne.n	8015a7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8015a68:	68fb      	ldr	r3, [r7, #12]
 8015a6a:	685a      	ldr	r2, [r3, #4]
 8015a6c:	687b      	ldr	r3, [r7, #4]
 8015a6e:	685b      	ldr	r3, [r3, #4]
 8015a70:	441a      	add	r2, r3
 8015a72:	68fb      	ldr	r3, [r7, #12]
 8015a74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8015a76:	68fb      	ldr	r3, [r7, #12]
 8015a78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8015a7a:	687b      	ldr	r3, [r7, #4]
 8015a7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8015a7e:	687b      	ldr	r3, [r7, #4]
 8015a80:	685b      	ldr	r3, [r3, #4]
 8015a82:	68ba      	ldr	r2, [r7, #8]
 8015a84:	441a      	add	r2, r3
 8015a86:	68fb      	ldr	r3, [r7, #12]
 8015a88:	681b      	ldr	r3, [r3, #0]
 8015a8a:	429a      	cmp	r2, r3
 8015a8c:	d118      	bne.n	8015ac0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8015a8e:	68fb      	ldr	r3, [r7, #12]
 8015a90:	681a      	ldr	r2, [r3, #0]
 8015a92:	4b15      	ldr	r3, [pc, #84]	; (8015ae8 <prvInsertBlockIntoFreeList+0xb0>)
 8015a94:	681b      	ldr	r3, [r3, #0]
 8015a96:	429a      	cmp	r2, r3
 8015a98:	d00d      	beq.n	8015ab6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8015a9a:	687b      	ldr	r3, [r7, #4]
 8015a9c:	685a      	ldr	r2, [r3, #4]
 8015a9e:	68fb      	ldr	r3, [r7, #12]
 8015aa0:	681b      	ldr	r3, [r3, #0]
 8015aa2:	685b      	ldr	r3, [r3, #4]
 8015aa4:	441a      	add	r2, r3
 8015aa6:	687b      	ldr	r3, [r7, #4]
 8015aa8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8015aaa:	68fb      	ldr	r3, [r7, #12]
 8015aac:	681b      	ldr	r3, [r3, #0]
 8015aae:	681a      	ldr	r2, [r3, #0]
 8015ab0:	687b      	ldr	r3, [r7, #4]
 8015ab2:	601a      	str	r2, [r3, #0]
 8015ab4:	e008      	b.n	8015ac8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8015ab6:	4b0c      	ldr	r3, [pc, #48]	; (8015ae8 <prvInsertBlockIntoFreeList+0xb0>)
 8015ab8:	681a      	ldr	r2, [r3, #0]
 8015aba:	687b      	ldr	r3, [r7, #4]
 8015abc:	601a      	str	r2, [r3, #0]
 8015abe:	e003      	b.n	8015ac8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8015ac0:	68fb      	ldr	r3, [r7, #12]
 8015ac2:	681a      	ldr	r2, [r3, #0]
 8015ac4:	687b      	ldr	r3, [r7, #4]
 8015ac6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8015ac8:	68fa      	ldr	r2, [r7, #12]
 8015aca:	687b      	ldr	r3, [r7, #4]
 8015acc:	429a      	cmp	r2, r3
 8015ace:	d002      	beq.n	8015ad6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8015ad0:	68fb      	ldr	r3, [r7, #12]
 8015ad2:	687a      	ldr	r2, [r7, #4]
 8015ad4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015ad6:	bf00      	nop
 8015ad8:	3714      	adds	r7, #20
 8015ada:	46bd      	mov	sp, r7
 8015adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ae0:	4770      	bx	lr
 8015ae2:	bf00      	nop
 8015ae4:	2001376c 	.word	0x2001376c
 8015ae8:	20013774 	.word	0x20013774

08015aec <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8015aec:	b580      	push	{r7, lr}
 8015aee:	b084      	sub	sp, #16
 8015af0:	af00      	add	r7, sp, #0
 8015af2:	6078      	str	r0, [r7, #4]
 8015af4:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8015af6:	f009 ffcb 	bl	801fa90 <sys_timeouts_sleeptime>
 8015afa:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8015afc:	68fb      	ldr	r3, [r7, #12]
 8015afe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015b02:	d10b      	bne.n	8015b1c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8015b04:	4813      	ldr	r0, [pc, #76]	; (8015b54 <tcpip_timeouts_mbox_fetch+0x68>)
 8015b06:	f00e fed8 	bl	80248ba <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8015b0a:	2200      	movs	r2, #0
 8015b0c:	6839      	ldr	r1, [r7, #0]
 8015b0e:	6878      	ldr	r0, [r7, #4]
 8015b10:	f00e fe60 	bl	80247d4 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8015b14:	480f      	ldr	r0, [pc, #60]	; (8015b54 <tcpip_timeouts_mbox_fetch+0x68>)
 8015b16:	f00e fec1 	bl	802489c <sys_mutex_lock>
    return;
 8015b1a:	e018      	b.n	8015b4e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8015b1c:	68fb      	ldr	r3, [r7, #12]
 8015b1e:	2b00      	cmp	r3, #0
 8015b20:	d102      	bne.n	8015b28 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8015b22:	f009 ff7b 	bl	801fa1c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8015b26:	e7e6      	b.n	8015af6 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8015b28:	480a      	ldr	r0, [pc, #40]	; (8015b54 <tcpip_timeouts_mbox_fetch+0x68>)
 8015b2a:	f00e fec6 	bl	80248ba <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8015b2e:	68fa      	ldr	r2, [r7, #12]
 8015b30:	6839      	ldr	r1, [r7, #0]
 8015b32:	6878      	ldr	r0, [r7, #4]
 8015b34:	f00e fe4e 	bl	80247d4 <sys_arch_mbox_fetch>
 8015b38:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8015b3a:	4806      	ldr	r0, [pc, #24]	; (8015b54 <tcpip_timeouts_mbox_fetch+0x68>)
 8015b3c:	f00e feae 	bl	802489c <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8015b40:	68bb      	ldr	r3, [r7, #8]
 8015b42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015b46:	d102      	bne.n	8015b4e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8015b48:	f009 ff68 	bl	801fa1c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8015b4c:	e7d3      	b.n	8015af6 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8015b4e:	3710      	adds	r7, #16
 8015b50:	46bd      	mov	sp, r7
 8015b52:	bd80      	pop	{r7, pc}
 8015b54:	20017774 	.word	0x20017774

08015b58 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8015b58:	b580      	push	{r7, lr}
 8015b5a:	b084      	sub	sp, #16
 8015b5c:	af00      	add	r7, sp, #0
 8015b5e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8015b60:	4810      	ldr	r0, [pc, #64]	; (8015ba4 <tcpip_thread+0x4c>)
 8015b62:	f00e fe9b 	bl	802489c <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8015b66:	4b10      	ldr	r3, [pc, #64]	; (8015ba8 <tcpip_thread+0x50>)
 8015b68:	681b      	ldr	r3, [r3, #0]
 8015b6a:	2b00      	cmp	r3, #0
 8015b6c:	d005      	beq.n	8015b7a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8015b6e:	4b0e      	ldr	r3, [pc, #56]	; (8015ba8 <tcpip_thread+0x50>)
 8015b70:	681b      	ldr	r3, [r3, #0]
 8015b72:	4a0e      	ldr	r2, [pc, #56]	; (8015bac <tcpip_thread+0x54>)
 8015b74:	6812      	ldr	r2, [r2, #0]
 8015b76:	4610      	mov	r0, r2
 8015b78:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8015b7a:	f107 030c 	add.w	r3, r7, #12
 8015b7e:	4619      	mov	r1, r3
 8015b80:	480b      	ldr	r0, [pc, #44]	; (8015bb0 <tcpip_thread+0x58>)
 8015b82:	f7ff ffb3 	bl	8015aec <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8015b86:	68fb      	ldr	r3, [r7, #12]
 8015b88:	2b00      	cmp	r3, #0
 8015b8a:	d106      	bne.n	8015b9a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8015b8c:	4b09      	ldr	r3, [pc, #36]	; (8015bb4 <tcpip_thread+0x5c>)
 8015b8e:	2291      	movs	r2, #145	; 0x91
 8015b90:	4909      	ldr	r1, [pc, #36]	; (8015bb8 <tcpip_thread+0x60>)
 8015b92:	480a      	ldr	r0, [pc, #40]	; (8015bbc <tcpip_thread+0x64>)
 8015b94:	f00f fe0a 	bl	80257ac <iprintf>
      continue;
 8015b98:	e003      	b.n	8015ba2 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8015b9a:	68fb      	ldr	r3, [r7, #12]
 8015b9c:	4618      	mov	r0, r3
 8015b9e:	f000 f80f 	bl	8015bc0 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8015ba2:	e7ea      	b.n	8015b7a <tcpip_thread+0x22>
 8015ba4:	20017774 	.word	0x20017774
 8015ba8:	2001378c 	.word	0x2001378c
 8015bac:	20013790 	.word	0x20013790
 8015bb0:	20013794 	.word	0x20013794
 8015bb4:	0802ac14 	.word	0x0802ac14
 8015bb8:	0802ac44 	.word	0x0802ac44
 8015bbc:	0802ac64 	.word	0x0802ac64

08015bc0 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8015bc0:	b580      	push	{r7, lr}
 8015bc2:	b082      	sub	sp, #8
 8015bc4:	af00      	add	r7, sp, #0
 8015bc6:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8015bc8:	687b      	ldr	r3, [r7, #4]
 8015bca:	781b      	ldrb	r3, [r3, #0]
 8015bcc:	2b02      	cmp	r3, #2
 8015bce:	d026      	beq.n	8015c1e <tcpip_thread_handle_msg+0x5e>
 8015bd0:	2b02      	cmp	r3, #2
 8015bd2:	dc2b      	bgt.n	8015c2c <tcpip_thread_handle_msg+0x6c>
 8015bd4:	2b00      	cmp	r3, #0
 8015bd6:	d002      	beq.n	8015bde <tcpip_thread_handle_msg+0x1e>
 8015bd8:	2b01      	cmp	r3, #1
 8015bda:	d015      	beq.n	8015c08 <tcpip_thread_handle_msg+0x48>
 8015bdc:	e026      	b.n	8015c2c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8015bde:	687b      	ldr	r3, [r7, #4]
 8015be0:	68db      	ldr	r3, [r3, #12]
 8015be2:	687a      	ldr	r2, [r7, #4]
 8015be4:	6850      	ldr	r0, [r2, #4]
 8015be6:	687a      	ldr	r2, [r7, #4]
 8015be8:	6892      	ldr	r2, [r2, #8]
 8015bea:	4611      	mov	r1, r2
 8015bec:	4798      	blx	r3
 8015bee:	4603      	mov	r3, r0
 8015bf0:	2b00      	cmp	r3, #0
 8015bf2:	d004      	beq.n	8015bfe <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8015bf4:	687b      	ldr	r3, [r7, #4]
 8015bf6:	685b      	ldr	r3, [r3, #4]
 8015bf8:	4618      	mov	r0, r3
 8015bfa:	f003 fa5f 	bl	80190bc <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8015bfe:	6879      	ldr	r1, [r7, #4]
 8015c00:	2009      	movs	r0, #9
 8015c02:	f002 fbab 	bl	801835c <memp_free>
      break;
 8015c06:	e018      	b.n	8015c3a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8015c08:	687b      	ldr	r3, [r7, #4]
 8015c0a:	685b      	ldr	r3, [r3, #4]
 8015c0c:	687a      	ldr	r2, [r7, #4]
 8015c0e:	6892      	ldr	r2, [r2, #8]
 8015c10:	4610      	mov	r0, r2
 8015c12:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8015c14:	6879      	ldr	r1, [r7, #4]
 8015c16:	2008      	movs	r0, #8
 8015c18:	f002 fba0 	bl	801835c <memp_free>
      break;
 8015c1c:	e00d      	b.n	8015c3a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8015c1e:	687b      	ldr	r3, [r7, #4]
 8015c20:	685b      	ldr	r3, [r3, #4]
 8015c22:	687a      	ldr	r2, [r7, #4]
 8015c24:	6892      	ldr	r2, [r2, #8]
 8015c26:	4610      	mov	r0, r2
 8015c28:	4798      	blx	r3
      break;
 8015c2a:	e006      	b.n	8015c3a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8015c2c:	4b05      	ldr	r3, [pc, #20]	; (8015c44 <tcpip_thread_handle_msg+0x84>)
 8015c2e:	22cf      	movs	r2, #207	; 0xcf
 8015c30:	4905      	ldr	r1, [pc, #20]	; (8015c48 <tcpip_thread_handle_msg+0x88>)
 8015c32:	4806      	ldr	r0, [pc, #24]	; (8015c4c <tcpip_thread_handle_msg+0x8c>)
 8015c34:	f00f fdba 	bl	80257ac <iprintf>
      break;
 8015c38:	bf00      	nop
  }
}
 8015c3a:	bf00      	nop
 8015c3c:	3708      	adds	r7, #8
 8015c3e:	46bd      	mov	sp, r7
 8015c40:	bd80      	pop	{r7, pc}
 8015c42:	bf00      	nop
 8015c44:	0802ac14 	.word	0x0802ac14
 8015c48:	0802ac44 	.word	0x0802ac44
 8015c4c:	0802ac64 	.word	0x0802ac64

08015c50 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8015c50:	b580      	push	{r7, lr}
 8015c52:	b086      	sub	sp, #24
 8015c54:	af00      	add	r7, sp, #0
 8015c56:	60f8      	str	r0, [r7, #12]
 8015c58:	60b9      	str	r1, [r7, #8]
 8015c5a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8015c5c:	481a      	ldr	r0, [pc, #104]	; (8015cc8 <tcpip_inpkt+0x78>)
 8015c5e:	f00e fdea 	bl	8024836 <sys_mbox_valid>
 8015c62:	4603      	mov	r3, r0
 8015c64:	2b00      	cmp	r3, #0
 8015c66:	d105      	bne.n	8015c74 <tcpip_inpkt+0x24>
 8015c68:	4b18      	ldr	r3, [pc, #96]	; (8015ccc <tcpip_inpkt+0x7c>)
 8015c6a:	22fc      	movs	r2, #252	; 0xfc
 8015c6c:	4918      	ldr	r1, [pc, #96]	; (8015cd0 <tcpip_inpkt+0x80>)
 8015c6e:	4819      	ldr	r0, [pc, #100]	; (8015cd4 <tcpip_inpkt+0x84>)
 8015c70:	f00f fd9c 	bl	80257ac <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8015c74:	2009      	movs	r0, #9
 8015c76:	f002 fb1f 	bl	80182b8 <memp_malloc>
 8015c7a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8015c7c:	697b      	ldr	r3, [r7, #20]
 8015c7e:	2b00      	cmp	r3, #0
 8015c80:	d102      	bne.n	8015c88 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8015c82:	f04f 33ff 	mov.w	r3, #4294967295
 8015c86:	e01a      	b.n	8015cbe <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8015c88:	697b      	ldr	r3, [r7, #20]
 8015c8a:	2200      	movs	r2, #0
 8015c8c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8015c8e:	697b      	ldr	r3, [r7, #20]
 8015c90:	68fa      	ldr	r2, [r7, #12]
 8015c92:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8015c94:	697b      	ldr	r3, [r7, #20]
 8015c96:	68ba      	ldr	r2, [r7, #8]
 8015c98:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8015c9a:	697b      	ldr	r3, [r7, #20]
 8015c9c:	687a      	ldr	r2, [r7, #4]
 8015c9e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8015ca0:	6979      	ldr	r1, [r7, #20]
 8015ca2:	4809      	ldr	r0, [pc, #36]	; (8015cc8 <tcpip_inpkt+0x78>)
 8015ca4:	f00e fd7c 	bl	80247a0 <sys_mbox_trypost>
 8015ca8:	4603      	mov	r3, r0
 8015caa:	2b00      	cmp	r3, #0
 8015cac:	d006      	beq.n	8015cbc <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8015cae:	6979      	ldr	r1, [r7, #20]
 8015cb0:	2009      	movs	r0, #9
 8015cb2:	f002 fb53 	bl	801835c <memp_free>
    return ERR_MEM;
 8015cb6:	f04f 33ff 	mov.w	r3, #4294967295
 8015cba:	e000      	b.n	8015cbe <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8015cbc:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8015cbe:	4618      	mov	r0, r3
 8015cc0:	3718      	adds	r7, #24
 8015cc2:	46bd      	mov	sp, r7
 8015cc4:	bd80      	pop	{r7, pc}
 8015cc6:	bf00      	nop
 8015cc8:	20013794 	.word	0x20013794
 8015ccc:	0802ac14 	.word	0x0802ac14
 8015cd0:	0802ac8c 	.word	0x0802ac8c
 8015cd4:	0802ac64 	.word	0x0802ac64

08015cd8 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8015cd8:	b580      	push	{r7, lr}
 8015cda:	b082      	sub	sp, #8
 8015cdc:	af00      	add	r7, sp, #0
 8015cde:	6078      	str	r0, [r7, #4]
 8015ce0:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8015ce2:	683b      	ldr	r3, [r7, #0]
 8015ce4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015ce8:	f003 0318 	and.w	r3, r3, #24
 8015cec:	2b00      	cmp	r3, #0
 8015cee:	d006      	beq.n	8015cfe <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8015cf0:	4a08      	ldr	r2, [pc, #32]	; (8015d14 <tcpip_input+0x3c>)
 8015cf2:	6839      	ldr	r1, [r7, #0]
 8015cf4:	6878      	ldr	r0, [r7, #4]
 8015cf6:	f7ff ffab 	bl	8015c50 <tcpip_inpkt>
 8015cfa:	4603      	mov	r3, r0
 8015cfc:	e005      	b.n	8015d0a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8015cfe:	4a06      	ldr	r2, [pc, #24]	; (8015d18 <tcpip_input+0x40>)
 8015d00:	6839      	ldr	r1, [r7, #0]
 8015d02:	6878      	ldr	r0, [r7, #4]
 8015d04:	f7ff ffa4 	bl	8015c50 <tcpip_inpkt>
 8015d08:	4603      	mov	r3, r0
}
 8015d0a:	4618      	mov	r0, r3
 8015d0c:	3708      	adds	r7, #8
 8015d0e:	46bd      	mov	sp, r7
 8015d10:	bd80      	pop	{r7, pc}
 8015d12:	bf00      	nop
 8015d14:	080245c1 	.word	0x080245c1
 8015d18:	0802348d 	.word	0x0802348d

08015d1c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8015d1c:	b580      	push	{r7, lr}
 8015d1e:	b084      	sub	sp, #16
 8015d20:	af00      	add	r7, sp, #0
 8015d22:	6078      	str	r0, [r7, #4]
 8015d24:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8015d26:	4819      	ldr	r0, [pc, #100]	; (8015d8c <tcpip_try_callback+0x70>)
 8015d28:	f00e fd85 	bl	8024836 <sys_mbox_valid>
 8015d2c:	4603      	mov	r3, r0
 8015d2e:	2b00      	cmp	r3, #0
 8015d30:	d106      	bne.n	8015d40 <tcpip_try_callback+0x24>
 8015d32:	4b17      	ldr	r3, [pc, #92]	; (8015d90 <tcpip_try_callback+0x74>)
 8015d34:	f240 125d 	movw	r2, #349	; 0x15d
 8015d38:	4916      	ldr	r1, [pc, #88]	; (8015d94 <tcpip_try_callback+0x78>)
 8015d3a:	4817      	ldr	r0, [pc, #92]	; (8015d98 <tcpip_try_callback+0x7c>)
 8015d3c:	f00f fd36 	bl	80257ac <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8015d40:	2008      	movs	r0, #8
 8015d42:	f002 fab9 	bl	80182b8 <memp_malloc>
 8015d46:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8015d48:	68fb      	ldr	r3, [r7, #12]
 8015d4a:	2b00      	cmp	r3, #0
 8015d4c:	d102      	bne.n	8015d54 <tcpip_try_callback+0x38>
    return ERR_MEM;
 8015d4e:	f04f 33ff 	mov.w	r3, #4294967295
 8015d52:	e017      	b.n	8015d84 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8015d54:	68fb      	ldr	r3, [r7, #12]
 8015d56:	2201      	movs	r2, #1
 8015d58:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8015d5a:	68fb      	ldr	r3, [r7, #12]
 8015d5c:	687a      	ldr	r2, [r7, #4]
 8015d5e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8015d60:	68fb      	ldr	r3, [r7, #12]
 8015d62:	683a      	ldr	r2, [r7, #0]
 8015d64:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8015d66:	68f9      	ldr	r1, [r7, #12]
 8015d68:	4808      	ldr	r0, [pc, #32]	; (8015d8c <tcpip_try_callback+0x70>)
 8015d6a:	f00e fd19 	bl	80247a0 <sys_mbox_trypost>
 8015d6e:	4603      	mov	r3, r0
 8015d70:	2b00      	cmp	r3, #0
 8015d72:	d006      	beq.n	8015d82 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8015d74:	68f9      	ldr	r1, [r7, #12]
 8015d76:	2008      	movs	r0, #8
 8015d78:	f002 faf0 	bl	801835c <memp_free>
    return ERR_MEM;
 8015d7c:	f04f 33ff 	mov.w	r3, #4294967295
 8015d80:	e000      	b.n	8015d84 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8015d82:	2300      	movs	r3, #0
}
 8015d84:	4618      	mov	r0, r3
 8015d86:	3710      	adds	r7, #16
 8015d88:	46bd      	mov	sp, r7
 8015d8a:	bd80      	pop	{r7, pc}
 8015d8c:	20013794 	.word	0x20013794
 8015d90:	0802ac14 	.word	0x0802ac14
 8015d94:	0802ac8c 	.word	0x0802ac8c
 8015d98:	0802ac64 	.word	0x0802ac64

08015d9c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8015d9c:	b580      	push	{r7, lr}
 8015d9e:	b084      	sub	sp, #16
 8015da0:	af02      	add	r7, sp, #8
 8015da2:	6078      	str	r0, [r7, #4]
 8015da4:	6039      	str	r1, [r7, #0]
  lwip_init();
 8015da6:	f001 fdd7 	bl	8017958 <lwip_init>

  tcpip_init_done = initfunc;
 8015daa:	4a17      	ldr	r2, [pc, #92]	; (8015e08 <tcpip_init+0x6c>)
 8015dac:	687b      	ldr	r3, [r7, #4]
 8015dae:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8015db0:	4a16      	ldr	r2, [pc, #88]	; (8015e0c <tcpip_init+0x70>)
 8015db2:	683b      	ldr	r3, [r7, #0]
 8015db4:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8015db6:	2106      	movs	r1, #6
 8015db8:	4815      	ldr	r0, [pc, #84]	; (8015e10 <tcpip_init+0x74>)
 8015dba:	f00e fcd7 	bl	802476c <sys_mbox_new>
 8015dbe:	4603      	mov	r3, r0
 8015dc0:	2b00      	cmp	r3, #0
 8015dc2:	d006      	beq.n	8015dd2 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8015dc4:	4b13      	ldr	r3, [pc, #76]	; (8015e14 <tcpip_init+0x78>)
 8015dc6:	f240 2261 	movw	r2, #609	; 0x261
 8015dca:	4913      	ldr	r1, [pc, #76]	; (8015e18 <tcpip_init+0x7c>)
 8015dcc:	4813      	ldr	r0, [pc, #76]	; (8015e1c <tcpip_init+0x80>)
 8015dce:	f00f fced 	bl	80257ac <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8015dd2:	4813      	ldr	r0, [pc, #76]	; (8015e20 <tcpip_init+0x84>)
 8015dd4:	f00e fd4c 	bl	8024870 <sys_mutex_new>
 8015dd8:	4603      	mov	r3, r0
 8015dda:	2b00      	cmp	r3, #0
 8015ddc:	d006      	beq.n	8015dec <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8015dde:	4b0d      	ldr	r3, [pc, #52]	; (8015e14 <tcpip_init+0x78>)
 8015de0:	f240 2265 	movw	r2, #613	; 0x265
 8015de4:	490f      	ldr	r1, [pc, #60]	; (8015e24 <tcpip_init+0x88>)
 8015de6:	480d      	ldr	r0, [pc, #52]	; (8015e1c <tcpip_init+0x80>)
 8015de8:	f00f fce0 	bl	80257ac <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8015dec:	2318      	movs	r3, #24
 8015dee:	9300      	str	r3, [sp, #0]
 8015df0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015df4:	2200      	movs	r2, #0
 8015df6:	490c      	ldr	r1, [pc, #48]	; (8015e28 <tcpip_init+0x8c>)
 8015df8:	480c      	ldr	r0, [pc, #48]	; (8015e2c <tcpip_init+0x90>)
 8015dfa:	f00e fd6b 	bl	80248d4 <sys_thread_new>
}
 8015dfe:	bf00      	nop
 8015e00:	3708      	adds	r7, #8
 8015e02:	46bd      	mov	sp, r7
 8015e04:	bd80      	pop	{r7, pc}
 8015e06:	bf00      	nop
 8015e08:	2001378c 	.word	0x2001378c
 8015e0c:	20013790 	.word	0x20013790
 8015e10:	20013794 	.word	0x20013794
 8015e14:	0802ac14 	.word	0x0802ac14
 8015e18:	0802ac9c 	.word	0x0802ac9c
 8015e1c:	0802ac64 	.word	0x0802ac64
 8015e20:	20017774 	.word	0x20017774
 8015e24:	0802acc0 	.word	0x0802acc0
 8015e28:	08015b59 	.word	0x08015b59
 8015e2c:	0802ace4 	.word	0x0802ace4

08015e30 <msg_generate_packet_id>:
 * @param client MQTT client
 * @return New packet identifier, range 1 to 65535
 */
static u16_t
msg_generate_packet_id(mqtt_client_t *client)
{
 8015e30:	b480      	push	{r7}
 8015e32:	b083      	sub	sp, #12
 8015e34:	af00      	add	r7, sp, #0
 8015e36:	6078      	str	r0, [r7, #4]
  client->pkt_id_seq++;
 8015e38:	687b      	ldr	r3, [r7, #4]
 8015e3a:	88db      	ldrh	r3, [r3, #6]
 8015e3c:	3301      	adds	r3, #1
 8015e3e:	b29a      	uxth	r2, r3
 8015e40:	687b      	ldr	r3, [r7, #4]
 8015e42:	80da      	strh	r2, [r3, #6]
  if (client->pkt_id_seq == 0) {
 8015e44:	687b      	ldr	r3, [r7, #4]
 8015e46:	88db      	ldrh	r3, [r3, #6]
 8015e48:	2b00      	cmp	r3, #0
 8015e4a:	d105      	bne.n	8015e58 <msg_generate_packet_id+0x28>
    client->pkt_id_seq++;
 8015e4c:	687b      	ldr	r3, [r7, #4]
 8015e4e:	88db      	ldrh	r3, [r3, #6]
 8015e50:	3301      	adds	r3, #1
 8015e52:	b29a      	uxth	r2, r3
 8015e54:	687b      	ldr	r3, [r7, #4]
 8015e56:	80da      	strh	r2, [r3, #6]
  }
  return client->pkt_id_seq;
 8015e58:	687b      	ldr	r3, [r7, #4]
 8015e5a:	88db      	ldrh	r3, [r3, #6]
}
 8015e5c:	4618      	mov	r0, r3
 8015e5e:	370c      	adds	r7, #12
 8015e60:	46bd      	mov	sp, r7
 8015e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e66:	4770      	bx	lr

08015e68 <mqtt_ringbuf_put>:
/* Output ring buffer */

/** Add single item to ring buffer */
static void
mqtt_ringbuf_put(struct mqtt_ringbuf_t *rb, u8_t item)
{
 8015e68:	b480      	push	{r7}
 8015e6a:	b083      	sub	sp, #12
 8015e6c:	af00      	add	r7, sp, #0
 8015e6e:	6078      	str	r0, [r7, #4]
 8015e70:	460b      	mov	r3, r1
 8015e72:	70fb      	strb	r3, [r7, #3]
  rb->buf[rb->put] = item;
 8015e74:	687b      	ldr	r3, [r7, #4]
 8015e76:	881b      	ldrh	r3, [r3, #0]
 8015e78:	461a      	mov	r2, r3
 8015e7a:	687b      	ldr	r3, [r7, #4]
 8015e7c:	4413      	add	r3, r2
 8015e7e:	78fa      	ldrb	r2, [r7, #3]
 8015e80:	711a      	strb	r2, [r3, #4]
  rb->put++;
 8015e82:	687b      	ldr	r3, [r7, #4]
 8015e84:	881b      	ldrh	r3, [r3, #0]
 8015e86:	3301      	adds	r3, #1
 8015e88:	b29a      	uxth	r2, r3
 8015e8a:	687b      	ldr	r3, [r7, #4]
 8015e8c:	801a      	strh	r2, [r3, #0]
  if (rb->put >= MQTT_OUTPUT_RINGBUF_SIZE) {
 8015e8e:	687b      	ldr	r3, [r7, #4]
 8015e90:	881b      	ldrh	r3, [r3, #0]
 8015e92:	2bff      	cmp	r3, #255	; 0xff
 8015e94:	d902      	bls.n	8015e9c <mqtt_ringbuf_put+0x34>
    rb->put = 0;
 8015e96:	687b      	ldr	r3, [r7, #4]
 8015e98:	2200      	movs	r2, #0
 8015e9a:	801a      	strh	r2, [r3, #0]
  }
}
 8015e9c:	bf00      	nop
 8015e9e:	370c      	adds	r7, #12
 8015ea0:	46bd      	mov	sp, r7
 8015ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ea6:	4770      	bx	lr

08015ea8 <mqtt_ringbuf_get_ptr>:

/** Return pointer to ring buffer get position */
static u8_t *
mqtt_ringbuf_get_ptr(struct mqtt_ringbuf_t *rb)
{
 8015ea8:	b480      	push	{r7}
 8015eaa:	b083      	sub	sp, #12
 8015eac:	af00      	add	r7, sp, #0
 8015eae:	6078      	str	r0, [r7, #4]
  return &rb->buf[rb->get];
 8015eb0:	687b      	ldr	r3, [r7, #4]
 8015eb2:	885b      	ldrh	r3, [r3, #2]
 8015eb4:	461a      	mov	r2, r3
 8015eb6:	687b      	ldr	r3, [r7, #4]
 8015eb8:	4413      	add	r3, r2
 8015eba:	3304      	adds	r3, #4
}
 8015ebc:	4618      	mov	r0, r3
 8015ebe:	370c      	adds	r7, #12
 8015ec0:	46bd      	mov	sp, r7
 8015ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ec6:	4770      	bx	lr

08015ec8 <mqtt_ringbuf_advance_get_idx>:

static void
mqtt_ringbuf_advance_get_idx(struct mqtt_ringbuf_t *rb, u16_t len)
{
 8015ec8:	b580      	push	{r7, lr}
 8015eca:	b082      	sub	sp, #8
 8015ecc:	af00      	add	r7, sp, #0
 8015ece:	6078      	str	r0, [r7, #4]
 8015ed0:	460b      	mov	r3, r1
 8015ed2:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("mqtt_ringbuf_advance_get_idx: len < MQTT_OUTPUT_RINGBUF_SIZE", len < MQTT_OUTPUT_RINGBUF_SIZE);
 8015ed4:	887b      	ldrh	r3, [r7, #2]
 8015ed6:	2bff      	cmp	r3, #255	; 0xff
 8015ed8:	d905      	bls.n	8015ee6 <mqtt_ringbuf_advance_get_idx+0x1e>
 8015eda:	4b0e      	ldr	r3, [pc, #56]	; (8015f14 <mqtt_ringbuf_advance_get_idx+0x4c>)
 8015edc:	22cb      	movs	r2, #203	; 0xcb
 8015ede:	490e      	ldr	r1, [pc, #56]	; (8015f18 <mqtt_ringbuf_advance_get_idx+0x50>)
 8015ee0:	480e      	ldr	r0, [pc, #56]	; (8015f1c <mqtt_ringbuf_advance_get_idx+0x54>)
 8015ee2:	f00f fc63 	bl	80257ac <iprintf>

  rb->get += len;
 8015ee6:	687b      	ldr	r3, [r7, #4]
 8015ee8:	885a      	ldrh	r2, [r3, #2]
 8015eea:	887b      	ldrh	r3, [r7, #2]
 8015eec:	4413      	add	r3, r2
 8015eee:	b29a      	uxth	r2, r3
 8015ef0:	687b      	ldr	r3, [r7, #4]
 8015ef2:	805a      	strh	r2, [r3, #2]
  if (rb->get >= MQTT_OUTPUT_RINGBUF_SIZE) {
 8015ef4:	687b      	ldr	r3, [r7, #4]
 8015ef6:	885b      	ldrh	r3, [r3, #2]
 8015ef8:	2bff      	cmp	r3, #255	; 0xff
 8015efa:	d906      	bls.n	8015f0a <mqtt_ringbuf_advance_get_idx+0x42>
    rb->get = rb->get - MQTT_OUTPUT_RINGBUF_SIZE;
 8015efc:	687b      	ldr	r3, [r7, #4]
 8015efe:	885b      	ldrh	r3, [r3, #2]
 8015f00:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8015f04:	b29a      	uxth	r2, r3
 8015f06:	687b      	ldr	r3, [r7, #4]
 8015f08:	805a      	strh	r2, [r3, #2]
  }
}
 8015f0a:	bf00      	nop
 8015f0c:	3708      	adds	r7, #8
 8015f0e:	46bd      	mov	sp, r7
 8015f10:	bd80      	pop	{r7, pc}
 8015f12:	bf00      	nop
 8015f14:	0802acf4 	.word	0x0802acf4
 8015f18:	0802ad2c 	.word	0x0802ad2c
 8015f1c:	0802ad6c 	.word	0x0802ad6c

08015f20 <mqtt_ringbuf_len>:

/** Return number of bytes in ring buffer */
static u16_t
mqtt_ringbuf_len(struct mqtt_ringbuf_t *rb)
{
 8015f20:	b480      	push	{r7}
 8015f22:	b085      	sub	sp, #20
 8015f24:	af00      	add	r7, sp, #0
 8015f26:	6078      	str	r0, [r7, #4]
  u32_t len = rb->put - rb->get;
 8015f28:	687b      	ldr	r3, [r7, #4]
 8015f2a:	881b      	ldrh	r3, [r3, #0]
 8015f2c:	461a      	mov	r2, r3
 8015f2e:	687b      	ldr	r3, [r7, #4]
 8015f30:	885b      	ldrh	r3, [r3, #2]
 8015f32:	1ad3      	subs	r3, r2, r3
 8015f34:	60fb      	str	r3, [r7, #12]
  if (len > 0xFFFF) {
 8015f36:	68fb      	ldr	r3, [r7, #12]
 8015f38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015f3c:	d303      	bcc.n	8015f46 <mqtt_ringbuf_len+0x26>
    len += MQTT_OUTPUT_RINGBUF_SIZE;
 8015f3e:	68fb      	ldr	r3, [r7, #12]
 8015f40:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8015f44:	60fb      	str	r3, [r7, #12]
  }
  return (u16_t)len;
 8015f46:	68fb      	ldr	r3, [r7, #12]
 8015f48:	b29b      	uxth	r3, r3
}
 8015f4a:	4618      	mov	r0, r3
 8015f4c:	3714      	adds	r7, #20
 8015f4e:	46bd      	mov	sp, r7
 8015f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f54:	4770      	bx	lr
	...

08015f58 <mqtt_output_send>:
 * @param rb Output ring buffer
 * @param tpcb TCP connection handle
 */
static void
mqtt_output_send(struct mqtt_ringbuf_t *rb, struct altcp_pcb *tpcb)
{
 8015f58:	b590      	push	{r4, r7, lr}
 8015f5a:	b085      	sub	sp, #20
 8015f5c:	af00      	add	r7, sp, #0
 8015f5e:	6078      	str	r0, [r7, #4]
 8015f60:	6039      	str	r1, [r7, #0]
  err_t err;
  u8_t wrap = 0;
 8015f62:	2300      	movs	r3, #0
 8015f64:	73bb      	strb	r3, [r7, #14]
  u16_t ringbuf_lin_len = mqtt_ringbuf_linear_read_length(rb);
 8015f66:	6878      	ldr	r0, [r7, #4]
 8015f68:	f7ff ffda 	bl	8015f20 <mqtt_ringbuf_len>
 8015f6c:	4603      	mov	r3, r0
 8015f6e:	461a      	mov	r2, r3
 8015f70:	687b      	ldr	r3, [r7, #4]
 8015f72:	885b      	ldrh	r3, [r3, #2]
 8015f74:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8015f78:	429a      	cmp	r2, r3
 8015f7a:	da04      	bge.n	8015f86 <mqtt_output_send+0x2e>
 8015f7c:	6878      	ldr	r0, [r7, #4]
 8015f7e:	f7ff ffcf 	bl	8015f20 <mqtt_ringbuf_len>
 8015f82:	4603      	mov	r3, r0
 8015f84:	e004      	b.n	8015f90 <mqtt_output_send+0x38>
 8015f86:	687b      	ldr	r3, [r7, #4]
 8015f88:	885b      	ldrh	r3, [r3, #2]
 8015f8a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8015f8e:	b29b      	uxth	r3, r3
 8015f90:	817b      	strh	r3, [r7, #10]
  u16_t send_len = altcp_sndbuf(tpcb);
 8015f92:	683b      	ldr	r3, [r7, #0]
 8015f94:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8015f98:	81bb      	strh	r3, [r7, #12]
  LWIP_ASSERT("mqtt_output_send: tpcb != NULL", tpcb != NULL);
 8015f9a:	683b      	ldr	r3, [r7, #0]
 8015f9c:	2b00      	cmp	r3, #0
 8015f9e:	d105      	bne.n	8015fac <mqtt_output_send+0x54>
 8015fa0:	4b44      	ldr	r3, [pc, #272]	; (80160b4 <mqtt_output_send+0x15c>)
 8015fa2:	22f0      	movs	r2, #240	; 0xf0
 8015fa4:	4944      	ldr	r1, [pc, #272]	; (80160b8 <mqtt_output_send+0x160>)
 8015fa6:	4845      	ldr	r0, [pc, #276]	; (80160bc <mqtt_output_send+0x164>)
 8015fa8:	f00f fc00 	bl	80257ac <iprintf>

  if (send_len == 0 || ringbuf_lin_len == 0) {
 8015fac:	89bb      	ldrh	r3, [r7, #12]
 8015fae:	2b00      	cmp	r3, #0
 8015fb0:	d07c      	beq.n	80160ac <mqtt_output_send+0x154>
 8015fb2:	897b      	ldrh	r3, [r7, #10]
 8015fb4:	2b00      	cmp	r3, #0
 8015fb6:	d079      	beq.n	80160ac <mqtt_output_send+0x154>
  }

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_output_send: tcp_sndbuf: %d bytes, ringbuf_linear_available: %d, get %d, put %d\n",
                                 send_len, ringbuf_lin_len, rb->get, rb->put));

  if (send_len > ringbuf_lin_len) {
 8015fb8:	89ba      	ldrh	r2, [r7, #12]
 8015fba:	897b      	ldrh	r3, [r7, #10]
 8015fbc:	429a      	cmp	r2, r3
 8015fbe:	d90d      	bls.n	8015fdc <mqtt_output_send+0x84>
    /* Space in TCP output buffer is larger than available in ring buffer linear portion */
    send_len = ringbuf_lin_len;
 8015fc0:	897b      	ldrh	r3, [r7, #10]
 8015fc2:	81bb      	strh	r3, [r7, #12]
    /* Wrap around if more data in ring buffer after linear portion */
    wrap = (mqtt_ringbuf_len(rb) > ringbuf_lin_len);
 8015fc4:	6878      	ldr	r0, [r7, #4]
 8015fc6:	f7ff ffab 	bl	8015f20 <mqtt_ringbuf_len>
 8015fca:	4603      	mov	r3, r0
 8015fcc:	461a      	mov	r2, r3
 8015fce:	897b      	ldrh	r3, [r7, #10]
 8015fd0:	4293      	cmp	r3, r2
 8015fd2:	bf34      	ite	cc
 8015fd4:	2301      	movcc	r3, #1
 8015fd6:	2300      	movcs	r3, #0
 8015fd8:	b2db      	uxtb	r3, r3
 8015fda:	73bb      	strb	r3, [r7, #14]
  }
  err = altcp_write(tpcb, mqtt_ringbuf_get_ptr(rb), send_len, TCP_WRITE_FLAG_COPY | (wrap ? TCP_WRITE_FLAG_MORE : 0));
 8015fdc:	6878      	ldr	r0, [r7, #4]
 8015fde:	f7ff ff63 	bl	8015ea8 <mqtt_ringbuf_get_ptr>
 8015fe2:	4601      	mov	r1, r0
 8015fe4:	7bbb      	ldrb	r3, [r7, #14]
 8015fe6:	2b00      	cmp	r3, #0
 8015fe8:	d001      	beq.n	8015fee <mqtt_output_send+0x96>
 8015fea:	2303      	movs	r3, #3
 8015fec:	e000      	b.n	8015ff0 <mqtt_output_send+0x98>
 8015fee:	2301      	movs	r3, #1
 8015ff0:	89ba      	ldrh	r2, [r7, #12]
 8015ff2:	6838      	ldr	r0, [r7, #0]
 8015ff4:	f007 fe70 	bl	801dcd8 <tcp_write>
 8015ff8:	4603      	mov	r3, r0
 8015ffa:	73fb      	strb	r3, [r7, #15]
  if ((err == ERR_OK) && wrap) {
 8015ffc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016000:	2b00      	cmp	r3, #0
 8016002:	d146      	bne.n	8016092 <mqtt_output_send+0x13a>
 8016004:	7bbb      	ldrb	r3, [r7, #14]
 8016006:	2b00      	cmp	r3, #0
 8016008:	d043      	beq.n	8016092 <mqtt_output_send+0x13a>
    mqtt_ringbuf_advance_get_idx(rb, send_len);
 801600a:	89bb      	ldrh	r3, [r7, #12]
 801600c:	4619      	mov	r1, r3
 801600e:	6878      	ldr	r0, [r7, #4]
 8016010:	f7ff ff5a 	bl	8015ec8 <mqtt_ringbuf_advance_get_idx>
    /* Use the lesser one of ring buffer linear length and TCP send buffer size */
    send_len = LWIP_MIN(altcp_sndbuf(tpcb), mqtt_ringbuf_linear_read_length(rb));
 8016014:	683b      	ldr	r3, [r7, #0]
 8016016:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801601a:	461c      	mov	r4, r3
 801601c:	6878      	ldr	r0, [r7, #4]
 801601e:	f7ff ff7f 	bl	8015f20 <mqtt_ringbuf_len>
 8016022:	4603      	mov	r3, r0
 8016024:	461a      	mov	r2, r3
 8016026:	687b      	ldr	r3, [r7, #4]
 8016028:	885b      	ldrh	r3, [r3, #2]
 801602a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 801602e:	429a      	cmp	r2, r3
 8016030:	da04      	bge.n	801603c <mqtt_output_send+0xe4>
 8016032:	6878      	ldr	r0, [r7, #4]
 8016034:	f7ff ff74 	bl	8015f20 <mqtt_ringbuf_len>
 8016038:	4603      	mov	r3, r0
 801603a:	e003      	b.n	8016044 <mqtt_output_send+0xec>
 801603c:	687b      	ldr	r3, [r7, #4]
 801603e:	885b      	ldrh	r3, [r3, #2]
 8016040:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8016044:	42a3      	cmp	r3, r4
 8016046:	dd03      	ble.n	8016050 <mqtt_output_send+0xf8>
 8016048:	683b      	ldr	r3, [r7, #0]
 801604a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801604e:	e014      	b.n	801607a <mqtt_output_send+0x122>
 8016050:	6878      	ldr	r0, [r7, #4]
 8016052:	f7ff ff65 	bl	8015f20 <mqtt_ringbuf_len>
 8016056:	4603      	mov	r3, r0
 8016058:	461a      	mov	r2, r3
 801605a:	687b      	ldr	r3, [r7, #4]
 801605c:	885b      	ldrh	r3, [r3, #2]
 801605e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8016062:	429a      	cmp	r2, r3
 8016064:	da04      	bge.n	8016070 <mqtt_output_send+0x118>
 8016066:	6878      	ldr	r0, [r7, #4]
 8016068:	f7ff ff5a 	bl	8015f20 <mqtt_ringbuf_len>
 801606c:	4603      	mov	r3, r0
 801606e:	e004      	b.n	801607a <mqtt_output_send+0x122>
 8016070:	687b      	ldr	r3, [r7, #4]
 8016072:	885b      	ldrh	r3, [r3, #2]
 8016074:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8016078:	b29b      	uxth	r3, r3
 801607a:	81bb      	strh	r3, [r7, #12]
    err = altcp_write(tpcb, mqtt_ringbuf_get_ptr(rb), send_len, TCP_WRITE_FLAG_COPY);
 801607c:	6878      	ldr	r0, [r7, #4]
 801607e:	f7ff ff13 	bl	8015ea8 <mqtt_ringbuf_get_ptr>
 8016082:	4601      	mov	r1, r0
 8016084:	89ba      	ldrh	r2, [r7, #12]
 8016086:	2301      	movs	r3, #1
 8016088:	6838      	ldr	r0, [r7, #0]
 801608a:	f007 fe25 	bl	801dcd8 <tcp_write>
 801608e:	4603      	mov	r3, r0
 8016090:	73fb      	strb	r3, [r7, #15]
  }

  if (err == ERR_OK) {
 8016092:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016096:	2b00      	cmp	r3, #0
 8016098:	d109      	bne.n	80160ae <mqtt_output_send+0x156>
    mqtt_ringbuf_advance_get_idx(rb, send_len);
 801609a:	89bb      	ldrh	r3, [r7, #12]
 801609c:	4619      	mov	r1, r3
 801609e:	6878      	ldr	r0, [r7, #4]
 80160a0:	f7ff ff12 	bl	8015ec8 <mqtt_ringbuf_advance_get_idx>
    /* Flush */
    altcp_output(tpcb);
 80160a4:	6838      	ldr	r0, [r7, #0]
 80160a6:	f008 fc01 	bl	801e8ac <tcp_output>
 80160aa:	e000      	b.n	80160ae <mqtt_output_send+0x156>
    return;
 80160ac:	bf00      	nop
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_output_send: Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
  }
}
 80160ae:	3714      	adds	r7, #20
 80160b0:	46bd      	mov	sp, r7
 80160b2:	bd90      	pop	{r4, r7, pc}
 80160b4:	0802acf4 	.word	0x0802acf4
 80160b8:	0802ad94 	.word	0x0802ad94
 80160bc:	0802ad6c 	.word	0x0802ad6c

080160c0 <mqtt_create_request>:
 * @param arg Parameter following callback
 * @return Request or NULL if failed to create
 */
static struct mqtt_request_t *
mqtt_create_request(struct mqtt_request_t *r_objs, size_t r_objs_len, u16_t pkt_id, mqtt_request_cb_t cb, void *arg)
{
 80160c0:	b580      	push	{r7, lr}
 80160c2:	b086      	sub	sp, #24
 80160c4:	af00      	add	r7, sp, #0
 80160c6:	60f8      	str	r0, [r7, #12]
 80160c8:	60b9      	str	r1, [r7, #8]
 80160ca:	603b      	str	r3, [r7, #0]
 80160cc:	4613      	mov	r3, r2
 80160ce:	80fb      	strh	r3, [r7, #6]
  struct mqtt_request_t *r = NULL;
 80160d0:	2300      	movs	r3, #0
 80160d2:	617b      	str	r3, [r7, #20]
  u8_t n;
  LWIP_ASSERT("mqtt_create_request: r_objs != NULL", r_objs != NULL);
 80160d4:	68fb      	ldr	r3, [r7, #12]
 80160d6:	2b00      	cmp	r3, #0
 80160d8:	d106      	bne.n	80160e8 <mqtt_create_request+0x28>
 80160da:	4b19      	ldr	r3, [pc, #100]	; (8016140 <mqtt_create_request+0x80>)
 80160dc:	f240 1223 	movw	r2, #291	; 0x123
 80160e0:	4918      	ldr	r1, [pc, #96]	; (8016144 <mqtt_create_request+0x84>)
 80160e2:	4819      	ldr	r0, [pc, #100]	; (8016148 <mqtt_create_request+0x88>)
 80160e4:	f00f fb62 	bl	80257ac <iprintf>
  for (n = 0; n < r_objs_len; n++) {
 80160e8:	2300      	movs	r3, #0
 80160ea:	74fb      	strb	r3, [r7, #19]
 80160ec:	e01f      	b.n	801612e <mqtt_create_request+0x6e>
    /* Item point to itself if not in use */
    if (r_objs[n].next == &r_objs[n]) {
 80160ee:	7cfb      	ldrb	r3, [r7, #19]
 80160f0:	011b      	lsls	r3, r3, #4
 80160f2:	68fa      	ldr	r2, [r7, #12]
 80160f4:	4413      	add	r3, r2
 80160f6:	681a      	ldr	r2, [r3, #0]
 80160f8:	7cfb      	ldrb	r3, [r7, #19]
 80160fa:	011b      	lsls	r3, r3, #4
 80160fc:	68f9      	ldr	r1, [r7, #12]
 80160fe:	440b      	add	r3, r1
 8016100:	429a      	cmp	r2, r3
 8016102:	d111      	bne.n	8016128 <mqtt_create_request+0x68>
      r = &r_objs[n];
 8016104:	7cfb      	ldrb	r3, [r7, #19]
 8016106:	011b      	lsls	r3, r3, #4
 8016108:	68fa      	ldr	r2, [r7, #12]
 801610a:	4413      	add	r3, r2
 801610c:	617b      	str	r3, [r7, #20]
      r->next = NULL;
 801610e:	697b      	ldr	r3, [r7, #20]
 8016110:	2200      	movs	r2, #0
 8016112:	601a      	str	r2, [r3, #0]
      r->cb = cb;
 8016114:	697b      	ldr	r3, [r7, #20]
 8016116:	683a      	ldr	r2, [r7, #0]
 8016118:	605a      	str	r2, [r3, #4]
      r->arg = arg;
 801611a:	697b      	ldr	r3, [r7, #20]
 801611c:	6a3a      	ldr	r2, [r7, #32]
 801611e:	609a      	str	r2, [r3, #8]
      r->pkt_id = pkt_id;
 8016120:	697b      	ldr	r3, [r7, #20]
 8016122:	88fa      	ldrh	r2, [r7, #6]
 8016124:	819a      	strh	r2, [r3, #12]
      break;
 8016126:	e006      	b.n	8016136 <mqtt_create_request+0x76>
  for (n = 0; n < r_objs_len; n++) {
 8016128:	7cfb      	ldrb	r3, [r7, #19]
 801612a:	3301      	adds	r3, #1
 801612c:	74fb      	strb	r3, [r7, #19]
 801612e:	7cfb      	ldrb	r3, [r7, #19]
 8016130:	68ba      	ldr	r2, [r7, #8]
 8016132:	429a      	cmp	r2, r3
 8016134:	d8db      	bhi.n	80160ee <mqtt_create_request+0x2e>
    }
  }
  return r;
 8016136:	697b      	ldr	r3, [r7, #20]
}
 8016138:	4618      	mov	r0, r3
 801613a:	3718      	adds	r7, #24
 801613c:	46bd      	mov	sp, r7
 801613e:	bd80      	pop	{r7, pc}
 8016140:	0802acf4 	.word	0x0802acf4
 8016144:	0802adb4 	.word	0x0802adb4
 8016148:	0802ad6c 	.word	0x0802ad6c

0801614c <mqtt_append_request>:
 * @param tail Pointer to request queue tail pointer
 * @param r Request to append
 */
static void
mqtt_append_request(struct mqtt_request_t **tail, struct mqtt_request_t *r)
{
 801614c:	b580      	push	{r7, lr}
 801614e:	b086      	sub	sp, #24
 8016150:	af00      	add	r7, sp, #0
 8016152:	6078      	str	r0, [r7, #4]
 8016154:	6039      	str	r1, [r7, #0]
  struct mqtt_request_t *head = NULL;
 8016156:	2300      	movs	r3, #0
 8016158:	617b      	str	r3, [r7, #20]
  s16_t time_before = 0;
 801615a:	2300      	movs	r3, #0
 801615c:	827b      	strh	r3, [r7, #18]
  struct mqtt_request_t *iter;

  LWIP_ASSERT("mqtt_append_request: tail != NULL", tail != NULL);
 801615e:	687b      	ldr	r3, [r7, #4]
 8016160:	2b00      	cmp	r3, #0
 8016162:	d106      	bne.n	8016172 <mqtt_append_request+0x26>
 8016164:	4b1b      	ldr	r3, [pc, #108]	; (80161d4 <mqtt_append_request+0x88>)
 8016166:	f240 123f 	movw	r2, #319	; 0x13f
 801616a:	491b      	ldr	r1, [pc, #108]	; (80161d8 <mqtt_append_request+0x8c>)
 801616c:	481b      	ldr	r0, [pc, #108]	; (80161dc <mqtt_append_request+0x90>)
 801616e:	f00f fb1d 	bl	80257ac <iprintf>

  /* Iterate trough queue to find head, and count total timeout time */
  for (iter = *tail; iter != NULL; iter = iter->next) {
 8016172:	687b      	ldr	r3, [r7, #4]
 8016174:	681b      	ldr	r3, [r3, #0]
 8016176:	60fb      	str	r3, [r7, #12]
 8016178:	e00a      	b.n	8016190 <mqtt_append_request+0x44>
    time_before += iter->timeout_diff;
 801617a:	68fb      	ldr	r3, [r7, #12]
 801617c:	89da      	ldrh	r2, [r3, #14]
 801617e:	8a7b      	ldrh	r3, [r7, #18]
 8016180:	4413      	add	r3, r2
 8016182:	b29b      	uxth	r3, r3
 8016184:	827b      	strh	r3, [r7, #18]
    head = iter;
 8016186:	68fb      	ldr	r3, [r7, #12]
 8016188:	617b      	str	r3, [r7, #20]
  for (iter = *tail; iter != NULL; iter = iter->next) {
 801618a:	68fb      	ldr	r3, [r7, #12]
 801618c:	681b      	ldr	r3, [r3, #0]
 801618e:	60fb      	str	r3, [r7, #12]
 8016190:	68fb      	ldr	r3, [r7, #12]
 8016192:	2b00      	cmp	r3, #0
 8016194:	d1f1      	bne.n	801617a <mqtt_append_request+0x2e>
  }

  LWIP_ASSERT("mqtt_append_request: time_before <= MQTT_REQ_TIMEOUT", time_before <= MQTT_REQ_TIMEOUT);
 8016196:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801619a:	2b1e      	cmp	r3, #30
 801619c:	dd06      	ble.n	80161ac <mqtt_append_request+0x60>
 801619e:	4b0d      	ldr	r3, [pc, #52]	; (80161d4 <mqtt_append_request+0x88>)
 80161a0:	f240 1247 	movw	r2, #327	; 0x147
 80161a4:	490e      	ldr	r1, [pc, #56]	; (80161e0 <mqtt_append_request+0x94>)
 80161a6:	480d      	ldr	r0, [pc, #52]	; (80161dc <mqtt_append_request+0x90>)
 80161a8:	f00f fb00 	bl	80257ac <iprintf>
  r->timeout_diff = MQTT_REQ_TIMEOUT - time_before;
 80161ac:	8a7b      	ldrh	r3, [r7, #18]
 80161ae:	f1c3 031e 	rsb	r3, r3, #30
 80161b2:	b29a      	uxth	r2, r3
 80161b4:	683b      	ldr	r3, [r7, #0]
 80161b6:	81da      	strh	r2, [r3, #14]
  if (head == NULL) {
 80161b8:	697b      	ldr	r3, [r7, #20]
 80161ba:	2b00      	cmp	r3, #0
 80161bc:	d103      	bne.n	80161c6 <mqtt_append_request+0x7a>
    *tail = r;
 80161be:	687b      	ldr	r3, [r7, #4]
 80161c0:	683a      	ldr	r2, [r7, #0]
 80161c2:	601a      	str	r2, [r3, #0]
  } else {
    head->next = r;
  }
}
 80161c4:	e002      	b.n	80161cc <mqtt_append_request+0x80>
    head->next = r;
 80161c6:	697b      	ldr	r3, [r7, #20]
 80161c8:	683a      	ldr	r2, [r7, #0]
 80161ca:	601a      	str	r2, [r3, #0]
}
 80161cc:	bf00      	nop
 80161ce:	3718      	adds	r7, #24
 80161d0:	46bd      	mov	sp, r7
 80161d2:	bd80      	pop	{r7, pc}
 80161d4:	0802acf4 	.word	0x0802acf4
 80161d8:	0802add8 	.word	0x0802add8
 80161dc:	0802ad6c 	.word	0x0802ad6c
 80161e0:	0802adfc 	.word	0x0802adfc

080161e4 <mqtt_delete_request>:
 * Delete request item
 * @param r Request item to delete
 */
static void
mqtt_delete_request(struct mqtt_request_t *r)
{
 80161e4:	b480      	push	{r7}
 80161e6:	b083      	sub	sp, #12
 80161e8:	af00      	add	r7, sp, #0
 80161ea:	6078      	str	r0, [r7, #4]
  if (r != NULL) {
 80161ec:	687b      	ldr	r3, [r7, #4]
 80161ee:	2b00      	cmp	r3, #0
 80161f0:	d002      	beq.n	80161f8 <mqtt_delete_request+0x14>
    r->next = r;
 80161f2:	687b      	ldr	r3, [r7, #4]
 80161f4:	687a      	ldr	r2, [r7, #4]
 80161f6:	601a      	str	r2, [r3, #0]
  }
}
 80161f8:	bf00      	nop
 80161fa:	370c      	adds	r7, #12
 80161fc:	46bd      	mov	sp, r7
 80161fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016202:	4770      	bx	lr

08016204 <mqtt_take_request>:
 * @param pkt_id Packet identifier of request to take
 * @return Request item if found, NULL if not
 */
static struct mqtt_request_t *
mqtt_take_request(struct mqtt_request_t **tail, u16_t pkt_id)
{
 8016204:	b580      	push	{r7, lr}
 8016206:	b084      	sub	sp, #16
 8016208:	af00      	add	r7, sp, #0
 801620a:	6078      	str	r0, [r7, #4]
 801620c:	460b      	mov	r3, r1
 801620e:	807b      	strh	r3, [r7, #2]
  struct mqtt_request_t *iter = NULL, *prev = NULL;
 8016210:	2300      	movs	r3, #0
 8016212:	60fb      	str	r3, [r7, #12]
 8016214:	2300      	movs	r3, #0
 8016216:	60bb      	str	r3, [r7, #8]
  LWIP_ASSERT("mqtt_take_request: tail != NULL", tail != NULL);
 8016218:	687b      	ldr	r3, [r7, #4]
 801621a:	2b00      	cmp	r3, #0
 801621c:	d106      	bne.n	801622c <mqtt_take_request+0x28>
 801621e:	4b1f      	ldr	r3, [pc, #124]	; (801629c <mqtt_take_request+0x98>)
 8016220:	f240 1267 	movw	r2, #359	; 0x167
 8016224:	491e      	ldr	r1, [pc, #120]	; (80162a0 <mqtt_take_request+0x9c>)
 8016226:	481f      	ldr	r0, [pc, #124]	; (80162a4 <mqtt_take_request+0xa0>)
 8016228:	f00f fac0 	bl	80257ac <iprintf>
  /* Search all request for pkt_id */
  for (iter = *tail; iter != NULL; iter = iter->next) {
 801622c:	687b      	ldr	r3, [r7, #4]
 801622e:	681b      	ldr	r3, [r3, #0]
 8016230:	60fb      	str	r3, [r7, #12]
 8016232:	e009      	b.n	8016248 <mqtt_take_request+0x44>
    if (iter->pkt_id == pkt_id) {
 8016234:	68fb      	ldr	r3, [r7, #12]
 8016236:	899b      	ldrh	r3, [r3, #12]
 8016238:	887a      	ldrh	r2, [r7, #2]
 801623a:	429a      	cmp	r2, r3
 801623c:	d008      	beq.n	8016250 <mqtt_take_request+0x4c>
      break;
    }
    prev = iter;
 801623e:	68fb      	ldr	r3, [r7, #12]
 8016240:	60bb      	str	r3, [r7, #8]
  for (iter = *tail; iter != NULL; iter = iter->next) {
 8016242:	68fb      	ldr	r3, [r7, #12]
 8016244:	681b      	ldr	r3, [r3, #0]
 8016246:	60fb      	str	r3, [r7, #12]
 8016248:	68fb      	ldr	r3, [r7, #12]
 801624a:	2b00      	cmp	r3, #0
 801624c:	d1f2      	bne.n	8016234 <mqtt_take_request+0x30>
 801624e:	e000      	b.n	8016252 <mqtt_take_request+0x4e>
      break;
 8016250:	bf00      	nop
  }

  /* If request was found */
  if (iter != NULL) {
 8016252:	68fb      	ldr	r3, [r7, #12]
 8016254:	2b00      	cmp	r3, #0
 8016256:	d01c      	beq.n	8016292 <mqtt_take_request+0x8e>
    /* unchain */
    if (prev == NULL) {
 8016258:	68bb      	ldr	r3, [r7, #8]
 801625a:	2b00      	cmp	r3, #0
 801625c:	d104      	bne.n	8016268 <mqtt_take_request+0x64>
      *tail = iter->next;
 801625e:	68fb      	ldr	r3, [r7, #12]
 8016260:	681a      	ldr	r2, [r3, #0]
 8016262:	687b      	ldr	r3, [r7, #4]
 8016264:	601a      	str	r2, [r3, #0]
 8016266:	e003      	b.n	8016270 <mqtt_take_request+0x6c>
    } else {
      prev->next = iter->next;
 8016268:	68fb      	ldr	r3, [r7, #12]
 801626a:	681a      	ldr	r2, [r3, #0]
 801626c:	68bb      	ldr	r3, [r7, #8]
 801626e:	601a      	str	r2, [r3, #0]
    }
    /* If exists, add remaining timeout time for the request to next */
    if (iter->next != NULL) {
 8016270:	68fb      	ldr	r3, [r7, #12]
 8016272:	681b      	ldr	r3, [r3, #0]
 8016274:	2b00      	cmp	r3, #0
 8016276:	d009      	beq.n	801628c <mqtt_take_request+0x88>
      iter->next->timeout_diff += iter->timeout_diff;
 8016278:	68fb      	ldr	r3, [r7, #12]
 801627a:	681b      	ldr	r3, [r3, #0]
 801627c:	89d9      	ldrh	r1, [r3, #14]
 801627e:	68fb      	ldr	r3, [r7, #12]
 8016280:	89da      	ldrh	r2, [r3, #14]
 8016282:	68fb      	ldr	r3, [r7, #12]
 8016284:	681b      	ldr	r3, [r3, #0]
 8016286:	440a      	add	r2, r1
 8016288:	b292      	uxth	r2, r2
 801628a:	81da      	strh	r2, [r3, #14]
    }
    iter->next = NULL;
 801628c:	68fb      	ldr	r3, [r7, #12]
 801628e:	2200      	movs	r2, #0
 8016290:	601a      	str	r2, [r3, #0]
  }
  return iter;
 8016292:	68fb      	ldr	r3, [r7, #12]
}
 8016294:	4618      	mov	r0, r3
 8016296:	3710      	adds	r7, #16
 8016298:	46bd      	mov	sp, r7
 801629a:	bd80      	pop	{r7, pc}
 801629c:	0802acf4 	.word	0x0802acf4
 80162a0:	0802ae34 	.word	0x0802ae34
 80162a4:	0802ad6c 	.word	0x0802ad6c

080162a8 <mqtt_request_time_elapsed>:
 * @param tail Pointer to request queue tail pointer
 * @param t Time since last call in seconds
 */
static void
mqtt_request_time_elapsed(struct mqtt_request_t **tail, u8_t t)
{
 80162a8:	b580      	push	{r7, lr}
 80162aa:	b084      	sub	sp, #16
 80162ac:	af00      	add	r7, sp, #0
 80162ae:	6078      	str	r0, [r7, #4]
 80162b0:	460b      	mov	r3, r1
 80162b2:	70fb      	strb	r3, [r7, #3]
  struct mqtt_request_t *r;
  LWIP_ASSERT("mqtt_request_time_elapsed: tail != NULL", tail != NULL);
 80162b4:	687b      	ldr	r3, [r7, #4]
 80162b6:	2b00      	cmp	r3, #0
 80162b8:	d106      	bne.n	80162c8 <mqtt_request_time_elapsed+0x20>
 80162ba:	4b21      	ldr	r3, [pc, #132]	; (8016340 <mqtt_request_time_elapsed+0x98>)
 80162bc:	f44f 72c5 	mov.w	r2, #394	; 0x18a
 80162c0:	4920      	ldr	r1, [pc, #128]	; (8016344 <mqtt_request_time_elapsed+0x9c>)
 80162c2:	4821      	ldr	r0, [pc, #132]	; (8016348 <mqtt_request_time_elapsed+0xa0>)
 80162c4:	f00f fa72 	bl	80257ac <iprintf>
  r = *tail;
 80162c8:	687b      	ldr	r3, [r7, #4]
 80162ca:	681b      	ldr	r3, [r3, #0]
 80162cc:	60fb      	str	r3, [r7, #12]
  while (t > 0 && r != NULL) {
 80162ce:	e02c      	b.n	801632a <mqtt_request_time_elapsed+0x82>
    if (t >= r->timeout_diff) {
 80162d0:	78fb      	ldrb	r3, [r7, #3]
 80162d2:	b29a      	uxth	r2, r3
 80162d4:	68fb      	ldr	r3, [r7, #12]
 80162d6:	89db      	ldrh	r3, [r3, #14]
 80162d8:	429a      	cmp	r2, r3
 80162da:	d31c      	bcc.n	8016316 <mqtt_request_time_elapsed+0x6e>
      t -= (u8_t)r->timeout_diff;
 80162dc:	68fb      	ldr	r3, [r7, #12]
 80162de:	89db      	ldrh	r3, [r3, #14]
 80162e0:	b2db      	uxtb	r3, r3
 80162e2:	78fa      	ldrb	r2, [r7, #3]
 80162e4:	1ad3      	subs	r3, r2, r3
 80162e6:	70fb      	strb	r3, [r7, #3]
      /* Unchain */
      *tail = r->next;
 80162e8:	68fb      	ldr	r3, [r7, #12]
 80162ea:	681a      	ldr	r2, [r3, #0]
 80162ec:	687b      	ldr	r3, [r7, #4]
 80162ee:	601a      	str	r2, [r3, #0]
      /* Notify upper layer about timeout */
      if (r->cb != NULL) {
 80162f0:	68fb      	ldr	r3, [r7, #12]
 80162f2:	685b      	ldr	r3, [r3, #4]
 80162f4:	2b00      	cmp	r3, #0
 80162f6:	d007      	beq.n	8016308 <mqtt_request_time_elapsed+0x60>
        r->cb(r->arg, ERR_TIMEOUT);
 80162f8:	68fb      	ldr	r3, [r7, #12]
 80162fa:	685b      	ldr	r3, [r3, #4]
 80162fc:	68fa      	ldr	r2, [r7, #12]
 80162fe:	6892      	ldr	r2, [r2, #8]
 8016300:	f06f 0102 	mvn.w	r1, #2
 8016304:	4610      	mov	r0, r2
 8016306:	4798      	blx	r3
      }
      mqtt_delete_request(r);
 8016308:	68f8      	ldr	r0, [r7, #12]
 801630a:	f7ff ff6b 	bl	80161e4 <mqtt_delete_request>
      /* Tail might be be modified in callback, so re-read it in every iteration */
      r = *(struct mqtt_request_t *const volatile *)tail;
 801630e:	687b      	ldr	r3, [r7, #4]
 8016310:	681b      	ldr	r3, [r3, #0]
 8016312:	60fb      	str	r3, [r7, #12]
 8016314:	e009      	b.n	801632a <mqtt_request_time_elapsed+0x82>
    } else {
      r->timeout_diff -= t;
 8016316:	68fb      	ldr	r3, [r7, #12]
 8016318:	89da      	ldrh	r2, [r3, #14]
 801631a:	78fb      	ldrb	r3, [r7, #3]
 801631c:	b29b      	uxth	r3, r3
 801631e:	1ad3      	subs	r3, r2, r3
 8016320:	b29a      	uxth	r2, r3
 8016322:	68fb      	ldr	r3, [r7, #12]
 8016324:	81da      	strh	r2, [r3, #14]
      t = 0;
 8016326:	2300      	movs	r3, #0
 8016328:	70fb      	strb	r3, [r7, #3]
  while (t > 0 && r != NULL) {
 801632a:	78fb      	ldrb	r3, [r7, #3]
 801632c:	2b00      	cmp	r3, #0
 801632e:	d002      	beq.n	8016336 <mqtt_request_time_elapsed+0x8e>
 8016330:	68fb      	ldr	r3, [r7, #12]
 8016332:	2b00      	cmp	r3, #0
 8016334:	d1cc      	bne.n	80162d0 <mqtt_request_time_elapsed+0x28>
    }
  }
}
 8016336:	bf00      	nop
 8016338:	3710      	adds	r7, #16
 801633a:	46bd      	mov	sp, r7
 801633c:	bd80      	pop	{r7, pc}
 801633e:	bf00      	nop
 8016340:	0802acf4 	.word	0x0802acf4
 8016344:	0802ae54 	.word	0x0802ae54
 8016348:	0802ad6c 	.word	0x0802ad6c

0801634c <mqtt_clear_requests>:
 * Free all request items
 * @param tail Pointer to request queue tail pointer
 */
static void
mqtt_clear_requests(struct mqtt_request_t **tail)
{
 801634c:	b580      	push	{r7, lr}
 801634e:	b084      	sub	sp, #16
 8016350:	af00      	add	r7, sp, #0
 8016352:	6078      	str	r0, [r7, #4]
  struct mqtt_request_t *iter, *next;
  LWIP_ASSERT("mqtt_clear_requests: tail != NULL", tail != NULL);
 8016354:	687b      	ldr	r3, [r7, #4]
 8016356:	2b00      	cmp	r3, #0
 8016358:	d106      	bne.n	8016368 <mqtt_clear_requests+0x1c>
 801635a:	4b0e      	ldr	r3, [pc, #56]	; (8016394 <mqtt_clear_requests+0x48>)
 801635c:	f240 12a7 	movw	r2, #423	; 0x1a7
 8016360:	490d      	ldr	r1, [pc, #52]	; (8016398 <mqtt_clear_requests+0x4c>)
 8016362:	480e      	ldr	r0, [pc, #56]	; (801639c <mqtt_clear_requests+0x50>)
 8016364:	f00f fa22 	bl	80257ac <iprintf>
  for (iter = *tail; iter != NULL; iter = next) {
 8016368:	687b      	ldr	r3, [r7, #4]
 801636a:	681b      	ldr	r3, [r3, #0]
 801636c:	60fb      	str	r3, [r7, #12]
 801636e:	e007      	b.n	8016380 <mqtt_clear_requests+0x34>
    next = iter->next;
 8016370:	68fb      	ldr	r3, [r7, #12]
 8016372:	681b      	ldr	r3, [r3, #0]
 8016374:	60bb      	str	r3, [r7, #8]
    mqtt_delete_request(iter);
 8016376:	68f8      	ldr	r0, [r7, #12]
 8016378:	f7ff ff34 	bl	80161e4 <mqtt_delete_request>
  for (iter = *tail; iter != NULL; iter = next) {
 801637c:	68bb      	ldr	r3, [r7, #8]
 801637e:	60fb      	str	r3, [r7, #12]
 8016380:	68fb      	ldr	r3, [r7, #12]
 8016382:	2b00      	cmp	r3, #0
 8016384:	d1f4      	bne.n	8016370 <mqtt_clear_requests+0x24>
  }
  *tail = NULL;
 8016386:	687b      	ldr	r3, [r7, #4]
 8016388:	2200      	movs	r2, #0
 801638a:	601a      	str	r2, [r3, #0]
}
 801638c:	bf00      	nop
 801638e:	3710      	adds	r7, #16
 8016390:	46bd      	mov	sp, r7
 8016392:	bd80      	pop	{r7, pc}
 8016394:	0802acf4 	.word	0x0802acf4
 8016398:	0802ae7c 	.word	0x0802ae7c
 801639c:	0802ad6c 	.word	0x0802ad6c

080163a0 <mqtt_init_requests>:
 * @param r_objs Pointer to request objects
 * @param r_objs_len Number of array entries
 */
static void
mqtt_init_requests(struct mqtt_request_t *r_objs, size_t r_objs_len)
{
 80163a0:	b580      	push	{r7, lr}
 80163a2:	b084      	sub	sp, #16
 80163a4:	af00      	add	r7, sp, #0
 80163a6:	6078      	str	r0, [r7, #4]
 80163a8:	6039      	str	r1, [r7, #0]
  u8_t n;
  LWIP_ASSERT("mqtt_init_requests: r_objs != NULL", r_objs != NULL);
 80163aa:	687b      	ldr	r3, [r7, #4]
 80163ac:	2b00      	cmp	r3, #0
 80163ae:	d106      	bne.n	80163be <mqtt_init_requests+0x1e>
 80163b0:	4b0f      	ldr	r3, [pc, #60]	; (80163f0 <mqtt_init_requests+0x50>)
 80163b2:	f240 12b7 	movw	r2, #439	; 0x1b7
 80163b6:	490f      	ldr	r1, [pc, #60]	; (80163f4 <mqtt_init_requests+0x54>)
 80163b8:	480f      	ldr	r0, [pc, #60]	; (80163f8 <mqtt_init_requests+0x58>)
 80163ba:	f00f f9f7 	bl	80257ac <iprintf>
  for (n = 0; n < r_objs_len; n++) {
 80163be:	2300      	movs	r3, #0
 80163c0:	73fb      	strb	r3, [r7, #15]
 80163c2:	e00b      	b.n	80163dc <mqtt_init_requests+0x3c>
    /* Item pointing to itself indicates unused */
    r_objs[n].next = &r_objs[n];
 80163c4:	7bfb      	ldrb	r3, [r7, #15]
 80163c6:	011a      	lsls	r2, r3, #4
 80163c8:	7bfb      	ldrb	r3, [r7, #15]
 80163ca:	011b      	lsls	r3, r3, #4
 80163cc:	6879      	ldr	r1, [r7, #4]
 80163ce:	440b      	add	r3, r1
 80163d0:	6879      	ldr	r1, [r7, #4]
 80163d2:	440a      	add	r2, r1
 80163d4:	601a      	str	r2, [r3, #0]
  for (n = 0; n < r_objs_len; n++) {
 80163d6:	7bfb      	ldrb	r3, [r7, #15]
 80163d8:	3301      	adds	r3, #1
 80163da:	73fb      	strb	r3, [r7, #15]
 80163dc:	7bfb      	ldrb	r3, [r7, #15]
 80163de:	683a      	ldr	r2, [r7, #0]
 80163e0:	429a      	cmp	r2, r3
 80163e2:	d8ef      	bhi.n	80163c4 <mqtt_init_requests+0x24>
  }
}
 80163e4:	bf00      	nop
 80163e6:	bf00      	nop
 80163e8:	3710      	adds	r7, #16
 80163ea:	46bd      	mov	sp, r7
 80163ec:	bd80      	pop	{r7, pc}
 80163ee:	bf00      	nop
 80163f0:	0802acf4 	.word	0x0802acf4
 80163f4:	0802aea0 	.word	0x0802aea0
 80163f8:	0802ad6c 	.word	0x0802ad6c

080163fc <mqtt_output_append_u8>:
/* Output message build helpers */


static void
mqtt_output_append_u8(struct mqtt_ringbuf_t *rb, u8_t value)
{
 80163fc:	b580      	push	{r7, lr}
 80163fe:	b082      	sub	sp, #8
 8016400:	af00      	add	r7, sp, #0
 8016402:	6078      	str	r0, [r7, #4]
 8016404:	460b      	mov	r3, r1
 8016406:	70fb      	strb	r3, [r7, #3]
  mqtt_ringbuf_put(rb, value);
 8016408:	78fb      	ldrb	r3, [r7, #3]
 801640a:	4619      	mov	r1, r3
 801640c:	6878      	ldr	r0, [r7, #4]
 801640e:	f7ff fd2b 	bl	8015e68 <mqtt_ringbuf_put>
}
 8016412:	bf00      	nop
 8016414:	3708      	adds	r7, #8
 8016416:	46bd      	mov	sp, r7
 8016418:	bd80      	pop	{r7, pc}

0801641a <mqtt_output_append_u16>:

static
void mqtt_output_append_u16(struct mqtt_ringbuf_t *rb, u16_t value)
{
 801641a:	b580      	push	{r7, lr}
 801641c:	b082      	sub	sp, #8
 801641e:	af00      	add	r7, sp, #0
 8016420:	6078      	str	r0, [r7, #4]
 8016422:	460b      	mov	r3, r1
 8016424:	807b      	strh	r3, [r7, #2]
  mqtt_ringbuf_put(rb, value >> 8);
 8016426:	887b      	ldrh	r3, [r7, #2]
 8016428:	0a1b      	lsrs	r3, r3, #8
 801642a:	b29b      	uxth	r3, r3
 801642c:	b2db      	uxtb	r3, r3
 801642e:	4619      	mov	r1, r3
 8016430:	6878      	ldr	r0, [r7, #4]
 8016432:	f7ff fd19 	bl	8015e68 <mqtt_ringbuf_put>
  mqtt_ringbuf_put(rb, value & 0xff);
 8016436:	887b      	ldrh	r3, [r7, #2]
 8016438:	b2db      	uxtb	r3, r3
 801643a:	4619      	mov	r1, r3
 801643c:	6878      	ldr	r0, [r7, #4]
 801643e:	f7ff fd13 	bl	8015e68 <mqtt_ringbuf_put>
}
 8016442:	bf00      	nop
 8016444:	3708      	adds	r7, #8
 8016446:	46bd      	mov	sp, r7
 8016448:	bd80      	pop	{r7, pc}

0801644a <mqtt_output_append_buf>:

static void
mqtt_output_append_buf(struct mqtt_ringbuf_t *rb, const void *data, u16_t length)
{
 801644a:	b580      	push	{r7, lr}
 801644c:	b086      	sub	sp, #24
 801644e:	af00      	add	r7, sp, #0
 8016450:	60f8      	str	r0, [r7, #12]
 8016452:	60b9      	str	r1, [r7, #8]
 8016454:	4613      	mov	r3, r2
 8016456:	80fb      	strh	r3, [r7, #6]
  u16_t n;
  for (n = 0; n < length; n++) {
 8016458:	2300      	movs	r3, #0
 801645a:	82fb      	strh	r3, [r7, #22]
 801645c:	e00a      	b.n	8016474 <mqtt_output_append_buf+0x2a>
    mqtt_ringbuf_put(rb, ((const u8_t *)data)[n]);
 801645e:	8afb      	ldrh	r3, [r7, #22]
 8016460:	68ba      	ldr	r2, [r7, #8]
 8016462:	4413      	add	r3, r2
 8016464:	781b      	ldrb	r3, [r3, #0]
 8016466:	4619      	mov	r1, r3
 8016468:	68f8      	ldr	r0, [r7, #12]
 801646a:	f7ff fcfd 	bl	8015e68 <mqtt_ringbuf_put>
  for (n = 0; n < length; n++) {
 801646e:	8afb      	ldrh	r3, [r7, #22]
 8016470:	3301      	adds	r3, #1
 8016472:	82fb      	strh	r3, [r7, #22]
 8016474:	8afa      	ldrh	r2, [r7, #22]
 8016476:	88fb      	ldrh	r3, [r7, #6]
 8016478:	429a      	cmp	r2, r3
 801647a:	d3f0      	bcc.n	801645e <mqtt_output_append_buf+0x14>
  }
}
 801647c:	bf00      	nop
 801647e:	bf00      	nop
 8016480:	3718      	adds	r7, #24
 8016482:	46bd      	mov	sp, r7
 8016484:	bd80      	pop	{r7, pc}

08016486 <mqtt_output_append_string>:

static void
mqtt_output_append_string(struct mqtt_ringbuf_t *rb, const char *str, u16_t length)
{
 8016486:	b580      	push	{r7, lr}
 8016488:	b086      	sub	sp, #24
 801648a:	af00      	add	r7, sp, #0
 801648c:	60f8      	str	r0, [r7, #12]
 801648e:	60b9      	str	r1, [r7, #8]
 8016490:	4613      	mov	r3, r2
 8016492:	80fb      	strh	r3, [r7, #6]
  u16_t n;
  mqtt_ringbuf_put(rb, length >> 8);
 8016494:	88fb      	ldrh	r3, [r7, #6]
 8016496:	0a1b      	lsrs	r3, r3, #8
 8016498:	b29b      	uxth	r3, r3
 801649a:	b2db      	uxtb	r3, r3
 801649c:	4619      	mov	r1, r3
 801649e:	68f8      	ldr	r0, [r7, #12]
 80164a0:	f7ff fce2 	bl	8015e68 <mqtt_ringbuf_put>
  mqtt_ringbuf_put(rb, length & 0xff);
 80164a4:	88fb      	ldrh	r3, [r7, #6]
 80164a6:	b2db      	uxtb	r3, r3
 80164a8:	4619      	mov	r1, r3
 80164aa:	68f8      	ldr	r0, [r7, #12]
 80164ac:	f7ff fcdc 	bl	8015e68 <mqtt_ringbuf_put>
  for (n = 0; n < length; n++) {
 80164b0:	2300      	movs	r3, #0
 80164b2:	82fb      	strh	r3, [r7, #22]
 80164b4:	e00a      	b.n	80164cc <mqtt_output_append_string+0x46>
    mqtt_ringbuf_put(rb, str[n]);
 80164b6:	8afb      	ldrh	r3, [r7, #22]
 80164b8:	68ba      	ldr	r2, [r7, #8]
 80164ba:	4413      	add	r3, r2
 80164bc:	781b      	ldrb	r3, [r3, #0]
 80164be:	4619      	mov	r1, r3
 80164c0:	68f8      	ldr	r0, [r7, #12]
 80164c2:	f7ff fcd1 	bl	8015e68 <mqtt_ringbuf_put>
  for (n = 0; n < length; n++) {
 80164c6:	8afb      	ldrh	r3, [r7, #22]
 80164c8:	3301      	adds	r3, #1
 80164ca:	82fb      	strh	r3, [r7, #22]
 80164cc:	8afa      	ldrh	r2, [r7, #22]
 80164ce:	88fb      	ldrh	r3, [r7, #6]
 80164d0:	429a      	cmp	r2, r3
 80164d2:	d3f0      	bcc.n	80164b6 <mqtt_output_append_string+0x30>
  }
}
 80164d4:	bf00      	nop
 80164d6:	bf00      	nop
 80164d8:	3718      	adds	r7, #24
 80164da:	46bd      	mov	sp, r7
 80164dc:	bd80      	pop	{r7, pc}

080164de <mqtt_output_append_fixed_header>:
 */

static void
mqtt_output_append_fixed_header(struct mqtt_ringbuf_t *rb, u8_t msg_type, u8_t fdup,
                                u8_t fqos, u8_t fretain, u16_t r_length)
{
 80164de:	b580      	push	{r7, lr}
 80164e0:	b082      	sub	sp, #8
 80164e2:	af00      	add	r7, sp, #0
 80164e4:	6078      	str	r0, [r7, #4]
 80164e6:	4608      	mov	r0, r1
 80164e8:	4611      	mov	r1, r2
 80164ea:	461a      	mov	r2, r3
 80164ec:	4603      	mov	r3, r0
 80164ee:	70fb      	strb	r3, [r7, #3]
 80164f0:	460b      	mov	r3, r1
 80164f2:	70bb      	strb	r3, [r7, #2]
 80164f4:	4613      	mov	r3, r2
 80164f6:	707b      	strb	r3, [r7, #1]
  /* Start with control byte */
  mqtt_output_append_u8(rb, (((msg_type & 0x0f) << 4) | ((fdup & 1) << 3) | ((fqos & 3) << 1) | (fretain & 1)));
 80164f8:	78fb      	ldrb	r3, [r7, #3]
 80164fa:	011b      	lsls	r3, r3, #4
 80164fc:	b25a      	sxtb	r2, r3
 80164fe:	78bb      	ldrb	r3, [r7, #2]
 8016500:	00db      	lsls	r3, r3, #3
 8016502:	b25b      	sxtb	r3, r3
 8016504:	f003 0308 	and.w	r3, r3, #8
 8016508:	b25b      	sxtb	r3, r3
 801650a:	4313      	orrs	r3, r2
 801650c:	b25a      	sxtb	r2, r3
 801650e:	787b      	ldrb	r3, [r7, #1]
 8016510:	005b      	lsls	r3, r3, #1
 8016512:	b25b      	sxtb	r3, r3
 8016514:	f003 0306 	and.w	r3, r3, #6
 8016518:	b25b      	sxtb	r3, r3
 801651a:	4313      	orrs	r3, r2
 801651c:	b25a      	sxtb	r2, r3
 801651e:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8016522:	f003 0301 	and.w	r3, r3, #1
 8016526:	b25b      	sxtb	r3, r3
 8016528:	4313      	orrs	r3, r2
 801652a:	b25b      	sxtb	r3, r3
 801652c:	b2db      	uxtb	r3, r3
 801652e:	4619      	mov	r1, r3
 8016530:	6878      	ldr	r0, [r7, #4]
 8016532:	f7ff ff63 	bl	80163fc <mqtt_output_append_u8>
  /* Encode remaining length field */
  do {
    mqtt_output_append_u8(rb, (r_length & 0x7f) | (r_length >= 128 ? 0x80 : 0));
 8016536:	8abb      	ldrh	r3, [r7, #20]
 8016538:	b25b      	sxtb	r3, r3
 801653a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801653e:	b25b      	sxtb	r3, r3
 8016540:	8aba      	ldrh	r2, [r7, #20]
 8016542:	2a7f      	cmp	r2, #127	; 0x7f
 8016544:	d902      	bls.n	801654c <mqtt_output_append_fixed_header+0x6e>
 8016546:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 801654a:	e000      	b.n	801654e <mqtt_output_append_fixed_header+0x70>
 801654c:	2200      	movs	r2, #0
 801654e:	4313      	orrs	r3, r2
 8016550:	b25b      	sxtb	r3, r3
 8016552:	b2db      	uxtb	r3, r3
 8016554:	4619      	mov	r1, r3
 8016556:	6878      	ldr	r0, [r7, #4]
 8016558:	f7ff ff50 	bl	80163fc <mqtt_output_append_u8>
    r_length >>= 7;
 801655c:	8abb      	ldrh	r3, [r7, #20]
 801655e:	09db      	lsrs	r3, r3, #7
 8016560:	82bb      	strh	r3, [r7, #20]
  } while (r_length > 0);
 8016562:	8abb      	ldrh	r3, [r7, #20]
 8016564:	2b00      	cmp	r3, #0
 8016566:	d1e6      	bne.n	8016536 <mqtt_output_append_fixed_header+0x58>
}
 8016568:	bf00      	nop
 801656a:	bf00      	nop
 801656c:	3708      	adds	r7, #8
 801656e:	46bd      	mov	sp, r7
 8016570:	bd80      	pop	{r7, pc}
	...

08016574 <mqtt_output_check_space>:
 * @param r_length Remaining length after fixed header
 * @return 1 if message will fit, 0 if not enough buffer space
 */
static u8_t
mqtt_output_check_space(struct mqtt_ringbuf_t *rb, u16_t r_length)
{
 8016574:	b590      	push	{r4, r7, lr}
 8016576:	b085      	sub	sp, #20
 8016578:	af00      	add	r7, sp, #0
 801657a:	6078      	str	r0, [r7, #4]
 801657c:	460b      	mov	r3, r1
 801657e:	807b      	strh	r3, [r7, #2]
  /* Start with length of type byte + remaining length */
  u16_t total_len = 1 + r_length;
 8016580:	887b      	ldrh	r3, [r7, #2]
 8016582:	3301      	adds	r3, #1
 8016584:	81fb      	strh	r3, [r7, #14]

  LWIP_ASSERT("mqtt_output_check_space: rb != NULL", rb != NULL);
 8016586:	687b      	ldr	r3, [r7, #4]
 8016588:	2b00      	cmp	r3, #0
 801658a:	d106      	bne.n	801659a <mqtt_output_check_space+0x26>
 801658c:	4b0f      	ldr	r3, [pc, #60]	; (80165cc <mqtt_output_check_space+0x58>)
 801658e:	f240 2207 	movw	r2, #519	; 0x207
 8016592:	490f      	ldr	r1, [pc, #60]	; (80165d0 <mqtt_output_check_space+0x5c>)
 8016594:	480f      	ldr	r0, [pc, #60]	; (80165d4 <mqtt_output_check_space+0x60>)
 8016596:	f00f f909 	bl	80257ac <iprintf>

  /* Calculate number of required bytes to contain the remaining bytes field and add to total*/
  do {
    total_len++;
 801659a:	89fb      	ldrh	r3, [r7, #14]
 801659c:	3301      	adds	r3, #1
 801659e:	81fb      	strh	r3, [r7, #14]
    r_length >>= 7;
 80165a0:	887b      	ldrh	r3, [r7, #2]
 80165a2:	09db      	lsrs	r3, r3, #7
 80165a4:	807b      	strh	r3, [r7, #2]
  } while (r_length > 0);
 80165a6:	887b      	ldrh	r3, [r7, #2]
 80165a8:	2b00      	cmp	r3, #0
 80165aa:	d1f6      	bne.n	801659a <mqtt_output_check_space+0x26>

  return (total_len <= mqtt_ringbuf_free(rb));
 80165ac:	89fc      	ldrh	r4, [r7, #14]
 80165ae:	6878      	ldr	r0, [r7, #4]
 80165b0:	f7ff fcb6 	bl	8015f20 <mqtt_ringbuf_len>
 80165b4:	4603      	mov	r3, r0
 80165b6:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80165ba:	429c      	cmp	r4, r3
 80165bc:	bfd4      	ite	le
 80165be:	2301      	movle	r3, #1
 80165c0:	2300      	movgt	r3, #0
 80165c2:	b2db      	uxtb	r3, r3
}
 80165c4:	4618      	mov	r0, r3
 80165c6:	3714      	adds	r7, #20
 80165c8:	46bd      	mov	sp, r7
 80165ca:	bd90      	pop	{r4, r7, pc}
 80165cc:	0802acf4 	.word	0x0802acf4
 80165d0:	0802aec4 	.word	0x0802aec4
 80165d4:	0802ad6c 	.word	0x0802ad6c

080165d8 <mqtt_close>:
 * @param client MQTT client
 * @param reason Reason for disconnection
 */
static void
mqtt_close(mqtt_client_t *client, mqtt_connection_status_t reason)
{
 80165d8:	b580      	push	{r7, lr}
 80165da:	b084      	sub	sp, #16
 80165dc:	af00      	add	r7, sp, #0
 80165de:	6078      	str	r0, [r7, #4]
 80165e0:	460b      	mov	r3, r1
 80165e2:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("mqtt_close: client != NULL", client != NULL);
 80165e4:	687b      	ldr	r3, [r7, #4]
 80165e6:	2b00      	cmp	r3, #0
 80165e8:	d106      	bne.n	80165f8 <mqtt_close+0x20>
 80165ea:	4b27      	ldr	r3, [pc, #156]	; (8016688 <mqtt_close+0xb0>)
 80165ec:	f240 221b 	movw	r2, #539	; 0x21b
 80165f0:	4926      	ldr	r1, [pc, #152]	; (801668c <mqtt_close+0xb4>)
 80165f2:	4827      	ldr	r0, [pc, #156]	; (8016690 <mqtt_close+0xb8>)
 80165f4:	f00f f8da 	bl	80257ac <iprintf>

  /* Bring down TCP connection if not already done */
  if (client->conn != NULL) {
 80165f8:	687b      	ldr	r3, [r7, #4]
 80165fa:	68db      	ldr	r3, [r3, #12]
 80165fc:	2b00      	cmp	r3, #0
 80165fe:	d024      	beq.n	801664a <mqtt_close+0x72>
    err_t res;
    altcp_recv(client->conn, NULL);
 8016600:	687b      	ldr	r3, [r7, #4]
 8016602:	68db      	ldr	r3, [r3, #12]
 8016604:	2100      	movs	r1, #0
 8016606:	4618      	mov	r0, r3
 8016608:	f004 fc4e 	bl	801aea8 <tcp_recv>
    altcp_err(client->conn,  NULL);
 801660c:	687b      	ldr	r3, [r7, #4]
 801660e:	68db      	ldr	r3, [r3, #12]
 8016610:	2100      	movs	r1, #0
 8016612:	4618      	mov	r0, r3
 8016614:	f004 fc8c 	bl	801af30 <tcp_err>
    altcp_sent(client->conn, NULL);
 8016618:	687b      	ldr	r3, [r7, #4]
 801661a:	68db      	ldr	r3, [r3, #12]
 801661c:	2100      	movs	r1, #0
 801661e:	4618      	mov	r0, r3
 8016620:	f004 fc64 	bl	801aeec <tcp_sent>
    res = altcp_close(client->conn);
 8016624:	687b      	ldr	r3, [r7, #4]
 8016626:	68db      	ldr	r3, [r3, #12]
 8016628:	4618      	mov	r0, r3
 801662a:	f003 fa65 	bl	8019af8 <tcp_close>
 801662e:	4603      	mov	r3, r0
 8016630:	73fb      	strb	r3, [r7, #15]
    if (res != ERR_OK) {
 8016632:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016636:	2b00      	cmp	r3, #0
 8016638:	d004      	beq.n	8016644 <mqtt_close+0x6c>
      altcp_abort(client->conn);
 801663a:	687b      	ldr	r3, [r7, #4]
 801663c:	68db      	ldr	r3, [r3, #12]
 801663e:	4618      	mov	r0, r3
 8016640:	f003 fb44 	bl	8019ccc <tcp_abort>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_close: Close err=%s\n", lwip_strerr(res)));
    }
    client->conn = NULL;
 8016644:	687b      	ldr	r3, [r7, #4]
 8016646:	2200      	movs	r2, #0
 8016648:	60da      	str	r2, [r3, #12]
  }

  /* Remove all pending requests */
  mqtt_clear_requests(&client->pend_req_queue);
 801664a:	687b      	ldr	r3, [r7, #4]
 801664c:	3318      	adds	r3, #24
 801664e:	4618      	mov	r0, r3
 8016650:	f7ff fe7c 	bl	801634c <mqtt_clear_requests>
  /* Stop cyclic timer */
  sys_untimeout(mqtt_cyclic_timer, client);
 8016654:	6879      	ldr	r1, [r7, #4]
 8016656:	480f      	ldr	r0, [pc, #60]	; (8016694 <mqtt_close+0xbc>)
 8016658:	f009 f9a6 	bl	801f9a8 <sys_untimeout>

  /* Notify upper layer of disconnection if changed state */
  if (client->conn_state != TCP_DISCONNECTED) {
 801665c:	687b      	ldr	r3, [r7, #4]
 801665e:	7a9b      	ldrb	r3, [r3, #10]
 8016660:	2b00      	cmp	r3, #0
 8016662:	d00d      	beq.n	8016680 <mqtt_close+0xa8>

    client->conn_state = TCP_DISCONNECTED;
 8016664:	687b      	ldr	r3, [r7, #4]
 8016666:	2200      	movs	r2, #0
 8016668:	729a      	strb	r2, [r3, #10]
    if (client->connect_cb != NULL) {
 801666a:	687b      	ldr	r3, [r7, #4]
 801666c:	695b      	ldr	r3, [r3, #20]
 801666e:	2b00      	cmp	r3, #0
 8016670:	d006      	beq.n	8016680 <mqtt_close+0xa8>
      client->connect_cb(client, client->connect_arg, reason);
 8016672:	687b      	ldr	r3, [r7, #4]
 8016674:	695b      	ldr	r3, [r3, #20]
 8016676:	687a      	ldr	r2, [r7, #4]
 8016678:	6911      	ldr	r1, [r2, #16]
 801667a:	887a      	ldrh	r2, [r7, #2]
 801667c:	6878      	ldr	r0, [r7, #4]
 801667e:	4798      	blx	r3
    }
  }
}
 8016680:	bf00      	nop
 8016682:	3710      	adds	r7, #16
 8016684:	46bd      	mov	sp, r7
 8016686:	bd80      	pop	{r7, pc}
 8016688:	0802acf4 	.word	0x0802acf4
 801668c:	0802aee8 	.word	0x0802aee8
 8016690:	0802ad6c 	.word	0x0802ad6c
 8016694:	08016699 	.word	0x08016699

08016698 <mqtt_cyclic_timer>:
 * Interval timer, called every MQTT_CYCLIC_TIMER_INTERVAL seconds in MQTT_CONNECTING and MQTT_CONNECTED states
 * @param arg MQTT client
 */
static void
mqtt_cyclic_timer(void *arg)
{
 8016698:	b580      	push	{r7, lr}
 801669a:	b086      	sub	sp, #24
 801669c:	af02      	add	r7, sp, #8
 801669e:	6078      	str	r0, [r7, #4]
  u8_t restart_timer = 1;
 80166a0:	2301      	movs	r3, #1
 80166a2:	73fb      	strb	r3, [r7, #15]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 80166a4:	687b      	ldr	r3, [r7, #4]
 80166a6:	60bb      	str	r3, [r7, #8]
  LWIP_ASSERT("mqtt_cyclic_timer: client != NULL", client != NULL);
 80166a8:	68bb      	ldr	r3, [r7, #8]
 80166aa:	2b00      	cmp	r3, #0
 80166ac:	d106      	bne.n	80166bc <mqtt_cyclic_timer+0x24>
 80166ae:	4b43      	ldr	r3, [pc, #268]	; (80167bc <mqtt_cyclic_timer+0x124>)
 80166b0:	f44f 7211 	mov.w	r2, #580	; 0x244
 80166b4:	4942      	ldr	r1, [pc, #264]	; (80167c0 <mqtt_cyclic_timer+0x128>)
 80166b6:	4843      	ldr	r0, [pc, #268]	; (80167c4 <mqtt_cyclic_timer+0x12c>)
 80166b8:	f00f f878 	bl	80257ac <iprintf>

  if (client->conn_state == MQTT_CONNECTING) {
 80166bc:	68bb      	ldr	r3, [r7, #8]
 80166be:	7a9b      	ldrb	r3, [r3, #10]
 80166c0:	2b02      	cmp	r3, #2
 80166c2:	d115      	bne.n	80166f0 <mqtt_cyclic_timer+0x58>
    client->cyclic_tick++;
 80166c4:	68bb      	ldr	r3, [r7, #8]
 80166c6:	881b      	ldrh	r3, [r3, #0]
 80166c8:	3301      	adds	r3, #1
 80166ca:	b29a      	uxth	r2, r3
 80166cc:	68bb      	ldr	r3, [r7, #8]
 80166ce:	801a      	strh	r2, [r3, #0]
    if ((client->cyclic_tick * MQTT_CYCLIC_TIMER_INTERVAL) >= MQTT_CONNECT_TIMOUT) {
 80166d0:	68bb      	ldr	r3, [r7, #8]
 80166d2:	881b      	ldrh	r3, [r3, #0]
 80166d4:	461a      	mov	r2, r3
 80166d6:	4613      	mov	r3, r2
 80166d8:	009b      	lsls	r3, r3, #2
 80166da:	4413      	add	r3, r2
 80166dc:	2b63      	cmp	r3, #99	; 0x63
 80166de:	dd5f      	ble.n	80167a0 <mqtt_cyclic_timer+0x108>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_cyclic_timer: CONNECT attempt to server timed out\n"));
      /* Disconnect TCP */
      mqtt_close(client, MQTT_CONNECT_TIMEOUT);
 80166e0:	f240 1101 	movw	r1, #257	; 0x101
 80166e4:	68b8      	ldr	r0, [r7, #8]
 80166e6:	f7ff ff77 	bl	80165d8 <mqtt_close>
      restart_timer = 0;
 80166ea:	2300      	movs	r3, #0
 80166ec:	73fb      	strb	r3, [r7, #15]
 80166ee:	e057      	b.n	80167a0 <mqtt_cyclic_timer+0x108>
    }
  } else if (client->conn_state == MQTT_CONNECTED) {
 80166f0:	68bb      	ldr	r3, [r7, #8]
 80166f2:	7a9b      	ldrb	r3, [r3, #10]
 80166f4:	2b03      	cmp	r3, #3
 80166f6:	d151      	bne.n	801679c <mqtt_cyclic_timer+0x104>
    /* Handle timeout for pending requests */
    mqtt_request_time_elapsed(&client->pend_req_queue, MQTT_CYCLIC_TIMER_INTERVAL);
 80166f8:	68bb      	ldr	r3, [r7, #8]
 80166fa:	3318      	adds	r3, #24
 80166fc:	2105      	movs	r1, #5
 80166fe:	4618      	mov	r0, r3
 8016700:	f7ff fdd2 	bl	80162a8 <mqtt_request_time_elapsed>

    /* keep_alive > 0 means keep alive functionality shall be used */
    if (client->keep_alive > 0) {
 8016704:	68bb      	ldr	r3, [r7, #8]
 8016706:	885b      	ldrh	r3, [r3, #2]
 8016708:	2b00      	cmp	r3, #0
 801670a:	d049      	beq.n	80167a0 <mqtt_cyclic_timer+0x108>

      client->server_watchdog++;
 801670c:	68bb      	ldr	r3, [r7, #8]
 801670e:	889b      	ldrh	r3, [r3, #4]
 8016710:	3301      	adds	r3, #1
 8016712:	b29a      	uxth	r2, r3
 8016714:	68bb      	ldr	r3, [r7, #8]
 8016716:	809a      	strh	r2, [r3, #4]
      /* If reception from server has been idle for 1.5*keep_alive time, server is considered unresponsive */
      if ((client->server_watchdog * MQTT_CYCLIC_TIMER_INTERVAL) > (client->keep_alive + client->keep_alive / 2)) {
 8016718:	68bb      	ldr	r3, [r7, #8]
 801671a:	889b      	ldrh	r3, [r3, #4]
 801671c:	461a      	mov	r2, r3
 801671e:	4613      	mov	r3, r2
 8016720:	009b      	lsls	r3, r3, #2
 8016722:	441a      	add	r2, r3
 8016724:	68bb      	ldr	r3, [r7, #8]
 8016726:	885b      	ldrh	r3, [r3, #2]
 8016728:	4619      	mov	r1, r3
 801672a:	68bb      	ldr	r3, [r7, #8]
 801672c:	885b      	ldrh	r3, [r3, #2]
 801672e:	085b      	lsrs	r3, r3, #1
 8016730:	b29b      	uxth	r3, r3
 8016732:	440b      	add	r3, r1
 8016734:	429a      	cmp	r2, r3
 8016736:	dd06      	ble.n	8016746 <mqtt_cyclic_timer+0xae>
        LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_cyclic_timer: Server incoming keep-alive timeout\n"));
        mqtt_close(client, MQTT_CONNECT_TIMEOUT);
 8016738:	f240 1101 	movw	r1, #257	; 0x101
 801673c:	68b8      	ldr	r0, [r7, #8]
 801673e:	f7ff ff4b 	bl	80165d8 <mqtt_close>
        restart_timer = 0;
 8016742:	2300      	movs	r3, #0
 8016744:	73fb      	strb	r3, [r7, #15]
      }

      /* If time for a keep alive message to be sent, transmission has been idle for keep_alive time */
      if ((client->cyclic_tick * MQTT_CYCLIC_TIMER_INTERVAL) >= client->keep_alive) {
 8016746:	68bb      	ldr	r3, [r7, #8]
 8016748:	881b      	ldrh	r3, [r3, #0]
 801674a:	461a      	mov	r2, r3
 801674c:	4613      	mov	r3, r2
 801674e:	009b      	lsls	r3, r3, #2
 8016750:	4413      	add	r3, r2
 8016752:	68ba      	ldr	r2, [r7, #8]
 8016754:	8852      	ldrh	r2, [r2, #2]
 8016756:	4293      	cmp	r3, r2
 8016758:	db19      	blt.n	801678e <mqtt_cyclic_timer+0xf6>
        LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_cyclic_timer: Sending keep-alive message to server\n"));
        if (mqtt_output_check_space(&client->output, 0) != 0) {
 801675a:	68bb      	ldr	r3, [r7, #8]
 801675c:	f203 63ec 	addw	r3, r3, #1772	; 0x6ec
 8016760:	2100      	movs	r1, #0
 8016762:	4618      	mov	r0, r3
 8016764:	f7ff ff06 	bl	8016574 <mqtt_output_check_space>
 8016768:	4603      	mov	r3, r0
 801676a:	2b00      	cmp	r3, #0
 801676c:	d018      	beq.n	80167a0 <mqtt_cyclic_timer+0x108>
          mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_PINGREQ, 0, 0, 0, 0);
 801676e:	68bb      	ldr	r3, [r7, #8]
 8016770:	f203 60ec 	addw	r0, r3, #1772	; 0x6ec
 8016774:	2300      	movs	r3, #0
 8016776:	9301      	str	r3, [sp, #4]
 8016778:	2300      	movs	r3, #0
 801677a:	9300      	str	r3, [sp, #0]
 801677c:	2300      	movs	r3, #0
 801677e:	2200      	movs	r2, #0
 8016780:	210c      	movs	r1, #12
 8016782:	f7ff feac 	bl	80164de <mqtt_output_append_fixed_header>
          client->cyclic_tick = 0;
 8016786:	68bb      	ldr	r3, [r7, #8]
 8016788:	2200      	movs	r2, #0
 801678a:	801a      	strh	r2, [r3, #0]
 801678c:	e008      	b.n	80167a0 <mqtt_cyclic_timer+0x108>
        }
      } else {
        client->cyclic_tick++;
 801678e:	68bb      	ldr	r3, [r7, #8]
 8016790:	881b      	ldrh	r3, [r3, #0]
 8016792:	3301      	adds	r3, #1
 8016794:	b29a      	uxth	r2, r3
 8016796:	68bb      	ldr	r3, [r7, #8]
 8016798:	801a      	strh	r2, [r3, #0]
 801679a:	e001      	b.n	80167a0 <mqtt_cyclic_timer+0x108>
      }
    }
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_cyclic_timer: Timer should not be running in state %d\n", client->conn_state));
    restart_timer = 0;
 801679c:	2300      	movs	r3, #0
 801679e:	73fb      	strb	r3, [r7, #15]
  }
  if (restart_timer) {
 80167a0:	7bfb      	ldrb	r3, [r7, #15]
 80167a2:	2b00      	cmp	r3, #0
 80167a4:	d005      	beq.n	80167b2 <mqtt_cyclic_timer+0x11a>
    sys_timeout(MQTT_CYCLIC_TIMER_INTERVAL * 1000, mqtt_cyclic_timer, arg);
 80167a6:	687a      	ldr	r2, [r7, #4]
 80167a8:	4907      	ldr	r1, [pc, #28]	; (80167c8 <mqtt_cyclic_timer+0x130>)
 80167aa:	f241 3088 	movw	r0, #5000	; 0x1388
 80167ae:	f009 f8d5 	bl	801f95c <sys_timeout>
  }
}
 80167b2:	bf00      	nop
 80167b4:	3710      	adds	r7, #16
 80167b6:	46bd      	mov	sp, r7
 80167b8:	bd80      	pop	{r7, pc}
 80167ba:	bf00      	nop
 80167bc:	0802acf4 	.word	0x0802acf4
 80167c0:	0802af04 	.word	0x0802af04
 80167c4:	0802ad6c 	.word	0x0802ad6c
 80167c8:	08016699 	.word	0x08016699

080167cc <pub_ack_rec_rel_response>:
 * @param qos QoS value
 * @return ERR_OK if successful, ERR_MEM if out of memory
 */
static err_t
pub_ack_rec_rel_response(mqtt_client_t *client, u8_t msg, u16_t pkt_id, u8_t qos)
{
 80167cc:	b580      	push	{r7, lr}
 80167ce:	b086      	sub	sp, #24
 80167d0:	af02      	add	r7, sp, #8
 80167d2:	6078      	str	r0, [r7, #4]
 80167d4:	4608      	mov	r0, r1
 80167d6:	4611      	mov	r1, r2
 80167d8:	461a      	mov	r2, r3
 80167da:	4603      	mov	r3, r0
 80167dc:	70fb      	strb	r3, [r7, #3]
 80167de:	460b      	mov	r3, r1
 80167e0:	803b      	strh	r3, [r7, #0]
 80167e2:	4613      	mov	r3, r2
 80167e4:	70bb      	strb	r3, [r7, #2]
  err_t err = ERR_OK;
 80167e6:	2300      	movs	r3, #0
 80167e8:	73fb      	strb	r3, [r7, #15]
  if (mqtt_output_check_space(&client->output, 2)) {
 80167ea:	687b      	ldr	r3, [r7, #4]
 80167ec:	f203 63ec 	addw	r3, r3, #1772	; 0x6ec
 80167f0:	2102      	movs	r1, #2
 80167f2:	4618      	mov	r0, r3
 80167f4:	f7ff febe 	bl	8016574 <mqtt_output_check_space>
 80167f8:	4603      	mov	r3, r0
 80167fa:	2b00      	cmp	r3, #0
 80167fc:	d01d      	beq.n	801683a <pub_ack_rec_rel_response+0x6e>
    mqtt_output_append_fixed_header(&client->output, msg, 0, qos, 0, 2);
 80167fe:	687b      	ldr	r3, [r7, #4]
 8016800:	f203 60ec 	addw	r0, r3, #1772	; 0x6ec
 8016804:	78bb      	ldrb	r3, [r7, #2]
 8016806:	78f9      	ldrb	r1, [r7, #3]
 8016808:	2202      	movs	r2, #2
 801680a:	9201      	str	r2, [sp, #4]
 801680c:	2200      	movs	r2, #0
 801680e:	9200      	str	r2, [sp, #0]
 8016810:	2200      	movs	r2, #0
 8016812:	f7ff fe64 	bl	80164de <mqtt_output_append_fixed_header>
    mqtt_output_append_u16(&client->output, pkt_id);
 8016816:	687b      	ldr	r3, [r7, #4]
 8016818:	f203 63ec 	addw	r3, r3, #1772	; 0x6ec
 801681c:	883a      	ldrh	r2, [r7, #0]
 801681e:	4611      	mov	r1, r2
 8016820:	4618      	mov	r0, r3
 8016822:	f7ff fdfa 	bl	801641a <mqtt_output_append_u16>
    mqtt_output_send(&client->output, client->conn);
 8016826:	687b      	ldr	r3, [r7, #4]
 8016828:	f203 62ec 	addw	r2, r3, #1772	; 0x6ec
 801682c:	687b      	ldr	r3, [r7, #4]
 801682e:	68db      	ldr	r3, [r3, #12]
 8016830:	4619      	mov	r1, r3
 8016832:	4610      	mov	r0, r2
 8016834:	f7ff fb90 	bl	8015f58 <mqtt_output_send>
 8016838:	e001      	b.n	801683e <pub_ack_rec_rel_response+0x72>
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("pub_ack_rec_rel_response: OOM creating response: %s with pkt_id: %d\n",
                                   mqtt_msg_type_to_str(msg), pkt_id));
    err = ERR_MEM;
 801683a:	23ff      	movs	r3, #255	; 0xff
 801683c:	73fb      	strb	r3, [r7, #15]
  }
  return err;
 801683e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016842:	4618      	mov	r0, r3
 8016844:	3710      	adds	r7, #16
 8016846:	46bd      	mov	sp, r7
 8016848:	bd80      	pop	{r7, pc}

0801684a <mqtt_incomming_suback>:
 * @param r Matching request
 * @param result Result code from server
 */
static void
mqtt_incomming_suback(struct mqtt_request_t *r, u8_t result)
{
 801684a:	b580      	push	{r7, lr}
 801684c:	b082      	sub	sp, #8
 801684e:	af00      	add	r7, sp, #0
 8016850:	6078      	str	r0, [r7, #4]
 8016852:	460b      	mov	r3, r1
 8016854:	70fb      	strb	r3, [r7, #3]
  if (r->cb != NULL) {
 8016856:	687b      	ldr	r3, [r7, #4]
 8016858:	685b      	ldr	r3, [r3, #4]
 801685a:	2b00      	cmp	r3, #0
 801685c:	d00c      	beq.n	8016878 <mqtt_incomming_suback+0x2e>
    r->cb(r->arg, result < 3 ? ERR_OK : ERR_ABRT);
 801685e:	687b      	ldr	r3, [r7, #4]
 8016860:	685b      	ldr	r3, [r3, #4]
 8016862:	687a      	ldr	r2, [r7, #4]
 8016864:	6890      	ldr	r0, [r2, #8]
 8016866:	78fa      	ldrb	r2, [r7, #3]
 8016868:	2a02      	cmp	r2, #2
 801686a:	d801      	bhi.n	8016870 <mqtt_incomming_suback+0x26>
 801686c:	2200      	movs	r2, #0
 801686e:	e001      	b.n	8016874 <mqtt_incomming_suback+0x2a>
 8016870:	f06f 020c 	mvn.w	r2, #12
 8016874:	4611      	mov	r1, r2
 8016876:	4798      	blx	r3
  }
}
 8016878:	bf00      	nop
 801687a:	3708      	adds	r7, #8
 801687c:	46bd      	mov	sp, r7
 801687e:	bd80      	pop	{r7, pc}

08016880 <mqtt_message_received>:
 * @param length length received part
 * @param remaining_length Remaining length of complete message
 */
static mqtt_connection_status_t
mqtt_message_received(mqtt_client_t *client, u8_t fixed_hdr_idx, u16_t length, u32_t remaining_length)
{
 8016880:	b590      	push	{r4, r7, lr}
 8016882:	b08f      	sub	sp, #60	; 0x3c
 8016884:	af00      	add	r7, sp, #0
 8016886:	60f8      	str	r0, [r7, #12]
 8016888:	607b      	str	r3, [r7, #4]
 801688a:	460b      	mov	r3, r1
 801688c:	72fb      	strb	r3, [r7, #11]
 801688e:	4613      	mov	r3, r2
 8016890:	813b      	strh	r3, [r7, #8]
  mqtt_connection_status_t res = MQTT_CONNECT_ACCEPTED;
 8016892:	2300      	movs	r3, #0
 8016894:	86fb      	strh	r3, [r7, #54]	; 0x36

  u8_t *var_hdr_payload = client->rx_buffer + fixed_hdr_idx;
 8016896:	68fb      	ldr	r3, [r7, #12]
 8016898:	f203 626c 	addw	r2, r3, #1644	; 0x66c
 801689c:	7afb      	ldrb	r3, [r7, #11]
 801689e:	4413      	add	r3, r2
 80168a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  size_t var_hdr_payload_bufsize = sizeof(client->rx_buffer) - fixed_hdr_idx;
 80168a2:	7afb      	ldrb	r3, [r7, #11]
 80168a4:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80168a8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Control packet type */
  u8_t pkt_type = MQTT_CTL_PACKET_TYPE(client->rx_buffer[0]);
 80168aa:	68fb      	ldr	r3, [r7, #12]
 80168ac:	f893 366c 	ldrb.w	r3, [r3, #1644]	; 0x66c
 80168b0:	091b      	lsrs	r3, r3, #4
 80168b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  u16_t pkt_id = 0;
 80168b6:	2300      	movs	r3, #0
 80168b8:	84bb      	strh	r3, [r7, #36]	; 0x24

  LWIP_ASSERT("client->msg_idx < MQTT_VAR_HEADER_BUFFER_LEN", client->msg_idx < MQTT_VAR_HEADER_BUFFER_LEN);
 80168ba:	68fb      	ldr	r3, [r7, #12]
 80168bc:	f8d3 3668 	ldr.w	r3, [r3, #1640]	; 0x668
 80168c0:	2b7f      	cmp	r3, #127	; 0x7f
 80168c2:	d906      	bls.n	80168d2 <mqtt_message_received+0x52>
 80168c4:	4b9a      	ldr	r3, [pc, #616]	; (8016b30 <mqtt_message_received+0x2b0>)
 80168c6:	f240 22ab 	movw	r2, #683	; 0x2ab
 80168ca:	499a      	ldr	r1, [pc, #616]	; (8016b34 <mqtt_message_received+0x2b4>)
 80168cc:	489a      	ldr	r0, [pc, #616]	; (8016b38 <mqtt_message_received+0x2b8>)
 80168ce:	f00e ff6d 	bl	80257ac <iprintf>
  LWIP_ASSERT("fixed_hdr_idx <= client->msg_idx", fixed_hdr_idx <= client->msg_idx);
 80168d2:	7afa      	ldrb	r2, [r7, #11]
 80168d4:	68fb      	ldr	r3, [r7, #12]
 80168d6:	f8d3 3668 	ldr.w	r3, [r3, #1640]	; 0x668
 80168da:	429a      	cmp	r2, r3
 80168dc:	d906      	bls.n	80168ec <mqtt_message_received+0x6c>
 80168de:	4b94      	ldr	r3, [pc, #592]	; (8016b30 <mqtt_message_received+0x2b0>)
 80168e0:	f44f 722b 	mov.w	r2, #684	; 0x2ac
 80168e4:	4995      	ldr	r1, [pc, #596]	; (8016b3c <mqtt_message_received+0x2bc>)
 80168e6:	4894      	ldr	r0, [pc, #592]	; (8016b38 <mqtt_message_received+0x2b8>)
 80168e8:	f00e ff60 	bl	80257ac <iprintf>
  LWIP_ERROR("buffer length mismatch", fixed_hdr_idx + length <= MQTT_VAR_HEADER_BUFFER_LEN,
 80168ec:	7afa      	ldrb	r2, [r7, #11]
 80168ee:	893b      	ldrh	r3, [r7, #8]
 80168f0:	4413      	add	r3, r2
 80168f2:	2b80      	cmp	r3, #128	; 0x80
 80168f4:	dd09      	ble.n	801690a <mqtt_message_received+0x8a>
 80168f6:	4b8e      	ldr	r3, [pc, #568]	; (8016b30 <mqtt_message_received+0x2b0>)
 80168f8:	f240 22ad 	movw	r2, #685	; 0x2ad
 80168fc:	4990      	ldr	r1, [pc, #576]	; (8016b40 <mqtt_message_received+0x2c0>)
 80168fe:	488e      	ldr	r0, [pc, #568]	; (8016b38 <mqtt_message_received+0x2b8>)
 8016900:	f00e ff54 	bl	80257ac <iprintf>
 8016904:	f44f 7380 	mov.w	r3, #256	; 0x100
 8016908:	e175      	b.n	8016bf6 <mqtt_message_received+0x376>
             return MQTT_CONNECT_DISCONNECTED);

  if (pkt_type == MQTT_MSG_TYPE_CONNACK) {
 801690a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801690e:	2b02      	cmp	r3, #2
 8016910:	d123      	bne.n	801695a <mqtt_message_received+0xda>
    if (client->conn_state == MQTT_CONNECTING) {
 8016912:	68fb      	ldr	r3, [r7, #12]
 8016914:	7a9b      	ldrb	r3, [r3, #10]
 8016916:	2b02      	cmp	r3, #2
 8016918:	f040 8158 	bne.w	8016bcc <mqtt_message_received+0x34c>
      if (length < 2) {
 801691c:	893b      	ldrh	r3, [r7, #8]
 801691e:	2b01      	cmp	r3, #1
 8016920:	f240 8156 	bls.w	8016bd0 <mqtt_message_received+0x350>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short CONNACK message\n"));
        goto out_disconnect;
      }
      /* Get result code from CONNACK */
      res = (mqtt_connection_status_t)var_hdr_payload[1];
 8016924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016926:	3301      	adds	r3, #1
 8016928:	781b      	ldrb	r3, [r3, #0]
 801692a:	86fb      	strh	r3, [r7, #54]	; 0x36
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: Connect response code %d\n", res));
      if (res == MQTT_CONNECT_ACCEPTED) {
 801692c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801692e:	2b00      	cmp	r3, #0
 8016930:	f040 814c 	bne.w	8016bcc <mqtt_message_received+0x34c>
        /* Reset cyclic_tick when changing to connected state */
        client->cyclic_tick = 0;
 8016934:	68fb      	ldr	r3, [r7, #12]
 8016936:	2200      	movs	r2, #0
 8016938:	801a      	strh	r2, [r3, #0]
        client->conn_state = MQTT_CONNECTED;
 801693a:	68fb      	ldr	r3, [r7, #12]
 801693c:	2203      	movs	r2, #3
 801693e:	729a      	strb	r2, [r3, #10]
        /* Notify upper layer */
        if (client->connect_cb != 0) {
 8016940:	68fb      	ldr	r3, [r7, #12]
 8016942:	695b      	ldr	r3, [r3, #20]
 8016944:	2b00      	cmp	r3, #0
 8016946:	f000 8141 	beq.w	8016bcc <mqtt_message_received+0x34c>
          client->connect_cb(client, client->connect_arg, res);
 801694a:	68fb      	ldr	r3, [r7, #12]
 801694c:	695b      	ldr	r3, [r3, #20]
 801694e:	68fa      	ldr	r2, [r7, #12]
 8016950:	6911      	ldr	r1, [r2, #16]
 8016952:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8016954:	68f8      	ldr	r0, [r7, #12]
 8016956:	4798      	blx	r3
 8016958:	e138      	b.n	8016bcc <mqtt_message_received+0x34c>
        }
      }
    } else {
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: Received CONNACK in connected state\n"));
    }
  } else if (pkt_type == MQTT_MSG_TYPE_PINGRESP) {
 801695a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801695e:	2b0d      	cmp	r3, #13
 8016960:	f000 8134 	beq.w	8016bcc <mqtt_message_received+0x34c>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ( "mqtt_message_received: Received PINGRESP from server\n"));

  } else if (pkt_type == MQTT_MSG_TYPE_PUBLISH) {
 8016964:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016968:	2b03      	cmp	r3, #3
 801696a:	f040 80c7 	bne.w	8016afc <mqtt_message_received+0x27c>
    u16_t payload_offset = 0;
 801696e:	2300      	movs	r3, #0
 8016970:	86bb      	strh	r3, [r7, #52]	; 0x34
    u16_t payload_length = length;
 8016972:	893b      	ldrh	r3, [r7, #8]
 8016974:	867b      	strh	r3, [r7, #50]	; 0x32
    u8_t qos = MQTT_CTL_PACKET_QOS(client->rx_buffer[0]);
 8016976:	68fb      	ldr	r3, [r7, #12]
 8016978:	f893 366c 	ldrb.w	r3, [r3, #1644]	; 0x66c
 801697c:	105b      	asrs	r3, r3, #1
 801697e:	b2db      	uxtb	r3, r3
 8016980:	f003 0303 	and.w	r3, r3, #3
 8016984:	77fb      	strb	r3, [r7, #31]

    if (client->msg_idx <= MQTT_VAR_HEADER_BUFFER_LEN) {
 8016986:	68fb      	ldr	r3, [r7, #12]
 8016988:	f8d3 3668 	ldr.w	r3, [r3, #1640]	; 0x668
 801698c:	2b80      	cmp	r3, #128	; 0x80
 801698e:	f200 8081 	bhi.w	8016a94 <mqtt_message_received+0x214>
      /* Should have topic and pkt id*/
      u8_t *topic;
      u16_t after_topic;
      u8_t bkp;
      u16_t topic_len;
      u16_t qos_len = (qos ? 2U : 0U);
 8016992:	7ffb      	ldrb	r3, [r7, #31]
 8016994:	2b00      	cmp	r3, #0
 8016996:	d001      	beq.n	801699c <mqtt_message_received+0x11c>
 8016998:	2302      	movs	r3, #2
 801699a:	e000      	b.n	801699e <mqtt_message_received+0x11e>
 801699c:	2300      	movs	r3, #0
 801699e:	83bb      	strh	r3, [r7, #28]
      if (length < 2 + qos_len) {
 80169a0:	8bbb      	ldrh	r3, [r7, #28]
 80169a2:	1c5a      	adds	r2, r3, #1
 80169a4:	893b      	ldrh	r3, [r7, #8]
 80169a6:	429a      	cmp	r2, r3
 80169a8:	f280 8114 	bge.w	8016bd4 <mqtt_message_received+0x354>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short PUBLISH packet\n"));
        goto out_disconnect;
      }
      topic_len = var_hdr_payload[0];
 80169ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169ae:	781b      	ldrb	r3, [r3, #0]
 80169b0:	837b      	strh	r3, [r7, #26]
      topic_len = (topic_len << 8) + (u16_t)(var_hdr_payload[1]);
 80169b2:	8b7b      	ldrh	r3, [r7, #26]
 80169b4:	021b      	lsls	r3, r3, #8
 80169b6:	b29a      	uxth	r2, r3
 80169b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169ba:	3301      	adds	r3, #1
 80169bc:	781b      	ldrb	r3, [r3, #0]
 80169be:	b29b      	uxth	r3, r3
 80169c0:	4413      	add	r3, r2
 80169c2:	837b      	strh	r3, [r7, #26]
      if ((topic_len > length - (2 + qos_len)) ||
 80169c4:	8b7a      	ldrh	r2, [r7, #26]
 80169c6:	8939      	ldrh	r1, [r7, #8]
 80169c8:	8bbb      	ldrh	r3, [r7, #28]
 80169ca:	3302      	adds	r3, #2
 80169cc:	1acb      	subs	r3, r1, r3
 80169ce:	429a      	cmp	r2, r3
 80169d0:	f300 8102 	bgt.w	8016bd8 <mqtt_message_received+0x358>
          (topic_len > var_hdr_payload_bufsize - (2 + qos_len))) {
 80169d4:	8b7a      	ldrh	r2, [r7, #26]
 80169d6:	8bbb      	ldrh	r3, [r7, #28]
 80169d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80169da:	1acb      	subs	r3, r1, r3
 80169dc:	3b02      	subs	r3, #2
      if ((topic_len > length - (2 + qos_len)) ||
 80169de:	429a      	cmp	r2, r3
 80169e0:	f200 80fa 	bhi.w	8016bd8 <mqtt_message_received+0x358>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short PUBLISH packet (topic)\n"));
        goto out_disconnect;
      }

      topic = var_hdr_payload + 2;
 80169e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169e6:	3302      	adds	r3, #2
 80169e8:	617b      	str	r3, [r7, #20]
      after_topic = 2 + topic_len;
 80169ea:	8b7b      	ldrh	r3, [r7, #26]
 80169ec:	3302      	adds	r3, #2
 80169ee:	863b      	strh	r3, [r7, #48]	; 0x30
      /* Check buffer length, add one byte even for QoS 0 so that zero termination will fit */
      if ((after_topic + (qos ? 2U : 1U)) > var_hdr_payload_bufsize) {
 80169f0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80169f2:	7ffa      	ldrb	r2, [r7, #31]
 80169f4:	2a00      	cmp	r2, #0
 80169f6:	d001      	beq.n	80169fc <mqtt_message_received+0x17c>
 80169f8:	2202      	movs	r2, #2
 80169fa:	e000      	b.n	80169fe <mqtt_message_received+0x17e>
 80169fc:	2201      	movs	r2, #1
 80169fe:	4413      	add	r3, r2
 8016a00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016a02:	429a      	cmp	r2, r3
 8016a04:	f0c0 80ea 	bcc.w	8016bdc <mqtt_message_received+0x35c>
        LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: Receive buffer can not fit topic + pkt_id\n"));
        goto out_disconnect;
      }

      /* id for QoS 1 and 2 */
      if (qos > 0) {
 8016a08:	7ffb      	ldrb	r3, [r7, #31]
 8016a0a:	2b00      	cmp	r3, #0
 8016a0c:	d01a      	beq.n	8016a44 <mqtt_message_received+0x1c4>
        if (length < after_topic + 2U) {
 8016a0e:	893a      	ldrh	r2, [r7, #8]
 8016a10:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8016a12:	3302      	adds	r3, #2
 8016a14:	429a      	cmp	r2, r3
 8016a16:	f0c0 80e3 	bcc.w	8016be0 <mqtt_message_received+0x360>
          LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short PUBLISH packet (after_topic)\n"));
          goto out_disconnect;
        }
        client->inpub_pkt_id = ((u16_t)var_hdr_payload[after_topic] << 8) + (u16_t)var_hdr_payload[after_topic + 1];
 8016a1a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8016a1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016a1e:	4413      	add	r3, r2
 8016a20:	781b      	ldrb	r3, [r3, #0]
 8016a22:	b29b      	uxth	r3, r3
 8016a24:	021b      	lsls	r3, r3, #8
 8016a26:	b29a      	uxth	r2, r3
 8016a28:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8016a2a:	3301      	adds	r3, #1
 8016a2c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016a2e:	440b      	add	r3, r1
 8016a30:	781b      	ldrb	r3, [r3, #0]
 8016a32:	b29b      	uxth	r3, r3
 8016a34:	4413      	add	r3, r2
 8016a36:	b29a      	uxth	r2, r3
 8016a38:	68fb      	ldr	r3, [r7, #12]
 8016a3a:	811a      	strh	r2, [r3, #8]
        after_topic += 2;
 8016a3c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8016a3e:	3302      	adds	r3, #2
 8016a40:	863b      	strh	r3, [r7, #48]	; 0x30
 8016a42:	e002      	b.n	8016a4a <mqtt_message_received+0x1ca>
      } else {
        client->inpub_pkt_id = 0;
 8016a44:	68fb      	ldr	r3, [r7, #12]
 8016a46:	2200      	movs	r2, #0
 8016a48:	811a      	strh	r2, [r3, #8]
      }
      /* Take backup of byte after topic */
      bkp = topic[topic_len];
 8016a4a:	8b7b      	ldrh	r3, [r7, #26]
 8016a4c:	697a      	ldr	r2, [r7, #20]
 8016a4e:	4413      	add	r3, r2
 8016a50:	781b      	ldrb	r3, [r3, #0]
 8016a52:	74fb      	strb	r3, [r7, #19]
      /* Zero terminate string */
      topic[topic_len] = 0;
 8016a54:	8b7b      	ldrh	r3, [r7, #26]
 8016a56:	697a      	ldr	r2, [r7, #20]
 8016a58:	4413      	add	r3, r2
 8016a5a:	2200      	movs	r2, #0
 8016a5c:	701a      	strb	r2, [r3, #0]
      /* Payload data remaining in receive buffer */
      payload_length = length - after_topic;
 8016a5e:	893a      	ldrh	r2, [r7, #8]
 8016a60:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8016a62:	1ad3      	subs	r3, r2, r3
 8016a64:	867b      	strh	r3, [r7, #50]	; 0x32
      payload_offset = after_topic;
 8016a66:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8016a68:	86bb      	strh	r3, [r7, #52]	; 0x34

      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_incomming_publish: Received message with QoS %d at topic: %s, payload length %"U32_F"\n",
                                     qos, topic, remaining_length + payload_length));
      if (client->pub_cb != NULL) {
 8016a6a:	68fb      	ldr	r3, [r7, #12]
 8016a6c:	f8d3 3664 	ldr.w	r3, [r3, #1636]	; 0x664
 8016a70:	2b00      	cmp	r3, #0
 8016a72:	d00a      	beq.n	8016a8a <mqtt_message_received+0x20a>
        client->pub_cb(client->inpub_arg, (const char *)topic, remaining_length + payload_length);
 8016a74:	68fb      	ldr	r3, [r7, #12]
 8016a76:	f8d3 3664 	ldr.w	r3, [r3, #1636]	; 0x664
 8016a7a:	68fa      	ldr	r2, [r7, #12]
 8016a7c:	f8d2 065c 	ldr.w	r0, [r2, #1628]	; 0x65c
 8016a80:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 8016a82:	687a      	ldr	r2, [r7, #4]
 8016a84:	440a      	add	r2, r1
 8016a86:	6979      	ldr	r1, [r7, #20]
 8016a88:	4798      	blx	r3
      }
      /* Restore byte after topic */
      topic[topic_len] = bkp;
 8016a8a:	8b7b      	ldrh	r3, [r7, #26]
 8016a8c:	697a      	ldr	r2, [r7, #20]
 8016a8e:	4413      	add	r3, r2
 8016a90:	7cfa      	ldrb	r2, [r7, #19]
 8016a92:	701a      	strb	r2, [r3, #0]
    }
    if (payload_length > 0 || remaining_length == 0) {
 8016a94:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8016a96:	2b00      	cmp	r3, #0
 8016a98:	d103      	bne.n	8016aa2 <mqtt_message_received+0x222>
 8016a9a:	687b      	ldr	r3, [r7, #4]
 8016a9c:	2b00      	cmp	r3, #0
 8016a9e:	f040 8095 	bne.w	8016bcc <mqtt_message_received+0x34c>
      if (length < (size_t)(payload_offset + payload_length)) {
 8016aa2:	893b      	ldrh	r3, [r7, #8]
 8016aa4:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 8016aa6:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8016aa8:	440a      	add	r2, r1
 8016aaa:	4293      	cmp	r3, r2
 8016aac:	f0c0 809a 	bcc.w	8016be4 <mqtt_message_received+0x364>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short packet (payload)\n"));
        goto out_disconnect;
      }
      client->data_cb(client->inpub_arg, var_hdr_payload + payload_offset, payload_length, remaining_length == 0 ? MQTT_DATA_FLAG_LAST : 0);
 8016ab0:	68fb      	ldr	r3, [r7, #12]
 8016ab2:	f8d3 4660 	ldr.w	r4, [r3, #1632]	; 0x660
 8016ab6:	68fb      	ldr	r3, [r7, #12]
 8016ab8:	f8d3 065c 	ldr.w	r0, [r3, #1628]	; 0x65c
 8016abc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016abe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016ac0:	18d1      	adds	r1, r2, r3
 8016ac2:	687b      	ldr	r3, [r7, #4]
 8016ac4:	2b00      	cmp	r3, #0
 8016ac6:	bf0c      	ite	eq
 8016ac8:	2301      	moveq	r3, #1
 8016aca:	2300      	movne	r3, #0
 8016acc:	b2db      	uxtb	r3, r3
 8016ace:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8016ad0:	47a0      	blx	r4
      /* Reply if QoS > 0 */
      if (remaining_length == 0 && qos > 0) {
 8016ad2:	687b      	ldr	r3, [r7, #4]
 8016ad4:	2b00      	cmp	r3, #0
 8016ad6:	d179      	bne.n	8016bcc <mqtt_message_received+0x34c>
 8016ad8:	7ffb      	ldrb	r3, [r7, #31]
 8016ada:	2b00      	cmp	r3, #0
 8016adc:	d076      	beq.n	8016bcc <mqtt_message_received+0x34c>
        /* Send PUBACK for QoS 1 or PUBREC for QoS 2 */
        u8_t resp_msg = (qos == 1) ? MQTT_MSG_TYPE_PUBACK : MQTT_MSG_TYPE_PUBREC;
 8016ade:	7ffb      	ldrb	r3, [r7, #31]
 8016ae0:	2b01      	cmp	r3, #1
 8016ae2:	d101      	bne.n	8016ae8 <mqtt_message_received+0x268>
 8016ae4:	2304      	movs	r3, #4
 8016ae6:	e000      	b.n	8016aea <mqtt_message_received+0x26a>
 8016ae8:	2305      	movs	r3, #5
 8016aea:	74bb      	strb	r3, [r7, #18]
        LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_incomming_publish: Sending publish response: %s with pkt_id: %d\n",
                                       mqtt_msg_type_to_str(resp_msg), client->inpub_pkt_id));
        pub_ack_rec_rel_response(client, resp_msg, client->inpub_pkt_id, 0);
 8016aec:	68fb      	ldr	r3, [r7, #12]
 8016aee:	891a      	ldrh	r2, [r3, #8]
 8016af0:	7cb9      	ldrb	r1, [r7, #18]
 8016af2:	2300      	movs	r3, #0
 8016af4:	68f8      	ldr	r0, [r7, #12]
 8016af6:	f7ff fe69 	bl	80167cc <pub_ack_rec_rel_response>
 8016afa:	e067      	b.n	8016bcc <mqtt_message_received+0x34c>
      }
    }
  } else {
    /* Get packet identifier */
    pkt_id = (u16_t)var_hdr_payload[0] << 8;
 8016afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016afe:	781b      	ldrb	r3, [r3, #0]
 8016b00:	b29b      	uxth	r3, r3
 8016b02:	021b      	lsls	r3, r3, #8
 8016b04:	84bb      	strh	r3, [r7, #36]	; 0x24
    pkt_id |= (u16_t)var_hdr_payload[1];
 8016b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b08:	3301      	adds	r3, #1
 8016b0a:	781b      	ldrb	r3, [r3, #0]
 8016b0c:	b29a      	uxth	r2, r3
 8016b0e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016b10:	4313      	orrs	r3, r2
 8016b12:	84bb      	strh	r3, [r7, #36]	; 0x24
    if (pkt_id == 0) {
 8016b14:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016b16:	2b00      	cmp	r3, #0
 8016b18:	d066      	beq.n	8016be8 <mqtt_message_received+0x368>
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: Got message with illegal packet identifier: 0\n"));
      goto out_disconnect;
    }
    if (pkt_type == MQTT_MSG_TYPE_PUBREC) {
 8016b1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016b1e:	2b05      	cmp	r3, #5
 8016b20:	d110      	bne.n	8016b44 <mqtt_message_received+0x2c4>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: PUBREC, sending PUBREL with pkt_id: %d\n", pkt_id));
      pub_ack_rec_rel_response(client, MQTT_MSG_TYPE_PUBREL, pkt_id, 1);
 8016b22:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016b24:	2301      	movs	r3, #1
 8016b26:	2106      	movs	r1, #6
 8016b28:	68f8      	ldr	r0, [r7, #12]
 8016b2a:	f7ff fe4f 	bl	80167cc <pub_ack_rec_rel_response>
 8016b2e:	e04d      	b.n	8016bcc <mqtt_message_received+0x34c>
 8016b30:	0802acf4 	.word	0x0802acf4
 8016b34:	0802af28 	.word	0x0802af28
 8016b38:	0802ad6c 	.word	0x0802ad6c
 8016b3c:	0802af58 	.word	0x0802af58
 8016b40:	0802af7c 	.word	0x0802af7c

    } else if (pkt_type == MQTT_MSG_TYPE_PUBREL) {
 8016b44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016b48:	2b06      	cmp	r3, #6
 8016b4a:	d106      	bne.n	8016b5a <mqtt_message_received+0x2da>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: PUBREL, sending PUBCOMP response with pkt_id: %d\n", pkt_id));
      pub_ack_rec_rel_response(client, MQTT_MSG_TYPE_PUBCOMP, pkt_id, 0);
 8016b4c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016b4e:	2300      	movs	r3, #0
 8016b50:	2107      	movs	r1, #7
 8016b52:	68f8      	ldr	r0, [r7, #12]
 8016b54:	f7ff fe3a 	bl	80167cc <pub_ack_rec_rel_response>
 8016b58:	e038      	b.n	8016bcc <mqtt_message_received+0x34c>

    } else if (pkt_type == MQTT_MSG_TYPE_SUBACK || pkt_type == MQTT_MSG_TYPE_UNSUBACK ||
 8016b5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016b5e:	2b09      	cmp	r3, #9
 8016b60:	d00b      	beq.n	8016b7a <mqtt_message_received+0x2fa>
 8016b62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016b66:	2b0b      	cmp	r3, #11
 8016b68:	d007      	beq.n	8016b7a <mqtt_message_received+0x2fa>
 8016b6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016b6e:	2b07      	cmp	r3, #7
 8016b70:	d003      	beq.n	8016b7a <mqtt_message_received+0x2fa>
               pkt_type == MQTT_MSG_TYPE_PUBCOMP || pkt_type == MQTT_MSG_TYPE_PUBACK) {
 8016b72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016b76:	2b04      	cmp	r3, #4
 8016b78:	d138      	bne.n	8016bec <mqtt_message_received+0x36c>
      struct mqtt_request_t *r = mqtt_take_request(&client->pend_req_queue, pkt_id);
 8016b7a:	68fb      	ldr	r3, [r7, #12]
 8016b7c:	3318      	adds	r3, #24
 8016b7e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016b80:	4611      	mov	r1, r2
 8016b82:	4618      	mov	r0, r3
 8016b84:	f7ff fb3e 	bl	8016204 <mqtt_take_request>
 8016b88:	6238      	str	r0, [r7, #32]
      if (r != NULL) {
 8016b8a:	6a3b      	ldr	r3, [r7, #32]
 8016b8c:	2b00      	cmp	r3, #0
 8016b8e:	d01c      	beq.n	8016bca <mqtt_message_received+0x34a>
        LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: %s response with id %d\n", mqtt_msg_type_to_str(pkt_type), pkt_id));
        if (pkt_type == MQTT_MSG_TYPE_SUBACK) {
 8016b90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016b94:	2b09      	cmp	r3, #9
 8016b96:	d10a      	bne.n	8016bae <mqtt_message_received+0x32e>
          if (length < 3) {
 8016b98:	893b      	ldrh	r3, [r7, #8]
 8016b9a:	2b02      	cmp	r3, #2
 8016b9c:	d928      	bls.n	8016bf0 <mqtt_message_received+0x370>
            LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: To small SUBACK packet\n"));
            goto out_disconnect;
          } else {
            mqtt_incomming_suback(r, var_hdr_payload[2]);
 8016b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ba0:	3302      	adds	r3, #2
 8016ba2:	781b      	ldrb	r3, [r3, #0]
 8016ba4:	4619      	mov	r1, r3
 8016ba6:	6a38      	ldr	r0, [r7, #32]
 8016ba8:	f7ff fe4f 	bl	801684a <mqtt_incomming_suback>
 8016bac:	e00a      	b.n	8016bc4 <mqtt_message_received+0x344>
          }
        } else if (r->cb != NULL) {
 8016bae:	6a3b      	ldr	r3, [r7, #32]
 8016bb0:	685b      	ldr	r3, [r3, #4]
 8016bb2:	2b00      	cmp	r3, #0
 8016bb4:	d006      	beq.n	8016bc4 <mqtt_message_received+0x344>
          r->cb(r->arg, ERR_OK);
 8016bb6:	6a3b      	ldr	r3, [r7, #32]
 8016bb8:	685b      	ldr	r3, [r3, #4]
 8016bba:	6a3a      	ldr	r2, [r7, #32]
 8016bbc:	6892      	ldr	r2, [r2, #8]
 8016bbe:	2100      	movs	r1, #0
 8016bc0:	4610      	mov	r0, r2
 8016bc2:	4798      	blx	r3
        }
        mqtt_delete_request(r);
 8016bc4:	6a38      	ldr	r0, [r7, #32]
 8016bc6:	f7ff fb0d 	bl	80161e4 <mqtt_delete_request>
               pkt_type == MQTT_MSG_TYPE_PUBCOMP || pkt_type == MQTT_MSG_TYPE_PUBACK) {
 8016bca:	bf00      	nop
    } else {
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ( "mqtt_message_received: Received unknown message type: %d\n", pkt_type));
      goto out_disconnect;
    }
  }
  return res;
 8016bcc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8016bce:	e012      	b.n	8016bf6 <mqtt_message_received+0x376>
        goto out_disconnect;
 8016bd0:	bf00      	nop
 8016bd2:	e00e      	b.n	8016bf2 <mqtt_message_received+0x372>
        goto out_disconnect;
 8016bd4:	bf00      	nop
 8016bd6:	e00c      	b.n	8016bf2 <mqtt_message_received+0x372>
        goto out_disconnect;
 8016bd8:	bf00      	nop
 8016bda:	e00a      	b.n	8016bf2 <mqtt_message_received+0x372>
        goto out_disconnect;
 8016bdc:	bf00      	nop
 8016bde:	e008      	b.n	8016bf2 <mqtt_message_received+0x372>
          goto out_disconnect;
 8016be0:	bf00      	nop
 8016be2:	e006      	b.n	8016bf2 <mqtt_message_received+0x372>
        goto out_disconnect;
 8016be4:	bf00      	nop
 8016be6:	e004      	b.n	8016bf2 <mqtt_message_received+0x372>
      goto out_disconnect;
 8016be8:	bf00      	nop
 8016bea:	e002      	b.n	8016bf2 <mqtt_message_received+0x372>
      goto out_disconnect;
 8016bec:	bf00      	nop
 8016bee:	e000      	b.n	8016bf2 <mqtt_message_received+0x372>
            goto out_disconnect;
 8016bf0:	bf00      	nop
out_disconnect:
  return MQTT_CONNECT_DISCONNECTED;
 8016bf2:	f44f 7380 	mov.w	r3, #256	; 0x100
}
 8016bf6:	4618      	mov	r0, r3
 8016bf8:	373c      	adds	r7, #60	; 0x3c
 8016bfa:	46bd      	mov	sp, r7
 8016bfc:	bd90      	pop	{r4, r7, pc}
 8016bfe:	bf00      	nop

08016c00 <mqtt_parse_incoming>:
 * @param p PBUF chain of received data
 * @return Connection status
 */
static mqtt_connection_status_t
mqtt_parse_incoming(mqtt_client_t *client, struct pbuf *p)
{
 8016c00:	b580      	push	{r7, lr}
 8016c02:	b088      	sub	sp, #32
 8016c04:	af00      	add	r7, sp, #0
 8016c06:	6078      	str	r0, [r7, #4]
 8016c08:	6039      	str	r1, [r7, #0]
  u16_t in_offset = 0;
 8016c0a:	2300      	movs	r3, #0
 8016c0c:	83fb      	strh	r3, [r7, #30]
  u32_t msg_rem_len = 0;
 8016c0e:	2300      	movs	r3, #0
 8016c10:	61bb      	str	r3, [r7, #24]
  u8_t fixed_hdr_idx = 0;
 8016c12:	2300      	movs	r3, #0
 8016c14:	75fb      	strb	r3, [r7, #23]
  u8_t b = 0;
 8016c16:	2300      	movs	r3, #0
 8016c18:	75bb      	strb	r3, [r7, #22]

  while (p->tot_len > in_offset) {
 8016c1a:	e0c6      	b.n	8016daa <mqtt_parse_incoming+0x1aa>
    /* We ALWAYS parse the header here first. Even if the header was not
       included in this segment, we re-parse it here by buffering it in
       client->rx_buffer. client->msg_idx keeps track of this. */
    if ((fixed_hdr_idx < 2) || ((b & 0x80) != 0)) {
 8016c1c:	7dfb      	ldrb	r3, [r7, #23]
 8016c1e:	2b01      	cmp	r3, #1
 8016c20:	d903      	bls.n	8016c2a <mqtt_parse_incoming+0x2a>
 8016c22:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8016c26:	2b00      	cmp	r3, #0
 8016c28:	da53      	bge.n	8016cd2 <mqtt_parse_incoming+0xd2>

      if (fixed_hdr_idx < client->msg_idx) {
 8016c2a:	7dfa      	ldrb	r2, [r7, #23]
 8016c2c:	687b      	ldr	r3, [r7, #4]
 8016c2e:	f8d3 3668 	ldr.w	r3, [r3, #1640]	; 0x668
 8016c32:	429a      	cmp	r2, r3
 8016c34:	d206      	bcs.n	8016c44 <mqtt_parse_incoming+0x44>
        /* parse header from old pbuf (buffered in client->rx_buffer) */
        b = client->rx_buffer[fixed_hdr_idx];
 8016c36:	7dfb      	ldrb	r3, [r7, #23]
 8016c38:	687a      	ldr	r2, [r7, #4]
 8016c3a:	4413      	add	r3, r2
 8016c3c:	f893 366c 	ldrb.w	r3, [r3, #1644]	; 0x66c
 8016c40:	75bb      	strb	r3, [r7, #22]
 8016c42:	e014      	b.n	8016c6e <mqtt_parse_incoming+0x6e>
      } else {
        /* parse header from this pbuf and save it in client->rx_buffer in case
           it comes in segmented */
        b = pbuf_get_at(p, in_offset++);
 8016c44:	8bfb      	ldrh	r3, [r7, #30]
 8016c46:	1c5a      	adds	r2, r3, #1
 8016c48:	83fa      	strh	r2, [r7, #30]
 8016c4a:	4619      	mov	r1, r3
 8016c4c:	6838      	ldr	r0, [r7, #0]
 8016c4e:	f002 fd09 	bl	8019664 <pbuf_get_at>
 8016c52:	4603      	mov	r3, r0
 8016c54:	75bb      	strb	r3, [r7, #22]
        client->rx_buffer[client->msg_idx++] = b;
 8016c56:	687b      	ldr	r3, [r7, #4]
 8016c58:	f8d3 3668 	ldr.w	r3, [r3, #1640]	; 0x668
 8016c5c:	1c59      	adds	r1, r3, #1
 8016c5e:	687a      	ldr	r2, [r7, #4]
 8016c60:	f8c2 1668 	str.w	r1, [r2, #1640]	; 0x668
 8016c64:	687a      	ldr	r2, [r7, #4]
 8016c66:	4413      	add	r3, r2
 8016c68:	7dba      	ldrb	r2, [r7, #22]
 8016c6a:	f883 266c 	strb.w	r2, [r3, #1644]	; 0x66c
      }
      fixed_hdr_idx++;
 8016c6e:	7dfb      	ldrb	r3, [r7, #23]
 8016c70:	3301      	adds	r3, #1
 8016c72:	75fb      	strb	r3, [r7, #23]

      if (fixed_hdr_idx >= 2) {
 8016c74:	7dfb      	ldrb	r3, [r7, #23]
 8016c76:	2b01      	cmp	r3, #1
 8016c78:	f240 8097 	bls.w	8016daa <mqtt_parse_incoming+0x1aa>
        /* fixed header contains at least 2 bytes but can contain more, depending on
           'remaining length'. All bytes but the last of this have 0x80 set to
           indicate more bytes are coming. */
        msg_rem_len |= (u32_t)(b & 0x7f) << ((fixed_hdr_idx - 2) * 7);
 8016c7c:	7dbb      	ldrb	r3, [r7, #22]
 8016c7e:	f003 017f 	and.w	r1, r3, #127	; 0x7f
 8016c82:	7dfb      	ldrb	r3, [r7, #23]
 8016c84:	1e9a      	subs	r2, r3, #2
 8016c86:	4613      	mov	r3, r2
 8016c88:	00db      	lsls	r3, r3, #3
 8016c8a:	1a9b      	subs	r3, r3, r2
 8016c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8016c90:	69ba      	ldr	r2, [r7, #24]
 8016c92:	4313      	orrs	r3, r2
 8016c94:	61bb      	str	r3, [r7, #24]
        if ((b & 0x80) == 0) {
 8016c96:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8016c9a:	2b00      	cmp	r3, #0
 8016c9c:	f2c0 8085 	blt.w	8016daa <mqtt_parse_incoming+0x1aa>
          /* fixed header is done */
          LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_parse_incoming: Remaining length after fixed header: %"U32_F"\n", msg_rem_len));
          if (msg_rem_len == 0) {
 8016ca0:	69bb      	ldr	r3, [r7, #24]
 8016ca2:	2b00      	cmp	r3, #0
 8016ca4:	d10c      	bne.n	8016cc0 <mqtt_parse_incoming+0xc0>
            /* Complete message with no extra headers of payload received */
            mqtt_message_received(client, fixed_hdr_idx, 0, 0);
 8016ca6:	7df9      	ldrb	r1, [r7, #23]
 8016ca8:	2300      	movs	r3, #0
 8016caa:	2200      	movs	r2, #0
 8016cac:	6878      	ldr	r0, [r7, #4]
 8016cae:	f7ff fde7 	bl	8016880 <mqtt_message_received>
            client->msg_idx = 0;
 8016cb2:	687b      	ldr	r3, [r7, #4]
 8016cb4:	2200      	movs	r2, #0
 8016cb6:	f8c3 2668 	str.w	r2, [r3, #1640]	; 0x668
            fixed_hdr_idx = 0;
 8016cba:	2300      	movs	r3, #0
 8016cbc:	75fb      	strb	r3, [r7, #23]
 8016cbe:	e074      	b.n	8016daa <mqtt_parse_incoming+0x1aa>
          } else {
            /* Bytes remaining in message (changes remaining length if this is
               not the first segment of this message) */
            msg_rem_len = (msg_rem_len + fixed_hdr_idx) - client->msg_idx;
 8016cc0:	7dfa      	ldrb	r2, [r7, #23]
 8016cc2:	69bb      	ldr	r3, [r7, #24]
 8016cc4:	441a      	add	r2, r3
 8016cc6:	687b      	ldr	r3, [r7, #4]
 8016cc8:	f8d3 3668 	ldr.w	r3, [r3, #1640]	; 0x668
 8016ccc:	1ad3      	subs	r3, r2, r3
 8016cce:	61bb      	str	r3, [r7, #24]
      if (fixed_hdr_idx >= 2) {
 8016cd0:	e06b      	b.n	8016daa <mqtt_parse_incoming+0x1aa>
      }
    } else {
      /* Fixed header has been parsed, parse variable header */
      u16_t cpy_len, cpy_start, buffer_space;

      cpy_start = (client->msg_idx - fixed_hdr_idx) % (MQTT_VAR_HEADER_BUFFER_LEN - fixed_hdr_idx) + fixed_hdr_idx;
 8016cd2:	687b      	ldr	r3, [r7, #4]
 8016cd4:	f8d3 2668 	ldr.w	r2, [r3, #1640]	; 0x668
 8016cd8:	7dfb      	ldrb	r3, [r7, #23]
 8016cda:	1ad3      	subs	r3, r2, r3
 8016cdc:	7dfa      	ldrb	r2, [r7, #23]
 8016cde:	f1c2 0280 	rsb	r2, r2, #128	; 0x80
 8016ce2:	fbb3 f1f2 	udiv	r1, r3, r2
 8016ce6:	fb01 f202 	mul.w	r2, r1, r2
 8016cea:	1a9b      	subs	r3, r3, r2
 8016cec:	b29a      	uxth	r2, r3
 8016cee:	7dfb      	ldrb	r3, [r7, #23]
 8016cf0:	b29b      	uxth	r3, r3
 8016cf2:	4413      	add	r3, r2
 8016cf4:	827b      	strh	r3, [r7, #18]

      /* Allow to copy the lesser one of available length in input data or bytes remaining in message */
      cpy_len = (u16_t)LWIP_MIN((u16_t)(p->tot_len - in_offset), msg_rem_len);
 8016cf6:	683b      	ldr	r3, [r7, #0]
 8016cf8:	891a      	ldrh	r2, [r3, #8]
 8016cfa:	8bfb      	ldrh	r3, [r7, #30]
 8016cfc:	1ad3      	subs	r3, r2, r3
 8016cfe:	b29b      	uxth	r3, r3
 8016d00:	461a      	mov	r2, r3
 8016d02:	69bb      	ldr	r3, [r7, #24]
 8016d04:	4293      	cmp	r3, r2
 8016d06:	d905      	bls.n	8016d14 <mqtt_parse_incoming+0x114>
 8016d08:	683b      	ldr	r3, [r7, #0]
 8016d0a:	891a      	ldrh	r2, [r3, #8]
 8016d0c:	8bfb      	ldrh	r3, [r7, #30]
 8016d0e:	1ad3      	subs	r3, r2, r3
 8016d10:	b29b      	uxth	r3, r3
 8016d12:	e001      	b.n	8016d18 <mqtt_parse_incoming+0x118>
 8016d14:	69bb      	ldr	r3, [r7, #24]
 8016d16:	b29b      	uxth	r3, r3
 8016d18:	82bb      	strh	r3, [r7, #20]

      /* Limit to available space in buffer */
      buffer_space = MQTT_VAR_HEADER_BUFFER_LEN - cpy_start;
 8016d1a:	8a7b      	ldrh	r3, [r7, #18]
 8016d1c:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8016d20:	823b      	strh	r3, [r7, #16]
      if (cpy_len > buffer_space) {
 8016d22:	8aba      	ldrh	r2, [r7, #20]
 8016d24:	8a3b      	ldrh	r3, [r7, #16]
 8016d26:	429a      	cmp	r2, r3
 8016d28:	d901      	bls.n	8016d2e <mqtt_parse_incoming+0x12e>
        cpy_len = buffer_space;
 8016d2a:	8a3b      	ldrh	r3, [r7, #16]
 8016d2c:	82bb      	strh	r3, [r7, #20]
      }
      pbuf_copy_partial(p, client->rx_buffer + cpy_start, cpy_len, in_offset);
 8016d2e:	687b      	ldr	r3, [r7, #4]
 8016d30:	f203 626c 	addw	r2, r3, #1644	; 0x66c
 8016d34:	8a7b      	ldrh	r3, [r7, #18]
 8016d36:	18d1      	adds	r1, r2, r3
 8016d38:	8bfb      	ldrh	r3, [r7, #30]
 8016d3a:	8aba      	ldrh	r2, [r7, #20]
 8016d3c:	6838      	ldr	r0, [r7, #0]
 8016d3e:	f002 fbc3 	bl	80194c8 <pbuf_copy_partial>

      /* Advance get and put indexes  */
      client->msg_idx += cpy_len;
 8016d42:	687b      	ldr	r3, [r7, #4]
 8016d44:	f8d3 2668 	ldr.w	r2, [r3, #1640]	; 0x668
 8016d48:	8abb      	ldrh	r3, [r7, #20]
 8016d4a:	441a      	add	r2, r3
 8016d4c:	687b      	ldr	r3, [r7, #4]
 8016d4e:	f8c3 2668 	str.w	r2, [r3, #1640]	; 0x668
      in_offset += cpy_len;
 8016d52:	8bfa      	ldrh	r2, [r7, #30]
 8016d54:	8abb      	ldrh	r3, [r7, #20]
 8016d56:	4413      	add	r3, r2
 8016d58:	83fb      	strh	r3, [r7, #30]
      msg_rem_len -= cpy_len;
 8016d5a:	8abb      	ldrh	r3, [r7, #20]
 8016d5c:	69ba      	ldr	r2, [r7, #24]
 8016d5e:	1ad3      	subs	r3, r2, r3
 8016d60:	61bb      	str	r3, [r7, #24]

      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_parse_incoming: msg_idx: %"U32_F", cpy_len: %"U16_F", remaining %"U32_F"\n", client->msg_idx, cpy_len, msg_rem_len));
      if ((msg_rem_len == 0) || (cpy_len == buffer_space)) {
 8016d62:	69bb      	ldr	r3, [r7, #24]
 8016d64:	2b00      	cmp	r3, #0
 8016d66:	d003      	beq.n	8016d70 <mqtt_parse_incoming+0x170>
 8016d68:	8aba      	ldrh	r2, [r7, #20]
 8016d6a:	8a3b      	ldrh	r3, [r7, #16]
 8016d6c:	429a      	cmp	r2, r3
 8016d6e:	d11c      	bne.n	8016daa <mqtt_parse_incoming+0x1aa>
        /* Whole message received or buffer is full */
        mqtt_connection_status_t res = mqtt_message_received(client, fixed_hdr_idx, (cpy_start + cpy_len) - fixed_hdr_idx, msg_rem_len);
 8016d70:	8a7a      	ldrh	r2, [r7, #18]
 8016d72:	8abb      	ldrh	r3, [r7, #20]
 8016d74:	4413      	add	r3, r2
 8016d76:	b29a      	uxth	r2, r3
 8016d78:	7dfb      	ldrb	r3, [r7, #23]
 8016d7a:	b29b      	uxth	r3, r3
 8016d7c:	1ad3      	subs	r3, r2, r3
 8016d7e:	b29a      	uxth	r2, r3
 8016d80:	7df9      	ldrb	r1, [r7, #23]
 8016d82:	69bb      	ldr	r3, [r7, #24]
 8016d84:	6878      	ldr	r0, [r7, #4]
 8016d86:	f7ff fd7b 	bl	8016880 <mqtt_message_received>
 8016d8a:	4603      	mov	r3, r0
 8016d8c:	81fb      	strh	r3, [r7, #14]
        if (res != MQTT_CONNECT_ACCEPTED) {
 8016d8e:	89fb      	ldrh	r3, [r7, #14]
 8016d90:	2b00      	cmp	r3, #0
 8016d92:	d001      	beq.n	8016d98 <mqtt_parse_incoming+0x198>
          return res;
 8016d94:	89fb      	ldrh	r3, [r7, #14]
 8016d96:	e00f      	b.n	8016db8 <mqtt_parse_incoming+0x1b8>
        }
        if (msg_rem_len == 0) {
 8016d98:	69bb      	ldr	r3, [r7, #24]
 8016d9a:	2b00      	cmp	r3, #0
 8016d9c:	d105      	bne.n	8016daa <mqtt_parse_incoming+0x1aa>
          /* Reset parser state */
          client->msg_idx = 0;
 8016d9e:	687b      	ldr	r3, [r7, #4]
 8016da0:	2200      	movs	r2, #0
 8016da2:	f8c3 2668 	str.w	r2, [r3, #1640]	; 0x668
          /* msg_tot_len = 0; */
          fixed_hdr_idx = 0;
 8016da6:	2300      	movs	r3, #0
 8016da8:	75fb      	strb	r3, [r7, #23]
  while (p->tot_len > in_offset) {
 8016daa:	683b      	ldr	r3, [r7, #0]
 8016dac:	891b      	ldrh	r3, [r3, #8]
 8016dae:	8bfa      	ldrh	r2, [r7, #30]
 8016db0:	429a      	cmp	r2, r3
 8016db2:	f4ff af33 	bcc.w	8016c1c <mqtt_parse_incoming+0x1c>
        }
      }
    }
  }
  return MQTT_CONNECT_ACCEPTED;
 8016db6:	2300      	movs	r3, #0
}
 8016db8:	4618      	mov	r0, r3
 8016dba:	3720      	adds	r7, #32
 8016dbc:	46bd      	mov	sp, r7
 8016dbe:	bd80      	pop	{r7, pc}

08016dc0 <mqtt_tcp_recv_cb>:
 * @param err Passed as return value if not ERR_OK
 * @return ERR_OK or err passed into callback
 */
static err_t
mqtt_tcp_recv_cb(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8016dc0:	b580      	push	{r7, lr}
 8016dc2:	b086      	sub	sp, #24
 8016dc4:	af00      	add	r7, sp, #0
 8016dc6:	60f8      	str	r0, [r7, #12]
 8016dc8:	60b9      	str	r1, [r7, #8]
 8016dca:	607a      	str	r2, [r7, #4]
 8016dcc:	70fb      	strb	r3, [r7, #3]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 8016dce:	68fb      	ldr	r3, [r7, #12]
 8016dd0:	617b      	str	r3, [r7, #20]
  LWIP_ASSERT("mqtt_tcp_recv_cb: client != NULL", client != NULL);
 8016dd2:	697b      	ldr	r3, [r7, #20]
 8016dd4:	2b00      	cmp	r3, #0
 8016dd6:	d106      	bne.n	8016de6 <mqtt_tcp_recv_cb+0x26>
 8016dd8:	4b24      	ldr	r3, [pc, #144]	; (8016e6c <mqtt_tcp_recv_cb+0xac>)
 8016dda:	f240 32a7 	movw	r2, #935	; 0x3a7
 8016dde:	4924      	ldr	r1, [pc, #144]	; (8016e70 <mqtt_tcp_recv_cb+0xb0>)
 8016de0:	4824      	ldr	r0, [pc, #144]	; (8016e74 <mqtt_tcp_recv_cb+0xb4>)
 8016de2:	f00e fce3 	bl	80257ac <iprintf>
  LWIP_ASSERT("mqtt_tcp_recv_cb: client->conn == pcb", client->conn == pcb);
 8016de6:	697b      	ldr	r3, [r7, #20]
 8016de8:	68db      	ldr	r3, [r3, #12]
 8016dea:	68ba      	ldr	r2, [r7, #8]
 8016dec:	429a      	cmp	r2, r3
 8016dee:	d006      	beq.n	8016dfe <mqtt_tcp_recv_cb+0x3e>
 8016df0:	4b1e      	ldr	r3, [pc, #120]	; (8016e6c <mqtt_tcp_recv_cb+0xac>)
 8016df2:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8016df6:	4920      	ldr	r1, [pc, #128]	; (8016e78 <mqtt_tcp_recv_cb+0xb8>)
 8016df8:	481e      	ldr	r0, [pc, #120]	; (8016e74 <mqtt_tcp_recv_cb+0xb4>)
 8016dfa:	f00e fcd7 	bl	80257ac <iprintf>

  if (p == NULL) {
 8016dfe:	687b      	ldr	r3, [r7, #4]
 8016e00:	2b00      	cmp	r3, #0
 8016e02:	d105      	bne.n	8016e10 <mqtt_tcp_recv_cb+0x50>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_recv_cb: Recv pbuf=NULL, remote has closed connection\n"));
    mqtt_close(client, MQTT_CONNECT_DISCONNECTED);
 8016e04:	f44f 7180 	mov.w	r1, #256	; 0x100
 8016e08:	6978      	ldr	r0, [r7, #20]
 8016e0a:	f7ff fbe5 	bl	80165d8 <mqtt_close>
 8016e0e:	e027      	b.n	8016e60 <mqtt_tcp_recv_cb+0xa0>
  } else {
    mqtt_connection_status_t res;
    if (err != ERR_OK) {
 8016e10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016e14:	2b00      	cmp	r3, #0
 8016e16:	d005      	beq.n	8016e24 <mqtt_tcp_recv_cb+0x64>
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_tcp_recv_cb: Recv err=%d\n", err));
      pbuf_free(p);
 8016e18:	6878      	ldr	r0, [r7, #4]
 8016e1a:	f002 f94f 	bl	80190bc <pbuf_free>
      return err;
 8016e1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016e22:	e01e      	b.n	8016e62 <mqtt_tcp_recv_cb+0xa2>
    }

    /* Tell remote that data has been received */
    altcp_recved(pcb, p->tot_len);
 8016e24:	687b      	ldr	r3, [r7, #4]
 8016e26:	891b      	ldrh	r3, [r3, #8]
 8016e28:	4619      	mov	r1, r3
 8016e2a:	68b8      	ldr	r0, [r7, #8]
 8016e2c:	f003 f84c 	bl	8019ec8 <tcp_recved>
    res = mqtt_parse_incoming(client, p);
 8016e30:	6879      	ldr	r1, [r7, #4]
 8016e32:	6978      	ldr	r0, [r7, #20]
 8016e34:	f7ff fee4 	bl	8016c00 <mqtt_parse_incoming>
 8016e38:	4603      	mov	r3, r0
 8016e3a:	827b      	strh	r3, [r7, #18]
    pbuf_free(p);
 8016e3c:	6878      	ldr	r0, [r7, #4]
 8016e3e:	f002 f93d 	bl	80190bc <pbuf_free>

    if (res != MQTT_CONNECT_ACCEPTED) {
 8016e42:	8a7b      	ldrh	r3, [r7, #18]
 8016e44:	2b00      	cmp	r3, #0
 8016e46:	d004      	beq.n	8016e52 <mqtt_tcp_recv_cb+0x92>
      mqtt_close(client, res);
 8016e48:	8a7b      	ldrh	r3, [r7, #18]
 8016e4a:	4619      	mov	r1, r3
 8016e4c:	6978      	ldr	r0, [r7, #20]
 8016e4e:	f7ff fbc3 	bl	80165d8 <mqtt_close>
    }
    /* If keep alive functionality is used */
    if (client->keep_alive != 0) {
 8016e52:	697b      	ldr	r3, [r7, #20]
 8016e54:	885b      	ldrh	r3, [r3, #2]
 8016e56:	2b00      	cmp	r3, #0
 8016e58:	d002      	beq.n	8016e60 <mqtt_tcp_recv_cb+0xa0>
      /* Reset server alive watchdog */
      client->server_watchdog = 0;
 8016e5a:	697b      	ldr	r3, [r7, #20]
 8016e5c:	2200      	movs	r2, #0
 8016e5e:	809a      	strh	r2, [r3, #4]
    }

  }
  return ERR_OK;
 8016e60:	2300      	movs	r3, #0
}
 8016e62:	4618      	mov	r0, r3
 8016e64:	3718      	adds	r7, #24
 8016e66:	46bd      	mov	sp, r7
 8016e68:	bd80      	pop	{r7, pc}
 8016e6a:	bf00      	nop
 8016e6c:	0802acf4 	.word	0x0802acf4
 8016e70:	0802af94 	.word	0x0802af94
 8016e74:	0802ad6c 	.word	0x0802ad6c
 8016e78:	0802afb8 	.word	0x0802afb8

08016e7c <mqtt_tcp_sent_cb>:
 * @param len Number of bytes sent
 * @return ERR_OK
 */
static err_t
mqtt_tcp_sent_cb(void *arg, struct altcp_pcb *tpcb, u16_t len)
{
 8016e7c:	b580      	push	{r7, lr}
 8016e7e:	b086      	sub	sp, #24
 8016e80:	af00      	add	r7, sp, #0
 8016e82:	60f8      	str	r0, [r7, #12]
 8016e84:	60b9      	str	r1, [r7, #8]
 8016e86:	4613      	mov	r3, r2
 8016e88:	80fb      	strh	r3, [r7, #6]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 8016e8a:	68fb      	ldr	r3, [r7, #12]
 8016e8c:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(tpcb);
  LWIP_UNUSED_ARG(len);

  if (client->conn_state == MQTT_CONNECTED) {
 8016e8e:	697b      	ldr	r3, [r7, #20]
 8016e90:	7a9b      	ldrb	r3, [r3, #10]
 8016e92:	2b03      	cmp	r3, #3
 8016e94:	d127      	bne.n	8016ee6 <mqtt_tcp_sent_cb+0x6a>
    struct mqtt_request_t *r;

    /* Reset keep-alive send timer and server watchdog */
    client->cyclic_tick = 0;
 8016e96:	697b      	ldr	r3, [r7, #20]
 8016e98:	2200      	movs	r2, #0
 8016e9a:	801a      	strh	r2, [r3, #0]
    client->server_watchdog = 0;
 8016e9c:	697b      	ldr	r3, [r7, #20]
 8016e9e:	2200      	movs	r2, #0
 8016ea0:	809a      	strh	r2, [r3, #4]
    /* QoS 0 publish has no response from server, so call its callbacks here */
    while ((r = mqtt_take_request(&client->pend_req_queue, 0)) != NULL) {
 8016ea2:	e00d      	b.n	8016ec0 <mqtt_tcp_sent_cb+0x44>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_sent_cb: Calling QoS 0 publish complete callback\n"));
      if (r->cb != NULL) {
 8016ea4:	693b      	ldr	r3, [r7, #16]
 8016ea6:	685b      	ldr	r3, [r3, #4]
 8016ea8:	2b00      	cmp	r3, #0
 8016eaa:	d006      	beq.n	8016eba <mqtt_tcp_sent_cb+0x3e>
        r->cb(r->arg, ERR_OK);
 8016eac:	693b      	ldr	r3, [r7, #16]
 8016eae:	685b      	ldr	r3, [r3, #4]
 8016eb0:	693a      	ldr	r2, [r7, #16]
 8016eb2:	6892      	ldr	r2, [r2, #8]
 8016eb4:	2100      	movs	r1, #0
 8016eb6:	4610      	mov	r0, r2
 8016eb8:	4798      	blx	r3
      }
      mqtt_delete_request(r);
 8016eba:	6938      	ldr	r0, [r7, #16]
 8016ebc:	f7ff f992 	bl	80161e4 <mqtt_delete_request>
    while ((r = mqtt_take_request(&client->pend_req_queue, 0)) != NULL) {
 8016ec0:	697b      	ldr	r3, [r7, #20]
 8016ec2:	3318      	adds	r3, #24
 8016ec4:	2100      	movs	r1, #0
 8016ec6:	4618      	mov	r0, r3
 8016ec8:	f7ff f99c 	bl	8016204 <mqtt_take_request>
 8016ecc:	6138      	str	r0, [r7, #16]
 8016ece:	693b      	ldr	r3, [r7, #16]
 8016ed0:	2b00      	cmp	r3, #0
 8016ed2:	d1e7      	bne.n	8016ea4 <mqtt_tcp_sent_cb+0x28>
    }
    /* Try send any remaining buffers from output queue */
    mqtt_output_send(&client->output, client->conn);
 8016ed4:	697b      	ldr	r3, [r7, #20]
 8016ed6:	f203 62ec 	addw	r2, r3, #1772	; 0x6ec
 8016eda:	697b      	ldr	r3, [r7, #20]
 8016edc:	68db      	ldr	r3, [r3, #12]
 8016ede:	4619      	mov	r1, r3
 8016ee0:	4610      	mov	r0, r2
 8016ee2:	f7ff f839 	bl	8015f58 <mqtt_output_send>
  }
  return ERR_OK;
 8016ee6:	2300      	movs	r3, #0
}
 8016ee8:	4618      	mov	r0, r3
 8016eea:	3718      	adds	r7, #24
 8016eec:	46bd      	mov	sp, r7
 8016eee:	bd80      	pop	{r7, pc}

08016ef0 <mqtt_tcp_err_cb>:
 * @param arg MQTT client
 * @param err Error encountered
 */
static void
mqtt_tcp_err_cb(void *arg, err_t err)
{
 8016ef0:	b580      	push	{r7, lr}
 8016ef2:	b084      	sub	sp, #16
 8016ef4:	af00      	add	r7, sp, #0
 8016ef6:	6078      	str	r0, [r7, #4]
 8016ef8:	460b      	mov	r3, r1
 8016efa:	70fb      	strb	r3, [r7, #3]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 8016efc:	687b      	ldr	r3, [r7, #4]
 8016efe:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err); /* only used for debug output */
  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_err_cb: TCP error callback: error %d, arg: %p\n", err, arg));
  LWIP_ASSERT("mqtt_tcp_err_cb: client != NULL", client != NULL);
 8016f00:	68fb      	ldr	r3, [r7, #12]
 8016f02:	2b00      	cmp	r3, #0
 8016f04:	d106      	bne.n	8016f14 <mqtt_tcp_err_cb+0x24>
 8016f06:	4b09      	ldr	r3, [pc, #36]	; (8016f2c <mqtt_tcp_err_cb+0x3c>)
 8016f08:	f240 32f6 	movw	r2, #1014	; 0x3f6
 8016f0c:	4908      	ldr	r1, [pc, #32]	; (8016f30 <mqtt_tcp_err_cb+0x40>)
 8016f0e:	4809      	ldr	r0, [pc, #36]	; (8016f34 <mqtt_tcp_err_cb+0x44>)
 8016f10:	f00e fc4c 	bl	80257ac <iprintf>
  /* Set conn to null before calling close as pcb is already deallocated*/
  client->conn = 0;
 8016f14:	68fb      	ldr	r3, [r7, #12]
 8016f16:	2200      	movs	r2, #0
 8016f18:	60da      	str	r2, [r3, #12]
  mqtt_close(client, MQTT_CONNECT_DISCONNECTED);
 8016f1a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8016f1e:	68f8      	ldr	r0, [r7, #12]
 8016f20:	f7ff fb5a 	bl	80165d8 <mqtt_close>
}
 8016f24:	bf00      	nop
 8016f26:	3710      	adds	r7, #16
 8016f28:	46bd      	mov	sp, r7
 8016f2a:	bd80      	pop	{r7, pc}
 8016f2c:	0802acf4 	.word	0x0802acf4
 8016f30:	0802afe0 	.word	0x0802afe0
 8016f34:	0802ad6c 	.word	0x0802ad6c

08016f38 <mqtt_tcp_poll_cb>:
 * @param tpcb TCP connection handle
 * @return err ERR_OK
 */
static err_t
mqtt_tcp_poll_cb(void *arg, struct altcp_pcb *tpcb)
{
 8016f38:	b580      	push	{r7, lr}
 8016f3a:	b084      	sub	sp, #16
 8016f3c:	af00      	add	r7, sp, #0
 8016f3e:	6078      	str	r0, [r7, #4]
 8016f40:	6039      	str	r1, [r7, #0]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 8016f42:	687b      	ldr	r3, [r7, #4]
 8016f44:	60fb      	str	r3, [r7, #12]
  if (client->conn_state == MQTT_CONNECTED) {
 8016f46:	68fb      	ldr	r3, [r7, #12]
 8016f48:	7a9b      	ldrb	r3, [r3, #10]
 8016f4a:	2b03      	cmp	r3, #3
 8016f4c:	d106      	bne.n	8016f5c <mqtt_tcp_poll_cb+0x24>
    /* Try send any remaining buffers from output queue */
    mqtt_output_send(&client->output, tpcb);
 8016f4e:	68fb      	ldr	r3, [r7, #12]
 8016f50:	f203 63ec 	addw	r3, r3, #1772	; 0x6ec
 8016f54:	6839      	ldr	r1, [r7, #0]
 8016f56:	4618      	mov	r0, r3
 8016f58:	f7fe fffe 	bl	8015f58 <mqtt_output_send>
  }
  return ERR_OK;
 8016f5c:	2300      	movs	r3, #0
}
 8016f5e:	4618      	mov	r0, r3
 8016f60:	3710      	adds	r7, #16
 8016f62:	46bd      	mov	sp, r7
 8016f64:	bd80      	pop	{r7, pc}
	...

08016f68 <mqtt_tcp_connect_cb>:
 * @param err Always ERR_OK, mqtt_tcp_err_cb is called in case of error
 * @return ERR_OK
 */
static err_t
mqtt_tcp_connect_cb(void *arg, struct altcp_pcb *tpcb, err_t err)
{
 8016f68:	b580      	push	{r7, lr}
 8016f6a:	b086      	sub	sp, #24
 8016f6c:	af00      	add	r7, sp, #0
 8016f6e:	60f8      	str	r0, [r7, #12]
 8016f70:	60b9      	str	r1, [r7, #8]
 8016f72:	4613      	mov	r3, r2
 8016f74:	71fb      	strb	r3, [r7, #7]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 8016f76:	68fb      	ldr	r3, [r7, #12]
 8016f78:	617b      	str	r3, [r7, #20]

  if (err != ERR_OK) {
 8016f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016f7e:	2b00      	cmp	r3, #0
 8016f80:	d002      	beq.n	8016f88 <mqtt_tcp_connect_cb+0x20>
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_tcp_connect_cb: TCP connect error %d\n", err));
    return err;
 8016f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016f86:	e026      	b.n	8016fd6 <mqtt_tcp_connect_cb+0x6e>
  }

  /* Initiate receiver state */
  client->msg_idx = 0;
 8016f88:	697b      	ldr	r3, [r7, #20]
 8016f8a:	2200      	movs	r2, #0
 8016f8c:	f8c3 2668 	str.w	r2, [r3, #1640]	; 0x668

  /* Setup TCP callbacks */
  altcp_recv(tpcb, mqtt_tcp_recv_cb);
 8016f90:	4913      	ldr	r1, [pc, #76]	; (8016fe0 <mqtt_tcp_connect_cb+0x78>)
 8016f92:	68b8      	ldr	r0, [r7, #8]
 8016f94:	f003 ff88 	bl	801aea8 <tcp_recv>
  altcp_sent(tpcb, mqtt_tcp_sent_cb);
 8016f98:	4912      	ldr	r1, [pc, #72]	; (8016fe4 <mqtt_tcp_connect_cb+0x7c>)
 8016f9a:	68b8      	ldr	r0, [r7, #8]
 8016f9c:	f003 ffa6 	bl	801aeec <tcp_sent>
  altcp_poll(tpcb, mqtt_tcp_poll_cb, 2);
 8016fa0:	2202      	movs	r2, #2
 8016fa2:	4911      	ldr	r1, [pc, #68]	; (8016fe8 <mqtt_tcp_connect_cb+0x80>)
 8016fa4:	68b8      	ldr	r0, [r7, #8]
 8016fa6:	f003 ffe5 	bl	801af74 <tcp_poll>

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_connect_cb: TCP connection established to server\n"));
  /* Enter MQTT connect state */
  client->conn_state = MQTT_CONNECTING;
 8016faa:	697b      	ldr	r3, [r7, #20]
 8016fac:	2202      	movs	r2, #2
 8016fae:	729a      	strb	r2, [r3, #10]

  /* Start cyclic timer */
  sys_timeout(MQTT_CYCLIC_TIMER_INTERVAL * 1000, mqtt_cyclic_timer, client);
 8016fb0:	697a      	ldr	r2, [r7, #20]
 8016fb2:	490e      	ldr	r1, [pc, #56]	; (8016fec <mqtt_tcp_connect_cb+0x84>)
 8016fb4:	f241 3088 	movw	r0, #5000	; 0x1388
 8016fb8:	f008 fcd0 	bl	801f95c <sys_timeout>
  client->cyclic_tick = 0;
 8016fbc:	697b      	ldr	r3, [r7, #20]
 8016fbe:	2200      	movs	r2, #0
 8016fc0:	801a      	strh	r2, [r3, #0]

  /* Start transmission from output queue, connect message is the first one out*/
  mqtt_output_send(&client->output, client->conn);
 8016fc2:	697b      	ldr	r3, [r7, #20]
 8016fc4:	f203 62ec 	addw	r2, r3, #1772	; 0x6ec
 8016fc8:	697b      	ldr	r3, [r7, #20]
 8016fca:	68db      	ldr	r3, [r3, #12]
 8016fcc:	4619      	mov	r1, r3
 8016fce:	4610      	mov	r0, r2
 8016fd0:	f7fe ffc2 	bl	8015f58 <mqtt_output_send>

  return ERR_OK;
 8016fd4:	2300      	movs	r3, #0
}
 8016fd6:	4618      	mov	r0, r3
 8016fd8:	3718      	adds	r7, #24
 8016fda:	46bd      	mov	sp, r7
 8016fdc:	bd80      	pop	{r7, pc}
 8016fde:	bf00      	nop
 8016fe0:	08016dc1 	.word	0x08016dc1
 8016fe4:	08016e7d 	.word	0x08016e7d
 8016fe8:	08016f39 	.word	0x08016f39
 8016fec:	08016699 	.word	0x08016699

08016ff0 <mqtt_publish>:
 *         ERR_MEM if short on memory
 */
err_t
mqtt_publish(mqtt_client_t *client, const char *topic, const void *payload, u16_t payload_length, u8_t qos, u8_t retain,
             mqtt_request_cb_t cb, void *arg)
{
 8016ff0:	b580      	push	{r7, lr}
 8016ff2:	b08c      	sub	sp, #48	; 0x30
 8016ff4:	af02      	add	r7, sp, #8
 8016ff6:	60f8      	str	r0, [r7, #12]
 8016ff8:	60b9      	str	r1, [r7, #8]
 8016ffa:	607a      	str	r2, [r7, #4]
 8016ffc:	807b      	strh	r3, [r7, #2]
  size_t total_len;
  u16_t topic_len;
  u16_t remaining_length;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_publish: client != NULL", client);
 8016ffe:	68fb      	ldr	r3, [r7, #12]
 8017000:	2b00      	cmp	r3, #0
 8017002:	d106      	bne.n	8017012 <mqtt_publish+0x22>
 8017004:	4b5f      	ldr	r3, [pc, #380]	; (8017184 <mqtt_publish+0x194>)
 8017006:	f240 4254 	movw	r2, #1108	; 0x454
 801700a:	495f      	ldr	r1, [pc, #380]	; (8017188 <mqtt_publish+0x198>)
 801700c:	485f      	ldr	r0, [pc, #380]	; (801718c <mqtt_publish+0x19c>)
 801700e:	f00e fbcd 	bl	80257ac <iprintf>
  LWIP_ASSERT("mqtt_publish: topic != NULL", topic);
 8017012:	68bb      	ldr	r3, [r7, #8]
 8017014:	2b00      	cmp	r3, #0
 8017016:	d106      	bne.n	8017026 <mqtt_publish+0x36>
 8017018:	4b5a      	ldr	r3, [pc, #360]	; (8017184 <mqtt_publish+0x194>)
 801701a:	f240 4255 	movw	r2, #1109	; 0x455
 801701e:	495c      	ldr	r1, [pc, #368]	; (8017190 <mqtt_publish+0x1a0>)
 8017020:	485a      	ldr	r0, [pc, #360]	; (801718c <mqtt_publish+0x19c>)
 8017022:	f00e fbc3 	bl	80257ac <iprintf>
  LWIP_ERROR("mqtt_publish: TCP disconnected", (client->conn_state != TCP_DISCONNECTED), return ERR_CONN);
 8017026:	68fb      	ldr	r3, [r7, #12]
 8017028:	7a9b      	ldrb	r3, [r3, #10]
 801702a:	2b00      	cmp	r3, #0
 801702c:	d109      	bne.n	8017042 <mqtt_publish+0x52>
 801702e:	4b55      	ldr	r3, [pc, #340]	; (8017184 <mqtt_publish+0x194>)
 8017030:	f240 4256 	movw	r2, #1110	; 0x456
 8017034:	4957      	ldr	r1, [pc, #348]	; (8017194 <mqtt_publish+0x1a4>)
 8017036:	4855      	ldr	r0, [pc, #340]	; (801718c <mqtt_publish+0x19c>)
 8017038:	f00e fbb8 	bl	80257ac <iprintf>
 801703c:	f06f 030a 	mvn.w	r3, #10
 8017040:	e09b      	b.n	801717a <mqtt_publish+0x18a>

  topic_strlen = strlen(topic);
 8017042:	68b8      	ldr	r0, [r7, #8]
 8017044:	f7e9 f8ce 	bl	80001e4 <strlen>
 8017048:	61f8      	str	r0, [r7, #28]
  LWIP_ERROR("mqtt_publish: topic length overflow", (topic_strlen <= (0xFFFF - 2)), return ERR_ARG);
 801704a:	69fb      	ldr	r3, [r7, #28]
 801704c:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8017050:	4293      	cmp	r3, r2
 8017052:	d909      	bls.n	8017068 <mqtt_publish+0x78>
 8017054:	4b4b      	ldr	r3, [pc, #300]	; (8017184 <mqtt_publish+0x194>)
 8017056:	f240 4259 	movw	r2, #1113	; 0x459
 801705a:	494f      	ldr	r1, [pc, #316]	; (8017198 <mqtt_publish+0x1a8>)
 801705c:	484b      	ldr	r0, [pc, #300]	; (801718c <mqtt_publish+0x19c>)
 801705e:	f00e fba5 	bl	80257ac <iprintf>
 8017062:	f06f 030f 	mvn.w	r3, #15
 8017066:	e088      	b.n	801717a <mqtt_publish+0x18a>
  topic_len = (u16_t)topic_strlen;
 8017068:	69fb      	ldr	r3, [r7, #28]
 801706a:	837b      	strh	r3, [r7, #26]
  total_len = 2 + topic_len + payload_length;
 801706c:	8b7b      	ldrh	r3, [r7, #26]
 801706e:	1c9a      	adds	r2, r3, #2
 8017070:	887b      	ldrh	r3, [r7, #2]
 8017072:	4413      	add	r3, r2
 8017074:	623b      	str	r3, [r7, #32]

  if (qos > 0) {
 8017076:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801707a:	2b00      	cmp	r3, #0
 801707c:	d008      	beq.n	8017090 <mqtt_publish+0xa0>
    total_len += 2;
 801707e:	6a3b      	ldr	r3, [r7, #32]
 8017080:	3302      	adds	r3, #2
 8017082:	623b      	str	r3, [r7, #32]
    /* Generate pkt_id id for QoS1 and 2 */
    pkt_id = msg_generate_packet_id(client);
 8017084:	68f8      	ldr	r0, [r7, #12]
 8017086:	f7fe fed3 	bl	8015e30 <msg_generate_packet_id>
 801708a:	4603      	mov	r3, r0
 801708c:	84fb      	strh	r3, [r7, #38]	; 0x26
 801708e:	e001      	b.n	8017094 <mqtt_publish+0xa4>
  } else {
    /* Use reserved value pkt_id 0 for QoS 0 in request handle */
    pkt_id = 0;
 8017090:	2300      	movs	r3, #0
 8017092:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  LWIP_ERROR("mqtt_publish: total length overflow", (total_len <= 0xFFFF), return ERR_ARG);
 8017094:	6a3b      	ldr	r3, [r7, #32]
 8017096:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801709a:	d309      	bcc.n	80170b0 <mqtt_publish+0xc0>
 801709c:	4b39      	ldr	r3, [pc, #228]	; (8017184 <mqtt_publish+0x194>)
 801709e:	f240 4265 	movw	r2, #1125	; 0x465
 80170a2:	493e      	ldr	r1, [pc, #248]	; (801719c <mqtt_publish+0x1ac>)
 80170a4:	4839      	ldr	r0, [pc, #228]	; (801718c <mqtt_publish+0x19c>)
 80170a6:	f00e fb81 	bl	80257ac <iprintf>
 80170aa:	f06f 030f 	mvn.w	r3, #15
 80170ae:	e064      	b.n	801717a <mqtt_publish+0x18a>
  remaining_length = (u16_t)total_len;
 80170b0:	6a3b      	ldr	r3, [r7, #32]
 80170b2:	833b      	strh	r3, [r7, #24]

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_publish: Publish with payload length %d to topic \"%s\"\n", payload_length, topic));

  r = mqtt_create_request(client->req_list, LWIP_ARRAYSIZE(client->req_list), pkt_id, cb, arg);
 80170b4:	68fb      	ldr	r3, [r7, #12]
 80170b6:	f103 001c 	add.w	r0, r3, #28
 80170ba:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80170bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80170be:	9300      	str	r3, [sp, #0]
 80170c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80170c2:	2164      	movs	r1, #100	; 0x64
 80170c4:	f7fe fffc 	bl	80160c0 <mqtt_create_request>
 80170c8:	6178      	str	r0, [r7, #20]
  if (r == NULL) {
 80170ca:	697b      	ldr	r3, [r7, #20]
 80170cc:	2b00      	cmp	r3, #0
 80170ce:	d102      	bne.n	80170d6 <mqtt_publish+0xe6>
    return ERR_MEM;
 80170d0:	f04f 33ff 	mov.w	r3, #4294967295
 80170d4:	e051      	b.n	801717a <mqtt_publish+0x18a>
  }

  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 80170d6:	68fb      	ldr	r3, [r7, #12]
 80170d8:	f203 63ec 	addw	r3, r3, #1772	; 0x6ec
 80170dc:	8b3a      	ldrh	r2, [r7, #24]
 80170de:	4611      	mov	r1, r2
 80170e0:	4618      	mov	r0, r3
 80170e2:	f7ff fa47 	bl	8016574 <mqtt_output_check_space>
 80170e6:	4603      	mov	r3, r0
 80170e8:	2b00      	cmp	r3, #0
 80170ea:	d105      	bne.n	80170f8 <mqtt_publish+0x108>
    mqtt_delete_request(r);
 80170ec:	6978      	ldr	r0, [r7, #20]
 80170ee:	f7ff f879 	bl	80161e4 <mqtt_delete_request>
    return ERR_MEM;
 80170f2:	f04f 33ff 	mov.w	r3, #4294967295
 80170f6:	e040      	b.n	801717a <mqtt_publish+0x18a>
  }
  /* Append fixed header */
  mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_PUBLISH, 0, qos, retain, remaining_length);
 80170f8:	68fb      	ldr	r3, [r7, #12]
 80170fa:	f203 60ec 	addw	r0, r3, #1772	; 0x6ec
 80170fe:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8017102:	8b3b      	ldrh	r3, [r7, #24]
 8017104:	9301      	str	r3, [sp, #4]
 8017106:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 801710a:	9300      	str	r3, [sp, #0]
 801710c:	4613      	mov	r3, r2
 801710e:	2200      	movs	r2, #0
 8017110:	2103      	movs	r1, #3
 8017112:	f7ff f9e4 	bl	80164de <mqtt_output_append_fixed_header>

  /* Append Topic */
  mqtt_output_append_string(&client->output, topic, topic_len);
 8017116:	68fb      	ldr	r3, [r7, #12]
 8017118:	f203 63ec 	addw	r3, r3, #1772	; 0x6ec
 801711c:	8b7a      	ldrh	r2, [r7, #26]
 801711e:	68b9      	ldr	r1, [r7, #8]
 8017120:	4618      	mov	r0, r3
 8017122:	f7ff f9b0 	bl	8016486 <mqtt_output_append_string>

  /* Append packet if for QoS 1 and 2*/
  if (qos > 0) {
 8017126:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801712a:	2b00      	cmp	r3, #0
 801712c:	d007      	beq.n	801713e <mqtt_publish+0x14e>
    mqtt_output_append_u16(&client->output, pkt_id);
 801712e:	68fb      	ldr	r3, [r7, #12]
 8017130:	f203 63ec 	addw	r3, r3, #1772	; 0x6ec
 8017134:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8017136:	4611      	mov	r1, r2
 8017138:	4618      	mov	r0, r3
 801713a:	f7ff f96e 	bl	801641a <mqtt_output_append_u16>
  }

  /* Append optional publish payload */
  if ((payload != NULL) && (payload_length > 0)) {
 801713e:	687b      	ldr	r3, [r7, #4]
 8017140:	2b00      	cmp	r3, #0
 8017142:	d00a      	beq.n	801715a <mqtt_publish+0x16a>
 8017144:	887b      	ldrh	r3, [r7, #2]
 8017146:	2b00      	cmp	r3, #0
 8017148:	d007      	beq.n	801715a <mqtt_publish+0x16a>
    mqtt_output_append_buf(&client->output, payload, payload_length);
 801714a:	68fb      	ldr	r3, [r7, #12]
 801714c:	f203 63ec 	addw	r3, r3, #1772	; 0x6ec
 8017150:	887a      	ldrh	r2, [r7, #2]
 8017152:	6879      	ldr	r1, [r7, #4]
 8017154:	4618      	mov	r0, r3
 8017156:	f7ff f978 	bl	801644a <mqtt_output_append_buf>
  }

  mqtt_append_request(&client->pend_req_queue, r);
 801715a:	68fb      	ldr	r3, [r7, #12]
 801715c:	3318      	adds	r3, #24
 801715e:	6979      	ldr	r1, [r7, #20]
 8017160:	4618      	mov	r0, r3
 8017162:	f7fe fff3 	bl	801614c <mqtt_append_request>
  mqtt_output_send(&client->output, client->conn);
 8017166:	68fb      	ldr	r3, [r7, #12]
 8017168:	f203 62ec 	addw	r2, r3, #1772	; 0x6ec
 801716c:	68fb      	ldr	r3, [r7, #12]
 801716e:	68db      	ldr	r3, [r3, #12]
 8017170:	4619      	mov	r1, r3
 8017172:	4610      	mov	r0, r2
 8017174:	f7fe fef0 	bl	8015f58 <mqtt_output_send>
  return ERR_OK;
 8017178:	2300      	movs	r3, #0
}
 801717a:	4618      	mov	r0, r3
 801717c:	3728      	adds	r7, #40	; 0x28
 801717e:	46bd      	mov	sp, r7
 8017180:	bd80      	pop	{r7, pc}
 8017182:	bf00      	nop
 8017184:	0802acf4 	.word	0x0802acf4
 8017188:	0802b000 	.word	0x0802b000
 801718c:	0802ad6c 	.word	0x0802ad6c
 8017190:	0802b020 	.word	0x0802b020
 8017194:	0802b03c 	.word	0x0802b03c
 8017198:	0802b05c 	.word	0x0802b05c
 801719c:	0802b080 	.word	0x0802b080

080171a0 <mqtt_sub_unsub>:
 * @param sub 1 for subscribe, 0 for unsubscribe
 * @return ERR_OK if successful, @see err_t enum for other results
 */
err_t
mqtt_sub_unsub(mqtt_client_t *client, const char *topic, u8_t qos, mqtt_request_cb_t cb, void *arg, u8_t sub)
{
 80171a0:	b580      	push	{r7, lr}
 80171a2:	b08c      	sub	sp, #48	; 0x30
 80171a4:	af02      	add	r7, sp, #8
 80171a6:	60f8      	str	r0, [r7, #12]
 80171a8:	60b9      	str	r1, [r7, #8]
 80171aa:	603b      	str	r3, [r7, #0]
 80171ac:	4613      	mov	r3, r2
 80171ae:	71fb      	strb	r3, [r7, #7]
  u16_t remaining_length;
  u16_t pkt_id;
  struct mqtt_request_t *r;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_sub_unsub: client != NULL", client);
 80171b0:	68fb      	ldr	r3, [r7, #12]
 80171b2:	2b00      	cmp	r3, #0
 80171b4:	d106      	bne.n	80171c4 <mqtt_sub_unsub+0x24>
 80171b6:	4b5f      	ldr	r3, [pc, #380]	; (8017334 <mqtt_sub_unsub+0x194>)
 80171b8:	f240 429f 	movw	r2, #1183	; 0x49f
 80171bc:	495e      	ldr	r1, [pc, #376]	; (8017338 <mqtt_sub_unsub+0x198>)
 80171be:	485f      	ldr	r0, [pc, #380]	; (801733c <mqtt_sub_unsub+0x19c>)
 80171c0:	f00e faf4 	bl	80257ac <iprintf>
  LWIP_ASSERT("mqtt_sub_unsub: topic != NULL", topic);
 80171c4:	68bb      	ldr	r3, [r7, #8]
 80171c6:	2b00      	cmp	r3, #0
 80171c8:	d106      	bne.n	80171d8 <mqtt_sub_unsub+0x38>
 80171ca:	4b5a      	ldr	r3, [pc, #360]	; (8017334 <mqtt_sub_unsub+0x194>)
 80171cc:	f44f 6294 	mov.w	r2, #1184	; 0x4a0
 80171d0:	495b      	ldr	r1, [pc, #364]	; (8017340 <mqtt_sub_unsub+0x1a0>)
 80171d2:	485a      	ldr	r0, [pc, #360]	; (801733c <mqtt_sub_unsub+0x19c>)
 80171d4:	f00e faea 	bl	80257ac <iprintf>

  topic_strlen = strlen(topic);
 80171d8:	68b8      	ldr	r0, [r7, #8]
 80171da:	f7e9 f803 	bl	80001e4 <strlen>
 80171de:	6278      	str	r0, [r7, #36]	; 0x24
  LWIP_ERROR("mqtt_sub_unsub: topic length overflow", (topic_strlen <= (0xFFFF - 2)), return ERR_ARG);
 80171e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80171e2:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 80171e6:	4293      	cmp	r3, r2
 80171e8:	d909      	bls.n	80171fe <mqtt_sub_unsub+0x5e>
 80171ea:	4b52      	ldr	r3, [pc, #328]	; (8017334 <mqtt_sub_unsub+0x194>)
 80171ec:	f240 42a3 	movw	r2, #1187	; 0x4a3
 80171f0:	4954      	ldr	r1, [pc, #336]	; (8017344 <mqtt_sub_unsub+0x1a4>)
 80171f2:	4852      	ldr	r0, [pc, #328]	; (801733c <mqtt_sub_unsub+0x19c>)
 80171f4:	f00e fada 	bl	80257ac <iprintf>
 80171f8:	f06f 030f 	mvn.w	r3, #15
 80171fc:	e096      	b.n	801732c <mqtt_sub_unsub+0x18c>
  topic_len = (u16_t)topic_strlen;
 80171fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017200:	847b      	strh	r3, [r7, #34]	; 0x22
  /* Topic string, pkt_id, qos for subscribe */
  total_len =  topic_len + 2 + 2 + (sub != 0);
 8017202:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017204:	3304      	adds	r3, #4
 8017206:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 801720a:	2a00      	cmp	r2, #0
 801720c:	bf14      	ite	ne
 801720e:	2201      	movne	r2, #1
 8017210:	2200      	moveq	r2, #0
 8017212:	b2d2      	uxtb	r2, r2
 8017214:	4413      	add	r3, r2
 8017216:	61fb      	str	r3, [r7, #28]
  LWIP_ERROR("mqtt_sub_unsub: total length overflow", (total_len <= 0xFFFF), return ERR_ARG);
 8017218:	69fb      	ldr	r3, [r7, #28]
 801721a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801721e:	d309      	bcc.n	8017234 <mqtt_sub_unsub+0x94>
 8017220:	4b44      	ldr	r3, [pc, #272]	; (8017334 <mqtt_sub_unsub+0x194>)
 8017222:	f240 42a7 	movw	r2, #1191	; 0x4a7
 8017226:	4948      	ldr	r1, [pc, #288]	; (8017348 <mqtt_sub_unsub+0x1a8>)
 8017228:	4844      	ldr	r0, [pc, #272]	; (801733c <mqtt_sub_unsub+0x19c>)
 801722a:	f00e fabf 	bl	80257ac <iprintf>
 801722e:	f06f 030f 	mvn.w	r3, #15
 8017232:	e07b      	b.n	801732c <mqtt_sub_unsub+0x18c>
  remaining_length = (u16_t)total_len;
 8017234:	69fb      	ldr	r3, [r7, #28]
 8017236:	837b      	strh	r3, [r7, #26]

  LWIP_ASSERT("mqtt_sub_unsub: qos < 3", qos < 3);
 8017238:	79fb      	ldrb	r3, [r7, #7]
 801723a:	2b02      	cmp	r3, #2
 801723c:	d906      	bls.n	801724c <mqtt_sub_unsub+0xac>
 801723e:	4b3d      	ldr	r3, [pc, #244]	; (8017334 <mqtt_sub_unsub+0x194>)
 8017240:	f240 42aa 	movw	r2, #1194	; 0x4aa
 8017244:	4941      	ldr	r1, [pc, #260]	; (801734c <mqtt_sub_unsub+0x1ac>)
 8017246:	483d      	ldr	r0, [pc, #244]	; (801733c <mqtt_sub_unsub+0x19c>)
 8017248:	f00e fab0 	bl	80257ac <iprintf>
  if (client->conn_state == TCP_DISCONNECTED) {
 801724c:	68fb      	ldr	r3, [r7, #12]
 801724e:	7a9b      	ldrb	r3, [r3, #10]
 8017250:	2b00      	cmp	r3, #0
 8017252:	d102      	bne.n	801725a <mqtt_sub_unsub+0xba>
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_sub_unsub: Can not (un)subscribe in disconnected state\n"));
    return ERR_CONN;
 8017254:	f06f 030a 	mvn.w	r3, #10
 8017258:	e068      	b.n	801732c <mqtt_sub_unsub+0x18c>
  }

  pkt_id = msg_generate_packet_id(client);
 801725a:	68f8      	ldr	r0, [r7, #12]
 801725c:	f7fe fde8 	bl	8015e30 <msg_generate_packet_id>
 8017260:	4603      	mov	r3, r0
 8017262:	833b      	strh	r3, [r7, #24]
  r = mqtt_create_request(client->req_list, LWIP_ARRAYSIZE(client->req_list), pkt_id, cb, arg);
 8017264:	68fb      	ldr	r3, [r7, #12]
 8017266:	f103 001c 	add.w	r0, r3, #28
 801726a:	8b3a      	ldrh	r2, [r7, #24]
 801726c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801726e:	9300      	str	r3, [sp, #0]
 8017270:	683b      	ldr	r3, [r7, #0]
 8017272:	2164      	movs	r1, #100	; 0x64
 8017274:	f7fe ff24 	bl	80160c0 <mqtt_create_request>
 8017278:	6178      	str	r0, [r7, #20]
  if (r == NULL) {
 801727a:	697b      	ldr	r3, [r7, #20]
 801727c:	2b00      	cmp	r3, #0
 801727e:	d102      	bne.n	8017286 <mqtt_sub_unsub+0xe6>
    return ERR_MEM;
 8017280:	f04f 33ff 	mov.w	r3, #4294967295
 8017284:	e052      	b.n	801732c <mqtt_sub_unsub+0x18c>
  }

  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 8017286:	68fb      	ldr	r3, [r7, #12]
 8017288:	f203 63ec 	addw	r3, r3, #1772	; 0x6ec
 801728c:	8b7a      	ldrh	r2, [r7, #26]
 801728e:	4611      	mov	r1, r2
 8017290:	4618      	mov	r0, r3
 8017292:	f7ff f96f 	bl	8016574 <mqtt_output_check_space>
 8017296:	4603      	mov	r3, r0
 8017298:	2b00      	cmp	r3, #0
 801729a:	d105      	bne.n	80172a8 <mqtt_sub_unsub+0x108>
    mqtt_delete_request(r);
 801729c:	6978      	ldr	r0, [r7, #20]
 801729e:	f7fe ffa1 	bl	80161e4 <mqtt_delete_request>
    return ERR_MEM;
 80172a2:	f04f 33ff 	mov.w	r3, #4294967295
 80172a6:	e041      	b.n	801732c <mqtt_sub_unsub+0x18c>
  }

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_sub_unsub: Client (un)subscribe to topic \"%s\", id: %d\n", topic, pkt_id));

  mqtt_output_append_fixed_header(&client->output, sub ? MQTT_MSG_TYPE_SUBSCRIBE : MQTT_MSG_TYPE_UNSUBSCRIBE, 0, 1, 0, remaining_length);
 80172a8:	68fb      	ldr	r3, [r7, #12]
 80172aa:	f203 60ec 	addw	r0, r3, #1772	; 0x6ec
 80172ae:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80172b2:	2b00      	cmp	r3, #0
 80172b4:	d001      	beq.n	80172ba <mqtt_sub_unsub+0x11a>
 80172b6:	2108      	movs	r1, #8
 80172b8:	e000      	b.n	80172bc <mqtt_sub_unsub+0x11c>
 80172ba:	210a      	movs	r1, #10
 80172bc:	8b7b      	ldrh	r3, [r7, #26]
 80172be:	9301      	str	r3, [sp, #4]
 80172c0:	2300      	movs	r3, #0
 80172c2:	9300      	str	r3, [sp, #0]
 80172c4:	2301      	movs	r3, #1
 80172c6:	2200      	movs	r2, #0
 80172c8:	f7ff f909 	bl	80164de <mqtt_output_append_fixed_header>
  /* Packet id */
  mqtt_output_append_u16(&client->output, pkt_id);
 80172cc:	68fb      	ldr	r3, [r7, #12]
 80172ce:	f203 63ec 	addw	r3, r3, #1772	; 0x6ec
 80172d2:	8b3a      	ldrh	r2, [r7, #24]
 80172d4:	4611      	mov	r1, r2
 80172d6:	4618      	mov	r0, r3
 80172d8:	f7ff f89f 	bl	801641a <mqtt_output_append_u16>
  /* Topic */
  mqtt_output_append_string(&client->output, topic, topic_len);
 80172dc:	68fb      	ldr	r3, [r7, #12]
 80172de:	f203 63ec 	addw	r3, r3, #1772	; 0x6ec
 80172e2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80172e4:	68b9      	ldr	r1, [r7, #8]
 80172e6:	4618      	mov	r0, r3
 80172e8:	f7ff f8cd 	bl	8016486 <mqtt_output_append_string>
  /* QoS */
  if (sub != 0) {
 80172ec:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80172f0:	2b00      	cmp	r3, #0
 80172f2:	d00b      	beq.n	801730c <mqtt_sub_unsub+0x16c>
    mqtt_output_append_u8(&client->output, LWIP_MIN(qos, 2));
 80172f4:	68fb      	ldr	r3, [r7, #12]
 80172f6:	f203 62ec 	addw	r2, r3, #1772	; 0x6ec
 80172fa:	79fb      	ldrb	r3, [r7, #7]
 80172fc:	2b02      	cmp	r3, #2
 80172fe:	bf28      	it	cs
 8017300:	2302      	movcs	r3, #2
 8017302:	b2db      	uxtb	r3, r3
 8017304:	4619      	mov	r1, r3
 8017306:	4610      	mov	r0, r2
 8017308:	f7ff f878 	bl	80163fc <mqtt_output_append_u8>
  }

  mqtt_append_request(&client->pend_req_queue, r);
 801730c:	68fb      	ldr	r3, [r7, #12]
 801730e:	3318      	adds	r3, #24
 8017310:	6979      	ldr	r1, [r7, #20]
 8017312:	4618      	mov	r0, r3
 8017314:	f7fe ff1a 	bl	801614c <mqtt_append_request>
  mqtt_output_send(&client->output, client->conn);
 8017318:	68fb      	ldr	r3, [r7, #12]
 801731a:	f203 62ec 	addw	r2, r3, #1772	; 0x6ec
 801731e:	68fb      	ldr	r3, [r7, #12]
 8017320:	68db      	ldr	r3, [r3, #12]
 8017322:	4619      	mov	r1, r3
 8017324:	4610      	mov	r0, r2
 8017326:	f7fe fe17 	bl	8015f58 <mqtt_output_send>
  return ERR_OK;
 801732a:	2300      	movs	r3, #0
}
 801732c:	4618      	mov	r0, r3
 801732e:	3728      	adds	r7, #40	; 0x28
 8017330:	46bd      	mov	sp, r7
 8017332:	bd80      	pop	{r7, pc}
 8017334:	0802acf4 	.word	0x0802acf4
 8017338:	0802b0a4 	.word	0x0802b0a4
 801733c:	0802ad6c 	.word	0x0802ad6c
 8017340:	0802b0c4 	.word	0x0802b0c4
 8017344:	0802b0e4 	.word	0x0802b0e4
 8017348:	0802b10c 	.word	0x0802b10c
 801734c:	0802b134 	.word	0x0802b134

08017350 <mqtt_set_inpub_callback>:
 * @param arg User supplied argument to both callbacks
 */
void
mqtt_set_inpub_callback(mqtt_client_t *client, mqtt_incoming_publish_cb_t pub_cb,
                        mqtt_incoming_data_cb_t data_cb, void *arg)
{
 8017350:	b580      	push	{r7, lr}
 8017352:	b084      	sub	sp, #16
 8017354:	af00      	add	r7, sp, #0
 8017356:	60f8      	str	r0, [r7, #12]
 8017358:	60b9      	str	r1, [r7, #8]
 801735a:	607a      	str	r2, [r7, #4]
 801735c:	603b      	str	r3, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_set_inpub_callback: client != NULL", client != NULL);
 801735e:	68fb      	ldr	r3, [r7, #12]
 8017360:	2b00      	cmp	r3, #0
 8017362:	d106      	bne.n	8017372 <mqtt_set_inpub_callback+0x22>
 8017364:	4b0b      	ldr	r3, [pc, #44]	; (8017394 <mqtt_set_inpub_callback+0x44>)
 8017366:	f240 42da 	movw	r2, #1242	; 0x4da
 801736a:	490b      	ldr	r1, [pc, #44]	; (8017398 <mqtt_set_inpub_callback+0x48>)
 801736c:	480b      	ldr	r0, [pc, #44]	; (801739c <mqtt_set_inpub_callback+0x4c>)
 801736e:	f00e fa1d 	bl	80257ac <iprintf>
  client->data_cb = data_cb;
 8017372:	68fb      	ldr	r3, [r7, #12]
 8017374:	687a      	ldr	r2, [r7, #4]
 8017376:	f8c3 2660 	str.w	r2, [r3, #1632]	; 0x660
  client->pub_cb = pub_cb;
 801737a:	68fb      	ldr	r3, [r7, #12]
 801737c:	68ba      	ldr	r2, [r7, #8]
 801737e:	f8c3 2664 	str.w	r2, [r3, #1636]	; 0x664
  client->inpub_arg = arg;
 8017382:	68fb      	ldr	r3, [r7, #12]
 8017384:	683a      	ldr	r2, [r7, #0]
 8017386:	f8c3 265c 	str.w	r2, [r3, #1628]	; 0x65c
}
 801738a:	bf00      	nop
 801738c:	3710      	adds	r7, #16
 801738e:	46bd      	mov	sp, r7
 8017390:	bd80      	pop	{r7, pc}
 8017392:	bf00      	nop
 8017394:	0802acf4 	.word	0x0802acf4
 8017398:	0802b14c 	.word	0x0802b14c
 801739c:	0802ad6c 	.word	0x0802ad6c

080173a0 <mqtt_client_new>:
 * Create a new MQTT client instance
 * @return Pointer to instance on success, NULL otherwise
 */
mqtt_client_t *
mqtt_client_new(void)
{
 80173a0:	b580      	push	{r7, lr}
 80173a2:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();
  return (mqtt_client_t *)mem_calloc(1, sizeof(mqtt_client_t));
 80173a4:	f44f 61fe 	mov.w	r1, #2032	; 0x7f0
 80173a8:	2001      	movs	r0, #1
 80173aa:	f000 fee1 	bl	8018170 <mem_calloc>
 80173ae:	4603      	mov	r3, r0
}
 80173b0:	4618      	mov	r0, r3
 80173b2:	bd80      	pop	{r7, pc}

080173b4 <mqtt_client_connect>:
 * @return ERR_OK if successful, @see err_t enum for other results
 */
err_t
mqtt_client_connect(mqtt_client_t *client, const ip_addr_t *ip_addr, u16_t port, mqtt_connection_cb_t cb, void *arg,
                    const struct mqtt_connect_client_info_t *client_info)
{
 80173b4:	b580      	push	{r7, lr}
 80173b6:	b08c      	sub	sp, #48	; 0x30
 80173b8:	af02      	add	r7, sp, #8
 80173ba:	60f8      	str	r0, [r7, #12]
 80173bc:	60b9      	str	r1, [r7, #8]
 80173be:	603b      	str	r3, [r7, #0]
 80173c0:	4613      	mov	r3, r2
 80173c2:	80fb      	strh	r3, [r7, #6]
  err_t err;
  size_t len;
  u16_t client_id_length;
  /* Length is the sum of 2+"MQTT", protocol level, flags and keep alive */
  u16_t remaining_length = 2 + 4 + 1 + 1 + 2;
 80173c4:	230a      	movs	r3, #10
 80173c6:	84bb      	strh	r3, [r7, #36]	; 0x24
  u8_t flags = 0, will_topic_len = 0, will_msg_len = 0;
 80173c8:	2300      	movs	r3, #0
 80173ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80173ce:	2300      	movs	r3, #0
 80173d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80173d4:	2300      	movs	r3, #0
 80173d6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  u16_t client_user_len = 0, client_pass_len = 0;
 80173da:	2300      	movs	r3, #0
 80173dc:	83fb      	strh	r3, [r7, #30]
 80173de:	2300      	movs	r3, #0
 80173e0:	83bb      	strh	r3, [r7, #28]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_client_connect: client != NULL", client != NULL);
 80173e2:	68fb      	ldr	r3, [r7, #12]
 80173e4:	2b00      	cmp	r3, #0
 80173e6:	d106      	bne.n	80173f6 <mqtt_client_connect+0x42>
 80173e8:	4b9e      	ldr	r3, [pc, #632]	; (8017664 <mqtt_client_connect+0x2b0>)
 80173ea:	f240 520f 	movw	r2, #1295	; 0x50f
 80173ee:	499e      	ldr	r1, [pc, #632]	; (8017668 <mqtt_client_connect+0x2b4>)
 80173f0:	489e      	ldr	r0, [pc, #632]	; (801766c <mqtt_client_connect+0x2b8>)
 80173f2:	f00e f9db 	bl	80257ac <iprintf>
  LWIP_ASSERT("mqtt_client_connect: ip_addr != NULL", ip_addr != NULL);
 80173f6:	68bb      	ldr	r3, [r7, #8]
 80173f8:	2b00      	cmp	r3, #0
 80173fa:	d106      	bne.n	801740a <mqtt_client_connect+0x56>
 80173fc:	4b99      	ldr	r3, [pc, #612]	; (8017664 <mqtt_client_connect+0x2b0>)
 80173fe:	f44f 62a2 	mov.w	r2, #1296	; 0x510
 8017402:	499b      	ldr	r1, [pc, #620]	; (8017670 <mqtt_client_connect+0x2bc>)
 8017404:	4899      	ldr	r0, [pc, #612]	; (801766c <mqtt_client_connect+0x2b8>)
 8017406:	f00e f9d1 	bl	80257ac <iprintf>
  LWIP_ASSERT("mqtt_client_connect: client_info != NULL", client_info != NULL);
 801740a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801740c:	2b00      	cmp	r3, #0
 801740e:	d106      	bne.n	801741e <mqtt_client_connect+0x6a>
 8017410:	4b94      	ldr	r3, [pc, #592]	; (8017664 <mqtt_client_connect+0x2b0>)
 8017412:	f240 5211 	movw	r2, #1297	; 0x511
 8017416:	4997      	ldr	r1, [pc, #604]	; (8017674 <mqtt_client_connect+0x2c0>)
 8017418:	4894      	ldr	r0, [pc, #592]	; (801766c <mqtt_client_connect+0x2b8>)
 801741a:	f00e f9c7 	bl	80257ac <iprintf>
  LWIP_ASSERT("mqtt_client_connect: client_info->client_id != NULL", client_info->client_id != NULL);
 801741e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017420:	681b      	ldr	r3, [r3, #0]
 8017422:	2b00      	cmp	r3, #0
 8017424:	d106      	bne.n	8017434 <mqtt_client_connect+0x80>
 8017426:	4b8f      	ldr	r3, [pc, #572]	; (8017664 <mqtt_client_connect+0x2b0>)
 8017428:	f240 5212 	movw	r2, #1298	; 0x512
 801742c:	4992      	ldr	r1, [pc, #584]	; (8017678 <mqtt_client_connect+0x2c4>)
 801742e:	488f      	ldr	r0, [pc, #572]	; (801766c <mqtt_client_connect+0x2b8>)
 8017430:	f00e f9bc 	bl	80257ac <iprintf>

  if (client->conn_state != TCP_DISCONNECTED) {
 8017434:	68fb      	ldr	r3, [r7, #12]
 8017436:	7a9b      	ldrb	r3, [r3, #10]
 8017438:	2b00      	cmp	r3, #0
 801743a:	d002      	beq.n	8017442 <mqtt_client_connect+0x8e>
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_client_connect: Already connected\n"));
    return ERR_ISCONN;
 801743c:	f06f 0309 	mvn.w	r3, #9
 8017440:	e223      	b.n	801788a <mqtt_client_connect+0x4d6>
  }

  /* Wipe clean */
  memset(client, 0, sizeof(mqtt_client_t));
 8017442:	f44f 62fe 	mov.w	r2, #2032	; 0x7f0
 8017446:	2100      	movs	r1, #0
 8017448:	68f8      	ldr	r0, [r7, #12]
 801744a:	f00d fb03 	bl	8024a54 <memset>
  client->connect_arg = arg;
 801744e:	68fb      	ldr	r3, [r7, #12]
 8017450:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017452:	611a      	str	r2, [r3, #16]
  client->connect_cb = cb;
 8017454:	68fb      	ldr	r3, [r7, #12]
 8017456:	683a      	ldr	r2, [r7, #0]
 8017458:	615a      	str	r2, [r3, #20]
  client->keep_alive = client_info->keep_alive;
 801745a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801745c:	899a      	ldrh	r2, [r3, #12]
 801745e:	68fb      	ldr	r3, [r7, #12]
 8017460:	805a      	strh	r2, [r3, #2]
  mqtt_init_requests(client->req_list, LWIP_ARRAYSIZE(client->req_list));
 8017462:	68fb      	ldr	r3, [r7, #12]
 8017464:	331c      	adds	r3, #28
 8017466:	2164      	movs	r1, #100	; 0x64
 8017468:	4618      	mov	r0, r3
 801746a:	f7fe ff99 	bl	80163a0 <mqtt_init_requests>

  /* Build connect message */
  if (client_info->will_topic != NULL && client_info->will_msg != NULL) {
 801746e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017470:	691b      	ldr	r3, [r3, #16]
 8017472:	2b00      	cmp	r3, #0
 8017474:	d073      	beq.n	801755e <mqtt_client_connect+0x1aa>
 8017476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017478:	695b      	ldr	r3, [r3, #20]
 801747a:	2b00      	cmp	r3, #0
 801747c:	d06f      	beq.n	801755e <mqtt_client_connect+0x1aa>
    flags |= MQTT_CONNECT_FLAG_WILL;
 801747e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017482:	f043 0304 	orr.w	r3, r3, #4
 8017486:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    flags |= (client_info->will_qos & 3) << 3;
 801748a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801748c:	7e1b      	ldrb	r3, [r3, #24]
 801748e:	00db      	lsls	r3, r3, #3
 8017490:	b25b      	sxtb	r3, r3
 8017492:	f003 0318 	and.w	r3, r3, #24
 8017496:	b25a      	sxtb	r2, r3
 8017498:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801749c:	4313      	orrs	r3, r2
 801749e:	b25b      	sxtb	r3, r3
 80174a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (client_info->will_retain) {
 80174a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80174a6:	7e5b      	ldrb	r3, [r3, #25]
 80174a8:	2b00      	cmp	r3, #0
 80174aa:	d005      	beq.n	80174b8 <mqtt_client_connect+0x104>
      flags |= MQTT_CONNECT_FLAG_WILL_RETAIN;
 80174ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80174b0:	f043 0320 	orr.w	r3, r3, #32
 80174b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    }
    len = strlen(client_info->will_topic);
 80174b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80174ba:	691b      	ldr	r3, [r3, #16]
 80174bc:	4618      	mov	r0, r3
 80174be:	f7e8 fe91 	bl	80001e4 <strlen>
 80174c2:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->will_topic length overflow", len <= 0xFF, return ERR_VAL);
 80174c4:	69bb      	ldr	r3, [r7, #24]
 80174c6:	2bff      	cmp	r3, #255	; 0xff
 80174c8:	d909      	bls.n	80174de <mqtt_client_connect+0x12a>
 80174ca:	4b66      	ldr	r3, [pc, #408]	; (8017664 <mqtt_client_connect+0x2b0>)
 80174cc:	f44f 62a5 	mov.w	r2, #1320	; 0x528
 80174d0:	496a      	ldr	r1, [pc, #424]	; (801767c <mqtt_client_connect+0x2c8>)
 80174d2:	4866      	ldr	r0, [pc, #408]	; (801766c <mqtt_client_connect+0x2b8>)
 80174d4:	f00e f96a 	bl	80257ac <iprintf>
 80174d8:	f06f 0305 	mvn.w	r3, #5
 80174dc:	e1d5      	b.n	801788a <mqtt_client_connect+0x4d6>
    LWIP_ERROR("mqtt_client_connect: client_info->will_topic length must be > 0", len > 0, return ERR_VAL);
 80174de:	69bb      	ldr	r3, [r7, #24]
 80174e0:	2b00      	cmp	r3, #0
 80174e2:	d109      	bne.n	80174f8 <mqtt_client_connect+0x144>
 80174e4:	4b5f      	ldr	r3, [pc, #380]	; (8017664 <mqtt_client_connect+0x2b0>)
 80174e6:	f240 5229 	movw	r2, #1321	; 0x529
 80174ea:	4965      	ldr	r1, [pc, #404]	; (8017680 <mqtt_client_connect+0x2cc>)
 80174ec:	485f      	ldr	r0, [pc, #380]	; (801766c <mqtt_client_connect+0x2b8>)
 80174ee:	f00e f95d 	bl	80257ac <iprintf>
 80174f2:	f06f 0305 	mvn.w	r3, #5
 80174f6:	e1c8      	b.n	801788a <mqtt_client_connect+0x4d6>
    will_topic_len = (u8_t)len;
 80174f8:	69bb      	ldr	r3, [r7, #24]
 80174fa:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    len = strlen(client_info->will_msg);
 80174fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017500:	695b      	ldr	r3, [r3, #20]
 8017502:	4618      	mov	r0, r3
 8017504:	f7e8 fe6e 	bl	80001e4 <strlen>
 8017508:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->will_msg length overflow", len <= 0xFF, return ERR_VAL);
 801750a:	69bb      	ldr	r3, [r7, #24]
 801750c:	2bff      	cmp	r3, #255	; 0xff
 801750e:	d909      	bls.n	8017524 <mqtt_client_connect+0x170>
 8017510:	4b54      	ldr	r3, [pc, #336]	; (8017664 <mqtt_client_connect+0x2b0>)
 8017512:	f240 522c 	movw	r2, #1324	; 0x52c
 8017516:	495b      	ldr	r1, [pc, #364]	; (8017684 <mqtt_client_connect+0x2d0>)
 8017518:	4854      	ldr	r0, [pc, #336]	; (801766c <mqtt_client_connect+0x2b8>)
 801751a:	f00e f947 	bl	80257ac <iprintf>
 801751e:	f06f 0305 	mvn.w	r3, #5
 8017522:	e1b2      	b.n	801788a <mqtt_client_connect+0x4d6>
    will_msg_len = (u8_t)len;
 8017524:	69bb      	ldr	r3, [r7, #24]
 8017526:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    len = remaining_length + 2 + will_topic_len + 2 + will_msg_len;
 801752a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801752c:	1c9a      	adds	r2, r3, #2
 801752e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8017532:	4413      	add	r3, r2
 8017534:	1c9a      	adds	r2, r3, #2
 8017536:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801753a:	4413      	add	r3, r2
 801753c:	61bb      	str	r3, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 801753e:	69bb      	ldr	r3, [r7, #24]
 8017540:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017544:	d309      	bcc.n	801755a <mqtt_client_connect+0x1a6>
 8017546:	4b47      	ldr	r3, [pc, #284]	; (8017664 <mqtt_client_connect+0x2b0>)
 8017548:	f240 522f 	movw	r2, #1327	; 0x52f
 801754c:	494e      	ldr	r1, [pc, #312]	; (8017688 <mqtt_client_connect+0x2d4>)
 801754e:	4847      	ldr	r0, [pc, #284]	; (801766c <mqtt_client_connect+0x2b8>)
 8017550:	f00e f92c 	bl	80257ac <iprintf>
 8017554:	f06f 0305 	mvn.w	r3, #5
 8017558:	e197      	b.n	801788a <mqtt_client_connect+0x4d6>
    remaining_length = (u16_t)len;
 801755a:	69bb      	ldr	r3, [r7, #24]
 801755c:	84bb      	strh	r3, [r7, #36]	; 0x24
  }
  if (client_info->client_user != NULL) {
 801755e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017560:	685b      	ldr	r3, [r3, #4]
 8017562:	2b00      	cmp	r3, #0
 8017564:	d03d      	beq.n	80175e2 <mqtt_client_connect+0x22e>
    flags |= MQTT_CONNECT_FLAG_USERNAME;
 8017566:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801756a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801756e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    len = strlen(client_info->client_user);
 8017572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017574:	685b      	ldr	r3, [r3, #4]
 8017576:	4618      	mov	r0, r3
 8017578:	f7e8 fe34 	bl	80001e4 <strlen>
 801757c:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->client_user length overflow", len <= 0xFFFF, return ERR_VAL);
 801757e:	69bb      	ldr	r3, [r7, #24]
 8017580:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017584:	d309      	bcc.n	801759a <mqtt_client_connect+0x1e6>
 8017586:	4b37      	ldr	r3, [pc, #220]	; (8017664 <mqtt_client_connect+0x2b0>)
 8017588:	f240 5235 	movw	r2, #1333	; 0x535
 801758c:	493f      	ldr	r1, [pc, #252]	; (801768c <mqtt_client_connect+0x2d8>)
 801758e:	4837      	ldr	r0, [pc, #220]	; (801766c <mqtt_client_connect+0x2b8>)
 8017590:	f00e f90c 	bl	80257ac <iprintf>
 8017594:	f06f 0305 	mvn.w	r3, #5
 8017598:	e177      	b.n	801788a <mqtt_client_connect+0x4d6>
    LWIP_ERROR("mqtt_client_connect: client_info->client_user length must be > 0", len > 0, return ERR_VAL);
 801759a:	69bb      	ldr	r3, [r7, #24]
 801759c:	2b00      	cmp	r3, #0
 801759e:	d109      	bne.n	80175b4 <mqtt_client_connect+0x200>
 80175a0:	4b30      	ldr	r3, [pc, #192]	; (8017664 <mqtt_client_connect+0x2b0>)
 80175a2:	f240 5236 	movw	r2, #1334	; 0x536
 80175a6:	493a      	ldr	r1, [pc, #232]	; (8017690 <mqtt_client_connect+0x2dc>)
 80175a8:	4830      	ldr	r0, [pc, #192]	; (801766c <mqtt_client_connect+0x2b8>)
 80175aa:	f00e f8ff 	bl	80257ac <iprintf>
 80175ae:	f06f 0305 	mvn.w	r3, #5
 80175b2:	e16a      	b.n	801788a <mqtt_client_connect+0x4d6>
    client_user_len = (u16_t)len;
 80175b4:	69bb      	ldr	r3, [r7, #24]
 80175b6:	83fb      	strh	r3, [r7, #30]
    len = remaining_length + 2 + client_user_len;
 80175b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80175ba:	1c9a      	adds	r2, r3, #2
 80175bc:	8bfb      	ldrh	r3, [r7, #30]
 80175be:	4413      	add	r3, r2
 80175c0:	61bb      	str	r3, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 80175c2:	69bb      	ldr	r3, [r7, #24]
 80175c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80175c8:	d309      	bcc.n	80175de <mqtt_client_connect+0x22a>
 80175ca:	4b26      	ldr	r3, [pc, #152]	; (8017664 <mqtt_client_connect+0x2b0>)
 80175cc:	f240 5239 	movw	r2, #1337	; 0x539
 80175d0:	492d      	ldr	r1, [pc, #180]	; (8017688 <mqtt_client_connect+0x2d4>)
 80175d2:	4826      	ldr	r0, [pc, #152]	; (801766c <mqtt_client_connect+0x2b8>)
 80175d4:	f00e f8ea 	bl	80257ac <iprintf>
 80175d8:	f06f 0305 	mvn.w	r3, #5
 80175dc:	e155      	b.n	801788a <mqtt_client_connect+0x4d6>
    remaining_length = (u16_t)len;
 80175de:	69bb      	ldr	r3, [r7, #24]
 80175e0:	84bb      	strh	r3, [r7, #36]	; 0x24
  }
  if (client_info->client_pass != NULL) {
 80175e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80175e4:	689b      	ldr	r3, [r3, #8]
 80175e6:	2b00      	cmp	r3, #0
 80175e8:	d05a      	beq.n	80176a0 <mqtt_client_connect+0x2ec>
    flags |= MQTT_CONNECT_FLAG_PASSWORD;
 80175ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80175ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80175f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    len = strlen(client_info->client_pass);
 80175f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80175f8:	689b      	ldr	r3, [r3, #8]
 80175fa:	4618      	mov	r0, r3
 80175fc:	f7e8 fdf2 	bl	80001e4 <strlen>
 8017600:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->client_pass length overflow", len <= 0xFFFF, return ERR_VAL);
 8017602:	69bb      	ldr	r3, [r7, #24]
 8017604:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017608:	d309      	bcc.n	801761e <mqtt_client_connect+0x26a>
 801760a:	4b16      	ldr	r3, [pc, #88]	; (8017664 <mqtt_client_connect+0x2b0>)
 801760c:	f240 523f 	movw	r2, #1343	; 0x53f
 8017610:	4920      	ldr	r1, [pc, #128]	; (8017694 <mqtt_client_connect+0x2e0>)
 8017612:	4816      	ldr	r0, [pc, #88]	; (801766c <mqtt_client_connect+0x2b8>)
 8017614:	f00e f8ca 	bl	80257ac <iprintf>
 8017618:	f06f 0305 	mvn.w	r3, #5
 801761c:	e135      	b.n	801788a <mqtt_client_connect+0x4d6>
    LWIP_ERROR("mqtt_client_connect: client_info->client_pass length must be > 0", len > 0, return ERR_VAL);
 801761e:	69bb      	ldr	r3, [r7, #24]
 8017620:	2b00      	cmp	r3, #0
 8017622:	d109      	bne.n	8017638 <mqtt_client_connect+0x284>
 8017624:	4b0f      	ldr	r3, [pc, #60]	; (8017664 <mqtt_client_connect+0x2b0>)
 8017626:	f44f 62a8 	mov.w	r2, #1344	; 0x540
 801762a:	491b      	ldr	r1, [pc, #108]	; (8017698 <mqtt_client_connect+0x2e4>)
 801762c:	480f      	ldr	r0, [pc, #60]	; (801766c <mqtt_client_connect+0x2b8>)
 801762e:	f00e f8bd 	bl	80257ac <iprintf>
 8017632:	f06f 0305 	mvn.w	r3, #5
 8017636:	e128      	b.n	801788a <mqtt_client_connect+0x4d6>
    client_pass_len = (u16_t)len;
 8017638:	69bb      	ldr	r3, [r7, #24]
 801763a:	83bb      	strh	r3, [r7, #28]
    len = remaining_length + 2 + client_pass_len;
 801763c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801763e:	1c9a      	adds	r2, r3, #2
 8017640:	8bbb      	ldrh	r3, [r7, #28]
 8017642:	4413      	add	r3, r2
 8017644:	61bb      	str	r3, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 8017646:	69bb      	ldr	r3, [r7, #24]
 8017648:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801764c:	d326      	bcc.n	801769c <mqtt_client_connect+0x2e8>
 801764e:	4b05      	ldr	r3, [pc, #20]	; (8017664 <mqtt_client_connect+0x2b0>)
 8017650:	f240 5243 	movw	r2, #1347	; 0x543
 8017654:	490c      	ldr	r1, [pc, #48]	; (8017688 <mqtt_client_connect+0x2d4>)
 8017656:	4805      	ldr	r0, [pc, #20]	; (801766c <mqtt_client_connect+0x2b8>)
 8017658:	f00e f8a8 	bl	80257ac <iprintf>
 801765c:	f06f 0305 	mvn.w	r3, #5
 8017660:	e113      	b.n	801788a <mqtt_client_connect+0x4d6>
 8017662:	bf00      	nop
 8017664:	0802acf4 	.word	0x0802acf4
 8017668:	0802b174 	.word	0x0802b174
 801766c:	0802ad6c 	.word	0x0802ad6c
 8017670:	0802b198 	.word	0x0802b198
 8017674:	0802b1c0 	.word	0x0802b1c0
 8017678:	0802b1ec 	.word	0x0802b1ec
 801767c:	0802b220 	.word	0x0802b220
 8017680:	0802b260 	.word	0x0802b260
 8017684:	0802b2a0 	.word	0x0802b2a0
 8017688:	0802b2dc 	.word	0x0802b2dc
 801768c:	0802b30c 	.word	0x0802b30c
 8017690:	0802b34c 	.word	0x0802b34c
 8017694:	0802b390 	.word	0x0802b390
 8017698:	0802b3d0 	.word	0x0802b3d0
    remaining_length = (u16_t)len;
 801769c:	69bb      	ldr	r3, [r7, #24]
 801769e:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  /* Don't complicate things, always connect using clean session */
  flags |= MQTT_CONNECT_FLAG_CLEAN_SESSION;
 80176a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80176a4:	f043 0302 	orr.w	r3, r3, #2
 80176a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  len = strlen(client_info->client_id);
 80176ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80176ae:	681b      	ldr	r3, [r3, #0]
 80176b0:	4618      	mov	r0, r3
 80176b2:	f7e8 fd97 	bl	80001e4 <strlen>
 80176b6:	61b8      	str	r0, [r7, #24]
  LWIP_ERROR("mqtt_client_connect: client_info->client_id length overflow", len <= 0xFFFF, return ERR_VAL);
 80176b8:	69bb      	ldr	r3, [r7, #24]
 80176ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80176be:	d309      	bcc.n	80176d4 <mqtt_client_connect+0x320>
 80176c0:	4b74      	ldr	r3, [pc, #464]	; (8017894 <mqtt_client_connect+0x4e0>)
 80176c2:	f240 524b 	movw	r2, #1355	; 0x54b
 80176c6:	4974      	ldr	r1, [pc, #464]	; (8017898 <mqtt_client_connect+0x4e4>)
 80176c8:	4874      	ldr	r0, [pc, #464]	; (801789c <mqtt_client_connect+0x4e8>)
 80176ca:	f00e f86f 	bl	80257ac <iprintf>
 80176ce:	f06f 0305 	mvn.w	r3, #5
 80176d2:	e0da      	b.n	801788a <mqtt_client_connect+0x4d6>
  client_id_length = (u16_t)len;
 80176d4:	69bb      	ldr	r3, [r7, #24]
 80176d6:	82fb      	strh	r3, [r7, #22]
  len = remaining_length + 2 + client_id_length;
 80176d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80176da:	1c9a      	adds	r2, r3, #2
 80176dc:	8afb      	ldrh	r3, [r7, #22]
 80176de:	4413      	add	r3, r2
 80176e0:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 80176e2:	69bb      	ldr	r3, [r7, #24]
 80176e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80176e8:	d309      	bcc.n	80176fe <mqtt_client_connect+0x34a>
 80176ea:	4b6a      	ldr	r3, [pc, #424]	; (8017894 <mqtt_client_connect+0x4e0>)
 80176ec:	f240 524e 	movw	r2, #1358	; 0x54e
 80176f0:	496b      	ldr	r1, [pc, #428]	; (80178a0 <mqtt_client_connect+0x4ec>)
 80176f2:	486a      	ldr	r0, [pc, #424]	; (801789c <mqtt_client_connect+0x4e8>)
 80176f4:	f00e f85a 	bl	80257ac <iprintf>
 80176f8:	f06f 0305 	mvn.w	r3, #5
 80176fc:	e0c5      	b.n	801788a <mqtt_client_connect+0x4d6>
  remaining_length = (u16_t)len;
 80176fe:	69bb      	ldr	r3, [r7, #24]
 8017700:	84bb      	strh	r3, [r7, #36]	; 0x24

  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 8017702:	68fb      	ldr	r3, [r7, #12]
 8017704:	f203 63ec 	addw	r3, r3, #1772	; 0x6ec
 8017708:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801770a:	4611      	mov	r1, r2
 801770c:	4618      	mov	r0, r3
 801770e:	f7fe ff31 	bl	8016574 <mqtt_output_check_space>
 8017712:	4603      	mov	r3, r0
 8017714:	2b00      	cmp	r3, #0
 8017716:	d102      	bne.n	801771e <mqtt_client_connect+0x36a>
    return ERR_MEM;
 8017718:	f04f 33ff 	mov.w	r3, #4294967295
 801771c:	e0b5      	b.n	801788a <mqtt_client_connect+0x4d6>
  if (client_info->tls_config) {
    client->conn = altcp_tls_new(client_info->tls_config, IP_GET_TYPE(ip_addr));
  } else
#endif
  {
    client->conn = altcp_tcp_new_ip_type(IP_GET_TYPE(ip_addr));
 801771e:	2000      	movs	r0, #0
 8017720:	f003 fba2 	bl	801ae68 <tcp_new_ip_type>
 8017724:	4602      	mov	r2, r0
 8017726:	68fb      	ldr	r3, [r7, #12]
 8017728:	60da      	str	r2, [r3, #12]
  }
  if (client->conn == NULL) {
 801772a:	68fb      	ldr	r3, [r7, #12]
 801772c:	68db      	ldr	r3, [r3, #12]
 801772e:	2b00      	cmp	r3, #0
 8017730:	d102      	bne.n	8017738 <mqtt_client_connect+0x384>
    return ERR_MEM;
 8017732:	f04f 33ff 	mov.w	r3, #4294967295
 8017736:	e0a8      	b.n	801788a <mqtt_client_connect+0x4d6>
  }

  /* Set arg pointer for callbacks */
  altcp_arg(client->conn, client);
 8017738:	68fb      	ldr	r3, [r7, #12]
 801773a:	68db      	ldr	r3, [r3, #12]
 801773c:	68f9      	ldr	r1, [r7, #12]
 801773e:	4618      	mov	r0, r3
 8017740:	f003 fba0 	bl	801ae84 <tcp_arg>
  /* Any local address, pick random local port number */
  err = altcp_bind(client->conn, IP_ADDR_ANY, 0);
 8017744:	68fb      	ldr	r3, [r7, #12]
 8017746:	68db      	ldr	r3, [r3, #12]
 8017748:	2200      	movs	r2, #0
 801774a:	4956      	ldr	r1, [pc, #344]	; (80178a4 <mqtt_client_connect+0x4f0>)
 801774c:	4618      	mov	r0, r3
 801774e:	f002 fac9 	bl	8019ce4 <tcp_bind>
 8017752:	4603      	mov	r3, r0
 8017754:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (err != ERR_OK) {
 8017758:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801775c:	2b00      	cmp	r3, #0
 801775e:	f040 8087 	bne.w	8017870 <mqtt_client_connect+0x4bc>
    goto tcp_fail;
  }
  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_client_connect: Connecting to host: %s at port:%"U16_F"\n", ipaddr_ntoa(ip_addr), port));

  /* Connect to server */
  err = altcp_connect(client->conn, ip_addr, port, mqtt_tcp_connect_cb);
 8017762:	68fb      	ldr	r3, [r7, #12]
 8017764:	68d8      	ldr	r0, [r3, #12]
 8017766:	88fa      	ldrh	r2, [r7, #6]
 8017768:	4b4f      	ldr	r3, [pc, #316]	; (80178a8 <mqtt_client_connect+0x4f4>)
 801776a:	68b9      	ldr	r1, [r7, #8]
 801776c:	f002 fc42 	bl	8019ff4 <tcp_connect>
 8017770:	4603      	mov	r3, r0
 8017772:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (err != ERR_OK) {
 8017776:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801777a:	2b00      	cmp	r3, #0
 801777c:	d17a      	bne.n	8017874 <mqtt_client_connect+0x4c0>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_client_connect: Error connecting to remote ip/port, %d\n", err));
    goto tcp_fail;
  }
  /* Set error callback */
  altcp_err(client->conn, mqtt_tcp_err_cb);
 801777e:	68fb      	ldr	r3, [r7, #12]
 8017780:	68db      	ldr	r3, [r3, #12]
 8017782:	494a      	ldr	r1, [pc, #296]	; (80178ac <mqtt_client_connect+0x4f8>)
 8017784:	4618      	mov	r0, r3
 8017786:	f003 fbd3 	bl	801af30 <tcp_err>
  client->conn_state = TCP_CONNECTING;
 801778a:	68fb      	ldr	r3, [r7, #12]
 801778c:	2201      	movs	r2, #1
 801778e:	729a      	strb	r2, [r3, #10]

  /* Append fixed header */
  mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_CONNECT, 0, 0, 0, remaining_length);
 8017790:	68fb      	ldr	r3, [r7, #12]
 8017792:	f203 60ec 	addw	r0, r3, #1772	; 0x6ec
 8017796:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017798:	9301      	str	r3, [sp, #4]
 801779a:	2300      	movs	r3, #0
 801779c:	9300      	str	r3, [sp, #0]
 801779e:	2300      	movs	r3, #0
 80177a0:	2200      	movs	r2, #0
 80177a2:	2101      	movs	r1, #1
 80177a4:	f7fe fe9b 	bl	80164de <mqtt_output_append_fixed_header>
  /* Append Protocol string */
  mqtt_output_append_string(&client->output, "MQTT", 4);
 80177a8:	68fb      	ldr	r3, [r7, #12]
 80177aa:	f203 63ec 	addw	r3, r3, #1772	; 0x6ec
 80177ae:	2204      	movs	r2, #4
 80177b0:	493f      	ldr	r1, [pc, #252]	; (80178b0 <mqtt_client_connect+0x4fc>)
 80177b2:	4618      	mov	r0, r3
 80177b4:	f7fe fe67 	bl	8016486 <mqtt_output_append_string>
  /* Append Protocol level */
  mqtt_output_append_u8(&client->output, 4);
 80177b8:	68fb      	ldr	r3, [r7, #12]
 80177ba:	f203 63ec 	addw	r3, r3, #1772	; 0x6ec
 80177be:	2104      	movs	r1, #4
 80177c0:	4618      	mov	r0, r3
 80177c2:	f7fe fe1b 	bl	80163fc <mqtt_output_append_u8>
  /* Append connect flags */
  mqtt_output_append_u8(&client->output, flags);
 80177c6:	68fb      	ldr	r3, [r7, #12]
 80177c8:	f203 63ec 	addw	r3, r3, #1772	; 0x6ec
 80177cc:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80177d0:	4611      	mov	r1, r2
 80177d2:	4618      	mov	r0, r3
 80177d4:	f7fe fe12 	bl	80163fc <mqtt_output_append_u8>
  /* Append keep-alive */
  mqtt_output_append_u16(&client->output, client_info->keep_alive);
 80177d8:	68fb      	ldr	r3, [r7, #12]
 80177da:	f203 62ec 	addw	r2, r3, #1772	; 0x6ec
 80177de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80177e0:	899b      	ldrh	r3, [r3, #12]
 80177e2:	4619      	mov	r1, r3
 80177e4:	4610      	mov	r0, r2
 80177e6:	f7fe fe18 	bl	801641a <mqtt_output_append_u16>
  /* Append client id */
  mqtt_output_append_string(&client->output, client_info->client_id, client_id_length);
 80177ea:	68fb      	ldr	r3, [r7, #12]
 80177ec:	f203 60ec 	addw	r0, r3, #1772	; 0x6ec
 80177f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80177f2:	681b      	ldr	r3, [r3, #0]
 80177f4:	8afa      	ldrh	r2, [r7, #22]
 80177f6:	4619      	mov	r1, r3
 80177f8:	f7fe fe45 	bl	8016486 <mqtt_output_append_string>
  /* Append will message if used */
  if ((flags & MQTT_CONNECT_FLAG_WILL) != 0) {
 80177fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017800:	f003 0304 	and.w	r3, r3, #4
 8017804:	2b00      	cmp	r3, #0
 8017806:	d015      	beq.n	8017834 <mqtt_client_connect+0x480>
    mqtt_output_append_string(&client->output, client_info->will_topic, will_topic_len);
 8017808:	68fb      	ldr	r3, [r7, #12]
 801780a:	f203 60ec 	addw	r0, r3, #1772	; 0x6ec
 801780e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017810:	691b      	ldr	r3, [r3, #16]
 8017812:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8017816:	b292      	uxth	r2, r2
 8017818:	4619      	mov	r1, r3
 801781a:	f7fe fe34 	bl	8016486 <mqtt_output_append_string>
    mqtt_output_append_string(&client->output, client_info->will_msg, will_msg_len);
 801781e:	68fb      	ldr	r3, [r7, #12]
 8017820:	f203 60ec 	addw	r0, r3, #1772	; 0x6ec
 8017824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017826:	695b      	ldr	r3, [r3, #20]
 8017828:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 801782c:	b292      	uxth	r2, r2
 801782e:	4619      	mov	r1, r3
 8017830:	f7fe fe29 	bl	8016486 <mqtt_output_append_string>
  }
  /* Append user name if given */
  if ((flags & MQTT_CONNECT_FLAG_USERNAME) != 0) {
 8017834:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8017838:	2b00      	cmp	r3, #0
 801783a:	da08      	bge.n	801784e <mqtt_client_connect+0x49a>
    mqtt_output_append_string(&client->output, client_info->client_user, client_user_len);
 801783c:	68fb      	ldr	r3, [r7, #12]
 801783e:	f203 60ec 	addw	r0, r3, #1772	; 0x6ec
 8017842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017844:	685b      	ldr	r3, [r3, #4]
 8017846:	8bfa      	ldrh	r2, [r7, #30]
 8017848:	4619      	mov	r1, r3
 801784a:	f7fe fe1c 	bl	8016486 <mqtt_output_append_string>
  }
  /* Append password if given */
  if ((flags & MQTT_CONNECT_FLAG_PASSWORD) != 0) {
 801784e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017856:	2b00      	cmp	r3, #0
 8017858:	d008      	beq.n	801786c <mqtt_client_connect+0x4b8>
    mqtt_output_append_string(&client->output, client_info->client_pass, client_pass_len);
 801785a:	68fb      	ldr	r3, [r7, #12]
 801785c:	f203 60ec 	addw	r0, r3, #1772	; 0x6ec
 8017860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017862:	689b      	ldr	r3, [r3, #8]
 8017864:	8bba      	ldrh	r2, [r7, #28]
 8017866:	4619      	mov	r1, r3
 8017868:	f7fe fe0d 	bl	8016486 <mqtt_output_append_string>
  }
  return ERR_OK;
 801786c:	2300      	movs	r3, #0
 801786e:	e00c      	b.n	801788a <mqtt_client_connect+0x4d6>
    goto tcp_fail;
 8017870:	bf00      	nop
 8017872:	e000      	b.n	8017876 <mqtt_client_connect+0x4c2>
    goto tcp_fail;
 8017874:	bf00      	nop

tcp_fail:
  altcp_abort(client->conn);
 8017876:	68fb      	ldr	r3, [r7, #12]
 8017878:	68db      	ldr	r3, [r3, #12]
 801787a:	4618      	mov	r0, r3
 801787c:	f002 fa26 	bl	8019ccc <tcp_abort>
  client->conn = NULL;
 8017880:	68fb      	ldr	r3, [r7, #12]
 8017882:	2200      	movs	r2, #0
 8017884:	60da      	str	r2, [r3, #12]
  return err;
 8017886:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801788a:	4618      	mov	r0, r3
 801788c:	3728      	adds	r7, #40	; 0x28
 801788e:	46bd      	mov	sp, r7
 8017890:	bd80      	pop	{r7, pc}
 8017892:	bf00      	nop
 8017894:	0802acf4 	.word	0x0802acf4
 8017898:	0802b414 	.word	0x0802b414
 801789c:	0802ad6c 	.word	0x0802ad6c
 80178a0:	0802b2dc 	.word	0x0802b2dc
 80178a4:	0802e468 	.word	0x0802e468
 80178a8:	08016f69 	.word	0x08016f69
 80178ac:	08016ef1 	.word	0x08016ef1
 80178b0:	0802b450 	.word	0x0802b450

080178b4 <mqtt_disconnect>:
 * Disconnect from MQTT server
 * @param client MQTT client
 */
void
mqtt_disconnect(mqtt_client_t *client)
{
 80178b4:	b580      	push	{r7, lr}
 80178b6:	b082      	sub	sp, #8
 80178b8:	af00      	add	r7, sp, #0
 80178ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_disconnect: client != NULL", client);
 80178bc:	687b      	ldr	r3, [r7, #4]
 80178be:	2b00      	cmp	r3, #0
 80178c0:	d106      	bne.n	80178d0 <mqtt_disconnect+0x1c>
 80178c2:	4b0b      	ldr	r3, [pc, #44]	; (80178f0 <mqtt_disconnect+0x3c>)
 80178c4:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 80178c8:	490a      	ldr	r1, [pc, #40]	; (80178f4 <mqtt_disconnect+0x40>)
 80178ca:	480b      	ldr	r0, [pc, #44]	; (80178f8 <mqtt_disconnect+0x44>)
 80178cc:	f00d ff6e 	bl	80257ac <iprintf>
  /* If connection in not already closed */
  if (client->conn_state != TCP_DISCONNECTED) {
 80178d0:	687b      	ldr	r3, [r7, #4]
 80178d2:	7a9b      	ldrb	r3, [r3, #10]
 80178d4:	2b00      	cmp	r3, #0
 80178d6:	d006      	beq.n	80178e6 <mqtt_disconnect+0x32>
    /* Set conn_state before calling mqtt_close to prevent callback from being called */
    client->conn_state = TCP_DISCONNECTED;
 80178d8:	687b      	ldr	r3, [r7, #4]
 80178da:	2200      	movs	r2, #0
 80178dc:	729a      	strb	r2, [r3, #10]
    mqtt_close(client, (mqtt_connection_status_t)0);
 80178de:	2100      	movs	r1, #0
 80178e0:	6878      	ldr	r0, [r7, #4]
 80178e2:	f7fe fe79 	bl	80165d8 <mqtt_close>
  }
}
 80178e6:	bf00      	nop
 80178e8:	3708      	adds	r7, #8
 80178ea:	46bd      	mov	sp, r7
 80178ec:	bd80      	pop	{r7, pc}
 80178ee:	bf00      	nop
 80178f0:	0802acf4 	.word	0x0802acf4
 80178f4:	0802b458 	.word	0x0802b458
 80178f8:	0802ad6c 	.word	0x0802ad6c

080178fc <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80178fc:	b480      	push	{r7}
 80178fe:	b083      	sub	sp, #12
 8017900:	af00      	add	r7, sp, #0
 8017902:	4603      	mov	r3, r0
 8017904:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8017906:	88fb      	ldrh	r3, [r7, #6]
 8017908:	021b      	lsls	r3, r3, #8
 801790a:	b21a      	sxth	r2, r3
 801790c:	88fb      	ldrh	r3, [r7, #6]
 801790e:	0a1b      	lsrs	r3, r3, #8
 8017910:	b29b      	uxth	r3, r3
 8017912:	b21b      	sxth	r3, r3
 8017914:	4313      	orrs	r3, r2
 8017916:	b21b      	sxth	r3, r3
 8017918:	b29b      	uxth	r3, r3
}
 801791a:	4618      	mov	r0, r3
 801791c:	370c      	adds	r7, #12
 801791e:	46bd      	mov	sp, r7
 8017920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017924:	4770      	bx	lr

08017926 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8017926:	b480      	push	{r7}
 8017928:	b083      	sub	sp, #12
 801792a:	af00      	add	r7, sp, #0
 801792c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 801792e:	687b      	ldr	r3, [r7, #4]
 8017930:	061a      	lsls	r2, r3, #24
 8017932:	687b      	ldr	r3, [r7, #4]
 8017934:	021b      	lsls	r3, r3, #8
 8017936:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801793a:	431a      	orrs	r2, r3
 801793c:	687b      	ldr	r3, [r7, #4]
 801793e:	0a1b      	lsrs	r3, r3, #8
 8017940:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8017944:	431a      	orrs	r2, r3
 8017946:	687b      	ldr	r3, [r7, #4]
 8017948:	0e1b      	lsrs	r3, r3, #24
 801794a:	4313      	orrs	r3, r2
}
 801794c:	4618      	mov	r0, r3
 801794e:	370c      	adds	r7, #12
 8017950:	46bd      	mov	sp, r7
 8017952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017956:	4770      	bx	lr

08017958 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8017958:	b580      	push	{r7, lr}
 801795a:	b082      	sub	sp, #8
 801795c:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 801795e:	2300      	movs	r3, #0
 8017960:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8017962:	f00c ff79 	bl	8024858 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8017966:	f000 f8d5 	bl	8017b14 <mem_init>
  memp_init();
 801796a:	f000 fc59 	bl	8018220 <memp_init>
  pbuf_init();
  netif_init();
 801796e:	f000 fd1f 	bl	80183b0 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8017972:	f008 f8c5 	bl	801fb00 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8017976:	f001 feaf 	bl	80196d8 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 801797a:	f007 ffcd 	bl	801f918 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 801797e:	bf00      	nop
 8017980:	3708      	adds	r7, #8
 8017982:	46bd      	mov	sp, r7
 8017984:	bd80      	pop	{r7, pc}
	...

08017988 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8017988:	b480      	push	{r7}
 801798a:	b083      	sub	sp, #12
 801798c:	af00      	add	r7, sp, #0
 801798e:	4603      	mov	r3, r0
 8017990:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8017992:	4b05      	ldr	r3, [pc, #20]	; (80179a8 <ptr_to_mem+0x20>)
 8017994:	681a      	ldr	r2, [r3, #0]
 8017996:	88fb      	ldrh	r3, [r7, #6]
 8017998:	4413      	add	r3, r2
}
 801799a:	4618      	mov	r0, r3
 801799c:	370c      	adds	r7, #12
 801799e:	46bd      	mov	sp, r7
 80179a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179a4:	4770      	bx	lr
 80179a6:	bf00      	nop
 80179a8:	20013798 	.word	0x20013798

080179ac <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80179ac:	b480      	push	{r7}
 80179ae:	b083      	sub	sp, #12
 80179b0:	af00      	add	r7, sp, #0
 80179b2:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80179b4:	4b05      	ldr	r3, [pc, #20]	; (80179cc <mem_to_ptr+0x20>)
 80179b6:	681b      	ldr	r3, [r3, #0]
 80179b8:	687a      	ldr	r2, [r7, #4]
 80179ba:	1ad3      	subs	r3, r2, r3
 80179bc:	b29b      	uxth	r3, r3
}
 80179be:	4618      	mov	r0, r3
 80179c0:	370c      	adds	r7, #12
 80179c2:	46bd      	mov	sp, r7
 80179c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179c8:	4770      	bx	lr
 80179ca:	bf00      	nop
 80179cc:	20013798 	.word	0x20013798

080179d0 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80179d0:	b590      	push	{r4, r7, lr}
 80179d2:	b085      	sub	sp, #20
 80179d4:	af00      	add	r7, sp, #0
 80179d6:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80179d8:	4b45      	ldr	r3, [pc, #276]	; (8017af0 <plug_holes+0x120>)
 80179da:	681b      	ldr	r3, [r3, #0]
 80179dc:	687a      	ldr	r2, [r7, #4]
 80179de:	429a      	cmp	r2, r3
 80179e0:	d206      	bcs.n	80179f0 <plug_holes+0x20>
 80179e2:	4b44      	ldr	r3, [pc, #272]	; (8017af4 <plug_holes+0x124>)
 80179e4:	f240 12df 	movw	r2, #479	; 0x1df
 80179e8:	4943      	ldr	r1, [pc, #268]	; (8017af8 <plug_holes+0x128>)
 80179ea:	4844      	ldr	r0, [pc, #272]	; (8017afc <plug_holes+0x12c>)
 80179ec:	f00d fede 	bl	80257ac <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80179f0:	4b43      	ldr	r3, [pc, #268]	; (8017b00 <plug_holes+0x130>)
 80179f2:	681b      	ldr	r3, [r3, #0]
 80179f4:	687a      	ldr	r2, [r7, #4]
 80179f6:	429a      	cmp	r2, r3
 80179f8:	d306      	bcc.n	8017a08 <plug_holes+0x38>
 80179fa:	4b3e      	ldr	r3, [pc, #248]	; (8017af4 <plug_holes+0x124>)
 80179fc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8017a00:	4940      	ldr	r1, [pc, #256]	; (8017b04 <plug_holes+0x134>)
 8017a02:	483e      	ldr	r0, [pc, #248]	; (8017afc <plug_holes+0x12c>)
 8017a04:	f00d fed2 	bl	80257ac <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8017a08:	687b      	ldr	r3, [r7, #4]
 8017a0a:	791b      	ldrb	r3, [r3, #4]
 8017a0c:	2b00      	cmp	r3, #0
 8017a0e:	d006      	beq.n	8017a1e <plug_holes+0x4e>
 8017a10:	4b38      	ldr	r3, [pc, #224]	; (8017af4 <plug_holes+0x124>)
 8017a12:	f240 12e1 	movw	r2, #481	; 0x1e1
 8017a16:	493c      	ldr	r1, [pc, #240]	; (8017b08 <plug_holes+0x138>)
 8017a18:	4838      	ldr	r0, [pc, #224]	; (8017afc <plug_holes+0x12c>)
 8017a1a:	f00d fec7 	bl	80257ac <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8017a1e:	687b      	ldr	r3, [r7, #4]
 8017a20:	881b      	ldrh	r3, [r3, #0]
 8017a22:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8017a26:	d906      	bls.n	8017a36 <plug_holes+0x66>
 8017a28:	4b32      	ldr	r3, [pc, #200]	; (8017af4 <plug_holes+0x124>)
 8017a2a:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8017a2e:	4937      	ldr	r1, [pc, #220]	; (8017b0c <plug_holes+0x13c>)
 8017a30:	4832      	ldr	r0, [pc, #200]	; (8017afc <plug_holes+0x12c>)
 8017a32:	f00d febb 	bl	80257ac <iprintf>

  nmem = ptr_to_mem(mem->next);
 8017a36:	687b      	ldr	r3, [r7, #4]
 8017a38:	881b      	ldrh	r3, [r3, #0]
 8017a3a:	4618      	mov	r0, r3
 8017a3c:	f7ff ffa4 	bl	8017988 <ptr_to_mem>
 8017a40:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8017a42:	687a      	ldr	r2, [r7, #4]
 8017a44:	68fb      	ldr	r3, [r7, #12]
 8017a46:	429a      	cmp	r2, r3
 8017a48:	d024      	beq.n	8017a94 <plug_holes+0xc4>
 8017a4a:	68fb      	ldr	r3, [r7, #12]
 8017a4c:	791b      	ldrb	r3, [r3, #4]
 8017a4e:	2b00      	cmp	r3, #0
 8017a50:	d120      	bne.n	8017a94 <plug_holes+0xc4>
 8017a52:	4b2b      	ldr	r3, [pc, #172]	; (8017b00 <plug_holes+0x130>)
 8017a54:	681b      	ldr	r3, [r3, #0]
 8017a56:	68fa      	ldr	r2, [r7, #12]
 8017a58:	429a      	cmp	r2, r3
 8017a5a:	d01b      	beq.n	8017a94 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8017a5c:	4b2c      	ldr	r3, [pc, #176]	; (8017b10 <plug_holes+0x140>)
 8017a5e:	681b      	ldr	r3, [r3, #0]
 8017a60:	68fa      	ldr	r2, [r7, #12]
 8017a62:	429a      	cmp	r2, r3
 8017a64:	d102      	bne.n	8017a6c <plug_holes+0x9c>
      lfree = mem;
 8017a66:	4a2a      	ldr	r2, [pc, #168]	; (8017b10 <plug_holes+0x140>)
 8017a68:	687b      	ldr	r3, [r7, #4]
 8017a6a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8017a6c:	68fb      	ldr	r3, [r7, #12]
 8017a6e:	881a      	ldrh	r2, [r3, #0]
 8017a70:	687b      	ldr	r3, [r7, #4]
 8017a72:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8017a74:	68fb      	ldr	r3, [r7, #12]
 8017a76:	881b      	ldrh	r3, [r3, #0]
 8017a78:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8017a7c:	d00a      	beq.n	8017a94 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8017a7e:	68fb      	ldr	r3, [r7, #12]
 8017a80:	881b      	ldrh	r3, [r3, #0]
 8017a82:	4618      	mov	r0, r3
 8017a84:	f7ff ff80 	bl	8017988 <ptr_to_mem>
 8017a88:	4604      	mov	r4, r0
 8017a8a:	6878      	ldr	r0, [r7, #4]
 8017a8c:	f7ff ff8e 	bl	80179ac <mem_to_ptr>
 8017a90:	4603      	mov	r3, r0
 8017a92:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8017a94:	687b      	ldr	r3, [r7, #4]
 8017a96:	885b      	ldrh	r3, [r3, #2]
 8017a98:	4618      	mov	r0, r3
 8017a9a:	f7ff ff75 	bl	8017988 <ptr_to_mem>
 8017a9e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8017aa0:	68ba      	ldr	r2, [r7, #8]
 8017aa2:	687b      	ldr	r3, [r7, #4]
 8017aa4:	429a      	cmp	r2, r3
 8017aa6:	d01f      	beq.n	8017ae8 <plug_holes+0x118>
 8017aa8:	68bb      	ldr	r3, [r7, #8]
 8017aaa:	791b      	ldrb	r3, [r3, #4]
 8017aac:	2b00      	cmp	r3, #0
 8017aae:	d11b      	bne.n	8017ae8 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8017ab0:	4b17      	ldr	r3, [pc, #92]	; (8017b10 <plug_holes+0x140>)
 8017ab2:	681b      	ldr	r3, [r3, #0]
 8017ab4:	687a      	ldr	r2, [r7, #4]
 8017ab6:	429a      	cmp	r2, r3
 8017ab8:	d102      	bne.n	8017ac0 <plug_holes+0xf0>
      lfree = pmem;
 8017aba:	4a15      	ldr	r2, [pc, #84]	; (8017b10 <plug_holes+0x140>)
 8017abc:	68bb      	ldr	r3, [r7, #8]
 8017abe:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8017ac0:	687b      	ldr	r3, [r7, #4]
 8017ac2:	881a      	ldrh	r2, [r3, #0]
 8017ac4:	68bb      	ldr	r3, [r7, #8]
 8017ac6:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8017ac8:	687b      	ldr	r3, [r7, #4]
 8017aca:	881b      	ldrh	r3, [r3, #0]
 8017acc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8017ad0:	d00a      	beq.n	8017ae8 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8017ad2:	687b      	ldr	r3, [r7, #4]
 8017ad4:	881b      	ldrh	r3, [r3, #0]
 8017ad6:	4618      	mov	r0, r3
 8017ad8:	f7ff ff56 	bl	8017988 <ptr_to_mem>
 8017adc:	4604      	mov	r4, r0
 8017ade:	68b8      	ldr	r0, [r7, #8]
 8017ae0:	f7ff ff64 	bl	80179ac <mem_to_ptr>
 8017ae4:	4603      	mov	r3, r0
 8017ae6:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8017ae8:	bf00      	nop
 8017aea:	3714      	adds	r7, #20
 8017aec:	46bd      	mov	sp, r7
 8017aee:	bd90      	pop	{r4, r7, pc}
 8017af0:	20013798 	.word	0x20013798
 8017af4:	0802b4a4 	.word	0x0802b4a4
 8017af8:	0802b4d4 	.word	0x0802b4d4
 8017afc:	0802b4ec 	.word	0x0802b4ec
 8017b00:	2001379c 	.word	0x2001379c
 8017b04:	0802b514 	.word	0x0802b514
 8017b08:	0802b530 	.word	0x0802b530
 8017b0c:	0802b54c 	.word	0x0802b54c
 8017b10:	200137a4 	.word	0x200137a4

08017b14 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8017b14:	b580      	push	{r7, lr}
 8017b16:	b082      	sub	sp, #8
 8017b18:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8017b1a:	4b1f      	ldr	r3, [pc, #124]	; (8017b98 <mem_init+0x84>)
 8017b1c:	3303      	adds	r3, #3
 8017b1e:	f023 0303 	bic.w	r3, r3, #3
 8017b22:	461a      	mov	r2, r3
 8017b24:	4b1d      	ldr	r3, [pc, #116]	; (8017b9c <mem_init+0x88>)
 8017b26:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8017b28:	4b1c      	ldr	r3, [pc, #112]	; (8017b9c <mem_init+0x88>)
 8017b2a:	681b      	ldr	r3, [r3, #0]
 8017b2c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8017b2e:	687b      	ldr	r3, [r7, #4]
 8017b30:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8017b34:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8017b36:	687b      	ldr	r3, [r7, #4]
 8017b38:	2200      	movs	r2, #0
 8017b3a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8017b3c:	687b      	ldr	r3, [r7, #4]
 8017b3e:	2200      	movs	r2, #0
 8017b40:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8017b42:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8017b46:	f7ff ff1f 	bl	8017988 <ptr_to_mem>
 8017b4a:	4603      	mov	r3, r0
 8017b4c:	4a14      	ldr	r2, [pc, #80]	; (8017ba0 <mem_init+0x8c>)
 8017b4e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8017b50:	4b13      	ldr	r3, [pc, #76]	; (8017ba0 <mem_init+0x8c>)
 8017b52:	681b      	ldr	r3, [r3, #0]
 8017b54:	2201      	movs	r2, #1
 8017b56:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8017b58:	4b11      	ldr	r3, [pc, #68]	; (8017ba0 <mem_init+0x8c>)
 8017b5a:	681b      	ldr	r3, [r3, #0]
 8017b5c:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8017b60:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8017b62:	4b0f      	ldr	r3, [pc, #60]	; (8017ba0 <mem_init+0x8c>)
 8017b64:	681b      	ldr	r3, [r3, #0]
 8017b66:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8017b6a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8017b6c:	4b0b      	ldr	r3, [pc, #44]	; (8017b9c <mem_init+0x88>)
 8017b6e:	681b      	ldr	r3, [r3, #0]
 8017b70:	4a0c      	ldr	r2, [pc, #48]	; (8017ba4 <mem_init+0x90>)
 8017b72:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8017b74:	480c      	ldr	r0, [pc, #48]	; (8017ba8 <mem_init+0x94>)
 8017b76:	f00c fe7b 	bl	8024870 <sys_mutex_new>
 8017b7a:	4603      	mov	r3, r0
 8017b7c:	2b00      	cmp	r3, #0
 8017b7e:	d006      	beq.n	8017b8e <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8017b80:	4b0a      	ldr	r3, [pc, #40]	; (8017bac <mem_init+0x98>)
 8017b82:	f240 221f 	movw	r2, #543	; 0x21f
 8017b86:	490a      	ldr	r1, [pc, #40]	; (8017bb0 <mem_init+0x9c>)
 8017b88:	480a      	ldr	r0, [pc, #40]	; (8017bb4 <mem_init+0xa0>)
 8017b8a:	f00d fe0f 	bl	80257ac <iprintf>
  }
}
 8017b8e:	bf00      	nop
 8017b90:	3708      	adds	r7, #8
 8017b92:	46bd      	mov	sp, r7
 8017b94:	bd80      	pop	{r7, pc}
 8017b96:	bf00      	nop
 8017b98:	20017790 	.word	0x20017790
 8017b9c:	20013798 	.word	0x20013798
 8017ba0:	2001379c 	.word	0x2001379c
 8017ba4:	200137a4 	.word	0x200137a4
 8017ba8:	200137a0 	.word	0x200137a0
 8017bac:	0802b4a4 	.word	0x0802b4a4
 8017bb0:	0802b578 	.word	0x0802b578
 8017bb4:	0802b4ec 	.word	0x0802b4ec

08017bb8 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8017bb8:	b580      	push	{r7, lr}
 8017bba:	b086      	sub	sp, #24
 8017bbc:	af00      	add	r7, sp, #0
 8017bbe:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8017bc0:	6878      	ldr	r0, [r7, #4]
 8017bc2:	f7ff fef3 	bl	80179ac <mem_to_ptr>
 8017bc6:	4603      	mov	r3, r0
 8017bc8:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8017bca:	687b      	ldr	r3, [r7, #4]
 8017bcc:	881b      	ldrh	r3, [r3, #0]
 8017bce:	4618      	mov	r0, r3
 8017bd0:	f7ff feda 	bl	8017988 <ptr_to_mem>
 8017bd4:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8017bd6:	687b      	ldr	r3, [r7, #4]
 8017bd8:	885b      	ldrh	r3, [r3, #2]
 8017bda:	4618      	mov	r0, r3
 8017bdc:	f7ff fed4 	bl	8017988 <ptr_to_mem>
 8017be0:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8017be2:	687b      	ldr	r3, [r7, #4]
 8017be4:	881b      	ldrh	r3, [r3, #0]
 8017be6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8017bea:	d818      	bhi.n	8017c1e <mem_link_valid+0x66>
 8017bec:	687b      	ldr	r3, [r7, #4]
 8017bee:	885b      	ldrh	r3, [r3, #2]
 8017bf0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8017bf4:	d813      	bhi.n	8017c1e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8017bf6:	687b      	ldr	r3, [r7, #4]
 8017bf8:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8017bfa:	8afa      	ldrh	r2, [r7, #22]
 8017bfc:	429a      	cmp	r2, r3
 8017bfe:	d004      	beq.n	8017c0a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8017c00:	68fb      	ldr	r3, [r7, #12]
 8017c02:	881b      	ldrh	r3, [r3, #0]
 8017c04:	8afa      	ldrh	r2, [r7, #22]
 8017c06:	429a      	cmp	r2, r3
 8017c08:	d109      	bne.n	8017c1e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8017c0a:	4b08      	ldr	r3, [pc, #32]	; (8017c2c <mem_link_valid+0x74>)
 8017c0c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8017c0e:	693a      	ldr	r2, [r7, #16]
 8017c10:	429a      	cmp	r2, r3
 8017c12:	d006      	beq.n	8017c22 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8017c14:	693b      	ldr	r3, [r7, #16]
 8017c16:	885b      	ldrh	r3, [r3, #2]
 8017c18:	8afa      	ldrh	r2, [r7, #22]
 8017c1a:	429a      	cmp	r2, r3
 8017c1c:	d001      	beq.n	8017c22 <mem_link_valid+0x6a>
    return 0;
 8017c1e:	2300      	movs	r3, #0
 8017c20:	e000      	b.n	8017c24 <mem_link_valid+0x6c>
  }
  return 1;
 8017c22:	2301      	movs	r3, #1
}
 8017c24:	4618      	mov	r0, r3
 8017c26:	3718      	adds	r7, #24
 8017c28:	46bd      	mov	sp, r7
 8017c2a:	bd80      	pop	{r7, pc}
 8017c2c:	2001379c 	.word	0x2001379c

08017c30 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8017c30:	b580      	push	{r7, lr}
 8017c32:	b088      	sub	sp, #32
 8017c34:	af00      	add	r7, sp, #0
 8017c36:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8017c38:	687b      	ldr	r3, [r7, #4]
 8017c3a:	2b00      	cmp	r3, #0
 8017c3c:	d070      	beq.n	8017d20 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8017c3e:	687b      	ldr	r3, [r7, #4]
 8017c40:	f003 0303 	and.w	r3, r3, #3
 8017c44:	2b00      	cmp	r3, #0
 8017c46:	d00d      	beq.n	8017c64 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8017c48:	4b37      	ldr	r3, [pc, #220]	; (8017d28 <mem_free+0xf8>)
 8017c4a:	f240 2273 	movw	r2, #627	; 0x273
 8017c4e:	4937      	ldr	r1, [pc, #220]	; (8017d2c <mem_free+0xfc>)
 8017c50:	4837      	ldr	r0, [pc, #220]	; (8017d30 <mem_free+0x100>)
 8017c52:	f00d fdab 	bl	80257ac <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8017c56:	f00c fe5d 	bl	8024914 <sys_arch_protect>
 8017c5a:	60f8      	str	r0, [r7, #12]
 8017c5c:	68f8      	ldr	r0, [r7, #12]
 8017c5e:	f00c fe67 	bl	8024930 <sys_arch_unprotect>
    return;
 8017c62:	e05e      	b.n	8017d22 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8017c64:	687b      	ldr	r3, [r7, #4]
 8017c66:	3b08      	subs	r3, #8
 8017c68:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8017c6a:	4b32      	ldr	r3, [pc, #200]	; (8017d34 <mem_free+0x104>)
 8017c6c:	681b      	ldr	r3, [r3, #0]
 8017c6e:	69fa      	ldr	r2, [r7, #28]
 8017c70:	429a      	cmp	r2, r3
 8017c72:	d306      	bcc.n	8017c82 <mem_free+0x52>
 8017c74:	687b      	ldr	r3, [r7, #4]
 8017c76:	f103 020c 	add.w	r2, r3, #12
 8017c7a:	4b2f      	ldr	r3, [pc, #188]	; (8017d38 <mem_free+0x108>)
 8017c7c:	681b      	ldr	r3, [r3, #0]
 8017c7e:	429a      	cmp	r2, r3
 8017c80:	d90d      	bls.n	8017c9e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8017c82:	4b29      	ldr	r3, [pc, #164]	; (8017d28 <mem_free+0xf8>)
 8017c84:	f240 227f 	movw	r2, #639	; 0x27f
 8017c88:	492c      	ldr	r1, [pc, #176]	; (8017d3c <mem_free+0x10c>)
 8017c8a:	4829      	ldr	r0, [pc, #164]	; (8017d30 <mem_free+0x100>)
 8017c8c:	f00d fd8e 	bl	80257ac <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8017c90:	f00c fe40 	bl	8024914 <sys_arch_protect>
 8017c94:	6138      	str	r0, [r7, #16]
 8017c96:	6938      	ldr	r0, [r7, #16]
 8017c98:	f00c fe4a 	bl	8024930 <sys_arch_unprotect>
    return;
 8017c9c:	e041      	b.n	8017d22 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8017c9e:	4828      	ldr	r0, [pc, #160]	; (8017d40 <mem_free+0x110>)
 8017ca0:	f00c fdfc 	bl	802489c <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8017ca4:	69fb      	ldr	r3, [r7, #28]
 8017ca6:	791b      	ldrb	r3, [r3, #4]
 8017ca8:	2b00      	cmp	r3, #0
 8017caa:	d110      	bne.n	8017cce <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8017cac:	4b1e      	ldr	r3, [pc, #120]	; (8017d28 <mem_free+0xf8>)
 8017cae:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8017cb2:	4924      	ldr	r1, [pc, #144]	; (8017d44 <mem_free+0x114>)
 8017cb4:	481e      	ldr	r0, [pc, #120]	; (8017d30 <mem_free+0x100>)
 8017cb6:	f00d fd79 	bl	80257ac <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8017cba:	4821      	ldr	r0, [pc, #132]	; (8017d40 <mem_free+0x110>)
 8017cbc:	f00c fdfd 	bl	80248ba <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8017cc0:	f00c fe28 	bl	8024914 <sys_arch_protect>
 8017cc4:	6178      	str	r0, [r7, #20]
 8017cc6:	6978      	ldr	r0, [r7, #20]
 8017cc8:	f00c fe32 	bl	8024930 <sys_arch_unprotect>
    return;
 8017ccc:	e029      	b.n	8017d22 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8017cce:	69f8      	ldr	r0, [r7, #28]
 8017cd0:	f7ff ff72 	bl	8017bb8 <mem_link_valid>
 8017cd4:	4603      	mov	r3, r0
 8017cd6:	2b00      	cmp	r3, #0
 8017cd8:	d110      	bne.n	8017cfc <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8017cda:	4b13      	ldr	r3, [pc, #76]	; (8017d28 <mem_free+0xf8>)
 8017cdc:	f240 2295 	movw	r2, #661	; 0x295
 8017ce0:	4919      	ldr	r1, [pc, #100]	; (8017d48 <mem_free+0x118>)
 8017ce2:	4813      	ldr	r0, [pc, #76]	; (8017d30 <mem_free+0x100>)
 8017ce4:	f00d fd62 	bl	80257ac <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8017ce8:	4815      	ldr	r0, [pc, #84]	; (8017d40 <mem_free+0x110>)
 8017cea:	f00c fde6 	bl	80248ba <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8017cee:	f00c fe11 	bl	8024914 <sys_arch_protect>
 8017cf2:	61b8      	str	r0, [r7, #24]
 8017cf4:	69b8      	ldr	r0, [r7, #24]
 8017cf6:	f00c fe1b 	bl	8024930 <sys_arch_unprotect>
    return;
 8017cfa:	e012      	b.n	8017d22 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8017cfc:	69fb      	ldr	r3, [r7, #28]
 8017cfe:	2200      	movs	r2, #0
 8017d00:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8017d02:	4b12      	ldr	r3, [pc, #72]	; (8017d4c <mem_free+0x11c>)
 8017d04:	681b      	ldr	r3, [r3, #0]
 8017d06:	69fa      	ldr	r2, [r7, #28]
 8017d08:	429a      	cmp	r2, r3
 8017d0a:	d202      	bcs.n	8017d12 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8017d0c:	4a0f      	ldr	r2, [pc, #60]	; (8017d4c <mem_free+0x11c>)
 8017d0e:	69fb      	ldr	r3, [r7, #28]
 8017d10:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8017d12:	69f8      	ldr	r0, [r7, #28]
 8017d14:	f7ff fe5c 	bl	80179d0 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8017d18:	4809      	ldr	r0, [pc, #36]	; (8017d40 <mem_free+0x110>)
 8017d1a:	f00c fdce 	bl	80248ba <sys_mutex_unlock>
 8017d1e:	e000      	b.n	8017d22 <mem_free+0xf2>
    return;
 8017d20:	bf00      	nop
}
 8017d22:	3720      	adds	r7, #32
 8017d24:	46bd      	mov	sp, r7
 8017d26:	bd80      	pop	{r7, pc}
 8017d28:	0802b4a4 	.word	0x0802b4a4
 8017d2c:	0802b594 	.word	0x0802b594
 8017d30:	0802b4ec 	.word	0x0802b4ec
 8017d34:	20013798 	.word	0x20013798
 8017d38:	2001379c 	.word	0x2001379c
 8017d3c:	0802b5b8 	.word	0x0802b5b8
 8017d40:	200137a0 	.word	0x200137a0
 8017d44:	0802b5d4 	.word	0x0802b5d4
 8017d48:	0802b5fc 	.word	0x0802b5fc
 8017d4c:	200137a4 	.word	0x200137a4

08017d50 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8017d50:	b580      	push	{r7, lr}
 8017d52:	b088      	sub	sp, #32
 8017d54:	af00      	add	r7, sp, #0
 8017d56:	6078      	str	r0, [r7, #4]
 8017d58:	460b      	mov	r3, r1
 8017d5a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8017d5c:	887b      	ldrh	r3, [r7, #2]
 8017d5e:	3303      	adds	r3, #3
 8017d60:	b29b      	uxth	r3, r3
 8017d62:	f023 0303 	bic.w	r3, r3, #3
 8017d66:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8017d68:	8bfb      	ldrh	r3, [r7, #30]
 8017d6a:	2b0b      	cmp	r3, #11
 8017d6c:	d801      	bhi.n	8017d72 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8017d6e:	230c      	movs	r3, #12
 8017d70:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8017d72:	8bfb      	ldrh	r3, [r7, #30]
 8017d74:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8017d78:	d803      	bhi.n	8017d82 <mem_trim+0x32>
 8017d7a:	8bfa      	ldrh	r2, [r7, #30]
 8017d7c:	887b      	ldrh	r3, [r7, #2]
 8017d7e:	429a      	cmp	r2, r3
 8017d80:	d201      	bcs.n	8017d86 <mem_trim+0x36>
    return NULL;
 8017d82:	2300      	movs	r3, #0
 8017d84:	e0d8      	b.n	8017f38 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8017d86:	4b6e      	ldr	r3, [pc, #440]	; (8017f40 <mem_trim+0x1f0>)
 8017d88:	681b      	ldr	r3, [r3, #0]
 8017d8a:	687a      	ldr	r2, [r7, #4]
 8017d8c:	429a      	cmp	r2, r3
 8017d8e:	d304      	bcc.n	8017d9a <mem_trim+0x4a>
 8017d90:	4b6c      	ldr	r3, [pc, #432]	; (8017f44 <mem_trim+0x1f4>)
 8017d92:	681b      	ldr	r3, [r3, #0]
 8017d94:	687a      	ldr	r2, [r7, #4]
 8017d96:	429a      	cmp	r2, r3
 8017d98:	d306      	bcc.n	8017da8 <mem_trim+0x58>
 8017d9a:	4b6b      	ldr	r3, [pc, #428]	; (8017f48 <mem_trim+0x1f8>)
 8017d9c:	f240 22d1 	movw	r2, #721	; 0x2d1
 8017da0:	496a      	ldr	r1, [pc, #424]	; (8017f4c <mem_trim+0x1fc>)
 8017da2:	486b      	ldr	r0, [pc, #428]	; (8017f50 <mem_trim+0x200>)
 8017da4:	f00d fd02 	bl	80257ac <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8017da8:	4b65      	ldr	r3, [pc, #404]	; (8017f40 <mem_trim+0x1f0>)
 8017daa:	681b      	ldr	r3, [r3, #0]
 8017dac:	687a      	ldr	r2, [r7, #4]
 8017dae:	429a      	cmp	r2, r3
 8017db0:	d304      	bcc.n	8017dbc <mem_trim+0x6c>
 8017db2:	4b64      	ldr	r3, [pc, #400]	; (8017f44 <mem_trim+0x1f4>)
 8017db4:	681b      	ldr	r3, [r3, #0]
 8017db6:	687a      	ldr	r2, [r7, #4]
 8017db8:	429a      	cmp	r2, r3
 8017dba:	d307      	bcc.n	8017dcc <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8017dbc:	f00c fdaa 	bl	8024914 <sys_arch_protect>
 8017dc0:	60b8      	str	r0, [r7, #8]
 8017dc2:	68b8      	ldr	r0, [r7, #8]
 8017dc4:	f00c fdb4 	bl	8024930 <sys_arch_unprotect>
    return rmem;
 8017dc8:	687b      	ldr	r3, [r7, #4]
 8017dca:	e0b5      	b.n	8017f38 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8017dcc:	687b      	ldr	r3, [r7, #4]
 8017dce:	3b08      	subs	r3, #8
 8017dd0:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8017dd2:	69b8      	ldr	r0, [r7, #24]
 8017dd4:	f7ff fdea 	bl	80179ac <mem_to_ptr>
 8017dd8:	4603      	mov	r3, r0
 8017dda:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8017ddc:	69bb      	ldr	r3, [r7, #24]
 8017dde:	881a      	ldrh	r2, [r3, #0]
 8017de0:	8afb      	ldrh	r3, [r7, #22]
 8017de2:	1ad3      	subs	r3, r2, r3
 8017de4:	b29b      	uxth	r3, r3
 8017de6:	3b08      	subs	r3, #8
 8017de8:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8017dea:	8bfa      	ldrh	r2, [r7, #30]
 8017dec:	8abb      	ldrh	r3, [r7, #20]
 8017dee:	429a      	cmp	r2, r3
 8017df0:	d906      	bls.n	8017e00 <mem_trim+0xb0>
 8017df2:	4b55      	ldr	r3, [pc, #340]	; (8017f48 <mem_trim+0x1f8>)
 8017df4:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8017df8:	4956      	ldr	r1, [pc, #344]	; (8017f54 <mem_trim+0x204>)
 8017dfa:	4855      	ldr	r0, [pc, #340]	; (8017f50 <mem_trim+0x200>)
 8017dfc:	f00d fcd6 	bl	80257ac <iprintf>
  if (newsize > size) {
 8017e00:	8bfa      	ldrh	r2, [r7, #30]
 8017e02:	8abb      	ldrh	r3, [r7, #20]
 8017e04:	429a      	cmp	r2, r3
 8017e06:	d901      	bls.n	8017e0c <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8017e08:	2300      	movs	r3, #0
 8017e0a:	e095      	b.n	8017f38 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8017e0c:	8bfa      	ldrh	r2, [r7, #30]
 8017e0e:	8abb      	ldrh	r3, [r7, #20]
 8017e10:	429a      	cmp	r2, r3
 8017e12:	d101      	bne.n	8017e18 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8017e14:	687b      	ldr	r3, [r7, #4]
 8017e16:	e08f      	b.n	8017f38 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8017e18:	484f      	ldr	r0, [pc, #316]	; (8017f58 <mem_trim+0x208>)
 8017e1a:	f00c fd3f 	bl	802489c <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8017e1e:	69bb      	ldr	r3, [r7, #24]
 8017e20:	881b      	ldrh	r3, [r3, #0]
 8017e22:	4618      	mov	r0, r3
 8017e24:	f7ff fdb0 	bl	8017988 <ptr_to_mem>
 8017e28:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8017e2a:	693b      	ldr	r3, [r7, #16]
 8017e2c:	791b      	ldrb	r3, [r3, #4]
 8017e2e:	2b00      	cmp	r3, #0
 8017e30:	d13f      	bne.n	8017eb2 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8017e32:	69bb      	ldr	r3, [r7, #24]
 8017e34:	881b      	ldrh	r3, [r3, #0]
 8017e36:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8017e3a:	d106      	bne.n	8017e4a <mem_trim+0xfa>
 8017e3c:	4b42      	ldr	r3, [pc, #264]	; (8017f48 <mem_trim+0x1f8>)
 8017e3e:	f240 22f5 	movw	r2, #757	; 0x2f5
 8017e42:	4946      	ldr	r1, [pc, #280]	; (8017f5c <mem_trim+0x20c>)
 8017e44:	4842      	ldr	r0, [pc, #264]	; (8017f50 <mem_trim+0x200>)
 8017e46:	f00d fcb1 	bl	80257ac <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8017e4a:	693b      	ldr	r3, [r7, #16]
 8017e4c:	881b      	ldrh	r3, [r3, #0]
 8017e4e:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8017e50:	8afa      	ldrh	r2, [r7, #22]
 8017e52:	8bfb      	ldrh	r3, [r7, #30]
 8017e54:	4413      	add	r3, r2
 8017e56:	b29b      	uxth	r3, r3
 8017e58:	3308      	adds	r3, #8
 8017e5a:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8017e5c:	4b40      	ldr	r3, [pc, #256]	; (8017f60 <mem_trim+0x210>)
 8017e5e:	681b      	ldr	r3, [r3, #0]
 8017e60:	693a      	ldr	r2, [r7, #16]
 8017e62:	429a      	cmp	r2, r3
 8017e64:	d106      	bne.n	8017e74 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 8017e66:	89fb      	ldrh	r3, [r7, #14]
 8017e68:	4618      	mov	r0, r3
 8017e6a:	f7ff fd8d 	bl	8017988 <ptr_to_mem>
 8017e6e:	4603      	mov	r3, r0
 8017e70:	4a3b      	ldr	r2, [pc, #236]	; (8017f60 <mem_trim+0x210>)
 8017e72:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8017e74:	89fb      	ldrh	r3, [r7, #14]
 8017e76:	4618      	mov	r0, r3
 8017e78:	f7ff fd86 	bl	8017988 <ptr_to_mem>
 8017e7c:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8017e7e:	693b      	ldr	r3, [r7, #16]
 8017e80:	2200      	movs	r2, #0
 8017e82:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8017e84:	693b      	ldr	r3, [r7, #16]
 8017e86:	89ba      	ldrh	r2, [r7, #12]
 8017e88:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8017e8a:	693b      	ldr	r3, [r7, #16]
 8017e8c:	8afa      	ldrh	r2, [r7, #22]
 8017e8e:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8017e90:	69bb      	ldr	r3, [r7, #24]
 8017e92:	89fa      	ldrh	r2, [r7, #14]
 8017e94:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8017e96:	693b      	ldr	r3, [r7, #16]
 8017e98:	881b      	ldrh	r3, [r3, #0]
 8017e9a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8017e9e:	d047      	beq.n	8017f30 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8017ea0:	693b      	ldr	r3, [r7, #16]
 8017ea2:	881b      	ldrh	r3, [r3, #0]
 8017ea4:	4618      	mov	r0, r3
 8017ea6:	f7ff fd6f 	bl	8017988 <ptr_to_mem>
 8017eaa:	4602      	mov	r2, r0
 8017eac:	89fb      	ldrh	r3, [r7, #14]
 8017eae:	8053      	strh	r3, [r2, #2]
 8017eb0:	e03e      	b.n	8017f30 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8017eb2:	8bfb      	ldrh	r3, [r7, #30]
 8017eb4:	f103 0214 	add.w	r2, r3, #20
 8017eb8:	8abb      	ldrh	r3, [r7, #20]
 8017eba:	429a      	cmp	r2, r3
 8017ebc:	d838      	bhi.n	8017f30 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8017ebe:	8afa      	ldrh	r2, [r7, #22]
 8017ec0:	8bfb      	ldrh	r3, [r7, #30]
 8017ec2:	4413      	add	r3, r2
 8017ec4:	b29b      	uxth	r3, r3
 8017ec6:	3308      	adds	r3, #8
 8017ec8:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8017eca:	69bb      	ldr	r3, [r7, #24]
 8017ecc:	881b      	ldrh	r3, [r3, #0]
 8017ece:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8017ed2:	d106      	bne.n	8017ee2 <mem_trim+0x192>
 8017ed4:	4b1c      	ldr	r3, [pc, #112]	; (8017f48 <mem_trim+0x1f8>)
 8017ed6:	f240 3216 	movw	r2, #790	; 0x316
 8017eda:	4920      	ldr	r1, [pc, #128]	; (8017f5c <mem_trim+0x20c>)
 8017edc:	481c      	ldr	r0, [pc, #112]	; (8017f50 <mem_trim+0x200>)
 8017ede:	f00d fc65 	bl	80257ac <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8017ee2:	89fb      	ldrh	r3, [r7, #14]
 8017ee4:	4618      	mov	r0, r3
 8017ee6:	f7ff fd4f 	bl	8017988 <ptr_to_mem>
 8017eea:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8017eec:	4b1c      	ldr	r3, [pc, #112]	; (8017f60 <mem_trim+0x210>)
 8017eee:	681b      	ldr	r3, [r3, #0]
 8017ef0:	693a      	ldr	r2, [r7, #16]
 8017ef2:	429a      	cmp	r2, r3
 8017ef4:	d202      	bcs.n	8017efc <mem_trim+0x1ac>
      lfree = mem2;
 8017ef6:	4a1a      	ldr	r2, [pc, #104]	; (8017f60 <mem_trim+0x210>)
 8017ef8:	693b      	ldr	r3, [r7, #16]
 8017efa:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8017efc:	693b      	ldr	r3, [r7, #16]
 8017efe:	2200      	movs	r2, #0
 8017f00:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8017f02:	69bb      	ldr	r3, [r7, #24]
 8017f04:	881a      	ldrh	r2, [r3, #0]
 8017f06:	693b      	ldr	r3, [r7, #16]
 8017f08:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8017f0a:	693b      	ldr	r3, [r7, #16]
 8017f0c:	8afa      	ldrh	r2, [r7, #22]
 8017f0e:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8017f10:	69bb      	ldr	r3, [r7, #24]
 8017f12:	89fa      	ldrh	r2, [r7, #14]
 8017f14:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8017f16:	693b      	ldr	r3, [r7, #16]
 8017f18:	881b      	ldrh	r3, [r3, #0]
 8017f1a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8017f1e:	d007      	beq.n	8017f30 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8017f20:	693b      	ldr	r3, [r7, #16]
 8017f22:	881b      	ldrh	r3, [r3, #0]
 8017f24:	4618      	mov	r0, r3
 8017f26:	f7ff fd2f 	bl	8017988 <ptr_to_mem>
 8017f2a:	4602      	mov	r2, r0
 8017f2c:	89fb      	ldrh	r3, [r7, #14]
 8017f2e:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8017f30:	4809      	ldr	r0, [pc, #36]	; (8017f58 <mem_trim+0x208>)
 8017f32:	f00c fcc2 	bl	80248ba <sys_mutex_unlock>
  return rmem;
 8017f36:	687b      	ldr	r3, [r7, #4]
}
 8017f38:	4618      	mov	r0, r3
 8017f3a:	3720      	adds	r7, #32
 8017f3c:	46bd      	mov	sp, r7
 8017f3e:	bd80      	pop	{r7, pc}
 8017f40:	20013798 	.word	0x20013798
 8017f44:	2001379c 	.word	0x2001379c
 8017f48:	0802b4a4 	.word	0x0802b4a4
 8017f4c:	0802b630 	.word	0x0802b630
 8017f50:	0802b4ec 	.word	0x0802b4ec
 8017f54:	0802b648 	.word	0x0802b648
 8017f58:	200137a0 	.word	0x200137a0
 8017f5c:	0802b668 	.word	0x0802b668
 8017f60:	200137a4 	.word	0x200137a4

08017f64 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8017f64:	b580      	push	{r7, lr}
 8017f66:	b088      	sub	sp, #32
 8017f68:	af00      	add	r7, sp, #0
 8017f6a:	4603      	mov	r3, r0
 8017f6c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8017f6e:	88fb      	ldrh	r3, [r7, #6]
 8017f70:	2b00      	cmp	r3, #0
 8017f72:	d101      	bne.n	8017f78 <mem_malloc+0x14>
    return NULL;
 8017f74:	2300      	movs	r3, #0
 8017f76:	e0e2      	b.n	801813e <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8017f78:	88fb      	ldrh	r3, [r7, #6]
 8017f7a:	3303      	adds	r3, #3
 8017f7c:	b29b      	uxth	r3, r3
 8017f7e:	f023 0303 	bic.w	r3, r3, #3
 8017f82:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8017f84:	8bbb      	ldrh	r3, [r7, #28]
 8017f86:	2b0b      	cmp	r3, #11
 8017f88:	d801      	bhi.n	8017f8e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8017f8a:	230c      	movs	r3, #12
 8017f8c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8017f8e:	8bbb      	ldrh	r3, [r7, #28]
 8017f90:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8017f94:	d803      	bhi.n	8017f9e <mem_malloc+0x3a>
 8017f96:	8bba      	ldrh	r2, [r7, #28]
 8017f98:	88fb      	ldrh	r3, [r7, #6]
 8017f9a:	429a      	cmp	r2, r3
 8017f9c:	d201      	bcs.n	8017fa2 <mem_malloc+0x3e>
    return NULL;
 8017f9e:	2300      	movs	r3, #0
 8017fa0:	e0cd      	b.n	801813e <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8017fa2:	4869      	ldr	r0, [pc, #420]	; (8018148 <mem_malloc+0x1e4>)
 8017fa4:	f00c fc7a 	bl	802489c <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8017fa8:	4b68      	ldr	r3, [pc, #416]	; (801814c <mem_malloc+0x1e8>)
 8017faa:	681b      	ldr	r3, [r3, #0]
 8017fac:	4618      	mov	r0, r3
 8017fae:	f7ff fcfd 	bl	80179ac <mem_to_ptr>
 8017fb2:	4603      	mov	r3, r0
 8017fb4:	83fb      	strh	r3, [r7, #30]
 8017fb6:	e0b7      	b.n	8018128 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8017fb8:	8bfb      	ldrh	r3, [r7, #30]
 8017fba:	4618      	mov	r0, r3
 8017fbc:	f7ff fce4 	bl	8017988 <ptr_to_mem>
 8017fc0:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8017fc2:	697b      	ldr	r3, [r7, #20]
 8017fc4:	791b      	ldrb	r3, [r3, #4]
 8017fc6:	2b00      	cmp	r3, #0
 8017fc8:	f040 80a7 	bne.w	801811a <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8017fcc:	697b      	ldr	r3, [r7, #20]
 8017fce:	881b      	ldrh	r3, [r3, #0]
 8017fd0:	461a      	mov	r2, r3
 8017fd2:	8bfb      	ldrh	r3, [r7, #30]
 8017fd4:	1ad3      	subs	r3, r2, r3
 8017fd6:	f1a3 0208 	sub.w	r2, r3, #8
 8017fda:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8017fdc:	429a      	cmp	r2, r3
 8017fde:	f0c0 809c 	bcc.w	801811a <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8017fe2:	697b      	ldr	r3, [r7, #20]
 8017fe4:	881b      	ldrh	r3, [r3, #0]
 8017fe6:	461a      	mov	r2, r3
 8017fe8:	8bfb      	ldrh	r3, [r7, #30]
 8017fea:	1ad3      	subs	r3, r2, r3
 8017fec:	f1a3 0208 	sub.w	r2, r3, #8
 8017ff0:	8bbb      	ldrh	r3, [r7, #28]
 8017ff2:	3314      	adds	r3, #20
 8017ff4:	429a      	cmp	r2, r3
 8017ff6:	d333      	bcc.n	8018060 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8017ff8:	8bfa      	ldrh	r2, [r7, #30]
 8017ffa:	8bbb      	ldrh	r3, [r7, #28]
 8017ffc:	4413      	add	r3, r2
 8017ffe:	b29b      	uxth	r3, r3
 8018000:	3308      	adds	r3, #8
 8018002:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8018004:	8a7b      	ldrh	r3, [r7, #18]
 8018006:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 801800a:	d106      	bne.n	801801a <mem_malloc+0xb6>
 801800c:	4b50      	ldr	r3, [pc, #320]	; (8018150 <mem_malloc+0x1ec>)
 801800e:	f240 3287 	movw	r2, #903	; 0x387
 8018012:	4950      	ldr	r1, [pc, #320]	; (8018154 <mem_malloc+0x1f0>)
 8018014:	4850      	ldr	r0, [pc, #320]	; (8018158 <mem_malloc+0x1f4>)
 8018016:	f00d fbc9 	bl	80257ac <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 801801a:	8a7b      	ldrh	r3, [r7, #18]
 801801c:	4618      	mov	r0, r3
 801801e:	f7ff fcb3 	bl	8017988 <ptr_to_mem>
 8018022:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8018024:	68fb      	ldr	r3, [r7, #12]
 8018026:	2200      	movs	r2, #0
 8018028:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 801802a:	697b      	ldr	r3, [r7, #20]
 801802c:	881a      	ldrh	r2, [r3, #0]
 801802e:	68fb      	ldr	r3, [r7, #12]
 8018030:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8018032:	68fb      	ldr	r3, [r7, #12]
 8018034:	8bfa      	ldrh	r2, [r7, #30]
 8018036:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8018038:	697b      	ldr	r3, [r7, #20]
 801803a:	8a7a      	ldrh	r2, [r7, #18]
 801803c:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 801803e:	697b      	ldr	r3, [r7, #20]
 8018040:	2201      	movs	r2, #1
 8018042:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8018044:	68fb      	ldr	r3, [r7, #12]
 8018046:	881b      	ldrh	r3, [r3, #0]
 8018048:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 801804c:	d00b      	beq.n	8018066 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 801804e:	68fb      	ldr	r3, [r7, #12]
 8018050:	881b      	ldrh	r3, [r3, #0]
 8018052:	4618      	mov	r0, r3
 8018054:	f7ff fc98 	bl	8017988 <ptr_to_mem>
 8018058:	4602      	mov	r2, r0
 801805a:	8a7b      	ldrh	r3, [r7, #18]
 801805c:	8053      	strh	r3, [r2, #2]
 801805e:	e002      	b.n	8018066 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8018060:	697b      	ldr	r3, [r7, #20]
 8018062:	2201      	movs	r2, #1
 8018064:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8018066:	4b39      	ldr	r3, [pc, #228]	; (801814c <mem_malloc+0x1e8>)
 8018068:	681b      	ldr	r3, [r3, #0]
 801806a:	697a      	ldr	r2, [r7, #20]
 801806c:	429a      	cmp	r2, r3
 801806e:	d127      	bne.n	80180c0 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8018070:	4b36      	ldr	r3, [pc, #216]	; (801814c <mem_malloc+0x1e8>)
 8018072:	681b      	ldr	r3, [r3, #0]
 8018074:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8018076:	e005      	b.n	8018084 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8018078:	69bb      	ldr	r3, [r7, #24]
 801807a:	881b      	ldrh	r3, [r3, #0]
 801807c:	4618      	mov	r0, r3
 801807e:	f7ff fc83 	bl	8017988 <ptr_to_mem>
 8018082:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8018084:	69bb      	ldr	r3, [r7, #24]
 8018086:	791b      	ldrb	r3, [r3, #4]
 8018088:	2b00      	cmp	r3, #0
 801808a:	d004      	beq.n	8018096 <mem_malloc+0x132>
 801808c:	4b33      	ldr	r3, [pc, #204]	; (801815c <mem_malloc+0x1f8>)
 801808e:	681b      	ldr	r3, [r3, #0]
 8018090:	69ba      	ldr	r2, [r7, #24]
 8018092:	429a      	cmp	r2, r3
 8018094:	d1f0      	bne.n	8018078 <mem_malloc+0x114>
          }
          lfree = cur;
 8018096:	4a2d      	ldr	r2, [pc, #180]	; (801814c <mem_malloc+0x1e8>)
 8018098:	69bb      	ldr	r3, [r7, #24]
 801809a:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 801809c:	4b2b      	ldr	r3, [pc, #172]	; (801814c <mem_malloc+0x1e8>)
 801809e:	681a      	ldr	r2, [r3, #0]
 80180a0:	4b2e      	ldr	r3, [pc, #184]	; (801815c <mem_malloc+0x1f8>)
 80180a2:	681b      	ldr	r3, [r3, #0]
 80180a4:	429a      	cmp	r2, r3
 80180a6:	d00b      	beq.n	80180c0 <mem_malloc+0x15c>
 80180a8:	4b28      	ldr	r3, [pc, #160]	; (801814c <mem_malloc+0x1e8>)
 80180aa:	681b      	ldr	r3, [r3, #0]
 80180ac:	791b      	ldrb	r3, [r3, #4]
 80180ae:	2b00      	cmp	r3, #0
 80180b0:	d006      	beq.n	80180c0 <mem_malloc+0x15c>
 80180b2:	4b27      	ldr	r3, [pc, #156]	; (8018150 <mem_malloc+0x1ec>)
 80180b4:	f240 32b5 	movw	r2, #949	; 0x3b5
 80180b8:	4929      	ldr	r1, [pc, #164]	; (8018160 <mem_malloc+0x1fc>)
 80180ba:	4827      	ldr	r0, [pc, #156]	; (8018158 <mem_malloc+0x1f4>)
 80180bc:	f00d fb76 	bl	80257ac <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 80180c0:	4821      	ldr	r0, [pc, #132]	; (8018148 <mem_malloc+0x1e4>)
 80180c2:	f00c fbfa 	bl	80248ba <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80180c6:	8bba      	ldrh	r2, [r7, #28]
 80180c8:	697b      	ldr	r3, [r7, #20]
 80180ca:	4413      	add	r3, r2
 80180cc:	3308      	adds	r3, #8
 80180ce:	4a23      	ldr	r2, [pc, #140]	; (801815c <mem_malloc+0x1f8>)
 80180d0:	6812      	ldr	r2, [r2, #0]
 80180d2:	4293      	cmp	r3, r2
 80180d4:	d906      	bls.n	80180e4 <mem_malloc+0x180>
 80180d6:	4b1e      	ldr	r3, [pc, #120]	; (8018150 <mem_malloc+0x1ec>)
 80180d8:	f240 32b9 	movw	r2, #953	; 0x3b9
 80180dc:	4921      	ldr	r1, [pc, #132]	; (8018164 <mem_malloc+0x200>)
 80180de:	481e      	ldr	r0, [pc, #120]	; (8018158 <mem_malloc+0x1f4>)
 80180e0:	f00d fb64 	bl	80257ac <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80180e4:	697b      	ldr	r3, [r7, #20]
 80180e6:	f003 0303 	and.w	r3, r3, #3
 80180ea:	2b00      	cmp	r3, #0
 80180ec:	d006      	beq.n	80180fc <mem_malloc+0x198>
 80180ee:	4b18      	ldr	r3, [pc, #96]	; (8018150 <mem_malloc+0x1ec>)
 80180f0:	f240 32bb 	movw	r2, #955	; 0x3bb
 80180f4:	491c      	ldr	r1, [pc, #112]	; (8018168 <mem_malloc+0x204>)
 80180f6:	4818      	ldr	r0, [pc, #96]	; (8018158 <mem_malloc+0x1f4>)
 80180f8:	f00d fb58 	bl	80257ac <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80180fc:	697b      	ldr	r3, [r7, #20]
 80180fe:	f003 0303 	and.w	r3, r3, #3
 8018102:	2b00      	cmp	r3, #0
 8018104:	d006      	beq.n	8018114 <mem_malloc+0x1b0>
 8018106:	4b12      	ldr	r3, [pc, #72]	; (8018150 <mem_malloc+0x1ec>)
 8018108:	f240 32bd 	movw	r2, #957	; 0x3bd
 801810c:	4917      	ldr	r1, [pc, #92]	; (801816c <mem_malloc+0x208>)
 801810e:	4812      	ldr	r0, [pc, #72]	; (8018158 <mem_malloc+0x1f4>)
 8018110:	f00d fb4c 	bl	80257ac <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8018114:	697b      	ldr	r3, [r7, #20]
 8018116:	3308      	adds	r3, #8
 8018118:	e011      	b.n	801813e <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 801811a:	8bfb      	ldrh	r3, [r7, #30]
 801811c:	4618      	mov	r0, r3
 801811e:	f7ff fc33 	bl	8017988 <ptr_to_mem>
 8018122:	4603      	mov	r3, r0
 8018124:	881b      	ldrh	r3, [r3, #0]
 8018126:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8018128:	8bfa      	ldrh	r2, [r7, #30]
 801812a:	8bbb      	ldrh	r3, [r7, #28]
 801812c:	f5c3 53a0 	rsb	r3, r3, #5120	; 0x1400
 8018130:	429a      	cmp	r2, r3
 8018132:	f4ff af41 	bcc.w	8017fb8 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8018136:	4804      	ldr	r0, [pc, #16]	; (8018148 <mem_malloc+0x1e4>)
 8018138:	f00c fbbf 	bl	80248ba <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 801813c:	2300      	movs	r3, #0
}
 801813e:	4618      	mov	r0, r3
 8018140:	3720      	adds	r7, #32
 8018142:	46bd      	mov	sp, r7
 8018144:	bd80      	pop	{r7, pc}
 8018146:	bf00      	nop
 8018148:	200137a0 	.word	0x200137a0
 801814c:	200137a4 	.word	0x200137a4
 8018150:	0802b4a4 	.word	0x0802b4a4
 8018154:	0802b668 	.word	0x0802b668
 8018158:	0802b4ec 	.word	0x0802b4ec
 801815c:	2001379c 	.word	0x2001379c
 8018160:	0802b67c 	.word	0x0802b67c
 8018164:	0802b698 	.word	0x0802b698
 8018168:	0802b6c8 	.word	0x0802b6c8
 801816c:	0802b6f8 	.word	0x0802b6f8

08018170 <mem_calloc>:
 * @param size size of the objects to allocate
 * @return pointer to allocated memory / NULL pointer if there is an error
 */
void *
mem_calloc(mem_size_t count, mem_size_t size)
{
 8018170:	b580      	push	{r7, lr}
 8018172:	b084      	sub	sp, #16
 8018174:	af00      	add	r7, sp, #0
 8018176:	4603      	mov	r3, r0
 8018178:	460a      	mov	r2, r1
 801817a:	80fb      	strh	r3, [r7, #6]
 801817c:	4613      	mov	r3, r2
 801817e:	80bb      	strh	r3, [r7, #4]
  void *p;
  size_t alloc_size = (size_t)count * (size_t)size;
 8018180:	88fb      	ldrh	r3, [r7, #6]
 8018182:	88ba      	ldrh	r2, [r7, #4]
 8018184:	fb02 f303 	mul.w	r3, r2, r3
 8018188:	60fb      	str	r3, [r7, #12]

  if ((size_t)(mem_size_t)alloc_size != alloc_size) {
 801818a:	68fb      	ldr	r3, [r7, #12]
 801818c:	b29b      	uxth	r3, r3
 801818e:	461a      	mov	r2, r3
 8018190:	68fb      	ldr	r3, [r7, #12]
 8018192:	4293      	cmp	r3, r2
 8018194:	d001      	beq.n	801819a <mem_calloc+0x2a>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_calloc: could not allocate %"SZT_F" bytes\n", alloc_size));
    return NULL;
 8018196:	2300      	movs	r3, #0
 8018198:	e00e      	b.n	80181b8 <mem_calloc+0x48>
  }

  /* allocate 'count' objects of size 'size' */
  p = mem_malloc((mem_size_t)alloc_size);
 801819a:	68fb      	ldr	r3, [r7, #12]
 801819c:	b29b      	uxth	r3, r3
 801819e:	4618      	mov	r0, r3
 80181a0:	f7ff fee0 	bl	8017f64 <mem_malloc>
 80181a4:	60b8      	str	r0, [r7, #8]
  if (p) {
 80181a6:	68bb      	ldr	r3, [r7, #8]
 80181a8:	2b00      	cmp	r3, #0
 80181aa:	d004      	beq.n	80181b6 <mem_calloc+0x46>
    /* zero the memory */
    memset(p, 0, alloc_size);
 80181ac:	68fa      	ldr	r2, [r7, #12]
 80181ae:	2100      	movs	r1, #0
 80181b0:	68b8      	ldr	r0, [r7, #8]
 80181b2:	f00c fc4f 	bl	8024a54 <memset>
  }
  return p;
 80181b6:	68bb      	ldr	r3, [r7, #8]
}
 80181b8:	4618      	mov	r0, r3
 80181ba:	3710      	adds	r7, #16
 80181bc:	46bd      	mov	sp, r7
 80181be:	bd80      	pop	{r7, pc}

080181c0 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80181c0:	b480      	push	{r7}
 80181c2:	b085      	sub	sp, #20
 80181c4:	af00      	add	r7, sp, #0
 80181c6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80181c8:	687b      	ldr	r3, [r7, #4]
 80181ca:	689b      	ldr	r3, [r3, #8]
 80181cc:	2200      	movs	r2, #0
 80181ce:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80181d0:	687b      	ldr	r3, [r7, #4]
 80181d2:	685b      	ldr	r3, [r3, #4]
 80181d4:	3303      	adds	r3, #3
 80181d6:	f023 0303 	bic.w	r3, r3, #3
 80181da:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80181dc:	2300      	movs	r3, #0
 80181de:	60fb      	str	r3, [r7, #12]
 80181e0:	e011      	b.n	8018206 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80181e2:	687b      	ldr	r3, [r7, #4]
 80181e4:	689b      	ldr	r3, [r3, #8]
 80181e6:	681a      	ldr	r2, [r3, #0]
 80181e8:	68bb      	ldr	r3, [r7, #8]
 80181ea:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80181ec:	687b      	ldr	r3, [r7, #4]
 80181ee:	689b      	ldr	r3, [r3, #8]
 80181f0:	68ba      	ldr	r2, [r7, #8]
 80181f2:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80181f4:	687b      	ldr	r3, [r7, #4]
 80181f6:	881b      	ldrh	r3, [r3, #0]
 80181f8:	461a      	mov	r2, r3
 80181fa:	68bb      	ldr	r3, [r7, #8]
 80181fc:	4413      	add	r3, r2
 80181fe:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8018200:	68fb      	ldr	r3, [r7, #12]
 8018202:	3301      	adds	r3, #1
 8018204:	60fb      	str	r3, [r7, #12]
 8018206:	687b      	ldr	r3, [r7, #4]
 8018208:	885b      	ldrh	r3, [r3, #2]
 801820a:	461a      	mov	r2, r3
 801820c:	68fb      	ldr	r3, [r7, #12]
 801820e:	4293      	cmp	r3, r2
 8018210:	dbe7      	blt.n	80181e2 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8018212:	bf00      	nop
 8018214:	bf00      	nop
 8018216:	3714      	adds	r7, #20
 8018218:	46bd      	mov	sp, r7
 801821a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801821e:	4770      	bx	lr

08018220 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8018220:	b580      	push	{r7, lr}
 8018222:	b082      	sub	sp, #8
 8018224:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8018226:	2300      	movs	r3, #0
 8018228:	80fb      	strh	r3, [r7, #6]
 801822a:	e009      	b.n	8018240 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 801822c:	88fb      	ldrh	r3, [r7, #6]
 801822e:	4a08      	ldr	r2, [pc, #32]	; (8018250 <memp_init+0x30>)
 8018230:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018234:	4618      	mov	r0, r3
 8018236:	f7ff ffc3 	bl	80181c0 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801823a:	88fb      	ldrh	r3, [r7, #6]
 801823c:	3301      	adds	r3, #1
 801823e:	80fb      	strh	r3, [r7, #6]
 8018240:	88fb      	ldrh	r3, [r7, #6]
 8018242:	2b0c      	cmp	r3, #12
 8018244:	d9f2      	bls.n	801822c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8018246:	bf00      	nop
 8018248:	bf00      	nop
 801824a:	3708      	adds	r7, #8
 801824c:	46bd      	mov	sp, r7
 801824e:	bd80      	pop	{r7, pc}
 8018250:	0802e3e4 	.word	0x0802e3e4

08018254 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8018254:	b580      	push	{r7, lr}
 8018256:	b084      	sub	sp, #16
 8018258:	af00      	add	r7, sp, #0
 801825a:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 801825c:	f00c fb5a 	bl	8024914 <sys_arch_protect>
 8018260:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8018262:	687b      	ldr	r3, [r7, #4]
 8018264:	689b      	ldr	r3, [r3, #8]
 8018266:	681b      	ldr	r3, [r3, #0]
 8018268:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 801826a:	68bb      	ldr	r3, [r7, #8]
 801826c:	2b00      	cmp	r3, #0
 801826e:	d015      	beq.n	801829c <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8018270:	687b      	ldr	r3, [r7, #4]
 8018272:	689b      	ldr	r3, [r3, #8]
 8018274:	68ba      	ldr	r2, [r7, #8]
 8018276:	6812      	ldr	r2, [r2, #0]
 8018278:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 801827a:	68bb      	ldr	r3, [r7, #8]
 801827c:	f003 0303 	and.w	r3, r3, #3
 8018280:	2b00      	cmp	r3, #0
 8018282:	d006      	beq.n	8018292 <do_memp_malloc_pool+0x3e>
 8018284:	4b09      	ldr	r3, [pc, #36]	; (80182ac <do_memp_malloc_pool+0x58>)
 8018286:	f44f 728c 	mov.w	r2, #280	; 0x118
 801828a:	4909      	ldr	r1, [pc, #36]	; (80182b0 <do_memp_malloc_pool+0x5c>)
 801828c:	4809      	ldr	r0, [pc, #36]	; (80182b4 <do_memp_malloc_pool+0x60>)
 801828e:	f00d fa8d 	bl	80257ac <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8018292:	68f8      	ldr	r0, [r7, #12]
 8018294:	f00c fb4c 	bl	8024930 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8018298:	68bb      	ldr	r3, [r7, #8]
 801829a:	e003      	b.n	80182a4 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 801829c:	68f8      	ldr	r0, [r7, #12]
 801829e:	f00c fb47 	bl	8024930 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80182a2:	2300      	movs	r3, #0
}
 80182a4:	4618      	mov	r0, r3
 80182a6:	3710      	adds	r7, #16
 80182a8:	46bd      	mov	sp, r7
 80182aa:	bd80      	pop	{r7, pc}
 80182ac:	0802b71c 	.word	0x0802b71c
 80182b0:	0802b74c 	.word	0x0802b74c
 80182b4:	0802b770 	.word	0x0802b770

080182b8 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80182b8:	b580      	push	{r7, lr}
 80182ba:	b084      	sub	sp, #16
 80182bc:	af00      	add	r7, sp, #0
 80182be:	4603      	mov	r3, r0
 80182c0:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80182c2:	79fb      	ldrb	r3, [r7, #7]
 80182c4:	2b0c      	cmp	r3, #12
 80182c6:	d908      	bls.n	80182da <memp_malloc+0x22>
 80182c8:	4b0a      	ldr	r3, [pc, #40]	; (80182f4 <memp_malloc+0x3c>)
 80182ca:	f240 1257 	movw	r2, #343	; 0x157
 80182ce:	490a      	ldr	r1, [pc, #40]	; (80182f8 <memp_malloc+0x40>)
 80182d0:	480a      	ldr	r0, [pc, #40]	; (80182fc <memp_malloc+0x44>)
 80182d2:	f00d fa6b 	bl	80257ac <iprintf>
 80182d6:	2300      	movs	r3, #0
 80182d8:	e008      	b.n	80182ec <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80182da:	79fb      	ldrb	r3, [r7, #7]
 80182dc:	4a08      	ldr	r2, [pc, #32]	; (8018300 <memp_malloc+0x48>)
 80182de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80182e2:	4618      	mov	r0, r3
 80182e4:	f7ff ffb6 	bl	8018254 <do_memp_malloc_pool>
 80182e8:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80182ea:	68fb      	ldr	r3, [r7, #12]
}
 80182ec:	4618      	mov	r0, r3
 80182ee:	3710      	adds	r7, #16
 80182f0:	46bd      	mov	sp, r7
 80182f2:	bd80      	pop	{r7, pc}
 80182f4:	0802b71c 	.word	0x0802b71c
 80182f8:	0802b7ac 	.word	0x0802b7ac
 80182fc:	0802b770 	.word	0x0802b770
 8018300:	0802e3e4 	.word	0x0802e3e4

08018304 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8018304:	b580      	push	{r7, lr}
 8018306:	b084      	sub	sp, #16
 8018308:	af00      	add	r7, sp, #0
 801830a:	6078      	str	r0, [r7, #4]
 801830c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 801830e:	683b      	ldr	r3, [r7, #0]
 8018310:	f003 0303 	and.w	r3, r3, #3
 8018314:	2b00      	cmp	r3, #0
 8018316:	d006      	beq.n	8018326 <do_memp_free_pool+0x22>
 8018318:	4b0d      	ldr	r3, [pc, #52]	; (8018350 <do_memp_free_pool+0x4c>)
 801831a:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 801831e:	490d      	ldr	r1, [pc, #52]	; (8018354 <do_memp_free_pool+0x50>)
 8018320:	480d      	ldr	r0, [pc, #52]	; (8018358 <do_memp_free_pool+0x54>)
 8018322:	f00d fa43 	bl	80257ac <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8018326:	683b      	ldr	r3, [r7, #0]
 8018328:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 801832a:	f00c faf3 	bl	8024914 <sys_arch_protect>
 801832e:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8018330:	687b      	ldr	r3, [r7, #4]
 8018332:	689b      	ldr	r3, [r3, #8]
 8018334:	681a      	ldr	r2, [r3, #0]
 8018336:	68fb      	ldr	r3, [r7, #12]
 8018338:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 801833a:	687b      	ldr	r3, [r7, #4]
 801833c:	689b      	ldr	r3, [r3, #8]
 801833e:	68fa      	ldr	r2, [r7, #12]
 8018340:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8018342:	68b8      	ldr	r0, [r7, #8]
 8018344:	f00c faf4 	bl	8024930 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8018348:	bf00      	nop
 801834a:	3710      	adds	r7, #16
 801834c:	46bd      	mov	sp, r7
 801834e:	bd80      	pop	{r7, pc}
 8018350:	0802b71c 	.word	0x0802b71c
 8018354:	0802b7cc 	.word	0x0802b7cc
 8018358:	0802b770 	.word	0x0802b770

0801835c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 801835c:	b580      	push	{r7, lr}
 801835e:	b082      	sub	sp, #8
 8018360:	af00      	add	r7, sp, #0
 8018362:	4603      	mov	r3, r0
 8018364:	6039      	str	r1, [r7, #0]
 8018366:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8018368:	79fb      	ldrb	r3, [r7, #7]
 801836a:	2b0c      	cmp	r3, #12
 801836c:	d907      	bls.n	801837e <memp_free+0x22>
 801836e:	4b0c      	ldr	r3, [pc, #48]	; (80183a0 <memp_free+0x44>)
 8018370:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8018374:	490b      	ldr	r1, [pc, #44]	; (80183a4 <memp_free+0x48>)
 8018376:	480c      	ldr	r0, [pc, #48]	; (80183a8 <memp_free+0x4c>)
 8018378:	f00d fa18 	bl	80257ac <iprintf>
 801837c:	e00c      	b.n	8018398 <memp_free+0x3c>

  if (mem == NULL) {
 801837e:	683b      	ldr	r3, [r7, #0]
 8018380:	2b00      	cmp	r3, #0
 8018382:	d008      	beq.n	8018396 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8018384:	79fb      	ldrb	r3, [r7, #7]
 8018386:	4a09      	ldr	r2, [pc, #36]	; (80183ac <memp_free+0x50>)
 8018388:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801838c:	6839      	ldr	r1, [r7, #0]
 801838e:	4618      	mov	r0, r3
 8018390:	f7ff ffb8 	bl	8018304 <do_memp_free_pool>
 8018394:	e000      	b.n	8018398 <memp_free+0x3c>
    return;
 8018396:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8018398:	3708      	adds	r7, #8
 801839a:	46bd      	mov	sp, r7
 801839c:	bd80      	pop	{r7, pc}
 801839e:	bf00      	nop
 80183a0:	0802b71c 	.word	0x0802b71c
 80183a4:	0802b7ec 	.word	0x0802b7ec
 80183a8:	0802b770 	.word	0x0802b770
 80183ac:	0802e3e4 	.word	0x0802e3e4

080183b0 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80183b0:	b480      	push	{r7}
 80183b2:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80183b4:	bf00      	nop
 80183b6:	46bd      	mov	sp, r7
 80183b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183bc:	4770      	bx	lr
	...

080183c0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80183c0:	b580      	push	{r7, lr}
 80183c2:	b086      	sub	sp, #24
 80183c4:	af00      	add	r7, sp, #0
 80183c6:	60f8      	str	r0, [r7, #12]
 80183c8:	60b9      	str	r1, [r7, #8]
 80183ca:	607a      	str	r2, [r7, #4]
 80183cc:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80183ce:	68fb      	ldr	r3, [r7, #12]
 80183d0:	2b00      	cmp	r3, #0
 80183d2:	d108      	bne.n	80183e6 <netif_add+0x26>
 80183d4:	4b5b      	ldr	r3, [pc, #364]	; (8018544 <netif_add+0x184>)
 80183d6:	f240 1227 	movw	r2, #295	; 0x127
 80183da:	495b      	ldr	r1, [pc, #364]	; (8018548 <netif_add+0x188>)
 80183dc:	485b      	ldr	r0, [pc, #364]	; (801854c <netif_add+0x18c>)
 80183de:	f00d f9e5 	bl	80257ac <iprintf>
 80183e2:	2300      	movs	r3, #0
 80183e4:	e0a9      	b.n	801853a <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80183e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80183e8:	2b00      	cmp	r3, #0
 80183ea:	d108      	bne.n	80183fe <netif_add+0x3e>
 80183ec:	4b55      	ldr	r3, [pc, #340]	; (8018544 <netif_add+0x184>)
 80183ee:	f44f 7294 	mov.w	r2, #296	; 0x128
 80183f2:	4957      	ldr	r1, [pc, #348]	; (8018550 <netif_add+0x190>)
 80183f4:	4855      	ldr	r0, [pc, #340]	; (801854c <netif_add+0x18c>)
 80183f6:	f00d f9d9 	bl	80257ac <iprintf>
 80183fa:	2300      	movs	r3, #0
 80183fc:	e09d      	b.n	801853a <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80183fe:	68bb      	ldr	r3, [r7, #8]
 8018400:	2b00      	cmp	r3, #0
 8018402:	d101      	bne.n	8018408 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8018404:	4b53      	ldr	r3, [pc, #332]	; (8018554 <netif_add+0x194>)
 8018406:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8018408:	687b      	ldr	r3, [r7, #4]
 801840a:	2b00      	cmp	r3, #0
 801840c:	d101      	bne.n	8018412 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 801840e:	4b51      	ldr	r3, [pc, #324]	; (8018554 <netif_add+0x194>)
 8018410:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8018412:	683b      	ldr	r3, [r7, #0]
 8018414:	2b00      	cmp	r3, #0
 8018416:	d101      	bne.n	801841c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8018418:	4b4e      	ldr	r3, [pc, #312]	; (8018554 <netif_add+0x194>)
 801841a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 801841c:	68fb      	ldr	r3, [r7, #12]
 801841e:	2200      	movs	r2, #0
 8018420:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8018422:	68fb      	ldr	r3, [r7, #12]
 8018424:	2200      	movs	r2, #0
 8018426:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8018428:	68fb      	ldr	r3, [r7, #12]
 801842a:	2200      	movs	r2, #0
 801842c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 801842e:	68fb      	ldr	r3, [r7, #12]
 8018430:	4a49      	ldr	r2, [pc, #292]	; (8018558 <netif_add+0x198>)
 8018432:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8018434:	68fb      	ldr	r3, [r7, #12]
 8018436:	2200      	movs	r2, #0
 8018438:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 801843a:	68fb      	ldr	r3, [r7, #12]
 801843c:	2200      	movs	r2, #0
 801843e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 8018442:	68fb      	ldr	r3, [r7, #12]
 8018444:	3324      	adds	r3, #36	; 0x24
 8018446:	2204      	movs	r2, #4
 8018448:	2100      	movs	r1, #0
 801844a:	4618      	mov	r0, r3
 801844c:	f00c fb02 	bl	8024a54 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8018450:	68fb      	ldr	r3, [r7, #12]
 8018452:	2200      	movs	r2, #0
 8018454:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8018456:	68fb      	ldr	r3, [r7, #12]
 8018458:	6a3a      	ldr	r2, [r7, #32]
 801845a:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 801845c:	4b3f      	ldr	r3, [pc, #252]	; (801855c <netif_add+0x19c>)
 801845e:	781a      	ldrb	r2, [r3, #0]
 8018460:	68fb      	ldr	r3, [r7, #12]
 8018462:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 8018466:	68fb      	ldr	r3, [r7, #12]
 8018468:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801846a:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 801846c:	683b      	ldr	r3, [r7, #0]
 801846e:	687a      	ldr	r2, [r7, #4]
 8018470:	68b9      	ldr	r1, [r7, #8]
 8018472:	68f8      	ldr	r0, [r7, #12]
 8018474:	f000 f914 	bl	80186a0 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8018478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801847a:	68f8      	ldr	r0, [r7, #12]
 801847c:	4798      	blx	r3
 801847e:	4603      	mov	r3, r0
 8018480:	2b00      	cmp	r3, #0
 8018482:	d001      	beq.n	8018488 <netif_add+0xc8>
    return NULL;
 8018484:	2300      	movs	r3, #0
 8018486:	e058      	b.n	801853a <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8018488:	68fb      	ldr	r3, [r7, #12]
 801848a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801848e:	2bff      	cmp	r3, #255	; 0xff
 8018490:	d103      	bne.n	801849a <netif_add+0xda>
        netif->num = 0;
 8018492:	68fb      	ldr	r3, [r7, #12]
 8018494:	2200      	movs	r2, #0
 8018496:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 801849a:	2300      	movs	r3, #0
 801849c:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801849e:	4b30      	ldr	r3, [pc, #192]	; (8018560 <netif_add+0x1a0>)
 80184a0:	681b      	ldr	r3, [r3, #0]
 80184a2:	617b      	str	r3, [r7, #20]
 80184a4:	e02b      	b.n	80184fe <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80184a6:	697a      	ldr	r2, [r7, #20]
 80184a8:	68fb      	ldr	r3, [r7, #12]
 80184aa:	429a      	cmp	r2, r3
 80184ac:	d106      	bne.n	80184bc <netif_add+0xfc>
 80184ae:	4b25      	ldr	r3, [pc, #148]	; (8018544 <netif_add+0x184>)
 80184b0:	f240 128b 	movw	r2, #395	; 0x18b
 80184b4:	492b      	ldr	r1, [pc, #172]	; (8018564 <netif_add+0x1a4>)
 80184b6:	4825      	ldr	r0, [pc, #148]	; (801854c <netif_add+0x18c>)
 80184b8:	f00d f978 	bl	80257ac <iprintf>
        num_netifs++;
 80184bc:	693b      	ldr	r3, [r7, #16]
 80184be:	3301      	adds	r3, #1
 80184c0:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80184c2:	693b      	ldr	r3, [r7, #16]
 80184c4:	2bff      	cmp	r3, #255	; 0xff
 80184c6:	dd06      	ble.n	80184d6 <netif_add+0x116>
 80184c8:	4b1e      	ldr	r3, [pc, #120]	; (8018544 <netif_add+0x184>)
 80184ca:	f240 128d 	movw	r2, #397	; 0x18d
 80184ce:	4926      	ldr	r1, [pc, #152]	; (8018568 <netif_add+0x1a8>)
 80184d0:	481e      	ldr	r0, [pc, #120]	; (801854c <netif_add+0x18c>)
 80184d2:	f00d f96b 	bl	80257ac <iprintf>
        if (netif2->num == netif->num) {
 80184d6:	697b      	ldr	r3, [r7, #20]
 80184d8:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80184dc:	68fb      	ldr	r3, [r7, #12]
 80184de:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80184e2:	429a      	cmp	r2, r3
 80184e4:	d108      	bne.n	80184f8 <netif_add+0x138>
          netif->num++;
 80184e6:	68fb      	ldr	r3, [r7, #12]
 80184e8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80184ec:	3301      	adds	r3, #1
 80184ee:	b2da      	uxtb	r2, r3
 80184f0:	68fb      	ldr	r3, [r7, #12]
 80184f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 80184f6:	e005      	b.n	8018504 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80184f8:	697b      	ldr	r3, [r7, #20]
 80184fa:	681b      	ldr	r3, [r3, #0]
 80184fc:	617b      	str	r3, [r7, #20]
 80184fe:	697b      	ldr	r3, [r7, #20]
 8018500:	2b00      	cmp	r3, #0
 8018502:	d1d0      	bne.n	80184a6 <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 8018504:	697b      	ldr	r3, [r7, #20]
 8018506:	2b00      	cmp	r3, #0
 8018508:	d1be      	bne.n	8018488 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 801850a:	68fb      	ldr	r3, [r7, #12]
 801850c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8018510:	2bfe      	cmp	r3, #254	; 0xfe
 8018512:	d103      	bne.n	801851c <netif_add+0x15c>
    netif_num = 0;
 8018514:	4b11      	ldr	r3, [pc, #68]	; (801855c <netif_add+0x19c>)
 8018516:	2200      	movs	r2, #0
 8018518:	701a      	strb	r2, [r3, #0]
 801851a:	e006      	b.n	801852a <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 801851c:	68fb      	ldr	r3, [r7, #12]
 801851e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8018522:	3301      	adds	r3, #1
 8018524:	b2da      	uxtb	r2, r3
 8018526:	4b0d      	ldr	r3, [pc, #52]	; (801855c <netif_add+0x19c>)
 8018528:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 801852a:	4b0d      	ldr	r3, [pc, #52]	; (8018560 <netif_add+0x1a0>)
 801852c:	681a      	ldr	r2, [r3, #0]
 801852e:	68fb      	ldr	r3, [r7, #12]
 8018530:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8018532:	4a0b      	ldr	r2, [pc, #44]	; (8018560 <netif_add+0x1a0>)
 8018534:	68fb      	ldr	r3, [r7, #12]
 8018536:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8018538:	68fb      	ldr	r3, [r7, #12]
}
 801853a:	4618      	mov	r0, r3
 801853c:	3718      	adds	r7, #24
 801853e:	46bd      	mov	sp, r7
 8018540:	bd80      	pop	{r7, pc}
 8018542:	bf00      	nop
 8018544:	0802b808 	.word	0x0802b808
 8018548:	0802b89c 	.word	0x0802b89c
 801854c:	0802b858 	.word	0x0802b858
 8018550:	0802b8b8 	.word	0x0802b8b8
 8018554:	0802e468 	.word	0x0802e468
 8018558:	08018983 	.word	0x08018983
 801855c:	200137dc 	.word	0x200137dc
 8018560:	2001bcfc 	.word	0x2001bcfc
 8018564:	0802b8dc 	.word	0x0802b8dc
 8018568:	0802b8f0 	.word	0x0802b8f0

0801856c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801856c:	b580      	push	{r7, lr}
 801856e:	b082      	sub	sp, #8
 8018570:	af00      	add	r7, sp, #0
 8018572:	6078      	str	r0, [r7, #4]
 8018574:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8018576:	6839      	ldr	r1, [r7, #0]
 8018578:	6878      	ldr	r0, [r7, #4]
 801857a:	f002 fea1 	bl	801b2c0 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 801857e:	6839      	ldr	r1, [r7, #0]
 8018580:	6878      	ldr	r0, [r7, #4]
 8018582:	f007 ff49 	bl	8020418 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8018586:	bf00      	nop
 8018588:	3708      	adds	r7, #8
 801858a:	46bd      	mov	sp, r7
 801858c:	bd80      	pop	{r7, pc}
	...

08018590 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8018590:	b580      	push	{r7, lr}
 8018592:	b086      	sub	sp, #24
 8018594:	af00      	add	r7, sp, #0
 8018596:	60f8      	str	r0, [r7, #12]
 8018598:	60b9      	str	r1, [r7, #8]
 801859a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 801859c:	68bb      	ldr	r3, [r7, #8]
 801859e:	2b00      	cmp	r3, #0
 80185a0:	d106      	bne.n	80185b0 <netif_do_set_ipaddr+0x20>
 80185a2:	4b1d      	ldr	r3, [pc, #116]	; (8018618 <netif_do_set_ipaddr+0x88>)
 80185a4:	f240 12cb 	movw	r2, #459	; 0x1cb
 80185a8:	491c      	ldr	r1, [pc, #112]	; (801861c <netif_do_set_ipaddr+0x8c>)
 80185aa:	481d      	ldr	r0, [pc, #116]	; (8018620 <netif_do_set_ipaddr+0x90>)
 80185ac:	f00d f8fe 	bl	80257ac <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80185b0:	687b      	ldr	r3, [r7, #4]
 80185b2:	2b00      	cmp	r3, #0
 80185b4:	d106      	bne.n	80185c4 <netif_do_set_ipaddr+0x34>
 80185b6:	4b18      	ldr	r3, [pc, #96]	; (8018618 <netif_do_set_ipaddr+0x88>)
 80185b8:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80185bc:	4917      	ldr	r1, [pc, #92]	; (801861c <netif_do_set_ipaddr+0x8c>)
 80185be:	4818      	ldr	r0, [pc, #96]	; (8018620 <netif_do_set_ipaddr+0x90>)
 80185c0:	f00d f8f4 	bl	80257ac <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80185c4:	68bb      	ldr	r3, [r7, #8]
 80185c6:	681a      	ldr	r2, [r3, #0]
 80185c8:	68fb      	ldr	r3, [r7, #12]
 80185ca:	3304      	adds	r3, #4
 80185cc:	681b      	ldr	r3, [r3, #0]
 80185ce:	429a      	cmp	r2, r3
 80185d0:	d01c      	beq.n	801860c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80185d2:	68bb      	ldr	r3, [r7, #8]
 80185d4:	681b      	ldr	r3, [r3, #0]
 80185d6:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80185d8:	68fb      	ldr	r3, [r7, #12]
 80185da:	3304      	adds	r3, #4
 80185dc:	681a      	ldr	r2, [r3, #0]
 80185de:	687b      	ldr	r3, [r7, #4]
 80185e0:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80185e2:	f107 0314 	add.w	r3, r7, #20
 80185e6:	4619      	mov	r1, r3
 80185e8:	6878      	ldr	r0, [r7, #4]
 80185ea:	f7ff ffbf 	bl	801856c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80185ee:	68bb      	ldr	r3, [r7, #8]
 80185f0:	2b00      	cmp	r3, #0
 80185f2:	d002      	beq.n	80185fa <netif_do_set_ipaddr+0x6a>
 80185f4:	68bb      	ldr	r3, [r7, #8]
 80185f6:	681b      	ldr	r3, [r3, #0]
 80185f8:	e000      	b.n	80185fc <netif_do_set_ipaddr+0x6c>
 80185fa:	2300      	movs	r3, #0
 80185fc:	68fa      	ldr	r2, [r7, #12]
 80185fe:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8018600:	2101      	movs	r1, #1
 8018602:	68f8      	ldr	r0, [r7, #12]
 8018604:	f000 f8d2 	bl	80187ac <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8018608:	2301      	movs	r3, #1
 801860a:	e000      	b.n	801860e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 801860c:	2300      	movs	r3, #0
}
 801860e:	4618      	mov	r0, r3
 8018610:	3718      	adds	r7, #24
 8018612:	46bd      	mov	sp, r7
 8018614:	bd80      	pop	{r7, pc}
 8018616:	bf00      	nop
 8018618:	0802b808 	.word	0x0802b808
 801861c:	0802b920 	.word	0x0802b920
 8018620:	0802b858 	.word	0x0802b858

08018624 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8018624:	b480      	push	{r7}
 8018626:	b085      	sub	sp, #20
 8018628:	af00      	add	r7, sp, #0
 801862a:	60f8      	str	r0, [r7, #12]
 801862c:	60b9      	str	r1, [r7, #8]
 801862e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8018630:	68bb      	ldr	r3, [r7, #8]
 8018632:	681a      	ldr	r2, [r3, #0]
 8018634:	68fb      	ldr	r3, [r7, #12]
 8018636:	3308      	adds	r3, #8
 8018638:	681b      	ldr	r3, [r3, #0]
 801863a:	429a      	cmp	r2, r3
 801863c:	d00a      	beq.n	8018654 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 801863e:	68bb      	ldr	r3, [r7, #8]
 8018640:	2b00      	cmp	r3, #0
 8018642:	d002      	beq.n	801864a <netif_do_set_netmask+0x26>
 8018644:	68bb      	ldr	r3, [r7, #8]
 8018646:	681b      	ldr	r3, [r3, #0]
 8018648:	e000      	b.n	801864c <netif_do_set_netmask+0x28>
 801864a:	2300      	movs	r3, #0
 801864c:	68fa      	ldr	r2, [r7, #12]
 801864e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8018650:	2301      	movs	r3, #1
 8018652:	e000      	b.n	8018656 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8018654:	2300      	movs	r3, #0
}
 8018656:	4618      	mov	r0, r3
 8018658:	3714      	adds	r7, #20
 801865a:	46bd      	mov	sp, r7
 801865c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018660:	4770      	bx	lr

08018662 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8018662:	b480      	push	{r7}
 8018664:	b085      	sub	sp, #20
 8018666:	af00      	add	r7, sp, #0
 8018668:	60f8      	str	r0, [r7, #12]
 801866a:	60b9      	str	r1, [r7, #8]
 801866c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 801866e:	68bb      	ldr	r3, [r7, #8]
 8018670:	681a      	ldr	r2, [r3, #0]
 8018672:	68fb      	ldr	r3, [r7, #12]
 8018674:	330c      	adds	r3, #12
 8018676:	681b      	ldr	r3, [r3, #0]
 8018678:	429a      	cmp	r2, r3
 801867a:	d00a      	beq.n	8018692 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 801867c:	68bb      	ldr	r3, [r7, #8]
 801867e:	2b00      	cmp	r3, #0
 8018680:	d002      	beq.n	8018688 <netif_do_set_gw+0x26>
 8018682:	68bb      	ldr	r3, [r7, #8]
 8018684:	681b      	ldr	r3, [r3, #0]
 8018686:	e000      	b.n	801868a <netif_do_set_gw+0x28>
 8018688:	2300      	movs	r3, #0
 801868a:	68fa      	ldr	r2, [r7, #12]
 801868c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 801868e:	2301      	movs	r3, #1
 8018690:	e000      	b.n	8018694 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8018692:	2300      	movs	r3, #0
}
 8018694:	4618      	mov	r0, r3
 8018696:	3714      	adds	r7, #20
 8018698:	46bd      	mov	sp, r7
 801869a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801869e:	4770      	bx	lr

080186a0 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80186a0:	b580      	push	{r7, lr}
 80186a2:	b088      	sub	sp, #32
 80186a4:	af00      	add	r7, sp, #0
 80186a6:	60f8      	str	r0, [r7, #12]
 80186a8:	60b9      	str	r1, [r7, #8]
 80186aa:	607a      	str	r2, [r7, #4]
 80186ac:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80186ae:	2300      	movs	r3, #0
 80186b0:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80186b2:	2300      	movs	r3, #0
 80186b4:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80186b6:	68bb      	ldr	r3, [r7, #8]
 80186b8:	2b00      	cmp	r3, #0
 80186ba:	d101      	bne.n	80186c0 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80186bc:	4b1c      	ldr	r3, [pc, #112]	; (8018730 <netif_set_addr+0x90>)
 80186be:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80186c0:	687b      	ldr	r3, [r7, #4]
 80186c2:	2b00      	cmp	r3, #0
 80186c4:	d101      	bne.n	80186ca <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80186c6:	4b1a      	ldr	r3, [pc, #104]	; (8018730 <netif_set_addr+0x90>)
 80186c8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80186ca:	683b      	ldr	r3, [r7, #0]
 80186cc:	2b00      	cmp	r3, #0
 80186ce:	d101      	bne.n	80186d4 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80186d0:	4b17      	ldr	r3, [pc, #92]	; (8018730 <netif_set_addr+0x90>)
 80186d2:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80186d4:	68bb      	ldr	r3, [r7, #8]
 80186d6:	2b00      	cmp	r3, #0
 80186d8:	d003      	beq.n	80186e2 <netif_set_addr+0x42>
 80186da:	68bb      	ldr	r3, [r7, #8]
 80186dc:	681b      	ldr	r3, [r3, #0]
 80186de:	2b00      	cmp	r3, #0
 80186e0:	d101      	bne.n	80186e6 <netif_set_addr+0x46>
 80186e2:	2301      	movs	r3, #1
 80186e4:	e000      	b.n	80186e8 <netif_set_addr+0x48>
 80186e6:	2300      	movs	r3, #0
 80186e8:	617b      	str	r3, [r7, #20]
  if (remove) {
 80186ea:	697b      	ldr	r3, [r7, #20]
 80186ec:	2b00      	cmp	r3, #0
 80186ee:	d006      	beq.n	80186fe <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80186f0:	f107 0310 	add.w	r3, r7, #16
 80186f4:	461a      	mov	r2, r3
 80186f6:	68b9      	ldr	r1, [r7, #8]
 80186f8:	68f8      	ldr	r0, [r7, #12]
 80186fa:	f7ff ff49 	bl	8018590 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80186fe:	69fa      	ldr	r2, [r7, #28]
 8018700:	6879      	ldr	r1, [r7, #4]
 8018702:	68f8      	ldr	r0, [r7, #12]
 8018704:	f7ff ff8e 	bl	8018624 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8018708:	69ba      	ldr	r2, [r7, #24]
 801870a:	6839      	ldr	r1, [r7, #0]
 801870c:	68f8      	ldr	r0, [r7, #12]
 801870e:	f7ff ffa8 	bl	8018662 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8018712:	697b      	ldr	r3, [r7, #20]
 8018714:	2b00      	cmp	r3, #0
 8018716:	d106      	bne.n	8018726 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8018718:	f107 0310 	add.w	r3, r7, #16
 801871c:	461a      	mov	r2, r3
 801871e:	68b9      	ldr	r1, [r7, #8]
 8018720:	68f8      	ldr	r0, [r7, #12]
 8018722:	f7ff ff35 	bl	8018590 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8018726:	bf00      	nop
 8018728:	3720      	adds	r7, #32
 801872a:	46bd      	mov	sp, r7
 801872c:	bd80      	pop	{r7, pc}
 801872e:	bf00      	nop
 8018730:	0802e468 	.word	0x0802e468

08018734 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8018734:	b480      	push	{r7}
 8018736:	b083      	sub	sp, #12
 8018738:	af00      	add	r7, sp, #0
 801873a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 801873c:	4a04      	ldr	r2, [pc, #16]	; (8018750 <netif_set_default+0x1c>)
 801873e:	687b      	ldr	r3, [r7, #4]
 8018740:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8018742:	bf00      	nop
 8018744:	370c      	adds	r7, #12
 8018746:	46bd      	mov	sp, r7
 8018748:	f85d 7b04 	ldr.w	r7, [sp], #4
 801874c:	4770      	bx	lr
 801874e:	bf00      	nop
 8018750:	2001bd00 	.word	0x2001bd00

08018754 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8018754:	b580      	push	{r7, lr}
 8018756:	b082      	sub	sp, #8
 8018758:	af00      	add	r7, sp, #0
 801875a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 801875c:	687b      	ldr	r3, [r7, #4]
 801875e:	2b00      	cmp	r3, #0
 8018760:	d107      	bne.n	8018772 <netif_set_up+0x1e>
 8018762:	4b0f      	ldr	r3, [pc, #60]	; (80187a0 <netif_set_up+0x4c>)
 8018764:	f44f 7254 	mov.w	r2, #848	; 0x350
 8018768:	490e      	ldr	r1, [pc, #56]	; (80187a4 <netif_set_up+0x50>)
 801876a:	480f      	ldr	r0, [pc, #60]	; (80187a8 <netif_set_up+0x54>)
 801876c:	f00d f81e 	bl	80257ac <iprintf>
 8018770:	e013      	b.n	801879a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8018772:	687b      	ldr	r3, [r7, #4]
 8018774:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018778:	f003 0301 	and.w	r3, r3, #1
 801877c:	2b00      	cmp	r3, #0
 801877e:	d10c      	bne.n	801879a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8018780:	687b      	ldr	r3, [r7, #4]
 8018782:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018786:	f043 0301 	orr.w	r3, r3, #1
 801878a:	b2da      	uxtb	r2, r3
 801878c:	687b      	ldr	r3, [r7, #4]
 801878e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8018792:	2103      	movs	r1, #3
 8018794:	6878      	ldr	r0, [r7, #4]
 8018796:	f000 f809 	bl	80187ac <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 801879a:	3708      	adds	r7, #8
 801879c:	46bd      	mov	sp, r7
 801879e:	bd80      	pop	{r7, pc}
 80187a0:	0802b808 	.word	0x0802b808
 80187a4:	0802b990 	.word	0x0802b990
 80187a8:	0802b858 	.word	0x0802b858

080187ac <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80187ac:	b580      	push	{r7, lr}
 80187ae:	b082      	sub	sp, #8
 80187b0:	af00      	add	r7, sp, #0
 80187b2:	6078      	str	r0, [r7, #4]
 80187b4:	460b      	mov	r3, r1
 80187b6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80187b8:	687b      	ldr	r3, [r7, #4]
 80187ba:	2b00      	cmp	r3, #0
 80187bc:	d106      	bne.n	80187cc <netif_issue_reports+0x20>
 80187be:	4b18      	ldr	r3, [pc, #96]	; (8018820 <netif_issue_reports+0x74>)
 80187c0:	f240 326d 	movw	r2, #877	; 0x36d
 80187c4:	4917      	ldr	r1, [pc, #92]	; (8018824 <netif_issue_reports+0x78>)
 80187c6:	4818      	ldr	r0, [pc, #96]	; (8018828 <netif_issue_reports+0x7c>)
 80187c8:	f00c fff0 	bl	80257ac <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80187cc:	687b      	ldr	r3, [r7, #4]
 80187ce:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80187d2:	f003 0304 	and.w	r3, r3, #4
 80187d6:	2b00      	cmp	r3, #0
 80187d8:	d01e      	beq.n	8018818 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80187da:	687b      	ldr	r3, [r7, #4]
 80187dc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80187e0:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80187e4:	2b00      	cmp	r3, #0
 80187e6:	d017      	beq.n	8018818 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80187e8:	78fb      	ldrb	r3, [r7, #3]
 80187ea:	f003 0301 	and.w	r3, r3, #1
 80187ee:	2b00      	cmp	r3, #0
 80187f0:	d013      	beq.n	801881a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80187f2:	687b      	ldr	r3, [r7, #4]
 80187f4:	3304      	adds	r3, #4
 80187f6:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80187f8:	2b00      	cmp	r3, #0
 80187fa:	d00e      	beq.n	801881a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80187fc:	687b      	ldr	r3, [r7, #4]
 80187fe:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018802:	f003 0308 	and.w	r3, r3, #8
 8018806:	2b00      	cmp	r3, #0
 8018808:	d007      	beq.n	801881a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 801880a:	687b      	ldr	r3, [r7, #4]
 801880c:	3304      	adds	r3, #4
 801880e:	4619      	mov	r1, r3
 8018810:	6878      	ldr	r0, [r7, #4]
 8018812:	f00a fc01 	bl	8023018 <etharp_request>
 8018816:	e000      	b.n	801881a <netif_issue_reports+0x6e>
    return;
 8018818:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 801881a:	3708      	adds	r7, #8
 801881c:	46bd      	mov	sp, r7
 801881e:	bd80      	pop	{r7, pc}
 8018820:	0802b808 	.word	0x0802b808
 8018824:	0802b9ac 	.word	0x0802b9ac
 8018828:	0802b858 	.word	0x0802b858

0801882c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 801882c:	b580      	push	{r7, lr}
 801882e:	b082      	sub	sp, #8
 8018830:	af00      	add	r7, sp, #0
 8018832:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8018834:	687b      	ldr	r3, [r7, #4]
 8018836:	2b00      	cmp	r3, #0
 8018838:	d107      	bne.n	801884a <netif_set_down+0x1e>
 801883a:	4b12      	ldr	r3, [pc, #72]	; (8018884 <netif_set_down+0x58>)
 801883c:	f240 329b 	movw	r2, #923	; 0x39b
 8018840:	4911      	ldr	r1, [pc, #68]	; (8018888 <netif_set_down+0x5c>)
 8018842:	4812      	ldr	r0, [pc, #72]	; (801888c <netif_set_down+0x60>)
 8018844:	f00c ffb2 	bl	80257ac <iprintf>
 8018848:	e019      	b.n	801887e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 801884a:	687b      	ldr	r3, [r7, #4]
 801884c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018850:	f003 0301 	and.w	r3, r3, #1
 8018854:	2b00      	cmp	r3, #0
 8018856:	d012      	beq.n	801887e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8018858:	687b      	ldr	r3, [r7, #4]
 801885a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801885e:	f023 0301 	bic.w	r3, r3, #1
 8018862:	b2da      	uxtb	r2, r3
 8018864:	687b      	ldr	r3, [r7, #4]
 8018866:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 801886a:	687b      	ldr	r3, [r7, #4]
 801886c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018870:	f003 0308 	and.w	r3, r3, #8
 8018874:	2b00      	cmp	r3, #0
 8018876:	d002      	beq.n	801887e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8018878:	6878      	ldr	r0, [r7, #4]
 801887a:	f009 ff87 	bl	802278c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 801887e:	3708      	adds	r7, #8
 8018880:	46bd      	mov	sp, r7
 8018882:	bd80      	pop	{r7, pc}
 8018884:	0802b808 	.word	0x0802b808
 8018888:	0802b9d0 	.word	0x0802b9d0
 801888c:	0802b858 	.word	0x0802b858

08018890 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8018890:	b580      	push	{r7, lr}
 8018892:	b082      	sub	sp, #8
 8018894:	af00      	add	r7, sp, #0
 8018896:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8018898:	687b      	ldr	r3, [r7, #4]
 801889a:	2b00      	cmp	r3, #0
 801889c:	d107      	bne.n	80188ae <netif_set_link_up+0x1e>
 801889e:	4b15      	ldr	r3, [pc, #84]	; (80188f4 <netif_set_link_up+0x64>)
 80188a0:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 80188a4:	4914      	ldr	r1, [pc, #80]	; (80188f8 <netif_set_link_up+0x68>)
 80188a6:	4815      	ldr	r0, [pc, #84]	; (80188fc <netif_set_link_up+0x6c>)
 80188a8:	f00c ff80 	bl	80257ac <iprintf>
 80188ac:	e01e      	b.n	80188ec <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80188ae:	687b      	ldr	r3, [r7, #4]
 80188b0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80188b4:	f003 0304 	and.w	r3, r3, #4
 80188b8:	2b00      	cmp	r3, #0
 80188ba:	d117      	bne.n	80188ec <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80188bc:	687b      	ldr	r3, [r7, #4]
 80188be:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80188c2:	f043 0304 	orr.w	r3, r3, #4
 80188c6:	b2da      	uxtb	r2, r3
 80188c8:	687b      	ldr	r3, [r7, #4]
 80188ca:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 80188ce:	6878      	ldr	r0, [r7, #4]
 80188d0:	f008 f9cc 	bl	8020c6c <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80188d4:	2103      	movs	r1, #3
 80188d6:	6878      	ldr	r0, [r7, #4]
 80188d8:	f7ff ff68 	bl	80187ac <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80188dc:	687b      	ldr	r3, [r7, #4]
 80188de:	69db      	ldr	r3, [r3, #28]
 80188e0:	2b00      	cmp	r3, #0
 80188e2:	d003      	beq.n	80188ec <netif_set_link_up+0x5c>
 80188e4:	687b      	ldr	r3, [r7, #4]
 80188e6:	69db      	ldr	r3, [r3, #28]
 80188e8:	6878      	ldr	r0, [r7, #4]
 80188ea:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80188ec:	3708      	adds	r7, #8
 80188ee:	46bd      	mov	sp, r7
 80188f0:	bd80      	pop	{r7, pc}
 80188f2:	bf00      	nop
 80188f4:	0802b808 	.word	0x0802b808
 80188f8:	0802b9f0 	.word	0x0802b9f0
 80188fc:	0802b858 	.word	0x0802b858

08018900 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8018900:	b580      	push	{r7, lr}
 8018902:	b082      	sub	sp, #8
 8018904:	af00      	add	r7, sp, #0
 8018906:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8018908:	687b      	ldr	r3, [r7, #4]
 801890a:	2b00      	cmp	r3, #0
 801890c:	d107      	bne.n	801891e <netif_set_link_down+0x1e>
 801890e:	4b11      	ldr	r3, [pc, #68]	; (8018954 <netif_set_link_down+0x54>)
 8018910:	f240 4206 	movw	r2, #1030	; 0x406
 8018914:	4910      	ldr	r1, [pc, #64]	; (8018958 <netif_set_link_down+0x58>)
 8018916:	4811      	ldr	r0, [pc, #68]	; (801895c <netif_set_link_down+0x5c>)
 8018918:	f00c ff48 	bl	80257ac <iprintf>
 801891c:	e017      	b.n	801894e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 801891e:	687b      	ldr	r3, [r7, #4]
 8018920:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018924:	f003 0304 	and.w	r3, r3, #4
 8018928:	2b00      	cmp	r3, #0
 801892a:	d010      	beq.n	801894e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 801892c:	687b      	ldr	r3, [r7, #4]
 801892e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018932:	f023 0304 	bic.w	r3, r3, #4
 8018936:	b2da      	uxtb	r2, r3
 8018938:	687b      	ldr	r3, [r7, #4]
 801893a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 801893e:	687b      	ldr	r3, [r7, #4]
 8018940:	69db      	ldr	r3, [r3, #28]
 8018942:	2b00      	cmp	r3, #0
 8018944:	d003      	beq.n	801894e <netif_set_link_down+0x4e>
 8018946:	687b      	ldr	r3, [r7, #4]
 8018948:	69db      	ldr	r3, [r3, #28]
 801894a:	6878      	ldr	r0, [r7, #4]
 801894c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801894e:	3708      	adds	r7, #8
 8018950:	46bd      	mov	sp, r7
 8018952:	bd80      	pop	{r7, pc}
 8018954:	0802b808 	.word	0x0802b808
 8018958:	0802ba14 	.word	0x0802ba14
 801895c:	0802b858 	.word	0x0802b858

08018960 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8018960:	b480      	push	{r7}
 8018962:	b083      	sub	sp, #12
 8018964:	af00      	add	r7, sp, #0
 8018966:	6078      	str	r0, [r7, #4]
 8018968:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 801896a:	687b      	ldr	r3, [r7, #4]
 801896c:	2b00      	cmp	r3, #0
 801896e:	d002      	beq.n	8018976 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8018970:	687b      	ldr	r3, [r7, #4]
 8018972:	683a      	ldr	r2, [r7, #0]
 8018974:	61da      	str	r2, [r3, #28]
  }
}
 8018976:	bf00      	nop
 8018978:	370c      	adds	r7, #12
 801897a:	46bd      	mov	sp, r7
 801897c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018980:	4770      	bx	lr

08018982 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8018982:	b480      	push	{r7}
 8018984:	b085      	sub	sp, #20
 8018986:	af00      	add	r7, sp, #0
 8018988:	60f8      	str	r0, [r7, #12]
 801898a:	60b9      	str	r1, [r7, #8]
 801898c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 801898e:	f06f 030b 	mvn.w	r3, #11
}
 8018992:	4618      	mov	r0, r3
 8018994:	3714      	adds	r7, #20
 8018996:	46bd      	mov	sp, r7
 8018998:	f85d 7b04 	ldr.w	r7, [sp], #4
 801899c:	4770      	bx	lr
	...

080189a0 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80189a0:	b480      	push	{r7}
 80189a2:	b085      	sub	sp, #20
 80189a4:	af00      	add	r7, sp, #0
 80189a6:	4603      	mov	r3, r0
 80189a8:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80189aa:	79fb      	ldrb	r3, [r7, #7]
 80189ac:	2b00      	cmp	r3, #0
 80189ae:	d013      	beq.n	80189d8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80189b0:	4b0d      	ldr	r3, [pc, #52]	; (80189e8 <netif_get_by_index+0x48>)
 80189b2:	681b      	ldr	r3, [r3, #0]
 80189b4:	60fb      	str	r3, [r7, #12]
 80189b6:	e00c      	b.n	80189d2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80189b8:	68fb      	ldr	r3, [r7, #12]
 80189ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80189be:	3301      	adds	r3, #1
 80189c0:	b2db      	uxtb	r3, r3
 80189c2:	79fa      	ldrb	r2, [r7, #7]
 80189c4:	429a      	cmp	r2, r3
 80189c6:	d101      	bne.n	80189cc <netif_get_by_index+0x2c>
        return netif; /* found! */
 80189c8:	68fb      	ldr	r3, [r7, #12]
 80189ca:	e006      	b.n	80189da <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80189cc:	68fb      	ldr	r3, [r7, #12]
 80189ce:	681b      	ldr	r3, [r3, #0]
 80189d0:	60fb      	str	r3, [r7, #12]
 80189d2:	68fb      	ldr	r3, [r7, #12]
 80189d4:	2b00      	cmp	r3, #0
 80189d6:	d1ef      	bne.n	80189b8 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80189d8:	2300      	movs	r3, #0
}
 80189da:	4618      	mov	r0, r3
 80189dc:	3714      	adds	r7, #20
 80189de:	46bd      	mov	sp, r7
 80189e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189e4:	4770      	bx	lr
 80189e6:	bf00      	nop
 80189e8:	2001bcfc 	.word	0x2001bcfc

080189ec <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80189ec:	b580      	push	{r7, lr}
 80189ee:	b082      	sub	sp, #8
 80189f0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80189f2:	f00b ff8f 	bl	8024914 <sys_arch_protect>
 80189f6:	6038      	str	r0, [r7, #0]
 80189f8:	4b0d      	ldr	r3, [pc, #52]	; (8018a30 <pbuf_free_ooseq+0x44>)
 80189fa:	2200      	movs	r2, #0
 80189fc:	701a      	strb	r2, [r3, #0]
 80189fe:	6838      	ldr	r0, [r7, #0]
 8018a00:	f00b ff96 	bl	8024930 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8018a04:	4b0b      	ldr	r3, [pc, #44]	; (8018a34 <pbuf_free_ooseq+0x48>)
 8018a06:	681b      	ldr	r3, [r3, #0]
 8018a08:	607b      	str	r3, [r7, #4]
 8018a0a:	e00a      	b.n	8018a22 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8018a0c:	687b      	ldr	r3, [r7, #4]
 8018a0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018a10:	2b00      	cmp	r3, #0
 8018a12:	d003      	beq.n	8018a1c <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8018a14:	6878      	ldr	r0, [r7, #4]
 8018a16:	f002 fc91 	bl	801b33c <tcp_free_ooseq>
      return;
 8018a1a:	e005      	b.n	8018a28 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8018a1c:	687b      	ldr	r3, [r7, #4]
 8018a1e:	68db      	ldr	r3, [r3, #12]
 8018a20:	607b      	str	r3, [r7, #4]
 8018a22:	687b      	ldr	r3, [r7, #4]
 8018a24:	2b00      	cmp	r3, #0
 8018a26:	d1f1      	bne.n	8018a0c <pbuf_free_ooseq+0x20>
    }
  }
}
 8018a28:	3708      	adds	r7, #8
 8018a2a:	46bd      	mov	sp, r7
 8018a2c:	bd80      	pop	{r7, pc}
 8018a2e:	bf00      	nop
 8018a30:	2001bd04 	.word	0x2001bd04
 8018a34:	2001bd0c 	.word	0x2001bd0c

08018a38 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8018a38:	b580      	push	{r7, lr}
 8018a3a:	b082      	sub	sp, #8
 8018a3c:	af00      	add	r7, sp, #0
 8018a3e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8018a40:	f7ff ffd4 	bl	80189ec <pbuf_free_ooseq>
}
 8018a44:	bf00      	nop
 8018a46:	3708      	adds	r7, #8
 8018a48:	46bd      	mov	sp, r7
 8018a4a:	bd80      	pop	{r7, pc}

08018a4c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8018a4c:	b580      	push	{r7, lr}
 8018a4e:	b082      	sub	sp, #8
 8018a50:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8018a52:	f00b ff5f 	bl	8024914 <sys_arch_protect>
 8018a56:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8018a58:	4b0f      	ldr	r3, [pc, #60]	; (8018a98 <pbuf_pool_is_empty+0x4c>)
 8018a5a:	781b      	ldrb	r3, [r3, #0]
 8018a5c:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8018a5e:	4b0e      	ldr	r3, [pc, #56]	; (8018a98 <pbuf_pool_is_empty+0x4c>)
 8018a60:	2201      	movs	r2, #1
 8018a62:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8018a64:	6878      	ldr	r0, [r7, #4]
 8018a66:	f00b ff63 	bl	8024930 <sys_arch_unprotect>

  if (!queued) {
 8018a6a:	78fb      	ldrb	r3, [r7, #3]
 8018a6c:	2b00      	cmp	r3, #0
 8018a6e:	d10f      	bne.n	8018a90 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8018a70:	2100      	movs	r1, #0
 8018a72:	480a      	ldr	r0, [pc, #40]	; (8018a9c <pbuf_pool_is_empty+0x50>)
 8018a74:	f7fd f952 	bl	8015d1c <tcpip_try_callback>
 8018a78:	4603      	mov	r3, r0
 8018a7a:	2b00      	cmp	r3, #0
 8018a7c:	d008      	beq.n	8018a90 <pbuf_pool_is_empty+0x44>
 8018a7e:	f00b ff49 	bl	8024914 <sys_arch_protect>
 8018a82:	6078      	str	r0, [r7, #4]
 8018a84:	4b04      	ldr	r3, [pc, #16]	; (8018a98 <pbuf_pool_is_empty+0x4c>)
 8018a86:	2200      	movs	r2, #0
 8018a88:	701a      	strb	r2, [r3, #0]
 8018a8a:	6878      	ldr	r0, [r7, #4]
 8018a8c:	f00b ff50 	bl	8024930 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8018a90:	bf00      	nop
 8018a92:	3708      	adds	r7, #8
 8018a94:	46bd      	mov	sp, r7
 8018a96:	bd80      	pop	{r7, pc}
 8018a98:	2001bd04 	.word	0x2001bd04
 8018a9c:	08018a39 	.word	0x08018a39

08018aa0 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8018aa0:	b480      	push	{r7}
 8018aa2:	b085      	sub	sp, #20
 8018aa4:	af00      	add	r7, sp, #0
 8018aa6:	60f8      	str	r0, [r7, #12]
 8018aa8:	60b9      	str	r1, [r7, #8]
 8018aaa:	4611      	mov	r1, r2
 8018aac:	461a      	mov	r2, r3
 8018aae:	460b      	mov	r3, r1
 8018ab0:	80fb      	strh	r3, [r7, #6]
 8018ab2:	4613      	mov	r3, r2
 8018ab4:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8018ab6:	68fb      	ldr	r3, [r7, #12]
 8018ab8:	2200      	movs	r2, #0
 8018aba:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8018abc:	68fb      	ldr	r3, [r7, #12]
 8018abe:	68ba      	ldr	r2, [r7, #8]
 8018ac0:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8018ac2:	68fb      	ldr	r3, [r7, #12]
 8018ac4:	88fa      	ldrh	r2, [r7, #6]
 8018ac6:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8018ac8:	68fb      	ldr	r3, [r7, #12]
 8018aca:	88ba      	ldrh	r2, [r7, #4]
 8018acc:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8018ace:	8b3b      	ldrh	r3, [r7, #24]
 8018ad0:	b2da      	uxtb	r2, r3
 8018ad2:	68fb      	ldr	r3, [r7, #12]
 8018ad4:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8018ad6:	68fb      	ldr	r3, [r7, #12]
 8018ad8:	7f3a      	ldrb	r2, [r7, #28]
 8018ada:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8018adc:	68fb      	ldr	r3, [r7, #12]
 8018ade:	2201      	movs	r2, #1
 8018ae0:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8018ae2:	68fb      	ldr	r3, [r7, #12]
 8018ae4:	2200      	movs	r2, #0
 8018ae6:	73da      	strb	r2, [r3, #15]
}
 8018ae8:	bf00      	nop
 8018aea:	3714      	adds	r7, #20
 8018aec:	46bd      	mov	sp, r7
 8018aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018af2:	4770      	bx	lr

08018af4 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8018af4:	b580      	push	{r7, lr}
 8018af6:	b08c      	sub	sp, #48	; 0x30
 8018af8:	af02      	add	r7, sp, #8
 8018afa:	4603      	mov	r3, r0
 8018afc:	71fb      	strb	r3, [r7, #7]
 8018afe:	460b      	mov	r3, r1
 8018b00:	80bb      	strh	r3, [r7, #4]
 8018b02:	4613      	mov	r3, r2
 8018b04:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8018b06:	79fb      	ldrb	r3, [r7, #7]
 8018b08:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8018b0a:	887b      	ldrh	r3, [r7, #2]
 8018b0c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8018b10:	d07f      	beq.n	8018c12 <pbuf_alloc+0x11e>
 8018b12:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8018b16:	f300 80c8 	bgt.w	8018caa <pbuf_alloc+0x1b6>
 8018b1a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8018b1e:	d010      	beq.n	8018b42 <pbuf_alloc+0x4e>
 8018b20:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8018b24:	f300 80c1 	bgt.w	8018caa <pbuf_alloc+0x1b6>
 8018b28:	2b01      	cmp	r3, #1
 8018b2a:	d002      	beq.n	8018b32 <pbuf_alloc+0x3e>
 8018b2c:	2b41      	cmp	r3, #65	; 0x41
 8018b2e:	f040 80bc 	bne.w	8018caa <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8018b32:	887a      	ldrh	r2, [r7, #2]
 8018b34:	88bb      	ldrh	r3, [r7, #4]
 8018b36:	4619      	mov	r1, r3
 8018b38:	2000      	movs	r0, #0
 8018b3a:	f000 f8d1 	bl	8018ce0 <pbuf_alloc_reference>
 8018b3e:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8018b40:	e0bd      	b.n	8018cbe <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8018b42:	2300      	movs	r3, #0
 8018b44:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8018b46:	2300      	movs	r3, #0
 8018b48:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8018b4a:	88bb      	ldrh	r3, [r7, #4]
 8018b4c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8018b4e:	200c      	movs	r0, #12
 8018b50:	f7ff fbb2 	bl	80182b8 <memp_malloc>
 8018b54:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8018b56:	693b      	ldr	r3, [r7, #16]
 8018b58:	2b00      	cmp	r3, #0
 8018b5a:	d109      	bne.n	8018b70 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8018b5c:	f7ff ff76 	bl	8018a4c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8018b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b62:	2b00      	cmp	r3, #0
 8018b64:	d002      	beq.n	8018b6c <pbuf_alloc+0x78>
            pbuf_free(p);
 8018b66:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018b68:	f000 faa8 	bl	80190bc <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8018b6c:	2300      	movs	r3, #0
 8018b6e:	e0a7      	b.n	8018cc0 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8018b70:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018b72:	3303      	adds	r3, #3
 8018b74:	b29b      	uxth	r3, r3
 8018b76:	f023 0303 	bic.w	r3, r3, #3
 8018b7a:	b29b      	uxth	r3, r3
 8018b7c:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8018b80:	b29b      	uxth	r3, r3
 8018b82:	8b7a      	ldrh	r2, [r7, #26]
 8018b84:	4293      	cmp	r3, r2
 8018b86:	bf28      	it	cs
 8018b88:	4613      	movcs	r3, r2
 8018b8a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8018b8c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018b8e:	3310      	adds	r3, #16
 8018b90:	693a      	ldr	r2, [r7, #16]
 8018b92:	4413      	add	r3, r2
 8018b94:	3303      	adds	r3, #3
 8018b96:	f023 0303 	bic.w	r3, r3, #3
 8018b9a:	4618      	mov	r0, r3
 8018b9c:	89f9      	ldrh	r1, [r7, #14]
 8018b9e:	8b7a      	ldrh	r2, [r7, #26]
 8018ba0:	2300      	movs	r3, #0
 8018ba2:	9301      	str	r3, [sp, #4]
 8018ba4:	887b      	ldrh	r3, [r7, #2]
 8018ba6:	9300      	str	r3, [sp, #0]
 8018ba8:	460b      	mov	r3, r1
 8018baa:	4601      	mov	r1, r0
 8018bac:	6938      	ldr	r0, [r7, #16]
 8018bae:	f7ff ff77 	bl	8018aa0 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8018bb2:	693b      	ldr	r3, [r7, #16]
 8018bb4:	685b      	ldr	r3, [r3, #4]
 8018bb6:	f003 0303 	and.w	r3, r3, #3
 8018bba:	2b00      	cmp	r3, #0
 8018bbc:	d006      	beq.n	8018bcc <pbuf_alloc+0xd8>
 8018bbe:	4b42      	ldr	r3, [pc, #264]	; (8018cc8 <pbuf_alloc+0x1d4>)
 8018bc0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8018bc4:	4941      	ldr	r1, [pc, #260]	; (8018ccc <pbuf_alloc+0x1d8>)
 8018bc6:	4842      	ldr	r0, [pc, #264]	; (8018cd0 <pbuf_alloc+0x1dc>)
 8018bc8:	f00c fdf0 	bl	80257ac <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8018bcc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018bce:	3303      	adds	r3, #3
 8018bd0:	f023 0303 	bic.w	r3, r3, #3
 8018bd4:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8018bd8:	d106      	bne.n	8018be8 <pbuf_alloc+0xf4>
 8018bda:	4b3b      	ldr	r3, [pc, #236]	; (8018cc8 <pbuf_alloc+0x1d4>)
 8018bdc:	f44f 7281 	mov.w	r2, #258	; 0x102
 8018be0:	493c      	ldr	r1, [pc, #240]	; (8018cd4 <pbuf_alloc+0x1e0>)
 8018be2:	483b      	ldr	r0, [pc, #236]	; (8018cd0 <pbuf_alloc+0x1dc>)
 8018be4:	f00c fde2 	bl	80257ac <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8018be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018bea:	2b00      	cmp	r3, #0
 8018bec:	d102      	bne.n	8018bf4 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8018bee:	693b      	ldr	r3, [r7, #16]
 8018bf0:	627b      	str	r3, [r7, #36]	; 0x24
 8018bf2:	e002      	b.n	8018bfa <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8018bf4:	69fb      	ldr	r3, [r7, #28]
 8018bf6:	693a      	ldr	r2, [r7, #16]
 8018bf8:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8018bfa:	693b      	ldr	r3, [r7, #16]
 8018bfc:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8018bfe:	8b7a      	ldrh	r2, [r7, #26]
 8018c00:	89fb      	ldrh	r3, [r7, #14]
 8018c02:	1ad3      	subs	r3, r2, r3
 8018c04:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8018c06:	2300      	movs	r3, #0
 8018c08:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8018c0a:	8b7b      	ldrh	r3, [r7, #26]
 8018c0c:	2b00      	cmp	r3, #0
 8018c0e:	d19e      	bne.n	8018b4e <pbuf_alloc+0x5a>
      break;
 8018c10:	e055      	b.n	8018cbe <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8018c12:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018c14:	3303      	adds	r3, #3
 8018c16:	b29b      	uxth	r3, r3
 8018c18:	f023 0303 	bic.w	r3, r3, #3
 8018c1c:	b29a      	uxth	r2, r3
 8018c1e:	88bb      	ldrh	r3, [r7, #4]
 8018c20:	3303      	adds	r3, #3
 8018c22:	b29b      	uxth	r3, r3
 8018c24:	f023 0303 	bic.w	r3, r3, #3
 8018c28:	b29b      	uxth	r3, r3
 8018c2a:	4413      	add	r3, r2
 8018c2c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8018c2e:	8b3b      	ldrh	r3, [r7, #24]
 8018c30:	3310      	adds	r3, #16
 8018c32:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8018c34:	8b3a      	ldrh	r2, [r7, #24]
 8018c36:	88bb      	ldrh	r3, [r7, #4]
 8018c38:	3303      	adds	r3, #3
 8018c3a:	f023 0303 	bic.w	r3, r3, #3
 8018c3e:	429a      	cmp	r2, r3
 8018c40:	d306      	bcc.n	8018c50 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8018c42:	8afa      	ldrh	r2, [r7, #22]
 8018c44:	88bb      	ldrh	r3, [r7, #4]
 8018c46:	3303      	adds	r3, #3
 8018c48:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8018c4c:	429a      	cmp	r2, r3
 8018c4e:	d201      	bcs.n	8018c54 <pbuf_alloc+0x160>
        return NULL;
 8018c50:	2300      	movs	r3, #0
 8018c52:	e035      	b.n	8018cc0 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8018c54:	8afb      	ldrh	r3, [r7, #22]
 8018c56:	4618      	mov	r0, r3
 8018c58:	f7ff f984 	bl	8017f64 <mem_malloc>
 8018c5c:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8018c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018c60:	2b00      	cmp	r3, #0
 8018c62:	d101      	bne.n	8018c68 <pbuf_alloc+0x174>
        return NULL;
 8018c64:	2300      	movs	r3, #0
 8018c66:	e02b      	b.n	8018cc0 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8018c68:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018c6a:	3310      	adds	r3, #16
 8018c6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018c6e:	4413      	add	r3, r2
 8018c70:	3303      	adds	r3, #3
 8018c72:	f023 0303 	bic.w	r3, r3, #3
 8018c76:	4618      	mov	r0, r3
 8018c78:	88b9      	ldrh	r1, [r7, #4]
 8018c7a:	88ba      	ldrh	r2, [r7, #4]
 8018c7c:	2300      	movs	r3, #0
 8018c7e:	9301      	str	r3, [sp, #4]
 8018c80:	887b      	ldrh	r3, [r7, #2]
 8018c82:	9300      	str	r3, [sp, #0]
 8018c84:	460b      	mov	r3, r1
 8018c86:	4601      	mov	r1, r0
 8018c88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018c8a:	f7ff ff09 	bl	8018aa0 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8018c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018c90:	685b      	ldr	r3, [r3, #4]
 8018c92:	f003 0303 	and.w	r3, r3, #3
 8018c96:	2b00      	cmp	r3, #0
 8018c98:	d010      	beq.n	8018cbc <pbuf_alloc+0x1c8>
 8018c9a:	4b0b      	ldr	r3, [pc, #44]	; (8018cc8 <pbuf_alloc+0x1d4>)
 8018c9c:	f44f 7291 	mov.w	r2, #290	; 0x122
 8018ca0:	490d      	ldr	r1, [pc, #52]	; (8018cd8 <pbuf_alloc+0x1e4>)
 8018ca2:	480b      	ldr	r0, [pc, #44]	; (8018cd0 <pbuf_alloc+0x1dc>)
 8018ca4:	f00c fd82 	bl	80257ac <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8018ca8:	e008      	b.n	8018cbc <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8018caa:	4b07      	ldr	r3, [pc, #28]	; (8018cc8 <pbuf_alloc+0x1d4>)
 8018cac:	f240 1227 	movw	r2, #295	; 0x127
 8018cb0:	490a      	ldr	r1, [pc, #40]	; (8018cdc <pbuf_alloc+0x1e8>)
 8018cb2:	4807      	ldr	r0, [pc, #28]	; (8018cd0 <pbuf_alloc+0x1dc>)
 8018cb4:	f00c fd7a 	bl	80257ac <iprintf>
      return NULL;
 8018cb8:	2300      	movs	r3, #0
 8018cba:	e001      	b.n	8018cc0 <pbuf_alloc+0x1cc>
      break;
 8018cbc:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8018cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8018cc0:	4618      	mov	r0, r3
 8018cc2:	3728      	adds	r7, #40	; 0x28
 8018cc4:	46bd      	mov	sp, r7
 8018cc6:	bd80      	pop	{r7, pc}
 8018cc8:	0802ba38 	.word	0x0802ba38
 8018ccc:	0802ba68 	.word	0x0802ba68
 8018cd0:	0802ba98 	.word	0x0802ba98
 8018cd4:	0802bac0 	.word	0x0802bac0
 8018cd8:	0802baf4 	.word	0x0802baf4
 8018cdc:	0802bb20 	.word	0x0802bb20

08018ce0 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8018ce0:	b580      	push	{r7, lr}
 8018ce2:	b086      	sub	sp, #24
 8018ce4:	af02      	add	r7, sp, #8
 8018ce6:	6078      	str	r0, [r7, #4]
 8018ce8:	460b      	mov	r3, r1
 8018cea:	807b      	strh	r3, [r7, #2]
 8018cec:	4613      	mov	r3, r2
 8018cee:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8018cf0:	883b      	ldrh	r3, [r7, #0]
 8018cf2:	2b41      	cmp	r3, #65	; 0x41
 8018cf4:	d009      	beq.n	8018d0a <pbuf_alloc_reference+0x2a>
 8018cf6:	883b      	ldrh	r3, [r7, #0]
 8018cf8:	2b01      	cmp	r3, #1
 8018cfa:	d006      	beq.n	8018d0a <pbuf_alloc_reference+0x2a>
 8018cfc:	4b0f      	ldr	r3, [pc, #60]	; (8018d3c <pbuf_alloc_reference+0x5c>)
 8018cfe:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8018d02:	490f      	ldr	r1, [pc, #60]	; (8018d40 <pbuf_alloc_reference+0x60>)
 8018d04:	480f      	ldr	r0, [pc, #60]	; (8018d44 <pbuf_alloc_reference+0x64>)
 8018d06:	f00c fd51 	bl	80257ac <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8018d0a:	200b      	movs	r0, #11
 8018d0c:	f7ff fad4 	bl	80182b8 <memp_malloc>
 8018d10:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8018d12:	68fb      	ldr	r3, [r7, #12]
 8018d14:	2b00      	cmp	r3, #0
 8018d16:	d101      	bne.n	8018d1c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8018d18:	2300      	movs	r3, #0
 8018d1a:	e00b      	b.n	8018d34 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8018d1c:	8879      	ldrh	r1, [r7, #2]
 8018d1e:	887a      	ldrh	r2, [r7, #2]
 8018d20:	2300      	movs	r3, #0
 8018d22:	9301      	str	r3, [sp, #4]
 8018d24:	883b      	ldrh	r3, [r7, #0]
 8018d26:	9300      	str	r3, [sp, #0]
 8018d28:	460b      	mov	r3, r1
 8018d2a:	6879      	ldr	r1, [r7, #4]
 8018d2c:	68f8      	ldr	r0, [r7, #12]
 8018d2e:	f7ff feb7 	bl	8018aa0 <pbuf_init_alloced_pbuf>
  return p;
 8018d32:	68fb      	ldr	r3, [r7, #12]
}
 8018d34:	4618      	mov	r0, r3
 8018d36:	3710      	adds	r7, #16
 8018d38:	46bd      	mov	sp, r7
 8018d3a:	bd80      	pop	{r7, pc}
 8018d3c:	0802ba38 	.word	0x0802ba38
 8018d40:	0802bb3c 	.word	0x0802bb3c
 8018d44:	0802ba98 	.word	0x0802ba98

08018d48 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8018d48:	b580      	push	{r7, lr}
 8018d4a:	b088      	sub	sp, #32
 8018d4c:	af02      	add	r7, sp, #8
 8018d4e:	607b      	str	r3, [r7, #4]
 8018d50:	4603      	mov	r3, r0
 8018d52:	73fb      	strb	r3, [r7, #15]
 8018d54:	460b      	mov	r3, r1
 8018d56:	81bb      	strh	r3, [r7, #12]
 8018d58:	4613      	mov	r3, r2
 8018d5a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8018d5c:	7bfb      	ldrb	r3, [r7, #15]
 8018d5e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8018d60:	8a7b      	ldrh	r3, [r7, #18]
 8018d62:	3303      	adds	r3, #3
 8018d64:	f023 0203 	bic.w	r2, r3, #3
 8018d68:	89bb      	ldrh	r3, [r7, #12]
 8018d6a:	441a      	add	r2, r3
 8018d6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018d6e:	429a      	cmp	r2, r3
 8018d70:	d901      	bls.n	8018d76 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8018d72:	2300      	movs	r3, #0
 8018d74:	e018      	b.n	8018da8 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8018d76:	6a3b      	ldr	r3, [r7, #32]
 8018d78:	2b00      	cmp	r3, #0
 8018d7a:	d007      	beq.n	8018d8c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8018d7c:	8a7b      	ldrh	r3, [r7, #18]
 8018d7e:	3303      	adds	r3, #3
 8018d80:	f023 0303 	bic.w	r3, r3, #3
 8018d84:	6a3a      	ldr	r2, [r7, #32]
 8018d86:	4413      	add	r3, r2
 8018d88:	617b      	str	r3, [r7, #20]
 8018d8a:	e001      	b.n	8018d90 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8018d8c:	2300      	movs	r3, #0
 8018d8e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8018d90:	6878      	ldr	r0, [r7, #4]
 8018d92:	89b9      	ldrh	r1, [r7, #12]
 8018d94:	89ba      	ldrh	r2, [r7, #12]
 8018d96:	2302      	movs	r3, #2
 8018d98:	9301      	str	r3, [sp, #4]
 8018d9a:	897b      	ldrh	r3, [r7, #10]
 8018d9c:	9300      	str	r3, [sp, #0]
 8018d9e:	460b      	mov	r3, r1
 8018da0:	6979      	ldr	r1, [r7, #20]
 8018da2:	f7ff fe7d 	bl	8018aa0 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8018da6:	687b      	ldr	r3, [r7, #4]
}
 8018da8:	4618      	mov	r0, r3
 8018daa:	3718      	adds	r7, #24
 8018dac:	46bd      	mov	sp, r7
 8018dae:	bd80      	pop	{r7, pc}

08018db0 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8018db0:	b580      	push	{r7, lr}
 8018db2:	b084      	sub	sp, #16
 8018db4:	af00      	add	r7, sp, #0
 8018db6:	6078      	str	r0, [r7, #4]
 8018db8:	460b      	mov	r3, r1
 8018dba:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8018dbc:	687b      	ldr	r3, [r7, #4]
 8018dbe:	2b00      	cmp	r3, #0
 8018dc0:	d106      	bne.n	8018dd0 <pbuf_realloc+0x20>
 8018dc2:	4b3a      	ldr	r3, [pc, #232]	; (8018eac <pbuf_realloc+0xfc>)
 8018dc4:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8018dc8:	4939      	ldr	r1, [pc, #228]	; (8018eb0 <pbuf_realloc+0x100>)
 8018dca:	483a      	ldr	r0, [pc, #232]	; (8018eb4 <pbuf_realloc+0x104>)
 8018dcc:	f00c fcee 	bl	80257ac <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8018dd0:	687b      	ldr	r3, [r7, #4]
 8018dd2:	891b      	ldrh	r3, [r3, #8]
 8018dd4:	887a      	ldrh	r2, [r7, #2]
 8018dd6:	429a      	cmp	r2, r3
 8018dd8:	d263      	bcs.n	8018ea2 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8018dda:	687b      	ldr	r3, [r7, #4]
 8018ddc:	891a      	ldrh	r2, [r3, #8]
 8018dde:	887b      	ldrh	r3, [r7, #2]
 8018de0:	1ad3      	subs	r3, r2, r3
 8018de2:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8018de4:	887b      	ldrh	r3, [r7, #2]
 8018de6:	817b      	strh	r3, [r7, #10]
  q = p;
 8018de8:	687b      	ldr	r3, [r7, #4]
 8018dea:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8018dec:	e018      	b.n	8018e20 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8018dee:	68fb      	ldr	r3, [r7, #12]
 8018df0:	895b      	ldrh	r3, [r3, #10]
 8018df2:	897a      	ldrh	r2, [r7, #10]
 8018df4:	1ad3      	subs	r3, r2, r3
 8018df6:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8018df8:	68fb      	ldr	r3, [r7, #12]
 8018dfa:	891a      	ldrh	r2, [r3, #8]
 8018dfc:	893b      	ldrh	r3, [r7, #8]
 8018dfe:	1ad3      	subs	r3, r2, r3
 8018e00:	b29a      	uxth	r2, r3
 8018e02:	68fb      	ldr	r3, [r7, #12]
 8018e04:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8018e06:	68fb      	ldr	r3, [r7, #12]
 8018e08:	681b      	ldr	r3, [r3, #0]
 8018e0a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8018e0c:	68fb      	ldr	r3, [r7, #12]
 8018e0e:	2b00      	cmp	r3, #0
 8018e10:	d106      	bne.n	8018e20 <pbuf_realloc+0x70>
 8018e12:	4b26      	ldr	r3, [pc, #152]	; (8018eac <pbuf_realloc+0xfc>)
 8018e14:	f240 12af 	movw	r2, #431	; 0x1af
 8018e18:	4927      	ldr	r1, [pc, #156]	; (8018eb8 <pbuf_realloc+0x108>)
 8018e1a:	4826      	ldr	r0, [pc, #152]	; (8018eb4 <pbuf_realloc+0x104>)
 8018e1c:	f00c fcc6 	bl	80257ac <iprintf>
  while (rem_len > q->len) {
 8018e20:	68fb      	ldr	r3, [r7, #12]
 8018e22:	895b      	ldrh	r3, [r3, #10]
 8018e24:	897a      	ldrh	r2, [r7, #10]
 8018e26:	429a      	cmp	r2, r3
 8018e28:	d8e1      	bhi.n	8018dee <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8018e2a:	68fb      	ldr	r3, [r7, #12]
 8018e2c:	7b1b      	ldrb	r3, [r3, #12]
 8018e2e:	f003 030f 	and.w	r3, r3, #15
 8018e32:	2b00      	cmp	r3, #0
 8018e34:	d121      	bne.n	8018e7a <pbuf_realloc+0xca>
 8018e36:	68fb      	ldr	r3, [r7, #12]
 8018e38:	895b      	ldrh	r3, [r3, #10]
 8018e3a:	897a      	ldrh	r2, [r7, #10]
 8018e3c:	429a      	cmp	r2, r3
 8018e3e:	d01c      	beq.n	8018e7a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8018e40:	68fb      	ldr	r3, [r7, #12]
 8018e42:	7b5b      	ldrb	r3, [r3, #13]
 8018e44:	f003 0302 	and.w	r3, r3, #2
 8018e48:	2b00      	cmp	r3, #0
 8018e4a:	d116      	bne.n	8018e7a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8018e4c:	68fb      	ldr	r3, [r7, #12]
 8018e4e:	685a      	ldr	r2, [r3, #4]
 8018e50:	68fb      	ldr	r3, [r7, #12]
 8018e52:	1ad3      	subs	r3, r2, r3
 8018e54:	b29a      	uxth	r2, r3
 8018e56:	897b      	ldrh	r3, [r7, #10]
 8018e58:	4413      	add	r3, r2
 8018e5a:	b29b      	uxth	r3, r3
 8018e5c:	4619      	mov	r1, r3
 8018e5e:	68f8      	ldr	r0, [r7, #12]
 8018e60:	f7fe ff76 	bl	8017d50 <mem_trim>
 8018e64:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8018e66:	68fb      	ldr	r3, [r7, #12]
 8018e68:	2b00      	cmp	r3, #0
 8018e6a:	d106      	bne.n	8018e7a <pbuf_realloc+0xca>
 8018e6c:	4b0f      	ldr	r3, [pc, #60]	; (8018eac <pbuf_realloc+0xfc>)
 8018e6e:	f240 12bd 	movw	r2, #445	; 0x1bd
 8018e72:	4912      	ldr	r1, [pc, #72]	; (8018ebc <pbuf_realloc+0x10c>)
 8018e74:	480f      	ldr	r0, [pc, #60]	; (8018eb4 <pbuf_realloc+0x104>)
 8018e76:	f00c fc99 	bl	80257ac <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8018e7a:	68fb      	ldr	r3, [r7, #12]
 8018e7c:	897a      	ldrh	r2, [r7, #10]
 8018e7e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8018e80:	68fb      	ldr	r3, [r7, #12]
 8018e82:	895a      	ldrh	r2, [r3, #10]
 8018e84:	68fb      	ldr	r3, [r7, #12]
 8018e86:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8018e88:	68fb      	ldr	r3, [r7, #12]
 8018e8a:	681b      	ldr	r3, [r3, #0]
 8018e8c:	2b00      	cmp	r3, #0
 8018e8e:	d004      	beq.n	8018e9a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8018e90:	68fb      	ldr	r3, [r7, #12]
 8018e92:	681b      	ldr	r3, [r3, #0]
 8018e94:	4618      	mov	r0, r3
 8018e96:	f000 f911 	bl	80190bc <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8018e9a:	68fb      	ldr	r3, [r7, #12]
 8018e9c:	2200      	movs	r2, #0
 8018e9e:	601a      	str	r2, [r3, #0]
 8018ea0:	e000      	b.n	8018ea4 <pbuf_realloc+0xf4>
    return;
 8018ea2:	bf00      	nop

}
 8018ea4:	3710      	adds	r7, #16
 8018ea6:	46bd      	mov	sp, r7
 8018ea8:	bd80      	pop	{r7, pc}
 8018eaa:	bf00      	nop
 8018eac:	0802ba38 	.word	0x0802ba38
 8018eb0:	0802bb50 	.word	0x0802bb50
 8018eb4:	0802ba98 	.word	0x0802ba98
 8018eb8:	0802bb68 	.word	0x0802bb68
 8018ebc:	0802bb80 	.word	0x0802bb80

08018ec0 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8018ec0:	b580      	push	{r7, lr}
 8018ec2:	b086      	sub	sp, #24
 8018ec4:	af00      	add	r7, sp, #0
 8018ec6:	60f8      	str	r0, [r7, #12]
 8018ec8:	60b9      	str	r1, [r7, #8]
 8018eca:	4613      	mov	r3, r2
 8018ecc:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8018ece:	68fb      	ldr	r3, [r7, #12]
 8018ed0:	2b00      	cmp	r3, #0
 8018ed2:	d106      	bne.n	8018ee2 <pbuf_add_header_impl+0x22>
 8018ed4:	4b2b      	ldr	r3, [pc, #172]	; (8018f84 <pbuf_add_header_impl+0xc4>)
 8018ed6:	f240 12df 	movw	r2, #479	; 0x1df
 8018eda:	492b      	ldr	r1, [pc, #172]	; (8018f88 <pbuf_add_header_impl+0xc8>)
 8018edc:	482b      	ldr	r0, [pc, #172]	; (8018f8c <pbuf_add_header_impl+0xcc>)
 8018ede:	f00c fc65 	bl	80257ac <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8018ee2:	68fb      	ldr	r3, [r7, #12]
 8018ee4:	2b00      	cmp	r3, #0
 8018ee6:	d003      	beq.n	8018ef0 <pbuf_add_header_impl+0x30>
 8018ee8:	68bb      	ldr	r3, [r7, #8]
 8018eea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018eee:	d301      	bcc.n	8018ef4 <pbuf_add_header_impl+0x34>
    return 1;
 8018ef0:	2301      	movs	r3, #1
 8018ef2:	e043      	b.n	8018f7c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8018ef4:	68bb      	ldr	r3, [r7, #8]
 8018ef6:	2b00      	cmp	r3, #0
 8018ef8:	d101      	bne.n	8018efe <pbuf_add_header_impl+0x3e>
    return 0;
 8018efa:	2300      	movs	r3, #0
 8018efc:	e03e      	b.n	8018f7c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8018efe:	68bb      	ldr	r3, [r7, #8]
 8018f00:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8018f02:	68fb      	ldr	r3, [r7, #12]
 8018f04:	891a      	ldrh	r2, [r3, #8]
 8018f06:	8a7b      	ldrh	r3, [r7, #18]
 8018f08:	4413      	add	r3, r2
 8018f0a:	b29b      	uxth	r3, r3
 8018f0c:	8a7a      	ldrh	r2, [r7, #18]
 8018f0e:	429a      	cmp	r2, r3
 8018f10:	d901      	bls.n	8018f16 <pbuf_add_header_impl+0x56>
    return 1;
 8018f12:	2301      	movs	r3, #1
 8018f14:	e032      	b.n	8018f7c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8018f16:	68fb      	ldr	r3, [r7, #12]
 8018f18:	7b1b      	ldrb	r3, [r3, #12]
 8018f1a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8018f1c:	8a3b      	ldrh	r3, [r7, #16]
 8018f1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018f22:	2b00      	cmp	r3, #0
 8018f24:	d00c      	beq.n	8018f40 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8018f26:	68fb      	ldr	r3, [r7, #12]
 8018f28:	685a      	ldr	r2, [r3, #4]
 8018f2a:	68bb      	ldr	r3, [r7, #8]
 8018f2c:	425b      	negs	r3, r3
 8018f2e:	4413      	add	r3, r2
 8018f30:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8018f32:	68fb      	ldr	r3, [r7, #12]
 8018f34:	3310      	adds	r3, #16
 8018f36:	697a      	ldr	r2, [r7, #20]
 8018f38:	429a      	cmp	r2, r3
 8018f3a:	d20d      	bcs.n	8018f58 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8018f3c:	2301      	movs	r3, #1
 8018f3e:	e01d      	b.n	8018f7c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8018f40:	79fb      	ldrb	r3, [r7, #7]
 8018f42:	2b00      	cmp	r3, #0
 8018f44:	d006      	beq.n	8018f54 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8018f46:	68fb      	ldr	r3, [r7, #12]
 8018f48:	685a      	ldr	r2, [r3, #4]
 8018f4a:	68bb      	ldr	r3, [r7, #8]
 8018f4c:	425b      	negs	r3, r3
 8018f4e:	4413      	add	r3, r2
 8018f50:	617b      	str	r3, [r7, #20]
 8018f52:	e001      	b.n	8018f58 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8018f54:	2301      	movs	r3, #1
 8018f56:	e011      	b.n	8018f7c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8018f58:	68fb      	ldr	r3, [r7, #12]
 8018f5a:	697a      	ldr	r2, [r7, #20]
 8018f5c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8018f5e:	68fb      	ldr	r3, [r7, #12]
 8018f60:	895a      	ldrh	r2, [r3, #10]
 8018f62:	8a7b      	ldrh	r3, [r7, #18]
 8018f64:	4413      	add	r3, r2
 8018f66:	b29a      	uxth	r2, r3
 8018f68:	68fb      	ldr	r3, [r7, #12]
 8018f6a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8018f6c:	68fb      	ldr	r3, [r7, #12]
 8018f6e:	891a      	ldrh	r2, [r3, #8]
 8018f70:	8a7b      	ldrh	r3, [r7, #18]
 8018f72:	4413      	add	r3, r2
 8018f74:	b29a      	uxth	r2, r3
 8018f76:	68fb      	ldr	r3, [r7, #12]
 8018f78:	811a      	strh	r2, [r3, #8]


  return 0;
 8018f7a:	2300      	movs	r3, #0
}
 8018f7c:	4618      	mov	r0, r3
 8018f7e:	3718      	adds	r7, #24
 8018f80:	46bd      	mov	sp, r7
 8018f82:	bd80      	pop	{r7, pc}
 8018f84:	0802ba38 	.word	0x0802ba38
 8018f88:	0802bb9c 	.word	0x0802bb9c
 8018f8c:	0802ba98 	.word	0x0802ba98

08018f90 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8018f90:	b580      	push	{r7, lr}
 8018f92:	b082      	sub	sp, #8
 8018f94:	af00      	add	r7, sp, #0
 8018f96:	6078      	str	r0, [r7, #4]
 8018f98:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8018f9a:	2200      	movs	r2, #0
 8018f9c:	6839      	ldr	r1, [r7, #0]
 8018f9e:	6878      	ldr	r0, [r7, #4]
 8018fa0:	f7ff ff8e 	bl	8018ec0 <pbuf_add_header_impl>
 8018fa4:	4603      	mov	r3, r0
}
 8018fa6:	4618      	mov	r0, r3
 8018fa8:	3708      	adds	r7, #8
 8018faa:	46bd      	mov	sp, r7
 8018fac:	bd80      	pop	{r7, pc}
	...

08018fb0 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8018fb0:	b580      	push	{r7, lr}
 8018fb2:	b084      	sub	sp, #16
 8018fb4:	af00      	add	r7, sp, #0
 8018fb6:	6078      	str	r0, [r7, #4]
 8018fb8:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8018fba:	687b      	ldr	r3, [r7, #4]
 8018fbc:	2b00      	cmp	r3, #0
 8018fbe:	d106      	bne.n	8018fce <pbuf_remove_header+0x1e>
 8018fc0:	4b20      	ldr	r3, [pc, #128]	; (8019044 <pbuf_remove_header+0x94>)
 8018fc2:	f240 224b 	movw	r2, #587	; 0x24b
 8018fc6:	4920      	ldr	r1, [pc, #128]	; (8019048 <pbuf_remove_header+0x98>)
 8018fc8:	4820      	ldr	r0, [pc, #128]	; (801904c <pbuf_remove_header+0x9c>)
 8018fca:	f00c fbef 	bl	80257ac <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8018fce:	687b      	ldr	r3, [r7, #4]
 8018fd0:	2b00      	cmp	r3, #0
 8018fd2:	d003      	beq.n	8018fdc <pbuf_remove_header+0x2c>
 8018fd4:	683b      	ldr	r3, [r7, #0]
 8018fd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018fda:	d301      	bcc.n	8018fe0 <pbuf_remove_header+0x30>
    return 1;
 8018fdc:	2301      	movs	r3, #1
 8018fde:	e02c      	b.n	801903a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8018fe0:	683b      	ldr	r3, [r7, #0]
 8018fe2:	2b00      	cmp	r3, #0
 8018fe4:	d101      	bne.n	8018fea <pbuf_remove_header+0x3a>
    return 0;
 8018fe6:	2300      	movs	r3, #0
 8018fe8:	e027      	b.n	801903a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8018fea:	683b      	ldr	r3, [r7, #0]
 8018fec:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8018fee:	687b      	ldr	r3, [r7, #4]
 8018ff0:	895b      	ldrh	r3, [r3, #10]
 8018ff2:	89fa      	ldrh	r2, [r7, #14]
 8018ff4:	429a      	cmp	r2, r3
 8018ff6:	d908      	bls.n	801900a <pbuf_remove_header+0x5a>
 8018ff8:	4b12      	ldr	r3, [pc, #72]	; (8019044 <pbuf_remove_header+0x94>)
 8018ffa:	f240 2255 	movw	r2, #597	; 0x255
 8018ffe:	4914      	ldr	r1, [pc, #80]	; (8019050 <pbuf_remove_header+0xa0>)
 8019000:	4812      	ldr	r0, [pc, #72]	; (801904c <pbuf_remove_header+0x9c>)
 8019002:	f00c fbd3 	bl	80257ac <iprintf>
 8019006:	2301      	movs	r3, #1
 8019008:	e017      	b.n	801903a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 801900a:	687b      	ldr	r3, [r7, #4]
 801900c:	685b      	ldr	r3, [r3, #4]
 801900e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8019010:	687b      	ldr	r3, [r7, #4]
 8019012:	685a      	ldr	r2, [r3, #4]
 8019014:	683b      	ldr	r3, [r7, #0]
 8019016:	441a      	add	r2, r3
 8019018:	687b      	ldr	r3, [r7, #4]
 801901a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 801901c:	687b      	ldr	r3, [r7, #4]
 801901e:	895a      	ldrh	r2, [r3, #10]
 8019020:	89fb      	ldrh	r3, [r7, #14]
 8019022:	1ad3      	subs	r3, r2, r3
 8019024:	b29a      	uxth	r2, r3
 8019026:	687b      	ldr	r3, [r7, #4]
 8019028:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801902a:	687b      	ldr	r3, [r7, #4]
 801902c:	891a      	ldrh	r2, [r3, #8]
 801902e:	89fb      	ldrh	r3, [r7, #14]
 8019030:	1ad3      	subs	r3, r2, r3
 8019032:	b29a      	uxth	r2, r3
 8019034:	687b      	ldr	r3, [r7, #4]
 8019036:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8019038:	2300      	movs	r3, #0
}
 801903a:	4618      	mov	r0, r3
 801903c:	3710      	adds	r7, #16
 801903e:	46bd      	mov	sp, r7
 8019040:	bd80      	pop	{r7, pc}
 8019042:	bf00      	nop
 8019044:	0802ba38 	.word	0x0802ba38
 8019048:	0802bb9c 	.word	0x0802bb9c
 801904c:	0802ba98 	.word	0x0802ba98
 8019050:	0802bba8 	.word	0x0802bba8

08019054 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8019054:	b580      	push	{r7, lr}
 8019056:	b082      	sub	sp, #8
 8019058:	af00      	add	r7, sp, #0
 801905a:	6078      	str	r0, [r7, #4]
 801905c:	460b      	mov	r3, r1
 801905e:	807b      	strh	r3, [r7, #2]
 8019060:	4613      	mov	r3, r2
 8019062:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8019064:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8019068:	2b00      	cmp	r3, #0
 801906a:	da08      	bge.n	801907e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 801906c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8019070:	425b      	negs	r3, r3
 8019072:	4619      	mov	r1, r3
 8019074:	6878      	ldr	r0, [r7, #4]
 8019076:	f7ff ff9b 	bl	8018fb0 <pbuf_remove_header>
 801907a:	4603      	mov	r3, r0
 801907c:	e007      	b.n	801908e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 801907e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8019082:	787a      	ldrb	r2, [r7, #1]
 8019084:	4619      	mov	r1, r3
 8019086:	6878      	ldr	r0, [r7, #4]
 8019088:	f7ff ff1a 	bl	8018ec0 <pbuf_add_header_impl>
 801908c:	4603      	mov	r3, r0
  }
}
 801908e:	4618      	mov	r0, r3
 8019090:	3708      	adds	r7, #8
 8019092:	46bd      	mov	sp, r7
 8019094:	bd80      	pop	{r7, pc}

08019096 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8019096:	b580      	push	{r7, lr}
 8019098:	b082      	sub	sp, #8
 801909a:	af00      	add	r7, sp, #0
 801909c:	6078      	str	r0, [r7, #4]
 801909e:	460b      	mov	r3, r1
 80190a0:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80190a2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80190a6:	2201      	movs	r2, #1
 80190a8:	4619      	mov	r1, r3
 80190aa:	6878      	ldr	r0, [r7, #4]
 80190ac:	f7ff ffd2 	bl	8019054 <pbuf_header_impl>
 80190b0:	4603      	mov	r3, r0
}
 80190b2:	4618      	mov	r0, r3
 80190b4:	3708      	adds	r7, #8
 80190b6:	46bd      	mov	sp, r7
 80190b8:	bd80      	pop	{r7, pc}
	...

080190bc <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80190bc:	b580      	push	{r7, lr}
 80190be:	b088      	sub	sp, #32
 80190c0:	af00      	add	r7, sp, #0
 80190c2:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80190c4:	687b      	ldr	r3, [r7, #4]
 80190c6:	2b00      	cmp	r3, #0
 80190c8:	d10b      	bne.n	80190e2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80190ca:	687b      	ldr	r3, [r7, #4]
 80190cc:	2b00      	cmp	r3, #0
 80190ce:	d106      	bne.n	80190de <pbuf_free+0x22>
 80190d0:	4b3b      	ldr	r3, [pc, #236]	; (80191c0 <pbuf_free+0x104>)
 80190d2:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80190d6:	493b      	ldr	r1, [pc, #236]	; (80191c4 <pbuf_free+0x108>)
 80190d8:	483b      	ldr	r0, [pc, #236]	; (80191c8 <pbuf_free+0x10c>)
 80190da:	f00c fb67 	bl	80257ac <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80190de:	2300      	movs	r3, #0
 80190e0:	e069      	b.n	80191b6 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80190e2:	2300      	movs	r3, #0
 80190e4:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80190e6:	e062      	b.n	80191ae <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 80190e8:	f00b fc14 	bl	8024914 <sys_arch_protect>
 80190ec:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80190ee:	687b      	ldr	r3, [r7, #4]
 80190f0:	7b9b      	ldrb	r3, [r3, #14]
 80190f2:	2b00      	cmp	r3, #0
 80190f4:	d106      	bne.n	8019104 <pbuf_free+0x48>
 80190f6:	4b32      	ldr	r3, [pc, #200]	; (80191c0 <pbuf_free+0x104>)
 80190f8:	f240 22f1 	movw	r2, #753	; 0x2f1
 80190fc:	4933      	ldr	r1, [pc, #204]	; (80191cc <pbuf_free+0x110>)
 80190fe:	4832      	ldr	r0, [pc, #200]	; (80191c8 <pbuf_free+0x10c>)
 8019100:	f00c fb54 	bl	80257ac <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8019104:	687b      	ldr	r3, [r7, #4]
 8019106:	7b9b      	ldrb	r3, [r3, #14]
 8019108:	3b01      	subs	r3, #1
 801910a:	b2da      	uxtb	r2, r3
 801910c:	687b      	ldr	r3, [r7, #4]
 801910e:	739a      	strb	r2, [r3, #14]
 8019110:	687b      	ldr	r3, [r7, #4]
 8019112:	7b9b      	ldrb	r3, [r3, #14]
 8019114:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8019116:	69b8      	ldr	r0, [r7, #24]
 8019118:	f00b fc0a 	bl	8024930 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 801911c:	7dfb      	ldrb	r3, [r7, #23]
 801911e:	2b00      	cmp	r3, #0
 8019120:	d143      	bne.n	80191aa <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8019122:	687b      	ldr	r3, [r7, #4]
 8019124:	681b      	ldr	r3, [r3, #0]
 8019126:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8019128:	687b      	ldr	r3, [r7, #4]
 801912a:	7b1b      	ldrb	r3, [r3, #12]
 801912c:	f003 030f 	and.w	r3, r3, #15
 8019130:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8019132:	687b      	ldr	r3, [r7, #4]
 8019134:	7b5b      	ldrb	r3, [r3, #13]
 8019136:	f003 0302 	and.w	r3, r3, #2
 801913a:	2b00      	cmp	r3, #0
 801913c:	d011      	beq.n	8019162 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 801913e:	687b      	ldr	r3, [r7, #4]
 8019140:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8019142:	68bb      	ldr	r3, [r7, #8]
 8019144:	691b      	ldr	r3, [r3, #16]
 8019146:	2b00      	cmp	r3, #0
 8019148:	d106      	bne.n	8019158 <pbuf_free+0x9c>
 801914a:	4b1d      	ldr	r3, [pc, #116]	; (80191c0 <pbuf_free+0x104>)
 801914c:	f240 22ff 	movw	r2, #767	; 0x2ff
 8019150:	491f      	ldr	r1, [pc, #124]	; (80191d0 <pbuf_free+0x114>)
 8019152:	481d      	ldr	r0, [pc, #116]	; (80191c8 <pbuf_free+0x10c>)
 8019154:	f00c fb2a 	bl	80257ac <iprintf>
        pc->custom_free_function(p);
 8019158:	68bb      	ldr	r3, [r7, #8]
 801915a:	691b      	ldr	r3, [r3, #16]
 801915c:	6878      	ldr	r0, [r7, #4]
 801915e:	4798      	blx	r3
 8019160:	e01d      	b.n	801919e <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8019162:	7bfb      	ldrb	r3, [r7, #15]
 8019164:	2b02      	cmp	r3, #2
 8019166:	d104      	bne.n	8019172 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8019168:	6879      	ldr	r1, [r7, #4]
 801916a:	200c      	movs	r0, #12
 801916c:	f7ff f8f6 	bl	801835c <memp_free>
 8019170:	e015      	b.n	801919e <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8019172:	7bfb      	ldrb	r3, [r7, #15]
 8019174:	2b01      	cmp	r3, #1
 8019176:	d104      	bne.n	8019182 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8019178:	6879      	ldr	r1, [r7, #4]
 801917a:	200b      	movs	r0, #11
 801917c:	f7ff f8ee 	bl	801835c <memp_free>
 8019180:	e00d      	b.n	801919e <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8019182:	7bfb      	ldrb	r3, [r7, #15]
 8019184:	2b00      	cmp	r3, #0
 8019186:	d103      	bne.n	8019190 <pbuf_free+0xd4>
          mem_free(p);
 8019188:	6878      	ldr	r0, [r7, #4]
 801918a:	f7fe fd51 	bl	8017c30 <mem_free>
 801918e:	e006      	b.n	801919e <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8019190:	4b0b      	ldr	r3, [pc, #44]	; (80191c0 <pbuf_free+0x104>)
 8019192:	f240 320f 	movw	r2, #783	; 0x30f
 8019196:	490f      	ldr	r1, [pc, #60]	; (80191d4 <pbuf_free+0x118>)
 8019198:	480b      	ldr	r0, [pc, #44]	; (80191c8 <pbuf_free+0x10c>)
 801919a:	f00c fb07 	bl	80257ac <iprintf>
        }
      }
      count++;
 801919e:	7ffb      	ldrb	r3, [r7, #31]
 80191a0:	3301      	adds	r3, #1
 80191a2:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 80191a4:	693b      	ldr	r3, [r7, #16]
 80191a6:	607b      	str	r3, [r7, #4]
 80191a8:	e001      	b.n	80191ae <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80191aa:	2300      	movs	r3, #0
 80191ac:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80191ae:	687b      	ldr	r3, [r7, #4]
 80191b0:	2b00      	cmp	r3, #0
 80191b2:	d199      	bne.n	80190e8 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80191b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80191b6:	4618      	mov	r0, r3
 80191b8:	3720      	adds	r7, #32
 80191ba:	46bd      	mov	sp, r7
 80191bc:	bd80      	pop	{r7, pc}
 80191be:	bf00      	nop
 80191c0:	0802ba38 	.word	0x0802ba38
 80191c4:	0802bb9c 	.word	0x0802bb9c
 80191c8:	0802ba98 	.word	0x0802ba98
 80191cc:	0802bbc8 	.word	0x0802bbc8
 80191d0:	0802bbe0 	.word	0x0802bbe0
 80191d4:	0802bc04 	.word	0x0802bc04

080191d8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80191d8:	b480      	push	{r7}
 80191da:	b085      	sub	sp, #20
 80191dc:	af00      	add	r7, sp, #0
 80191de:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80191e0:	2300      	movs	r3, #0
 80191e2:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80191e4:	e005      	b.n	80191f2 <pbuf_clen+0x1a>
    ++len;
 80191e6:	89fb      	ldrh	r3, [r7, #14]
 80191e8:	3301      	adds	r3, #1
 80191ea:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80191ec:	687b      	ldr	r3, [r7, #4]
 80191ee:	681b      	ldr	r3, [r3, #0]
 80191f0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80191f2:	687b      	ldr	r3, [r7, #4]
 80191f4:	2b00      	cmp	r3, #0
 80191f6:	d1f6      	bne.n	80191e6 <pbuf_clen+0xe>
  }
  return len;
 80191f8:	89fb      	ldrh	r3, [r7, #14]
}
 80191fa:	4618      	mov	r0, r3
 80191fc:	3714      	adds	r7, #20
 80191fe:	46bd      	mov	sp, r7
 8019200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019204:	4770      	bx	lr
	...

08019208 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8019208:	b580      	push	{r7, lr}
 801920a:	b084      	sub	sp, #16
 801920c:	af00      	add	r7, sp, #0
 801920e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8019210:	687b      	ldr	r3, [r7, #4]
 8019212:	2b00      	cmp	r3, #0
 8019214:	d016      	beq.n	8019244 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8019216:	f00b fb7d 	bl	8024914 <sys_arch_protect>
 801921a:	60f8      	str	r0, [r7, #12]
 801921c:	687b      	ldr	r3, [r7, #4]
 801921e:	7b9b      	ldrb	r3, [r3, #14]
 8019220:	3301      	adds	r3, #1
 8019222:	b2da      	uxtb	r2, r3
 8019224:	687b      	ldr	r3, [r7, #4]
 8019226:	739a      	strb	r2, [r3, #14]
 8019228:	68f8      	ldr	r0, [r7, #12]
 801922a:	f00b fb81 	bl	8024930 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801922e:	687b      	ldr	r3, [r7, #4]
 8019230:	7b9b      	ldrb	r3, [r3, #14]
 8019232:	2b00      	cmp	r3, #0
 8019234:	d106      	bne.n	8019244 <pbuf_ref+0x3c>
 8019236:	4b05      	ldr	r3, [pc, #20]	; (801924c <pbuf_ref+0x44>)
 8019238:	f240 3242 	movw	r2, #834	; 0x342
 801923c:	4904      	ldr	r1, [pc, #16]	; (8019250 <pbuf_ref+0x48>)
 801923e:	4805      	ldr	r0, [pc, #20]	; (8019254 <pbuf_ref+0x4c>)
 8019240:	f00c fab4 	bl	80257ac <iprintf>
  }
}
 8019244:	bf00      	nop
 8019246:	3710      	adds	r7, #16
 8019248:	46bd      	mov	sp, r7
 801924a:	bd80      	pop	{r7, pc}
 801924c:	0802ba38 	.word	0x0802ba38
 8019250:	0802bc18 	.word	0x0802bc18
 8019254:	0802ba98 	.word	0x0802ba98

08019258 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8019258:	b580      	push	{r7, lr}
 801925a:	b084      	sub	sp, #16
 801925c:	af00      	add	r7, sp, #0
 801925e:	6078      	str	r0, [r7, #4]
 8019260:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8019262:	687b      	ldr	r3, [r7, #4]
 8019264:	2b00      	cmp	r3, #0
 8019266:	d002      	beq.n	801926e <pbuf_cat+0x16>
 8019268:	683b      	ldr	r3, [r7, #0]
 801926a:	2b00      	cmp	r3, #0
 801926c:	d107      	bne.n	801927e <pbuf_cat+0x26>
 801926e:	4b20      	ldr	r3, [pc, #128]	; (80192f0 <pbuf_cat+0x98>)
 8019270:	f240 3259 	movw	r2, #857	; 0x359
 8019274:	491f      	ldr	r1, [pc, #124]	; (80192f4 <pbuf_cat+0x9c>)
 8019276:	4820      	ldr	r0, [pc, #128]	; (80192f8 <pbuf_cat+0xa0>)
 8019278:	f00c fa98 	bl	80257ac <iprintf>
 801927c:	e034      	b.n	80192e8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 801927e:	687b      	ldr	r3, [r7, #4]
 8019280:	60fb      	str	r3, [r7, #12]
 8019282:	e00a      	b.n	801929a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8019284:	68fb      	ldr	r3, [r7, #12]
 8019286:	891a      	ldrh	r2, [r3, #8]
 8019288:	683b      	ldr	r3, [r7, #0]
 801928a:	891b      	ldrh	r3, [r3, #8]
 801928c:	4413      	add	r3, r2
 801928e:	b29a      	uxth	r2, r3
 8019290:	68fb      	ldr	r3, [r7, #12]
 8019292:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8019294:	68fb      	ldr	r3, [r7, #12]
 8019296:	681b      	ldr	r3, [r3, #0]
 8019298:	60fb      	str	r3, [r7, #12]
 801929a:	68fb      	ldr	r3, [r7, #12]
 801929c:	681b      	ldr	r3, [r3, #0]
 801929e:	2b00      	cmp	r3, #0
 80192a0:	d1f0      	bne.n	8019284 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80192a2:	68fb      	ldr	r3, [r7, #12]
 80192a4:	891a      	ldrh	r2, [r3, #8]
 80192a6:	68fb      	ldr	r3, [r7, #12]
 80192a8:	895b      	ldrh	r3, [r3, #10]
 80192aa:	429a      	cmp	r2, r3
 80192ac:	d006      	beq.n	80192bc <pbuf_cat+0x64>
 80192ae:	4b10      	ldr	r3, [pc, #64]	; (80192f0 <pbuf_cat+0x98>)
 80192b0:	f240 3262 	movw	r2, #866	; 0x362
 80192b4:	4911      	ldr	r1, [pc, #68]	; (80192fc <pbuf_cat+0xa4>)
 80192b6:	4810      	ldr	r0, [pc, #64]	; (80192f8 <pbuf_cat+0xa0>)
 80192b8:	f00c fa78 	bl	80257ac <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80192bc:	68fb      	ldr	r3, [r7, #12]
 80192be:	681b      	ldr	r3, [r3, #0]
 80192c0:	2b00      	cmp	r3, #0
 80192c2:	d006      	beq.n	80192d2 <pbuf_cat+0x7a>
 80192c4:	4b0a      	ldr	r3, [pc, #40]	; (80192f0 <pbuf_cat+0x98>)
 80192c6:	f240 3263 	movw	r2, #867	; 0x363
 80192ca:	490d      	ldr	r1, [pc, #52]	; (8019300 <pbuf_cat+0xa8>)
 80192cc:	480a      	ldr	r0, [pc, #40]	; (80192f8 <pbuf_cat+0xa0>)
 80192ce:	f00c fa6d 	bl	80257ac <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80192d2:	68fb      	ldr	r3, [r7, #12]
 80192d4:	891a      	ldrh	r2, [r3, #8]
 80192d6:	683b      	ldr	r3, [r7, #0]
 80192d8:	891b      	ldrh	r3, [r3, #8]
 80192da:	4413      	add	r3, r2
 80192dc:	b29a      	uxth	r2, r3
 80192de:	68fb      	ldr	r3, [r7, #12]
 80192e0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80192e2:	68fb      	ldr	r3, [r7, #12]
 80192e4:	683a      	ldr	r2, [r7, #0]
 80192e6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80192e8:	3710      	adds	r7, #16
 80192ea:	46bd      	mov	sp, r7
 80192ec:	bd80      	pop	{r7, pc}
 80192ee:	bf00      	nop
 80192f0:	0802ba38 	.word	0x0802ba38
 80192f4:	0802bc2c 	.word	0x0802bc2c
 80192f8:	0802ba98 	.word	0x0802ba98
 80192fc:	0802bc64 	.word	0x0802bc64
 8019300:	0802bc94 	.word	0x0802bc94

08019304 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8019304:	b580      	push	{r7, lr}
 8019306:	b082      	sub	sp, #8
 8019308:	af00      	add	r7, sp, #0
 801930a:	6078      	str	r0, [r7, #4]
 801930c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 801930e:	6839      	ldr	r1, [r7, #0]
 8019310:	6878      	ldr	r0, [r7, #4]
 8019312:	f7ff ffa1 	bl	8019258 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8019316:	6838      	ldr	r0, [r7, #0]
 8019318:	f7ff ff76 	bl	8019208 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 801931c:	bf00      	nop
 801931e:	3708      	adds	r7, #8
 8019320:	46bd      	mov	sp, r7
 8019322:	bd80      	pop	{r7, pc}

08019324 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8019324:	b580      	push	{r7, lr}
 8019326:	b086      	sub	sp, #24
 8019328:	af00      	add	r7, sp, #0
 801932a:	6078      	str	r0, [r7, #4]
 801932c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 801932e:	2300      	movs	r3, #0
 8019330:	617b      	str	r3, [r7, #20]
 8019332:	2300      	movs	r3, #0
 8019334:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8019336:	687b      	ldr	r3, [r7, #4]
 8019338:	2b00      	cmp	r3, #0
 801933a:	d008      	beq.n	801934e <pbuf_copy+0x2a>
 801933c:	683b      	ldr	r3, [r7, #0]
 801933e:	2b00      	cmp	r3, #0
 8019340:	d005      	beq.n	801934e <pbuf_copy+0x2a>
 8019342:	687b      	ldr	r3, [r7, #4]
 8019344:	891a      	ldrh	r2, [r3, #8]
 8019346:	683b      	ldr	r3, [r7, #0]
 8019348:	891b      	ldrh	r3, [r3, #8]
 801934a:	429a      	cmp	r2, r3
 801934c:	d209      	bcs.n	8019362 <pbuf_copy+0x3e>
 801934e:	4b57      	ldr	r3, [pc, #348]	; (80194ac <pbuf_copy+0x188>)
 8019350:	f240 32c9 	movw	r2, #969	; 0x3c9
 8019354:	4956      	ldr	r1, [pc, #344]	; (80194b0 <pbuf_copy+0x18c>)
 8019356:	4857      	ldr	r0, [pc, #348]	; (80194b4 <pbuf_copy+0x190>)
 8019358:	f00c fa28 	bl	80257ac <iprintf>
 801935c:	f06f 030f 	mvn.w	r3, #15
 8019360:	e09f      	b.n	80194a2 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8019362:	687b      	ldr	r3, [r7, #4]
 8019364:	895b      	ldrh	r3, [r3, #10]
 8019366:	461a      	mov	r2, r3
 8019368:	697b      	ldr	r3, [r7, #20]
 801936a:	1ad2      	subs	r2, r2, r3
 801936c:	683b      	ldr	r3, [r7, #0]
 801936e:	895b      	ldrh	r3, [r3, #10]
 8019370:	4619      	mov	r1, r3
 8019372:	693b      	ldr	r3, [r7, #16]
 8019374:	1acb      	subs	r3, r1, r3
 8019376:	429a      	cmp	r2, r3
 8019378:	d306      	bcc.n	8019388 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 801937a:	683b      	ldr	r3, [r7, #0]
 801937c:	895b      	ldrh	r3, [r3, #10]
 801937e:	461a      	mov	r2, r3
 8019380:	693b      	ldr	r3, [r7, #16]
 8019382:	1ad3      	subs	r3, r2, r3
 8019384:	60fb      	str	r3, [r7, #12]
 8019386:	e005      	b.n	8019394 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8019388:	687b      	ldr	r3, [r7, #4]
 801938a:	895b      	ldrh	r3, [r3, #10]
 801938c:	461a      	mov	r2, r3
 801938e:	697b      	ldr	r3, [r7, #20]
 8019390:	1ad3      	subs	r3, r2, r3
 8019392:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8019394:	687b      	ldr	r3, [r7, #4]
 8019396:	685a      	ldr	r2, [r3, #4]
 8019398:	697b      	ldr	r3, [r7, #20]
 801939a:	18d0      	adds	r0, r2, r3
 801939c:	683b      	ldr	r3, [r7, #0]
 801939e:	685a      	ldr	r2, [r3, #4]
 80193a0:	693b      	ldr	r3, [r7, #16]
 80193a2:	4413      	add	r3, r2
 80193a4:	68fa      	ldr	r2, [r7, #12]
 80193a6:	4619      	mov	r1, r3
 80193a8:	f00b fb2c 	bl	8024a04 <memcpy>
    offset_to += len;
 80193ac:	697a      	ldr	r2, [r7, #20]
 80193ae:	68fb      	ldr	r3, [r7, #12]
 80193b0:	4413      	add	r3, r2
 80193b2:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80193b4:	693a      	ldr	r2, [r7, #16]
 80193b6:	68fb      	ldr	r3, [r7, #12]
 80193b8:	4413      	add	r3, r2
 80193ba:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80193bc:	687b      	ldr	r3, [r7, #4]
 80193be:	895b      	ldrh	r3, [r3, #10]
 80193c0:	461a      	mov	r2, r3
 80193c2:	697b      	ldr	r3, [r7, #20]
 80193c4:	4293      	cmp	r3, r2
 80193c6:	d906      	bls.n	80193d6 <pbuf_copy+0xb2>
 80193c8:	4b38      	ldr	r3, [pc, #224]	; (80194ac <pbuf_copy+0x188>)
 80193ca:	f240 32d9 	movw	r2, #985	; 0x3d9
 80193ce:	493a      	ldr	r1, [pc, #232]	; (80194b8 <pbuf_copy+0x194>)
 80193d0:	4838      	ldr	r0, [pc, #224]	; (80194b4 <pbuf_copy+0x190>)
 80193d2:	f00c f9eb 	bl	80257ac <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80193d6:	683b      	ldr	r3, [r7, #0]
 80193d8:	895b      	ldrh	r3, [r3, #10]
 80193da:	461a      	mov	r2, r3
 80193dc:	693b      	ldr	r3, [r7, #16]
 80193de:	4293      	cmp	r3, r2
 80193e0:	d906      	bls.n	80193f0 <pbuf_copy+0xcc>
 80193e2:	4b32      	ldr	r3, [pc, #200]	; (80194ac <pbuf_copy+0x188>)
 80193e4:	f240 32da 	movw	r2, #986	; 0x3da
 80193e8:	4934      	ldr	r1, [pc, #208]	; (80194bc <pbuf_copy+0x198>)
 80193ea:	4832      	ldr	r0, [pc, #200]	; (80194b4 <pbuf_copy+0x190>)
 80193ec:	f00c f9de 	bl	80257ac <iprintf>
    if (offset_from >= p_from->len) {
 80193f0:	683b      	ldr	r3, [r7, #0]
 80193f2:	895b      	ldrh	r3, [r3, #10]
 80193f4:	461a      	mov	r2, r3
 80193f6:	693b      	ldr	r3, [r7, #16]
 80193f8:	4293      	cmp	r3, r2
 80193fa:	d304      	bcc.n	8019406 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80193fc:	2300      	movs	r3, #0
 80193fe:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8019400:	683b      	ldr	r3, [r7, #0]
 8019402:	681b      	ldr	r3, [r3, #0]
 8019404:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8019406:	687b      	ldr	r3, [r7, #4]
 8019408:	895b      	ldrh	r3, [r3, #10]
 801940a:	461a      	mov	r2, r3
 801940c:	697b      	ldr	r3, [r7, #20]
 801940e:	4293      	cmp	r3, r2
 8019410:	d114      	bne.n	801943c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8019412:	2300      	movs	r3, #0
 8019414:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8019416:	687b      	ldr	r3, [r7, #4]
 8019418:	681b      	ldr	r3, [r3, #0]
 801941a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 801941c:	687b      	ldr	r3, [r7, #4]
 801941e:	2b00      	cmp	r3, #0
 8019420:	d10c      	bne.n	801943c <pbuf_copy+0x118>
 8019422:	683b      	ldr	r3, [r7, #0]
 8019424:	2b00      	cmp	r3, #0
 8019426:	d009      	beq.n	801943c <pbuf_copy+0x118>
 8019428:	4b20      	ldr	r3, [pc, #128]	; (80194ac <pbuf_copy+0x188>)
 801942a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 801942e:	4924      	ldr	r1, [pc, #144]	; (80194c0 <pbuf_copy+0x19c>)
 8019430:	4820      	ldr	r0, [pc, #128]	; (80194b4 <pbuf_copy+0x190>)
 8019432:	f00c f9bb 	bl	80257ac <iprintf>
 8019436:	f06f 030f 	mvn.w	r3, #15
 801943a:	e032      	b.n	80194a2 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 801943c:	683b      	ldr	r3, [r7, #0]
 801943e:	2b00      	cmp	r3, #0
 8019440:	d013      	beq.n	801946a <pbuf_copy+0x146>
 8019442:	683b      	ldr	r3, [r7, #0]
 8019444:	895a      	ldrh	r2, [r3, #10]
 8019446:	683b      	ldr	r3, [r7, #0]
 8019448:	891b      	ldrh	r3, [r3, #8]
 801944a:	429a      	cmp	r2, r3
 801944c:	d10d      	bne.n	801946a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801944e:	683b      	ldr	r3, [r7, #0]
 8019450:	681b      	ldr	r3, [r3, #0]
 8019452:	2b00      	cmp	r3, #0
 8019454:	d009      	beq.n	801946a <pbuf_copy+0x146>
 8019456:	4b15      	ldr	r3, [pc, #84]	; (80194ac <pbuf_copy+0x188>)
 8019458:	f240 32e9 	movw	r2, #1001	; 0x3e9
 801945c:	4919      	ldr	r1, [pc, #100]	; (80194c4 <pbuf_copy+0x1a0>)
 801945e:	4815      	ldr	r0, [pc, #84]	; (80194b4 <pbuf_copy+0x190>)
 8019460:	f00c f9a4 	bl	80257ac <iprintf>
 8019464:	f06f 0305 	mvn.w	r3, #5
 8019468:	e01b      	b.n	80194a2 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801946a:	687b      	ldr	r3, [r7, #4]
 801946c:	2b00      	cmp	r3, #0
 801946e:	d013      	beq.n	8019498 <pbuf_copy+0x174>
 8019470:	687b      	ldr	r3, [r7, #4]
 8019472:	895a      	ldrh	r2, [r3, #10]
 8019474:	687b      	ldr	r3, [r7, #4]
 8019476:	891b      	ldrh	r3, [r3, #8]
 8019478:	429a      	cmp	r2, r3
 801947a:	d10d      	bne.n	8019498 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801947c:	687b      	ldr	r3, [r7, #4]
 801947e:	681b      	ldr	r3, [r3, #0]
 8019480:	2b00      	cmp	r3, #0
 8019482:	d009      	beq.n	8019498 <pbuf_copy+0x174>
 8019484:	4b09      	ldr	r3, [pc, #36]	; (80194ac <pbuf_copy+0x188>)
 8019486:	f240 32ee 	movw	r2, #1006	; 0x3ee
 801948a:	490e      	ldr	r1, [pc, #56]	; (80194c4 <pbuf_copy+0x1a0>)
 801948c:	4809      	ldr	r0, [pc, #36]	; (80194b4 <pbuf_copy+0x190>)
 801948e:	f00c f98d 	bl	80257ac <iprintf>
 8019492:	f06f 0305 	mvn.w	r3, #5
 8019496:	e004      	b.n	80194a2 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8019498:	683b      	ldr	r3, [r7, #0]
 801949a:	2b00      	cmp	r3, #0
 801949c:	f47f af61 	bne.w	8019362 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80194a0:	2300      	movs	r3, #0
}
 80194a2:	4618      	mov	r0, r3
 80194a4:	3718      	adds	r7, #24
 80194a6:	46bd      	mov	sp, r7
 80194a8:	bd80      	pop	{r7, pc}
 80194aa:	bf00      	nop
 80194ac:	0802ba38 	.word	0x0802ba38
 80194b0:	0802bce0 	.word	0x0802bce0
 80194b4:	0802ba98 	.word	0x0802ba98
 80194b8:	0802bd10 	.word	0x0802bd10
 80194bc:	0802bd28 	.word	0x0802bd28
 80194c0:	0802bd44 	.word	0x0802bd44
 80194c4:	0802bd54 	.word	0x0802bd54

080194c8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80194c8:	b580      	push	{r7, lr}
 80194ca:	b088      	sub	sp, #32
 80194cc:	af00      	add	r7, sp, #0
 80194ce:	60f8      	str	r0, [r7, #12]
 80194d0:	60b9      	str	r1, [r7, #8]
 80194d2:	4611      	mov	r1, r2
 80194d4:	461a      	mov	r2, r3
 80194d6:	460b      	mov	r3, r1
 80194d8:	80fb      	strh	r3, [r7, #6]
 80194da:	4613      	mov	r3, r2
 80194dc:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80194de:	2300      	movs	r3, #0
 80194e0:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80194e2:	2300      	movs	r3, #0
 80194e4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80194e6:	68fb      	ldr	r3, [r7, #12]
 80194e8:	2b00      	cmp	r3, #0
 80194ea:	d108      	bne.n	80194fe <pbuf_copy_partial+0x36>
 80194ec:	4b2b      	ldr	r3, [pc, #172]	; (801959c <pbuf_copy_partial+0xd4>)
 80194ee:	f240 420a 	movw	r2, #1034	; 0x40a
 80194f2:	492b      	ldr	r1, [pc, #172]	; (80195a0 <pbuf_copy_partial+0xd8>)
 80194f4:	482b      	ldr	r0, [pc, #172]	; (80195a4 <pbuf_copy_partial+0xdc>)
 80194f6:	f00c f959 	bl	80257ac <iprintf>
 80194fa:	2300      	movs	r3, #0
 80194fc:	e04a      	b.n	8019594 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80194fe:	68bb      	ldr	r3, [r7, #8]
 8019500:	2b00      	cmp	r3, #0
 8019502:	d108      	bne.n	8019516 <pbuf_copy_partial+0x4e>
 8019504:	4b25      	ldr	r3, [pc, #148]	; (801959c <pbuf_copy_partial+0xd4>)
 8019506:	f240 420b 	movw	r2, #1035	; 0x40b
 801950a:	4927      	ldr	r1, [pc, #156]	; (80195a8 <pbuf_copy_partial+0xe0>)
 801950c:	4825      	ldr	r0, [pc, #148]	; (80195a4 <pbuf_copy_partial+0xdc>)
 801950e:	f00c f94d 	bl	80257ac <iprintf>
 8019512:	2300      	movs	r3, #0
 8019514:	e03e      	b.n	8019594 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8019516:	68fb      	ldr	r3, [r7, #12]
 8019518:	61fb      	str	r3, [r7, #28]
 801951a:	e034      	b.n	8019586 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 801951c:	88bb      	ldrh	r3, [r7, #4]
 801951e:	2b00      	cmp	r3, #0
 8019520:	d00a      	beq.n	8019538 <pbuf_copy_partial+0x70>
 8019522:	69fb      	ldr	r3, [r7, #28]
 8019524:	895b      	ldrh	r3, [r3, #10]
 8019526:	88ba      	ldrh	r2, [r7, #4]
 8019528:	429a      	cmp	r2, r3
 801952a:	d305      	bcc.n	8019538 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 801952c:	69fb      	ldr	r3, [r7, #28]
 801952e:	895b      	ldrh	r3, [r3, #10]
 8019530:	88ba      	ldrh	r2, [r7, #4]
 8019532:	1ad3      	subs	r3, r2, r3
 8019534:	80bb      	strh	r3, [r7, #4]
 8019536:	e023      	b.n	8019580 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8019538:	69fb      	ldr	r3, [r7, #28]
 801953a:	895a      	ldrh	r2, [r3, #10]
 801953c:	88bb      	ldrh	r3, [r7, #4]
 801953e:	1ad3      	subs	r3, r2, r3
 8019540:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8019542:	8b3a      	ldrh	r2, [r7, #24]
 8019544:	88fb      	ldrh	r3, [r7, #6]
 8019546:	429a      	cmp	r2, r3
 8019548:	d901      	bls.n	801954e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 801954a:	88fb      	ldrh	r3, [r7, #6]
 801954c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801954e:	8b7b      	ldrh	r3, [r7, #26]
 8019550:	68ba      	ldr	r2, [r7, #8]
 8019552:	18d0      	adds	r0, r2, r3
 8019554:	69fb      	ldr	r3, [r7, #28]
 8019556:	685a      	ldr	r2, [r3, #4]
 8019558:	88bb      	ldrh	r3, [r7, #4]
 801955a:	4413      	add	r3, r2
 801955c:	8b3a      	ldrh	r2, [r7, #24]
 801955e:	4619      	mov	r1, r3
 8019560:	f00b fa50 	bl	8024a04 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8019564:	8afa      	ldrh	r2, [r7, #22]
 8019566:	8b3b      	ldrh	r3, [r7, #24]
 8019568:	4413      	add	r3, r2
 801956a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 801956c:	8b7a      	ldrh	r2, [r7, #26]
 801956e:	8b3b      	ldrh	r3, [r7, #24]
 8019570:	4413      	add	r3, r2
 8019572:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8019574:	88fa      	ldrh	r2, [r7, #6]
 8019576:	8b3b      	ldrh	r3, [r7, #24]
 8019578:	1ad3      	subs	r3, r2, r3
 801957a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 801957c:	2300      	movs	r3, #0
 801957e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8019580:	69fb      	ldr	r3, [r7, #28]
 8019582:	681b      	ldr	r3, [r3, #0]
 8019584:	61fb      	str	r3, [r7, #28]
 8019586:	88fb      	ldrh	r3, [r7, #6]
 8019588:	2b00      	cmp	r3, #0
 801958a:	d002      	beq.n	8019592 <pbuf_copy_partial+0xca>
 801958c:	69fb      	ldr	r3, [r7, #28]
 801958e:	2b00      	cmp	r3, #0
 8019590:	d1c4      	bne.n	801951c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8019592:	8afb      	ldrh	r3, [r7, #22]
}
 8019594:	4618      	mov	r0, r3
 8019596:	3720      	adds	r7, #32
 8019598:	46bd      	mov	sp, r7
 801959a:	bd80      	pop	{r7, pc}
 801959c:	0802ba38 	.word	0x0802ba38
 80195a0:	0802bd80 	.word	0x0802bd80
 80195a4:	0802ba98 	.word	0x0802ba98
 80195a8:	0802bda0 	.word	0x0802bda0

080195ac <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 80195ac:	b480      	push	{r7}
 80195ae:	b087      	sub	sp, #28
 80195b0:	af00      	add	r7, sp, #0
 80195b2:	60f8      	str	r0, [r7, #12]
 80195b4:	460b      	mov	r3, r1
 80195b6:	607a      	str	r2, [r7, #4]
 80195b8:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 80195ba:	897b      	ldrh	r3, [r7, #10]
 80195bc:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 80195be:	68fb      	ldr	r3, [r7, #12]
 80195c0:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 80195c2:	e007      	b.n	80195d4 <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 80195c4:	693b      	ldr	r3, [r7, #16]
 80195c6:	895b      	ldrh	r3, [r3, #10]
 80195c8:	8afa      	ldrh	r2, [r7, #22]
 80195ca:	1ad3      	subs	r3, r2, r3
 80195cc:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 80195ce:	693b      	ldr	r3, [r7, #16]
 80195d0:	681b      	ldr	r3, [r3, #0]
 80195d2:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 80195d4:	693b      	ldr	r3, [r7, #16]
 80195d6:	2b00      	cmp	r3, #0
 80195d8:	d004      	beq.n	80195e4 <pbuf_skip_const+0x38>
 80195da:	693b      	ldr	r3, [r7, #16]
 80195dc:	895b      	ldrh	r3, [r3, #10]
 80195de:	8afa      	ldrh	r2, [r7, #22]
 80195e0:	429a      	cmp	r2, r3
 80195e2:	d2ef      	bcs.n	80195c4 <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 80195e4:	687b      	ldr	r3, [r7, #4]
 80195e6:	2b00      	cmp	r3, #0
 80195e8:	d002      	beq.n	80195f0 <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 80195ea:	687b      	ldr	r3, [r7, #4]
 80195ec:	8afa      	ldrh	r2, [r7, #22]
 80195ee:	801a      	strh	r2, [r3, #0]
  }
  return q;
 80195f0:	693b      	ldr	r3, [r7, #16]
}
 80195f2:	4618      	mov	r0, r3
 80195f4:	371c      	adds	r7, #28
 80195f6:	46bd      	mov	sp, r7
 80195f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195fc:	4770      	bx	lr
	...

08019600 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8019600:	b580      	push	{r7, lr}
 8019602:	b084      	sub	sp, #16
 8019604:	af00      	add	r7, sp, #0
 8019606:	4603      	mov	r3, r0
 8019608:	603a      	str	r2, [r7, #0]
 801960a:	71fb      	strb	r3, [r7, #7]
 801960c:	460b      	mov	r3, r1
 801960e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8019610:	683b      	ldr	r3, [r7, #0]
 8019612:	8919      	ldrh	r1, [r3, #8]
 8019614:	88ba      	ldrh	r2, [r7, #4]
 8019616:	79fb      	ldrb	r3, [r7, #7]
 8019618:	4618      	mov	r0, r3
 801961a:	f7ff fa6b 	bl	8018af4 <pbuf_alloc>
 801961e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8019620:	68fb      	ldr	r3, [r7, #12]
 8019622:	2b00      	cmp	r3, #0
 8019624:	d101      	bne.n	801962a <pbuf_clone+0x2a>
    return NULL;
 8019626:	2300      	movs	r3, #0
 8019628:	e011      	b.n	801964e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 801962a:	6839      	ldr	r1, [r7, #0]
 801962c:	68f8      	ldr	r0, [r7, #12]
 801962e:	f7ff fe79 	bl	8019324 <pbuf_copy>
 8019632:	4603      	mov	r3, r0
 8019634:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8019636:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801963a:	2b00      	cmp	r3, #0
 801963c:	d006      	beq.n	801964c <pbuf_clone+0x4c>
 801963e:	4b06      	ldr	r3, [pc, #24]	; (8019658 <pbuf_clone+0x58>)
 8019640:	f240 5224 	movw	r2, #1316	; 0x524
 8019644:	4905      	ldr	r1, [pc, #20]	; (801965c <pbuf_clone+0x5c>)
 8019646:	4806      	ldr	r0, [pc, #24]	; (8019660 <pbuf_clone+0x60>)
 8019648:	f00c f8b0 	bl	80257ac <iprintf>
  return q;
 801964c:	68fb      	ldr	r3, [r7, #12]
}
 801964e:	4618      	mov	r0, r3
 8019650:	3710      	adds	r7, #16
 8019652:	46bd      	mov	sp, r7
 8019654:	bd80      	pop	{r7, pc}
 8019656:	bf00      	nop
 8019658:	0802ba38 	.word	0x0802ba38
 801965c:	0802beac 	.word	0x0802beac
 8019660:	0802ba98 	.word	0x0802ba98

08019664 <pbuf_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p OR ZERO IF 'offset' >= p->tot_len
 */
u8_t
pbuf_get_at(const struct pbuf *p, u16_t offset)
{
 8019664:	b580      	push	{r7, lr}
 8019666:	b084      	sub	sp, #16
 8019668:	af00      	add	r7, sp, #0
 801966a:	6078      	str	r0, [r7, #4]
 801966c:	460b      	mov	r3, r1
 801966e:	807b      	strh	r3, [r7, #2]
  int ret = pbuf_try_get_at(p, offset);
 8019670:	887b      	ldrh	r3, [r7, #2]
 8019672:	4619      	mov	r1, r3
 8019674:	6878      	ldr	r0, [r7, #4]
 8019676:	f000 f80c 	bl	8019692 <pbuf_try_get_at>
 801967a:	60f8      	str	r0, [r7, #12]
  if (ret >= 0) {
 801967c:	68fb      	ldr	r3, [r7, #12]
 801967e:	2b00      	cmp	r3, #0
 8019680:	db02      	blt.n	8019688 <pbuf_get_at+0x24>
    return (u8_t)ret;
 8019682:	68fb      	ldr	r3, [r7, #12]
 8019684:	b2db      	uxtb	r3, r3
 8019686:	e000      	b.n	801968a <pbuf_get_at+0x26>
  }
  return 0;
 8019688:	2300      	movs	r3, #0
}
 801968a:	4618      	mov	r0, r3
 801968c:	3710      	adds	r7, #16
 801968e:	46bd      	mov	sp, r7
 8019690:	bd80      	pop	{r7, pc}

08019692 <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf *p, u16_t offset)
{
 8019692:	b580      	push	{r7, lr}
 8019694:	b084      	sub	sp, #16
 8019696:	af00      	add	r7, sp, #0
 8019698:	6078      	str	r0, [r7, #4]
 801969a:	460b      	mov	r3, r1
 801969c:	807b      	strh	r3, [r7, #2]
  u16_t q_idx;
  const struct pbuf *q = pbuf_skip_const(p, offset, &q_idx);
 801969e:	f107 020a 	add.w	r2, r7, #10
 80196a2:	887b      	ldrh	r3, [r7, #2]
 80196a4:	4619      	mov	r1, r3
 80196a6:	6878      	ldr	r0, [r7, #4]
 80196a8:	f7ff ff80 	bl	80195ac <pbuf_skip_const>
 80196ac:	60f8      	str	r0, [r7, #12]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 80196ae:	68fb      	ldr	r3, [r7, #12]
 80196b0:	2b00      	cmp	r3, #0
 80196b2:	d00a      	beq.n	80196ca <pbuf_try_get_at+0x38>
 80196b4:	68fb      	ldr	r3, [r7, #12]
 80196b6:	895a      	ldrh	r2, [r3, #10]
 80196b8:	897b      	ldrh	r3, [r7, #10]
 80196ba:	429a      	cmp	r2, r3
 80196bc:	d905      	bls.n	80196ca <pbuf_try_get_at+0x38>
    return ((u8_t *)q->payload)[q_idx];
 80196be:	68fb      	ldr	r3, [r7, #12]
 80196c0:	685b      	ldr	r3, [r3, #4]
 80196c2:	897a      	ldrh	r2, [r7, #10]
 80196c4:	4413      	add	r3, r2
 80196c6:	781b      	ldrb	r3, [r3, #0]
 80196c8:	e001      	b.n	80196ce <pbuf_try_get_at+0x3c>
  }
  return -1;
 80196ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80196ce:	4618      	mov	r0, r3
 80196d0:	3710      	adds	r7, #16
 80196d2:	46bd      	mov	sp, r7
 80196d4:	bd80      	pop	{r7, pc}
	...

080196d8 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80196d8:	b580      	push	{r7, lr}
 80196da:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80196dc:	f00c f8f4 	bl	80258c8 <rand>
 80196e0:	4603      	mov	r3, r0
 80196e2:	b29b      	uxth	r3, r3
 80196e4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80196e8:	b29b      	uxth	r3, r3
 80196ea:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80196ee:	b29a      	uxth	r2, r3
 80196f0:	4b01      	ldr	r3, [pc, #4]	; (80196f8 <tcp_init+0x20>)
 80196f2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80196f4:	bf00      	nop
 80196f6:	bd80      	pop	{r7, pc}
 80196f8:	10000060 	.word	0x10000060

080196fc <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80196fc:	b580      	push	{r7, lr}
 80196fe:	b082      	sub	sp, #8
 8019700:	af00      	add	r7, sp, #0
 8019702:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8019704:	687b      	ldr	r3, [r7, #4]
 8019706:	7d1b      	ldrb	r3, [r3, #20]
 8019708:	2b01      	cmp	r3, #1
 801970a:	d105      	bne.n	8019718 <tcp_free+0x1c>
 801970c:	4b06      	ldr	r3, [pc, #24]	; (8019728 <tcp_free+0x2c>)
 801970e:	22d4      	movs	r2, #212	; 0xd4
 8019710:	4906      	ldr	r1, [pc, #24]	; (801972c <tcp_free+0x30>)
 8019712:	4807      	ldr	r0, [pc, #28]	; (8019730 <tcp_free+0x34>)
 8019714:	f00c f84a 	bl	80257ac <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8019718:	6879      	ldr	r1, [r7, #4]
 801971a:	2001      	movs	r0, #1
 801971c:	f7fe fe1e 	bl	801835c <memp_free>
}
 8019720:	bf00      	nop
 8019722:	3708      	adds	r7, #8
 8019724:	46bd      	mov	sp, r7
 8019726:	bd80      	pop	{r7, pc}
 8019728:	0802bf38 	.word	0x0802bf38
 801972c:	0802bf68 	.word	0x0802bf68
 8019730:	0802bf7c 	.word	0x0802bf7c

08019734 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8019734:	b580      	push	{r7, lr}
 8019736:	b082      	sub	sp, #8
 8019738:	af00      	add	r7, sp, #0
 801973a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 801973c:	687b      	ldr	r3, [r7, #4]
 801973e:	7d1b      	ldrb	r3, [r3, #20]
 8019740:	2b01      	cmp	r3, #1
 8019742:	d105      	bne.n	8019750 <tcp_free_listen+0x1c>
 8019744:	4b06      	ldr	r3, [pc, #24]	; (8019760 <tcp_free_listen+0x2c>)
 8019746:	22df      	movs	r2, #223	; 0xdf
 8019748:	4906      	ldr	r1, [pc, #24]	; (8019764 <tcp_free_listen+0x30>)
 801974a:	4807      	ldr	r0, [pc, #28]	; (8019768 <tcp_free_listen+0x34>)
 801974c:	f00c f82e 	bl	80257ac <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8019750:	6879      	ldr	r1, [r7, #4]
 8019752:	2002      	movs	r0, #2
 8019754:	f7fe fe02 	bl	801835c <memp_free>
}
 8019758:	bf00      	nop
 801975a:	3708      	adds	r7, #8
 801975c:	46bd      	mov	sp, r7
 801975e:	bd80      	pop	{r7, pc}
 8019760:	0802bf38 	.word	0x0802bf38
 8019764:	0802bfa4 	.word	0x0802bfa4
 8019768:	0802bf7c 	.word	0x0802bf7c

0801976c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 801976c:	b580      	push	{r7, lr}
 801976e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8019770:	f001 f898 	bl	801a8a4 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8019774:	4b07      	ldr	r3, [pc, #28]	; (8019794 <tcp_tmr+0x28>)
 8019776:	781b      	ldrb	r3, [r3, #0]
 8019778:	3301      	adds	r3, #1
 801977a:	b2da      	uxtb	r2, r3
 801977c:	4b05      	ldr	r3, [pc, #20]	; (8019794 <tcp_tmr+0x28>)
 801977e:	701a      	strb	r2, [r3, #0]
 8019780:	4b04      	ldr	r3, [pc, #16]	; (8019794 <tcp_tmr+0x28>)
 8019782:	781b      	ldrb	r3, [r3, #0]
 8019784:	f003 0301 	and.w	r3, r3, #1
 8019788:	2b00      	cmp	r3, #0
 801978a:	d001      	beq.n	8019790 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 801978c:	f000 fd4a 	bl	801a224 <tcp_slowtmr>
  }
}
 8019790:	bf00      	nop
 8019792:	bd80      	pop	{r7, pc}
 8019794:	200137dd 	.word	0x200137dd

08019798 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8019798:	b580      	push	{r7, lr}
 801979a:	b084      	sub	sp, #16
 801979c:	af00      	add	r7, sp, #0
 801979e:	6078      	str	r0, [r7, #4]
 80197a0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 80197a2:	683b      	ldr	r3, [r7, #0]
 80197a4:	2b00      	cmp	r3, #0
 80197a6:	d105      	bne.n	80197b4 <tcp_remove_listener+0x1c>
 80197a8:	4b0d      	ldr	r3, [pc, #52]	; (80197e0 <tcp_remove_listener+0x48>)
 80197aa:	22ff      	movs	r2, #255	; 0xff
 80197ac:	490d      	ldr	r1, [pc, #52]	; (80197e4 <tcp_remove_listener+0x4c>)
 80197ae:	480e      	ldr	r0, [pc, #56]	; (80197e8 <tcp_remove_listener+0x50>)
 80197b0:	f00b fffc 	bl	80257ac <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80197b4:	687b      	ldr	r3, [r7, #4]
 80197b6:	60fb      	str	r3, [r7, #12]
 80197b8:	e00a      	b.n	80197d0 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80197ba:	68fb      	ldr	r3, [r7, #12]
 80197bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80197be:	683a      	ldr	r2, [r7, #0]
 80197c0:	429a      	cmp	r2, r3
 80197c2:	d102      	bne.n	80197ca <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80197c4:	68fb      	ldr	r3, [r7, #12]
 80197c6:	2200      	movs	r2, #0
 80197c8:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80197ca:	68fb      	ldr	r3, [r7, #12]
 80197cc:	68db      	ldr	r3, [r3, #12]
 80197ce:	60fb      	str	r3, [r7, #12]
 80197d0:	68fb      	ldr	r3, [r7, #12]
 80197d2:	2b00      	cmp	r3, #0
 80197d4:	d1f1      	bne.n	80197ba <tcp_remove_listener+0x22>
    }
  }
}
 80197d6:	bf00      	nop
 80197d8:	bf00      	nop
 80197da:	3710      	adds	r7, #16
 80197dc:	46bd      	mov	sp, r7
 80197de:	bd80      	pop	{r7, pc}
 80197e0:	0802bf38 	.word	0x0802bf38
 80197e4:	0802bfc0 	.word	0x0802bfc0
 80197e8:	0802bf7c 	.word	0x0802bf7c

080197ec <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80197ec:	b580      	push	{r7, lr}
 80197ee:	b084      	sub	sp, #16
 80197f0:	af00      	add	r7, sp, #0
 80197f2:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80197f4:	687b      	ldr	r3, [r7, #4]
 80197f6:	2b00      	cmp	r3, #0
 80197f8:	d106      	bne.n	8019808 <tcp_listen_closed+0x1c>
 80197fa:	4b14      	ldr	r3, [pc, #80]	; (801984c <tcp_listen_closed+0x60>)
 80197fc:	f240 1211 	movw	r2, #273	; 0x111
 8019800:	4913      	ldr	r1, [pc, #76]	; (8019850 <tcp_listen_closed+0x64>)
 8019802:	4814      	ldr	r0, [pc, #80]	; (8019854 <tcp_listen_closed+0x68>)
 8019804:	f00b ffd2 	bl	80257ac <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8019808:	687b      	ldr	r3, [r7, #4]
 801980a:	7d1b      	ldrb	r3, [r3, #20]
 801980c:	2b01      	cmp	r3, #1
 801980e:	d006      	beq.n	801981e <tcp_listen_closed+0x32>
 8019810:	4b0e      	ldr	r3, [pc, #56]	; (801984c <tcp_listen_closed+0x60>)
 8019812:	f44f 7289 	mov.w	r2, #274	; 0x112
 8019816:	4910      	ldr	r1, [pc, #64]	; (8019858 <tcp_listen_closed+0x6c>)
 8019818:	480e      	ldr	r0, [pc, #56]	; (8019854 <tcp_listen_closed+0x68>)
 801981a:	f00b ffc7 	bl	80257ac <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801981e:	2301      	movs	r3, #1
 8019820:	60fb      	str	r3, [r7, #12]
 8019822:	e00b      	b.n	801983c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8019824:	4a0d      	ldr	r2, [pc, #52]	; (801985c <tcp_listen_closed+0x70>)
 8019826:	68fb      	ldr	r3, [r7, #12]
 8019828:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801982c:	681b      	ldr	r3, [r3, #0]
 801982e:	6879      	ldr	r1, [r7, #4]
 8019830:	4618      	mov	r0, r3
 8019832:	f7ff ffb1 	bl	8019798 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8019836:	68fb      	ldr	r3, [r7, #12]
 8019838:	3301      	adds	r3, #1
 801983a:	60fb      	str	r3, [r7, #12]
 801983c:	68fb      	ldr	r3, [r7, #12]
 801983e:	2b03      	cmp	r3, #3
 8019840:	d9f0      	bls.n	8019824 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8019842:	bf00      	nop
 8019844:	bf00      	nop
 8019846:	3710      	adds	r7, #16
 8019848:	46bd      	mov	sp, r7
 801984a:	bd80      	pop	{r7, pc}
 801984c:	0802bf38 	.word	0x0802bf38
 8019850:	0802bfe8 	.word	0x0802bfe8
 8019854:	0802bf7c 	.word	0x0802bf7c
 8019858:	0802bff4 	.word	0x0802bff4
 801985c:	0802e430 	.word	0x0802e430

08019860 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8019860:	b5b0      	push	{r4, r5, r7, lr}
 8019862:	b088      	sub	sp, #32
 8019864:	af04      	add	r7, sp, #16
 8019866:	6078      	str	r0, [r7, #4]
 8019868:	460b      	mov	r3, r1
 801986a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 801986c:	687b      	ldr	r3, [r7, #4]
 801986e:	2b00      	cmp	r3, #0
 8019870:	d106      	bne.n	8019880 <tcp_close_shutdown+0x20>
 8019872:	4b63      	ldr	r3, [pc, #396]	; (8019a00 <tcp_close_shutdown+0x1a0>)
 8019874:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8019878:	4962      	ldr	r1, [pc, #392]	; (8019a04 <tcp_close_shutdown+0x1a4>)
 801987a:	4863      	ldr	r0, [pc, #396]	; (8019a08 <tcp_close_shutdown+0x1a8>)
 801987c:	f00b ff96 	bl	80257ac <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8019880:	78fb      	ldrb	r3, [r7, #3]
 8019882:	2b00      	cmp	r3, #0
 8019884:	d066      	beq.n	8019954 <tcp_close_shutdown+0xf4>
 8019886:	687b      	ldr	r3, [r7, #4]
 8019888:	7d1b      	ldrb	r3, [r3, #20]
 801988a:	2b04      	cmp	r3, #4
 801988c:	d003      	beq.n	8019896 <tcp_close_shutdown+0x36>
 801988e:	687b      	ldr	r3, [r7, #4]
 8019890:	7d1b      	ldrb	r3, [r3, #20]
 8019892:	2b07      	cmp	r3, #7
 8019894:	d15e      	bne.n	8019954 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8019896:	687b      	ldr	r3, [r7, #4]
 8019898:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801989a:	2b00      	cmp	r3, #0
 801989c:	d104      	bne.n	80198a8 <tcp_close_shutdown+0x48>
 801989e:	687b      	ldr	r3, [r7, #4]
 80198a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80198a2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80198a6:	d055      	beq.n	8019954 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80198a8:	687b      	ldr	r3, [r7, #4]
 80198aa:	8b5b      	ldrh	r3, [r3, #26]
 80198ac:	f003 0310 	and.w	r3, r3, #16
 80198b0:	2b00      	cmp	r3, #0
 80198b2:	d106      	bne.n	80198c2 <tcp_close_shutdown+0x62>
 80198b4:	4b52      	ldr	r3, [pc, #328]	; (8019a00 <tcp_close_shutdown+0x1a0>)
 80198b6:	f44f 72b2 	mov.w	r2, #356	; 0x164
 80198ba:	4954      	ldr	r1, [pc, #336]	; (8019a0c <tcp_close_shutdown+0x1ac>)
 80198bc:	4852      	ldr	r0, [pc, #328]	; (8019a08 <tcp_close_shutdown+0x1a8>)
 80198be:	f00b ff75 	bl	80257ac <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80198c2:	687b      	ldr	r3, [r7, #4]
 80198c4:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80198c6:	687b      	ldr	r3, [r7, #4]
 80198c8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80198ca:	687d      	ldr	r5, [r7, #4]
 80198cc:	687b      	ldr	r3, [r7, #4]
 80198ce:	3304      	adds	r3, #4
 80198d0:	687a      	ldr	r2, [r7, #4]
 80198d2:	8ad2      	ldrh	r2, [r2, #22]
 80198d4:	6879      	ldr	r1, [r7, #4]
 80198d6:	8b09      	ldrh	r1, [r1, #24]
 80198d8:	9102      	str	r1, [sp, #8]
 80198da:	9201      	str	r2, [sp, #4]
 80198dc:	9300      	str	r3, [sp, #0]
 80198de:	462b      	mov	r3, r5
 80198e0:	4622      	mov	r2, r4
 80198e2:	4601      	mov	r1, r0
 80198e4:	6878      	ldr	r0, [r7, #4]
 80198e6:	f005 fd95 	bl	801f414 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80198ea:	6878      	ldr	r0, [r7, #4]
 80198ec:	f001 fb72 	bl	801afd4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80198f0:	4b47      	ldr	r3, [pc, #284]	; (8019a10 <tcp_close_shutdown+0x1b0>)
 80198f2:	681b      	ldr	r3, [r3, #0]
 80198f4:	687a      	ldr	r2, [r7, #4]
 80198f6:	429a      	cmp	r2, r3
 80198f8:	d105      	bne.n	8019906 <tcp_close_shutdown+0xa6>
 80198fa:	4b45      	ldr	r3, [pc, #276]	; (8019a10 <tcp_close_shutdown+0x1b0>)
 80198fc:	681b      	ldr	r3, [r3, #0]
 80198fe:	68db      	ldr	r3, [r3, #12]
 8019900:	4a43      	ldr	r2, [pc, #268]	; (8019a10 <tcp_close_shutdown+0x1b0>)
 8019902:	6013      	str	r3, [r2, #0]
 8019904:	e013      	b.n	801992e <tcp_close_shutdown+0xce>
 8019906:	4b42      	ldr	r3, [pc, #264]	; (8019a10 <tcp_close_shutdown+0x1b0>)
 8019908:	681b      	ldr	r3, [r3, #0]
 801990a:	60fb      	str	r3, [r7, #12]
 801990c:	e00c      	b.n	8019928 <tcp_close_shutdown+0xc8>
 801990e:	68fb      	ldr	r3, [r7, #12]
 8019910:	68db      	ldr	r3, [r3, #12]
 8019912:	687a      	ldr	r2, [r7, #4]
 8019914:	429a      	cmp	r2, r3
 8019916:	d104      	bne.n	8019922 <tcp_close_shutdown+0xc2>
 8019918:	687b      	ldr	r3, [r7, #4]
 801991a:	68da      	ldr	r2, [r3, #12]
 801991c:	68fb      	ldr	r3, [r7, #12]
 801991e:	60da      	str	r2, [r3, #12]
 8019920:	e005      	b.n	801992e <tcp_close_shutdown+0xce>
 8019922:	68fb      	ldr	r3, [r7, #12]
 8019924:	68db      	ldr	r3, [r3, #12]
 8019926:	60fb      	str	r3, [r7, #12]
 8019928:	68fb      	ldr	r3, [r7, #12]
 801992a:	2b00      	cmp	r3, #0
 801992c:	d1ef      	bne.n	801990e <tcp_close_shutdown+0xae>
 801992e:	687b      	ldr	r3, [r7, #4]
 8019930:	2200      	movs	r2, #0
 8019932:	60da      	str	r2, [r3, #12]
 8019934:	4b37      	ldr	r3, [pc, #220]	; (8019a14 <tcp_close_shutdown+0x1b4>)
 8019936:	2201      	movs	r2, #1
 8019938:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 801993a:	4b37      	ldr	r3, [pc, #220]	; (8019a18 <tcp_close_shutdown+0x1b8>)
 801993c:	681b      	ldr	r3, [r3, #0]
 801993e:	687a      	ldr	r2, [r7, #4]
 8019940:	429a      	cmp	r2, r3
 8019942:	d102      	bne.n	801994a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8019944:	f004 f80a 	bl	801d95c <tcp_trigger_input_pcb_close>
 8019948:	e002      	b.n	8019950 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 801994a:	6878      	ldr	r0, [r7, #4]
 801994c:	f7ff fed6 	bl	80196fc <tcp_free>
      }
      return ERR_OK;
 8019950:	2300      	movs	r3, #0
 8019952:	e050      	b.n	80199f6 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8019954:	687b      	ldr	r3, [r7, #4]
 8019956:	7d1b      	ldrb	r3, [r3, #20]
 8019958:	2b02      	cmp	r3, #2
 801995a:	d03b      	beq.n	80199d4 <tcp_close_shutdown+0x174>
 801995c:	2b02      	cmp	r3, #2
 801995e:	dc44      	bgt.n	80199ea <tcp_close_shutdown+0x18a>
 8019960:	2b00      	cmp	r3, #0
 8019962:	d002      	beq.n	801996a <tcp_close_shutdown+0x10a>
 8019964:	2b01      	cmp	r3, #1
 8019966:	d02a      	beq.n	80199be <tcp_close_shutdown+0x15e>
 8019968:	e03f      	b.n	80199ea <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 801996a:	687b      	ldr	r3, [r7, #4]
 801996c:	8adb      	ldrh	r3, [r3, #22]
 801996e:	2b00      	cmp	r3, #0
 8019970:	d021      	beq.n	80199b6 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8019972:	4b2a      	ldr	r3, [pc, #168]	; (8019a1c <tcp_close_shutdown+0x1bc>)
 8019974:	681b      	ldr	r3, [r3, #0]
 8019976:	687a      	ldr	r2, [r7, #4]
 8019978:	429a      	cmp	r2, r3
 801997a:	d105      	bne.n	8019988 <tcp_close_shutdown+0x128>
 801997c:	4b27      	ldr	r3, [pc, #156]	; (8019a1c <tcp_close_shutdown+0x1bc>)
 801997e:	681b      	ldr	r3, [r3, #0]
 8019980:	68db      	ldr	r3, [r3, #12]
 8019982:	4a26      	ldr	r2, [pc, #152]	; (8019a1c <tcp_close_shutdown+0x1bc>)
 8019984:	6013      	str	r3, [r2, #0]
 8019986:	e013      	b.n	80199b0 <tcp_close_shutdown+0x150>
 8019988:	4b24      	ldr	r3, [pc, #144]	; (8019a1c <tcp_close_shutdown+0x1bc>)
 801998a:	681b      	ldr	r3, [r3, #0]
 801998c:	60bb      	str	r3, [r7, #8]
 801998e:	e00c      	b.n	80199aa <tcp_close_shutdown+0x14a>
 8019990:	68bb      	ldr	r3, [r7, #8]
 8019992:	68db      	ldr	r3, [r3, #12]
 8019994:	687a      	ldr	r2, [r7, #4]
 8019996:	429a      	cmp	r2, r3
 8019998:	d104      	bne.n	80199a4 <tcp_close_shutdown+0x144>
 801999a:	687b      	ldr	r3, [r7, #4]
 801999c:	68da      	ldr	r2, [r3, #12]
 801999e:	68bb      	ldr	r3, [r7, #8]
 80199a0:	60da      	str	r2, [r3, #12]
 80199a2:	e005      	b.n	80199b0 <tcp_close_shutdown+0x150>
 80199a4:	68bb      	ldr	r3, [r7, #8]
 80199a6:	68db      	ldr	r3, [r3, #12]
 80199a8:	60bb      	str	r3, [r7, #8]
 80199aa:	68bb      	ldr	r3, [r7, #8]
 80199ac:	2b00      	cmp	r3, #0
 80199ae:	d1ef      	bne.n	8019990 <tcp_close_shutdown+0x130>
 80199b0:	687b      	ldr	r3, [r7, #4]
 80199b2:	2200      	movs	r2, #0
 80199b4:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80199b6:	6878      	ldr	r0, [r7, #4]
 80199b8:	f7ff fea0 	bl	80196fc <tcp_free>
      break;
 80199bc:	e01a      	b.n	80199f4 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 80199be:	6878      	ldr	r0, [r7, #4]
 80199c0:	f7ff ff14 	bl	80197ec <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80199c4:	6879      	ldr	r1, [r7, #4]
 80199c6:	4816      	ldr	r0, [pc, #88]	; (8019a20 <tcp_close_shutdown+0x1c0>)
 80199c8:	f001 fb54 	bl	801b074 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80199cc:	6878      	ldr	r0, [r7, #4]
 80199ce:	f7ff feb1 	bl	8019734 <tcp_free_listen>
      break;
 80199d2:	e00f      	b.n	80199f4 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80199d4:	6879      	ldr	r1, [r7, #4]
 80199d6:	480e      	ldr	r0, [pc, #56]	; (8019a10 <tcp_close_shutdown+0x1b0>)
 80199d8:	f001 fb4c 	bl	801b074 <tcp_pcb_remove>
 80199dc:	4b0d      	ldr	r3, [pc, #52]	; (8019a14 <tcp_close_shutdown+0x1b4>)
 80199de:	2201      	movs	r2, #1
 80199e0:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80199e2:	6878      	ldr	r0, [r7, #4]
 80199e4:	f7ff fe8a 	bl	80196fc <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80199e8:	e004      	b.n	80199f4 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 80199ea:	6878      	ldr	r0, [r7, #4]
 80199ec:	f000 f81a 	bl	8019a24 <tcp_close_shutdown_fin>
 80199f0:	4603      	mov	r3, r0
 80199f2:	e000      	b.n	80199f6 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 80199f4:	2300      	movs	r3, #0
}
 80199f6:	4618      	mov	r0, r3
 80199f8:	3710      	adds	r7, #16
 80199fa:	46bd      	mov	sp, r7
 80199fc:	bdb0      	pop	{r4, r5, r7, pc}
 80199fe:	bf00      	nop
 8019a00:	0802bf38 	.word	0x0802bf38
 8019a04:	0802c00c 	.word	0x0802c00c
 8019a08:	0802bf7c 	.word	0x0802bf7c
 8019a0c:	0802c02c 	.word	0x0802c02c
 8019a10:	2001bd0c 	.word	0x2001bd0c
 8019a14:	2001bd08 	.word	0x2001bd08
 8019a18:	2001bd20 	.word	0x2001bd20
 8019a1c:	2001bd18 	.word	0x2001bd18
 8019a20:	2001bd14 	.word	0x2001bd14

08019a24 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8019a24:	b580      	push	{r7, lr}
 8019a26:	b084      	sub	sp, #16
 8019a28:	af00      	add	r7, sp, #0
 8019a2a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8019a2c:	687b      	ldr	r3, [r7, #4]
 8019a2e:	2b00      	cmp	r3, #0
 8019a30:	d106      	bne.n	8019a40 <tcp_close_shutdown_fin+0x1c>
 8019a32:	4b2e      	ldr	r3, [pc, #184]	; (8019aec <tcp_close_shutdown_fin+0xc8>)
 8019a34:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8019a38:	492d      	ldr	r1, [pc, #180]	; (8019af0 <tcp_close_shutdown_fin+0xcc>)
 8019a3a:	482e      	ldr	r0, [pc, #184]	; (8019af4 <tcp_close_shutdown_fin+0xd0>)
 8019a3c:	f00b feb6 	bl	80257ac <iprintf>

  switch (pcb->state) {
 8019a40:	687b      	ldr	r3, [r7, #4]
 8019a42:	7d1b      	ldrb	r3, [r3, #20]
 8019a44:	2b07      	cmp	r3, #7
 8019a46:	d020      	beq.n	8019a8a <tcp_close_shutdown_fin+0x66>
 8019a48:	2b07      	cmp	r3, #7
 8019a4a:	dc2b      	bgt.n	8019aa4 <tcp_close_shutdown_fin+0x80>
 8019a4c:	2b03      	cmp	r3, #3
 8019a4e:	d002      	beq.n	8019a56 <tcp_close_shutdown_fin+0x32>
 8019a50:	2b04      	cmp	r3, #4
 8019a52:	d00d      	beq.n	8019a70 <tcp_close_shutdown_fin+0x4c>
 8019a54:	e026      	b.n	8019aa4 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8019a56:	6878      	ldr	r0, [r7, #4]
 8019a58:	f004 fdea 	bl	801e630 <tcp_send_fin>
 8019a5c:	4603      	mov	r3, r0
 8019a5e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8019a60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019a64:	2b00      	cmp	r3, #0
 8019a66:	d11f      	bne.n	8019aa8 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8019a68:	687b      	ldr	r3, [r7, #4]
 8019a6a:	2205      	movs	r2, #5
 8019a6c:	751a      	strb	r2, [r3, #20]
      }
      break;
 8019a6e:	e01b      	b.n	8019aa8 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8019a70:	6878      	ldr	r0, [r7, #4]
 8019a72:	f004 fddd 	bl	801e630 <tcp_send_fin>
 8019a76:	4603      	mov	r3, r0
 8019a78:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8019a7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019a7e:	2b00      	cmp	r3, #0
 8019a80:	d114      	bne.n	8019aac <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8019a82:	687b      	ldr	r3, [r7, #4]
 8019a84:	2205      	movs	r2, #5
 8019a86:	751a      	strb	r2, [r3, #20]
      }
      break;
 8019a88:	e010      	b.n	8019aac <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8019a8a:	6878      	ldr	r0, [r7, #4]
 8019a8c:	f004 fdd0 	bl	801e630 <tcp_send_fin>
 8019a90:	4603      	mov	r3, r0
 8019a92:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8019a94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019a98:	2b00      	cmp	r3, #0
 8019a9a:	d109      	bne.n	8019ab0 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8019a9c:	687b      	ldr	r3, [r7, #4]
 8019a9e:	2209      	movs	r2, #9
 8019aa0:	751a      	strb	r2, [r3, #20]
      }
      break;
 8019aa2:	e005      	b.n	8019ab0 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8019aa4:	2300      	movs	r3, #0
 8019aa6:	e01c      	b.n	8019ae2 <tcp_close_shutdown_fin+0xbe>
      break;
 8019aa8:	bf00      	nop
 8019aaa:	e002      	b.n	8019ab2 <tcp_close_shutdown_fin+0x8e>
      break;
 8019aac:	bf00      	nop
 8019aae:	e000      	b.n	8019ab2 <tcp_close_shutdown_fin+0x8e>
      break;
 8019ab0:	bf00      	nop
  }

  if (err == ERR_OK) {
 8019ab2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019ab6:	2b00      	cmp	r3, #0
 8019ab8:	d103      	bne.n	8019ac2 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8019aba:	6878      	ldr	r0, [r7, #4]
 8019abc:	f004 fef6 	bl	801e8ac <tcp_output>
 8019ac0:	e00d      	b.n	8019ade <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8019ac2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019aca:	d108      	bne.n	8019ade <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8019acc:	687b      	ldr	r3, [r7, #4]
 8019ace:	8b5b      	ldrh	r3, [r3, #26]
 8019ad0:	f043 0308 	orr.w	r3, r3, #8
 8019ad4:	b29a      	uxth	r2, r3
 8019ad6:	687b      	ldr	r3, [r7, #4]
 8019ad8:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8019ada:	2300      	movs	r3, #0
 8019adc:	e001      	b.n	8019ae2 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8019ade:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8019ae2:	4618      	mov	r0, r3
 8019ae4:	3710      	adds	r7, #16
 8019ae6:	46bd      	mov	sp, r7
 8019ae8:	bd80      	pop	{r7, pc}
 8019aea:	bf00      	nop
 8019aec:	0802bf38 	.word	0x0802bf38
 8019af0:	0802bfe8 	.word	0x0802bfe8
 8019af4:	0802bf7c 	.word	0x0802bf7c

08019af8 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8019af8:	b580      	push	{r7, lr}
 8019afa:	b082      	sub	sp, #8
 8019afc:	af00      	add	r7, sp, #0
 8019afe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8019b00:	687b      	ldr	r3, [r7, #4]
 8019b02:	2b00      	cmp	r3, #0
 8019b04:	d109      	bne.n	8019b1a <tcp_close+0x22>
 8019b06:	4b0f      	ldr	r3, [pc, #60]	; (8019b44 <tcp_close+0x4c>)
 8019b08:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8019b0c:	490e      	ldr	r1, [pc, #56]	; (8019b48 <tcp_close+0x50>)
 8019b0e:	480f      	ldr	r0, [pc, #60]	; (8019b4c <tcp_close+0x54>)
 8019b10:	f00b fe4c 	bl	80257ac <iprintf>
 8019b14:	f06f 030f 	mvn.w	r3, #15
 8019b18:	e00f      	b.n	8019b3a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8019b1a:	687b      	ldr	r3, [r7, #4]
 8019b1c:	7d1b      	ldrb	r3, [r3, #20]
 8019b1e:	2b01      	cmp	r3, #1
 8019b20:	d006      	beq.n	8019b30 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8019b22:	687b      	ldr	r3, [r7, #4]
 8019b24:	8b5b      	ldrh	r3, [r3, #26]
 8019b26:	f043 0310 	orr.w	r3, r3, #16
 8019b2a:	b29a      	uxth	r2, r3
 8019b2c:	687b      	ldr	r3, [r7, #4]
 8019b2e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8019b30:	2101      	movs	r1, #1
 8019b32:	6878      	ldr	r0, [r7, #4]
 8019b34:	f7ff fe94 	bl	8019860 <tcp_close_shutdown>
 8019b38:	4603      	mov	r3, r0
}
 8019b3a:	4618      	mov	r0, r3
 8019b3c:	3708      	adds	r7, #8
 8019b3e:	46bd      	mov	sp, r7
 8019b40:	bd80      	pop	{r7, pc}
 8019b42:	bf00      	nop
 8019b44:	0802bf38 	.word	0x0802bf38
 8019b48:	0802c048 	.word	0x0802c048
 8019b4c:	0802bf7c 	.word	0x0802bf7c

08019b50 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8019b50:	b580      	push	{r7, lr}
 8019b52:	b08e      	sub	sp, #56	; 0x38
 8019b54:	af04      	add	r7, sp, #16
 8019b56:	6078      	str	r0, [r7, #4]
 8019b58:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8019b5a:	687b      	ldr	r3, [r7, #4]
 8019b5c:	2b00      	cmp	r3, #0
 8019b5e:	d107      	bne.n	8019b70 <tcp_abandon+0x20>
 8019b60:	4b52      	ldr	r3, [pc, #328]	; (8019cac <tcp_abandon+0x15c>)
 8019b62:	f240 223d 	movw	r2, #573	; 0x23d
 8019b66:	4952      	ldr	r1, [pc, #328]	; (8019cb0 <tcp_abandon+0x160>)
 8019b68:	4852      	ldr	r0, [pc, #328]	; (8019cb4 <tcp_abandon+0x164>)
 8019b6a:	f00b fe1f 	bl	80257ac <iprintf>
 8019b6e:	e099      	b.n	8019ca4 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8019b70:	687b      	ldr	r3, [r7, #4]
 8019b72:	7d1b      	ldrb	r3, [r3, #20]
 8019b74:	2b01      	cmp	r3, #1
 8019b76:	d106      	bne.n	8019b86 <tcp_abandon+0x36>
 8019b78:	4b4c      	ldr	r3, [pc, #304]	; (8019cac <tcp_abandon+0x15c>)
 8019b7a:	f44f 7210 	mov.w	r2, #576	; 0x240
 8019b7e:	494e      	ldr	r1, [pc, #312]	; (8019cb8 <tcp_abandon+0x168>)
 8019b80:	484c      	ldr	r0, [pc, #304]	; (8019cb4 <tcp_abandon+0x164>)
 8019b82:	f00b fe13 	bl	80257ac <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8019b86:	687b      	ldr	r3, [r7, #4]
 8019b88:	7d1b      	ldrb	r3, [r3, #20]
 8019b8a:	2b0a      	cmp	r3, #10
 8019b8c:	d107      	bne.n	8019b9e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8019b8e:	6879      	ldr	r1, [r7, #4]
 8019b90:	484a      	ldr	r0, [pc, #296]	; (8019cbc <tcp_abandon+0x16c>)
 8019b92:	f001 fa6f 	bl	801b074 <tcp_pcb_remove>
    tcp_free(pcb);
 8019b96:	6878      	ldr	r0, [r7, #4]
 8019b98:	f7ff fdb0 	bl	80196fc <tcp_free>
 8019b9c:	e082      	b.n	8019ca4 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8019b9e:	2300      	movs	r3, #0
 8019ba0:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8019ba2:	2300      	movs	r3, #0
 8019ba4:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8019ba6:	687b      	ldr	r3, [r7, #4]
 8019ba8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019baa:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8019bac:	687b      	ldr	r3, [r7, #4]
 8019bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019bb0:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8019bb2:	687b      	ldr	r3, [r7, #4]
 8019bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019bb8:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8019bba:	687b      	ldr	r3, [r7, #4]
 8019bbc:	691b      	ldr	r3, [r3, #16]
 8019bbe:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8019bc0:	687b      	ldr	r3, [r7, #4]
 8019bc2:	7d1b      	ldrb	r3, [r3, #20]
 8019bc4:	2b00      	cmp	r3, #0
 8019bc6:	d126      	bne.n	8019c16 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8019bc8:	687b      	ldr	r3, [r7, #4]
 8019bca:	8adb      	ldrh	r3, [r3, #22]
 8019bcc:	2b00      	cmp	r3, #0
 8019bce:	d02e      	beq.n	8019c2e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8019bd0:	4b3b      	ldr	r3, [pc, #236]	; (8019cc0 <tcp_abandon+0x170>)
 8019bd2:	681b      	ldr	r3, [r3, #0]
 8019bd4:	687a      	ldr	r2, [r7, #4]
 8019bd6:	429a      	cmp	r2, r3
 8019bd8:	d105      	bne.n	8019be6 <tcp_abandon+0x96>
 8019bda:	4b39      	ldr	r3, [pc, #228]	; (8019cc0 <tcp_abandon+0x170>)
 8019bdc:	681b      	ldr	r3, [r3, #0]
 8019bde:	68db      	ldr	r3, [r3, #12]
 8019be0:	4a37      	ldr	r2, [pc, #220]	; (8019cc0 <tcp_abandon+0x170>)
 8019be2:	6013      	str	r3, [r2, #0]
 8019be4:	e013      	b.n	8019c0e <tcp_abandon+0xbe>
 8019be6:	4b36      	ldr	r3, [pc, #216]	; (8019cc0 <tcp_abandon+0x170>)
 8019be8:	681b      	ldr	r3, [r3, #0]
 8019bea:	61fb      	str	r3, [r7, #28]
 8019bec:	e00c      	b.n	8019c08 <tcp_abandon+0xb8>
 8019bee:	69fb      	ldr	r3, [r7, #28]
 8019bf0:	68db      	ldr	r3, [r3, #12]
 8019bf2:	687a      	ldr	r2, [r7, #4]
 8019bf4:	429a      	cmp	r2, r3
 8019bf6:	d104      	bne.n	8019c02 <tcp_abandon+0xb2>
 8019bf8:	687b      	ldr	r3, [r7, #4]
 8019bfa:	68da      	ldr	r2, [r3, #12]
 8019bfc:	69fb      	ldr	r3, [r7, #28]
 8019bfe:	60da      	str	r2, [r3, #12]
 8019c00:	e005      	b.n	8019c0e <tcp_abandon+0xbe>
 8019c02:	69fb      	ldr	r3, [r7, #28]
 8019c04:	68db      	ldr	r3, [r3, #12]
 8019c06:	61fb      	str	r3, [r7, #28]
 8019c08:	69fb      	ldr	r3, [r7, #28]
 8019c0a:	2b00      	cmp	r3, #0
 8019c0c:	d1ef      	bne.n	8019bee <tcp_abandon+0x9e>
 8019c0e:	687b      	ldr	r3, [r7, #4]
 8019c10:	2200      	movs	r2, #0
 8019c12:	60da      	str	r2, [r3, #12]
 8019c14:	e00b      	b.n	8019c2e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8019c16:	683b      	ldr	r3, [r7, #0]
 8019c18:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8019c1a:	687b      	ldr	r3, [r7, #4]
 8019c1c:	8adb      	ldrh	r3, [r3, #22]
 8019c1e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8019c20:	6879      	ldr	r1, [r7, #4]
 8019c22:	4828      	ldr	r0, [pc, #160]	; (8019cc4 <tcp_abandon+0x174>)
 8019c24:	f001 fa26 	bl	801b074 <tcp_pcb_remove>
 8019c28:	4b27      	ldr	r3, [pc, #156]	; (8019cc8 <tcp_abandon+0x178>)
 8019c2a:	2201      	movs	r2, #1
 8019c2c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8019c2e:	687b      	ldr	r3, [r7, #4]
 8019c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019c32:	2b00      	cmp	r3, #0
 8019c34:	d004      	beq.n	8019c40 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8019c36:	687b      	ldr	r3, [r7, #4]
 8019c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019c3a:	4618      	mov	r0, r3
 8019c3c:	f000 ff12 	bl	801aa64 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8019c40:	687b      	ldr	r3, [r7, #4]
 8019c42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019c44:	2b00      	cmp	r3, #0
 8019c46:	d004      	beq.n	8019c52 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8019c48:	687b      	ldr	r3, [r7, #4]
 8019c4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019c4c:	4618      	mov	r0, r3
 8019c4e:	f000 ff09 	bl	801aa64 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8019c52:	687b      	ldr	r3, [r7, #4]
 8019c54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019c56:	2b00      	cmp	r3, #0
 8019c58:	d004      	beq.n	8019c64 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8019c5a:	687b      	ldr	r3, [r7, #4]
 8019c5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019c5e:	4618      	mov	r0, r3
 8019c60:	f000 ff00 	bl	801aa64 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8019c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c66:	2b00      	cmp	r3, #0
 8019c68:	d00e      	beq.n	8019c88 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8019c6a:	6879      	ldr	r1, [r7, #4]
 8019c6c:	687b      	ldr	r3, [r7, #4]
 8019c6e:	3304      	adds	r3, #4
 8019c70:	687a      	ldr	r2, [r7, #4]
 8019c72:	8b12      	ldrh	r2, [r2, #24]
 8019c74:	9202      	str	r2, [sp, #8]
 8019c76:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8019c78:	9201      	str	r2, [sp, #4]
 8019c7a:	9300      	str	r3, [sp, #0]
 8019c7c:	460b      	mov	r3, r1
 8019c7e:	697a      	ldr	r2, [r7, #20]
 8019c80:	69b9      	ldr	r1, [r7, #24]
 8019c82:	6878      	ldr	r0, [r7, #4]
 8019c84:	f005 fbc6 	bl	801f414 <tcp_rst>
    }
    last_state = pcb->state;
 8019c88:	687b      	ldr	r3, [r7, #4]
 8019c8a:	7d1b      	ldrb	r3, [r3, #20]
 8019c8c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8019c8e:	6878      	ldr	r0, [r7, #4]
 8019c90:	f7ff fd34 	bl	80196fc <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8019c94:	693b      	ldr	r3, [r7, #16]
 8019c96:	2b00      	cmp	r3, #0
 8019c98:	d004      	beq.n	8019ca4 <tcp_abandon+0x154>
 8019c9a:	693b      	ldr	r3, [r7, #16]
 8019c9c:	f06f 010c 	mvn.w	r1, #12
 8019ca0:	68f8      	ldr	r0, [r7, #12]
 8019ca2:	4798      	blx	r3
  }
}
 8019ca4:	3728      	adds	r7, #40	; 0x28
 8019ca6:	46bd      	mov	sp, r7
 8019ca8:	bd80      	pop	{r7, pc}
 8019caa:	bf00      	nop
 8019cac:	0802bf38 	.word	0x0802bf38
 8019cb0:	0802c07c 	.word	0x0802c07c
 8019cb4:	0802bf7c 	.word	0x0802bf7c
 8019cb8:	0802c098 	.word	0x0802c098
 8019cbc:	2001bd1c 	.word	0x2001bd1c
 8019cc0:	2001bd18 	.word	0x2001bd18
 8019cc4:	2001bd0c 	.word	0x2001bd0c
 8019cc8:	2001bd08 	.word	0x2001bd08

08019ccc <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8019ccc:	b580      	push	{r7, lr}
 8019cce:	b082      	sub	sp, #8
 8019cd0:	af00      	add	r7, sp, #0
 8019cd2:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8019cd4:	2101      	movs	r1, #1
 8019cd6:	6878      	ldr	r0, [r7, #4]
 8019cd8:	f7ff ff3a 	bl	8019b50 <tcp_abandon>
}
 8019cdc:	bf00      	nop
 8019cde:	3708      	adds	r7, #8
 8019ce0:	46bd      	mov	sp, r7
 8019ce2:	bd80      	pop	{r7, pc}

08019ce4 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8019ce4:	b580      	push	{r7, lr}
 8019ce6:	b088      	sub	sp, #32
 8019ce8:	af00      	add	r7, sp, #0
 8019cea:	60f8      	str	r0, [r7, #12]
 8019cec:	60b9      	str	r1, [r7, #8]
 8019cee:	4613      	mov	r3, r2
 8019cf0:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8019cf2:	2304      	movs	r3, #4
 8019cf4:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8019cf6:	68bb      	ldr	r3, [r7, #8]
 8019cf8:	2b00      	cmp	r3, #0
 8019cfa:	d101      	bne.n	8019d00 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8019cfc:	4b3e      	ldr	r3, [pc, #248]	; (8019df8 <tcp_bind+0x114>)
 8019cfe:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8019d00:	68fb      	ldr	r3, [r7, #12]
 8019d02:	2b00      	cmp	r3, #0
 8019d04:	d109      	bne.n	8019d1a <tcp_bind+0x36>
 8019d06:	4b3d      	ldr	r3, [pc, #244]	; (8019dfc <tcp_bind+0x118>)
 8019d08:	f240 22a9 	movw	r2, #681	; 0x2a9
 8019d0c:	493c      	ldr	r1, [pc, #240]	; (8019e00 <tcp_bind+0x11c>)
 8019d0e:	483d      	ldr	r0, [pc, #244]	; (8019e04 <tcp_bind+0x120>)
 8019d10:	f00b fd4c 	bl	80257ac <iprintf>
 8019d14:	f06f 030f 	mvn.w	r3, #15
 8019d18:	e06a      	b.n	8019df0 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8019d1a:	68fb      	ldr	r3, [r7, #12]
 8019d1c:	7d1b      	ldrb	r3, [r3, #20]
 8019d1e:	2b00      	cmp	r3, #0
 8019d20:	d009      	beq.n	8019d36 <tcp_bind+0x52>
 8019d22:	4b36      	ldr	r3, [pc, #216]	; (8019dfc <tcp_bind+0x118>)
 8019d24:	f240 22ab 	movw	r2, #683	; 0x2ab
 8019d28:	4937      	ldr	r1, [pc, #220]	; (8019e08 <tcp_bind+0x124>)
 8019d2a:	4836      	ldr	r0, [pc, #216]	; (8019e04 <tcp_bind+0x120>)
 8019d2c:	f00b fd3e 	bl	80257ac <iprintf>
 8019d30:	f06f 0305 	mvn.w	r3, #5
 8019d34:	e05c      	b.n	8019df0 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8019d36:	88fb      	ldrh	r3, [r7, #6]
 8019d38:	2b00      	cmp	r3, #0
 8019d3a:	d109      	bne.n	8019d50 <tcp_bind+0x6c>
    port = tcp_new_port();
 8019d3c:	f000 f914 	bl	8019f68 <tcp_new_port>
 8019d40:	4603      	mov	r3, r0
 8019d42:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8019d44:	88fb      	ldrh	r3, [r7, #6]
 8019d46:	2b00      	cmp	r3, #0
 8019d48:	d135      	bne.n	8019db6 <tcp_bind+0xd2>
      return ERR_BUF;
 8019d4a:	f06f 0301 	mvn.w	r3, #1
 8019d4e:	e04f      	b.n	8019df0 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8019d50:	2300      	movs	r3, #0
 8019d52:	61fb      	str	r3, [r7, #28]
 8019d54:	e02b      	b.n	8019dae <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8019d56:	4a2d      	ldr	r2, [pc, #180]	; (8019e0c <tcp_bind+0x128>)
 8019d58:	69fb      	ldr	r3, [r7, #28]
 8019d5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019d5e:	681b      	ldr	r3, [r3, #0]
 8019d60:	61bb      	str	r3, [r7, #24]
 8019d62:	e01e      	b.n	8019da2 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8019d64:	69bb      	ldr	r3, [r7, #24]
 8019d66:	8adb      	ldrh	r3, [r3, #22]
 8019d68:	88fa      	ldrh	r2, [r7, #6]
 8019d6a:	429a      	cmp	r2, r3
 8019d6c:	d116      	bne.n	8019d9c <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8019d6e:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8019d70:	2b00      	cmp	r3, #0
 8019d72:	d010      	beq.n	8019d96 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8019d74:	69bb      	ldr	r3, [r7, #24]
 8019d76:	681b      	ldr	r3, [r3, #0]
 8019d78:	2b00      	cmp	r3, #0
 8019d7a:	d00c      	beq.n	8019d96 <tcp_bind+0xb2>
 8019d7c:	68bb      	ldr	r3, [r7, #8]
 8019d7e:	2b00      	cmp	r3, #0
 8019d80:	d009      	beq.n	8019d96 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8019d82:	68bb      	ldr	r3, [r7, #8]
 8019d84:	681b      	ldr	r3, [r3, #0]
 8019d86:	2b00      	cmp	r3, #0
 8019d88:	d005      	beq.n	8019d96 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8019d8a:	69bb      	ldr	r3, [r7, #24]
 8019d8c:	681a      	ldr	r2, [r3, #0]
 8019d8e:	68bb      	ldr	r3, [r7, #8]
 8019d90:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8019d92:	429a      	cmp	r2, r3
 8019d94:	d102      	bne.n	8019d9c <tcp_bind+0xb8>
              return ERR_USE;
 8019d96:	f06f 0307 	mvn.w	r3, #7
 8019d9a:	e029      	b.n	8019df0 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8019d9c:	69bb      	ldr	r3, [r7, #24]
 8019d9e:	68db      	ldr	r3, [r3, #12]
 8019da0:	61bb      	str	r3, [r7, #24]
 8019da2:	69bb      	ldr	r3, [r7, #24]
 8019da4:	2b00      	cmp	r3, #0
 8019da6:	d1dd      	bne.n	8019d64 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8019da8:	69fb      	ldr	r3, [r7, #28]
 8019daa:	3301      	adds	r3, #1
 8019dac:	61fb      	str	r3, [r7, #28]
 8019dae:	69fa      	ldr	r2, [r7, #28]
 8019db0:	697b      	ldr	r3, [r7, #20]
 8019db2:	429a      	cmp	r2, r3
 8019db4:	dbcf      	blt.n	8019d56 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8019db6:	68bb      	ldr	r3, [r7, #8]
 8019db8:	2b00      	cmp	r3, #0
 8019dba:	d00c      	beq.n	8019dd6 <tcp_bind+0xf2>
 8019dbc:	68bb      	ldr	r3, [r7, #8]
 8019dbe:	681b      	ldr	r3, [r3, #0]
 8019dc0:	2b00      	cmp	r3, #0
 8019dc2:	d008      	beq.n	8019dd6 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8019dc4:	68bb      	ldr	r3, [r7, #8]
 8019dc6:	2b00      	cmp	r3, #0
 8019dc8:	d002      	beq.n	8019dd0 <tcp_bind+0xec>
 8019dca:	68bb      	ldr	r3, [r7, #8]
 8019dcc:	681b      	ldr	r3, [r3, #0]
 8019dce:	e000      	b.n	8019dd2 <tcp_bind+0xee>
 8019dd0:	2300      	movs	r3, #0
 8019dd2:	68fa      	ldr	r2, [r7, #12]
 8019dd4:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8019dd6:	68fb      	ldr	r3, [r7, #12]
 8019dd8:	88fa      	ldrh	r2, [r7, #6]
 8019dda:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8019ddc:	4b0c      	ldr	r3, [pc, #48]	; (8019e10 <tcp_bind+0x12c>)
 8019dde:	681a      	ldr	r2, [r3, #0]
 8019de0:	68fb      	ldr	r3, [r7, #12]
 8019de2:	60da      	str	r2, [r3, #12]
 8019de4:	4a0a      	ldr	r2, [pc, #40]	; (8019e10 <tcp_bind+0x12c>)
 8019de6:	68fb      	ldr	r3, [r7, #12]
 8019de8:	6013      	str	r3, [r2, #0]
 8019dea:	f005 fcd5 	bl	801f798 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8019dee:	2300      	movs	r3, #0
}
 8019df0:	4618      	mov	r0, r3
 8019df2:	3720      	adds	r7, #32
 8019df4:	46bd      	mov	sp, r7
 8019df6:	bd80      	pop	{r7, pc}
 8019df8:	0802e468 	.word	0x0802e468
 8019dfc:	0802bf38 	.word	0x0802bf38
 8019e00:	0802c0cc 	.word	0x0802c0cc
 8019e04:	0802bf7c 	.word	0x0802bf7c
 8019e08:	0802c0e4 	.word	0x0802c0e4
 8019e0c:	0802e430 	.word	0x0802e430
 8019e10:	2001bd18 	.word	0x2001bd18

08019e14 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8019e14:	b580      	push	{r7, lr}
 8019e16:	b084      	sub	sp, #16
 8019e18:	af00      	add	r7, sp, #0
 8019e1a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8019e1c:	687b      	ldr	r3, [r7, #4]
 8019e1e:	2b00      	cmp	r3, #0
 8019e20:	d106      	bne.n	8019e30 <tcp_update_rcv_ann_wnd+0x1c>
 8019e22:	4b25      	ldr	r3, [pc, #148]	; (8019eb8 <tcp_update_rcv_ann_wnd+0xa4>)
 8019e24:	f240 32a6 	movw	r2, #934	; 0x3a6
 8019e28:	4924      	ldr	r1, [pc, #144]	; (8019ebc <tcp_update_rcv_ann_wnd+0xa8>)
 8019e2a:	4825      	ldr	r0, [pc, #148]	; (8019ec0 <tcp_update_rcv_ann_wnd+0xac>)
 8019e2c:	f00b fcbe 	bl	80257ac <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8019e30:	687b      	ldr	r3, [r7, #4]
 8019e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019e34:	687a      	ldr	r2, [r7, #4]
 8019e36:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8019e38:	4413      	add	r3, r2
 8019e3a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8019e3c:	687b      	ldr	r3, [r7, #4]
 8019e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019e40:	687a      	ldr	r2, [r7, #4]
 8019e42:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8019e44:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8019e48:	bf28      	it	cs
 8019e4a:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8019e4e:	b292      	uxth	r2, r2
 8019e50:	4413      	add	r3, r2
 8019e52:	68fa      	ldr	r2, [r7, #12]
 8019e54:	1ad3      	subs	r3, r2, r3
 8019e56:	2b00      	cmp	r3, #0
 8019e58:	db08      	blt.n	8019e6c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8019e5a:	687b      	ldr	r3, [r7, #4]
 8019e5c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8019e5e:	687b      	ldr	r3, [r7, #4]
 8019e60:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8019e62:	687b      	ldr	r3, [r7, #4]
 8019e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019e66:	68fa      	ldr	r2, [r7, #12]
 8019e68:	1ad3      	subs	r3, r2, r3
 8019e6a:	e020      	b.n	8019eae <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8019e6c:	687b      	ldr	r3, [r7, #4]
 8019e6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8019e70:	687b      	ldr	r3, [r7, #4]
 8019e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019e74:	1ad3      	subs	r3, r2, r3
 8019e76:	2b00      	cmp	r3, #0
 8019e78:	dd03      	ble.n	8019e82 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8019e7a:	687b      	ldr	r3, [r7, #4]
 8019e7c:	2200      	movs	r2, #0
 8019e7e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8019e80:	e014      	b.n	8019eac <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8019e82:	687b      	ldr	r3, [r7, #4]
 8019e84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019e86:	687b      	ldr	r3, [r7, #4]
 8019e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019e8a:	1ad3      	subs	r3, r2, r3
 8019e8c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8019e8e:	68bb      	ldr	r3, [r7, #8]
 8019e90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8019e94:	d306      	bcc.n	8019ea4 <tcp_update_rcv_ann_wnd+0x90>
 8019e96:	4b08      	ldr	r3, [pc, #32]	; (8019eb8 <tcp_update_rcv_ann_wnd+0xa4>)
 8019e98:	f240 32b6 	movw	r2, #950	; 0x3b6
 8019e9c:	4909      	ldr	r1, [pc, #36]	; (8019ec4 <tcp_update_rcv_ann_wnd+0xb0>)
 8019e9e:	4808      	ldr	r0, [pc, #32]	; (8019ec0 <tcp_update_rcv_ann_wnd+0xac>)
 8019ea0:	f00b fc84 	bl	80257ac <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8019ea4:	68bb      	ldr	r3, [r7, #8]
 8019ea6:	b29a      	uxth	r2, r3
 8019ea8:	687b      	ldr	r3, [r7, #4]
 8019eaa:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8019eac:	2300      	movs	r3, #0
  }
}
 8019eae:	4618      	mov	r0, r3
 8019eb0:	3710      	adds	r7, #16
 8019eb2:	46bd      	mov	sp, r7
 8019eb4:	bd80      	pop	{r7, pc}
 8019eb6:	bf00      	nop
 8019eb8:	0802bf38 	.word	0x0802bf38
 8019ebc:	0802c194 	.word	0x0802c194
 8019ec0:	0802bf7c 	.word	0x0802bf7c
 8019ec4:	0802c1b8 	.word	0x0802c1b8

08019ec8 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8019ec8:	b580      	push	{r7, lr}
 8019eca:	b084      	sub	sp, #16
 8019ecc:	af00      	add	r7, sp, #0
 8019ece:	6078      	str	r0, [r7, #4]
 8019ed0:	460b      	mov	r3, r1
 8019ed2:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8019ed4:	687b      	ldr	r3, [r7, #4]
 8019ed6:	2b00      	cmp	r3, #0
 8019ed8:	d107      	bne.n	8019eea <tcp_recved+0x22>
 8019eda:	4b1f      	ldr	r3, [pc, #124]	; (8019f58 <tcp_recved+0x90>)
 8019edc:	f240 32cf 	movw	r2, #975	; 0x3cf
 8019ee0:	491e      	ldr	r1, [pc, #120]	; (8019f5c <tcp_recved+0x94>)
 8019ee2:	481f      	ldr	r0, [pc, #124]	; (8019f60 <tcp_recved+0x98>)
 8019ee4:	f00b fc62 	bl	80257ac <iprintf>
 8019ee8:	e032      	b.n	8019f50 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8019eea:	687b      	ldr	r3, [r7, #4]
 8019eec:	7d1b      	ldrb	r3, [r3, #20]
 8019eee:	2b01      	cmp	r3, #1
 8019ef0:	d106      	bne.n	8019f00 <tcp_recved+0x38>
 8019ef2:	4b19      	ldr	r3, [pc, #100]	; (8019f58 <tcp_recved+0x90>)
 8019ef4:	f240 32d2 	movw	r2, #978	; 0x3d2
 8019ef8:	491a      	ldr	r1, [pc, #104]	; (8019f64 <tcp_recved+0x9c>)
 8019efa:	4819      	ldr	r0, [pc, #100]	; (8019f60 <tcp_recved+0x98>)
 8019efc:	f00b fc56 	bl	80257ac <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8019f00:	687b      	ldr	r3, [r7, #4]
 8019f02:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8019f04:	887b      	ldrh	r3, [r7, #2]
 8019f06:	4413      	add	r3, r2
 8019f08:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8019f0a:	89fb      	ldrh	r3, [r7, #14]
 8019f0c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8019f10:	d804      	bhi.n	8019f1c <tcp_recved+0x54>
 8019f12:	687b      	ldr	r3, [r7, #4]
 8019f14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019f16:	89fa      	ldrh	r2, [r7, #14]
 8019f18:	429a      	cmp	r2, r3
 8019f1a:	d204      	bcs.n	8019f26 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8019f1c:	687b      	ldr	r3, [r7, #4]
 8019f1e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8019f22:	851a      	strh	r2, [r3, #40]	; 0x28
 8019f24:	e002      	b.n	8019f2c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8019f26:	687b      	ldr	r3, [r7, #4]
 8019f28:	89fa      	ldrh	r2, [r7, #14]
 8019f2a:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8019f2c:	6878      	ldr	r0, [r7, #4]
 8019f2e:	f7ff ff71 	bl	8019e14 <tcp_update_rcv_ann_wnd>
 8019f32:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8019f34:	68bb      	ldr	r3, [r7, #8]
 8019f36:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8019f3a:	d309      	bcc.n	8019f50 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8019f3c:	687b      	ldr	r3, [r7, #4]
 8019f3e:	8b5b      	ldrh	r3, [r3, #26]
 8019f40:	f043 0302 	orr.w	r3, r3, #2
 8019f44:	b29a      	uxth	r2, r3
 8019f46:	687b      	ldr	r3, [r7, #4]
 8019f48:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8019f4a:	6878      	ldr	r0, [r7, #4]
 8019f4c:	f004 fcae 	bl	801e8ac <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8019f50:	3710      	adds	r7, #16
 8019f52:	46bd      	mov	sp, r7
 8019f54:	bd80      	pop	{r7, pc}
 8019f56:	bf00      	nop
 8019f58:	0802bf38 	.word	0x0802bf38
 8019f5c:	0802c1d4 	.word	0x0802c1d4
 8019f60:	0802bf7c 	.word	0x0802bf7c
 8019f64:	0802c1ec 	.word	0x0802c1ec

08019f68 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8019f68:	b480      	push	{r7}
 8019f6a:	b083      	sub	sp, #12
 8019f6c:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8019f6e:	2300      	movs	r3, #0
 8019f70:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8019f72:	4b1e      	ldr	r3, [pc, #120]	; (8019fec <tcp_new_port+0x84>)
 8019f74:	881b      	ldrh	r3, [r3, #0]
 8019f76:	3301      	adds	r3, #1
 8019f78:	b29a      	uxth	r2, r3
 8019f7a:	4b1c      	ldr	r3, [pc, #112]	; (8019fec <tcp_new_port+0x84>)
 8019f7c:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8019f7e:	4b1b      	ldr	r3, [pc, #108]	; (8019fec <tcp_new_port+0x84>)
 8019f80:	881b      	ldrh	r3, [r3, #0]
 8019f82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019f86:	4293      	cmp	r3, r2
 8019f88:	d103      	bne.n	8019f92 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8019f8a:	4b18      	ldr	r3, [pc, #96]	; (8019fec <tcp_new_port+0x84>)
 8019f8c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8019f90:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8019f92:	2300      	movs	r3, #0
 8019f94:	71fb      	strb	r3, [r7, #7]
 8019f96:	e01e      	b.n	8019fd6 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8019f98:	79fb      	ldrb	r3, [r7, #7]
 8019f9a:	4a15      	ldr	r2, [pc, #84]	; (8019ff0 <tcp_new_port+0x88>)
 8019f9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019fa0:	681b      	ldr	r3, [r3, #0]
 8019fa2:	603b      	str	r3, [r7, #0]
 8019fa4:	e011      	b.n	8019fca <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8019fa6:	683b      	ldr	r3, [r7, #0]
 8019fa8:	8ada      	ldrh	r2, [r3, #22]
 8019faa:	4b10      	ldr	r3, [pc, #64]	; (8019fec <tcp_new_port+0x84>)
 8019fac:	881b      	ldrh	r3, [r3, #0]
 8019fae:	429a      	cmp	r2, r3
 8019fb0:	d108      	bne.n	8019fc4 <tcp_new_port+0x5c>
        n++;
 8019fb2:	88bb      	ldrh	r3, [r7, #4]
 8019fb4:	3301      	adds	r3, #1
 8019fb6:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8019fb8:	88bb      	ldrh	r3, [r7, #4]
 8019fba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8019fbe:	d3d8      	bcc.n	8019f72 <tcp_new_port+0xa>
          return 0;
 8019fc0:	2300      	movs	r3, #0
 8019fc2:	e00d      	b.n	8019fe0 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8019fc4:	683b      	ldr	r3, [r7, #0]
 8019fc6:	68db      	ldr	r3, [r3, #12]
 8019fc8:	603b      	str	r3, [r7, #0]
 8019fca:	683b      	ldr	r3, [r7, #0]
 8019fcc:	2b00      	cmp	r3, #0
 8019fce:	d1ea      	bne.n	8019fa6 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8019fd0:	79fb      	ldrb	r3, [r7, #7]
 8019fd2:	3301      	adds	r3, #1
 8019fd4:	71fb      	strb	r3, [r7, #7]
 8019fd6:	79fb      	ldrb	r3, [r7, #7]
 8019fd8:	2b03      	cmp	r3, #3
 8019fda:	d9dd      	bls.n	8019f98 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8019fdc:	4b03      	ldr	r3, [pc, #12]	; (8019fec <tcp_new_port+0x84>)
 8019fde:	881b      	ldrh	r3, [r3, #0]
}
 8019fe0:	4618      	mov	r0, r3
 8019fe2:	370c      	adds	r7, #12
 8019fe4:	46bd      	mov	sp, r7
 8019fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fea:	4770      	bx	lr
 8019fec:	10000060 	.word	0x10000060
 8019ff0:	0802e430 	.word	0x0802e430

08019ff4 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 8019ff4:	b580      	push	{r7, lr}
 8019ff6:	b08a      	sub	sp, #40	; 0x28
 8019ff8:	af00      	add	r7, sp, #0
 8019ffa:	60f8      	str	r0, [r7, #12]
 8019ffc:	60b9      	str	r1, [r7, #8]
 8019ffe:	603b      	str	r3, [r7, #0]
 801a000:	4613      	mov	r3, r2
 801a002:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 801a004:	2300      	movs	r3, #0
 801a006:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801a008:	68fb      	ldr	r3, [r7, #12]
 801a00a:	2b00      	cmp	r3, #0
 801a00c:	d109      	bne.n	801a022 <tcp_connect+0x2e>
 801a00e:	4b7d      	ldr	r3, [pc, #500]	; (801a204 <tcp_connect+0x210>)
 801a010:	f240 4235 	movw	r2, #1077	; 0x435
 801a014:	497c      	ldr	r1, [pc, #496]	; (801a208 <tcp_connect+0x214>)
 801a016:	487d      	ldr	r0, [pc, #500]	; (801a20c <tcp_connect+0x218>)
 801a018:	f00b fbc8 	bl	80257ac <iprintf>
 801a01c:	f06f 030f 	mvn.w	r3, #15
 801a020:	e0ec      	b.n	801a1fc <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801a022:	68bb      	ldr	r3, [r7, #8]
 801a024:	2b00      	cmp	r3, #0
 801a026:	d109      	bne.n	801a03c <tcp_connect+0x48>
 801a028:	4b76      	ldr	r3, [pc, #472]	; (801a204 <tcp_connect+0x210>)
 801a02a:	f240 4236 	movw	r2, #1078	; 0x436
 801a02e:	4978      	ldr	r1, [pc, #480]	; (801a210 <tcp_connect+0x21c>)
 801a030:	4876      	ldr	r0, [pc, #472]	; (801a20c <tcp_connect+0x218>)
 801a032:	f00b fbbb 	bl	80257ac <iprintf>
 801a036:	f06f 030f 	mvn.w	r3, #15
 801a03a:	e0df      	b.n	801a1fc <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 801a03c:	68fb      	ldr	r3, [r7, #12]
 801a03e:	7d1b      	ldrb	r3, [r3, #20]
 801a040:	2b00      	cmp	r3, #0
 801a042:	d009      	beq.n	801a058 <tcp_connect+0x64>
 801a044:	4b6f      	ldr	r3, [pc, #444]	; (801a204 <tcp_connect+0x210>)
 801a046:	f44f 6287 	mov.w	r2, #1080	; 0x438
 801a04a:	4972      	ldr	r1, [pc, #456]	; (801a214 <tcp_connect+0x220>)
 801a04c:	486f      	ldr	r0, [pc, #444]	; (801a20c <tcp_connect+0x218>)
 801a04e:	f00b fbad 	bl	80257ac <iprintf>
 801a052:	f06f 0309 	mvn.w	r3, #9
 801a056:	e0d1      	b.n	801a1fc <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 801a058:	68bb      	ldr	r3, [r7, #8]
 801a05a:	2b00      	cmp	r3, #0
 801a05c:	d002      	beq.n	801a064 <tcp_connect+0x70>
 801a05e:	68bb      	ldr	r3, [r7, #8]
 801a060:	681b      	ldr	r3, [r3, #0]
 801a062:	e000      	b.n	801a066 <tcp_connect+0x72>
 801a064:	2300      	movs	r3, #0
 801a066:	68fa      	ldr	r2, [r7, #12]
 801a068:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 801a06a:	68fb      	ldr	r3, [r7, #12]
 801a06c:	88fa      	ldrh	r2, [r7, #6]
 801a06e:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801a070:	68fb      	ldr	r3, [r7, #12]
 801a072:	7a1b      	ldrb	r3, [r3, #8]
 801a074:	2b00      	cmp	r3, #0
 801a076:	d006      	beq.n	801a086 <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 801a078:	68fb      	ldr	r3, [r7, #12]
 801a07a:	7a1b      	ldrb	r3, [r3, #8]
 801a07c:	4618      	mov	r0, r3
 801a07e:	f7fe fc8f 	bl	80189a0 <netif_get_by_index>
 801a082:	6278      	str	r0, [r7, #36]	; 0x24
 801a084:	e005      	b.n	801a092 <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 801a086:	68fb      	ldr	r3, [r7, #12]
 801a088:	3304      	adds	r3, #4
 801a08a:	4618      	mov	r0, r3
 801a08c:	f009 f964 	bl	8023358 <ip4_route>
 801a090:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 801a092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a094:	2b00      	cmp	r3, #0
 801a096:	d102      	bne.n	801a09e <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 801a098:	f06f 0303 	mvn.w	r3, #3
 801a09c:	e0ae      	b.n	801a1fc <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 801a09e:	68fb      	ldr	r3, [r7, #12]
 801a0a0:	2b00      	cmp	r3, #0
 801a0a2:	d003      	beq.n	801a0ac <tcp_connect+0xb8>
 801a0a4:	68fb      	ldr	r3, [r7, #12]
 801a0a6:	681b      	ldr	r3, [r3, #0]
 801a0a8:	2b00      	cmp	r3, #0
 801a0aa:	d111      	bne.n	801a0d0 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 801a0ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a0ae:	2b00      	cmp	r3, #0
 801a0b0:	d002      	beq.n	801a0b8 <tcp_connect+0xc4>
 801a0b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a0b4:	3304      	adds	r3, #4
 801a0b6:	e000      	b.n	801a0ba <tcp_connect+0xc6>
 801a0b8:	2300      	movs	r3, #0
 801a0ba:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 801a0bc:	69fb      	ldr	r3, [r7, #28]
 801a0be:	2b00      	cmp	r3, #0
 801a0c0:	d102      	bne.n	801a0c8 <tcp_connect+0xd4>
      return ERR_RTE;
 801a0c2:	f06f 0303 	mvn.w	r3, #3
 801a0c6:	e099      	b.n	801a1fc <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801a0c8:	69fb      	ldr	r3, [r7, #28]
 801a0ca:	681a      	ldr	r2, [r3, #0]
 801a0cc:	68fb      	ldr	r3, [r7, #12]
 801a0ce:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 801a0d0:	68fb      	ldr	r3, [r7, #12]
 801a0d2:	8adb      	ldrh	r3, [r3, #22]
 801a0d4:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 801a0d6:	68fb      	ldr	r3, [r7, #12]
 801a0d8:	8adb      	ldrh	r3, [r3, #22]
 801a0da:	2b00      	cmp	r3, #0
 801a0dc:	d10c      	bne.n	801a0f8 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 801a0de:	f7ff ff43 	bl	8019f68 <tcp_new_port>
 801a0e2:	4603      	mov	r3, r0
 801a0e4:	461a      	mov	r2, r3
 801a0e6:	68fb      	ldr	r3, [r7, #12]
 801a0e8:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 801a0ea:	68fb      	ldr	r3, [r7, #12]
 801a0ec:	8adb      	ldrh	r3, [r3, #22]
 801a0ee:	2b00      	cmp	r3, #0
 801a0f0:	d102      	bne.n	801a0f8 <tcp_connect+0x104>
      return ERR_BUF;
 801a0f2:	f06f 0301 	mvn.w	r3, #1
 801a0f6:	e081      	b.n	801a1fc <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 801a0f8:	68f8      	ldr	r0, [r7, #12]
 801a0fa:	f001 f84f 	bl	801b19c <tcp_next_iss>
 801a0fe:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 801a100:	68fb      	ldr	r3, [r7, #12]
 801a102:	2200      	movs	r2, #0
 801a104:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 801a106:	68fb      	ldr	r3, [r7, #12]
 801a108:	697a      	ldr	r2, [r7, #20]
 801a10a:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 801a10c:	697b      	ldr	r3, [r7, #20]
 801a10e:	1e5a      	subs	r2, r3, #1
 801a110:	68fb      	ldr	r3, [r7, #12]
 801a112:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 801a114:	697b      	ldr	r3, [r7, #20]
 801a116:	1e5a      	subs	r2, r3, #1
 801a118:	68fb      	ldr	r3, [r7, #12]
 801a11a:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 801a11c:	697b      	ldr	r3, [r7, #20]
 801a11e:	1e5a      	subs	r2, r3, #1
 801a120:	68fb      	ldr	r3, [r7, #12]
 801a122:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801a124:	68fb      	ldr	r3, [r7, #12]
 801a126:	f44f 6206 	mov.w	r2, #2144	; 0x860
 801a12a:	855a      	strh	r2, [r3, #42]	; 0x2a
 801a12c:	68fb      	ldr	r3, [r7, #12]
 801a12e:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801a130:	68fb      	ldr	r3, [r7, #12]
 801a132:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801a134:	68fb      	ldr	r3, [r7, #12]
 801a136:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801a138:	68fb      	ldr	r3, [r7, #12]
 801a13a:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 801a13c:	68fb      	ldr	r3, [r7, #12]
 801a13e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 801a142:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 801a146:	68fb      	ldr	r3, [r7, #12]
 801a148:	f44f 7206 	mov.w	r2, #536	; 0x218
 801a14c:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 801a14e:	68fb      	ldr	r3, [r7, #12]
 801a150:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 801a152:	68fb      	ldr	r3, [r7, #12]
 801a154:	3304      	adds	r3, #4
 801a156:	461a      	mov	r2, r3
 801a158:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a15a:	f001 f845 	bl	801b1e8 <tcp_eff_send_mss_netif>
 801a15e:	4603      	mov	r3, r0
 801a160:	461a      	mov	r2, r3
 801a162:	68fb      	ldr	r3, [r7, #12]
 801a164:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 801a166:	68fb      	ldr	r3, [r7, #12]
 801a168:	2201      	movs	r2, #1
 801a16a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 801a16e:	68fb      	ldr	r3, [r7, #12]
 801a170:	683a      	ldr	r2, [r7, #0]
 801a172:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 801a176:	2102      	movs	r1, #2
 801a178:	68f8      	ldr	r0, [r7, #12]
 801a17a:	f004 faa9 	bl	801e6d0 <tcp_enqueue_flags>
 801a17e:	4603      	mov	r3, r0
 801a180:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 801a182:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801a186:	2b00      	cmp	r3, #0
 801a188:	d136      	bne.n	801a1f8 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 801a18a:	68fb      	ldr	r3, [r7, #12]
 801a18c:	2202      	movs	r2, #2
 801a18e:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 801a190:	8b7b      	ldrh	r3, [r7, #26]
 801a192:	2b00      	cmp	r3, #0
 801a194:	d021      	beq.n	801a1da <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 801a196:	4b20      	ldr	r3, [pc, #128]	; (801a218 <tcp_connect+0x224>)
 801a198:	681b      	ldr	r3, [r3, #0]
 801a19a:	68fa      	ldr	r2, [r7, #12]
 801a19c:	429a      	cmp	r2, r3
 801a19e:	d105      	bne.n	801a1ac <tcp_connect+0x1b8>
 801a1a0:	4b1d      	ldr	r3, [pc, #116]	; (801a218 <tcp_connect+0x224>)
 801a1a2:	681b      	ldr	r3, [r3, #0]
 801a1a4:	68db      	ldr	r3, [r3, #12]
 801a1a6:	4a1c      	ldr	r2, [pc, #112]	; (801a218 <tcp_connect+0x224>)
 801a1a8:	6013      	str	r3, [r2, #0]
 801a1aa:	e013      	b.n	801a1d4 <tcp_connect+0x1e0>
 801a1ac:	4b1a      	ldr	r3, [pc, #104]	; (801a218 <tcp_connect+0x224>)
 801a1ae:	681b      	ldr	r3, [r3, #0]
 801a1b0:	623b      	str	r3, [r7, #32]
 801a1b2:	e00c      	b.n	801a1ce <tcp_connect+0x1da>
 801a1b4:	6a3b      	ldr	r3, [r7, #32]
 801a1b6:	68db      	ldr	r3, [r3, #12]
 801a1b8:	68fa      	ldr	r2, [r7, #12]
 801a1ba:	429a      	cmp	r2, r3
 801a1bc:	d104      	bne.n	801a1c8 <tcp_connect+0x1d4>
 801a1be:	68fb      	ldr	r3, [r7, #12]
 801a1c0:	68da      	ldr	r2, [r3, #12]
 801a1c2:	6a3b      	ldr	r3, [r7, #32]
 801a1c4:	60da      	str	r2, [r3, #12]
 801a1c6:	e005      	b.n	801a1d4 <tcp_connect+0x1e0>
 801a1c8:	6a3b      	ldr	r3, [r7, #32]
 801a1ca:	68db      	ldr	r3, [r3, #12]
 801a1cc:	623b      	str	r3, [r7, #32]
 801a1ce:	6a3b      	ldr	r3, [r7, #32]
 801a1d0:	2b00      	cmp	r3, #0
 801a1d2:	d1ef      	bne.n	801a1b4 <tcp_connect+0x1c0>
 801a1d4:	68fb      	ldr	r3, [r7, #12]
 801a1d6:	2200      	movs	r2, #0
 801a1d8:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 801a1da:	4b10      	ldr	r3, [pc, #64]	; (801a21c <tcp_connect+0x228>)
 801a1dc:	681a      	ldr	r2, [r3, #0]
 801a1de:	68fb      	ldr	r3, [r7, #12]
 801a1e0:	60da      	str	r2, [r3, #12]
 801a1e2:	4a0e      	ldr	r2, [pc, #56]	; (801a21c <tcp_connect+0x228>)
 801a1e4:	68fb      	ldr	r3, [r7, #12]
 801a1e6:	6013      	str	r3, [r2, #0]
 801a1e8:	f005 fad6 	bl	801f798 <tcp_timer_needed>
 801a1ec:	4b0c      	ldr	r3, [pc, #48]	; (801a220 <tcp_connect+0x22c>)
 801a1ee:	2201      	movs	r2, #1
 801a1f0:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 801a1f2:	68f8      	ldr	r0, [r7, #12]
 801a1f4:	f004 fb5a 	bl	801e8ac <tcp_output>
  }
  return ret;
 801a1f8:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 801a1fc:	4618      	mov	r0, r3
 801a1fe:	3728      	adds	r7, #40	; 0x28
 801a200:	46bd      	mov	sp, r7
 801a202:	bd80      	pop	{r7, pc}
 801a204:	0802bf38 	.word	0x0802bf38
 801a208:	0802c214 	.word	0x0802c214
 801a20c:	0802bf7c 	.word	0x0802bf7c
 801a210:	0802c230 	.word	0x0802c230
 801a214:	0802c24c 	.word	0x0802c24c
 801a218:	2001bd18 	.word	0x2001bd18
 801a21c:	2001bd0c 	.word	0x2001bd0c
 801a220:	2001bd08 	.word	0x2001bd08

0801a224 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 801a224:	b5b0      	push	{r4, r5, r7, lr}
 801a226:	b090      	sub	sp, #64	; 0x40
 801a228:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 801a22a:	2300      	movs	r3, #0
 801a22c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 801a230:	4b94      	ldr	r3, [pc, #592]	; (801a484 <tcp_slowtmr+0x260>)
 801a232:	681b      	ldr	r3, [r3, #0]
 801a234:	3301      	adds	r3, #1
 801a236:	4a93      	ldr	r2, [pc, #588]	; (801a484 <tcp_slowtmr+0x260>)
 801a238:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 801a23a:	4b93      	ldr	r3, [pc, #588]	; (801a488 <tcp_slowtmr+0x264>)
 801a23c:	781b      	ldrb	r3, [r3, #0]
 801a23e:	3301      	adds	r3, #1
 801a240:	b2da      	uxtb	r2, r3
 801a242:	4b91      	ldr	r3, [pc, #580]	; (801a488 <tcp_slowtmr+0x264>)
 801a244:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 801a246:	2300      	movs	r3, #0
 801a248:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 801a24a:	4b90      	ldr	r3, [pc, #576]	; (801a48c <tcp_slowtmr+0x268>)
 801a24c:	681b      	ldr	r3, [r3, #0]
 801a24e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 801a250:	e29f      	b.n	801a792 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801a252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a254:	7d1b      	ldrb	r3, [r3, #20]
 801a256:	2b00      	cmp	r3, #0
 801a258:	d106      	bne.n	801a268 <tcp_slowtmr+0x44>
 801a25a:	4b8d      	ldr	r3, [pc, #564]	; (801a490 <tcp_slowtmr+0x26c>)
 801a25c:	f240 42be 	movw	r2, #1214	; 0x4be
 801a260:	498c      	ldr	r1, [pc, #560]	; (801a494 <tcp_slowtmr+0x270>)
 801a262:	488d      	ldr	r0, [pc, #564]	; (801a498 <tcp_slowtmr+0x274>)
 801a264:	f00b faa2 	bl	80257ac <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 801a268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a26a:	7d1b      	ldrb	r3, [r3, #20]
 801a26c:	2b01      	cmp	r3, #1
 801a26e:	d106      	bne.n	801a27e <tcp_slowtmr+0x5a>
 801a270:	4b87      	ldr	r3, [pc, #540]	; (801a490 <tcp_slowtmr+0x26c>)
 801a272:	f240 42bf 	movw	r2, #1215	; 0x4bf
 801a276:	4989      	ldr	r1, [pc, #548]	; (801a49c <tcp_slowtmr+0x278>)
 801a278:	4887      	ldr	r0, [pc, #540]	; (801a498 <tcp_slowtmr+0x274>)
 801a27a:	f00b fa97 	bl	80257ac <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801a27e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a280:	7d1b      	ldrb	r3, [r3, #20]
 801a282:	2b0a      	cmp	r3, #10
 801a284:	d106      	bne.n	801a294 <tcp_slowtmr+0x70>
 801a286:	4b82      	ldr	r3, [pc, #520]	; (801a490 <tcp_slowtmr+0x26c>)
 801a288:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 801a28c:	4984      	ldr	r1, [pc, #528]	; (801a4a0 <tcp_slowtmr+0x27c>)
 801a28e:	4882      	ldr	r0, [pc, #520]	; (801a498 <tcp_slowtmr+0x274>)
 801a290:	f00b fa8c 	bl	80257ac <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 801a294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a296:	7f9a      	ldrb	r2, [r3, #30]
 801a298:	4b7b      	ldr	r3, [pc, #492]	; (801a488 <tcp_slowtmr+0x264>)
 801a29a:	781b      	ldrb	r3, [r3, #0]
 801a29c:	429a      	cmp	r2, r3
 801a29e:	d105      	bne.n	801a2ac <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 801a2a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a2a2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801a2a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a2a6:	68db      	ldr	r3, [r3, #12]
 801a2a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 801a2aa:	e272      	b.n	801a792 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 801a2ac:	4b76      	ldr	r3, [pc, #472]	; (801a488 <tcp_slowtmr+0x264>)
 801a2ae:	781a      	ldrb	r2, [r3, #0]
 801a2b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a2b2:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 801a2b4:	2300      	movs	r3, #0
 801a2b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 801a2ba:	2300      	movs	r3, #0
 801a2bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801a2c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a2c2:	7d1b      	ldrb	r3, [r3, #20]
 801a2c4:	2b02      	cmp	r3, #2
 801a2c6:	d10a      	bne.n	801a2de <tcp_slowtmr+0xba>
 801a2c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a2ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801a2ce:	2b05      	cmp	r3, #5
 801a2d0:	d905      	bls.n	801a2de <tcp_slowtmr+0xba>
      ++pcb_remove;
 801a2d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a2d6:	3301      	adds	r3, #1
 801a2d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801a2dc:	e11e      	b.n	801a51c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 801a2de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a2e0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801a2e4:	2b0b      	cmp	r3, #11
 801a2e6:	d905      	bls.n	801a2f4 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 801a2e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a2ec:	3301      	adds	r3, #1
 801a2ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801a2f2:	e113      	b.n	801a51c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 801a2f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a2f6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801a2fa:	2b00      	cmp	r3, #0
 801a2fc:	d075      	beq.n	801a3ea <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 801a2fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a302:	2b00      	cmp	r3, #0
 801a304:	d006      	beq.n	801a314 <tcp_slowtmr+0xf0>
 801a306:	4b62      	ldr	r3, [pc, #392]	; (801a490 <tcp_slowtmr+0x26c>)
 801a308:	f240 42d4 	movw	r2, #1236	; 0x4d4
 801a30c:	4965      	ldr	r1, [pc, #404]	; (801a4a4 <tcp_slowtmr+0x280>)
 801a30e:	4862      	ldr	r0, [pc, #392]	; (801a498 <tcp_slowtmr+0x274>)
 801a310:	f00b fa4c 	bl	80257ac <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 801a314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a316:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a318:	2b00      	cmp	r3, #0
 801a31a:	d106      	bne.n	801a32a <tcp_slowtmr+0x106>
 801a31c:	4b5c      	ldr	r3, [pc, #368]	; (801a490 <tcp_slowtmr+0x26c>)
 801a31e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 801a322:	4961      	ldr	r1, [pc, #388]	; (801a4a8 <tcp_slowtmr+0x284>)
 801a324:	485c      	ldr	r0, [pc, #368]	; (801a498 <tcp_slowtmr+0x274>)
 801a326:	f00b fa41 	bl	80257ac <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 801a32a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a32c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801a330:	2b0b      	cmp	r3, #11
 801a332:	d905      	bls.n	801a340 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 801a334:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a338:	3301      	adds	r3, #1
 801a33a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801a33e:	e0ed      	b.n	801a51c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 801a340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a342:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801a346:	3b01      	subs	r3, #1
 801a348:	4a58      	ldr	r2, [pc, #352]	; (801a4ac <tcp_slowtmr+0x288>)
 801a34a:	5cd3      	ldrb	r3, [r2, r3]
 801a34c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 801a34e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a350:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801a354:	7c7a      	ldrb	r2, [r7, #17]
 801a356:	429a      	cmp	r2, r3
 801a358:	d907      	bls.n	801a36a <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 801a35a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a35c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801a360:	3301      	adds	r3, #1
 801a362:	b2da      	uxtb	r2, r3
 801a364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a366:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 801a36a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a36c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801a370:	7c7a      	ldrb	r2, [r7, #17]
 801a372:	429a      	cmp	r2, r3
 801a374:	f200 80d2 	bhi.w	801a51c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 801a378:	2301      	movs	r3, #1
 801a37a:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 801a37c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a37e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801a382:	2b00      	cmp	r3, #0
 801a384:	d108      	bne.n	801a398 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 801a386:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a388:	f005 f938 	bl	801f5fc <tcp_zero_window_probe>
 801a38c:	4603      	mov	r3, r0
 801a38e:	2b00      	cmp	r3, #0
 801a390:	d014      	beq.n	801a3bc <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 801a392:	2300      	movs	r3, #0
 801a394:	623b      	str	r3, [r7, #32]
 801a396:	e011      	b.n	801a3bc <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 801a398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a39a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801a39e:	4619      	mov	r1, r3
 801a3a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a3a2:	f003 fffd 	bl	801e3a0 <tcp_split_unsent_seg>
 801a3a6:	4603      	mov	r3, r0
 801a3a8:	2b00      	cmp	r3, #0
 801a3aa:	d107      	bne.n	801a3bc <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 801a3ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a3ae:	f004 fa7d 	bl	801e8ac <tcp_output>
 801a3b2:	4603      	mov	r3, r0
 801a3b4:	2b00      	cmp	r3, #0
 801a3b6:	d101      	bne.n	801a3bc <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 801a3b8:	2300      	movs	r3, #0
 801a3ba:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 801a3bc:	6a3b      	ldr	r3, [r7, #32]
 801a3be:	2b00      	cmp	r3, #0
 801a3c0:	f000 80ac 	beq.w	801a51c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 801a3c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a3c6:	2200      	movs	r2, #0
 801a3c8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 801a3cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a3ce:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801a3d2:	2b06      	cmp	r3, #6
 801a3d4:	f200 80a2 	bhi.w	801a51c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 801a3d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a3da:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801a3de:	3301      	adds	r3, #1
 801a3e0:	b2da      	uxtb	r2, r3
 801a3e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a3e4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 801a3e8:	e098      	b.n	801a51c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 801a3ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a3ec:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801a3f0:	2b00      	cmp	r3, #0
 801a3f2:	db0f      	blt.n	801a414 <tcp_slowtmr+0x1f0>
 801a3f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a3f6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801a3fa:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801a3fe:	4293      	cmp	r3, r2
 801a400:	d008      	beq.n	801a414 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 801a402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a404:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801a408:	b29b      	uxth	r3, r3
 801a40a:	3301      	adds	r3, #1
 801a40c:	b29b      	uxth	r3, r3
 801a40e:	b21a      	sxth	r2, r3
 801a410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a412:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 801a414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a416:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 801a41a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a41c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 801a420:	429a      	cmp	r2, r3
 801a422:	db7b      	blt.n	801a51c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 801a424:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a426:	f004 fd33 	bl	801ee90 <tcp_rexmit_rto_prepare>
 801a42a:	4603      	mov	r3, r0
 801a42c:	2b00      	cmp	r3, #0
 801a42e:	d007      	beq.n	801a440 <tcp_slowtmr+0x21c>
 801a430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a434:	2b00      	cmp	r3, #0
 801a436:	d171      	bne.n	801a51c <tcp_slowtmr+0x2f8>
 801a438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a43a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a43c:	2b00      	cmp	r3, #0
 801a43e:	d06d      	beq.n	801a51c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 801a440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a442:	7d1b      	ldrb	r3, [r3, #20]
 801a444:	2b02      	cmp	r3, #2
 801a446:	d03a      	beq.n	801a4be <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 801a448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a44a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801a44e:	2b0c      	cmp	r3, #12
 801a450:	bf28      	it	cs
 801a452:	230c      	movcs	r3, #12
 801a454:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 801a456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a458:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801a45c:	10db      	asrs	r3, r3, #3
 801a45e:	b21b      	sxth	r3, r3
 801a460:	461a      	mov	r2, r3
 801a462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a464:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801a468:	4413      	add	r3, r2
 801a46a:	7efa      	ldrb	r2, [r7, #27]
 801a46c:	4910      	ldr	r1, [pc, #64]	; (801a4b0 <tcp_slowtmr+0x28c>)
 801a46e:	5c8a      	ldrb	r2, [r1, r2]
 801a470:	4093      	lsls	r3, r2
 801a472:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 801a474:	697b      	ldr	r3, [r7, #20]
 801a476:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 801a47a:	4293      	cmp	r3, r2
 801a47c:	dc1a      	bgt.n	801a4b4 <tcp_slowtmr+0x290>
 801a47e:	697b      	ldr	r3, [r7, #20]
 801a480:	b21a      	sxth	r2, r3
 801a482:	e019      	b.n	801a4b8 <tcp_slowtmr+0x294>
 801a484:	2001bd10 	.word	0x2001bd10
 801a488:	200137de 	.word	0x200137de
 801a48c:	2001bd0c 	.word	0x2001bd0c
 801a490:	0802bf38 	.word	0x0802bf38
 801a494:	0802c27c 	.word	0x0802c27c
 801a498:	0802bf7c 	.word	0x0802bf7c
 801a49c:	0802c2a8 	.word	0x0802c2a8
 801a4a0:	0802c2d4 	.word	0x0802c2d4
 801a4a4:	0802c304 	.word	0x0802c304
 801a4a8:	0802c338 	.word	0x0802c338
 801a4ac:	0802e428 	.word	0x0802e428
 801a4b0:	0802e418 	.word	0x0802e418
 801a4b4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801a4b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a4ba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 801a4be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a4c0:	2200      	movs	r2, #0
 801a4c2:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 801a4c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a4c6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801a4ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a4cc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801a4d0:	4293      	cmp	r3, r2
 801a4d2:	bf28      	it	cs
 801a4d4:	4613      	movcs	r3, r2
 801a4d6:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 801a4d8:	8a7b      	ldrh	r3, [r7, #18]
 801a4da:	085b      	lsrs	r3, r3, #1
 801a4dc:	b29a      	uxth	r2, r3
 801a4de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a4e0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 801a4e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a4e6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801a4ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a4ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a4ee:	005b      	lsls	r3, r3, #1
 801a4f0:	b29b      	uxth	r3, r3
 801a4f2:	429a      	cmp	r2, r3
 801a4f4:	d206      	bcs.n	801a504 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 801a4f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a4f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a4fa:	005b      	lsls	r3, r3, #1
 801a4fc:	b29a      	uxth	r2, r3
 801a4fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a500:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 801a504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a506:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 801a508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a50a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 801a50e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a510:	2200      	movs	r2, #0
 801a512:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 801a516:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a518:	f004 fd2a 	bl	801ef70 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 801a51c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a51e:	7d1b      	ldrb	r3, [r3, #20]
 801a520:	2b06      	cmp	r3, #6
 801a522:	d111      	bne.n	801a548 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 801a524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a526:	8b5b      	ldrh	r3, [r3, #26]
 801a528:	f003 0310 	and.w	r3, r3, #16
 801a52c:	2b00      	cmp	r3, #0
 801a52e:	d00b      	beq.n	801a548 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 801a530:	4b9d      	ldr	r3, [pc, #628]	; (801a7a8 <tcp_slowtmr+0x584>)
 801a532:	681a      	ldr	r2, [r3, #0]
 801a534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a536:	6a1b      	ldr	r3, [r3, #32]
 801a538:	1ad3      	subs	r3, r2, r3
 801a53a:	2b28      	cmp	r3, #40	; 0x28
 801a53c:	d904      	bls.n	801a548 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 801a53e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a542:	3301      	adds	r3, #1
 801a544:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801a548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a54a:	7a5b      	ldrb	r3, [r3, #9]
 801a54c:	f003 0308 	and.w	r3, r3, #8
 801a550:	2b00      	cmp	r3, #0
 801a552:	d04c      	beq.n	801a5ee <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 801a554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a556:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801a558:	2b04      	cmp	r3, #4
 801a55a:	d003      	beq.n	801a564 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 801a55c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a55e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 801a560:	2b07      	cmp	r3, #7
 801a562:	d144      	bne.n	801a5ee <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801a564:	4b90      	ldr	r3, [pc, #576]	; (801a7a8 <tcp_slowtmr+0x584>)
 801a566:	681a      	ldr	r2, [r3, #0]
 801a568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a56a:	6a1b      	ldr	r3, [r3, #32]
 801a56c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801a56e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a570:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801a574:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 801a578:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 801a57c:	498b      	ldr	r1, [pc, #556]	; (801a7ac <tcp_slowtmr+0x588>)
 801a57e:	fba1 1303 	umull	r1, r3, r1, r3
 801a582:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801a584:	429a      	cmp	r2, r3
 801a586:	d90a      	bls.n	801a59e <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 801a588:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a58c:	3301      	adds	r3, #1
 801a58e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 801a592:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a596:	3301      	adds	r3, #1
 801a598:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801a59c:	e027      	b.n	801a5ee <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801a59e:	4b82      	ldr	r3, [pc, #520]	; (801a7a8 <tcp_slowtmr+0x584>)
 801a5a0:	681a      	ldr	r2, [r3, #0]
 801a5a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a5a4:	6a1b      	ldr	r3, [r3, #32]
 801a5a6:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 801a5a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a5aa:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 801a5ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a5b0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 801a5b4:	4618      	mov	r0, r3
 801a5b6:	4b7e      	ldr	r3, [pc, #504]	; (801a7b0 <tcp_slowtmr+0x58c>)
 801a5b8:	fb00 f303 	mul.w	r3, r0, r3
 801a5bc:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 801a5be:	497b      	ldr	r1, [pc, #492]	; (801a7ac <tcp_slowtmr+0x588>)
 801a5c0:	fba1 1303 	umull	r1, r3, r1, r3
 801a5c4:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801a5c6:	429a      	cmp	r2, r3
 801a5c8:	d911      	bls.n	801a5ee <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 801a5ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a5cc:	f004 ffd6 	bl	801f57c <tcp_keepalive>
 801a5d0:	4603      	mov	r3, r0
 801a5d2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 801a5d6:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 801a5da:	2b00      	cmp	r3, #0
 801a5dc:	d107      	bne.n	801a5ee <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 801a5de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a5e0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 801a5e4:	3301      	adds	r3, #1
 801a5e6:	b2da      	uxtb	r2, r3
 801a5e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a5ea:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 801a5ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a5f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a5f2:	2b00      	cmp	r3, #0
 801a5f4:	d011      	beq.n	801a61a <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 801a5f6:	4b6c      	ldr	r3, [pc, #432]	; (801a7a8 <tcp_slowtmr+0x584>)
 801a5f8:	681a      	ldr	r2, [r3, #0]
 801a5fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a5fc:	6a1b      	ldr	r3, [r3, #32]
 801a5fe:	1ad2      	subs	r2, r2, r3
 801a600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a602:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 801a606:	4619      	mov	r1, r3
 801a608:	460b      	mov	r3, r1
 801a60a:	005b      	lsls	r3, r3, #1
 801a60c:	440b      	add	r3, r1
 801a60e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 801a610:	429a      	cmp	r2, r3
 801a612:	d302      	bcc.n	801a61a <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 801a614:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a616:	f000 fe91 	bl	801b33c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 801a61a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a61c:	7d1b      	ldrb	r3, [r3, #20]
 801a61e:	2b03      	cmp	r3, #3
 801a620:	d10b      	bne.n	801a63a <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801a622:	4b61      	ldr	r3, [pc, #388]	; (801a7a8 <tcp_slowtmr+0x584>)
 801a624:	681a      	ldr	r2, [r3, #0]
 801a626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a628:	6a1b      	ldr	r3, [r3, #32]
 801a62a:	1ad3      	subs	r3, r2, r3
 801a62c:	2b28      	cmp	r3, #40	; 0x28
 801a62e:	d904      	bls.n	801a63a <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 801a630:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a634:	3301      	adds	r3, #1
 801a636:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 801a63a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a63c:	7d1b      	ldrb	r3, [r3, #20]
 801a63e:	2b09      	cmp	r3, #9
 801a640:	d10b      	bne.n	801a65a <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801a642:	4b59      	ldr	r3, [pc, #356]	; (801a7a8 <tcp_slowtmr+0x584>)
 801a644:	681a      	ldr	r2, [r3, #0]
 801a646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a648:	6a1b      	ldr	r3, [r3, #32]
 801a64a:	1ad3      	subs	r3, r2, r3
 801a64c:	2bf0      	cmp	r3, #240	; 0xf0
 801a64e:	d904      	bls.n	801a65a <tcp_slowtmr+0x436>
        ++pcb_remove;
 801a650:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a654:	3301      	adds	r3, #1
 801a656:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801a65a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a65e:	2b00      	cmp	r3, #0
 801a660:	d060      	beq.n	801a724 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 801a662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a664:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801a668:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 801a66a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a66c:	f000 fcb2 	bl	801afd4 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 801a670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a672:	2b00      	cmp	r3, #0
 801a674:	d010      	beq.n	801a698 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801a676:	4b4f      	ldr	r3, [pc, #316]	; (801a7b4 <tcp_slowtmr+0x590>)
 801a678:	681b      	ldr	r3, [r3, #0]
 801a67a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a67c:	429a      	cmp	r2, r3
 801a67e:	d106      	bne.n	801a68e <tcp_slowtmr+0x46a>
 801a680:	4b4d      	ldr	r3, [pc, #308]	; (801a7b8 <tcp_slowtmr+0x594>)
 801a682:	f240 526d 	movw	r2, #1389	; 0x56d
 801a686:	494d      	ldr	r1, [pc, #308]	; (801a7bc <tcp_slowtmr+0x598>)
 801a688:	484d      	ldr	r0, [pc, #308]	; (801a7c0 <tcp_slowtmr+0x59c>)
 801a68a:	f00b f88f 	bl	80257ac <iprintf>
        prev->next = pcb->next;
 801a68e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a690:	68da      	ldr	r2, [r3, #12]
 801a692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a694:	60da      	str	r2, [r3, #12]
 801a696:	e00f      	b.n	801a6b8 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 801a698:	4b46      	ldr	r3, [pc, #280]	; (801a7b4 <tcp_slowtmr+0x590>)
 801a69a:	681b      	ldr	r3, [r3, #0]
 801a69c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a69e:	429a      	cmp	r2, r3
 801a6a0:	d006      	beq.n	801a6b0 <tcp_slowtmr+0x48c>
 801a6a2:	4b45      	ldr	r3, [pc, #276]	; (801a7b8 <tcp_slowtmr+0x594>)
 801a6a4:	f240 5271 	movw	r2, #1393	; 0x571
 801a6a8:	4946      	ldr	r1, [pc, #280]	; (801a7c4 <tcp_slowtmr+0x5a0>)
 801a6aa:	4845      	ldr	r0, [pc, #276]	; (801a7c0 <tcp_slowtmr+0x59c>)
 801a6ac:	f00b f87e 	bl	80257ac <iprintf>
        tcp_active_pcbs = pcb->next;
 801a6b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a6b2:	68db      	ldr	r3, [r3, #12]
 801a6b4:	4a3f      	ldr	r2, [pc, #252]	; (801a7b4 <tcp_slowtmr+0x590>)
 801a6b6:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 801a6b8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a6bc:	2b00      	cmp	r3, #0
 801a6be:	d013      	beq.n	801a6e8 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801a6c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a6c2:	6d18      	ldr	r0, [r3, #80]	; 0x50
 801a6c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a6c6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801a6c8:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 801a6ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a6cc:	3304      	adds	r3, #4
 801a6ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a6d0:	8ad2      	ldrh	r2, [r2, #22]
 801a6d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801a6d4:	8b09      	ldrh	r1, [r1, #24]
 801a6d6:	9102      	str	r1, [sp, #8]
 801a6d8:	9201      	str	r2, [sp, #4]
 801a6da:	9300      	str	r3, [sp, #0]
 801a6dc:	462b      	mov	r3, r5
 801a6de:	4622      	mov	r2, r4
 801a6e0:	4601      	mov	r1, r0
 801a6e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a6e4:	f004 fe96 	bl	801f414 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 801a6e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a6ea:	691b      	ldr	r3, [r3, #16]
 801a6ec:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 801a6ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a6f0:	7d1b      	ldrb	r3, [r3, #20]
 801a6f2:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 801a6f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a6f6:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 801a6f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a6fa:	68db      	ldr	r3, [r3, #12]
 801a6fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 801a6fe:	6838      	ldr	r0, [r7, #0]
 801a700:	f7fe fffc 	bl	80196fc <tcp_free>

      tcp_active_pcbs_changed = 0;
 801a704:	4b30      	ldr	r3, [pc, #192]	; (801a7c8 <tcp_slowtmr+0x5a4>)
 801a706:	2200      	movs	r2, #0
 801a708:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 801a70a:	68fb      	ldr	r3, [r7, #12]
 801a70c:	2b00      	cmp	r3, #0
 801a70e:	d004      	beq.n	801a71a <tcp_slowtmr+0x4f6>
 801a710:	68fb      	ldr	r3, [r7, #12]
 801a712:	f06f 010c 	mvn.w	r1, #12
 801a716:	68b8      	ldr	r0, [r7, #8]
 801a718:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 801a71a:	4b2b      	ldr	r3, [pc, #172]	; (801a7c8 <tcp_slowtmr+0x5a4>)
 801a71c:	781b      	ldrb	r3, [r3, #0]
 801a71e:	2b00      	cmp	r3, #0
 801a720:	d037      	beq.n	801a792 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 801a722:	e590      	b.n	801a246 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 801a724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a726:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801a728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a72a:	68db      	ldr	r3, [r3, #12]
 801a72c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 801a72e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a730:	7f1b      	ldrb	r3, [r3, #28]
 801a732:	3301      	adds	r3, #1
 801a734:	b2da      	uxtb	r2, r3
 801a736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a738:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 801a73a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a73c:	7f1a      	ldrb	r2, [r3, #28]
 801a73e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a740:	7f5b      	ldrb	r3, [r3, #29]
 801a742:	429a      	cmp	r2, r3
 801a744:	d325      	bcc.n	801a792 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 801a746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a748:	2200      	movs	r2, #0
 801a74a:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 801a74c:	4b1e      	ldr	r3, [pc, #120]	; (801a7c8 <tcp_slowtmr+0x5a4>)
 801a74e:	2200      	movs	r2, #0
 801a750:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 801a752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a754:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801a758:	2b00      	cmp	r3, #0
 801a75a:	d00b      	beq.n	801a774 <tcp_slowtmr+0x550>
 801a75c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a75e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801a762:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a764:	6912      	ldr	r2, [r2, #16]
 801a766:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801a768:	4610      	mov	r0, r2
 801a76a:	4798      	blx	r3
 801a76c:	4603      	mov	r3, r0
 801a76e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801a772:	e002      	b.n	801a77a <tcp_slowtmr+0x556>
 801a774:	2300      	movs	r3, #0
 801a776:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 801a77a:	4b13      	ldr	r3, [pc, #76]	; (801a7c8 <tcp_slowtmr+0x5a4>)
 801a77c:	781b      	ldrb	r3, [r3, #0]
 801a77e:	2b00      	cmp	r3, #0
 801a780:	d000      	beq.n	801a784 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 801a782:	e560      	b.n	801a246 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 801a784:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 801a788:	2b00      	cmp	r3, #0
 801a78a:	d102      	bne.n	801a792 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 801a78c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a78e:	f004 f88d 	bl	801e8ac <tcp_output>
  while (pcb != NULL) {
 801a792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a794:	2b00      	cmp	r3, #0
 801a796:	f47f ad5c 	bne.w	801a252 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 801a79a:	2300      	movs	r3, #0
 801a79c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 801a79e:	4b0b      	ldr	r3, [pc, #44]	; (801a7cc <tcp_slowtmr+0x5a8>)
 801a7a0:	681b      	ldr	r3, [r3, #0]
 801a7a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 801a7a4:	e067      	b.n	801a876 <tcp_slowtmr+0x652>
 801a7a6:	bf00      	nop
 801a7a8:	2001bd10 	.word	0x2001bd10
 801a7ac:	10624dd3 	.word	0x10624dd3
 801a7b0:	000124f8 	.word	0x000124f8
 801a7b4:	2001bd0c 	.word	0x2001bd0c
 801a7b8:	0802bf38 	.word	0x0802bf38
 801a7bc:	0802c370 	.word	0x0802c370
 801a7c0:	0802bf7c 	.word	0x0802bf7c
 801a7c4:	0802c39c 	.word	0x0802c39c
 801a7c8:	2001bd08 	.word	0x2001bd08
 801a7cc:	2001bd1c 	.word	0x2001bd1c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801a7d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a7d2:	7d1b      	ldrb	r3, [r3, #20]
 801a7d4:	2b0a      	cmp	r3, #10
 801a7d6:	d006      	beq.n	801a7e6 <tcp_slowtmr+0x5c2>
 801a7d8:	4b2b      	ldr	r3, [pc, #172]	; (801a888 <tcp_slowtmr+0x664>)
 801a7da:	f240 52a1 	movw	r2, #1441	; 0x5a1
 801a7de:	492b      	ldr	r1, [pc, #172]	; (801a88c <tcp_slowtmr+0x668>)
 801a7e0:	482b      	ldr	r0, [pc, #172]	; (801a890 <tcp_slowtmr+0x66c>)
 801a7e2:	f00a ffe3 	bl	80257ac <iprintf>
    pcb_remove = 0;
 801a7e6:	2300      	movs	r3, #0
 801a7e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801a7ec:	4b29      	ldr	r3, [pc, #164]	; (801a894 <tcp_slowtmr+0x670>)
 801a7ee:	681a      	ldr	r2, [r3, #0]
 801a7f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a7f2:	6a1b      	ldr	r3, [r3, #32]
 801a7f4:	1ad3      	subs	r3, r2, r3
 801a7f6:	2bf0      	cmp	r3, #240	; 0xf0
 801a7f8:	d904      	bls.n	801a804 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 801a7fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a7fe:	3301      	adds	r3, #1
 801a800:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801a804:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a808:	2b00      	cmp	r3, #0
 801a80a:	d02f      	beq.n	801a86c <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 801a80c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a80e:	f000 fbe1 	bl	801afd4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 801a812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a814:	2b00      	cmp	r3, #0
 801a816:	d010      	beq.n	801a83a <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 801a818:	4b1f      	ldr	r3, [pc, #124]	; (801a898 <tcp_slowtmr+0x674>)
 801a81a:	681b      	ldr	r3, [r3, #0]
 801a81c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a81e:	429a      	cmp	r2, r3
 801a820:	d106      	bne.n	801a830 <tcp_slowtmr+0x60c>
 801a822:	4b19      	ldr	r3, [pc, #100]	; (801a888 <tcp_slowtmr+0x664>)
 801a824:	f240 52af 	movw	r2, #1455	; 0x5af
 801a828:	491c      	ldr	r1, [pc, #112]	; (801a89c <tcp_slowtmr+0x678>)
 801a82a:	4819      	ldr	r0, [pc, #100]	; (801a890 <tcp_slowtmr+0x66c>)
 801a82c:	f00a ffbe 	bl	80257ac <iprintf>
        prev->next = pcb->next;
 801a830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a832:	68da      	ldr	r2, [r3, #12]
 801a834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a836:	60da      	str	r2, [r3, #12]
 801a838:	e00f      	b.n	801a85a <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801a83a:	4b17      	ldr	r3, [pc, #92]	; (801a898 <tcp_slowtmr+0x674>)
 801a83c:	681b      	ldr	r3, [r3, #0]
 801a83e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a840:	429a      	cmp	r2, r3
 801a842:	d006      	beq.n	801a852 <tcp_slowtmr+0x62e>
 801a844:	4b10      	ldr	r3, [pc, #64]	; (801a888 <tcp_slowtmr+0x664>)
 801a846:	f240 52b3 	movw	r2, #1459	; 0x5b3
 801a84a:	4915      	ldr	r1, [pc, #84]	; (801a8a0 <tcp_slowtmr+0x67c>)
 801a84c:	4810      	ldr	r0, [pc, #64]	; (801a890 <tcp_slowtmr+0x66c>)
 801a84e:	f00a ffad 	bl	80257ac <iprintf>
        tcp_tw_pcbs = pcb->next;
 801a852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a854:	68db      	ldr	r3, [r3, #12]
 801a856:	4a10      	ldr	r2, [pc, #64]	; (801a898 <tcp_slowtmr+0x674>)
 801a858:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 801a85a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a85c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 801a85e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a860:	68db      	ldr	r3, [r3, #12]
 801a862:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 801a864:	69f8      	ldr	r0, [r7, #28]
 801a866:	f7fe ff49 	bl	80196fc <tcp_free>
 801a86a:	e004      	b.n	801a876 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 801a86c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a86e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801a870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a872:	68db      	ldr	r3, [r3, #12]
 801a874:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 801a876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a878:	2b00      	cmp	r3, #0
 801a87a:	d1a9      	bne.n	801a7d0 <tcp_slowtmr+0x5ac>
    }
  }
}
 801a87c:	bf00      	nop
 801a87e:	bf00      	nop
 801a880:	3730      	adds	r7, #48	; 0x30
 801a882:	46bd      	mov	sp, r7
 801a884:	bdb0      	pop	{r4, r5, r7, pc}
 801a886:	bf00      	nop
 801a888:	0802bf38 	.word	0x0802bf38
 801a88c:	0802c3c8 	.word	0x0802c3c8
 801a890:	0802bf7c 	.word	0x0802bf7c
 801a894:	2001bd10 	.word	0x2001bd10
 801a898:	2001bd1c 	.word	0x2001bd1c
 801a89c:	0802c3f8 	.word	0x0802c3f8
 801a8a0:	0802c420 	.word	0x0802c420

0801a8a4 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 801a8a4:	b580      	push	{r7, lr}
 801a8a6:	b082      	sub	sp, #8
 801a8a8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 801a8aa:	4b2d      	ldr	r3, [pc, #180]	; (801a960 <tcp_fasttmr+0xbc>)
 801a8ac:	781b      	ldrb	r3, [r3, #0]
 801a8ae:	3301      	adds	r3, #1
 801a8b0:	b2da      	uxtb	r2, r3
 801a8b2:	4b2b      	ldr	r3, [pc, #172]	; (801a960 <tcp_fasttmr+0xbc>)
 801a8b4:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 801a8b6:	4b2b      	ldr	r3, [pc, #172]	; (801a964 <tcp_fasttmr+0xc0>)
 801a8b8:	681b      	ldr	r3, [r3, #0]
 801a8ba:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801a8bc:	e048      	b.n	801a950 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801a8be:	687b      	ldr	r3, [r7, #4]
 801a8c0:	7f9a      	ldrb	r2, [r3, #30]
 801a8c2:	4b27      	ldr	r3, [pc, #156]	; (801a960 <tcp_fasttmr+0xbc>)
 801a8c4:	781b      	ldrb	r3, [r3, #0]
 801a8c6:	429a      	cmp	r2, r3
 801a8c8:	d03f      	beq.n	801a94a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 801a8ca:	4b25      	ldr	r3, [pc, #148]	; (801a960 <tcp_fasttmr+0xbc>)
 801a8cc:	781a      	ldrb	r2, [r3, #0]
 801a8ce:	687b      	ldr	r3, [r7, #4]
 801a8d0:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 801a8d2:	687b      	ldr	r3, [r7, #4]
 801a8d4:	8b5b      	ldrh	r3, [r3, #26]
 801a8d6:	f003 0301 	and.w	r3, r3, #1
 801a8da:	2b00      	cmp	r3, #0
 801a8dc:	d010      	beq.n	801a900 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 801a8de:	687b      	ldr	r3, [r7, #4]
 801a8e0:	8b5b      	ldrh	r3, [r3, #26]
 801a8e2:	f043 0302 	orr.w	r3, r3, #2
 801a8e6:	b29a      	uxth	r2, r3
 801a8e8:	687b      	ldr	r3, [r7, #4]
 801a8ea:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 801a8ec:	6878      	ldr	r0, [r7, #4]
 801a8ee:	f003 ffdd 	bl	801e8ac <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801a8f2:	687b      	ldr	r3, [r7, #4]
 801a8f4:	8b5b      	ldrh	r3, [r3, #26]
 801a8f6:	f023 0303 	bic.w	r3, r3, #3
 801a8fa:	b29a      	uxth	r2, r3
 801a8fc:	687b      	ldr	r3, [r7, #4]
 801a8fe:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 801a900:	687b      	ldr	r3, [r7, #4]
 801a902:	8b5b      	ldrh	r3, [r3, #26]
 801a904:	f003 0308 	and.w	r3, r3, #8
 801a908:	2b00      	cmp	r3, #0
 801a90a:	d009      	beq.n	801a920 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 801a90c:	687b      	ldr	r3, [r7, #4]
 801a90e:	8b5b      	ldrh	r3, [r3, #26]
 801a910:	f023 0308 	bic.w	r3, r3, #8
 801a914:	b29a      	uxth	r2, r3
 801a916:	687b      	ldr	r3, [r7, #4]
 801a918:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 801a91a:	6878      	ldr	r0, [r7, #4]
 801a91c:	f7ff f882 	bl	8019a24 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 801a920:	687b      	ldr	r3, [r7, #4]
 801a922:	68db      	ldr	r3, [r3, #12]
 801a924:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 801a926:	687b      	ldr	r3, [r7, #4]
 801a928:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801a92a:	2b00      	cmp	r3, #0
 801a92c:	d00a      	beq.n	801a944 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 801a92e:	4b0e      	ldr	r3, [pc, #56]	; (801a968 <tcp_fasttmr+0xc4>)
 801a930:	2200      	movs	r2, #0
 801a932:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 801a934:	6878      	ldr	r0, [r7, #4]
 801a936:	f000 f819 	bl	801a96c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801a93a:	4b0b      	ldr	r3, [pc, #44]	; (801a968 <tcp_fasttmr+0xc4>)
 801a93c:	781b      	ldrb	r3, [r3, #0]
 801a93e:	2b00      	cmp	r3, #0
 801a940:	d000      	beq.n	801a944 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 801a942:	e7b8      	b.n	801a8b6 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 801a944:	683b      	ldr	r3, [r7, #0]
 801a946:	607b      	str	r3, [r7, #4]
 801a948:	e002      	b.n	801a950 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 801a94a:	687b      	ldr	r3, [r7, #4]
 801a94c:	68db      	ldr	r3, [r3, #12]
 801a94e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801a950:	687b      	ldr	r3, [r7, #4]
 801a952:	2b00      	cmp	r3, #0
 801a954:	d1b3      	bne.n	801a8be <tcp_fasttmr+0x1a>
    }
  }
}
 801a956:	bf00      	nop
 801a958:	bf00      	nop
 801a95a:	3708      	adds	r7, #8
 801a95c:	46bd      	mov	sp, r7
 801a95e:	bd80      	pop	{r7, pc}
 801a960:	200137de 	.word	0x200137de
 801a964:	2001bd0c 	.word	0x2001bd0c
 801a968:	2001bd08 	.word	0x2001bd08

0801a96c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 801a96c:	b590      	push	{r4, r7, lr}
 801a96e:	b085      	sub	sp, #20
 801a970:	af00      	add	r7, sp, #0
 801a972:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 801a974:	687b      	ldr	r3, [r7, #4]
 801a976:	2b00      	cmp	r3, #0
 801a978:	d109      	bne.n	801a98e <tcp_process_refused_data+0x22>
 801a97a:	4b37      	ldr	r3, [pc, #220]	; (801aa58 <tcp_process_refused_data+0xec>)
 801a97c:	f240 6209 	movw	r2, #1545	; 0x609
 801a980:	4936      	ldr	r1, [pc, #216]	; (801aa5c <tcp_process_refused_data+0xf0>)
 801a982:	4837      	ldr	r0, [pc, #220]	; (801aa60 <tcp_process_refused_data+0xf4>)
 801a984:	f00a ff12 	bl	80257ac <iprintf>
 801a988:	f06f 030f 	mvn.w	r3, #15
 801a98c:	e060      	b.n	801aa50 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 801a98e:	687b      	ldr	r3, [r7, #4]
 801a990:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801a992:	7b5b      	ldrb	r3, [r3, #13]
 801a994:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 801a996:	687b      	ldr	r3, [r7, #4]
 801a998:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801a99a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 801a99c:	687b      	ldr	r3, [r7, #4]
 801a99e:	2200      	movs	r2, #0
 801a9a0:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801a9a2:	687b      	ldr	r3, [r7, #4]
 801a9a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801a9a8:	2b00      	cmp	r3, #0
 801a9aa:	d00b      	beq.n	801a9c4 <tcp_process_refused_data+0x58>
 801a9ac:	687b      	ldr	r3, [r7, #4]
 801a9ae:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801a9b2:	687b      	ldr	r3, [r7, #4]
 801a9b4:	6918      	ldr	r0, [r3, #16]
 801a9b6:	2300      	movs	r3, #0
 801a9b8:	68ba      	ldr	r2, [r7, #8]
 801a9ba:	6879      	ldr	r1, [r7, #4]
 801a9bc:	47a0      	blx	r4
 801a9be:	4603      	mov	r3, r0
 801a9c0:	73fb      	strb	r3, [r7, #15]
 801a9c2:	e007      	b.n	801a9d4 <tcp_process_refused_data+0x68>
 801a9c4:	2300      	movs	r3, #0
 801a9c6:	68ba      	ldr	r2, [r7, #8]
 801a9c8:	6879      	ldr	r1, [r7, #4]
 801a9ca:	2000      	movs	r0, #0
 801a9cc:	f000 f8a4 	bl	801ab18 <tcp_recv_null>
 801a9d0:	4603      	mov	r3, r0
 801a9d2:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 801a9d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a9d8:	2b00      	cmp	r3, #0
 801a9da:	d12a      	bne.n	801aa32 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 801a9dc:	7bbb      	ldrb	r3, [r7, #14]
 801a9de:	f003 0320 	and.w	r3, r3, #32
 801a9e2:	2b00      	cmp	r3, #0
 801a9e4:	d033      	beq.n	801aa4e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801a9e6:	687b      	ldr	r3, [r7, #4]
 801a9e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a9ea:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801a9ee:	d005      	beq.n	801a9fc <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 801a9f0:	687b      	ldr	r3, [r7, #4]
 801a9f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a9f4:	3301      	adds	r3, #1
 801a9f6:	b29a      	uxth	r2, r3
 801a9f8:	687b      	ldr	r3, [r7, #4]
 801a9fa:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 801a9fc:	687b      	ldr	r3, [r7, #4]
 801a9fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801aa02:	2b00      	cmp	r3, #0
 801aa04:	d00b      	beq.n	801aa1e <tcp_process_refused_data+0xb2>
 801aa06:	687b      	ldr	r3, [r7, #4]
 801aa08:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801aa0c:	687b      	ldr	r3, [r7, #4]
 801aa0e:	6918      	ldr	r0, [r3, #16]
 801aa10:	2300      	movs	r3, #0
 801aa12:	2200      	movs	r2, #0
 801aa14:	6879      	ldr	r1, [r7, #4]
 801aa16:	47a0      	blx	r4
 801aa18:	4603      	mov	r3, r0
 801aa1a:	73fb      	strb	r3, [r7, #15]
 801aa1c:	e001      	b.n	801aa22 <tcp_process_refused_data+0xb6>
 801aa1e:	2300      	movs	r3, #0
 801aa20:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 801aa22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801aa26:	f113 0f0d 	cmn.w	r3, #13
 801aa2a:	d110      	bne.n	801aa4e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 801aa2c:	f06f 030c 	mvn.w	r3, #12
 801aa30:	e00e      	b.n	801aa50 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 801aa32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801aa36:	f113 0f0d 	cmn.w	r3, #13
 801aa3a:	d102      	bne.n	801aa42 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 801aa3c:	f06f 030c 	mvn.w	r3, #12
 801aa40:	e006      	b.n	801aa50 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 801aa42:	687b      	ldr	r3, [r7, #4]
 801aa44:	68ba      	ldr	r2, [r7, #8]
 801aa46:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 801aa48:	f06f 0304 	mvn.w	r3, #4
 801aa4c:	e000      	b.n	801aa50 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 801aa4e:	2300      	movs	r3, #0
}
 801aa50:	4618      	mov	r0, r3
 801aa52:	3714      	adds	r7, #20
 801aa54:	46bd      	mov	sp, r7
 801aa56:	bd90      	pop	{r4, r7, pc}
 801aa58:	0802bf38 	.word	0x0802bf38
 801aa5c:	0802c448 	.word	0x0802c448
 801aa60:	0802bf7c 	.word	0x0802bf7c

0801aa64 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 801aa64:	b580      	push	{r7, lr}
 801aa66:	b084      	sub	sp, #16
 801aa68:	af00      	add	r7, sp, #0
 801aa6a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 801aa6c:	e007      	b.n	801aa7e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 801aa6e:	687b      	ldr	r3, [r7, #4]
 801aa70:	681b      	ldr	r3, [r3, #0]
 801aa72:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 801aa74:	6878      	ldr	r0, [r7, #4]
 801aa76:	f000 f80a 	bl	801aa8e <tcp_seg_free>
    seg = next;
 801aa7a:	68fb      	ldr	r3, [r7, #12]
 801aa7c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 801aa7e:	687b      	ldr	r3, [r7, #4]
 801aa80:	2b00      	cmp	r3, #0
 801aa82:	d1f4      	bne.n	801aa6e <tcp_segs_free+0xa>
  }
}
 801aa84:	bf00      	nop
 801aa86:	bf00      	nop
 801aa88:	3710      	adds	r7, #16
 801aa8a:	46bd      	mov	sp, r7
 801aa8c:	bd80      	pop	{r7, pc}

0801aa8e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 801aa8e:	b580      	push	{r7, lr}
 801aa90:	b082      	sub	sp, #8
 801aa92:	af00      	add	r7, sp, #0
 801aa94:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 801aa96:	687b      	ldr	r3, [r7, #4]
 801aa98:	2b00      	cmp	r3, #0
 801aa9a:	d00c      	beq.n	801aab6 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 801aa9c:	687b      	ldr	r3, [r7, #4]
 801aa9e:	685b      	ldr	r3, [r3, #4]
 801aaa0:	2b00      	cmp	r3, #0
 801aaa2:	d004      	beq.n	801aaae <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 801aaa4:	687b      	ldr	r3, [r7, #4]
 801aaa6:	685b      	ldr	r3, [r3, #4]
 801aaa8:	4618      	mov	r0, r3
 801aaaa:	f7fe fb07 	bl	80190bc <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 801aaae:	6879      	ldr	r1, [r7, #4]
 801aab0:	2003      	movs	r0, #3
 801aab2:	f7fd fc53 	bl	801835c <memp_free>
  }
}
 801aab6:	bf00      	nop
 801aab8:	3708      	adds	r7, #8
 801aaba:	46bd      	mov	sp, r7
 801aabc:	bd80      	pop	{r7, pc}
	...

0801aac0 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 801aac0:	b580      	push	{r7, lr}
 801aac2:	b084      	sub	sp, #16
 801aac4:	af00      	add	r7, sp, #0
 801aac6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 801aac8:	687b      	ldr	r3, [r7, #4]
 801aaca:	2b00      	cmp	r3, #0
 801aacc:	d106      	bne.n	801aadc <tcp_seg_copy+0x1c>
 801aace:	4b0f      	ldr	r3, [pc, #60]	; (801ab0c <tcp_seg_copy+0x4c>)
 801aad0:	f240 6282 	movw	r2, #1666	; 0x682
 801aad4:	490e      	ldr	r1, [pc, #56]	; (801ab10 <tcp_seg_copy+0x50>)
 801aad6:	480f      	ldr	r0, [pc, #60]	; (801ab14 <tcp_seg_copy+0x54>)
 801aad8:	f00a fe68 	bl	80257ac <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 801aadc:	2003      	movs	r0, #3
 801aade:	f7fd fbeb 	bl	80182b8 <memp_malloc>
 801aae2:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 801aae4:	68fb      	ldr	r3, [r7, #12]
 801aae6:	2b00      	cmp	r3, #0
 801aae8:	d101      	bne.n	801aaee <tcp_seg_copy+0x2e>
    return NULL;
 801aaea:	2300      	movs	r3, #0
 801aaec:	e00a      	b.n	801ab04 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801aaee:	2210      	movs	r2, #16
 801aaf0:	6879      	ldr	r1, [r7, #4]
 801aaf2:	68f8      	ldr	r0, [r7, #12]
 801aaf4:	f009 ff86 	bl	8024a04 <memcpy>
  pbuf_ref(cseg->p);
 801aaf8:	68fb      	ldr	r3, [r7, #12]
 801aafa:	685b      	ldr	r3, [r3, #4]
 801aafc:	4618      	mov	r0, r3
 801aafe:	f7fe fb83 	bl	8019208 <pbuf_ref>
  return cseg;
 801ab02:	68fb      	ldr	r3, [r7, #12]
}
 801ab04:	4618      	mov	r0, r3
 801ab06:	3710      	adds	r7, #16
 801ab08:	46bd      	mov	sp, r7
 801ab0a:	bd80      	pop	{r7, pc}
 801ab0c:	0802bf38 	.word	0x0802bf38
 801ab10:	0802c48c 	.word	0x0802c48c
 801ab14:	0802bf7c 	.word	0x0802bf7c

0801ab18 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 801ab18:	b580      	push	{r7, lr}
 801ab1a:	b084      	sub	sp, #16
 801ab1c:	af00      	add	r7, sp, #0
 801ab1e:	60f8      	str	r0, [r7, #12]
 801ab20:	60b9      	str	r1, [r7, #8]
 801ab22:	607a      	str	r2, [r7, #4]
 801ab24:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801ab26:	68bb      	ldr	r3, [r7, #8]
 801ab28:	2b00      	cmp	r3, #0
 801ab2a:	d109      	bne.n	801ab40 <tcp_recv_null+0x28>
 801ab2c:	4b12      	ldr	r3, [pc, #72]	; (801ab78 <tcp_recv_null+0x60>)
 801ab2e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801ab32:	4912      	ldr	r1, [pc, #72]	; (801ab7c <tcp_recv_null+0x64>)
 801ab34:	4812      	ldr	r0, [pc, #72]	; (801ab80 <tcp_recv_null+0x68>)
 801ab36:	f00a fe39 	bl	80257ac <iprintf>
 801ab3a:	f06f 030f 	mvn.w	r3, #15
 801ab3e:	e016      	b.n	801ab6e <tcp_recv_null+0x56>

  if (p != NULL) {
 801ab40:	687b      	ldr	r3, [r7, #4]
 801ab42:	2b00      	cmp	r3, #0
 801ab44:	d009      	beq.n	801ab5a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 801ab46:	687b      	ldr	r3, [r7, #4]
 801ab48:	891b      	ldrh	r3, [r3, #8]
 801ab4a:	4619      	mov	r1, r3
 801ab4c:	68b8      	ldr	r0, [r7, #8]
 801ab4e:	f7ff f9bb 	bl	8019ec8 <tcp_recved>
    pbuf_free(p);
 801ab52:	6878      	ldr	r0, [r7, #4]
 801ab54:	f7fe fab2 	bl	80190bc <pbuf_free>
 801ab58:	e008      	b.n	801ab6c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 801ab5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801ab5e:	2b00      	cmp	r3, #0
 801ab60:	d104      	bne.n	801ab6c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 801ab62:	68b8      	ldr	r0, [r7, #8]
 801ab64:	f7fe ffc8 	bl	8019af8 <tcp_close>
 801ab68:	4603      	mov	r3, r0
 801ab6a:	e000      	b.n	801ab6e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 801ab6c:	2300      	movs	r3, #0
}
 801ab6e:	4618      	mov	r0, r3
 801ab70:	3710      	adds	r7, #16
 801ab72:	46bd      	mov	sp, r7
 801ab74:	bd80      	pop	{r7, pc}
 801ab76:	bf00      	nop
 801ab78:	0802bf38 	.word	0x0802bf38
 801ab7c:	0802c4a8 	.word	0x0802c4a8
 801ab80:	0802bf7c 	.word	0x0802bf7c

0801ab84 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 801ab84:	b580      	push	{r7, lr}
 801ab86:	b086      	sub	sp, #24
 801ab88:	af00      	add	r7, sp, #0
 801ab8a:	4603      	mov	r3, r0
 801ab8c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801ab8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801ab92:	2b00      	cmp	r3, #0
 801ab94:	db01      	blt.n	801ab9a <tcp_kill_prio+0x16>
 801ab96:	79fb      	ldrb	r3, [r7, #7]
 801ab98:	e000      	b.n	801ab9c <tcp_kill_prio+0x18>
 801ab9a:	237f      	movs	r3, #127	; 0x7f
 801ab9c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 801ab9e:	7afb      	ldrb	r3, [r7, #11]
 801aba0:	2b00      	cmp	r3, #0
 801aba2:	d034      	beq.n	801ac0e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 801aba4:	7afb      	ldrb	r3, [r7, #11]
 801aba6:	3b01      	subs	r3, #1
 801aba8:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 801abaa:	2300      	movs	r3, #0
 801abac:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801abae:	2300      	movs	r3, #0
 801abb0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801abb2:	4b19      	ldr	r3, [pc, #100]	; (801ac18 <tcp_kill_prio+0x94>)
 801abb4:	681b      	ldr	r3, [r3, #0]
 801abb6:	617b      	str	r3, [r7, #20]
 801abb8:	e01f      	b.n	801abfa <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 801abba:	697b      	ldr	r3, [r7, #20]
 801abbc:	7d5b      	ldrb	r3, [r3, #21]
 801abbe:	7afa      	ldrb	r2, [r7, #11]
 801abc0:	429a      	cmp	r2, r3
 801abc2:	d80c      	bhi.n	801abde <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801abc4:	697b      	ldr	r3, [r7, #20]
 801abc6:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 801abc8:	7afa      	ldrb	r2, [r7, #11]
 801abca:	429a      	cmp	r2, r3
 801abcc:	d112      	bne.n	801abf4 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801abce:	4b13      	ldr	r3, [pc, #76]	; (801ac1c <tcp_kill_prio+0x98>)
 801abd0:	681a      	ldr	r2, [r3, #0]
 801abd2:	697b      	ldr	r3, [r7, #20]
 801abd4:	6a1b      	ldr	r3, [r3, #32]
 801abd6:	1ad3      	subs	r3, r2, r3
 801abd8:	68fa      	ldr	r2, [r7, #12]
 801abda:	429a      	cmp	r2, r3
 801abdc:	d80a      	bhi.n	801abf4 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 801abde:	4b0f      	ldr	r3, [pc, #60]	; (801ac1c <tcp_kill_prio+0x98>)
 801abe0:	681a      	ldr	r2, [r3, #0]
 801abe2:	697b      	ldr	r3, [r7, #20]
 801abe4:	6a1b      	ldr	r3, [r3, #32]
 801abe6:	1ad3      	subs	r3, r2, r3
 801abe8:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 801abea:	697b      	ldr	r3, [r7, #20]
 801abec:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 801abee:	697b      	ldr	r3, [r7, #20]
 801abf0:	7d5b      	ldrb	r3, [r3, #21]
 801abf2:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801abf4:	697b      	ldr	r3, [r7, #20]
 801abf6:	68db      	ldr	r3, [r3, #12]
 801abf8:	617b      	str	r3, [r7, #20]
 801abfa:	697b      	ldr	r3, [r7, #20]
 801abfc:	2b00      	cmp	r3, #0
 801abfe:	d1dc      	bne.n	801abba <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 801ac00:	693b      	ldr	r3, [r7, #16]
 801ac02:	2b00      	cmp	r3, #0
 801ac04:	d004      	beq.n	801ac10 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801ac06:	6938      	ldr	r0, [r7, #16]
 801ac08:	f7ff f860 	bl	8019ccc <tcp_abort>
 801ac0c:	e000      	b.n	801ac10 <tcp_kill_prio+0x8c>
    return;
 801ac0e:	bf00      	nop
  }
}
 801ac10:	3718      	adds	r7, #24
 801ac12:	46bd      	mov	sp, r7
 801ac14:	bd80      	pop	{r7, pc}
 801ac16:	bf00      	nop
 801ac18:	2001bd0c 	.word	0x2001bd0c
 801ac1c:	2001bd10 	.word	0x2001bd10

0801ac20 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 801ac20:	b580      	push	{r7, lr}
 801ac22:	b086      	sub	sp, #24
 801ac24:	af00      	add	r7, sp, #0
 801ac26:	4603      	mov	r3, r0
 801ac28:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 801ac2a:	79fb      	ldrb	r3, [r7, #7]
 801ac2c:	2b08      	cmp	r3, #8
 801ac2e:	d009      	beq.n	801ac44 <tcp_kill_state+0x24>
 801ac30:	79fb      	ldrb	r3, [r7, #7]
 801ac32:	2b09      	cmp	r3, #9
 801ac34:	d006      	beq.n	801ac44 <tcp_kill_state+0x24>
 801ac36:	4b1a      	ldr	r3, [pc, #104]	; (801aca0 <tcp_kill_state+0x80>)
 801ac38:	f240 62dd 	movw	r2, #1757	; 0x6dd
 801ac3c:	4919      	ldr	r1, [pc, #100]	; (801aca4 <tcp_kill_state+0x84>)
 801ac3e:	481a      	ldr	r0, [pc, #104]	; (801aca8 <tcp_kill_state+0x88>)
 801ac40:	f00a fdb4 	bl	80257ac <iprintf>

  inactivity = 0;
 801ac44:	2300      	movs	r3, #0
 801ac46:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801ac48:	2300      	movs	r3, #0
 801ac4a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801ac4c:	4b17      	ldr	r3, [pc, #92]	; (801acac <tcp_kill_state+0x8c>)
 801ac4e:	681b      	ldr	r3, [r3, #0]
 801ac50:	617b      	str	r3, [r7, #20]
 801ac52:	e017      	b.n	801ac84 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 801ac54:	697b      	ldr	r3, [r7, #20]
 801ac56:	7d1b      	ldrb	r3, [r3, #20]
 801ac58:	79fa      	ldrb	r2, [r7, #7]
 801ac5a:	429a      	cmp	r2, r3
 801ac5c:	d10f      	bne.n	801ac7e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801ac5e:	4b14      	ldr	r3, [pc, #80]	; (801acb0 <tcp_kill_state+0x90>)
 801ac60:	681a      	ldr	r2, [r3, #0]
 801ac62:	697b      	ldr	r3, [r7, #20]
 801ac64:	6a1b      	ldr	r3, [r3, #32]
 801ac66:	1ad3      	subs	r3, r2, r3
 801ac68:	68fa      	ldr	r2, [r7, #12]
 801ac6a:	429a      	cmp	r2, r3
 801ac6c:	d807      	bhi.n	801ac7e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 801ac6e:	4b10      	ldr	r3, [pc, #64]	; (801acb0 <tcp_kill_state+0x90>)
 801ac70:	681a      	ldr	r2, [r3, #0]
 801ac72:	697b      	ldr	r3, [r7, #20]
 801ac74:	6a1b      	ldr	r3, [r3, #32]
 801ac76:	1ad3      	subs	r3, r2, r3
 801ac78:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801ac7a:	697b      	ldr	r3, [r7, #20]
 801ac7c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801ac7e:	697b      	ldr	r3, [r7, #20]
 801ac80:	68db      	ldr	r3, [r3, #12]
 801ac82:	617b      	str	r3, [r7, #20]
 801ac84:	697b      	ldr	r3, [r7, #20]
 801ac86:	2b00      	cmp	r3, #0
 801ac88:	d1e4      	bne.n	801ac54 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801ac8a:	693b      	ldr	r3, [r7, #16]
 801ac8c:	2b00      	cmp	r3, #0
 801ac8e:	d003      	beq.n	801ac98 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 801ac90:	2100      	movs	r1, #0
 801ac92:	6938      	ldr	r0, [r7, #16]
 801ac94:	f7fe ff5c 	bl	8019b50 <tcp_abandon>
  }
}
 801ac98:	bf00      	nop
 801ac9a:	3718      	adds	r7, #24
 801ac9c:	46bd      	mov	sp, r7
 801ac9e:	bd80      	pop	{r7, pc}
 801aca0:	0802bf38 	.word	0x0802bf38
 801aca4:	0802c4c4 	.word	0x0802c4c4
 801aca8:	0802bf7c 	.word	0x0802bf7c
 801acac:	2001bd0c 	.word	0x2001bd0c
 801acb0:	2001bd10 	.word	0x2001bd10

0801acb4 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 801acb4:	b580      	push	{r7, lr}
 801acb6:	b084      	sub	sp, #16
 801acb8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801acba:	2300      	movs	r3, #0
 801acbc:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 801acbe:	2300      	movs	r3, #0
 801acc0:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801acc2:	4b12      	ldr	r3, [pc, #72]	; (801ad0c <tcp_kill_timewait+0x58>)
 801acc4:	681b      	ldr	r3, [r3, #0]
 801acc6:	60fb      	str	r3, [r7, #12]
 801acc8:	e012      	b.n	801acf0 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801acca:	4b11      	ldr	r3, [pc, #68]	; (801ad10 <tcp_kill_timewait+0x5c>)
 801accc:	681a      	ldr	r2, [r3, #0]
 801acce:	68fb      	ldr	r3, [r7, #12]
 801acd0:	6a1b      	ldr	r3, [r3, #32]
 801acd2:	1ad3      	subs	r3, r2, r3
 801acd4:	687a      	ldr	r2, [r7, #4]
 801acd6:	429a      	cmp	r2, r3
 801acd8:	d807      	bhi.n	801acea <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801acda:	4b0d      	ldr	r3, [pc, #52]	; (801ad10 <tcp_kill_timewait+0x5c>)
 801acdc:	681a      	ldr	r2, [r3, #0]
 801acde:	68fb      	ldr	r3, [r7, #12]
 801ace0:	6a1b      	ldr	r3, [r3, #32]
 801ace2:	1ad3      	subs	r3, r2, r3
 801ace4:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 801ace6:	68fb      	ldr	r3, [r7, #12]
 801ace8:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801acea:	68fb      	ldr	r3, [r7, #12]
 801acec:	68db      	ldr	r3, [r3, #12]
 801acee:	60fb      	str	r3, [r7, #12]
 801acf0:	68fb      	ldr	r3, [r7, #12]
 801acf2:	2b00      	cmp	r3, #0
 801acf4:	d1e9      	bne.n	801acca <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 801acf6:	68bb      	ldr	r3, [r7, #8]
 801acf8:	2b00      	cmp	r3, #0
 801acfa:	d002      	beq.n	801ad02 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801acfc:	68b8      	ldr	r0, [r7, #8]
 801acfe:	f7fe ffe5 	bl	8019ccc <tcp_abort>
  }
}
 801ad02:	bf00      	nop
 801ad04:	3710      	adds	r7, #16
 801ad06:	46bd      	mov	sp, r7
 801ad08:	bd80      	pop	{r7, pc}
 801ad0a:	bf00      	nop
 801ad0c:	2001bd1c 	.word	0x2001bd1c
 801ad10:	2001bd10 	.word	0x2001bd10

0801ad14 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 801ad14:	b580      	push	{r7, lr}
 801ad16:	b082      	sub	sp, #8
 801ad18:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801ad1a:	4b10      	ldr	r3, [pc, #64]	; (801ad5c <tcp_handle_closepend+0x48>)
 801ad1c:	681b      	ldr	r3, [r3, #0]
 801ad1e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801ad20:	e014      	b.n	801ad4c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 801ad22:	687b      	ldr	r3, [r7, #4]
 801ad24:	68db      	ldr	r3, [r3, #12]
 801ad26:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 801ad28:	687b      	ldr	r3, [r7, #4]
 801ad2a:	8b5b      	ldrh	r3, [r3, #26]
 801ad2c:	f003 0308 	and.w	r3, r3, #8
 801ad30:	2b00      	cmp	r3, #0
 801ad32:	d009      	beq.n	801ad48 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 801ad34:	687b      	ldr	r3, [r7, #4]
 801ad36:	8b5b      	ldrh	r3, [r3, #26]
 801ad38:	f023 0308 	bic.w	r3, r3, #8
 801ad3c:	b29a      	uxth	r2, r3
 801ad3e:	687b      	ldr	r3, [r7, #4]
 801ad40:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 801ad42:	6878      	ldr	r0, [r7, #4]
 801ad44:	f7fe fe6e 	bl	8019a24 <tcp_close_shutdown_fin>
    }
    pcb = next;
 801ad48:	683b      	ldr	r3, [r7, #0]
 801ad4a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801ad4c:	687b      	ldr	r3, [r7, #4]
 801ad4e:	2b00      	cmp	r3, #0
 801ad50:	d1e7      	bne.n	801ad22 <tcp_handle_closepend+0xe>
  }
}
 801ad52:	bf00      	nop
 801ad54:	bf00      	nop
 801ad56:	3708      	adds	r7, #8
 801ad58:	46bd      	mov	sp, r7
 801ad5a:	bd80      	pop	{r7, pc}
 801ad5c:	2001bd0c 	.word	0x2001bd0c

0801ad60 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 801ad60:	b580      	push	{r7, lr}
 801ad62:	b084      	sub	sp, #16
 801ad64:	af00      	add	r7, sp, #0
 801ad66:	4603      	mov	r3, r0
 801ad68:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801ad6a:	2001      	movs	r0, #1
 801ad6c:	f7fd faa4 	bl	80182b8 <memp_malloc>
 801ad70:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 801ad72:	68fb      	ldr	r3, [r7, #12]
 801ad74:	2b00      	cmp	r3, #0
 801ad76:	d126      	bne.n	801adc6 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 801ad78:	f7ff ffcc 	bl	801ad14 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 801ad7c:	f7ff ff9a 	bl	801acb4 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801ad80:	2001      	movs	r0, #1
 801ad82:	f7fd fa99 	bl	80182b8 <memp_malloc>
 801ad86:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 801ad88:	68fb      	ldr	r3, [r7, #12]
 801ad8a:	2b00      	cmp	r3, #0
 801ad8c:	d11b      	bne.n	801adc6 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 801ad8e:	2009      	movs	r0, #9
 801ad90:	f7ff ff46 	bl	801ac20 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801ad94:	2001      	movs	r0, #1
 801ad96:	f7fd fa8f 	bl	80182b8 <memp_malloc>
 801ad9a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 801ad9c:	68fb      	ldr	r3, [r7, #12]
 801ad9e:	2b00      	cmp	r3, #0
 801ada0:	d111      	bne.n	801adc6 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 801ada2:	2008      	movs	r0, #8
 801ada4:	f7ff ff3c 	bl	801ac20 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801ada8:	2001      	movs	r0, #1
 801adaa:	f7fd fa85 	bl	80182b8 <memp_malloc>
 801adae:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 801adb0:	68fb      	ldr	r3, [r7, #12]
 801adb2:	2b00      	cmp	r3, #0
 801adb4:	d107      	bne.n	801adc6 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 801adb6:	79fb      	ldrb	r3, [r7, #7]
 801adb8:	4618      	mov	r0, r3
 801adba:	f7ff fee3 	bl	801ab84 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801adbe:	2001      	movs	r0, #1
 801adc0:	f7fd fa7a 	bl	80182b8 <memp_malloc>
 801adc4:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 801adc6:	68fb      	ldr	r3, [r7, #12]
 801adc8:	2b00      	cmp	r3, #0
 801adca:	d03f      	beq.n	801ae4c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801adcc:	229c      	movs	r2, #156	; 0x9c
 801adce:	2100      	movs	r1, #0
 801add0:	68f8      	ldr	r0, [r7, #12]
 801add2:	f009 fe3f 	bl	8024a54 <memset>
    pcb->prio = prio;
 801add6:	68fb      	ldr	r3, [r7, #12]
 801add8:	79fa      	ldrb	r2, [r7, #7]
 801adda:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 801addc:	68fb      	ldr	r3, [r7, #12]
 801adde:	f44f 6286 	mov.w	r2, #1072	; 0x430
 801ade2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801ade6:	68fb      	ldr	r3, [r7, #12]
 801ade8:	f44f 6206 	mov.w	r2, #2144	; 0x860
 801adec:	855a      	strh	r2, [r3, #42]	; 0x2a
 801adee:	68fb      	ldr	r3, [r7, #12]
 801adf0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801adf2:	68fb      	ldr	r3, [r7, #12]
 801adf4:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 801adf6:	68fb      	ldr	r3, [r7, #12]
 801adf8:	22ff      	movs	r2, #255	; 0xff
 801adfa:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 801adfc:	68fb      	ldr	r3, [r7, #12]
 801adfe:	f44f 7206 	mov.w	r2, #536	; 0x218
 801ae02:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 801ae04:	68fb      	ldr	r3, [r7, #12]
 801ae06:	2206      	movs	r2, #6
 801ae08:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 801ae0c:	68fb      	ldr	r3, [r7, #12]
 801ae0e:	2206      	movs	r2, #6
 801ae10:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 801ae12:	68fb      	ldr	r3, [r7, #12]
 801ae14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801ae18:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 801ae1a:	68fb      	ldr	r3, [r7, #12]
 801ae1c:	2201      	movs	r2, #1
 801ae1e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 801ae22:	4b0d      	ldr	r3, [pc, #52]	; (801ae58 <tcp_alloc+0xf8>)
 801ae24:	681a      	ldr	r2, [r3, #0]
 801ae26:	68fb      	ldr	r3, [r7, #12]
 801ae28:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 801ae2a:	4b0c      	ldr	r3, [pc, #48]	; (801ae5c <tcp_alloc+0xfc>)
 801ae2c:	781a      	ldrb	r2, [r3, #0]
 801ae2e:	68fb      	ldr	r3, [r7, #12]
 801ae30:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 801ae32:	68fb      	ldr	r3, [r7, #12]
 801ae34:	f44f 6286 	mov.w	r2, #1072	; 0x430
 801ae38:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 801ae3c:	68fb      	ldr	r3, [r7, #12]
 801ae3e:	4a08      	ldr	r2, [pc, #32]	; (801ae60 <tcp_alloc+0x100>)
 801ae40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 801ae44:	68fb      	ldr	r3, [r7, #12]
 801ae46:	4a07      	ldr	r2, [pc, #28]	; (801ae64 <tcp_alloc+0x104>)
 801ae48:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 801ae4c:	68fb      	ldr	r3, [r7, #12]
}
 801ae4e:	4618      	mov	r0, r3
 801ae50:	3710      	adds	r7, #16
 801ae52:	46bd      	mov	sp, r7
 801ae54:	bd80      	pop	{r7, pc}
 801ae56:	bf00      	nop
 801ae58:	2001bd10 	.word	0x2001bd10
 801ae5c:	200137de 	.word	0x200137de
 801ae60:	0801ab19 	.word	0x0801ab19
 801ae64:	006ddd00 	.word	0x006ddd00

0801ae68 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 801ae68:	b580      	push	{r7, lr}
 801ae6a:	b084      	sub	sp, #16
 801ae6c:	af00      	add	r7, sp, #0
 801ae6e:	4603      	mov	r3, r0
 801ae70:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 801ae72:	2040      	movs	r0, #64	; 0x40
 801ae74:	f7ff ff74 	bl	801ad60 <tcp_alloc>
 801ae78:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801ae7a:	68fb      	ldr	r3, [r7, #12]
}
 801ae7c:	4618      	mov	r0, r3
 801ae7e:	3710      	adds	r7, #16
 801ae80:	46bd      	mov	sp, r7
 801ae82:	bd80      	pop	{r7, pc}

0801ae84 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 801ae84:	b480      	push	{r7}
 801ae86:	b083      	sub	sp, #12
 801ae88:	af00      	add	r7, sp, #0
 801ae8a:	6078      	str	r0, [r7, #4]
 801ae8c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 801ae8e:	687b      	ldr	r3, [r7, #4]
 801ae90:	2b00      	cmp	r3, #0
 801ae92:	d002      	beq.n	801ae9a <tcp_arg+0x16>
    pcb->callback_arg = arg;
 801ae94:	687b      	ldr	r3, [r7, #4]
 801ae96:	683a      	ldr	r2, [r7, #0]
 801ae98:	611a      	str	r2, [r3, #16]
  }
}
 801ae9a:	bf00      	nop
 801ae9c:	370c      	adds	r7, #12
 801ae9e:	46bd      	mov	sp, r7
 801aea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aea4:	4770      	bx	lr
	...

0801aea8 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 801aea8:	b580      	push	{r7, lr}
 801aeaa:	b082      	sub	sp, #8
 801aeac:	af00      	add	r7, sp, #0
 801aeae:	6078      	str	r0, [r7, #4]
 801aeb0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801aeb2:	687b      	ldr	r3, [r7, #4]
 801aeb4:	2b00      	cmp	r3, #0
 801aeb6:	d00e      	beq.n	801aed6 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 801aeb8:	687b      	ldr	r3, [r7, #4]
 801aeba:	7d1b      	ldrb	r3, [r3, #20]
 801aebc:	2b01      	cmp	r3, #1
 801aebe:	d106      	bne.n	801aece <tcp_recv+0x26>
 801aec0:	4b07      	ldr	r3, [pc, #28]	; (801aee0 <tcp_recv+0x38>)
 801aec2:	f240 72df 	movw	r2, #2015	; 0x7df
 801aec6:	4907      	ldr	r1, [pc, #28]	; (801aee4 <tcp_recv+0x3c>)
 801aec8:	4807      	ldr	r0, [pc, #28]	; (801aee8 <tcp_recv+0x40>)
 801aeca:	f00a fc6f 	bl	80257ac <iprintf>
    pcb->recv = recv;
 801aece:	687b      	ldr	r3, [r7, #4]
 801aed0:	683a      	ldr	r2, [r7, #0]
 801aed2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 801aed6:	bf00      	nop
 801aed8:	3708      	adds	r7, #8
 801aeda:	46bd      	mov	sp, r7
 801aedc:	bd80      	pop	{r7, pc}
 801aede:	bf00      	nop
 801aee0:	0802bf38 	.word	0x0802bf38
 801aee4:	0802c4d4 	.word	0x0802c4d4
 801aee8:	0802bf7c 	.word	0x0802bf7c

0801aeec <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 801aeec:	b580      	push	{r7, lr}
 801aeee:	b082      	sub	sp, #8
 801aef0:	af00      	add	r7, sp, #0
 801aef2:	6078      	str	r0, [r7, #4]
 801aef4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801aef6:	687b      	ldr	r3, [r7, #4]
 801aef8:	2b00      	cmp	r3, #0
 801aefa:	d00e      	beq.n	801af1a <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 801aefc:	687b      	ldr	r3, [r7, #4]
 801aefe:	7d1b      	ldrb	r3, [r3, #20]
 801af00:	2b01      	cmp	r3, #1
 801af02:	d106      	bne.n	801af12 <tcp_sent+0x26>
 801af04:	4b07      	ldr	r3, [pc, #28]	; (801af24 <tcp_sent+0x38>)
 801af06:	f240 72f3 	movw	r2, #2035	; 0x7f3
 801af0a:	4907      	ldr	r1, [pc, #28]	; (801af28 <tcp_sent+0x3c>)
 801af0c:	4807      	ldr	r0, [pc, #28]	; (801af2c <tcp_sent+0x40>)
 801af0e:	f00a fc4d 	bl	80257ac <iprintf>
    pcb->sent = sent;
 801af12:	687b      	ldr	r3, [r7, #4]
 801af14:	683a      	ldr	r2, [r7, #0]
 801af16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 801af1a:	bf00      	nop
 801af1c:	3708      	adds	r7, #8
 801af1e:	46bd      	mov	sp, r7
 801af20:	bd80      	pop	{r7, pc}
 801af22:	bf00      	nop
 801af24:	0802bf38 	.word	0x0802bf38
 801af28:	0802c4fc 	.word	0x0802c4fc
 801af2c:	0802bf7c 	.word	0x0802bf7c

0801af30 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 801af30:	b580      	push	{r7, lr}
 801af32:	b082      	sub	sp, #8
 801af34:	af00      	add	r7, sp, #0
 801af36:	6078      	str	r0, [r7, #4]
 801af38:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801af3a:	687b      	ldr	r3, [r7, #4]
 801af3c:	2b00      	cmp	r3, #0
 801af3e:	d00e      	beq.n	801af5e <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 801af40:	687b      	ldr	r3, [r7, #4]
 801af42:	7d1b      	ldrb	r3, [r3, #20]
 801af44:	2b01      	cmp	r3, #1
 801af46:	d106      	bne.n	801af56 <tcp_err+0x26>
 801af48:	4b07      	ldr	r3, [pc, #28]	; (801af68 <tcp_err+0x38>)
 801af4a:	f640 020d 	movw	r2, #2061	; 0x80d
 801af4e:	4907      	ldr	r1, [pc, #28]	; (801af6c <tcp_err+0x3c>)
 801af50:	4807      	ldr	r0, [pc, #28]	; (801af70 <tcp_err+0x40>)
 801af52:	f00a fc2b 	bl	80257ac <iprintf>
    pcb->errf = err;
 801af56:	687b      	ldr	r3, [r7, #4]
 801af58:	683a      	ldr	r2, [r7, #0]
 801af5a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 801af5e:	bf00      	nop
 801af60:	3708      	adds	r7, #8
 801af62:	46bd      	mov	sp, r7
 801af64:	bd80      	pop	{r7, pc}
 801af66:	bf00      	nop
 801af68:	0802bf38 	.word	0x0802bf38
 801af6c:	0802c524 	.word	0x0802c524
 801af70:	0802bf7c 	.word	0x0802bf7c

0801af74 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 801af74:	b580      	push	{r7, lr}
 801af76:	b084      	sub	sp, #16
 801af78:	af00      	add	r7, sp, #0
 801af7a:	60f8      	str	r0, [r7, #12]
 801af7c:	60b9      	str	r1, [r7, #8]
 801af7e:	4613      	mov	r3, r2
 801af80:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 801af82:	68fb      	ldr	r3, [r7, #12]
 801af84:	2b00      	cmp	r3, #0
 801af86:	d107      	bne.n	801af98 <tcp_poll+0x24>
 801af88:	4b0e      	ldr	r3, [pc, #56]	; (801afc4 <tcp_poll+0x50>)
 801af8a:	f640 023d 	movw	r2, #2109	; 0x83d
 801af8e:	490e      	ldr	r1, [pc, #56]	; (801afc8 <tcp_poll+0x54>)
 801af90:	480e      	ldr	r0, [pc, #56]	; (801afcc <tcp_poll+0x58>)
 801af92:	f00a fc0b 	bl	80257ac <iprintf>
 801af96:	e011      	b.n	801afbc <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 801af98:	68fb      	ldr	r3, [r7, #12]
 801af9a:	7d1b      	ldrb	r3, [r3, #20]
 801af9c:	2b01      	cmp	r3, #1
 801af9e:	d106      	bne.n	801afae <tcp_poll+0x3a>
 801afa0:	4b08      	ldr	r3, [pc, #32]	; (801afc4 <tcp_poll+0x50>)
 801afa2:	f640 023e 	movw	r2, #2110	; 0x83e
 801afa6:	490a      	ldr	r1, [pc, #40]	; (801afd0 <tcp_poll+0x5c>)
 801afa8:	4808      	ldr	r0, [pc, #32]	; (801afcc <tcp_poll+0x58>)
 801afaa:	f00a fbff 	bl	80257ac <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 801afae:	68fb      	ldr	r3, [r7, #12]
 801afb0:	68ba      	ldr	r2, [r7, #8]
 801afb2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 801afb6:	68fb      	ldr	r3, [r7, #12]
 801afb8:	79fa      	ldrb	r2, [r7, #7]
 801afba:	775a      	strb	r2, [r3, #29]
}
 801afbc:	3710      	adds	r7, #16
 801afbe:	46bd      	mov	sp, r7
 801afc0:	bd80      	pop	{r7, pc}
 801afc2:	bf00      	nop
 801afc4:	0802bf38 	.word	0x0802bf38
 801afc8:	0802c54c 	.word	0x0802c54c
 801afcc:	0802bf7c 	.word	0x0802bf7c
 801afd0:	0802c564 	.word	0x0802c564

0801afd4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 801afd4:	b580      	push	{r7, lr}
 801afd6:	b082      	sub	sp, #8
 801afd8:	af00      	add	r7, sp, #0
 801afda:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 801afdc:	687b      	ldr	r3, [r7, #4]
 801afde:	2b00      	cmp	r3, #0
 801afe0:	d107      	bne.n	801aff2 <tcp_pcb_purge+0x1e>
 801afe2:	4b21      	ldr	r3, [pc, #132]	; (801b068 <tcp_pcb_purge+0x94>)
 801afe4:	f640 0251 	movw	r2, #2129	; 0x851
 801afe8:	4920      	ldr	r1, [pc, #128]	; (801b06c <tcp_pcb_purge+0x98>)
 801afea:	4821      	ldr	r0, [pc, #132]	; (801b070 <tcp_pcb_purge+0x9c>)
 801afec:	f00a fbde 	bl	80257ac <iprintf>
 801aff0:	e037      	b.n	801b062 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 801aff2:	687b      	ldr	r3, [r7, #4]
 801aff4:	7d1b      	ldrb	r3, [r3, #20]
 801aff6:	2b00      	cmp	r3, #0
 801aff8:	d033      	beq.n	801b062 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 801affa:	687b      	ldr	r3, [r7, #4]
 801affc:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 801affe:	2b0a      	cmp	r3, #10
 801b000:	d02f      	beq.n	801b062 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 801b002:	687b      	ldr	r3, [r7, #4]
 801b004:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 801b006:	2b01      	cmp	r3, #1
 801b008:	d02b      	beq.n	801b062 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 801b00a:	687b      	ldr	r3, [r7, #4]
 801b00c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801b00e:	2b00      	cmp	r3, #0
 801b010:	d007      	beq.n	801b022 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801b012:	687b      	ldr	r3, [r7, #4]
 801b014:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801b016:	4618      	mov	r0, r3
 801b018:	f7fe f850 	bl	80190bc <pbuf_free>
      pcb->refused_data = NULL;
 801b01c:	687b      	ldr	r3, [r7, #4]
 801b01e:	2200      	movs	r2, #0
 801b020:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801b022:	687b      	ldr	r3, [r7, #4]
 801b024:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b026:	2b00      	cmp	r3, #0
 801b028:	d002      	beq.n	801b030 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 801b02a:	6878      	ldr	r0, [r7, #4]
 801b02c:	f000 f986 	bl	801b33c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 801b030:	687b      	ldr	r3, [r7, #4]
 801b032:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b036:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 801b038:	687b      	ldr	r3, [r7, #4]
 801b03a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b03c:	4618      	mov	r0, r3
 801b03e:	f7ff fd11 	bl	801aa64 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801b042:	687b      	ldr	r3, [r7, #4]
 801b044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b046:	4618      	mov	r0, r3
 801b048:	f7ff fd0c 	bl	801aa64 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 801b04c:	687b      	ldr	r3, [r7, #4]
 801b04e:	2200      	movs	r2, #0
 801b050:	66da      	str	r2, [r3, #108]	; 0x6c
 801b052:	687b      	ldr	r3, [r7, #4]
 801b054:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801b056:	687b      	ldr	r3, [r7, #4]
 801b058:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 801b05a:	687b      	ldr	r3, [r7, #4]
 801b05c:	2200      	movs	r2, #0
 801b05e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 801b062:	3708      	adds	r7, #8
 801b064:	46bd      	mov	sp, r7
 801b066:	bd80      	pop	{r7, pc}
 801b068:	0802bf38 	.word	0x0802bf38
 801b06c:	0802c584 	.word	0x0802c584
 801b070:	0802bf7c 	.word	0x0802bf7c

0801b074 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 801b074:	b580      	push	{r7, lr}
 801b076:	b084      	sub	sp, #16
 801b078:	af00      	add	r7, sp, #0
 801b07a:	6078      	str	r0, [r7, #4]
 801b07c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801b07e:	683b      	ldr	r3, [r7, #0]
 801b080:	2b00      	cmp	r3, #0
 801b082:	d106      	bne.n	801b092 <tcp_pcb_remove+0x1e>
 801b084:	4b3e      	ldr	r3, [pc, #248]	; (801b180 <tcp_pcb_remove+0x10c>)
 801b086:	f640 0283 	movw	r2, #2179	; 0x883
 801b08a:	493e      	ldr	r1, [pc, #248]	; (801b184 <tcp_pcb_remove+0x110>)
 801b08c:	483e      	ldr	r0, [pc, #248]	; (801b188 <tcp_pcb_remove+0x114>)
 801b08e:	f00a fb8d 	bl	80257ac <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801b092:	687b      	ldr	r3, [r7, #4]
 801b094:	2b00      	cmp	r3, #0
 801b096:	d106      	bne.n	801b0a6 <tcp_pcb_remove+0x32>
 801b098:	4b39      	ldr	r3, [pc, #228]	; (801b180 <tcp_pcb_remove+0x10c>)
 801b09a:	f640 0284 	movw	r2, #2180	; 0x884
 801b09e:	493b      	ldr	r1, [pc, #236]	; (801b18c <tcp_pcb_remove+0x118>)
 801b0a0:	4839      	ldr	r0, [pc, #228]	; (801b188 <tcp_pcb_remove+0x114>)
 801b0a2:	f00a fb83 	bl	80257ac <iprintf>

  TCP_RMV(pcblist, pcb);
 801b0a6:	687b      	ldr	r3, [r7, #4]
 801b0a8:	681b      	ldr	r3, [r3, #0]
 801b0aa:	683a      	ldr	r2, [r7, #0]
 801b0ac:	429a      	cmp	r2, r3
 801b0ae:	d105      	bne.n	801b0bc <tcp_pcb_remove+0x48>
 801b0b0:	687b      	ldr	r3, [r7, #4]
 801b0b2:	681b      	ldr	r3, [r3, #0]
 801b0b4:	68da      	ldr	r2, [r3, #12]
 801b0b6:	687b      	ldr	r3, [r7, #4]
 801b0b8:	601a      	str	r2, [r3, #0]
 801b0ba:	e013      	b.n	801b0e4 <tcp_pcb_remove+0x70>
 801b0bc:	687b      	ldr	r3, [r7, #4]
 801b0be:	681b      	ldr	r3, [r3, #0]
 801b0c0:	60fb      	str	r3, [r7, #12]
 801b0c2:	e00c      	b.n	801b0de <tcp_pcb_remove+0x6a>
 801b0c4:	68fb      	ldr	r3, [r7, #12]
 801b0c6:	68db      	ldr	r3, [r3, #12]
 801b0c8:	683a      	ldr	r2, [r7, #0]
 801b0ca:	429a      	cmp	r2, r3
 801b0cc:	d104      	bne.n	801b0d8 <tcp_pcb_remove+0x64>
 801b0ce:	683b      	ldr	r3, [r7, #0]
 801b0d0:	68da      	ldr	r2, [r3, #12]
 801b0d2:	68fb      	ldr	r3, [r7, #12]
 801b0d4:	60da      	str	r2, [r3, #12]
 801b0d6:	e005      	b.n	801b0e4 <tcp_pcb_remove+0x70>
 801b0d8:	68fb      	ldr	r3, [r7, #12]
 801b0da:	68db      	ldr	r3, [r3, #12]
 801b0dc:	60fb      	str	r3, [r7, #12]
 801b0de:	68fb      	ldr	r3, [r7, #12]
 801b0e0:	2b00      	cmp	r3, #0
 801b0e2:	d1ef      	bne.n	801b0c4 <tcp_pcb_remove+0x50>
 801b0e4:	683b      	ldr	r3, [r7, #0]
 801b0e6:	2200      	movs	r2, #0
 801b0e8:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 801b0ea:	6838      	ldr	r0, [r7, #0]
 801b0ec:	f7ff ff72 	bl	801afd4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 801b0f0:	683b      	ldr	r3, [r7, #0]
 801b0f2:	7d1b      	ldrb	r3, [r3, #20]
 801b0f4:	2b0a      	cmp	r3, #10
 801b0f6:	d013      	beq.n	801b120 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 801b0f8:	683b      	ldr	r3, [r7, #0]
 801b0fa:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 801b0fc:	2b01      	cmp	r3, #1
 801b0fe:	d00f      	beq.n	801b120 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 801b100:	683b      	ldr	r3, [r7, #0]
 801b102:	8b5b      	ldrh	r3, [r3, #26]
 801b104:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 801b108:	2b00      	cmp	r3, #0
 801b10a:	d009      	beq.n	801b120 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 801b10c:	683b      	ldr	r3, [r7, #0]
 801b10e:	8b5b      	ldrh	r3, [r3, #26]
 801b110:	f043 0302 	orr.w	r3, r3, #2
 801b114:	b29a      	uxth	r2, r3
 801b116:	683b      	ldr	r3, [r7, #0]
 801b118:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801b11a:	6838      	ldr	r0, [r7, #0]
 801b11c:	f003 fbc6 	bl	801e8ac <tcp_output>
  }

  if (pcb->state != LISTEN) {
 801b120:	683b      	ldr	r3, [r7, #0]
 801b122:	7d1b      	ldrb	r3, [r3, #20]
 801b124:	2b01      	cmp	r3, #1
 801b126:	d020      	beq.n	801b16a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 801b128:	683b      	ldr	r3, [r7, #0]
 801b12a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b12c:	2b00      	cmp	r3, #0
 801b12e:	d006      	beq.n	801b13e <tcp_pcb_remove+0xca>
 801b130:	4b13      	ldr	r3, [pc, #76]	; (801b180 <tcp_pcb_remove+0x10c>)
 801b132:	f640 0293 	movw	r2, #2195	; 0x893
 801b136:	4916      	ldr	r1, [pc, #88]	; (801b190 <tcp_pcb_remove+0x11c>)
 801b138:	4813      	ldr	r0, [pc, #76]	; (801b188 <tcp_pcb_remove+0x114>)
 801b13a:	f00a fb37 	bl	80257ac <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801b13e:	683b      	ldr	r3, [r7, #0]
 801b140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b142:	2b00      	cmp	r3, #0
 801b144:	d006      	beq.n	801b154 <tcp_pcb_remove+0xe0>
 801b146:	4b0e      	ldr	r3, [pc, #56]	; (801b180 <tcp_pcb_remove+0x10c>)
 801b148:	f640 0294 	movw	r2, #2196	; 0x894
 801b14c:	4911      	ldr	r1, [pc, #68]	; (801b194 <tcp_pcb_remove+0x120>)
 801b14e:	480e      	ldr	r0, [pc, #56]	; (801b188 <tcp_pcb_remove+0x114>)
 801b150:	f00a fb2c 	bl	80257ac <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 801b154:	683b      	ldr	r3, [r7, #0]
 801b156:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b158:	2b00      	cmp	r3, #0
 801b15a:	d006      	beq.n	801b16a <tcp_pcb_remove+0xf6>
 801b15c:	4b08      	ldr	r3, [pc, #32]	; (801b180 <tcp_pcb_remove+0x10c>)
 801b15e:	f640 0296 	movw	r2, #2198	; 0x896
 801b162:	490d      	ldr	r1, [pc, #52]	; (801b198 <tcp_pcb_remove+0x124>)
 801b164:	4808      	ldr	r0, [pc, #32]	; (801b188 <tcp_pcb_remove+0x114>)
 801b166:	f00a fb21 	bl	80257ac <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 801b16a:	683b      	ldr	r3, [r7, #0]
 801b16c:	2200      	movs	r2, #0
 801b16e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 801b170:	683b      	ldr	r3, [r7, #0]
 801b172:	2200      	movs	r2, #0
 801b174:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801b176:	bf00      	nop
 801b178:	3710      	adds	r7, #16
 801b17a:	46bd      	mov	sp, r7
 801b17c:	bd80      	pop	{r7, pc}
 801b17e:	bf00      	nop
 801b180:	0802bf38 	.word	0x0802bf38
 801b184:	0802c5a0 	.word	0x0802c5a0
 801b188:	0802bf7c 	.word	0x0802bf7c
 801b18c:	0802c5bc 	.word	0x0802c5bc
 801b190:	0802c5dc 	.word	0x0802c5dc
 801b194:	0802c5f4 	.word	0x0802c5f4
 801b198:	0802c610 	.word	0x0802c610

0801b19c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 801b19c:	b580      	push	{r7, lr}
 801b19e:	b082      	sub	sp, #8
 801b1a0:	af00      	add	r7, sp, #0
 801b1a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 801b1a4:	687b      	ldr	r3, [r7, #4]
 801b1a6:	2b00      	cmp	r3, #0
 801b1a8:	d106      	bne.n	801b1b8 <tcp_next_iss+0x1c>
 801b1aa:	4b0a      	ldr	r3, [pc, #40]	; (801b1d4 <tcp_next_iss+0x38>)
 801b1ac:	f640 02af 	movw	r2, #2223	; 0x8af
 801b1b0:	4909      	ldr	r1, [pc, #36]	; (801b1d8 <tcp_next_iss+0x3c>)
 801b1b2:	480a      	ldr	r0, [pc, #40]	; (801b1dc <tcp_next_iss+0x40>)
 801b1b4:	f00a fafa 	bl	80257ac <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 801b1b8:	4b09      	ldr	r3, [pc, #36]	; (801b1e0 <tcp_next_iss+0x44>)
 801b1ba:	681a      	ldr	r2, [r3, #0]
 801b1bc:	4b09      	ldr	r3, [pc, #36]	; (801b1e4 <tcp_next_iss+0x48>)
 801b1be:	681b      	ldr	r3, [r3, #0]
 801b1c0:	4413      	add	r3, r2
 801b1c2:	4a07      	ldr	r2, [pc, #28]	; (801b1e0 <tcp_next_iss+0x44>)
 801b1c4:	6013      	str	r3, [r2, #0]
  return iss;
 801b1c6:	4b06      	ldr	r3, [pc, #24]	; (801b1e0 <tcp_next_iss+0x44>)
 801b1c8:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801b1ca:	4618      	mov	r0, r3
 801b1cc:	3708      	adds	r7, #8
 801b1ce:	46bd      	mov	sp, r7
 801b1d0:	bd80      	pop	{r7, pc}
 801b1d2:	bf00      	nop
 801b1d4:	0802bf38 	.word	0x0802bf38
 801b1d8:	0802c628 	.word	0x0802c628
 801b1dc:	0802bf7c 	.word	0x0802bf7c
 801b1e0:	10000064 	.word	0x10000064
 801b1e4:	2001bd10 	.word	0x2001bd10

0801b1e8 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 801b1e8:	b580      	push	{r7, lr}
 801b1ea:	b086      	sub	sp, #24
 801b1ec:	af00      	add	r7, sp, #0
 801b1ee:	4603      	mov	r3, r0
 801b1f0:	60b9      	str	r1, [r7, #8]
 801b1f2:	607a      	str	r2, [r7, #4]
 801b1f4:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801b1f6:	687b      	ldr	r3, [r7, #4]
 801b1f8:	2b00      	cmp	r3, #0
 801b1fa:	d106      	bne.n	801b20a <tcp_eff_send_mss_netif+0x22>
 801b1fc:	4b14      	ldr	r3, [pc, #80]	; (801b250 <tcp_eff_send_mss_netif+0x68>)
 801b1fe:	f640 02c5 	movw	r2, #2245	; 0x8c5
 801b202:	4914      	ldr	r1, [pc, #80]	; (801b254 <tcp_eff_send_mss_netif+0x6c>)
 801b204:	4814      	ldr	r0, [pc, #80]	; (801b258 <tcp_eff_send_mss_netif+0x70>)
 801b206:	f00a fad1 	bl	80257ac <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 801b20a:	68bb      	ldr	r3, [r7, #8]
 801b20c:	2b00      	cmp	r3, #0
 801b20e:	d101      	bne.n	801b214 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 801b210:	89fb      	ldrh	r3, [r7, #14]
 801b212:	e019      	b.n	801b248 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 801b214:	68bb      	ldr	r3, [r7, #8]
 801b216:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801b218:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801b21a:	8afb      	ldrh	r3, [r7, #22]
 801b21c:	2b00      	cmp	r3, #0
 801b21e:	d012      	beq.n	801b246 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 801b220:	2328      	movs	r3, #40	; 0x28
 801b222:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 801b224:	8afa      	ldrh	r2, [r7, #22]
 801b226:	8abb      	ldrh	r3, [r7, #20]
 801b228:	429a      	cmp	r2, r3
 801b22a:	d904      	bls.n	801b236 <tcp_eff_send_mss_netif+0x4e>
 801b22c:	8afa      	ldrh	r2, [r7, #22]
 801b22e:	8abb      	ldrh	r3, [r7, #20]
 801b230:	1ad3      	subs	r3, r2, r3
 801b232:	b29b      	uxth	r3, r3
 801b234:	e000      	b.n	801b238 <tcp_eff_send_mss_netif+0x50>
 801b236:	2300      	movs	r3, #0
 801b238:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801b23a:	8a7a      	ldrh	r2, [r7, #18]
 801b23c:	89fb      	ldrh	r3, [r7, #14]
 801b23e:	4293      	cmp	r3, r2
 801b240:	bf28      	it	cs
 801b242:	4613      	movcs	r3, r2
 801b244:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801b246:	89fb      	ldrh	r3, [r7, #14]
}
 801b248:	4618      	mov	r0, r3
 801b24a:	3718      	adds	r7, #24
 801b24c:	46bd      	mov	sp, r7
 801b24e:	bd80      	pop	{r7, pc}
 801b250:	0802bf38 	.word	0x0802bf38
 801b254:	0802c644 	.word	0x0802c644
 801b258:	0802bf7c 	.word	0x0802bf7c

0801b25c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 801b25c:	b580      	push	{r7, lr}
 801b25e:	b084      	sub	sp, #16
 801b260:	af00      	add	r7, sp, #0
 801b262:	6078      	str	r0, [r7, #4]
 801b264:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801b266:	683b      	ldr	r3, [r7, #0]
 801b268:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801b26a:	687b      	ldr	r3, [r7, #4]
 801b26c:	2b00      	cmp	r3, #0
 801b26e:	d119      	bne.n	801b2a4 <tcp_netif_ip_addr_changed_pcblist+0x48>
 801b270:	4b10      	ldr	r3, [pc, #64]	; (801b2b4 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 801b272:	f44f 6210 	mov.w	r2, #2304	; 0x900
 801b276:	4910      	ldr	r1, [pc, #64]	; (801b2b8 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 801b278:	4810      	ldr	r0, [pc, #64]	; (801b2bc <tcp_netif_ip_addr_changed_pcblist+0x60>)
 801b27a:	f00a fa97 	bl	80257ac <iprintf>

  while (pcb != NULL) {
 801b27e:	e011      	b.n	801b2a4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 801b280:	68fb      	ldr	r3, [r7, #12]
 801b282:	681a      	ldr	r2, [r3, #0]
 801b284:	687b      	ldr	r3, [r7, #4]
 801b286:	681b      	ldr	r3, [r3, #0]
 801b288:	429a      	cmp	r2, r3
 801b28a:	d108      	bne.n	801b29e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 801b28c:	68fb      	ldr	r3, [r7, #12]
 801b28e:	68db      	ldr	r3, [r3, #12]
 801b290:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 801b292:	68f8      	ldr	r0, [r7, #12]
 801b294:	f7fe fd1a 	bl	8019ccc <tcp_abort>
      pcb = next;
 801b298:	68bb      	ldr	r3, [r7, #8]
 801b29a:	60fb      	str	r3, [r7, #12]
 801b29c:	e002      	b.n	801b2a4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 801b29e:	68fb      	ldr	r3, [r7, #12]
 801b2a0:	68db      	ldr	r3, [r3, #12]
 801b2a2:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 801b2a4:	68fb      	ldr	r3, [r7, #12]
 801b2a6:	2b00      	cmp	r3, #0
 801b2a8:	d1ea      	bne.n	801b280 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 801b2aa:	bf00      	nop
 801b2ac:	bf00      	nop
 801b2ae:	3710      	adds	r7, #16
 801b2b0:	46bd      	mov	sp, r7
 801b2b2:	bd80      	pop	{r7, pc}
 801b2b4:	0802bf38 	.word	0x0802bf38
 801b2b8:	0802c66c 	.word	0x0802c66c
 801b2bc:	0802bf7c 	.word	0x0802bf7c

0801b2c0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801b2c0:	b580      	push	{r7, lr}
 801b2c2:	b084      	sub	sp, #16
 801b2c4:	af00      	add	r7, sp, #0
 801b2c6:	6078      	str	r0, [r7, #4]
 801b2c8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 801b2ca:	687b      	ldr	r3, [r7, #4]
 801b2cc:	2b00      	cmp	r3, #0
 801b2ce:	d02a      	beq.n	801b326 <tcp_netif_ip_addr_changed+0x66>
 801b2d0:	687b      	ldr	r3, [r7, #4]
 801b2d2:	681b      	ldr	r3, [r3, #0]
 801b2d4:	2b00      	cmp	r3, #0
 801b2d6:	d026      	beq.n	801b326 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 801b2d8:	4b15      	ldr	r3, [pc, #84]	; (801b330 <tcp_netif_ip_addr_changed+0x70>)
 801b2da:	681b      	ldr	r3, [r3, #0]
 801b2dc:	4619      	mov	r1, r3
 801b2de:	6878      	ldr	r0, [r7, #4]
 801b2e0:	f7ff ffbc 	bl	801b25c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 801b2e4:	4b13      	ldr	r3, [pc, #76]	; (801b334 <tcp_netif_ip_addr_changed+0x74>)
 801b2e6:	681b      	ldr	r3, [r3, #0]
 801b2e8:	4619      	mov	r1, r3
 801b2ea:	6878      	ldr	r0, [r7, #4]
 801b2ec:	f7ff ffb6 	bl	801b25c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 801b2f0:	683b      	ldr	r3, [r7, #0]
 801b2f2:	2b00      	cmp	r3, #0
 801b2f4:	d017      	beq.n	801b326 <tcp_netif_ip_addr_changed+0x66>
 801b2f6:	683b      	ldr	r3, [r7, #0]
 801b2f8:	681b      	ldr	r3, [r3, #0]
 801b2fa:	2b00      	cmp	r3, #0
 801b2fc:	d013      	beq.n	801b326 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801b2fe:	4b0e      	ldr	r3, [pc, #56]	; (801b338 <tcp_netif_ip_addr_changed+0x78>)
 801b300:	681b      	ldr	r3, [r3, #0]
 801b302:	60fb      	str	r3, [r7, #12]
 801b304:	e00c      	b.n	801b320 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801b306:	68fb      	ldr	r3, [r7, #12]
 801b308:	681a      	ldr	r2, [r3, #0]
 801b30a:	687b      	ldr	r3, [r7, #4]
 801b30c:	681b      	ldr	r3, [r3, #0]
 801b30e:	429a      	cmp	r2, r3
 801b310:	d103      	bne.n	801b31a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801b312:	683b      	ldr	r3, [r7, #0]
 801b314:	681a      	ldr	r2, [r3, #0]
 801b316:	68fb      	ldr	r3, [r7, #12]
 801b318:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801b31a:	68fb      	ldr	r3, [r7, #12]
 801b31c:	68db      	ldr	r3, [r3, #12]
 801b31e:	60fb      	str	r3, [r7, #12]
 801b320:	68fb      	ldr	r3, [r7, #12]
 801b322:	2b00      	cmp	r3, #0
 801b324:	d1ef      	bne.n	801b306 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801b326:	bf00      	nop
 801b328:	3710      	adds	r7, #16
 801b32a:	46bd      	mov	sp, r7
 801b32c:	bd80      	pop	{r7, pc}
 801b32e:	bf00      	nop
 801b330:	2001bd0c 	.word	0x2001bd0c
 801b334:	2001bd18 	.word	0x2001bd18
 801b338:	2001bd14 	.word	0x2001bd14

0801b33c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 801b33c:	b580      	push	{r7, lr}
 801b33e:	b082      	sub	sp, #8
 801b340:	af00      	add	r7, sp, #0
 801b342:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 801b344:	687b      	ldr	r3, [r7, #4]
 801b346:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b348:	2b00      	cmp	r3, #0
 801b34a:	d007      	beq.n	801b35c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 801b34c:	687b      	ldr	r3, [r7, #4]
 801b34e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b350:	4618      	mov	r0, r3
 801b352:	f7ff fb87 	bl	801aa64 <tcp_segs_free>
    pcb->ooseq = NULL;
 801b356:	687b      	ldr	r3, [r7, #4]
 801b358:	2200      	movs	r2, #0
 801b35a:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 801b35c:	bf00      	nop
 801b35e:	3708      	adds	r7, #8
 801b360:	46bd      	mov	sp, r7
 801b362:	bd80      	pop	{r7, pc}

0801b364 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 801b364:	b590      	push	{r4, r7, lr}
 801b366:	b08d      	sub	sp, #52	; 0x34
 801b368:	af04      	add	r7, sp, #16
 801b36a:	6078      	str	r0, [r7, #4]
 801b36c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801b36e:	687b      	ldr	r3, [r7, #4]
 801b370:	2b00      	cmp	r3, #0
 801b372:	d105      	bne.n	801b380 <tcp_input+0x1c>
 801b374:	4b9b      	ldr	r3, [pc, #620]	; (801b5e4 <tcp_input+0x280>)
 801b376:	2283      	movs	r2, #131	; 0x83
 801b378:	499b      	ldr	r1, [pc, #620]	; (801b5e8 <tcp_input+0x284>)
 801b37a:	489c      	ldr	r0, [pc, #624]	; (801b5ec <tcp_input+0x288>)
 801b37c:	f00a fa16 	bl	80257ac <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 801b380:	687b      	ldr	r3, [r7, #4]
 801b382:	685b      	ldr	r3, [r3, #4]
 801b384:	4a9a      	ldr	r2, [pc, #616]	; (801b5f0 <tcp_input+0x28c>)
 801b386:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 801b388:	687b      	ldr	r3, [r7, #4]
 801b38a:	895b      	ldrh	r3, [r3, #10]
 801b38c:	2b13      	cmp	r3, #19
 801b38e:	f240 83d1 	bls.w	801bb34 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801b392:	4b98      	ldr	r3, [pc, #608]	; (801b5f4 <tcp_input+0x290>)
 801b394:	695b      	ldr	r3, [r3, #20]
 801b396:	4a97      	ldr	r2, [pc, #604]	; (801b5f4 <tcp_input+0x290>)
 801b398:	6812      	ldr	r2, [r2, #0]
 801b39a:	4611      	mov	r1, r2
 801b39c:	4618      	mov	r0, r3
 801b39e:	f008 fa8f 	bl	80238c0 <ip4_addr_isbroadcast_u32>
 801b3a2:	4603      	mov	r3, r0
 801b3a4:	2b00      	cmp	r3, #0
 801b3a6:	f040 83c7 	bne.w	801bb38 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801b3aa:	4b92      	ldr	r3, [pc, #584]	; (801b5f4 <tcp_input+0x290>)
 801b3ac:	695b      	ldr	r3, [r3, #20]
 801b3ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801b3b2:	2be0      	cmp	r3, #224	; 0xe0
 801b3b4:	f000 83c0 	beq.w	801bb38 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 801b3b8:	4b8d      	ldr	r3, [pc, #564]	; (801b5f0 <tcp_input+0x28c>)
 801b3ba:	681b      	ldr	r3, [r3, #0]
 801b3bc:	899b      	ldrh	r3, [r3, #12]
 801b3be:	b29b      	uxth	r3, r3
 801b3c0:	4618      	mov	r0, r3
 801b3c2:	f7fc fa9b 	bl	80178fc <lwip_htons>
 801b3c6:	4603      	mov	r3, r0
 801b3c8:	0b1b      	lsrs	r3, r3, #12
 801b3ca:	b29b      	uxth	r3, r3
 801b3cc:	b2db      	uxtb	r3, r3
 801b3ce:	009b      	lsls	r3, r3, #2
 801b3d0:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801b3d2:	7cbb      	ldrb	r3, [r7, #18]
 801b3d4:	2b13      	cmp	r3, #19
 801b3d6:	f240 83b1 	bls.w	801bb3c <tcp_input+0x7d8>
 801b3da:	7cbb      	ldrb	r3, [r7, #18]
 801b3dc:	b29a      	uxth	r2, r3
 801b3de:	687b      	ldr	r3, [r7, #4]
 801b3e0:	891b      	ldrh	r3, [r3, #8]
 801b3e2:	429a      	cmp	r2, r3
 801b3e4:	f200 83aa 	bhi.w	801bb3c <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801b3e8:	7cbb      	ldrb	r3, [r7, #18]
 801b3ea:	b29b      	uxth	r3, r3
 801b3ec:	3b14      	subs	r3, #20
 801b3ee:	b29a      	uxth	r2, r3
 801b3f0:	4b81      	ldr	r3, [pc, #516]	; (801b5f8 <tcp_input+0x294>)
 801b3f2:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 801b3f4:	4b81      	ldr	r3, [pc, #516]	; (801b5fc <tcp_input+0x298>)
 801b3f6:	2200      	movs	r2, #0
 801b3f8:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 801b3fa:	687b      	ldr	r3, [r7, #4]
 801b3fc:	895a      	ldrh	r2, [r3, #10]
 801b3fe:	7cbb      	ldrb	r3, [r7, #18]
 801b400:	b29b      	uxth	r3, r3
 801b402:	429a      	cmp	r2, r3
 801b404:	d309      	bcc.n	801b41a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801b406:	4b7c      	ldr	r3, [pc, #496]	; (801b5f8 <tcp_input+0x294>)
 801b408:	881a      	ldrh	r2, [r3, #0]
 801b40a:	4b7d      	ldr	r3, [pc, #500]	; (801b600 <tcp_input+0x29c>)
 801b40c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801b40e:	7cbb      	ldrb	r3, [r7, #18]
 801b410:	4619      	mov	r1, r3
 801b412:	6878      	ldr	r0, [r7, #4]
 801b414:	f7fd fdcc 	bl	8018fb0 <pbuf_remove_header>
 801b418:	e04e      	b.n	801b4b8 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801b41a:	687b      	ldr	r3, [r7, #4]
 801b41c:	681b      	ldr	r3, [r3, #0]
 801b41e:	2b00      	cmp	r3, #0
 801b420:	d105      	bne.n	801b42e <tcp_input+0xca>
 801b422:	4b70      	ldr	r3, [pc, #448]	; (801b5e4 <tcp_input+0x280>)
 801b424:	22c2      	movs	r2, #194	; 0xc2
 801b426:	4977      	ldr	r1, [pc, #476]	; (801b604 <tcp_input+0x2a0>)
 801b428:	4870      	ldr	r0, [pc, #448]	; (801b5ec <tcp_input+0x288>)
 801b42a:	f00a f9bf 	bl	80257ac <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 801b42e:	2114      	movs	r1, #20
 801b430:	6878      	ldr	r0, [r7, #4]
 801b432:	f7fd fdbd 	bl	8018fb0 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801b436:	687b      	ldr	r3, [r7, #4]
 801b438:	895a      	ldrh	r2, [r3, #10]
 801b43a:	4b71      	ldr	r3, [pc, #452]	; (801b600 <tcp_input+0x29c>)
 801b43c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801b43e:	4b6e      	ldr	r3, [pc, #440]	; (801b5f8 <tcp_input+0x294>)
 801b440:	881a      	ldrh	r2, [r3, #0]
 801b442:	4b6f      	ldr	r3, [pc, #444]	; (801b600 <tcp_input+0x29c>)
 801b444:	881b      	ldrh	r3, [r3, #0]
 801b446:	1ad3      	subs	r3, r2, r3
 801b448:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 801b44a:	4b6d      	ldr	r3, [pc, #436]	; (801b600 <tcp_input+0x29c>)
 801b44c:	881b      	ldrh	r3, [r3, #0]
 801b44e:	4619      	mov	r1, r3
 801b450:	6878      	ldr	r0, [r7, #4]
 801b452:	f7fd fdad 	bl	8018fb0 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801b456:	687b      	ldr	r3, [r7, #4]
 801b458:	681b      	ldr	r3, [r3, #0]
 801b45a:	895b      	ldrh	r3, [r3, #10]
 801b45c:	8a3a      	ldrh	r2, [r7, #16]
 801b45e:	429a      	cmp	r2, r3
 801b460:	f200 836e 	bhi.w	801bb40 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801b464:	687b      	ldr	r3, [r7, #4]
 801b466:	681b      	ldr	r3, [r3, #0]
 801b468:	685b      	ldr	r3, [r3, #4]
 801b46a:	4a64      	ldr	r2, [pc, #400]	; (801b5fc <tcp_input+0x298>)
 801b46c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 801b46e:	687b      	ldr	r3, [r7, #4]
 801b470:	681b      	ldr	r3, [r3, #0]
 801b472:	8a3a      	ldrh	r2, [r7, #16]
 801b474:	4611      	mov	r1, r2
 801b476:	4618      	mov	r0, r3
 801b478:	f7fd fd9a 	bl	8018fb0 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 801b47c:	687b      	ldr	r3, [r7, #4]
 801b47e:	891a      	ldrh	r2, [r3, #8]
 801b480:	8a3b      	ldrh	r3, [r7, #16]
 801b482:	1ad3      	subs	r3, r2, r3
 801b484:	b29a      	uxth	r2, r3
 801b486:	687b      	ldr	r3, [r7, #4]
 801b488:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801b48a:	687b      	ldr	r3, [r7, #4]
 801b48c:	895b      	ldrh	r3, [r3, #10]
 801b48e:	2b00      	cmp	r3, #0
 801b490:	d005      	beq.n	801b49e <tcp_input+0x13a>
 801b492:	4b54      	ldr	r3, [pc, #336]	; (801b5e4 <tcp_input+0x280>)
 801b494:	22df      	movs	r2, #223	; 0xdf
 801b496:	495c      	ldr	r1, [pc, #368]	; (801b608 <tcp_input+0x2a4>)
 801b498:	4854      	ldr	r0, [pc, #336]	; (801b5ec <tcp_input+0x288>)
 801b49a:	f00a f987 	bl	80257ac <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801b49e:	687b      	ldr	r3, [r7, #4]
 801b4a0:	891a      	ldrh	r2, [r3, #8]
 801b4a2:	687b      	ldr	r3, [r7, #4]
 801b4a4:	681b      	ldr	r3, [r3, #0]
 801b4a6:	891b      	ldrh	r3, [r3, #8]
 801b4a8:	429a      	cmp	r2, r3
 801b4aa:	d005      	beq.n	801b4b8 <tcp_input+0x154>
 801b4ac:	4b4d      	ldr	r3, [pc, #308]	; (801b5e4 <tcp_input+0x280>)
 801b4ae:	22e0      	movs	r2, #224	; 0xe0
 801b4b0:	4956      	ldr	r1, [pc, #344]	; (801b60c <tcp_input+0x2a8>)
 801b4b2:	484e      	ldr	r0, [pc, #312]	; (801b5ec <tcp_input+0x288>)
 801b4b4:	f00a f97a 	bl	80257ac <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 801b4b8:	4b4d      	ldr	r3, [pc, #308]	; (801b5f0 <tcp_input+0x28c>)
 801b4ba:	681b      	ldr	r3, [r3, #0]
 801b4bc:	881b      	ldrh	r3, [r3, #0]
 801b4be:	b29b      	uxth	r3, r3
 801b4c0:	4a4b      	ldr	r2, [pc, #300]	; (801b5f0 <tcp_input+0x28c>)
 801b4c2:	6814      	ldr	r4, [r2, #0]
 801b4c4:	4618      	mov	r0, r3
 801b4c6:	f7fc fa19 	bl	80178fc <lwip_htons>
 801b4ca:	4603      	mov	r3, r0
 801b4cc:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801b4ce:	4b48      	ldr	r3, [pc, #288]	; (801b5f0 <tcp_input+0x28c>)
 801b4d0:	681b      	ldr	r3, [r3, #0]
 801b4d2:	885b      	ldrh	r3, [r3, #2]
 801b4d4:	b29b      	uxth	r3, r3
 801b4d6:	4a46      	ldr	r2, [pc, #280]	; (801b5f0 <tcp_input+0x28c>)
 801b4d8:	6814      	ldr	r4, [r2, #0]
 801b4da:	4618      	mov	r0, r3
 801b4dc:	f7fc fa0e 	bl	80178fc <lwip_htons>
 801b4e0:	4603      	mov	r3, r0
 801b4e2:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801b4e4:	4b42      	ldr	r3, [pc, #264]	; (801b5f0 <tcp_input+0x28c>)
 801b4e6:	681b      	ldr	r3, [r3, #0]
 801b4e8:	685b      	ldr	r3, [r3, #4]
 801b4ea:	4a41      	ldr	r2, [pc, #260]	; (801b5f0 <tcp_input+0x28c>)
 801b4ec:	6814      	ldr	r4, [r2, #0]
 801b4ee:	4618      	mov	r0, r3
 801b4f0:	f7fc fa19 	bl	8017926 <lwip_htonl>
 801b4f4:	4603      	mov	r3, r0
 801b4f6:	6063      	str	r3, [r4, #4]
 801b4f8:	6863      	ldr	r3, [r4, #4]
 801b4fa:	4a45      	ldr	r2, [pc, #276]	; (801b610 <tcp_input+0x2ac>)
 801b4fc:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801b4fe:	4b3c      	ldr	r3, [pc, #240]	; (801b5f0 <tcp_input+0x28c>)
 801b500:	681b      	ldr	r3, [r3, #0]
 801b502:	689b      	ldr	r3, [r3, #8]
 801b504:	4a3a      	ldr	r2, [pc, #232]	; (801b5f0 <tcp_input+0x28c>)
 801b506:	6814      	ldr	r4, [r2, #0]
 801b508:	4618      	mov	r0, r3
 801b50a:	f7fc fa0c 	bl	8017926 <lwip_htonl>
 801b50e:	4603      	mov	r3, r0
 801b510:	60a3      	str	r3, [r4, #8]
 801b512:	68a3      	ldr	r3, [r4, #8]
 801b514:	4a3f      	ldr	r2, [pc, #252]	; (801b614 <tcp_input+0x2b0>)
 801b516:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801b518:	4b35      	ldr	r3, [pc, #212]	; (801b5f0 <tcp_input+0x28c>)
 801b51a:	681b      	ldr	r3, [r3, #0]
 801b51c:	89db      	ldrh	r3, [r3, #14]
 801b51e:	b29b      	uxth	r3, r3
 801b520:	4a33      	ldr	r2, [pc, #204]	; (801b5f0 <tcp_input+0x28c>)
 801b522:	6814      	ldr	r4, [r2, #0]
 801b524:	4618      	mov	r0, r3
 801b526:	f7fc f9e9 	bl	80178fc <lwip_htons>
 801b52a:	4603      	mov	r3, r0
 801b52c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 801b52e:	4b30      	ldr	r3, [pc, #192]	; (801b5f0 <tcp_input+0x28c>)
 801b530:	681b      	ldr	r3, [r3, #0]
 801b532:	899b      	ldrh	r3, [r3, #12]
 801b534:	b29b      	uxth	r3, r3
 801b536:	4618      	mov	r0, r3
 801b538:	f7fc f9e0 	bl	80178fc <lwip_htons>
 801b53c:	4603      	mov	r3, r0
 801b53e:	b2db      	uxtb	r3, r3
 801b540:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801b544:	b2da      	uxtb	r2, r3
 801b546:	4b34      	ldr	r3, [pc, #208]	; (801b618 <tcp_input+0x2b4>)
 801b548:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801b54a:	687b      	ldr	r3, [r7, #4]
 801b54c:	891a      	ldrh	r2, [r3, #8]
 801b54e:	4b33      	ldr	r3, [pc, #204]	; (801b61c <tcp_input+0x2b8>)
 801b550:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801b552:	4b31      	ldr	r3, [pc, #196]	; (801b618 <tcp_input+0x2b4>)
 801b554:	781b      	ldrb	r3, [r3, #0]
 801b556:	f003 0303 	and.w	r3, r3, #3
 801b55a:	2b00      	cmp	r3, #0
 801b55c:	d00c      	beq.n	801b578 <tcp_input+0x214>
    tcplen++;
 801b55e:	4b2f      	ldr	r3, [pc, #188]	; (801b61c <tcp_input+0x2b8>)
 801b560:	881b      	ldrh	r3, [r3, #0]
 801b562:	3301      	adds	r3, #1
 801b564:	b29a      	uxth	r2, r3
 801b566:	4b2d      	ldr	r3, [pc, #180]	; (801b61c <tcp_input+0x2b8>)
 801b568:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 801b56a:	687b      	ldr	r3, [r7, #4]
 801b56c:	891a      	ldrh	r2, [r3, #8]
 801b56e:	4b2b      	ldr	r3, [pc, #172]	; (801b61c <tcp_input+0x2b8>)
 801b570:	881b      	ldrh	r3, [r3, #0]
 801b572:	429a      	cmp	r2, r3
 801b574:	f200 82e6 	bhi.w	801bb44 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 801b578:	2300      	movs	r3, #0
 801b57a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801b57c:	4b28      	ldr	r3, [pc, #160]	; (801b620 <tcp_input+0x2bc>)
 801b57e:	681b      	ldr	r3, [r3, #0]
 801b580:	61fb      	str	r3, [r7, #28]
 801b582:	e09d      	b.n	801b6c0 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801b584:	69fb      	ldr	r3, [r7, #28]
 801b586:	7d1b      	ldrb	r3, [r3, #20]
 801b588:	2b00      	cmp	r3, #0
 801b58a:	d105      	bne.n	801b598 <tcp_input+0x234>
 801b58c:	4b15      	ldr	r3, [pc, #84]	; (801b5e4 <tcp_input+0x280>)
 801b58e:	22fb      	movs	r2, #251	; 0xfb
 801b590:	4924      	ldr	r1, [pc, #144]	; (801b624 <tcp_input+0x2c0>)
 801b592:	4816      	ldr	r0, [pc, #88]	; (801b5ec <tcp_input+0x288>)
 801b594:	f00a f90a 	bl	80257ac <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801b598:	69fb      	ldr	r3, [r7, #28]
 801b59a:	7d1b      	ldrb	r3, [r3, #20]
 801b59c:	2b0a      	cmp	r3, #10
 801b59e:	d105      	bne.n	801b5ac <tcp_input+0x248>
 801b5a0:	4b10      	ldr	r3, [pc, #64]	; (801b5e4 <tcp_input+0x280>)
 801b5a2:	22fc      	movs	r2, #252	; 0xfc
 801b5a4:	4920      	ldr	r1, [pc, #128]	; (801b628 <tcp_input+0x2c4>)
 801b5a6:	4811      	ldr	r0, [pc, #68]	; (801b5ec <tcp_input+0x288>)
 801b5a8:	f00a f900 	bl	80257ac <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801b5ac:	69fb      	ldr	r3, [r7, #28]
 801b5ae:	7d1b      	ldrb	r3, [r3, #20]
 801b5b0:	2b01      	cmp	r3, #1
 801b5b2:	d105      	bne.n	801b5c0 <tcp_input+0x25c>
 801b5b4:	4b0b      	ldr	r3, [pc, #44]	; (801b5e4 <tcp_input+0x280>)
 801b5b6:	22fd      	movs	r2, #253	; 0xfd
 801b5b8:	491c      	ldr	r1, [pc, #112]	; (801b62c <tcp_input+0x2c8>)
 801b5ba:	480c      	ldr	r0, [pc, #48]	; (801b5ec <tcp_input+0x288>)
 801b5bc:	f00a f8f6 	bl	80257ac <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801b5c0:	69fb      	ldr	r3, [r7, #28]
 801b5c2:	7a1b      	ldrb	r3, [r3, #8]
 801b5c4:	2b00      	cmp	r3, #0
 801b5c6:	d033      	beq.n	801b630 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801b5c8:	69fb      	ldr	r3, [r7, #28]
 801b5ca:	7a1a      	ldrb	r2, [r3, #8]
 801b5cc:	4b09      	ldr	r3, [pc, #36]	; (801b5f4 <tcp_input+0x290>)
 801b5ce:	685b      	ldr	r3, [r3, #4]
 801b5d0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801b5d4:	3301      	adds	r3, #1
 801b5d6:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801b5d8:	429a      	cmp	r2, r3
 801b5da:	d029      	beq.n	801b630 <tcp_input+0x2cc>
      prev = pcb;
 801b5dc:	69fb      	ldr	r3, [r7, #28]
 801b5de:	61bb      	str	r3, [r7, #24]
      continue;
 801b5e0:	e06b      	b.n	801b6ba <tcp_input+0x356>
 801b5e2:	bf00      	nop
 801b5e4:	0802c6a0 	.word	0x0802c6a0
 801b5e8:	0802c6d4 	.word	0x0802c6d4
 801b5ec:	0802c6ec 	.word	0x0802c6ec
 801b5f0:	200137f0 	.word	0x200137f0
 801b5f4:	20017778 	.word	0x20017778
 801b5f8:	200137f4 	.word	0x200137f4
 801b5fc:	200137f8 	.word	0x200137f8
 801b600:	200137f6 	.word	0x200137f6
 801b604:	0802c714 	.word	0x0802c714
 801b608:	0802c724 	.word	0x0802c724
 801b60c:	0802c730 	.word	0x0802c730
 801b610:	20013800 	.word	0x20013800
 801b614:	20013804 	.word	0x20013804
 801b618:	2001380c 	.word	0x2001380c
 801b61c:	2001380a 	.word	0x2001380a
 801b620:	2001bd0c 	.word	0x2001bd0c
 801b624:	0802c750 	.word	0x0802c750
 801b628:	0802c778 	.word	0x0802c778
 801b62c:	0802c7a4 	.word	0x0802c7a4
    }

    if (pcb->remote_port == tcphdr->src &&
 801b630:	69fb      	ldr	r3, [r7, #28]
 801b632:	8b1a      	ldrh	r2, [r3, #24]
 801b634:	4b72      	ldr	r3, [pc, #456]	; (801b800 <tcp_input+0x49c>)
 801b636:	681b      	ldr	r3, [r3, #0]
 801b638:	881b      	ldrh	r3, [r3, #0]
 801b63a:	b29b      	uxth	r3, r3
 801b63c:	429a      	cmp	r2, r3
 801b63e:	d13a      	bne.n	801b6b6 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 801b640:	69fb      	ldr	r3, [r7, #28]
 801b642:	8ada      	ldrh	r2, [r3, #22]
 801b644:	4b6e      	ldr	r3, [pc, #440]	; (801b800 <tcp_input+0x49c>)
 801b646:	681b      	ldr	r3, [r3, #0]
 801b648:	885b      	ldrh	r3, [r3, #2]
 801b64a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 801b64c:	429a      	cmp	r2, r3
 801b64e:	d132      	bne.n	801b6b6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801b650:	69fb      	ldr	r3, [r7, #28]
 801b652:	685a      	ldr	r2, [r3, #4]
 801b654:	4b6b      	ldr	r3, [pc, #428]	; (801b804 <tcp_input+0x4a0>)
 801b656:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 801b658:	429a      	cmp	r2, r3
 801b65a:	d12c      	bne.n	801b6b6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801b65c:	69fb      	ldr	r3, [r7, #28]
 801b65e:	681a      	ldr	r2, [r3, #0]
 801b660:	4b68      	ldr	r3, [pc, #416]	; (801b804 <tcp_input+0x4a0>)
 801b662:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801b664:	429a      	cmp	r2, r3
 801b666:	d126      	bne.n	801b6b6 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801b668:	69fb      	ldr	r3, [r7, #28]
 801b66a:	68db      	ldr	r3, [r3, #12]
 801b66c:	69fa      	ldr	r2, [r7, #28]
 801b66e:	429a      	cmp	r2, r3
 801b670:	d106      	bne.n	801b680 <tcp_input+0x31c>
 801b672:	4b65      	ldr	r3, [pc, #404]	; (801b808 <tcp_input+0x4a4>)
 801b674:	f240 120d 	movw	r2, #269	; 0x10d
 801b678:	4964      	ldr	r1, [pc, #400]	; (801b80c <tcp_input+0x4a8>)
 801b67a:	4865      	ldr	r0, [pc, #404]	; (801b810 <tcp_input+0x4ac>)
 801b67c:	f00a f896 	bl	80257ac <iprintf>
      if (prev != NULL) {
 801b680:	69bb      	ldr	r3, [r7, #24]
 801b682:	2b00      	cmp	r3, #0
 801b684:	d00a      	beq.n	801b69c <tcp_input+0x338>
        prev->next = pcb->next;
 801b686:	69fb      	ldr	r3, [r7, #28]
 801b688:	68da      	ldr	r2, [r3, #12]
 801b68a:	69bb      	ldr	r3, [r7, #24]
 801b68c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 801b68e:	4b61      	ldr	r3, [pc, #388]	; (801b814 <tcp_input+0x4b0>)
 801b690:	681a      	ldr	r2, [r3, #0]
 801b692:	69fb      	ldr	r3, [r7, #28]
 801b694:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801b696:	4a5f      	ldr	r2, [pc, #380]	; (801b814 <tcp_input+0x4b0>)
 801b698:	69fb      	ldr	r3, [r7, #28]
 801b69a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 801b69c:	69fb      	ldr	r3, [r7, #28]
 801b69e:	68db      	ldr	r3, [r3, #12]
 801b6a0:	69fa      	ldr	r2, [r7, #28]
 801b6a2:	429a      	cmp	r2, r3
 801b6a4:	d111      	bne.n	801b6ca <tcp_input+0x366>
 801b6a6:	4b58      	ldr	r3, [pc, #352]	; (801b808 <tcp_input+0x4a4>)
 801b6a8:	f240 1215 	movw	r2, #277	; 0x115
 801b6ac:	495a      	ldr	r1, [pc, #360]	; (801b818 <tcp_input+0x4b4>)
 801b6ae:	4858      	ldr	r0, [pc, #352]	; (801b810 <tcp_input+0x4ac>)
 801b6b0:	f00a f87c 	bl	80257ac <iprintf>
      break;
 801b6b4:	e009      	b.n	801b6ca <tcp_input+0x366>
    }
    prev = pcb;
 801b6b6:	69fb      	ldr	r3, [r7, #28]
 801b6b8:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801b6ba:	69fb      	ldr	r3, [r7, #28]
 801b6bc:	68db      	ldr	r3, [r3, #12]
 801b6be:	61fb      	str	r3, [r7, #28]
 801b6c0:	69fb      	ldr	r3, [r7, #28]
 801b6c2:	2b00      	cmp	r3, #0
 801b6c4:	f47f af5e 	bne.w	801b584 <tcp_input+0x220>
 801b6c8:	e000      	b.n	801b6cc <tcp_input+0x368>
      break;
 801b6ca:	bf00      	nop
  }

  if (pcb == NULL) {
 801b6cc:	69fb      	ldr	r3, [r7, #28]
 801b6ce:	2b00      	cmp	r3, #0
 801b6d0:	f040 80aa 	bne.w	801b828 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801b6d4:	4b51      	ldr	r3, [pc, #324]	; (801b81c <tcp_input+0x4b8>)
 801b6d6:	681b      	ldr	r3, [r3, #0]
 801b6d8:	61fb      	str	r3, [r7, #28]
 801b6da:	e03f      	b.n	801b75c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801b6dc:	69fb      	ldr	r3, [r7, #28]
 801b6de:	7d1b      	ldrb	r3, [r3, #20]
 801b6e0:	2b0a      	cmp	r3, #10
 801b6e2:	d006      	beq.n	801b6f2 <tcp_input+0x38e>
 801b6e4:	4b48      	ldr	r3, [pc, #288]	; (801b808 <tcp_input+0x4a4>)
 801b6e6:	f240 121f 	movw	r2, #287	; 0x11f
 801b6ea:	494d      	ldr	r1, [pc, #308]	; (801b820 <tcp_input+0x4bc>)
 801b6ec:	4848      	ldr	r0, [pc, #288]	; (801b810 <tcp_input+0x4ac>)
 801b6ee:	f00a f85d 	bl	80257ac <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801b6f2:	69fb      	ldr	r3, [r7, #28]
 801b6f4:	7a1b      	ldrb	r3, [r3, #8]
 801b6f6:	2b00      	cmp	r3, #0
 801b6f8:	d009      	beq.n	801b70e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801b6fa:	69fb      	ldr	r3, [r7, #28]
 801b6fc:	7a1a      	ldrb	r2, [r3, #8]
 801b6fe:	4b41      	ldr	r3, [pc, #260]	; (801b804 <tcp_input+0x4a0>)
 801b700:	685b      	ldr	r3, [r3, #4]
 801b702:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801b706:	3301      	adds	r3, #1
 801b708:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801b70a:	429a      	cmp	r2, r3
 801b70c:	d122      	bne.n	801b754 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 801b70e:	69fb      	ldr	r3, [r7, #28]
 801b710:	8b1a      	ldrh	r2, [r3, #24]
 801b712:	4b3b      	ldr	r3, [pc, #236]	; (801b800 <tcp_input+0x49c>)
 801b714:	681b      	ldr	r3, [r3, #0]
 801b716:	881b      	ldrh	r3, [r3, #0]
 801b718:	b29b      	uxth	r3, r3
 801b71a:	429a      	cmp	r2, r3
 801b71c:	d11b      	bne.n	801b756 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 801b71e:	69fb      	ldr	r3, [r7, #28]
 801b720:	8ada      	ldrh	r2, [r3, #22]
 801b722:	4b37      	ldr	r3, [pc, #220]	; (801b800 <tcp_input+0x49c>)
 801b724:	681b      	ldr	r3, [r3, #0]
 801b726:	885b      	ldrh	r3, [r3, #2]
 801b728:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801b72a:	429a      	cmp	r2, r3
 801b72c:	d113      	bne.n	801b756 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801b72e:	69fb      	ldr	r3, [r7, #28]
 801b730:	685a      	ldr	r2, [r3, #4]
 801b732:	4b34      	ldr	r3, [pc, #208]	; (801b804 <tcp_input+0x4a0>)
 801b734:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801b736:	429a      	cmp	r2, r3
 801b738:	d10d      	bne.n	801b756 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801b73a:	69fb      	ldr	r3, [r7, #28]
 801b73c:	681a      	ldr	r2, [r3, #0]
 801b73e:	4b31      	ldr	r3, [pc, #196]	; (801b804 <tcp_input+0x4a0>)
 801b740:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801b742:	429a      	cmp	r2, r3
 801b744:	d107      	bne.n	801b756 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 801b746:	69f8      	ldr	r0, [r7, #28]
 801b748:	f000 fb56 	bl	801bdf8 <tcp_timewait_input>
        }
        pbuf_free(p);
 801b74c:	6878      	ldr	r0, [r7, #4]
 801b74e:	f7fd fcb5 	bl	80190bc <pbuf_free>
        return;
 801b752:	e1fd      	b.n	801bb50 <tcp_input+0x7ec>
        continue;
 801b754:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801b756:	69fb      	ldr	r3, [r7, #28]
 801b758:	68db      	ldr	r3, [r3, #12]
 801b75a:	61fb      	str	r3, [r7, #28]
 801b75c:	69fb      	ldr	r3, [r7, #28]
 801b75e:	2b00      	cmp	r3, #0
 801b760:	d1bc      	bne.n	801b6dc <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 801b762:	2300      	movs	r3, #0
 801b764:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801b766:	4b2f      	ldr	r3, [pc, #188]	; (801b824 <tcp_input+0x4c0>)
 801b768:	681b      	ldr	r3, [r3, #0]
 801b76a:	617b      	str	r3, [r7, #20]
 801b76c:	e02a      	b.n	801b7c4 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801b76e:	697b      	ldr	r3, [r7, #20]
 801b770:	7a1b      	ldrb	r3, [r3, #8]
 801b772:	2b00      	cmp	r3, #0
 801b774:	d00c      	beq.n	801b790 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801b776:	697b      	ldr	r3, [r7, #20]
 801b778:	7a1a      	ldrb	r2, [r3, #8]
 801b77a:	4b22      	ldr	r3, [pc, #136]	; (801b804 <tcp_input+0x4a0>)
 801b77c:	685b      	ldr	r3, [r3, #4]
 801b77e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801b782:	3301      	adds	r3, #1
 801b784:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801b786:	429a      	cmp	r2, r3
 801b788:	d002      	beq.n	801b790 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 801b78a:	697b      	ldr	r3, [r7, #20]
 801b78c:	61bb      	str	r3, [r7, #24]
        continue;
 801b78e:	e016      	b.n	801b7be <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 801b790:	697b      	ldr	r3, [r7, #20]
 801b792:	8ada      	ldrh	r2, [r3, #22]
 801b794:	4b1a      	ldr	r3, [pc, #104]	; (801b800 <tcp_input+0x49c>)
 801b796:	681b      	ldr	r3, [r3, #0]
 801b798:	885b      	ldrh	r3, [r3, #2]
 801b79a:	b29b      	uxth	r3, r3
 801b79c:	429a      	cmp	r2, r3
 801b79e:	d10c      	bne.n	801b7ba <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801b7a0:	697b      	ldr	r3, [r7, #20]
 801b7a2:	681a      	ldr	r2, [r3, #0]
 801b7a4:	4b17      	ldr	r3, [pc, #92]	; (801b804 <tcp_input+0x4a0>)
 801b7a6:	695b      	ldr	r3, [r3, #20]
 801b7a8:	429a      	cmp	r2, r3
 801b7aa:	d00f      	beq.n	801b7cc <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 801b7ac:	697b      	ldr	r3, [r7, #20]
 801b7ae:	2b00      	cmp	r3, #0
 801b7b0:	d00d      	beq.n	801b7ce <tcp_input+0x46a>
 801b7b2:	697b      	ldr	r3, [r7, #20]
 801b7b4:	681b      	ldr	r3, [r3, #0]
 801b7b6:	2b00      	cmp	r3, #0
 801b7b8:	d009      	beq.n	801b7ce <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801b7ba:	697b      	ldr	r3, [r7, #20]
 801b7bc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801b7be:	697b      	ldr	r3, [r7, #20]
 801b7c0:	68db      	ldr	r3, [r3, #12]
 801b7c2:	617b      	str	r3, [r7, #20]
 801b7c4:	697b      	ldr	r3, [r7, #20]
 801b7c6:	2b00      	cmp	r3, #0
 801b7c8:	d1d1      	bne.n	801b76e <tcp_input+0x40a>
 801b7ca:	e000      	b.n	801b7ce <tcp_input+0x46a>
            break;
 801b7cc:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 801b7ce:	697b      	ldr	r3, [r7, #20]
 801b7d0:	2b00      	cmp	r3, #0
 801b7d2:	d029      	beq.n	801b828 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 801b7d4:	69bb      	ldr	r3, [r7, #24]
 801b7d6:	2b00      	cmp	r3, #0
 801b7d8:	d00a      	beq.n	801b7f0 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801b7da:	697b      	ldr	r3, [r7, #20]
 801b7dc:	68da      	ldr	r2, [r3, #12]
 801b7de:	69bb      	ldr	r3, [r7, #24]
 801b7e0:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801b7e2:	4b10      	ldr	r3, [pc, #64]	; (801b824 <tcp_input+0x4c0>)
 801b7e4:	681a      	ldr	r2, [r3, #0]
 801b7e6:	697b      	ldr	r3, [r7, #20]
 801b7e8:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801b7ea:	4a0e      	ldr	r2, [pc, #56]	; (801b824 <tcp_input+0x4c0>)
 801b7ec:	697b      	ldr	r3, [r7, #20]
 801b7ee:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 801b7f0:	6978      	ldr	r0, [r7, #20]
 801b7f2:	f000 fa03 	bl	801bbfc <tcp_listen_input>
      }
      pbuf_free(p);
 801b7f6:	6878      	ldr	r0, [r7, #4]
 801b7f8:	f7fd fc60 	bl	80190bc <pbuf_free>
      return;
 801b7fc:	e1a8      	b.n	801bb50 <tcp_input+0x7ec>
 801b7fe:	bf00      	nop
 801b800:	200137f0 	.word	0x200137f0
 801b804:	20017778 	.word	0x20017778
 801b808:	0802c6a0 	.word	0x0802c6a0
 801b80c:	0802c7cc 	.word	0x0802c7cc
 801b810:	0802c6ec 	.word	0x0802c6ec
 801b814:	2001bd0c 	.word	0x2001bd0c
 801b818:	0802c7f8 	.word	0x0802c7f8
 801b81c:	2001bd1c 	.word	0x2001bd1c
 801b820:	0802c824 	.word	0x0802c824
 801b824:	2001bd14 	.word	0x2001bd14
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 801b828:	69fb      	ldr	r3, [r7, #28]
 801b82a:	2b00      	cmp	r3, #0
 801b82c:	f000 8158 	beq.w	801bae0 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 801b830:	4b95      	ldr	r3, [pc, #596]	; (801ba88 <tcp_input+0x724>)
 801b832:	2200      	movs	r2, #0
 801b834:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 801b836:	687b      	ldr	r3, [r7, #4]
 801b838:	891a      	ldrh	r2, [r3, #8]
 801b83a:	4b93      	ldr	r3, [pc, #588]	; (801ba88 <tcp_input+0x724>)
 801b83c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 801b83e:	4a92      	ldr	r2, [pc, #584]	; (801ba88 <tcp_input+0x724>)
 801b840:	687b      	ldr	r3, [r7, #4]
 801b842:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 801b844:	4b91      	ldr	r3, [pc, #580]	; (801ba8c <tcp_input+0x728>)
 801b846:	681b      	ldr	r3, [r3, #0]
 801b848:	4a8f      	ldr	r2, [pc, #572]	; (801ba88 <tcp_input+0x724>)
 801b84a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 801b84c:	4b90      	ldr	r3, [pc, #576]	; (801ba90 <tcp_input+0x72c>)
 801b84e:	2200      	movs	r2, #0
 801b850:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 801b852:	4b90      	ldr	r3, [pc, #576]	; (801ba94 <tcp_input+0x730>)
 801b854:	2200      	movs	r2, #0
 801b856:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 801b858:	4b8f      	ldr	r3, [pc, #572]	; (801ba98 <tcp_input+0x734>)
 801b85a:	2200      	movs	r2, #0
 801b85c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 801b85e:	4b8f      	ldr	r3, [pc, #572]	; (801ba9c <tcp_input+0x738>)
 801b860:	781b      	ldrb	r3, [r3, #0]
 801b862:	f003 0308 	and.w	r3, r3, #8
 801b866:	2b00      	cmp	r3, #0
 801b868:	d006      	beq.n	801b878 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 801b86a:	687b      	ldr	r3, [r7, #4]
 801b86c:	7b5b      	ldrb	r3, [r3, #13]
 801b86e:	f043 0301 	orr.w	r3, r3, #1
 801b872:	b2da      	uxtb	r2, r3
 801b874:	687b      	ldr	r3, [r7, #4]
 801b876:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 801b878:	69fb      	ldr	r3, [r7, #28]
 801b87a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801b87c:	2b00      	cmp	r3, #0
 801b87e:	d017      	beq.n	801b8b0 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801b880:	69f8      	ldr	r0, [r7, #28]
 801b882:	f7ff f873 	bl	801a96c <tcp_process_refused_data>
 801b886:	4603      	mov	r3, r0
 801b888:	f113 0f0d 	cmn.w	r3, #13
 801b88c:	d007      	beq.n	801b89e <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801b88e:	69fb      	ldr	r3, [r7, #28]
 801b890:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801b892:	2b00      	cmp	r3, #0
 801b894:	d00c      	beq.n	801b8b0 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801b896:	4b82      	ldr	r3, [pc, #520]	; (801baa0 <tcp_input+0x73c>)
 801b898:	881b      	ldrh	r3, [r3, #0]
 801b89a:	2b00      	cmp	r3, #0
 801b89c:	d008      	beq.n	801b8b0 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 801b89e:	69fb      	ldr	r3, [r7, #28]
 801b8a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801b8a2:	2b00      	cmp	r3, #0
 801b8a4:	f040 80e3 	bne.w	801ba6e <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 801b8a8:	69f8      	ldr	r0, [r7, #28]
 801b8aa:	f003 fe05 	bl	801f4b8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 801b8ae:	e0de      	b.n	801ba6e <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 801b8b0:	4a7c      	ldr	r2, [pc, #496]	; (801baa4 <tcp_input+0x740>)
 801b8b2:	69fb      	ldr	r3, [r7, #28]
 801b8b4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801b8b6:	69f8      	ldr	r0, [r7, #28]
 801b8b8:	f000 fb18 	bl	801beec <tcp_process>
 801b8bc:	4603      	mov	r3, r0
 801b8be:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 801b8c0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801b8c4:	f113 0f0d 	cmn.w	r3, #13
 801b8c8:	f000 80d3 	beq.w	801ba72 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 801b8cc:	4b71      	ldr	r3, [pc, #452]	; (801ba94 <tcp_input+0x730>)
 801b8ce:	781b      	ldrb	r3, [r3, #0]
 801b8d0:	f003 0308 	and.w	r3, r3, #8
 801b8d4:	2b00      	cmp	r3, #0
 801b8d6:	d015      	beq.n	801b904 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 801b8d8:	69fb      	ldr	r3, [r7, #28]
 801b8da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b8de:	2b00      	cmp	r3, #0
 801b8e0:	d008      	beq.n	801b8f4 <tcp_input+0x590>
 801b8e2:	69fb      	ldr	r3, [r7, #28]
 801b8e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b8e8:	69fa      	ldr	r2, [r7, #28]
 801b8ea:	6912      	ldr	r2, [r2, #16]
 801b8ec:	f06f 010d 	mvn.w	r1, #13
 801b8f0:	4610      	mov	r0, r2
 801b8f2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801b8f4:	69f9      	ldr	r1, [r7, #28]
 801b8f6:	486c      	ldr	r0, [pc, #432]	; (801baa8 <tcp_input+0x744>)
 801b8f8:	f7ff fbbc 	bl	801b074 <tcp_pcb_remove>
        tcp_free(pcb);
 801b8fc:	69f8      	ldr	r0, [r7, #28]
 801b8fe:	f7fd fefd 	bl	80196fc <tcp_free>
 801b902:	e0da      	b.n	801baba <tcp_input+0x756>
      } else {
        err = ERR_OK;
 801b904:	2300      	movs	r3, #0
 801b906:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 801b908:	4b63      	ldr	r3, [pc, #396]	; (801ba98 <tcp_input+0x734>)
 801b90a:	881b      	ldrh	r3, [r3, #0]
 801b90c:	2b00      	cmp	r3, #0
 801b90e:	d01d      	beq.n	801b94c <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 801b910:	4b61      	ldr	r3, [pc, #388]	; (801ba98 <tcp_input+0x734>)
 801b912:	881b      	ldrh	r3, [r3, #0]
 801b914:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801b916:	69fb      	ldr	r3, [r7, #28]
 801b918:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801b91c:	2b00      	cmp	r3, #0
 801b91e:	d00a      	beq.n	801b936 <tcp_input+0x5d2>
 801b920:	69fb      	ldr	r3, [r7, #28]
 801b922:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801b926:	69fa      	ldr	r2, [r7, #28]
 801b928:	6910      	ldr	r0, [r2, #16]
 801b92a:	89fa      	ldrh	r2, [r7, #14]
 801b92c:	69f9      	ldr	r1, [r7, #28]
 801b92e:	4798      	blx	r3
 801b930:	4603      	mov	r3, r0
 801b932:	74fb      	strb	r3, [r7, #19]
 801b934:	e001      	b.n	801b93a <tcp_input+0x5d6>
 801b936:	2300      	movs	r3, #0
 801b938:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801b93a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801b93e:	f113 0f0d 	cmn.w	r3, #13
 801b942:	f000 8098 	beq.w	801ba76 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 801b946:	4b54      	ldr	r3, [pc, #336]	; (801ba98 <tcp_input+0x734>)
 801b948:	2200      	movs	r2, #0
 801b94a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 801b94c:	69f8      	ldr	r0, [r7, #28]
 801b94e:	f000 f915 	bl	801bb7c <tcp_input_delayed_close>
 801b952:	4603      	mov	r3, r0
 801b954:	2b00      	cmp	r3, #0
 801b956:	f040 8090 	bne.w	801ba7a <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801b95a:	4b4d      	ldr	r3, [pc, #308]	; (801ba90 <tcp_input+0x72c>)
 801b95c:	681b      	ldr	r3, [r3, #0]
 801b95e:	2b00      	cmp	r3, #0
 801b960:	d041      	beq.n	801b9e6 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801b962:	69fb      	ldr	r3, [r7, #28]
 801b964:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801b966:	2b00      	cmp	r3, #0
 801b968:	d006      	beq.n	801b978 <tcp_input+0x614>
 801b96a:	4b50      	ldr	r3, [pc, #320]	; (801baac <tcp_input+0x748>)
 801b96c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801b970:	494f      	ldr	r1, [pc, #316]	; (801bab0 <tcp_input+0x74c>)
 801b972:	4850      	ldr	r0, [pc, #320]	; (801bab4 <tcp_input+0x750>)
 801b974:	f009 ff1a 	bl	80257ac <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801b978:	69fb      	ldr	r3, [r7, #28]
 801b97a:	8b5b      	ldrh	r3, [r3, #26]
 801b97c:	f003 0310 	and.w	r3, r3, #16
 801b980:	2b00      	cmp	r3, #0
 801b982:	d008      	beq.n	801b996 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 801b984:	4b42      	ldr	r3, [pc, #264]	; (801ba90 <tcp_input+0x72c>)
 801b986:	681b      	ldr	r3, [r3, #0]
 801b988:	4618      	mov	r0, r3
 801b98a:	f7fd fb97 	bl	80190bc <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801b98e:	69f8      	ldr	r0, [r7, #28]
 801b990:	f7fe f99c 	bl	8019ccc <tcp_abort>
            goto aborted;
 801b994:	e091      	b.n	801baba <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801b996:	69fb      	ldr	r3, [r7, #28]
 801b998:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b99c:	2b00      	cmp	r3, #0
 801b99e:	d00c      	beq.n	801b9ba <tcp_input+0x656>
 801b9a0:	69fb      	ldr	r3, [r7, #28]
 801b9a2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801b9a6:	69fb      	ldr	r3, [r7, #28]
 801b9a8:	6918      	ldr	r0, [r3, #16]
 801b9aa:	4b39      	ldr	r3, [pc, #228]	; (801ba90 <tcp_input+0x72c>)
 801b9ac:	681a      	ldr	r2, [r3, #0]
 801b9ae:	2300      	movs	r3, #0
 801b9b0:	69f9      	ldr	r1, [r7, #28]
 801b9b2:	47a0      	blx	r4
 801b9b4:	4603      	mov	r3, r0
 801b9b6:	74fb      	strb	r3, [r7, #19]
 801b9b8:	e008      	b.n	801b9cc <tcp_input+0x668>
 801b9ba:	4b35      	ldr	r3, [pc, #212]	; (801ba90 <tcp_input+0x72c>)
 801b9bc:	681a      	ldr	r2, [r3, #0]
 801b9be:	2300      	movs	r3, #0
 801b9c0:	69f9      	ldr	r1, [r7, #28]
 801b9c2:	2000      	movs	r0, #0
 801b9c4:	f7ff f8a8 	bl	801ab18 <tcp_recv_null>
 801b9c8:	4603      	mov	r3, r0
 801b9ca:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 801b9cc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801b9d0:	f113 0f0d 	cmn.w	r3, #13
 801b9d4:	d053      	beq.n	801ba7e <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801b9d6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801b9da:	2b00      	cmp	r3, #0
 801b9dc:	d003      	beq.n	801b9e6 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801b9de:	4b2c      	ldr	r3, [pc, #176]	; (801ba90 <tcp_input+0x72c>)
 801b9e0:	681a      	ldr	r2, [r3, #0]
 801b9e2:	69fb      	ldr	r3, [r7, #28]
 801b9e4:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801b9e6:	4b2b      	ldr	r3, [pc, #172]	; (801ba94 <tcp_input+0x730>)
 801b9e8:	781b      	ldrb	r3, [r3, #0]
 801b9ea:	f003 0320 	and.w	r3, r3, #32
 801b9ee:	2b00      	cmp	r3, #0
 801b9f0:	d030      	beq.n	801ba54 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 801b9f2:	69fb      	ldr	r3, [r7, #28]
 801b9f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801b9f6:	2b00      	cmp	r3, #0
 801b9f8:	d009      	beq.n	801ba0e <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801b9fa:	69fb      	ldr	r3, [r7, #28]
 801b9fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801b9fe:	7b5a      	ldrb	r2, [r3, #13]
 801ba00:	69fb      	ldr	r3, [r7, #28]
 801ba02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801ba04:	f042 0220 	orr.w	r2, r2, #32
 801ba08:	b2d2      	uxtb	r2, r2
 801ba0a:	735a      	strb	r2, [r3, #13]
 801ba0c:	e022      	b.n	801ba54 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801ba0e:	69fb      	ldr	r3, [r7, #28]
 801ba10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801ba12:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801ba16:	d005      	beq.n	801ba24 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 801ba18:	69fb      	ldr	r3, [r7, #28]
 801ba1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801ba1c:	3301      	adds	r3, #1
 801ba1e:	b29a      	uxth	r2, r3
 801ba20:	69fb      	ldr	r3, [r7, #28]
 801ba22:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 801ba24:	69fb      	ldr	r3, [r7, #28]
 801ba26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801ba2a:	2b00      	cmp	r3, #0
 801ba2c:	d00b      	beq.n	801ba46 <tcp_input+0x6e2>
 801ba2e:	69fb      	ldr	r3, [r7, #28]
 801ba30:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801ba34:	69fb      	ldr	r3, [r7, #28]
 801ba36:	6918      	ldr	r0, [r3, #16]
 801ba38:	2300      	movs	r3, #0
 801ba3a:	2200      	movs	r2, #0
 801ba3c:	69f9      	ldr	r1, [r7, #28]
 801ba3e:	47a0      	blx	r4
 801ba40:	4603      	mov	r3, r0
 801ba42:	74fb      	strb	r3, [r7, #19]
 801ba44:	e001      	b.n	801ba4a <tcp_input+0x6e6>
 801ba46:	2300      	movs	r3, #0
 801ba48:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801ba4a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801ba4e:	f113 0f0d 	cmn.w	r3, #13
 801ba52:	d016      	beq.n	801ba82 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 801ba54:	4b13      	ldr	r3, [pc, #76]	; (801baa4 <tcp_input+0x740>)
 801ba56:	2200      	movs	r2, #0
 801ba58:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801ba5a:	69f8      	ldr	r0, [r7, #28]
 801ba5c:	f000 f88e 	bl	801bb7c <tcp_input_delayed_close>
 801ba60:	4603      	mov	r3, r0
 801ba62:	2b00      	cmp	r3, #0
 801ba64:	d128      	bne.n	801bab8 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801ba66:	69f8      	ldr	r0, [r7, #28]
 801ba68:	f002 ff20 	bl	801e8ac <tcp_output>
 801ba6c:	e025      	b.n	801baba <tcp_input+0x756>
        goto aborted;
 801ba6e:	bf00      	nop
 801ba70:	e023      	b.n	801baba <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 801ba72:	bf00      	nop
 801ba74:	e021      	b.n	801baba <tcp_input+0x756>
              goto aborted;
 801ba76:	bf00      	nop
 801ba78:	e01f      	b.n	801baba <tcp_input+0x756>
          goto aborted;
 801ba7a:	bf00      	nop
 801ba7c:	e01d      	b.n	801baba <tcp_input+0x756>
            goto aborted;
 801ba7e:	bf00      	nop
 801ba80:	e01b      	b.n	801baba <tcp_input+0x756>
              goto aborted;
 801ba82:	bf00      	nop
 801ba84:	e019      	b.n	801baba <tcp_input+0x756>
 801ba86:	bf00      	nop
 801ba88:	200137e0 	.word	0x200137e0
 801ba8c:	200137f0 	.word	0x200137f0
 801ba90:	20013810 	.word	0x20013810
 801ba94:	2001380d 	.word	0x2001380d
 801ba98:	20013808 	.word	0x20013808
 801ba9c:	2001380c 	.word	0x2001380c
 801baa0:	2001380a 	.word	0x2001380a
 801baa4:	2001bd20 	.word	0x2001bd20
 801baa8:	2001bd0c 	.word	0x2001bd0c
 801baac:	0802c6a0 	.word	0x0802c6a0
 801bab0:	0802c854 	.word	0x0802c854
 801bab4:	0802c6ec 	.word	0x0802c6ec
          goto aborted;
 801bab8:	bf00      	nop
    tcp_input_pcb = NULL;
 801baba:	4b27      	ldr	r3, [pc, #156]	; (801bb58 <tcp_input+0x7f4>)
 801babc:	2200      	movs	r2, #0
 801babe:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 801bac0:	4b26      	ldr	r3, [pc, #152]	; (801bb5c <tcp_input+0x7f8>)
 801bac2:	2200      	movs	r2, #0
 801bac4:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 801bac6:	4b26      	ldr	r3, [pc, #152]	; (801bb60 <tcp_input+0x7fc>)
 801bac8:	685b      	ldr	r3, [r3, #4]
 801baca:	2b00      	cmp	r3, #0
 801bacc:	d03f      	beq.n	801bb4e <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 801bace:	4b24      	ldr	r3, [pc, #144]	; (801bb60 <tcp_input+0x7fc>)
 801bad0:	685b      	ldr	r3, [r3, #4]
 801bad2:	4618      	mov	r0, r3
 801bad4:	f7fd faf2 	bl	80190bc <pbuf_free>
      inseg.p = NULL;
 801bad8:	4b21      	ldr	r3, [pc, #132]	; (801bb60 <tcp_input+0x7fc>)
 801bada:	2200      	movs	r2, #0
 801badc:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 801bade:	e036      	b.n	801bb4e <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801bae0:	4b20      	ldr	r3, [pc, #128]	; (801bb64 <tcp_input+0x800>)
 801bae2:	681b      	ldr	r3, [r3, #0]
 801bae4:	899b      	ldrh	r3, [r3, #12]
 801bae6:	b29b      	uxth	r3, r3
 801bae8:	4618      	mov	r0, r3
 801baea:	f7fb ff07 	bl	80178fc <lwip_htons>
 801baee:	4603      	mov	r3, r0
 801baf0:	b2db      	uxtb	r3, r3
 801baf2:	f003 0304 	and.w	r3, r3, #4
 801baf6:	2b00      	cmp	r3, #0
 801baf8:	d118      	bne.n	801bb2c <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801bafa:	4b1b      	ldr	r3, [pc, #108]	; (801bb68 <tcp_input+0x804>)
 801bafc:	6819      	ldr	r1, [r3, #0]
 801bafe:	4b1b      	ldr	r3, [pc, #108]	; (801bb6c <tcp_input+0x808>)
 801bb00:	881b      	ldrh	r3, [r3, #0]
 801bb02:	461a      	mov	r2, r3
 801bb04:	4b1a      	ldr	r3, [pc, #104]	; (801bb70 <tcp_input+0x80c>)
 801bb06:	681b      	ldr	r3, [r3, #0]
 801bb08:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801bb0a:	4b16      	ldr	r3, [pc, #88]	; (801bb64 <tcp_input+0x800>)
 801bb0c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801bb0e:	885b      	ldrh	r3, [r3, #2]
 801bb10:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801bb12:	4a14      	ldr	r2, [pc, #80]	; (801bb64 <tcp_input+0x800>)
 801bb14:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801bb16:	8812      	ldrh	r2, [r2, #0]
 801bb18:	b292      	uxth	r2, r2
 801bb1a:	9202      	str	r2, [sp, #8]
 801bb1c:	9301      	str	r3, [sp, #4]
 801bb1e:	4b15      	ldr	r3, [pc, #84]	; (801bb74 <tcp_input+0x810>)
 801bb20:	9300      	str	r3, [sp, #0]
 801bb22:	4b15      	ldr	r3, [pc, #84]	; (801bb78 <tcp_input+0x814>)
 801bb24:	4602      	mov	r2, r0
 801bb26:	2000      	movs	r0, #0
 801bb28:	f003 fc74 	bl	801f414 <tcp_rst>
    pbuf_free(p);
 801bb2c:	6878      	ldr	r0, [r7, #4]
 801bb2e:	f7fd fac5 	bl	80190bc <pbuf_free>
  return;
 801bb32:	e00c      	b.n	801bb4e <tcp_input+0x7ea>
    goto dropped;
 801bb34:	bf00      	nop
 801bb36:	e006      	b.n	801bb46 <tcp_input+0x7e2>
    goto dropped;
 801bb38:	bf00      	nop
 801bb3a:	e004      	b.n	801bb46 <tcp_input+0x7e2>
    goto dropped;
 801bb3c:	bf00      	nop
 801bb3e:	e002      	b.n	801bb46 <tcp_input+0x7e2>
      goto dropped;
 801bb40:	bf00      	nop
 801bb42:	e000      	b.n	801bb46 <tcp_input+0x7e2>
      goto dropped;
 801bb44:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 801bb46:	6878      	ldr	r0, [r7, #4]
 801bb48:	f7fd fab8 	bl	80190bc <pbuf_free>
 801bb4c:	e000      	b.n	801bb50 <tcp_input+0x7ec>
  return;
 801bb4e:	bf00      	nop
}
 801bb50:	3724      	adds	r7, #36	; 0x24
 801bb52:	46bd      	mov	sp, r7
 801bb54:	bd90      	pop	{r4, r7, pc}
 801bb56:	bf00      	nop
 801bb58:	2001bd20 	.word	0x2001bd20
 801bb5c:	20013810 	.word	0x20013810
 801bb60:	200137e0 	.word	0x200137e0
 801bb64:	200137f0 	.word	0x200137f0
 801bb68:	20013804 	.word	0x20013804
 801bb6c:	2001380a 	.word	0x2001380a
 801bb70:	20013800 	.word	0x20013800
 801bb74:	20017788 	.word	0x20017788
 801bb78:	2001778c 	.word	0x2001778c

0801bb7c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 801bb7c:	b580      	push	{r7, lr}
 801bb7e:	b082      	sub	sp, #8
 801bb80:	af00      	add	r7, sp, #0
 801bb82:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 801bb84:	687b      	ldr	r3, [r7, #4]
 801bb86:	2b00      	cmp	r3, #0
 801bb88:	d106      	bne.n	801bb98 <tcp_input_delayed_close+0x1c>
 801bb8a:	4b17      	ldr	r3, [pc, #92]	; (801bbe8 <tcp_input_delayed_close+0x6c>)
 801bb8c:	f240 225a 	movw	r2, #602	; 0x25a
 801bb90:	4916      	ldr	r1, [pc, #88]	; (801bbec <tcp_input_delayed_close+0x70>)
 801bb92:	4817      	ldr	r0, [pc, #92]	; (801bbf0 <tcp_input_delayed_close+0x74>)
 801bb94:	f009 fe0a 	bl	80257ac <iprintf>

  if (recv_flags & TF_CLOSED) {
 801bb98:	4b16      	ldr	r3, [pc, #88]	; (801bbf4 <tcp_input_delayed_close+0x78>)
 801bb9a:	781b      	ldrb	r3, [r3, #0]
 801bb9c:	f003 0310 	and.w	r3, r3, #16
 801bba0:	2b00      	cmp	r3, #0
 801bba2:	d01c      	beq.n	801bbde <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 801bba4:	687b      	ldr	r3, [r7, #4]
 801bba6:	8b5b      	ldrh	r3, [r3, #26]
 801bba8:	f003 0310 	and.w	r3, r3, #16
 801bbac:	2b00      	cmp	r3, #0
 801bbae:	d10d      	bne.n	801bbcc <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 801bbb0:	687b      	ldr	r3, [r7, #4]
 801bbb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801bbb6:	2b00      	cmp	r3, #0
 801bbb8:	d008      	beq.n	801bbcc <tcp_input_delayed_close+0x50>
 801bbba:	687b      	ldr	r3, [r7, #4]
 801bbbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801bbc0:	687a      	ldr	r2, [r7, #4]
 801bbc2:	6912      	ldr	r2, [r2, #16]
 801bbc4:	f06f 010e 	mvn.w	r1, #14
 801bbc8:	4610      	mov	r0, r2
 801bbca:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801bbcc:	6879      	ldr	r1, [r7, #4]
 801bbce:	480a      	ldr	r0, [pc, #40]	; (801bbf8 <tcp_input_delayed_close+0x7c>)
 801bbd0:	f7ff fa50 	bl	801b074 <tcp_pcb_remove>
    tcp_free(pcb);
 801bbd4:	6878      	ldr	r0, [r7, #4]
 801bbd6:	f7fd fd91 	bl	80196fc <tcp_free>
    return 1;
 801bbda:	2301      	movs	r3, #1
 801bbdc:	e000      	b.n	801bbe0 <tcp_input_delayed_close+0x64>
  }
  return 0;
 801bbde:	2300      	movs	r3, #0
}
 801bbe0:	4618      	mov	r0, r3
 801bbe2:	3708      	adds	r7, #8
 801bbe4:	46bd      	mov	sp, r7
 801bbe6:	bd80      	pop	{r7, pc}
 801bbe8:	0802c6a0 	.word	0x0802c6a0
 801bbec:	0802c870 	.word	0x0802c870
 801bbf0:	0802c6ec 	.word	0x0802c6ec
 801bbf4:	2001380d 	.word	0x2001380d
 801bbf8:	2001bd0c 	.word	0x2001bd0c

0801bbfc <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 801bbfc:	b590      	push	{r4, r7, lr}
 801bbfe:	b08b      	sub	sp, #44	; 0x2c
 801bc00:	af04      	add	r7, sp, #16
 801bc02:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 801bc04:	4b6f      	ldr	r3, [pc, #444]	; (801bdc4 <tcp_listen_input+0x1c8>)
 801bc06:	781b      	ldrb	r3, [r3, #0]
 801bc08:	f003 0304 	and.w	r3, r3, #4
 801bc0c:	2b00      	cmp	r3, #0
 801bc0e:	f040 80d2 	bne.w	801bdb6 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 801bc12:	687b      	ldr	r3, [r7, #4]
 801bc14:	2b00      	cmp	r3, #0
 801bc16:	d106      	bne.n	801bc26 <tcp_listen_input+0x2a>
 801bc18:	4b6b      	ldr	r3, [pc, #428]	; (801bdc8 <tcp_listen_input+0x1cc>)
 801bc1a:	f240 2281 	movw	r2, #641	; 0x281
 801bc1e:	496b      	ldr	r1, [pc, #428]	; (801bdcc <tcp_listen_input+0x1d0>)
 801bc20:	486b      	ldr	r0, [pc, #428]	; (801bdd0 <tcp_listen_input+0x1d4>)
 801bc22:	f009 fdc3 	bl	80257ac <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801bc26:	4b67      	ldr	r3, [pc, #412]	; (801bdc4 <tcp_listen_input+0x1c8>)
 801bc28:	781b      	ldrb	r3, [r3, #0]
 801bc2a:	f003 0310 	and.w	r3, r3, #16
 801bc2e:	2b00      	cmp	r3, #0
 801bc30:	d019      	beq.n	801bc66 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801bc32:	4b68      	ldr	r3, [pc, #416]	; (801bdd4 <tcp_listen_input+0x1d8>)
 801bc34:	6819      	ldr	r1, [r3, #0]
 801bc36:	4b68      	ldr	r3, [pc, #416]	; (801bdd8 <tcp_listen_input+0x1dc>)
 801bc38:	881b      	ldrh	r3, [r3, #0]
 801bc3a:	461a      	mov	r2, r3
 801bc3c:	4b67      	ldr	r3, [pc, #412]	; (801bddc <tcp_listen_input+0x1e0>)
 801bc3e:	681b      	ldr	r3, [r3, #0]
 801bc40:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801bc42:	4b67      	ldr	r3, [pc, #412]	; (801bde0 <tcp_listen_input+0x1e4>)
 801bc44:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801bc46:	885b      	ldrh	r3, [r3, #2]
 801bc48:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801bc4a:	4a65      	ldr	r2, [pc, #404]	; (801bde0 <tcp_listen_input+0x1e4>)
 801bc4c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801bc4e:	8812      	ldrh	r2, [r2, #0]
 801bc50:	b292      	uxth	r2, r2
 801bc52:	9202      	str	r2, [sp, #8]
 801bc54:	9301      	str	r3, [sp, #4]
 801bc56:	4b63      	ldr	r3, [pc, #396]	; (801bde4 <tcp_listen_input+0x1e8>)
 801bc58:	9300      	str	r3, [sp, #0]
 801bc5a:	4b63      	ldr	r3, [pc, #396]	; (801bde8 <tcp_listen_input+0x1ec>)
 801bc5c:	4602      	mov	r2, r0
 801bc5e:	6878      	ldr	r0, [r7, #4]
 801bc60:	f003 fbd8 	bl	801f414 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 801bc64:	e0a9      	b.n	801bdba <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801bc66:	4b57      	ldr	r3, [pc, #348]	; (801bdc4 <tcp_listen_input+0x1c8>)
 801bc68:	781b      	ldrb	r3, [r3, #0]
 801bc6a:	f003 0302 	and.w	r3, r3, #2
 801bc6e:	2b00      	cmp	r3, #0
 801bc70:	f000 80a3 	beq.w	801bdba <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 801bc74:	687b      	ldr	r3, [r7, #4]
 801bc76:	7d5b      	ldrb	r3, [r3, #21]
 801bc78:	4618      	mov	r0, r3
 801bc7a:	f7ff f871 	bl	801ad60 <tcp_alloc>
 801bc7e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 801bc80:	697b      	ldr	r3, [r7, #20]
 801bc82:	2b00      	cmp	r3, #0
 801bc84:	d111      	bne.n	801bcaa <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801bc86:	687b      	ldr	r3, [r7, #4]
 801bc88:	699b      	ldr	r3, [r3, #24]
 801bc8a:	2b00      	cmp	r3, #0
 801bc8c:	d00a      	beq.n	801bca4 <tcp_listen_input+0xa8>
 801bc8e:	687b      	ldr	r3, [r7, #4]
 801bc90:	699b      	ldr	r3, [r3, #24]
 801bc92:	687a      	ldr	r2, [r7, #4]
 801bc94:	6910      	ldr	r0, [r2, #16]
 801bc96:	f04f 32ff 	mov.w	r2, #4294967295
 801bc9a:	2100      	movs	r1, #0
 801bc9c:	4798      	blx	r3
 801bc9e:	4603      	mov	r3, r0
 801bca0:	73bb      	strb	r3, [r7, #14]
      return;
 801bca2:	e08b      	b.n	801bdbc <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801bca4:	23f0      	movs	r3, #240	; 0xf0
 801bca6:	73bb      	strb	r3, [r7, #14]
      return;
 801bca8:	e088      	b.n	801bdbc <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801bcaa:	4b50      	ldr	r3, [pc, #320]	; (801bdec <tcp_listen_input+0x1f0>)
 801bcac:	695a      	ldr	r2, [r3, #20]
 801bcae:	697b      	ldr	r3, [r7, #20]
 801bcb0:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801bcb2:	4b4e      	ldr	r3, [pc, #312]	; (801bdec <tcp_listen_input+0x1f0>)
 801bcb4:	691a      	ldr	r2, [r3, #16]
 801bcb6:	697b      	ldr	r3, [r7, #20]
 801bcb8:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801bcba:	687b      	ldr	r3, [r7, #4]
 801bcbc:	8ada      	ldrh	r2, [r3, #22]
 801bcbe:	697b      	ldr	r3, [r7, #20]
 801bcc0:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 801bcc2:	4b47      	ldr	r3, [pc, #284]	; (801bde0 <tcp_listen_input+0x1e4>)
 801bcc4:	681b      	ldr	r3, [r3, #0]
 801bcc6:	881b      	ldrh	r3, [r3, #0]
 801bcc8:	b29a      	uxth	r2, r3
 801bcca:	697b      	ldr	r3, [r7, #20]
 801bccc:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801bcce:	697b      	ldr	r3, [r7, #20]
 801bcd0:	2203      	movs	r2, #3
 801bcd2:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 801bcd4:	4b41      	ldr	r3, [pc, #260]	; (801bddc <tcp_listen_input+0x1e0>)
 801bcd6:	681b      	ldr	r3, [r3, #0]
 801bcd8:	1c5a      	adds	r2, r3, #1
 801bcda:	697b      	ldr	r3, [r7, #20]
 801bcdc:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801bcde:	697b      	ldr	r3, [r7, #20]
 801bce0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801bce2:	697b      	ldr	r3, [r7, #20]
 801bce4:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 801bce6:	6978      	ldr	r0, [r7, #20]
 801bce8:	f7ff fa58 	bl	801b19c <tcp_next_iss>
 801bcec:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 801bcee:	697b      	ldr	r3, [r7, #20]
 801bcf0:	693a      	ldr	r2, [r7, #16]
 801bcf2:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 801bcf4:	697b      	ldr	r3, [r7, #20]
 801bcf6:	693a      	ldr	r2, [r7, #16]
 801bcf8:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 801bcfa:	697b      	ldr	r3, [r7, #20]
 801bcfc:	693a      	ldr	r2, [r7, #16]
 801bcfe:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 801bd00:	697b      	ldr	r3, [r7, #20]
 801bd02:	693a      	ldr	r2, [r7, #16]
 801bd04:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801bd06:	4b35      	ldr	r3, [pc, #212]	; (801bddc <tcp_listen_input+0x1e0>)
 801bd08:	681b      	ldr	r3, [r3, #0]
 801bd0a:	1e5a      	subs	r2, r3, #1
 801bd0c:	697b      	ldr	r3, [r7, #20]
 801bd0e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 801bd10:	687b      	ldr	r3, [r7, #4]
 801bd12:	691a      	ldr	r2, [r3, #16]
 801bd14:	697b      	ldr	r3, [r7, #20]
 801bd16:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 801bd18:	697b      	ldr	r3, [r7, #20]
 801bd1a:	687a      	ldr	r2, [r7, #4]
 801bd1c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801bd1e:	687b      	ldr	r3, [r7, #4]
 801bd20:	7a5b      	ldrb	r3, [r3, #9]
 801bd22:	f003 030c 	and.w	r3, r3, #12
 801bd26:	b2da      	uxtb	r2, r3
 801bd28:	697b      	ldr	r3, [r7, #20]
 801bd2a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 801bd2c:	687b      	ldr	r3, [r7, #4]
 801bd2e:	7a1a      	ldrb	r2, [r3, #8]
 801bd30:	697b      	ldr	r3, [r7, #20]
 801bd32:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 801bd34:	4b2e      	ldr	r3, [pc, #184]	; (801bdf0 <tcp_listen_input+0x1f4>)
 801bd36:	681a      	ldr	r2, [r3, #0]
 801bd38:	697b      	ldr	r3, [r7, #20]
 801bd3a:	60da      	str	r2, [r3, #12]
 801bd3c:	4a2c      	ldr	r2, [pc, #176]	; (801bdf0 <tcp_listen_input+0x1f4>)
 801bd3e:	697b      	ldr	r3, [r7, #20]
 801bd40:	6013      	str	r3, [r2, #0]
 801bd42:	f003 fd29 	bl	801f798 <tcp_timer_needed>
 801bd46:	4b2b      	ldr	r3, [pc, #172]	; (801bdf4 <tcp_listen_input+0x1f8>)
 801bd48:	2201      	movs	r2, #1
 801bd4a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 801bd4c:	6978      	ldr	r0, [r7, #20]
 801bd4e:	f001 fd8f 	bl	801d870 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801bd52:	4b23      	ldr	r3, [pc, #140]	; (801bde0 <tcp_listen_input+0x1e4>)
 801bd54:	681b      	ldr	r3, [r3, #0]
 801bd56:	89db      	ldrh	r3, [r3, #14]
 801bd58:	b29a      	uxth	r2, r3
 801bd5a:	697b      	ldr	r3, [r7, #20]
 801bd5c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 801bd60:	697b      	ldr	r3, [r7, #20]
 801bd62:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801bd66:	697b      	ldr	r3, [r7, #20]
 801bd68:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801bd6c:	697b      	ldr	r3, [r7, #20]
 801bd6e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 801bd70:	697b      	ldr	r3, [r7, #20]
 801bd72:	3304      	adds	r3, #4
 801bd74:	4618      	mov	r0, r3
 801bd76:	f007 faef 	bl	8023358 <ip4_route>
 801bd7a:	4601      	mov	r1, r0
 801bd7c:	697b      	ldr	r3, [r7, #20]
 801bd7e:	3304      	adds	r3, #4
 801bd80:	461a      	mov	r2, r3
 801bd82:	4620      	mov	r0, r4
 801bd84:	f7ff fa30 	bl	801b1e8 <tcp_eff_send_mss_netif>
 801bd88:	4603      	mov	r3, r0
 801bd8a:	461a      	mov	r2, r3
 801bd8c:	697b      	ldr	r3, [r7, #20]
 801bd8e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801bd90:	2112      	movs	r1, #18
 801bd92:	6978      	ldr	r0, [r7, #20]
 801bd94:	f002 fc9c 	bl	801e6d0 <tcp_enqueue_flags>
 801bd98:	4603      	mov	r3, r0
 801bd9a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 801bd9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801bda0:	2b00      	cmp	r3, #0
 801bda2:	d004      	beq.n	801bdae <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 801bda4:	2100      	movs	r1, #0
 801bda6:	6978      	ldr	r0, [r7, #20]
 801bda8:	f7fd fed2 	bl	8019b50 <tcp_abandon>
      return;
 801bdac:	e006      	b.n	801bdbc <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 801bdae:	6978      	ldr	r0, [r7, #20]
 801bdb0:	f002 fd7c 	bl	801e8ac <tcp_output>
  return;
 801bdb4:	e001      	b.n	801bdba <tcp_listen_input+0x1be>
    return;
 801bdb6:	bf00      	nop
 801bdb8:	e000      	b.n	801bdbc <tcp_listen_input+0x1c0>
  return;
 801bdba:	bf00      	nop
}
 801bdbc:	371c      	adds	r7, #28
 801bdbe:	46bd      	mov	sp, r7
 801bdc0:	bd90      	pop	{r4, r7, pc}
 801bdc2:	bf00      	nop
 801bdc4:	2001380c 	.word	0x2001380c
 801bdc8:	0802c6a0 	.word	0x0802c6a0
 801bdcc:	0802c898 	.word	0x0802c898
 801bdd0:	0802c6ec 	.word	0x0802c6ec
 801bdd4:	20013804 	.word	0x20013804
 801bdd8:	2001380a 	.word	0x2001380a
 801bddc:	20013800 	.word	0x20013800
 801bde0:	200137f0 	.word	0x200137f0
 801bde4:	20017788 	.word	0x20017788
 801bde8:	2001778c 	.word	0x2001778c
 801bdec:	20017778 	.word	0x20017778
 801bdf0:	2001bd0c 	.word	0x2001bd0c
 801bdf4:	2001bd08 	.word	0x2001bd08

0801bdf8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 801bdf8:	b580      	push	{r7, lr}
 801bdfa:	b086      	sub	sp, #24
 801bdfc:	af04      	add	r7, sp, #16
 801bdfe:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 801be00:	4b2f      	ldr	r3, [pc, #188]	; (801bec0 <tcp_timewait_input+0xc8>)
 801be02:	781b      	ldrb	r3, [r3, #0]
 801be04:	f003 0304 	and.w	r3, r3, #4
 801be08:	2b00      	cmp	r3, #0
 801be0a:	d153      	bne.n	801beb4 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 801be0c:	687b      	ldr	r3, [r7, #4]
 801be0e:	2b00      	cmp	r3, #0
 801be10:	d106      	bne.n	801be20 <tcp_timewait_input+0x28>
 801be12:	4b2c      	ldr	r3, [pc, #176]	; (801bec4 <tcp_timewait_input+0xcc>)
 801be14:	f240 22ee 	movw	r2, #750	; 0x2ee
 801be18:	492b      	ldr	r1, [pc, #172]	; (801bec8 <tcp_timewait_input+0xd0>)
 801be1a:	482c      	ldr	r0, [pc, #176]	; (801becc <tcp_timewait_input+0xd4>)
 801be1c:	f009 fcc6 	bl	80257ac <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 801be20:	4b27      	ldr	r3, [pc, #156]	; (801bec0 <tcp_timewait_input+0xc8>)
 801be22:	781b      	ldrb	r3, [r3, #0]
 801be24:	f003 0302 	and.w	r3, r3, #2
 801be28:	2b00      	cmp	r3, #0
 801be2a:	d02a      	beq.n	801be82 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 801be2c:	4b28      	ldr	r3, [pc, #160]	; (801bed0 <tcp_timewait_input+0xd8>)
 801be2e:	681a      	ldr	r2, [r3, #0]
 801be30:	687b      	ldr	r3, [r7, #4]
 801be32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801be34:	1ad3      	subs	r3, r2, r3
 801be36:	2b00      	cmp	r3, #0
 801be38:	db2d      	blt.n	801be96 <tcp_timewait_input+0x9e>
 801be3a:	4b25      	ldr	r3, [pc, #148]	; (801bed0 <tcp_timewait_input+0xd8>)
 801be3c:	681a      	ldr	r2, [r3, #0]
 801be3e:	687b      	ldr	r3, [r7, #4]
 801be40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801be42:	6879      	ldr	r1, [r7, #4]
 801be44:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801be46:	440b      	add	r3, r1
 801be48:	1ad3      	subs	r3, r2, r3
 801be4a:	2b00      	cmp	r3, #0
 801be4c:	dc23      	bgt.n	801be96 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801be4e:	4b21      	ldr	r3, [pc, #132]	; (801bed4 <tcp_timewait_input+0xdc>)
 801be50:	6819      	ldr	r1, [r3, #0]
 801be52:	4b21      	ldr	r3, [pc, #132]	; (801bed8 <tcp_timewait_input+0xe0>)
 801be54:	881b      	ldrh	r3, [r3, #0]
 801be56:	461a      	mov	r2, r3
 801be58:	4b1d      	ldr	r3, [pc, #116]	; (801bed0 <tcp_timewait_input+0xd8>)
 801be5a:	681b      	ldr	r3, [r3, #0]
 801be5c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801be5e:	4b1f      	ldr	r3, [pc, #124]	; (801bedc <tcp_timewait_input+0xe4>)
 801be60:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801be62:	885b      	ldrh	r3, [r3, #2]
 801be64:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801be66:	4a1d      	ldr	r2, [pc, #116]	; (801bedc <tcp_timewait_input+0xe4>)
 801be68:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801be6a:	8812      	ldrh	r2, [r2, #0]
 801be6c:	b292      	uxth	r2, r2
 801be6e:	9202      	str	r2, [sp, #8]
 801be70:	9301      	str	r3, [sp, #4]
 801be72:	4b1b      	ldr	r3, [pc, #108]	; (801bee0 <tcp_timewait_input+0xe8>)
 801be74:	9300      	str	r3, [sp, #0]
 801be76:	4b1b      	ldr	r3, [pc, #108]	; (801bee4 <tcp_timewait_input+0xec>)
 801be78:	4602      	mov	r2, r0
 801be7a:	6878      	ldr	r0, [r7, #4]
 801be7c:	f003 faca 	bl	801f414 <tcp_rst>
      return;
 801be80:	e01b      	b.n	801beba <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 801be82:	4b0f      	ldr	r3, [pc, #60]	; (801bec0 <tcp_timewait_input+0xc8>)
 801be84:	781b      	ldrb	r3, [r3, #0]
 801be86:	f003 0301 	and.w	r3, r3, #1
 801be8a:	2b00      	cmp	r3, #0
 801be8c:	d003      	beq.n	801be96 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801be8e:	4b16      	ldr	r3, [pc, #88]	; (801bee8 <tcp_timewait_input+0xf0>)
 801be90:	681a      	ldr	r2, [r3, #0]
 801be92:	687b      	ldr	r3, [r7, #4]
 801be94:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801be96:	4b10      	ldr	r3, [pc, #64]	; (801bed8 <tcp_timewait_input+0xe0>)
 801be98:	881b      	ldrh	r3, [r3, #0]
 801be9a:	2b00      	cmp	r3, #0
 801be9c:	d00c      	beq.n	801beb8 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 801be9e:	687b      	ldr	r3, [r7, #4]
 801bea0:	8b5b      	ldrh	r3, [r3, #26]
 801bea2:	f043 0302 	orr.w	r3, r3, #2
 801bea6:	b29a      	uxth	r2, r3
 801bea8:	687b      	ldr	r3, [r7, #4]
 801beaa:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801beac:	6878      	ldr	r0, [r7, #4]
 801beae:	f002 fcfd 	bl	801e8ac <tcp_output>
  }
  return;
 801beb2:	e001      	b.n	801beb8 <tcp_timewait_input+0xc0>
    return;
 801beb4:	bf00      	nop
 801beb6:	e000      	b.n	801beba <tcp_timewait_input+0xc2>
  return;
 801beb8:	bf00      	nop
}
 801beba:	3708      	adds	r7, #8
 801bebc:	46bd      	mov	sp, r7
 801bebe:	bd80      	pop	{r7, pc}
 801bec0:	2001380c 	.word	0x2001380c
 801bec4:	0802c6a0 	.word	0x0802c6a0
 801bec8:	0802c8b8 	.word	0x0802c8b8
 801becc:	0802c6ec 	.word	0x0802c6ec
 801bed0:	20013800 	.word	0x20013800
 801bed4:	20013804 	.word	0x20013804
 801bed8:	2001380a 	.word	0x2001380a
 801bedc:	200137f0 	.word	0x200137f0
 801bee0:	20017788 	.word	0x20017788
 801bee4:	2001778c 	.word	0x2001778c
 801bee8:	2001bd10 	.word	0x2001bd10

0801beec <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 801beec:	b590      	push	{r4, r7, lr}
 801beee:	b08d      	sub	sp, #52	; 0x34
 801bef0:	af04      	add	r7, sp, #16
 801bef2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 801bef4:	2300      	movs	r3, #0
 801bef6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 801bef8:	2300      	movs	r3, #0
 801befa:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 801befc:	687b      	ldr	r3, [r7, #4]
 801befe:	2b00      	cmp	r3, #0
 801bf00:	d106      	bne.n	801bf10 <tcp_process+0x24>
 801bf02:	4b9d      	ldr	r3, [pc, #628]	; (801c178 <tcp_process+0x28c>)
 801bf04:	f44f 7247 	mov.w	r2, #796	; 0x31c
 801bf08:	499c      	ldr	r1, [pc, #624]	; (801c17c <tcp_process+0x290>)
 801bf0a:	489d      	ldr	r0, [pc, #628]	; (801c180 <tcp_process+0x294>)
 801bf0c:	f009 fc4e 	bl	80257ac <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 801bf10:	4b9c      	ldr	r3, [pc, #624]	; (801c184 <tcp_process+0x298>)
 801bf12:	781b      	ldrb	r3, [r3, #0]
 801bf14:	f003 0304 	and.w	r3, r3, #4
 801bf18:	2b00      	cmp	r3, #0
 801bf1a:	d04e      	beq.n	801bfba <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 801bf1c:	687b      	ldr	r3, [r7, #4]
 801bf1e:	7d1b      	ldrb	r3, [r3, #20]
 801bf20:	2b02      	cmp	r3, #2
 801bf22:	d108      	bne.n	801bf36 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 801bf24:	687b      	ldr	r3, [r7, #4]
 801bf26:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801bf28:	4b97      	ldr	r3, [pc, #604]	; (801c188 <tcp_process+0x29c>)
 801bf2a:	681b      	ldr	r3, [r3, #0]
 801bf2c:	429a      	cmp	r2, r3
 801bf2e:	d123      	bne.n	801bf78 <tcp_process+0x8c>
        acceptable = 1;
 801bf30:	2301      	movs	r3, #1
 801bf32:	76fb      	strb	r3, [r7, #27]
 801bf34:	e020      	b.n	801bf78 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801bf36:	687b      	ldr	r3, [r7, #4]
 801bf38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801bf3a:	4b94      	ldr	r3, [pc, #592]	; (801c18c <tcp_process+0x2a0>)
 801bf3c:	681b      	ldr	r3, [r3, #0]
 801bf3e:	429a      	cmp	r2, r3
 801bf40:	d102      	bne.n	801bf48 <tcp_process+0x5c>
        acceptable = 1;
 801bf42:	2301      	movs	r3, #1
 801bf44:	76fb      	strb	r3, [r7, #27]
 801bf46:	e017      	b.n	801bf78 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801bf48:	4b90      	ldr	r3, [pc, #576]	; (801c18c <tcp_process+0x2a0>)
 801bf4a:	681a      	ldr	r2, [r3, #0]
 801bf4c:	687b      	ldr	r3, [r7, #4]
 801bf4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bf50:	1ad3      	subs	r3, r2, r3
 801bf52:	2b00      	cmp	r3, #0
 801bf54:	db10      	blt.n	801bf78 <tcp_process+0x8c>
 801bf56:	4b8d      	ldr	r3, [pc, #564]	; (801c18c <tcp_process+0x2a0>)
 801bf58:	681a      	ldr	r2, [r3, #0]
 801bf5a:	687b      	ldr	r3, [r7, #4]
 801bf5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bf5e:	6879      	ldr	r1, [r7, #4]
 801bf60:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801bf62:	440b      	add	r3, r1
 801bf64:	1ad3      	subs	r3, r2, r3
 801bf66:	2b00      	cmp	r3, #0
 801bf68:	dc06      	bgt.n	801bf78 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801bf6a:	687b      	ldr	r3, [r7, #4]
 801bf6c:	8b5b      	ldrh	r3, [r3, #26]
 801bf6e:	f043 0302 	orr.w	r3, r3, #2
 801bf72:	b29a      	uxth	r2, r3
 801bf74:	687b      	ldr	r3, [r7, #4]
 801bf76:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 801bf78:	7efb      	ldrb	r3, [r7, #27]
 801bf7a:	2b00      	cmp	r3, #0
 801bf7c:	d01b      	beq.n	801bfb6 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801bf7e:	687b      	ldr	r3, [r7, #4]
 801bf80:	7d1b      	ldrb	r3, [r3, #20]
 801bf82:	2b00      	cmp	r3, #0
 801bf84:	d106      	bne.n	801bf94 <tcp_process+0xa8>
 801bf86:	4b7c      	ldr	r3, [pc, #496]	; (801c178 <tcp_process+0x28c>)
 801bf88:	f44f 724e 	mov.w	r2, #824	; 0x338
 801bf8c:	4980      	ldr	r1, [pc, #512]	; (801c190 <tcp_process+0x2a4>)
 801bf8e:	487c      	ldr	r0, [pc, #496]	; (801c180 <tcp_process+0x294>)
 801bf90:	f009 fc0c 	bl	80257ac <iprintf>
      recv_flags |= TF_RESET;
 801bf94:	4b7f      	ldr	r3, [pc, #508]	; (801c194 <tcp_process+0x2a8>)
 801bf96:	781b      	ldrb	r3, [r3, #0]
 801bf98:	f043 0308 	orr.w	r3, r3, #8
 801bf9c:	b2da      	uxtb	r2, r3
 801bf9e:	4b7d      	ldr	r3, [pc, #500]	; (801c194 <tcp_process+0x2a8>)
 801bfa0:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801bfa2:	687b      	ldr	r3, [r7, #4]
 801bfa4:	8b5b      	ldrh	r3, [r3, #26]
 801bfa6:	f023 0301 	bic.w	r3, r3, #1
 801bfaa:	b29a      	uxth	r2, r3
 801bfac:	687b      	ldr	r3, [r7, #4]
 801bfae:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 801bfb0:	f06f 030d 	mvn.w	r3, #13
 801bfb4:	e37a      	b.n	801c6ac <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801bfb6:	2300      	movs	r3, #0
 801bfb8:	e378      	b.n	801c6ac <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801bfba:	4b72      	ldr	r3, [pc, #456]	; (801c184 <tcp_process+0x298>)
 801bfbc:	781b      	ldrb	r3, [r3, #0]
 801bfbe:	f003 0302 	and.w	r3, r3, #2
 801bfc2:	2b00      	cmp	r3, #0
 801bfc4:	d010      	beq.n	801bfe8 <tcp_process+0xfc>
 801bfc6:	687b      	ldr	r3, [r7, #4]
 801bfc8:	7d1b      	ldrb	r3, [r3, #20]
 801bfca:	2b02      	cmp	r3, #2
 801bfcc:	d00c      	beq.n	801bfe8 <tcp_process+0xfc>
 801bfce:	687b      	ldr	r3, [r7, #4]
 801bfd0:	7d1b      	ldrb	r3, [r3, #20]
 801bfd2:	2b03      	cmp	r3, #3
 801bfd4:	d008      	beq.n	801bfe8 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801bfd6:	687b      	ldr	r3, [r7, #4]
 801bfd8:	8b5b      	ldrh	r3, [r3, #26]
 801bfda:	f043 0302 	orr.w	r3, r3, #2
 801bfde:	b29a      	uxth	r2, r3
 801bfe0:	687b      	ldr	r3, [r7, #4]
 801bfe2:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 801bfe4:	2300      	movs	r3, #0
 801bfe6:	e361      	b.n	801c6ac <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801bfe8:	687b      	ldr	r3, [r7, #4]
 801bfea:	8b5b      	ldrh	r3, [r3, #26]
 801bfec:	f003 0310 	and.w	r3, r3, #16
 801bff0:	2b00      	cmp	r3, #0
 801bff2:	d103      	bne.n	801bffc <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 801bff4:	4b68      	ldr	r3, [pc, #416]	; (801c198 <tcp_process+0x2ac>)
 801bff6:	681a      	ldr	r2, [r3, #0]
 801bff8:	687b      	ldr	r3, [r7, #4]
 801bffa:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 801bffc:	687b      	ldr	r3, [r7, #4]
 801bffe:	2200      	movs	r2, #0
 801c000:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 801c004:	687b      	ldr	r3, [r7, #4]
 801c006:	2200      	movs	r2, #0
 801c008:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 801c00c:	6878      	ldr	r0, [r7, #4]
 801c00e:	f001 fc2f 	bl	801d870 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 801c012:	687b      	ldr	r3, [r7, #4]
 801c014:	7d1b      	ldrb	r3, [r3, #20]
 801c016:	3b02      	subs	r3, #2
 801c018:	2b07      	cmp	r3, #7
 801c01a:	f200 8337 	bhi.w	801c68c <tcp_process+0x7a0>
 801c01e:	a201      	add	r2, pc, #4	; (adr r2, 801c024 <tcp_process+0x138>)
 801c020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c024:	0801c045 	.word	0x0801c045
 801c028:	0801c275 	.word	0x0801c275
 801c02c:	0801c3ed 	.word	0x0801c3ed
 801c030:	0801c417 	.word	0x0801c417
 801c034:	0801c53b 	.word	0x0801c53b
 801c038:	0801c3ed 	.word	0x0801c3ed
 801c03c:	0801c5c7 	.word	0x0801c5c7
 801c040:	0801c657 	.word	0x0801c657
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 801c044:	4b4f      	ldr	r3, [pc, #316]	; (801c184 <tcp_process+0x298>)
 801c046:	781b      	ldrb	r3, [r3, #0]
 801c048:	f003 0310 	and.w	r3, r3, #16
 801c04c:	2b00      	cmp	r3, #0
 801c04e:	f000 80e4 	beq.w	801c21a <tcp_process+0x32e>
 801c052:	4b4c      	ldr	r3, [pc, #304]	; (801c184 <tcp_process+0x298>)
 801c054:	781b      	ldrb	r3, [r3, #0]
 801c056:	f003 0302 	and.w	r3, r3, #2
 801c05a:	2b00      	cmp	r3, #0
 801c05c:	f000 80dd 	beq.w	801c21a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 801c060:	687b      	ldr	r3, [r7, #4]
 801c062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c064:	1c5a      	adds	r2, r3, #1
 801c066:	4b48      	ldr	r3, [pc, #288]	; (801c188 <tcp_process+0x29c>)
 801c068:	681b      	ldr	r3, [r3, #0]
 801c06a:	429a      	cmp	r2, r3
 801c06c:	f040 80d5 	bne.w	801c21a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 801c070:	4b46      	ldr	r3, [pc, #280]	; (801c18c <tcp_process+0x2a0>)
 801c072:	681b      	ldr	r3, [r3, #0]
 801c074:	1c5a      	adds	r2, r3, #1
 801c076:	687b      	ldr	r3, [r7, #4]
 801c078:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801c07a:	687b      	ldr	r3, [r7, #4]
 801c07c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801c07e:	687b      	ldr	r3, [r7, #4]
 801c080:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 801c082:	4b41      	ldr	r3, [pc, #260]	; (801c188 <tcp_process+0x29c>)
 801c084:	681a      	ldr	r2, [r3, #0]
 801c086:	687b      	ldr	r3, [r7, #4]
 801c088:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801c08a:	4b44      	ldr	r3, [pc, #272]	; (801c19c <tcp_process+0x2b0>)
 801c08c:	681b      	ldr	r3, [r3, #0]
 801c08e:	89db      	ldrh	r3, [r3, #14]
 801c090:	b29a      	uxth	r2, r3
 801c092:	687b      	ldr	r3, [r7, #4]
 801c094:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 801c098:	687b      	ldr	r3, [r7, #4]
 801c09a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801c09e:	687b      	ldr	r3, [r7, #4]
 801c0a0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801c0a4:	4b39      	ldr	r3, [pc, #228]	; (801c18c <tcp_process+0x2a0>)
 801c0a6:	681b      	ldr	r3, [r3, #0]
 801c0a8:	1e5a      	subs	r2, r3, #1
 801c0aa:	687b      	ldr	r3, [r7, #4]
 801c0ac:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 801c0ae:	687b      	ldr	r3, [r7, #4]
 801c0b0:	2204      	movs	r2, #4
 801c0b2:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801c0b4:	687b      	ldr	r3, [r7, #4]
 801c0b6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 801c0b8:	687b      	ldr	r3, [r7, #4]
 801c0ba:	3304      	adds	r3, #4
 801c0bc:	4618      	mov	r0, r3
 801c0be:	f007 f94b 	bl	8023358 <ip4_route>
 801c0c2:	4601      	mov	r1, r0
 801c0c4:	687b      	ldr	r3, [r7, #4]
 801c0c6:	3304      	adds	r3, #4
 801c0c8:	461a      	mov	r2, r3
 801c0ca:	4620      	mov	r0, r4
 801c0cc:	f7ff f88c 	bl	801b1e8 <tcp_eff_send_mss_netif>
 801c0d0:	4603      	mov	r3, r0
 801c0d2:	461a      	mov	r2, r3
 801c0d4:	687b      	ldr	r3, [r7, #4]
 801c0d6:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801c0d8:	687b      	ldr	r3, [r7, #4]
 801c0da:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c0dc:	009a      	lsls	r2, r3, #2
 801c0de:	687b      	ldr	r3, [r7, #4]
 801c0e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c0e2:	005b      	lsls	r3, r3, #1
 801c0e4:	f241 111c 	movw	r1, #4380	; 0x111c
 801c0e8:	428b      	cmp	r3, r1
 801c0ea:	bf38      	it	cc
 801c0ec:	460b      	movcc	r3, r1
 801c0ee:	429a      	cmp	r2, r3
 801c0f0:	d204      	bcs.n	801c0fc <tcp_process+0x210>
 801c0f2:	687b      	ldr	r3, [r7, #4]
 801c0f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c0f6:	009b      	lsls	r3, r3, #2
 801c0f8:	b29b      	uxth	r3, r3
 801c0fa:	e00d      	b.n	801c118 <tcp_process+0x22c>
 801c0fc:	687b      	ldr	r3, [r7, #4]
 801c0fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c100:	005b      	lsls	r3, r3, #1
 801c102:	f241 121c 	movw	r2, #4380	; 0x111c
 801c106:	4293      	cmp	r3, r2
 801c108:	d904      	bls.n	801c114 <tcp_process+0x228>
 801c10a:	687b      	ldr	r3, [r7, #4]
 801c10c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c10e:	005b      	lsls	r3, r3, #1
 801c110:	b29b      	uxth	r3, r3
 801c112:	e001      	b.n	801c118 <tcp_process+0x22c>
 801c114:	f241 131c 	movw	r3, #4380	; 0x111c
 801c118:	687a      	ldr	r2, [r7, #4]
 801c11a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801c11e:	687b      	ldr	r3, [r7, #4]
 801c120:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801c124:	2b00      	cmp	r3, #0
 801c126:	d106      	bne.n	801c136 <tcp_process+0x24a>
 801c128:	4b13      	ldr	r3, [pc, #76]	; (801c178 <tcp_process+0x28c>)
 801c12a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 801c12e:	491c      	ldr	r1, [pc, #112]	; (801c1a0 <tcp_process+0x2b4>)
 801c130:	4813      	ldr	r0, [pc, #76]	; (801c180 <tcp_process+0x294>)
 801c132:	f009 fb3b 	bl	80257ac <iprintf>
        --pcb->snd_queuelen;
 801c136:	687b      	ldr	r3, [r7, #4]
 801c138:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801c13c:	3b01      	subs	r3, #1
 801c13e:	b29a      	uxth	r2, r3
 801c140:	687b      	ldr	r3, [r7, #4]
 801c142:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801c146:	687b      	ldr	r3, [r7, #4]
 801c148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c14a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 801c14c:	69fb      	ldr	r3, [r7, #28]
 801c14e:	2b00      	cmp	r3, #0
 801c150:	d12a      	bne.n	801c1a8 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801c152:	687b      	ldr	r3, [r7, #4]
 801c154:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c156:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801c158:	69fb      	ldr	r3, [r7, #28]
 801c15a:	2b00      	cmp	r3, #0
 801c15c:	d106      	bne.n	801c16c <tcp_process+0x280>
 801c15e:	4b06      	ldr	r3, [pc, #24]	; (801c178 <tcp_process+0x28c>)
 801c160:	f44f 725d 	mov.w	r2, #884	; 0x374
 801c164:	490f      	ldr	r1, [pc, #60]	; (801c1a4 <tcp_process+0x2b8>)
 801c166:	4806      	ldr	r0, [pc, #24]	; (801c180 <tcp_process+0x294>)
 801c168:	f009 fb20 	bl	80257ac <iprintf>
          pcb->unsent = rseg->next;
 801c16c:	69fb      	ldr	r3, [r7, #28]
 801c16e:	681a      	ldr	r2, [r3, #0]
 801c170:	687b      	ldr	r3, [r7, #4]
 801c172:	66da      	str	r2, [r3, #108]	; 0x6c
 801c174:	e01c      	b.n	801c1b0 <tcp_process+0x2c4>
 801c176:	bf00      	nop
 801c178:	0802c6a0 	.word	0x0802c6a0
 801c17c:	0802c8d8 	.word	0x0802c8d8
 801c180:	0802c6ec 	.word	0x0802c6ec
 801c184:	2001380c 	.word	0x2001380c
 801c188:	20013804 	.word	0x20013804
 801c18c:	20013800 	.word	0x20013800
 801c190:	0802c8f4 	.word	0x0802c8f4
 801c194:	2001380d 	.word	0x2001380d
 801c198:	2001bd10 	.word	0x2001bd10
 801c19c:	200137f0 	.word	0x200137f0
 801c1a0:	0802c914 	.word	0x0802c914
 801c1a4:	0802c92c 	.word	0x0802c92c
        } else {
          pcb->unacked = rseg->next;
 801c1a8:	69fb      	ldr	r3, [r7, #28]
 801c1aa:	681a      	ldr	r2, [r3, #0]
 801c1ac:	687b      	ldr	r3, [r7, #4]
 801c1ae:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 801c1b0:	69f8      	ldr	r0, [r7, #28]
 801c1b2:	f7fe fc6c 	bl	801aa8e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 801c1b6:	687b      	ldr	r3, [r7, #4]
 801c1b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c1ba:	2b00      	cmp	r3, #0
 801c1bc:	d104      	bne.n	801c1c8 <tcp_process+0x2dc>
          pcb->rtime = -1;
 801c1be:	687b      	ldr	r3, [r7, #4]
 801c1c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801c1c4:	861a      	strh	r2, [r3, #48]	; 0x30
 801c1c6:	e006      	b.n	801c1d6 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 801c1c8:	687b      	ldr	r3, [r7, #4]
 801c1ca:	2200      	movs	r2, #0
 801c1cc:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 801c1ce:	687b      	ldr	r3, [r7, #4]
 801c1d0:	2200      	movs	r2, #0
 801c1d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801c1d6:	687b      	ldr	r3, [r7, #4]
 801c1d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801c1dc:	2b00      	cmp	r3, #0
 801c1de:	d00a      	beq.n	801c1f6 <tcp_process+0x30a>
 801c1e0:	687b      	ldr	r3, [r7, #4]
 801c1e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801c1e6:	687a      	ldr	r2, [r7, #4]
 801c1e8:	6910      	ldr	r0, [r2, #16]
 801c1ea:	2200      	movs	r2, #0
 801c1ec:	6879      	ldr	r1, [r7, #4]
 801c1ee:	4798      	blx	r3
 801c1f0:	4603      	mov	r3, r0
 801c1f2:	76bb      	strb	r3, [r7, #26]
 801c1f4:	e001      	b.n	801c1fa <tcp_process+0x30e>
 801c1f6:	2300      	movs	r3, #0
 801c1f8:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801c1fa:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801c1fe:	f113 0f0d 	cmn.w	r3, #13
 801c202:	d102      	bne.n	801c20a <tcp_process+0x31e>
          return ERR_ABRT;
 801c204:	f06f 030c 	mvn.w	r3, #12
 801c208:	e250      	b.n	801c6ac <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801c20a:	687b      	ldr	r3, [r7, #4]
 801c20c:	8b5b      	ldrh	r3, [r3, #26]
 801c20e:	f043 0302 	orr.w	r3, r3, #2
 801c212:	b29a      	uxth	r2, r3
 801c214:	687b      	ldr	r3, [r7, #4]
 801c216:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 801c218:	e23a      	b.n	801c690 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801c21a:	4b98      	ldr	r3, [pc, #608]	; (801c47c <tcp_process+0x590>)
 801c21c:	781b      	ldrb	r3, [r3, #0]
 801c21e:	f003 0310 	and.w	r3, r3, #16
 801c222:	2b00      	cmp	r3, #0
 801c224:	f000 8234 	beq.w	801c690 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801c228:	4b95      	ldr	r3, [pc, #596]	; (801c480 <tcp_process+0x594>)
 801c22a:	6819      	ldr	r1, [r3, #0]
 801c22c:	4b95      	ldr	r3, [pc, #596]	; (801c484 <tcp_process+0x598>)
 801c22e:	881b      	ldrh	r3, [r3, #0]
 801c230:	461a      	mov	r2, r3
 801c232:	4b95      	ldr	r3, [pc, #596]	; (801c488 <tcp_process+0x59c>)
 801c234:	681b      	ldr	r3, [r3, #0]
 801c236:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801c238:	4b94      	ldr	r3, [pc, #592]	; (801c48c <tcp_process+0x5a0>)
 801c23a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801c23c:	885b      	ldrh	r3, [r3, #2]
 801c23e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801c240:	4a92      	ldr	r2, [pc, #584]	; (801c48c <tcp_process+0x5a0>)
 801c242:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801c244:	8812      	ldrh	r2, [r2, #0]
 801c246:	b292      	uxth	r2, r2
 801c248:	9202      	str	r2, [sp, #8]
 801c24a:	9301      	str	r3, [sp, #4]
 801c24c:	4b90      	ldr	r3, [pc, #576]	; (801c490 <tcp_process+0x5a4>)
 801c24e:	9300      	str	r3, [sp, #0]
 801c250:	4b90      	ldr	r3, [pc, #576]	; (801c494 <tcp_process+0x5a8>)
 801c252:	4602      	mov	r2, r0
 801c254:	6878      	ldr	r0, [r7, #4]
 801c256:	f003 f8dd 	bl	801f414 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801c25a:	687b      	ldr	r3, [r7, #4]
 801c25c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801c260:	2b05      	cmp	r3, #5
 801c262:	f200 8215 	bhi.w	801c690 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801c266:	687b      	ldr	r3, [r7, #4]
 801c268:	2200      	movs	r2, #0
 801c26a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 801c26c:	6878      	ldr	r0, [r7, #4]
 801c26e:	f002 fea7 	bl	801efc0 <tcp_rexmit_rto>
      break;
 801c272:	e20d      	b.n	801c690 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 801c274:	4b81      	ldr	r3, [pc, #516]	; (801c47c <tcp_process+0x590>)
 801c276:	781b      	ldrb	r3, [r3, #0]
 801c278:	f003 0310 	and.w	r3, r3, #16
 801c27c:	2b00      	cmp	r3, #0
 801c27e:	f000 80a1 	beq.w	801c3c4 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801c282:	4b7f      	ldr	r3, [pc, #508]	; (801c480 <tcp_process+0x594>)
 801c284:	681a      	ldr	r2, [r3, #0]
 801c286:	687b      	ldr	r3, [r7, #4]
 801c288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c28a:	1ad3      	subs	r3, r2, r3
 801c28c:	3b01      	subs	r3, #1
 801c28e:	2b00      	cmp	r3, #0
 801c290:	db7e      	blt.n	801c390 <tcp_process+0x4a4>
 801c292:	4b7b      	ldr	r3, [pc, #492]	; (801c480 <tcp_process+0x594>)
 801c294:	681a      	ldr	r2, [r3, #0]
 801c296:	687b      	ldr	r3, [r7, #4]
 801c298:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c29a:	1ad3      	subs	r3, r2, r3
 801c29c:	2b00      	cmp	r3, #0
 801c29e:	dc77      	bgt.n	801c390 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 801c2a0:	687b      	ldr	r3, [r7, #4]
 801c2a2:	2204      	movs	r2, #4
 801c2a4:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801c2a6:	687b      	ldr	r3, [r7, #4]
 801c2a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801c2aa:	2b00      	cmp	r3, #0
 801c2ac:	d102      	bne.n	801c2b4 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801c2ae:	23fa      	movs	r3, #250	; 0xfa
 801c2b0:	76bb      	strb	r3, [r7, #26]
 801c2b2:	e01d      	b.n	801c2f0 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801c2b4:	687b      	ldr	r3, [r7, #4]
 801c2b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801c2b8:	699b      	ldr	r3, [r3, #24]
 801c2ba:	2b00      	cmp	r3, #0
 801c2bc:	d106      	bne.n	801c2cc <tcp_process+0x3e0>
 801c2be:	4b76      	ldr	r3, [pc, #472]	; (801c498 <tcp_process+0x5ac>)
 801c2c0:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 801c2c4:	4975      	ldr	r1, [pc, #468]	; (801c49c <tcp_process+0x5b0>)
 801c2c6:	4876      	ldr	r0, [pc, #472]	; (801c4a0 <tcp_process+0x5b4>)
 801c2c8:	f009 fa70 	bl	80257ac <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801c2cc:	687b      	ldr	r3, [r7, #4]
 801c2ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801c2d0:	699b      	ldr	r3, [r3, #24]
 801c2d2:	2b00      	cmp	r3, #0
 801c2d4:	d00a      	beq.n	801c2ec <tcp_process+0x400>
 801c2d6:	687b      	ldr	r3, [r7, #4]
 801c2d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801c2da:	699b      	ldr	r3, [r3, #24]
 801c2dc:	687a      	ldr	r2, [r7, #4]
 801c2de:	6910      	ldr	r0, [r2, #16]
 801c2e0:	2200      	movs	r2, #0
 801c2e2:	6879      	ldr	r1, [r7, #4]
 801c2e4:	4798      	blx	r3
 801c2e6:	4603      	mov	r3, r0
 801c2e8:	76bb      	strb	r3, [r7, #26]
 801c2ea:	e001      	b.n	801c2f0 <tcp_process+0x404>
 801c2ec:	23f0      	movs	r3, #240	; 0xf0
 801c2ee:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 801c2f0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801c2f4:	2b00      	cmp	r3, #0
 801c2f6:	d00a      	beq.n	801c30e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 801c2f8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801c2fc:	f113 0f0d 	cmn.w	r3, #13
 801c300:	d002      	beq.n	801c308 <tcp_process+0x41c>
              tcp_abort(pcb);
 801c302:	6878      	ldr	r0, [r7, #4]
 801c304:	f7fd fce2 	bl	8019ccc <tcp_abort>
            }
            return ERR_ABRT;
 801c308:	f06f 030c 	mvn.w	r3, #12
 801c30c:	e1ce      	b.n	801c6ac <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801c30e:	6878      	ldr	r0, [r7, #4]
 801c310:	f000 fae0 	bl	801c8d4 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 801c314:	4b63      	ldr	r3, [pc, #396]	; (801c4a4 <tcp_process+0x5b8>)
 801c316:	881b      	ldrh	r3, [r3, #0]
 801c318:	2b00      	cmp	r3, #0
 801c31a:	d005      	beq.n	801c328 <tcp_process+0x43c>
            recv_acked--;
 801c31c:	4b61      	ldr	r3, [pc, #388]	; (801c4a4 <tcp_process+0x5b8>)
 801c31e:	881b      	ldrh	r3, [r3, #0]
 801c320:	3b01      	subs	r3, #1
 801c322:	b29a      	uxth	r2, r3
 801c324:	4b5f      	ldr	r3, [pc, #380]	; (801c4a4 <tcp_process+0x5b8>)
 801c326:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801c328:	687b      	ldr	r3, [r7, #4]
 801c32a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c32c:	009a      	lsls	r2, r3, #2
 801c32e:	687b      	ldr	r3, [r7, #4]
 801c330:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c332:	005b      	lsls	r3, r3, #1
 801c334:	f241 111c 	movw	r1, #4380	; 0x111c
 801c338:	428b      	cmp	r3, r1
 801c33a:	bf38      	it	cc
 801c33c:	460b      	movcc	r3, r1
 801c33e:	429a      	cmp	r2, r3
 801c340:	d204      	bcs.n	801c34c <tcp_process+0x460>
 801c342:	687b      	ldr	r3, [r7, #4]
 801c344:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c346:	009b      	lsls	r3, r3, #2
 801c348:	b29b      	uxth	r3, r3
 801c34a:	e00d      	b.n	801c368 <tcp_process+0x47c>
 801c34c:	687b      	ldr	r3, [r7, #4]
 801c34e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c350:	005b      	lsls	r3, r3, #1
 801c352:	f241 121c 	movw	r2, #4380	; 0x111c
 801c356:	4293      	cmp	r3, r2
 801c358:	d904      	bls.n	801c364 <tcp_process+0x478>
 801c35a:	687b      	ldr	r3, [r7, #4]
 801c35c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c35e:	005b      	lsls	r3, r3, #1
 801c360:	b29b      	uxth	r3, r3
 801c362:	e001      	b.n	801c368 <tcp_process+0x47c>
 801c364:	f241 131c 	movw	r3, #4380	; 0x111c
 801c368:	687a      	ldr	r2, [r7, #4]
 801c36a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801c36e:	4b4e      	ldr	r3, [pc, #312]	; (801c4a8 <tcp_process+0x5bc>)
 801c370:	781b      	ldrb	r3, [r3, #0]
 801c372:	f003 0320 	and.w	r3, r3, #32
 801c376:	2b00      	cmp	r3, #0
 801c378:	d037      	beq.n	801c3ea <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801c37a:	687b      	ldr	r3, [r7, #4]
 801c37c:	8b5b      	ldrh	r3, [r3, #26]
 801c37e:	f043 0302 	orr.w	r3, r3, #2
 801c382:	b29a      	uxth	r2, r3
 801c384:	687b      	ldr	r3, [r7, #4]
 801c386:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 801c388:	687b      	ldr	r3, [r7, #4]
 801c38a:	2207      	movs	r2, #7
 801c38c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801c38e:	e02c      	b.n	801c3ea <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801c390:	4b3b      	ldr	r3, [pc, #236]	; (801c480 <tcp_process+0x594>)
 801c392:	6819      	ldr	r1, [r3, #0]
 801c394:	4b3b      	ldr	r3, [pc, #236]	; (801c484 <tcp_process+0x598>)
 801c396:	881b      	ldrh	r3, [r3, #0]
 801c398:	461a      	mov	r2, r3
 801c39a:	4b3b      	ldr	r3, [pc, #236]	; (801c488 <tcp_process+0x59c>)
 801c39c:	681b      	ldr	r3, [r3, #0]
 801c39e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801c3a0:	4b3a      	ldr	r3, [pc, #232]	; (801c48c <tcp_process+0x5a0>)
 801c3a2:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801c3a4:	885b      	ldrh	r3, [r3, #2]
 801c3a6:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801c3a8:	4a38      	ldr	r2, [pc, #224]	; (801c48c <tcp_process+0x5a0>)
 801c3aa:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801c3ac:	8812      	ldrh	r2, [r2, #0]
 801c3ae:	b292      	uxth	r2, r2
 801c3b0:	9202      	str	r2, [sp, #8]
 801c3b2:	9301      	str	r3, [sp, #4]
 801c3b4:	4b36      	ldr	r3, [pc, #216]	; (801c490 <tcp_process+0x5a4>)
 801c3b6:	9300      	str	r3, [sp, #0]
 801c3b8:	4b36      	ldr	r3, [pc, #216]	; (801c494 <tcp_process+0x5a8>)
 801c3ba:	4602      	mov	r2, r0
 801c3bc:	6878      	ldr	r0, [r7, #4]
 801c3be:	f003 f829 	bl	801f414 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801c3c2:	e167      	b.n	801c694 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801c3c4:	4b2d      	ldr	r3, [pc, #180]	; (801c47c <tcp_process+0x590>)
 801c3c6:	781b      	ldrb	r3, [r3, #0]
 801c3c8:	f003 0302 	and.w	r3, r3, #2
 801c3cc:	2b00      	cmp	r3, #0
 801c3ce:	f000 8161 	beq.w	801c694 <tcp_process+0x7a8>
 801c3d2:	687b      	ldr	r3, [r7, #4]
 801c3d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c3d6:	1e5a      	subs	r2, r3, #1
 801c3d8:	4b2b      	ldr	r3, [pc, #172]	; (801c488 <tcp_process+0x59c>)
 801c3da:	681b      	ldr	r3, [r3, #0]
 801c3dc:	429a      	cmp	r2, r3
 801c3de:	f040 8159 	bne.w	801c694 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801c3e2:	6878      	ldr	r0, [r7, #4]
 801c3e4:	f002 fe0e 	bl	801f004 <tcp_rexmit>
      break;
 801c3e8:	e154      	b.n	801c694 <tcp_process+0x7a8>
 801c3ea:	e153      	b.n	801c694 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 801c3ec:	6878      	ldr	r0, [r7, #4]
 801c3ee:	f000 fa71 	bl	801c8d4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801c3f2:	4b2d      	ldr	r3, [pc, #180]	; (801c4a8 <tcp_process+0x5bc>)
 801c3f4:	781b      	ldrb	r3, [r3, #0]
 801c3f6:	f003 0320 	and.w	r3, r3, #32
 801c3fa:	2b00      	cmp	r3, #0
 801c3fc:	f000 814c 	beq.w	801c698 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 801c400:	687b      	ldr	r3, [r7, #4]
 801c402:	8b5b      	ldrh	r3, [r3, #26]
 801c404:	f043 0302 	orr.w	r3, r3, #2
 801c408:	b29a      	uxth	r2, r3
 801c40a:	687b      	ldr	r3, [r7, #4]
 801c40c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801c40e:	687b      	ldr	r3, [r7, #4]
 801c410:	2207      	movs	r2, #7
 801c412:	751a      	strb	r2, [r3, #20]
      }
      break;
 801c414:	e140      	b.n	801c698 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801c416:	6878      	ldr	r0, [r7, #4]
 801c418:	f000 fa5c 	bl	801c8d4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801c41c:	4b22      	ldr	r3, [pc, #136]	; (801c4a8 <tcp_process+0x5bc>)
 801c41e:	781b      	ldrb	r3, [r3, #0]
 801c420:	f003 0320 	and.w	r3, r3, #32
 801c424:	2b00      	cmp	r3, #0
 801c426:	d071      	beq.n	801c50c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801c428:	4b14      	ldr	r3, [pc, #80]	; (801c47c <tcp_process+0x590>)
 801c42a:	781b      	ldrb	r3, [r3, #0]
 801c42c:	f003 0310 	and.w	r3, r3, #16
 801c430:	2b00      	cmp	r3, #0
 801c432:	d060      	beq.n	801c4f6 <tcp_process+0x60a>
 801c434:	687b      	ldr	r3, [r7, #4]
 801c436:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801c438:	4b11      	ldr	r3, [pc, #68]	; (801c480 <tcp_process+0x594>)
 801c43a:	681b      	ldr	r3, [r3, #0]
 801c43c:	429a      	cmp	r2, r3
 801c43e:	d15a      	bne.n	801c4f6 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 801c440:	687b      	ldr	r3, [r7, #4]
 801c442:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801c444:	2b00      	cmp	r3, #0
 801c446:	d156      	bne.n	801c4f6 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 801c448:	687b      	ldr	r3, [r7, #4]
 801c44a:	8b5b      	ldrh	r3, [r3, #26]
 801c44c:	f043 0302 	orr.w	r3, r3, #2
 801c450:	b29a      	uxth	r2, r3
 801c452:	687b      	ldr	r3, [r7, #4]
 801c454:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801c456:	6878      	ldr	r0, [r7, #4]
 801c458:	f7fe fdbc 	bl	801afd4 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 801c45c:	4b13      	ldr	r3, [pc, #76]	; (801c4ac <tcp_process+0x5c0>)
 801c45e:	681b      	ldr	r3, [r3, #0]
 801c460:	687a      	ldr	r2, [r7, #4]
 801c462:	429a      	cmp	r2, r3
 801c464:	d105      	bne.n	801c472 <tcp_process+0x586>
 801c466:	4b11      	ldr	r3, [pc, #68]	; (801c4ac <tcp_process+0x5c0>)
 801c468:	681b      	ldr	r3, [r3, #0]
 801c46a:	68db      	ldr	r3, [r3, #12]
 801c46c:	4a0f      	ldr	r2, [pc, #60]	; (801c4ac <tcp_process+0x5c0>)
 801c46e:	6013      	str	r3, [r2, #0]
 801c470:	e02e      	b.n	801c4d0 <tcp_process+0x5e4>
 801c472:	4b0e      	ldr	r3, [pc, #56]	; (801c4ac <tcp_process+0x5c0>)
 801c474:	681b      	ldr	r3, [r3, #0]
 801c476:	617b      	str	r3, [r7, #20]
 801c478:	e027      	b.n	801c4ca <tcp_process+0x5de>
 801c47a:	bf00      	nop
 801c47c:	2001380c 	.word	0x2001380c
 801c480:	20013804 	.word	0x20013804
 801c484:	2001380a 	.word	0x2001380a
 801c488:	20013800 	.word	0x20013800
 801c48c:	200137f0 	.word	0x200137f0
 801c490:	20017788 	.word	0x20017788
 801c494:	2001778c 	.word	0x2001778c
 801c498:	0802c6a0 	.word	0x0802c6a0
 801c49c:	0802c940 	.word	0x0802c940
 801c4a0:	0802c6ec 	.word	0x0802c6ec
 801c4a4:	20013808 	.word	0x20013808
 801c4a8:	2001380d 	.word	0x2001380d
 801c4ac:	2001bd0c 	.word	0x2001bd0c
 801c4b0:	697b      	ldr	r3, [r7, #20]
 801c4b2:	68db      	ldr	r3, [r3, #12]
 801c4b4:	687a      	ldr	r2, [r7, #4]
 801c4b6:	429a      	cmp	r2, r3
 801c4b8:	d104      	bne.n	801c4c4 <tcp_process+0x5d8>
 801c4ba:	687b      	ldr	r3, [r7, #4]
 801c4bc:	68da      	ldr	r2, [r3, #12]
 801c4be:	697b      	ldr	r3, [r7, #20]
 801c4c0:	60da      	str	r2, [r3, #12]
 801c4c2:	e005      	b.n	801c4d0 <tcp_process+0x5e4>
 801c4c4:	697b      	ldr	r3, [r7, #20]
 801c4c6:	68db      	ldr	r3, [r3, #12]
 801c4c8:	617b      	str	r3, [r7, #20]
 801c4ca:	697b      	ldr	r3, [r7, #20]
 801c4cc:	2b00      	cmp	r3, #0
 801c4ce:	d1ef      	bne.n	801c4b0 <tcp_process+0x5c4>
 801c4d0:	687b      	ldr	r3, [r7, #4]
 801c4d2:	2200      	movs	r2, #0
 801c4d4:	60da      	str	r2, [r3, #12]
 801c4d6:	4b77      	ldr	r3, [pc, #476]	; (801c6b4 <tcp_process+0x7c8>)
 801c4d8:	2201      	movs	r2, #1
 801c4da:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 801c4dc:	687b      	ldr	r3, [r7, #4]
 801c4de:	220a      	movs	r2, #10
 801c4e0:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801c4e2:	4b75      	ldr	r3, [pc, #468]	; (801c6b8 <tcp_process+0x7cc>)
 801c4e4:	681a      	ldr	r2, [r3, #0]
 801c4e6:	687b      	ldr	r3, [r7, #4]
 801c4e8:	60da      	str	r2, [r3, #12]
 801c4ea:	4a73      	ldr	r2, [pc, #460]	; (801c6b8 <tcp_process+0x7cc>)
 801c4ec:	687b      	ldr	r3, [r7, #4]
 801c4ee:	6013      	str	r3, [r2, #0]
 801c4f0:	f003 f952 	bl	801f798 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 801c4f4:	e0d2      	b.n	801c69c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801c4f6:	687b      	ldr	r3, [r7, #4]
 801c4f8:	8b5b      	ldrh	r3, [r3, #26]
 801c4fa:	f043 0302 	orr.w	r3, r3, #2
 801c4fe:	b29a      	uxth	r2, r3
 801c500:	687b      	ldr	r3, [r7, #4]
 801c502:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 801c504:	687b      	ldr	r3, [r7, #4]
 801c506:	2208      	movs	r2, #8
 801c508:	751a      	strb	r2, [r3, #20]
      break;
 801c50a:	e0c7      	b.n	801c69c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801c50c:	4b6b      	ldr	r3, [pc, #428]	; (801c6bc <tcp_process+0x7d0>)
 801c50e:	781b      	ldrb	r3, [r3, #0]
 801c510:	f003 0310 	and.w	r3, r3, #16
 801c514:	2b00      	cmp	r3, #0
 801c516:	f000 80c1 	beq.w	801c69c <tcp_process+0x7b0>
 801c51a:	687b      	ldr	r3, [r7, #4]
 801c51c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801c51e:	4b68      	ldr	r3, [pc, #416]	; (801c6c0 <tcp_process+0x7d4>)
 801c520:	681b      	ldr	r3, [r3, #0]
 801c522:	429a      	cmp	r2, r3
 801c524:	f040 80ba 	bne.w	801c69c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 801c528:	687b      	ldr	r3, [r7, #4]
 801c52a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801c52c:	2b00      	cmp	r3, #0
 801c52e:	f040 80b5 	bne.w	801c69c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801c532:	687b      	ldr	r3, [r7, #4]
 801c534:	2206      	movs	r2, #6
 801c536:	751a      	strb	r2, [r3, #20]
      break;
 801c538:	e0b0      	b.n	801c69c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801c53a:	6878      	ldr	r0, [r7, #4]
 801c53c:	f000 f9ca 	bl	801c8d4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801c540:	4b60      	ldr	r3, [pc, #384]	; (801c6c4 <tcp_process+0x7d8>)
 801c542:	781b      	ldrb	r3, [r3, #0]
 801c544:	f003 0320 	and.w	r3, r3, #32
 801c548:	2b00      	cmp	r3, #0
 801c54a:	f000 80a9 	beq.w	801c6a0 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801c54e:	687b      	ldr	r3, [r7, #4]
 801c550:	8b5b      	ldrh	r3, [r3, #26]
 801c552:	f043 0302 	orr.w	r3, r3, #2
 801c556:	b29a      	uxth	r2, r3
 801c558:	687b      	ldr	r3, [r7, #4]
 801c55a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 801c55c:	6878      	ldr	r0, [r7, #4]
 801c55e:	f7fe fd39 	bl	801afd4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801c562:	4b59      	ldr	r3, [pc, #356]	; (801c6c8 <tcp_process+0x7dc>)
 801c564:	681b      	ldr	r3, [r3, #0]
 801c566:	687a      	ldr	r2, [r7, #4]
 801c568:	429a      	cmp	r2, r3
 801c56a:	d105      	bne.n	801c578 <tcp_process+0x68c>
 801c56c:	4b56      	ldr	r3, [pc, #344]	; (801c6c8 <tcp_process+0x7dc>)
 801c56e:	681b      	ldr	r3, [r3, #0]
 801c570:	68db      	ldr	r3, [r3, #12]
 801c572:	4a55      	ldr	r2, [pc, #340]	; (801c6c8 <tcp_process+0x7dc>)
 801c574:	6013      	str	r3, [r2, #0]
 801c576:	e013      	b.n	801c5a0 <tcp_process+0x6b4>
 801c578:	4b53      	ldr	r3, [pc, #332]	; (801c6c8 <tcp_process+0x7dc>)
 801c57a:	681b      	ldr	r3, [r3, #0]
 801c57c:	613b      	str	r3, [r7, #16]
 801c57e:	e00c      	b.n	801c59a <tcp_process+0x6ae>
 801c580:	693b      	ldr	r3, [r7, #16]
 801c582:	68db      	ldr	r3, [r3, #12]
 801c584:	687a      	ldr	r2, [r7, #4]
 801c586:	429a      	cmp	r2, r3
 801c588:	d104      	bne.n	801c594 <tcp_process+0x6a8>
 801c58a:	687b      	ldr	r3, [r7, #4]
 801c58c:	68da      	ldr	r2, [r3, #12]
 801c58e:	693b      	ldr	r3, [r7, #16]
 801c590:	60da      	str	r2, [r3, #12]
 801c592:	e005      	b.n	801c5a0 <tcp_process+0x6b4>
 801c594:	693b      	ldr	r3, [r7, #16]
 801c596:	68db      	ldr	r3, [r3, #12]
 801c598:	613b      	str	r3, [r7, #16]
 801c59a:	693b      	ldr	r3, [r7, #16]
 801c59c:	2b00      	cmp	r3, #0
 801c59e:	d1ef      	bne.n	801c580 <tcp_process+0x694>
 801c5a0:	687b      	ldr	r3, [r7, #4]
 801c5a2:	2200      	movs	r2, #0
 801c5a4:	60da      	str	r2, [r3, #12]
 801c5a6:	4b43      	ldr	r3, [pc, #268]	; (801c6b4 <tcp_process+0x7c8>)
 801c5a8:	2201      	movs	r2, #1
 801c5aa:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801c5ac:	687b      	ldr	r3, [r7, #4]
 801c5ae:	220a      	movs	r2, #10
 801c5b0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801c5b2:	4b41      	ldr	r3, [pc, #260]	; (801c6b8 <tcp_process+0x7cc>)
 801c5b4:	681a      	ldr	r2, [r3, #0]
 801c5b6:	687b      	ldr	r3, [r7, #4]
 801c5b8:	60da      	str	r2, [r3, #12]
 801c5ba:	4a3f      	ldr	r2, [pc, #252]	; (801c6b8 <tcp_process+0x7cc>)
 801c5bc:	687b      	ldr	r3, [r7, #4]
 801c5be:	6013      	str	r3, [r2, #0]
 801c5c0:	f003 f8ea 	bl	801f798 <tcp_timer_needed>
      }
      break;
 801c5c4:	e06c      	b.n	801c6a0 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801c5c6:	6878      	ldr	r0, [r7, #4]
 801c5c8:	f000 f984 	bl	801c8d4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801c5cc:	4b3b      	ldr	r3, [pc, #236]	; (801c6bc <tcp_process+0x7d0>)
 801c5ce:	781b      	ldrb	r3, [r3, #0]
 801c5d0:	f003 0310 	and.w	r3, r3, #16
 801c5d4:	2b00      	cmp	r3, #0
 801c5d6:	d065      	beq.n	801c6a4 <tcp_process+0x7b8>
 801c5d8:	687b      	ldr	r3, [r7, #4]
 801c5da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801c5dc:	4b38      	ldr	r3, [pc, #224]	; (801c6c0 <tcp_process+0x7d4>)
 801c5de:	681b      	ldr	r3, [r3, #0]
 801c5e0:	429a      	cmp	r2, r3
 801c5e2:	d15f      	bne.n	801c6a4 <tcp_process+0x7b8>
 801c5e4:	687b      	ldr	r3, [r7, #4]
 801c5e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c5e8:	2b00      	cmp	r3, #0
 801c5ea:	d15b      	bne.n	801c6a4 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 801c5ec:	6878      	ldr	r0, [r7, #4]
 801c5ee:	f7fe fcf1 	bl	801afd4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801c5f2:	4b35      	ldr	r3, [pc, #212]	; (801c6c8 <tcp_process+0x7dc>)
 801c5f4:	681b      	ldr	r3, [r3, #0]
 801c5f6:	687a      	ldr	r2, [r7, #4]
 801c5f8:	429a      	cmp	r2, r3
 801c5fa:	d105      	bne.n	801c608 <tcp_process+0x71c>
 801c5fc:	4b32      	ldr	r3, [pc, #200]	; (801c6c8 <tcp_process+0x7dc>)
 801c5fe:	681b      	ldr	r3, [r3, #0]
 801c600:	68db      	ldr	r3, [r3, #12]
 801c602:	4a31      	ldr	r2, [pc, #196]	; (801c6c8 <tcp_process+0x7dc>)
 801c604:	6013      	str	r3, [r2, #0]
 801c606:	e013      	b.n	801c630 <tcp_process+0x744>
 801c608:	4b2f      	ldr	r3, [pc, #188]	; (801c6c8 <tcp_process+0x7dc>)
 801c60a:	681b      	ldr	r3, [r3, #0]
 801c60c:	60fb      	str	r3, [r7, #12]
 801c60e:	e00c      	b.n	801c62a <tcp_process+0x73e>
 801c610:	68fb      	ldr	r3, [r7, #12]
 801c612:	68db      	ldr	r3, [r3, #12]
 801c614:	687a      	ldr	r2, [r7, #4]
 801c616:	429a      	cmp	r2, r3
 801c618:	d104      	bne.n	801c624 <tcp_process+0x738>
 801c61a:	687b      	ldr	r3, [r7, #4]
 801c61c:	68da      	ldr	r2, [r3, #12]
 801c61e:	68fb      	ldr	r3, [r7, #12]
 801c620:	60da      	str	r2, [r3, #12]
 801c622:	e005      	b.n	801c630 <tcp_process+0x744>
 801c624:	68fb      	ldr	r3, [r7, #12]
 801c626:	68db      	ldr	r3, [r3, #12]
 801c628:	60fb      	str	r3, [r7, #12]
 801c62a:	68fb      	ldr	r3, [r7, #12]
 801c62c:	2b00      	cmp	r3, #0
 801c62e:	d1ef      	bne.n	801c610 <tcp_process+0x724>
 801c630:	687b      	ldr	r3, [r7, #4]
 801c632:	2200      	movs	r2, #0
 801c634:	60da      	str	r2, [r3, #12]
 801c636:	4b1f      	ldr	r3, [pc, #124]	; (801c6b4 <tcp_process+0x7c8>)
 801c638:	2201      	movs	r2, #1
 801c63a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801c63c:	687b      	ldr	r3, [r7, #4]
 801c63e:	220a      	movs	r2, #10
 801c640:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801c642:	4b1d      	ldr	r3, [pc, #116]	; (801c6b8 <tcp_process+0x7cc>)
 801c644:	681a      	ldr	r2, [r3, #0]
 801c646:	687b      	ldr	r3, [r7, #4]
 801c648:	60da      	str	r2, [r3, #12]
 801c64a:	4a1b      	ldr	r2, [pc, #108]	; (801c6b8 <tcp_process+0x7cc>)
 801c64c:	687b      	ldr	r3, [r7, #4]
 801c64e:	6013      	str	r3, [r2, #0]
 801c650:	f003 f8a2 	bl	801f798 <tcp_timer_needed>
      }
      break;
 801c654:	e026      	b.n	801c6a4 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801c656:	6878      	ldr	r0, [r7, #4]
 801c658:	f000 f93c 	bl	801c8d4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801c65c:	4b17      	ldr	r3, [pc, #92]	; (801c6bc <tcp_process+0x7d0>)
 801c65e:	781b      	ldrb	r3, [r3, #0]
 801c660:	f003 0310 	and.w	r3, r3, #16
 801c664:	2b00      	cmp	r3, #0
 801c666:	d01f      	beq.n	801c6a8 <tcp_process+0x7bc>
 801c668:	687b      	ldr	r3, [r7, #4]
 801c66a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801c66c:	4b14      	ldr	r3, [pc, #80]	; (801c6c0 <tcp_process+0x7d4>)
 801c66e:	681b      	ldr	r3, [r3, #0]
 801c670:	429a      	cmp	r2, r3
 801c672:	d119      	bne.n	801c6a8 <tcp_process+0x7bc>
 801c674:	687b      	ldr	r3, [r7, #4]
 801c676:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c678:	2b00      	cmp	r3, #0
 801c67a:	d115      	bne.n	801c6a8 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 801c67c:	4b11      	ldr	r3, [pc, #68]	; (801c6c4 <tcp_process+0x7d8>)
 801c67e:	781b      	ldrb	r3, [r3, #0]
 801c680:	f043 0310 	orr.w	r3, r3, #16
 801c684:	b2da      	uxtb	r2, r3
 801c686:	4b0f      	ldr	r3, [pc, #60]	; (801c6c4 <tcp_process+0x7d8>)
 801c688:	701a      	strb	r2, [r3, #0]
      }
      break;
 801c68a:	e00d      	b.n	801c6a8 <tcp_process+0x7bc>
    default:
      break;
 801c68c:	bf00      	nop
 801c68e:	e00c      	b.n	801c6aa <tcp_process+0x7be>
      break;
 801c690:	bf00      	nop
 801c692:	e00a      	b.n	801c6aa <tcp_process+0x7be>
      break;
 801c694:	bf00      	nop
 801c696:	e008      	b.n	801c6aa <tcp_process+0x7be>
      break;
 801c698:	bf00      	nop
 801c69a:	e006      	b.n	801c6aa <tcp_process+0x7be>
      break;
 801c69c:	bf00      	nop
 801c69e:	e004      	b.n	801c6aa <tcp_process+0x7be>
      break;
 801c6a0:	bf00      	nop
 801c6a2:	e002      	b.n	801c6aa <tcp_process+0x7be>
      break;
 801c6a4:	bf00      	nop
 801c6a6:	e000      	b.n	801c6aa <tcp_process+0x7be>
      break;
 801c6a8:	bf00      	nop
  }
  return ERR_OK;
 801c6aa:	2300      	movs	r3, #0
}
 801c6ac:	4618      	mov	r0, r3
 801c6ae:	3724      	adds	r7, #36	; 0x24
 801c6b0:	46bd      	mov	sp, r7
 801c6b2:	bd90      	pop	{r4, r7, pc}
 801c6b4:	2001bd08 	.word	0x2001bd08
 801c6b8:	2001bd1c 	.word	0x2001bd1c
 801c6bc:	2001380c 	.word	0x2001380c
 801c6c0:	20013804 	.word	0x20013804
 801c6c4:	2001380d 	.word	0x2001380d
 801c6c8:	2001bd0c 	.word	0x2001bd0c

0801c6cc <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 801c6cc:	b590      	push	{r4, r7, lr}
 801c6ce:	b085      	sub	sp, #20
 801c6d0:	af00      	add	r7, sp, #0
 801c6d2:	6078      	str	r0, [r7, #4]
 801c6d4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801c6d6:	687b      	ldr	r3, [r7, #4]
 801c6d8:	2b00      	cmp	r3, #0
 801c6da:	d106      	bne.n	801c6ea <tcp_oos_insert_segment+0x1e>
 801c6dc:	4b3b      	ldr	r3, [pc, #236]	; (801c7cc <tcp_oos_insert_segment+0x100>)
 801c6de:	f240 421f 	movw	r2, #1055	; 0x41f
 801c6e2:	493b      	ldr	r1, [pc, #236]	; (801c7d0 <tcp_oos_insert_segment+0x104>)
 801c6e4:	483b      	ldr	r0, [pc, #236]	; (801c7d4 <tcp_oos_insert_segment+0x108>)
 801c6e6:	f009 f861 	bl	80257ac <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801c6ea:	687b      	ldr	r3, [r7, #4]
 801c6ec:	68db      	ldr	r3, [r3, #12]
 801c6ee:	899b      	ldrh	r3, [r3, #12]
 801c6f0:	b29b      	uxth	r3, r3
 801c6f2:	4618      	mov	r0, r3
 801c6f4:	f7fb f902 	bl	80178fc <lwip_htons>
 801c6f8:	4603      	mov	r3, r0
 801c6fa:	b2db      	uxtb	r3, r3
 801c6fc:	f003 0301 	and.w	r3, r3, #1
 801c700:	2b00      	cmp	r3, #0
 801c702:	d028      	beq.n	801c756 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 801c704:	6838      	ldr	r0, [r7, #0]
 801c706:	f7fe f9ad 	bl	801aa64 <tcp_segs_free>
    next = NULL;
 801c70a:	2300      	movs	r3, #0
 801c70c:	603b      	str	r3, [r7, #0]
 801c70e:	e056      	b.n	801c7be <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801c710:	683b      	ldr	r3, [r7, #0]
 801c712:	68db      	ldr	r3, [r3, #12]
 801c714:	899b      	ldrh	r3, [r3, #12]
 801c716:	b29b      	uxth	r3, r3
 801c718:	4618      	mov	r0, r3
 801c71a:	f7fb f8ef 	bl	80178fc <lwip_htons>
 801c71e:	4603      	mov	r3, r0
 801c720:	b2db      	uxtb	r3, r3
 801c722:	f003 0301 	and.w	r3, r3, #1
 801c726:	2b00      	cmp	r3, #0
 801c728:	d00d      	beq.n	801c746 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801c72a:	687b      	ldr	r3, [r7, #4]
 801c72c:	68db      	ldr	r3, [r3, #12]
 801c72e:	899b      	ldrh	r3, [r3, #12]
 801c730:	b29c      	uxth	r4, r3
 801c732:	2001      	movs	r0, #1
 801c734:	f7fb f8e2 	bl	80178fc <lwip_htons>
 801c738:	4603      	mov	r3, r0
 801c73a:	461a      	mov	r2, r3
 801c73c:	687b      	ldr	r3, [r7, #4]
 801c73e:	68db      	ldr	r3, [r3, #12]
 801c740:	4322      	orrs	r2, r4
 801c742:	b292      	uxth	r2, r2
 801c744:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801c746:	683b      	ldr	r3, [r7, #0]
 801c748:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801c74a:	683b      	ldr	r3, [r7, #0]
 801c74c:	681b      	ldr	r3, [r3, #0]
 801c74e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 801c750:	68f8      	ldr	r0, [r7, #12]
 801c752:	f7fe f99c 	bl	801aa8e <tcp_seg_free>
    while (next &&
 801c756:	683b      	ldr	r3, [r7, #0]
 801c758:	2b00      	cmp	r3, #0
 801c75a:	d00e      	beq.n	801c77a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801c75c:	687b      	ldr	r3, [r7, #4]
 801c75e:	891b      	ldrh	r3, [r3, #8]
 801c760:	461a      	mov	r2, r3
 801c762:	4b1d      	ldr	r3, [pc, #116]	; (801c7d8 <tcp_oos_insert_segment+0x10c>)
 801c764:	681b      	ldr	r3, [r3, #0]
 801c766:	441a      	add	r2, r3
 801c768:	683b      	ldr	r3, [r7, #0]
 801c76a:	68db      	ldr	r3, [r3, #12]
 801c76c:	685b      	ldr	r3, [r3, #4]
 801c76e:	6839      	ldr	r1, [r7, #0]
 801c770:	8909      	ldrh	r1, [r1, #8]
 801c772:	440b      	add	r3, r1
 801c774:	1ad3      	subs	r3, r2, r3
    while (next &&
 801c776:	2b00      	cmp	r3, #0
 801c778:	daca      	bge.n	801c710 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801c77a:	683b      	ldr	r3, [r7, #0]
 801c77c:	2b00      	cmp	r3, #0
 801c77e:	d01e      	beq.n	801c7be <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 801c780:	687b      	ldr	r3, [r7, #4]
 801c782:	891b      	ldrh	r3, [r3, #8]
 801c784:	461a      	mov	r2, r3
 801c786:	4b14      	ldr	r3, [pc, #80]	; (801c7d8 <tcp_oos_insert_segment+0x10c>)
 801c788:	681b      	ldr	r3, [r3, #0]
 801c78a:	441a      	add	r2, r3
 801c78c:	683b      	ldr	r3, [r7, #0]
 801c78e:	68db      	ldr	r3, [r3, #12]
 801c790:	685b      	ldr	r3, [r3, #4]
 801c792:	1ad3      	subs	r3, r2, r3
    if (next &&
 801c794:	2b00      	cmp	r3, #0
 801c796:	dd12      	ble.n	801c7be <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801c798:	683b      	ldr	r3, [r7, #0]
 801c79a:	68db      	ldr	r3, [r3, #12]
 801c79c:	685b      	ldr	r3, [r3, #4]
 801c79e:	b29a      	uxth	r2, r3
 801c7a0:	4b0d      	ldr	r3, [pc, #52]	; (801c7d8 <tcp_oos_insert_segment+0x10c>)
 801c7a2:	681b      	ldr	r3, [r3, #0]
 801c7a4:	b29b      	uxth	r3, r3
 801c7a6:	1ad3      	subs	r3, r2, r3
 801c7a8:	b29a      	uxth	r2, r3
 801c7aa:	687b      	ldr	r3, [r7, #4]
 801c7ac:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801c7ae:	687b      	ldr	r3, [r7, #4]
 801c7b0:	685a      	ldr	r2, [r3, #4]
 801c7b2:	687b      	ldr	r3, [r7, #4]
 801c7b4:	891b      	ldrh	r3, [r3, #8]
 801c7b6:	4619      	mov	r1, r3
 801c7b8:	4610      	mov	r0, r2
 801c7ba:	f7fc faf9 	bl	8018db0 <pbuf_realloc>
    }
  }
  cseg->next = next;
 801c7be:	687b      	ldr	r3, [r7, #4]
 801c7c0:	683a      	ldr	r2, [r7, #0]
 801c7c2:	601a      	str	r2, [r3, #0]
}
 801c7c4:	bf00      	nop
 801c7c6:	3714      	adds	r7, #20
 801c7c8:	46bd      	mov	sp, r7
 801c7ca:	bd90      	pop	{r4, r7, pc}
 801c7cc:	0802c6a0 	.word	0x0802c6a0
 801c7d0:	0802c960 	.word	0x0802c960
 801c7d4:	0802c6ec 	.word	0x0802c6ec
 801c7d8:	20013800 	.word	0x20013800

0801c7dc <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 801c7dc:	b5b0      	push	{r4, r5, r7, lr}
 801c7de:	b086      	sub	sp, #24
 801c7e0:	af00      	add	r7, sp, #0
 801c7e2:	60f8      	str	r0, [r7, #12]
 801c7e4:	60b9      	str	r1, [r7, #8]
 801c7e6:	607a      	str	r2, [r7, #4]
 801c7e8:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801c7ea:	e03e      	b.n	801c86a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 801c7ec:	68bb      	ldr	r3, [r7, #8]
 801c7ee:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 801c7f0:	68bb      	ldr	r3, [r7, #8]
 801c7f2:	681b      	ldr	r3, [r3, #0]
 801c7f4:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801c7f6:	697b      	ldr	r3, [r7, #20]
 801c7f8:	685b      	ldr	r3, [r3, #4]
 801c7fa:	4618      	mov	r0, r3
 801c7fc:	f7fc fcec 	bl	80191d8 <pbuf_clen>
 801c800:	4603      	mov	r3, r0
 801c802:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801c804:	68fb      	ldr	r3, [r7, #12]
 801c806:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801c80a:	8a7a      	ldrh	r2, [r7, #18]
 801c80c:	429a      	cmp	r2, r3
 801c80e:	d906      	bls.n	801c81e <tcp_free_acked_segments+0x42>
 801c810:	4b2a      	ldr	r3, [pc, #168]	; (801c8bc <tcp_free_acked_segments+0xe0>)
 801c812:	f240 4257 	movw	r2, #1111	; 0x457
 801c816:	492a      	ldr	r1, [pc, #168]	; (801c8c0 <tcp_free_acked_segments+0xe4>)
 801c818:	482a      	ldr	r0, [pc, #168]	; (801c8c4 <tcp_free_acked_segments+0xe8>)
 801c81a:	f008 ffc7 	bl	80257ac <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801c81e:	68fb      	ldr	r3, [r7, #12]
 801c820:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 801c824:	8a7b      	ldrh	r3, [r7, #18]
 801c826:	1ad3      	subs	r3, r2, r3
 801c828:	b29a      	uxth	r2, r3
 801c82a:	68fb      	ldr	r3, [r7, #12]
 801c82c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801c830:	697b      	ldr	r3, [r7, #20]
 801c832:	891a      	ldrh	r2, [r3, #8]
 801c834:	4b24      	ldr	r3, [pc, #144]	; (801c8c8 <tcp_free_acked_segments+0xec>)
 801c836:	881b      	ldrh	r3, [r3, #0]
 801c838:	4413      	add	r3, r2
 801c83a:	b29a      	uxth	r2, r3
 801c83c:	4b22      	ldr	r3, [pc, #136]	; (801c8c8 <tcp_free_acked_segments+0xec>)
 801c83e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 801c840:	6978      	ldr	r0, [r7, #20]
 801c842:	f7fe f924 	bl	801aa8e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801c846:	68fb      	ldr	r3, [r7, #12]
 801c848:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801c84c:	2b00      	cmp	r3, #0
 801c84e:	d00c      	beq.n	801c86a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 801c850:	68bb      	ldr	r3, [r7, #8]
 801c852:	2b00      	cmp	r3, #0
 801c854:	d109      	bne.n	801c86a <tcp_free_acked_segments+0x8e>
 801c856:	683b      	ldr	r3, [r7, #0]
 801c858:	2b00      	cmp	r3, #0
 801c85a:	d106      	bne.n	801c86a <tcp_free_acked_segments+0x8e>
 801c85c:	4b17      	ldr	r3, [pc, #92]	; (801c8bc <tcp_free_acked_segments+0xe0>)
 801c85e:	f240 4261 	movw	r2, #1121	; 0x461
 801c862:	491a      	ldr	r1, [pc, #104]	; (801c8cc <tcp_free_acked_segments+0xf0>)
 801c864:	4817      	ldr	r0, [pc, #92]	; (801c8c4 <tcp_free_acked_segments+0xe8>)
 801c866:	f008 ffa1 	bl	80257ac <iprintf>
  while (seg_list != NULL &&
 801c86a:	68bb      	ldr	r3, [r7, #8]
 801c86c:	2b00      	cmp	r3, #0
 801c86e:	d020      	beq.n	801c8b2 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 801c870:	68bb      	ldr	r3, [r7, #8]
 801c872:	68db      	ldr	r3, [r3, #12]
 801c874:	685b      	ldr	r3, [r3, #4]
 801c876:	4618      	mov	r0, r3
 801c878:	f7fb f855 	bl	8017926 <lwip_htonl>
 801c87c:	4604      	mov	r4, r0
 801c87e:	68bb      	ldr	r3, [r7, #8]
 801c880:	891b      	ldrh	r3, [r3, #8]
 801c882:	461d      	mov	r5, r3
 801c884:	68bb      	ldr	r3, [r7, #8]
 801c886:	68db      	ldr	r3, [r3, #12]
 801c888:	899b      	ldrh	r3, [r3, #12]
 801c88a:	b29b      	uxth	r3, r3
 801c88c:	4618      	mov	r0, r3
 801c88e:	f7fb f835 	bl	80178fc <lwip_htons>
 801c892:	4603      	mov	r3, r0
 801c894:	b2db      	uxtb	r3, r3
 801c896:	f003 0303 	and.w	r3, r3, #3
 801c89a:	2b00      	cmp	r3, #0
 801c89c:	d001      	beq.n	801c8a2 <tcp_free_acked_segments+0xc6>
 801c89e:	2301      	movs	r3, #1
 801c8a0:	e000      	b.n	801c8a4 <tcp_free_acked_segments+0xc8>
 801c8a2:	2300      	movs	r3, #0
 801c8a4:	442b      	add	r3, r5
 801c8a6:	18e2      	adds	r2, r4, r3
 801c8a8:	4b09      	ldr	r3, [pc, #36]	; (801c8d0 <tcp_free_acked_segments+0xf4>)
 801c8aa:	681b      	ldr	r3, [r3, #0]
 801c8ac:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801c8ae:	2b00      	cmp	r3, #0
 801c8b0:	dd9c      	ble.n	801c7ec <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801c8b2:	68bb      	ldr	r3, [r7, #8]
}
 801c8b4:	4618      	mov	r0, r3
 801c8b6:	3718      	adds	r7, #24
 801c8b8:	46bd      	mov	sp, r7
 801c8ba:	bdb0      	pop	{r4, r5, r7, pc}
 801c8bc:	0802c6a0 	.word	0x0802c6a0
 801c8c0:	0802c988 	.word	0x0802c988
 801c8c4:	0802c6ec 	.word	0x0802c6ec
 801c8c8:	20013808 	.word	0x20013808
 801c8cc:	0802c9b0 	.word	0x0802c9b0
 801c8d0:	20013804 	.word	0x20013804

0801c8d4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801c8d4:	b5b0      	push	{r4, r5, r7, lr}
 801c8d6:	b094      	sub	sp, #80	; 0x50
 801c8d8:	af00      	add	r7, sp, #0
 801c8da:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 801c8dc:	2300      	movs	r3, #0
 801c8de:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 801c8e0:	687b      	ldr	r3, [r7, #4]
 801c8e2:	2b00      	cmp	r3, #0
 801c8e4:	d106      	bne.n	801c8f4 <tcp_receive+0x20>
 801c8e6:	4b91      	ldr	r3, [pc, #580]	; (801cb2c <tcp_receive+0x258>)
 801c8e8:	f240 427b 	movw	r2, #1147	; 0x47b
 801c8ec:	4990      	ldr	r1, [pc, #576]	; (801cb30 <tcp_receive+0x25c>)
 801c8ee:	4891      	ldr	r0, [pc, #580]	; (801cb34 <tcp_receive+0x260>)
 801c8f0:	f008 ff5c 	bl	80257ac <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801c8f4:	687b      	ldr	r3, [r7, #4]
 801c8f6:	7d1b      	ldrb	r3, [r3, #20]
 801c8f8:	2b03      	cmp	r3, #3
 801c8fa:	d806      	bhi.n	801c90a <tcp_receive+0x36>
 801c8fc:	4b8b      	ldr	r3, [pc, #556]	; (801cb2c <tcp_receive+0x258>)
 801c8fe:	f240 427c 	movw	r2, #1148	; 0x47c
 801c902:	498d      	ldr	r1, [pc, #564]	; (801cb38 <tcp_receive+0x264>)
 801c904:	488b      	ldr	r0, [pc, #556]	; (801cb34 <tcp_receive+0x260>)
 801c906:	f008 ff51 	bl	80257ac <iprintf>

  if (flags & TCP_ACK) {
 801c90a:	4b8c      	ldr	r3, [pc, #560]	; (801cb3c <tcp_receive+0x268>)
 801c90c:	781b      	ldrb	r3, [r3, #0]
 801c90e:	f003 0310 	and.w	r3, r3, #16
 801c912:	2b00      	cmp	r3, #0
 801c914:	f000 8264 	beq.w	801cde0 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801c918:	687b      	ldr	r3, [r7, #4]
 801c91a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801c91e:	461a      	mov	r2, r3
 801c920:	687b      	ldr	r3, [r7, #4]
 801c922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c924:	4413      	add	r3, r2
 801c926:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801c928:	687b      	ldr	r3, [r7, #4]
 801c92a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801c92c:	4b84      	ldr	r3, [pc, #528]	; (801cb40 <tcp_receive+0x26c>)
 801c92e:	681b      	ldr	r3, [r3, #0]
 801c930:	1ad3      	subs	r3, r2, r3
 801c932:	2b00      	cmp	r3, #0
 801c934:	db1b      	blt.n	801c96e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801c936:	687b      	ldr	r3, [r7, #4]
 801c938:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801c93a:	4b81      	ldr	r3, [pc, #516]	; (801cb40 <tcp_receive+0x26c>)
 801c93c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801c93e:	429a      	cmp	r2, r3
 801c940:	d106      	bne.n	801c950 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801c942:	687b      	ldr	r3, [r7, #4]
 801c944:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801c946:	4b7f      	ldr	r3, [pc, #508]	; (801cb44 <tcp_receive+0x270>)
 801c948:	681b      	ldr	r3, [r3, #0]
 801c94a:	1ad3      	subs	r3, r2, r3
 801c94c:	2b00      	cmp	r3, #0
 801c94e:	db0e      	blt.n	801c96e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801c950:	687b      	ldr	r3, [r7, #4]
 801c952:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801c954:	4b7b      	ldr	r3, [pc, #492]	; (801cb44 <tcp_receive+0x270>)
 801c956:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801c958:	429a      	cmp	r2, r3
 801c95a:	d125      	bne.n	801c9a8 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801c95c:	4b7a      	ldr	r3, [pc, #488]	; (801cb48 <tcp_receive+0x274>)
 801c95e:	681b      	ldr	r3, [r3, #0]
 801c960:	89db      	ldrh	r3, [r3, #14]
 801c962:	b29a      	uxth	r2, r3
 801c964:	687b      	ldr	r3, [r7, #4]
 801c966:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801c96a:	429a      	cmp	r2, r3
 801c96c:	d91c      	bls.n	801c9a8 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801c96e:	4b76      	ldr	r3, [pc, #472]	; (801cb48 <tcp_receive+0x274>)
 801c970:	681b      	ldr	r3, [r3, #0]
 801c972:	89db      	ldrh	r3, [r3, #14]
 801c974:	b29a      	uxth	r2, r3
 801c976:	687b      	ldr	r3, [r7, #4]
 801c978:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801c97c:	687b      	ldr	r3, [r7, #4]
 801c97e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 801c982:	687b      	ldr	r3, [r7, #4]
 801c984:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801c988:	429a      	cmp	r2, r3
 801c98a:	d205      	bcs.n	801c998 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 801c98c:	687b      	ldr	r3, [r7, #4]
 801c98e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801c992:	687b      	ldr	r3, [r7, #4]
 801c994:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 801c998:	4b69      	ldr	r3, [pc, #420]	; (801cb40 <tcp_receive+0x26c>)
 801c99a:	681a      	ldr	r2, [r3, #0]
 801c99c:	687b      	ldr	r3, [r7, #4]
 801c99e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 801c9a0:	4b68      	ldr	r3, [pc, #416]	; (801cb44 <tcp_receive+0x270>)
 801c9a2:	681a      	ldr	r2, [r3, #0]
 801c9a4:	687b      	ldr	r3, [r7, #4]
 801c9a6:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801c9a8:	4b66      	ldr	r3, [pc, #408]	; (801cb44 <tcp_receive+0x270>)
 801c9aa:	681a      	ldr	r2, [r3, #0]
 801c9ac:	687b      	ldr	r3, [r7, #4]
 801c9ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c9b0:	1ad3      	subs	r3, r2, r3
 801c9b2:	2b00      	cmp	r3, #0
 801c9b4:	dc58      	bgt.n	801ca68 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801c9b6:	4b65      	ldr	r3, [pc, #404]	; (801cb4c <tcp_receive+0x278>)
 801c9b8:	881b      	ldrh	r3, [r3, #0]
 801c9ba:	2b00      	cmp	r3, #0
 801c9bc:	d14b      	bne.n	801ca56 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801c9be:	687b      	ldr	r3, [r7, #4]
 801c9c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c9c2:	687a      	ldr	r2, [r7, #4]
 801c9c4:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 801c9c8:	4413      	add	r3, r2
 801c9ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c9cc:	429a      	cmp	r2, r3
 801c9ce:	d142      	bne.n	801ca56 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 801c9d0:	687b      	ldr	r3, [r7, #4]
 801c9d2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801c9d6:	2b00      	cmp	r3, #0
 801c9d8:	db3d      	blt.n	801ca56 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801c9da:	687b      	ldr	r3, [r7, #4]
 801c9dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801c9de:	4b59      	ldr	r3, [pc, #356]	; (801cb44 <tcp_receive+0x270>)
 801c9e0:	681b      	ldr	r3, [r3, #0]
 801c9e2:	429a      	cmp	r2, r3
 801c9e4:	d137      	bne.n	801ca56 <tcp_receive+0x182>
              found_dupack = 1;
 801c9e6:	2301      	movs	r3, #1
 801c9e8:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801c9ea:	687b      	ldr	r3, [r7, #4]
 801c9ec:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801c9f0:	2bff      	cmp	r3, #255	; 0xff
 801c9f2:	d007      	beq.n	801ca04 <tcp_receive+0x130>
                ++pcb->dupacks;
 801c9f4:	687b      	ldr	r3, [r7, #4]
 801c9f6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801c9fa:	3301      	adds	r3, #1
 801c9fc:	b2da      	uxtb	r2, r3
 801c9fe:	687b      	ldr	r3, [r7, #4]
 801ca00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 801ca04:	687b      	ldr	r3, [r7, #4]
 801ca06:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801ca0a:	2b03      	cmp	r3, #3
 801ca0c:	d91b      	bls.n	801ca46 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801ca0e:	687b      	ldr	r3, [r7, #4]
 801ca10:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801ca14:	687b      	ldr	r3, [r7, #4]
 801ca16:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801ca18:	4413      	add	r3, r2
 801ca1a:	b29a      	uxth	r2, r3
 801ca1c:	687b      	ldr	r3, [r7, #4]
 801ca1e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801ca22:	429a      	cmp	r2, r3
 801ca24:	d30a      	bcc.n	801ca3c <tcp_receive+0x168>
 801ca26:	687b      	ldr	r3, [r7, #4]
 801ca28:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801ca2c:	687b      	ldr	r3, [r7, #4]
 801ca2e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801ca30:	4413      	add	r3, r2
 801ca32:	b29a      	uxth	r2, r3
 801ca34:	687b      	ldr	r3, [r7, #4]
 801ca36:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801ca3a:	e004      	b.n	801ca46 <tcp_receive+0x172>
 801ca3c:	687b      	ldr	r3, [r7, #4]
 801ca3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801ca42:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 801ca46:	687b      	ldr	r3, [r7, #4]
 801ca48:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801ca4c:	2b02      	cmp	r3, #2
 801ca4e:	d902      	bls.n	801ca56 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 801ca50:	6878      	ldr	r0, [r7, #4]
 801ca52:	f002 fb43 	bl	801f0dc <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801ca56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801ca58:	2b00      	cmp	r3, #0
 801ca5a:	f040 8161 	bne.w	801cd20 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 801ca5e:	687b      	ldr	r3, [r7, #4]
 801ca60:	2200      	movs	r2, #0
 801ca62:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801ca66:	e15b      	b.n	801cd20 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801ca68:	4b36      	ldr	r3, [pc, #216]	; (801cb44 <tcp_receive+0x270>)
 801ca6a:	681a      	ldr	r2, [r3, #0]
 801ca6c:	687b      	ldr	r3, [r7, #4]
 801ca6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ca70:	1ad3      	subs	r3, r2, r3
 801ca72:	3b01      	subs	r3, #1
 801ca74:	2b00      	cmp	r3, #0
 801ca76:	f2c0 814e 	blt.w	801cd16 <tcp_receive+0x442>
 801ca7a:	4b32      	ldr	r3, [pc, #200]	; (801cb44 <tcp_receive+0x270>)
 801ca7c:	681a      	ldr	r2, [r3, #0]
 801ca7e:	687b      	ldr	r3, [r7, #4]
 801ca80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ca82:	1ad3      	subs	r3, r2, r3
 801ca84:	2b00      	cmp	r3, #0
 801ca86:	f300 8146 	bgt.w	801cd16 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801ca8a:	687b      	ldr	r3, [r7, #4]
 801ca8c:	8b5b      	ldrh	r3, [r3, #26]
 801ca8e:	f003 0304 	and.w	r3, r3, #4
 801ca92:	2b00      	cmp	r3, #0
 801ca94:	d010      	beq.n	801cab8 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801ca96:	687b      	ldr	r3, [r7, #4]
 801ca98:	8b5b      	ldrh	r3, [r3, #26]
 801ca9a:	f023 0304 	bic.w	r3, r3, #4
 801ca9e:	b29a      	uxth	r2, r3
 801caa0:	687b      	ldr	r3, [r7, #4]
 801caa2:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 801caa4:	687b      	ldr	r3, [r7, #4]
 801caa6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801caaa:	687b      	ldr	r3, [r7, #4]
 801caac:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 801cab0:	687b      	ldr	r3, [r7, #4]
 801cab2:	2200      	movs	r2, #0
 801cab4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 801cab8:	687b      	ldr	r3, [r7, #4]
 801caba:	2200      	movs	r2, #0
 801cabc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801cac0:	687b      	ldr	r3, [r7, #4]
 801cac2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801cac6:	10db      	asrs	r3, r3, #3
 801cac8:	b21b      	sxth	r3, r3
 801caca:	b29a      	uxth	r2, r3
 801cacc:	687b      	ldr	r3, [r7, #4]
 801cace:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801cad2:	b29b      	uxth	r3, r3
 801cad4:	4413      	add	r3, r2
 801cad6:	b29b      	uxth	r3, r3
 801cad8:	b21a      	sxth	r2, r3
 801cada:	687b      	ldr	r3, [r7, #4]
 801cadc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 801cae0:	4b18      	ldr	r3, [pc, #96]	; (801cb44 <tcp_receive+0x270>)
 801cae2:	681b      	ldr	r3, [r3, #0]
 801cae4:	b29a      	uxth	r2, r3
 801cae6:	687b      	ldr	r3, [r7, #4]
 801cae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801caea:	b29b      	uxth	r3, r3
 801caec:	1ad3      	subs	r3, r2, r3
 801caee:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 801caf0:	687b      	ldr	r3, [r7, #4]
 801caf2:	2200      	movs	r2, #0
 801caf4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 801caf8:	4b12      	ldr	r3, [pc, #72]	; (801cb44 <tcp_receive+0x270>)
 801cafa:	681a      	ldr	r2, [r3, #0]
 801cafc:	687b      	ldr	r3, [r7, #4]
 801cafe:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 801cb00:	687b      	ldr	r3, [r7, #4]
 801cb02:	7d1b      	ldrb	r3, [r3, #20]
 801cb04:	2b03      	cmp	r3, #3
 801cb06:	f240 8097 	bls.w	801cc38 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 801cb0a:	687b      	ldr	r3, [r7, #4]
 801cb0c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801cb10:	687b      	ldr	r3, [r7, #4]
 801cb12:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801cb16:	429a      	cmp	r2, r3
 801cb18:	d245      	bcs.n	801cba6 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801cb1a:	687b      	ldr	r3, [r7, #4]
 801cb1c:	8b5b      	ldrh	r3, [r3, #26]
 801cb1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801cb22:	2b00      	cmp	r3, #0
 801cb24:	d014      	beq.n	801cb50 <tcp_receive+0x27c>
 801cb26:	2301      	movs	r3, #1
 801cb28:	e013      	b.n	801cb52 <tcp_receive+0x27e>
 801cb2a:	bf00      	nop
 801cb2c:	0802c6a0 	.word	0x0802c6a0
 801cb30:	0802c9d0 	.word	0x0802c9d0
 801cb34:	0802c6ec 	.word	0x0802c6ec
 801cb38:	0802c9ec 	.word	0x0802c9ec
 801cb3c:	2001380c 	.word	0x2001380c
 801cb40:	20013800 	.word	0x20013800
 801cb44:	20013804 	.word	0x20013804
 801cb48:	200137f0 	.word	0x200137f0
 801cb4c:	2001380a 	.word	0x2001380a
 801cb50:	2302      	movs	r3, #2
 801cb52:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801cb56:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801cb5a:	b29a      	uxth	r2, r3
 801cb5c:	687b      	ldr	r3, [r7, #4]
 801cb5e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801cb60:	fb12 f303 	smulbb	r3, r2, r3
 801cb64:	b29b      	uxth	r3, r3
 801cb66:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801cb68:	4293      	cmp	r3, r2
 801cb6a:	bf28      	it	cs
 801cb6c:	4613      	movcs	r3, r2
 801cb6e:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 801cb70:	687b      	ldr	r3, [r7, #4]
 801cb72:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801cb76:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801cb78:	4413      	add	r3, r2
 801cb7a:	b29a      	uxth	r2, r3
 801cb7c:	687b      	ldr	r3, [r7, #4]
 801cb7e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801cb82:	429a      	cmp	r2, r3
 801cb84:	d309      	bcc.n	801cb9a <tcp_receive+0x2c6>
 801cb86:	687b      	ldr	r3, [r7, #4]
 801cb88:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801cb8c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801cb8e:	4413      	add	r3, r2
 801cb90:	b29a      	uxth	r2, r3
 801cb92:	687b      	ldr	r3, [r7, #4]
 801cb94:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801cb98:	e04e      	b.n	801cc38 <tcp_receive+0x364>
 801cb9a:	687b      	ldr	r3, [r7, #4]
 801cb9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801cba0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801cba4:	e048      	b.n	801cc38 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 801cba6:	687b      	ldr	r3, [r7, #4]
 801cba8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801cbac:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801cbae:	4413      	add	r3, r2
 801cbb0:	b29a      	uxth	r2, r3
 801cbb2:	687b      	ldr	r3, [r7, #4]
 801cbb4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801cbb8:	429a      	cmp	r2, r3
 801cbba:	d309      	bcc.n	801cbd0 <tcp_receive+0x2fc>
 801cbbc:	687b      	ldr	r3, [r7, #4]
 801cbbe:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801cbc2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801cbc4:	4413      	add	r3, r2
 801cbc6:	b29a      	uxth	r2, r3
 801cbc8:	687b      	ldr	r3, [r7, #4]
 801cbca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 801cbce:	e004      	b.n	801cbda <tcp_receive+0x306>
 801cbd0:	687b      	ldr	r3, [r7, #4]
 801cbd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801cbd6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801cbda:	687b      	ldr	r3, [r7, #4]
 801cbdc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801cbe0:	687b      	ldr	r3, [r7, #4]
 801cbe2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801cbe6:	429a      	cmp	r2, r3
 801cbe8:	d326      	bcc.n	801cc38 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801cbea:	687b      	ldr	r3, [r7, #4]
 801cbec:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801cbf0:	687b      	ldr	r3, [r7, #4]
 801cbf2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801cbf6:	1ad3      	subs	r3, r2, r3
 801cbf8:	b29a      	uxth	r2, r3
 801cbfa:	687b      	ldr	r3, [r7, #4]
 801cbfc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801cc00:	687b      	ldr	r3, [r7, #4]
 801cc02:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801cc06:	687b      	ldr	r3, [r7, #4]
 801cc08:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801cc0a:	4413      	add	r3, r2
 801cc0c:	b29a      	uxth	r2, r3
 801cc0e:	687b      	ldr	r3, [r7, #4]
 801cc10:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801cc14:	429a      	cmp	r2, r3
 801cc16:	d30a      	bcc.n	801cc2e <tcp_receive+0x35a>
 801cc18:	687b      	ldr	r3, [r7, #4]
 801cc1a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801cc1e:	687b      	ldr	r3, [r7, #4]
 801cc20:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801cc22:	4413      	add	r3, r2
 801cc24:	b29a      	uxth	r2, r3
 801cc26:	687b      	ldr	r3, [r7, #4]
 801cc28:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801cc2c:	e004      	b.n	801cc38 <tcp_receive+0x364>
 801cc2e:	687b      	ldr	r3, [r7, #4]
 801cc30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801cc34:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801cc38:	687b      	ldr	r3, [r7, #4]
 801cc3a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801cc3c:	687b      	ldr	r3, [r7, #4]
 801cc3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801cc40:	4a98      	ldr	r2, [pc, #608]	; (801cea4 <tcp_receive+0x5d0>)
 801cc42:	6878      	ldr	r0, [r7, #4]
 801cc44:	f7ff fdca 	bl	801c7dc <tcp_free_acked_segments>
 801cc48:	4602      	mov	r2, r0
 801cc4a:	687b      	ldr	r3, [r7, #4]
 801cc4c:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801cc4e:	687b      	ldr	r3, [r7, #4]
 801cc50:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 801cc52:	687b      	ldr	r3, [r7, #4]
 801cc54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801cc56:	4a94      	ldr	r2, [pc, #592]	; (801cea8 <tcp_receive+0x5d4>)
 801cc58:	6878      	ldr	r0, [r7, #4]
 801cc5a:	f7ff fdbf 	bl	801c7dc <tcp_free_acked_segments>
 801cc5e:	4602      	mov	r2, r0
 801cc60:	687b      	ldr	r3, [r7, #4]
 801cc62:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801cc64:	687b      	ldr	r3, [r7, #4]
 801cc66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801cc68:	2b00      	cmp	r3, #0
 801cc6a:	d104      	bne.n	801cc76 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 801cc6c:	687b      	ldr	r3, [r7, #4]
 801cc6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801cc72:	861a      	strh	r2, [r3, #48]	; 0x30
 801cc74:	e002      	b.n	801cc7c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 801cc76:	687b      	ldr	r3, [r7, #4]
 801cc78:	2200      	movs	r2, #0
 801cc7a:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 801cc7c:	687b      	ldr	r3, [r7, #4]
 801cc7e:	2200      	movs	r2, #0
 801cc80:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801cc82:	687b      	ldr	r3, [r7, #4]
 801cc84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801cc86:	2b00      	cmp	r3, #0
 801cc88:	d103      	bne.n	801cc92 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 801cc8a:	687b      	ldr	r3, [r7, #4]
 801cc8c:	2200      	movs	r2, #0
 801cc8e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801cc92:	687b      	ldr	r3, [r7, #4]
 801cc94:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801cc98:	4b84      	ldr	r3, [pc, #528]	; (801ceac <tcp_receive+0x5d8>)
 801cc9a:	881b      	ldrh	r3, [r3, #0]
 801cc9c:	4413      	add	r3, r2
 801cc9e:	b29a      	uxth	r2, r3
 801cca0:	687b      	ldr	r3, [r7, #4]
 801cca2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801cca6:	687b      	ldr	r3, [r7, #4]
 801cca8:	8b5b      	ldrh	r3, [r3, #26]
 801ccaa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801ccae:	2b00      	cmp	r3, #0
 801ccb0:	d035      	beq.n	801cd1e <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 801ccb2:	687b      	ldr	r3, [r7, #4]
 801ccb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ccb6:	2b00      	cmp	r3, #0
 801ccb8:	d118      	bne.n	801ccec <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 801ccba:	687b      	ldr	r3, [r7, #4]
 801ccbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ccbe:	2b00      	cmp	r3, #0
 801ccc0:	d00c      	beq.n	801ccdc <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801ccc2:	687b      	ldr	r3, [r7, #4]
 801ccc4:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801ccc6:	687b      	ldr	r3, [r7, #4]
 801ccc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ccca:	68db      	ldr	r3, [r3, #12]
 801cccc:	685b      	ldr	r3, [r3, #4]
 801ccce:	4618      	mov	r0, r3
 801ccd0:	f7fa fe29 	bl	8017926 <lwip_htonl>
 801ccd4:	4603      	mov	r3, r0
 801ccd6:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 801ccd8:	2b00      	cmp	r3, #0
 801ccda:	dc20      	bgt.n	801cd1e <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 801ccdc:	687b      	ldr	r3, [r7, #4]
 801ccde:	8b5b      	ldrh	r3, [r3, #26]
 801cce0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801cce4:	b29a      	uxth	r2, r3
 801cce6:	687b      	ldr	r3, [r7, #4]
 801cce8:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801ccea:	e018      	b.n	801cd1e <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801ccec:	687b      	ldr	r3, [r7, #4]
 801ccee:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801ccf0:	687b      	ldr	r3, [r7, #4]
 801ccf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ccf4:	68db      	ldr	r3, [r3, #12]
 801ccf6:	685b      	ldr	r3, [r3, #4]
 801ccf8:	4618      	mov	r0, r3
 801ccfa:	f7fa fe14 	bl	8017926 <lwip_htonl>
 801ccfe:	4603      	mov	r3, r0
 801cd00:	1ae3      	subs	r3, r4, r3
 801cd02:	2b00      	cmp	r3, #0
 801cd04:	dc0b      	bgt.n	801cd1e <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 801cd06:	687b      	ldr	r3, [r7, #4]
 801cd08:	8b5b      	ldrh	r3, [r3, #26]
 801cd0a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801cd0e:	b29a      	uxth	r2, r3
 801cd10:	687b      	ldr	r3, [r7, #4]
 801cd12:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801cd14:	e003      	b.n	801cd1e <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 801cd16:	6878      	ldr	r0, [r7, #4]
 801cd18:	f002 fbce 	bl	801f4b8 <tcp_send_empty_ack>
 801cd1c:	e000      	b.n	801cd20 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801cd1e:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801cd20:	687b      	ldr	r3, [r7, #4]
 801cd22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801cd24:	2b00      	cmp	r3, #0
 801cd26:	d05b      	beq.n	801cde0 <tcp_receive+0x50c>
 801cd28:	687b      	ldr	r3, [r7, #4]
 801cd2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801cd2c:	4b60      	ldr	r3, [pc, #384]	; (801ceb0 <tcp_receive+0x5dc>)
 801cd2e:	681b      	ldr	r3, [r3, #0]
 801cd30:	1ad3      	subs	r3, r2, r3
 801cd32:	2b00      	cmp	r3, #0
 801cd34:	da54      	bge.n	801cde0 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801cd36:	4b5f      	ldr	r3, [pc, #380]	; (801ceb4 <tcp_receive+0x5e0>)
 801cd38:	681b      	ldr	r3, [r3, #0]
 801cd3a:	b29a      	uxth	r2, r3
 801cd3c:	687b      	ldr	r3, [r7, #4]
 801cd3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801cd40:	b29b      	uxth	r3, r3
 801cd42:	1ad3      	subs	r3, r2, r3
 801cd44:	b29b      	uxth	r3, r3
 801cd46:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801cd4a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801cd4e:	687b      	ldr	r3, [r7, #4]
 801cd50:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801cd54:	10db      	asrs	r3, r3, #3
 801cd56:	b21b      	sxth	r3, r3
 801cd58:	b29b      	uxth	r3, r3
 801cd5a:	1ad3      	subs	r3, r2, r3
 801cd5c:	b29b      	uxth	r3, r3
 801cd5e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801cd62:	687b      	ldr	r3, [r7, #4]
 801cd64:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801cd68:	b29a      	uxth	r2, r3
 801cd6a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801cd6e:	4413      	add	r3, r2
 801cd70:	b29b      	uxth	r3, r3
 801cd72:	b21a      	sxth	r2, r3
 801cd74:	687b      	ldr	r3, [r7, #4]
 801cd76:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 801cd78:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801cd7c:	2b00      	cmp	r3, #0
 801cd7e:	da05      	bge.n	801cd8c <tcp_receive+0x4b8>
        m = (s16_t) - m;
 801cd80:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801cd84:	425b      	negs	r3, r3
 801cd86:	b29b      	uxth	r3, r3
 801cd88:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801cd8c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801cd90:	687b      	ldr	r3, [r7, #4]
 801cd92:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801cd96:	109b      	asrs	r3, r3, #2
 801cd98:	b21b      	sxth	r3, r3
 801cd9a:	b29b      	uxth	r3, r3
 801cd9c:	1ad3      	subs	r3, r2, r3
 801cd9e:	b29b      	uxth	r3, r3
 801cda0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 801cda4:	687b      	ldr	r3, [r7, #4]
 801cda6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801cdaa:	b29a      	uxth	r2, r3
 801cdac:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801cdb0:	4413      	add	r3, r2
 801cdb2:	b29b      	uxth	r3, r3
 801cdb4:	b21a      	sxth	r2, r3
 801cdb6:	687b      	ldr	r3, [r7, #4]
 801cdb8:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801cdba:	687b      	ldr	r3, [r7, #4]
 801cdbc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801cdc0:	10db      	asrs	r3, r3, #3
 801cdc2:	b21b      	sxth	r3, r3
 801cdc4:	b29a      	uxth	r2, r3
 801cdc6:	687b      	ldr	r3, [r7, #4]
 801cdc8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801cdcc:	b29b      	uxth	r3, r3
 801cdce:	4413      	add	r3, r2
 801cdd0:	b29b      	uxth	r3, r3
 801cdd2:	b21a      	sxth	r2, r3
 801cdd4:	687b      	ldr	r3, [r7, #4]
 801cdd6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801cdda:	687b      	ldr	r3, [r7, #4]
 801cddc:	2200      	movs	r2, #0
 801cdde:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801cde0:	4b35      	ldr	r3, [pc, #212]	; (801ceb8 <tcp_receive+0x5e4>)
 801cde2:	881b      	ldrh	r3, [r3, #0]
 801cde4:	2b00      	cmp	r3, #0
 801cde6:	f000 84e2 	beq.w	801d7ae <tcp_receive+0xeda>
 801cdea:	687b      	ldr	r3, [r7, #4]
 801cdec:	7d1b      	ldrb	r3, [r3, #20]
 801cdee:	2b06      	cmp	r3, #6
 801cdf0:	f200 84dd 	bhi.w	801d7ae <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801cdf4:	687b      	ldr	r3, [r7, #4]
 801cdf6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801cdf8:	4b30      	ldr	r3, [pc, #192]	; (801cebc <tcp_receive+0x5e8>)
 801cdfa:	681b      	ldr	r3, [r3, #0]
 801cdfc:	1ad3      	subs	r3, r2, r3
 801cdfe:	3b01      	subs	r3, #1
 801ce00:	2b00      	cmp	r3, #0
 801ce02:	f2c0 808f 	blt.w	801cf24 <tcp_receive+0x650>
 801ce06:	687b      	ldr	r3, [r7, #4]
 801ce08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801ce0a:	4b2b      	ldr	r3, [pc, #172]	; (801ceb8 <tcp_receive+0x5e4>)
 801ce0c:	881b      	ldrh	r3, [r3, #0]
 801ce0e:	4619      	mov	r1, r3
 801ce10:	4b2a      	ldr	r3, [pc, #168]	; (801cebc <tcp_receive+0x5e8>)
 801ce12:	681b      	ldr	r3, [r3, #0]
 801ce14:	440b      	add	r3, r1
 801ce16:	1ad3      	subs	r3, r2, r3
 801ce18:	3301      	adds	r3, #1
 801ce1a:	2b00      	cmp	r3, #0
 801ce1c:	f300 8082 	bgt.w	801cf24 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 801ce20:	4b27      	ldr	r3, [pc, #156]	; (801cec0 <tcp_receive+0x5ec>)
 801ce22:	685b      	ldr	r3, [r3, #4]
 801ce24:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 801ce26:	687b      	ldr	r3, [r7, #4]
 801ce28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801ce2a:	4b24      	ldr	r3, [pc, #144]	; (801cebc <tcp_receive+0x5e8>)
 801ce2c:	681b      	ldr	r3, [r3, #0]
 801ce2e:	1ad3      	subs	r3, r2, r3
 801ce30:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801ce32:	4b23      	ldr	r3, [pc, #140]	; (801cec0 <tcp_receive+0x5ec>)
 801ce34:	685b      	ldr	r3, [r3, #4]
 801ce36:	2b00      	cmp	r3, #0
 801ce38:	d106      	bne.n	801ce48 <tcp_receive+0x574>
 801ce3a:	4b22      	ldr	r3, [pc, #136]	; (801cec4 <tcp_receive+0x5f0>)
 801ce3c:	f240 5294 	movw	r2, #1428	; 0x594
 801ce40:	4921      	ldr	r1, [pc, #132]	; (801cec8 <tcp_receive+0x5f4>)
 801ce42:	4822      	ldr	r0, [pc, #136]	; (801cecc <tcp_receive+0x5f8>)
 801ce44:	f008 fcb2 	bl	80257ac <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801ce48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce4a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801ce4e:	4293      	cmp	r3, r2
 801ce50:	d906      	bls.n	801ce60 <tcp_receive+0x58c>
 801ce52:	4b1c      	ldr	r3, [pc, #112]	; (801cec4 <tcp_receive+0x5f0>)
 801ce54:	f240 5295 	movw	r2, #1429	; 0x595
 801ce58:	491d      	ldr	r1, [pc, #116]	; (801ced0 <tcp_receive+0x5fc>)
 801ce5a:	481c      	ldr	r0, [pc, #112]	; (801cecc <tcp_receive+0x5f8>)
 801ce5c:	f008 fca6 	bl	80257ac <iprintf>
      off = (u16_t)off32;
 801ce60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce62:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801ce66:	4b16      	ldr	r3, [pc, #88]	; (801cec0 <tcp_receive+0x5ec>)
 801ce68:	685b      	ldr	r3, [r3, #4]
 801ce6a:	891b      	ldrh	r3, [r3, #8]
 801ce6c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801ce70:	429a      	cmp	r2, r3
 801ce72:	d906      	bls.n	801ce82 <tcp_receive+0x5ae>
 801ce74:	4b13      	ldr	r3, [pc, #76]	; (801cec4 <tcp_receive+0x5f0>)
 801ce76:	f240 5297 	movw	r2, #1431	; 0x597
 801ce7a:	4916      	ldr	r1, [pc, #88]	; (801ced4 <tcp_receive+0x600>)
 801ce7c:	4813      	ldr	r0, [pc, #76]	; (801cecc <tcp_receive+0x5f8>)
 801ce7e:	f008 fc95 	bl	80257ac <iprintf>
      inseg.len -= off;
 801ce82:	4b0f      	ldr	r3, [pc, #60]	; (801cec0 <tcp_receive+0x5ec>)
 801ce84:	891a      	ldrh	r2, [r3, #8]
 801ce86:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801ce8a:	1ad3      	subs	r3, r2, r3
 801ce8c:	b29a      	uxth	r2, r3
 801ce8e:	4b0c      	ldr	r3, [pc, #48]	; (801cec0 <tcp_receive+0x5ec>)
 801ce90:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801ce92:	4b0b      	ldr	r3, [pc, #44]	; (801cec0 <tcp_receive+0x5ec>)
 801ce94:	685b      	ldr	r3, [r3, #4]
 801ce96:	891a      	ldrh	r2, [r3, #8]
 801ce98:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801ce9c:	1ad3      	subs	r3, r2, r3
 801ce9e:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 801cea0:	e02a      	b.n	801cef8 <tcp_receive+0x624>
 801cea2:	bf00      	nop
 801cea4:	0802ca08 	.word	0x0802ca08
 801cea8:	0802ca10 	.word	0x0802ca10
 801ceac:	20013808 	.word	0x20013808
 801ceb0:	20013804 	.word	0x20013804
 801ceb4:	2001bd10 	.word	0x2001bd10
 801ceb8:	2001380a 	.word	0x2001380a
 801cebc:	20013800 	.word	0x20013800
 801cec0:	200137e0 	.word	0x200137e0
 801cec4:	0802c6a0 	.word	0x0802c6a0
 801cec8:	0802ca18 	.word	0x0802ca18
 801cecc:	0802c6ec 	.word	0x0802c6ec
 801ced0:	0802ca28 	.word	0x0802ca28
 801ced4:	0802ca38 	.word	0x0802ca38
        off -= p->len;
 801ced8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ceda:	895b      	ldrh	r3, [r3, #10]
 801cedc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801cee0:	1ad3      	subs	r3, r2, r3
 801cee2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801cee6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cee8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801ceea:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 801ceec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ceee:	2200      	movs	r2, #0
 801cef0:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801cef2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cef4:	681b      	ldr	r3, [r3, #0]
 801cef6:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 801cef8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cefa:	895b      	ldrh	r3, [r3, #10]
 801cefc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801cf00:	429a      	cmp	r2, r3
 801cf02:	d8e9      	bhi.n	801ced8 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 801cf04:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801cf08:	4619      	mov	r1, r3
 801cf0a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801cf0c:	f7fc f850 	bl	8018fb0 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801cf10:	687b      	ldr	r3, [r7, #4]
 801cf12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cf14:	4a91      	ldr	r2, [pc, #580]	; (801d15c <tcp_receive+0x888>)
 801cf16:	6013      	str	r3, [r2, #0]
 801cf18:	4b91      	ldr	r3, [pc, #580]	; (801d160 <tcp_receive+0x88c>)
 801cf1a:	68db      	ldr	r3, [r3, #12]
 801cf1c:	4a8f      	ldr	r2, [pc, #572]	; (801d15c <tcp_receive+0x888>)
 801cf1e:	6812      	ldr	r2, [r2, #0]
 801cf20:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801cf22:	e00d      	b.n	801cf40 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 801cf24:	4b8d      	ldr	r3, [pc, #564]	; (801d15c <tcp_receive+0x888>)
 801cf26:	681a      	ldr	r2, [r3, #0]
 801cf28:	687b      	ldr	r3, [r7, #4]
 801cf2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cf2c:	1ad3      	subs	r3, r2, r3
 801cf2e:	2b00      	cmp	r3, #0
 801cf30:	da06      	bge.n	801cf40 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801cf32:	687b      	ldr	r3, [r7, #4]
 801cf34:	8b5b      	ldrh	r3, [r3, #26]
 801cf36:	f043 0302 	orr.w	r3, r3, #2
 801cf3a:	b29a      	uxth	r2, r3
 801cf3c:	687b      	ldr	r3, [r7, #4]
 801cf3e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801cf40:	4b86      	ldr	r3, [pc, #536]	; (801d15c <tcp_receive+0x888>)
 801cf42:	681a      	ldr	r2, [r3, #0]
 801cf44:	687b      	ldr	r3, [r7, #4]
 801cf46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cf48:	1ad3      	subs	r3, r2, r3
 801cf4a:	2b00      	cmp	r3, #0
 801cf4c:	f2c0 842a 	blt.w	801d7a4 <tcp_receive+0xed0>
 801cf50:	4b82      	ldr	r3, [pc, #520]	; (801d15c <tcp_receive+0x888>)
 801cf52:	681a      	ldr	r2, [r3, #0]
 801cf54:	687b      	ldr	r3, [r7, #4]
 801cf56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cf58:	6879      	ldr	r1, [r7, #4]
 801cf5a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801cf5c:	440b      	add	r3, r1
 801cf5e:	1ad3      	subs	r3, r2, r3
 801cf60:	3301      	adds	r3, #1
 801cf62:	2b00      	cmp	r3, #0
 801cf64:	f300 841e 	bgt.w	801d7a4 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 801cf68:	687b      	ldr	r3, [r7, #4]
 801cf6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801cf6c:	4b7b      	ldr	r3, [pc, #492]	; (801d15c <tcp_receive+0x888>)
 801cf6e:	681b      	ldr	r3, [r3, #0]
 801cf70:	429a      	cmp	r2, r3
 801cf72:	f040 829a 	bne.w	801d4aa <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801cf76:	4b7a      	ldr	r3, [pc, #488]	; (801d160 <tcp_receive+0x88c>)
 801cf78:	891c      	ldrh	r4, [r3, #8]
 801cf7a:	4b79      	ldr	r3, [pc, #484]	; (801d160 <tcp_receive+0x88c>)
 801cf7c:	68db      	ldr	r3, [r3, #12]
 801cf7e:	899b      	ldrh	r3, [r3, #12]
 801cf80:	b29b      	uxth	r3, r3
 801cf82:	4618      	mov	r0, r3
 801cf84:	f7fa fcba 	bl	80178fc <lwip_htons>
 801cf88:	4603      	mov	r3, r0
 801cf8a:	b2db      	uxtb	r3, r3
 801cf8c:	f003 0303 	and.w	r3, r3, #3
 801cf90:	2b00      	cmp	r3, #0
 801cf92:	d001      	beq.n	801cf98 <tcp_receive+0x6c4>
 801cf94:	2301      	movs	r3, #1
 801cf96:	e000      	b.n	801cf9a <tcp_receive+0x6c6>
 801cf98:	2300      	movs	r3, #0
 801cf9a:	4423      	add	r3, r4
 801cf9c:	b29a      	uxth	r2, r3
 801cf9e:	4b71      	ldr	r3, [pc, #452]	; (801d164 <tcp_receive+0x890>)
 801cfa0:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801cfa2:	687b      	ldr	r3, [r7, #4]
 801cfa4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801cfa6:	4b6f      	ldr	r3, [pc, #444]	; (801d164 <tcp_receive+0x890>)
 801cfa8:	881b      	ldrh	r3, [r3, #0]
 801cfaa:	429a      	cmp	r2, r3
 801cfac:	d275      	bcs.n	801d09a <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801cfae:	4b6c      	ldr	r3, [pc, #432]	; (801d160 <tcp_receive+0x88c>)
 801cfb0:	68db      	ldr	r3, [r3, #12]
 801cfb2:	899b      	ldrh	r3, [r3, #12]
 801cfb4:	b29b      	uxth	r3, r3
 801cfb6:	4618      	mov	r0, r3
 801cfb8:	f7fa fca0 	bl	80178fc <lwip_htons>
 801cfbc:	4603      	mov	r3, r0
 801cfbe:	b2db      	uxtb	r3, r3
 801cfc0:	f003 0301 	and.w	r3, r3, #1
 801cfc4:	2b00      	cmp	r3, #0
 801cfc6:	d01f      	beq.n	801d008 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801cfc8:	4b65      	ldr	r3, [pc, #404]	; (801d160 <tcp_receive+0x88c>)
 801cfca:	68db      	ldr	r3, [r3, #12]
 801cfcc:	899b      	ldrh	r3, [r3, #12]
 801cfce:	b29b      	uxth	r3, r3
 801cfd0:	b21b      	sxth	r3, r3
 801cfd2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801cfd6:	b21c      	sxth	r4, r3
 801cfd8:	4b61      	ldr	r3, [pc, #388]	; (801d160 <tcp_receive+0x88c>)
 801cfda:	68db      	ldr	r3, [r3, #12]
 801cfdc:	899b      	ldrh	r3, [r3, #12]
 801cfde:	b29b      	uxth	r3, r3
 801cfe0:	4618      	mov	r0, r3
 801cfe2:	f7fa fc8b 	bl	80178fc <lwip_htons>
 801cfe6:	4603      	mov	r3, r0
 801cfe8:	b2db      	uxtb	r3, r3
 801cfea:	b29b      	uxth	r3, r3
 801cfec:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801cff0:	b29b      	uxth	r3, r3
 801cff2:	4618      	mov	r0, r3
 801cff4:	f7fa fc82 	bl	80178fc <lwip_htons>
 801cff8:	4603      	mov	r3, r0
 801cffa:	b21b      	sxth	r3, r3
 801cffc:	4323      	orrs	r3, r4
 801cffe:	b21a      	sxth	r2, r3
 801d000:	4b57      	ldr	r3, [pc, #348]	; (801d160 <tcp_receive+0x88c>)
 801d002:	68db      	ldr	r3, [r3, #12]
 801d004:	b292      	uxth	r2, r2
 801d006:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 801d008:	687b      	ldr	r3, [r7, #4]
 801d00a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801d00c:	4b54      	ldr	r3, [pc, #336]	; (801d160 <tcp_receive+0x88c>)
 801d00e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801d010:	4b53      	ldr	r3, [pc, #332]	; (801d160 <tcp_receive+0x88c>)
 801d012:	68db      	ldr	r3, [r3, #12]
 801d014:	899b      	ldrh	r3, [r3, #12]
 801d016:	b29b      	uxth	r3, r3
 801d018:	4618      	mov	r0, r3
 801d01a:	f7fa fc6f 	bl	80178fc <lwip_htons>
 801d01e:	4603      	mov	r3, r0
 801d020:	b2db      	uxtb	r3, r3
 801d022:	f003 0302 	and.w	r3, r3, #2
 801d026:	2b00      	cmp	r3, #0
 801d028:	d005      	beq.n	801d036 <tcp_receive+0x762>
            inseg.len -= 1;
 801d02a:	4b4d      	ldr	r3, [pc, #308]	; (801d160 <tcp_receive+0x88c>)
 801d02c:	891b      	ldrh	r3, [r3, #8]
 801d02e:	3b01      	subs	r3, #1
 801d030:	b29a      	uxth	r2, r3
 801d032:	4b4b      	ldr	r3, [pc, #300]	; (801d160 <tcp_receive+0x88c>)
 801d034:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801d036:	4b4a      	ldr	r3, [pc, #296]	; (801d160 <tcp_receive+0x88c>)
 801d038:	685b      	ldr	r3, [r3, #4]
 801d03a:	4a49      	ldr	r2, [pc, #292]	; (801d160 <tcp_receive+0x88c>)
 801d03c:	8912      	ldrh	r2, [r2, #8]
 801d03e:	4611      	mov	r1, r2
 801d040:	4618      	mov	r0, r3
 801d042:	f7fb feb5 	bl	8018db0 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801d046:	4b46      	ldr	r3, [pc, #280]	; (801d160 <tcp_receive+0x88c>)
 801d048:	891c      	ldrh	r4, [r3, #8]
 801d04a:	4b45      	ldr	r3, [pc, #276]	; (801d160 <tcp_receive+0x88c>)
 801d04c:	68db      	ldr	r3, [r3, #12]
 801d04e:	899b      	ldrh	r3, [r3, #12]
 801d050:	b29b      	uxth	r3, r3
 801d052:	4618      	mov	r0, r3
 801d054:	f7fa fc52 	bl	80178fc <lwip_htons>
 801d058:	4603      	mov	r3, r0
 801d05a:	b2db      	uxtb	r3, r3
 801d05c:	f003 0303 	and.w	r3, r3, #3
 801d060:	2b00      	cmp	r3, #0
 801d062:	d001      	beq.n	801d068 <tcp_receive+0x794>
 801d064:	2301      	movs	r3, #1
 801d066:	e000      	b.n	801d06a <tcp_receive+0x796>
 801d068:	2300      	movs	r3, #0
 801d06a:	4423      	add	r3, r4
 801d06c:	b29a      	uxth	r2, r3
 801d06e:	4b3d      	ldr	r3, [pc, #244]	; (801d164 <tcp_receive+0x890>)
 801d070:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801d072:	4b3c      	ldr	r3, [pc, #240]	; (801d164 <tcp_receive+0x890>)
 801d074:	881b      	ldrh	r3, [r3, #0]
 801d076:	461a      	mov	r2, r3
 801d078:	4b38      	ldr	r3, [pc, #224]	; (801d15c <tcp_receive+0x888>)
 801d07a:	681b      	ldr	r3, [r3, #0]
 801d07c:	441a      	add	r2, r3
 801d07e:	687b      	ldr	r3, [r7, #4]
 801d080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d082:	6879      	ldr	r1, [r7, #4]
 801d084:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801d086:	440b      	add	r3, r1
 801d088:	429a      	cmp	r2, r3
 801d08a:	d006      	beq.n	801d09a <tcp_receive+0x7c6>
 801d08c:	4b36      	ldr	r3, [pc, #216]	; (801d168 <tcp_receive+0x894>)
 801d08e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 801d092:	4936      	ldr	r1, [pc, #216]	; (801d16c <tcp_receive+0x898>)
 801d094:	4836      	ldr	r0, [pc, #216]	; (801d170 <tcp_receive+0x89c>)
 801d096:	f008 fb89 	bl	80257ac <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801d09a:	687b      	ldr	r3, [r7, #4]
 801d09c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d09e:	2b00      	cmp	r3, #0
 801d0a0:	f000 80e7 	beq.w	801d272 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801d0a4:	4b2e      	ldr	r3, [pc, #184]	; (801d160 <tcp_receive+0x88c>)
 801d0a6:	68db      	ldr	r3, [r3, #12]
 801d0a8:	899b      	ldrh	r3, [r3, #12]
 801d0aa:	b29b      	uxth	r3, r3
 801d0ac:	4618      	mov	r0, r3
 801d0ae:	f7fa fc25 	bl	80178fc <lwip_htons>
 801d0b2:	4603      	mov	r3, r0
 801d0b4:	b2db      	uxtb	r3, r3
 801d0b6:	f003 0301 	and.w	r3, r3, #1
 801d0ba:	2b00      	cmp	r3, #0
 801d0bc:	d010      	beq.n	801d0e0 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801d0be:	e00a      	b.n	801d0d6 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 801d0c0:	687b      	ldr	r3, [r7, #4]
 801d0c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d0c4:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801d0c6:	687b      	ldr	r3, [r7, #4]
 801d0c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d0ca:	681a      	ldr	r2, [r3, #0]
 801d0cc:	687b      	ldr	r3, [r7, #4]
 801d0ce:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 801d0d0:	68f8      	ldr	r0, [r7, #12]
 801d0d2:	f7fd fcdc 	bl	801aa8e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801d0d6:	687b      	ldr	r3, [r7, #4]
 801d0d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d0da:	2b00      	cmp	r3, #0
 801d0dc:	d1f0      	bne.n	801d0c0 <tcp_receive+0x7ec>
 801d0de:	e0c8      	b.n	801d272 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 801d0e0:	687b      	ldr	r3, [r7, #4]
 801d0e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d0e4:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801d0e6:	e052      	b.n	801d18e <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801d0e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d0ea:	68db      	ldr	r3, [r3, #12]
 801d0ec:	899b      	ldrh	r3, [r3, #12]
 801d0ee:	b29b      	uxth	r3, r3
 801d0f0:	4618      	mov	r0, r3
 801d0f2:	f7fa fc03 	bl	80178fc <lwip_htons>
 801d0f6:	4603      	mov	r3, r0
 801d0f8:	b2db      	uxtb	r3, r3
 801d0fa:	f003 0301 	and.w	r3, r3, #1
 801d0fe:	2b00      	cmp	r3, #0
 801d100:	d03d      	beq.n	801d17e <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801d102:	4b17      	ldr	r3, [pc, #92]	; (801d160 <tcp_receive+0x88c>)
 801d104:	68db      	ldr	r3, [r3, #12]
 801d106:	899b      	ldrh	r3, [r3, #12]
 801d108:	b29b      	uxth	r3, r3
 801d10a:	4618      	mov	r0, r3
 801d10c:	f7fa fbf6 	bl	80178fc <lwip_htons>
 801d110:	4603      	mov	r3, r0
 801d112:	b2db      	uxtb	r3, r3
 801d114:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801d118:	2b00      	cmp	r3, #0
 801d11a:	d130      	bne.n	801d17e <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801d11c:	4b10      	ldr	r3, [pc, #64]	; (801d160 <tcp_receive+0x88c>)
 801d11e:	68db      	ldr	r3, [r3, #12]
 801d120:	899b      	ldrh	r3, [r3, #12]
 801d122:	b29c      	uxth	r4, r3
 801d124:	2001      	movs	r0, #1
 801d126:	f7fa fbe9 	bl	80178fc <lwip_htons>
 801d12a:	4603      	mov	r3, r0
 801d12c:	461a      	mov	r2, r3
 801d12e:	4b0c      	ldr	r3, [pc, #48]	; (801d160 <tcp_receive+0x88c>)
 801d130:	68db      	ldr	r3, [r3, #12]
 801d132:	4322      	orrs	r2, r4
 801d134:	b292      	uxth	r2, r2
 801d136:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801d138:	4b09      	ldr	r3, [pc, #36]	; (801d160 <tcp_receive+0x88c>)
 801d13a:	891c      	ldrh	r4, [r3, #8]
 801d13c:	4b08      	ldr	r3, [pc, #32]	; (801d160 <tcp_receive+0x88c>)
 801d13e:	68db      	ldr	r3, [r3, #12]
 801d140:	899b      	ldrh	r3, [r3, #12]
 801d142:	b29b      	uxth	r3, r3
 801d144:	4618      	mov	r0, r3
 801d146:	f7fa fbd9 	bl	80178fc <lwip_htons>
 801d14a:	4603      	mov	r3, r0
 801d14c:	b2db      	uxtb	r3, r3
 801d14e:	f003 0303 	and.w	r3, r3, #3
 801d152:	2b00      	cmp	r3, #0
 801d154:	d00e      	beq.n	801d174 <tcp_receive+0x8a0>
 801d156:	2301      	movs	r3, #1
 801d158:	e00d      	b.n	801d176 <tcp_receive+0x8a2>
 801d15a:	bf00      	nop
 801d15c:	20013800 	.word	0x20013800
 801d160:	200137e0 	.word	0x200137e0
 801d164:	2001380a 	.word	0x2001380a
 801d168:	0802c6a0 	.word	0x0802c6a0
 801d16c:	0802ca48 	.word	0x0802ca48
 801d170:	0802c6ec 	.word	0x0802c6ec
 801d174:	2300      	movs	r3, #0
 801d176:	4423      	add	r3, r4
 801d178:	b29a      	uxth	r2, r3
 801d17a:	4b98      	ldr	r3, [pc, #608]	; (801d3dc <tcp_receive+0xb08>)
 801d17c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801d17e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d180:	613b      	str	r3, [r7, #16]
              next = next->next;
 801d182:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d184:	681b      	ldr	r3, [r3, #0]
 801d186:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 801d188:	6938      	ldr	r0, [r7, #16]
 801d18a:	f7fd fc80 	bl	801aa8e <tcp_seg_free>
            while (next &&
 801d18e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d190:	2b00      	cmp	r3, #0
 801d192:	d00e      	beq.n	801d1b2 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801d194:	4b91      	ldr	r3, [pc, #580]	; (801d3dc <tcp_receive+0xb08>)
 801d196:	881b      	ldrh	r3, [r3, #0]
 801d198:	461a      	mov	r2, r3
 801d19a:	4b91      	ldr	r3, [pc, #580]	; (801d3e0 <tcp_receive+0xb0c>)
 801d19c:	681b      	ldr	r3, [r3, #0]
 801d19e:	441a      	add	r2, r3
 801d1a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d1a2:	68db      	ldr	r3, [r3, #12]
 801d1a4:	685b      	ldr	r3, [r3, #4]
 801d1a6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801d1a8:	8909      	ldrh	r1, [r1, #8]
 801d1aa:	440b      	add	r3, r1
 801d1ac:	1ad3      	subs	r3, r2, r3
            while (next &&
 801d1ae:	2b00      	cmp	r3, #0
 801d1b0:	da9a      	bge.n	801d0e8 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801d1b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d1b4:	2b00      	cmp	r3, #0
 801d1b6:	d059      	beq.n	801d26c <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 801d1b8:	4b88      	ldr	r3, [pc, #544]	; (801d3dc <tcp_receive+0xb08>)
 801d1ba:	881b      	ldrh	r3, [r3, #0]
 801d1bc:	461a      	mov	r2, r3
 801d1be:	4b88      	ldr	r3, [pc, #544]	; (801d3e0 <tcp_receive+0xb0c>)
 801d1c0:	681b      	ldr	r3, [r3, #0]
 801d1c2:	441a      	add	r2, r3
 801d1c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d1c6:	68db      	ldr	r3, [r3, #12]
 801d1c8:	685b      	ldr	r3, [r3, #4]
 801d1ca:	1ad3      	subs	r3, r2, r3
            if (next &&
 801d1cc:	2b00      	cmp	r3, #0
 801d1ce:	dd4d      	ble.n	801d26c <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801d1d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d1d2:	68db      	ldr	r3, [r3, #12]
 801d1d4:	685b      	ldr	r3, [r3, #4]
 801d1d6:	b29a      	uxth	r2, r3
 801d1d8:	4b81      	ldr	r3, [pc, #516]	; (801d3e0 <tcp_receive+0xb0c>)
 801d1da:	681b      	ldr	r3, [r3, #0]
 801d1dc:	b29b      	uxth	r3, r3
 801d1de:	1ad3      	subs	r3, r2, r3
 801d1e0:	b29a      	uxth	r2, r3
 801d1e2:	4b80      	ldr	r3, [pc, #512]	; (801d3e4 <tcp_receive+0xb10>)
 801d1e4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801d1e6:	4b7f      	ldr	r3, [pc, #508]	; (801d3e4 <tcp_receive+0xb10>)
 801d1e8:	68db      	ldr	r3, [r3, #12]
 801d1ea:	899b      	ldrh	r3, [r3, #12]
 801d1ec:	b29b      	uxth	r3, r3
 801d1ee:	4618      	mov	r0, r3
 801d1f0:	f7fa fb84 	bl	80178fc <lwip_htons>
 801d1f4:	4603      	mov	r3, r0
 801d1f6:	b2db      	uxtb	r3, r3
 801d1f8:	f003 0302 	and.w	r3, r3, #2
 801d1fc:	2b00      	cmp	r3, #0
 801d1fe:	d005      	beq.n	801d20c <tcp_receive+0x938>
                inseg.len -= 1;
 801d200:	4b78      	ldr	r3, [pc, #480]	; (801d3e4 <tcp_receive+0xb10>)
 801d202:	891b      	ldrh	r3, [r3, #8]
 801d204:	3b01      	subs	r3, #1
 801d206:	b29a      	uxth	r2, r3
 801d208:	4b76      	ldr	r3, [pc, #472]	; (801d3e4 <tcp_receive+0xb10>)
 801d20a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801d20c:	4b75      	ldr	r3, [pc, #468]	; (801d3e4 <tcp_receive+0xb10>)
 801d20e:	685b      	ldr	r3, [r3, #4]
 801d210:	4a74      	ldr	r2, [pc, #464]	; (801d3e4 <tcp_receive+0xb10>)
 801d212:	8912      	ldrh	r2, [r2, #8]
 801d214:	4611      	mov	r1, r2
 801d216:	4618      	mov	r0, r3
 801d218:	f7fb fdca 	bl	8018db0 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801d21c:	4b71      	ldr	r3, [pc, #452]	; (801d3e4 <tcp_receive+0xb10>)
 801d21e:	891c      	ldrh	r4, [r3, #8]
 801d220:	4b70      	ldr	r3, [pc, #448]	; (801d3e4 <tcp_receive+0xb10>)
 801d222:	68db      	ldr	r3, [r3, #12]
 801d224:	899b      	ldrh	r3, [r3, #12]
 801d226:	b29b      	uxth	r3, r3
 801d228:	4618      	mov	r0, r3
 801d22a:	f7fa fb67 	bl	80178fc <lwip_htons>
 801d22e:	4603      	mov	r3, r0
 801d230:	b2db      	uxtb	r3, r3
 801d232:	f003 0303 	and.w	r3, r3, #3
 801d236:	2b00      	cmp	r3, #0
 801d238:	d001      	beq.n	801d23e <tcp_receive+0x96a>
 801d23a:	2301      	movs	r3, #1
 801d23c:	e000      	b.n	801d240 <tcp_receive+0x96c>
 801d23e:	2300      	movs	r3, #0
 801d240:	4423      	add	r3, r4
 801d242:	b29a      	uxth	r2, r3
 801d244:	4b65      	ldr	r3, [pc, #404]	; (801d3dc <tcp_receive+0xb08>)
 801d246:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801d248:	4b64      	ldr	r3, [pc, #400]	; (801d3dc <tcp_receive+0xb08>)
 801d24a:	881b      	ldrh	r3, [r3, #0]
 801d24c:	461a      	mov	r2, r3
 801d24e:	4b64      	ldr	r3, [pc, #400]	; (801d3e0 <tcp_receive+0xb0c>)
 801d250:	681b      	ldr	r3, [r3, #0]
 801d252:	441a      	add	r2, r3
 801d254:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d256:	68db      	ldr	r3, [r3, #12]
 801d258:	685b      	ldr	r3, [r3, #4]
 801d25a:	429a      	cmp	r2, r3
 801d25c:	d006      	beq.n	801d26c <tcp_receive+0x998>
 801d25e:	4b62      	ldr	r3, [pc, #392]	; (801d3e8 <tcp_receive+0xb14>)
 801d260:	f240 52fc 	movw	r2, #1532	; 0x5fc
 801d264:	4961      	ldr	r1, [pc, #388]	; (801d3ec <tcp_receive+0xb18>)
 801d266:	4862      	ldr	r0, [pc, #392]	; (801d3f0 <tcp_receive+0xb1c>)
 801d268:	f008 faa0 	bl	80257ac <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801d26c:	687b      	ldr	r3, [r7, #4]
 801d26e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801d270:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801d272:	4b5a      	ldr	r3, [pc, #360]	; (801d3dc <tcp_receive+0xb08>)
 801d274:	881b      	ldrh	r3, [r3, #0]
 801d276:	461a      	mov	r2, r3
 801d278:	4b59      	ldr	r3, [pc, #356]	; (801d3e0 <tcp_receive+0xb0c>)
 801d27a:	681b      	ldr	r3, [r3, #0]
 801d27c:	441a      	add	r2, r3
 801d27e:	687b      	ldr	r3, [r7, #4]
 801d280:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801d282:	687b      	ldr	r3, [r7, #4]
 801d284:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801d286:	4b55      	ldr	r3, [pc, #340]	; (801d3dc <tcp_receive+0xb08>)
 801d288:	881b      	ldrh	r3, [r3, #0]
 801d28a:	429a      	cmp	r2, r3
 801d28c:	d206      	bcs.n	801d29c <tcp_receive+0x9c8>
 801d28e:	4b56      	ldr	r3, [pc, #344]	; (801d3e8 <tcp_receive+0xb14>)
 801d290:	f240 6207 	movw	r2, #1543	; 0x607
 801d294:	4957      	ldr	r1, [pc, #348]	; (801d3f4 <tcp_receive+0xb20>)
 801d296:	4856      	ldr	r0, [pc, #344]	; (801d3f0 <tcp_receive+0xb1c>)
 801d298:	f008 fa88 	bl	80257ac <iprintf>
        pcb->rcv_wnd -= tcplen;
 801d29c:	687b      	ldr	r3, [r7, #4]
 801d29e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801d2a0:	4b4e      	ldr	r3, [pc, #312]	; (801d3dc <tcp_receive+0xb08>)
 801d2a2:	881b      	ldrh	r3, [r3, #0]
 801d2a4:	1ad3      	subs	r3, r2, r3
 801d2a6:	b29a      	uxth	r2, r3
 801d2a8:	687b      	ldr	r3, [r7, #4]
 801d2aa:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801d2ac:	6878      	ldr	r0, [r7, #4]
 801d2ae:	f7fc fdb1 	bl	8019e14 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801d2b2:	4b4c      	ldr	r3, [pc, #304]	; (801d3e4 <tcp_receive+0xb10>)
 801d2b4:	685b      	ldr	r3, [r3, #4]
 801d2b6:	891b      	ldrh	r3, [r3, #8]
 801d2b8:	2b00      	cmp	r3, #0
 801d2ba:	d006      	beq.n	801d2ca <tcp_receive+0x9f6>
          recv_data = inseg.p;
 801d2bc:	4b49      	ldr	r3, [pc, #292]	; (801d3e4 <tcp_receive+0xb10>)
 801d2be:	685b      	ldr	r3, [r3, #4]
 801d2c0:	4a4d      	ldr	r2, [pc, #308]	; (801d3f8 <tcp_receive+0xb24>)
 801d2c2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 801d2c4:	4b47      	ldr	r3, [pc, #284]	; (801d3e4 <tcp_receive+0xb10>)
 801d2c6:	2200      	movs	r2, #0
 801d2c8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801d2ca:	4b46      	ldr	r3, [pc, #280]	; (801d3e4 <tcp_receive+0xb10>)
 801d2cc:	68db      	ldr	r3, [r3, #12]
 801d2ce:	899b      	ldrh	r3, [r3, #12]
 801d2d0:	b29b      	uxth	r3, r3
 801d2d2:	4618      	mov	r0, r3
 801d2d4:	f7fa fb12 	bl	80178fc <lwip_htons>
 801d2d8:	4603      	mov	r3, r0
 801d2da:	b2db      	uxtb	r3, r3
 801d2dc:	f003 0301 	and.w	r3, r3, #1
 801d2e0:	2b00      	cmp	r3, #0
 801d2e2:	f000 80b8 	beq.w	801d456 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801d2e6:	4b45      	ldr	r3, [pc, #276]	; (801d3fc <tcp_receive+0xb28>)
 801d2e8:	781b      	ldrb	r3, [r3, #0]
 801d2ea:	f043 0320 	orr.w	r3, r3, #32
 801d2ee:	b2da      	uxtb	r2, r3
 801d2f0:	4b42      	ldr	r3, [pc, #264]	; (801d3fc <tcp_receive+0xb28>)
 801d2f2:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 801d2f4:	e0af      	b.n	801d456 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801d2f6:	687b      	ldr	r3, [r7, #4]
 801d2f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d2fa:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 801d2fc:	687b      	ldr	r3, [r7, #4]
 801d2fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d300:	68db      	ldr	r3, [r3, #12]
 801d302:	685b      	ldr	r3, [r3, #4]
 801d304:	4a36      	ldr	r2, [pc, #216]	; (801d3e0 <tcp_receive+0xb0c>)
 801d306:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801d308:	68bb      	ldr	r3, [r7, #8]
 801d30a:	891b      	ldrh	r3, [r3, #8]
 801d30c:	461c      	mov	r4, r3
 801d30e:	68bb      	ldr	r3, [r7, #8]
 801d310:	68db      	ldr	r3, [r3, #12]
 801d312:	899b      	ldrh	r3, [r3, #12]
 801d314:	b29b      	uxth	r3, r3
 801d316:	4618      	mov	r0, r3
 801d318:	f7fa faf0 	bl	80178fc <lwip_htons>
 801d31c:	4603      	mov	r3, r0
 801d31e:	b2db      	uxtb	r3, r3
 801d320:	f003 0303 	and.w	r3, r3, #3
 801d324:	2b00      	cmp	r3, #0
 801d326:	d001      	beq.n	801d32c <tcp_receive+0xa58>
 801d328:	2301      	movs	r3, #1
 801d32a:	e000      	b.n	801d32e <tcp_receive+0xa5a>
 801d32c:	2300      	movs	r3, #0
 801d32e:	191a      	adds	r2, r3, r4
 801d330:	687b      	ldr	r3, [r7, #4]
 801d332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d334:	441a      	add	r2, r3
 801d336:	687b      	ldr	r3, [r7, #4]
 801d338:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801d33a:	687b      	ldr	r3, [r7, #4]
 801d33c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801d33e:	461c      	mov	r4, r3
 801d340:	68bb      	ldr	r3, [r7, #8]
 801d342:	891b      	ldrh	r3, [r3, #8]
 801d344:	461d      	mov	r5, r3
 801d346:	68bb      	ldr	r3, [r7, #8]
 801d348:	68db      	ldr	r3, [r3, #12]
 801d34a:	899b      	ldrh	r3, [r3, #12]
 801d34c:	b29b      	uxth	r3, r3
 801d34e:	4618      	mov	r0, r3
 801d350:	f7fa fad4 	bl	80178fc <lwip_htons>
 801d354:	4603      	mov	r3, r0
 801d356:	b2db      	uxtb	r3, r3
 801d358:	f003 0303 	and.w	r3, r3, #3
 801d35c:	2b00      	cmp	r3, #0
 801d35e:	d001      	beq.n	801d364 <tcp_receive+0xa90>
 801d360:	2301      	movs	r3, #1
 801d362:	e000      	b.n	801d366 <tcp_receive+0xa92>
 801d364:	2300      	movs	r3, #0
 801d366:	442b      	add	r3, r5
 801d368:	429c      	cmp	r4, r3
 801d36a:	d206      	bcs.n	801d37a <tcp_receive+0xaa6>
 801d36c:	4b1e      	ldr	r3, [pc, #120]	; (801d3e8 <tcp_receive+0xb14>)
 801d36e:	f240 622b 	movw	r2, #1579	; 0x62b
 801d372:	4923      	ldr	r1, [pc, #140]	; (801d400 <tcp_receive+0xb2c>)
 801d374:	481e      	ldr	r0, [pc, #120]	; (801d3f0 <tcp_receive+0xb1c>)
 801d376:	f008 fa19 	bl	80257ac <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801d37a:	68bb      	ldr	r3, [r7, #8]
 801d37c:	891b      	ldrh	r3, [r3, #8]
 801d37e:	461c      	mov	r4, r3
 801d380:	68bb      	ldr	r3, [r7, #8]
 801d382:	68db      	ldr	r3, [r3, #12]
 801d384:	899b      	ldrh	r3, [r3, #12]
 801d386:	b29b      	uxth	r3, r3
 801d388:	4618      	mov	r0, r3
 801d38a:	f7fa fab7 	bl	80178fc <lwip_htons>
 801d38e:	4603      	mov	r3, r0
 801d390:	b2db      	uxtb	r3, r3
 801d392:	f003 0303 	and.w	r3, r3, #3
 801d396:	2b00      	cmp	r3, #0
 801d398:	d001      	beq.n	801d39e <tcp_receive+0xaca>
 801d39a:	2301      	movs	r3, #1
 801d39c:	e000      	b.n	801d3a0 <tcp_receive+0xacc>
 801d39e:	2300      	movs	r3, #0
 801d3a0:	1919      	adds	r1, r3, r4
 801d3a2:	687b      	ldr	r3, [r7, #4]
 801d3a4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801d3a6:	b28b      	uxth	r3, r1
 801d3a8:	1ad3      	subs	r3, r2, r3
 801d3aa:	b29a      	uxth	r2, r3
 801d3ac:	687b      	ldr	r3, [r7, #4]
 801d3ae:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 801d3b0:	6878      	ldr	r0, [r7, #4]
 801d3b2:	f7fc fd2f 	bl	8019e14 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801d3b6:	68bb      	ldr	r3, [r7, #8]
 801d3b8:	685b      	ldr	r3, [r3, #4]
 801d3ba:	891b      	ldrh	r3, [r3, #8]
 801d3bc:	2b00      	cmp	r3, #0
 801d3be:	d028      	beq.n	801d412 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 801d3c0:	4b0d      	ldr	r3, [pc, #52]	; (801d3f8 <tcp_receive+0xb24>)
 801d3c2:	681b      	ldr	r3, [r3, #0]
 801d3c4:	2b00      	cmp	r3, #0
 801d3c6:	d01d      	beq.n	801d404 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 801d3c8:	4b0b      	ldr	r3, [pc, #44]	; (801d3f8 <tcp_receive+0xb24>)
 801d3ca:	681a      	ldr	r2, [r3, #0]
 801d3cc:	68bb      	ldr	r3, [r7, #8]
 801d3ce:	685b      	ldr	r3, [r3, #4]
 801d3d0:	4619      	mov	r1, r3
 801d3d2:	4610      	mov	r0, r2
 801d3d4:	f7fb ff40 	bl	8019258 <pbuf_cat>
 801d3d8:	e018      	b.n	801d40c <tcp_receive+0xb38>
 801d3da:	bf00      	nop
 801d3dc:	2001380a 	.word	0x2001380a
 801d3e0:	20013800 	.word	0x20013800
 801d3e4:	200137e0 	.word	0x200137e0
 801d3e8:	0802c6a0 	.word	0x0802c6a0
 801d3ec:	0802ca80 	.word	0x0802ca80
 801d3f0:	0802c6ec 	.word	0x0802c6ec
 801d3f4:	0802cabc 	.word	0x0802cabc
 801d3f8:	20013810 	.word	0x20013810
 801d3fc:	2001380d 	.word	0x2001380d
 801d400:	0802cadc 	.word	0x0802cadc
            } else {
              recv_data = cseg->p;
 801d404:	68bb      	ldr	r3, [r7, #8]
 801d406:	685b      	ldr	r3, [r3, #4]
 801d408:	4a70      	ldr	r2, [pc, #448]	; (801d5cc <tcp_receive+0xcf8>)
 801d40a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801d40c:	68bb      	ldr	r3, [r7, #8]
 801d40e:	2200      	movs	r2, #0
 801d410:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801d412:	68bb      	ldr	r3, [r7, #8]
 801d414:	68db      	ldr	r3, [r3, #12]
 801d416:	899b      	ldrh	r3, [r3, #12]
 801d418:	b29b      	uxth	r3, r3
 801d41a:	4618      	mov	r0, r3
 801d41c:	f7fa fa6e 	bl	80178fc <lwip_htons>
 801d420:	4603      	mov	r3, r0
 801d422:	b2db      	uxtb	r3, r3
 801d424:	f003 0301 	and.w	r3, r3, #1
 801d428:	2b00      	cmp	r3, #0
 801d42a:	d00d      	beq.n	801d448 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801d42c:	4b68      	ldr	r3, [pc, #416]	; (801d5d0 <tcp_receive+0xcfc>)
 801d42e:	781b      	ldrb	r3, [r3, #0]
 801d430:	f043 0320 	orr.w	r3, r3, #32
 801d434:	b2da      	uxtb	r2, r3
 801d436:	4b66      	ldr	r3, [pc, #408]	; (801d5d0 <tcp_receive+0xcfc>)
 801d438:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801d43a:	687b      	ldr	r3, [r7, #4]
 801d43c:	7d1b      	ldrb	r3, [r3, #20]
 801d43e:	2b04      	cmp	r3, #4
 801d440:	d102      	bne.n	801d448 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 801d442:	687b      	ldr	r3, [r7, #4]
 801d444:	2207      	movs	r2, #7
 801d446:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 801d448:	68bb      	ldr	r3, [r7, #8]
 801d44a:	681a      	ldr	r2, [r3, #0]
 801d44c:	687b      	ldr	r3, [r7, #4]
 801d44e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 801d450:	68b8      	ldr	r0, [r7, #8]
 801d452:	f7fd fb1c 	bl	801aa8e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801d456:	687b      	ldr	r3, [r7, #4]
 801d458:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d45a:	2b00      	cmp	r3, #0
 801d45c:	d008      	beq.n	801d470 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801d45e:	687b      	ldr	r3, [r7, #4]
 801d460:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d462:	68db      	ldr	r3, [r3, #12]
 801d464:	685a      	ldr	r2, [r3, #4]
 801d466:	687b      	ldr	r3, [r7, #4]
 801d468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801d46a:	429a      	cmp	r2, r3
 801d46c:	f43f af43 	beq.w	801d2f6 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 801d470:	687b      	ldr	r3, [r7, #4]
 801d472:	8b5b      	ldrh	r3, [r3, #26]
 801d474:	f003 0301 	and.w	r3, r3, #1
 801d478:	2b00      	cmp	r3, #0
 801d47a:	d00e      	beq.n	801d49a <tcp_receive+0xbc6>
 801d47c:	687b      	ldr	r3, [r7, #4]
 801d47e:	8b5b      	ldrh	r3, [r3, #26]
 801d480:	f023 0301 	bic.w	r3, r3, #1
 801d484:	b29a      	uxth	r2, r3
 801d486:	687b      	ldr	r3, [r7, #4]
 801d488:	835a      	strh	r2, [r3, #26]
 801d48a:	687b      	ldr	r3, [r7, #4]
 801d48c:	8b5b      	ldrh	r3, [r3, #26]
 801d48e:	f043 0302 	orr.w	r3, r3, #2
 801d492:	b29a      	uxth	r2, r3
 801d494:	687b      	ldr	r3, [r7, #4]
 801d496:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801d498:	e188      	b.n	801d7ac <tcp_receive+0xed8>
        tcp_ack(pcb);
 801d49a:	687b      	ldr	r3, [r7, #4]
 801d49c:	8b5b      	ldrh	r3, [r3, #26]
 801d49e:	f043 0301 	orr.w	r3, r3, #1
 801d4a2:	b29a      	uxth	r2, r3
 801d4a4:	687b      	ldr	r3, [r7, #4]
 801d4a6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801d4a8:	e180      	b.n	801d7ac <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801d4aa:	687b      	ldr	r3, [r7, #4]
 801d4ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d4ae:	2b00      	cmp	r3, #0
 801d4b0:	d106      	bne.n	801d4c0 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801d4b2:	4848      	ldr	r0, [pc, #288]	; (801d5d4 <tcp_receive+0xd00>)
 801d4b4:	f7fd fb04 	bl	801aac0 <tcp_seg_copy>
 801d4b8:	4602      	mov	r2, r0
 801d4ba:	687b      	ldr	r3, [r7, #4]
 801d4bc:	675a      	str	r2, [r3, #116]	; 0x74
 801d4be:	e16d      	b.n	801d79c <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 801d4c0:	2300      	movs	r3, #0
 801d4c2:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801d4c4:	687b      	ldr	r3, [r7, #4]
 801d4c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d4c8:	63bb      	str	r3, [r7, #56]	; 0x38
 801d4ca:	e157      	b.n	801d77c <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 801d4cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d4ce:	68db      	ldr	r3, [r3, #12]
 801d4d0:	685a      	ldr	r2, [r3, #4]
 801d4d2:	4b41      	ldr	r3, [pc, #260]	; (801d5d8 <tcp_receive+0xd04>)
 801d4d4:	681b      	ldr	r3, [r3, #0]
 801d4d6:	429a      	cmp	r2, r3
 801d4d8:	d11d      	bne.n	801d516 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801d4da:	4b3e      	ldr	r3, [pc, #248]	; (801d5d4 <tcp_receive+0xd00>)
 801d4dc:	891a      	ldrh	r2, [r3, #8]
 801d4de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d4e0:	891b      	ldrh	r3, [r3, #8]
 801d4e2:	429a      	cmp	r2, r3
 801d4e4:	f240 814f 	bls.w	801d786 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801d4e8:	483a      	ldr	r0, [pc, #232]	; (801d5d4 <tcp_receive+0xd00>)
 801d4ea:	f7fd fae9 	bl	801aac0 <tcp_seg_copy>
 801d4ee:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 801d4f0:	697b      	ldr	r3, [r7, #20]
 801d4f2:	2b00      	cmp	r3, #0
 801d4f4:	f000 8149 	beq.w	801d78a <tcp_receive+0xeb6>
                  if (prev != NULL) {
 801d4f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d4fa:	2b00      	cmp	r3, #0
 801d4fc:	d003      	beq.n	801d506 <tcp_receive+0xc32>
                    prev->next = cseg;
 801d4fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d500:	697a      	ldr	r2, [r7, #20]
 801d502:	601a      	str	r2, [r3, #0]
 801d504:	e002      	b.n	801d50c <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 801d506:	687b      	ldr	r3, [r7, #4]
 801d508:	697a      	ldr	r2, [r7, #20]
 801d50a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 801d50c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801d50e:	6978      	ldr	r0, [r7, #20]
 801d510:	f7ff f8dc 	bl	801c6cc <tcp_oos_insert_segment>
                }
                break;
 801d514:	e139      	b.n	801d78a <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801d516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d518:	2b00      	cmp	r3, #0
 801d51a:	d117      	bne.n	801d54c <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801d51c:	4b2e      	ldr	r3, [pc, #184]	; (801d5d8 <tcp_receive+0xd04>)
 801d51e:	681a      	ldr	r2, [r3, #0]
 801d520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d522:	68db      	ldr	r3, [r3, #12]
 801d524:	685b      	ldr	r3, [r3, #4]
 801d526:	1ad3      	subs	r3, r2, r3
 801d528:	2b00      	cmp	r3, #0
 801d52a:	da57      	bge.n	801d5dc <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801d52c:	4829      	ldr	r0, [pc, #164]	; (801d5d4 <tcp_receive+0xd00>)
 801d52e:	f7fd fac7 	bl	801aac0 <tcp_seg_copy>
 801d532:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 801d534:	69bb      	ldr	r3, [r7, #24]
 801d536:	2b00      	cmp	r3, #0
 801d538:	f000 8129 	beq.w	801d78e <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 801d53c:	687b      	ldr	r3, [r7, #4]
 801d53e:	69ba      	ldr	r2, [r7, #24]
 801d540:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801d542:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801d544:	69b8      	ldr	r0, [r7, #24]
 801d546:	f7ff f8c1 	bl	801c6cc <tcp_oos_insert_segment>
                  }
                  break;
 801d54a:	e120      	b.n	801d78e <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801d54c:	4b22      	ldr	r3, [pc, #136]	; (801d5d8 <tcp_receive+0xd04>)
 801d54e:	681a      	ldr	r2, [r3, #0]
 801d550:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d552:	68db      	ldr	r3, [r3, #12]
 801d554:	685b      	ldr	r3, [r3, #4]
 801d556:	1ad3      	subs	r3, r2, r3
 801d558:	3b01      	subs	r3, #1
 801d55a:	2b00      	cmp	r3, #0
 801d55c:	db3e      	blt.n	801d5dc <tcp_receive+0xd08>
 801d55e:	4b1e      	ldr	r3, [pc, #120]	; (801d5d8 <tcp_receive+0xd04>)
 801d560:	681a      	ldr	r2, [r3, #0]
 801d562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d564:	68db      	ldr	r3, [r3, #12]
 801d566:	685b      	ldr	r3, [r3, #4]
 801d568:	1ad3      	subs	r3, r2, r3
 801d56a:	3301      	adds	r3, #1
 801d56c:	2b00      	cmp	r3, #0
 801d56e:	dc35      	bgt.n	801d5dc <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801d570:	4818      	ldr	r0, [pc, #96]	; (801d5d4 <tcp_receive+0xd00>)
 801d572:	f7fd faa5 	bl	801aac0 <tcp_seg_copy>
 801d576:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 801d578:	69fb      	ldr	r3, [r7, #28]
 801d57a:	2b00      	cmp	r3, #0
 801d57c:	f000 8109 	beq.w	801d792 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801d580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d582:	68db      	ldr	r3, [r3, #12]
 801d584:	685b      	ldr	r3, [r3, #4]
 801d586:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801d588:	8912      	ldrh	r2, [r2, #8]
 801d58a:	441a      	add	r2, r3
 801d58c:	4b12      	ldr	r3, [pc, #72]	; (801d5d8 <tcp_receive+0xd04>)
 801d58e:	681b      	ldr	r3, [r3, #0]
 801d590:	1ad3      	subs	r3, r2, r3
 801d592:	2b00      	cmp	r3, #0
 801d594:	dd12      	ble.n	801d5bc <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801d596:	4b10      	ldr	r3, [pc, #64]	; (801d5d8 <tcp_receive+0xd04>)
 801d598:	681b      	ldr	r3, [r3, #0]
 801d59a:	b29a      	uxth	r2, r3
 801d59c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d59e:	68db      	ldr	r3, [r3, #12]
 801d5a0:	685b      	ldr	r3, [r3, #4]
 801d5a2:	b29b      	uxth	r3, r3
 801d5a4:	1ad3      	subs	r3, r2, r3
 801d5a6:	b29a      	uxth	r2, r3
 801d5a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d5aa:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801d5ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d5ae:	685a      	ldr	r2, [r3, #4]
 801d5b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d5b2:	891b      	ldrh	r3, [r3, #8]
 801d5b4:	4619      	mov	r1, r3
 801d5b6:	4610      	mov	r0, r2
 801d5b8:	f7fb fbfa 	bl	8018db0 <pbuf_realloc>
                    }
                    prev->next = cseg;
 801d5bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d5be:	69fa      	ldr	r2, [r7, #28]
 801d5c0:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801d5c2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801d5c4:	69f8      	ldr	r0, [r7, #28]
 801d5c6:	f7ff f881 	bl	801c6cc <tcp_oos_insert_segment>
                  }
                  break;
 801d5ca:	e0e2      	b.n	801d792 <tcp_receive+0xebe>
 801d5cc:	20013810 	.word	0x20013810
 801d5d0:	2001380d 	.word	0x2001380d
 801d5d4:	200137e0 	.word	0x200137e0
 801d5d8:	20013800 	.word	0x20013800
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801d5dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d5de:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801d5e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d5e2:	681b      	ldr	r3, [r3, #0]
 801d5e4:	2b00      	cmp	r3, #0
 801d5e6:	f040 80c6 	bne.w	801d776 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801d5ea:	4b80      	ldr	r3, [pc, #512]	; (801d7ec <tcp_receive+0xf18>)
 801d5ec:	681a      	ldr	r2, [r3, #0]
 801d5ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d5f0:	68db      	ldr	r3, [r3, #12]
 801d5f2:	685b      	ldr	r3, [r3, #4]
 801d5f4:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801d5f6:	2b00      	cmp	r3, #0
 801d5f8:	f340 80bd 	ble.w	801d776 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801d5fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d5fe:	68db      	ldr	r3, [r3, #12]
 801d600:	899b      	ldrh	r3, [r3, #12]
 801d602:	b29b      	uxth	r3, r3
 801d604:	4618      	mov	r0, r3
 801d606:	f7fa f979 	bl	80178fc <lwip_htons>
 801d60a:	4603      	mov	r3, r0
 801d60c:	b2db      	uxtb	r3, r3
 801d60e:	f003 0301 	and.w	r3, r3, #1
 801d612:	2b00      	cmp	r3, #0
 801d614:	f040 80bf 	bne.w	801d796 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801d618:	4875      	ldr	r0, [pc, #468]	; (801d7f0 <tcp_receive+0xf1c>)
 801d61a:	f7fd fa51 	bl	801aac0 <tcp_seg_copy>
 801d61e:	4602      	mov	r2, r0
 801d620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d622:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801d624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d626:	681b      	ldr	r3, [r3, #0]
 801d628:	2b00      	cmp	r3, #0
 801d62a:	f000 80b6 	beq.w	801d79a <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801d62e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d630:	68db      	ldr	r3, [r3, #12]
 801d632:	685b      	ldr	r3, [r3, #4]
 801d634:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d636:	8912      	ldrh	r2, [r2, #8]
 801d638:	441a      	add	r2, r3
 801d63a:	4b6c      	ldr	r3, [pc, #432]	; (801d7ec <tcp_receive+0xf18>)
 801d63c:	681b      	ldr	r3, [r3, #0]
 801d63e:	1ad3      	subs	r3, r2, r3
 801d640:	2b00      	cmp	r3, #0
 801d642:	dd12      	ble.n	801d66a <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801d644:	4b69      	ldr	r3, [pc, #420]	; (801d7ec <tcp_receive+0xf18>)
 801d646:	681b      	ldr	r3, [r3, #0]
 801d648:	b29a      	uxth	r2, r3
 801d64a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d64c:	68db      	ldr	r3, [r3, #12]
 801d64e:	685b      	ldr	r3, [r3, #4]
 801d650:	b29b      	uxth	r3, r3
 801d652:	1ad3      	subs	r3, r2, r3
 801d654:	b29a      	uxth	r2, r3
 801d656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d658:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801d65a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d65c:	685a      	ldr	r2, [r3, #4]
 801d65e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d660:	891b      	ldrh	r3, [r3, #8]
 801d662:	4619      	mov	r1, r3
 801d664:	4610      	mov	r0, r2
 801d666:	f7fb fba3 	bl	8018db0 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801d66a:	4b62      	ldr	r3, [pc, #392]	; (801d7f4 <tcp_receive+0xf20>)
 801d66c:	881b      	ldrh	r3, [r3, #0]
 801d66e:	461a      	mov	r2, r3
 801d670:	4b5e      	ldr	r3, [pc, #376]	; (801d7ec <tcp_receive+0xf18>)
 801d672:	681b      	ldr	r3, [r3, #0]
 801d674:	441a      	add	r2, r3
 801d676:	687b      	ldr	r3, [r7, #4]
 801d678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d67a:	6879      	ldr	r1, [r7, #4]
 801d67c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801d67e:	440b      	add	r3, r1
 801d680:	1ad3      	subs	r3, r2, r3
 801d682:	2b00      	cmp	r3, #0
 801d684:	f340 8089 	ble.w	801d79a <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801d688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d68a:	681b      	ldr	r3, [r3, #0]
 801d68c:	68db      	ldr	r3, [r3, #12]
 801d68e:	899b      	ldrh	r3, [r3, #12]
 801d690:	b29b      	uxth	r3, r3
 801d692:	4618      	mov	r0, r3
 801d694:	f7fa f932 	bl	80178fc <lwip_htons>
 801d698:	4603      	mov	r3, r0
 801d69a:	b2db      	uxtb	r3, r3
 801d69c:	f003 0301 	and.w	r3, r3, #1
 801d6a0:	2b00      	cmp	r3, #0
 801d6a2:	d022      	beq.n	801d6ea <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801d6a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d6a6:	681b      	ldr	r3, [r3, #0]
 801d6a8:	68db      	ldr	r3, [r3, #12]
 801d6aa:	899b      	ldrh	r3, [r3, #12]
 801d6ac:	b29b      	uxth	r3, r3
 801d6ae:	b21b      	sxth	r3, r3
 801d6b0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801d6b4:	b21c      	sxth	r4, r3
 801d6b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d6b8:	681b      	ldr	r3, [r3, #0]
 801d6ba:	68db      	ldr	r3, [r3, #12]
 801d6bc:	899b      	ldrh	r3, [r3, #12]
 801d6be:	b29b      	uxth	r3, r3
 801d6c0:	4618      	mov	r0, r3
 801d6c2:	f7fa f91b 	bl	80178fc <lwip_htons>
 801d6c6:	4603      	mov	r3, r0
 801d6c8:	b2db      	uxtb	r3, r3
 801d6ca:	b29b      	uxth	r3, r3
 801d6cc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801d6d0:	b29b      	uxth	r3, r3
 801d6d2:	4618      	mov	r0, r3
 801d6d4:	f7fa f912 	bl	80178fc <lwip_htons>
 801d6d8:	4603      	mov	r3, r0
 801d6da:	b21b      	sxth	r3, r3
 801d6dc:	4323      	orrs	r3, r4
 801d6de:	b21a      	sxth	r2, r3
 801d6e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d6e2:	681b      	ldr	r3, [r3, #0]
 801d6e4:	68db      	ldr	r3, [r3, #12]
 801d6e6:	b292      	uxth	r2, r2
 801d6e8:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801d6ea:	687b      	ldr	r3, [r7, #4]
 801d6ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d6ee:	b29a      	uxth	r2, r3
 801d6f0:	687b      	ldr	r3, [r7, #4]
 801d6f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801d6f4:	4413      	add	r3, r2
 801d6f6:	b299      	uxth	r1, r3
 801d6f8:	4b3c      	ldr	r3, [pc, #240]	; (801d7ec <tcp_receive+0xf18>)
 801d6fa:	681b      	ldr	r3, [r3, #0]
 801d6fc:	b29a      	uxth	r2, r3
 801d6fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d700:	681b      	ldr	r3, [r3, #0]
 801d702:	1a8a      	subs	r2, r1, r2
 801d704:	b292      	uxth	r2, r2
 801d706:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801d708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d70a:	681b      	ldr	r3, [r3, #0]
 801d70c:	685a      	ldr	r2, [r3, #4]
 801d70e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d710:	681b      	ldr	r3, [r3, #0]
 801d712:	891b      	ldrh	r3, [r3, #8]
 801d714:	4619      	mov	r1, r3
 801d716:	4610      	mov	r0, r2
 801d718:	f7fb fb4a 	bl	8018db0 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801d71c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d71e:	681b      	ldr	r3, [r3, #0]
 801d720:	891c      	ldrh	r4, [r3, #8]
 801d722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d724:	681b      	ldr	r3, [r3, #0]
 801d726:	68db      	ldr	r3, [r3, #12]
 801d728:	899b      	ldrh	r3, [r3, #12]
 801d72a:	b29b      	uxth	r3, r3
 801d72c:	4618      	mov	r0, r3
 801d72e:	f7fa f8e5 	bl	80178fc <lwip_htons>
 801d732:	4603      	mov	r3, r0
 801d734:	b2db      	uxtb	r3, r3
 801d736:	f003 0303 	and.w	r3, r3, #3
 801d73a:	2b00      	cmp	r3, #0
 801d73c:	d001      	beq.n	801d742 <tcp_receive+0xe6e>
 801d73e:	2301      	movs	r3, #1
 801d740:	e000      	b.n	801d744 <tcp_receive+0xe70>
 801d742:	2300      	movs	r3, #0
 801d744:	4423      	add	r3, r4
 801d746:	b29a      	uxth	r2, r3
 801d748:	4b2a      	ldr	r3, [pc, #168]	; (801d7f4 <tcp_receive+0xf20>)
 801d74a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801d74c:	4b29      	ldr	r3, [pc, #164]	; (801d7f4 <tcp_receive+0xf20>)
 801d74e:	881b      	ldrh	r3, [r3, #0]
 801d750:	461a      	mov	r2, r3
 801d752:	4b26      	ldr	r3, [pc, #152]	; (801d7ec <tcp_receive+0xf18>)
 801d754:	681b      	ldr	r3, [r3, #0]
 801d756:	441a      	add	r2, r3
 801d758:	687b      	ldr	r3, [r7, #4]
 801d75a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d75c:	6879      	ldr	r1, [r7, #4]
 801d75e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801d760:	440b      	add	r3, r1
 801d762:	429a      	cmp	r2, r3
 801d764:	d019      	beq.n	801d79a <tcp_receive+0xec6>
 801d766:	4b24      	ldr	r3, [pc, #144]	; (801d7f8 <tcp_receive+0xf24>)
 801d768:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 801d76c:	4923      	ldr	r1, [pc, #140]	; (801d7fc <tcp_receive+0xf28>)
 801d76e:	4824      	ldr	r0, [pc, #144]	; (801d800 <tcp_receive+0xf2c>)
 801d770:	f008 f81c 	bl	80257ac <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801d774:	e011      	b.n	801d79a <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801d776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d778:	681b      	ldr	r3, [r3, #0]
 801d77a:	63bb      	str	r3, [r7, #56]	; 0x38
 801d77c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d77e:	2b00      	cmp	r3, #0
 801d780:	f47f aea4 	bne.w	801d4cc <tcp_receive+0xbf8>
 801d784:	e00a      	b.n	801d79c <tcp_receive+0xec8>
                break;
 801d786:	bf00      	nop
 801d788:	e008      	b.n	801d79c <tcp_receive+0xec8>
                break;
 801d78a:	bf00      	nop
 801d78c:	e006      	b.n	801d79c <tcp_receive+0xec8>
                  break;
 801d78e:	bf00      	nop
 801d790:	e004      	b.n	801d79c <tcp_receive+0xec8>
                  break;
 801d792:	bf00      	nop
 801d794:	e002      	b.n	801d79c <tcp_receive+0xec8>
                  break;
 801d796:	bf00      	nop
 801d798:	e000      	b.n	801d79c <tcp_receive+0xec8>
                break;
 801d79a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801d79c:	6878      	ldr	r0, [r7, #4]
 801d79e:	f001 fe8b 	bl	801f4b8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801d7a2:	e003      	b.n	801d7ac <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801d7a4:	6878      	ldr	r0, [r7, #4]
 801d7a6:	f001 fe87 	bl	801f4b8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801d7aa:	e01a      	b.n	801d7e2 <tcp_receive+0xf0e>
 801d7ac:	e019      	b.n	801d7e2 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801d7ae:	4b0f      	ldr	r3, [pc, #60]	; (801d7ec <tcp_receive+0xf18>)
 801d7b0:	681a      	ldr	r2, [r3, #0]
 801d7b2:	687b      	ldr	r3, [r7, #4]
 801d7b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d7b6:	1ad3      	subs	r3, r2, r3
 801d7b8:	2b00      	cmp	r3, #0
 801d7ba:	db0a      	blt.n	801d7d2 <tcp_receive+0xefe>
 801d7bc:	4b0b      	ldr	r3, [pc, #44]	; (801d7ec <tcp_receive+0xf18>)
 801d7be:	681a      	ldr	r2, [r3, #0]
 801d7c0:	687b      	ldr	r3, [r7, #4]
 801d7c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d7c4:	6879      	ldr	r1, [r7, #4]
 801d7c6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801d7c8:	440b      	add	r3, r1
 801d7ca:	1ad3      	subs	r3, r2, r3
 801d7cc:	3301      	adds	r3, #1
 801d7ce:	2b00      	cmp	r3, #0
 801d7d0:	dd07      	ble.n	801d7e2 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 801d7d2:	687b      	ldr	r3, [r7, #4]
 801d7d4:	8b5b      	ldrh	r3, [r3, #26]
 801d7d6:	f043 0302 	orr.w	r3, r3, #2
 801d7da:	b29a      	uxth	r2, r3
 801d7dc:	687b      	ldr	r3, [r7, #4]
 801d7de:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801d7e0:	e7ff      	b.n	801d7e2 <tcp_receive+0xf0e>
 801d7e2:	bf00      	nop
 801d7e4:	3750      	adds	r7, #80	; 0x50
 801d7e6:	46bd      	mov	sp, r7
 801d7e8:	bdb0      	pop	{r4, r5, r7, pc}
 801d7ea:	bf00      	nop
 801d7ec:	20013800 	.word	0x20013800
 801d7f0:	200137e0 	.word	0x200137e0
 801d7f4:	2001380a 	.word	0x2001380a
 801d7f8:	0802c6a0 	.word	0x0802c6a0
 801d7fc:	0802ca48 	.word	0x0802ca48
 801d800:	0802c6ec 	.word	0x0802c6ec

0801d804 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 801d804:	b480      	push	{r7}
 801d806:	b083      	sub	sp, #12
 801d808:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801d80a:	4b15      	ldr	r3, [pc, #84]	; (801d860 <tcp_get_next_optbyte+0x5c>)
 801d80c:	881b      	ldrh	r3, [r3, #0]
 801d80e:	1c5a      	adds	r2, r3, #1
 801d810:	b291      	uxth	r1, r2
 801d812:	4a13      	ldr	r2, [pc, #76]	; (801d860 <tcp_get_next_optbyte+0x5c>)
 801d814:	8011      	strh	r1, [r2, #0]
 801d816:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801d818:	4b12      	ldr	r3, [pc, #72]	; (801d864 <tcp_get_next_optbyte+0x60>)
 801d81a:	681b      	ldr	r3, [r3, #0]
 801d81c:	2b00      	cmp	r3, #0
 801d81e:	d004      	beq.n	801d82a <tcp_get_next_optbyte+0x26>
 801d820:	4b11      	ldr	r3, [pc, #68]	; (801d868 <tcp_get_next_optbyte+0x64>)
 801d822:	881b      	ldrh	r3, [r3, #0]
 801d824:	88fa      	ldrh	r2, [r7, #6]
 801d826:	429a      	cmp	r2, r3
 801d828:	d208      	bcs.n	801d83c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801d82a:	4b10      	ldr	r3, [pc, #64]	; (801d86c <tcp_get_next_optbyte+0x68>)
 801d82c:	681b      	ldr	r3, [r3, #0]
 801d82e:	3314      	adds	r3, #20
 801d830:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801d832:	88fb      	ldrh	r3, [r7, #6]
 801d834:	683a      	ldr	r2, [r7, #0]
 801d836:	4413      	add	r3, r2
 801d838:	781b      	ldrb	r3, [r3, #0]
 801d83a:	e00b      	b.n	801d854 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801d83c:	88fb      	ldrh	r3, [r7, #6]
 801d83e:	b2da      	uxtb	r2, r3
 801d840:	4b09      	ldr	r3, [pc, #36]	; (801d868 <tcp_get_next_optbyte+0x64>)
 801d842:	881b      	ldrh	r3, [r3, #0]
 801d844:	b2db      	uxtb	r3, r3
 801d846:	1ad3      	subs	r3, r2, r3
 801d848:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801d84a:	4b06      	ldr	r3, [pc, #24]	; (801d864 <tcp_get_next_optbyte+0x60>)
 801d84c:	681a      	ldr	r2, [r3, #0]
 801d84e:	797b      	ldrb	r3, [r7, #5]
 801d850:	4413      	add	r3, r2
 801d852:	781b      	ldrb	r3, [r3, #0]
  }
}
 801d854:	4618      	mov	r0, r3
 801d856:	370c      	adds	r7, #12
 801d858:	46bd      	mov	sp, r7
 801d85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d85e:	4770      	bx	lr
 801d860:	200137fc 	.word	0x200137fc
 801d864:	200137f8 	.word	0x200137f8
 801d868:	200137f6 	.word	0x200137f6
 801d86c:	200137f0 	.word	0x200137f0

0801d870 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801d870:	b580      	push	{r7, lr}
 801d872:	b084      	sub	sp, #16
 801d874:	af00      	add	r7, sp, #0
 801d876:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 801d878:	687b      	ldr	r3, [r7, #4]
 801d87a:	2b00      	cmp	r3, #0
 801d87c:	d106      	bne.n	801d88c <tcp_parseopt+0x1c>
 801d87e:	4b32      	ldr	r3, [pc, #200]	; (801d948 <tcp_parseopt+0xd8>)
 801d880:	f240 727d 	movw	r2, #1917	; 0x77d
 801d884:	4931      	ldr	r1, [pc, #196]	; (801d94c <tcp_parseopt+0xdc>)
 801d886:	4832      	ldr	r0, [pc, #200]	; (801d950 <tcp_parseopt+0xe0>)
 801d888:	f007 ff90 	bl	80257ac <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801d88c:	4b31      	ldr	r3, [pc, #196]	; (801d954 <tcp_parseopt+0xe4>)
 801d88e:	881b      	ldrh	r3, [r3, #0]
 801d890:	2b00      	cmp	r3, #0
 801d892:	d055      	beq.n	801d940 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801d894:	4b30      	ldr	r3, [pc, #192]	; (801d958 <tcp_parseopt+0xe8>)
 801d896:	2200      	movs	r2, #0
 801d898:	801a      	strh	r2, [r3, #0]
 801d89a:	e045      	b.n	801d928 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 801d89c:	f7ff ffb2 	bl	801d804 <tcp_get_next_optbyte>
 801d8a0:	4603      	mov	r3, r0
 801d8a2:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801d8a4:	7bfb      	ldrb	r3, [r7, #15]
 801d8a6:	2b02      	cmp	r3, #2
 801d8a8:	d006      	beq.n	801d8b8 <tcp_parseopt+0x48>
 801d8aa:	2b02      	cmp	r3, #2
 801d8ac:	dc2b      	bgt.n	801d906 <tcp_parseopt+0x96>
 801d8ae:	2b00      	cmp	r3, #0
 801d8b0:	d041      	beq.n	801d936 <tcp_parseopt+0xc6>
 801d8b2:	2b01      	cmp	r3, #1
 801d8b4:	d127      	bne.n	801d906 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 801d8b6:	e037      	b.n	801d928 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801d8b8:	f7ff ffa4 	bl	801d804 <tcp_get_next_optbyte>
 801d8bc:	4603      	mov	r3, r0
 801d8be:	2b04      	cmp	r3, #4
 801d8c0:	d13b      	bne.n	801d93a <tcp_parseopt+0xca>
 801d8c2:	4b25      	ldr	r3, [pc, #148]	; (801d958 <tcp_parseopt+0xe8>)
 801d8c4:	881b      	ldrh	r3, [r3, #0]
 801d8c6:	3301      	adds	r3, #1
 801d8c8:	4a22      	ldr	r2, [pc, #136]	; (801d954 <tcp_parseopt+0xe4>)
 801d8ca:	8812      	ldrh	r2, [r2, #0]
 801d8cc:	4293      	cmp	r3, r2
 801d8ce:	da34      	bge.n	801d93a <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801d8d0:	f7ff ff98 	bl	801d804 <tcp_get_next_optbyte>
 801d8d4:	4603      	mov	r3, r0
 801d8d6:	b29b      	uxth	r3, r3
 801d8d8:	021b      	lsls	r3, r3, #8
 801d8da:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801d8dc:	f7ff ff92 	bl	801d804 <tcp_get_next_optbyte>
 801d8e0:	4603      	mov	r3, r0
 801d8e2:	b29a      	uxth	r2, r3
 801d8e4:	89bb      	ldrh	r3, [r7, #12]
 801d8e6:	4313      	orrs	r3, r2
 801d8e8:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801d8ea:	89bb      	ldrh	r3, [r7, #12]
 801d8ec:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801d8f0:	d804      	bhi.n	801d8fc <tcp_parseopt+0x8c>
 801d8f2:	89bb      	ldrh	r3, [r7, #12]
 801d8f4:	2b00      	cmp	r3, #0
 801d8f6:	d001      	beq.n	801d8fc <tcp_parseopt+0x8c>
 801d8f8:	89ba      	ldrh	r2, [r7, #12]
 801d8fa:	e001      	b.n	801d900 <tcp_parseopt+0x90>
 801d8fc:	f44f 7206 	mov.w	r2, #536	; 0x218
 801d900:	687b      	ldr	r3, [r7, #4]
 801d902:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 801d904:	e010      	b.n	801d928 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801d906:	f7ff ff7d 	bl	801d804 <tcp_get_next_optbyte>
 801d90a:	4603      	mov	r3, r0
 801d90c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801d90e:	7afb      	ldrb	r3, [r7, #11]
 801d910:	2b01      	cmp	r3, #1
 801d912:	d914      	bls.n	801d93e <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801d914:	7afb      	ldrb	r3, [r7, #11]
 801d916:	b29a      	uxth	r2, r3
 801d918:	4b0f      	ldr	r3, [pc, #60]	; (801d958 <tcp_parseopt+0xe8>)
 801d91a:	881b      	ldrh	r3, [r3, #0]
 801d91c:	4413      	add	r3, r2
 801d91e:	b29b      	uxth	r3, r3
 801d920:	3b02      	subs	r3, #2
 801d922:	b29a      	uxth	r2, r3
 801d924:	4b0c      	ldr	r3, [pc, #48]	; (801d958 <tcp_parseopt+0xe8>)
 801d926:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801d928:	4b0b      	ldr	r3, [pc, #44]	; (801d958 <tcp_parseopt+0xe8>)
 801d92a:	881a      	ldrh	r2, [r3, #0]
 801d92c:	4b09      	ldr	r3, [pc, #36]	; (801d954 <tcp_parseopt+0xe4>)
 801d92e:	881b      	ldrh	r3, [r3, #0]
 801d930:	429a      	cmp	r2, r3
 801d932:	d3b3      	bcc.n	801d89c <tcp_parseopt+0x2c>
 801d934:	e004      	b.n	801d940 <tcp_parseopt+0xd0>
          return;
 801d936:	bf00      	nop
 801d938:	e002      	b.n	801d940 <tcp_parseopt+0xd0>
            return;
 801d93a:	bf00      	nop
 801d93c:	e000      	b.n	801d940 <tcp_parseopt+0xd0>
            return;
 801d93e:	bf00      	nop
      }
    }
  }
}
 801d940:	3710      	adds	r7, #16
 801d942:	46bd      	mov	sp, r7
 801d944:	bd80      	pop	{r7, pc}
 801d946:	bf00      	nop
 801d948:	0802c6a0 	.word	0x0802c6a0
 801d94c:	0802cb04 	.word	0x0802cb04
 801d950:	0802c6ec 	.word	0x0802c6ec
 801d954:	200137f4 	.word	0x200137f4
 801d958:	200137fc 	.word	0x200137fc

0801d95c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801d95c:	b480      	push	{r7}
 801d95e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801d960:	4b05      	ldr	r3, [pc, #20]	; (801d978 <tcp_trigger_input_pcb_close+0x1c>)
 801d962:	781b      	ldrb	r3, [r3, #0]
 801d964:	f043 0310 	orr.w	r3, r3, #16
 801d968:	b2da      	uxtb	r2, r3
 801d96a:	4b03      	ldr	r3, [pc, #12]	; (801d978 <tcp_trigger_input_pcb_close+0x1c>)
 801d96c:	701a      	strb	r2, [r3, #0]
}
 801d96e:	bf00      	nop
 801d970:	46bd      	mov	sp, r7
 801d972:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d976:	4770      	bx	lr
 801d978:	2001380d 	.word	0x2001380d

0801d97c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 801d97c:	b580      	push	{r7, lr}
 801d97e:	b084      	sub	sp, #16
 801d980:	af00      	add	r7, sp, #0
 801d982:	60f8      	str	r0, [r7, #12]
 801d984:	60b9      	str	r1, [r7, #8]
 801d986:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801d988:	68fb      	ldr	r3, [r7, #12]
 801d98a:	2b00      	cmp	r3, #0
 801d98c:	d00a      	beq.n	801d9a4 <tcp_route+0x28>
 801d98e:	68fb      	ldr	r3, [r7, #12]
 801d990:	7a1b      	ldrb	r3, [r3, #8]
 801d992:	2b00      	cmp	r3, #0
 801d994:	d006      	beq.n	801d9a4 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801d996:	68fb      	ldr	r3, [r7, #12]
 801d998:	7a1b      	ldrb	r3, [r3, #8]
 801d99a:	4618      	mov	r0, r3
 801d99c:	f7fb f800 	bl	80189a0 <netif_get_by_index>
 801d9a0:	4603      	mov	r3, r0
 801d9a2:	e003      	b.n	801d9ac <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 801d9a4:	6878      	ldr	r0, [r7, #4]
 801d9a6:	f005 fcd7 	bl	8023358 <ip4_route>
 801d9aa:	4603      	mov	r3, r0
  }
}
 801d9ac:	4618      	mov	r0, r3
 801d9ae:	3710      	adds	r7, #16
 801d9b0:	46bd      	mov	sp, r7
 801d9b2:	bd80      	pop	{r7, pc}

0801d9b4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 801d9b4:	b590      	push	{r4, r7, lr}
 801d9b6:	b087      	sub	sp, #28
 801d9b8:	af00      	add	r7, sp, #0
 801d9ba:	60f8      	str	r0, [r7, #12]
 801d9bc:	60b9      	str	r1, [r7, #8]
 801d9be:	603b      	str	r3, [r7, #0]
 801d9c0:	4613      	mov	r3, r2
 801d9c2:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801d9c4:	68fb      	ldr	r3, [r7, #12]
 801d9c6:	2b00      	cmp	r3, #0
 801d9c8:	d105      	bne.n	801d9d6 <tcp_create_segment+0x22>
 801d9ca:	4b44      	ldr	r3, [pc, #272]	; (801dadc <tcp_create_segment+0x128>)
 801d9cc:	22a3      	movs	r2, #163	; 0xa3
 801d9ce:	4944      	ldr	r1, [pc, #272]	; (801dae0 <tcp_create_segment+0x12c>)
 801d9d0:	4844      	ldr	r0, [pc, #272]	; (801dae4 <tcp_create_segment+0x130>)
 801d9d2:	f007 feeb 	bl	80257ac <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801d9d6:	68bb      	ldr	r3, [r7, #8]
 801d9d8:	2b00      	cmp	r3, #0
 801d9da:	d105      	bne.n	801d9e8 <tcp_create_segment+0x34>
 801d9dc:	4b3f      	ldr	r3, [pc, #252]	; (801dadc <tcp_create_segment+0x128>)
 801d9de:	22a4      	movs	r2, #164	; 0xa4
 801d9e0:	4941      	ldr	r1, [pc, #260]	; (801dae8 <tcp_create_segment+0x134>)
 801d9e2:	4840      	ldr	r0, [pc, #256]	; (801dae4 <tcp_create_segment+0x130>)
 801d9e4:	f007 fee2 	bl	80257ac <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801d9e8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801d9ec:	009b      	lsls	r3, r3, #2
 801d9ee:	b2db      	uxtb	r3, r3
 801d9f0:	f003 0304 	and.w	r3, r3, #4
 801d9f4:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801d9f6:	2003      	movs	r0, #3
 801d9f8:	f7fa fc5e 	bl	80182b8 <memp_malloc>
 801d9fc:	6138      	str	r0, [r7, #16]
 801d9fe:	693b      	ldr	r3, [r7, #16]
 801da00:	2b00      	cmp	r3, #0
 801da02:	d104      	bne.n	801da0e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 801da04:	68b8      	ldr	r0, [r7, #8]
 801da06:	f7fb fb59 	bl	80190bc <pbuf_free>
    return NULL;
 801da0a:	2300      	movs	r3, #0
 801da0c:	e061      	b.n	801dad2 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801da0e:	693b      	ldr	r3, [r7, #16]
 801da10:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801da14:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801da16:	693b      	ldr	r3, [r7, #16]
 801da18:	2200      	movs	r2, #0
 801da1a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801da1c:	693b      	ldr	r3, [r7, #16]
 801da1e:	68ba      	ldr	r2, [r7, #8]
 801da20:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801da22:	68bb      	ldr	r3, [r7, #8]
 801da24:	891a      	ldrh	r2, [r3, #8]
 801da26:	7dfb      	ldrb	r3, [r7, #23]
 801da28:	b29b      	uxth	r3, r3
 801da2a:	429a      	cmp	r2, r3
 801da2c:	d205      	bcs.n	801da3a <tcp_create_segment+0x86>
 801da2e:	4b2b      	ldr	r3, [pc, #172]	; (801dadc <tcp_create_segment+0x128>)
 801da30:	22b0      	movs	r2, #176	; 0xb0
 801da32:	492e      	ldr	r1, [pc, #184]	; (801daec <tcp_create_segment+0x138>)
 801da34:	482b      	ldr	r0, [pc, #172]	; (801dae4 <tcp_create_segment+0x130>)
 801da36:	f007 feb9 	bl	80257ac <iprintf>
  seg->len = p->tot_len - optlen;
 801da3a:	68bb      	ldr	r3, [r7, #8]
 801da3c:	891a      	ldrh	r2, [r3, #8]
 801da3e:	7dfb      	ldrb	r3, [r7, #23]
 801da40:	b29b      	uxth	r3, r3
 801da42:	1ad3      	subs	r3, r2, r3
 801da44:	b29a      	uxth	r2, r3
 801da46:	693b      	ldr	r3, [r7, #16]
 801da48:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801da4a:	2114      	movs	r1, #20
 801da4c:	68b8      	ldr	r0, [r7, #8]
 801da4e:	f7fb fa9f 	bl	8018f90 <pbuf_add_header>
 801da52:	4603      	mov	r3, r0
 801da54:	2b00      	cmp	r3, #0
 801da56:	d004      	beq.n	801da62 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801da58:	6938      	ldr	r0, [r7, #16]
 801da5a:	f7fd f818 	bl	801aa8e <tcp_seg_free>
    return NULL;
 801da5e:	2300      	movs	r3, #0
 801da60:	e037      	b.n	801dad2 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801da62:	693b      	ldr	r3, [r7, #16]
 801da64:	685b      	ldr	r3, [r3, #4]
 801da66:	685a      	ldr	r2, [r3, #4]
 801da68:	693b      	ldr	r3, [r7, #16]
 801da6a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801da6c:	68fb      	ldr	r3, [r7, #12]
 801da6e:	8ada      	ldrh	r2, [r3, #22]
 801da70:	693b      	ldr	r3, [r7, #16]
 801da72:	68dc      	ldr	r4, [r3, #12]
 801da74:	4610      	mov	r0, r2
 801da76:	f7f9 ff41 	bl	80178fc <lwip_htons>
 801da7a:	4603      	mov	r3, r0
 801da7c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801da7e:	68fb      	ldr	r3, [r7, #12]
 801da80:	8b1a      	ldrh	r2, [r3, #24]
 801da82:	693b      	ldr	r3, [r7, #16]
 801da84:	68dc      	ldr	r4, [r3, #12]
 801da86:	4610      	mov	r0, r2
 801da88:	f7f9 ff38 	bl	80178fc <lwip_htons>
 801da8c:	4603      	mov	r3, r0
 801da8e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801da90:	693b      	ldr	r3, [r7, #16]
 801da92:	68dc      	ldr	r4, [r3, #12]
 801da94:	6838      	ldr	r0, [r7, #0]
 801da96:	f7f9 ff46 	bl	8017926 <lwip_htonl>
 801da9a:	4603      	mov	r3, r0
 801da9c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801da9e:	7dfb      	ldrb	r3, [r7, #23]
 801daa0:	089b      	lsrs	r3, r3, #2
 801daa2:	b2db      	uxtb	r3, r3
 801daa4:	b29b      	uxth	r3, r3
 801daa6:	3305      	adds	r3, #5
 801daa8:	b29b      	uxth	r3, r3
 801daaa:	031b      	lsls	r3, r3, #12
 801daac:	b29a      	uxth	r2, r3
 801daae:	79fb      	ldrb	r3, [r7, #7]
 801dab0:	b29b      	uxth	r3, r3
 801dab2:	4313      	orrs	r3, r2
 801dab4:	b29a      	uxth	r2, r3
 801dab6:	693b      	ldr	r3, [r7, #16]
 801dab8:	68dc      	ldr	r4, [r3, #12]
 801daba:	4610      	mov	r0, r2
 801dabc:	f7f9 ff1e 	bl	80178fc <lwip_htons>
 801dac0:	4603      	mov	r3, r0
 801dac2:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801dac4:	693b      	ldr	r3, [r7, #16]
 801dac6:	68db      	ldr	r3, [r3, #12]
 801dac8:	2200      	movs	r2, #0
 801daca:	749a      	strb	r2, [r3, #18]
 801dacc:	2200      	movs	r2, #0
 801dace:	74da      	strb	r2, [r3, #19]
  return seg;
 801dad0:	693b      	ldr	r3, [r7, #16]
}
 801dad2:	4618      	mov	r0, r3
 801dad4:	371c      	adds	r7, #28
 801dad6:	46bd      	mov	sp, r7
 801dad8:	bd90      	pop	{r4, r7, pc}
 801dada:	bf00      	nop
 801dadc:	0802cb20 	.word	0x0802cb20
 801dae0:	0802cb54 	.word	0x0802cb54
 801dae4:	0802cb74 	.word	0x0802cb74
 801dae8:	0802cb9c 	.word	0x0802cb9c
 801daec:	0802cbc0 	.word	0x0802cbc0

0801daf0 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 801daf0:	b580      	push	{r7, lr}
 801daf2:	b086      	sub	sp, #24
 801daf4:	af00      	add	r7, sp, #0
 801daf6:	607b      	str	r3, [r7, #4]
 801daf8:	4603      	mov	r3, r0
 801dafa:	73fb      	strb	r3, [r7, #15]
 801dafc:	460b      	mov	r3, r1
 801dafe:	81bb      	strh	r3, [r7, #12]
 801db00:	4613      	mov	r3, r2
 801db02:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 801db04:	89bb      	ldrh	r3, [r7, #12]
 801db06:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 801db08:	687b      	ldr	r3, [r7, #4]
 801db0a:	2b00      	cmp	r3, #0
 801db0c:	d105      	bne.n	801db1a <tcp_pbuf_prealloc+0x2a>
 801db0e:	4b30      	ldr	r3, [pc, #192]	; (801dbd0 <tcp_pbuf_prealloc+0xe0>)
 801db10:	22e8      	movs	r2, #232	; 0xe8
 801db12:	4930      	ldr	r1, [pc, #192]	; (801dbd4 <tcp_pbuf_prealloc+0xe4>)
 801db14:	4830      	ldr	r0, [pc, #192]	; (801dbd8 <tcp_pbuf_prealloc+0xe8>)
 801db16:	f007 fe49 	bl	80257ac <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801db1a:	6a3b      	ldr	r3, [r7, #32]
 801db1c:	2b00      	cmp	r3, #0
 801db1e:	d105      	bne.n	801db2c <tcp_pbuf_prealloc+0x3c>
 801db20:	4b2b      	ldr	r3, [pc, #172]	; (801dbd0 <tcp_pbuf_prealloc+0xe0>)
 801db22:	22e9      	movs	r2, #233	; 0xe9
 801db24:	492d      	ldr	r1, [pc, #180]	; (801dbdc <tcp_pbuf_prealloc+0xec>)
 801db26:	482c      	ldr	r0, [pc, #176]	; (801dbd8 <tcp_pbuf_prealloc+0xe8>)
 801db28:	f007 fe40 	bl	80257ac <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801db2c:	89ba      	ldrh	r2, [r7, #12]
 801db2e:	897b      	ldrh	r3, [r7, #10]
 801db30:	429a      	cmp	r2, r3
 801db32:	d221      	bcs.n	801db78 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801db34:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801db38:	f003 0302 	and.w	r3, r3, #2
 801db3c:	2b00      	cmp	r3, #0
 801db3e:	d111      	bne.n	801db64 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 801db40:	6a3b      	ldr	r3, [r7, #32]
 801db42:	8b5b      	ldrh	r3, [r3, #26]
 801db44:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801db48:	2b00      	cmp	r3, #0
 801db4a:	d115      	bne.n	801db78 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 801db4c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801db50:	2b00      	cmp	r3, #0
 801db52:	d007      	beq.n	801db64 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 801db54:	6a3b      	ldr	r3, [r7, #32]
 801db56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 801db58:	2b00      	cmp	r3, #0
 801db5a:	d103      	bne.n	801db64 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 801db5c:	6a3b      	ldr	r3, [r7, #32]
 801db5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 801db60:	2b00      	cmp	r3, #0
 801db62:	d009      	beq.n	801db78 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801db64:	89bb      	ldrh	r3, [r7, #12]
 801db66:	f203 231b 	addw	r3, r3, #539	; 0x21b
 801db6a:	f023 0203 	bic.w	r2, r3, #3
 801db6e:	897b      	ldrh	r3, [r7, #10]
 801db70:	4293      	cmp	r3, r2
 801db72:	bf28      	it	cs
 801db74:	4613      	movcs	r3, r2
 801db76:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 801db78:	8af9      	ldrh	r1, [r7, #22]
 801db7a:	7bfb      	ldrb	r3, [r7, #15]
 801db7c:	f44f 7220 	mov.w	r2, #640	; 0x280
 801db80:	4618      	mov	r0, r3
 801db82:	f7fa ffb7 	bl	8018af4 <pbuf_alloc>
 801db86:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801db88:	693b      	ldr	r3, [r7, #16]
 801db8a:	2b00      	cmp	r3, #0
 801db8c:	d101      	bne.n	801db92 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801db8e:	2300      	movs	r3, #0
 801db90:	e019      	b.n	801dbc6 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801db92:	693b      	ldr	r3, [r7, #16]
 801db94:	681b      	ldr	r3, [r3, #0]
 801db96:	2b00      	cmp	r3, #0
 801db98:	d006      	beq.n	801dba8 <tcp_pbuf_prealloc+0xb8>
 801db9a:	4b0d      	ldr	r3, [pc, #52]	; (801dbd0 <tcp_pbuf_prealloc+0xe0>)
 801db9c:	f240 120b 	movw	r2, #267	; 0x10b
 801dba0:	490f      	ldr	r1, [pc, #60]	; (801dbe0 <tcp_pbuf_prealloc+0xf0>)
 801dba2:	480d      	ldr	r0, [pc, #52]	; (801dbd8 <tcp_pbuf_prealloc+0xe8>)
 801dba4:	f007 fe02 	bl	80257ac <iprintf>
  *oversize = p->len - length;
 801dba8:	693b      	ldr	r3, [r7, #16]
 801dbaa:	895a      	ldrh	r2, [r3, #10]
 801dbac:	89bb      	ldrh	r3, [r7, #12]
 801dbae:	1ad3      	subs	r3, r2, r3
 801dbb0:	b29a      	uxth	r2, r3
 801dbb2:	687b      	ldr	r3, [r7, #4]
 801dbb4:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801dbb6:	693b      	ldr	r3, [r7, #16]
 801dbb8:	89ba      	ldrh	r2, [r7, #12]
 801dbba:	811a      	strh	r2, [r3, #8]
 801dbbc:	693b      	ldr	r3, [r7, #16]
 801dbbe:	891a      	ldrh	r2, [r3, #8]
 801dbc0:	693b      	ldr	r3, [r7, #16]
 801dbc2:	815a      	strh	r2, [r3, #10]
  return p;
 801dbc4:	693b      	ldr	r3, [r7, #16]
}
 801dbc6:	4618      	mov	r0, r3
 801dbc8:	3718      	adds	r7, #24
 801dbca:	46bd      	mov	sp, r7
 801dbcc:	bd80      	pop	{r7, pc}
 801dbce:	bf00      	nop
 801dbd0:	0802cb20 	.word	0x0802cb20
 801dbd4:	0802cbd8 	.word	0x0802cbd8
 801dbd8:	0802cb74 	.word	0x0802cb74
 801dbdc:	0802cbfc 	.word	0x0802cbfc
 801dbe0:	0802cc1c 	.word	0x0802cc1c

0801dbe4 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 801dbe4:	b580      	push	{r7, lr}
 801dbe6:	b082      	sub	sp, #8
 801dbe8:	af00      	add	r7, sp, #0
 801dbea:	6078      	str	r0, [r7, #4]
 801dbec:	460b      	mov	r3, r1
 801dbee:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 801dbf0:	687b      	ldr	r3, [r7, #4]
 801dbf2:	2b00      	cmp	r3, #0
 801dbf4:	d106      	bne.n	801dc04 <tcp_write_checks+0x20>
 801dbf6:	4b33      	ldr	r3, [pc, #204]	; (801dcc4 <tcp_write_checks+0xe0>)
 801dbf8:	f240 1233 	movw	r2, #307	; 0x133
 801dbfc:	4932      	ldr	r1, [pc, #200]	; (801dcc8 <tcp_write_checks+0xe4>)
 801dbfe:	4833      	ldr	r0, [pc, #204]	; (801dccc <tcp_write_checks+0xe8>)
 801dc00:	f007 fdd4 	bl	80257ac <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 801dc04:	687b      	ldr	r3, [r7, #4]
 801dc06:	7d1b      	ldrb	r3, [r3, #20]
 801dc08:	2b04      	cmp	r3, #4
 801dc0a:	d00e      	beq.n	801dc2a <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 801dc0c:	687b      	ldr	r3, [r7, #4]
 801dc0e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 801dc10:	2b07      	cmp	r3, #7
 801dc12:	d00a      	beq.n	801dc2a <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 801dc14:	687b      	ldr	r3, [r7, #4]
 801dc16:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 801dc18:	2b02      	cmp	r3, #2
 801dc1a:	d006      	beq.n	801dc2a <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 801dc1c:	687b      	ldr	r3, [r7, #4]
 801dc1e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 801dc20:	2b03      	cmp	r3, #3
 801dc22:	d002      	beq.n	801dc2a <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 801dc24:	f06f 030a 	mvn.w	r3, #10
 801dc28:	e048      	b.n	801dcbc <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801dc2a:	887b      	ldrh	r3, [r7, #2]
 801dc2c:	2b00      	cmp	r3, #0
 801dc2e:	d101      	bne.n	801dc34 <tcp_write_checks+0x50>
    return ERR_OK;
 801dc30:	2300      	movs	r3, #0
 801dc32:	e043      	b.n	801dcbc <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 801dc34:	687b      	ldr	r3, [r7, #4]
 801dc36:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801dc3a:	887a      	ldrh	r2, [r7, #2]
 801dc3c:	429a      	cmp	r2, r3
 801dc3e:	d909      	bls.n	801dc54 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801dc40:	687b      	ldr	r3, [r7, #4]
 801dc42:	8b5b      	ldrh	r3, [r3, #26]
 801dc44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801dc48:	b29a      	uxth	r2, r3
 801dc4a:	687b      	ldr	r3, [r7, #4]
 801dc4c:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801dc4e:	f04f 33ff 	mov.w	r3, #4294967295
 801dc52:	e033      	b.n	801dcbc <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 801dc54:	687b      	ldr	r3, [r7, #4]
 801dc56:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801dc5a:	2b08      	cmp	r3, #8
 801dc5c:	d909      	bls.n	801dc72 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801dc5e:	687b      	ldr	r3, [r7, #4]
 801dc60:	8b5b      	ldrh	r3, [r3, #26]
 801dc62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801dc66:	b29a      	uxth	r2, r3
 801dc68:	687b      	ldr	r3, [r7, #4]
 801dc6a:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801dc6c:	f04f 33ff 	mov.w	r3, #4294967295
 801dc70:	e024      	b.n	801dcbc <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801dc72:	687b      	ldr	r3, [r7, #4]
 801dc74:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801dc78:	2b00      	cmp	r3, #0
 801dc7a:	d00f      	beq.n	801dc9c <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801dc7c:	687b      	ldr	r3, [r7, #4]
 801dc7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801dc80:	2b00      	cmp	r3, #0
 801dc82:	d11a      	bne.n	801dcba <tcp_write_checks+0xd6>
 801dc84:	687b      	ldr	r3, [r7, #4]
 801dc86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801dc88:	2b00      	cmp	r3, #0
 801dc8a:	d116      	bne.n	801dcba <tcp_write_checks+0xd6>
 801dc8c:	4b0d      	ldr	r3, [pc, #52]	; (801dcc4 <tcp_write_checks+0xe0>)
 801dc8e:	f240 1255 	movw	r2, #341	; 0x155
 801dc92:	490f      	ldr	r1, [pc, #60]	; (801dcd0 <tcp_write_checks+0xec>)
 801dc94:	480d      	ldr	r0, [pc, #52]	; (801dccc <tcp_write_checks+0xe8>)
 801dc96:	f007 fd89 	bl	80257ac <iprintf>
 801dc9a:	e00e      	b.n	801dcba <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801dc9c:	687b      	ldr	r3, [r7, #4]
 801dc9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801dca0:	2b00      	cmp	r3, #0
 801dca2:	d103      	bne.n	801dcac <tcp_write_checks+0xc8>
 801dca4:	687b      	ldr	r3, [r7, #4]
 801dca6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801dca8:	2b00      	cmp	r3, #0
 801dcaa:	d006      	beq.n	801dcba <tcp_write_checks+0xd6>
 801dcac:	4b05      	ldr	r3, [pc, #20]	; (801dcc4 <tcp_write_checks+0xe0>)
 801dcae:	f44f 72ac 	mov.w	r2, #344	; 0x158
 801dcb2:	4908      	ldr	r1, [pc, #32]	; (801dcd4 <tcp_write_checks+0xf0>)
 801dcb4:	4805      	ldr	r0, [pc, #20]	; (801dccc <tcp_write_checks+0xe8>)
 801dcb6:	f007 fd79 	bl	80257ac <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801dcba:	2300      	movs	r3, #0
}
 801dcbc:	4618      	mov	r0, r3
 801dcbe:	3708      	adds	r7, #8
 801dcc0:	46bd      	mov	sp, r7
 801dcc2:	bd80      	pop	{r7, pc}
 801dcc4:	0802cb20 	.word	0x0802cb20
 801dcc8:	0802cc30 	.word	0x0802cc30
 801dccc:	0802cb74 	.word	0x0802cb74
 801dcd0:	0802cc50 	.word	0x0802cc50
 801dcd4:	0802cc8c 	.word	0x0802cc8c

0801dcd8 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 801dcd8:	b590      	push	{r4, r7, lr}
 801dcda:	b09b      	sub	sp, #108	; 0x6c
 801dcdc:	af04      	add	r7, sp, #16
 801dcde:	60f8      	str	r0, [r7, #12]
 801dce0:	60b9      	str	r1, [r7, #8]
 801dce2:	4611      	mov	r1, r2
 801dce4:	461a      	mov	r2, r3
 801dce6:	460b      	mov	r3, r1
 801dce8:	80fb      	strh	r3, [r7, #6]
 801dcea:	4613      	mov	r3, r2
 801dcec:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801dcee:	2300      	movs	r3, #0
 801dcf0:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801dcf2:	2300      	movs	r3, #0
 801dcf4:	653b      	str	r3, [r7, #80]	; 0x50
 801dcf6:	2300      	movs	r3, #0
 801dcf8:	64fb      	str	r3, [r7, #76]	; 0x4c
 801dcfa:	2300      	movs	r3, #0
 801dcfc:	64bb      	str	r3, [r7, #72]	; 0x48
 801dcfe:	2300      	movs	r3, #0
 801dd00:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801dd02:	2300      	movs	r3, #0
 801dd04:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 801dd08:	2300      	movs	r3, #0
 801dd0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801dd0e:	2300      	movs	r3, #0
 801dd10:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 801dd12:	2300      	movs	r3, #0
 801dd14:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801dd16:	2300      	movs	r3, #0
 801dd18:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801dd1a:	68fb      	ldr	r3, [r7, #12]
 801dd1c:	2b00      	cmp	r3, #0
 801dd1e:	d109      	bne.n	801dd34 <tcp_write+0x5c>
 801dd20:	4ba4      	ldr	r3, [pc, #656]	; (801dfb4 <tcp_write+0x2dc>)
 801dd22:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 801dd26:	49a4      	ldr	r1, [pc, #656]	; (801dfb8 <tcp_write+0x2e0>)
 801dd28:	48a4      	ldr	r0, [pc, #656]	; (801dfbc <tcp_write+0x2e4>)
 801dd2a:	f007 fd3f 	bl	80257ac <iprintf>
 801dd2e:	f06f 030f 	mvn.w	r3, #15
 801dd32:	e32a      	b.n	801e38a <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 801dd34:	68fb      	ldr	r3, [r7, #12]
 801dd36:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801dd3a:	085b      	lsrs	r3, r3, #1
 801dd3c:	b29a      	uxth	r2, r3
 801dd3e:	68fb      	ldr	r3, [r7, #12]
 801dd40:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801dd42:	4293      	cmp	r3, r2
 801dd44:	bf28      	it	cs
 801dd46:	4613      	movcs	r3, r2
 801dd48:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801dd4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801dd4c:	2b00      	cmp	r3, #0
 801dd4e:	d102      	bne.n	801dd56 <tcp_write+0x7e>
 801dd50:	68fb      	ldr	r3, [r7, #12]
 801dd52:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801dd54:	e000      	b.n	801dd58 <tcp_write+0x80>
 801dd56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801dd58:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801dd5a:	68bb      	ldr	r3, [r7, #8]
 801dd5c:	2b00      	cmp	r3, #0
 801dd5e:	d109      	bne.n	801dd74 <tcp_write+0x9c>
 801dd60:	4b94      	ldr	r3, [pc, #592]	; (801dfb4 <tcp_write+0x2dc>)
 801dd62:	f240 12ad 	movw	r2, #429	; 0x1ad
 801dd66:	4996      	ldr	r1, [pc, #600]	; (801dfc0 <tcp_write+0x2e8>)
 801dd68:	4894      	ldr	r0, [pc, #592]	; (801dfbc <tcp_write+0x2e4>)
 801dd6a:	f007 fd1f 	bl	80257ac <iprintf>
 801dd6e:	f06f 030f 	mvn.w	r3, #15
 801dd72:	e30a      	b.n	801e38a <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 801dd74:	88fb      	ldrh	r3, [r7, #6]
 801dd76:	4619      	mov	r1, r3
 801dd78:	68f8      	ldr	r0, [r7, #12]
 801dd7a:	f7ff ff33 	bl	801dbe4 <tcp_write_checks>
 801dd7e:	4603      	mov	r3, r0
 801dd80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 801dd84:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801dd88:	2b00      	cmp	r3, #0
 801dd8a:	d002      	beq.n	801dd92 <tcp_write+0xba>
    return err;
 801dd8c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801dd90:	e2fb      	b.n	801e38a <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 801dd92:	68fb      	ldr	r3, [r7, #12]
 801dd94:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801dd98:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801dd9c:	2300      	movs	r3, #0
 801dd9e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801dda2:	68fb      	ldr	r3, [r7, #12]
 801dda4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801dda6:	2b00      	cmp	r3, #0
 801dda8:	f000 80f6 	beq.w	801df98 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801ddac:	68fb      	ldr	r3, [r7, #12]
 801ddae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ddb0:	653b      	str	r3, [r7, #80]	; 0x50
 801ddb2:	e002      	b.n	801ddba <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 801ddb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ddb6:	681b      	ldr	r3, [r3, #0]
 801ddb8:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801ddba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ddbc:	681b      	ldr	r3, [r3, #0]
 801ddbe:	2b00      	cmp	r3, #0
 801ddc0:	d1f8      	bne.n	801ddb4 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801ddc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ddc4:	7a9b      	ldrb	r3, [r3, #10]
 801ddc6:	009b      	lsls	r3, r3, #2
 801ddc8:	b29b      	uxth	r3, r3
 801ddca:	f003 0304 	and.w	r3, r3, #4
 801ddce:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801ddd0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801ddd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ddd4:	891b      	ldrh	r3, [r3, #8]
 801ddd6:	4619      	mov	r1, r3
 801ddd8:	8c3b      	ldrh	r3, [r7, #32]
 801ddda:	440b      	add	r3, r1
 801dddc:	429a      	cmp	r2, r3
 801ddde:	da06      	bge.n	801ddee <tcp_write+0x116>
 801dde0:	4b74      	ldr	r3, [pc, #464]	; (801dfb4 <tcp_write+0x2dc>)
 801dde2:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801dde6:	4977      	ldr	r1, [pc, #476]	; (801dfc4 <tcp_write+0x2ec>)
 801dde8:	4874      	ldr	r0, [pc, #464]	; (801dfbc <tcp_write+0x2e4>)
 801ddea:	f007 fcdf 	bl	80257ac <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801ddee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ddf0:	891a      	ldrh	r2, [r3, #8]
 801ddf2:	8c3b      	ldrh	r3, [r7, #32]
 801ddf4:	4413      	add	r3, r2
 801ddf6:	b29b      	uxth	r3, r3
 801ddf8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801ddfa:	1ad3      	subs	r3, r2, r3
 801ddfc:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801ddfe:	68fb      	ldr	r3, [r7, #12]
 801de00:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801de04:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 801de06:	8a7b      	ldrh	r3, [r7, #18]
 801de08:	2b00      	cmp	r3, #0
 801de0a:	d026      	beq.n	801de5a <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801de0c:	8a7b      	ldrh	r3, [r7, #18]
 801de0e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801de10:	429a      	cmp	r2, r3
 801de12:	d206      	bcs.n	801de22 <tcp_write+0x14a>
 801de14:	4b67      	ldr	r3, [pc, #412]	; (801dfb4 <tcp_write+0x2dc>)
 801de16:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801de1a:	496b      	ldr	r1, [pc, #428]	; (801dfc8 <tcp_write+0x2f0>)
 801de1c:	4867      	ldr	r0, [pc, #412]	; (801dfbc <tcp_write+0x2e4>)
 801de1e:	f007 fcc5 	bl	80257ac <iprintf>
      seg = last_unsent;
 801de22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801de24:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801de26:	8a7b      	ldrh	r3, [r7, #18]
 801de28:	88fa      	ldrh	r2, [r7, #6]
 801de2a:	4293      	cmp	r3, r2
 801de2c:	bf28      	it	cs
 801de2e:	4613      	movcs	r3, r2
 801de30:	b29b      	uxth	r3, r3
 801de32:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801de34:	4293      	cmp	r3, r2
 801de36:	bf28      	it	cs
 801de38:	4613      	movcs	r3, r2
 801de3a:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 801de3c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801de40:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801de42:	4413      	add	r3, r2
 801de44:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 801de48:	8a7a      	ldrh	r2, [r7, #18]
 801de4a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801de4c:	1ad3      	subs	r3, r2, r3
 801de4e:	b29b      	uxth	r3, r3
 801de50:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 801de52:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801de54:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801de56:	1ad3      	subs	r3, r2, r3
 801de58:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801de5a:	8a7b      	ldrh	r3, [r7, #18]
 801de5c:	2b00      	cmp	r3, #0
 801de5e:	d00b      	beq.n	801de78 <tcp_write+0x1a0>
 801de60:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801de64:	88fb      	ldrh	r3, [r7, #6]
 801de66:	429a      	cmp	r2, r3
 801de68:	d006      	beq.n	801de78 <tcp_write+0x1a0>
 801de6a:	4b52      	ldr	r3, [pc, #328]	; (801dfb4 <tcp_write+0x2dc>)
 801de6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 801de70:	4956      	ldr	r1, [pc, #344]	; (801dfcc <tcp_write+0x2f4>)
 801de72:	4852      	ldr	r0, [pc, #328]	; (801dfbc <tcp_write+0x2e4>)
 801de74:	f007 fc9a 	bl	80257ac <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801de78:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801de7c:	88fb      	ldrh	r3, [r7, #6]
 801de7e:	429a      	cmp	r2, r3
 801de80:	f080 8167 	bcs.w	801e152 <tcp_write+0x47a>
 801de84:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801de86:	2b00      	cmp	r3, #0
 801de88:	f000 8163 	beq.w	801e152 <tcp_write+0x47a>
 801de8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801de8e:	891b      	ldrh	r3, [r3, #8]
 801de90:	2b00      	cmp	r3, #0
 801de92:	f000 815e 	beq.w	801e152 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801de96:	88fa      	ldrh	r2, [r7, #6]
 801de98:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801de9c:	1ad2      	subs	r2, r2, r3
 801de9e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801dea0:	4293      	cmp	r3, r2
 801dea2:	bfa8      	it	ge
 801dea4:	4613      	movge	r3, r2
 801dea6:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 801dea8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801deaa:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801deac:	797b      	ldrb	r3, [r7, #5]
 801deae:	f003 0301 	and.w	r3, r3, #1
 801deb2:	2b00      	cmp	r3, #0
 801deb4:	d027      	beq.n	801df06 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801deb6:	f107 0012 	add.w	r0, r7, #18
 801deba:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801debc:	8bf9      	ldrh	r1, [r7, #30]
 801debe:	2301      	movs	r3, #1
 801dec0:	9302      	str	r3, [sp, #8]
 801dec2:	797b      	ldrb	r3, [r7, #5]
 801dec4:	9301      	str	r3, [sp, #4]
 801dec6:	68fb      	ldr	r3, [r7, #12]
 801dec8:	9300      	str	r3, [sp, #0]
 801deca:	4603      	mov	r3, r0
 801decc:	2000      	movs	r0, #0
 801dece:	f7ff fe0f 	bl	801daf0 <tcp_pbuf_prealloc>
 801ded2:	6578      	str	r0, [r7, #84]	; 0x54
 801ded4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ded6:	2b00      	cmp	r3, #0
 801ded8:	f000 8225 	beq.w	801e326 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801dedc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801dede:	6858      	ldr	r0, [r3, #4]
 801dee0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801dee4:	68ba      	ldr	r2, [r7, #8]
 801dee6:	4413      	add	r3, r2
 801dee8:	8bfa      	ldrh	r2, [r7, #30]
 801deea:	4619      	mov	r1, r3
 801deec:	f006 fd8a 	bl	8024a04 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 801def0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801def2:	f7fb f971 	bl	80191d8 <pbuf_clen>
 801def6:	4603      	mov	r3, r0
 801def8:	461a      	mov	r2, r3
 801defa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801defe:	4413      	add	r3, r2
 801df00:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 801df04:	e041      	b.n	801df8a <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801df06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801df08:	685b      	ldr	r3, [r3, #4]
 801df0a:	637b      	str	r3, [r7, #52]	; 0x34
 801df0c:	e002      	b.n	801df14 <tcp_write+0x23c>
 801df0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801df10:	681b      	ldr	r3, [r3, #0]
 801df12:	637b      	str	r3, [r7, #52]	; 0x34
 801df14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801df16:	681b      	ldr	r3, [r3, #0]
 801df18:	2b00      	cmp	r3, #0
 801df1a:	d1f8      	bne.n	801df0e <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801df1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801df1e:	7b1b      	ldrb	r3, [r3, #12]
 801df20:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801df24:	2b00      	cmp	r3, #0
 801df26:	d115      	bne.n	801df54 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801df28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801df2a:	685b      	ldr	r3, [r3, #4]
 801df2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801df2e:	8952      	ldrh	r2, [r2, #10]
 801df30:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801df32:	68ba      	ldr	r2, [r7, #8]
 801df34:	429a      	cmp	r2, r3
 801df36:	d10d      	bne.n	801df54 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801df38:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801df3c:	2b00      	cmp	r3, #0
 801df3e:	d006      	beq.n	801df4e <tcp_write+0x276>
 801df40:	4b1c      	ldr	r3, [pc, #112]	; (801dfb4 <tcp_write+0x2dc>)
 801df42:	f240 2231 	movw	r2, #561	; 0x231
 801df46:	4922      	ldr	r1, [pc, #136]	; (801dfd0 <tcp_write+0x2f8>)
 801df48:	481c      	ldr	r0, [pc, #112]	; (801dfbc <tcp_write+0x2e4>)
 801df4a:	f007 fc2f 	bl	80257ac <iprintf>
          extendlen = seglen;
 801df4e:	8bfb      	ldrh	r3, [r7, #30]
 801df50:	87bb      	strh	r3, [r7, #60]	; 0x3c
 801df52:	e01a      	b.n	801df8a <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801df54:	8bfb      	ldrh	r3, [r7, #30]
 801df56:	2201      	movs	r2, #1
 801df58:	4619      	mov	r1, r3
 801df5a:	2000      	movs	r0, #0
 801df5c:	f7fa fdca 	bl	8018af4 <pbuf_alloc>
 801df60:	6578      	str	r0, [r7, #84]	; 0x54
 801df62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801df64:	2b00      	cmp	r3, #0
 801df66:	f000 81e0 	beq.w	801e32a <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801df6a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801df6e:	68ba      	ldr	r2, [r7, #8]
 801df70:	441a      	add	r2, r3
 801df72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801df74:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801df76:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801df78:	f7fb f92e 	bl	80191d8 <pbuf_clen>
 801df7c:	4603      	mov	r3, r0
 801df7e:	461a      	mov	r2, r3
 801df80:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801df84:	4413      	add	r3, r2
 801df86:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801df8a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801df8e:	8bfb      	ldrh	r3, [r7, #30]
 801df90:	4413      	add	r3, r2
 801df92:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801df96:	e0dc      	b.n	801e152 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801df98:	68fb      	ldr	r3, [r7, #12]
 801df9a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801df9e:	2b00      	cmp	r3, #0
 801dfa0:	f000 80d7 	beq.w	801e152 <tcp_write+0x47a>
 801dfa4:	4b03      	ldr	r3, [pc, #12]	; (801dfb4 <tcp_write+0x2dc>)
 801dfa6:	f240 224a 	movw	r2, #586	; 0x24a
 801dfaa:	490a      	ldr	r1, [pc, #40]	; (801dfd4 <tcp_write+0x2fc>)
 801dfac:	4803      	ldr	r0, [pc, #12]	; (801dfbc <tcp_write+0x2e4>)
 801dfae:	f007 fbfd 	bl	80257ac <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801dfb2:	e0ce      	b.n	801e152 <tcp_write+0x47a>
 801dfb4:	0802cb20 	.word	0x0802cb20
 801dfb8:	0802ccc0 	.word	0x0802ccc0
 801dfbc:	0802cb74 	.word	0x0802cb74
 801dfc0:	0802ccd8 	.word	0x0802ccd8
 801dfc4:	0802cd0c 	.word	0x0802cd0c
 801dfc8:	0802cd24 	.word	0x0802cd24
 801dfcc:	0802cd44 	.word	0x0802cd44
 801dfd0:	0802cd64 	.word	0x0802cd64
 801dfd4:	0802cd90 	.word	0x0802cd90
    struct pbuf *p;
    u16_t left = len - pos;
 801dfd8:	88fa      	ldrh	r2, [r7, #6]
 801dfda:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801dfde:	1ad3      	subs	r3, r2, r3
 801dfe0:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801dfe2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801dfe6:	b29b      	uxth	r3, r3
 801dfe8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801dfea:	1ad3      	subs	r3, r2, r3
 801dfec:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801dfee:	8b7a      	ldrh	r2, [r7, #26]
 801dff0:	8bbb      	ldrh	r3, [r7, #28]
 801dff2:	4293      	cmp	r3, r2
 801dff4:	bf28      	it	cs
 801dff6:	4613      	movcs	r3, r2
 801dff8:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801dffa:	797b      	ldrb	r3, [r7, #5]
 801dffc:	f003 0301 	and.w	r3, r3, #1
 801e000:	2b00      	cmp	r3, #0
 801e002:	d036      	beq.n	801e072 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801e004:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801e008:	b29a      	uxth	r2, r3
 801e00a:	8b3b      	ldrh	r3, [r7, #24]
 801e00c:	4413      	add	r3, r2
 801e00e:	b299      	uxth	r1, r3
 801e010:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801e012:	2b00      	cmp	r3, #0
 801e014:	bf0c      	ite	eq
 801e016:	2301      	moveq	r3, #1
 801e018:	2300      	movne	r3, #0
 801e01a:	b2db      	uxtb	r3, r3
 801e01c:	f107 0012 	add.w	r0, r7, #18
 801e020:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801e022:	9302      	str	r3, [sp, #8]
 801e024:	797b      	ldrb	r3, [r7, #5]
 801e026:	9301      	str	r3, [sp, #4]
 801e028:	68fb      	ldr	r3, [r7, #12]
 801e02a:	9300      	str	r3, [sp, #0]
 801e02c:	4603      	mov	r3, r0
 801e02e:	2036      	movs	r0, #54	; 0x36
 801e030:	f7ff fd5e 	bl	801daf0 <tcp_pbuf_prealloc>
 801e034:	6338      	str	r0, [r7, #48]	; 0x30
 801e036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e038:	2b00      	cmp	r3, #0
 801e03a:	f000 8178 	beq.w	801e32e <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801e03e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e040:	895b      	ldrh	r3, [r3, #10]
 801e042:	8b3a      	ldrh	r2, [r7, #24]
 801e044:	429a      	cmp	r2, r3
 801e046:	d906      	bls.n	801e056 <tcp_write+0x37e>
 801e048:	4b8c      	ldr	r3, [pc, #560]	; (801e27c <tcp_write+0x5a4>)
 801e04a:	f240 2266 	movw	r2, #614	; 0x266
 801e04e:	498c      	ldr	r1, [pc, #560]	; (801e280 <tcp_write+0x5a8>)
 801e050:	488c      	ldr	r0, [pc, #560]	; (801e284 <tcp_write+0x5ac>)
 801e052:	f007 fbab 	bl	80257ac <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801e056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e058:	685a      	ldr	r2, [r3, #4]
 801e05a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801e05e:	18d0      	adds	r0, r2, r3
 801e060:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801e064:	68ba      	ldr	r2, [r7, #8]
 801e066:	4413      	add	r3, r2
 801e068:	8b3a      	ldrh	r2, [r7, #24]
 801e06a:	4619      	mov	r1, r3
 801e06c:	f006 fcca 	bl	8024a04 <memcpy>
 801e070:	e02f      	b.n	801e0d2 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801e072:	8a7b      	ldrh	r3, [r7, #18]
 801e074:	2b00      	cmp	r3, #0
 801e076:	d006      	beq.n	801e086 <tcp_write+0x3ae>
 801e078:	4b80      	ldr	r3, [pc, #512]	; (801e27c <tcp_write+0x5a4>)
 801e07a:	f240 2271 	movw	r2, #625	; 0x271
 801e07e:	4982      	ldr	r1, [pc, #520]	; (801e288 <tcp_write+0x5b0>)
 801e080:	4880      	ldr	r0, [pc, #512]	; (801e284 <tcp_write+0x5ac>)
 801e082:	f007 fb93 	bl	80257ac <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801e086:	8b3b      	ldrh	r3, [r7, #24]
 801e088:	2201      	movs	r2, #1
 801e08a:	4619      	mov	r1, r3
 801e08c:	2036      	movs	r0, #54	; 0x36
 801e08e:	f7fa fd31 	bl	8018af4 <pbuf_alloc>
 801e092:	6178      	str	r0, [r7, #20]
 801e094:	697b      	ldr	r3, [r7, #20]
 801e096:	2b00      	cmp	r3, #0
 801e098:	f000 814b 	beq.w	801e332 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801e09c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801e0a0:	68ba      	ldr	r2, [r7, #8]
 801e0a2:	441a      	add	r2, r3
 801e0a4:	697b      	ldr	r3, [r7, #20]
 801e0a6:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801e0a8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801e0ac:	b29b      	uxth	r3, r3
 801e0ae:	f44f 7220 	mov.w	r2, #640	; 0x280
 801e0b2:	4619      	mov	r1, r3
 801e0b4:	2036      	movs	r0, #54	; 0x36
 801e0b6:	f7fa fd1d 	bl	8018af4 <pbuf_alloc>
 801e0ba:	6338      	str	r0, [r7, #48]	; 0x30
 801e0bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e0be:	2b00      	cmp	r3, #0
 801e0c0:	d103      	bne.n	801e0ca <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801e0c2:	6978      	ldr	r0, [r7, #20]
 801e0c4:	f7fa fffa 	bl	80190bc <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 801e0c8:	e136      	b.n	801e338 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801e0ca:	6979      	ldr	r1, [r7, #20]
 801e0cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801e0ce:	f7fb f8c3 	bl	8019258 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801e0d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801e0d4:	f7fb f880 	bl	80191d8 <pbuf_clen>
 801e0d8:	4603      	mov	r3, r0
 801e0da:	461a      	mov	r2, r3
 801e0dc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801e0e0:	4413      	add	r3, r2
 801e0e2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801e0e6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801e0ea:	2b09      	cmp	r3, #9
 801e0ec:	d903      	bls.n	801e0f6 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801e0ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801e0f0:	f7fa ffe4 	bl	80190bc <pbuf_free>
      goto memerr;
 801e0f4:	e120      	b.n	801e338 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801e0f6:	68fb      	ldr	r3, [r7, #12]
 801e0f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801e0fa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801e0fe:	441a      	add	r2, r3
 801e100:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801e104:	9300      	str	r3, [sp, #0]
 801e106:	4613      	mov	r3, r2
 801e108:	2200      	movs	r2, #0
 801e10a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801e10c:	68f8      	ldr	r0, [r7, #12]
 801e10e:	f7ff fc51 	bl	801d9b4 <tcp_create_segment>
 801e112:	64f8      	str	r0, [r7, #76]	; 0x4c
 801e114:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e116:	2b00      	cmp	r3, #0
 801e118:	f000 810d 	beq.w	801e336 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801e11c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801e11e:	2b00      	cmp	r3, #0
 801e120:	d102      	bne.n	801e128 <tcp_write+0x450>
      queue = seg;
 801e122:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e124:	647b      	str	r3, [r7, #68]	; 0x44
 801e126:	e00c      	b.n	801e142 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801e128:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801e12a:	2b00      	cmp	r3, #0
 801e12c:	d106      	bne.n	801e13c <tcp_write+0x464>
 801e12e:	4b53      	ldr	r3, [pc, #332]	; (801e27c <tcp_write+0x5a4>)
 801e130:	f240 22ab 	movw	r2, #683	; 0x2ab
 801e134:	4955      	ldr	r1, [pc, #340]	; (801e28c <tcp_write+0x5b4>)
 801e136:	4853      	ldr	r0, [pc, #332]	; (801e284 <tcp_write+0x5ac>)
 801e138:	f007 fb38 	bl	80257ac <iprintf>
      prev_seg->next = seg;
 801e13c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801e13e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801e140:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801e142:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e144:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801e146:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801e14a:	8b3b      	ldrh	r3, [r7, #24]
 801e14c:	4413      	add	r3, r2
 801e14e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 801e152:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801e156:	88fb      	ldrh	r3, [r7, #6]
 801e158:	429a      	cmp	r2, r3
 801e15a:	f4ff af3d 	bcc.w	801dfd8 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801e15e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801e160:	2b00      	cmp	r3, #0
 801e162:	d02c      	beq.n	801e1be <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 801e164:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e166:	685b      	ldr	r3, [r3, #4]
 801e168:	62fb      	str	r3, [r7, #44]	; 0x2c
 801e16a:	e01e      	b.n	801e1aa <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 801e16c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e16e:	891a      	ldrh	r2, [r3, #8]
 801e170:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801e172:	4413      	add	r3, r2
 801e174:	b29a      	uxth	r2, r3
 801e176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e178:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801e17a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e17c:	681b      	ldr	r3, [r3, #0]
 801e17e:	2b00      	cmp	r3, #0
 801e180:	d110      	bne.n	801e1a4 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801e182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e184:	685b      	ldr	r3, [r3, #4]
 801e186:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801e188:	8952      	ldrh	r2, [r2, #10]
 801e18a:	4413      	add	r3, r2
 801e18c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801e18e:	68b9      	ldr	r1, [r7, #8]
 801e190:	4618      	mov	r0, r3
 801e192:	f006 fc37 	bl	8024a04 <memcpy>
        p->len += oversize_used;
 801e196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e198:	895a      	ldrh	r2, [r3, #10]
 801e19a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801e19c:	4413      	add	r3, r2
 801e19e:	b29a      	uxth	r2, r3
 801e1a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e1a2:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801e1a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e1a6:	681b      	ldr	r3, [r3, #0]
 801e1a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 801e1aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e1ac:	2b00      	cmp	r3, #0
 801e1ae:	d1dd      	bne.n	801e16c <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 801e1b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e1b2:	891a      	ldrh	r2, [r3, #8]
 801e1b4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801e1b6:	4413      	add	r3, r2
 801e1b8:	b29a      	uxth	r2, r3
 801e1ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e1bc:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801e1be:	8a7a      	ldrh	r2, [r7, #18]
 801e1c0:	68fb      	ldr	r3, [r7, #12]
 801e1c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801e1c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e1c8:	2b00      	cmp	r3, #0
 801e1ca:	d018      	beq.n	801e1fe <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801e1cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e1ce:	2b00      	cmp	r3, #0
 801e1d0:	d106      	bne.n	801e1e0 <tcp_write+0x508>
 801e1d2:	4b2a      	ldr	r3, [pc, #168]	; (801e27c <tcp_write+0x5a4>)
 801e1d4:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 801e1d8:	492d      	ldr	r1, [pc, #180]	; (801e290 <tcp_write+0x5b8>)
 801e1da:	482a      	ldr	r0, [pc, #168]	; (801e284 <tcp_write+0x5ac>)
 801e1dc:	f007 fae6 	bl	80257ac <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 801e1e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e1e2:	685b      	ldr	r3, [r3, #4]
 801e1e4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801e1e6:	4618      	mov	r0, r3
 801e1e8:	f7fb f836 	bl	8019258 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801e1ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e1ee:	891a      	ldrh	r2, [r3, #8]
 801e1f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e1f2:	891b      	ldrh	r3, [r3, #8]
 801e1f4:	4413      	add	r3, r2
 801e1f6:	b29a      	uxth	r2, r3
 801e1f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e1fa:	811a      	strh	r2, [r3, #8]
 801e1fc:	e037      	b.n	801e26e <tcp_write+0x596>
  } else if (extendlen > 0) {
 801e1fe:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801e200:	2b00      	cmp	r3, #0
 801e202:	d034      	beq.n	801e26e <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801e204:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e206:	2b00      	cmp	r3, #0
 801e208:	d003      	beq.n	801e212 <tcp_write+0x53a>
 801e20a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e20c:	685b      	ldr	r3, [r3, #4]
 801e20e:	2b00      	cmp	r3, #0
 801e210:	d106      	bne.n	801e220 <tcp_write+0x548>
 801e212:	4b1a      	ldr	r3, [pc, #104]	; (801e27c <tcp_write+0x5a4>)
 801e214:	f240 22e6 	movw	r2, #742	; 0x2e6
 801e218:	491e      	ldr	r1, [pc, #120]	; (801e294 <tcp_write+0x5bc>)
 801e21a:	481a      	ldr	r0, [pc, #104]	; (801e284 <tcp_write+0x5ac>)
 801e21c:	f007 fac6 	bl	80257ac <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801e220:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e222:	685b      	ldr	r3, [r3, #4]
 801e224:	62bb      	str	r3, [r7, #40]	; 0x28
 801e226:	e009      	b.n	801e23c <tcp_write+0x564>
      p->tot_len += extendlen;
 801e228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e22a:	891a      	ldrh	r2, [r3, #8]
 801e22c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801e22e:	4413      	add	r3, r2
 801e230:	b29a      	uxth	r2, r3
 801e232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e234:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801e236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e238:	681b      	ldr	r3, [r3, #0]
 801e23a:	62bb      	str	r3, [r7, #40]	; 0x28
 801e23c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e23e:	681b      	ldr	r3, [r3, #0]
 801e240:	2b00      	cmp	r3, #0
 801e242:	d1f1      	bne.n	801e228 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 801e244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e246:	891a      	ldrh	r2, [r3, #8]
 801e248:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801e24a:	4413      	add	r3, r2
 801e24c:	b29a      	uxth	r2, r3
 801e24e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e250:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801e252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e254:	895a      	ldrh	r2, [r3, #10]
 801e256:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801e258:	4413      	add	r3, r2
 801e25a:	b29a      	uxth	r2, r3
 801e25c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e25e:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 801e260:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e262:	891a      	ldrh	r2, [r3, #8]
 801e264:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801e266:	4413      	add	r3, r2
 801e268:	b29a      	uxth	r2, r3
 801e26a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e26c:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801e26e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e270:	2b00      	cmp	r3, #0
 801e272:	d111      	bne.n	801e298 <tcp_write+0x5c0>
    pcb->unsent = queue;
 801e274:	68fb      	ldr	r3, [r7, #12]
 801e276:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801e278:	66da      	str	r2, [r3, #108]	; 0x6c
 801e27a:	e010      	b.n	801e29e <tcp_write+0x5c6>
 801e27c:	0802cb20 	.word	0x0802cb20
 801e280:	0802cdc0 	.word	0x0802cdc0
 801e284:	0802cb74 	.word	0x0802cb74
 801e288:	0802ce00 	.word	0x0802ce00
 801e28c:	0802ce10 	.word	0x0802ce10
 801e290:	0802ce24 	.word	0x0802ce24
 801e294:	0802ce5c 	.word	0x0802ce5c
  } else {
    last_unsent->next = queue;
 801e298:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e29a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801e29c:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801e29e:	68fb      	ldr	r3, [r7, #12]
 801e2a0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801e2a2:	88fb      	ldrh	r3, [r7, #6]
 801e2a4:	441a      	add	r2, r3
 801e2a6:	68fb      	ldr	r3, [r7, #12]
 801e2a8:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 801e2aa:	68fb      	ldr	r3, [r7, #12]
 801e2ac:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801e2b0:	88fb      	ldrh	r3, [r7, #6]
 801e2b2:	1ad3      	subs	r3, r2, r3
 801e2b4:	b29a      	uxth	r2, r3
 801e2b6:	68fb      	ldr	r3, [r7, #12]
 801e2b8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 801e2bc:	68fb      	ldr	r3, [r7, #12]
 801e2be:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801e2c2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801e2c6:	68fb      	ldr	r3, [r7, #12]
 801e2c8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801e2cc:	2b00      	cmp	r3, #0
 801e2ce:	d00e      	beq.n	801e2ee <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 801e2d0:	68fb      	ldr	r3, [r7, #12]
 801e2d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801e2d4:	2b00      	cmp	r3, #0
 801e2d6:	d10a      	bne.n	801e2ee <tcp_write+0x616>
 801e2d8:	68fb      	ldr	r3, [r7, #12]
 801e2da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e2dc:	2b00      	cmp	r3, #0
 801e2de:	d106      	bne.n	801e2ee <tcp_write+0x616>
 801e2e0:	4b2c      	ldr	r3, [pc, #176]	; (801e394 <tcp_write+0x6bc>)
 801e2e2:	f240 3212 	movw	r2, #786	; 0x312
 801e2e6:	492c      	ldr	r1, [pc, #176]	; (801e398 <tcp_write+0x6c0>)
 801e2e8:	482c      	ldr	r0, [pc, #176]	; (801e39c <tcp_write+0x6c4>)
 801e2ea:	f007 fa5f 	bl	80257ac <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801e2ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e2f0:	2b00      	cmp	r3, #0
 801e2f2:	d016      	beq.n	801e322 <tcp_write+0x64a>
 801e2f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e2f6:	68db      	ldr	r3, [r3, #12]
 801e2f8:	2b00      	cmp	r3, #0
 801e2fa:	d012      	beq.n	801e322 <tcp_write+0x64a>
 801e2fc:	797b      	ldrb	r3, [r7, #5]
 801e2fe:	f003 0302 	and.w	r3, r3, #2
 801e302:	2b00      	cmp	r3, #0
 801e304:	d10d      	bne.n	801e322 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801e306:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e308:	68db      	ldr	r3, [r3, #12]
 801e30a:	899b      	ldrh	r3, [r3, #12]
 801e30c:	b29c      	uxth	r4, r3
 801e30e:	2008      	movs	r0, #8
 801e310:	f7f9 faf4 	bl	80178fc <lwip_htons>
 801e314:	4603      	mov	r3, r0
 801e316:	461a      	mov	r2, r3
 801e318:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e31a:	68db      	ldr	r3, [r3, #12]
 801e31c:	4322      	orrs	r2, r4
 801e31e:	b292      	uxth	r2, r2
 801e320:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801e322:	2300      	movs	r3, #0
 801e324:	e031      	b.n	801e38a <tcp_write+0x6b2>
          goto memerr;
 801e326:	bf00      	nop
 801e328:	e006      	b.n	801e338 <tcp_write+0x660>
            goto memerr;
 801e32a:	bf00      	nop
 801e32c:	e004      	b.n	801e338 <tcp_write+0x660>
        goto memerr;
 801e32e:	bf00      	nop
 801e330:	e002      	b.n	801e338 <tcp_write+0x660>
        goto memerr;
 801e332:	bf00      	nop
 801e334:	e000      	b.n	801e338 <tcp_write+0x660>
      goto memerr;
 801e336:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801e338:	68fb      	ldr	r3, [r7, #12]
 801e33a:	8b5b      	ldrh	r3, [r3, #26]
 801e33c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e340:	b29a      	uxth	r2, r3
 801e342:	68fb      	ldr	r3, [r7, #12]
 801e344:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801e346:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e348:	2b00      	cmp	r3, #0
 801e34a:	d002      	beq.n	801e352 <tcp_write+0x67a>
    pbuf_free(concat_p);
 801e34c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801e34e:	f7fa feb5 	bl	80190bc <pbuf_free>
  }
  if (queue != NULL) {
 801e352:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801e354:	2b00      	cmp	r3, #0
 801e356:	d002      	beq.n	801e35e <tcp_write+0x686>
    tcp_segs_free(queue);
 801e358:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801e35a:	f7fc fb83 	bl	801aa64 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801e35e:	68fb      	ldr	r3, [r7, #12]
 801e360:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801e364:	2b00      	cmp	r3, #0
 801e366:	d00e      	beq.n	801e386 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801e368:	68fb      	ldr	r3, [r7, #12]
 801e36a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801e36c:	2b00      	cmp	r3, #0
 801e36e:	d10a      	bne.n	801e386 <tcp_write+0x6ae>
 801e370:	68fb      	ldr	r3, [r7, #12]
 801e372:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e374:	2b00      	cmp	r3, #0
 801e376:	d106      	bne.n	801e386 <tcp_write+0x6ae>
 801e378:	4b06      	ldr	r3, [pc, #24]	; (801e394 <tcp_write+0x6bc>)
 801e37a:	f240 3227 	movw	r2, #807	; 0x327
 801e37e:	4906      	ldr	r1, [pc, #24]	; (801e398 <tcp_write+0x6c0>)
 801e380:	4806      	ldr	r0, [pc, #24]	; (801e39c <tcp_write+0x6c4>)
 801e382:	f007 fa13 	bl	80257ac <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801e386:	f04f 33ff 	mov.w	r3, #4294967295
}
 801e38a:	4618      	mov	r0, r3
 801e38c:	375c      	adds	r7, #92	; 0x5c
 801e38e:	46bd      	mov	sp, r7
 801e390:	bd90      	pop	{r4, r7, pc}
 801e392:	bf00      	nop
 801e394:	0802cb20 	.word	0x0802cb20
 801e398:	0802ce94 	.word	0x0802ce94
 801e39c:	0802cb74 	.word	0x0802cb74

0801e3a0 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801e3a0:	b590      	push	{r4, r7, lr}
 801e3a2:	b08b      	sub	sp, #44	; 0x2c
 801e3a4:	af02      	add	r7, sp, #8
 801e3a6:	6078      	str	r0, [r7, #4]
 801e3a8:	460b      	mov	r3, r1
 801e3aa:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801e3ac:	2300      	movs	r3, #0
 801e3ae:	61fb      	str	r3, [r7, #28]
 801e3b0:	2300      	movs	r3, #0
 801e3b2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801e3b4:	2300      	movs	r3, #0
 801e3b6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801e3b8:	687b      	ldr	r3, [r7, #4]
 801e3ba:	2b00      	cmp	r3, #0
 801e3bc:	d106      	bne.n	801e3cc <tcp_split_unsent_seg+0x2c>
 801e3be:	4b95      	ldr	r3, [pc, #596]	; (801e614 <tcp_split_unsent_seg+0x274>)
 801e3c0:	f240 324b 	movw	r2, #843	; 0x34b
 801e3c4:	4994      	ldr	r1, [pc, #592]	; (801e618 <tcp_split_unsent_seg+0x278>)
 801e3c6:	4895      	ldr	r0, [pc, #596]	; (801e61c <tcp_split_unsent_seg+0x27c>)
 801e3c8:	f007 f9f0 	bl	80257ac <iprintf>

  useg = pcb->unsent;
 801e3cc:	687b      	ldr	r3, [r7, #4]
 801e3ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e3d0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801e3d2:	697b      	ldr	r3, [r7, #20]
 801e3d4:	2b00      	cmp	r3, #0
 801e3d6:	d102      	bne.n	801e3de <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801e3d8:	f04f 33ff 	mov.w	r3, #4294967295
 801e3dc:	e116      	b.n	801e60c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801e3de:	887b      	ldrh	r3, [r7, #2]
 801e3e0:	2b00      	cmp	r3, #0
 801e3e2:	d109      	bne.n	801e3f8 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801e3e4:	4b8b      	ldr	r3, [pc, #556]	; (801e614 <tcp_split_unsent_seg+0x274>)
 801e3e6:	f240 3253 	movw	r2, #851	; 0x353
 801e3ea:	498d      	ldr	r1, [pc, #564]	; (801e620 <tcp_split_unsent_seg+0x280>)
 801e3ec:	488b      	ldr	r0, [pc, #556]	; (801e61c <tcp_split_unsent_seg+0x27c>)
 801e3ee:	f007 f9dd 	bl	80257ac <iprintf>
    return ERR_VAL;
 801e3f2:	f06f 0305 	mvn.w	r3, #5
 801e3f6:	e109      	b.n	801e60c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 801e3f8:	697b      	ldr	r3, [r7, #20]
 801e3fa:	891b      	ldrh	r3, [r3, #8]
 801e3fc:	887a      	ldrh	r2, [r7, #2]
 801e3fe:	429a      	cmp	r2, r3
 801e400:	d301      	bcc.n	801e406 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801e402:	2300      	movs	r3, #0
 801e404:	e102      	b.n	801e60c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801e406:	687b      	ldr	r3, [r7, #4]
 801e408:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801e40a:	887a      	ldrh	r2, [r7, #2]
 801e40c:	429a      	cmp	r2, r3
 801e40e:	d906      	bls.n	801e41e <tcp_split_unsent_seg+0x7e>
 801e410:	4b80      	ldr	r3, [pc, #512]	; (801e614 <tcp_split_unsent_seg+0x274>)
 801e412:	f240 325b 	movw	r2, #859	; 0x35b
 801e416:	4983      	ldr	r1, [pc, #524]	; (801e624 <tcp_split_unsent_seg+0x284>)
 801e418:	4880      	ldr	r0, [pc, #512]	; (801e61c <tcp_split_unsent_seg+0x27c>)
 801e41a:	f007 f9c7 	bl	80257ac <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801e41e:	697b      	ldr	r3, [r7, #20]
 801e420:	891b      	ldrh	r3, [r3, #8]
 801e422:	2b00      	cmp	r3, #0
 801e424:	d106      	bne.n	801e434 <tcp_split_unsent_seg+0x94>
 801e426:	4b7b      	ldr	r3, [pc, #492]	; (801e614 <tcp_split_unsent_seg+0x274>)
 801e428:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801e42c:	497e      	ldr	r1, [pc, #504]	; (801e628 <tcp_split_unsent_seg+0x288>)
 801e42e:	487b      	ldr	r0, [pc, #492]	; (801e61c <tcp_split_unsent_seg+0x27c>)
 801e430:	f007 f9bc 	bl	80257ac <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801e434:	697b      	ldr	r3, [r7, #20]
 801e436:	7a9b      	ldrb	r3, [r3, #10]
 801e438:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801e43a:	7bfb      	ldrb	r3, [r7, #15]
 801e43c:	009b      	lsls	r3, r3, #2
 801e43e:	b2db      	uxtb	r3, r3
 801e440:	f003 0304 	and.w	r3, r3, #4
 801e444:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801e446:	697b      	ldr	r3, [r7, #20]
 801e448:	891a      	ldrh	r2, [r3, #8]
 801e44a:	887b      	ldrh	r3, [r7, #2]
 801e44c:	1ad3      	subs	r3, r2, r3
 801e44e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801e450:	7bbb      	ldrb	r3, [r7, #14]
 801e452:	b29a      	uxth	r2, r3
 801e454:	89bb      	ldrh	r3, [r7, #12]
 801e456:	4413      	add	r3, r2
 801e458:	b29b      	uxth	r3, r3
 801e45a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801e45e:	4619      	mov	r1, r3
 801e460:	2036      	movs	r0, #54	; 0x36
 801e462:	f7fa fb47 	bl	8018af4 <pbuf_alloc>
 801e466:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801e468:	693b      	ldr	r3, [r7, #16]
 801e46a:	2b00      	cmp	r3, #0
 801e46c:	f000 80b7 	beq.w	801e5de <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801e470:	697b      	ldr	r3, [r7, #20]
 801e472:	685b      	ldr	r3, [r3, #4]
 801e474:	891a      	ldrh	r2, [r3, #8]
 801e476:	697b      	ldr	r3, [r7, #20]
 801e478:	891b      	ldrh	r3, [r3, #8]
 801e47a:	1ad3      	subs	r3, r2, r3
 801e47c:	b29a      	uxth	r2, r3
 801e47e:	887b      	ldrh	r3, [r7, #2]
 801e480:	4413      	add	r3, r2
 801e482:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801e484:	697b      	ldr	r3, [r7, #20]
 801e486:	6858      	ldr	r0, [r3, #4]
 801e488:	693b      	ldr	r3, [r7, #16]
 801e48a:	685a      	ldr	r2, [r3, #4]
 801e48c:	7bbb      	ldrb	r3, [r7, #14]
 801e48e:	18d1      	adds	r1, r2, r3
 801e490:	897b      	ldrh	r3, [r7, #10]
 801e492:	89ba      	ldrh	r2, [r7, #12]
 801e494:	f7fb f818 	bl	80194c8 <pbuf_copy_partial>
 801e498:	4603      	mov	r3, r0
 801e49a:	461a      	mov	r2, r3
 801e49c:	89bb      	ldrh	r3, [r7, #12]
 801e49e:	4293      	cmp	r3, r2
 801e4a0:	f040 809f 	bne.w	801e5e2 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801e4a4:	697b      	ldr	r3, [r7, #20]
 801e4a6:	68db      	ldr	r3, [r3, #12]
 801e4a8:	899b      	ldrh	r3, [r3, #12]
 801e4aa:	b29b      	uxth	r3, r3
 801e4ac:	4618      	mov	r0, r3
 801e4ae:	f7f9 fa25 	bl	80178fc <lwip_htons>
 801e4b2:	4603      	mov	r3, r0
 801e4b4:	b2db      	uxtb	r3, r3
 801e4b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801e4ba:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801e4bc:	2300      	movs	r3, #0
 801e4be:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 801e4c0:	7efb      	ldrb	r3, [r7, #27]
 801e4c2:	f003 0308 	and.w	r3, r3, #8
 801e4c6:	2b00      	cmp	r3, #0
 801e4c8:	d007      	beq.n	801e4da <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801e4ca:	7efb      	ldrb	r3, [r7, #27]
 801e4cc:	f023 0308 	bic.w	r3, r3, #8
 801e4d0:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801e4d2:	7ebb      	ldrb	r3, [r7, #26]
 801e4d4:	f043 0308 	orr.w	r3, r3, #8
 801e4d8:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801e4da:	7efb      	ldrb	r3, [r7, #27]
 801e4dc:	f003 0301 	and.w	r3, r3, #1
 801e4e0:	2b00      	cmp	r3, #0
 801e4e2:	d007      	beq.n	801e4f4 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801e4e4:	7efb      	ldrb	r3, [r7, #27]
 801e4e6:	f023 0301 	bic.w	r3, r3, #1
 801e4ea:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801e4ec:	7ebb      	ldrb	r3, [r7, #26]
 801e4ee:	f043 0301 	orr.w	r3, r3, #1
 801e4f2:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801e4f4:	697b      	ldr	r3, [r7, #20]
 801e4f6:	68db      	ldr	r3, [r3, #12]
 801e4f8:	685b      	ldr	r3, [r3, #4]
 801e4fa:	4618      	mov	r0, r3
 801e4fc:	f7f9 fa13 	bl	8017926 <lwip_htonl>
 801e500:	4602      	mov	r2, r0
 801e502:	887b      	ldrh	r3, [r7, #2]
 801e504:	18d1      	adds	r1, r2, r3
 801e506:	7eba      	ldrb	r2, [r7, #26]
 801e508:	7bfb      	ldrb	r3, [r7, #15]
 801e50a:	9300      	str	r3, [sp, #0]
 801e50c:	460b      	mov	r3, r1
 801e50e:	6939      	ldr	r1, [r7, #16]
 801e510:	6878      	ldr	r0, [r7, #4]
 801e512:	f7ff fa4f 	bl	801d9b4 <tcp_create_segment>
 801e516:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 801e518:	69fb      	ldr	r3, [r7, #28]
 801e51a:	2b00      	cmp	r3, #0
 801e51c:	d063      	beq.n	801e5e6 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801e51e:	697b      	ldr	r3, [r7, #20]
 801e520:	685b      	ldr	r3, [r3, #4]
 801e522:	4618      	mov	r0, r3
 801e524:	f7fa fe58 	bl	80191d8 <pbuf_clen>
 801e528:	4603      	mov	r3, r0
 801e52a:	461a      	mov	r2, r3
 801e52c:	687b      	ldr	r3, [r7, #4]
 801e52e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801e532:	1a9b      	subs	r3, r3, r2
 801e534:	b29a      	uxth	r2, r3
 801e536:	687b      	ldr	r3, [r7, #4]
 801e538:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801e53c:	697b      	ldr	r3, [r7, #20]
 801e53e:	6858      	ldr	r0, [r3, #4]
 801e540:	697b      	ldr	r3, [r7, #20]
 801e542:	685b      	ldr	r3, [r3, #4]
 801e544:	891a      	ldrh	r2, [r3, #8]
 801e546:	89bb      	ldrh	r3, [r7, #12]
 801e548:	1ad3      	subs	r3, r2, r3
 801e54a:	b29b      	uxth	r3, r3
 801e54c:	4619      	mov	r1, r3
 801e54e:	f7fa fc2f 	bl	8018db0 <pbuf_realloc>
  useg->len -= remainder;
 801e552:	697b      	ldr	r3, [r7, #20]
 801e554:	891a      	ldrh	r2, [r3, #8]
 801e556:	89bb      	ldrh	r3, [r7, #12]
 801e558:	1ad3      	subs	r3, r2, r3
 801e55a:	b29a      	uxth	r2, r3
 801e55c:	697b      	ldr	r3, [r7, #20]
 801e55e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801e560:	697b      	ldr	r3, [r7, #20]
 801e562:	68db      	ldr	r3, [r3, #12]
 801e564:	899b      	ldrh	r3, [r3, #12]
 801e566:	b29c      	uxth	r4, r3
 801e568:	7efb      	ldrb	r3, [r7, #27]
 801e56a:	b29b      	uxth	r3, r3
 801e56c:	4618      	mov	r0, r3
 801e56e:	f7f9 f9c5 	bl	80178fc <lwip_htons>
 801e572:	4603      	mov	r3, r0
 801e574:	461a      	mov	r2, r3
 801e576:	697b      	ldr	r3, [r7, #20]
 801e578:	68db      	ldr	r3, [r3, #12]
 801e57a:	4322      	orrs	r2, r4
 801e57c:	b292      	uxth	r2, r2
 801e57e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801e580:	697b      	ldr	r3, [r7, #20]
 801e582:	685b      	ldr	r3, [r3, #4]
 801e584:	4618      	mov	r0, r3
 801e586:	f7fa fe27 	bl	80191d8 <pbuf_clen>
 801e58a:	4603      	mov	r3, r0
 801e58c:	461a      	mov	r2, r3
 801e58e:	687b      	ldr	r3, [r7, #4]
 801e590:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801e594:	4413      	add	r3, r2
 801e596:	b29a      	uxth	r2, r3
 801e598:	687b      	ldr	r3, [r7, #4]
 801e59a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801e59e:	69fb      	ldr	r3, [r7, #28]
 801e5a0:	685b      	ldr	r3, [r3, #4]
 801e5a2:	4618      	mov	r0, r3
 801e5a4:	f7fa fe18 	bl	80191d8 <pbuf_clen>
 801e5a8:	4603      	mov	r3, r0
 801e5aa:	461a      	mov	r2, r3
 801e5ac:	687b      	ldr	r3, [r7, #4]
 801e5ae:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801e5b2:	4413      	add	r3, r2
 801e5b4:	b29a      	uxth	r2, r3
 801e5b6:	687b      	ldr	r3, [r7, #4]
 801e5b8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801e5bc:	697b      	ldr	r3, [r7, #20]
 801e5be:	681a      	ldr	r2, [r3, #0]
 801e5c0:	69fb      	ldr	r3, [r7, #28]
 801e5c2:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801e5c4:	697b      	ldr	r3, [r7, #20]
 801e5c6:	69fa      	ldr	r2, [r7, #28]
 801e5c8:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801e5ca:	69fb      	ldr	r3, [r7, #28]
 801e5cc:	681b      	ldr	r3, [r3, #0]
 801e5ce:	2b00      	cmp	r3, #0
 801e5d0:	d103      	bne.n	801e5da <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801e5d2:	687b      	ldr	r3, [r7, #4]
 801e5d4:	2200      	movs	r2, #0
 801e5d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801e5da:	2300      	movs	r3, #0
 801e5dc:	e016      	b.n	801e60c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801e5de:	bf00      	nop
 801e5e0:	e002      	b.n	801e5e8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801e5e2:	bf00      	nop
 801e5e4:	e000      	b.n	801e5e8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801e5e6:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801e5e8:	69fb      	ldr	r3, [r7, #28]
 801e5ea:	2b00      	cmp	r3, #0
 801e5ec:	d006      	beq.n	801e5fc <tcp_split_unsent_seg+0x25c>
 801e5ee:	4b09      	ldr	r3, [pc, #36]	; (801e614 <tcp_split_unsent_seg+0x274>)
 801e5f0:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 801e5f4:	490d      	ldr	r1, [pc, #52]	; (801e62c <tcp_split_unsent_seg+0x28c>)
 801e5f6:	4809      	ldr	r0, [pc, #36]	; (801e61c <tcp_split_unsent_seg+0x27c>)
 801e5f8:	f007 f8d8 	bl	80257ac <iprintf>
  if (p != NULL) {
 801e5fc:	693b      	ldr	r3, [r7, #16]
 801e5fe:	2b00      	cmp	r3, #0
 801e600:	d002      	beq.n	801e608 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801e602:	6938      	ldr	r0, [r7, #16]
 801e604:	f7fa fd5a 	bl	80190bc <pbuf_free>
  }

  return ERR_MEM;
 801e608:	f04f 33ff 	mov.w	r3, #4294967295
}
 801e60c:	4618      	mov	r0, r3
 801e60e:	3724      	adds	r7, #36	; 0x24
 801e610:	46bd      	mov	sp, r7
 801e612:	bd90      	pop	{r4, r7, pc}
 801e614:	0802cb20 	.word	0x0802cb20
 801e618:	0802ceb4 	.word	0x0802ceb4
 801e61c:	0802cb74 	.word	0x0802cb74
 801e620:	0802ced8 	.word	0x0802ced8
 801e624:	0802cefc 	.word	0x0802cefc
 801e628:	0802cf0c 	.word	0x0802cf0c
 801e62c:	0802cf1c 	.word	0x0802cf1c

0801e630 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801e630:	b590      	push	{r4, r7, lr}
 801e632:	b085      	sub	sp, #20
 801e634:	af00      	add	r7, sp, #0
 801e636:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801e638:	687b      	ldr	r3, [r7, #4]
 801e63a:	2b00      	cmp	r3, #0
 801e63c:	d106      	bne.n	801e64c <tcp_send_fin+0x1c>
 801e63e:	4b21      	ldr	r3, [pc, #132]	; (801e6c4 <tcp_send_fin+0x94>)
 801e640:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801e644:	4920      	ldr	r1, [pc, #128]	; (801e6c8 <tcp_send_fin+0x98>)
 801e646:	4821      	ldr	r0, [pc, #132]	; (801e6cc <tcp_send_fin+0x9c>)
 801e648:	f007 f8b0 	bl	80257ac <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801e64c:	687b      	ldr	r3, [r7, #4]
 801e64e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e650:	2b00      	cmp	r3, #0
 801e652:	d02e      	beq.n	801e6b2 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801e654:	687b      	ldr	r3, [r7, #4]
 801e656:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e658:	60fb      	str	r3, [r7, #12]
 801e65a:	e002      	b.n	801e662 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801e65c:	68fb      	ldr	r3, [r7, #12]
 801e65e:	681b      	ldr	r3, [r3, #0]
 801e660:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801e662:	68fb      	ldr	r3, [r7, #12]
 801e664:	681b      	ldr	r3, [r3, #0]
 801e666:	2b00      	cmp	r3, #0
 801e668:	d1f8      	bne.n	801e65c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801e66a:	68fb      	ldr	r3, [r7, #12]
 801e66c:	68db      	ldr	r3, [r3, #12]
 801e66e:	899b      	ldrh	r3, [r3, #12]
 801e670:	b29b      	uxth	r3, r3
 801e672:	4618      	mov	r0, r3
 801e674:	f7f9 f942 	bl	80178fc <lwip_htons>
 801e678:	4603      	mov	r3, r0
 801e67a:	b2db      	uxtb	r3, r3
 801e67c:	f003 0307 	and.w	r3, r3, #7
 801e680:	2b00      	cmp	r3, #0
 801e682:	d116      	bne.n	801e6b2 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801e684:	68fb      	ldr	r3, [r7, #12]
 801e686:	68db      	ldr	r3, [r3, #12]
 801e688:	899b      	ldrh	r3, [r3, #12]
 801e68a:	b29c      	uxth	r4, r3
 801e68c:	2001      	movs	r0, #1
 801e68e:	f7f9 f935 	bl	80178fc <lwip_htons>
 801e692:	4603      	mov	r3, r0
 801e694:	461a      	mov	r2, r3
 801e696:	68fb      	ldr	r3, [r7, #12]
 801e698:	68db      	ldr	r3, [r3, #12]
 801e69a:	4322      	orrs	r2, r4
 801e69c:	b292      	uxth	r2, r2
 801e69e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801e6a0:	687b      	ldr	r3, [r7, #4]
 801e6a2:	8b5b      	ldrh	r3, [r3, #26]
 801e6a4:	f043 0320 	orr.w	r3, r3, #32
 801e6a8:	b29a      	uxth	r2, r3
 801e6aa:	687b      	ldr	r3, [r7, #4]
 801e6ac:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801e6ae:	2300      	movs	r3, #0
 801e6b0:	e004      	b.n	801e6bc <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801e6b2:	2101      	movs	r1, #1
 801e6b4:	6878      	ldr	r0, [r7, #4]
 801e6b6:	f000 f80b 	bl	801e6d0 <tcp_enqueue_flags>
 801e6ba:	4603      	mov	r3, r0
}
 801e6bc:	4618      	mov	r0, r3
 801e6be:	3714      	adds	r7, #20
 801e6c0:	46bd      	mov	sp, r7
 801e6c2:	bd90      	pop	{r4, r7, pc}
 801e6c4:	0802cb20 	.word	0x0802cb20
 801e6c8:	0802cf28 	.word	0x0802cf28
 801e6cc:	0802cb74 	.word	0x0802cb74

0801e6d0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801e6d0:	b580      	push	{r7, lr}
 801e6d2:	b08a      	sub	sp, #40	; 0x28
 801e6d4:	af02      	add	r7, sp, #8
 801e6d6:	6078      	str	r0, [r7, #4]
 801e6d8:	460b      	mov	r3, r1
 801e6da:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801e6dc:	2300      	movs	r3, #0
 801e6de:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801e6e0:	2300      	movs	r3, #0
 801e6e2:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801e6e4:	78fb      	ldrb	r3, [r7, #3]
 801e6e6:	f003 0303 	and.w	r3, r3, #3
 801e6ea:	2b00      	cmp	r3, #0
 801e6ec:	d106      	bne.n	801e6fc <tcp_enqueue_flags+0x2c>
 801e6ee:	4b67      	ldr	r3, [pc, #412]	; (801e88c <tcp_enqueue_flags+0x1bc>)
 801e6f0:	f240 4211 	movw	r2, #1041	; 0x411
 801e6f4:	4966      	ldr	r1, [pc, #408]	; (801e890 <tcp_enqueue_flags+0x1c0>)
 801e6f6:	4867      	ldr	r0, [pc, #412]	; (801e894 <tcp_enqueue_flags+0x1c4>)
 801e6f8:	f007 f858 	bl	80257ac <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801e6fc:	687b      	ldr	r3, [r7, #4]
 801e6fe:	2b00      	cmp	r3, #0
 801e700:	d106      	bne.n	801e710 <tcp_enqueue_flags+0x40>
 801e702:	4b62      	ldr	r3, [pc, #392]	; (801e88c <tcp_enqueue_flags+0x1bc>)
 801e704:	f240 4213 	movw	r2, #1043	; 0x413
 801e708:	4963      	ldr	r1, [pc, #396]	; (801e898 <tcp_enqueue_flags+0x1c8>)
 801e70a:	4862      	ldr	r0, [pc, #392]	; (801e894 <tcp_enqueue_flags+0x1c4>)
 801e70c:	f007 f84e 	bl	80257ac <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801e710:	78fb      	ldrb	r3, [r7, #3]
 801e712:	f003 0302 	and.w	r3, r3, #2
 801e716:	2b00      	cmp	r3, #0
 801e718:	d001      	beq.n	801e71e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801e71a:	2301      	movs	r3, #1
 801e71c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801e71e:	7ffb      	ldrb	r3, [r7, #31]
 801e720:	009b      	lsls	r3, r3, #2
 801e722:	b2db      	uxtb	r3, r3
 801e724:	f003 0304 	and.w	r3, r3, #4
 801e728:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801e72a:	7dfb      	ldrb	r3, [r7, #23]
 801e72c:	b29b      	uxth	r3, r3
 801e72e:	f44f 7220 	mov.w	r2, #640	; 0x280
 801e732:	4619      	mov	r1, r3
 801e734:	2036      	movs	r0, #54	; 0x36
 801e736:	f7fa f9dd 	bl	8018af4 <pbuf_alloc>
 801e73a:	6138      	str	r0, [r7, #16]
 801e73c:	693b      	ldr	r3, [r7, #16]
 801e73e:	2b00      	cmp	r3, #0
 801e740:	d109      	bne.n	801e756 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801e742:	687b      	ldr	r3, [r7, #4]
 801e744:	8b5b      	ldrh	r3, [r3, #26]
 801e746:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e74a:	b29a      	uxth	r2, r3
 801e74c:	687b      	ldr	r3, [r7, #4]
 801e74e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801e750:	f04f 33ff 	mov.w	r3, #4294967295
 801e754:	e095      	b.n	801e882 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801e756:	693b      	ldr	r3, [r7, #16]
 801e758:	895a      	ldrh	r2, [r3, #10]
 801e75a:	7dfb      	ldrb	r3, [r7, #23]
 801e75c:	b29b      	uxth	r3, r3
 801e75e:	429a      	cmp	r2, r3
 801e760:	d206      	bcs.n	801e770 <tcp_enqueue_flags+0xa0>
 801e762:	4b4a      	ldr	r3, [pc, #296]	; (801e88c <tcp_enqueue_flags+0x1bc>)
 801e764:	f240 4239 	movw	r2, #1081	; 0x439
 801e768:	494c      	ldr	r1, [pc, #304]	; (801e89c <tcp_enqueue_flags+0x1cc>)
 801e76a:	484a      	ldr	r0, [pc, #296]	; (801e894 <tcp_enqueue_flags+0x1c4>)
 801e76c:	f007 f81e 	bl	80257ac <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801e770:	687b      	ldr	r3, [r7, #4]
 801e772:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 801e774:	78fa      	ldrb	r2, [r7, #3]
 801e776:	7ffb      	ldrb	r3, [r7, #31]
 801e778:	9300      	str	r3, [sp, #0]
 801e77a:	460b      	mov	r3, r1
 801e77c:	6939      	ldr	r1, [r7, #16]
 801e77e:	6878      	ldr	r0, [r7, #4]
 801e780:	f7ff f918 	bl	801d9b4 <tcp_create_segment>
 801e784:	60f8      	str	r0, [r7, #12]
 801e786:	68fb      	ldr	r3, [r7, #12]
 801e788:	2b00      	cmp	r3, #0
 801e78a:	d109      	bne.n	801e7a0 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801e78c:	687b      	ldr	r3, [r7, #4]
 801e78e:	8b5b      	ldrh	r3, [r3, #26]
 801e790:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e794:	b29a      	uxth	r2, r3
 801e796:	687b      	ldr	r3, [r7, #4]
 801e798:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801e79a:	f04f 33ff 	mov.w	r3, #4294967295
 801e79e:	e070      	b.n	801e882 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801e7a0:	68fb      	ldr	r3, [r7, #12]
 801e7a2:	68db      	ldr	r3, [r3, #12]
 801e7a4:	f003 0303 	and.w	r3, r3, #3
 801e7a8:	2b00      	cmp	r3, #0
 801e7aa:	d006      	beq.n	801e7ba <tcp_enqueue_flags+0xea>
 801e7ac:	4b37      	ldr	r3, [pc, #220]	; (801e88c <tcp_enqueue_flags+0x1bc>)
 801e7ae:	f240 4242 	movw	r2, #1090	; 0x442
 801e7b2:	493b      	ldr	r1, [pc, #236]	; (801e8a0 <tcp_enqueue_flags+0x1d0>)
 801e7b4:	4837      	ldr	r0, [pc, #220]	; (801e894 <tcp_enqueue_flags+0x1c4>)
 801e7b6:	f006 fff9 	bl	80257ac <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801e7ba:	68fb      	ldr	r3, [r7, #12]
 801e7bc:	891b      	ldrh	r3, [r3, #8]
 801e7be:	2b00      	cmp	r3, #0
 801e7c0:	d006      	beq.n	801e7d0 <tcp_enqueue_flags+0x100>
 801e7c2:	4b32      	ldr	r3, [pc, #200]	; (801e88c <tcp_enqueue_flags+0x1bc>)
 801e7c4:	f240 4243 	movw	r2, #1091	; 0x443
 801e7c8:	4936      	ldr	r1, [pc, #216]	; (801e8a4 <tcp_enqueue_flags+0x1d4>)
 801e7ca:	4832      	ldr	r0, [pc, #200]	; (801e894 <tcp_enqueue_flags+0x1c4>)
 801e7cc:	f006 ffee 	bl	80257ac <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801e7d0:	687b      	ldr	r3, [r7, #4]
 801e7d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e7d4:	2b00      	cmp	r3, #0
 801e7d6:	d103      	bne.n	801e7e0 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801e7d8:	687b      	ldr	r3, [r7, #4]
 801e7da:	68fa      	ldr	r2, [r7, #12]
 801e7dc:	66da      	str	r2, [r3, #108]	; 0x6c
 801e7de:	e00d      	b.n	801e7fc <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801e7e0:	687b      	ldr	r3, [r7, #4]
 801e7e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e7e4:	61bb      	str	r3, [r7, #24]
 801e7e6:	e002      	b.n	801e7ee <tcp_enqueue_flags+0x11e>
 801e7e8:	69bb      	ldr	r3, [r7, #24]
 801e7ea:	681b      	ldr	r3, [r3, #0]
 801e7ec:	61bb      	str	r3, [r7, #24]
 801e7ee:	69bb      	ldr	r3, [r7, #24]
 801e7f0:	681b      	ldr	r3, [r3, #0]
 801e7f2:	2b00      	cmp	r3, #0
 801e7f4:	d1f8      	bne.n	801e7e8 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801e7f6:	69bb      	ldr	r3, [r7, #24]
 801e7f8:	68fa      	ldr	r2, [r7, #12]
 801e7fa:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801e7fc:	687b      	ldr	r3, [r7, #4]
 801e7fe:	2200      	movs	r2, #0
 801e800:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801e804:	78fb      	ldrb	r3, [r7, #3]
 801e806:	f003 0302 	and.w	r3, r3, #2
 801e80a:	2b00      	cmp	r3, #0
 801e80c:	d104      	bne.n	801e818 <tcp_enqueue_flags+0x148>
 801e80e:	78fb      	ldrb	r3, [r7, #3]
 801e810:	f003 0301 	and.w	r3, r3, #1
 801e814:	2b00      	cmp	r3, #0
 801e816:	d004      	beq.n	801e822 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 801e818:	687b      	ldr	r3, [r7, #4]
 801e81a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e81c:	1c5a      	adds	r2, r3, #1
 801e81e:	687b      	ldr	r3, [r7, #4]
 801e820:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801e822:	78fb      	ldrb	r3, [r7, #3]
 801e824:	f003 0301 	and.w	r3, r3, #1
 801e828:	2b00      	cmp	r3, #0
 801e82a:	d006      	beq.n	801e83a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801e82c:	687b      	ldr	r3, [r7, #4]
 801e82e:	8b5b      	ldrh	r3, [r3, #26]
 801e830:	f043 0320 	orr.w	r3, r3, #32
 801e834:	b29a      	uxth	r2, r3
 801e836:	687b      	ldr	r3, [r7, #4]
 801e838:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801e83a:	68fb      	ldr	r3, [r7, #12]
 801e83c:	685b      	ldr	r3, [r3, #4]
 801e83e:	4618      	mov	r0, r3
 801e840:	f7fa fcca 	bl	80191d8 <pbuf_clen>
 801e844:	4603      	mov	r3, r0
 801e846:	461a      	mov	r2, r3
 801e848:	687b      	ldr	r3, [r7, #4]
 801e84a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801e84e:	4413      	add	r3, r2
 801e850:	b29a      	uxth	r2, r3
 801e852:	687b      	ldr	r3, [r7, #4]
 801e854:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801e858:	687b      	ldr	r3, [r7, #4]
 801e85a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801e85e:	2b00      	cmp	r3, #0
 801e860:	d00e      	beq.n	801e880 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801e862:	687b      	ldr	r3, [r7, #4]
 801e864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801e866:	2b00      	cmp	r3, #0
 801e868:	d10a      	bne.n	801e880 <tcp_enqueue_flags+0x1b0>
 801e86a:	687b      	ldr	r3, [r7, #4]
 801e86c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e86e:	2b00      	cmp	r3, #0
 801e870:	d106      	bne.n	801e880 <tcp_enqueue_flags+0x1b0>
 801e872:	4b06      	ldr	r3, [pc, #24]	; (801e88c <tcp_enqueue_flags+0x1bc>)
 801e874:	f240 4265 	movw	r2, #1125	; 0x465
 801e878:	490b      	ldr	r1, [pc, #44]	; (801e8a8 <tcp_enqueue_flags+0x1d8>)
 801e87a:	4806      	ldr	r0, [pc, #24]	; (801e894 <tcp_enqueue_flags+0x1c4>)
 801e87c:	f006 ff96 	bl	80257ac <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801e880:	2300      	movs	r3, #0
}
 801e882:	4618      	mov	r0, r3
 801e884:	3720      	adds	r7, #32
 801e886:	46bd      	mov	sp, r7
 801e888:	bd80      	pop	{r7, pc}
 801e88a:	bf00      	nop
 801e88c:	0802cb20 	.word	0x0802cb20
 801e890:	0802cf44 	.word	0x0802cf44
 801e894:	0802cb74 	.word	0x0802cb74
 801e898:	0802cf9c 	.word	0x0802cf9c
 801e89c:	0802cfbc 	.word	0x0802cfbc
 801e8a0:	0802cff8 	.word	0x0802cff8
 801e8a4:	0802d010 	.word	0x0802d010
 801e8a8:	0802d03c 	.word	0x0802d03c

0801e8ac <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801e8ac:	b5b0      	push	{r4, r5, r7, lr}
 801e8ae:	b08a      	sub	sp, #40	; 0x28
 801e8b0:	af00      	add	r7, sp, #0
 801e8b2:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801e8b4:	687b      	ldr	r3, [r7, #4]
 801e8b6:	2b00      	cmp	r3, #0
 801e8b8:	d106      	bne.n	801e8c8 <tcp_output+0x1c>
 801e8ba:	4b8a      	ldr	r3, [pc, #552]	; (801eae4 <tcp_output+0x238>)
 801e8bc:	f240 42e1 	movw	r2, #1249	; 0x4e1
 801e8c0:	4989      	ldr	r1, [pc, #548]	; (801eae8 <tcp_output+0x23c>)
 801e8c2:	488a      	ldr	r0, [pc, #552]	; (801eaec <tcp_output+0x240>)
 801e8c4:	f006 ff72 	bl	80257ac <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801e8c8:	687b      	ldr	r3, [r7, #4]
 801e8ca:	7d1b      	ldrb	r3, [r3, #20]
 801e8cc:	2b01      	cmp	r3, #1
 801e8ce:	d106      	bne.n	801e8de <tcp_output+0x32>
 801e8d0:	4b84      	ldr	r3, [pc, #528]	; (801eae4 <tcp_output+0x238>)
 801e8d2:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801e8d6:	4986      	ldr	r1, [pc, #536]	; (801eaf0 <tcp_output+0x244>)
 801e8d8:	4884      	ldr	r0, [pc, #528]	; (801eaec <tcp_output+0x240>)
 801e8da:	f006 ff67 	bl	80257ac <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801e8de:	4b85      	ldr	r3, [pc, #532]	; (801eaf4 <tcp_output+0x248>)
 801e8e0:	681b      	ldr	r3, [r3, #0]
 801e8e2:	687a      	ldr	r2, [r7, #4]
 801e8e4:	429a      	cmp	r2, r3
 801e8e6:	d101      	bne.n	801e8ec <tcp_output+0x40>
    return ERR_OK;
 801e8e8:	2300      	movs	r3, #0
 801e8ea:	e1ce      	b.n	801ec8a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801e8ec:	687b      	ldr	r3, [r7, #4]
 801e8ee:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801e8f2:	687b      	ldr	r3, [r7, #4]
 801e8f4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801e8f8:	4293      	cmp	r3, r2
 801e8fa:	bf28      	it	cs
 801e8fc:	4613      	movcs	r3, r2
 801e8fe:	b29b      	uxth	r3, r3
 801e900:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801e902:	687b      	ldr	r3, [r7, #4]
 801e904:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e906:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 801e908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e90a:	2b00      	cmp	r3, #0
 801e90c:	d10b      	bne.n	801e926 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801e90e:	687b      	ldr	r3, [r7, #4]
 801e910:	8b5b      	ldrh	r3, [r3, #26]
 801e912:	f003 0302 	and.w	r3, r3, #2
 801e916:	2b00      	cmp	r3, #0
 801e918:	f000 81aa 	beq.w	801ec70 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801e91c:	6878      	ldr	r0, [r7, #4]
 801e91e:	f000 fdcb 	bl	801f4b8 <tcp_send_empty_ack>
 801e922:	4603      	mov	r3, r0
 801e924:	e1b1      	b.n	801ec8a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801e926:	6879      	ldr	r1, [r7, #4]
 801e928:	687b      	ldr	r3, [r7, #4]
 801e92a:	3304      	adds	r3, #4
 801e92c:	461a      	mov	r2, r3
 801e92e:	6878      	ldr	r0, [r7, #4]
 801e930:	f7ff f824 	bl	801d97c <tcp_route>
 801e934:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801e936:	697b      	ldr	r3, [r7, #20]
 801e938:	2b00      	cmp	r3, #0
 801e93a:	d102      	bne.n	801e942 <tcp_output+0x96>
    return ERR_RTE;
 801e93c:	f06f 0303 	mvn.w	r3, #3
 801e940:	e1a3      	b.n	801ec8a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801e942:	687b      	ldr	r3, [r7, #4]
 801e944:	2b00      	cmp	r3, #0
 801e946:	d003      	beq.n	801e950 <tcp_output+0xa4>
 801e948:	687b      	ldr	r3, [r7, #4]
 801e94a:	681b      	ldr	r3, [r3, #0]
 801e94c:	2b00      	cmp	r3, #0
 801e94e:	d111      	bne.n	801e974 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801e950:	697b      	ldr	r3, [r7, #20]
 801e952:	2b00      	cmp	r3, #0
 801e954:	d002      	beq.n	801e95c <tcp_output+0xb0>
 801e956:	697b      	ldr	r3, [r7, #20]
 801e958:	3304      	adds	r3, #4
 801e95a:	e000      	b.n	801e95e <tcp_output+0xb2>
 801e95c:	2300      	movs	r3, #0
 801e95e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801e960:	693b      	ldr	r3, [r7, #16]
 801e962:	2b00      	cmp	r3, #0
 801e964:	d102      	bne.n	801e96c <tcp_output+0xc0>
      return ERR_RTE;
 801e966:	f06f 0303 	mvn.w	r3, #3
 801e96a:	e18e      	b.n	801ec8a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801e96c:	693b      	ldr	r3, [r7, #16]
 801e96e:	681a      	ldr	r2, [r3, #0]
 801e970:	687b      	ldr	r3, [r7, #4]
 801e972:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801e974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e976:	68db      	ldr	r3, [r3, #12]
 801e978:	685b      	ldr	r3, [r3, #4]
 801e97a:	4618      	mov	r0, r3
 801e97c:	f7f8 ffd3 	bl	8017926 <lwip_htonl>
 801e980:	4602      	mov	r2, r0
 801e982:	687b      	ldr	r3, [r7, #4]
 801e984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e986:	1ad3      	subs	r3, r2, r3
 801e988:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e98a:	8912      	ldrh	r2, [r2, #8]
 801e98c:	4413      	add	r3, r2
 801e98e:	69ba      	ldr	r2, [r7, #24]
 801e990:	429a      	cmp	r2, r3
 801e992:	d227      	bcs.n	801e9e4 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801e994:	687b      	ldr	r3, [r7, #4]
 801e996:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801e99a:	461a      	mov	r2, r3
 801e99c:	69bb      	ldr	r3, [r7, #24]
 801e99e:	4293      	cmp	r3, r2
 801e9a0:	d114      	bne.n	801e9cc <tcp_output+0x120>
 801e9a2:	687b      	ldr	r3, [r7, #4]
 801e9a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801e9a6:	2b00      	cmp	r3, #0
 801e9a8:	d110      	bne.n	801e9cc <tcp_output+0x120>
 801e9aa:	687b      	ldr	r3, [r7, #4]
 801e9ac:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801e9b0:	2b00      	cmp	r3, #0
 801e9b2:	d10b      	bne.n	801e9cc <tcp_output+0x120>
      pcb->persist_cnt = 0;
 801e9b4:	687b      	ldr	r3, [r7, #4]
 801e9b6:	2200      	movs	r2, #0
 801e9b8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 801e9bc:	687b      	ldr	r3, [r7, #4]
 801e9be:	2201      	movs	r2, #1
 801e9c0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 801e9c4:	687b      	ldr	r3, [r7, #4]
 801e9c6:	2200      	movs	r2, #0
 801e9c8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801e9cc:	687b      	ldr	r3, [r7, #4]
 801e9ce:	8b5b      	ldrh	r3, [r3, #26]
 801e9d0:	f003 0302 	and.w	r3, r3, #2
 801e9d4:	2b00      	cmp	r3, #0
 801e9d6:	f000 814d 	beq.w	801ec74 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801e9da:	6878      	ldr	r0, [r7, #4]
 801e9dc:	f000 fd6c 	bl	801f4b8 <tcp_send_empty_ack>
 801e9e0:	4603      	mov	r3, r0
 801e9e2:	e152      	b.n	801ec8a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801e9e4:	687b      	ldr	r3, [r7, #4]
 801e9e6:	2200      	movs	r2, #0
 801e9e8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801e9ec:	687b      	ldr	r3, [r7, #4]
 801e9ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801e9f0:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801e9f2:	6a3b      	ldr	r3, [r7, #32]
 801e9f4:	2b00      	cmp	r3, #0
 801e9f6:	f000 811c 	beq.w	801ec32 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801e9fa:	e002      	b.n	801ea02 <tcp_output+0x156>
 801e9fc:	6a3b      	ldr	r3, [r7, #32]
 801e9fe:	681b      	ldr	r3, [r3, #0]
 801ea00:	623b      	str	r3, [r7, #32]
 801ea02:	6a3b      	ldr	r3, [r7, #32]
 801ea04:	681b      	ldr	r3, [r3, #0]
 801ea06:	2b00      	cmp	r3, #0
 801ea08:	d1f8      	bne.n	801e9fc <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801ea0a:	e112      	b.n	801ec32 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801ea0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ea0e:	68db      	ldr	r3, [r3, #12]
 801ea10:	899b      	ldrh	r3, [r3, #12]
 801ea12:	b29b      	uxth	r3, r3
 801ea14:	4618      	mov	r0, r3
 801ea16:	f7f8 ff71 	bl	80178fc <lwip_htons>
 801ea1a:	4603      	mov	r3, r0
 801ea1c:	b2db      	uxtb	r3, r3
 801ea1e:	f003 0304 	and.w	r3, r3, #4
 801ea22:	2b00      	cmp	r3, #0
 801ea24:	d006      	beq.n	801ea34 <tcp_output+0x188>
 801ea26:	4b2f      	ldr	r3, [pc, #188]	; (801eae4 <tcp_output+0x238>)
 801ea28:	f240 5236 	movw	r2, #1334	; 0x536
 801ea2c:	4932      	ldr	r1, [pc, #200]	; (801eaf8 <tcp_output+0x24c>)
 801ea2e:	482f      	ldr	r0, [pc, #188]	; (801eaec <tcp_output+0x240>)
 801ea30:	f006 febc 	bl	80257ac <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801ea34:	687b      	ldr	r3, [r7, #4]
 801ea36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ea38:	2b00      	cmp	r3, #0
 801ea3a:	d01f      	beq.n	801ea7c <tcp_output+0x1d0>
 801ea3c:	687b      	ldr	r3, [r7, #4]
 801ea3e:	8b5b      	ldrh	r3, [r3, #26]
 801ea40:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801ea44:	2b00      	cmp	r3, #0
 801ea46:	d119      	bne.n	801ea7c <tcp_output+0x1d0>
 801ea48:	687b      	ldr	r3, [r7, #4]
 801ea4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ea4c:	2b00      	cmp	r3, #0
 801ea4e:	d00b      	beq.n	801ea68 <tcp_output+0x1bc>
 801ea50:	687b      	ldr	r3, [r7, #4]
 801ea52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ea54:	681b      	ldr	r3, [r3, #0]
 801ea56:	2b00      	cmp	r3, #0
 801ea58:	d110      	bne.n	801ea7c <tcp_output+0x1d0>
 801ea5a:	687b      	ldr	r3, [r7, #4]
 801ea5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ea5e:	891a      	ldrh	r2, [r3, #8]
 801ea60:	687b      	ldr	r3, [r7, #4]
 801ea62:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801ea64:	429a      	cmp	r2, r3
 801ea66:	d209      	bcs.n	801ea7c <tcp_output+0x1d0>
 801ea68:	687b      	ldr	r3, [r7, #4]
 801ea6a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801ea6e:	2b00      	cmp	r3, #0
 801ea70:	d004      	beq.n	801ea7c <tcp_output+0x1d0>
 801ea72:	687b      	ldr	r3, [r7, #4]
 801ea74:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801ea78:	2b08      	cmp	r3, #8
 801ea7a:	d901      	bls.n	801ea80 <tcp_output+0x1d4>
 801ea7c:	2301      	movs	r3, #1
 801ea7e:	e000      	b.n	801ea82 <tcp_output+0x1d6>
 801ea80:	2300      	movs	r3, #0
 801ea82:	2b00      	cmp	r3, #0
 801ea84:	d106      	bne.n	801ea94 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801ea86:	687b      	ldr	r3, [r7, #4]
 801ea88:	8b5b      	ldrh	r3, [r3, #26]
 801ea8a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801ea8e:	2b00      	cmp	r3, #0
 801ea90:	f000 80e4 	beq.w	801ec5c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801ea94:	687b      	ldr	r3, [r7, #4]
 801ea96:	7d1b      	ldrb	r3, [r3, #20]
 801ea98:	2b02      	cmp	r3, #2
 801ea9a:	d00d      	beq.n	801eab8 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801ea9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ea9e:	68db      	ldr	r3, [r3, #12]
 801eaa0:	899b      	ldrh	r3, [r3, #12]
 801eaa2:	b29c      	uxth	r4, r3
 801eaa4:	2010      	movs	r0, #16
 801eaa6:	f7f8 ff29 	bl	80178fc <lwip_htons>
 801eaaa:	4603      	mov	r3, r0
 801eaac:	461a      	mov	r2, r3
 801eaae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eab0:	68db      	ldr	r3, [r3, #12]
 801eab2:	4322      	orrs	r2, r4
 801eab4:	b292      	uxth	r2, r2
 801eab6:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801eab8:	697a      	ldr	r2, [r7, #20]
 801eaba:	6879      	ldr	r1, [r7, #4]
 801eabc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801eabe:	f000 f909 	bl	801ecd4 <tcp_output_segment>
 801eac2:	4603      	mov	r3, r0
 801eac4:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801eac6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801eaca:	2b00      	cmp	r3, #0
 801eacc:	d016      	beq.n	801eafc <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801eace:	687b      	ldr	r3, [r7, #4]
 801ead0:	8b5b      	ldrh	r3, [r3, #26]
 801ead2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ead6:	b29a      	uxth	r2, r3
 801ead8:	687b      	ldr	r3, [r7, #4]
 801eada:	835a      	strh	r2, [r3, #26]
      return err;
 801eadc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801eae0:	e0d3      	b.n	801ec8a <tcp_output+0x3de>
 801eae2:	bf00      	nop
 801eae4:	0802cb20 	.word	0x0802cb20
 801eae8:	0802d064 	.word	0x0802d064
 801eaec:	0802cb74 	.word	0x0802cb74
 801eaf0:	0802d07c 	.word	0x0802d07c
 801eaf4:	2001bd20 	.word	0x2001bd20
 801eaf8:	0802d0a4 	.word	0x0802d0a4
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801eafc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eafe:	681a      	ldr	r2, [r3, #0]
 801eb00:	687b      	ldr	r3, [r7, #4]
 801eb02:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801eb04:	687b      	ldr	r3, [r7, #4]
 801eb06:	7d1b      	ldrb	r3, [r3, #20]
 801eb08:	2b02      	cmp	r3, #2
 801eb0a:	d006      	beq.n	801eb1a <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801eb0c:	687b      	ldr	r3, [r7, #4]
 801eb0e:	8b5b      	ldrh	r3, [r3, #26]
 801eb10:	f023 0303 	bic.w	r3, r3, #3
 801eb14:	b29a      	uxth	r2, r3
 801eb16:	687b      	ldr	r3, [r7, #4]
 801eb18:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801eb1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eb1c:	68db      	ldr	r3, [r3, #12]
 801eb1e:	685b      	ldr	r3, [r3, #4]
 801eb20:	4618      	mov	r0, r3
 801eb22:	f7f8 ff00 	bl	8017926 <lwip_htonl>
 801eb26:	4604      	mov	r4, r0
 801eb28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eb2a:	891b      	ldrh	r3, [r3, #8]
 801eb2c:	461d      	mov	r5, r3
 801eb2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eb30:	68db      	ldr	r3, [r3, #12]
 801eb32:	899b      	ldrh	r3, [r3, #12]
 801eb34:	b29b      	uxth	r3, r3
 801eb36:	4618      	mov	r0, r3
 801eb38:	f7f8 fee0 	bl	80178fc <lwip_htons>
 801eb3c:	4603      	mov	r3, r0
 801eb3e:	b2db      	uxtb	r3, r3
 801eb40:	f003 0303 	and.w	r3, r3, #3
 801eb44:	2b00      	cmp	r3, #0
 801eb46:	d001      	beq.n	801eb4c <tcp_output+0x2a0>
 801eb48:	2301      	movs	r3, #1
 801eb4a:	e000      	b.n	801eb4e <tcp_output+0x2a2>
 801eb4c:	2300      	movs	r3, #0
 801eb4e:	442b      	add	r3, r5
 801eb50:	4423      	add	r3, r4
 801eb52:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801eb54:	687b      	ldr	r3, [r7, #4]
 801eb56:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801eb58:	68bb      	ldr	r3, [r7, #8]
 801eb5a:	1ad3      	subs	r3, r2, r3
 801eb5c:	2b00      	cmp	r3, #0
 801eb5e:	da02      	bge.n	801eb66 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 801eb60:	687b      	ldr	r3, [r7, #4]
 801eb62:	68ba      	ldr	r2, [r7, #8]
 801eb64:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801eb66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eb68:	891b      	ldrh	r3, [r3, #8]
 801eb6a:	461c      	mov	r4, r3
 801eb6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eb6e:	68db      	ldr	r3, [r3, #12]
 801eb70:	899b      	ldrh	r3, [r3, #12]
 801eb72:	b29b      	uxth	r3, r3
 801eb74:	4618      	mov	r0, r3
 801eb76:	f7f8 fec1 	bl	80178fc <lwip_htons>
 801eb7a:	4603      	mov	r3, r0
 801eb7c:	b2db      	uxtb	r3, r3
 801eb7e:	f003 0303 	and.w	r3, r3, #3
 801eb82:	2b00      	cmp	r3, #0
 801eb84:	d001      	beq.n	801eb8a <tcp_output+0x2de>
 801eb86:	2301      	movs	r3, #1
 801eb88:	e000      	b.n	801eb8c <tcp_output+0x2e0>
 801eb8a:	2300      	movs	r3, #0
 801eb8c:	4423      	add	r3, r4
 801eb8e:	2b00      	cmp	r3, #0
 801eb90:	d049      	beq.n	801ec26 <tcp_output+0x37a>
      seg->next = NULL;
 801eb92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eb94:	2200      	movs	r2, #0
 801eb96:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801eb98:	687b      	ldr	r3, [r7, #4]
 801eb9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801eb9c:	2b00      	cmp	r3, #0
 801eb9e:	d105      	bne.n	801ebac <tcp_output+0x300>
        pcb->unacked = seg;
 801eba0:	687b      	ldr	r3, [r7, #4]
 801eba2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801eba4:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801eba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eba8:	623b      	str	r3, [r7, #32]
 801ebaa:	e03f      	b.n	801ec2c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801ebac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ebae:	68db      	ldr	r3, [r3, #12]
 801ebb0:	685b      	ldr	r3, [r3, #4]
 801ebb2:	4618      	mov	r0, r3
 801ebb4:	f7f8 feb7 	bl	8017926 <lwip_htonl>
 801ebb8:	4604      	mov	r4, r0
 801ebba:	6a3b      	ldr	r3, [r7, #32]
 801ebbc:	68db      	ldr	r3, [r3, #12]
 801ebbe:	685b      	ldr	r3, [r3, #4]
 801ebc0:	4618      	mov	r0, r3
 801ebc2:	f7f8 feb0 	bl	8017926 <lwip_htonl>
 801ebc6:	4603      	mov	r3, r0
 801ebc8:	1ae3      	subs	r3, r4, r3
 801ebca:	2b00      	cmp	r3, #0
 801ebcc:	da24      	bge.n	801ec18 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801ebce:	687b      	ldr	r3, [r7, #4]
 801ebd0:	3370      	adds	r3, #112	; 0x70
 801ebd2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801ebd4:	e002      	b.n	801ebdc <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801ebd6:	69fb      	ldr	r3, [r7, #28]
 801ebd8:	681b      	ldr	r3, [r3, #0]
 801ebda:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801ebdc:	69fb      	ldr	r3, [r7, #28]
 801ebde:	681b      	ldr	r3, [r3, #0]
 801ebe0:	2b00      	cmp	r3, #0
 801ebe2:	d011      	beq.n	801ec08 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801ebe4:	69fb      	ldr	r3, [r7, #28]
 801ebe6:	681b      	ldr	r3, [r3, #0]
 801ebe8:	68db      	ldr	r3, [r3, #12]
 801ebea:	685b      	ldr	r3, [r3, #4]
 801ebec:	4618      	mov	r0, r3
 801ebee:	f7f8 fe9a 	bl	8017926 <lwip_htonl>
 801ebf2:	4604      	mov	r4, r0
 801ebf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ebf6:	68db      	ldr	r3, [r3, #12]
 801ebf8:	685b      	ldr	r3, [r3, #4]
 801ebfa:	4618      	mov	r0, r3
 801ebfc:	f7f8 fe93 	bl	8017926 <lwip_htonl>
 801ec00:	4603      	mov	r3, r0
 801ec02:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801ec04:	2b00      	cmp	r3, #0
 801ec06:	dbe6      	blt.n	801ebd6 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 801ec08:	69fb      	ldr	r3, [r7, #28]
 801ec0a:	681a      	ldr	r2, [r3, #0]
 801ec0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ec0e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801ec10:	69fb      	ldr	r3, [r7, #28]
 801ec12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ec14:	601a      	str	r2, [r3, #0]
 801ec16:	e009      	b.n	801ec2c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801ec18:	6a3b      	ldr	r3, [r7, #32]
 801ec1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ec1c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801ec1e:	6a3b      	ldr	r3, [r7, #32]
 801ec20:	681b      	ldr	r3, [r3, #0]
 801ec22:	623b      	str	r3, [r7, #32]
 801ec24:	e002      	b.n	801ec2c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801ec26:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ec28:	f7fb ff31 	bl	801aa8e <tcp_seg_free>
    }
    seg = pcb->unsent;
 801ec2c:	687b      	ldr	r3, [r7, #4]
 801ec2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ec30:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801ec32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ec34:	2b00      	cmp	r3, #0
 801ec36:	d012      	beq.n	801ec5e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801ec38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ec3a:	68db      	ldr	r3, [r3, #12]
 801ec3c:	685b      	ldr	r3, [r3, #4]
 801ec3e:	4618      	mov	r0, r3
 801ec40:	f7f8 fe71 	bl	8017926 <lwip_htonl>
 801ec44:	4602      	mov	r2, r0
 801ec46:	687b      	ldr	r3, [r7, #4]
 801ec48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ec4a:	1ad3      	subs	r3, r2, r3
 801ec4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ec4e:	8912      	ldrh	r2, [r2, #8]
 801ec50:	4413      	add	r3, r2
  while (seg != NULL &&
 801ec52:	69ba      	ldr	r2, [r7, #24]
 801ec54:	429a      	cmp	r2, r3
 801ec56:	f4bf aed9 	bcs.w	801ea0c <tcp_output+0x160>
 801ec5a:	e000      	b.n	801ec5e <tcp_output+0x3b2>
      break;
 801ec5c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801ec5e:	687b      	ldr	r3, [r7, #4]
 801ec60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ec62:	2b00      	cmp	r3, #0
 801ec64:	d108      	bne.n	801ec78 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801ec66:	687b      	ldr	r3, [r7, #4]
 801ec68:	2200      	movs	r2, #0
 801ec6a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801ec6e:	e004      	b.n	801ec7a <tcp_output+0x3ce>
    goto output_done;
 801ec70:	bf00      	nop
 801ec72:	e002      	b.n	801ec7a <tcp_output+0x3ce>
    goto output_done;
 801ec74:	bf00      	nop
 801ec76:	e000      	b.n	801ec7a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801ec78:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801ec7a:	687b      	ldr	r3, [r7, #4]
 801ec7c:	8b5b      	ldrh	r3, [r3, #26]
 801ec7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801ec82:	b29a      	uxth	r2, r3
 801ec84:	687b      	ldr	r3, [r7, #4]
 801ec86:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801ec88:	2300      	movs	r3, #0
}
 801ec8a:	4618      	mov	r0, r3
 801ec8c:	3728      	adds	r7, #40	; 0x28
 801ec8e:	46bd      	mov	sp, r7
 801ec90:	bdb0      	pop	{r4, r5, r7, pc}
 801ec92:	bf00      	nop

0801ec94 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801ec94:	b580      	push	{r7, lr}
 801ec96:	b082      	sub	sp, #8
 801ec98:	af00      	add	r7, sp, #0
 801ec9a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801ec9c:	687b      	ldr	r3, [r7, #4]
 801ec9e:	2b00      	cmp	r3, #0
 801eca0:	d106      	bne.n	801ecb0 <tcp_output_segment_busy+0x1c>
 801eca2:	4b09      	ldr	r3, [pc, #36]	; (801ecc8 <tcp_output_segment_busy+0x34>)
 801eca4:	f240 529a 	movw	r2, #1434	; 0x59a
 801eca8:	4908      	ldr	r1, [pc, #32]	; (801eccc <tcp_output_segment_busy+0x38>)
 801ecaa:	4809      	ldr	r0, [pc, #36]	; (801ecd0 <tcp_output_segment_busy+0x3c>)
 801ecac:	f006 fd7e 	bl	80257ac <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801ecb0:	687b      	ldr	r3, [r7, #4]
 801ecb2:	685b      	ldr	r3, [r3, #4]
 801ecb4:	7b9b      	ldrb	r3, [r3, #14]
 801ecb6:	2b01      	cmp	r3, #1
 801ecb8:	d001      	beq.n	801ecbe <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801ecba:	2301      	movs	r3, #1
 801ecbc:	e000      	b.n	801ecc0 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801ecbe:	2300      	movs	r3, #0
}
 801ecc0:	4618      	mov	r0, r3
 801ecc2:	3708      	adds	r7, #8
 801ecc4:	46bd      	mov	sp, r7
 801ecc6:	bd80      	pop	{r7, pc}
 801ecc8:	0802cb20 	.word	0x0802cb20
 801eccc:	0802d0bc 	.word	0x0802d0bc
 801ecd0:	0802cb74 	.word	0x0802cb74

0801ecd4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801ecd4:	b5b0      	push	{r4, r5, r7, lr}
 801ecd6:	b08c      	sub	sp, #48	; 0x30
 801ecd8:	af04      	add	r7, sp, #16
 801ecda:	60f8      	str	r0, [r7, #12]
 801ecdc:	60b9      	str	r1, [r7, #8]
 801ecde:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801ece0:	68fb      	ldr	r3, [r7, #12]
 801ece2:	2b00      	cmp	r3, #0
 801ece4:	d106      	bne.n	801ecf4 <tcp_output_segment+0x20>
 801ece6:	4b63      	ldr	r3, [pc, #396]	; (801ee74 <tcp_output_segment+0x1a0>)
 801ece8:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801ecec:	4962      	ldr	r1, [pc, #392]	; (801ee78 <tcp_output_segment+0x1a4>)
 801ecee:	4863      	ldr	r0, [pc, #396]	; (801ee7c <tcp_output_segment+0x1a8>)
 801ecf0:	f006 fd5c 	bl	80257ac <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801ecf4:	68bb      	ldr	r3, [r7, #8]
 801ecf6:	2b00      	cmp	r3, #0
 801ecf8:	d106      	bne.n	801ed08 <tcp_output_segment+0x34>
 801ecfa:	4b5e      	ldr	r3, [pc, #376]	; (801ee74 <tcp_output_segment+0x1a0>)
 801ecfc:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801ed00:	495f      	ldr	r1, [pc, #380]	; (801ee80 <tcp_output_segment+0x1ac>)
 801ed02:	485e      	ldr	r0, [pc, #376]	; (801ee7c <tcp_output_segment+0x1a8>)
 801ed04:	f006 fd52 	bl	80257ac <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801ed08:	687b      	ldr	r3, [r7, #4]
 801ed0a:	2b00      	cmp	r3, #0
 801ed0c:	d106      	bne.n	801ed1c <tcp_output_segment+0x48>
 801ed0e:	4b59      	ldr	r3, [pc, #356]	; (801ee74 <tcp_output_segment+0x1a0>)
 801ed10:	f240 52ba 	movw	r2, #1466	; 0x5ba
 801ed14:	495b      	ldr	r1, [pc, #364]	; (801ee84 <tcp_output_segment+0x1b0>)
 801ed16:	4859      	ldr	r0, [pc, #356]	; (801ee7c <tcp_output_segment+0x1a8>)
 801ed18:	f006 fd48 	bl	80257ac <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801ed1c:	68f8      	ldr	r0, [r7, #12]
 801ed1e:	f7ff ffb9 	bl	801ec94 <tcp_output_segment_busy>
 801ed22:	4603      	mov	r3, r0
 801ed24:	2b00      	cmp	r3, #0
 801ed26:	d001      	beq.n	801ed2c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801ed28:	2300      	movs	r3, #0
 801ed2a:	e09f      	b.n	801ee6c <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801ed2c:	68bb      	ldr	r3, [r7, #8]
 801ed2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801ed30:	68fb      	ldr	r3, [r7, #12]
 801ed32:	68dc      	ldr	r4, [r3, #12]
 801ed34:	4610      	mov	r0, r2
 801ed36:	f7f8 fdf6 	bl	8017926 <lwip_htonl>
 801ed3a:	4603      	mov	r3, r0
 801ed3c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801ed3e:	68bb      	ldr	r3, [r7, #8]
 801ed40:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801ed42:	68fb      	ldr	r3, [r7, #12]
 801ed44:	68dc      	ldr	r4, [r3, #12]
 801ed46:	4610      	mov	r0, r2
 801ed48:	f7f8 fdd8 	bl	80178fc <lwip_htons>
 801ed4c:	4603      	mov	r3, r0
 801ed4e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801ed50:	68bb      	ldr	r3, [r7, #8]
 801ed52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ed54:	68ba      	ldr	r2, [r7, #8]
 801ed56:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801ed58:	441a      	add	r2, r3
 801ed5a:	68bb      	ldr	r3, [r7, #8]
 801ed5c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801ed5e:	68fb      	ldr	r3, [r7, #12]
 801ed60:	68db      	ldr	r3, [r3, #12]
 801ed62:	3314      	adds	r3, #20
 801ed64:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801ed66:	68fb      	ldr	r3, [r7, #12]
 801ed68:	7a9b      	ldrb	r3, [r3, #10]
 801ed6a:	f003 0301 	and.w	r3, r3, #1
 801ed6e:	2b00      	cmp	r3, #0
 801ed70:	d015      	beq.n	801ed9e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801ed72:	68bb      	ldr	r3, [r7, #8]
 801ed74:	3304      	adds	r3, #4
 801ed76:	461a      	mov	r2, r3
 801ed78:	6879      	ldr	r1, [r7, #4]
 801ed7a:	f44f 7006 	mov.w	r0, #536	; 0x218
 801ed7e:	f7fc fa33 	bl	801b1e8 <tcp_eff_send_mss_netif>
 801ed82:	4603      	mov	r3, r0
 801ed84:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801ed86:	8b7b      	ldrh	r3, [r7, #26]
 801ed88:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801ed8c:	4618      	mov	r0, r3
 801ed8e:	f7f8 fdca 	bl	8017926 <lwip_htonl>
 801ed92:	4602      	mov	r2, r0
 801ed94:	69fb      	ldr	r3, [r7, #28]
 801ed96:	601a      	str	r2, [r3, #0]
    opts += 1;
 801ed98:	69fb      	ldr	r3, [r7, #28]
 801ed9a:	3304      	adds	r3, #4
 801ed9c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801ed9e:	68bb      	ldr	r3, [r7, #8]
 801eda0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801eda4:	2b00      	cmp	r3, #0
 801eda6:	da02      	bge.n	801edae <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801eda8:	68bb      	ldr	r3, [r7, #8]
 801edaa:	2200      	movs	r2, #0
 801edac:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801edae:	68bb      	ldr	r3, [r7, #8]
 801edb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801edb2:	2b00      	cmp	r3, #0
 801edb4:	d10c      	bne.n	801edd0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801edb6:	4b34      	ldr	r3, [pc, #208]	; (801ee88 <tcp_output_segment+0x1b4>)
 801edb8:	681a      	ldr	r2, [r3, #0]
 801edba:	68bb      	ldr	r3, [r7, #8]
 801edbc:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801edbe:	68fb      	ldr	r3, [r7, #12]
 801edc0:	68db      	ldr	r3, [r3, #12]
 801edc2:	685b      	ldr	r3, [r3, #4]
 801edc4:	4618      	mov	r0, r3
 801edc6:	f7f8 fdae 	bl	8017926 <lwip_htonl>
 801edca:	4602      	mov	r2, r0
 801edcc:	68bb      	ldr	r3, [r7, #8]
 801edce:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801edd0:	68fb      	ldr	r3, [r7, #12]
 801edd2:	68da      	ldr	r2, [r3, #12]
 801edd4:	68fb      	ldr	r3, [r7, #12]
 801edd6:	685b      	ldr	r3, [r3, #4]
 801edd8:	685b      	ldr	r3, [r3, #4]
 801edda:	1ad3      	subs	r3, r2, r3
 801eddc:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801edde:	68fb      	ldr	r3, [r7, #12]
 801ede0:	685b      	ldr	r3, [r3, #4]
 801ede2:	8959      	ldrh	r1, [r3, #10]
 801ede4:	68fb      	ldr	r3, [r7, #12]
 801ede6:	685b      	ldr	r3, [r3, #4]
 801ede8:	8b3a      	ldrh	r2, [r7, #24]
 801edea:	1a8a      	subs	r2, r1, r2
 801edec:	b292      	uxth	r2, r2
 801edee:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801edf0:	68fb      	ldr	r3, [r7, #12]
 801edf2:	685b      	ldr	r3, [r3, #4]
 801edf4:	8919      	ldrh	r1, [r3, #8]
 801edf6:	68fb      	ldr	r3, [r7, #12]
 801edf8:	685b      	ldr	r3, [r3, #4]
 801edfa:	8b3a      	ldrh	r2, [r7, #24]
 801edfc:	1a8a      	subs	r2, r1, r2
 801edfe:	b292      	uxth	r2, r2
 801ee00:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801ee02:	68fb      	ldr	r3, [r7, #12]
 801ee04:	685b      	ldr	r3, [r3, #4]
 801ee06:	68fa      	ldr	r2, [r7, #12]
 801ee08:	68d2      	ldr	r2, [r2, #12]
 801ee0a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801ee0c:	68fb      	ldr	r3, [r7, #12]
 801ee0e:	68db      	ldr	r3, [r3, #12]
 801ee10:	2200      	movs	r2, #0
 801ee12:	741a      	strb	r2, [r3, #16]
 801ee14:	2200      	movs	r2, #0
 801ee16:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801ee18:	68fb      	ldr	r3, [r7, #12]
 801ee1a:	68db      	ldr	r3, [r3, #12]
 801ee1c:	f103 0214 	add.w	r2, r3, #20
 801ee20:	68fb      	ldr	r3, [r7, #12]
 801ee22:	7a9b      	ldrb	r3, [r3, #10]
 801ee24:	009b      	lsls	r3, r3, #2
 801ee26:	f003 0304 	and.w	r3, r3, #4
 801ee2a:	4413      	add	r3, r2
 801ee2c:	69fa      	ldr	r2, [r7, #28]
 801ee2e:	429a      	cmp	r2, r3
 801ee30:	d006      	beq.n	801ee40 <tcp_output_segment+0x16c>
 801ee32:	4b10      	ldr	r3, [pc, #64]	; (801ee74 <tcp_output_segment+0x1a0>)
 801ee34:	f240 621c 	movw	r2, #1564	; 0x61c
 801ee38:	4914      	ldr	r1, [pc, #80]	; (801ee8c <tcp_output_segment+0x1b8>)
 801ee3a:	4810      	ldr	r0, [pc, #64]	; (801ee7c <tcp_output_segment+0x1a8>)
 801ee3c:	f006 fcb6 	bl	80257ac <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801ee40:	68fb      	ldr	r3, [r7, #12]
 801ee42:	6858      	ldr	r0, [r3, #4]
 801ee44:	68b9      	ldr	r1, [r7, #8]
 801ee46:	68bb      	ldr	r3, [r7, #8]
 801ee48:	1d1c      	adds	r4, r3, #4
 801ee4a:	68bb      	ldr	r3, [r7, #8]
 801ee4c:	7add      	ldrb	r5, [r3, #11]
 801ee4e:	68bb      	ldr	r3, [r7, #8]
 801ee50:	7a9b      	ldrb	r3, [r3, #10]
 801ee52:	687a      	ldr	r2, [r7, #4]
 801ee54:	9202      	str	r2, [sp, #8]
 801ee56:	2206      	movs	r2, #6
 801ee58:	9201      	str	r2, [sp, #4]
 801ee5a:	9300      	str	r3, [sp, #0]
 801ee5c:	462b      	mov	r3, r5
 801ee5e:	4622      	mov	r2, r4
 801ee60:	f004 fc56 	bl	8023710 <ip4_output_if>
 801ee64:	4603      	mov	r3, r0
 801ee66:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801ee68:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801ee6c:	4618      	mov	r0, r3
 801ee6e:	3720      	adds	r7, #32
 801ee70:	46bd      	mov	sp, r7
 801ee72:	bdb0      	pop	{r4, r5, r7, pc}
 801ee74:	0802cb20 	.word	0x0802cb20
 801ee78:	0802d0e4 	.word	0x0802d0e4
 801ee7c:	0802cb74 	.word	0x0802cb74
 801ee80:	0802d104 	.word	0x0802d104
 801ee84:	0802d124 	.word	0x0802d124
 801ee88:	2001bd10 	.word	0x2001bd10
 801ee8c:	0802d148 	.word	0x0802d148

0801ee90 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801ee90:	b5b0      	push	{r4, r5, r7, lr}
 801ee92:	b084      	sub	sp, #16
 801ee94:	af00      	add	r7, sp, #0
 801ee96:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801ee98:	687b      	ldr	r3, [r7, #4]
 801ee9a:	2b00      	cmp	r3, #0
 801ee9c:	d106      	bne.n	801eeac <tcp_rexmit_rto_prepare+0x1c>
 801ee9e:	4b31      	ldr	r3, [pc, #196]	; (801ef64 <tcp_rexmit_rto_prepare+0xd4>)
 801eea0:	f240 6263 	movw	r2, #1635	; 0x663
 801eea4:	4930      	ldr	r1, [pc, #192]	; (801ef68 <tcp_rexmit_rto_prepare+0xd8>)
 801eea6:	4831      	ldr	r0, [pc, #196]	; (801ef6c <tcp_rexmit_rto_prepare+0xdc>)
 801eea8:	f006 fc80 	bl	80257ac <iprintf>

  if (pcb->unacked == NULL) {
 801eeac:	687b      	ldr	r3, [r7, #4]
 801eeae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801eeb0:	2b00      	cmp	r3, #0
 801eeb2:	d102      	bne.n	801eeba <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801eeb4:	f06f 0305 	mvn.w	r3, #5
 801eeb8:	e050      	b.n	801ef5c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801eeba:	687b      	ldr	r3, [r7, #4]
 801eebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801eebe:	60fb      	str	r3, [r7, #12]
 801eec0:	e00b      	b.n	801eeda <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801eec2:	68f8      	ldr	r0, [r7, #12]
 801eec4:	f7ff fee6 	bl	801ec94 <tcp_output_segment_busy>
 801eec8:	4603      	mov	r3, r0
 801eeca:	2b00      	cmp	r3, #0
 801eecc:	d002      	beq.n	801eed4 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801eece:	f06f 0305 	mvn.w	r3, #5
 801eed2:	e043      	b.n	801ef5c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801eed4:	68fb      	ldr	r3, [r7, #12]
 801eed6:	681b      	ldr	r3, [r3, #0]
 801eed8:	60fb      	str	r3, [r7, #12]
 801eeda:	68fb      	ldr	r3, [r7, #12]
 801eedc:	681b      	ldr	r3, [r3, #0]
 801eede:	2b00      	cmp	r3, #0
 801eee0:	d1ef      	bne.n	801eec2 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801eee2:	68f8      	ldr	r0, [r7, #12]
 801eee4:	f7ff fed6 	bl	801ec94 <tcp_output_segment_busy>
 801eee8:	4603      	mov	r3, r0
 801eeea:	2b00      	cmp	r3, #0
 801eeec:	d002      	beq.n	801eef4 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801eeee:	f06f 0305 	mvn.w	r3, #5
 801eef2:	e033      	b.n	801ef5c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801eef4:	687b      	ldr	r3, [r7, #4]
 801eef6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801eef8:	68fb      	ldr	r3, [r7, #12]
 801eefa:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801eefc:	687b      	ldr	r3, [r7, #4]
 801eefe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801ef00:	687b      	ldr	r3, [r7, #4]
 801ef02:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801ef04:	687b      	ldr	r3, [r7, #4]
 801ef06:	2200      	movs	r2, #0
 801ef08:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801ef0a:	687b      	ldr	r3, [r7, #4]
 801ef0c:	8b5b      	ldrh	r3, [r3, #26]
 801ef0e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801ef12:	b29a      	uxth	r2, r3
 801ef14:	687b      	ldr	r3, [r7, #4]
 801ef16:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801ef18:	68fb      	ldr	r3, [r7, #12]
 801ef1a:	68db      	ldr	r3, [r3, #12]
 801ef1c:	685b      	ldr	r3, [r3, #4]
 801ef1e:	4618      	mov	r0, r3
 801ef20:	f7f8 fd01 	bl	8017926 <lwip_htonl>
 801ef24:	4604      	mov	r4, r0
 801ef26:	68fb      	ldr	r3, [r7, #12]
 801ef28:	891b      	ldrh	r3, [r3, #8]
 801ef2a:	461d      	mov	r5, r3
 801ef2c:	68fb      	ldr	r3, [r7, #12]
 801ef2e:	68db      	ldr	r3, [r3, #12]
 801ef30:	899b      	ldrh	r3, [r3, #12]
 801ef32:	b29b      	uxth	r3, r3
 801ef34:	4618      	mov	r0, r3
 801ef36:	f7f8 fce1 	bl	80178fc <lwip_htons>
 801ef3a:	4603      	mov	r3, r0
 801ef3c:	b2db      	uxtb	r3, r3
 801ef3e:	f003 0303 	and.w	r3, r3, #3
 801ef42:	2b00      	cmp	r3, #0
 801ef44:	d001      	beq.n	801ef4a <tcp_rexmit_rto_prepare+0xba>
 801ef46:	2301      	movs	r3, #1
 801ef48:	e000      	b.n	801ef4c <tcp_rexmit_rto_prepare+0xbc>
 801ef4a:	2300      	movs	r3, #0
 801ef4c:	442b      	add	r3, r5
 801ef4e:	18e2      	adds	r2, r4, r3
 801ef50:	687b      	ldr	r3, [r7, #4]
 801ef52:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801ef54:	687b      	ldr	r3, [r7, #4]
 801ef56:	2200      	movs	r2, #0
 801ef58:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801ef5a:	2300      	movs	r3, #0
}
 801ef5c:	4618      	mov	r0, r3
 801ef5e:	3710      	adds	r7, #16
 801ef60:	46bd      	mov	sp, r7
 801ef62:	bdb0      	pop	{r4, r5, r7, pc}
 801ef64:	0802cb20 	.word	0x0802cb20
 801ef68:	0802d15c 	.word	0x0802d15c
 801ef6c:	0802cb74 	.word	0x0802cb74

0801ef70 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801ef70:	b580      	push	{r7, lr}
 801ef72:	b082      	sub	sp, #8
 801ef74:	af00      	add	r7, sp, #0
 801ef76:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801ef78:	687b      	ldr	r3, [r7, #4]
 801ef7a:	2b00      	cmp	r3, #0
 801ef7c:	d106      	bne.n	801ef8c <tcp_rexmit_rto_commit+0x1c>
 801ef7e:	4b0d      	ldr	r3, [pc, #52]	; (801efb4 <tcp_rexmit_rto_commit+0x44>)
 801ef80:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801ef84:	490c      	ldr	r1, [pc, #48]	; (801efb8 <tcp_rexmit_rto_commit+0x48>)
 801ef86:	480d      	ldr	r0, [pc, #52]	; (801efbc <tcp_rexmit_rto_commit+0x4c>)
 801ef88:	f006 fc10 	bl	80257ac <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801ef8c:	687b      	ldr	r3, [r7, #4]
 801ef8e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801ef92:	2bff      	cmp	r3, #255	; 0xff
 801ef94:	d007      	beq.n	801efa6 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801ef96:	687b      	ldr	r3, [r7, #4]
 801ef98:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801ef9c:	3301      	adds	r3, #1
 801ef9e:	b2da      	uxtb	r2, r3
 801efa0:	687b      	ldr	r3, [r7, #4]
 801efa2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801efa6:	6878      	ldr	r0, [r7, #4]
 801efa8:	f7ff fc80 	bl	801e8ac <tcp_output>
}
 801efac:	bf00      	nop
 801efae:	3708      	adds	r7, #8
 801efb0:	46bd      	mov	sp, r7
 801efb2:	bd80      	pop	{r7, pc}
 801efb4:	0802cb20 	.word	0x0802cb20
 801efb8:	0802d180 	.word	0x0802d180
 801efbc:	0802cb74 	.word	0x0802cb74

0801efc0 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801efc0:	b580      	push	{r7, lr}
 801efc2:	b082      	sub	sp, #8
 801efc4:	af00      	add	r7, sp, #0
 801efc6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801efc8:	687b      	ldr	r3, [r7, #4]
 801efca:	2b00      	cmp	r3, #0
 801efcc:	d106      	bne.n	801efdc <tcp_rexmit_rto+0x1c>
 801efce:	4b0a      	ldr	r3, [pc, #40]	; (801eff8 <tcp_rexmit_rto+0x38>)
 801efd0:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801efd4:	4909      	ldr	r1, [pc, #36]	; (801effc <tcp_rexmit_rto+0x3c>)
 801efd6:	480a      	ldr	r0, [pc, #40]	; (801f000 <tcp_rexmit_rto+0x40>)
 801efd8:	f006 fbe8 	bl	80257ac <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801efdc:	6878      	ldr	r0, [r7, #4]
 801efde:	f7ff ff57 	bl	801ee90 <tcp_rexmit_rto_prepare>
 801efe2:	4603      	mov	r3, r0
 801efe4:	2b00      	cmp	r3, #0
 801efe6:	d102      	bne.n	801efee <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801efe8:	6878      	ldr	r0, [r7, #4]
 801efea:	f7ff ffc1 	bl	801ef70 <tcp_rexmit_rto_commit>
  }
}
 801efee:	bf00      	nop
 801eff0:	3708      	adds	r7, #8
 801eff2:	46bd      	mov	sp, r7
 801eff4:	bd80      	pop	{r7, pc}
 801eff6:	bf00      	nop
 801eff8:	0802cb20 	.word	0x0802cb20
 801effc:	0802d1a4 	.word	0x0802d1a4
 801f000:	0802cb74 	.word	0x0802cb74

0801f004 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801f004:	b590      	push	{r4, r7, lr}
 801f006:	b085      	sub	sp, #20
 801f008:	af00      	add	r7, sp, #0
 801f00a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801f00c:	687b      	ldr	r3, [r7, #4]
 801f00e:	2b00      	cmp	r3, #0
 801f010:	d106      	bne.n	801f020 <tcp_rexmit+0x1c>
 801f012:	4b2f      	ldr	r3, [pc, #188]	; (801f0d0 <tcp_rexmit+0xcc>)
 801f014:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801f018:	492e      	ldr	r1, [pc, #184]	; (801f0d4 <tcp_rexmit+0xd0>)
 801f01a:	482f      	ldr	r0, [pc, #188]	; (801f0d8 <tcp_rexmit+0xd4>)
 801f01c:	f006 fbc6 	bl	80257ac <iprintf>

  if (pcb->unacked == NULL) {
 801f020:	687b      	ldr	r3, [r7, #4]
 801f022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801f024:	2b00      	cmp	r3, #0
 801f026:	d102      	bne.n	801f02e <tcp_rexmit+0x2a>
    return ERR_VAL;
 801f028:	f06f 0305 	mvn.w	r3, #5
 801f02c:	e04c      	b.n	801f0c8 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801f02e:	687b      	ldr	r3, [r7, #4]
 801f030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801f032:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801f034:	68b8      	ldr	r0, [r7, #8]
 801f036:	f7ff fe2d 	bl	801ec94 <tcp_output_segment_busy>
 801f03a:	4603      	mov	r3, r0
 801f03c:	2b00      	cmp	r3, #0
 801f03e:	d002      	beq.n	801f046 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801f040:	f06f 0305 	mvn.w	r3, #5
 801f044:	e040      	b.n	801f0c8 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801f046:	68bb      	ldr	r3, [r7, #8]
 801f048:	681a      	ldr	r2, [r3, #0]
 801f04a:	687b      	ldr	r3, [r7, #4]
 801f04c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801f04e:	687b      	ldr	r3, [r7, #4]
 801f050:	336c      	adds	r3, #108	; 0x6c
 801f052:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801f054:	e002      	b.n	801f05c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801f056:	68fb      	ldr	r3, [r7, #12]
 801f058:	681b      	ldr	r3, [r3, #0]
 801f05a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801f05c:	68fb      	ldr	r3, [r7, #12]
 801f05e:	681b      	ldr	r3, [r3, #0]
 801f060:	2b00      	cmp	r3, #0
 801f062:	d011      	beq.n	801f088 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801f064:	68fb      	ldr	r3, [r7, #12]
 801f066:	681b      	ldr	r3, [r3, #0]
 801f068:	68db      	ldr	r3, [r3, #12]
 801f06a:	685b      	ldr	r3, [r3, #4]
 801f06c:	4618      	mov	r0, r3
 801f06e:	f7f8 fc5a 	bl	8017926 <lwip_htonl>
 801f072:	4604      	mov	r4, r0
 801f074:	68bb      	ldr	r3, [r7, #8]
 801f076:	68db      	ldr	r3, [r3, #12]
 801f078:	685b      	ldr	r3, [r3, #4]
 801f07a:	4618      	mov	r0, r3
 801f07c:	f7f8 fc53 	bl	8017926 <lwip_htonl>
 801f080:	4603      	mov	r3, r0
 801f082:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801f084:	2b00      	cmp	r3, #0
 801f086:	dbe6      	blt.n	801f056 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801f088:	68fb      	ldr	r3, [r7, #12]
 801f08a:	681a      	ldr	r2, [r3, #0]
 801f08c:	68bb      	ldr	r3, [r7, #8]
 801f08e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801f090:	68fb      	ldr	r3, [r7, #12]
 801f092:	68ba      	ldr	r2, [r7, #8]
 801f094:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801f096:	68bb      	ldr	r3, [r7, #8]
 801f098:	681b      	ldr	r3, [r3, #0]
 801f09a:	2b00      	cmp	r3, #0
 801f09c:	d103      	bne.n	801f0a6 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801f09e:	687b      	ldr	r3, [r7, #4]
 801f0a0:	2200      	movs	r2, #0
 801f0a2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801f0a6:	687b      	ldr	r3, [r7, #4]
 801f0a8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801f0ac:	2bff      	cmp	r3, #255	; 0xff
 801f0ae:	d007      	beq.n	801f0c0 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801f0b0:	687b      	ldr	r3, [r7, #4]
 801f0b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801f0b6:	3301      	adds	r3, #1
 801f0b8:	b2da      	uxtb	r2, r3
 801f0ba:	687b      	ldr	r3, [r7, #4]
 801f0bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801f0c0:	687b      	ldr	r3, [r7, #4]
 801f0c2:	2200      	movs	r2, #0
 801f0c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801f0c6:	2300      	movs	r3, #0
}
 801f0c8:	4618      	mov	r0, r3
 801f0ca:	3714      	adds	r7, #20
 801f0cc:	46bd      	mov	sp, r7
 801f0ce:	bd90      	pop	{r4, r7, pc}
 801f0d0:	0802cb20 	.word	0x0802cb20
 801f0d4:	0802d1c0 	.word	0x0802d1c0
 801f0d8:	0802cb74 	.word	0x0802cb74

0801f0dc <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801f0dc:	b580      	push	{r7, lr}
 801f0de:	b082      	sub	sp, #8
 801f0e0:	af00      	add	r7, sp, #0
 801f0e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801f0e4:	687b      	ldr	r3, [r7, #4]
 801f0e6:	2b00      	cmp	r3, #0
 801f0e8:	d106      	bne.n	801f0f8 <tcp_rexmit_fast+0x1c>
 801f0ea:	4b2a      	ldr	r3, [pc, #168]	; (801f194 <tcp_rexmit_fast+0xb8>)
 801f0ec:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801f0f0:	4929      	ldr	r1, [pc, #164]	; (801f198 <tcp_rexmit_fast+0xbc>)
 801f0f2:	482a      	ldr	r0, [pc, #168]	; (801f19c <tcp_rexmit_fast+0xc0>)
 801f0f4:	f006 fb5a 	bl	80257ac <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801f0f8:	687b      	ldr	r3, [r7, #4]
 801f0fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801f0fc:	2b00      	cmp	r3, #0
 801f0fe:	d044      	beq.n	801f18a <tcp_rexmit_fast+0xae>
 801f100:	687b      	ldr	r3, [r7, #4]
 801f102:	8b5b      	ldrh	r3, [r3, #26]
 801f104:	f003 0304 	and.w	r3, r3, #4
 801f108:	2b00      	cmp	r3, #0
 801f10a:	d13e      	bne.n	801f18a <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801f10c:	6878      	ldr	r0, [r7, #4]
 801f10e:	f7ff ff79 	bl	801f004 <tcp_rexmit>
 801f112:	4603      	mov	r3, r0
 801f114:	2b00      	cmp	r3, #0
 801f116:	d138      	bne.n	801f18a <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801f118:	687b      	ldr	r3, [r7, #4]
 801f11a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801f11e:	687b      	ldr	r3, [r7, #4]
 801f120:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801f124:	4293      	cmp	r3, r2
 801f126:	bf28      	it	cs
 801f128:	4613      	movcs	r3, r2
 801f12a:	b29b      	uxth	r3, r3
 801f12c:	0fda      	lsrs	r2, r3, #31
 801f12e:	4413      	add	r3, r2
 801f130:	105b      	asrs	r3, r3, #1
 801f132:	b29a      	uxth	r2, r3
 801f134:	687b      	ldr	r3, [r7, #4]
 801f136:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801f13a:	687b      	ldr	r3, [r7, #4]
 801f13c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801f140:	461a      	mov	r2, r3
 801f142:	687b      	ldr	r3, [r7, #4]
 801f144:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801f146:	005b      	lsls	r3, r3, #1
 801f148:	429a      	cmp	r2, r3
 801f14a:	d206      	bcs.n	801f15a <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801f14c:	687b      	ldr	r3, [r7, #4]
 801f14e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801f150:	005b      	lsls	r3, r3, #1
 801f152:	b29a      	uxth	r2, r3
 801f154:	687b      	ldr	r3, [r7, #4]
 801f156:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801f15a:	687b      	ldr	r3, [r7, #4]
 801f15c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801f160:	687b      	ldr	r3, [r7, #4]
 801f162:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801f164:	4619      	mov	r1, r3
 801f166:	0049      	lsls	r1, r1, #1
 801f168:	440b      	add	r3, r1
 801f16a:	b29b      	uxth	r3, r3
 801f16c:	4413      	add	r3, r2
 801f16e:	b29a      	uxth	r2, r3
 801f170:	687b      	ldr	r3, [r7, #4]
 801f172:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801f176:	687b      	ldr	r3, [r7, #4]
 801f178:	8b5b      	ldrh	r3, [r3, #26]
 801f17a:	f043 0304 	orr.w	r3, r3, #4
 801f17e:	b29a      	uxth	r2, r3
 801f180:	687b      	ldr	r3, [r7, #4]
 801f182:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801f184:	687b      	ldr	r3, [r7, #4]
 801f186:	2200      	movs	r2, #0
 801f188:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801f18a:	bf00      	nop
 801f18c:	3708      	adds	r7, #8
 801f18e:	46bd      	mov	sp, r7
 801f190:	bd80      	pop	{r7, pc}
 801f192:	bf00      	nop
 801f194:	0802cb20 	.word	0x0802cb20
 801f198:	0802d1d8 	.word	0x0802d1d8
 801f19c:	0802cb74 	.word	0x0802cb74

0801f1a0 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801f1a0:	b580      	push	{r7, lr}
 801f1a2:	b086      	sub	sp, #24
 801f1a4:	af00      	add	r7, sp, #0
 801f1a6:	60f8      	str	r0, [r7, #12]
 801f1a8:	607b      	str	r3, [r7, #4]
 801f1aa:	460b      	mov	r3, r1
 801f1ac:	817b      	strh	r3, [r7, #10]
 801f1ae:	4613      	mov	r3, r2
 801f1b0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801f1b2:	897a      	ldrh	r2, [r7, #10]
 801f1b4:	893b      	ldrh	r3, [r7, #8]
 801f1b6:	4413      	add	r3, r2
 801f1b8:	b29b      	uxth	r3, r3
 801f1ba:	3314      	adds	r3, #20
 801f1bc:	b29b      	uxth	r3, r3
 801f1be:	f44f 7220 	mov.w	r2, #640	; 0x280
 801f1c2:	4619      	mov	r1, r3
 801f1c4:	2022      	movs	r0, #34	; 0x22
 801f1c6:	f7f9 fc95 	bl	8018af4 <pbuf_alloc>
 801f1ca:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801f1cc:	697b      	ldr	r3, [r7, #20]
 801f1ce:	2b00      	cmp	r3, #0
 801f1d0:	d04d      	beq.n	801f26e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801f1d2:	897b      	ldrh	r3, [r7, #10]
 801f1d4:	3313      	adds	r3, #19
 801f1d6:	697a      	ldr	r2, [r7, #20]
 801f1d8:	8952      	ldrh	r2, [r2, #10]
 801f1da:	4293      	cmp	r3, r2
 801f1dc:	db06      	blt.n	801f1ec <tcp_output_alloc_header_common+0x4c>
 801f1de:	4b26      	ldr	r3, [pc, #152]	; (801f278 <tcp_output_alloc_header_common+0xd8>)
 801f1e0:	f240 7223 	movw	r2, #1827	; 0x723
 801f1e4:	4925      	ldr	r1, [pc, #148]	; (801f27c <tcp_output_alloc_header_common+0xdc>)
 801f1e6:	4826      	ldr	r0, [pc, #152]	; (801f280 <tcp_output_alloc_header_common+0xe0>)
 801f1e8:	f006 fae0 	bl	80257ac <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801f1ec:	697b      	ldr	r3, [r7, #20]
 801f1ee:	685b      	ldr	r3, [r3, #4]
 801f1f0:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801f1f2:	8c3b      	ldrh	r3, [r7, #32]
 801f1f4:	4618      	mov	r0, r3
 801f1f6:	f7f8 fb81 	bl	80178fc <lwip_htons>
 801f1fa:	4603      	mov	r3, r0
 801f1fc:	461a      	mov	r2, r3
 801f1fe:	693b      	ldr	r3, [r7, #16]
 801f200:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801f202:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801f204:	4618      	mov	r0, r3
 801f206:	f7f8 fb79 	bl	80178fc <lwip_htons>
 801f20a:	4603      	mov	r3, r0
 801f20c:	461a      	mov	r2, r3
 801f20e:	693b      	ldr	r3, [r7, #16]
 801f210:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801f212:	693b      	ldr	r3, [r7, #16]
 801f214:	687a      	ldr	r2, [r7, #4]
 801f216:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801f218:	68f8      	ldr	r0, [r7, #12]
 801f21a:	f7f8 fb84 	bl	8017926 <lwip_htonl>
 801f21e:	4602      	mov	r2, r0
 801f220:	693b      	ldr	r3, [r7, #16]
 801f222:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801f224:	897b      	ldrh	r3, [r7, #10]
 801f226:	089b      	lsrs	r3, r3, #2
 801f228:	b29b      	uxth	r3, r3
 801f22a:	3305      	adds	r3, #5
 801f22c:	b29b      	uxth	r3, r3
 801f22e:	031b      	lsls	r3, r3, #12
 801f230:	b29a      	uxth	r2, r3
 801f232:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801f236:	b29b      	uxth	r3, r3
 801f238:	4313      	orrs	r3, r2
 801f23a:	b29b      	uxth	r3, r3
 801f23c:	4618      	mov	r0, r3
 801f23e:	f7f8 fb5d 	bl	80178fc <lwip_htons>
 801f242:	4603      	mov	r3, r0
 801f244:	461a      	mov	r2, r3
 801f246:	693b      	ldr	r3, [r7, #16]
 801f248:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801f24a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801f24c:	4618      	mov	r0, r3
 801f24e:	f7f8 fb55 	bl	80178fc <lwip_htons>
 801f252:	4603      	mov	r3, r0
 801f254:	461a      	mov	r2, r3
 801f256:	693b      	ldr	r3, [r7, #16]
 801f258:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801f25a:	693b      	ldr	r3, [r7, #16]
 801f25c:	2200      	movs	r2, #0
 801f25e:	741a      	strb	r2, [r3, #16]
 801f260:	2200      	movs	r2, #0
 801f262:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801f264:	693b      	ldr	r3, [r7, #16]
 801f266:	2200      	movs	r2, #0
 801f268:	749a      	strb	r2, [r3, #18]
 801f26a:	2200      	movs	r2, #0
 801f26c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801f26e:	697b      	ldr	r3, [r7, #20]
}
 801f270:	4618      	mov	r0, r3
 801f272:	3718      	adds	r7, #24
 801f274:	46bd      	mov	sp, r7
 801f276:	bd80      	pop	{r7, pc}
 801f278:	0802cb20 	.word	0x0802cb20
 801f27c:	0802d1f8 	.word	0x0802d1f8
 801f280:	0802cb74 	.word	0x0802cb74

0801f284 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801f284:	b5b0      	push	{r4, r5, r7, lr}
 801f286:	b08a      	sub	sp, #40	; 0x28
 801f288:	af04      	add	r7, sp, #16
 801f28a:	60f8      	str	r0, [r7, #12]
 801f28c:	607b      	str	r3, [r7, #4]
 801f28e:	460b      	mov	r3, r1
 801f290:	817b      	strh	r3, [r7, #10]
 801f292:	4613      	mov	r3, r2
 801f294:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801f296:	68fb      	ldr	r3, [r7, #12]
 801f298:	2b00      	cmp	r3, #0
 801f29a:	d106      	bne.n	801f2aa <tcp_output_alloc_header+0x26>
 801f29c:	4b15      	ldr	r3, [pc, #84]	; (801f2f4 <tcp_output_alloc_header+0x70>)
 801f29e:	f240 7242 	movw	r2, #1858	; 0x742
 801f2a2:	4915      	ldr	r1, [pc, #84]	; (801f2f8 <tcp_output_alloc_header+0x74>)
 801f2a4:	4815      	ldr	r0, [pc, #84]	; (801f2fc <tcp_output_alloc_header+0x78>)
 801f2a6:	f006 fa81 	bl	80257ac <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801f2aa:	68fb      	ldr	r3, [r7, #12]
 801f2ac:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801f2ae:	68fb      	ldr	r3, [r7, #12]
 801f2b0:	8adb      	ldrh	r3, [r3, #22]
 801f2b2:	68fa      	ldr	r2, [r7, #12]
 801f2b4:	8b12      	ldrh	r2, [r2, #24]
 801f2b6:	68f9      	ldr	r1, [r7, #12]
 801f2b8:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801f2ba:	893d      	ldrh	r5, [r7, #8]
 801f2bc:	897c      	ldrh	r4, [r7, #10]
 801f2be:	9103      	str	r1, [sp, #12]
 801f2c0:	2110      	movs	r1, #16
 801f2c2:	9102      	str	r1, [sp, #8]
 801f2c4:	9201      	str	r2, [sp, #4]
 801f2c6:	9300      	str	r3, [sp, #0]
 801f2c8:	687b      	ldr	r3, [r7, #4]
 801f2ca:	462a      	mov	r2, r5
 801f2cc:	4621      	mov	r1, r4
 801f2ce:	f7ff ff67 	bl	801f1a0 <tcp_output_alloc_header_common>
 801f2d2:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801f2d4:	697b      	ldr	r3, [r7, #20]
 801f2d6:	2b00      	cmp	r3, #0
 801f2d8:	d006      	beq.n	801f2e8 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801f2da:	68fb      	ldr	r3, [r7, #12]
 801f2dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f2de:	68fa      	ldr	r2, [r7, #12]
 801f2e0:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801f2e2:	441a      	add	r2, r3
 801f2e4:	68fb      	ldr	r3, [r7, #12]
 801f2e6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801f2e8:	697b      	ldr	r3, [r7, #20]
}
 801f2ea:	4618      	mov	r0, r3
 801f2ec:	3718      	adds	r7, #24
 801f2ee:	46bd      	mov	sp, r7
 801f2f0:	bdb0      	pop	{r4, r5, r7, pc}
 801f2f2:	bf00      	nop
 801f2f4:	0802cb20 	.word	0x0802cb20
 801f2f8:	0802d228 	.word	0x0802d228
 801f2fc:	0802cb74 	.word	0x0802cb74

0801f300 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801f300:	b580      	push	{r7, lr}
 801f302:	b088      	sub	sp, #32
 801f304:	af00      	add	r7, sp, #0
 801f306:	60f8      	str	r0, [r7, #12]
 801f308:	60b9      	str	r1, [r7, #8]
 801f30a:	4611      	mov	r1, r2
 801f30c:	461a      	mov	r2, r3
 801f30e:	460b      	mov	r3, r1
 801f310:	71fb      	strb	r3, [r7, #7]
 801f312:	4613      	mov	r3, r2
 801f314:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801f316:	2300      	movs	r3, #0
 801f318:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801f31a:	68bb      	ldr	r3, [r7, #8]
 801f31c:	2b00      	cmp	r3, #0
 801f31e:	d106      	bne.n	801f32e <tcp_output_fill_options+0x2e>
 801f320:	4b13      	ldr	r3, [pc, #76]	; (801f370 <tcp_output_fill_options+0x70>)
 801f322:	f240 7256 	movw	r2, #1878	; 0x756
 801f326:	4913      	ldr	r1, [pc, #76]	; (801f374 <tcp_output_fill_options+0x74>)
 801f328:	4813      	ldr	r0, [pc, #76]	; (801f378 <tcp_output_fill_options+0x78>)
 801f32a:	f006 fa3f 	bl	80257ac <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801f32e:	68bb      	ldr	r3, [r7, #8]
 801f330:	685b      	ldr	r3, [r3, #4]
 801f332:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801f334:	69bb      	ldr	r3, [r7, #24]
 801f336:	3314      	adds	r3, #20
 801f338:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801f33a:	69bb      	ldr	r3, [r7, #24]
 801f33c:	f103 0214 	add.w	r2, r3, #20
 801f340:	8bfb      	ldrh	r3, [r7, #30]
 801f342:	009b      	lsls	r3, r3, #2
 801f344:	4619      	mov	r1, r3
 801f346:	79fb      	ldrb	r3, [r7, #7]
 801f348:	009b      	lsls	r3, r3, #2
 801f34a:	f003 0304 	and.w	r3, r3, #4
 801f34e:	440b      	add	r3, r1
 801f350:	4413      	add	r3, r2
 801f352:	697a      	ldr	r2, [r7, #20]
 801f354:	429a      	cmp	r2, r3
 801f356:	d006      	beq.n	801f366 <tcp_output_fill_options+0x66>
 801f358:	4b05      	ldr	r3, [pc, #20]	; (801f370 <tcp_output_fill_options+0x70>)
 801f35a:	f240 7275 	movw	r2, #1909	; 0x775
 801f35e:	4907      	ldr	r1, [pc, #28]	; (801f37c <tcp_output_fill_options+0x7c>)
 801f360:	4805      	ldr	r0, [pc, #20]	; (801f378 <tcp_output_fill_options+0x78>)
 801f362:	f006 fa23 	bl	80257ac <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801f366:	bf00      	nop
 801f368:	3720      	adds	r7, #32
 801f36a:	46bd      	mov	sp, r7
 801f36c:	bd80      	pop	{r7, pc}
 801f36e:	bf00      	nop
 801f370:	0802cb20 	.word	0x0802cb20
 801f374:	0802d250 	.word	0x0802d250
 801f378:	0802cb74 	.word	0x0802cb74
 801f37c:	0802d148 	.word	0x0802d148

0801f380 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801f380:	b580      	push	{r7, lr}
 801f382:	b08a      	sub	sp, #40	; 0x28
 801f384:	af04      	add	r7, sp, #16
 801f386:	60f8      	str	r0, [r7, #12]
 801f388:	60b9      	str	r1, [r7, #8]
 801f38a:	607a      	str	r2, [r7, #4]
 801f38c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801f38e:	68bb      	ldr	r3, [r7, #8]
 801f390:	2b00      	cmp	r3, #0
 801f392:	d106      	bne.n	801f3a2 <tcp_output_control_segment+0x22>
 801f394:	4b1c      	ldr	r3, [pc, #112]	; (801f408 <tcp_output_control_segment+0x88>)
 801f396:	f240 7287 	movw	r2, #1927	; 0x787
 801f39a:	491c      	ldr	r1, [pc, #112]	; (801f40c <tcp_output_control_segment+0x8c>)
 801f39c:	481c      	ldr	r0, [pc, #112]	; (801f410 <tcp_output_control_segment+0x90>)
 801f39e:	f006 fa05 	bl	80257ac <iprintf>

  netif = tcp_route(pcb, src, dst);
 801f3a2:	683a      	ldr	r2, [r7, #0]
 801f3a4:	6879      	ldr	r1, [r7, #4]
 801f3a6:	68f8      	ldr	r0, [r7, #12]
 801f3a8:	f7fe fae8 	bl	801d97c <tcp_route>
 801f3ac:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801f3ae:	693b      	ldr	r3, [r7, #16]
 801f3b0:	2b00      	cmp	r3, #0
 801f3b2:	d102      	bne.n	801f3ba <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801f3b4:	23fc      	movs	r3, #252	; 0xfc
 801f3b6:	75fb      	strb	r3, [r7, #23]
 801f3b8:	e01c      	b.n	801f3f4 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801f3ba:	68fb      	ldr	r3, [r7, #12]
 801f3bc:	2b00      	cmp	r3, #0
 801f3be:	d006      	beq.n	801f3ce <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801f3c0:	68fb      	ldr	r3, [r7, #12]
 801f3c2:	7adb      	ldrb	r3, [r3, #11]
 801f3c4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801f3c6:	68fb      	ldr	r3, [r7, #12]
 801f3c8:	7a9b      	ldrb	r3, [r3, #10]
 801f3ca:	757b      	strb	r3, [r7, #21]
 801f3cc:	e003      	b.n	801f3d6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801f3ce:	23ff      	movs	r3, #255	; 0xff
 801f3d0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801f3d2:	2300      	movs	r3, #0
 801f3d4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801f3d6:	7dba      	ldrb	r2, [r7, #22]
 801f3d8:	693b      	ldr	r3, [r7, #16]
 801f3da:	9302      	str	r3, [sp, #8]
 801f3dc:	2306      	movs	r3, #6
 801f3de:	9301      	str	r3, [sp, #4]
 801f3e0:	7d7b      	ldrb	r3, [r7, #21]
 801f3e2:	9300      	str	r3, [sp, #0]
 801f3e4:	4613      	mov	r3, r2
 801f3e6:	683a      	ldr	r2, [r7, #0]
 801f3e8:	6879      	ldr	r1, [r7, #4]
 801f3ea:	68b8      	ldr	r0, [r7, #8]
 801f3ec:	f004 f990 	bl	8023710 <ip4_output_if>
 801f3f0:	4603      	mov	r3, r0
 801f3f2:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801f3f4:	68b8      	ldr	r0, [r7, #8]
 801f3f6:	f7f9 fe61 	bl	80190bc <pbuf_free>
  return err;
 801f3fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801f3fe:	4618      	mov	r0, r3
 801f400:	3718      	adds	r7, #24
 801f402:	46bd      	mov	sp, r7
 801f404:	bd80      	pop	{r7, pc}
 801f406:	bf00      	nop
 801f408:	0802cb20 	.word	0x0802cb20
 801f40c:	0802d278 	.word	0x0802d278
 801f410:	0802cb74 	.word	0x0802cb74

0801f414 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801f414:	b590      	push	{r4, r7, lr}
 801f416:	b08b      	sub	sp, #44	; 0x2c
 801f418:	af04      	add	r7, sp, #16
 801f41a:	60f8      	str	r0, [r7, #12]
 801f41c:	60b9      	str	r1, [r7, #8]
 801f41e:	607a      	str	r2, [r7, #4]
 801f420:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801f422:	683b      	ldr	r3, [r7, #0]
 801f424:	2b00      	cmp	r3, #0
 801f426:	d106      	bne.n	801f436 <tcp_rst+0x22>
 801f428:	4b1f      	ldr	r3, [pc, #124]	; (801f4a8 <tcp_rst+0x94>)
 801f42a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801f42e:	491f      	ldr	r1, [pc, #124]	; (801f4ac <tcp_rst+0x98>)
 801f430:	481f      	ldr	r0, [pc, #124]	; (801f4b0 <tcp_rst+0x9c>)
 801f432:	f006 f9bb 	bl	80257ac <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801f436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f438:	2b00      	cmp	r3, #0
 801f43a:	d106      	bne.n	801f44a <tcp_rst+0x36>
 801f43c:	4b1a      	ldr	r3, [pc, #104]	; (801f4a8 <tcp_rst+0x94>)
 801f43e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801f442:	491c      	ldr	r1, [pc, #112]	; (801f4b4 <tcp_rst+0xa0>)
 801f444:	481a      	ldr	r0, [pc, #104]	; (801f4b0 <tcp_rst+0x9c>)
 801f446:	f006 f9b1 	bl	80257ac <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801f44a:	2300      	movs	r3, #0
 801f44c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801f44e:	f246 0308 	movw	r3, #24584	; 0x6008
 801f452:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801f454:	7dfb      	ldrb	r3, [r7, #23]
 801f456:	b29c      	uxth	r4, r3
 801f458:	68b8      	ldr	r0, [r7, #8]
 801f45a:	f7f8 fa64 	bl	8017926 <lwip_htonl>
 801f45e:	4602      	mov	r2, r0
 801f460:	8abb      	ldrh	r3, [r7, #20]
 801f462:	9303      	str	r3, [sp, #12]
 801f464:	2314      	movs	r3, #20
 801f466:	9302      	str	r3, [sp, #8]
 801f468:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801f46a:	9301      	str	r3, [sp, #4]
 801f46c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801f46e:	9300      	str	r3, [sp, #0]
 801f470:	4613      	mov	r3, r2
 801f472:	2200      	movs	r2, #0
 801f474:	4621      	mov	r1, r4
 801f476:	6878      	ldr	r0, [r7, #4]
 801f478:	f7ff fe92 	bl	801f1a0 <tcp_output_alloc_header_common>
 801f47c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801f47e:	693b      	ldr	r3, [r7, #16]
 801f480:	2b00      	cmp	r3, #0
 801f482:	d00c      	beq.n	801f49e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801f484:	7dfb      	ldrb	r3, [r7, #23]
 801f486:	2200      	movs	r2, #0
 801f488:	6939      	ldr	r1, [r7, #16]
 801f48a:	68f8      	ldr	r0, [r7, #12]
 801f48c:	f7ff ff38 	bl	801f300 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801f490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f492:	683a      	ldr	r2, [r7, #0]
 801f494:	6939      	ldr	r1, [r7, #16]
 801f496:	68f8      	ldr	r0, [r7, #12]
 801f498:	f7ff ff72 	bl	801f380 <tcp_output_control_segment>
 801f49c:	e000      	b.n	801f4a0 <tcp_rst+0x8c>
    return;
 801f49e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801f4a0:	371c      	adds	r7, #28
 801f4a2:	46bd      	mov	sp, r7
 801f4a4:	bd90      	pop	{r4, r7, pc}
 801f4a6:	bf00      	nop
 801f4a8:	0802cb20 	.word	0x0802cb20
 801f4ac:	0802d2a4 	.word	0x0802d2a4
 801f4b0:	0802cb74 	.word	0x0802cb74
 801f4b4:	0802d2c0 	.word	0x0802d2c0

0801f4b8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801f4b8:	b590      	push	{r4, r7, lr}
 801f4ba:	b087      	sub	sp, #28
 801f4bc:	af00      	add	r7, sp, #0
 801f4be:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801f4c0:	2300      	movs	r3, #0
 801f4c2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801f4c4:	2300      	movs	r3, #0
 801f4c6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801f4c8:	687b      	ldr	r3, [r7, #4]
 801f4ca:	2b00      	cmp	r3, #0
 801f4cc:	d106      	bne.n	801f4dc <tcp_send_empty_ack+0x24>
 801f4ce:	4b28      	ldr	r3, [pc, #160]	; (801f570 <tcp_send_empty_ack+0xb8>)
 801f4d0:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801f4d4:	4927      	ldr	r1, [pc, #156]	; (801f574 <tcp_send_empty_ack+0xbc>)
 801f4d6:	4828      	ldr	r0, [pc, #160]	; (801f578 <tcp_send_empty_ack+0xc0>)
 801f4d8:	f006 f968 	bl	80257ac <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801f4dc:	7dfb      	ldrb	r3, [r7, #23]
 801f4de:	009b      	lsls	r3, r3, #2
 801f4e0:	b2db      	uxtb	r3, r3
 801f4e2:	f003 0304 	and.w	r3, r3, #4
 801f4e6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801f4e8:	7d7b      	ldrb	r3, [r7, #21]
 801f4ea:	b29c      	uxth	r4, r3
 801f4ec:	687b      	ldr	r3, [r7, #4]
 801f4ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801f4f0:	4618      	mov	r0, r3
 801f4f2:	f7f8 fa18 	bl	8017926 <lwip_htonl>
 801f4f6:	4603      	mov	r3, r0
 801f4f8:	2200      	movs	r2, #0
 801f4fa:	4621      	mov	r1, r4
 801f4fc:	6878      	ldr	r0, [r7, #4]
 801f4fe:	f7ff fec1 	bl	801f284 <tcp_output_alloc_header>
 801f502:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801f504:	693b      	ldr	r3, [r7, #16]
 801f506:	2b00      	cmp	r3, #0
 801f508:	d109      	bne.n	801f51e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801f50a:	687b      	ldr	r3, [r7, #4]
 801f50c:	8b5b      	ldrh	r3, [r3, #26]
 801f50e:	f043 0303 	orr.w	r3, r3, #3
 801f512:	b29a      	uxth	r2, r3
 801f514:	687b      	ldr	r3, [r7, #4]
 801f516:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801f518:	f06f 0301 	mvn.w	r3, #1
 801f51c:	e023      	b.n	801f566 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801f51e:	7dbb      	ldrb	r3, [r7, #22]
 801f520:	7dfa      	ldrb	r2, [r7, #23]
 801f522:	6939      	ldr	r1, [r7, #16]
 801f524:	6878      	ldr	r0, [r7, #4]
 801f526:	f7ff feeb 	bl	801f300 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801f52a:	687a      	ldr	r2, [r7, #4]
 801f52c:	687b      	ldr	r3, [r7, #4]
 801f52e:	3304      	adds	r3, #4
 801f530:	6939      	ldr	r1, [r7, #16]
 801f532:	6878      	ldr	r0, [r7, #4]
 801f534:	f7ff ff24 	bl	801f380 <tcp_output_control_segment>
 801f538:	4603      	mov	r3, r0
 801f53a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801f53c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801f540:	2b00      	cmp	r3, #0
 801f542:	d007      	beq.n	801f554 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801f544:	687b      	ldr	r3, [r7, #4]
 801f546:	8b5b      	ldrh	r3, [r3, #26]
 801f548:	f043 0303 	orr.w	r3, r3, #3
 801f54c:	b29a      	uxth	r2, r3
 801f54e:	687b      	ldr	r3, [r7, #4]
 801f550:	835a      	strh	r2, [r3, #26]
 801f552:	e006      	b.n	801f562 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801f554:	687b      	ldr	r3, [r7, #4]
 801f556:	8b5b      	ldrh	r3, [r3, #26]
 801f558:	f023 0303 	bic.w	r3, r3, #3
 801f55c:	b29a      	uxth	r2, r3
 801f55e:	687b      	ldr	r3, [r7, #4]
 801f560:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801f562:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801f566:	4618      	mov	r0, r3
 801f568:	371c      	adds	r7, #28
 801f56a:	46bd      	mov	sp, r7
 801f56c:	bd90      	pop	{r4, r7, pc}
 801f56e:	bf00      	nop
 801f570:	0802cb20 	.word	0x0802cb20
 801f574:	0802d2dc 	.word	0x0802d2dc
 801f578:	0802cb74 	.word	0x0802cb74

0801f57c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801f57c:	b590      	push	{r4, r7, lr}
 801f57e:	b087      	sub	sp, #28
 801f580:	af00      	add	r7, sp, #0
 801f582:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801f584:	2300      	movs	r3, #0
 801f586:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801f588:	687b      	ldr	r3, [r7, #4]
 801f58a:	2b00      	cmp	r3, #0
 801f58c:	d106      	bne.n	801f59c <tcp_keepalive+0x20>
 801f58e:	4b18      	ldr	r3, [pc, #96]	; (801f5f0 <tcp_keepalive+0x74>)
 801f590:	f640 0224 	movw	r2, #2084	; 0x824
 801f594:	4917      	ldr	r1, [pc, #92]	; (801f5f4 <tcp_keepalive+0x78>)
 801f596:	4818      	ldr	r0, [pc, #96]	; (801f5f8 <tcp_keepalive+0x7c>)
 801f598:	f006 f908 	bl	80257ac <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801f59c:	7dfb      	ldrb	r3, [r7, #23]
 801f59e:	b29c      	uxth	r4, r3
 801f5a0:	687b      	ldr	r3, [r7, #4]
 801f5a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801f5a4:	3b01      	subs	r3, #1
 801f5a6:	4618      	mov	r0, r3
 801f5a8:	f7f8 f9bd 	bl	8017926 <lwip_htonl>
 801f5ac:	4603      	mov	r3, r0
 801f5ae:	2200      	movs	r2, #0
 801f5b0:	4621      	mov	r1, r4
 801f5b2:	6878      	ldr	r0, [r7, #4]
 801f5b4:	f7ff fe66 	bl	801f284 <tcp_output_alloc_header>
 801f5b8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801f5ba:	693b      	ldr	r3, [r7, #16]
 801f5bc:	2b00      	cmp	r3, #0
 801f5be:	d102      	bne.n	801f5c6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801f5c0:	f04f 33ff 	mov.w	r3, #4294967295
 801f5c4:	e010      	b.n	801f5e8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801f5c6:	7dfb      	ldrb	r3, [r7, #23]
 801f5c8:	2200      	movs	r2, #0
 801f5ca:	6939      	ldr	r1, [r7, #16]
 801f5cc:	6878      	ldr	r0, [r7, #4]
 801f5ce:	f7ff fe97 	bl	801f300 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801f5d2:	687a      	ldr	r2, [r7, #4]
 801f5d4:	687b      	ldr	r3, [r7, #4]
 801f5d6:	3304      	adds	r3, #4
 801f5d8:	6939      	ldr	r1, [r7, #16]
 801f5da:	6878      	ldr	r0, [r7, #4]
 801f5dc:	f7ff fed0 	bl	801f380 <tcp_output_control_segment>
 801f5e0:	4603      	mov	r3, r0
 801f5e2:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801f5e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801f5e8:	4618      	mov	r0, r3
 801f5ea:	371c      	adds	r7, #28
 801f5ec:	46bd      	mov	sp, r7
 801f5ee:	bd90      	pop	{r4, r7, pc}
 801f5f0:	0802cb20 	.word	0x0802cb20
 801f5f4:	0802d2fc 	.word	0x0802d2fc
 801f5f8:	0802cb74 	.word	0x0802cb74

0801f5fc <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801f5fc:	b590      	push	{r4, r7, lr}
 801f5fe:	b08b      	sub	sp, #44	; 0x2c
 801f600:	af00      	add	r7, sp, #0
 801f602:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801f604:	2300      	movs	r3, #0
 801f606:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801f60a:	687b      	ldr	r3, [r7, #4]
 801f60c:	2b00      	cmp	r3, #0
 801f60e:	d106      	bne.n	801f61e <tcp_zero_window_probe+0x22>
 801f610:	4b4c      	ldr	r3, [pc, #304]	; (801f744 <tcp_zero_window_probe+0x148>)
 801f612:	f640 024f 	movw	r2, #2127	; 0x84f
 801f616:	494c      	ldr	r1, [pc, #304]	; (801f748 <tcp_zero_window_probe+0x14c>)
 801f618:	484c      	ldr	r0, [pc, #304]	; (801f74c <tcp_zero_window_probe+0x150>)
 801f61a:	f006 f8c7 	bl	80257ac <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801f61e:	687b      	ldr	r3, [r7, #4]
 801f620:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801f622:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801f624:	6a3b      	ldr	r3, [r7, #32]
 801f626:	2b00      	cmp	r3, #0
 801f628:	d101      	bne.n	801f62e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801f62a:	2300      	movs	r3, #0
 801f62c:	e086      	b.n	801f73c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801f62e:	687b      	ldr	r3, [r7, #4]
 801f630:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801f634:	2bff      	cmp	r3, #255	; 0xff
 801f636:	d007      	beq.n	801f648 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801f638:	687b      	ldr	r3, [r7, #4]
 801f63a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801f63e:	3301      	adds	r3, #1
 801f640:	b2da      	uxtb	r2, r3
 801f642:	687b      	ldr	r3, [r7, #4]
 801f644:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801f648:	6a3b      	ldr	r3, [r7, #32]
 801f64a:	68db      	ldr	r3, [r3, #12]
 801f64c:	899b      	ldrh	r3, [r3, #12]
 801f64e:	b29b      	uxth	r3, r3
 801f650:	4618      	mov	r0, r3
 801f652:	f7f8 f953 	bl	80178fc <lwip_htons>
 801f656:	4603      	mov	r3, r0
 801f658:	b2db      	uxtb	r3, r3
 801f65a:	f003 0301 	and.w	r3, r3, #1
 801f65e:	2b00      	cmp	r3, #0
 801f660:	d005      	beq.n	801f66e <tcp_zero_window_probe+0x72>
 801f662:	6a3b      	ldr	r3, [r7, #32]
 801f664:	891b      	ldrh	r3, [r3, #8]
 801f666:	2b00      	cmp	r3, #0
 801f668:	d101      	bne.n	801f66e <tcp_zero_window_probe+0x72>
 801f66a:	2301      	movs	r3, #1
 801f66c:	e000      	b.n	801f670 <tcp_zero_window_probe+0x74>
 801f66e:	2300      	movs	r3, #0
 801f670:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801f672:	7ffb      	ldrb	r3, [r7, #31]
 801f674:	2b00      	cmp	r3, #0
 801f676:	bf0c      	ite	eq
 801f678:	2301      	moveq	r3, #1
 801f67a:	2300      	movne	r3, #0
 801f67c:	b2db      	uxtb	r3, r3
 801f67e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801f680:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801f684:	b299      	uxth	r1, r3
 801f686:	6a3b      	ldr	r3, [r7, #32]
 801f688:	68db      	ldr	r3, [r3, #12]
 801f68a:	685b      	ldr	r3, [r3, #4]
 801f68c:	8bba      	ldrh	r2, [r7, #28]
 801f68e:	6878      	ldr	r0, [r7, #4]
 801f690:	f7ff fdf8 	bl	801f284 <tcp_output_alloc_header>
 801f694:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801f696:	69bb      	ldr	r3, [r7, #24]
 801f698:	2b00      	cmp	r3, #0
 801f69a:	d102      	bne.n	801f6a2 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801f69c:	f04f 33ff 	mov.w	r3, #4294967295
 801f6a0:	e04c      	b.n	801f73c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801f6a2:	69bb      	ldr	r3, [r7, #24]
 801f6a4:	685b      	ldr	r3, [r3, #4]
 801f6a6:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801f6a8:	7ffb      	ldrb	r3, [r7, #31]
 801f6aa:	2b00      	cmp	r3, #0
 801f6ac:	d011      	beq.n	801f6d2 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801f6ae:	697b      	ldr	r3, [r7, #20]
 801f6b0:	899b      	ldrh	r3, [r3, #12]
 801f6b2:	b29b      	uxth	r3, r3
 801f6b4:	b21b      	sxth	r3, r3
 801f6b6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801f6ba:	b21c      	sxth	r4, r3
 801f6bc:	2011      	movs	r0, #17
 801f6be:	f7f8 f91d 	bl	80178fc <lwip_htons>
 801f6c2:	4603      	mov	r3, r0
 801f6c4:	b21b      	sxth	r3, r3
 801f6c6:	4323      	orrs	r3, r4
 801f6c8:	b21b      	sxth	r3, r3
 801f6ca:	b29a      	uxth	r2, r3
 801f6cc:	697b      	ldr	r3, [r7, #20]
 801f6ce:	819a      	strh	r2, [r3, #12]
 801f6d0:	e010      	b.n	801f6f4 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801f6d2:	69bb      	ldr	r3, [r7, #24]
 801f6d4:	685b      	ldr	r3, [r3, #4]
 801f6d6:	3314      	adds	r3, #20
 801f6d8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801f6da:	6a3b      	ldr	r3, [r7, #32]
 801f6dc:	6858      	ldr	r0, [r3, #4]
 801f6de:	6a3b      	ldr	r3, [r7, #32]
 801f6e0:	685b      	ldr	r3, [r3, #4]
 801f6e2:	891a      	ldrh	r2, [r3, #8]
 801f6e4:	6a3b      	ldr	r3, [r7, #32]
 801f6e6:	891b      	ldrh	r3, [r3, #8]
 801f6e8:	1ad3      	subs	r3, r2, r3
 801f6ea:	b29b      	uxth	r3, r3
 801f6ec:	2201      	movs	r2, #1
 801f6ee:	6939      	ldr	r1, [r7, #16]
 801f6f0:	f7f9 feea 	bl	80194c8 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801f6f4:	6a3b      	ldr	r3, [r7, #32]
 801f6f6:	68db      	ldr	r3, [r3, #12]
 801f6f8:	685b      	ldr	r3, [r3, #4]
 801f6fa:	4618      	mov	r0, r3
 801f6fc:	f7f8 f913 	bl	8017926 <lwip_htonl>
 801f700:	4603      	mov	r3, r0
 801f702:	3301      	adds	r3, #1
 801f704:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801f706:	687b      	ldr	r3, [r7, #4]
 801f708:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801f70a:	68fb      	ldr	r3, [r7, #12]
 801f70c:	1ad3      	subs	r3, r2, r3
 801f70e:	2b00      	cmp	r3, #0
 801f710:	da02      	bge.n	801f718 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801f712:	687b      	ldr	r3, [r7, #4]
 801f714:	68fa      	ldr	r2, [r7, #12]
 801f716:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801f718:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801f71c:	2200      	movs	r2, #0
 801f71e:	69b9      	ldr	r1, [r7, #24]
 801f720:	6878      	ldr	r0, [r7, #4]
 801f722:	f7ff fded 	bl	801f300 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801f726:	687a      	ldr	r2, [r7, #4]
 801f728:	687b      	ldr	r3, [r7, #4]
 801f72a:	3304      	adds	r3, #4
 801f72c:	69b9      	ldr	r1, [r7, #24]
 801f72e:	6878      	ldr	r0, [r7, #4]
 801f730:	f7ff fe26 	bl	801f380 <tcp_output_control_segment>
 801f734:	4603      	mov	r3, r0
 801f736:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801f738:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801f73c:	4618      	mov	r0, r3
 801f73e:	372c      	adds	r7, #44	; 0x2c
 801f740:	46bd      	mov	sp, r7
 801f742:	bd90      	pop	{r4, r7, pc}
 801f744:	0802cb20 	.word	0x0802cb20
 801f748:	0802d318 	.word	0x0802d318
 801f74c:	0802cb74 	.word	0x0802cb74

0801f750 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801f750:	b580      	push	{r7, lr}
 801f752:	b082      	sub	sp, #8
 801f754:	af00      	add	r7, sp, #0
 801f756:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801f758:	f7fa f808 	bl	801976c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801f75c:	4b0a      	ldr	r3, [pc, #40]	; (801f788 <tcpip_tcp_timer+0x38>)
 801f75e:	681b      	ldr	r3, [r3, #0]
 801f760:	2b00      	cmp	r3, #0
 801f762:	d103      	bne.n	801f76c <tcpip_tcp_timer+0x1c>
 801f764:	4b09      	ldr	r3, [pc, #36]	; (801f78c <tcpip_tcp_timer+0x3c>)
 801f766:	681b      	ldr	r3, [r3, #0]
 801f768:	2b00      	cmp	r3, #0
 801f76a:	d005      	beq.n	801f778 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801f76c:	2200      	movs	r2, #0
 801f76e:	4908      	ldr	r1, [pc, #32]	; (801f790 <tcpip_tcp_timer+0x40>)
 801f770:	20fa      	movs	r0, #250	; 0xfa
 801f772:	f000 f8f3 	bl	801f95c <sys_timeout>
 801f776:	e003      	b.n	801f780 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801f778:	4b06      	ldr	r3, [pc, #24]	; (801f794 <tcpip_tcp_timer+0x44>)
 801f77a:	2200      	movs	r2, #0
 801f77c:	601a      	str	r2, [r3, #0]
  }
}
 801f77e:	bf00      	nop
 801f780:	bf00      	nop
 801f782:	3708      	adds	r7, #8
 801f784:	46bd      	mov	sp, r7
 801f786:	bd80      	pop	{r7, pc}
 801f788:	2001bd0c 	.word	0x2001bd0c
 801f78c:	2001bd1c 	.word	0x2001bd1c
 801f790:	0801f751 	.word	0x0801f751
 801f794:	2001381c 	.word	0x2001381c

0801f798 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801f798:	b580      	push	{r7, lr}
 801f79a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801f79c:	4b0a      	ldr	r3, [pc, #40]	; (801f7c8 <tcp_timer_needed+0x30>)
 801f79e:	681b      	ldr	r3, [r3, #0]
 801f7a0:	2b00      	cmp	r3, #0
 801f7a2:	d10f      	bne.n	801f7c4 <tcp_timer_needed+0x2c>
 801f7a4:	4b09      	ldr	r3, [pc, #36]	; (801f7cc <tcp_timer_needed+0x34>)
 801f7a6:	681b      	ldr	r3, [r3, #0]
 801f7a8:	2b00      	cmp	r3, #0
 801f7aa:	d103      	bne.n	801f7b4 <tcp_timer_needed+0x1c>
 801f7ac:	4b08      	ldr	r3, [pc, #32]	; (801f7d0 <tcp_timer_needed+0x38>)
 801f7ae:	681b      	ldr	r3, [r3, #0]
 801f7b0:	2b00      	cmp	r3, #0
 801f7b2:	d007      	beq.n	801f7c4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801f7b4:	4b04      	ldr	r3, [pc, #16]	; (801f7c8 <tcp_timer_needed+0x30>)
 801f7b6:	2201      	movs	r2, #1
 801f7b8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801f7ba:	2200      	movs	r2, #0
 801f7bc:	4905      	ldr	r1, [pc, #20]	; (801f7d4 <tcp_timer_needed+0x3c>)
 801f7be:	20fa      	movs	r0, #250	; 0xfa
 801f7c0:	f000 f8cc 	bl	801f95c <sys_timeout>
  }
}
 801f7c4:	bf00      	nop
 801f7c6:	bd80      	pop	{r7, pc}
 801f7c8:	2001381c 	.word	0x2001381c
 801f7cc:	2001bd0c 	.word	0x2001bd0c
 801f7d0:	2001bd1c 	.word	0x2001bd1c
 801f7d4:	0801f751 	.word	0x0801f751

0801f7d8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801f7d8:	b580      	push	{r7, lr}
 801f7da:	b086      	sub	sp, #24
 801f7dc:	af00      	add	r7, sp, #0
 801f7de:	60f8      	str	r0, [r7, #12]
 801f7e0:	60b9      	str	r1, [r7, #8]
 801f7e2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801f7e4:	200a      	movs	r0, #10
 801f7e6:	f7f8 fd67 	bl	80182b8 <memp_malloc>
 801f7ea:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801f7ec:	693b      	ldr	r3, [r7, #16]
 801f7ee:	2b00      	cmp	r3, #0
 801f7f0:	d109      	bne.n	801f806 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801f7f2:	693b      	ldr	r3, [r7, #16]
 801f7f4:	2b00      	cmp	r3, #0
 801f7f6:	d151      	bne.n	801f89c <sys_timeout_abs+0xc4>
 801f7f8:	4b2a      	ldr	r3, [pc, #168]	; (801f8a4 <sys_timeout_abs+0xcc>)
 801f7fa:	22be      	movs	r2, #190	; 0xbe
 801f7fc:	492a      	ldr	r1, [pc, #168]	; (801f8a8 <sys_timeout_abs+0xd0>)
 801f7fe:	482b      	ldr	r0, [pc, #172]	; (801f8ac <sys_timeout_abs+0xd4>)
 801f800:	f005 ffd4 	bl	80257ac <iprintf>
    return;
 801f804:	e04a      	b.n	801f89c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801f806:	693b      	ldr	r3, [r7, #16]
 801f808:	2200      	movs	r2, #0
 801f80a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801f80c:	693b      	ldr	r3, [r7, #16]
 801f80e:	68ba      	ldr	r2, [r7, #8]
 801f810:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801f812:	693b      	ldr	r3, [r7, #16]
 801f814:	687a      	ldr	r2, [r7, #4]
 801f816:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801f818:	693b      	ldr	r3, [r7, #16]
 801f81a:	68fa      	ldr	r2, [r7, #12]
 801f81c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801f81e:	4b24      	ldr	r3, [pc, #144]	; (801f8b0 <sys_timeout_abs+0xd8>)
 801f820:	681b      	ldr	r3, [r3, #0]
 801f822:	2b00      	cmp	r3, #0
 801f824:	d103      	bne.n	801f82e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801f826:	4a22      	ldr	r2, [pc, #136]	; (801f8b0 <sys_timeout_abs+0xd8>)
 801f828:	693b      	ldr	r3, [r7, #16]
 801f82a:	6013      	str	r3, [r2, #0]
    return;
 801f82c:	e037      	b.n	801f89e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801f82e:	693b      	ldr	r3, [r7, #16]
 801f830:	685a      	ldr	r2, [r3, #4]
 801f832:	4b1f      	ldr	r3, [pc, #124]	; (801f8b0 <sys_timeout_abs+0xd8>)
 801f834:	681b      	ldr	r3, [r3, #0]
 801f836:	685b      	ldr	r3, [r3, #4]
 801f838:	1ad3      	subs	r3, r2, r3
 801f83a:	0fdb      	lsrs	r3, r3, #31
 801f83c:	f003 0301 	and.w	r3, r3, #1
 801f840:	b2db      	uxtb	r3, r3
 801f842:	2b00      	cmp	r3, #0
 801f844:	d007      	beq.n	801f856 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801f846:	4b1a      	ldr	r3, [pc, #104]	; (801f8b0 <sys_timeout_abs+0xd8>)
 801f848:	681a      	ldr	r2, [r3, #0]
 801f84a:	693b      	ldr	r3, [r7, #16]
 801f84c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801f84e:	4a18      	ldr	r2, [pc, #96]	; (801f8b0 <sys_timeout_abs+0xd8>)
 801f850:	693b      	ldr	r3, [r7, #16]
 801f852:	6013      	str	r3, [r2, #0]
 801f854:	e023      	b.n	801f89e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801f856:	4b16      	ldr	r3, [pc, #88]	; (801f8b0 <sys_timeout_abs+0xd8>)
 801f858:	681b      	ldr	r3, [r3, #0]
 801f85a:	617b      	str	r3, [r7, #20]
 801f85c:	e01a      	b.n	801f894 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801f85e:	697b      	ldr	r3, [r7, #20]
 801f860:	681b      	ldr	r3, [r3, #0]
 801f862:	2b00      	cmp	r3, #0
 801f864:	d00b      	beq.n	801f87e <sys_timeout_abs+0xa6>
 801f866:	693b      	ldr	r3, [r7, #16]
 801f868:	685a      	ldr	r2, [r3, #4]
 801f86a:	697b      	ldr	r3, [r7, #20]
 801f86c:	681b      	ldr	r3, [r3, #0]
 801f86e:	685b      	ldr	r3, [r3, #4]
 801f870:	1ad3      	subs	r3, r2, r3
 801f872:	0fdb      	lsrs	r3, r3, #31
 801f874:	f003 0301 	and.w	r3, r3, #1
 801f878:	b2db      	uxtb	r3, r3
 801f87a:	2b00      	cmp	r3, #0
 801f87c:	d007      	beq.n	801f88e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801f87e:	697b      	ldr	r3, [r7, #20]
 801f880:	681a      	ldr	r2, [r3, #0]
 801f882:	693b      	ldr	r3, [r7, #16]
 801f884:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801f886:	697b      	ldr	r3, [r7, #20]
 801f888:	693a      	ldr	r2, [r7, #16]
 801f88a:	601a      	str	r2, [r3, #0]
        break;
 801f88c:	e007      	b.n	801f89e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801f88e:	697b      	ldr	r3, [r7, #20]
 801f890:	681b      	ldr	r3, [r3, #0]
 801f892:	617b      	str	r3, [r7, #20]
 801f894:	697b      	ldr	r3, [r7, #20]
 801f896:	2b00      	cmp	r3, #0
 801f898:	d1e1      	bne.n	801f85e <sys_timeout_abs+0x86>
 801f89a:	e000      	b.n	801f89e <sys_timeout_abs+0xc6>
    return;
 801f89c:	bf00      	nop
      }
    }
  }
}
 801f89e:	3718      	adds	r7, #24
 801f8a0:	46bd      	mov	sp, r7
 801f8a2:	bd80      	pop	{r7, pc}
 801f8a4:	0802d33c 	.word	0x0802d33c
 801f8a8:	0802d370 	.word	0x0802d370
 801f8ac:	0802d3b0 	.word	0x0802d3b0
 801f8b0:	20013814 	.word	0x20013814

0801f8b4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801f8b4:	b580      	push	{r7, lr}
 801f8b6:	b086      	sub	sp, #24
 801f8b8:	af00      	add	r7, sp, #0
 801f8ba:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801f8bc:	687b      	ldr	r3, [r7, #4]
 801f8be:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801f8c0:	697b      	ldr	r3, [r7, #20]
 801f8c2:	685b      	ldr	r3, [r3, #4]
 801f8c4:	4798      	blx	r3

  now = sys_now();
 801f8c6:	f7f2 f815 	bl	80118f4 <sys_now>
 801f8ca:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801f8cc:	697b      	ldr	r3, [r7, #20]
 801f8ce:	681a      	ldr	r2, [r3, #0]
 801f8d0:	4b0f      	ldr	r3, [pc, #60]	; (801f910 <lwip_cyclic_timer+0x5c>)
 801f8d2:	681b      	ldr	r3, [r3, #0]
 801f8d4:	4413      	add	r3, r2
 801f8d6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801f8d8:	68fa      	ldr	r2, [r7, #12]
 801f8da:	693b      	ldr	r3, [r7, #16]
 801f8dc:	1ad3      	subs	r3, r2, r3
 801f8de:	0fdb      	lsrs	r3, r3, #31
 801f8e0:	f003 0301 	and.w	r3, r3, #1
 801f8e4:	b2db      	uxtb	r3, r3
 801f8e6:	2b00      	cmp	r3, #0
 801f8e8:	d009      	beq.n	801f8fe <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801f8ea:	697b      	ldr	r3, [r7, #20]
 801f8ec:	681a      	ldr	r2, [r3, #0]
 801f8ee:	693b      	ldr	r3, [r7, #16]
 801f8f0:	4413      	add	r3, r2
 801f8f2:	687a      	ldr	r2, [r7, #4]
 801f8f4:	4907      	ldr	r1, [pc, #28]	; (801f914 <lwip_cyclic_timer+0x60>)
 801f8f6:	4618      	mov	r0, r3
 801f8f8:	f7ff ff6e 	bl	801f7d8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801f8fc:	e004      	b.n	801f908 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801f8fe:	687a      	ldr	r2, [r7, #4]
 801f900:	4904      	ldr	r1, [pc, #16]	; (801f914 <lwip_cyclic_timer+0x60>)
 801f902:	68f8      	ldr	r0, [r7, #12]
 801f904:	f7ff ff68 	bl	801f7d8 <sys_timeout_abs>
}
 801f908:	bf00      	nop
 801f90a:	3718      	adds	r7, #24
 801f90c:	46bd      	mov	sp, r7
 801f90e:	bd80      	pop	{r7, pc}
 801f910:	20013818 	.word	0x20013818
 801f914:	0801f8b5 	.word	0x0801f8b5

0801f918 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801f918:	b580      	push	{r7, lr}
 801f91a:	b082      	sub	sp, #8
 801f91c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801f91e:	2301      	movs	r3, #1
 801f920:	607b      	str	r3, [r7, #4]
 801f922:	e00e      	b.n	801f942 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801f924:	4a0b      	ldr	r2, [pc, #44]	; (801f954 <sys_timeouts_init+0x3c>)
 801f926:	687b      	ldr	r3, [r7, #4]
 801f928:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801f92c:	687b      	ldr	r3, [r7, #4]
 801f92e:	00db      	lsls	r3, r3, #3
 801f930:	4a08      	ldr	r2, [pc, #32]	; (801f954 <sys_timeouts_init+0x3c>)
 801f932:	4413      	add	r3, r2
 801f934:	461a      	mov	r2, r3
 801f936:	4908      	ldr	r1, [pc, #32]	; (801f958 <sys_timeouts_init+0x40>)
 801f938:	f000 f810 	bl	801f95c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801f93c:	687b      	ldr	r3, [r7, #4]
 801f93e:	3301      	adds	r3, #1
 801f940:	607b      	str	r3, [r7, #4]
 801f942:	687b      	ldr	r3, [r7, #4]
 801f944:	2b04      	cmp	r3, #4
 801f946:	d9ed      	bls.n	801f924 <sys_timeouts_init+0xc>
  }
}
 801f948:	bf00      	nop
 801f94a:	bf00      	nop
 801f94c:	3708      	adds	r7, #8
 801f94e:	46bd      	mov	sp, r7
 801f950:	bd80      	pop	{r7, pc}
 801f952:	bf00      	nop
 801f954:	0802e440 	.word	0x0802e440
 801f958:	0801f8b5 	.word	0x0801f8b5

0801f95c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801f95c:	b580      	push	{r7, lr}
 801f95e:	b086      	sub	sp, #24
 801f960:	af00      	add	r7, sp, #0
 801f962:	60f8      	str	r0, [r7, #12]
 801f964:	60b9      	str	r1, [r7, #8]
 801f966:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801f968:	68fb      	ldr	r3, [r7, #12]
 801f96a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801f96e:	d306      	bcc.n	801f97e <sys_timeout+0x22>
 801f970:	4b0a      	ldr	r3, [pc, #40]	; (801f99c <sys_timeout+0x40>)
 801f972:	f240 1229 	movw	r2, #297	; 0x129
 801f976:	490a      	ldr	r1, [pc, #40]	; (801f9a0 <sys_timeout+0x44>)
 801f978:	480a      	ldr	r0, [pc, #40]	; (801f9a4 <sys_timeout+0x48>)
 801f97a:	f005 ff17 	bl	80257ac <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801f97e:	f7f1 ffb9 	bl	80118f4 <sys_now>
 801f982:	4602      	mov	r2, r0
 801f984:	68fb      	ldr	r3, [r7, #12]
 801f986:	4413      	add	r3, r2
 801f988:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801f98a:	687a      	ldr	r2, [r7, #4]
 801f98c:	68b9      	ldr	r1, [r7, #8]
 801f98e:	6978      	ldr	r0, [r7, #20]
 801f990:	f7ff ff22 	bl	801f7d8 <sys_timeout_abs>
#endif
}
 801f994:	bf00      	nop
 801f996:	3718      	adds	r7, #24
 801f998:	46bd      	mov	sp, r7
 801f99a:	bd80      	pop	{r7, pc}
 801f99c:	0802d33c 	.word	0x0802d33c
 801f9a0:	0802d3d8 	.word	0x0802d3d8
 801f9a4:	0802d3b0 	.word	0x0802d3b0

0801f9a8 <sys_untimeout>:
 * @param handler callback function that would be called by the timeout
 * @param arg callback argument that would be passed to handler
*/
void
sys_untimeout(sys_timeout_handler handler, void *arg)
{
 801f9a8:	b580      	push	{r7, lr}
 801f9aa:	b084      	sub	sp, #16
 801f9ac:	af00      	add	r7, sp, #0
 801f9ae:	6078      	str	r0, [r7, #4]
 801f9b0:	6039      	str	r1, [r7, #0]
  struct sys_timeo *prev_t, *t;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801f9b2:	4b19      	ldr	r3, [pc, #100]	; (801fa18 <sys_untimeout+0x70>)
 801f9b4:	681b      	ldr	r3, [r3, #0]
 801f9b6:	2b00      	cmp	r3, #0
 801f9b8:	d029      	beq.n	801fa0e <sys_untimeout+0x66>
    return;
  }

  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 801f9ba:	4b17      	ldr	r3, [pc, #92]	; (801fa18 <sys_untimeout+0x70>)
 801f9bc:	681b      	ldr	r3, [r3, #0]
 801f9be:	60bb      	str	r3, [r7, #8]
 801f9c0:	2300      	movs	r3, #0
 801f9c2:	60fb      	str	r3, [r7, #12]
 801f9c4:	e01f      	b.n	801fa06 <sys_untimeout+0x5e>
    if ((t->h == handler) && (t->arg == arg)) {
 801f9c6:	68bb      	ldr	r3, [r7, #8]
 801f9c8:	689b      	ldr	r3, [r3, #8]
 801f9ca:	687a      	ldr	r2, [r7, #4]
 801f9cc:	429a      	cmp	r2, r3
 801f9ce:	d115      	bne.n	801f9fc <sys_untimeout+0x54>
 801f9d0:	68bb      	ldr	r3, [r7, #8]
 801f9d2:	68db      	ldr	r3, [r3, #12]
 801f9d4:	683a      	ldr	r2, [r7, #0]
 801f9d6:	429a      	cmp	r2, r3
 801f9d8:	d110      	bne.n	801f9fc <sys_untimeout+0x54>
      /* We have a match */
      /* Unlink from previous in list */
      if (prev_t == NULL) {
 801f9da:	68fb      	ldr	r3, [r7, #12]
 801f9dc:	2b00      	cmp	r3, #0
 801f9de:	d104      	bne.n	801f9ea <sys_untimeout+0x42>
        next_timeout = t->next;
 801f9e0:	68bb      	ldr	r3, [r7, #8]
 801f9e2:	681b      	ldr	r3, [r3, #0]
 801f9e4:	4a0c      	ldr	r2, [pc, #48]	; (801fa18 <sys_untimeout+0x70>)
 801f9e6:	6013      	str	r3, [r2, #0]
 801f9e8:	e003      	b.n	801f9f2 <sys_untimeout+0x4a>
      } else {
        prev_t->next = t->next;
 801f9ea:	68bb      	ldr	r3, [r7, #8]
 801f9ec:	681a      	ldr	r2, [r3, #0]
 801f9ee:	68fb      	ldr	r3, [r7, #12]
 801f9f0:	601a      	str	r2, [r3, #0]
      }
      memp_free(MEMP_SYS_TIMEOUT, t);
 801f9f2:	68b9      	ldr	r1, [r7, #8]
 801f9f4:	200a      	movs	r0, #10
 801f9f6:	f7f8 fcb1 	bl	801835c <memp_free>
      return;
 801f9fa:	e009      	b.n	801fa10 <sys_untimeout+0x68>
  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 801f9fc:	68bb      	ldr	r3, [r7, #8]
 801f9fe:	60fb      	str	r3, [r7, #12]
 801fa00:	68bb      	ldr	r3, [r7, #8]
 801fa02:	681b      	ldr	r3, [r3, #0]
 801fa04:	60bb      	str	r3, [r7, #8]
 801fa06:	68bb      	ldr	r3, [r7, #8]
 801fa08:	2b00      	cmp	r3, #0
 801fa0a:	d1dc      	bne.n	801f9c6 <sys_untimeout+0x1e>
    }
  }
  return;
 801fa0c:	e000      	b.n	801fa10 <sys_untimeout+0x68>
    return;
 801fa0e:	bf00      	nop
}
 801fa10:	3710      	adds	r7, #16
 801fa12:	46bd      	mov	sp, r7
 801fa14:	bd80      	pop	{r7, pc}
 801fa16:	bf00      	nop
 801fa18:	20013814 	.word	0x20013814

0801fa1c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801fa1c:	b580      	push	{r7, lr}
 801fa1e:	b084      	sub	sp, #16
 801fa20:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801fa22:	f7f1 ff67 	bl	80118f4 <sys_now>
 801fa26:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801fa28:	4b17      	ldr	r3, [pc, #92]	; (801fa88 <sys_check_timeouts+0x6c>)
 801fa2a:	681b      	ldr	r3, [r3, #0]
 801fa2c:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801fa2e:	68bb      	ldr	r3, [r7, #8]
 801fa30:	2b00      	cmp	r3, #0
 801fa32:	d022      	beq.n	801fa7a <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801fa34:	68bb      	ldr	r3, [r7, #8]
 801fa36:	685b      	ldr	r3, [r3, #4]
 801fa38:	68fa      	ldr	r2, [r7, #12]
 801fa3a:	1ad3      	subs	r3, r2, r3
 801fa3c:	0fdb      	lsrs	r3, r3, #31
 801fa3e:	f003 0301 	and.w	r3, r3, #1
 801fa42:	b2db      	uxtb	r3, r3
 801fa44:	2b00      	cmp	r3, #0
 801fa46:	d11a      	bne.n	801fa7e <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801fa48:	68bb      	ldr	r3, [r7, #8]
 801fa4a:	681b      	ldr	r3, [r3, #0]
 801fa4c:	4a0e      	ldr	r2, [pc, #56]	; (801fa88 <sys_check_timeouts+0x6c>)
 801fa4e:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801fa50:	68bb      	ldr	r3, [r7, #8]
 801fa52:	689b      	ldr	r3, [r3, #8]
 801fa54:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801fa56:	68bb      	ldr	r3, [r7, #8]
 801fa58:	68db      	ldr	r3, [r3, #12]
 801fa5a:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801fa5c:	68bb      	ldr	r3, [r7, #8]
 801fa5e:	685b      	ldr	r3, [r3, #4]
 801fa60:	4a0a      	ldr	r2, [pc, #40]	; (801fa8c <sys_check_timeouts+0x70>)
 801fa62:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801fa64:	68b9      	ldr	r1, [r7, #8]
 801fa66:	200a      	movs	r0, #10
 801fa68:	f7f8 fc78 	bl	801835c <memp_free>
    if (handler != NULL) {
 801fa6c:	687b      	ldr	r3, [r7, #4]
 801fa6e:	2b00      	cmp	r3, #0
 801fa70:	d0da      	beq.n	801fa28 <sys_check_timeouts+0xc>
      handler(arg);
 801fa72:	687b      	ldr	r3, [r7, #4]
 801fa74:	6838      	ldr	r0, [r7, #0]
 801fa76:	4798      	blx	r3
  do {
 801fa78:	e7d6      	b.n	801fa28 <sys_check_timeouts+0xc>
      return;
 801fa7a:	bf00      	nop
 801fa7c:	e000      	b.n	801fa80 <sys_check_timeouts+0x64>
      return;
 801fa7e:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801fa80:	3710      	adds	r7, #16
 801fa82:	46bd      	mov	sp, r7
 801fa84:	bd80      	pop	{r7, pc}
 801fa86:	bf00      	nop
 801fa88:	20013814 	.word	0x20013814
 801fa8c:	20013818 	.word	0x20013818

0801fa90 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801fa90:	b580      	push	{r7, lr}
 801fa92:	b082      	sub	sp, #8
 801fa94:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801fa96:	4b16      	ldr	r3, [pc, #88]	; (801faf0 <sys_timeouts_sleeptime+0x60>)
 801fa98:	681b      	ldr	r3, [r3, #0]
 801fa9a:	2b00      	cmp	r3, #0
 801fa9c:	d102      	bne.n	801faa4 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801fa9e:	f04f 33ff 	mov.w	r3, #4294967295
 801faa2:	e020      	b.n	801fae6 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801faa4:	f7f1 ff26 	bl	80118f4 <sys_now>
 801faa8:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801faaa:	4b11      	ldr	r3, [pc, #68]	; (801faf0 <sys_timeouts_sleeptime+0x60>)
 801faac:	681b      	ldr	r3, [r3, #0]
 801faae:	685a      	ldr	r2, [r3, #4]
 801fab0:	687b      	ldr	r3, [r7, #4]
 801fab2:	1ad3      	subs	r3, r2, r3
 801fab4:	0fdb      	lsrs	r3, r3, #31
 801fab6:	f003 0301 	and.w	r3, r3, #1
 801faba:	b2db      	uxtb	r3, r3
 801fabc:	2b00      	cmp	r3, #0
 801fabe:	d001      	beq.n	801fac4 <sys_timeouts_sleeptime+0x34>
    return 0;
 801fac0:	2300      	movs	r3, #0
 801fac2:	e010      	b.n	801fae6 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801fac4:	4b0a      	ldr	r3, [pc, #40]	; (801faf0 <sys_timeouts_sleeptime+0x60>)
 801fac6:	681b      	ldr	r3, [r3, #0]
 801fac8:	685a      	ldr	r2, [r3, #4]
 801faca:	687b      	ldr	r3, [r7, #4]
 801facc:	1ad3      	subs	r3, r2, r3
 801face:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801fad0:	683b      	ldr	r3, [r7, #0]
 801fad2:	2b00      	cmp	r3, #0
 801fad4:	da06      	bge.n	801fae4 <sys_timeouts_sleeptime+0x54>
 801fad6:	4b07      	ldr	r3, [pc, #28]	; (801faf4 <sys_timeouts_sleeptime+0x64>)
 801fad8:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 801fadc:	4906      	ldr	r1, [pc, #24]	; (801faf8 <sys_timeouts_sleeptime+0x68>)
 801fade:	4807      	ldr	r0, [pc, #28]	; (801fafc <sys_timeouts_sleeptime+0x6c>)
 801fae0:	f005 fe64 	bl	80257ac <iprintf>
    return ret;
 801fae4:	683b      	ldr	r3, [r7, #0]
  }
}
 801fae6:	4618      	mov	r0, r3
 801fae8:	3708      	adds	r7, #8
 801faea:	46bd      	mov	sp, r7
 801faec:	bd80      	pop	{r7, pc}
 801faee:	bf00      	nop
 801faf0:	20013814 	.word	0x20013814
 801faf4:	0802d33c 	.word	0x0802d33c
 801faf8:	0802d410 	.word	0x0802d410
 801fafc:	0802d3b0 	.word	0x0802d3b0

0801fb00 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801fb00:	b580      	push	{r7, lr}
 801fb02:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801fb04:	f005 fee0 	bl	80258c8 <rand>
 801fb08:	4603      	mov	r3, r0
 801fb0a:	b29b      	uxth	r3, r3
 801fb0c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801fb10:	b29b      	uxth	r3, r3
 801fb12:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801fb16:	b29a      	uxth	r2, r3
 801fb18:	4b01      	ldr	r3, [pc, #4]	; (801fb20 <udp_init+0x20>)
 801fb1a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801fb1c:	bf00      	nop
 801fb1e:	bd80      	pop	{r7, pc}
 801fb20:	10000068 	.word	0x10000068

0801fb24 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801fb24:	b480      	push	{r7}
 801fb26:	b083      	sub	sp, #12
 801fb28:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801fb2a:	2300      	movs	r3, #0
 801fb2c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801fb2e:	4b17      	ldr	r3, [pc, #92]	; (801fb8c <udp_new_port+0x68>)
 801fb30:	881b      	ldrh	r3, [r3, #0]
 801fb32:	1c5a      	adds	r2, r3, #1
 801fb34:	b291      	uxth	r1, r2
 801fb36:	4a15      	ldr	r2, [pc, #84]	; (801fb8c <udp_new_port+0x68>)
 801fb38:	8011      	strh	r1, [r2, #0]
 801fb3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801fb3e:	4293      	cmp	r3, r2
 801fb40:	d103      	bne.n	801fb4a <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801fb42:	4b12      	ldr	r3, [pc, #72]	; (801fb8c <udp_new_port+0x68>)
 801fb44:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801fb48:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801fb4a:	4b11      	ldr	r3, [pc, #68]	; (801fb90 <udp_new_port+0x6c>)
 801fb4c:	681b      	ldr	r3, [r3, #0]
 801fb4e:	603b      	str	r3, [r7, #0]
 801fb50:	e011      	b.n	801fb76 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801fb52:	683b      	ldr	r3, [r7, #0]
 801fb54:	8a5a      	ldrh	r2, [r3, #18]
 801fb56:	4b0d      	ldr	r3, [pc, #52]	; (801fb8c <udp_new_port+0x68>)
 801fb58:	881b      	ldrh	r3, [r3, #0]
 801fb5a:	429a      	cmp	r2, r3
 801fb5c:	d108      	bne.n	801fb70 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801fb5e:	88fb      	ldrh	r3, [r7, #6]
 801fb60:	3301      	adds	r3, #1
 801fb62:	80fb      	strh	r3, [r7, #6]
 801fb64:	88fb      	ldrh	r3, [r7, #6]
 801fb66:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801fb6a:	d3e0      	bcc.n	801fb2e <udp_new_port+0xa>
        return 0;
 801fb6c:	2300      	movs	r3, #0
 801fb6e:	e007      	b.n	801fb80 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801fb70:	683b      	ldr	r3, [r7, #0]
 801fb72:	68db      	ldr	r3, [r3, #12]
 801fb74:	603b      	str	r3, [r7, #0]
 801fb76:	683b      	ldr	r3, [r7, #0]
 801fb78:	2b00      	cmp	r3, #0
 801fb7a:	d1ea      	bne.n	801fb52 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801fb7c:	4b03      	ldr	r3, [pc, #12]	; (801fb8c <udp_new_port+0x68>)
 801fb7e:	881b      	ldrh	r3, [r3, #0]
}
 801fb80:	4618      	mov	r0, r3
 801fb82:	370c      	adds	r7, #12
 801fb84:	46bd      	mov	sp, r7
 801fb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fb8a:	4770      	bx	lr
 801fb8c:	10000068 	.word	0x10000068
 801fb90:	2001bd24 	.word	0x2001bd24

0801fb94 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801fb94:	b580      	push	{r7, lr}
 801fb96:	b084      	sub	sp, #16
 801fb98:	af00      	add	r7, sp, #0
 801fb9a:	60f8      	str	r0, [r7, #12]
 801fb9c:	60b9      	str	r1, [r7, #8]
 801fb9e:	4613      	mov	r3, r2
 801fba0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801fba2:	68fb      	ldr	r3, [r7, #12]
 801fba4:	2b00      	cmp	r3, #0
 801fba6:	d105      	bne.n	801fbb4 <udp_input_local_match+0x20>
 801fba8:	4b27      	ldr	r3, [pc, #156]	; (801fc48 <udp_input_local_match+0xb4>)
 801fbaa:	2287      	movs	r2, #135	; 0x87
 801fbac:	4927      	ldr	r1, [pc, #156]	; (801fc4c <udp_input_local_match+0xb8>)
 801fbae:	4828      	ldr	r0, [pc, #160]	; (801fc50 <udp_input_local_match+0xbc>)
 801fbb0:	f005 fdfc 	bl	80257ac <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801fbb4:	68bb      	ldr	r3, [r7, #8]
 801fbb6:	2b00      	cmp	r3, #0
 801fbb8:	d105      	bne.n	801fbc6 <udp_input_local_match+0x32>
 801fbba:	4b23      	ldr	r3, [pc, #140]	; (801fc48 <udp_input_local_match+0xb4>)
 801fbbc:	2288      	movs	r2, #136	; 0x88
 801fbbe:	4925      	ldr	r1, [pc, #148]	; (801fc54 <udp_input_local_match+0xc0>)
 801fbc0:	4823      	ldr	r0, [pc, #140]	; (801fc50 <udp_input_local_match+0xbc>)
 801fbc2:	f005 fdf3 	bl	80257ac <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801fbc6:	68fb      	ldr	r3, [r7, #12]
 801fbc8:	7a1b      	ldrb	r3, [r3, #8]
 801fbca:	2b00      	cmp	r3, #0
 801fbcc:	d00b      	beq.n	801fbe6 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801fbce:	68fb      	ldr	r3, [r7, #12]
 801fbd0:	7a1a      	ldrb	r2, [r3, #8]
 801fbd2:	4b21      	ldr	r3, [pc, #132]	; (801fc58 <udp_input_local_match+0xc4>)
 801fbd4:	685b      	ldr	r3, [r3, #4]
 801fbd6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801fbda:	3301      	adds	r3, #1
 801fbdc:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801fbde:	429a      	cmp	r2, r3
 801fbe0:	d001      	beq.n	801fbe6 <udp_input_local_match+0x52>
    return 0;
 801fbe2:	2300      	movs	r3, #0
 801fbe4:	e02b      	b.n	801fc3e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801fbe6:	79fb      	ldrb	r3, [r7, #7]
 801fbe8:	2b00      	cmp	r3, #0
 801fbea:	d018      	beq.n	801fc1e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801fbec:	68fb      	ldr	r3, [r7, #12]
 801fbee:	2b00      	cmp	r3, #0
 801fbf0:	d013      	beq.n	801fc1a <udp_input_local_match+0x86>
 801fbf2:	68fb      	ldr	r3, [r7, #12]
 801fbf4:	681b      	ldr	r3, [r3, #0]
 801fbf6:	2b00      	cmp	r3, #0
 801fbf8:	d00f      	beq.n	801fc1a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801fbfa:	4b17      	ldr	r3, [pc, #92]	; (801fc58 <udp_input_local_match+0xc4>)
 801fbfc:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801fbfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 801fc02:	d00a      	beq.n	801fc1a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801fc04:	68fb      	ldr	r3, [r7, #12]
 801fc06:	681a      	ldr	r2, [r3, #0]
 801fc08:	4b13      	ldr	r3, [pc, #76]	; (801fc58 <udp_input_local_match+0xc4>)
 801fc0a:	695b      	ldr	r3, [r3, #20]
 801fc0c:	405a      	eors	r2, r3
 801fc0e:	68bb      	ldr	r3, [r7, #8]
 801fc10:	3308      	adds	r3, #8
 801fc12:	681b      	ldr	r3, [r3, #0]
 801fc14:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801fc16:	2b00      	cmp	r3, #0
 801fc18:	d110      	bne.n	801fc3c <udp_input_local_match+0xa8>
          return 1;
 801fc1a:	2301      	movs	r3, #1
 801fc1c:	e00f      	b.n	801fc3e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801fc1e:	68fb      	ldr	r3, [r7, #12]
 801fc20:	2b00      	cmp	r3, #0
 801fc22:	d009      	beq.n	801fc38 <udp_input_local_match+0xa4>
 801fc24:	68fb      	ldr	r3, [r7, #12]
 801fc26:	681b      	ldr	r3, [r3, #0]
 801fc28:	2b00      	cmp	r3, #0
 801fc2a:	d005      	beq.n	801fc38 <udp_input_local_match+0xa4>
 801fc2c:	68fb      	ldr	r3, [r7, #12]
 801fc2e:	681a      	ldr	r2, [r3, #0]
 801fc30:	4b09      	ldr	r3, [pc, #36]	; (801fc58 <udp_input_local_match+0xc4>)
 801fc32:	695b      	ldr	r3, [r3, #20]
 801fc34:	429a      	cmp	r2, r3
 801fc36:	d101      	bne.n	801fc3c <udp_input_local_match+0xa8>
        return 1;
 801fc38:	2301      	movs	r3, #1
 801fc3a:	e000      	b.n	801fc3e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801fc3c:	2300      	movs	r3, #0
}
 801fc3e:	4618      	mov	r0, r3
 801fc40:	3710      	adds	r7, #16
 801fc42:	46bd      	mov	sp, r7
 801fc44:	bd80      	pop	{r7, pc}
 801fc46:	bf00      	nop
 801fc48:	0802d424 	.word	0x0802d424
 801fc4c:	0802d454 	.word	0x0802d454
 801fc50:	0802d478 	.word	0x0802d478
 801fc54:	0802d4a0 	.word	0x0802d4a0
 801fc58:	20017778 	.word	0x20017778

0801fc5c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801fc5c:	b590      	push	{r4, r7, lr}
 801fc5e:	b08d      	sub	sp, #52	; 0x34
 801fc60:	af02      	add	r7, sp, #8
 801fc62:	6078      	str	r0, [r7, #4]
 801fc64:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801fc66:	2300      	movs	r3, #0
 801fc68:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801fc6a:	687b      	ldr	r3, [r7, #4]
 801fc6c:	2b00      	cmp	r3, #0
 801fc6e:	d105      	bne.n	801fc7c <udp_input+0x20>
 801fc70:	4b7c      	ldr	r3, [pc, #496]	; (801fe64 <udp_input+0x208>)
 801fc72:	22cf      	movs	r2, #207	; 0xcf
 801fc74:	497c      	ldr	r1, [pc, #496]	; (801fe68 <udp_input+0x20c>)
 801fc76:	487d      	ldr	r0, [pc, #500]	; (801fe6c <udp_input+0x210>)
 801fc78:	f005 fd98 	bl	80257ac <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801fc7c:	683b      	ldr	r3, [r7, #0]
 801fc7e:	2b00      	cmp	r3, #0
 801fc80:	d105      	bne.n	801fc8e <udp_input+0x32>
 801fc82:	4b78      	ldr	r3, [pc, #480]	; (801fe64 <udp_input+0x208>)
 801fc84:	22d0      	movs	r2, #208	; 0xd0
 801fc86:	497a      	ldr	r1, [pc, #488]	; (801fe70 <udp_input+0x214>)
 801fc88:	4878      	ldr	r0, [pc, #480]	; (801fe6c <udp_input+0x210>)
 801fc8a:	f005 fd8f 	bl	80257ac <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801fc8e:	687b      	ldr	r3, [r7, #4]
 801fc90:	895b      	ldrh	r3, [r3, #10]
 801fc92:	2b07      	cmp	r3, #7
 801fc94:	d803      	bhi.n	801fc9e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801fc96:	6878      	ldr	r0, [r7, #4]
 801fc98:	f7f9 fa10 	bl	80190bc <pbuf_free>
    goto end;
 801fc9c:	e0de      	b.n	801fe5c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801fc9e:	687b      	ldr	r3, [r7, #4]
 801fca0:	685b      	ldr	r3, [r3, #4]
 801fca2:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801fca4:	4b73      	ldr	r3, [pc, #460]	; (801fe74 <udp_input+0x218>)
 801fca6:	695b      	ldr	r3, [r3, #20]
 801fca8:	4a72      	ldr	r2, [pc, #456]	; (801fe74 <udp_input+0x218>)
 801fcaa:	6812      	ldr	r2, [r2, #0]
 801fcac:	4611      	mov	r1, r2
 801fcae:	4618      	mov	r0, r3
 801fcb0:	f003 fe06 	bl	80238c0 <ip4_addr_isbroadcast_u32>
 801fcb4:	4603      	mov	r3, r0
 801fcb6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801fcb8:	697b      	ldr	r3, [r7, #20]
 801fcba:	881b      	ldrh	r3, [r3, #0]
 801fcbc:	b29b      	uxth	r3, r3
 801fcbe:	4618      	mov	r0, r3
 801fcc0:	f7f7 fe1c 	bl	80178fc <lwip_htons>
 801fcc4:	4603      	mov	r3, r0
 801fcc6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801fcc8:	697b      	ldr	r3, [r7, #20]
 801fcca:	885b      	ldrh	r3, [r3, #2]
 801fccc:	b29b      	uxth	r3, r3
 801fcce:	4618      	mov	r0, r3
 801fcd0:	f7f7 fe14 	bl	80178fc <lwip_htons>
 801fcd4:	4603      	mov	r3, r0
 801fcd6:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801fcd8:	2300      	movs	r3, #0
 801fcda:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801fcdc:	2300      	movs	r3, #0
 801fcde:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801fce0:	2300      	movs	r3, #0
 801fce2:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801fce4:	4b64      	ldr	r3, [pc, #400]	; (801fe78 <udp_input+0x21c>)
 801fce6:	681b      	ldr	r3, [r3, #0]
 801fce8:	627b      	str	r3, [r7, #36]	; 0x24
 801fcea:	e054      	b.n	801fd96 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801fcec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fcee:	8a5b      	ldrh	r3, [r3, #18]
 801fcf0:	89fa      	ldrh	r2, [r7, #14]
 801fcf2:	429a      	cmp	r2, r3
 801fcf4:	d14a      	bne.n	801fd8c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801fcf6:	7cfb      	ldrb	r3, [r7, #19]
 801fcf8:	461a      	mov	r2, r3
 801fcfa:	6839      	ldr	r1, [r7, #0]
 801fcfc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801fcfe:	f7ff ff49 	bl	801fb94 <udp_input_local_match>
 801fd02:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801fd04:	2b00      	cmp	r3, #0
 801fd06:	d041      	beq.n	801fd8c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801fd08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fd0a:	7c1b      	ldrb	r3, [r3, #16]
 801fd0c:	f003 0304 	and.w	r3, r3, #4
 801fd10:	2b00      	cmp	r3, #0
 801fd12:	d11d      	bne.n	801fd50 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801fd14:	69fb      	ldr	r3, [r7, #28]
 801fd16:	2b00      	cmp	r3, #0
 801fd18:	d102      	bne.n	801fd20 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801fd1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fd1c:	61fb      	str	r3, [r7, #28]
 801fd1e:	e017      	b.n	801fd50 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801fd20:	7cfb      	ldrb	r3, [r7, #19]
 801fd22:	2b00      	cmp	r3, #0
 801fd24:	d014      	beq.n	801fd50 <udp_input+0xf4>
 801fd26:	4b53      	ldr	r3, [pc, #332]	; (801fe74 <udp_input+0x218>)
 801fd28:	695b      	ldr	r3, [r3, #20]
 801fd2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801fd2e:	d10f      	bne.n	801fd50 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801fd30:	69fb      	ldr	r3, [r7, #28]
 801fd32:	681a      	ldr	r2, [r3, #0]
 801fd34:	683b      	ldr	r3, [r7, #0]
 801fd36:	3304      	adds	r3, #4
 801fd38:	681b      	ldr	r3, [r3, #0]
 801fd3a:	429a      	cmp	r2, r3
 801fd3c:	d008      	beq.n	801fd50 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801fd3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fd40:	681a      	ldr	r2, [r3, #0]
 801fd42:	683b      	ldr	r3, [r7, #0]
 801fd44:	3304      	adds	r3, #4
 801fd46:	681b      	ldr	r3, [r3, #0]
 801fd48:	429a      	cmp	r2, r3
 801fd4a:	d101      	bne.n	801fd50 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801fd4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fd4e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801fd50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fd52:	8a9b      	ldrh	r3, [r3, #20]
 801fd54:	8a3a      	ldrh	r2, [r7, #16]
 801fd56:	429a      	cmp	r2, r3
 801fd58:	d118      	bne.n	801fd8c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801fd5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fd5c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801fd5e:	2b00      	cmp	r3, #0
 801fd60:	d005      	beq.n	801fd6e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801fd62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fd64:	685a      	ldr	r2, [r3, #4]
 801fd66:	4b43      	ldr	r3, [pc, #268]	; (801fe74 <udp_input+0x218>)
 801fd68:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801fd6a:	429a      	cmp	r2, r3
 801fd6c:	d10e      	bne.n	801fd8c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801fd6e:	6a3b      	ldr	r3, [r7, #32]
 801fd70:	2b00      	cmp	r3, #0
 801fd72:	d014      	beq.n	801fd9e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801fd74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fd76:	68da      	ldr	r2, [r3, #12]
 801fd78:	6a3b      	ldr	r3, [r7, #32]
 801fd7a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801fd7c:	4b3e      	ldr	r3, [pc, #248]	; (801fe78 <udp_input+0x21c>)
 801fd7e:	681a      	ldr	r2, [r3, #0]
 801fd80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fd82:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801fd84:	4a3c      	ldr	r2, [pc, #240]	; (801fe78 <udp_input+0x21c>)
 801fd86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fd88:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801fd8a:	e008      	b.n	801fd9e <udp_input+0x142>
      }
    }

    prev = pcb;
 801fd8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fd8e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801fd90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fd92:	68db      	ldr	r3, [r3, #12]
 801fd94:	627b      	str	r3, [r7, #36]	; 0x24
 801fd96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fd98:	2b00      	cmp	r3, #0
 801fd9a:	d1a7      	bne.n	801fcec <udp_input+0x90>
 801fd9c:	e000      	b.n	801fda0 <udp_input+0x144>
        break;
 801fd9e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801fda0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fda2:	2b00      	cmp	r3, #0
 801fda4:	d101      	bne.n	801fdaa <udp_input+0x14e>
    pcb = uncon_pcb;
 801fda6:	69fb      	ldr	r3, [r7, #28]
 801fda8:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801fdaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fdac:	2b00      	cmp	r3, #0
 801fdae:	d002      	beq.n	801fdb6 <udp_input+0x15a>
    for_us = 1;
 801fdb0:	2301      	movs	r3, #1
 801fdb2:	76fb      	strb	r3, [r7, #27]
 801fdb4:	e00a      	b.n	801fdcc <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801fdb6:	683b      	ldr	r3, [r7, #0]
 801fdb8:	3304      	adds	r3, #4
 801fdba:	681a      	ldr	r2, [r3, #0]
 801fdbc:	4b2d      	ldr	r3, [pc, #180]	; (801fe74 <udp_input+0x218>)
 801fdbe:	695b      	ldr	r3, [r3, #20]
 801fdc0:	429a      	cmp	r2, r3
 801fdc2:	bf0c      	ite	eq
 801fdc4:	2301      	moveq	r3, #1
 801fdc6:	2300      	movne	r3, #0
 801fdc8:	b2db      	uxtb	r3, r3
 801fdca:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801fdcc:	7efb      	ldrb	r3, [r7, #27]
 801fdce:	2b00      	cmp	r3, #0
 801fdd0:	d041      	beq.n	801fe56 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801fdd2:	2108      	movs	r1, #8
 801fdd4:	6878      	ldr	r0, [r7, #4]
 801fdd6:	f7f9 f8eb 	bl	8018fb0 <pbuf_remove_header>
 801fdda:	4603      	mov	r3, r0
 801fddc:	2b00      	cmp	r3, #0
 801fdde:	d00a      	beq.n	801fdf6 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801fde0:	4b20      	ldr	r3, [pc, #128]	; (801fe64 <udp_input+0x208>)
 801fde2:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801fde6:	4925      	ldr	r1, [pc, #148]	; (801fe7c <udp_input+0x220>)
 801fde8:	4820      	ldr	r0, [pc, #128]	; (801fe6c <udp_input+0x210>)
 801fdea:	f005 fcdf 	bl	80257ac <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801fdee:	6878      	ldr	r0, [r7, #4]
 801fdf0:	f7f9 f964 	bl	80190bc <pbuf_free>
      goto end;
 801fdf4:	e032      	b.n	801fe5c <udp_input+0x200>
    }

    if (pcb != NULL) {
 801fdf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fdf8:	2b00      	cmp	r3, #0
 801fdfa:	d012      	beq.n	801fe22 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801fdfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fdfe:	699b      	ldr	r3, [r3, #24]
 801fe00:	2b00      	cmp	r3, #0
 801fe02:	d00a      	beq.n	801fe1a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801fe04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fe06:	699c      	ldr	r4, [r3, #24]
 801fe08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fe0a:	69d8      	ldr	r0, [r3, #28]
 801fe0c:	8a3b      	ldrh	r3, [r7, #16]
 801fe0e:	9300      	str	r3, [sp, #0]
 801fe10:	4b1b      	ldr	r3, [pc, #108]	; (801fe80 <udp_input+0x224>)
 801fe12:	687a      	ldr	r2, [r7, #4]
 801fe14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801fe16:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801fe18:	e021      	b.n	801fe5e <udp_input+0x202>
        pbuf_free(p);
 801fe1a:	6878      	ldr	r0, [r7, #4]
 801fe1c:	f7f9 f94e 	bl	80190bc <pbuf_free>
        goto end;
 801fe20:	e01c      	b.n	801fe5c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801fe22:	7cfb      	ldrb	r3, [r7, #19]
 801fe24:	2b00      	cmp	r3, #0
 801fe26:	d112      	bne.n	801fe4e <udp_input+0x1f2>
 801fe28:	4b12      	ldr	r3, [pc, #72]	; (801fe74 <udp_input+0x218>)
 801fe2a:	695b      	ldr	r3, [r3, #20]
 801fe2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801fe30:	2be0      	cmp	r3, #224	; 0xe0
 801fe32:	d00c      	beq.n	801fe4e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801fe34:	4b0f      	ldr	r3, [pc, #60]	; (801fe74 <udp_input+0x218>)
 801fe36:	899b      	ldrh	r3, [r3, #12]
 801fe38:	3308      	adds	r3, #8
 801fe3a:	b29b      	uxth	r3, r3
 801fe3c:	b21b      	sxth	r3, r3
 801fe3e:	4619      	mov	r1, r3
 801fe40:	6878      	ldr	r0, [r7, #4]
 801fe42:	f7f9 f928 	bl	8019096 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801fe46:	2103      	movs	r1, #3
 801fe48:	6878      	ldr	r0, [r7, #4]
 801fe4a:	f003 f9fb 	bl	8023244 <icmp_dest_unreach>
      pbuf_free(p);
 801fe4e:	6878      	ldr	r0, [r7, #4]
 801fe50:	f7f9 f934 	bl	80190bc <pbuf_free>
  return;
 801fe54:	e003      	b.n	801fe5e <udp_input+0x202>
    pbuf_free(p);
 801fe56:	6878      	ldr	r0, [r7, #4]
 801fe58:	f7f9 f930 	bl	80190bc <pbuf_free>
  return;
 801fe5c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801fe5e:	372c      	adds	r7, #44	; 0x2c
 801fe60:	46bd      	mov	sp, r7
 801fe62:	bd90      	pop	{r4, r7, pc}
 801fe64:	0802d424 	.word	0x0802d424
 801fe68:	0802d4c8 	.word	0x0802d4c8
 801fe6c:	0802d478 	.word	0x0802d478
 801fe70:	0802d4e0 	.word	0x0802d4e0
 801fe74:	20017778 	.word	0x20017778
 801fe78:	2001bd24 	.word	0x2001bd24
 801fe7c:	0802d4fc 	.word	0x0802d4fc
 801fe80:	20017788 	.word	0x20017788

0801fe84 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801fe84:	b580      	push	{r7, lr}
 801fe86:	b088      	sub	sp, #32
 801fe88:	af02      	add	r7, sp, #8
 801fe8a:	60f8      	str	r0, [r7, #12]
 801fe8c:	60b9      	str	r1, [r7, #8]
 801fe8e:	607a      	str	r2, [r7, #4]
 801fe90:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801fe92:	68fb      	ldr	r3, [r7, #12]
 801fe94:	2b00      	cmp	r3, #0
 801fe96:	d109      	bne.n	801feac <udp_sendto_if+0x28>
 801fe98:	4b2e      	ldr	r3, [pc, #184]	; (801ff54 <udp_sendto_if+0xd0>)
 801fe9a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801fe9e:	492e      	ldr	r1, [pc, #184]	; (801ff58 <udp_sendto_if+0xd4>)
 801fea0:	482e      	ldr	r0, [pc, #184]	; (801ff5c <udp_sendto_if+0xd8>)
 801fea2:	f005 fc83 	bl	80257ac <iprintf>
 801fea6:	f06f 030f 	mvn.w	r3, #15
 801feaa:	e04f      	b.n	801ff4c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801feac:	68bb      	ldr	r3, [r7, #8]
 801feae:	2b00      	cmp	r3, #0
 801feb0:	d109      	bne.n	801fec6 <udp_sendto_if+0x42>
 801feb2:	4b28      	ldr	r3, [pc, #160]	; (801ff54 <udp_sendto_if+0xd0>)
 801feb4:	f240 2281 	movw	r2, #641	; 0x281
 801feb8:	4929      	ldr	r1, [pc, #164]	; (801ff60 <udp_sendto_if+0xdc>)
 801feba:	4828      	ldr	r0, [pc, #160]	; (801ff5c <udp_sendto_if+0xd8>)
 801febc:	f005 fc76 	bl	80257ac <iprintf>
 801fec0:	f06f 030f 	mvn.w	r3, #15
 801fec4:	e042      	b.n	801ff4c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801fec6:	687b      	ldr	r3, [r7, #4]
 801fec8:	2b00      	cmp	r3, #0
 801feca:	d109      	bne.n	801fee0 <udp_sendto_if+0x5c>
 801fecc:	4b21      	ldr	r3, [pc, #132]	; (801ff54 <udp_sendto_if+0xd0>)
 801fece:	f240 2282 	movw	r2, #642	; 0x282
 801fed2:	4924      	ldr	r1, [pc, #144]	; (801ff64 <udp_sendto_if+0xe0>)
 801fed4:	4821      	ldr	r0, [pc, #132]	; (801ff5c <udp_sendto_if+0xd8>)
 801fed6:	f005 fc69 	bl	80257ac <iprintf>
 801feda:	f06f 030f 	mvn.w	r3, #15
 801fede:	e035      	b.n	801ff4c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801fee0:	6a3b      	ldr	r3, [r7, #32]
 801fee2:	2b00      	cmp	r3, #0
 801fee4:	d109      	bne.n	801fefa <udp_sendto_if+0x76>
 801fee6:	4b1b      	ldr	r3, [pc, #108]	; (801ff54 <udp_sendto_if+0xd0>)
 801fee8:	f240 2283 	movw	r2, #643	; 0x283
 801feec:	491e      	ldr	r1, [pc, #120]	; (801ff68 <udp_sendto_if+0xe4>)
 801feee:	481b      	ldr	r0, [pc, #108]	; (801ff5c <udp_sendto_if+0xd8>)
 801fef0:	f005 fc5c 	bl	80257ac <iprintf>
 801fef4:	f06f 030f 	mvn.w	r3, #15
 801fef8:	e028      	b.n	801ff4c <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801fefa:	68fb      	ldr	r3, [r7, #12]
 801fefc:	2b00      	cmp	r3, #0
 801fefe:	d009      	beq.n	801ff14 <udp_sendto_if+0x90>
 801ff00:	68fb      	ldr	r3, [r7, #12]
 801ff02:	681b      	ldr	r3, [r3, #0]
 801ff04:	2b00      	cmp	r3, #0
 801ff06:	d005      	beq.n	801ff14 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801ff08:	68fb      	ldr	r3, [r7, #12]
 801ff0a:	681b      	ldr	r3, [r3, #0]
 801ff0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801ff10:	2be0      	cmp	r3, #224	; 0xe0
 801ff12:	d103      	bne.n	801ff1c <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 801ff14:	6a3b      	ldr	r3, [r7, #32]
 801ff16:	3304      	adds	r3, #4
 801ff18:	617b      	str	r3, [r7, #20]
 801ff1a:	e00b      	b.n	801ff34 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801ff1c:	68fb      	ldr	r3, [r7, #12]
 801ff1e:	681a      	ldr	r2, [r3, #0]
 801ff20:	6a3b      	ldr	r3, [r7, #32]
 801ff22:	3304      	adds	r3, #4
 801ff24:	681b      	ldr	r3, [r3, #0]
 801ff26:	429a      	cmp	r2, r3
 801ff28:	d002      	beq.n	801ff30 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801ff2a:	f06f 0303 	mvn.w	r3, #3
 801ff2e:	e00d      	b.n	801ff4c <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801ff30:	68fb      	ldr	r3, [r7, #12]
 801ff32:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801ff34:	887a      	ldrh	r2, [r7, #2]
 801ff36:	697b      	ldr	r3, [r7, #20]
 801ff38:	9301      	str	r3, [sp, #4]
 801ff3a:	6a3b      	ldr	r3, [r7, #32]
 801ff3c:	9300      	str	r3, [sp, #0]
 801ff3e:	4613      	mov	r3, r2
 801ff40:	687a      	ldr	r2, [r7, #4]
 801ff42:	68b9      	ldr	r1, [r7, #8]
 801ff44:	68f8      	ldr	r0, [r7, #12]
 801ff46:	f000 f811 	bl	801ff6c <udp_sendto_if_src>
 801ff4a:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801ff4c:	4618      	mov	r0, r3
 801ff4e:	3718      	adds	r7, #24
 801ff50:	46bd      	mov	sp, r7
 801ff52:	bd80      	pop	{r7, pc}
 801ff54:	0802d424 	.word	0x0802d424
 801ff58:	0802d598 	.word	0x0802d598
 801ff5c:	0802d478 	.word	0x0802d478
 801ff60:	0802d5b4 	.word	0x0802d5b4
 801ff64:	0802d5d0 	.word	0x0802d5d0
 801ff68:	0802d5f0 	.word	0x0802d5f0

0801ff6c <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 801ff6c:	b580      	push	{r7, lr}
 801ff6e:	b08c      	sub	sp, #48	; 0x30
 801ff70:	af04      	add	r7, sp, #16
 801ff72:	60f8      	str	r0, [r7, #12]
 801ff74:	60b9      	str	r1, [r7, #8]
 801ff76:	607a      	str	r2, [r7, #4]
 801ff78:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801ff7a:	68fb      	ldr	r3, [r7, #12]
 801ff7c:	2b00      	cmp	r3, #0
 801ff7e:	d109      	bne.n	801ff94 <udp_sendto_if_src+0x28>
 801ff80:	4b65      	ldr	r3, [pc, #404]	; (8020118 <udp_sendto_if_src+0x1ac>)
 801ff82:	f240 22d1 	movw	r2, #721	; 0x2d1
 801ff86:	4965      	ldr	r1, [pc, #404]	; (802011c <udp_sendto_if_src+0x1b0>)
 801ff88:	4865      	ldr	r0, [pc, #404]	; (8020120 <udp_sendto_if_src+0x1b4>)
 801ff8a:	f005 fc0f 	bl	80257ac <iprintf>
 801ff8e:	f06f 030f 	mvn.w	r3, #15
 801ff92:	e0bc      	b.n	802010e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801ff94:	68bb      	ldr	r3, [r7, #8]
 801ff96:	2b00      	cmp	r3, #0
 801ff98:	d109      	bne.n	801ffae <udp_sendto_if_src+0x42>
 801ff9a:	4b5f      	ldr	r3, [pc, #380]	; (8020118 <udp_sendto_if_src+0x1ac>)
 801ff9c:	f240 22d2 	movw	r2, #722	; 0x2d2
 801ffa0:	4960      	ldr	r1, [pc, #384]	; (8020124 <udp_sendto_if_src+0x1b8>)
 801ffa2:	485f      	ldr	r0, [pc, #380]	; (8020120 <udp_sendto_if_src+0x1b4>)
 801ffa4:	f005 fc02 	bl	80257ac <iprintf>
 801ffa8:	f06f 030f 	mvn.w	r3, #15
 801ffac:	e0af      	b.n	802010e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801ffae:	687b      	ldr	r3, [r7, #4]
 801ffb0:	2b00      	cmp	r3, #0
 801ffb2:	d109      	bne.n	801ffc8 <udp_sendto_if_src+0x5c>
 801ffb4:	4b58      	ldr	r3, [pc, #352]	; (8020118 <udp_sendto_if_src+0x1ac>)
 801ffb6:	f240 22d3 	movw	r2, #723	; 0x2d3
 801ffba:	495b      	ldr	r1, [pc, #364]	; (8020128 <udp_sendto_if_src+0x1bc>)
 801ffbc:	4858      	ldr	r0, [pc, #352]	; (8020120 <udp_sendto_if_src+0x1b4>)
 801ffbe:	f005 fbf5 	bl	80257ac <iprintf>
 801ffc2:	f06f 030f 	mvn.w	r3, #15
 801ffc6:	e0a2      	b.n	802010e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801ffc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ffca:	2b00      	cmp	r3, #0
 801ffcc:	d109      	bne.n	801ffe2 <udp_sendto_if_src+0x76>
 801ffce:	4b52      	ldr	r3, [pc, #328]	; (8020118 <udp_sendto_if_src+0x1ac>)
 801ffd0:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 801ffd4:	4955      	ldr	r1, [pc, #340]	; (802012c <udp_sendto_if_src+0x1c0>)
 801ffd6:	4852      	ldr	r0, [pc, #328]	; (8020120 <udp_sendto_if_src+0x1b4>)
 801ffd8:	f005 fbe8 	bl	80257ac <iprintf>
 801ffdc:	f06f 030f 	mvn.w	r3, #15
 801ffe0:	e095      	b.n	802010e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801ffe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ffe4:	2b00      	cmp	r3, #0
 801ffe6:	d109      	bne.n	801fffc <udp_sendto_if_src+0x90>
 801ffe8:	4b4b      	ldr	r3, [pc, #300]	; (8020118 <udp_sendto_if_src+0x1ac>)
 801ffea:	f240 22d5 	movw	r2, #725	; 0x2d5
 801ffee:	4950      	ldr	r1, [pc, #320]	; (8020130 <udp_sendto_if_src+0x1c4>)
 801fff0:	484b      	ldr	r0, [pc, #300]	; (8020120 <udp_sendto_if_src+0x1b4>)
 801fff2:	f005 fbdb 	bl	80257ac <iprintf>
 801fff6:	f06f 030f 	mvn.w	r3, #15
 801fffa:	e088      	b.n	802010e <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 801fffc:	68fb      	ldr	r3, [r7, #12]
 801fffe:	8a5b      	ldrh	r3, [r3, #18]
 8020000:	2b00      	cmp	r3, #0
 8020002:	d10f      	bne.n	8020024 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8020004:	68f9      	ldr	r1, [r7, #12]
 8020006:	68fb      	ldr	r3, [r7, #12]
 8020008:	8a5b      	ldrh	r3, [r3, #18]
 802000a:	461a      	mov	r2, r3
 802000c:	68f8      	ldr	r0, [r7, #12]
 802000e:	f000 f893 	bl	8020138 <udp_bind>
 8020012:	4603      	mov	r3, r0
 8020014:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8020016:	f997 301b 	ldrsb.w	r3, [r7, #27]
 802001a:	2b00      	cmp	r3, #0
 802001c:	d002      	beq.n	8020024 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 802001e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8020022:	e074      	b.n	802010e <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8020024:	68bb      	ldr	r3, [r7, #8]
 8020026:	891b      	ldrh	r3, [r3, #8]
 8020028:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 802002c:	4293      	cmp	r3, r2
 802002e:	d902      	bls.n	8020036 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8020030:	f04f 33ff 	mov.w	r3, #4294967295
 8020034:	e06b      	b.n	802010e <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8020036:	2108      	movs	r1, #8
 8020038:	68b8      	ldr	r0, [r7, #8]
 802003a:	f7f8 ffa9 	bl	8018f90 <pbuf_add_header>
 802003e:	4603      	mov	r3, r0
 8020040:	2b00      	cmp	r3, #0
 8020042:	d015      	beq.n	8020070 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8020044:	f44f 7220 	mov.w	r2, #640	; 0x280
 8020048:	2108      	movs	r1, #8
 802004a:	2022      	movs	r0, #34	; 0x22
 802004c:	f7f8 fd52 	bl	8018af4 <pbuf_alloc>
 8020050:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8020052:	69fb      	ldr	r3, [r7, #28]
 8020054:	2b00      	cmp	r3, #0
 8020056:	d102      	bne.n	802005e <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8020058:	f04f 33ff 	mov.w	r3, #4294967295
 802005c:	e057      	b.n	802010e <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 802005e:	68bb      	ldr	r3, [r7, #8]
 8020060:	891b      	ldrh	r3, [r3, #8]
 8020062:	2b00      	cmp	r3, #0
 8020064:	d006      	beq.n	8020074 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8020066:	68b9      	ldr	r1, [r7, #8]
 8020068:	69f8      	ldr	r0, [r7, #28]
 802006a:	f7f9 f94b 	bl	8019304 <pbuf_chain>
 802006e:	e001      	b.n	8020074 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8020070:	68bb      	ldr	r3, [r7, #8]
 8020072:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8020074:	69fb      	ldr	r3, [r7, #28]
 8020076:	895b      	ldrh	r3, [r3, #10]
 8020078:	2b07      	cmp	r3, #7
 802007a:	d806      	bhi.n	802008a <udp_sendto_if_src+0x11e>
 802007c:	4b26      	ldr	r3, [pc, #152]	; (8020118 <udp_sendto_if_src+0x1ac>)
 802007e:	f240 320d 	movw	r2, #781	; 0x30d
 8020082:	492c      	ldr	r1, [pc, #176]	; (8020134 <udp_sendto_if_src+0x1c8>)
 8020084:	4826      	ldr	r0, [pc, #152]	; (8020120 <udp_sendto_if_src+0x1b4>)
 8020086:	f005 fb91 	bl	80257ac <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 802008a:	69fb      	ldr	r3, [r7, #28]
 802008c:	685b      	ldr	r3, [r3, #4]
 802008e:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8020090:	68fb      	ldr	r3, [r7, #12]
 8020092:	8a5b      	ldrh	r3, [r3, #18]
 8020094:	4618      	mov	r0, r3
 8020096:	f7f7 fc31 	bl	80178fc <lwip_htons>
 802009a:	4603      	mov	r3, r0
 802009c:	461a      	mov	r2, r3
 802009e:	697b      	ldr	r3, [r7, #20]
 80200a0:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 80200a2:	887b      	ldrh	r3, [r7, #2]
 80200a4:	4618      	mov	r0, r3
 80200a6:	f7f7 fc29 	bl	80178fc <lwip_htons>
 80200aa:	4603      	mov	r3, r0
 80200ac:	461a      	mov	r2, r3
 80200ae:	697b      	ldr	r3, [r7, #20]
 80200b0:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 80200b2:	697b      	ldr	r3, [r7, #20]
 80200b4:	2200      	movs	r2, #0
 80200b6:	719a      	strb	r2, [r3, #6]
 80200b8:	2200      	movs	r2, #0
 80200ba:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 80200bc:	69fb      	ldr	r3, [r7, #28]
 80200be:	891b      	ldrh	r3, [r3, #8]
 80200c0:	4618      	mov	r0, r3
 80200c2:	f7f7 fc1b 	bl	80178fc <lwip_htons>
 80200c6:	4603      	mov	r3, r0
 80200c8:	461a      	mov	r2, r3
 80200ca:	697b      	ldr	r3, [r7, #20]
 80200cc:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 80200ce:	2311      	movs	r3, #17
 80200d0:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 80200d2:	68fb      	ldr	r3, [r7, #12]
 80200d4:	7adb      	ldrb	r3, [r3, #11]
 80200d6:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80200d8:	68fb      	ldr	r3, [r7, #12]
 80200da:	7a9b      	ldrb	r3, [r3, #10]
 80200dc:	7cb9      	ldrb	r1, [r7, #18]
 80200de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80200e0:	9202      	str	r2, [sp, #8]
 80200e2:	7cfa      	ldrb	r2, [r7, #19]
 80200e4:	9201      	str	r2, [sp, #4]
 80200e6:	9300      	str	r3, [sp, #0]
 80200e8:	460b      	mov	r3, r1
 80200ea:	687a      	ldr	r2, [r7, #4]
 80200ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80200ee:	69f8      	ldr	r0, [r7, #28]
 80200f0:	f003 fb38 	bl	8023764 <ip4_output_if_src>
 80200f4:	4603      	mov	r3, r0
 80200f6:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 80200f8:	69fa      	ldr	r2, [r7, #28]
 80200fa:	68bb      	ldr	r3, [r7, #8]
 80200fc:	429a      	cmp	r2, r3
 80200fe:	d004      	beq.n	802010a <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8020100:	69f8      	ldr	r0, [r7, #28]
 8020102:	f7f8 ffdb 	bl	80190bc <pbuf_free>
    q = NULL;
 8020106:	2300      	movs	r3, #0
 8020108:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 802010a:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 802010e:	4618      	mov	r0, r3
 8020110:	3720      	adds	r7, #32
 8020112:	46bd      	mov	sp, r7
 8020114:	bd80      	pop	{r7, pc}
 8020116:	bf00      	nop
 8020118:	0802d424 	.word	0x0802d424
 802011c:	0802d610 	.word	0x0802d610
 8020120:	0802d478 	.word	0x0802d478
 8020124:	0802d630 	.word	0x0802d630
 8020128:	0802d650 	.word	0x0802d650
 802012c:	0802d674 	.word	0x0802d674
 8020130:	0802d698 	.word	0x0802d698
 8020134:	0802d6bc 	.word	0x0802d6bc

08020138 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8020138:	b580      	push	{r7, lr}
 802013a:	b086      	sub	sp, #24
 802013c:	af00      	add	r7, sp, #0
 802013e:	60f8      	str	r0, [r7, #12]
 8020140:	60b9      	str	r1, [r7, #8]
 8020142:	4613      	mov	r3, r2
 8020144:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8020146:	68bb      	ldr	r3, [r7, #8]
 8020148:	2b00      	cmp	r3, #0
 802014a:	d101      	bne.n	8020150 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 802014c:	4b39      	ldr	r3, [pc, #228]	; (8020234 <udp_bind+0xfc>)
 802014e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8020150:	68fb      	ldr	r3, [r7, #12]
 8020152:	2b00      	cmp	r3, #0
 8020154:	d109      	bne.n	802016a <udp_bind+0x32>
 8020156:	4b38      	ldr	r3, [pc, #224]	; (8020238 <udp_bind+0x100>)
 8020158:	f240 32b7 	movw	r2, #951	; 0x3b7
 802015c:	4937      	ldr	r1, [pc, #220]	; (802023c <udp_bind+0x104>)
 802015e:	4838      	ldr	r0, [pc, #224]	; (8020240 <udp_bind+0x108>)
 8020160:	f005 fb24 	bl	80257ac <iprintf>
 8020164:	f06f 030f 	mvn.w	r3, #15
 8020168:	e060      	b.n	802022c <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 802016a:	2300      	movs	r3, #0
 802016c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 802016e:	4b35      	ldr	r3, [pc, #212]	; (8020244 <udp_bind+0x10c>)
 8020170:	681b      	ldr	r3, [r3, #0]
 8020172:	617b      	str	r3, [r7, #20]
 8020174:	e009      	b.n	802018a <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8020176:	68fa      	ldr	r2, [r7, #12]
 8020178:	697b      	ldr	r3, [r7, #20]
 802017a:	429a      	cmp	r2, r3
 802017c:	d102      	bne.n	8020184 <udp_bind+0x4c>
      rebind = 1;
 802017e:	2301      	movs	r3, #1
 8020180:	74fb      	strb	r3, [r7, #19]
      break;
 8020182:	e005      	b.n	8020190 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8020184:	697b      	ldr	r3, [r7, #20]
 8020186:	68db      	ldr	r3, [r3, #12]
 8020188:	617b      	str	r3, [r7, #20]
 802018a:	697b      	ldr	r3, [r7, #20]
 802018c:	2b00      	cmp	r3, #0
 802018e:	d1f2      	bne.n	8020176 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8020190:	88fb      	ldrh	r3, [r7, #6]
 8020192:	2b00      	cmp	r3, #0
 8020194:	d109      	bne.n	80201aa <udp_bind+0x72>
    port = udp_new_port();
 8020196:	f7ff fcc5 	bl	801fb24 <udp_new_port>
 802019a:	4603      	mov	r3, r0
 802019c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 802019e:	88fb      	ldrh	r3, [r7, #6]
 80201a0:	2b00      	cmp	r3, #0
 80201a2:	d12c      	bne.n	80201fe <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 80201a4:	f06f 0307 	mvn.w	r3, #7
 80201a8:	e040      	b.n	802022c <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80201aa:	4b26      	ldr	r3, [pc, #152]	; (8020244 <udp_bind+0x10c>)
 80201ac:	681b      	ldr	r3, [r3, #0]
 80201ae:	617b      	str	r3, [r7, #20]
 80201b0:	e022      	b.n	80201f8 <udp_bind+0xc0>
      if (pcb != ipcb) {
 80201b2:	68fa      	ldr	r2, [r7, #12]
 80201b4:	697b      	ldr	r3, [r7, #20]
 80201b6:	429a      	cmp	r2, r3
 80201b8:	d01b      	beq.n	80201f2 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80201ba:	697b      	ldr	r3, [r7, #20]
 80201bc:	8a5b      	ldrh	r3, [r3, #18]
 80201be:	88fa      	ldrh	r2, [r7, #6]
 80201c0:	429a      	cmp	r2, r3
 80201c2:	d116      	bne.n	80201f2 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80201c4:	697b      	ldr	r3, [r7, #20]
 80201c6:	681a      	ldr	r2, [r3, #0]
 80201c8:	68bb      	ldr	r3, [r7, #8]
 80201ca:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80201cc:	429a      	cmp	r2, r3
 80201ce:	d00d      	beq.n	80201ec <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80201d0:	68bb      	ldr	r3, [r7, #8]
 80201d2:	2b00      	cmp	r3, #0
 80201d4:	d00a      	beq.n	80201ec <udp_bind+0xb4>
 80201d6:	68bb      	ldr	r3, [r7, #8]
 80201d8:	681b      	ldr	r3, [r3, #0]
 80201da:	2b00      	cmp	r3, #0
 80201dc:	d006      	beq.n	80201ec <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80201de:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80201e0:	2b00      	cmp	r3, #0
 80201e2:	d003      	beq.n	80201ec <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80201e4:	697b      	ldr	r3, [r7, #20]
 80201e6:	681b      	ldr	r3, [r3, #0]
 80201e8:	2b00      	cmp	r3, #0
 80201ea:	d102      	bne.n	80201f2 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80201ec:	f06f 0307 	mvn.w	r3, #7
 80201f0:	e01c      	b.n	802022c <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80201f2:	697b      	ldr	r3, [r7, #20]
 80201f4:	68db      	ldr	r3, [r3, #12]
 80201f6:	617b      	str	r3, [r7, #20]
 80201f8:	697b      	ldr	r3, [r7, #20]
 80201fa:	2b00      	cmp	r3, #0
 80201fc:	d1d9      	bne.n	80201b2 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80201fe:	68bb      	ldr	r3, [r7, #8]
 8020200:	2b00      	cmp	r3, #0
 8020202:	d002      	beq.n	802020a <udp_bind+0xd2>
 8020204:	68bb      	ldr	r3, [r7, #8]
 8020206:	681b      	ldr	r3, [r3, #0]
 8020208:	e000      	b.n	802020c <udp_bind+0xd4>
 802020a:	2300      	movs	r3, #0
 802020c:	68fa      	ldr	r2, [r7, #12]
 802020e:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8020210:	68fb      	ldr	r3, [r7, #12]
 8020212:	88fa      	ldrh	r2, [r7, #6]
 8020214:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8020216:	7cfb      	ldrb	r3, [r7, #19]
 8020218:	2b00      	cmp	r3, #0
 802021a:	d106      	bne.n	802022a <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 802021c:	4b09      	ldr	r3, [pc, #36]	; (8020244 <udp_bind+0x10c>)
 802021e:	681a      	ldr	r2, [r3, #0]
 8020220:	68fb      	ldr	r3, [r7, #12]
 8020222:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8020224:	4a07      	ldr	r2, [pc, #28]	; (8020244 <udp_bind+0x10c>)
 8020226:	68fb      	ldr	r3, [r7, #12]
 8020228:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 802022a:	2300      	movs	r3, #0
}
 802022c:	4618      	mov	r0, r3
 802022e:	3718      	adds	r7, #24
 8020230:	46bd      	mov	sp, r7
 8020232:	bd80      	pop	{r7, pc}
 8020234:	0802e468 	.word	0x0802e468
 8020238:	0802d424 	.word	0x0802d424
 802023c:	0802d6ec 	.word	0x0802d6ec
 8020240:	0802d478 	.word	0x0802d478
 8020244:	2001bd24 	.word	0x2001bd24

08020248 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8020248:	b580      	push	{r7, lr}
 802024a:	b086      	sub	sp, #24
 802024c:	af00      	add	r7, sp, #0
 802024e:	60f8      	str	r0, [r7, #12]
 8020250:	60b9      	str	r1, [r7, #8]
 8020252:	4613      	mov	r3, r2
 8020254:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8020256:	68fb      	ldr	r3, [r7, #12]
 8020258:	2b00      	cmp	r3, #0
 802025a:	d109      	bne.n	8020270 <udp_connect+0x28>
 802025c:	4b2c      	ldr	r3, [pc, #176]	; (8020310 <udp_connect+0xc8>)
 802025e:	f240 4235 	movw	r2, #1077	; 0x435
 8020262:	492c      	ldr	r1, [pc, #176]	; (8020314 <udp_connect+0xcc>)
 8020264:	482c      	ldr	r0, [pc, #176]	; (8020318 <udp_connect+0xd0>)
 8020266:	f005 faa1 	bl	80257ac <iprintf>
 802026a:	f06f 030f 	mvn.w	r3, #15
 802026e:	e04b      	b.n	8020308 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8020270:	68bb      	ldr	r3, [r7, #8]
 8020272:	2b00      	cmp	r3, #0
 8020274:	d109      	bne.n	802028a <udp_connect+0x42>
 8020276:	4b26      	ldr	r3, [pc, #152]	; (8020310 <udp_connect+0xc8>)
 8020278:	f240 4236 	movw	r2, #1078	; 0x436
 802027c:	4927      	ldr	r1, [pc, #156]	; (802031c <udp_connect+0xd4>)
 802027e:	4826      	ldr	r0, [pc, #152]	; (8020318 <udp_connect+0xd0>)
 8020280:	f005 fa94 	bl	80257ac <iprintf>
 8020284:	f06f 030f 	mvn.w	r3, #15
 8020288:	e03e      	b.n	8020308 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 802028a:	68fb      	ldr	r3, [r7, #12]
 802028c:	8a5b      	ldrh	r3, [r3, #18]
 802028e:	2b00      	cmp	r3, #0
 8020290:	d10f      	bne.n	80202b2 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8020292:	68f9      	ldr	r1, [r7, #12]
 8020294:	68fb      	ldr	r3, [r7, #12]
 8020296:	8a5b      	ldrh	r3, [r3, #18]
 8020298:	461a      	mov	r2, r3
 802029a:	68f8      	ldr	r0, [r7, #12]
 802029c:	f7ff ff4c 	bl	8020138 <udp_bind>
 80202a0:	4603      	mov	r3, r0
 80202a2:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 80202a4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80202a8:	2b00      	cmp	r3, #0
 80202aa:	d002      	beq.n	80202b2 <udp_connect+0x6a>
      return err;
 80202ac:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80202b0:	e02a      	b.n	8020308 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 80202b2:	68bb      	ldr	r3, [r7, #8]
 80202b4:	2b00      	cmp	r3, #0
 80202b6:	d002      	beq.n	80202be <udp_connect+0x76>
 80202b8:	68bb      	ldr	r3, [r7, #8]
 80202ba:	681b      	ldr	r3, [r3, #0]
 80202bc:	e000      	b.n	80202c0 <udp_connect+0x78>
 80202be:	2300      	movs	r3, #0
 80202c0:	68fa      	ldr	r2, [r7, #12]
 80202c2:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 80202c4:	68fb      	ldr	r3, [r7, #12]
 80202c6:	88fa      	ldrh	r2, [r7, #6]
 80202c8:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 80202ca:	68fb      	ldr	r3, [r7, #12]
 80202cc:	7c1b      	ldrb	r3, [r3, #16]
 80202ce:	f043 0304 	orr.w	r3, r3, #4
 80202d2:	b2da      	uxtb	r2, r3
 80202d4:	68fb      	ldr	r3, [r7, #12]
 80202d6:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80202d8:	4b11      	ldr	r3, [pc, #68]	; (8020320 <udp_connect+0xd8>)
 80202da:	681b      	ldr	r3, [r3, #0]
 80202dc:	617b      	str	r3, [r7, #20]
 80202de:	e008      	b.n	80202f2 <udp_connect+0xaa>
    if (pcb == ipcb) {
 80202e0:	68fa      	ldr	r2, [r7, #12]
 80202e2:	697b      	ldr	r3, [r7, #20]
 80202e4:	429a      	cmp	r2, r3
 80202e6:	d101      	bne.n	80202ec <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 80202e8:	2300      	movs	r3, #0
 80202ea:	e00d      	b.n	8020308 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80202ec:	697b      	ldr	r3, [r7, #20]
 80202ee:	68db      	ldr	r3, [r3, #12]
 80202f0:	617b      	str	r3, [r7, #20]
 80202f2:	697b      	ldr	r3, [r7, #20]
 80202f4:	2b00      	cmp	r3, #0
 80202f6:	d1f3      	bne.n	80202e0 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 80202f8:	4b09      	ldr	r3, [pc, #36]	; (8020320 <udp_connect+0xd8>)
 80202fa:	681a      	ldr	r2, [r3, #0]
 80202fc:	68fb      	ldr	r3, [r7, #12]
 80202fe:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8020300:	4a07      	ldr	r2, [pc, #28]	; (8020320 <udp_connect+0xd8>)
 8020302:	68fb      	ldr	r3, [r7, #12]
 8020304:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8020306:	2300      	movs	r3, #0
}
 8020308:	4618      	mov	r0, r3
 802030a:	3718      	adds	r7, #24
 802030c:	46bd      	mov	sp, r7
 802030e:	bd80      	pop	{r7, pc}
 8020310:	0802d424 	.word	0x0802d424
 8020314:	0802d704 	.word	0x0802d704
 8020318:	0802d478 	.word	0x0802d478
 802031c:	0802d720 	.word	0x0802d720
 8020320:	2001bd24 	.word	0x2001bd24

08020324 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8020324:	b580      	push	{r7, lr}
 8020326:	b084      	sub	sp, #16
 8020328:	af00      	add	r7, sp, #0
 802032a:	60f8      	str	r0, [r7, #12]
 802032c:	60b9      	str	r1, [r7, #8]
 802032e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8020330:	68fb      	ldr	r3, [r7, #12]
 8020332:	2b00      	cmp	r3, #0
 8020334:	d107      	bne.n	8020346 <udp_recv+0x22>
 8020336:	4b08      	ldr	r3, [pc, #32]	; (8020358 <udp_recv+0x34>)
 8020338:	f240 428a 	movw	r2, #1162	; 0x48a
 802033c:	4907      	ldr	r1, [pc, #28]	; (802035c <udp_recv+0x38>)
 802033e:	4808      	ldr	r0, [pc, #32]	; (8020360 <udp_recv+0x3c>)
 8020340:	f005 fa34 	bl	80257ac <iprintf>
 8020344:	e005      	b.n	8020352 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8020346:	68fb      	ldr	r3, [r7, #12]
 8020348:	68ba      	ldr	r2, [r7, #8]
 802034a:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 802034c:	68fb      	ldr	r3, [r7, #12]
 802034e:	687a      	ldr	r2, [r7, #4]
 8020350:	61da      	str	r2, [r3, #28]
}
 8020352:	3710      	adds	r7, #16
 8020354:	46bd      	mov	sp, r7
 8020356:	bd80      	pop	{r7, pc}
 8020358:	0802d424 	.word	0x0802d424
 802035c:	0802d758 	.word	0x0802d758
 8020360:	0802d478 	.word	0x0802d478

08020364 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8020364:	b580      	push	{r7, lr}
 8020366:	b084      	sub	sp, #16
 8020368:	af00      	add	r7, sp, #0
 802036a:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 802036c:	687b      	ldr	r3, [r7, #4]
 802036e:	2b00      	cmp	r3, #0
 8020370:	d107      	bne.n	8020382 <udp_remove+0x1e>
 8020372:	4b19      	ldr	r3, [pc, #100]	; (80203d8 <udp_remove+0x74>)
 8020374:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8020378:	4918      	ldr	r1, [pc, #96]	; (80203dc <udp_remove+0x78>)
 802037a:	4819      	ldr	r0, [pc, #100]	; (80203e0 <udp_remove+0x7c>)
 802037c:	f005 fa16 	bl	80257ac <iprintf>
 8020380:	e026      	b.n	80203d0 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8020382:	4b18      	ldr	r3, [pc, #96]	; (80203e4 <udp_remove+0x80>)
 8020384:	681b      	ldr	r3, [r3, #0]
 8020386:	687a      	ldr	r2, [r7, #4]
 8020388:	429a      	cmp	r2, r3
 802038a:	d105      	bne.n	8020398 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 802038c:	4b15      	ldr	r3, [pc, #84]	; (80203e4 <udp_remove+0x80>)
 802038e:	681b      	ldr	r3, [r3, #0]
 8020390:	68db      	ldr	r3, [r3, #12]
 8020392:	4a14      	ldr	r2, [pc, #80]	; (80203e4 <udp_remove+0x80>)
 8020394:	6013      	str	r3, [r2, #0]
 8020396:	e017      	b.n	80203c8 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8020398:	4b12      	ldr	r3, [pc, #72]	; (80203e4 <udp_remove+0x80>)
 802039a:	681b      	ldr	r3, [r3, #0]
 802039c:	60fb      	str	r3, [r7, #12]
 802039e:	e010      	b.n	80203c2 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80203a0:	68fb      	ldr	r3, [r7, #12]
 80203a2:	68db      	ldr	r3, [r3, #12]
 80203a4:	2b00      	cmp	r3, #0
 80203a6:	d009      	beq.n	80203bc <udp_remove+0x58>
 80203a8:	68fb      	ldr	r3, [r7, #12]
 80203aa:	68db      	ldr	r3, [r3, #12]
 80203ac:	687a      	ldr	r2, [r7, #4]
 80203ae:	429a      	cmp	r2, r3
 80203b0:	d104      	bne.n	80203bc <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 80203b2:	687b      	ldr	r3, [r7, #4]
 80203b4:	68da      	ldr	r2, [r3, #12]
 80203b6:	68fb      	ldr	r3, [r7, #12]
 80203b8:	60da      	str	r2, [r3, #12]
        break;
 80203ba:	e005      	b.n	80203c8 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80203bc:	68fb      	ldr	r3, [r7, #12]
 80203be:	68db      	ldr	r3, [r3, #12]
 80203c0:	60fb      	str	r3, [r7, #12]
 80203c2:	68fb      	ldr	r3, [r7, #12]
 80203c4:	2b00      	cmp	r3, #0
 80203c6:	d1eb      	bne.n	80203a0 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80203c8:	6879      	ldr	r1, [r7, #4]
 80203ca:	2000      	movs	r0, #0
 80203cc:	f7f7 ffc6 	bl	801835c <memp_free>
}
 80203d0:	3710      	adds	r7, #16
 80203d2:	46bd      	mov	sp, r7
 80203d4:	bd80      	pop	{r7, pc}
 80203d6:	bf00      	nop
 80203d8:	0802d424 	.word	0x0802d424
 80203dc:	0802d770 	.word	0x0802d770
 80203e0:	0802d478 	.word	0x0802d478
 80203e4:	2001bd24 	.word	0x2001bd24

080203e8 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80203e8:	b580      	push	{r7, lr}
 80203ea:	b082      	sub	sp, #8
 80203ec:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80203ee:	2000      	movs	r0, #0
 80203f0:	f7f7 ff62 	bl	80182b8 <memp_malloc>
 80203f4:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80203f6:	687b      	ldr	r3, [r7, #4]
 80203f8:	2b00      	cmp	r3, #0
 80203fa:	d007      	beq.n	802040c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80203fc:	2220      	movs	r2, #32
 80203fe:	2100      	movs	r1, #0
 8020400:	6878      	ldr	r0, [r7, #4]
 8020402:	f004 fb27 	bl	8024a54 <memset>
    pcb->ttl = UDP_TTL;
 8020406:	687b      	ldr	r3, [r7, #4]
 8020408:	22ff      	movs	r2, #255	; 0xff
 802040a:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 802040c:	687b      	ldr	r3, [r7, #4]
}
 802040e:	4618      	mov	r0, r3
 8020410:	3708      	adds	r7, #8
 8020412:	46bd      	mov	sp, r7
 8020414:	bd80      	pop	{r7, pc}
	...

08020418 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8020418:	b480      	push	{r7}
 802041a:	b085      	sub	sp, #20
 802041c:	af00      	add	r7, sp, #0
 802041e:	6078      	str	r0, [r7, #4]
 8020420:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8020422:	687b      	ldr	r3, [r7, #4]
 8020424:	2b00      	cmp	r3, #0
 8020426:	d01e      	beq.n	8020466 <udp_netif_ip_addr_changed+0x4e>
 8020428:	687b      	ldr	r3, [r7, #4]
 802042a:	681b      	ldr	r3, [r3, #0]
 802042c:	2b00      	cmp	r3, #0
 802042e:	d01a      	beq.n	8020466 <udp_netif_ip_addr_changed+0x4e>
 8020430:	683b      	ldr	r3, [r7, #0]
 8020432:	2b00      	cmp	r3, #0
 8020434:	d017      	beq.n	8020466 <udp_netif_ip_addr_changed+0x4e>
 8020436:	683b      	ldr	r3, [r7, #0]
 8020438:	681b      	ldr	r3, [r3, #0]
 802043a:	2b00      	cmp	r3, #0
 802043c:	d013      	beq.n	8020466 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 802043e:	4b0d      	ldr	r3, [pc, #52]	; (8020474 <udp_netif_ip_addr_changed+0x5c>)
 8020440:	681b      	ldr	r3, [r3, #0]
 8020442:	60fb      	str	r3, [r7, #12]
 8020444:	e00c      	b.n	8020460 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8020446:	68fb      	ldr	r3, [r7, #12]
 8020448:	681a      	ldr	r2, [r3, #0]
 802044a:	687b      	ldr	r3, [r7, #4]
 802044c:	681b      	ldr	r3, [r3, #0]
 802044e:	429a      	cmp	r2, r3
 8020450:	d103      	bne.n	802045a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8020452:	683b      	ldr	r3, [r7, #0]
 8020454:	681a      	ldr	r2, [r3, #0]
 8020456:	68fb      	ldr	r3, [r7, #12]
 8020458:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 802045a:	68fb      	ldr	r3, [r7, #12]
 802045c:	68db      	ldr	r3, [r3, #12]
 802045e:	60fb      	str	r3, [r7, #12]
 8020460:	68fb      	ldr	r3, [r7, #12]
 8020462:	2b00      	cmp	r3, #0
 8020464:	d1ef      	bne.n	8020446 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8020466:	bf00      	nop
 8020468:	3714      	adds	r7, #20
 802046a:	46bd      	mov	sp, r7
 802046c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020470:	4770      	bx	lr
 8020472:	bf00      	nop
 8020474:	2001bd24 	.word	0x2001bd24

08020478 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8020478:	b580      	push	{r7, lr}
 802047a:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 802047c:	4b20      	ldr	r3, [pc, #128]	; (8020500 <dhcp_inc_pcb_refcount+0x88>)
 802047e:	781b      	ldrb	r3, [r3, #0]
 8020480:	2b00      	cmp	r3, #0
 8020482:	d133      	bne.n	80204ec <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8020484:	4b1f      	ldr	r3, [pc, #124]	; (8020504 <dhcp_inc_pcb_refcount+0x8c>)
 8020486:	681b      	ldr	r3, [r3, #0]
 8020488:	2b00      	cmp	r3, #0
 802048a:	d005      	beq.n	8020498 <dhcp_inc_pcb_refcount+0x20>
 802048c:	4b1e      	ldr	r3, [pc, #120]	; (8020508 <dhcp_inc_pcb_refcount+0x90>)
 802048e:	22e5      	movs	r2, #229	; 0xe5
 8020490:	491e      	ldr	r1, [pc, #120]	; (802050c <dhcp_inc_pcb_refcount+0x94>)
 8020492:	481f      	ldr	r0, [pc, #124]	; (8020510 <dhcp_inc_pcb_refcount+0x98>)
 8020494:	f005 f98a 	bl	80257ac <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8020498:	f7ff ffa6 	bl	80203e8 <udp_new>
 802049c:	4603      	mov	r3, r0
 802049e:	4a19      	ldr	r2, [pc, #100]	; (8020504 <dhcp_inc_pcb_refcount+0x8c>)
 80204a0:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 80204a2:	4b18      	ldr	r3, [pc, #96]	; (8020504 <dhcp_inc_pcb_refcount+0x8c>)
 80204a4:	681b      	ldr	r3, [r3, #0]
 80204a6:	2b00      	cmp	r3, #0
 80204a8:	d102      	bne.n	80204b0 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 80204aa:	f04f 33ff 	mov.w	r3, #4294967295
 80204ae:	e024      	b.n	80204fa <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 80204b0:	4b14      	ldr	r3, [pc, #80]	; (8020504 <dhcp_inc_pcb_refcount+0x8c>)
 80204b2:	681b      	ldr	r3, [r3, #0]
 80204b4:	7a5a      	ldrb	r2, [r3, #9]
 80204b6:	4b13      	ldr	r3, [pc, #76]	; (8020504 <dhcp_inc_pcb_refcount+0x8c>)
 80204b8:	681b      	ldr	r3, [r3, #0]
 80204ba:	f042 0220 	orr.w	r2, r2, #32
 80204be:	b2d2      	uxtb	r2, r2
 80204c0:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 80204c2:	4b10      	ldr	r3, [pc, #64]	; (8020504 <dhcp_inc_pcb_refcount+0x8c>)
 80204c4:	681b      	ldr	r3, [r3, #0]
 80204c6:	2244      	movs	r2, #68	; 0x44
 80204c8:	4912      	ldr	r1, [pc, #72]	; (8020514 <dhcp_inc_pcb_refcount+0x9c>)
 80204ca:	4618      	mov	r0, r3
 80204cc:	f7ff fe34 	bl	8020138 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 80204d0:	4b0c      	ldr	r3, [pc, #48]	; (8020504 <dhcp_inc_pcb_refcount+0x8c>)
 80204d2:	681b      	ldr	r3, [r3, #0]
 80204d4:	2243      	movs	r2, #67	; 0x43
 80204d6:	490f      	ldr	r1, [pc, #60]	; (8020514 <dhcp_inc_pcb_refcount+0x9c>)
 80204d8:	4618      	mov	r0, r3
 80204da:	f7ff feb5 	bl	8020248 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 80204de:	4b09      	ldr	r3, [pc, #36]	; (8020504 <dhcp_inc_pcb_refcount+0x8c>)
 80204e0:	681b      	ldr	r3, [r3, #0]
 80204e2:	2200      	movs	r2, #0
 80204e4:	490c      	ldr	r1, [pc, #48]	; (8020518 <dhcp_inc_pcb_refcount+0xa0>)
 80204e6:	4618      	mov	r0, r3
 80204e8:	f7ff ff1c 	bl	8020324 <udp_recv>
  }

  dhcp_pcb_refcount++;
 80204ec:	4b04      	ldr	r3, [pc, #16]	; (8020500 <dhcp_inc_pcb_refcount+0x88>)
 80204ee:	781b      	ldrb	r3, [r3, #0]
 80204f0:	3301      	adds	r3, #1
 80204f2:	b2da      	uxtb	r2, r3
 80204f4:	4b02      	ldr	r3, [pc, #8]	; (8020500 <dhcp_inc_pcb_refcount+0x88>)
 80204f6:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 80204f8:	2300      	movs	r3, #0
}
 80204fa:	4618      	mov	r0, r3
 80204fc:	bd80      	pop	{r7, pc}
 80204fe:	bf00      	nop
 8020500:	20013824 	.word	0x20013824
 8020504:	20013820 	.word	0x20013820
 8020508:	0802d788 	.word	0x0802d788
 802050c:	0802d7c0 	.word	0x0802d7c0
 8020510:	0802d7e8 	.word	0x0802d7e8
 8020514:	0802e468 	.word	0x0802e468
 8020518:	08021dad 	.word	0x08021dad

0802051c <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 802051c:	b580      	push	{r7, lr}
 802051e:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8020520:	4b0e      	ldr	r3, [pc, #56]	; (802055c <dhcp_dec_pcb_refcount+0x40>)
 8020522:	781b      	ldrb	r3, [r3, #0]
 8020524:	2b00      	cmp	r3, #0
 8020526:	d105      	bne.n	8020534 <dhcp_dec_pcb_refcount+0x18>
 8020528:	4b0d      	ldr	r3, [pc, #52]	; (8020560 <dhcp_dec_pcb_refcount+0x44>)
 802052a:	22ff      	movs	r2, #255	; 0xff
 802052c:	490d      	ldr	r1, [pc, #52]	; (8020564 <dhcp_dec_pcb_refcount+0x48>)
 802052e:	480e      	ldr	r0, [pc, #56]	; (8020568 <dhcp_dec_pcb_refcount+0x4c>)
 8020530:	f005 f93c 	bl	80257ac <iprintf>
  dhcp_pcb_refcount--;
 8020534:	4b09      	ldr	r3, [pc, #36]	; (802055c <dhcp_dec_pcb_refcount+0x40>)
 8020536:	781b      	ldrb	r3, [r3, #0]
 8020538:	3b01      	subs	r3, #1
 802053a:	b2da      	uxtb	r2, r3
 802053c:	4b07      	ldr	r3, [pc, #28]	; (802055c <dhcp_dec_pcb_refcount+0x40>)
 802053e:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8020540:	4b06      	ldr	r3, [pc, #24]	; (802055c <dhcp_dec_pcb_refcount+0x40>)
 8020542:	781b      	ldrb	r3, [r3, #0]
 8020544:	2b00      	cmp	r3, #0
 8020546:	d107      	bne.n	8020558 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8020548:	4b08      	ldr	r3, [pc, #32]	; (802056c <dhcp_dec_pcb_refcount+0x50>)
 802054a:	681b      	ldr	r3, [r3, #0]
 802054c:	4618      	mov	r0, r3
 802054e:	f7ff ff09 	bl	8020364 <udp_remove>
    dhcp_pcb = NULL;
 8020552:	4b06      	ldr	r3, [pc, #24]	; (802056c <dhcp_dec_pcb_refcount+0x50>)
 8020554:	2200      	movs	r2, #0
 8020556:	601a      	str	r2, [r3, #0]
  }
}
 8020558:	bf00      	nop
 802055a:	bd80      	pop	{r7, pc}
 802055c:	20013824 	.word	0x20013824
 8020560:	0802d788 	.word	0x0802d788
 8020564:	0802d810 	.word	0x0802d810
 8020568:	0802d7e8 	.word	0x0802d7e8
 802056c:	20013820 	.word	0x20013820

08020570 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8020570:	b580      	push	{r7, lr}
 8020572:	b084      	sub	sp, #16
 8020574:	af00      	add	r7, sp, #0
 8020576:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8020578:	687b      	ldr	r3, [r7, #4]
 802057a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802057c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 802057e:	210c      	movs	r1, #12
 8020580:	68f8      	ldr	r0, [r7, #12]
 8020582:	f001 f855 	bl	8021630 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8020586:	4b06      	ldr	r3, [pc, #24]	; (80205a0 <dhcp_handle_nak+0x30>)
 8020588:	4a05      	ldr	r2, [pc, #20]	; (80205a0 <dhcp_handle_nak+0x30>)
 802058a:	4905      	ldr	r1, [pc, #20]	; (80205a0 <dhcp_handle_nak+0x30>)
 802058c:	6878      	ldr	r0, [r7, #4]
 802058e:	f7f8 f887 	bl	80186a0 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8020592:	6878      	ldr	r0, [r7, #4]
 8020594:	f000 fc48 	bl	8020e28 <dhcp_discover>
}
 8020598:	bf00      	nop
 802059a:	3710      	adds	r7, #16
 802059c:	46bd      	mov	sp, r7
 802059e:	bd80      	pop	{r7, pc}
 80205a0:	0802e468 	.word	0x0802e468

080205a4 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 80205a4:	b580      	push	{r7, lr}
 80205a6:	b084      	sub	sp, #16
 80205a8:	af00      	add	r7, sp, #0
 80205aa:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80205ac:	687b      	ldr	r3, [r7, #4]
 80205ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80205b0:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 80205b2:	2108      	movs	r1, #8
 80205b4:	68f8      	ldr	r0, [r7, #12]
 80205b6:	f001 f83b 	bl	8021630 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 80205ba:	68fb      	ldr	r3, [r7, #12]
 80205bc:	331c      	adds	r3, #28
 80205be:	2200      	movs	r2, #0
 80205c0:	4619      	mov	r1, r3
 80205c2:	6878      	ldr	r0, [r7, #4]
 80205c4:	f002 fb3c 	bl	8022c40 <etharp_query>
 80205c8:	4603      	mov	r3, r0
 80205ca:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 80205cc:	68fb      	ldr	r3, [r7, #12]
 80205ce:	799b      	ldrb	r3, [r3, #6]
 80205d0:	2bff      	cmp	r3, #255	; 0xff
 80205d2:	d005      	beq.n	80205e0 <dhcp_check+0x3c>
    dhcp->tries++;
 80205d4:	68fb      	ldr	r3, [r7, #12]
 80205d6:	799b      	ldrb	r3, [r3, #6]
 80205d8:	3301      	adds	r3, #1
 80205da:	b2da      	uxtb	r2, r3
 80205dc:	68fb      	ldr	r3, [r7, #12]
 80205de:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 80205e0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80205e4:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80205e6:	893b      	ldrh	r3, [r7, #8]
 80205e8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80205ec:	4a06      	ldr	r2, [pc, #24]	; (8020608 <dhcp_check+0x64>)
 80205ee:	fb82 1203 	smull	r1, r2, r2, r3
 80205f2:	1152      	asrs	r2, r2, #5
 80205f4:	17db      	asrs	r3, r3, #31
 80205f6:	1ad3      	subs	r3, r2, r3
 80205f8:	b29a      	uxth	r2, r3
 80205fa:	68fb      	ldr	r3, [r7, #12]
 80205fc:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 80205fe:	bf00      	nop
 8020600:	3710      	adds	r7, #16
 8020602:	46bd      	mov	sp, r7
 8020604:	bd80      	pop	{r7, pc}
 8020606:	bf00      	nop
 8020608:	10624dd3 	.word	0x10624dd3

0802060c <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 802060c:	b580      	push	{r7, lr}
 802060e:	b084      	sub	sp, #16
 8020610:	af00      	add	r7, sp, #0
 8020612:	6078      	str	r0, [r7, #4]
 8020614:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8020616:	687b      	ldr	r3, [r7, #4]
 8020618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802061a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 802061c:	4b0c      	ldr	r3, [pc, #48]	; (8020650 <dhcp_handle_offer+0x44>)
 802061e:	789b      	ldrb	r3, [r3, #2]
 8020620:	2b00      	cmp	r3, #0
 8020622:	d011      	beq.n	8020648 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8020624:	68fb      	ldr	r3, [r7, #12]
 8020626:	2200      	movs	r2, #0
 8020628:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 802062a:	4b0a      	ldr	r3, [pc, #40]	; (8020654 <dhcp_handle_offer+0x48>)
 802062c:	689b      	ldr	r3, [r3, #8]
 802062e:	4618      	mov	r0, r3
 8020630:	f7f7 f979 	bl	8017926 <lwip_htonl>
 8020634:	4602      	mov	r2, r0
 8020636:	68fb      	ldr	r3, [r7, #12]
 8020638:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 802063a:	683b      	ldr	r3, [r7, #0]
 802063c:	691a      	ldr	r2, [r3, #16]
 802063e:	68fb      	ldr	r3, [r7, #12]
 8020640:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8020642:	6878      	ldr	r0, [r7, #4]
 8020644:	f000 f808 	bl	8020658 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8020648:	bf00      	nop
 802064a:	3710      	adds	r7, #16
 802064c:	46bd      	mov	sp, r7
 802064e:	bd80      	pop	{r7, pc}
 8020650:	2001bd28 	.word	0x2001bd28
 8020654:	2001bd30 	.word	0x2001bd30

08020658 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8020658:	b5b0      	push	{r4, r5, r7, lr}
 802065a:	b08a      	sub	sp, #40	; 0x28
 802065c:	af02      	add	r7, sp, #8
 802065e:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8020660:	687b      	ldr	r3, [r7, #4]
 8020662:	2b00      	cmp	r3, #0
 8020664:	d109      	bne.n	802067a <dhcp_select+0x22>
 8020666:	4b71      	ldr	r3, [pc, #452]	; (802082c <dhcp_select+0x1d4>)
 8020668:	f240 1277 	movw	r2, #375	; 0x177
 802066c:	4970      	ldr	r1, [pc, #448]	; (8020830 <dhcp_select+0x1d8>)
 802066e:	4871      	ldr	r0, [pc, #452]	; (8020834 <dhcp_select+0x1dc>)
 8020670:	f005 f89c 	bl	80257ac <iprintf>
 8020674:	f06f 030f 	mvn.w	r3, #15
 8020678:	e0d3      	b.n	8020822 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 802067a:	687b      	ldr	r3, [r7, #4]
 802067c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802067e:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8020680:	69bb      	ldr	r3, [r7, #24]
 8020682:	2b00      	cmp	r3, #0
 8020684:	d109      	bne.n	802069a <dhcp_select+0x42>
 8020686:	4b69      	ldr	r3, [pc, #420]	; (802082c <dhcp_select+0x1d4>)
 8020688:	f240 1279 	movw	r2, #377	; 0x179
 802068c:	496a      	ldr	r1, [pc, #424]	; (8020838 <dhcp_select+0x1e0>)
 802068e:	4869      	ldr	r0, [pc, #420]	; (8020834 <dhcp_select+0x1dc>)
 8020690:	f005 f88c 	bl	80257ac <iprintf>
 8020694:	f06f 0305 	mvn.w	r3, #5
 8020698:	e0c3      	b.n	8020822 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 802069a:	2101      	movs	r1, #1
 802069c:	69b8      	ldr	r0, [r7, #24]
 802069e:	f000 ffc7 	bl	8021630 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80206a2:	f107 030c 	add.w	r3, r7, #12
 80206a6:	2203      	movs	r2, #3
 80206a8:	69b9      	ldr	r1, [r7, #24]
 80206aa:	6878      	ldr	r0, [r7, #4]
 80206ac:	f001 fc4c 	bl	8021f48 <dhcp_create_msg>
 80206b0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80206b2:	697b      	ldr	r3, [r7, #20]
 80206b4:	2b00      	cmp	r3, #0
 80206b6:	f000 8085 	beq.w	80207c4 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80206ba:	697b      	ldr	r3, [r7, #20]
 80206bc:	685b      	ldr	r3, [r3, #4]
 80206be:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80206c0:	89b8      	ldrh	r0, [r7, #12]
 80206c2:	693b      	ldr	r3, [r7, #16]
 80206c4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80206c8:	2302      	movs	r3, #2
 80206ca:	2239      	movs	r2, #57	; 0x39
 80206cc:	f000 ffca 	bl	8021664 <dhcp_option>
 80206d0:	4603      	mov	r3, r0
 80206d2:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80206d4:	89b8      	ldrh	r0, [r7, #12]
 80206d6:	693b      	ldr	r3, [r7, #16]
 80206d8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80206dc:	687b      	ldr	r3, [r7, #4]
 80206de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80206e0:	461a      	mov	r2, r3
 80206e2:	f001 f819 	bl	8021718 <dhcp_option_short>
 80206e6:	4603      	mov	r3, r0
 80206e8:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80206ea:	89b8      	ldrh	r0, [r7, #12]
 80206ec:	693b      	ldr	r3, [r7, #16]
 80206ee:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80206f2:	2304      	movs	r3, #4
 80206f4:	2232      	movs	r2, #50	; 0x32
 80206f6:	f000 ffb5 	bl	8021664 <dhcp_option>
 80206fa:	4603      	mov	r3, r0
 80206fc:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80206fe:	89bc      	ldrh	r4, [r7, #12]
 8020700:	693b      	ldr	r3, [r7, #16]
 8020702:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8020706:	69bb      	ldr	r3, [r7, #24]
 8020708:	69db      	ldr	r3, [r3, #28]
 802070a:	4618      	mov	r0, r3
 802070c:	f7f7 f90b 	bl	8017926 <lwip_htonl>
 8020710:	4603      	mov	r3, r0
 8020712:	461a      	mov	r2, r3
 8020714:	4629      	mov	r1, r5
 8020716:	4620      	mov	r0, r4
 8020718:	f001 f830 	bl	802177c <dhcp_option_long>
 802071c:	4603      	mov	r3, r0
 802071e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8020720:	89b8      	ldrh	r0, [r7, #12]
 8020722:	693b      	ldr	r3, [r7, #16]
 8020724:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8020728:	2304      	movs	r3, #4
 802072a:	2236      	movs	r2, #54	; 0x36
 802072c:	f000 ff9a 	bl	8021664 <dhcp_option>
 8020730:	4603      	mov	r3, r0
 8020732:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8020734:	89bc      	ldrh	r4, [r7, #12]
 8020736:	693b      	ldr	r3, [r7, #16]
 8020738:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 802073c:	69bb      	ldr	r3, [r7, #24]
 802073e:	699b      	ldr	r3, [r3, #24]
 8020740:	4618      	mov	r0, r3
 8020742:	f7f7 f8f0 	bl	8017926 <lwip_htonl>
 8020746:	4603      	mov	r3, r0
 8020748:	461a      	mov	r2, r3
 802074a:	4629      	mov	r1, r5
 802074c:	4620      	mov	r0, r4
 802074e:	f001 f815 	bl	802177c <dhcp_option_long>
 8020752:	4603      	mov	r3, r0
 8020754:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8020756:	89b8      	ldrh	r0, [r7, #12]
 8020758:	693b      	ldr	r3, [r7, #16]
 802075a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 802075e:	2303      	movs	r3, #3
 8020760:	2237      	movs	r2, #55	; 0x37
 8020762:	f000 ff7f 	bl	8021664 <dhcp_option>
 8020766:	4603      	mov	r3, r0
 8020768:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 802076a:	2300      	movs	r3, #0
 802076c:	77bb      	strb	r3, [r7, #30]
 802076e:	e00e      	b.n	802078e <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8020770:	89b8      	ldrh	r0, [r7, #12]
 8020772:	693b      	ldr	r3, [r7, #16]
 8020774:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8020778:	7fbb      	ldrb	r3, [r7, #30]
 802077a:	4a30      	ldr	r2, [pc, #192]	; (802083c <dhcp_select+0x1e4>)
 802077c:	5cd3      	ldrb	r3, [r2, r3]
 802077e:	461a      	mov	r2, r3
 8020780:	f000 ffa4 	bl	80216cc <dhcp_option_byte>
 8020784:	4603      	mov	r3, r0
 8020786:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8020788:	7fbb      	ldrb	r3, [r7, #30]
 802078a:	3301      	adds	r3, #1
 802078c:	77bb      	strb	r3, [r7, #30]
 802078e:	7fbb      	ldrb	r3, [r7, #30]
 8020790:	2b02      	cmp	r3, #2
 8020792:	d9ed      	bls.n	8020770 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8020794:	89b8      	ldrh	r0, [r7, #12]
 8020796:	693b      	ldr	r3, [r7, #16]
 8020798:	33f0      	adds	r3, #240	; 0xf0
 802079a:	697a      	ldr	r2, [r7, #20]
 802079c:	4619      	mov	r1, r3
 802079e:	f001 fca9 	bl	80220f4 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80207a2:	4b27      	ldr	r3, [pc, #156]	; (8020840 <dhcp_select+0x1e8>)
 80207a4:	6818      	ldr	r0, [r3, #0]
 80207a6:	4b27      	ldr	r3, [pc, #156]	; (8020844 <dhcp_select+0x1ec>)
 80207a8:	9301      	str	r3, [sp, #4]
 80207aa:	687b      	ldr	r3, [r7, #4]
 80207ac:	9300      	str	r3, [sp, #0]
 80207ae:	2343      	movs	r3, #67	; 0x43
 80207b0:	4a25      	ldr	r2, [pc, #148]	; (8020848 <dhcp_select+0x1f0>)
 80207b2:	6979      	ldr	r1, [r7, #20]
 80207b4:	f7ff fbda 	bl	801ff6c <udp_sendto_if_src>
 80207b8:	4603      	mov	r3, r0
 80207ba:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80207bc:	6978      	ldr	r0, [r7, #20]
 80207be:	f7f8 fc7d 	bl	80190bc <pbuf_free>
 80207c2:	e001      	b.n	80207c8 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80207c4:	23ff      	movs	r3, #255	; 0xff
 80207c6:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80207c8:	69bb      	ldr	r3, [r7, #24]
 80207ca:	799b      	ldrb	r3, [r3, #6]
 80207cc:	2bff      	cmp	r3, #255	; 0xff
 80207ce:	d005      	beq.n	80207dc <dhcp_select+0x184>
    dhcp->tries++;
 80207d0:	69bb      	ldr	r3, [r7, #24]
 80207d2:	799b      	ldrb	r3, [r3, #6]
 80207d4:	3301      	adds	r3, #1
 80207d6:	b2da      	uxtb	r2, r3
 80207d8:	69bb      	ldr	r3, [r7, #24]
 80207da:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80207dc:	69bb      	ldr	r3, [r7, #24]
 80207de:	799b      	ldrb	r3, [r3, #6]
 80207e0:	2b05      	cmp	r3, #5
 80207e2:	d80d      	bhi.n	8020800 <dhcp_select+0x1a8>
 80207e4:	69bb      	ldr	r3, [r7, #24]
 80207e6:	799b      	ldrb	r3, [r3, #6]
 80207e8:	461a      	mov	r2, r3
 80207ea:	2301      	movs	r3, #1
 80207ec:	4093      	lsls	r3, r2
 80207ee:	b29b      	uxth	r3, r3
 80207f0:	461a      	mov	r2, r3
 80207f2:	0152      	lsls	r2, r2, #5
 80207f4:	1ad2      	subs	r2, r2, r3
 80207f6:	0092      	lsls	r2, r2, #2
 80207f8:	4413      	add	r3, r2
 80207fa:	00db      	lsls	r3, r3, #3
 80207fc:	b29b      	uxth	r3, r3
 80207fe:	e001      	b.n	8020804 <dhcp_select+0x1ac>
 8020800:	f64e 2360 	movw	r3, #60000	; 0xea60
 8020804:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8020806:	89fb      	ldrh	r3, [r7, #14]
 8020808:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 802080c:	4a0f      	ldr	r2, [pc, #60]	; (802084c <dhcp_select+0x1f4>)
 802080e:	fb82 1203 	smull	r1, r2, r2, r3
 8020812:	1152      	asrs	r2, r2, #5
 8020814:	17db      	asrs	r3, r3, #31
 8020816:	1ad3      	subs	r3, r2, r3
 8020818:	b29a      	uxth	r2, r3
 802081a:	69bb      	ldr	r3, [r7, #24]
 802081c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 802081e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8020822:	4618      	mov	r0, r3
 8020824:	3720      	adds	r7, #32
 8020826:	46bd      	mov	sp, r7
 8020828:	bdb0      	pop	{r4, r5, r7, pc}
 802082a:	bf00      	nop
 802082c:	0802d788 	.word	0x0802d788
 8020830:	0802d834 	.word	0x0802d834
 8020834:	0802d7e8 	.word	0x0802d7e8
 8020838:	0802d850 	.word	0x0802d850
 802083c:	1000006c 	.word	0x1000006c
 8020840:	20013820 	.word	0x20013820
 8020844:	0802e468 	.word	0x0802e468
 8020848:	0802e46c 	.word	0x0802e46c
 802084c:	10624dd3 	.word	0x10624dd3

08020850 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8020850:	b580      	push	{r7, lr}
 8020852:	b082      	sub	sp, #8
 8020854:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 8020856:	4b27      	ldr	r3, [pc, #156]	; (80208f4 <dhcp_coarse_tmr+0xa4>)
 8020858:	681b      	ldr	r3, [r3, #0]
 802085a:	607b      	str	r3, [r7, #4]
 802085c:	e042      	b.n	80208e4 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 802085e:	687b      	ldr	r3, [r7, #4]
 8020860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020862:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8020864:	683b      	ldr	r3, [r7, #0]
 8020866:	2b00      	cmp	r3, #0
 8020868:	d039      	beq.n	80208de <dhcp_coarse_tmr+0x8e>
 802086a:	683b      	ldr	r3, [r7, #0]
 802086c:	795b      	ldrb	r3, [r3, #5]
 802086e:	2b00      	cmp	r3, #0
 8020870:	d035      	beq.n	80208de <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8020872:	683b      	ldr	r3, [r7, #0]
 8020874:	8a9b      	ldrh	r3, [r3, #20]
 8020876:	2b00      	cmp	r3, #0
 8020878:	d012      	beq.n	80208a0 <dhcp_coarse_tmr+0x50>
 802087a:	683b      	ldr	r3, [r7, #0]
 802087c:	8a5b      	ldrh	r3, [r3, #18]
 802087e:	3301      	adds	r3, #1
 8020880:	b29a      	uxth	r2, r3
 8020882:	683b      	ldr	r3, [r7, #0]
 8020884:	825a      	strh	r2, [r3, #18]
 8020886:	683b      	ldr	r3, [r7, #0]
 8020888:	8a5a      	ldrh	r2, [r3, #18]
 802088a:	683b      	ldr	r3, [r7, #0]
 802088c:	8a9b      	ldrh	r3, [r3, #20]
 802088e:	429a      	cmp	r2, r3
 8020890:	d106      	bne.n	80208a0 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 8020892:	6878      	ldr	r0, [r7, #4]
 8020894:	f000 fe32 	bl	80214fc <dhcp_release_and_stop>
        dhcp_start(netif);
 8020898:	6878      	ldr	r0, [r7, #4]
 802089a:	f000 f969 	bl	8020b70 <dhcp_start>
 802089e:	e01e      	b.n	80208de <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 80208a0:	683b      	ldr	r3, [r7, #0]
 80208a2:	8a1b      	ldrh	r3, [r3, #16]
 80208a4:	2b00      	cmp	r3, #0
 80208a6:	d00b      	beq.n	80208c0 <dhcp_coarse_tmr+0x70>
 80208a8:	683b      	ldr	r3, [r7, #0]
 80208aa:	8a1b      	ldrh	r3, [r3, #16]
 80208ac:	1e5a      	subs	r2, r3, #1
 80208ae:	b291      	uxth	r1, r2
 80208b0:	683a      	ldr	r2, [r7, #0]
 80208b2:	8211      	strh	r1, [r2, #16]
 80208b4:	2b01      	cmp	r3, #1
 80208b6:	d103      	bne.n	80208c0 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 80208b8:	6878      	ldr	r0, [r7, #4]
 80208ba:	f000 f8c6 	bl	8020a4a <dhcp_t2_timeout>
 80208be:	e00e      	b.n	80208de <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 80208c0:	683b      	ldr	r3, [r7, #0]
 80208c2:	89db      	ldrh	r3, [r3, #14]
 80208c4:	2b00      	cmp	r3, #0
 80208c6:	d00a      	beq.n	80208de <dhcp_coarse_tmr+0x8e>
 80208c8:	683b      	ldr	r3, [r7, #0]
 80208ca:	89db      	ldrh	r3, [r3, #14]
 80208cc:	1e5a      	subs	r2, r3, #1
 80208ce:	b291      	uxth	r1, r2
 80208d0:	683a      	ldr	r2, [r7, #0]
 80208d2:	81d1      	strh	r1, [r2, #14]
 80208d4:	2b01      	cmp	r3, #1
 80208d6:	d102      	bne.n	80208de <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 80208d8:	6878      	ldr	r0, [r7, #4]
 80208da:	f000 f888 	bl	80209ee <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 80208de:	687b      	ldr	r3, [r7, #4]
 80208e0:	681b      	ldr	r3, [r3, #0]
 80208e2:	607b      	str	r3, [r7, #4]
 80208e4:	687b      	ldr	r3, [r7, #4]
 80208e6:	2b00      	cmp	r3, #0
 80208e8:	d1b9      	bne.n	802085e <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 80208ea:	bf00      	nop
 80208ec:	bf00      	nop
 80208ee:	3708      	adds	r7, #8
 80208f0:	46bd      	mov	sp, r7
 80208f2:	bd80      	pop	{r7, pc}
 80208f4:	2001bcfc 	.word	0x2001bcfc

080208f8 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 80208f8:	b580      	push	{r7, lr}
 80208fa:	b082      	sub	sp, #8
 80208fc:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 80208fe:	4b16      	ldr	r3, [pc, #88]	; (8020958 <dhcp_fine_tmr+0x60>)
 8020900:	681b      	ldr	r3, [r3, #0]
 8020902:	607b      	str	r3, [r7, #4]
 8020904:	e020      	b.n	8020948 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8020906:	687b      	ldr	r3, [r7, #4]
 8020908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802090a:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 802090c:	683b      	ldr	r3, [r7, #0]
 802090e:	2b00      	cmp	r3, #0
 8020910:	d017      	beq.n	8020942 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8020912:	683b      	ldr	r3, [r7, #0]
 8020914:	891b      	ldrh	r3, [r3, #8]
 8020916:	2b01      	cmp	r3, #1
 8020918:	d906      	bls.n	8020928 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 802091a:	683b      	ldr	r3, [r7, #0]
 802091c:	891b      	ldrh	r3, [r3, #8]
 802091e:	3b01      	subs	r3, #1
 8020920:	b29a      	uxth	r2, r3
 8020922:	683b      	ldr	r3, [r7, #0]
 8020924:	811a      	strh	r2, [r3, #8]
 8020926:	e00c      	b.n	8020942 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8020928:	683b      	ldr	r3, [r7, #0]
 802092a:	891b      	ldrh	r3, [r3, #8]
 802092c:	2b01      	cmp	r3, #1
 802092e:	d108      	bne.n	8020942 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8020930:	683b      	ldr	r3, [r7, #0]
 8020932:	891b      	ldrh	r3, [r3, #8]
 8020934:	3b01      	subs	r3, #1
 8020936:	b29a      	uxth	r2, r3
 8020938:	683b      	ldr	r3, [r7, #0]
 802093a:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 802093c:	6878      	ldr	r0, [r7, #4]
 802093e:	f000 f80d 	bl	802095c <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8020942:	687b      	ldr	r3, [r7, #4]
 8020944:	681b      	ldr	r3, [r3, #0]
 8020946:	607b      	str	r3, [r7, #4]
 8020948:	687b      	ldr	r3, [r7, #4]
 802094a:	2b00      	cmp	r3, #0
 802094c:	d1db      	bne.n	8020906 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 802094e:	bf00      	nop
 8020950:	bf00      	nop
 8020952:	3708      	adds	r7, #8
 8020954:	46bd      	mov	sp, r7
 8020956:	bd80      	pop	{r7, pc}
 8020958:	2001bcfc 	.word	0x2001bcfc

0802095c <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 802095c:	b580      	push	{r7, lr}
 802095e:	b084      	sub	sp, #16
 8020960:	af00      	add	r7, sp, #0
 8020962:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8020964:	687b      	ldr	r3, [r7, #4]
 8020966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020968:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 802096a:	68fb      	ldr	r3, [r7, #12]
 802096c:	795b      	ldrb	r3, [r3, #5]
 802096e:	2b0c      	cmp	r3, #12
 8020970:	d003      	beq.n	802097a <dhcp_timeout+0x1e>
 8020972:	68fb      	ldr	r3, [r7, #12]
 8020974:	795b      	ldrb	r3, [r3, #5]
 8020976:	2b06      	cmp	r3, #6
 8020978:	d103      	bne.n	8020982 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 802097a:	6878      	ldr	r0, [r7, #4]
 802097c:	f000 fa54 	bl	8020e28 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8020980:	e031      	b.n	80209e6 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8020982:	68fb      	ldr	r3, [r7, #12]
 8020984:	795b      	ldrb	r3, [r3, #5]
 8020986:	2b01      	cmp	r3, #1
 8020988:	d10e      	bne.n	80209a8 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 802098a:	68fb      	ldr	r3, [r7, #12]
 802098c:	799b      	ldrb	r3, [r3, #6]
 802098e:	2b05      	cmp	r3, #5
 8020990:	d803      	bhi.n	802099a <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8020992:	6878      	ldr	r0, [r7, #4]
 8020994:	f7ff fe60 	bl	8020658 <dhcp_select>
}
 8020998:	e025      	b.n	80209e6 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 802099a:	6878      	ldr	r0, [r7, #4]
 802099c:	f000 fdae 	bl	80214fc <dhcp_release_and_stop>
      dhcp_start(netif);
 80209a0:	6878      	ldr	r0, [r7, #4]
 80209a2:	f000 f8e5 	bl	8020b70 <dhcp_start>
}
 80209a6:	e01e      	b.n	80209e6 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 80209a8:	68fb      	ldr	r3, [r7, #12]
 80209aa:	795b      	ldrb	r3, [r3, #5]
 80209ac:	2b08      	cmp	r3, #8
 80209ae:	d10b      	bne.n	80209c8 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 80209b0:	68fb      	ldr	r3, [r7, #12]
 80209b2:	799b      	ldrb	r3, [r3, #6]
 80209b4:	2b01      	cmp	r3, #1
 80209b6:	d803      	bhi.n	80209c0 <dhcp_timeout+0x64>
      dhcp_check(netif);
 80209b8:	6878      	ldr	r0, [r7, #4]
 80209ba:	f7ff fdf3 	bl	80205a4 <dhcp_check>
}
 80209be:	e012      	b.n	80209e6 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 80209c0:	6878      	ldr	r0, [r7, #4]
 80209c2:	f000 fad3 	bl	8020f6c <dhcp_bind>
}
 80209c6:	e00e      	b.n	80209e6 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 80209c8:	68fb      	ldr	r3, [r7, #12]
 80209ca:	795b      	ldrb	r3, [r3, #5]
 80209cc:	2b03      	cmp	r3, #3
 80209ce:	d10a      	bne.n	80209e6 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 80209d0:	68fb      	ldr	r3, [r7, #12]
 80209d2:	799b      	ldrb	r3, [r3, #6]
 80209d4:	2b01      	cmp	r3, #1
 80209d6:	d803      	bhi.n	80209e0 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 80209d8:	6878      	ldr	r0, [r7, #4]
 80209da:	f000 fcd9 	bl	8021390 <dhcp_reboot>
}
 80209de:	e002      	b.n	80209e6 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 80209e0:	6878      	ldr	r0, [r7, #4]
 80209e2:	f000 fa21 	bl	8020e28 <dhcp_discover>
}
 80209e6:	bf00      	nop
 80209e8:	3710      	adds	r7, #16
 80209ea:	46bd      	mov	sp, r7
 80209ec:	bd80      	pop	{r7, pc}

080209ee <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 80209ee:	b580      	push	{r7, lr}
 80209f0:	b084      	sub	sp, #16
 80209f2:	af00      	add	r7, sp, #0
 80209f4:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80209f6:	687b      	ldr	r3, [r7, #4]
 80209f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80209fa:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80209fc:	68fb      	ldr	r3, [r7, #12]
 80209fe:	795b      	ldrb	r3, [r3, #5]
 8020a00:	2b01      	cmp	r3, #1
 8020a02:	d007      	beq.n	8020a14 <dhcp_t1_timeout+0x26>
 8020a04:	68fb      	ldr	r3, [r7, #12]
 8020a06:	795b      	ldrb	r3, [r3, #5]
 8020a08:	2b0a      	cmp	r3, #10
 8020a0a:	d003      	beq.n	8020a14 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8020a0c:	68fb      	ldr	r3, [r7, #12]
 8020a0e:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8020a10:	2b05      	cmp	r3, #5
 8020a12:	d116      	bne.n	8020a42 <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8020a14:	6878      	ldr	r0, [r7, #4]
 8020a16:	f000 fb83 	bl	8021120 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8020a1a:	68fb      	ldr	r3, [r7, #12]
 8020a1c:	899b      	ldrh	r3, [r3, #12]
 8020a1e:	461a      	mov	r2, r3
 8020a20:	68fb      	ldr	r3, [r7, #12]
 8020a22:	8a5b      	ldrh	r3, [r3, #18]
 8020a24:	1ad3      	subs	r3, r2, r3
 8020a26:	2b01      	cmp	r3, #1
 8020a28:	dd0b      	ble.n	8020a42 <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8020a2a:	68fb      	ldr	r3, [r7, #12]
 8020a2c:	899b      	ldrh	r3, [r3, #12]
 8020a2e:	461a      	mov	r2, r3
 8020a30:	68fb      	ldr	r3, [r7, #12]
 8020a32:	8a5b      	ldrh	r3, [r3, #18]
 8020a34:	1ad3      	subs	r3, r2, r3
 8020a36:	0fda      	lsrs	r2, r3, #31
 8020a38:	4413      	add	r3, r2
 8020a3a:	105b      	asrs	r3, r3, #1
 8020a3c:	b29a      	uxth	r2, r3
 8020a3e:	68fb      	ldr	r3, [r7, #12]
 8020a40:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8020a42:	bf00      	nop
 8020a44:	3710      	adds	r7, #16
 8020a46:	46bd      	mov	sp, r7
 8020a48:	bd80      	pop	{r7, pc}

08020a4a <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8020a4a:	b580      	push	{r7, lr}
 8020a4c:	b084      	sub	sp, #16
 8020a4e:	af00      	add	r7, sp, #0
 8020a50:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8020a52:	687b      	ldr	r3, [r7, #4]
 8020a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020a56:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8020a58:	68fb      	ldr	r3, [r7, #12]
 8020a5a:	795b      	ldrb	r3, [r3, #5]
 8020a5c:	2b01      	cmp	r3, #1
 8020a5e:	d00b      	beq.n	8020a78 <dhcp_t2_timeout+0x2e>
 8020a60:	68fb      	ldr	r3, [r7, #12]
 8020a62:	795b      	ldrb	r3, [r3, #5]
 8020a64:	2b0a      	cmp	r3, #10
 8020a66:	d007      	beq.n	8020a78 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8020a68:	68fb      	ldr	r3, [r7, #12]
 8020a6a:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8020a6c:	2b05      	cmp	r3, #5
 8020a6e:	d003      	beq.n	8020a78 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8020a70:	68fb      	ldr	r3, [r7, #12]
 8020a72:	795b      	ldrb	r3, [r3, #5]
 8020a74:	2b04      	cmp	r3, #4
 8020a76:	d116      	bne.n	8020aa6 <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8020a78:	6878      	ldr	r0, [r7, #4]
 8020a7a:	f000 fbed 	bl	8021258 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8020a7e:	68fb      	ldr	r3, [r7, #12]
 8020a80:	8a9b      	ldrh	r3, [r3, #20]
 8020a82:	461a      	mov	r2, r3
 8020a84:	68fb      	ldr	r3, [r7, #12]
 8020a86:	8a5b      	ldrh	r3, [r3, #18]
 8020a88:	1ad3      	subs	r3, r2, r3
 8020a8a:	2b01      	cmp	r3, #1
 8020a8c:	dd0b      	ble.n	8020aa6 <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8020a8e:	68fb      	ldr	r3, [r7, #12]
 8020a90:	8a9b      	ldrh	r3, [r3, #20]
 8020a92:	461a      	mov	r2, r3
 8020a94:	68fb      	ldr	r3, [r7, #12]
 8020a96:	8a5b      	ldrh	r3, [r3, #18]
 8020a98:	1ad3      	subs	r3, r2, r3
 8020a9a:	0fda      	lsrs	r2, r3, #31
 8020a9c:	4413      	add	r3, r2
 8020a9e:	105b      	asrs	r3, r3, #1
 8020aa0:	b29a      	uxth	r2, r3
 8020aa2:	68fb      	ldr	r3, [r7, #12]
 8020aa4:	821a      	strh	r2, [r3, #16]
    }
  }
}
 8020aa6:	bf00      	nop
 8020aa8:	3710      	adds	r7, #16
 8020aaa:	46bd      	mov	sp, r7
 8020aac:	bd80      	pop	{r7, pc}
	...

08020ab0 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8020ab0:	b580      	push	{r7, lr}
 8020ab2:	b084      	sub	sp, #16
 8020ab4:	af00      	add	r7, sp, #0
 8020ab6:	6078      	str	r0, [r7, #4]
 8020ab8:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8020aba:	687b      	ldr	r3, [r7, #4]
 8020abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020abe:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8020ac0:	68fb      	ldr	r3, [r7, #12]
 8020ac2:	2200      	movs	r2, #0
 8020ac4:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8020ac6:	68fb      	ldr	r3, [r7, #12]
 8020ac8:	2200      	movs	r2, #0
 8020aca:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8020acc:	4b26      	ldr	r3, [pc, #152]	; (8020b68 <dhcp_handle_ack+0xb8>)
 8020ace:	78db      	ldrb	r3, [r3, #3]
 8020ad0:	2b00      	cmp	r3, #0
 8020ad2:	d003      	beq.n	8020adc <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8020ad4:	4b25      	ldr	r3, [pc, #148]	; (8020b6c <dhcp_handle_ack+0xbc>)
 8020ad6:	68da      	ldr	r2, [r3, #12]
 8020ad8:	68fb      	ldr	r3, [r7, #12]
 8020ada:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8020adc:	4b22      	ldr	r3, [pc, #136]	; (8020b68 <dhcp_handle_ack+0xb8>)
 8020ade:	791b      	ldrb	r3, [r3, #4]
 8020ae0:	2b00      	cmp	r3, #0
 8020ae2:	d004      	beq.n	8020aee <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8020ae4:	4b21      	ldr	r3, [pc, #132]	; (8020b6c <dhcp_handle_ack+0xbc>)
 8020ae6:	691a      	ldr	r2, [r3, #16]
 8020ae8:	68fb      	ldr	r3, [r7, #12]
 8020aea:	62da      	str	r2, [r3, #44]	; 0x2c
 8020aec:	e004      	b.n	8020af8 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8020aee:	68fb      	ldr	r3, [r7, #12]
 8020af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020af2:	085a      	lsrs	r2, r3, #1
 8020af4:	68fb      	ldr	r3, [r7, #12]
 8020af6:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8020af8:	4b1b      	ldr	r3, [pc, #108]	; (8020b68 <dhcp_handle_ack+0xb8>)
 8020afa:	795b      	ldrb	r3, [r3, #5]
 8020afc:	2b00      	cmp	r3, #0
 8020afe:	d004      	beq.n	8020b0a <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8020b00:	4b1a      	ldr	r3, [pc, #104]	; (8020b6c <dhcp_handle_ack+0xbc>)
 8020b02:	695a      	ldr	r2, [r3, #20]
 8020b04:	68fb      	ldr	r3, [r7, #12]
 8020b06:	631a      	str	r2, [r3, #48]	; 0x30
 8020b08:	e007      	b.n	8020b1a <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8020b0a:	68fb      	ldr	r3, [r7, #12]
 8020b0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8020b0e:	4613      	mov	r3, r2
 8020b10:	00db      	lsls	r3, r3, #3
 8020b12:	1a9b      	subs	r3, r3, r2
 8020b14:	08da      	lsrs	r2, r3, #3
 8020b16:	68fb      	ldr	r3, [r7, #12]
 8020b18:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8020b1a:	683b      	ldr	r3, [r7, #0]
 8020b1c:	691a      	ldr	r2, [r3, #16]
 8020b1e:	68fb      	ldr	r3, [r7, #12]
 8020b20:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8020b22:	4b11      	ldr	r3, [pc, #68]	; (8020b68 <dhcp_handle_ack+0xb8>)
 8020b24:	799b      	ldrb	r3, [r3, #6]
 8020b26:	2b00      	cmp	r3, #0
 8020b28:	d00b      	beq.n	8020b42 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8020b2a:	4b10      	ldr	r3, [pc, #64]	; (8020b6c <dhcp_handle_ack+0xbc>)
 8020b2c:	699b      	ldr	r3, [r3, #24]
 8020b2e:	4618      	mov	r0, r3
 8020b30:	f7f6 fef9 	bl	8017926 <lwip_htonl>
 8020b34:	4602      	mov	r2, r0
 8020b36:	68fb      	ldr	r3, [r7, #12]
 8020b38:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8020b3a:	68fb      	ldr	r3, [r7, #12]
 8020b3c:	2201      	movs	r2, #1
 8020b3e:	71da      	strb	r2, [r3, #7]
 8020b40:	e002      	b.n	8020b48 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8020b42:	68fb      	ldr	r3, [r7, #12]
 8020b44:	2200      	movs	r2, #0
 8020b46:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8020b48:	4b07      	ldr	r3, [pc, #28]	; (8020b68 <dhcp_handle_ack+0xb8>)
 8020b4a:	79db      	ldrb	r3, [r3, #7]
 8020b4c:	2b00      	cmp	r3, #0
 8020b4e:	d007      	beq.n	8020b60 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8020b50:	4b06      	ldr	r3, [pc, #24]	; (8020b6c <dhcp_handle_ack+0xbc>)
 8020b52:	69db      	ldr	r3, [r3, #28]
 8020b54:	4618      	mov	r0, r3
 8020b56:	f7f6 fee6 	bl	8017926 <lwip_htonl>
 8020b5a:	4602      	mov	r2, r0
 8020b5c:	68fb      	ldr	r3, [r7, #12]
 8020b5e:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8020b60:	bf00      	nop
 8020b62:	3710      	adds	r7, #16
 8020b64:	46bd      	mov	sp, r7
 8020b66:	bd80      	pop	{r7, pc}
 8020b68:	2001bd28 	.word	0x2001bd28
 8020b6c:	2001bd30 	.word	0x2001bd30

08020b70 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8020b70:	b580      	push	{r7, lr}
 8020b72:	b084      	sub	sp, #16
 8020b74:	af00      	add	r7, sp, #0
 8020b76:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8020b78:	687b      	ldr	r3, [r7, #4]
 8020b7a:	2b00      	cmp	r3, #0
 8020b7c:	d109      	bne.n	8020b92 <dhcp_start+0x22>
 8020b7e:	4b37      	ldr	r3, [pc, #220]	; (8020c5c <dhcp_start+0xec>)
 8020b80:	f240 22e7 	movw	r2, #743	; 0x2e7
 8020b84:	4936      	ldr	r1, [pc, #216]	; (8020c60 <dhcp_start+0xf0>)
 8020b86:	4837      	ldr	r0, [pc, #220]	; (8020c64 <dhcp_start+0xf4>)
 8020b88:	f004 fe10 	bl	80257ac <iprintf>
 8020b8c:	f06f 030f 	mvn.w	r3, #15
 8020b90:	e060      	b.n	8020c54 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8020b92:	687b      	ldr	r3, [r7, #4]
 8020b94:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8020b98:	f003 0301 	and.w	r3, r3, #1
 8020b9c:	2b00      	cmp	r3, #0
 8020b9e:	d109      	bne.n	8020bb4 <dhcp_start+0x44>
 8020ba0:	4b2e      	ldr	r3, [pc, #184]	; (8020c5c <dhcp_start+0xec>)
 8020ba2:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8020ba6:	4930      	ldr	r1, [pc, #192]	; (8020c68 <dhcp_start+0xf8>)
 8020ba8:	482e      	ldr	r0, [pc, #184]	; (8020c64 <dhcp_start+0xf4>)
 8020baa:	f004 fdff 	bl	80257ac <iprintf>
 8020bae:	f06f 030f 	mvn.w	r3, #15
 8020bb2:	e04f      	b.n	8020c54 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8020bb4:	687b      	ldr	r3, [r7, #4]
 8020bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020bb8:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8020bba:	687b      	ldr	r3, [r7, #4]
 8020bbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8020bbe:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8020bc2:	d202      	bcs.n	8020bca <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8020bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8020bc8:	e044      	b.n	8020c54 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8020bca:	68fb      	ldr	r3, [r7, #12]
 8020bcc:	2b00      	cmp	r3, #0
 8020bce:	d10d      	bne.n	8020bec <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8020bd0:	2034      	movs	r0, #52	; 0x34
 8020bd2:	f7f7 f9c7 	bl	8017f64 <mem_malloc>
 8020bd6:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8020bd8:	68fb      	ldr	r3, [r7, #12]
 8020bda:	2b00      	cmp	r3, #0
 8020bdc:	d102      	bne.n	8020be4 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8020bde:	f04f 33ff 	mov.w	r3, #4294967295
 8020be2:	e037      	b.n	8020c54 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8020be4:	687b      	ldr	r3, [r7, #4]
 8020be6:	68fa      	ldr	r2, [r7, #12]
 8020be8:	625a      	str	r2, [r3, #36]	; 0x24
 8020bea:	e005      	b.n	8020bf8 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8020bec:	68fb      	ldr	r3, [r7, #12]
 8020bee:	791b      	ldrb	r3, [r3, #4]
 8020bf0:	2b00      	cmp	r3, #0
 8020bf2:	d001      	beq.n	8020bf8 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8020bf4:	f7ff fc92 	bl	802051c <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8020bf8:	2234      	movs	r2, #52	; 0x34
 8020bfa:	2100      	movs	r1, #0
 8020bfc:	68f8      	ldr	r0, [r7, #12]
 8020bfe:	f003 ff29 	bl	8024a54 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8020c02:	f7ff fc39 	bl	8020478 <dhcp_inc_pcb_refcount>
 8020c06:	4603      	mov	r3, r0
 8020c08:	2b00      	cmp	r3, #0
 8020c0a:	d002      	beq.n	8020c12 <dhcp_start+0xa2>
    return ERR_MEM;
 8020c0c:	f04f 33ff 	mov.w	r3, #4294967295
 8020c10:	e020      	b.n	8020c54 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 8020c12:	68fb      	ldr	r3, [r7, #12]
 8020c14:	2201      	movs	r2, #1
 8020c16:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8020c18:	687b      	ldr	r3, [r7, #4]
 8020c1a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8020c1e:	f003 0304 	and.w	r3, r3, #4
 8020c22:	2b00      	cmp	r3, #0
 8020c24:	d105      	bne.n	8020c32 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8020c26:	2102      	movs	r1, #2
 8020c28:	68f8      	ldr	r0, [r7, #12]
 8020c2a:	f000 fd01 	bl	8021630 <dhcp_set_state>
    return ERR_OK;
 8020c2e:	2300      	movs	r3, #0
 8020c30:	e010      	b.n	8020c54 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8020c32:	6878      	ldr	r0, [r7, #4]
 8020c34:	f000 f8f8 	bl	8020e28 <dhcp_discover>
 8020c38:	4603      	mov	r3, r0
 8020c3a:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8020c3c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8020c40:	2b00      	cmp	r3, #0
 8020c42:	d005      	beq.n	8020c50 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8020c44:	6878      	ldr	r0, [r7, #4]
 8020c46:	f000 fc59 	bl	80214fc <dhcp_release_and_stop>
    return ERR_MEM;
 8020c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8020c4e:	e001      	b.n	8020c54 <dhcp_start+0xe4>
  }
  return result;
 8020c50:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8020c54:	4618      	mov	r0, r3
 8020c56:	3710      	adds	r7, #16
 8020c58:	46bd      	mov	sp, r7
 8020c5a:	bd80      	pop	{r7, pc}
 8020c5c:	0802d788 	.word	0x0802d788
 8020c60:	0802d86c 	.word	0x0802d86c
 8020c64:	0802d7e8 	.word	0x0802d7e8
 8020c68:	0802d8b0 	.word	0x0802d8b0

08020c6c <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 8020c6c:	b580      	push	{r7, lr}
 8020c6e:	b084      	sub	sp, #16
 8020c70:	af00      	add	r7, sp, #0
 8020c72:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8020c74:	687b      	ldr	r3, [r7, #4]
 8020c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020c78:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 8020c7a:	68fb      	ldr	r3, [r7, #12]
 8020c7c:	2b00      	cmp	r3, #0
 8020c7e:	d025      	beq.n	8020ccc <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 8020c80:	68fb      	ldr	r3, [r7, #12]
 8020c82:	795b      	ldrb	r3, [r3, #5]
 8020c84:	2b0a      	cmp	r3, #10
 8020c86:	d008      	beq.n	8020c9a <dhcp_network_changed+0x2e>
 8020c88:	2b0a      	cmp	r3, #10
 8020c8a:	dc0d      	bgt.n	8020ca8 <dhcp_network_changed+0x3c>
 8020c8c:	2b00      	cmp	r3, #0
 8020c8e:	d01f      	beq.n	8020cd0 <dhcp_network_changed+0x64>
 8020c90:	2b00      	cmp	r3, #0
 8020c92:	db09      	blt.n	8020ca8 <dhcp_network_changed+0x3c>
 8020c94:	3b03      	subs	r3, #3
 8020c96:	2b02      	cmp	r3, #2
 8020c98:	d806      	bhi.n	8020ca8 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 8020c9a:	68fb      	ldr	r3, [r7, #12]
 8020c9c:	2200      	movs	r2, #0
 8020c9e:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 8020ca0:	6878      	ldr	r0, [r7, #4]
 8020ca2:	f000 fb75 	bl	8021390 <dhcp_reboot>
      break;
 8020ca6:	e014      	b.n	8020cd2 <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 8020ca8:	68fb      	ldr	r3, [r7, #12]
 8020caa:	795b      	ldrb	r3, [r3, #5]
 8020cac:	2b0c      	cmp	r3, #12
 8020cae:	d906      	bls.n	8020cbe <dhcp_network_changed+0x52>
 8020cb0:	4b09      	ldr	r3, [pc, #36]	; (8020cd8 <dhcp_network_changed+0x6c>)
 8020cb2:	f240 326d 	movw	r2, #877	; 0x36d
 8020cb6:	4909      	ldr	r1, [pc, #36]	; (8020cdc <dhcp_network_changed+0x70>)
 8020cb8:	4809      	ldr	r0, [pc, #36]	; (8020ce0 <dhcp_network_changed+0x74>)
 8020cba:	f004 fd77 	bl	80257ac <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 8020cbe:	68fb      	ldr	r3, [r7, #12]
 8020cc0:	2200      	movs	r2, #0
 8020cc2:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 8020cc4:	6878      	ldr	r0, [r7, #4]
 8020cc6:	f000 f8af 	bl	8020e28 <dhcp_discover>
      break;
 8020cca:	e002      	b.n	8020cd2 <dhcp_network_changed+0x66>
    return;
 8020ccc:	bf00      	nop
 8020cce:	e000      	b.n	8020cd2 <dhcp_network_changed+0x66>
      break;
 8020cd0:	bf00      	nop
  }
}
 8020cd2:	3710      	adds	r7, #16
 8020cd4:	46bd      	mov	sp, r7
 8020cd6:	bd80      	pop	{r7, pc}
 8020cd8:	0802d788 	.word	0x0802d788
 8020cdc:	0802d8d4 	.word	0x0802d8d4
 8020ce0:	0802d7e8 	.word	0x0802d7e8

08020ce4 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8020ce4:	b580      	push	{r7, lr}
 8020ce6:	b084      	sub	sp, #16
 8020ce8:	af00      	add	r7, sp, #0
 8020cea:	6078      	str	r0, [r7, #4]
 8020cec:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8020cee:	687b      	ldr	r3, [r7, #4]
 8020cf0:	2b00      	cmp	r3, #0
 8020cf2:	d107      	bne.n	8020d04 <dhcp_arp_reply+0x20>
 8020cf4:	4b0e      	ldr	r3, [pc, #56]	; (8020d30 <dhcp_arp_reply+0x4c>)
 8020cf6:	f240 328b 	movw	r2, #907	; 0x38b
 8020cfa:	490e      	ldr	r1, [pc, #56]	; (8020d34 <dhcp_arp_reply+0x50>)
 8020cfc:	480e      	ldr	r0, [pc, #56]	; (8020d38 <dhcp_arp_reply+0x54>)
 8020cfe:	f004 fd55 	bl	80257ac <iprintf>
 8020d02:	e012      	b.n	8020d2a <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8020d04:	687b      	ldr	r3, [r7, #4]
 8020d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020d08:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8020d0a:	68fb      	ldr	r3, [r7, #12]
 8020d0c:	2b00      	cmp	r3, #0
 8020d0e:	d00c      	beq.n	8020d2a <dhcp_arp_reply+0x46>
 8020d10:	68fb      	ldr	r3, [r7, #12]
 8020d12:	795b      	ldrb	r3, [r3, #5]
 8020d14:	2b08      	cmp	r3, #8
 8020d16:	d108      	bne.n	8020d2a <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8020d18:	683b      	ldr	r3, [r7, #0]
 8020d1a:	681a      	ldr	r2, [r3, #0]
 8020d1c:	68fb      	ldr	r3, [r7, #12]
 8020d1e:	69db      	ldr	r3, [r3, #28]
 8020d20:	429a      	cmp	r2, r3
 8020d22:	d102      	bne.n	8020d2a <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8020d24:	6878      	ldr	r0, [r7, #4]
 8020d26:	f000 f809 	bl	8020d3c <dhcp_decline>
    }
  }
}
 8020d2a:	3710      	adds	r7, #16
 8020d2c:	46bd      	mov	sp, r7
 8020d2e:	bd80      	pop	{r7, pc}
 8020d30:	0802d788 	.word	0x0802d788
 8020d34:	0802d86c 	.word	0x0802d86c
 8020d38:	0802d7e8 	.word	0x0802d7e8

08020d3c <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8020d3c:	b5b0      	push	{r4, r5, r7, lr}
 8020d3e:	b08a      	sub	sp, #40	; 0x28
 8020d40:	af02      	add	r7, sp, #8
 8020d42:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8020d44:	687b      	ldr	r3, [r7, #4]
 8020d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020d48:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8020d4a:	210c      	movs	r1, #12
 8020d4c:	69b8      	ldr	r0, [r7, #24]
 8020d4e:	f000 fc6f 	bl	8021630 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8020d52:	f107 030c 	add.w	r3, r7, #12
 8020d56:	2204      	movs	r2, #4
 8020d58:	69b9      	ldr	r1, [r7, #24]
 8020d5a:	6878      	ldr	r0, [r7, #4]
 8020d5c:	f001 f8f4 	bl	8021f48 <dhcp_create_msg>
 8020d60:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8020d62:	697b      	ldr	r3, [r7, #20]
 8020d64:	2b00      	cmp	r3, #0
 8020d66:	d035      	beq.n	8020dd4 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8020d68:	697b      	ldr	r3, [r7, #20]
 8020d6a:	685b      	ldr	r3, [r3, #4]
 8020d6c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8020d6e:	89b8      	ldrh	r0, [r7, #12]
 8020d70:	693b      	ldr	r3, [r7, #16]
 8020d72:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8020d76:	2304      	movs	r3, #4
 8020d78:	2232      	movs	r2, #50	; 0x32
 8020d7a:	f000 fc73 	bl	8021664 <dhcp_option>
 8020d7e:	4603      	mov	r3, r0
 8020d80:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8020d82:	89bc      	ldrh	r4, [r7, #12]
 8020d84:	693b      	ldr	r3, [r7, #16]
 8020d86:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8020d8a:	69bb      	ldr	r3, [r7, #24]
 8020d8c:	69db      	ldr	r3, [r3, #28]
 8020d8e:	4618      	mov	r0, r3
 8020d90:	f7f6 fdc9 	bl	8017926 <lwip_htonl>
 8020d94:	4603      	mov	r3, r0
 8020d96:	461a      	mov	r2, r3
 8020d98:	4629      	mov	r1, r5
 8020d9a:	4620      	mov	r0, r4
 8020d9c:	f000 fcee 	bl	802177c <dhcp_option_long>
 8020da0:	4603      	mov	r3, r0
 8020da2:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8020da4:	89b8      	ldrh	r0, [r7, #12]
 8020da6:	693b      	ldr	r3, [r7, #16]
 8020da8:	33f0      	adds	r3, #240	; 0xf0
 8020daa:	697a      	ldr	r2, [r7, #20]
 8020dac:	4619      	mov	r1, r3
 8020dae:	f001 f9a1 	bl	80220f4 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8020db2:	4b19      	ldr	r3, [pc, #100]	; (8020e18 <dhcp_decline+0xdc>)
 8020db4:	6818      	ldr	r0, [r3, #0]
 8020db6:	4b19      	ldr	r3, [pc, #100]	; (8020e1c <dhcp_decline+0xe0>)
 8020db8:	9301      	str	r3, [sp, #4]
 8020dba:	687b      	ldr	r3, [r7, #4]
 8020dbc:	9300      	str	r3, [sp, #0]
 8020dbe:	2343      	movs	r3, #67	; 0x43
 8020dc0:	4a17      	ldr	r2, [pc, #92]	; (8020e20 <dhcp_decline+0xe4>)
 8020dc2:	6979      	ldr	r1, [r7, #20]
 8020dc4:	f7ff f8d2 	bl	801ff6c <udp_sendto_if_src>
 8020dc8:	4603      	mov	r3, r0
 8020dca:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8020dcc:	6978      	ldr	r0, [r7, #20]
 8020dce:	f7f8 f975 	bl	80190bc <pbuf_free>
 8020dd2:	e001      	b.n	8020dd8 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8020dd4:	23ff      	movs	r3, #255	; 0xff
 8020dd6:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8020dd8:	69bb      	ldr	r3, [r7, #24]
 8020dda:	799b      	ldrb	r3, [r3, #6]
 8020ddc:	2bff      	cmp	r3, #255	; 0xff
 8020dde:	d005      	beq.n	8020dec <dhcp_decline+0xb0>
    dhcp->tries++;
 8020de0:	69bb      	ldr	r3, [r7, #24]
 8020de2:	799b      	ldrb	r3, [r3, #6]
 8020de4:	3301      	adds	r3, #1
 8020de6:	b2da      	uxtb	r2, r3
 8020de8:	69bb      	ldr	r3, [r7, #24]
 8020dea:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8020dec:	f242 7310 	movw	r3, #10000	; 0x2710
 8020df0:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8020df2:	89fb      	ldrh	r3, [r7, #14]
 8020df4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8020df8:	4a0a      	ldr	r2, [pc, #40]	; (8020e24 <dhcp_decline+0xe8>)
 8020dfa:	fb82 1203 	smull	r1, r2, r2, r3
 8020dfe:	1152      	asrs	r2, r2, #5
 8020e00:	17db      	asrs	r3, r3, #31
 8020e02:	1ad3      	subs	r3, r2, r3
 8020e04:	b29a      	uxth	r2, r3
 8020e06:	69bb      	ldr	r3, [r7, #24]
 8020e08:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8020e0a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8020e0e:	4618      	mov	r0, r3
 8020e10:	3720      	adds	r7, #32
 8020e12:	46bd      	mov	sp, r7
 8020e14:	bdb0      	pop	{r4, r5, r7, pc}
 8020e16:	bf00      	nop
 8020e18:	20013820 	.word	0x20013820
 8020e1c:	0802e468 	.word	0x0802e468
 8020e20:	0802e46c 	.word	0x0802e46c
 8020e24:	10624dd3 	.word	0x10624dd3

08020e28 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8020e28:	b580      	push	{r7, lr}
 8020e2a:	b08a      	sub	sp, #40	; 0x28
 8020e2c:	af02      	add	r7, sp, #8
 8020e2e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8020e30:	687b      	ldr	r3, [r7, #4]
 8020e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020e34:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 8020e36:	2300      	movs	r3, #0
 8020e38:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8020e3a:	69bb      	ldr	r3, [r7, #24]
 8020e3c:	2200      	movs	r2, #0
 8020e3e:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8020e40:	2106      	movs	r1, #6
 8020e42:	69b8      	ldr	r0, [r7, #24]
 8020e44:	f000 fbf4 	bl	8021630 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8020e48:	f107 0308 	add.w	r3, r7, #8
 8020e4c:	2201      	movs	r2, #1
 8020e4e:	69b9      	ldr	r1, [r7, #24]
 8020e50:	6878      	ldr	r0, [r7, #4]
 8020e52:	f001 f879 	bl	8021f48 <dhcp_create_msg>
 8020e56:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8020e58:	693b      	ldr	r3, [r7, #16]
 8020e5a:	2b00      	cmp	r3, #0
 8020e5c:	d04b      	beq.n	8020ef6 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8020e5e:	693b      	ldr	r3, [r7, #16]
 8020e60:	685b      	ldr	r3, [r3, #4]
 8020e62:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8020e64:	8938      	ldrh	r0, [r7, #8]
 8020e66:	68fb      	ldr	r3, [r7, #12]
 8020e68:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8020e6c:	2302      	movs	r3, #2
 8020e6e:	2239      	movs	r2, #57	; 0x39
 8020e70:	f000 fbf8 	bl	8021664 <dhcp_option>
 8020e74:	4603      	mov	r3, r0
 8020e76:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8020e78:	8938      	ldrh	r0, [r7, #8]
 8020e7a:	68fb      	ldr	r3, [r7, #12]
 8020e7c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8020e80:	687b      	ldr	r3, [r7, #4]
 8020e82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8020e84:	461a      	mov	r2, r3
 8020e86:	f000 fc47 	bl	8021718 <dhcp_option_short>
 8020e8a:	4603      	mov	r3, r0
 8020e8c:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8020e8e:	8938      	ldrh	r0, [r7, #8]
 8020e90:	68fb      	ldr	r3, [r7, #12]
 8020e92:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8020e96:	2303      	movs	r3, #3
 8020e98:	2237      	movs	r2, #55	; 0x37
 8020e9a:	f000 fbe3 	bl	8021664 <dhcp_option>
 8020e9e:	4603      	mov	r3, r0
 8020ea0:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8020ea2:	2300      	movs	r3, #0
 8020ea4:	77fb      	strb	r3, [r7, #31]
 8020ea6:	e00e      	b.n	8020ec6 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8020ea8:	8938      	ldrh	r0, [r7, #8]
 8020eaa:	68fb      	ldr	r3, [r7, #12]
 8020eac:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8020eb0:	7ffb      	ldrb	r3, [r7, #31]
 8020eb2:	4a29      	ldr	r2, [pc, #164]	; (8020f58 <dhcp_discover+0x130>)
 8020eb4:	5cd3      	ldrb	r3, [r2, r3]
 8020eb6:	461a      	mov	r2, r3
 8020eb8:	f000 fc08 	bl	80216cc <dhcp_option_byte>
 8020ebc:	4603      	mov	r3, r0
 8020ebe:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8020ec0:	7ffb      	ldrb	r3, [r7, #31]
 8020ec2:	3301      	adds	r3, #1
 8020ec4:	77fb      	strb	r3, [r7, #31]
 8020ec6:	7ffb      	ldrb	r3, [r7, #31]
 8020ec8:	2b02      	cmp	r3, #2
 8020eca:	d9ed      	bls.n	8020ea8 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8020ecc:	8938      	ldrh	r0, [r7, #8]
 8020ece:	68fb      	ldr	r3, [r7, #12]
 8020ed0:	33f0      	adds	r3, #240	; 0xf0
 8020ed2:	693a      	ldr	r2, [r7, #16]
 8020ed4:	4619      	mov	r1, r3
 8020ed6:	f001 f90d 	bl	80220f4 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8020eda:	4b20      	ldr	r3, [pc, #128]	; (8020f5c <dhcp_discover+0x134>)
 8020edc:	6818      	ldr	r0, [r3, #0]
 8020ede:	4b20      	ldr	r3, [pc, #128]	; (8020f60 <dhcp_discover+0x138>)
 8020ee0:	9301      	str	r3, [sp, #4]
 8020ee2:	687b      	ldr	r3, [r7, #4]
 8020ee4:	9300      	str	r3, [sp, #0]
 8020ee6:	2343      	movs	r3, #67	; 0x43
 8020ee8:	4a1e      	ldr	r2, [pc, #120]	; (8020f64 <dhcp_discover+0x13c>)
 8020eea:	6939      	ldr	r1, [r7, #16]
 8020eec:	f7ff f83e 	bl	801ff6c <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8020ef0:	6938      	ldr	r0, [r7, #16]
 8020ef2:	f7f8 f8e3 	bl	80190bc <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8020ef6:	69bb      	ldr	r3, [r7, #24]
 8020ef8:	799b      	ldrb	r3, [r3, #6]
 8020efa:	2bff      	cmp	r3, #255	; 0xff
 8020efc:	d005      	beq.n	8020f0a <dhcp_discover+0xe2>
    dhcp->tries++;
 8020efe:	69bb      	ldr	r3, [r7, #24]
 8020f00:	799b      	ldrb	r3, [r3, #6]
 8020f02:	3301      	adds	r3, #1
 8020f04:	b2da      	uxtb	r2, r3
 8020f06:	69bb      	ldr	r3, [r7, #24]
 8020f08:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8020f0a:	69bb      	ldr	r3, [r7, #24]
 8020f0c:	799b      	ldrb	r3, [r3, #6]
 8020f0e:	2b05      	cmp	r3, #5
 8020f10:	d80d      	bhi.n	8020f2e <dhcp_discover+0x106>
 8020f12:	69bb      	ldr	r3, [r7, #24]
 8020f14:	799b      	ldrb	r3, [r3, #6]
 8020f16:	461a      	mov	r2, r3
 8020f18:	2301      	movs	r3, #1
 8020f1a:	4093      	lsls	r3, r2
 8020f1c:	b29b      	uxth	r3, r3
 8020f1e:	461a      	mov	r2, r3
 8020f20:	0152      	lsls	r2, r2, #5
 8020f22:	1ad2      	subs	r2, r2, r3
 8020f24:	0092      	lsls	r2, r2, #2
 8020f26:	4413      	add	r3, r2
 8020f28:	00db      	lsls	r3, r3, #3
 8020f2a:	b29b      	uxth	r3, r3
 8020f2c:	e001      	b.n	8020f32 <dhcp_discover+0x10a>
 8020f2e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8020f32:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8020f34:	897b      	ldrh	r3, [r7, #10]
 8020f36:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8020f3a:	4a0b      	ldr	r2, [pc, #44]	; (8020f68 <dhcp_discover+0x140>)
 8020f3c:	fb82 1203 	smull	r1, r2, r2, r3
 8020f40:	1152      	asrs	r2, r2, #5
 8020f42:	17db      	asrs	r3, r3, #31
 8020f44:	1ad3      	subs	r3, r2, r3
 8020f46:	b29a      	uxth	r2, r3
 8020f48:	69bb      	ldr	r3, [r7, #24]
 8020f4a:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8020f4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8020f50:	4618      	mov	r0, r3
 8020f52:	3720      	adds	r7, #32
 8020f54:	46bd      	mov	sp, r7
 8020f56:	bd80      	pop	{r7, pc}
 8020f58:	1000006c 	.word	0x1000006c
 8020f5c:	20013820 	.word	0x20013820
 8020f60:	0802e468 	.word	0x0802e468
 8020f64:	0802e46c 	.word	0x0802e46c
 8020f68:	10624dd3 	.word	0x10624dd3

08020f6c <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8020f6c:	b580      	push	{r7, lr}
 8020f6e:	b088      	sub	sp, #32
 8020f70:	af00      	add	r7, sp, #0
 8020f72:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8020f74:	687b      	ldr	r3, [r7, #4]
 8020f76:	2b00      	cmp	r3, #0
 8020f78:	d107      	bne.n	8020f8a <dhcp_bind+0x1e>
 8020f7a:	4b64      	ldr	r3, [pc, #400]	; (802110c <dhcp_bind+0x1a0>)
 8020f7c:	f240 4215 	movw	r2, #1045	; 0x415
 8020f80:	4963      	ldr	r1, [pc, #396]	; (8021110 <dhcp_bind+0x1a4>)
 8020f82:	4864      	ldr	r0, [pc, #400]	; (8021114 <dhcp_bind+0x1a8>)
 8020f84:	f004 fc12 	bl	80257ac <iprintf>
 8020f88:	e0bc      	b.n	8021104 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 8020f8a:	687b      	ldr	r3, [r7, #4]
 8020f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020f8e:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8020f90:	69bb      	ldr	r3, [r7, #24]
 8020f92:	2b00      	cmp	r3, #0
 8020f94:	d107      	bne.n	8020fa6 <dhcp_bind+0x3a>
 8020f96:	4b5d      	ldr	r3, [pc, #372]	; (802110c <dhcp_bind+0x1a0>)
 8020f98:	f240 4217 	movw	r2, #1047	; 0x417
 8020f9c:	495e      	ldr	r1, [pc, #376]	; (8021118 <dhcp_bind+0x1ac>)
 8020f9e:	485d      	ldr	r0, [pc, #372]	; (8021114 <dhcp_bind+0x1a8>)
 8020fa0:	f004 fc04 	bl	80257ac <iprintf>
 8020fa4:	e0ae      	b.n	8021104 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 8020fa6:	69bb      	ldr	r3, [r7, #24]
 8020fa8:	2200      	movs	r2, #0
 8020faa:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8020fac:	69bb      	ldr	r3, [r7, #24]
 8020fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020fb4:	d019      	beq.n	8020fea <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8020fb6:	69bb      	ldr	r3, [r7, #24]
 8020fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020fba:	331e      	adds	r3, #30
 8020fbc:	4a57      	ldr	r2, [pc, #348]	; (802111c <dhcp_bind+0x1b0>)
 8020fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8020fc2:	095b      	lsrs	r3, r3, #5
 8020fc4:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8020fc6:	69fb      	ldr	r3, [r7, #28]
 8020fc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8020fcc:	d302      	bcc.n	8020fd4 <dhcp_bind+0x68>
      timeout = 0xffff;
 8020fce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8020fd2:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8020fd4:	69fb      	ldr	r3, [r7, #28]
 8020fd6:	b29a      	uxth	r2, r3
 8020fd8:	69bb      	ldr	r3, [r7, #24]
 8020fda:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8020fdc:	69bb      	ldr	r3, [r7, #24]
 8020fde:	8a9b      	ldrh	r3, [r3, #20]
 8020fe0:	2b00      	cmp	r3, #0
 8020fe2:	d102      	bne.n	8020fea <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 8020fe4:	69bb      	ldr	r3, [r7, #24]
 8020fe6:	2201      	movs	r2, #1
 8020fe8:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8020fea:	69bb      	ldr	r3, [r7, #24]
 8020fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020ff2:	d01d      	beq.n	8021030 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8020ff4:	69bb      	ldr	r3, [r7, #24]
 8020ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020ff8:	331e      	adds	r3, #30
 8020ffa:	4a48      	ldr	r2, [pc, #288]	; (802111c <dhcp_bind+0x1b0>)
 8020ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8021000:	095b      	lsrs	r3, r3, #5
 8021002:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8021004:	69fb      	ldr	r3, [r7, #28]
 8021006:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802100a:	d302      	bcc.n	8021012 <dhcp_bind+0xa6>
      timeout = 0xffff;
 802100c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8021010:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 8021012:	69fb      	ldr	r3, [r7, #28]
 8021014:	b29a      	uxth	r2, r3
 8021016:	69bb      	ldr	r3, [r7, #24]
 8021018:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 802101a:	69bb      	ldr	r3, [r7, #24]
 802101c:	895b      	ldrh	r3, [r3, #10]
 802101e:	2b00      	cmp	r3, #0
 8021020:	d102      	bne.n	8021028 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 8021022:	69bb      	ldr	r3, [r7, #24]
 8021024:	2201      	movs	r2, #1
 8021026:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8021028:	69bb      	ldr	r3, [r7, #24]
 802102a:	895a      	ldrh	r2, [r3, #10]
 802102c:	69bb      	ldr	r3, [r7, #24]
 802102e:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8021030:	69bb      	ldr	r3, [r7, #24]
 8021032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021038:	d01d      	beq.n	8021076 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 802103a:	69bb      	ldr	r3, [r7, #24]
 802103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802103e:	331e      	adds	r3, #30
 8021040:	4a36      	ldr	r2, [pc, #216]	; (802111c <dhcp_bind+0x1b0>)
 8021042:	fba2 2303 	umull	r2, r3, r2, r3
 8021046:	095b      	lsrs	r3, r3, #5
 8021048:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 802104a:	69fb      	ldr	r3, [r7, #28]
 802104c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8021050:	d302      	bcc.n	8021058 <dhcp_bind+0xec>
      timeout = 0xffff;
 8021052:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8021056:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8021058:	69fb      	ldr	r3, [r7, #28]
 802105a:	b29a      	uxth	r2, r3
 802105c:	69bb      	ldr	r3, [r7, #24]
 802105e:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8021060:	69bb      	ldr	r3, [r7, #24]
 8021062:	899b      	ldrh	r3, [r3, #12]
 8021064:	2b00      	cmp	r3, #0
 8021066:	d102      	bne.n	802106e <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8021068:	69bb      	ldr	r3, [r7, #24]
 802106a:	2201      	movs	r2, #1
 802106c:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 802106e:	69bb      	ldr	r3, [r7, #24]
 8021070:	899a      	ldrh	r2, [r3, #12]
 8021072:	69bb      	ldr	r3, [r7, #24]
 8021074:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8021076:	69bb      	ldr	r3, [r7, #24]
 8021078:	895a      	ldrh	r2, [r3, #10]
 802107a:	69bb      	ldr	r3, [r7, #24]
 802107c:	899b      	ldrh	r3, [r3, #12]
 802107e:	429a      	cmp	r2, r3
 8021080:	d306      	bcc.n	8021090 <dhcp_bind+0x124>
 8021082:	69bb      	ldr	r3, [r7, #24]
 8021084:	899b      	ldrh	r3, [r3, #12]
 8021086:	2b00      	cmp	r3, #0
 8021088:	d002      	beq.n	8021090 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 802108a:	69bb      	ldr	r3, [r7, #24]
 802108c:	2200      	movs	r2, #0
 802108e:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8021090:	69bb      	ldr	r3, [r7, #24]
 8021092:	79db      	ldrb	r3, [r3, #7]
 8021094:	2b00      	cmp	r3, #0
 8021096:	d003      	beq.n	80210a0 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8021098:	69bb      	ldr	r3, [r7, #24]
 802109a:	6a1b      	ldr	r3, [r3, #32]
 802109c:	613b      	str	r3, [r7, #16]
 802109e:	e014      	b.n	80210ca <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 80210a0:	69bb      	ldr	r3, [r7, #24]
 80210a2:	331c      	adds	r3, #28
 80210a4:	781b      	ldrb	r3, [r3, #0]
 80210a6:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 80210a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80210ac:	2b00      	cmp	r3, #0
 80210ae:	db02      	blt.n	80210b6 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 80210b0:	23ff      	movs	r3, #255	; 0xff
 80210b2:	613b      	str	r3, [r7, #16]
 80210b4:	e009      	b.n	80210ca <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 80210b6:	7dfb      	ldrb	r3, [r7, #23]
 80210b8:	2bbf      	cmp	r3, #191	; 0xbf
 80210ba:	d903      	bls.n	80210c4 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 80210bc:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80210c0:	613b      	str	r3, [r7, #16]
 80210c2:	e002      	b.n	80210ca <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 80210c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80210c8:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 80210ca:	69bb      	ldr	r3, [r7, #24]
 80210cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80210ce:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 80210d0:	68fb      	ldr	r3, [r7, #12]
 80210d2:	2b00      	cmp	r3, #0
 80210d4:	d108      	bne.n	80210e8 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 80210d6:	69bb      	ldr	r3, [r7, #24]
 80210d8:	69da      	ldr	r2, [r3, #28]
 80210da:	693b      	ldr	r3, [r7, #16]
 80210dc:	4013      	ands	r3, r2
 80210de:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 80210e0:	68fb      	ldr	r3, [r7, #12]
 80210e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80210e6:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 80210e8:	210a      	movs	r1, #10
 80210ea:	69b8      	ldr	r0, [r7, #24]
 80210ec:	f000 faa0 	bl	8021630 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 80210f0:	69bb      	ldr	r3, [r7, #24]
 80210f2:	f103 011c 	add.w	r1, r3, #28
 80210f6:	f107 030c 	add.w	r3, r7, #12
 80210fa:	f107 0210 	add.w	r2, r7, #16
 80210fe:	6878      	ldr	r0, [r7, #4]
 8021100:	f7f7 face 	bl	80186a0 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8021104:	3720      	adds	r7, #32
 8021106:	46bd      	mov	sp, r7
 8021108:	bd80      	pop	{r7, pc}
 802110a:	bf00      	nop
 802110c:	0802d788 	.word	0x0802d788
 8021110:	0802d8e8 	.word	0x0802d8e8
 8021114:	0802d7e8 	.word	0x0802d7e8
 8021118:	0802d904 	.word	0x0802d904
 802111c:	88888889 	.word	0x88888889

08021120 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8021120:	b580      	push	{r7, lr}
 8021122:	b08a      	sub	sp, #40	; 0x28
 8021124:	af02      	add	r7, sp, #8
 8021126:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8021128:	687b      	ldr	r3, [r7, #4]
 802112a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802112c:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 802112e:	2105      	movs	r1, #5
 8021130:	69b8      	ldr	r0, [r7, #24]
 8021132:	f000 fa7d 	bl	8021630 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8021136:	f107 030c 	add.w	r3, r7, #12
 802113a:	2203      	movs	r2, #3
 802113c:	69b9      	ldr	r1, [r7, #24]
 802113e:	6878      	ldr	r0, [r7, #4]
 8021140:	f000 ff02 	bl	8021f48 <dhcp_create_msg>
 8021144:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8021146:	697b      	ldr	r3, [r7, #20]
 8021148:	2b00      	cmp	r3, #0
 802114a:	d04e      	beq.n	80211ea <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 802114c:	697b      	ldr	r3, [r7, #20]
 802114e:	685b      	ldr	r3, [r3, #4]
 8021150:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8021152:	89b8      	ldrh	r0, [r7, #12]
 8021154:	693b      	ldr	r3, [r7, #16]
 8021156:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 802115a:	2302      	movs	r3, #2
 802115c:	2239      	movs	r2, #57	; 0x39
 802115e:	f000 fa81 	bl	8021664 <dhcp_option>
 8021162:	4603      	mov	r3, r0
 8021164:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8021166:	89b8      	ldrh	r0, [r7, #12]
 8021168:	693b      	ldr	r3, [r7, #16]
 802116a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 802116e:	687b      	ldr	r3, [r7, #4]
 8021170:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8021172:	461a      	mov	r2, r3
 8021174:	f000 fad0 	bl	8021718 <dhcp_option_short>
 8021178:	4603      	mov	r3, r0
 802117a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 802117c:	89b8      	ldrh	r0, [r7, #12]
 802117e:	693b      	ldr	r3, [r7, #16]
 8021180:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8021184:	2303      	movs	r3, #3
 8021186:	2237      	movs	r2, #55	; 0x37
 8021188:	f000 fa6c 	bl	8021664 <dhcp_option>
 802118c:	4603      	mov	r3, r0
 802118e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8021190:	2300      	movs	r3, #0
 8021192:	77bb      	strb	r3, [r7, #30]
 8021194:	e00e      	b.n	80211b4 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8021196:	89b8      	ldrh	r0, [r7, #12]
 8021198:	693b      	ldr	r3, [r7, #16]
 802119a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 802119e:	7fbb      	ldrb	r3, [r7, #30]
 80211a0:	4a2a      	ldr	r2, [pc, #168]	; (802124c <dhcp_renew+0x12c>)
 80211a2:	5cd3      	ldrb	r3, [r2, r3]
 80211a4:	461a      	mov	r2, r3
 80211a6:	f000 fa91 	bl	80216cc <dhcp_option_byte>
 80211aa:	4603      	mov	r3, r0
 80211ac:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80211ae:	7fbb      	ldrb	r3, [r7, #30]
 80211b0:	3301      	adds	r3, #1
 80211b2:	77bb      	strb	r3, [r7, #30]
 80211b4:	7fbb      	ldrb	r3, [r7, #30]
 80211b6:	2b02      	cmp	r3, #2
 80211b8:	d9ed      	bls.n	8021196 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80211ba:	89b8      	ldrh	r0, [r7, #12]
 80211bc:	693b      	ldr	r3, [r7, #16]
 80211be:	33f0      	adds	r3, #240	; 0xf0
 80211c0:	697a      	ldr	r2, [r7, #20]
 80211c2:	4619      	mov	r1, r3
 80211c4:	f000 ff96 	bl	80220f4 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80211c8:	4b21      	ldr	r3, [pc, #132]	; (8021250 <dhcp_renew+0x130>)
 80211ca:	6818      	ldr	r0, [r3, #0]
 80211cc:	69bb      	ldr	r3, [r7, #24]
 80211ce:	f103 0218 	add.w	r2, r3, #24
 80211d2:	687b      	ldr	r3, [r7, #4]
 80211d4:	9300      	str	r3, [sp, #0]
 80211d6:	2343      	movs	r3, #67	; 0x43
 80211d8:	6979      	ldr	r1, [r7, #20]
 80211da:	f7fe fe53 	bl	801fe84 <udp_sendto_if>
 80211de:	4603      	mov	r3, r0
 80211e0:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80211e2:	6978      	ldr	r0, [r7, #20]
 80211e4:	f7f7 ff6a 	bl	80190bc <pbuf_free>
 80211e8:	e001      	b.n	80211ee <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80211ea:	23ff      	movs	r3, #255	; 0xff
 80211ec:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80211ee:	69bb      	ldr	r3, [r7, #24]
 80211f0:	799b      	ldrb	r3, [r3, #6]
 80211f2:	2bff      	cmp	r3, #255	; 0xff
 80211f4:	d005      	beq.n	8021202 <dhcp_renew+0xe2>
    dhcp->tries++;
 80211f6:	69bb      	ldr	r3, [r7, #24]
 80211f8:	799b      	ldrb	r3, [r3, #6]
 80211fa:	3301      	adds	r3, #1
 80211fc:	b2da      	uxtb	r2, r3
 80211fe:	69bb      	ldr	r3, [r7, #24]
 8021200:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8021202:	69bb      	ldr	r3, [r7, #24]
 8021204:	799b      	ldrb	r3, [r3, #6]
 8021206:	2b09      	cmp	r3, #9
 8021208:	d80a      	bhi.n	8021220 <dhcp_renew+0x100>
 802120a:	69bb      	ldr	r3, [r7, #24]
 802120c:	799b      	ldrb	r3, [r3, #6]
 802120e:	b29b      	uxth	r3, r3
 8021210:	461a      	mov	r2, r3
 8021212:	0152      	lsls	r2, r2, #5
 8021214:	1ad2      	subs	r2, r2, r3
 8021216:	0092      	lsls	r2, r2, #2
 8021218:	4413      	add	r3, r2
 802121a:	011b      	lsls	r3, r3, #4
 802121c:	b29b      	uxth	r3, r3
 802121e:	e001      	b.n	8021224 <dhcp_renew+0x104>
 8021220:	f644 6320 	movw	r3, #20000	; 0x4e20
 8021224:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8021226:	89fb      	ldrh	r3, [r7, #14]
 8021228:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 802122c:	4a09      	ldr	r2, [pc, #36]	; (8021254 <dhcp_renew+0x134>)
 802122e:	fb82 1203 	smull	r1, r2, r2, r3
 8021232:	1152      	asrs	r2, r2, #5
 8021234:	17db      	asrs	r3, r3, #31
 8021236:	1ad3      	subs	r3, r2, r3
 8021238:	b29a      	uxth	r2, r3
 802123a:	69bb      	ldr	r3, [r7, #24]
 802123c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 802123e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8021242:	4618      	mov	r0, r3
 8021244:	3720      	adds	r7, #32
 8021246:	46bd      	mov	sp, r7
 8021248:	bd80      	pop	{r7, pc}
 802124a:	bf00      	nop
 802124c:	1000006c 	.word	0x1000006c
 8021250:	20013820 	.word	0x20013820
 8021254:	10624dd3 	.word	0x10624dd3

08021258 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8021258:	b580      	push	{r7, lr}
 802125a:	b08a      	sub	sp, #40	; 0x28
 802125c:	af02      	add	r7, sp, #8
 802125e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8021260:	687b      	ldr	r3, [r7, #4]
 8021262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021264:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8021266:	2104      	movs	r1, #4
 8021268:	69b8      	ldr	r0, [r7, #24]
 802126a:	f000 f9e1 	bl	8021630 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 802126e:	f107 030c 	add.w	r3, r7, #12
 8021272:	2203      	movs	r2, #3
 8021274:	69b9      	ldr	r1, [r7, #24]
 8021276:	6878      	ldr	r0, [r7, #4]
 8021278:	f000 fe66 	bl	8021f48 <dhcp_create_msg>
 802127c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 802127e:	697b      	ldr	r3, [r7, #20]
 8021280:	2b00      	cmp	r3, #0
 8021282:	d04c      	beq.n	802131e <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8021284:	697b      	ldr	r3, [r7, #20]
 8021286:	685b      	ldr	r3, [r3, #4]
 8021288:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 802128a:	89b8      	ldrh	r0, [r7, #12]
 802128c:	693b      	ldr	r3, [r7, #16]
 802128e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8021292:	2302      	movs	r3, #2
 8021294:	2239      	movs	r2, #57	; 0x39
 8021296:	f000 f9e5 	bl	8021664 <dhcp_option>
 802129a:	4603      	mov	r3, r0
 802129c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 802129e:	89b8      	ldrh	r0, [r7, #12]
 80212a0:	693b      	ldr	r3, [r7, #16]
 80212a2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80212a6:	687b      	ldr	r3, [r7, #4]
 80212a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80212aa:	461a      	mov	r2, r3
 80212ac:	f000 fa34 	bl	8021718 <dhcp_option_short>
 80212b0:	4603      	mov	r3, r0
 80212b2:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80212b4:	89b8      	ldrh	r0, [r7, #12]
 80212b6:	693b      	ldr	r3, [r7, #16]
 80212b8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80212bc:	2303      	movs	r3, #3
 80212be:	2237      	movs	r2, #55	; 0x37
 80212c0:	f000 f9d0 	bl	8021664 <dhcp_option>
 80212c4:	4603      	mov	r3, r0
 80212c6:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80212c8:	2300      	movs	r3, #0
 80212ca:	77bb      	strb	r3, [r7, #30]
 80212cc:	e00e      	b.n	80212ec <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80212ce:	89b8      	ldrh	r0, [r7, #12]
 80212d0:	693b      	ldr	r3, [r7, #16]
 80212d2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80212d6:	7fbb      	ldrb	r3, [r7, #30]
 80212d8:	4a29      	ldr	r2, [pc, #164]	; (8021380 <dhcp_rebind+0x128>)
 80212da:	5cd3      	ldrb	r3, [r2, r3]
 80212dc:	461a      	mov	r2, r3
 80212de:	f000 f9f5 	bl	80216cc <dhcp_option_byte>
 80212e2:	4603      	mov	r3, r0
 80212e4:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80212e6:	7fbb      	ldrb	r3, [r7, #30]
 80212e8:	3301      	adds	r3, #1
 80212ea:	77bb      	strb	r3, [r7, #30]
 80212ec:	7fbb      	ldrb	r3, [r7, #30]
 80212ee:	2b02      	cmp	r3, #2
 80212f0:	d9ed      	bls.n	80212ce <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80212f2:	89b8      	ldrh	r0, [r7, #12]
 80212f4:	693b      	ldr	r3, [r7, #16]
 80212f6:	33f0      	adds	r3, #240	; 0xf0
 80212f8:	697a      	ldr	r2, [r7, #20]
 80212fa:	4619      	mov	r1, r3
 80212fc:	f000 fefa 	bl	80220f4 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8021300:	4b20      	ldr	r3, [pc, #128]	; (8021384 <dhcp_rebind+0x12c>)
 8021302:	6818      	ldr	r0, [r3, #0]
 8021304:	687b      	ldr	r3, [r7, #4]
 8021306:	9300      	str	r3, [sp, #0]
 8021308:	2343      	movs	r3, #67	; 0x43
 802130a:	4a1f      	ldr	r2, [pc, #124]	; (8021388 <dhcp_rebind+0x130>)
 802130c:	6979      	ldr	r1, [r7, #20]
 802130e:	f7fe fdb9 	bl	801fe84 <udp_sendto_if>
 8021312:	4603      	mov	r3, r0
 8021314:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8021316:	6978      	ldr	r0, [r7, #20]
 8021318:	f7f7 fed0 	bl	80190bc <pbuf_free>
 802131c:	e001      	b.n	8021322 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 802131e:	23ff      	movs	r3, #255	; 0xff
 8021320:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8021322:	69bb      	ldr	r3, [r7, #24]
 8021324:	799b      	ldrb	r3, [r3, #6]
 8021326:	2bff      	cmp	r3, #255	; 0xff
 8021328:	d005      	beq.n	8021336 <dhcp_rebind+0xde>
    dhcp->tries++;
 802132a:	69bb      	ldr	r3, [r7, #24]
 802132c:	799b      	ldrb	r3, [r3, #6]
 802132e:	3301      	adds	r3, #1
 8021330:	b2da      	uxtb	r2, r3
 8021332:	69bb      	ldr	r3, [r7, #24]
 8021334:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8021336:	69bb      	ldr	r3, [r7, #24]
 8021338:	799b      	ldrb	r3, [r3, #6]
 802133a:	2b09      	cmp	r3, #9
 802133c:	d80a      	bhi.n	8021354 <dhcp_rebind+0xfc>
 802133e:	69bb      	ldr	r3, [r7, #24]
 8021340:	799b      	ldrb	r3, [r3, #6]
 8021342:	b29b      	uxth	r3, r3
 8021344:	461a      	mov	r2, r3
 8021346:	0152      	lsls	r2, r2, #5
 8021348:	1ad2      	subs	r2, r2, r3
 802134a:	0092      	lsls	r2, r2, #2
 802134c:	4413      	add	r3, r2
 802134e:	00db      	lsls	r3, r3, #3
 8021350:	b29b      	uxth	r3, r3
 8021352:	e001      	b.n	8021358 <dhcp_rebind+0x100>
 8021354:	f242 7310 	movw	r3, #10000	; 0x2710
 8021358:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 802135a:	89fb      	ldrh	r3, [r7, #14]
 802135c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8021360:	4a0a      	ldr	r2, [pc, #40]	; (802138c <dhcp_rebind+0x134>)
 8021362:	fb82 1203 	smull	r1, r2, r2, r3
 8021366:	1152      	asrs	r2, r2, #5
 8021368:	17db      	asrs	r3, r3, #31
 802136a:	1ad3      	subs	r3, r2, r3
 802136c:	b29a      	uxth	r2, r3
 802136e:	69bb      	ldr	r3, [r7, #24]
 8021370:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8021372:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8021376:	4618      	mov	r0, r3
 8021378:	3720      	adds	r7, #32
 802137a:	46bd      	mov	sp, r7
 802137c:	bd80      	pop	{r7, pc}
 802137e:	bf00      	nop
 8021380:	1000006c 	.word	0x1000006c
 8021384:	20013820 	.word	0x20013820
 8021388:	0802e46c 	.word	0x0802e46c
 802138c:	10624dd3 	.word	0x10624dd3

08021390 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8021390:	b5b0      	push	{r4, r5, r7, lr}
 8021392:	b08a      	sub	sp, #40	; 0x28
 8021394:	af02      	add	r7, sp, #8
 8021396:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8021398:	687b      	ldr	r3, [r7, #4]
 802139a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802139c:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 802139e:	2103      	movs	r1, #3
 80213a0:	69b8      	ldr	r0, [r7, #24]
 80213a2:	f000 f945 	bl	8021630 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80213a6:	f107 030c 	add.w	r3, r7, #12
 80213aa:	2203      	movs	r2, #3
 80213ac:	69b9      	ldr	r1, [r7, #24]
 80213ae:	6878      	ldr	r0, [r7, #4]
 80213b0:	f000 fdca 	bl	8021f48 <dhcp_create_msg>
 80213b4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80213b6:	697b      	ldr	r3, [r7, #20]
 80213b8:	2b00      	cmp	r3, #0
 80213ba:	d066      	beq.n	802148a <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80213bc:	697b      	ldr	r3, [r7, #20]
 80213be:	685b      	ldr	r3, [r3, #4]
 80213c0:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80213c2:	89b8      	ldrh	r0, [r7, #12]
 80213c4:	693b      	ldr	r3, [r7, #16]
 80213c6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80213ca:	2302      	movs	r3, #2
 80213cc:	2239      	movs	r2, #57	; 0x39
 80213ce:	f000 f949 	bl	8021664 <dhcp_option>
 80213d2:	4603      	mov	r3, r0
 80213d4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 80213d6:	89b8      	ldrh	r0, [r7, #12]
 80213d8:	693b      	ldr	r3, [r7, #16]
 80213da:	33f0      	adds	r3, #240	; 0xf0
 80213dc:	f44f 7210 	mov.w	r2, #576	; 0x240
 80213e0:	4619      	mov	r1, r3
 80213e2:	f000 f999 	bl	8021718 <dhcp_option_short>
 80213e6:	4603      	mov	r3, r0
 80213e8:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80213ea:	89b8      	ldrh	r0, [r7, #12]
 80213ec:	693b      	ldr	r3, [r7, #16]
 80213ee:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80213f2:	2304      	movs	r3, #4
 80213f4:	2232      	movs	r2, #50	; 0x32
 80213f6:	f000 f935 	bl	8021664 <dhcp_option>
 80213fa:	4603      	mov	r3, r0
 80213fc:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80213fe:	89bc      	ldrh	r4, [r7, #12]
 8021400:	693b      	ldr	r3, [r7, #16]
 8021402:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8021406:	69bb      	ldr	r3, [r7, #24]
 8021408:	69db      	ldr	r3, [r3, #28]
 802140a:	4618      	mov	r0, r3
 802140c:	f7f6 fa8b 	bl	8017926 <lwip_htonl>
 8021410:	4603      	mov	r3, r0
 8021412:	461a      	mov	r2, r3
 8021414:	4629      	mov	r1, r5
 8021416:	4620      	mov	r0, r4
 8021418:	f000 f9b0 	bl	802177c <dhcp_option_long>
 802141c:	4603      	mov	r3, r0
 802141e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8021420:	89b8      	ldrh	r0, [r7, #12]
 8021422:	693b      	ldr	r3, [r7, #16]
 8021424:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8021428:	2303      	movs	r3, #3
 802142a:	2237      	movs	r2, #55	; 0x37
 802142c:	f000 f91a 	bl	8021664 <dhcp_option>
 8021430:	4603      	mov	r3, r0
 8021432:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8021434:	2300      	movs	r3, #0
 8021436:	77bb      	strb	r3, [r7, #30]
 8021438:	e00e      	b.n	8021458 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 802143a:	89b8      	ldrh	r0, [r7, #12]
 802143c:	693b      	ldr	r3, [r7, #16]
 802143e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8021442:	7fbb      	ldrb	r3, [r7, #30]
 8021444:	4a29      	ldr	r2, [pc, #164]	; (80214ec <dhcp_reboot+0x15c>)
 8021446:	5cd3      	ldrb	r3, [r2, r3]
 8021448:	461a      	mov	r2, r3
 802144a:	f000 f93f 	bl	80216cc <dhcp_option_byte>
 802144e:	4603      	mov	r3, r0
 8021450:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8021452:	7fbb      	ldrb	r3, [r7, #30]
 8021454:	3301      	adds	r3, #1
 8021456:	77bb      	strb	r3, [r7, #30]
 8021458:	7fbb      	ldrb	r3, [r7, #30]
 802145a:	2b02      	cmp	r3, #2
 802145c:	d9ed      	bls.n	802143a <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 802145e:	89b8      	ldrh	r0, [r7, #12]
 8021460:	693b      	ldr	r3, [r7, #16]
 8021462:	33f0      	adds	r3, #240	; 0xf0
 8021464:	697a      	ldr	r2, [r7, #20]
 8021466:	4619      	mov	r1, r3
 8021468:	f000 fe44 	bl	80220f4 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 802146c:	4b20      	ldr	r3, [pc, #128]	; (80214f0 <dhcp_reboot+0x160>)
 802146e:	6818      	ldr	r0, [r3, #0]
 8021470:	687b      	ldr	r3, [r7, #4]
 8021472:	9300      	str	r3, [sp, #0]
 8021474:	2343      	movs	r3, #67	; 0x43
 8021476:	4a1f      	ldr	r2, [pc, #124]	; (80214f4 <dhcp_reboot+0x164>)
 8021478:	6979      	ldr	r1, [r7, #20]
 802147a:	f7fe fd03 	bl	801fe84 <udp_sendto_if>
 802147e:	4603      	mov	r3, r0
 8021480:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8021482:	6978      	ldr	r0, [r7, #20]
 8021484:	f7f7 fe1a 	bl	80190bc <pbuf_free>
 8021488:	e001      	b.n	802148e <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 802148a:	23ff      	movs	r3, #255	; 0xff
 802148c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 802148e:	69bb      	ldr	r3, [r7, #24]
 8021490:	799b      	ldrb	r3, [r3, #6]
 8021492:	2bff      	cmp	r3, #255	; 0xff
 8021494:	d005      	beq.n	80214a2 <dhcp_reboot+0x112>
    dhcp->tries++;
 8021496:	69bb      	ldr	r3, [r7, #24]
 8021498:	799b      	ldrb	r3, [r3, #6]
 802149a:	3301      	adds	r3, #1
 802149c:	b2da      	uxtb	r2, r3
 802149e:	69bb      	ldr	r3, [r7, #24]
 80214a0:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80214a2:	69bb      	ldr	r3, [r7, #24]
 80214a4:	799b      	ldrb	r3, [r3, #6]
 80214a6:	2b09      	cmp	r3, #9
 80214a8:	d80a      	bhi.n	80214c0 <dhcp_reboot+0x130>
 80214aa:	69bb      	ldr	r3, [r7, #24]
 80214ac:	799b      	ldrb	r3, [r3, #6]
 80214ae:	b29b      	uxth	r3, r3
 80214b0:	461a      	mov	r2, r3
 80214b2:	0152      	lsls	r2, r2, #5
 80214b4:	1ad2      	subs	r2, r2, r3
 80214b6:	0092      	lsls	r2, r2, #2
 80214b8:	4413      	add	r3, r2
 80214ba:	00db      	lsls	r3, r3, #3
 80214bc:	b29b      	uxth	r3, r3
 80214be:	e001      	b.n	80214c4 <dhcp_reboot+0x134>
 80214c0:	f242 7310 	movw	r3, #10000	; 0x2710
 80214c4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80214c6:	89fb      	ldrh	r3, [r7, #14]
 80214c8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80214cc:	4a0a      	ldr	r2, [pc, #40]	; (80214f8 <dhcp_reboot+0x168>)
 80214ce:	fb82 1203 	smull	r1, r2, r2, r3
 80214d2:	1152      	asrs	r2, r2, #5
 80214d4:	17db      	asrs	r3, r3, #31
 80214d6:	1ad3      	subs	r3, r2, r3
 80214d8:	b29a      	uxth	r2, r3
 80214da:	69bb      	ldr	r3, [r7, #24]
 80214dc:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80214de:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80214e2:	4618      	mov	r0, r3
 80214e4:	3720      	adds	r7, #32
 80214e6:	46bd      	mov	sp, r7
 80214e8:	bdb0      	pop	{r4, r5, r7, pc}
 80214ea:	bf00      	nop
 80214ec:	1000006c 	.word	0x1000006c
 80214f0:	20013820 	.word	0x20013820
 80214f4:	0802e46c 	.word	0x0802e46c
 80214f8:	10624dd3 	.word	0x10624dd3

080214fc <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 80214fc:	b5b0      	push	{r4, r5, r7, lr}
 80214fe:	b08a      	sub	sp, #40	; 0x28
 8021500:	af02      	add	r7, sp, #8
 8021502:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8021504:	687b      	ldr	r3, [r7, #4]
 8021506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021508:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 802150a:	69fb      	ldr	r3, [r7, #28]
 802150c:	2b00      	cmp	r3, #0
 802150e:	f000 8084 	beq.w	802161a <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8021512:	69fb      	ldr	r3, [r7, #28]
 8021514:	795b      	ldrb	r3, [r3, #5]
 8021516:	2b00      	cmp	r3, #0
 8021518:	f000 8081 	beq.w	802161e <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 802151c:	69fb      	ldr	r3, [r7, #28]
 802151e:	699b      	ldr	r3, [r3, #24]
 8021520:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8021522:	69fb      	ldr	r3, [r7, #28]
 8021524:	2200      	movs	r2, #0
 8021526:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8021528:	69fb      	ldr	r3, [r7, #28]
 802152a:	2200      	movs	r2, #0
 802152c:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 802152e:	69fb      	ldr	r3, [r7, #28]
 8021530:	2200      	movs	r2, #0
 8021532:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8021534:	69fb      	ldr	r3, [r7, #28]
 8021536:	2200      	movs	r2, #0
 8021538:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 802153a:	69fb      	ldr	r3, [r7, #28]
 802153c:	2200      	movs	r2, #0
 802153e:	631a      	str	r2, [r3, #48]	; 0x30
 8021540:	69fb      	ldr	r3, [r7, #28]
 8021542:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8021544:	69fb      	ldr	r3, [r7, #28]
 8021546:	62da      	str	r2, [r3, #44]	; 0x2c
 8021548:	69fb      	ldr	r3, [r7, #28]
 802154a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802154c:	69fb      	ldr	r3, [r7, #28]
 802154e:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8021550:	69fb      	ldr	r3, [r7, #28]
 8021552:	2200      	movs	r2, #0
 8021554:	829a      	strh	r2, [r3, #20]
 8021556:	69fb      	ldr	r3, [r7, #28]
 8021558:	8a9a      	ldrh	r2, [r3, #20]
 802155a:	69fb      	ldr	r3, [r7, #28]
 802155c:	825a      	strh	r2, [r3, #18]
 802155e:	69fb      	ldr	r3, [r7, #28]
 8021560:	8a5a      	ldrh	r2, [r3, #18]
 8021562:	69fb      	ldr	r3, [r7, #28]
 8021564:	821a      	strh	r2, [r3, #16]
 8021566:	69fb      	ldr	r3, [r7, #28]
 8021568:	8a1a      	ldrh	r2, [r3, #16]
 802156a:	69fb      	ldr	r3, [r7, #28]
 802156c:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 802156e:	6878      	ldr	r0, [r7, #4]
 8021570:	f000 fdee 	bl	8022150 <dhcp_supplied_address>
 8021574:	4603      	mov	r3, r0
 8021576:	2b00      	cmp	r3, #0
 8021578:	d03b      	beq.n	80215f2 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 802157a:	f107 030e 	add.w	r3, r7, #14
 802157e:	2207      	movs	r2, #7
 8021580:	69f9      	ldr	r1, [r7, #28]
 8021582:	6878      	ldr	r0, [r7, #4]
 8021584:	f000 fce0 	bl	8021f48 <dhcp_create_msg>
 8021588:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 802158a:	69bb      	ldr	r3, [r7, #24]
 802158c:	2b00      	cmp	r3, #0
 802158e:	d030      	beq.n	80215f2 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8021590:	69bb      	ldr	r3, [r7, #24]
 8021592:	685b      	ldr	r3, [r3, #4]
 8021594:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8021596:	89f8      	ldrh	r0, [r7, #14]
 8021598:	697b      	ldr	r3, [r7, #20]
 802159a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 802159e:	2304      	movs	r3, #4
 80215a0:	2236      	movs	r2, #54	; 0x36
 80215a2:	f000 f85f 	bl	8021664 <dhcp_option>
 80215a6:	4603      	mov	r3, r0
 80215a8:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 80215aa:	89fc      	ldrh	r4, [r7, #14]
 80215ac:	697b      	ldr	r3, [r7, #20]
 80215ae:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80215b2:	693b      	ldr	r3, [r7, #16]
 80215b4:	4618      	mov	r0, r3
 80215b6:	f7f6 f9b6 	bl	8017926 <lwip_htonl>
 80215ba:	4603      	mov	r3, r0
 80215bc:	461a      	mov	r2, r3
 80215be:	4629      	mov	r1, r5
 80215c0:	4620      	mov	r0, r4
 80215c2:	f000 f8db 	bl	802177c <dhcp_option_long>
 80215c6:	4603      	mov	r3, r0
 80215c8:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80215ca:	89f8      	ldrh	r0, [r7, #14]
 80215cc:	697b      	ldr	r3, [r7, #20]
 80215ce:	33f0      	adds	r3, #240	; 0xf0
 80215d0:	69ba      	ldr	r2, [r7, #24]
 80215d2:	4619      	mov	r1, r3
 80215d4:	f000 fd8e 	bl	80220f4 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80215d8:	4b13      	ldr	r3, [pc, #76]	; (8021628 <dhcp_release_and_stop+0x12c>)
 80215da:	6818      	ldr	r0, [r3, #0]
 80215dc:	f107 0210 	add.w	r2, r7, #16
 80215e0:	687b      	ldr	r3, [r7, #4]
 80215e2:	9300      	str	r3, [sp, #0]
 80215e4:	2343      	movs	r3, #67	; 0x43
 80215e6:	69b9      	ldr	r1, [r7, #24]
 80215e8:	f7fe fc4c 	bl	801fe84 <udp_sendto_if>
      pbuf_free(p_out);
 80215ec:	69b8      	ldr	r0, [r7, #24]
 80215ee:	f7f7 fd65 	bl	80190bc <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 80215f2:	4b0e      	ldr	r3, [pc, #56]	; (802162c <dhcp_release_and_stop+0x130>)
 80215f4:	4a0d      	ldr	r2, [pc, #52]	; (802162c <dhcp_release_and_stop+0x130>)
 80215f6:	490d      	ldr	r1, [pc, #52]	; (802162c <dhcp_release_and_stop+0x130>)
 80215f8:	6878      	ldr	r0, [r7, #4]
 80215fa:	f7f7 f851 	bl	80186a0 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 80215fe:	2100      	movs	r1, #0
 8021600:	69f8      	ldr	r0, [r7, #28]
 8021602:	f000 f815 	bl	8021630 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8021606:	69fb      	ldr	r3, [r7, #28]
 8021608:	791b      	ldrb	r3, [r3, #4]
 802160a:	2b00      	cmp	r3, #0
 802160c:	d008      	beq.n	8021620 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 802160e:	f7fe ff85 	bl	802051c <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8021612:	69fb      	ldr	r3, [r7, #28]
 8021614:	2200      	movs	r2, #0
 8021616:	711a      	strb	r2, [r3, #4]
 8021618:	e002      	b.n	8021620 <dhcp_release_and_stop+0x124>
    return;
 802161a:	bf00      	nop
 802161c:	e000      	b.n	8021620 <dhcp_release_and_stop+0x124>
    return;
 802161e:	bf00      	nop
  }
}
 8021620:	3720      	adds	r7, #32
 8021622:	46bd      	mov	sp, r7
 8021624:	bdb0      	pop	{r4, r5, r7, pc}
 8021626:	bf00      	nop
 8021628:	20013820 	.word	0x20013820
 802162c:	0802e468 	.word	0x0802e468

08021630 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8021630:	b480      	push	{r7}
 8021632:	b083      	sub	sp, #12
 8021634:	af00      	add	r7, sp, #0
 8021636:	6078      	str	r0, [r7, #4]
 8021638:	460b      	mov	r3, r1
 802163a:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 802163c:	687b      	ldr	r3, [r7, #4]
 802163e:	795b      	ldrb	r3, [r3, #5]
 8021640:	78fa      	ldrb	r2, [r7, #3]
 8021642:	429a      	cmp	r2, r3
 8021644:	d008      	beq.n	8021658 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8021646:	687b      	ldr	r3, [r7, #4]
 8021648:	78fa      	ldrb	r2, [r7, #3]
 802164a:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 802164c:	687b      	ldr	r3, [r7, #4]
 802164e:	2200      	movs	r2, #0
 8021650:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8021652:	687b      	ldr	r3, [r7, #4]
 8021654:	2200      	movs	r2, #0
 8021656:	811a      	strh	r2, [r3, #8]
  }
}
 8021658:	bf00      	nop
 802165a:	370c      	adds	r7, #12
 802165c:	46bd      	mov	sp, r7
 802165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021662:	4770      	bx	lr

08021664 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8021664:	b580      	push	{r7, lr}
 8021666:	b082      	sub	sp, #8
 8021668:	af00      	add	r7, sp, #0
 802166a:	6039      	str	r1, [r7, #0]
 802166c:	4611      	mov	r1, r2
 802166e:	461a      	mov	r2, r3
 8021670:	4603      	mov	r3, r0
 8021672:	80fb      	strh	r3, [r7, #6]
 8021674:	460b      	mov	r3, r1
 8021676:	717b      	strb	r3, [r7, #5]
 8021678:	4613      	mov	r3, r2
 802167a:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 802167c:	88fa      	ldrh	r2, [r7, #6]
 802167e:	793b      	ldrb	r3, [r7, #4]
 8021680:	4413      	add	r3, r2
 8021682:	3302      	adds	r3, #2
 8021684:	2b44      	cmp	r3, #68	; 0x44
 8021686:	d906      	bls.n	8021696 <dhcp_option+0x32>
 8021688:	4b0d      	ldr	r3, [pc, #52]	; (80216c0 <dhcp_option+0x5c>)
 802168a:	f240 529a 	movw	r2, #1434	; 0x59a
 802168e:	490d      	ldr	r1, [pc, #52]	; (80216c4 <dhcp_option+0x60>)
 8021690:	480d      	ldr	r0, [pc, #52]	; (80216c8 <dhcp_option+0x64>)
 8021692:	f004 f88b 	bl	80257ac <iprintf>
  options[options_out_len++] = option_type;
 8021696:	88fb      	ldrh	r3, [r7, #6]
 8021698:	1c5a      	adds	r2, r3, #1
 802169a:	80fa      	strh	r2, [r7, #6]
 802169c:	461a      	mov	r2, r3
 802169e:	683b      	ldr	r3, [r7, #0]
 80216a0:	4413      	add	r3, r2
 80216a2:	797a      	ldrb	r2, [r7, #5]
 80216a4:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 80216a6:	88fb      	ldrh	r3, [r7, #6]
 80216a8:	1c5a      	adds	r2, r3, #1
 80216aa:	80fa      	strh	r2, [r7, #6]
 80216ac:	461a      	mov	r2, r3
 80216ae:	683b      	ldr	r3, [r7, #0]
 80216b0:	4413      	add	r3, r2
 80216b2:	793a      	ldrb	r2, [r7, #4]
 80216b4:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80216b6:	88fb      	ldrh	r3, [r7, #6]
}
 80216b8:	4618      	mov	r0, r3
 80216ba:	3708      	adds	r7, #8
 80216bc:	46bd      	mov	sp, r7
 80216be:	bd80      	pop	{r7, pc}
 80216c0:	0802d788 	.word	0x0802d788
 80216c4:	0802d91c 	.word	0x0802d91c
 80216c8:	0802d7e8 	.word	0x0802d7e8

080216cc <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 80216cc:	b580      	push	{r7, lr}
 80216ce:	b082      	sub	sp, #8
 80216d0:	af00      	add	r7, sp, #0
 80216d2:	4603      	mov	r3, r0
 80216d4:	6039      	str	r1, [r7, #0]
 80216d6:	80fb      	strh	r3, [r7, #6]
 80216d8:	4613      	mov	r3, r2
 80216da:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 80216dc:	88fb      	ldrh	r3, [r7, #6]
 80216de:	2b43      	cmp	r3, #67	; 0x43
 80216e0:	d906      	bls.n	80216f0 <dhcp_option_byte+0x24>
 80216e2:	4b0a      	ldr	r3, [pc, #40]	; (802170c <dhcp_option_byte+0x40>)
 80216e4:	f240 52a6 	movw	r2, #1446	; 0x5a6
 80216e8:	4909      	ldr	r1, [pc, #36]	; (8021710 <dhcp_option_byte+0x44>)
 80216ea:	480a      	ldr	r0, [pc, #40]	; (8021714 <dhcp_option_byte+0x48>)
 80216ec:	f004 f85e 	bl	80257ac <iprintf>
  options[options_out_len++] = value;
 80216f0:	88fb      	ldrh	r3, [r7, #6]
 80216f2:	1c5a      	adds	r2, r3, #1
 80216f4:	80fa      	strh	r2, [r7, #6]
 80216f6:	461a      	mov	r2, r3
 80216f8:	683b      	ldr	r3, [r7, #0]
 80216fa:	4413      	add	r3, r2
 80216fc:	797a      	ldrb	r2, [r7, #5]
 80216fe:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8021700:	88fb      	ldrh	r3, [r7, #6]
}
 8021702:	4618      	mov	r0, r3
 8021704:	3708      	adds	r7, #8
 8021706:	46bd      	mov	sp, r7
 8021708:	bd80      	pop	{r7, pc}
 802170a:	bf00      	nop
 802170c:	0802d788 	.word	0x0802d788
 8021710:	0802d960 	.word	0x0802d960
 8021714:	0802d7e8 	.word	0x0802d7e8

08021718 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8021718:	b580      	push	{r7, lr}
 802171a:	b082      	sub	sp, #8
 802171c:	af00      	add	r7, sp, #0
 802171e:	4603      	mov	r3, r0
 8021720:	6039      	str	r1, [r7, #0]
 8021722:	80fb      	strh	r3, [r7, #6]
 8021724:	4613      	mov	r3, r2
 8021726:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8021728:	88fb      	ldrh	r3, [r7, #6]
 802172a:	3302      	adds	r3, #2
 802172c:	2b44      	cmp	r3, #68	; 0x44
 802172e:	d906      	bls.n	802173e <dhcp_option_short+0x26>
 8021730:	4b0f      	ldr	r3, [pc, #60]	; (8021770 <dhcp_option_short+0x58>)
 8021732:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8021736:	490f      	ldr	r1, [pc, #60]	; (8021774 <dhcp_option_short+0x5c>)
 8021738:	480f      	ldr	r0, [pc, #60]	; (8021778 <dhcp_option_short+0x60>)
 802173a:	f004 f837 	bl	80257ac <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 802173e:	88bb      	ldrh	r3, [r7, #4]
 8021740:	0a1b      	lsrs	r3, r3, #8
 8021742:	b29a      	uxth	r2, r3
 8021744:	88fb      	ldrh	r3, [r7, #6]
 8021746:	1c59      	adds	r1, r3, #1
 8021748:	80f9      	strh	r1, [r7, #6]
 802174a:	4619      	mov	r1, r3
 802174c:	683b      	ldr	r3, [r7, #0]
 802174e:	440b      	add	r3, r1
 8021750:	b2d2      	uxtb	r2, r2
 8021752:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8021754:	88fb      	ldrh	r3, [r7, #6]
 8021756:	1c5a      	adds	r2, r3, #1
 8021758:	80fa      	strh	r2, [r7, #6]
 802175a:	461a      	mov	r2, r3
 802175c:	683b      	ldr	r3, [r7, #0]
 802175e:	4413      	add	r3, r2
 8021760:	88ba      	ldrh	r2, [r7, #4]
 8021762:	b2d2      	uxtb	r2, r2
 8021764:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8021766:	88fb      	ldrh	r3, [r7, #6]
}
 8021768:	4618      	mov	r0, r3
 802176a:	3708      	adds	r7, #8
 802176c:	46bd      	mov	sp, r7
 802176e:	bd80      	pop	{r7, pc}
 8021770:	0802d788 	.word	0x0802d788
 8021774:	0802d998 	.word	0x0802d998
 8021778:	0802d7e8 	.word	0x0802d7e8

0802177c <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 802177c:	b580      	push	{r7, lr}
 802177e:	b084      	sub	sp, #16
 8021780:	af00      	add	r7, sp, #0
 8021782:	4603      	mov	r3, r0
 8021784:	60b9      	str	r1, [r7, #8]
 8021786:	607a      	str	r2, [r7, #4]
 8021788:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 802178a:	89fb      	ldrh	r3, [r7, #14]
 802178c:	3304      	adds	r3, #4
 802178e:	2b44      	cmp	r3, #68	; 0x44
 8021790:	d906      	bls.n	80217a0 <dhcp_option_long+0x24>
 8021792:	4b19      	ldr	r3, [pc, #100]	; (80217f8 <dhcp_option_long+0x7c>)
 8021794:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8021798:	4918      	ldr	r1, [pc, #96]	; (80217fc <dhcp_option_long+0x80>)
 802179a:	4819      	ldr	r0, [pc, #100]	; (8021800 <dhcp_option_long+0x84>)
 802179c:	f004 f806 	bl	80257ac <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 80217a0:	687b      	ldr	r3, [r7, #4]
 80217a2:	0e1a      	lsrs	r2, r3, #24
 80217a4:	89fb      	ldrh	r3, [r7, #14]
 80217a6:	1c59      	adds	r1, r3, #1
 80217a8:	81f9      	strh	r1, [r7, #14]
 80217aa:	4619      	mov	r1, r3
 80217ac:	68bb      	ldr	r3, [r7, #8]
 80217ae:	440b      	add	r3, r1
 80217b0:	b2d2      	uxtb	r2, r2
 80217b2:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 80217b4:	687b      	ldr	r3, [r7, #4]
 80217b6:	0c1a      	lsrs	r2, r3, #16
 80217b8:	89fb      	ldrh	r3, [r7, #14]
 80217ba:	1c59      	adds	r1, r3, #1
 80217bc:	81f9      	strh	r1, [r7, #14]
 80217be:	4619      	mov	r1, r3
 80217c0:	68bb      	ldr	r3, [r7, #8]
 80217c2:	440b      	add	r3, r1
 80217c4:	b2d2      	uxtb	r2, r2
 80217c6:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 80217c8:	687b      	ldr	r3, [r7, #4]
 80217ca:	0a1a      	lsrs	r2, r3, #8
 80217cc:	89fb      	ldrh	r3, [r7, #14]
 80217ce:	1c59      	adds	r1, r3, #1
 80217d0:	81f9      	strh	r1, [r7, #14]
 80217d2:	4619      	mov	r1, r3
 80217d4:	68bb      	ldr	r3, [r7, #8]
 80217d6:	440b      	add	r3, r1
 80217d8:	b2d2      	uxtb	r2, r2
 80217da:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 80217dc:	89fb      	ldrh	r3, [r7, #14]
 80217de:	1c5a      	adds	r2, r3, #1
 80217e0:	81fa      	strh	r2, [r7, #14]
 80217e2:	461a      	mov	r2, r3
 80217e4:	68bb      	ldr	r3, [r7, #8]
 80217e6:	4413      	add	r3, r2
 80217e8:	687a      	ldr	r2, [r7, #4]
 80217ea:	b2d2      	uxtb	r2, r2
 80217ec:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80217ee:	89fb      	ldrh	r3, [r7, #14]
}
 80217f0:	4618      	mov	r0, r3
 80217f2:	3710      	adds	r7, #16
 80217f4:	46bd      	mov	sp, r7
 80217f6:	bd80      	pop	{r7, pc}
 80217f8:	0802d788 	.word	0x0802d788
 80217fc:	0802d9d4 	.word	0x0802d9d4
 8021800:	0802d7e8 	.word	0x0802d7e8

08021804 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8021804:	b580      	push	{r7, lr}
 8021806:	b090      	sub	sp, #64	; 0x40
 8021808:	af00      	add	r7, sp, #0
 802180a:	6078      	str	r0, [r7, #4]
 802180c:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 802180e:	2300      	movs	r3, #0
 8021810:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 8021812:	2300      	movs	r3, #0
 8021814:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8021816:	2208      	movs	r2, #8
 8021818:	2100      	movs	r1, #0
 802181a:	48b5      	ldr	r0, [pc, #724]	; (8021af0 <dhcp_parse_reply+0x2ec>)
 802181c:	f003 f91a 	bl	8024a54 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8021820:	687b      	ldr	r3, [r7, #4]
 8021822:	895b      	ldrh	r3, [r3, #10]
 8021824:	2b2b      	cmp	r3, #43	; 0x2b
 8021826:	d802      	bhi.n	802182e <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8021828:	f06f 0301 	mvn.w	r3, #1
 802182c:	e2a7      	b.n	8021d7e <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 802182e:	687b      	ldr	r3, [r7, #4]
 8021830:	685b      	ldr	r3, [r3, #4]
 8021832:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8021834:	23f0      	movs	r3, #240	; 0xf0
 8021836:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8021838:	687b      	ldr	r3, [r7, #4]
 802183a:	891b      	ldrh	r3, [r3, #8]
 802183c:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 802183e:	687b      	ldr	r3, [r7, #4]
 8021840:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8021842:	e00c      	b.n	802185e <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8021844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021846:	895b      	ldrh	r3, [r3, #10]
 8021848:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 802184a:	1ad3      	subs	r3, r2, r3
 802184c:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 802184e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021850:	895b      	ldrh	r3, [r3, #10]
 8021852:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8021854:	1ad3      	subs	r3, r2, r3
 8021856:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 8021858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802185a:	681b      	ldr	r3, [r3, #0]
 802185c:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 802185e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021860:	2b00      	cmp	r3, #0
 8021862:	d004      	beq.n	802186e <dhcp_parse_reply+0x6a>
 8021864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021866:	895b      	ldrh	r3, [r3, #10]
 8021868:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 802186a:	429a      	cmp	r2, r3
 802186c:	d2ea      	bcs.n	8021844 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 802186e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021870:	2b00      	cmp	r3, #0
 8021872:	d102      	bne.n	802187a <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8021874:	f06f 0301 	mvn.w	r3, #1
 8021878:	e281      	b.n	8021d7e <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 802187a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 802187c:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 802187e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8021880:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 8021882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021884:	685b      	ldr	r3, [r3, #4]
 8021886:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8021888:	e239      	b.n	8021cfe <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 802188a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 802188c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 802188e:	4413      	add	r3, r2
 8021890:	781b      	ldrb	r3, [r3, #0]
 8021892:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8021894:	2300      	movs	r3, #0
 8021896:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 802189a:	f04f 33ff 	mov.w	r3, #4294967295
 802189e:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 80218a0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80218a2:	3302      	adds	r3, #2
 80218a4:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 80218a6:	8bfa      	ldrh	r2, [r7, #30]
 80218a8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80218aa:	429a      	cmp	r2, r3
 80218ac:	d202      	bcs.n	80218b4 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 80218ae:	f06f 0301 	mvn.w	r3, #1
 80218b2:	e264      	b.n	8021d7e <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 80218b4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80218b6:	3301      	adds	r3, #1
 80218b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80218ba:	8952      	ldrh	r2, [r2, #10]
 80218bc:	4293      	cmp	r3, r2
 80218be:	da07      	bge.n	80218d0 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 80218c0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80218c2:	3301      	adds	r3, #1
 80218c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80218c6:	4413      	add	r3, r2
 80218c8:	781b      	ldrb	r3, [r3, #0]
 80218ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80218ce:	e00b      	b.n	80218e8 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 80218d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80218d2:	681b      	ldr	r3, [r3, #0]
 80218d4:	2b00      	cmp	r3, #0
 80218d6:	d004      	beq.n	80218e2 <dhcp_parse_reply+0xde>
 80218d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80218da:	681b      	ldr	r3, [r3, #0]
 80218dc:	685b      	ldr	r3, [r3, #4]
 80218de:	781b      	ldrb	r3, [r3, #0]
 80218e0:	e000      	b.n	80218e4 <dhcp_parse_reply+0xe0>
 80218e2:	2300      	movs	r3, #0
 80218e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 80218e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80218ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 80218f0:	7dfb      	ldrb	r3, [r7, #23]
 80218f2:	2b3b      	cmp	r3, #59	; 0x3b
 80218f4:	f200 812c 	bhi.w	8021b50 <dhcp_parse_reply+0x34c>
 80218f8:	a201      	add	r2, pc, #4	; (adr r2, 8021900 <dhcp_parse_reply+0xfc>)
 80218fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80218fe:	bf00      	nop
 8021900:	080219f1 	.word	0x080219f1
 8021904:	08021a01 	.word	0x08021a01
 8021908:	08021b51 	.word	0x08021b51
 802190c:	08021a23 	.word	0x08021a23
 8021910:	08021b51 	.word	0x08021b51
 8021914:	08021b51 	.word	0x08021b51
 8021918:	08021b51 	.word	0x08021b51
 802191c:	08021b51 	.word	0x08021b51
 8021920:	08021b51 	.word	0x08021b51
 8021924:	08021b51 	.word	0x08021b51
 8021928:	08021b51 	.word	0x08021b51
 802192c:	08021b51 	.word	0x08021b51
 8021930:	08021b51 	.word	0x08021b51
 8021934:	08021b51 	.word	0x08021b51
 8021938:	08021b51 	.word	0x08021b51
 802193c:	08021b51 	.word	0x08021b51
 8021940:	08021b51 	.word	0x08021b51
 8021944:	08021b51 	.word	0x08021b51
 8021948:	08021b51 	.word	0x08021b51
 802194c:	08021b51 	.word	0x08021b51
 8021950:	08021b51 	.word	0x08021b51
 8021954:	08021b51 	.word	0x08021b51
 8021958:	08021b51 	.word	0x08021b51
 802195c:	08021b51 	.word	0x08021b51
 8021960:	08021b51 	.word	0x08021b51
 8021964:	08021b51 	.word	0x08021b51
 8021968:	08021b51 	.word	0x08021b51
 802196c:	08021b51 	.word	0x08021b51
 8021970:	08021b51 	.word	0x08021b51
 8021974:	08021b51 	.word	0x08021b51
 8021978:	08021b51 	.word	0x08021b51
 802197c:	08021b51 	.word	0x08021b51
 8021980:	08021b51 	.word	0x08021b51
 8021984:	08021b51 	.word	0x08021b51
 8021988:	08021b51 	.word	0x08021b51
 802198c:	08021b51 	.word	0x08021b51
 8021990:	08021b51 	.word	0x08021b51
 8021994:	08021b51 	.word	0x08021b51
 8021998:	08021b51 	.word	0x08021b51
 802199c:	08021b51 	.word	0x08021b51
 80219a0:	08021b51 	.word	0x08021b51
 80219a4:	08021b51 	.word	0x08021b51
 80219a8:	08021b51 	.word	0x08021b51
 80219ac:	08021b51 	.word	0x08021b51
 80219b0:	08021b51 	.word	0x08021b51
 80219b4:	08021b51 	.word	0x08021b51
 80219b8:	08021b51 	.word	0x08021b51
 80219bc:	08021b51 	.word	0x08021b51
 80219c0:	08021b51 	.word	0x08021b51
 80219c4:	08021b51 	.word	0x08021b51
 80219c8:	08021b51 	.word	0x08021b51
 80219cc:	08021a4f 	.word	0x08021a4f
 80219d0:	08021a71 	.word	0x08021a71
 80219d4:	08021aad 	.word	0x08021aad
 80219d8:	08021acf 	.word	0x08021acf
 80219dc:	08021b51 	.word	0x08021b51
 80219e0:	08021b51 	.word	0x08021b51
 80219e4:	08021b51 	.word	0x08021b51
 80219e8:	08021b0d 	.word	0x08021b0d
 80219ec:	08021b2f 	.word	0x08021b2f
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 80219f0:	2300      	movs	r3, #0
 80219f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80219f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80219fa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 80219fe:	e0ab      	b.n	8021b58 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8021a00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021a04:	2b04      	cmp	r3, #4
 8021a06:	d009      	beq.n	8021a1c <dhcp_parse_reply+0x218>
 8021a08:	4b3a      	ldr	r3, [pc, #232]	; (8021af4 <dhcp_parse_reply+0x2f0>)
 8021a0a:	f240 622e 	movw	r2, #1582	; 0x62e
 8021a0e:	493a      	ldr	r1, [pc, #232]	; (8021af8 <dhcp_parse_reply+0x2f4>)
 8021a10:	483a      	ldr	r0, [pc, #232]	; (8021afc <dhcp_parse_reply+0x2f8>)
 8021a12:	f003 fecb 	bl	80257ac <iprintf>
 8021a16:	f06f 0305 	mvn.w	r3, #5
 8021a1a:	e1b0      	b.n	8021d7e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8021a1c:	2306      	movs	r3, #6
 8021a1e:	623b      	str	r3, [r7, #32]
        break;
 8021a20:	e09a      	b.n	8021b58 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8021a22:	2304      	movs	r3, #4
 8021a24:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8021a28:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8021a2c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8021a30:	429a      	cmp	r2, r3
 8021a32:	d209      	bcs.n	8021a48 <dhcp_parse_reply+0x244>
 8021a34:	4b2f      	ldr	r3, [pc, #188]	; (8021af4 <dhcp_parse_reply+0x2f0>)
 8021a36:	f240 6233 	movw	r2, #1587	; 0x633
 8021a3a:	4931      	ldr	r1, [pc, #196]	; (8021b00 <dhcp_parse_reply+0x2fc>)
 8021a3c:	482f      	ldr	r0, [pc, #188]	; (8021afc <dhcp_parse_reply+0x2f8>)
 8021a3e:	f003 feb5 	bl	80257ac <iprintf>
 8021a42:	f06f 0305 	mvn.w	r3, #5
 8021a46:	e19a      	b.n	8021d7e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8021a48:	2307      	movs	r3, #7
 8021a4a:	623b      	str	r3, [r7, #32]
        break;
 8021a4c:	e084      	b.n	8021b58 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8021a4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021a52:	2b04      	cmp	r3, #4
 8021a54:	d009      	beq.n	8021a6a <dhcp_parse_reply+0x266>
 8021a56:	4b27      	ldr	r3, [pc, #156]	; (8021af4 <dhcp_parse_reply+0x2f0>)
 8021a58:	f240 6241 	movw	r2, #1601	; 0x641
 8021a5c:	4926      	ldr	r1, [pc, #152]	; (8021af8 <dhcp_parse_reply+0x2f4>)
 8021a5e:	4827      	ldr	r0, [pc, #156]	; (8021afc <dhcp_parse_reply+0x2f8>)
 8021a60:	f003 fea4 	bl	80257ac <iprintf>
 8021a64:	f06f 0305 	mvn.w	r3, #5
 8021a68:	e189      	b.n	8021d7e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8021a6a:	2303      	movs	r3, #3
 8021a6c:	623b      	str	r3, [r7, #32]
        break;
 8021a6e:	e073      	b.n	8021b58 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8021a70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021a74:	2b01      	cmp	r3, #1
 8021a76:	d009      	beq.n	8021a8c <dhcp_parse_reply+0x288>
 8021a78:	4b1e      	ldr	r3, [pc, #120]	; (8021af4 <dhcp_parse_reply+0x2f0>)
 8021a7a:	f240 624f 	movw	r2, #1615	; 0x64f
 8021a7e:	4921      	ldr	r1, [pc, #132]	; (8021b04 <dhcp_parse_reply+0x300>)
 8021a80:	481e      	ldr	r0, [pc, #120]	; (8021afc <dhcp_parse_reply+0x2f8>)
 8021a82:	f003 fe93 	bl	80257ac <iprintf>
 8021a86:	f06f 0305 	mvn.w	r3, #5
 8021a8a:	e178      	b.n	8021d7e <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8021a8c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8021a8e:	2bf0      	cmp	r3, #240	; 0xf0
 8021a90:	d009      	beq.n	8021aa6 <dhcp_parse_reply+0x2a2>
 8021a92:	4b18      	ldr	r3, [pc, #96]	; (8021af4 <dhcp_parse_reply+0x2f0>)
 8021a94:	f240 6251 	movw	r2, #1617	; 0x651
 8021a98:	491b      	ldr	r1, [pc, #108]	; (8021b08 <dhcp_parse_reply+0x304>)
 8021a9a:	4818      	ldr	r0, [pc, #96]	; (8021afc <dhcp_parse_reply+0x2f8>)
 8021a9c:	f003 fe86 	bl	80257ac <iprintf>
 8021aa0:	f06f 0305 	mvn.w	r3, #5
 8021aa4:	e16b      	b.n	8021d7e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8021aa6:	2300      	movs	r3, #0
 8021aa8:	623b      	str	r3, [r7, #32]
        break;
 8021aaa:	e055      	b.n	8021b58 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8021aac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021ab0:	2b01      	cmp	r3, #1
 8021ab2:	d009      	beq.n	8021ac8 <dhcp_parse_reply+0x2c4>
 8021ab4:	4b0f      	ldr	r3, [pc, #60]	; (8021af4 <dhcp_parse_reply+0x2f0>)
 8021ab6:	f240 6255 	movw	r2, #1621	; 0x655
 8021aba:	4912      	ldr	r1, [pc, #72]	; (8021b04 <dhcp_parse_reply+0x300>)
 8021abc:	480f      	ldr	r0, [pc, #60]	; (8021afc <dhcp_parse_reply+0x2f8>)
 8021abe:	f003 fe75 	bl	80257ac <iprintf>
 8021ac2:	f06f 0305 	mvn.w	r3, #5
 8021ac6:	e15a      	b.n	8021d7e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8021ac8:	2301      	movs	r3, #1
 8021aca:	623b      	str	r3, [r7, #32]
        break;
 8021acc:	e044      	b.n	8021b58 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8021ace:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021ad2:	2b04      	cmp	r3, #4
 8021ad4:	d009      	beq.n	8021aea <dhcp_parse_reply+0x2e6>
 8021ad6:	4b07      	ldr	r3, [pc, #28]	; (8021af4 <dhcp_parse_reply+0x2f0>)
 8021ad8:	f240 6259 	movw	r2, #1625	; 0x659
 8021adc:	4906      	ldr	r1, [pc, #24]	; (8021af8 <dhcp_parse_reply+0x2f4>)
 8021ade:	4807      	ldr	r0, [pc, #28]	; (8021afc <dhcp_parse_reply+0x2f8>)
 8021ae0:	f003 fe64 	bl	80257ac <iprintf>
 8021ae4:	f06f 0305 	mvn.w	r3, #5
 8021ae8:	e149      	b.n	8021d7e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8021aea:	2302      	movs	r3, #2
 8021aec:	623b      	str	r3, [r7, #32]
        break;
 8021aee:	e033      	b.n	8021b58 <dhcp_parse_reply+0x354>
 8021af0:	2001bd28 	.word	0x2001bd28
 8021af4:	0802d788 	.word	0x0802d788
 8021af8:	0802da10 	.word	0x0802da10
 8021afc:	0802d7e8 	.word	0x0802d7e8
 8021b00:	0802da1c 	.word	0x0802da1c
 8021b04:	0802da30 	.word	0x0802da30
 8021b08:	0802da3c 	.word	0x0802da3c
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8021b0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021b10:	2b04      	cmp	r3, #4
 8021b12:	d009      	beq.n	8021b28 <dhcp_parse_reply+0x324>
 8021b14:	4b9c      	ldr	r3, [pc, #624]	; (8021d88 <dhcp_parse_reply+0x584>)
 8021b16:	f240 625d 	movw	r2, #1629	; 0x65d
 8021b1a:	499c      	ldr	r1, [pc, #624]	; (8021d8c <dhcp_parse_reply+0x588>)
 8021b1c:	489c      	ldr	r0, [pc, #624]	; (8021d90 <dhcp_parse_reply+0x58c>)
 8021b1e:	f003 fe45 	bl	80257ac <iprintf>
 8021b22:	f06f 0305 	mvn.w	r3, #5
 8021b26:	e12a      	b.n	8021d7e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 8021b28:	2304      	movs	r3, #4
 8021b2a:	623b      	str	r3, [r7, #32]
        break;
 8021b2c:	e014      	b.n	8021b58 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8021b2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021b32:	2b04      	cmp	r3, #4
 8021b34:	d009      	beq.n	8021b4a <dhcp_parse_reply+0x346>
 8021b36:	4b94      	ldr	r3, [pc, #592]	; (8021d88 <dhcp_parse_reply+0x584>)
 8021b38:	f240 6261 	movw	r2, #1633	; 0x661
 8021b3c:	4993      	ldr	r1, [pc, #588]	; (8021d8c <dhcp_parse_reply+0x588>)
 8021b3e:	4894      	ldr	r0, [pc, #592]	; (8021d90 <dhcp_parse_reply+0x58c>)
 8021b40:	f003 fe34 	bl	80257ac <iprintf>
 8021b44:	f06f 0305 	mvn.w	r3, #5
 8021b48:	e119      	b.n	8021d7e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 8021b4a:	2305      	movs	r3, #5
 8021b4c:	623b      	str	r3, [r7, #32]
        break;
 8021b4e:	e003      	b.n	8021b58 <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 8021b50:	2300      	movs	r3, #0
 8021b52:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8021b56:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8021b58:	7dfb      	ldrb	r3, [r7, #23]
 8021b5a:	2b00      	cmp	r3, #0
 8021b5c:	d103      	bne.n	8021b66 <dhcp_parse_reply+0x362>
      offset++;
 8021b5e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8021b60:	3301      	adds	r3, #1
 8021b62:	877b      	strh	r3, [r7, #58]	; 0x3a
 8021b64:	e0a1      	b.n	8021caa <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8021b66:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8021b68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021b6c:	4413      	add	r3, r2
 8021b6e:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8021b72:	4293      	cmp	r3, r2
 8021b74:	dd02      	ble.n	8021b7c <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 8021b76:	f06f 0301 	mvn.w	r3, #1
 8021b7a:	e100      	b.n	8021d7e <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 8021b7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021b80:	b29a      	uxth	r2, r3
 8021b82:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8021b84:	4413      	add	r3, r2
 8021b86:	b29b      	uxth	r3, r3
 8021b88:	3302      	adds	r3, #2
 8021b8a:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 8021b8c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8021b90:	2b00      	cmp	r3, #0
 8021b92:	f000 808a 	beq.w	8021caa <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 8021b96:	2300      	movs	r3, #0
 8021b98:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8021b9a:	6a3b      	ldr	r3, [r7, #32]
 8021b9c:	2b00      	cmp	r3, #0
 8021b9e:	db02      	blt.n	8021ba6 <dhcp_parse_reply+0x3a2>
 8021ba0:	6a3b      	ldr	r3, [r7, #32]
 8021ba2:	2b07      	cmp	r3, #7
 8021ba4:	dd06      	ble.n	8021bb4 <dhcp_parse_reply+0x3b0>
 8021ba6:	4b78      	ldr	r3, [pc, #480]	; (8021d88 <dhcp_parse_reply+0x584>)
 8021ba8:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8021bac:	4979      	ldr	r1, [pc, #484]	; (8021d94 <dhcp_parse_reply+0x590>)
 8021bae:	4878      	ldr	r0, [pc, #480]	; (8021d90 <dhcp_parse_reply+0x58c>)
 8021bb0:	f003 fdfc 	bl	80257ac <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8021bb4:	4a78      	ldr	r2, [pc, #480]	; (8021d98 <dhcp_parse_reply+0x594>)
 8021bb6:	6a3b      	ldr	r3, [r7, #32]
 8021bb8:	4413      	add	r3, r2
 8021bba:	781b      	ldrb	r3, [r3, #0]
 8021bbc:	2b00      	cmp	r3, #0
 8021bbe:	d174      	bne.n	8021caa <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 8021bc0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8021bc4:	2b04      	cmp	r3, #4
 8021bc6:	bf28      	it	cs
 8021bc8:	2304      	movcs	r3, #4
 8021bca:	b2db      	uxtb	r3, r3
 8021bcc:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8021bce:	8bfb      	ldrh	r3, [r7, #30]
 8021bd0:	8aba      	ldrh	r2, [r7, #20]
 8021bd2:	f107 0108 	add.w	r1, r7, #8
 8021bd6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8021bd8:	f7f7 fc76 	bl	80194c8 <pbuf_copy_partial>
 8021bdc:	4603      	mov	r3, r0
 8021bde:	461a      	mov	r2, r3
 8021be0:	8abb      	ldrh	r3, [r7, #20]
 8021be2:	4293      	cmp	r3, r2
 8021be4:	d002      	beq.n	8021bec <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 8021be6:	f06f 0301 	mvn.w	r3, #1
 8021bea:	e0c8      	b.n	8021d7e <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 8021bec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8021bf0:	2b04      	cmp	r3, #4
 8021bf2:	d933      	bls.n	8021c5c <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8021bf4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8021bf8:	f003 0303 	and.w	r3, r3, #3
 8021bfc:	b2db      	uxtb	r3, r3
 8021bfe:	2b00      	cmp	r3, #0
 8021c00:	d009      	beq.n	8021c16 <dhcp_parse_reply+0x412>
 8021c02:	4b61      	ldr	r3, [pc, #388]	; (8021d88 <dhcp_parse_reply+0x584>)
 8021c04:	f240 6281 	movw	r2, #1665	; 0x681
 8021c08:	4964      	ldr	r1, [pc, #400]	; (8021d9c <dhcp_parse_reply+0x598>)
 8021c0a:	4861      	ldr	r0, [pc, #388]	; (8021d90 <dhcp_parse_reply+0x58c>)
 8021c0c:	f003 fdce 	bl	80257ac <iprintf>
 8021c10:	f06f 0305 	mvn.w	r3, #5
 8021c14:	e0b3      	b.n	8021d7e <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 8021c16:	4a60      	ldr	r2, [pc, #384]	; (8021d98 <dhcp_parse_reply+0x594>)
 8021c18:	6a3b      	ldr	r3, [r7, #32]
 8021c1a:	4413      	add	r3, r2
 8021c1c:	2201      	movs	r2, #1
 8021c1e:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8021c20:	68bb      	ldr	r3, [r7, #8]
 8021c22:	4618      	mov	r0, r3
 8021c24:	f7f5 fe7f 	bl	8017926 <lwip_htonl>
 8021c28:	4602      	mov	r2, r0
 8021c2a:	495d      	ldr	r1, [pc, #372]	; (8021da0 <dhcp_parse_reply+0x59c>)
 8021c2c:	6a3b      	ldr	r3, [r7, #32]
 8021c2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8021c32:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8021c36:	3b04      	subs	r3, #4
 8021c38:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8021c3c:	8bfb      	ldrh	r3, [r7, #30]
 8021c3e:	3304      	adds	r3, #4
 8021c40:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 8021c42:	8a7a      	ldrh	r2, [r7, #18]
 8021c44:	8bfb      	ldrh	r3, [r7, #30]
 8021c46:	429a      	cmp	r2, r3
 8021c48:	d202      	bcs.n	8021c50 <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 8021c4a:	f06f 0301 	mvn.w	r3, #1
 8021c4e:	e096      	b.n	8021d7e <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 8021c50:	8a7b      	ldrh	r3, [r7, #18]
 8021c52:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8021c54:	6a3b      	ldr	r3, [r7, #32]
 8021c56:	3301      	adds	r3, #1
 8021c58:	623b      	str	r3, [r7, #32]
            goto decode_next;
 8021c5a:	e79e      	b.n	8021b9a <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 8021c5c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8021c60:	2b04      	cmp	r3, #4
 8021c62:	d106      	bne.n	8021c72 <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 8021c64:	68bb      	ldr	r3, [r7, #8]
 8021c66:	4618      	mov	r0, r3
 8021c68:	f7f5 fe5d 	bl	8017926 <lwip_htonl>
 8021c6c:	4603      	mov	r3, r0
 8021c6e:	60bb      	str	r3, [r7, #8]
 8021c70:	e011      	b.n	8021c96 <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8021c72:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8021c76:	2b01      	cmp	r3, #1
 8021c78:	d009      	beq.n	8021c8e <dhcp_parse_reply+0x48a>
 8021c7a:	4b43      	ldr	r3, [pc, #268]	; (8021d88 <dhcp_parse_reply+0x584>)
 8021c7c:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8021c80:	4948      	ldr	r1, [pc, #288]	; (8021da4 <dhcp_parse_reply+0x5a0>)
 8021c82:	4843      	ldr	r0, [pc, #268]	; (8021d90 <dhcp_parse_reply+0x58c>)
 8021c84:	f003 fd92 	bl	80257ac <iprintf>
 8021c88:	f06f 0305 	mvn.w	r3, #5
 8021c8c:	e077      	b.n	8021d7e <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 8021c8e:	f107 0308 	add.w	r3, r7, #8
 8021c92:	781b      	ldrb	r3, [r3, #0]
 8021c94:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 8021c96:	4a40      	ldr	r2, [pc, #256]	; (8021d98 <dhcp_parse_reply+0x594>)
 8021c98:	6a3b      	ldr	r3, [r7, #32]
 8021c9a:	4413      	add	r3, r2
 8021c9c:	2201      	movs	r2, #1
 8021c9e:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8021ca0:	68ba      	ldr	r2, [r7, #8]
 8021ca2:	493f      	ldr	r1, [pc, #252]	; (8021da0 <dhcp_parse_reply+0x59c>)
 8021ca4:	6a3b      	ldr	r3, [r7, #32]
 8021ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8021caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021cac:	895b      	ldrh	r3, [r3, #10]
 8021cae:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8021cb0:	429a      	cmp	r2, r3
 8021cb2:	d324      	bcc.n	8021cfe <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 8021cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021cb6:	895b      	ldrh	r3, [r3, #10]
 8021cb8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8021cba:	1ad3      	subs	r3, r2, r3
 8021cbc:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8021cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021cc0:	895b      	ldrh	r3, [r3, #10]
 8021cc2:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8021cc4:	1ad3      	subs	r3, r2, r3
 8021cc6:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 8021cc8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8021cca:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8021ccc:	429a      	cmp	r2, r3
 8021cce:	d213      	bcs.n	8021cf8 <dhcp_parse_reply+0x4f4>
        q = q->next;
 8021cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021cd2:	681b      	ldr	r3, [r3, #0]
 8021cd4:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8021cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021cd8:	2b00      	cmp	r3, #0
 8021cda:	d109      	bne.n	8021cf0 <dhcp_parse_reply+0x4ec>
 8021cdc:	4b2a      	ldr	r3, [pc, #168]	; (8021d88 <dhcp_parse_reply+0x584>)
 8021cde:	f240 629d 	movw	r2, #1693	; 0x69d
 8021ce2:	4931      	ldr	r1, [pc, #196]	; (8021da8 <dhcp_parse_reply+0x5a4>)
 8021ce4:	482a      	ldr	r0, [pc, #168]	; (8021d90 <dhcp_parse_reply+0x58c>)
 8021ce6:	f003 fd61 	bl	80257ac <iprintf>
 8021cea:	f06f 0305 	mvn.w	r3, #5
 8021cee:	e046      	b.n	8021d7e <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 8021cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021cf2:	685b      	ldr	r3, [r3, #4]
 8021cf4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8021cf6:	e002      	b.n	8021cfe <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8021cf8:	f06f 0301 	mvn.w	r3, #1
 8021cfc:	e03f      	b.n	8021d7e <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8021cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021d00:	2b00      	cmp	r3, #0
 8021d02:	d00a      	beq.n	8021d1a <dhcp_parse_reply+0x516>
 8021d04:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8021d06:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8021d08:	429a      	cmp	r2, r3
 8021d0a:	d206      	bcs.n	8021d1a <dhcp_parse_reply+0x516>
 8021d0c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8021d0e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8021d10:	4413      	add	r3, r2
 8021d12:	781b      	ldrb	r3, [r3, #0]
 8021d14:	2bff      	cmp	r3, #255	; 0xff
 8021d16:	f47f adb8 	bne.w	802188a <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8021d1a:	4b1f      	ldr	r3, [pc, #124]	; (8021d98 <dhcp_parse_reply+0x594>)
 8021d1c:	781b      	ldrb	r3, [r3, #0]
 8021d1e:	2b00      	cmp	r3, #0
 8021d20:	d018      	beq.n	8021d54 <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8021d22:	4b1f      	ldr	r3, [pc, #124]	; (8021da0 <dhcp_parse_reply+0x59c>)
 8021d24:	681b      	ldr	r3, [r3, #0]
 8021d26:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8021d28:	4b1b      	ldr	r3, [pc, #108]	; (8021d98 <dhcp_parse_reply+0x594>)
 8021d2a:	2200      	movs	r2, #0
 8021d2c:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8021d2e:	68fb      	ldr	r3, [r7, #12]
 8021d30:	2b01      	cmp	r3, #1
 8021d32:	d102      	bne.n	8021d3a <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 8021d34:	2301      	movs	r3, #1
 8021d36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8021d38:	e00c      	b.n	8021d54 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8021d3a:	68fb      	ldr	r3, [r7, #12]
 8021d3c:	2b02      	cmp	r3, #2
 8021d3e:	d102      	bne.n	8021d46 <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 8021d40:	2301      	movs	r3, #1
 8021d42:	62bb      	str	r3, [r7, #40]	; 0x28
 8021d44:	e006      	b.n	8021d54 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8021d46:	68fb      	ldr	r3, [r7, #12]
 8021d48:	2b03      	cmp	r3, #3
 8021d4a:	d103      	bne.n	8021d54 <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 8021d4c:	2301      	movs	r3, #1
 8021d4e:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 8021d50:	2301      	movs	r3, #1
 8021d52:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8021d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021d56:	2b00      	cmp	r3, #0
 8021d58:	d006      	beq.n	8021d68 <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8021d5a:	2300      	movs	r3, #0
 8021d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 8021d5e:	236c      	movs	r3, #108	; 0x6c
 8021d60:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8021d62:	23ec      	movs	r3, #236	; 0xec
 8021d64:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8021d66:	e56a      	b.n	802183e <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8021d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021d6a:	2b00      	cmp	r3, #0
 8021d6c:	d006      	beq.n	8021d7c <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 8021d6e:	2300      	movs	r3, #0
 8021d70:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 8021d72:	232c      	movs	r3, #44	; 0x2c
 8021d74:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8021d76:	236c      	movs	r3, #108	; 0x6c
 8021d78:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 8021d7a:	e560      	b.n	802183e <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8021d7c:	2300      	movs	r3, #0
}
 8021d7e:	4618      	mov	r0, r3
 8021d80:	3740      	adds	r7, #64	; 0x40
 8021d82:	46bd      	mov	sp, r7
 8021d84:	bd80      	pop	{r7, pc}
 8021d86:	bf00      	nop
 8021d88:	0802d788 	.word	0x0802d788
 8021d8c:	0802da10 	.word	0x0802da10
 8021d90:	0802d7e8 	.word	0x0802d7e8
 8021d94:	0802da54 	.word	0x0802da54
 8021d98:	2001bd28 	.word	0x2001bd28
 8021d9c:	0802da68 	.word	0x0802da68
 8021da0:	2001bd30 	.word	0x2001bd30
 8021da4:	0802da80 	.word	0x0802da80
 8021da8:	0802da94 	.word	0x0802da94

08021dac <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8021dac:	b580      	push	{r7, lr}
 8021dae:	b08a      	sub	sp, #40	; 0x28
 8021db0:	af00      	add	r7, sp, #0
 8021db2:	60f8      	str	r0, [r7, #12]
 8021db4:	60b9      	str	r1, [r7, #8]
 8021db6:	607a      	str	r2, [r7, #4]
 8021db8:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8021dba:	4b60      	ldr	r3, [pc, #384]	; (8021f3c <dhcp_recv+0x190>)
 8021dbc:	685b      	ldr	r3, [r3, #4]
 8021dbe:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8021dc0:	6a3b      	ldr	r3, [r7, #32]
 8021dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021dc4:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8021dc6:	687b      	ldr	r3, [r7, #4]
 8021dc8:	685b      	ldr	r3, [r3, #4]
 8021dca:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8021dcc:	69fb      	ldr	r3, [r7, #28]
 8021dce:	2b00      	cmp	r3, #0
 8021dd0:	f000 809d 	beq.w	8021f0e <dhcp_recv+0x162>
 8021dd4:	69fb      	ldr	r3, [r7, #28]
 8021dd6:	791b      	ldrb	r3, [r3, #4]
 8021dd8:	2b00      	cmp	r3, #0
 8021dda:	f000 8098 	beq.w	8021f0e <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8021dde:	687b      	ldr	r3, [r7, #4]
 8021de0:	895b      	ldrh	r3, [r3, #10]
 8021de2:	2b2b      	cmp	r3, #43	; 0x2b
 8021de4:	f240 8095 	bls.w	8021f12 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8021de8:	69bb      	ldr	r3, [r7, #24]
 8021dea:	781b      	ldrb	r3, [r3, #0]
 8021dec:	2b02      	cmp	r3, #2
 8021dee:	f040 8092 	bne.w	8021f16 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8021df2:	2300      	movs	r3, #0
 8021df4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8021df8:	e012      	b.n	8021e20 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8021dfa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021dfe:	6a3a      	ldr	r2, [r7, #32]
 8021e00:	4413      	add	r3, r2
 8021e02:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8021e06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021e0a:	69b9      	ldr	r1, [r7, #24]
 8021e0c:	440b      	add	r3, r1
 8021e0e:	7f1b      	ldrb	r3, [r3, #28]
 8021e10:	429a      	cmp	r2, r3
 8021e12:	f040 8082 	bne.w	8021f1a <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8021e16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021e1a:	3301      	adds	r3, #1
 8021e1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8021e20:	6a3b      	ldr	r3, [r7, #32]
 8021e22:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8021e26:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8021e2a:	429a      	cmp	r2, r3
 8021e2c:	d203      	bcs.n	8021e36 <dhcp_recv+0x8a>
 8021e2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021e32:	2b05      	cmp	r3, #5
 8021e34:	d9e1      	bls.n	8021dfa <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8021e36:	69bb      	ldr	r3, [r7, #24]
 8021e38:	685b      	ldr	r3, [r3, #4]
 8021e3a:	4618      	mov	r0, r3
 8021e3c:	f7f5 fd73 	bl	8017926 <lwip_htonl>
 8021e40:	4602      	mov	r2, r0
 8021e42:	69fb      	ldr	r3, [r7, #28]
 8021e44:	681b      	ldr	r3, [r3, #0]
 8021e46:	429a      	cmp	r2, r3
 8021e48:	d169      	bne.n	8021f1e <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8021e4a:	69f9      	ldr	r1, [r7, #28]
 8021e4c:	6878      	ldr	r0, [r7, #4]
 8021e4e:	f7ff fcd9 	bl	8021804 <dhcp_parse_reply>
 8021e52:	4603      	mov	r3, r0
 8021e54:	2b00      	cmp	r3, #0
 8021e56:	d164      	bne.n	8021f22 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8021e58:	4b39      	ldr	r3, [pc, #228]	; (8021f40 <dhcp_recv+0x194>)
 8021e5a:	785b      	ldrb	r3, [r3, #1]
 8021e5c:	2b00      	cmp	r3, #0
 8021e5e:	d062      	beq.n	8021f26 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8021e60:	687b      	ldr	r3, [r7, #4]
 8021e62:	685b      	ldr	r3, [r3, #4]
 8021e64:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8021e66:	4b37      	ldr	r3, [pc, #220]	; (8021f44 <dhcp_recv+0x198>)
 8021e68:	685b      	ldr	r3, [r3, #4]
 8021e6a:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8021e6c:	7cfb      	ldrb	r3, [r7, #19]
 8021e6e:	2b05      	cmp	r3, #5
 8021e70:	d12a      	bne.n	8021ec8 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8021e72:	69fb      	ldr	r3, [r7, #28]
 8021e74:	795b      	ldrb	r3, [r3, #5]
 8021e76:	2b01      	cmp	r3, #1
 8021e78:	d112      	bne.n	8021ea0 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 8021e7a:	6979      	ldr	r1, [r7, #20]
 8021e7c:	6a38      	ldr	r0, [r7, #32]
 8021e7e:	f7fe fe17 	bl	8020ab0 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8021e82:	6a3b      	ldr	r3, [r7, #32]
 8021e84:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8021e88:	f003 0308 	and.w	r3, r3, #8
 8021e8c:	2b00      	cmp	r3, #0
 8021e8e:	d003      	beq.n	8021e98 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8021e90:	6a38      	ldr	r0, [r7, #32]
 8021e92:	f7fe fb87 	bl	80205a4 <dhcp_check>
 8021e96:	e049      	b.n	8021f2c <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8021e98:	6a38      	ldr	r0, [r7, #32]
 8021e9a:	f7ff f867 	bl	8020f6c <dhcp_bind>
 8021e9e:	e045      	b.n	8021f2c <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8021ea0:	69fb      	ldr	r3, [r7, #28]
 8021ea2:	795b      	ldrb	r3, [r3, #5]
 8021ea4:	2b03      	cmp	r3, #3
 8021ea6:	d007      	beq.n	8021eb8 <dhcp_recv+0x10c>
 8021ea8:	69fb      	ldr	r3, [r7, #28]
 8021eaa:	795b      	ldrb	r3, [r3, #5]
 8021eac:	2b04      	cmp	r3, #4
 8021eae:	d003      	beq.n	8021eb8 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8021eb0:	69fb      	ldr	r3, [r7, #28]
 8021eb2:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8021eb4:	2b05      	cmp	r3, #5
 8021eb6:	d139      	bne.n	8021f2c <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 8021eb8:	6979      	ldr	r1, [r7, #20]
 8021eba:	6a38      	ldr	r0, [r7, #32]
 8021ebc:	f7fe fdf8 	bl	8020ab0 <dhcp_handle_ack>
      dhcp_bind(netif);
 8021ec0:	6a38      	ldr	r0, [r7, #32]
 8021ec2:	f7ff f853 	bl	8020f6c <dhcp_bind>
 8021ec6:	e031      	b.n	8021f2c <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8021ec8:	7cfb      	ldrb	r3, [r7, #19]
 8021eca:	2b06      	cmp	r3, #6
 8021ecc:	d113      	bne.n	8021ef6 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8021ece:	69fb      	ldr	r3, [r7, #28]
 8021ed0:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8021ed2:	2b03      	cmp	r3, #3
 8021ed4:	d00b      	beq.n	8021eee <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8021ed6:	69fb      	ldr	r3, [r7, #28]
 8021ed8:	795b      	ldrb	r3, [r3, #5]
 8021eda:	2b01      	cmp	r3, #1
 8021edc:	d007      	beq.n	8021eee <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8021ede:	69fb      	ldr	r3, [r7, #28]
 8021ee0:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8021ee2:	2b04      	cmp	r3, #4
 8021ee4:	d003      	beq.n	8021eee <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8021ee6:	69fb      	ldr	r3, [r7, #28]
 8021ee8:	795b      	ldrb	r3, [r3, #5]
 8021eea:	2b05      	cmp	r3, #5
 8021eec:	d103      	bne.n	8021ef6 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 8021eee:	6a38      	ldr	r0, [r7, #32]
 8021ef0:	f7fe fb3e 	bl	8020570 <dhcp_handle_nak>
 8021ef4:	e01a      	b.n	8021f2c <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8021ef6:	7cfb      	ldrb	r3, [r7, #19]
 8021ef8:	2b02      	cmp	r3, #2
 8021efa:	d116      	bne.n	8021f2a <dhcp_recv+0x17e>
 8021efc:	69fb      	ldr	r3, [r7, #28]
 8021efe:	795b      	ldrb	r3, [r3, #5]
 8021f00:	2b06      	cmp	r3, #6
 8021f02:	d112      	bne.n	8021f2a <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8021f04:	6979      	ldr	r1, [r7, #20]
 8021f06:	6a38      	ldr	r0, [r7, #32]
 8021f08:	f7fe fb80 	bl	802060c <dhcp_handle_offer>
 8021f0c:	e00e      	b.n	8021f2c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8021f0e:	bf00      	nop
 8021f10:	e00c      	b.n	8021f2c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8021f12:	bf00      	nop
 8021f14:	e00a      	b.n	8021f2c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8021f16:	bf00      	nop
 8021f18:	e008      	b.n	8021f2c <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 8021f1a:	bf00      	nop
 8021f1c:	e006      	b.n	8021f2c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8021f1e:	bf00      	nop
 8021f20:	e004      	b.n	8021f2c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8021f22:	bf00      	nop
 8021f24:	e002      	b.n	8021f2c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8021f26:	bf00      	nop
 8021f28:	e000      	b.n	8021f2c <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 8021f2a:	bf00      	nop
  pbuf_free(p);
 8021f2c:	6878      	ldr	r0, [r7, #4]
 8021f2e:	f7f7 f8c5 	bl	80190bc <pbuf_free>
}
 8021f32:	bf00      	nop
 8021f34:	3728      	adds	r7, #40	; 0x28
 8021f36:	46bd      	mov	sp, r7
 8021f38:	bd80      	pop	{r7, pc}
 8021f3a:	bf00      	nop
 8021f3c:	20017778 	.word	0x20017778
 8021f40:	2001bd28 	.word	0x2001bd28
 8021f44:	2001bd30 	.word	0x2001bd30

08021f48 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8021f48:	b580      	push	{r7, lr}
 8021f4a:	b088      	sub	sp, #32
 8021f4c:	af00      	add	r7, sp, #0
 8021f4e:	60f8      	str	r0, [r7, #12]
 8021f50:	60b9      	str	r1, [r7, #8]
 8021f52:	603b      	str	r3, [r7, #0]
 8021f54:	4613      	mov	r3, r2
 8021f56:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8021f58:	68fb      	ldr	r3, [r7, #12]
 8021f5a:	2b00      	cmp	r3, #0
 8021f5c:	d108      	bne.n	8021f70 <dhcp_create_msg+0x28>
 8021f5e:	4b5f      	ldr	r3, [pc, #380]	; (80220dc <dhcp_create_msg+0x194>)
 8021f60:	f240 7269 	movw	r2, #1897	; 0x769
 8021f64:	495e      	ldr	r1, [pc, #376]	; (80220e0 <dhcp_create_msg+0x198>)
 8021f66:	485f      	ldr	r0, [pc, #380]	; (80220e4 <dhcp_create_msg+0x19c>)
 8021f68:	f003 fc20 	bl	80257ac <iprintf>
 8021f6c:	2300      	movs	r3, #0
 8021f6e:	e0b1      	b.n	80220d4 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8021f70:	68bb      	ldr	r3, [r7, #8]
 8021f72:	2b00      	cmp	r3, #0
 8021f74:	d108      	bne.n	8021f88 <dhcp_create_msg+0x40>
 8021f76:	4b59      	ldr	r3, [pc, #356]	; (80220dc <dhcp_create_msg+0x194>)
 8021f78:	f240 726a 	movw	r2, #1898	; 0x76a
 8021f7c:	495a      	ldr	r1, [pc, #360]	; (80220e8 <dhcp_create_msg+0x1a0>)
 8021f7e:	4859      	ldr	r0, [pc, #356]	; (80220e4 <dhcp_create_msg+0x19c>)
 8021f80:	f003 fc14 	bl	80257ac <iprintf>
 8021f84:	2300      	movs	r3, #0
 8021f86:	e0a5      	b.n	80220d4 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8021f88:	f44f 7220 	mov.w	r2, #640	; 0x280
 8021f8c:	f44f 719a 	mov.w	r1, #308	; 0x134
 8021f90:	2036      	movs	r0, #54	; 0x36
 8021f92:	f7f6 fdaf 	bl	8018af4 <pbuf_alloc>
 8021f96:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8021f98:	69bb      	ldr	r3, [r7, #24]
 8021f9a:	2b00      	cmp	r3, #0
 8021f9c:	d101      	bne.n	8021fa2 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 8021f9e:	2300      	movs	r3, #0
 8021fa0:	e098      	b.n	80220d4 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8021fa2:	69bb      	ldr	r3, [r7, #24]
 8021fa4:	895b      	ldrh	r3, [r3, #10]
 8021fa6:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8021faa:	d206      	bcs.n	8021fba <dhcp_create_msg+0x72>
 8021fac:	4b4b      	ldr	r3, [pc, #300]	; (80220dc <dhcp_create_msg+0x194>)
 8021fae:	f240 7271 	movw	r2, #1905	; 0x771
 8021fb2:	494e      	ldr	r1, [pc, #312]	; (80220ec <dhcp_create_msg+0x1a4>)
 8021fb4:	484b      	ldr	r0, [pc, #300]	; (80220e4 <dhcp_create_msg+0x19c>)
 8021fb6:	f003 fbf9 	bl	80257ac <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8021fba:	79fb      	ldrb	r3, [r7, #7]
 8021fbc:	2b03      	cmp	r3, #3
 8021fbe:	d103      	bne.n	8021fc8 <dhcp_create_msg+0x80>
 8021fc0:	68bb      	ldr	r3, [r7, #8]
 8021fc2:	795b      	ldrb	r3, [r3, #5]
 8021fc4:	2b03      	cmp	r3, #3
 8021fc6:	d10d      	bne.n	8021fe4 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8021fc8:	68bb      	ldr	r3, [r7, #8]
 8021fca:	799b      	ldrb	r3, [r3, #6]
 8021fcc:	2b00      	cmp	r3, #0
 8021fce:	d105      	bne.n	8021fdc <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8021fd0:	f003 fc7a 	bl	80258c8 <rand>
 8021fd4:	4603      	mov	r3, r0
 8021fd6:	461a      	mov	r2, r3
 8021fd8:	4b45      	ldr	r3, [pc, #276]	; (80220f0 <dhcp_create_msg+0x1a8>)
 8021fda:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8021fdc:	4b44      	ldr	r3, [pc, #272]	; (80220f0 <dhcp_create_msg+0x1a8>)
 8021fde:	681a      	ldr	r2, [r3, #0]
 8021fe0:	68bb      	ldr	r3, [r7, #8]
 8021fe2:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8021fe4:	69bb      	ldr	r3, [r7, #24]
 8021fe6:	685b      	ldr	r3, [r3, #4]
 8021fe8:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8021fea:	f44f 729a 	mov.w	r2, #308	; 0x134
 8021fee:	2100      	movs	r1, #0
 8021ff0:	6978      	ldr	r0, [r7, #20]
 8021ff2:	f002 fd2f 	bl	8024a54 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8021ff6:	697b      	ldr	r3, [r7, #20]
 8021ff8:	2201      	movs	r2, #1
 8021ffa:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8021ffc:	697b      	ldr	r3, [r7, #20]
 8021ffe:	2201      	movs	r2, #1
 8022000:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 8022002:	68fb      	ldr	r3, [r7, #12]
 8022004:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8022008:	697b      	ldr	r3, [r7, #20]
 802200a:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 802200c:	68bb      	ldr	r3, [r7, #8]
 802200e:	681b      	ldr	r3, [r3, #0]
 8022010:	4618      	mov	r0, r3
 8022012:	f7f5 fc88 	bl	8017926 <lwip_htonl>
 8022016:	4602      	mov	r2, r0
 8022018:	697b      	ldr	r3, [r7, #20]
 802201a:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 802201c:	79fb      	ldrb	r3, [r7, #7]
 802201e:	2b08      	cmp	r3, #8
 8022020:	d010      	beq.n	8022044 <dhcp_create_msg+0xfc>
 8022022:	79fb      	ldrb	r3, [r7, #7]
 8022024:	2b04      	cmp	r3, #4
 8022026:	d00d      	beq.n	8022044 <dhcp_create_msg+0xfc>
 8022028:	79fb      	ldrb	r3, [r7, #7]
 802202a:	2b07      	cmp	r3, #7
 802202c:	d00a      	beq.n	8022044 <dhcp_create_msg+0xfc>
 802202e:	79fb      	ldrb	r3, [r7, #7]
 8022030:	2b03      	cmp	r3, #3
 8022032:	d10c      	bne.n	802204e <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8022034:	68bb      	ldr	r3, [r7, #8]
 8022036:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8022038:	2b05      	cmp	r3, #5
 802203a:	d003      	beq.n	8022044 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 802203c:	68bb      	ldr	r3, [r7, #8]
 802203e:	795b      	ldrb	r3, [r3, #5]
 8022040:	2b04      	cmp	r3, #4
 8022042:	d104      	bne.n	802204e <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8022044:	68fb      	ldr	r3, [r7, #12]
 8022046:	3304      	adds	r3, #4
 8022048:	681a      	ldr	r2, [r3, #0]
 802204a:	697b      	ldr	r3, [r7, #20]
 802204c:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 802204e:	2300      	movs	r3, #0
 8022050:	83fb      	strh	r3, [r7, #30]
 8022052:	e00c      	b.n	802206e <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8022054:	8bfa      	ldrh	r2, [r7, #30]
 8022056:	8bfb      	ldrh	r3, [r7, #30]
 8022058:	68f9      	ldr	r1, [r7, #12]
 802205a:	440a      	add	r2, r1
 802205c:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 8022060:	697a      	ldr	r2, [r7, #20]
 8022062:	4413      	add	r3, r2
 8022064:	460a      	mov	r2, r1
 8022066:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8022068:	8bfb      	ldrh	r3, [r7, #30]
 802206a:	3301      	adds	r3, #1
 802206c:	83fb      	strh	r3, [r7, #30]
 802206e:	8bfb      	ldrh	r3, [r7, #30]
 8022070:	2b05      	cmp	r3, #5
 8022072:	d9ef      	bls.n	8022054 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8022074:	697b      	ldr	r3, [r7, #20]
 8022076:	2200      	movs	r2, #0
 8022078:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 802207c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8022080:	2200      	movs	r2, #0
 8022082:	f062 027d 	orn	r2, r2, #125	; 0x7d
 8022086:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 802208a:	2200      	movs	r2, #0
 802208c:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8022090:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8022094:	2200      	movs	r2, #0
 8022096:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 802209a:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 802209e:	697b      	ldr	r3, [r7, #20]
 80220a0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80220a4:	2301      	movs	r3, #1
 80220a6:	2235      	movs	r2, #53	; 0x35
 80220a8:	2000      	movs	r0, #0
 80220aa:	f7ff fadb 	bl	8021664 <dhcp_option>
 80220ae:	4603      	mov	r3, r0
 80220b0:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 80220b2:	697b      	ldr	r3, [r7, #20]
 80220b4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80220b8:	79fa      	ldrb	r2, [r7, #7]
 80220ba:	8a7b      	ldrh	r3, [r7, #18]
 80220bc:	4618      	mov	r0, r3
 80220be:	f7ff fb05 	bl	80216cc <dhcp_option_byte>
 80220c2:	4603      	mov	r3, r0
 80220c4:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 80220c6:	683b      	ldr	r3, [r7, #0]
 80220c8:	2b00      	cmp	r3, #0
 80220ca:	d002      	beq.n	80220d2 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 80220cc:	683b      	ldr	r3, [r7, #0]
 80220ce:	8a7a      	ldrh	r2, [r7, #18]
 80220d0:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 80220d2:	69bb      	ldr	r3, [r7, #24]
}
 80220d4:	4618      	mov	r0, r3
 80220d6:	3720      	adds	r7, #32
 80220d8:	46bd      	mov	sp, r7
 80220da:	bd80      	pop	{r7, pc}
 80220dc:	0802d788 	.word	0x0802d788
 80220e0:	0802daa8 	.word	0x0802daa8
 80220e4:	0802d7e8 	.word	0x0802d7e8
 80220e8:	0802dac8 	.word	0x0802dac8
 80220ec:	0802dae8 	.word	0x0802dae8
 80220f0:	20013828 	.word	0x20013828

080220f4 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 80220f4:	b580      	push	{r7, lr}
 80220f6:	b084      	sub	sp, #16
 80220f8:	af00      	add	r7, sp, #0
 80220fa:	4603      	mov	r3, r0
 80220fc:	60b9      	str	r1, [r7, #8]
 80220fe:	607a      	str	r2, [r7, #4]
 8022100:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 8022102:	89fb      	ldrh	r3, [r7, #14]
 8022104:	1c5a      	adds	r2, r3, #1
 8022106:	81fa      	strh	r2, [r7, #14]
 8022108:	461a      	mov	r2, r3
 802210a:	68bb      	ldr	r3, [r7, #8]
 802210c:	4413      	add	r3, r2
 802210e:	22ff      	movs	r2, #255	; 0xff
 8022110:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8022112:	e007      	b.n	8022124 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8022114:	89fb      	ldrh	r3, [r7, #14]
 8022116:	1c5a      	adds	r2, r3, #1
 8022118:	81fa      	strh	r2, [r7, #14]
 802211a:	461a      	mov	r2, r3
 802211c:	68bb      	ldr	r3, [r7, #8]
 802211e:	4413      	add	r3, r2
 8022120:	2200      	movs	r2, #0
 8022122:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8022124:	89fb      	ldrh	r3, [r7, #14]
 8022126:	2b43      	cmp	r3, #67	; 0x43
 8022128:	d904      	bls.n	8022134 <dhcp_option_trailer+0x40>
 802212a:	89fb      	ldrh	r3, [r7, #14]
 802212c:	f003 0303 	and.w	r3, r3, #3
 8022130:	2b00      	cmp	r3, #0
 8022132:	d002      	beq.n	802213a <dhcp_option_trailer+0x46>
 8022134:	89fb      	ldrh	r3, [r7, #14]
 8022136:	2b43      	cmp	r3, #67	; 0x43
 8022138:	d9ec      	bls.n	8022114 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 802213a:	89fb      	ldrh	r3, [r7, #14]
 802213c:	33f0      	adds	r3, #240	; 0xf0
 802213e:	b29b      	uxth	r3, r3
 8022140:	4619      	mov	r1, r3
 8022142:	6878      	ldr	r0, [r7, #4]
 8022144:	f7f6 fe34 	bl	8018db0 <pbuf_realloc>
}
 8022148:	bf00      	nop
 802214a:	3710      	adds	r7, #16
 802214c:	46bd      	mov	sp, r7
 802214e:	bd80      	pop	{r7, pc}

08022150 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8022150:	b480      	push	{r7}
 8022152:	b085      	sub	sp, #20
 8022154:	af00      	add	r7, sp, #0
 8022156:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8022158:	687b      	ldr	r3, [r7, #4]
 802215a:	2b00      	cmp	r3, #0
 802215c:	d017      	beq.n	802218e <dhcp_supplied_address+0x3e>
 802215e:	687b      	ldr	r3, [r7, #4]
 8022160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022162:	2b00      	cmp	r3, #0
 8022164:	d013      	beq.n	802218e <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8022166:	687b      	ldr	r3, [r7, #4]
 8022168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802216a:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 802216c:	68fb      	ldr	r3, [r7, #12]
 802216e:	795b      	ldrb	r3, [r3, #5]
 8022170:	2b0a      	cmp	r3, #10
 8022172:	d007      	beq.n	8022184 <dhcp_supplied_address+0x34>
 8022174:	68fb      	ldr	r3, [r7, #12]
 8022176:	795b      	ldrb	r3, [r3, #5]
 8022178:	2b05      	cmp	r3, #5
 802217a:	d003      	beq.n	8022184 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 802217c:	68fb      	ldr	r3, [r7, #12]
 802217e:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8022180:	2b04      	cmp	r3, #4
 8022182:	d101      	bne.n	8022188 <dhcp_supplied_address+0x38>
 8022184:	2301      	movs	r3, #1
 8022186:	e000      	b.n	802218a <dhcp_supplied_address+0x3a>
 8022188:	2300      	movs	r3, #0
 802218a:	b2db      	uxtb	r3, r3
 802218c:	e000      	b.n	8022190 <dhcp_supplied_address+0x40>
  }
  return 0;
 802218e:	2300      	movs	r3, #0
}
 8022190:	4618      	mov	r0, r3
 8022192:	3714      	adds	r7, #20
 8022194:	46bd      	mov	sp, r7
 8022196:	f85d 7b04 	ldr.w	r7, [sp], #4
 802219a:	4770      	bx	lr

0802219c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 802219c:	b580      	push	{r7, lr}
 802219e:	b082      	sub	sp, #8
 80221a0:	af00      	add	r7, sp, #0
 80221a2:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80221a4:	4915      	ldr	r1, [pc, #84]	; (80221fc <etharp_free_entry+0x60>)
 80221a6:	687a      	ldr	r2, [r7, #4]
 80221a8:	4613      	mov	r3, r2
 80221aa:	005b      	lsls	r3, r3, #1
 80221ac:	4413      	add	r3, r2
 80221ae:	00db      	lsls	r3, r3, #3
 80221b0:	440b      	add	r3, r1
 80221b2:	681b      	ldr	r3, [r3, #0]
 80221b4:	2b00      	cmp	r3, #0
 80221b6:	d013      	beq.n	80221e0 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80221b8:	4910      	ldr	r1, [pc, #64]	; (80221fc <etharp_free_entry+0x60>)
 80221ba:	687a      	ldr	r2, [r7, #4]
 80221bc:	4613      	mov	r3, r2
 80221be:	005b      	lsls	r3, r3, #1
 80221c0:	4413      	add	r3, r2
 80221c2:	00db      	lsls	r3, r3, #3
 80221c4:	440b      	add	r3, r1
 80221c6:	681b      	ldr	r3, [r3, #0]
 80221c8:	4618      	mov	r0, r3
 80221ca:	f7f6 ff77 	bl	80190bc <pbuf_free>
    arp_table[i].q = NULL;
 80221ce:	490b      	ldr	r1, [pc, #44]	; (80221fc <etharp_free_entry+0x60>)
 80221d0:	687a      	ldr	r2, [r7, #4]
 80221d2:	4613      	mov	r3, r2
 80221d4:	005b      	lsls	r3, r3, #1
 80221d6:	4413      	add	r3, r2
 80221d8:	00db      	lsls	r3, r3, #3
 80221da:	440b      	add	r3, r1
 80221dc:	2200      	movs	r2, #0
 80221de:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80221e0:	4906      	ldr	r1, [pc, #24]	; (80221fc <etharp_free_entry+0x60>)
 80221e2:	687a      	ldr	r2, [r7, #4]
 80221e4:	4613      	mov	r3, r2
 80221e6:	005b      	lsls	r3, r3, #1
 80221e8:	4413      	add	r3, r2
 80221ea:	00db      	lsls	r3, r3, #3
 80221ec:	440b      	add	r3, r1
 80221ee:	3314      	adds	r3, #20
 80221f0:	2200      	movs	r2, #0
 80221f2:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80221f4:	bf00      	nop
 80221f6:	3708      	adds	r7, #8
 80221f8:	46bd      	mov	sp, r7
 80221fa:	bd80      	pop	{r7, pc}
 80221fc:	2001382c 	.word	0x2001382c

08022200 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8022200:	b580      	push	{r7, lr}
 8022202:	b082      	sub	sp, #8
 8022204:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8022206:	2300      	movs	r3, #0
 8022208:	607b      	str	r3, [r7, #4]
 802220a:	e096      	b.n	802233a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 802220c:	494f      	ldr	r1, [pc, #316]	; (802234c <etharp_tmr+0x14c>)
 802220e:	687a      	ldr	r2, [r7, #4]
 8022210:	4613      	mov	r3, r2
 8022212:	005b      	lsls	r3, r3, #1
 8022214:	4413      	add	r3, r2
 8022216:	00db      	lsls	r3, r3, #3
 8022218:	440b      	add	r3, r1
 802221a:	3314      	adds	r3, #20
 802221c:	781b      	ldrb	r3, [r3, #0]
 802221e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8022220:	78fb      	ldrb	r3, [r7, #3]
 8022222:	2b00      	cmp	r3, #0
 8022224:	f000 8086 	beq.w	8022334 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8022228:	4948      	ldr	r1, [pc, #288]	; (802234c <etharp_tmr+0x14c>)
 802222a:	687a      	ldr	r2, [r7, #4]
 802222c:	4613      	mov	r3, r2
 802222e:	005b      	lsls	r3, r3, #1
 8022230:	4413      	add	r3, r2
 8022232:	00db      	lsls	r3, r3, #3
 8022234:	440b      	add	r3, r1
 8022236:	3312      	adds	r3, #18
 8022238:	881b      	ldrh	r3, [r3, #0]
 802223a:	3301      	adds	r3, #1
 802223c:	b298      	uxth	r0, r3
 802223e:	4943      	ldr	r1, [pc, #268]	; (802234c <etharp_tmr+0x14c>)
 8022240:	687a      	ldr	r2, [r7, #4]
 8022242:	4613      	mov	r3, r2
 8022244:	005b      	lsls	r3, r3, #1
 8022246:	4413      	add	r3, r2
 8022248:	00db      	lsls	r3, r3, #3
 802224a:	440b      	add	r3, r1
 802224c:	3312      	adds	r3, #18
 802224e:	4602      	mov	r2, r0
 8022250:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8022252:	493e      	ldr	r1, [pc, #248]	; (802234c <etharp_tmr+0x14c>)
 8022254:	687a      	ldr	r2, [r7, #4]
 8022256:	4613      	mov	r3, r2
 8022258:	005b      	lsls	r3, r3, #1
 802225a:	4413      	add	r3, r2
 802225c:	00db      	lsls	r3, r3, #3
 802225e:	440b      	add	r3, r1
 8022260:	3312      	adds	r3, #18
 8022262:	881b      	ldrh	r3, [r3, #0]
 8022264:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8022268:	d215      	bcs.n	8022296 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 802226a:	4938      	ldr	r1, [pc, #224]	; (802234c <etharp_tmr+0x14c>)
 802226c:	687a      	ldr	r2, [r7, #4]
 802226e:	4613      	mov	r3, r2
 8022270:	005b      	lsls	r3, r3, #1
 8022272:	4413      	add	r3, r2
 8022274:	00db      	lsls	r3, r3, #3
 8022276:	440b      	add	r3, r1
 8022278:	3314      	adds	r3, #20
 802227a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 802227c:	2b01      	cmp	r3, #1
 802227e:	d10e      	bne.n	802229e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8022280:	4932      	ldr	r1, [pc, #200]	; (802234c <etharp_tmr+0x14c>)
 8022282:	687a      	ldr	r2, [r7, #4]
 8022284:	4613      	mov	r3, r2
 8022286:	005b      	lsls	r3, r3, #1
 8022288:	4413      	add	r3, r2
 802228a:	00db      	lsls	r3, r3, #3
 802228c:	440b      	add	r3, r1
 802228e:	3312      	adds	r3, #18
 8022290:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8022292:	2b04      	cmp	r3, #4
 8022294:	d903      	bls.n	802229e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8022296:	6878      	ldr	r0, [r7, #4]
 8022298:	f7ff ff80 	bl	802219c <etharp_free_entry>
 802229c:	e04a      	b.n	8022334 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 802229e:	492b      	ldr	r1, [pc, #172]	; (802234c <etharp_tmr+0x14c>)
 80222a0:	687a      	ldr	r2, [r7, #4]
 80222a2:	4613      	mov	r3, r2
 80222a4:	005b      	lsls	r3, r3, #1
 80222a6:	4413      	add	r3, r2
 80222a8:	00db      	lsls	r3, r3, #3
 80222aa:	440b      	add	r3, r1
 80222ac:	3314      	adds	r3, #20
 80222ae:	781b      	ldrb	r3, [r3, #0]
 80222b0:	2b03      	cmp	r3, #3
 80222b2:	d10a      	bne.n	80222ca <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80222b4:	4925      	ldr	r1, [pc, #148]	; (802234c <etharp_tmr+0x14c>)
 80222b6:	687a      	ldr	r2, [r7, #4]
 80222b8:	4613      	mov	r3, r2
 80222ba:	005b      	lsls	r3, r3, #1
 80222bc:	4413      	add	r3, r2
 80222be:	00db      	lsls	r3, r3, #3
 80222c0:	440b      	add	r3, r1
 80222c2:	3314      	adds	r3, #20
 80222c4:	2204      	movs	r2, #4
 80222c6:	701a      	strb	r2, [r3, #0]
 80222c8:	e034      	b.n	8022334 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80222ca:	4920      	ldr	r1, [pc, #128]	; (802234c <etharp_tmr+0x14c>)
 80222cc:	687a      	ldr	r2, [r7, #4]
 80222ce:	4613      	mov	r3, r2
 80222d0:	005b      	lsls	r3, r3, #1
 80222d2:	4413      	add	r3, r2
 80222d4:	00db      	lsls	r3, r3, #3
 80222d6:	440b      	add	r3, r1
 80222d8:	3314      	adds	r3, #20
 80222da:	781b      	ldrb	r3, [r3, #0]
 80222dc:	2b04      	cmp	r3, #4
 80222de:	d10a      	bne.n	80222f6 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80222e0:	491a      	ldr	r1, [pc, #104]	; (802234c <etharp_tmr+0x14c>)
 80222e2:	687a      	ldr	r2, [r7, #4]
 80222e4:	4613      	mov	r3, r2
 80222e6:	005b      	lsls	r3, r3, #1
 80222e8:	4413      	add	r3, r2
 80222ea:	00db      	lsls	r3, r3, #3
 80222ec:	440b      	add	r3, r1
 80222ee:	3314      	adds	r3, #20
 80222f0:	2202      	movs	r2, #2
 80222f2:	701a      	strb	r2, [r3, #0]
 80222f4:	e01e      	b.n	8022334 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80222f6:	4915      	ldr	r1, [pc, #84]	; (802234c <etharp_tmr+0x14c>)
 80222f8:	687a      	ldr	r2, [r7, #4]
 80222fa:	4613      	mov	r3, r2
 80222fc:	005b      	lsls	r3, r3, #1
 80222fe:	4413      	add	r3, r2
 8022300:	00db      	lsls	r3, r3, #3
 8022302:	440b      	add	r3, r1
 8022304:	3314      	adds	r3, #20
 8022306:	781b      	ldrb	r3, [r3, #0]
 8022308:	2b01      	cmp	r3, #1
 802230a:	d113      	bne.n	8022334 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 802230c:	490f      	ldr	r1, [pc, #60]	; (802234c <etharp_tmr+0x14c>)
 802230e:	687a      	ldr	r2, [r7, #4]
 8022310:	4613      	mov	r3, r2
 8022312:	005b      	lsls	r3, r3, #1
 8022314:	4413      	add	r3, r2
 8022316:	00db      	lsls	r3, r3, #3
 8022318:	440b      	add	r3, r1
 802231a:	3308      	adds	r3, #8
 802231c:	6818      	ldr	r0, [r3, #0]
 802231e:	687a      	ldr	r2, [r7, #4]
 8022320:	4613      	mov	r3, r2
 8022322:	005b      	lsls	r3, r3, #1
 8022324:	4413      	add	r3, r2
 8022326:	00db      	lsls	r3, r3, #3
 8022328:	4a08      	ldr	r2, [pc, #32]	; (802234c <etharp_tmr+0x14c>)
 802232a:	4413      	add	r3, r2
 802232c:	3304      	adds	r3, #4
 802232e:	4619      	mov	r1, r3
 8022330:	f000 fe72 	bl	8023018 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8022334:	687b      	ldr	r3, [r7, #4]
 8022336:	3301      	adds	r3, #1
 8022338:	607b      	str	r3, [r7, #4]
 802233a:	687b      	ldr	r3, [r7, #4]
 802233c:	2b09      	cmp	r3, #9
 802233e:	f77f af65 	ble.w	802220c <etharp_tmr+0xc>
      }
    }
  }
}
 8022342:	bf00      	nop
 8022344:	bf00      	nop
 8022346:	3708      	adds	r7, #8
 8022348:	46bd      	mov	sp, r7
 802234a:	bd80      	pop	{r7, pc}
 802234c:	2001382c 	.word	0x2001382c

08022350 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8022350:	b580      	push	{r7, lr}
 8022352:	b08a      	sub	sp, #40	; 0x28
 8022354:	af00      	add	r7, sp, #0
 8022356:	60f8      	str	r0, [r7, #12]
 8022358:	460b      	mov	r3, r1
 802235a:	607a      	str	r2, [r7, #4]
 802235c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 802235e:	230a      	movs	r3, #10
 8022360:	84fb      	strh	r3, [r7, #38]	; 0x26
 8022362:	230a      	movs	r3, #10
 8022364:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8022366:	230a      	movs	r3, #10
 8022368:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 802236a:	2300      	movs	r3, #0
 802236c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 802236e:	230a      	movs	r3, #10
 8022370:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8022372:	2300      	movs	r3, #0
 8022374:	83bb      	strh	r3, [r7, #28]
 8022376:	2300      	movs	r3, #0
 8022378:	837b      	strh	r3, [r7, #26]
 802237a:	2300      	movs	r3, #0
 802237c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 802237e:	2300      	movs	r3, #0
 8022380:	843b      	strh	r3, [r7, #32]
 8022382:	e0ae      	b.n	80224e2 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8022384:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8022388:	49a6      	ldr	r1, [pc, #664]	; (8022624 <etharp_find_entry+0x2d4>)
 802238a:	4613      	mov	r3, r2
 802238c:	005b      	lsls	r3, r3, #1
 802238e:	4413      	add	r3, r2
 8022390:	00db      	lsls	r3, r3, #3
 8022392:	440b      	add	r3, r1
 8022394:	3314      	adds	r3, #20
 8022396:	781b      	ldrb	r3, [r3, #0]
 8022398:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 802239a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 802239e:	2b0a      	cmp	r3, #10
 80223a0:	d105      	bne.n	80223ae <etharp_find_entry+0x5e>
 80223a2:	7dfb      	ldrb	r3, [r7, #23]
 80223a4:	2b00      	cmp	r3, #0
 80223a6:	d102      	bne.n	80223ae <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80223a8:	8c3b      	ldrh	r3, [r7, #32]
 80223aa:	847b      	strh	r3, [r7, #34]	; 0x22
 80223ac:	e095      	b.n	80224da <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80223ae:	7dfb      	ldrb	r3, [r7, #23]
 80223b0:	2b00      	cmp	r3, #0
 80223b2:	f000 8092 	beq.w	80224da <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80223b6:	7dfb      	ldrb	r3, [r7, #23]
 80223b8:	2b01      	cmp	r3, #1
 80223ba:	d009      	beq.n	80223d0 <etharp_find_entry+0x80>
 80223bc:	7dfb      	ldrb	r3, [r7, #23]
 80223be:	2b01      	cmp	r3, #1
 80223c0:	d806      	bhi.n	80223d0 <etharp_find_entry+0x80>
 80223c2:	4b99      	ldr	r3, [pc, #612]	; (8022628 <etharp_find_entry+0x2d8>)
 80223c4:	f240 1223 	movw	r2, #291	; 0x123
 80223c8:	4998      	ldr	r1, [pc, #608]	; (802262c <etharp_find_entry+0x2dc>)
 80223ca:	4899      	ldr	r0, [pc, #612]	; (8022630 <etharp_find_entry+0x2e0>)
 80223cc:	f003 f9ee 	bl	80257ac <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80223d0:	68fb      	ldr	r3, [r7, #12]
 80223d2:	2b00      	cmp	r3, #0
 80223d4:	d020      	beq.n	8022418 <etharp_find_entry+0xc8>
 80223d6:	68fb      	ldr	r3, [r7, #12]
 80223d8:	6819      	ldr	r1, [r3, #0]
 80223da:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80223de:	4891      	ldr	r0, [pc, #580]	; (8022624 <etharp_find_entry+0x2d4>)
 80223e0:	4613      	mov	r3, r2
 80223e2:	005b      	lsls	r3, r3, #1
 80223e4:	4413      	add	r3, r2
 80223e6:	00db      	lsls	r3, r3, #3
 80223e8:	4403      	add	r3, r0
 80223ea:	3304      	adds	r3, #4
 80223ec:	681b      	ldr	r3, [r3, #0]
 80223ee:	4299      	cmp	r1, r3
 80223f0:	d112      	bne.n	8022418 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80223f2:	687b      	ldr	r3, [r7, #4]
 80223f4:	2b00      	cmp	r3, #0
 80223f6:	d00c      	beq.n	8022412 <etharp_find_entry+0xc2>
 80223f8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80223fc:	4989      	ldr	r1, [pc, #548]	; (8022624 <etharp_find_entry+0x2d4>)
 80223fe:	4613      	mov	r3, r2
 8022400:	005b      	lsls	r3, r3, #1
 8022402:	4413      	add	r3, r2
 8022404:	00db      	lsls	r3, r3, #3
 8022406:	440b      	add	r3, r1
 8022408:	3308      	adds	r3, #8
 802240a:	681b      	ldr	r3, [r3, #0]
 802240c:	687a      	ldr	r2, [r7, #4]
 802240e:	429a      	cmp	r2, r3
 8022410:	d102      	bne.n	8022418 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8022412:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8022416:	e100      	b.n	802261a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8022418:	7dfb      	ldrb	r3, [r7, #23]
 802241a:	2b01      	cmp	r3, #1
 802241c:	d140      	bne.n	80224a0 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 802241e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8022422:	4980      	ldr	r1, [pc, #512]	; (8022624 <etharp_find_entry+0x2d4>)
 8022424:	4613      	mov	r3, r2
 8022426:	005b      	lsls	r3, r3, #1
 8022428:	4413      	add	r3, r2
 802242a:	00db      	lsls	r3, r3, #3
 802242c:	440b      	add	r3, r1
 802242e:	681b      	ldr	r3, [r3, #0]
 8022430:	2b00      	cmp	r3, #0
 8022432:	d01a      	beq.n	802246a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8022434:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8022438:	497a      	ldr	r1, [pc, #488]	; (8022624 <etharp_find_entry+0x2d4>)
 802243a:	4613      	mov	r3, r2
 802243c:	005b      	lsls	r3, r3, #1
 802243e:	4413      	add	r3, r2
 8022440:	00db      	lsls	r3, r3, #3
 8022442:	440b      	add	r3, r1
 8022444:	3312      	adds	r3, #18
 8022446:	881b      	ldrh	r3, [r3, #0]
 8022448:	8bba      	ldrh	r2, [r7, #28]
 802244a:	429a      	cmp	r2, r3
 802244c:	d845      	bhi.n	80224da <etharp_find_entry+0x18a>
            old_queue = i;
 802244e:	8c3b      	ldrh	r3, [r7, #32]
 8022450:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8022452:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8022456:	4973      	ldr	r1, [pc, #460]	; (8022624 <etharp_find_entry+0x2d4>)
 8022458:	4613      	mov	r3, r2
 802245a:	005b      	lsls	r3, r3, #1
 802245c:	4413      	add	r3, r2
 802245e:	00db      	lsls	r3, r3, #3
 8022460:	440b      	add	r3, r1
 8022462:	3312      	adds	r3, #18
 8022464:	881b      	ldrh	r3, [r3, #0]
 8022466:	83bb      	strh	r3, [r7, #28]
 8022468:	e037      	b.n	80224da <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 802246a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 802246e:	496d      	ldr	r1, [pc, #436]	; (8022624 <etharp_find_entry+0x2d4>)
 8022470:	4613      	mov	r3, r2
 8022472:	005b      	lsls	r3, r3, #1
 8022474:	4413      	add	r3, r2
 8022476:	00db      	lsls	r3, r3, #3
 8022478:	440b      	add	r3, r1
 802247a:	3312      	adds	r3, #18
 802247c:	881b      	ldrh	r3, [r3, #0]
 802247e:	8b7a      	ldrh	r2, [r7, #26]
 8022480:	429a      	cmp	r2, r3
 8022482:	d82a      	bhi.n	80224da <etharp_find_entry+0x18a>
            old_pending = i;
 8022484:	8c3b      	ldrh	r3, [r7, #32]
 8022486:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8022488:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 802248c:	4965      	ldr	r1, [pc, #404]	; (8022624 <etharp_find_entry+0x2d4>)
 802248e:	4613      	mov	r3, r2
 8022490:	005b      	lsls	r3, r3, #1
 8022492:	4413      	add	r3, r2
 8022494:	00db      	lsls	r3, r3, #3
 8022496:	440b      	add	r3, r1
 8022498:	3312      	adds	r3, #18
 802249a:	881b      	ldrh	r3, [r3, #0]
 802249c:	837b      	strh	r3, [r7, #26]
 802249e:	e01c      	b.n	80224da <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80224a0:	7dfb      	ldrb	r3, [r7, #23]
 80224a2:	2b01      	cmp	r3, #1
 80224a4:	d919      	bls.n	80224da <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80224a6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80224aa:	495e      	ldr	r1, [pc, #376]	; (8022624 <etharp_find_entry+0x2d4>)
 80224ac:	4613      	mov	r3, r2
 80224ae:	005b      	lsls	r3, r3, #1
 80224b0:	4413      	add	r3, r2
 80224b2:	00db      	lsls	r3, r3, #3
 80224b4:	440b      	add	r3, r1
 80224b6:	3312      	adds	r3, #18
 80224b8:	881b      	ldrh	r3, [r3, #0]
 80224ba:	8b3a      	ldrh	r2, [r7, #24]
 80224bc:	429a      	cmp	r2, r3
 80224be:	d80c      	bhi.n	80224da <etharp_find_entry+0x18a>
            old_stable = i;
 80224c0:	8c3b      	ldrh	r3, [r7, #32]
 80224c2:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 80224c4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80224c8:	4956      	ldr	r1, [pc, #344]	; (8022624 <etharp_find_entry+0x2d4>)
 80224ca:	4613      	mov	r3, r2
 80224cc:	005b      	lsls	r3, r3, #1
 80224ce:	4413      	add	r3, r2
 80224d0:	00db      	lsls	r3, r3, #3
 80224d2:	440b      	add	r3, r1
 80224d4:	3312      	adds	r3, #18
 80224d6:	881b      	ldrh	r3, [r3, #0]
 80224d8:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80224da:	8c3b      	ldrh	r3, [r7, #32]
 80224dc:	3301      	adds	r3, #1
 80224de:	b29b      	uxth	r3, r3
 80224e0:	843b      	strh	r3, [r7, #32]
 80224e2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80224e6:	2b09      	cmp	r3, #9
 80224e8:	f77f af4c 	ble.w	8022384 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80224ec:	7afb      	ldrb	r3, [r7, #11]
 80224ee:	f003 0302 	and.w	r3, r3, #2
 80224f2:	2b00      	cmp	r3, #0
 80224f4:	d108      	bne.n	8022508 <etharp_find_entry+0x1b8>
 80224f6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80224fa:	2b0a      	cmp	r3, #10
 80224fc:	d107      	bne.n	802250e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80224fe:	7afb      	ldrb	r3, [r7, #11]
 8022500:	f003 0301 	and.w	r3, r3, #1
 8022504:	2b00      	cmp	r3, #0
 8022506:	d102      	bne.n	802250e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8022508:	f04f 33ff 	mov.w	r3, #4294967295
 802250c:	e085      	b.n	802261a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 802250e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8022512:	2b09      	cmp	r3, #9
 8022514:	dc02      	bgt.n	802251c <etharp_find_entry+0x1cc>
    i = empty;
 8022516:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8022518:	843b      	strh	r3, [r7, #32]
 802251a:	e039      	b.n	8022590 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 802251c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8022520:	2b09      	cmp	r3, #9
 8022522:	dc14      	bgt.n	802254e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8022524:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8022526:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8022528:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 802252c:	493d      	ldr	r1, [pc, #244]	; (8022624 <etharp_find_entry+0x2d4>)
 802252e:	4613      	mov	r3, r2
 8022530:	005b      	lsls	r3, r3, #1
 8022532:	4413      	add	r3, r2
 8022534:	00db      	lsls	r3, r3, #3
 8022536:	440b      	add	r3, r1
 8022538:	681b      	ldr	r3, [r3, #0]
 802253a:	2b00      	cmp	r3, #0
 802253c:	d018      	beq.n	8022570 <etharp_find_entry+0x220>
 802253e:	4b3a      	ldr	r3, [pc, #232]	; (8022628 <etharp_find_entry+0x2d8>)
 8022540:	f240 126d 	movw	r2, #365	; 0x16d
 8022544:	493b      	ldr	r1, [pc, #236]	; (8022634 <etharp_find_entry+0x2e4>)
 8022546:	483a      	ldr	r0, [pc, #232]	; (8022630 <etharp_find_entry+0x2e0>)
 8022548:	f003 f930 	bl	80257ac <iprintf>
 802254c:	e010      	b.n	8022570 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 802254e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8022552:	2b09      	cmp	r3, #9
 8022554:	dc02      	bgt.n	802255c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8022556:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8022558:	843b      	strh	r3, [r7, #32]
 802255a:	e009      	b.n	8022570 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 802255c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8022560:	2b09      	cmp	r3, #9
 8022562:	dc02      	bgt.n	802256a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8022564:	8bfb      	ldrh	r3, [r7, #30]
 8022566:	843b      	strh	r3, [r7, #32]
 8022568:	e002      	b.n	8022570 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 802256a:	f04f 33ff 	mov.w	r3, #4294967295
 802256e:	e054      	b.n	802261a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8022570:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8022574:	2b09      	cmp	r3, #9
 8022576:	dd06      	ble.n	8022586 <etharp_find_entry+0x236>
 8022578:	4b2b      	ldr	r3, [pc, #172]	; (8022628 <etharp_find_entry+0x2d8>)
 802257a:	f240 127f 	movw	r2, #383	; 0x17f
 802257e:	492e      	ldr	r1, [pc, #184]	; (8022638 <etharp_find_entry+0x2e8>)
 8022580:	482b      	ldr	r0, [pc, #172]	; (8022630 <etharp_find_entry+0x2e0>)
 8022582:	f003 f913 	bl	80257ac <iprintf>
    etharp_free_entry(i);
 8022586:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 802258a:	4618      	mov	r0, r3
 802258c:	f7ff fe06 	bl	802219c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8022590:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8022594:	2b09      	cmp	r3, #9
 8022596:	dd06      	ble.n	80225a6 <etharp_find_entry+0x256>
 8022598:	4b23      	ldr	r3, [pc, #140]	; (8022628 <etharp_find_entry+0x2d8>)
 802259a:	f240 1283 	movw	r2, #387	; 0x183
 802259e:	4926      	ldr	r1, [pc, #152]	; (8022638 <etharp_find_entry+0x2e8>)
 80225a0:	4823      	ldr	r0, [pc, #140]	; (8022630 <etharp_find_entry+0x2e0>)
 80225a2:	f003 f903 	bl	80257ac <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80225a6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80225aa:	491e      	ldr	r1, [pc, #120]	; (8022624 <etharp_find_entry+0x2d4>)
 80225ac:	4613      	mov	r3, r2
 80225ae:	005b      	lsls	r3, r3, #1
 80225b0:	4413      	add	r3, r2
 80225b2:	00db      	lsls	r3, r3, #3
 80225b4:	440b      	add	r3, r1
 80225b6:	3314      	adds	r3, #20
 80225b8:	781b      	ldrb	r3, [r3, #0]
 80225ba:	2b00      	cmp	r3, #0
 80225bc:	d006      	beq.n	80225cc <etharp_find_entry+0x27c>
 80225be:	4b1a      	ldr	r3, [pc, #104]	; (8022628 <etharp_find_entry+0x2d8>)
 80225c0:	f44f 72c2 	mov.w	r2, #388	; 0x184
 80225c4:	491d      	ldr	r1, [pc, #116]	; (802263c <etharp_find_entry+0x2ec>)
 80225c6:	481a      	ldr	r0, [pc, #104]	; (8022630 <etharp_find_entry+0x2e0>)
 80225c8:	f003 f8f0 	bl	80257ac <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80225cc:	68fb      	ldr	r3, [r7, #12]
 80225ce:	2b00      	cmp	r3, #0
 80225d0:	d00b      	beq.n	80225ea <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80225d2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80225d6:	68fb      	ldr	r3, [r7, #12]
 80225d8:	6819      	ldr	r1, [r3, #0]
 80225da:	4812      	ldr	r0, [pc, #72]	; (8022624 <etharp_find_entry+0x2d4>)
 80225dc:	4613      	mov	r3, r2
 80225de:	005b      	lsls	r3, r3, #1
 80225e0:	4413      	add	r3, r2
 80225e2:	00db      	lsls	r3, r3, #3
 80225e4:	4403      	add	r3, r0
 80225e6:	3304      	adds	r3, #4
 80225e8:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80225ea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80225ee:	490d      	ldr	r1, [pc, #52]	; (8022624 <etharp_find_entry+0x2d4>)
 80225f0:	4613      	mov	r3, r2
 80225f2:	005b      	lsls	r3, r3, #1
 80225f4:	4413      	add	r3, r2
 80225f6:	00db      	lsls	r3, r3, #3
 80225f8:	440b      	add	r3, r1
 80225fa:	3312      	adds	r3, #18
 80225fc:	2200      	movs	r2, #0
 80225fe:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8022600:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8022604:	4907      	ldr	r1, [pc, #28]	; (8022624 <etharp_find_entry+0x2d4>)
 8022606:	4613      	mov	r3, r2
 8022608:	005b      	lsls	r3, r3, #1
 802260a:	4413      	add	r3, r2
 802260c:	00db      	lsls	r3, r3, #3
 802260e:	440b      	add	r3, r1
 8022610:	3308      	adds	r3, #8
 8022612:	687a      	ldr	r2, [r7, #4]
 8022614:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8022616:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 802261a:	4618      	mov	r0, r3
 802261c:	3728      	adds	r7, #40	; 0x28
 802261e:	46bd      	mov	sp, r7
 8022620:	bd80      	pop	{r7, pc}
 8022622:	bf00      	nop
 8022624:	2001382c 	.word	0x2001382c
 8022628:	0802db28 	.word	0x0802db28
 802262c:	0802db60 	.word	0x0802db60
 8022630:	0802dba0 	.word	0x0802dba0
 8022634:	0802dbc8 	.word	0x0802dbc8
 8022638:	0802dbe0 	.word	0x0802dbe0
 802263c:	0802dbf4 	.word	0x0802dbf4

08022640 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8022640:	b580      	push	{r7, lr}
 8022642:	b088      	sub	sp, #32
 8022644:	af02      	add	r7, sp, #8
 8022646:	60f8      	str	r0, [r7, #12]
 8022648:	60b9      	str	r1, [r7, #8]
 802264a:	607a      	str	r2, [r7, #4]
 802264c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 802264e:	68fb      	ldr	r3, [r7, #12]
 8022650:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8022654:	2b06      	cmp	r3, #6
 8022656:	d006      	beq.n	8022666 <etharp_update_arp_entry+0x26>
 8022658:	4b48      	ldr	r3, [pc, #288]	; (802277c <etharp_update_arp_entry+0x13c>)
 802265a:	f240 12a9 	movw	r2, #425	; 0x1a9
 802265e:	4948      	ldr	r1, [pc, #288]	; (8022780 <etharp_update_arp_entry+0x140>)
 8022660:	4848      	ldr	r0, [pc, #288]	; (8022784 <etharp_update_arp_entry+0x144>)
 8022662:	f003 f8a3 	bl	80257ac <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8022666:	68bb      	ldr	r3, [r7, #8]
 8022668:	2b00      	cmp	r3, #0
 802266a:	d012      	beq.n	8022692 <etharp_update_arp_entry+0x52>
 802266c:	68bb      	ldr	r3, [r7, #8]
 802266e:	681b      	ldr	r3, [r3, #0]
 8022670:	2b00      	cmp	r3, #0
 8022672:	d00e      	beq.n	8022692 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8022674:	68bb      	ldr	r3, [r7, #8]
 8022676:	681b      	ldr	r3, [r3, #0]
 8022678:	68f9      	ldr	r1, [r7, #12]
 802267a:	4618      	mov	r0, r3
 802267c:	f001 f920 	bl	80238c0 <ip4_addr_isbroadcast_u32>
 8022680:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8022682:	2b00      	cmp	r3, #0
 8022684:	d105      	bne.n	8022692 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8022686:	68bb      	ldr	r3, [r7, #8]
 8022688:	681b      	ldr	r3, [r3, #0]
 802268a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 802268e:	2be0      	cmp	r3, #224	; 0xe0
 8022690:	d102      	bne.n	8022698 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8022692:	f06f 030f 	mvn.w	r3, #15
 8022696:	e06c      	b.n	8022772 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8022698:	78fb      	ldrb	r3, [r7, #3]
 802269a:	68fa      	ldr	r2, [r7, #12]
 802269c:	4619      	mov	r1, r3
 802269e:	68b8      	ldr	r0, [r7, #8]
 80226a0:	f7ff fe56 	bl	8022350 <etharp_find_entry>
 80226a4:	4603      	mov	r3, r0
 80226a6:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80226a8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80226ac:	2b00      	cmp	r3, #0
 80226ae:	da02      	bge.n	80226b6 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80226b0:	8afb      	ldrh	r3, [r7, #22]
 80226b2:	b25b      	sxtb	r3, r3
 80226b4:	e05d      	b.n	8022772 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80226b6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80226ba:	4933      	ldr	r1, [pc, #204]	; (8022788 <etharp_update_arp_entry+0x148>)
 80226bc:	4613      	mov	r3, r2
 80226be:	005b      	lsls	r3, r3, #1
 80226c0:	4413      	add	r3, r2
 80226c2:	00db      	lsls	r3, r3, #3
 80226c4:	440b      	add	r3, r1
 80226c6:	3314      	adds	r3, #20
 80226c8:	2202      	movs	r2, #2
 80226ca:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80226cc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80226d0:	492d      	ldr	r1, [pc, #180]	; (8022788 <etharp_update_arp_entry+0x148>)
 80226d2:	4613      	mov	r3, r2
 80226d4:	005b      	lsls	r3, r3, #1
 80226d6:	4413      	add	r3, r2
 80226d8:	00db      	lsls	r3, r3, #3
 80226da:	440b      	add	r3, r1
 80226dc:	3308      	adds	r3, #8
 80226de:	68fa      	ldr	r2, [r7, #12]
 80226e0:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80226e2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80226e6:	4613      	mov	r3, r2
 80226e8:	005b      	lsls	r3, r3, #1
 80226ea:	4413      	add	r3, r2
 80226ec:	00db      	lsls	r3, r3, #3
 80226ee:	3308      	adds	r3, #8
 80226f0:	4a25      	ldr	r2, [pc, #148]	; (8022788 <etharp_update_arp_entry+0x148>)
 80226f2:	4413      	add	r3, r2
 80226f4:	3304      	adds	r3, #4
 80226f6:	2206      	movs	r2, #6
 80226f8:	6879      	ldr	r1, [r7, #4]
 80226fa:	4618      	mov	r0, r3
 80226fc:	f002 f982 	bl	8024a04 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8022700:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8022704:	4920      	ldr	r1, [pc, #128]	; (8022788 <etharp_update_arp_entry+0x148>)
 8022706:	4613      	mov	r3, r2
 8022708:	005b      	lsls	r3, r3, #1
 802270a:	4413      	add	r3, r2
 802270c:	00db      	lsls	r3, r3, #3
 802270e:	440b      	add	r3, r1
 8022710:	3312      	adds	r3, #18
 8022712:	2200      	movs	r2, #0
 8022714:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8022716:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 802271a:	491b      	ldr	r1, [pc, #108]	; (8022788 <etharp_update_arp_entry+0x148>)
 802271c:	4613      	mov	r3, r2
 802271e:	005b      	lsls	r3, r3, #1
 8022720:	4413      	add	r3, r2
 8022722:	00db      	lsls	r3, r3, #3
 8022724:	440b      	add	r3, r1
 8022726:	681b      	ldr	r3, [r3, #0]
 8022728:	2b00      	cmp	r3, #0
 802272a:	d021      	beq.n	8022770 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 802272c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8022730:	4915      	ldr	r1, [pc, #84]	; (8022788 <etharp_update_arp_entry+0x148>)
 8022732:	4613      	mov	r3, r2
 8022734:	005b      	lsls	r3, r3, #1
 8022736:	4413      	add	r3, r2
 8022738:	00db      	lsls	r3, r3, #3
 802273a:	440b      	add	r3, r1
 802273c:	681b      	ldr	r3, [r3, #0]
 802273e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8022740:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8022744:	4910      	ldr	r1, [pc, #64]	; (8022788 <etharp_update_arp_entry+0x148>)
 8022746:	4613      	mov	r3, r2
 8022748:	005b      	lsls	r3, r3, #1
 802274a:	4413      	add	r3, r2
 802274c:	00db      	lsls	r3, r3, #3
 802274e:	440b      	add	r3, r1
 8022750:	2200      	movs	r2, #0
 8022752:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8022754:	68fb      	ldr	r3, [r7, #12]
 8022756:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 802275a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 802275e:	9300      	str	r3, [sp, #0]
 8022760:	687b      	ldr	r3, [r7, #4]
 8022762:	6939      	ldr	r1, [r7, #16]
 8022764:	68f8      	ldr	r0, [r7, #12]
 8022766:	f001 ffb9 	bl	80246dc <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 802276a:	6938      	ldr	r0, [r7, #16]
 802276c:	f7f6 fca6 	bl	80190bc <pbuf_free>
  }
  return ERR_OK;
 8022770:	2300      	movs	r3, #0
}
 8022772:	4618      	mov	r0, r3
 8022774:	3718      	adds	r7, #24
 8022776:	46bd      	mov	sp, r7
 8022778:	bd80      	pop	{r7, pc}
 802277a:	bf00      	nop
 802277c:	0802db28 	.word	0x0802db28
 8022780:	0802dc20 	.word	0x0802dc20
 8022784:	0802dba0 	.word	0x0802dba0
 8022788:	2001382c 	.word	0x2001382c

0802278c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 802278c:	b580      	push	{r7, lr}
 802278e:	b084      	sub	sp, #16
 8022790:	af00      	add	r7, sp, #0
 8022792:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8022794:	2300      	movs	r3, #0
 8022796:	60fb      	str	r3, [r7, #12]
 8022798:	e01e      	b.n	80227d8 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 802279a:	4913      	ldr	r1, [pc, #76]	; (80227e8 <etharp_cleanup_netif+0x5c>)
 802279c:	68fa      	ldr	r2, [r7, #12]
 802279e:	4613      	mov	r3, r2
 80227a0:	005b      	lsls	r3, r3, #1
 80227a2:	4413      	add	r3, r2
 80227a4:	00db      	lsls	r3, r3, #3
 80227a6:	440b      	add	r3, r1
 80227a8:	3314      	adds	r3, #20
 80227aa:	781b      	ldrb	r3, [r3, #0]
 80227ac:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80227ae:	7afb      	ldrb	r3, [r7, #11]
 80227b0:	2b00      	cmp	r3, #0
 80227b2:	d00e      	beq.n	80227d2 <etharp_cleanup_netif+0x46>
 80227b4:	490c      	ldr	r1, [pc, #48]	; (80227e8 <etharp_cleanup_netif+0x5c>)
 80227b6:	68fa      	ldr	r2, [r7, #12]
 80227b8:	4613      	mov	r3, r2
 80227ba:	005b      	lsls	r3, r3, #1
 80227bc:	4413      	add	r3, r2
 80227be:	00db      	lsls	r3, r3, #3
 80227c0:	440b      	add	r3, r1
 80227c2:	3308      	adds	r3, #8
 80227c4:	681b      	ldr	r3, [r3, #0]
 80227c6:	687a      	ldr	r2, [r7, #4]
 80227c8:	429a      	cmp	r2, r3
 80227ca:	d102      	bne.n	80227d2 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80227cc:	68f8      	ldr	r0, [r7, #12]
 80227ce:	f7ff fce5 	bl	802219c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80227d2:	68fb      	ldr	r3, [r7, #12]
 80227d4:	3301      	adds	r3, #1
 80227d6:	60fb      	str	r3, [r7, #12]
 80227d8:	68fb      	ldr	r3, [r7, #12]
 80227da:	2b09      	cmp	r3, #9
 80227dc:	dddd      	ble.n	802279a <etharp_cleanup_netif+0xe>
    }
  }
}
 80227de:	bf00      	nop
 80227e0:	bf00      	nop
 80227e2:	3710      	adds	r7, #16
 80227e4:	46bd      	mov	sp, r7
 80227e6:	bd80      	pop	{r7, pc}
 80227e8:	2001382c 	.word	0x2001382c

080227ec <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80227ec:	b5b0      	push	{r4, r5, r7, lr}
 80227ee:	b08a      	sub	sp, #40	; 0x28
 80227f0:	af04      	add	r7, sp, #16
 80227f2:	6078      	str	r0, [r7, #4]
 80227f4:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80227f6:	683b      	ldr	r3, [r7, #0]
 80227f8:	2b00      	cmp	r3, #0
 80227fa:	d107      	bne.n	802280c <etharp_input+0x20>
 80227fc:	4b3f      	ldr	r3, [pc, #252]	; (80228fc <etharp_input+0x110>)
 80227fe:	f240 228a 	movw	r2, #650	; 0x28a
 8022802:	493f      	ldr	r1, [pc, #252]	; (8022900 <etharp_input+0x114>)
 8022804:	483f      	ldr	r0, [pc, #252]	; (8022904 <etharp_input+0x118>)
 8022806:	f002 ffd1 	bl	80257ac <iprintf>
 802280a:	e074      	b.n	80228f6 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 802280c:	687b      	ldr	r3, [r7, #4]
 802280e:	685b      	ldr	r3, [r3, #4]
 8022810:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8022812:	693b      	ldr	r3, [r7, #16]
 8022814:	881b      	ldrh	r3, [r3, #0]
 8022816:	b29b      	uxth	r3, r3
 8022818:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802281c:	d10c      	bne.n	8022838 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 802281e:	693b      	ldr	r3, [r7, #16]
 8022820:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8022822:	2b06      	cmp	r3, #6
 8022824:	d108      	bne.n	8022838 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8022826:	693b      	ldr	r3, [r7, #16]
 8022828:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 802282a:	2b04      	cmp	r3, #4
 802282c:	d104      	bne.n	8022838 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 802282e:	693b      	ldr	r3, [r7, #16]
 8022830:	885b      	ldrh	r3, [r3, #2]
 8022832:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8022834:	2b08      	cmp	r3, #8
 8022836:	d003      	beq.n	8022840 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8022838:	6878      	ldr	r0, [r7, #4]
 802283a:	f7f6 fc3f 	bl	80190bc <pbuf_free>
    return;
 802283e:	e05a      	b.n	80228f6 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8022840:	693b      	ldr	r3, [r7, #16]
 8022842:	330e      	adds	r3, #14
 8022844:	681b      	ldr	r3, [r3, #0]
 8022846:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8022848:	693b      	ldr	r3, [r7, #16]
 802284a:	3318      	adds	r3, #24
 802284c:	681b      	ldr	r3, [r3, #0]
 802284e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8022850:	683b      	ldr	r3, [r7, #0]
 8022852:	3304      	adds	r3, #4
 8022854:	681b      	ldr	r3, [r3, #0]
 8022856:	2b00      	cmp	r3, #0
 8022858:	d102      	bne.n	8022860 <etharp_input+0x74>
    for_us = 0;
 802285a:	2300      	movs	r3, #0
 802285c:	75fb      	strb	r3, [r7, #23]
 802285e:	e009      	b.n	8022874 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8022860:	68ba      	ldr	r2, [r7, #8]
 8022862:	683b      	ldr	r3, [r7, #0]
 8022864:	3304      	adds	r3, #4
 8022866:	681b      	ldr	r3, [r3, #0]
 8022868:	429a      	cmp	r2, r3
 802286a:	bf0c      	ite	eq
 802286c:	2301      	moveq	r3, #1
 802286e:	2300      	movne	r3, #0
 8022870:	b2db      	uxtb	r3, r3
 8022872:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8022874:	693b      	ldr	r3, [r7, #16]
 8022876:	f103 0208 	add.w	r2, r3, #8
 802287a:	7dfb      	ldrb	r3, [r7, #23]
 802287c:	2b00      	cmp	r3, #0
 802287e:	d001      	beq.n	8022884 <etharp_input+0x98>
 8022880:	2301      	movs	r3, #1
 8022882:	e000      	b.n	8022886 <etharp_input+0x9a>
 8022884:	2302      	movs	r3, #2
 8022886:	f107 010c 	add.w	r1, r7, #12
 802288a:	6838      	ldr	r0, [r7, #0]
 802288c:	f7ff fed8 	bl	8022640 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8022890:	693b      	ldr	r3, [r7, #16]
 8022892:	88db      	ldrh	r3, [r3, #6]
 8022894:	b29b      	uxth	r3, r3
 8022896:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802289a:	d003      	beq.n	80228a4 <etharp_input+0xb8>
 802289c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80228a0:	d01e      	beq.n	80228e0 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80228a2:	e025      	b.n	80228f0 <etharp_input+0x104>
      if (for_us) {
 80228a4:	7dfb      	ldrb	r3, [r7, #23]
 80228a6:	2b00      	cmp	r3, #0
 80228a8:	d021      	beq.n	80228ee <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80228aa:	683b      	ldr	r3, [r7, #0]
 80228ac:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 80228b0:	693b      	ldr	r3, [r7, #16]
 80228b2:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80228b6:	683b      	ldr	r3, [r7, #0]
 80228b8:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 80228bc:	683b      	ldr	r3, [r7, #0]
 80228be:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80228c0:	693a      	ldr	r2, [r7, #16]
 80228c2:	3208      	adds	r2, #8
        etharp_raw(netif,
 80228c4:	2102      	movs	r1, #2
 80228c6:	9103      	str	r1, [sp, #12]
 80228c8:	f107 010c 	add.w	r1, r7, #12
 80228cc:	9102      	str	r1, [sp, #8]
 80228ce:	9201      	str	r2, [sp, #4]
 80228d0:	9300      	str	r3, [sp, #0]
 80228d2:	462b      	mov	r3, r5
 80228d4:	4622      	mov	r2, r4
 80228d6:	4601      	mov	r1, r0
 80228d8:	6838      	ldr	r0, [r7, #0]
 80228da:	f000 faef 	bl	8022ebc <etharp_raw>
      break;
 80228de:	e006      	b.n	80228ee <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 80228e0:	f107 030c 	add.w	r3, r7, #12
 80228e4:	4619      	mov	r1, r3
 80228e6:	6838      	ldr	r0, [r7, #0]
 80228e8:	f7fe f9fc 	bl	8020ce4 <dhcp_arp_reply>
      break;
 80228ec:	e000      	b.n	80228f0 <etharp_input+0x104>
      break;
 80228ee:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80228f0:	6878      	ldr	r0, [r7, #4]
 80228f2:	f7f6 fbe3 	bl	80190bc <pbuf_free>
}
 80228f6:	3718      	adds	r7, #24
 80228f8:	46bd      	mov	sp, r7
 80228fa:	bdb0      	pop	{r4, r5, r7, pc}
 80228fc:	0802db28 	.word	0x0802db28
 8022900:	0802dc78 	.word	0x0802dc78
 8022904:	0802dba0 	.word	0x0802dba0

08022908 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8022908:	b580      	push	{r7, lr}
 802290a:	b086      	sub	sp, #24
 802290c:	af02      	add	r7, sp, #8
 802290e:	60f8      	str	r0, [r7, #12]
 8022910:	60b9      	str	r1, [r7, #8]
 8022912:	4613      	mov	r3, r2
 8022914:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8022916:	79fa      	ldrb	r2, [r7, #7]
 8022918:	4944      	ldr	r1, [pc, #272]	; (8022a2c <etharp_output_to_arp_index+0x124>)
 802291a:	4613      	mov	r3, r2
 802291c:	005b      	lsls	r3, r3, #1
 802291e:	4413      	add	r3, r2
 8022920:	00db      	lsls	r3, r3, #3
 8022922:	440b      	add	r3, r1
 8022924:	3314      	adds	r3, #20
 8022926:	781b      	ldrb	r3, [r3, #0]
 8022928:	2b01      	cmp	r3, #1
 802292a:	d806      	bhi.n	802293a <etharp_output_to_arp_index+0x32>
 802292c:	4b40      	ldr	r3, [pc, #256]	; (8022a30 <etharp_output_to_arp_index+0x128>)
 802292e:	f240 22ee 	movw	r2, #750	; 0x2ee
 8022932:	4940      	ldr	r1, [pc, #256]	; (8022a34 <etharp_output_to_arp_index+0x12c>)
 8022934:	4840      	ldr	r0, [pc, #256]	; (8022a38 <etharp_output_to_arp_index+0x130>)
 8022936:	f002 ff39 	bl	80257ac <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 802293a:	79fa      	ldrb	r2, [r7, #7]
 802293c:	493b      	ldr	r1, [pc, #236]	; (8022a2c <etharp_output_to_arp_index+0x124>)
 802293e:	4613      	mov	r3, r2
 8022940:	005b      	lsls	r3, r3, #1
 8022942:	4413      	add	r3, r2
 8022944:	00db      	lsls	r3, r3, #3
 8022946:	440b      	add	r3, r1
 8022948:	3314      	adds	r3, #20
 802294a:	781b      	ldrb	r3, [r3, #0]
 802294c:	2b02      	cmp	r3, #2
 802294e:	d153      	bne.n	80229f8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8022950:	79fa      	ldrb	r2, [r7, #7]
 8022952:	4936      	ldr	r1, [pc, #216]	; (8022a2c <etharp_output_to_arp_index+0x124>)
 8022954:	4613      	mov	r3, r2
 8022956:	005b      	lsls	r3, r3, #1
 8022958:	4413      	add	r3, r2
 802295a:	00db      	lsls	r3, r3, #3
 802295c:	440b      	add	r3, r1
 802295e:	3312      	adds	r3, #18
 8022960:	881b      	ldrh	r3, [r3, #0]
 8022962:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8022966:	d919      	bls.n	802299c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8022968:	79fa      	ldrb	r2, [r7, #7]
 802296a:	4613      	mov	r3, r2
 802296c:	005b      	lsls	r3, r3, #1
 802296e:	4413      	add	r3, r2
 8022970:	00db      	lsls	r3, r3, #3
 8022972:	4a2e      	ldr	r2, [pc, #184]	; (8022a2c <etharp_output_to_arp_index+0x124>)
 8022974:	4413      	add	r3, r2
 8022976:	3304      	adds	r3, #4
 8022978:	4619      	mov	r1, r3
 802297a:	68f8      	ldr	r0, [r7, #12]
 802297c:	f000 fb4c 	bl	8023018 <etharp_request>
 8022980:	4603      	mov	r3, r0
 8022982:	2b00      	cmp	r3, #0
 8022984:	d138      	bne.n	80229f8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8022986:	79fa      	ldrb	r2, [r7, #7]
 8022988:	4928      	ldr	r1, [pc, #160]	; (8022a2c <etharp_output_to_arp_index+0x124>)
 802298a:	4613      	mov	r3, r2
 802298c:	005b      	lsls	r3, r3, #1
 802298e:	4413      	add	r3, r2
 8022990:	00db      	lsls	r3, r3, #3
 8022992:	440b      	add	r3, r1
 8022994:	3314      	adds	r3, #20
 8022996:	2203      	movs	r2, #3
 8022998:	701a      	strb	r2, [r3, #0]
 802299a:	e02d      	b.n	80229f8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 802299c:	79fa      	ldrb	r2, [r7, #7]
 802299e:	4923      	ldr	r1, [pc, #140]	; (8022a2c <etharp_output_to_arp_index+0x124>)
 80229a0:	4613      	mov	r3, r2
 80229a2:	005b      	lsls	r3, r3, #1
 80229a4:	4413      	add	r3, r2
 80229a6:	00db      	lsls	r3, r3, #3
 80229a8:	440b      	add	r3, r1
 80229aa:	3312      	adds	r3, #18
 80229ac:	881b      	ldrh	r3, [r3, #0]
 80229ae:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80229b2:	d321      	bcc.n	80229f8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80229b4:	79fa      	ldrb	r2, [r7, #7]
 80229b6:	4613      	mov	r3, r2
 80229b8:	005b      	lsls	r3, r3, #1
 80229ba:	4413      	add	r3, r2
 80229bc:	00db      	lsls	r3, r3, #3
 80229be:	4a1b      	ldr	r2, [pc, #108]	; (8022a2c <etharp_output_to_arp_index+0x124>)
 80229c0:	4413      	add	r3, r2
 80229c2:	1d19      	adds	r1, r3, #4
 80229c4:	79fa      	ldrb	r2, [r7, #7]
 80229c6:	4613      	mov	r3, r2
 80229c8:	005b      	lsls	r3, r3, #1
 80229ca:	4413      	add	r3, r2
 80229cc:	00db      	lsls	r3, r3, #3
 80229ce:	3308      	adds	r3, #8
 80229d0:	4a16      	ldr	r2, [pc, #88]	; (8022a2c <etharp_output_to_arp_index+0x124>)
 80229d2:	4413      	add	r3, r2
 80229d4:	3304      	adds	r3, #4
 80229d6:	461a      	mov	r2, r3
 80229d8:	68f8      	ldr	r0, [r7, #12]
 80229da:	f000 fafb 	bl	8022fd4 <etharp_request_dst>
 80229de:	4603      	mov	r3, r0
 80229e0:	2b00      	cmp	r3, #0
 80229e2:	d109      	bne.n	80229f8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80229e4:	79fa      	ldrb	r2, [r7, #7]
 80229e6:	4911      	ldr	r1, [pc, #68]	; (8022a2c <etharp_output_to_arp_index+0x124>)
 80229e8:	4613      	mov	r3, r2
 80229ea:	005b      	lsls	r3, r3, #1
 80229ec:	4413      	add	r3, r2
 80229ee:	00db      	lsls	r3, r3, #3
 80229f0:	440b      	add	r3, r1
 80229f2:	3314      	adds	r3, #20
 80229f4:	2203      	movs	r2, #3
 80229f6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80229f8:	68fb      	ldr	r3, [r7, #12]
 80229fa:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 80229fe:	79fa      	ldrb	r2, [r7, #7]
 8022a00:	4613      	mov	r3, r2
 8022a02:	005b      	lsls	r3, r3, #1
 8022a04:	4413      	add	r3, r2
 8022a06:	00db      	lsls	r3, r3, #3
 8022a08:	3308      	adds	r3, #8
 8022a0a:	4a08      	ldr	r2, [pc, #32]	; (8022a2c <etharp_output_to_arp_index+0x124>)
 8022a0c:	4413      	add	r3, r2
 8022a0e:	3304      	adds	r3, #4
 8022a10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8022a14:	9200      	str	r2, [sp, #0]
 8022a16:	460a      	mov	r2, r1
 8022a18:	68b9      	ldr	r1, [r7, #8]
 8022a1a:	68f8      	ldr	r0, [r7, #12]
 8022a1c:	f001 fe5e 	bl	80246dc <ethernet_output>
 8022a20:	4603      	mov	r3, r0
}
 8022a22:	4618      	mov	r0, r3
 8022a24:	3710      	adds	r7, #16
 8022a26:	46bd      	mov	sp, r7
 8022a28:	bd80      	pop	{r7, pc}
 8022a2a:	bf00      	nop
 8022a2c:	2001382c 	.word	0x2001382c
 8022a30:	0802db28 	.word	0x0802db28
 8022a34:	0802dc98 	.word	0x0802dc98
 8022a38:	0802dba0 	.word	0x0802dba0

08022a3c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8022a3c:	b580      	push	{r7, lr}
 8022a3e:	b08a      	sub	sp, #40	; 0x28
 8022a40:	af02      	add	r7, sp, #8
 8022a42:	60f8      	str	r0, [r7, #12]
 8022a44:	60b9      	str	r1, [r7, #8]
 8022a46:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8022a48:	687b      	ldr	r3, [r7, #4]
 8022a4a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8022a4c:	68fb      	ldr	r3, [r7, #12]
 8022a4e:	2b00      	cmp	r3, #0
 8022a50:	d106      	bne.n	8022a60 <etharp_output+0x24>
 8022a52:	4b73      	ldr	r3, [pc, #460]	; (8022c20 <etharp_output+0x1e4>)
 8022a54:	f240 321e 	movw	r2, #798	; 0x31e
 8022a58:	4972      	ldr	r1, [pc, #456]	; (8022c24 <etharp_output+0x1e8>)
 8022a5a:	4873      	ldr	r0, [pc, #460]	; (8022c28 <etharp_output+0x1ec>)
 8022a5c:	f002 fea6 	bl	80257ac <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8022a60:	68bb      	ldr	r3, [r7, #8]
 8022a62:	2b00      	cmp	r3, #0
 8022a64:	d106      	bne.n	8022a74 <etharp_output+0x38>
 8022a66:	4b6e      	ldr	r3, [pc, #440]	; (8022c20 <etharp_output+0x1e4>)
 8022a68:	f240 321f 	movw	r2, #799	; 0x31f
 8022a6c:	496f      	ldr	r1, [pc, #444]	; (8022c2c <etharp_output+0x1f0>)
 8022a6e:	486e      	ldr	r0, [pc, #440]	; (8022c28 <etharp_output+0x1ec>)
 8022a70:	f002 fe9c 	bl	80257ac <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8022a74:	687b      	ldr	r3, [r7, #4]
 8022a76:	2b00      	cmp	r3, #0
 8022a78:	d106      	bne.n	8022a88 <etharp_output+0x4c>
 8022a7a:	4b69      	ldr	r3, [pc, #420]	; (8022c20 <etharp_output+0x1e4>)
 8022a7c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8022a80:	496b      	ldr	r1, [pc, #428]	; (8022c30 <etharp_output+0x1f4>)
 8022a82:	4869      	ldr	r0, [pc, #420]	; (8022c28 <etharp_output+0x1ec>)
 8022a84:	f002 fe92 	bl	80257ac <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8022a88:	687b      	ldr	r3, [r7, #4]
 8022a8a:	681b      	ldr	r3, [r3, #0]
 8022a8c:	68f9      	ldr	r1, [r7, #12]
 8022a8e:	4618      	mov	r0, r3
 8022a90:	f000 ff16 	bl	80238c0 <ip4_addr_isbroadcast_u32>
 8022a94:	4603      	mov	r3, r0
 8022a96:	2b00      	cmp	r3, #0
 8022a98:	d002      	beq.n	8022aa0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8022a9a:	4b66      	ldr	r3, [pc, #408]	; (8022c34 <etharp_output+0x1f8>)
 8022a9c:	61fb      	str	r3, [r7, #28]
 8022a9e:	e0af      	b.n	8022c00 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8022aa0:	687b      	ldr	r3, [r7, #4]
 8022aa2:	681b      	ldr	r3, [r3, #0]
 8022aa4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8022aa8:	2be0      	cmp	r3, #224	; 0xe0
 8022aaa:	d118      	bne.n	8022ade <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8022aac:	2301      	movs	r3, #1
 8022aae:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8022ab0:	2300      	movs	r3, #0
 8022ab2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8022ab4:	235e      	movs	r3, #94	; 0x5e
 8022ab6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8022ab8:	687b      	ldr	r3, [r7, #4]
 8022aba:	3301      	adds	r3, #1
 8022abc:	781b      	ldrb	r3, [r3, #0]
 8022abe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8022ac2:	b2db      	uxtb	r3, r3
 8022ac4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8022ac6:	687b      	ldr	r3, [r7, #4]
 8022ac8:	3302      	adds	r3, #2
 8022aca:	781b      	ldrb	r3, [r3, #0]
 8022acc:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8022ace:	687b      	ldr	r3, [r7, #4]
 8022ad0:	3303      	adds	r3, #3
 8022ad2:	781b      	ldrb	r3, [r3, #0]
 8022ad4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8022ad6:	f107 0310 	add.w	r3, r7, #16
 8022ada:	61fb      	str	r3, [r7, #28]
 8022adc:	e090      	b.n	8022c00 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8022ade:	687b      	ldr	r3, [r7, #4]
 8022ae0:	681a      	ldr	r2, [r3, #0]
 8022ae2:	68fb      	ldr	r3, [r7, #12]
 8022ae4:	3304      	adds	r3, #4
 8022ae6:	681b      	ldr	r3, [r3, #0]
 8022ae8:	405a      	eors	r2, r3
 8022aea:	68fb      	ldr	r3, [r7, #12]
 8022aec:	3308      	adds	r3, #8
 8022aee:	681b      	ldr	r3, [r3, #0]
 8022af0:	4013      	ands	r3, r2
 8022af2:	2b00      	cmp	r3, #0
 8022af4:	d012      	beq.n	8022b1c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8022af6:	687b      	ldr	r3, [r7, #4]
 8022af8:	681b      	ldr	r3, [r3, #0]
 8022afa:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8022afc:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8022b00:	4293      	cmp	r3, r2
 8022b02:	d00b      	beq.n	8022b1c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8022b04:	68fb      	ldr	r3, [r7, #12]
 8022b06:	330c      	adds	r3, #12
 8022b08:	681b      	ldr	r3, [r3, #0]
 8022b0a:	2b00      	cmp	r3, #0
 8022b0c:	d003      	beq.n	8022b16 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8022b0e:	68fb      	ldr	r3, [r7, #12]
 8022b10:	330c      	adds	r3, #12
 8022b12:	61bb      	str	r3, [r7, #24]
 8022b14:	e002      	b.n	8022b1c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8022b16:	f06f 0303 	mvn.w	r3, #3
 8022b1a:	e07d      	b.n	8022c18 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8022b1c:	4b46      	ldr	r3, [pc, #280]	; (8022c38 <etharp_output+0x1fc>)
 8022b1e:	781b      	ldrb	r3, [r3, #0]
 8022b20:	4619      	mov	r1, r3
 8022b22:	4a46      	ldr	r2, [pc, #280]	; (8022c3c <etharp_output+0x200>)
 8022b24:	460b      	mov	r3, r1
 8022b26:	005b      	lsls	r3, r3, #1
 8022b28:	440b      	add	r3, r1
 8022b2a:	00db      	lsls	r3, r3, #3
 8022b2c:	4413      	add	r3, r2
 8022b2e:	3314      	adds	r3, #20
 8022b30:	781b      	ldrb	r3, [r3, #0]
 8022b32:	2b01      	cmp	r3, #1
 8022b34:	d925      	bls.n	8022b82 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8022b36:	4b40      	ldr	r3, [pc, #256]	; (8022c38 <etharp_output+0x1fc>)
 8022b38:	781b      	ldrb	r3, [r3, #0]
 8022b3a:	4619      	mov	r1, r3
 8022b3c:	4a3f      	ldr	r2, [pc, #252]	; (8022c3c <etharp_output+0x200>)
 8022b3e:	460b      	mov	r3, r1
 8022b40:	005b      	lsls	r3, r3, #1
 8022b42:	440b      	add	r3, r1
 8022b44:	00db      	lsls	r3, r3, #3
 8022b46:	4413      	add	r3, r2
 8022b48:	3308      	adds	r3, #8
 8022b4a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8022b4c:	68fa      	ldr	r2, [r7, #12]
 8022b4e:	429a      	cmp	r2, r3
 8022b50:	d117      	bne.n	8022b82 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8022b52:	69bb      	ldr	r3, [r7, #24]
 8022b54:	681a      	ldr	r2, [r3, #0]
 8022b56:	4b38      	ldr	r3, [pc, #224]	; (8022c38 <etharp_output+0x1fc>)
 8022b58:	781b      	ldrb	r3, [r3, #0]
 8022b5a:	4618      	mov	r0, r3
 8022b5c:	4937      	ldr	r1, [pc, #220]	; (8022c3c <etharp_output+0x200>)
 8022b5e:	4603      	mov	r3, r0
 8022b60:	005b      	lsls	r3, r3, #1
 8022b62:	4403      	add	r3, r0
 8022b64:	00db      	lsls	r3, r3, #3
 8022b66:	440b      	add	r3, r1
 8022b68:	3304      	adds	r3, #4
 8022b6a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8022b6c:	429a      	cmp	r2, r3
 8022b6e:	d108      	bne.n	8022b82 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8022b70:	4b31      	ldr	r3, [pc, #196]	; (8022c38 <etharp_output+0x1fc>)
 8022b72:	781b      	ldrb	r3, [r3, #0]
 8022b74:	461a      	mov	r2, r3
 8022b76:	68b9      	ldr	r1, [r7, #8]
 8022b78:	68f8      	ldr	r0, [r7, #12]
 8022b7a:	f7ff fec5 	bl	8022908 <etharp_output_to_arp_index>
 8022b7e:	4603      	mov	r3, r0
 8022b80:	e04a      	b.n	8022c18 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8022b82:	2300      	movs	r3, #0
 8022b84:	75fb      	strb	r3, [r7, #23]
 8022b86:	e031      	b.n	8022bec <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8022b88:	7dfa      	ldrb	r2, [r7, #23]
 8022b8a:	492c      	ldr	r1, [pc, #176]	; (8022c3c <etharp_output+0x200>)
 8022b8c:	4613      	mov	r3, r2
 8022b8e:	005b      	lsls	r3, r3, #1
 8022b90:	4413      	add	r3, r2
 8022b92:	00db      	lsls	r3, r3, #3
 8022b94:	440b      	add	r3, r1
 8022b96:	3314      	adds	r3, #20
 8022b98:	781b      	ldrb	r3, [r3, #0]
 8022b9a:	2b01      	cmp	r3, #1
 8022b9c:	d923      	bls.n	8022be6 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8022b9e:	7dfa      	ldrb	r2, [r7, #23]
 8022ba0:	4926      	ldr	r1, [pc, #152]	; (8022c3c <etharp_output+0x200>)
 8022ba2:	4613      	mov	r3, r2
 8022ba4:	005b      	lsls	r3, r3, #1
 8022ba6:	4413      	add	r3, r2
 8022ba8:	00db      	lsls	r3, r3, #3
 8022baa:	440b      	add	r3, r1
 8022bac:	3308      	adds	r3, #8
 8022bae:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8022bb0:	68fa      	ldr	r2, [r7, #12]
 8022bb2:	429a      	cmp	r2, r3
 8022bb4:	d117      	bne.n	8022be6 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8022bb6:	69bb      	ldr	r3, [r7, #24]
 8022bb8:	6819      	ldr	r1, [r3, #0]
 8022bba:	7dfa      	ldrb	r2, [r7, #23]
 8022bbc:	481f      	ldr	r0, [pc, #124]	; (8022c3c <etharp_output+0x200>)
 8022bbe:	4613      	mov	r3, r2
 8022bc0:	005b      	lsls	r3, r3, #1
 8022bc2:	4413      	add	r3, r2
 8022bc4:	00db      	lsls	r3, r3, #3
 8022bc6:	4403      	add	r3, r0
 8022bc8:	3304      	adds	r3, #4
 8022bca:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8022bcc:	4299      	cmp	r1, r3
 8022bce:	d10a      	bne.n	8022be6 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8022bd0:	4a19      	ldr	r2, [pc, #100]	; (8022c38 <etharp_output+0x1fc>)
 8022bd2:	7dfb      	ldrb	r3, [r7, #23]
 8022bd4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8022bd6:	7dfb      	ldrb	r3, [r7, #23]
 8022bd8:	461a      	mov	r2, r3
 8022bda:	68b9      	ldr	r1, [r7, #8]
 8022bdc:	68f8      	ldr	r0, [r7, #12]
 8022bde:	f7ff fe93 	bl	8022908 <etharp_output_to_arp_index>
 8022be2:	4603      	mov	r3, r0
 8022be4:	e018      	b.n	8022c18 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8022be6:	7dfb      	ldrb	r3, [r7, #23]
 8022be8:	3301      	adds	r3, #1
 8022bea:	75fb      	strb	r3, [r7, #23]
 8022bec:	7dfb      	ldrb	r3, [r7, #23]
 8022bee:	2b09      	cmp	r3, #9
 8022bf0:	d9ca      	bls.n	8022b88 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8022bf2:	68ba      	ldr	r2, [r7, #8]
 8022bf4:	69b9      	ldr	r1, [r7, #24]
 8022bf6:	68f8      	ldr	r0, [r7, #12]
 8022bf8:	f000 f822 	bl	8022c40 <etharp_query>
 8022bfc:	4603      	mov	r3, r0
 8022bfe:	e00b      	b.n	8022c18 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8022c00:	68fb      	ldr	r3, [r7, #12]
 8022c02:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8022c06:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8022c0a:	9300      	str	r3, [sp, #0]
 8022c0c:	69fb      	ldr	r3, [r7, #28]
 8022c0e:	68b9      	ldr	r1, [r7, #8]
 8022c10:	68f8      	ldr	r0, [r7, #12]
 8022c12:	f001 fd63 	bl	80246dc <ethernet_output>
 8022c16:	4603      	mov	r3, r0
}
 8022c18:	4618      	mov	r0, r3
 8022c1a:	3720      	adds	r7, #32
 8022c1c:	46bd      	mov	sp, r7
 8022c1e:	bd80      	pop	{r7, pc}
 8022c20:	0802db28 	.word	0x0802db28
 8022c24:	0802dc78 	.word	0x0802dc78
 8022c28:	0802dba0 	.word	0x0802dba0
 8022c2c:	0802dcc8 	.word	0x0802dcc8
 8022c30:	0802dc68 	.word	0x0802dc68
 8022c34:	0802e470 	.word	0x0802e470
 8022c38:	2001391c 	.word	0x2001391c
 8022c3c:	2001382c 	.word	0x2001382c

08022c40 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8022c40:	b580      	push	{r7, lr}
 8022c42:	b08c      	sub	sp, #48	; 0x30
 8022c44:	af02      	add	r7, sp, #8
 8022c46:	60f8      	str	r0, [r7, #12]
 8022c48:	60b9      	str	r1, [r7, #8]
 8022c4a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8022c4c:	68fb      	ldr	r3, [r7, #12]
 8022c4e:	332a      	adds	r3, #42	; 0x2a
 8022c50:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8022c52:	23ff      	movs	r3, #255	; 0xff
 8022c54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8022c58:	2300      	movs	r3, #0
 8022c5a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8022c5c:	68bb      	ldr	r3, [r7, #8]
 8022c5e:	681b      	ldr	r3, [r3, #0]
 8022c60:	68f9      	ldr	r1, [r7, #12]
 8022c62:	4618      	mov	r0, r3
 8022c64:	f000 fe2c 	bl	80238c0 <ip4_addr_isbroadcast_u32>
 8022c68:	4603      	mov	r3, r0
 8022c6a:	2b00      	cmp	r3, #0
 8022c6c:	d10c      	bne.n	8022c88 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8022c6e:	68bb      	ldr	r3, [r7, #8]
 8022c70:	681b      	ldr	r3, [r3, #0]
 8022c72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8022c76:	2be0      	cmp	r3, #224	; 0xe0
 8022c78:	d006      	beq.n	8022c88 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8022c7a:	68bb      	ldr	r3, [r7, #8]
 8022c7c:	2b00      	cmp	r3, #0
 8022c7e:	d003      	beq.n	8022c88 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8022c80:	68bb      	ldr	r3, [r7, #8]
 8022c82:	681b      	ldr	r3, [r3, #0]
 8022c84:	2b00      	cmp	r3, #0
 8022c86:	d102      	bne.n	8022c8e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8022c88:	f06f 030f 	mvn.w	r3, #15
 8022c8c:	e101      	b.n	8022e92 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8022c8e:	68fa      	ldr	r2, [r7, #12]
 8022c90:	2101      	movs	r1, #1
 8022c92:	68b8      	ldr	r0, [r7, #8]
 8022c94:	f7ff fb5c 	bl	8022350 <etharp_find_entry>
 8022c98:	4603      	mov	r3, r0
 8022c9a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8022c9c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8022ca0:	2b00      	cmp	r3, #0
 8022ca2:	da02      	bge.n	8022caa <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8022ca4:	8a7b      	ldrh	r3, [r7, #18]
 8022ca6:	b25b      	sxtb	r3, r3
 8022ca8:	e0f3      	b.n	8022e92 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8022caa:	8a7b      	ldrh	r3, [r7, #18]
 8022cac:	2b7e      	cmp	r3, #126	; 0x7e
 8022cae:	d906      	bls.n	8022cbe <etharp_query+0x7e>
 8022cb0:	4b7a      	ldr	r3, [pc, #488]	; (8022e9c <etharp_query+0x25c>)
 8022cb2:	f240 32c1 	movw	r2, #961	; 0x3c1
 8022cb6:	497a      	ldr	r1, [pc, #488]	; (8022ea0 <etharp_query+0x260>)
 8022cb8:	487a      	ldr	r0, [pc, #488]	; (8022ea4 <etharp_query+0x264>)
 8022cba:	f002 fd77 	bl	80257ac <iprintf>
  i = (netif_addr_idx_t)i_err;
 8022cbe:	8a7b      	ldrh	r3, [r7, #18]
 8022cc0:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8022cc2:	7c7a      	ldrb	r2, [r7, #17]
 8022cc4:	4978      	ldr	r1, [pc, #480]	; (8022ea8 <etharp_query+0x268>)
 8022cc6:	4613      	mov	r3, r2
 8022cc8:	005b      	lsls	r3, r3, #1
 8022cca:	4413      	add	r3, r2
 8022ccc:	00db      	lsls	r3, r3, #3
 8022cce:	440b      	add	r3, r1
 8022cd0:	3314      	adds	r3, #20
 8022cd2:	781b      	ldrb	r3, [r3, #0]
 8022cd4:	2b00      	cmp	r3, #0
 8022cd6:	d115      	bne.n	8022d04 <etharp_query+0xc4>
    is_new_entry = 1;
 8022cd8:	2301      	movs	r3, #1
 8022cda:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8022cdc:	7c7a      	ldrb	r2, [r7, #17]
 8022cde:	4972      	ldr	r1, [pc, #456]	; (8022ea8 <etharp_query+0x268>)
 8022ce0:	4613      	mov	r3, r2
 8022ce2:	005b      	lsls	r3, r3, #1
 8022ce4:	4413      	add	r3, r2
 8022ce6:	00db      	lsls	r3, r3, #3
 8022ce8:	440b      	add	r3, r1
 8022cea:	3314      	adds	r3, #20
 8022cec:	2201      	movs	r2, #1
 8022cee:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8022cf0:	7c7a      	ldrb	r2, [r7, #17]
 8022cf2:	496d      	ldr	r1, [pc, #436]	; (8022ea8 <etharp_query+0x268>)
 8022cf4:	4613      	mov	r3, r2
 8022cf6:	005b      	lsls	r3, r3, #1
 8022cf8:	4413      	add	r3, r2
 8022cfa:	00db      	lsls	r3, r3, #3
 8022cfc:	440b      	add	r3, r1
 8022cfe:	3308      	adds	r3, #8
 8022d00:	68fa      	ldr	r2, [r7, #12]
 8022d02:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8022d04:	7c7a      	ldrb	r2, [r7, #17]
 8022d06:	4968      	ldr	r1, [pc, #416]	; (8022ea8 <etharp_query+0x268>)
 8022d08:	4613      	mov	r3, r2
 8022d0a:	005b      	lsls	r3, r3, #1
 8022d0c:	4413      	add	r3, r2
 8022d0e:	00db      	lsls	r3, r3, #3
 8022d10:	440b      	add	r3, r1
 8022d12:	3314      	adds	r3, #20
 8022d14:	781b      	ldrb	r3, [r3, #0]
 8022d16:	2b01      	cmp	r3, #1
 8022d18:	d011      	beq.n	8022d3e <etharp_query+0xfe>
 8022d1a:	7c7a      	ldrb	r2, [r7, #17]
 8022d1c:	4962      	ldr	r1, [pc, #392]	; (8022ea8 <etharp_query+0x268>)
 8022d1e:	4613      	mov	r3, r2
 8022d20:	005b      	lsls	r3, r3, #1
 8022d22:	4413      	add	r3, r2
 8022d24:	00db      	lsls	r3, r3, #3
 8022d26:	440b      	add	r3, r1
 8022d28:	3314      	adds	r3, #20
 8022d2a:	781b      	ldrb	r3, [r3, #0]
 8022d2c:	2b01      	cmp	r3, #1
 8022d2e:	d806      	bhi.n	8022d3e <etharp_query+0xfe>
 8022d30:	4b5a      	ldr	r3, [pc, #360]	; (8022e9c <etharp_query+0x25c>)
 8022d32:	f240 32cd 	movw	r2, #973	; 0x3cd
 8022d36:	495d      	ldr	r1, [pc, #372]	; (8022eac <etharp_query+0x26c>)
 8022d38:	485a      	ldr	r0, [pc, #360]	; (8022ea4 <etharp_query+0x264>)
 8022d3a:	f002 fd37 	bl	80257ac <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8022d3e:	6a3b      	ldr	r3, [r7, #32]
 8022d40:	2b00      	cmp	r3, #0
 8022d42:	d102      	bne.n	8022d4a <etharp_query+0x10a>
 8022d44:	687b      	ldr	r3, [r7, #4]
 8022d46:	2b00      	cmp	r3, #0
 8022d48:	d10c      	bne.n	8022d64 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8022d4a:	68b9      	ldr	r1, [r7, #8]
 8022d4c:	68f8      	ldr	r0, [r7, #12]
 8022d4e:	f000 f963 	bl	8023018 <etharp_request>
 8022d52:	4603      	mov	r3, r0
 8022d54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8022d58:	687b      	ldr	r3, [r7, #4]
 8022d5a:	2b00      	cmp	r3, #0
 8022d5c:	d102      	bne.n	8022d64 <etharp_query+0x124>
      return result;
 8022d5e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8022d62:	e096      	b.n	8022e92 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8022d64:	687b      	ldr	r3, [r7, #4]
 8022d66:	2b00      	cmp	r3, #0
 8022d68:	d106      	bne.n	8022d78 <etharp_query+0x138>
 8022d6a:	4b4c      	ldr	r3, [pc, #304]	; (8022e9c <etharp_query+0x25c>)
 8022d6c:	f240 32e1 	movw	r2, #993	; 0x3e1
 8022d70:	494f      	ldr	r1, [pc, #316]	; (8022eb0 <etharp_query+0x270>)
 8022d72:	484c      	ldr	r0, [pc, #304]	; (8022ea4 <etharp_query+0x264>)
 8022d74:	f002 fd1a 	bl	80257ac <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8022d78:	7c7a      	ldrb	r2, [r7, #17]
 8022d7a:	494b      	ldr	r1, [pc, #300]	; (8022ea8 <etharp_query+0x268>)
 8022d7c:	4613      	mov	r3, r2
 8022d7e:	005b      	lsls	r3, r3, #1
 8022d80:	4413      	add	r3, r2
 8022d82:	00db      	lsls	r3, r3, #3
 8022d84:	440b      	add	r3, r1
 8022d86:	3314      	adds	r3, #20
 8022d88:	781b      	ldrb	r3, [r3, #0]
 8022d8a:	2b01      	cmp	r3, #1
 8022d8c:	d917      	bls.n	8022dbe <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8022d8e:	4a49      	ldr	r2, [pc, #292]	; (8022eb4 <etharp_query+0x274>)
 8022d90:	7c7b      	ldrb	r3, [r7, #17]
 8022d92:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8022d94:	7c7a      	ldrb	r2, [r7, #17]
 8022d96:	4613      	mov	r3, r2
 8022d98:	005b      	lsls	r3, r3, #1
 8022d9a:	4413      	add	r3, r2
 8022d9c:	00db      	lsls	r3, r3, #3
 8022d9e:	3308      	adds	r3, #8
 8022da0:	4a41      	ldr	r2, [pc, #260]	; (8022ea8 <etharp_query+0x268>)
 8022da2:	4413      	add	r3, r2
 8022da4:	3304      	adds	r3, #4
 8022da6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8022daa:	9200      	str	r2, [sp, #0]
 8022dac:	697a      	ldr	r2, [r7, #20]
 8022dae:	6879      	ldr	r1, [r7, #4]
 8022db0:	68f8      	ldr	r0, [r7, #12]
 8022db2:	f001 fc93 	bl	80246dc <ethernet_output>
 8022db6:	4603      	mov	r3, r0
 8022db8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8022dbc:	e067      	b.n	8022e8e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8022dbe:	7c7a      	ldrb	r2, [r7, #17]
 8022dc0:	4939      	ldr	r1, [pc, #228]	; (8022ea8 <etharp_query+0x268>)
 8022dc2:	4613      	mov	r3, r2
 8022dc4:	005b      	lsls	r3, r3, #1
 8022dc6:	4413      	add	r3, r2
 8022dc8:	00db      	lsls	r3, r3, #3
 8022dca:	440b      	add	r3, r1
 8022dcc:	3314      	adds	r3, #20
 8022dce:	781b      	ldrb	r3, [r3, #0]
 8022dd0:	2b01      	cmp	r3, #1
 8022dd2:	d15c      	bne.n	8022e8e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8022dd4:	2300      	movs	r3, #0
 8022dd6:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8022dd8:	687b      	ldr	r3, [r7, #4]
 8022dda:	61fb      	str	r3, [r7, #28]
    while (p) {
 8022ddc:	e01c      	b.n	8022e18 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8022dde:	69fb      	ldr	r3, [r7, #28]
 8022de0:	895a      	ldrh	r2, [r3, #10]
 8022de2:	69fb      	ldr	r3, [r7, #28]
 8022de4:	891b      	ldrh	r3, [r3, #8]
 8022de6:	429a      	cmp	r2, r3
 8022de8:	d10a      	bne.n	8022e00 <etharp_query+0x1c0>
 8022dea:	69fb      	ldr	r3, [r7, #28]
 8022dec:	681b      	ldr	r3, [r3, #0]
 8022dee:	2b00      	cmp	r3, #0
 8022df0:	d006      	beq.n	8022e00 <etharp_query+0x1c0>
 8022df2:	4b2a      	ldr	r3, [pc, #168]	; (8022e9c <etharp_query+0x25c>)
 8022df4:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8022df8:	492f      	ldr	r1, [pc, #188]	; (8022eb8 <etharp_query+0x278>)
 8022dfa:	482a      	ldr	r0, [pc, #168]	; (8022ea4 <etharp_query+0x264>)
 8022dfc:	f002 fcd6 	bl	80257ac <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8022e00:	69fb      	ldr	r3, [r7, #28]
 8022e02:	7b1b      	ldrb	r3, [r3, #12]
 8022e04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8022e08:	2b00      	cmp	r3, #0
 8022e0a:	d002      	beq.n	8022e12 <etharp_query+0x1d2>
        copy_needed = 1;
 8022e0c:	2301      	movs	r3, #1
 8022e0e:	61bb      	str	r3, [r7, #24]
        break;
 8022e10:	e005      	b.n	8022e1e <etharp_query+0x1de>
      }
      p = p->next;
 8022e12:	69fb      	ldr	r3, [r7, #28]
 8022e14:	681b      	ldr	r3, [r3, #0]
 8022e16:	61fb      	str	r3, [r7, #28]
    while (p) {
 8022e18:	69fb      	ldr	r3, [r7, #28]
 8022e1a:	2b00      	cmp	r3, #0
 8022e1c:	d1df      	bne.n	8022dde <etharp_query+0x19e>
    }
    if (copy_needed) {
 8022e1e:	69bb      	ldr	r3, [r7, #24]
 8022e20:	2b00      	cmp	r3, #0
 8022e22:	d007      	beq.n	8022e34 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8022e24:	687a      	ldr	r2, [r7, #4]
 8022e26:	f44f 7120 	mov.w	r1, #640	; 0x280
 8022e2a:	200e      	movs	r0, #14
 8022e2c:	f7f6 fbe8 	bl	8019600 <pbuf_clone>
 8022e30:	61f8      	str	r0, [r7, #28]
 8022e32:	e004      	b.n	8022e3e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8022e34:	687b      	ldr	r3, [r7, #4]
 8022e36:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8022e38:	69f8      	ldr	r0, [r7, #28]
 8022e3a:	f7f6 f9e5 	bl	8019208 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8022e3e:	69fb      	ldr	r3, [r7, #28]
 8022e40:	2b00      	cmp	r3, #0
 8022e42:	d021      	beq.n	8022e88 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8022e44:	7c7a      	ldrb	r2, [r7, #17]
 8022e46:	4918      	ldr	r1, [pc, #96]	; (8022ea8 <etharp_query+0x268>)
 8022e48:	4613      	mov	r3, r2
 8022e4a:	005b      	lsls	r3, r3, #1
 8022e4c:	4413      	add	r3, r2
 8022e4e:	00db      	lsls	r3, r3, #3
 8022e50:	440b      	add	r3, r1
 8022e52:	681b      	ldr	r3, [r3, #0]
 8022e54:	2b00      	cmp	r3, #0
 8022e56:	d00a      	beq.n	8022e6e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8022e58:	7c7a      	ldrb	r2, [r7, #17]
 8022e5a:	4913      	ldr	r1, [pc, #76]	; (8022ea8 <etharp_query+0x268>)
 8022e5c:	4613      	mov	r3, r2
 8022e5e:	005b      	lsls	r3, r3, #1
 8022e60:	4413      	add	r3, r2
 8022e62:	00db      	lsls	r3, r3, #3
 8022e64:	440b      	add	r3, r1
 8022e66:	681b      	ldr	r3, [r3, #0]
 8022e68:	4618      	mov	r0, r3
 8022e6a:	f7f6 f927 	bl	80190bc <pbuf_free>
      }
      arp_table[i].q = p;
 8022e6e:	7c7a      	ldrb	r2, [r7, #17]
 8022e70:	490d      	ldr	r1, [pc, #52]	; (8022ea8 <etharp_query+0x268>)
 8022e72:	4613      	mov	r3, r2
 8022e74:	005b      	lsls	r3, r3, #1
 8022e76:	4413      	add	r3, r2
 8022e78:	00db      	lsls	r3, r3, #3
 8022e7a:	440b      	add	r3, r1
 8022e7c:	69fa      	ldr	r2, [r7, #28]
 8022e7e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8022e80:	2300      	movs	r3, #0
 8022e82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8022e86:	e002      	b.n	8022e8e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8022e88:	23ff      	movs	r3, #255	; 0xff
 8022e8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8022e8e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8022e92:	4618      	mov	r0, r3
 8022e94:	3728      	adds	r7, #40	; 0x28
 8022e96:	46bd      	mov	sp, r7
 8022e98:	bd80      	pop	{r7, pc}
 8022e9a:	bf00      	nop
 8022e9c:	0802db28 	.word	0x0802db28
 8022ea0:	0802dcd4 	.word	0x0802dcd4
 8022ea4:	0802dba0 	.word	0x0802dba0
 8022ea8:	2001382c 	.word	0x2001382c
 8022eac:	0802dce4 	.word	0x0802dce4
 8022eb0:	0802dcc8 	.word	0x0802dcc8
 8022eb4:	2001391c 	.word	0x2001391c
 8022eb8:	0802dd0c 	.word	0x0802dd0c

08022ebc <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8022ebc:	b580      	push	{r7, lr}
 8022ebe:	b08a      	sub	sp, #40	; 0x28
 8022ec0:	af02      	add	r7, sp, #8
 8022ec2:	60f8      	str	r0, [r7, #12]
 8022ec4:	60b9      	str	r1, [r7, #8]
 8022ec6:	607a      	str	r2, [r7, #4]
 8022ec8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8022eca:	2300      	movs	r3, #0
 8022ecc:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8022ece:	68fb      	ldr	r3, [r7, #12]
 8022ed0:	2b00      	cmp	r3, #0
 8022ed2:	d106      	bne.n	8022ee2 <etharp_raw+0x26>
 8022ed4:	4b3a      	ldr	r3, [pc, #232]	; (8022fc0 <etharp_raw+0x104>)
 8022ed6:	f240 4257 	movw	r2, #1111	; 0x457
 8022eda:	493a      	ldr	r1, [pc, #232]	; (8022fc4 <etharp_raw+0x108>)
 8022edc:	483a      	ldr	r0, [pc, #232]	; (8022fc8 <etharp_raw+0x10c>)
 8022ede:	f002 fc65 	bl	80257ac <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8022ee2:	f44f 7220 	mov.w	r2, #640	; 0x280
 8022ee6:	211c      	movs	r1, #28
 8022ee8:	200e      	movs	r0, #14
 8022eea:	f7f5 fe03 	bl	8018af4 <pbuf_alloc>
 8022eee:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8022ef0:	69bb      	ldr	r3, [r7, #24]
 8022ef2:	2b00      	cmp	r3, #0
 8022ef4:	d102      	bne.n	8022efc <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8022ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8022efa:	e05d      	b.n	8022fb8 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8022efc:	69bb      	ldr	r3, [r7, #24]
 8022efe:	895b      	ldrh	r3, [r3, #10]
 8022f00:	2b1b      	cmp	r3, #27
 8022f02:	d806      	bhi.n	8022f12 <etharp_raw+0x56>
 8022f04:	4b2e      	ldr	r3, [pc, #184]	; (8022fc0 <etharp_raw+0x104>)
 8022f06:	f240 4262 	movw	r2, #1122	; 0x462
 8022f0a:	4930      	ldr	r1, [pc, #192]	; (8022fcc <etharp_raw+0x110>)
 8022f0c:	482e      	ldr	r0, [pc, #184]	; (8022fc8 <etharp_raw+0x10c>)
 8022f0e:	f002 fc4d 	bl	80257ac <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8022f12:	69bb      	ldr	r3, [r7, #24]
 8022f14:	685b      	ldr	r3, [r3, #4]
 8022f16:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8022f18:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8022f1a:	4618      	mov	r0, r3
 8022f1c:	f7f4 fcee 	bl	80178fc <lwip_htons>
 8022f20:	4603      	mov	r3, r0
 8022f22:	461a      	mov	r2, r3
 8022f24:	697b      	ldr	r3, [r7, #20]
 8022f26:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8022f28:	68fb      	ldr	r3, [r7, #12]
 8022f2a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8022f2e:	2b06      	cmp	r3, #6
 8022f30:	d006      	beq.n	8022f40 <etharp_raw+0x84>
 8022f32:	4b23      	ldr	r3, [pc, #140]	; (8022fc0 <etharp_raw+0x104>)
 8022f34:	f240 4269 	movw	r2, #1129	; 0x469
 8022f38:	4925      	ldr	r1, [pc, #148]	; (8022fd0 <etharp_raw+0x114>)
 8022f3a:	4823      	ldr	r0, [pc, #140]	; (8022fc8 <etharp_raw+0x10c>)
 8022f3c:	f002 fc36 	bl	80257ac <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8022f40:	697b      	ldr	r3, [r7, #20]
 8022f42:	3308      	adds	r3, #8
 8022f44:	2206      	movs	r2, #6
 8022f46:	6839      	ldr	r1, [r7, #0]
 8022f48:	4618      	mov	r0, r3
 8022f4a:	f001 fd5b 	bl	8024a04 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8022f4e:	697b      	ldr	r3, [r7, #20]
 8022f50:	3312      	adds	r3, #18
 8022f52:	2206      	movs	r2, #6
 8022f54:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8022f56:	4618      	mov	r0, r3
 8022f58:	f001 fd54 	bl	8024a04 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8022f5c:	697b      	ldr	r3, [r7, #20]
 8022f5e:	330e      	adds	r3, #14
 8022f60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8022f62:	6812      	ldr	r2, [r2, #0]
 8022f64:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8022f66:	697b      	ldr	r3, [r7, #20]
 8022f68:	3318      	adds	r3, #24
 8022f6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8022f6c:	6812      	ldr	r2, [r2, #0]
 8022f6e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8022f70:	697b      	ldr	r3, [r7, #20]
 8022f72:	2200      	movs	r2, #0
 8022f74:	701a      	strb	r2, [r3, #0]
 8022f76:	2200      	movs	r2, #0
 8022f78:	f042 0201 	orr.w	r2, r2, #1
 8022f7c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8022f7e:	697b      	ldr	r3, [r7, #20]
 8022f80:	2200      	movs	r2, #0
 8022f82:	f042 0208 	orr.w	r2, r2, #8
 8022f86:	709a      	strb	r2, [r3, #2]
 8022f88:	2200      	movs	r2, #0
 8022f8a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8022f8c:	697b      	ldr	r3, [r7, #20]
 8022f8e:	2206      	movs	r2, #6
 8022f90:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8022f92:	697b      	ldr	r3, [r7, #20]
 8022f94:	2204      	movs	r2, #4
 8022f96:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8022f98:	f640 0306 	movw	r3, #2054	; 0x806
 8022f9c:	9300      	str	r3, [sp, #0]
 8022f9e:	687b      	ldr	r3, [r7, #4]
 8022fa0:	68ba      	ldr	r2, [r7, #8]
 8022fa2:	69b9      	ldr	r1, [r7, #24]
 8022fa4:	68f8      	ldr	r0, [r7, #12]
 8022fa6:	f001 fb99 	bl	80246dc <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8022faa:	69b8      	ldr	r0, [r7, #24]
 8022fac:	f7f6 f886 	bl	80190bc <pbuf_free>
  p = NULL;
 8022fb0:	2300      	movs	r3, #0
 8022fb2:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8022fb4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8022fb8:	4618      	mov	r0, r3
 8022fba:	3720      	adds	r7, #32
 8022fbc:	46bd      	mov	sp, r7
 8022fbe:	bd80      	pop	{r7, pc}
 8022fc0:	0802db28 	.word	0x0802db28
 8022fc4:	0802dc78 	.word	0x0802dc78
 8022fc8:	0802dba0 	.word	0x0802dba0
 8022fcc:	0802dd28 	.word	0x0802dd28
 8022fd0:	0802dd5c 	.word	0x0802dd5c

08022fd4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8022fd4:	b580      	push	{r7, lr}
 8022fd6:	b088      	sub	sp, #32
 8022fd8:	af04      	add	r7, sp, #16
 8022fda:	60f8      	str	r0, [r7, #12]
 8022fdc:	60b9      	str	r1, [r7, #8]
 8022fde:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8022fe0:	68fb      	ldr	r3, [r7, #12]
 8022fe2:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8022fe6:	68fb      	ldr	r3, [r7, #12]
 8022fe8:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8022fec:	68fb      	ldr	r3, [r7, #12]
 8022fee:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8022ff0:	2201      	movs	r2, #1
 8022ff2:	9203      	str	r2, [sp, #12]
 8022ff4:	68ba      	ldr	r2, [r7, #8]
 8022ff6:	9202      	str	r2, [sp, #8]
 8022ff8:	4a06      	ldr	r2, [pc, #24]	; (8023014 <etharp_request_dst+0x40>)
 8022ffa:	9201      	str	r2, [sp, #4]
 8022ffc:	9300      	str	r3, [sp, #0]
 8022ffe:	4603      	mov	r3, r0
 8023000:	687a      	ldr	r2, [r7, #4]
 8023002:	68f8      	ldr	r0, [r7, #12]
 8023004:	f7ff ff5a 	bl	8022ebc <etharp_raw>
 8023008:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 802300a:	4618      	mov	r0, r3
 802300c:	3710      	adds	r7, #16
 802300e:	46bd      	mov	sp, r7
 8023010:	bd80      	pop	{r7, pc}
 8023012:	bf00      	nop
 8023014:	0802e478 	.word	0x0802e478

08023018 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8023018:	b580      	push	{r7, lr}
 802301a:	b082      	sub	sp, #8
 802301c:	af00      	add	r7, sp, #0
 802301e:	6078      	str	r0, [r7, #4]
 8023020:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8023022:	4a05      	ldr	r2, [pc, #20]	; (8023038 <etharp_request+0x20>)
 8023024:	6839      	ldr	r1, [r7, #0]
 8023026:	6878      	ldr	r0, [r7, #4]
 8023028:	f7ff ffd4 	bl	8022fd4 <etharp_request_dst>
 802302c:	4603      	mov	r3, r0
}
 802302e:	4618      	mov	r0, r3
 8023030:	3708      	adds	r7, #8
 8023032:	46bd      	mov	sp, r7
 8023034:	bd80      	pop	{r7, pc}
 8023036:	bf00      	nop
 8023038:	0802e470 	.word	0x0802e470

0802303c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 802303c:	b580      	push	{r7, lr}
 802303e:	b08e      	sub	sp, #56	; 0x38
 8023040:	af04      	add	r7, sp, #16
 8023042:	6078      	str	r0, [r7, #4]
 8023044:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8023046:	4b79      	ldr	r3, [pc, #484]	; (802322c <icmp_input+0x1f0>)
 8023048:	689b      	ldr	r3, [r3, #8]
 802304a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 802304c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802304e:	781b      	ldrb	r3, [r3, #0]
 8023050:	f003 030f 	and.w	r3, r3, #15
 8023054:	b2db      	uxtb	r3, r3
 8023056:	009b      	lsls	r3, r3, #2
 8023058:	b2db      	uxtb	r3, r3
 802305a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 802305c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 802305e:	2b13      	cmp	r3, #19
 8023060:	f240 80cd 	bls.w	80231fe <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8023064:	687b      	ldr	r3, [r7, #4]
 8023066:	895b      	ldrh	r3, [r3, #10]
 8023068:	2b03      	cmp	r3, #3
 802306a:	f240 80ca 	bls.w	8023202 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 802306e:	687b      	ldr	r3, [r7, #4]
 8023070:	685b      	ldr	r3, [r3, #4]
 8023072:	781b      	ldrb	r3, [r3, #0]
 8023074:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8023078:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 802307c:	2b00      	cmp	r3, #0
 802307e:	f000 80b7 	beq.w	80231f0 <icmp_input+0x1b4>
 8023082:	2b08      	cmp	r3, #8
 8023084:	f040 80b7 	bne.w	80231f6 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8023088:	4b69      	ldr	r3, [pc, #420]	; (8023230 <icmp_input+0x1f4>)
 802308a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 802308c:	4b67      	ldr	r3, [pc, #412]	; (802322c <icmp_input+0x1f0>)
 802308e:	695b      	ldr	r3, [r3, #20]
 8023090:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8023094:	2be0      	cmp	r3, #224	; 0xe0
 8023096:	f000 80bb 	beq.w	8023210 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 802309a:	4b64      	ldr	r3, [pc, #400]	; (802322c <icmp_input+0x1f0>)
 802309c:	695b      	ldr	r3, [r3, #20]
 802309e:	4a63      	ldr	r2, [pc, #396]	; (802322c <icmp_input+0x1f0>)
 80230a0:	6812      	ldr	r2, [r2, #0]
 80230a2:	4611      	mov	r1, r2
 80230a4:	4618      	mov	r0, r3
 80230a6:	f000 fc0b 	bl	80238c0 <ip4_addr_isbroadcast_u32>
 80230aa:	4603      	mov	r3, r0
 80230ac:	2b00      	cmp	r3, #0
 80230ae:	f040 80b1 	bne.w	8023214 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80230b2:	687b      	ldr	r3, [r7, #4]
 80230b4:	891b      	ldrh	r3, [r3, #8]
 80230b6:	2b07      	cmp	r3, #7
 80230b8:	f240 80a5 	bls.w	8023206 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80230bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80230be:	330e      	adds	r3, #14
 80230c0:	4619      	mov	r1, r3
 80230c2:	6878      	ldr	r0, [r7, #4]
 80230c4:	f7f5 ff64 	bl	8018f90 <pbuf_add_header>
 80230c8:	4603      	mov	r3, r0
 80230ca:	2b00      	cmp	r3, #0
 80230cc:	d04b      	beq.n	8023166 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80230ce:	687b      	ldr	r3, [r7, #4]
 80230d0:	891a      	ldrh	r2, [r3, #8]
 80230d2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80230d4:	4413      	add	r3, r2
 80230d6:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80230d8:	687b      	ldr	r3, [r7, #4]
 80230da:	891b      	ldrh	r3, [r3, #8]
 80230dc:	8b7a      	ldrh	r2, [r7, #26]
 80230de:	429a      	cmp	r2, r3
 80230e0:	f0c0 809a 	bcc.w	8023218 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80230e4:	8b7b      	ldrh	r3, [r7, #26]
 80230e6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80230ea:	4619      	mov	r1, r3
 80230ec:	200e      	movs	r0, #14
 80230ee:	f7f5 fd01 	bl	8018af4 <pbuf_alloc>
 80230f2:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80230f4:	697b      	ldr	r3, [r7, #20]
 80230f6:	2b00      	cmp	r3, #0
 80230f8:	f000 8090 	beq.w	802321c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80230fc:	697b      	ldr	r3, [r7, #20]
 80230fe:	895b      	ldrh	r3, [r3, #10]
 8023100:	461a      	mov	r2, r3
 8023102:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8023104:	3308      	adds	r3, #8
 8023106:	429a      	cmp	r2, r3
 8023108:	d203      	bcs.n	8023112 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 802310a:	6978      	ldr	r0, [r7, #20]
 802310c:	f7f5 ffd6 	bl	80190bc <pbuf_free>
          goto icmperr;
 8023110:	e085      	b.n	802321e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8023112:	697b      	ldr	r3, [r7, #20]
 8023114:	685b      	ldr	r3, [r3, #4]
 8023116:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8023118:	6a79      	ldr	r1, [r7, #36]	; 0x24
 802311a:	4618      	mov	r0, r3
 802311c:	f001 fc72 	bl	8024a04 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8023120:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8023122:	4619      	mov	r1, r3
 8023124:	6978      	ldr	r0, [r7, #20]
 8023126:	f7f5 ff43 	bl	8018fb0 <pbuf_remove_header>
 802312a:	4603      	mov	r3, r0
 802312c:	2b00      	cmp	r3, #0
 802312e:	d009      	beq.n	8023144 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8023130:	4b40      	ldr	r3, [pc, #256]	; (8023234 <icmp_input+0x1f8>)
 8023132:	22b6      	movs	r2, #182	; 0xb6
 8023134:	4940      	ldr	r1, [pc, #256]	; (8023238 <icmp_input+0x1fc>)
 8023136:	4841      	ldr	r0, [pc, #260]	; (802323c <icmp_input+0x200>)
 8023138:	f002 fb38 	bl	80257ac <iprintf>
          pbuf_free(r);
 802313c:	6978      	ldr	r0, [r7, #20]
 802313e:	f7f5 ffbd 	bl	80190bc <pbuf_free>
          goto icmperr;
 8023142:	e06c      	b.n	802321e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8023144:	6879      	ldr	r1, [r7, #4]
 8023146:	6978      	ldr	r0, [r7, #20]
 8023148:	f7f6 f8ec 	bl	8019324 <pbuf_copy>
 802314c:	4603      	mov	r3, r0
 802314e:	2b00      	cmp	r3, #0
 8023150:	d003      	beq.n	802315a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8023152:	6978      	ldr	r0, [r7, #20]
 8023154:	f7f5 ffb2 	bl	80190bc <pbuf_free>
          goto icmperr;
 8023158:	e061      	b.n	802321e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 802315a:	6878      	ldr	r0, [r7, #4]
 802315c:	f7f5 ffae 	bl	80190bc <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8023160:	697b      	ldr	r3, [r7, #20]
 8023162:	607b      	str	r3, [r7, #4]
 8023164:	e00f      	b.n	8023186 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8023166:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8023168:	330e      	adds	r3, #14
 802316a:	4619      	mov	r1, r3
 802316c:	6878      	ldr	r0, [r7, #4]
 802316e:	f7f5 ff1f 	bl	8018fb0 <pbuf_remove_header>
 8023172:	4603      	mov	r3, r0
 8023174:	2b00      	cmp	r3, #0
 8023176:	d006      	beq.n	8023186 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8023178:	4b2e      	ldr	r3, [pc, #184]	; (8023234 <icmp_input+0x1f8>)
 802317a:	22c7      	movs	r2, #199	; 0xc7
 802317c:	4930      	ldr	r1, [pc, #192]	; (8023240 <icmp_input+0x204>)
 802317e:	482f      	ldr	r0, [pc, #188]	; (802323c <icmp_input+0x200>)
 8023180:	f002 fb14 	bl	80257ac <iprintf>
          goto icmperr;
 8023184:	e04b      	b.n	802321e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8023186:	687b      	ldr	r3, [r7, #4]
 8023188:	685b      	ldr	r3, [r3, #4]
 802318a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 802318c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 802318e:	4619      	mov	r1, r3
 8023190:	6878      	ldr	r0, [r7, #4]
 8023192:	f7f5 fefd 	bl	8018f90 <pbuf_add_header>
 8023196:	4603      	mov	r3, r0
 8023198:	2b00      	cmp	r3, #0
 802319a:	d12b      	bne.n	80231f4 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 802319c:	687b      	ldr	r3, [r7, #4]
 802319e:	685b      	ldr	r3, [r3, #4]
 80231a0:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80231a2:	69fb      	ldr	r3, [r7, #28]
 80231a4:	681a      	ldr	r2, [r3, #0]
 80231a6:	68fb      	ldr	r3, [r7, #12]
 80231a8:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80231aa:	4b20      	ldr	r3, [pc, #128]	; (802322c <icmp_input+0x1f0>)
 80231ac:	691a      	ldr	r2, [r3, #16]
 80231ae:	68fb      	ldr	r3, [r7, #12]
 80231b0:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80231b2:	693b      	ldr	r3, [r7, #16]
 80231b4:	2200      	movs	r2, #0
 80231b6:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 80231b8:	693b      	ldr	r3, [r7, #16]
 80231ba:	2200      	movs	r2, #0
 80231bc:	709a      	strb	r2, [r3, #2]
 80231be:	2200      	movs	r2, #0
 80231c0:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80231c2:	68fb      	ldr	r3, [r7, #12]
 80231c4:	22ff      	movs	r2, #255	; 0xff
 80231c6:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80231c8:	68fb      	ldr	r3, [r7, #12]
 80231ca:	2200      	movs	r2, #0
 80231cc:	729a      	strb	r2, [r3, #10]
 80231ce:	2200      	movs	r2, #0
 80231d0:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80231d2:	683b      	ldr	r3, [r7, #0]
 80231d4:	9302      	str	r3, [sp, #8]
 80231d6:	2301      	movs	r3, #1
 80231d8:	9301      	str	r3, [sp, #4]
 80231da:	2300      	movs	r3, #0
 80231dc:	9300      	str	r3, [sp, #0]
 80231de:	23ff      	movs	r3, #255	; 0xff
 80231e0:	2200      	movs	r2, #0
 80231e2:	69f9      	ldr	r1, [r7, #28]
 80231e4:	6878      	ldr	r0, [r7, #4]
 80231e6:	f000 fa93 	bl	8023710 <ip4_output_if>
 80231ea:	4603      	mov	r3, r0
 80231ec:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80231ee:	e001      	b.n	80231f4 <icmp_input+0x1b8>
      break;
 80231f0:	bf00      	nop
 80231f2:	e000      	b.n	80231f6 <icmp_input+0x1ba>
      break;
 80231f4:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80231f6:	6878      	ldr	r0, [r7, #4]
 80231f8:	f7f5 ff60 	bl	80190bc <pbuf_free>
  return;
 80231fc:	e013      	b.n	8023226 <icmp_input+0x1ea>
    goto lenerr;
 80231fe:	bf00      	nop
 8023200:	e002      	b.n	8023208 <icmp_input+0x1cc>
    goto lenerr;
 8023202:	bf00      	nop
 8023204:	e000      	b.n	8023208 <icmp_input+0x1cc>
        goto lenerr;
 8023206:	bf00      	nop
lenerr:
  pbuf_free(p);
 8023208:	6878      	ldr	r0, [r7, #4]
 802320a:	f7f5 ff57 	bl	80190bc <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 802320e:	e00a      	b.n	8023226 <icmp_input+0x1ea>
        goto icmperr;
 8023210:	bf00      	nop
 8023212:	e004      	b.n	802321e <icmp_input+0x1e2>
        goto icmperr;
 8023214:	bf00      	nop
 8023216:	e002      	b.n	802321e <icmp_input+0x1e2>
          goto icmperr;
 8023218:	bf00      	nop
 802321a:	e000      	b.n	802321e <icmp_input+0x1e2>
          goto icmperr;
 802321c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 802321e:	6878      	ldr	r0, [r7, #4]
 8023220:	f7f5 ff4c 	bl	80190bc <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8023224:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8023226:	3728      	adds	r7, #40	; 0x28
 8023228:	46bd      	mov	sp, r7
 802322a:	bd80      	pop	{r7, pc}
 802322c:	20017778 	.word	0x20017778
 8023230:	2001778c 	.word	0x2001778c
 8023234:	0802dda0 	.word	0x0802dda0
 8023238:	0802ddd8 	.word	0x0802ddd8
 802323c:	0802de10 	.word	0x0802de10
 8023240:	0802de38 	.word	0x0802de38

08023244 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8023244:	b580      	push	{r7, lr}
 8023246:	b082      	sub	sp, #8
 8023248:	af00      	add	r7, sp, #0
 802324a:	6078      	str	r0, [r7, #4]
 802324c:	460b      	mov	r3, r1
 802324e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8023250:	78fb      	ldrb	r3, [r7, #3]
 8023252:	461a      	mov	r2, r3
 8023254:	2103      	movs	r1, #3
 8023256:	6878      	ldr	r0, [r7, #4]
 8023258:	f000 f814 	bl	8023284 <icmp_send_response>
}
 802325c:	bf00      	nop
 802325e:	3708      	adds	r7, #8
 8023260:	46bd      	mov	sp, r7
 8023262:	bd80      	pop	{r7, pc}

08023264 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8023264:	b580      	push	{r7, lr}
 8023266:	b082      	sub	sp, #8
 8023268:	af00      	add	r7, sp, #0
 802326a:	6078      	str	r0, [r7, #4]
 802326c:	460b      	mov	r3, r1
 802326e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8023270:	78fb      	ldrb	r3, [r7, #3]
 8023272:	461a      	mov	r2, r3
 8023274:	210b      	movs	r1, #11
 8023276:	6878      	ldr	r0, [r7, #4]
 8023278:	f000 f804 	bl	8023284 <icmp_send_response>
}
 802327c:	bf00      	nop
 802327e:	3708      	adds	r7, #8
 8023280:	46bd      	mov	sp, r7
 8023282:	bd80      	pop	{r7, pc}

08023284 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8023284:	b580      	push	{r7, lr}
 8023286:	b08c      	sub	sp, #48	; 0x30
 8023288:	af04      	add	r7, sp, #16
 802328a:	6078      	str	r0, [r7, #4]
 802328c:	460b      	mov	r3, r1
 802328e:	70fb      	strb	r3, [r7, #3]
 8023290:	4613      	mov	r3, r2
 8023292:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8023294:	f44f 7220 	mov.w	r2, #640	; 0x280
 8023298:	2124      	movs	r1, #36	; 0x24
 802329a:	2022      	movs	r0, #34	; 0x22
 802329c:	f7f5 fc2a 	bl	8018af4 <pbuf_alloc>
 80232a0:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80232a2:	69fb      	ldr	r3, [r7, #28]
 80232a4:	2b00      	cmp	r3, #0
 80232a6:	d04c      	beq.n	8023342 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80232a8:	69fb      	ldr	r3, [r7, #28]
 80232aa:	895b      	ldrh	r3, [r3, #10]
 80232ac:	2b23      	cmp	r3, #35	; 0x23
 80232ae:	d806      	bhi.n	80232be <icmp_send_response+0x3a>
 80232b0:	4b26      	ldr	r3, [pc, #152]	; (802334c <icmp_send_response+0xc8>)
 80232b2:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80232b6:	4926      	ldr	r1, [pc, #152]	; (8023350 <icmp_send_response+0xcc>)
 80232b8:	4826      	ldr	r0, [pc, #152]	; (8023354 <icmp_send_response+0xd0>)
 80232ba:	f002 fa77 	bl	80257ac <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80232be:	687b      	ldr	r3, [r7, #4]
 80232c0:	685b      	ldr	r3, [r3, #4]
 80232c2:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80232c4:	69fb      	ldr	r3, [r7, #28]
 80232c6:	685b      	ldr	r3, [r3, #4]
 80232c8:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80232ca:	697b      	ldr	r3, [r7, #20]
 80232cc:	78fa      	ldrb	r2, [r7, #3]
 80232ce:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80232d0:	697b      	ldr	r3, [r7, #20]
 80232d2:	78ba      	ldrb	r2, [r7, #2]
 80232d4:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80232d6:	697b      	ldr	r3, [r7, #20]
 80232d8:	2200      	movs	r2, #0
 80232da:	711a      	strb	r2, [r3, #4]
 80232dc:	2200      	movs	r2, #0
 80232de:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80232e0:	697b      	ldr	r3, [r7, #20]
 80232e2:	2200      	movs	r2, #0
 80232e4:	719a      	strb	r2, [r3, #6]
 80232e6:	2200      	movs	r2, #0
 80232e8:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80232ea:	69fb      	ldr	r3, [r7, #28]
 80232ec:	685b      	ldr	r3, [r3, #4]
 80232ee:	f103 0008 	add.w	r0, r3, #8
 80232f2:	687b      	ldr	r3, [r7, #4]
 80232f4:	685b      	ldr	r3, [r3, #4]
 80232f6:	221c      	movs	r2, #28
 80232f8:	4619      	mov	r1, r3
 80232fa:	f001 fb83 	bl	8024a04 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80232fe:	69bb      	ldr	r3, [r7, #24]
 8023300:	68db      	ldr	r3, [r3, #12]
 8023302:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8023304:	f107 030c 	add.w	r3, r7, #12
 8023308:	4618      	mov	r0, r3
 802330a:	f000 f825 	bl	8023358 <ip4_route>
 802330e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8023310:	693b      	ldr	r3, [r7, #16]
 8023312:	2b00      	cmp	r3, #0
 8023314:	d011      	beq.n	802333a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8023316:	697b      	ldr	r3, [r7, #20]
 8023318:	2200      	movs	r2, #0
 802331a:	709a      	strb	r2, [r3, #2]
 802331c:	2200      	movs	r2, #0
 802331e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8023320:	f107 020c 	add.w	r2, r7, #12
 8023324:	693b      	ldr	r3, [r7, #16]
 8023326:	9302      	str	r3, [sp, #8]
 8023328:	2301      	movs	r3, #1
 802332a:	9301      	str	r3, [sp, #4]
 802332c:	2300      	movs	r3, #0
 802332e:	9300      	str	r3, [sp, #0]
 8023330:	23ff      	movs	r3, #255	; 0xff
 8023332:	2100      	movs	r1, #0
 8023334:	69f8      	ldr	r0, [r7, #28]
 8023336:	f000 f9eb 	bl	8023710 <ip4_output_if>
  }
  pbuf_free(q);
 802333a:	69f8      	ldr	r0, [r7, #28]
 802333c:	f7f5 febe 	bl	80190bc <pbuf_free>
 8023340:	e000      	b.n	8023344 <icmp_send_response+0xc0>
    return;
 8023342:	bf00      	nop
}
 8023344:	3720      	adds	r7, #32
 8023346:	46bd      	mov	sp, r7
 8023348:	bd80      	pop	{r7, pc}
 802334a:	bf00      	nop
 802334c:	0802dda0 	.word	0x0802dda0
 8023350:	0802de6c 	.word	0x0802de6c
 8023354:	0802de10 	.word	0x0802de10

08023358 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8023358:	b480      	push	{r7}
 802335a:	b085      	sub	sp, #20
 802335c:	af00      	add	r7, sp, #0
 802335e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8023360:	4b33      	ldr	r3, [pc, #204]	; (8023430 <ip4_route+0xd8>)
 8023362:	681b      	ldr	r3, [r3, #0]
 8023364:	60fb      	str	r3, [r7, #12]
 8023366:	e036      	b.n	80233d6 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8023368:	68fb      	ldr	r3, [r7, #12]
 802336a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 802336e:	f003 0301 	and.w	r3, r3, #1
 8023372:	b2db      	uxtb	r3, r3
 8023374:	2b00      	cmp	r3, #0
 8023376:	d02b      	beq.n	80233d0 <ip4_route+0x78>
 8023378:	68fb      	ldr	r3, [r7, #12]
 802337a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 802337e:	089b      	lsrs	r3, r3, #2
 8023380:	f003 0301 	and.w	r3, r3, #1
 8023384:	b2db      	uxtb	r3, r3
 8023386:	2b00      	cmp	r3, #0
 8023388:	d022      	beq.n	80233d0 <ip4_route+0x78>
 802338a:	68fb      	ldr	r3, [r7, #12]
 802338c:	3304      	adds	r3, #4
 802338e:	681b      	ldr	r3, [r3, #0]
 8023390:	2b00      	cmp	r3, #0
 8023392:	d01d      	beq.n	80233d0 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8023394:	687b      	ldr	r3, [r7, #4]
 8023396:	681a      	ldr	r2, [r3, #0]
 8023398:	68fb      	ldr	r3, [r7, #12]
 802339a:	3304      	adds	r3, #4
 802339c:	681b      	ldr	r3, [r3, #0]
 802339e:	405a      	eors	r2, r3
 80233a0:	68fb      	ldr	r3, [r7, #12]
 80233a2:	3308      	adds	r3, #8
 80233a4:	681b      	ldr	r3, [r3, #0]
 80233a6:	4013      	ands	r3, r2
 80233a8:	2b00      	cmp	r3, #0
 80233aa:	d101      	bne.n	80233b0 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80233ac:	68fb      	ldr	r3, [r7, #12]
 80233ae:	e038      	b.n	8023422 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80233b0:	68fb      	ldr	r3, [r7, #12]
 80233b2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80233b6:	f003 0302 	and.w	r3, r3, #2
 80233ba:	2b00      	cmp	r3, #0
 80233bc:	d108      	bne.n	80233d0 <ip4_route+0x78>
 80233be:	687b      	ldr	r3, [r7, #4]
 80233c0:	681a      	ldr	r2, [r3, #0]
 80233c2:	68fb      	ldr	r3, [r7, #12]
 80233c4:	330c      	adds	r3, #12
 80233c6:	681b      	ldr	r3, [r3, #0]
 80233c8:	429a      	cmp	r2, r3
 80233ca:	d101      	bne.n	80233d0 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80233cc:	68fb      	ldr	r3, [r7, #12]
 80233ce:	e028      	b.n	8023422 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80233d0:	68fb      	ldr	r3, [r7, #12]
 80233d2:	681b      	ldr	r3, [r3, #0]
 80233d4:	60fb      	str	r3, [r7, #12]
 80233d6:	68fb      	ldr	r3, [r7, #12]
 80233d8:	2b00      	cmp	r3, #0
 80233da:	d1c5      	bne.n	8023368 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80233dc:	4b15      	ldr	r3, [pc, #84]	; (8023434 <ip4_route+0xdc>)
 80233de:	681b      	ldr	r3, [r3, #0]
 80233e0:	2b00      	cmp	r3, #0
 80233e2:	d01a      	beq.n	802341a <ip4_route+0xc2>
 80233e4:	4b13      	ldr	r3, [pc, #76]	; (8023434 <ip4_route+0xdc>)
 80233e6:	681b      	ldr	r3, [r3, #0]
 80233e8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80233ec:	f003 0301 	and.w	r3, r3, #1
 80233f0:	2b00      	cmp	r3, #0
 80233f2:	d012      	beq.n	802341a <ip4_route+0xc2>
 80233f4:	4b0f      	ldr	r3, [pc, #60]	; (8023434 <ip4_route+0xdc>)
 80233f6:	681b      	ldr	r3, [r3, #0]
 80233f8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80233fc:	f003 0304 	and.w	r3, r3, #4
 8023400:	2b00      	cmp	r3, #0
 8023402:	d00a      	beq.n	802341a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8023404:	4b0b      	ldr	r3, [pc, #44]	; (8023434 <ip4_route+0xdc>)
 8023406:	681b      	ldr	r3, [r3, #0]
 8023408:	3304      	adds	r3, #4
 802340a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 802340c:	2b00      	cmp	r3, #0
 802340e:	d004      	beq.n	802341a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8023410:	687b      	ldr	r3, [r7, #4]
 8023412:	681b      	ldr	r3, [r3, #0]
 8023414:	b2db      	uxtb	r3, r3
 8023416:	2b7f      	cmp	r3, #127	; 0x7f
 8023418:	d101      	bne.n	802341e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 802341a:	2300      	movs	r3, #0
 802341c:	e001      	b.n	8023422 <ip4_route+0xca>
  }

  return netif_default;
 802341e:	4b05      	ldr	r3, [pc, #20]	; (8023434 <ip4_route+0xdc>)
 8023420:	681b      	ldr	r3, [r3, #0]
}
 8023422:	4618      	mov	r0, r3
 8023424:	3714      	adds	r7, #20
 8023426:	46bd      	mov	sp, r7
 8023428:	f85d 7b04 	ldr.w	r7, [sp], #4
 802342c:	4770      	bx	lr
 802342e:	bf00      	nop
 8023430:	2001bcfc 	.word	0x2001bcfc
 8023434:	2001bd00 	.word	0x2001bd00

08023438 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8023438:	b580      	push	{r7, lr}
 802343a:	b082      	sub	sp, #8
 802343c:	af00      	add	r7, sp, #0
 802343e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8023440:	687b      	ldr	r3, [r7, #4]
 8023442:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8023446:	f003 0301 	and.w	r3, r3, #1
 802344a:	b2db      	uxtb	r3, r3
 802344c:	2b00      	cmp	r3, #0
 802344e:	d016      	beq.n	802347e <ip4_input_accept+0x46>
 8023450:	687b      	ldr	r3, [r7, #4]
 8023452:	3304      	adds	r3, #4
 8023454:	681b      	ldr	r3, [r3, #0]
 8023456:	2b00      	cmp	r3, #0
 8023458:	d011      	beq.n	802347e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 802345a:	4b0b      	ldr	r3, [pc, #44]	; (8023488 <ip4_input_accept+0x50>)
 802345c:	695a      	ldr	r2, [r3, #20]
 802345e:	687b      	ldr	r3, [r7, #4]
 8023460:	3304      	adds	r3, #4
 8023462:	681b      	ldr	r3, [r3, #0]
 8023464:	429a      	cmp	r2, r3
 8023466:	d008      	beq.n	802347a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8023468:	4b07      	ldr	r3, [pc, #28]	; (8023488 <ip4_input_accept+0x50>)
 802346a:	695b      	ldr	r3, [r3, #20]
 802346c:	6879      	ldr	r1, [r7, #4]
 802346e:	4618      	mov	r0, r3
 8023470:	f000 fa26 	bl	80238c0 <ip4_addr_isbroadcast_u32>
 8023474:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8023476:	2b00      	cmp	r3, #0
 8023478:	d001      	beq.n	802347e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 802347a:	2301      	movs	r3, #1
 802347c:	e000      	b.n	8023480 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 802347e:	2300      	movs	r3, #0
}
 8023480:	4618      	mov	r0, r3
 8023482:	3708      	adds	r7, #8
 8023484:	46bd      	mov	sp, r7
 8023486:	bd80      	pop	{r7, pc}
 8023488:	20017778 	.word	0x20017778

0802348c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 802348c:	b580      	push	{r7, lr}
 802348e:	b088      	sub	sp, #32
 8023490:	af00      	add	r7, sp, #0
 8023492:	6078      	str	r0, [r7, #4]
 8023494:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8023496:	2301      	movs	r3, #1
 8023498:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 802349a:	687b      	ldr	r3, [r7, #4]
 802349c:	685b      	ldr	r3, [r3, #4]
 802349e:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 80234a0:	69fb      	ldr	r3, [r7, #28]
 80234a2:	781b      	ldrb	r3, [r3, #0]
 80234a4:	091b      	lsrs	r3, r3, #4
 80234a6:	b2db      	uxtb	r3, r3
 80234a8:	2b04      	cmp	r3, #4
 80234aa:	d004      	beq.n	80234b6 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80234ac:	6878      	ldr	r0, [r7, #4]
 80234ae:	f7f5 fe05 	bl	80190bc <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80234b2:	2300      	movs	r3, #0
 80234b4:	e123      	b.n	80236fe <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80234b6:	69fb      	ldr	r3, [r7, #28]
 80234b8:	781b      	ldrb	r3, [r3, #0]
 80234ba:	f003 030f 	and.w	r3, r3, #15
 80234be:	b2db      	uxtb	r3, r3
 80234c0:	009b      	lsls	r3, r3, #2
 80234c2:	b2db      	uxtb	r3, r3
 80234c4:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80234c6:	69fb      	ldr	r3, [r7, #28]
 80234c8:	885b      	ldrh	r3, [r3, #2]
 80234ca:	b29b      	uxth	r3, r3
 80234cc:	4618      	mov	r0, r3
 80234ce:	f7f4 fa15 	bl	80178fc <lwip_htons>
 80234d2:	4603      	mov	r3, r0
 80234d4:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80234d6:	687b      	ldr	r3, [r7, #4]
 80234d8:	891b      	ldrh	r3, [r3, #8]
 80234da:	8a3a      	ldrh	r2, [r7, #16]
 80234dc:	429a      	cmp	r2, r3
 80234de:	d204      	bcs.n	80234ea <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 80234e0:	8a3b      	ldrh	r3, [r7, #16]
 80234e2:	4619      	mov	r1, r3
 80234e4:	6878      	ldr	r0, [r7, #4]
 80234e6:	f7f5 fc63 	bl	8018db0 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80234ea:	687b      	ldr	r3, [r7, #4]
 80234ec:	895b      	ldrh	r3, [r3, #10]
 80234ee:	8a7a      	ldrh	r2, [r7, #18]
 80234f0:	429a      	cmp	r2, r3
 80234f2:	d807      	bhi.n	8023504 <ip4_input+0x78>
 80234f4:	687b      	ldr	r3, [r7, #4]
 80234f6:	891b      	ldrh	r3, [r3, #8]
 80234f8:	8a3a      	ldrh	r2, [r7, #16]
 80234fa:	429a      	cmp	r2, r3
 80234fc:	d802      	bhi.n	8023504 <ip4_input+0x78>
 80234fe:	8a7b      	ldrh	r3, [r7, #18]
 8023500:	2b13      	cmp	r3, #19
 8023502:	d804      	bhi.n	802350e <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8023504:	6878      	ldr	r0, [r7, #4]
 8023506:	f7f5 fdd9 	bl	80190bc <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 802350a:	2300      	movs	r3, #0
 802350c:	e0f7      	b.n	80236fe <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 802350e:	69fb      	ldr	r3, [r7, #28]
 8023510:	691b      	ldr	r3, [r3, #16]
 8023512:	4a7d      	ldr	r2, [pc, #500]	; (8023708 <ip4_input+0x27c>)
 8023514:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8023516:	69fb      	ldr	r3, [r7, #28]
 8023518:	68db      	ldr	r3, [r3, #12]
 802351a:	4a7b      	ldr	r2, [pc, #492]	; (8023708 <ip4_input+0x27c>)
 802351c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 802351e:	4b7a      	ldr	r3, [pc, #488]	; (8023708 <ip4_input+0x27c>)
 8023520:	695b      	ldr	r3, [r3, #20]
 8023522:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8023526:	2be0      	cmp	r3, #224	; 0xe0
 8023528:	d112      	bne.n	8023550 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 802352a:	683b      	ldr	r3, [r7, #0]
 802352c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8023530:	f003 0301 	and.w	r3, r3, #1
 8023534:	b2db      	uxtb	r3, r3
 8023536:	2b00      	cmp	r3, #0
 8023538:	d007      	beq.n	802354a <ip4_input+0xbe>
 802353a:	683b      	ldr	r3, [r7, #0]
 802353c:	3304      	adds	r3, #4
 802353e:	681b      	ldr	r3, [r3, #0]
 8023540:	2b00      	cmp	r3, #0
 8023542:	d002      	beq.n	802354a <ip4_input+0xbe>
      netif = inp;
 8023544:	683b      	ldr	r3, [r7, #0]
 8023546:	61bb      	str	r3, [r7, #24]
 8023548:	e02a      	b.n	80235a0 <ip4_input+0x114>
    } else {
      netif = NULL;
 802354a:	2300      	movs	r3, #0
 802354c:	61bb      	str	r3, [r7, #24]
 802354e:	e027      	b.n	80235a0 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8023550:	6838      	ldr	r0, [r7, #0]
 8023552:	f7ff ff71 	bl	8023438 <ip4_input_accept>
 8023556:	4603      	mov	r3, r0
 8023558:	2b00      	cmp	r3, #0
 802355a:	d002      	beq.n	8023562 <ip4_input+0xd6>
      netif = inp;
 802355c:	683b      	ldr	r3, [r7, #0]
 802355e:	61bb      	str	r3, [r7, #24]
 8023560:	e01e      	b.n	80235a0 <ip4_input+0x114>
    } else {
      netif = NULL;
 8023562:	2300      	movs	r3, #0
 8023564:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8023566:	4b68      	ldr	r3, [pc, #416]	; (8023708 <ip4_input+0x27c>)
 8023568:	695b      	ldr	r3, [r3, #20]
 802356a:	b2db      	uxtb	r3, r3
 802356c:	2b7f      	cmp	r3, #127	; 0x7f
 802356e:	d017      	beq.n	80235a0 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8023570:	4b66      	ldr	r3, [pc, #408]	; (802370c <ip4_input+0x280>)
 8023572:	681b      	ldr	r3, [r3, #0]
 8023574:	61bb      	str	r3, [r7, #24]
 8023576:	e00e      	b.n	8023596 <ip4_input+0x10a>
          if (netif == inp) {
 8023578:	69ba      	ldr	r2, [r7, #24]
 802357a:	683b      	ldr	r3, [r7, #0]
 802357c:	429a      	cmp	r2, r3
 802357e:	d006      	beq.n	802358e <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8023580:	69b8      	ldr	r0, [r7, #24]
 8023582:	f7ff ff59 	bl	8023438 <ip4_input_accept>
 8023586:	4603      	mov	r3, r0
 8023588:	2b00      	cmp	r3, #0
 802358a:	d108      	bne.n	802359e <ip4_input+0x112>
 802358c:	e000      	b.n	8023590 <ip4_input+0x104>
            continue;
 802358e:	bf00      	nop
        NETIF_FOREACH(netif) {
 8023590:	69bb      	ldr	r3, [r7, #24]
 8023592:	681b      	ldr	r3, [r3, #0]
 8023594:	61bb      	str	r3, [r7, #24]
 8023596:	69bb      	ldr	r3, [r7, #24]
 8023598:	2b00      	cmp	r3, #0
 802359a:	d1ed      	bne.n	8023578 <ip4_input+0xec>
 802359c:	e000      	b.n	80235a0 <ip4_input+0x114>
            break;
 802359e:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 80235a0:	69bb      	ldr	r3, [r7, #24]
 80235a2:	2b00      	cmp	r3, #0
 80235a4:	d111      	bne.n	80235ca <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 80235a6:	69fb      	ldr	r3, [r7, #28]
 80235a8:	7a5b      	ldrb	r3, [r3, #9]
 80235aa:	2b11      	cmp	r3, #17
 80235ac:	d10d      	bne.n	80235ca <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 80235ae:	8a7b      	ldrh	r3, [r7, #18]
 80235b0:	69fa      	ldr	r2, [r7, #28]
 80235b2:	4413      	add	r3, r2
 80235b4:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 80235b6:	68fb      	ldr	r3, [r7, #12]
 80235b8:	885b      	ldrh	r3, [r3, #2]
 80235ba:	b29b      	uxth	r3, r3
 80235bc:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 80235c0:	d103      	bne.n	80235ca <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 80235c2:	683b      	ldr	r3, [r7, #0]
 80235c4:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 80235c6:	2300      	movs	r3, #0
 80235c8:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 80235ca:	697b      	ldr	r3, [r7, #20]
 80235cc:	2b00      	cmp	r3, #0
 80235ce:	d017      	beq.n	8023600 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 80235d0:	4b4d      	ldr	r3, [pc, #308]	; (8023708 <ip4_input+0x27c>)
 80235d2:	691b      	ldr	r3, [r3, #16]
 80235d4:	2b00      	cmp	r3, #0
 80235d6:	d013      	beq.n	8023600 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80235d8:	4b4b      	ldr	r3, [pc, #300]	; (8023708 <ip4_input+0x27c>)
 80235da:	691b      	ldr	r3, [r3, #16]
 80235dc:	6839      	ldr	r1, [r7, #0]
 80235de:	4618      	mov	r0, r3
 80235e0:	f000 f96e 	bl	80238c0 <ip4_addr_isbroadcast_u32>
 80235e4:	4603      	mov	r3, r0
 80235e6:	2b00      	cmp	r3, #0
 80235e8:	d105      	bne.n	80235f6 <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80235ea:	4b47      	ldr	r3, [pc, #284]	; (8023708 <ip4_input+0x27c>)
 80235ec:	691b      	ldr	r3, [r3, #16]
 80235ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80235f2:	2be0      	cmp	r3, #224	; 0xe0
 80235f4:	d104      	bne.n	8023600 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80235f6:	6878      	ldr	r0, [r7, #4]
 80235f8:	f7f5 fd60 	bl	80190bc <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80235fc:	2300      	movs	r3, #0
 80235fe:	e07e      	b.n	80236fe <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8023600:	69bb      	ldr	r3, [r7, #24]
 8023602:	2b00      	cmp	r3, #0
 8023604:	d104      	bne.n	8023610 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8023606:	6878      	ldr	r0, [r7, #4]
 8023608:	f7f5 fd58 	bl	80190bc <pbuf_free>
    return ERR_OK;
 802360c:	2300      	movs	r3, #0
 802360e:	e076      	b.n	80236fe <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8023610:	69fb      	ldr	r3, [r7, #28]
 8023612:	88db      	ldrh	r3, [r3, #6]
 8023614:	b29b      	uxth	r3, r3
 8023616:	461a      	mov	r2, r3
 8023618:	f64f 733f 	movw	r3, #65343	; 0xff3f
 802361c:	4013      	ands	r3, r2
 802361e:	2b00      	cmp	r3, #0
 8023620:	d00b      	beq.n	802363a <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8023622:	6878      	ldr	r0, [r7, #4]
 8023624:	f000 fc92 	bl	8023f4c <ip4_reass>
 8023628:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 802362a:	687b      	ldr	r3, [r7, #4]
 802362c:	2b00      	cmp	r3, #0
 802362e:	d101      	bne.n	8023634 <ip4_input+0x1a8>
      return ERR_OK;
 8023630:	2300      	movs	r3, #0
 8023632:	e064      	b.n	80236fe <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8023634:	687b      	ldr	r3, [r7, #4]
 8023636:	685b      	ldr	r3, [r3, #4]
 8023638:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 802363a:	4a33      	ldr	r2, [pc, #204]	; (8023708 <ip4_input+0x27c>)
 802363c:	69bb      	ldr	r3, [r7, #24]
 802363e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8023640:	4a31      	ldr	r2, [pc, #196]	; (8023708 <ip4_input+0x27c>)
 8023642:	683b      	ldr	r3, [r7, #0]
 8023644:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8023646:	4a30      	ldr	r2, [pc, #192]	; (8023708 <ip4_input+0x27c>)
 8023648:	69fb      	ldr	r3, [r7, #28]
 802364a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 802364c:	69fb      	ldr	r3, [r7, #28]
 802364e:	781b      	ldrb	r3, [r3, #0]
 8023650:	f003 030f 	and.w	r3, r3, #15
 8023654:	b2db      	uxtb	r3, r3
 8023656:	009b      	lsls	r3, r3, #2
 8023658:	b2db      	uxtb	r3, r3
 802365a:	b29a      	uxth	r2, r3
 802365c:	4b2a      	ldr	r3, [pc, #168]	; (8023708 <ip4_input+0x27c>)
 802365e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8023660:	8a7b      	ldrh	r3, [r7, #18]
 8023662:	4619      	mov	r1, r3
 8023664:	6878      	ldr	r0, [r7, #4]
 8023666:	f7f5 fca3 	bl	8018fb0 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 802366a:	69fb      	ldr	r3, [r7, #28]
 802366c:	7a5b      	ldrb	r3, [r3, #9]
 802366e:	2b11      	cmp	r3, #17
 8023670:	d006      	beq.n	8023680 <ip4_input+0x1f4>
 8023672:	2b11      	cmp	r3, #17
 8023674:	dc13      	bgt.n	802369e <ip4_input+0x212>
 8023676:	2b01      	cmp	r3, #1
 8023678:	d00c      	beq.n	8023694 <ip4_input+0x208>
 802367a:	2b06      	cmp	r3, #6
 802367c:	d005      	beq.n	802368a <ip4_input+0x1fe>
 802367e:	e00e      	b.n	802369e <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8023680:	6839      	ldr	r1, [r7, #0]
 8023682:	6878      	ldr	r0, [r7, #4]
 8023684:	f7fc faea 	bl	801fc5c <udp_input>
        break;
 8023688:	e026      	b.n	80236d8 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 802368a:	6839      	ldr	r1, [r7, #0]
 802368c:	6878      	ldr	r0, [r7, #4]
 802368e:	f7f7 fe69 	bl	801b364 <tcp_input>
        break;
 8023692:	e021      	b.n	80236d8 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8023694:	6839      	ldr	r1, [r7, #0]
 8023696:	6878      	ldr	r0, [r7, #4]
 8023698:	f7ff fcd0 	bl	802303c <icmp_input>
        break;
 802369c:	e01c      	b.n	80236d8 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 802369e:	4b1a      	ldr	r3, [pc, #104]	; (8023708 <ip4_input+0x27c>)
 80236a0:	695b      	ldr	r3, [r3, #20]
 80236a2:	69b9      	ldr	r1, [r7, #24]
 80236a4:	4618      	mov	r0, r3
 80236a6:	f000 f90b 	bl	80238c0 <ip4_addr_isbroadcast_u32>
 80236aa:	4603      	mov	r3, r0
 80236ac:	2b00      	cmp	r3, #0
 80236ae:	d10f      	bne.n	80236d0 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80236b0:	4b15      	ldr	r3, [pc, #84]	; (8023708 <ip4_input+0x27c>)
 80236b2:	695b      	ldr	r3, [r3, #20]
 80236b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80236b8:	2be0      	cmp	r3, #224	; 0xe0
 80236ba:	d009      	beq.n	80236d0 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80236bc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80236c0:	4619      	mov	r1, r3
 80236c2:	6878      	ldr	r0, [r7, #4]
 80236c4:	f7f5 fce7 	bl	8019096 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80236c8:	2102      	movs	r1, #2
 80236ca:	6878      	ldr	r0, [r7, #4]
 80236cc:	f7ff fdba 	bl	8023244 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80236d0:	6878      	ldr	r0, [r7, #4]
 80236d2:	f7f5 fcf3 	bl	80190bc <pbuf_free>
        break;
 80236d6:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80236d8:	4b0b      	ldr	r3, [pc, #44]	; (8023708 <ip4_input+0x27c>)
 80236da:	2200      	movs	r2, #0
 80236dc:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80236de:	4b0a      	ldr	r3, [pc, #40]	; (8023708 <ip4_input+0x27c>)
 80236e0:	2200      	movs	r2, #0
 80236e2:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80236e4:	4b08      	ldr	r3, [pc, #32]	; (8023708 <ip4_input+0x27c>)
 80236e6:	2200      	movs	r2, #0
 80236e8:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80236ea:	4b07      	ldr	r3, [pc, #28]	; (8023708 <ip4_input+0x27c>)
 80236ec:	2200      	movs	r2, #0
 80236ee:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80236f0:	4b05      	ldr	r3, [pc, #20]	; (8023708 <ip4_input+0x27c>)
 80236f2:	2200      	movs	r2, #0
 80236f4:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80236f6:	4b04      	ldr	r3, [pc, #16]	; (8023708 <ip4_input+0x27c>)
 80236f8:	2200      	movs	r2, #0
 80236fa:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80236fc:	2300      	movs	r3, #0
}
 80236fe:	4618      	mov	r0, r3
 8023700:	3720      	adds	r7, #32
 8023702:	46bd      	mov	sp, r7
 8023704:	bd80      	pop	{r7, pc}
 8023706:	bf00      	nop
 8023708:	20017778 	.word	0x20017778
 802370c:	2001bcfc 	.word	0x2001bcfc

08023710 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8023710:	b580      	push	{r7, lr}
 8023712:	b08a      	sub	sp, #40	; 0x28
 8023714:	af04      	add	r7, sp, #16
 8023716:	60f8      	str	r0, [r7, #12]
 8023718:	60b9      	str	r1, [r7, #8]
 802371a:	607a      	str	r2, [r7, #4]
 802371c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 802371e:	68bb      	ldr	r3, [r7, #8]
 8023720:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8023722:	687b      	ldr	r3, [r7, #4]
 8023724:	2b00      	cmp	r3, #0
 8023726:	d009      	beq.n	802373c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8023728:	68bb      	ldr	r3, [r7, #8]
 802372a:	2b00      	cmp	r3, #0
 802372c:	d003      	beq.n	8023736 <ip4_output_if+0x26>
 802372e:	68bb      	ldr	r3, [r7, #8]
 8023730:	681b      	ldr	r3, [r3, #0]
 8023732:	2b00      	cmp	r3, #0
 8023734:	d102      	bne.n	802373c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8023736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023738:	3304      	adds	r3, #4
 802373a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 802373c:	78fa      	ldrb	r2, [r7, #3]
 802373e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023740:	9302      	str	r3, [sp, #8]
 8023742:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8023746:	9301      	str	r3, [sp, #4]
 8023748:	f897 3020 	ldrb.w	r3, [r7, #32]
 802374c:	9300      	str	r3, [sp, #0]
 802374e:	4613      	mov	r3, r2
 8023750:	687a      	ldr	r2, [r7, #4]
 8023752:	6979      	ldr	r1, [r7, #20]
 8023754:	68f8      	ldr	r0, [r7, #12]
 8023756:	f000 f805 	bl	8023764 <ip4_output_if_src>
 802375a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 802375c:	4618      	mov	r0, r3
 802375e:	3718      	adds	r7, #24
 8023760:	46bd      	mov	sp, r7
 8023762:	bd80      	pop	{r7, pc}

08023764 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8023764:	b580      	push	{r7, lr}
 8023766:	b088      	sub	sp, #32
 8023768:	af00      	add	r7, sp, #0
 802376a:	60f8      	str	r0, [r7, #12]
 802376c:	60b9      	str	r1, [r7, #8]
 802376e:	607a      	str	r2, [r7, #4]
 8023770:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8023772:	68fb      	ldr	r3, [r7, #12]
 8023774:	7b9b      	ldrb	r3, [r3, #14]
 8023776:	2b01      	cmp	r3, #1
 8023778:	d006      	beq.n	8023788 <ip4_output_if_src+0x24>
 802377a:	4b4b      	ldr	r3, [pc, #300]	; (80238a8 <ip4_output_if_src+0x144>)
 802377c:	f44f 7255 	mov.w	r2, #852	; 0x354
 8023780:	494a      	ldr	r1, [pc, #296]	; (80238ac <ip4_output_if_src+0x148>)
 8023782:	484b      	ldr	r0, [pc, #300]	; (80238b0 <ip4_output_if_src+0x14c>)
 8023784:	f002 f812 	bl	80257ac <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8023788:	687b      	ldr	r3, [r7, #4]
 802378a:	2b00      	cmp	r3, #0
 802378c:	d060      	beq.n	8023850 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 802378e:	2314      	movs	r3, #20
 8023790:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8023792:	2114      	movs	r1, #20
 8023794:	68f8      	ldr	r0, [r7, #12]
 8023796:	f7f5 fbfb 	bl	8018f90 <pbuf_add_header>
 802379a:	4603      	mov	r3, r0
 802379c:	2b00      	cmp	r3, #0
 802379e:	d002      	beq.n	80237a6 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80237a0:	f06f 0301 	mvn.w	r3, #1
 80237a4:	e07c      	b.n	80238a0 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80237a6:	68fb      	ldr	r3, [r7, #12]
 80237a8:	685b      	ldr	r3, [r3, #4]
 80237aa:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80237ac:	68fb      	ldr	r3, [r7, #12]
 80237ae:	895b      	ldrh	r3, [r3, #10]
 80237b0:	2b13      	cmp	r3, #19
 80237b2:	d806      	bhi.n	80237c2 <ip4_output_if_src+0x5e>
 80237b4:	4b3c      	ldr	r3, [pc, #240]	; (80238a8 <ip4_output_if_src+0x144>)
 80237b6:	f44f 7262 	mov.w	r2, #904	; 0x388
 80237ba:	493e      	ldr	r1, [pc, #248]	; (80238b4 <ip4_output_if_src+0x150>)
 80237bc:	483c      	ldr	r0, [pc, #240]	; (80238b0 <ip4_output_if_src+0x14c>)
 80237be:	f001 fff5 	bl	80257ac <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80237c2:	69fb      	ldr	r3, [r7, #28]
 80237c4:	78fa      	ldrb	r2, [r7, #3]
 80237c6:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80237c8:	69fb      	ldr	r3, [r7, #28]
 80237ca:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80237ce:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80237d0:	687b      	ldr	r3, [r7, #4]
 80237d2:	681a      	ldr	r2, [r3, #0]
 80237d4:	69fb      	ldr	r3, [r7, #28]
 80237d6:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80237d8:	8b7b      	ldrh	r3, [r7, #26]
 80237da:	089b      	lsrs	r3, r3, #2
 80237dc:	b29b      	uxth	r3, r3
 80237de:	b2db      	uxtb	r3, r3
 80237e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80237e4:	b2da      	uxtb	r2, r3
 80237e6:	69fb      	ldr	r3, [r7, #28]
 80237e8:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80237ea:	69fb      	ldr	r3, [r7, #28]
 80237ec:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80237f0:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80237f2:	68fb      	ldr	r3, [r7, #12]
 80237f4:	891b      	ldrh	r3, [r3, #8]
 80237f6:	4618      	mov	r0, r3
 80237f8:	f7f4 f880 	bl	80178fc <lwip_htons>
 80237fc:	4603      	mov	r3, r0
 80237fe:	461a      	mov	r2, r3
 8023800:	69fb      	ldr	r3, [r7, #28]
 8023802:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8023804:	69fb      	ldr	r3, [r7, #28]
 8023806:	2200      	movs	r2, #0
 8023808:	719a      	strb	r2, [r3, #6]
 802380a:	2200      	movs	r2, #0
 802380c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 802380e:	4b2a      	ldr	r3, [pc, #168]	; (80238b8 <ip4_output_if_src+0x154>)
 8023810:	881b      	ldrh	r3, [r3, #0]
 8023812:	4618      	mov	r0, r3
 8023814:	f7f4 f872 	bl	80178fc <lwip_htons>
 8023818:	4603      	mov	r3, r0
 802381a:	461a      	mov	r2, r3
 802381c:	69fb      	ldr	r3, [r7, #28]
 802381e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8023820:	4b25      	ldr	r3, [pc, #148]	; (80238b8 <ip4_output_if_src+0x154>)
 8023822:	881b      	ldrh	r3, [r3, #0]
 8023824:	3301      	adds	r3, #1
 8023826:	b29a      	uxth	r2, r3
 8023828:	4b23      	ldr	r3, [pc, #140]	; (80238b8 <ip4_output_if_src+0x154>)
 802382a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 802382c:	68bb      	ldr	r3, [r7, #8]
 802382e:	2b00      	cmp	r3, #0
 8023830:	d104      	bne.n	802383c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8023832:	4b22      	ldr	r3, [pc, #136]	; (80238bc <ip4_output_if_src+0x158>)
 8023834:	681a      	ldr	r2, [r3, #0]
 8023836:	69fb      	ldr	r3, [r7, #28]
 8023838:	60da      	str	r2, [r3, #12]
 802383a:	e003      	b.n	8023844 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 802383c:	68bb      	ldr	r3, [r7, #8]
 802383e:	681a      	ldr	r2, [r3, #0]
 8023840:	69fb      	ldr	r3, [r7, #28]
 8023842:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8023844:	69fb      	ldr	r3, [r7, #28]
 8023846:	2200      	movs	r2, #0
 8023848:	729a      	strb	r2, [r3, #10]
 802384a:	2200      	movs	r2, #0
 802384c:	72da      	strb	r2, [r3, #11]
 802384e:	e00f      	b.n	8023870 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8023850:	68fb      	ldr	r3, [r7, #12]
 8023852:	895b      	ldrh	r3, [r3, #10]
 8023854:	2b13      	cmp	r3, #19
 8023856:	d802      	bhi.n	802385e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8023858:	f06f 0301 	mvn.w	r3, #1
 802385c:	e020      	b.n	80238a0 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 802385e:	68fb      	ldr	r3, [r7, #12]
 8023860:	685b      	ldr	r3, [r3, #4]
 8023862:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8023864:	69fb      	ldr	r3, [r7, #28]
 8023866:	691b      	ldr	r3, [r3, #16]
 8023868:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 802386a:	f107 0314 	add.w	r3, r7, #20
 802386e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8023870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023872:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8023874:	2b00      	cmp	r3, #0
 8023876:	d00c      	beq.n	8023892 <ip4_output_if_src+0x12e>
 8023878:	68fb      	ldr	r3, [r7, #12]
 802387a:	891a      	ldrh	r2, [r3, #8]
 802387c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802387e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8023880:	429a      	cmp	r2, r3
 8023882:	d906      	bls.n	8023892 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8023884:	687a      	ldr	r2, [r7, #4]
 8023886:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8023888:	68f8      	ldr	r0, [r7, #12]
 802388a:	f000 fd53 	bl	8024334 <ip4_frag>
 802388e:	4603      	mov	r3, r0
 8023890:	e006      	b.n	80238a0 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8023892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023894:	695b      	ldr	r3, [r3, #20]
 8023896:	687a      	ldr	r2, [r7, #4]
 8023898:	68f9      	ldr	r1, [r7, #12]
 802389a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802389c:	4798      	blx	r3
 802389e:	4603      	mov	r3, r0
}
 80238a0:	4618      	mov	r0, r3
 80238a2:	3720      	adds	r7, #32
 80238a4:	46bd      	mov	sp, r7
 80238a6:	bd80      	pop	{r7, pc}
 80238a8:	0802de98 	.word	0x0802de98
 80238ac:	0802decc 	.word	0x0802decc
 80238b0:	0802ded8 	.word	0x0802ded8
 80238b4:	0802df00 	.word	0x0802df00
 80238b8:	2001391e 	.word	0x2001391e
 80238bc:	0802e468 	.word	0x0802e468

080238c0 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80238c0:	b480      	push	{r7}
 80238c2:	b085      	sub	sp, #20
 80238c4:	af00      	add	r7, sp, #0
 80238c6:	6078      	str	r0, [r7, #4]
 80238c8:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80238ca:	687b      	ldr	r3, [r7, #4]
 80238cc:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80238ce:	687b      	ldr	r3, [r7, #4]
 80238d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80238d4:	d002      	beq.n	80238dc <ip4_addr_isbroadcast_u32+0x1c>
 80238d6:	687b      	ldr	r3, [r7, #4]
 80238d8:	2b00      	cmp	r3, #0
 80238da:	d101      	bne.n	80238e0 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80238dc:	2301      	movs	r3, #1
 80238de:	e02a      	b.n	8023936 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80238e0:	683b      	ldr	r3, [r7, #0]
 80238e2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80238e6:	f003 0302 	and.w	r3, r3, #2
 80238ea:	2b00      	cmp	r3, #0
 80238ec:	d101      	bne.n	80238f2 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80238ee:	2300      	movs	r3, #0
 80238f0:	e021      	b.n	8023936 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80238f2:	683b      	ldr	r3, [r7, #0]
 80238f4:	3304      	adds	r3, #4
 80238f6:	681b      	ldr	r3, [r3, #0]
 80238f8:	687a      	ldr	r2, [r7, #4]
 80238fa:	429a      	cmp	r2, r3
 80238fc:	d101      	bne.n	8023902 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80238fe:	2300      	movs	r3, #0
 8023900:	e019      	b.n	8023936 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8023902:	68fa      	ldr	r2, [r7, #12]
 8023904:	683b      	ldr	r3, [r7, #0]
 8023906:	3304      	adds	r3, #4
 8023908:	681b      	ldr	r3, [r3, #0]
 802390a:	405a      	eors	r2, r3
 802390c:	683b      	ldr	r3, [r7, #0]
 802390e:	3308      	adds	r3, #8
 8023910:	681b      	ldr	r3, [r3, #0]
 8023912:	4013      	ands	r3, r2
 8023914:	2b00      	cmp	r3, #0
 8023916:	d10d      	bne.n	8023934 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8023918:	683b      	ldr	r3, [r7, #0]
 802391a:	3308      	adds	r3, #8
 802391c:	681b      	ldr	r3, [r3, #0]
 802391e:	43da      	mvns	r2, r3
 8023920:	687b      	ldr	r3, [r7, #4]
 8023922:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8023924:	683b      	ldr	r3, [r7, #0]
 8023926:	3308      	adds	r3, #8
 8023928:	681b      	ldr	r3, [r3, #0]
 802392a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 802392c:	429a      	cmp	r2, r3
 802392e:	d101      	bne.n	8023934 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8023930:	2301      	movs	r3, #1
 8023932:	e000      	b.n	8023936 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8023934:	2300      	movs	r3, #0
  }
}
 8023936:	4618      	mov	r0, r3
 8023938:	3714      	adds	r7, #20
 802393a:	46bd      	mov	sp, r7
 802393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023940:	4770      	bx	lr
	...

08023944 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8023944:	b580      	push	{r7, lr}
 8023946:	b084      	sub	sp, #16
 8023948:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 802394a:	2300      	movs	r3, #0
 802394c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 802394e:	4b12      	ldr	r3, [pc, #72]	; (8023998 <ip_reass_tmr+0x54>)
 8023950:	681b      	ldr	r3, [r3, #0]
 8023952:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8023954:	e018      	b.n	8023988 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8023956:	68fb      	ldr	r3, [r7, #12]
 8023958:	7fdb      	ldrb	r3, [r3, #31]
 802395a:	2b00      	cmp	r3, #0
 802395c:	d00b      	beq.n	8023976 <ip_reass_tmr+0x32>
      r->timer--;
 802395e:	68fb      	ldr	r3, [r7, #12]
 8023960:	7fdb      	ldrb	r3, [r3, #31]
 8023962:	3b01      	subs	r3, #1
 8023964:	b2da      	uxtb	r2, r3
 8023966:	68fb      	ldr	r3, [r7, #12]
 8023968:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 802396a:	68fb      	ldr	r3, [r7, #12]
 802396c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 802396e:	68fb      	ldr	r3, [r7, #12]
 8023970:	681b      	ldr	r3, [r3, #0]
 8023972:	60fb      	str	r3, [r7, #12]
 8023974:	e008      	b.n	8023988 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8023976:	68fb      	ldr	r3, [r7, #12]
 8023978:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 802397a:	68fb      	ldr	r3, [r7, #12]
 802397c:	681b      	ldr	r3, [r3, #0]
 802397e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8023980:	68b9      	ldr	r1, [r7, #8]
 8023982:	6878      	ldr	r0, [r7, #4]
 8023984:	f000 f80a 	bl	802399c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8023988:	68fb      	ldr	r3, [r7, #12]
 802398a:	2b00      	cmp	r3, #0
 802398c:	d1e3      	bne.n	8023956 <ip_reass_tmr+0x12>
    }
  }
}
 802398e:	bf00      	nop
 8023990:	bf00      	nop
 8023992:	3710      	adds	r7, #16
 8023994:	46bd      	mov	sp, r7
 8023996:	bd80      	pop	{r7, pc}
 8023998:	20013920 	.word	0x20013920

0802399c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 802399c:	b580      	push	{r7, lr}
 802399e:	b088      	sub	sp, #32
 80239a0:	af00      	add	r7, sp, #0
 80239a2:	6078      	str	r0, [r7, #4]
 80239a4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80239a6:	2300      	movs	r3, #0
 80239a8:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80239aa:	683a      	ldr	r2, [r7, #0]
 80239ac:	687b      	ldr	r3, [r7, #4]
 80239ae:	429a      	cmp	r2, r3
 80239b0:	d105      	bne.n	80239be <ip_reass_free_complete_datagram+0x22>
 80239b2:	4b45      	ldr	r3, [pc, #276]	; (8023ac8 <ip_reass_free_complete_datagram+0x12c>)
 80239b4:	22ab      	movs	r2, #171	; 0xab
 80239b6:	4945      	ldr	r1, [pc, #276]	; (8023acc <ip_reass_free_complete_datagram+0x130>)
 80239b8:	4845      	ldr	r0, [pc, #276]	; (8023ad0 <ip_reass_free_complete_datagram+0x134>)
 80239ba:	f001 fef7 	bl	80257ac <iprintf>
  if (prev != NULL) {
 80239be:	683b      	ldr	r3, [r7, #0]
 80239c0:	2b00      	cmp	r3, #0
 80239c2:	d00a      	beq.n	80239da <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80239c4:	683b      	ldr	r3, [r7, #0]
 80239c6:	681b      	ldr	r3, [r3, #0]
 80239c8:	687a      	ldr	r2, [r7, #4]
 80239ca:	429a      	cmp	r2, r3
 80239cc:	d005      	beq.n	80239da <ip_reass_free_complete_datagram+0x3e>
 80239ce:	4b3e      	ldr	r3, [pc, #248]	; (8023ac8 <ip_reass_free_complete_datagram+0x12c>)
 80239d0:	22ad      	movs	r2, #173	; 0xad
 80239d2:	4940      	ldr	r1, [pc, #256]	; (8023ad4 <ip_reass_free_complete_datagram+0x138>)
 80239d4:	483e      	ldr	r0, [pc, #248]	; (8023ad0 <ip_reass_free_complete_datagram+0x134>)
 80239d6:	f001 fee9 	bl	80257ac <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80239da:	687b      	ldr	r3, [r7, #4]
 80239dc:	685b      	ldr	r3, [r3, #4]
 80239de:	685b      	ldr	r3, [r3, #4]
 80239e0:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80239e2:	697b      	ldr	r3, [r7, #20]
 80239e4:	889b      	ldrh	r3, [r3, #4]
 80239e6:	b29b      	uxth	r3, r3
 80239e8:	2b00      	cmp	r3, #0
 80239ea:	d12a      	bne.n	8023a42 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80239ec:	687b      	ldr	r3, [r7, #4]
 80239ee:	685b      	ldr	r3, [r3, #4]
 80239f0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80239f2:	697b      	ldr	r3, [r7, #20]
 80239f4:	681a      	ldr	r2, [r3, #0]
 80239f6:	687b      	ldr	r3, [r7, #4]
 80239f8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80239fa:	69bb      	ldr	r3, [r7, #24]
 80239fc:	6858      	ldr	r0, [r3, #4]
 80239fe:	687b      	ldr	r3, [r7, #4]
 8023a00:	3308      	adds	r3, #8
 8023a02:	2214      	movs	r2, #20
 8023a04:	4619      	mov	r1, r3
 8023a06:	f000 fffd 	bl	8024a04 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8023a0a:	2101      	movs	r1, #1
 8023a0c:	69b8      	ldr	r0, [r7, #24]
 8023a0e:	f7ff fc29 	bl	8023264 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8023a12:	69b8      	ldr	r0, [r7, #24]
 8023a14:	f7f5 fbe0 	bl	80191d8 <pbuf_clen>
 8023a18:	4603      	mov	r3, r0
 8023a1a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8023a1c:	8bfa      	ldrh	r2, [r7, #30]
 8023a1e:	8a7b      	ldrh	r3, [r7, #18]
 8023a20:	4413      	add	r3, r2
 8023a22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8023a26:	db05      	blt.n	8023a34 <ip_reass_free_complete_datagram+0x98>
 8023a28:	4b27      	ldr	r3, [pc, #156]	; (8023ac8 <ip_reass_free_complete_datagram+0x12c>)
 8023a2a:	22bc      	movs	r2, #188	; 0xbc
 8023a2c:	492a      	ldr	r1, [pc, #168]	; (8023ad8 <ip_reass_free_complete_datagram+0x13c>)
 8023a2e:	4828      	ldr	r0, [pc, #160]	; (8023ad0 <ip_reass_free_complete_datagram+0x134>)
 8023a30:	f001 febc 	bl	80257ac <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8023a34:	8bfa      	ldrh	r2, [r7, #30]
 8023a36:	8a7b      	ldrh	r3, [r7, #18]
 8023a38:	4413      	add	r3, r2
 8023a3a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8023a3c:	69b8      	ldr	r0, [r7, #24]
 8023a3e:	f7f5 fb3d 	bl	80190bc <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8023a42:	687b      	ldr	r3, [r7, #4]
 8023a44:	685b      	ldr	r3, [r3, #4]
 8023a46:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8023a48:	e01f      	b.n	8023a8a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8023a4a:	69bb      	ldr	r3, [r7, #24]
 8023a4c:	685b      	ldr	r3, [r3, #4]
 8023a4e:	617b      	str	r3, [r7, #20]
    pcur = p;
 8023a50:	69bb      	ldr	r3, [r7, #24]
 8023a52:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8023a54:	697b      	ldr	r3, [r7, #20]
 8023a56:	681b      	ldr	r3, [r3, #0]
 8023a58:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8023a5a:	68f8      	ldr	r0, [r7, #12]
 8023a5c:	f7f5 fbbc 	bl	80191d8 <pbuf_clen>
 8023a60:	4603      	mov	r3, r0
 8023a62:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8023a64:	8bfa      	ldrh	r2, [r7, #30]
 8023a66:	8a7b      	ldrh	r3, [r7, #18]
 8023a68:	4413      	add	r3, r2
 8023a6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8023a6e:	db05      	blt.n	8023a7c <ip_reass_free_complete_datagram+0xe0>
 8023a70:	4b15      	ldr	r3, [pc, #84]	; (8023ac8 <ip_reass_free_complete_datagram+0x12c>)
 8023a72:	22cc      	movs	r2, #204	; 0xcc
 8023a74:	4918      	ldr	r1, [pc, #96]	; (8023ad8 <ip_reass_free_complete_datagram+0x13c>)
 8023a76:	4816      	ldr	r0, [pc, #88]	; (8023ad0 <ip_reass_free_complete_datagram+0x134>)
 8023a78:	f001 fe98 	bl	80257ac <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8023a7c:	8bfa      	ldrh	r2, [r7, #30]
 8023a7e:	8a7b      	ldrh	r3, [r7, #18]
 8023a80:	4413      	add	r3, r2
 8023a82:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8023a84:	68f8      	ldr	r0, [r7, #12]
 8023a86:	f7f5 fb19 	bl	80190bc <pbuf_free>
  while (p != NULL) {
 8023a8a:	69bb      	ldr	r3, [r7, #24]
 8023a8c:	2b00      	cmp	r3, #0
 8023a8e:	d1dc      	bne.n	8023a4a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8023a90:	6839      	ldr	r1, [r7, #0]
 8023a92:	6878      	ldr	r0, [r7, #4]
 8023a94:	f000 f8c2 	bl	8023c1c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8023a98:	4b10      	ldr	r3, [pc, #64]	; (8023adc <ip_reass_free_complete_datagram+0x140>)
 8023a9a:	881b      	ldrh	r3, [r3, #0]
 8023a9c:	8bfa      	ldrh	r2, [r7, #30]
 8023a9e:	429a      	cmp	r2, r3
 8023aa0:	d905      	bls.n	8023aae <ip_reass_free_complete_datagram+0x112>
 8023aa2:	4b09      	ldr	r3, [pc, #36]	; (8023ac8 <ip_reass_free_complete_datagram+0x12c>)
 8023aa4:	22d2      	movs	r2, #210	; 0xd2
 8023aa6:	490e      	ldr	r1, [pc, #56]	; (8023ae0 <ip_reass_free_complete_datagram+0x144>)
 8023aa8:	4809      	ldr	r0, [pc, #36]	; (8023ad0 <ip_reass_free_complete_datagram+0x134>)
 8023aaa:	f001 fe7f 	bl	80257ac <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8023aae:	4b0b      	ldr	r3, [pc, #44]	; (8023adc <ip_reass_free_complete_datagram+0x140>)
 8023ab0:	881a      	ldrh	r2, [r3, #0]
 8023ab2:	8bfb      	ldrh	r3, [r7, #30]
 8023ab4:	1ad3      	subs	r3, r2, r3
 8023ab6:	b29a      	uxth	r2, r3
 8023ab8:	4b08      	ldr	r3, [pc, #32]	; (8023adc <ip_reass_free_complete_datagram+0x140>)
 8023aba:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8023abc:	8bfb      	ldrh	r3, [r7, #30]
}
 8023abe:	4618      	mov	r0, r3
 8023ac0:	3720      	adds	r7, #32
 8023ac2:	46bd      	mov	sp, r7
 8023ac4:	bd80      	pop	{r7, pc}
 8023ac6:	bf00      	nop
 8023ac8:	0802df30 	.word	0x0802df30
 8023acc:	0802df6c 	.word	0x0802df6c
 8023ad0:	0802df78 	.word	0x0802df78
 8023ad4:	0802dfa0 	.word	0x0802dfa0
 8023ad8:	0802dfb4 	.word	0x0802dfb4
 8023adc:	20013924 	.word	0x20013924
 8023ae0:	0802dfd4 	.word	0x0802dfd4

08023ae4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8023ae4:	b580      	push	{r7, lr}
 8023ae6:	b08a      	sub	sp, #40	; 0x28
 8023ae8:	af00      	add	r7, sp, #0
 8023aea:	6078      	str	r0, [r7, #4]
 8023aec:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8023aee:	2300      	movs	r3, #0
 8023af0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8023af2:	2300      	movs	r3, #0
 8023af4:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8023af6:	2300      	movs	r3, #0
 8023af8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8023afa:	2300      	movs	r3, #0
 8023afc:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8023afe:	2300      	movs	r3, #0
 8023b00:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8023b02:	4b28      	ldr	r3, [pc, #160]	; (8023ba4 <ip_reass_remove_oldest_datagram+0xc0>)
 8023b04:	681b      	ldr	r3, [r3, #0]
 8023b06:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8023b08:	e030      	b.n	8023b6c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8023b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023b0c:	695a      	ldr	r2, [r3, #20]
 8023b0e:	687b      	ldr	r3, [r7, #4]
 8023b10:	68db      	ldr	r3, [r3, #12]
 8023b12:	429a      	cmp	r2, r3
 8023b14:	d10c      	bne.n	8023b30 <ip_reass_remove_oldest_datagram+0x4c>
 8023b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023b18:	699a      	ldr	r2, [r3, #24]
 8023b1a:	687b      	ldr	r3, [r7, #4]
 8023b1c:	691b      	ldr	r3, [r3, #16]
 8023b1e:	429a      	cmp	r2, r3
 8023b20:	d106      	bne.n	8023b30 <ip_reass_remove_oldest_datagram+0x4c>
 8023b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023b24:	899a      	ldrh	r2, [r3, #12]
 8023b26:	687b      	ldr	r3, [r7, #4]
 8023b28:	889b      	ldrh	r3, [r3, #4]
 8023b2a:	b29b      	uxth	r3, r3
 8023b2c:	429a      	cmp	r2, r3
 8023b2e:	d014      	beq.n	8023b5a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8023b30:	693b      	ldr	r3, [r7, #16]
 8023b32:	3301      	adds	r3, #1
 8023b34:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8023b36:	6a3b      	ldr	r3, [r7, #32]
 8023b38:	2b00      	cmp	r3, #0
 8023b3a:	d104      	bne.n	8023b46 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8023b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023b3e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8023b40:	69fb      	ldr	r3, [r7, #28]
 8023b42:	61bb      	str	r3, [r7, #24]
 8023b44:	e009      	b.n	8023b5a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8023b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023b48:	7fda      	ldrb	r2, [r3, #31]
 8023b4a:	6a3b      	ldr	r3, [r7, #32]
 8023b4c:	7fdb      	ldrb	r3, [r3, #31]
 8023b4e:	429a      	cmp	r2, r3
 8023b50:	d803      	bhi.n	8023b5a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8023b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023b54:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8023b56:	69fb      	ldr	r3, [r7, #28]
 8023b58:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8023b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023b5c:	681b      	ldr	r3, [r3, #0]
 8023b5e:	2b00      	cmp	r3, #0
 8023b60:	d001      	beq.n	8023b66 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8023b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023b64:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8023b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023b68:	681b      	ldr	r3, [r3, #0]
 8023b6a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8023b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023b6e:	2b00      	cmp	r3, #0
 8023b70:	d1cb      	bne.n	8023b0a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8023b72:	6a3b      	ldr	r3, [r7, #32]
 8023b74:	2b00      	cmp	r3, #0
 8023b76:	d008      	beq.n	8023b8a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8023b78:	69b9      	ldr	r1, [r7, #24]
 8023b7a:	6a38      	ldr	r0, [r7, #32]
 8023b7c:	f7ff ff0e 	bl	802399c <ip_reass_free_complete_datagram>
 8023b80:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8023b82:	697a      	ldr	r2, [r7, #20]
 8023b84:	68fb      	ldr	r3, [r7, #12]
 8023b86:	4413      	add	r3, r2
 8023b88:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8023b8a:	697a      	ldr	r2, [r7, #20]
 8023b8c:	683b      	ldr	r3, [r7, #0]
 8023b8e:	429a      	cmp	r2, r3
 8023b90:	da02      	bge.n	8023b98 <ip_reass_remove_oldest_datagram+0xb4>
 8023b92:	693b      	ldr	r3, [r7, #16]
 8023b94:	2b01      	cmp	r3, #1
 8023b96:	dcac      	bgt.n	8023af2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8023b98:	697b      	ldr	r3, [r7, #20]
}
 8023b9a:	4618      	mov	r0, r3
 8023b9c:	3728      	adds	r7, #40	; 0x28
 8023b9e:	46bd      	mov	sp, r7
 8023ba0:	bd80      	pop	{r7, pc}
 8023ba2:	bf00      	nop
 8023ba4:	20013920 	.word	0x20013920

08023ba8 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8023ba8:	b580      	push	{r7, lr}
 8023baa:	b084      	sub	sp, #16
 8023bac:	af00      	add	r7, sp, #0
 8023bae:	6078      	str	r0, [r7, #4]
 8023bb0:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8023bb2:	2004      	movs	r0, #4
 8023bb4:	f7f4 fb80 	bl	80182b8 <memp_malloc>
 8023bb8:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8023bba:	68fb      	ldr	r3, [r7, #12]
 8023bbc:	2b00      	cmp	r3, #0
 8023bbe:	d110      	bne.n	8023be2 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8023bc0:	6839      	ldr	r1, [r7, #0]
 8023bc2:	6878      	ldr	r0, [r7, #4]
 8023bc4:	f7ff ff8e 	bl	8023ae4 <ip_reass_remove_oldest_datagram>
 8023bc8:	4602      	mov	r2, r0
 8023bca:	683b      	ldr	r3, [r7, #0]
 8023bcc:	4293      	cmp	r3, r2
 8023bce:	dc03      	bgt.n	8023bd8 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8023bd0:	2004      	movs	r0, #4
 8023bd2:	f7f4 fb71 	bl	80182b8 <memp_malloc>
 8023bd6:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8023bd8:	68fb      	ldr	r3, [r7, #12]
 8023bda:	2b00      	cmp	r3, #0
 8023bdc:	d101      	bne.n	8023be2 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8023bde:	2300      	movs	r3, #0
 8023be0:	e016      	b.n	8023c10 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8023be2:	2220      	movs	r2, #32
 8023be4:	2100      	movs	r1, #0
 8023be6:	68f8      	ldr	r0, [r7, #12]
 8023be8:	f000 ff34 	bl	8024a54 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8023bec:	68fb      	ldr	r3, [r7, #12]
 8023bee:	220f      	movs	r2, #15
 8023bf0:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8023bf2:	4b09      	ldr	r3, [pc, #36]	; (8023c18 <ip_reass_enqueue_new_datagram+0x70>)
 8023bf4:	681a      	ldr	r2, [r3, #0]
 8023bf6:	68fb      	ldr	r3, [r7, #12]
 8023bf8:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8023bfa:	4a07      	ldr	r2, [pc, #28]	; (8023c18 <ip_reass_enqueue_new_datagram+0x70>)
 8023bfc:	68fb      	ldr	r3, [r7, #12]
 8023bfe:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8023c00:	68fb      	ldr	r3, [r7, #12]
 8023c02:	3308      	adds	r3, #8
 8023c04:	2214      	movs	r2, #20
 8023c06:	6879      	ldr	r1, [r7, #4]
 8023c08:	4618      	mov	r0, r3
 8023c0a:	f000 fefb 	bl	8024a04 <memcpy>
  return ipr;
 8023c0e:	68fb      	ldr	r3, [r7, #12]
}
 8023c10:	4618      	mov	r0, r3
 8023c12:	3710      	adds	r7, #16
 8023c14:	46bd      	mov	sp, r7
 8023c16:	bd80      	pop	{r7, pc}
 8023c18:	20013920 	.word	0x20013920

08023c1c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8023c1c:	b580      	push	{r7, lr}
 8023c1e:	b082      	sub	sp, #8
 8023c20:	af00      	add	r7, sp, #0
 8023c22:	6078      	str	r0, [r7, #4]
 8023c24:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8023c26:	4b10      	ldr	r3, [pc, #64]	; (8023c68 <ip_reass_dequeue_datagram+0x4c>)
 8023c28:	681b      	ldr	r3, [r3, #0]
 8023c2a:	687a      	ldr	r2, [r7, #4]
 8023c2c:	429a      	cmp	r2, r3
 8023c2e:	d104      	bne.n	8023c3a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8023c30:	687b      	ldr	r3, [r7, #4]
 8023c32:	681b      	ldr	r3, [r3, #0]
 8023c34:	4a0c      	ldr	r2, [pc, #48]	; (8023c68 <ip_reass_dequeue_datagram+0x4c>)
 8023c36:	6013      	str	r3, [r2, #0]
 8023c38:	e00d      	b.n	8023c56 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8023c3a:	683b      	ldr	r3, [r7, #0]
 8023c3c:	2b00      	cmp	r3, #0
 8023c3e:	d106      	bne.n	8023c4e <ip_reass_dequeue_datagram+0x32>
 8023c40:	4b0a      	ldr	r3, [pc, #40]	; (8023c6c <ip_reass_dequeue_datagram+0x50>)
 8023c42:	f240 1245 	movw	r2, #325	; 0x145
 8023c46:	490a      	ldr	r1, [pc, #40]	; (8023c70 <ip_reass_dequeue_datagram+0x54>)
 8023c48:	480a      	ldr	r0, [pc, #40]	; (8023c74 <ip_reass_dequeue_datagram+0x58>)
 8023c4a:	f001 fdaf 	bl	80257ac <iprintf>
    prev->next = ipr->next;
 8023c4e:	687b      	ldr	r3, [r7, #4]
 8023c50:	681a      	ldr	r2, [r3, #0]
 8023c52:	683b      	ldr	r3, [r7, #0]
 8023c54:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8023c56:	6879      	ldr	r1, [r7, #4]
 8023c58:	2004      	movs	r0, #4
 8023c5a:	f7f4 fb7f 	bl	801835c <memp_free>
}
 8023c5e:	bf00      	nop
 8023c60:	3708      	adds	r7, #8
 8023c62:	46bd      	mov	sp, r7
 8023c64:	bd80      	pop	{r7, pc}
 8023c66:	bf00      	nop
 8023c68:	20013920 	.word	0x20013920
 8023c6c:	0802df30 	.word	0x0802df30
 8023c70:	0802dff8 	.word	0x0802dff8
 8023c74:	0802df78 	.word	0x0802df78

08023c78 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8023c78:	b580      	push	{r7, lr}
 8023c7a:	b08c      	sub	sp, #48	; 0x30
 8023c7c:	af00      	add	r7, sp, #0
 8023c7e:	60f8      	str	r0, [r7, #12]
 8023c80:	60b9      	str	r1, [r7, #8]
 8023c82:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8023c84:	2300      	movs	r3, #0
 8023c86:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8023c88:	2301      	movs	r3, #1
 8023c8a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8023c8c:	68bb      	ldr	r3, [r7, #8]
 8023c8e:	685b      	ldr	r3, [r3, #4]
 8023c90:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8023c92:	69fb      	ldr	r3, [r7, #28]
 8023c94:	885b      	ldrh	r3, [r3, #2]
 8023c96:	b29b      	uxth	r3, r3
 8023c98:	4618      	mov	r0, r3
 8023c9a:	f7f3 fe2f 	bl	80178fc <lwip_htons>
 8023c9e:	4603      	mov	r3, r0
 8023ca0:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8023ca2:	69fb      	ldr	r3, [r7, #28]
 8023ca4:	781b      	ldrb	r3, [r3, #0]
 8023ca6:	f003 030f 	and.w	r3, r3, #15
 8023caa:	b2db      	uxtb	r3, r3
 8023cac:	009b      	lsls	r3, r3, #2
 8023cae:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8023cb0:	7e7b      	ldrb	r3, [r7, #25]
 8023cb2:	b29b      	uxth	r3, r3
 8023cb4:	8b7a      	ldrh	r2, [r7, #26]
 8023cb6:	429a      	cmp	r2, r3
 8023cb8:	d202      	bcs.n	8023cc0 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8023cba:	f04f 33ff 	mov.w	r3, #4294967295
 8023cbe:	e135      	b.n	8023f2c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8023cc0:	7e7b      	ldrb	r3, [r7, #25]
 8023cc2:	b29b      	uxth	r3, r3
 8023cc4:	8b7a      	ldrh	r2, [r7, #26]
 8023cc6:	1ad3      	subs	r3, r2, r3
 8023cc8:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8023cca:	69fb      	ldr	r3, [r7, #28]
 8023ccc:	88db      	ldrh	r3, [r3, #6]
 8023cce:	b29b      	uxth	r3, r3
 8023cd0:	4618      	mov	r0, r3
 8023cd2:	f7f3 fe13 	bl	80178fc <lwip_htons>
 8023cd6:	4603      	mov	r3, r0
 8023cd8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8023cdc:	b29b      	uxth	r3, r3
 8023cde:	00db      	lsls	r3, r3, #3
 8023ce0:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8023ce2:	68bb      	ldr	r3, [r7, #8]
 8023ce4:	685b      	ldr	r3, [r3, #4]
 8023ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8023ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023cea:	2200      	movs	r2, #0
 8023cec:	701a      	strb	r2, [r3, #0]
 8023cee:	2200      	movs	r2, #0
 8023cf0:	705a      	strb	r2, [r3, #1]
 8023cf2:	2200      	movs	r2, #0
 8023cf4:	709a      	strb	r2, [r3, #2]
 8023cf6:	2200      	movs	r2, #0
 8023cf8:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8023cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023cfc:	8afa      	ldrh	r2, [r7, #22]
 8023cfe:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8023d00:	8afa      	ldrh	r2, [r7, #22]
 8023d02:	8b7b      	ldrh	r3, [r7, #26]
 8023d04:	4413      	add	r3, r2
 8023d06:	b29a      	uxth	r2, r3
 8023d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023d0a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8023d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023d0e:	88db      	ldrh	r3, [r3, #6]
 8023d10:	b29b      	uxth	r3, r3
 8023d12:	8afa      	ldrh	r2, [r7, #22]
 8023d14:	429a      	cmp	r2, r3
 8023d16:	d902      	bls.n	8023d1e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8023d18:	f04f 33ff 	mov.w	r3, #4294967295
 8023d1c:	e106      	b.n	8023f2c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8023d1e:	68fb      	ldr	r3, [r7, #12]
 8023d20:	685b      	ldr	r3, [r3, #4]
 8023d22:	627b      	str	r3, [r7, #36]	; 0x24
 8023d24:	e068      	b.n	8023df8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8023d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023d28:	685b      	ldr	r3, [r3, #4]
 8023d2a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8023d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023d2e:	889b      	ldrh	r3, [r3, #4]
 8023d30:	b29a      	uxth	r2, r3
 8023d32:	693b      	ldr	r3, [r7, #16]
 8023d34:	889b      	ldrh	r3, [r3, #4]
 8023d36:	b29b      	uxth	r3, r3
 8023d38:	429a      	cmp	r2, r3
 8023d3a:	d235      	bcs.n	8023da8 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8023d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023d3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8023d40:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8023d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023d44:	2b00      	cmp	r3, #0
 8023d46:	d020      	beq.n	8023d8a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8023d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023d4a:	889b      	ldrh	r3, [r3, #4]
 8023d4c:	b29a      	uxth	r2, r3
 8023d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023d50:	88db      	ldrh	r3, [r3, #6]
 8023d52:	b29b      	uxth	r3, r3
 8023d54:	429a      	cmp	r2, r3
 8023d56:	d307      	bcc.n	8023d68 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8023d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023d5a:	88db      	ldrh	r3, [r3, #6]
 8023d5c:	b29a      	uxth	r2, r3
 8023d5e:	693b      	ldr	r3, [r7, #16]
 8023d60:	889b      	ldrh	r3, [r3, #4]
 8023d62:	b29b      	uxth	r3, r3
 8023d64:	429a      	cmp	r2, r3
 8023d66:	d902      	bls.n	8023d6e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8023d68:	f04f 33ff 	mov.w	r3, #4294967295
 8023d6c:	e0de      	b.n	8023f2c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8023d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023d70:	68ba      	ldr	r2, [r7, #8]
 8023d72:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8023d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023d76:	88db      	ldrh	r3, [r3, #6]
 8023d78:	b29a      	uxth	r2, r3
 8023d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023d7c:	889b      	ldrh	r3, [r3, #4]
 8023d7e:	b29b      	uxth	r3, r3
 8023d80:	429a      	cmp	r2, r3
 8023d82:	d03d      	beq.n	8023e00 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8023d84:	2300      	movs	r3, #0
 8023d86:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8023d88:	e03a      	b.n	8023e00 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8023d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023d8c:	88db      	ldrh	r3, [r3, #6]
 8023d8e:	b29a      	uxth	r2, r3
 8023d90:	693b      	ldr	r3, [r7, #16]
 8023d92:	889b      	ldrh	r3, [r3, #4]
 8023d94:	b29b      	uxth	r3, r3
 8023d96:	429a      	cmp	r2, r3
 8023d98:	d902      	bls.n	8023da0 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8023d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8023d9e:	e0c5      	b.n	8023f2c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8023da0:	68fb      	ldr	r3, [r7, #12]
 8023da2:	68ba      	ldr	r2, [r7, #8]
 8023da4:	605a      	str	r2, [r3, #4]
      break;
 8023da6:	e02b      	b.n	8023e00 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8023da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023daa:	889b      	ldrh	r3, [r3, #4]
 8023dac:	b29a      	uxth	r2, r3
 8023dae:	693b      	ldr	r3, [r7, #16]
 8023db0:	889b      	ldrh	r3, [r3, #4]
 8023db2:	b29b      	uxth	r3, r3
 8023db4:	429a      	cmp	r2, r3
 8023db6:	d102      	bne.n	8023dbe <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8023db8:	f04f 33ff 	mov.w	r3, #4294967295
 8023dbc:	e0b6      	b.n	8023f2c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8023dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023dc0:	889b      	ldrh	r3, [r3, #4]
 8023dc2:	b29a      	uxth	r2, r3
 8023dc4:	693b      	ldr	r3, [r7, #16]
 8023dc6:	88db      	ldrh	r3, [r3, #6]
 8023dc8:	b29b      	uxth	r3, r3
 8023dca:	429a      	cmp	r2, r3
 8023dcc:	d202      	bcs.n	8023dd4 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8023dce:	f04f 33ff 	mov.w	r3, #4294967295
 8023dd2:	e0ab      	b.n	8023f2c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8023dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023dd6:	2b00      	cmp	r3, #0
 8023dd8:	d009      	beq.n	8023dee <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8023dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023ddc:	88db      	ldrh	r3, [r3, #6]
 8023dde:	b29a      	uxth	r2, r3
 8023de0:	693b      	ldr	r3, [r7, #16]
 8023de2:	889b      	ldrh	r3, [r3, #4]
 8023de4:	b29b      	uxth	r3, r3
 8023de6:	429a      	cmp	r2, r3
 8023de8:	d001      	beq.n	8023dee <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8023dea:	2300      	movs	r3, #0
 8023dec:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8023dee:	693b      	ldr	r3, [r7, #16]
 8023df0:	681b      	ldr	r3, [r3, #0]
 8023df2:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8023df4:	693b      	ldr	r3, [r7, #16]
 8023df6:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8023df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023dfa:	2b00      	cmp	r3, #0
 8023dfc:	d193      	bne.n	8023d26 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8023dfe:	e000      	b.n	8023e02 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8023e00:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8023e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023e04:	2b00      	cmp	r3, #0
 8023e06:	d12d      	bne.n	8023e64 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8023e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023e0a:	2b00      	cmp	r3, #0
 8023e0c:	d01c      	beq.n	8023e48 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8023e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023e10:	88db      	ldrh	r3, [r3, #6]
 8023e12:	b29a      	uxth	r2, r3
 8023e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023e16:	889b      	ldrh	r3, [r3, #4]
 8023e18:	b29b      	uxth	r3, r3
 8023e1a:	429a      	cmp	r2, r3
 8023e1c:	d906      	bls.n	8023e2c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8023e1e:	4b45      	ldr	r3, [pc, #276]	; (8023f34 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8023e20:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8023e24:	4944      	ldr	r1, [pc, #272]	; (8023f38 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8023e26:	4845      	ldr	r0, [pc, #276]	; (8023f3c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8023e28:	f001 fcc0 	bl	80257ac <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8023e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023e2e:	68ba      	ldr	r2, [r7, #8]
 8023e30:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8023e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023e34:	88db      	ldrh	r3, [r3, #6]
 8023e36:	b29a      	uxth	r2, r3
 8023e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023e3a:	889b      	ldrh	r3, [r3, #4]
 8023e3c:	b29b      	uxth	r3, r3
 8023e3e:	429a      	cmp	r2, r3
 8023e40:	d010      	beq.n	8023e64 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8023e42:	2300      	movs	r3, #0
 8023e44:	623b      	str	r3, [r7, #32]
 8023e46:	e00d      	b.n	8023e64 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8023e48:	68fb      	ldr	r3, [r7, #12]
 8023e4a:	685b      	ldr	r3, [r3, #4]
 8023e4c:	2b00      	cmp	r3, #0
 8023e4e:	d006      	beq.n	8023e5e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8023e50:	4b38      	ldr	r3, [pc, #224]	; (8023f34 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8023e52:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8023e56:	493a      	ldr	r1, [pc, #232]	; (8023f40 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8023e58:	4838      	ldr	r0, [pc, #224]	; (8023f3c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8023e5a:	f001 fca7 	bl	80257ac <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8023e5e:	68fb      	ldr	r3, [r7, #12]
 8023e60:	68ba      	ldr	r2, [r7, #8]
 8023e62:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8023e64:	687b      	ldr	r3, [r7, #4]
 8023e66:	2b00      	cmp	r3, #0
 8023e68:	d105      	bne.n	8023e76 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8023e6a:	68fb      	ldr	r3, [r7, #12]
 8023e6c:	7f9b      	ldrb	r3, [r3, #30]
 8023e6e:	f003 0301 	and.w	r3, r3, #1
 8023e72:	2b00      	cmp	r3, #0
 8023e74:	d059      	beq.n	8023f2a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8023e76:	6a3b      	ldr	r3, [r7, #32]
 8023e78:	2b00      	cmp	r3, #0
 8023e7a:	d04f      	beq.n	8023f1c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8023e7c:	68fb      	ldr	r3, [r7, #12]
 8023e7e:	685b      	ldr	r3, [r3, #4]
 8023e80:	2b00      	cmp	r3, #0
 8023e82:	d006      	beq.n	8023e92 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8023e84:	68fb      	ldr	r3, [r7, #12]
 8023e86:	685b      	ldr	r3, [r3, #4]
 8023e88:	685b      	ldr	r3, [r3, #4]
 8023e8a:	889b      	ldrh	r3, [r3, #4]
 8023e8c:	b29b      	uxth	r3, r3
 8023e8e:	2b00      	cmp	r3, #0
 8023e90:	d002      	beq.n	8023e98 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8023e92:	2300      	movs	r3, #0
 8023e94:	623b      	str	r3, [r7, #32]
 8023e96:	e041      	b.n	8023f1c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8023e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023e9a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8023e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023e9e:	681b      	ldr	r3, [r3, #0]
 8023ea0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8023ea2:	e012      	b.n	8023eca <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8023ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023ea6:	685b      	ldr	r3, [r3, #4]
 8023ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8023eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023eac:	88db      	ldrh	r3, [r3, #6]
 8023eae:	b29a      	uxth	r2, r3
 8023eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023eb2:	889b      	ldrh	r3, [r3, #4]
 8023eb4:	b29b      	uxth	r3, r3
 8023eb6:	429a      	cmp	r2, r3
 8023eb8:	d002      	beq.n	8023ec0 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8023eba:	2300      	movs	r3, #0
 8023ebc:	623b      	str	r3, [r7, #32]
            break;
 8023ebe:	e007      	b.n	8023ed0 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8023ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023ec2:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8023ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023ec6:	681b      	ldr	r3, [r3, #0]
 8023ec8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8023eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023ecc:	2b00      	cmp	r3, #0
 8023ece:	d1e9      	bne.n	8023ea4 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8023ed0:	6a3b      	ldr	r3, [r7, #32]
 8023ed2:	2b00      	cmp	r3, #0
 8023ed4:	d022      	beq.n	8023f1c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8023ed6:	68fb      	ldr	r3, [r7, #12]
 8023ed8:	685b      	ldr	r3, [r3, #4]
 8023eda:	2b00      	cmp	r3, #0
 8023edc:	d106      	bne.n	8023eec <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8023ede:	4b15      	ldr	r3, [pc, #84]	; (8023f34 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8023ee0:	f240 12df 	movw	r2, #479	; 0x1df
 8023ee4:	4917      	ldr	r1, [pc, #92]	; (8023f44 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8023ee6:	4815      	ldr	r0, [pc, #84]	; (8023f3c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8023ee8:	f001 fc60 	bl	80257ac <iprintf>
          LWIP_ASSERT("sanity check",
 8023eec:	68fb      	ldr	r3, [r7, #12]
 8023eee:	685b      	ldr	r3, [r3, #4]
 8023ef0:	685b      	ldr	r3, [r3, #4]
 8023ef2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8023ef4:	429a      	cmp	r2, r3
 8023ef6:	d106      	bne.n	8023f06 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8023ef8:	4b0e      	ldr	r3, [pc, #56]	; (8023f34 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8023efa:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8023efe:	4911      	ldr	r1, [pc, #68]	; (8023f44 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8023f00:	480e      	ldr	r0, [pc, #56]	; (8023f3c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8023f02:	f001 fc53 	bl	80257ac <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8023f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023f08:	681b      	ldr	r3, [r3, #0]
 8023f0a:	2b00      	cmp	r3, #0
 8023f0c:	d006      	beq.n	8023f1c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8023f0e:	4b09      	ldr	r3, [pc, #36]	; (8023f34 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8023f10:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8023f14:	490c      	ldr	r1, [pc, #48]	; (8023f48 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8023f16:	4809      	ldr	r0, [pc, #36]	; (8023f3c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8023f18:	f001 fc48 	bl	80257ac <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8023f1c:	6a3b      	ldr	r3, [r7, #32]
 8023f1e:	2b00      	cmp	r3, #0
 8023f20:	bf14      	ite	ne
 8023f22:	2301      	movne	r3, #1
 8023f24:	2300      	moveq	r3, #0
 8023f26:	b2db      	uxtb	r3, r3
 8023f28:	e000      	b.n	8023f2c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8023f2a:	2300      	movs	r3, #0
}
 8023f2c:	4618      	mov	r0, r3
 8023f2e:	3730      	adds	r7, #48	; 0x30
 8023f30:	46bd      	mov	sp, r7
 8023f32:	bd80      	pop	{r7, pc}
 8023f34:	0802df30 	.word	0x0802df30
 8023f38:	0802e014 	.word	0x0802e014
 8023f3c:	0802df78 	.word	0x0802df78
 8023f40:	0802e034 	.word	0x0802e034
 8023f44:	0802e06c 	.word	0x0802e06c
 8023f48:	0802e07c 	.word	0x0802e07c

08023f4c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8023f4c:	b580      	push	{r7, lr}
 8023f4e:	b08e      	sub	sp, #56	; 0x38
 8023f50:	af00      	add	r7, sp, #0
 8023f52:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8023f54:	687b      	ldr	r3, [r7, #4]
 8023f56:	685b      	ldr	r3, [r3, #4]
 8023f58:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8023f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023f5c:	781b      	ldrb	r3, [r3, #0]
 8023f5e:	f003 030f 	and.w	r3, r3, #15
 8023f62:	b2db      	uxtb	r3, r3
 8023f64:	009b      	lsls	r3, r3, #2
 8023f66:	b2db      	uxtb	r3, r3
 8023f68:	2b14      	cmp	r3, #20
 8023f6a:	f040 8171 	bne.w	8024250 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8023f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023f70:	88db      	ldrh	r3, [r3, #6]
 8023f72:	b29b      	uxth	r3, r3
 8023f74:	4618      	mov	r0, r3
 8023f76:	f7f3 fcc1 	bl	80178fc <lwip_htons>
 8023f7a:	4603      	mov	r3, r0
 8023f7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8023f80:	b29b      	uxth	r3, r3
 8023f82:	00db      	lsls	r3, r3, #3
 8023f84:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8023f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023f88:	885b      	ldrh	r3, [r3, #2]
 8023f8a:	b29b      	uxth	r3, r3
 8023f8c:	4618      	mov	r0, r3
 8023f8e:	f7f3 fcb5 	bl	80178fc <lwip_htons>
 8023f92:	4603      	mov	r3, r0
 8023f94:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8023f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023f98:	781b      	ldrb	r3, [r3, #0]
 8023f9a:	f003 030f 	and.w	r3, r3, #15
 8023f9e:	b2db      	uxtb	r3, r3
 8023fa0:	009b      	lsls	r3, r3, #2
 8023fa2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8023fa6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8023faa:	b29b      	uxth	r3, r3
 8023fac:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8023fae:	429a      	cmp	r2, r3
 8023fb0:	f0c0 8150 	bcc.w	8024254 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8023fb4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8023fb8:	b29b      	uxth	r3, r3
 8023fba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8023fbc:	1ad3      	subs	r3, r2, r3
 8023fbe:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8023fc0:	6878      	ldr	r0, [r7, #4]
 8023fc2:	f7f5 f909 	bl	80191d8 <pbuf_clen>
 8023fc6:	4603      	mov	r3, r0
 8023fc8:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8023fca:	4b8c      	ldr	r3, [pc, #560]	; (80241fc <ip4_reass+0x2b0>)
 8023fcc:	881b      	ldrh	r3, [r3, #0]
 8023fce:	461a      	mov	r2, r3
 8023fd0:	8c3b      	ldrh	r3, [r7, #32]
 8023fd2:	4413      	add	r3, r2
 8023fd4:	2b0a      	cmp	r3, #10
 8023fd6:	dd10      	ble.n	8023ffa <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8023fd8:	8c3b      	ldrh	r3, [r7, #32]
 8023fda:	4619      	mov	r1, r3
 8023fdc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8023fde:	f7ff fd81 	bl	8023ae4 <ip_reass_remove_oldest_datagram>
 8023fe2:	4603      	mov	r3, r0
 8023fe4:	2b00      	cmp	r3, #0
 8023fe6:	f000 8137 	beq.w	8024258 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8023fea:	4b84      	ldr	r3, [pc, #528]	; (80241fc <ip4_reass+0x2b0>)
 8023fec:	881b      	ldrh	r3, [r3, #0]
 8023fee:	461a      	mov	r2, r3
 8023ff0:	8c3b      	ldrh	r3, [r7, #32]
 8023ff2:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8023ff4:	2b0a      	cmp	r3, #10
 8023ff6:	f300 812f 	bgt.w	8024258 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8023ffa:	4b81      	ldr	r3, [pc, #516]	; (8024200 <ip4_reass+0x2b4>)
 8023ffc:	681b      	ldr	r3, [r3, #0]
 8023ffe:	633b      	str	r3, [r7, #48]	; 0x30
 8024000:	e015      	b.n	802402e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8024002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024004:	695a      	ldr	r2, [r3, #20]
 8024006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024008:	68db      	ldr	r3, [r3, #12]
 802400a:	429a      	cmp	r2, r3
 802400c:	d10c      	bne.n	8024028 <ip4_reass+0xdc>
 802400e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024010:	699a      	ldr	r2, [r3, #24]
 8024012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024014:	691b      	ldr	r3, [r3, #16]
 8024016:	429a      	cmp	r2, r3
 8024018:	d106      	bne.n	8024028 <ip4_reass+0xdc>
 802401a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802401c:	899a      	ldrh	r2, [r3, #12]
 802401e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024020:	889b      	ldrh	r3, [r3, #4]
 8024022:	b29b      	uxth	r3, r3
 8024024:	429a      	cmp	r2, r3
 8024026:	d006      	beq.n	8024036 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8024028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802402a:	681b      	ldr	r3, [r3, #0]
 802402c:	633b      	str	r3, [r7, #48]	; 0x30
 802402e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024030:	2b00      	cmp	r3, #0
 8024032:	d1e6      	bne.n	8024002 <ip4_reass+0xb6>
 8024034:	e000      	b.n	8024038 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8024036:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8024038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802403a:	2b00      	cmp	r3, #0
 802403c:	d109      	bne.n	8024052 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 802403e:	8c3b      	ldrh	r3, [r7, #32]
 8024040:	4619      	mov	r1, r3
 8024042:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8024044:	f7ff fdb0 	bl	8023ba8 <ip_reass_enqueue_new_datagram>
 8024048:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 802404a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802404c:	2b00      	cmp	r3, #0
 802404e:	d11c      	bne.n	802408a <ip4_reass+0x13e>
      goto nullreturn;
 8024050:	e105      	b.n	802425e <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8024052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024054:	88db      	ldrh	r3, [r3, #6]
 8024056:	b29b      	uxth	r3, r3
 8024058:	4618      	mov	r0, r3
 802405a:	f7f3 fc4f 	bl	80178fc <lwip_htons>
 802405e:	4603      	mov	r3, r0
 8024060:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8024064:	2b00      	cmp	r3, #0
 8024066:	d110      	bne.n	802408a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8024068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802406a:	89db      	ldrh	r3, [r3, #14]
 802406c:	4618      	mov	r0, r3
 802406e:	f7f3 fc45 	bl	80178fc <lwip_htons>
 8024072:	4603      	mov	r3, r0
 8024074:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8024078:	2b00      	cmp	r3, #0
 802407a:	d006      	beq.n	802408a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 802407c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802407e:	3308      	adds	r3, #8
 8024080:	2214      	movs	r2, #20
 8024082:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8024084:	4618      	mov	r0, r3
 8024086:	f000 fcbd 	bl	8024a04 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 802408a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802408c:	88db      	ldrh	r3, [r3, #6]
 802408e:	b29b      	uxth	r3, r3
 8024090:	f003 0320 	and.w	r3, r3, #32
 8024094:	2b00      	cmp	r3, #0
 8024096:	bf0c      	ite	eq
 8024098:	2301      	moveq	r3, #1
 802409a:	2300      	movne	r3, #0
 802409c:	b2db      	uxtb	r3, r3
 802409e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80240a0:	69fb      	ldr	r3, [r7, #28]
 80240a2:	2b00      	cmp	r3, #0
 80240a4:	d00e      	beq.n	80240c4 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80240a6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80240a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80240aa:	4413      	add	r3, r2
 80240ac:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80240ae:	8b7a      	ldrh	r2, [r7, #26]
 80240b0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80240b2:	429a      	cmp	r2, r3
 80240b4:	f0c0 80a0 	bcc.w	80241f8 <ip4_reass+0x2ac>
 80240b8:	8b7b      	ldrh	r3, [r7, #26]
 80240ba:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80240be:	4293      	cmp	r3, r2
 80240c0:	f200 809a 	bhi.w	80241f8 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80240c4:	69fa      	ldr	r2, [r7, #28]
 80240c6:	6879      	ldr	r1, [r7, #4]
 80240c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80240ca:	f7ff fdd5 	bl	8023c78 <ip_reass_chain_frag_into_datagram_and_validate>
 80240ce:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80240d0:	697b      	ldr	r3, [r7, #20]
 80240d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80240d6:	f000 809b 	beq.w	8024210 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80240da:	4b48      	ldr	r3, [pc, #288]	; (80241fc <ip4_reass+0x2b0>)
 80240dc:	881a      	ldrh	r2, [r3, #0]
 80240de:	8c3b      	ldrh	r3, [r7, #32]
 80240e0:	4413      	add	r3, r2
 80240e2:	b29a      	uxth	r2, r3
 80240e4:	4b45      	ldr	r3, [pc, #276]	; (80241fc <ip4_reass+0x2b0>)
 80240e6:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80240e8:	69fb      	ldr	r3, [r7, #28]
 80240ea:	2b00      	cmp	r3, #0
 80240ec:	d00d      	beq.n	802410a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80240ee:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80240f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80240f2:	4413      	add	r3, r2
 80240f4:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80240f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80240f8:	8a7a      	ldrh	r2, [r7, #18]
 80240fa:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80240fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80240fe:	7f9b      	ldrb	r3, [r3, #30]
 8024100:	f043 0301 	orr.w	r3, r3, #1
 8024104:	b2da      	uxtb	r2, r3
 8024106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024108:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 802410a:	697b      	ldr	r3, [r7, #20]
 802410c:	2b01      	cmp	r3, #1
 802410e:	d171      	bne.n	80241f4 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8024110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024112:	8b9b      	ldrh	r3, [r3, #28]
 8024114:	3314      	adds	r3, #20
 8024116:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8024118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802411a:	685b      	ldr	r3, [r3, #4]
 802411c:	685b      	ldr	r3, [r3, #4]
 802411e:	681b      	ldr	r3, [r3, #0]
 8024120:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8024122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024124:	685b      	ldr	r3, [r3, #4]
 8024126:	685b      	ldr	r3, [r3, #4]
 8024128:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 802412a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802412c:	3308      	adds	r3, #8
 802412e:	2214      	movs	r2, #20
 8024130:	4619      	mov	r1, r3
 8024132:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8024134:	f000 fc66 	bl	8024a04 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8024138:	8a3b      	ldrh	r3, [r7, #16]
 802413a:	4618      	mov	r0, r3
 802413c:	f7f3 fbde 	bl	80178fc <lwip_htons>
 8024140:	4603      	mov	r3, r0
 8024142:	461a      	mov	r2, r3
 8024144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024146:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8024148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802414a:	2200      	movs	r2, #0
 802414c:	719a      	strb	r2, [r3, #6]
 802414e:	2200      	movs	r2, #0
 8024150:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8024152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024154:	2200      	movs	r2, #0
 8024156:	729a      	strb	r2, [r3, #10]
 8024158:	2200      	movs	r2, #0
 802415a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 802415c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802415e:	685b      	ldr	r3, [r3, #4]
 8024160:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8024162:	e00d      	b.n	8024180 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8024164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8024166:	685b      	ldr	r3, [r3, #4]
 8024168:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 802416a:	2114      	movs	r1, #20
 802416c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 802416e:	f7f4 ff1f 	bl	8018fb0 <pbuf_remove_header>
      pbuf_cat(p, r);
 8024172:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8024174:	6878      	ldr	r0, [r7, #4]
 8024176:	f7f5 f86f 	bl	8019258 <pbuf_cat>
      r = iprh->next_pbuf;
 802417a:	68fb      	ldr	r3, [r7, #12]
 802417c:	681b      	ldr	r3, [r3, #0]
 802417e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8024180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8024182:	2b00      	cmp	r3, #0
 8024184:	d1ee      	bne.n	8024164 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8024186:	4b1e      	ldr	r3, [pc, #120]	; (8024200 <ip4_reass+0x2b4>)
 8024188:	681b      	ldr	r3, [r3, #0]
 802418a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802418c:	429a      	cmp	r2, r3
 802418e:	d102      	bne.n	8024196 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8024190:	2300      	movs	r3, #0
 8024192:	62fb      	str	r3, [r7, #44]	; 0x2c
 8024194:	e010      	b.n	80241b8 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8024196:	4b1a      	ldr	r3, [pc, #104]	; (8024200 <ip4_reass+0x2b4>)
 8024198:	681b      	ldr	r3, [r3, #0]
 802419a:	62fb      	str	r3, [r7, #44]	; 0x2c
 802419c:	e007      	b.n	80241ae <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 802419e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80241a0:	681b      	ldr	r3, [r3, #0]
 80241a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80241a4:	429a      	cmp	r2, r3
 80241a6:	d006      	beq.n	80241b6 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80241a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80241aa:	681b      	ldr	r3, [r3, #0]
 80241ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80241ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80241b0:	2b00      	cmp	r3, #0
 80241b2:	d1f4      	bne.n	802419e <ip4_reass+0x252>
 80241b4:	e000      	b.n	80241b8 <ip4_reass+0x26c>
          break;
 80241b6:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80241b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80241ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80241bc:	f7ff fd2e 	bl	8023c1c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80241c0:	6878      	ldr	r0, [r7, #4]
 80241c2:	f7f5 f809 	bl	80191d8 <pbuf_clen>
 80241c6:	4603      	mov	r3, r0
 80241c8:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80241ca:	4b0c      	ldr	r3, [pc, #48]	; (80241fc <ip4_reass+0x2b0>)
 80241cc:	881b      	ldrh	r3, [r3, #0]
 80241ce:	8c3a      	ldrh	r2, [r7, #32]
 80241d0:	429a      	cmp	r2, r3
 80241d2:	d906      	bls.n	80241e2 <ip4_reass+0x296>
 80241d4:	4b0b      	ldr	r3, [pc, #44]	; (8024204 <ip4_reass+0x2b8>)
 80241d6:	f240 229b 	movw	r2, #667	; 0x29b
 80241da:	490b      	ldr	r1, [pc, #44]	; (8024208 <ip4_reass+0x2bc>)
 80241dc:	480b      	ldr	r0, [pc, #44]	; (802420c <ip4_reass+0x2c0>)
 80241de:	f001 fae5 	bl	80257ac <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80241e2:	4b06      	ldr	r3, [pc, #24]	; (80241fc <ip4_reass+0x2b0>)
 80241e4:	881a      	ldrh	r2, [r3, #0]
 80241e6:	8c3b      	ldrh	r3, [r7, #32]
 80241e8:	1ad3      	subs	r3, r2, r3
 80241ea:	b29a      	uxth	r2, r3
 80241ec:	4b03      	ldr	r3, [pc, #12]	; (80241fc <ip4_reass+0x2b0>)
 80241ee:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80241f0:	687b      	ldr	r3, [r7, #4]
 80241f2:	e038      	b.n	8024266 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80241f4:	2300      	movs	r3, #0
 80241f6:	e036      	b.n	8024266 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 80241f8:	bf00      	nop
 80241fa:	e00a      	b.n	8024212 <ip4_reass+0x2c6>
 80241fc:	20013924 	.word	0x20013924
 8024200:	20013920 	.word	0x20013920
 8024204:	0802df30 	.word	0x0802df30
 8024208:	0802e0a0 	.word	0x0802e0a0
 802420c:	0802df78 	.word	0x0802df78
    goto nullreturn_ipr;
 8024210:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8024212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024214:	2b00      	cmp	r3, #0
 8024216:	d106      	bne.n	8024226 <ip4_reass+0x2da>
 8024218:	4b15      	ldr	r3, [pc, #84]	; (8024270 <ip4_reass+0x324>)
 802421a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 802421e:	4915      	ldr	r1, [pc, #84]	; (8024274 <ip4_reass+0x328>)
 8024220:	4815      	ldr	r0, [pc, #84]	; (8024278 <ip4_reass+0x32c>)
 8024222:	f001 fac3 	bl	80257ac <iprintf>
  if (ipr->p == NULL) {
 8024226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024228:	685b      	ldr	r3, [r3, #4]
 802422a:	2b00      	cmp	r3, #0
 802422c:	d116      	bne.n	802425c <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 802422e:	4b13      	ldr	r3, [pc, #76]	; (802427c <ip4_reass+0x330>)
 8024230:	681b      	ldr	r3, [r3, #0]
 8024232:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8024234:	429a      	cmp	r2, r3
 8024236:	d006      	beq.n	8024246 <ip4_reass+0x2fa>
 8024238:	4b0d      	ldr	r3, [pc, #52]	; (8024270 <ip4_reass+0x324>)
 802423a:	f240 22ab 	movw	r2, #683	; 0x2ab
 802423e:	4910      	ldr	r1, [pc, #64]	; (8024280 <ip4_reass+0x334>)
 8024240:	480d      	ldr	r0, [pc, #52]	; (8024278 <ip4_reass+0x32c>)
 8024242:	f001 fab3 	bl	80257ac <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8024246:	2100      	movs	r1, #0
 8024248:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802424a:	f7ff fce7 	bl	8023c1c <ip_reass_dequeue_datagram>
 802424e:	e006      	b.n	802425e <ip4_reass+0x312>
    goto nullreturn;
 8024250:	bf00      	nop
 8024252:	e004      	b.n	802425e <ip4_reass+0x312>
    goto nullreturn;
 8024254:	bf00      	nop
 8024256:	e002      	b.n	802425e <ip4_reass+0x312>
      goto nullreturn;
 8024258:	bf00      	nop
 802425a:	e000      	b.n	802425e <ip4_reass+0x312>
  }

nullreturn:
 802425c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 802425e:	6878      	ldr	r0, [r7, #4]
 8024260:	f7f4 ff2c 	bl	80190bc <pbuf_free>
  return NULL;
 8024264:	2300      	movs	r3, #0
}
 8024266:	4618      	mov	r0, r3
 8024268:	3738      	adds	r7, #56	; 0x38
 802426a:	46bd      	mov	sp, r7
 802426c:	bd80      	pop	{r7, pc}
 802426e:	bf00      	nop
 8024270:	0802df30 	.word	0x0802df30
 8024274:	0802e0bc 	.word	0x0802e0bc
 8024278:	0802df78 	.word	0x0802df78
 802427c:	20013920 	.word	0x20013920
 8024280:	0802e0c8 	.word	0x0802e0c8

08024284 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8024284:	b580      	push	{r7, lr}
 8024286:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8024288:	2005      	movs	r0, #5
 802428a:	f7f4 f815 	bl	80182b8 <memp_malloc>
 802428e:	4603      	mov	r3, r0
}
 8024290:	4618      	mov	r0, r3
 8024292:	bd80      	pop	{r7, pc}

08024294 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8024294:	b580      	push	{r7, lr}
 8024296:	b082      	sub	sp, #8
 8024298:	af00      	add	r7, sp, #0
 802429a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 802429c:	687b      	ldr	r3, [r7, #4]
 802429e:	2b00      	cmp	r3, #0
 80242a0:	d106      	bne.n	80242b0 <ip_frag_free_pbuf_custom_ref+0x1c>
 80242a2:	4b07      	ldr	r3, [pc, #28]	; (80242c0 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80242a4:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80242a8:	4906      	ldr	r1, [pc, #24]	; (80242c4 <ip_frag_free_pbuf_custom_ref+0x30>)
 80242aa:	4807      	ldr	r0, [pc, #28]	; (80242c8 <ip_frag_free_pbuf_custom_ref+0x34>)
 80242ac:	f001 fa7e 	bl	80257ac <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80242b0:	6879      	ldr	r1, [r7, #4]
 80242b2:	2005      	movs	r0, #5
 80242b4:	f7f4 f852 	bl	801835c <memp_free>
}
 80242b8:	bf00      	nop
 80242ba:	3708      	adds	r7, #8
 80242bc:	46bd      	mov	sp, r7
 80242be:	bd80      	pop	{r7, pc}
 80242c0:	0802df30 	.word	0x0802df30
 80242c4:	0802e0e8 	.word	0x0802e0e8
 80242c8:	0802df78 	.word	0x0802df78

080242cc <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80242cc:	b580      	push	{r7, lr}
 80242ce:	b084      	sub	sp, #16
 80242d0:	af00      	add	r7, sp, #0
 80242d2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80242d4:	687b      	ldr	r3, [r7, #4]
 80242d6:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80242d8:	68fb      	ldr	r3, [r7, #12]
 80242da:	2b00      	cmp	r3, #0
 80242dc:	d106      	bne.n	80242ec <ipfrag_free_pbuf_custom+0x20>
 80242de:	4b11      	ldr	r3, [pc, #68]	; (8024324 <ipfrag_free_pbuf_custom+0x58>)
 80242e0:	f240 22ce 	movw	r2, #718	; 0x2ce
 80242e4:	4910      	ldr	r1, [pc, #64]	; (8024328 <ipfrag_free_pbuf_custom+0x5c>)
 80242e6:	4811      	ldr	r0, [pc, #68]	; (802432c <ipfrag_free_pbuf_custom+0x60>)
 80242e8:	f001 fa60 	bl	80257ac <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80242ec:	68fa      	ldr	r2, [r7, #12]
 80242ee:	687b      	ldr	r3, [r7, #4]
 80242f0:	429a      	cmp	r2, r3
 80242f2:	d006      	beq.n	8024302 <ipfrag_free_pbuf_custom+0x36>
 80242f4:	4b0b      	ldr	r3, [pc, #44]	; (8024324 <ipfrag_free_pbuf_custom+0x58>)
 80242f6:	f240 22cf 	movw	r2, #719	; 0x2cf
 80242fa:	490d      	ldr	r1, [pc, #52]	; (8024330 <ipfrag_free_pbuf_custom+0x64>)
 80242fc:	480b      	ldr	r0, [pc, #44]	; (802432c <ipfrag_free_pbuf_custom+0x60>)
 80242fe:	f001 fa55 	bl	80257ac <iprintf>
  if (pcr->original != NULL) {
 8024302:	68fb      	ldr	r3, [r7, #12]
 8024304:	695b      	ldr	r3, [r3, #20]
 8024306:	2b00      	cmp	r3, #0
 8024308:	d004      	beq.n	8024314 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 802430a:	68fb      	ldr	r3, [r7, #12]
 802430c:	695b      	ldr	r3, [r3, #20]
 802430e:	4618      	mov	r0, r3
 8024310:	f7f4 fed4 	bl	80190bc <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8024314:	68f8      	ldr	r0, [r7, #12]
 8024316:	f7ff ffbd 	bl	8024294 <ip_frag_free_pbuf_custom_ref>
}
 802431a:	bf00      	nop
 802431c:	3710      	adds	r7, #16
 802431e:	46bd      	mov	sp, r7
 8024320:	bd80      	pop	{r7, pc}
 8024322:	bf00      	nop
 8024324:	0802df30 	.word	0x0802df30
 8024328:	0802e0f4 	.word	0x0802e0f4
 802432c:	0802df78 	.word	0x0802df78
 8024330:	0802e100 	.word	0x0802e100

08024334 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8024334:	b580      	push	{r7, lr}
 8024336:	b094      	sub	sp, #80	; 0x50
 8024338:	af02      	add	r7, sp, #8
 802433a:	60f8      	str	r0, [r7, #12]
 802433c:	60b9      	str	r1, [r7, #8]
 802433e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8024340:	2300      	movs	r3, #0
 8024342:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8024346:	68bb      	ldr	r3, [r7, #8]
 8024348:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802434a:	3b14      	subs	r3, #20
 802434c:	2b00      	cmp	r3, #0
 802434e:	da00      	bge.n	8024352 <ip4_frag+0x1e>
 8024350:	3307      	adds	r3, #7
 8024352:	10db      	asrs	r3, r3, #3
 8024354:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8024356:	2314      	movs	r3, #20
 8024358:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 802435a:	68fb      	ldr	r3, [r7, #12]
 802435c:	685b      	ldr	r3, [r3, #4]
 802435e:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8024360:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8024362:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8024364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024366:	781b      	ldrb	r3, [r3, #0]
 8024368:	f003 030f 	and.w	r3, r3, #15
 802436c:	b2db      	uxtb	r3, r3
 802436e:	009b      	lsls	r3, r3, #2
 8024370:	b2db      	uxtb	r3, r3
 8024372:	2b14      	cmp	r3, #20
 8024374:	d002      	beq.n	802437c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8024376:	f06f 0305 	mvn.w	r3, #5
 802437a:	e110      	b.n	802459e <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 802437c:	68fb      	ldr	r3, [r7, #12]
 802437e:	895b      	ldrh	r3, [r3, #10]
 8024380:	2b13      	cmp	r3, #19
 8024382:	d809      	bhi.n	8024398 <ip4_frag+0x64>
 8024384:	4b88      	ldr	r3, [pc, #544]	; (80245a8 <ip4_frag+0x274>)
 8024386:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 802438a:	4988      	ldr	r1, [pc, #544]	; (80245ac <ip4_frag+0x278>)
 802438c:	4888      	ldr	r0, [pc, #544]	; (80245b0 <ip4_frag+0x27c>)
 802438e:	f001 fa0d 	bl	80257ac <iprintf>
 8024392:	f06f 0305 	mvn.w	r3, #5
 8024396:	e102      	b.n	802459e <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8024398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802439a:	88db      	ldrh	r3, [r3, #6]
 802439c:	b29b      	uxth	r3, r3
 802439e:	4618      	mov	r0, r3
 80243a0:	f7f3 faac 	bl	80178fc <lwip_htons>
 80243a4:	4603      	mov	r3, r0
 80243a6:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80243a8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80243aa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80243ae:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80243b2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80243b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80243b8:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80243ba:	68fb      	ldr	r3, [r7, #12]
 80243bc:	891b      	ldrh	r3, [r3, #8]
 80243be:	3b14      	subs	r3, #20
 80243c0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80243c4:	e0e1      	b.n	802458a <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80243c6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80243c8:	00db      	lsls	r3, r3, #3
 80243ca:	b29b      	uxth	r3, r3
 80243cc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80243d0:	4293      	cmp	r3, r2
 80243d2:	bf28      	it	cs
 80243d4:	4613      	movcs	r3, r2
 80243d6:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80243d8:	f44f 7220 	mov.w	r2, #640	; 0x280
 80243dc:	2114      	movs	r1, #20
 80243de:	200e      	movs	r0, #14
 80243e0:	f7f4 fb88 	bl	8018af4 <pbuf_alloc>
 80243e4:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 80243e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80243e8:	2b00      	cmp	r3, #0
 80243ea:	f000 80d5 	beq.w	8024598 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80243ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80243f0:	895b      	ldrh	r3, [r3, #10]
 80243f2:	2b13      	cmp	r3, #19
 80243f4:	d806      	bhi.n	8024404 <ip4_frag+0xd0>
 80243f6:	4b6c      	ldr	r3, [pc, #432]	; (80245a8 <ip4_frag+0x274>)
 80243f8:	f44f 7249 	mov.w	r2, #804	; 0x324
 80243fc:	496d      	ldr	r1, [pc, #436]	; (80245b4 <ip4_frag+0x280>)
 80243fe:	486c      	ldr	r0, [pc, #432]	; (80245b0 <ip4_frag+0x27c>)
 8024400:	f001 f9d4 	bl	80257ac <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8024404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024406:	685b      	ldr	r3, [r3, #4]
 8024408:	2214      	movs	r2, #20
 802440a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 802440c:	4618      	mov	r0, r3
 802440e:	f000 faf9 	bl	8024a04 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8024412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024414:	685b      	ldr	r3, [r3, #4]
 8024416:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8024418:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 802441a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 802441e:	e064      	b.n	80244ea <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8024420:	68fb      	ldr	r3, [r7, #12]
 8024422:	895a      	ldrh	r2, [r3, #10]
 8024424:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8024426:	1ad3      	subs	r3, r2, r3
 8024428:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 802442a:	68fb      	ldr	r3, [r7, #12]
 802442c:	895b      	ldrh	r3, [r3, #10]
 802442e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8024430:	429a      	cmp	r2, r3
 8024432:	d906      	bls.n	8024442 <ip4_frag+0x10e>
 8024434:	4b5c      	ldr	r3, [pc, #368]	; (80245a8 <ip4_frag+0x274>)
 8024436:	f240 322d 	movw	r2, #813	; 0x32d
 802443a:	495f      	ldr	r1, [pc, #380]	; (80245b8 <ip4_frag+0x284>)
 802443c:	485c      	ldr	r0, [pc, #368]	; (80245b0 <ip4_frag+0x27c>)
 802443e:	f001 f9b5 	bl	80257ac <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8024442:	8bfa      	ldrh	r2, [r7, #30]
 8024444:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8024448:	4293      	cmp	r3, r2
 802444a:	bf28      	it	cs
 802444c:	4613      	movcs	r3, r2
 802444e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8024452:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8024456:	2b00      	cmp	r3, #0
 8024458:	d105      	bne.n	8024466 <ip4_frag+0x132>
        poff = 0;
 802445a:	2300      	movs	r3, #0
 802445c:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 802445e:	68fb      	ldr	r3, [r7, #12]
 8024460:	681b      	ldr	r3, [r3, #0]
 8024462:	60fb      	str	r3, [r7, #12]
        continue;
 8024464:	e041      	b.n	80244ea <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8024466:	f7ff ff0d 	bl	8024284 <ip_frag_alloc_pbuf_custom_ref>
 802446a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 802446c:	69bb      	ldr	r3, [r7, #24]
 802446e:	2b00      	cmp	r3, #0
 8024470:	d103      	bne.n	802447a <ip4_frag+0x146>
        pbuf_free(rambuf);
 8024472:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8024474:	f7f4 fe22 	bl	80190bc <pbuf_free>
        goto memerr;
 8024478:	e08f      	b.n	802459a <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 802447a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 802447c:	68fb      	ldr	r3, [r7, #12]
 802447e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8024480:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8024482:	4413      	add	r3, r2
 8024484:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8024488:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 802448c:	9201      	str	r2, [sp, #4]
 802448e:	9300      	str	r3, [sp, #0]
 8024490:	4603      	mov	r3, r0
 8024492:	2241      	movs	r2, #65	; 0x41
 8024494:	2000      	movs	r0, #0
 8024496:	f7f4 fc57 	bl	8018d48 <pbuf_alloced_custom>
 802449a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 802449c:	697b      	ldr	r3, [r7, #20]
 802449e:	2b00      	cmp	r3, #0
 80244a0:	d106      	bne.n	80244b0 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80244a2:	69b8      	ldr	r0, [r7, #24]
 80244a4:	f7ff fef6 	bl	8024294 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80244a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80244aa:	f7f4 fe07 	bl	80190bc <pbuf_free>
        goto memerr;
 80244ae:	e074      	b.n	802459a <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80244b0:	68f8      	ldr	r0, [r7, #12]
 80244b2:	f7f4 fea9 	bl	8019208 <pbuf_ref>
      pcr->original = p;
 80244b6:	69bb      	ldr	r3, [r7, #24]
 80244b8:	68fa      	ldr	r2, [r7, #12]
 80244ba:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80244bc:	69bb      	ldr	r3, [r7, #24]
 80244be:	4a3f      	ldr	r2, [pc, #252]	; (80245bc <ip4_frag+0x288>)
 80244c0:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80244c2:	6979      	ldr	r1, [r7, #20]
 80244c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80244c6:	f7f4 fec7 	bl	8019258 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80244ca:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80244ce:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80244d2:	1ad3      	subs	r3, r2, r3
 80244d4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 80244d8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80244dc:	2b00      	cmp	r3, #0
 80244de:	d004      	beq.n	80244ea <ip4_frag+0x1b6>
        poff = 0;
 80244e0:	2300      	movs	r3, #0
 80244e2:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80244e4:	68fb      	ldr	r3, [r7, #12]
 80244e6:	681b      	ldr	r3, [r3, #0]
 80244e8:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80244ea:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80244ee:	2b00      	cmp	r3, #0
 80244f0:	d196      	bne.n	8024420 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80244f2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80244f4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80244f8:	4413      	add	r3, r2
 80244fa:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80244fc:	68bb      	ldr	r3, [r7, #8]
 80244fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8024500:	f1a3 0213 	sub.w	r2, r3, #19
 8024504:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8024508:	429a      	cmp	r2, r3
 802450a:	bfcc      	ite	gt
 802450c:	2301      	movgt	r3, #1
 802450e:	2300      	movle	r3, #0
 8024510:	b2db      	uxtb	r3, r3
 8024512:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8024514:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8024518:	f3c3 030c 	ubfx	r3, r3, #0, #13
 802451c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 802451e:	6a3b      	ldr	r3, [r7, #32]
 8024520:	2b00      	cmp	r3, #0
 8024522:	d002      	beq.n	802452a <ip4_frag+0x1f6>
 8024524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024526:	2b00      	cmp	r3, #0
 8024528:	d003      	beq.n	8024532 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 802452a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 802452c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8024530:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8024532:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8024534:	4618      	mov	r0, r3
 8024536:	f7f3 f9e1 	bl	80178fc <lwip_htons>
 802453a:	4603      	mov	r3, r0
 802453c:	461a      	mov	r2, r3
 802453e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024540:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8024542:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8024544:	3314      	adds	r3, #20
 8024546:	b29b      	uxth	r3, r3
 8024548:	4618      	mov	r0, r3
 802454a:	f7f3 f9d7 	bl	80178fc <lwip_htons>
 802454e:	4603      	mov	r3, r0
 8024550:	461a      	mov	r2, r3
 8024552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024554:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8024556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024558:	2200      	movs	r2, #0
 802455a:	729a      	strb	r2, [r3, #10]
 802455c:	2200      	movs	r2, #0
 802455e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8024560:	68bb      	ldr	r3, [r7, #8]
 8024562:	695b      	ldr	r3, [r3, #20]
 8024564:	687a      	ldr	r2, [r7, #4]
 8024566:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8024568:	68b8      	ldr	r0, [r7, #8]
 802456a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 802456c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802456e:	f7f4 fda5 	bl	80190bc <pbuf_free>
    left = (u16_t)(left - fragsize);
 8024572:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8024576:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8024578:	1ad3      	subs	r3, r2, r3
 802457a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 802457e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8024582:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8024584:	4413      	add	r3, r2
 8024586:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 802458a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 802458e:	2b00      	cmp	r3, #0
 8024590:	f47f af19 	bne.w	80243c6 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8024594:	2300      	movs	r3, #0
 8024596:	e002      	b.n	802459e <ip4_frag+0x26a>
      goto memerr;
 8024598:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 802459a:	f04f 33ff 	mov.w	r3, #4294967295
}
 802459e:	4618      	mov	r0, r3
 80245a0:	3748      	adds	r7, #72	; 0x48
 80245a2:	46bd      	mov	sp, r7
 80245a4:	bd80      	pop	{r7, pc}
 80245a6:	bf00      	nop
 80245a8:	0802df30 	.word	0x0802df30
 80245ac:	0802e10c 	.word	0x0802e10c
 80245b0:	0802df78 	.word	0x0802df78
 80245b4:	0802e128 	.word	0x0802e128
 80245b8:	0802e148 	.word	0x0802e148
 80245bc:	080242cd 	.word	0x080242cd

080245c0 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80245c0:	b580      	push	{r7, lr}
 80245c2:	b086      	sub	sp, #24
 80245c4:	af00      	add	r7, sp, #0
 80245c6:	6078      	str	r0, [r7, #4]
 80245c8:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80245ca:	230e      	movs	r3, #14
 80245cc:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80245ce:	687b      	ldr	r3, [r7, #4]
 80245d0:	895b      	ldrh	r3, [r3, #10]
 80245d2:	2b0e      	cmp	r3, #14
 80245d4:	d96e      	bls.n	80246b4 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80245d6:	687b      	ldr	r3, [r7, #4]
 80245d8:	7bdb      	ldrb	r3, [r3, #15]
 80245da:	2b00      	cmp	r3, #0
 80245dc:	d106      	bne.n	80245ec <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80245de:	683b      	ldr	r3, [r7, #0]
 80245e0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80245e4:	3301      	adds	r3, #1
 80245e6:	b2da      	uxtb	r2, r3
 80245e8:	687b      	ldr	r3, [r7, #4]
 80245ea:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80245ec:	687b      	ldr	r3, [r7, #4]
 80245ee:	685b      	ldr	r3, [r3, #4]
 80245f0:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80245f2:	693b      	ldr	r3, [r7, #16]
 80245f4:	7b1a      	ldrb	r2, [r3, #12]
 80245f6:	7b5b      	ldrb	r3, [r3, #13]
 80245f8:	021b      	lsls	r3, r3, #8
 80245fa:	4313      	orrs	r3, r2
 80245fc:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80245fe:	693b      	ldr	r3, [r7, #16]
 8024600:	781b      	ldrb	r3, [r3, #0]
 8024602:	f003 0301 	and.w	r3, r3, #1
 8024606:	2b00      	cmp	r3, #0
 8024608:	d023      	beq.n	8024652 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 802460a:	693b      	ldr	r3, [r7, #16]
 802460c:	781b      	ldrb	r3, [r3, #0]
 802460e:	2b01      	cmp	r3, #1
 8024610:	d10f      	bne.n	8024632 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8024612:	693b      	ldr	r3, [r7, #16]
 8024614:	785b      	ldrb	r3, [r3, #1]
 8024616:	2b00      	cmp	r3, #0
 8024618:	d11b      	bne.n	8024652 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 802461a:	693b      	ldr	r3, [r7, #16]
 802461c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 802461e:	2b5e      	cmp	r3, #94	; 0x5e
 8024620:	d117      	bne.n	8024652 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8024622:	687b      	ldr	r3, [r7, #4]
 8024624:	7b5b      	ldrb	r3, [r3, #13]
 8024626:	f043 0310 	orr.w	r3, r3, #16
 802462a:	b2da      	uxtb	r2, r3
 802462c:	687b      	ldr	r3, [r7, #4]
 802462e:	735a      	strb	r2, [r3, #13]
 8024630:	e00f      	b.n	8024652 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8024632:	693b      	ldr	r3, [r7, #16]
 8024634:	2206      	movs	r2, #6
 8024636:	4928      	ldr	r1, [pc, #160]	; (80246d8 <ethernet_input+0x118>)
 8024638:	4618      	mov	r0, r3
 802463a:	f000 f9d3 	bl	80249e4 <memcmp>
 802463e:	4603      	mov	r3, r0
 8024640:	2b00      	cmp	r3, #0
 8024642:	d106      	bne.n	8024652 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8024644:	687b      	ldr	r3, [r7, #4]
 8024646:	7b5b      	ldrb	r3, [r3, #13]
 8024648:	f043 0308 	orr.w	r3, r3, #8
 802464c:	b2da      	uxtb	r2, r3
 802464e:	687b      	ldr	r3, [r7, #4]
 8024650:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8024652:	89fb      	ldrh	r3, [r7, #14]
 8024654:	2b08      	cmp	r3, #8
 8024656:	d003      	beq.n	8024660 <ethernet_input+0xa0>
 8024658:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 802465c:	d014      	beq.n	8024688 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 802465e:	e032      	b.n	80246c6 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8024660:	683b      	ldr	r3, [r7, #0]
 8024662:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8024666:	f003 0308 	and.w	r3, r3, #8
 802466a:	2b00      	cmp	r3, #0
 802466c:	d024      	beq.n	80246b8 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 802466e:	8afb      	ldrh	r3, [r7, #22]
 8024670:	4619      	mov	r1, r3
 8024672:	6878      	ldr	r0, [r7, #4]
 8024674:	f7f4 fc9c 	bl	8018fb0 <pbuf_remove_header>
 8024678:	4603      	mov	r3, r0
 802467a:	2b00      	cmp	r3, #0
 802467c:	d11e      	bne.n	80246bc <ethernet_input+0xfc>
        ip4_input(p, netif);
 802467e:	6839      	ldr	r1, [r7, #0]
 8024680:	6878      	ldr	r0, [r7, #4]
 8024682:	f7fe ff03 	bl	802348c <ip4_input>
      break;
 8024686:	e013      	b.n	80246b0 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8024688:	683b      	ldr	r3, [r7, #0]
 802468a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 802468e:	f003 0308 	and.w	r3, r3, #8
 8024692:	2b00      	cmp	r3, #0
 8024694:	d014      	beq.n	80246c0 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8024696:	8afb      	ldrh	r3, [r7, #22]
 8024698:	4619      	mov	r1, r3
 802469a:	6878      	ldr	r0, [r7, #4]
 802469c:	f7f4 fc88 	bl	8018fb0 <pbuf_remove_header>
 80246a0:	4603      	mov	r3, r0
 80246a2:	2b00      	cmp	r3, #0
 80246a4:	d10e      	bne.n	80246c4 <ethernet_input+0x104>
        etharp_input(p, netif);
 80246a6:	6839      	ldr	r1, [r7, #0]
 80246a8:	6878      	ldr	r0, [r7, #4]
 80246aa:	f7fe f89f 	bl	80227ec <etharp_input>
      break;
 80246ae:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80246b0:	2300      	movs	r3, #0
 80246b2:	e00c      	b.n	80246ce <ethernet_input+0x10e>
    goto free_and_return;
 80246b4:	bf00      	nop
 80246b6:	e006      	b.n	80246c6 <ethernet_input+0x106>
        goto free_and_return;
 80246b8:	bf00      	nop
 80246ba:	e004      	b.n	80246c6 <ethernet_input+0x106>
        goto free_and_return;
 80246bc:	bf00      	nop
 80246be:	e002      	b.n	80246c6 <ethernet_input+0x106>
        goto free_and_return;
 80246c0:	bf00      	nop
 80246c2:	e000      	b.n	80246c6 <ethernet_input+0x106>
        goto free_and_return;
 80246c4:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80246c6:	6878      	ldr	r0, [r7, #4]
 80246c8:	f7f4 fcf8 	bl	80190bc <pbuf_free>
  return ERR_OK;
 80246cc:	2300      	movs	r3, #0
}
 80246ce:	4618      	mov	r0, r3
 80246d0:	3718      	adds	r7, #24
 80246d2:	46bd      	mov	sp, r7
 80246d4:	bd80      	pop	{r7, pc}
 80246d6:	bf00      	nop
 80246d8:	0802e470 	.word	0x0802e470

080246dc <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80246dc:	b580      	push	{r7, lr}
 80246de:	b086      	sub	sp, #24
 80246e0:	af00      	add	r7, sp, #0
 80246e2:	60f8      	str	r0, [r7, #12]
 80246e4:	60b9      	str	r1, [r7, #8]
 80246e6:	607a      	str	r2, [r7, #4]
 80246e8:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80246ea:	8c3b      	ldrh	r3, [r7, #32]
 80246ec:	4618      	mov	r0, r3
 80246ee:	f7f3 f905 	bl	80178fc <lwip_htons>
 80246f2:	4603      	mov	r3, r0
 80246f4:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80246f6:	210e      	movs	r1, #14
 80246f8:	68b8      	ldr	r0, [r7, #8]
 80246fa:	f7f4 fc49 	bl	8018f90 <pbuf_add_header>
 80246fe:	4603      	mov	r3, r0
 8024700:	2b00      	cmp	r3, #0
 8024702:	d125      	bne.n	8024750 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8024704:	68bb      	ldr	r3, [r7, #8]
 8024706:	685b      	ldr	r3, [r3, #4]
 8024708:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 802470a:	693b      	ldr	r3, [r7, #16]
 802470c:	8afa      	ldrh	r2, [r7, #22]
 802470e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8024710:	693b      	ldr	r3, [r7, #16]
 8024712:	2206      	movs	r2, #6
 8024714:	6839      	ldr	r1, [r7, #0]
 8024716:	4618      	mov	r0, r3
 8024718:	f000 f974 	bl	8024a04 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 802471c:	693b      	ldr	r3, [r7, #16]
 802471e:	3306      	adds	r3, #6
 8024720:	2206      	movs	r2, #6
 8024722:	6879      	ldr	r1, [r7, #4]
 8024724:	4618      	mov	r0, r3
 8024726:	f000 f96d 	bl	8024a04 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 802472a:	68fb      	ldr	r3, [r7, #12]
 802472c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8024730:	2b06      	cmp	r3, #6
 8024732:	d006      	beq.n	8024742 <ethernet_output+0x66>
 8024734:	4b0a      	ldr	r3, [pc, #40]	; (8024760 <ethernet_output+0x84>)
 8024736:	f44f 7299 	mov.w	r2, #306	; 0x132
 802473a:	490a      	ldr	r1, [pc, #40]	; (8024764 <ethernet_output+0x88>)
 802473c:	480a      	ldr	r0, [pc, #40]	; (8024768 <ethernet_output+0x8c>)
 802473e:	f001 f835 	bl	80257ac <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8024742:	68fb      	ldr	r3, [r7, #12]
 8024744:	699b      	ldr	r3, [r3, #24]
 8024746:	68b9      	ldr	r1, [r7, #8]
 8024748:	68f8      	ldr	r0, [r7, #12]
 802474a:	4798      	blx	r3
 802474c:	4603      	mov	r3, r0
 802474e:	e002      	b.n	8024756 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8024750:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8024752:	f06f 0301 	mvn.w	r3, #1
}
 8024756:	4618      	mov	r0, r3
 8024758:	3718      	adds	r7, #24
 802475a:	46bd      	mov	sp, r7
 802475c:	bd80      	pop	{r7, pc}
 802475e:	bf00      	nop
 8024760:	0802e158 	.word	0x0802e158
 8024764:	0802e190 	.word	0x0802e190
 8024768:	0802e1c4 	.word	0x0802e1c4

0802476c <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 802476c:	b580      	push	{r7, lr}
 802476e:	b082      	sub	sp, #8
 8024770:	af00      	add	r7, sp, #0
 8024772:	6078      	str	r0, [r7, #4]
 8024774:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 8024776:	683b      	ldr	r3, [r7, #0]
 8024778:	2200      	movs	r2, #0
 802477a:	2104      	movs	r1, #4
 802477c:	4618      	mov	r0, r3
 802477e:	f7ed fcfd 	bl	801217c <osMessageQueueNew>
 8024782:	4602      	mov	r2, r0
 8024784:	687b      	ldr	r3, [r7, #4]
 8024786:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8024788:	687b      	ldr	r3, [r7, #4]
 802478a:	681b      	ldr	r3, [r3, #0]
 802478c:	2b00      	cmp	r3, #0
 802478e:	d102      	bne.n	8024796 <sys_mbox_new+0x2a>
    return ERR_MEM;
 8024790:	f04f 33ff 	mov.w	r3, #4294967295
 8024794:	e000      	b.n	8024798 <sys_mbox_new+0x2c>

  return ERR_OK;
 8024796:	2300      	movs	r3, #0
}
 8024798:	4618      	mov	r0, r3
 802479a:	3708      	adds	r7, #8
 802479c:	46bd      	mov	sp, r7
 802479e:	bd80      	pop	{r7, pc}

080247a0 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 80247a0:	b580      	push	{r7, lr}
 80247a2:	b084      	sub	sp, #16
 80247a4:	af00      	add	r7, sp, #0
 80247a6:	6078      	str	r0, [r7, #4]
 80247a8:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 80247aa:	687b      	ldr	r3, [r7, #4]
 80247ac:	6818      	ldr	r0, [r3, #0]
 80247ae:	4639      	mov	r1, r7
 80247b0:	2300      	movs	r3, #0
 80247b2:	2200      	movs	r2, #0
 80247b4:	f7ed fd56 	bl	8012264 <osMessageQueuePut>
 80247b8:	4603      	mov	r3, r0
 80247ba:	2b00      	cmp	r3, #0
 80247bc:	d102      	bne.n	80247c4 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 80247be:	2300      	movs	r3, #0
 80247c0:	73fb      	strb	r3, [r7, #15]
 80247c2:	e001      	b.n	80247c8 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 80247c4:	23ff      	movs	r3, #255	; 0xff
 80247c6:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 80247c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80247cc:	4618      	mov	r0, r3
 80247ce:	3710      	adds	r7, #16
 80247d0:	46bd      	mov	sp, r7
 80247d2:	bd80      	pop	{r7, pc}

080247d4 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80247d4:	b580      	push	{r7, lr}
 80247d6:	b086      	sub	sp, #24
 80247d8:	af00      	add	r7, sp, #0
 80247da:	60f8      	str	r0, [r7, #12]
 80247dc:	60b9      	str	r1, [r7, #8]
 80247de:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 80247e0:	f7ed f9d0 	bl	8011b84 <osKernelGetTickCount>
 80247e4:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 80247e6:	687b      	ldr	r3, [r7, #4]
 80247e8:	2b00      	cmp	r3, #0
 80247ea:	d013      	beq.n	8024814 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 80247ec:	68fb      	ldr	r3, [r7, #12]
 80247ee:	6818      	ldr	r0, [r3, #0]
 80247f0:	687b      	ldr	r3, [r7, #4]
 80247f2:	2200      	movs	r2, #0
 80247f4:	68b9      	ldr	r1, [r7, #8]
 80247f6:	f7ed fd95 	bl	8012324 <osMessageQueueGet>
 80247fa:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 80247fc:	693b      	ldr	r3, [r7, #16]
 80247fe:	2b00      	cmp	r3, #0
 8024800:	d105      	bne.n	802480e <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 8024802:	f7ed f9bf 	bl	8011b84 <osKernelGetTickCount>
 8024806:	4602      	mov	r2, r0
 8024808:	697b      	ldr	r3, [r7, #20]
 802480a:	1ad3      	subs	r3, r2, r3
 802480c:	e00f      	b.n	802482e <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 802480e:	f04f 33ff 	mov.w	r3, #4294967295
 8024812:	e00c      	b.n	802482e <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 8024814:	68fb      	ldr	r3, [r7, #12]
 8024816:	6818      	ldr	r0, [r3, #0]
 8024818:	f04f 33ff 	mov.w	r3, #4294967295
 802481c:	2200      	movs	r2, #0
 802481e:	68b9      	ldr	r1, [r7, #8]
 8024820:	f7ed fd80 	bl	8012324 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 8024824:	f7ed f9ae 	bl	8011b84 <osKernelGetTickCount>
 8024828:	4602      	mov	r2, r0
 802482a:	697b      	ldr	r3, [r7, #20]
 802482c:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 802482e:	4618      	mov	r0, r3
 8024830:	3718      	adds	r7, #24
 8024832:	46bd      	mov	sp, r7
 8024834:	bd80      	pop	{r7, pc}

08024836 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8024836:	b480      	push	{r7}
 8024838:	b083      	sub	sp, #12
 802483a:	af00      	add	r7, sp, #0
 802483c:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 802483e:	687b      	ldr	r3, [r7, #4]
 8024840:	681b      	ldr	r3, [r3, #0]
 8024842:	2b00      	cmp	r3, #0
 8024844:	d101      	bne.n	802484a <sys_mbox_valid+0x14>
    return 0;
 8024846:	2300      	movs	r3, #0
 8024848:	e000      	b.n	802484c <sys_mbox_valid+0x16>
  else
    return 1;
 802484a:	2301      	movs	r3, #1
}
 802484c:	4618      	mov	r0, r3
 802484e:	370c      	adds	r7, #12
 8024850:	46bd      	mov	sp, r7
 8024852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024856:	4770      	bx	lr

08024858 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8024858:	b580      	push	{r7, lr}
 802485a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 802485c:	2000      	movs	r0, #0
 802485e:	f7ed fa5f 	bl	8011d20 <osMutexNew>
 8024862:	4603      	mov	r3, r0
 8024864:	4a01      	ldr	r2, [pc, #4]	; (802486c <sys_init+0x14>)
 8024866:	6013      	str	r3, [r2, #0]
#endif
}
 8024868:	bf00      	nop
 802486a:	bd80      	pop	{r7, pc}
 802486c:	2001bd50 	.word	0x2001bd50

08024870 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8024870:	b580      	push	{r7, lr}
 8024872:	b082      	sub	sp, #8
 8024874:	af00      	add	r7, sp, #0
 8024876:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 8024878:	2000      	movs	r0, #0
 802487a:	f7ed fa51 	bl	8011d20 <osMutexNew>
 802487e:	4602      	mov	r2, r0
 8024880:	687b      	ldr	r3, [r7, #4]
 8024882:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 8024884:	687b      	ldr	r3, [r7, #4]
 8024886:	681b      	ldr	r3, [r3, #0]
 8024888:	2b00      	cmp	r3, #0
 802488a:	d102      	bne.n	8024892 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 802488c:	f04f 33ff 	mov.w	r3, #4294967295
 8024890:	e000      	b.n	8024894 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8024892:	2300      	movs	r3, #0
}
 8024894:	4618      	mov	r0, r3
 8024896:	3708      	adds	r7, #8
 8024898:	46bd      	mov	sp, r7
 802489a:	bd80      	pop	{r7, pc}

0802489c <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 802489c:	b580      	push	{r7, lr}
 802489e:	b082      	sub	sp, #8
 80248a0:	af00      	add	r7, sp, #0
 80248a2:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 80248a4:	687b      	ldr	r3, [r7, #4]
 80248a6:	681b      	ldr	r3, [r3, #0]
 80248a8:	f04f 31ff 	mov.w	r1, #4294967295
 80248ac:	4618      	mov	r0, r3
 80248ae:	f7ed fabd 	bl	8011e2c <osMutexAcquire>
#endif
}
 80248b2:	bf00      	nop
 80248b4:	3708      	adds	r7, #8
 80248b6:	46bd      	mov	sp, r7
 80248b8:	bd80      	pop	{r7, pc}

080248ba <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 80248ba:	b580      	push	{r7, lr}
 80248bc:	b082      	sub	sp, #8
 80248be:	af00      	add	r7, sp, #0
 80248c0:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 80248c2:	687b      	ldr	r3, [r7, #4]
 80248c4:	681b      	ldr	r3, [r3, #0]
 80248c6:	4618      	mov	r0, r3
 80248c8:	f7ed fafb 	bl	8011ec2 <osMutexRelease>
}
 80248cc:	bf00      	nop
 80248ce:	3708      	adds	r7, #8
 80248d0:	46bd      	mov	sp, r7
 80248d2:	bd80      	pop	{r7, pc}

080248d4 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 80248d4:	b580      	push	{r7, lr}
 80248d6:	b08e      	sub	sp, #56	; 0x38
 80248d8:	af00      	add	r7, sp, #0
 80248da:	60f8      	str	r0, [r7, #12]
 80248dc:	60b9      	str	r1, [r7, #8]
 80248de:	607a      	str	r2, [r7, #4]
 80248e0:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 80248e2:	f107 0314 	add.w	r3, r7, #20
 80248e6:	2224      	movs	r2, #36	; 0x24
 80248e8:	2100      	movs	r1, #0
 80248ea:	4618      	mov	r0, r3
 80248ec:	f000 f8b2 	bl	8024a54 <memset>
 80248f0:	68fb      	ldr	r3, [r7, #12]
 80248f2:	617b      	str	r3, [r7, #20]
 80248f4:	683b      	ldr	r3, [r7, #0]
 80248f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80248f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80248fa:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 80248fc:	f107 0314 	add.w	r3, r7, #20
 8024900:	461a      	mov	r2, r3
 8024902:	6879      	ldr	r1, [r7, #4]
 8024904:	68b8      	ldr	r0, [r7, #8]
 8024906:	f7ed f952 	bl	8011bae <osThreadNew>
 802490a:	4603      	mov	r3, r0
#endif
}
 802490c:	4618      	mov	r0, r3
 802490e:	3738      	adds	r7, #56	; 0x38
 8024910:	46bd      	mov	sp, r7
 8024912:	bd80      	pop	{r7, pc}

08024914 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8024914:	b580      	push	{r7, lr}
 8024916:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 8024918:	4b04      	ldr	r3, [pc, #16]	; (802492c <sys_arch_protect+0x18>)
 802491a:	681b      	ldr	r3, [r3, #0]
 802491c:	f04f 31ff 	mov.w	r1, #4294967295
 8024920:	4618      	mov	r0, r3
 8024922:	f7ed fa83 	bl	8011e2c <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 8024926:	2301      	movs	r3, #1
}
 8024928:	4618      	mov	r0, r3
 802492a:	bd80      	pop	{r7, pc}
 802492c:	2001bd50 	.word	0x2001bd50

08024930 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8024930:	b580      	push	{r7, lr}
 8024932:	b082      	sub	sp, #8
 8024934:	af00      	add	r7, sp, #0
 8024936:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8024938:	4b04      	ldr	r3, [pc, #16]	; (802494c <sys_arch_unprotect+0x1c>)
 802493a:	681b      	ldr	r3, [r3, #0]
 802493c:	4618      	mov	r0, r3
 802493e:	f7ed fac0 	bl	8011ec2 <osMutexRelease>
}
 8024942:	bf00      	nop
 8024944:	3708      	adds	r7, #8
 8024946:	46bd      	mov	sp, r7
 8024948:	bd80      	pop	{r7, pc}
 802494a:	bf00      	nop
 802494c:	2001bd50 	.word	0x2001bd50

08024950 <atoi>:
 8024950:	220a      	movs	r2, #10
 8024952:	2100      	movs	r1, #0
 8024954:	f001 bf6e 	b.w	8026834 <strtol>

08024958 <fiprintf>:
 8024958:	b40e      	push	{r1, r2, r3}
 802495a:	b503      	push	{r0, r1, lr}
 802495c:	4601      	mov	r1, r0
 802495e:	ab03      	add	r3, sp, #12
 8024960:	4805      	ldr	r0, [pc, #20]	; (8024978 <fiprintf+0x20>)
 8024962:	f853 2b04 	ldr.w	r2, [r3], #4
 8024966:	6800      	ldr	r0, [r0, #0]
 8024968:	9301      	str	r3, [sp, #4]
 802496a:	f000 f985 	bl	8024c78 <_vfiprintf_r>
 802496e:	b002      	add	sp, #8
 8024970:	f85d eb04 	ldr.w	lr, [sp], #4
 8024974:	b003      	add	sp, #12
 8024976:	4770      	bx	lr
 8024978:	10000070 	.word	0x10000070

0802497c <__libc_init_array>:
 802497c:	b570      	push	{r4, r5, r6, lr}
 802497e:	4d0d      	ldr	r5, [pc, #52]	; (80249b4 <__libc_init_array+0x38>)
 8024980:	4c0d      	ldr	r4, [pc, #52]	; (80249b8 <__libc_init_array+0x3c>)
 8024982:	1b64      	subs	r4, r4, r5
 8024984:	10a4      	asrs	r4, r4, #2
 8024986:	2600      	movs	r6, #0
 8024988:	42a6      	cmp	r6, r4
 802498a:	d109      	bne.n	80249a0 <__libc_init_array+0x24>
 802498c:	4d0b      	ldr	r5, [pc, #44]	; (80249bc <__libc_init_array+0x40>)
 802498e:	4c0c      	ldr	r4, [pc, #48]	; (80249c0 <__libc_init_array+0x44>)
 8024990:	f004 ffa6 	bl	80298e0 <_init>
 8024994:	1b64      	subs	r4, r4, r5
 8024996:	10a4      	asrs	r4, r4, #2
 8024998:	2600      	movs	r6, #0
 802499a:	42a6      	cmp	r6, r4
 802499c:	d105      	bne.n	80249aa <__libc_init_array+0x2e>
 802499e:	bd70      	pop	{r4, r5, r6, pc}
 80249a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80249a4:	4798      	blx	r3
 80249a6:	3601      	adds	r6, #1
 80249a8:	e7ee      	b.n	8024988 <__libc_init_array+0xc>
 80249aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80249ae:	4798      	blx	r3
 80249b0:	3601      	adds	r6, #1
 80249b2:	e7f2      	b.n	802499a <__libc_init_array+0x1e>
 80249b4:	0802e9a0 	.word	0x0802e9a0
 80249b8:	0802e9a0 	.word	0x0802e9a0
 80249bc:	0802e9a0 	.word	0x0802e9a0
 80249c0:	0802e9a4 	.word	0x0802e9a4

080249c4 <malloc>:
 80249c4:	4b02      	ldr	r3, [pc, #8]	; (80249d0 <malloc+0xc>)
 80249c6:	4601      	mov	r1, r0
 80249c8:	6818      	ldr	r0, [r3, #0]
 80249ca:	f000 b8b7 	b.w	8024b3c <_malloc_r>
 80249ce:	bf00      	nop
 80249d0:	10000070 	.word	0x10000070

080249d4 <free>:
 80249d4:	4b02      	ldr	r3, [pc, #8]	; (80249e0 <free+0xc>)
 80249d6:	4601      	mov	r1, r0
 80249d8:	6818      	ldr	r0, [r3, #0]
 80249da:	f000 b843 	b.w	8024a64 <_free_r>
 80249de:	bf00      	nop
 80249e0:	10000070 	.word	0x10000070

080249e4 <memcmp>:
 80249e4:	b510      	push	{r4, lr}
 80249e6:	3901      	subs	r1, #1
 80249e8:	4402      	add	r2, r0
 80249ea:	4290      	cmp	r0, r2
 80249ec:	d101      	bne.n	80249f2 <memcmp+0xe>
 80249ee:	2000      	movs	r0, #0
 80249f0:	e005      	b.n	80249fe <memcmp+0x1a>
 80249f2:	7803      	ldrb	r3, [r0, #0]
 80249f4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80249f8:	42a3      	cmp	r3, r4
 80249fa:	d001      	beq.n	8024a00 <memcmp+0x1c>
 80249fc:	1b18      	subs	r0, r3, r4
 80249fe:	bd10      	pop	{r4, pc}
 8024a00:	3001      	adds	r0, #1
 8024a02:	e7f2      	b.n	80249ea <memcmp+0x6>

08024a04 <memcpy>:
 8024a04:	440a      	add	r2, r1
 8024a06:	4291      	cmp	r1, r2
 8024a08:	f100 33ff 	add.w	r3, r0, #4294967295
 8024a0c:	d100      	bne.n	8024a10 <memcpy+0xc>
 8024a0e:	4770      	bx	lr
 8024a10:	b510      	push	{r4, lr}
 8024a12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8024a16:	f803 4f01 	strb.w	r4, [r3, #1]!
 8024a1a:	4291      	cmp	r1, r2
 8024a1c:	d1f9      	bne.n	8024a12 <memcpy+0xe>
 8024a1e:	bd10      	pop	{r4, pc}

08024a20 <memmove>:
 8024a20:	4288      	cmp	r0, r1
 8024a22:	b510      	push	{r4, lr}
 8024a24:	eb01 0402 	add.w	r4, r1, r2
 8024a28:	d902      	bls.n	8024a30 <memmove+0x10>
 8024a2a:	4284      	cmp	r4, r0
 8024a2c:	4623      	mov	r3, r4
 8024a2e:	d807      	bhi.n	8024a40 <memmove+0x20>
 8024a30:	1e43      	subs	r3, r0, #1
 8024a32:	42a1      	cmp	r1, r4
 8024a34:	d008      	beq.n	8024a48 <memmove+0x28>
 8024a36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8024a3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8024a3e:	e7f8      	b.n	8024a32 <memmove+0x12>
 8024a40:	4402      	add	r2, r0
 8024a42:	4601      	mov	r1, r0
 8024a44:	428a      	cmp	r2, r1
 8024a46:	d100      	bne.n	8024a4a <memmove+0x2a>
 8024a48:	bd10      	pop	{r4, pc}
 8024a4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8024a4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8024a52:	e7f7      	b.n	8024a44 <memmove+0x24>

08024a54 <memset>:
 8024a54:	4402      	add	r2, r0
 8024a56:	4603      	mov	r3, r0
 8024a58:	4293      	cmp	r3, r2
 8024a5a:	d100      	bne.n	8024a5e <memset+0xa>
 8024a5c:	4770      	bx	lr
 8024a5e:	f803 1b01 	strb.w	r1, [r3], #1
 8024a62:	e7f9      	b.n	8024a58 <memset+0x4>

08024a64 <_free_r>:
 8024a64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8024a66:	2900      	cmp	r1, #0
 8024a68:	d044      	beq.n	8024af4 <_free_r+0x90>
 8024a6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8024a6e:	9001      	str	r0, [sp, #4]
 8024a70:	2b00      	cmp	r3, #0
 8024a72:	f1a1 0404 	sub.w	r4, r1, #4
 8024a76:	bfb8      	it	lt
 8024a78:	18e4      	addlt	r4, r4, r3
 8024a7a:	f003 fc1d 	bl	80282b8 <__malloc_lock>
 8024a7e:	4a1e      	ldr	r2, [pc, #120]	; (8024af8 <_free_r+0x94>)
 8024a80:	9801      	ldr	r0, [sp, #4]
 8024a82:	6813      	ldr	r3, [r2, #0]
 8024a84:	b933      	cbnz	r3, 8024a94 <_free_r+0x30>
 8024a86:	6063      	str	r3, [r4, #4]
 8024a88:	6014      	str	r4, [r2, #0]
 8024a8a:	b003      	add	sp, #12
 8024a8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8024a90:	f003 bc18 	b.w	80282c4 <__malloc_unlock>
 8024a94:	42a3      	cmp	r3, r4
 8024a96:	d908      	bls.n	8024aaa <_free_r+0x46>
 8024a98:	6825      	ldr	r5, [r4, #0]
 8024a9a:	1961      	adds	r1, r4, r5
 8024a9c:	428b      	cmp	r3, r1
 8024a9e:	bf01      	itttt	eq
 8024aa0:	6819      	ldreq	r1, [r3, #0]
 8024aa2:	685b      	ldreq	r3, [r3, #4]
 8024aa4:	1949      	addeq	r1, r1, r5
 8024aa6:	6021      	streq	r1, [r4, #0]
 8024aa8:	e7ed      	b.n	8024a86 <_free_r+0x22>
 8024aaa:	461a      	mov	r2, r3
 8024aac:	685b      	ldr	r3, [r3, #4]
 8024aae:	b10b      	cbz	r3, 8024ab4 <_free_r+0x50>
 8024ab0:	42a3      	cmp	r3, r4
 8024ab2:	d9fa      	bls.n	8024aaa <_free_r+0x46>
 8024ab4:	6811      	ldr	r1, [r2, #0]
 8024ab6:	1855      	adds	r5, r2, r1
 8024ab8:	42a5      	cmp	r5, r4
 8024aba:	d10b      	bne.n	8024ad4 <_free_r+0x70>
 8024abc:	6824      	ldr	r4, [r4, #0]
 8024abe:	4421      	add	r1, r4
 8024ac0:	1854      	adds	r4, r2, r1
 8024ac2:	42a3      	cmp	r3, r4
 8024ac4:	6011      	str	r1, [r2, #0]
 8024ac6:	d1e0      	bne.n	8024a8a <_free_r+0x26>
 8024ac8:	681c      	ldr	r4, [r3, #0]
 8024aca:	685b      	ldr	r3, [r3, #4]
 8024acc:	6053      	str	r3, [r2, #4]
 8024ace:	4421      	add	r1, r4
 8024ad0:	6011      	str	r1, [r2, #0]
 8024ad2:	e7da      	b.n	8024a8a <_free_r+0x26>
 8024ad4:	d902      	bls.n	8024adc <_free_r+0x78>
 8024ad6:	230c      	movs	r3, #12
 8024ad8:	6003      	str	r3, [r0, #0]
 8024ada:	e7d6      	b.n	8024a8a <_free_r+0x26>
 8024adc:	6825      	ldr	r5, [r4, #0]
 8024ade:	1961      	adds	r1, r4, r5
 8024ae0:	428b      	cmp	r3, r1
 8024ae2:	bf04      	itt	eq
 8024ae4:	6819      	ldreq	r1, [r3, #0]
 8024ae6:	685b      	ldreq	r3, [r3, #4]
 8024ae8:	6063      	str	r3, [r4, #4]
 8024aea:	bf04      	itt	eq
 8024aec:	1949      	addeq	r1, r1, r5
 8024aee:	6021      	streq	r1, [r4, #0]
 8024af0:	6054      	str	r4, [r2, #4]
 8024af2:	e7ca      	b.n	8024a8a <_free_r+0x26>
 8024af4:	b003      	add	sp, #12
 8024af6:	bd30      	pop	{r4, r5, pc}
 8024af8:	20013928 	.word	0x20013928

08024afc <sbrk_aligned>:
 8024afc:	b570      	push	{r4, r5, r6, lr}
 8024afe:	4e0e      	ldr	r6, [pc, #56]	; (8024b38 <sbrk_aligned+0x3c>)
 8024b00:	460c      	mov	r4, r1
 8024b02:	6831      	ldr	r1, [r6, #0]
 8024b04:	4605      	mov	r5, r0
 8024b06:	b911      	cbnz	r1, 8024b0e <sbrk_aligned+0x12>
 8024b08:	f000 ff24 	bl	8025954 <_sbrk_r>
 8024b0c:	6030      	str	r0, [r6, #0]
 8024b0e:	4621      	mov	r1, r4
 8024b10:	4628      	mov	r0, r5
 8024b12:	f000 ff1f 	bl	8025954 <_sbrk_r>
 8024b16:	1c43      	adds	r3, r0, #1
 8024b18:	d00a      	beq.n	8024b30 <sbrk_aligned+0x34>
 8024b1a:	1cc4      	adds	r4, r0, #3
 8024b1c:	f024 0403 	bic.w	r4, r4, #3
 8024b20:	42a0      	cmp	r0, r4
 8024b22:	d007      	beq.n	8024b34 <sbrk_aligned+0x38>
 8024b24:	1a21      	subs	r1, r4, r0
 8024b26:	4628      	mov	r0, r5
 8024b28:	f000 ff14 	bl	8025954 <_sbrk_r>
 8024b2c:	3001      	adds	r0, #1
 8024b2e:	d101      	bne.n	8024b34 <sbrk_aligned+0x38>
 8024b30:	f04f 34ff 	mov.w	r4, #4294967295
 8024b34:	4620      	mov	r0, r4
 8024b36:	bd70      	pop	{r4, r5, r6, pc}
 8024b38:	2001392c 	.word	0x2001392c

08024b3c <_malloc_r>:
 8024b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024b40:	1ccd      	adds	r5, r1, #3
 8024b42:	f025 0503 	bic.w	r5, r5, #3
 8024b46:	3508      	adds	r5, #8
 8024b48:	2d0c      	cmp	r5, #12
 8024b4a:	bf38      	it	cc
 8024b4c:	250c      	movcc	r5, #12
 8024b4e:	2d00      	cmp	r5, #0
 8024b50:	4607      	mov	r7, r0
 8024b52:	db01      	blt.n	8024b58 <_malloc_r+0x1c>
 8024b54:	42a9      	cmp	r1, r5
 8024b56:	d905      	bls.n	8024b64 <_malloc_r+0x28>
 8024b58:	230c      	movs	r3, #12
 8024b5a:	603b      	str	r3, [r7, #0]
 8024b5c:	2600      	movs	r6, #0
 8024b5e:	4630      	mov	r0, r6
 8024b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024b64:	4e2e      	ldr	r6, [pc, #184]	; (8024c20 <_malloc_r+0xe4>)
 8024b66:	f003 fba7 	bl	80282b8 <__malloc_lock>
 8024b6a:	6833      	ldr	r3, [r6, #0]
 8024b6c:	461c      	mov	r4, r3
 8024b6e:	bb34      	cbnz	r4, 8024bbe <_malloc_r+0x82>
 8024b70:	4629      	mov	r1, r5
 8024b72:	4638      	mov	r0, r7
 8024b74:	f7ff ffc2 	bl	8024afc <sbrk_aligned>
 8024b78:	1c43      	adds	r3, r0, #1
 8024b7a:	4604      	mov	r4, r0
 8024b7c:	d14d      	bne.n	8024c1a <_malloc_r+0xde>
 8024b7e:	6834      	ldr	r4, [r6, #0]
 8024b80:	4626      	mov	r6, r4
 8024b82:	2e00      	cmp	r6, #0
 8024b84:	d140      	bne.n	8024c08 <_malloc_r+0xcc>
 8024b86:	6823      	ldr	r3, [r4, #0]
 8024b88:	4631      	mov	r1, r6
 8024b8a:	4638      	mov	r0, r7
 8024b8c:	eb04 0803 	add.w	r8, r4, r3
 8024b90:	f000 fee0 	bl	8025954 <_sbrk_r>
 8024b94:	4580      	cmp	r8, r0
 8024b96:	d13a      	bne.n	8024c0e <_malloc_r+0xd2>
 8024b98:	6821      	ldr	r1, [r4, #0]
 8024b9a:	3503      	adds	r5, #3
 8024b9c:	1a6d      	subs	r5, r5, r1
 8024b9e:	f025 0503 	bic.w	r5, r5, #3
 8024ba2:	3508      	adds	r5, #8
 8024ba4:	2d0c      	cmp	r5, #12
 8024ba6:	bf38      	it	cc
 8024ba8:	250c      	movcc	r5, #12
 8024baa:	4629      	mov	r1, r5
 8024bac:	4638      	mov	r0, r7
 8024bae:	f7ff ffa5 	bl	8024afc <sbrk_aligned>
 8024bb2:	3001      	adds	r0, #1
 8024bb4:	d02b      	beq.n	8024c0e <_malloc_r+0xd2>
 8024bb6:	6823      	ldr	r3, [r4, #0]
 8024bb8:	442b      	add	r3, r5
 8024bba:	6023      	str	r3, [r4, #0]
 8024bbc:	e00e      	b.n	8024bdc <_malloc_r+0xa0>
 8024bbe:	6822      	ldr	r2, [r4, #0]
 8024bc0:	1b52      	subs	r2, r2, r5
 8024bc2:	d41e      	bmi.n	8024c02 <_malloc_r+0xc6>
 8024bc4:	2a0b      	cmp	r2, #11
 8024bc6:	d916      	bls.n	8024bf6 <_malloc_r+0xba>
 8024bc8:	1961      	adds	r1, r4, r5
 8024bca:	42a3      	cmp	r3, r4
 8024bcc:	6025      	str	r5, [r4, #0]
 8024bce:	bf18      	it	ne
 8024bd0:	6059      	strne	r1, [r3, #4]
 8024bd2:	6863      	ldr	r3, [r4, #4]
 8024bd4:	bf08      	it	eq
 8024bd6:	6031      	streq	r1, [r6, #0]
 8024bd8:	5162      	str	r2, [r4, r5]
 8024bda:	604b      	str	r3, [r1, #4]
 8024bdc:	4638      	mov	r0, r7
 8024bde:	f104 060b 	add.w	r6, r4, #11
 8024be2:	f003 fb6f 	bl	80282c4 <__malloc_unlock>
 8024be6:	f026 0607 	bic.w	r6, r6, #7
 8024bea:	1d23      	adds	r3, r4, #4
 8024bec:	1af2      	subs	r2, r6, r3
 8024bee:	d0b6      	beq.n	8024b5e <_malloc_r+0x22>
 8024bf0:	1b9b      	subs	r3, r3, r6
 8024bf2:	50a3      	str	r3, [r4, r2]
 8024bf4:	e7b3      	b.n	8024b5e <_malloc_r+0x22>
 8024bf6:	6862      	ldr	r2, [r4, #4]
 8024bf8:	42a3      	cmp	r3, r4
 8024bfa:	bf0c      	ite	eq
 8024bfc:	6032      	streq	r2, [r6, #0]
 8024bfe:	605a      	strne	r2, [r3, #4]
 8024c00:	e7ec      	b.n	8024bdc <_malloc_r+0xa0>
 8024c02:	4623      	mov	r3, r4
 8024c04:	6864      	ldr	r4, [r4, #4]
 8024c06:	e7b2      	b.n	8024b6e <_malloc_r+0x32>
 8024c08:	4634      	mov	r4, r6
 8024c0a:	6876      	ldr	r6, [r6, #4]
 8024c0c:	e7b9      	b.n	8024b82 <_malloc_r+0x46>
 8024c0e:	230c      	movs	r3, #12
 8024c10:	603b      	str	r3, [r7, #0]
 8024c12:	4638      	mov	r0, r7
 8024c14:	f003 fb56 	bl	80282c4 <__malloc_unlock>
 8024c18:	e7a1      	b.n	8024b5e <_malloc_r+0x22>
 8024c1a:	6025      	str	r5, [r4, #0]
 8024c1c:	e7de      	b.n	8024bdc <_malloc_r+0xa0>
 8024c1e:	bf00      	nop
 8024c20:	20013928 	.word	0x20013928

08024c24 <__sfputc_r>:
 8024c24:	6893      	ldr	r3, [r2, #8]
 8024c26:	3b01      	subs	r3, #1
 8024c28:	2b00      	cmp	r3, #0
 8024c2a:	b410      	push	{r4}
 8024c2c:	6093      	str	r3, [r2, #8]
 8024c2e:	da08      	bge.n	8024c42 <__sfputc_r+0x1e>
 8024c30:	6994      	ldr	r4, [r2, #24]
 8024c32:	42a3      	cmp	r3, r4
 8024c34:	db01      	blt.n	8024c3a <__sfputc_r+0x16>
 8024c36:	290a      	cmp	r1, #10
 8024c38:	d103      	bne.n	8024c42 <__sfputc_r+0x1e>
 8024c3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8024c3e:	f001 be03 	b.w	8026848 <__swbuf_r>
 8024c42:	6813      	ldr	r3, [r2, #0]
 8024c44:	1c58      	adds	r0, r3, #1
 8024c46:	6010      	str	r0, [r2, #0]
 8024c48:	7019      	strb	r1, [r3, #0]
 8024c4a:	4608      	mov	r0, r1
 8024c4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8024c50:	4770      	bx	lr

08024c52 <__sfputs_r>:
 8024c52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024c54:	4606      	mov	r6, r0
 8024c56:	460f      	mov	r7, r1
 8024c58:	4614      	mov	r4, r2
 8024c5a:	18d5      	adds	r5, r2, r3
 8024c5c:	42ac      	cmp	r4, r5
 8024c5e:	d101      	bne.n	8024c64 <__sfputs_r+0x12>
 8024c60:	2000      	movs	r0, #0
 8024c62:	e007      	b.n	8024c74 <__sfputs_r+0x22>
 8024c64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024c68:	463a      	mov	r2, r7
 8024c6a:	4630      	mov	r0, r6
 8024c6c:	f7ff ffda 	bl	8024c24 <__sfputc_r>
 8024c70:	1c43      	adds	r3, r0, #1
 8024c72:	d1f3      	bne.n	8024c5c <__sfputs_r+0xa>
 8024c74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08024c78 <_vfiprintf_r>:
 8024c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024c7c:	460d      	mov	r5, r1
 8024c7e:	b09d      	sub	sp, #116	; 0x74
 8024c80:	4614      	mov	r4, r2
 8024c82:	4698      	mov	r8, r3
 8024c84:	4606      	mov	r6, r0
 8024c86:	b118      	cbz	r0, 8024c90 <_vfiprintf_r+0x18>
 8024c88:	6983      	ldr	r3, [r0, #24]
 8024c8a:	b90b      	cbnz	r3, 8024c90 <_vfiprintf_r+0x18>
 8024c8c:	f002 fe76 	bl	802797c <__sinit>
 8024c90:	4b89      	ldr	r3, [pc, #548]	; (8024eb8 <_vfiprintf_r+0x240>)
 8024c92:	429d      	cmp	r5, r3
 8024c94:	d11b      	bne.n	8024cce <_vfiprintf_r+0x56>
 8024c96:	6875      	ldr	r5, [r6, #4]
 8024c98:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8024c9a:	07d9      	lsls	r1, r3, #31
 8024c9c:	d405      	bmi.n	8024caa <_vfiprintf_r+0x32>
 8024c9e:	89ab      	ldrh	r3, [r5, #12]
 8024ca0:	059a      	lsls	r2, r3, #22
 8024ca2:	d402      	bmi.n	8024caa <_vfiprintf_r+0x32>
 8024ca4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8024ca6:	f003 fa7a 	bl	802819e <__retarget_lock_acquire_recursive>
 8024caa:	89ab      	ldrh	r3, [r5, #12]
 8024cac:	071b      	lsls	r3, r3, #28
 8024cae:	d501      	bpl.n	8024cb4 <_vfiprintf_r+0x3c>
 8024cb0:	692b      	ldr	r3, [r5, #16]
 8024cb2:	b9eb      	cbnz	r3, 8024cf0 <_vfiprintf_r+0x78>
 8024cb4:	4629      	mov	r1, r5
 8024cb6:	4630      	mov	r0, r6
 8024cb8:	f001 fe2a 	bl	8026910 <__swsetup_r>
 8024cbc:	b1c0      	cbz	r0, 8024cf0 <_vfiprintf_r+0x78>
 8024cbe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8024cc0:	07dc      	lsls	r4, r3, #31
 8024cc2:	d50e      	bpl.n	8024ce2 <_vfiprintf_r+0x6a>
 8024cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8024cc8:	b01d      	add	sp, #116	; 0x74
 8024cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024cce:	4b7b      	ldr	r3, [pc, #492]	; (8024ebc <_vfiprintf_r+0x244>)
 8024cd0:	429d      	cmp	r5, r3
 8024cd2:	d101      	bne.n	8024cd8 <_vfiprintf_r+0x60>
 8024cd4:	68b5      	ldr	r5, [r6, #8]
 8024cd6:	e7df      	b.n	8024c98 <_vfiprintf_r+0x20>
 8024cd8:	4b79      	ldr	r3, [pc, #484]	; (8024ec0 <_vfiprintf_r+0x248>)
 8024cda:	429d      	cmp	r5, r3
 8024cdc:	bf08      	it	eq
 8024cde:	68f5      	ldreq	r5, [r6, #12]
 8024ce0:	e7da      	b.n	8024c98 <_vfiprintf_r+0x20>
 8024ce2:	89ab      	ldrh	r3, [r5, #12]
 8024ce4:	0598      	lsls	r0, r3, #22
 8024ce6:	d4ed      	bmi.n	8024cc4 <_vfiprintf_r+0x4c>
 8024ce8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8024cea:	f003 fa59 	bl	80281a0 <__retarget_lock_release_recursive>
 8024cee:	e7e9      	b.n	8024cc4 <_vfiprintf_r+0x4c>
 8024cf0:	2300      	movs	r3, #0
 8024cf2:	9309      	str	r3, [sp, #36]	; 0x24
 8024cf4:	2320      	movs	r3, #32
 8024cf6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8024cfa:	f8cd 800c 	str.w	r8, [sp, #12]
 8024cfe:	2330      	movs	r3, #48	; 0x30
 8024d00:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8024ec4 <_vfiprintf_r+0x24c>
 8024d04:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8024d08:	f04f 0901 	mov.w	r9, #1
 8024d0c:	4623      	mov	r3, r4
 8024d0e:	469a      	mov	sl, r3
 8024d10:	f813 2b01 	ldrb.w	r2, [r3], #1
 8024d14:	b10a      	cbz	r2, 8024d1a <_vfiprintf_r+0xa2>
 8024d16:	2a25      	cmp	r2, #37	; 0x25
 8024d18:	d1f9      	bne.n	8024d0e <_vfiprintf_r+0x96>
 8024d1a:	ebba 0b04 	subs.w	fp, sl, r4
 8024d1e:	d00b      	beq.n	8024d38 <_vfiprintf_r+0xc0>
 8024d20:	465b      	mov	r3, fp
 8024d22:	4622      	mov	r2, r4
 8024d24:	4629      	mov	r1, r5
 8024d26:	4630      	mov	r0, r6
 8024d28:	f7ff ff93 	bl	8024c52 <__sfputs_r>
 8024d2c:	3001      	adds	r0, #1
 8024d2e:	f000 80aa 	beq.w	8024e86 <_vfiprintf_r+0x20e>
 8024d32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8024d34:	445a      	add	r2, fp
 8024d36:	9209      	str	r2, [sp, #36]	; 0x24
 8024d38:	f89a 3000 	ldrb.w	r3, [sl]
 8024d3c:	2b00      	cmp	r3, #0
 8024d3e:	f000 80a2 	beq.w	8024e86 <_vfiprintf_r+0x20e>
 8024d42:	2300      	movs	r3, #0
 8024d44:	f04f 32ff 	mov.w	r2, #4294967295
 8024d48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8024d4c:	f10a 0a01 	add.w	sl, sl, #1
 8024d50:	9304      	str	r3, [sp, #16]
 8024d52:	9307      	str	r3, [sp, #28]
 8024d54:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8024d58:	931a      	str	r3, [sp, #104]	; 0x68
 8024d5a:	4654      	mov	r4, sl
 8024d5c:	2205      	movs	r2, #5
 8024d5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024d62:	4858      	ldr	r0, [pc, #352]	; (8024ec4 <_vfiprintf_r+0x24c>)
 8024d64:	f7db fa4c 	bl	8000200 <memchr>
 8024d68:	9a04      	ldr	r2, [sp, #16]
 8024d6a:	b9d8      	cbnz	r0, 8024da4 <_vfiprintf_r+0x12c>
 8024d6c:	06d1      	lsls	r1, r2, #27
 8024d6e:	bf44      	itt	mi
 8024d70:	2320      	movmi	r3, #32
 8024d72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8024d76:	0713      	lsls	r3, r2, #28
 8024d78:	bf44      	itt	mi
 8024d7a:	232b      	movmi	r3, #43	; 0x2b
 8024d7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8024d80:	f89a 3000 	ldrb.w	r3, [sl]
 8024d84:	2b2a      	cmp	r3, #42	; 0x2a
 8024d86:	d015      	beq.n	8024db4 <_vfiprintf_r+0x13c>
 8024d88:	9a07      	ldr	r2, [sp, #28]
 8024d8a:	4654      	mov	r4, sl
 8024d8c:	2000      	movs	r0, #0
 8024d8e:	f04f 0c0a 	mov.w	ip, #10
 8024d92:	4621      	mov	r1, r4
 8024d94:	f811 3b01 	ldrb.w	r3, [r1], #1
 8024d98:	3b30      	subs	r3, #48	; 0x30
 8024d9a:	2b09      	cmp	r3, #9
 8024d9c:	d94e      	bls.n	8024e3c <_vfiprintf_r+0x1c4>
 8024d9e:	b1b0      	cbz	r0, 8024dce <_vfiprintf_r+0x156>
 8024da0:	9207      	str	r2, [sp, #28]
 8024da2:	e014      	b.n	8024dce <_vfiprintf_r+0x156>
 8024da4:	eba0 0308 	sub.w	r3, r0, r8
 8024da8:	fa09 f303 	lsl.w	r3, r9, r3
 8024dac:	4313      	orrs	r3, r2
 8024dae:	9304      	str	r3, [sp, #16]
 8024db0:	46a2      	mov	sl, r4
 8024db2:	e7d2      	b.n	8024d5a <_vfiprintf_r+0xe2>
 8024db4:	9b03      	ldr	r3, [sp, #12]
 8024db6:	1d19      	adds	r1, r3, #4
 8024db8:	681b      	ldr	r3, [r3, #0]
 8024dba:	9103      	str	r1, [sp, #12]
 8024dbc:	2b00      	cmp	r3, #0
 8024dbe:	bfbb      	ittet	lt
 8024dc0:	425b      	neglt	r3, r3
 8024dc2:	f042 0202 	orrlt.w	r2, r2, #2
 8024dc6:	9307      	strge	r3, [sp, #28]
 8024dc8:	9307      	strlt	r3, [sp, #28]
 8024dca:	bfb8      	it	lt
 8024dcc:	9204      	strlt	r2, [sp, #16]
 8024dce:	7823      	ldrb	r3, [r4, #0]
 8024dd0:	2b2e      	cmp	r3, #46	; 0x2e
 8024dd2:	d10c      	bne.n	8024dee <_vfiprintf_r+0x176>
 8024dd4:	7863      	ldrb	r3, [r4, #1]
 8024dd6:	2b2a      	cmp	r3, #42	; 0x2a
 8024dd8:	d135      	bne.n	8024e46 <_vfiprintf_r+0x1ce>
 8024dda:	9b03      	ldr	r3, [sp, #12]
 8024ddc:	1d1a      	adds	r2, r3, #4
 8024dde:	681b      	ldr	r3, [r3, #0]
 8024de0:	9203      	str	r2, [sp, #12]
 8024de2:	2b00      	cmp	r3, #0
 8024de4:	bfb8      	it	lt
 8024de6:	f04f 33ff 	movlt.w	r3, #4294967295
 8024dea:	3402      	adds	r4, #2
 8024dec:	9305      	str	r3, [sp, #20]
 8024dee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8024ed4 <_vfiprintf_r+0x25c>
 8024df2:	7821      	ldrb	r1, [r4, #0]
 8024df4:	2203      	movs	r2, #3
 8024df6:	4650      	mov	r0, sl
 8024df8:	f7db fa02 	bl	8000200 <memchr>
 8024dfc:	b140      	cbz	r0, 8024e10 <_vfiprintf_r+0x198>
 8024dfe:	2340      	movs	r3, #64	; 0x40
 8024e00:	eba0 000a 	sub.w	r0, r0, sl
 8024e04:	fa03 f000 	lsl.w	r0, r3, r0
 8024e08:	9b04      	ldr	r3, [sp, #16]
 8024e0a:	4303      	orrs	r3, r0
 8024e0c:	3401      	adds	r4, #1
 8024e0e:	9304      	str	r3, [sp, #16]
 8024e10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024e14:	482c      	ldr	r0, [pc, #176]	; (8024ec8 <_vfiprintf_r+0x250>)
 8024e16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8024e1a:	2206      	movs	r2, #6
 8024e1c:	f7db f9f0 	bl	8000200 <memchr>
 8024e20:	2800      	cmp	r0, #0
 8024e22:	d03f      	beq.n	8024ea4 <_vfiprintf_r+0x22c>
 8024e24:	4b29      	ldr	r3, [pc, #164]	; (8024ecc <_vfiprintf_r+0x254>)
 8024e26:	bb1b      	cbnz	r3, 8024e70 <_vfiprintf_r+0x1f8>
 8024e28:	9b03      	ldr	r3, [sp, #12]
 8024e2a:	3307      	adds	r3, #7
 8024e2c:	f023 0307 	bic.w	r3, r3, #7
 8024e30:	3308      	adds	r3, #8
 8024e32:	9303      	str	r3, [sp, #12]
 8024e34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024e36:	443b      	add	r3, r7
 8024e38:	9309      	str	r3, [sp, #36]	; 0x24
 8024e3a:	e767      	b.n	8024d0c <_vfiprintf_r+0x94>
 8024e3c:	fb0c 3202 	mla	r2, ip, r2, r3
 8024e40:	460c      	mov	r4, r1
 8024e42:	2001      	movs	r0, #1
 8024e44:	e7a5      	b.n	8024d92 <_vfiprintf_r+0x11a>
 8024e46:	2300      	movs	r3, #0
 8024e48:	3401      	adds	r4, #1
 8024e4a:	9305      	str	r3, [sp, #20]
 8024e4c:	4619      	mov	r1, r3
 8024e4e:	f04f 0c0a 	mov.w	ip, #10
 8024e52:	4620      	mov	r0, r4
 8024e54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8024e58:	3a30      	subs	r2, #48	; 0x30
 8024e5a:	2a09      	cmp	r2, #9
 8024e5c:	d903      	bls.n	8024e66 <_vfiprintf_r+0x1ee>
 8024e5e:	2b00      	cmp	r3, #0
 8024e60:	d0c5      	beq.n	8024dee <_vfiprintf_r+0x176>
 8024e62:	9105      	str	r1, [sp, #20]
 8024e64:	e7c3      	b.n	8024dee <_vfiprintf_r+0x176>
 8024e66:	fb0c 2101 	mla	r1, ip, r1, r2
 8024e6a:	4604      	mov	r4, r0
 8024e6c:	2301      	movs	r3, #1
 8024e6e:	e7f0      	b.n	8024e52 <_vfiprintf_r+0x1da>
 8024e70:	ab03      	add	r3, sp, #12
 8024e72:	9300      	str	r3, [sp, #0]
 8024e74:	462a      	mov	r2, r5
 8024e76:	4b16      	ldr	r3, [pc, #88]	; (8024ed0 <_vfiprintf_r+0x258>)
 8024e78:	a904      	add	r1, sp, #16
 8024e7a:	4630      	mov	r0, r6
 8024e7c:	f000 f8cc 	bl	8025018 <_printf_float>
 8024e80:	4607      	mov	r7, r0
 8024e82:	1c78      	adds	r0, r7, #1
 8024e84:	d1d6      	bne.n	8024e34 <_vfiprintf_r+0x1bc>
 8024e86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8024e88:	07d9      	lsls	r1, r3, #31
 8024e8a:	d405      	bmi.n	8024e98 <_vfiprintf_r+0x220>
 8024e8c:	89ab      	ldrh	r3, [r5, #12]
 8024e8e:	059a      	lsls	r2, r3, #22
 8024e90:	d402      	bmi.n	8024e98 <_vfiprintf_r+0x220>
 8024e92:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8024e94:	f003 f984 	bl	80281a0 <__retarget_lock_release_recursive>
 8024e98:	89ab      	ldrh	r3, [r5, #12]
 8024e9a:	065b      	lsls	r3, r3, #25
 8024e9c:	f53f af12 	bmi.w	8024cc4 <_vfiprintf_r+0x4c>
 8024ea0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8024ea2:	e711      	b.n	8024cc8 <_vfiprintf_r+0x50>
 8024ea4:	ab03      	add	r3, sp, #12
 8024ea6:	9300      	str	r3, [sp, #0]
 8024ea8:	462a      	mov	r2, r5
 8024eaa:	4b09      	ldr	r3, [pc, #36]	; (8024ed0 <_vfiprintf_r+0x258>)
 8024eac:	a904      	add	r1, sp, #16
 8024eae:	4630      	mov	r0, r6
 8024eb0:	f000 fb56 	bl	8025560 <_printf_i>
 8024eb4:	e7e4      	b.n	8024e80 <_vfiprintf_r+0x208>
 8024eb6:	bf00      	nop
 8024eb8:	0802e768 	.word	0x0802e768
 8024ebc:	0802e788 	.word	0x0802e788
 8024ec0:	0802e748 	.word	0x0802e748
 8024ec4:	0802e584 	.word	0x0802e584
 8024ec8:	0802e58e 	.word	0x0802e58e
 8024ecc:	08025019 	.word	0x08025019
 8024ed0:	08024c53 	.word	0x08024c53
 8024ed4:	0802e58a 	.word	0x0802e58a

08024ed8 <__cvt>:
 8024ed8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8024edc:	ec55 4b10 	vmov	r4, r5, d0
 8024ee0:	2d00      	cmp	r5, #0
 8024ee2:	460e      	mov	r6, r1
 8024ee4:	4619      	mov	r1, r3
 8024ee6:	462b      	mov	r3, r5
 8024ee8:	bfbb      	ittet	lt
 8024eea:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8024eee:	461d      	movlt	r5, r3
 8024ef0:	2300      	movge	r3, #0
 8024ef2:	232d      	movlt	r3, #45	; 0x2d
 8024ef4:	700b      	strb	r3, [r1, #0]
 8024ef6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024ef8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8024efc:	4691      	mov	r9, r2
 8024efe:	f023 0820 	bic.w	r8, r3, #32
 8024f02:	bfbc      	itt	lt
 8024f04:	4622      	movlt	r2, r4
 8024f06:	4614      	movlt	r4, r2
 8024f08:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8024f0c:	d005      	beq.n	8024f1a <__cvt+0x42>
 8024f0e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8024f12:	d100      	bne.n	8024f16 <__cvt+0x3e>
 8024f14:	3601      	adds	r6, #1
 8024f16:	2102      	movs	r1, #2
 8024f18:	e000      	b.n	8024f1c <__cvt+0x44>
 8024f1a:	2103      	movs	r1, #3
 8024f1c:	ab03      	add	r3, sp, #12
 8024f1e:	9301      	str	r3, [sp, #4]
 8024f20:	ab02      	add	r3, sp, #8
 8024f22:	9300      	str	r3, [sp, #0]
 8024f24:	ec45 4b10 	vmov	d0, r4, r5
 8024f28:	4653      	mov	r3, sl
 8024f2a:	4632      	mov	r2, r6
 8024f2c:	f001 fe18 	bl	8026b60 <_dtoa_r>
 8024f30:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8024f34:	4607      	mov	r7, r0
 8024f36:	d102      	bne.n	8024f3e <__cvt+0x66>
 8024f38:	f019 0f01 	tst.w	r9, #1
 8024f3c:	d022      	beq.n	8024f84 <__cvt+0xac>
 8024f3e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8024f42:	eb07 0906 	add.w	r9, r7, r6
 8024f46:	d110      	bne.n	8024f6a <__cvt+0x92>
 8024f48:	783b      	ldrb	r3, [r7, #0]
 8024f4a:	2b30      	cmp	r3, #48	; 0x30
 8024f4c:	d10a      	bne.n	8024f64 <__cvt+0x8c>
 8024f4e:	2200      	movs	r2, #0
 8024f50:	2300      	movs	r3, #0
 8024f52:	4620      	mov	r0, r4
 8024f54:	4629      	mov	r1, r5
 8024f56:	f7db fdc7 	bl	8000ae8 <__aeabi_dcmpeq>
 8024f5a:	b918      	cbnz	r0, 8024f64 <__cvt+0x8c>
 8024f5c:	f1c6 0601 	rsb	r6, r6, #1
 8024f60:	f8ca 6000 	str.w	r6, [sl]
 8024f64:	f8da 3000 	ldr.w	r3, [sl]
 8024f68:	4499      	add	r9, r3
 8024f6a:	2200      	movs	r2, #0
 8024f6c:	2300      	movs	r3, #0
 8024f6e:	4620      	mov	r0, r4
 8024f70:	4629      	mov	r1, r5
 8024f72:	f7db fdb9 	bl	8000ae8 <__aeabi_dcmpeq>
 8024f76:	b108      	cbz	r0, 8024f7c <__cvt+0xa4>
 8024f78:	f8cd 900c 	str.w	r9, [sp, #12]
 8024f7c:	2230      	movs	r2, #48	; 0x30
 8024f7e:	9b03      	ldr	r3, [sp, #12]
 8024f80:	454b      	cmp	r3, r9
 8024f82:	d307      	bcc.n	8024f94 <__cvt+0xbc>
 8024f84:	9b03      	ldr	r3, [sp, #12]
 8024f86:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8024f88:	1bdb      	subs	r3, r3, r7
 8024f8a:	4638      	mov	r0, r7
 8024f8c:	6013      	str	r3, [r2, #0]
 8024f8e:	b004      	add	sp, #16
 8024f90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024f94:	1c59      	adds	r1, r3, #1
 8024f96:	9103      	str	r1, [sp, #12]
 8024f98:	701a      	strb	r2, [r3, #0]
 8024f9a:	e7f0      	b.n	8024f7e <__cvt+0xa6>

08024f9c <__exponent>:
 8024f9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8024f9e:	4603      	mov	r3, r0
 8024fa0:	2900      	cmp	r1, #0
 8024fa2:	bfb8      	it	lt
 8024fa4:	4249      	neglt	r1, r1
 8024fa6:	f803 2b02 	strb.w	r2, [r3], #2
 8024faa:	bfb4      	ite	lt
 8024fac:	222d      	movlt	r2, #45	; 0x2d
 8024fae:	222b      	movge	r2, #43	; 0x2b
 8024fb0:	2909      	cmp	r1, #9
 8024fb2:	7042      	strb	r2, [r0, #1]
 8024fb4:	dd2a      	ble.n	802500c <__exponent+0x70>
 8024fb6:	f10d 0407 	add.w	r4, sp, #7
 8024fba:	46a4      	mov	ip, r4
 8024fbc:	270a      	movs	r7, #10
 8024fbe:	46a6      	mov	lr, r4
 8024fc0:	460a      	mov	r2, r1
 8024fc2:	fb91 f6f7 	sdiv	r6, r1, r7
 8024fc6:	fb07 1516 	mls	r5, r7, r6, r1
 8024fca:	3530      	adds	r5, #48	; 0x30
 8024fcc:	2a63      	cmp	r2, #99	; 0x63
 8024fce:	f104 34ff 	add.w	r4, r4, #4294967295
 8024fd2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8024fd6:	4631      	mov	r1, r6
 8024fd8:	dcf1      	bgt.n	8024fbe <__exponent+0x22>
 8024fda:	3130      	adds	r1, #48	; 0x30
 8024fdc:	f1ae 0502 	sub.w	r5, lr, #2
 8024fe0:	f804 1c01 	strb.w	r1, [r4, #-1]
 8024fe4:	1c44      	adds	r4, r0, #1
 8024fe6:	4629      	mov	r1, r5
 8024fe8:	4561      	cmp	r1, ip
 8024fea:	d30a      	bcc.n	8025002 <__exponent+0x66>
 8024fec:	f10d 0209 	add.w	r2, sp, #9
 8024ff0:	eba2 020e 	sub.w	r2, r2, lr
 8024ff4:	4565      	cmp	r5, ip
 8024ff6:	bf88      	it	hi
 8024ff8:	2200      	movhi	r2, #0
 8024ffa:	4413      	add	r3, r2
 8024ffc:	1a18      	subs	r0, r3, r0
 8024ffe:	b003      	add	sp, #12
 8025000:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025002:	f811 2b01 	ldrb.w	r2, [r1], #1
 8025006:	f804 2f01 	strb.w	r2, [r4, #1]!
 802500a:	e7ed      	b.n	8024fe8 <__exponent+0x4c>
 802500c:	2330      	movs	r3, #48	; 0x30
 802500e:	3130      	adds	r1, #48	; 0x30
 8025010:	7083      	strb	r3, [r0, #2]
 8025012:	70c1      	strb	r1, [r0, #3]
 8025014:	1d03      	adds	r3, r0, #4
 8025016:	e7f1      	b.n	8024ffc <__exponent+0x60>

08025018 <_printf_float>:
 8025018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802501c:	ed2d 8b02 	vpush	{d8}
 8025020:	b08d      	sub	sp, #52	; 0x34
 8025022:	460c      	mov	r4, r1
 8025024:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8025028:	4616      	mov	r6, r2
 802502a:	461f      	mov	r7, r3
 802502c:	4605      	mov	r5, r0
 802502e:	f003 f8b1 	bl	8028194 <_localeconv_r>
 8025032:	f8d0 a000 	ldr.w	sl, [r0]
 8025036:	4650      	mov	r0, sl
 8025038:	f7db f8d4 	bl	80001e4 <strlen>
 802503c:	2300      	movs	r3, #0
 802503e:	930a      	str	r3, [sp, #40]	; 0x28
 8025040:	6823      	ldr	r3, [r4, #0]
 8025042:	9305      	str	r3, [sp, #20]
 8025044:	f8d8 3000 	ldr.w	r3, [r8]
 8025048:	f894 b018 	ldrb.w	fp, [r4, #24]
 802504c:	3307      	adds	r3, #7
 802504e:	f023 0307 	bic.w	r3, r3, #7
 8025052:	f103 0208 	add.w	r2, r3, #8
 8025056:	f8c8 2000 	str.w	r2, [r8]
 802505a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802505e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8025062:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8025066:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 802506a:	9307      	str	r3, [sp, #28]
 802506c:	f8cd 8018 	str.w	r8, [sp, #24]
 8025070:	ee08 0a10 	vmov	s16, r0
 8025074:	4b9f      	ldr	r3, [pc, #636]	; (80252f4 <_printf_float+0x2dc>)
 8025076:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 802507a:	f04f 32ff 	mov.w	r2, #4294967295
 802507e:	f7db fd65 	bl	8000b4c <__aeabi_dcmpun>
 8025082:	bb88      	cbnz	r0, 80250e8 <_printf_float+0xd0>
 8025084:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8025088:	4b9a      	ldr	r3, [pc, #616]	; (80252f4 <_printf_float+0x2dc>)
 802508a:	f04f 32ff 	mov.w	r2, #4294967295
 802508e:	f7db fd3f 	bl	8000b10 <__aeabi_dcmple>
 8025092:	bb48      	cbnz	r0, 80250e8 <_printf_float+0xd0>
 8025094:	2200      	movs	r2, #0
 8025096:	2300      	movs	r3, #0
 8025098:	4640      	mov	r0, r8
 802509a:	4649      	mov	r1, r9
 802509c:	f7db fd2e 	bl	8000afc <__aeabi_dcmplt>
 80250a0:	b110      	cbz	r0, 80250a8 <_printf_float+0x90>
 80250a2:	232d      	movs	r3, #45	; 0x2d
 80250a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80250a8:	4b93      	ldr	r3, [pc, #588]	; (80252f8 <_printf_float+0x2e0>)
 80250aa:	4894      	ldr	r0, [pc, #592]	; (80252fc <_printf_float+0x2e4>)
 80250ac:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80250b0:	bf94      	ite	ls
 80250b2:	4698      	movls	r8, r3
 80250b4:	4680      	movhi	r8, r0
 80250b6:	2303      	movs	r3, #3
 80250b8:	6123      	str	r3, [r4, #16]
 80250ba:	9b05      	ldr	r3, [sp, #20]
 80250bc:	f023 0204 	bic.w	r2, r3, #4
 80250c0:	6022      	str	r2, [r4, #0]
 80250c2:	f04f 0900 	mov.w	r9, #0
 80250c6:	9700      	str	r7, [sp, #0]
 80250c8:	4633      	mov	r3, r6
 80250ca:	aa0b      	add	r2, sp, #44	; 0x2c
 80250cc:	4621      	mov	r1, r4
 80250ce:	4628      	mov	r0, r5
 80250d0:	f000 f9d8 	bl	8025484 <_printf_common>
 80250d4:	3001      	adds	r0, #1
 80250d6:	f040 8090 	bne.w	80251fa <_printf_float+0x1e2>
 80250da:	f04f 30ff 	mov.w	r0, #4294967295
 80250de:	b00d      	add	sp, #52	; 0x34
 80250e0:	ecbd 8b02 	vpop	{d8}
 80250e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80250e8:	4642      	mov	r2, r8
 80250ea:	464b      	mov	r3, r9
 80250ec:	4640      	mov	r0, r8
 80250ee:	4649      	mov	r1, r9
 80250f0:	f7db fd2c 	bl	8000b4c <__aeabi_dcmpun>
 80250f4:	b140      	cbz	r0, 8025108 <_printf_float+0xf0>
 80250f6:	464b      	mov	r3, r9
 80250f8:	2b00      	cmp	r3, #0
 80250fa:	bfbc      	itt	lt
 80250fc:	232d      	movlt	r3, #45	; 0x2d
 80250fe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8025102:	487f      	ldr	r0, [pc, #508]	; (8025300 <_printf_float+0x2e8>)
 8025104:	4b7f      	ldr	r3, [pc, #508]	; (8025304 <_printf_float+0x2ec>)
 8025106:	e7d1      	b.n	80250ac <_printf_float+0x94>
 8025108:	6863      	ldr	r3, [r4, #4]
 802510a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 802510e:	9206      	str	r2, [sp, #24]
 8025110:	1c5a      	adds	r2, r3, #1
 8025112:	d13f      	bne.n	8025194 <_printf_float+0x17c>
 8025114:	2306      	movs	r3, #6
 8025116:	6063      	str	r3, [r4, #4]
 8025118:	9b05      	ldr	r3, [sp, #20]
 802511a:	6861      	ldr	r1, [r4, #4]
 802511c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8025120:	2300      	movs	r3, #0
 8025122:	9303      	str	r3, [sp, #12]
 8025124:	ab0a      	add	r3, sp, #40	; 0x28
 8025126:	e9cd b301 	strd	fp, r3, [sp, #4]
 802512a:	ab09      	add	r3, sp, #36	; 0x24
 802512c:	ec49 8b10 	vmov	d0, r8, r9
 8025130:	9300      	str	r3, [sp, #0]
 8025132:	6022      	str	r2, [r4, #0]
 8025134:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8025138:	4628      	mov	r0, r5
 802513a:	f7ff fecd 	bl	8024ed8 <__cvt>
 802513e:	9b06      	ldr	r3, [sp, #24]
 8025140:	9909      	ldr	r1, [sp, #36]	; 0x24
 8025142:	2b47      	cmp	r3, #71	; 0x47
 8025144:	4680      	mov	r8, r0
 8025146:	d108      	bne.n	802515a <_printf_float+0x142>
 8025148:	1cc8      	adds	r0, r1, #3
 802514a:	db02      	blt.n	8025152 <_printf_float+0x13a>
 802514c:	6863      	ldr	r3, [r4, #4]
 802514e:	4299      	cmp	r1, r3
 8025150:	dd41      	ble.n	80251d6 <_printf_float+0x1be>
 8025152:	f1ab 0b02 	sub.w	fp, fp, #2
 8025156:	fa5f fb8b 	uxtb.w	fp, fp
 802515a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 802515e:	d820      	bhi.n	80251a2 <_printf_float+0x18a>
 8025160:	3901      	subs	r1, #1
 8025162:	465a      	mov	r2, fp
 8025164:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8025168:	9109      	str	r1, [sp, #36]	; 0x24
 802516a:	f7ff ff17 	bl	8024f9c <__exponent>
 802516e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8025170:	1813      	adds	r3, r2, r0
 8025172:	2a01      	cmp	r2, #1
 8025174:	4681      	mov	r9, r0
 8025176:	6123      	str	r3, [r4, #16]
 8025178:	dc02      	bgt.n	8025180 <_printf_float+0x168>
 802517a:	6822      	ldr	r2, [r4, #0]
 802517c:	07d2      	lsls	r2, r2, #31
 802517e:	d501      	bpl.n	8025184 <_printf_float+0x16c>
 8025180:	3301      	adds	r3, #1
 8025182:	6123      	str	r3, [r4, #16]
 8025184:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8025188:	2b00      	cmp	r3, #0
 802518a:	d09c      	beq.n	80250c6 <_printf_float+0xae>
 802518c:	232d      	movs	r3, #45	; 0x2d
 802518e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8025192:	e798      	b.n	80250c6 <_printf_float+0xae>
 8025194:	9a06      	ldr	r2, [sp, #24]
 8025196:	2a47      	cmp	r2, #71	; 0x47
 8025198:	d1be      	bne.n	8025118 <_printf_float+0x100>
 802519a:	2b00      	cmp	r3, #0
 802519c:	d1bc      	bne.n	8025118 <_printf_float+0x100>
 802519e:	2301      	movs	r3, #1
 80251a0:	e7b9      	b.n	8025116 <_printf_float+0xfe>
 80251a2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80251a6:	d118      	bne.n	80251da <_printf_float+0x1c2>
 80251a8:	2900      	cmp	r1, #0
 80251aa:	6863      	ldr	r3, [r4, #4]
 80251ac:	dd0b      	ble.n	80251c6 <_printf_float+0x1ae>
 80251ae:	6121      	str	r1, [r4, #16]
 80251b0:	b913      	cbnz	r3, 80251b8 <_printf_float+0x1a0>
 80251b2:	6822      	ldr	r2, [r4, #0]
 80251b4:	07d0      	lsls	r0, r2, #31
 80251b6:	d502      	bpl.n	80251be <_printf_float+0x1a6>
 80251b8:	3301      	adds	r3, #1
 80251ba:	440b      	add	r3, r1
 80251bc:	6123      	str	r3, [r4, #16]
 80251be:	65a1      	str	r1, [r4, #88]	; 0x58
 80251c0:	f04f 0900 	mov.w	r9, #0
 80251c4:	e7de      	b.n	8025184 <_printf_float+0x16c>
 80251c6:	b913      	cbnz	r3, 80251ce <_printf_float+0x1b6>
 80251c8:	6822      	ldr	r2, [r4, #0]
 80251ca:	07d2      	lsls	r2, r2, #31
 80251cc:	d501      	bpl.n	80251d2 <_printf_float+0x1ba>
 80251ce:	3302      	adds	r3, #2
 80251d0:	e7f4      	b.n	80251bc <_printf_float+0x1a4>
 80251d2:	2301      	movs	r3, #1
 80251d4:	e7f2      	b.n	80251bc <_printf_float+0x1a4>
 80251d6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80251da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80251dc:	4299      	cmp	r1, r3
 80251de:	db05      	blt.n	80251ec <_printf_float+0x1d4>
 80251e0:	6823      	ldr	r3, [r4, #0]
 80251e2:	6121      	str	r1, [r4, #16]
 80251e4:	07d8      	lsls	r0, r3, #31
 80251e6:	d5ea      	bpl.n	80251be <_printf_float+0x1a6>
 80251e8:	1c4b      	adds	r3, r1, #1
 80251ea:	e7e7      	b.n	80251bc <_printf_float+0x1a4>
 80251ec:	2900      	cmp	r1, #0
 80251ee:	bfd4      	ite	le
 80251f0:	f1c1 0202 	rsble	r2, r1, #2
 80251f4:	2201      	movgt	r2, #1
 80251f6:	4413      	add	r3, r2
 80251f8:	e7e0      	b.n	80251bc <_printf_float+0x1a4>
 80251fa:	6823      	ldr	r3, [r4, #0]
 80251fc:	055a      	lsls	r2, r3, #21
 80251fe:	d407      	bmi.n	8025210 <_printf_float+0x1f8>
 8025200:	6923      	ldr	r3, [r4, #16]
 8025202:	4642      	mov	r2, r8
 8025204:	4631      	mov	r1, r6
 8025206:	4628      	mov	r0, r5
 8025208:	47b8      	blx	r7
 802520a:	3001      	adds	r0, #1
 802520c:	d12c      	bne.n	8025268 <_printf_float+0x250>
 802520e:	e764      	b.n	80250da <_printf_float+0xc2>
 8025210:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8025214:	f240 80e0 	bls.w	80253d8 <_printf_float+0x3c0>
 8025218:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 802521c:	2200      	movs	r2, #0
 802521e:	2300      	movs	r3, #0
 8025220:	f7db fc62 	bl	8000ae8 <__aeabi_dcmpeq>
 8025224:	2800      	cmp	r0, #0
 8025226:	d034      	beq.n	8025292 <_printf_float+0x27a>
 8025228:	4a37      	ldr	r2, [pc, #220]	; (8025308 <_printf_float+0x2f0>)
 802522a:	2301      	movs	r3, #1
 802522c:	4631      	mov	r1, r6
 802522e:	4628      	mov	r0, r5
 8025230:	47b8      	blx	r7
 8025232:	3001      	adds	r0, #1
 8025234:	f43f af51 	beq.w	80250da <_printf_float+0xc2>
 8025238:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 802523c:	429a      	cmp	r2, r3
 802523e:	db02      	blt.n	8025246 <_printf_float+0x22e>
 8025240:	6823      	ldr	r3, [r4, #0]
 8025242:	07d8      	lsls	r0, r3, #31
 8025244:	d510      	bpl.n	8025268 <_printf_float+0x250>
 8025246:	ee18 3a10 	vmov	r3, s16
 802524a:	4652      	mov	r2, sl
 802524c:	4631      	mov	r1, r6
 802524e:	4628      	mov	r0, r5
 8025250:	47b8      	blx	r7
 8025252:	3001      	adds	r0, #1
 8025254:	f43f af41 	beq.w	80250da <_printf_float+0xc2>
 8025258:	f04f 0800 	mov.w	r8, #0
 802525c:	f104 091a 	add.w	r9, r4, #26
 8025260:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025262:	3b01      	subs	r3, #1
 8025264:	4543      	cmp	r3, r8
 8025266:	dc09      	bgt.n	802527c <_printf_float+0x264>
 8025268:	6823      	ldr	r3, [r4, #0]
 802526a:	079b      	lsls	r3, r3, #30
 802526c:	f100 8105 	bmi.w	802547a <_printf_float+0x462>
 8025270:	68e0      	ldr	r0, [r4, #12]
 8025272:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025274:	4298      	cmp	r0, r3
 8025276:	bfb8      	it	lt
 8025278:	4618      	movlt	r0, r3
 802527a:	e730      	b.n	80250de <_printf_float+0xc6>
 802527c:	2301      	movs	r3, #1
 802527e:	464a      	mov	r2, r9
 8025280:	4631      	mov	r1, r6
 8025282:	4628      	mov	r0, r5
 8025284:	47b8      	blx	r7
 8025286:	3001      	adds	r0, #1
 8025288:	f43f af27 	beq.w	80250da <_printf_float+0xc2>
 802528c:	f108 0801 	add.w	r8, r8, #1
 8025290:	e7e6      	b.n	8025260 <_printf_float+0x248>
 8025292:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025294:	2b00      	cmp	r3, #0
 8025296:	dc39      	bgt.n	802530c <_printf_float+0x2f4>
 8025298:	4a1b      	ldr	r2, [pc, #108]	; (8025308 <_printf_float+0x2f0>)
 802529a:	2301      	movs	r3, #1
 802529c:	4631      	mov	r1, r6
 802529e:	4628      	mov	r0, r5
 80252a0:	47b8      	blx	r7
 80252a2:	3001      	adds	r0, #1
 80252a4:	f43f af19 	beq.w	80250da <_printf_float+0xc2>
 80252a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80252ac:	4313      	orrs	r3, r2
 80252ae:	d102      	bne.n	80252b6 <_printf_float+0x29e>
 80252b0:	6823      	ldr	r3, [r4, #0]
 80252b2:	07d9      	lsls	r1, r3, #31
 80252b4:	d5d8      	bpl.n	8025268 <_printf_float+0x250>
 80252b6:	ee18 3a10 	vmov	r3, s16
 80252ba:	4652      	mov	r2, sl
 80252bc:	4631      	mov	r1, r6
 80252be:	4628      	mov	r0, r5
 80252c0:	47b8      	blx	r7
 80252c2:	3001      	adds	r0, #1
 80252c4:	f43f af09 	beq.w	80250da <_printf_float+0xc2>
 80252c8:	f04f 0900 	mov.w	r9, #0
 80252cc:	f104 0a1a 	add.w	sl, r4, #26
 80252d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80252d2:	425b      	negs	r3, r3
 80252d4:	454b      	cmp	r3, r9
 80252d6:	dc01      	bgt.n	80252dc <_printf_float+0x2c4>
 80252d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80252da:	e792      	b.n	8025202 <_printf_float+0x1ea>
 80252dc:	2301      	movs	r3, #1
 80252de:	4652      	mov	r2, sl
 80252e0:	4631      	mov	r1, r6
 80252e2:	4628      	mov	r0, r5
 80252e4:	47b8      	blx	r7
 80252e6:	3001      	adds	r0, #1
 80252e8:	f43f aef7 	beq.w	80250da <_printf_float+0xc2>
 80252ec:	f109 0901 	add.w	r9, r9, #1
 80252f0:	e7ee      	b.n	80252d0 <_printf_float+0x2b8>
 80252f2:	bf00      	nop
 80252f4:	7fefffff 	.word	0x7fefffff
 80252f8:	0802e595 	.word	0x0802e595
 80252fc:	0802e599 	.word	0x0802e599
 8025300:	0802e5a1 	.word	0x0802e5a1
 8025304:	0802e59d 	.word	0x0802e59d
 8025308:	0802e980 	.word	0x0802e980
 802530c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802530e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8025310:	429a      	cmp	r2, r3
 8025312:	bfa8      	it	ge
 8025314:	461a      	movge	r2, r3
 8025316:	2a00      	cmp	r2, #0
 8025318:	4691      	mov	r9, r2
 802531a:	dc37      	bgt.n	802538c <_printf_float+0x374>
 802531c:	f04f 0b00 	mov.w	fp, #0
 8025320:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8025324:	f104 021a 	add.w	r2, r4, #26
 8025328:	6da3      	ldr	r3, [r4, #88]	; 0x58
 802532a:	9305      	str	r3, [sp, #20]
 802532c:	eba3 0309 	sub.w	r3, r3, r9
 8025330:	455b      	cmp	r3, fp
 8025332:	dc33      	bgt.n	802539c <_printf_float+0x384>
 8025334:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8025338:	429a      	cmp	r2, r3
 802533a:	db3b      	blt.n	80253b4 <_printf_float+0x39c>
 802533c:	6823      	ldr	r3, [r4, #0]
 802533e:	07da      	lsls	r2, r3, #31
 8025340:	d438      	bmi.n	80253b4 <_printf_float+0x39c>
 8025342:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025344:	9a05      	ldr	r2, [sp, #20]
 8025346:	9909      	ldr	r1, [sp, #36]	; 0x24
 8025348:	1a9a      	subs	r2, r3, r2
 802534a:	eba3 0901 	sub.w	r9, r3, r1
 802534e:	4591      	cmp	r9, r2
 8025350:	bfa8      	it	ge
 8025352:	4691      	movge	r9, r2
 8025354:	f1b9 0f00 	cmp.w	r9, #0
 8025358:	dc35      	bgt.n	80253c6 <_printf_float+0x3ae>
 802535a:	f04f 0800 	mov.w	r8, #0
 802535e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8025362:	f104 0a1a 	add.w	sl, r4, #26
 8025366:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 802536a:	1a9b      	subs	r3, r3, r2
 802536c:	eba3 0309 	sub.w	r3, r3, r9
 8025370:	4543      	cmp	r3, r8
 8025372:	f77f af79 	ble.w	8025268 <_printf_float+0x250>
 8025376:	2301      	movs	r3, #1
 8025378:	4652      	mov	r2, sl
 802537a:	4631      	mov	r1, r6
 802537c:	4628      	mov	r0, r5
 802537e:	47b8      	blx	r7
 8025380:	3001      	adds	r0, #1
 8025382:	f43f aeaa 	beq.w	80250da <_printf_float+0xc2>
 8025386:	f108 0801 	add.w	r8, r8, #1
 802538a:	e7ec      	b.n	8025366 <_printf_float+0x34e>
 802538c:	4613      	mov	r3, r2
 802538e:	4631      	mov	r1, r6
 8025390:	4642      	mov	r2, r8
 8025392:	4628      	mov	r0, r5
 8025394:	47b8      	blx	r7
 8025396:	3001      	adds	r0, #1
 8025398:	d1c0      	bne.n	802531c <_printf_float+0x304>
 802539a:	e69e      	b.n	80250da <_printf_float+0xc2>
 802539c:	2301      	movs	r3, #1
 802539e:	4631      	mov	r1, r6
 80253a0:	4628      	mov	r0, r5
 80253a2:	9205      	str	r2, [sp, #20]
 80253a4:	47b8      	blx	r7
 80253a6:	3001      	adds	r0, #1
 80253a8:	f43f ae97 	beq.w	80250da <_printf_float+0xc2>
 80253ac:	9a05      	ldr	r2, [sp, #20]
 80253ae:	f10b 0b01 	add.w	fp, fp, #1
 80253b2:	e7b9      	b.n	8025328 <_printf_float+0x310>
 80253b4:	ee18 3a10 	vmov	r3, s16
 80253b8:	4652      	mov	r2, sl
 80253ba:	4631      	mov	r1, r6
 80253bc:	4628      	mov	r0, r5
 80253be:	47b8      	blx	r7
 80253c0:	3001      	adds	r0, #1
 80253c2:	d1be      	bne.n	8025342 <_printf_float+0x32a>
 80253c4:	e689      	b.n	80250da <_printf_float+0xc2>
 80253c6:	9a05      	ldr	r2, [sp, #20]
 80253c8:	464b      	mov	r3, r9
 80253ca:	4442      	add	r2, r8
 80253cc:	4631      	mov	r1, r6
 80253ce:	4628      	mov	r0, r5
 80253d0:	47b8      	blx	r7
 80253d2:	3001      	adds	r0, #1
 80253d4:	d1c1      	bne.n	802535a <_printf_float+0x342>
 80253d6:	e680      	b.n	80250da <_printf_float+0xc2>
 80253d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80253da:	2a01      	cmp	r2, #1
 80253dc:	dc01      	bgt.n	80253e2 <_printf_float+0x3ca>
 80253de:	07db      	lsls	r3, r3, #31
 80253e0:	d538      	bpl.n	8025454 <_printf_float+0x43c>
 80253e2:	2301      	movs	r3, #1
 80253e4:	4642      	mov	r2, r8
 80253e6:	4631      	mov	r1, r6
 80253e8:	4628      	mov	r0, r5
 80253ea:	47b8      	blx	r7
 80253ec:	3001      	adds	r0, #1
 80253ee:	f43f ae74 	beq.w	80250da <_printf_float+0xc2>
 80253f2:	ee18 3a10 	vmov	r3, s16
 80253f6:	4652      	mov	r2, sl
 80253f8:	4631      	mov	r1, r6
 80253fa:	4628      	mov	r0, r5
 80253fc:	47b8      	blx	r7
 80253fe:	3001      	adds	r0, #1
 8025400:	f43f ae6b 	beq.w	80250da <_printf_float+0xc2>
 8025404:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8025408:	2200      	movs	r2, #0
 802540a:	2300      	movs	r3, #0
 802540c:	f7db fb6c 	bl	8000ae8 <__aeabi_dcmpeq>
 8025410:	b9d8      	cbnz	r0, 802544a <_printf_float+0x432>
 8025412:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025414:	f108 0201 	add.w	r2, r8, #1
 8025418:	3b01      	subs	r3, #1
 802541a:	4631      	mov	r1, r6
 802541c:	4628      	mov	r0, r5
 802541e:	47b8      	blx	r7
 8025420:	3001      	adds	r0, #1
 8025422:	d10e      	bne.n	8025442 <_printf_float+0x42a>
 8025424:	e659      	b.n	80250da <_printf_float+0xc2>
 8025426:	2301      	movs	r3, #1
 8025428:	4652      	mov	r2, sl
 802542a:	4631      	mov	r1, r6
 802542c:	4628      	mov	r0, r5
 802542e:	47b8      	blx	r7
 8025430:	3001      	adds	r0, #1
 8025432:	f43f ae52 	beq.w	80250da <_printf_float+0xc2>
 8025436:	f108 0801 	add.w	r8, r8, #1
 802543a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802543c:	3b01      	subs	r3, #1
 802543e:	4543      	cmp	r3, r8
 8025440:	dcf1      	bgt.n	8025426 <_printf_float+0x40e>
 8025442:	464b      	mov	r3, r9
 8025444:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8025448:	e6dc      	b.n	8025204 <_printf_float+0x1ec>
 802544a:	f04f 0800 	mov.w	r8, #0
 802544e:	f104 0a1a 	add.w	sl, r4, #26
 8025452:	e7f2      	b.n	802543a <_printf_float+0x422>
 8025454:	2301      	movs	r3, #1
 8025456:	4642      	mov	r2, r8
 8025458:	e7df      	b.n	802541a <_printf_float+0x402>
 802545a:	2301      	movs	r3, #1
 802545c:	464a      	mov	r2, r9
 802545e:	4631      	mov	r1, r6
 8025460:	4628      	mov	r0, r5
 8025462:	47b8      	blx	r7
 8025464:	3001      	adds	r0, #1
 8025466:	f43f ae38 	beq.w	80250da <_printf_float+0xc2>
 802546a:	f108 0801 	add.w	r8, r8, #1
 802546e:	68e3      	ldr	r3, [r4, #12]
 8025470:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8025472:	1a5b      	subs	r3, r3, r1
 8025474:	4543      	cmp	r3, r8
 8025476:	dcf0      	bgt.n	802545a <_printf_float+0x442>
 8025478:	e6fa      	b.n	8025270 <_printf_float+0x258>
 802547a:	f04f 0800 	mov.w	r8, #0
 802547e:	f104 0919 	add.w	r9, r4, #25
 8025482:	e7f4      	b.n	802546e <_printf_float+0x456>

08025484 <_printf_common>:
 8025484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025488:	4616      	mov	r6, r2
 802548a:	4699      	mov	r9, r3
 802548c:	688a      	ldr	r2, [r1, #8]
 802548e:	690b      	ldr	r3, [r1, #16]
 8025490:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8025494:	4293      	cmp	r3, r2
 8025496:	bfb8      	it	lt
 8025498:	4613      	movlt	r3, r2
 802549a:	6033      	str	r3, [r6, #0]
 802549c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80254a0:	4607      	mov	r7, r0
 80254a2:	460c      	mov	r4, r1
 80254a4:	b10a      	cbz	r2, 80254aa <_printf_common+0x26>
 80254a6:	3301      	adds	r3, #1
 80254a8:	6033      	str	r3, [r6, #0]
 80254aa:	6823      	ldr	r3, [r4, #0]
 80254ac:	0699      	lsls	r1, r3, #26
 80254ae:	bf42      	ittt	mi
 80254b0:	6833      	ldrmi	r3, [r6, #0]
 80254b2:	3302      	addmi	r3, #2
 80254b4:	6033      	strmi	r3, [r6, #0]
 80254b6:	6825      	ldr	r5, [r4, #0]
 80254b8:	f015 0506 	ands.w	r5, r5, #6
 80254bc:	d106      	bne.n	80254cc <_printf_common+0x48>
 80254be:	f104 0a19 	add.w	sl, r4, #25
 80254c2:	68e3      	ldr	r3, [r4, #12]
 80254c4:	6832      	ldr	r2, [r6, #0]
 80254c6:	1a9b      	subs	r3, r3, r2
 80254c8:	42ab      	cmp	r3, r5
 80254ca:	dc26      	bgt.n	802551a <_printf_common+0x96>
 80254cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80254d0:	1e13      	subs	r3, r2, #0
 80254d2:	6822      	ldr	r2, [r4, #0]
 80254d4:	bf18      	it	ne
 80254d6:	2301      	movne	r3, #1
 80254d8:	0692      	lsls	r2, r2, #26
 80254da:	d42b      	bmi.n	8025534 <_printf_common+0xb0>
 80254dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80254e0:	4649      	mov	r1, r9
 80254e2:	4638      	mov	r0, r7
 80254e4:	47c0      	blx	r8
 80254e6:	3001      	adds	r0, #1
 80254e8:	d01e      	beq.n	8025528 <_printf_common+0xa4>
 80254ea:	6823      	ldr	r3, [r4, #0]
 80254ec:	68e5      	ldr	r5, [r4, #12]
 80254ee:	6832      	ldr	r2, [r6, #0]
 80254f0:	f003 0306 	and.w	r3, r3, #6
 80254f4:	2b04      	cmp	r3, #4
 80254f6:	bf08      	it	eq
 80254f8:	1aad      	subeq	r5, r5, r2
 80254fa:	68a3      	ldr	r3, [r4, #8]
 80254fc:	6922      	ldr	r2, [r4, #16]
 80254fe:	bf0c      	ite	eq
 8025500:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8025504:	2500      	movne	r5, #0
 8025506:	4293      	cmp	r3, r2
 8025508:	bfc4      	itt	gt
 802550a:	1a9b      	subgt	r3, r3, r2
 802550c:	18ed      	addgt	r5, r5, r3
 802550e:	2600      	movs	r6, #0
 8025510:	341a      	adds	r4, #26
 8025512:	42b5      	cmp	r5, r6
 8025514:	d11a      	bne.n	802554c <_printf_common+0xc8>
 8025516:	2000      	movs	r0, #0
 8025518:	e008      	b.n	802552c <_printf_common+0xa8>
 802551a:	2301      	movs	r3, #1
 802551c:	4652      	mov	r2, sl
 802551e:	4649      	mov	r1, r9
 8025520:	4638      	mov	r0, r7
 8025522:	47c0      	blx	r8
 8025524:	3001      	adds	r0, #1
 8025526:	d103      	bne.n	8025530 <_printf_common+0xac>
 8025528:	f04f 30ff 	mov.w	r0, #4294967295
 802552c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025530:	3501      	adds	r5, #1
 8025532:	e7c6      	b.n	80254c2 <_printf_common+0x3e>
 8025534:	18e1      	adds	r1, r4, r3
 8025536:	1c5a      	adds	r2, r3, #1
 8025538:	2030      	movs	r0, #48	; 0x30
 802553a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802553e:	4422      	add	r2, r4
 8025540:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8025544:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8025548:	3302      	adds	r3, #2
 802554a:	e7c7      	b.n	80254dc <_printf_common+0x58>
 802554c:	2301      	movs	r3, #1
 802554e:	4622      	mov	r2, r4
 8025550:	4649      	mov	r1, r9
 8025552:	4638      	mov	r0, r7
 8025554:	47c0      	blx	r8
 8025556:	3001      	adds	r0, #1
 8025558:	d0e6      	beq.n	8025528 <_printf_common+0xa4>
 802555a:	3601      	adds	r6, #1
 802555c:	e7d9      	b.n	8025512 <_printf_common+0x8e>
	...

08025560 <_printf_i>:
 8025560:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8025564:	7e0f      	ldrb	r7, [r1, #24]
 8025566:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8025568:	2f78      	cmp	r7, #120	; 0x78
 802556a:	4691      	mov	r9, r2
 802556c:	4680      	mov	r8, r0
 802556e:	460c      	mov	r4, r1
 8025570:	469a      	mov	sl, r3
 8025572:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8025576:	d807      	bhi.n	8025588 <_printf_i+0x28>
 8025578:	2f62      	cmp	r7, #98	; 0x62
 802557a:	d80a      	bhi.n	8025592 <_printf_i+0x32>
 802557c:	2f00      	cmp	r7, #0
 802557e:	f000 80d8 	beq.w	8025732 <_printf_i+0x1d2>
 8025582:	2f58      	cmp	r7, #88	; 0x58
 8025584:	f000 80a3 	beq.w	80256ce <_printf_i+0x16e>
 8025588:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802558c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8025590:	e03a      	b.n	8025608 <_printf_i+0xa8>
 8025592:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8025596:	2b15      	cmp	r3, #21
 8025598:	d8f6      	bhi.n	8025588 <_printf_i+0x28>
 802559a:	a101      	add	r1, pc, #4	; (adr r1, 80255a0 <_printf_i+0x40>)
 802559c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80255a0:	080255f9 	.word	0x080255f9
 80255a4:	0802560d 	.word	0x0802560d
 80255a8:	08025589 	.word	0x08025589
 80255ac:	08025589 	.word	0x08025589
 80255b0:	08025589 	.word	0x08025589
 80255b4:	08025589 	.word	0x08025589
 80255b8:	0802560d 	.word	0x0802560d
 80255bc:	08025589 	.word	0x08025589
 80255c0:	08025589 	.word	0x08025589
 80255c4:	08025589 	.word	0x08025589
 80255c8:	08025589 	.word	0x08025589
 80255cc:	08025719 	.word	0x08025719
 80255d0:	0802563d 	.word	0x0802563d
 80255d4:	080256fb 	.word	0x080256fb
 80255d8:	08025589 	.word	0x08025589
 80255dc:	08025589 	.word	0x08025589
 80255e0:	0802573b 	.word	0x0802573b
 80255e4:	08025589 	.word	0x08025589
 80255e8:	0802563d 	.word	0x0802563d
 80255ec:	08025589 	.word	0x08025589
 80255f0:	08025589 	.word	0x08025589
 80255f4:	08025703 	.word	0x08025703
 80255f8:	682b      	ldr	r3, [r5, #0]
 80255fa:	1d1a      	adds	r2, r3, #4
 80255fc:	681b      	ldr	r3, [r3, #0]
 80255fe:	602a      	str	r2, [r5, #0]
 8025600:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8025604:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8025608:	2301      	movs	r3, #1
 802560a:	e0a3      	b.n	8025754 <_printf_i+0x1f4>
 802560c:	6820      	ldr	r0, [r4, #0]
 802560e:	6829      	ldr	r1, [r5, #0]
 8025610:	0606      	lsls	r6, r0, #24
 8025612:	f101 0304 	add.w	r3, r1, #4
 8025616:	d50a      	bpl.n	802562e <_printf_i+0xce>
 8025618:	680e      	ldr	r6, [r1, #0]
 802561a:	602b      	str	r3, [r5, #0]
 802561c:	2e00      	cmp	r6, #0
 802561e:	da03      	bge.n	8025628 <_printf_i+0xc8>
 8025620:	232d      	movs	r3, #45	; 0x2d
 8025622:	4276      	negs	r6, r6
 8025624:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8025628:	485e      	ldr	r0, [pc, #376]	; (80257a4 <_printf_i+0x244>)
 802562a:	230a      	movs	r3, #10
 802562c:	e019      	b.n	8025662 <_printf_i+0x102>
 802562e:	680e      	ldr	r6, [r1, #0]
 8025630:	602b      	str	r3, [r5, #0]
 8025632:	f010 0f40 	tst.w	r0, #64	; 0x40
 8025636:	bf18      	it	ne
 8025638:	b236      	sxthne	r6, r6
 802563a:	e7ef      	b.n	802561c <_printf_i+0xbc>
 802563c:	682b      	ldr	r3, [r5, #0]
 802563e:	6820      	ldr	r0, [r4, #0]
 8025640:	1d19      	adds	r1, r3, #4
 8025642:	6029      	str	r1, [r5, #0]
 8025644:	0601      	lsls	r1, r0, #24
 8025646:	d501      	bpl.n	802564c <_printf_i+0xec>
 8025648:	681e      	ldr	r6, [r3, #0]
 802564a:	e002      	b.n	8025652 <_printf_i+0xf2>
 802564c:	0646      	lsls	r6, r0, #25
 802564e:	d5fb      	bpl.n	8025648 <_printf_i+0xe8>
 8025650:	881e      	ldrh	r6, [r3, #0]
 8025652:	4854      	ldr	r0, [pc, #336]	; (80257a4 <_printf_i+0x244>)
 8025654:	2f6f      	cmp	r7, #111	; 0x6f
 8025656:	bf0c      	ite	eq
 8025658:	2308      	moveq	r3, #8
 802565a:	230a      	movne	r3, #10
 802565c:	2100      	movs	r1, #0
 802565e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8025662:	6865      	ldr	r5, [r4, #4]
 8025664:	60a5      	str	r5, [r4, #8]
 8025666:	2d00      	cmp	r5, #0
 8025668:	bfa2      	ittt	ge
 802566a:	6821      	ldrge	r1, [r4, #0]
 802566c:	f021 0104 	bicge.w	r1, r1, #4
 8025670:	6021      	strge	r1, [r4, #0]
 8025672:	b90e      	cbnz	r6, 8025678 <_printf_i+0x118>
 8025674:	2d00      	cmp	r5, #0
 8025676:	d04d      	beq.n	8025714 <_printf_i+0x1b4>
 8025678:	4615      	mov	r5, r2
 802567a:	fbb6 f1f3 	udiv	r1, r6, r3
 802567e:	fb03 6711 	mls	r7, r3, r1, r6
 8025682:	5dc7      	ldrb	r7, [r0, r7]
 8025684:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8025688:	4637      	mov	r7, r6
 802568a:	42bb      	cmp	r3, r7
 802568c:	460e      	mov	r6, r1
 802568e:	d9f4      	bls.n	802567a <_printf_i+0x11a>
 8025690:	2b08      	cmp	r3, #8
 8025692:	d10b      	bne.n	80256ac <_printf_i+0x14c>
 8025694:	6823      	ldr	r3, [r4, #0]
 8025696:	07de      	lsls	r6, r3, #31
 8025698:	d508      	bpl.n	80256ac <_printf_i+0x14c>
 802569a:	6923      	ldr	r3, [r4, #16]
 802569c:	6861      	ldr	r1, [r4, #4]
 802569e:	4299      	cmp	r1, r3
 80256a0:	bfde      	ittt	le
 80256a2:	2330      	movle	r3, #48	; 0x30
 80256a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80256a8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80256ac:	1b52      	subs	r2, r2, r5
 80256ae:	6122      	str	r2, [r4, #16]
 80256b0:	f8cd a000 	str.w	sl, [sp]
 80256b4:	464b      	mov	r3, r9
 80256b6:	aa03      	add	r2, sp, #12
 80256b8:	4621      	mov	r1, r4
 80256ba:	4640      	mov	r0, r8
 80256bc:	f7ff fee2 	bl	8025484 <_printf_common>
 80256c0:	3001      	adds	r0, #1
 80256c2:	d14c      	bne.n	802575e <_printf_i+0x1fe>
 80256c4:	f04f 30ff 	mov.w	r0, #4294967295
 80256c8:	b004      	add	sp, #16
 80256ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80256ce:	4835      	ldr	r0, [pc, #212]	; (80257a4 <_printf_i+0x244>)
 80256d0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80256d4:	6829      	ldr	r1, [r5, #0]
 80256d6:	6823      	ldr	r3, [r4, #0]
 80256d8:	f851 6b04 	ldr.w	r6, [r1], #4
 80256dc:	6029      	str	r1, [r5, #0]
 80256de:	061d      	lsls	r5, r3, #24
 80256e0:	d514      	bpl.n	802570c <_printf_i+0x1ac>
 80256e2:	07df      	lsls	r7, r3, #31
 80256e4:	bf44      	itt	mi
 80256e6:	f043 0320 	orrmi.w	r3, r3, #32
 80256ea:	6023      	strmi	r3, [r4, #0]
 80256ec:	b91e      	cbnz	r6, 80256f6 <_printf_i+0x196>
 80256ee:	6823      	ldr	r3, [r4, #0]
 80256f0:	f023 0320 	bic.w	r3, r3, #32
 80256f4:	6023      	str	r3, [r4, #0]
 80256f6:	2310      	movs	r3, #16
 80256f8:	e7b0      	b.n	802565c <_printf_i+0xfc>
 80256fa:	6823      	ldr	r3, [r4, #0]
 80256fc:	f043 0320 	orr.w	r3, r3, #32
 8025700:	6023      	str	r3, [r4, #0]
 8025702:	2378      	movs	r3, #120	; 0x78
 8025704:	4828      	ldr	r0, [pc, #160]	; (80257a8 <_printf_i+0x248>)
 8025706:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802570a:	e7e3      	b.n	80256d4 <_printf_i+0x174>
 802570c:	0659      	lsls	r1, r3, #25
 802570e:	bf48      	it	mi
 8025710:	b2b6      	uxthmi	r6, r6
 8025712:	e7e6      	b.n	80256e2 <_printf_i+0x182>
 8025714:	4615      	mov	r5, r2
 8025716:	e7bb      	b.n	8025690 <_printf_i+0x130>
 8025718:	682b      	ldr	r3, [r5, #0]
 802571a:	6826      	ldr	r6, [r4, #0]
 802571c:	6961      	ldr	r1, [r4, #20]
 802571e:	1d18      	adds	r0, r3, #4
 8025720:	6028      	str	r0, [r5, #0]
 8025722:	0635      	lsls	r5, r6, #24
 8025724:	681b      	ldr	r3, [r3, #0]
 8025726:	d501      	bpl.n	802572c <_printf_i+0x1cc>
 8025728:	6019      	str	r1, [r3, #0]
 802572a:	e002      	b.n	8025732 <_printf_i+0x1d2>
 802572c:	0670      	lsls	r0, r6, #25
 802572e:	d5fb      	bpl.n	8025728 <_printf_i+0x1c8>
 8025730:	8019      	strh	r1, [r3, #0]
 8025732:	2300      	movs	r3, #0
 8025734:	6123      	str	r3, [r4, #16]
 8025736:	4615      	mov	r5, r2
 8025738:	e7ba      	b.n	80256b0 <_printf_i+0x150>
 802573a:	682b      	ldr	r3, [r5, #0]
 802573c:	1d1a      	adds	r2, r3, #4
 802573e:	602a      	str	r2, [r5, #0]
 8025740:	681d      	ldr	r5, [r3, #0]
 8025742:	6862      	ldr	r2, [r4, #4]
 8025744:	2100      	movs	r1, #0
 8025746:	4628      	mov	r0, r5
 8025748:	f7da fd5a 	bl	8000200 <memchr>
 802574c:	b108      	cbz	r0, 8025752 <_printf_i+0x1f2>
 802574e:	1b40      	subs	r0, r0, r5
 8025750:	6060      	str	r0, [r4, #4]
 8025752:	6863      	ldr	r3, [r4, #4]
 8025754:	6123      	str	r3, [r4, #16]
 8025756:	2300      	movs	r3, #0
 8025758:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802575c:	e7a8      	b.n	80256b0 <_printf_i+0x150>
 802575e:	6923      	ldr	r3, [r4, #16]
 8025760:	462a      	mov	r2, r5
 8025762:	4649      	mov	r1, r9
 8025764:	4640      	mov	r0, r8
 8025766:	47d0      	blx	sl
 8025768:	3001      	adds	r0, #1
 802576a:	d0ab      	beq.n	80256c4 <_printf_i+0x164>
 802576c:	6823      	ldr	r3, [r4, #0]
 802576e:	079b      	lsls	r3, r3, #30
 8025770:	d413      	bmi.n	802579a <_printf_i+0x23a>
 8025772:	68e0      	ldr	r0, [r4, #12]
 8025774:	9b03      	ldr	r3, [sp, #12]
 8025776:	4298      	cmp	r0, r3
 8025778:	bfb8      	it	lt
 802577a:	4618      	movlt	r0, r3
 802577c:	e7a4      	b.n	80256c8 <_printf_i+0x168>
 802577e:	2301      	movs	r3, #1
 8025780:	4632      	mov	r2, r6
 8025782:	4649      	mov	r1, r9
 8025784:	4640      	mov	r0, r8
 8025786:	47d0      	blx	sl
 8025788:	3001      	adds	r0, #1
 802578a:	d09b      	beq.n	80256c4 <_printf_i+0x164>
 802578c:	3501      	adds	r5, #1
 802578e:	68e3      	ldr	r3, [r4, #12]
 8025790:	9903      	ldr	r1, [sp, #12]
 8025792:	1a5b      	subs	r3, r3, r1
 8025794:	42ab      	cmp	r3, r5
 8025796:	dcf2      	bgt.n	802577e <_printf_i+0x21e>
 8025798:	e7eb      	b.n	8025772 <_printf_i+0x212>
 802579a:	2500      	movs	r5, #0
 802579c:	f104 0619 	add.w	r6, r4, #25
 80257a0:	e7f5      	b.n	802578e <_printf_i+0x22e>
 80257a2:	bf00      	nop
 80257a4:	0802e5a5 	.word	0x0802e5a5
 80257a8:	0802e5b6 	.word	0x0802e5b6

080257ac <iprintf>:
 80257ac:	b40f      	push	{r0, r1, r2, r3}
 80257ae:	4b0a      	ldr	r3, [pc, #40]	; (80257d8 <iprintf+0x2c>)
 80257b0:	b513      	push	{r0, r1, r4, lr}
 80257b2:	681c      	ldr	r4, [r3, #0]
 80257b4:	b124      	cbz	r4, 80257c0 <iprintf+0x14>
 80257b6:	69a3      	ldr	r3, [r4, #24]
 80257b8:	b913      	cbnz	r3, 80257c0 <iprintf+0x14>
 80257ba:	4620      	mov	r0, r4
 80257bc:	f002 f8de 	bl	802797c <__sinit>
 80257c0:	ab05      	add	r3, sp, #20
 80257c2:	9a04      	ldr	r2, [sp, #16]
 80257c4:	68a1      	ldr	r1, [r4, #8]
 80257c6:	9301      	str	r3, [sp, #4]
 80257c8:	4620      	mov	r0, r4
 80257ca:	f7ff fa55 	bl	8024c78 <_vfiprintf_r>
 80257ce:	b002      	add	sp, #8
 80257d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80257d4:	b004      	add	sp, #16
 80257d6:	4770      	bx	lr
 80257d8:	10000070 	.word	0x10000070

080257dc <_puts_r>:
 80257dc:	b570      	push	{r4, r5, r6, lr}
 80257de:	460e      	mov	r6, r1
 80257e0:	4605      	mov	r5, r0
 80257e2:	b118      	cbz	r0, 80257ec <_puts_r+0x10>
 80257e4:	6983      	ldr	r3, [r0, #24]
 80257e6:	b90b      	cbnz	r3, 80257ec <_puts_r+0x10>
 80257e8:	f002 f8c8 	bl	802797c <__sinit>
 80257ec:	69ab      	ldr	r3, [r5, #24]
 80257ee:	68ac      	ldr	r4, [r5, #8]
 80257f0:	b913      	cbnz	r3, 80257f8 <_puts_r+0x1c>
 80257f2:	4628      	mov	r0, r5
 80257f4:	f002 f8c2 	bl	802797c <__sinit>
 80257f8:	4b2c      	ldr	r3, [pc, #176]	; (80258ac <_puts_r+0xd0>)
 80257fa:	429c      	cmp	r4, r3
 80257fc:	d120      	bne.n	8025840 <_puts_r+0x64>
 80257fe:	686c      	ldr	r4, [r5, #4]
 8025800:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8025802:	07db      	lsls	r3, r3, #31
 8025804:	d405      	bmi.n	8025812 <_puts_r+0x36>
 8025806:	89a3      	ldrh	r3, [r4, #12]
 8025808:	0598      	lsls	r0, r3, #22
 802580a:	d402      	bmi.n	8025812 <_puts_r+0x36>
 802580c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802580e:	f002 fcc6 	bl	802819e <__retarget_lock_acquire_recursive>
 8025812:	89a3      	ldrh	r3, [r4, #12]
 8025814:	0719      	lsls	r1, r3, #28
 8025816:	d51d      	bpl.n	8025854 <_puts_r+0x78>
 8025818:	6923      	ldr	r3, [r4, #16]
 802581a:	b1db      	cbz	r3, 8025854 <_puts_r+0x78>
 802581c:	3e01      	subs	r6, #1
 802581e:	68a3      	ldr	r3, [r4, #8]
 8025820:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8025824:	3b01      	subs	r3, #1
 8025826:	60a3      	str	r3, [r4, #8]
 8025828:	bb39      	cbnz	r1, 802587a <_puts_r+0x9e>
 802582a:	2b00      	cmp	r3, #0
 802582c:	da38      	bge.n	80258a0 <_puts_r+0xc4>
 802582e:	4622      	mov	r2, r4
 8025830:	210a      	movs	r1, #10
 8025832:	4628      	mov	r0, r5
 8025834:	f001 f808 	bl	8026848 <__swbuf_r>
 8025838:	3001      	adds	r0, #1
 802583a:	d011      	beq.n	8025860 <_puts_r+0x84>
 802583c:	250a      	movs	r5, #10
 802583e:	e011      	b.n	8025864 <_puts_r+0x88>
 8025840:	4b1b      	ldr	r3, [pc, #108]	; (80258b0 <_puts_r+0xd4>)
 8025842:	429c      	cmp	r4, r3
 8025844:	d101      	bne.n	802584a <_puts_r+0x6e>
 8025846:	68ac      	ldr	r4, [r5, #8]
 8025848:	e7da      	b.n	8025800 <_puts_r+0x24>
 802584a:	4b1a      	ldr	r3, [pc, #104]	; (80258b4 <_puts_r+0xd8>)
 802584c:	429c      	cmp	r4, r3
 802584e:	bf08      	it	eq
 8025850:	68ec      	ldreq	r4, [r5, #12]
 8025852:	e7d5      	b.n	8025800 <_puts_r+0x24>
 8025854:	4621      	mov	r1, r4
 8025856:	4628      	mov	r0, r5
 8025858:	f001 f85a 	bl	8026910 <__swsetup_r>
 802585c:	2800      	cmp	r0, #0
 802585e:	d0dd      	beq.n	802581c <_puts_r+0x40>
 8025860:	f04f 35ff 	mov.w	r5, #4294967295
 8025864:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8025866:	07da      	lsls	r2, r3, #31
 8025868:	d405      	bmi.n	8025876 <_puts_r+0x9a>
 802586a:	89a3      	ldrh	r3, [r4, #12]
 802586c:	059b      	lsls	r3, r3, #22
 802586e:	d402      	bmi.n	8025876 <_puts_r+0x9a>
 8025870:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8025872:	f002 fc95 	bl	80281a0 <__retarget_lock_release_recursive>
 8025876:	4628      	mov	r0, r5
 8025878:	bd70      	pop	{r4, r5, r6, pc}
 802587a:	2b00      	cmp	r3, #0
 802587c:	da04      	bge.n	8025888 <_puts_r+0xac>
 802587e:	69a2      	ldr	r2, [r4, #24]
 8025880:	429a      	cmp	r2, r3
 8025882:	dc06      	bgt.n	8025892 <_puts_r+0xb6>
 8025884:	290a      	cmp	r1, #10
 8025886:	d004      	beq.n	8025892 <_puts_r+0xb6>
 8025888:	6823      	ldr	r3, [r4, #0]
 802588a:	1c5a      	adds	r2, r3, #1
 802588c:	6022      	str	r2, [r4, #0]
 802588e:	7019      	strb	r1, [r3, #0]
 8025890:	e7c5      	b.n	802581e <_puts_r+0x42>
 8025892:	4622      	mov	r2, r4
 8025894:	4628      	mov	r0, r5
 8025896:	f000 ffd7 	bl	8026848 <__swbuf_r>
 802589a:	3001      	adds	r0, #1
 802589c:	d1bf      	bne.n	802581e <_puts_r+0x42>
 802589e:	e7df      	b.n	8025860 <_puts_r+0x84>
 80258a0:	6823      	ldr	r3, [r4, #0]
 80258a2:	250a      	movs	r5, #10
 80258a4:	1c5a      	adds	r2, r3, #1
 80258a6:	6022      	str	r2, [r4, #0]
 80258a8:	701d      	strb	r5, [r3, #0]
 80258aa:	e7db      	b.n	8025864 <_puts_r+0x88>
 80258ac:	0802e768 	.word	0x0802e768
 80258b0:	0802e788 	.word	0x0802e788
 80258b4:	0802e748 	.word	0x0802e748

080258b8 <puts>:
 80258b8:	4b02      	ldr	r3, [pc, #8]	; (80258c4 <puts+0xc>)
 80258ba:	4601      	mov	r1, r0
 80258bc:	6818      	ldr	r0, [r3, #0]
 80258be:	f7ff bf8d 	b.w	80257dc <_puts_r>
 80258c2:	bf00      	nop
 80258c4:	10000070 	.word	0x10000070

080258c8 <rand>:
 80258c8:	4b16      	ldr	r3, [pc, #88]	; (8025924 <rand+0x5c>)
 80258ca:	b510      	push	{r4, lr}
 80258cc:	681c      	ldr	r4, [r3, #0]
 80258ce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80258d0:	b9b3      	cbnz	r3, 8025900 <rand+0x38>
 80258d2:	2018      	movs	r0, #24
 80258d4:	f7ff f876 	bl	80249c4 <malloc>
 80258d8:	63a0      	str	r0, [r4, #56]	; 0x38
 80258da:	b928      	cbnz	r0, 80258e8 <rand+0x20>
 80258dc:	4602      	mov	r2, r0
 80258de:	4b12      	ldr	r3, [pc, #72]	; (8025928 <rand+0x60>)
 80258e0:	4812      	ldr	r0, [pc, #72]	; (802592c <rand+0x64>)
 80258e2:	214e      	movs	r1, #78	; 0x4e
 80258e4:	f001 f882 	bl	80269ec <__assert_func>
 80258e8:	4a11      	ldr	r2, [pc, #68]	; (8025930 <rand+0x68>)
 80258ea:	4b12      	ldr	r3, [pc, #72]	; (8025934 <rand+0x6c>)
 80258ec:	e9c0 2300 	strd	r2, r3, [r0]
 80258f0:	4b11      	ldr	r3, [pc, #68]	; (8025938 <rand+0x70>)
 80258f2:	6083      	str	r3, [r0, #8]
 80258f4:	230b      	movs	r3, #11
 80258f6:	8183      	strh	r3, [r0, #12]
 80258f8:	2201      	movs	r2, #1
 80258fa:	2300      	movs	r3, #0
 80258fc:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8025900:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8025902:	4a0e      	ldr	r2, [pc, #56]	; (802593c <rand+0x74>)
 8025904:	6920      	ldr	r0, [r4, #16]
 8025906:	6963      	ldr	r3, [r4, #20]
 8025908:	490d      	ldr	r1, [pc, #52]	; (8025940 <rand+0x78>)
 802590a:	4342      	muls	r2, r0
 802590c:	fb01 2203 	mla	r2, r1, r3, r2
 8025910:	fba0 0101 	umull	r0, r1, r0, r1
 8025914:	1c43      	adds	r3, r0, #1
 8025916:	eb42 0001 	adc.w	r0, r2, r1
 802591a:	e9c4 3004 	strd	r3, r0, [r4, #16]
 802591e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8025922:	bd10      	pop	{r4, pc}
 8025924:	10000070 	.word	0x10000070
 8025928:	0802e5c7 	.word	0x0802e5c7
 802592c:	0802e5de 	.word	0x0802e5de
 8025930:	abcd330e 	.word	0xabcd330e
 8025934:	e66d1234 	.word	0xe66d1234
 8025938:	0005deec 	.word	0x0005deec
 802593c:	5851f42d 	.word	0x5851f42d
 8025940:	4c957f2d 	.word	0x4c957f2d

08025944 <realloc>:
 8025944:	4b02      	ldr	r3, [pc, #8]	; (8025950 <realloc+0xc>)
 8025946:	460a      	mov	r2, r1
 8025948:	4601      	mov	r1, r0
 802594a:	6818      	ldr	r0, [r3, #0]
 802594c:	f003 b997 	b.w	8028c7e <_realloc_r>
 8025950:	10000070 	.word	0x10000070

08025954 <_sbrk_r>:
 8025954:	b538      	push	{r3, r4, r5, lr}
 8025956:	4d06      	ldr	r5, [pc, #24]	; (8025970 <_sbrk_r+0x1c>)
 8025958:	2300      	movs	r3, #0
 802595a:	4604      	mov	r4, r0
 802595c:	4608      	mov	r0, r1
 802595e:	602b      	str	r3, [r5, #0]
 8025960:	f7e4 faec 	bl	8009f3c <_sbrk>
 8025964:	1c43      	adds	r3, r0, #1
 8025966:	d102      	bne.n	802596e <_sbrk_r+0x1a>
 8025968:	682b      	ldr	r3, [r5, #0]
 802596a:	b103      	cbz	r3, 802596e <_sbrk_r+0x1a>
 802596c:	6023      	str	r3, [r4, #0]
 802596e:	bd38      	pop	{r3, r4, r5, pc}
 8025970:	20013930 	.word	0x20013930

08025974 <siprintf>:
 8025974:	b40e      	push	{r1, r2, r3}
 8025976:	b500      	push	{lr}
 8025978:	b09c      	sub	sp, #112	; 0x70
 802597a:	ab1d      	add	r3, sp, #116	; 0x74
 802597c:	9002      	str	r0, [sp, #8]
 802597e:	9006      	str	r0, [sp, #24]
 8025980:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8025984:	4809      	ldr	r0, [pc, #36]	; (80259ac <siprintf+0x38>)
 8025986:	9107      	str	r1, [sp, #28]
 8025988:	9104      	str	r1, [sp, #16]
 802598a:	4909      	ldr	r1, [pc, #36]	; (80259b0 <siprintf+0x3c>)
 802598c:	f853 2b04 	ldr.w	r2, [r3], #4
 8025990:	9105      	str	r1, [sp, #20]
 8025992:	6800      	ldr	r0, [r0, #0]
 8025994:	9301      	str	r3, [sp, #4]
 8025996:	a902      	add	r1, sp, #8
 8025998:	f003 f9fc 	bl	8028d94 <_svfiprintf_r>
 802599c:	9b02      	ldr	r3, [sp, #8]
 802599e:	2200      	movs	r2, #0
 80259a0:	701a      	strb	r2, [r3, #0]
 80259a2:	b01c      	add	sp, #112	; 0x70
 80259a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80259a8:	b003      	add	sp, #12
 80259aa:	4770      	bx	lr
 80259ac:	10000070 	.word	0x10000070
 80259b0:	ffff0208 	.word	0xffff0208

080259b4 <siscanf>:
 80259b4:	b40e      	push	{r1, r2, r3}
 80259b6:	b510      	push	{r4, lr}
 80259b8:	b09f      	sub	sp, #124	; 0x7c
 80259ba:	ac21      	add	r4, sp, #132	; 0x84
 80259bc:	f44f 7101 	mov.w	r1, #516	; 0x204
 80259c0:	f854 2b04 	ldr.w	r2, [r4], #4
 80259c4:	9201      	str	r2, [sp, #4]
 80259c6:	f8ad 101c 	strh.w	r1, [sp, #28]
 80259ca:	9004      	str	r0, [sp, #16]
 80259cc:	9008      	str	r0, [sp, #32]
 80259ce:	f7da fc09 	bl	80001e4 <strlen>
 80259d2:	4b0c      	ldr	r3, [pc, #48]	; (8025a04 <siscanf+0x50>)
 80259d4:	9005      	str	r0, [sp, #20]
 80259d6:	9009      	str	r0, [sp, #36]	; 0x24
 80259d8:	930d      	str	r3, [sp, #52]	; 0x34
 80259da:	480b      	ldr	r0, [pc, #44]	; (8025a08 <siscanf+0x54>)
 80259dc:	9a01      	ldr	r2, [sp, #4]
 80259de:	6800      	ldr	r0, [r0, #0]
 80259e0:	9403      	str	r4, [sp, #12]
 80259e2:	2300      	movs	r3, #0
 80259e4:	9311      	str	r3, [sp, #68]	; 0x44
 80259e6:	9316      	str	r3, [sp, #88]	; 0x58
 80259e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80259ec:	f8ad 301e 	strh.w	r3, [sp, #30]
 80259f0:	a904      	add	r1, sp, #16
 80259f2:	4623      	mov	r3, r4
 80259f4:	f003 fb28 	bl	8029048 <__ssvfiscanf_r>
 80259f8:	b01f      	add	sp, #124	; 0x7c
 80259fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80259fe:	b003      	add	sp, #12
 8025a00:	4770      	bx	lr
 8025a02:	bf00      	nop
 8025a04:	08025a2f 	.word	0x08025a2f
 8025a08:	10000070 	.word	0x10000070

08025a0c <__sread>:
 8025a0c:	b510      	push	{r4, lr}
 8025a0e:	460c      	mov	r4, r1
 8025a10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025a14:	f003 fde2 	bl	80295dc <_read_r>
 8025a18:	2800      	cmp	r0, #0
 8025a1a:	bfab      	itete	ge
 8025a1c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8025a1e:	89a3      	ldrhlt	r3, [r4, #12]
 8025a20:	181b      	addge	r3, r3, r0
 8025a22:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8025a26:	bfac      	ite	ge
 8025a28:	6563      	strge	r3, [r4, #84]	; 0x54
 8025a2a:	81a3      	strhlt	r3, [r4, #12]
 8025a2c:	bd10      	pop	{r4, pc}

08025a2e <__seofread>:
 8025a2e:	2000      	movs	r0, #0
 8025a30:	4770      	bx	lr

08025a32 <__swrite>:
 8025a32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025a36:	461f      	mov	r7, r3
 8025a38:	898b      	ldrh	r3, [r1, #12]
 8025a3a:	05db      	lsls	r3, r3, #23
 8025a3c:	4605      	mov	r5, r0
 8025a3e:	460c      	mov	r4, r1
 8025a40:	4616      	mov	r6, r2
 8025a42:	d505      	bpl.n	8025a50 <__swrite+0x1e>
 8025a44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025a48:	2302      	movs	r3, #2
 8025a4a:	2200      	movs	r2, #0
 8025a4c:	f002 fbaa 	bl	80281a4 <_lseek_r>
 8025a50:	89a3      	ldrh	r3, [r4, #12]
 8025a52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8025a56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8025a5a:	81a3      	strh	r3, [r4, #12]
 8025a5c:	4632      	mov	r2, r6
 8025a5e:	463b      	mov	r3, r7
 8025a60:	4628      	mov	r0, r5
 8025a62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8025a66:	f000 bf41 	b.w	80268ec <_write_r>

08025a6a <__sseek>:
 8025a6a:	b510      	push	{r4, lr}
 8025a6c:	460c      	mov	r4, r1
 8025a6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025a72:	f002 fb97 	bl	80281a4 <_lseek_r>
 8025a76:	1c43      	adds	r3, r0, #1
 8025a78:	89a3      	ldrh	r3, [r4, #12]
 8025a7a:	bf15      	itete	ne
 8025a7c:	6560      	strne	r0, [r4, #84]	; 0x54
 8025a7e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8025a82:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8025a86:	81a3      	strheq	r3, [r4, #12]
 8025a88:	bf18      	it	ne
 8025a8a:	81a3      	strhne	r3, [r4, #12]
 8025a8c:	bd10      	pop	{r4, pc}

08025a8e <__sclose>:
 8025a8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025a92:	f000 bfc9 	b.w	8026a28 <_close_r>

08025a96 <strcpy>:
 8025a96:	4603      	mov	r3, r0
 8025a98:	f811 2b01 	ldrb.w	r2, [r1], #1
 8025a9c:	f803 2b01 	strb.w	r2, [r3], #1
 8025aa0:	2a00      	cmp	r2, #0
 8025aa2:	d1f9      	bne.n	8025a98 <strcpy+0x2>
 8025aa4:	4770      	bx	lr

08025aa6 <strncmp>:
 8025aa6:	b510      	push	{r4, lr}
 8025aa8:	b17a      	cbz	r2, 8025aca <strncmp+0x24>
 8025aaa:	4603      	mov	r3, r0
 8025aac:	3901      	subs	r1, #1
 8025aae:	1884      	adds	r4, r0, r2
 8025ab0:	f813 0b01 	ldrb.w	r0, [r3], #1
 8025ab4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8025ab8:	4290      	cmp	r0, r2
 8025aba:	d101      	bne.n	8025ac0 <strncmp+0x1a>
 8025abc:	42a3      	cmp	r3, r4
 8025abe:	d101      	bne.n	8025ac4 <strncmp+0x1e>
 8025ac0:	1a80      	subs	r0, r0, r2
 8025ac2:	bd10      	pop	{r4, pc}
 8025ac4:	2800      	cmp	r0, #0
 8025ac6:	d1f3      	bne.n	8025ab0 <strncmp+0xa>
 8025ac8:	e7fa      	b.n	8025ac0 <strncmp+0x1a>
 8025aca:	4610      	mov	r0, r2
 8025acc:	e7f9      	b.n	8025ac2 <strncmp+0x1c>

08025ace <sulp>:
 8025ace:	b570      	push	{r4, r5, r6, lr}
 8025ad0:	4604      	mov	r4, r0
 8025ad2:	460d      	mov	r5, r1
 8025ad4:	ec45 4b10 	vmov	d0, r4, r5
 8025ad8:	4616      	mov	r6, r2
 8025ada:	f002 ff6b 	bl	80289b4 <__ulp>
 8025ade:	ec51 0b10 	vmov	r0, r1, d0
 8025ae2:	b17e      	cbz	r6, 8025b04 <sulp+0x36>
 8025ae4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8025ae8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8025aec:	2b00      	cmp	r3, #0
 8025aee:	dd09      	ble.n	8025b04 <sulp+0x36>
 8025af0:	051b      	lsls	r3, r3, #20
 8025af2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8025af6:	2400      	movs	r4, #0
 8025af8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8025afc:	4622      	mov	r2, r4
 8025afe:	462b      	mov	r3, r5
 8025b00:	f7da fd8a 	bl	8000618 <__aeabi_dmul>
 8025b04:	bd70      	pop	{r4, r5, r6, pc}
	...

08025b08 <_strtod_l>:
 8025b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025b0c:	ed2d 8b02 	vpush	{d8}
 8025b10:	b09d      	sub	sp, #116	; 0x74
 8025b12:	461f      	mov	r7, r3
 8025b14:	2300      	movs	r3, #0
 8025b16:	9318      	str	r3, [sp, #96]	; 0x60
 8025b18:	4ba2      	ldr	r3, [pc, #648]	; (8025da4 <_strtod_l+0x29c>)
 8025b1a:	9213      	str	r2, [sp, #76]	; 0x4c
 8025b1c:	681b      	ldr	r3, [r3, #0]
 8025b1e:	9305      	str	r3, [sp, #20]
 8025b20:	4604      	mov	r4, r0
 8025b22:	4618      	mov	r0, r3
 8025b24:	4688      	mov	r8, r1
 8025b26:	f7da fb5d 	bl	80001e4 <strlen>
 8025b2a:	f04f 0a00 	mov.w	sl, #0
 8025b2e:	4605      	mov	r5, r0
 8025b30:	f04f 0b00 	mov.w	fp, #0
 8025b34:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8025b38:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8025b3a:	781a      	ldrb	r2, [r3, #0]
 8025b3c:	2a2b      	cmp	r2, #43	; 0x2b
 8025b3e:	d04e      	beq.n	8025bde <_strtod_l+0xd6>
 8025b40:	d83b      	bhi.n	8025bba <_strtod_l+0xb2>
 8025b42:	2a0d      	cmp	r2, #13
 8025b44:	d834      	bhi.n	8025bb0 <_strtod_l+0xa8>
 8025b46:	2a08      	cmp	r2, #8
 8025b48:	d834      	bhi.n	8025bb4 <_strtod_l+0xac>
 8025b4a:	2a00      	cmp	r2, #0
 8025b4c:	d03e      	beq.n	8025bcc <_strtod_l+0xc4>
 8025b4e:	2300      	movs	r3, #0
 8025b50:	930a      	str	r3, [sp, #40]	; 0x28
 8025b52:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8025b54:	7833      	ldrb	r3, [r6, #0]
 8025b56:	2b30      	cmp	r3, #48	; 0x30
 8025b58:	f040 80b0 	bne.w	8025cbc <_strtod_l+0x1b4>
 8025b5c:	7873      	ldrb	r3, [r6, #1]
 8025b5e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8025b62:	2b58      	cmp	r3, #88	; 0x58
 8025b64:	d168      	bne.n	8025c38 <_strtod_l+0x130>
 8025b66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025b68:	9301      	str	r3, [sp, #4]
 8025b6a:	ab18      	add	r3, sp, #96	; 0x60
 8025b6c:	9702      	str	r7, [sp, #8]
 8025b6e:	9300      	str	r3, [sp, #0]
 8025b70:	4a8d      	ldr	r2, [pc, #564]	; (8025da8 <_strtod_l+0x2a0>)
 8025b72:	ab19      	add	r3, sp, #100	; 0x64
 8025b74:	a917      	add	r1, sp, #92	; 0x5c
 8025b76:	4620      	mov	r0, r4
 8025b78:	f002 f804 	bl	8027b84 <__gethex>
 8025b7c:	f010 0707 	ands.w	r7, r0, #7
 8025b80:	4605      	mov	r5, r0
 8025b82:	d005      	beq.n	8025b90 <_strtod_l+0x88>
 8025b84:	2f06      	cmp	r7, #6
 8025b86:	d12c      	bne.n	8025be2 <_strtod_l+0xda>
 8025b88:	3601      	adds	r6, #1
 8025b8a:	2300      	movs	r3, #0
 8025b8c:	9617      	str	r6, [sp, #92]	; 0x5c
 8025b8e:	930a      	str	r3, [sp, #40]	; 0x28
 8025b90:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8025b92:	2b00      	cmp	r3, #0
 8025b94:	f040 8590 	bne.w	80266b8 <_strtod_l+0xbb0>
 8025b98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025b9a:	b1eb      	cbz	r3, 8025bd8 <_strtod_l+0xd0>
 8025b9c:	4652      	mov	r2, sl
 8025b9e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8025ba2:	ec43 2b10 	vmov	d0, r2, r3
 8025ba6:	b01d      	add	sp, #116	; 0x74
 8025ba8:	ecbd 8b02 	vpop	{d8}
 8025bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025bb0:	2a20      	cmp	r2, #32
 8025bb2:	d1cc      	bne.n	8025b4e <_strtod_l+0x46>
 8025bb4:	3301      	adds	r3, #1
 8025bb6:	9317      	str	r3, [sp, #92]	; 0x5c
 8025bb8:	e7be      	b.n	8025b38 <_strtod_l+0x30>
 8025bba:	2a2d      	cmp	r2, #45	; 0x2d
 8025bbc:	d1c7      	bne.n	8025b4e <_strtod_l+0x46>
 8025bbe:	2201      	movs	r2, #1
 8025bc0:	920a      	str	r2, [sp, #40]	; 0x28
 8025bc2:	1c5a      	adds	r2, r3, #1
 8025bc4:	9217      	str	r2, [sp, #92]	; 0x5c
 8025bc6:	785b      	ldrb	r3, [r3, #1]
 8025bc8:	2b00      	cmp	r3, #0
 8025bca:	d1c2      	bne.n	8025b52 <_strtod_l+0x4a>
 8025bcc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8025bce:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8025bd2:	2b00      	cmp	r3, #0
 8025bd4:	f040 856e 	bne.w	80266b4 <_strtod_l+0xbac>
 8025bd8:	4652      	mov	r2, sl
 8025bda:	465b      	mov	r3, fp
 8025bdc:	e7e1      	b.n	8025ba2 <_strtod_l+0x9a>
 8025bde:	2200      	movs	r2, #0
 8025be0:	e7ee      	b.n	8025bc0 <_strtod_l+0xb8>
 8025be2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8025be4:	b13a      	cbz	r2, 8025bf6 <_strtod_l+0xee>
 8025be6:	2135      	movs	r1, #53	; 0x35
 8025be8:	a81a      	add	r0, sp, #104	; 0x68
 8025bea:	f002 ffee 	bl	8028bca <__copybits>
 8025bee:	9918      	ldr	r1, [sp, #96]	; 0x60
 8025bf0:	4620      	mov	r0, r4
 8025bf2:	f002 fbad 	bl	8028350 <_Bfree>
 8025bf6:	3f01      	subs	r7, #1
 8025bf8:	2f04      	cmp	r7, #4
 8025bfa:	d806      	bhi.n	8025c0a <_strtod_l+0x102>
 8025bfc:	e8df f007 	tbb	[pc, r7]
 8025c00:	1714030a 	.word	0x1714030a
 8025c04:	0a          	.byte	0x0a
 8025c05:	00          	.byte	0x00
 8025c06:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8025c0a:	0728      	lsls	r0, r5, #28
 8025c0c:	d5c0      	bpl.n	8025b90 <_strtod_l+0x88>
 8025c0e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8025c12:	e7bd      	b.n	8025b90 <_strtod_l+0x88>
 8025c14:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8025c18:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8025c1a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8025c1e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8025c22:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8025c26:	e7f0      	b.n	8025c0a <_strtod_l+0x102>
 8025c28:	f8df b180 	ldr.w	fp, [pc, #384]	; 8025dac <_strtod_l+0x2a4>
 8025c2c:	e7ed      	b.n	8025c0a <_strtod_l+0x102>
 8025c2e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8025c32:	f04f 3aff 	mov.w	sl, #4294967295
 8025c36:	e7e8      	b.n	8025c0a <_strtod_l+0x102>
 8025c38:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8025c3a:	1c5a      	adds	r2, r3, #1
 8025c3c:	9217      	str	r2, [sp, #92]	; 0x5c
 8025c3e:	785b      	ldrb	r3, [r3, #1]
 8025c40:	2b30      	cmp	r3, #48	; 0x30
 8025c42:	d0f9      	beq.n	8025c38 <_strtod_l+0x130>
 8025c44:	2b00      	cmp	r3, #0
 8025c46:	d0a3      	beq.n	8025b90 <_strtod_l+0x88>
 8025c48:	2301      	movs	r3, #1
 8025c4a:	f04f 0900 	mov.w	r9, #0
 8025c4e:	9304      	str	r3, [sp, #16]
 8025c50:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8025c52:	9308      	str	r3, [sp, #32]
 8025c54:	f8cd 901c 	str.w	r9, [sp, #28]
 8025c58:	464f      	mov	r7, r9
 8025c5a:	220a      	movs	r2, #10
 8025c5c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8025c5e:	7806      	ldrb	r6, [r0, #0]
 8025c60:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8025c64:	b2d9      	uxtb	r1, r3
 8025c66:	2909      	cmp	r1, #9
 8025c68:	d92a      	bls.n	8025cc0 <_strtod_l+0x1b8>
 8025c6a:	9905      	ldr	r1, [sp, #20]
 8025c6c:	462a      	mov	r2, r5
 8025c6e:	f7ff ff1a 	bl	8025aa6 <strncmp>
 8025c72:	b398      	cbz	r0, 8025cdc <_strtod_l+0x1d4>
 8025c74:	2000      	movs	r0, #0
 8025c76:	4632      	mov	r2, r6
 8025c78:	463d      	mov	r5, r7
 8025c7a:	9005      	str	r0, [sp, #20]
 8025c7c:	4603      	mov	r3, r0
 8025c7e:	2a65      	cmp	r2, #101	; 0x65
 8025c80:	d001      	beq.n	8025c86 <_strtod_l+0x17e>
 8025c82:	2a45      	cmp	r2, #69	; 0x45
 8025c84:	d118      	bne.n	8025cb8 <_strtod_l+0x1b0>
 8025c86:	b91d      	cbnz	r5, 8025c90 <_strtod_l+0x188>
 8025c88:	9a04      	ldr	r2, [sp, #16]
 8025c8a:	4302      	orrs	r2, r0
 8025c8c:	d09e      	beq.n	8025bcc <_strtod_l+0xc4>
 8025c8e:	2500      	movs	r5, #0
 8025c90:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8025c94:	f108 0201 	add.w	r2, r8, #1
 8025c98:	9217      	str	r2, [sp, #92]	; 0x5c
 8025c9a:	f898 2001 	ldrb.w	r2, [r8, #1]
 8025c9e:	2a2b      	cmp	r2, #43	; 0x2b
 8025ca0:	d075      	beq.n	8025d8e <_strtod_l+0x286>
 8025ca2:	2a2d      	cmp	r2, #45	; 0x2d
 8025ca4:	d07b      	beq.n	8025d9e <_strtod_l+0x296>
 8025ca6:	f04f 0c00 	mov.w	ip, #0
 8025caa:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8025cae:	2909      	cmp	r1, #9
 8025cb0:	f240 8082 	bls.w	8025db8 <_strtod_l+0x2b0>
 8025cb4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8025cb8:	2600      	movs	r6, #0
 8025cba:	e09d      	b.n	8025df8 <_strtod_l+0x2f0>
 8025cbc:	2300      	movs	r3, #0
 8025cbe:	e7c4      	b.n	8025c4a <_strtod_l+0x142>
 8025cc0:	2f08      	cmp	r7, #8
 8025cc2:	bfd8      	it	le
 8025cc4:	9907      	ldrle	r1, [sp, #28]
 8025cc6:	f100 0001 	add.w	r0, r0, #1
 8025cca:	bfda      	itte	le
 8025ccc:	fb02 3301 	mlale	r3, r2, r1, r3
 8025cd0:	9307      	strle	r3, [sp, #28]
 8025cd2:	fb02 3909 	mlagt	r9, r2, r9, r3
 8025cd6:	3701      	adds	r7, #1
 8025cd8:	9017      	str	r0, [sp, #92]	; 0x5c
 8025cda:	e7bf      	b.n	8025c5c <_strtod_l+0x154>
 8025cdc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8025cde:	195a      	adds	r2, r3, r5
 8025ce0:	9217      	str	r2, [sp, #92]	; 0x5c
 8025ce2:	5d5a      	ldrb	r2, [r3, r5]
 8025ce4:	2f00      	cmp	r7, #0
 8025ce6:	d037      	beq.n	8025d58 <_strtod_l+0x250>
 8025ce8:	9005      	str	r0, [sp, #20]
 8025cea:	463d      	mov	r5, r7
 8025cec:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8025cf0:	2b09      	cmp	r3, #9
 8025cf2:	d912      	bls.n	8025d1a <_strtod_l+0x212>
 8025cf4:	2301      	movs	r3, #1
 8025cf6:	e7c2      	b.n	8025c7e <_strtod_l+0x176>
 8025cf8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8025cfa:	1c5a      	adds	r2, r3, #1
 8025cfc:	9217      	str	r2, [sp, #92]	; 0x5c
 8025cfe:	785a      	ldrb	r2, [r3, #1]
 8025d00:	3001      	adds	r0, #1
 8025d02:	2a30      	cmp	r2, #48	; 0x30
 8025d04:	d0f8      	beq.n	8025cf8 <_strtod_l+0x1f0>
 8025d06:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8025d0a:	2b08      	cmp	r3, #8
 8025d0c:	f200 84d9 	bhi.w	80266c2 <_strtod_l+0xbba>
 8025d10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8025d12:	9005      	str	r0, [sp, #20]
 8025d14:	2000      	movs	r0, #0
 8025d16:	9308      	str	r3, [sp, #32]
 8025d18:	4605      	mov	r5, r0
 8025d1a:	3a30      	subs	r2, #48	; 0x30
 8025d1c:	f100 0301 	add.w	r3, r0, #1
 8025d20:	d014      	beq.n	8025d4c <_strtod_l+0x244>
 8025d22:	9905      	ldr	r1, [sp, #20]
 8025d24:	4419      	add	r1, r3
 8025d26:	9105      	str	r1, [sp, #20]
 8025d28:	462b      	mov	r3, r5
 8025d2a:	eb00 0e05 	add.w	lr, r0, r5
 8025d2e:	210a      	movs	r1, #10
 8025d30:	4573      	cmp	r3, lr
 8025d32:	d113      	bne.n	8025d5c <_strtod_l+0x254>
 8025d34:	182b      	adds	r3, r5, r0
 8025d36:	2b08      	cmp	r3, #8
 8025d38:	f105 0501 	add.w	r5, r5, #1
 8025d3c:	4405      	add	r5, r0
 8025d3e:	dc1c      	bgt.n	8025d7a <_strtod_l+0x272>
 8025d40:	9907      	ldr	r1, [sp, #28]
 8025d42:	230a      	movs	r3, #10
 8025d44:	fb03 2301 	mla	r3, r3, r1, r2
 8025d48:	9307      	str	r3, [sp, #28]
 8025d4a:	2300      	movs	r3, #0
 8025d4c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8025d4e:	1c51      	adds	r1, r2, #1
 8025d50:	9117      	str	r1, [sp, #92]	; 0x5c
 8025d52:	7852      	ldrb	r2, [r2, #1]
 8025d54:	4618      	mov	r0, r3
 8025d56:	e7c9      	b.n	8025cec <_strtod_l+0x1e4>
 8025d58:	4638      	mov	r0, r7
 8025d5a:	e7d2      	b.n	8025d02 <_strtod_l+0x1fa>
 8025d5c:	2b08      	cmp	r3, #8
 8025d5e:	dc04      	bgt.n	8025d6a <_strtod_l+0x262>
 8025d60:	9e07      	ldr	r6, [sp, #28]
 8025d62:	434e      	muls	r6, r1
 8025d64:	9607      	str	r6, [sp, #28]
 8025d66:	3301      	adds	r3, #1
 8025d68:	e7e2      	b.n	8025d30 <_strtod_l+0x228>
 8025d6a:	f103 0c01 	add.w	ip, r3, #1
 8025d6e:	f1bc 0f10 	cmp.w	ip, #16
 8025d72:	bfd8      	it	le
 8025d74:	fb01 f909 	mulle.w	r9, r1, r9
 8025d78:	e7f5      	b.n	8025d66 <_strtod_l+0x25e>
 8025d7a:	2d10      	cmp	r5, #16
 8025d7c:	bfdc      	itt	le
 8025d7e:	230a      	movle	r3, #10
 8025d80:	fb03 2909 	mlale	r9, r3, r9, r2
 8025d84:	e7e1      	b.n	8025d4a <_strtod_l+0x242>
 8025d86:	2300      	movs	r3, #0
 8025d88:	9305      	str	r3, [sp, #20]
 8025d8a:	2301      	movs	r3, #1
 8025d8c:	e77c      	b.n	8025c88 <_strtod_l+0x180>
 8025d8e:	f04f 0c00 	mov.w	ip, #0
 8025d92:	f108 0202 	add.w	r2, r8, #2
 8025d96:	9217      	str	r2, [sp, #92]	; 0x5c
 8025d98:	f898 2002 	ldrb.w	r2, [r8, #2]
 8025d9c:	e785      	b.n	8025caa <_strtod_l+0x1a2>
 8025d9e:	f04f 0c01 	mov.w	ip, #1
 8025da2:	e7f6      	b.n	8025d92 <_strtod_l+0x28a>
 8025da4:	0802e810 	.word	0x0802e810
 8025da8:	0802e63c 	.word	0x0802e63c
 8025dac:	7ff00000 	.word	0x7ff00000
 8025db0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8025db2:	1c51      	adds	r1, r2, #1
 8025db4:	9117      	str	r1, [sp, #92]	; 0x5c
 8025db6:	7852      	ldrb	r2, [r2, #1]
 8025db8:	2a30      	cmp	r2, #48	; 0x30
 8025dba:	d0f9      	beq.n	8025db0 <_strtod_l+0x2a8>
 8025dbc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8025dc0:	2908      	cmp	r1, #8
 8025dc2:	f63f af79 	bhi.w	8025cb8 <_strtod_l+0x1b0>
 8025dc6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8025dca:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8025dcc:	9206      	str	r2, [sp, #24]
 8025dce:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8025dd0:	1c51      	adds	r1, r2, #1
 8025dd2:	9117      	str	r1, [sp, #92]	; 0x5c
 8025dd4:	7852      	ldrb	r2, [r2, #1]
 8025dd6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8025dda:	2e09      	cmp	r6, #9
 8025ddc:	d937      	bls.n	8025e4e <_strtod_l+0x346>
 8025dde:	9e06      	ldr	r6, [sp, #24]
 8025de0:	1b89      	subs	r1, r1, r6
 8025de2:	2908      	cmp	r1, #8
 8025de4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8025de8:	dc02      	bgt.n	8025df0 <_strtod_l+0x2e8>
 8025dea:	4576      	cmp	r6, lr
 8025dec:	bfa8      	it	ge
 8025dee:	4676      	movge	r6, lr
 8025df0:	f1bc 0f00 	cmp.w	ip, #0
 8025df4:	d000      	beq.n	8025df8 <_strtod_l+0x2f0>
 8025df6:	4276      	negs	r6, r6
 8025df8:	2d00      	cmp	r5, #0
 8025dfa:	d14d      	bne.n	8025e98 <_strtod_l+0x390>
 8025dfc:	9904      	ldr	r1, [sp, #16]
 8025dfe:	4301      	orrs	r1, r0
 8025e00:	f47f aec6 	bne.w	8025b90 <_strtod_l+0x88>
 8025e04:	2b00      	cmp	r3, #0
 8025e06:	f47f aee1 	bne.w	8025bcc <_strtod_l+0xc4>
 8025e0a:	2a69      	cmp	r2, #105	; 0x69
 8025e0c:	d027      	beq.n	8025e5e <_strtod_l+0x356>
 8025e0e:	dc24      	bgt.n	8025e5a <_strtod_l+0x352>
 8025e10:	2a49      	cmp	r2, #73	; 0x49
 8025e12:	d024      	beq.n	8025e5e <_strtod_l+0x356>
 8025e14:	2a4e      	cmp	r2, #78	; 0x4e
 8025e16:	f47f aed9 	bne.w	8025bcc <_strtod_l+0xc4>
 8025e1a:	499f      	ldr	r1, [pc, #636]	; (8026098 <_strtod_l+0x590>)
 8025e1c:	a817      	add	r0, sp, #92	; 0x5c
 8025e1e:	f002 f909 	bl	8028034 <__match>
 8025e22:	2800      	cmp	r0, #0
 8025e24:	f43f aed2 	beq.w	8025bcc <_strtod_l+0xc4>
 8025e28:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8025e2a:	781b      	ldrb	r3, [r3, #0]
 8025e2c:	2b28      	cmp	r3, #40	; 0x28
 8025e2e:	d12d      	bne.n	8025e8c <_strtod_l+0x384>
 8025e30:	499a      	ldr	r1, [pc, #616]	; (802609c <_strtod_l+0x594>)
 8025e32:	aa1a      	add	r2, sp, #104	; 0x68
 8025e34:	a817      	add	r0, sp, #92	; 0x5c
 8025e36:	f002 f911 	bl	802805c <__hexnan>
 8025e3a:	2805      	cmp	r0, #5
 8025e3c:	d126      	bne.n	8025e8c <_strtod_l+0x384>
 8025e3e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8025e40:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8025e44:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8025e48:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8025e4c:	e6a0      	b.n	8025b90 <_strtod_l+0x88>
 8025e4e:	210a      	movs	r1, #10
 8025e50:	fb01 2e0e 	mla	lr, r1, lr, r2
 8025e54:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8025e58:	e7b9      	b.n	8025dce <_strtod_l+0x2c6>
 8025e5a:	2a6e      	cmp	r2, #110	; 0x6e
 8025e5c:	e7db      	b.n	8025e16 <_strtod_l+0x30e>
 8025e5e:	4990      	ldr	r1, [pc, #576]	; (80260a0 <_strtod_l+0x598>)
 8025e60:	a817      	add	r0, sp, #92	; 0x5c
 8025e62:	f002 f8e7 	bl	8028034 <__match>
 8025e66:	2800      	cmp	r0, #0
 8025e68:	f43f aeb0 	beq.w	8025bcc <_strtod_l+0xc4>
 8025e6c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8025e6e:	498d      	ldr	r1, [pc, #564]	; (80260a4 <_strtod_l+0x59c>)
 8025e70:	3b01      	subs	r3, #1
 8025e72:	a817      	add	r0, sp, #92	; 0x5c
 8025e74:	9317      	str	r3, [sp, #92]	; 0x5c
 8025e76:	f002 f8dd 	bl	8028034 <__match>
 8025e7a:	b910      	cbnz	r0, 8025e82 <_strtod_l+0x37a>
 8025e7c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8025e7e:	3301      	adds	r3, #1
 8025e80:	9317      	str	r3, [sp, #92]	; 0x5c
 8025e82:	f8df b230 	ldr.w	fp, [pc, #560]	; 80260b4 <_strtod_l+0x5ac>
 8025e86:	f04f 0a00 	mov.w	sl, #0
 8025e8a:	e681      	b.n	8025b90 <_strtod_l+0x88>
 8025e8c:	4886      	ldr	r0, [pc, #536]	; (80260a8 <_strtod_l+0x5a0>)
 8025e8e:	f003 fbb7 	bl	8029600 <nan>
 8025e92:	ec5b ab10 	vmov	sl, fp, d0
 8025e96:	e67b      	b.n	8025b90 <_strtod_l+0x88>
 8025e98:	9b05      	ldr	r3, [sp, #20]
 8025e9a:	9807      	ldr	r0, [sp, #28]
 8025e9c:	1af3      	subs	r3, r6, r3
 8025e9e:	2f00      	cmp	r7, #0
 8025ea0:	bf08      	it	eq
 8025ea2:	462f      	moveq	r7, r5
 8025ea4:	2d10      	cmp	r5, #16
 8025ea6:	9306      	str	r3, [sp, #24]
 8025ea8:	46a8      	mov	r8, r5
 8025eaa:	bfa8      	it	ge
 8025eac:	f04f 0810 	movge.w	r8, #16
 8025eb0:	f7da fb38 	bl	8000524 <__aeabi_ui2d>
 8025eb4:	2d09      	cmp	r5, #9
 8025eb6:	4682      	mov	sl, r0
 8025eb8:	468b      	mov	fp, r1
 8025eba:	dd13      	ble.n	8025ee4 <_strtod_l+0x3dc>
 8025ebc:	4b7b      	ldr	r3, [pc, #492]	; (80260ac <_strtod_l+0x5a4>)
 8025ebe:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8025ec2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8025ec6:	f7da fba7 	bl	8000618 <__aeabi_dmul>
 8025eca:	4682      	mov	sl, r0
 8025ecc:	4648      	mov	r0, r9
 8025ece:	468b      	mov	fp, r1
 8025ed0:	f7da fb28 	bl	8000524 <__aeabi_ui2d>
 8025ed4:	4602      	mov	r2, r0
 8025ed6:	460b      	mov	r3, r1
 8025ed8:	4650      	mov	r0, sl
 8025eda:	4659      	mov	r1, fp
 8025edc:	f7da f9e6 	bl	80002ac <__adddf3>
 8025ee0:	4682      	mov	sl, r0
 8025ee2:	468b      	mov	fp, r1
 8025ee4:	2d0f      	cmp	r5, #15
 8025ee6:	dc38      	bgt.n	8025f5a <_strtod_l+0x452>
 8025ee8:	9b06      	ldr	r3, [sp, #24]
 8025eea:	2b00      	cmp	r3, #0
 8025eec:	f43f ae50 	beq.w	8025b90 <_strtod_l+0x88>
 8025ef0:	dd24      	ble.n	8025f3c <_strtod_l+0x434>
 8025ef2:	2b16      	cmp	r3, #22
 8025ef4:	dc0b      	bgt.n	8025f0e <_strtod_l+0x406>
 8025ef6:	496d      	ldr	r1, [pc, #436]	; (80260ac <_strtod_l+0x5a4>)
 8025ef8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8025efc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8025f00:	4652      	mov	r2, sl
 8025f02:	465b      	mov	r3, fp
 8025f04:	f7da fb88 	bl	8000618 <__aeabi_dmul>
 8025f08:	4682      	mov	sl, r0
 8025f0a:	468b      	mov	fp, r1
 8025f0c:	e640      	b.n	8025b90 <_strtod_l+0x88>
 8025f0e:	9a06      	ldr	r2, [sp, #24]
 8025f10:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8025f14:	4293      	cmp	r3, r2
 8025f16:	db20      	blt.n	8025f5a <_strtod_l+0x452>
 8025f18:	4c64      	ldr	r4, [pc, #400]	; (80260ac <_strtod_l+0x5a4>)
 8025f1a:	f1c5 050f 	rsb	r5, r5, #15
 8025f1e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8025f22:	4652      	mov	r2, sl
 8025f24:	465b      	mov	r3, fp
 8025f26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8025f2a:	f7da fb75 	bl	8000618 <__aeabi_dmul>
 8025f2e:	9b06      	ldr	r3, [sp, #24]
 8025f30:	1b5d      	subs	r5, r3, r5
 8025f32:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8025f36:	e9d4 2300 	ldrd	r2, r3, [r4]
 8025f3a:	e7e3      	b.n	8025f04 <_strtod_l+0x3fc>
 8025f3c:	9b06      	ldr	r3, [sp, #24]
 8025f3e:	3316      	adds	r3, #22
 8025f40:	db0b      	blt.n	8025f5a <_strtod_l+0x452>
 8025f42:	9b05      	ldr	r3, [sp, #20]
 8025f44:	1b9e      	subs	r6, r3, r6
 8025f46:	4b59      	ldr	r3, [pc, #356]	; (80260ac <_strtod_l+0x5a4>)
 8025f48:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8025f4c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8025f50:	4650      	mov	r0, sl
 8025f52:	4659      	mov	r1, fp
 8025f54:	f7da fc8a 	bl	800086c <__aeabi_ddiv>
 8025f58:	e7d6      	b.n	8025f08 <_strtod_l+0x400>
 8025f5a:	9b06      	ldr	r3, [sp, #24]
 8025f5c:	eba5 0808 	sub.w	r8, r5, r8
 8025f60:	4498      	add	r8, r3
 8025f62:	f1b8 0f00 	cmp.w	r8, #0
 8025f66:	dd74      	ble.n	8026052 <_strtod_l+0x54a>
 8025f68:	f018 030f 	ands.w	r3, r8, #15
 8025f6c:	d00a      	beq.n	8025f84 <_strtod_l+0x47c>
 8025f6e:	494f      	ldr	r1, [pc, #316]	; (80260ac <_strtod_l+0x5a4>)
 8025f70:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8025f74:	4652      	mov	r2, sl
 8025f76:	465b      	mov	r3, fp
 8025f78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8025f7c:	f7da fb4c 	bl	8000618 <__aeabi_dmul>
 8025f80:	4682      	mov	sl, r0
 8025f82:	468b      	mov	fp, r1
 8025f84:	f038 080f 	bics.w	r8, r8, #15
 8025f88:	d04f      	beq.n	802602a <_strtod_l+0x522>
 8025f8a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8025f8e:	dd22      	ble.n	8025fd6 <_strtod_l+0x4ce>
 8025f90:	2500      	movs	r5, #0
 8025f92:	462e      	mov	r6, r5
 8025f94:	9507      	str	r5, [sp, #28]
 8025f96:	9505      	str	r5, [sp, #20]
 8025f98:	2322      	movs	r3, #34	; 0x22
 8025f9a:	f8df b118 	ldr.w	fp, [pc, #280]	; 80260b4 <_strtod_l+0x5ac>
 8025f9e:	6023      	str	r3, [r4, #0]
 8025fa0:	f04f 0a00 	mov.w	sl, #0
 8025fa4:	9b07      	ldr	r3, [sp, #28]
 8025fa6:	2b00      	cmp	r3, #0
 8025fa8:	f43f adf2 	beq.w	8025b90 <_strtod_l+0x88>
 8025fac:	9918      	ldr	r1, [sp, #96]	; 0x60
 8025fae:	4620      	mov	r0, r4
 8025fb0:	f002 f9ce 	bl	8028350 <_Bfree>
 8025fb4:	9905      	ldr	r1, [sp, #20]
 8025fb6:	4620      	mov	r0, r4
 8025fb8:	f002 f9ca 	bl	8028350 <_Bfree>
 8025fbc:	4631      	mov	r1, r6
 8025fbe:	4620      	mov	r0, r4
 8025fc0:	f002 f9c6 	bl	8028350 <_Bfree>
 8025fc4:	9907      	ldr	r1, [sp, #28]
 8025fc6:	4620      	mov	r0, r4
 8025fc8:	f002 f9c2 	bl	8028350 <_Bfree>
 8025fcc:	4629      	mov	r1, r5
 8025fce:	4620      	mov	r0, r4
 8025fd0:	f002 f9be 	bl	8028350 <_Bfree>
 8025fd4:	e5dc      	b.n	8025b90 <_strtod_l+0x88>
 8025fd6:	4b36      	ldr	r3, [pc, #216]	; (80260b0 <_strtod_l+0x5a8>)
 8025fd8:	9304      	str	r3, [sp, #16]
 8025fda:	2300      	movs	r3, #0
 8025fdc:	ea4f 1828 	mov.w	r8, r8, asr #4
 8025fe0:	4650      	mov	r0, sl
 8025fe2:	4659      	mov	r1, fp
 8025fe4:	4699      	mov	r9, r3
 8025fe6:	f1b8 0f01 	cmp.w	r8, #1
 8025fea:	dc21      	bgt.n	8026030 <_strtod_l+0x528>
 8025fec:	b10b      	cbz	r3, 8025ff2 <_strtod_l+0x4ea>
 8025fee:	4682      	mov	sl, r0
 8025ff0:	468b      	mov	fp, r1
 8025ff2:	4b2f      	ldr	r3, [pc, #188]	; (80260b0 <_strtod_l+0x5a8>)
 8025ff4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8025ff8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8025ffc:	4652      	mov	r2, sl
 8025ffe:	465b      	mov	r3, fp
 8026000:	e9d9 0100 	ldrd	r0, r1, [r9]
 8026004:	f7da fb08 	bl	8000618 <__aeabi_dmul>
 8026008:	4b2a      	ldr	r3, [pc, #168]	; (80260b4 <_strtod_l+0x5ac>)
 802600a:	460a      	mov	r2, r1
 802600c:	400b      	ands	r3, r1
 802600e:	492a      	ldr	r1, [pc, #168]	; (80260b8 <_strtod_l+0x5b0>)
 8026010:	428b      	cmp	r3, r1
 8026012:	4682      	mov	sl, r0
 8026014:	d8bc      	bhi.n	8025f90 <_strtod_l+0x488>
 8026016:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 802601a:	428b      	cmp	r3, r1
 802601c:	bf86      	itte	hi
 802601e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80260bc <_strtod_l+0x5b4>
 8026022:	f04f 3aff 	movhi.w	sl, #4294967295
 8026026:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 802602a:	2300      	movs	r3, #0
 802602c:	9304      	str	r3, [sp, #16]
 802602e:	e084      	b.n	802613a <_strtod_l+0x632>
 8026030:	f018 0f01 	tst.w	r8, #1
 8026034:	d005      	beq.n	8026042 <_strtod_l+0x53a>
 8026036:	9b04      	ldr	r3, [sp, #16]
 8026038:	e9d3 2300 	ldrd	r2, r3, [r3]
 802603c:	f7da faec 	bl	8000618 <__aeabi_dmul>
 8026040:	2301      	movs	r3, #1
 8026042:	9a04      	ldr	r2, [sp, #16]
 8026044:	3208      	adds	r2, #8
 8026046:	f109 0901 	add.w	r9, r9, #1
 802604a:	ea4f 0868 	mov.w	r8, r8, asr #1
 802604e:	9204      	str	r2, [sp, #16]
 8026050:	e7c9      	b.n	8025fe6 <_strtod_l+0x4de>
 8026052:	d0ea      	beq.n	802602a <_strtod_l+0x522>
 8026054:	f1c8 0800 	rsb	r8, r8, #0
 8026058:	f018 020f 	ands.w	r2, r8, #15
 802605c:	d00a      	beq.n	8026074 <_strtod_l+0x56c>
 802605e:	4b13      	ldr	r3, [pc, #76]	; (80260ac <_strtod_l+0x5a4>)
 8026060:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8026064:	4650      	mov	r0, sl
 8026066:	4659      	mov	r1, fp
 8026068:	e9d3 2300 	ldrd	r2, r3, [r3]
 802606c:	f7da fbfe 	bl	800086c <__aeabi_ddiv>
 8026070:	4682      	mov	sl, r0
 8026072:	468b      	mov	fp, r1
 8026074:	ea5f 1828 	movs.w	r8, r8, asr #4
 8026078:	d0d7      	beq.n	802602a <_strtod_l+0x522>
 802607a:	f1b8 0f1f 	cmp.w	r8, #31
 802607e:	dd1f      	ble.n	80260c0 <_strtod_l+0x5b8>
 8026080:	2500      	movs	r5, #0
 8026082:	462e      	mov	r6, r5
 8026084:	9507      	str	r5, [sp, #28]
 8026086:	9505      	str	r5, [sp, #20]
 8026088:	2322      	movs	r3, #34	; 0x22
 802608a:	f04f 0a00 	mov.w	sl, #0
 802608e:	f04f 0b00 	mov.w	fp, #0
 8026092:	6023      	str	r3, [r4, #0]
 8026094:	e786      	b.n	8025fa4 <_strtod_l+0x49c>
 8026096:	bf00      	nop
 8026098:	0802e5a2 	.word	0x0802e5a2
 802609c:	0802e650 	.word	0x0802e650
 80260a0:	0802e59a 	.word	0x0802e59a
 80260a4:	0802e6cf 	.word	0x0802e6cf
 80260a8:	0802e6cb 	.word	0x0802e6cb
 80260ac:	0802e8a8 	.word	0x0802e8a8
 80260b0:	0802e880 	.word	0x0802e880
 80260b4:	7ff00000 	.word	0x7ff00000
 80260b8:	7ca00000 	.word	0x7ca00000
 80260bc:	7fefffff 	.word	0x7fefffff
 80260c0:	f018 0310 	ands.w	r3, r8, #16
 80260c4:	bf18      	it	ne
 80260c6:	236a      	movne	r3, #106	; 0x6a
 80260c8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8026478 <_strtod_l+0x970>
 80260cc:	9304      	str	r3, [sp, #16]
 80260ce:	4650      	mov	r0, sl
 80260d0:	4659      	mov	r1, fp
 80260d2:	2300      	movs	r3, #0
 80260d4:	f018 0f01 	tst.w	r8, #1
 80260d8:	d004      	beq.n	80260e4 <_strtod_l+0x5dc>
 80260da:	e9d9 2300 	ldrd	r2, r3, [r9]
 80260de:	f7da fa9b 	bl	8000618 <__aeabi_dmul>
 80260e2:	2301      	movs	r3, #1
 80260e4:	ea5f 0868 	movs.w	r8, r8, asr #1
 80260e8:	f109 0908 	add.w	r9, r9, #8
 80260ec:	d1f2      	bne.n	80260d4 <_strtod_l+0x5cc>
 80260ee:	b10b      	cbz	r3, 80260f4 <_strtod_l+0x5ec>
 80260f0:	4682      	mov	sl, r0
 80260f2:	468b      	mov	fp, r1
 80260f4:	9b04      	ldr	r3, [sp, #16]
 80260f6:	b1c3      	cbz	r3, 802612a <_strtod_l+0x622>
 80260f8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80260fc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8026100:	2b00      	cmp	r3, #0
 8026102:	4659      	mov	r1, fp
 8026104:	dd11      	ble.n	802612a <_strtod_l+0x622>
 8026106:	2b1f      	cmp	r3, #31
 8026108:	f340 8124 	ble.w	8026354 <_strtod_l+0x84c>
 802610c:	2b34      	cmp	r3, #52	; 0x34
 802610e:	bfde      	ittt	le
 8026110:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8026114:	f04f 33ff 	movle.w	r3, #4294967295
 8026118:	fa03 f202 	lslle.w	r2, r3, r2
 802611c:	f04f 0a00 	mov.w	sl, #0
 8026120:	bfcc      	ite	gt
 8026122:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8026126:	ea02 0b01 	andle.w	fp, r2, r1
 802612a:	2200      	movs	r2, #0
 802612c:	2300      	movs	r3, #0
 802612e:	4650      	mov	r0, sl
 8026130:	4659      	mov	r1, fp
 8026132:	f7da fcd9 	bl	8000ae8 <__aeabi_dcmpeq>
 8026136:	2800      	cmp	r0, #0
 8026138:	d1a2      	bne.n	8026080 <_strtod_l+0x578>
 802613a:	9b07      	ldr	r3, [sp, #28]
 802613c:	9300      	str	r3, [sp, #0]
 802613e:	9908      	ldr	r1, [sp, #32]
 8026140:	462b      	mov	r3, r5
 8026142:	463a      	mov	r2, r7
 8026144:	4620      	mov	r0, r4
 8026146:	f002 f96b 	bl	8028420 <__s2b>
 802614a:	9007      	str	r0, [sp, #28]
 802614c:	2800      	cmp	r0, #0
 802614e:	f43f af1f 	beq.w	8025f90 <_strtod_l+0x488>
 8026152:	9b05      	ldr	r3, [sp, #20]
 8026154:	1b9e      	subs	r6, r3, r6
 8026156:	9b06      	ldr	r3, [sp, #24]
 8026158:	2b00      	cmp	r3, #0
 802615a:	bfb4      	ite	lt
 802615c:	4633      	movlt	r3, r6
 802615e:	2300      	movge	r3, #0
 8026160:	930c      	str	r3, [sp, #48]	; 0x30
 8026162:	9b06      	ldr	r3, [sp, #24]
 8026164:	2500      	movs	r5, #0
 8026166:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802616a:	9312      	str	r3, [sp, #72]	; 0x48
 802616c:	462e      	mov	r6, r5
 802616e:	9b07      	ldr	r3, [sp, #28]
 8026170:	4620      	mov	r0, r4
 8026172:	6859      	ldr	r1, [r3, #4]
 8026174:	f002 f8ac 	bl	80282d0 <_Balloc>
 8026178:	9005      	str	r0, [sp, #20]
 802617a:	2800      	cmp	r0, #0
 802617c:	f43f af0c 	beq.w	8025f98 <_strtod_l+0x490>
 8026180:	9b07      	ldr	r3, [sp, #28]
 8026182:	691a      	ldr	r2, [r3, #16]
 8026184:	3202      	adds	r2, #2
 8026186:	f103 010c 	add.w	r1, r3, #12
 802618a:	0092      	lsls	r2, r2, #2
 802618c:	300c      	adds	r0, #12
 802618e:	f7fe fc39 	bl	8024a04 <memcpy>
 8026192:	ec4b ab10 	vmov	d0, sl, fp
 8026196:	aa1a      	add	r2, sp, #104	; 0x68
 8026198:	a919      	add	r1, sp, #100	; 0x64
 802619a:	4620      	mov	r0, r4
 802619c:	f002 fc86 	bl	8028aac <__d2b>
 80261a0:	ec4b ab18 	vmov	d8, sl, fp
 80261a4:	9018      	str	r0, [sp, #96]	; 0x60
 80261a6:	2800      	cmp	r0, #0
 80261a8:	f43f aef6 	beq.w	8025f98 <_strtod_l+0x490>
 80261ac:	2101      	movs	r1, #1
 80261ae:	4620      	mov	r0, r4
 80261b0:	f002 f9d0 	bl	8028554 <__i2b>
 80261b4:	4606      	mov	r6, r0
 80261b6:	2800      	cmp	r0, #0
 80261b8:	f43f aeee 	beq.w	8025f98 <_strtod_l+0x490>
 80261bc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80261be:	9904      	ldr	r1, [sp, #16]
 80261c0:	2b00      	cmp	r3, #0
 80261c2:	bfab      	itete	ge
 80261c4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80261c6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80261c8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80261ca:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80261ce:	bfac      	ite	ge
 80261d0:	eb03 0902 	addge.w	r9, r3, r2
 80261d4:	1ad7      	sublt	r7, r2, r3
 80261d6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80261d8:	eba3 0801 	sub.w	r8, r3, r1
 80261dc:	4490      	add	r8, r2
 80261de:	4ba1      	ldr	r3, [pc, #644]	; (8026464 <_strtod_l+0x95c>)
 80261e0:	f108 38ff 	add.w	r8, r8, #4294967295
 80261e4:	4598      	cmp	r8, r3
 80261e6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80261ea:	f280 80c7 	bge.w	802637c <_strtod_l+0x874>
 80261ee:	eba3 0308 	sub.w	r3, r3, r8
 80261f2:	2b1f      	cmp	r3, #31
 80261f4:	eba2 0203 	sub.w	r2, r2, r3
 80261f8:	f04f 0101 	mov.w	r1, #1
 80261fc:	f300 80b1 	bgt.w	8026362 <_strtod_l+0x85a>
 8026200:	fa01 f303 	lsl.w	r3, r1, r3
 8026204:	930d      	str	r3, [sp, #52]	; 0x34
 8026206:	2300      	movs	r3, #0
 8026208:	9308      	str	r3, [sp, #32]
 802620a:	eb09 0802 	add.w	r8, r9, r2
 802620e:	9b04      	ldr	r3, [sp, #16]
 8026210:	45c1      	cmp	r9, r8
 8026212:	4417      	add	r7, r2
 8026214:	441f      	add	r7, r3
 8026216:	464b      	mov	r3, r9
 8026218:	bfa8      	it	ge
 802621a:	4643      	movge	r3, r8
 802621c:	42bb      	cmp	r3, r7
 802621e:	bfa8      	it	ge
 8026220:	463b      	movge	r3, r7
 8026222:	2b00      	cmp	r3, #0
 8026224:	bfc2      	ittt	gt
 8026226:	eba8 0803 	subgt.w	r8, r8, r3
 802622a:	1aff      	subgt	r7, r7, r3
 802622c:	eba9 0903 	subgt.w	r9, r9, r3
 8026230:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8026232:	2b00      	cmp	r3, #0
 8026234:	dd17      	ble.n	8026266 <_strtod_l+0x75e>
 8026236:	4631      	mov	r1, r6
 8026238:	461a      	mov	r2, r3
 802623a:	4620      	mov	r0, r4
 802623c:	f002 fa4a 	bl	80286d4 <__pow5mult>
 8026240:	4606      	mov	r6, r0
 8026242:	2800      	cmp	r0, #0
 8026244:	f43f aea8 	beq.w	8025f98 <_strtod_l+0x490>
 8026248:	4601      	mov	r1, r0
 802624a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 802624c:	4620      	mov	r0, r4
 802624e:	f002 f997 	bl	8028580 <__multiply>
 8026252:	900b      	str	r0, [sp, #44]	; 0x2c
 8026254:	2800      	cmp	r0, #0
 8026256:	f43f ae9f 	beq.w	8025f98 <_strtod_l+0x490>
 802625a:	9918      	ldr	r1, [sp, #96]	; 0x60
 802625c:	4620      	mov	r0, r4
 802625e:	f002 f877 	bl	8028350 <_Bfree>
 8026262:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8026264:	9318      	str	r3, [sp, #96]	; 0x60
 8026266:	f1b8 0f00 	cmp.w	r8, #0
 802626a:	f300 808c 	bgt.w	8026386 <_strtod_l+0x87e>
 802626e:	9b06      	ldr	r3, [sp, #24]
 8026270:	2b00      	cmp	r3, #0
 8026272:	dd08      	ble.n	8026286 <_strtod_l+0x77e>
 8026274:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8026276:	9905      	ldr	r1, [sp, #20]
 8026278:	4620      	mov	r0, r4
 802627a:	f002 fa2b 	bl	80286d4 <__pow5mult>
 802627e:	9005      	str	r0, [sp, #20]
 8026280:	2800      	cmp	r0, #0
 8026282:	f43f ae89 	beq.w	8025f98 <_strtod_l+0x490>
 8026286:	2f00      	cmp	r7, #0
 8026288:	dd08      	ble.n	802629c <_strtod_l+0x794>
 802628a:	9905      	ldr	r1, [sp, #20]
 802628c:	463a      	mov	r2, r7
 802628e:	4620      	mov	r0, r4
 8026290:	f002 fa7a 	bl	8028788 <__lshift>
 8026294:	9005      	str	r0, [sp, #20]
 8026296:	2800      	cmp	r0, #0
 8026298:	f43f ae7e 	beq.w	8025f98 <_strtod_l+0x490>
 802629c:	f1b9 0f00 	cmp.w	r9, #0
 80262a0:	dd08      	ble.n	80262b4 <_strtod_l+0x7ac>
 80262a2:	4631      	mov	r1, r6
 80262a4:	464a      	mov	r2, r9
 80262a6:	4620      	mov	r0, r4
 80262a8:	f002 fa6e 	bl	8028788 <__lshift>
 80262ac:	4606      	mov	r6, r0
 80262ae:	2800      	cmp	r0, #0
 80262b0:	f43f ae72 	beq.w	8025f98 <_strtod_l+0x490>
 80262b4:	9a05      	ldr	r2, [sp, #20]
 80262b6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80262b8:	4620      	mov	r0, r4
 80262ba:	f002 faf1 	bl	80288a0 <__mdiff>
 80262be:	4605      	mov	r5, r0
 80262c0:	2800      	cmp	r0, #0
 80262c2:	f43f ae69 	beq.w	8025f98 <_strtod_l+0x490>
 80262c6:	68c3      	ldr	r3, [r0, #12]
 80262c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80262ca:	2300      	movs	r3, #0
 80262cc:	60c3      	str	r3, [r0, #12]
 80262ce:	4631      	mov	r1, r6
 80262d0:	f002 faca 	bl	8028868 <__mcmp>
 80262d4:	2800      	cmp	r0, #0
 80262d6:	da60      	bge.n	802639a <_strtod_l+0x892>
 80262d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80262da:	ea53 030a 	orrs.w	r3, r3, sl
 80262de:	f040 8082 	bne.w	80263e6 <_strtod_l+0x8de>
 80262e2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80262e6:	2b00      	cmp	r3, #0
 80262e8:	d17d      	bne.n	80263e6 <_strtod_l+0x8de>
 80262ea:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80262ee:	0d1b      	lsrs	r3, r3, #20
 80262f0:	051b      	lsls	r3, r3, #20
 80262f2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80262f6:	d976      	bls.n	80263e6 <_strtod_l+0x8de>
 80262f8:	696b      	ldr	r3, [r5, #20]
 80262fa:	b913      	cbnz	r3, 8026302 <_strtod_l+0x7fa>
 80262fc:	692b      	ldr	r3, [r5, #16]
 80262fe:	2b01      	cmp	r3, #1
 8026300:	dd71      	ble.n	80263e6 <_strtod_l+0x8de>
 8026302:	4629      	mov	r1, r5
 8026304:	2201      	movs	r2, #1
 8026306:	4620      	mov	r0, r4
 8026308:	f002 fa3e 	bl	8028788 <__lshift>
 802630c:	4631      	mov	r1, r6
 802630e:	4605      	mov	r5, r0
 8026310:	f002 faaa 	bl	8028868 <__mcmp>
 8026314:	2800      	cmp	r0, #0
 8026316:	dd66      	ble.n	80263e6 <_strtod_l+0x8de>
 8026318:	9904      	ldr	r1, [sp, #16]
 802631a:	4a53      	ldr	r2, [pc, #332]	; (8026468 <_strtod_l+0x960>)
 802631c:	465b      	mov	r3, fp
 802631e:	2900      	cmp	r1, #0
 8026320:	f000 8081 	beq.w	8026426 <_strtod_l+0x91e>
 8026324:	ea02 010b 	and.w	r1, r2, fp
 8026328:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 802632c:	dc7b      	bgt.n	8026426 <_strtod_l+0x91e>
 802632e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8026332:	f77f aea9 	ble.w	8026088 <_strtod_l+0x580>
 8026336:	4b4d      	ldr	r3, [pc, #308]	; (802646c <_strtod_l+0x964>)
 8026338:	4650      	mov	r0, sl
 802633a:	4659      	mov	r1, fp
 802633c:	2200      	movs	r2, #0
 802633e:	f7da f96b 	bl	8000618 <__aeabi_dmul>
 8026342:	460b      	mov	r3, r1
 8026344:	4303      	orrs	r3, r0
 8026346:	bf08      	it	eq
 8026348:	2322      	moveq	r3, #34	; 0x22
 802634a:	4682      	mov	sl, r0
 802634c:	468b      	mov	fp, r1
 802634e:	bf08      	it	eq
 8026350:	6023      	streq	r3, [r4, #0]
 8026352:	e62b      	b.n	8025fac <_strtod_l+0x4a4>
 8026354:	f04f 32ff 	mov.w	r2, #4294967295
 8026358:	fa02 f303 	lsl.w	r3, r2, r3
 802635c:	ea03 0a0a 	and.w	sl, r3, sl
 8026360:	e6e3      	b.n	802612a <_strtod_l+0x622>
 8026362:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8026366:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 802636a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 802636e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8026372:	fa01 f308 	lsl.w	r3, r1, r8
 8026376:	9308      	str	r3, [sp, #32]
 8026378:	910d      	str	r1, [sp, #52]	; 0x34
 802637a:	e746      	b.n	802620a <_strtod_l+0x702>
 802637c:	2300      	movs	r3, #0
 802637e:	9308      	str	r3, [sp, #32]
 8026380:	2301      	movs	r3, #1
 8026382:	930d      	str	r3, [sp, #52]	; 0x34
 8026384:	e741      	b.n	802620a <_strtod_l+0x702>
 8026386:	9918      	ldr	r1, [sp, #96]	; 0x60
 8026388:	4642      	mov	r2, r8
 802638a:	4620      	mov	r0, r4
 802638c:	f002 f9fc 	bl	8028788 <__lshift>
 8026390:	9018      	str	r0, [sp, #96]	; 0x60
 8026392:	2800      	cmp	r0, #0
 8026394:	f47f af6b 	bne.w	802626e <_strtod_l+0x766>
 8026398:	e5fe      	b.n	8025f98 <_strtod_l+0x490>
 802639a:	465f      	mov	r7, fp
 802639c:	d16e      	bne.n	802647c <_strtod_l+0x974>
 802639e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80263a0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80263a4:	b342      	cbz	r2, 80263f8 <_strtod_l+0x8f0>
 80263a6:	4a32      	ldr	r2, [pc, #200]	; (8026470 <_strtod_l+0x968>)
 80263a8:	4293      	cmp	r3, r2
 80263aa:	d128      	bne.n	80263fe <_strtod_l+0x8f6>
 80263ac:	9b04      	ldr	r3, [sp, #16]
 80263ae:	4651      	mov	r1, sl
 80263b0:	b1eb      	cbz	r3, 80263ee <_strtod_l+0x8e6>
 80263b2:	4b2d      	ldr	r3, [pc, #180]	; (8026468 <_strtod_l+0x960>)
 80263b4:	403b      	ands	r3, r7
 80263b6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80263ba:	f04f 32ff 	mov.w	r2, #4294967295
 80263be:	d819      	bhi.n	80263f4 <_strtod_l+0x8ec>
 80263c0:	0d1b      	lsrs	r3, r3, #20
 80263c2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80263c6:	fa02 f303 	lsl.w	r3, r2, r3
 80263ca:	4299      	cmp	r1, r3
 80263cc:	d117      	bne.n	80263fe <_strtod_l+0x8f6>
 80263ce:	4b29      	ldr	r3, [pc, #164]	; (8026474 <_strtod_l+0x96c>)
 80263d0:	429f      	cmp	r7, r3
 80263d2:	d102      	bne.n	80263da <_strtod_l+0x8d2>
 80263d4:	3101      	adds	r1, #1
 80263d6:	f43f addf 	beq.w	8025f98 <_strtod_l+0x490>
 80263da:	4b23      	ldr	r3, [pc, #140]	; (8026468 <_strtod_l+0x960>)
 80263dc:	403b      	ands	r3, r7
 80263de:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80263e2:	f04f 0a00 	mov.w	sl, #0
 80263e6:	9b04      	ldr	r3, [sp, #16]
 80263e8:	2b00      	cmp	r3, #0
 80263ea:	d1a4      	bne.n	8026336 <_strtod_l+0x82e>
 80263ec:	e5de      	b.n	8025fac <_strtod_l+0x4a4>
 80263ee:	f04f 33ff 	mov.w	r3, #4294967295
 80263f2:	e7ea      	b.n	80263ca <_strtod_l+0x8c2>
 80263f4:	4613      	mov	r3, r2
 80263f6:	e7e8      	b.n	80263ca <_strtod_l+0x8c2>
 80263f8:	ea53 030a 	orrs.w	r3, r3, sl
 80263fc:	d08c      	beq.n	8026318 <_strtod_l+0x810>
 80263fe:	9b08      	ldr	r3, [sp, #32]
 8026400:	b1db      	cbz	r3, 802643a <_strtod_l+0x932>
 8026402:	423b      	tst	r3, r7
 8026404:	d0ef      	beq.n	80263e6 <_strtod_l+0x8de>
 8026406:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8026408:	9a04      	ldr	r2, [sp, #16]
 802640a:	4650      	mov	r0, sl
 802640c:	4659      	mov	r1, fp
 802640e:	b1c3      	cbz	r3, 8026442 <_strtod_l+0x93a>
 8026410:	f7ff fb5d 	bl	8025ace <sulp>
 8026414:	4602      	mov	r2, r0
 8026416:	460b      	mov	r3, r1
 8026418:	ec51 0b18 	vmov	r0, r1, d8
 802641c:	f7d9 ff46 	bl	80002ac <__adddf3>
 8026420:	4682      	mov	sl, r0
 8026422:	468b      	mov	fp, r1
 8026424:	e7df      	b.n	80263e6 <_strtod_l+0x8de>
 8026426:	4013      	ands	r3, r2
 8026428:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 802642c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8026430:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8026434:	f04f 3aff 	mov.w	sl, #4294967295
 8026438:	e7d5      	b.n	80263e6 <_strtod_l+0x8de>
 802643a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802643c:	ea13 0f0a 	tst.w	r3, sl
 8026440:	e7e0      	b.n	8026404 <_strtod_l+0x8fc>
 8026442:	f7ff fb44 	bl	8025ace <sulp>
 8026446:	4602      	mov	r2, r0
 8026448:	460b      	mov	r3, r1
 802644a:	ec51 0b18 	vmov	r0, r1, d8
 802644e:	f7d9 ff2b 	bl	80002a8 <__aeabi_dsub>
 8026452:	2200      	movs	r2, #0
 8026454:	2300      	movs	r3, #0
 8026456:	4682      	mov	sl, r0
 8026458:	468b      	mov	fp, r1
 802645a:	f7da fb45 	bl	8000ae8 <__aeabi_dcmpeq>
 802645e:	2800      	cmp	r0, #0
 8026460:	d0c1      	beq.n	80263e6 <_strtod_l+0x8de>
 8026462:	e611      	b.n	8026088 <_strtod_l+0x580>
 8026464:	fffffc02 	.word	0xfffffc02
 8026468:	7ff00000 	.word	0x7ff00000
 802646c:	39500000 	.word	0x39500000
 8026470:	000fffff 	.word	0x000fffff
 8026474:	7fefffff 	.word	0x7fefffff
 8026478:	0802e668 	.word	0x0802e668
 802647c:	4631      	mov	r1, r6
 802647e:	4628      	mov	r0, r5
 8026480:	f002 fb70 	bl	8028b64 <__ratio>
 8026484:	ec59 8b10 	vmov	r8, r9, d0
 8026488:	ee10 0a10 	vmov	r0, s0
 802648c:	2200      	movs	r2, #0
 802648e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8026492:	4649      	mov	r1, r9
 8026494:	f7da fb3c 	bl	8000b10 <__aeabi_dcmple>
 8026498:	2800      	cmp	r0, #0
 802649a:	d07a      	beq.n	8026592 <_strtod_l+0xa8a>
 802649c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802649e:	2b00      	cmp	r3, #0
 80264a0:	d04a      	beq.n	8026538 <_strtod_l+0xa30>
 80264a2:	4b95      	ldr	r3, [pc, #596]	; (80266f8 <_strtod_l+0xbf0>)
 80264a4:	2200      	movs	r2, #0
 80264a6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80264aa:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80266f8 <_strtod_l+0xbf0>
 80264ae:	f04f 0800 	mov.w	r8, #0
 80264b2:	4b92      	ldr	r3, [pc, #584]	; (80266fc <_strtod_l+0xbf4>)
 80264b4:	403b      	ands	r3, r7
 80264b6:	930d      	str	r3, [sp, #52]	; 0x34
 80264b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80264ba:	4b91      	ldr	r3, [pc, #580]	; (8026700 <_strtod_l+0xbf8>)
 80264bc:	429a      	cmp	r2, r3
 80264be:	f040 80b0 	bne.w	8026622 <_strtod_l+0xb1a>
 80264c2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80264c6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80264ca:	ec4b ab10 	vmov	d0, sl, fp
 80264ce:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80264d2:	f002 fa6f 	bl	80289b4 <__ulp>
 80264d6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80264da:	ec53 2b10 	vmov	r2, r3, d0
 80264de:	f7da f89b 	bl	8000618 <__aeabi_dmul>
 80264e2:	4652      	mov	r2, sl
 80264e4:	465b      	mov	r3, fp
 80264e6:	f7d9 fee1 	bl	80002ac <__adddf3>
 80264ea:	460b      	mov	r3, r1
 80264ec:	4983      	ldr	r1, [pc, #524]	; (80266fc <_strtod_l+0xbf4>)
 80264ee:	4a85      	ldr	r2, [pc, #532]	; (8026704 <_strtod_l+0xbfc>)
 80264f0:	4019      	ands	r1, r3
 80264f2:	4291      	cmp	r1, r2
 80264f4:	4682      	mov	sl, r0
 80264f6:	d960      	bls.n	80265ba <_strtod_l+0xab2>
 80264f8:	ee18 3a90 	vmov	r3, s17
 80264fc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8026500:	4293      	cmp	r3, r2
 8026502:	d104      	bne.n	802650e <_strtod_l+0xa06>
 8026504:	ee18 3a10 	vmov	r3, s16
 8026508:	3301      	adds	r3, #1
 802650a:	f43f ad45 	beq.w	8025f98 <_strtod_l+0x490>
 802650e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8026710 <_strtod_l+0xc08>
 8026512:	f04f 3aff 	mov.w	sl, #4294967295
 8026516:	9918      	ldr	r1, [sp, #96]	; 0x60
 8026518:	4620      	mov	r0, r4
 802651a:	f001 ff19 	bl	8028350 <_Bfree>
 802651e:	9905      	ldr	r1, [sp, #20]
 8026520:	4620      	mov	r0, r4
 8026522:	f001 ff15 	bl	8028350 <_Bfree>
 8026526:	4631      	mov	r1, r6
 8026528:	4620      	mov	r0, r4
 802652a:	f001 ff11 	bl	8028350 <_Bfree>
 802652e:	4629      	mov	r1, r5
 8026530:	4620      	mov	r0, r4
 8026532:	f001 ff0d 	bl	8028350 <_Bfree>
 8026536:	e61a      	b.n	802616e <_strtod_l+0x666>
 8026538:	f1ba 0f00 	cmp.w	sl, #0
 802653c:	d11b      	bne.n	8026576 <_strtod_l+0xa6e>
 802653e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8026542:	b9f3      	cbnz	r3, 8026582 <_strtod_l+0xa7a>
 8026544:	4b6c      	ldr	r3, [pc, #432]	; (80266f8 <_strtod_l+0xbf0>)
 8026546:	2200      	movs	r2, #0
 8026548:	4640      	mov	r0, r8
 802654a:	4649      	mov	r1, r9
 802654c:	f7da fad6 	bl	8000afc <__aeabi_dcmplt>
 8026550:	b9d0      	cbnz	r0, 8026588 <_strtod_l+0xa80>
 8026552:	4640      	mov	r0, r8
 8026554:	4649      	mov	r1, r9
 8026556:	4b6c      	ldr	r3, [pc, #432]	; (8026708 <_strtod_l+0xc00>)
 8026558:	2200      	movs	r2, #0
 802655a:	f7da f85d 	bl	8000618 <__aeabi_dmul>
 802655e:	4680      	mov	r8, r0
 8026560:	4689      	mov	r9, r1
 8026562:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8026566:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 802656a:	9315      	str	r3, [sp, #84]	; 0x54
 802656c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8026570:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8026574:	e79d      	b.n	80264b2 <_strtod_l+0x9aa>
 8026576:	f1ba 0f01 	cmp.w	sl, #1
 802657a:	d102      	bne.n	8026582 <_strtod_l+0xa7a>
 802657c:	2f00      	cmp	r7, #0
 802657e:	f43f ad83 	beq.w	8026088 <_strtod_l+0x580>
 8026582:	4b62      	ldr	r3, [pc, #392]	; (802670c <_strtod_l+0xc04>)
 8026584:	2200      	movs	r2, #0
 8026586:	e78e      	b.n	80264a6 <_strtod_l+0x99e>
 8026588:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8026708 <_strtod_l+0xc00>
 802658c:	f04f 0800 	mov.w	r8, #0
 8026590:	e7e7      	b.n	8026562 <_strtod_l+0xa5a>
 8026592:	4b5d      	ldr	r3, [pc, #372]	; (8026708 <_strtod_l+0xc00>)
 8026594:	4640      	mov	r0, r8
 8026596:	4649      	mov	r1, r9
 8026598:	2200      	movs	r2, #0
 802659a:	f7da f83d 	bl	8000618 <__aeabi_dmul>
 802659e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80265a0:	4680      	mov	r8, r0
 80265a2:	4689      	mov	r9, r1
 80265a4:	b933      	cbnz	r3, 80265b4 <_strtod_l+0xaac>
 80265a6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80265aa:	900e      	str	r0, [sp, #56]	; 0x38
 80265ac:	930f      	str	r3, [sp, #60]	; 0x3c
 80265ae:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80265b2:	e7dd      	b.n	8026570 <_strtod_l+0xa68>
 80265b4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80265b8:	e7f9      	b.n	80265ae <_strtod_l+0xaa6>
 80265ba:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80265be:	9b04      	ldr	r3, [sp, #16]
 80265c0:	2b00      	cmp	r3, #0
 80265c2:	d1a8      	bne.n	8026516 <_strtod_l+0xa0e>
 80265c4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80265c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80265ca:	0d1b      	lsrs	r3, r3, #20
 80265cc:	051b      	lsls	r3, r3, #20
 80265ce:	429a      	cmp	r2, r3
 80265d0:	d1a1      	bne.n	8026516 <_strtod_l+0xa0e>
 80265d2:	4640      	mov	r0, r8
 80265d4:	4649      	mov	r1, r9
 80265d6:	f7da fb2f 	bl	8000c38 <__aeabi_d2lz>
 80265da:	f7d9 ffef 	bl	80005bc <__aeabi_l2d>
 80265de:	4602      	mov	r2, r0
 80265e0:	460b      	mov	r3, r1
 80265e2:	4640      	mov	r0, r8
 80265e4:	4649      	mov	r1, r9
 80265e6:	f7d9 fe5f 	bl	80002a8 <__aeabi_dsub>
 80265ea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80265ec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80265f0:	ea43 030a 	orr.w	r3, r3, sl
 80265f4:	4313      	orrs	r3, r2
 80265f6:	4680      	mov	r8, r0
 80265f8:	4689      	mov	r9, r1
 80265fa:	d055      	beq.n	80266a8 <_strtod_l+0xba0>
 80265fc:	a336      	add	r3, pc, #216	; (adr r3, 80266d8 <_strtod_l+0xbd0>)
 80265fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026602:	f7da fa7b 	bl	8000afc <__aeabi_dcmplt>
 8026606:	2800      	cmp	r0, #0
 8026608:	f47f acd0 	bne.w	8025fac <_strtod_l+0x4a4>
 802660c:	a334      	add	r3, pc, #208	; (adr r3, 80266e0 <_strtod_l+0xbd8>)
 802660e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026612:	4640      	mov	r0, r8
 8026614:	4649      	mov	r1, r9
 8026616:	f7da fa8f 	bl	8000b38 <__aeabi_dcmpgt>
 802661a:	2800      	cmp	r0, #0
 802661c:	f43f af7b 	beq.w	8026516 <_strtod_l+0xa0e>
 8026620:	e4c4      	b.n	8025fac <_strtod_l+0x4a4>
 8026622:	9b04      	ldr	r3, [sp, #16]
 8026624:	b333      	cbz	r3, 8026674 <_strtod_l+0xb6c>
 8026626:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8026628:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 802662c:	d822      	bhi.n	8026674 <_strtod_l+0xb6c>
 802662e:	a32e      	add	r3, pc, #184	; (adr r3, 80266e8 <_strtod_l+0xbe0>)
 8026630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026634:	4640      	mov	r0, r8
 8026636:	4649      	mov	r1, r9
 8026638:	f7da fa6a 	bl	8000b10 <__aeabi_dcmple>
 802663c:	b1a0      	cbz	r0, 8026668 <_strtod_l+0xb60>
 802663e:	4649      	mov	r1, r9
 8026640:	4640      	mov	r0, r8
 8026642:	f7da fac1 	bl	8000bc8 <__aeabi_d2uiz>
 8026646:	2801      	cmp	r0, #1
 8026648:	bf38      	it	cc
 802664a:	2001      	movcc	r0, #1
 802664c:	f7d9 ff6a 	bl	8000524 <__aeabi_ui2d>
 8026650:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8026652:	4680      	mov	r8, r0
 8026654:	4689      	mov	r9, r1
 8026656:	bb23      	cbnz	r3, 80266a2 <_strtod_l+0xb9a>
 8026658:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 802665c:	9010      	str	r0, [sp, #64]	; 0x40
 802665e:	9311      	str	r3, [sp, #68]	; 0x44
 8026660:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8026664:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8026668:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802666a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802666c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8026670:	1a9b      	subs	r3, r3, r2
 8026672:	9309      	str	r3, [sp, #36]	; 0x24
 8026674:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8026678:	eeb0 0a48 	vmov.f32	s0, s16
 802667c:	eef0 0a68 	vmov.f32	s1, s17
 8026680:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8026684:	f002 f996 	bl	80289b4 <__ulp>
 8026688:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 802668c:	ec53 2b10 	vmov	r2, r3, d0
 8026690:	f7d9 ffc2 	bl	8000618 <__aeabi_dmul>
 8026694:	ec53 2b18 	vmov	r2, r3, d8
 8026698:	f7d9 fe08 	bl	80002ac <__adddf3>
 802669c:	4682      	mov	sl, r0
 802669e:	468b      	mov	fp, r1
 80266a0:	e78d      	b.n	80265be <_strtod_l+0xab6>
 80266a2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80266a6:	e7db      	b.n	8026660 <_strtod_l+0xb58>
 80266a8:	a311      	add	r3, pc, #68	; (adr r3, 80266f0 <_strtod_l+0xbe8>)
 80266aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80266ae:	f7da fa25 	bl	8000afc <__aeabi_dcmplt>
 80266b2:	e7b2      	b.n	802661a <_strtod_l+0xb12>
 80266b4:	2300      	movs	r3, #0
 80266b6:	930a      	str	r3, [sp, #40]	; 0x28
 80266b8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80266ba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80266bc:	6013      	str	r3, [r2, #0]
 80266be:	f7ff ba6b 	b.w	8025b98 <_strtod_l+0x90>
 80266c2:	2a65      	cmp	r2, #101	; 0x65
 80266c4:	f43f ab5f 	beq.w	8025d86 <_strtod_l+0x27e>
 80266c8:	2a45      	cmp	r2, #69	; 0x45
 80266ca:	f43f ab5c 	beq.w	8025d86 <_strtod_l+0x27e>
 80266ce:	2301      	movs	r3, #1
 80266d0:	f7ff bb94 	b.w	8025dfc <_strtod_l+0x2f4>
 80266d4:	f3af 8000 	nop.w
 80266d8:	94a03595 	.word	0x94a03595
 80266dc:	3fdfffff 	.word	0x3fdfffff
 80266e0:	35afe535 	.word	0x35afe535
 80266e4:	3fe00000 	.word	0x3fe00000
 80266e8:	ffc00000 	.word	0xffc00000
 80266ec:	41dfffff 	.word	0x41dfffff
 80266f0:	94a03595 	.word	0x94a03595
 80266f4:	3fcfffff 	.word	0x3fcfffff
 80266f8:	3ff00000 	.word	0x3ff00000
 80266fc:	7ff00000 	.word	0x7ff00000
 8026700:	7fe00000 	.word	0x7fe00000
 8026704:	7c9fffff 	.word	0x7c9fffff
 8026708:	3fe00000 	.word	0x3fe00000
 802670c:	bff00000 	.word	0xbff00000
 8026710:	7fefffff 	.word	0x7fefffff

08026714 <strtod>:
 8026714:	460a      	mov	r2, r1
 8026716:	4601      	mov	r1, r0
 8026718:	4802      	ldr	r0, [pc, #8]	; (8026724 <strtod+0x10>)
 802671a:	4b03      	ldr	r3, [pc, #12]	; (8026728 <strtod+0x14>)
 802671c:	6800      	ldr	r0, [r0, #0]
 802671e:	f7ff b9f3 	b.w	8025b08 <_strtod_l>
 8026722:	bf00      	nop
 8026724:	10000070 	.word	0x10000070
 8026728:	100000d8 	.word	0x100000d8

0802672c <_strtol_l.constprop.0>:
 802672c:	2b01      	cmp	r3, #1
 802672e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026732:	d001      	beq.n	8026738 <_strtol_l.constprop.0+0xc>
 8026734:	2b24      	cmp	r3, #36	; 0x24
 8026736:	d906      	bls.n	8026746 <_strtol_l.constprop.0+0x1a>
 8026738:	f001 f800 	bl	802773c <__errno>
 802673c:	2316      	movs	r3, #22
 802673e:	6003      	str	r3, [r0, #0]
 8026740:	2000      	movs	r0, #0
 8026742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026746:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 802682c <_strtol_l.constprop.0+0x100>
 802674a:	460d      	mov	r5, r1
 802674c:	462e      	mov	r6, r5
 802674e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8026752:	f814 700c 	ldrb.w	r7, [r4, ip]
 8026756:	f017 0708 	ands.w	r7, r7, #8
 802675a:	d1f7      	bne.n	802674c <_strtol_l.constprop.0+0x20>
 802675c:	2c2d      	cmp	r4, #45	; 0x2d
 802675e:	d132      	bne.n	80267c6 <_strtol_l.constprop.0+0x9a>
 8026760:	782c      	ldrb	r4, [r5, #0]
 8026762:	2701      	movs	r7, #1
 8026764:	1cb5      	adds	r5, r6, #2
 8026766:	2b00      	cmp	r3, #0
 8026768:	d05b      	beq.n	8026822 <_strtol_l.constprop.0+0xf6>
 802676a:	2b10      	cmp	r3, #16
 802676c:	d109      	bne.n	8026782 <_strtol_l.constprop.0+0x56>
 802676e:	2c30      	cmp	r4, #48	; 0x30
 8026770:	d107      	bne.n	8026782 <_strtol_l.constprop.0+0x56>
 8026772:	782c      	ldrb	r4, [r5, #0]
 8026774:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8026778:	2c58      	cmp	r4, #88	; 0x58
 802677a:	d14d      	bne.n	8026818 <_strtol_l.constprop.0+0xec>
 802677c:	786c      	ldrb	r4, [r5, #1]
 802677e:	2310      	movs	r3, #16
 8026780:	3502      	adds	r5, #2
 8026782:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8026786:	f108 38ff 	add.w	r8, r8, #4294967295
 802678a:	f04f 0c00 	mov.w	ip, #0
 802678e:	fbb8 f9f3 	udiv	r9, r8, r3
 8026792:	4666      	mov	r6, ip
 8026794:	fb03 8a19 	mls	sl, r3, r9, r8
 8026798:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 802679c:	f1be 0f09 	cmp.w	lr, #9
 80267a0:	d816      	bhi.n	80267d0 <_strtol_l.constprop.0+0xa4>
 80267a2:	4674      	mov	r4, lr
 80267a4:	42a3      	cmp	r3, r4
 80267a6:	dd24      	ble.n	80267f2 <_strtol_l.constprop.0+0xc6>
 80267a8:	f1bc 0f00 	cmp.w	ip, #0
 80267ac:	db1e      	blt.n	80267ec <_strtol_l.constprop.0+0xc0>
 80267ae:	45b1      	cmp	r9, r6
 80267b0:	d31c      	bcc.n	80267ec <_strtol_l.constprop.0+0xc0>
 80267b2:	d101      	bne.n	80267b8 <_strtol_l.constprop.0+0x8c>
 80267b4:	45a2      	cmp	sl, r4
 80267b6:	db19      	blt.n	80267ec <_strtol_l.constprop.0+0xc0>
 80267b8:	fb06 4603 	mla	r6, r6, r3, r4
 80267bc:	f04f 0c01 	mov.w	ip, #1
 80267c0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80267c4:	e7e8      	b.n	8026798 <_strtol_l.constprop.0+0x6c>
 80267c6:	2c2b      	cmp	r4, #43	; 0x2b
 80267c8:	bf04      	itt	eq
 80267ca:	782c      	ldrbeq	r4, [r5, #0]
 80267cc:	1cb5      	addeq	r5, r6, #2
 80267ce:	e7ca      	b.n	8026766 <_strtol_l.constprop.0+0x3a>
 80267d0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80267d4:	f1be 0f19 	cmp.w	lr, #25
 80267d8:	d801      	bhi.n	80267de <_strtol_l.constprop.0+0xb2>
 80267da:	3c37      	subs	r4, #55	; 0x37
 80267dc:	e7e2      	b.n	80267a4 <_strtol_l.constprop.0+0x78>
 80267de:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80267e2:	f1be 0f19 	cmp.w	lr, #25
 80267e6:	d804      	bhi.n	80267f2 <_strtol_l.constprop.0+0xc6>
 80267e8:	3c57      	subs	r4, #87	; 0x57
 80267ea:	e7db      	b.n	80267a4 <_strtol_l.constprop.0+0x78>
 80267ec:	f04f 3cff 	mov.w	ip, #4294967295
 80267f0:	e7e6      	b.n	80267c0 <_strtol_l.constprop.0+0x94>
 80267f2:	f1bc 0f00 	cmp.w	ip, #0
 80267f6:	da05      	bge.n	8026804 <_strtol_l.constprop.0+0xd8>
 80267f8:	2322      	movs	r3, #34	; 0x22
 80267fa:	6003      	str	r3, [r0, #0]
 80267fc:	4646      	mov	r6, r8
 80267fe:	b942      	cbnz	r2, 8026812 <_strtol_l.constprop.0+0xe6>
 8026800:	4630      	mov	r0, r6
 8026802:	e79e      	b.n	8026742 <_strtol_l.constprop.0+0x16>
 8026804:	b107      	cbz	r7, 8026808 <_strtol_l.constprop.0+0xdc>
 8026806:	4276      	negs	r6, r6
 8026808:	2a00      	cmp	r2, #0
 802680a:	d0f9      	beq.n	8026800 <_strtol_l.constprop.0+0xd4>
 802680c:	f1bc 0f00 	cmp.w	ip, #0
 8026810:	d000      	beq.n	8026814 <_strtol_l.constprop.0+0xe8>
 8026812:	1e69      	subs	r1, r5, #1
 8026814:	6011      	str	r1, [r2, #0]
 8026816:	e7f3      	b.n	8026800 <_strtol_l.constprop.0+0xd4>
 8026818:	2430      	movs	r4, #48	; 0x30
 802681a:	2b00      	cmp	r3, #0
 802681c:	d1b1      	bne.n	8026782 <_strtol_l.constprop.0+0x56>
 802681e:	2308      	movs	r3, #8
 8026820:	e7af      	b.n	8026782 <_strtol_l.constprop.0+0x56>
 8026822:	2c30      	cmp	r4, #48	; 0x30
 8026824:	d0a5      	beq.n	8026772 <_strtol_l.constprop.0+0x46>
 8026826:	230a      	movs	r3, #10
 8026828:	e7ab      	b.n	8026782 <_strtol_l.constprop.0+0x56>
 802682a:	bf00      	nop
 802682c:	0802e47f 	.word	0x0802e47f

08026830 <_strtol_r>:
 8026830:	f7ff bf7c 	b.w	802672c <_strtol_l.constprop.0>

08026834 <strtol>:
 8026834:	4613      	mov	r3, r2
 8026836:	460a      	mov	r2, r1
 8026838:	4601      	mov	r1, r0
 802683a:	4802      	ldr	r0, [pc, #8]	; (8026844 <strtol+0x10>)
 802683c:	6800      	ldr	r0, [r0, #0]
 802683e:	f7ff bf75 	b.w	802672c <_strtol_l.constprop.0>
 8026842:	bf00      	nop
 8026844:	10000070 	.word	0x10000070

08026848 <__swbuf_r>:
 8026848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802684a:	460e      	mov	r6, r1
 802684c:	4614      	mov	r4, r2
 802684e:	4605      	mov	r5, r0
 8026850:	b118      	cbz	r0, 802685a <__swbuf_r+0x12>
 8026852:	6983      	ldr	r3, [r0, #24]
 8026854:	b90b      	cbnz	r3, 802685a <__swbuf_r+0x12>
 8026856:	f001 f891 	bl	802797c <__sinit>
 802685a:	4b21      	ldr	r3, [pc, #132]	; (80268e0 <__swbuf_r+0x98>)
 802685c:	429c      	cmp	r4, r3
 802685e:	d12b      	bne.n	80268b8 <__swbuf_r+0x70>
 8026860:	686c      	ldr	r4, [r5, #4]
 8026862:	69a3      	ldr	r3, [r4, #24]
 8026864:	60a3      	str	r3, [r4, #8]
 8026866:	89a3      	ldrh	r3, [r4, #12]
 8026868:	071a      	lsls	r2, r3, #28
 802686a:	d52f      	bpl.n	80268cc <__swbuf_r+0x84>
 802686c:	6923      	ldr	r3, [r4, #16]
 802686e:	b36b      	cbz	r3, 80268cc <__swbuf_r+0x84>
 8026870:	6923      	ldr	r3, [r4, #16]
 8026872:	6820      	ldr	r0, [r4, #0]
 8026874:	1ac0      	subs	r0, r0, r3
 8026876:	6963      	ldr	r3, [r4, #20]
 8026878:	b2f6      	uxtb	r6, r6
 802687a:	4283      	cmp	r3, r0
 802687c:	4637      	mov	r7, r6
 802687e:	dc04      	bgt.n	802688a <__swbuf_r+0x42>
 8026880:	4621      	mov	r1, r4
 8026882:	4628      	mov	r0, r5
 8026884:	f000 ffe6 	bl	8027854 <_fflush_r>
 8026888:	bb30      	cbnz	r0, 80268d8 <__swbuf_r+0x90>
 802688a:	68a3      	ldr	r3, [r4, #8]
 802688c:	3b01      	subs	r3, #1
 802688e:	60a3      	str	r3, [r4, #8]
 8026890:	6823      	ldr	r3, [r4, #0]
 8026892:	1c5a      	adds	r2, r3, #1
 8026894:	6022      	str	r2, [r4, #0]
 8026896:	701e      	strb	r6, [r3, #0]
 8026898:	6963      	ldr	r3, [r4, #20]
 802689a:	3001      	adds	r0, #1
 802689c:	4283      	cmp	r3, r0
 802689e:	d004      	beq.n	80268aa <__swbuf_r+0x62>
 80268a0:	89a3      	ldrh	r3, [r4, #12]
 80268a2:	07db      	lsls	r3, r3, #31
 80268a4:	d506      	bpl.n	80268b4 <__swbuf_r+0x6c>
 80268a6:	2e0a      	cmp	r6, #10
 80268a8:	d104      	bne.n	80268b4 <__swbuf_r+0x6c>
 80268aa:	4621      	mov	r1, r4
 80268ac:	4628      	mov	r0, r5
 80268ae:	f000 ffd1 	bl	8027854 <_fflush_r>
 80268b2:	b988      	cbnz	r0, 80268d8 <__swbuf_r+0x90>
 80268b4:	4638      	mov	r0, r7
 80268b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80268b8:	4b0a      	ldr	r3, [pc, #40]	; (80268e4 <__swbuf_r+0x9c>)
 80268ba:	429c      	cmp	r4, r3
 80268bc:	d101      	bne.n	80268c2 <__swbuf_r+0x7a>
 80268be:	68ac      	ldr	r4, [r5, #8]
 80268c0:	e7cf      	b.n	8026862 <__swbuf_r+0x1a>
 80268c2:	4b09      	ldr	r3, [pc, #36]	; (80268e8 <__swbuf_r+0xa0>)
 80268c4:	429c      	cmp	r4, r3
 80268c6:	bf08      	it	eq
 80268c8:	68ec      	ldreq	r4, [r5, #12]
 80268ca:	e7ca      	b.n	8026862 <__swbuf_r+0x1a>
 80268cc:	4621      	mov	r1, r4
 80268ce:	4628      	mov	r0, r5
 80268d0:	f000 f81e 	bl	8026910 <__swsetup_r>
 80268d4:	2800      	cmp	r0, #0
 80268d6:	d0cb      	beq.n	8026870 <__swbuf_r+0x28>
 80268d8:	f04f 37ff 	mov.w	r7, #4294967295
 80268dc:	e7ea      	b.n	80268b4 <__swbuf_r+0x6c>
 80268de:	bf00      	nop
 80268e0:	0802e768 	.word	0x0802e768
 80268e4:	0802e788 	.word	0x0802e788
 80268e8:	0802e748 	.word	0x0802e748

080268ec <_write_r>:
 80268ec:	b538      	push	{r3, r4, r5, lr}
 80268ee:	4d07      	ldr	r5, [pc, #28]	; (802690c <_write_r+0x20>)
 80268f0:	4604      	mov	r4, r0
 80268f2:	4608      	mov	r0, r1
 80268f4:	4611      	mov	r1, r2
 80268f6:	2200      	movs	r2, #0
 80268f8:	602a      	str	r2, [r5, #0]
 80268fa:	461a      	mov	r2, r3
 80268fc:	f7e3 f805 	bl	800990a <_write>
 8026900:	1c43      	adds	r3, r0, #1
 8026902:	d102      	bne.n	802690a <_write_r+0x1e>
 8026904:	682b      	ldr	r3, [r5, #0]
 8026906:	b103      	cbz	r3, 802690a <_write_r+0x1e>
 8026908:	6023      	str	r3, [r4, #0]
 802690a:	bd38      	pop	{r3, r4, r5, pc}
 802690c:	20013930 	.word	0x20013930

08026910 <__swsetup_r>:
 8026910:	4b32      	ldr	r3, [pc, #200]	; (80269dc <__swsetup_r+0xcc>)
 8026912:	b570      	push	{r4, r5, r6, lr}
 8026914:	681d      	ldr	r5, [r3, #0]
 8026916:	4606      	mov	r6, r0
 8026918:	460c      	mov	r4, r1
 802691a:	b125      	cbz	r5, 8026926 <__swsetup_r+0x16>
 802691c:	69ab      	ldr	r3, [r5, #24]
 802691e:	b913      	cbnz	r3, 8026926 <__swsetup_r+0x16>
 8026920:	4628      	mov	r0, r5
 8026922:	f001 f82b 	bl	802797c <__sinit>
 8026926:	4b2e      	ldr	r3, [pc, #184]	; (80269e0 <__swsetup_r+0xd0>)
 8026928:	429c      	cmp	r4, r3
 802692a:	d10f      	bne.n	802694c <__swsetup_r+0x3c>
 802692c:	686c      	ldr	r4, [r5, #4]
 802692e:	89a3      	ldrh	r3, [r4, #12]
 8026930:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8026934:	0719      	lsls	r1, r3, #28
 8026936:	d42c      	bmi.n	8026992 <__swsetup_r+0x82>
 8026938:	06dd      	lsls	r5, r3, #27
 802693a:	d411      	bmi.n	8026960 <__swsetup_r+0x50>
 802693c:	2309      	movs	r3, #9
 802693e:	6033      	str	r3, [r6, #0]
 8026940:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8026944:	81a3      	strh	r3, [r4, #12]
 8026946:	f04f 30ff 	mov.w	r0, #4294967295
 802694a:	e03e      	b.n	80269ca <__swsetup_r+0xba>
 802694c:	4b25      	ldr	r3, [pc, #148]	; (80269e4 <__swsetup_r+0xd4>)
 802694e:	429c      	cmp	r4, r3
 8026950:	d101      	bne.n	8026956 <__swsetup_r+0x46>
 8026952:	68ac      	ldr	r4, [r5, #8]
 8026954:	e7eb      	b.n	802692e <__swsetup_r+0x1e>
 8026956:	4b24      	ldr	r3, [pc, #144]	; (80269e8 <__swsetup_r+0xd8>)
 8026958:	429c      	cmp	r4, r3
 802695a:	bf08      	it	eq
 802695c:	68ec      	ldreq	r4, [r5, #12]
 802695e:	e7e6      	b.n	802692e <__swsetup_r+0x1e>
 8026960:	0758      	lsls	r0, r3, #29
 8026962:	d512      	bpl.n	802698a <__swsetup_r+0x7a>
 8026964:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8026966:	b141      	cbz	r1, 802697a <__swsetup_r+0x6a>
 8026968:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802696c:	4299      	cmp	r1, r3
 802696e:	d002      	beq.n	8026976 <__swsetup_r+0x66>
 8026970:	4630      	mov	r0, r6
 8026972:	f7fe f877 	bl	8024a64 <_free_r>
 8026976:	2300      	movs	r3, #0
 8026978:	6363      	str	r3, [r4, #52]	; 0x34
 802697a:	89a3      	ldrh	r3, [r4, #12]
 802697c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8026980:	81a3      	strh	r3, [r4, #12]
 8026982:	2300      	movs	r3, #0
 8026984:	6063      	str	r3, [r4, #4]
 8026986:	6923      	ldr	r3, [r4, #16]
 8026988:	6023      	str	r3, [r4, #0]
 802698a:	89a3      	ldrh	r3, [r4, #12]
 802698c:	f043 0308 	orr.w	r3, r3, #8
 8026990:	81a3      	strh	r3, [r4, #12]
 8026992:	6923      	ldr	r3, [r4, #16]
 8026994:	b94b      	cbnz	r3, 80269aa <__swsetup_r+0x9a>
 8026996:	89a3      	ldrh	r3, [r4, #12]
 8026998:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802699c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80269a0:	d003      	beq.n	80269aa <__swsetup_r+0x9a>
 80269a2:	4621      	mov	r1, r4
 80269a4:	4630      	mov	r0, r6
 80269a6:	f001 fc35 	bl	8028214 <__smakebuf_r>
 80269aa:	89a0      	ldrh	r0, [r4, #12]
 80269ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80269b0:	f010 0301 	ands.w	r3, r0, #1
 80269b4:	d00a      	beq.n	80269cc <__swsetup_r+0xbc>
 80269b6:	2300      	movs	r3, #0
 80269b8:	60a3      	str	r3, [r4, #8]
 80269ba:	6963      	ldr	r3, [r4, #20]
 80269bc:	425b      	negs	r3, r3
 80269be:	61a3      	str	r3, [r4, #24]
 80269c0:	6923      	ldr	r3, [r4, #16]
 80269c2:	b943      	cbnz	r3, 80269d6 <__swsetup_r+0xc6>
 80269c4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80269c8:	d1ba      	bne.n	8026940 <__swsetup_r+0x30>
 80269ca:	bd70      	pop	{r4, r5, r6, pc}
 80269cc:	0781      	lsls	r1, r0, #30
 80269ce:	bf58      	it	pl
 80269d0:	6963      	ldrpl	r3, [r4, #20]
 80269d2:	60a3      	str	r3, [r4, #8]
 80269d4:	e7f4      	b.n	80269c0 <__swsetup_r+0xb0>
 80269d6:	2000      	movs	r0, #0
 80269d8:	e7f7      	b.n	80269ca <__swsetup_r+0xba>
 80269da:	bf00      	nop
 80269dc:	10000070 	.word	0x10000070
 80269e0:	0802e768 	.word	0x0802e768
 80269e4:	0802e788 	.word	0x0802e788
 80269e8:	0802e748 	.word	0x0802e748

080269ec <__assert_func>:
 80269ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80269ee:	4614      	mov	r4, r2
 80269f0:	461a      	mov	r2, r3
 80269f2:	4b09      	ldr	r3, [pc, #36]	; (8026a18 <__assert_func+0x2c>)
 80269f4:	681b      	ldr	r3, [r3, #0]
 80269f6:	4605      	mov	r5, r0
 80269f8:	68d8      	ldr	r0, [r3, #12]
 80269fa:	b14c      	cbz	r4, 8026a10 <__assert_func+0x24>
 80269fc:	4b07      	ldr	r3, [pc, #28]	; (8026a1c <__assert_func+0x30>)
 80269fe:	9100      	str	r1, [sp, #0]
 8026a00:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8026a04:	4906      	ldr	r1, [pc, #24]	; (8026a20 <__assert_func+0x34>)
 8026a06:	462b      	mov	r3, r5
 8026a08:	f7fd ffa6 	bl	8024958 <fiprintf>
 8026a0c:	f002 fef3 	bl	80297f6 <abort>
 8026a10:	4b04      	ldr	r3, [pc, #16]	; (8026a24 <__assert_func+0x38>)
 8026a12:	461c      	mov	r4, r3
 8026a14:	e7f3      	b.n	80269fe <__assert_func+0x12>
 8026a16:	bf00      	nop
 8026a18:	10000070 	.word	0x10000070
 8026a1c:	0802e690 	.word	0x0802e690
 8026a20:	0802e69d 	.word	0x0802e69d
 8026a24:	0802e6cb 	.word	0x0802e6cb

08026a28 <_close_r>:
 8026a28:	b538      	push	{r3, r4, r5, lr}
 8026a2a:	4d06      	ldr	r5, [pc, #24]	; (8026a44 <_close_r+0x1c>)
 8026a2c:	2300      	movs	r3, #0
 8026a2e:	4604      	mov	r4, r0
 8026a30:	4608      	mov	r0, r1
 8026a32:	602b      	str	r3, [r5, #0]
 8026a34:	f7e3 fa4d 	bl	8009ed2 <_close>
 8026a38:	1c43      	adds	r3, r0, #1
 8026a3a:	d102      	bne.n	8026a42 <_close_r+0x1a>
 8026a3c:	682b      	ldr	r3, [r5, #0]
 8026a3e:	b103      	cbz	r3, 8026a42 <_close_r+0x1a>
 8026a40:	6023      	str	r3, [r4, #0]
 8026a42:	bd38      	pop	{r3, r4, r5, pc}
 8026a44:	20013930 	.word	0x20013930

08026a48 <quorem>:
 8026a48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026a4c:	6903      	ldr	r3, [r0, #16]
 8026a4e:	690c      	ldr	r4, [r1, #16]
 8026a50:	42a3      	cmp	r3, r4
 8026a52:	4607      	mov	r7, r0
 8026a54:	f2c0 8081 	blt.w	8026b5a <quorem+0x112>
 8026a58:	3c01      	subs	r4, #1
 8026a5a:	f101 0814 	add.w	r8, r1, #20
 8026a5e:	f100 0514 	add.w	r5, r0, #20
 8026a62:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8026a66:	9301      	str	r3, [sp, #4]
 8026a68:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8026a6c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8026a70:	3301      	adds	r3, #1
 8026a72:	429a      	cmp	r2, r3
 8026a74:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8026a78:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8026a7c:	fbb2 f6f3 	udiv	r6, r2, r3
 8026a80:	d331      	bcc.n	8026ae6 <quorem+0x9e>
 8026a82:	f04f 0e00 	mov.w	lr, #0
 8026a86:	4640      	mov	r0, r8
 8026a88:	46ac      	mov	ip, r5
 8026a8a:	46f2      	mov	sl, lr
 8026a8c:	f850 2b04 	ldr.w	r2, [r0], #4
 8026a90:	b293      	uxth	r3, r2
 8026a92:	fb06 e303 	mla	r3, r6, r3, lr
 8026a96:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8026a9a:	b29b      	uxth	r3, r3
 8026a9c:	ebaa 0303 	sub.w	r3, sl, r3
 8026aa0:	f8dc a000 	ldr.w	sl, [ip]
 8026aa4:	0c12      	lsrs	r2, r2, #16
 8026aa6:	fa13 f38a 	uxtah	r3, r3, sl
 8026aaa:	fb06 e202 	mla	r2, r6, r2, lr
 8026aae:	9300      	str	r3, [sp, #0]
 8026ab0:	9b00      	ldr	r3, [sp, #0]
 8026ab2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8026ab6:	b292      	uxth	r2, r2
 8026ab8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8026abc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8026ac0:	f8bd 3000 	ldrh.w	r3, [sp]
 8026ac4:	4581      	cmp	r9, r0
 8026ac6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8026aca:	f84c 3b04 	str.w	r3, [ip], #4
 8026ace:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8026ad2:	d2db      	bcs.n	8026a8c <quorem+0x44>
 8026ad4:	f855 300b 	ldr.w	r3, [r5, fp]
 8026ad8:	b92b      	cbnz	r3, 8026ae6 <quorem+0x9e>
 8026ada:	9b01      	ldr	r3, [sp, #4]
 8026adc:	3b04      	subs	r3, #4
 8026ade:	429d      	cmp	r5, r3
 8026ae0:	461a      	mov	r2, r3
 8026ae2:	d32e      	bcc.n	8026b42 <quorem+0xfa>
 8026ae4:	613c      	str	r4, [r7, #16]
 8026ae6:	4638      	mov	r0, r7
 8026ae8:	f001 febe 	bl	8028868 <__mcmp>
 8026aec:	2800      	cmp	r0, #0
 8026aee:	db24      	blt.n	8026b3a <quorem+0xf2>
 8026af0:	3601      	adds	r6, #1
 8026af2:	4628      	mov	r0, r5
 8026af4:	f04f 0c00 	mov.w	ip, #0
 8026af8:	f858 2b04 	ldr.w	r2, [r8], #4
 8026afc:	f8d0 e000 	ldr.w	lr, [r0]
 8026b00:	b293      	uxth	r3, r2
 8026b02:	ebac 0303 	sub.w	r3, ip, r3
 8026b06:	0c12      	lsrs	r2, r2, #16
 8026b08:	fa13 f38e 	uxtah	r3, r3, lr
 8026b0c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8026b10:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8026b14:	b29b      	uxth	r3, r3
 8026b16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8026b1a:	45c1      	cmp	r9, r8
 8026b1c:	f840 3b04 	str.w	r3, [r0], #4
 8026b20:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8026b24:	d2e8      	bcs.n	8026af8 <quorem+0xb0>
 8026b26:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8026b2a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8026b2e:	b922      	cbnz	r2, 8026b3a <quorem+0xf2>
 8026b30:	3b04      	subs	r3, #4
 8026b32:	429d      	cmp	r5, r3
 8026b34:	461a      	mov	r2, r3
 8026b36:	d30a      	bcc.n	8026b4e <quorem+0x106>
 8026b38:	613c      	str	r4, [r7, #16]
 8026b3a:	4630      	mov	r0, r6
 8026b3c:	b003      	add	sp, #12
 8026b3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026b42:	6812      	ldr	r2, [r2, #0]
 8026b44:	3b04      	subs	r3, #4
 8026b46:	2a00      	cmp	r2, #0
 8026b48:	d1cc      	bne.n	8026ae4 <quorem+0x9c>
 8026b4a:	3c01      	subs	r4, #1
 8026b4c:	e7c7      	b.n	8026ade <quorem+0x96>
 8026b4e:	6812      	ldr	r2, [r2, #0]
 8026b50:	3b04      	subs	r3, #4
 8026b52:	2a00      	cmp	r2, #0
 8026b54:	d1f0      	bne.n	8026b38 <quorem+0xf0>
 8026b56:	3c01      	subs	r4, #1
 8026b58:	e7eb      	b.n	8026b32 <quorem+0xea>
 8026b5a:	2000      	movs	r0, #0
 8026b5c:	e7ee      	b.n	8026b3c <quorem+0xf4>
	...

08026b60 <_dtoa_r>:
 8026b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026b64:	ed2d 8b04 	vpush	{d8-d9}
 8026b68:	ec57 6b10 	vmov	r6, r7, d0
 8026b6c:	b093      	sub	sp, #76	; 0x4c
 8026b6e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8026b70:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8026b74:	9106      	str	r1, [sp, #24]
 8026b76:	ee10 aa10 	vmov	sl, s0
 8026b7a:	4604      	mov	r4, r0
 8026b7c:	9209      	str	r2, [sp, #36]	; 0x24
 8026b7e:	930c      	str	r3, [sp, #48]	; 0x30
 8026b80:	46bb      	mov	fp, r7
 8026b82:	b975      	cbnz	r5, 8026ba2 <_dtoa_r+0x42>
 8026b84:	2010      	movs	r0, #16
 8026b86:	f7fd ff1d 	bl	80249c4 <malloc>
 8026b8a:	4602      	mov	r2, r0
 8026b8c:	6260      	str	r0, [r4, #36]	; 0x24
 8026b8e:	b920      	cbnz	r0, 8026b9a <_dtoa_r+0x3a>
 8026b90:	4ba7      	ldr	r3, [pc, #668]	; (8026e30 <_dtoa_r+0x2d0>)
 8026b92:	21ea      	movs	r1, #234	; 0xea
 8026b94:	48a7      	ldr	r0, [pc, #668]	; (8026e34 <_dtoa_r+0x2d4>)
 8026b96:	f7ff ff29 	bl	80269ec <__assert_func>
 8026b9a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8026b9e:	6005      	str	r5, [r0, #0]
 8026ba0:	60c5      	str	r5, [r0, #12]
 8026ba2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8026ba4:	6819      	ldr	r1, [r3, #0]
 8026ba6:	b151      	cbz	r1, 8026bbe <_dtoa_r+0x5e>
 8026ba8:	685a      	ldr	r2, [r3, #4]
 8026baa:	604a      	str	r2, [r1, #4]
 8026bac:	2301      	movs	r3, #1
 8026bae:	4093      	lsls	r3, r2
 8026bb0:	608b      	str	r3, [r1, #8]
 8026bb2:	4620      	mov	r0, r4
 8026bb4:	f001 fbcc 	bl	8028350 <_Bfree>
 8026bb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8026bba:	2200      	movs	r2, #0
 8026bbc:	601a      	str	r2, [r3, #0]
 8026bbe:	1e3b      	subs	r3, r7, #0
 8026bc0:	bfaa      	itet	ge
 8026bc2:	2300      	movge	r3, #0
 8026bc4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8026bc8:	f8c8 3000 	strge.w	r3, [r8]
 8026bcc:	4b9a      	ldr	r3, [pc, #616]	; (8026e38 <_dtoa_r+0x2d8>)
 8026bce:	bfbc      	itt	lt
 8026bd0:	2201      	movlt	r2, #1
 8026bd2:	f8c8 2000 	strlt.w	r2, [r8]
 8026bd6:	ea33 030b 	bics.w	r3, r3, fp
 8026bda:	d11b      	bne.n	8026c14 <_dtoa_r+0xb4>
 8026bdc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8026bde:	f242 730f 	movw	r3, #9999	; 0x270f
 8026be2:	6013      	str	r3, [r2, #0]
 8026be4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8026be8:	4333      	orrs	r3, r6
 8026bea:	f000 8592 	beq.w	8027712 <_dtoa_r+0xbb2>
 8026bee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8026bf0:	b963      	cbnz	r3, 8026c0c <_dtoa_r+0xac>
 8026bf2:	4b92      	ldr	r3, [pc, #584]	; (8026e3c <_dtoa_r+0x2dc>)
 8026bf4:	e022      	b.n	8026c3c <_dtoa_r+0xdc>
 8026bf6:	4b92      	ldr	r3, [pc, #584]	; (8026e40 <_dtoa_r+0x2e0>)
 8026bf8:	9301      	str	r3, [sp, #4]
 8026bfa:	3308      	adds	r3, #8
 8026bfc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8026bfe:	6013      	str	r3, [r2, #0]
 8026c00:	9801      	ldr	r0, [sp, #4]
 8026c02:	b013      	add	sp, #76	; 0x4c
 8026c04:	ecbd 8b04 	vpop	{d8-d9}
 8026c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026c0c:	4b8b      	ldr	r3, [pc, #556]	; (8026e3c <_dtoa_r+0x2dc>)
 8026c0e:	9301      	str	r3, [sp, #4]
 8026c10:	3303      	adds	r3, #3
 8026c12:	e7f3      	b.n	8026bfc <_dtoa_r+0x9c>
 8026c14:	2200      	movs	r2, #0
 8026c16:	2300      	movs	r3, #0
 8026c18:	4650      	mov	r0, sl
 8026c1a:	4659      	mov	r1, fp
 8026c1c:	f7d9 ff64 	bl	8000ae8 <__aeabi_dcmpeq>
 8026c20:	ec4b ab19 	vmov	d9, sl, fp
 8026c24:	4680      	mov	r8, r0
 8026c26:	b158      	cbz	r0, 8026c40 <_dtoa_r+0xe0>
 8026c28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8026c2a:	2301      	movs	r3, #1
 8026c2c:	6013      	str	r3, [r2, #0]
 8026c2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8026c30:	2b00      	cmp	r3, #0
 8026c32:	f000 856b 	beq.w	802770c <_dtoa_r+0xbac>
 8026c36:	4883      	ldr	r0, [pc, #524]	; (8026e44 <_dtoa_r+0x2e4>)
 8026c38:	6018      	str	r0, [r3, #0]
 8026c3a:	1e43      	subs	r3, r0, #1
 8026c3c:	9301      	str	r3, [sp, #4]
 8026c3e:	e7df      	b.n	8026c00 <_dtoa_r+0xa0>
 8026c40:	ec4b ab10 	vmov	d0, sl, fp
 8026c44:	aa10      	add	r2, sp, #64	; 0x40
 8026c46:	a911      	add	r1, sp, #68	; 0x44
 8026c48:	4620      	mov	r0, r4
 8026c4a:	f001 ff2f 	bl	8028aac <__d2b>
 8026c4e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8026c52:	ee08 0a10 	vmov	s16, r0
 8026c56:	2d00      	cmp	r5, #0
 8026c58:	f000 8084 	beq.w	8026d64 <_dtoa_r+0x204>
 8026c5c:	ee19 3a90 	vmov	r3, s19
 8026c60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8026c64:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8026c68:	4656      	mov	r6, sl
 8026c6a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8026c6e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8026c72:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8026c76:	4b74      	ldr	r3, [pc, #464]	; (8026e48 <_dtoa_r+0x2e8>)
 8026c78:	2200      	movs	r2, #0
 8026c7a:	4630      	mov	r0, r6
 8026c7c:	4639      	mov	r1, r7
 8026c7e:	f7d9 fb13 	bl	80002a8 <__aeabi_dsub>
 8026c82:	a365      	add	r3, pc, #404	; (adr r3, 8026e18 <_dtoa_r+0x2b8>)
 8026c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026c88:	f7d9 fcc6 	bl	8000618 <__aeabi_dmul>
 8026c8c:	a364      	add	r3, pc, #400	; (adr r3, 8026e20 <_dtoa_r+0x2c0>)
 8026c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026c92:	f7d9 fb0b 	bl	80002ac <__adddf3>
 8026c96:	4606      	mov	r6, r0
 8026c98:	4628      	mov	r0, r5
 8026c9a:	460f      	mov	r7, r1
 8026c9c:	f7d9 fc52 	bl	8000544 <__aeabi_i2d>
 8026ca0:	a361      	add	r3, pc, #388	; (adr r3, 8026e28 <_dtoa_r+0x2c8>)
 8026ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026ca6:	f7d9 fcb7 	bl	8000618 <__aeabi_dmul>
 8026caa:	4602      	mov	r2, r0
 8026cac:	460b      	mov	r3, r1
 8026cae:	4630      	mov	r0, r6
 8026cb0:	4639      	mov	r1, r7
 8026cb2:	f7d9 fafb 	bl	80002ac <__adddf3>
 8026cb6:	4606      	mov	r6, r0
 8026cb8:	460f      	mov	r7, r1
 8026cba:	f7d9 ff5d 	bl	8000b78 <__aeabi_d2iz>
 8026cbe:	2200      	movs	r2, #0
 8026cc0:	9000      	str	r0, [sp, #0]
 8026cc2:	2300      	movs	r3, #0
 8026cc4:	4630      	mov	r0, r6
 8026cc6:	4639      	mov	r1, r7
 8026cc8:	f7d9 ff18 	bl	8000afc <__aeabi_dcmplt>
 8026ccc:	b150      	cbz	r0, 8026ce4 <_dtoa_r+0x184>
 8026cce:	9800      	ldr	r0, [sp, #0]
 8026cd0:	f7d9 fc38 	bl	8000544 <__aeabi_i2d>
 8026cd4:	4632      	mov	r2, r6
 8026cd6:	463b      	mov	r3, r7
 8026cd8:	f7d9 ff06 	bl	8000ae8 <__aeabi_dcmpeq>
 8026cdc:	b910      	cbnz	r0, 8026ce4 <_dtoa_r+0x184>
 8026cde:	9b00      	ldr	r3, [sp, #0]
 8026ce0:	3b01      	subs	r3, #1
 8026ce2:	9300      	str	r3, [sp, #0]
 8026ce4:	9b00      	ldr	r3, [sp, #0]
 8026ce6:	2b16      	cmp	r3, #22
 8026ce8:	d85a      	bhi.n	8026da0 <_dtoa_r+0x240>
 8026cea:	9a00      	ldr	r2, [sp, #0]
 8026cec:	4b57      	ldr	r3, [pc, #348]	; (8026e4c <_dtoa_r+0x2ec>)
 8026cee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8026cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026cf6:	ec51 0b19 	vmov	r0, r1, d9
 8026cfa:	f7d9 feff 	bl	8000afc <__aeabi_dcmplt>
 8026cfe:	2800      	cmp	r0, #0
 8026d00:	d050      	beq.n	8026da4 <_dtoa_r+0x244>
 8026d02:	9b00      	ldr	r3, [sp, #0]
 8026d04:	3b01      	subs	r3, #1
 8026d06:	9300      	str	r3, [sp, #0]
 8026d08:	2300      	movs	r3, #0
 8026d0a:	930b      	str	r3, [sp, #44]	; 0x2c
 8026d0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8026d0e:	1b5d      	subs	r5, r3, r5
 8026d10:	1e6b      	subs	r3, r5, #1
 8026d12:	9305      	str	r3, [sp, #20]
 8026d14:	bf45      	ittet	mi
 8026d16:	f1c5 0301 	rsbmi	r3, r5, #1
 8026d1a:	9304      	strmi	r3, [sp, #16]
 8026d1c:	2300      	movpl	r3, #0
 8026d1e:	2300      	movmi	r3, #0
 8026d20:	bf4c      	ite	mi
 8026d22:	9305      	strmi	r3, [sp, #20]
 8026d24:	9304      	strpl	r3, [sp, #16]
 8026d26:	9b00      	ldr	r3, [sp, #0]
 8026d28:	2b00      	cmp	r3, #0
 8026d2a:	db3d      	blt.n	8026da8 <_dtoa_r+0x248>
 8026d2c:	9b05      	ldr	r3, [sp, #20]
 8026d2e:	9a00      	ldr	r2, [sp, #0]
 8026d30:	920a      	str	r2, [sp, #40]	; 0x28
 8026d32:	4413      	add	r3, r2
 8026d34:	9305      	str	r3, [sp, #20]
 8026d36:	2300      	movs	r3, #0
 8026d38:	9307      	str	r3, [sp, #28]
 8026d3a:	9b06      	ldr	r3, [sp, #24]
 8026d3c:	2b09      	cmp	r3, #9
 8026d3e:	f200 8089 	bhi.w	8026e54 <_dtoa_r+0x2f4>
 8026d42:	2b05      	cmp	r3, #5
 8026d44:	bfc4      	itt	gt
 8026d46:	3b04      	subgt	r3, #4
 8026d48:	9306      	strgt	r3, [sp, #24]
 8026d4a:	9b06      	ldr	r3, [sp, #24]
 8026d4c:	f1a3 0302 	sub.w	r3, r3, #2
 8026d50:	bfcc      	ite	gt
 8026d52:	2500      	movgt	r5, #0
 8026d54:	2501      	movle	r5, #1
 8026d56:	2b03      	cmp	r3, #3
 8026d58:	f200 8087 	bhi.w	8026e6a <_dtoa_r+0x30a>
 8026d5c:	e8df f003 	tbb	[pc, r3]
 8026d60:	59383a2d 	.word	0x59383a2d
 8026d64:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8026d68:	441d      	add	r5, r3
 8026d6a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8026d6e:	2b20      	cmp	r3, #32
 8026d70:	bfc1      	itttt	gt
 8026d72:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8026d76:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8026d7a:	fa0b f303 	lslgt.w	r3, fp, r3
 8026d7e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8026d82:	bfda      	itte	le
 8026d84:	f1c3 0320 	rsble	r3, r3, #32
 8026d88:	fa06 f003 	lslle.w	r0, r6, r3
 8026d8c:	4318      	orrgt	r0, r3
 8026d8e:	f7d9 fbc9 	bl	8000524 <__aeabi_ui2d>
 8026d92:	2301      	movs	r3, #1
 8026d94:	4606      	mov	r6, r0
 8026d96:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8026d9a:	3d01      	subs	r5, #1
 8026d9c:	930e      	str	r3, [sp, #56]	; 0x38
 8026d9e:	e76a      	b.n	8026c76 <_dtoa_r+0x116>
 8026da0:	2301      	movs	r3, #1
 8026da2:	e7b2      	b.n	8026d0a <_dtoa_r+0x1aa>
 8026da4:	900b      	str	r0, [sp, #44]	; 0x2c
 8026da6:	e7b1      	b.n	8026d0c <_dtoa_r+0x1ac>
 8026da8:	9b04      	ldr	r3, [sp, #16]
 8026daa:	9a00      	ldr	r2, [sp, #0]
 8026dac:	1a9b      	subs	r3, r3, r2
 8026dae:	9304      	str	r3, [sp, #16]
 8026db0:	4253      	negs	r3, r2
 8026db2:	9307      	str	r3, [sp, #28]
 8026db4:	2300      	movs	r3, #0
 8026db6:	930a      	str	r3, [sp, #40]	; 0x28
 8026db8:	e7bf      	b.n	8026d3a <_dtoa_r+0x1da>
 8026dba:	2300      	movs	r3, #0
 8026dbc:	9308      	str	r3, [sp, #32]
 8026dbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026dc0:	2b00      	cmp	r3, #0
 8026dc2:	dc55      	bgt.n	8026e70 <_dtoa_r+0x310>
 8026dc4:	2301      	movs	r3, #1
 8026dc6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8026dca:	461a      	mov	r2, r3
 8026dcc:	9209      	str	r2, [sp, #36]	; 0x24
 8026dce:	e00c      	b.n	8026dea <_dtoa_r+0x28a>
 8026dd0:	2301      	movs	r3, #1
 8026dd2:	e7f3      	b.n	8026dbc <_dtoa_r+0x25c>
 8026dd4:	2300      	movs	r3, #0
 8026dd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8026dd8:	9308      	str	r3, [sp, #32]
 8026dda:	9b00      	ldr	r3, [sp, #0]
 8026ddc:	4413      	add	r3, r2
 8026dde:	9302      	str	r3, [sp, #8]
 8026de0:	3301      	adds	r3, #1
 8026de2:	2b01      	cmp	r3, #1
 8026de4:	9303      	str	r3, [sp, #12]
 8026de6:	bfb8      	it	lt
 8026de8:	2301      	movlt	r3, #1
 8026dea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8026dec:	2200      	movs	r2, #0
 8026dee:	6042      	str	r2, [r0, #4]
 8026df0:	2204      	movs	r2, #4
 8026df2:	f102 0614 	add.w	r6, r2, #20
 8026df6:	429e      	cmp	r6, r3
 8026df8:	6841      	ldr	r1, [r0, #4]
 8026dfa:	d93d      	bls.n	8026e78 <_dtoa_r+0x318>
 8026dfc:	4620      	mov	r0, r4
 8026dfe:	f001 fa67 	bl	80282d0 <_Balloc>
 8026e02:	9001      	str	r0, [sp, #4]
 8026e04:	2800      	cmp	r0, #0
 8026e06:	d13b      	bne.n	8026e80 <_dtoa_r+0x320>
 8026e08:	4b11      	ldr	r3, [pc, #68]	; (8026e50 <_dtoa_r+0x2f0>)
 8026e0a:	4602      	mov	r2, r0
 8026e0c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8026e10:	e6c0      	b.n	8026b94 <_dtoa_r+0x34>
 8026e12:	2301      	movs	r3, #1
 8026e14:	e7df      	b.n	8026dd6 <_dtoa_r+0x276>
 8026e16:	bf00      	nop
 8026e18:	636f4361 	.word	0x636f4361
 8026e1c:	3fd287a7 	.word	0x3fd287a7
 8026e20:	8b60c8b3 	.word	0x8b60c8b3
 8026e24:	3fc68a28 	.word	0x3fc68a28
 8026e28:	509f79fb 	.word	0x509f79fb
 8026e2c:	3fd34413 	.word	0x3fd34413
 8026e30:	0802e5c7 	.word	0x0802e5c7
 8026e34:	0802e6d9 	.word	0x0802e6d9
 8026e38:	7ff00000 	.word	0x7ff00000
 8026e3c:	0802e6d5 	.word	0x0802e6d5
 8026e40:	0802e6cc 	.word	0x0802e6cc
 8026e44:	0802e981 	.word	0x0802e981
 8026e48:	3ff80000 	.word	0x3ff80000
 8026e4c:	0802e8a8 	.word	0x0802e8a8
 8026e50:	0802e734 	.word	0x0802e734
 8026e54:	2501      	movs	r5, #1
 8026e56:	2300      	movs	r3, #0
 8026e58:	9306      	str	r3, [sp, #24]
 8026e5a:	9508      	str	r5, [sp, #32]
 8026e5c:	f04f 33ff 	mov.w	r3, #4294967295
 8026e60:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8026e64:	2200      	movs	r2, #0
 8026e66:	2312      	movs	r3, #18
 8026e68:	e7b0      	b.n	8026dcc <_dtoa_r+0x26c>
 8026e6a:	2301      	movs	r3, #1
 8026e6c:	9308      	str	r3, [sp, #32]
 8026e6e:	e7f5      	b.n	8026e5c <_dtoa_r+0x2fc>
 8026e70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026e72:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8026e76:	e7b8      	b.n	8026dea <_dtoa_r+0x28a>
 8026e78:	3101      	adds	r1, #1
 8026e7a:	6041      	str	r1, [r0, #4]
 8026e7c:	0052      	lsls	r2, r2, #1
 8026e7e:	e7b8      	b.n	8026df2 <_dtoa_r+0x292>
 8026e80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8026e82:	9a01      	ldr	r2, [sp, #4]
 8026e84:	601a      	str	r2, [r3, #0]
 8026e86:	9b03      	ldr	r3, [sp, #12]
 8026e88:	2b0e      	cmp	r3, #14
 8026e8a:	f200 809d 	bhi.w	8026fc8 <_dtoa_r+0x468>
 8026e8e:	2d00      	cmp	r5, #0
 8026e90:	f000 809a 	beq.w	8026fc8 <_dtoa_r+0x468>
 8026e94:	9b00      	ldr	r3, [sp, #0]
 8026e96:	2b00      	cmp	r3, #0
 8026e98:	dd32      	ble.n	8026f00 <_dtoa_r+0x3a0>
 8026e9a:	4ab7      	ldr	r2, [pc, #732]	; (8027178 <_dtoa_r+0x618>)
 8026e9c:	f003 030f 	and.w	r3, r3, #15
 8026ea0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8026ea4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8026ea8:	9b00      	ldr	r3, [sp, #0]
 8026eaa:	05d8      	lsls	r0, r3, #23
 8026eac:	ea4f 1723 	mov.w	r7, r3, asr #4
 8026eb0:	d516      	bpl.n	8026ee0 <_dtoa_r+0x380>
 8026eb2:	4bb2      	ldr	r3, [pc, #712]	; (802717c <_dtoa_r+0x61c>)
 8026eb4:	ec51 0b19 	vmov	r0, r1, d9
 8026eb8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8026ebc:	f7d9 fcd6 	bl	800086c <__aeabi_ddiv>
 8026ec0:	f007 070f 	and.w	r7, r7, #15
 8026ec4:	4682      	mov	sl, r0
 8026ec6:	468b      	mov	fp, r1
 8026ec8:	2503      	movs	r5, #3
 8026eca:	4eac      	ldr	r6, [pc, #688]	; (802717c <_dtoa_r+0x61c>)
 8026ecc:	b957      	cbnz	r7, 8026ee4 <_dtoa_r+0x384>
 8026ece:	4642      	mov	r2, r8
 8026ed0:	464b      	mov	r3, r9
 8026ed2:	4650      	mov	r0, sl
 8026ed4:	4659      	mov	r1, fp
 8026ed6:	f7d9 fcc9 	bl	800086c <__aeabi_ddiv>
 8026eda:	4682      	mov	sl, r0
 8026edc:	468b      	mov	fp, r1
 8026ede:	e028      	b.n	8026f32 <_dtoa_r+0x3d2>
 8026ee0:	2502      	movs	r5, #2
 8026ee2:	e7f2      	b.n	8026eca <_dtoa_r+0x36a>
 8026ee4:	07f9      	lsls	r1, r7, #31
 8026ee6:	d508      	bpl.n	8026efa <_dtoa_r+0x39a>
 8026ee8:	4640      	mov	r0, r8
 8026eea:	4649      	mov	r1, r9
 8026eec:	e9d6 2300 	ldrd	r2, r3, [r6]
 8026ef0:	f7d9 fb92 	bl	8000618 <__aeabi_dmul>
 8026ef4:	3501      	adds	r5, #1
 8026ef6:	4680      	mov	r8, r0
 8026ef8:	4689      	mov	r9, r1
 8026efa:	107f      	asrs	r7, r7, #1
 8026efc:	3608      	adds	r6, #8
 8026efe:	e7e5      	b.n	8026ecc <_dtoa_r+0x36c>
 8026f00:	f000 809b 	beq.w	802703a <_dtoa_r+0x4da>
 8026f04:	9b00      	ldr	r3, [sp, #0]
 8026f06:	4f9d      	ldr	r7, [pc, #628]	; (802717c <_dtoa_r+0x61c>)
 8026f08:	425e      	negs	r6, r3
 8026f0a:	4b9b      	ldr	r3, [pc, #620]	; (8027178 <_dtoa_r+0x618>)
 8026f0c:	f006 020f 	and.w	r2, r6, #15
 8026f10:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8026f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026f18:	ec51 0b19 	vmov	r0, r1, d9
 8026f1c:	f7d9 fb7c 	bl	8000618 <__aeabi_dmul>
 8026f20:	1136      	asrs	r6, r6, #4
 8026f22:	4682      	mov	sl, r0
 8026f24:	468b      	mov	fp, r1
 8026f26:	2300      	movs	r3, #0
 8026f28:	2502      	movs	r5, #2
 8026f2a:	2e00      	cmp	r6, #0
 8026f2c:	d17a      	bne.n	8027024 <_dtoa_r+0x4c4>
 8026f2e:	2b00      	cmp	r3, #0
 8026f30:	d1d3      	bne.n	8026eda <_dtoa_r+0x37a>
 8026f32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8026f34:	2b00      	cmp	r3, #0
 8026f36:	f000 8082 	beq.w	802703e <_dtoa_r+0x4de>
 8026f3a:	4b91      	ldr	r3, [pc, #580]	; (8027180 <_dtoa_r+0x620>)
 8026f3c:	2200      	movs	r2, #0
 8026f3e:	4650      	mov	r0, sl
 8026f40:	4659      	mov	r1, fp
 8026f42:	f7d9 fddb 	bl	8000afc <__aeabi_dcmplt>
 8026f46:	2800      	cmp	r0, #0
 8026f48:	d079      	beq.n	802703e <_dtoa_r+0x4de>
 8026f4a:	9b03      	ldr	r3, [sp, #12]
 8026f4c:	2b00      	cmp	r3, #0
 8026f4e:	d076      	beq.n	802703e <_dtoa_r+0x4de>
 8026f50:	9b02      	ldr	r3, [sp, #8]
 8026f52:	2b00      	cmp	r3, #0
 8026f54:	dd36      	ble.n	8026fc4 <_dtoa_r+0x464>
 8026f56:	9b00      	ldr	r3, [sp, #0]
 8026f58:	4650      	mov	r0, sl
 8026f5a:	4659      	mov	r1, fp
 8026f5c:	1e5f      	subs	r7, r3, #1
 8026f5e:	2200      	movs	r2, #0
 8026f60:	4b88      	ldr	r3, [pc, #544]	; (8027184 <_dtoa_r+0x624>)
 8026f62:	f7d9 fb59 	bl	8000618 <__aeabi_dmul>
 8026f66:	9e02      	ldr	r6, [sp, #8]
 8026f68:	4682      	mov	sl, r0
 8026f6a:	468b      	mov	fp, r1
 8026f6c:	3501      	adds	r5, #1
 8026f6e:	4628      	mov	r0, r5
 8026f70:	f7d9 fae8 	bl	8000544 <__aeabi_i2d>
 8026f74:	4652      	mov	r2, sl
 8026f76:	465b      	mov	r3, fp
 8026f78:	f7d9 fb4e 	bl	8000618 <__aeabi_dmul>
 8026f7c:	4b82      	ldr	r3, [pc, #520]	; (8027188 <_dtoa_r+0x628>)
 8026f7e:	2200      	movs	r2, #0
 8026f80:	f7d9 f994 	bl	80002ac <__adddf3>
 8026f84:	46d0      	mov	r8, sl
 8026f86:	46d9      	mov	r9, fp
 8026f88:	4682      	mov	sl, r0
 8026f8a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8026f8e:	2e00      	cmp	r6, #0
 8026f90:	d158      	bne.n	8027044 <_dtoa_r+0x4e4>
 8026f92:	4b7e      	ldr	r3, [pc, #504]	; (802718c <_dtoa_r+0x62c>)
 8026f94:	2200      	movs	r2, #0
 8026f96:	4640      	mov	r0, r8
 8026f98:	4649      	mov	r1, r9
 8026f9a:	f7d9 f985 	bl	80002a8 <__aeabi_dsub>
 8026f9e:	4652      	mov	r2, sl
 8026fa0:	465b      	mov	r3, fp
 8026fa2:	4680      	mov	r8, r0
 8026fa4:	4689      	mov	r9, r1
 8026fa6:	f7d9 fdc7 	bl	8000b38 <__aeabi_dcmpgt>
 8026faa:	2800      	cmp	r0, #0
 8026fac:	f040 8295 	bne.w	80274da <_dtoa_r+0x97a>
 8026fb0:	4652      	mov	r2, sl
 8026fb2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8026fb6:	4640      	mov	r0, r8
 8026fb8:	4649      	mov	r1, r9
 8026fba:	f7d9 fd9f 	bl	8000afc <__aeabi_dcmplt>
 8026fbe:	2800      	cmp	r0, #0
 8026fc0:	f040 8289 	bne.w	80274d6 <_dtoa_r+0x976>
 8026fc4:	ec5b ab19 	vmov	sl, fp, d9
 8026fc8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8026fca:	2b00      	cmp	r3, #0
 8026fcc:	f2c0 8148 	blt.w	8027260 <_dtoa_r+0x700>
 8026fd0:	9a00      	ldr	r2, [sp, #0]
 8026fd2:	2a0e      	cmp	r2, #14
 8026fd4:	f300 8144 	bgt.w	8027260 <_dtoa_r+0x700>
 8026fd8:	4b67      	ldr	r3, [pc, #412]	; (8027178 <_dtoa_r+0x618>)
 8026fda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8026fde:	e9d3 8900 	ldrd	r8, r9, [r3]
 8026fe2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026fe4:	2b00      	cmp	r3, #0
 8026fe6:	f280 80d5 	bge.w	8027194 <_dtoa_r+0x634>
 8026fea:	9b03      	ldr	r3, [sp, #12]
 8026fec:	2b00      	cmp	r3, #0
 8026fee:	f300 80d1 	bgt.w	8027194 <_dtoa_r+0x634>
 8026ff2:	f040 826f 	bne.w	80274d4 <_dtoa_r+0x974>
 8026ff6:	4b65      	ldr	r3, [pc, #404]	; (802718c <_dtoa_r+0x62c>)
 8026ff8:	2200      	movs	r2, #0
 8026ffa:	4640      	mov	r0, r8
 8026ffc:	4649      	mov	r1, r9
 8026ffe:	f7d9 fb0b 	bl	8000618 <__aeabi_dmul>
 8027002:	4652      	mov	r2, sl
 8027004:	465b      	mov	r3, fp
 8027006:	f7d9 fd8d 	bl	8000b24 <__aeabi_dcmpge>
 802700a:	9e03      	ldr	r6, [sp, #12]
 802700c:	4637      	mov	r7, r6
 802700e:	2800      	cmp	r0, #0
 8027010:	f040 8245 	bne.w	802749e <_dtoa_r+0x93e>
 8027014:	9d01      	ldr	r5, [sp, #4]
 8027016:	2331      	movs	r3, #49	; 0x31
 8027018:	f805 3b01 	strb.w	r3, [r5], #1
 802701c:	9b00      	ldr	r3, [sp, #0]
 802701e:	3301      	adds	r3, #1
 8027020:	9300      	str	r3, [sp, #0]
 8027022:	e240      	b.n	80274a6 <_dtoa_r+0x946>
 8027024:	07f2      	lsls	r2, r6, #31
 8027026:	d505      	bpl.n	8027034 <_dtoa_r+0x4d4>
 8027028:	e9d7 2300 	ldrd	r2, r3, [r7]
 802702c:	f7d9 faf4 	bl	8000618 <__aeabi_dmul>
 8027030:	3501      	adds	r5, #1
 8027032:	2301      	movs	r3, #1
 8027034:	1076      	asrs	r6, r6, #1
 8027036:	3708      	adds	r7, #8
 8027038:	e777      	b.n	8026f2a <_dtoa_r+0x3ca>
 802703a:	2502      	movs	r5, #2
 802703c:	e779      	b.n	8026f32 <_dtoa_r+0x3d2>
 802703e:	9f00      	ldr	r7, [sp, #0]
 8027040:	9e03      	ldr	r6, [sp, #12]
 8027042:	e794      	b.n	8026f6e <_dtoa_r+0x40e>
 8027044:	9901      	ldr	r1, [sp, #4]
 8027046:	4b4c      	ldr	r3, [pc, #304]	; (8027178 <_dtoa_r+0x618>)
 8027048:	4431      	add	r1, r6
 802704a:	910d      	str	r1, [sp, #52]	; 0x34
 802704c:	9908      	ldr	r1, [sp, #32]
 802704e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8027052:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8027056:	2900      	cmp	r1, #0
 8027058:	d043      	beq.n	80270e2 <_dtoa_r+0x582>
 802705a:	494d      	ldr	r1, [pc, #308]	; (8027190 <_dtoa_r+0x630>)
 802705c:	2000      	movs	r0, #0
 802705e:	f7d9 fc05 	bl	800086c <__aeabi_ddiv>
 8027062:	4652      	mov	r2, sl
 8027064:	465b      	mov	r3, fp
 8027066:	f7d9 f91f 	bl	80002a8 <__aeabi_dsub>
 802706a:	9d01      	ldr	r5, [sp, #4]
 802706c:	4682      	mov	sl, r0
 802706e:	468b      	mov	fp, r1
 8027070:	4649      	mov	r1, r9
 8027072:	4640      	mov	r0, r8
 8027074:	f7d9 fd80 	bl	8000b78 <__aeabi_d2iz>
 8027078:	4606      	mov	r6, r0
 802707a:	f7d9 fa63 	bl	8000544 <__aeabi_i2d>
 802707e:	4602      	mov	r2, r0
 8027080:	460b      	mov	r3, r1
 8027082:	4640      	mov	r0, r8
 8027084:	4649      	mov	r1, r9
 8027086:	f7d9 f90f 	bl	80002a8 <__aeabi_dsub>
 802708a:	3630      	adds	r6, #48	; 0x30
 802708c:	f805 6b01 	strb.w	r6, [r5], #1
 8027090:	4652      	mov	r2, sl
 8027092:	465b      	mov	r3, fp
 8027094:	4680      	mov	r8, r0
 8027096:	4689      	mov	r9, r1
 8027098:	f7d9 fd30 	bl	8000afc <__aeabi_dcmplt>
 802709c:	2800      	cmp	r0, #0
 802709e:	d163      	bne.n	8027168 <_dtoa_r+0x608>
 80270a0:	4642      	mov	r2, r8
 80270a2:	464b      	mov	r3, r9
 80270a4:	4936      	ldr	r1, [pc, #216]	; (8027180 <_dtoa_r+0x620>)
 80270a6:	2000      	movs	r0, #0
 80270a8:	f7d9 f8fe 	bl	80002a8 <__aeabi_dsub>
 80270ac:	4652      	mov	r2, sl
 80270ae:	465b      	mov	r3, fp
 80270b0:	f7d9 fd24 	bl	8000afc <__aeabi_dcmplt>
 80270b4:	2800      	cmp	r0, #0
 80270b6:	f040 80b5 	bne.w	8027224 <_dtoa_r+0x6c4>
 80270ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80270bc:	429d      	cmp	r5, r3
 80270be:	d081      	beq.n	8026fc4 <_dtoa_r+0x464>
 80270c0:	4b30      	ldr	r3, [pc, #192]	; (8027184 <_dtoa_r+0x624>)
 80270c2:	2200      	movs	r2, #0
 80270c4:	4650      	mov	r0, sl
 80270c6:	4659      	mov	r1, fp
 80270c8:	f7d9 faa6 	bl	8000618 <__aeabi_dmul>
 80270cc:	4b2d      	ldr	r3, [pc, #180]	; (8027184 <_dtoa_r+0x624>)
 80270ce:	4682      	mov	sl, r0
 80270d0:	468b      	mov	fp, r1
 80270d2:	4640      	mov	r0, r8
 80270d4:	4649      	mov	r1, r9
 80270d6:	2200      	movs	r2, #0
 80270d8:	f7d9 fa9e 	bl	8000618 <__aeabi_dmul>
 80270dc:	4680      	mov	r8, r0
 80270de:	4689      	mov	r9, r1
 80270e0:	e7c6      	b.n	8027070 <_dtoa_r+0x510>
 80270e2:	4650      	mov	r0, sl
 80270e4:	4659      	mov	r1, fp
 80270e6:	f7d9 fa97 	bl	8000618 <__aeabi_dmul>
 80270ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80270ec:	9d01      	ldr	r5, [sp, #4]
 80270ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80270f0:	4682      	mov	sl, r0
 80270f2:	468b      	mov	fp, r1
 80270f4:	4649      	mov	r1, r9
 80270f6:	4640      	mov	r0, r8
 80270f8:	f7d9 fd3e 	bl	8000b78 <__aeabi_d2iz>
 80270fc:	4606      	mov	r6, r0
 80270fe:	f7d9 fa21 	bl	8000544 <__aeabi_i2d>
 8027102:	3630      	adds	r6, #48	; 0x30
 8027104:	4602      	mov	r2, r0
 8027106:	460b      	mov	r3, r1
 8027108:	4640      	mov	r0, r8
 802710a:	4649      	mov	r1, r9
 802710c:	f7d9 f8cc 	bl	80002a8 <__aeabi_dsub>
 8027110:	f805 6b01 	strb.w	r6, [r5], #1
 8027114:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8027116:	429d      	cmp	r5, r3
 8027118:	4680      	mov	r8, r0
 802711a:	4689      	mov	r9, r1
 802711c:	f04f 0200 	mov.w	r2, #0
 8027120:	d124      	bne.n	802716c <_dtoa_r+0x60c>
 8027122:	4b1b      	ldr	r3, [pc, #108]	; (8027190 <_dtoa_r+0x630>)
 8027124:	4650      	mov	r0, sl
 8027126:	4659      	mov	r1, fp
 8027128:	f7d9 f8c0 	bl	80002ac <__adddf3>
 802712c:	4602      	mov	r2, r0
 802712e:	460b      	mov	r3, r1
 8027130:	4640      	mov	r0, r8
 8027132:	4649      	mov	r1, r9
 8027134:	f7d9 fd00 	bl	8000b38 <__aeabi_dcmpgt>
 8027138:	2800      	cmp	r0, #0
 802713a:	d173      	bne.n	8027224 <_dtoa_r+0x6c4>
 802713c:	4652      	mov	r2, sl
 802713e:	465b      	mov	r3, fp
 8027140:	4913      	ldr	r1, [pc, #76]	; (8027190 <_dtoa_r+0x630>)
 8027142:	2000      	movs	r0, #0
 8027144:	f7d9 f8b0 	bl	80002a8 <__aeabi_dsub>
 8027148:	4602      	mov	r2, r0
 802714a:	460b      	mov	r3, r1
 802714c:	4640      	mov	r0, r8
 802714e:	4649      	mov	r1, r9
 8027150:	f7d9 fcd4 	bl	8000afc <__aeabi_dcmplt>
 8027154:	2800      	cmp	r0, #0
 8027156:	f43f af35 	beq.w	8026fc4 <_dtoa_r+0x464>
 802715a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802715c:	1e6b      	subs	r3, r5, #1
 802715e:	930f      	str	r3, [sp, #60]	; 0x3c
 8027160:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8027164:	2b30      	cmp	r3, #48	; 0x30
 8027166:	d0f8      	beq.n	802715a <_dtoa_r+0x5fa>
 8027168:	9700      	str	r7, [sp, #0]
 802716a:	e049      	b.n	8027200 <_dtoa_r+0x6a0>
 802716c:	4b05      	ldr	r3, [pc, #20]	; (8027184 <_dtoa_r+0x624>)
 802716e:	f7d9 fa53 	bl	8000618 <__aeabi_dmul>
 8027172:	4680      	mov	r8, r0
 8027174:	4689      	mov	r9, r1
 8027176:	e7bd      	b.n	80270f4 <_dtoa_r+0x594>
 8027178:	0802e8a8 	.word	0x0802e8a8
 802717c:	0802e880 	.word	0x0802e880
 8027180:	3ff00000 	.word	0x3ff00000
 8027184:	40240000 	.word	0x40240000
 8027188:	401c0000 	.word	0x401c0000
 802718c:	40140000 	.word	0x40140000
 8027190:	3fe00000 	.word	0x3fe00000
 8027194:	9d01      	ldr	r5, [sp, #4]
 8027196:	4656      	mov	r6, sl
 8027198:	465f      	mov	r7, fp
 802719a:	4642      	mov	r2, r8
 802719c:	464b      	mov	r3, r9
 802719e:	4630      	mov	r0, r6
 80271a0:	4639      	mov	r1, r7
 80271a2:	f7d9 fb63 	bl	800086c <__aeabi_ddiv>
 80271a6:	f7d9 fce7 	bl	8000b78 <__aeabi_d2iz>
 80271aa:	4682      	mov	sl, r0
 80271ac:	f7d9 f9ca 	bl	8000544 <__aeabi_i2d>
 80271b0:	4642      	mov	r2, r8
 80271b2:	464b      	mov	r3, r9
 80271b4:	f7d9 fa30 	bl	8000618 <__aeabi_dmul>
 80271b8:	4602      	mov	r2, r0
 80271ba:	460b      	mov	r3, r1
 80271bc:	4630      	mov	r0, r6
 80271be:	4639      	mov	r1, r7
 80271c0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80271c4:	f7d9 f870 	bl	80002a8 <__aeabi_dsub>
 80271c8:	f805 6b01 	strb.w	r6, [r5], #1
 80271cc:	9e01      	ldr	r6, [sp, #4]
 80271ce:	9f03      	ldr	r7, [sp, #12]
 80271d0:	1bae      	subs	r6, r5, r6
 80271d2:	42b7      	cmp	r7, r6
 80271d4:	4602      	mov	r2, r0
 80271d6:	460b      	mov	r3, r1
 80271d8:	d135      	bne.n	8027246 <_dtoa_r+0x6e6>
 80271da:	f7d9 f867 	bl	80002ac <__adddf3>
 80271de:	4642      	mov	r2, r8
 80271e0:	464b      	mov	r3, r9
 80271e2:	4606      	mov	r6, r0
 80271e4:	460f      	mov	r7, r1
 80271e6:	f7d9 fca7 	bl	8000b38 <__aeabi_dcmpgt>
 80271ea:	b9d0      	cbnz	r0, 8027222 <_dtoa_r+0x6c2>
 80271ec:	4642      	mov	r2, r8
 80271ee:	464b      	mov	r3, r9
 80271f0:	4630      	mov	r0, r6
 80271f2:	4639      	mov	r1, r7
 80271f4:	f7d9 fc78 	bl	8000ae8 <__aeabi_dcmpeq>
 80271f8:	b110      	cbz	r0, 8027200 <_dtoa_r+0x6a0>
 80271fa:	f01a 0f01 	tst.w	sl, #1
 80271fe:	d110      	bne.n	8027222 <_dtoa_r+0x6c2>
 8027200:	4620      	mov	r0, r4
 8027202:	ee18 1a10 	vmov	r1, s16
 8027206:	f001 f8a3 	bl	8028350 <_Bfree>
 802720a:	2300      	movs	r3, #0
 802720c:	9800      	ldr	r0, [sp, #0]
 802720e:	702b      	strb	r3, [r5, #0]
 8027210:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8027212:	3001      	adds	r0, #1
 8027214:	6018      	str	r0, [r3, #0]
 8027216:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8027218:	2b00      	cmp	r3, #0
 802721a:	f43f acf1 	beq.w	8026c00 <_dtoa_r+0xa0>
 802721e:	601d      	str	r5, [r3, #0]
 8027220:	e4ee      	b.n	8026c00 <_dtoa_r+0xa0>
 8027222:	9f00      	ldr	r7, [sp, #0]
 8027224:	462b      	mov	r3, r5
 8027226:	461d      	mov	r5, r3
 8027228:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802722c:	2a39      	cmp	r2, #57	; 0x39
 802722e:	d106      	bne.n	802723e <_dtoa_r+0x6de>
 8027230:	9a01      	ldr	r2, [sp, #4]
 8027232:	429a      	cmp	r2, r3
 8027234:	d1f7      	bne.n	8027226 <_dtoa_r+0x6c6>
 8027236:	9901      	ldr	r1, [sp, #4]
 8027238:	2230      	movs	r2, #48	; 0x30
 802723a:	3701      	adds	r7, #1
 802723c:	700a      	strb	r2, [r1, #0]
 802723e:	781a      	ldrb	r2, [r3, #0]
 8027240:	3201      	adds	r2, #1
 8027242:	701a      	strb	r2, [r3, #0]
 8027244:	e790      	b.n	8027168 <_dtoa_r+0x608>
 8027246:	4ba6      	ldr	r3, [pc, #664]	; (80274e0 <_dtoa_r+0x980>)
 8027248:	2200      	movs	r2, #0
 802724a:	f7d9 f9e5 	bl	8000618 <__aeabi_dmul>
 802724e:	2200      	movs	r2, #0
 8027250:	2300      	movs	r3, #0
 8027252:	4606      	mov	r6, r0
 8027254:	460f      	mov	r7, r1
 8027256:	f7d9 fc47 	bl	8000ae8 <__aeabi_dcmpeq>
 802725a:	2800      	cmp	r0, #0
 802725c:	d09d      	beq.n	802719a <_dtoa_r+0x63a>
 802725e:	e7cf      	b.n	8027200 <_dtoa_r+0x6a0>
 8027260:	9a08      	ldr	r2, [sp, #32]
 8027262:	2a00      	cmp	r2, #0
 8027264:	f000 80d7 	beq.w	8027416 <_dtoa_r+0x8b6>
 8027268:	9a06      	ldr	r2, [sp, #24]
 802726a:	2a01      	cmp	r2, #1
 802726c:	f300 80ba 	bgt.w	80273e4 <_dtoa_r+0x884>
 8027270:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8027272:	2a00      	cmp	r2, #0
 8027274:	f000 80b2 	beq.w	80273dc <_dtoa_r+0x87c>
 8027278:	f203 4333 	addw	r3, r3, #1075	; 0x433
 802727c:	9e07      	ldr	r6, [sp, #28]
 802727e:	9d04      	ldr	r5, [sp, #16]
 8027280:	9a04      	ldr	r2, [sp, #16]
 8027282:	441a      	add	r2, r3
 8027284:	9204      	str	r2, [sp, #16]
 8027286:	9a05      	ldr	r2, [sp, #20]
 8027288:	2101      	movs	r1, #1
 802728a:	441a      	add	r2, r3
 802728c:	4620      	mov	r0, r4
 802728e:	9205      	str	r2, [sp, #20]
 8027290:	f001 f960 	bl	8028554 <__i2b>
 8027294:	4607      	mov	r7, r0
 8027296:	2d00      	cmp	r5, #0
 8027298:	dd0c      	ble.n	80272b4 <_dtoa_r+0x754>
 802729a:	9b05      	ldr	r3, [sp, #20]
 802729c:	2b00      	cmp	r3, #0
 802729e:	dd09      	ble.n	80272b4 <_dtoa_r+0x754>
 80272a0:	42ab      	cmp	r3, r5
 80272a2:	9a04      	ldr	r2, [sp, #16]
 80272a4:	bfa8      	it	ge
 80272a6:	462b      	movge	r3, r5
 80272a8:	1ad2      	subs	r2, r2, r3
 80272aa:	9204      	str	r2, [sp, #16]
 80272ac:	9a05      	ldr	r2, [sp, #20]
 80272ae:	1aed      	subs	r5, r5, r3
 80272b0:	1ad3      	subs	r3, r2, r3
 80272b2:	9305      	str	r3, [sp, #20]
 80272b4:	9b07      	ldr	r3, [sp, #28]
 80272b6:	b31b      	cbz	r3, 8027300 <_dtoa_r+0x7a0>
 80272b8:	9b08      	ldr	r3, [sp, #32]
 80272ba:	2b00      	cmp	r3, #0
 80272bc:	f000 80af 	beq.w	802741e <_dtoa_r+0x8be>
 80272c0:	2e00      	cmp	r6, #0
 80272c2:	dd13      	ble.n	80272ec <_dtoa_r+0x78c>
 80272c4:	4639      	mov	r1, r7
 80272c6:	4632      	mov	r2, r6
 80272c8:	4620      	mov	r0, r4
 80272ca:	f001 fa03 	bl	80286d4 <__pow5mult>
 80272ce:	ee18 2a10 	vmov	r2, s16
 80272d2:	4601      	mov	r1, r0
 80272d4:	4607      	mov	r7, r0
 80272d6:	4620      	mov	r0, r4
 80272d8:	f001 f952 	bl	8028580 <__multiply>
 80272dc:	ee18 1a10 	vmov	r1, s16
 80272e0:	4680      	mov	r8, r0
 80272e2:	4620      	mov	r0, r4
 80272e4:	f001 f834 	bl	8028350 <_Bfree>
 80272e8:	ee08 8a10 	vmov	s16, r8
 80272ec:	9b07      	ldr	r3, [sp, #28]
 80272ee:	1b9a      	subs	r2, r3, r6
 80272f0:	d006      	beq.n	8027300 <_dtoa_r+0x7a0>
 80272f2:	ee18 1a10 	vmov	r1, s16
 80272f6:	4620      	mov	r0, r4
 80272f8:	f001 f9ec 	bl	80286d4 <__pow5mult>
 80272fc:	ee08 0a10 	vmov	s16, r0
 8027300:	2101      	movs	r1, #1
 8027302:	4620      	mov	r0, r4
 8027304:	f001 f926 	bl	8028554 <__i2b>
 8027308:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802730a:	2b00      	cmp	r3, #0
 802730c:	4606      	mov	r6, r0
 802730e:	f340 8088 	ble.w	8027422 <_dtoa_r+0x8c2>
 8027312:	461a      	mov	r2, r3
 8027314:	4601      	mov	r1, r0
 8027316:	4620      	mov	r0, r4
 8027318:	f001 f9dc 	bl	80286d4 <__pow5mult>
 802731c:	9b06      	ldr	r3, [sp, #24]
 802731e:	2b01      	cmp	r3, #1
 8027320:	4606      	mov	r6, r0
 8027322:	f340 8081 	ble.w	8027428 <_dtoa_r+0x8c8>
 8027326:	f04f 0800 	mov.w	r8, #0
 802732a:	6933      	ldr	r3, [r6, #16]
 802732c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8027330:	6918      	ldr	r0, [r3, #16]
 8027332:	f001 f8bf 	bl	80284b4 <__hi0bits>
 8027336:	f1c0 0020 	rsb	r0, r0, #32
 802733a:	9b05      	ldr	r3, [sp, #20]
 802733c:	4418      	add	r0, r3
 802733e:	f010 001f 	ands.w	r0, r0, #31
 8027342:	f000 8092 	beq.w	802746a <_dtoa_r+0x90a>
 8027346:	f1c0 0320 	rsb	r3, r0, #32
 802734a:	2b04      	cmp	r3, #4
 802734c:	f340 808a 	ble.w	8027464 <_dtoa_r+0x904>
 8027350:	f1c0 001c 	rsb	r0, r0, #28
 8027354:	9b04      	ldr	r3, [sp, #16]
 8027356:	4403      	add	r3, r0
 8027358:	9304      	str	r3, [sp, #16]
 802735a:	9b05      	ldr	r3, [sp, #20]
 802735c:	4403      	add	r3, r0
 802735e:	4405      	add	r5, r0
 8027360:	9305      	str	r3, [sp, #20]
 8027362:	9b04      	ldr	r3, [sp, #16]
 8027364:	2b00      	cmp	r3, #0
 8027366:	dd07      	ble.n	8027378 <_dtoa_r+0x818>
 8027368:	ee18 1a10 	vmov	r1, s16
 802736c:	461a      	mov	r2, r3
 802736e:	4620      	mov	r0, r4
 8027370:	f001 fa0a 	bl	8028788 <__lshift>
 8027374:	ee08 0a10 	vmov	s16, r0
 8027378:	9b05      	ldr	r3, [sp, #20]
 802737a:	2b00      	cmp	r3, #0
 802737c:	dd05      	ble.n	802738a <_dtoa_r+0x82a>
 802737e:	4631      	mov	r1, r6
 8027380:	461a      	mov	r2, r3
 8027382:	4620      	mov	r0, r4
 8027384:	f001 fa00 	bl	8028788 <__lshift>
 8027388:	4606      	mov	r6, r0
 802738a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802738c:	2b00      	cmp	r3, #0
 802738e:	d06e      	beq.n	802746e <_dtoa_r+0x90e>
 8027390:	ee18 0a10 	vmov	r0, s16
 8027394:	4631      	mov	r1, r6
 8027396:	f001 fa67 	bl	8028868 <__mcmp>
 802739a:	2800      	cmp	r0, #0
 802739c:	da67      	bge.n	802746e <_dtoa_r+0x90e>
 802739e:	9b00      	ldr	r3, [sp, #0]
 80273a0:	3b01      	subs	r3, #1
 80273a2:	ee18 1a10 	vmov	r1, s16
 80273a6:	9300      	str	r3, [sp, #0]
 80273a8:	220a      	movs	r2, #10
 80273aa:	2300      	movs	r3, #0
 80273ac:	4620      	mov	r0, r4
 80273ae:	f000 fff1 	bl	8028394 <__multadd>
 80273b2:	9b08      	ldr	r3, [sp, #32]
 80273b4:	ee08 0a10 	vmov	s16, r0
 80273b8:	2b00      	cmp	r3, #0
 80273ba:	f000 81b1 	beq.w	8027720 <_dtoa_r+0xbc0>
 80273be:	2300      	movs	r3, #0
 80273c0:	4639      	mov	r1, r7
 80273c2:	220a      	movs	r2, #10
 80273c4:	4620      	mov	r0, r4
 80273c6:	f000 ffe5 	bl	8028394 <__multadd>
 80273ca:	9b02      	ldr	r3, [sp, #8]
 80273cc:	2b00      	cmp	r3, #0
 80273ce:	4607      	mov	r7, r0
 80273d0:	f300 808e 	bgt.w	80274f0 <_dtoa_r+0x990>
 80273d4:	9b06      	ldr	r3, [sp, #24]
 80273d6:	2b02      	cmp	r3, #2
 80273d8:	dc51      	bgt.n	802747e <_dtoa_r+0x91e>
 80273da:	e089      	b.n	80274f0 <_dtoa_r+0x990>
 80273dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80273de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80273e2:	e74b      	b.n	802727c <_dtoa_r+0x71c>
 80273e4:	9b03      	ldr	r3, [sp, #12]
 80273e6:	1e5e      	subs	r6, r3, #1
 80273e8:	9b07      	ldr	r3, [sp, #28]
 80273ea:	42b3      	cmp	r3, r6
 80273ec:	bfbf      	itttt	lt
 80273ee:	9b07      	ldrlt	r3, [sp, #28]
 80273f0:	9607      	strlt	r6, [sp, #28]
 80273f2:	1af2      	sublt	r2, r6, r3
 80273f4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80273f6:	bfb6      	itet	lt
 80273f8:	189b      	addlt	r3, r3, r2
 80273fa:	1b9e      	subge	r6, r3, r6
 80273fc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80273fe:	9b03      	ldr	r3, [sp, #12]
 8027400:	bfb8      	it	lt
 8027402:	2600      	movlt	r6, #0
 8027404:	2b00      	cmp	r3, #0
 8027406:	bfb7      	itett	lt
 8027408:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 802740c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8027410:	1a9d      	sublt	r5, r3, r2
 8027412:	2300      	movlt	r3, #0
 8027414:	e734      	b.n	8027280 <_dtoa_r+0x720>
 8027416:	9e07      	ldr	r6, [sp, #28]
 8027418:	9d04      	ldr	r5, [sp, #16]
 802741a:	9f08      	ldr	r7, [sp, #32]
 802741c:	e73b      	b.n	8027296 <_dtoa_r+0x736>
 802741e:	9a07      	ldr	r2, [sp, #28]
 8027420:	e767      	b.n	80272f2 <_dtoa_r+0x792>
 8027422:	9b06      	ldr	r3, [sp, #24]
 8027424:	2b01      	cmp	r3, #1
 8027426:	dc18      	bgt.n	802745a <_dtoa_r+0x8fa>
 8027428:	f1ba 0f00 	cmp.w	sl, #0
 802742c:	d115      	bne.n	802745a <_dtoa_r+0x8fa>
 802742e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8027432:	b993      	cbnz	r3, 802745a <_dtoa_r+0x8fa>
 8027434:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8027438:	0d1b      	lsrs	r3, r3, #20
 802743a:	051b      	lsls	r3, r3, #20
 802743c:	b183      	cbz	r3, 8027460 <_dtoa_r+0x900>
 802743e:	9b04      	ldr	r3, [sp, #16]
 8027440:	3301      	adds	r3, #1
 8027442:	9304      	str	r3, [sp, #16]
 8027444:	9b05      	ldr	r3, [sp, #20]
 8027446:	3301      	adds	r3, #1
 8027448:	9305      	str	r3, [sp, #20]
 802744a:	f04f 0801 	mov.w	r8, #1
 802744e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027450:	2b00      	cmp	r3, #0
 8027452:	f47f af6a 	bne.w	802732a <_dtoa_r+0x7ca>
 8027456:	2001      	movs	r0, #1
 8027458:	e76f      	b.n	802733a <_dtoa_r+0x7da>
 802745a:	f04f 0800 	mov.w	r8, #0
 802745e:	e7f6      	b.n	802744e <_dtoa_r+0x8ee>
 8027460:	4698      	mov	r8, r3
 8027462:	e7f4      	b.n	802744e <_dtoa_r+0x8ee>
 8027464:	f43f af7d 	beq.w	8027362 <_dtoa_r+0x802>
 8027468:	4618      	mov	r0, r3
 802746a:	301c      	adds	r0, #28
 802746c:	e772      	b.n	8027354 <_dtoa_r+0x7f4>
 802746e:	9b03      	ldr	r3, [sp, #12]
 8027470:	2b00      	cmp	r3, #0
 8027472:	dc37      	bgt.n	80274e4 <_dtoa_r+0x984>
 8027474:	9b06      	ldr	r3, [sp, #24]
 8027476:	2b02      	cmp	r3, #2
 8027478:	dd34      	ble.n	80274e4 <_dtoa_r+0x984>
 802747a:	9b03      	ldr	r3, [sp, #12]
 802747c:	9302      	str	r3, [sp, #8]
 802747e:	9b02      	ldr	r3, [sp, #8]
 8027480:	b96b      	cbnz	r3, 802749e <_dtoa_r+0x93e>
 8027482:	4631      	mov	r1, r6
 8027484:	2205      	movs	r2, #5
 8027486:	4620      	mov	r0, r4
 8027488:	f000 ff84 	bl	8028394 <__multadd>
 802748c:	4601      	mov	r1, r0
 802748e:	4606      	mov	r6, r0
 8027490:	ee18 0a10 	vmov	r0, s16
 8027494:	f001 f9e8 	bl	8028868 <__mcmp>
 8027498:	2800      	cmp	r0, #0
 802749a:	f73f adbb 	bgt.w	8027014 <_dtoa_r+0x4b4>
 802749e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80274a0:	9d01      	ldr	r5, [sp, #4]
 80274a2:	43db      	mvns	r3, r3
 80274a4:	9300      	str	r3, [sp, #0]
 80274a6:	f04f 0800 	mov.w	r8, #0
 80274aa:	4631      	mov	r1, r6
 80274ac:	4620      	mov	r0, r4
 80274ae:	f000 ff4f 	bl	8028350 <_Bfree>
 80274b2:	2f00      	cmp	r7, #0
 80274b4:	f43f aea4 	beq.w	8027200 <_dtoa_r+0x6a0>
 80274b8:	f1b8 0f00 	cmp.w	r8, #0
 80274bc:	d005      	beq.n	80274ca <_dtoa_r+0x96a>
 80274be:	45b8      	cmp	r8, r7
 80274c0:	d003      	beq.n	80274ca <_dtoa_r+0x96a>
 80274c2:	4641      	mov	r1, r8
 80274c4:	4620      	mov	r0, r4
 80274c6:	f000 ff43 	bl	8028350 <_Bfree>
 80274ca:	4639      	mov	r1, r7
 80274cc:	4620      	mov	r0, r4
 80274ce:	f000 ff3f 	bl	8028350 <_Bfree>
 80274d2:	e695      	b.n	8027200 <_dtoa_r+0x6a0>
 80274d4:	2600      	movs	r6, #0
 80274d6:	4637      	mov	r7, r6
 80274d8:	e7e1      	b.n	802749e <_dtoa_r+0x93e>
 80274da:	9700      	str	r7, [sp, #0]
 80274dc:	4637      	mov	r7, r6
 80274de:	e599      	b.n	8027014 <_dtoa_r+0x4b4>
 80274e0:	40240000 	.word	0x40240000
 80274e4:	9b08      	ldr	r3, [sp, #32]
 80274e6:	2b00      	cmp	r3, #0
 80274e8:	f000 80ca 	beq.w	8027680 <_dtoa_r+0xb20>
 80274ec:	9b03      	ldr	r3, [sp, #12]
 80274ee:	9302      	str	r3, [sp, #8]
 80274f0:	2d00      	cmp	r5, #0
 80274f2:	dd05      	ble.n	8027500 <_dtoa_r+0x9a0>
 80274f4:	4639      	mov	r1, r7
 80274f6:	462a      	mov	r2, r5
 80274f8:	4620      	mov	r0, r4
 80274fa:	f001 f945 	bl	8028788 <__lshift>
 80274fe:	4607      	mov	r7, r0
 8027500:	f1b8 0f00 	cmp.w	r8, #0
 8027504:	d05b      	beq.n	80275be <_dtoa_r+0xa5e>
 8027506:	6879      	ldr	r1, [r7, #4]
 8027508:	4620      	mov	r0, r4
 802750a:	f000 fee1 	bl	80282d0 <_Balloc>
 802750e:	4605      	mov	r5, r0
 8027510:	b928      	cbnz	r0, 802751e <_dtoa_r+0x9be>
 8027512:	4b87      	ldr	r3, [pc, #540]	; (8027730 <_dtoa_r+0xbd0>)
 8027514:	4602      	mov	r2, r0
 8027516:	f240 21ea 	movw	r1, #746	; 0x2ea
 802751a:	f7ff bb3b 	b.w	8026b94 <_dtoa_r+0x34>
 802751e:	693a      	ldr	r2, [r7, #16]
 8027520:	3202      	adds	r2, #2
 8027522:	0092      	lsls	r2, r2, #2
 8027524:	f107 010c 	add.w	r1, r7, #12
 8027528:	300c      	adds	r0, #12
 802752a:	f7fd fa6b 	bl	8024a04 <memcpy>
 802752e:	2201      	movs	r2, #1
 8027530:	4629      	mov	r1, r5
 8027532:	4620      	mov	r0, r4
 8027534:	f001 f928 	bl	8028788 <__lshift>
 8027538:	9b01      	ldr	r3, [sp, #4]
 802753a:	f103 0901 	add.w	r9, r3, #1
 802753e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8027542:	4413      	add	r3, r2
 8027544:	9305      	str	r3, [sp, #20]
 8027546:	f00a 0301 	and.w	r3, sl, #1
 802754a:	46b8      	mov	r8, r7
 802754c:	9304      	str	r3, [sp, #16]
 802754e:	4607      	mov	r7, r0
 8027550:	4631      	mov	r1, r6
 8027552:	ee18 0a10 	vmov	r0, s16
 8027556:	f7ff fa77 	bl	8026a48 <quorem>
 802755a:	4641      	mov	r1, r8
 802755c:	9002      	str	r0, [sp, #8]
 802755e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8027562:	ee18 0a10 	vmov	r0, s16
 8027566:	f001 f97f 	bl	8028868 <__mcmp>
 802756a:	463a      	mov	r2, r7
 802756c:	9003      	str	r0, [sp, #12]
 802756e:	4631      	mov	r1, r6
 8027570:	4620      	mov	r0, r4
 8027572:	f001 f995 	bl	80288a0 <__mdiff>
 8027576:	68c2      	ldr	r2, [r0, #12]
 8027578:	f109 3bff 	add.w	fp, r9, #4294967295
 802757c:	4605      	mov	r5, r0
 802757e:	bb02      	cbnz	r2, 80275c2 <_dtoa_r+0xa62>
 8027580:	4601      	mov	r1, r0
 8027582:	ee18 0a10 	vmov	r0, s16
 8027586:	f001 f96f 	bl	8028868 <__mcmp>
 802758a:	4602      	mov	r2, r0
 802758c:	4629      	mov	r1, r5
 802758e:	4620      	mov	r0, r4
 8027590:	9207      	str	r2, [sp, #28]
 8027592:	f000 fedd 	bl	8028350 <_Bfree>
 8027596:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 802759a:	ea43 0102 	orr.w	r1, r3, r2
 802759e:	9b04      	ldr	r3, [sp, #16]
 80275a0:	430b      	orrs	r3, r1
 80275a2:	464d      	mov	r5, r9
 80275a4:	d10f      	bne.n	80275c6 <_dtoa_r+0xa66>
 80275a6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80275aa:	d02a      	beq.n	8027602 <_dtoa_r+0xaa2>
 80275ac:	9b03      	ldr	r3, [sp, #12]
 80275ae:	2b00      	cmp	r3, #0
 80275b0:	dd02      	ble.n	80275b8 <_dtoa_r+0xa58>
 80275b2:	9b02      	ldr	r3, [sp, #8]
 80275b4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80275b8:	f88b a000 	strb.w	sl, [fp]
 80275bc:	e775      	b.n	80274aa <_dtoa_r+0x94a>
 80275be:	4638      	mov	r0, r7
 80275c0:	e7ba      	b.n	8027538 <_dtoa_r+0x9d8>
 80275c2:	2201      	movs	r2, #1
 80275c4:	e7e2      	b.n	802758c <_dtoa_r+0xa2c>
 80275c6:	9b03      	ldr	r3, [sp, #12]
 80275c8:	2b00      	cmp	r3, #0
 80275ca:	db04      	blt.n	80275d6 <_dtoa_r+0xa76>
 80275cc:	9906      	ldr	r1, [sp, #24]
 80275ce:	430b      	orrs	r3, r1
 80275d0:	9904      	ldr	r1, [sp, #16]
 80275d2:	430b      	orrs	r3, r1
 80275d4:	d122      	bne.n	802761c <_dtoa_r+0xabc>
 80275d6:	2a00      	cmp	r2, #0
 80275d8:	ddee      	ble.n	80275b8 <_dtoa_r+0xa58>
 80275da:	ee18 1a10 	vmov	r1, s16
 80275de:	2201      	movs	r2, #1
 80275e0:	4620      	mov	r0, r4
 80275e2:	f001 f8d1 	bl	8028788 <__lshift>
 80275e6:	4631      	mov	r1, r6
 80275e8:	ee08 0a10 	vmov	s16, r0
 80275ec:	f001 f93c 	bl	8028868 <__mcmp>
 80275f0:	2800      	cmp	r0, #0
 80275f2:	dc03      	bgt.n	80275fc <_dtoa_r+0xa9c>
 80275f4:	d1e0      	bne.n	80275b8 <_dtoa_r+0xa58>
 80275f6:	f01a 0f01 	tst.w	sl, #1
 80275fa:	d0dd      	beq.n	80275b8 <_dtoa_r+0xa58>
 80275fc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8027600:	d1d7      	bne.n	80275b2 <_dtoa_r+0xa52>
 8027602:	2339      	movs	r3, #57	; 0x39
 8027604:	f88b 3000 	strb.w	r3, [fp]
 8027608:	462b      	mov	r3, r5
 802760a:	461d      	mov	r5, r3
 802760c:	3b01      	subs	r3, #1
 802760e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8027612:	2a39      	cmp	r2, #57	; 0x39
 8027614:	d071      	beq.n	80276fa <_dtoa_r+0xb9a>
 8027616:	3201      	adds	r2, #1
 8027618:	701a      	strb	r2, [r3, #0]
 802761a:	e746      	b.n	80274aa <_dtoa_r+0x94a>
 802761c:	2a00      	cmp	r2, #0
 802761e:	dd07      	ble.n	8027630 <_dtoa_r+0xad0>
 8027620:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8027624:	d0ed      	beq.n	8027602 <_dtoa_r+0xaa2>
 8027626:	f10a 0301 	add.w	r3, sl, #1
 802762a:	f88b 3000 	strb.w	r3, [fp]
 802762e:	e73c      	b.n	80274aa <_dtoa_r+0x94a>
 8027630:	9b05      	ldr	r3, [sp, #20]
 8027632:	f809 ac01 	strb.w	sl, [r9, #-1]
 8027636:	4599      	cmp	r9, r3
 8027638:	d047      	beq.n	80276ca <_dtoa_r+0xb6a>
 802763a:	ee18 1a10 	vmov	r1, s16
 802763e:	2300      	movs	r3, #0
 8027640:	220a      	movs	r2, #10
 8027642:	4620      	mov	r0, r4
 8027644:	f000 fea6 	bl	8028394 <__multadd>
 8027648:	45b8      	cmp	r8, r7
 802764a:	ee08 0a10 	vmov	s16, r0
 802764e:	f04f 0300 	mov.w	r3, #0
 8027652:	f04f 020a 	mov.w	r2, #10
 8027656:	4641      	mov	r1, r8
 8027658:	4620      	mov	r0, r4
 802765a:	d106      	bne.n	802766a <_dtoa_r+0xb0a>
 802765c:	f000 fe9a 	bl	8028394 <__multadd>
 8027660:	4680      	mov	r8, r0
 8027662:	4607      	mov	r7, r0
 8027664:	f109 0901 	add.w	r9, r9, #1
 8027668:	e772      	b.n	8027550 <_dtoa_r+0x9f0>
 802766a:	f000 fe93 	bl	8028394 <__multadd>
 802766e:	4639      	mov	r1, r7
 8027670:	4680      	mov	r8, r0
 8027672:	2300      	movs	r3, #0
 8027674:	220a      	movs	r2, #10
 8027676:	4620      	mov	r0, r4
 8027678:	f000 fe8c 	bl	8028394 <__multadd>
 802767c:	4607      	mov	r7, r0
 802767e:	e7f1      	b.n	8027664 <_dtoa_r+0xb04>
 8027680:	9b03      	ldr	r3, [sp, #12]
 8027682:	9302      	str	r3, [sp, #8]
 8027684:	9d01      	ldr	r5, [sp, #4]
 8027686:	ee18 0a10 	vmov	r0, s16
 802768a:	4631      	mov	r1, r6
 802768c:	f7ff f9dc 	bl	8026a48 <quorem>
 8027690:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8027694:	9b01      	ldr	r3, [sp, #4]
 8027696:	f805 ab01 	strb.w	sl, [r5], #1
 802769a:	1aea      	subs	r2, r5, r3
 802769c:	9b02      	ldr	r3, [sp, #8]
 802769e:	4293      	cmp	r3, r2
 80276a0:	dd09      	ble.n	80276b6 <_dtoa_r+0xb56>
 80276a2:	ee18 1a10 	vmov	r1, s16
 80276a6:	2300      	movs	r3, #0
 80276a8:	220a      	movs	r2, #10
 80276aa:	4620      	mov	r0, r4
 80276ac:	f000 fe72 	bl	8028394 <__multadd>
 80276b0:	ee08 0a10 	vmov	s16, r0
 80276b4:	e7e7      	b.n	8027686 <_dtoa_r+0xb26>
 80276b6:	9b02      	ldr	r3, [sp, #8]
 80276b8:	2b00      	cmp	r3, #0
 80276ba:	bfc8      	it	gt
 80276bc:	461d      	movgt	r5, r3
 80276be:	9b01      	ldr	r3, [sp, #4]
 80276c0:	bfd8      	it	le
 80276c2:	2501      	movle	r5, #1
 80276c4:	441d      	add	r5, r3
 80276c6:	f04f 0800 	mov.w	r8, #0
 80276ca:	ee18 1a10 	vmov	r1, s16
 80276ce:	2201      	movs	r2, #1
 80276d0:	4620      	mov	r0, r4
 80276d2:	f001 f859 	bl	8028788 <__lshift>
 80276d6:	4631      	mov	r1, r6
 80276d8:	ee08 0a10 	vmov	s16, r0
 80276dc:	f001 f8c4 	bl	8028868 <__mcmp>
 80276e0:	2800      	cmp	r0, #0
 80276e2:	dc91      	bgt.n	8027608 <_dtoa_r+0xaa8>
 80276e4:	d102      	bne.n	80276ec <_dtoa_r+0xb8c>
 80276e6:	f01a 0f01 	tst.w	sl, #1
 80276ea:	d18d      	bne.n	8027608 <_dtoa_r+0xaa8>
 80276ec:	462b      	mov	r3, r5
 80276ee:	461d      	mov	r5, r3
 80276f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80276f4:	2a30      	cmp	r2, #48	; 0x30
 80276f6:	d0fa      	beq.n	80276ee <_dtoa_r+0xb8e>
 80276f8:	e6d7      	b.n	80274aa <_dtoa_r+0x94a>
 80276fa:	9a01      	ldr	r2, [sp, #4]
 80276fc:	429a      	cmp	r2, r3
 80276fe:	d184      	bne.n	802760a <_dtoa_r+0xaaa>
 8027700:	9b00      	ldr	r3, [sp, #0]
 8027702:	3301      	adds	r3, #1
 8027704:	9300      	str	r3, [sp, #0]
 8027706:	2331      	movs	r3, #49	; 0x31
 8027708:	7013      	strb	r3, [r2, #0]
 802770a:	e6ce      	b.n	80274aa <_dtoa_r+0x94a>
 802770c:	4b09      	ldr	r3, [pc, #36]	; (8027734 <_dtoa_r+0xbd4>)
 802770e:	f7ff ba95 	b.w	8026c3c <_dtoa_r+0xdc>
 8027712:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8027714:	2b00      	cmp	r3, #0
 8027716:	f47f aa6e 	bne.w	8026bf6 <_dtoa_r+0x96>
 802771a:	4b07      	ldr	r3, [pc, #28]	; (8027738 <_dtoa_r+0xbd8>)
 802771c:	f7ff ba8e 	b.w	8026c3c <_dtoa_r+0xdc>
 8027720:	9b02      	ldr	r3, [sp, #8]
 8027722:	2b00      	cmp	r3, #0
 8027724:	dcae      	bgt.n	8027684 <_dtoa_r+0xb24>
 8027726:	9b06      	ldr	r3, [sp, #24]
 8027728:	2b02      	cmp	r3, #2
 802772a:	f73f aea8 	bgt.w	802747e <_dtoa_r+0x91e>
 802772e:	e7a9      	b.n	8027684 <_dtoa_r+0xb24>
 8027730:	0802e734 	.word	0x0802e734
 8027734:	0802e980 	.word	0x0802e980
 8027738:	0802e6cc 	.word	0x0802e6cc

0802773c <__errno>:
 802773c:	4b01      	ldr	r3, [pc, #4]	; (8027744 <__errno+0x8>)
 802773e:	6818      	ldr	r0, [r3, #0]
 8027740:	4770      	bx	lr
 8027742:	bf00      	nop
 8027744:	10000070 	.word	0x10000070

08027748 <__sflush_r>:
 8027748:	898a      	ldrh	r2, [r1, #12]
 802774a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802774e:	4605      	mov	r5, r0
 8027750:	0710      	lsls	r0, r2, #28
 8027752:	460c      	mov	r4, r1
 8027754:	d458      	bmi.n	8027808 <__sflush_r+0xc0>
 8027756:	684b      	ldr	r3, [r1, #4]
 8027758:	2b00      	cmp	r3, #0
 802775a:	dc05      	bgt.n	8027768 <__sflush_r+0x20>
 802775c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802775e:	2b00      	cmp	r3, #0
 8027760:	dc02      	bgt.n	8027768 <__sflush_r+0x20>
 8027762:	2000      	movs	r0, #0
 8027764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8027768:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802776a:	2e00      	cmp	r6, #0
 802776c:	d0f9      	beq.n	8027762 <__sflush_r+0x1a>
 802776e:	2300      	movs	r3, #0
 8027770:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8027774:	682f      	ldr	r7, [r5, #0]
 8027776:	602b      	str	r3, [r5, #0]
 8027778:	d032      	beq.n	80277e0 <__sflush_r+0x98>
 802777a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802777c:	89a3      	ldrh	r3, [r4, #12]
 802777e:	075a      	lsls	r2, r3, #29
 8027780:	d505      	bpl.n	802778e <__sflush_r+0x46>
 8027782:	6863      	ldr	r3, [r4, #4]
 8027784:	1ac0      	subs	r0, r0, r3
 8027786:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8027788:	b10b      	cbz	r3, 802778e <__sflush_r+0x46>
 802778a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802778c:	1ac0      	subs	r0, r0, r3
 802778e:	2300      	movs	r3, #0
 8027790:	4602      	mov	r2, r0
 8027792:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8027794:	6a21      	ldr	r1, [r4, #32]
 8027796:	4628      	mov	r0, r5
 8027798:	47b0      	blx	r6
 802779a:	1c43      	adds	r3, r0, #1
 802779c:	89a3      	ldrh	r3, [r4, #12]
 802779e:	d106      	bne.n	80277ae <__sflush_r+0x66>
 80277a0:	6829      	ldr	r1, [r5, #0]
 80277a2:	291d      	cmp	r1, #29
 80277a4:	d82c      	bhi.n	8027800 <__sflush_r+0xb8>
 80277a6:	4a2a      	ldr	r2, [pc, #168]	; (8027850 <__sflush_r+0x108>)
 80277a8:	40ca      	lsrs	r2, r1
 80277aa:	07d6      	lsls	r6, r2, #31
 80277ac:	d528      	bpl.n	8027800 <__sflush_r+0xb8>
 80277ae:	2200      	movs	r2, #0
 80277b0:	6062      	str	r2, [r4, #4]
 80277b2:	04d9      	lsls	r1, r3, #19
 80277b4:	6922      	ldr	r2, [r4, #16]
 80277b6:	6022      	str	r2, [r4, #0]
 80277b8:	d504      	bpl.n	80277c4 <__sflush_r+0x7c>
 80277ba:	1c42      	adds	r2, r0, #1
 80277bc:	d101      	bne.n	80277c2 <__sflush_r+0x7a>
 80277be:	682b      	ldr	r3, [r5, #0]
 80277c0:	b903      	cbnz	r3, 80277c4 <__sflush_r+0x7c>
 80277c2:	6560      	str	r0, [r4, #84]	; 0x54
 80277c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80277c6:	602f      	str	r7, [r5, #0]
 80277c8:	2900      	cmp	r1, #0
 80277ca:	d0ca      	beq.n	8027762 <__sflush_r+0x1a>
 80277cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80277d0:	4299      	cmp	r1, r3
 80277d2:	d002      	beq.n	80277da <__sflush_r+0x92>
 80277d4:	4628      	mov	r0, r5
 80277d6:	f7fd f945 	bl	8024a64 <_free_r>
 80277da:	2000      	movs	r0, #0
 80277dc:	6360      	str	r0, [r4, #52]	; 0x34
 80277de:	e7c1      	b.n	8027764 <__sflush_r+0x1c>
 80277e0:	6a21      	ldr	r1, [r4, #32]
 80277e2:	2301      	movs	r3, #1
 80277e4:	4628      	mov	r0, r5
 80277e6:	47b0      	blx	r6
 80277e8:	1c41      	adds	r1, r0, #1
 80277ea:	d1c7      	bne.n	802777c <__sflush_r+0x34>
 80277ec:	682b      	ldr	r3, [r5, #0]
 80277ee:	2b00      	cmp	r3, #0
 80277f0:	d0c4      	beq.n	802777c <__sflush_r+0x34>
 80277f2:	2b1d      	cmp	r3, #29
 80277f4:	d001      	beq.n	80277fa <__sflush_r+0xb2>
 80277f6:	2b16      	cmp	r3, #22
 80277f8:	d101      	bne.n	80277fe <__sflush_r+0xb6>
 80277fa:	602f      	str	r7, [r5, #0]
 80277fc:	e7b1      	b.n	8027762 <__sflush_r+0x1a>
 80277fe:	89a3      	ldrh	r3, [r4, #12]
 8027800:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8027804:	81a3      	strh	r3, [r4, #12]
 8027806:	e7ad      	b.n	8027764 <__sflush_r+0x1c>
 8027808:	690f      	ldr	r7, [r1, #16]
 802780a:	2f00      	cmp	r7, #0
 802780c:	d0a9      	beq.n	8027762 <__sflush_r+0x1a>
 802780e:	0793      	lsls	r3, r2, #30
 8027810:	680e      	ldr	r6, [r1, #0]
 8027812:	bf08      	it	eq
 8027814:	694b      	ldreq	r3, [r1, #20]
 8027816:	600f      	str	r7, [r1, #0]
 8027818:	bf18      	it	ne
 802781a:	2300      	movne	r3, #0
 802781c:	eba6 0807 	sub.w	r8, r6, r7
 8027820:	608b      	str	r3, [r1, #8]
 8027822:	f1b8 0f00 	cmp.w	r8, #0
 8027826:	dd9c      	ble.n	8027762 <__sflush_r+0x1a>
 8027828:	6a21      	ldr	r1, [r4, #32]
 802782a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802782c:	4643      	mov	r3, r8
 802782e:	463a      	mov	r2, r7
 8027830:	4628      	mov	r0, r5
 8027832:	47b0      	blx	r6
 8027834:	2800      	cmp	r0, #0
 8027836:	dc06      	bgt.n	8027846 <__sflush_r+0xfe>
 8027838:	89a3      	ldrh	r3, [r4, #12]
 802783a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802783e:	81a3      	strh	r3, [r4, #12]
 8027840:	f04f 30ff 	mov.w	r0, #4294967295
 8027844:	e78e      	b.n	8027764 <__sflush_r+0x1c>
 8027846:	4407      	add	r7, r0
 8027848:	eba8 0800 	sub.w	r8, r8, r0
 802784c:	e7e9      	b.n	8027822 <__sflush_r+0xda>
 802784e:	bf00      	nop
 8027850:	20400001 	.word	0x20400001

08027854 <_fflush_r>:
 8027854:	b538      	push	{r3, r4, r5, lr}
 8027856:	690b      	ldr	r3, [r1, #16]
 8027858:	4605      	mov	r5, r0
 802785a:	460c      	mov	r4, r1
 802785c:	b913      	cbnz	r3, 8027864 <_fflush_r+0x10>
 802785e:	2500      	movs	r5, #0
 8027860:	4628      	mov	r0, r5
 8027862:	bd38      	pop	{r3, r4, r5, pc}
 8027864:	b118      	cbz	r0, 802786e <_fflush_r+0x1a>
 8027866:	6983      	ldr	r3, [r0, #24]
 8027868:	b90b      	cbnz	r3, 802786e <_fflush_r+0x1a>
 802786a:	f000 f887 	bl	802797c <__sinit>
 802786e:	4b14      	ldr	r3, [pc, #80]	; (80278c0 <_fflush_r+0x6c>)
 8027870:	429c      	cmp	r4, r3
 8027872:	d11b      	bne.n	80278ac <_fflush_r+0x58>
 8027874:	686c      	ldr	r4, [r5, #4]
 8027876:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802787a:	2b00      	cmp	r3, #0
 802787c:	d0ef      	beq.n	802785e <_fflush_r+0xa>
 802787e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8027880:	07d0      	lsls	r0, r2, #31
 8027882:	d404      	bmi.n	802788e <_fflush_r+0x3a>
 8027884:	0599      	lsls	r1, r3, #22
 8027886:	d402      	bmi.n	802788e <_fflush_r+0x3a>
 8027888:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802788a:	f000 fc88 	bl	802819e <__retarget_lock_acquire_recursive>
 802788e:	4628      	mov	r0, r5
 8027890:	4621      	mov	r1, r4
 8027892:	f7ff ff59 	bl	8027748 <__sflush_r>
 8027896:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8027898:	07da      	lsls	r2, r3, #31
 802789a:	4605      	mov	r5, r0
 802789c:	d4e0      	bmi.n	8027860 <_fflush_r+0xc>
 802789e:	89a3      	ldrh	r3, [r4, #12]
 80278a0:	059b      	lsls	r3, r3, #22
 80278a2:	d4dd      	bmi.n	8027860 <_fflush_r+0xc>
 80278a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80278a6:	f000 fc7b 	bl	80281a0 <__retarget_lock_release_recursive>
 80278aa:	e7d9      	b.n	8027860 <_fflush_r+0xc>
 80278ac:	4b05      	ldr	r3, [pc, #20]	; (80278c4 <_fflush_r+0x70>)
 80278ae:	429c      	cmp	r4, r3
 80278b0:	d101      	bne.n	80278b6 <_fflush_r+0x62>
 80278b2:	68ac      	ldr	r4, [r5, #8]
 80278b4:	e7df      	b.n	8027876 <_fflush_r+0x22>
 80278b6:	4b04      	ldr	r3, [pc, #16]	; (80278c8 <_fflush_r+0x74>)
 80278b8:	429c      	cmp	r4, r3
 80278ba:	bf08      	it	eq
 80278bc:	68ec      	ldreq	r4, [r5, #12]
 80278be:	e7da      	b.n	8027876 <_fflush_r+0x22>
 80278c0:	0802e768 	.word	0x0802e768
 80278c4:	0802e788 	.word	0x0802e788
 80278c8:	0802e748 	.word	0x0802e748

080278cc <std>:
 80278cc:	2300      	movs	r3, #0
 80278ce:	b510      	push	{r4, lr}
 80278d0:	4604      	mov	r4, r0
 80278d2:	e9c0 3300 	strd	r3, r3, [r0]
 80278d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80278da:	6083      	str	r3, [r0, #8]
 80278dc:	8181      	strh	r1, [r0, #12]
 80278de:	6643      	str	r3, [r0, #100]	; 0x64
 80278e0:	81c2      	strh	r2, [r0, #14]
 80278e2:	6183      	str	r3, [r0, #24]
 80278e4:	4619      	mov	r1, r3
 80278e6:	2208      	movs	r2, #8
 80278e8:	305c      	adds	r0, #92	; 0x5c
 80278ea:	f7fd f8b3 	bl	8024a54 <memset>
 80278ee:	4b05      	ldr	r3, [pc, #20]	; (8027904 <std+0x38>)
 80278f0:	6263      	str	r3, [r4, #36]	; 0x24
 80278f2:	4b05      	ldr	r3, [pc, #20]	; (8027908 <std+0x3c>)
 80278f4:	62a3      	str	r3, [r4, #40]	; 0x28
 80278f6:	4b05      	ldr	r3, [pc, #20]	; (802790c <std+0x40>)
 80278f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80278fa:	4b05      	ldr	r3, [pc, #20]	; (8027910 <std+0x44>)
 80278fc:	6224      	str	r4, [r4, #32]
 80278fe:	6323      	str	r3, [r4, #48]	; 0x30
 8027900:	bd10      	pop	{r4, pc}
 8027902:	bf00      	nop
 8027904:	08025a0d 	.word	0x08025a0d
 8027908:	08025a33 	.word	0x08025a33
 802790c:	08025a6b 	.word	0x08025a6b
 8027910:	08025a8f 	.word	0x08025a8f

08027914 <_cleanup_r>:
 8027914:	4901      	ldr	r1, [pc, #4]	; (802791c <_cleanup_r+0x8>)
 8027916:	f000 b8af 	b.w	8027a78 <_fwalk_reent>
 802791a:	bf00      	nop
 802791c:	08027855 	.word	0x08027855

08027920 <__sfmoreglue>:
 8027920:	b570      	push	{r4, r5, r6, lr}
 8027922:	2268      	movs	r2, #104	; 0x68
 8027924:	1e4d      	subs	r5, r1, #1
 8027926:	4355      	muls	r5, r2
 8027928:	460e      	mov	r6, r1
 802792a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802792e:	f7fd f905 	bl	8024b3c <_malloc_r>
 8027932:	4604      	mov	r4, r0
 8027934:	b140      	cbz	r0, 8027948 <__sfmoreglue+0x28>
 8027936:	2100      	movs	r1, #0
 8027938:	e9c0 1600 	strd	r1, r6, [r0]
 802793c:	300c      	adds	r0, #12
 802793e:	60a0      	str	r0, [r4, #8]
 8027940:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8027944:	f7fd f886 	bl	8024a54 <memset>
 8027948:	4620      	mov	r0, r4
 802794a:	bd70      	pop	{r4, r5, r6, pc}

0802794c <__sfp_lock_acquire>:
 802794c:	4801      	ldr	r0, [pc, #4]	; (8027954 <__sfp_lock_acquire+0x8>)
 802794e:	f000 bc26 	b.w	802819e <__retarget_lock_acquire_recursive>
 8027952:	bf00      	nop
 8027954:	20013935 	.word	0x20013935

08027958 <__sfp_lock_release>:
 8027958:	4801      	ldr	r0, [pc, #4]	; (8027960 <__sfp_lock_release+0x8>)
 802795a:	f000 bc21 	b.w	80281a0 <__retarget_lock_release_recursive>
 802795e:	bf00      	nop
 8027960:	20013935 	.word	0x20013935

08027964 <__sinit_lock_acquire>:
 8027964:	4801      	ldr	r0, [pc, #4]	; (802796c <__sinit_lock_acquire+0x8>)
 8027966:	f000 bc1a 	b.w	802819e <__retarget_lock_acquire_recursive>
 802796a:	bf00      	nop
 802796c:	20013936 	.word	0x20013936

08027970 <__sinit_lock_release>:
 8027970:	4801      	ldr	r0, [pc, #4]	; (8027978 <__sinit_lock_release+0x8>)
 8027972:	f000 bc15 	b.w	80281a0 <__retarget_lock_release_recursive>
 8027976:	bf00      	nop
 8027978:	20013936 	.word	0x20013936

0802797c <__sinit>:
 802797c:	b510      	push	{r4, lr}
 802797e:	4604      	mov	r4, r0
 8027980:	f7ff fff0 	bl	8027964 <__sinit_lock_acquire>
 8027984:	69a3      	ldr	r3, [r4, #24]
 8027986:	b11b      	cbz	r3, 8027990 <__sinit+0x14>
 8027988:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802798c:	f7ff bff0 	b.w	8027970 <__sinit_lock_release>
 8027990:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8027994:	6523      	str	r3, [r4, #80]	; 0x50
 8027996:	4b13      	ldr	r3, [pc, #76]	; (80279e4 <__sinit+0x68>)
 8027998:	4a13      	ldr	r2, [pc, #76]	; (80279e8 <__sinit+0x6c>)
 802799a:	681b      	ldr	r3, [r3, #0]
 802799c:	62a2      	str	r2, [r4, #40]	; 0x28
 802799e:	42a3      	cmp	r3, r4
 80279a0:	bf04      	itt	eq
 80279a2:	2301      	moveq	r3, #1
 80279a4:	61a3      	streq	r3, [r4, #24]
 80279a6:	4620      	mov	r0, r4
 80279a8:	f000 f820 	bl	80279ec <__sfp>
 80279ac:	6060      	str	r0, [r4, #4]
 80279ae:	4620      	mov	r0, r4
 80279b0:	f000 f81c 	bl	80279ec <__sfp>
 80279b4:	60a0      	str	r0, [r4, #8]
 80279b6:	4620      	mov	r0, r4
 80279b8:	f000 f818 	bl	80279ec <__sfp>
 80279bc:	2200      	movs	r2, #0
 80279be:	60e0      	str	r0, [r4, #12]
 80279c0:	2104      	movs	r1, #4
 80279c2:	6860      	ldr	r0, [r4, #4]
 80279c4:	f7ff ff82 	bl	80278cc <std>
 80279c8:	68a0      	ldr	r0, [r4, #8]
 80279ca:	2201      	movs	r2, #1
 80279cc:	2109      	movs	r1, #9
 80279ce:	f7ff ff7d 	bl	80278cc <std>
 80279d2:	68e0      	ldr	r0, [r4, #12]
 80279d4:	2202      	movs	r2, #2
 80279d6:	2112      	movs	r1, #18
 80279d8:	f7ff ff78 	bl	80278cc <std>
 80279dc:	2301      	movs	r3, #1
 80279de:	61a3      	str	r3, [r4, #24]
 80279e0:	e7d2      	b.n	8027988 <__sinit+0xc>
 80279e2:	bf00      	nop
 80279e4:	0802e580 	.word	0x0802e580
 80279e8:	08027915 	.word	0x08027915

080279ec <__sfp>:
 80279ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80279ee:	4607      	mov	r7, r0
 80279f0:	f7ff ffac 	bl	802794c <__sfp_lock_acquire>
 80279f4:	4b1e      	ldr	r3, [pc, #120]	; (8027a70 <__sfp+0x84>)
 80279f6:	681e      	ldr	r6, [r3, #0]
 80279f8:	69b3      	ldr	r3, [r6, #24]
 80279fa:	b913      	cbnz	r3, 8027a02 <__sfp+0x16>
 80279fc:	4630      	mov	r0, r6
 80279fe:	f7ff ffbd 	bl	802797c <__sinit>
 8027a02:	3648      	adds	r6, #72	; 0x48
 8027a04:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8027a08:	3b01      	subs	r3, #1
 8027a0a:	d503      	bpl.n	8027a14 <__sfp+0x28>
 8027a0c:	6833      	ldr	r3, [r6, #0]
 8027a0e:	b30b      	cbz	r3, 8027a54 <__sfp+0x68>
 8027a10:	6836      	ldr	r6, [r6, #0]
 8027a12:	e7f7      	b.n	8027a04 <__sfp+0x18>
 8027a14:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8027a18:	b9d5      	cbnz	r5, 8027a50 <__sfp+0x64>
 8027a1a:	4b16      	ldr	r3, [pc, #88]	; (8027a74 <__sfp+0x88>)
 8027a1c:	60e3      	str	r3, [r4, #12]
 8027a1e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8027a22:	6665      	str	r5, [r4, #100]	; 0x64
 8027a24:	f000 fbba 	bl	802819c <__retarget_lock_init_recursive>
 8027a28:	f7ff ff96 	bl	8027958 <__sfp_lock_release>
 8027a2c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8027a30:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8027a34:	6025      	str	r5, [r4, #0]
 8027a36:	61a5      	str	r5, [r4, #24]
 8027a38:	2208      	movs	r2, #8
 8027a3a:	4629      	mov	r1, r5
 8027a3c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8027a40:	f7fd f808 	bl	8024a54 <memset>
 8027a44:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8027a48:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8027a4c:	4620      	mov	r0, r4
 8027a4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8027a50:	3468      	adds	r4, #104	; 0x68
 8027a52:	e7d9      	b.n	8027a08 <__sfp+0x1c>
 8027a54:	2104      	movs	r1, #4
 8027a56:	4638      	mov	r0, r7
 8027a58:	f7ff ff62 	bl	8027920 <__sfmoreglue>
 8027a5c:	4604      	mov	r4, r0
 8027a5e:	6030      	str	r0, [r6, #0]
 8027a60:	2800      	cmp	r0, #0
 8027a62:	d1d5      	bne.n	8027a10 <__sfp+0x24>
 8027a64:	f7ff ff78 	bl	8027958 <__sfp_lock_release>
 8027a68:	230c      	movs	r3, #12
 8027a6a:	603b      	str	r3, [r7, #0]
 8027a6c:	e7ee      	b.n	8027a4c <__sfp+0x60>
 8027a6e:	bf00      	nop
 8027a70:	0802e580 	.word	0x0802e580
 8027a74:	ffff0001 	.word	0xffff0001

08027a78 <_fwalk_reent>:
 8027a78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8027a7c:	4606      	mov	r6, r0
 8027a7e:	4688      	mov	r8, r1
 8027a80:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8027a84:	2700      	movs	r7, #0
 8027a86:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8027a8a:	f1b9 0901 	subs.w	r9, r9, #1
 8027a8e:	d505      	bpl.n	8027a9c <_fwalk_reent+0x24>
 8027a90:	6824      	ldr	r4, [r4, #0]
 8027a92:	2c00      	cmp	r4, #0
 8027a94:	d1f7      	bne.n	8027a86 <_fwalk_reent+0xe>
 8027a96:	4638      	mov	r0, r7
 8027a98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8027a9c:	89ab      	ldrh	r3, [r5, #12]
 8027a9e:	2b01      	cmp	r3, #1
 8027aa0:	d907      	bls.n	8027ab2 <_fwalk_reent+0x3a>
 8027aa2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8027aa6:	3301      	adds	r3, #1
 8027aa8:	d003      	beq.n	8027ab2 <_fwalk_reent+0x3a>
 8027aaa:	4629      	mov	r1, r5
 8027aac:	4630      	mov	r0, r6
 8027aae:	47c0      	blx	r8
 8027ab0:	4307      	orrs	r7, r0
 8027ab2:	3568      	adds	r5, #104	; 0x68
 8027ab4:	e7e9      	b.n	8027a8a <_fwalk_reent+0x12>

08027ab6 <rshift>:
 8027ab6:	6903      	ldr	r3, [r0, #16]
 8027ab8:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8027abc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8027ac0:	ea4f 1261 	mov.w	r2, r1, asr #5
 8027ac4:	f100 0414 	add.w	r4, r0, #20
 8027ac8:	dd45      	ble.n	8027b56 <rshift+0xa0>
 8027aca:	f011 011f 	ands.w	r1, r1, #31
 8027ace:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8027ad2:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8027ad6:	d10c      	bne.n	8027af2 <rshift+0x3c>
 8027ad8:	f100 0710 	add.w	r7, r0, #16
 8027adc:	4629      	mov	r1, r5
 8027ade:	42b1      	cmp	r1, r6
 8027ae0:	d334      	bcc.n	8027b4c <rshift+0x96>
 8027ae2:	1a9b      	subs	r3, r3, r2
 8027ae4:	009b      	lsls	r3, r3, #2
 8027ae6:	1eea      	subs	r2, r5, #3
 8027ae8:	4296      	cmp	r6, r2
 8027aea:	bf38      	it	cc
 8027aec:	2300      	movcc	r3, #0
 8027aee:	4423      	add	r3, r4
 8027af0:	e015      	b.n	8027b1e <rshift+0x68>
 8027af2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8027af6:	f1c1 0820 	rsb	r8, r1, #32
 8027afa:	40cf      	lsrs	r7, r1
 8027afc:	f105 0e04 	add.w	lr, r5, #4
 8027b00:	46a1      	mov	r9, r4
 8027b02:	4576      	cmp	r6, lr
 8027b04:	46f4      	mov	ip, lr
 8027b06:	d815      	bhi.n	8027b34 <rshift+0x7e>
 8027b08:	1a9a      	subs	r2, r3, r2
 8027b0a:	0092      	lsls	r2, r2, #2
 8027b0c:	3a04      	subs	r2, #4
 8027b0e:	3501      	adds	r5, #1
 8027b10:	42ae      	cmp	r6, r5
 8027b12:	bf38      	it	cc
 8027b14:	2200      	movcc	r2, #0
 8027b16:	18a3      	adds	r3, r4, r2
 8027b18:	50a7      	str	r7, [r4, r2]
 8027b1a:	b107      	cbz	r7, 8027b1e <rshift+0x68>
 8027b1c:	3304      	adds	r3, #4
 8027b1e:	1b1a      	subs	r2, r3, r4
 8027b20:	42a3      	cmp	r3, r4
 8027b22:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8027b26:	bf08      	it	eq
 8027b28:	2300      	moveq	r3, #0
 8027b2a:	6102      	str	r2, [r0, #16]
 8027b2c:	bf08      	it	eq
 8027b2e:	6143      	streq	r3, [r0, #20]
 8027b30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8027b34:	f8dc c000 	ldr.w	ip, [ip]
 8027b38:	fa0c fc08 	lsl.w	ip, ip, r8
 8027b3c:	ea4c 0707 	orr.w	r7, ip, r7
 8027b40:	f849 7b04 	str.w	r7, [r9], #4
 8027b44:	f85e 7b04 	ldr.w	r7, [lr], #4
 8027b48:	40cf      	lsrs	r7, r1
 8027b4a:	e7da      	b.n	8027b02 <rshift+0x4c>
 8027b4c:	f851 cb04 	ldr.w	ip, [r1], #4
 8027b50:	f847 cf04 	str.w	ip, [r7, #4]!
 8027b54:	e7c3      	b.n	8027ade <rshift+0x28>
 8027b56:	4623      	mov	r3, r4
 8027b58:	e7e1      	b.n	8027b1e <rshift+0x68>

08027b5a <__hexdig_fun>:
 8027b5a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8027b5e:	2b09      	cmp	r3, #9
 8027b60:	d802      	bhi.n	8027b68 <__hexdig_fun+0xe>
 8027b62:	3820      	subs	r0, #32
 8027b64:	b2c0      	uxtb	r0, r0
 8027b66:	4770      	bx	lr
 8027b68:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8027b6c:	2b05      	cmp	r3, #5
 8027b6e:	d801      	bhi.n	8027b74 <__hexdig_fun+0x1a>
 8027b70:	3847      	subs	r0, #71	; 0x47
 8027b72:	e7f7      	b.n	8027b64 <__hexdig_fun+0xa>
 8027b74:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8027b78:	2b05      	cmp	r3, #5
 8027b7a:	d801      	bhi.n	8027b80 <__hexdig_fun+0x26>
 8027b7c:	3827      	subs	r0, #39	; 0x27
 8027b7e:	e7f1      	b.n	8027b64 <__hexdig_fun+0xa>
 8027b80:	2000      	movs	r0, #0
 8027b82:	4770      	bx	lr

08027b84 <__gethex>:
 8027b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027b88:	ed2d 8b02 	vpush	{d8}
 8027b8c:	b089      	sub	sp, #36	; 0x24
 8027b8e:	ee08 0a10 	vmov	s16, r0
 8027b92:	9304      	str	r3, [sp, #16]
 8027b94:	4bb4      	ldr	r3, [pc, #720]	; (8027e68 <__gethex+0x2e4>)
 8027b96:	681b      	ldr	r3, [r3, #0]
 8027b98:	9301      	str	r3, [sp, #4]
 8027b9a:	4618      	mov	r0, r3
 8027b9c:	468b      	mov	fp, r1
 8027b9e:	4690      	mov	r8, r2
 8027ba0:	f7d8 fb20 	bl	80001e4 <strlen>
 8027ba4:	9b01      	ldr	r3, [sp, #4]
 8027ba6:	f8db 2000 	ldr.w	r2, [fp]
 8027baa:	4403      	add	r3, r0
 8027bac:	4682      	mov	sl, r0
 8027bae:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8027bb2:	9305      	str	r3, [sp, #20]
 8027bb4:	1c93      	adds	r3, r2, #2
 8027bb6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8027bba:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8027bbe:	32fe      	adds	r2, #254	; 0xfe
 8027bc0:	18d1      	adds	r1, r2, r3
 8027bc2:	461f      	mov	r7, r3
 8027bc4:	f813 0b01 	ldrb.w	r0, [r3], #1
 8027bc8:	9100      	str	r1, [sp, #0]
 8027bca:	2830      	cmp	r0, #48	; 0x30
 8027bcc:	d0f8      	beq.n	8027bc0 <__gethex+0x3c>
 8027bce:	f7ff ffc4 	bl	8027b5a <__hexdig_fun>
 8027bd2:	4604      	mov	r4, r0
 8027bd4:	2800      	cmp	r0, #0
 8027bd6:	d13a      	bne.n	8027c4e <__gethex+0xca>
 8027bd8:	9901      	ldr	r1, [sp, #4]
 8027bda:	4652      	mov	r2, sl
 8027bdc:	4638      	mov	r0, r7
 8027bde:	f7fd ff62 	bl	8025aa6 <strncmp>
 8027be2:	4605      	mov	r5, r0
 8027be4:	2800      	cmp	r0, #0
 8027be6:	d168      	bne.n	8027cba <__gethex+0x136>
 8027be8:	f817 000a 	ldrb.w	r0, [r7, sl]
 8027bec:	eb07 060a 	add.w	r6, r7, sl
 8027bf0:	f7ff ffb3 	bl	8027b5a <__hexdig_fun>
 8027bf4:	2800      	cmp	r0, #0
 8027bf6:	d062      	beq.n	8027cbe <__gethex+0x13a>
 8027bf8:	4633      	mov	r3, r6
 8027bfa:	7818      	ldrb	r0, [r3, #0]
 8027bfc:	2830      	cmp	r0, #48	; 0x30
 8027bfe:	461f      	mov	r7, r3
 8027c00:	f103 0301 	add.w	r3, r3, #1
 8027c04:	d0f9      	beq.n	8027bfa <__gethex+0x76>
 8027c06:	f7ff ffa8 	bl	8027b5a <__hexdig_fun>
 8027c0a:	2301      	movs	r3, #1
 8027c0c:	fab0 f480 	clz	r4, r0
 8027c10:	0964      	lsrs	r4, r4, #5
 8027c12:	4635      	mov	r5, r6
 8027c14:	9300      	str	r3, [sp, #0]
 8027c16:	463a      	mov	r2, r7
 8027c18:	4616      	mov	r6, r2
 8027c1a:	3201      	adds	r2, #1
 8027c1c:	7830      	ldrb	r0, [r6, #0]
 8027c1e:	f7ff ff9c 	bl	8027b5a <__hexdig_fun>
 8027c22:	2800      	cmp	r0, #0
 8027c24:	d1f8      	bne.n	8027c18 <__gethex+0x94>
 8027c26:	9901      	ldr	r1, [sp, #4]
 8027c28:	4652      	mov	r2, sl
 8027c2a:	4630      	mov	r0, r6
 8027c2c:	f7fd ff3b 	bl	8025aa6 <strncmp>
 8027c30:	b980      	cbnz	r0, 8027c54 <__gethex+0xd0>
 8027c32:	b94d      	cbnz	r5, 8027c48 <__gethex+0xc4>
 8027c34:	eb06 050a 	add.w	r5, r6, sl
 8027c38:	462a      	mov	r2, r5
 8027c3a:	4616      	mov	r6, r2
 8027c3c:	3201      	adds	r2, #1
 8027c3e:	7830      	ldrb	r0, [r6, #0]
 8027c40:	f7ff ff8b 	bl	8027b5a <__hexdig_fun>
 8027c44:	2800      	cmp	r0, #0
 8027c46:	d1f8      	bne.n	8027c3a <__gethex+0xb6>
 8027c48:	1bad      	subs	r5, r5, r6
 8027c4a:	00ad      	lsls	r5, r5, #2
 8027c4c:	e004      	b.n	8027c58 <__gethex+0xd4>
 8027c4e:	2400      	movs	r4, #0
 8027c50:	4625      	mov	r5, r4
 8027c52:	e7e0      	b.n	8027c16 <__gethex+0x92>
 8027c54:	2d00      	cmp	r5, #0
 8027c56:	d1f7      	bne.n	8027c48 <__gethex+0xc4>
 8027c58:	7833      	ldrb	r3, [r6, #0]
 8027c5a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8027c5e:	2b50      	cmp	r3, #80	; 0x50
 8027c60:	d13b      	bne.n	8027cda <__gethex+0x156>
 8027c62:	7873      	ldrb	r3, [r6, #1]
 8027c64:	2b2b      	cmp	r3, #43	; 0x2b
 8027c66:	d02c      	beq.n	8027cc2 <__gethex+0x13e>
 8027c68:	2b2d      	cmp	r3, #45	; 0x2d
 8027c6a:	d02e      	beq.n	8027cca <__gethex+0x146>
 8027c6c:	1c71      	adds	r1, r6, #1
 8027c6e:	f04f 0900 	mov.w	r9, #0
 8027c72:	7808      	ldrb	r0, [r1, #0]
 8027c74:	f7ff ff71 	bl	8027b5a <__hexdig_fun>
 8027c78:	1e43      	subs	r3, r0, #1
 8027c7a:	b2db      	uxtb	r3, r3
 8027c7c:	2b18      	cmp	r3, #24
 8027c7e:	d82c      	bhi.n	8027cda <__gethex+0x156>
 8027c80:	f1a0 0210 	sub.w	r2, r0, #16
 8027c84:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8027c88:	f7ff ff67 	bl	8027b5a <__hexdig_fun>
 8027c8c:	1e43      	subs	r3, r0, #1
 8027c8e:	b2db      	uxtb	r3, r3
 8027c90:	2b18      	cmp	r3, #24
 8027c92:	d91d      	bls.n	8027cd0 <__gethex+0x14c>
 8027c94:	f1b9 0f00 	cmp.w	r9, #0
 8027c98:	d000      	beq.n	8027c9c <__gethex+0x118>
 8027c9a:	4252      	negs	r2, r2
 8027c9c:	4415      	add	r5, r2
 8027c9e:	f8cb 1000 	str.w	r1, [fp]
 8027ca2:	b1e4      	cbz	r4, 8027cde <__gethex+0x15a>
 8027ca4:	9b00      	ldr	r3, [sp, #0]
 8027ca6:	2b00      	cmp	r3, #0
 8027ca8:	bf14      	ite	ne
 8027caa:	2700      	movne	r7, #0
 8027cac:	2706      	moveq	r7, #6
 8027cae:	4638      	mov	r0, r7
 8027cb0:	b009      	add	sp, #36	; 0x24
 8027cb2:	ecbd 8b02 	vpop	{d8}
 8027cb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027cba:	463e      	mov	r6, r7
 8027cbc:	4625      	mov	r5, r4
 8027cbe:	2401      	movs	r4, #1
 8027cc0:	e7ca      	b.n	8027c58 <__gethex+0xd4>
 8027cc2:	f04f 0900 	mov.w	r9, #0
 8027cc6:	1cb1      	adds	r1, r6, #2
 8027cc8:	e7d3      	b.n	8027c72 <__gethex+0xee>
 8027cca:	f04f 0901 	mov.w	r9, #1
 8027cce:	e7fa      	b.n	8027cc6 <__gethex+0x142>
 8027cd0:	230a      	movs	r3, #10
 8027cd2:	fb03 0202 	mla	r2, r3, r2, r0
 8027cd6:	3a10      	subs	r2, #16
 8027cd8:	e7d4      	b.n	8027c84 <__gethex+0x100>
 8027cda:	4631      	mov	r1, r6
 8027cdc:	e7df      	b.n	8027c9e <__gethex+0x11a>
 8027cde:	1bf3      	subs	r3, r6, r7
 8027ce0:	3b01      	subs	r3, #1
 8027ce2:	4621      	mov	r1, r4
 8027ce4:	2b07      	cmp	r3, #7
 8027ce6:	dc0b      	bgt.n	8027d00 <__gethex+0x17c>
 8027ce8:	ee18 0a10 	vmov	r0, s16
 8027cec:	f000 faf0 	bl	80282d0 <_Balloc>
 8027cf0:	4604      	mov	r4, r0
 8027cf2:	b940      	cbnz	r0, 8027d06 <__gethex+0x182>
 8027cf4:	4b5d      	ldr	r3, [pc, #372]	; (8027e6c <__gethex+0x2e8>)
 8027cf6:	4602      	mov	r2, r0
 8027cf8:	21de      	movs	r1, #222	; 0xde
 8027cfa:	485d      	ldr	r0, [pc, #372]	; (8027e70 <__gethex+0x2ec>)
 8027cfc:	f7fe fe76 	bl	80269ec <__assert_func>
 8027d00:	3101      	adds	r1, #1
 8027d02:	105b      	asrs	r3, r3, #1
 8027d04:	e7ee      	b.n	8027ce4 <__gethex+0x160>
 8027d06:	f100 0914 	add.w	r9, r0, #20
 8027d0a:	f04f 0b00 	mov.w	fp, #0
 8027d0e:	f1ca 0301 	rsb	r3, sl, #1
 8027d12:	f8cd 9008 	str.w	r9, [sp, #8]
 8027d16:	f8cd b000 	str.w	fp, [sp]
 8027d1a:	9306      	str	r3, [sp, #24]
 8027d1c:	42b7      	cmp	r7, r6
 8027d1e:	d340      	bcc.n	8027da2 <__gethex+0x21e>
 8027d20:	9802      	ldr	r0, [sp, #8]
 8027d22:	9b00      	ldr	r3, [sp, #0]
 8027d24:	f840 3b04 	str.w	r3, [r0], #4
 8027d28:	eba0 0009 	sub.w	r0, r0, r9
 8027d2c:	1080      	asrs	r0, r0, #2
 8027d2e:	0146      	lsls	r6, r0, #5
 8027d30:	6120      	str	r0, [r4, #16]
 8027d32:	4618      	mov	r0, r3
 8027d34:	f000 fbbe 	bl	80284b4 <__hi0bits>
 8027d38:	1a30      	subs	r0, r6, r0
 8027d3a:	f8d8 6000 	ldr.w	r6, [r8]
 8027d3e:	42b0      	cmp	r0, r6
 8027d40:	dd63      	ble.n	8027e0a <__gethex+0x286>
 8027d42:	1b87      	subs	r7, r0, r6
 8027d44:	4639      	mov	r1, r7
 8027d46:	4620      	mov	r0, r4
 8027d48:	f000 ff62 	bl	8028c10 <__any_on>
 8027d4c:	4682      	mov	sl, r0
 8027d4e:	b1a8      	cbz	r0, 8027d7c <__gethex+0x1f8>
 8027d50:	1e7b      	subs	r3, r7, #1
 8027d52:	1159      	asrs	r1, r3, #5
 8027d54:	f003 021f 	and.w	r2, r3, #31
 8027d58:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8027d5c:	f04f 0a01 	mov.w	sl, #1
 8027d60:	fa0a f202 	lsl.w	r2, sl, r2
 8027d64:	420a      	tst	r2, r1
 8027d66:	d009      	beq.n	8027d7c <__gethex+0x1f8>
 8027d68:	4553      	cmp	r3, sl
 8027d6a:	dd05      	ble.n	8027d78 <__gethex+0x1f4>
 8027d6c:	1eb9      	subs	r1, r7, #2
 8027d6e:	4620      	mov	r0, r4
 8027d70:	f000 ff4e 	bl	8028c10 <__any_on>
 8027d74:	2800      	cmp	r0, #0
 8027d76:	d145      	bne.n	8027e04 <__gethex+0x280>
 8027d78:	f04f 0a02 	mov.w	sl, #2
 8027d7c:	4639      	mov	r1, r7
 8027d7e:	4620      	mov	r0, r4
 8027d80:	f7ff fe99 	bl	8027ab6 <rshift>
 8027d84:	443d      	add	r5, r7
 8027d86:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8027d8a:	42ab      	cmp	r3, r5
 8027d8c:	da4c      	bge.n	8027e28 <__gethex+0x2a4>
 8027d8e:	ee18 0a10 	vmov	r0, s16
 8027d92:	4621      	mov	r1, r4
 8027d94:	f000 fadc 	bl	8028350 <_Bfree>
 8027d98:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8027d9a:	2300      	movs	r3, #0
 8027d9c:	6013      	str	r3, [r2, #0]
 8027d9e:	27a3      	movs	r7, #163	; 0xa3
 8027da0:	e785      	b.n	8027cae <__gethex+0x12a>
 8027da2:	1e73      	subs	r3, r6, #1
 8027da4:	9a05      	ldr	r2, [sp, #20]
 8027da6:	9303      	str	r3, [sp, #12]
 8027da8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8027dac:	4293      	cmp	r3, r2
 8027dae:	d019      	beq.n	8027de4 <__gethex+0x260>
 8027db0:	f1bb 0f20 	cmp.w	fp, #32
 8027db4:	d107      	bne.n	8027dc6 <__gethex+0x242>
 8027db6:	9b02      	ldr	r3, [sp, #8]
 8027db8:	9a00      	ldr	r2, [sp, #0]
 8027dba:	f843 2b04 	str.w	r2, [r3], #4
 8027dbe:	9302      	str	r3, [sp, #8]
 8027dc0:	2300      	movs	r3, #0
 8027dc2:	9300      	str	r3, [sp, #0]
 8027dc4:	469b      	mov	fp, r3
 8027dc6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8027dca:	f7ff fec6 	bl	8027b5a <__hexdig_fun>
 8027dce:	9b00      	ldr	r3, [sp, #0]
 8027dd0:	f000 000f 	and.w	r0, r0, #15
 8027dd4:	fa00 f00b 	lsl.w	r0, r0, fp
 8027dd8:	4303      	orrs	r3, r0
 8027dda:	9300      	str	r3, [sp, #0]
 8027ddc:	f10b 0b04 	add.w	fp, fp, #4
 8027de0:	9b03      	ldr	r3, [sp, #12]
 8027de2:	e00d      	b.n	8027e00 <__gethex+0x27c>
 8027de4:	9b03      	ldr	r3, [sp, #12]
 8027de6:	9a06      	ldr	r2, [sp, #24]
 8027de8:	4413      	add	r3, r2
 8027dea:	42bb      	cmp	r3, r7
 8027dec:	d3e0      	bcc.n	8027db0 <__gethex+0x22c>
 8027dee:	4618      	mov	r0, r3
 8027df0:	9901      	ldr	r1, [sp, #4]
 8027df2:	9307      	str	r3, [sp, #28]
 8027df4:	4652      	mov	r2, sl
 8027df6:	f7fd fe56 	bl	8025aa6 <strncmp>
 8027dfa:	9b07      	ldr	r3, [sp, #28]
 8027dfc:	2800      	cmp	r0, #0
 8027dfe:	d1d7      	bne.n	8027db0 <__gethex+0x22c>
 8027e00:	461e      	mov	r6, r3
 8027e02:	e78b      	b.n	8027d1c <__gethex+0x198>
 8027e04:	f04f 0a03 	mov.w	sl, #3
 8027e08:	e7b8      	b.n	8027d7c <__gethex+0x1f8>
 8027e0a:	da0a      	bge.n	8027e22 <__gethex+0x29e>
 8027e0c:	1a37      	subs	r7, r6, r0
 8027e0e:	4621      	mov	r1, r4
 8027e10:	ee18 0a10 	vmov	r0, s16
 8027e14:	463a      	mov	r2, r7
 8027e16:	f000 fcb7 	bl	8028788 <__lshift>
 8027e1a:	1bed      	subs	r5, r5, r7
 8027e1c:	4604      	mov	r4, r0
 8027e1e:	f100 0914 	add.w	r9, r0, #20
 8027e22:	f04f 0a00 	mov.w	sl, #0
 8027e26:	e7ae      	b.n	8027d86 <__gethex+0x202>
 8027e28:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8027e2c:	42a8      	cmp	r0, r5
 8027e2e:	dd72      	ble.n	8027f16 <__gethex+0x392>
 8027e30:	1b45      	subs	r5, r0, r5
 8027e32:	42ae      	cmp	r6, r5
 8027e34:	dc36      	bgt.n	8027ea4 <__gethex+0x320>
 8027e36:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8027e3a:	2b02      	cmp	r3, #2
 8027e3c:	d02a      	beq.n	8027e94 <__gethex+0x310>
 8027e3e:	2b03      	cmp	r3, #3
 8027e40:	d02c      	beq.n	8027e9c <__gethex+0x318>
 8027e42:	2b01      	cmp	r3, #1
 8027e44:	d11c      	bne.n	8027e80 <__gethex+0x2fc>
 8027e46:	42ae      	cmp	r6, r5
 8027e48:	d11a      	bne.n	8027e80 <__gethex+0x2fc>
 8027e4a:	2e01      	cmp	r6, #1
 8027e4c:	d112      	bne.n	8027e74 <__gethex+0x2f0>
 8027e4e:	9a04      	ldr	r2, [sp, #16]
 8027e50:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8027e54:	6013      	str	r3, [r2, #0]
 8027e56:	2301      	movs	r3, #1
 8027e58:	6123      	str	r3, [r4, #16]
 8027e5a:	f8c9 3000 	str.w	r3, [r9]
 8027e5e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8027e60:	2762      	movs	r7, #98	; 0x62
 8027e62:	601c      	str	r4, [r3, #0]
 8027e64:	e723      	b.n	8027cae <__gethex+0x12a>
 8027e66:	bf00      	nop
 8027e68:	0802e810 	.word	0x0802e810
 8027e6c:	0802e734 	.word	0x0802e734
 8027e70:	0802e7a8 	.word	0x0802e7a8
 8027e74:	1e71      	subs	r1, r6, #1
 8027e76:	4620      	mov	r0, r4
 8027e78:	f000 feca 	bl	8028c10 <__any_on>
 8027e7c:	2800      	cmp	r0, #0
 8027e7e:	d1e6      	bne.n	8027e4e <__gethex+0x2ca>
 8027e80:	ee18 0a10 	vmov	r0, s16
 8027e84:	4621      	mov	r1, r4
 8027e86:	f000 fa63 	bl	8028350 <_Bfree>
 8027e8a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8027e8c:	2300      	movs	r3, #0
 8027e8e:	6013      	str	r3, [r2, #0]
 8027e90:	2750      	movs	r7, #80	; 0x50
 8027e92:	e70c      	b.n	8027cae <__gethex+0x12a>
 8027e94:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8027e96:	2b00      	cmp	r3, #0
 8027e98:	d1f2      	bne.n	8027e80 <__gethex+0x2fc>
 8027e9a:	e7d8      	b.n	8027e4e <__gethex+0x2ca>
 8027e9c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8027e9e:	2b00      	cmp	r3, #0
 8027ea0:	d1d5      	bne.n	8027e4e <__gethex+0x2ca>
 8027ea2:	e7ed      	b.n	8027e80 <__gethex+0x2fc>
 8027ea4:	1e6f      	subs	r7, r5, #1
 8027ea6:	f1ba 0f00 	cmp.w	sl, #0
 8027eaa:	d131      	bne.n	8027f10 <__gethex+0x38c>
 8027eac:	b127      	cbz	r7, 8027eb8 <__gethex+0x334>
 8027eae:	4639      	mov	r1, r7
 8027eb0:	4620      	mov	r0, r4
 8027eb2:	f000 fead 	bl	8028c10 <__any_on>
 8027eb6:	4682      	mov	sl, r0
 8027eb8:	117b      	asrs	r3, r7, #5
 8027eba:	2101      	movs	r1, #1
 8027ebc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8027ec0:	f007 071f 	and.w	r7, r7, #31
 8027ec4:	fa01 f707 	lsl.w	r7, r1, r7
 8027ec8:	421f      	tst	r7, r3
 8027eca:	4629      	mov	r1, r5
 8027ecc:	4620      	mov	r0, r4
 8027ece:	bf18      	it	ne
 8027ed0:	f04a 0a02 	orrne.w	sl, sl, #2
 8027ed4:	1b76      	subs	r6, r6, r5
 8027ed6:	f7ff fdee 	bl	8027ab6 <rshift>
 8027eda:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8027ede:	2702      	movs	r7, #2
 8027ee0:	f1ba 0f00 	cmp.w	sl, #0
 8027ee4:	d048      	beq.n	8027f78 <__gethex+0x3f4>
 8027ee6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8027eea:	2b02      	cmp	r3, #2
 8027eec:	d015      	beq.n	8027f1a <__gethex+0x396>
 8027eee:	2b03      	cmp	r3, #3
 8027ef0:	d017      	beq.n	8027f22 <__gethex+0x39e>
 8027ef2:	2b01      	cmp	r3, #1
 8027ef4:	d109      	bne.n	8027f0a <__gethex+0x386>
 8027ef6:	f01a 0f02 	tst.w	sl, #2
 8027efa:	d006      	beq.n	8027f0a <__gethex+0x386>
 8027efc:	f8d9 0000 	ldr.w	r0, [r9]
 8027f00:	ea4a 0a00 	orr.w	sl, sl, r0
 8027f04:	f01a 0f01 	tst.w	sl, #1
 8027f08:	d10e      	bne.n	8027f28 <__gethex+0x3a4>
 8027f0a:	f047 0710 	orr.w	r7, r7, #16
 8027f0e:	e033      	b.n	8027f78 <__gethex+0x3f4>
 8027f10:	f04f 0a01 	mov.w	sl, #1
 8027f14:	e7d0      	b.n	8027eb8 <__gethex+0x334>
 8027f16:	2701      	movs	r7, #1
 8027f18:	e7e2      	b.n	8027ee0 <__gethex+0x35c>
 8027f1a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8027f1c:	f1c3 0301 	rsb	r3, r3, #1
 8027f20:	9315      	str	r3, [sp, #84]	; 0x54
 8027f22:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8027f24:	2b00      	cmp	r3, #0
 8027f26:	d0f0      	beq.n	8027f0a <__gethex+0x386>
 8027f28:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8027f2c:	f104 0314 	add.w	r3, r4, #20
 8027f30:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8027f34:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8027f38:	f04f 0c00 	mov.w	ip, #0
 8027f3c:	4618      	mov	r0, r3
 8027f3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8027f42:	f1b2 3fff 	cmp.w	r2, #4294967295
 8027f46:	d01c      	beq.n	8027f82 <__gethex+0x3fe>
 8027f48:	3201      	adds	r2, #1
 8027f4a:	6002      	str	r2, [r0, #0]
 8027f4c:	2f02      	cmp	r7, #2
 8027f4e:	f104 0314 	add.w	r3, r4, #20
 8027f52:	d13f      	bne.n	8027fd4 <__gethex+0x450>
 8027f54:	f8d8 2000 	ldr.w	r2, [r8]
 8027f58:	3a01      	subs	r2, #1
 8027f5a:	42b2      	cmp	r2, r6
 8027f5c:	d10a      	bne.n	8027f74 <__gethex+0x3f0>
 8027f5e:	1171      	asrs	r1, r6, #5
 8027f60:	2201      	movs	r2, #1
 8027f62:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8027f66:	f006 061f 	and.w	r6, r6, #31
 8027f6a:	fa02 f606 	lsl.w	r6, r2, r6
 8027f6e:	421e      	tst	r6, r3
 8027f70:	bf18      	it	ne
 8027f72:	4617      	movne	r7, r2
 8027f74:	f047 0720 	orr.w	r7, r7, #32
 8027f78:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8027f7a:	601c      	str	r4, [r3, #0]
 8027f7c:	9b04      	ldr	r3, [sp, #16]
 8027f7e:	601d      	str	r5, [r3, #0]
 8027f80:	e695      	b.n	8027cae <__gethex+0x12a>
 8027f82:	4299      	cmp	r1, r3
 8027f84:	f843 cc04 	str.w	ip, [r3, #-4]
 8027f88:	d8d8      	bhi.n	8027f3c <__gethex+0x3b8>
 8027f8a:	68a3      	ldr	r3, [r4, #8]
 8027f8c:	459b      	cmp	fp, r3
 8027f8e:	db19      	blt.n	8027fc4 <__gethex+0x440>
 8027f90:	6861      	ldr	r1, [r4, #4]
 8027f92:	ee18 0a10 	vmov	r0, s16
 8027f96:	3101      	adds	r1, #1
 8027f98:	f000 f99a 	bl	80282d0 <_Balloc>
 8027f9c:	4681      	mov	r9, r0
 8027f9e:	b918      	cbnz	r0, 8027fa8 <__gethex+0x424>
 8027fa0:	4b1a      	ldr	r3, [pc, #104]	; (802800c <__gethex+0x488>)
 8027fa2:	4602      	mov	r2, r0
 8027fa4:	2184      	movs	r1, #132	; 0x84
 8027fa6:	e6a8      	b.n	8027cfa <__gethex+0x176>
 8027fa8:	6922      	ldr	r2, [r4, #16]
 8027faa:	3202      	adds	r2, #2
 8027fac:	f104 010c 	add.w	r1, r4, #12
 8027fb0:	0092      	lsls	r2, r2, #2
 8027fb2:	300c      	adds	r0, #12
 8027fb4:	f7fc fd26 	bl	8024a04 <memcpy>
 8027fb8:	4621      	mov	r1, r4
 8027fba:	ee18 0a10 	vmov	r0, s16
 8027fbe:	f000 f9c7 	bl	8028350 <_Bfree>
 8027fc2:	464c      	mov	r4, r9
 8027fc4:	6923      	ldr	r3, [r4, #16]
 8027fc6:	1c5a      	adds	r2, r3, #1
 8027fc8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8027fcc:	6122      	str	r2, [r4, #16]
 8027fce:	2201      	movs	r2, #1
 8027fd0:	615a      	str	r2, [r3, #20]
 8027fd2:	e7bb      	b.n	8027f4c <__gethex+0x3c8>
 8027fd4:	6922      	ldr	r2, [r4, #16]
 8027fd6:	455a      	cmp	r2, fp
 8027fd8:	dd0b      	ble.n	8027ff2 <__gethex+0x46e>
 8027fda:	2101      	movs	r1, #1
 8027fdc:	4620      	mov	r0, r4
 8027fde:	f7ff fd6a 	bl	8027ab6 <rshift>
 8027fe2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8027fe6:	3501      	adds	r5, #1
 8027fe8:	42ab      	cmp	r3, r5
 8027fea:	f6ff aed0 	blt.w	8027d8e <__gethex+0x20a>
 8027fee:	2701      	movs	r7, #1
 8027ff0:	e7c0      	b.n	8027f74 <__gethex+0x3f0>
 8027ff2:	f016 061f 	ands.w	r6, r6, #31
 8027ff6:	d0fa      	beq.n	8027fee <__gethex+0x46a>
 8027ff8:	4453      	add	r3, sl
 8027ffa:	f1c6 0620 	rsb	r6, r6, #32
 8027ffe:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8028002:	f000 fa57 	bl	80284b4 <__hi0bits>
 8028006:	42b0      	cmp	r0, r6
 8028008:	dbe7      	blt.n	8027fda <__gethex+0x456>
 802800a:	e7f0      	b.n	8027fee <__gethex+0x46a>
 802800c:	0802e734 	.word	0x0802e734

08028010 <L_shift>:
 8028010:	f1c2 0208 	rsb	r2, r2, #8
 8028014:	0092      	lsls	r2, r2, #2
 8028016:	b570      	push	{r4, r5, r6, lr}
 8028018:	f1c2 0620 	rsb	r6, r2, #32
 802801c:	6843      	ldr	r3, [r0, #4]
 802801e:	6804      	ldr	r4, [r0, #0]
 8028020:	fa03 f506 	lsl.w	r5, r3, r6
 8028024:	432c      	orrs	r4, r5
 8028026:	40d3      	lsrs	r3, r2
 8028028:	6004      	str	r4, [r0, #0]
 802802a:	f840 3f04 	str.w	r3, [r0, #4]!
 802802e:	4288      	cmp	r0, r1
 8028030:	d3f4      	bcc.n	802801c <L_shift+0xc>
 8028032:	bd70      	pop	{r4, r5, r6, pc}

08028034 <__match>:
 8028034:	b530      	push	{r4, r5, lr}
 8028036:	6803      	ldr	r3, [r0, #0]
 8028038:	3301      	adds	r3, #1
 802803a:	f811 4b01 	ldrb.w	r4, [r1], #1
 802803e:	b914      	cbnz	r4, 8028046 <__match+0x12>
 8028040:	6003      	str	r3, [r0, #0]
 8028042:	2001      	movs	r0, #1
 8028044:	bd30      	pop	{r4, r5, pc}
 8028046:	f813 2b01 	ldrb.w	r2, [r3], #1
 802804a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 802804e:	2d19      	cmp	r5, #25
 8028050:	bf98      	it	ls
 8028052:	3220      	addls	r2, #32
 8028054:	42a2      	cmp	r2, r4
 8028056:	d0f0      	beq.n	802803a <__match+0x6>
 8028058:	2000      	movs	r0, #0
 802805a:	e7f3      	b.n	8028044 <__match+0x10>

0802805c <__hexnan>:
 802805c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028060:	680b      	ldr	r3, [r1, #0]
 8028062:	115e      	asrs	r6, r3, #5
 8028064:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8028068:	f013 031f 	ands.w	r3, r3, #31
 802806c:	b087      	sub	sp, #28
 802806e:	bf18      	it	ne
 8028070:	3604      	addne	r6, #4
 8028072:	2500      	movs	r5, #0
 8028074:	1f37      	subs	r7, r6, #4
 8028076:	4690      	mov	r8, r2
 8028078:	6802      	ldr	r2, [r0, #0]
 802807a:	9301      	str	r3, [sp, #4]
 802807c:	4682      	mov	sl, r0
 802807e:	f846 5c04 	str.w	r5, [r6, #-4]
 8028082:	46b9      	mov	r9, r7
 8028084:	463c      	mov	r4, r7
 8028086:	9502      	str	r5, [sp, #8]
 8028088:	46ab      	mov	fp, r5
 802808a:	7851      	ldrb	r1, [r2, #1]
 802808c:	1c53      	adds	r3, r2, #1
 802808e:	9303      	str	r3, [sp, #12]
 8028090:	b341      	cbz	r1, 80280e4 <__hexnan+0x88>
 8028092:	4608      	mov	r0, r1
 8028094:	9205      	str	r2, [sp, #20]
 8028096:	9104      	str	r1, [sp, #16]
 8028098:	f7ff fd5f 	bl	8027b5a <__hexdig_fun>
 802809c:	2800      	cmp	r0, #0
 802809e:	d14f      	bne.n	8028140 <__hexnan+0xe4>
 80280a0:	9904      	ldr	r1, [sp, #16]
 80280a2:	9a05      	ldr	r2, [sp, #20]
 80280a4:	2920      	cmp	r1, #32
 80280a6:	d818      	bhi.n	80280da <__hexnan+0x7e>
 80280a8:	9b02      	ldr	r3, [sp, #8]
 80280aa:	459b      	cmp	fp, r3
 80280ac:	dd13      	ble.n	80280d6 <__hexnan+0x7a>
 80280ae:	454c      	cmp	r4, r9
 80280b0:	d206      	bcs.n	80280c0 <__hexnan+0x64>
 80280b2:	2d07      	cmp	r5, #7
 80280b4:	dc04      	bgt.n	80280c0 <__hexnan+0x64>
 80280b6:	462a      	mov	r2, r5
 80280b8:	4649      	mov	r1, r9
 80280ba:	4620      	mov	r0, r4
 80280bc:	f7ff ffa8 	bl	8028010 <L_shift>
 80280c0:	4544      	cmp	r4, r8
 80280c2:	d950      	bls.n	8028166 <__hexnan+0x10a>
 80280c4:	2300      	movs	r3, #0
 80280c6:	f1a4 0904 	sub.w	r9, r4, #4
 80280ca:	f844 3c04 	str.w	r3, [r4, #-4]
 80280ce:	f8cd b008 	str.w	fp, [sp, #8]
 80280d2:	464c      	mov	r4, r9
 80280d4:	461d      	mov	r5, r3
 80280d6:	9a03      	ldr	r2, [sp, #12]
 80280d8:	e7d7      	b.n	802808a <__hexnan+0x2e>
 80280da:	2929      	cmp	r1, #41	; 0x29
 80280dc:	d156      	bne.n	802818c <__hexnan+0x130>
 80280de:	3202      	adds	r2, #2
 80280e0:	f8ca 2000 	str.w	r2, [sl]
 80280e4:	f1bb 0f00 	cmp.w	fp, #0
 80280e8:	d050      	beq.n	802818c <__hexnan+0x130>
 80280ea:	454c      	cmp	r4, r9
 80280ec:	d206      	bcs.n	80280fc <__hexnan+0xa0>
 80280ee:	2d07      	cmp	r5, #7
 80280f0:	dc04      	bgt.n	80280fc <__hexnan+0xa0>
 80280f2:	462a      	mov	r2, r5
 80280f4:	4649      	mov	r1, r9
 80280f6:	4620      	mov	r0, r4
 80280f8:	f7ff ff8a 	bl	8028010 <L_shift>
 80280fc:	4544      	cmp	r4, r8
 80280fe:	d934      	bls.n	802816a <__hexnan+0x10e>
 8028100:	f1a8 0204 	sub.w	r2, r8, #4
 8028104:	4623      	mov	r3, r4
 8028106:	f853 1b04 	ldr.w	r1, [r3], #4
 802810a:	f842 1f04 	str.w	r1, [r2, #4]!
 802810e:	429f      	cmp	r7, r3
 8028110:	d2f9      	bcs.n	8028106 <__hexnan+0xaa>
 8028112:	1b3b      	subs	r3, r7, r4
 8028114:	f023 0303 	bic.w	r3, r3, #3
 8028118:	3304      	adds	r3, #4
 802811a:	3401      	adds	r4, #1
 802811c:	3e03      	subs	r6, #3
 802811e:	42b4      	cmp	r4, r6
 8028120:	bf88      	it	hi
 8028122:	2304      	movhi	r3, #4
 8028124:	4443      	add	r3, r8
 8028126:	2200      	movs	r2, #0
 8028128:	f843 2b04 	str.w	r2, [r3], #4
 802812c:	429f      	cmp	r7, r3
 802812e:	d2fb      	bcs.n	8028128 <__hexnan+0xcc>
 8028130:	683b      	ldr	r3, [r7, #0]
 8028132:	b91b      	cbnz	r3, 802813c <__hexnan+0xe0>
 8028134:	4547      	cmp	r7, r8
 8028136:	d127      	bne.n	8028188 <__hexnan+0x12c>
 8028138:	2301      	movs	r3, #1
 802813a:	603b      	str	r3, [r7, #0]
 802813c:	2005      	movs	r0, #5
 802813e:	e026      	b.n	802818e <__hexnan+0x132>
 8028140:	3501      	adds	r5, #1
 8028142:	2d08      	cmp	r5, #8
 8028144:	f10b 0b01 	add.w	fp, fp, #1
 8028148:	dd06      	ble.n	8028158 <__hexnan+0xfc>
 802814a:	4544      	cmp	r4, r8
 802814c:	d9c3      	bls.n	80280d6 <__hexnan+0x7a>
 802814e:	2300      	movs	r3, #0
 8028150:	f844 3c04 	str.w	r3, [r4, #-4]
 8028154:	2501      	movs	r5, #1
 8028156:	3c04      	subs	r4, #4
 8028158:	6822      	ldr	r2, [r4, #0]
 802815a:	f000 000f 	and.w	r0, r0, #15
 802815e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8028162:	6022      	str	r2, [r4, #0]
 8028164:	e7b7      	b.n	80280d6 <__hexnan+0x7a>
 8028166:	2508      	movs	r5, #8
 8028168:	e7b5      	b.n	80280d6 <__hexnan+0x7a>
 802816a:	9b01      	ldr	r3, [sp, #4]
 802816c:	2b00      	cmp	r3, #0
 802816e:	d0df      	beq.n	8028130 <__hexnan+0xd4>
 8028170:	f04f 32ff 	mov.w	r2, #4294967295
 8028174:	f1c3 0320 	rsb	r3, r3, #32
 8028178:	fa22 f303 	lsr.w	r3, r2, r3
 802817c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8028180:	401a      	ands	r2, r3
 8028182:	f846 2c04 	str.w	r2, [r6, #-4]
 8028186:	e7d3      	b.n	8028130 <__hexnan+0xd4>
 8028188:	3f04      	subs	r7, #4
 802818a:	e7d1      	b.n	8028130 <__hexnan+0xd4>
 802818c:	2004      	movs	r0, #4
 802818e:	b007      	add	sp, #28
 8028190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08028194 <_localeconv_r>:
 8028194:	4800      	ldr	r0, [pc, #0]	; (8028198 <_localeconv_r+0x4>)
 8028196:	4770      	bx	lr
 8028198:	100001c8 	.word	0x100001c8

0802819c <__retarget_lock_init_recursive>:
 802819c:	4770      	bx	lr

0802819e <__retarget_lock_acquire_recursive>:
 802819e:	4770      	bx	lr

080281a0 <__retarget_lock_release_recursive>:
 80281a0:	4770      	bx	lr
	...

080281a4 <_lseek_r>:
 80281a4:	b538      	push	{r3, r4, r5, lr}
 80281a6:	4d07      	ldr	r5, [pc, #28]	; (80281c4 <_lseek_r+0x20>)
 80281a8:	4604      	mov	r4, r0
 80281aa:	4608      	mov	r0, r1
 80281ac:	4611      	mov	r1, r2
 80281ae:	2200      	movs	r2, #0
 80281b0:	602a      	str	r2, [r5, #0]
 80281b2:	461a      	mov	r2, r3
 80281b4:	f7e1 feb4 	bl	8009f20 <_lseek>
 80281b8:	1c43      	adds	r3, r0, #1
 80281ba:	d102      	bne.n	80281c2 <_lseek_r+0x1e>
 80281bc:	682b      	ldr	r3, [r5, #0]
 80281be:	b103      	cbz	r3, 80281c2 <_lseek_r+0x1e>
 80281c0:	6023      	str	r3, [r4, #0]
 80281c2:	bd38      	pop	{r3, r4, r5, pc}
 80281c4:	20013930 	.word	0x20013930

080281c8 <__swhatbuf_r>:
 80281c8:	b570      	push	{r4, r5, r6, lr}
 80281ca:	460e      	mov	r6, r1
 80281cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80281d0:	2900      	cmp	r1, #0
 80281d2:	b096      	sub	sp, #88	; 0x58
 80281d4:	4614      	mov	r4, r2
 80281d6:	461d      	mov	r5, r3
 80281d8:	da08      	bge.n	80281ec <__swhatbuf_r+0x24>
 80281da:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80281de:	2200      	movs	r2, #0
 80281e0:	602a      	str	r2, [r5, #0]
 80281e2:	061a      	lsls	r2, r3, #24
 80281e4:	d410      	bmi.n	8028208 <__swhatbuf_r+0x40>
 80281e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80281ea:	e00e      	b.n	802820a <__swhatbuf_r+0x42>
 80281ec:	466a      	mov	r2, sp
 80281ee:	f001 fb09 	bl	8029804 <_fstat_r>
 80281f2:	2800      	cmp	r0, #0
 80281f4:	dbf1      	blt.n	80281da <__swhatbuf_r+0x12>
 80281f6:	9a01      	ldr	r2, [sp, #4]
 80281f8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80281fc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8028200:	425a      	negs	r2, r3
 8028202:	415a      	adcs	r2, r3
 8028204:	602a      	str	r2, [r5, #0]
 8028206:	e7ee      	b.n	80281e6 <__swhatbuf_r+0x1e>
 8028208:	2340      	movs	r3, #64	; 0x40
 802820a:	2000      	movs	r0, #0
 802820c:	6023      	str	r3, [r4, #0]
 802820e:	b016      	add	sp, #88	; 0x58
 8028210:	bd70      	pop	{r4, r5, r6, pc}
	...

08028214 <__smakebuf_r>:
 8028214:	898b      	ldrh	r3, [r1, #12]
 8028216:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8028218:	079d      	lsls	r5, r3, #30
 802821a:	4606      	mov	r6, r0
 802821c:	460c      	mov	r4, r1
 802821e:	d507      	bpl.n	8028230 <__smakebuf_r+0x1c>
 8028220:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8028224:	6023      	str	r3, [r4, #0]
 8028226:	6123      	str	r3, [r4, #16]
 8028228:	2301      	movs	r3, #1
 802822a:	6163      	str	r3, [r4, #20]
 802822c:	b002      	add	sp, #8
 802822e:	bd70      	pop	{r4, r5, r6, pc}
 8028230:	ab01      	add	r3, sp, #4
 8028232:	466a      	mov	r2, sp
 8028234:	f7ff ffc8 	bl	80281c8 <__swhatbuf_r>
 8028238:	9900      	ldr	r1, [sp, #0]
 802823a:	4605      	mov	r5, r0
 802823c:	4630      	mov	r0, r6
 802823e:	f7fc fc7d 	bl	8024b3c <_malloc_r>
 8028242:	b948      	cbnz	r0, 8028258 <__smakebuf_r+0x44>
 8028244:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8028248:	059a      	lsls	r2, r3, #22
 802824a:	d4ef      	bmi.n	802822c <__smakebuf_r+0x18>
 802824c:	f023 0303 	bic.w	r3, r3, #3
 8028250:	f043 0302 	orr.w	r3, r3, #2
 8028254:	81a3      	strh	r3, [r4, #12]
 8028256:	e7e3      	b.n	8028220 <__smakebuf_r+0xc>
 8028258:	4b0d      	ldr	r3, [pc, #52]	; (8028290 <__smakebuf_r+0x7c>)
 802825a:	62b3      	str	r3, [r6, #40]	; 0x28
 802825c:	89a3      	ldrh	r3, [r4, #12]
 802825e:	6020      	str	r0, [r4, #0]
 8028260:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8028264:	81a3      	strh	r3, [r4, #12]
 8028266:	9b00      	ldr	r3, [sp, #0]
 8028268:	6163      	str	r3, [r4, #20]
 802826a:	9b01      	ldr	r3, [sp, #4]
 802826c:	6120      	str	r0, [r4, #16]
 802826e:	b15b      	cbz	r3, 8028288 <__smakebuf_r+0x74>
 8028270:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8028274:	4630      	mov	r0, r6
 8028276:	f001 fad7 	bl	8029828 <_isatty_r>
 802827a:	b128      	cbz	r0, 8028288 <__smakebuf_r+0x74>
 802827c:	89a3      	ldrh	r3, [r4, #12]
 802827e:	f023 0303 	bic.w	r3, r3, #3
 8028282:	f043 0301 	orr.w	r3, r3, #1
 8028286:	81a3      	strh	r3, [r4, #12]
 8028288:	89a0      	ldrh	r0, [r4, #12]
 802828a:	4305      	orrs	r5, r0
 802828c:	81a5      	strh	r5, [r4, #12]
 802828e:	e7cd      	b.n	802822c <__smakebuf_r+0x18>
 8028290:	08027915 	.word	0x08027915

08028294 <__ascii_mbtowc>:
 8028294:	b082      	sub	sp, #8
 8028296:	b901      	cbnz	r1, 802829a <__ascii_mbtowc+0x6>
 8028298:	a901      	add	r1, sp, #4
 802829a:	b142      	cbz	r2, 80282ae <__ascii_mbtowc+0x1a>
 802829c:	b14b      	cbz	r3, 80282b2 <__ascii_mbtowc+0x1e>
 802829e:	7813      	ldrb	r3, [r2, #0]
 80282a0:	600b      	str	r3, [r1, #0]
 80282a2:	7812      	ldrb	r2, [r2, #0]
 80282a4:	1e10      	subs	r0, r2, #0
 80282a6:	bf18      	it	ne
 80282a8:	2001      	movne	r0, #1
 80282aa:	b002      	add	sp, #8
 80282ac:	4770      	bx	lr
 80282ae:	4610      	mov	r0, r2
 80282b0:	e7fb      	b.n	80282aa <__ascii_mbtowc+0x16>
 80282b2:	f06f 0001 	mvn.w	r0, #1
 80282b6:	e7f8      	b.n	80282aa <__ascii_mbtowc+0x16>

080282b8 <__malloc_lock>:
 80282b8:	4801      	ldr	r0, [pc, #4]	; (80282c0 <__malloc_lock+0x8>)
 80282ba:	f7ff bf70 	b.w	802819e <__retarget_lock_acquire_recursive>
 80282be:	bf00      	nop
 80282c0:	20013934 	.word	0x20013934

080282c4 <__malloc_unlock>:
 80282c4:	4801      	ldr	r0, [pc, #4]	; (80282cc <__malloc_unlock+0x8>)
 80282c6:	f7ff bf6b 	b.w	80281a0 <__retarget_lock_release_recursive>
 80282ca:	bf00      	nop
 80282cc:	20013934 	.word	0x20013934

080282d0 <_Balloc>:
 80282d0:	b570      	push	{r4, r5, r6, lr}
 80282d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80282d4:	4604      	mov	r4, r0
 80282d6:	460d      	mov	r5, r1
 80282d8:	b976      	cbnz	r6, 80282f8 <_Balloc+0x28>
 80282da:	2010      	movs	r0, #16
 80282dc:	f7fc fb72 	bl	80249c4 <malloc>
 80282e0:	4602      	mov	r2, r0
 80282e2:	6260      	str	r0, [r4, #36]	; 0x24
 80282e4:	b920      	cbnz	r0, 80282f0 <_Balloc+0x20>
 80282e6:	4b18      	ldr	r3, [pc, #96]	; (8028348 <_Balloc+0x78>)
 80282e8:	4818      	ldr	r0, [pc, #96]	; (802834c <_Balloc+0x7c>)
 80282ea:	2166      	movs	r1, #102	; 0x66
 80282ec:	f7fe fb7e 	bl	80269ec <__assert_func>
 80282f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80282f4:	6006      	str	r6, [r0, #0]
 80282f6:	60c6      	str	r6, [r0, #12]
 80282f8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80282fa:	68f3      	ldr	r3, [r6, #12]
 80282fc:	b183      	cbz	r3, 8028320 <_Balloc+0x50>
 80282fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8028300:	68db      	ldr	r3, [r3, #12]
 8028302:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8028306:	b9b8      	cbnz	r0, 8028338 <_Balloc+0x68>
 8028308:	2101      	movs	r1, #1
 802830a:	fa01 f605 	lsl.w	r6, r1, r5
 802830e:	1d72      	adds	r2, r6, #5
 8028310:	0092      	lsls	r2, r2, #2
 8028312:	4620      	mov	r0, r4
 8028314:	f000 fc9d 	bl	8028c52 <_calloc_r>
 8028318:	b160      	cbz	r0, 8028334 <_Balloc+0x64>
 802831a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 802831e:	e00e      	b.n	802833e <_Balloc+0x6e>
 8028320:	2221      	movs	r2, #33	; 0x21
 8028322:	2104      	movs	r1, #4
 8028324:	4620      	mov	r0, r4
 8028326:	f000 fc94 	bl	8028c52 <_calloc_r>
 802832a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802832c:	60f0      	str	r0, [r6, #12]
 802832e:	68db      	ldr	r3, [r3, #12]
 8028330:	2b00      	cmp	r3, #0
 8028332:	d1e4      	bne.n	80282fe <_Balloc+0x2e>
 8028334:	2000      	movs	r0, #0
 8028336:	bd70      	pop	{r4, r5, r6, pc}
 8028338:	6802      	ldr	r2, [r0, #0]
 802833a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 802833e:	2300      	movs	r3, #0
 8028340:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8028344:	e7f7      	b.n	8028336 <_Balloc+0x66>
 8028346:	bf00      	nop
 8028348:	0802e5c7 	.word	0x0802e5c7
 802834c:	0802e824 	.word	0x0802e824

08028350 <_Bfree>:
 8028350:	b570      	push	{r4, r5, r6, lr}
 8028352:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8028354:	4605      	mov	r5, r0
 8028356:	460c      	mov	r4, r1
 8028358:	b976      	cbnz	r6, 8028378 <_Bfree+0x28>
 802835a:	2010      	movs	r0, #16
 802835c:	f7fc fb32 	bl	80249c4 <malloc>
 8028360:	4602      	mov	r2, r0
 8028362:	6268      	str	r0, [r5, #36]	; 0x24
 8028364:	b920      	cbnz	r0, 8028370 <_Bfree+0x20>
 8028366:	4b09      	ldr	r3, [pc, #36]	; (802838c <_Bfree+0x3c>)
 8028368:	4809      	ldr	r0, [pc, #36]	; (8028390 <_Bfree+0x40>)
 802836a:	218a      	movs	r1, #138	; 0x8a
 802836c:	f7fe fb3e 	bl	80269ec <__assert_func>
 8028370:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8028374:	6006      	str	r6, [r0, #0]
 8028376:	60c6      	str	r6, [r0, #12]
 8028378:	b13c      	cbz	r4, 802838a <_Bfree+0x3a>
 802837a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 802837c:	6862      	ldr	r2, [r4, #4]
 802837e:	68db      	ldr	r3, [r3, #12]
 8028380:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8028384:	6021      	str	r1, [r4, #0]
 8028386:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 802838a:	bd70      	pop	{r4, r5, r6, pc}
 802838c:	0802e5c7 	.word	0x0802e5c7
 8028390:	0802e824 	.word	0x0802e824

08028394 <__multadd>:
 8028394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028398:	690d      	ldr	r5, [r1, #16]
 802839a:	4607      	mov	r7, r0
 802839c:	460c      	mov	r4, r1
 802839e:	461e      	mov	r6, r3
 80283a0:	f101 0c14 	add.w	ip, r1, #20
 80283a4:	2000      	movs	r0, #0
 80283a6:	f8dc 3000 	ldr.w	r3, [ip]
 80283aa:	b299      	uxth	r1, r3
 80283ac:	fb02 6101 	mla	r1, r2, r1, r6
 80283b0:	0c1e      	lsrs	r6, r3, #16
 80283b2:	0c0b      	lsrs	r3, r1, #16
 80283b4:	fb02 3306 	mla	r3, r2, r6, r3
 80283b8:	b289      	uxth	r1, r1
 80283ba:	3001      	adds	r0, #1
 80283bc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80283c0:	4285      	cmp	r5, r0
 80283c2:	f84c 1b04 	str.w	r1, [ip], #4
 80283c6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80283ca:	dcec      	bgt.n	80283a6 <__multadd+0x12>
 80283cc:	b30e      	cbz	r6, 8028412 <__multadd+0x7e>
 80283ce:	68a3      	ldr	r3, [r4, #8]
 80283d0:	42ab      	cmp	r3, r5
 80283d2:	dc19      	bgt.n	8028408 <__multadd+0x74>
 80283d4:	6861      	ldr	r1, [r4, #4]
 80283d6:	4638      	mov	r0, r7
 80283d8:	3101      	adds	r1, #1
 80283da:	f7ff ff79 	bl	80282d0 <_Balloc>
 80283de:	4680      	mov	r8, r0
 80283e0:	b928      	cbnz	r0, 80283ee <__multadd+0x5a>
 80283e2:	4602      	mov	r2, r0
 80283e4:	4b0c      	ldr	r3, [pc, #48]	; (8028418 <__multadd+0x84>)
 80283e6:	480d      	ldr	r0, [pc, #52]	; (802841c <__multadd+0x88>)
 80283e8:	21b5      	movs	r1, #181	; 0xb5
 80283ea:	f7fe faff 	bl	80269ec <__assert_func>
 80283ee:	6922      	ldr	r2, [r4, #16]
 80283f0:	3202      	adds	r2, #2
 80283f2:	f104 010c 	add.w	r1, r4, #12
 80283f6:	0092      	lsls	r2, r2, #2
 80283f8:	300c      	adds	r0, #12
 80283fa:	f7fc fb03 	bl	8024a04 <memcpy>
 80283fe:	4621      	mov	r1, r4
 8028400:	4638      	mov	r0, r7
 8028402:	f7ff ffa5 	bl	8028350 <_Bfree>
 8028406:	4644      	mov	r4, r8
 8028408:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 802840c:	3501      	adds	r5, #1
 802840e:	615e      	str	r6, [r3, #20]
 8028410:	6125      	str	r5, [r4, #16]
 8028412:	4620      	mov	r0, r4
 8028414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028418:	0802e734 	.word	0x0802e734
 802841c:	0802e824 	.word	0x0802e824

08028420 <__s2b>:
 8028420:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8028424:	460c      	mov	r4, r1
 8028426:	4615      	mov	r5, r2
 8028428:	461f      	mov	r7, r3
 802842a:	2209      	movs	r2, #9
 802842c:	3308      	adds	r3, #8
 802842e:	4606      	mov	r6, r0
 8028430:	fb93 f3f2 	sdiv	r3, r3, r2
 8028434:	2100      	movs	r1, #0
 8028436:	2201      	movs	r2, #1
 8028438:	429a      	cmp	r2, r3
 802843a:	db09      	blt.n	8028450 <__s2b+0x30>
 802843c:	4630      	mov	r0, r6
 802843e:	f7ff ff47 	bl	80282d0 <_Balloc>
 8028442:	b940      	cbnz	r0, 8028456 <__s2b+0x36>
 8028444:	4602      	mov	r2, r0
 8028446:	4b19      	ldr	r3, [pc, #100]	; (80284ac <__s2b+0x8c>)
 8028448:	4819      	ldr	r0, [pc, #100]	; (80284b0 <__s2b+0x90>)
 802844a:	21ce      	movs	r1, #206	; 0xce
 802844c:	f7fe face 	bl	80269ec <__assert_func>
 8028450:	0052      	lsls	r2, r2, #1
 8028452:	3101      	adds	r1, #1
 8028454:	e7f0      	b.n	8028438 <__s2b+0x18>
 8028456:	9b08      	ldr	r3, [sp, #32]
 8028458:	6143      	str	r3, [r0, #20]
 802845a:	2d09      	cmp	r5, #9
 802845c:	f04f 0301 	mov.w	r3, #1
 8028460:	6103      	str	r3, [r0, #16]
 8028462:	dd16      	ble.n	8028492 <__s2b+0x72>
 8028464:	f104 0909 	add.w	r9, r4, #9
 8028468:	46c8      	mov	r8, r9
 802846a:	442c      	add	r4, r5
 802846c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8028470:	4601      	mov	r1, r0
 8028472:	3b30      	subs	r3, #48	; 0x30
 8028474:	220a      	movs	r2, #10
 8028476:	4630      	mov	r0, r6
 8028478:	f7ff ff8c 	bl	8028394 <__multadd>
 802847c:	45a0      	cmp	r8, r4
 802847e:	d1f5      	bne.n	802846c <__s2b+0x4c>
 8028480:	f1a5 0408 	sub.w	r4, r5, #8
 8028484:	444c      	add	r4, r9
 8028486:	1b2d      	subs	r5, r5, r4
 8028488:	1963      	adds	r3, r4, r5
 802848a:	42bb      	cmp	r3, r7
 802848c:	db04      	blt.n	8028498 <__s2b+0x78>
 802848e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8028492:	340a      	adds	r4, #10
 8028494:	2509      	movs	r5, #9
 8028496:	e7f6      	b.n	8028486 <__s2b+0x66>
 8028498:	f814 3b01 	ldrb.w	r3, [r4], #1
 802849c:	4601      	mov	r1, r0
 802849e:	3b30      	subs	r3, #48	; 0x30
 80284a0:	220a      	movs	r2, #10
 80284a2:	4630      	mov	r0, r6
 80284a4:	f7ff ff76 	bl	8028394 <__multadd>
 80284a8:	e7ee      	b.n	8028488 <__s2b+0x68>
 80284aa:	bf00      	nop
 80284ac:	0802e734 	.word	0x0802e734
 80284b0:	0802e824 	.word	0x0802e824

080284b4 <__hi0bits>:
 80284b4:	0c03      	lsrs	r3, r0, #16
 80284b6:	041b      	lsls	r3, r3, #16
 80284b8:	b9d3      	cbnz	r3, 80284f0 <__hi0bits+0x3c>
 80284ba:	0400      	lsls	r0, r0, #16
 80284bc:	2310      	movs	r3, #16
 80284be:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80284c2:	bf04      	itt	eq
 80284c4:	0200      	lsleq	r0, r0, #8
 80284c6:	3308      	addeq	r3, #8
 80284c8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80284cc:	bf04      	itt	eq
 80284ce:	0100      	lsleq	r0, r0, #4
 80284d0:	3304      	addeq	r3, #4
 80284d2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80284d6:	bf04      	itt	eq
 80284d8:	0080      	lsleq	r0, r0, #2
 80284da:	3302      	addeq	r3, #2
 80284dc:	2800      	cmp	r0, #0
 80284de:	db05      	blt.n	80284ec <__hi0bits+0x38>
 80284e0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80284e4:	f103 0301 	add.w	r3, r3, #1
 80284e8:	bf08      	it	eq
 80284ea:	2320      	moveq	r3, #32
 80284ec:	4618      	mov	r0, r3
 80284ee:	4770      	bx	lr
 80284f0:	2300      	movs	r3, #0
 80284f2:	e7e4      	b.n	80284be <__hi0bits+0xa>

080284f4 <__lo0bits>:
 80284f4:	6803      	ldr	r3, [r0, #0]
 80284f6:	f013 0207 	ands.w	r2, r3, #7
 80284fa:	4601      	mov	r1, r0
 80284fc:	d00b      	beq.n	8028516 <__lo0bits+0x22>
 80284fe:	07da      	lsls	r2, r3, #31
 8028500:	d423      	bmi.n	802854a <__lo0bits+0x56>
 8028502:	0798      	lsls	r0, r3, #30
 8028504:	bf49      	itett	mi
 8028506:	085b      	lsrmi	r3, r3, #1
 8028508:	089b      	lsrpl	r3, r3, #2
 802850a:	2001      	movmi	r0, #1
 802850c:	600b      	strmi	r3, [r1, #0]
 802850e:	bf5c      	itt	pl
 8028510:	600b      	strpl	r3, [r1, #0]
 8028512:	2002      	movpl	r0, #2
 8028514:	4770      	bx	lr
 8028516:	b298      	uxth	r0, r3
 8028518:	b9a8      	cbnz	r0, 8028546 <__lo0bits+0x52>
 802851a:	0c1b      	lsrs	r3, r3, #16
 802851c:	2010      	movs	r0, #16
 802851e:	b2da      	uxtb	r2, r3
 8028520:	b90a      	cbnz	r2, 8028526 <__lo0bits+0x32>
 8028522:	3008      	adds	r0, #8
 8028524:	0a1b      	lsrs	r3, r3, #8
 8028526:	071a      	lsls	r2, r3, #28
 8028528:	bf04      	itt	eq
 802852a:	091b      	lsreq	r3, r3, #4
 802852c:	3004      	addeq	r0, #4
 802852e:	079a      	lsls	r2, r3, #30
 8028530:	bf04      	itt	eq
 8028532:	089b      	lsreq	r3, r3, #2
 8028534:	3002      	addeq	r0, #2
 8028536:	07da      	lsls	r2, r3, #31
 8028538:	d403      	bmi.n	8028542 <__lo0bits+0x4e>
 802853a:	085b      	lsrs	r3, r3, #1
 802853c:	f100 0001 	add.w	r0, r0, #1
 8028540:	d005      	beq.n	802854e <__lo0bits+0x5a>
 8028542:	600b      	str	r3, [r1, #0]
 8028544:	4770      	bx	lr
 8028546:	4610      	mov	r0, r2
 8028548:	e7e9      	b.n	802851e <__lo0bits+0x2a>
 802854a:	2000      	movs	r0, #0
 802854c:	4770      	bx	lr
 802854e:	2020      	movs	r0, #32
 8028550:	4770      	bx	lr
	...

08028554 <__i2b>:
 8028554:	b510      	push	{r4, lr}
 8028556:	460c      	mov	r4, r1
 8028558:	2101      	movs	r1, #1
 802855a:	f7ff feb9 	bl	80282d0 <_Balloc>
 802855e:	4602      	mov	r2, r0
 8028560:	b928      	cbnz	r0, 802856e <__i2b+0x1a>
 8028562:	4b05      	ldr	r3, [pc, #20]	; (8028578 <__i2b+0x24>)
 8028564:	4805      	ldr	r0, [pc, #20]	; (802857c <__i2b+0x28>)
 8028566:	f44f 71a0 	mov.w	r1, #320	; 0x140
 802856a:	f7fe fa3f 	bl	80269ec <__assert_func>
 802856e:	2301      	movs	r3, #1
 8028570:	6144      	str	r4, [r0, #20]
 8028572:	6103      	str	r3, [r0, #16]
 8028574:	bd10      	pop	{r4, pc}
 8028576:	bf00      	nop
 8028578:	0802e734 	.word	0x0802e734
 802857c:	0802e824 	.word	0x0802e824

08028580 <__multiply>:
 8028580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028584:	4691      	mov	r9, r2
 8028586:	690a      	ldr	r2, [r1, #16]
 8028588:	f8d9 3010 	ldr.w	r3, [r9, #16]
 802858c:	429a      	cmp	r2, r3
 802858e:	bfb8      	it	lt
 8028590:	460b      	movlt	r3, r1
 8028592:	460c      	mov	r4, r1
 8028594:	bfbc      	itt	lt
 8028596:	464c      	movlt	r4, r9
 8028598:	4699      	movlt	r9, r3
 802859a:	6927      	ldr	r7, [r4, #16]
 802859c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80285a0:	68a3      	ldr	r3, [r4, #8]
 80285a2:	6861      	ldr	r1, [r4, #4]
 80285a4:	eb07 060a 	add.w	r6, r7, sl
 80285a8:	42b3      	cmp	r3, r6
 80285aa:	b085      	sub	sp, #20
 80285ac:	bfb8      	it	lt
 80285ae:	3101      	addlt	r1, #1
 80285b0:	f7ff fe8e 	bl	80282d0 <_Balloc>
 80285b4:	b930      	cbnz	r0, 80285c4 <__multiply+0x44>
 80285b6:	4602      	mov	r2, r0
 80285b8:	4b44      	ldr	r3, [pc, #272]	; (80286cc <__multiply+0x14c>)
 80285ba:	4845      	ldr	r0, [pc, #276]	; (80286d0 <__multiply+0x150>)
 80285bc:	f240 115d 	movw	r1, #349	; 0x15d
 80285c0:	f7fe fa14 	bl	80269ec <__assert_func>
 80285c4:	f100 0514 	add.w	r5, r0, #20
 80285c8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80285cc:	462b      	mov	r3, r5
 80285ce:	2200      	movs	r2, #0
 80285d0:	4543      	cmp	r3, r8
 80285d2:	d321      	bcc.n	8028618 <__multiply+0x98>
 80285d4:	f104 0314 	add.w	r3, r4, #20
 80285d8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80285dc:	f109 0314 	add.w	r3, r9, #20
 80285e0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80285e4:	9202      	str	r2, [sp, #8]
 80285e6:	1b3a      	subs	r2, r7, r4
 80285e8:	3a15      	subs	r2, #21
 80285ea:	f022 0203 	bic.w	r2, r2, #3
 80285ee:	3204      	adds	r2, #4
 80285f0:	f104 0115 	add.w	r1, r4, #21
 80285f4:	428f      	cmp	r7, r1
 80285f6:	bf38      	it	cc
 80285f8:	2204      	movcc	r2, #4
 80285fa:	9201      	str	r2, [sp, #4]
 80285fc:	9a02      	ldr	r2, [sp, #8]
 80285fe:	9303      	str	r3, [sp, #12]
 8028600:	429a      	cmp	r2, r3
 8028602:	d80c      	bhi.n	802861e <__multiply+0x9e>
 8028604:	2e00      	cmp	r6, #0
 8028606:	dd03      	ble.n	8028610 <__multiply+0x90>
 8028608:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 802860c:	2b00      	cmp	r3, #0
 802860e:	d05a      	beq.n	80286c6 <__multiply+0x146>
 8028610:	6106      	str	r6, [r0, #16]
 8028612:	b005      	add	sp, #20
 8028614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028618:	f843 2b04 	str.w	r2, [r3], #4
 802861c:	e7d8      	b.n	80285d0 <__multiply+0x50>
 802861e:	f8b3 a000 	ldrh.w	sl, [r3]
 8028622:	f1ba 0f00 	cmp.w	sl, #0
 8028626:	d024      	beq.n	8028672 <__multiply+0xf2>
 8028628:	f104 0e14 	add.w	lr, r4, #20
 802862c:	46a9      	mov	r9, r5
 802862e:	f04f 0c00 	mov.w	ip, #0
 8028632:	f85e 2b04 	ldr.w	r2, [lr], #4
 8028636:	f8d9 1000 	ldr.w	r1, [r9]
 802863a:	fa1f fb82 	uxth.w	fp, r2
 802863e:	b289      	uxth	r1, r1
 8028640:	fb0a 110b 	mla	r1, sl, fp, r1
 8028644:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8028648:	f8d9 2000 	ldr.w	r2, [r9]
 802864c:	4461      	add	r1, ip
 802864e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8028652:	fb0a c20b 	mla	r2, sl, fp, ip
 8028656:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 802865a:	b289      	uxth	r1, r1
 802865c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8028660:	4577      	cmp	r7, lr
 8028662:	f849 1b04 	str.w	r1, [r9], #4
 8028666:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 802866a:	d8e2      	bhi.n	8028632 <__multiply+0xb2>
 802866c:	9a01      	ldr	r2, [sp, #4]
 802866e:	f845 c002 	str.w	ip, [r5, r2]
 8028672:	9a03      	ldr	r2, [sp, #12]
 8028674:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8028678:	3304      	adds	r3, #4
 802867a:	f1b9 0f00 	cmp.w	r9, #0
 802867e:	d020      	beq.n	80286c2 <__multiply+0x142>
 8028680:	6829      	ldr	r1, [r5, #0]
 8028682:	f104 0c14 	add.w	ip, r4, #20
 8028686:	46ae      	mov	lr, r5
 8028688:	f04f 0a00 	mov.w	sl, #0
 802868c:	f8bc b000 	ldrh.w	fp, [ip]
 8028690:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8028694:	fb09 220b 	mla	r2, r9, fp, r2
 8028698:	4492      	add	sl, r2
 802869a:	b289      	uxth	r1, r1
 802869c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80286a0:	f84e 1b04 	str.w	r1, [lr], #4
 80286a4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80286a8:	f8be 1000 	ldrh.w	r1, [lr]
 80286ac:	0c12      	lsrs	r2, r2, #16
 80286ae:	fb09 1102 	mla	r1, r9, r2, r1
 80286b2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80286b6:	4567      	cmp	r7, ip
 80286b8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80286bc:	d8e6      	bhi.n	802868c <__multiply+0x10c>
 80286be:	9a01      	ldr	r2, [sp, #4]
 80286c0:	50a9      	str	r1, [r5, r2]
 80286c2:	3504      	adds	r5, #4
 80286c4:	e79a      	b.n	80285fc <__multiply+0x7c>
 80286c6:	3e01      	subs	r6, #1
 80286c8:	e79c      	b.n	8028604 <__multiply+0x84>
 80286ca:	bf00      	nop
 80286cc:	0802e734 	.word	0x0802e734
 80286d0:	0802e824 	.word	0x0802e824

080286d4 <__pow5mult>:
 80286d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80286d8:	4615      	mov	r5, r2
 80286da:	f012 0203 	ands.w	r2, r2, #3
 80286de:	4606      	mov	r6, r0
 80286e0:	460f      	mov	r7, r1
 80286e2:	d007      	beq.n	80286f4 <__pow5mult+0x20>
 80286e4:	4c25      	ldr	r4, [pc, #148]	; (802877c <__pow5mult+0xa8>)
 80286e6:	3a01      	subs	r2, #1
 80286e8:	2300      	movs	r3, #0
 80286ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80286ee:	f7ff fe51 	bl	8028394 <__multadd>
 80286f2:	4607      	mov	r7, r0
 80286f4:	10ad      	asrs	r5, r5, #2
 80286f6:	d03d      	beq.n	8028774 <__pow5mult+0xa0>
 80286f8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80286fa:	b97c      	cbnz	r4, 802871c <__pow5mult+0x48>
 80286fc:	2010      	movs	r0, #16
 80286fe:	f7fc f961 	bl	80249c4 <malloc>
 8028702:	4602      	mov	r2, r0
 8028704:	6270      	str	r0, [r6, #36]	; 0x24
 8028706:	b928      	cbnz	r0, 8028714 <__pow5mult+0x40>
 8028708:	4b1d      	ldr	r3, [pc, #116]	; (8028780 <__pow5mult+0xac>)
 802870a:	481e      	ldr	r0, [pc, #120]	; (8028784 <__pow5mult+0xb0>)
 802870c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8028710:	f7fe f96c 	bl	80269ec <__assert_func>
 8028714:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8028718:	6004      	str	r4, [r0, #0]
 802871a:	60c4      	str	r4, [r0, #12]
 802871c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8028720:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8028724:	b94c      	cbnz	r4, 802873a <__pow5mult+0x66>
 8028726:	f240 2171 	movw	r1, #625	; 0x271
 802872a:	4630      	mov	r0, r6
 802872c:	f7ff ff12 	bl	8028554 <__i2b>
 8028730:	2300      	movs	r3, #0
 8028732:	f8c8 0008 	str.w	r0, [r8, #8]
 8028736:	4604      	mov	r4, r0
 8028738:	6003      	str	r3, [r0, #0]
 802873a:	f04f 0900 	mov.w	r9, #0
 802873e:	07eb      	lsls	r3, r5, #31
 8028740:	d50a      	bpl.n	8028758 <__pow5mult+0x84>
 8028742:	4639      	mov	r1, r7
 8028744:	4622      	mov	r2, r4
 8028746:	4630      	mov	r0, r6
 8028748:	f7ff ff1a 	bl	8028580 <__multiply>
 802874c:	4639      	mov	r1, r7
 802874e:	4680      	mov	r8, r0
 8028750:	4630      	mov	r0, r6
 8028752:	f7ff fdfd 	bl	8028350 <_Bfree>
 8028756:	4647      	mov	r7, r8
 8028758:	106d      	asrs	r5, r5, #1
 802875a:	d00b      	beq.n	8028774 <__pow5mult+0xa0>
 802875c:	6820      	ldr	r0, [r4, #0]
 802875e:	b938      	cbnz	r0, 8028770 <__pow5mult+0x9c>
 8028760:	4622      	mov	r2, r4
 8028762:	4621      	mov	r1, r4
 8028764:	4630      	mov	r0, r6
 8028766:	f7ff ff0b 	bl	8028580 <__multiply>
 802876a:	6020      	str	r0, [r4, #0]
 802876c:	f8c0 9000 	str.w	r9, [r0]
 8028770:	4604      	mov	r4, r0
 8028772:	e7e4      	b.n	802873e <__pow5mult+0x6a>
 8028774:	4638      	mov	r0, r7
 8028776:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802877a:	bf00      	nop
 802877c:	0802e970 	.word	0x0802e970
 8028780:	0802e5c7 	.word	0x0802e5c7
 8028784:	0802e824 	.word	0x0802e824

08028788 <__lshift>:
 8028788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802878c:	460c      	mov	r4, r1
 802878e:	6849      	ldr	r1, [r1, #4]
 8028790:	6923      	ldr	r3, [r4, #16]
 8028792:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8028796:	68a3      	ldr	r3, [r4, #8]
 8028798:	4607      	mov	r7, r0
 802879a:	4691      	mov	r9, r2
 802879c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80287a0:	f108 0601 	add.w	r6, r8, #1
 80287a4:	42b3      	cmp	r3, r6
 80287a6:	db0b      	blt.n	80287c0 <__lshift+0x38>
 80287a8:	4638      	mov	r0, r7
 80287aa:	f7ff fd91 	bl	80282d0 <_Balloc>
 80287ae:	4605      	mov	r5, r0
 80287b0:	b948      	cbnz	r0, 80287c6 <__lshift+0x3e>
 80287b2:	4602      	mov	r2, r0
 80287b4:	4b2a      	ldr	r3, [pc, #168]	; (8028860 <__lshift+0xd8>)
 80287b6:	482b      	ldr	r0, [pc, #172]	; (8028864 <__lshift+0xdc>)
 80287b8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80287bc:	f7fe f916 	bl	80269ec <__assert_func>
 80287c0:	3101      	adds	r1, #1
 80287c2:	005b      	lsls	r3, r3, #1
 80287c4:	e7ee      	b.n	80287a4 <__lshift+0x1c>
 80287c6:	2300      	movs	r3, #0
 80287c8:	f100 0114 	add.w	r1, r0, #20
 80287cc:	f100 0210 	add.w	r2, r0, #16
 80287d0:	4618      	mov	r0, r3
 80287d2:	4553      	cmp	r3, sl
 80287d4:	db37      	blt.n	8028846 <__lshift+0xbe>
 80287d6:	6920      	ldr	r0, [r4, #16]
 80287d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80287dc:	f104 0314 	add.w	r3, r4, #20
 80287e0:	f019 091f 	ands.w	r9, r9, #31
 80287e4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80287e8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80287ec:	d02f      	beq.n	802884e <__lshift+0xc6>
 80287ee:	f1c9 0e20 	rsb	lr, r9, #32
 80287f2:	468a      	mov	sl, r1
 80287f4:	f04f 0c00 	mov.w	ip, #0
 80287f8:	681a      	ldr	r2, [r3, #0]
 80287fa:	fa02 f209 	lsl.w	r2, r2, r9
 80287fe:	ea42 020c 	orr.w	r2, r2, ip
 8028802:	f84a 2b04 	str.w	r2, [sl], #4
 8028806:	f853 2b04 	ldr.w	r2, [r3], #4
 802880a:	4298      	cmp	r0, r3
 802880c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8028810:	d8f2      	bhi.n	80287f8 <__lshift+0x70>
 8028812:	1b03      	subs	r3, r0, r4
 8028814:	3b15      	subs	r3, #21
 8028816:	f023 0303 	bic.w	r3, r3, #3
 802881a:	3304      	adds	r3, #4
 802881c:	f104 0215 	add.w	r2, r4, #21
 8028820:	4290      	cmp	r0, r2
 8028822:	bf38      	it	cc
 8028824:	2304      	movcc	r3, #4
 8028826:	f841 c003 	str.w	ip, [r1, r3]
 802882a:	f1bc 0f00 	cmp.w	ip, #0
 802882e:	d001      	beq.n	8028834 <__lshift+0xac>
 8028830:	f108 0602 	add.w	r6, r8, #2
 8028834:	3e01      	subs	r6, #1
 8028836:	4638      	mov	r0, r7
 8028838:	612e      	str	r6, [r5, #16]
 802883a:	4621      	mov	r1, r4
 802883c:	f7ff fd88 	bl	8028350 <_Bfree>
 8028840:	4628      	mov	r0, r5
 8028842:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8028846:	f842 0f04 	str.w	r0, [r2, #4]!
 802884a:	3301      	adds	r3, #1
 802884c:	e7c1      	b.n	80287d2 <__lshift+0x4a>
 802884e:	3904      	subs	r1, #4
 8028850:	f853 2b04 	ldr.w	r2, [r3], #4
 8028854:	f841 2f04 	str.w	r2, [r1, #4]!
 8028858:	4298      	cmp	r0, r3
 802885a:	d8f9      	bhi.n	8028850 <__lshift+0xc8>
 802885c:	e7ea      	b.n	8028834 <__lshift+0xac>
 802885e:	bf00      	nop
 8028860:	0802e734 	.word	0x0802e734
 8028864:	0802e824 	.word	0x0802e824

08028868 <__mcmp>:
 8028868:	b530      	push	{r4, r5, lr}
 802886a:	6902      	ldr	r2, [r0, #16]
 802886c:	690c      	ldr	r4, [r1, #16]
 802886e:	1b12      	subs	r2, r2, r4
 8028870:	d10e      	bne.n	8028890 <__mcmp+0x28>
 8028872:	f100 0314 	add.w	r3, r0, #20
 8028876:	3114      	adds	r1, #20
 8028878:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 802887c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8028880:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8028884:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8028888:	42a5      	cmp	r5, r4
 802888a:	d003      	beq.n	8028894 <__mcmp+0x2c>
 802888c:	d305      	bcc.n	802889a <__mcmp+0x32>
 802888e:	2201      	movs	r2, #1
 8028890:	4610      	mov	r0, r2
 8028892:	bd30      	pop	{r4, r5, pc}
 8028894:	4283      	cmp	r3, r0
 8028896:	d3f3      	bcc.n	8028880 <__mcmp+0x18>
 8028898:	e7fa      	b.n	8028890 <__mcmp+0x28>
 802889a:	f04f 32ff 	mov.w	r2, #4294967295
 802889e:	e7f7      	b.n	8028890 <__mcmp+0x28>

080288a0 <__mdiff>:
 80288a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80288a4:	460c      	mov	r4, r1
 80288a6:	4606      	mov	r6, r0
 80288a8:	4611      	mov	r1, r2
 80288aa:	4620      	mov	r0, r4
 80288ac:	4690      	mov	r8, r2
 80288ae:	f7ff ffdb 	bl	8028868 <__mcmp>
 80288b2:	1e05      	subs	r5, r0, #0
 80288b4:	d110      	bne.n	80288d8 <__mdiff+0x38>
 80288b6:	4629      	mov	r1, r5
 80288b8:	4630      	mov	r0, r6
 80288ba:	f7ff fd09 	bl	80282d0 <_Balloc>
 80288be:	b930      	cbnz	r0, 80288ce <__mdiff+0x2e>
 80288c0:	4b3a      	ldr	r3, [pc, #232]	; (80289ac <__mdiff+0x10c>)
 80288c2:	4602      	mov	r2, r0
 80288c4:	f240 2132 	movw	r1, #562	; 0x232
 80288c8:	4839      	ldr	r0, [pc, #228]	; (80289b0 <__mdiff+0x110>)
 80288ca:	f7fe f88f 	bl	80269ec <__assert_func>
 80288ce:	2301      	movs	r3, #1
 80288d0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80288d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80288d8:	bfa4      	itt	ge
 80288da:	4643      	movge	r3, r8
 80288dc:	46a0      	movge	r8, r4
 80288de:	4630      	mov	r0, r6
 80288e0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80288e4:	bfa6      	itte	ge
 80288e6:	461c      	movge	r4, r3
 80288e8:	2500      	movge	r5, #0
 80288ea:	2501      	movlt	r5, #1
 80288ec:	f7ff fcf0 	bl	80282d0 <_Balloc>
 80288f0:	b920      	cbnz	r0, 80288fc <__mdiff+0x5c>
 80288f2:	4b2e      	ldr	r3, [pc, #184]	; (80289ac <__mdiff+0x10c>)
 80288f4:	4602      	mov	r2, r0
 80288f6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80288fa:	e7e5      	b.n	80288c8 <__mdiff+0x28>
 80288fc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8028900:	6926      	ldr	r6, [r4, #16]
 8028902:	60c5      	str	r5, [r0, #12]
 8028904:	f104 0914 	add.w	r9, r4, #20
 8028908:	f108 0514 	add.w	r5, r8, #20
 802890c:	f100 0e14 	add.w	lr, r0, #20
 8028910:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8028914:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8028918:	f108 0210 	add.w	r2, r8, #16
 802891c:	46f2      	mov	sl, lr
 802891e:	2100      	movs	r1, #0
 8028920:	f859 3b04 	ldr.w	r3, [r9], #4
 8028924:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8028928:	fa1f f883 	uxth.w	r8, r3
 802892c:	fa11 f18b 	uxtah	r1, r1, fp
 8028930:	0c1b      	lsrs	r3, r3, #16
 8028932:	eba1 0808 	sub.w	r8, r1, r8
 8028936:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 802893a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 802893e:	fa1f f888 	uxth.w	r8, r8
 8028942:	1419      	asrs	r1, r3, #16
 8028944:	454e      	cmp	r6, r9
 8028946:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 802894a:	f84a 3b04 	str.w	r3, [sl], #4
 802894e:	d8e7      	bhi.n	8028920 <__mdiff+0x80>
 8028950:	1b33      	subs	r3, r6, r4
 8028952:	3b15      	subs	r3, #21
 8028954:	f023 0303 	bic.w	r3, r3, #3
 8028958:	3304      	adds	r3, #4
 802895a:	3415      	adds	r4, #21
 802895c:	42a6      	cmp	r6, r4
 802895e:	bf38      	it	cc
 8028960:	2304      	movcc	r3, #4
 8028962:	441d      	add	r5, r3
 8028964:	4473      	add	r3, lr
 8028966:	469e      	mov	lr, r3
 8028968:	462e      	mov	r6, r5
 802896a:	4566      	cmp	r6, ip
 802896c:	d30e      	bcc.n	802898c <__mdiff+0xec>
 802896e:	f10c 0203 	add.w	r2, ip, #3
 8028972:	1b52      	subs	r2, r2, r5
 8028974:	f022 0203 	bic.w	r2, r2, #3
 8028978:	3d03      	subs	r5, #3
 802897a:	45ac      	cmp	ip, r5
 802897c:	bf38      	it	cc
 802897e:	2200      	movcc	r2, #0
 8028980:	441a      	add	r2, r3
 8028982:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8028986:	b17b      	cbz	r3, 80289a8 <__mdiff+0x108>
 8028988:	6107      	str	r7, [r0, #16]
 802898a:	e7a3      	b.n	80288d4 <__mdiff+0x34>
 802898c:	f856 8b04 	ldr.w	r8, [r6], #4
 8028990:	fa11 f288 	uxtah	r2, r1, r8
 8028994:	1414      	asrs	r4, r2, #16
 8028996:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 802899a:	b292      	uxth	r2, r2
 802899c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80289a0:	f84e 2b04 	str.w	r2, [lr], #4
 80289a4:	1421      	asrs	r1, r4, #16
 80289a6:	e7e0      	b.n	802896a <__mdiff+0xca>
 80289a8:	3f01      	subs	r7, #1
 80289aa:	e7ea      	b.n	8028982 <__mdiff+0xe2>
 80289ac:	0802e734 	.word	0x0802e734
 80289b0:	0802e824 	.word	0x0802e824

080289b4 <__ulp>:
 80289b4:	b082      	sub	sp, #8
 80289b6:	ed8d 0b00 	vstr	d0, [sp]
 80289ba:	9b01      	ldr	r3, [sp, #4]
 80289bc:	4912      	ldr	r1, [pc, #72]	; (8028a08 <__ulp+0x54>)
 80289be:	4019      	ands	r1, r3
 80289c0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80289c4:	2900      	cmp	r1, #0
 80289c6:	dd05      	ble.n	80289d4 <__ulp+0x20>
 80289c8:	2200      	movs	r2, #0
 80289ca:	460b      	mov	r3, r1
 80289cc:	ec43 2b10 	vmov	d0, r2, r3
 80289d0:	b002      	add	sp, #8
 80289d2:	4770      	bx	lr
 80289d4:	4249      	negs	r1, r1
 80289d6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80289da:	ea4f 5021 	mov.w	r0, r1, asr #20
 80289de:	f04f 0200 	mov.w	r2, #0
 80289e2:	f04f 0300 	mov.w	r3, #0
 80289e6:	da04      	bge.n	80289f2 <__ulp+0x3e>
 80289e8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80289ec:	fa41 f300 	asr.w	r3, r1, r0
 80289f0:	e7ec      	b.n	80289cc <__ulp+0x18>
 80289f2:	f1a0 0114 	sub.w	r1, r0, #20
 80289f6:	291e      	cmp	r1, #30
 80289f8:	bfda      	itte	le
 80289fa:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80289fe:	fa20 f101 	lsrle.w	r1, r0, r1
 8028a02:	2101      	movgt	r1, #1
 8028a04:	460a      	mov	r2, r1
 8028a06:	e7e1      	b.n	80289cc <__ulp+0x18>
 8028a08:	7ff00000 	.word	0x7ff00000

08028a0c <__b2d>:
 8028a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028a0e:	6905      	ldr	r5, [r0, #16]
 8028a10:	f100 0714 	add.w	r7, r0, #20
 8028a14:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8028a18:	1f2e      	subs	r6, r5, #4
 8028a1a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8028a1e:	4620      	mov	r0, r4
 8028a20:	f7ff fd48 	bl	80284b4 <__hi0bits>
 8028a24:	f1c0 0320 	rsb	r3, r0, #32
 8028a28:	280a      	cmp	r0, #10
 8028a2a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8028aa8 <__b2d+0x9c>
 8028a2e:	600b      	str	r3, [r1, #0]
 8028a30:	dc14      	bgt.n	8028a5c <__b2d+0x50>
 8028a32:	f1c0 0e0b 	rsb	lr, r0, #11
 8028a36:	fa24 f10e 	lsr.w	r1, r4, lr
 8028a3a:	42b7      	cmp	r7, r6
 8028a3c:	ea41 030c 	orr.w	r3, r1, ip
 8028a40:	bf34      	ite	cc
 8028a42:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8028a46:	2100      	movcs	r1, #0
 8028a48:	3015      	adds	r0, #21
 8028a4a:	fa04 f000 	lsl.w	r0, r4, r0
 8028a4e:	fa21 f10e 	lsr.w	r1, r1, lr
 8028a52:	ea40 0201 	orr.w	r2, r0, r1
 8028a56:	ec43 2b10 	vmov	d0, r2, r3
 8028a5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8028a5c:	42b7      	cmp	r7, r6
 8028a5e:	bf3a      	itte	cc
 8028a60:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8028a64:	f1a5 0608 	subcc.w	r6, r5, #8
 8028a68:	2100      	movcs	r1, #0
 8028a6a:	380b      	subs	r0, #11
 8028a6c:	d017      	beq.n	8028a9e <__b2d+0x92>
 8028a6e:	f1c0 0c20 	rsb	ip, r0, #32
 8028a72:	fa04 f500 	lsl.w	r5, r4, r0
 8028a76:	42be      	cmp	r6, r7
 8028a78:	fa21 f40c 	lsr.w	r4, r1, ip
 8028a7c:	ea45 0504 	orr.w	r5, r5, r4
 8028a80:	bf8c      	ite	hi
 8028a82:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8028a86:	2400      	movls	r4, #0
 8028a88:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8028a8c:	fa01 f000 	lsl.w	r0, r1, r0
 8028a90:	fa24 f40c 	lsr.w	r4, r4, ip
 8028a94:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8028a98:	ea40 0204 	orr.w	r2, r0, r4
 8028a9c:	e7db      	b.n	8028a56 <__b2d+0x4a>
 8028a9e:	ea44 030c 	orr.w	r3, r4, ip
 8028aa2:	460a      	mov	r2, r1
 8028aa4:	e7d7      	b.n	8028a56 <__b2d+0x4a>
 8028aa6:	bf00      	nop
 8028aa8:	3ff00000 	.word	0x3ff00000

08028aac <__d2b>:
 8028aac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8028ab0:	4689      	mov	r9, r1
 8028ab2:	2101      	movs	r1, #1
 8028ab4:	ec57 6b10 	vmov	r6, r7, d0
 8028ab8:	4690      	mov	r8, r2
 8028aba:	f7ff fc09 	bl	80282d0 <_Balloc>
 8028abe:	4604      	mov	r4, r0
 8028ac0:	b930      	cbnz	r0, 8028ad0 <__d2b+0x24>
 8028ac2:	4602      	mov	r2, r0
 8028ac4:	4b25      	ldr	r3, [pc, #148]	; (8028b5c <__d2b+0xb0>)
 8028ac6:	4826      	ldr	r0, [pc, #152]	; (8028b60 <__d2b+0xb4>)
 8028ac8:	f240 310a 	movw	r1, #778	; 0x30a
 8028acc:	f7fd ff8e 	bl	80269ec <__assert_func>
 8028ad0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8028ad4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8028ad8:	bb35      	cbnz	r5, 8028b28 <__d2b+0x7c>
 8028ada:	2e00      	cmp	r6, #0
 8028adc:	9301      	str	r3, [sp, #4]
 8028ade:	d028      	beq.n	8028b32 <__d2b+0x86>
 8028ae0:	4668      	mov	r0, sp
 8028ae2:	9600      	str	r6, [sp, #0]
 8028ae4:	f7ff fd06 	bl	80284f4 <__lo0bits>
 8028ae8:	9900      	ldr	r1, [sp, #0]
 8028aea:	b300      	cbz	r0, 8028b2e <__d2b+0x82>
 8028aec:	9a01      	ldr	r2, [sp, #4]
 8028aee:	f1c0 0320 	rsb	r3, r0, #32
 8028af2:	fa02 f303 	lsl.w	r3, r2, r3
 8028af6:	430b      	orrs	r3, r1
 8028af8:	40c2      	lsrs	r2, r0
 8028afa:	6163      	str	r3, [r4, #20]
 8028afc:	9201      	str	r2, [sp, #4]
 8028afe:	9b01      	ldr	r3, [sp, #4]
 8028b00:	61a3      	str	r3, [r4, #24]
 8028b02:	2b00      	cmp	r3, #0
 8028b04:	bf14      	ite	ne
 8028b06:	2202      	movne	r2, #2
 8028b08:	2201      	moveq	r2, #1
 8028b0a:	6122      	str	r2, [r4, #16]
 8028b0c:	b1d5      	cbz	r5, 8028b44 <__d2b+0x98>
 8028b0e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8028b12:	4405      	add	r5, r0
 8028b14:	f8c9 5000 	str.w	r5, [r9]
 8028b18:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8028b1c:	f8c8 0000 	str.w	r0, [r8]
 8028b20:	4620      	mov	r0, r4
 8028b22:	b003      	add	sp, #12
 8028b24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8028b28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8028b2c:	e7d5      	b.n	8028ada <__d2b+0x2e>
 8028b2e:	6161      	str	r1, [r4, #20]
 8028b30:	e7e5      	b.n	8028afe <__d2b+0x52>
 8028b32:	a801      	add	r0, sp, #4
 8028b34:	f7ff fcde 	bl	80284f4 <__lo0bits>
 8028b38:	9b01      	ldr	r3, [sp, #4]
 8028b3a:	6163      	str	r3, [r4, #20]
 8028b3c:	2201      	movs	r2, #1
 8028b3e:	6122      	str	r2, [r4, #16]
 8028b40:	3020      	adds	r0, #32
 8028b42:	e7e3      	b.n	8028b0c <__d2b+0x60>
 8028b44:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8028b48:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8028b4c:	f8c9 0000 	str.w	r0, [r9]
 8028b50:	6918      	ldr	r0, [r3, #16]
 8028b52:	f7ff fcaf 	bl	80284b4 <__hi0bits>
 8028b56:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8028b5a:	e7df      	b.n	8028b1c <__d2b+0x70>
 8028b5c:	0802e734 	.word	0x0802e734
 8028b60:	0802e824 	.word	0x0802e824

08028b64 <__ratio>:
 8028b64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028b68:	4688      	mov	r8, r1
 8028b6a:	4669      	mov	r1, sp
 8028b6c:	4681      	mov	r9, r0
 8028b6e:	f7ff ff4d 	bl	8028a0c <__b2d>
 8028b72:	a901      	add	r1, sp, #4
 8028b74:	4640      	mov	r0, r8
 8028b76:	ec55 4b10 	vmov	r4, r5, d0
 8028b7a:	f7ff ff47 	bl	8028a0c <__b2d>
 8028b7e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8028b82:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8028b86:	eba3 0c02 	sub.w	ip, r3, r2
 8028b8a:	e9dd 3200 	ldrd	r3, r2, [sp]
 8028b8e:	1a9b      	subs	r3, r3, r2
 8028b90:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8028b94:	ec51 0b10 	vmov	r0, r1, d0
 8028b98:	2b00      	cmp	r3, #0
 8028b9a:	bfd6      	itet	le
 8028b9c:	460a      	movle	r2, r1
 8028b9e:	462a      	movgt	r2, r5
 8028ba0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8028ba4:	468b      	mov	fp, r1
 8028ba6:	462f      	mov	r7, r5
 8028ba8:	bfd4      	ite	le
 8028baa:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8028bae:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8028bb2:	4620      	mov	r0, r4
 8028bb4:	ee10 2a10 	vmov	r2, s0
 8028bb8:	465b      	mov	r3, fp
 8028bba:	4639      	mov	r1, r7
 8028bbc:	f7d7 fe56 	bl	800086c <__aeabi_ddiv>
 8028bc0:	ec41 0b10 	vmov	d0, r0, r1
 8028bc4:	b003      	add	sp, #12
 8028bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08028bca <__copybits>:
 8028bca:	3901      	subs	r1, #1
 8028bcc:	b570      	push	{r4, r5, r6, lr}
 8028bce:	1149      	asrs	r1, r1, #5
 8028bd0:	6914      	ldr	r4, [r2, #16]
 8028bd2:	3101      	adds	r1, #1
 8028bd4:	f102 0314 	add.w	r3, r2, #20
 8028bd8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8028bdc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8028be0:	1f05      	subs	r5, r0, #4
 8028be2:	42a3      	cmp	r3, r4
 8028be4:	d30c      	bcc.n	8028c00 <__copybits+0x36>
 8028be6:	1aa3      	subs	r3, r4, r2
 8028be8:	3b11      	subs	r3, #17
 8028bea:	f023 0303 	bic.w	r3, r3, #3
 8028bee:	3211      	adds	r2, #17
 8028bf0:	42a2      	cmp	r2, r4
 8028bf2:	bf88      	it	hi
 8028bf4:	2300      	movhi	r3, #0
 8028bf6:	4418      	add	r0, r3
 8028bf8:	2300      	movs	r3, #0
 8028bfa:	4288      	cmp	r0, r1
 8028bfc:	d305      	bcc.n	8028c0a <__copybits+0x40>
 8028bfe:	bd70      	pop	{r4, r5, r6, pc}
 8028c00:	f853 6b04 	ldr.w	r6, [r3], #4
 8028c04:	f845 6f04 	str.w	r6, [r5, #4]!
 8028c08:	e7eb      	b.n	8028be2 <__copybits+0x18>
 8028c0a:	f840 3b04 	str.w	r3, [r0], #4
 8028c0e:	e7f4      	b.n	8028bfa <__copybits+0x30>

08028c10 <__any_on>:
 8028c10:	f100 0214 	add.w	r2, r0, #20
 8028c14:	6900      	ldr	r0, [r0, #16]
 8028c16:	114b      	asrs	r3, r1, #5
 8028c18:	4298      	cmp	r0, r3
 8028c1a:	b510      	push	{r4, lr}
 8028c1c:	db11      	blt.n	8028c42 <__any_on+0x32>
 8028c1e:	dd0a      	ble.n	8028c36 <__any_on+0x26>
 8028c20:	f011 011f 	ands.w	r1, r1, #31
 8028c24:	d007      	beq.n	8028c36 <__any_on+0x26>
 8028c26:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8028c2a:	fa24 f001 	lsr.w	r0, r4, r1
 8028c2e:	fa00 f101 	lsl.w	r1, r0, r1
 8028c32:	428c      	cmp	r4, r1
 8028c34:	d10b      	bne.n	8028c4e <__any_on+0x3e>
 8028c36:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8028c3a:	4293      	cmp	r3, r2
 8028c3c:	d803      	bhi.n	8028c46 <__any_on+0x36>
 8028c3e:	2000      	movs	r0, #0
 8028c40:	bd10      	pop	{r4, pc}
 8028c42:	4603      	mov	r3, r0
 8028c44:	e7f7      	b.n	8028c36 <__any_on+0x26>
 8028c46:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8028c4a:	2900      	cmp	r1, #0
 8028c4c:	d0f5      	beq.n	8028c3a <__any_on+0x2a>
 8028c4e:	2001      	movs	r0, #1
 8028c50:	e7f6      	b.n	8028c40 <__any_on+0x30>

08028c52 <_calloc_r>:
 8028c52:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8028c54:	fba1 2402 	umull	r2, r4, r1, r2
 8028c58:	b94c      	cbnz	r4, 8028c6e <_calloc_r+0x1c>
 8028c5a:	4611      	mov	r1, r2
 8028c5c:	9201      	str	r2, [sp, #4]
 8028c5e:	f7fb ff6d 	bl	8024b3c <_malloc_r>
 8028c62:	9a01      	ldr	r2, [sp, #4]
 8028c64:	4605      	mov	r5, r0
 8028c66:	b930      	cbnz	r0, 8028c76 <_calloc_r+0x24>
 8028c68:	4628      	mov	r0, r5
 8028c6a:	b003      	add	sp, #12
 8028c6c:	bd30      	pop	{r4, r5, pc}
 8028c6e:	220c      	movs	r2, #12
 8028c70:	6002      	str	r2, [r0, #0]
 8028c72:	2500      	movs	r5, #0
 8028c74:	e7f8      	b.n	8028c68 <_calloc_r+0x16>
 8028c76:	4621      	mov	r1, r4
 8028c78:	f7fb feec 	bl	8024a54 <memset>
 8028c7c:	e7f4      	b.n	8028c68 <_calloc_r+0x16>

08028c7e <_realloc_r>:
 8028c7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028c82:	4680      	mov	r8, r0
 8028c84:	4614      	mov	r4, r2
 8028c86:	460e      	mov	r6, r1
 8028c88:	b921      	cbnz	r1, 8028c94 <_realloc_r+0x16>
 8028c8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8028c8e:	4611      	mov	r1, r2
 8028c90:	f7fb bf54 	b.w	8024b3c <_malloc_r>
 8028c94:	b92a      	cbnz	r2, 8028ca2 <_realloc_r+0x24>
 8028c96:	f7fb fee5 	bl	8024a64 <_free_r>
 8028c9a:	4625      	mov	r5, r4
 8028c9c:	4628      	mov	r0, r5
 8028c9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028ca2:	f000 fdd1 	bl	8029848 <_malloc_usable_size_r>
 8028ca6:	4284      	cmp	r4, r0
 8028ca8:	4607      	mov	r7, r0
 8028caa:	d802      	bhi.n	8028cb2 <_realloc_r+0x34>
 8028cac:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8028cb0:	d812      	bhi.n	8028cd8 <_realloc_r+0x5a>
 8028cb2:	4621      	mov	r1, r4
 8028cb4:	4640      	mov	r0, r8
 8028cb6:	f7fb ff41 	bl	8024b3c <_malloc_r>
 8028cba:	4605      	mov	r5, r0
 8028cbc:	2800      	cmp	r0, #0
 8028cbe:	d0ed      	beq.n	8028c9c <_realloc_r+0x1e>
 8028cc0:	42bc      	cmp	r4, r7
 8028cc2:	4622      	mov	r2, r4
 8028cc4:	4631      	mov	r1, r6
 8028cc6:	bf28      	it	cs
 8028cc8:	463a      	movcs	r2, r7
 8028cca:	f7fb fe9b 	bl	8024a04 <memcpy>
 8028cce:	4631      	mov	r1, r6
 8028cd0:	4640      	mov	r0, r8
 8028cd2:	f7fb fec7 	bl	8024a64 <_free_r>
 8028cd6:	e7e1      	b.n	8028c9c <_realloc_r+0x1e>
 8028cd8:	4635      	mov	r5, r6
 8028cda:	e7df      	b.n	8028c9c <_realloc_r+0x1e>

08028cdc <__ssputs_r>:
 8028cdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8028ce0:	688e      	ldr	r6, [r1, #8]
 8028ce2:	429e      	cmp	r6, r3
 8028ce4:	4682      	mov	sl, r0
 8028ce6:	460c      	mov	r4, r1
 8028ce8:	4690      	mov	r8, r2
 8028cea:	461f      	mov	r7, r3
 8028cec:	d838      	bhi.n	8028d60 <__ssputs_r+0x84>
 8028cee:	898a      	ldrh	r2, [r1, #12]
 8028cf0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8028cf4:	d032      	beq.n	8028d5c <__ssputs_r+0x80>
 8028cf6:	6825      	ldr	r5, [r4, #0]
 8028cf8:	6909      	ldr	r1, [r1, #16]
 8028cfa:	eba5 0901 	sub.w	r9, r5, r1
 8028cfe:	6965      	ldr	r5, [r4, #20]
 8028d00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8028d04:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8028d08:	3301      	adds	r3, #1
 8028d0a:	444b      	add	r3, r9
 8028d0c:	106d      	asrs	r5, r5, #1
 8028d0e:	429d      	cmp	r5, r3
 8028d10:	bf38      	it	cc
 8028d12:	461d      	movcc	r5, r3
 8028d14:	0553      	lsls	r3, r2, #21
 8028d16:	d531      	bpl.n	8028d7c <__ssputs_r+0xa0>
 8028d18:	4629      	mov	r1, r5
 8028d1a:	f7fb ff0f 	bl	8024b3c <_malloc_r>
 8028d1e:	4606      	mov	r6, r0
 8028d20:	b950      	cbnz	r0, 8028d38 <__ssputs_r+0x5c>
 8028d22:	230c      	movs	r3, #12
 8028d24:	f8ca 3000 	str.w	r3, [sl]
 8028d28:	89a3      	ldrh	r3, [r4, #12]
 8028d2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8028d2e:	81a3      	strh	r3, [r4, #12]
 8028d30:	f04f 30ff 	mov.w	r0, #4294967295
 8028d34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8028d38:	6921      	ldr	r1, [r4, #16]
 8028d3a:	464a      	mov	r2, r9
 8028d3c:	f7fb fe62 	bl	8024a04 <memcpy>
 8028d40:	89a3      	ldrh	r3, [r4, #12]
 8028d42:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8028d46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8028d4a:	81a3      	strh	r3, [r4, #12]
 8028d4c:	6126      	str	r6, [r4, #16]
 8028d4e:	6165      	str	r5, [r4, #20]
 8028d50:	444e      	add	r6, r9
 8028d52:	eba5 0509 	sub.w	r5, r5, r9
 8028d56:	6026      	str	r6, [r4, #0]
 8028d58:	60a5      	str	r5, [r4, #8]
 8028d5a:	463e      	mov	r6, r7
 8028d5c:	42be      	cmp	r6, r7
 8028d5e:	d900      	bls.n	8028d62 <__ssputs_r+0x86>
 8028d60:	463e      	mov	r6, r7
 8028d62:	6820      	ldr	r0, [r4, #0]
 8028d64:	4632      	mov	r2, r6
 8028d66:	4641      	mov	r1, r8
 8028d68:	f7fb fe5a 	bl	8024a20 <memmove>
 8028d6c:	68a3      	ldr	r3, [r4, #8]
 8028d6e:	1b9b      	subs	r3, r3, r6
 8028d70:	60a3      	str	r3, [r4, #8]
 8028d72:	6823      	ldr	r3, [r4, #0]
 8028d74:	4433      	add	r3, r6
 8028d76:	6023      	str	r3, [r4, #0]
 8028d78:	2000      	movs	r0, #0
 8028d7a:	e7db      	b.n	8028d34 <__ssputs_r+0x58>
 8028d7c:	462a      	mov	r2, r5
 8028d7e:	f7ff ff7e 	bl	8028c7e <_realloc_r>
 8028d82:	4606      	mov	r6, r0
 8028d84:	2800      	cmp	r0, #0
 8028d86:	d1e1      	bne.n	8028d4c <__ssputs_r+0x70>
 8028d88:	6921      	ldr	r1, [r4, #16]
 8028d8a:	4650      	mov	r0, sl
 8028d8c:	f7fb fe6a 	bl	8024a64 <_free_r>
 8028d90:	e7c7      	b.n	8028d22 <__ssputs_r+0x46>
	...

08028d94 <_svfiprintf_r>:
 8028d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028d98:	4698      	mov	r8, r3
 8028d9a:	898b      	ldrh	r3, [r1, #12]
 8028d9c:	061b      	lsls	r3, r3, #24
 8028d9e:	b09d      	sub	sp, #116	; 0x74
 8028da0:	4607      	mov	r7, r0
 8028da2:	460d      	mov	r5, r1
 8028da4:	4614      	mov	r4, r2
 8028da6:	d50e      	bpl.n	8028dc6 <_svfiprintf_r+0x32>
 8028da8:	690b      	ldr	r3, [r1, #16]
 8028daa:	b963      	cbnz	r3, 8028dc6 <_svfiprintf_r+0x32>
 8028dac:	2140      	movs	r1, #64	; 0x40
 8028dae:	f7fb fec5 	bl	8024b3c <_malloc_r>
 8028db2:	6028      	str	r0, [r5, #0]
 8028db4:	6128      	str	r0, [r5, #16]
 8028db6:	b920      	cbnz	r0, 8028dc2 <_svfiprintf_r+0x2e>
 8028db8:	230c      	movs	r3, #12
 8028dba:	603b      	str	r3, [r7, #0]
 8028dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8028dc0:	e0d1      	b.n	8028f66 <_svfiprintf_r+0x1d2>
 8028dc2:	2340      	movs	r3, #64	; 0x40
 8028dc4:	616b      	str	r3, [r5, #20]
 8028dc6:	2300      	movs	r3, #0
 8028dc8:	9309      	str	r3, [sp, #36]	; 0x24
 8028dca:	2320      	movs	r3, #32
 8028dcc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8028dd0:	f8cd 800c 	str.w	r8, [sp, #12]
 8028dd4:	2330      	movs	r3, #48	; 0x30
 8028dd6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8028f80 <_svfiprintf_r+0x1ec>
 8028dda:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8028dde:	f04f 0901 	mov.w	r9, #1
 8028de2:	4623      	mov	r3, r4
 8028de4:	469a      	mov	sl, r3
 8028de6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8028dea:	b10a      	cbz	r2, 8028df0 <_svfiprintf_r+0x5c>
 8028dec:	2a25      	cmp	r2, #37	; 0x25
 8028dee:	d1f9      	bne.n	8028de4 <_svfiprintf_r+0x50>
 8028df0:	ebba 0b04 	subs.w	fp, sl, r4
 8028df4:	d00b      	beq.n	8028e0e <_svfiprintf_r+0x7a>
 8028df6:	465b      	mov	r3, fp
 8028df8:	4622      	mov	r2, r4
 8028dfa:	4629      	mov	r1, r5
 8028dfc:	4638      	mov	r0, r7
 8028dfe:	f7ff ff6d 	bl	8028cdc <__ssputs_r>
 8028e02:	3001      	adds	r0, #1
 8028e04:	f000 80aa 	beq.w	8028f5c <_svfiprintf_r+0x1c8>
 8028e08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8028e0a:	445a      	add	r2, fp
 8028e0c:	9209      	str	r2, [sp, #36]	; 0x24
 8028e0e:	f89a 3000 	ldrb.w	r3, [sl]
 8028e12:	2b00      	cmp	r3, #0
 8028e14:	f000 80a2 	beq.w	8028f5c <_svfiprintf_r+0x1c8>
 8028e18:	2300      	movs	r3, #0
 8028e1a:	f04f 32ff 	mov.w	r2, #4294967295
 8028e1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8028e22:	f10a 0a01 	add.w	sl, sl, #1
 8028e26:	9304      	str	r3, [sp, #16]
 8028e28:	9307      	str	r3, [sp, #28]
 8028e2a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8028e2e:	931a      	str	r3, [sp, #104]	; 0x68
 8028e30:	4654      	mov	r4, sl
 8028e32:	2205      	movs	r2, #5
 8028e34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8028e38:	4851      	ldr	r0, [pc, #324]	; (8028f80 <_svfiprintf_r+0x1ec>)
 8028e3a:	f7d7 f9e1 	bl	8000200 <memchr>
 8028e3e:	9a04      	ldr	r2, [sp, #16]
 8028e40:	b9d8      	cbnz	r0, 8028e7a <_svfiprintf_r+0xe6>
 8028e42:	06d0      	lsls	r0, r2, #27
 8028e44:	bf44      	itt	mi
 8028e46:	2320      	movmi	r3, #32
 8028e48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8028e4c:	0711      	lsls	r1, r2, #28
 8028e4e:	bf44      	itt	mi
 8028e50:	232b      	movmi	r3, #43	; 0x2b
 8028e52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8028e56:	f89a 3000 	ldrb.w	r3, [sl]
 8028e5a:	2b2a      	cmp	r3, #42	; 0x2a
 8028e5c:	d015      	beq.n	8028e8a <_svfiprintf_r+0xf6>
 8028e5e:	9a07      	ldr	r2, [sp, #28]
 8028e60:	4654      	mov	r4, sl
 8028e62:	2000      	movs	r0, #0
 8028e64:	f04f 0c0a 	mov.w	ip, #10
 8028e68:	4621      	mov	r1, r4
 8028e6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8028e6e:	3b30      	subs	r3, #48	; 0x30
 8028e70:	2b09      	cmp	r3, #9
 8028e72:	d94e      	bls.n	8028f12 <_svfiprintf_r+0x17e>
 8028e74:	b1b0      	cbz	r0, 8028ea4 <_svfiprintf_r+0x110>
 8028e76:	9207      	str	r2, [sp, #28]
 8028e78:	e014      	b.n	8028ea4 <_svfiprintf_r+0x110>
 8028e7a:	eba0 0308 	sub.w	r3, r0, r8
 8028e7e:	fa09 f303 	lsl.w	r3, r9, r3
 8028e82:	4313      	orrs	r3, r2
 8028e84:	9304      	str	r3, [sp, #16]
 8028e86:	46a2      	mov	sl, r4
 8028e88:	e7d2      	b.n	8028e30 <_svfiprintf_r+0x9c>
 8028e8a:	9b03      	ldr	r3, [sp, #12]
 8028e8c:	1d19      	adds	r1, r3, #4
 8028e8e:	681b      	ldr	r3, [r3, #0]
 8028e90:	9103      	str	r1, [sp, #12]
 8028e92:	2b00      	cmp	r3, #0
 8028e94:	bfbb      	ittet	lt
 8028e96:	425b      	neglt	r3, r3
 8028e98:	f042 0202 	orrlt.w	r2, r2, #2
 8028e9c:	9307      	strge	r3, [sp, #28]
 8028e9e:	9307      	strlt	r3, [sp, #28]
 8028ea0:	bfb8      	it	lt
 8028ea2:	9204      	strlt	r2, [sp, #16]
 8028ea4:	7823      	ldrb	r3, [r4, #0]
 8028ea6:	2b2e      	cmp	r3, #46	; 0x2e
 8028ea8:	d10c      	bne.n	8028ec4 <_svfiprintf_r+0x130>
 8028eaa:	7863      	ldrb	r3, [r4, #1]
 8028eac:	2b2a      	cmp	r3, #42	; 0x2a
 8028eae:	d135      	bne.n	8028f1c <_svfiprintf_r+0x188>
 8028eb0:	9b03      	ldr	r3, [sp, #12]
 8028eb2:	1d1a      	adds	r2, r3, #4
 8028eb4:	681b      	ldr	r3, [r3, #0]
 8028eb6:	9203      	str	r2, [sp, #12]
 8028eb8:	2b00      	cmp	r3, #0
 8028eba:	bfb8      	it	lt
 8028ebc:	f04f 33ff 	movlt.w	r3, #4294967295
 8028ec0:	3402      	adds	r4, #2
 8028ec2:	9305      	str	r3, [sp, #20]
 8028ec4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8028f90 <_svfiprintf_r+0x1fc>
 8028ec8:	7821      	ldrb	r1, [r4, #0]
 8028eca:	2203      	movs	r2, #3
 8028ecc:	4650      	mov	r0, sl
 8028ece:	f7d7 f997 	bl	8000200 <memchr>
 8028ed2:	b140      	cbz	r0, 8028ee6 <_svfiprintf_r+0x152>
 8028ed4:	2340      	movs	r3, #64	; 0x40
 8028ed6:	eba0 000a 	sub.w	r0, r0, sl
 8028eda:	fa03 f000 	lsl.w	r0, r3, r0
 8028ede:	9b04      	ldr	r3, [sp, #16]
 8028ee0:	4303      	orrs	r3, r0
 8028ee2:	3401      	adds	r4, #1
 8028ee4:	9304      	str	r3, [sp, #16]
 8028ee6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8028eea:	4826      	ldr	r0, [pc, #152]	; (8028f84 <_svfiprintf_r+0x1f0>)
 8028eec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8028ef0:	2206      	movs	r2, #6
 8028ef2:	f7d7 f985 	bl	8000200 <memchr>
 8028ef6:	2800      	cmp	r0, #0
 8028ef8:	d038      	beq.n	8028f6c <_svfiprintf_r+0x1d8>
 8028efa:	4b23      	ldr	r3, [pc, #140]	; (8028f88 <_svfiprintf_r+0x1f4>)
 8028efc:	bb1b      	cbnz	r3, 8028f46 <_svfiprintf_r+0x1b2>
 8028efe:	9b03      	ldr	r3, [sp, #12]
 8028f00:	3307      	adds	r3, #7
 8028f02:	f023 0307 	bic.w	r3, r3, #7
 8028f06:	3308      	adds	r3, #8
 8028f08:	9303      	str	r3, [sp, #12]
 8028f0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028f0c:	4433      	add	r3, r6
 8028f0e:	9309      	str	r3, [sp, #36]	; 0x24
 8028f10:	e767      	b.n	8028de2 <_svfiprintf_r+0x4e>
 8028f12:	fb0c 3202 	mla	r2, ip, r2, r3
 8028f16:	460c      	mov	r4, r1
 8028f18:	2001      	movs	r0, #1
 8028f1a:	e7a5      	b.n	8028e68 <_svfiprintf_r+0xd4>
 8028f1c:	2300      	movs	r3, #0
 8028f1e:	3401      	adds	r4, #1
 8028f20:	9305      	str	r3, [sp, #20]
 8028f22:	4619      	mov	r1, r3
 8028f24:	f04f 0c0a 	mov.w	ip, #10
 8028f28:	4620      	mov	r0, r4
 8028f2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8028f2e:	3a30      	subs	r2, #48	; 0x30
 8028f30:	2a09      	cmp	r2, #9
 8028f32:	d903      	bls.n	8028f3c <_svfiprintf_r+0x1a8>
 8028f34:	2b00      	cmp	r3, #0
 8028f36:	d0c5      	beq.n	8028ec4 <_svfiprintf_r+0x130>
 8028f38:	9105      	str	r1, [sp, #20]
 8028f3a:	e7c3      	b.n	8028ec4 <_svfiprintf_r+0x130>
 8028f3c:	fb0c 2101 	mla	r1, ip, r1, r2
 8028f40:	4604      	mov	r4, r0
 8028f42:	2301      	movs	r3, #1
 8028f44:	e7f0      	b.n	8028f28 <_svfiprintf_r+0x194>
 8028f46:	ab03      	add	r3, sp, #12
 8028f48:	9300      	str	r3, [sp, #0]
 8028f4a:	462a      	mov	r2, r5
 8028f4c:	4b0f      	ldr	r3, [pc, #60]	; (8028f8c <_svfiprintf_r+0x1f8>)
 8028f4e:	a904      	add	r1, sp, #16
 8028f50:	4638      	mov	r0, r7
 8028f52:	f7fc f861 	bl	8025018 <_printf_float>
 8028f56:	1c42      	adds	r2, r0, #1
 8028f58:	4606      	mov	r6, r0
 8028f5a:	d1d6      	bne.n	8028f0a <_svfiprintf_r+0x176>
 8028f5c:	89ab      	ldrh	r3, [r5, #12]
 8028f5e:	065b      	lsls	r3, r3, #25
 8028f60:	f53f af2c 	bmi.w	8028dbc <_svfiprintf_r+0x28>
 8028f64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8028f66:	b01d      	add	sp, #116	; 0x74
 8028f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028f6c:	ab03      	add	r3, sp, #12
 8028f6e:	9300      	str	r3, [sp, #0]
 8028f70:	462a      	mov	r2, r5
 8028f72:	4b06      	ldr	r3, [pc, #24]	; (8028f8c <_svfiprintf_r+0x1f8>)
 8028f74:	a904      	add	r1, sp, #16
 8028f76:	4638      	mov	r0, r7
 8028f78:	f7fc faf2 	bl	8025560 <_printf_i>
 8028f7c:	e7eb      	b.n	8028f56 <_svfiprintf_r+0x1c2>
 8028f7e:	bf00      	nop
 8028f80:	0802e584 	.word	0x0802e584
 8028f84:	0802e58e 	.word	0x0802e58e
 8028f88:	08025019 	.word	0x08025019
 8028f8c:	08028cdd 	.word	0x08028cdd
 8028f90:	0802e58a 	.word	0x0802e58a

08028f94 <_sungetc_r>:
 8028f94:	b538      	push	{r3, r4, r5, lr}
 8028f96:	1c4b      	adds	r3, r1, #1
 8028f98:	4614      	mov	r4, r2
 8028f9a:	d103      	bne.n	8028fa4 <_sungetc_r+0x10>
 8028f9c:	f04f 35ff 	mov.w	r5, #4294967295
 8028fa0:	4628      	mov	r0, r5
 8028fa2:	bd38      	pop	{r3, r4, r5, pc}
 8028fa4:	8993      	ldrh	r3, [r2, #12]
 8028fa6:	f023 0320 	bic.w	r3, r3, #32
 8028faa:	8193      	strh	r3, [r2, #12]
 8028fac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8028fae:	6852      	ldr	r2, [r2, #4]
 8028fb0:	b2cd      	uxtb	r5, r1
 8028fb2:	b18b      	cbz	r3, 8028fd8 <_sungetc_r+0x44>
 8028fb4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8028fb6:	4293      	cmp	r3, r2
 8028fb8:	dd08      	ble.n	8028fcc <_sungetc_r+0x38>
 8028fba:	6823      	ldr	r3, [r4, #0]
 8028fbc:	1e5a      	subs	r2, r3, #1
 8028fbe:	6022      	str	r2, [r4, #0]
 8028fc0:	f803 5c01 	strb.w	r5, [r3, #-1]
 8028fc4:	6863      	ldr	r3, [r4, #4]
 8028fc6:	3301      	adds	r3, #1
 8028fc8:	6063      	str	r3, [r4, #4]
 8028fca:	e7e9      	b.n	8028fa0 <_sungetc_r+0xc>
 8028fcc:	4621      	mov	r1, r4
 8028fce:	f000 fbcb 	bl	8029768 <__submore>
 8028fd2:	2800      	cmp	r0, #0
 8028fd4:	d0f1      	beq.n	8028fba <_sungetc_r+0x26>
 8028fd6:	e7e1      	b.n	8028f9c <_sungetc_r+0x8>
 8028fd8:	6921      	ldr	r1, [r4, #16]
 8028fda:	6823      	ldr	r3, [r4, #0]
 8028fdc:	b151      	cbz	r1, 8028ff4 <_sungetc_r+0x60>
 8028fde:	4299      	cmp	r1, r3
 8028fe0:	d208      	bcs.n	8028ff4 <_sungetc_r+0x60>
 8028fe2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8028fe6:	42a9      	cmp	r1, r5
 8028fe8:	d104      	bne.n	8028ff4 <_sungetc_r+0x60>
 8028fea:	3b01      	subs	r3, #1
 8028fec:	3201      	adds	r2, #1
 8028fee:	6023      	str	r3, [r4, #0]
 8028ff0:	6062      	str	r2, [r4, #4]
 8028ff2:	e7d5      	b.n	8028fa0 <_sungetc_r+0xc>
 8028ff4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8028ff8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8028ffc:	6363      	str	r3, [r4, #52]	; 0x34
 8028ffe:	2303      	movs	r3, #3
 8029000:	63a3      	str	r3, [r4, #56]	; 0x38
 8029002:	4623      	mov	r3, r4
 8029004:	f803 5f46 	strb.w	r5, [r3, #70]!
 8029008:	6023      	str	r3, [r4, #0]
 802900a:	2301      	movs	r3, #1
 802900c:	e7dc      	b.n	8028fc8 <_sungetc_r+0x34>

0802900e <__ssrefill_r>:
 802900e:	b510      	push	{r4, lr}
 8029010:	460c      	mov	r4, r1
 8029012:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8029014:	b169      	cbz	r1, 8029032 <__ssrefill_r+0x24>
 8029016:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802901a:	4299      	cmp	r1, r3
 802901c:	d001      	beq.n	8029022 <__ssrefill_r+0x14>
 802901e:	f7fb fd21 	bl	8024a64 <_free_r>
 8029022:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8029024:	6063      	str	r3, [r4, #4]
 8029026:	2000      	movs	r0, #0
 8029028:	6360      	str	r0, [r4, #52]	; 0x34
 802902a:	b113      	cbz	r3, 8029032 <__ssrefill_r+0x24>
 802902c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802902e:	6023      	str	r3, [r4, #0]
 8029030:	bd10      	pop	{r4, pc}
 8029032:	6923      	ldr	r3, [r4, #16]
 8029034:	6023      	str	r3, [r4, #0]
 8029036:	2300      	movs	r3, #0
 8029038:	6063      	str	r3, [r4, #4]
 802903a:	89a3      	ldrh	r3, [r4, #12]
 802903c:	f043 0320 	orr.w	r3, r3, #32
 8029040:	81a3      	strh	r3, [r4, #12]
 8029042:	f04f 30ff 	mov.w	r0, #4294967295
 8029046:	e7f3      	b.n	8029030 <__ssrefill_r+0x22>

08029048 <__ssvfiscanf_r>:
 8029048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802904c:	460c      	mov	r4, r1
 802904e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8029052:	2100      	movs	r1, #0
 8029054:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8029058:	49a6      	ldr	r1, [pc, #664]	; (80292f4 <__ssvfiscanf_r+0x2ac>)
 802905a:	91a0      	str	r1, [sp, #640]	; 0x280
 802905c:	f10d 0804 	add.w	r8, sp, #4
 8029060:	49a5      	ldr	r1, [pc, #660]	; (80292f8 <__ssvfiscanf_r+0x2b0>)
 8029062:	4fa6      	ldr	r7, [pc, #664]	; (80292fc <__ssvfiscanf_r+0x2b4>)
 8029064:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8029300 <__ssvfiscanf_r+0x2b8>
 8029068:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 802906c:	4606      	mov	r6, r0
 802906e:	91a1      	str	r1, [sp, #644]	; 0x284
 8029070:	9300      	str	r3, [sp, #0]
 8029072:	7813      	ldrb	r3, [r2, #0]
 8029074:	2b00      	cmp	r3, #0
 8029076:	f000 815a 	beq.w	802932e <__ssvfiscanf_r+0x2e6>
 802907a:	5dd9      	ldrb	r1, [r3, r7]
 802907c:	f011 0108 	ands.w	r1, r1, #8
 8029080:	f102 0501 	add.w	r5, r2, #1
 8029084:	d019      	beq.n	80290ba <__ssvfiscanf_r+0x72>
 8029086:	6863      	ldr	r3, [r4, #4]
 8029088:	2b00      	cmp	r3, #0
 802908a:	dd0f      	ble.n	80290ac <__ssvfiscanf_r+0x64>
 802908c:	6823      	ldr	r3, [r4, #0]
 802908e:	781a      	ldrb	r2, [r3, #0]
 8029090:	5cba      	ldrb	r2, [r7, r2]
 8029092:	0712      	lsls	r2, r2, #28
 8029094:	d401      	bmi.n	802909a <__ssvfiscanf_r+0x52>
 8029096:	462a      	mov	r2, r5
 8029098:	e7eb      	b.n	8029072 <__ssvfiscanf_r+0x2a>
 802909a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 802909c:	3201      	adds	r2, #1
 802909e:	9245      	str	r2, [sp, #276]	; 0x114
 80290a0:	6862      	ldr	r2, [r4, #4]
 80290a2:	3301      	adds	r3, #1
 80290a4:	3a01      	subs	r2, #1
 80290a6:	6062      	str	r2, [r4, #4]
 80290a8:	6023      	str	r3, [r4, #0]
 80290aa:	e7ec      	b.n	8029086 <__ssvfiscanf_r+0x3e>
 80290ac:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80290ae:	4621      	mov	r1, r4
 80290b0:	4630      	mov	r0, r6
 80290b2:	4798      	blx	r3
 80290b4:	2800      	cmp	r0, #0
 80290b6:	d0e9      	beq.n	802908c <__ssvfiscanf_r+0x44>
 80290b8:	e7ed      	b.n	8029096 <__ssvfiscanf_r+0x4e>
 80290ba:	2b25      	cmp	r3, #37	; 0x25
 80290bc:	d012      	beq.n	80290e4 <__ssvfiscanf_r+0x9c>
 80290be:	469a      	mov	sl, r3
 80290c0:	6863      	ldr	r3, [r4, #4]
 80290c2:	2b00      	cmp	r3, #0
 80290c4:	f340 8091 	ble.w	80291ea <__ssvfiscanf_r+0x1a2>
 80290c8:	6822      	ldr	r2, [r4, #0]
 80290ca:	7813      	ldrb	r3, [r2, #0]
 80290cc:	4553      	cmp	r3, sl
 80290ce:	f040 812e 	bne.w	802932e <__ssvfiscanf_r+0x2e6>
 80290d2:	6863      	ldr	r3, [r4, #4]
 80290d4:	3b01      	subs	r3, #1
 80290d6:	6063      	str	r3, [r4, #4]
 80290d8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80290da:	3201      	adds	r2, #1
 80290dc:	3301      	adds	r3, #1
 80290de:	6022      	str	r2, [r4, #0]
 80290e0:	9345      	str	r3, [sp, #276]	; 0x114
 80290e2:	e7d8      	b.n	8029096 <__ssvfiscanf_r+0x4e>
 80290e4:	9141      	str	r1, [sp, #260]	; 0x104
 80290e6:	9143      	str	r1, [sp, #268]	; 0x10c
 80290e8:	7853      	ldrb	r3, [r2, #1]
 80290ea:	2b2a      	cmp	r3, #42	; 0x2a
 80290ec:	bf02      	ittt	eq
 80290ee:	2310      	moveq	r3, #16
 80290f0:	1c95      	addeq	r5, r2, #2
 80290f2:	9341      	streq	r3, [sp, #260]	; 0x104
 80290f4:	220a      	movs	r2, #10
 80290f6:	46aa      	mov	sl, r5
 80290f8:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80290fc:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8029100:	2b09      	cmp	r3, #9
 8029102:	d91d      	bls.n	8029140 <__ssvfiscanf_r+0xf8>
 8029104:	487e      	ldr	r0, [pc, #504]	; (8029300 <__ssvfiscanf_r+0x2b8>)
 8029106:	2203      	movs	r2, #3
 8029108:	f7d7 f87a 	bl	8000200 <memchr>
 802910c:	b140      	cbz	r0, 8029120 <__ssvfiscanf_r+0xd8>
 802910e:	2301      	movs	r3, #1
 8029110:	eba0 0009 	sub.w	r0, r0, r9
 8029114:	fa03 f000 	lsl.w	r0, r3, r0
 8029118:	9b41      	ldr	r3, [sp, #260]	; 0x104
 802911a:	4318      	orrs	r0, r3
 802911c:	9041      	str	r0, [sp, #260]	; 0x104
 802911e:	4655      	mov	r5, sl
 8029120:	f815 3b01 	ldrb.w	r3, [r5], #1
 8029124:	2b78      	cmp	r3, #120	; 0x78
 8029126:	d806      	bhi.n	8029136 <__ssvfiscanf_r+0xee>
 8029128:	2b57      	cmp	r3, #87	; 0x57
 802912a:	d810      	bhi.n	802914e <__ssvfiscanf_r+0x106>
 802912c:	2b25      	cmp	r3, #37	; 0x25
 802912e:	d0c6      	beq.n	80290be <__ssvfiscanf_r+0x76>
 8029130:	d856      	bhi.n	80291e0 <__ssvfiscanf_r+0x198>
 8029132:	2b00      	cmp	r3, #0
 8029134:	d064      	beq.n	8029200 <__ssvfiscanf_r+0x1b8>
 8029136:	2303      	movs	r3, #3
 8029138:	9347      	str	r3, [sp, #284]	; 0x11c
 802913a:	230a      	movs	r3, #10
 802913c:	9342      	str	r3, [sp, #264]	; 0x108
 802913e:	e071      	b.n	8029224 <__ssvfiscanf_r+0x1dc>
 8029140:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8029142:	fb02 1103 	mla	r1, r2, r3, r1
 8029146:	3930      	subs	r1, #48	; 0x30
 8029148:	9143      	str	r1, [sp, #268]	; 0x10c
 802914a:	4655      	mov	r5, sl
 802914c:	e7d3      	b.n	80290f6 <__ssvfiscanf_r+0xae>
 802914e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8029152:	2a20      	cmp	r2, #32
 8029154:	d8ef      	bhi.n	8029136 <__ssvfiscanf_r+0xee>
 8029156:	a101      	add	r1, pc, #4	; (adr r1, 802915c <__ssvfiscanf_r+0x114>)
 8029158:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 802915c:	0802920f 	.word	0x0802920f
 8029160:	08029137 	.word	0x08029137
 8029164:	08029137 	.word	0x08029137
 8029168:	0802926d 	.word	0x0802926d
 802916c:	08029137 	.word	0x08029137
 8029170:	08029137 	.word	0x08029137
 8029174:	08029137 	.word	0x08029137
 8029178:	08029137 	.word	0x08029137
 802917c:	08029137 	.word	0x08029137
 8029180:	08029137 	.word	0x08029137
 8029184:	08029137 	.word	0x08029137
 8029188:	08029283 	.word	0x08029283
 802918c:	08029259 	.word	0x08029259
 8029190:	080291e7 	.word	0x080291e7
 8029194:	080291e7 	.word	0x080291e7
 8029198:	080291e7 	.word	0x080291e7
 802919c:	08029137 	.word	0x08029137
 80291a0:	0802925d 	.word	0x0802925d
 80291a4:	08029137 	.word	0x08029137
 80291a8:	08029137 	.word	0x08029137
 80291ac:	08029137 	.word	0x08029137
 80291b0:	08029137 	.word	0x08029137
 80291b4:	08029293 	.word	0x08029293
 80291b8:	08029265 	.word	0x08029265
 80291bc:	08029207 	.word	0x08029207
 80291c0:	08029137 	.word	0x08029137
 80291c4:	08029137 	.word	0x08029137
 80291c8:	0802928f 	.word	0x0802928f
 80291cc:	08029137 	.word	0x08029137
 80291d0:	08029259 	.word	0x08029259
 80291d4:	08029137 	.word	0x08029137
 80291d8:	08029137 	.word	0x08029137
 80291dc:	0802920f 	.word	0x0802920f
 80291e0:	3b45      	subs	r3, #69	; 0x45
 80291e2:	2b02      	cmp	r3, #2
 80291e4:	d8a7      	bhi.n	8029136 <__ssvfiscanf_r+0xee>
 80291e6:	2305      	movs	r3, #5
 80291e8:	e01b      	b.n	8029222 <__ssvfiscanf_r+0x1da>
 80291ea:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80291ec:	4621      	mov	r1, r4
 80291ee:	4630      	mov	r0, r6
 80291f0:	4798      	blx	r3
 80291f2:	2800      	cmp	r0, #0
 80291f4:	f43f af68 	beq.w	80290c8 <__ssvfiscanf_r+0x80>
 80291f8:	9844      	ldr	r0, [sp, #272]	; 0x110
 80291fa:	2800      	cmp	r0, #0
 80291fc:	f040 808d 	bne.w	802931a <__ssvfiscanf_r+0x2d2>
 8029200:	f04f 30ff 	mov.w	r0, #4294967295
 8029204:	e08f      	b.n	8029326 <__ssvfiscanf_r+0x2de>
 8029206:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8029208:	f042 0220 	orr.w	r2, r2, #32
 802920c:	9241      	str	r2, [sp, #260]	; 0x104
 802920e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8029210:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8029214:	9241      	str	r2, [sp, #260]	; 0x104
 8029216:	2210      	movs	r2, #16
 8029218:	2b6f      	cmp	r3, #111	; 0x6f
 802921a:	9242      	str	r2, [sp, #264]	; 0x108
 802921c:	bf34      	ite	cc
 802921e:	2303      	movcc	r3, #3
 8029220:	2304      	movcs	r3, #4
 8029222:	9347      	str	r3, [sp, #284]	; 0x11c
 8029224:	6863      	ldr	r3, [r4, #4]
 8029226:	2b00      	cmp	r3, #0
 8029228:	dd42      	ble.n	80292b0 <__ssvfiscanf_r+0x268>
 802922a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 802922c:	0659      	lsls	r1, r3, #25
 802922e:	d404      	bmi.n	802923a <__ssvfiscanf_r+0x1f2>
 8029230:	6823      	ldr	r3, [r4, #0]
 8029232:	781a      	ldrb	r2, [r3, #0]
 8029234:	5cba      	ldrb	r2, [r7, r2]
 8029236:	0712      	lsls	r2, r2, #28
 8029238:	d441      	bmi.n	80292be <__ssvfiscanf_r+0x276>
 802923a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 802923c:	2b02      	cmp	r3, #2
 802923e:	dc50      	bgt.n	80292e2 <__ssvfiscanf_r+0x29a>
 8029240:	466b      	mov	r3, sp
 8029242:	4622      	mov	r2, r4
 8029244:	a941      	add	r1, sp, #260	; 0x104
 8029246:	4630      	mov	r0, r6
 8029248:	f000 f876 	bl	8029338 <_scanf_chars>
 802924c:	2801      	cmp	r0, #1
 802924e:	d06e      	beq.n	802932e <__ssvfiscanf_r+0x2e6>
 8029250:	2802      	cmp	r0, #2
 8029252:	f47f af20 	bne.w	8029096 <__ssvfiscanf_r+0x4e>
 8029256:	e7cf      	b.n	80291f8 <__ssvfiscanf_r+0x1b0>
 8029258:	220a      	movs	r2, #10
 802925a:	e7dd      	b.n	8029218 <__ssvfiscanf_r+0x1d0>
 802925c:	2300      	movs	r3, #0
 802925e:	9342      	str	r3, [sp, #264]	; 0x108
 8029260:	2303      	movs	r3, #3
 8029262:	e7de      	b.n	8029222 <__ssvfiscanf_r+0x1da>
 8029264:	2308      	movs	r3, #8
 8029266:	9342      	str	r3, [sp, #264]	; 0x108
 8029268:	2304      	movs	r3, #4
 802926a:	e7da      	b.n	8029222 <__ssvfiscanf_r+0x1da>
 802926c:	4629      	mov	r1, r5
 802926e:	4640      	mov	r0, r8
 8029270:	f000 f9ce 	bl	8029610 <__sccl>
 8029274:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8029276:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802927a:	9341      	str	r3, [sp, #260]	; 0x104
 802927c:	4605      	mov	r5, r0
 802927e:	2301      	movs	r3, #1
 8029280:	e7cf      	b.n	8029222 <__ssvfiscanf_r+0x1da>
 8029282:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8029284:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8029288:	9341      	str	r3, [sp, #260]	; 0x104
 802928a:	2300      	movs	r3, #0
 802928c:	e7c9      	b.n	8029222 <__ssvfiscanf_r+0x1da>
 802928e:	2302      	movs	r3, #2
 8029290:	e7c7      	b.n	8029222 <__ssvfiscanf_r+0x1da>
 8029292:	9841      	ldr	r0, [sp, #260]	; 0x104
 8029294:	06c3      	lsls	r3, r0, #27
 8029296:	f53f aefe 	bmi.w	8029096 <__ssvfiscanf_r+0x4e>
 802929a:	9b00      	ldr	r3, [sp, #0]
 802929c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 802929e:	1d19      	adds	r1, r3, #4
 80292a0:	9100      	str	r1, [sp, #0]
 80292a2:	681b      	ldr	r3, [r3, #0]
 80292a4:	f010 0f01 	tst.w	r0, #1
 80292a8:	bf14      	ite	ne
 80292aa:	801a      	strhne	r2, [r3, #0]
 80292ac:	601a      	streq	r2, [r3, #0]
 80292ae:	e6f2      	b.n	8029096 <__ssvfiscanf_r+0x4e>
 80292b0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80292b2:	4621      	mov	r1, r4
 80292b4:	4630      	mov	r0, r6
 80292b6:	4798      	blx	r3
 80292b8:	2800      	cmp	r0, #0
 80292ba:	d0b6      	beq.n	802922a <__ssvfiscanf_r+0x1e2>
 80292bc:	e79c      	b.n	80291f8 <__ssvfiscanf_r+0x1b0>
 80292be:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80292c0:	3201      	adds	r2, #1
 80292c2:	9245      	str	r2, [sp, #276]	; 0x114
 80292c4:	6862      	ldr	r2, [r4, #4]
 80292c6:	3a01      	subs	r2, #1
 80292c8:	2a00      	cmp	r2, #0
 80292ca:	6062      	str	r2, [r4, #4]
 80292cc:	dd02      	ble.n	80292d4 <__ssvfiscanf_r+0x28c>
 80292ce:	3301      	adds	r3, #1
 80292d0:	6023      	str	r3, [r4, #0]
 80292d2:	e7ad      	b.n	8029230 <__ssvfiscanf_r+0x1e8>
 80292d4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80292d6:	4621      	mov	r1, r4
 80292d8:	4630      	mov	r0, r6
 80292da:	4798      	blx	r3
 80292dc:	2800      	cmp	r0, #0
 80292de:	d0a7      	beq.n	8029230 <__ssvfiscanf_r+0x1e8>
 80292e0:	e78a      	b.n	80291f8 <__ssvfiscanf_r+0x1b0>
 80292e2:	2b04      	cmp	r3, #4
 80292e4:	dc0e      	bgt.n	8029304 <__ssvfiscanf_r+0x2bc>
 80292e6:	466b      	mov	r3, sp
 80292e8:	4622      	mov	r2, r4
 80292ea:	a941      	add	r1, sp, #260	; 0x104
 80292ec:	4630      	mov	r0, r6
 80292ee:	f000 f87d 	bl	80293ec <_scanf_i>
 80292f2:	e7ab      	b.n	802924c <__ssvfiscanf_r+0x204>
 80292f4:	08028f95 	.word	0x08028f95
 80292f8:	0802900f 	.word	0x0802900f
 80292fc:	0802e47f 	.word	0x0802e47f
 8029300:	0802e58a 	.word	0x0802e58a
 8029304:	4b0b      	ldr	r3, [pc, #44]	; (8029334 <__ssvfiscanf_r+0x2ec>)
 8029306:	2b00      	cmp	r3, #0
 8029308:	f43f aec5 	beq.w	8029096 <__ssvfiscanf_r+0x4e>
 802930c:	466b      	mov	r3, sp
 802930e:	4622      	mov	r2, r4
 8029310:	a941      	add	r1, sp, #260	; 0x104
 8029312:	4630      	mov	r0, r6
 8029314:	f3af 8000 	nop.w
 8029318:	e798      	b.n	802924c <__ssvfiscanf_r+0x204>
 802931a:	89a3      	ldrh	r3, [r4, #12]
 802931c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8029320:	bf18      	it	ne
 8029322:	f04f 30ff 	movne.w	r0, #4294967295
 8029326:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 802932a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802932e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8029330:	e7f9      	b.n	8029326 <__ssvfiscanf_r+0x2de>
 8029332:	bf00      	nop
 8029334:	00000000 	.word	0x00000000

08029338 <_scanf_chars>:
 8029338:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802933c:	4615      	mov	r5, r2
 802933e:	688a      	ldr	r2, [r1, #8]
 8029340:	4680      	mov	r8, r0
 8029342:	460c      	mov	r4, r1
 8029344:	b932      	cbnz	r2, 8029354 <_scanf_chars+0x1c>
 8029346:	698a      	ldr	r2, [r1, #24]
 8029348:	2a00      	cmp	r2, #0
 802934a:	bf0c      	ite	eq
 802934c:	2201      	moveq	r2, #1
 802934e:	f04f 32ff 	movne.w	r2, #4294967295
 8029352:	608a      	str	r2, [r1, #8]
 8029354:	6822      	ldr	r2, [r4, #0]
 8029356:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80293e8 <_scanf_chars+0xb0>
 802935a:	06d1      	lsls	r1, r2, #27
 802935c:	bf5f      	itttt	pl
 802935e:	681a      	ldrpl	r2, [r3, #0]
 8029360:	1d11      	addpl	r1, r2, #4
 8029362:	6019      	strpl	r1, [r3, #0]
 8029364:	6816      	ldrpl	r6, [r2, #0]
 8029366:	2700      	movs	r7, #0
 8029368:	69a0      	ldr	r0, [r4, #24]
 802936a:	b188      	cbz	r0, 8029390 <_scanf_chars+0x58>
 802936c:	2801      	cmp	r0, #1
 802936e:	d107      	bne.n	8029380 <_scanf_chars+0x48>
 8029370:	682a      	ldr	r2, [r5, #0]
 8029372:	7811      	ldrb	r1, [r2, #0]
 8029374:	6962      	ldr	r2, [r4, #20]
 8029376:	5c52      	ldrb	r2, [r2, r1]
 8029378:	b952      	cbnz	r2, 8029390 <_scanf_chars+0x58>
 802937a:	2f00      	cmp	r7, #0
 802937c:	d031      	beq.n	80293e2 <_scanf_chars+0xaa>
 802937e:	e022      	b.n	80293c6 <_scanf_chars+0x8e>
 8029380:	2802      	cmp	r0, #2
 8029382:	d120      	bne.n	80293c6 <_scanf_chars+0x8e>
 8029384:	682b      	ldr	r3, [r5, #0]
 8029386:	781b      	ldrb	r3, [r3, #0]
 8029388:	f813 3009 	ldrb.w	r3, [r3, r9]
 802938c:	071b      	lsls	r3, r3, #28
 802938e:	d41a      	bmi.n	80293c6 <_scanf_chars+0x8e>
 8029390:	6823      	ldr	r3, [r4, #0]
 8029392:	06da      	lsls	r2, r3, #27
 8029394:	bf5e      	ittt	pl
 8029396:	682b      	ldrpl	r3, [r5, #0]
 8029398:	781b      	ldrbpl	r3, [r3, #0]
 802939a:	f806 3b01 	strbpl.w	r3, [r6], #1
 802939e:	682a      	ldr	r2, [r5, #0]
 80293a0:	686b      	ldr	r3, [r5, #4]
 80293a2:	3201      	adds	r2, #1
 80293a4:	602a      	str	r2, [r5, #0]
 80293a6:	68a2      	ldr	r2, [r4, #8]
 80293a8:	3b01      	subs	r3, #1
 80293aa:	3a01      	subs	r2, #1
 80293ac:	606b      	str	r3, [r5, #4]
 80293ae:	3701      	adds	r7, #1
 80293b0:	60a2      	str	r2, [r4, #8]
 80293b2:	b142      	cbz	r2, 80293c6 <_scanf_chars+0x8e>
 80293b4:	2b00      	cmp	r3, #0
 80293b6:	dcd7      	bgt.n	8029368 <_scanf_chars+0x30>
 80293b8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80293bc:	4629      	mov	r1, r5
 80293be:	4640      	mov	r0, r8
 80293c0:	4798      	blx	r3
 80293c2:	2800      	cmp	r0, #0
 80293c4:	d0d0      	beq.n	8029368 <_scanf_chars+0x30>
 80293c6:	6823      	ldr	r3, [r4, #0]
 80293c8:	f013 0310 	ands.w	r3, r3, #16
 80293cc:	d105      	bne.n	80293da <_scanf_chars+0xa2>
 80293ce:	68e2      	ldr	r2, [r4, #12]
 80293d0:	3201      	adds	r2, #1
 80293d2:	60e2      	str	r2, [r4, #12]
 80293d4:	69a2      	ldr	r2, [r4, #24]
 80293d6:	b102      	cbz	r2, 80293da <_scanf_chars+0xa2>
 80293d8:	7033      	strb	r3, [r6, #0]
 80293da:	6923      	ldr	r3, [r4, #16]
 80293dc:	443b      	add	r3, r7
 80293de:	6123      	str	r3, [r4, #16]
 80293e0:	2000      	movs	r0, #0
 80293e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80293e6:	bf00      	nop
 80293e8:	0802e47f 	.word	0x0802e47f

080293ec <_scanf_i>:
 80293ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80293f0:	4698      	mov	r8, r3
 80293f2:	4b76      	ldr	r3, [pc, #472]	; (80295cc <_scanf_i+0x1e0>)
 80293f4:	460c      	mov	r4, r1
 80293f6:	4682      	mov	sl, r0
 80293f8:	4616      	mov	r6, r2
 80293fa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80293fe:	b087      	sub	sp, #28
 8029400:	ab03      	add	r3, sp, #12
 8029402:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8029406:	4b72      	ldr	r3, [pc, #456]	; (80295d0 <_scanf_i+0x1e4>)
 8029408:	69a1      	ldr	r1, [r4, #24]
 802940a:	4a72      	ldr	r2, [pc, #456]	; (80295d4 <_scanf_i+0x1e8>)
 802940c:	2903      	cmp	r1, #3
 802940e:	bf18      	it	ne
 8029410:	461a      	movne	r2, r3
 8029412:	68a3      	ldr	r3, [r4, #8]
 8029414:	9201      	str	r2, [sp, #4]
 8029416:	1e5a      	subs	r2, r3, #1
 8029418:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 802941c:	bf88      	it	hi
 802941e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8029422:	4627      	mov	r7, r4
 8029424:	bf82      	ittt	hi
 8029426:	eb03 0905 	addhi.w	r9, r3, r5
 802942a:	f240 135d 	movwhi	r3, #349	; 0x15d
 802942e:	60a3      	strhi	r3, [r4, #8]
 8029430:	f857 3b1c 	ldr.w	r3, [r7], #28
 8029434:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8029438:	bf98      	it	ls
 802943a:	f04f 0900 	movls.w	r9, #0
 802943e:	6023      	str	r3, [r4, #0]
 8029440:	463d      	mov	r5, r7
 8029442:	f04f 0b00 	mov.w	fp, #0
 8029446:	6831      	ldr	r1, [r6, #0]
 8029448:	ab03      	add	r3, sp, #12
 802944a:	7809      	ldrb	r1, [r1, #0]
 802944c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8029450:	2202      	movs	r2, #2
 8029452:	f7d6 fed5 	bl	8000200 <memchr>
 8029456:	b328      	cbz	r0, 80294a4 <_scanf_i+0xb8>
 8029458:	f1bb 0f01 	cmp.w	fp, #1
 802945c:	d159      	bne.n	8029512 <_scanf_i+0x126>
 802945e:	6862      	ldr	r2, [r4, #4]
 8029460:	b92a      	cbnz	r2, 802946e <_scanf_i+0x82>
 8029462:	6822      	ldr	r2, [r4, #0]
 8029464:	2308      	movs	r3, #8
 8029466:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 802946a:	6063      	str	r3, [r4, #4]
 802946c:	6022      	str	r2, [r4, #0]
 802946e:	6822      	ldr	r2, [r4, #0]
 8029470:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8029474:	6022      	str	r2, [r4, #0]
 8029476:	68a2      	ldr	r2, [r4, #8]
 8029478:	1e51      	subs	r1, r2, #1
 802947a:	60a1      	str	r1, [r4, #8]
 802947c:	b192      	cbz	r2, 80294a4 <_scanf_i+0xb8>
 802947e:	6832      	ldr	r2, [r6, #0]
 8029480:	1c51      	adds	r1, r2, #1
 8029482:	6031      	str	r1, [r6, #0]
 8029484:	7812      	ldrb	r2, [r2, #0]
 8029486:	f805 2b01 	strb.w	r2, [r5], #1
 802948a:	6872      	ldr	r2, [r6, #4]
 802948c:	3a01      	subs	r2, #1
 802948e:	2a00      	cmp	r2, #0
 8029490:	6072      	str	r2, [r6, #4]
 8029492:	dc07      	bgt.n	80294a4 <_scanf_i+0xb8>
 8029494:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8029498:	4631      	mov	r1, r6
 802949a:	4650      	mov	r0, sl
 802949c:	4790      	blx	r2
 802949e:	2800      	cmp	r0, #0
 80294a0:	f040 8085 	bne.w	80295ae <_scanf_i+0x1c2>
 80294a4:	f10b 0b01 	add.w	fp, fp, #1
 80294a8:	f1bb 0f03 	cmp.w	fp, #3
 80294ac:	d1cb      	bne.n	8029446 <_scanf_i+0x5a>
 80294ae:	6863      	ldr	r3, [r4, #4]
 80294b0:	b90b      	cbnz	r3, 80294b6 <_scanf_i+0xca>
 80294b2:	230a      	movs	r3, #10
 80294b4:	6063      	str	r3, [r4, #4]
 80294b6:	6863      	ldr	r3, [r4, #4]
 80294b8:	4947      	ldr	r1, [pc, #284]	; (80295d8 <_scanf_i+0x1ec>)
 80294ba:	6960      	ldr	r0, [r4, #20]
 80294bc:	1ac9      	subs	r1, r1, r3
 80294be:	f000 f8a7 	bl	8029610 <__sccl>
 80294c2:	f04f 0b00 	mov.w	fp, #0
 80294c6:	68a3      	ldr	r3, [r4, #8]
 80294c8:	6822      	ldr	r2, [r4, #0]
 80294ca:	2b00      	cmp	r3, #0
 80294cc:	d03d      	beq.n	802954a <_scanf_i+0x15e>
 80294ce:	6831      	ldr	r1, [r6, #0]
 80294d0:	6960      	ldr	r0, [r4, #20]
 80294d2:	f891 c000 	ldrb.w	ip, [r1]
 80294d6:	f810 000c 	ldrb.w	r0, [r0, ip]
 80294da:	2800      	cmp	r0, #0
 80294dc:	d035      	beq.n	802954a <_scanf_i+0x15e>
 80294de:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80294e2:	d124      	bne.n	802952e <_scanf_i+0x142>
 80294e4:	0510      	lsls	r0, r2, #20
 80294e6:	d522      	bpl.n	802952e <_scanf_i+0x142>
 80294e8:	f10b 0b01 	add.w	fp, fp, #1
 80294ec:	f1b9 0f00 	cmp.w	r9, #0
 80294f0:	d003      	beq.n	80294fa <_scanf_i+0x10e>
 80294f2:	3301      	adds	r3, #1
 80294f4:	f109 39ff 	add.w	r9, r9, #4294967295
 80294f8:	60a3      	str	r3, [r4, #8]
 80294fa:	6873      	ldr	r3, [r6, #4]
 80294fc:	3b01      	subs	r3, #1
 80294fe:	2b00      	cmp	r3, #0
 8029500:	6073      	str	r3, [r6, #4]
 8029502:	dd1b      	ble.n	802953c <_scanf_i+0x150>
 8029504:	6833      	ldr	r3, [r6, #0]
 8029506:	3301      	adds	r3, #1
 8029508:	6033      	str	r3, [r6, #0]
 802950a:	68a3      	ldr	r3, [r4, #8]
 802950c:	3b01      	subs	r3, #1
 802950e:	60a3      	str	r3, [r4, #8]
 8029510:	e7d9      	b.n	80294c6 <_scanf_i+0xda>
 8029512:	f1bb 0f02 	cmp.w	fp, #2
 8029516:	d1ae      	bne.n	8029476 <_scanf_i+0x8a>
 8029518:	6822      	ldr	r2, [r4, #0]
 802951a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 802951e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8029522:	d1bf      	bne.n	80294a4 <_scanf_i+0xb8>
 8029524:	2310      	movs	r3, #16
 8029526:	6063      	str	r3, [r4, #4]
 8029528:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 802952c:	e7a2      	b.n	8029474 <_scanf_i+0x88>
 802952e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8029532:	6022      	str	r2, [r4, #0]
 8029534:	780b      	ldrb	r3, [r1, #0]
 8029536:	f805 3b01 	strb.w	r3, [r5], #1
 802953a:	e7de      	b.n	80294fa <_scanf_i+0x10e>
 802953c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8029540:	4631      	mov	r1, r6
 8029542:	4650      	mov	r0, sl
 8029544:	4798      	blx	r3
 8029546:	2800      	cmp	r0, #0
 8029548:	d0df      	beq.n	802950a <_scanf_i+0x11e>
 802954a:	6823      	ldr	r3, [r4, #0]
 802954c:	05db      	lsls	r3, r3, #23
 802954e:	d50d      	bpl.n	802956c <_scanf_i+0x180>
 8029550:	42bd      	cmp	r5, r7
 8029552:	d909      	bls.n	8029568 <_scanf_i+0x17c>
 8029554:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8029558:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 802955c:	4632      	mov	r2, r6
 802955e:	4650      	mov	r0, sl
 8029560:	4798      	blx	r3
 8029562:	f105 39ff 	add.w	r9, r5, #4294967295
 8029566:	464d      	mov	r5, r9
 8029568:	42bd      	cmp	r5, r7
 802956a:	d02d      	beq.n	80295c8 <_scanf_i+0x1dc>
 802956c:	6822      	ldr	r2, [r4, #0]
 802956e:	f012 0210 	ands.w	r2, r2, #16
 8029572:	d113      	bne.n	802959c <_scanf_i+0x1b0>
 8029574:	702a      	strb	r2, [r5, #0]
 8029576:	6863      	ldr	r3, [r4, #4]
 8029578:	9e01      	ldr	r6, [sp, #4]
 802957a:	4639      	mov	r1, r7
 802957c:	4650      	mov	r0, sl
 802957e:	47b0      	blx	r6
 8029580:	6821      	ldr	r1, [r4, #0]
 8029582:	f8d8 3000 	ldr.w	r3, [r8]
 8029586:	f011 0f20 	tst.w	r1, #32
 802958a:	d013      	beq.n	80295b4 <_scanf_i+0x1c8>
 802958c:	1d1a      	adds	r2, r3, #4
 802958e:	f8c8 2000 	str.w	r2, [r8]
 8029592:	681b      	ldr	r3, [r3, #0]
 8029594:	6018      	str	r0, [r3, #0]
 8029596:	68e3      	ldr	r3, [r4, #12]
 8029598:	3301      	adds	r3, #1
 802959a:	60e3      	str	r3, [r4, #12]
 802959c:	1bed      	subs	r5, r5, r7
 802959e:	44ab      	add	fp, r5
 80295a0:	6925      	ldr	r5, [r4, #16]
 80295a2:	445d      	add	r5, fp
 80295a4:	6125      	str	r5, [r4, #16]
 80295a6:	2000      	movs	r0, #0
 80295a8:	b007      	add	sp, #28
 80295aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80295ae:	f04f 0b00 	mov.w	fp, #0
 80295b2:	e7ca      	b.n	802954a <_scanf_i+0x15e>
 80295b4:	1d1a      	adds	r2, r3, #4
 80295b6:	f8c8 2000 	str.w	r2, [r8]
 80295ba:	681b      	ldr	r3, [r3, #0]
 80295bc:	f011 0f01 	tst.w	r1, #1
 80295c0:	bf14      	ite	ne
 80295c2:	8018      	strhne	r0, [r3, #0]
 80295c4:	6018      	streq	r0, [r3, #0]
 80295c6:	e7e6      	b.n	8029596 <_scanf_i+0x1aa>
 80295c8:	2001      	movs	r0, #1
 80295ca:	e7ed      	b.n	80295a8 <_scanf_i+0x1bc>
 80295cc:	0802e1ec 	.word	0x0802e1ec
 80295d0:	08029765 	.word	0x08029765
 80295d4:	08026831 	.word	0x08026831
 80295d8:	0802e995 	.word	0x0802e995

080295dc <_read_r>:
 80295dc:	b538      	push	{r3, r4, r5, lr}
 80295de:	4d07      	ldr	r5, [pc, #28]	; (80295fc <_read_r+0x20>)
 80295e0:	4604      	mov	r4, r0
 80295e2:	4608      	mov	r0, r1
 80295e4:	4611      	mov	r1, r2
 80295e6:	2200      	movs	r2, #0
 80295e8:	602a      	str	r2, [r5, #0]
 80295ea:	461a      	mov	r2, r3
 80295ec:	f7e0 fc54 	bl	8009e98 <_read>
 80295f0:	1c43      	adds	r3, r0, #1
 80295f2:	d102      	bne.n	80295fa <_read_r+0x1e>
 80295f4:	682b      	ldr	r3, [r5, #0]
 80295f6:	b103      	cbz	r3, 80295fa <_read_r+0x1e>
 80295f8:	6023      	str	r3, [r4, #0]
 80295fa:	bd38      	pop	{r3, r4, r5, pc}
 80295fc:	20013930 	.word	0x20013930

08029600 <nan>:
 8029600:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8029608 <nan+0x8>
 8029604:	4770      	bx	lr
 8029606:	bf00      	nop
 8029608:	00000000 	.word	0x00000000
 802960c:	7ff80000 	.word	0x7ff80000

08029610 <__sccl>:
 8029610:	b570      	push	{r4, r5, r6, lr}
 8029612:	780b      	ldrb	r3, [r1, #0]
 8029614:	4604      	mov	r4, r0
 8029616:	2b5e      	cmp	r3, #94	; 0x5e
 8029618:	bf0b      	itete	eq
 802961a:	784b      	ldrbeq	r3, [r1, #1]
 802961c:	1c48      	addne	r0, r1, #1
 802961e:	1c88      	addeq	r0, r1, #2
 8029620:	2200      	movne	r2, #0
 8029622:	bf08      	it	eq
 8029624:	2201      	moveq	r2, #1
 8029626:	1e61      	subs	r1, r4, #1
 8029628:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 802962c:	f801 2f01 	strb.w	r2, [r1, #1]!
 8029630:	42a9      	cmp	r1, r5
 8029632:	d1fb      	bne.n	802962c <__sccl+0x1c>
 8029634:	b90b      	cbnz	r3, 802963a <__sccl+0x2a>
 8029636:	3801      	subs	r0, #1
 8029638:	bd70      	pop	{r4, r5, r6, pc}
 802963a:	f082 0201 	eor.w	r2, r2, #1
 802963e:	54e2      	strb	r2, [r4, r3]
 8029640:	4605      	mov	r5, r0
 8029642:	4628      	mov	r0, r5
 8029644:	f810 1b01 	ldrb.w	r1, [r0], #1
 8029648:	292d      	cmp	r1, #45	; 0x2d
 802964a:	d006      	beq.n	802965a <__sccl+0x4a>
 802964c:	295d      	cmp	r1, #93	; 0x5d
 802964e:	d0f3      	beq.n	8029638 <__sccl+0x28>
 8029650:	b909      	cbnz	r1, 8029656 <__sccl+0x46>
 8029652:	4628      	mov	r0, r5
 8029654:	e7f0      	b.n	8029638 <__sccl+0x28>
 8029656:	460b      	mov	r3, r1
 8029658:	e7f1      	b.n	802963e <__sccl+0x2e>
 802965a:	786e      	ldrb	r6, [r5, #1]
 802965c:	2e5d      	cmp	r6, #93	; 0x5d
 802965e:	d0fa      	beq.n	8029656 <__sccl+0x46>
 8029660:	42b3      	cmp	r3, r6
 8029662:	dcf8      	bgt.n	8029656 <__sccl+0x46>
 8029664:	3502      	adds	r5, #2
 8029666:	4619      	mov	r1, r3
 8029668:	3101      	adds	r1, #1
 802966a:	428e      	cmp	r6, r1
 802966c:	5462      	strb	r2, [r4, r1]
 802966e:	dcfb      	bgt.n	8029668 <__sccl+0x58>
 8029670:	1af1      	subs	r1, r6, r3
 8029672:	3901      	subs	r1, #1
 8029674:	1c58      	adds	r0, r3, #1
 8029676:	42b3      	cmp	r3, r6
 8029678:	bfa8      	it	ge
 802967a:	2100      	movge	r1, #0
 802967c:	1843      	adds	r3, r0, r1
 802967e:	e7e0      	b.n	8029642 <__sccl+0x32>

08029680 <_strtoul_l.constprop.0>:
 8029680:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8029684:	4f36      	ldr	r7, [pc, #216]	; (8029760 <_strtoul_l.constprop.0+0xe0>)
 8029686:	4686      	mov	lr, r0
 8029688:	460d      	mov	r5, r1
 802968a:	4628      	mov	r0, r5
 802968c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8029690:	5de6      	ldrb	r6, [r4, r7]
 8029692:	f016 0608 	ands.w	r6, r6, #8
 8029696:	d1f8      	bne.n	802968a <_strtoul_l.constprop.0+0xa>
 8029698:	2c2d      	cmp	r4, #45	; 0x2d
 802969a:	d12f      	bne.n	80296fc <_strtoul_l.constprop.0+0x7c>
 802969c:	782c      	ldrb	r4, [r5, #0]
 802969e:	2601      	movs	r6, #1
 80296a0:	1c85      	adds	r5, r0, #2
 80296a2:	2b00      	cmp	r3, #0
 80296a4:	d057      	beq.n	8029756 <_strtoul_l.constprop.0+0xd6>
 80296a6:	2b10      	cmp	r3, #16
 80296a8:	d109      	bne.n	80296be <_strtoul_l.constprop.0+0x3e>
 80296aa:	2c30      	cmp	r4, #48	; 0x30
 80296ac:	d107      	bne.n	80296be <_strtoul_l.constprop.0+0x3e>
 80296ae:	7828      	ldrb	r0, [r5, #0]
 80296b0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80296b4:	2858      	cmp	r0, #88	; 0x58
 80296b6:	d149      	bne.n	802974c <_strtoul_l.constprop.0+0xcc>
 80296b8:	786c      	ldrb	r4, [r5, #1]
 80296ba:	2310      	movs	r3, #16
 80296bc:	3502      	adds	r5, #2
 80296be:	f04f 38ff 	mov.w	r8, #4294967295
 80296c2:	2700      	movs	r7, #0
 80296c4:	fbb8 f8f3 	udiv	r8, r8, r3
 80296c8:	fb03 f908 	mul.w	r9, r3, r8
 80296cc:	ea6f 0909 	mvn.w	r9, r9
 80296d0:	4638      	mov	r0, r7
 80296d2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80296d6:	f1bc 0f09 	cmp.w	ip, #9
 80296da:	d814      	bhi.n	8029706 <_strtoul_l.constprop.0+0x86>
 80296dc:	4664      	mov	r4, ip
 80296de:	42a3      	cmp	r3, r4
 80296e0:	dd22      	ble.n	8029728 <_strtoul_l.constprop.0+0xa8>
 80296e2:	2f00      	cmp	r7, #0
 80296e4:	db1d      	blt.n	8029722 <_strtoul_l.constprop.0+0xa2>
 80296e6:	4580      	cmp	r8, r0
 80296e8:	d31b      	bcc.n	8029722 <_strtoul_l.constprop.0+0xa2>
 80296ea:	d101      	bne.n	80296f0 <_strtoul_l.constprop.0+0x70>
 80296ec:	45a1      	cmp	r9, r4
 80296ee:	db18      	blt.n	8029722 <_strtoul_l.constprop.0+0xa2>
 80296f0:	fb00 4003 	mla	r0, r0, r3, r4
 80296f4:	2701      	movs	r7, #1
 80296f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80296fa:	e7ea      	b.n	80296d2 <_strtoul_l.constprop.0+0x52>
 80296fc:	2c2b      	cmp	r4, #43	; 0x2b
 80296fe:	bf04      	itt	eq
 8029700:	782c      	ldrbeq	r4, [r5, #0]
 8029702:	1c85      	addeq	r5, r0, #2
 8029704:	e7cd      	b.n	80296a2 <_strtoul_l.constprop.0+0x22>
 8029706:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 802970a:	f1bc 0f19 	cmp.w	ip, #25
 802970e:	d801      	bhi.n	8029714 <_strtoul_l.constprop.0+0x94>
 8029710:	3c37      	subs	r4, #55	; 0x37
 8029712:	e7e4      	b.n	80296de <_strtoul_l.constprop.0+0x5e>
 8029714:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8029718:	f1bc 0f19 	cmp.w	ip, #25
 802971c:	d804      	bhi.n	8029728 <_strtoul_l.constprop.0+0xa8>
 802971e:	3c57      	subs	r4, #87	; 0x57
 8029720:	e7dd      	b.n	80296de <_strtoul_l.constprop.0+0x5e>
 8029722:	f04f 37ff 	mov.w	r7, #4294967295
 8029726:	e7e6      	b.n	80296f6 <_strtoul_l.constprop.0+0x76>
 8029728:	2f00      	cmp	r7, #0
 802972a:	da07      	bge.n	802973c <_strtoul_l.constprop.0+0xbc>
 802972c:	2322      	movs	r3, #34	; 0x22
 802972e:	f8ce 3000 	str.w	r3, [lr]
 8029732:	f04f 30ff 	mov.w	r0, #4294967295
 8029736:	b932      	cbnz	r2, 8029746 <_strtoul_l.constprop.0+0xc6>
 8029738:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802973c:	b106      	cbz	r6, 8029740 <_strtoul_l.constprop.0+0xc0>
 802973e:	4240      	negs	r0, r0
 8029740:	2a00      	cmp	r2, #0
 8029742:	d0f9      	beq.n	8029738 <_strtoul_l.constprop.0+0xb8>
 8029744:	b107      	cbz	r7, 8029748 <_strtoul_l.constprop.0+0xc8>
 8029746:	1e69      	subs	r1, r5, #1
 8029748:	6011      	str	r1, [r2, #0]
 802974a:	e7f5      	b.n	8029738 <_strtoul_l.constprop.0+0xb8>
 802974c:	2430      	movs	r4, #48	; 0x30
 802974e:	2b00      	cmp	r3, #0
 8029750:	d1b5      	bne.n	80296be <_strtoul_l.constprop.0+0x3e>
 8029752:	2308      	movs	r3, #8
 8029754:	e7b3      	b.n	80296be <_strtoul_l.constprop.0+0x3e>
 8029756:	2c30      	cmp	r4, #48	; 0x30
 8029758:	d0a9      	beq.n	80296ae <_strtoul_l.constprop.0+0x2e>
 802975a:	230a      	movs	r3, #10
 802975c:	e7af      	b.n	80296be <_strtoul_l.constprop.0+0x3e>
 802975e:	bf00      	nop
 8029760:	0802e47f 	.word	0x0802e47f

08029764 <_strtoul_r>:
 8029764:	f7ff bf8c 	b.w	8029680 <_strtoul_l.constprop.0>

08029768 <__submore>:
 8029768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802976c:	460c      	mov	r4, r1
 802976e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8029770:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8029774:	4299      	cmp	r1, r3
 8029776:	d11d      	bne.n	80297b4 <__submore+0x4c>
 8029778:	f44f 6180 	mov.w	r1, #1024	; 0x400
 802977c:	f7fb f9de 	bl	8024b3c <_malloc_r>
 8029780:	b918      	cbnz	r0, 802978a <__submore+0x22>
 8029782:	f04f 30ff 	mov.w	r0, #4294967295
 8029786:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802978a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802978e:	63a3      	str	r3, [r4, #56]	; 0x38
 8029790:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8029794:	6360      	str	r0, [r4, #52]	; 0x34
 8029796:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 802979a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 802979e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80297a2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80297a6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80297aa:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80297ae:	6020      	str	r0, [r4, #0]
 80297b0:	2000      	movs	r0, #0
 80297b2:	e7e8      	b.n	8029786 <__submore+0x1e>
 80297b4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80297b6:	0077      	lsls	r7, r6, #1
 80297b8:	463a      	mov	r2, r7
 80297ba:	f7ff fa60 	bl	8028c7e <_realloc_r>
 80297be:	4605      	mov	r5, r0
 80297c0:	2800      	cmp	r0, #0
 80297c2:	d0de      	beq.n	8029782 <__submore+0x1a>
 80297c4:	eb00 0806 	add.w	r8, r0, r6
 80297c8:	4601      	mov	r1, r0
 80297ca:	4632      	mov	r2, r6
 80297cc:	4640      	mov	r0, r8
 80297ce:	f7fb f919 	bl	8024a04 <memcpy>
 80297d2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80297d6:	f8c4 8000 	str.w	r8, [r4]
 80297da:	e7e9      	b.n	80297b0 <__submore+0x48>

080297dc <__ascii_wctomb>:
 80297dc:	b149      	cbz	r1, 80297f2 <__ascii_wctomb+0x16>
 80297de:	2aff      	cmp	r2, #255	; 0xff
 80297e0:	bf85      	ittet	hi
 80297e2:	238a      	movhi	r3, #138	; 0x8a
 80297e4:	6003      	strhi	r3, [r0, #0]
 80297e6:	700a      	strbls	r2, [r1, #0]
 80297e8:	f04f 30ff 	movhi.w	r0, #4294967295
 80297ec:	bf98      	it	ls
 80297ee:	2001      	movls	r0, #1
 80297f0:	4770      	bx	lr
 80297f2:	4608      	mov	r0, r1
 80297f4:	4770      	bx	lr

080297f6 <abort>:
 80297f6:	b508      	push	{r3, lr}
 80297f8:	2006      	movs	r0, #6
 80297fa:	f000 f855 	bl	80298a8 <raise>
 80297fe:	2001      	movs	r0, #1
 8029800:	f7e0 fb40 	bl	8009e84 <_exit>

08029804 <_fstat_r>:
 8029804:	b538      	push	{r3, r4, r5, lr}
 8029806:	4d07      	ldr	r5, [pc, #28]	; (8029824 <_fstat_r+0x20>)
 8029808:	2300      	movs	r3, #0
 802980a:	4604      	mov	r4, r0
 802980c:	4608      	mov	r0, r1
 802980e:	4611      	mov	r1, r2
 8029810:	602b      	str	r3, [r5, #0]
 8029812:	f7e0 fb6a 	bl	8009eea <_fstat>
 8029816:	1c43      	adds	r3, r0, #1
 8029818:	d102      	bne.n	8029820 <_fstat_r+0x1c>
 802981a:	682b      	ldr	r3, [r5, #0]
 802981c:	b103      	cbz	r3, 8029820 <_fstat_r+0x1c>
 802981e:	6023      	str	r3, [r4, #0]
 8029820:	bd38      	pop	{r3, r4, r5, pc}
 8029822:	bf00      	nop
 8029824:	20013930 	.word	0x20013930

08029828 <_isatty_r>:
 8029828:	b538      	push	{r3, r4, r5, lr}
 802982a:	4d06      	ldr	r5, [pc, #24]	; (8029844 <_isatty_r+0x1c>)
 802982c:	2300      	movs	r3, #0
 802982e:	4604      	mov	r4, r0
 8029830:	4608      	mov	r0, r1
 8029832:	602b      	str	r3, [r5, #0]
 8029834:	f7e0 fb69 	bl	8009f0a <_isatty>
 8029838:	1c43      	adds	r3, r0, #1
 802983a:	d102      	bne.n	8029842 <_isatty_r+0x1a>
 802983c:	682b      	ldr	r3, [r5, #0]
 802983e:	b103      	cbz	r3, 8029842 <_isatty_r+0x1a>
 8029840:	6023      	str	r3, [r4, #0]
 8029842:	bd38      	pop	{r3, r4, r5, pc}
 8029844:	20013930 	.word	0x20013930

08029848 <_malloc_usable_size_r>:
 8029848:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802984c:	1f18      	subs	r0, r3, #4
 802984e:	2b00      	cmp	r3, #0
 8029850:	bfbc      	itt	lt
 8029852:	580b      	ldrlt	r3, [r1, r0]
 8029854:	18c0      	addlt	r0, r0, r3
 8029856:	4770      	bx	lr

08029858 <_raise_r>:
 8029858:	291f      	cmp	r1, #31
 802985a:	b538      	push	{r3, r4, r5, lr}
 802985c:	4604      	mov	r4, r0
 802985e:	460d      	mov	r5, r1
 8029860:	d904      	bls.n	802986c <_raise_r+0x14>
 8029862:	2316      	movs	r3, #22
 8029864:	6003      	str	r3, [r0, #0]
 8029866:	f04f 30ff 	mov.w	r0, #4294967295
 802986a:	bd38      	pop	{r3, r4, r5, pc}
 802986c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802986e:	b112      	cbz	r2, 8029876 <_raise_r+0x1e>
 8029870:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8029874:	b94b      	cbnz	r3, 802988a <_raise_r+0x32>
 8029876:	4620      	mov	r0, r4
 8029878:	f000 f830 	bl	80298dc <_getpid_r>
 802987c:	462a      	mov	r2, r5
 802987e:	4601      	mov	r1, r0
 8029880:	4620      	mov	r0, r4
 8029882:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8029886:	f000 b817 	b.w	80298b8 <_kill_r>
 802988a:	2b01      	cmp	r3, #1
 802988c:	d00a      	beq.n	80298a4 <_raise_r+0x4c>
 802988e:	1c59      	adds	r1, r3, #1
 8029890:	d103      	bne.n	802989a <_raise_r+0x42>
 8029892:	2316      	movs	r3, #22
 8029894:	6003      	str	r3, [r0, #0]
 8029896:	2001      	movs	r0, #1
 8029898:	e7e7      	b.n	802986a <_raise_r+0x12>
 802989a:	2400      	movs	r4, #0
 802989c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80298a0:	4628      	mov	r0, r5
 80298a2:	4798      	blx	r3
 80298a4:	2000      	movs	r0, #0
 80298a6:	e7e0      	b.n	802986a <_raise_r+0x12>

080298a8 <raise>:
 80298a8:	4b02      	ldr	r3, [pc, #8]	; (80298b4 <raise+0xc>)
 80298aa:	4601      	mov	r1, r0
 80298ac:	6818      	ldr	r0, [r3, #0]
 80298ae:	f7ff bfd3 	b.w	8029858 <_raise_r>
 80298b2:	bf00      	nop
 80298b4:	10000070 	.word	0x10000070

080298b8 <_kill_r>:
 80298b8:	b538      	push	{r3, r4, r5, lr}
 80298ba:	4d07      	ldr	r5, [pc, #28]	; (80298d8 <_kill_r+0x20>)
 80298bc:	2300      	movs	r3, #0
 80298be:	4604      	mov	r4, r0
 80298c0:	4608      	mov	r0, r1
 80298c2:	4611      	mov	r1, r2
 80298c4:	602b      	str	r3, [r5, #0]
 80298c6:	f7e0 facb 	bl	8009e60 <_kill>
 80298ca:	1c43      	adds	r3, r0, #1
 80298cc:	d102      	bne.n	80298d4 <_kill_r+0x1c>
 80298ce:	682b      	ldr	r3, [r5, #0]
 80298d0:	b103      	cbz	r3, 80298d4 <_kill_r+0x1c>
 80298d2:	6023      	str	r3, [r4, #0]
 80298d4:	bd38      	pop	{r3, r4, r5, pc}
 80298d6:	bf00      	nop
 80298d8:	20013930 	.word	0x20013930

080298dc <_getpid_r>:
 80298dc:	f7e0 bab8 	b.w	8009e50 <_getpid>

080298e0 <_init>:
 80298e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80298e2:	bf00      	nop
 80298e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80298e6:	bc08      	pop	{r3}
 80298e8:	469e      	mov	lr, r3
 80298ea:	4770      	bx	lr

080298ec <_fini>:
 80298ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80298ee:	bf00      	nop
 80298f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80298f2:	bc08      	pop	{r3}
 80298f4:	469e      	mov	lr, r3
 80298f6:	4770      	bx	lr
