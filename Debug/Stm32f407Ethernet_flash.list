
Stm32f407Ethernet_flash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000177b4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003b48  08017944  08017944  00027944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b48c  0801b48c  00030088  2**0
                  CONTENTS
  4 .ARM          00000008  0801b48c  0801b48c  0002b48c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b494  0801b494  00030088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b494  0801b494  0002b494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b498  0801b498  0002b498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0801b49c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030088  2**0
                  CONTENTS
 10 .bss          0001afd0  20000088  20000088  00030088  2**2
                  ALLOC
 11 ._user_heap_stack 00002200  2001b058  2001b058  00030088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030088  2**0
                  CONTENTS, READONLY
 13 .debug_info   00027f04  00000000  00000000  000300b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006e00  00000000  00000000  00057fbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c70  00000000  00000000  0005edc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001b58  00000000  00000000  00060a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00030c6d  00000000  00000000  00062588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002f0f0  00000000  00000000  000931f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e8207  00000000  00000000  000c22e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001aa4ec  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007d14  00000000  00000000  001aa53c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801792c 	.word	0x0801792c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	0801792c 	.word	0x0801792c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <mqtt_pub_request_cb>:
mqtt_client_t *client;
ip_addr_t ip_addr;
/* Private function prototypes -----------------------------------------------*/
void connect_mqtt(mqtt_client_t *client);

static void mqtt_pub_request_cb(void *arg, err_t result) {
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
 80005ac:	460b      	mov	r3, r1
 80005ae:	70fb      	strb	r3, [r7, #3]
	if (result != ERR_OK) {
 80005b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d005      	beq.n	80005c4 <mqtt_pub_request_cb+0x20>
		DEBUG_MQTT("Publish result: %d\n", result);
 80005b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80005bc:	4619      	mov	r1, r3
 80005be:	4803      	ldr	r0, [pc, #12]	; (80005cc <mqtt_pub_request_cb+0x28>)
 80005c0:	f015 ff26 	bl	8016410 <iprintf>
	}
}
 80005c4:	bf00      	nop
 80005c6:	3708      	adds	r7, #8
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	08017944 	.word	0x08017944

080005d0 <publish_mqtt>:

void publish_mqtt(mqtt_client_t *client, void *arg) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b08a      	sub	sp, #40	; 0x28
 80005d4:	af04      	add	r7, sp, #16
 80005d6:	6078      	str	r0, [r7, #4]
 80005d8:	6039      	str	r1, [r7, #0]
	char message[10];
	snprintf(message, 10, "on_svet");
 80005da:	f107 0308 	add.w	r3, r7, #8
 80005de:	4a14      	ldr	r2, [pc, #80]	; (8000630 <publish_mqtt+0x60>)
 80005e0:	210a      	movs	r1, #10
 80005e2:	4618      	mov	r0, r3
 80005e4:	f015 ffe0 	bl	80165a8 <sniprintf>

	err_t err;
	u8_t qos = 0; /* 0 1 or 2, see MQTT specification */
 80005e8:	2300      	movs	r3, #0
 80005ea:	75fb      	strb	r3, [r7, #23]
	u8_t retain = 0; /* No don't retain such crappy payload... */
 80005ec:	2300      	movs	r3, #0
 80005ee:	75bb      	strb	r3, [r7, #22]
	err = mqtt_publish(client, "esp/svet", message, 10, qos, retain,
 80005f0:	f107 0208 	add.w	r2, r7, #8
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	9303      	str	r3, [sp, #12]
 80005f8:	4b0e      	ldr	r3, [pc, #56]	; (8000634 <publish_mqtt+0x64>)
 80005fa:	9302      	str	r3, [sp, #8]
 80005fc:	7dbb      	ldrb	r3, [r7, #22]
 80005fe:	9301      	str	r3, [sp, #4]
 8000600:	7dfb      	ldrb	r3, [r7, #23]
 8000602:	9300      	str	r3, [sp, #0]
 8000604:	230a      	movs	r3, #10
 8000606:	490c      	ldr	r1, [pc, #48]	; (8000638 <publish_mqtt+0x68>)
 8000608:	6878      	ldr	r0, [r7, #4]
 800060a:	f008 fa1f 	bl	8008a4c <mqtt_publish>
 800060e:	4603      	mov	r3, r0
 8000610:	757b      	strb	r3, [r7, #21]
			mqtt_pub_request_cb, arg);
	if (err != ERR_OK) {
 8000612:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d005      	beq.n	8000626 <publish_mqtt+0x56>
		DEBUG_MQTT("Publish err: %d\n", err);
 800061a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800061e:	4619      	mov	r1, r3
 8000620:	4806      	ldr	r0, [pc, #24]	; (800063c <publish_mqtt+0x6c>)
 8000622:	f015 fef5 	bl	8016410 <iprintf>
	}
//	mqtt_disconnect(client);
}
 8000626:	bf00      	nop
 8000628:	3718      	adds	r7, #24
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	08017960 	.word	0x08017960
 8000634:	080005a5 	.word	0x080005a5
 8000638:	08017968 	.word	0x08017968
 800063c:	08017974 	.word	0x08017974

08000640 <mqtt_incoming_publish_cb>:
 If RAM and CPU budget allows it, the easiest implementation might be to just take a copy of
 the topic string and use it in mqtt_incoming_data_cb
 */
static int inpub_id;
static void mqtt_incoming_publish_cb(void *arg, const char *topic,
		u32_t tot_len) {
 8000640:	b580      	push	{r7, lr}
 8000642:	b084      	sub	sp, #16
 8000644:	af00      	add	r7, sp, #0
 8000646:	60f8      	str	r0, [r7, #12]
 8000648:	60b9      	str	r1, [r7, #8]
 800064a:	607a      	str	r2, [r7, #4]
	DEBUG_MQTT("Incoming publish at topic %s with total length %u\n", topic,
 800064c:	687a      	ldr	r2, [r7, #4]
 800064e:	68b9      	ldr	r1, [r7, #8]
 8000650:	480e      	ldr	r0, [pc, #56]	; (800068c <mqtt_incoming_publish_cb+0x4c>)
 8000652:	f015 fedd 	bl	8016410 <iprintf>
			(unsigned int) tot_len);

	/* Decode topic string into a user defined reference */
	if (strcmp(topic, "print_payload") == 0) {
 8000656:	490e      	ldr	r1, [pc, #56]	; (8000690 <mqtt_incoming_publish_cb+0x50>)
 8000658:	68b8      	ldr	r0, [r7, #8]
 800065a:	f7ff fdb9 	bl	80001d0 <strcmp>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d103      	bne.n	800066c <mqtt_incoming_publish_cb+0x2c>
		inpub_id = 0;
 8000664:	4b0b      	ldr	r3, [pc, #44]	; (8000694 <mqtt_incoming_publish_cb+0x54>)
 8000666:	2200      	movs	r2, #0
 8000668:	601a      	str	r2, [r3, #0]
		inpub_id = 1;
	} else {
		/* For all other topics */
		inpub_id = 2;
	}
}
 800066a:	e00a      	b.n	8000682 <mqtt_incoming_publish_cb+0x42>
	} else if (topic[0] == 'A') {
 800066c:	68bb      	ldr	r3, [r7, #8]
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	2b41      	cmp	r3, #65	; 0x41
 8000672:	d103      	bne.n	800067c <mqtt_incoming_publish_cb+0x3c>
		inpub_id = 1;
 8000674:	4b07      	ldr	r3, [pc, #28]	; (8000694 <mqtt_incoming_publish_cb+0x54>)
 8000676:	2201      	movs	r2, #1
 8000678:	601a      	str	r2, [r3, #0]
}
 800067a:	e002      	b.n	8000682 <mqtt_incoming_publish_cb+0x42>
		inpub_id = 2;
 800067c:	4b05      	ldr	r3, [pc, #20]	; (8000694 <mqtt_incoming_publish_cb+0x54>)
 800067e:	2202      	movs	r2, #2
 8000680:	601a      	str	r2, [r3, #0]
}
 8000682:	bf00      	nop
 8000684:	3710      	adds	r7, #16
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	0801798c 	.word	0x0801798c
 8000690:	080179c8 	.word	0x080179c8
 8000694:	200000ac 	.word	0x200000ac

08000698 <mqtt_incoming_data_cb>:

static void mqtt_incoming_data_cb(void *arg, const u8_t *data, u16_t len,
		u8_t flags) {
 8000698:	b580      	push	{r7, lr}
 800069a:	b084      	sub	sp, #16
 800069c:	af00      	add	r7, sp, #0
 800069e:	60f8      	str	r0, [r7, #12]
 80006a0:	60b9      	str	r1, [r7, #8]
 80006a2:	4611      	mov	r1, r2
 80006a4:	461a      	mov	r2, r3
 80006a6:	460b      	mov	r3, r1
 80006a8:	80fb      	strh	r3, [r7, #6]
 80006aa:	4613      	mov	r3, r2
 80006ac:	717b      	strb	r3, [r7, #5]
	DEBUG_MQTT("Incoming publish payload with length %d, flags %u\n", len,
 80006ae:	88fb      	ldrh	r3, [r7, #6]
 80006b0:	797a      	ldrb	r2, [r7, #5]
 80006b2:	4619      	mov	r1, r3
 80006b4:	4811      	ldr	r0, [pc, #68]	; (80006fc <mqtt_incoming_data_cb+0x64>)
 80006b6:	f015 feab 	bl	8016410 <iprintf>
			(unsigned int) flags);

	if (flags & MQTT_DATA_FLAG_LAST) {
 80006ba:	797b      	ldrb	r3, [r7, #5]
 80006bc:	f003 0301 	and.w	r3, r3, #1
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d016      	beq.n	80006f2 <mqtt_incoming_data_cb+0x5a>
		/* Last fragment of payload received (or whole part if payload fits receive buffer
		 See MQTT_VAR_HEADER_BUFFER_LEN)  */

		/* Call function or do action depending on reference, in this case inpub_id */
		if (inpub_id == 0) {
 80006c4:	4b0e      	ldr	r3, [pc, #56]	; (8000700 <mqtt_incoming_data_cb+0x68>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d10b      	bne.n	80006e4 <mqtt_incoming_data_cb+0x4c>
			/* Don't trust the publisher, check zero termination */
			if (data[len - 1] == 0) {
 80006cc:	88fb      	ldrh	r3, [r7, #6]
 80006ce:	3b01      	subs	r3, #1
 80006d0:	68ba      	ldr	r2, [r7, #8]
 80006d2:	4413      	add	r3, r2
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d10b      	bne.n	80006f2 <mqtt_incoming_data_cb+0x5a>
				DEBUG_MQTT("mqtt_incoming_data_cb: %s\n", (const char*) data);
 80006da:	68b9      	ldr	r1, [r7, #8]
 80006dc:	4809      	ldr	r0, [pc, #36]	; (8000704 <mqtt_incoming_data_cb+0x6c>)
 80006de:	f015 fe97 	bl	8016410 <iprintf>
			DEBUG_MQTT("mqtt_incoming_data_cb: Ignoring payload...\n");
		}
	} else {
		/* Handle fragmented payload, store in buffer, write to file or whatever */
	}
}
 80006e2:	e006      	b.n	80006f2 <mqtt_incoming_data_cb+0x5a>
		} else if (inpub_id == 1) {
 80006e4:	4b06      	ldr	r3, [pc, #24]	; (8000700 <mqtt_incoming_data_cb+0x68>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	2b01      	cmp	r3, #1
 80006ea:	d002      	beq.n	80006f2 <mqtt_incoming_data_cb+0x5a>
			DEBUG_MQTT("mqtt_incoming_data_cb: Ignoring payload...\n");
 80006ec:	4806      	ldr	r0, [pc, #24]	; (8000708 <mqtt_incoming_data_cb+0x70>)
 80006ee:	f015 ff15 	bl	801651c <puts>
}
 80006f2:	bf00      	nop
 80006f4:	3710      	adds	r7, #16
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	080179d8 	.word	0x080179d8
 8000700:	200000ac 	.word	0x200000ac
 8000704:	08017a14 	.word	0x08017a14
 8000708:	08017a38 	.word	0x08017a38

0800070c <mqtt_sub_request_cb>:

static void mqtt_sub_request_cb(void *arg, err_t result) {
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	460b      	mov	r3, r1
 8000716:	70fb      	strb	r3, [r7, #3]
	/* Just print the result code here for simplicity,
	 normal behaviour would be to take some action if subscribe fails like
	 notifying user, retry subscribe or disconnect from server */
	DEBUG_MQTT("Subscribe result: %d\n", result);
 8000718:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800071c:	4619      	mov	r1, r3
 800071e:	4803      	ldr	r0, [pc, #12]	; (800072c <mqtt_sub_request_cb+0x20>)
 8000720:	f015 fe76 	bl	8016410 <iprintf>
}
 8000724:	bf00      	nop
 8000726:	3708      	adds	r7, #8
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	08017a6c 	.word	0x08017a6c

08000730 <mqtt_connection_cb>:

static void mqtt_connection_cb(mqtt_client_t *client, void *arg,
		mqtt_connection_status_t status) {
 8000730:	b580      	push	{r7, lr}
 8000732:	b088      	sub	sp, #32
 8000734:	af02      	add	r7, sp, #8
 8000736:	60f8      	str	r0, [r7, #12]
 8000738:	60b9      	str	r1, [r7, #8]
 800073a:	4613      	mov	r3, r2
 800073c:	80fb      	strh	r3, [r7, #6]
	err_t err;
	if (status == MQTT_CONNECT_ACCEPTED) {
 800073e:	88fb      	ldrh	r3, [r7, #6]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d11f      	bne.n	8000784 <mqtt_connection_cb+0x54>
		DEBUG_MQTT("mqtt_connection_cb: Successfully connected\n");
 8000744:	4815      	ldr	r0, [pc, #84]	; (800079c <mqtt_connection_cb+0x6c>)
 8000746:	f015 fee9 	bl	801651c <puts>

		/* Setup callback for incoming publish requests */
		mqtt_set_inpub_callback(client, mqtt_incoming_publish_cb,
 800074a:	68bb      	ldr	r3, [r7, #8]
 800074c:	4a14      	ldr	r2, [pc, #80]	; (80007a0 <mqtt_connection_cb+0x70>)
 800074e:	4915      	ldr	r1, [pc, #84]	; (80007a4 <mqtt_connection_cb+0x74>)
 8000750:	68f8      	ldr	r0, [r7, #12]
 8000752:	f008 fb25 	bl	8008da0 <mqtt_set_inpub_callback>
				mqtt_incoming_data_cb, arg);

		/* Subscribe to a topic named "subtopic" with QoS level 1, call mqtt_sub_request_cb with result */
		err = mqtt_subscribe(client, "esp/svet", 1, mqtt_sub_request_cb, arg);
 8000756:	2301      	movs	r3, #1
 8000758:	9301      	str	r3, [sp, #4]
 800075a:	68bb      	ldr	r3, [r7, #8]
 800075c:	9300      	str	r3, [sp, #0]
 800075e:	4b12      	ldr	r3, [pc, #72]	; (80007a8 <mqtt_connection_cb+0x78>)
 8000760:	2201      	movs	r2, #1
 8000762:	4912      	ldr	r1, [pc, #72]	; (80007ac <mqtt_connection_cb+0x7c>)
 8000764:	68f8      	ldr	r0, [r7, #12]
 8000766:	f008 fa45 	bl	8008bf4 <mqtt_sub_unsub>
 800076a:	4603      	mov	r3, r0
 800076c:	75fb      	strb	r3, [r7, #23]

		if (err != ERR_OK) {
 800076e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d00e      	beq.n	8000794 <mqtt_connection_cb+0x64>
			DEBUG_MQTT("mqtt_subscribe return: %d\n", err);
 8000776:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800077a:	4619      	mov	r1, r3
 800077c:	480c      	ldr	r0, [pc, #48]	; (80007b0 <mqtt_connection_cb+0x80>)
 800077e:	f015 fe47 	bl	8016410 <iprintf>
		DEBUG_MQTT("mqtt_connection_cb: Disconnected, reason: %d\n", status);

		/* Its more nice to be connected, so try to reconnect */
		connect_mqtt(client);
	}
}
 8000782:	e007      	b.n	8000794 <mqtt_connection_cb+0x64>
		DEBUG_MQTT("mqtt_connection_cb: Disconnected, reason: %d\n", status);
 8000784:	88fb      	ldrh	r3, [r7, #6]
 8000786:	4619      	mov	r1, r3
 8000788:	480a      	ldr	r0, [pc, #40]	; (80007b4 <mqtt_connection_cb+0x84>)
 800078a:	f015 fe41 	bl	8016410 <iprintf>
		connect_mqtt(client);
 800078e:	68f8      	ldr	r0, [r7, #12]
 8000790:	f000 f812 	bl	80007b8 <connect_mqtt>
}
 8000794:	bf00      	nop
 8000796:	3718      	adds	r7, #24
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	08017a88 	.word	0x08017a88
 80007a0:	08000699 	.word	0x08000699
 80007a4:	08000641 	.word	0x08000641
 80007a8:	0800070d 	.word	0x0800070d
 80007ac:	08017968 	.word	0x08017968
 80007b0:	08017abc 	.word	0x08017abc
 80007b4:	08017ae0 	.word	0x08017ae0

080007b8 <connect_mqtt>:

bool mqtt_link;

void connect_mqtt(mqtt_client_t *client) {
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b08c      	sub	sp, #48	; 0x30
 80007bc:	af02      	add	r7, sp, #8
 80007be:	6078      	str	r0, [r7, #4]
	struct mqtt_connect_client_info_t ci;
	err_t err;

	/* Setup an empty client info structure */
	memset(&ci, 0, sizeof(ci));
 80007c0:	f107 0308 	add.w	r3, r7, #8
 80007c4:	221c      	movs	r2, #28
 80007c6:	2100      	movs	r1, #0
 80007c8:	4618      	mov	r0, r3
 80007ca:	f015 fe19 	bl	8016400 <memset>

	/* Minimal amount of information required is client identifier, so set it here */
	ci.client_id = "lwip";
 80007ce:	4b16      	ldr	r3, [pc, #88]	; (8000828 <connect_mqtt+0x70>)
 80007d0:	60bb      	str	r3, [r7, #8]
	ci.client_user = "u_Ioo5RJ";
 80007d2:	4b16      	ldr	r3, [pc, #88]	; (800082c <connect_mqtt+0x74>)
 80007d4:	60fb      	str	r3, [r7, #12]
	ci.client_pass = "7L8Uuagq";
 80007d6:	4b16      	ldr	r3, [pc, #88]	; (8000830 <connect_mqtt+0x78>)
 80007d8:	613b      	str	r3, [r7, #16]
	/* Initiate client and connect to server, if this fails immediately an error code is returned
	 otherwise mqtt_connection_cb will be called with connection result after attempting
	 to establish a connection with the server.
	 For now MQTT version 3.1.1 is always used */

	err = mqtt_client_connect(client, &ip_addr, PORT_MQTT, mqtt_connection_cb,
 80007da:	f107 0308 	add.w	r3, r7, #8
 80007de:	9301      	str	r3, [sp, #4]
 80007e0:	2300      	movs	r3, #0
 80007e2:	9300      	str	r3, [sp, #0]
 80007e4:	4b13      	ldr	r3, [pc, #76]	; (8000834 <connect_mqtt+0x7c>)
 80007e6:	f642 72b4 	movw	r2, #12212	; 0x2fb4
 80007ea:	4913      	ldr	r1, [pc, #76]	; (8000838 <connect_mqtt+0x80>)
 80007ec:	6878      	ldr	r0, [r7, #4]
 80007ee:	f008 fb05 	bl	8008dfc <mqtt_client_connect>
 80007f2:	4603      	mov	r3, r0
 80007f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			0, &ci);
	if (err != ERR_OK)
 80007f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d009      	beq.n	8000814 <connect_mqtt+0x5c>
	{
		mqtt_link = false;
 8000800:	4b0e      	ldr	r3, [pc, #56]	; (800083c <connect_mqtt+0x84>)
 8000802:	2200      	movs	r2, #0
 8000804:	701a      	strb	r2, [r3, #0]
		DEBUG_MQTT("mqtt_connect return %d\n", err);
 8000806:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800080a:	4619      	mov	r1, r3
 800080c:	480c      	ldr	r0, [pc, #48]	; (8000840 <connect_mqtt+0x88>)
 800080e:	f015 fdff 	bl	8016410 <iprintf>
	else
	{
		mqtt_link = true;
		DEBUG_MQTT("client ok\n");
	}
}
 8000812:	e005      	b.n	8000820 <connect_mqtt+0x68>
		mqtt_link = true;
 8000814:	4b09      	ldr	r3, [pc, #36]	; (800083c <connect_mqtt+0x84>)
 8000816:	2201      	movs	r2, #1
 8000818:	701a      	strb	r2, [r3, #0]
		DEBUG_MQTT("client ok\n");
 800081a:	480a      	ldr	r0, [pc, #40]	; (8000844 <connect_mqtt+0x8c>)
 800081c:	f015 fe7e 	bl	801651c <puts>
}
 8000820:	bf00      	nop
 8000822:	3728      	adds	r7, #40	; 0x28
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	08017b14 	.word	0x08017b14
 800082c:	08017b1c 	.word	0x08017b1c
 8000830:	08017b28 	.word	0x08017b28
 8000834:	08000731 	.word	0x08000731
 8000838:	200000a8 	.word	0x200000a8
 800083c:	200000b0 	.word	0x200000b0
 8000840:	08017b34 	.word	0x08017b34
 8000844:	08017b54 	.word	0x08017b54

08000848 <init_mqtt>:

void init_mqtt()
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
	client = mqtt_client_new();
 800084c:	f008 facc 	bl	8008de8 <mqtt_client_new>
 8000850:	4603      	mov	r3, r0
 8000852:	4a29      	ldr	r2, [pc, #164]	; (80008f8 <init_mqtt+0xb0>)
 8000854:	6013      	str	r3, [r2, #0]
	IP4_ADDR(&ip_addr, server_ip[0], server_ip[1], server_ip[2], server_ip[3]);
 8000856:	4b29      	ldr	r3, [pc, #164]	; (80008fc <init_mqtt+0xb4>)
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	061a      	lsls	r2, r3, #24
 800085c:	4b27      	ldr	r3, [pc, #156]	; (80008fc <init_mqtt+0xb4>)
 800085e:	785b      	ldrb	r3, [r3, #1]
 8000860:	041b      	lsls	r3, r3, #16
 8000862:	431a      	orrs	r2, r3
 8000864:	4b25      	ldr	r3, [pc, #148]	; (80008fc <init_mqtt+0xb4>)
 8000866:	789b      	ldrb	r3, [r3, #2]
 8000868:	021b      	lsls	r3, r3, #8
 800086a:	4313      	orrs	r3, r2
 800086c:	4a23      	ldr	r2, [pc, #140]	; (80008fc <init_mqtt+0xb4>)
 800086e:	78d2      	ldrb	r2, [r2, #3]
 8000870:	4313      	orrs	r3, r2
 8000872:	061a      	lsls	r2, r3, #24
 8000874:	4b21      	ldr	r3, [pc, #132]	; (80008fc <init_mqtt+0xb4>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	0619      	lsls	r1, r3, #24
 800087a:	4b20      	ldr	r3, [pc, #128]	; (80008fc <init_mqtt+0xb4>)
 800087c:	785b      	ldrb	r3, [r3, #1]
 800087e:	041b      	lsls	r3, r3, #16
 8000880:	4319      	orrs	r1, r3
 8000882:	4b1e      	ldr	r3, [pc, #120]	; (80008fc <init_mqtt+0xb4>)
 8000884:	789b      	ldrb	r3, [r3, #2]
 8000886:	021b      	lsls	r3, r3, #8
 8000888:	430b      	orrs	r3, r1
 800088a:	491c      	ldr	r1, [pc, #112]	; (80008fc <init_mqtt+0xb4>)
 800088c:	78c9      	ldrb	r1, [r1, #3]
 800088e:	430b      	orrs	r3, r1
 8000890:	021b      	lsls	r3, r3, #8
 8000892:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8000896:	431a      	orrs	r2, r3
 8000898:	4b18      	ldr	r3, [pc, #96]	; (80008fc <init_mqtt+0xb4>)
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	0619      	lsls	r1, r3, #24
 800089e:	4b17      	ldr	r3, [pc, #92]	; (80008fc <init_mqtt+0xb4>)
 80008a0:	785b      	ldrb	r3, [r3, #1]
 80008a2:	041b      	lsls	r3, r3, #16
 80008a4:	4319      	orrs	r1, r3
 80008a6:	4b15      	ldr	r3, [pc, #84]	; (80008fc <init_mqtt+0xb4>)
 80008a8:	789b      	ldrb	r3, [r3, #2]
 80008aa:	021b      	lsls	r3, r3, #8
 80008ac:	430b      	orrs	r3, r1
 80008ae:	4913      	ldr	r1, [pc, #76]	; (80008fc <init_mqtt+0xb4>)
 80008b0:	78c9      	ldrb	r1, [r1, #3]
 80008b2:	430b      	orrs	r3, r1
 80008b4:	0a1b      	lsrs	r3, r3, #8
 80008b6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80008ba:	431a      	orrs	r2, r3
 80008bc:	4b0f      	ldr	r3, [pc, #60]	; (80008fc <init_mqtt+0xb4>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	0619      	lsls	r1, r3, #24
 80008c2:	4b0e      	ldr	r3, [pc, #56]	; (80008fc <init_mqtt+0xb4>)
 80008c4:	785b      	ldrb	r3, [r3, #1]
 80008c6:	041b      	lsls	r3, r3, #16
 80008c8:	4319      	orrs	r1, r3
 80008ca:	4b0c      	ldr	r3, [pc, #48]	; (80008fc <init_mqtt+0xb4>)
 80008cc:	789b      	ldrb	r3, [r3, #2]
 80008ce:	021b      	lsls	r3, r3, #8
 80008d0:	430b      	orrs	r3, r1
 80008d2:	490a      	ldr	r1, [pc, #40]	; (80008fc <init_mqtt+0xb4>)
 80008d4:	78c9      	ldrb	r1, [r1, #3]
 80008d6:	430b      	orrs	r3, r1
 80008d8:	0e1b      	lsrs	r3, r3, #24
 80008da:	4313      	orrs	r3, r2
 80008dc:	4a08      	ldr	r2, [pc, #32]	; (8000900 <init_mqtt+0xb8>)
 80008de:	6013      	str	r3, [r2, #0]
	if (client != NULL)
 80008e0:	4b05      	ldr	r3, [pc, #20]	; (80008f8 <init_mqtt+0xb0>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d004      	beq.n	80008f2 <init_mqtt+0xaa>
	{
		connect_mqtt(client);
 80008e8:	4b03      	ldr	r3, [pc, #12]	; (80008f8 <init_mqtt+0xb0>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4618      	mov	r0, r3
 80008ee:	f7ff ff63 	bl	80007b8 <connect_mqtt>
	}
}
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	200000a4 	.word	0x200000a4
 80008fc:	20000000 	.word	0x20000000
 8000900:	200000a8 	.word	0x200000a8

08000904 <start_mqtt>:

void start_mqtt()
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
	if(mqtt_link == false)
 8000908:	4b0b      	ldr	r3, [pc, #44]	; (8000938 <start_mqtt+0x34>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	f083 0301 	eor.w	r3, r3, #1
 8000910:	b2db      	uxtb	r3, r3
 8000912:	2b00      	cmp	r3, #0
 8000914:	d007      	beq.n	8000926 <start_mqtt+0x22>
	{
		DEBUG_MQTT("client zanovo\n");
 8000916:	4809      	ldr	r0, [pc, #36]	; (800093c <start_mqtt+0x38>)
 8000918:	f015 fe00 	bl	801651c <puts>
		connect_mqtt(client);
 800091c:	4b08      	ldr	r3, [pc, #32]	; (8000940 <start_mqtt+0x3c>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4618      	mov	r0, r3
 8000922:	f7ff ff49 	bl	80007b8 <connect_mqtt>
	}
	publish_mqtt(client, NULL);
 8000926:	4b06      	ldr	r3, [pc, #24]	; (8000940 <start_mqtt+0x3c>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	2100      	movs	r1, #0
 800092c:	4618      	mov	r0, r3
 800092e:	f7ff fe4f 	bl	80005d0 <publish_mqtt>
}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	200000b0 	.word	0x200000b0
 800093c:	08017b64 	.word	0x08017b64
 8000940:	200000a4 	.word	0x200000a4

08000944 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000948:	4a04      	ldr	r2, [pc, #16]	; (800095c <MX_FREERTOS_Init+0x18>)
 800094a:	2100      	movs	r1, #0
 800094c:	4804      	ldr	r0, [pc, #16]	; (8000960 <MX_FREERTOS_Init+0x1c>)
 800094e:	f003 f8b8 	bl	8003ac2 <osThreadNew>
 8000952:	4603      	mov	r3, r0
 8000954:	4a03      	ldr	r2, [pc, #12]	; (8000964 <MX_FREERTOS_Init+0x20>)
 8000956:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000958:	bf00      	nop
 800095a:	bd80      	pop	{r7, pc}
 800095c:	0801b1d8 	.word	0x0801b1d8
 8000960:	08000969 	.word	0x08000969
 8000964:	200000b4 	.word	0x200000b4

08000968 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000970:	f002 fb96 	bl	80030a0 <MX_LWIP_Init>
  /* USER CODE BEGIN StartDefaultTask */
  init_mqtt();
 8000974:	f7ff ff68 	bl	8000848 <init_mqtt>
  /* Infinite loop */
  for(;;)
  {
	start_mqtt();
 8000978:	f7ff ffc4 	bl	8000904 <start_mqtt>
    osDelay(1000);
 800097c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000980:	f003 f932 	bl	8003be8 <osDelay>
	start_mqtt();
 8000984:	e7f8      	b.n	8000978 <StartDefaultTask+0x10>
	...

08000988 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000988:	b480      	push	{r7}
 800098a:	b085      	sub	sp, #20
 800098c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	60fb      	str	r3, [r7, #12]
 8000992:	4b1e      	ldr	r3, [pc, #120]	; (8000a0c <MX_GPIO_Init+0x84>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	4a1d      	ldr	r2, [pc, #116]	; (8000a0c <MX_GPIO_Init+0x84>)
 8000998:	f043 0304 	orr.w	r3, r3, #4
 800099c:	6313      	str	r3, [r2, #48]	; 0x30
 800099e:	4b1b      	ldr	r3, [pc, #108]	; (8000a0c <MX_GPIO_Init+0x84>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	f003 0304 	and.w	r3, r3, #4
 80009a6:	60fb      	str	r3, [r7, #12]
 80009a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	60bb      	str	r3, [r7, #8]
 80009ae:	4b17      	ldr	r3, [pc, #92]	; (8000a0c <MX_GPIO_Init+0x84>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	4a16      	ldr	r2, [pc, #88]	; (8000a0c <MX_GPIO_Init+0x84>)
 80009b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009b8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ba:	4b14      	ldr	r3, [pc, #80]	; (8000a0c <MX_GPIO_Init+0x84>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009c2:	60bb      	str	r3, [r7, #8]
 80009c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	607b      	str	r3, [r7, #4]
 80009ca:	4b10      	ldr	r3, [pc, #64]	; (8000a0c <MX_GPIO_Init+0x84>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	4a0f      	ldr	r2, [pc, #60]	; (8000a0c <MX_GPIO_Init+0x84>)
 80009d0:	f043 0301 	orr.w	r3, r3, #1
 80009d4:	6313      	str	r3, [r2, #48]	; 0x30
 80009d6:	4b0d      	ldr	r3, [pc, #52]	; (8000a0c <MX_GPIO_Init+0x84>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	f003 0301 	and.w	r3, r3, #1
 80009de:	607b      	str	r3, [r7, #4]
 80009e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	603b      	str	r3, [r7, #0]
 80009e6:	4b09      	ldr	r3, [pc, #36]	; (8000a0c <MX_GPIO_Init+0x84>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	4a08      	ldr	r2, [pc, #32]	; (8000a0c <MX_GPIO_Init+0x84>)
 80009ec:	f043 0302 	orr.w	r3, r3, #2
 80009f0:	6313      	str	r3, [r2, #48]	; 0x30
 80009f2:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <MX_GPIO_Init+0x84>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	f003 0302 	and.w	r3, r3, #2
 80009fa:	603b      	str	r3, [r7, #0]
 80009fc:	683b      	ldr	r3, [r7, #0]

}
 80009fe:	bf00      	nop
 8000a00:	3714      	adds	r7, #20
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	40023800 	.word	0x40023800

08000a10 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000a18:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000a1c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000a20:	f003 0301 	and.w	r3, r3, #1
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d013      	beq.n	8000a50 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000a28:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000a2c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000a30:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d00b      	beq.n	8000a50 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000a38:	e000      	b.n	8000a3c <ITM_SendChar+0x2c>
    {
      __NOP();
 8000a3a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000a3c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d0f9      	beq.n	8000a3a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000a46:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000a4a:	687a      	ldr	r2, [r7, #4]
 8000a4c:	b2d2      	uxtb	r2, r2
 8000a4e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000a50:	687b      	ldr	r3, [r7, #4]
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	370c      	adds	r7, #12
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr

08000a5e <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8000a5e:	b580      	push	{r7, lr}
 8000a60:	b086      	sub	sp, #24
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	60f8      	str	r0, [r7, #12]
 8000a66:	60b9      	str	r1, [r7, #8]
 8000a68:	607a      	str	r2, [r7, #4]
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	617b      	str	r3, [r7, #20]
 8000a6e:	e009      	b.n	8000a84 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8000a70:	68bb      	ldr	r3, [r7, #8]
 8000a72:	1c5a      	adds	r2, r3, #1
 8000a74:	60ba      	str	r2, [r7, #8]
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f7ff ffc9 	bl	8000a10 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a7e:	697b      	ldr	r3, [r7, #20]
 8000a80:	3301      	adds	r3, #1
 8000a82:	617b      	str	r3, [r7, #20]
 8000a84:	697a      	ldr	r2, [r7, #20]
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	dbf1      	blt.n	8000a70 <_write+0x12>
  }
  return len;
 8000a8c:	687b      	ldr	r3, [r7, #4]
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3718      	adds	r7, #24
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}

08000a96 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a96:	b580      	push	{r7, lr}
 8000a98:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a9a:	f000 f9bf 	bl	8000e1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a9e:	f000 f809 	bl	8000ab4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aa2:	f7ff ff71 	bl	8000988 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000aa6:	f002 ffad 	bl	8003a04 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000aaa:	f7ff ff4b 	bl	8000944 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000aae:	f002 ffcd 	bl	8003a4c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ab2:	e7fe      	b.n	8000ab2 <main+0x1c>

08000ab4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b094      	sub	sp, #80	; 0x50
 8000ab8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aba:	f107 0320 	add.w	r3, r7, #32
 8000abe:	2230      	movs	r2, #48	; 0x30
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f015 fc9c 	bl	8016400 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ac8:	f107 030c 	add.w	r3, r7, #12
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
 8000ad4:	60da      	str	r2, [r3, #12]
 8000ad6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ad8:	2300      	movs	r3, #0
 8000ada:	60bb      	str	r3, [r7, #8]
 8000adc:	4b28      	ldr	r3, [pc, #160]	; (8000b80 <SystemClock_Config+0xcc>)
 8000ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae0:	4a27      	ldr	r2, [pc, #156]	; (8000b80 <SystemClock_Config+0xcc>)
 8000ae2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ae6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae8:	4b25      	ldr	r3, [pc, #148]	; (8000b80 <SystemClock_Config+0xcc>)
 8000aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000af0:	60bb      	str	r3, [r7, #8]
 8000af2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000af4:	2300      	movs	r3, #0
 8000af6:	607b      	str	r3, [r7, #4]
 8000af8:	4b22      	ldr	r3, [pc, #136]	; (8000b84 <SystemClock_Config+0xd0>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a21      	ldr	r2, [pc, #132]	; (8000b84 <SystemClock_Config+0xd0>)
 8000afe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b02:	6013      	str	r3, [r2, #0]
 8000b04:	4b1f      	ldr	r3, [pc, #124]	; (8000b84 <SystemClock_Config+0xd0>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b0c:	607b      	str	r3, [r7, #4]
 8000b0e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b10:	2301      	movs	r3, #1
 8000b12:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b18:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b1e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b22:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b24:	2304      	movs	r3, #4
 8000b26:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000b28:	23a8      	movs	r3, #168	; 0xa8
 8000b2a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b30:	2304      	movs	r3, #4
 8000b32:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b34:	f107 0320 	add.w	r3, r7, #32
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f001 fe41 	bl	80027c0 <HAL_RCC_OscConfig>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b44:	f000 f820 	bl	8000b88 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b48:	230f      	movs	r3, #15
 8000b4a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b50:	2300      	movs	r3, #0
 8000b52:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b54:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b58:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b5e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b60:	f107 030c 	add.w	r3, r7, #12
 8000b64:	2105      	movs	r1, #5
 8000b66:	4618      	mov	r0, r3
 8000b68:	f002 f8a2 	bl	8002cb0 <HAL_RCC_ClockConfig>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000b72:	f000 f809 	bl	8000b88 <Error_Handler>
  }
}
 8000b76:	bf00      	nop
 8000b78:	3750      	adds	r7, #80	; 0x50
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40023800 	.word	0x40023800
 8000b84:	40007000 	.word	0x40007000

08000b88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b8c:	b672      	cpsid	i
}
 8000b8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b90:	e7fe      	b.n	8000b90 <Error_Handler+0x8>
	...

08000b94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	607b      	str	r3, [r7, #4]
 8000b9e:	4b12      	ldr	r3, [pc, #72]	; (8000be8 <HAL_MspInit+0x54>)
 8000ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ba2:	4a11      	ldr	r2, [pc, #68]	; (8000be8 <HAL_MspInit+0x54>)
 8000ba4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ba8:	6453      	str	r3, [r2, #68]	; 0x44
 8000baa:	4b0f      	ldr	r3, [pc, #60]	; (8000be8 <HAL_MspInit+0x54>)
 8000bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bb2:	607b      	str	r3, [r7, #4]
 8000bb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	603b      	str	r3, [r7, #0]
 8000bba:	4b0b      	ldr	r3, [pc, #44]	; (8000be8 <HAL_MspInit+0x54>)
 8000bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbe:	4a0a      	ldr	r2, [pc, #40]	; (8000be8 <HAL_MspInit+0x54>)
 8000bc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bc6:	4b08      	ldr	r3, [pc, #32]	; (8000be8 <HAL_MspInit+0x54>)
 8000bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bce:	603b      	str	r3, [r7, #0]
 8000bd0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	210f      	movs	r1, #15
 8000bd6:	f06f 0001 	mvn.w	r0, #1
 8000bda:	f000 fa90 	bl	80010fe <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bde:	bf00      	nop
 8000be0:	3708      	adds	r7, #8
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40023800 	.word	0x40023800

08000bec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bf0:	e7fe      	b.n	8000bf0 <NMI_Handler+0x4>

08000bf2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bf6:	e7fe      	b.n	8000bf6 <HardFault_Handler+0x4>

08000bf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bfc:	e7fe      	b.n	8000bfc <MemManage_Handler+0x4>

08000bfe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c02:	e7fe      	b.n	8000c02 <BusFault_Handler+0x4>

08000c04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <UsageFault_Handler+0x4>

08000c0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr

08000c18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c1c:	f000 f950 	bl	8000ec0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000c20:	f005 fb48 	bl	80062b4 <xTaskGetSchedulerState>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b01      	cmp	r3, #1
 8000c28:	d001      	beq.n	8000c2e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000c2a:	f006 fa2d 	bl	8007088 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}
	...

08000c34 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000c38:	4802      	ldr	r0, [pc, #8]	; (8000c44 <ETH_IRQHandler+0x10>)
 8000c3a:	f000 fe77 	bl	800192c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	200031d8 	.word	0x200031d8

08000c48 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  return 1;
 8000c4c:	2301      	movs	r3, #1
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr

08000c58 <_kill>:

int _kill(int pid, int sig)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000c62:	4b05      	ldr	r3, [pc, #20]	; (8000c78 <_kill+0x20>)
 8000c64:	2216      	movs	r2, #22
 8000c66:	601a      	str	r2, [r3, #0]
  return -1;
 8000c68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	370c      	adds	r7, #12
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr
 8000c78:	2001b044 	.word	0x2001b044

08000c7c <_exit>:

void _exit (int status)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000c84:	f04f 31ff 	mov.w	r1, #4294967295
 8000c88:	6878      	ldr	r0, [r7, #4]
 8000c8a:	f7ff ffe5 	bl	8000c58 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000c8e:	e7fe      	b.n	8000c8e <_exit+0x12>

08000c90 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b086      	sub	sp, #24
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	60f8      	str	r0, [r7, #12]
 8000c98:	60b9      	str	r1, [r7, #8]
 8000c9a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	617b      	str	r3, [r7, #20]
 8000ca0:	e00a      	b.n	8000cb8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ca2:	f3af 8000 	nop.w
 8000ca6:	4601      	mov	r1, r0
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	1c5a      	adds	r2, r3, #1
 8000cac:	60ba      	str	r2, [r7, #8]
 8000cae:	b2ca      	uxtb	r2, r1
 8000cb0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	617b      	str	r3, [r7, #20]
 8000cb8:	697a      	ldr	r2, [r7, #20]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	dbf0      	blt.n	8000ca2 <_read+0x12>
  }

  return len;
 8000cc0:	687b      	ldr	r3, [r7, #4]
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3718      	adds	r7, #24
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}

08000cca <_close>:
  }
  return len;
}

int _close(int file)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	b083      	sub	sp, #12
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cd2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	370c      	adds	r7, #12
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr

08000ce2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	b083      	sub	sp, #12
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	6078      	str	r0, [r7, #4]
 8000cea:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cf2:	605a      	str	r2, [r3, #4]
  return 0;
 8000cf4:	2300      	movs	r3, #0
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	370c      	adds	r7, #12
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr

08000d02 <_isatty>:

int _isatty(int file)
{
 8000d02:	b480      	push	{r7}
 8000d04:	b083      	sub	sp, #12
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d0a:	2301      	movs	r3, #1
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	370c      	adds	r7, #12
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr

08000d18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b085      	sub	sp, #20
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	60f8      	str	r0, [r7, #12]
 8000d20:	60b9      	str	r1, [r7, #8]
 8000d22:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d24:	2300      	movs	r3, #0
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3714      	adds	r7, #20
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
	...

08000d34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b087      	sub	sp, #28
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d3c:	4a14      	ldr	r2, [pc, #80]	; (8000d90 <_sbrk+0x5c>)
 8000d3e:	4b15      	ldr	r3, [pc, #84]	; (8000d94 <_sbrk+0x60>)
 8000d40:	1ad3      	subs	r3, r2, r3
 8000d42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d48:	4b13      	ldr	r3, [pc, #76]	; (8000d98 <_sbrk+0x64>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d102      	bne.n	8000d56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d50:	4b11      	ldr	r3, [pc, #68]	; (8000d98 <_sbrk+0x64>)
 8000d52:	4a12      	ldr	r2, [pc, #72]	; (8000d9c <_sbrk+0x68>)
 8000d54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d56:	4b10      	ldr	r3, [pc, #64]	; (8000d98 <_sbrk+0x64>)
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4413      	add	r3, r2
 8000d5e:	693a      	ldr	r2, [r7, #16]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	d205      	bcs.n	8000d70 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000d64:	4b0e      	ldr	r3, [pc, #56]	; (8000da0 <_sbrk+0x6c>)
 8000d66:	220c      	movs	r2, #12
 8000d68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d6e:	e009      	b.n	8000d84 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d70:	4b09      	ldr	r3, [pc, #36]	; (8000d98 <_sbrk+0x64>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d76:	4b08      	ldr	r3, [pc, #32]	; (8000d98 <_sbrk+0x64>)
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4413      	add	r3, r2
 8000d7e:	4a06      	ldr	r2, [pc, #24]	; (8000d98 <_sbrk+0x64>)
 8000d80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d82:	68fb      	ldr	r3, [r7, #12]
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	371c      	adds	r7, #28
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr
 8000d90:	20028000 	.word	0x20028000
 8000d94:	00002000 	.word	0x00002000
 8000d98:	200000b8 	.word	0x200000b8
 8000d9c:	2001b058 	.word	0x2001b058
 8000da0:	2001b044 	.word	0x2001b044

08000da4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000da8:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <SystemInit+0x20>)
 8000daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dae:	4a05      	ldr	r2, [pc, #20]	; (8000dc4 <SystemInit+0x20>)
 8000db0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000db4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000db8:	bf00      	nop
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	e000ed00 	.word	0xe000ed00

08000dc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000dc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e00 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dcc:	480d      	ldr	r0, [pc, #52]	; (8000e04 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dce:	490e      	ldr	r1, [pc, #56]	; (8000e08 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000dd0:	4a0e      	ldr	r2, [pc, #56]	; (8000e0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dd4:	e002      	b.n	8000ddc <LoopCopyDataInit>

08000dd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dda:	3304      	adds	r3, #4

08000ddc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ddc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000de0:	d3f9      	bcc.n	8000dd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000de2:	4a0b      	ldr	r2, [pc, #44]	; (8000e10 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000de4:	4c0b      	ldr	r4, [pc, #44]	; (8000e14 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000de6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000de8:	e001      	b.n	8000dee <LoopFillZerobss>

08000dea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dec:	3204      	adds	r2, #4

08000dee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000df0:	d3fb      	bcc.n	8000dea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000df2:	f7ff ffd7 	bl	8000da4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000df6:	f015 faa7 	bl	8016348 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dfa:	f7ff fe4c 	bl	8000a96 <main>
  bx  lr    
 8000dfe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e00:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 8000e04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e08:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000e0c:	0801b49c 	.word	0x0801b49c
  ldr r2, =_sbss
 8000e10:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000e14:	2001b058 	.word	0x2001b058

08000e18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e18:	e7fe      	b.n	8000e18 <ADC_IRQHandler>
	...

08000e1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e20:	4b0e      	ldr	r3, [pc, #56]	; (8000e5c <HAL_Init+0x40>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a0d      	ldr	r2, [pc, #52]	; (8000e5c <HAL_Init+0x40>)
 8000e26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e2c:	4b0b      	ldr	r3, [pc, #44]	; (8000e5c <HAL_Init+0x40>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a0a      	ldr	r2, [pc, #40]	; (8000e5c <HAL_Init+0x40>)
 8000e32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e38:	4b08      	ldr	r3, [pc, #32]	; (8000e5c <HAL_Init+0x40>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a07      	ldr	r2, [pc, #28]	; (8000e5c <HAL_Init+0x40>)
 8000e3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e44:	2003      	movs	r0, #3
 8000e46:	f000 f94f 	bl	80010e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e4a:	200f      	movs	r0, #15
 8000e4c:	f000 f808 	bl	8000e60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e50:	f7ff fea0 	bl	8000b94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e54:	2300      	movs	r3, #0
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	40023c00 	.word	0x40023c00

08000e60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e68:	4b12      	ldr	r3, [pc, #72]	; (8000eb4 <HAL_InitTick+0x54>)
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	4b12      	ldr	r3, [pc, #72]	; (8000eb8 <HAL_InitTick+0x58>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	4619      	mov	r1, r3
 8000e72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e76:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f000 f967 	bl	8001152 <HAL_SYSTICK_Config>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e00e      	b.n	8000eac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2b0f      	cmp	r3, #15
 8000e92:	d80a      	bhi.n	8000eaa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e94:	2200      	movs	r2, #0
 8000e96:	6879      	ldr	r1, [r7, #4]
 8000e98:	f04f 30ff 	mov.w	r0, #4294967295
 8000e9c:	f000 f92f 	bl	80010fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ea0:	4a06      	ldr	r2, [pc, #24]	; (8000ebc <HAL_InitTick+0x5c>)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	e000      	b.n	8000eac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	3708      	adds	r7, #8
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	20000004 	.word	0x20000004
 8000eb8:	2000000c 	.word	0x2000000c
 8000ebc:	20000008 	.word	0x20000008

08000ec0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ec4:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <HAL_IncTick+0x20>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	461a      	mov	r2, r3
 8000eca:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <HAL_IncTick+0x24>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4413      	add	r3, r2
 8000ed0:	4a04      	ldr	r2, [pc, #16]	; (8000ee4 <HAL_IncTick+0x24>)
 8000ed2:	6013      	str	r3, [r2, #0]
}
 8000ed4:	bf00      	nop
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	2000000c 	.word	0x2000000c
 8000ee4:	200000bc 	.word	0x200000bc

08000ee8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  return uwTick;
 8000eec:	4b03      	ldr	r3, [pc, #12]	; (8000efc <HAL_GetTick+0x14>)
 8000eee:	681b      	ldr	r3, [r3, #0]
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	200000bc 	.word	0x200000bc

08000f00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f08:	f7ff ffee 	bl	8000ee8 <HAL_GetTick>
 8000f0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f18:	d005      	beq.n	8000f26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f1a:	4b0a      	ldr	r3, [pc, #40]	; (8000f44 <HAL_Delay+0x44>)
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	461a      	mov	r2, r3
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	4413      	add	r3, r2
 8000f24:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f26:	bf00      	nop
 8000f28:	f7ff ffde 	bl	8000ee8 <HAL_GetTick>
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	68bb      	ldr	r3, [r7, #8]
 8000f30:	1ad3      	subs	r3, r2, r3
 8000f32:	68fa      	ldr	r2, [r7, #12]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	d8f7      	bhi.n	8000f28 <HAL_Delay+0x28>
  {
  }
}
 8000f38:	bf00      	nop
 8000f3a:	bf00      	nop
 8000f3c:	3710      	adds	r7, #16
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	2000000c 	.word	0x2000000c

08000f48 <__NVIC_SetPriorityGrouping>:
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b085      	sub	sp, #20
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	f003 0307 	and.w	r3, r3, #7
 8000f56:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f58:	4b0c      	ldr	r3, [pc, #48]	; (8000f8c <__NVIC_SetPriorityGrouping+0x44>)
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f5e:	68ba      	ldr	r2, [r7, #8]
 8000f60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f64:	4013      	ands	r3, r2
 8000f66:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f7a:	4a04      	ldr	r2, [pc, #16]	; (8000f8c <__NVIC_SetPriorityGrouping+0x44>)
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	60d3      	str	r3, [r2, #12]
}
 8000f80:	bf00      	nop
 8000f82:	3714      	adds	r7, #20
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	e000ed00 	.word	0xe000ed00

08000f90 <__NVIC_GetPriorityGrouping>:
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f94:	4b04      	ldr	r3, [pc, #16]	; (8000fa8 <__NVIC_GetPriorityGrouping+0x18>)
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	0a1b      	lsrs	r3, r3, #8
 8000f9a:	f003 0307 	and.w	r3, r3, #7
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	e000ed00 	.word	0xe000ed00

08000fac <__NVIC_EnableIRQ>:
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	db0b      	blt.n	8000fd6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fbe:	79fb      	ldrb	r3, [r7, #7]
 8000fc0:	f003 021f 	and.w	r2, r3, #31
 8000fc4:	4907      	ldr	r1, [pc, #28]	; (8000fe4 <__NVIC_EnableIRQ+0x38>)
 8000fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fca:	095b      	lsrs	r3, r3, #5
 8000fcc:	2001      	movs	r0, #1
 8000fce:	fa00 f202 	lsl.w	r2, r0, r2
 8000fd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000fd6:	bf00      	nop
 8000fd8:	370c      	adds	r7, #12
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	e000e100 	.word	0xe000e100

08000fe8 <__NVIC_SetPriority>:
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	6039      	str	r1, [r7, #0]
 8000ff2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ff4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	db0a      	blt.n	8001012 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	b2da      	uxtb	r2, r3
 8001000:	490c      	ldr	r1, [pc, #48]	; (8001034 <__NVIC_SetPriority+0x4c>)
 8001002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001006:	0112      	lsls	r2, r2, #4
 8001008:	b2d2      	uxtb	r2, r2
 800100a:	440b      	add	r3, r1
 800100c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001010:	e00a      	b.n	8001028 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	b2da      	uxtb	r2, r3
 8001016:	4908      	ldr	r1, [pc, #32]	; (8001038 <__NVIC_SetPriority+0x50>)
 8001018:	79fb      	ldrb	r3, [r7, #7]
 800101a:	f003 030f 	and.w	r3, r3, #15
 800101e:	3b04      	subs	r3, #4
 8001020:	0112      	lsls	r2, r2, #4
 8001022:	b2d2      	uxtb	r2, r2
 8001024:	440b      	add	r3, r1
 8001026:	761a      	strb	r2, [r3, #24]
}
 8001028:	bf00      	nop
 800102a:	370c      	adds	r7, #12
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	e000e100 	.word	0xe000e100
 8001038:	e000ed00 	.word	0xe000ed00

0800103c <NVIC_EncodePriority>:
{
 800103c:	b480      	push	{r7}
 800103e:	b089      	sub	sp, #36	; 0x24
 8001040:	af00      	add	r7, sp, #0
 8001042:	60f8      	str	r0, [r7, #12]
 8001044:	60b9      	str	r1, [r7, #8]
 8001046:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	f003 0307 	and.w	r3, r3, #7
 800104e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	f1c3 0307 	rsb	r3, r3, #7
 8001056:	2b04      	cmp	r3, #4
 8001058:	bf28      	it	cs
 800105a:	2304      	movcs	r3, #4
 800105c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	3304      	adds	r3, #4
 8001062:	2b06      	cmp	r3, #6
 8001064:	d902      	bls.n	800106c <NVIC_EncodePriority+0x30>
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	3b03      	subs	r3, #3
 800106a:	e000      	b.n	800106e <NVIC_EncodePriority+0x32>
 800106c:	2300      	movs	r3, #0
 800106e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001070:	f04f 32ff 	mov.w	r2, #4294967295
 8001074:	69bb      	ldr	r3, [r7, #24]
 8001076:	fa02 f303 	lsl.w	r3, r2, r3
 800107a:	43da      	mvns	r2, r3
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	401a      	ands	r2, r3
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001084:	f04f 31ff 	mov.w	r1, #4294967295
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	fa01 f303 	lsl.w	r3, r1, r3
 800108e:	43d9      	mvns	r1, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001094:	4313      	orrs	r3, r2
}
 8001096:	4618      	mov	r0, r3
 8001098:	3724      	adds	r7, #36	; 0x24
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
	...

080010a4 <SysTick_Config>:
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	3b01      	subs	r3, #1
 80010b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010b4:	d301      	bcc.n	80010ba <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80010b6:	2301      	movs	r3, #1
 80010b8:	e00f      	b.n	80010da <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ba:	4a0a      	ldr	r2, [pc, #40]	; (80010e4 <SysTick_Config+0x40>)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	3b01      	subs	r3, #1
 80010c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010c2:	210f      	movs	r1, #15
 80010c4:	f04f 30ff 	mov.w	r0, #4294967295
 80010c8:	f7ff ff8e 	bl	8000fe8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010cc:	4b05      	ldr	r3, [pc, #20]	; (80010e4 <SysTick_Config+0x40>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010d2:	4b04      	ldr	r3, [pc, #16]	; (80010e4 <SysTick_Config+0x40>)
 80010d4:	2207      	movs	r2, #7
 80010d6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80010d8:	2300      	movs	r3, #0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	e000e010 	.word	0xe000e010

080010e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f7ff ff29 	bl	8000f48 <__NVIC_SetPriorityGrouping>
}
 80010f6:	bf00      	nop
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}

080010fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010fe:	b580      	push	{r7, lr}
 8001100:	b086      	sub	sp, #24
 8001102:	af00      	add	r7, sp, #0
 8001104:	4603      	mov	r3, r0
 8001106:	60b9      	str	r1, [r7, #8]
 8001108:	607a      	str	r2, [r7, #4]
 800110a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800110c:	2300      	movs	r3, #0
 800110e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001110:	f7ff ff3e 	bl	8000f90 <__NVIC_GetPriorityGrouping>
 8001114:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	68b9      	ldr	r1, [r7, #8]
 800111a:	6978      	ldr	r0, [r7, #20]
 800111c:	f7ff ff8e 	bl	800103c <NVIC_EncodePriority>
 8001120:	4602      	mov	r2, r0
 8001122:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001126:	4611      	mov	r1, r2
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff ff5d 	bl	8000fe8 <__NVIC_SetPriority>
}
 800112e:	bf00      	nop
 8001130:	3718      	adds	r7, #24
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b082      	sub	sp, #8
 800113a:	af00      	add	r7, sp, #0
 800113c:	4603      	mov	r3, r0
 800113e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff ff31 	bl	8000fac <__NVIC_EnableIRQ>
}
 800114a:	bf00      	nop
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001152:	b580      	push	{r7, lr}
 8001154:	b082      	sub	sp, #8
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f7ff ffa2 	bl	80010a4 <SysTick_Config>
 8001160:	4603      	mov	r3, r0
}
 8001162:	4618      	mov	r0, r3
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
	...

0800116c <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b088      	sub	sp, #32
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8001174:	2300      	movs	r3, #0
 8001176:	61fb      	str	r3, [r7, #28]
 8001178:	2300      	movs	r3, #0
 800117a:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 800117c:	4ba1      	ldr	r3, [pc, #644]	; (8001404 <HAL_ETH_Init+0x298>)
 800117e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8001180:	2300      	movs	r3, #0
 8001182:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001184:	2300      	movs	r3, #0
 8001186:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d101      	bne.n	8001192 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800118e:	2301      	movs	r3, #1
 8001190:	e182      	b.n	8001498 <HAL_ETH_Init+0x32c>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001198:	b2db      	uxtb	r3, r3
 800119a:	2b00      	cmp	r3, #0
 800119c:	d106      	bne.n	80011ac <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2200      	movs	r2, #0
 80011a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	f001 ffee 	bl	8003188 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ac:	2300      	movs	r3, #0
 80011ae:	60bb      	str	r3, [r7, #8]
 80011b0:	4b95      	ldr	r3, [pc, #596]	; (8001408 <HAL_ETH_Init+0x29c>)
 80011b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b4:	4a94      	ldr	r2, [pc, #592]	; (8001408 <HAL_ETH_Init+0x29c>)
 80011b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011ba:	6453      	str	r3, [r2, #68]	; 0x44
 80011bc:	4b92      	ldr	r3, [pc, #584]	; (8001408 <HAL_ETH_Init+0x29c>)
 80011be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011c4:	60bb      	str	r3, [r7, #8]
 80011c6:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80011c8:	4b90      	ldr	r3, [pc, #576]	; (800140c <HAL_ETH_Init+0x2a0>)
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	4a8f      	ldr	r2, [pc, #572]	; (800140c <HAL_ETH_Init+0x2a0>)
 80011ce:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80011d2:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80011d4:	4b8d      	ldr	r3, [pc, #564]	; (800140c <HAL_ETH_Init+0x2a0>)
 80011d6:	685a      	ldr	r2, [r3, #4]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6a1b      	ldr	r3, [r3, #32]
 80011dc:	498b      	ldr	r1, [pc, #556]	; (800140c <HAL_ETH_Init+0x2a0>)
 80011de:	4313      	orrs	r3, r2
 80011e0:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	687a      	ldr	r2, [r7, #4]
 80011ee:	6812      	ldr	r2, [r2, #0]
 80011f0:	f043 0301 	orr.w	r3, r3, #1
 80011f4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80011f8:	6013      	str	r3, [r2, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80011fa:	f7ff fe75 	bl	8000ee8 <HAL_GetTick>
 80011fe:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001200:	e011      	b.n	8001226 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001202:	f7ff fe71 	bl	8000ee8 <HAL_GetTick>
 8001206:	4602      	mov	r2, r0
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	1ad3      	subs	r3, r2, r3
 800120c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001210:	d909      	bls.n	8001226 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2203      	movs	r2, #3
 8001216:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2200      	movs	r2, #0
 800121e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8001222:	2303      	movs	r3, #3
 8001224:	e138      	b.n	8001498 <HAL_ETH_Init+0x32c>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f003 0301 	and.w	r3, r3, #1
 8001234:	2b00      	cmp	r3, #0
 8001236:	d1e4      	bne.n	8001202 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	691b      	ldr	r3, [r3, #16]
 800123e:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	f023 031c 	bic.w	r3, r3, #28
 8001246:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001248:	f001 ff1e 	bl	8003088 <HAL_RCC_GetHCLKFreq>
 800124c:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	4a6f      	ldr	r2, [pc, #444]	; (8001410 <HAL_ETH_Init+0x2a4>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d908      	bls.n	8001268 <HAL_ETH_Init+0xfc>
 8001256:	69bb      	ldr	r3, [r7, #24]
 8001258:	4a6e      	ldr	r2, [pc, #440]	; (8001414 <HAL_ETH_Init+0x2a8>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d804      	bhi.n	8001268 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	f043 0308 	orr.w	r3, r3, #8
 8001264:	61fb      	str	r3, [r7, #28]
 8001266:	e027      	b.n	80012b8 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	4a6a      	ldr	r2, [pc, #424]	; (8001414 <HAL_ETH_Init+0x2a8>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d908      	bls.n	8001282 <HAL_ETH_Init+0x116>
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	4a64      	ldr	r2, [pc, #400]	; (8001404 <HAL_ETH_Init+0x298>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d204      	bcs.n	8001282 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	f043 030c 	orr.w	r3, r3, #12
 800127e:	61fb      	str	r3, [r7, #28]
 8001280:	e01a      	b.n	80012b8 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8001282:	69bb      	ldr	r3, [r7, #24]
 8001284:	4a5f      	ldr	r2, [pc, #380]	; (8001404 <HAL_ETH_Init+0x298>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d303      	bcc.n	8001292 <HAL_ETH_Init+0x126>
 800128a:	69bb      	ldr	r3, [r7, #24]
 800128c:	4a62      	ldr	r2, [pc, #392]	; (8001418 <HAL_ETH_Init+0x2ac>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d911      	bls.n	80012b6 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8001292:	69bb      	ldr	r3, [r7, #24]
 8001294:	4a60      	ldr	r2, [pc, #384]	; (8001418 <HAL_ETH_Init+0x2ac>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d908      	bls.n	80012ac <HAL_ETH_Init+0x140>
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	4a5f      	ldr	r2, [pc, #380]	; (800141c <HAL_ETH_Init+0x2b0>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d804      	bhi.n	80012ac <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	f043 0304 	orr.w	r3, r3, #4
 80012a8:	61fb      	str	r3, [r7, #28]
 80012aa:	e005      	b.n	80012b8 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	f043 0310 	orr.w	r3, r3, #16
 80012b2:	61fb      	str	r3, [r7, #28]
 80012b4:	e000      	b.n	80012b8 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80012b6:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	69fa      	ldr	r2, [r7, #28]
 80012be:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80012c0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80012c4:	2100      	movs	r1, #0
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f000 fc10 	bl	8001aec <HAL_ETH_WritePHYRegister>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d00b      	beq.n	80012ea <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80012d6:	6939      	ldr	r1, [r7, #16]
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f000 fdc5 	bl	8001e68 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2201      	movs	r2, #1
 80012e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e0d6      	b.n	8001498 <HAL_ETH_Init+0x32c>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80012ea:	20ff      	movs	r0, #255	; 0xff
 80012ec:	f7ff fe08 	bl	8000f00 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	f000 80a4 	beq.w	8001442 <HAL_ETH_Init+0x2d6>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80012fa:	f7ff fdf5 	bl	8000ee8 <HAL_GetTick>
 80012fe:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001300:	f107 030c 	add.w	r3, r7, #12
 8001304:	461a      	mov	r2, r3
 8001306:	2101      	movs	r1, #1
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f000 fb87 	bl	8001a1c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800130e:	f7ff fdeb 	bl	8000ee8 <HAL_GetTick>
 8001312:	4602      	mov	r2, r0
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	f241 3288 	movw	r2, #5000	; 0x1388
 800131c:	4293      	cmp	r3, r2
 800131e:	d90f      	bls.n	8001340 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001320:	2301      	movs	r3, #1
 8001322:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001324:	6939      	ldr	r1, [r7, #16]
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f000 fd9e 	bl	8001e68 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2201      	movs	r2, #1
 8001330:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2200      	movs	r2, #0
 8001338:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800133c:	2303      	movs	r3, #3
 800133e:	e0ab      	b.n	8001498 <HAL_ETH_Init+0x32c>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	f003 0304 	and.w	r3, r3, #4
 8001346:	2b00      	cmp	r3, #0
 8001348:	d0da      	beq.n	8001300 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800134a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800134e:	2100      	movs	r1, #0
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f000 fbcb 	bl	8001aec <HAL_ETH_WritePHYRegister>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d00b      	beq.n	8001374 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800135c:	2301      	movs	r3, #1
 800135e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001360:	6939      	ldr	r1, [r7, #16]
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f000 fd80 	bl	8001e68 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2201      	movs	r2, #1
 800136c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001370:	2301      	movs	r3, #1
 8001372:	e091      	b.n	8001498 <HAL_ETH_Init+0x32c>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001374:	f7ff fdb8 	bl	8000ee8 <HAL_GetTick>
 8001378:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800137a:	f107 030c 	add.w	r3, r7, #12
 800137e:	461a      	mov	r2, r3
 8001380:	2101      	movs	r1, #1
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f000 fb4a 	bl	8001a1c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001388:	f7ff fdae 	bl	8000ee8 <HAL_GetTick>
 800138c:	4602      	mov	r2, r0
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	f241 3288 	movw	r2, #5000	; 0x1388
 8001396:	4293      	cmp	r3, r2
 8001398:	d90f      	bls.n	80013ba <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800139e:	6939      	ldr	r1, [r7, #16]
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f000 fd61 	bl	8001e68 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2201      	movs	r2, #1
 80013aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2200      	movs	r2, #0
 80013b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80013b6:	2303      	movs	r3, #3
 80013b8:	e06e      	b.n	8001498 <HAL_ETH_Init+0x32c>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	f003 0320 	and.w	r3, r3, #32
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d0da      	beq.n	800137a <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80013c4:	f107 030c 	add.w	r3, r7, #12
 80013c8:	461a      	mov	r2, r3
 80013ca:	2110      	movs	r1, #16
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f000 fb25 	bl	8001a1c <HAL_ETH_ReadPHYRegister>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d00b      	beq.n	80013f0 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80013dc:	6939      	ldr	r1, [r7, #16]
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f000 fd42 	bl	8001e68 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2201      	movs	r2, #1
 80013e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80013ec:	2301      	movs	r3, #1
 80013ee:	e053      	b.n	8001498 <HAL_ETH_Init+0x32c>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	f003 0304 	and.w	r3, r3, #4
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d012      	beq.n	8001420 <HAL_ETH_Init+0x2b4>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001400:	60da      	str	r2, [r3, #12]
 8001402:	e010      	b.n	8001426 <HAL_ETH_Init+0x2ba>
 8001404:	03938700 	.word	0x03938700
 8001408:	40023800 	.word	0x40023800
 800140c:	40013800 	.word	0x40013800
 8001410:	01312cff 	.word	0x01312cff
 8001414:	02160ebf 	.word	0x02160ebf
 8001418:	05f5e0ff 	.word	0x05f5e0ff
 800141c:	08f0d17f 	.word	0x08f0d17f
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2200      	movs	r2, #0
 8001424:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	f003 0302 	and.w	r3, r3, #2
 800142c:	2b00      	cmp	r3, #0
 800142e:	d003      	beq.n	8001438 <HAL_ETH_Init+0x2cc>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2200      	movs	r2, #0
 8001434:	609a      	str	r2, [r3, #8]
 8001436:	e026      	b.n	8001486 <HAL_ETH_Init+0x31a>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800143e:	609a      	str	r2, [r3, #8]
 8001440:	e021      	b.n	8001486 <HAL_ETH_Init+0x31a>
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	68db      	ldr	r3, [r3, #12]
 8001446:	08db      	lsrs	r3, r3, #3
 8001448:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	085b      	lsrs	r3, r3, #1
 8001450:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001452:	4313      	orrs	r3, r2
 8001454:	b29b      	uxth	r3, r3
 8001456:	461a      	mov	r2, r3
 8001458:	2100      	movs	r1, #0
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f000 fb46 	bl	8001aec <HAL_ETH_WritePHYRegister>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d00b      	beq.n	800147e <HAL_ETH_Init+0x312>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800146a:	6939      	ldr	r1, [r7, #16]
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f000 fcfb 	bl	8001e68 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2201      	movs	r2, #1
 8001476:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e00c      	b.n	8001498 <HAL_ETH_Init+0x32c>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 800147e:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001482:	f7ff fd3d 	bl	8000f00 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001486:	6939      	ldr	r1, [r7, #16]
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f000 fced 	bl	8001e68 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2201      	movs	r2, #1
 8001492:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001496:	2300      	movs	r3, #0
}
 8001498:	4618      	mov	r0, r3
 800149a:	3720      	adds	r7, #32
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}

080014a0 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b087      	sub	sp, #28
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	60f8      	str	r0, [r7, #12]
 80014a8:	60b9      	str	r1, [r7, #8]
 80014aa:	607a      	str	r2, [r7, #4]
 80014ac:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80014ae:	2300      	movs	r3, #0
 80014b0:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d101      	bne.n	80014c0 <HAL_ETH_DMATxDescListInit+0x20>
 80014bc:	2302      	movs	r3, #2
 80014be:	e051      	b.n	8001564 <HAL_ETH_DMATxDescListInit+0xc4>
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	2201      	movs	r2, #1
 80014c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	2202      	movs	r2, #2
 80014cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	68ba      	ldr	r2, [r7, #8]
 80014d4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 80014d6:	2300      	movs	r3, #0
 80014d8:	617b      	str	r3, [r7, #20]
 80014da:	e030      	b.n	800153e <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	015b      	lsls	r3, r3, #5
 80014e0:	68ba      	ldr	r2, [r7, #8]
 80014e2:	4413      	add	r3, r2
 80014e4:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80014ec:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80014f4:	fb02 f303 	mul.w	r3, r2, r3
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	4413      	add	r3, r2
 80014fc:	461a      	mov	r2, r3
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	69db      	ldr	r3, [r3, #28]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d105      	bne.n	8001516 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	3b01      	subs	r3, #1
 800151a:	697a      	ldr	r2, [r7, #20]
 800151c:	429a      	cmp	r2, r3
 800151e:	d208      	bcs.n	8001532 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	3301      	adds	r3, #1
 8001524:	015b      	lsls	r3, r3, #5
 8001526:	68ba      	ldr	r2, [r7, #8]
 8001528:	4413      	add	r3, r2
 800152a:	461a      	mov	r2, r3
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	60da      	str	r2, [r3, #12]
 8001530:	e002      	b.n	8001538 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8001532:	68ba      	ldr	r2, [r7, #8]
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	3301      	adds	r3, #1
 800153c:	617b      	str	r3, [r7, #20]
 800153e:	697a      	ldr	r2, [r7, #20]
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	429a      	cmp	r2, r3
 8001544:	d3ca      	bcc.n	80014dc <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001550:	6113      	str	r3, [r2, #16]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	2201      	movs	r2, #1
 8001556:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	2200      	movs	r2, #0
 800155e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001562:	2300      	movs	r3, #0
}
 8001564:	4618      	mov	r0, r3
 8001566:	371c      	adds	r7, #28
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8001570:	b480      	push	{r7}
 8001572:	b087      	sub	sp, #28
 8001574:	af00      	add	r7, sp, #0
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	60b9      	str	r1, [r7, #8]
 800157a:	607a      	str	r2, [r7, #4]
 800157c:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 800157e:	2300      	movs	r3, #0
 8001580:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001588:	2b01      	cmp	r3, #1
 800158a:	d101      	bne.n	8001590 <HAL_ETH_DMARxDescListInit+0x20>
 800158c:	2302      	movs	r3, #2
 800158e:	e055      	b.n	800163c <HAL_ETH_DMARxDescListInit+0xcc>
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	2201      	movs	r2, #1
 8001594:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	2202      	movs	r2, #2
 800159c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	68ba      	ldr	r2, [r7, #8]
 80015a4:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 80015a6:	2300      	movs	r3, #0
 80015a8:	617b      	str	r3, [r7, #20]
 80015aa:	e034      	b.n	8001616 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	015b      	lsls	r3, r3, #5
 80015b0:	68ba      	ldr	r2, [r7, #8]
 80015b2:	4413      	add	r3, r2
 80015b4:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80015bc:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80015c4:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80015cc:	fb02 f303 	mul.w	r3, r2, r3
 80015d0:	687a      	ldr	r2, [r7, #4]
 80015d2:	4413      	add	r3, r2
 80015d4:	461a      	mov	r2, r3
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	699b      	ldr	r3, [r3, #24]
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d105      	bne.n	80015ee <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	3b01      	subs	r3, #1
 80015f2:	697a      	ldr	r2, [r7, #20]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d208      	bcs.n	800160a <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	3301      	adds	r3, #1
 80015fc:	015b      	lsls	r3, r3, #5
 80015fe:	68ba      	ldr	r2, [r7, #8]
 8001600:	4413      	add	r3, r2
 8001602:	461a      	mov	r2, r3
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	60da      	str	r2, [r3, #12]
 8001608:	e002      	b.n	8001610 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 800160a:	68ba      	ldr	r2, [r7, #8]
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	3301      	adds	r3, #1
 8001614:	617b      	str	r3, [r7, #20]
 8001616:	697a      	ldr	r2, [r7, #20]
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	429a      	cmp	r2, r3
 800161c:	d3c6      	bcc.n	80015ac <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001628:	60d3      	str	r3, [r2, #12]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	2201      	movs	r2, #1
 800162e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	2200      	movs	r2, #0
 8001636:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800163a:	2300      	movs	r3, #0
}
 800163c:	4618      	mov	r0, r3
 800163e:	371c      	adds	r7, #28
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8001648:	b480      	push	{r7}
 800164a:	b087      	sub	sp, #28
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8001652:	2300      	movs	r3, #0
 8001654:	617b      	str	r3, [r7, #20]
 8001656:	2300      	movs	r3, #0
 8001658:	60fb      	str	r3, [r7, #12]
 800165a:	2300      	movs	r3, #0
 800165c:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001664:	2b01      	cmp	r3, #1
 8001666:	d101      	bne.n	800166c <HAL_ETH_TransmitFrame+0x24>
 8001668:	2302      	movs	r3, #2
 800166a:	e0cc      	b.n	8001806 <HAL_ETH_TransmitFrame+0x1be>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2201      	movs	r2, #1
 8001670:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2202      	movs	r2, #2
 8001678:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d109      	bne.n	8001696 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2201      	movs	r2, #1
 8001686:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2200      	movs	r2, #0
 800168e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8001692:	2301      	movs	r3, #1
 8001694:	e0b7      	b.n	8001806 <HAL_ETH_TransmitFrame+0x1be>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2b00      	cmp	r3, #0
 800169e:	da09      	bge.n	80016b4 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2212      	movs	r2, #18
 80016a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2200      	movs	r2, #0
 80016ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	e0a8      	b.n	8001806 <HAL_ETH_TransmitFrame+0x1be>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d915      	bls.n	80016ea <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	4a54      	ldr	r2, [pc, #336]	; (8001814 <HAL_ETH_TransmitFrame+0x1cc>)
 80016c2:	fba2 2303 	umull	r2, r3, r2, r3
 80016c6:	0a9b      	lsrs	r3, r3, #10
 80016c8:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80016ca:	683a      	ldr	r2, [r7, #0]
 80016cc:	4b51      	ldr	r3, [pc, #324]	; (8001814 <HAL_ETH_TransmitFrame+0x1cc>)
 80016ce:	fba3 1302 	umull	r1, r3, r3, r2
 80016d2:	0a9b      	lsrs	r3, r3, #10
 80016d4:	f240 51f4 	movw	r1, #1524	; 0x5f4
 80016d8:	fb01 f303 	mul.w	r3, r1, r3
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d005      	beq.n	80016ee <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	3301      	adds	r3, #1
 80016e6:	617b      	str	r3, [r7, #20]
 80016e8:	e001      	b.n	80016ee <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 80016ea:	2301      	movs	r3, #1
 80016ec:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d11c      	bne.n	800172e <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016fe:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8001702:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001708:	683a      	ldr	r2, [r7, #0]
 800170a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800170e:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800171a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800171e:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001724:	68db      	ldr	r3, [r3, #12]
 8001726:	461a      	mov	r2, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	62da      	str	r2, [r3, #44]	; 0x2c
 800172c:	e04b      	b.n	80017c6 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 800172e:	2300      	movs	r3, #0
 8001730:	613b      	str	r3, [r7, #16]
 8001732:	e044      	b.n	80017be <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800173e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001742:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d107      	bne.n	800175a <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001754:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001758:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800175e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001762:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	3b01      	subs	r3, #1
 8001768:	693a      	ldr	r2, [r7, #16]
 800176a:	429a      	cmp	r2, r3
 800176c:	d116      	bne.n	800179c <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001778:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800177c:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	4a25      	ldr	r2, [pc, #148]	; (8001818 <HAL_ETH_TransmitFrame+0x1d0>)
 8001782:	fb03 f202 	mul.w	r2, r3, r2
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	4413      	add	r3, r2
 800178a:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800178e:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001794:	68fa      	ldr	r2, [r7, #12]
 8001796:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800179a:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80017aa:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b0:	68db      	ldr	r3, [r3, #12]
 80017b2:	461a      	mov	r2, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	3301      	adds	r3, #1
 80017bc:	613b      	str	r3, [r7, #16]
 80017be:	693a      	ldr	r2, [r7, #16]
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d3b6      	bcc.n	8001734 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017ce:	695b      	ldr	r3, [r3, #20]
 80017d0:	f003 0304 	and.w	r3, r3, #4
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d00d      	beq.n	80017f4 <HAL_ETH_TransmitFrame+0x1ac>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017e0:	461a      	mov	r2, r3
 80017e2:	2304      	movs	r3, #4
 80017e4:	6153      	str	r3, [r2, #20]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017ee:	461a      	mov	r2, r3
 80017f0:	2300      	movs	r3, #0
 80017f2:	6053      	str	r3, [r2, #4]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2201      	movs	r2, #1
 80017f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2200      	movs	r2, #0
 8001800:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001804:	2300      	movs	r3, #0
}
 8001806:	4618      	mov	r0, r3
 8001808:	371c      	adds	r7, #28
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	ac02b00b 	.word	0xac02b00b
 8001818:	fffffa0c 	.word	0xfffffa0c

0800181c <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 8001824:	2300      	movs	r3, #0
 8001826:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800182e:	2b01      	cmp	r3, #1
 8001830:	d101      	bne.n	8001836 <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8001832:	2302      	movs	r3, #2
 8001834:	e074      	b.n	8001920 <HAL_ETH_GetReceivedFrame_IT+0x104>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2201      	movs	r2, #1
 800183a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2202      	movs	r2, #2
 8001842:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001846:	e05a      	b.n	80018fe <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	3301      	adds	r3, #1
 800184c:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001858:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800185c:	d10d      	bne.n	800187a <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2201      	movs	r2, #1
 800186a:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001870:	68db      	ldr	r3, [r3, #12]
 8001872:	461a      	mov	r2, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	629a      	str	r2, [r3, #40]	; 0x28
 8001878:	e041      	b.n	80018fe <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001884:	2b00      	cmp	r3, #0
 8001886:	d10b      	bne.n	80018a0 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800188c:	1c5a      	adds	r2, r3, #1
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	461a      	mov	r2, r3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	629a      	str	r2, [r3, #40]	; 0x28
 800189e:	e02e      	b.n	80018fe <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018ac:	1c5a      	adds	r2, r3, #1
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d103      	bne.n	80018c2 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	0c1b      	lsrs	r3, r3, #16
 80018ca:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80018ce:	1f1a      	subs	r2, r3, #4
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d8:	689a      	ldr	r2, [r3, #8]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	461a      	mov	r2, r3
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2201      	movs	r2, #1
 80018ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2200      	movs	r2, #0
 80018f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 80018fa:	2300      	movs	r3, #0
 80018fc:	e010      	b.n	8001920 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2b00      	cmp	r3, #0
 8001906:	db02      	blt.n	800190e <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	2b03      	cmp	r3, #3
 800190c:	d99c      	bls.n	8001848 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2201      	movs	r2, #1
 8001912:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2200      	movs	r2, #0
 800191a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
}
 8001920:	4618      	mov	r0, r3
 8001922:	3714      	adds	r7, #20
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr

0800192c <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800193c:	695b      	ldr	r3, [r3, #20]
 800193e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001942:	2b40      	cmp	r3, #64	; 0x40
 8001944:	d112      	bne.n	800196c <HAL_ETH_IRQHandler+0x40>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f001 fccc 	bl	80032e4 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001954:	461a      	mov	r2, r3
 8001956:	2340      	movs	r3, #64	; 0x40
 8001958:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2201      	movs	r2, #1
 800195e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2200      	movs	r2, #0
 8001966:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800196a:	e01a      	b.n	80019a2 <HAL_ETH_IRQHandler+0x76>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001974:	695b      	ldr	r3, [r3, #20]
 8001976:	f003 0301 	and.w	r3, r3, #1
 800197a:	2b01      	cmp	r3, #1
 800197c:	d111      	bne.n	80019a2 <HAL_ETH_IRQHandler+0x76>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f000 f838 	bl	80019f4 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800198c:	461a      	mov	r2, r3
 800198e:	2301      	movs	r3, #1
 8001990:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2201      	movs	r2, #1
 8001996:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2200      	movs	r2, #0
 800199e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019aa:	461a      	mov	r2, r3
 80019ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019b0:	6153      	str	r3, [r2, #20]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019ba:	695b      	ldr	r3, [r3, #20]
 80019bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80019c4:	d112      	bne.n	80019ec <HAL_ETH_IRQHandler+0xc0>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f000 f81e 	bl	8001a08 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019d4:	461a      	mov	r2, r3
 80019d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80019da:	6153      	str	r3, [r2, #20]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2201      	movs	r2, #1
 80019e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2200      	movs	r2, #0
 80019e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 80019ec:	bf00      	nop
 80019ee:	3708      	adds	r7, #8
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 80019fc:	bf00      	nop
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001a10:	bf00      	nop
 8001a12:	370c      	adds	r7, #12
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b086      	sub	sp, #24
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	60f8      	str	r0, [r7, #12]
 8001a24:	460b      	mov	r3, r1
 8001a26:	607a      	str	r2, [r7, #4]
 8001a28:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	2b82      	cmp	r3, #130	; 0x82
 8001a3c:	d101      	bne.n	8001a42 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001a3e:	2302      	movs	r3, #2
 8001a40:	e050      	b.n	8001ae4 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	2282      	movs	r2, #130	; 0x82
 8001a46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	691b      	ldr	r3, [r3, #16]
 8001a50:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	f003 031c 	and.w	r3, r3, #28
 8001a58:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	8a1b      	ldrh	r3, [r3, #16]
 8001a5e:	02db      	lsls	r3, r3, #11
 8001a60:	b29b      	uxth	r3, r3
 8001a62:	697a      	ldr	r2, [r7, #20]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001a68:	897b      	ldrh	r3, [r7, #10]
 8001a6a:	019b      	lsls	r3, r3, #6
 8001a6c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001a70:	697a      	ldr	r2, [r7, #20]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	f023 0302 	bic.w	r3, r3, #2
 8001a7c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	f043 0301 	orr.w	r3, r3, #1
 8001a84:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	697a      	ldr	r2, [r7, #20]
 8001a8c:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001a8e:	f7ff fa2b 	bl	8000ee8 <HAL_GetTick>
 8001a92:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001a94:	e015      	b.n	8001ac2 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001a96:	f7ff fa27 	bl	8000ee8 <HAL_GetTick>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aa4:	d309      	bcc.n	8001aba <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e014      	b.n	8001ae4 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	691b      	ldr	r3, [r3, #16]
 8001ac0:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	f003 0301 	and.w	r3, r3, #1
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d1e4      	bne.n	8001a96 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	695b      	ldr	r3, [r3, #20]
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	2201      	movs	r2, #1
 8001ade:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001ae2:	2300      	movs	r3, #0
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3718      	adds	r7, #24
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}

08001aec <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b086      	sub	sp, #24
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	60f8      	str	r0, [r7, #12]
 8001af4:	460b      	mov	r3, r1
 8001af6:	607a      	str	r2, [r7, #4]
 8001af8:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8001afa:	2300      	movs	r3, #0
 8001afc:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001afe:	2300      	movs	r3, #0
 8001b00:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	2b42      	cmp	r3, #66	; 0x42
 8001b0c:	d101      	bne.n	8001b12 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001b0e:	2302      	movs	r3, #2
 8001b10:	e04e      	b.n	8001bb0 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	2242      	movs	r2, #66	; 0x42
 8001b16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	691b      	ldr	r3, [r3, #16]
 8001b20:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	f003 031c 	and.w	r3, r3, #28
 8001b28:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	8a1b      	ldrh	r3, [r3, #16]
 8001b2e:	02db      	lsls	r3, r3, #11
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	697a      	ldr	r2, [r7, #20]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001b38:	897b      	ldrh	r3, [r7, #10]
 8001b3a:	019b      	lsls	r3, r3, #6
 8001b3c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001b40:	697a      	ldr	r2, [r7, #20]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	f043 0302 	orr.w	r3, r3, #2
 8001b4c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	f043 0301 	orr.w	r3, r3, #1
 8001b54:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	b29a      	uxth	r2, r3
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	697a      	ldr	r2, [r7, #20]
 8001b66:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001b68:	f7ff f9be 	bl	8000ee8 <HAL_GetTick>
 8001b6c:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001b6e:	e015      	b.n	8001b9c <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001b70:	f7ff f9ba 	bl	8000ee8 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b7e:	d309      	bcc.n	8001b94 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2201      	movs	r2, #1
 8001b84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001b90:	2303      	movs	r3, #3
 8001b92:	e00d      	b.n	8001bb0 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	691b      	ldr	r3, [r3, #16]
 8001b9a:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	f003 0301 	and.w	r3, r3, #1
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d1e4      	bne.n	8001b70 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	2201      	movs	r2, #1
 8001baa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001bae:	2300      	movs	r3, #0
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3718      	adds	r7, #24
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d101      	bne.n	8001bce <HAL_ETH_Start+0x16>
 8001bca:	2302      	movs	r3, #2
 8001bcc:	e01f      	b.n	8001c0e <HAL_ETH_Start+0x56>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2202      	movs	r2, #2
 8001bda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f000 fb40 	bl	8002264 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f000 fb77 	bl	80022d8 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f000 fc06 	bl	80023fc <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f000 fbab 	bl	800234c <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f000 fbd4 	bl	80023a4 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2200      	movs	r2, #0
 8001c08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b082      	sub	sp, #8
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d101      	bne.n	8001c2c <HAL_ETH_Stop+0x16>
 8001c28:	2302      	movs	r3, #2
 8001c2a:	e01f      	b.n	8001c6c <HAL_ETH_Stop+0x56>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2202      	movs	r2, #2
 8001c38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f000 fb9b 	bl	8002378 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f000 fbc4 	bl	80023d0 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f000 fb62 	bl	8002312 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f000 fbd4 	bl	80023fc <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f000 fb22 	bl	800229e <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2200      	movs	r2, #0
 8001c66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001c6a:	2300      	movs	r3, #0
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3708      	adds	r7, #8
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d101      	bne.n	8001c90 <HAL_ETH_ConfigMAC+0x1c>
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	e0e4      	b.n	8001e5a <HAL_ETH_ConfigMAC+0x1e6>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2201      	movs	r2, #1
 8001c94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2202      	movs	r2, #2
 8001c9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	f000 80b1 	beq.w	8001e0a <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001cb0:	68fa      	ldr	r2, [r7, #12]
 8001cb2:	4b6c      	ldr	r3, [pc, #432]	; (8001e64 <HAL_ETH_ConfigMAC+0x1f0>)
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001cc0:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8001cc6:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8001ccc:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8001cd2:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8001cd8:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8001cde:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8001ce4:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8001cea:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8001cf0:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8001cf6:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8001cfc:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8001d02:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001d04:	68fa      	ldr	r2, [r7, #12]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	68fa      	ldr	r2, [r7, #12]
 8001d10:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d1a:	2001      	movs	r0, #1
 8001d1c:	f7ff f8f0 	bl	8000f00 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	68fa      	ldr	r2, [r7, #12]
 8001d26:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001d30:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8001d36:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8001d3c:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8001d42:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8001d48:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8001d4e:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8001d5a:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001d5c:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d66:	2001      	movs	r0, #1
 8001d68:	f7ff f8ca 	bl	8000f00 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	68fa      	ldr	r2, [r7, #12]
 8001d72:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	683a      	ldr	r2, [r7, #0]
 8001d7a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001d7c:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	683a      	ldr	r2, [r7, #0]
 8001d84:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001d86:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	699b      	ldr	r3, [r3, #24]
 8001d8e:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001d90:	68fa      	ldr	r2, [r7, #12]
 8001d92:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001d96:	4013      	ands	r3, r2
 8001d98:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d9e:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001da4:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8001daa:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8001db0:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8001db6:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8001dbc:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001dbe:	68fa      	ldr	r2, [r7, #12]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	68fa      	ldr	r2, [r7, #12]
 8001dca:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	699b      	ldr	r3, [r3, #24]
 8001dd2:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001dd4:	2001      	movs	r0, #1
 8001dd6:	f7ff f893 	bl	8000f00 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	68fa      	ldr	r2, [r7, #12]
 8001de0:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	430a      	orrs	r2, r1
 8001df0:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	69db      	ldr	r3, [r3, #28]
 8001df8:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8001dfa:	2001      	movs	r0, #1
 8001dfc:	f7ff f880 	bl	8000f00 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	68fa      	ldr	r2, [r7, #12]
 8001e06:	61da      	str	r2, [r3, #28]
 8001e08:	e01e      	b.n	8001e48 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001e18:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	689a      	ldr	r2, [r3, #8]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	68db      	ldr	r3, [r3, #12]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	68fa      	ldr	r2, [r7, #12]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	68fa      	ldr	r2, [r7, #12]
 8001e30:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e3a:	2001      	movs	r0, #1
 8001e3c:	f7ff f860 	bl	8000f00 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	68fa      	ldr	r2, [r7, #12]
 8001e46:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2200      	movs	r2, #0
 8001e54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3710      	adds	r7, #16
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	ff20810f 	.word	0xff20810f

08001e68 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b0b0      	sub	sp, #192	; 0xc0
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8001e72:	2300      	movs	r3, #0
 8001e74:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d007      	beq.n	8001e8e <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e84:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e8c:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001e92:	2300      	movs	r3, #0
 8001e94:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001e96:	2300      	movs	r3, #0
 8001e98:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	69db      	ldr	r3, [r3, #28]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d103      	bne.n	8001eb6 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001eae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001eb2:	663b      	str	r3, [r7, #96]	; 0x60
 8001eb4:	e001      	b.n	8001eba <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001eba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ebe:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001ed4:	2340      	movs	r3, #64	; 0x40
 8001ed6:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001eea:	2300      	movs	r3, #0
 8001eec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8001efc:	2300      	movs	r3, #0
 8001efe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8001f02:	2300      	movs	r3, #0
 8001f04:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001f08:	2380      	movs	r3, #128	; 0x80
 8001f0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001f14:	2300      	movs	r3, #0
 8001f16:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001f20:	2300      	movs	r3, #0
 8001f22:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001f26:	2300      	movs	r3, #0
 8001f28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001f3c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f40:	4baa      	ldr	r3, [pc, #680]	; (80021ec <ETH_MACDMAConfig+0x384>)
 8001f42:	4013      	ands	r3, r2
 8001f44:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001f48:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8001f4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001f4c:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001f4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001f50:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001f52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001f54:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8001f5a:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001f5c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001f5e:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001f60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001f62:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001f68:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8001f6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001f6c:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001f6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001f70:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001f72:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001f74:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001f76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001f78:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8001f7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001f7c:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001f7e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f82:	4313      	orrs	r3, r2
 8001f84:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f90:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f9c:	2001      	movs	r0, #1
 8001f9e:	f7fe ffaf 	bl	8000f00 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001faa:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001fac:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8001fae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001fb0:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8001fb2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001fb4:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8001fb6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8001fba:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001fbc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8001fc0:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8001fc2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8001fc6:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001fc8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001fcc:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001fd0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001fd8:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001fda:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fe6:	2001      	movs	r0, #1
 8001fe8:	f7fe ff8a 	bl	8000f00 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ff4:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001ffe:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002008:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	699b      	ldr	r3, [r3, #24]
 8002010:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002014:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002018:	f64f 7341 	movw	r3, #65345	; 0xff41
 800201c:	4013      	ands	r3, r2
 800201e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002022:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002026:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002028:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800202c:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800202e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8002032:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002034:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002038:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800203a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800203e:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002040:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002044:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002046:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800204a:	4313      	orrs	r3, r2
 800204c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002058:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	699b      	ldr	r3, [r3, #24]
 8002060:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002064:	2001      	movs	r0, #1
 8002066:	f7fe ff4b 	bl	8000f00 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002072:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002074:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8002078:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	430a      	orrs	r2, r1
 8002082:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	69db      	ldr	r3, [r3, #28]
 800208a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800208e:	2001      	movs	r0, #1
 8002090:	f7fe ff36 	bl	8000f00 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800209c:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800209e:	2300      	movs	r3, #0
 80020a0:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80020a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020a6:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80020a8:	2300      	movs	r3, #0
 80020aa:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80020ac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80020b0:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80020b2:	2300      	movs	r3, #0
 80020b4:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80020b6:	2300      	movs	r3, #0
 80020b8:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80020ba:	2300      	movs	r3, #0
 80020bc:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80020be:	2300      	movs	r3, #0
 80020c0:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80020c2:	2304      	movs	r3, #4
 80020c4:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80020c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80020cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020d0:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80020d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80020d6:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80020d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020dc:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80020de:	2380      	movs	r3, #128	; 0x80
 80020e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 80020e2:	2300      	movs	r3, #0
 80020e4:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80020e6:	2300      	movs	r3, #0
 80020e8:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020f2:	699b      	ldr	r3, [r3, #24]
 80020f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80020f8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020fc:	4b3c      	ldr	r3, [pc, #240]	; (80021f0 <ETH_MACDMAConfig+0x388>)
 80020fe:	4013      	ands	r3, r2
 8002100:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002104:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8002106:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002108:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 800210a:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800210c:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 800210e:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8002110:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8002112:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8002114:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002116:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8002118:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 800211a:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800211c:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 800211e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8002120:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002122:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8002124:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002126:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800212a:	4313      	orrs	r3, r2
 800212c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002138:	461a      	mov	r2, r3
 800213a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800213e:	6193      	str	r3, [r2, #24]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002148:	699b      	ldr	r3, [r3, #24]
 800214a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800214e:	2001      	movs	r0, #1
 8002150:	f7fe fed6 	bl	8000f00 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800215c:	461a      	mov	r2, r3
 800215e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002162:	6193      	str	r3, [r2, #24]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002164:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8002166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002168:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800216a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 800216c:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 800216e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002170:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8002172:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002174:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8002176:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002178:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800217a:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 800217c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 800217e:	4313      	orrs	r3, r2
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	6812      	ldr	r2, [r2, #0]
 8002184:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002188:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800218c:	6013      	str	r3, [r2, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800219c:	2001      	movs	r0, #1
 800219e:	f7fe feaf 	bl	8000f00 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021aa:	461a      	mov	r2, r3
 80021ac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80021b0:	6013      	str	r3, [r2, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	699b      	ldr	r3, [r3, #24]
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d10d      	bne.n	80021d6 <ETH_MACDMAConfig+0x36e>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021c2:	69db      	ldr	r3, [r3, #28]
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	6812      	ldr	r2, [r2, #0]
 80021c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021d0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80021d4:	61d3      	str	r3, [r2, #28]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	695b      	ldr	r3, [r3, #20]
 80021da:	461a      	mov	r2, r3
 80021dc:	2100      	movs	r1, #0
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f000 f808 	bl	80021f4 <ETH_MACAddressConfig>
}
 80021e4:	bf00      	nop
 80021e6:	37c0      	adds	r7, #192	; 0xc0
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	ff20810f 	.word	0xff20810f
 80021f0:	f8de3f23 	.word	0xf8de3f23

080021f4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b087      	sub	sp, #28
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	60b9      	str	r1, [r7, #8]
 80021fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	3305      	adds	r3, #5
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	021b      	lsls	r3, r3, #8
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	3204      	adds	r2, #4
 800220c:	7812      	ldrb	r2, [r2, #0]
 800220e:	4313      	orrs	r3, r2
 8002210:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002212:	68ba      	ldr	r2, [r7, #8]
 8002214:	4b11      	ldr	r3, [pc, #68]	; (800225c <ETH_MACAddressConfig+0x68>)
 8002216:	4413      	add	r3, r2
 8002218:	461a      	mov	r2, r3
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	3303      	adds	r3, #3
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	061a      	lsls	r2, r3, #24
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	3302      	adds	r3, #2
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	041b      	lsls	r3, r3, #16
 800222e:	431a      	orrs	r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	3301      	adds	r3, #1
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	021b      	lsls	r3, r3, #8
 8002238:	4313      	orrs	r3, r2
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	7812      	ldrb	r2, [r2, #0]
 800223e:	4313      	orrs	r3, r2
 8002240:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002242:	68ba      	ldr	r2, [r7, #8]
 8002244:	4b06      	ldr	r3, [pc, #24]	; (8002260 <ETH_MACAddressConfig+0x6c>)
 8002246:	4413      	add	r3, r2
 8002248:	461a      	mov	r2, r3
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	6013      	str	r3, [r2, #0]
}
 800224e:	bf00      	nop
 8002250:	371c      	adds	r7, #28
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	40028040 	.word	0x40028040
 8002260:	40028044 	.word	0x40028044

08002264 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800226c:	2300      	movs	r3, #0
 800226e:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f042 0208 	orr.w	r2, r2, #8
 800227e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002288:	2001      	movs	r0, #1
 800228a:	f000 f8dd 	bl	8002448 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	68fa      	ldr	r2, [r7, #12]
 8002294:	601a      	str	r2, [r3, #0]
}
 8002296:	bf00      	nop
 8002298:	3710      	adds	r7, #16
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}

0800229e <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 800229e:	b580      	push	{r7, lr}
 80022a0:	b084      	sub	sp, #16
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80022a6:	2300      	movs	r3, #0
 80022a8:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f022 0208 	bic.w	r2, r2, #8
 80022b8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80022c2:	2001      	movs	r0, #1
 80022c4:	f000 f8c0 	bl	8002448 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	68fa      	ldr	r2, [r7, #12]
 80022ce:	601a      	str	r2, [r3, #0]
}
 80022d0:	bf00      	nop
 80022d2:	3710      	adds	r7, #16
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80022e0:	2300      	movs	r3, #0
 80022e2:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f042 0204 	orr.w	r2, r2, #4
 80022f2:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80022fc:	2001      	movs	r0, #1
 80022fe:	f000 f8a3 	bl	8002448 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	68fa      	ldr	r2, [r7, #12]
 8002308:	601a      	str	r2, [r3, #0]
}
 800230a:	bf00      	nop
 800230c:	3710      	adds	r7, #16
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}

08002312 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002312:	b580      	push	{r7, lr}
 8002314:	b084      	sub	sp, #16
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800231a:	2300      	movs	r3, #0
 800231c:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f022 0204 	bic.w	r2, r2, #4
 800232c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002336:	2001      	movs	r0, #1
 8002338:	f000 f886 	bl	8002448 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	68fa      	ldr	r2, [r7, #12]
 8002342:	601a      	str	r2, [r3, #0]
}
 8002344:	bf00      	nop
 8002346:	3710      	adds	r7, #16
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}

0800234c <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800235c:	699b      	ldr	r3, [r3, #24]
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	6812      	ldr	r2, [r2, #0]
 8002362:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002366:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800236a:	6193      	str	r3, [r2, #24]
}
 800236c:	bf00      	nop
 800236e:	370c      	adds	r7, #12
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr

08002378 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002388:	699b      	ldr	r3, [r3, #24]
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	6812      	ldr	r2, [r2, #0]
 800238e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002392:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002396:	6193      	str	r3, [r2, #24]
}
 8002398:	bf00      	nop
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023b4:	699b      	ldr	r3, [r3, #24]
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	6812      	ldr	r2, [r2, #0]
 80023ba:	f043 0302 	orr.w	r3, r3, #2
 80023be:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80023c2:	6193      	str	r3, [r2, #24]
}
 80023c4:	bf00      	nop
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023e0:	699b      	ldr	r3, [r3, #24]
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	6812      	ldr	r2, [r2, #0]
 80023e6:	f023 0302 	bic.w	r3, r3, #2
 80023ea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80023ee:	6193      	str	r3, [r2, #24]
}
 80023f0:	bf00      	nop
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr

080023fc <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002404:	2300      	movs	r3, #0
 8002406:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002410:	699b      	ldr	r3, [r3, #24]
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	6812      	ldr	r2, [r2, #0]
 8002416:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800241a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800241e:	6193      	str	r3, [r2, #24]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002428:	699b      	ldr	r3, [r3, #24]
 800242a:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800242c:	2001      	movs	r0, #1
 800242e:	f000 f80b 	bl	8002448 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800243c:	6193      	str	r3, [r2, #24]
}
 800243e:	bf00      	nop
 8002440:	3710      	adds	r7, #16
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
	...

08002448 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8002448:	b480      	push	{r7}
 800244a:	b085      	sub	sp, #20
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002450:	4b0b      	ldr	r3, [pc, #44]	; (8002480 <ETH_Delay+0x38>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a0b      	ldr	r2, [pc, #44]	; (8002484 <ETH_Delay+0x3c>)
 8002456:	fba2 2303 	umull	r2, r3, r2, r3
 800245a:	0a5b      	lsrs	r3, r3, #9
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	fb02 f303 	mul.w	r3, r2, r3
 8002462:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8002464:	bf00      	nop
  } 
  while (Delay --);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	1e5a      	subs	r2, r3, #1
 800246a:	60fa      	str	r2, [r7, #12]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d1f9      	bne.n	8002464 <ETH_Delay+0x1c>
}
 8002470:	bf00      	nop
 8002472:	bf00      	nop
 8002474:	3714      	adds	r7, #20
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	20000004 	.word	0x20000004
 8002484:	10624dd3 	.word	0x10624dd3

08002488 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002488:	b480      	push	{r7}
 800248a:	b089      	sub	sp, #36	; 0x24
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002492:	2300      	movs	r3, #0
 8002494:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002496:	2300      	movs	r3, #0
 8002498:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800249a:	2300      	movs	r3, #0
 800249c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800249e:	2300      	movs	r3, #0
 80024a0:	61fb      	str	r3, [r7, #28]
 80024a2:	e16b      	b.n	800277c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024a4:	2201      	movs	r2, #1
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	697a      	ldr	r2, [r7, #20]
 80024b4:	4013      	ands	r3, r2
 80024b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024b8:	693a      	ldr	r2, [r7, #16]
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	429a      	cmp	r2, r3
 80024be:	f040 815a 	bne.w	8002776 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f003 0303 	and.w	r3, r3, #3
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d005      	beq.n	80024da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d130      	bne.n	800253c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	2203      	movs	r2, #3
 80024e6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ea:	43db      	mvns	r3, r3
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	4013      	ands	r3, r2
 80024f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	68da      	ldr	r2, [r3, #12]
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	005b      	lsls	r3, r3, #1
 80024fa:	fa02 f303 	lsl.w	r3, r2, r3
 80024fe:	69ba      	ldr	r2, [r7, #24]
 8002500:	4313      	orrs	r3, r2
 8002502:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	69ba      	ldr	r2, [r7, #24]
 8002508:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002510:	2201      	movs	r2, #1
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	43db      	mvns	r3, r3
 800251a:	69ba      	ldr	r2, [r7, #24]
 800251c:	4013      	ands	r3, r2
 800251e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	091b      	lsrs	r3, r3, #4
 8002526:	f003 0201 	and.w	r2, r3, #1
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	fa02 f303 	lsl.w	r3, r2, r3
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	4313      	orrs	r3, r2
 8002534:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f003 0303 	and.w	r3, r3, #3
 8002544:	2b03      	cmp	r3, #3
 8002546:	d017      	beq.n	8002578 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	005b      	lsls	r3, r3, #1
 8002552:	2203      	movs	r2, #3
 8002554:	fa02 f303 	lsl.w	r3, r2, r3
 8002558:	43db      	mvns	r3, r3
 800255a:	69ba      	ldr	r2, [r7, #24]
 800255c:	4013      	ands	r3, r2
 800255e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	689a      	ldr	r2, [r3, #8]
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	005b      	lsls	r3, r3, #1
 8002568:	fa02 f303 	lsl.w	r3, r2, r3
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	4313      	orrs	r3, r2
 8002570:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	69ba      	ldr	r2, [r7, #24]
 8002576:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f003 0303 	and.w	r3, r3, #3
 8002580:	2b02      	cmp	r3, #2
 8002582:	d123      	bne.n	80025cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	08da      	lsrs	r2, r3, #3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	3208      	adds	r2, #8
 800258c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002590:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	f003 0307 	and.w	r3, r3, #7
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	220f      	movs	r2, #15
 800259c:	fa02 f303 	lsl.w	r3, r2, r3
 80025a0:	43db      	mvns	r3, r3
 80025a2:	69ba      	ldr	r2, [r7, #24]
 80025a4:	4013      	ands	r3, r2
 80025a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	691a      	ldr	r2, [r3, #16]
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	f003 0307 	and.w	r3, r3, #7
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	08da      	lsrs	r2, r3, #3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	3208      	adds	r2, #8
 80025c6:	69b9      	ldr	r1, [r7, #24]
 80025c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	005b      	lsls	r3, r3, #1
 80025d6:	2203      	movs	r2, #3
 80025d8:	fa02 f303 	lsl.w	r3, r2, r3
 80025dc:	43db      	mvns	r3, r3
 80025de:	69ba      	ldr	r2, [r7, #24]
 80025e0:	4013      	ands	r3, r2
 80025e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f003 0203 	and.w	r2, r3, #3
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002608:	2b00      	cmp	r3, #0
 800260a:	f000 80b4 	beq.w	8002776 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800260e:	2300      	movs	r3, #0
 8002610:	60fb      	str	r3, [r7, #12]
 8002612:	4b60      	ldr	r3, [pc, #384]	; (8002794 <HAL_GPIO_Init+0x30c>)
 8002614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002616:	4a5f      	ldr	r2, [pc, #380]	; (8002794 <HAL_GPIO_Init+0x30c>)
 8002618:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800261c:	6453      	str	r3, [r2, #68]	; 0x44
 800261e:	4b5d      	ldr	r3, [pc, #372]	; (8002794 <HAL_GPIO_Init+0x30c>)
 8002620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002622:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002626:	60fb      	str	r3, [r7, #12]
 8002628:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800262a:	4a5b      	ldr	r2, [pc, #364]	; (8002798 <HAL_GPIO_Init+0x310>)
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	089b      	lsrs	r3, r3, #2
 8002630:	3302      	adds	r3, #2
 8002632:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002636:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	f003 0303 	and.w	r3, r3, #3
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	220f      	movs	r2, #15
 8002642:	fa02 f303 	lsl.w	r3, r2, r3
 8002646:	43db      	mvns	r3, r3
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	4013      	ands	r3, r2
 800264c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a52      	ldr	r2, [pc, #328]	; (800279c <HAL_GPIO_Init+0x314>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d02b      	beq.n	80026ae <HAL_GPIO_Init+0x226>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a51      	ldr	r2, [pc, #324]	; (80027a0 <HAL_GPIO_Init+0x318>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d025      	beq.n	80026aa <HAL_GPIO_Init+0x222>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a50      	ldr	r2, [pc, #320]	; (80027a4 <HAL_GPIO_Init+0x31c>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d01f      	beq.n	80026a6 <HAL_GPIO_Init+0x21e>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a4f      	ldr	r2, [pc, #316]	; (80027a8 <HAL_GPIO_Init+0x320>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d019      	beq.n	80026a2 <HAL_GPIO_Init+0x21a>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a4e      	ldr	r2, [pc, #312]	; (80027ac <HAL_GPIO_Init+0x324>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d013      	beq.n	800269e <HAL_GPIO_Init+0x216>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a4d      	ldr	r2, [pc, #308]	; (80027b0 <HAL_GPIO_Init+0x328>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d00d      	beq.n	800269a <HAL_GPIO_Init+0x212>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a4c      	ldr	r2, [pc, #304]	; (80027b4 <HAL_GPIO_Init+0x32c>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d007      	beq.n	8002696 <HAL_GPIO_Init+0x20e>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a4b      	ldr	r2, [pc, #300]	; (80027b8 <HAL_GPIO_Init+0x330>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d101      	bne.n	8002692 <HAL_GPIO_Init+0x20a>
 800268e:	2307      	movs	r3, #7
 8002690:	e00e      	b.n	80026b0 <HAL_GPIO_Init+0x228>
 8002692:	2308      	movs	r3, #8
 8002694:	e00c      	b.n	80026b0 <HAL_GPIO_Init+0x228>
 8002696:	2306      	movs	r3, #6
 8002698:	e00a      	b.n	80026b0 <HAL_GPIO_Init+0x228>
 800269a:	2305      	movs	r3, #5
 800269c:	e008      	b.n	80026b0 <HAL_GPIO_Init+0x228>
 800269e:	2304      	movs	r3, #4
 80026a0:	e006      	b.n	80026b0 <HAL_GPIO_Init+0x228>
 80026a2:	2303      	movs	r3, #3
 80026a4:	e004      	b.n	80026b0 <HAL_GPIO_Init+0x228>
 80026a6:	2302      	movs	r3, #2
 80026a8:	e002      	b.n	80026b0 <HAL_GPIO_Init+0x228>
 80026aa:	2301      	movs	r3, #1
 80026ac:	e000      	b.n	80026b0 <HAL_GPIO_Init+0x228>
 80026ae:	2300      	movs	r3, #0
 80026b0:	69fa      	ldr	r2, [r7, #28]
 80026b2:	f002 0203 	and.w	r2, r2, #3
 80026b6:	0092      	lsls	r2, r2, #2
 80026b8:	4093      	lsls	r3, r2
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	4313      	orrs	r3, r2
 80026be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026c0:	4935      	ldr	r1, [pc, #212]	; (8002798 <HAL_GPIO_Init+0x310>)
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	089b      	lsrs	r3, r3, #2
 80026c6:	3302      	adds	r3, #2
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026ce:	4b3b      	ldr	r3, [pc, #236]	; (80027bc <HAL_GPIO_Init+0x334>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	43db      	mvns	r3, r3
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	4013      	ands	r3, r2
 80026dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d003      	beq.n	80026f2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026f2:	4a32      	ldr	r2, [pc, #200]	; (80027bc <HAL_GPIO_Init+0x334>)
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80026f8:	4b30      	ldr	r3, [pc, #192]	; (80027bc <HAL_GPIO_Init+0x334>)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	43db      	mvns	r3, r3
 8002702:	69ba      	ldr	r2, [r7, #24]
 8002704:	4013      	ands	r3, r2
 8002706:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d003      	beq.n	800271c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	4313      	orrs	r3, r2
 800271a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800271c:	4a27      	ldr	r2, [pc, #156]	; (80027bc <HAL_GPIO_Init+0x334>)
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002722:	4b26      	ldr	r3, [pc, #152]	; (80027bc <HAL_GPIO_Init+0x334>)
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	43db      	mvns	r3, r3
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	4013      	ands	r3, r2
 8002730:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d003      	beq.n	8002746 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	4313      	orrs	r3, r2
 8002744:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002746:	4a1d      	ldr	r2, [pc, #116]	; (80027bc <HAL_GPIO_Init+0x334>)
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800274c:	4b1b      	ldr	r3, [pc, #108]	; (80027bc <HAL_GPIO_Init+0x334>)
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	43db      	mvns	r3, r3
 8002756:	69ba      	ldr	r2, [r7, #24]
 8002758:	4013      	ands	r3, r2
 800275a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d003      	beq.n	8002770 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002768:	69ba      	ldr	r2, [r7, #24]
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	4313      	orrs	r3, r2
 800276e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002770:	4a12      	ldr	r2, [pc, #72]	; (80027bc <HAL_GPIO_Init+0x334>)
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	3301      	adds	r3, #1
 800277a:	61fb      	str	r3, [r7, #28]
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	2b0f      	cmp	r3, #15
 8002780:	f67f ae90 	bls.w	80024a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002784:	bf00      	nop
 8002786:	bf00      	nop
 8002788:	3724      	adds	r7, #36	; 0x24
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	40023800 	.word	0x40023800
 8002798:	40013800 	.word	0x40013800
 800279c:	40020000 	.word	0x40020000
 80027a0:	40020400 	.word	0x40020400
 80027a4:	40020800 	.word	0x40020800
 80027a8:	40020c00 	.word	0x40020c00
 80027ac:	40021000 	.word	0x40021000
 80027b0:	40021400 	.word	0x40021400
 80027b4:	40021800 	.word	0x40021800
 80027b8:	40021c00 	.word	0x40021c00
 80027bc:	40013c00 	.word	0x40013c00

080027c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b086      	sub	sp, #24
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d101      	bne.n	80027d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e267      	b.n	8002ca2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0301 	and.w	r3, r3, #1
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d075      	beq.n	80028ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027de:	4b88      	ldr	r3, [pc, #544]	; (8002a00 <HAL_RCC_OscConfig+0x240>)
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f003 030c 	and.w	r3, r3, #12
 80027e6:	2b04      	cmp	r3, #4
 80027e8:	d00c      	beq.n	8002804 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027ea:	4b85      	ldr	r3, [pc, #532]	; (8002a00 <HAL_RCC_OscConfig+0x240>)
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027f2:	2b08      	cmp	r3, #8
 80027f4:	d112      	bne.n	800281c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027f6:	4b82      	ldr	r3, [pc, #520]	; (8002a00 <HAL_RCC_OscConfig+0x240>)
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002802:	d10b      	bne.n	800281c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002804:	4b7e      	ldr	r3, [pc, #504]	; (8002a00 <HAL_RCC_OscConfig+0x240>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d05b      	beq.n	80028c8 <HAL_RCC_OscConfig+0x108>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d157      	bne.n	80028c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e242      	b.n	8002ca2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002824:	d106      	bne.n	8002834 <HAL_RCC_OscConfig+0x74>
 8002826:	4b76      	ldr	r3, [pc, #472]	; (8002a00 <HAL_RCC_OscConfig+0x240>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a75      	ldr	r2, [pc, #468]	; (8002a00 <HAL_RCC_OscConfig+0x240>)
 800282c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002830:	6013      	str	r3, [r2, #0]
 8002832:	e01d      	b.n	8002870 <HAL_RCC_OscConfig+0xb0>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800283c:	d10c      	bne.n	8002858 <HAL_RCC_OscConfig+0x98>
 800283e:	4b70      	ldr	r3, [pc, #448]	; (8002a00 <HAL_RCC_OscConfig+0x240>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a6f      	ldr	r2, [pc, #444]	; (8002a00 <HAL_RCC_OscConfig+0x240>)
 8002844:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002848:	6013      	str	r3, [r2, #0]
 800284a:	4b6d      	ldr	r3, [pc, #436]	; (8002a00 <HAL_RCC_OscConfig+0x240>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a6c      	ldr	r2, [pc, #432]	; (8002a00 <HAL_RCC_OscConfig+0x240>)
 8002850:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002854:	6013      	str	r3, [r2, #0]
 8002856:	e00b      	b.n	8002870 <HAL_RCC_OscConfig+0xb0>
 8002858:	4b69      	ldr	r3, [pc, #420]	; (8002a00 <HAL_RCC_OscConfig+0x240>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a68      	ldr	r2, [pc, #416]	; (8002a00 <HAL_RCC_OscConfig+0x240>)
 800285e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002862:	6013      	str	r3, [r2, #0]
 8002864:	4b66      	ldr	r3, [pc, #408]	; (8002a00 <HAL_RCC_OscConfig+0x240>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a65      	ldr	r2, [pc, #404]	; (8002a00 <HAL_RCC_OscConfig+0x240>)
 800286a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800286e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d013      	beq.n	80028a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002878:	f7fe fb36 	bl	8000ee8 <HAL_GetTick>
 800287c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800287e:	e008      	b.n	8002892 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002880:	f7fe fb32 	bl	8000ee8 <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	2b64      	cmp	r3, #100	; 0x64
 800288c:	d901      	bls.n	8002892 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e207      	b.n	8002ca2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002892:	4b5b      	ldr	r3, [pc, #364]	; (8002a00 <HAL_RCC_OscConfig+0x240>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d0f0      	beq.n	8002880 <HAL_RCC_OscConfig+0xc0>
 800289e:	e014      	b.n	80028ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a0:	f7fe fb22 	bl	8000ee8 <HAL_GetTick>
 80028a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028a6:	e008      	b.n	80028ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028a8:	f7fe fb1e 	bl	8000ee8 <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	2b64      	cmp	r3, #100	; 0x64
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e1f3      	b.n	8002ca2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ba:	4b51      	ldr	r3, [pc, #324]	; (8002a00 <HAL_RCC_OscConfig+0x240>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d1f0      	bne.n	80028a8 <HAL_RCC_OscConfig+0xe8>
 80028c6:	e000      	b.n	80028ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 0302 	and.w	r3, r3, #2
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d063      	beq.n	800299e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028d6:	4b4a      	ldr	r3, [pc, #296]	; (8002a00 <HAL_RCC_OscConfig+0x240>)
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f003 030c 	and.w	r3, r3, #12
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d00b      	beq.n	80028fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028e2:	4b47      	ldr	r3, [pc, #284]	; (8002a00 <HAL_RCC_OscConfig+0x240>)
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028ea:	2b08      	cmp	r3, #8
 80028ec:	d11c      	bne.n	8002928 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028ee:	4b44      	ldr	r3, [pc, #272]	; (8002a00 <HAL_RCC_OscConfig+0x240>)
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d116      	bne.n	8002928 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028fa:	4b41      	ldr	r3, [pc, #260]	; (8002a00 <HAL_RCC_OscConfig+0x240>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0302 	and.w	r3, r3, #2
 8002902:	2b00      	cmp	r3, #0
 8002904:	d005      	beq.n	8002912 <HAL_RCC_OscConfig+0x152>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	2b01      	cmp	r3, #1
 800290c:	d001      	beq.n	8002912 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e1c7      	b.n	8002ca2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002912:	4b3b      	ldr	r3, [pc, #236]	; (8002a00 <HAL_RCC_OscConfig+0x240>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	00db      	lsls	r3, r3, #3
 8002920:	4937      	ldr	r1, [pc, #220]	; (8002a00 <HAL_RCC_OscConfig+0x240>)
 8002922:	4313      	orrs	r3, r2
 8002924:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002926:	e03a      	b.n	800299e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d020      	beq.n	8002972 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002930:	4b34      	ldr	r3, [pc, #208]	; (8002a04 <HAL_RCC_OscConfig+0x244>)
 8002932:	2201      	movs	r2, #1
 8002934:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002936:	f7fe fad7 	bl	8000ee8 <HAL_GetTick>
 800293a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800293c:	e008      	b.n	8002950 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800293e:	f7fe fad3 	bl	8000ee8 <HAL_GetTick>
 8002942:	4602      	mov	r2, r0
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	2b02      	cmp	r3, #2
 800294a:	d901      	bls.n	8002950 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800294c:	2303      	movs	r3, #3
 800294e:	e1a8      	b.n	8002ca2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002950:	4b2b      	ldr	r3, [pc, #172]	; (8002a00 <HAL_RCC_OscConfig+0x240>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0302 	and.w	r3, r3, #2
 8002958:	2b00      	cmp	r3, #0
 800295a:	d0f0      	beq.n	800293e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800295c:	4b28      	ldr	r3, [pc, #160]	; (8002a00 <HAL_RCC_OscConfig+0x240>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	691b      	ldr	r3, [r3, #16]
 8002968:	00db      	lsls	r3, r3, #3
 800296a:	4925      	ldr	r1, [pc, #148]	; (8002a00 <HAL_RCC_OscConfig+0x240>)
 800296c:	4313      	orrs	r3, r2
 800296e:	600b      	str	r3, [r1, #0]
 8002970:	e015      	b.n	800299e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002972:	4b24      	ldr	r3, [pc, #144]	; (8002a04 <HAL_RCC_OscConfig+0x244>)
 8002974:	2200      	movs	r2, #0
 8002976:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002978:	f7fe fab6 	bl	8000ee8 <HAL_GetTick>
 800297c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800297e:	e008      	b.n	8002992 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002980:	f7fe fab2 	bl	8000ee8 <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	2b02      	cmp	r3, #2
 800298c:	d901      	bls.n	8002992 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e187      	b.n	8002ca2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002992:	4b1b      	ldr	r3, [pc, #108]	; (8002a00 <HAL_RCC_OscConfig+0x240>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	2b00      	cmp	r3, #0
 800299c:	d1f0      	bne.n	8002980 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0308 	and.w	r3, r3, #8
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d036      	beq.n	8002a18 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	695b      	ldr	r3, [r3, #20]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d016      	beq.n	80029e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029b2:	4b15      	ldr	r3, [pc, #84]	; (8002a08 <HAL_RCC_OscConfig+0x248>)
 80029b4:	2201      	movs	r2, #1
 80029b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029b8:	f7fe fa96 	bl	8000ee8 <HAL_GetTick>
 80029bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029be:	e008      	b.n	80029d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029c0:	f7fe fa92 	bl	8000ee8 <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d901      	bls.n	80029d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e167      	b.n	8002ca2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029d2:	4b0b      	ldr	r3, [pc, #44]	; (8002a00 <HAL_RCC_OscConfig+0x240>)
 80029d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d0f0      	beq.n	80029c0 <HAL_RCC_OscConfig+0x200>
 80029de:	e01b      	b.n	8002a18 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029e0:	4b09      	ldr	r3, [pc, #36]	; (8002a08 <HAL_RCC_OscConfig+0x248>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029e6:	f7fe fa7f 	bl	8000ee8 <HAL_GetTick>
 80029ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029ec:	e00e      	b.n	8002a0c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029ee:	f7fe fa7b 	bl	8000ee8 <HAL_GetTick>
 80029f2:	4602      	mov	r2, r0
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d907      	bls.n	8002a0c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	e150      	b.n	8002ca2 <HAL_RCC_OscConfig+0x4e2>
 8002a00:	40023800 	.word	0x40023800
 8002a04:	42470000 	.word	0x42470000
 8002a08:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a0c:	4b88      	ldr	r3, [pc, #544]	; (8002c30 <HAL_RCC_OscConfig+0x470>)
 8002a0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a10:	f003 0302 	and.w	r3, r3, #2
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d1ea      	bne.n	80029ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0304 	and.w	r3, r3, #4
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	f000 8097 	beq.w	8002b54 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a26:	2300      	movs	r3, #0
 8002a28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a2a:	4b81      	ldr	r3, [pc, #516]	; (8002c30 <HAL_RCC_OscConfig+0x470>)
 8002a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d10f      	bne.n	8002a56 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a36:	2300      	movs	r3, #0
 8002a38:	60bb      	str	r3, [r7, #8]
 8002a3a:	4b7d      	ldr	r3, [pc, #500]	; (8002c30 <HAL_RCC_OscConfig+0x470>)
 8002a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3e:	4a7c      	ldr	r2, [pc, #496]	; (8002c30 <HAL_RCC_OscConfig+0x470>)
 8002a40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a44:	6413      	str	r3, [r2, #64]	; 0x40
 8002a46:	4b7a      	ldr	r3, [pc, #488]	; (8002c30 <HAL_RCC_OscConfig+0x470>)
 8002a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a4e:	60bb      	str	r3, [r7, #8]
 8002a50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a52:	2301      	movs	r3, #1
 8002a54:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a56:	4b77      	ldr	r3, [pc, #476]	; (8002c34 <HAL_RCC_OscConfig+0x474>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d118      	bne.n	8002a94 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a62:	4b74      	ldr	r3, [pc, #464]	; (8002c34 <HAL_RCC_OscConfig+0x474>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a73      	ldr	r2, [pc, #460]	; (8002c34 <HAL_RCC_OscConfig+0x474>)
 8002a68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a6e:	f7fe fa3b 	bl	8000ee8 <HAL_GetTick>
 8002a72:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a74:	e008      	b.n	8002a88 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a76:	f7fe fa37 	bl	8000ee8 <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d901      	bls.n	8002a88 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e10c      	b.n	8002ca2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a88:	4b6a      	ldr	r3, [pc, #424]	; (8002c34 <HAL_RCC_OscConfig+0x474>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d0f0      	beq.n	8002a76 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d106      	bne.n	8002aaa <HAL_RCC_OscConfig+0x2ea>
 8002a9c:	4b64      	ldr	r3, [pc, #400]	; (8002c30 <HAL_RCC_OscConfig+0x470>)
 8002a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa0:	4a63      	ldr	r2, [pc, #396]	; (8002c30 <HAL_RCC_OscConfig+0x470>)
 8002aa2:	f043 0301 	orr.w	r3, r3, #1
 8002aa6:	6713      	str	r3, [r2, #112]	; 0x70
 8002aa8:	e01c      	b.n	8002ae4 <HAL_RCC_OscConfig+0x324>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	2b05      	cmp	r3, #5
 8002ab0:	d10c      	bne.n	8002acc <HAL_RCC_OscConfig+0x30c>
 8002ab2:	4b5f      	ldr	r3, [pc, #380]	; (8002c30 <HAL_RCC_OscConfig+0x470>)
 8002ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ab6:	4a5e      	ldr	r2, [pc, #376]	; (8002c30 <HAL_RCC_OscConfig+0x470>)
 8002ab8:	f043 0304 	orr.w	r3, r3, #4
 8002abc:	6713      	str	r3, [r2, #112]	; 0x70
 8002abe:	4b5c      	ldr	r3, [pc, #368]	; (8002c30 <HAL_RCC_OscConfig+0x470>)
 8002ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ac2:	4a5b      	ldr	r2, [pc, #364]	; (8002c30 <HAL_RCC_OscConfig+0x470>)
 8002ac4:	f043 0301 	orr.w	r3, r3, #1
 8002ac8:	6713      	str	r3, [r2, #112]	; 0x70
 8002aca:	e00b      	b.n	8002ae4 <HAL_RCC_OscConfig+0x324>
 8002acc:	4b58      	ldr	r3, [pc, #352]	; (8002c30 <HAL_RCC_OscConfig+0x470>)
 8002ace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ad0:	4a57      	ldr	r2, [pc, #348]	; (8002c30 <HAL_RCC_OscConfig+0x470>)
 8002ad2:	f023 0301 	bic.w	r3, r3, #1
 8002ad6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ad8:	4b55      	ldr	r3, [pc, #340]	; (8002c30 <HAL_RCC_OscConfig+0x470>)
 8002ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002adc:	4a54      	ldr	r2, [pc, #336]	; (8002c30 <HAL_RCC_OscConfig+0x470>)
 8002ade:	f023 0304 	bic.w	r3, r3, #4
 8002ae2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d015      	beq.n	8002b18 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aec:	f7fe f9fc 	bl	8000ee8 <HAL_GetTick>
 8002af0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002af2:	e00a      	b.n	8002b0a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002af4:	f7fe f9f8 	bl	8000ee8 <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e0cb      	b.n	8002ca2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b0a:	4b49      	ldr	r3, [pc, #292]	; (8002c30 <HAL_RCC_OscConfig+0x470>)
 8002b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d0ee      	beq.n	8002af4 <HAL_RCC_OscConfig+0x334>
 8002b16:	e014      	b.n	8002b42 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b18:	f7fe f9e6 	bl	8000ee8 <HAL_GetTick>
 8002b1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b1e:	e00a      	b.n	8002b36 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b20:	f7fe f9e2 	bl	8000ee8 <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d901      	bls.n	8002b36 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e0b5      	b.n	8002ca2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b36:	4b3e      	ldr	r3, [pc, #248]	; (8002c30 <HAL_RCC_OscConfig+0x470>)
 8002b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d1ee      	bne.n	8002b20 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b42:	7dfb      	ldrb	r3, [r7, #23]
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d105      	bne.n	8002b54 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b48:	4b39      	ldr	r3, [pc, #228]	; (8002c30 <HAL_RCC_OscConfig+0x470>)
 8002b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4c:	4a38      	ldr	r2, [pc, #224]	; (8002c30 <HAL_RCC_OscConfig+0x470>)
 8002b4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b52:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	699b      	ldr	r3, [r3, #24]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	f000 80a1 	beq.w	8002ca0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b5e:	4b34      	ldr	r3, [pc, #208]	; (8002c30 <HAL_RCC_OscConfig+0x470>)
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f003 030c 	and.w	r3, r3, #12
 8002b66:	2b08      	cmp	r3, #8
 8002b68:	d05c      	beq.n	8002c24 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	699b      	ldr	r3, [r3, #24]
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d141      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b72:	4b31      	ldr	r3, [pc, #196]	; (8002c38 <HAL_RCC_OscConfig+0x478>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b78:	f7fe f9b6 	bl	8000ee8 <HAL_GetTick>
 8002b7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b7e:	e008      	b.n	8002b92 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b80:	f7fe f9b2 	bl	8000ee8 <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e087      	b.n	8002ca2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b92:	4b27      	ldr	r3, [pc, #156]	; (8002c30 <HAL_RCC_OscConfig+0x470>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d1f0      	bne.n	8002b80 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	69da      	ldr	r2, [r3, #28]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a1b      	ldr	r3, [r3, #32]
 8002ba6:	431a      	orrs	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bac:	019b      	lsls	r3, r3, #6
 8002bae:	431a      	orrs	r2, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb4:	085b      	lsrs	r3, r3, #1
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	041b      	lsls	r3, r3, #16
 8002bba:	431a      	orrs	r2, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc0:	061b      	lsls	r3, r3, #24
 8002bc2:	491b      	ldr	r1, [pc, #108]	; (8002c30 <HAL_RCC_OscConfig+0x470>)
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bc8:	4b1b      	ldr	r3, [pc, #108]	; (8002c38 <HAL_RCC_OscConfig+0x478>)
 8002bca:	2201      	movs	r2, #1
 8002bcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bce:	f7fe f98b 	bl	8000ee8 <HAL_GetTick>
 8002bd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bd4:	e008      	b.n	8002be8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bd6:	f7fe f987 	bl	8000ee8 <HAL_GetTick>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d901      	bls.n	8002be8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002be4:	2303      	movs	r3, #3
 8002be6:	e05c      	b.n	8002ca2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002be8:	4b11      	ldr	r3, [pc, #68]	; (8002c30 <HAL_RCC_OscConfig+0x470>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d0f0      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x416>
 8002bf4:	e054      	b.n	8002ca0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bf6:	4b10      	ldr	r3, [pc, #64]	; (8002c38 <HAL_RCC_OscConfig+0x478>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bfc:	f7fe f974 	bl	8000ee8 <HAL_GetTick>
 8002c00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c02:	e008      	b.n	8002c16 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c04:	f7fe f970 	bl	8000ee8 <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d901      	bls.n	8002c16 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e045      	b.n	8002ca2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c16:	4b06      	ldr	r3, [pc, #24]	; (8002c30 <HAL_RCC_OscConfig+0x470>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d1f0      	bne.n	8002c04 <HAL_RCC_OscConfig+0x444>
 8002c22:	e03d      	b.n	8002ca0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	699b      	ldr	r3, [r3, #24]
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d107      	bne.n	8002c3c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e038      	b.n	8002ca2 <HAL_RCC_OscConfig+0x4e2>
 8002c30:	40023800 	.word	0x40023800
 8002c34:	40007000 	.word	0x40007000
 8002c38:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c3c:	4b1b      	ldr	r3, [pc, #108]	; (8002cac <HAL_RCC_OscConfig+0x4ec>)
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	699b      	ldr	r3, [r3, #24]
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d028      	beq.n	8002c9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d121      	bne.n	8002c9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d11a      	bne.n	8002c9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c66:	68fa      	ldr	r2, [r7, #12]
 8002c68:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c72:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d111      	bne.n	8002c9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c82:	085b      	lsrs	r3, r3, #1
 8002c84:	3b01      	subs	r3, #1
 8002c86:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d107      	bne.n	8002c9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c96:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d001      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e000      	b.n	8002ca2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3718      	adds	r7, #24
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	40023800 	.word	0x40023800

08002cb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b084      	sub	sp, #16
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d101      	bne.n	8002cc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e0cc      	b.n	8002e5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cc4:	4b68      	ldr	r3, [pc, #416]	; (8002e68 <HAL_RCC_ClockConfig+0x1b8>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0307 	and.w	r3, r3, #7
 8002ccc:	683a      	ldr	r2, [r7, #0]
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d90c      	bls.n	8002cec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cd2:	4b65      	ldr	r3, [pc, #404]	; (8002e68 <HAL_RCC_ClockConfig+0x1b8>)
 8002cd4:	683a      	ldr	r2, [r7, #0]
 8002cd6:	b2d2      	uxtb	r2, r2
 8002cd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cda:	4b63      	ldr	r3, [pc, #396]	; (8002e68 <HAL_RCC_ClockConfig+0x1b8>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0307 	and.w	r3, r3, #7
 8002ce2:	683a      	ldr	r2, [r7, #0]
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d001      	beq.n	8002cec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e0b8      	b.n	8002e5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0302 	and.w	r3, r3, #2
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d020      	beq.n	8002d3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0304 	and.w	r3, r3, #4
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d005      	beq.n	8002d10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d04:	4b59      	ldr	r3, [pc, #356]	; (8002e6c <HAL_RCC_ClockConfig+0x1bc>)
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	4a58      	ldr	r2, [pc, #352]	; (8002e6c <HAL_RCC_ClockConfig+0x1bc>)
 8002d0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d0e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0308 	and.w	r3, r3, #8
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d005      	beq.n	8002d28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d1c:	4b53      	ldr	r3, [pc, #332]	; (8002e6c <HAL_RCC_ClockConfig+0x1bc>)
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	4a52      	ldr	r2, [pc, #328]	; (8002e6c <HAL_RCC_ClockConfig+0x1bc>)
 8002d22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d28:	4b50      	ldr	r3, [pc, #320]	; (8002e6c <HAL_RCC_ClockConfig+0x1bc>)
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	494d      	ldr	r1, [pc, #308]	; (8002e6c <HAL_RCC_ClockConfig+0x1bc>)
 8002d36:	4313      	orrs	r3, r2
 8002d38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0301 	and.w	r3, r3, #1
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d044      	beq.n	8002dd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d107      	bne.n	8002d5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d4e:	4b47      	ldr	r3, [pc, #284]	; (8002e6c <HAL_RCC_ClockConfig+0x1bc>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d119      	bne.n	8002d8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e07f      	b.n	8002e5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d003      	beq.n	8002d6e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d6a:	2b03      	cmp	r3, #3
 8002d6c:	d107      	bne.n	8002d7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d6e:	4b3f      	ldr	r3, [pc, #252]	; (8002e6c <HAL_RCC_ClockConfig+0x1bc>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d109      	bne.n	8002d8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e06f      	b.n	8002e5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d7e:	4b3b      	ldr	r3, [pc, #236]	; (8002e6c <HAL_RCC_ClockConfig+0x1bc>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0302 	and.w	r3, r3, #2
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d101      	bne.n	8002d8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e067      	b.n	8002e5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d8e:	4b37      	ldr	r3, [pc, #220]	; (8002e6c <HAL_RCC_ClockConfig+0x1bc>)
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	f023 0203 	bic.w	r2, r3, #3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	4934      	ldr	r1, [pc, #208]	; (8002e6c <HAL_RCC_ClockConfig+0x1bc>)
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002da0:	f7fe f8a2 	bl	8000ee8 <HAL_GetTick>
 8002da4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002da6:	e00a      	b.n	8002dbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002da8:	f7fe f89e 	bl	8000ee8 <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d901      	bls.n	8002dbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e04f      	b.n	8002e5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dbe:	4b2b      	ldr	r3, [pc, #172]	; (8002e6c <HAL_RCC_ClockConfig+0x1bc>)
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	f003 020c 	and.w	r2, r3, #12
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d1eb      	bne.n	8002da8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002dd0:	4b25      	ldr	r3, [pc, #148]	; (8002e68 <HAL_RCC_ClockConfig+0x1b8>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0307 	and.w	r3, r3, #7
 8002dd8:	683a      	ldr	r2, [r7, #0]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d20c      	bcs.n	8002df8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dde:	4b22      	ldr	r3, [pc, #136]	; (8002e68 <HAL_RCC_ClockConfig+0x1b8>)
 8002de0:	683a      	ldr	r2, [r7, #0]
 8002de2:	b2d2      	uxtb	r2, r2
 8002de4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002de6:	4b20      	ldr	r3, [pc, #128]	; (8002e68 <HAL_RCC_ClockConfig+0x1b8>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0307 	and.w	r3, r3, #7
 8002dee:	683a      	ldr	r2, [r7, #0]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d001      	beq.n	8002df8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e032      	b.n	8002e5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0304 	and.w	r3, r3, #4
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d008      	beq.n	8002e16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e04:	4b19      	ldr	r3, [pc, #100]	; (8002e6c <HAL_RCC_ClockConfig+0x1bc>)
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	4916      	ldr	r1, [pc, #88]	; (8002e6c <HAL_RCC_ClockConfig+0x1bc>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0308 	and.w	r3, r3, #8
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d009      	beq.n	8002e36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e22:	4b12      	ldr	r3, [pc, #72]	; (8002e6c <HAL_RCC_ClockConfig+0x1bc>)
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	00db      	lsls	r3, r3, #3
 8002e30:	490e      	ldr	r1, [pc, #56]	; (8002e6c <HAL_RCC_ClockConfig+0x1bc>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e36:	f000 f821 	bl	8002e7c <HAL_RCC_GetSysClockFreq>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	4b0b      	ldr	r3, [pc, #44]	; (8002e6c <HAL_RCC_ClockConfig+0x1bc>)
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	091b      	lsrs	r3, r3, #4
 8002e42:	f003 030f 	and.w	r3, r3, #15
 8002e46:	490a      	ldr	r1, [pc, #40]	; (8002e70 <HAL_RCC_ClockConfig+0x1c0>)
 8002e48:	5ccb      	ldrb	r3, [r1, r3]
 8002e4a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e4e:	4a09      	ldr	r2, [pc, #36]	; (8002e74 <HAL_RCC_ClockConfig+0x1c4>)
 8002e50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e52:	4b09      	ldr	r3, [pc, #36]	; (8002e78 <HAL_RCC_ClockConfig+0x1c8>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7fe f802 	bl	8000e60 <HAL_InitTick>

  return HAL_OK;
 8002e5c:	2300      	movs	r3, #0
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3710      	adds	r7, #16
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	40023c00 	.word	0x40023c00
 8002e6c:	40023800 	.word	0x40023800
 8002e70:	0801b1fc 	.word	0x0801b1fc
 8002e74:	20000004 	.word	0x20000004
 8002e78:	20000008 	.word	0x20000008

08002e7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e80:	b094      	sub	sp, #80	; 0x50
 8002e82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002e84:	2300      	movs	r3, #0
 8002e86:	647b      	str	r3, [r7, #68]	; 0x44
 8002e88:	2300      	movs	r3, #0
 8002e8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002e90:	2300      	movs	r3, #0
 8002e92:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e94:	4b79      	ldr	r3, [pc, #484]	; (800307c <HAL_RCC_GetSysClockFreq+0x200>)
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	f003 030c 	and.w	r3, r3, #12
 8002e9c:	2b08      	cmp	r3, #8
 8002e9e:	d00d      	beq.n	8002ebc <HAL_RCC_GetSysClockFreq+0x40>
 8002ea0:	2b08      	cmp	r3, #8
 8002ea2:	f200 80e1 	bhi.w	8003068 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d002      	beq.n	8002eb0 <HAL_RCC_GetSysClockFreq+0x34>
 8002eaa:	2b04      	cmp	r3, #4
 8002eac:	d003      	beq.n	8002eb6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002eae:	e0db      	b.n	8003068 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002eb0:	4b73      	ldr	r3, [pc, #460]	; (8003080 <HAL_RCC_GetSysClockFreq+0x204>)
 8002eb2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002eb4:	e0db      	b.n	800306e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002eb6:	4b73      	ldr	r3, [pc, #460]	; (8003084 <HAL_RCC_GetSysClockFreq+0x208>)
 8002eb8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002eba:	e0d8      	b.n	800306e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ebc:	4b6f      	ldr	r3, [pc, #444]	; (800307c <HAL_RCC_GetSysClockFreq+0x200>)
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ec4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ec6:	4b6d      	ldr	r3, [pc, #436]	; (800307c <HAL_RCC_GetSysClockFreq+0x200>)
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d063      	beq.n	8002f9a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ed2:	4b6a      	ldr	r3, [pc, #424]	; (800307c <HAL_RCC_GetSysClockFreq+0x200>)
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	099b      	lsrs	r3, r3, #6
 8002ed8:	2200      	movs	r2, #0
 8002eda:	63bb      	str	r3, [r7, #56]	; 0x38
 8002edc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ee0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ee4:	633b      	str	r3, [r7, #48]	; 0x30
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	637b      	str	r3, [r7, #52]	; 0x34
 8002eea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002eee:	4622      	mov	r2, r4
 8002ef0:	462b      	mov	r3, r5
 8002ef2:	f04f 0000 	mov.w	r0, #0
 8002ef6:	f04f 0100 	mov.w	r1, #0
 8002efa:	0159      	lsls	r1, r3, #5
 8002efc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f00:	0150      	lsls	r0, r2, #5
 8002f02:	4602      	mov	r2, r0
 8002f04:	460b      	mov	r3, r1
 8002f06:	4621      	mov	r1, r4
 8002f08:	1a51      	subs	r1, r2, r1
 8002f0a:	6139      	str	r1, [r7, #16]
 8002f0c:	4629      	mov	r1, r5
 8002f0e:	eb63 0301 	sbc.w	r3, r3, r1
 8002f12:	617b      	str	r3, [r7, #20]
 8002f14:	f04f 0200 	mov.w	r2, #0
 8002f18:	f04f 0300 	mov.w	r3, #0
 8002f1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f20:	4659      	mov	r1, fp
 8002f22:	018b      	lsls	r3, r1, #6
 8002f24:	4651      	mov	r1, sl
 8002f26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f2a:	4651      	mov	r1, sl
 8002f2c:	018a      	lsls	r2, r1, #6
 8002f2e:	4651      	mov	r1, sl
 8002f30:	ebb2 0801 	subs.w	r8, r2, r1
 8002f34:	4659      	mov	r1, fp
 8002f36:	eb63 0901 	sbc.w	r9, r3, r1
 8002f3a:	f04f 0200 	mov.w	r2, #0
 8002f3e:	f04f 0300 	mov.w	r3, #0
 8002f42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f4e:	4690      	mov	r8, r2
 8002f50:	4699      	mov	r9, r3
 8002f52:	4623      	mov	r3, r4
 8002f54:	eb18 0303 	adds.w	r3, r8, r3
 8002f58:	60bb      	str	r3, [r7, #8]
 8002f5a:	462b      	mov	r3, r5
 8002f5c:	eb49 0303 	adc.w	r3, r9, r3
 8002f60:	60fb      	str	r3, [r7, #12]
 8002f62:	f04f 0200 	mov.w	r2, #0
 8002f66:	f04f 0300 	mov.w	r3, #0
 8002f6a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002f6e:	4629      	mov	r1, r5
 8002f70:	024b      	lsls	r3, r1, #9
 8002f72:	4621      	mov	r1, r4
 8002f74:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f78:	4621      	mov	r1, r4
 8002f7a:	024a      	lsls	r2, r1, #9
 8002f7c:	4610      	mov	r0, r2
 8002f7e:	4619      	mov	r1, r3
 8002f80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f82:	2200      	movs	r2, #0
 8002f84:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f86:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f88:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002f8c:	f7fd f988 	bl	80002a0 <__aeabi_uldivmod>
 8002f90:	4602      	mov	r2, r0
 8002f92:	460b      	mov	r3, r1
 8002f94:	4613      	mov	r3, r2
 8002f96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f98:	e058      	b.n	800304c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f9a:	4b38      	ldr	r3, [pc, #224]	; (800307c <HAL_RCC_GetSysClockFreq+0x200>)
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	099b      	lsrs	r3, r3, #6
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	4611      	mov	r1, r2
 8002fa6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002faa:	623b      	str	r3, [r7, #32]
 8002fac:	2300      	movs	r3, #0
 8002fae:	627b      	str	r3, [r7, #36]	; 0x24
 8002fb0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002fb4:	4642      	mov	r2, r8
 8002fb6:	464b      	mov	r3, r9
 8002fb8:	f04f 0000 	mov.w	r0, #0
 8002fbc:	f04f 0100 	mov.w	r1, #0
 8002fc0:	0159      	lsls	r1, r3, #5
 8002fc2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fc6:	0150      	lsls	r0, r2, #5
 8002fc8:	4602      	mov	r2, r0
 8002fca:	460b      	mov	r3, r1
 8002fcc:	4641      	mov	r1, r8
 8002fce:	ebb2 0a01 	subs.w	sl, r2, r1
 8002fd2:	4649      	mov	r1, r9
 8002fd4:	eb63 0b01 	sbc.w	fp, r3, r1
 8002fd8:	f04f 0200 	mov.w	r2, #0
 8002fdc:	f04f 0300 	mov.w	r3, #0
 8002fe0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002fe4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002fe8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002fec:	ebb2 040a 	subs.w	r4, r2, sl
 8002ff0:	eb63 050b 	sbc.w	r5, r3, fp
 8002ff4:	f04f 0200 	mov.w	r2, #0
 8002ff8:	f04f 0300 	mov.w	r3, #0
 8002ffc:	00eb      	lsls	r3, r5, #3
 8002ffe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003002:	00e2      	lsls	r2, r4, #3
 8003004:	4614      	mov	r4, r2
 8003006:	461d      	mov	r5, r3
 8003008:	4643      	mov	r3, r8
 800300a:	18e3      	adds	r3, r4, r3
 800300c:	603b      	str	r3, [r7, #0]
 800300e:	464b      	mov	r3, r9
 8003010:	eb45 0303 	adc.w	r3, r5, r3
 8003014:	607b      	str	r3, [r7, #4]
 8003016:	f04f 0200 	mov.w	r2, #0
 800301a:	f04f 0300 	mov.w	r3, #0
 800301e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003022:	4629      	mov	r1, r5
 8003024:	028b      	lsls	r3, r1, #10
 8003026:	4621      	mov	r1, r4
 8003028:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800302c:	4621      	mov	r1, r4
 800302e:	028a      	lsls	r2, r1, #10
 8003030:	4610      	mov	r0, r2
 8003032:	4619      	mov	r1, r3
 8003034:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003036:	2200      	movs	r2, #0
 8003038:	61bb      	str	r3, [r7, #24]
 800303a:	61fa      	str	r2, [r7, #28]
 800303c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003040:	f7fd f92e 	bl	80002a0 <__aeabi_uldivmod>
 8003044:	4602      	mov	r2, r0
 8003046:	460b      	mov	r3, r1
 8003048:	4613      	mov	r3, r2
 800304a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800304c:	4b0b      	ldr	r3, [pc, #44]	; (800307c <HAL_RCC_GetSysClockFreq+0x200>)
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	0c1b      	lsrs	r3, r3, #16
 8003052:	f003 0303 	and.w	r3, r3, #3
 8003056:	3301      	adds	r3, #1
 8003058:	005b      	lsls	r3, r3, #1
 800305a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800305c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800305e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003060:	fbb2 f3f3 	udiv	r3, r2, r3
 8003064:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003066:	e002      	b.n	800306e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003068:	4b05      	ldr	r3, [pc, #20]	; (8003080 <HAL_RCC_GetSysClockFreq+0x204>)
 800306a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800306c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800306e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003070:	4618      	mov	r0, r3
 8003072:	3750      	adds	r7, #80	; 0x50
 8003074:	46bd      	mov	sp, r7
 8003076:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800307a:	bf00      	nop
 800307c:	40023800 	.word	0x40023800
 8003080:	00f42400 	.word	0x00f42400
 8003084:	007a1200 	.word	0x007a1200

08003088 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003088:	b480      	push	{r7}
 800308a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800308c:	4b03      	ldr	r3, [pc, #12]	; (800309c <HAL_RCC_GetHCLKFreq+0x14>)
 800308e:	681b      	ldr	r3, [r3, #0]
}
 8003090:	4618      	mov	r0, r3
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	20000004 	.word	0x20000004

080030a0 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80030a6:	2100      	movs	r1, #0
 80030a8:	2000      	movs	r0, #0
 80030aa:	f004 fbbf 	bl	800782c <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 80030ae:	4b2a      	ldr	r3, [pc, #168]	; (8003158 <MX_LWIP_Init+0xb8>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 80030b4:	4b29      	ldr	r3, [pc, #164]	; (800315c <MX_LWIP_Init+0xbc>)
 80030b6:	2200      	movs	r2, #0
 80030b8:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 80030ba:	4b29      	ldr	r3, [pc, #164]	; (8003160 <MX_LWIP_Init+0xc0>)
 80030bc:	2200      	movs	r2, #0
 80030be:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80030c0:	4b28      	ldr	r3, [pc, #160]	; (8003164 <MX_LWIP_Init+0xc4>)
 80030c2:	9302      	str	r3, [sp, #8]
 80030c4:	4b28      	ldr	r3, [pc, #160]	; (8003168 <MX_LWIP_Init+0xc8>)
 80030c6:	9301      	str	r3, [sp, #4]
 80030c8:	2300      	movs	r3, #0
 80030ca:	9300      	str	r3, [sp, #0]
 80030cc:	4b24      	ldr	r3, [pc, #144]	; (8003160 <MX_LWIP_Init+0xc0>)
 80030ce:	4a23      	ldr	r2, [pc, #140]	; (800315c <MX_LWIP_Init+0xbc>)
 80030d0:	4921      	ldr	r1, [pc, #132]	; (8003158 <MX_LWIP_Init+0xb8>)
 80030d2:	4826      	ldr	r0, [pc, #152]	; (800316c <MX_LWIP_Init+0xcc>)
 80030d4:	f006 fe70 	bl	8009db8 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80030d8:	4824      	ldr	r0, [pc, #144]	; (800316c <MX_LWIP_Init+0xcc>)
 80030da:	f007 f827 	bl	800a12c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80030de:	4b23      	ldr	r3, [pc, #140]	; (800316c <MX_LWIP_Init+0xcc>)
 80030e0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80030e4:	089b      	lsrs	r3, r3, #2
 80030e6:	f003 0301 	and.w	r3, r3, #1
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d003      	beq.n	80030f8 <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80030f0:	481e      	ldr	r0, [pc, #120]	; (800316c <MX_LWIP_Init+0xcc>)
 80030f2:	f007 f82b 	bl	800a14c <netif_set_up>
 80030f6:	e002      	b.n	80030fe <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80030f8:	481c      	ldr	r0, [pc, #112]	; (800316c <MX_LWIP_Init+0xcc>)
 80030fa:	f007 f893 	bl	800a224 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 80030fe:	491c      	ldr	r1, [pc, #112]	; (8003170 <MX_LWIP_Init+0xd0>)
 8003100:	481a      	ldr	r0, [pc, #104]	; (800316c <MX_LWIP_Init+0xcc>)
 8003102:	f007 f929 	bl	800a358 <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  Netif_LinkSemaphore = osSemaphoreNew(1, 1, NULL);
 8003106:	2200      	movs	r2, #0
 8003108:	2101      	movs	r1, #1
 800310a:	2001      	movs	r0, #1
 800310c:	f000 fe95 	bl	8003e3a <osSemaphoreNew>
 8003110:	4603      	mov	r3, r0
 8003112:	4a18      	ldr	r2, [pc, #96]	; (8003174 <MX_LWIP_Init+0xd4>)
 8003114:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 8003116:	4b18      	ldr	r3, [pc, #96]	; (8003178 <MX_LWIP_Init+0xd8>)
 8003118:	4a14      	ldr	r2, [pc, #80]	; (800316c <MX_LWIP_Init+0xcc>)
 800311a:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 800311c:	4b15      	ldr	r3, [pc, #84]	; (8003174 <MX_LWIP_Init+0xd4>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a15      	ldr	r2, [pc, #84]	; (8003178 <MX_LWIP_Init+0xd8>)
 8003122:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8003124:	2224      	movs	r2, #36	; 0x24
 8003126:	2100      	movs	r1, #0
 8003128:	4814      	ldr	r0, [pc, #80]	; (800317c <MX_LWIP_Init+0xdc>)
 800312a:	f013 f969 	bl	8016400 <memset>
  attributes.name = "LinkThr";
 800312e:	4b13      	ldr	r3, [pc, #76]	; (800317c <MX_LWIP_Init+0xdc>)
 8003130:	4a13      	ldr	r2, [pc, #76]	; (8003180 <MX_LWIP_Init+0xe0>)
 8003132:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8003134:	4b11      	ldr	r3, [pc, #68]	; (800317c <MX_LWIP_Init+0xdc>)
 8003136:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800313a:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 800313c:	4b0f      	ldr	r3, [pc, #60]	; (800317c <MX_LWIP_Init+0xdc>)
 800313e:	2210      	movs	r2, #16
 8003140:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernetif_set_link, &link_arg, &attributes);
 8003142:	4a0e      	ldr	r2, [pc, #56]	; (800317c <MX_LWIP_Init+0xdc>)
 8003144:	490c      	ldr	r1, [pc, #48]	; (8003178 <MX_LWIP_Init+0xd8>)
 8003146:	480f      	ldr	r0, [pc, #60]	; (8003184 <MX_LWIP_Init+0xe4>)
 8003148:	f000 fcbb 	bl	8003ac2 <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 800314c:	4807      	ldr	r0, [pc, #28]	; (800316c <MX_LWIP_Init+0xcc>)
 800314e:	f00f fa0b 	bl	8012568 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8003152:	bf00      	nop
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}
 8003158:	20000104 	.word	0x20000104
 800315c:	20000108 	.word	0x20000108
 8003160:	2000010c 	.word	0x2000010c
 8003164:	08007769 	.word	0x08007769
 8003168:	080037ad 	.word	0x080037ad
 800316c:	200000cc 	.word	0x200000cc
 8003170:	08003891 	.word	0x08003891
 8003174:	200000c0 	.word	0x200000c0
 8003178:	200000c4 	.word	0x200000c4
 800317c:	20000110 	.word	0x20000110
 8003180:	08017b84 	.word	0x08017b84
 8003184:	08003819 	.word	0x08003819

08003188 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b08e      	sub	sp, #56	; 0x38
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003190:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003194:	2200      	movs	r2, #0
 8003196:	601a      	str	r2, [r3, #0]
 8003198:	605a      	str	r2, [r3, #4]
 800319a:	609a      	str	r2, [r3, #8]
 800319c:	60da      	str	r2, [r3, #12]
 800319e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a4a      	ldr	r2, [pc, #296]	; (80032d0 <HAL_ETH_MspInit+0x148>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	f040 808d 	bne.w	80032c6 <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80031ac:	2300      	movs	r3, #0
 80031ae:	623b      	str	r3, [r7, #32]
 80031b0:	4b48      	ldr	r3, [pc, #288]	; (80032d4 <HAL_ETH_MspInit+0x14c>)
 80031b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b4:	4a47      	ldr	r2, [pc, #284]	; (80032d4 <HAL_ETH_MspInit+0x14c>)
 80031b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80031ba:	6313      	str	r3, [r2, #48]	; 0x30
 80031bc:	4b45      	ldr	r3, [pc, #276]	; (80032d4 <HAL_ETH_MspInit+0x14c>)
 80031be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031c4:	623b      	str	r3, [r7, #32]
 80031c6:	6a3b      	ldr	r3, [r7, #32]
 80031c8:	2300      	movs	r3, #0
 80031ca:	61fb      	str	r3, [r7, #28]
 80031cc:	4b41      	ldr	r3, [pc, #260]	; (80032d4 <HAL_ETH_MspInit+0x14c>)
 80031ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d0:	4a40      	ldr	r2, [pc, #256]	; (80032d4 <HAL_ETH_MspInit+0x14c>)
 80031d2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80031d6:	6313      	str	r3, [r2, #48]	; 0x30
 80031d8:	4b3e      	ldr	r3, [pc, #248]	; (80032d4 <HAL_ETH_MspInit+0x14c>)
 80031da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80031e0:	61fb      	str	r3, [r7, #28]
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	2300      	movs	r3, #0
 80031e6:	61bb      	str	r3, [r7, #24]
 80031e8:	4b3a      	ldr	r3, [pc, #232]	; (80032d4 <HAL_ETH_MspInit+0x14c>)
 80031ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ec:	4a39      	ldr	r2, [pc, #228]	; (80032d4 <HAL_ETH_MspInit+0x14c>)
 80031ee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80031f2:	6313      	str	r3, [r2, #48]	; 0x30
 80031f4:	4b37      	ldr	r3, [pc, #220]	; (80032d4 <HAL_ETH_MspInit+0x14c>)
 80031f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031fc:	61bb      	str	r3, [r7, #24]
 80031fe:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003200:	2300      	movs	r3, #0
 8003202:	617b      	str	r3, [r7, #20]
 8003204:	4b33      	ldr	r3, [pc, #204]	; (80032d4 <HAL_ETH_MspInit+0x14c>)
 8003206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003208:	4a32      	ldr	r2, [pc, #200]	; (80032d4 <HAL_ETH_MspInit+0x14c>)
 800320a:	f043 0304 	orr.w	r3, r3, #4
 800320e:	6313      	str	r3, [r2, #48]	; 0x30
 8003210:	4b30      	ldr	r3, [pc, #192]	; (80032d4 <HAL_ETH_MspInit+0x14c>)
 8003212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003214:	f003 0304 	and.w	r3, r3, #4
 8003218:	617b      	str	r3, [r7, #20]
 800321a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800321c:	2300      	movs	r3, #0
 800321e:	613b      	str	r3, [r7, #16]
 8003220:	4b2c      	ldr	r3, [pc, #176]	; (80032d4 <HAL_ETH_MspInit+0x14c>)
 8003222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003224:	4a2b      	ldr	r2, [pc, #172]	; (80032d4 <HAL_ETH_MspInit+0x14c>)
 8003226:	f043 0301 	orr.w	r3, r3, #1
 800322a:	6313      	str	r3, [r2, #48]	; 0x30
 800322c:	4b29      	ldr	r3, [pc, #164]	; (80032d4 <HAL_ETH_MspInit+0x14c>)
 800322e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003230:	f003 0301 	and.w	r3, r3, #1
 8003234:	613b      	str	r3, [r7, #16]
 8003236:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003238:	2300      	movs	r3, #0
 800323a:	60fb      	str	r3, [r7, #12]
 800323c:	4b25      	ldr	r3, [pc, #148]	; (80032d4 <HAL_ETH_MspInit+0x14c>)
 800323e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003240:	4a24      	ldr	r2, [pc, #144]	; (80032d4 <HAL_ETH_MspInit+0x14c>)
 8003242:	f043 0302 	orr.w	r3, r3, #2
 8003246:	6313      	str	r3, [r2, #48]	; 0x30
 8003248:	4b22      	ldr	r3, [pc, #136]	; (80032d4 <HAL_ETH_MspInit+0x14c>)
 800324a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324c:	f003 0302 	and.w	r3, r3, #2
 8003250:	60fb      	str	r3, [r7, #12]
 8003252:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8003254:	2332      	movs	r3, #50	; 0x32
 8003256:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003258:	2302      	movs	r3, #2
 800325a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800325c:	2300      	movs	r3, #0
 800325e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003260:	2303      	movs	r3, #3
 8003262:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003264:	230b      	movs	r3, #11
 8003266:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003268:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800326c:	4619      	mov	r1, r3
 800326e:	481a      	ldr	r0, [pc, #104]	; (80032d8 <HAL_ETH_MspInit+0x150>)
 8003270:	f7ff f90a 	bl	8002488 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8003274:	2386      	movs	r3, #134	; 0x86
 8003276:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003278:	2302      	movs	r3, #2
 800327a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800327c:	2300      	movs	r3, #0
 800327e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003280:	2303      	movs	r3, #3
 8003282:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003284:	230b      	movs	r3, #11
 8003286:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003288:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800328c:	4619      	mov	r1, r3
 800328e:	4813      	ldr	r0, [pc, #76]	; (80032dc <HAL_ETH_MspInit+0x154>)
 8003290:	f7ff f8fa 	bl	8002488 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8003294:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003298:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800329a:	2302      	movs	r3, #2
 800329c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800329e:	2300      	movs	r3, #0
 80032a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032a2:	2303      	movs	r3, #3
 80032a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80032a6:	230b      	movs	r3, #11
 80032a8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032ae:	4619      	mov	r1, r3
 80032b0:	480b      	ldr	r0, [pc, #44]	; (80032e0 <HAL_ETH_MspInit+0x158>)
 80032b2:	f7ff f8e9 	bl	8002488 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80032b6:	2200      	movs	r2, #0
 80032b8:	2105      	movs	r1, #5
 80032ba:	203d      	movs	r0, #61	; 0x3d
 80032bc:	f7fd ff1f 	bl	80010fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80032c0:	203d      	movs	r0, #61	; 0x3d
 80032c2:	f7fd ff38 	bl	8001136 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80032c6:	bf00      	nop
 80032c8:	3738      	adds	r7, #56	; 0x38
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	40028000 	.word	0x40028000
 80032d4:	40023800 	.word	0x40023800
 80032d8:	40020800 	.word	0x40020800
 80032dc:	40020000 	.word	0x40020000
 80032e0:	40020400 	.word	0x40020400

080032e4 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 80032ec:	4b04      	ldr	r3, [pc, #16]	; (8003300 <HAL_ETH_RxCpltCallback+0x1c>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4618      	mov	r0, r3
 80032f2:	f000 fe7d 	bl	8003ff0 <osSemaphoreRelease>
}
 80032f6:	bf00      	nop
 80032f8:	3708      	adds	r7, #8
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	200031d4 	.word	0x200031d4

08003304 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b090      	sub	sp, #64	; 0x40
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800330c:	2300      	movs	r3, #0
 800330e:	63bb      	str	r3, [r7, #56]	; 0x38
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8003310:	4b5d      	ldr	r3, [pc, #372]	; (8003488 <low_level_init+0x184>)
 8003312:	4a5e      	ldr	r2, [pc, #376]	; (800348c <low_level_init+0x188>)
 8003314:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8003316:	4b5c      	ldr	r3, [pc, #368]	; (8003488 <low_level_init+0x184>)
 8003318:	2201      	movs	r2, #1
 800331a:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 800331c:	4b5a      	ldr	r3, [pc, #360]	; (8003488 <low_level_init+0x184>)
 800331e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003322:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8003324:	4b58      	ldr	r3, [pc, #352]	; (8003488 <low_level_init+0x184>)
 8003326:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800332a:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800332c:	4b56      	ldr	r3, [pc, #344]	; (8003488 <low_level_init+0x184>)
 800332e:	2201      	movs	r2, #1
 8003330:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8003332:	2300      	movs	r3, #0
 8003334:	733b      	strb	r3, [r7, #12]
  MACAddr[1] = 0x80;
 8003336:	2380      	movs	r3, #128	; 0x80
 8003338:	737b      	strb	r3, [r7, #13]
  MACAddr[2] = 0xE1;
 800333a:	23e1      	movs	r3, #225	; 0xe1
 800333c:	73bb      	strb	r3, [r7, #14]
  MACAddr[3] = 0x00;
 800333e:	2300      	movs	r3, #0
 8003340:	73fb      	strb	r3, [r7, #15]
  MACAddr[4] = 0x00;
 8003342:	2300      	movs	r3, #0
 8003344:	743b      	strb	r3, [r7, #16]
  MACAddr[5] = 0x00;
 8003346:	2300      	movs	r3, #0
 8003348:	747b      	strb	r3, [r7, #17]
  heth.Init.MACAddr = &MACAddr[0];
 800334a:	4a4f      	ldr	r2, [pc, #316]	; (8003488 <low_level_init+0x184>)
 800334c:	f107 030c 	add.w	r3, r7, #12
 8003350:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8003352:	4b4d      	ldr	r3, [pc, #308]	; (8003488 <low_level_init+0x184>)
 8003354:	2201      	movs	r2, #1
 8003356:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8003358:	4b4b      	ldr	r3, [pc, #300]	; (8003488 <low_level_init+0x184>)
 800335a:	2200      	movs	r2, #0
 800335c:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800335e:	4b4a      	ldr	r3, [pc, #296]	; (8003488 <low_level_init+0x184>)
 8003360:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003364:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8003366:	4848      	ldr	r0, [pc, #288]	; (8003488 <low_level_init+0x184>)
 8003368:	f7fd ff00 	bl	800116c <HAL_ETH_Init>
 800336c:	4603      	mov	r3, r0
 800336e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 8003372:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003376:	2b00      	cmp	r3, #0
 8003378:	d108      	bne.n	800338c <low_level_init+0x88>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003380:	f043 0304 	orr.w	r3, r3, #4
 8003384:	b2da      	uxtb	r2, r3
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800338c:	2304      	movs	r3, #4
 800338e:	4a40      	ldr	r2, [pc, #256]	; (8003490 <low_level_init+0x18c>)
 8003390:	4940      	ldr	r1, [pc, #256]	; (8003494 <low_level_init+0x190>)
 8003392:	483d      	ldr	r0, [pc, #244]	; (8003488 <low_level_init+0x184>)
 8003394:	f7fe f884 	bl	80014a0 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8003398:	2304      	movs	r3, #4
 800339a:	4a3f      	ldr	r2, [pc, #252]	; (8003498 <low_level_init+0x194>)
 800339c:	493f      	ldr	r1, [pc, #252]	; (800349c <low_level_init+0x198>)
 800339e:	483a      	ldr	r0, [pc, #232]	; (8003488 <low_level_init+0x184>)
 80033a0:	f7fe f8e6 	bl	8001570 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2206      	movs	r2, #6
 80033a8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80033ac:	4b36      	ldr	r3, [pc, #216]	; (8003488 <low_level_init+0x184>)
 80033ae:	695b      	ldr	r3, [r3, #20]
 80033b0:	781a      	ldrb	r2, [r3, #0]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80033b8:	4b33      	ldr	r3, [pc, #204]	; (8003488 <low_level_init+0x184>)
 80033ba:	695b      	ldr	r3, [r3, #20]
 80033bc:	785a      	ldrb	r2, [r3, #1]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80033c4:	4b30      	ldr	r3, [pc, #192]	; (8003488 <low_level_init+0x184>)
 80033c6:	695b      	ldr	r3, [r3, #20]
 80033c8:	789a      	ldrb	r2, [r3, #2]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80033d0:	4b2d      	ldr	r3, [pc, #180]	; (8003488 <low_level_init+0x184>)
 80033d2:	695b      	ldr	r3, [r3, #20]
 80033d4:	78da      	ldrb	r2, [r3, #3]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80033dc:	4b2a      	ldr	r3, [pc, #168]	; (8003488 <low_level_init+0x184>)
 80033de:	695b      	ldr	r3, [r3, #20]
 80033e0:	791a      	ldrb	r2, [r3, #4]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80033e8:	4b27      	ldr	r3, [pc, #156]	; (8003488 <low_level_init+0x184>)
 80033ea:	695b      	ldr	r3, [r3, #20]
 80033ec:	795a      	ldrb	r2, [r3, #5]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = 1500;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80033fa:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003402:	f043 030a 	orr.w	r3, r3, #10
 8003406:	b2da      	uxtb	r2, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  s_xSemaphore = osSemaphoreNew(1, 1, NULL);
 800340e:	2200      	movs	r2, #0
 8003410:	2101      	movs	r1, #1
 8003412:	2001      	movs	r0, #1
 8003414:	f000 fd11 	bl	8003e3a <osSemaphoreNew>
 8003418:	4603      	mov	r3, r0
 800341a:	4a21      	ldr	r2, [pc, #132]	; (80034a0 <low_level_init+0x19c>)
 800341c:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800341e:	f107 0314 	add.w	r3, r7, #20
 8003422:	2224      	movs	r2, #36	; 0x24
 8003424:	2100      	movs	r1, #0
 8003426:	4618      	mov	r0, r3
 8003428:	f012 ffea 	bl	8016400 <memset>
  attributes.name = "EthIf";
 800342c:	4b1d      	ldr	r3, [pc, #116]	; (80034a4 <low_level_init+0x1a0>)
 800342e:	617b      	str	r3, [r7, #20]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8003430:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8003434:	62bb      	str	r3, [r7, #40]	; 0x28
  attributes.priority = osPriorityRealtime;
 8003436:	2330      	movs	r3, #48	; 0x30
 8003438:	62fb      	str	r3, [r7, #44]	; 0x2c
  osThreadNew(ethernetif_input, netif, &attributes);
 800343a:	f107 0314 	add.w	r3, r7, #20
 800343e:	461a      	mov	r2, r3
 8003440:	6879      	ldr	r1, [r7, #4]
 8003442:	4819      	ldr	r0, [pc, #100]	; (80034a8 <low_level_init+0x1a4>)
 8003444:	f000 fb3d 	bl	8003ac2 <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8003448:	480f      	ldr	r0, [pc, #60]	; (8003488 <low_level_init+0x184>)
 800344a:	f7fe fbb5 	bl	8001bb8 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800344e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003452:	461a      	mov	r2, r3
 8003454:	211d      	movs	r1, #29
 8003456:	480c      	ldr	r0, [pc, #48]	; (8003488 <low_level_init+0x184>)
 8003458:	f7fe fae0 	bl	8001a1c <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800345c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800345e:	f043 030b 	orr.w	r3, r3, #11
 8003462:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8003464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003466:	461a      	mov	r2, r3
 8003468:	211d      	movs	r1, #29
 800346a:	4807      	ldr	r0, [pc, #28]	; (8003488 <low_level_init+0x184>)
 800346c:	f7fe fb3e 	bl	8001aec <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8003470:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003474:	461a      	mov	r2, r3
 8003476:	211d      	movs	r1, #29
 8003478:	4803      	ldr	r0, [pc, #12]	; (8003488 <low_level_init+0x184>)
 800347a:	f7fe facf 	bl	8001a1c <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800347e:	bf00      	nop
 8003480:	3740      	adds	r7, #64	; 0x40
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	200031d8 	.word	0x200031d8
 800348c:	40028000 	.word	0x40028000
 8003490:	20001a04 	.word	0x20001a04
 8003494:	200001b4 	.word	0x200001b4
 8003498:	20000234 	.word	0x20000234
 800349c:	20000134 	.word	0x20000134
 80034a0:	200031d4 	.word	0x200031d4
 80034a4:	08017b8c 	.word	0x08017b8c
 80034a8:	0800374d 	.word	0x0800374d

080034ac <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b08a      	sub	sp, #40	; 0x28
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 80034b6:	4b4b      	ldr	r3, [pc, #300]	; (80035e4 <low_level_output+0x138>)
 80034b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 80034be:	2300      	movs	r3, #0
 80034c0:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 80034c2:	2300      	movs	r3, #0
 80034c4:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 80034c6:	2300      	movs	r3, #0
 80034c8:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 80034ca:	2300      	movs	r3, #0
 80034cc:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 80034ce:	4b45      	ldr	r3, [pc, #276]	; (80035e4 <low_level_output+0x138>)
 80034d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d2:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 80034d4:	2300      	movs	r3, #0
 80034d6:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	623b      	str	r3, [r7, #32]
 80034dc:	e05a      	b.n	8003594 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80034de:	69bb      	ldr	r3, [r7, #24]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	da03      	bge.n	80034ee <low_level_output+0x42>
      {
        errval = ERR_USE;
 80034e6:	23f8      	movs	r3, #248	; 0xf8
 80034e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 80034ec:	e05c      	b.n	80035a8 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 80034ee:	6a3b      	ldr	r3, [r7, #32]
 80034f0:	895b      	ldrh	r3, [r3, #10]
 80034f2:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 80034f4:	2300      	movs	r3, #0
 80034f6:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80034f8:	e02f      	b.n	800355a <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80034fa:	69fa      	ldr	r2, [r7, #28]
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	18d0      	adds	r0, r2, r3
 8003500:	6a3b      	ldr	r3, [r7, #32]
 8003502:	685a      	ldr	r2, [r3, #4]
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	18d1      	adds	r1, r2, r3
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800350e:	3304      	adds	r3, #4
 8003510:	461a      	mov	r2, r3
 8003512:	f012 ff4d 	bl	80163b0 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8003516:	69bb      	ldr	r3, [r7, #24]
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2b00      	cmp	r3, #0
 8003522:	da03      	bge.n	800352c <low_level_output+0x80>
        {
          errval = ERR_USE;
 8003524:	23f8      	movs	r3, #248	; 0xf8
 8003526:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800352a:	e03d      	b.n	80035a8 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8003532:	693a      	ldr	r2, [r7, #16]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	4413      	add	r3, r2
 8003538:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800353c:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800353e:	68ba      	ldr	r2, [r7, #8]
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003548:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800354a:	697a      	ldr	r2, [r7, #20]
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003554:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8003556:	2300      	movs	r3, #0
 8003558:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800355a:	68fa      	ldr	r2, [r7, #12]
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	4413      	add	r3, r2
 8003560:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003564:	4293      	cmp	r3, r2
 8003566:	d8c8      	bhi.n	80034fa <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8003568:	69fa      	ldr	r2, [r7, #28]
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	18d0      	adds	r0, r2, r3
 800356e:	6a3b      	ldr	r3, [r7, #32]
 8003570:	685a      	ldr	r2, [r3, #4]
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	4413      	add	r3, r2
 8003576:	68fa      	ldr	r2, [r7, #12]
 8003578:	4619      	mov	r1, r3
 800357a:	f012 ff19 	bl	80163b0 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800357e:	693a      	ldr	r2, [r7, #16]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	4413      	add	r3, r2
 8003584:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8003586:	697a      	ldr	r2, [r7, #20]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	4413      	add	r3, r2
 800358c:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800358e:	6a3b      	ldr	r3, [r7, #32]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	623b      	str	r3, [r7, #32]
 8003594:	6a3b      	ldr	r3, [r7, #32]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d1a1      	bne.n	80034de <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800359a:	6979      	ldr	r1, [r7, #20]
 800359c:	4811      	ldr	r0, [pc, #68]	; (80035e4 <low_level_output+0x138>)
 800359e:	f7fe f853 	bl	8001648 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 80035a2:	2300      	movs	r3, #0
 80035a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 80035a8:	4b0e      	ldr	r3, [pc, #56]	; (80035e4 <low_level_output+0x138>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035b0:	695b      	ldr	r3, [r3, #20]
 80035b2:	f003 0320 	and.w	r3, r3, #32
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d00d      	beq.n	80035d6 <low_level_output+0x12a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 80035ba:	4b0a      	ldr	r3, [pc, #40]	; (80035e4 <low_level_output+0x138>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035c2:	461a      	mov	r2, r3
 80035c4:	2320      	movs	r3, #32
 80035c6:	6153      	str	r3, [r2, #20]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 80035c8:	4b06      	ldr	r3, [pc, #24]	; (80035e4 <low_level_output+0x138>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035d0:	461a      	mov	r2, r3
 80035d2:	2300      	movs	r3, #0
 80035d4:	6053      	str	r3, [r2, #4]
  }
  return errval;
 80035d6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3728      	adds	r7, #40	; 0x28
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	200031d8 	.word	0x200031d8

080035e8 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b08c      	sub	sp, #48	; 0x30
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80035f0:	2300      	movs	r3, #0
 80035f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 80035f4:	2300      	movs	r3, #0
 80035f6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 80035f8:	2300      	movs	r3, #0
 80035fa:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 80035fc:	2300      	movs	r3, #0
 80035fe:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8003600:	2300      	movs	r3, #0
 8003602:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8003604:	2300      	movs	r3, #0
 8003606:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8003608:	2300      	movs	r3, #0
 800360a:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 800360c:	484e      	ldr	r0, [pc, #312]	; (8003748 <low_level_input+0x160>)
 800360e:	f7fe f905 	bl	800181c <HAL_ETH_GetReceivedFrame_IT>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d001      	beq.n	800361c <low_level_input+0x34>

    return NULL;
 8003618:	2300      	movs	r3, #0
 800361a:	e091      	b.n	8003740 <low_level_input+0x158>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 800361c:	4b4a      	ldr	r3, [pc, #296]	; (8003748 <low_level_input+0x160>)
 800361e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003620:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8003622:	4b49      	ldr	r3, [pc, #292]	; (8003748 <low_level_input+0x160>)
 8003624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003626:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8003628:	89fb      	ldrh	r3, [r7, #14]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d007      	beq.n	800363e <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800362e:	89fb      	ldrh	r3, [r7, #14]
 8003630:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8003634:	4619      	mov	r1, r3
 8003636:	2000      	movs	r0, #0
 8003638:	f006 ff58 	bl	800a4ec <pbuf_alloc>
 800363c:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 800363e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003640:	2b00      	cmp	r3, #0
 8003642:	d04b      	beq.n	80036dc <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8003644:	4b40      	ldr	r3, [pc, #256]	; (8003748 <low_level_input+0x160>)
 8003646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003648:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 800364a:	2300      	movs	r3, #0
 800364c:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800364e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003650:	62bb      	str	r3, [r7, #40]	; 0x28
 8003652:	e040      	b.n	80036d6 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8003654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003656:	895b      	ldrh	r3, [r3, #10]
 8003658:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 800365a:	2300      	movs	r3, #0
 800365c:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800365e:	e021      	b.n	80036a4 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8003660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003662:	685a      	ldr	r2, [r3, #4]
 8003664:	69bb      	ldr	r3, [r7, #24]
 8003666:	18d0      	adds	r0, r2, r3
 8003668:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	18d1      	adds	r1, r2, r3
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8003674:	3304      	adds	r3, #4
 8003676:	461a      	mov	r2, r3
 8003678:	f012 fe9a 	bl	80163b0 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800367c:	6a3b      	ldr	r3, [r7, #32]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8003682:	6a3b      	ldr	r3, [r7, #32]
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8003688:	69fa      	ldr	r2, [r7, #28]
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	4413      	add	r3, r2
 800368e:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8003692:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8003694:	69ba      	ldr	r2, [r7, #24]
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800369e:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 80036a0:	2300      	movs	r3, #0
 80036a2:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80036a4:	697a      	ldr	r2, [r7, #20]
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	4413      	add	r3, r2
 80036aa:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d8d6      	bhi.n	8003660 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 80036b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036b4:	685a      	ldr	r2, [r3, #4]
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	18d0      	adds	r0, r2, r3
 80036ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	4413      	add	r3, r2
 80036c0:	697a      	ldr	r2, [r7, #20]
 80036c2:	4619      	mov	r1, r3
 80036c4:	f012 fe74 	bl	80163b0 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80036c8:	69fa      	ldr	r2, [r7, #28]
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	4413      	add	r3, r2
 80036ce:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80036d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80036d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d1bb      	bne.n	8003654 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80036dc:	4b1a      	ldr	r3, [pc, #104]	; (8003748 <low_level_input+0x160>)
 80036de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e0:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80036e2:	2300      	movs	r3, #0
 80036e4:	613b      	str	r3, [r7, #16]
 80036e6:	e00b      	b.n	8003700 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 80036e8:	6a3b      	ldr	r3, [r7, #32]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80036f0:	6a3b      	ldr	r3, [r7, #32]
 80036f2:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80036f4:	6a3b      	ldr	r3, [r7, #32]
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	3301      	adds	r3, #1
 80036fe:	613b      	str	r3, [r7, #16]
 8003700:	4b11      	ldr	r3, [pc, #68]	; (8003748 <low_level_input+0x160>)
 8003702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003704:	693a      	ldr	r2, [r7, #16]
 8003706:	429a      	cmp	r2, r3
 8003708:	d3ee      	bcc.n	80036e8 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 800370a:	4b0f      	ldr	r3, [pc, #60]	; (8003748 <low_level_input+0x160>)
 800370c:	2200      	movs	r2, #0
 800370e:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8003710:	4b0d      	ldr	r3, [pc, #52]	; (8003748 <low_level_input+0x160>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003718:	695b      	ldr	r3, [r3, #20]
 800371a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800371e:	2b00      	cmp	r3, #0
 8003720:	d00d      	beq.n	800373e <low_level_input+0x156>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8003722:	4b09      	ldr	r3, [pc, #36]	; (8003748 <low_level_input+0x160>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800372a:	461a      	mov	r2, r3
 800372c:	2380      	movs	r3, #128	; 0x80
 800372e:	6153      	str	r3, [r2, #20]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8003730:	4b05      	ldr	r3, [pc, #20]	; (8003748 <low_level_input+0x160>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003738:	461a      	mov	r2, r3
 800373a:	2300      	movs	r3, #0
 800373c:	6093      	str	r3, [r2, #8]
  }
  return p;
 800373e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003740:	4618      	mov	r0, r3
 8003742:	3730      	adds	r7, #48	; 0x30
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}
 8003748:	200031d8 	.word	0x200031d8

0800374c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8003758:	4b12      	ldr	r3, [pc, #72]	; (80037a4 <ethernetif_input+0x58>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f04f 31ff 	mov.w	r1, #4294967295
 8003760:	4618      	mov	r0, r3
 8003762:	f000 fbf3 	bl	8003f4c <osSemaphoreAcquire>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d1f5      	bne.n	8003758 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 800376c:	480e      	ldr	r0, [pc, #56]	; (80037a8 <ethernetif_input+0x5c>)
 800376e:	f012 fd91 	bl	8016294 <sys_mutex_lock>
        p = low_level_input( netif );
 8003772:	68f8      	ldr	r0, [r7, #12]
 8003774:	f7ff ff38 	bl	80035e8 <low_level_input>
 8003778:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d00a      	beq.n	8003796 <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	691b      	ldr	r3, [r3, #16]
 8003784:	68f9      	ldr	r1, [r7, #12]
 8003786:	68b8      	ldr	r0, [r7, #8]
 8003788:	4798      	blx	r3
 800378a:	4603      	mov	r3, r0
 800378c:	2b00      	cmp	r3, #0
 800378e:	d002      	beq.n	8003796 <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8003790:	68b8      	ldr	r0, [r7, #8]
 8003792:	f007 f98f 	bl	800aab4 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 8003796:	4804      	ldr	r0, [pc, #16]	; (80037a8 <ethernetif_input+0x5c>)
 8003798:	f012 fd8b 	bl	80162b2 <sys_mutex_unlock>
      } while(p!=NULL);
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d1e4      	bne.n	800376c <ethernetif_input+0x20>
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80037a2:	e7d9      	b.n	8003758 <ethernetif_input+0xc>
 80037a4:	200031d4 	.word	0x200031d4
 80037a8:	2001697c 	.word	0x2001697c

080037ac <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d106      	bne.n	80037c8 <ethernetif_init+0x1c>
 80037ba:	4b0e      	ldr	r3, [pc, #56]	; (80037f4 <ethernetif_init+0x48>)
 80037bc:	f240 2231 	movw	r2, #561	; 0x231
 80037c0:	490d      	ldr	r1, [pc, #52]	; (80037f8 <ethernetif_init+0x4c>)
 80037c2:	480e      	ldr	r0, [pc, #56]	; (80037fc <ethernetif_init+0x50>)
 80037c4:	f012 fe24 	bl	8016410 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2273      	movs	r2, #115	; 0x73
 80037cc:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2274      	movs	r2, #116	; 0x74
 80037d4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	4a09      	ldr	r2, [pc, #36]	; (8003800 <ethernetif_init+0x54>)
 80037dc:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a08      	ldr	r2, [pc, #32]	; (8003804 <ethernetif_init+0x58>)
 80037e2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f7ff fd8d 	bl	8003304 <low_level_init>

  return ERR_OK;
 80037ea:	2300      	movs	r3, #0
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3708      	adds	r7, #8
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	08017b94 	.word	0x08017b94
 80037f8:	08017bb0 	.word	0x08017bb0
 80037fc:	08017bc0 	.word	0x08017bc0
 8003800:	08014435 	.word	0x08014435
 8003804:	080034ad 	.word	0x080034ad

08003808 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800380c:	f7fd fb6c 	bl	8000ee8 <HAL_GetTick>
 8003810:	4603      	mov	r3, r0
}
 8003812:	4618      	mov	r0, r3
 8003814:	bd80      	pop	{r7, pc}
	...

08003818 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void* argument)

{
 8003818:	b580      	push	{r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8003820:	2300      	movs	r3, #0
 8003822:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8003828:	f107 0308 	add.w	r3, r7, #8
 800382c:	461a      	mov	r2, r3
 800382e:	2101      	movs	r1, #1
 8003830:	4816      	ldr	r0, [pc, #88]	; (800388c <ethernetif_set_link+0x74>)
 8003832:	f7fe f8f3 	bl	8001a1c <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	f003 0304 	and.w	r3, r3, #4
 800383c:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003846:	f003 0304 	and.w	r3, r3, #4
 800384a:	2b00      	cmp	r3, #0
 800384c:	d108      	bne.n	8003860 <ethernetif_set_link+0x48>
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d005      	beq.n	8003860 <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4618      	mov	r0, r3
 800385a:	f006 fd15 	bl	800a288 <netif_set_link_up>
 800385e:	e011      	b.n	8003884 <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003868:	089b      	lsrs	r3, r3, #2
 800386a:	f003 0301 	and.w	r3, r3, #1
 800386e:	b2db      	uxtb	r3, r3
 8003870:	2b00      	cmp	r3, #0
 8003872:	d007      	beq.n	8003884 <ethernetif_set_link+0x6c>
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d104      	bne.n	8003884 <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4618      	mov	r0, r3
 8003880:	f006 fd3a 	bl	800a2f8 <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 8003884:	20c8      	movs	r0, #200	; 0xc8
 8003886:	f000 f9af 	bl	8003be8 <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800388a:	e7cd      	b.n	8003828 <ethernetif_set_link+0x10>
 800388c:	200031d8 	.word	0x200031d8

08003890 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8003898:	2300      	movs	r3, #0
 800389a:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 800389c:	2300      	movs	r3, #0
 800389e:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80038a6:	089b      	lsrs	r3, r3, #2
 80038a8:	f003 0301 	and.w	r3, r3, #1
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d05d      	beq.n	800396e <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80038b2:	4b34      	ldr	r3, [pc, #208]	; (8003984 <ethernetif_update_config+0xf4>)
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d03f      	beq.n	800393a <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 80038ba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80038be:	2100      	movs	r1, #0
 80038c0:	4830      	ldr	r0, [pc, #192]	; (8003984 <ethernetif_update_config+0xf4>)
 80038c2:	f7fe f913 	bl	8001aec <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 80038c6:	f7fd fb0f 	bl	8000ee8 <HAL_GetTick>
 80038ca:	4603      	mov	r3, r0
 80038cc:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80038ce:	f107 0308 	add.w	r3, r7, #8
 80038d2:	461a      	mov	r2, r3
 80038d4:	2101      	movs	r1, #1
 80038d6:	482b      	ldr	r0, [pc, #172]	; (8003984 <ethernetif_update_config+0xf4>)
 80038d8:	f7fe f8a0 	bl	8001a1c <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 80038dc:	f7fd fb04 	bl	8000ee8 <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80038ea:	d828      	bhi.n	800393e <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	f003 0320 	and.w	r3, r3, #32
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d0eb      	beq.n	80038ce <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 80038f6:	f107 0308 	add.w	r3, r7, #8
 80038fa:	461a      	mov	r2, r3
 80038fc:	2110      	movs	r1, #16
 80038fe:	4821      	ldr	r0, [pc, #132]	; (8003984 <ethernetif_update_config+0xf4>)
 8003900:	f7fe f88c 	bl	8001a1c <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	f003 0304 	and.w	r3, r3, #4
 800390a:	2b00      	cmp	r3, #0
 800390c:	d004      	beq.n	8003918 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800390e:	4b1d      	ldr	r3, [pc, #116]	; (8003984 <ethernetif_update_config+0xf4>)
 8003910:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003914:	60da      	str	r2, [r3, #12]
 8003916:	e002      	b.n	800391e <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8003918:	4b1a      	ldr	r3, [pc, #104]	; (8003984 <ethernetif_update_config+0xf4>)
 800391a:	2200      	movs	r2, #0
 800391c:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	f003 0302 	and.w	r3, r3, #2
 8003924:	2b00      	cmp	r3, #0
 8003926:	d003      	beq.n	8003930 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8003928:	4b16      	ldr	r3, [pc, #88]	; (8003984 <ethernetif_update_config+0xf4>)
 800392a:	2200      	movs	r2, #0
 800392c:	609a      	str	r2, [r3, #8]
 800392e:	e016      	b.n	800395e <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8003930:	4b14      	ldr	r3, [pc, #80]	; (8003984 <ethernetif_update_config+0xf4>)
 8003932:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003936:	609a      	str	r2, [r3, #8]
 8003938:	e011      	b.n	800395e <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 800393a:	bf00      	nop
 800393c:	e000      	b.n	8003940 <ethernetif_update_config+0xb0>
          goto error;
 800393e:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8003940:	4b10      	ldr	r3, [pc, #64]	; (8003984 <ethernetif_update_config+0xf4>)
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	08db      	lsrs	r3, r3, #3
 8003946:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8003948:	4b0e      	ldr	r3, [pc, #56]	; (8003984 <ethernetif_update_config+0xf4>)
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	085b      	lsrs	r3, r3, #1
 800394e:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8003950:	4313      	orrs	r3, r2
 8003952:	b29b      	uxth	r3, r3
 8003954:	461a      	mov	r2, r3
 8003956:	2100      	movs	r1, #0
 8003958:	480a      	ldr	r0, [pc, #40]	; (8003984 <ethernetif_update_config+0xf4>)
 800395a:	f7fe f8c7 	bl	8001aec <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 800395e:	2100      	movs	r1, #0
 8003960:	4808      	ldr	r0, [pc, #32]	; (8003984 <ethernetif_update_config+0xf4>)
 8003962:	f7fe f987 	bl	8001c74 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8003966:	4807      	ldr	r0, [pc, #28]	; (8003984 <ethernetif_update_config+0xf4>)
 8003968:	f7fe f926 	bl	8001bb8 <HAL_ETH_Start>
 800396c:	e002      	b.n	8003974 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 800396e:	4805      	ldr	r0, [pc, #20]	; (8003984 <ethernetif_update_config+0xf4>)
 8003970:	f7fe f951 	bl	8001c16 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f000 f807 	bl	8003988 <ethernetif_notify_conn_changed>
}
 800397a:	bf00      	nop
 800397c:	3710      	adds	r7, #16
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	200031d8 	.word	0x200031d8

08003988 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8003990:	bf00      	nop
 8003992:	370c      	adds	r7, #12
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <__NVIC_SetPriority>:
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	4603      	mov	r3, r0
 80039a4:	6039      	str	r1, [r7, #0]
 80039a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	db0a      	blt.n	80039c6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	b2da      	uxtb	r2, r3
 80039b4:	490c      	ldr	r1, [pc, #48]	; (80039e8 <__NVIC_SetPriority+0x4c>)
 80039b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ba:	0112      	lsls	r2, r2, #4
 80039bc:	b2d2      	uxtb	r2, r2
 80039be:	440b      	add	r3, r1
 80039c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80039c4:	e00a      	b.n	80039dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	b2da      	uxtb	r2, r3
 80039ca:	4908      	ldr	r1, [pc, #32]	; (80039ec <__NVIC_SetPriority+0x50>)
 80039cc:	79fb      	ldrb	r3, [r7, #7]
 80039ce:	f003 030f 	and.w	r3, r3, #15
 80039d2:	3b04      	subs	r3, #4
 80039d4:	0112      	lsls	r2, r2, #4
 80039d6:	b2d2      	uxtb	r2, r2
 80039d8:	440b      	add	r3, r1
 80039da:	761a      	strb	r2, [r3, #24]
}
 80039dc:	bf00      	nop
 80039de:	370c      	adds	r7, #12
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr
 80039e8:	e000e100 	.word	0xe000e100
 80039ec:	e000ed00 	.word	0xe000ed00

080039f0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80039f0:	b580      	push	{r7, lr}
 80039f2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80039f4:	2100      	movs	r1, #0
 80039f6:	f06f 0004 	mvn.w	r0, #4
 80039fa:	f7ff ffcf 	bl	800399c <__NVIC_SetPriority>
#endif
}
 80039fe:	bf00      	nop
 8003a00:	bd80      	pop	{r7, pc}
	...

08003a04 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a0a:	f3ef 8305 	mrs	r3, IPSR
 8003a0e:	603b      	str	r3, [r7, #0]
  return(result);
 8003a10:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d003      	beq.n	8003a1e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003a16:	f06f 0305 	mvn.w	r3, #5
 8003a1a:	607b      	str	r3, [r7, #4]
 8003a1c:	e00c      	b.n	8003a38 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003a1e:	4b0a      	ldr	r3, [pc, #40]	; (8003a48 <osKernelInitialize+0x44>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d105      	bne.n	8003a32 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003a26:	4b08      	ldr	r3, [pc, #32]	; (8003a48 <osKernelInitialize+0x44>)
 8003a28:	2201      	movs	r2, #1
 8003a2a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	607b      	str	r3, [r7, #4]
 8003a30:	e002      	b.n	8003a38 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003a32:	f04f 33ff 	mov.w	r3, #4294967295
 8003a36:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003a38:	687b      	ldr	r3, [r7, #4]
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	370c      	adds	r7, #12
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop
 8003a48:	20003220 	.word	0x20003220

08003a4c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a52:	f3ef 8305 	mrs	r3, IPSR
 8003a56:	603b      	str	r3, [r7, #0]
  return(result);
 8003a58:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d003      	beq.n	8003a66 <osKernelStart+0x1a>
    stat = osErrorISR;
 8003a5e:	f06f 0305 	mvn.w	r3, #5
 8003a62:	607b      	str	r3, [r7, #4]
 8003a64:	e010      	b.n	8003a88 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003a66:	4b0b      	ldr	r3, [pc, #44]	; (8003a94 <osKernelStart+0x48>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d109      	bne.n	8003a82 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003a6e:	f7ff ffbf 	bl	80039f0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003a72:	4b08      	ldr	r3, [pc, #32]	; (8003a94 <osKernelStart+0x48>)
 8003a74:	2202      	movs	r2, #2
 8003a76:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003a78:	f001 ffb2 	bl	80059e0 <vTaskStartScheduler>
      stat = osOK;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	607b      	str	r3, [r7, #4]
 8003a80:	e002      	b.n	8003a88 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003a82:	f04f 33ff 	mov.w	r3, #4294967295
 8003a86:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003a88:	687b      	ldr	r3, [r7, #4]
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3708      	adds	r7, #8
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	20003220 	.word	0x20003220

08003a98 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b082      	sub	sp, #8
 8003a9c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a9e:	f3ef 8305 	mrs	r3, IPSR
 8003aa2:	603b      	str	r3, [r7, #0]
  return(result);
 8003aa4:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d003      	beq.n	8003ab2 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8003aaa:	f002 f8bb 	bl	8005c24 <xTaskGetTickCountFromISR>
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	e002      	b.n	8003ab8 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8003ab2:	f002 f8a7 	bl	8005c04 <xTaskGetTickCount>
 8003ab6:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8003ab8:	687b      	ldr	r3, [r7, #4]
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3708      	adds	r7, #8
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}

08003ac2 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003ac2:	b580      	push	{r7, lr}
 8003ac4:	b08e      	sub	sp, #56	; 0x38
 8003ac6:	af04      	add	r7, sp, #16
 8003ac8:	60f8      	str	r0, [r7, #12]
 8003aca:	60b9      	str	r1, [r7, #8]
 8003acc:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ad2:	f3ef 8305 	mrs	r3, IPSR
 8003ad6:	617b      	str	r3, [r7, #20]
  return(result);
 8003ad8:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d17f      	bne.n	8003bde <osThreadNew+0x11c>
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d07c      	beq.n	8003bde <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 8003ae4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ae8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003aea:	2318      	movs	r3, #24
 8003aec:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003aee:	2300      	movs	r3, #0
 8003af0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003af2:	f04f 33ff 	mov.w	r3, #4294967295
 8003af6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d045      	beq.n	8003b8a <osThreadNew+0xc8>
      if (attr->name != NULL) {
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d002      	beq.n	8003b0c <osThreadNew+0x4a>
        name = attr->name;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	699b      	ldr	r3, [r3, #24]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d002      	beq.n	8003b1a <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	699b      	ldr	r3, [r3, #24]
 8003b18:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d008      	beq.n	8003b32 <osThreadNew+0x70>
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	2b38      	cmp	r3, #56	; 0x38
 8003b24:	d805      	bhi.n	8003b32 <osThreadNew+0x70>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	f003 0301 	and.w	r3, r3, #1
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d001      	beq.n	8003b36 <osThreadNew+0x74>
        return (NULL);
 8003b32:	2300      	movs	r3, #0
 8003b34:	e054      	b.n	8003be0 <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	695b      	ldr	r3, [r3, #20]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d003      	beq.n	8003b46 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	695b      	ldr	r3, [r3, #20]
 8003b42:	089b      	lsrs	r3, r3, #2
 8003b44:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00e      	beq.n	8003b6c <osThreadNew+0xaa>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	2b5b      	cmp	r3, #91	; 0x5b
 8003b54:	d90a      	bls.n	8003b6c <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d006      	beq.n	8003b6c <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	695b      	ldr	r3, [r3, #20]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d002      	beq.n	8003b6c <osThreadNew+0xaa>
        mem = 1;
 8003b66:	2301      	movs	r3, #1
 8003b68:	61bb      	str	r3, [r7, #24]
 8003b6a:	e010      	b.n	8003b8e <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d10c      	bne.n	8003b8e <osThreadNew+0xcc>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d108      	bne.n	8003b8e <osThreadNew+0xcc>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	691b      	ldr	r3, [r3, #16]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d104      	bne.n	8003b8e <osThreadNew+0xcc>
          mem = 0;
 8003b84:	2300      	movs	r3, #0
 8003b86:	61bb      	str	r3, [r7, #24]
 8003b88:	e001      	b.n	8003b8e <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d110      	bne.n	8003bb6 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003b9c:	9202      	str	r2, [sp, #8]
 8003b9e:	9301      	str	r3, [sp, #4]
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	9300      	str	r3, [sp, #0]
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	6a3a      	ldr	r2, [r7, #32]
 8003ba8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003baa:	68f8      	ldr	r0, [r7, #12]
 8003bac:	f001 fd42 	bl	8005634 <xTaskCreateStatic>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	613b      	str	r3, [r7, #16]
 8003bb4:	e013      	b.n	8003bde <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 8003bb6:	69bb      	ldr	r3, [r7, #24]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d110      	bne.n	8003bde <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003bbc:	6a3b      	ldr	r3, [r7, #32]
 8003bbe:	b29a      	uxth	r2, r3
 8003bc0:	f107 0310 	add.w	r3, r7, #16
 8003bc4:	9301      	str	r3, [sp, #4]
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	9300      	str	r3, [sp, #0]
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003bce:	68f8      	ldr	r0, [r7, #12]
 8003bd0:	f001 fd8d 	bl	80056ee <xTaskCreate>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d001      	beq.n	8003bde <osThreadNew+0x11c>
            hTask = NULL;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003bde:	693b      	ldr	r3, [r7, #16]
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3728      	adds	r7, #40	; 0x28
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b084      	sub	sp, #16
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003bf0:	f3ef 8305 	mrs	r3, IPSR
 8003bf4:	60bb      	str	r3, [r7, #8]
  return(result);
 8003bf6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d003      	beq.n	8003c04 <osDelay+0x1c>
    stat = osErrorISR;
 8003bfc:	f06f 0305 	mvn.w	r3, #5
 8003c00:	60fb      	str	r3, [r7, #12]
 8003c02:	e007      	b.n	8003c14 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003c04:	2300      	movs	r3, #0
 8003c06:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d002      	beq.n	8003c14 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f001 feb2 	bl	8005978 <vTaskDelay>
    }
  }

  return (stat);
 8003c14:	68fb      	ldr	r3, [r7, #12]
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3710      	adds	r7, #16
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}

08003c1e <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8003c1e:	b580      	push	{r7, lr}
 8003c20:	b088      	sub	sp, #32
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8003c26:	2300      	movs	r3, #0
 8003c28:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c2a:	f3ef 8305 	mrs	r3, IPSR
 8003c2e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003c30:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d174      	bne.n	8003d20 <osMutexNew+0x102>
    if (attr != NULL) {
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d003      	beq.n	8003c44 <osMutexNew+0x26>
      type = attr->attr_bits;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	61bb      	str	r3, [r7, #24]
 8003c42:	e001      	b.n	8003c48 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8003c44:	2300      	movs	r3, #0
 8003c46:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	f003 0301 	and.w	r3, r3, #1
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d002      	beq.n	8003c58 <osMutexNew+0x3a>
      rmtx = 1U;
 8003c52:	2301      	movs	r3, #1
 8003c54:	617b      	str	r3, [r7, #20]
 8003c56:	e001      	b.n	8003c5c <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8003c5c:	69bb      	ldr	r3, [r7, #24]
 8003c5e:	f003 0308 	and.w	r3, r3, #8
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d15c      	bne.n	8003d20 <osMutexNew+0x102>
      mem = -1;
 8003c66:	f04f 33ff 	mov.w	r3, #4294967295
 8003c6a:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d015      	beq.n	8003c9e <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d006      	beq.n	8003c88 <osMutexNew+0x6a>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	2b4f      	cmp	r3, #79	; 0x4f
 8003c80:	d902      	bls.n	8003c88 <osMutexNew+0x6a>
          mem = 1;
 8003c82:	2301      	movs	r3, #1
 8003c84:	613b      	str	r3, [r7, #16]
 8003c86:	e00c      	b.n	8003ca2 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d108      	bne.n	8003ca2 <osMutexNew+0x84>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d104      	bne.n	8003ca2 <osMutexNew+0x84>
            mem = 0;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	613b      	str	r3, [r7, #16]
 8003c9c:	e001      	b.n	8003ca2 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d112      	bne.n	8003cce <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d007      	beq.n	8003cbe <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	4619      	mov	r1, r3
 8003cb4:	2004      	movs	r0, #4
 8003cb6:	f000 fd68 	bl	800478a <xQueueCreateMutexStatic>
 8003cba:	61f8      	str	r0, [r7, #28]
 8003cbc:	e016      	b.n	8003cec <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	4619      	mov	r1, r3
 8003cc4:	2001      	movs	r0, #1
 8003cc6:	f000 fd60 	bl	800478a <xQueueCreateMutexStatic>
 8003cca:	61f8      	str	r0, [r7, #28]
 8003ccc:	e00e      	b.n	8003cec <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d10b      	bne.n	8003cec <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d004      	beq.n	8003ce4 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8003cda:	2004      	movs	r0, #4
 8003cdc:	f000 fd3d 	bl	800475a <xQueueCreateMutex>
 8003ce0:	61f8      	str	r0, [r7, #28]
 8003ce2:	e003      	b.n	8003cec <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8003ce4:	2001      	movs	r0, #1
 8003ce6:	f000 fd38 	bl	800475a <xQueueCreateMutex>
 8003cea:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8003cec:	69fb      	ldr	r3, [r7, #28]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d00c      	beq.n	8003d0c <osMutexNew+0xee>
        if (attr != NULL) {
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d003      	beq.n	8003d00 <osMutexNew+0xe2>
          name = attr->name;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	60fb      	str	r3, [r7, #12]
 8003cfe:	e001      	b.n	8003d04 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8003d00:	2300      	movs	r3, #0
 8003d02:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8003d04:	68f9      	ldr	r1, [r7, #12]
 8003d06:	69f8      	ldr	r0, [r7, #28]
 8003d08:	f001 fc0c 	bl	8005524 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8003d0c:	69fb      	ldr	r3, [r7, #28]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d006      	beq.n	8003d20 <osMutexNew+0x102>
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d003      	beq.n	8003d20 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	f043 0301 	orr.w	r3, r3, #1
 8003d1e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8003d20:	69fb      	ldr	r3, [r7, #28]
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3720      	adds	r7, #32
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}

08003d2a <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8003d2a:	b580      	push	{r7, lr}
 8003d2c:	b086      	sub	sp, #24
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	6078      	str	r0, [r7, #4]
 8003d32:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f023 0301 	bic.w	r3, r3, #1
 8003d3a:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f003 0301 	and.w	r3, r3, #1
 8003d42:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8003d44:	2300      	movs	r3, #0
 8003d46:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d48:	f3ef 8305 	mrs	r3, IPSR
 8003d4c:	60bb      	str	r3, [r7, #8]
  return(result);
 8003d4e:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d003      	beq.n	8003d5c <osMutexAcquire+0x32>
    stat = osErrorISR;
 8003d54:	f06f 0305 	mvn.w	r3, #5
 8003d58:	617b      	str	r3, [r7, #20]
 8003d5a:	e02c      	b.n	8003db6 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d103      	bne.n	8003d6a <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8003d62:	f06f 0303 	mvn.w	r3, #3
 8003d66:	617b      	str	r3, [r7, #20]
 8003d68:	e025      	b.n	8003db6 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d011      	beq.n	8003d94 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8003d70:	6839      	ldr	r1, [r7, #0]
 8003d72:	6938      	ldr	r0, [r7, #16]
 8003d74:	f000 fd58 	bl	8004828 <xQueueTakeMutexRecursive>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d01b      	beq.n	8003db6 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d003      	beq.n	8003d8c <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8003d84:	f06f 0301 	mvn.w	r3, #1
 8003d88:	617b      	str	r3, [r7, #20]
 8003d8a:	e014      	b.n	8003db6 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8003d8c:	f06f 0302 	mvn.w	r3, #2
 8003d90:	617b      	str	r3, [r7, #20]
 8003d92:	e010      	b.n	8003db6 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8003d94:	6839      	ldr	r1, [r7, #0]
 8003d96:	6938      	ldr	r0, [r7, #16]
 8003d98:	f001 f8ec 	bl	8004f74 <xQueueSemaphoreTake>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d009      	beq.n	8003db6 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d003      	beq.n	8003db0 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8003da8:	f06f 0301 	mvn.w	r3, #1
 8003dac:	617b      	str	r3, [r7, #20]
 8003dae:	e002      	b.n	8003db6 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8003db0:	f06f 0302 	mvn.w	r3, #2
 8003db4:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8003db6:	697b      	ldr	r3, [r7, #20]
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3718      	adds	r7, #24
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}

08003dc0 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b086      	sub	sp, #24
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f023 0301 	bic.w	r3, r3, #1
 8003dce:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f003 0301 	and.w	r3, r3, #1
 8003dd6:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ddc:	f3ef 8305 	mrs	r3, IPSR
 8003de0:	60bb      	str	r3, [r7, #8]
  return(result);
 8003de2:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d003      	beq.n	8003df0 <osMutexRelease+0x30>
    stat = osErrorISR;
 8003de8:	f06f 0305 	mvn.w	r3, #5
 8003dec:	617b      	str	r3, [r7, #20]
 8003dee:	e01f      	b.n	8003e30 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d103      	bne.n	8003dfe <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8003df6:	f06f 0303 	mvn.w	r3, #3
 8003dfa:	617b      	str	r3, [r7, #20]
 8003dfc:	e018      	b.n	8003e30 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d009      	beq.n	8003e18 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8003e04:	6938      	ldr	r0, [r7, #16]
 8003e06:	f000 fcdb 	bl	80047c0 <xQueueGiveMutexRecursive>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d00f      	beq.n	8003e30 <osMutexRelease+0x70>
        stat = osErrorResource;
 8003e10:	f06f 0302 	mvn.w	r3, #2
 8003e14:	617b      	str	r3, [r7, #20]
 8003e16:	e00b      	b.n	8003e30 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8003e18:	2300      	movs	r3, #0
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	2100      	movs	r1, #0
 8003e1e:	6938      	ldr	r0, [r7, #16]
 8003e20:	f000 fda2 	bl	8004968 <xQueueGenericSend>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d002      	beq.n	8003e30 <osMutexRelease+0x70>
        stat = osErrorResource;
 8003e2a:	f06f 0302 	mvn.w	r3, #2
 8003e2e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8003e30:	697b      	ldr	r3, [r7, #20]
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3718      	adds	r7, #24
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}

08003e3a <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8003e3a:	b580      	push	{r7, lr}
 8003e3c:	b08a      	sub	sp, #40	; 0x28
 8003e3e:	af02      	add	r7, sp, #8
 8003e40:	60f8      	str	r0, [r7, #12]
 8003e42:	60b9      	str	r1, [r7, #8]
 8003e44:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8003e46:	2300      	movs	r3, #0
 8003e48:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e4a:	f3ef 8305 	mrs	r3, IPSR
 8003e4e:	613b      	str	r3, [r7, #16]
  return(result);
 8003e50:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d175      	bne.n	8003f42 <osSemaphoreNew+0x108>
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d072      	beq.n	8003f42 <osSemaphoreNew+0x108>
 8003e5c:	68ba      	ldr	r2, [r7, #8]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d86e      	bhi.n	8003f42 <osSemaphoreNew+0x108>
    mem = -1;
 8003e64:	f04f 33ff 	mov.w	r3, #4294967295
 8003e68:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d015      	beq.n	8003e9c <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d006      	beq.n	8003e86 <osSemaphoreNew+0x4c>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	2b4f      	cmp	r3, #79	; 0x4f
 8003e7e:	d902      	bls.n	8003e86 <osSemaphoreNew+0x4c>
        mem = 1;
 8003e80:	2301      	movs	r3, #1
 8003e82:	61bb      	str	r3, [r7, #24]
 8003e84:	e00c      	b.n	8003ea0 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d108      	bne.n	8003ea0 <osSemaphoreNew+0x66>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	68db      	ldr	r3, [r3, #12]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d104      	bne.n	8003ea0 <osSemaphoreNew+0x66>
          mem = 0;
 8003e96:	2300      	movs	r3, #0
 8003e98:	61bb      	str	r3, [r7, #24]
 8003e9a:	e001      	b.n	8003ea0 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8003ea0:	69bb      	ldr	r3, [r7, #24]
 8003ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ea6:	d04c      	beq.n	8003f42 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d128      	bne.n	8003f00 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d10a      	bne.n	8003eca <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	2203      	movs	r2, #3
 8003eba:	9200      	str	r2, [sp, #0]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	2100      	movs	r1, #0
 8003ec0:	2001      	movs	r0, #1
 8003ec2:	f000 fb5b 	bl	800457c <xQueueGenericCreateStatic>
 8003ec6:	61f8      	str	r0, [r7, #28]
 8003ec8:	e005      	b.n	8003ed6 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8003eca:	2203      	movs	r2, #3
 8003ecc:	2100      	movs	r1, #0
 8003ece:	2001      	movs	r0, #1
 8003ed0:	f000 fbcc 	bl	800466c <xQueueGenericCreate>
 8003ed4:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d022      	beq.n	8003f22 <osSemaphoreNew+0xe8>
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d01f      	beq.n	8003f22 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	2100      	movs	r1, #0
 8003ee8:	69f8      	ldr	r0, [r7, #28]
 8003eea:	f000 fd3d 	bl	8004968 <xQueueGenericSend>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d016      	beq.n	8003f22 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8003ef4:	69f8      	ldr	r0, [r7, #28]
 8003ef6:	f001 f9c9 	bl	800528c <vQueueDelete>
            hSemaphore = NULL;
 8003efa:	2300      	movs	r3, #0
 8003efc:	61fb      	str	r3, [r7, #28]
 8003efe:	e010      	b.n	8003f22 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d108      	bne.n	8003f18 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	68b9      	ldr	r1, [r7, #8]
 8003f0e:	68f8      	ldr	r0, [r7, #12]
 8003f10:	f000 fcc0 	bl	8004894 <xQueueCreateCountingSemaphoreStatic>
 8003f14:	61f8      	str	r0, [r7, #28]
 8003f16:	e004      	b.n	8003f22 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8003f18:	68b9      	ldr	r1, [r7, #8]
 8003f1a:	68f8      	ldr	r0, [r7, #12]
 8003f1c:	f000 fcf1 	bl	8004902 <xQueueCreateCountingSemaphore>
 8003f20:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d00c      	beq.n	8003f42 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d003      	beq.n	8003f36 <osSemaphoreNew+0xfc>
          name = attr->name;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	617b      	str	r3, [r7, #20]
 8003f34:	e001      	b.n	8003f3a <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8003f36:	2300      	movs	r3, #0
 8003f38:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8003f3a:	6979      	ldr	r1, [r7, #20]
 8003f3c:	69f8      	ldr	r0, [r7, #28]
 8003f3e:	f001 faf1 	bl	8005524 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8003f42:	69fb      	ldr	r3, [r7, #28]
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3720      	adds	r7, #32
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}

08003f4c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b086      	sub	sp, #24
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d103      	bne.n	8003f6c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8003f64:	f06f 0303 	mvn.w	r3, #3
 8003f68:	617b      	str	r3, [r7, #20]
 8003f6a:	e039      	b.n	8003fe0 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f6c:	f3ef 8305 	mrs	r3, IPSR
 8003f70:	60fb      	str	r3, [r7, #12]
  return(result);
 8003f72:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d022      	beq.n	8003fbe <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d003      	beq.n	8003f86 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8003f7e:	f06f 0303 	mvn.w	r3, #3
 8003f82:	617b      	str	r3, [r7, #20]
 8003f84:	e02c      	b.n	8003fe0 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8003f86:	2300      	movs	r3, #0
 8003f88:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8003f8a:	f107 0308 	add.w	r3, r7, #8
 8003f8e:	461a      	mov	r2, r3
 8003f90:	2100      	movs	r1, #0
 8003f92:	6938      	ldr	r0, [r7, #16]
 8003f94:	f001 f8fa 	bl	800518c <xQueueReceiveFromISR>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d003      	beq.n	8003fa6 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8003f9e:	f06f 0302 	mvn.w	r3, #2
 8003fa2:	617b      	str	r3, [r7, #20]
 8003fa4:	e01c      	b.n	8003fe0 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d019      	beq.n	8003fe0 <osSemaphoreAcquire+0x94>
 8003fac:	4b0f      	ldr	r3, [pc, #60]	; (8003fec <osSemaphoreAcquire+0xa0>)
 8003fae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fb2:	601a      	str	r2, [r3, #0]
 8003fb4:	f3bf 8f4f 	dsb	sy
 8003fb8:	f3bf 8f6f 	isb	sy
 8003fbc:	e010      	b.n	8003fe0 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8003fbe:	6839      	ldr	r1, [r7, #0]
 8003fc0:	6938      	ldr	r0, [r7, #16]
 8003fc2:	f000 ffd7 	bl	8004f74 <xQueueSemaphoreTake>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d009      	beq.n	8003fe0 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d003      	beq.n	8003fda <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8003fd2:	f06f 0301 	mvn.w	r3, #1
 8003fd6:	617b      	str	r3, [r7, #20]
 8003fd8:	e002      	b.n	8003fe0 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8003fda:	f06f 0302 	mvn.w	r3, #2
 8003fde:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8003fe0:	697b      	ldr	r3, [r7, #20]
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3718      	adds	r7, #24
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}
 8003fea:	bf00      	nop
 8003fec:	e000ed04 	.word	0xe000ed04

08003ff0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b086      	sub	sp, #24
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d103      	bne.n	800400e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8004006:	f06f 0303 	mvn.w	r3, #3
 800400a:	617b      	str	r3, [r7, #20]
 800400c:	e02c      	b.n	8004068 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800400e:	f3ef 8305 	mrs	r3, IPSR
 8004012:	60fb      	str	r3, [r7, #12]
  return(result);
 8004014:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8004016:	2b00      	cmp	r3, #0
 8004018:	d01a      	beq.n	8004050 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800401a:	2300      	movs	r3, #0
 800401c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800401e:	f107 0308 	add.w	r3, r7, #8
 8004022:	4619      	mov	r1, r3
 8004024:	6938      	ldr	r0, [r7, #16]
 8004026:	f000 fe38 	bl	8004c9a <xQueueGiveFromISR>
 800402a:	4603      	mov	r3, r0
 800402c:	2b01      	cmp	r3, #1
 800402e:	d003      	beq.n	8004038 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8004030:	f06f 0302 	mvn.w	r3, #2
 8004034:	617b      	str	r3, [r7, #20]
 8004036:	e017      	b.n	8004068 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d014      	beq.n	8004068 <osSemaphoreRelease+0x78>
 800403e:	4b0d      	ldr	r3, [pc, #52]	; (8004074 <osSemaphoreRelease+0x84>)
 8004040:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004044:	601a      	str	r2, [r3, #0]
 8004046:	f3bf 8f4f 	dsb	sy
 800404a:	f3bf 8f6f 	isb	sy
 800404e:	e00b      	b.n	8004068 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004050:	2300      	movs	r3, #0
 8004052:	2200      	movs	r2, #0
 8004054:	2100      	movs	r1, #0
 8004056:	6938      	ldr	r0, [r7, #16]
 8004058:	f000 fc86 	bl	8004968 <xQueueGenericSend>
 800405c:	4603      	mov	r3, r0
 800405e:	2b01      	cmp	r3, #1
 8004060:	d002      	beq.n	8004068 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8004062:	f06f 0302 	mvn.w	r3, #2
 8004066:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8004068:	697b      	ldr	r3, [r7, #20]
}
 800406a:	4618      	mov	r0, r3
 800406c:	3718      	adds	r7, #24
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	e000ed04 	.word	0xe000ed04

08004078 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004078:	b580      	push	{r7, lr}
 800407a:	b08a      	sub	sp, #40	; 0x28
 800407c:	af02      	add	r7, sp, #8
 800407e:	60f8      	str	r0, [r7, #12]
 8004080:	60b9      	str	r1, [r7, #8]
 8004082:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004084:	2300      	movs	r3, #0
 8004086:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004088:	f3ef 8305 	mrs	r3, IPSR
 800408c:	613b      	str	r3, [r7, #16]
  return(result);
 800408e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004090:	2b00      	cmp	r3, #0
 8004092:	d15f      	bne.n	8004154 <osMessageQueueNew+0xdc>
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d05c      	beq.n	8004154 <osMessageQueueNew+0xdc>
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d059      	beq.n	8004154 <osMessageQueueNew+0xdc>
    mem = -1;
 80040a0:	f04f 33ff 	mov.w	r3, #4294967295
 80040a4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d029      	beq.n	8004100 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d012      	beq.n	80040da <osMessageQueueNew+0x62>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	2b4f      	cmp	r3, #79	; 0x4f
 80040ba:	d90e      	bls.n	80040da <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d00a      	beq.n	80040da <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	695a      	ldr	r2, [r3, #20]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	68b9      	ldr	r1, [r7, #8]
 80040cc:	fb01 f303 	mul.w	r3, r1, r3
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d302      	bcc.n	80040da <osMessageQueueNew+0x62>
        mem = 1;
 80040d4:	2301      	movs	r3, #1
 80040d6:	61bb      	str	r3, [r7, #24]
 80040d8:	e014      	b.n	8004104 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d110      	bne.n	8004104 <osMessageQueueNew+0x8c>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d10c      	bne.n	8004104 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d108      	bne.n	8004104 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	695b      	ldr	r3, [r3, #20]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d104      	bne.n	8004104 <osMessageQueueNew+0x8c>
          mem = 0;
 80040fa:	2300      	movs	r3, #0
 80040fc:	61bb      	str	r3, [r7, #24]
 80040fe:	e001      	b.n	8004104 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8004100:	2300      	movs	r3, #0
 8004102:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	2b01      	cmp	r3, #1
 8004108:	d10b      	bne.n	8004122 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	691a      	ldr	r2, [r3, #16]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	2100      	movs	r1, #0
 8004114:	9100      	str	r1, [sp, #0]
 8004116:	68b9      	ldr	r1, [r7, #8]
 8004118:	68f8      	ldr	r0, [r7, #12]
 800411a:	f000 fa2f 	bl	800457c <xQueueGenericCreateStatic>
 800411e:	61f8      	str	r0, [r7, #28]
 8004120:	e008      	b.n	8004134 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8004122:	69bb      	ldr	r3, [r7, #24]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d105      	bne.n	8004134 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8004128:	2200      	movs	r2, #0
 800412a:	68b9      	ldr	r1, [r7, #8]
 800412c:	68f8      	ldr	r0, [r7, #12]
 800412e:	f000 fa9d 	bl	800466c <xQueueGenericCreate>
 8004132:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d00c      	beq.n	8004154 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d003      	beq.n	8004148 <osMessageQueueNew+0xd0>
        name = attr->name;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	617b      	str	r3, [r7, #20]
 8004146:	e001      	b.n	800414c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8004148:	2300      	movs	r3, #0
 800414a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800414c:	6979      	ldr	r1, [r7, #20]
 800414e:	69f8      	ldr	r0, [r7, #28]
 8004150:	f001 f9e8 	bl	8005524 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8004154:	69fb      	ldr	r3, [r7, #28]
}
 8004156:	4618      	mov	r0, r3
 8004158:	3720      	adds	r7, #32
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
	...

08004160 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8004160:	b580      	push	{r7, lr}
 8004162:	b088      	sub	sp, #32
 8004164:	af00      	add	r7, sp, #0
 8004166:	60f8      	str	r0, [r7, #12]
 8004168:	60b9      	str	r1, [r7, #8]
 800416a:	603b      	str	r3, [r7, #0]
 800416c:	4613      	mov	r3, r2
 800416e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004174:	2300      	movs	r3, #0
 8004176:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004178:	f3ef 8305 	mrs	r3, IPSR
 800417c:	617b      	str	r3, [r7, #20]
  return(result);
 800417e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8004180:	2b00      	cmp	r3, #0
 8004182:	d028      	beq.n	80041d6 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004184:	69bb      	ldr	r3, [r7, #24]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d005      	beq.n	8004196 <osMessageQueuePut+0x36>
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d002      	beq.n	8004196 <osMessageQueuePut+0x36>
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d003      	beq.n	800419e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8004196:	f06f 0303 	mvn.w	r3, #3
 800419a:	61fb      	str	r3, [r7, #28]
 800419c:	e038      	b.n	8004210 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800419e:	2300      	movs	r3, #0
 80041a0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80041a2:	f107 0210 	add.w	r2, r7, #16
 80041a6:	2300      	movs	r3, #0
 80041a8:	68b9      	ldr	r1, [r7, #8]
 80041aa:	69b8      	ldr	r0, [r7, #24]
 80041ac:	f000 fcda 	bl	8004b64 <xQueueGenericSendFromISR>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d003      	beq.n	80041be <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80041b6:	f06f 0302 	mvn.w	r3, #2
 80041ba:	61fb      	str	r3, [r7, #28]
 80041bc:	e028      	b.n	8004210 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d025      	beq.n	8004210 <osMessageQueuePut+0xb0>
 80041c4:	4b15      	ldr	r3, [pc, #84]	; (800421c <osMessageQueuePut+0xbc>)
 80041c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041ca:	601a      	str	r2, [r3, #0]
 80041cc:	f3bf 8f4f 	dsb	sy
 80041d0:	f3bf 8f6f 	isb	sy
 80041d4:	e01c      	b.n	8004210 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80041d6:	69bb      	ldr	r3, [r7, #24]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d002      	beq.n	80041e2 <osMessageQueuePut+0x82>
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d103      	bne.n	80041ea <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80041e2:	f06f 0303 	mvn.w	r3, #3
 80041e6:	61fb      	str	r3, [r7, #28]
 80041e8:	e012      	b.n	8004210 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80041ea:	2300      	movs	r3, #0
 80041ec:	683a      	ldr	r2, [r7, #0]
 80041ee:	68b9      	ldr	r1, [r7, #8]
 80041f0:	69b8      	ldr	r0, [r7, #24]
 80041f2:	f000 fbb9 	bl	8004968 <xQueueGenericSend>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d009      	beq.n	8004210 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d003      	beq.n	800420a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8004202:	f06f 0301 	mvn.w	r3, #1
 8004206:	61fb      	str	r3, [r7, #28]
 8004208:	e002      	b.n	8004210 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800420a:	f06f 0302 	mvn.w	r3, #2
 800420e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004210:	69fb      	ldr	r3, [r7, #28]
}
 8004212:	4618      	mov	r0, r3
 8004214:	3720      	adds	r7, #32
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	e000ed04 	.word	0xe000ed04

08004220 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8004220:	b580      	push	{r7, lr}
 8004222:	b088      	sub	sp, #32
 8004224:	af00      	add	r7, sp, #0
 8004226:	60f8      	str	r0, [r7, #12]
 8004228:	60b9      	str	r1, [r7, #8]
 800422a:	607a      	str	r2, [r7, #4]
 800422c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004232:	2300      	movs	r3, #0
 8004234:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004236:	f3ef 8305 	mrs	r3, IPSR
 800423a:	617b      	str	r3, [r7, #20]
  return(result);
 800423c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800423e:	2b00      	cmp	r3, #0
 8004240:	d028      	beq.n	8004294 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004242:	69bb      	ldr	r3, [r7, #24]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d005      	beq.n	8004254 <osMessageQueueGet+0x34>
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d002      	beq.n	8004254 <osMessageQueueGet+0x34>
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d003      	beq.n	800425c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8004254:	f06f 0303 	mvn.w	r3, #3
 8004258:	61fb      	str	r3, [r7, #28]
 800425a:	e037      	b.n	80042cc <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800425c:	2300      	movs	r3, #0
 800425e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8004260:	f107 0310 	add.w	r3, r7, #16
 8004264:	461a      	mov	r2, r3
 8004266:	68b9      	ldr	r1, [r7, #8]
 8004268:	69b8      	ldr	r0, [r7, #24]
 800426a:	f000 ff8f 	bl	800518c <xQueueReceiveFromISR>
 800426e:	4603      	mov	r3, r0
 8004270:	2b01      	cmp	r3, #1
 8004272:	d003      	beq.n	800427c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8004274:	f06f 0302 	mvn.w	r3, #2
 8004278:	61fb      	str	r3, [r7, #28]
 800427a:	e027      	b.n	80042cc <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d024      	beq.n	80042cc <osMessageQueueGet+0xac>
 8004282:	4b15      	ldr	r3, [pc, #84]	; (80042d8 <osMessageQueueGet+0xb8>)
 8004284:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004288:	601a      	str	r2, [r3, #0]
 800428a:	f3bf 8f4f 	dsb	sy
 800428e:	f3bf 8f6f 	isb	sy
 8004292:	e01b      	b.n	80042cc <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004294:	69bb      	ldr	r3, [r7, #24]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d002      	beq.n	80042a0 <osMessageQueueGet+0x80>
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d103      	bne.n	80042a8 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80042a0:	f06f 0303 	mvn.w	r3, #3
 80042a4:	61fb      	str	r3, [r7, #28]
 80042a6:	e011      	b.n	80042cc <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80042a8:	683a      	ldr	r2, [r7, #0]
 80042aa:	68b9      	ldr	r1, [r7, #8]
 80042ac:	69b8      	ldr	r0, [r7, #24]
 80042ae:	f000 fd81 	bl	8004db4 <xQueueReceive>
 80042b2:	4603      	mov	r3, r0
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d009      	beq.n	80042cc <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d003      	beq.n	80042c6 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80042be:	f06f 0301 	mvn.w	r3, #1
 80042c2:	61fb      	str	r3, [r7, #28]
 80042c4:	e002      	b.n	80042cc <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80042c6:	f06f 0302 	mvn.w	r3, #2
 80042ca:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80042cc:	69fb      	ldr	r3, [r7, #28]
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3720      	adds	r7, #32
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	e000ed04 	.word	0xe000ed04

080042dc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80042dc:	b480      	push	{r7}
 80042de:	b085      	sub	sp, #20
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	60b9      	str	r1, [r7, #8]
 80042e6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	4a07      	ldr	r2, [pc, #28]	; (8004308 <vApplicationGetIdleTaskMemory+0x2c>)
 80042ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	4a06      	ldr	r2, [pc, #24]	; (800430c <vApplicationGetIdleTaskMemory+0x30>)
 80042f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80042fa:	601a      	str	r2, [r3, #0]
}
 80042fc:	bf00      	nop
 80042fe:	3714      	adds	r7, #20
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr
 8004308:	20003224 	.word	0x20003224
 800430c:	20003280 	.word	0x20003280

08004310 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004310:	b480      	push	{r7}
 8004312:	b085      	sub	sp, #20
 8004314:	af00      	add	r7, sp, #0
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	4a07      	ldr	r2, [pc, #28]	; (800433c <vApplicationGetTimerTaskMemory+0x2c>)
 8004320:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	4a06      	ldr	r2, [pc, #24]	; (8004340 <vApplicationGetTimerTaskMemory+0x30>)
 8004326:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800432e:	601a      	str	r2, [r3, #0]
}
 8004330:	bf00      	nop
 8004332:	3714      	adds	r7, #20
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr
 800433c:	20004280 	.word	0x20004280
 8004340:	200042dc 	.word	0x200042dc

08004344 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f103 0208 	add.w	r2, r3, #8
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f04f 32ff 	mov.w	r2, #4294967295
 800435c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f103 0208 	add.w	r2, r3, #8
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f103 0208 	add.w	r2, r3, #8
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004378:	bf00      	nop
 800437a:	370c      	adds	r7, #12
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr

08004384 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2200      	movs	r2, #0
 8004390:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004392:	bf00      	nop
 8004394:	370c      	adds	r7, #12
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr

0800439e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800439e:	b480      	push	{r7}
 80043a0:	b085      	sub	sp, #20
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	6078      	str	r0, [r7, #4]
 80043a6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	68fa      	ldr	r2, [r7, #12]
 80043b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	689a      	ldr	r2, [r3, #8]
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	683a      	ldr	r2, [r7, #0]
 80043c2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	683a      	ldr	r2, [r7, #0]
 80043c8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	1c5a      	adds	r2, r3, #1
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	601a      	str	r2, [r3, #0]
}
 80043da:	bf00      	nop
 80043dc:	3714      	adds	r7, #20
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr

080043e6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80043e6:	b480      	push	{r7}
 80043e8:	b085      	sub	sp, #20
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	6078      	str	r0, [r7, #4]
 80043ee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043fc:	d103      	bne.n	8004406 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	60fb      	str	r3, [r7, #12]
 8004404:	e00c      	b.n	8004420 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	3308      	adds	r3, #8
 800440a:	60fb      	str	r3, [r7, #12]
 800440c:	e002      	b.n	8004414 <vListInsert+0x2e>
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	60fb      	str	r3, [r7, #12]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	68ba      	ldr	r2, [r7, #8]
 800441c:	429a      	cmp	r2, r3
 800441e:	d2f6      	bcs.n	800440e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	685a      	ldr	r2, [r3, #4]
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	683a      	ldr	r2, [r7, #0]
 800442e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	68fa      	ldr	r2, [r7, #12]
 8004434:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	683a      	ldr	r2, [r7, #0]
 800443a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	1c5a      	adds	r2, r3, #1
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	601a      	str	r2, [r3, #0]
}
 800444c:	bf00      	nop
 800444e:	3714      	adds	r7, #20
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004458:	b480      	push	{r7}
 800445a:	b085      	sub	sp, #20
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	691b      	ldr	r3, [r3, #16]
 8004464:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	6892      	ldr	r2, [r2, #8]
 800446e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	6852      	ldr	r2, [r2, #4]
 8004478:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	429a      	cmp	r2, r3
 8004482:	d103      	bne.n	800448c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	689a      	ldr	r2, [r3, #8]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	1e5a      	subs	r2, r3, #1
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3714      	adds	r7, #20
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d10a      	bne.n	80044d6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80044c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044c4:	f383 8811 	msr	BASEPRI, r3
 80044c8:	f3bf 8f6f 	isb	sy
 80044cc:	f3bf 8f4f 	dsb	sy
 80044d0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80044d2:	bf00      	nop
 80044d4:	e7fe      	b.n	80044d4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80044d6:	f002 fd45 	bl	8006f64 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044e2:	68f9      	ldr	r1, [r7, #12]
 80044e4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80044e6:	fb01 f303 	mul.w	r3, r1, r3
 80044ea:	441a      	add	r2, r3
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2200      	movs	r2, #0
 80044f4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004506:	3b01      	subs	r3, #1
 8004508:	68f9      	ldr	r1, [r7, #12]
 800450a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800450c:	fb01 f303 	mul.w	r3, r1, r3
 8004510:	441a      	add	r2, r3
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	22ff      	movs	r2, #255	; 0xff
 800451a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	22ff      	movs	r2, #255	; 0xff
 8004522:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d114      	bne.n	8004556 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	691b      	ldr	r3, [r3, #16]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d01a      	beq.n	800456a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	3310      	adds	r3, #16
 8004538:	4618      	mov	r0, r3
 800453a:	f001 fced 	bl	8005f18 <xTaskRemoveFromEventList>
 800453e:	4603      	mov	r3, r0
 8004540:	2b00      	cmp	r3, #0
 8004542:	d012      	beq.n	800456a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004544:	4b0c      	ldr	r3, [pc, #48]	; (8004578 <xQueueGenericReset+0xcc>)
 8004546:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800454a:	601a      	str	r2, [r3, #0]
 800454c:	f3bf 8f4f 	dsb	sy
 8004550:	f3bf 8f6f 	isb	sy
 8004554:	e009      	b.n	800456a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	3310      	adds	r3, #16
 800455a:	4618      	mov	r0, r3
 800455c:	f7ff fef2 	bl	8004344 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	3324      	adds	r3, #36	; 0x24
 8004564:	4618      	mov	r0, r3
 8004566:	f7ff feed 	bl	8004344 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800456a:	f002 fd2b 	bl	8006fc4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800456e:	2301      	movs	r3, #1
}
 8004570:	4618      	mov	r0, r3
 8004572:	3710      	adds	r7, #16
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}
 8004578:	e000ed04 	.word	0xe000ed04

0800457c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800457c:	b580      	push	{r7, lr}
 800457e:	b08e      	sub	sp, #56	; 0x38
 8004580:	af02      	add	r7, sp, #8
 8004582:	60f8      	str	r0, [r7, #12]
 8004584:	60b9      	str	r1, [r7, #8]
 8004586:	607a      	str	r2, [r7, #4]
 8004588:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d10a      	bne.n	80045a6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004594:	f383 8811 	msr	BASEPRI, r3
 8004598:	f3bf 8f6f 	isb	sy
 800459c:	f3bf 8f4f 	dsb	sy
 80045a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80045a2:	bf00      	nop
 80045a4:	e7fe      	b.n	80045a4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d10a      	bne.n	80045c2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80045ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045b0:	f383 8811 	msr	BASEPRI, r3
 80045b4:	f3bf 8f6f 	isb	sy
 80045b8:	f3bf 8f4f 	dsb	sy
 80045bc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80045be:	bf00      	nop
 80045c0:	e7fe      	b.n	80045c0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d002      	beq.n	80045ce <xQueueGenericCreateStatic+0x52>
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d001      	beq.n	80045d2 <xQueueGenericCreateStatic+0x56>
 80045ce:	2301      	movs	r3, #1
 80045d0:	e000      	b.n	80045d4 <xQueueGenericCreateStatic+0x58>
 80045d2:	2300      	movs	r3, #0
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d10a      	bne.n	80045ee <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80045d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045dc:	f383 8811 	msr	BASEPRI, r3
 80045e0:	f3bf 8f6f 	isb	sy
 80045e4:	f3bf 8f4f 	dsb	sy
 80045e8:	623b      	str	r3, [r7, #32]
}
 80045ea:	bf00      	nop
 80045ec:	e7fe      	b.n	80045ec <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d102      	bne.n	80045fa <xQueueGenericCreateStatic+0x7e>
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d101      	bne.n	80045fe <xQueueGenericCreateStatic+0x82>
 80045fa:	2301      	movs	r3, #1
 80045fc:	e000      	b.n	8004600 <xQueueGenericCreateStatic+0x84>
 80045fe:	2300      	movs	r3, #0
 8004600:	2b00      	cmp	r3, #0
 8004602:	d10a      	bne.n	800461a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004608:	f383 8811 	msr	BASEPRI, r3
 800460c:	f3bf 8f6f 	isb	sy
 8004610:	f3bf 8f4f 	dsb	sy
 8004614:	61fb      	str	r3, [r7, #28]
}
 8004616:	bf00      	nop
 8004618:	e7fe      	b.n	8004618 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800461a:	2350      	movs	r3, #80	; 0x50
 800461c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	2b50      	cmp	r3, #80	; 0x50
 8004622:	d00a      	beq.n	800463a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004628:	f383 8811 	msr	BASEPRI, r3
 800462c:	f3bf 8f6f 	isb	sy
 8004630:	f3bf 8f4f 	dsb	sy
 8004634:	61bb      	str	r3, [r7, #24]
}
 8004636:	bf00      	nop
 8004638:	e7fe      	b.n	8004638 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800463a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004642:	2b00      	cmp	r3, #0
 8004644:	d00d      	beq.n	8004662 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004648:	2201      	movs	r2, #1
 800464a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800464e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004654:	9300      	str	r3, [sp, #0]
 8004656:	4613      	mov	r3, r2
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	68b9      	ldr	r1, [r7, #8]
 800465c:	68f8      	ldr	r0, [r7, #12]
 800465e:	f000 f83f 	bl	80046e0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004664:	4618      	mov	r0, r3
 8004666:	3730      	adds	r7, #48	; 0x30
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}

0800466c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800466c:	b580      	push	{r7, lr}
 800466e:	b08a      	sub	sp, #40	; 0x28
 8004670:	af02      	add	r7, sp, #8
 8004672:	60f8      	str	r0, [r7, #12]
 8004674:	60b9      	str	r1, [r7, #8]
 8004676:	4613      	mov	r3, r2
 8004678:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d10a      	bne.n	8004696 <xQueueGenericCreate+0x2a>
	__asm volatile
 8004680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004684:	f383 8811 	msr	BASEPRI, r3
 8004688:	f3bf 8f6f 	isb	sy
 800468c:	f3bf 8f4f 	dsb	sy
 8004690:	613b      	str	r3, [r7, #16]
}
 8004692:	bf00      	nop
 8004694:	e7fe      	b.n	8004694 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	68ba      	ldr	r2, [r7, #8]
 800469a:	fb02 f303 	mul.w	r3, r2, r3
 800469e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80046a0:	69fb      	ldr	r3, [r7, #28]
 80046a2:	3350      	adds	r3, #80	; 0x50
 80046a4:	4618      	mov	r0, r3
 80046a6:	f002 fd7f 	bl	80071a8 <pvPortMalloc>
 80046aa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d011      	beq.n	80046d6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80046b2:	69bb      	ldr	r3, [r7, #24]
 80046b4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	3350      	adds	r3, #80	; 0x50
 80046ba:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80046bc:	69bb      	ldr	r3, [r7, #24]
 80046be:	2200      	movs	r2, #0
 80046c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80046c4:	79fa      	ldrb	r2, [r7, #7]
 80046c6:	69bb      	ldr	r3, [r7, #24]
 80046c8:	9300      	str	r3, [sp, #0]
 80046ca:	4613      	mov	r3, r2
 80046cc:	697a      	ldr	r2, [r7, #20]
 80046ce:	68b9      	ldr	r1, [r7, #8]
 80046d0:	68f8      	ldr	r0, [r7, #12]
 80046d2:	f000 f805 	bl	80046e0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80046d6:	69bb      	ldr	r3, [r7, #24]
	}
 80046d8:	4618      	mov	r0, r3
 80046da:	3720      	adds	r7, #32
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}

080046e0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b084      	sub	sp, #16
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	607a      	str	r2, [r7, #4]
 80046ec:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d103      	bne.n	80046fc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80046f4:	69bb      	ldr	r3, [r7, #24]
 80046f6:	69ba      	ldr	r2, [r7, #24]
 80046f8:	601a      	str	r2, [r3, #0]
 80046fa:	e002      	b.n	8004702 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004702:	69bb      	ldr	r3, [r7, #24]
 8004704:	68fa      	ldr	r2, [r7, #12]
 8004706:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004708:	69bb      	ldr	r3, [r7, #24]
 800470a:	68ba      	ldr	r2, [r7, #8]
 800470c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800470e:	2101      	movs	r1, #1
 8004710:	69b8      	ldr	r0, [r7, #24]
 8004712:	f7ff fecb 	bl	80044ac <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004716:	69bb      	ldr	r3, [r7, #24]
 8004718:	78fa      	ldrb	r2, [r7, #3]
 800471a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800471e:	bf00      	nop
 8004720:	3710      	adds	r7, #16
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}

08004726 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004726:	b580      	push	{r7, lr}
 8004728:	b082      	sub	sp, #8
 800472a:	af00      	add	r7, sp, #0
 800472c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d00e      	beq.n	8004752 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004746:	2300      	movs	r3, #0
 8004748:	2200      	movs	r2, #0
 800474a:	2100      	movs	r1, #0
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f000 f90b 	bl	8004968 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004752:	bf00      	nop
 8004754:	3708      	adds	r7, #8
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}

0800475a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800475a:	b580      	push	{r7, lr}
 800475c:	b086      	sub	sp, #24
 800475e:	af00      	add	r7, sp, #0
 8004760:	4603      	mov	r3, r0
 8004762:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004764:	2301      	movs	r3, #1
 8004766:	617b      	str	r3, [r7, #20]
 8004768:	2300      	movs	r3, #0
 800476a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800476c:	79fb      	ldrb	r3, [r7, #7]
 800476e:	461a      	mov	r2, r3
 8004770:	6939      	ldr	r1, [r7, #16]
 8004772:	6978      	ldr	r0, [r7, #20]
 8004774:	f7ff ff7a 	bl	800466c <xQueueGenericCreate>
 8004778:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800477a:	68f8      	ldr	r0, [r7, #12]
 800477c:	f7ff ffd3 	bl	8004726 <prvInitialiseMutex>

		return xNewQueue;
 8004780:	68fb      	ldr	r3, [r7, #12]
	}
 8004782:	4618      	mov	r0, r3
 8004784:	3718      	adds	r7, #24
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}

0800478a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800478a:	b580      	push	{r7, lr}
 800478c:	b088      	sub	sp, #32
 800478e:	af02      	add	r7, sp, #8
 8004790:	4603      	mov	r3, r0
 8004792:	6039      	str	r1, [r7, #0]
 8004794:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004796:	2301      	movs	r3, #1
 8004798:	617b      	str	r3, [r7, #20]
 800479a:	2300      	movs	r3, #0
 800479c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800479e:	79fb      	ldrb	r3, [r7, #7]
 80047a0:	9300      	str	r3, [sp, #0]
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	2200      	movs	r2, #0
 80047a6:	6939      	ldr	r1, [r7, #16]
 80047a8:	6978      	ldr	r0, [r7, #20]
 80047aa:	f7ff fee7 	bl	800457c <xQueueGenericCreateStatic>
 80047ae:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80047b0:	68f8      	ldr	r0, [r7, #12]
 80047b2:	f7ff ffb8 	bl	8004726 <prvInitialiseMutex>

		return xNewQueue;
 80047b6:	68fb      	ldr	r3, [r7, #12]
	}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3718      	adds	r7, #24
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}

080047c0 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80047c0:	b590      	push	{r4, r7, lr}
 80047c2:	b087      	sub	sp, #28
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d10a      	bne.n	80047e8 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 80047d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d6:	f383 8811 	msr	BASEPRI, r3
 80047da:	f3bf 8f6f 	isb	sy
 80047de:	f3bf 8f4f 	dsb	sy
 80047e2:	60fb      	str	r3, [r7, #12]
}
 80047e4:	bf00      	nop
 80047e6:	e7fe      	b.n	80047e6 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	689c      	ldr	r4, [r3, #8]
 80047ec:	f001 fd52 	bl	8006294 <xTaskGetCurrentTaskHandle>
 80047f0:	4603      	mov	r3, r0
 80047f2:	429c      	cmp	r4, r3
 80047f4:	d111      	bne.n	800481a <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	1e5a      	subs	r2, r3, #1
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d105      	bne.n	8004814 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8004808:	2300      	movs	r3, #0
 800480a:	2200      	movs	r2, #0
 800480c:	2100      	movs	r1, #0
 800480e:	6938      	ldr	r0, [r7, #16]
 8004810:	f000 f8aa 	bl	8004968 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8004814:	2301      	movs	r3, #1
 8004816:	617b      	str	r3, [r7, #20]
 8004818:	e001      	b.n	800481e <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800481a:	2300      	movs	r3, #0
 800481c:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800481e:	697b      	ldr	r3, [r7, #20]
	}
 8004820:	4618      	mov	r0, r3
 8004822:	371c      	adds	r7, #28
 8004824:	46bd      	mov	sp, r7
 8004826:	bd90      	pop	{r4, r7, pc}

08004828 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8004828:	b590      	push	{r4, r7, lr}
 800482a:	b087      	sub	sp, #28
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d10a      	bne.n	8004852 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800483c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004840:	f383 8811 	msr	BASEPRI, r3
 8004844:	f3bf 8f6f 	isb	sy
 8004848:	f3bf 8f4f 	dsb	sy
 800484c:	60fb      	str	r3, [r7, #12]
}
 800484e:	bf00      	nop
 8004850:	e7fe      	b.n	8004850 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	689c      	ldr	r4, [r3, #8]
 8004856:	f001 fd1d 	bl	8006294 <xTaskGetCurrentTaskHandle>
 800485a:	4603      	mov	r3, r0
 800485c:	429c      	cmp	r4, r3
 800485e:	d107      	bne.n	8004870 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	1c5a      	adds	r2, r3, #1
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800486a:	2301      	movs	r3, #1
 800486c:	617b      	str	r3, [r7, #20]
 800486e:	e00c      	b.n	800488a <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8004870:	6839      	ldr	r1, [r7, #0]
 8004872:	6938      	ldr	r0, [r7, #16]
 8004874:	f000 fb7e 	bl	8004f74 <xQueueSemaphoreTake>
 8004878:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d004      	beq.n	800488a <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	1c5a      	adds	r2, r3, #1
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800488a:	697b      	ldr	r3, [r7, #20]
	}
 800488c:	4618      	mov	r0, r3
 800488e:	371c      	adds	r7, #28
 8004890:	46bd      	mov	sp, r7
 8004892:	bd90      	pop	{r4, r7, pc}

08004894 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8004894:	b580      	push	{r7, lr}
 8004896:	b08a      	sub	sp, #40	; 0x28
 8004898:	af02      	add	r7, sp, #8
 800489a:	60f8      	str	r0, [r7, #12]
 800489c:	60b9      	str	r1, [r7, #8]
 800489e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d10a      	bne.n	80048bc <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 80048a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048aa:	f383 8811 	msr	BASEPRI, r3
 80048ae:	f3bf 8f6f 	isb	sy
 80048b2:	f3bf 8f4f 	dsb	sy
 80048b6:	61bb      	str	r3, [r7, #24]
}
 80048b8:	bf00      	nop
 80048ba:	e7fe      	b.n	80048ba <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80048bc:	68ba      	ldr	r2, [r7, #8]
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d90a      	bls.n	80048da <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80048c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c8:	f383 8811 	msr	BASEPRI, r3
 80048cc:	f3bf 8f6f 	isb	sy
 80048d0:	f3bf 8f4f 	dsb	sy
 80048d4:	617b      	str	r3, [r7, #20]
}
 80048d6:	bf00      	nop
 80048d8:	e7fe      	b.n	80048d8 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80048da:	2302      	movs	r3, #2
 80048dc:	9300      	str	r3, [sp, #0]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	2100      	movs	r1, #0
 80048e4:	68f8      	ldr	r0, [r7, #12]
 80048e6:	f7ff fe49 	bl	800457c <xQueueGenericCreateStatic>
 80048ea:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80048ec:	69fb      	ldr	r3, [r7, #28]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d002      	beq.n	80048f8 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80048f2:	69fb      	ldr	r3, [r7, #28]
 80048f4:	68ba      	ldr	r2, [r7, #8]
 80048f6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80048f8:	69fb      	ldr	r3, [r7, #28]
	}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3720      	adds	r7, #32
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}

08004902 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8004902:	b580      	push	{r7, lr}
 8004904:	b086      	sub	sp, #24
 8004906:	af00      	add	r7, sp, #0
 8004908:	6078      	str	r0, [r7, #4]
 800490a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d10a      	bne.n	8004928 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8004912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004916:	f383 8811 	msr	BASEPRI, r3
 800491a:	f3bf 8f6f 	isb	sy
 800491e:	f3bf 8f4f 	dsb	sy
 8004922:	613b      	str	r3, [r7, #16]
}
 8004924:	bf00      	nop
 8004926:	e7fe      	b.n	8004926 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004928:	683a      	ldr	r2, [r7, #0]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	429a      	cmp	r2, r3
 800492e:	d90a      	bls.n	8004946 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8004930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004934:	f383 8811 	msr	BASEPRI, r3
 8004938:	f3bf 8f6f 	isb	sy
 800493c:	f3bf 8f4f 	dsb	sy
 8004940:	60fb      	str	r3, [r7, #12]
}
 8004942:	bf00      	nop
 8004944:	e7fe      	b.n	8004944 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004946:	2202      	movs	r2, #2
 8004948:	2100      	movs	r1, #0
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f7ff fe8e 	bl	800466c <xQueueGenericCreate>
 8004950:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d002      	beq.n	800495e <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	683a      	ldr	r2, [r7, #0]
 800495c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800495e:	697b      	ldr	r3, [r7, #20]
	}
 8004960:	4618      	mov	r0, r3
 8004962:	3718      	adds	r7, #24
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}

08004968 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b08e      	sub	sp, #56	; 0x38
 800496c:	af00      	add	r7, sp, #0
 800496e:	60f8      	str	r0, [r7, #12]
 8004970:	60b9      	str	r1, [r7, #8]
 8004972:	607a      	str	r2, [r7, #4]
 8004974:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004976:	2300      	movs	r3, #0
 8004978:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800497e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004980:	2b00      	cmp	r3, #0
 8004982:	d10a      	bne.n	800499a <xQueueGenericSend+0x32>
	__asm volatile
 8004984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004988:	f383 8811 	msr	BASEPRI, r3
 800498c:	f3bf 8f6f 	isb	sy
 8004990:	f3bf 8f4f 	dsb	sy
 8004994:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004996:	bf00      	nop
 8004998:	e7fe      	b.n	8004998 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d103      	bne.n	80049a8 <xQueueGenericSend+0x40>
 80049a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d101      	bne.n	80049ac <xQueueGenericSend+0x44>
 80049a8:	2301      	movs	r3, #1
 80049aa:	e000      	b.n	80049ae <xQueueGenericSend+0x46>
 80049ac:	2300      	movs	r3, #0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d10a      	bne.n	80049c8 <xQueueGenericSend+0x60>
	__asm volatile
 80049b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b6:	f383 8811 	msr	BASEPRI, r3
 80049ba:	f3bf 8f6f 	isb	sy
 80049be:	f3bf 8f4f 	dsb	sy
 80049c2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80049c4:	bf00      	nop
 80049c6:	e7fe      	b.n	80049c6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	2b02      	cmp	r3, #2
 80049cc:	d103      	bne.n	80049d6 <xQueueGenericSend+0x6e>
 80049ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d101      	bne.n	80049da <xQueueGenericSend+0x72>
 80049d6:	2301      	movs	r3, #1
 80049d8:	e000      	b.n	80049dc <xQueueGenericSend+0x74>
 80049da:	2300      	movs	r3, #0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d10a      	bne.n	80049f6 <xQueueGenericSend+0x8e>
	__asm volatile
 80049e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e4:	f383 8811 	msr	BASEPRI, r3
 80049e8:	f3bf 8f6f 	isb	sy
 80049ec:	f3bf 8f4f 	dsb	sy
 80049f0:	623b      	str	r3, [r7, #32]
}
 80049f2:	bf00      	nop
 80049f4:	e7fe      	b.n	80049f4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80049f6:	f001 fc5d 	bl	80062b4 <xTaskGetSchedulerState>
 80049fa:	4603      	mov	r3, r0
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d102      	bne.n	8004a06 <xQueueGenericSend+0x9e>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d101      	bne.n	8004a0a <xQueueGenericSend+0xa2>
 8004a06:	2301      	movs	r3, #1
 8004a08:	e000      	b.n	8004a0c <xQueueGenericSend+0xa4>
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d10a      	bne.n	8004a26 <xQueueGenericSend+0xbe>
	__asm volatile
 8004a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a14:	f383 8811 	msr	BASEPRI, r3
 8004a18:	f3bf 8f6f 	isb	sy
 8004a1c:	f3bf 8f4f 	dsb	sy
 8004a20:	61fb      	str	r3, [r7, #28]
}
 8004a22:	bf00      	nop
 8004a24:	e7fe      	b.n	8004a24 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004a26:	f002 fa9d 	bl	8006f64 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d302      	bcc.n	8004a3c <xQueueGenericSend+0xd4>
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	2b02      	cmp	r3, #2
 8004a3a:	d129      	bne.n	8004a90 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004a3c:	683a      	ldr	r2, [r7, #0]
 8004a3e:	68b9      	ldr	r1, [r7, #8]
 8004a40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a42:	f000 fc5e 	bl	8005302 <prvCopyDataToQueue>
 8004a46:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d010      	beq.n	8004a72 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a52:	3324      	adds	r3, #36	; 0x24
 8004a54:	4618      	mov	r0, r3
 8004a56:	f001 fa5f 	bl	8005f18 <xTaskRemoveFromEventList>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d013      	beq.n	8004a88 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004a60:	4b3f      	ldr	r3, [pc, #252]	; (8004b60 <xQueueGenericSend+0x1f8>)
 8004a62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a66:	601a      	str	r2, [r3, #0]
 8004a68:	f3bf 8f4f 	dsb	sy
 8004a6c:	f3bf 8f6f 	isb	sy
 8004a70:	e00a      	b.n	8004a88 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d007      	beq.n	8004a88 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004a78:	4b39      	ldr	r3, [pc, #228]	; (8004b60 <xQueueGenericSend+0x1f8>)
 8004a7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a7e:	601a      	str	r2, [r3, #0]
 8004a80:	f3bf 8f4f 	dsb	sy
 8004a84:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004a88:	f002 fa9c 	bl	8006fc4 <vPortExitCritical>
				return pdPASS;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e063      	b.n	8004b58 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d103      	bne.n	8004a9e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004a96:	f002 fa95 	bl	8006fc4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	e05c      	b.n	8004b58 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d106      	bne.n	8004ab2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004aa4:	f107 0314 	add.w	r3, r7, #20
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f001 fa99 	bl	8005fe0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004ab2:	f002 fa87 	bl	8006fc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004ab6:	f000 fff9 	bl	8005aac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004aba:	f002 fa53 	bl	8006f64 <vPortEnterCritical>
 8004abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ac4:	b25b      	sxtb	r3, r3
 8004ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aca:	d103      	bne.n	8004ad4 <xQueueGenericSend+0x16c>
 8004acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ace:	2200      	movs	r2, #0
 8004ad0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ada:	b25b      	sxtb	r3, r3
 8004adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ae0:	d103      	bne.n	8004aea <xQueueGenericSend+0x182>
 8004ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004aea:	f002 fa6b 	bl	8006fc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004aee:	1d3a      	adds	r2, r7, #4
 8004af0:	f107 0314 	add.w	r3, r7, #20
 8004af4:	4611      	mov	r1, r2
 8004af6:	4618      	mov	r0, r3
 8004af8:	f001 fa88 	bl	800600c <xTaskCheckForTimeOut>
 8004afc:	4603      	mov	r3, r0
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d124      	bne.n	8004b4c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004b02:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b04:	f000 fcf5 	bl	80054f2 <prvIsQueueFull>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d018      	beq.n	8004b40 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b10:	3310      	adds	r3, #16
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	4611      	mov	r1, r2
 8004b16:	4618      	mov	r0, r3
 8004b18:	f001 f9ae 	bl	8005e78 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004b1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b1e:	f000 fc80 	bl	8005422 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004b22:	f000 ffd1 	bl	8005ac8 <xTaskResumeAll>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	f47f af7c 	bne.w	8004a26 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004b2e:	4b0c      	ldr	r3, [pc, #48]	; (8004b60 <xQueueGenericSend+0x1f8>)
 8004b30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b34:	601a      	str	r2, [r3, #0]
 8004b36:	f3bf 8f4f 	dsb	sy
 8004b3a:	f3bf 8f6f 	isb	sy
 8004b3e:	e772      	b.n	8004a26 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004b40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b42:	f000 fc6e 	bl	8005422 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004b46:	f000 ffbf 	bl	8005ac8 <xTaskResumeAll>
 8004b4a:	e76c      	b.n	8004a26 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004b4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b4e:	f000 fc68 	bl	8005422 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004b52:	f000 ffb9 	bl	8005ac8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004b56:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3738      	adds	r7, #56	; 0x38
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}
 8004b60:	e000ed04 	.word	0xe000ed04

08004b64 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b090      	sub	sp, #64	; 0x40
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	60f8      	str	r0, [r7, #12]
 8004b6c:	60b9      	str	r1, [r7, #8]
 8004b6e:	607a      	str	r2, [r7, #4]
 8004b70:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d10a      	bne.n	8004b92 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b80:	f383 8811 	msr	BASEPRI, r3
 8004b84:	f3bf 8f6f 	isb	sy
 8004b88:	f3bf 8f4f 	dsb	sy
 8004b8c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004b8e:	bf00      	nop
 8004b90:	e7fe      	b.n	8004b90 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d103      	bne.n	8004ba0 <xQueueGenericSendFromISR+0x3c>
 8004b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d101      	bne.n	8004ba4 <xQueueGenericSendFromISR+0x40>
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e000      	b.n	8004ba6 <xQueueGenericSendFromISR+0x42>
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d10a      	bne.n	8004bc0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bae:	f383 8811 	msr	BASEPRI, r3
 8004bb2:	f3bf 8f6f 	isb	sy
 8004bb6:	f3bf 8f4f 	dsb	sy
 8004bba:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004bbc:	bf00      	nop
 8004bbe:	e7fe      	b.n	8004bbe <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	2b02      	cmp	r3, #2
 8004bc4:	d103      	bne.n	8004bce <xQueueGenericSendFromISR+0x6a>
 8004bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	d101      	bne.n	8004bd2 <xQueueGenericSendFromISR+0x6e>
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e000      	b.n	8004bd4 <xQueueGenericSendFromISR+0x70>
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d10a      	bne.n	8004bee <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bdc:	f383 8811 	msr	BASEPRI, r3
 8004be0:	f3bf 8f6f 	isb	sy
 8004be4:	f3bf 8f4f 	dsb	sy
 8004be8:	623b      	str	r3, [r7, #32]
}
 8004bea:	bf00      	nop
 8004bec:	e7fe      	b.n	8004bec <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004bee:	f002 fa9b 	bl	8007128 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004bf2:	f3ef 8211 	mrs	r2, BASEPRI
 8004bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bfa:	f383 8811 	msr	BASEPRI, r3
 8004bfe:	f3bf 8f6f 	isb	sy
 8004c02:	f3bf 8f4f 	dsb	sy
 8004c06:	61fa      	str	r2, [r7, #28]
 8004c08:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004c0a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004c0c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d302      	bcc.n	8004c20 <xQueueGenericSendFromISR+0xbc>
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	2b02      	cmp	r3, #2
 8004c1e:	d12f      	bne.n	8004c80 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004c30:	683a      	ldr	r2, [r7, #0]
 8004c32:	68b9      	ldr	r1, [r7, #8]
 8004c34:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004c36:	f000 fb64 	bl	8005302 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004c3a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004c3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c42:	d112      	bne.n	8004c6a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d016      	beq.n	8004c7a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c4e:	3324      	adds	r3, #36	; 0x24
 8004c50:	4618      	mov	r0, r3
 8004c52:	f001 f961 	bl	8005f18 <xTaskRemoveFromEventList>
 8004c56:	4603      	mov	r3, r0
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d00e      	beq.n	8004c7a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d00b      	beq.n	8004c7a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2201      	movs	r2, #1
 8004c66:	601a      	str	r2, [r3, #0]
 8004c68:	e007      	b.n	8004c7a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004c6a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004c6e:	3301      	adds	r3, #1
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	b25a      	sxtb	r2, r3
 8004c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004c7e:	e001      	b.n	8004c84 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004c80:	2300      	movs	r3, #0
 8004c82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c86:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004c8e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004c90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3740      	adds	r7, #64	; 0x40
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}

08004c9a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004c9a:	b580      	push	{r7, lr}
 8004c9c:	b08e      	sub	sp, #56	; 0x38
 8004c9e:	af00      	add	r7, sp, #0
 8004ca0:	6078      	str	r0, [r7, #4]
 8004ca2:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8004ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d10a      	bne.n	8004cc4 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8004cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb2:	f383 8811 	msr	BASEPRI, r3
 8004cb6:	f3bf 8f6f 	isb	sy
 8004cba:	f3bf 8f4f 	dsb	sy
 8004cbe:	623b      	str	r3, [r7, #32]
}
 8004cc0:	bf00      	nop
 8004cc2:	e7fe      	b.n	8004cc2 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d00a      	beq.n	8004ce2 <xQueueGiveFromISR+0x48>
	__asm volatile
 8004ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd0:	f383 8811 	msr	BASEPRI, r3
 8004cd4:	f3bf 8f6f 	isb	sy
 8004cd8:	f3bf 8f4f 	dsb	sy
 8004cdc:	61fb      	str	r3, [r7, #28]
}
 8004cde:	bf00      	nop
 8004ce0:	e7fe      	b.n	8004ce0 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8004ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d103      	bne.n	8004cf2 <xQueueGiveFromISR+0x58>
 8004cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d101      	bne.n	8004cf6 <xQueueGiveFromISR+0x5c>
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e000      	b.n	8004cf8 <xQueueGiveFromISR+0x5e>
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d10a      	bne.n	8004d12 <xQueueGiveFromISR+0x78>
	__asm volatile
 8004cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d00:	f383 8811 	msr	BASEPRI, r3
 8004d04:	f3bf 8f6f 	isb	sy
 8004d08:	f3bf 8f4f 	dsb	sy
 8004d0c:	61bb      	str	r3, [r7, #24]
}
 8004d0e:	bf00      	nop
 8004d10:	e7fe      	b.n	8004d10 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004d12:	f002 fa09 	bl	8007128 <vPortValidateInterruptPriority>
	__asm volatile
 8004d16:	f3ef 8211 	mrs	r2, BASEPRI
 8004d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d1e:	f383 8811 	msr	BASEPRI, r3
 8004d22:	f3bf 8f6f 	isb	sy
 8004d26:	f3bf 8f4f 	dsb	sy
 8004d2a:	617a      	str	r2, [r7, #20]
 8004d2c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8004d2e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004d30:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d36:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d22b      	bcs.n	8004d9a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d4e:	1c5a      	adds	r2, r3, #1
 8004d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d52:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004d54:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d5c:	d112      	bne.n	8004d84 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d016      	beq.n	8004d94 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d68:	3324      	adds	r3, #36	; 0x24
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f001 f8d4 	bl	8005f18 <xTaskRemoveFromEventList>
 8004d70:	4603      	mov	r3, r0
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d00e      	beq.n	8004d94 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d00b      	beq.n	8004d94 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	601a      	str	r2, [r3, #0]
 8004d82:	e007      	b.n	8004d94 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004d84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004d88:	3301      	adds	r3, #1
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	b25a      	sxtb	r2, r3
 8004d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004d94:	2301      	movs	r3, #1
 8004d96:	637b      	str	r3, [r7, #52]	; 0x34
 8004d98:	e001      	b.n	8004d9e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	637b      	str	r3, [r7, #52]	; 0x34
 8004d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004da0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	f383 8811 	msr	BASEPRI, r3
}
 8004da8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004daa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3738      	adds	r7, #56	; 0x38
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}

08004db4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b08c      	sub	sp, #48	; 0x30
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	60f8      	str	r0, [r7, #12]
 8004dbc:	60b9      	str	r1, [r7, #8]
 8004dbe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d10a      	bne.n	8004de4 <xQueueReceive+0x30>
	__asm volatile
 8004dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd2:	f383 8811 	msr	BASEPRI, r3
 8004dd6:	f3bf 8f6f 	isb	sy
 8004dda:	f3bf 8f4f 	dsb	sy
 8004dde:	623b      	str	r3, [r7, #32]
}
 8004de0:	bf00      	nop
 8004de2:	e7fe      	b.n	8004de2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d103      	bne.n	8004df2 <xQueueReceive+0x3e>
 8004dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d101      	bne.n	8004df6 <xQueueReceive+0x42>
 8004df2:	2301      	movs	r3, #1
 8004df4:	e000      	b.n	8004df8 <xQueueReceive+0x44>
 8004df6:	2300      	movs	r3, #0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d10a      	bne.n	8004e12 <xQueueReceive+0x5e>
	__asm volatile
 8004dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e00:	f383 8811 	msr	BASEPRI, r3
 8004e04:	f3bf 8f6f 	isb	sy
 8004e08:	f3bf 8f4f 	dsb	sy
 8004e0c:	61fb      	str	r3, [r7, #28]
}
 8004e0e:	bf00      	nop
 8004e10:	e7fe      	b.n	8004e10 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004e12:	f001 fa4f 	bl	80062b4 <xTaskGetSchedulerState>
 8004e16:	4603      	mov	r3, r0
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d102      	bne.n	8004e22 <xQueueReceive+0x6e>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d101      	bne.n	8004e26 <xQueueReceive+0x72>
 8004e22:	2301      	movs	r3, #1
 8004e24:	e000      	b.n	8004e28 <xQueueReceive+0x74>
 8004e26:	2300      	movs	r3, #0
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d10a      	bne.n	8004e42 <xQueueReceive+0x8e>
	__asm volatile
 8004e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e30:	f383 8811 	msr	BASEPRI, r3
 8004e34:	f3bf 8f6f 	isb	sy
 8004e38:	f3bf 8f4f 	dsb	sy
 8004e3c:	61bb      	str	r3, [r7, #24]
}
 8004e3e:	bf00      	nop
 8004e40:	e7fe      	b.n	8004e40 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004e42:	f002 f88f 	bl	8006f64 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e4a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d01f      	beq.n	8004e92 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004e52:	68b9      	ldr	r1, [r7, #8]
 8004e54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e56:	f000 fabe 	bl	80053d6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5c:	1e5a      	subs	r2, r3, #1
 8004e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e60:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e64:	691b      	ldr	r3, [r3, #16]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d00f      	beq.n	8004e8a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e6c:	3310      	adds	r3, #16
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f001 f852 	bl	8005f18 <xTaskRemoveFromEventList>
 8004e74:	4603      	mov	r3, r0
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d007      	beq.n	8004e8a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004e7a:	4b3d      	ldr	r3, [pc, #244]	; (8004f70 <xQueueReceive+0x1bc>)
 8004e7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e80:	601a      	str	r2, [r3, #0]
 8004e82:	f3bf 8f4f 	dsb	sy
 8004e86:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004e8a:	f002 f89b 	bl	8006fc4 <vPortExitCritical>
				return pdPASS;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e069      	b.n	8004f66 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d103      	bne.n	8004ea0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004e98:	f002 f894 	bl	8006fc4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	e062      	b.n	8004f66 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d106      	bne.n	8004eb4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004ea6:	f107 0310 	add.w	r3, r7, #16
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f001 f898 	bl	8005fe0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004eb4:	f002 f886 	bl	8006fc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004eb8:	f000 fdf8 	bl	8005aac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004ebc:	f002 f852 	bl	8006f64 <vPortEnterCritical>
 8004ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ec6:	b25b      	sxtb	r3, r3
 8004ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ecc:	d103      	bne.n	8004ed6 <xQueueReceive+0x122>
 8004ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ed8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004edc:	b25b      	sxtb	r3, r3
 8004ede:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ee2:	d103      	bne.n	8004eec <xQueueReceive+0x138>
 8004ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004eec:	f002 f86a 	bl	8006fc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004ef0:	1d3a      	adds	r2, r7, #4
 8004ef2:	f107 0310 	add.w	r3, r7, #16
 8004ef6:	4611      	mov	r1, r2
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f001 f887 	bl	800600c <xTaskCheckForTimeOut>
 8004efe:	4603      	mov	r3, r0
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d123      	bne.n	8004f4c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f06:	f000 fade 	bl	80054c6 <prvIsQueueEmpty>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d017      	beq.n	8004f40 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f12:	3324      	adds	r3, #36	; 0x24
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	4611      	mov	r1, r2
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f000 ffad 	bl	8005e78 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004f1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f20:	f000 fa7f 	bl	8005422 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004f24:	f000 fdd0 	bl	8005ac8 <xTaskResumeAll>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d189      	bne.n	8004e42 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004f2e:	4b10      	ldr	r3, [pc, #64]	; (8004f70 <xQueueReceive+0x1bc>)
 8004f30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f34:	601a      	str	r2, [r3, #0]
 8004f36:	f3bf 8f4f 	dsb	sy
 8004f3a:	f3bf 8f6f 	isb	sy
 8004f3e:	e780      	b.n	8004e42 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004f40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f42:	f000 fa6e 	bl	8005422 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004f46:	f000 fdbf 	bl	8005ac8 <xTaskResumeAll>
 8004f4a:	e77a      	b.n	8004e42 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004f4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f4e:	f000 fa68 	bl	8005422 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004f52:	f000 fdb9 	bl	8005ac8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f58:	f000 fab5 	bl	80054c6 <prvIsQueueEmpty>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	f43f af6f 	beq.w	8004e42 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004f64:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3730      	adds	r7, #48	; 0x30
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	bf00      	nop
 8004f70:	e000ed04 	.word	0xe000ed04

08004f74 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b08e      	sub	sp, #56	; 0x38
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004f86:	2300      	movs	r3, #0
 8004f88:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d10a      	bne.n	8004fa6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8004f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f94:	f383 8811 	msr	BASEPRI, r3
 8004f98:	f3bf 8f6f 	isb	sy
 8004f9c:	f3bf 8f4f 	dsb	sy
 8004fa0:	623b      	str	r3, [r7, #32]
}
 8004fa2:	bf00      	nop
 8004fa4:	e7fe      	b.n	8004fa4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d00a      	beq.n	8004fc4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8004fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb2:	f383 8811 	msr	BASEPRI, r3
 8004fb6:	f3bf 8f6f 	isb	sy
 8004fba:	f3bf 8f4f 	dsb	sy
 8004fbe:	61fb      	str	r3, [r7, #28]
}
 8004fc0:	bf00      	nop
 8004fc2:	e7fe      	b.n	8004fc2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004fc4:	f001 f976 	bl	80062b4 <xTaskGetSchedulerState>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d102      	bne.n	8004fd4 <xQueueSemaphoreTake+0x60>
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d101      	bne.n	8004fd8 <xQueueSemaphoreTake+0x64>
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e000      	b.n	8004fda <xQueueSemaphoreTake+0x66>
 8004fd8:	2300      	movs	r3, #0
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d10a      	bne.n	8004ff4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8004fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe2:	f383 8811 	msr	BASEPRI, r3
 8004fe6:	f3bf 8f6f 	isb	sy
 8004fea:	f3bf 8f4f 	dsb	sy
 8004fee:	61bb      	str	r3, [r7, #24]
}
 8004ff0:	bf00      	nop
 8004ff2:	e7fe      	b.n	8004ff2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004ff4:	f001 ffb6 	bl	8006f64 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ffc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005000:	2b00      	cmp	r3, #0
 8005002:	d024      	beq.n	800504e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005006:	1e5a      	subs	r2, r3, #1
 8005008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800500a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800500c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d104      	bne.n	800501e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005014:	f001 fac4 	bl	80065a0 <pvTaskIncrementMutexHeldCount>
 8005018:	4602      	mov	r2, r0
 800501a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800501c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800501e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005020:	691b      	ldr	r3, [r3, #16]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d00f      	beq.n	8005046 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005028:	3310      	adds	r3, #16
 800502a:	4618      	mov	r0, r3
 800502c:	f000 ff74 	bl	8005f18 <xTaskRemoveFromEventList>
 8005030:	4603      	mov	r3, r0
 8005032:	2b00      	cmp	r3, #0
 8005034:	d007      	beq.n	8005046 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005036:	4b54      	ldr	r3, [pc, #336]	; (8005188 <xQueueSemaphoreTake+0x214>)
 8005038:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800503c:	601a      	str	r2, [r3, #0]
 800503e:	f3bf 8f4f 	dsb	sy
 8005042:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005046:	f001 ffbd 	bl	8006fc4 <vPortExitCritical>
				return pdPASS;
 800504a:	2301      	movs	r3, #1
 800504c:	e097      	b.n	800517e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d111      	bne.n	8005078 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005056:	2b00      	cmp	r3, #0
 8005058:	d00a      	beq.n	8005070 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800505a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800505e:	f383 8811 	msr	BASEPRI, r3
 8005062:	f3bf 8f6f 	isb	sy
 8005066:	f3bf 8f4f 	dsb	sy
 800506a:	617b      	str	r3, [r7, #20]
}
 800506c:	bf00      	nop
 800506e:	e7fe      	b.n	800506e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005070:	f001 ffa8 	bl	8006fc4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005074:	2300      	movs	r3, #0
 8005076:	e082      	b.n	800517e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800507a:	2b00      	cmp	r3, #0
 800507c:	d106      	bne.n	800508c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800507e:	f107 030c 	add.w	r3, r7, #12
 8005082:	4618      	mov	r0, r3
 8005084:	f000 ffac 	bl	8005fe0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005088:	2301      	movs	r3, #1
 800508a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800508c:	f001 ff9a 	bl	8006fc4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005090:	f000 fd0c 	bl	8005aac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005094:	f001 ff66 	bl	8006f64 <vPortEnterCritical>
 8005098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800509a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800509e:	b25b      	sxtb	r3, r3
 80050a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050a4:	d103      	bne.n	80050ae <xQueueSemaphoreTake+0x13a>
 80050a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050a8:	2200      	movs	r2, #0
 80050aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050b4:	b25b      	sxtb	r3, r3
 80050b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ba:	d103      	bne.n	80050c4 <xQueueSemaphoreTake+0x150>
 80050bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050be:	2200      	movs	r2, #0
 80050c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050c4:	f001 ff7e 	bl	8006fc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80050c8:	463a      	mov	r2, r7
 80050ca:	f107 030c 	add.w	r3, r7, #12
 80050ce:	4611      	mov	r1, r2
 80050d0:	4618      	mov	r0, r3
 80050d2:	f000 ff9b 	bl	800600c <xTaskCheckForTimeOut>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d132      	bne.n	8005142 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80050dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80050de:	f000 f9f2 	bl	80054c6 <prvIsQueueEmpty>
 80050e2:	4603      	mov	r3, r0
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d026      	beq.n	8005136 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80050e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d109      	bne.n	8005104 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80050f0:	f001 ff38 	bl	8006f64 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80050f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	4618      	mov	r0, r3
 80050fa:	f001 f8f9 	bl	80062f0 <xTaskPriorityInherit>
 80050fe:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005100:	f001 ff60 	bl	8006fc4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005106:	3324      	adds	r3, #36	; 0x24
 8005108:	683a      	ldr	r2, [r7, #0]
 800510a:	4611      	mov	r1, r2
 800510c:	4618      	mov	r0, r3
 800510e:	f000 feb3 	bl	8005e78 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005112:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005114:	f000 f985 	bl	8005422 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005118:	f000 fcd6 	bl	8005ac8 <xTaskResumeAll>
 800511c:	4603      	mov	r3, r0
 800511e:	2b00      	cmp	r3, #0
 8005120:	f47f af68 	bne.w	8004ff4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8005124:	4b18      	ldr	r3, [pc, #96]	; (8005188 <xQueueSemaphoreTake+0x214>)
 8005126:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800512a:	601a      	str	r2, [r3, #0]
 800512c:	f3bf 8f4f 	dsb	sy
 8005130:	f3bf 8f6f 	isb	sy
 8005134:	e75e      	b.n	8004ff4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005136:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005138:	f000 f973 	bl	8005422 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800513c:	f000 fcc4 	bl	8005ac8 <xTaskResumeAll>
 8005140:	e758      	b.n	8004ff4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005142:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005144:	f000 f96d 	bl	8005422 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005148:	f000 fcbe 	bl	8005ac8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800514c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800514e:	f000 f9ba 	bl	80054c6 <prvIsQueueEmpty>
 8005152:	4603      	mov	r3, r0
 8005154:	2b00      	cmp	r3, #0
 8005156:	f43f af4d 	beq.w	8004ff4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800515a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800515c:	2b00      	cmp	r3, #0
 800515e:	d00d      	beq.n	800517c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8005160:	f001 ff00 	bl	8006f64 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005164:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005166:	f000 f8b4 	bl	80052d2 <prvGetDisinheritPriorityAfterTimeout>
 800516a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800516c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005172:	4618      	mov	r0, r3
 8005174:	f001 f992 	bl	800649c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005178:	f001 ff24 	bl	8006fc4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800517c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800517e:	4618      	mov	r0, r3
 8005180:	3738      	adds	r7, #56	; 0x38
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}
 8005186:	bf00      	nop
 8005188:	e000ed04 	.word	0xe000ed04

0800518c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b08e      	sub	sp, #56	; 0x38
 8005190:	af00      	add	r7, sp, #0
 8005192:	60f8      	str	r0, [r7, #12]
 8005194:	60b9      	str	r1, [r7, #8]
 8005196:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800519c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d10a      	bne.n	80051b8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80051a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a6:	f383 8811 	msr	BASEPRI, r3
 80051aa:	f3bf 8f6f 	isb	sy
 80051ae:	f3bf 8f4f 	dsb	sy
 80051b2:	623b      	str	r3, [r7, #32]
}
 80051b4:	bf00      	nop
 80051b6:	e7fe      	b.n	80051b6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d103      	bne.n	80051c6 <xQueueReceiveFromISR+0x3a>
 80051be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d101      	bne.n	80051ca <xQueueReceiveFromISR+0x3e>
 80051c6:	2301      	movs	r3, #1
 80051c8:	e000      	b.n	80051cc <xQueueReceiveFromISR+0x40>
 80051ca:	2300      	movs	r3, #0
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d10a      	bne.n	80051e6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80051d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d4:	f383 8811 	msr	BASEPRI, r3
 80051d8:	f3bf 8f6f 	isb	sy
 80051dc:	f3bf 8f4f 	dsb	sy
 80051e0:	61fb      	str	r3, [r7, #28]
}
 80051e2:	bf00      	nop
 80051e4:	e7fe      	b.n	80051e4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80051e6:	f001 ff9f 	bl	8007128 <vPortValidateInterruptPriority>
	__asm volatile
 80051ea:	f3ef 8211 	mrs	r2, BASEPRI
 80051ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f2:	f383 8811 	msr	BASEPRI, r3
 80051f6:	f3bf 8f6f 	isb	sy
 80051fa:	f3bf 8f4f 	dsb	sy
 80051fe:	61ba      	str	r2, [r7, #24]
 8005200:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005202:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005204:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800520a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800520c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800520e:	2b00      	cmp	r3, #0
 8005210:	d02f      	beq.n	8005272 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005214:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005218:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800521c:	68b9      	ldr	r1, [r7, #8]
 800521e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005220:	f000 f8d9 	bl	80053d6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005226:	1e5a      	subs	r2, r3, #1
 8005228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800522a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800522c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005234:	d112      	bne.n	800525c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005238:	691b      	ldr	r3, [r3, #16]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d016      	beq.n	800526c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800523e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005240:	3310      	adds	r3, #16
 8005242:	4618      	mov	r0, r3
 8005244:	f000 fe68 	bl	8005f18 <xTaskRemoveFromEventList>
 8005248:	4603      	mov	r3, r0
 800524a:	2b00      	cmp	r3, #0
 800524c:	d00e      	beq.n	800526c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d00b      	beq.n	800526c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	601a      	str	r2, [r3, #0]
 800525a:	e007      	b.n	800526c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800525c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005260:	3301      	adds	r3, #1
 8005262:	b2db      	uxtb	r3, r3
 8005264:	b25a      	sxtb	r2, r3
 8005266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005268:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800526c:	2301      	movs	r3, #1
 800526e:	637b      	str	r3, [r7, #52]	; 0x34
 8005270:	e001      	b.n	8005276 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8005272:	2300      	movs	r3, #0
 8005274:	637b      	str	r3, [r7, #52]	; 0x34
 8005276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005278:	613b      	str	r3, [r7, #16]
	__asm volatile
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	f383 8811 	msr	BASEPRI, r3
}
 8005280:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005284:	4618      	mov	r0, r3
 8005286:	3738      	adds	r7, #56	; 0x38
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}

0800528c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b084      	sub	sp, #16
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d10a      	bne.n	80052b4 <vQueueDelete+0x28>
	__asm volatile
 800529e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a2:	f383 8811 	msr	BASEPRI, r3
 80052a6:	f3bf 8f6f 	isb	sy
 80052aa:	f3bf 8f4f 	dsb	sy
 80052ae:	60bb      	str	r3, [r7, #8]
}
 80052b0:	bf00      	nop
 80052b2:	e7fe      	b.n	80052b2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80052b4:	68f8      	ldr	r0, [r7, #12]
 80052b6:	f000 f95f 	bl	8005578 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d102      	bne.n	80052ca <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80052c4:	68f8      	ldr	r0, [r7, #12]
 80052c6:	f002 f83b 	bl	8007340 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80052ca:	bf00      	nop
 80052cc:	3710      	adds	r7, #16
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}

080052d2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80052d2:	b480      	push	{r7}
 80052d4:	b085      	sub	sp, #20
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d006      	beq.n	80052f0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80052ec:	60fb      	str	r3, [r7, #12]
 80052ee:	e001      	b.n	80052f4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80052f0:	2300      	movs	r3, #0
 80052f2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80052f4:	68fb      	ldr	r3, [r7, #12]
	}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3714      	adds	r7, #20
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr

08005302 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005302:	b580      	push	{r7, lr}
 8005304:	b086      	sub	sp, #24
 8005306:	af00      	add	r7, sp, #0
 8005308:	60f8      	str	r0, [r7, #12]
 800530a:	60b9      	str	r1, [r7, #8]
 800530c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800530e:	2300      	movs	r3, #0
 8005310:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005316:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800531c:	2b00      	cmp	r3, #0
 800531e:	d10d      	bne.n	800533c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d14d      	bne.n	80053c4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	4618      	mov	r0, r3
 800532e:	f001 f847 	bl	80063c0 <xTaskPriorityDisinherit>
 8005332:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2200      	movs	r2, #0
 8005338:	609a      	str	r2, [r3, #8]
 800533a:	e043      	b.n	80053c4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d119      	bne.n	8005376 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	6858      	ldr	r0, [r3, #4]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800534a:	461a      	mov	r2, r3
 800534c:	68b9      	ldr	r1, [r7, #8]
 800534e:	f011 f82f 	bl	80163b0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	685a      	ldr	r2, [r3, #4]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800535a:	441a      	add	r2, r3
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	685a      	ldr	r2, [r3, #4]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	429a      	cmp	r2, r3
 800536a:	d32b      	bcc.n	80053c4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	605a      	str	r2, [r3, #4]
 8005374:	e026      	b.n	80053c4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	68d8      	ldr	r0, [r3, #12]
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800537e:	461a      	mov	r2, r3
 8005380:	68b9      	ldr	r1, [r7, #8]
 8005382:	f011 f815 	bl	80163b0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	68da      	ldr	r2, [r3, #12]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800538e:	425b      	negs	r3, r3
 8005390:	441a      	add	r2, r3
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	68da      	ldr	r2, [r3, #12]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	429a      	cmp	r2, r3
 80053a0:	d207      	bcs.n	80053b2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	689a      	ldr	r2, [r3, #8]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053aa:	425b      	negs	r3, r3
 80053ac:	441a      	add	r2, r3
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2b02      	cmp	r3, #2
 80053b6:	d105      	bne.n	80053c4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d002      	beq.n	80053c4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	3b01      	subs	r3, #1
 80053c2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	1c5a      	adds	r2, r3, #1
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80053cc:	697b      	ldr	r3, [r7, #20]
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3718      	adds	r7, #24
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}

080053d6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80053d6:	b580      	push	{r7, lr}
 80053d8:	b082      	sub	sp, #8
 80053da:	af00      	add	r7, sp, #0
 80053dc:	6078      	str	r0, [r7, #4]
 80053de:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d018      	beq.n	800541a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	68da      	ldr	r2, [r3, #12]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f0:	441a      	add	r2, r3
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	68da      	ldr	r2, [r3, #12]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	429a      	cmp	r2, r3
 8005400:	d303      	bcc.n	800540a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	68d9      	ldr	r1, [r3, #12]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005412:	461a      	mov	r2, r3
 8005414:	6838      	ldr	r0, [r7, #0]
 8005416:	f010 ffcb 	bl	80163b0 <memcpy>
	}
}
 800541a:	bf00      	nop
 800541c:	3708      	adds	r7, #8
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}

08005422 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005422:	b580      	push	{r7, lr}
 8005424:	b084      	sub	sp, #16
 8005426:	af00      	add	r7, sp, #0
 8005428:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800542a:	f001 fd9b 	bl	8006f64 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005434:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005436:	e011      	b.n	800545c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800543c:	2b00      	cmp	r3, #0
 800543e:	d012      	beq.n	8005466 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	3324      	adds	r3, #36	; 0x24
 8005444:	4618      	mov	r0, r3
 8005446:	f000 fd67 	bl	8005f18 <xTaskRemoveFromEventList>
 800544a:	4603      	mov	r3, r0
 800544c:	2b00      	cmp	r3, #0
 800544e:	d001      	beq.n	8005454 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005450:	f000 fe3e 	bl	80060d0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005454:	7bfb      	ldrb	r3, [r7, #15]
 8005456:	3b01      	subs	r3, #1
 8005458:	b2db      	uxtb	r3, r3
 800545a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800545c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005460:	2b00      	cmp	r3, #0
 8005462:	dce9      	bgt.n	8005438 <prvUnlockQueue+0x16>
 8005464:	e000      	b.n	8005468 <prvUnlockQueue+0x46>
					break;
 8005466:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	22ff      	movs	r2, #255	; 0xff
 800546c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005470:	f001 fda8 	bl	8006fc4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005474:	f001 fd76 	bl	8006f64 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800547e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005480:	e011      	b.n	80054a6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	691b      	ldr	r3, [r3, #16]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d012      	beq.n	80054b0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	3310      	adds	r3, #16
 800548e:	4618      	mov	r0, r3
 8005490:	f000 fd42 	bl	8005f18 <xTaskRemoveFromEventList>
 8005494:	4603      	mov	r3, r0
 8005496:	2b00      	cmp	r3, #0
 8005498:	d001      	beq.n	800549e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800549a:	f000 fe19 	bl	80060d0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800549e:	7bbb      	ldrb	r3, [r7, #14]
 80054a0:	3b01      	subs	r3, #1
 80054a2:	b2db      	uxtb	r3, r3
 80054a4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80054a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	dce9      	bgt.n	8005482 <prvUnlockQueue+0x60>
 80054ae:	e000      	b.n	80054b2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80054b0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	22ff      	movs	r2, #255	; 0xff
 80054b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80054ba:	f001 fd83 	bl	8006fc4 <vPortExitCritical>
}
 80054be:	bf00      	nop
 80054c0:	3710      	adds	r7, #16
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}

080054c6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80054c6:	b580      	push	{r7, lr}
 80054c8:	b084      	sub	sp, #16
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80054ce:	f001 fd49 	bl	8006f64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d102      	bne.n	80054e0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80054da:	2301      	movs	r3, #1
 80054dc:	60fb      	str	r3, [r7, #12]
 80054de:	e001      	b.n	80054e4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80054e0:	2300      	movs	r3, #0
 80054e2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80054e4:	f001 fd6e 	bl	8006fc4 <vPortExitCritical>

	return xReturn;
 80054e8:	68fb      	ldr	r3, [r7, #12]
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3710      	adds	r7, #16
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}

080054f2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80054f2:	b580      	push	{r7, lr}
 80054f4:	b084      	sub	sp, #16
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80054fa:	f001 fd33 	bl	8006f64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005506:	429a      	cmp	r2, r3
 8005508:	d102      	bne.n	8005510 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800550a:	2301      	movs	r3, #1
 800550c:	60fb      	str	r3, [r7, #12]
 800550e:	e001      	b.n	8005514 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005510:	2300      	movs	r3, #0
 8005512:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005514:	f001 fd56 	bl	8006fc4 <vPortExitCritical>

	return xReturn;
 8005518:	68fb      	ldr	r3, [r7, #12]
}
 800551a:	4618      	mov	r0, r3
 800551c:	3710      	adds	r7, #16
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}
	...

08005524 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005524:	b480      	push	{r7}
 8005526:	b085      	sub	sp, #20
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800552e:	2300      	movs	r3, #0
 8005530:	60fb      	str	r3, [r7, #12]
 8005532:	e014      	b.n	800555e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005534:	4a0f      	ldr	r2, [pc, #60]	; (8005574 <vQueueAddToRegistry+0x50>)
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d10b      	bne.n	8005558 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005540:	490c      	ldr	r1, [pc, #48]	; (8005574 <vQueueAddToRegistry+0x50>)
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	683a      	ldr	r2, [r7, #0]
 8005546:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800554a:	4a0a      	ldr	r2, [pc, #40]	; (8005574 <vQueueAddToRegistry+0x50>)
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	00db      	lsls	r3, r3, #3
 8005550:	4413      	add	r3, r2
 8005552:	687a      	ldr	r2, [r7, #4]
 8005554:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005556:	e006      	b.n	8005566 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	3301      	adds	r3, #1
 800555c:	60fb      	str	r3, [r7, #12]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2b07      	cmp	r3, #7
 8005562:	d9e7      	bls.n	8005534 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005564:	bf00      	nop
 8005566:	bf00      	nop
 8005568:	3714      	adds	r7, #20
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr
 8005572:	bf00      	nop
 8005574:	200062dc 	.word	0x200062dc

08005578 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8005578:	b480      	push	{r7}
 800557a:	b085      	sub	sp, #20
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005580:	2300      	movs	r3, #0
 8005582:	60fb      	str	r3, [r7, #12]
 8005584:	e016      	b.n	80055b4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8005586:	4a10      	ldr	r2, [pc, #64]	; (80055c8 <vQueueUnregisterQueue+0x50>)
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	00db      	lsls	r3, r3, #3
 800558c:	4413      	add	r3, r2
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	687a      	ldr	r2, [r7, #4]
 8005592:	429a      	cmp	r2, r3
 8005594:	d10b      	bne.n	80055ae <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8005596:	4a0c      	ldr	r2, [pc, #48]	; (80055c8 <vQueueUnregisterQueue+0x50>)
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2100      	movs	r1, #0
 800559c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80055a0:	4a09      	ldr	r2, [pc, #36]	; (80055c8 <vQueueUnregisterQueue+0x50>)
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	00db      	lsls	r3, r3, #3
 80055a6:	4413      	add	r3, r2
 80055a8:	2200      	movs	r2, #0
 80055aa:	605a      	str	r2, [r3, #4]
				break;
 80055ac:	e006      	b.n	80055bc <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	3301      	adds	r3, #1
 80055b2:	60fb      	str	r3, [r7, #12]
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2b07      	cmp	r3, #7
 80055b8:	d9e5      	bls.n	8005586 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80055ba:	bf00      	nop
 80055bc:	bf00      	nop
 80055be:	3714      	adds	r7, #20
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr
 80055c8:	200062dc 	.word	0x200062dc

080055cc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b086      	sub	sp, #24
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	60f8      	str	r0, [r7, #12]
 80055d4:	60b9      	str	r1, [r7, #8]
 80055d6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80055dc:	f001 fcc2 	bl	8006f64 <vPortEnterCritical>
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80055e6:	b25b      	sxtb	r3, r3
 80055e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ec:	d103      	bne.n	80055f6 <vQueueWaitForMessageRestricted+0x2a>
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	2200      	movs	r2, #0
 80055f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80055fc:	b25b      	sxtb	r3, r3
 80055fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005602:	d103      	bne.n	800560c <vQueueWaitForMessageRestricted+0x40>
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	2200      	movs	r2, #0
 8005608:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800560c:	f001 fcda 	bl	8006fc4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005614:	2b00      	cmp	r3, #0
 8005616:	d106      	bne.n	8005626 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	3324      	adds	r3, #36	; 0x24
 800561c:	687a      	ldr	r2, [r7, #4]
 800561e:	68b9      	ldr	r1, [r7, #8]
 8005620:	4618      	mov	r0, r3
 8005622:	f000 fc4d 	bl	8005ec0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005626:	6978      	ldr	r0, [r7, #20]
 8005628:	f7ff fefb 	bl	8005422 <prvUnlockQueue>
	}
 800562c:	bf00      	nop
 800562e:	3718      	adds	r7, #24
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}

08005634 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005634:	b580      	push	{r7, lr}
 8005636:	b08e      	sub	sp, #56	; 0x38
 8005638:	af04      	add	r7, sp, #16
 800563a:	60f8      	str	r0, [r7, #12]
 800563c:	60b9      	str	r1, [r7, #8]
 800563e:	607a      	str	r2, [r7, #4]
 8005640:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005644:	2b00      	cmp	r3, #0
 8005646:	d10a      	bne.n	800565e <xTaskCreateStatic+0x2a>
	__asm volatile
 8005648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800564c:	f383 8811 	msr	BASEPRI, r3
 8005650:	f3bf 8f6f 	isb	sy
 8005654:	f3bf 8f4f 	dsb	sy
 8005658:	623b      	str	r3, [r7, #32]
}
 800565a:	bf00      	nop
 800565c:	e7fe      	b.n	800565c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800565e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005660:	2b00      	cmp	r3, #0
 8005662:	d10a      	bne.n	800567a <xTaskCreateStatic+0x46>
	__asm volatile
 8005664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005668:	f383 8811 	msr	BASEPRI, r3
 800566c:	f3bf 8f6f 	isb	sy
 8005670:	f3bf 8f4f 	dsb	sy
 8005674:	61fb      	str	r3, [r7, #28]
}
 8005676:	bf00      	nop
 8005678:	e7fe      	b.n	8005678 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800567a:	235c      	movs	r3, #92	; 0x5c
 800567c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	2b5c      	cmp	r3, #92	; 0x5c
 8005682:	d00a      	beq.n	800569a <xTaskCreateStatic+0x66>
	__asm volatile
 8005684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005688:	f383 8811 	msr	BASEPRI, r3
 800568c:	f3bf 8f6f 	isb	sy
 8005690:	f3bf 8f4f 	dsb	sy
 8005694:	61bb      	str	r3, [r7, #24]
}
 8005696:	bf00      	nop
 8005698:	e7fe      	b.n	8005698 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800569a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800569c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d01e      	beq.n	80056e0 <xTaskCreateStatic+0xac>
 80056a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d01b      	beq.n	80056e0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80056a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056aa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80056ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056b0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80056b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b4:	2202      	movs	r2, #2
 80056b6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80056ba:	2300      	movs	r3, #0
 80056bc:	9303      	str	r3, [sp, #12]
 80056be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c0:	9302      	str	r3, [sp, #8]
 80056c2:	f107 0314 	add.w	r3, r7, #20
 80056c6:	9301      	str	r3, [sp, #4]
 80056c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ca:	9300      	str	r3, [sp, #0]
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	68b9      	ldr	r1, [r7, #8]
 80056d2:	68f8      	ldr	r0, [r7, #12]
 80056d4:	f000 f850 	bl	8005778 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80056d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80056da:	f000 f8dd 	bl	8005898 <prvAddNewTaskToReadyList>
 80056de:	e001      	b.n	80056e4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80056e0:	2300      	movs	r3, #0
 80056e2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80056e4:	697b      	ldr	r3, [r7, #20]
	}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3728      	adds	r7, #40	; 0x28
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}

080056ee <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80056ee:	b580      	push	{r7, lr}
 80056f0:	b08c      	sub	sp, #48	; 0x30
 80056f2:	af04      	add	r7, sp, #16
 80056f4:	60f8      	str	r0, [r7, #12]
 80056f6:	60b9      	str	r1, [r7, #8]
 80056f8:	603b      	str	r3, [r7, #0]
 80056fa:	4613      	mov	r3, r2
 80056fc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80056fe:	88fb      	ldrh	r3, [r7, #6]
 8005700:	009b      	lsls	r3, r3, #2
 8005702:	4618      	mov	r0, r3
 8005704:	f001 fd50 	bl	80071a8 <pvPortMalloc>
 8005708:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d00e      	beq.n	800572e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005710:	205c      	movs	r0, #92	; 0x5c
 8005712:	f001 fd49 	bl	80071a8 <pvPortMalloc>
 8005716:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005718:	69fb      	ldr	r3, [r7, #28]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d003      	beq.n	8005726 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800571e:	69fb      	ldr	r3, [r7, #28]
 8005720:	697a      	ldr	r2, [r7, #20]
 8005722:	631a      	str	r2, [r3, #48]	; 0x30
 8005724:	e005      	b.n	8005732 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005726:	6978      	ldr	r0, [r7, #20]
 8005728:	f001 fe0a 	bl	8007340 <vPortFree>
 800572c:	e001      	b.n	8005732 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800572e:	2300      	movs	r3, #0
 8005730:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005732:	69fb      	ldr	r3, [r7, #28]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d017      	beq.n	8005768 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	2200      	movs	r2, #0
 800573c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005740:	88fa      	ldrh	r2, [r7, #6]
 8005742:	2300      	movs	r3, #0
 8005744:	9303      	str	r3, [sp, #12]
 8005746:	69fb      	ldr	r3, [r7, #28]
 8005748:	9302      	str	r3, [sp, #8]
 800574a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800574c:	9301      	str	r3, [sp, #4]
 800574e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005750:	9300      	str	r3, [sp, #0]
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	68b9      	ldr	r1, [r7, #8]
 8005756:	68f8      	ldr	r0, [r7, #12]
 8005758:	f000 f80e 	bl	8005778 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800575c:	69f8      	ldr	r0, [r7, #28]
 800575e:	f000 f89b 	bl	8005898 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005762:	2301      	movs	r3, #1
 8005764:	61bb      	str	r3, [r7, #24]
 8005766:	e002      	b.n	800576e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005768:	f04f 33ff 	mov.w	r3, #4294967295
 800576c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800576e:	69bb      	ldr	r3, [r7, #24]
	}
 8005770:	4618      	mov	r0, r3
 8005772:	3720      	adds	r7, #32
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}

08005778 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b088      	sub	sp, #32
 800577c:	af00      	add	r7, sp, #0
 800577e:	60f8      	str	r0, [r7, #12]
 8005780:	60b9      	str	r1, [r7, #8]
 8005782:	607a      	str	r2, [r7, #4]
 8005784:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005788:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	461a      	mov	r2, r3
 8005790:	21a5      	movs	r1, #165	; 0xa5
 8005792:	f010 fe35 	bl	8016400 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005798:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80057a0:	3b01      	subs	r3, #1
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	4413      	add	r3, r2
 80057a6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80057a8:	69bb      	ldr	r3, [r7, #24]
 80057aa:	f023 0307 	bic.w	r3, r3, #7
 80057ae:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80057b0:	69bb      	ldr	r3, [r7, #24]
 80057b2:	f003 0307 	and.w	r3, r3, #7
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d00a      	beq.n	80057d0 <prvInitialiseNewTask+0x58>
	__asm volatile
 80057ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057be:	f383 8811 	msr	BASEPRI, r3
 80057c2:	f3bf 8f6f 	isb	sy
 80057c6:	f3bf 8f4f 	dsb	sy
 80057ca:	617b      	str	r3, [r7, #20]
}
 80057cc:	bf00      	nop
 80057ce:	e7fe      	b.n	80057ce <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d01f      	beq.n	8005816 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80057d6:	2300      	movs	r3, #0
 80057d8:	61fb      	str	r3, [r7, #28]
 80057da:	e012      	b.n	8005802 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80057dc:	68ba      	ldr	r2, [r7, #8]
 80057de:	69fb      	ldr	r3, [r7, #28]
 80057e0:	4413      	add	r3, r2
 80057e2:	7819      	ldrb	r1, [r3, #0]
 80057e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057e6:	69fb      	ldr	r3, [r7, #28]
 80057e8:	4413      	add	r3, r2
 80057ea:	3334      	adds	r3, #52	; 0x34
 80057ec:	460a      	mov	r2, r1
 80057ee:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80057f0:	68ba      	ldr	r2, [r7, #8]
 80057f2:	69fb      	ldr	r3, [r7, #28]
 80057f4:	4413      	add	r3, r2
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d006      	beq.n	800580a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80057fc:	69fb      	ldr	r3, [r7, #28]
 80057fe:	3301      	adds	r3, #1
 8005800:	61fb      	str	r3, [r7, #28]
 8005802:	69fb      	ldr	r3, [r7, #28]
 8005804:	2b0f      	cmp	r3, #15
 8005806:	d9e9      	bls.n	80057dc <prvInitialiseNewTask+0x64>
 8005808:	e000      	b.n	800580c <prvInitialiseNewTask+0x94>
			{
				break;
 800580a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800580c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800580e:	2200      	movs	r2, #0
 8005810:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005814:	e003      	b.n	800581e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005818:	2200      	movs	r2, #0
 800581a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800581e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005820:	2b37      	cmp	r3, #55	; 0x37
 8005822:	d901      	bls.n	8005828 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005824:	2337      	movs	r3, #55	; 0x37
 8005826:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800582a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800582c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800582e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005830:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005832:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005836:	2200      	movs	r2, #0
 8005838:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800583a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800583c:	3304      	adds	r3, #4
 800583e:	4618      	mov	r0, r3
 8005840:	f7fe fda0 	bl	8004384 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005846:	3318      	adds	r3, #24
 8005848:	4618      	mov	r0, r3
 800584a:	f7fe fd9b 	bl	8004384 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800584e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005850:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005852:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005856:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800585a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800585c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800585e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005860:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005862:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005866:	2200      	movs	r2, #0
 8005868:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800586a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800586c:	2200      	movs	r2, #0
 800586e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005872:	683a      	ldr	r2, [r7, #0]
 8005874:	68f9      	ldr	r1, [r7, #12]
 8005876:	69b8      	ldr	r0, [r7, #24]
 8005878:	f001 fa48 	bl	8006d0c <pxPortInitialiseStack>
 800587c:	4602      	mov	r2, r0
 800587e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005880:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005884:	2b00      	cmp	r3, #0
 8005886:	d002      	beq.n	800588e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800588a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800588c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800588e:	bf00      	nop
 8005890:	3720      	adds	r7, #32
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}
	...

08005898 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b082      	sub	sp, #8
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80058a0:	f001 fb60 	bl	8006f64 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80058a4:	4b2d      	ldr	r3, [pc, #180]	; (800595c <prvAddNewTaskToReadyList+0xc4>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	3301      	adds	r3, #1
 80058aa:	4a2c      	ldr	r2, [pc, #176]	; (800595c <prvAddNewTaskToReadyList+0xc4>)
 80058ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80058ae:	4b2c      	ldr	r3, [pc, #176]	; (8005960 <prvAddNewTaskToReadyList+0xc8>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d109      	bne.n	80058ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80058b6:	4a2a      	ldr	r2, [pc, #168]	; (8005960 <prvAddNewTaskToReadyList+0xc8>)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80058bc:	4b27      	ldr	r3, [pc, #156]	; (800595c <prvAddNewTaskToReadyList+0xc4>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d110      	bne.n	80058e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80058c4:	f000 fc28 	bl	8006118 <prvInitialiseTaskLists>
 80058c8:	e00d      	b.n	80058e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80058ca:	4b26      	ldr	r3, [pc, #152]	; (8005964 <prvAddNewTaskToReadyList+0xcc>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d109      	bne.n	80058e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80058d2:	4b23      	ldr	r3, [pc, #140]	; (8005960 <prvAddNewTaskToReadyList+0xc8>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058dc:	429a      	cmp	r2, r3
 80058de:	d802      	bhi.n	80058e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80058e0:	4a1f      	ldr	r2, [pc, #124]	; (8005960 <prvAddNewTaskToReadyList+0xc8>)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80058e6:	4b20      	ldr	r3, [pc, #128]	; (8005968 <prvAddNewTaskToReadyList+0xd0>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	3301      	adds	r3, #1
 80058ec:	4a1e      	ldr	r2, [pc, #120]	; (8005968 <prvAddNewTaskToReadyList+0xd0>)
 80058ee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80058f0:	4b1d      	ldr	r3, [pc, #116]	; (8005968 <prvAddNewTaskToReadyList+0xd0>)
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058fc:	4b1b      	ldr	r3, [pc, #108]	; (800596c <prvAddNewTaskToReadyList+0xd4>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	429a      	cmp	r2, r3
 8005902:	d903      	bls.n	800590c <prvAddNewTaskToReadyList+0x74>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005908:	4a18      	ldr	r2, [pc, #96]	; (800596c <prvAddNewTaskToReadyList+0xd4>)
 800590a:	6013      	str	r3, [r2, #0]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005910:	4613      	mov	r3, r2
 8005912:	009b      	lsls	r3, r3, #2
 8005914:	4413      	add	r3, r2
 8005916:	009b      	lsls	r3, r3, #2
 8005918:	4a15      	ldr	r2, [pc, #84]	; (8005970 <prvAddNewTaskToReadyList+0xd8>)
 800591a:	441a      	add	r2, r3
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	3304      	adds	r3, #4
 8005920:	4619      	mov	r1, r3
 8005922:	4610      	mov	r0, r2
 8005924:	f7fe fd3b 	bl	800439e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005928:	f001 fb4c 	bl	8006fc4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800592c:	4b0d      	ldr	r3, [pc, #52]	; (8005964 <prvAddNewTaskToReadyList+0xcc>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d00e      	beq.n	8005952 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005934:	4b0a      	ldr	r3, [pc, #40]	; (8005960 <prvAddNewTaskToReadyList+0xc8>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800593e:	429a      	cmp	r2, r3
 8005940:	d207      	bcs.n	8005952 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005942:	4b0c      	ldr	r3, [pc, #48]	; (8005974 <prvAddNewTaskToReadyList+0xdc>)
 8005944:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005948:	601a      	str	r2, [r3, #0]
 800594a:	f3bf 8f4f 	dsb	sy
 800594e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005952:	bf00      	nop
 8005954:	3708      	adds	r7, #8
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}
 800595a:	bf00      	nop
 800595c:	200067f0 	.word	0x200067f0
 8005960:	2000631c 	.word	0x2000631c
 8005964:	200067fc 	.word	0x200067fc
 8005968:	2000680c 	.word	0x2000680c
 800596c:	200067f8 	.word	0x200067f8
 8005970:	20006320 	.word	0x20006320
 8005974:	e000ed04 	.word	0xe000ed04

08005978 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005978:	b580      	push	{r7, lr}
 800597a:	b084      	sub	sp, #16
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005980:	2300      	movs	r3, #0
 8005982:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d017      	beq.n	80059ba <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800598a:	4b13      	ldr	r3, [pc, #76]	; (80059d8 <vTaskDelay+0x60>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d00a      	beq.n	80059a8 <vTaskDelay+0x30>
	__asm volatile
 8005992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005996:	f383 8811 	msr	BASEPRI, r3
 800599a:	f3bf 8f6f 	isb	sy
 800599e:	f3bf 8f4f 	dsb	sy
 80059a2:	60bb      	str	r3, [r7, #8]
}
 80059a4:	bf00      	nop
 80059a6:	e7fe      	b.n	80059a6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80059a8:	f000 f880 	bl	8005aac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80059ac:	2100      	movs	r1, #0
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f000 fe0a 	bl	80065c8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80059b4:	f000 f888 	bl	8005ac8 <xTaskResumeAll>
 80059b8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d107      	bne.n	80059d0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80059c0:	4b06      	ldr	r3, [pc, #24]	; (80059dc <vTaskDelay+0x64>)
 80059c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059c6:	601a      	str	r2, [r3, #0]
 80059c8:	f3bf 8f4f 	dsb	sy
 80059cc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80059d0:	bf00      	nop
 80059d2:	3710      	adds	r7, #16
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}
 80059d8:	20006818 	.word	0x20006818
 80059dc:	e000ed04 	.word	0xe000ed04

080059e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b08a      	sub	sp, #40	; 0x28
 80059e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80059e6:	2300      	movs	r3, #0
 80059e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80059ea:	2300      	movs	r3, #0
 80059ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80059ee:	463a      	mov	r2, r7
 80059f0:	1d39      	adds	r1, r7, #4
 80059f2:	f107 0308 	add.w	r3, r7, #8
 80059f6:	4618      	mov	r0, r3
 80059f8:	f7fe fc70 	bl	80042dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80059fc:	6839      	ldr	r1, [r7, #0]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	68ba      	ldr	r2, [r7, #8]
 8005a02:	9202      	str	r2, [sp, #8]
 8005a04:	9301      	str	r3, [sp, #4]
 8005a06:	2300      	movs	r3, #0
 8005a08:	9300      	str	r3, [sp, #0]
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	460a      	mov	r2, r1
 8005a0e:	4921      	ldr	r1, [pc, #132]	; (8005a94 <vTaskStartScheduler+0xb4>)
 8005a10:	4821      	ldr	r0, [pc, #132]	; (8005a98 <vTaskStartScheduler+0xb8>)
 8005a12:	f7ff fe0f 	bl	8005634 <xTaskCreateStatic>
 8005a16:	4603      	mov	r3, r0
 8005a18:	4a20      	ldr	r2, [pc, #128]	; (8005a9c <vTaskStartScheduler+0xbc>)
 8005a1a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005a1c:	4b1f      	ldr	r3, [pc, #124]	; (8005a9c <vTaskStartScheduler+0xbc>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d002      	beq.n	8005a2a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005a24:	2301      	movs	r3, #1
 8005a26:	617b      	str	r3, [r7, #20]
 8005a28:	e001      	b.n	8005a2e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d102      	bne.n	8005a3a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005a34:	f000 fe1c 	bl	8006670 <xTimerCreateTimerTask>
 8005a38:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d116      	bne.n	8005a6e <vTaskStartScheduler+0x8e>
	__asm volatile
 8005a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a44:	f383 8811 	msr	BASEPRI, r3
 8005a48:	f3bf 8f6f 	isb	sy
 8005a4c:	f3bf 8f4f 	dsb	sy
 8005a50:	613b      	str	r3, [r7, #16]
}
 8005a52:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005a54:	4b12      	ldr	r3, [pc, #72]	; (8005aa0 <vTaskStartScheduler+0xc0>)
 8005a56:	f04f 32ff 	mov.w	r2, #4294967295
 8005a5a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005a5c:	4b11      	ldr	r3, [pc, #68]	; (8005aa4 <vTaskStartScheduler+0xc4>)
 8005a5e:	2201      	movs	r2, #1
 8005a60:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005a62:	4b11      	ldr	r3, [pc, #68]	; (8005aa8 <vTaskStartScheduler+0xc8>)
 8005a64:	2200      	movs	r2, #0
 8005a66:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005a68:	f001 f9da 	bl	8006e20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005a6c:	e00e      	b.n	8005a8c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a74:	d10a      	bne.n	8005a8c <vTaskStartScheduler+0xac>
	__asm volatile
 8005a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a7a:	f383 8811 	msr	BASEPRI, r3
 8005a7e:	f3bf 8f6f 	isb	sy
 8005a82:	f3bf 8f4f 	dsb	sy
 8005a86:	60fb      	str	r3, [r7, #12]
}
 8005a88:	bf00      	nop
 8005a8a:	e7fe      	b.n	8005a8a <vTaskStartScheduler+0xaa>
}
 8005a8c:	bf00      	nop
 8005a8e:	3718      	adds	r7, #24
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}
 8005a94:	08017be8 	.word	0x08017be8
 8005a98:	080060e9 	.word	0x080060e9
 8005a9c:	20006814 	.word	0x20006814
 8005aa0:	20006810 	.word	0x20006810
 8005aa4:	200067fc 	.word	0x200067fc
 8005aa8:	200067f4 	.word	0x200067f4

08005aac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005aac:	b480      	push	{r7}
 8005aae:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005ab0:	4b04      	ldr	r3, [pc, #16]	; (8005ac4 <vTaskSuspendAll+0x18>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	3301      	adds	r3, #1
 8005ab6:	4a03      	ldr	r2, [pc, #12]	; (8005ac4 <vTaskSuspendAll+0x18>)
 8005ab8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005aba:	bf00      	nop
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr
 8005ac4:	20006818 	.word	0x20006818

08005ac8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b084      	sub	sp, #16
 8005acc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005ad6:	4b42      	ldr	r3, [pc, #264]	; (8005be0 <xTaskResumeAll+0x118>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d10a      	bne.n	8005af4 <xTaskResumeAll+0x2c>
	__asm volatile
 8005ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae2:	f383 8811 	msr	BASEPRI, r3
 8005ae6:	f3bf 8f6f 	isb	sy
 8005aea:	f3bf 8f4f 	dsb	sy
 8005aee:	603b      	str	r3, [r7, #0]
}
 8005af0:	bf00      	nop
 8005af2:	e7fe      	b.n	8005af2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005af4:	f001 fa36 	bl	8006f64 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005af8:	4b39      	ldr	r3, [pc, #228]	; (8005be0 <xTaskResumeAll+0x118>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	3b01      	subs	r3, #1
 8005afe:	4a38      	ldr	r2, [pc, #224]	; (8005be0 <xTaskResumeAll+0x118>)
 8005b00:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b02:	4b37      	ldr	r3, [pc, #220]	; (8005be0 <xTaskResumeAll+0x118>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d162      	bne.n	8005bd0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005b0a:	4b36      	ldr	r3, [pc, #216]	; (8005be4 <xTaskResumeAll+0x11c>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d05e      	beq.n	8005bd0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005b12:	e02f      	b.n	8005b74 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b14:	4b34      	ldr	r3, [pc, #208]	; (8005be8 <xTaskResumeAll+0x120>)
 8005b16:	68db      	ldr	r3, [r3, #12]
 8005b18:	68db      	ldr	r3, [r3, #12]
 8005b1a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	3318      	adds	r3, #24
 8005b20:	4618      	mov	r0, r3
 8005b22:	f7fe fc99 	bl	8004458 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	3304      	adds	r3, #4
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f7fe fc94 	bl	8004458 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b34:	4b2d      	ldr	r3, [pc, #180]	; (8005bec <xTaskResumeAll+0x124>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d903      	bls.n	8005b44 <xTaskResumeAll+0x7c>
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b40:	4a2a      	ldr	r2, [pc, #168]	; (8005bec <xTaskResumeAll+0x124>)
 8005b42:	6013      	str	r3, [r2, #0]
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b48:	4613      	mov	r3, r2
 8005b4a:	009b      	lsls	r3, r3, #2
 8005b4c:	4413      	add	r3, r2
 8005b4e:	009b      	lsls	r3, r3, #2
 8005b50:	4a27      	ldr	r2, [pc, #156]	; (8005bf0 <xTaskResumeAll+0x128>)
 8005b52:	441a      	add	r2, r3
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	3304      	adds	r3, #4
 8005b58:	4619      	mov	r1, r3
 8005b5a:	4610      	mov	r0, r2
 8005b5c:	f7fe fc1f 	bl	800439e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b64:	4b23      	ldr	r3, [pc, #140]	; (8005bf4 <xTaskResumeAll+0x12c>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b6a:	429a      	cmp	r2, r3
 8005b6c:	d302      	bcc.n	8005b74 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005b6e:	4b22      	ldr	r3, [pc, #136]	; (8005bf8 <xTaskResumeAll+0x130>)
 8005b70:	2201      	movs	r2, #1
 8005b72:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005b74:	4b1c      	ldr	r3, [pc, #112]	; (8005be8 <xTaskResumeAll+0x120>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d1cb      	bne.n	8005b14 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d001      	beq.n	8005b86 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005b82:	f000 fb67 	bl	8006254 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005b86:	4b1d      	ldr	r3, [pc, #116]	; (8005bfc <xTaskResumeAll+0x134>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d010      	beq.n	8005bb4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005b92:	f000 f859 	bl	8005c48 <xTaskIncrementTick>
 8005b96:	4603      	mov	r3, r0
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d002      	beq.n	8005ba2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005b9c:	4b16      	ldr	r3, [pc, #88]	; (8005bf8 <xTaskResumeAll+0x130>)
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	3b01      	subs	r3, #1
 8005ba6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d1f1      	bne.n	8005b92 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005bae:	4b13      	ldr	r3, [pc, #76]	; (8005bfc <xTaskResumeAll+0x134>)
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005bb4:	4b10      	ldr	r3, [pc, #64]	; (8005bf8 <xTaskResumeAll+0x130>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d009      	beq.n	8005bd0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005bc0:	4b0f      	ldr	r3, [pc, #60]	; (8005c00 <xTaskResumeAll+0x138>)
 8005bc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bc6:	601a      	str	r2, [r3, #0]
 8005bc8:	f3bf 8f4f 	dsb	sy
 8005bcc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005bd0:	f001 f9f8 	bl	8006fc4 <vPortExitCritical>

	return xAlreadyYielded;
 8005bd4:	68bb      	ldr	r3, [r7, #8]
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3710      	adds	r7, #16
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}
 8005bde:	bf00      	nop
 8005be0:	20006818 	.word	0x20006818
 8005be4:	200067f0 	.word	0x200067f0
 8005be8:	200067b0 	.word	0x200067b0
 8005bec:	200067f8 	.word	0x200067f8
 8005bf0:	20006320 	.word	0x20006320
 8005bf4:	2000631c 	.word	0x2000631c
 8005bf8:	20006804 	.word	0x20006804
 8005bfc:	20006800 	.word	0x20006800
 8005c00:	e000ed04 	.word	0xe000ed04

08005c04 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005c04:	b480      	push	{r7}
 8005c06:	b083      	sub	sp, #12
 8005c08:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005c0a:	4b05      	ldr	r3, [pc, #20]	; (8005c20 <xTaskGetTickCount+0x1c>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005c10:	687b      	ldr	r3, [r7, #4]
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	370c      	adds	r7, #12
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr
 8005c1e:	bf00      	nop
 8005c20:	200067f4 	.word	0x200067f4

08005c24 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b082      	sub	sp, #8
 8005c28:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005c2a:	f001 fa7d 	bl	8007128 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8005c2e:	2300      	movs	r3, #0
 8005c30:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8005c32:	4b04      	ldr	r3, [pc, #16]	; (8005c44 <xTaskGetTickCountFromISR+0x20>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005c38:	683b      	ldr	r3, [r7, #0]
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3708      	adds	r7, #8
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}
 8005c42:	bf00      	nop
 8005c44:	200067f4 	.word	0x200067f4

08005c48 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b086      	sub	sp, #24
 8005c4c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c52:	4b4f      	ldr	r3, [pc, #316]	; (8005d90 <xTaskIncrementTick+0x148>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	f040 808f 	bne.w	8005d7a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005c5c:	4b4d      	ldr	r3, [pc, #308]	; (8005d94 <xTaskIncrementTick+0x14c>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	3301      	adds	r3, #1
 8005c62:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005c64:	4a4b      	ldr	r2, [pc, #300]	; (8005d94 <xTaskIncrementTick+0x14c>)
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d120      	bne.n	8005cb2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005c70:	4b49      	ldr	r3, [pc, #292]	; (8005d98 <xTaskIncrementTick+0x150>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d00a      	beq.n	8005c90 <xTaskIncrementTick+0x48>
	__asm volatile
 8005c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c7e:	f383 8811 	msr	BASEPRI, r3
 8005c82:	f3bf 8f6f 	isb	sy
 8005c86:	f3bf 8f4f 	dsb	sy
 8005c8a:	603b      	str	r3, [r7, #0]
}
 8005c8c:	bf00      	nop
 8005c8e:	e7fe      	b.n	8005c8e <xTaskIncrementTick+0x46>
 8005c90:	4b41      	ldr	r3, [pc, #260]	; (8005d98 <xTaskIncrementTick+0x150>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	60fb      	str	r3, [r7, #12]
 8005c96:	4b41      	ldr	r3, [pc, #260]	; (8005d9c <xTaskIncrementTick+0x154>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a3f      	ldr	r2, [pc, #252]	; (8005d98 <xTaskIncrementTick+0x150>)
 8005c9c:	6013      	str	r3, [r2, #0]
 8005c9e:	4a3f      	ldr	r2, [pc, #252]	; (8005d9c <xTaskIncrementTick+0x154>)
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	6013      	str	r3, [r2, #0]
 8005ca4:	4b3e      	ldr	r3, [pc, #248]	; (8005da0 <xTaskIncrementTick+0x158>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	3301      	adds	r3, #1
 8005caa:	4a3d      	ldr	r2, [pc, #244]	; (8005da0 <xTaskIncrementTick+0x158>)
 8005cac:	6013      	str	r3, [r2, #0]
 8005cae:	f000 fad1 	bl	8006254 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005cb2:	4b3c      	ldr	r3, [pc, #240]	; (8005da4 <xTaskIncrementTick+0x15c>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	693a      	ldr	r2, [r7, #16]
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d349      	bcc.n	8005d50 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005cbc:	4b36      	ldr	r3, [pc, #216]	; (8005d98 <xTaskIncrementTick+0x150>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d104      	bne.n	8005cd0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cc6:	4b37      	ldr	r3, [pc, #220]	; (8005da4 <xTaskIncrementTick+0x15c>)
 8005cc8:	f04f 32ff 	mov.w	r2, #4294967295
 8005ccc:	601a      	str	r2, [r3, #0]
					break;
 8005cce:	e03f      	b.n	8005d50 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cd0:	4b31      	ldr	r3, [pc, #196]	; (8005d98 <xTaskIncrementTick+0x150>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	68db      	ldr	r3, [r3, #12]
 8005cd6:	68db      	ldr	r3, [r3, #12]
 8005cd8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005ce0:	693a      	ldr	r2, [r7, #16]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d203      	bcs.n	8005cf0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005ce8:	4a2e      	ldr	r2, [pc, #184]	; (8005da4 <xTaskIncrementTick+0x15c>)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005cee:	e02f      	b.n	8005d50 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	3304      	adds	r3, #4
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f7fe fbaf 	bl	8004458 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d004      	beq.n	8005d0c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	3318      	adds	r3, #24
 8005d06:	4618      	mov	r0, r3
 8005d08:	f7fe fba6 	bl	8004458 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d10:	4b25      	ldr	r3, [pc, #148]	; (8005da8 <xTaskIncrementTick+0x160>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	429a      	cmp	r2, r3
 8005d16:	d903      	bls.n	8005d20 <xTaskIncrementTick+0xd8>
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d1c:	4a22      	ldr	r2, [pc, #136]	; (8005da8 <xTaskIncrementTick+0x160>)
 8005d1e:	6013      	str	r3, [r2, #0]
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d24:	4613      	mov	r3, r2
 8005d26:	009b      	lsls	r3, r3, #2
 8005d28:	4413      	add	r3, r2
 8005d2a:	009b      	lsls	r3, r3, #2
 8005d2c:	4a1f      	ldr	r2, [pc, #124]	; (8005dac <xTaskIncrementTick+0x164>)
 8005d2e:	441a      	add	r2, r3
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	3304      	adds	r3, #4
 8005d34:	4619      	mov	r1, r3
 8005d36:	4610      	mov	r0, r2
 8005d38:	f7fe fb31 	bl	800439e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d40:	4b1b      	ldr	r3, [pc, #108]	; (8005db0 <xTaskIncrementTick+0x168>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d46:	429a      	cmp	r2, r3
 8005d48:	d3b8      	bcc.n	8005cbc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d4e:	e7b5      	b.n	8005cbc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005d50:	4b17      	ldr	r3, [pc, #92]	; (8005db0 <xTaskIncrementTick+0x168>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d56:	4915      	ldr	r1, [pc, #84]	; (8005dac <xTaskIncrementTick+0x164>)
 8005d58:	4613      	mov	r3, r2
 8005d5a:	009b      	lsls	r3, r3, #2
 8005d5c:	4413      	add	r3, r2
 8005d5e:	009b      	lsls	r3, r3, #2
 8005d60:	440b      	add	r3, r1
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d901      	bls.n	8005d6c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005d6c:	4b11      	ldr	r3, [pc, #68]	; (8005db4 <xTaskIncrementTick+0x16c>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d007      	beq.n	8005d84 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005d74:	2301      	movs	r3, #1
 8005d76:	617b      	str	r3, [r7, #20]
 8005d78:	e004      	b.n	8005d84 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005d7a:	4b0f      	ldr	r3, [pc, #60]	; (8005db8 <xTaskIncrementTick+0x170>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	3301      	adds	r3, #1
 8005d80:	4a0d      	ldr	r2, [pc, #52]	; (8005db8 <xTaskIncrementTick+0x170>)
 8005d82:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005d84:	697b      	ldr	r3, [r7, #20]
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3718      	adds	r7, #24
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}
 8005d8e:	bf00      	nop
 8005d90:	20006818 	.word	0x20006818
 8005d94:	200067f4 	.word	0x200067f4
 8005d98:	200067a8 	.word	0x200067a8
 8005d9c:	200067ac 	.word	0x200067ac
 8005da0:	20006808 	.word	0x20006808
 8005da4:	20006810 	.word	0x20006810
 8005da8:	200067f8 	.word	0x200067f8
 8005dac:	20006320 	.word	0x20006320
 8005db0:	2000631c 	.word	0x2000631c
 8005db4:	20006804 	.word	0x20006804
 8005db8:	20006800 	.word	0x20006800

08005dbc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b085      	sub	sp, #20
 8005dc0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005dc2:	4b28      	ldr	r3, [pc, #160]	; (8005e64 <vTaskSwitchContext+0xa8>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d003      	beq.n	8005dd2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005dca:	4b27      	ldr	r3, [pc, #156]	; (8005e68 <vTaskSwitchContext+0xac>)
 8005dcc:	2201      	movs	r2, #1
 8005dce:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005dd0:	e041      	b.n	8005e56 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8005dd2:	4b25      	ldr	r3, [pc, #148]	; (8005e68 <vTaskSwitchContext+0xac>)
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005dd8:	4b24      	ldr	r3, [pc, #144]	; (8005e6c <vTaskSwitchContext+0xb0>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	60fb      	str	r3, [r7, #12]
 8005dde:	e010      	b.n	8005e02 <vTaskSwitchContext+0x46>
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d10a      	bne.n	8005dfc <vTaskSwitchContext+0x40>
	__asm volatile
 8005de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dea:	f383 8811 	msr	BASEPRI, r3
 8005dee:	f3bf 8f6f 	isb	sy
 8005df2:	f3bf 8f4f 	dsb	sy
 8005df6:	607b      	str	r3, [r7, #4]
}
 8005df8:	bf00      	nop
 8005dfa:	e7fe      	b.n	8005dfa <vTaskSwitchContext+0x3e>
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	3b01      	subs	r3, #1
 8005e00:	60fb      	str	r3, [r7, #12]
 8005e02:	491b      	ldr	r1, [pc, #108]	; (8005e70 <vTaskSwitchContext+0xb4>)
 8005e04:	68fa      	ldr	r2, [r7, #12]
 8005e06:	4613      	mov	r3, r2
 8005e08:	009b      	lsls	r3, r3, #2
 8005e0a:	4413      	add	r3, r2
 8005e0c:	009b      	lsls	r3, r3, #2
 8005e0e:	440b      	add	r3, r1
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d0e4      	beq.n	8005de0 <vTaskSwitchContext+0x24>
 8005e16:	68fa      	ldr	r2, [r7, #12]
 8005e18:	4613      	mov	r3, r2
 8005e1a:	009b      	lsls	r3, r3, #2
 8005e1c:	4413      	add	r3, r2
 8005e1e:	009b      	lsls	r3, r3, #2
 8005e20:	4a13      	ldr	r2, [pc, #76]	; (8005e70 <vTaskSwitchContext+0xb4>)
 8005e22:	4413      	add	r3, r2
 8005e24:	60bb      	str	r3, [r7, #8]
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	685a      	ldr	r2, [r3, #4]
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	605a      	str	r2, [r3, #4]
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	685a      	ldr	r2, [r3, #4]
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	3308      	adds	r3, #8
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d104      	bne.n	8005e46 <vTaskSwitchContext+0x8a>
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	685a      	ldr	r2, [r3, #4]
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	605a      	str	r2, [r3, #4]
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	68db      	ldr	r3, [r3, #12]
 8005e4c:	4a09      	ldr	r2, [pc, #36]	; (8005e74 <vTaskSwitchContext+0xb8>)
 8005e4e:	6013      	str	r3, [r2, #0]
 8005e50:	4a06      	ldr	r2, [pc, #24]	; (8005e6c <vTaskSwitchContext+0xb0>)
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	6013      	str	r3, [r2, #0]
}
 8005e56:	bf00      	nop
 8005e58:	3714      	adds	r7, #20
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr
 8005e62:	bf00      	nop
 8005e64:	20006818 	.word	0x20006818
 8005e68:	20006804 	.word	0x20006804
 8005e6c:	200067f8 	.word	0x200067f8
 8005e70:	20006320 	.word	0x20006320
 8005e74:	2000631c 	.word	0x2000631c

08005e78 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b084      	sub	sp, #16
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d10a      	bne.n	8005e9e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e8c:	f383 8811 	msr	BASEPRI, r3
 8005e90:	f3bf 8f6f 	isb	sy
 8005e94:	f3bf 8f4f 	dsb	sy
 8005e98:	60fb      	str	r3, [r7, #12]
}
 8005e9a:	bf00      	nop
 8005e9c:	e7fe      	b.n	8005e9c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005e9e:	4b07      	ldr	r3, [pc, #28]	; (8005ebc <vTaskPlaceOnEventList+0x44>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	3318      	adds	r3, #24
 8005ea4:	4619      	mov	r1, r3
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f7fe fa9d 	bl	80043e6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005eac:	2101      	movs	r1, #1
 8005eae:	6838      	ldr	r0, [r7, #0]
 8005eb0:	f000 fb8a 	bl	80065c8 <prvAddCurrentTaskToDelayedList>
}
 8005eb4:	bf00      	nop
 8005eb6:	3710      	adds	r7, #16
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}
 8005ebc:	2000631c 	.word	0x2000631c

08005ec0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b086      	sub	sp, #24
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	60f8      	str	r0, [r7, #12]
 8005ec8:	60b9      	str	r1, [r7, #8]
 8005eca:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d10a      	bne.n	8005ee8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed6:	f383 8811 	msr	BASEPRI, r3
 8005eda:	f3bf 8f6f 	isb	sy
 8005ede:	f3bf 8f4f 	dsb	sy
 8005ee2:	617b      	str	r3, [r7, #20]
}
 8005ee4:	bf00      	nop
 8005ee6:	e7fe      	b.n	8005ee6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005ee8:	4b0a      	ldr	r3, [pc, #40]	; (8005f14 <vTaskPlaceOnEventListRestricted+0x54>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	3318      	adds	r3, #24
 8005eee:	4619      	mov	r1, r3
 8005ef0:	68f8      	ldr	r0, [r7, #12]
 8005ef2:	f7fe fa54 	bl	800439e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d002      	beq.n	8005f02 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005efc:	f04f 33ff 	mov.w	r3, #4294967295
 8005f00:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005f02:	6879      	ldr	r1, [r7, #4]
 8005f04:	68b8      	ldr	r0, [r7, #8]
 8005f06:	f000 fb5f 	bl	80065c8 <prvAddCurrentTaskToDelayedList>
	}
 8005f0a:	bf00      	nop
 8005f0c:	3718      	adds	r7, #24
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
 8005f12:	bf00      	nop
 8005f14:	2000631c 	.word	0x2000631c

08005f18 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b086      	sub	sp, #24
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	68db      	ldr	r3, [r3, #12]
 8005f24:	68db      	ldr	r3, [r3, #12]
 8005f26:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d10a      	bne.n	8005f44 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f32:	f383 8811 	msr	BASEPRI, r3
 8005f36:	f3bf 8f6f 	isb	sy
 8005f3a:	f3bf 8f4f 	dsb	sy
 8005f3e:	60fb      	str	r3, [r7, #12]
}
 8005f40:	bf00      	nop
 8005f42:	e7fe      	b.n	8005f42 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	3318      	adds	r3, #24
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f7fe fa85 	bl	8004458 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f4e:	4b1e      	ldr	r3, [pc, #120]	; (8005fc8 <xTaskRemoveFromEventList+0xb0>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d11d      	bne.n	8005f92 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	3304      	adds	r3, #4
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f7fe fa7c 	bl	8004458 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f64:	4b19      	ldr	r3, [pc, #100]	; (8005fcc <xTaskRemoveFromEventList+0xb4>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d903      	bls.n	8005f74 <xTaskRemoveFromEventList+0x5c>
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f70:	4a16      	ldr	r2, [pc, #88]	; (8005fcc <xTaskRemoveFromEventList+0xb4>)
 8005f72:	6013      	str	r3, [r2, #0]
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f78:	4613      	mov	r3, r2
 8005f7a:	009b      	lsls	r3, r3, #2
 8005f7c:	4413      	add	r3, r2
 8005f7e:	009b      	lsls	r3, r3, #2
 8005f80:	4a13      	ldr	r2, [pc, #76]	; (8005fd0 <xTaskRemoveFromEventList+0xb8>)
 8005f82:	441a      	add	r2, r3
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	3304      	adds	r3, #4
 8005f88:	4619      	mov	r1, r3
 8005f8a:	4610      	mov	r0, r2
 8005f8c:	f7fe fa07 	bl	800439e <vListInsertEnd>
 8005f90:	e005      	b.n	8005f9e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	3318      	adds	r3, #24
 8005f96:	4619      	mov	r1, r3
 8005f98:	480e      	ldr	r0, [pc, #56]	; (8005fd4 <xTaskRemoveFromEventList+0xbc>)
 8005f9a:	f7fe fa00 	bl	800439e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fa2:	4b0d      	ldr	r3, [pc, #52]	; (8005fd8 <xTaskRemoveFromEventList+0xc0>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d905      	bls.n	8005fb8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005fac:	2301      	movs	r3, #1
 8005fae:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005fb0:	4b0a      	ldr	r3, [pc, #40]	; (8005fdc <xTaskRemoveFromEventList+0xc4>)
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	601a      	str	r2, [r3, #0]
 8005fb6:	e001      	b.n	8005fbc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005fbc:	697b      	ldr	r3, [r7, #20]
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3718      	adds	r7, #24
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}
 8005fc6:	bf00      	nop
 8005fc8:	20006818 	.word	0x20006818
 8005fcc:	200067f8 	.word	0x200067f8
 8005fd0:	20006320 	.word	0x20006320
 8005fd4:	200067b0 	.word	0x200067b0
 8005fd8:	2000631c 	.word	0x2000631c
 8005fdc:	20006804 	.word	0x20006804

08005fe0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b083      	sub	sp, #12
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005fe8:	4b06      	ldr	r3, [pc, #24]	; (8006004 <vTaskInternalSetTimeOutState+0x24>)
 8005fea:	681a      	ldr	r2, [r3, #0]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005ff0:	4b05      	ldr	r3, [pc, #20]	; (8006008 <vTaskInternalSetTimeOutState+0x28>)
 8005ff2:	681a      	ldr	r2, [r3, #0]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	605a      	str	r2, [r3, #4]
}
 8005ff8:	bf00      	nop
 8005ffa:	370c      	adds	r7, #12
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr
 8006004:	20006808 	.word	0x20006808
 8006008:	200067f4 	.word	0x200067f4

0800600c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b088      	sub	sp, #32
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d10a      	bne.n	8006032 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800601c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006020:	f383 8811 	msr	BASEPRI, r3
 8006024:	f3bf 8f6f 	isb	sy
 8006028:	f3bf 8f4f 	dsb	sy
 800602c:	613b      	str	r3, [r7, #16]
}
 800602e:	bf00      	nop
 8006030:	e7fe      	b.n	8006030 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d10a      	bne.n	800604e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800603c:	f383 8811 	msr	BASEPRI, r3
 8006040:	f3bf 8f6f 	isb	sy
 8006044:	f3bf 8f4f 	dsb	sy
 8006048:	60fb      	str	r3, [r7, #12]
}
 800604a:	bf00      	nop
 800604c:	e7fe      	b.n	800604c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800604e:	f000 ff89 	bl	8006f64 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006052:	4b1d      	ldr	r3, [pc, #116]	; (80060c8 <xTaskCheckForTimeOut+0xbc>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	69ba      	ldr	r2, [r7, #24]
 800605e:	1ad3      	subs	r3, r2, r3
 8006060:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f1b3 3fff 	cmp.w	r3, #4294967295
 800606a:	d102      	bne.n	8006072 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800606c:	2300      	movs	r3, #0
 800606e:	61fb      	str	r3, [r7, #28]
 8006070:	e023      	b.n	80060ba <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	4b15      	ldr	r3, [pc, #84]	; (80060cc <xTaskCheckForTimeOut+0xc0>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	429a      	cmp	r2, r3
 800607c:	d007      	beq.n	800608e <xTaskCheckForTimeOut+0x82>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	69ba      	ldr	r2, [r7, #24]
 8006084:	429a      	cmp	r2, r3
 8006086:	d302      	bcc.n	800608e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006088:	2301      	movs	r3, #1
 800608a:	61fb      	str	r3, [r7, #28]
 800608c:	e015      	b.n	80060ba <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	697a      	ldr	r2, [r7, #20]
 8006094:	429a      	cmp	r2, r3
 8006096:	d20b      	bcs.n	80060b0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	681a      	ldr	r2, [r3, #0]
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	1ad2      	subs	r2, r2, r3
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f7ff ff9b 	bl	8005fe0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80060aa:	2300      	movs	r3, #0
 80060ac:	61fb      	str	r3, [r7, #28]
 80060ae:	e004      	b.n	80060ba <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	2200      	movs	r2, #0
 80060b4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80060b6:	2301      	movs	r3, #1
 80060b8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80060ba:	f000 ff83 	bl	8006fc4 <vPortExitCritical>

	return xReturn;
 80060be:	69fb      	ldr	r3, [r7, #28]
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	3720      	adds	r7, #32
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}
 80060c8:	200067f4 	.word	0x200067f4
 80060cc:	20006808 	.word	0x20006808

080060d0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80060d0:	b480      	push	{r7}
 80060d2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80060d4:	4b03      	ldr	r3, [pc, #12]	; (80060e4 <vTaskMissedYield+0x14>)
 80060d6:	2201      	movs	r2, #1
 80060d8:	601a      	str	r2, [r3, #0]
}
 80060da:	bf00      	nop
 80060dc:	46bd      	mov	sp, r7
 80060de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e2:	4770      	bx	lr
 80060e4:	20006804 	.word	0x20006804

080060e8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b082      	sub	sp, #8
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80060f0:	f000 f852 	bl	8006198 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80060f4:	4b06      	ldr	r3, [pc, #24]	; (8006110 <prvIdleTask+0x28>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	2b01      	cmp	r3, #1
 80060fa:	d9f9      	bls.n	80060f0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80060fc:	4b05      	ldr	r3, [pc, #20]	; (8006114 <prvIdleTask+0x2c>)
 80060fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006102:	601a      	str	r2, [r3, #0]
 8006104:	f3bf 8f4f 	dsb	sy
 8006108:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800610c:	e7f0      	b.n	80060f0 <prvIdleTask+0x8>
 800610e:	bf00      	nop
 8006110:	20006320 	.word	0x20006320
 8006114:	e000ed04 	.word	0xe000ed04

08006118 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b082      	sub	sp, #8
 800611c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800611e:	2300      	movs	r3, #0
 8006120:	607b      	str	r3, [r7, #4]
 8006122:	e00c      	b.n	800613e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006124:	687a      	ldr	r2, [r7, #4]
 8006126:	4613      	mov	r3, r2
 8006128:	009b      	lsls	r3, r3, #2
 800612a:	4413      	add	r3, r2
 800612c:	009b      	lsls	r3, r3, #2
 800612e:	4a12      	ldr	r2, [pc, #72]	; (8006178 <prvInitialiseTaskLists+0x60>)
 8006130:	4413      	add	r3, r2
 8006132:	4618      	mov	r0, r3
 8006134:	f7fe f906 	bl	8004344 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	3301      	adds	r3, #1
 800613c:	607b      	str	r3, [r7, #4]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2b37      	cmp	r3, #55	; 0x37
 8006142:	d9ef      	bls.n	8006124 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006144:	480d      	ldr	r0, [pc, #52]	; (800617c <prvInitialiseTaskLists+0x64>)
 8006146:	f7fe f8fd 	bl	8004344 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800614a:	480d      	ldr	r0, [pc, #52]	; (8006180 <prvInitialiseTaskLists+0x68>)
 800614c:	f7fe f8fa 	bl	8004344 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006150:	480c      	ldr	r0, [pc, #48]	; (8006184 <prvInitialiseTaskLists+0x6c>)
 8006152:	f7fe f8f7 	bl	8004344 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006156:	480c      	ldr	r0, [pc, #48]	; (8006188 <prvInitialiseTaskLists+0x70>)
 8006158:	f7fe f8f4 	bl	8004344 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800615c:	480b      	ldr	r0, [pc, #44]	; (800618c <prvInitialiseTaskLists+0x74>)
 800615e:	f7fe f8f1 	bl	8004344 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006162:	4b0b      	ldr	r3, [pc, #44]	; (8006190 <prvInitialiseTaskLists+0x78>)
 8006164:	4a05      	ldr	r2, [pc, #20]	; (800617c <prvInitialiseTaskLists+0x64>)
 8006166:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006168:	4b0a      	ldr	r3, [pc, #40]	; (8006194 <prvInitialiseTaskLists+0x7c>)
 800616a:	4a05      	ldr	r2, [pc, #20]	; (8006180 <prvInitialiseTaskLists+0x68>)
 800616c:	601a      	str	r2, [r3, #0]
}
 800616e:	bf00      	nop
 8006170:	3708      	adds	r7, #8
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}
 8006176:	bf00      	nop
 8006178:	20006320 	.word	0x20006320
 800617c:	20006780 	.word	0x20006780
 8006180:	20006794 	.word	0x20006794
 8006184:	200067b0 	.word	0x200067b0
 8006188:	200067c4 	.word	0x200067c4
 800618c:	200067dc 	.word	0x200067dc
 8006190:	200067a8 	.word	0x200067a8
 8006194:	200067ac 	.word	0x200067ac

08006198 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b082      	sub	sp, #8
 800619c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800619e:	e019      	b.n	80061d4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80061a0:	f000 fee0 	bl	8006f64 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061a4:	4b10      	ldr	r3, [pc, #64]	; (80061e8 <prvCheckTasksWaitingTermination+0x50>)
 80061a6:	68db      	ldr	r3, [r3, #12]
 80061a8:	68db      	ldr	r3, [r3, #12]
 80061aa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	3304      	adds	r3, #4
 80061b0:	4618      	mov	r0, r3
 80061b2:	f7fe f951 	bl	8004458 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80061b6:	4b0d      	ldr	r3, [pc, #52]	; (80061ec <prvCheckTasksWaitingTermination+0x54>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	3b01      	subs	r3, #1
 80061bc:	4a0b      	ldr	r2, [pc, #44]	; (80061ec <prvCheckTasksWaitingTermination+0x54>)
 80061be:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80061c0:	4b0b      	ldr	r3, [pc, #44]	; (80061f0 <prvCheckTasksWaitingTermination+0x58>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	3b01      	subs	r3, #1
 80061c6:	4a0a      	ldr	r2, [pc, #40]	; (80061f0 <prvCheckTasksWaitingTermination+0x58>)
 80061c8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80061ca:	f000 fefb 	bl	8006fc4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f000 f810 	bl	80061f4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80061d4:	4b06      	ldr	r3, [pc, #24]	; (80061f0 <prvCheckTasksWaitingTermination+0x58>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d1e1      	bne.n	80061a0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80061dc:	bf00      	nop
 80061de:	bf00      	nop
 80061e0:	3708      	adds	r7, #8
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}
 80061e6:	bf00      	nop
 80061e8:	200067c4 	.word	0x200067c4
 80061ec:	200067f0 	.word	0x200067f0
 80061f0:	200067d8 	.word	0x200067d8

080061f4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b084      	sub	sp, #16
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006202:	2b00      	cmp	r3, #0
 8006204:	d108      	bne.n	8006218 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800620a:	4618      	mov	r0, r3
 800620c:	f001 f898 	bl	8007340 <vPortFree>
				vPortFree( pxTCB );
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f001 f895 	bl	8007340 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006216:	e018      	b.n	800624a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800621e:	2b01      	cmp	r3, #1
 8006220:	d103      	bne.n	800622a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f001 f88c 	bl	8007340 <vPortFree>
	}
 8006228:	e00f      	b.n	800624a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006230:	2b02      	cmp	r3, #2
 8006232:	d00a      	beq.n	800624a <prvDeleteTCB+0x56>
	__asm volatile
 8006234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006238:	f383 8811 	msr	BASEPRI, r3
 800623c:	f3bf 8f6f 	isb	sy
 8006240:	f3bf 8f4f 	dsb	sy
 8006244:	60fb      	str	r3, [r7, #12]
}
 8006246:	bf00      	nop
 8006248:	e7fe      	b.n	8006248 <prvDeleteTCB+0x54>
	}
 800624a:	bf00      	nop
 800624c:	3710      	adds	r7, #16
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}
	...

08006254 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006254:	b480      	push	{r7}
 8006256:	b083      	sub	sp, #12
 8006258:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800625a:	4b0c      	ldr	r3, [pc, #48]	; (800628c <prvResetNextTaskUnblockTime+0x38>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d104      	bne.n	800626e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006264:	4b0a      	ldr	r3, [pc, #40]	; (8006290 <prvResetNextTaskUnblockTime+0x3c>)
 8006266:	f04f 32ff 	mov.w	r2, #4294967295
 800626a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800626c:	e008      	b.n	8006280 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800626e:	4b07      	ldr	r3, [pc, #28]	; (800628c <prvResetNextTaskUnblockTime+0x38>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	68db      	ldr	r3, [r3, #12]
 8006274:	68db      	ldr	r3, [r3, #12]
 8006276:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	4a04      	ldr	r2, [pc, #16]	; (8006290 <prvResetNextTaskUnblockTime+0x3c>)
 800627e:	6013      	str	r3, [r2, #0]
}
 8006280:	bf00      	nop
 8006282:	370c      	adds	r7, #12
 8006284:	46bd      	mov	sp, r7
 8006286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628a:	4770      	bx	lr
 800628c:	200067a8 	.word	0x200067a8
 8006290:	20006810 	.word	0x20006810

08006294 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8006294:	b480      	push	{r7}
 8006296:	b083      	sub	sp, #12
 8006298:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800629a:	4b05      	ldr	r3, [pc, #20]	; (80062b0 <xTaskGetCurrentTaskHandle+0x1c>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	607b      	str	r3, [r7, #4]

		return xReturn;
 80062a0:	687b      	ldr	r3, [r7, #4]
	}
 80062a2:	4618      	mov	r0, r3
 80062a4:	370c      	adds	r7, #12
 80062a6:	46bd      	mov	sp, r7
 80062a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ac:	4770      	bx	lr
 80062ae:	bf00      	nop
 80062b0:	2000631c 	.word	0x2000631c

080062b4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80062b4:	b480      	push	{r7}
 80062b6:	b083      	sub	sp, #12
 80062b8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80062ba:	4b0b      	ldr	r3, [pc, #44]	; (80062e8 <xTaskGetSchedulerState+0x34>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d102      	bne.n	80062c8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80062c2:	2301      	movs	r3, #1
 80062c4:	607b      	str	r3, [r7, #4]
 80062c6:	e008      	b.n	80062da <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062c8:	4b08      	ldr	r3, [pc, #32]	; (80062ec <xTaskGetSchedulerState+0x38>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d102      	bne.n	80062d6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80062d0:	2302      	movs	r3, #2
 80062d2:	607b      	str	r3, [r7, #4]
 80062d4:	e001      	b.n	80062da <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80062d6:	2300      	movs	r3, #0
 80062d8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80062da:	687b      	ldr	r3, [r7, #4]
	}
 80062dc:	4618      	mov	r0, r3
 80062de:	370c      	adds	r7, #12
 80062e0:	46bd      	mov	sp, r7
 80062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e6:	4770      	bx	lr
 80062e8:	200067fc 	.word	0x200067fc
 80062ec:	20006818 	.word	0x20006818

080062f0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b084      	sub	sp, #16
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80062fc:	2300      	movs	r3, #0
 80062fe:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d051      	beq.n	80063aa <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800630a:	4b2a      	ldr	r3, [pc, #168]	; (80063b4 <xTaskPriorityInherit+0xc4>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006310:	429a      	cmp	r2, r3
 8006312:	d241      	bcs.n	8006398 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	699b      	ldr	r3, [r3, #24]
 8006318:	2b00      	cmp	r3, #0
 800631a:	db06      	blt.n	800632a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800631c:	4b25      	ldr	r3, [pc, #148]	; (80063b4 <xTaskPriorityInherit+0xc4>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006322:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	6959      	ldr	r1, [r3, #20]
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006332:	4613      	mov	r3, r2
 8006334:	009b      	lsls	r3, r3, #2
 8006336:	4413      	add	r3, r2
 8006338:	009b      	lsls	r3, r3, #2
 800633a:	4a1f      	ldr	r2, [pc, #124]	; (80063b8 <xTaskPriorityInherit+0xc8>)
 800633c:	4413      	add	r3, r2
 800633e:	4299      	cmp	r1, r3
 8006340:	d122      	bne.n	8006388 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	3304      	adds	r3, #4
 8006346:	4618      	mov	r0, r3
 8006348:	f7fe f886 	bl	8004458 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800634c:	4b19      	ldr	r3, [pc, #100]	; (80063b4 <xTaskPriorityInherit+0xc4>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800635a:	4b18      	ldr	r3, [pc, #96]	; (80063bc <xTaskPriorityInherit+0xcc>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	429a      	cmp	r2, r3
 8006360:	d903      	bls.n	800636a <xTaskPriorityInherit+0x7a>
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006366:	4a15      	ldr	r2, [pc, #84]	; (80063bc <xTaskPriorityInherit+0xcc>)
 8006368:	6013      	str	r3, [r2, #0]
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800636e:	4613      	mov	r3, r2
 8006370:	009b      	lsls	r3, r3, #2
 8006372:	4413      	add	r3, r2
 8006374:	009b      	lsls	r3, r3, #2
 8006376:	4a10      	ldr	r2, [pc, #64]	; (80063b8 <xTaskPriorityInherit+0xc8>)
 8006378:	441a      	add	r2, r3
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	3304      	adds	r3, #4
 800637e:	4619      	mov	r1, r3
 8006380:	4610      	mov	r0, r2
 8006382:	f7fe f80c 	bl	800439e <vListInsertEnd>
 8006386:	e004      	b.n	8006392 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006388:	4b0a      	ldr	r3, [pc, #40]	; (80063b4 <xTaskPriorityInherit+0xc4>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006392:	2301      	movs	r3, #1
 8006394:	60fb      	str	r3, [r7, #12]
 8006396:	e008      	b.n	80063aa <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800639c:	4b05      	ldr	r3, [pc, #20]	; (80063b4 <xTaskPriorityInherit+0xc4>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a2:	429a      	cmp	r2, r3
 80063a4:	d201      	bcs.n	80063aa <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80063a6:	2301      	movs	r3, #1
 80063a8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80063aa:	68fb      	ldr	r3, [r7, #12]
	}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3710      	adds	r7, #16
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}
 80063b4:	2000631c 	.word	0x2000631c
 80063b8:	20006320 	.word	0x20006320
 80063bc:	200067f8 	.word	0x200067f8

080063c0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b086      	sub	sp, #24
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80063cc:	2300      	movs	r3, #0
 80063ce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d056      	beq.n	8006484 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80063d6:	4b2e      	ldr	r3, [pc, #184]	; (8006490 <xTaskPriorityDisinherit+0xd0>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	693a      	ldr	r2, [r7, #16]
 80063dc:	429a      	cmp	r2, r3
 80063de:	d00a      	beq.n	80063f6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80063e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e4:	f383 8811 	msr	BASEPRI, r3
 80063e8:	f3bf 8f6f 	isb	sy
 80063ec:	f3bf 8f4f 	dsb	sy
 80063f0:	60fb      	str	r3, [r7, #12]
}
 80063f2:	bf00      	nop
 80063f4:	e7fe      	b.n	80063f4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d10a      	bne.n	8006414 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80063fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006402:	f383 8811 	msr	BASEPRI, r3
 8006406:	f3bf 8f6f 	isb	sy
 800640a:	f3bf 8f4f 	dsb	sy
 800640e:	60bb      	str	r3, [r7, #8]
}
 8006410:	bf00      	nop
 8006412:	e7fe      	b.n	8006412 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006418:	1e5a      	subs	r2, r3, #1
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006426:	429a      	cmp	r2, r3
 8006428:	d02c      	beq.n	8006484 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800642e:	2b00      	cmp	r3, #0
 8006430:	d128      	bne.n	8006484 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	3304      	adds	r3, #4
 8006436:	4618      	mov	r0, r3
 8006438:	f7fe f80e 	bl	8004458 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006448:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006454:	4b0f      	ldr	r3, [pc, #60]	; (8006494 <xTaskPriorityDisinherit+0xd4>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	429a      	cmp	r2, r3
 800645a:	d903      	bls.n	8006464 <xTaskPriorityDisinherit+0xa4>
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006460:	4a0c      	ldr	r2, [pc, #48]	; (8006494 <xTaskPriorityDisinherit+0xd4>)
 8006462:	6013      	str	r3, [r2, #0]
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006468:	4613      	mov	r3, r2
 800646a:	009b      	lsls	r3, r3, #2
 800646c:	4413      	add	r3, r2
 800646e:	009b      	lsls	r3, r3, #2
 8006470:	4a09      	ldr	r2, [pc, #36]	; (8006498 <xTaskPriorityDisinherit+0xd8>)
 8006472:	441a      	add	r2, r3
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	3304      	adds	r3, #4
 8006478:	4619      	mov	r1, r3
 800647a:	4610      	mov	r0, r2
 800647c:	f7fd ff8f 	bl	800439e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006480:	2301      	movs	r3, #1
 8006482:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006484:	697b      	ldr	r3, [r7, #20]
	}
 8006486:	4618      	mov	r0, r3
 8006488:	3718      	adds	r7, #24
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}
 800648e:	bf00      	nop
 8006490:	2000631c 	.word	0x2000631c
 8006494:	200067f8 	.word	0x200067f8
 8006498:	20006320 	.word	0x20006320

0800649c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800649c:	b580      	push	{r7, lr}
 800649e:	b088      	sub	sp, #32
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80064aa:	2301      	movs	r3, #1
 80064ac:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d06a      	beq.n	800658a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80064b4:	69bb      	ldr	r3, [r7, #24]
 80064b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d10a      	bne.n	80064d2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80064bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c0:	f383 8811 	msr	BASEPRI, r3
 80064c4:	f3bf 8f6f 	isb	sy
 80064c8:	f3bf 8f4f 	dsb	sy
 80064cc:	60fb      	str	r3, [r7, #12]
}
 80064ce:	bf00      	nop
 80064d0:	e7fe      	b.n	80064d0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80064d2:	69bb      	ldr	r3, [r7, #24]
 80064d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064d6:	683a      	ldr	r2, [r7, #0]
 80064d8:	429a      	cmp	r2, r3
 80064da:	d902      	bls.n	80064e2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	61fb      	str	r3, [r7, #28]
 80064e0:	e002      	b.n	80064e8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80064e2:	69bb      	ldr	r3, [r7, #24]
 80064e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064e6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80064e8:	69bb      	ldr	r3, [r7, #24]
 80064ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ec:	69fa      	ldr	r2, [r7, #28]
 80064ee:	429a      	cmp	r2, r3
 80064f0:	d04b      	beq.n	800658a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80064f2:	69bb      	ldr	r3, [r7, #24]
 80064f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064f6:	697a      	ldr	r2, [r7, #20]
 80064f8:	429a      	cmp	r2, r3
 80064fa:	d146      	bne.n	800658a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80064fc:	4b25      	ldr	r3, [pc, #148]	; (8006594 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	69ba      	ldr	r2, [r7, #24]
 8006502:	429a      	cmp	r2, r3
 8006504:	d10a      	bne.n	800651c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8006506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800650a:	f383 8811 	msr	BASEPRI, r3
 800650e:	f3bf 8f6f 	isb	sy
 8006512:	f3bf 8f4f 	dsb	sy
 8006516:	60bb      	str	r3, [r7, #8]
}
 8006518:	bf00      	nop
 800651a:	e7fe      	b.n	800651a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800651c:	69bb      	ldr	r3, [r7, #24]
 800651e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006520:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006522:	69bb      	ldr	r3, [r7, #24]
 8006524:	69fa      	ldr	r2, [r7, #28]
 8006526:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006528:	69bb      	ldr	r3, [r7, #24]
 800652a:	699b      	ldr	r3, [r3, #24]
 800652c:	2b00      	cmp	r3, #0
 800652e:	db04      	blt.n	800653a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006530:	69fb      	ldr	r3, [r7, #28]
 8006532:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006536:	69bb      	ldr	r3, [r7, #24]
 8006538:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800653a:	69bb      	ldr	r3, [r7, #24]
 800653c:	6959      	ldr	r1, [r3, #20]
 800653e:	693a      	ldr	r2, [r7, #16]
 8006540:	4613      	mov	r3, r2
 8006542:	009b      	lsls	r3, r3, #2
 8006544:	4413      	add	r3, r2
 8006546:	009b      	lsls	r3, r3, #2
 8006548:	4a13      	ldr	r2, [pc, #76]	; (8006598 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800654a:	4413      	add	r3, r2
 800654c:	4299      	cmp	r1, r3
 800654e:	d11c      	bne.n	800658a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006550:	69bb      	ldr	r3, [r7, #24]
 8006552:	3304      	adds	r3, #4
 8006554:	4618      	mov	r0, r3
 8006556:	f7fd ff7f 	bl	8004458 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800655a:	69bb      	ldr	r3, [r7, #24]
 800655c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800655e:	4b0f      	ldr	r3, [pc, #60]	; (800659c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	429a      	cmp	r2, r3
 8006564:	d903      	bls.n	800656e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8006566:	69bb      	ldr	r3, [r7, #24]
 8006568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800656a:	4a0c      	ldr	r2, [pc, #48]	; (800659c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800656c:	6013      	str	r3, [r2, #0]
 800656e:	69bb      	ldr	r3, [r7, #24]
 8006570:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006572:	4613      	mov	r3, r2
 8006574:	009b      	lsls	r3, r3, #2
 8006576:	4413      	add	r3, r2
 8006578:	009b      	lsls	r3, r3, #2
 800657a:	4a07      	ldr	r2, [pc, #28]	; (8006598 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800657c:	441a      	add	r2, r3
 800657e:	69bb      	ldr	r3, [r7, #24]
 8006580:	3304      	adds	r3, #4
 8006582:	4619      	mov	r1, r3
 8006584:	4610      	mov	r0, r2
 8006586:	f7fd ff0a 	bl	800439e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800658a:	bf00      	nop
 800658c:	3720      	adds	r7, #32
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}
 8006592:	bf00      	nop
 8006594:	2000631c 	.word	0x2000631c
 8006598:	20006320 	.word	0x20006320
 800659c:	200067f8 	.word	0x200067f8

080065a0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80065a0:	b480      	push	{r7}
 80065a2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80065a4:	4b07      	ldr	r3, [pc, #28]	; (80065c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d004      	beq.n	80065b6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80065ac:	4b05      	ldr	r3, [pc, #20]	; (80065c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80065b2:	3201      	adds	r2, #1
 80065b4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80065b6:	4b03      	ldr	r3, [pc, #12]	; (80065c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80065b8:	681b      	ldr	r3, [r3, #0]
	}
 80065ba:	4618      	mov	r0, r3
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr
 80065c4:	2000631c 	.word	0x2000631c

080065c8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b084      	sub	sp, #16
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
 80065d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80065d2:	4b21      	ldr	r3, [pc, #132]	; (8006658 <prvAddCurrentTaskToDelayedList+0x90>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80065d8:	4b20      	ldr	r3, [pc, #128]	; (800665c <prvAddCurrentTaskToDelayedList+0x94>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	3304      	adds	r3, #4
 80065de:	4618      	mov	r0, r3
 80065e0:	f7fd ff3a 	bl	8004458 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ea:	d10a      	bne.n	8006602 <prvAddCurrentTaskToDelayedList+0x3a>
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d007      	beq.n	8006602 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80065f2:	4b1a      	ldr	r3, [pc, #104]	; (800665c <prvAddCurrentTaskToDelayedList+0x94>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	3304      	adds	r3, #4
 80065f8:	4619      	mov	r1, r3
 80065fa:	4819      	ldr	r0, [pc, #100]	; (8006660 <prvAddCurrentTaskToDelayedList+0x98>)
 80065fc:	f7fd fecf 	bl	800439e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006600:	e026      	b.n	8006650 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006602:	68fa      	ldr	r2, [r7, #12]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	4413      	add	r3, r2
 8006608:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800660a:	4b14      	ldr	r3, [pc, #80]	; (800665c <prvAddCurrentTaskToDelayedList+0x94>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	68ba      	ldr	r2, [r7, #8]
 8006610:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006612:	68ba      	ldr	r2, [r7, #8]
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	429a      	cmp	r2, r3
 8006618:	d209      	bcs.n	800662e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800661a:	4b12      	ldr	r3, [pc, #72]	; (8006664 <prvAddCurrentTaskToDelayedList+0x9c>)
 800661c:	681a      	ldr	r2, [r3, #0]
 800661e:	4b0f      	ldr	r3, [pc, #60]	; (800665c <prvAddCurrentTaskToDelayedList+0x94>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	3304      	adds	r3, #4
 8006624:	4619      	mov	r1, r3
 8006626:	4610      	mov	r0, r2
 8006628:	f7fd fedd 	bl	80043e6 <vListInsert>
}
 800662c:	e010      	b.n	8006650 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800662e:	4b0e      	ldr	r3, [pc, #56]	; (8006668 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006630:	681a      	ldr	r2, [r3, #0]
 8006632:	4b0a      	ldr	r3, [pc, #40]	; (800665c <prvAddCurrentTaskToDelayedList+0x94>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	3304      	adds	r3, #4
 8006638:	4619      	mov	r1, r3
 800663a:	4610      	mov	r0, r2
 800663c:	f7fd fed3 	bl	80043e6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006640:	4b0a      	ldr	r3, [pc, #40]	; (800666c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	68ba      	ldr	r2, [r7, #8]
 8006646:	429a      	cmp	r2, r3
 8006648:	d202      	bcs.n	8006650 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800664a:	4a08      	ldr	r2, [pc, #32]	; (800666c <prvAddCurrentTaskToDelayedList+0xa4>)
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	6013      	str	r3, [r2, #0]
}
 8006650:	bf00      	nop
 8006652:	3710      	adds	r7, #16
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}
 8006658:	200067f4 	.word	0x200067f4
 800665c:	2000631c 	.word	0x2000631c
 8006660:	200067dc 	.word	0x200067dc
 8006664:	200067ac 	.word	0x200067ac
 8006668:	200067a8 	.word	0x200067a8
 800666c:	20006810 	.word	0x20006810

08006670 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b08a      	sub	sp, #40	; 0x28
 8006674:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006676:	2300      	movs	r3, #0
 8006678:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800667a:	f000 fb07 	bl	8006c8c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800667e:	4b1c      	ldr	r3, [pc, #112]	; (80066f0 <xTimerCreateTimerTask+0x80>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d021      	beq.n	80066ca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006686:	2300      	movs	r3, #0
 8006688:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800668a:	2300      	movs	r3, #0
 800668c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800668e:	1d3a      	adds	r2, r7, #4
 8006690:	f107 0108 	add.w	r1, r7, #8
 8006694:	f107 030c 	add.w	r3, r7, #12
 8006698:	4618      	mov	r0, r3
 800669a:	f7fd fe39 	bl	8004310 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800669e:	6879      	ldr	r1, [r7, #4]
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	68fa      	ldr	r2, [r7, #12]
 80066a4:	9202      	str	r2, [sp, #8]
 80066a6:	9301      	str	r3, [sp, #4]
 80066a8:	2302      	movs	r3, #2
 80066aa:	9300      	str	r3, [sp, #0]
 80066ac:	2300      	movs	r3, #0
 80066ae:	460a      	mov	r2, r1
 80066b0:	4910      	ldr	r1, [pc, #64]	; (80066f4 <xTimerCreateTimerTask+0x84>)
 80066b2:	4811      	ldr	r0, [pc, #68]	; (80066f8 <xTimerCreateTimerTask+0x88>)
 80066b4:	f7fe ffbe 	bl	8005634 <xTaskCreateStatic>
 80066b8:	4603      	mov	r3, r0
 80066ba:	4a10      	ldr	r2, [pc, #64]	; (80066fc <xTimerCreateTimerTask+0x8c>)
 80066bc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80066be:	4b0f      	ldr	r3, [pc, #60]	; (80066fc <xTimerCreateTimerTask+0x8c>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d001      	beq.n	80066ca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80066c6:	2301      	movs	r3, #1
 80066c8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d10a      	bne.n	80066e6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80066d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d4:	f383 8811 	msr	BASEPRI, r3
 80066d8:	f3bf 8f6f 	isb	sy
 80066dc:	f3bf 8f4f 	dsb	sy
 80066e0:	613b      	str	r3, [r7, #16]
}
 80066e2:	bf00      	nop
 80066e4:	e7fe      	b.n	80066e4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80066e6:	697b      	ldr	r3, [r7, #20]
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3718      	adds	r7, #24
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}
 80066f0:	2000684c 	.word	0x2000684c
 80066f4:	08017bf0 	.word	0x08017bf0
 80066f8:	08006835 	.word	0x08006835
 80066fc:	20006850 	.word	0x20006850

08006700 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b08a      	sub	sp, #40	; 0x28
 8006704:	af00      	add	r7, sp, #0
 8006706:	60f8      	str	r0, [r7, #12]
 8006708:	60b9      	str	r1, [r7, #8]
 800670a:	607a      	str	r2, [r7, #4]
 800670c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800670e:	2300      	movs	r3, #0
 8006710:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d10a      	bne.n	800672e <xTimerGenericCommand+0x2e>
	__asm volatile
 8006718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800671c:	f383 8811 	msr	BASEPRI, r3
 8006720:	f3bf 8f6f 	isb	sy
 8006724:	f3bf 8f4f 	dsb	sy
 8006728:	623b      	str	r3, [r7, #32]
}
 800672a:	bf00      	nop
 800672c:	e7fe      	b.n	800672c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800672e:	4b1a      	ldr	r3, [pc, #104]	; (8006798 <xTimerGenericCommand+0x98>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d02a      	beq.n	800678c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	2b05      	cmp	r3, #5
 8006746:	dc18      	bgt.n	800677a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006748:	f7ff fdb4 	bl	80062b4 <xTaskGetSchedulerState>
 800674c:	4603      	mov	r3, r0
 800674e:	2b02      	cmp	r3, #2
 8006750:	d109      	bne.n	8006766 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006752:	4b11      	ldr	r3, [pc, #68]	; (8006798 <xTimerGenericCommand+0x98>)
 8006754:	6818      	ldr	r0, [r3, #0]
 8006756:	f107 0110 	add.w	r1, r7, #16
 800675a:	2300      	movs	r3, #0
 800675c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800675e:	f7fe f903 	bl	8004968 <xQueueGenericSend>
 8006762:	6278      	str	r0, [r7, #36]	; 0x24
 8006764:	e012      	b.n	800678c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006766:	4b0c      	ldr	r3, [pc, #48]	; (8006798 <xTimerGenericCommand+0x98>)
 8006768:	6818      	ldr	r0, [r3, #0]
 800676a:	f107 0110 	add.w	r1, r7, #16
 800676e:	2300      	movs	r3, #0
 8006770:	2200      	movs	r2, #0
 8006772:	f7fe f8f9 	bl	8004968 <xQueueGenericSend>
 8006776:	6278      	str	r0, [r7, #36]	; 0x24
 8006778:	e008      	b.n	800678c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800677a:	4b07      	ldr	r3, [pc, #28]	; (8006798 <xTimerGenericCommand+0x98>)
 800677c:	6818      	ldr	r0, [r3, #0]
 800677e:	f107 0110 	add.w	r1, r7, #16
 8006782:	2300      	movs	r3, #0
 8006784:	683a      	ldr	r2, [r7, #0]
 8006786:	f7fe f9ed 	bl	8004b64 <xQueueGenericSendFromISR>
 800678a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800678c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800678e:	4618      	mov	r0, r3
 8006790:	3728      	adds	r7, #40	; 0x28
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}
 8006796:	bf00      	nop
 8006798:	2000684c 	.word	0x2000684c

0800679c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b088      	sub	sp, #32
 80067a0:	af02      	add	r7, sp, #8
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067a6:	4b22      	ldr	r3, [pc, #136]	; (8006830 <prvProcessExpiredTimer+0x94>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	68db      	ldr	r3, [r3, #12]
 80067ac:	68db      	ldr	r3, [r3, #12]
 80067ae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	3304      	adds	r3, #4
 80067b4:	4618      	mov	r0, r3
 80067b6:	f7fd fe4f 	bl	8004458 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80067c0:	f003 0304 	and.w	r3, r3, #4
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d022      	beq.n	800680e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	699a      	ldr	r2, [r3, #24]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	18d1      	adds	r1, r2, r3
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	683a      	ldr	r2, [r7, #0]
 80067d4:	6978      	ldr	r0, [r7, #20]
 80067d6:	f000 f8d1 	bl	800697c <prvInsertTimerInActiveList>
 80067da:	4603      	mov	r3, r0
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d01f      	beq.n	8006820 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80067e0:	2300      	movs	r3, #0
 80067e2:	9300      	str	r3, [sp, #0]
 80067e4:	2300      	movs	r3, #0
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	2100      	movs	r1, #0
 80067ea:	6978      	ldr	r0, [r7, #20]
 80067ec:	f7ff ff88 	bl	8006700 <xTimerGenericCommand>
 80067f0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d113      	bne.n	8006820 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80067f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067fc:	f383 8811 	msr	BASEPRI, r3
 8006800:	f3bf 8f6f 	isb	sy
 8006804:	f3bf 8f4f 	dsb	sy
 8006808:	60fb      	str	r3, [r7, #12]
}
 800680a:	bf00      	nop
 800680c:	e7fe      	b.n	800680c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006814:	f023 0301 	bic.w	r3, r3, #1
 8006818:	b2da      	uxtb	r2, r3
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	6a1b      	ldr	r3, [r3, #32]
 8006824:	6978      	ldr	r0, [r7, #20]
 8006826:	4798      	blx	r3
}
 8006828:	bf00      	nop
 800682a:	3718      	adds	r7, #24
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}
 8006830:	20006844 	.word	0x20006844

08006834 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b084      	sub	sp, #16
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800683c:	f107 0308 	add.w	r3, r7, #8
 8006840:	4618      	mov	r0, r3
 8006842:	f000 f857 	bl	80068f4 <prvGetNextExpireTime>
 8006846:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	4619      	mov	r1, r3
 800684c:	68f8      	ldr	r0, [r7, #12]
 800684e:	f000 f803 	bl	8006858 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006852:	f000 f8d5 	bl	8006a00 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006856:	e7f1      	b.n	800683c <prvTimerTask+0x8>

08006858 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b084      	sub	sp, #16
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006862:	f7ff f923 	bl	8005aac <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006866:	f107 0308 	add.w	r3, r7, #8
 800686a:	4618      	mov	r0, r3
 800686c:	f000 f866 	bl	800693c <prvSampleTimeNow>
 8006870:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d130      	bne.n	80068da <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d10a      	bne.n	8006894 <prvProcessTimerOrBlockTask+0x3c>
 800687e:	687a      	ldr	r2, [r7, #4]
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	429a      	cmp	r2, r3
 8006884:	d806      	bhi.n	8006894 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006886:	f7ff f91f 	bl	8005ac8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800688a:	68f9      	ldr	r1, [r7, #12]
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f7ff ff85 	bl	800679c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006892:	e024      	b.n	80068de <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d008      	beq.n	80068ac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800689a:	4b13      	ldr	r3, [pc, #76]	; (80068e8 <prvProcessTimerOrBlockTask+0x90>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d101      	bne.n	80068a8 <prvProcessTimerOrBlockTask+0x50>
 80068a4:	2301      	movs	r3, #1
 80068a6:	e000      	b.n	80068aa <prvProcessTimerOrBlockTask+0x52>
 80068a8:	2300      	movs	r3, #0
 80068aa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80068ac:	4b0f      	ldr	r3, [pc, #60]	; (80068ec <prvProcessTimerOrBlockTask+0x94>)
 80068ae:	6818      	ldr	r0, [r3, #0]
 80068b0:	687a      	ldr	r2, [r7, #4]
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	1ad3      	subs	r3, r2, r3
 80068b6:	683a      	ldr	r2, [r7, #0]
 80068b8:	4619      	mov	r1, r3
 80068ba:	f7fe fe87 	bl	80055cc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80068be:	f7ff f903 	bl	8005ac8 <xTaskResumeAll>
 80068c2:	4603      	mov	r3, r0
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d10a      	bne.n	80068de <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80068c8:	4b09      	ldr	r3, [pc, #36]	; (80068f0 <prvProcessTimerOrBlockTask+0x98>)
 80068ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068ce:	601a      	str	r2, [r3, #0]
 80068d0:	f3bf 8f4f 	dsb	sy
 80068d4:	f3bf 8f6f 	isb	sy
}
 80068d8:	e001      	b.n	80068de <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80068da:	f7ff f8f5 	bl	8005ac8 <xTaskResumeAll>
}
 80068de:	bf00      	nop
 80068e0:	3710      	adds	r7, #16
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}
 80068e6:	bf00      	nop
 80068e8:	20006848 	.word	0x20006848
 80068ec:	2000684c 	.word	0x2000684c
 80068f0:	e000ed04 	.word	0xe000ed04

080068f4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80068f4:	b480      	push	{r7}
 80068f6:	b085      	sub	sp, #20
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80068fc:	4b0e      	ldr	r3, [pc, #56]	; (8006938 <prvGetNextExpireTime+0x44>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d101      	bne.n	800690a <prvGetNextExpireTime+0x16>
 8006906:	2201      	movs	r2, #1
 8006908:	e000      	b.n	800690c <prvGetNextExpireTime+0x18>
 800690a:	2200      	movs	r2, #0
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d105      	bne.n	8006924 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006918:	4b07      	ldr	r3, [pc, #28]	; (8006938 <prvGetNextExpireTime+0x44>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	68db      	ldr	r3, [r3, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	60fb      	str	r3, [r7, #12]
 8006922:	e001      	b.n	8006928 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006924:	2300      	movs	r3, #0
 8006926:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006928:	68fb      	ldr	r3, [r7, #12]
}
 800692a:	4618      	mov	r0, r3
 800692c:	3714      	adds	r7, #20
 800692e:	46bd      	mov	sp, r7
 8006930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006934:	4770      	bx	lr
 8006936:	bf00      	nop
 8006938:	20006844 	.word	0x20006844

0800693c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b084      	sub	sp, #16
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006944:	f7ff f95e 	bl	8005c04 <xTaskGetTickCount>
 8006948:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800694a:	4b0b      	ldr	r3, [pc, #44]	; (8006978 <prvSampleTimeNow+0x3c>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	68fa      	ldr	r2, [r7, #12]
 8006950:	429a      	cmp	r2, r3
 8006952:	d205      	bcs.n	8006960 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006954:	f000 f936 	bl	8006bc4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2201      	movs	r2, #1
 800695c:	601a      	str	r2, [r3, #0]
 800695e:	e002      	b.n	8006966 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2200      	movs	r2, #0
 8006964:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006966:	4a04      	ldr	r2, [pc, #16]	; (8006978 <prvSampleTimeNow+0x3c>)
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800696c:	68fb      	ldr	r3, [r7, #12]
}
 800696e:	4618      	mov	r0, r3
 8006970:	3710      	adds	r7, #16
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}
 8006976:	bf00      	nop
 8006978:	20006854 	.word	0x20006854

0800697c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b086      	sub	sp, #24
 8006980:	af00      	add	r7, sp, #0
 8006982:	60f8      	str	r0, [r7, #12]
 8006984:	60b9      	str	r1, [r7, #8]
 8006986:	607a      	str	r2, [r7, #4]
 8006988:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800698a:	2300      	movs	r3, #0
 800698c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	68ba      	ldr	r2, [r7, #8]
 8006992:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	68fa      	ldr	r2, [r7, #12]
 8006998:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800699a:	68ba      	ldr	r2, [r7, #8]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	429a      	cmp	r2, r3
 80069a0:	d812      	bhi.n	80069c8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069a2:	687a      	ldr	r2, [r7, #4]
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	1ad2      	subs	r2, r2, r3
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	699b      	ldr	r3, [r3, #24]
 80069ac:	429a      	cmp	r2, r3
 80069ae:	d302      	bcc.n	80069b6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80069b0:	2301      	movs	r3, #1
 80069b2:	617b      	str	r3, [r7, #20]
 80069b4:	e01b      	b.n	80069ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80069b6:	4b10      	ldr	r3, [pc, #64]	; (80069f8 <prvInsertTimerInActiveList+0x7c>)
 80069b8:	681a      	ldr	r2, [r3, #0]
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	3304      	adds	r3, #4
 80069be:	4619      	mov	r1, r3
 80069c0:	4610      	mov	r0, r2
 80069c2:	f7fd fd10 	bl	80043e6 <vListInsert>
 80069c6:	e012      	b.n	80069ee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80069c8:	687a      	ldr	r2, [r7, #4]
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d206      	bcs.n	80069de <prvInsertTimerInActiveList+0x62>
 80069d0:	68ba      	ldr	r2, [r7, #8]
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	429a      	cmp	r2, r3
 80069d6:	d302      	bcc.n	80069de <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80069d8:	2301      	movs	r3, #1
 80069da:	617b      	str	r3, [r7, #20]
 80069dc:	e007      	b.n	80069ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80069de:	4b07      	ldr	r3, [pc, #28]	; (80069fc <prvInsertTimerInActiveList+0x80>)
 80069e0:	681a      	ldr	r2, [r3, #0]
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	3304      	adds	r3, #4
 80069e6:	4619      	mov	r1, r3
 80069e8:	4610      	mov	r0, r2
 80069ea:	f7fd fcfc 	bl	80043e6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80069ee:	697b      	ldr	r3, [r7, #20]
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3718      	adds	r7, #24
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}
 80069f8:	20006848 	.word	0x20006848
 80069fc:	20006844 	.word	0x20006844

08006a00 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b08e      	sub	sp, #56	; 0x38
 8006a04:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006a06:	e0ca      	b.n	8006b9e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	da18      	bge.n	8006a40 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006a0e:	1d3b      	adds	r3, r7, #4
 8006a10:	3304      	adds	r3, #4
 8006a12:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d10a      	bne.n	8006a30 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a1e:	f383 8811 	msr	BASEPRI, r3
 8006a22:	f3bf 8f6f 	isb	sy
 8006a26:	f3bf 8f4f 	dsb	sy
 8006a2a:	61fb      	str	r3, [r7, #28]
}
 8006a2c:	bf00      	nop
 8006a2e:	e7fe      	b.n	8006a2e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a36:	6850      	ldr	r0, [r2, #4]
 8006a38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a3a:	6892      	ldr	r2, [r2, #8]
 8006a3c:	4611      	mov	r1, r2
 8006a3e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	f2c0 80aa 	blt.w	8006b9c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a4e:	695b      	ldr	r3, [r3, #20]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d004      	beq.n	8006a5e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a56:	3304      	adds	r3, #4
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f7fd fcfd 	bl	8004458 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006a5e:	463b      	mov	r3, r7
 8006a60:	4618      	mov	r0, r3
 8006a62:	f7ff ff6b 	bl	800693c <prvSampleTimeNow>
 8006a66:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2b09      	cmp	r3, #9
 8006a6c:	f200 8097 	bhi.w	8006b9e <prvProcessReceivedCommands+0x19e>
 8006a70:	a201      	add	r2, pc, #4	; (adr r2, 8006a78 <prvProcessReceivedCommands+0x78>)
 8006a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a76:	bf00      	nop
 8006a78:	08006aa1 	.word	0x08006aa1
 8006a7c:	08006aa1 	.word	0x08006aa1
 8006a80:	08006aa1 	.word	0x08006aa1
 8006a84:	08006b15 	.word	0x08006b15
 8006a88:	08006b29 	.word	0x08006b29
 8006a8c:	08006b73 	.word	0x08006b73
 8006a90:	08006aa1 	.word	0x08006aa1
 8006a94:	08006aa1 	.word	0x08006aa1
 8006a98:	08006b15 	.word	0x08006b15
 8006a9c:	08006b29 	.word	0x08006b29
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aa2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006aa6:	f043 0301 	orr.w	r3, r3, #1
 8006aaa:	b2da      	uxtb	r2, r3
 8006aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006ab2:	68ba      	ldr	r2, [r7, #8]
 8006ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ab6:	699b      	ldr	r3, [r3, #24]
 8006ab8:	18d1      	adds	r1, r2, r3
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006abe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ac0:	f7ff ff5c 	bl	800697c <prvInsertTimerInActiveList>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d069      	beq.n	8006b9e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006acc:	6a1b      	ldr	r3, [r3, #32]
 8006ace:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ad0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ad4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ad8:	f003 0304 	and.w	r3, r3, #4
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d05e      	beq.n	8006b9e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006ae0:	68ba      	ldr	r2, [r7, #8]
 8006ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae4:	699b      	ldr	r3, [r3, #24]
 8006ae6:	441a      	add	r2, r3
 8006ae8:	2300      	movs	r3, #0
 8006aea:	9300      	str	r3, [sp, #0]
 8006aec:	2300      	movs	r3, #0
 8006aee:	2100      	movs	r1, #0
 8006af0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006af2:	f7ff fe05 	bl	8006700 <xTimerGenericCommand>
 8006af6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006af8:	6a3b      	ldr	r3, [r7, #32]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d14f      	bne.n	8006b9e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b02:	f383 8811 	msr	BASEPRI, r3
 8006b06:	f3bf 8f6f 	isb	sy
 8006b0a:	f3bf 8f4f 	dsb	sy
 8006b0e:	61bb      	str	r3, [r7, #24]
}
 8006b10:	bf00      	nop
 8006b12:	e7fe      	b.n	8006b12 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b1a:	f023 0301 	bic.w	r3, r3, #1
 8006b1e:	b2da      	uxtb	r2, r3
 8006b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006b26:	e03a      	b.n	8006b9e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b2e:	f043 0301 	orr.w	r3, r3, #1
 8006b32:	b2da      	uxtb	r2, r3
 8006b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006b3a:	68ba      	ldr	r2, [r7, #8]
 8006b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b3e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b42:	699b      	ldr	r3, [r3, #24]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d10a      	bne.n	8006b5e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b4c:	f383 8811 	msr	BASEPRI, r3
 8006b50:	f3bf 8f6f 	isb	sy
 8006b54:	f3bf 8f4f 	dsb	sy
 8006b58:	617b      	str	r3, [r7, #20]
}
 8006b5a:	bf00      	nop
 8006b5c:	e7fe      	b.n	8006b5c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b60:	699a      	ldr	r2, [r3, #24]
 8006b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b64:	18d1      	adds	r1, r2, r3
 8006b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b6c:	f7ff ff06 	bl	800697c <prvInsertTimerInActiveList>
					break;
 8006b70:	e015      	b.n	8006b9e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b78:	f003 0302 	and.w	r3, r3, #2
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d103      	bne.n	8006b88 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006b80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b82:	f000 fbdd 	bl	8007340 <vPortFree>
 8006b86:	e00a      	b.n	8006b9e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b8e:	f023 0301 	bic.w	r3, r3, #1
 8006b92:	b2da      	uxtb	r2, r3
 8006b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006b9a:	e000      	b.n	8006b9e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006b9c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006b9e:	4b08      	ldr	r3, [pc, #32]	; (8006bc0 <prvProcessReceivedCommands+0x1c0>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	1d39      	adds	r1, r7, #4
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	f7fe f904 	bl	8004db4 <xQueueReceive>
 8006bac:	4603      	mov	r3, r0
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	f47f af2a 	bne.w	8006a08 <prvProcessReceivedCommands+0x8>
	}
}
 8006bb4:	bf00      	nop
 8006bb6:	bf00      	nop
 8006bb8:	3730      	adds	r7, #48	; 0x30
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}
 8006bbe:	bf00      	nop
 8006bc0:	2000684c 	.word	0x2000684c

08006bc4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b088      	sub	sp, #32
 8006bc8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006bca:	e048      	b.n	8006c5e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006bcc:	4b2d      	ldr	r3, [pc, #180]	; (8006c84 <prvSwitchTimerLists+0xc0>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	68db      	ldr	r3, [r3, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bd6:	4b2b      	ldr	r3, [pc, #172]	; (8006c84 <prvSwitchTimerLists+0xc0>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	68db      	ldr	r3, [r3, #12]
 8006bdc:	68db      	ldr	r3, [r3, #12]
 8006bde:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	3304      	adds	r3, #4
 8006be4:	4618      	mov	r0, r3
 8006be6:	f7fd fc37 	bl	8004458 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	6a1b      	ldr	r3, [r3, #32]
 8006bee:	68f8      	ldr	r0, [r7, #12]
 8006bf0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006bf8:	f003 0304 	and.w	r3, r3, #4
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d02e      	beq.n	8006c5e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	699b      	ldr	r3, [r3, #24]
 8006c04:	693a      	ldr	r2, [r7, #16]
 8006c06:	4413      	add	r3, r2
 8006c08:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006c0a:	68ba      	ldr	r2, [r7, #8]
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	d90e      	bls.n	8006c30 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	68ba      	ldr	r2, [r7, #8]
 8006c16:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	68fa      	ldr	r2, [r7, #12]
 8006c1c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006c1e:	4b19      	ldr	r3, [pc, #100]	; (8006c84 <prvSwitchTimerLists+0xc0>)
 8006c20:	681a      	ldr	r2, [r3, #0]
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	3304      	adds	r3, #4
 8006c26:	4619      	mov	r1, r3
 8006c28:	4610      	mov	r0, r2
 8006c2a:	f7fd fbdc 	bl	80043e6 <vListInsert>
 8006c2e:	e016      	b.n	8006c5e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006c30:	2300      	movs	r3, #0
 8006c32:	9300      	str	r3, [sp, #0]
 8006c34:	2300      	movs	r3, #0
 8006c36:	693a      	ldr	r2, [r7, #16]
 8006c38:	2100      	movs	r1, #0
 8006c3a:	68f8      	ldr	r0, [r7, #12]
 8006c3c:	f7ff fd60 	bl	8006700 <xTimerGenericCommand>
 8006c40:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d10a      	bne.n	8006c5e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c4c:	f383 8811 	msr	BASEPRI, r3
 8006c50:	f3bf 8f6f 	isb	sy
 8006c54:	f3bf 8f4f 	dsb	sy
 8006c58:	603b      	str	r3, [r7, #0]
}
 8006c5a:	bf00      	nop
 8006c5c:	e7fe      	b.n	8006c5c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006c5e:	4b09      	ldr	r3, [pc, #36]	; (8006c84 <prvSwitchTimerLists+0xc0>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d1b1      	bne.n	8006bcc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006c68:	4b06      	ldr	r3, [pc, #24]	; (8006c84 <prvSwitchTimerLists+0xc0>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006c6e:	4b06      	ldr	r3, [pc, #24]	; (8006c88 <prvSwitchTimerLists+0xc4>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4a04      	ldr	r2, [pc, #16]	; (8006c84 <prvSwitchTimerLists+0xc0>)
 8006c74:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006c76:	4a04      	ldr	r2, [pc, #16]	; (8006c88 <prvSwitchTimerLists+0xc4>)
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	6013      	str	r3, [r2, #0]
}
 8006c7c:	bf00      	nop
 8006c7e:	3718      	adds	r7, #24
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}
 8006c84:	20006844 	.word	0x20006844
 8006c88:	20006848 	.word	0x20006848

08006c8c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b082      	sub	sp, #8
 8006c90:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006c92:	f000 f967 	bl	8006f64 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006c96:	4b15      	ldr	r3, [pc, #84]	; (8006cec <prvCheckForValidListAndQueue+0x60>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d120      	bne.n	8006ce0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006c9e:	4814      	ldr	r0, [pc, #80]	; (8006cf0 <prvCheckForValidListAndQueue+0x64>)
 8006ca0:	f7fd fb50 	bl	8004344 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006ca4:	4813      	ldr	r0, [pc, #76]	; (8006cf4 <prvCheckForValidListAndQueue+0x68>)
 8006ca6:	f7fd fb4d 	bl	8004344 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006caa:	4b13      	ldr	r3, [pc, #76]	; (8006cf8 <prvCheckForValidListAndQueue+0x6c>)
 8006cac:	4a10      	ldr	r2, [pc, #64]	; (8006cf0 <prvCheckForValidListAndQueue+0x64>)
 8006cae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006cb0:	4b12      	ldr	r3, [pc, #72]	; (8006cfc <prvCheckForValidListAndQueue+0x70>)
 8006cb2:	4a10      	ldr	r2, [pc, #64]	; (8006cf4 <prvCheckForValidListAndQueue+0x68>)
 8006cb4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	9300      	str	r3, [sp, #0]
 8006cba:	4b11      	ldr	r3, [pc, #68]	; (8006d00 <prvCheckForValidListAndQueue+0x74>)
 8006cbc:	4a11      	ldr	r2, [pc, #68]	; (8006d04 <prvCheckForValidListAndQueue+0x78>)
 8006cbe:	2110      	movs	r1, #16
 8006cc0:	200a      	movs	r0, #10
 8006cc2:	f7fd fc5b 	bl	800457c <xQueueGenericCreateStatic>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	4a08      	ldr	r2, [pc, #32]	; (8006cec <prvCheckForValidListAndQueue+0x60>)
 8006cca:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006ccc:	4b07      	ldr	r3, [pc, #28]	; (8006cec <prvCheckForValidListAndQueue+0x60>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d005      	beq.n	8006ce0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006cd4:	4b05      	ldr	r3, [pc, #20]	; (8006cec <prvCheckForValidListAndQueue+0x60>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	490b      	ldr	r1, [pc, #44]	; (8006d08 <prvCheckForValidListAndQueue+0x7c>)
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f7fe fc22 	bl	8005524 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006ce0:	f000 f970 	bl	8006fc4 <vPortExitCritical>
}
 8006ce4:	bf00      	nop
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}
 8006cea:	bf00      	nop
 8006cec:	2000684c 	.word	0x2000684c
 8006cf0:	2000681c 	.word	0x2000681c
 8006cf4:	20006830 	.word	0x20006830
 8006cf8:	20006844 	.word	0x20006844
 8006cfc:	20006848 	.word	0x20006848
 8006d00:	200068f8 	.word	0x200068f8
 8006d04:	20006858 	.word	0x20006858
 8006d08:	08017bf8 	.word	0x08017bf8

08006d0c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b085      	sub	sp, #20
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	60f8      	str	r0, [r7, #12]
 8006d14:	60b9      	str	r1, [r7, #8]
 8006d16:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	3b04      	subs	r3, #4
 8006d1c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006d24:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	3b04      	subs	r3, #4
 8006d2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	f023 0201 	bic.w	r2, r3, #1
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	3b04      	subs	r3, #4
 8006d3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006d3c:	4a0c      	ldr	r2, [pc, #48]	; (8006d70 <pxPortInitialiseStack+0x64>)
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	3b14      	subs	r3, #20
 8006d46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006d48:	687a      	ldr	r2, [r7, #4]
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	3b04      	subs	r3, #4
 8006d52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	f06f 0202 	mvn.w	r2, #2
 8006d5a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	3b20      	subs	r3, #32
 8006d60:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006d62:	68fb      	ldr	r3, [r7, #12]
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3714      	adds	r7, #20
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr
 8006d70:	08006d75 	.word	0x08006d75

08006d74 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006d74:	b480      	push	{r7}
 8006d76:	b085      	sub	sp, #20
 8006d78:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006d7e:	4b12      	ldr	r3, [pc, #72]	; (8006dc8 <prvTaskExitError+0x54>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d86:	d00a      	beq.n	8006d9e <prvTaskExitError+0x2a>
	__asm volatile
 8006d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d8c:	f383 8811 	msr	BASEPRI, r3
 8006d90:	f3bf 8f6f 	isb	sy
 8006d94:	f3bf 8f4f 	dsb	sy
 8006d98:	60fb      	str	r3, [r7, #12]
}
 8006d9a:	bf00      	nop
 8006d9c:	e7fe      	b.n	8006d9c <prvTaskExitError+0x28>
	__asm volatile
 8006d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006da2:	f383 8811 	msr	BASEPRI, r3
 8006da6:	f3bf 8f6f 	isb	sy
 8006daa:	f3bf 8f4f 	dsb	sy
 8006dae:	60bb      	str	r3, [r7, #8]
}
 8006db0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006db2:	bf00      	nop
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d0fc      	beq.n	8006db4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006dba:	bf00      	nop
 8006dbc:	bf00      	nop
 8006dbe:	3714      	adds	r7, #20
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr
 8006dc8:	20000010 	.word	0x20000010
 8006dcc:	00000000 	.word	0x00000000

08006dd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006dd0:	4b07      	ldr	r3, [pc, #28]	; (8006df0 <pxCurrentTCBConst2>)
 8006dd2:	6819      	ldr	r1, [r3, #0]
 8006dd4:	6808      	ldr	r0, [r1, #0]
 8006dd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dda:	f380 8809 	msr	PSP, r0
 8006dde:	f3bf 8f6f 	isb	sy
 8006de2:	f04f 0000 	mov.w	r0, #0
 8006de6:	f380 8811 	msr	BASEPRI, r0
 8006dea:	4770      	bx	lr
 8006dec:	f3af 8000 	nop.w

08006df0 <pxCurrentTCBConst2>:
 8006df0:	2000631c 	.word	0x2000631c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006df4:	bf00      	nop
 8006df6:	bf00      	nop

08006df8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006df8:	4808      	ldr	r0, [pc, #32]	; (8006e1c <prvPortStartFirstTask+0x24>)
 8006dfa:	6800      	ldr	r0, [r0, #0]
 8006dfc:	6800      	ldr	r0, [r0, #0]
 8006dfe:	f380 8808 	msr	MSP, r0
 8006e02:	f04f 0000 	mov.w	r0, #0
 8006e06:	f380 8814 	msr	CONTROL, r0
 8006e0a:	b662      	cpsie	i
 8006e0c:	b661      	cpsie	f
 8006e0e:	f3bf 8f4f 	dsb	sy
 8006e12:	f3bf 8f6f 	isb	sy
 8006e16:	df00      	svc	0
 8006e18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006e1a:	bf00      	nop
 8006e1c:	e000ed08 	.word	0xe000ed08

08006e20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b086      	sub	sp, #24
 8006e24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006e26:	4b46      	ldr	r3, [pc, #280]	; (8006f40 <xPortStartScheduler+0x120>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4a46      	ldr	r2, [pc, #280]	; (8006f44 <xPortStartScheduler+0x124>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d10a      	bne.n	8006e46 <xPortStartScheduler+0x26>
	__asm volatile
 8006e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e34:	f383 8811 	msr	BASEPRI, r3
 8006e38:	f3bf 8f6f 	isb	sy
 8006e3c:	f3bf 8f4f 	dsb	sy
 8006e40:	613b      	str	r3, [r7, #16]
}
 8006e42:	bf00      	nop
 8006e44:	e7fe      	b.n	8006e44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006e46:	4b3e      	ldr	r3, [pc, #248]	; (8006f40 <xPortStartScheduler+0x120>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a3f      	ldr	r2, [pc, #252]	; (8006f48 <xPortStartScheduler+0x128>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d10a      	bne.n	8006e66 <xPortStartScheduler+0x46>
	__asm volatile
 8006e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e54:	f383 8811 	msr	BASEPRI, r3
 8006e58:	f3bf 8f6f 	isb	sy
 8006e5c:	f3bf 8f4f 	dsb	sy
 8006e60:	60fb      	str	r3, [r7, #12]
}
 8006e62:	bf00      	nop
 8006e64:	e7fe      	b.n	8006e64 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006e66:	4b39      	ldr	r3, [pc, #228]	; (8006f4c <xPortStartScheduler+0x12c>)
 8006e68:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	781b      	ldrb	r3, [r3, #0]
 8006e6e:	b2db      	uxtb	r3, r3
 8006e70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	22ff      	movs	r2, #255	; 0xff
 8006e76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	781b      	ldrb	r3, [r3, #0]
 8006e7c:	b2db      	uxtb	r3, r3
 8006e7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006e80:	78fb      	ldrb	r3, [r7, #3]
 8006e82:	b2db      	uxtb	r3, r3
 8006e84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006e88:	b2da      	uxtb	r2, r3
 8006e8a:	4b31      	ldr	r3, [pc, #196]	; (8006f50 <xPortStartScheduler+0x130>)
 8006e8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006e8e:	4b31      	ldr	r3, [pc, #196]	; (8006f54 <xPortStartScheduler+0x134>)
 8006e90:	2207      	movs	r2, #7
 8006e92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006e94:	e009      	b.n	8006eaa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006e96:	4b2f      	ldr	r3, [pc, #188]	; (8006f54 <xPortStartScheduler+0x134>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	3b01      	subs	r3, #1
 8006e9c:	4a2d      	ldr	r2, [pc, #180]	; (8006f54 <xPortStartScheduler+0x134>)
 8006e9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006ea0:	78fb      	ldrb	r3, [r7, #3]
 8006ea2:	b2db      	uxtb	r3, r3
 8006ea4:	005b      	lsls	r3, r3, #1
 8006ea6:	b2db      	uxtb	r3, r3
 8006ea8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006eaa:	78fb      	ldrb	r3, [r7, #3]
 8006eac:	b2db      	uxtb	r3, r3
 8006eae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006eb2:	2b80      	cmp	r3, #128	; 0x80
 8006eb4:	d0ef      	beq.n	8006e96 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006eb6:	4b27      	ldr	r3, [pc, #156]	; (8006f54 <xPortStartScheduler+0x134>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f1c3 0307 	rsb	r3, r3, #7
 8006ebe:	2b04      	cmp	r3, #4
 8006ec0:	d00a      	beq.n	8006ed8 <xPortStartScheduler+0xb8>
	__asm volatile
 8006ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ec6:	f383 8811 	msr	BASEPRI, r3
 8006eca:	f3bf 8f6f 	isb	sy
 8006ece:	f3bf 8f4f 	dsb	sy
 8006ed2:	60bb      	str	r3, [r7, #8]
}
 8006ed4:	bf00      	nop
 8006ed6:	e7fe      	b.n	8006ed6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006ed8:	4b1e      	ldr	r3, [pc, #120]	; (8006f54 <xPortStartScheduler+0x134>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	021b      	lsls	r3, r3, #8
 8006ede:	4a1d      	ldr	r2, [pc, #116]	; (8006f54 <xPortStartScheduler+0x134>)
 8006ee0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006ee2:	4b1c      	ldr	r3, [pc, #112]	; (8006f54 <xPortStartScheduler+0x134>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006eea:	4a1a      	ldr	r2, [pc, #104]	; (8006f54 <xPortStartScheduler+0x134>)
 8006eec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	b2da      	uxtb	r2, r3
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006ef6:	4b18      	ldr	r3, [pc, #96]	; (8006f58 <xPortStartScheduler+0x138>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a17      	ldr	r2, [pc, #92]	; (8006f58 <xPortStartScheduler+0x138>)
 8006efc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006f00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006f02:	4b15      	ldr	r3, [pc, #84]	; (8006f58 <xPortStartScheduler+0x138>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a14      	ldr	r2, [pc, #80]	; (8006f58 <xPortStartScheduler+0x138>)
 8006f08:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006f0c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006f0e:	f000 f8dd 	bl	80070cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006f12:	4b12      	ldr	r3, [pc, #72]	; (8006f5c <xPortStartScheduler+0x13c>)
 8006f14:	2200      	movs	r2, #0
 8006f16:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006f18:	f000 f8fc 	bl	8007114 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006f1c:	4b10      	ldr	r3, [pc, #64]	; (8006f60 <xPortStartScheduler+0x140>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a0f      	ldr	r2, [pc, #60]	; (8006f60 <xPortStartScheduler+0x140>)
 8006f22:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006f26:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006f28:	f7ff ff66 	bl	8006df8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006f2c:	f7fe ff46 	bl	8005dbc <vTaskSwitchContext>
	prvTaskExitError();
 8006f30:	f7ff ff20 	bl	8006d74 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006f34:	2300      	movs	r3, #0
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3718      	adds	r7, #24
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}
 8006f3e:	bf00      	nop
 8006f40:	e000ed00 	.word	0xe000ed00
 8006f44:	410fc271 	.word	0x410fc271
 8006f48:	410fc270 	.word	0x410fc270
 8006f4c:	e000e400 	.word	0xe000e400
 8006f50:	20006948 	.word	0x20006948
 8006f54:	2000694c 	.word	0x2000694c
 8006f58:	e000ed20 	.word	0xe000ed20
 8006f5c:	20000010 	.word	0x20000010
 8006f60:	e000ef34 	.word	0xe000ef34

08006f64 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006f64:	b480      	push	{r7}
 8006f66:	b083      	sub	sp, #12
 8006f68:	af00      	add	r7, sp, #0
	__asm volatile
 8006f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f6e:	f383 8811 	msr	BASEPRI, r3
 8006f72:	f3bf 8f6f 	isb	sy
 8006f76:	f3bf 8f4f 	dsb	sy
 8006f7a:	607b      	str	r3, [r7, #4]
}
 8006f7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006f7e:	4b0f      	ldr	r3, [pc, #60]	; (8006fbc <vPortEnterCritical+0x58>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	3301      	adds	r3, #1
 8006f84:	4a0d      	ldr	r2, [pc, #52]	; (8006fbc <vPortEnterCritical+0x58>)
 8006f86:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006f88:	4b0c      	ldr	r3, [pc, #48]	; (8006fbc <vPortEnterCritical+0x58>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	2b01      	cmp	r3, #1
 8006f8e:	d10f      	bne.n	8006fb0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006f90:	4b0b      	ldr	r3, [pc, #44]	; (8006fc0 <vPortEnterCritical+0x5c>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	b2db      	uxtb	r3, r3
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d00a      	beq.n	8006fb0 <vPortEnterCritical+0x4c>
	__asm volatile
 8006f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f9e:	f383 8811 	msr	BASEPRI, r3
 8006fa2:	f3bf 8f6f 	isb	sy
 8006fa6:	f3bf 8f4f 	dsb	sy
 8006faa:	603b      	str	r3, [r7, #0]
}
 8006fac:	bf00      	nop
 8006fae:	e7fe      	b.n	8006fae <vPortEnterCritical+0x4a>
	}
}
 8006fb0:	bf00      	nop
 8006fb2:	370c      	adds	r7, #12
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr
 8006fbc:	20000010 	.word	0x20000010
 8006fc0:	e000ed04 	.word	0xe000ed04

08006fc4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b083      	sub	sp, #12
 8006fc8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006fca:	4b12      	ldr	r3, [pc, #72]	; (8007014 <vPortExitCritical+0x50>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d10a      	bne.n	8006fe8 <vPortExitCritical+0x24>
	__asm volatile
 8006fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fd6:	f383 8811 	msr	BASEPRI, r3
 8006fda:	f3bf 8f6f 	isb	sy
 8006fde:	f3bf 8f4f 	dsb	sy
 8006fe2:	607b      	str	r3, [r7, #4]
}
 8006fe4:	bf00      	nop
 8006fe6:	e7fe      	b.n	8006fe6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006fe8:	4b0a      	ldr	r3, [pc, #40]	; (8007014 <vPortExitCritical+0x50>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	3b01      	subs	r3, #1
 8006fee:	4a09      	ldr	r2, [pc, #36]	; (8007014 <vPortExitCritical+0x50>)
 8006ff0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006ff2:	4b08      	ldr	r3, [pc, #32]	; (8007014 <vPortExitCritical+0x50>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d105      	bne.n	8007006 <vPortExitCritical+0x42>
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	f383 8811 	msr	BASEPRI, r3
}
 8007004:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007006:	bf00      	nop
 8007008:	370c      	adds	r7, #12
 800700a:	46bd      	mov	sp, r7
 800700c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007010:	4770      	bx	lr
 8007012:	bf00      	nop
 8007014:	20000010 	.word	0x20000010
	...

08007020 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007020:	f3ef 8009 	mrs	r0, PSP
 8007024:	f3bf 8f6f 	isb	sy
 8007028:	4b15      	ldr	r3, [pc, #84]	; (8007080 <pxCurrentTCBConst>)
 800702a:	681a      	ldr	r2, [r3, #0]
 800702c:	f01e 0f10 	tst.w	lr, #16
 8007030:	bf08      	it	eq
 8007032:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007036:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800703a:	6010      	str	r0, [r2, #0]
 800703c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007040:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007044:	f380 8811 	msr	BASEPRI, r0
 8007048:	f3bf 8f4f 	dsb	sy
 800704c:	f3bf 8f6f 	isb	sy
 8007050:	f7fe feb4 	bl	8005dbc <vTaskSwitchContext>
 8007054:	f04f 0000 	mov.w	r0, #0
 8007058:	f380 8811 	msr	BASEPRI, r0
 800705c:	bc09      	pop	{r0, r3}
 800705e:	6819      	ldr	r1, [r3, #0]
 8007060:	6808      	ldr	r0, [r1, #0]
 8007062:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007066:	f01e 0f10 	tst.w	lr, #16
 800706a:	bf08      	it	eq
 800706c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007070:	f380 8809 	msr	PSP, r0
 8007074:	f3bf 8f6f 	isb	sy
 8007078:	4770      	bx	lr
 800707a:	bf00      	nop
 800707c:	f3af 8000 	nop.w

08007080 <pxCurrentTCBConst>:
 8007080:	2000631c 	.word	0x2000631c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007084:	bf00      	nop
 8007086:	bf00      	nop

08007088 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b082      	sub	sp, #8
 800708c:	af00      	add	r7, sp, #0
	__asm volatile
 800708e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007092:	f383 8811 	msr	BASEPRI, r3
 8007096:	f3bf 8f6f 	isb	sy
 800709a:	f3bf 8f4f 	dsb	sy
 800709e:	607b      	str	r3, [r7, #4]
}
 80070a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80070a2:	f7fe fdd1 	bl	8005c48 <xTaskIncrementTick>
 80070a6:	4603      	mov	r3, r0
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d003      	beq.n	80070b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80070ac:	4b06      	ldr	r3, [pc, #24]	; (80070c8 <xPortSysTickHandler+0x40>)
 80070ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070b2:	601a      	str	r2, [r3, #0]
 80070b4:	2300      	movs	r3, #0
 80070b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	f383 8811 	msr	BASEPRI, r3
}
 80070be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80070c0:	bf00      	nop
 80070c2:	3708      	adds	r7, #8
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}
 80070c8:	e000ed04 	.word	0xe000ed04

080070cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80070cc:	b480      	push	{r7}
 80070ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80070d0:	4b0b      	ldr	r3, [pc, #44]	; (8007100 <vPortSetupTimerInterrupt+0x34>)
 80070d2:	2200      	movs	r2, #0
 80070d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80070d6:	4b0b      	ldr	r3, [pc, #44]	; (8007104 <vPortSetupTimerInterrupt+0x38>)
 80070d8:	2200      	movs	r2, #0
 80070da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80070dc:	4b0a      	ldr	r3, [pc, #40]	; (8007108 <vPortSetupTimerInterrupt+0x3c>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a0a      	ldr	r2, [pc, #40]	; (800710c <vPortSetupTimerInterrupt+0x40>)
 80070e2:	fba2 2303 	umull	r2, r3, r2, r3
 80070e6:	099b      	lsrs	r3, r3, #6
 80070e8:	4a09      	ldr	r2, [pc, #36]	; (8007110 <vPortSetupTimerInterrupt+0x44>)
 80070ea:	3b01      	subs	r3, #1
 80070ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80070ee:	4b04      	ldr	r3, [pc, #16]	; (8007100 <vPortSetupTimerInterrupt+0x34>)
 80070f0:	2207      	movs	r2, #7
 80070f2:	601a      	str	r2, [r3, #0]
}
 80070f4:	bf00      	nop
 80070f6:	46bd      	mov	sp, r7
 80070f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fc:	4770      	bx	lr
 80070fe:	bf00      	nop
 8007100:	e000e010 	.word	0xe000e010
 8007104:	e000e018 	.word	0xe000e018
 8007108:	20000004 	.word	0x20000004
 800710c:	10624dd3 	.word	0x10624dd3
 8007110:	e000e014 	.word	0xe000e014

08007114 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007114:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007124 <vPortEnableVFP+0x10>
 8007118:	6801      	ldr	r1, [r0, #0]
 800711a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800711e:	6001      	str	r1, [r0, #0]
 8007120:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007122:	bf00      	nop
 8007124:	e000ed88 	.word	0xe000ed88

08007128 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007128:	b480      	push	{r7}
 800712a:	b085      	sub	sp, #20
 800712c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800712e:	f3ef 8305 	mrs	r3, IPSR
 8007132:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2b0f      	cmp	r3, #15
 8007138:	d914      	bls.n	8007164 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800713a:	4a17      	ldr	r2, [pc, #92]	; (8007198 <vPortValidateInterruptPriority+0x70>)
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	4413      	add	r3, r2
 8007140:	781b      	ldrb	r3, [r3, #0]
 8007142:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007144:	4b15      	ldr	r3, [pc, #84]	; (800719c <vPortValidateInterruptPriority+0x74>)
 8007146:	781b      	ldrb	r3, [r3, #0]
 8007148:	7afa      	ldrb	r2, [r7, #11]
 800714a:	429a      	cmp	r2, r3
 800714c:	d20a      	bcs.n	8007164 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800714e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007152:	f383 8811 	msr	BASEPRI, r3
 8007156:	f3bf 8f6f 	isb	sy
 800715a:	f3bf 8f4f 	dsb	sy
 800715e:	607b      	str	r3, [r7, #4]
}
 8007160:	bf00      	nop
 8007162:	e7fe      	b.n	8007162 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007164:	4b0e      	ldr	r3, [pc, #56]	; (80071a0 <vPortValidateInterruptPriority+0x78>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800716c:	4b0d      	ldr	r3, [pc, #52]	; (80071a4 <vPortValidateInterruptPriority+0x7c>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	429a      	cmp	r2, r3
 8007172:	d90a      	bls.n	800718a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007178:	f383 8811 	msr	BASEPRI, r3
 800717c:	f3bf 8f6f 	isb	sy
 8007180:	f3bf 8f4f 	dsb	sy
 8007184:	603b      	str	r3, [r7, #0]
}
 8007186:	bf00      	nop
 8007188:	e7fe      	b.n	8007188 <vPortValidateInterruptPriority+0x60>
	}
 800718a:	bf00      	nop
 800718c:	3714      	adds	r7, #20
 800718e:	46bd      	mov	sp, r7
 8007190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007194:	4770      	bx	lr
 8007196:	bf00      	nop
 8007198:	e000e3f0 	.word	0xe000e3f0
 800719c:	20006948 	.word	0x20006948
 80071a0:	e000ed0c 	.word	0xe000ed0c
 80071a4:	2000694c 	.word	0x2000694c

080071a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b08a      	sub	sp, #40	; 0x28
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80071b0:	2300      	movs	r3, #0
 80071b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80071b4:	f7fe fc7a 	bl	8005aac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80071b8:	4b5b      	ldr	r3, [pc, #364]	; (8007328 <pvPortMalloc+0x180>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d101      	bne.n	80071c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80071c0:	f000 f920 	bl	8007404 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80071c4:	4b59      	ldr	r3, [pc, #356]	; (800732c <pvPortMalloc+0x184>)
 80071c6:	681a      	ldr	r2, [r3, #0]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	4013      	ands	r3, r2
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	f040 8093 	bne.w	80072f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d01d      	beq.n	8007214 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80071d8:	2208      	movs	r2, #8
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	4413      	add	r3, r2
 80071de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f003 0307 	and.w	r3, r3, #7
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d014      	beq.n	8007214 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f023 0307 	bic.w	r3, r3, #7
 80071f0:	3308      	adds	r3, #8
 80071f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f003 0307 	and.w	r3, r3, #7
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d00a      	beq.n	8007214 <pvPortMalloc+0x6c>
	__asm volatile
 80071fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007202:	f383 8811 	msr	BASEPRI, r3
 8007206:	f3bf 8f6f 	isb	sy
 800720a:	f3bf 8f4f 	dsb	sy
 800720e:	617b      	str	r3, [r7, #20]
}
 8007210:	bf00      	nop
 8007212:	e7fe      	b.n	8007212 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d06e      	beq.n	80072f8 <pvPortMalloc+0x150>
 800721a:	4b45      	ldr	r3, [pc, #276]	; (8007330 <pvPortMalloc+0x188>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	687a      	ldr	r2, [r7, #4]
 8007220:	429a      	cmp	r2, r3
 8007222:	d869      	bhi.n	80072f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007224:	4b43      	ldr	r3, [pc, #268]	; (8007334 <pvPortMalloc+0x18c>)
 8007226:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007228:	4b42      	ldr	r3, [pc, #264]	; (8007334 <pvPortMalloc+0x18c>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800722e:	e004      	b.n	800723a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007232:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800723a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	687a      	ldr	r2, [r7, #4]
 8007240:	429a      	cmp	r2, r3
 8007242:	d903      	bls.n	800724c <pvPortMalloc+0xa4>
 8007244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d1f1      	bne.n	8007230 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800724c:	4b36      	ldr	r3, [pc, #216]	; (8007328 <pvPortMalloc+0x180>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007252:	429a      	cmp	r2, r3
 8007254:	d050      	beq.n	80072f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007256:	6a3b      	ldr	r3, [r7, #32]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	2208      	movs	r2, #8
 800725c:	4413      	add	r3, r2
 800725e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007262:	681a      	ldr	r2, [r3, #0]
 8007264:	6a3b      	ldr	r3, [r7, #32]
 8007266:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800726a:	685a      	ldr	r2, [r3, #4]
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	1ad2      	subs	r2, r2, r3
 8007270:	2308      	movs	r3, #8
 8007272:	005b      	lsls	r3, r3, #1
 8007274:	429a      	cmp	r2, r3
 8007276:	d91f      	bls.n	80072b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007278:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	4413      	add	r3, r2
 800727e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007280:	69bb      	ldr	r3, [r7, #24]
 8007282:	f003 0307 	and.w	r3, r3, #7
 8007286:	2b00      	cmp	r3, #0
 8007288:	d00a      	beq.n	80072a0 <pvPortMalloc+0xf8>
	__asm volatile
 800728a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800728e:	f383 8811 	msr	BASEPRI, r3
 8007292:	f3bf 8f6f 	isb	sy
 8007296:	f3bf 8f4f 	dsb	sy
 800729a:	613b      	str	r3, [r7, #16]
}
 800729c:	bf00      	nop
 800729e:	e7fe      	b.n	800729e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80072a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a2:	685a      	ldr	r2, [r3, #4]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	1ad2      	subs	r2, r2, r3
 80072a8:	69bb      	ldr	r3, [r7, #24]
 80072aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80072ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ae:	687a      	ldr	r2, [r7, #4]
 80072b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80072b2:	69b8      	ldr	r0, [r7, #24]
 80072b4:	f000 f908 	bl	80074c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80072b8:	4b1d      	ldr	r3, [pc, #116]	; (8007330 <pvPortMalloc+0x188>)
 80072ba:	681a      	ldr	r2, [r3, #0]
 80072bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	1ad3      	subs	r3, r2, r3
 80072c2:	4a1b      	ldr	r2, [pc, #108]	; (8007330 <pvPortMalloc+0x188>)
 80072c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80072c6:	4b1a      	ldr	r3, [pc, #104]	; (8007330 <pvPortMalloc+0x188>)
 80072c8:	681a      	ldr	r2, [r3, #0]
 80072ca:	4b1b      	ldr	r3, [pc, #108]	; (8007338 <pvPortMalloc+0x190>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	429a      	cmp	r2, r3
 80072d0:	d203      	bcs.n	80072da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80072d2:	4b17      	ldr	r3, [pc, #92]	; (8007330 <pvPortMalloc+0x188>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4a18      	ldr	r2, [pc, #96]	; (8007338 <pvPortMalloc+0x190>)
 80072d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80072da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072dc:	685a      	ldr	r2, [r3, #4]
 80072de:	4b13      	ldr	r3, [pc, #76]	; (800732c <pvPortMalloc+0x184>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	431a      	orrs	r2, r3
 80072e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80072e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ea:	2200      	movs	r2, #0
 80072ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80072ee:	4b13      	ldr	r3, [pc, #76]	; (800733c <pvPortMalloc+0x194>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	3301      	adds	r3, #1
 80072f4:	4a11      	ldr	r2, [pc, #68]	; (800733c <pvPortMalloc+0x194>)
 80072f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80072f8:	f7fe fbe6 	bl	8005ac8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80072fc:	69fb      	ldr	r3, [r7, #28]
 80072fe:	f003 0307 	and.w	r3, r3, #7
 8007302:	2b00      	cmp	r3, #0
 8007304:	d00a      	beq.n	800731c <pvPortMalloc+0x174>
	__asm volatile
 8007306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800730a:	f383 8811 	msr	BASEPRI, r3
 800730e:	f3bf 8f6f 	isb	sy
 8007312:	f3bf 8f4f 	dsb	sy
 8007316:	60fb      	str	r3, [r7, #12]
}
 8007318:	bf00      	nop
 800731a:	e7fe      	b.n	800731a <pvPortMalloc+0x172>
	return pvReturn;
 800731c:	69fb      	ldr	r3, [r7, #28]
}
 800731e:	4618      	mov	r0, r3
 8007320:	3728      	adds	r7, #40	; 0x28
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}
 8007326:	bf00      	nop
 8007328:	20016958 	.word	0x20016958
 800732c:	2001696c 	.word	0x2001696c
 8007330:	2001695c 	.word	0x2001695c
 8007334:	20016950 	.word	0x20016950
 8007338:	20016960 	.word	0x20016960
 800733c:	20016964 	.word	0x20016964

08007340 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b086      	sub	sp, #24
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d04d      	beq.n	80073ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007352:	2308      	movs	r3, #8
 8007354:	425b      	negs	r3, r3
 8007356:	697a      	ldr	r2, [r7, #20]
 8007358:	4413      	add	r3, r2
 800735a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007360:	693b      	ldr	r3, [r7, #16]
 8007362:	685a      	ldr	r2, [r3, #4]
 8007364:	4b24      	ldr	r3, [pc, #144]	; (80073f8 <vPortFree+0xb8>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4013      	ands	r3, r2
 800736a:	2b00      	cmp	r3, #0
 800736c:	d10a      	bne.n	8007384 <vPortFree+0x44>
	__asm volatile
 800736e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007372:	f383 8811 	msr	BASEPRI, r3
 8007376:	f3bf 8f6f 	isb	sy
 800737a:	f3bf 8f4f 	dsb	sy
 800737e:	60fb      	str	r3, [r7, #12]
}
 8007380:	bf00      	nop
 8007382:	e7fe      	b.n	8007382 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007384:	693b      	ldr	r3, [r7, #16]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d00a      	beq.n	80073a2 <vPortFree+0x62>
	__asm volatile
 800738c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007390:	f383 8811 	msr	BASEPRI, r3
 8007394:	f3bf 8f6f 	isb	sy
 8007398:	f3bf 8f4f 	dsb	sy
 800739c:	60bb      	str	r3, [r7, #8]
}
 800739e:	bf00      	nop
 80073a0:	e7fe      	b.n	80073a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	685a      	ldr	r2, [r3, #4]
 80073a6:	4b14      	ldr	r3, [pc, #80]	; (80073f8 <vPortFree+0xb8>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4013      	ands	r3, r2
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d01e      	beq.n	80073ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d11a      	bne.n	80073ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	685a      	ldr	r2, [r3, #4]
 80073bc:	4b0e      	ldr	r3, [pc, #56]	; (80073f8 <vPortFree+0xb8>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	43db      	mvns	r3, r3
 80073c2:	401a      	ands	r2, r3
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80073c8:	f7fe fb70 	bl	8005aac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80073cc:	693b      	ldr	r3, [r7, #16]
 80073ce:	685a      	ldr	r2, [r3, #4]
 80073d0:	4b0a      	ldr	r3, [pc, #40]	; (80073fc <vPortFree+0xbc>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4413      	add	r3, r2
 80073d6:	4a09      	ldr	r2, [pc, #36]	; (80073fc <vPortFree+0xbc>)
 80073d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80073da:	6938      	ldr	r0, [r7, #16]
 80073dc:	f000 f874 	bl	80074c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80073e0:	4b07      	ldr	r3, [pc, #28]	; (8007400 <vPortFree+0xc0>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	3301      	adds	r3, #1
 80073e6:	4a06      	ldr	r2, [pc, #24]	; (8007400 <vPortFree+0xc0>)
 80073e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80073ea:	f7fe fb6d 	bl	8005ac8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80073ee:	bf00      	nop
 80073f0:	3718      	adds	r7, #24
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}
 80073f6:	bf00      	nop
 80073f8:	2001696c 	.word	0x2001696c
 80073fc:	2001695c 	.word	0x2001695c
 8007400:	20016968 	.word	0x20016968

08007404 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007404:	b480      	push	{r7}
 8007406:	b085      	sub	sp, #20
 8007408:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800740a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800740e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007410:	4b27      	ldr	r3, [pc, #156]	; (80074b0 <prvHeapInit+0xac>)
 8007412:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	f003 0307 	and.w	r3, r3, #7
 800741a:	2b00      	cmp	r3, #0
 800741c:	d00c      	beq.n	8007438 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	3307      	adds	r3, #7
 8007422:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f023 0307 	bic.w	r3, r3, #7
 800742a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800742c:	68ba      	ldr	r2, [r7, #8]
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	1ad3      	subs	r3, r2, r3
 8007432:	4a1f      	ldr	r2, [pc, #124]	; (80074b0 <prvHeapInit+0xac>)
 8007434:	4413      	add	r3, r2
 8007436:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800743c:	4a1d      	ldr	r2, [pc, #116]	; (80074b4 <prvHeapInit+0xb0>)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007442:	4b1c      	ldr	r3, [pc, #112]	; (80074b4 <prvHeapInit+0xb0>)
 8007444:	2200      	movs	r2, #0
 8007446:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	68ba      	ldr	r2, [r7, #8]
 800744c:	4413      	add	r3, r2
 800744e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007450:	2208      	movs	r2, #8
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	1a9b      	subs	r3, r3, r2
 8007456:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	f023 0307 	bic.w	r3, r3, #7
 800745e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	4a15      	ldr	r2, [pc, #84]	; (80074b8 <prvHeapInit+0xb4>)
 8007464:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007466:	4b14      	ldr	r3, [pc, #80]	; (80074b8 <prvHeapInit+0xb4>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	2200      	movs	r2, #0
 800746c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800746e:	4b12      	ldr	r3, [pc, #72]	; (80074b8 <prvHeapInit+0xb4>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	2200      	movs	r2, #0
 8007474:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	68fa      	ldr	r2, [r7, #12]
 800747e:	1ad2      	subs	r2, r2, r3
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007484:	4b0c      	ldr	r3, [pc, #48]	; (80074b8 <prvHeapInit+0xb4>)
 8007486:	681a      	ldr	r2, [r3, #0]
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	685b      	ldr	r3, [r3, #4]
 8007490:	4a0a      	ldr	r2, [pc, #40]	; (80074bc <prvHeapInit+0xb8>)
 8007492:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	685b      	ldr	r3, [r3, #4]
 8007498:	4a09      	ldr	r2, [pc, #36]	; (80074c0 <prvHeapInit+0xbc>)
 800749a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800749c:	4b09      	ldr	r3, [pc, #36]	; (80074c4 <prvHeapInit+0xc0>)
 800749e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80074a2:	601a      	str	r2, [r3, #0]
}
 80074a4:	bf00      	nop
 80074a6:	3714      	adds	r7, #20
 80074a8:	46bd      	mov	sp, r7
 80074aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ae:	4770      	bx	lr
 80074b0:	20006950 	.word	0x20006950
 80074b4:	20016950 	.word	0x20016950
 80074b8:	20016958 	.word	0x20016958
 80074bc:	20016960 	.word	0x20016960
 80074c0:	2001695c 	.word	0x2001695c
 80074c4:	2001696c 	.word	0x2001696c

080074c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80074c8:	b480      	push	{r7}
 80074ca:	b085      	sub	sp, #20
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80074d0:	4b28      	ldr	r3, [pc, #160]	; (8007574 <prvInsertBlockIntoFreeList+0xac>)
 80074d2:	60fb      	str	r3, [r7, #12]
 80074d4:	e002      	b.n	80074dc <prvInsertBlockIntoFreeList+0x14>
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	60fb      	str	r3, [r7, #12]
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	687a      	ldr	r2, [r7, #4]
 80074e2:	429a      	cmp	r2, r3
 80074e4:	d8f7      	bhi.n	80074d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	685b      	ldr	r3, [r3, #4]
 80074ee:	68ba      	ldr	r2, [r7, #8]
 80074f0:	4413      	add	r3, r2
 80074f2:	687a      	ldr	r2, [r7, #4]
 80074f4:	429a      	cmp	r2, r3
 80074f6:	d108      	bne.n	800750a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	685a      	ldr	r2, [r3, #4]
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	441a      	add	r2, r3
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	685b      	ldr	r3, [r3, #4]
 8007512:	68ba      	ldr	r2, [r7, #8]
 8007514:	441a      	add	r2, r3
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	429a      	cmp	r2, r3
 800751c:	d118      	bne.n	8007550 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681a      	ldr	r2, [r3, #0]
 8007522:	4b15      	ldr	r3, [pc, #84]	; (8007578 <prvInsertBlockIntoFreeList+0xb0>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	429a      	cmp	r2, r3
 8007528:	d00d      	beq.n	8007546 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	685a      	ldr	r2, [r3, #4]
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	441a      	add	r2, r3
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	681a      	ldr	r2, [r3, #0]
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	601a      	str	r2, [r3, #0]
 8007544:	e008      	b.n	8007558 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007546:	4b0c      	ldr	r3, [pc, #48]	; (8007578 <prvInsertBlockIntoFreeList+0xb0>)
 8007548:	681a      	ldr	r2, [r3, #0]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	601a      	str	r2, [r3, #0]
 800754e:	e003      	b.n	8007558 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681a      	ldr	r2, [r3, #0]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007558:	68fa      	ldr	r2, [r7, #12]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	429a      	cmp	r2, r3
 800755e:	d002      	beq.n	8007566 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	687a      	ldr	r2, [r7, #4]
 8007564:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007566:	bf00      	nop
 8007568:	3714      	adds	r7, #20
 800756a:	46bd      	mov	sp, r7
 800756c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007570:	4770      	bx	lr
 8007572:	bf00      	nop
 8007574:	20016950 	.word	0x20016950
 8007578:	20016958 	.word	0x20016958

0800757c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b084      	sub	sp, #16
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
 8007584:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8007586:	f009 ff7f 	bl	8011488 <sys_timeouts_sleeptime>
 800758a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007592:	d10b      	bne.n	80075ac <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8007594:	4813      	ldr	r0, [pc, #76]	; (80075e4 <tcpip_timeouts_mbox_fetch+0x68>)
 8007596:	f00e fe8c 	bl	80162b2 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800759a:	2200      	movs	r2, #0
 800759c:	6839      	ldr	r1, [r7, #0]
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f00e fe14 	bl	80161cc <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 80075a4:	480f      	ldr	r0, [pc, #60]	; (80075e4 <tcpip_timeouts_mbox_fetch+0x68>)
 80075a6:	f00e fe75 	bl	8016294 <sys_mutex_lock>
    return;
 80075aa:	e018      	b.n	80075de <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d102      	bne.n	80075b8 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 80075b2:	f009 ff2f 	bl	8011414 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80075b6:	e7e6      	b.n	8007586 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 80075b8:	480a      	ldr	r0, [pc, #40]	; (80075e4 <tcpip_timeouts_mbox_fetch+0x68>)
 80075ba:	f00e fe7a 	bl	80162b2 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 80075be:	68fa      	ldr	r2, [r7, #12]
 80075c0:	6839      	ldr	r1, [r7, #0]
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f00e fe02 	bl	80161cc <sys_arch_mbox_fetch>
 80075c8:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 80075ca:	4806      	ldr	r0, [pc, #24]	; (80075e4 <tcpip_timeouts_mbox_fetch+0x68>)
 80075cc:	f00e fe62 	bl	8016294 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075d6:	d102      	bne.n	80075de <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 80075d8:	f009 ff1c 	bl	8011414 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80075dc:	e7d3      	b.n	8007586 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 80075de:	3710      	adds	r7, #16
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd80      	pop	{r7, pc}
 80075e4:	2001697c 	.word	0x2001697c

080075e8 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b084      	sub	sp, #16
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 80075f0:	4810      	ldr	r0, [pc, #64]	; (8007634 <tcpip_thread+0x4c>)
 80075f2:	f00e fe4f 	bl	8016294 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 80075f6:	4b10      	ldr	r3, [pc, #64]	; (8007638 <tcpip_thread+0x50>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d005      	beq.n	800760a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 80075fe:	4b0e      	ldr	r3, [pc, #56]	; (8007638 <tcpip_thread+0x50>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4a0e      	ldr	r2, [pc, #56]	; (800763c <tcpip_thread+0x54>)
 8007604:	6812      	ldr	r2, [r2, #0]
 8007606:	4610      	mov	r0, r2
 8007608:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800760a:	f107 030c 	add.w	r3, r7, #12
 800760e:	4619      	mov	r1, r3
 8007610:	480b      	ldr	r0, [pc, #44]	; (8007640 <tcpip_thread+0x58>)
 8007612:	f7ff ffb3 	bl	800757c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d106      	bne.n	800762a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800761c:	4b09      	ldr	r3, [pc, #36]	; (8007644 <tcpip_thread+0x5c>)
 800761e:	2291      	movs	r2, #145	; 0x91
 8007620:	4909      	ldr	r1, [pc, #36]	; (8007648 <tcpip_thread+0x60>)
 8007622:	480a      	ldr	r0, [pc, #40]	; (800764c <tcpip_thread+0x64>)
 8007624:	f00e fef4 	bl	8016410 <iprintf>
      continue;
 8007628:	e003      	b.n	8007632 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	4618      	mov	r0, r3
 800762e:	f000 f80f 	bl	8007650 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8007632:	e7ea      	b.n	800760a <tcpip_thread+0x22>
 8007634:	2001697c 	.word	0x2001697c
 8007638:	20016970 	.word	0x20016970
 800763c:	20016974 	.word	0x20016974
 8007640:	20016978 	.word	0x20016978
 8007644:	08017c00 	.word	0x08017c00
 8007648:	08017c30 	.word	0x08017c30
 800764c:	08017c50 	.word	0x08017c50

08007650 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b082      	sub	sp, #8
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	781b      	ldrb	r3, [r3, #0]
 800765c:	2b02      	cmp	r3, #2
 800765e:	d026      	beq.n	80076ae <tcpip_thread_handle_msg+0x5e>
 8007660:	2b02      	cmp	r3, #2
 8007662:	dc2b      	bgt.n	80076bc <tcpip_thread_handle_msg+0x6c>
 8007664:	2b00      	cmp	r3, #0
 8007666:	d002      	beq.n	800766e <tcpip_thread_handle_msg+0x1e>
 8007668:	2b01      	cmp	r3, #1
 800766a:	d015      	beq.n	8007698 <tcpip_thread_handle_msg+0x48>
 800766c:	e026      	b.n	80076bc <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	68db      	ldr	r3, [r3, #12]
 8007672:	687a      	ldr	r2, [r7, #4]
 8007674:	6850      	ldr	r0, [r2, #4]
 8007676:	687a      	ldr	r2, [r7, #4]
 8007678:	6892      	ldr	r2, [r2, #8]
 800767a:	4611      	mov	r1, r2
 800767c:	4798      	blx	r3
 800767e:	4603      	mov	r3, r0
 8007680:	2b00      	cmp	r3, #0
 8007682:	d004      	beq.n	800768e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	685b      	ldr	r3, [r3, #4]
 8007688:	4618      	mov	r0, r3
 800768a:	f003 fa13 	bl	800aab4 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800768e:	6879      	ldr	r1, [r7, #4]
 8007690:	2009      	movs	r0, #9
 8007692:	f002 fb5f 	bl	8009d54 <memp_free>
      break;
 8007696:	e018      	b.n	80076ca <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	685b      	ldr	r3, [r3, #4]
 800769c:	687a      	ldr	r2, [r7, #4]
 800769e:	6892      	ldr	r2, [r2, #8]
 80076a0:	4610      	mov	r0, r2
 80076a2:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 80076a4:	6879      	ldr	r1, [r7, #4]
 80076a6:	2008      	movs	r0, #8
 80076a8:	f002 fb54 	bl	8009d54 <memp_free>
      break;
 80076ac:	e00d      	b.n	80076ca <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	687a      	ldr	r2, [r7, #4]
 80076b4:	6892      	ldr	r2, [r2, #8]
 80076b6:	4610      	mov	r0, r2
 80076b8:	4798      	blx	r3
      break;
 80076ba:	e006      	b.n	80076ca <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80076bc:	4b05      	ldr	r3, [pc, #20]	; (80076d4 <tcpip_thread_handle_msg+0x84>)
 80076be:	22cf      	movs	r2, #207	; 0xcf
 80076c0:	4905      	ldr	r1, [pc, #20]	; (80076d8 <tcpip_thread_handle_msg+0x88>)
 80076c2:	4806      	ldr	r0, [pc, #24]	; (80076dc <tcpip_thread_handle_msg+0x8c>)
 80076c4:	f00e fea4 	bl	8016410 <iprintf>
      break;
 80076c8:	bf00      	nop
  }
}
 80076ca:	bf00      	nop
 80076cc:	3708      	adds	r7, #8
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}
 80076d2:	bf00      	nop
 80076d4:	08017c00 	.word	0x08017c00
 80076d8:	08017c30 	.word	0x08017c30
 80076dc:	08017c50 	.word	0x08017c50

080076e0 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b086      	sub	sp, #24
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	60f8      	str	r0, [r7, #12]
 80076e8:	60b9      	str	r1, [r7, #8]
 80076ea:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80076ec:	481a      	ldr	r0, [pc, #104]	; (8007758 <tcpip_inpkt+0x78>)
 80076ee:	f00e fd9e 	bl	801622e <sys_mbox_valid>
 80076f2:	4603      	mov	r3, r0
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d105      	bne.n	8007704 <tcpip_inpkt+0x24>
 80076f8:	4b18      	ldr	r3, [pc, #96]	; (800775c <tcpip_inpkt+0x7c>)
 80076fa:	22fc      	movs	r2, #252	; 0xfc
 80076fc:	4918      	ldr	r1, [pc, #96]	; (8007760 <tcpip_inpkt+0x80>)
 80076fe:	4819      	ldr	r0, [pc, #100]	; (8007764 <tcpip_inpkt+0x84>)
 8007700:	f00e fe86 	bl	8016410 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8007704:	2009      	movs	r0, #9
 8007706:	f002 fad3 	bl	8009cb0 <memp_malloc>
 800770a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d102      	bne.n	8007718 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8007712:	f04f 33ff 	mov.w	r3, #4294967295
 8007716:	e01a      	b.n	800774e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8007718:	697b      	ldr	r3, [r7, #20]
 800771a:	2200      	movs	r2, #0
 800771c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	68fa      	ldr	r2, [r7, #12]
 8007722:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	68ba      	ldr	r2, [r7, #8]
 8007728:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	687a      	ldr	r2, [r7, #4]
 800772e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8007730:	6979      	ldr	r1, [r7, #20]
 8007732:	4809      	ldr	r0, [pc, #36]	; (8007758 <tcpip_inpkt+0x78>)
 8007734:	f00e fd30 	bl	8016198 <sys_mbox_trypost>
 8007738:	4603      	mov	r3, r0
 800773a:	2b00      	cmp	r3, #0
 800773c:	d006      	beq.n	800774c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800773e:	6979      	ldr	r1, [r7, #20]
 8007740:	2009      	movs	r0, #9
 8007742:	f002 fb07 	bl	8009d54 <memp_free>
    return ERR_MEM;
 8007746:	f04f 33ff 	mov.w	r3, #4294967295
 800774a:	e000      	b.n	800774e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800774c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800774e:	4618      	mov	r0, r3
 8007750:	3718      	adds	r7, #24
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}
 8007756:	bf00      	nop
 8007758:	20016978 	.word	0x20016978
 800775c:	08017c00 	.word	0x08017c00
 8007760:	08017c78 	.word	0x08017c78
 8007764:	08017c50 	.word	0x08017c50

08007768 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b082      	sub	sp, #8
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
 8007770:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007778:	f003 0318 	and.w	r3, r3, #24
 800777c:	2b00      	cmp	r3, #0
 800777e:	d006      	beq.n	800778e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8007780:	4a08      	ldr	r2, [pc, #32]	; (80077a4 <tcpip_input+0x3c>)
 8007782:	6839      	ldr	r1, [r7, #0]
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f7ff ffab 	bl	80076e0 <tcpip_inpkt>
 800778a:	4603      	mov	r3, r0
 800778c:	e005      	b.n	800779a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800778e:	4a06      	ldr	r2, [pc, #24]	; (80077a8 <tcpip_input+0x40>)
 8007790:	6839      	ldr	r1, [r7, #0]
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f7ff ffa4 	bl	80076e0 <tcpip_inpkt>
 8007798:	4603      	mov	r3, r0
}
 800779a:	4618      	mov	r0, r3
 800779c:	3708      	adds	r7, #8
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}
 80077a2:	bf00      	nop
 80077a4:	08015fb9 	.word	0x08015fb9
 80077a8:	08014e85 	.word	0x08014e85

080077ac <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b084      	sub	sp, #16
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80077b6:	4819      	ldr	r0, [pc, #100]	; (800781c <tcpip_try_callback+0x70>)
 80077b8:	f00e fd39 	bl	801622e <sys_mbox_valid>
 80077bc:	4603      	mov	r3, r0
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d106      	bne.n	80077d0 <tcpip_try_callback+0x24>
 80077c2:	4b17      	ldr	r3, [pc, #92]	; (8007820 <tcpip_try_callback+0x74>)
 80077c4:	f240 125d 	movw	r2, #349	; 0x15d
 80077c8:	4916      	ldr	r1, [pc, #88]	; (8007824 <tcpip_try_callback+0x78>)
 80077ca:	4817      	ldr	r0, [pc, #92]	; (8007828 <tcpip_try_callback+0x7c>)
 80077cc:	f00e fe20 	bl	8016410 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 80077d0:	2008      	movs	r0, #8
 80077d2:	f002 fa6d 	bl	8009cb0 <memp_malloc>
 80077d6:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d102      	bne.n	80077e4 <tcpip_try_callback+0x38>
    return ERR_MEM;
 80077de:	f04f 33ff 	mov.w	r3, #4294967295
 80077e2:	e017      	b.n	8007814 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	2201      	movs	r2, #1
 80077e8:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	687a      	ldr	r2, [r7, #4]
 80077ee:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	683a      	ldr	r2, [r7, #0]
 80077f4:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80077f6:	68f9      	ldr	r1, [r7, #12]
 80077f8:	4808      	ldr	r0, [pc, #32]	; (800781c <tcpip_try_callback+0x70>)
 80077fa:	f00e fccd 	bl	8016198 <sys_mbox_trypost>
 80077fe:	4603      	mov	r3, r0
 8007800:	2b00      	cmp	r3, #0
 8007802:	d006      	beq.n	8007812 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8007804:	68f9      	ldr	r1, [r7, #12]
 8007806:	2008      	movs	r0, #8
 8007808:	f002 faa4 	bl	8009d54 <memp_free>
    return ERR_MEM;
 800780c:	f04f 33ff 	mov.w	r3, #4294967295
 8007810:	e000      	b.n	8007814 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8007812:	2300      	movs	r3, #0
}
 8007814:	4618      	mov	r0, r3
 8007816:	3710      	adds	r7, #16
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}
 800781c:	20016978 	.word	0x20016978
 8007820:	08017c00 	.word	0x08017c00
 8007824:	08017c78 	.word	0x08017c78
 8007828:	08017c50 	.word	0x08017c50

0800782c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b084      	sub	sp, #16
 8007830:	af02      	add	r7, sp, #8
 8007832:	6078      	str	r0, [r7, #4]
 8007834:	6039      	str	r1, [r7, #0]
  lwip_init();
 8007836:	f001 fd8b 	bl	8009350 <lwip_init>

  tcpip_init_done = initfunc;
 800783a:	4a17      	ldr	r2, [pc, #92]	; (8007898 <tcpip_init+0x6c>)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8007840:	4a16      	ldr	r2, [pc, #88]	; (800789c <tcpip_init+0x70>)
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8007846:	2106      	movs	r1, #6
 8007848:	4815      	ldr	r0, [pc, #84]	; (80078a0 <tcpip_init+0x74>)
 800784a:	f00e fc8b 	bl	8016164 <sys_mbox_new>
 800784e:	4603      	mov	r3, r0
 8007850:	2b00      	cmp	r3, #0
 8007852:	d006      	beq.n	8007862 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8007854:	4b13      	ldr	r3, [pc, #76]	; (80078a4 <tcpip_init+0x78>)
 8007856:	f240 2261 	movw	r2, #609	; 0x261
 800785a:	4913      	ldr	r1, [pc, #76]	; (80078a8 <tcpip_init+0x7c>)
 800785c:	4813      	ldr	r0, [pc, #76]	; (80078ac <tcpip_init+0x80>)
 800785e:	f00e fdd7 	bl	8016410 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8007862:	4813      	ldr	r0, [pc, #76]	; (80078b0 <tcpip_init+0x84>)
 8007864:	f00e fd00 	bl	8016268 <sys_mutex_new>
 8007868:	4603      	mov	r3, r0
 800786a:	2b00      	cmp	r3, #0
 800786c:	d006      	beq.n	800787c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800786e:	4b0d      	ldr	r3, [pc, #52]	; (80078a4 <tcpip_init+0x78>)
 8007870:	f240 2265 	movw	r2, #613	; 0x265
 8007874:	490f      	ldr	r1, [pc, #60]	; (80078b4 <tcpip_init+0x88>)
 8007876:	480d      	ldr	r0, [pc, #52]	; (80078ac <tcpip_init+0x80>)
 8007878:	f00e fdca 	bl	8016410 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800787c:	2318      	movs	r3, #24
 800787e:	9300      	str	r3, [sp, #0]
 8007880:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007884:	2200      	movs	r2, #0
 8007886:	490c      	ldr	r1, [pc, #48]	; (80078b8 <tcpip_init+0x8c>)
 8007888:	480c      	ldr	r0, [pc, #48]	; (80078bc <tcpip_init+0x90>)
 800788a:	f00e fd1f 	bl	80162cc <sys_thread_new>
}
 800788e:	bf00      	nop
 8007890:	3708      	adds	r7, #8
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}
 8007896:	bf00      	nop
 8007898:	20016970 	.word	0x20016970
 800789c:	20016974 	.word	0x20016974
 80078a0:	20016978 	.word	0x20016978
 80078a4:	08017c00 	.word	0x08017c00
 80078a8:	08017c88 	.word	0x08017c88
 80078ac:	08017c50 	.word	0x08017c50
 80078b0:	2001697c 	.word	0x2001697c
 80078b4:	08017cac 	.word	0x08017cac
 80078b8:	080075e9 	.word	0x080075e9
 80078bc:	08017cd0 	.word	0x08017cd0

080078c0 <msg_generate_packet_id>:
 * @param client MQTT client
 * @return New packet identifier, range 1 to 65535
 */
static u16_t
msg_generate_packet_id(mqtt_client_t *client)
{
 80078c0:	b480      	push	{r7}
 80078c2:	b083      	sub	sp, #12
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  client->pkt_id_seq++;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	88db      	ldrh	r3, [r3, #6]
 80078cc:	3301      	adds	r3, #1
 80078ce:	b29a      	uxth	r2, r3
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	80da      	strh	r2, [r3, #6]
  if (client->pkt_id_seq == 0) {
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	88db      	ldrh	r3, [r3, #6]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d105      	bne.n	80078e8 <msg_generate_packet_id+0x28>
    client->pkt_id_seq++;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	88db      	ldrh	r3, [r3, #6]
 80078e0:	3301      	adds	r3, #1
 80078e2:	b29a      	uxth	r2, r3
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	80da      	strh	r2, [r3, #6]
  }
  return client->pkt_id_seq;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	88db      	ldrh	r3, [r3, #6]
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	370c      	adds	r7, #12
 80078f0:	46bd      	mov	sp, r7
 80078f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f6:	4770      	bx	lr

080078f8 <mqtt_ringbuf_put>:
/* Output ring buffer */

/** Add single item to ring buffer */
static void
mqtt_ringbuf_put(struct mqtt_ringbuf_t *rb, u8_t item)
{
 80078f8:	b480      	push	{r7}
 80078fa:	b083      	sub	sp, #12
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
 8007900:	460b      	mov	r3, r1
 8007902:	70fb      	strb	r3, [r7, #3]
  rb->buf[rb->put] = item;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	881b      	ldrh	r3, [r3, #0]
 8007908:	461a      	mov	r2, r3
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	4413      	add	r3, r2
 800790e:	78fa      	ldrb	r2, [r7, #3]
 8007910:	711a      	strb	r2, [r3, #4]
  rb->put++;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	881b      	ldrh	r3, [r3, #0]
 8007916:	3301      	adds	r3, #1
 8007918:	b29a      	uxth	r2, r3
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	801a      	strh	r2, [r3, #0]
  if (rb->put >= MQTT_OUTPUT_RINGBUF_SIZE) {
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	881b      	ldrh	r3, [r3, #0]
 8007922:	2bff      	cmp	r3, #255	; 0xff
 8007924:	d902      	bls.n	800792c <mqtt_ringbuf_put+0x34>
    rb->put = 0;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2200      	movs	r2, #0
 800792a:	801a      	strh	r2, [r3, #0]
  }
}
 800792c:	bf00      	nop
 800792e:	370c      	adds	r7, #12
 8007930:	46bd      	mov	sp, r7
 8007932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007936:	4770      	bx	lr

08007938 <mqtt_ringbuf_get_ptr>:

/** Return pointer to ring buffer get position */
static u8_t *
mqtt_ringbuf_get_ptr(struct mqtt_ringbuf_t *rb)
{
 8007938:	b480      	push	{r7}
 800793a:	b083      	sub	sp, #12
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
  return &rb->buf[rb->get];
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	885b      	ldrh	r3, [r3, #2]
 8007944:	461a      	mov	r2, r3
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	4413      	add	r3, r2
 800794a:	3304      	adds	r3, #4
}
 800794c:	4618      	mov	r0, r3
 800794e:	370c      	adds	r7, #12
 8007950:	46bd      	mov	sp, r7
 8007952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007956:	4770      	bx	lr

08007958 <mqtt_ringbuf_advance_get_idx>:

static void
mqtt_ringbuf_advance_get_idx(struct mqtt_ringbuf_t *rb, u16_t len)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b082      	sub	sp, #8
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
 8007960:	460b      	mov	r3, r1
 8007962:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("mqtt_ringbuf_advance_get_idx: len < MQTT_OUTPUT_RINGBUF_SIZE", len < MQTT_OUTPUT_RINGBUF_SIZE);
 8007964:	887b      	ldrh	r3, [r7, #2]
 8007966:	2bff      	cmp	r3, #255	; 0xff
 8007968:	d905      	bls.n	8007976 <mqtt_ringbuf_advance_get_idx+0x1e>
 800796a:	4b0e      	ldr	r3, [pc, #56]	; (80079a4 <mqtt_ringbuf_advance_get_idx+0x4c>)
 800796c:	22cb      	movs	r2, #203	; 0xcb
 800796e:	490e      	ldr	r1, [pc, #56]	; (80079a8 <mqtt_ringbuf_advance_get_idx+0x50>)
 8007970:	480e      	ldr	r0, [pc, #56]	; (80079ac <mqtt_ringbuf_advance_get_idx+0x54>)
 8007972:	f00e fd4d 	bl	8016410 <iprintf>

  rb->get += len;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	885a      	ldrh	r2, [r3, #2]
 800797a:	887b      	ldrh	r3, [r7, #2]
 800797c:	4413      	add	r3, r2
 800797e:	b29a      	uxth	r2, r3
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	805a      	strh	r2, [r3, #2]
  if (rb->get >= MQTT_OUTPUT_RINGBUF_SIZE) {
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	885b      	ldrh	r3, [r3, #2]
 8007988:	2bff      	cmp	r3, #255	; 0xff
 800798a:	d906      	bls.n	800799a <mqtt_ringbuf_advance_get_idx+0x42>
    rb->get = rb->get - MQTT_OUTPUT_RINGBUF_SIZE;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	885b      	ldrh	r3, [r3, #2]
 8007990:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8007994:	b29a      	uxth	r2, r3
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	805a      	strh	r2, [r3, #2]
  }
}
 800799a:	bf00      	nop
 800799c:	3708      	adds	r7, #8
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}
 80079a2:	bf00      	nop
 80079a4:	08017ce0 	.word	0x08017ce0
 80079a8:	08017d18 	.word	0x08017d18
 80079ac:	08017d58 	.word	0x08017d58

080079b0 <mqtt_ringbuf_len>:

/** Return number of bytes in ring buffer */
static u16_t
mqtt_ringbuf_len(struct mqtt_ringbuf_t *rb)
{
 80079b0:	b480      	push	{r7}
 80079b2:	b085      	sub	sp, #20
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
  u32_t len = rb->put - rb->get;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	881b      	ldrh	r3, [r3, #0]
 80079bc:	461a      	mov	r2, r3
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	885b      	ldrh	r3, [r3, #2]
 80079c2:	1ad3      	subs	r3, r2, r3
 80079c4:	60fb      	str	r3, [r7, #12]
  if (len > 0xFFFF) {
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079cc:	d303      	bcc.n	80079d6 <mqtt_ringbuf_len+0x26>
    len += MQTT_OUTPUT_RINGBUF_SIZE;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80079d4:	60fb      	str	r3, [r7, #12]
  }
  return (u16_t)len;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	b29b      	uxth	r3, r3
}
 80079da:	4618      	mov	r0, r3
 80079dc:	3714      	adds	r7, #20
 80079de:	46bd      	mov	sp, r7
 80079e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e4:	4770      	bx	lr
	...

080079e8 <mqtt_output_send>:
 * @param rb Output ring buffer
 * @param tpcb TCP connection handle
 */
static void
mqtt_output_send(struct mqtt_ringbuf_t *rb, struct altcp_pcb *tpcb)
{
 80079e8:	b590      	push	{r4, r7, lr}
 80079ea:	b085      	sub	sp, #20
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
 80079f0:	6039      	str	r1, [r7, #0]
  err_t err;
  u8_t wrap = 0;
 80079f2:	2300      	movs	r3, #0
 80079f4:	73bb      	strb	r3, [r7, #14]
  u16_t ringbuf_lin_len = mqtt_ringbuf_linear_read_length(rb);
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f7ff ffda 	bl	80079b0 <mqtt_ringbuf_len>
 80079fc:	4603      	mov	r3, r0
 80079fe:	461a      	mov	r2, r3
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	885b      	ldrh	r3, [r3, #2]
 8007a04:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8007a08:	429a      	cmp	r2, r3
 8007a0a:	da04      	bge.n	8007a16 <mqtt_output_send+0x2e>
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f7ff ffcf 	bl	80079b0 <mqtt_ringbuf_len>
 8007a12:	4603      	mov	r3, r0
 8007a14:	e004      	b.n	8007a20 <mqtt_output_send+0x38>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	885b      	ldrh	r3, [r3, #2]
 8007a1a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8007a1e:	b29b      	uxth	r3, r3
 8007a20:	817b      	strh	r3, [r7, #10]
  u16_t send_len = altcp_sndbuf(tpcb);
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8007a28:	81bb      	strh	r3, [r7, #12]
  LWIP_ASSERT("mqtt_output_send: tpcb != NULL", tpcb != NULL);
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d105      	bne.n	8007a3c <mqtt_output_send+0x54>
 8007a30:	4b44      	ldr	r3, [pc, #272]	; (8007b44 <mqtt_output_send+0x15c>)
 8007a32:	22f0      	movs	r2, #240	; 0xf0
 8007a34:	4944      	ldr	r1, [pc, #272]	; (8007b48 <mqtt_output_send+0x160>)
 8007a36:	4845      	ldr	r0, [pc, #276]	; (8007b4c <mqtt_output_send+0x164>)
 8007a38:	f00e fcea 	bl	8016410 <iprintf>

  if (send_len == 0 || ringbuf_lin_len == 0) {
 8007a3c:	89bb      	ldrh	r3, [r7, #12]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d07c      	beq.n	8007b3c <mqtt_output_send+0x154>
 8007a42:	897b      	ldrh	r3, [r7, #10]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d079      	beq.n	8007b3c <mqtt_output_send+0x154>
  }

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_output_send: tcp_sndbuf: %d bytes, ringbuf_linear_available: %d, get %d, put %d\n",
                                 send_len, ringbuf_lin_len, rb->get, rb->put));

  if (send_len > ringbuf_lin_len) {
 8007a48:	89ba      	ldrh	r2, [r7, #12]
 8007a4a:	897b      	ldrh	r3, [r7, #10]
 8007a4c:	429a      	cmp	r2, r3
 8007a4e:	d90d      	bls.n	8007a6c <mqtt_output_send+0x84>
    /* Space in TCP output buffer is larger than available in ring buffer linear portion */
    send_len = ringbuf_lin_len;
 8007a50:	897b      	ldrh	r3, [r7, #10]
 8007a52:	81bb      	strh	r3, [r7, #12]
    /* Wrap around if more data in ring buffer after linear portion */
    wrap = (mqtt_ringbuf_len(rb) > ringbuf_lin_len);
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f7ff ffab 	bl	80079b0 <mqtt_ringbuf_len>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	461a      	mov	r2, r3
 8007a5e:	897b      	ldrh	r3, [r7, #10]
 8007a60:	4293      	cmp	r3, r2
 8007a62:	bf34      	ite	cc
 8007a64:	2301      	movcc	r3, #1
 8007a66:	2300      	movcs	r3, #0
 8007a68:	b2db      	uxtb	r3, r3
 8007a6a:	73bb      	strb	r3, [r7, #14]
  }
  err = altcp_write(tpcb, mqtt_ringbuf_get_ptr(rb), send_len, TCP_WRITE_FLAG_COPY | (wrap ? TCP_WRITE_FLAG_MORE : 0));
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f7ff ff63 	bl	8007938 <mqtt_ringbuf_get_ptr>
 8007a72:	4601      	mov	r1, r0
 8007a74:	7bbb      	ldrb	r3, [r7, #14]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d001      	beq.n	8007a7e <mqtt_output_send+0x96>
 8007a7a:	2303      	movs	r3, #3
 8007a7c:	e000      	b.n	8007a80 <mqtt_output_send+0x98>
 8007a7e:	2301      	movs	r3, #1
 8007a80:	89ba      	ldrh	r2, [r7, #12]
 8007a82:	6838      	ldr	r0, [r7, #0]
 8007a84:	f007 fe24 	bl	800f6d0 <tcp_write>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	73fb      	strb	r3, [r7, #15]
  if ((err == ERR_OK) && wrap) {
 8007a8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d146      	bne.n	8007b22 <mqtt_output_send+0x13a>
 8007a94:	7bbb      	ldrb	r3, [r7, #14]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d043      	beq.n	8007b22 <mqtt_output_send+0x13a>
    mqtt_ringbuf_advance_get_idx(rb, send_len);
 8007a9a:	89bb      	ldrh	r3, [r7, #12]
 8007a9c:	4619      	mov	r1, r3
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f7ff ff5a 	bl	8007958 <mqtt_ringbuf_advance_get_idx>
    /* Use the lesser one of ring buffer linear length and TCP send buffer size */
    send_len = LWIP_MIN(altcp_sndbuf(tpcb), mqtt_ringbuf_linear_read_length(rb));
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8007aaa:	461c      	mov	r4, r3
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f7ff ff7f 	bl	80079b0 <mqtt_ringbuf_len>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	885b      	ldrh	r3, [r3, #2]
 8007aba:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8007abe:	429a      	cmp	r2, r3
 8007ac0:	da04      	bge.n	8007acc <mqtt_output_send+0xe4>
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f7ff ff74 	bl	80079b0 <mqtt_ringbuf_len>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	e003      	b.n	8007ad4 <mqtt_output_send+0xec>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	885b      	ldrh	r3, [r3, #2]
 8007ad0:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8007ad4:	42a3      	cmp	r3, r4
 8007ad6:	dd03      	ble.n	8007ae0 <mqtt_output_send+0xf8>
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8007ade:	e014      	b.n	8007b0a <mqtt_output_send+0x122>
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f7ff ff65 	bl	80079b0 <mqtt_ringbuf_len>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	461a      	mov	r2, r3
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	885b      	ldrh	r3, [r3, #2]
 8007aee:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8007af2:	429a      	cmp	r2, r3
 8007af4:	da04      	bge.n	8007b00 <mqtt_output_send+0x118>
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f7ff ff5a 	bl	80079b0 <mqtt_ringbuf_len>
 8007afc:	4603      	mov	r3, r0
 8007afe:	e004      	b.n	8007b0a <mqtt_output_send+0x122>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	885b      	ldrh	r3, [r3, #2]
 8007b04:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8007b08:	b29b      	uxth	r3, r3
 8007b0a:	81bb      	strh	r3, [r7, #12]
    err = altcp_write(tpcb, mqtt_ringbuf_get_ptr(rb), send_len, TCP_WRITE_FLAG_COPY);
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f7ff ff13 	bl	8007938 <mqtt_ringbuf_get_ptr>
 8007b12:	4601      	mov	r1, r0
 8007b14:	89ba      	ldrh	r2, [r7, #12]
 8007b16:	2301      	movs	r3, #1
 8007b18:	6838      	ldr	r0, [r7, #0]
 8007b1a:	f007 fdd9 	bl	800f6d0 <tcp_write>
 8007b1e:	4603      	mov	r3, r0
 8007b20:	73fb      	strb	r3, [r7, #15]
  }

  if (err == ERR_OK) {
 8007b22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d109      	bne.n	8007b3e <mqtt_output_send+0x156>
    mqtt_ringbuf_advance_get_idx(rb, send_len);
 8007b2a:	89bb      	ldrh	r3, [r7, #12]
 8007b2c:	4619      	mov	r1, r3
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f7ff ff12 	bl	8007958 <mqtt_ringbuf_advance_get_idx>
    /* Flush */
    altcp_output(tpcb);
 8007b34:	6838      	ldr	r0, [r7, #0]
 8007b36:	f008 fbb5 	bl	80102a4 <tcp_output>
 8007b3a:	e000      	b.n	8007b3e <mqtt_output_send+0x156>
    return;
 8007b3c:	bf00      	nop
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_output_send: Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
  }
}
 8007b3e:	3714      	adds	r7, #20
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd90      	pop	{r4, r7, pc}
 8007b44:	08017ce0 	.word	0x08017ce0
 8007b48:	08017d80 	.word	0x08017d80
 8007b4c:	08017d58 	.word	0x08017d58

08007b50 <mqtt_create_request>:
 * @param arg Parameter following callback
 * @return Request or NULL if failed to create
 */
static struct mqtt_request_t *
mqtt_create_request(struct mqtt_request_t *r_objs, size_t r_objs_len, u16_t pkt_id, mqtt_request_cb_t cb, void *arg)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b086      	sub	sp, #24
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	60f8      	str	r0, [r7, #12]
 8007b58:	60b9      	str	r1, [r7, #8]
 8007b5a:	603b      	str	r3, [r7, #0]
 8007b5c:	4613      	mov	r3, r2
 8007b5e:	80fb      	strh	r3, [r7, #6]
  struct mqtt_request_t *r = NULL;
 8007b60:	2300      	movs	r3, #0
 8007b62:	617b      	str	r3, [r7, #20]
  u8_t n;
  LWIP_ASSERT("mqtt_create_request: r_objs != NULL", r_objs != NULL);
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d106      	bne.n	8007b78 <mqtt_create_request+0x28>
 8007b6a:	4b19      	ldr	r3, [pc, #100]	; (8007bd0 <mqtt_create_request+0x80>)
 8007b6c:	f240 1223 	movw	r2, #291	; 0x123
 8007b70:	4918      	ldr	r1, [pc, #96]	; (8007bd4 <mqtt_create_request+0x84>)
 8007b72:	4819      	ldr	r0, [pc, #100]	; (8007bd8 <mqtt_create_request+0x88>)
 8007b74:	f00e fc4c 	bl	8016410 <iprintf>
  for (n = 0; n < r_objs_len; n++) {
 8007b78:	2300      	movs	r3, #0
 8007b7a:	74fb      	strb	r3, [r7, #19]
 8007b7c:	e01f      	b.n	8007bbe <mqtt_create_request+0x6e>
    /* Item point to itself if not in use */
    if (r_objs[n].next == &r_objs[n]) {
 8007b7e:	7cfb      	ldrb	r3, [r7, #19]
 8007b80:	011b      	lsls	r3, r3, #4
 8007b82:	68fa      	ldr	r2, [r7, #12]
 8007b84:	4413      	add	r3, r2
 8007b86:	681a      	ldr	r2, [r3, #0]
 8007b88:	7cfb      	ldrb	r3, [r7, #19]
 8007b8a:	011b      	lsls	r3, r3, #4
 8007b8c:	68f9      	ldr	r1, [r7, #12]
 8007b8e:	440b      	add	r3, r1
 8007b90:	429a      	cmp	r2, r3
 8007b92:	d111      	bne.n	8007bb8 <mqtt_create_request+0x68>
      r = &r_objs[n];
 8007b94:	7cfb      	ldrb	r3, [r7, #19]
 8007b96:	011b      	lsls	r3, r3, #4
 8007b98:	68fa      	ldr	r2, [r7, #12]
 8007b9a:	4413      	add	r3, r2
 8007b9c:	617b      	str	r3, [r7, #20]
      r->next = NULL;
 8007b9e:	697b      	ldr	r3, [r7, #20]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	601a      	str	r2, [r3, #0]
      r->cb = cb;
 8007ba4:	697b      	ldr	r3, [r7, #20]
 8007ba6:	683a      	ldr	r2, [r7, #0]
 8007ba8:	605a      	str	r2, [r3, #4]
      r->arg = arg;
 8007baa:	697b      	ldr	r3, [r7, #20]
 8007bac:	6a3a      	ldr	r2, [r7, #32]
 8007bae:	609a      	str	r2, [r3, #8]
      r->pkt_id = pkt_id;
 8007bb0:	697b      	ldr	r3, [r7, #20]
 8007bb2:	88fa      	ldrh	r2, [r7, #6]
 8007bb4:	819a      	strh	r2, [r3, #12]
      break;
 8007bb6:	e006      	b.n	8007bc6 <mqtt_create_request+0x76>
  for (n = 0; n < r_objs_len; n++) {
 8007bb8:	7cfb      	ldrb	r3, [r7, #19]
 8007bba:	3301      	adds	r3, #1
 8007bbc:	74fb      	strb	r3, [r7, #19]
 8007bbe:	7cfb      	ldrb	r3, [r7, #19]
 8007bc0:	68ba      	ldr	r2, [r7, #8]
 8007bc2:	429a      	cmp	r2, r3
 8007bc4:	d8db      	bhi.n	8007b7e <mqtt_create_request+0x2e>
    }
  }
  return r;
 8007bc6:	697b      	ldr	r3, [r7, #20]
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	3718      	adds	r7, #24
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}
 8007bd0:	08017ce0 	.word	0x08017ce0
 8007bd4:	08017da0 	.word	0x08017da0
 8007bd8:	08017d58 	.word	0x08017d58

08007bdc <mqtt_append_request>:
 * @param tail Pointer to request queue tail pointer
 * @param r Request to append
 */
static void
mqtt_append_request(struct mqtt_request_t **tail, struct mqtt_request_t *r)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b086      	sub	sp, #24
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
 8007be4:	6039      	str	r1, [r7, #0]
  struct mqtt_request_t *head = NULL;
 8007be6:	2300      	movs	r3, #0
 8007be8:	617b      	str	r3, [r7, #20]
  s16_t time_before = 0;
 8007bea:	2300      	movs	r3, #0
 8007bec:	827b      	strh	r3, [r7, #18]
  struct mqtt_request_t *iter;

  LWIP_ASSERT("mqtt_append_request: tail != NULL", tail != NULL);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d106      	bne.n	8007c02 <mqtt_append_request+0x26>
 8007bf4:	4b1b      	ldr	r3, [pc, #108]	; (8007c64 <mqtt_append_request+0x88>)
 8007bf6:	f240 123f 	movw	r2, #319	; 0x13f
 8007bfa:	491b      	ldr	r1, [pc, #108]	; (8007c68 <mqtt_append_request+0x8c>)
 8007bfc:	481b      	ldr	r0, [pc, #108]	; (8007c6c <mqtt_append_request+0x90>)
 8007bfe:	f00e fc07 	bl	8016410 <iprintf>

  /* Iterate trough queue to find head, and count total timeout time */
  for (iter = *tail; iter != NULL; iter = iter->next) {
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	60fb      	str	r3, [r7, #12]
 8007c08:	e00a      	b.n	8007c20 <mqtt_append_request+0x44>
    time_before += iter->timeout_diff;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	89da      	ldrh	r2, [r3, #14]
 8007c0e:	8a7b      	ldrh	r3, [r7, #18]
 8007c10:	4413      	add	r3, r2
 8007c12:	b29b      	uxth	r3, r3
 8007c14:	827b      	strh	r3, [r7, #18]
    head = iter;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	617b      	str	r3, [r7, #20]
  for (iter = *tail; iter != NULL; iter = iter->next) {
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	60fb      	str	r3, [r7, #12]
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d1f1      	bne.n	8007c0a <mqtt_append_request+0x2e>
  }

  LWIP_ASSERT("mqtt_append_request: time_before <= MQTT_REQ_TIMEOUT", time_before <= MQTT_REQ_TIMEOUT);
 8007c26:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007c2a:	2b1e      	cmp	r3, #30
 8007c2c:	dd06      	ble.n	8007c3c <mqtt_append_request+0x60>
 8007c2e:	4b0d      	ldr	r3, [pc, #52]	; (8007c64 <mqtt_append_request+0x88>)
 8007c30:	f240 1247 	movw	r2, #327	; 0x147
 8007c34:	490e      	ldr	r1, [pc, #56]	; (8007c70 <mqtt_append_request+0x94>)
 8007c36:	480d      	ldr	r0, [pc, #52]	; (8007c6c <mqtt_append_request+0x90>)
 8007c38:	f00e fbea 	bl	8016410 <iprintf>
  r->timeout_diff = MQTT_REQ_TIMEOUT - time_before;
 8007c3c:	8a7b      	ldrh	r3, [r7, #18]
 8007c3e:	f1c3 031e 	rsb	r3, r3, #30
 8007c42:	b29a      	uxth	r2, r3
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	81da      	strh	r2, [r3, #14]
  if (head == NULL) {
 8007c48:	697b      	ldr	r3, [r7, #20]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d103      	bne.n	8007c56 <mqtt_append_request+0x7a>
    *tail = r;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	683a      	ldr	r2, [r7, #0]
 8007c52:	601a      	str	r2, [r3, #0]
  } else {
    head->next = r;
  }
}
 8007c54:	e002      	b.n	8007c5c <mqtt_append_request+0x80>
    head->next = r;
 8007c56:	697b      	ldr	r3, [r7, #20]
 8007c58:	683a      	ldr	r2, [r7, #0]
 8007c5a:	601a      	str	r2, [r3, #0]
}
 8007c5c:	bf00      	nop
 8007c5e:	3718      	adds	r7, #24
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}
 8007c64:	08017ce0 	.word	0x08017ce0
 8007c68:	08017dc4 	.word	0x08017dc4
 8007c6c:	08017d58 	.word	0x08017d58
 8007c70:	08017de8 	.word	0x08017de8

08007c74 <mqtt_delete_request>:
 * Delete request item
 * @param r Request item to delete
 */
static void
mqtt_delete_request(struct mqtt_request_t *r)
{
 8007c74:	b480      	push	{r7}
 8007c76:	b083      	sub	sp, #12
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
  if (r != NULL) {
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d002      	beq.n	8007c88 <mqtt_delete_request+0x14>
    r->next = r;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	687a      	ldr	r2, [r7, #4]
 8007c86:	601a      	str	r2, [r3, #0]
  }
}
 8007c88:	bf00      	nop
 8007c8a:	370c      	adds	r7, #12
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c92:	4770      	bx	lr

08007c94 <mqtt_take_request>:
 * @param pkt_id Packet identifier of request to take
 * @return Request item if found, NULL if not
 */
static struct mqtt_request_t *
mqtt_take_request(struct mqtt_request_t **tail, u16_t pkt_id)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b084      	sub	sp, #16
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
 8007c9c:	460b      	mov	r3, r1
 8007c9e:	807b      	strh	r3, [r7, #2]
  struct mqtt_request_t *iter = NULL, *prev = NULL;
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	60fb      	str	r3, [r7, #12]
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	60bb      	str	r3, [r7, #8]
  LWIP_ASSERT("mqtt_take_request: tail != NULL", tail != NULL);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d106      	bne.n	8007cbc <mqtt_take_request+0x28>
 8007cae:	4b1f      	ldr	r3, [pc, #124]	; (8007d2c <mqtt_take_request+0x98>)
 8007cb0:	f240 1267 	movw	r2, #359	; 0x167
 8007cb4:	491e      	ldr	r1, [pc, #120]	; (8007d30 <mqtt_take_request+0x9c>)
 8007cb6:	481f      	ldr	r0, [pc, #124]	; (8007d34 <mqtt_take_request+0xa0>)
 8007cb8:	f00e fbaa 	bl	8016410 <iprintf>
  /* Search all request for pkt_id */
  for (iter = *tail; iter != NULL; iter = iter->next) {
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	60fb      	str	r3, [r7, #12]
 8007cc2:	e009      	b.n	8007cd8 <mqtt_take_request+0x44>
    if (iter->pkt_id == pkt_id) {
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	899b      	ldrh	r3, [r3, #12]
 8007cc8:	887a      	ldrh	r2, [r7, #2]
 8007cca:	429a      	cmp	r2, r3
 8007ccc:	d008      	beq.n	8007ce0 <mqtt_take_request+0x4c>
      break;
    }
    prev = iter;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	60bb      	str	r3, [r7, #8]
  for (iter = *tail; iter != NULL; iter = iter->next) {
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	60fb      	str	r3, [r7, #12]
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d1f2      	bne.n	8007cc4 <mqtt_take_request+0x30>
 8007cde:	e000      	b.n	8007ce2 <mqtt_take_request+0x4e>
      break;
 8007ce0:	bf00      	nop
  }

  /* If request was found */
  if (iter != NULL) {
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d01c      	beq.n	8007d22 <mqtt_take_request+0x8e>
    /* unchain */
    if (prev == NULL) {
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d104      	bne.n	8007cf8 <mqtt_take_request+0x64>
      *tail = iter->next;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681a      	ldr	r2, [r3, #0]
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	601a      	str	r2, [r3, #0]
 8007cf6:	e003      	b.n	8007d00 <mqtt_take_request+0x6c>
    } else {
      prev->next = iter->next;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681a      	ldr	r2, [r3, #0]
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	601a      	str	r2, [r3, #0]
    }
    /* If exists, add remaining timeout time for the request to next */
    if (iter->next != NULL) {
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d009      	beq.n	8007d1c <mqtt_take_request+0x88>
      iter->next->timeout_diff += iter->timeout_diff;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	89d9      	ldrh	r1, [r3, #14]
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	89da      	ldrh	r2, [r3, #14]
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	440a      	add	r2, r1
 8007d18:	b292      	uxth	r2, r2
 8007d1a:	81da      	strh	r2, [r3, #14]
    }
    iter->next = NULL;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	601a      	str	r2, [r3, #0]
  }
  return iter;
 8007d22:	68fb      	ldr	r3, [r7, #12]
}
 8007d24:	4618      	mov	r0, r3
 8007d26:	3710      	adds	r7, #16
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}
 8007d2c:	08017ce0 	.word	0x08017ce0
 8007d30:	08017e20 	.word	0x08017e20
 8007d34:	08017d58 	.word	0x08017d58

08007d38 <mqtt_request_time_elapsed>:
 * @param tail Pointer to request queue tail pointer
 * @param t Time since last call in seconds
 */
static void
mqtt_request_time_elapsed(struct mqtt_request_t **tail, u8_t t)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b084      	sub	sp, #16
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
 8007d40:	460b      	mov	r3, r1
 8007d42:	70fb      	strb	r3, [r7, #3]
  struct mqtt_request_t *r;
  LWIP_ASSERT("mqtt_request_time_elapsed: tail != NULL", tail != NULL);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d106      	bne.n	8007d58 <mqtt_request_time_elapsed+0x20>
 8007d4a:	4b21      	ldr	r3, [pc, #132]	; (8007dd0 <mqtt_request_time_elapsed+0x98>)
 8007d4c:	f44f 72c5 	mov.w	r2, #394	; 0x18a
 8007d50:	4920      	ldr	r1, [pc, #128]	; (8007dd4 <mqtt_request_time_elapsed+0x9c>)
 8007d52:	4821      	ldr	r0, [pc, #132]	; (8007dd8 <mqtt_request_time_elapsed+0xa0>)
 8007d54:	f00e fb5c 	bl	8016410 <iprintf>
  r = *tail;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	60fb      	str	r3, [r7, #12]
  while (t > 0 && r != NULL) {
 8007d5e:	e02c      	b.n	8007dba <mqtt_request_time_elapsed+0x82>
    if (t >= r->timeout_diff) {
 8007d60:	78fb      	ldrb	r3, [r7, #3]
 8007d62:	b29a      	uxth	r2, r3
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	89db      	ldrh	r3, [r3, #14]
 8007d68:	429a      	cmp	r2, r3
 8007d6a:	d31c      	bcc.n	8007da6 <mqtt_request_time_elapsed+0x6e>
      t -= (u8_t)r->timeout_diff;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	89db      	ldrh	r3, [r3, #14]
 8007d70:	b2db      	uxtb	r3, r3
 8007d72:	78fa      	ldrb	r2, [r7, #3]
 8007d74:	1ad3      	subs	r3, r2, r3
 8007d76:	70fb      	strb	r3, [r7, #3]
      /* Unchain */
      *tail = r->next;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681a      	ldr	r2, [r3, #0]
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	601a      	str	r2, [r3, #0]
      /* Notify upper layer about timeout */
      if (r->cb != NULL) {
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	685b      	ldr	r3, [r3, #4]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d007      	beq.n	8007d98 <mqtt_request_time_elapsed+0x60>
        r->cb(r->arg, ERR_TIMEOUT);
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	685b      	ldr	r3, [r3, #4]
 8007d8c:	68fa      	ldr	r2, [r7, #12]
 8007d8e:	6892      	ldr	r2, [r2, #8]
 8007d90:	f06f 0102 	mvn.w	r1, #2
 8007d94:	4610      	mov	r0, r2
 8007d96:	4798      	blx	r3
      }
      mqtt_delete_request(r);
 8007d98:	68f8      	ldr	r0, [r7, #12]
 8007d9a:	f7ff ff6b 	bl	8007c74 <mqtt_delete_request>
      /* Tail might be be modified in callback, so re-read it in every iteration */
      r = *(struct mqtt_request_t *const volatile *)tail;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	60fb      	str	r3, [r7, #12]
 8007da4:	e009      	b.n	8007dba <mqtt_request_time_elapsed+0x82>
    } else {
      r->timeout_diff -= t;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	89da      	ldrh	r2, [r3, #14]
 8007daa:	78fb      	ldrb	r3, [r7, #3]
 8007dac:	b29b      	uxth	r3, r3
 8007dae:	1ad3      	subs	r3, r2, r3
 8007db0:	b29a      	uxth	r2, r3
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	81da      	strh	r2, [r3, #14]
      t = 0;
 8007db6:	2300      	movs	r3, #0
 8007db8:	70fb      	strb	r3, [r7, #3]
  while (t > 0 && r != NULL) {
 8007dba:	78fb      	ldrb	r3, [r7, #3]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d002      	beq.n	8007dc6 <mqtt_request_time_elapsed+0x8e>
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d1cc      	bne.n	8007d60 <mqtt_request_time_elapsed+0x28>
    }
  }
}
 8007dc6:	bf00      	nop
 8007dc8:	3710      	adds	r7, #16
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}
 8007dce:	bf00      	nop
 8007dd0:	08017ce0 	.word	0x08017ce0
 8007dd4:	08017e40 	.word	0x08017e40
 8007dd8:	08017d58 	.word	0x08017d58

08007ddc <mqtt_clear_requests>:
 * Free all request items
 * @param tail Pointer to request queue tail pointer
 */
static void
mqtt_clear_requests(struct mqtt_request_t **tail)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b084      	sub	sp, #16
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  struct mqtt_request_t *iter, *next;
  LWIP_ASSERT("mqtt_clear_requests: tail != NULL", tail != NULL);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d106      	bne.n	8007df8 <mqtt_clear_requests+0x1c>
 8007dea:	4b0e      	ldr	r3, [pc, #56]	; (8007e24 <mqtt_clear_requests+0x48>)
 8007dec:	f240 12a7 	movw	r2, #423	; 0x1a7
 8007df0:	490d      	ldr	r1, [pc, #52]	; (8007e28 <mqtt_clear_requests+0x4c>)
 8007df2:	480e      	ldr	r0, [pc, #56]	; (8007e2c <mqtt_clear_requests+0x50>)
 8007df4:	f00e fb0c 	bl	8016410 <iprintf>
  for (iter = *tail; iter != NULL; iter = next) {
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	60fb      	str	r3, [r7, #12]
 8007dfe:	e007      	b.n	8007e10 <mqtt_clear_requests+0x34>
    next = iter->next;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	60bb      	str	r3, [r7, #8]
    mqtt_delete_request(iter);
 8007e06:	68f8      	ldr	r0, [r7, #12]
 8007e08:	f7ff ff34 	bl	8007c74 <mqtt_delete_request>
  for (iter = *tail; iter != NULL; iter = next) {
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	60fb      	str	r3, [r7, #12]
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d1f4      	bne.n	8007e00 <mqtt_clear_requests+0x24>
  }
  *tail = NULL;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	601a      	str	r2, [r3, #0]
}
 8007e1c:	bf00      	nop
 8007e1e:	3710      	adds	r7, #16
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}
 8007e24:	08017ce0 	.word	0x08017ce0
 8007e28:	08017e68 	.word	0x08017e68
 8007e2c:	08017d58 	.word	0x08017d58

08007e30 <mqtt_init_requests>:
 * @param r_objs Pointer to request objects
 * @param r_objs_len Number of array entries
 */
static void
mqtt_init_requests(struct mqtt_request_t *r_objs, size_t r_objs_len)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b084      	sub	sp, #16
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
 8007e38:	6039      	str	r1, [r7, #0]
  u8_t n;
  LWIP_ASSERT("mqtt_init_requests: r_objs != NULL", r_objs != NULL);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d106      	bne.n	8007e4e <mqtt_init_requests+0x1e>
 8007e40:	4b0f      	ldr	r3, [pc, #60]	; (8007e80 <mqtt_init_requests+0x50>)
 8007e42:	f240 12b7 	movw	r2, #439	; 0x1b7
 8007e46:	490f      	ldr	r1, [pc, #60]	; (8007e84 <mqtt_init_requests+0x54>)
 8007e48:	480f      	ldr	r0, [pc, #60]	; (8007e88 <mqtt_init_requests+0x58>)
 8007e4a:	f00e fae1 	bl	8016410 <iprintf>
  for (n = 0; n < r_objs_len; n++) {
 8007e4e:	2300      	movs	r3, #0
 8007e50:	73fb      	strb	r3, [r7, #15]
 8007e52:	e00b      	b.n	8007e6c <mqtt_init_requests+0x3c>
    /* Item pointing to itself indicates unused */
    r_objs[n].next = &r_objs[n];
 8007e54:	7bfb      	ldrb	r3, [r7, #15]
 8007e56:	011a      	lsls	r2, r3, #4
 8007e58:	7bfb      	ldrb	r3, [r7, #15]
 8007e5a:	011b      	lsls	r3, r3, #4
 8007e5c:	6879      	ldr	r1, [r7, #4]
 8007e5e:	440b      	add	r3, r1
 8007e60:	6879      	ldr	r1, [r7, #4]
 8007e62:	440a      	add	r2, r1
 8007e64:	601a      	str	r2, [r3, #0]
  for (n = 0; n < r_objs_len; n++) {
 8007e66:	7bfb      	ldrb	r3, [r7, #15]
 8007e68:	3301      	adds	r3, #1
 8007e6a:	73fb      	strb	r3, [r7, #15]
 8007e6c:	7bfb      	ldrb	r3, [r7, #15]
 8007e6e:	683a      	ldr	r2, [r7, #0]
 8007e70:	429a      	cmp	r2, r3
 8007e72:	d8ef      	bhi.n	8007e54 <mqtt_init_requests+0x24>
  }
}
 8007e74:	bf00      	nop
 8007e76:	bf00      	nop
 8007e78:	3710      	adds	r7, #16
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}
 8007e7e:	bf00      	nop
 8007e80:	08017ce0 	.word	0x08017ce0
 8007e84:	08017e8c 	.word	0x08017e8c
 8007e88:	08017d58 	.word	0x08017d58

08007e8c <mqtt_output_append_u8>:
/* Output message build helpers */


static void
mqtt_output_append_u8(struct mqtt_ringbuf_t *rb, u8_t value)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b082      	sub	sp, #8
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
 8007e94:	460b      	mov	r3, r1
 8007e96:	70fb      	strb	r3, [r7, #3]
  mqtt_ringbuf_put(rb, value);
 8007e98:	78fb      	ldrb	r3, [r7, #3]
 8007e9a:	4619      	mov	r1, r3
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f7ff fd2b 	bl	80078f8 <mqtt_ringbuf_put>
}
 8007ea2:	bf00      	nop
 8007ea4:	3708      	adds	r7, #8
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}

08007eaa <mqtt_output_append_u16>:

static
void mqtt_output_append_u16(struct mqtt_ringbuf_t *rb, u16_t value)
{
 8007eaa:	b580      	push	{r7, lr}
 8007eac:	b082      	sub	sp, #8
 8007eae:	af00      	add	r7, sp, #0
 8007eb0:	6078      	str	r0, [r7, #4]
 8007eb2:	460b      	mov	r3, r1
 8007eb4:	807b      	strh	r3, [r7, #2]
  mqtt_ringbuf_put(rb, value >> 8);
 8007eb6:	887b      	ldrh	r3, [r7, #2]
 8007eb8:	0a1b      	lsrs	r3, r3, #8
 8007eba:	b29b      	uxth	r3, r3
 8007ebc:	b2db      	uxtb	r3, r3
 8007ebe:	4619      	mov	r1, r3
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f7ff fd19 	bl	80078f8 <mqtt_ringbuf_put>
  mqtt_ringbuf_put(rb, value & 0xff);
 8007ec6:	887b      	ldrh	r3, [r7, #2]
 8007ec8:	b2db      	uxtb	r3, r3
 8007eca:	4619      	mov	r1, r3
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f7ff fd13 	bl	80078f8 <mqtt_ringbuf_put>
}
 8007ed2:	bf00      	nop
 8007ed4:	3708      	adds	r7, #8
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}

08007eda <mqtt_output_append_buf>:

static void
mqtt_output_append_buf(struct mqtt_ringbuf_t *rb, const void *data, u16_t length)
{
 8007eda:	b580      	push	{r7, lr}
 8007edc:	b086      	sub	sp, #24
 8007ede:	af00      	add	r7, sp, #0
 8007ee0:	60f8      	str	r0, [r7, #12]
 8007ee2:	60b9      	str	r1, [r7, #8]
 8007ee4:	4613      	mov	r3, r2
 8007ee6:	80fb      	strh	r3, [r7, #6]
  u16_t n;
  for (n = 0; n < length; n++) {
 8007ee8:	2300      	movs	r3, #0
 8007eea:	82fb      	strh	r3, [r7, #22]
 8007eec:	e00a      	b.n	8007f04 <mqtt_output_append_buf+0x2a>
    mqtt_ringbuf_put(rb, ((const u8_t *)data)[n]);
 8007eee:	8afb      	ldrh	r3, [r7, #22]
 8007ef0:	68ba      	ldr	r2, [r7, #8]
 8007ef2:	4413      	add	r3, r2
 8007ef4:	781b      	ldrb	r3, [r3, #0]
 8007ef6:	4619      	mov	r1, r3
 8007ef8:	68f8      	ldr	r0, [r7, #12]
 8007efa:	f7ff fcfd 	bl	80078f8 <mqtt_ringbuf_put>
  for (n = 0; n < length; n++) {
 8007efe:	8afb      	ldrh	r3, [r7, #22]
 8007f00:	3301      	adds	r3, #1
 8007f02:	82fb      	strh	r3, [r7, #22]
 8007f04:	8afa      	ldrh	r2, [r7, #22]
 8007f06:	88fb      	ldrh	r3, [r7, #6]
 8007f08:	429a      	cmp	r2, r3
 8007f0a:	d3f0      	bcc.n	8007eee <mqtt_output_append_buf+0x14>
  }
}
 8007f0c:	bf00      	nop
 8007f0e:	bf00      	nop
 8007f10:	3718      	adds	r7, #24
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bd80      	pop	{r7, pc}

08007f16 <mqtt_output_append_string>:

static void
mqtt_output_append_string(struct mqtt_ringbuf_t *rb, const char *str, u16_t length)
{
 8007f16:	b580      	push	{r7, lr}
 8007f18:	b086      	sub	sp, #24
 8007f1a:	af00      	add	r7, sp, #0
 8007f1c:	60f8      	str	r0, [r7, #12]
 8007f1e:	60b9      	str	r1, [r7, #8]
 8007f20:	4613      	mov	r3, r2
 8007f22:	80fb      	strh	r3, [r7, #6]
  u16_t n;
  mqtt_ringbuf_put(rb, length >> 8);
 8007f24:	88fb      	ldrh	r3, [r7, #6]
 8007f26:	0a1b      	lsrs	r3, r3, #8
 8007f28:	b29b      	uxth	r3, r3
 8007f2a:	b2db      	uxtb	r3, r3
 8007f2c:	4619      	mov	r1, r3
 8007f2e:	68f8      	ldr	r0, [r7, #12]
 8007f30:	f7ff fce2 	bl	80078f8 <mqtt_ringbuf_put>
  mqtt_ringbuf_put(rb, length & 0xff);
 8007f34:	88fb      	ldrh	r3, [r7, #6]
 8007f36:	b2db      	uxtb	r3, r3
 8007f38:	4619      	mov	r1, r3
 8007f3a:	68f8      	ldr	r0, [r7, #12]
 8007f3c:	f7ff fcdc 	bl	80078f8 <mqtt_ringbuf_put>
  for (n = 0; n < length; n++) {
 8007f40:	2300      	movs	r3, #0
 8007f42:	82fb      	strh	r3, [r7, #22]
 8007f44:	e00a      	b.n	8007f5c <mqtt_output_append_string+0x46>
    mqtt_ringbuf_put(rb, str[n]);
 8007f46:	8afb      	ldrh	r3, [r7, #22]
 8007f48:	68ba      	ldr	r2, [r7, #8]
 8007f4a:	4413      	add	r3, r2
 8007f4c:	781b      	ldrb	r3, [r3, #0]
 8007f4e:	4619      	mov	r1, r3
 8007f50:	68f8      	ldr	r0, [r7, #12]
 8007f52:	f7ff fcd1 	bl	80078f8 <mqtt_ringbuf_put>
  for (n = 0; n < length; n++) {
 8007f56:	8afb      	ldrh	r3, [r7, #22]
 8007f58:	3301      	adds	r3, #1
 8007f5a:	82fb      	strh	r3, [r7, #22]
 8007f5c:	8afa      	ldrh	r2, [r7, #22]
 8007f5e:	88fb      	ldrh	r3, [r7, #6]
 8007f60:	429a      	cmp	r2, r3
 8007f62:	d3f0      	bcc.n	8007f46 <mqtt_output_append_string+0x30>
  }
}
 8007f64:	bf00      	nop
 8007f66:	bf00      	nop
 8007f68:	3718      	adds	r7, #24
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}

08007f6e <mqtt_output_append_fixed_header>:
 */

static void
mqtt_output_append_fixed_header(struct mqtt_ringbuf_t *rb, u8_t msg_type, u8_t fdup,
                                u8_t fqos, u8_t fretain, u16_t r_length)
{
 8007f6e:	b580      	push	{r7, lr}
 8007f70:	b082      	sub	sp, #8
 8007f72:	af00      	add	r7, sp, #0
 8007f74:	6078      	str	r0, [r7, #4]
 8007f76:	4608      	mov	r0, r1
 8007f78:	4611      	mov	r1, r2
 8007f7a:	461a      	mov	r2, r3
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	70fb      	strb	r3, [r7, #3]
 8007f80:	460b      	mov	r3, r1
 8007f82:	70bb      	strb	r3, [r7, #2]
 8007f84:	4613      	mov	r3, r2
 8007f86:	707b      	strb	r3, [r7, #1]
  /* Start with control byte */
  mqtt_output_append_u8(rb, (((msg_type & 0x0f) << 4) | ((fdup & 1) << 3) | ((fqos & 3) << 1) | (fretain & 1)));
 8007f88:	78fb      	ldrb	r3, [r7, #3]
 8007f8a:	011b      	lsls	r3, r3, #4
 8007f8c:	b25a      	sxtb	r2, r3
 8007f8e:	78bb      	ldrb	r3, [r7, #2]
 8007f90:	00db      	lsls	r3, r3, #3
 8007f92:	b25b      	sxtb	r3, r3
 8007f94:	f003 0308 	and.w	r3, r3, #8
 8007f98:	b25b      	sxtb	r3, r3
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	b25a      	sxtb	r2, r3
 8007f9e:	787b      	ldrb	r3, [r7, #1]
 8007fa0:	005b      	lsls	r3, r3, #1
 8007fa2:	b25b      	sxtb	r3, r3
 8007fa4:	f003 0306 	and.w	r3, r3, #6
 8007fa8:	b25b      	sxtb	r3, r3
 8007faa:	4313      	orrs	r3, r2
 8007fac:	b25a      	sxtb	r2, r3
 8007fae:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8007fb2:	f003 0301 	and.w	r3, r3, #1
 8007fb6:	b25b      	sxtb	r3, r3
 8007fb8:	4313      	orrs	r3, r2
 8007fba:	b25b      	sxtb	r3, r3
 8007fbc:	b2db      	uxtb	r3, r3
 8007fbe:	4619      	mov	r1, r3
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f7ff ff63 	bl	8007e8c <mqtt_output_append_u8>
  /* Encode remaining length field */
  do {
    mqtt_output_append_u8(rb, (r_length & 0x7f) | (r_length >= 128 ? 0x80 : 0));
 8007fc6:	8abb      	ldrh	r3, [r7, #20]
 8007fc8:	b25b      	sxtb	r3, r3
 8007fca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fce:	b25b      	sxtb	r3, r3
 8007fd0:	8aba      	ldrh	r2, [r7, #20]
 8007fd2:	2a7f      	cmp	r2, #127	; 0x7f
 8007fd4:	d902      	bls.n	8007fdc <mqtt_output_append_fixed_header+0x6e>
 8007fd6:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8007fda:	e000      	b.n	8007fde <mqtt_output_append_fixed_header+0x70>
 8007fdc:	2200      	movs	r2, #0
 8007fde:	4313      	orrs	r3, r2
 8007fe0:	b25b      	sxtb	r3, r3
 8007fe2:	b2db      	uxtb	r3, r3
 8007fe4:	4619      	mov	r1, r3
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f7ff ff50 	bl	8007e8c <mqtt_output_append_u8>
    r_length >>= 7;
 8007fec:	8abb      	ldrh	r3, [r7, #20]
 8007fee:	09db      	lsrs	r3, r3, #7
 8007ff0:	82bb      	strh	r3, [r7, #20]
  } while (r_length > 0);
 8007ff2:	8abb      	ldrh	r3, [r7, #20]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d1e6      	bne.n	8007fc6 <mqtt_output_append_fixed_header+0x58>
}
 8007ff8:	bf00      	nop
 8007ffa:	bf00      	nop
 8007ffc:	3708      	adds	r7, #8
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}
	...

08008004 <mqtt_output_check_space>:
 * @param r_length Remaining length after fixed header
 * @return 1 if message will fit, 0 if not enough buffer space
 */
static u8_t
mqtt_output_check_space(struct mqtt_ringbuf_t *rb, u16_t r_length)
{
 8008004:	b590      	push	{r4, r7, lr}
 8008006:	b085      	sub	sp, #20
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
 800800c:	460b      	mov	r3, r1
 800800e:	807b      	strh	r3, [r7, #2]
  /* Start with length of type byte + remaining length */
  u16_t total_len = 1 + r_length;
 8008010:	887b      	ldrh	r3, [r7, #2]
 8008012:	3301      	adds	r3, #1
 8008014:	81fb      	strh	r3, [r7, #14]

  LWIP_ASSERT("mqtt_output_check_space: rb != NULL", rb != NULL);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d106      	bne.n	800802a <mqtt_output_check_space+0x26>
 800801c:	4b0f      	ldr	r3, [pc, #60]	; (800805c <mqtt_output_check_space+0x58>)
 800801e:	f240 2207 	movw	r2, #519	; 0x207
 8008022:	490f      	ldr	r1, [pc, #60]	; (8008060 <mqtt_output_check_space+0x5c>)
 8008024:	480f      	ldr	r0, [pc, #60]	; (8008064 <mqtt_output_check_space+0x60>)
 8008026:	f00e f9f3 	bl	8016410 <iprintf>

  /* Calculate number of required bytes to contain the remaining bytes field and add to total*/
  do {
    total_len++;
 800802a:	89fb      	ldrh	r3, [r7, #14]
 800802c:	3301      	adds	r3, #1
 800802e:	81fb      	strh	r3, [r7, #14]
    r_length >>= 7;
 8008030:	887b      	ldrh	r3, [r7, #2]
 8008032:	09db      	lsrs	r3, r3, #7
 8008034:	807b      	strh	r3, [r7, #2]
  } while (r_length > 0);
 8008036:	887b      	ldrh	r3, [r7, #2]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d1f6      	bne.n	800802a <mqtt_output_check_space+0x26>

  return (total_len <= mqtt_ringbuf_free(rb));
 800803c:	89fc      	ldrh	r4, [r7, #14]
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f7ff fcb6 	bl	80079b0 <mqtt_ringbuf_len>
 8008044:	4603      	mov	r3, r0
 8008046:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800804a:	429c      	cmp	r4, r3
 800804c:	bfd4      	ite	le
 800804e:	2301      	movle	r3, #1
 8008050:	2300      	movgt	r3, #0
 8008052:	b2db      	uxtb	r3, r3
}
 8008054:	4618      	mov	r0, r3
 8008056:	3714      	adds	r7, #20
 8008058:	46bd      	mov	sp, r7
 800805a:	bd90      	pop	{r4, r7, pc}
 800805c:	08017ce0 	.word	0x08017ce0
 8008060:	08017eb0 	.word	0x08017eb0
 8008064:	08017d58 	.word	0x08017d58

08008068 <mqtt_close>:
 * @param client MQTT client
 * @param reason Reason for disconnection
 */
static void
mqtt_close(mqtt_client_t *client, mqtt_connection_status_t reason)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b084      	sub	sp, #16
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
 8008070:	460b      	mov	r3, r1
 8008072:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("mqtt_close: client != NULL", client != NULL);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d106      	bne.n	8008088 <mqtt_close+0x20>
 800807a:	4b27      	ldr	r3, [pc, #156]	; (8008118 <mqtt_close+0xb0>)
 800807c:	f240 221b 	movw	r2, #539	; 0x21b
 8008080:	4926      	ldr	r1, [pc, #152]	; (800811c <mqtt_close+0xb4>)
 8008082:	4827      	ldr	r0, [pc, #156]	; (8008120 <mqtt_close+0xb8>)
 8008084:	f00e f9c4 	bl	8016410 <iprintf>

  /* Bring down TCP connection if not already done */
  if (client->conn != NULL) {
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	68db      	ldr	r3, [r3, #12]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d024      	beq.n	80080da <mqtt_close+0x72>
    err_t res;
    altcp_recv(client->conn, NULL);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	68db      	ldr	r3, [r3, #12]
 8008094:	2100      	movs	r1, #0
 8008096:	4618      	mov	r0, r3
 8008098:	f004 fc02 	bl	800c8a0 <tcp_recv>
    altcp_err(client->conn,  NULL);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	68db      	ldr	r3, [r3, #12]
 80080a0:	2100      	movs	r1, #0
 80080a2:	4618      	mov	r0, r3
 80080a4:	f004 fc40 	bl	800c928 <tcp_err>
    altcp_sent(client->conn, NULL);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	68db      	ldr	r3, [r3, #12]
 80080ac:	2100      	movs	r1, #0
 80080ae:	4618      	mov	r0, r3
 80080b0:	f004 fc18 	bl	800c8e4 <tcp_sent>
    res = altcp_close(client->conn);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	68db      	ldr	r3, [r3, #12]
 80080b8:	4618      	mov	r0, r3
 80080ba:	f003 fa19 	bl	800b4f0 <tcp_close>
 80080be:	4603      	mov	r3, r0
 80080c0:	73fb      	strb	r3, [r7, #15]
    if (res != ERR_OK) {
 80080c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d004      	beq.n	80080d4 <mqtt_close+0x6c>
      altcp_abort(client->conn);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	68db      	ldr	r3, [r3, #12]
 80080ce:	4618      	mov	r0, r3
 80080d0:	f003 faf8 	bl	800b6c4 <tcp_abort>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_close: Close err=%s\n", lwip_strerr(res)));
    }
    client->conn = NULL;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2200      	movs	r2, #0
 80080d8:	60da      	str	r2, [r3, #12]
  }

  /* Remove all pending requests */
  mqtt_clear_requests(&client->pend_req_queue);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	3318      	adds	r3, #24
 80080de:	4618      	mov	r0, r3
 80080e0:	f7ff fe7c 	bl	8007ddc <mqtt_clear_requests>
  /* Stop cyclic timer */
  sys_untimeout(mqtt_cyclic_timer, client);
 80080e4:	6879      	ldr	r1, [r7, #4]
 80080e6:	480f      	ldr	r0, [pc, #60]	; (8008124 <mqtt_close+0xbc>)
 80080e8:	f009 f95a 	bl	80113a0 <sys_untimeout>

  /* Notify upper layer of disconnection if changed state */
  if (client->conn_state != TCP_DISCONNECTED) {
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	7a9b      	ldrb	r3, [r3, #10]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d00d      	beq.n	8008110 <mqtt_close+0xa8>

    client->conn_state = TCP_DISCONNECTED;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2200      	movs	r2, #0
 80080f8:	729a      	strb	r2, [r3, #10]
    if (client->connect_cb != NULL) {
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	695b      	ldr	r3, [r3, #20]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d006      	beq.n	8008110 <mqtt_close+0xa8>
      client->connect_cb(client, client->connect_arg, reason);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	695b      	ldr	r3, [r3, #20]
 8008106:	687a      	ldr	r2, [r7, #4]
 8008108:	6911      	ldr	r1, [r2, #16]
 800810a:	887a      	ldrh	r2, [r7, #2]
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	4798      	blx	r3
    }
  }
}
 8008110:	bf00      	nop
 8008112:	3710      	adds	r7, #16
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}
 8008118:	08017ce0 	.word	0x08017ce0
 800811c:	08017ed4 	.word	0x08017ed4
 8008120:	08017d58 	.word	0x08017d58
 8008124:	08008129 	.word	0x08008129

08008128 <mqtt_cyclic_timer>:
 * Interval timer, called every MQTT_CYCLIC_TIMER_INTERVAL seconds in MQTT_CONNECTING and MQTT_CONNECTED states
 * @param arg MQTT client
 */
static void
mqtt_cyclic_timer(void *arg)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b086      	sub	sp, #24
 800812c:	af02      	add	r7, sp, #8
 800812e:	6078      	str	r0, [r7, #4]
  u8_t restart_timer = 1;
 8008130:	2301      	movs	r3, #1
 8008132:	73fb      	strb	r3, [r7, #15]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	60bb      	str	r3, [r7, #8]
  LWIP_ASSERT("mqtt_cyclic_timer: client != NULL", client != NULL);
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d106      	bne.n	800814c <mqtt_cyclic_timer+0x24>
 800813e:	4b42      	ldr	r3, [pc, #264]	; (8008248 <mqtt_cyclic_timer+0x120>)
 8008140:	f44f 7211 	mov.w	r2, #580	; 0x244
 8008144:	4941      	ldr	r1, [pc, #260]	; (800824c <mqtt_cyclic_timer+0x124>)
 8008146:	4842      	ldr	r0, [pc, #264]	; (8008250 <mqtt_cyclic_timer+0x128>)
 8008148:	f00e f962 	bl	8016410 <iprintf>

  if (client->conn_state == MQTT_CONNECTING) {
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	7a9b      	ldrb	r3, [r3, #10]
 8008150:	2b02      	cmp	r3, #2
 8008152:	d115      	bne.n	8008180 <mqtt_cyclic_timer+0x58>
    client->cyclic_tick++;
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	881b      	ldrh	r3, [r3, #0]
 8008158:	3301      	adds	r3, #1
 800815a:	b29a      	uxth	r2, r3
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	801a      	strh	r2, [r3, #0]
    if ((client->cyclic_tick * MQTT_CYCLIC_TIMER_INTERVAL) >= MQTT_CONNECT_TIMOUT) {
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	881b      	ldrh	r3, [r3, #0]
 8008164:	461a      	mov	r2, r3
 8008166:	4613      	mov	r3, r2
 8008168:	009b      	lsls	r3, r3, #2
 800816a:	4413      	add	r3, r2
 800816c:	2b63      	cmp	r3, #99	; 0x63
 800816e:	dd5e      	ble.n	800822e <mqtt_cyclic_timer+0x106>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_cyclic_timer: CONNECT attempt to server timed out\n"));
      /* Disconnect TCP */
      mqtt_close(client, MQTT_CONNECT_TIMEOUT);
 8008170:	f240 1101 	movw	r1, #257	; 0x101
 8008174:	68b8      	ldr	r0, [r7, #8]
 8008176:	f7ff ff77 	bl	8008068 <mqtt_close>
      restart_timer = 0;
 800817a:	2300      	movs	r3, #0
 800817c:	73fb      	strb	r3, [r7, #15]
 800817e:	e056      	b.n	800822e <mqtt_cyclic_timer+0x106>
    }
  } else if (client->conn_state == MQTT_CONNECTED) {
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	7a9b      	ldrb	r3, [r3, #10]
 8008184:	2b03      	cmp	r3, #3
 8008186:	d150      	bne.n	800822a <mqtt_cyclic_timer+0x102>
    /* Handle timeout for pending requests */
    mqtt_request_time_elapsed(&client->pend_req_queue, MQTT_CYCLIC_TIMER_INTERVAL);
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	3318      	adds	r3, #24
 800818c:	2105      	movs	r1, #5
 800818e:	4618      	mov	r0, r3
 8008190:	f7ff fdd2 	bl	8007d38 <mqtt_request_time_elapsed>

    /* keep_alive > 0 means keep alive functionality shall be used */
    if (client->keep_alive > 0) {
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	885b      	ldrh	r3, [r3, #2]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d048      	beq.n	800822e <mqtt_cyclic_timer+0x106>

      client->server_watchdog++;
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	889b      	ldrh	r3, [r3, #4]
 80081a0:	3301      	adds	r3, #1
 80081a2:	b29a      	uxth	r2, r3
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	809a      	strh	r2, [r3, #4]
      /* If reception from server has been idle for 1.5*keep_alive time, server is considered unresponsive */
      if ((client->server_watchdog * MQTT_CYCLIC_TIMER_INTERVAL) > (client->keep_alive + client->keep_alive / 2)) {
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	889b      	ldrh	r3, [r3, #4]
 80081ac:	461a      	mov	r2, r3
 80081ae:	4613      	mov	r3, r2
 80081b0:	009b      	lsls	r3, r3, #2
 80081b2:	441a      	add	r2, r3
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	885b      	ldrh	r3, [r3, #2]
 80081b8:	4619      	mov	r1, r3
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	885b      	ldrh	r3, [r3, #2]
 80081be:	085b      	lsrs	r3, r3, #1
 80081c0:	b29b      	uxth	r3, r3
 80081c2:	440b      	add	r3, r1
 80081c4:	429a      	cmp	r2, r3
 80081c6:	dd06      	ble.n	80081d6 <mqtt_cyclic_timer+0xae>
        LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_cyclic_timer: Server incoming keep-alive timeout\n"));
        mqtt_close(client, MQTT_CONNECT_TIMEOUT);
 80081c8:	f240 1101 	movw	r1, #257	; 0x101
 80081cc:	68b8      	ldr	r0, [r7, #8]
 80081ce:	f7ff ff4b 	bl	8008068 <mqtt_close>
        restart_timer = 0;
 80081d2:	2300      	movs	r3, #0
 80081d4:	73fb      	strb	r3, [r7, #15]
      }

      /* If time for a keep alive message to be sent, transmission has been idle for keep_alive time */
      if ((client->cyclic_tick * MQTT_CYCLIC_TIMER_INTERVAL) >= client->keep_alive) {
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	881b      	ldrh	r3, [r3, #0]
 80081da:	461a      	mov	r2, r3
 80081dc:	4613      	mov	r3, r2
 80081de:	009b      	lsls	r3, r3, #2
 80081e0:	4413      	add	r3, r2
 80081e2:	68ba      	ldr	r2, [r7, #8]
 80081e4:	8852      	ldrh	r2, [r2, #2]
 80081e6:	4293      	cmp	r3, r2
 80081e8:	db18      	blt.n	800821c <mqtt_cyclic_timer+0xf4>
        LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_cyclic_timer: Sending keep-alive message to server\n"));
        if (mqtt_output_check_space(&client->output, 0) != 0) {
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	33ec      	adds	r3, #236	; 0xec
 80081ee:	2100      	movs	r1, #0
 80081f0:	4618      	mov	r0, r3
 80081f2:	f7ff ff07 	bl	8008004 <mqtt_output_check_space>
 80081f6:	4603      	mov	r3, r0
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d018      	beq.n	800822e <mqtt_cyclic_timer+0x106>
          mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_PINGREQ, 0, 0, 0, 0);
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8008202:	2300      	movs	r3, #0
 8008204:	9301      	str	r3, [sp, #4]
 8008206:	2300      	movs	r3, #0
 8008208:	9300      	str	r3, [sp, #0]
 800820a:	2300      	movs	r3, #0
 800820c:	2200      	movs	r2, #0
 800820e:	210c      	movs	r1, #12
 8008210:	f7ff fead 	bl	8007f6e <mqtt_output_append_fixed_header>
          client->cyclic_tick = 0;
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	2200      	movs	r2, #0
 8008218:	801a      	strh	r2, [r3, #0]
 800821a:	e008      	b.n	800822e <mqtt_cyclic_timer+0x106>
        }
      } else {
        client->cyclic_tick++;
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	881b      	ldrh	r3, [r3, #0]
 8008220:	3301      	adds	r3, #1
 8008222:	b29a      	uxth	r2, r3
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	801a      	strh	r2, [r3, #0]
 8008228:	e001      	b.n	800822e <mqtt_cyclic_timer+0x106>
      }
    }
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_cyclic_timer: Timer should not be running in state %d\n", client->conn_state));
    restart_timer = 0;
 800822a:	2300      	movs	r3, #0
 800822c:	73fb      	strb	r3, [r7, #15]
  }
  if (restart_timer) {
 800822e:	7bfb      	ldrb	r3, [r7, #15]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d005      	beq.n	8008240 <mqtt_cyclic_timer+0x118>
    sys_timeout(MQTT_CYCLIC_TIMER_INTERVAL * 1000, mqtt_cyclic_timer, arg);
 8008234:	687a      	ldr	r2, [r7, #4]
 8008236:	4907      	ldr	r1, [pc, #28]	; (8008254 <mqtt_cyclic_timer+0x12c>)
 8008238:	f241 3088 	movw	r0, #5000	; 0x1388
 800823c:	f009 f88a 	bl	8011354 <sys_timeout>
  }
}
 8008240:	bf00      	nop
 8008242:	3710      	adds	r7, #16
 8008244:	46bd      	mov	sp, r7
 8008246:	bd80      	pop	{r7, pc}
 8008248:	08017ce0 	.word	0x08017ce0
 800824c:	08017ef0 	.word	0x08017ef0
 8008250:	08017d58 	.word	0x08017d58
 8008254:	08008129 	.word	0x08008129

08008258 <pub_ack_rec_rel_response>:
 * @param qos QoS value
 * @return ERR_OK if successful, ERR_MEM if out of memory
 */
static err_t
pub_ack_rec_rel_response(mqtt_client_t *client, u8_t msg, u16_t pkt_id, u8_t qos)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b086      	sub	sp, #24
 800825c:	af02      	add	r7, sp, #8
 800825e:	6078      	str	r0, [r7, #4]
 8008260:	4608      	mov	r0, r1
 8008262:	4611      	mov	r1, r2
 8008264:	461a      	mov	r2, r3
 8008266:	4603      	mov	r3, r0
 8008268:	70fb      	strb	r3, [r7, #3]
 800826a:	460b      	mov	r3, r1
 800826c:	803b      	strh	r3, [r7, #0]
 800826e:	4613      	mov	r3, r2
 8008270:	70bb      	strb	r3, [r7, #2]
  err_t err = ERR_OK;
 8008272:	2300      	movs	r3, #0
 8008274:	73fb      	strb	r3, [r7, #15]
  if (mqtt_output_check_space(&client->output, 2)) {
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	33ec      	adds	r3, #236	; 0xec
 800827a:	2102      	movs	r1, #2
 800827c:	4618      	mov	r0, r3
 800827e:	f7ff fec1 	bl	8008004 <mqtt_output_check_space>
 8008282:	4603      	mov	r3, r0
 8008284:	2b00      	cmp	r3, #0
 8008286:	d01c      	beq.n	80082c2 <pub_ack_rec_rel_response+0x6a>
    mqtt_output_append_fixed_header(&client->output, msg, 0, qos, 0, 2);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800828e:	78bb      	ldrb	r3, [r7, #2]
 8008290:	78f9      	ldrb	r1, [r7, #3]
 8008292:	2202      	movs	r2, #2
 8008294:	9201      	str	r2, [sp, #4]
 8008296:	2200      	movs	r2, #0
 8008298:	9200      	str	r2, [sp, #0]
 800829a:	2200      	movs	r2, #0
 800829c:	f7ff fe67 	bl	8007f6e <mqtt_output_append_fixed_header>
    mqtt_output_append_u16(&client->output, pkt_id);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	33ec      	adds	r3, #236	; 0xec
 80082a4:	883a      	ldrh	r2, [r7, #0]
 80082a6:	4611      	mov	r1, r2
 80082a8:	4618      	mov	r0, r3
 80082aa:	f7ff fdfe 	bl	8007eaa <mqtt_output_append_u16>
    mqtt_output_send(&client->output, client->conn);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	68db      	ldr	r3, [r3, #12]
 80082b8:	4619      	mov	r1, r3
 80082ba:	4610      	mov	r0, r2
 80082bc:	f7ff fb94 	bl	80079e8 <mqtt_output_send>
 80082c0:	e001      	b.n	80082c6 <pub_ack_rec_rel_response+0x6e>
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("pub_ack_rec_rel_response: OOM creating response: %s with pkt_id: %d\n",
                                   mqtt_msg_type_to_str(msg), pkt_id));
    err = ERR_MEM;
 80082c2:	23ff      	movs	r3, #255	; 0xff
 80082c4:	73fb      	strb	r3, [r7, #15]
  }
  return err;
 80082c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3710      	adds	r7, #16
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}

080082d2 <mqtt_incomming_suback>:
 * @param r Matching request
 * @param result Result code from server
 */
static void
mqtt_incomming_suback(struct mqtt_request_t *r, u8_t result)
{
 80082d2:	b580      	push	{r7, lr}
 80082d4:	b082      	sub	sp, #8
 80082d6:	af00      	add	r7, sp, #0
 80082d8:	6078      	str	r0, [r7, #4]
 80082da:	460b      	mov	r3, r1
 80082dc:	70fb      	strb	r3, [r7, #3]
  if (r->cb != NULL) {
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	685b      	ldr	r3, [r3, #4]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d00c      	beq.n	8008300 <mqtt_incomming_suback+0x2e>
    r->cb(r->arg, result < 3 ? ERR_OK : ERR_ABRT);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	685b      	ldr	r3, [r3, #4]
 80082ea:	687a      	ldr	r2, [r7, #4]
 80082ec:	6890      	ldr	r0, [r2, #8]
 80082ee:	78fa      	ldrb	r2, [r7, #3]
 80082f0:	2a02      	cmp	r2, #2
 80082f2:	d801      	bhi.n	80082f8 <mqtt_incomming_suback+0x26>
 80082f4:	2200      	movs	r2, #0
 80082f6:	e001      	b.n	80082fc <mqtt_incomming_suback+0x2a>
 80082f8:	f06f 020c 	mvn.w	r2, #12
 80082fc:	4611      	mov	r1, r2
 80082fe:	4798      	blx	r3
  }
}
 8008300:	bf00      	nop
 8008302:	3708      	adds	r7, #8
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}

08008308 <mqtt_message_received>:
 * @param length length received part
 * @param remaining_length Remaining length of complete message
 */
static mqtt_connection_status_t
mqtt_message_received(mqtt_client_t *client, u8_t fixed_hdr_idx, u16_t length, u32_t remaining_length)
{
 8008308:	b590      	push	{r4, r7, lr}
 800830a:	b08f      	sub	sp, #60	; 0x3c
 800830c:	af00      	add	r7, sp, #0
 800830e:	60f8      	str	r0, [r7, #12]
 8008310:	607b      	str	r3, [r7, #4]
 8008312:	460b      	mov	r3, r1
 8008314:	72fb      	strb	r3, [r7, #11]
 8008316:	4613      	mov	r3, r2
 8008318:	813b      	strh	r3, [r7, #8]
  mqtt_connection_status_t res = MQTT_CONNECT_ACCEPTED;
 800831a:	2300      	movs	r3, #0
 800831c:	86fb      	strh	r3, [r7, #54]	; 0x36

  u8_t *var_hdr_payload = client->rx_buffer + fixed_hdr_idx;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 8008324:	7afb      	ldrb	r3, [r7, #11]
 8008326:	4413      	add	r3, r2
 8008328:	62fb      	str	r3, [r7, #44]	; 0x2c
  size_t var_hdr_payload_bufsize = sizeof(client->rx_buffer) - fixed_hdr_idx;
 800832a:	7afb      	ldrb	r3, [r7, #11]
 800832c:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8008330:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Control packet type */
  u8_t pkt_type = MQTT_CTL_PACKET_TYPE(client->rx_buffer[0]);
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8008338:	091b      	lsrs	r3, r3, #4
 800833a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  u16_t pkt_id = 0;
 800833e:	2300      	movs	r3, #0
 8008340:	84bb      	strh	r3, [r7, #36]	; 0x24

  LWIP_ASSERT("client->msg_idx < MQTT_VAR_HEADER_BUFFER_LEN", client->msg_idx < MQTT_VAR_HEADER_BUFFER_LEN);
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008346:	2b7f      	cmp	r3, #127	; 0x7f
 8008348:	d906      	bls.n	8008358 <mqtt_message_received+0x50>
 800834a:	4b97      	ldr	r3, [pc, #604]	; (80085a8 <mqtt_message_received+0x2a0>)
 800834c:	f240 22ab 	movw	r2, #683	; 0x2ab
 8008350:	4996      	ldr	r1, [pc, #600]	; (80085ac <mqtt_message_received+0x2a4>)
 8008352:	4897      	ldr	r0, [pc, #604]	; (80085b0 <mqtt_message_received+0x2a8>)
 8008354:	f00e f85c 	bl	8016410 <iprintf>
  LWIP_ASSERT("fixed_hdr_idx <= client->msg_idx", fixed_hdr_idx <= client->msg_idx);
 8008358:	7afa      	ldrb	r2, [r7, #11]
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800835e:	429a      	cmp	r2, r3
 8008360:	d906      	bls.n	8008370 <mqtt_message_received+0x68>
 8008362:	4b91      	ldr	r3, [pc, #580]	; (80085a8 <mqtt_message_received+0x2a0>)
 8008364:	f44f 722b 	mov.w	r2, #684	; 0x2ac
 8008368:	4992      	ldr	r1, [pc, #584]	; (80085b4 <mqtt_message_received+0x2ac>)
 800836a:	4891      	ldr	r0, [pc, #580]	; (80085b0 <mqtt_message_received+0x2a8>)
 800836c:	f00e f850 	bl	8016410 <iprintf>
  LWIP_ERROR("buffer length mismatch", fixed_hdr_idx + length <= MQTT_VAR_HEADER_BUFFER_LEN,
 8008370:	7afa      	ldrb	r2, [r7, #11]
 8008372:	893b      	ldrh	r3, [r7, #8]
 8008374:	4413      	add	r3, r2
 8008376:	2b80      	cmp	r3, #128	; 0x80
 8008378:	dd09      	ble.n	800838e <mqtt_message_received+0x86>
 800837a:	4b8b      	ldr	r3, [pc, #556]	; (80085a8 <mqtt_message_received+0x2a0>)
 800837c:	f240 22ad 	movw	r2, #685	; 0x2ad
 8008380:	498d      	ldr	r1, [pc, #564]	; (80085b8 <mqtt_message_received+0x2b0>)
 8008382:	488b      	ldr	r0, [pc, #556]	; (80085b0 <mqtt_message_received+0x2a8>)
 8008384:	f00e f844 	bl	8016410 <iprintf>
 8008388:	f44f 7380 	mov.w	r3, #256	; 0x100
 800838c:	e16f      	b.n	800866e <mqtt_message_received+0x366>
             return MQTT_CONNECT_DISCONNECTED);

  if (pkt_type == MQTT_MSG_TYPE_CONNACK) {
 800838e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008392:	2b02      	cmp	r3, #2
 8008394:	d123      	bne.n	80083de <mqtt_message_received+0xd6>
    if (client->conn_state == MQTT_CONNECTING) {
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	7a9b      	ldrb	r3, [r3, #10]
 800839a:	2b02      	cmp	r3, #2
 800839c:	f040 8152 	bne.w	8008644 <mqtt_message_received+0x33c>
      if (length < 2) {
 80083a0:	893b      	ldrh	r3, [r7, #8]
 80083a2:	2b01      	cmp	r3, #1
 80083a4:	f240 8150 	bls.w	8008648 <mqtt_message_received+0x340>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short CONNACK message\n"));
        goto out_disconnect;
      }
      /* Get result code from CONNACK */
      res = (mqtt_connection_status_t)var_hdr_payload[1];
 80083a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083aa:	3301      	adds	r3, #1
 80083ac:	781b      	ldrb	r3, [r3, #0]
 80083ae:	86fb      	strh	r3, [r7, #54]	; 0x36
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: Connect response code %d\n", res));
      if (res == MQTT_CONNECT_ACCEPTED) {
 80083b0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	f040 8146 	bne.w	8008644 <mqtt_message_received+0x33c>
        /* Reset cyclic_tick when changing to connected state */
        client->cyclic_tick = 0;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	2200      	movs	r2, #0
 80083bc:	801a      	strh	r2, [r3, #0]
        client->conn_state = MQTT_CONNECTED;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	2203      	movs	r2, #3
 80083c2:	729a      	strb	r2, [r3, #10]
        /* Notify upper layer */
        if (client->connect_cb != 0) {
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	695b      	ldr	r3, [r3, #20]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	f000 813b 	beq.w	8008644 <mqtt_message_received+0x33c>
          client->connect_cb(client, client->connect_arg, res);
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	695b      	ldr	r3, [r3, #20]
 80083d2:	68fa      	ldr	r2, [r7, #12]
 80083d4:	6911      	ldr	r1, [r2, #16]
 80083d6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80083d8:	68f8      	ldr	r0, [r7, #12]
 80083da:	4798      	blx	r3
 80083dc:	e132      	b.n	8008644 <mqtt_message_received+0x33c>
        }
      }
    } else {
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: Received CONNACK in connected state\n"));
    }
  } else if (pkt_type == MQTT_MSG_TYPE_PINGRESP) {
 80083de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80083e2:	2b0d      	cmp	r3, #13
 80083e4:	f000 812e 	beq.w	8008644 <mqtt_message_received+0x33c>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ( "mqtt_message_received: Received PINGRESP from server\n"));

  } else if (pkt_type == MQTT_MSG_TYPE_PUBLISH) {
 80083e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80083ec:	2b03      	cmp	r3, #3
 80083ee:	f040 80c0 	bne.w	8008572 <mqtt_message_received+0x26a>
    u16_t payload_offset = 0;
 80083f2:	2300      	movs	r3, #0
 80083f4:	86bb      	strh	r3, [r7, #52]	; 0x34
    u16_t payload_length = length;
 80083f6:	893b      	ldrh	r3, [r7, #8]
 80083f8:	867b      	strh	r3, [r7, #50]	; 0x32
    u8_t qos = MQTT_CTL_PACKET_QOS(client->rx_buffer[0]);
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8008400:	105b      	asrs	r3, r3, #1
 8008402:	b2db      	uxtb	r3, r3
 8008404:	f003 0303 	and.w	r3, r3, #3
 8008408:	77fb      	strb	r3, [r7, #31]

    if (client->msg_idx <= MQTT_VAR_HEADER_BUFFER_LEN) {
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800840e:	2b80      	cmp	r3, #128	; 0x80
 8008410:	d87d      	bhi.n	800850e <mqtt_message_received+0x206>
      /* Should have topic and pkt id*/
      u8_t *topic;
      u16_t after_topic;
      u8_t bkp;
      u16_t topic_len;
      u16_t qos_len = (qos ? 2U : 0U);
 8008412:	7ffb      	ldrb	r3, [r7, #31]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d001      	beq.n	800841c <mqtt_message_received+0x114>
 8008418:	2302      	movs	r3, #2
 800841a:	e000      	b.n	800841e <mqtt_message_received+0x116>
 800841c:	2300      	movs	r3, #0
 800841e:	83bb      	strh	r3, [r7, #28]
      if (length < 2 + qos_len) {
 8008420:	8bbb      	ldrh	r3, [r7, #28]
 8008422:	1c5a      	adds	r2, r3, #1
 8008424:	893b      	ldrh	r3, [r7, #8]
 8008426:	429a      	cmp	r2, r3
 8008428:	f280 8110 	bge.w	800864c <mqtt_message_received+0x344>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short PUBLISH packet\n"));
        goto out_disconnect;
      }
      topic_len = var_hdr_payload[0];
 800842c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800842e:	781b      	ldrb	r3, [r3, #0]
 8008430:	837b      	strh	r3, [r7, #26]
      topic_len = (topic_len << 8) + (u16_t)(var_hdr_payload[1]);
 8008432:	8b7b      	ldrh	r3, [r7, #26]
 8008434:	021b      	lsls	r3, r3, #8
 8008436:	b29a      	uxth	r2, r3
 8008438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800843a:	3301      	adds	r3, #1
 800843c:	781b      	ldrb	r3, [r3, #0]
 800843e:	b29b      	uxth	r3, r3
 8008440:	4413      	add	r3, r2
 8008442:	837b      	strh	r3, [r7, #26]
      if ((topic_len > length - (2 + qos_len)) ||
 8008444:	8b7a      	ldrh	r2, [r7, #26]
 8008446:	8939      	ldrh	r1, [r7, #8]
 8008448:	8bbb      	ldrh	r3, [r7, #28]
 800844a:	3302      	adds	r3, #2
 800844c:	1acb      	subs	r3, r1, r3
 800844e:	429a      	cmp	r2, r3
 8008450:	f300 80fe 	bgt.w	8008650 <mqtt_message_received+0x348>
          (topic_len > var_hdr_payload_bufsize - (2 + qos_len))) {
 8008454:	8b7a      	ldrh	r2, [r7, #26]
 8008456:	8bbb      	ldrh	r3, [r7, #28]
 8008458:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800845a:	1acb      	subs	r3, r1, r3
 800845c:	3b02      	subs	r3, #2
      if ((topic_len > length - (2 + qos_len)) ||
 800845e:	429a      	cmp	r2, r3
 8008460:	f200 80f6 	bhi.w	8008650 <mqtt_message_received+0x348>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short PUBLISH packet (topic)\n"));
        goto out_disconnect;
      }

      topic = var_hdr_payload + 2;
 8008464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008466:	3302      	adds	r3, #2
 8008468:	617b      	str	r3, [r7, #20]
      after_topic = 2 + topic_len;
 800846a:	8b7b      	ldrh	r3, [r7, #26]
 800846c:	3302      	adds	r3, #2
 800846e:	863b      	strh	r3, [r7, #48]	; 0x30
      /* Check buffer length, add one byte even for QoS 0 so that zero termination will fit */
      if ((after_topic + (qos ? 2U : 1U)) > var_hdr_payload_bufsize) {
 8008470:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008472:	7ffa      	ldrb	r2, [r7, #31]
 8008474:	2a00      	cmp	r2, #0
 8008476:	d001      	beq.n	800847c <mqtt_message_received+0x174>
 8008478:	2202      	movs	r2, #2
 800847a:	e000      	b.n	800847e <mqtt_message_received+0x176>
 800847c:	2201      	movs	r2, #1
 800847e:	4413      	add	r3, r2
 8008480:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008482:	429a      	cmp	r2, r3
 8008484:	f0c0 80e6 	bcc.w	8008654 <mqtt_message_received+0x34c>
        LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: Receive buffer can not fit topic + pkt_id\n"));
        goto out_disconnect;
      }

      /* id for QoS 1 and 2 */
      if (qos > 0) {
 8008488:	7ffb      	ldrb	r3, [r7, #31]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d01a      	beq.n	80084c4 <mqtt_message_received+0x1bc>
        if (length < after_topic + 2U) {
 800848e:	893a      	ldrh	r2, [r7, #8]
 8008490:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008492:	3302      	adds	r3, #2
 8008494:	429a      	cmp	r2, r3
 8008496:	f0c0 80df 	bcc.w	8008658 <mqtt_message_received+0x350>
          LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short PUBLISH packet (after_topic)\n"));
          goto out_disconnect;
        }
        client->inpub_pkt_id = ((u16_t)var_hdr_payload[after_topic] << 8) + (u16_t)var_hdr_payload[after_topic + 1];
 800849a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800849c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800849e:	4413      	add	r3, r2
 80084a0:	781b      	ldrb	r3, [r3, #0]
 80084a2:	b29b      	uxth	r3, r3
 80084a4:	021b      	lsls	r3, r3, #8
 80084a6:	b29a      	uxth	r2, r3
 80084a8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80084aa:	3301      	adds	r3, #1
 80084ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80084ae:	440b      	add	r3, r1
 80084b0:	781b      	ldrb	r3, [r3, #0]
 80084b2:	b29b      	uxth	r3, r3
 80084b4:	4413      	add	r3, r2
 80084b6:	b29a      	uxth	r2, r3
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	811a      	strh	r2, [r3, #8]
        after_topic += 2;
 80084bc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80084be:	3302      	adds	r3, #2
 80084c0:	863b      	strh	r3, [r7, #48]	; 0x30
 80084c2:	e002      	b.n	80084ca <mqtt_message_received+0x1c2>
      } else {
        client->inpub_pkt_id = 0;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	2200      	movs	r2, #0
 80084c8:	811a      	strh	r2, [r3, #8]
      }
      /* Take backup of byte after topic */
      bkp = topic[topic_len];
 80084ca:	8b7b      	ldrh	r3, [r7, #26]
 80084cc:	697a      	ldr	r2, [r7, #20]
 80084ce:	4413      	add	r3, r2
 80084d0:	781b      	ldrb	r3, [r3, #0]
 80084d2:	74fb      	strb	r3, [r7, #19]
      /* Zero terminate string */
      topic[topic_len] = 0;
 80084d4:	8b7b      	ldrh	r3, [r7, #26]
 80084d6:	697a      	ldr	r2, [r7, #20]
 80084d8:	4413      	add	r3, r2
 80084da:	2200      	movs	r2, #0
 80084dc:	701a      	strb	r2, [r3, #0]
      /* Payload data remaining in receive buffer */
      payload_length = length - after_topic;
 80084de:	893a      	ldrh	r2, [r7, #8]
 80084e0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80084e2:	1ad3      	subs	r3, r2, r3
 80084e4:	867b      	strh	r3, [r7, #50]	; 0x32
      payload_offset = after_topic;
 80084e6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80084e8:	86bb      	strh	r3, [r7, #52]	; 0x34

      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_incomming_publish: Received message with QoS %d at topic: %s, payload length %"U32_F"\n",
                                     qos, topic, remaining_length + payload_length));
      if (client->pub_cb != NULL) {
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d008      	beq.n	8008504 <mqtt_message_received+0x1fc>
        client->pub_cb(client->inpub_arg, (const char *)topic, remaining_length + payload_length);
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80084f6:	68fa      	ldr	r2, [r7, #12]
 80084f8:	6dd0      	ldr	r0, [r2, #92]	; 0x5c
 80084fa:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 80084fc:	687a      	ldr	r2, [r7, #4]
 80084fe:	440a      	add	r2, r1
 8008500:	6979      	ldr	r1, [r7, #20]
 8008502:	4798      	blx	r3
      }
      /* Restore byte after topic */
      topic[topic_len] = bkp;
 8008504:	8b7b      	ldrh	r3, [r7, #26]
 8008506:	697a      	ldr	r2, [r7, #20]
 8008508:	4413      	add	r3, r2
 800850a:	7cfa      	ldrb	r2, [r7, #19]
 800850c:	701a      	strb	r2, [r3, #0]
    }
    if (payload_length > 0 || remaining_length == 0) {
 800850e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8008510:	2b00      	cmp	r3, #0
 8008512:	d103      	bne.n	800851c <mqtt_message_received+0x214>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2b00      	cmp	r3, #0
 8008518:	f040 8094 	bne.w	8008644 <mqtt_message_received+0x33c>
      if (length < (size_t)(payload_offset + payload_length)) {
 800851c:	893b      	ldrh	r3, [r7, #8]
 800851e:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 8008520:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8008522:	440a      	add	r2, r1
 8008524:	4293      	cmp	r3, r2
 8008526:	f0c0 8099 	bcc.w	800865c <mqtt_message_received+0x354>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short packet (payload)\n"));
        goto out_disconnect;
      }
      client->data_cb(client->inpub_arg, var_hdr_payload + payload_offset, payload_length, remaining_length == 0 ? MQTT_DATA_FLAG_LAST : 0);
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 8008532:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008534:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008536:	18d1      	adds	r1, r2, r3
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2b00      	cmp	r3, #0
 800853c:	bf0c      	ite	eq
 800853e:	2301      	moveq	r3, #1
 8008540:	2300      	movne	r3, #0
 8008542:	b2db      	uxtb	r3, r3
 8008544:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8008546:	47a0      	blx	r4
      /* Reply if QoS > 0 */
      if (remaining_length == 0 && qos > 0) {
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d17a      	bne.n	8008644 <mqtt_message_received+0x33c>
 800854e:	7ffb      	ldrb	r3, [r7, #31]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d077      	beq.n	8008644 <mqtt_message_received+0x33c>
        /* Send PUBACK for QoS 1 or PUBREC for QoS 2 */
        u8_t resp_msg = (qos == 1) ? MQTT_MSG_TYPE_PUBACK : MQTT_MSG_TYPE_PUBREC;
 8008554:	7ffb      	ldrb	r3, [r7, #31]
 8008556:	2b01      	cmp	r3, #1
 8008558:	d101      	bne.n	800855e <mqtt_message_received+0x256>
 800855a:	2304      	movs	r3, #4
 800855c:	e000      	b.n	8008560 <mqtt_message_received+0x258>
 800855e:	2305      	movs	r3, #5
 8008560:	74bb      	strb	r3, [r7, #18]
        LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_incomming_publish: Sending publish response: %s with pkt_id: %d\n",
                                       mqtt_msg_type_to_str(resp_msg), client->inpub_pkt_id));
        pub_ack_rec_rel_response(client, resp_msg, client->inpub_pkt_id, 0);
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	891a      	ldrh	r2, [r3, #8]
 8008566:	7cb9      	ldrb	r1, [r7, #18]
 8008568:	2300      	movs	r3, #0
 800856a:	68f8      	ldr	r0, [r7, #12]
 800856c:	f7ff fe74 	bl	8008258 <pub_ack_rec_rel_response>
 8008570:	e068      	b.n	8008644 <mqtt_message_received+0x33c>
      }
    }
  } else {
    /* Get packet identifier */
    pkt_id = (u16_t)var_hdr_payload[0] << 8;
 8008572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008574:	781b      	ldrb	r3, [r3, #0]
 8008576:	b29b      	uxth	r3, r3
 8008578:	021b      	lsls	r3, r3, #8
 800857a:	84bb      	strh	r3, [r7, #36]	; 0x24
    pkt_id |= (u16_t)var_hdr_payload[1];
 800857c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800857e:	3301      	adds	r3, #1
 8008580:	781b      	ldrb	r3, [r3, #0]
 8008582:	b29a      	uxth	r2, r3
 8008584:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008586:	4313      	orrs	r3, r2
 8008588:	84bb      	strh	r3, [r7, #36]	; 0x24
    if (pkt_id == 0) {
 800858a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800858c:	2b00      	cmp	r3, #0
 800858e:	d067      	beq.n	8008660 <mqtt_message_received+0x358>
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: Got message with illegal packet identifier: 0\n"));
      goto out_disconnect;
    }
    if (pkt_type == MQTT_MSG_TYPE_PUBREC) {
 8008590:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008594:	2b05      	cmp	r3, #5
 8008596:	d111      	bne.n	80085bc <mqtt_message_received+0x2b4>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: PUBREC, sending PUBREL with pkt_id: %d\n", pkt_id));
      pub_ack_rec_rel_response(client, MQTT_MSG_TYPE_PUBREL, pkt_id, 1);
 8008598:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800859a:	2301      	movs	r3, #1
 800859c:	2106      	movs	r1, #6
 800859e:	68f8      	ldr	r0, [r7, #12]
 80085a0:	f7ff fe5a 	bl	8008258 <pub_ack_rec_rel_response>
 80085a4:	e04e      	b.n	8008644 <mqtt_message_received+0x33c>
 80085a6:	bf00      	nop
 80085a8:	08017ce0 	.word	0x08017ce0
 80085ac:	08017f14 	.word	0x08017f14
 80085b0:	08017d58 	.word	0x08017d58
 80085b4:	08017f44 	.word	0x08017f44
 80085b8:	08017f68 	.word	0x08017f68

    } else if (pkt_type == MQTT_MSG_TYPE_PUBREL) {
 80085bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80085c0:	2b06      	cmp	r3, #6
 80085c2:	d106      	bne.n	80085d2 <mqtt_message_received+0x2ca>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: PUBREL, sending PUBCOMP response with pkt_id: %d\n", pkt_id));
      pub_ack_rec_rel_response(client, MQTT_MSG_TYPE_PUBCOMP, pkt_id, 0);
 80085c4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80085c6:	2300      	movs	r3, #0
 80085c8:	2107      	movs	r1, #7
 80085ca:	68f8      	ldr	r0, [r7, #12]
 80085cc:	f7ff fe44 	bl	8008258 <pub_ack_rec_rel_response>
 80085d0:	e038      	b.n	8008644 <mqtt_message_received+0x33c>

    } else if (pkt_type == MQTT_MSG_TYPE_SUBACK || pkt_type == MQTT_MSG_TYPE_UNSUBACK ||
 80085d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80085d6:	2b09      	cmp	r3, #9
 80085d8:	d00b      	beq.n	80085f2 <mqtt_message_received+0x2ea>
 80085da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80085de:	2b0b      	cmp	r3, #11
 80085e0:	d007      	beq.n	80085f2 <mqtt_message_received+0x2ea>
 80085e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80085e6:	2b07      	cmp	r3, #7
 80085e8:	d003      	beq.n	80085f2 <mqtt_message_received+0x2ea>
               pkt_type == MQTT_MSG_TYPE_PUBCOMP || pkt_type == MQTT_MSG_TYPE_PUBACK) {
 80085ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80085ee:	2b04      	cmp	r3, #4
 80085f0:	d138      	bne.n	8008664 <mqtt_message_received+0x35c>
      struct mqtt_request_t *r = mqtt_take_request(&client->pend_req_queue, pkt_id);
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	3318      	adds	r3, #24
 80085f6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80085f8:	4611      	mov	r1, r2
 80085fa:	4618      	mov	r0, r3
 80085fc:	f7ff fb4a 	bl	8007c94 <mqtt_take_request>
 8008600:	6238      	str	r0, [r7, #32]
      if (r != NULL) {
 8008602:	6a3b      	ldr	r3, [r7, #32]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d01c      	beq.n	8008642 <mqtt_message_received+0x33a>
        LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: %s response with id %d\n", mqtt_msg_type_to_str(pkt_type), pkt_id));
        if (pkt_type == MQTT_MSG_TYPE_SUBACK) {
 8008608:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800860c:	2b09      	cmp	r3, #9
 800860e:	d10a      	bne.n	8008626 <mqtt_message_received+0x31e>
          if (length < 3) {
 8008610:	893b      	ldrh	r3, [r7, #8]
 8008612:	2b02      	cmp	r3, #2
 8008614:	d928      	bls.n	8008668 <mqtt_message_received+0x360>
            LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: To small SUBACK packet\n"));
            goto out_disconnect;
          } else {
            mqtt_incomming_suback(r, var_hdr_payload[2]);
 8008616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008618:	3302      	adds	r3, #2
 800861a:	781b      	ldrb	r3, [r3, #0]
 800861c:	4619      	mov	r1, r3
 800861e:	6a38      	ldr	r0, [r7, #32]
 8008620:	f7ff fe57 	bl	80082d2 <mqtt_incomming_suback>
 8008624:	e00a      	b.n	800863c <mqtt_message_received+0x334>
          }
        } else if (r->cb != NULL) {
 8008626:	6a3b      	ldr	r3, [r7, #32]
 8008628:	685b      	ldr	r3, [r3, #4]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d006      	beq.n	800863c <mqtt_message_received+0x334>
          r->cb(r->arg, ERR_OK);
 800862e:	6a3b      	ldr	r3, [r7, #32]
 8008630:	685b      	ldr	r3, [r3, #4]
 8008632:	6a3a      	ldr	r2, [r7, #32]
 8008634:	6892      	ldr	r2, [r2, #8]
 8008636:	2100      	movs	r1, #0
 8008638:	4610      	mov	r0, r2
 800863a:	4798      	blx	r3
        }
        mqtt_delete_request(r);
 800863c:	6a38      	ldr	r0, [r7, #32]
 800863e:	f7ff fb19 	bl	8007c74 <mqtt_delete_request>
               pkt_type == MQTT_MSG_TYPE_PUBCOMP || pkt_type == MQTT_MSG_TYPE_PUBACK) {
 8008642:	bf00      	nop
    } else {
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ( "mqtt_message_received: Received unknown message type: %d\n", pkt_type));
      goto out_disconnect;
    }
  }
  return res;
 8008644:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008646:	e012      	b.n	800866e <mqtt_message_received+0x366>
        goto out_disconnect;
 8008648:	bf00      	nop
 800864a:	e00e      	b.n	800866a <mqtt_message_received+0x362>
        goto out_disconnect;
 800864c:	bf00      	nop
 800864e:	e00c      	b.n	800866a <mqtt_message_received+0x362>
        goto out_disconnect;
 8008650:	bf00      	nop
 8008652:	e00a      	b.n	800866a <mqtt_message_received+0x362>
        goto out_disconnect;
 8008654:	bf00      	nop
 8008656:	e008      	b.n	800866a <mqtt_message_received+0x362>
          goto out_disconnect;
 8008658:	bf00      	nop
 800865a:	e006      	b.n	800866a <mqtt_message_received+0x362>
        goto out_disconnect;
 800865c:	bf00      	nop
 800865e:	e004      	b.n	800866a <mqtt_message_received+0x362>
      goto out_disconnect;
 8008660:	bf00      	nop
 8008662:	e002      	b.n	800866a <mqtt_message_received+0x362>
      goto out_disconnect;
 8008664:	bf00      	nop
 8008666:	e000      	b.n	800866a <mqtt_message_received+0x362>
            goto out_disconnect;
 8008668:	bf00      	nop
out_disconnect:
  return MQTT_CONNECT_DISCONNECTED;
 800866a:	f44f 7380 	mov.w	r3, #256	; 0x100
}
 800866e:	4618      	mov	r0, r3
 8008670:	373c      	adds	r7, #60	; 0x3c
 8008672:	46bd      	mov	sp, r7
 8008674:	bd90      	pop	{r4, r7, pc}
 8008676:	bf00      	nop

08008678 <mqtt_parse_incoming>:
 * @param p PBUF chain of received data
 * @return Connection status
 */
static mqtt_connection_status_t
mqtt_parse_incoming(mqtt_client_t *client, struct pbuf *p)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b088      	sub	sp, #32
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
 8008680:	6039      	str	r1, [r7, #0]
  u16_t in_offset = 0;
 8008682:	2300      	movs	r3, #0
 8008684:	83fb      	strh	r3, [r7, #30]
  u32_t msg_rem_len = 0;
 8008686:	2300      	movs	r3, #0
 8008688:	61bb      	str	r3, [r7, #24]
  u8_t fixed_hdr_idx = 0;
 800868a:	2300      	movs	r3, #0
 800868c:	75fb      	strb	r3, [r7, #23]
  u8_t b = 0;
 800868e:	2300      	movs	r3, #0
 8008690:	75bb      	strb	r3, [r7, #22]

  while (p->tot_len > in_offset) {
 8008692:	e0bc      	b.n	800880e <mqtt_parse_incoming+0x196>
    /* We ALWAYS parse the header here first. Even if the header was not
       included in this segment, we re-parse it here by buffering it in
       client->rx_buffer. client->msg_idx keeps track of this. */
    if ((fixed_hdr_idx < 2) || ((b & 0x80) != 0)) {
 8008694:	7dfb      	ldrb	r3, [r7, #23]
 8008696:	2b01      	cmp	r3, #1
 8008698:	d903      	bls.n	80086a2 <mqtt_parse_incoming+0x2a>
 800869a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	da4d      	bge.n	800873e <mqtt_parse_incoming+0xc6>

      if (fixed_hdr_idx < client->msg_idx) {
 80086a2:	7dfa      	ldrb	r2, [r7, #23]
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80086a8:	429a      	cmp	r2, r3
 80086aa:	d206      	bcs.n	80086ba <mqtt_parse_incoming+0x42>
        /* parse header from old pbuf (buffered in client->rx_buffer) */
        b = client->rx_buffer[fixed_hdr_idx];
 80086ac:	7dfb      	ldrb	r3, [r7, #23]
 80086ae:	687a      	ldr	r2, [r7, #4]
 80086b0:	4413      	add	r3, r2
 80086b2:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80086b6:	75bb      	strb	r3, [r7, #22]
 80086b8:	e012      	b.n	80086e0 <mqtt_parse_incoming+0x68>
      } else {
        /* parse header from this pbuf and save it in client->rx_buffer in case
           it comes in segmented */
        b = pbuf_get_at(p, in_offset++);
 80086ba:	8bfb      	ldrh	r3, [r7, #30]
 80086bc:	1c5a      	adds	r2, r3, #1
 80086be:	83fa      	strh	r2, [r7, #30]
 80086c0:	4619      	mov	r1, r3
 80086c2:	6838      	ldr	r0, [r7, #0]
 80086c4:	f002 fcca 	bl	800b05c <pbuf_get_at>
 80086c8:	4603      	mov	r3, r0
 80086ca:	75bb      	strb	r3, [r7, #22]
        client->rx_buffer[client->msg_idx++] = b;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80086d0:	1c59      	adds	r1, r3, #1
 80086d2:	687a      	ldr	r2, [r7, #4]
 80086d4:	6691      	str	r1, [r2, #104]	; 0x68
 80086d6:	687a      	ldr	r2, [r7, #4]
 80086d8:	4413      	add	r3, r2
 80086da:	7dba      	ldrb	r2, [r7, #22]
 80086dc:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
      }
      fixed_hdr_idx++;
 80086e0:	7dfb      	ldrb	r3, [r7, #23]
 80086e2:	3301      	adds	r3, #1
 80086e4:	75fb      	strb	r3, [r7, #23]

      if (fixed_hdr_idx >= 2) {
 80086e6:	7dfb      	ldrb	r3, [r7, #23]
 80086e8:	2b01      	cmp	r3, #1
 80086ea:	f240 8090 	bls.w	800880e <mqtt_parse_incoming+0x196>
        /* fixed header contains at least 2 bytes but can contain more, depending on
           'remaining length'. All bytes but the last of this have 0x80 set to
           indicate more bytes are coming. */
        msg_rem_len |= (u32_t)(b & 0x7f) << ((fixed_hdr_idx - 2) * 7);
 80086ee:	7dbb      	ldrb	r3, [r7, #22]
 80086f0:	f003 017f 	and.w	r1, r3, #127	; 0x7f
 80086f4:	7dfb      	ldrb	r3, [r7, #23]
 80086f6:	1e9a      	subs	r2, r3, #2
 80086f8:	4613      	mov	r3, r2
 80086fa:	00db      	lsls	r3, r3, #3
 80086fc:	1a9b      	subs	r3, r3, r2
 80086fe:	fa01 f303 	lsl.w	r3, r1, r3
 8008702:	69ba      	ldr	r2, [r7, #24]
 8008704:	4313      	orrs	r3, r2
 8008706:	61bb      	str	r3, [r7, #24]
        if ((b & 0x80) == 0) {
 8008708:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800870c:	2b00      	cmp	r3, #0
 800870e:	db7e      	blt.n	800880e <mqtt_parse_incoming+0x196>
          /* fixed header is done */
          LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_parse_incoming: Remaining length after fixed header: %"U32_F"\n", msg_rem_len));
          if (msg_rem_len == 0) {
 8008710:	69bb      	ldr	r3, [r7, #24]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d10b      	bne.n	800872e <mqtt_parse_incoming+0xb6>
            /* Complete message with no extra headers of payload received */
            mqtt_message_received(client, fixed_hdr_idx, 0, 0);
 8008716:	7df9      	ldrb	r1, [r7, #23]
 8008718:	2300      	movs	r3, #0
 800871a:	2200      	movs	r2, #0
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	f7ff fdf3 	bl	8008308 <mqtt_message_received>
            client->msg_idx = 0;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2200      	movs	r2, #0
 8008726:	669a      	str	r2, [r3, #104]	; 0x68
            fixed_hdr_idx = 0;
 8008728:	2300      	movs	r3, #0
 800872a:	75fb      	strb	r3, [r7, #23]
 800872c:	e06f      	b.n	800880e <mqtt_parse_incoming+0x196>
          } else {
            /* Bytes remaining in message (changes remaining length if this is
               not the first segment of this message) */
            msg_rem_len = (msg_rem_len + fixed_hdr_idx) - client->msg_idx;
 800872e:	7dfa      	ldrb	r2, [r7, #23]
 8008730:	69bb      	ldr	r3, [r7, #24]
 8008732:	441a      	add	r2, r3
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008738:	1ad3      	subs	r3, r2, r3
 800873a:	61bb      	str	r3, [r7, #24]
      if (fixed_hdr_idx >= 2) {
 800873c:	e067      	b.n	800880e <mqtt_parse_incoming+0x196>
      }
    } else {
      /* Fixed header has been parsed, parse variable header */
      u16_t cpy_len, cpy_start, buffer_space;

      cpy_start = (client->msg_idx - fixed_hdr_idx) % (MQTT_VAR_HEADER_BUFFER_LEN - fixed_hdr_idx) + fixed_hdr_idx;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8008742:	7dfb      	ldrb	r3, [r7, #23]
 8008744:	1ad3      	subs	r3, r2, r3
 8008746:	7dfa      	ldrb	r2, [r7, #23]
 8008748:	f1c2 0280 	rsb	r2, r2, #128	; 0x80
 800874c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008750:	fb01 f202 	mul.w	r2, r1, r2
 8008754:	1a9b      	subs	r3, r3, r2
 8008756:	b29a      	uxth	r2, r3
 8008758:	7dfb      	ldrb	r3, [r7, #23]
 800875a:	b29b      	uxth	r3, r3
 800875c:	4413      	add	r3, r2
 800875e:	827b      	strh	r3, [r7, #18]

      /* Allow to copy the lesser one of available length in input data or bytes remaining in message */
      cpy_len = (u16_t)LWIP_MIN((u16_t)(p->tot_len - in_offset), msg_rem_len);
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	891a      	ldrh	r2, [r3, #8]
 8008764:	8bfb      	ldrh	r3, [r7, #30]
 8008766:	1ad3      	subs	r3, r2, r3
 8008768:	b29b      	uxth	r3, r3
 800876a:	461a      	mov	r2, r3
 800876c:	69bb      	ldr	r3, [r7, #24]
 800876e:	4293      	cmp	r3, r2
 8008770:	d905      	bls.n	800877e <mqtt_parse_incoming+0x106>
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	891a      	ldrh	r2, [r3, #8]
 8008776:	8bfb      	ldrh	r3, [r7, #30]
 8008778:	1ad3      	subs	r3, r2, r3
 800877a:	b29b      	uxth	r3, r3
 800877c:	e001      	b.n	8008782 <mqtt_parse_incoming+0x10a>
 800877e:	69bb      	ldr	r3, [r7, #24]
 8008780:	b29b      	uxth	r3, r3
 8008782:	82bb      	strh	r3, [r7, #20]

      /* Limit to available space in buffer */
      buffer_space = MQTT_VAR_HEADER_BUFFER_LEN - cpy_start;
 8008784:	8a7b      	ldrh	r3, [r7, #18]
 8008786:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800878a:	823b      	strh	r3, [r7, #16]
      if (cpy_len > buffer_space) {
 800878c:	8aba      	ldrh	r2, [r7, #20]
 800878e:	8a3b      	ldrh	r3, [r7, #16]
 8008790:	429a      	cmp	r2, r3
 8008792:	d901      	bls.n	8008798 <mqtt_parse_incoming+0x120>
        cpy_len = buffer_space;
 8008794:	8a3b      	ldrh	r3, [r7, #16]
 8008796:	82bb      	strh	r3, [r7, #20]
      }
      pbuf_copy_partial(p, client->rx_buffer + cpy_start, cpy_len, in_offset);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 800879e:	8a7b      	ldrh	r3, [r7, #18]
 80087a0:	18d1      	adds	r1, r2, r3
 80087a2:	8bfb      	ldrh	r3, [r7, #30]
 80087a4:	8aba      	ldrh	r2, [r7, #20]
 80087a6:	6838      	ldr	r0, [r7, #0]
 80087a8:	f002 fb8a 	bl	800aec0 <pbuf_copy_partial>

      /* Advance get and put indexes  */
      client->msg_idx += cpy_len;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80087b0:	8abb      	ldrh	r3, [r7, #20]
 80087b2:	441a      	add	r2, r3
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	669a      	str	r2, [r3, #104]	; 0x68
      in_offset += cpy_len;
 80087b8:	8bfa      	ldrh	r2, [r7, #30]
 80087ba:	8abb      	ldrh	r3, [r7, #20]
 80087bc:	4413      	add	r3, r2
 80087be:	83fb      	strh	r3, [r7, #30]
      msg_rem_len -= cpy_len;
 80087c0:	8abb      	ldrh	r3, [r7, #20]
 80087c2:	69ba      	ldr	r2, [r7, #24]
 80087c4:	1ad3      	subs	r3, r2, r3
 80087c6:	61bb      	str	r3, [r7, #24]

      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_parse_incoming: msg_idx: %"U32_F", cpy_len: %"U16_F", remaining %"U32_F"\n", client->msg_idx, cpy_len, msg_rem_len));
      if ((msg_rem_len == 0) || (cpy_len == buffer_space)) {
 80087c8:	69bb      	ldr	r3, [r7, #24]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d003      	beq.n	80087d6 <mqtt_parse_incoming+0x15e>
 80087ce:	8aba      	ldrh	r2, [r7, #20]
 80087d0:	8a3b      	ldrh	r3, [r7, #16]
 80087d2:	429a      	cmp	r2, r3
 80087d4:	d11b      	bne.n	800880e <mqtt_parse_incoming+0x196>
        /* Whole message received or buffer is full */
        mqtt_connection_status_t res = mqtt_message_received(client, fixed_hdr_idx, (cpy_start + cpy_len) - fixed_hdr_idx, msg_rem_len);
 80087d6:	8a7a      	ldrh	r2, [r7, #18]
 80087d8:	8abb      	ldrh	r3, [r7, #20]
 80087da:	4413      	add	r3, r2
 80087dc:	b29a      	uxth	r2, r3
 80087de:	7dfb      	ldrb	r3, [r7, #23]
 80087e0:	b29b      	uxth	r3, r3
 80087e2:	1ad3      	subs	r3, r2, r3
 80087e4:	b29a      	uxth	r2, r3
 80087e6:	7df9      	ldrb	r1, [r7, #23]
 80087e8:	69bb      	ldr	r3, [r7, #24]
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	f7ff fd8c 	bl	8008308 <mqtt_message_received>
 80087f0:	4603      	mov	r3, r0
 80087f2:	81fb      	strh	r3, [r7, #14]
        if (res != MQTT_CONNECT_ACCEPTED) {
 80087f4:	89fb      	ldrh	r3, [r7, #14]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d001      	beq.n	80087fe <mqtt_parse_incoming+0x186>
          return res;
 80087fa:	89fb      	ldrh	r3, [r7, #14]
 80087fc:	e00e      	b.n	800881c <mqtt_parse_incoming+0x1a4>
        }
        if (msg_rem_len == 0) {
 80087fe:	69bb      	ldr	r3, [r7, #24]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d104      	bne.n	800880e <mqtt_parse_incoming+0x196>
          /* Reset parser state */
          client->msg_idx = 0;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2200      	movs	r2, #0
 8008808:	669a      	str	r2, [r3, #104]	; 0x68
          /* msg_tot_len = 0; */
          fixed_hdr_idx = 0;
 800880a:	2300      	movs	r3, #0
 800880c:	75fb      	strb	r3, [r7, #23]
  while (p->tot_len > in_offset) {
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	891b      	ldrh	r3, [r3, #8]
 8008812:	8bfa      	ldrh	r2, [r7, #30]
 8008814:	429a      	cmp	r2, r3
 8008816:	f4ff af3d 	bcc.w	8008694 <mqtt_parse_incoming+0x1c>
        }
      }
    }
  }
  return MQTT_CONNECT_ACCEPTED;
 800881a:	2300      	movs	r3, #0
}
 800881c:	4618      	mov	r0, r3
 800881e:	3720      	adds	r7, #32
 8008820:	46bd      	mov	sp, r7
 8008822:	bd80      	pop	{r7, pc}

08008824 <mqtt_tcp_recv_cb>:
 * @param err Passed as return value if not ERR_OK
 * @return ERR_OK or err passed into callback
 */
static err_t
mqtt_tcp_recv_cb(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b086      	sub	sp, #24
 8008828:	af00      	add	r7, sp, #0
 800882a:	60f8      	str	r0, [r7, #12]
 800882c:	60b9      	str	r1, [r7, #8]
 800882e:	607a      	str	r2, [r7, #4]
 8008830:	70fb      	strb	r3, [r7, #3]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	617b      	str	r3, [r7, #20]
  LWIP_ASSERT("mqtt_tcp_recv_cb: client != NULL", client != NULL);
 8008836:	697b      	ldr	r3, [r7, #20]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d106      	bne.n	800884a <mqtt_tcp_recv_cb+0x26>
 800883c:	4b24      	ldr	r3, [pc, #144]	; (80088d0 <mqtt_tcp_recv_cb+0xac>)
 800883e:	f240 32a7 	movw	r2, #935	; 0x3a7
 8008842:	4924      	ldr	r1, [pc, #144]	; (80088d4 <mqtt_tcp_recv_cb+0xb0>)
 8008844:	4824      	ldr	r0, [pc, #144]	; (80088d8 <mqtt_tcp_recv_cb+0xb4>)
 8008846:	f00d fde3 	bl	8016410 <iprintf>
  LWIP_ASSERT("mqtt_tcp_recv_cb: client->conn == pcb", client->conn == pcb);
 800884a:	697b      	ldr	r3, [r7, #20]
 800884c:	68db      	ldr	r3, [r3, #12]
 800884e:	68ba      	ldr	r2, [r7, #8]
 8008850:	429a      	cmp	r2, r3
 8008852:	d006      	beq.n	8008862 <mqtt_tcp_recv_cb+0x3e>
 8008854:	4b1e      	ldr	r3, [pc, #120]	; (80088d0 <mqtt_tcp_recv_cb+0xac>)
 8008856:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800885a:	4920      	ldr	r1, [pc, #128]	; (80088dc <mqtt_tcp_recv_cb+0xb8>)
 800885c:	481e      	ldr	r0, [pc, #120]	; (80088d8 <mqtt_tcp_recv_cb+0xb4>)
 800885e:	f00d fdd7 	bl	8016410 <iprintf>

  if (p == NULL) {
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d105      	bne.n	8008874 <mqtt_tcp_recv_cb+0x50>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_recv_cb: Recv pbuf=NULL, remote has closed connection\n"));
    mqtt_close(client, MQTT_CONNECT_DISCONNECTED);
 8008868:	f44f 7180 	mov.w	r1, #256	; 0x100
 800886c:	6978      	ldr	r0, [r7, #20]
 800886e:	f7ff fbfb 	bl	8008068 <mqtt_close>
 8008872:	e027      	b.n	80088c4 <mqtt_tcp_recv_cb+0xa0>
  } else {
    mqtt_connection_status_t res;
    if (err != ERR_OK) {
 8008874:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d005      	beq.n	8008888 <mqtt_tcp_recv_cb+0x64>
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_tcp_recv_cb: Recv err=%d\n", err));
      pbuf_free(p);
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f002 f919 	bl	800aab4 <pbuf_free>
      return err;
 8008882:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008886:	e01e      	b.n	80088c6 <mqtt_tcp_recv_cb+0xa2>
    }

    /* Tell remote that data has been received */
    altcp_recved(pcb, p->tot_len);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	891b      	ldrh	r3, [r3, #8]
 800888c:	4619      	mov	r1, r3
 800888e:	68b8      	ldr	r0, [r7, #8]
 8008890:	f003 f816 	bl	800b8c0 <tcp_recved>
    res = mqtt_parse_incoming(client, p);
 8008894:	6879      	ldr	r1, [r7, #4]
 8008896:	6978      	ldr	r0, [r7, #20]
 8008898:	f7ff feee 	bl	8008678 <mqtt_parse_incoming>
 800889c:	4603      	mov	r3, r0
 800889e:	827b      	strh	r3, [r7, #18]
    pbuf_free(p);
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f002 f907 	bl	800aab4 <pbuf_free>

    if (res != MQTT_CONNECT_ACCEPTED) {
 80088a6:	8a7b      	ldrh	r3, [r7, #18]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d004      	beq.n	80088b6 <mqtt_tcp_recv_cb+0x92>
      mqtt_close(client, res);
 80088ac:	8a7b      	ldrh	r3, [r7, #18]
 80088ae:	4619      	mov	r1, r3
 80088b0:	6978      	ldr	r0, [r7, #20]
 80088b2:	f7ff fbd9 	bl	8008068 <mqtt_close>
    }
    /* If keep alive functionality is used */
    if (client->keep_alive != 0) {
 80088b6:	697b      	ldr	r3, [r7, #20]
 80088b8:	885b      	ldrh	r3, [r3, #2]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d002      	beq.n	80088c4 <mqtt_tcp_recv_cb+0xa0>
      /* Reset server alive watchdog */
      client->server_watchdog = 0;
 80088be:	697b      	ldr	r3, [r7, #20]
 80088c0:	2200      	movs	r2, #0
 80088c2:	809a      	strh	r2, [r3, #4]
    }

  }
  return ERR_OK;
 80088c4:	2300      	movs	r3, #0
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	3718      	adds	r7, #24
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}
 80088ce:	bf00      	nop
 80088d0:	08017ce0 	.word	0x08017ce0
 80088d4:	08017f80 	.word	0x08017f80
 80088d8:	08017d58 	.word	0x08017d58
 80088dc:	08017fa4 	.word	0x08017fa4

080088e0 <mqtt_tcp_sent_cb>:
 * @param len Number of bytes sent
 * @return ERR_OK
 */
static err_t
mqtt_tcp_sent_cb(void *arg, struct altcp_pcb *tpcb, u16_t len)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b086      	sub	sp, #24
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	60f8      	str	r0, [r7, #12]
 80088e8:	60b9      	str	r1, [r7, #8]
 80088ea:	4613      	mov	r3, r2
 80088ec:	80fb      	strh	r3, [r7, #6]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(tpcb);
  LWIP_UNUSED_ARG(len);

  if (client->conn_state == MQTT_CONNECTED) {
 80088f2:	697b      	ldr	r3, [r7, #20]
 80088f4:	7a9b      	ldrb	r3, [r3, #10]
 80088f6:	2b03      	cmp	r3, #3
 80088f8:	d127      	bne.n	800894a <mqtt_tcp_sent_cb+0x6a>
    struct mqtt_request_t *r;

    /* Reset keep-alive send timer and server watchdog */
    client->cyclic_tick = 0;
 80088fa:	697b      	ldr	r3, [r7, #20]
 80088fc:	2200      	movs	r2, #0
 80088fe:	801a      	strh	r2, [r3, #0]
    client->server_watchdog = 0;
 8008900:	697b      	ldr	r3, [r7, #20]
 8008902:	2200      	movs	r2, #0
 8008904:	809a      	strh	r2, [r3, #4]
    /* QoS 0 publish has no response from server, so call its callbacks here */
    while ((r = mqtt_take_request(&client->pend_req_queue, 0)) != NULL) {
 8008906:	e00d      	b.n	8008924 <mqtt_tcp_sent_cb+0x44>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_sent_cb: Calling QoS 0 publish complete callback\n"));
      if (r->cb != NULL) {
 8008908:	693b      	ldr	r3, [r7, #16]
 800890a:	685b      	ldr	r3, [r3, #4]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d006      	beq.n	800891e <mqtt_tcp_sent_cb+0x3e>
        r->cb(r->arg, ERR_OK);
 8008910:	693b      	ldr	r3, [r7, #16]
 8008912:	685b      	ldr	r3, [r3, #4]
 8008914:	693a      	ldr	r2, [r7, #16]
 8008916:	6892      	ldr	r2, [r2, #8]
 8008918:	2100      	movs	r1, #0
 800891a:	4610      	mov	r0, r2
 800891c:	4798      	blx	r3
      }
      mqtt_delete_request(r);
 800891e:	6938      	ldr	r0, [r7, #16]
 8008920:	f7ff f9a8 	bl	8007c74 <mqtt_delete_request>
    while ((r = mqtt_take_request(&client->pend_req_queue, 0)) != NULL) {
 8008924:	697b      	ldr	r3, [r7, #20]
 8008926:	3318      	adds	r3, #24
 8008928:	2100      	movs	r1, #0
 800892a:	4618      	mov	r0, r3
 800892c:	f7ff f9b2 	bl	8007c94 <mqtt_take_request>
 8008930:	6138      	str	r0, [r7, #16]
 8008932:	693b      	ldr	r3, [r7, #16]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d1e7      	bne.n	8008908 <mqtt_tcp_sent_cb+0x28>
    }
    /* Try send any remaining buffers from output queue */
    mqtt_output_send(&client->output, client->conn);
 8008938:	697b      	ldr	r3, [r7, #20]
 800893a:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 800893e:	697b      	ldr	r3, [r7, #20]
 8008940:	68db      	ldr	r3, [r3, #12]
 8008942:	4619      	mov	r1, r3
 8008944:	4610      	mov	r0, r2
 8008946:	f7ff f84f 	bl	80079e8 <mqtt_output_send>
  }
  return ERR_OK;
 800894a:	2300      	movs	r3, #0
}
 800894c:	4618      	mov	r0, r3
 800894e:	3718      	adds	r7, #24
 8008950:	46bd      	mov	sp, r7
 8008952:	bd80      	pop	{r7, pc}

08008954 <mqtt_tcp_err_cb>:
 * @param arg MQTT client
 * @param err Error encountered
 */
static void
mqtt_tcp_err_cb(void *arg, err_t err)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b084      	sub	sp, #16
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
 800895c:	460b      	mov	r3, r1
 800895e:	70fb      	strb	r3, [r7, #3]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err); /* only used for debug output */
  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_err_cb: TCP error callback: error %d, arg: %p\n", err, arg));
  LWIP_ASSERT("mqtt_tcp_err_cb: client != NULL", client != NULL);
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d106      	bne.n	8008978 <mqtt_tcp_err_cb+0x24>
 800896a:	4b09      	ldr	r3, [pc, #36]	; (8008990 <mqtt_tcp_err_cb+0x3c>)
 800896c:	f240 32f6 	movw	r2, #1014	; 0x3f6
 8008970:	4908      	ldr	r1, [pc, #32]	; (8008994 <mqtt_tcp_err_cb+0x40>)
 8008972:	4809      	ldr	r0, [pc, #36]	; (8008998 <mqtt_tcp_err_cb+0x44>)
 8008974:	f00d fd4c 	bl	8016410 <iprintf>
  /* Set conn to null before calling close as pcb is already deallocated*/
  client->conn = 0;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	2200      	movs	r2, #0
 800897c:	60da      	str	r2, [r3, #12]
  mqtt_close(client, MQTT_CONNECT_DISCONNECTED);
 800897e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008982:	68f8      	ldr	r0, [r7, #12]
 8008984:	f7ff fb70 	bl	8008068 <mqtt_close>
}
 8008988:	bf00      	nop
 800898a:	3710      	adds	r7, #16
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}
 8008990:	08017ce0 	.word	0x08017ce0
 8008994:	08017fcc 	.word	0x08017fcc
 8008998:	08017d58 	.word	0x08017d58

0800899c <mqtt_tcp_poll_cb>:
 * @param tpcb TCP connection handle
 * @return err ERR_OK
 */
static err_t
mqtt_tcp_poll_cb(void *arg, struct altcp_pcb *tpcb)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b084      	sub	sp, #16
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
 80089a4:	6039      	str	r1, [r7, #0]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	60fb      	str	r3, [r7, #12]
  if (client->conn_state == MQTT_CONNECTED) {
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	7a9b      	ldrb	r3, [r3, #10]
 80089ae:	2b03      	cmp	r3, #3
 80089b0:	d105      	bne.n	80089be <mqtt_tcp_poll_cb+0x22>
    /* Try send any remaining buffers from output queue */
    mqtt_output_send(&client->output, tpcb);
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	33ec      	adds	r3, #236	; 0xec
 80089b6:	6839      	ldr	r1, [r7, #0]
 80089b8:	4618      	mov	r0, r3
 80089ba:	f7ff f815 	bl	80079e8 <mqtt_output_send>
  }
  return ERR_OK;
 80089be:	2300      	movs	r3, #0
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	3710      	adds	r7, #16
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd80      	pop	{r7, pc}

080089c8 <mqtt_tcp_connect_cb>:
 * @param err Always ERR_OK, mqtt_tcp_err_cb is called in case of error
 * @return ERR_OK
 */
static err_t
mqtt_tcp_connect_cb(void *arg, struct altcp_pcb *tpcb, err_t err)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b086      	sub	sp, #24
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	60f8      	str	r0, [r7, #12]
 80089d0:	60b9      	str	r1, [r7, #8]
 80089d2:	4613      	mov	r3, r2
 80089d4:	71fb      	strb	r3, [r7, #7]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	617b      	str	r3, [r7, #20]

  if (err != ERR_OK) {
 80089da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d002      	beq.n	80089e8 <mqtt_tcp_connect_cb+0x20>
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_tcp_connect_cb: TCP connect error %d\n", err));
    return err;
 80089e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80089e6:	e025      	b.n	8008a34 <mqtt_tcp_connect_cb+0x6c>
  }

  /* Initiate receiver state */
  client->msg_idx = 0;
 80089e8:	697b      	ldr	r3, [r7, #20]
 80089ea:	2200      	movs	r2, #0
 80089ec:	669a      	str	r2, [r3, #104]	; 0x68

  /* Setup TCP callbacks */
  altcp_recv(tpcb, mqtt_tcp_recv_cb);
 80089ee:	4913      	ldr	r1, [pc, #76]	; (8008a3c <mqtt_tcp_connect_cb+0x74>)
 80089f0:	68b8      	ldr	r0, [r7, #8]
 80089f2:	f003 ff55 	bl	800c8a0 <tcp_recv>
  altcp_sent(tpcb, mqtt_tcp_sent_cb);
 80089f6:	4912      	ldr	r1, [pc, #72]	; (8008a40 <mqtt_tcp_connect_cb+0x78>)
 80089f8:	68b8      	ldr	r0, [r7, #8]
 80089fa:	f003 ff73 	bl	800c8e4 <tcp_sent>
  altcp_poll(tpcb, mqtt_tcp_poll_cb, 2);
 80089fe:	2202      	movs	r2, #2
 8008a00:	4910      	ldr	r1, [pc, #64]	; (8008a44 <mqtt_tcp_connect_cb+0x7c>)
 8008a02:	68b8      	ldr	r0, [r7, #8]
 8008a04:	f003 ffb2 	bl	800c96c <tcp_poll>

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_connect_cb: TCP connection established to server\n"));
  /* Enter MQTT connect state */
  client->conn_state = MQTT_CONNECTING;
 8008a08:	697b      	ldr	r3, [r7, #20]
 8008a0a:	2202      	movs	r2, #2
 8008a0c:	729a      	strb	r2, [r3, #10]

  /* Start cyclic timer */
  sys_timeout(MQTT_CYCLIC_TIMER_INTERVAL * 1000, mqtt_cyclic_timer, client);
 8008a0e:	697a      	ldr	r2, [r7, #20]
 8008a10:	490d      	ldr	r1, [pc, #52]	; (8008a48 <mqtt_tcp_connect_cb+0x80>)
 8008a12:	f241 3088 	movw	r0, #5000	; 0x1388
 8008a16:	f008 fc9d 	bl	8011354 <sys_timeout>
  client->cyclic_tick = 0;
 8008a1a:	697b      	ldr	r3, [r7, #20]
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	801a      	strh	r2, [r3, #0]

  /* Start transmission from output queue, connect message is the first one out*/
  mqtt_output_send(&client->output, client->conn);
 8008a20:	697b      	ldr	r3, [r7, #20]
 8008a22:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	68db      	ldr	r3, [r3, #12]
 8008a2a:	4619      	mov	r1, r3
 8008a2c:	4610      	mov	r0, r2
 8008a2e:	f7fe ffdb 	bl	80079e8 <mqtt_output_send>

  return ERR_OK;
 8008a32:	2300      	movs	r3, #0
}
 8008a34:	4618      	mov	r0, r3
 8008a36:	3718      	adds	r7, #24
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}
 8008a3c:	08008825 	.word	0x08008825
 8008a40:	080088e1 	.word	0x080088e1
 8008a44:	0800899d 	.word	0x0800899d
 8008a48:	08008129 	.word	0x08008129

08008a4c <mqtt_publish>:
 *         ERR_MEM if short on memory
 */
err_t
mqtt_publish(mqtt_client_t *client, const char *topic, const void *payload, u16_t payload_length, u8_t qos, u8_t retain,
             mqtt_request_cb_t cb, void *arg)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b08c      	sub	sp, #48	; 0x30
 8008a50:	af02      	add	r7, sp, #8
 8008a52:	60f8      	str	r0, [r7, #12]
 8008a54:	60b9      	str	r1, [r7, #8]
 8008a56:	607a      	str	r2, [r7, #4]
 8008a58:	807b      	strh	r3, [r7, #2]
  size_t total_len;
  u16_t topic_len;
  u16_t remaining_length;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_publish: client != NULL", client);
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d106      	bne.n	8008a6e <mqtt_publish+0x22>
 8008a60:	4b5d      	ldr	r3, [pc, #372]	; (8008bd8 <mqtt_publish+0x18c>)
 8008a62:	f240 4254 	movw	r2, #1108	; 0x454
 8008a66:	495d      	ldr	r1, [pc, #372]	; (8008bdc <mqtt_publish+0x190>)
 8008a68:	485d      	ldr	r0, [pc, #372]	; (8008be0 <mqtt_publish+0x194>)
 8008a6a:	f00d fcd1 	bl	8016410 <iprintf>
  LWIP_ASSERT("mqtt_publish: topic != NULL", topic);
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d106      	bne.n	8008a82 <mqtt_publish+0x36>
 8008a74:	4b58      	ldr	r3, [pc, #352]	; (8008bd8 <mqtt_publish+0x18c>)
 8008a76:	f240 4255 	movw	r2, #1109	; 0x455
 8008a7a:	495a      	ldr	r1, [pc, #360]	; (8008be4 <mqtt_publish+0x198>)
 8008a7c:	4858      	ldr	r0, [pc, #352]	; (8008be0 <mqtt_publish+0x194>)
 8008a7e:	f00d fcc7 	bl	8016410 <iprintf>
  LWIP_ERROR("mqtt_publish: TCP disconnected", (client->conn_state != TCP_DISCONNECTED), return ERR_CONN);
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	7a9b      	ldrb	r3, [r3, #10]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d109      	bne.n	8008a9e <mqtt_publish+0x52>
 8008a8a:	4b53      	ldr	r3, [pc, #332]	; (8008bd8 <mqtt_publish+0x18c>)
 8008a8c:	f240 4256 	movw	r2, #1110	; 0x456
 8008a90:	4955      	ldr	r1, [pc, #340]	; (8008be8 <mqtt_publish+0x19c>)
 8008a92:	4853      	ldr	r0, [pc, #332]	; (8008be0 <mqtt_publish+0x194>)
 8008a94:	f00d fcbc 	bl	8016410 <iprintf>
 8008a98:	f06f 030a 	mvn.w	r3, #10
 8008a9c:	e097      	b.n	8008bce <mqtt_publish+0x182>

  topic_strlen = strlen(topic);
 8008a9e:	68b8      	ldr	r0, [r7, #8]
 8008aa0:	f7f7 fba0 	bl	80001e4 <strlen>
 8008aa4:	61f8      	str	r0, [r7, #28]
  LWIP_ERROR("mqtt_publish: topic length overflow", (topic_strlen <= (0xFFFF - 2)), return ERR_ARG);
 8008aa6:	69fb      	ldr	r3, [r7, #28]
 8008aa8:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8008aac:	4293      	cmp	r3, r2
 8008aae:	d909      	bls.n	8008ac4 <mqtt_publish+0x78>
 8008ab0:	4b49      	ldr	r3, [pc, #292]	; (8008bd8 <mqtt_publish+0x18c>)
 8008ab2:	f240 4259 	movw	r2, #1113	; 0x459
 8008ab6:	494d      	ldr	r1, [pc, #308]	; (8008bec <mqtt_publish+0x1a0>)
 8008ab8:	4849      	ldr	r0, [pc, #292]	; (8008be0 <mqtt_publish+0x194>)
 8008aba:	f00d fca9 	bl	8016410 <iprintf>
 8008abe:	f06f 030f 	mvn.w	r3, #15
 8008ac2:	e084      	b.n	8008bce <mqtt_publish+0x182>
  topic_len = (u16_t)topic_strlen;
 8008ac4:	69fb      	ldr	r3, [r7, #28]
 8008ac6:	837b      	strh	r3, [r7, #26]
  total_len = 2 + topic_len + payload_length;
 8008ac8:	8b7b      	ldrh	r3, [r7, #26]
 8008aca:	1c9a      	adds	r2, r3, #2
 8008acc:	887b      	ldrh	r3, [r7, #2]
 8008ace:	4413      	add	r3, r2
 8008ad0:	623b      	str	r3, [r7, #32]

  if (qos > 0) {
 8008ad2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d008      	beq.n	8008aec <mqtt_publish+0xa0>
    total_len += 2;
 8008ada:	6a3b      	ldr	r3, [r7, #32]
 8008adc:	3302      	adds	r3, #2
 8008ade:	623b      	str	r3, [r7, #32]
    /* Generate pkt_id id for QoS1 and 2 */
    pkt_id = msg_generate_packet_id(client);
 8008ae0:	68f8      	ldr	r0, [r7, #12]
 8008ae2:	f7fe feed 	bl	80078c0 <msg_generate_packet_id>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008aea:	e001      	b.n	8008af0 <mqtt_publish+0xa4>
  } else {
    /* Use reserved value pkt_id 0 for QoS 0 in request handle */
    pkt_id = 0;
 8008aec:	2300      	movs	r3, #0
 8008aee:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  LWIP_ERROR("mqtt_publish: total length overflow", (total_len <= 0xFFFF), return ERR_ARG);
 8008af0:	6a3b      	ldr	r3, [r7, #32]
 8008af2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008af6:	d309      	bcc.n	8008b0c <mqtt_publish+0xc0>
 8008af8:	4b37      	ldr	r3, [pc, #220]	; (8008bd8 <mqtt_publish+0x18c>)
 8008afa:	f240 4265 	movw	r2, #1125	; 0x465
 8008afe:	493c      	ldr	r1, [pc, #240]	; (8008bf0 <mqtt_publish+0x1a4>)
 8008b00:	4837      	ldr	r0, [pc, #220]	; (8008be0 <mqtt_publish+0x194>)
 8008b02:	f00d fc85 	bl	8016410 <iprintf>
 8008b06:	f06f 030f 	mvn.w	r3, #15
 8008b0a:	e060      	b.n	8008bce <mqtt_publish+0x182>
  remaining_length = (u16_t)total_len;
 8008b0c:	6a3b      	ldr	r3, [r7, #32]
 8008b0e:	833b      	strh	r3, [r7, #24]

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_publish: Publish with payload length %d to topic \"%s\"\n", payload_length, topic));

  r = mqtt_create_request(client->req_list, LWIP_ARRAYSIZE(client->req_list), pkt_id, cb, arg);
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	f103 001c 	add.w	r0, r3, #28
 8008b16:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008b18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b1a:	9300      	str	r3, [sp, #0]
 8008b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b1e:	2104      	movs	r1, #4
 8008b20:	f7ff f816 	bl	8007b50 <mqtt_create_request>
 8008b24:	6178      	str	r0, [r7, #20]
  if (r == NULL) {
 8008b26:	697b      	ldr	r3, [r7, #20]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d102      	bne.n	8008b32 <mqtt_publish+0xe6>
    return ERR_MEM;
 8008b2c:	f04f 33ff 	mov.w	r3, #4294967295
 8008b30:	e04d      	b.n	8008bce <mqtt_publish+0x182>
  }

  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	33ec      	adds	r3, #236	; 0xec
 8008b36:	8b3a      	ldrh	r2, [r7, #24]
 8008b38:	4611      	mov	r1, r2
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f7ff fa62 	bl	8008004 <mqtt_output_check_space>
 8008b40:	4603      	mov	r3, r0
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d105      	bne.n	8008b52 <mqtt_publish+0x106>
    mqtt_delete_request(r);
 8008b46:	6978      	ldr	r0, [r7, #20]
 8008b48:	f7ff f894 	bl	8007c74 <mqtt_delete_request>
    return ERR_MEM;
 8008b4c:	f04f 33ff 	mov.w	r3, #4294967295
 8008b50:	e03d      	b.n	8008bce <mqtt_publish+0x182>
  }
  /* Append fixed header */
  mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_PUBLISH, 0, qos, retain, remaining_length);
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8008b58:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8008b5c:	8b3b      	ldrh	r3, [r7, #24]
 8008b5e:	9301      	str	r3, [sp, #4]
 8008b60:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8008b64:	9300      	str	r3, [sp, #0]
 8008b66:	4613      	mov	r3, r2
 8008b68:	2200      	movs	r2, #0
 8008b6a:	2103      	movs	r1, #3
 8008b6c:	f7ff f9ff 	bl	8007f6e <mqtt_output_append_fixed_header>

  /* Append Topic */
  mqtt_output_append_string(&client->output, topic, topic_len);
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	33ec      	adds	r3, #236	; 0xec
 8008b74:	8b7a      	ldrh	r2, [r7, #26]
 8008b76:	68b9      	ldr	r1, [r7, #8]
 8008b78:	4618      	mov	r0, r3
 8008b7a:	f7ff f9cc 	bl	8007f16 <mqtt_output_append_string>

  /* Append packet if for QoS 1 and 2*/
  if (qos > 0) {
 8008b7e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d006      	beq.n	8008b94 <mqtt_publish+0x148>
    mqtt_output_append_u16(&client->output, pkt_id);
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	33ec      	adds	r3, #236	; 0xec
 8008b8a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008b8c:	4611      	mov	r1, r2
 8008b8e:	4618      	mov	r0, r3
 8008b90:	f7ff f98b 	bl	8007eaa <mqtt_output_append_u16>
  }

  /* Append optional publish payload */
  if ((payload != NULL) && (payload_length > 0)) {
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d009      	beq.n	8008bae <mqtt_publish+0x162>
 8008b9a:	887b      	ldrh	r3, [r7, #2]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d006      	beq.n	8008bae <mqtt_publish+0x162>
    mqtt_output_append_buf(&client->output, payload, payload_length);
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	33ec      	adds	r3, #236	; 0xec
 8008ba4:	887a      	ldrh	r2, [r7, #2]
 8008ba6:	6879      	ldr	r1, [r7, #4]
 8008ba8:	4618      	mov	r0, r3
 8008baa:	f7ff f996 	bl	8007eda <mqtt_output_append_buf>
  }

  mqtt_append_request(&client->pend_req_queue, r);
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	3318      	adds	r3, #24
 8008bb2:	6979      	ldr	r1, [r7, #20]
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	f7ff f811 	bl	8007bdc <mqtt_append_request>
  mqtt_output_send(&client->output, client->conn);
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	68db      	ldr	r3, [r3, #12]
 8008bc4:	4619      	mov	r1, r3
 8008bc6:	4610      	mov	r0, r2
 8008bc8:	f7fe ff0e 	bl	80079e8 <mqtt_output_send>
  return ERR_OK;
 8008bcc:	2300      	movs	r3, #0
}
 8008bce:	4618      	mov	r0, r3
 8008bd0:	3728      	adds	r7, #40	; 0x28
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bd80      	pop	{r7, pc}
 8008bd6:	bf00      	nop
 8008bd8:	08017ce0 	.word	0x08017ce0
 8008bdc:	08017fec 	.word	0x08017fec
 8008be0:	08017d58 	.word	0x08017d58
 8008be4:	0801800c 	.word	0x0801800c
 8008be8:	08018028 	.word	0x08018028
 8008bec:	08018048 	.word	0x08018048
 8008bf0:	0801806c 	.word	0x0801806c

08008bf4 <mqtt_sub_unsub>:
 * @param sub 1 for subscribe, 0 for unsubscribe
 * @return ERR_OK if successful, @see err_t enum for other results
 */
err_t
mqtt_sub_unsub(mqtt_client_t *client, const char *topic, u8_t qos, mqtt_request_cb_t cb, void *arg, u8_t sub)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b08c      	sub	sp, #48	; 0x30
 8008bf8:	af02      	add	r7, sp, #8
 8008bfa:	60f8      	str	r0, [r7, #12]
 8008bfc:	60b9      	str	r1, [r7, #8]
 8008bfe:	603b      	str	r3, [r7, #0]
 8008c00:	4613      	mov	r3, r2
 8008c02:	71fb      	strb	r3, [r7, #7]
  u16_t remaining_length;
  u16_t pkt_id;
  struct mqtt_request_t *r;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_sub_unsub: client != NULL", client);
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d106      	bne.n	8008c18 <mqtt_sub_unsub+0x24>
 8008c0a:	4b5e      	ldr	r3, [pc, #376]	; (8008d84 <mqtt_sub_unsub+0x190>)
 8008c0c:	f240 429f 	movw	r2, #1183	; 0x49f
 8008c10:	495d      	ldr	r1, [pc, #372]	; (8008d88 <mqtt_sub_unsub+0x194>)
 8008c12:	485e      	ldr	r0, [pc, #376]	; (8008d8c <mqtt_sub_unsub+0x198>)
 8008c14:	f00d fbfc 	bl	8016410 <iprintf>
  LWIP_ASSERT("mqtt_sub_unsub: topic != NULL", topic);
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d106      	bne.n	8008c2c <mqtt_sub_unsub+0x38>
 8008c1e:	4b59      	ldr	r3, [pc, #356]	; (8008d84 <mqtt_sub_unsub+0x190>)
 8008c20:	f44f 6294 	mov.w	r2, #1184	; 0x4a0
 8008c24:	495a      	ldr	r1, [pc, #360]	; (8008d90 <mqtt_sub_unsub+0x19c>)
 8008c26:	4859      	ldr	r0, [pc, #356]	; (8008d8c <mqtt_sub_unsub+0x198>)
 8008c28:	f00d fbf2 	bl	8016410 <iprintf>

  topic_strlen = strlen(topic);
 8008c2c:	68b8      	ldr	r0, [r7, #8]
 8008c2e:	f7f7 fad9 	bl	80001e4 <strlen>
 8008c32:	6278      	str	r0, [r7, #36]	; 0x24
  LWIP_ERROR("mqtt_sub_unsub: topic length overflow", (topic_strlen <= (0xFFFF - 2)), return ERR_ARG);
 8008c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c36:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	d909      	bls.n	8008c52 <mqtt_sub_unsub+0x5e>
 8008c3e:	4b51      	ldr	r3, [pc, #324]	; (8008d84 <mqtt_sub_unsub+0x190>)
 8008c40:	f240 42a3 	movw	r2, #1187	; 0x4a3
 8008c44:	4953      	ldr	r1, [pc, #332]	; (8008d94 <mqtt_sub_unsub+0x1a0>)
 8008c46:	4851      	ldr	r0, [pc, #324]	; (8008d8c <mqtt_sub_unsub+0x198>)
 8008c48:	f00d fbe2 	bl	8016410 <iprintf>
 8008c4c:	f06f 030f 	mvn.w	r3, #15
 8008c50:	e093      	b.n	8008d7a <mqtt_sub_unsub+0x186>
  topic_len = (u16_t)topic_strlen;
 8008c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c54:	847b      	strh	r3, [r7, #34]	; 0x22
  /* Topic string, pkt_id, qos for subscribe */
  total_len =  topic_len + 2 + 2 + (sub != 0);
 8008c56:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008c58:	3304      	adds	r3, #4
 8008c5a:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8008c5e:	2a00      	cmp	r2, #0
 8008c60:	bf14      	ite	ne
 8008c62:	2201      	movne	r2, #1
 8008c64:	2200      	moveq	r2, #0
 8008c66:	b2d2      	uxtb	r2, r2
 8008c68:	4413      	add	r3, r2
 8008c6a:	61fb      	str	r3, [r7, #28]
  LWIP_ERROR("mqtt_sub_unsub: total length overflow", (total_len <= 0xFFFF), return ERR_ARG);
 8008c6c:	69fb      	ldr	r3, [r7, #28]
 8008c6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c72:	d309      	bcc.n	8008c88 <mqtt_sub_unsub+0x94>
 8008c74:	4b43      	ldr	r3, [pc, #268]	; (8008d84 <mqtt_sub_unsub+0x190>)
 8008c76:	f240 42a7 	movw	r2, #1191	; 0x4a7
 8008c7a:	4947      	ldr	r1, [pc, #284]	; (8008d98 <mqtt_sub_unsub+0x1a4>)
 8008c7c:	4843      	ldr	r0, [pc, #268]	; (8008d8c <mqtt_sub_unsub+0x198>)
 8008c7e:	f00d fbc7 	bl	8016410 <iprintf>
 8008c82:	f06f 030f 	mvn.w	r3, #15
 8008c86:	e078      	b.n	8008d7a <mqtt_sub_unsub+0x186>
  remaining_length = (u16_t)total_len;
 8008c88:	69fb      	ldr	r3, [r7, #28]
 8008c8a:	837b      	strh	r3, [r7, #26]

  LWIP_ASSERT("mqtt_sub_unsub: qos < 3", qos < 3);
 8008c8c:	79fb      	ldrb	r3, [r7, #7]
 8008c8e:	2b02      	cmp	r3, #2
 8008c90:	d906      	bls.n	8008ca0 <mqtt_sub_unsub+0xac>
 8008c92:	4b3c      	ldr	r3, [pc, #240]	; (8008d84 <mqtt_sub_unsub+0x190>)
 8008c94:	f240 42aa 	movw	r2, #1194	; 0x4aa
 8008c98:	4940      	ldr	r1, [pc, #256]	; (8008d9c <mqtt_sub_unsub+0x1a8>)
 8008c9a:	483c      	ldr	r0, [pc, #240]	; (8008d8c <mqtt_sub_unsub+0x198>)
 8008c9c:	f00d fbb8 	bl	8016410 <iprintf>
  if (client->conn_state == TCP_DISCONNECTED) {
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	7a9b      	ldrb	r3, [r3, #10]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d102      	bne.n	8008cae <mqtt_sub_unsub+0xba>
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_sub_unsub: Can not (un)subscribe in disconnected state\n"));
    return ERR_CONN;
 8008ca8:	f06f 030a 	mvn.w	r3, #10
 8008cac:	e065      	b.n	8008d7a <mqtt_sub_unsub+0x186>
  }

  pkt_id = msg_generate_packet_id(client);
 8008cae:	68f8      	ldr	r0, [r7, #12]
 8008cb0:	f7fe fe06 	bl	80078c0 <msg_generate_packet_id>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	833b      	strh	r3, [r7, #24]
  r = mqtt_create_request(client->req_list, LWIP_ARRAYSIZE(client->req_list), pkt_id, cb, arg);
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	f103 001c 	add.w	r0, r3, #28
 8008cbe:	8b3a      	ldrh	r2, [r7, #24]
 8008cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cc2:	9300      	str	r3, [sp, #0]
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	2104      	movs	r1, #4
 8008cc8:	f7fe ff42 	bl	8007b50 <mqtt_create_request>
 8008ccc:	6178      	str	r0, [r7, #20]
  if (r == NULL) {
 8008cce:	697b      	ldr	r3, [r7, #20]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d102      	bne.n	8008cda <mqtt_sub_unsub+0xe6>
    return ERR_MEM;
 8008cd4:	f04f 33ff 	mov.w	r3, #4294967295
 8008cd8:	e04f      	b.n	8008d7a <mqtt_sub_unsub+0x186>
  }

  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	33ec      	adds	r3, #236	; 0xec
 8008cde:	8b7a      	ldrh	r2, [r7, #26]
 8008ce0:	4611      	mov	r1, r2
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	f7ff f98e 	bl	8008004 <mqtt_output_check_space>
 8008ce8:	4603      	mov	r3, r0
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d105      	bne.n	8008cfa <mqtt_sub_unsub+0x106>
    mqtt_delete_request(r);
 8008cee:	6978      	ldr	r0, [r7, #20]
 8008cf0:	f7fe ffc0 	bl	8007c74 <mqtt_delete_request>
    return ERR_MEM;
 8008cf4:	f04f 33ff 	mov.w	r3, #4294967295
 8008cf8:	e03f      	b.n	8008d7a <mqtt_sub_unsub+0x186>
  }

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_sub_unsub: Client (un)subscribe to topic \"%s\", id: %d\n", topic, pkt_id));

  mqtt_output_append_fixed_header(&client->output, sub ? MQTT_MSG_TYPE_SUBSCRIBE : MQTT_MSG_TYPE_UNSUBSCRIBE, 0, 1, 0, remaining_length);
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8008d00:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d001      	beq.n	8008d0c <mqtt_sub_unsub+0x118>
 8008d08:	2108      	movs	r1, #8
 8008d0a:	e000      	b.n	8008d0e <mqtt_sub_unsub+0x11a>
 8008d0c:	210a      	movs	r1, #10
 8008d0e:	8b7b      	ldrh	r3, [r7, #26]
 8008d10:	9301      	str	r3, [sp, #4]
 8008d12:	2300      	movs	r3, #0
 8008d14:	9300      	str	r3, [sp, #0]
 8008d16:	2301      	movs	r3, #1
 8008d18:	2200      	movs	r2, #0
 8008d1a:	f7ff f928 	bl	8007f6e <mqtt_output_append_fixed_header>
  /* Packet id */
  mqtt_output_append_u16(&client->output, pkt_id);
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	33ec      	adds	r3, #236	; 0xec
 8008d22:	8b3a      	ldrh	r2, [r7, #24]
 8008d24:	4611      	mov	r1, r2
 8008d26:	4618      	mov	r0, r3
 8008d28:	f7ff f8bf 	bl	8007eaa <mqtt_output_append_u16>
  /* Topic */
  mqtt_output_append_string(&client->output, topic, topic_len);
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	33ec      	adds	r3, #236	; 0xec
 8008d30:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8008d32:	68b9      	ldr	r1, [r7, #8]
 8008d34:	4618      	mov	r0, r3
 8008d36:	f7ff f8ee 	bl	8007f16 <mqtt_output_append_string>
  /* QoS */
  if (sub != 0) {
 8008d3a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d00b      	beq.n	8008d5a <mqtt_sub_unsub+0x166>
    mqtt_output_append_u8(&client->output, LWIP_MIN(qos, 2));
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 8008d48:	79fb      	ldrb	r3, [r7, #7]
 8008d4a:	2b02      	cmp	r3, #2
 8008d4c:	bf28      	it	cs
 8008d4e:	2302      	movcs	r3, #2
 8008d50:	b2db      	uxtb	r3, r3
 8008d52:	4619      	mov	r1, r3
 8008d54:	4610      	mov	r0, r2
 8008d56:	f7ff f899 	bl	8007e8c <mqtt_output_append_u8>
  }

  mqtt_append_request(&client->pend_req_queue, r);
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	3318      	adds	r3, #24
 8008d5e:	6979      	ldr	r1, [r7, #20]
 8008d60:	4618      	mov	r0, r3
 8008d62:	f7fe ff3b 	bl	8007bdc <mqtt_append_request>
  mqtt_output_send(&client->output, client->conn);
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	68db      	ldr	r3, [r3, #12]
 8008d70:	4619      	mov	r1, r3
 8008d72:	4610      	mov	r0, r2
 8008d74:	f7fe fe38 	bl	80079e8 <mqtt_output_send>
  return ERR_OK;
 8008d78:	2300      	movs	r3, #0
}
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	3728      	adds	r7, #40	; 0x28
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	bd80      	pop	{r7, pc}
 8008d82:	bf00      	nop
 8008d84:	08017ce0 	.word	0x08017ce0
 8008d88:	08018090 	.word	0x08018090
 8008d8c:	08017d58 	.word	0x08017d58
 8008d90:	080180b0 	.word	0x080180b0
 8008d94:	080180d0 	.word	0x080180d0
 8008d98:	080180f8 	.word	0x080180f8
 8008d9c:	08018120 	.word	0x08018120

08008da0 <mqtt_set_inpub_callback>:
 * @param arg User supplied argument to both callbacks
 */
void
mqtt_set_inpub_callback(mqtt_client_t *client, mqtt_incoming_publish_cb_t pub_cb,
                        mqtt_incoming_data_cb_t data_cb, void *arg)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b084      	sub	sp, #16
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	60f8      	str	r0, [r7, #12]
 8008da8:	60b9      	str	r1, [r7, #8]
 8008daa:	607a      	str	r2, [r7, #4]
 8008dac:	603b      	str	r3, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_set_inpub_callback: client != NULL", client != NULL);
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d106      	bne.n	8008dc2 <mqtt_set_inpub_callback+0x22>
 8008db4:	4b09      	ldr	r3, [pc, #36]	; (8008ddc <mqtt_set_inpub_callback+0x3c>)
 8008db6:	f240 42da 	movw	r2, #1242	; 0x4da
 8008dba:	4909      	ldr	r1, [pc, #36]	; (8008de0 <mqtt_set_inpub_callback+0x40>)
 8008dbc:	4809      	ldr	r0, [pc, #36]	; (8008de4 <mqtt_set_inpub_callback+0x44>)
 8008dbe:	f00d fb27 	bl	8016410 <iprintf>
  client->data_cb = data_cb;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	687a      	ldr	r2, [r7, #4]
 8008dc6:	661a      	str	r2, [r3, #96]	; 0x60
  client->pub_cb = pub_cb;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	68ba      	ldr	r2, [r7, #8]
 8008dcc:	665a      	str	r2, [r3, #100]	; 0x64
  client->inpub_arg = arg;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	683a      	ldr	r2, [r7, #0]
 8008dd2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8008dd4:	bf00      	nop
 8008dd6:	3710      	adds	r7, #16
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	bd80      	pop	{r7, pc}
 8008ddc:	08017ce0 	.word	0x08017ce0
 8008de0:	08018138 	.word	0x08018138
 8008de4:	08017d58 	.word	0x08017d58

08008de8 <mqtt_client_new>:
 * Create a new MQTT client instance
 * @return Pointer to instance on success, NULL otherwise
 */
mqtt_client_t *
mqtt_client_new(void)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();
  return (mqtt_client_t *)mem_calloc(1, sizeof(mqtt_client_t));
 8008dec:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 8008df0:	2001      	movs	r0, #1
 8008df2:	f000 feb9 	bl	8009b68 <mem_calloc>
 8008df6:	4603      	mov	r3, r0
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	bd80      	pop	{r7, pc}

08008dfc <mqtt_client_connect>:
 * @return ERR_OK if successful, @see err_t enum for other results
 */
err_t
mqtt_client_connect(mqtt_client_t *client, const ip_addr_t *ip_addr, u16_t port, mqtt_connection_cb_t cb, void *arg,
                    const struct mqtt_connect_client_info_t *client_info)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b08c      	sub	sp, #48	; 0x30
 8008e00:	af02      	add	r7, sp, #8
 8008e02:	60f8      	str	r0, [r7, #12]
 8008e04:	60b9      	str	r1, [r7, #8]
 8008e06:	603b      	str	r3, [r7, #0]
 8008e08:	4613      	mov	r3, r2
 8008e0a:	80fb      	strh	r3, [r7, #6]
  err_t err;
  size_t len;
  u16_t client_id_length;
  /* Length is the sum of 2+"MQTT", protocol level, flags and keep alive */
  u16_t remaining_length = 2 + 4 + 1 + 1 + 2;
 8008e0c:	230a      	movs	r3, #10
 8008e0e:	84bb      	strh	r3, [r7, #36]	; 0x24
  u8_t flags = 0, will_topic_len = 0, will_msg_len = 0;
 8008e10:	2300      	movs	r3, #0
 8008e12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008e16:	2300      	movs	r3, #0
 8008e18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  u16_t client_user_len = 0, client_pass_len = 0;
 8008e22:	2300      	movs	r3, #0
 8008e24:	83fb      	strh	r3, [r7, #30]
 8008e26:	2300      	movs	r3, #0
 8008e28:	83bb      	strh	r3, [r7, #28]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_client_connect: client != NULL", client != NULL);
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d106      	bne.n	8008e3e <mqtt_client_connect+0x42>
 8008e30:	4b9e      	ldr	r3, [pc, #632]	; (80090ac <mqtt_client_connect+0x2b0>)
 8008e32:	f240 520f 	movw	r2, #1295	; 0x50f
 8008e36:	499e      	ldr	r1, [pc, #632]	; (80090b0 <mqtt_client_connect+0x2b4>)
 8008e38:	489e      	ldr	r0, [pc, #632]	; (80090b4 <mqtt_client_connect+0x2b8>)
 8008e3a:	f00d fae9 	bl	8016410 <iprintf>
  LWIP_ASSERT("mqtt_client_connect: ip_addr != NULL", ip_addr != NULL);
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d106      	bne.n	8008e52 <mqtt_client_connect+0x56>
 8008e44:	4b99      	ldr	r3, [pc, #612]	; (80090ac <mqtt_client_connect+0x2b0>)
 8008e46:	f44f 62a2 	mov.w	r2, #1296	; 0x510
 8008e4a:	499b      	ldr	r1, [pc, #620]	; (80090b8 <mqtt_client_connect+0x2bc>)
 8008e4c:	4899      	ldr	r0, [pc, #612]	; (80090b4 <mqtt_client_connect+0x2b8>)
 8008e4e:	f00d fadf 	bl	8016410 <iprintf>
  LWIP_ASSERT("mqtt_client_connect: client_info != NULL", client_info != NULL);
 8008e52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d106      	bne.n	8008e66 <mqtt_client_connect+0x6a>
 8008e58:	4b94      	ldr	r3, [pc, #592]	; (80090ac <mqtt_client_connect+0x2b0>)
 8008e5a:	f240 5211 	movw	r2, #1297	; 0x511
 8008e5e:	4997      	ldr	r1, [pc, #604]	; (80090bc <mqtt_client_connect+0x2c0>)
 8008e60:	4894      	ldr	r0, [pc, #592]	; (80090b4 <mqtt_client_connect+0x2b8>)
 8008e62:	f00d fad5 	bl	8016410 <iprintf>
  LWIP_ASSERT("mqtt_client_connect: client_info->client_id != NULL", client_info->client_id != NULL);
 8008e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d106      	bne.n	8008e7c <mqtt_client_connect+0x80>
 8008e6e:	4b8f      	ldr	r3, [pc, #572]	; (80090ac <mqtt_client_connect+0x2b0>)
 8008e70:	f240 5212 	movw	r2, #1298	; 0x512
 8008e74:	4992      	ldr	r1, [pc, #584]	; (80090c0 <mqtt_client_connect+0x2c4>)
 8008e76:	488f      	ldr	r0, [pc, #572]	; (80090b4 <mqtt_client_connect+0x2b8>)
 8008e78:	f00d faca 	bl	8016410 <iprintf>

  if (client->conn_state != TCP_DISCONNECTED) {
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	7a9b      	ldrb	r3, [r3, #10]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d002      	beq.n	8008e8a <mqtt_client_connect+0x8e>
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_client_connect: Already connected\n"));
    return ERR_ISCONN;
 8008e84:	f06f 0309 	mvn.w	r3, #9
 8008e88:	e21f      	b.n	80092ca <mqtt_client_connect+0x4ce>
  }

  /* Wipe clean */
  memset(client, 0, sizeof(mqtt_client_t));
 8008e8a:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
 8008e8e:	2100      	movs	r1, #0
 8008e90:	68f8      	ldr	r0, [r7, #12]
 8008e92:	f00d fab5 	bl	8016400 <memset>
  client->connect_arg = arg;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e9a:	611a      	str	r2, [r3, #16]
  client->connect_cb = cb;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	683a      	ldr	r2, [r7, #0]
 8008ea0:	615a      	str	r2, [r3, #20]
  client->keep_alive = client_info->keep_alive;
 8008ea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ea4:	899a      	ldrh	r2, [r3, #12]
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	805a      	strh	r2, [r3, #2]
  mqtt_init_requests(client->req_list, LWIP_ARRAYSIZE(client->req_list));
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	331c      	adds	r3, #28
 8008eae:	2104      	movs	r1, #4
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	f7fe ffbd 	bl	8007e30 <mqtt_init_requests>

  /* Build connect message */
  if (client_info->will_topic != NULL && client_info->will_msg != NULL) {
 8008eb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008eb8:	691b      	ldr	r3, [r3, #16]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d073      	beq.n	8008fa6 <mqtt_client_connect+0x1aa>
 8008ebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ec0:	695b      	ldr	r3, [r3, #20]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d06f      	beq.n	8008fa6 <mqtt_client_connect+0x1aa>
    flags |= MQTT_CONNECT_FLAG_WILL;
 8008ec6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008eca:	f043 0304 	orr.w	r3, r3, #4
 8008ece:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    flags |= (client_info->will_qos & 3) << 3;
 8008ed2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ed4:	7e1b      	ldrb	r3, [r3, #24]
 8008ed6:	00db      	lsls	r3, r3, #3
 8008ed8:	b25b      	sxtb	r3, r3
 8008eda:	f003 0318 	and.w	r3, r3, #24
 8008ede:	b25a      	sxtb	r2, r3
 8008ee0:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8008ee4:	4313      	orrs	r3, r2
 8008ee6:	b25b      	sxtb	r3, r3
 8008ee8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (client_info->will_retain) {
 8008eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008eee:	7e5b      	ldrb	r3, [r3, #25]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d005      	beq.n	8008f00 <mqtt_client_connect+0x104>
      flags |= MQTT_CONNECT_FLAG_WILL_RETAIN;
 8008ef4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008ef8:	f043 0320 	orr.w	r3, r3, #32
 8008efc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    }
    len = strlen(client_info->will_topic);
 8008f00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f02:	691b      	ldr	r3, [r3, #16]
 8008f04:	4618      	mov	r0, r3
 8008f06:	f7f7 f96d 	bl	80001e4 <strlen>
 8008f0a:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->will_topic length overflow", len <= 0xFF, return ERR_VAL);
 8008f0c:	69bb      	ldr	r3, [r7, #24]
 8008f0e:	2bff      	cmp	r3, #255	; 0xff
 8008f10:	d909      	bls.n	8008f26 <mqtt_client_connect+0x12a>
 8008f12:	4b66      	ldr	r3, [pc, #408]	; (80090ac <mqtt_client_connect+0x2b0>)
 8008f14:	f44f 62a5 	mov.w	r2, #1320	; 0x528
 8008f18:	496a      	ldr	r1, [pc, #424]	; (80090c4 <mqtt_client_connect+0x2c8>)
 8008f1a:	4866      	ldr	r0, [pc, #408]	; (80090b4 <mqtt_client_connect+0x2b8>)
 8008f1c:	f00d fa78 	bl	8016410 <iprintf>
 8008f20:	f06f 0305 	mvn.w	r3, #5
 8008f24:	e1d1      	b.n	80092ca <mqtt_client_connect+0x4ce>
    LWIP_ERROR("mqtt_client_connect: client_info->will_topic length must be > 0", len > 0, return ERR_VAL);
 8008f26:	69bb      	ldr	r3, [r7, #24]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d109      	bne.n	8008f40 <mqtt_client_connect+0x144>
 8008f2c:	4b5f      	ldr	r3, [pc, #380]	; (80090ac <mqtt_client_connect+0x2b0>)
 8008f2e:	f240 5229 	movw	r2, #1321	; 0x529
 8008f32:	4965      	ldr	r1, [pc, #404]	; (80090c8 <mqtt_client_connect+0x2cc>)
 8008f34:	485f      	ldr	r0, [pc, #380]	; (80090b4 <mqtt_client_connect+0x2b8>)
 8008f36:	f00d fa6b 	bl	8016410 <iprintf>
 8008f3a:	f06f 0305 	mvn.w	r3, #5
 8008f3e:	e1c4      	b.n	80092ca <mqtt_client_connect+0x4ce>
    will_topic_len = (u8_t)len;
 8008f40:	69bb      	ldr	r3, [r7, #24]
 8008f42:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    len = strlen(client_info->will_msg);
 8008f46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f48:	695b      	ldr	r3, [r3, #20]
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	f7f7 f94a 	bl	80001e4 <strlen>
 8008f50:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->will_msg length overflow", len <= 0xFF, return ERR_VAL);
 8008f52:	69bb      	ldr	r3, [r7, #24]
 8008f54:	2bff      	cmp	r3, #255	; 0xff
 8008f56:	d909      	bls.n	8008f6c <mqtt_client_connect+0x170>
 8008f58:	4b54      	ldr	r3, [pc, #336]	; (80090ac <mqtt_client_connect+0x2b0>)
 8008f5a:	f240 522c 	movw	r2, #1324	; 0x52c
 8008f5e:	495b      	ldr	r1, [pc, #364]	; (80090cc <mqtt_client_connect+0x2d0>)
 8008f60:	4854      	ldr	r0, [pc, #336]	; (80090b4 <mqtt_client_connect+0x2b8>)
 8008f62:	f00d fa55 	bl	8016410 <iprintf>
 8008f66:	f06f 0305 	mvn.w	r3, #5
 8008f6a:	e1ae      	b.n	80092ca <mqtt_client_connect+0x4ce>
    will_msg_len = (u8_t)len;
 8008f6c:	69bb      	ldr	r3, [r7, #24]
 8008f6e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    len = remaining_length + 2 + will_topic_len + 2 + will_msg_len;
 8008f72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008f74:	1c9a      	adds	r2, r3, #2
 8008f76:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008f7a:	4413      	add	r3, r2
 8008f7c:	1c9a      	adds	r2, r3, #2
 8008f7e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8008f82:	4413      	add	r3, r2
 8008f84:	61bb      	str	r3, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 8008f86:	69bb      	ldr	r3, [r7, #24]
 8008f88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f8c:	d309      	bcc.n	8008fa2 <mqtt_client_connect+0x1a6>
 8008f8e:	4b47      	ldr	r3, [pc, #284]	; (80090ac <mqtt_client_connect+0x2b0>)
 8008f90:	f240 522f 	movw	r2, #1327	; 0x52f
 8008f94:	494e      	ldr	r1, [pc, #312]	; (80090d0 <mqtt_client_connect+0x2d4>)
 8008f96:	4847      	ldr	r0, [pc, #284]	; (80090b4 <mqtt_client_connect+0x2b8>)
 8008f98:	f00d fa3a 	bl	8016410 <iprintf>
 8008f9c:	f06f 0305 	mvn.w	r3, #5
 8008fa0:	e193      	b.n	80092ca <mqtt_client_connect+0x4ce>
    remaining_length = (u16_t)len;
 8008fa2:	69bb      	ldr	r3, [r7, #24]
 8008fa4:	84bb      	strh	r3, [r7, #36]	; 0x24
  }
  if (client_info->client_user != NULL) {
 8008fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fa8:	685b      	ldr	r3, [r3, #4]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d03d      	beq.n	800902a <mqtt_client_connect+0x22e>
    flags |= MQTT_CONNECT_FLAG_USERNAME;
 8008fae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008fb2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008fb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    len = strlen(client_info->client_user);
 8008fba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fbc:	685b      	ldr	r3, [r3, #4]
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	f7f7 f910 	bl	80001e4 <strlen>
 8008fc4:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->client_user length overflow", len <= 0xFFFF, return ERR_VAL);
 8008fc6:	69bb      	ldr	r3, [r7, #24]
 8008fc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008fcc:	d309      	bcc.n	8008fe2 <mqtt_client_connect+0x1e6>
 8008fce:	4b37      	ldr	r3, [pc, #220]	; (80090ac <mqtt_client_connect+0x2b0>)
 8008fd0:	f240 5235 	movw	r2, #1333	; 0x535
 8008fd4:	493f      	ldr	r1, [pc, #252]	; (80090d4 <mqtt_client_connect+0x2d8>)
 8008fd6:	4837      	ldr	r0, [pc, #220]	; (80090b4 <mqtt_client_connect+0x2b8>)
 8008fd8:	f00d fa1a 	bl	8016410 <iprintf>
 8008fdc:	f06f 0305 	mvn.w	r3, #5
 8008fe0:	e173      	b.n	80092ca <mqtt_client_connect+0x4ce>
    LWIP_ERROR("mqtt_client_connect: client_info->client_user length must be > 0", len > 0, return ERR_VAL);
 8008fe2:	69bb      	ldr	r3, [r7, #24]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d109      	bne.n	8008ffc <mqtt_client_connect+0x200>
 8008fe8:	4b30      	ldr	r3, [pc, #192]	; (80090ac <mqtt_client_connect+0x2b0>)
 8008fea:	f240 5236 	movw	r2, #1334	; 0x536
 8008fee:	493a      	ldr	r1, [pc, #232]	; (80090d8 <mqtt_client_connect+0x2dc>)
 8008ff0:	4830      	ldr	r0, [pc, #192]	; (80090b4 <mqtt_client_connect+0x2b8>)
 8008ff2:	f00d fa0d 	bl	8016410 <iprintf>
 8008ff6:	f06f 0305 	mvn.w	r3, #5
 8008ffa:	e166      	b.n	80092ca <mqtt_client_connect+0x4ce>
    client_user_len = (u16_t)len;
 8008ffc:	69bb      	ldr	r3, [r7, #24]
 8008ffe:	83fb      	strh	r3, [r7, #30]
    len = remaining_length + 2 + client_user_len;
 8009000:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009002:	1c9a      	adds	r2, r3, #2
 8009004:	8bfb      	ldrh	r3, [r7, #30]
 8009006:	4413      	add	r3, r2
 8009008:	61bb      	str	r3, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 800900a:	69bb      	ldr	r3, [r7, #24]
 800900c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009010:	d309      	bcc.n	8009026 <mqtt_client_connect+0x22a>
 8009012:	4b26      	ldr	r3, [pc, #152]	; (80090ac <mqtt_client_connect+0x2b0>)
 8009014:	f240 5239 	movw	r2, #1337	; 0x539
 8009018:	492d      	ldr	r1, [pc, #180]	; (80090d0 <mqtt_client_connect+0x2d4>)
 800901a:	4826      	ldr	r0, [pc, #152]	; (80090b4 <mqtt_client_connect+0x2b8>)
 800901c:	f00d f9f8 	bl	8016410 <iprintf>
 8009020:	f06f 0305 	mvn.w	r3, #5
 8009024:	e151      	b.n	80092ca <mqtt_client_connect+0x4ce>
    remaining_length = (u16_t)len;
 8009026:	69bb      	ldr	r3, [r7, #24]
 8009028:	84bb      	strh	r3, [r7, #36]	; 0x24
  }
  if (client_info->client_pass != NULL) {
 800902a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800902c:	689b      	ldr	r3, [r3, #8]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d05a      	beq.n	80090e8 <mqtt_client_connect+0x2ec>
    flags |= MQTT_CONNECT_FLAG_PASSWORD;
 8009032:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009036:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800903a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    len = strlen(client_info->client_pass);
 800903e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009040:	689b      	ldr	r3, [r3, #8]
 8009042:	4618      	mov	r0, r3
 8009044:	f7f7 f8ce 	bl	80001e4 <strlen>
 8009048:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->client_pass length overflow", len <= 0xFFFF, return ERR_VAL);
 800904a:	69bb      	ldr	r3, [r7, #24]
 800904c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009050:	d309      	bcc.n	8009066 <mqtt_client_connect+0x26a>
 8009052:	4b16      	ldr	r3, [pc, #88]	; (80090ac <mqtt_client_connect+0x2b0>)
 8009054:	f240 523f 	movw	r2, #1343	; 0x53f
 8009058:	4920      	ldr	r1, [pc, #128]	; (80090dc <mqtt_client_connect+0x2e0>)
 800905a:	4816      	ldr	r0, [pc, #88]	; (80090b4 <mqtt_client_connect+0x2b8>)
 800905c:	f00d f9d8 	bl	8016410 <iprintf>
 8009060:	f06f 0305 	mvn.w	r3, #5
 8009064:	e131      	b.n	80092ca <mqtt_client_connect+0x4ce>
    LWIP_ERROR("mqtt_client_connect: client_info->client_pass length must be > 0", len > 0, return ERR_VAL);
 8009066:	69bb      	ldr	r3, [r7, #24]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d109      	bne.n	8009080 <mqtt_client_connect+0x284>
 800906c:	4b0f      	ldr	r3, [pc, #60]	; (80090ac <mqtt_client_connect+0x2b0>)
 800906e:	f44f 62a8 	mov.w	r2, #1344	; 0x540
 8009072:	491b      	ldr	r1, [pc, #108]	; (80090e0 <mqtt_client_connect+0x2e4>)
 8009074:	480f      	ldr	r0, [pc, #60]	; (80090b4 <mqtt_client_connect+0x2b8>)
 8009076:	f00d f9cb 	bl	8016410 <iprintf>
 800907a:	f06f 0305 	mvn.w	r3, #5
 800907e:	e124      	b.n	80092ca <mqtt_client_connect+0x4ce>
    client_pass_len = (u16_t)len;
 8009080:	69bb      	ldr	r3, [r7, #24]
 8009082:	83bb      	strh	r3, [r7, #28]
    len = remaining_length + 2 + client_pass_len;
 8009084:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009086:	1c9a      	adds	r2, r3, #2
 8009088:	8bbb      	ldrh	r3, [r7, #28]
 800908a:	4413      	add	r3, r2
 800908c:	61bb      	str	r3, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 800908e:	69bb      	ldr	r3, [r7, #24]
 8009090:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009094:	d326      	bcc.n	80090e4 <mqtt_client_connect+0x2e8>
 8009096:	4b05      	ldr	r3, [pc, #20]	; (80090ac <mqtt_client_connect+0x2b0>)
 8009098:	f240 5243 	movw	r2, #1347	; 0x543
 800909c:	490c      	ldr	r1, [pc, #48]	; (80090d0 <mqtt_client_connect+0x2d4>)
 800909e:	4805      	ldr	r0, [pc, #20]	; (80090b4 <mqtt_client_connect+0x2b8>)
 80090a0:	f00d f9b6 	bl	8016410 <iprintf>
 80090a4:	f06f 0305 	mvn.w	r3, #5
 80090a8:	e10f      	b.n	80092ca <mqtt_client_connect+0x4ce>
 80090aa:	bf00      	nop
 80090ac:	08017ce0 	.word	0x08017ce0
 80090b0:	08018160 	.word	0x08018160
 80090b4:	08017d58 	.word	0x08017d58
 80090b8:	08018184 	.word	0x08018184
 80090bc:	080181ac 	.word	0x080181ac
 80090c0:	080181d8 	.word	0x080181d8
 80090c4:	0801820c 	.word	0x0801820c
 80090c8:	0801824c 	.word	0x0801824c
 80090cc:	0801828c 	.word	0x0801828c
 80090d0:	080182c8 	.word	0x080182c8
 80090d4:	080182f8 	.word	0x080182f8
 80090d8:	08018338 	.word	0x08018338
 80090dc:	0801837c 	.word	0x0801837c
 80090e0:	080183bc 	.word	0x080183bc
    remaining_length = (u16_t)len;
 80090e4:	69bb      	ldr	r3, [r7, #24]
 80090e6:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  /* Don't complicate things, always connect using clean session */
  flags |= MQTT_CONNECT_FLAG_CLEAN_SESSION;
 80090e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80090ec:	f043 0302 	orr.w	r3, r3, #2
 80090f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  len = strlen(client_info->client_id);
 80090f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	4618      	mov	r0, r3
 80090fa:	f7f7 f873 	bl	80001e4 <strlen>
 80090fe:	61b8      	str	r0, [r7, #24]
  LWIP_ERROR("mqtt_client_connect: client_info->client_id length overflow", len <= 0xFFFF, return ERR_VAL);
 8009100:	69bb      	ldr	r3, [r7, #24]
 8009102:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009106:	d309      	bcc.n	800911c <mqtt_client_connect+0x320>
 8009108:	4b72      	ldr	r3, [pc, #456]	; (80092d4 <mqtt_client_connect+0x4d8>)
 800910a:	f240 524b 	movw	r2, #1355	; 0x54b
 800910e:	4972      	ldr	r1, [pc, #456]	; (80092d8 <mqtt_client_connect+0x4dc>)
 8009110:	4872      	ldr	r0, [pc, #456]	; (80092dc <mqtt_client_connect+0x4e0>)
 8009112:	f00d f97d 	bl	8016410 <iprintf>
 8009116:	f06f 0305 	mvn.w	r3, #5
 800911a:	e0d6      	b.n	80092ca <mqtt_client_connect+0x4ce>
  client_id_length = (u16_t)len;
 800911c:	69bb      	ldr	r3, [r7, #24]
 800911e:	82fb      	strh	r3, [r7, #22]
  len = remaining_length + 2 + client_id_length;
 8009120:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009122:	1c9a      	adds	r2, r3, #2
 8009124:	8afb      	ldrh	r3, [r7, #22]
 8009126:	4413      	add	r3, r2
 8009128:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 800912a:	69bb      	ldr	r3, [r7, #24]
 800912c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009130:	d309      	bcc.n	8009146 <mqtt_client_connect+0x34a>
 8009132:	4b68      	ldr	r3, [pc, #416]	; (80092d4 <mqtt_client_connect+0x4d8>)
 8009134:	f240 524e 	movw	r2, #1358	; 0x54e
 8009138:	4969      	ldr	r1, [pc, #420]	; (80092e0 <mqtt_client_connect+0x4e4>)
 800913a:	4868      	ldr	r0, [pc, #416]	; (80092dc <mqtt_client_connect+0x4e0>)
 800913c:	f00d f968 	bl	8016410 <iprintf>
 8009140:	f06f 0305 	mvn.w	r3, #5
 8009144:	e0c1      	b.n	80092ca <mqtt_client_connect+0x4ce>
  remaining_length = (u16_t)len;
 8009146:	69bb      	ldr	r3, [r7, #24]
 8009148:	84bb      	strh	r3, [r7, #36]	; 0x24

  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	33ec      	adds	r3, #236	; 0xec
 800914e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009150:	4611      	mov	r1, r2
 8009152:	4618      	mov	r0, r3
 8009154:	f7fe ff56 	bl	8008004 <mqtt_output_check_space>
 8009158:	4603      	mov	r3, r0
 800915a:	2b00      	cmp	r3, #0
 800915c:	d102      	bne.n	8009164 <mqtt_client_connect+0x368>
    return ERR_MEM;
 800915e:	f04f 33ff 	mov.w	r3, #4294967295
 8009162:	e0b2      	b.n	80092ca <mqtt_client_connect+0x4ce>
  if (client_info->tls_config) {
    client->conn = altcp_tls_new(client_info->tls_config, IP_GET_TYPE(ip_addr));
  } else
#endif
  {
    client->conn = altcp_tcp_new_ip_type(IP_GET_TYPE(ip_addr));
 8009164:	2000      	movs	r0, #0
 8009166:	f003 fb7b 	bl	800c860 <tcp_new_ip_type>
 800916a:	4602      	mov	r2, r0
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	60da      	str	r2, [r3, #12]
  }
  if (client->conn == NULL) {
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	68db      	ldr	r3, [r3, #12]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d102      	bne.n	800917e <mqtt_client_connect+0x382>
    return ERR_MEM;
 8009178:	f04f 33ff 	mov.w	r3, #4294967295
 800917c:	e0a5      	b.n	80092ca <mqtt_client_connect+0x4ce>
  }

  /* Set arg pointer for callbacks */
  altcp_arg(client->conn, client);
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	68db      	ldr	r3, [r3, #12]
 8009182:	68f9      	ldr	r1, [r7, #12]
 8009184:	4618      	mov	r0, r3
 8009186:	f003 fb79 	bl	800c87c <tcp_arg>
  /* Any local address, pick random local port number */
  err = altcp_bind(client->conn, IP_ADDR_ANY, 0);
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	68db      	ldr	r3, [r3, #12]
 800918e:	2200      	movs	r2, #0
 8009190:	4954      	ldr	r1, [pc, #336]	; (80092e4 <mqtt_client_connect+0x4e8>)
 8009192:	4618      	mov	r0, r3
 8009194:	f002 faa2 	bl	800b6dc <tcp_bind>
 8009198:	4603      	mov	r3, r0
 800919a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (err != ERR_OK) {
 800919e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	f040 8084 	bne.w	80092b0 <mqtt_client_connect+0x4b4>
    goto tcp_fail;
  }
  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_client_connect: Connecting to host: %s at port:%"U16_F"\n", ipaddr_ntoa(ip_addr), port));

  /* Connect to server */
  err = altcp_connect(client->conn, ip_addr, port, mqtt_tcp_connect_cb);
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	68d8      	ldr	r0, [r3, #12]
 80091ac:	88fa      	ldrh	r2, [r7, #6]
 80091ae:	4b4e      	ldr	r3, [pc, #312]	; (80092e8 <mqtt_client_connect+0x4ec>)
 80091b0:	68b9      	ldr	r1, [r7, #8]
 80091b2:	f002 fc1b 	bl	800b9ec <tcp_connect>
 80091b6:	4603      	mov	r3, r0
 80091b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (err != ERR_OK) {
 80091bc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d177      	bne.n	80092b4 <mqtt_client_connect+0x4b8>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_client_connect: Error connecting to remote ip/port, %d\n", err));
    goto tcp_fail;
  }
  /* Set error callback */
  altcp_err(client->conn, mqtt_tcp_err_cb);
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	68db      	ldr	r3, [r3, #12]
 80091c8:	4948      	ldr	r1, [pc, #288]	; (80092ec <mqtt_client_connect+0x4f0>)
 80091ca:	4618      	mov	r0, r3
 80091cc:	f003 fbac 	bl	800c928 <tcp_err>
  client->conn_state = TCP_CONNECTING;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	2201      	movs	r2, #1
 80091d4:	729a      	strb	r2, [r3, #10]

  /* Append fixed header */
  mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_CONNECT, 0, 0, 0, remaining_length);
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 80091dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80091de:	9301      	str	r3, [sp, #4]
 80091e0:	2300      	movs	r3, #0
 80091e2:	9300      	str	r3, [sp, #0]
 80091e4:	2300      	movs	r3, #0
 80091e6:	2200      	movs	r2, #0
 80091e8:	2101      	movs	r1, #1
 80091ea:	f7fe fec0 	bl	8007f6e <mqtt_output_append_fixed_header>
  /* Append Protocol string */
  mqtt_output_append_string(&client->output, "MQTT", 4);
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	33ec      	adds	r3, #236	; 0xec
 80091f2:	2204      	movs	r2, #4
 80091f4:	493e      	ldr	r1, [pc, #248]	; (80092f0 <mqtt_client_connect+0x4f4>)
 80091f6:	4618      	mov	r0, r3
 80091f8:	f7fe fe8d 	bl	8007f16 <mqtt_output_append_string>
  /* Append Protocol level */
  mqtt_output_append_u8(&client->output, 4);
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	33ec      	adds	r3, #236	; 0xec
 8009200:	2104      	movs	r1, #4
 8009202:	4618      	mov	r0, r3
 8009204:	f7fe fe42 	bl	8007e8c <mqtt_output_append_u8>
  /* Append connect flags */
  mqtt_output_append_u8(&client->output, flags);
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	33ec      	adds	r3, #236	; 0xec
 800920c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8009210:	4611      	mov	r1, r2
 8009212:	4618      	mov	r0, r3
 8009214:	f7fe fe3a 	bl	8007e8c <mqtt_output_append_u8>
  /* Append keep-alive */
  mqtt_output_append_u16(&client->output, client_info->keep_alive);
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 800921e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009220:	899b      	ldrh	r3, [r3, #12]
 8009222:	4619      	mov	r1, r3
 8009224:	4610      	mov	r0, r2
 8009226:	f7fe fe40 	bl	8007eaa <mqtt_output_append_u16>
  /* Append client id */
  mqtt_output_append_string(&client->output, client_info->client_id, client_id_length);
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8009230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	8afa      	ldrh	r2, [r7, #22]
 8009236:	4619      	mov	r1, r3
 8009238:	f7fe fe6d 	bl	8007f16 <mqtt_output_append_string>
  /* Append will message if used */
  if ((flags & MQTT_CONNECT_FLAG_WILL) != 0) {
 800923c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009240:	f003 0304 	and.w	r3, r3, #4
 8009244:	2b00      	cmp	r3, #0
 8009246:	d015      	beq.n	8009274 <mqtt_client_connect+0x478>
    mqtt_output_append_string(&client->output, client_info->will_topic, will_topic_len);
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800924e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009250:	691b      	ldr	r3, [r3, #16]
 8009252:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8009256:	b292      	uxth	r2, r2
 8009258:	4619      	mov	r1, r3
 800925a:	f7fe fe5c 	bl	8007f16 <mqtt_output_append_string>
    mqtt_output_append_string(&client->output, client_info->will_msg, will_msg_len);
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8009264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009266:	695b      	ldr	r3, [r3, #20]
 8009268:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800926c:	b292      	uxth	r2, r2
 800926e:	4619      	mov	r1, r3
 8009270:	f7fe fe51 	bl	8007f16 <mqtt_output_append_string>
  }
  /* Append user name if given */
  if ((flags & MQTT_CONNECT_FLAG_USERNAME) != 0) {
 8009274:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8009278:	2b00      	cmp	r3, #0
 800927a:	da08      	bge.n	800928e <mqtt_client_connect+0x492>
    mqtt_output_append_string(&client->output, client_info->client_user, client_user_len);
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8009282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009284:	685b      	ldr	r3, [r3, #4]
 8009286:	8bfa      	ldrh	r2, [r7, #30]
 8009288:	4619      	mov	r1, r3
 800928a:	f7fe fe44 	bl	8007f16 <mqtt_output_append_string>
  }
  /* Append password if given */
  if ((flags & MQTT_CONNECT_FLAG_PASSWORD) != 0) {
 800928e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009296:	2b00      	cmp	r3, #0
 8009298:	d008      	beq.n	80092ac <mqtt_client_connect+0x4b0>
    mqtt_output_append_string(&client->output, client_info->client_pass, client_pass_len);
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 80092a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092a2:	689b      	ldr	r3, [r3, #8]
 80092a4:	8bba      	ldrh	r2, [r7, #28]
 80092a6:	4619      	mov	r1, r3
 80092a8:	f7fe fe35 	bl	8007f16 <mqtt_output_append_string>
  }
  return ERR_OK;
 80092ac:	2300      	movs	r3, #0
 80092ae:	e00c      	b.n	80092ca <mqtt_client_connect+0x4ce>
    goto tcp_fail;
 80092b0:	bf00      	nop
 80092b2:	e000      	b.n	80092b6 <mqtt_client_connect+0x4ba>
    goto tcp_fail;
 80092b4:	bf00      	nop

tcp_fail:
  altcp_abort(client->conn);
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	68db      	ldr	r3, [r3, #12]
 80092ba:	4618      	mov	r0, r3
 80092bc:	f002 fa02 	bl	800b6c4 <tcp_abort>
  client->conn = NULL;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	2200      	movs	r2, #0
 80092c4:	60da      	str	r2, [r3, #12]
  return err;
 80092c6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80092ca:	4618      	mov	r0, r3
 80092cc:	3728      	adds	r7, #40	; 0x28
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}
 80092d2:	bf00      	nop
 80092d4:	08017ce0 	.word	0x08017ce0
 80092d8:	08018400 	.word	0x08018400
 80092dc:	08017d58 	.word	0x08017d58
 80092e0:	080182c8 	.word	0x080182c8
 80092e4:	0801b32c 	.word	0x0801b32c
 80092e8:	080089c9 	.word	0x080089c9
 80092ec:	08008955 	.word	0x08008955
 80092f0:	0801843c 	.word	0x0801843c

080092f4 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80092f4:	b480      	push	{r7}
 80092f6:	b083      	sub	sp, #12
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	4603      	mov	r3, r0
 80092fc:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80092fe:	88fb      	ldrh	r3, [r7, #6]
 8009300:	021b      	lsls	r3, r3, #8
 8009302:	b21a      	sxth	r2, r3
 8009304:	88fb      	ldrh	r3, [r7, #6]
 8009306:	0a1b      	lsrs	r3, r3, #8
 8009308:	b29b      	uxth	r3, r3
 800930a:	b21b      	sxth	r3, r3
 800930c:	4313      	orrs	r3, r2
 800930e:	b21b      	sxth	r3, r3
 8009310:	b29b      	uxth	r3, r3
}
 8009312:	4618      	mov	r0, r3
 8009314:	370c      	adds	r7, #12
 8009316:	46bd      	mov	sp, r7
 8009318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931c:	4770      	bx	lr

0800931e <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800931e:	b480      	push	{r7}
 8009320:	b083      	sub	sp, #12
 8009322:	af00      	add	r7, sp, #0
 8009324:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	061a      	lsls	r2, r3, #24
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	021b      	lsls	r3, r3, #8
 800932e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009332:	431a      	orrs	r2, r3
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	0a1b      	lsrs	r3, r3, #8
 8009338:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800933c:	431a      	orrs	r2, r3
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	0e1b      	lsrs	r3, r3, #24
 8009342:	4313      	orrs	r3, r2
}
 8009344:	4618      	mov	r0, r3
 8009346:	370c      	adds	r7, #12
 8009348:	46bd      	mov	sp, r7
 800934a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934e:	4770      	bx	lr

08009350 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b082      	sub	sp, #8
 8009354:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8009356:	2300      	movs	r3, #0
 8009358:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800935a:	f00c ff79 	bl	8016250 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800935e:	f000 f8d5 	bl	800950c <mem_init>
  memp_init();
 8009362:	f000 fc59 	bl	8009c18 <memp_init>
  pbuf_init();
  netif_init();
 8009366:	f000 fd1f 	bl	8009da8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800936a:	f008 f8c5 	bl	80114f8 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800936e:	f001 feaf 	bl	800b0d0 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8009372:	f007 ffcd 	bl	8011310 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8009376:	bf00      	nop
 8009378:	3708      	adds	r7, #8
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}
	...

08009380 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8009380:	b480      	push	{r7}
 8009382:	b083      	sub	sp, #12
 8009384:	af00      	add	r7, sp, #0
 8009386:	4603      	mov	r3, r0
 8009388:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800938a:	4b05      	ldr	r3, [pc, #20]	; (80093a0 <ptr_to_mem+0x20>)
 800938c:	681a      	ldr	r2, [r3, #0]
 800938e:	88fb      	ldrh	r3, [r7, #6]
 8009390:	4413      	add	r3, r2
}
 8009392:	4618      	mov	r0, r3
 8009394:	370c      	adds	r7, #12
 8009396:	46bd      	mov	sp, r7
 8009398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939c:	4770      	bx	lr
 800939e:	bf00      	nop
 80093a0:	20017dac 	.word	0x20017dac

080093a4 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80093a4:	b480      	push	{r7}
 80093a6:	b083      	sub	sp, #12
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80093ac:	4b05      	ldr	r3, [pc, #20]	; (80093c4 <mem_to_ptr+0x20>)
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	687a      	ldr	r2, [r7, #4]
 80093b2:	1ad3      	subs	r3, r2, r3
 80093b4:	b29b      	uxth	r3, r3
}
 80093b6:	4618      	mov	r0, r3
 80093b8:	370c      	adds	r7, #12
 80093ba:	46bd      	mov	sp, r7
 80093bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c0:	4770      	bx	lr
 80093c2:	bf00      	nop
 80093c4:	20017dac 	.word	0x20017dac

080093c8 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80093c8:	b590      	push	{r4, r7, lr}
 80093ca:	b085      	sub	sp, #20
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80093d0:	4b45      	ldr	r3, [pc, #276]	; (80094e8 <plug_holes+0x120>)
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	687a      	ldr	r2, [r7, #4]
 80093d6:	429a      	cmp	r2, r3
 80093d8:	d206      	bcs.n	80093e8 <plug_holes+0x20>
 80093da:	4b44      	ldr	r3, [pc, #272]	; (80094ec <plug_holes+0x124>)
 80093dc:	f240 12df 	movw	r2, #479	; 0x1df
 80093e0:	4943      	ldr	r1, [pc, #268]	; (80094f0 <plug_holes+0x128>)
 80093e2:	4844      	ldr	r0, [pc, #272]	; (80094f4 <plug_holes+0x12c>)
 80093e4:	f00d f814 	bl	8016410 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80093e8:	4b43      	ldr	r3, [pc, #268]	; (80094f8 <plug_holes+0x130>)
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	687a      	ldr	r2, [r7, #4]
 80093ee:	429a      	cmp	r2, r3
 80093f0:	d306      	bcc.n	8009400 <plug_holes+0x38>
 80093f2:	4b3e      	ldr	r3, [pc, #248]	; (80094ec <plug_holes+0x124>)
 80093f4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80093f8:	4940      	ldr	r1, [pc, #256]	; (80094fc <plug_holes+0x134>)
 80093fa:	483e      	ldr	r0, [pc, #248]	; (80094f4 <plug_holes+0x12c>)
 80093fc:	f00d f808 	bl	8016410 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	791b      	ldrb	r3, [r3, #4]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d006      	beq.n	8009416 <plug_holes+0x4e>
 8009408:	4b38      	ldr	r3, [pc, #224]	; (80094ec <plug_holes+0x124>)
 800940a:	f240 12e1 	movw	r2, #481	; 0x1e1
 800940e:	493c      	ldr	r1, [pc, #240]	; (8009500 <plug_holes+0x138>)
 8009410:	4838      	ldr	r0, [pc, #224]	; (80094f4 <plug_holes+0x12c>)
 8009412:	f00c fffd 	bl	8016410 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	881b      	ldrh	r3, [r3, #0]
 800941a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800941e:	d906      	bls.n	800942e <plug_holes+0x66>
 8009420:	4b32      	ldr	r3, [pc, #200]	; (80094ec <plug_holes+0x124>)
 8009422:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8009426:	4937      	ldr	r1, [pc, #220]	; (8009504 <plug_holes+0x13c>)
 8009428:	4832      	ldr	r0, [pc, #200]	; (80094f4 <plug_holes+0x12c>)
 800942a:	f00c fff1 	bl	8016410 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	881b      	ldrh	r3, [r3, #0]
 8009432:	4618      	mov	r0, r3
 8009434:	f7ff ffa4 	bl	8009380 <ptr_to_mem>
 8009438:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800943a:	687a      	ldr	r2, [r7, #4]
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	429a      	cmp	r2, r3
 8009440:	d024      	beq.n	800948c <plug_holes+0xc4>
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	791b      	ldrb	r3, [r3, #4]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d120      	bne.n	800948c <plug_holes+0xc4>
 800944a:	4b2b      	ldr	r3, [pc, #172]	; (80094f8 <plug_holes+0x130>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	68fa      	ldr	r2, [r7, #12]
 8009450:	429a      	cmp	r2, r3
 8009452:	d01b      	beq.n	800948c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8009454:	4b2c      	ldr	r3, [pc, #176]	; (8009508 <plug_holes+0x140>)
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	68fa      	ldr	r2, [r7, #12]
 800945a:	429a      	cmp	r2, r3
 800945c:	d102      	bne.n	8009464 <plug_holes+0x9c>
      lfree = mem;
 800945e:	4a2a      	ldr	r2, [pc, #168]	; (8009508 <plug_holes+0x140>)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	881a      	ldrh	r2, [r3, #0]
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	881b      	ldrh	r3, [r3, #0]
 8009470:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009474:	d00a      	beq.n	800948c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	881b      	ldrh	r3, [r3, #0]
 800947a:	4618      	mov	r0, r3
 800947c:	f7ff ff80 	bl	8009380 <ptr_to_mem>
 8009480:	4604      	mov	r4, r0
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	f7ff ff8e 	bl	80093a4 <mem_to_ptr>
 8009488:	4603      	mov	r3, r0
 800948a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	885b      	ldrh	r3, [r3, #2]
 8009490:	4618      	mov	r0, r3
 8009492:	f7ff ff75 	bl	8009380 <ptr_to_mem>
 8009496:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8009498:	68ba      	ldr	r2, [r7, #8]
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	429a      	cmp	r2, r3
 800949e:	d01f      	beq.n	80094e0 <plug_holes+0x118>
 80094a0:	68bb      	ldr	r3, [r7, #8]
 80094a2:	791b      	ldrb	r3, [r3, #4]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d11b      	bne.n	80094e0 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80094a8:	4b17      	ldr	r3, [pc, #92]	; (8009508 <plug_holes+0x140>)
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	687a      	ldr	r2, [r7, #4]
 80094ae:	429a      	cmp	r2, r3
 80094b0:	d102      	bne.n	80094b8 <plug_holes+0xf0>
      lfree = pmem;
 80094b2:	4a15      	ldr	r2, [pc, #84]	; (8009508 <plug_holes+0x140>)
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	881a      	ldrh	r2, [r3, #0]
 80094bc:	68bb      	ldr	r3, [r7, #8]
 80094be:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	881b      	ldrh	r3, [r3, #0]
 80094c4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80094c8:	d00a      	beq.n	80094e0 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	881b      	ldrh	r3, [r3, #0]
 80094ce:	4618      	mov	r0, r3
 80094d0:	f7ff ff56 	bl	8009380 <ptr_to_mem>
 80094d4:	4604      	mov	r4, r0
 80094d6:	68b8      	ldr	r0, [r7, #8]
 80094d8:	f7ff ff64 	bl	80093a4 <mem_to_ptr>
 80094dc:	4603      	mov	r3, r0
 80094de:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80094e0:	bf00      	nop
 80094e2:	3714      	adds	r7, #20
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bd90      	pop	{r4, r7, pc}
 80094e8:	20017dac 	.word	0x20017dac
 80094ec:	08018490 	.word	0x08018490
 80094f0:	080184c0 	.word	0x080184c0
 80094f4:	080184d8 	.word	0x080184d8
 80094f8:	20017db0 	.word	0x20017db0
 80094fc:	08018500 	.word	0x08018500
 8009500:	0801851c 	.word	0x0801851c
 8009504:	08018538 	.word	0x08018538
 8009508:	20017db8 	.word	0x20017db8

0800950c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b082      	sub	sp, #8
 8009510:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8009512:	4b1f      	ldr	r3, [pc, #124]	; (8009590 <mem_init+0x84>)
 8009514:	3303      	adds	r3, #3
 8009516:	f023 0303 	bic.w	r3, r3, #3
 800951a:	461a      	mov	r2, r3
 800951c:	4b1d      	ldr	r3, [pc, #116]	; (8009594 <mem_init+0x88>)
 800951e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8009520:	4b1c      	ldr	r3, [pc, #112]	; (8009594 <mem_init+0x88>)
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800952c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2200      	movs	r2, #0
 8009532:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2200      	movs	r2, #0
 8009538:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800953a:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 800953e:	f7ff ff1f 	bl	8009380 <ptr_to_mem>
 8009542:	4603      	mov	r3, r0
 8009544:	4a14      	ldr	r2, [pc, #80]	; (8009598 <mem_init+0x8c>)
 8009546:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8009548:	4b13      	ldr	r3, [pc, #76]	; (8009598 <mem_init+0x8c>)
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	2201      	movs	r2, #1
 800954e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8009550:	4b11      	ldr	r3, [pc, #68]	; (8009598 <mem_init+0x8c>)
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8009558:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800955a:	4b0f      	ldr	r3, [pc, #60]	; (8009598 <mem_init+0x8c>)
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8009562:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8009564:	4b0b      	ldr	r3, [pc, #44]	; (8009594 <mem_init+0x88>)
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	4a0c      	ldr	r2, [pc, #48]	; (800959c <mem_init+0x90>)
 800956a:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800956c:	480c      	ldr	r0, [pc, #48]	; (80095a0 <mem_init+0x94>)
 800956e:	f00c fe7b 	bl	8016268 <sys_mutex_new>
 8009572:	4603      	mov	r3, r0
 8009574:	2b00      	cmp	r3, #0
 8009576:	d006      	beq.n	8009586 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8009578:	4b0a      	ldr	r3, [pc, #40]	; (80095a4 <mem_init+0x98>)
 800957a:	f240 221f 	movw	r2, #543	; 0x21f
 800957e:	490a      	ldr	r1, [pc, #40]	; (80095a8 <mem_init+0x9c>)
 8009580:	480a      	ldr	r0, [pc, #40]	; (80095ac <mem_init+0xa0>)
 8009582:	f00c ff45 	bl	8016410 <iprintf>
  }
}
 8009586:	bf00      	nop
 8009588:	3708      	adds	r7, #8
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}
 800958e:	bf00      	nop
 8009590:	20016998 	.word	0x20016998
 8009594:	20017dac 	.word	0x20017dac
 8009598:	20017db0 	.word	0x20017db0
 800959c:	20017db8 	.word	0x20017db8
 80095a0:	20017db4 	.word	0x20017db4
 80095a4:	08018490 	.word	0x08018490
 80095a8:	08018564 	.word	0x08018564
 80095ac:	080184d8 	.word	0x080184d8

080095b0 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b086      	sub	sp, #24
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80095b8:	6878      	ldr	r0, [r7, #4]
 80095ba:	f7ff fef3 	bl	80093a4 <mem_to_ptr>
 80095be:	4603      	mov	r3, r0
 80095c0:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	881b      	ldrh	r3, [r3, #0]
 80095c6:	4618      	mov	r0, r3
 80095c8:	f7ff feda 	bl	8009380 <ptr_to_mem>
 80095cc:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	885b      	ldrh	r3, [r3, #2]
 80095d2:	4618      	mov	r0, r3
 80095d4:	f7ff fed4 	bl	8009380 <ptr_to_mem>
 80095d8:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	881b      	ldrh	r3, [r3, #0]
 80095de:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80095e2:	d818      	bhi.n	8009616 <mem_link_valid+0x66>
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	885b      	ldrh	r3, [r3, #2]
 80095e8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80095ec:	d813      	bhi.n	8009616 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80095f2:	8afa      	ldrh	r2, [r7, #22]
 80095f4:	429a      	cmp	r2, r3
 80095f6:	d004      	beq.n	8009602 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	881b      	ldrh	r3, [r3, #0]
 80095fc:	8afa      	ldrh	r2, [r7, #22]
 80095fe:	429a      	cmp	r2, r3
 8009600:	d109      	bne.n	8009616 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8009602:	4b08      	ldr	r3, [pc, #32]	; (8009624 <mem_link_valid+0x74>)
 8009604:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8009606:	693a      	ldr	r2, [r7, #16]
 8009608:	429a      	cmp	r2, r3
 800960a:	d006      	beq.n	800961a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800960c:	693b      	ldr	r3, [r7, #16]
 800960e:	885b      	ldrh	r3, [r3, #2]
 8009610:	8afa      	ldrh	r2, [r7, #22]
 8009612:	429a      	cmp	r2, r3
 8009614:	d001      	beq.n	800961a <mem_link_valid+0x6a>
    return 0;
 8009616:	2300      	movs	r3, #0
 8009618:	e000      	b.n	800961c <mem_link_valid+0x6c>
  }
  return 1;
 800961a:	2301      	movs	r3, #1
}
 800961c:	4618      	mov	r0, r3
 800961e:	3718      	adds	r7, #24
 8009620:	46bd      	mov	sp, r7
 8009622:	bd80      	pop	{r7, pc}
 8009624:	20017db0 	.word	0x20017db0

08009628 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b088      	sub	sp, #32
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d070      	beq.n	8009718 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	f003 0303 	and.w	r3, r3, #3
 800963c:	2b00      	cmp	r3, #0
 800963e:	d00d      	beq.n	800965c <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8009640:	4b37      	ldr	r3, [pc, #220]	; (8009720 <mem_free+0xf8>)
 8009642:	f240 2273 	movw	r2, #627	; 0x273
 8009646:	4937      	ldr	r1, [pc, #220]	; (8009724 <mem_free+0xfc>)
 8009648:	4837      	ldr	r0, [pc, #220]	; (8009728 <mem_free+0x100>)
 800964a:	f00c fee1 	bl	8016410 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800964e:	f00c fe5d 	bl	801630c <sys_arch_protect>
 8009652:	60f8      	str	r0, [r7, #12]
 8009654:	68f8      	ldr	r0, [r7, #12]
 8009656:	f00c fe67 	bl	8016328 <sys_arch_unprotect>
    return;
 800965a:	e05e      	b.n	800971a <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	3b08      	subs	r3, #8
 8009660:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8009662:	4b32      	ldr	r3, [pc, #200]	; (800972c <mem_free+0x104>)
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	69fa      	ldr	r2, [r7, #28]
 8009668:	429a      	cmp	r2, r3
 800966a:	d306      	bcc.n	800967a <mem_free+0x52>
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	f103 020c 	add.w	r2, r3, #12
 8009672:	4b2f      	ldr	r3, [pc, #188]	; (8009730 <mem_free+0x108>)
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	429a      	cmp	r2, r3
 8009678:	d90d      	bls.n	8009696 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800967a:	4b29      	ldr	r3, [pc, #164]	; (8009720 <mem_free+0xf8>)
 800967c:	f240 227f 	movw	r2, #639	; 0x27f
 8009680:	492c      	ldr	r1, [pc, #176]	; (8009734 <mem_free+0x10c>)
 8009682:	4829      	ldr	r0, [pc, #164]	; (8009728 <mem_free+0x100>)
 8009684:	f00c fec4 	bl	8016410 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8009688:	f00c fe40 	bl	801630c <sys_arch_protect>
 800968c:	6138      	str	r0, [r7, #16]
 800968e:	6938      	ldr	r0, [r7, #16]
 8009690:	f00c fe4a 	bl	8016328 <sys_arch_unprotect>
    return;
 8009694:	e041      	b.n	800971a <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8009696:	4828      	ldr	r0, [pc, #160]	; (8009738 <mem_free+0x110>)
 8009698:	f00c fdfc 	bl	8016294 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800969c:	69fb      	ldr	r3, [r7, #28]
 800969e:	791b      	ldrb	r3, [r3, #4]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d110      	bne.n	80096c6 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80096a4:	4b1e      	ldr	r3, [pc, #120]	; (8009720 <mem_free+0xf8>)
 80096a6:	f44f 7223 	mov.w	r2, #652	; 0x28c
 80096aa:	4924      	ldr	r1, [pc, #144]	; (800973c <mem_free+0x114>)
 80096ac:	481e      	ldr	r0, [pc, #120]	; (8009728 <mem_free+0x100>)
 80096ae:	f00c feaf 	bl	8016410 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80096b2:	4821      	ldr	r0, [pc, #132]	; (8009738 <mem_free+0x110>)
 80096b4:	f00c fdfd 	bl	80162b2 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80096b8:	f00c fe28 	bl	801630c <sys_arch_protect>
 80096bc:	6178      	str	r0, [r7, #20]
 80096be:	6978      	ldr	r0, [r7, #20]
 80096c0:	f00c fe32 	bl	8016328 <sys_arch_unprotect>
    return;
 80096c4:	e029      	b.n	800971a <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 80096c6:	69f8      	ldr	r0, [r7, #28]
 80096c8:	f7ff ff72 	bl	80095b0 <mem_link_valid>
 80096cc:	4603      	mov	r3, r0
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d110      	bne.n	80096f4 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80096d2:	4b13      	ldr	r3, [pc, #76]	; (8009720 <mem_free+0xf8>)
 80096d4:	f240 2295 	movw	r2, #661	; 0x295
 80096d8:	4919      	ldr	r1, [pc, #100]	; (8009740 <mem_free+0x118>)
 80096da:	4813      	ldr	r0, [pc, #76]	; (8009728 <mem_free+0x100>)
 80096dc:	f00c fe98 	bl	8016410 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80096e0:	4815      	ldr	r0, [pc, #84]	; (8009738 <mem_free+0x110>)
 80096e2:	f00c fde6 	bl	80162b2 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80096e6:	f00c fe11 	bl	801630c <sys_arch_protect>
 80096ea:	61b8      	str	r0, [r7, #24]
 80096ec:	69b8      	ldr	r0, [r7, #24]
 80096ee:	f00c fe1b 	bl	8016328 <sys_arch_unprotect>
    return;
 80096f2:	e012      	b.n	800971a <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 80096f4:	69fb      	ldr	r3, [r7, #28]
 80096f6:	2200      	movs	r2, #0
 80096f8:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80096fa:	4b12      	ldr	r3, [pc, #72]	; (8009744 <mem_free+0x11c>)
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	69fa      	ldr	r2, [r7, #28]
 8009700:	429a      	cmp	r2, r3
 8009702:	d202      	bcs.n	800970a <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8009704:	4a0f      	ldr	r2, [pc, #60]	; (8009744 <mem_free+0x11c>)
 8009706:	69fb      	ldr	r3, [r7, #28]
 8009708:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800970a:	69f8      	ldr	r0, [r7, #28]
 800970c:	f7ff fe5c 	bl	80093c8 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8009710:	4809      	ldr	r0, [pc, #36]	; (8009738 <mem_free+0x110>)
 8009712:	f00c fdce 	bl	80162b2 <sys_mutex_unlock>
 8009716:	e000      	b.n	800971a <mem_free+0xf2>
    return;
 8009718:	bf00      	nop
}
 800971a:	3720      	adds	r7, #32
 800971c:	46bd      	mov	sp, r7
 800971e:	bd80      	pop	{r7, pc}
 8009720:	08018490 	.word	0x08018490
 8009724:	08018580 	.word	0x08018580
 8009728:	080184d8 	.word	0x080184d8
 800972c:	20017dac 	.word	0x20017dac
 8009730:	20017db0 	.word	0x20017db0
 8009734:	080185a4 	.word	0x080185a4
 8009738:	20017db4 	.word	0x20017db4
 800973c:	080185c0 	.word	0x080185c0
 8009740:	080185e8 	.word	0x080185e8
 8009744:	20017db8 	.word	0x20017db8

08009748 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b088      	sub	sp, #32
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
 8009750:	460b      	mov	r3, r1
 8009752:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8009754:	887b      	ldrh	r3, [r7, #2]
 8009756:	3303      	adds	r3, #3
 8009758:	b29b      	uxth	r3, r3
 800975a:	f023 0303 	bic.w	r3, r3, #3
 800975e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8009760:	8bfb      	ldrh	r3, [r7, #30]
 8009762:	2b0b      	cmp	r3, #11
 8009764:	d801      	bhi.n	800976a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8009766:	230c      	movs	r3, #12
 8009768:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800976a:	8bfb      	ldrh	r3, [r7, #30]
 800976c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009770:	d803      	bhi.n	800977a <mem_trim+0x32>
 8009772:	8bfa      	ldrh	r2, [r7, #30]
 8009774:	887b      	ldrh	r3, [r7, #2]
 8009776:	429a      	cmp	r2, r3
 8009778:	d201      	bcs.n	800977e <mem_trim+0x36>
    return NULL;
 800977a:	2300      	movs	r3, #0
 800977c:	e0d8      	b.n	8009930 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800977e:	4b6e      	ldr	r3, [pc, #440]	; (8009938 <mem_trim+0x1f0>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	687a      	ldr	r2, [r7, #4]
 8009784:	429a      	cmp	r2, r3
 8009786:	d304      	bcc.n	8009792 <mem_trim+0x4a>
 8009788:	4b6c      	ldr	r3, [pc, #432]	; (800993c <mem_trim+0x1f4>)
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	687a      	ldr	r2, [r7, #4]
 800978e:	429a      	cmp	r2, r3
 8009790:	d306      	bcc.n	80097a0 <mem_trim+0x58>
 8009792:	4b6b      	ldr	r3, [pc, #428]	; (8009940 <mem_trim+0x1f8>)
 8009794:	f240 22d1 	movw	r2, #721	; 0x2d1
 8009798:	496a      	ldr	r1, [pc, #424]	; (8009944 <mem_trim+0x1fc>)
 800979a:	486b      	ldr	r0, [pc, #428]	; (8009948 <mem_trim+0x200>)
 800979c:	f00c fe38 	bl	8016410 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80097a0:	4b65      	ldr	r3, [pc, #404]	; (8009938 <mem_trim+0x1f0>)
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	687a      	ldr	r2, [r7, #4]
 80097a6:	429a      	cmp	r2, r3
 80097a8:	d304      	bcc.n	80097b4 <mem_trim+0x6c>
 80097aa:	4b64      	ldr	r3, [pc, #400]	; (800993c <mem_trim+0x1f4>)
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	687a      	ldr	r2, [r7, #4]
 80097b0:	429a      	cmp	r2, r3
 80097b2:	d307      	bcc.n	80097c4 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80097b4:	f00c fdaa 	bl	801630c <sys_arch_protect>
 80097b8:	60b8      	str	r0, [r7, #8]
 80097ba:	68b8      	ldr	r0, [r7, #8]
 80097bc:	f00c fdb4 	bl	8016328 <sys_arch_unprotect>
    return rmem;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	e0b5      	b.n	8009930 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	3b08      	subs	r3, #8
 80097c8:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80097ca:	69b8      	ldr	r0, [r7, #24]
 80097cc:	f7ff fdea 	bl	80093a4 <mem_to_ptr>
 80097d0:	4603      	mov	r3, r0
 80097d2:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80097d4:	69bb      	ldr	r3, [r7, #24]
 80097d6:	881a      	ldrh	r2, [r3, #0]
 80097d8:	8afb      	ldrh	r3, [r7, #22]
 80097da:	1ad3      	subs	r3, r2, r3
 80097dc:	b29b      	uxth	r3, r3
 80097de:	3b08      	subs	r3, #8
 80097e0:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80097e2:	8bfa      	ldrh	r2, [r7, #30]
 80097e4:	8abb      	ldrh	r3, [r7, #20]
 80097e6:	429a      	cmp	r2, r3
 80097e8:	d906      	bls.n	80097f8 <mem_trim+0xb0>
 80097ea:	4b55      	ldr	r3, [pc, #340]	; (8009940 <mem_trim+0x1f8>)
 80097ec:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 80097f0:	4956      	ldr	r1, [pc, #344]	; (800994c <mem_trim+0x204>)
 80097f2:	4855      	ldr	r0, [pc, #340]	; (8009948 <mem_trim+0x200>)
 80097f4:	f00c fe0c 	bl	8016410 <iprintf>
  if (newsize > size) {
 80097f8:	8bfa      	ldrh	r2, [r7, #30]
 80097fa:	8abb      	ldrh	r3, [r7, #20]
 80097fc:	429a      	cmp	r2, r3
 80097fe:	d901      	bls.n	8009804 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8009800:	2300      	movs	r3, #0
 8009802:	e095      	b.n	8009930 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8009804:	8bfa      	ldrh	r2, [r7, #30]
 8009806:	8abb      	ldrh	r3, [r7, #20]
 8009808:	429a      	cmp	r2, r3
 800980a:	d101      	bne.n	8009810 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	e08f      	b.n	8009930 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8009810:	484f      	ldr	r0, [pc, #316]	; (8009950 <mem_trim+0x208>)
 8009812:	f00c fd3f 	bl	8016294 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8009816:	69bb      	ldr	r3, [r7, #24]
 8009818:	881b      	ldrh	r3, [r3, #0]
 800981a:	4618      	mov	r0, r3
 800981c:	f7ff fdb0 	bl	8009380 <ptr_to_mem>
 8009820:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8009822:	693b      	ldr	r3, [r7, #16]
 8009824:	791b      	ldrb	r3, [r3, #4]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d13f      	bne.n	80098aa <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800982a:	69bb      	ldr	r3, [r7, #24]
 800982c:	881b      	ldrh	r3, [r3, #0]
 800982e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009832:	d106      	bne.n	8009842 <mem_trim+0xfa>
 8009834:	4b42      	ldr	r3, [pc, #264]	; (8009940 <mem_trim+0x1f8>)
 8009836:	f240 22f5 	movw	r2, #757	; 0x2f5
 800983a:	4946      	ldr	r1, [pc, #280]	; (8009954 <mem_trim+0x20c>)
 800983c:	4842      	ldr	r0, [pc, #264]	; (8009948 <mem_trim+0x200>)
 800983e:	f00c fde7 	bl	8016410 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8009842:	693b      	ldr	r3, [r7, #16]
 8009844:	881b      	ldrh	r3, [r3, #0]
 8009846:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8009848:	8afa      	ldrh	r2, [r7, #22]
 800984a:	8bfb      	ldrh	r3, [r7, #30]
 800984c:	4413      	add	r3, r2
 800984e:	b29b      	uxth	r3, r3
 8009850:	3308      	adds	r3, #8
 8009852:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8009854:	4b40      	ldr	r3, [pc, #256]	; (8009958 <mem_trim+0x210>)
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	693a      	ldr	r2, [r7, #16]
 800985a:	429a      	cmp	r2, r3
 800985c:	d106      	bne.n	800986c <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800985e:	89fb      	ldrh	r3, [r7, #14]
 8009860:	4618      	mov	r0, r3
 8009862:	f7ff fd8d 	bl	8009380 <ptr_to_mem>
 8009866:	4603      	mov	r3, r0
 8009868:	4a3b      	ldr	r2, [pc, #236]	; (8009958 <mem_trim+0x210>)
 800986a:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800986c:	89fb      	ldrh	r3, [r7, #14]
 800986e:	4618      	mov	r0, r3
 8009870:	f7ff fd86 	bl	8009380 <ptr_to_mem>
 8009874:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8009876:	693b      	ldr	r3, [r7, #16]
 8009878:	2200      	movs	r2, #0
 800987a:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800987c:	693b      	ldr	r3, [r7, #16]
 800987e:	89ba      	ldrh	r2, [r7, #12]
 8009880:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8009882:	693b      	ldr	r3, [r7, #16]
 8009884:	8afa      	ldrh	r2, [r7, #22]
 8009886:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8009888:	69bb      	ldr	r3, [r7, #24]
 800988a:	89fa      	ldrh	r2, [r7, #14]
 800988c:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800988e:	693b      	ldr	r3, [r7, #16]
 8009890:	881b      	ldrh	r3, [r3, #0]
 8009892:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009896:	d047      	beq.n	8009928 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8009898:	693b      	ldr	r3, [r7, #16]
 800989a:	881b      	ldrh	r3, [r3, #0]
 800989c:	4618      	mov	r0, r3
 800989e:	f7ff fd6f 	bl	8009380 <ptr_to_mem>
 80098a2:	4602      	mov	r2, r0
 80098a4:	89fb      	ldrh	r3, [r7, #14]
 80098a6:	8053      	strh	r3, [r2, #2]
 80098a8:	e03e      	b.n	8009928 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80098aa:	8bfb      	ldrh	r3, [r7, #30]
 80098ac:	f103 0214 	add.w	r2, r3, #20
 80098b0:	8abb      	ldrh	r3, [r7, #20]
 80098b2:	429a      	cmp	r2, r3
 80098b4:	d838      	bhi.n	8009928 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80098b6:	8afa      	ldrh	r2, [r7, #22]
 80098b8:	8bfb      	ldrh	r3, [r7, #30]
 80098ba:	4413      	add	r3, r2
 80098bc:	b29b      	uxth	r3, r3
 80098be:	3308      	adds	r3, #8
 80098c0:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80098c2:	69bb      	ldr	r3, [r7, #24]
 80098c4:	881b      	ldrh	r3, [r3, #0]
 80098c6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80098ca:	d106      	bne.n	80098da <mem_trim+0x192>
 80098cc:	4b1c      	ldr	r3, [pc, #112]	; (8009940 <mem_trim+0x1f8>)
 80098ce:	f240 3216 	movw	r2, #790	; 0x316
 80098d2:	4920      	ldr	r1, [pc, #128]	; (8009954 <mem_trim+0x20c>)
 80098d4:	481c      	ldr	r0, [pc, #112]	; (8009948 <mem_trim+0x200>)
 80098d6:	f00c fd9b 	bl	8016410 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80098da:	89fb      	ldrh	r3, [r7, #14]
 80098dc:	4618      	mov	r0, r3
 80098de:	f7ff fd4f 	bl	8009380 <ptr_to_mem>
 80098e2:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80098e4:	4b1c      	ldr	r3, [pc, #112]	; (8009958 <mem_trim+0x210>)
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	693a      	ldr	r2, [r7, #16]
 80098ea:	429a      	cmp	r2, r3
 80098ec:	d202      	bcs.n	80098f4 <mem_trim+0x1ac>
      lfree = mem2;
 80098ee:	4a1a      	ldr	r2, [pc, #104]	; (8009958 <mem_trim+0x210>)
 80098f0:	693b      	ldr	r3, [r7, #16]
 80098f2:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80098f4:	693b      	ldr	r3, [r7, #16]
 80098f6:	2200      	movs	r2, #0
 80098f8:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80098fa:	69bb      	ldr	r3, [r7, #24]
 80098fc:	881a      	ldrh	r2, [r3, #0]
 80098fe:	693b      	ldr	r3, [r7, #16]
 8009900:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8009902:	693b      	ldr	r3, [r7, #16]
 8009904:	8afa      	ldrh	r2, [r7, #22]
 8009906:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8009908:	69bb      	ldr	r3, [r7, #24]
 800990a:	89fa      	ldrh	r2, [r7, #14]
 800990c:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800990e:	693b      	ldr	r3, [r7, #16]
 8009910:	881b      	ldrh	r3, [r3, #0]
 8009912:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009916:	d007      	beq.n	8009928 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8009918:	693b      	ldr	r3, [r7, #16]
 800991a:	881b      	ldrh	r3, [r3, #0]
 800991c:	4618      	mov	r0, r3
 800991e:	f7ff fd2f 	bl	8009380 <ptr_to_mem>
 8009922:	4602      	mov	r2, r0
 8009924:	89fb      	ldrh	r3, [r7, #14]
 8009926:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8009928:	4809      	ldr	r0, [pc, #36]	; (8009950 <mem_trim+0x208>)
 800992a:	f00c fcc2 	bl	80162b2 <sys_mutex_unlock>
  return rmem;
 800992e:	687b      	ldr	r3, [r7, #4]
}
 8009930:	4618      	mov	r0, r3
 8009932:	3720      	adds	r7, #32
 8009934:	46bd      	mov	sp, r7
 8009936:	bd80      	pop	{r7, pc}
 8009938:	20017dac 	.word	0x20017dac
 800993c:	20017db0 	.word	0x20017db0
 8009940:	08018490 	.word	0x08018490
 8009944:	0801861c 	.word	0x0801861c
 8009948:	080184d8 	.word	0x080184d8
 800994c:	08018634 	.word	0x08018634
 8009950:	20017db4 	.word	0x20017db4
 8009954:	08018654 	.word	0x08018654
 8009958:	20017db8 	.word	0x20017db8

0800995c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b088      	sub	sp, #32
 8009960:	af00      	add	r7, sp, #0
 8009962:	4603      	mov	r3, r0
 8009964:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8009966:	88fb      	ldrh	r3, [r7, #6]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d101      	bne.n	8009970 <mem_malloc+0x14>
    return NULL;
 800996c:	2300      	movs	r3, #0
 800996e:	e0e2      	b.n	8009b36 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8009970:	88fb      	ldrh	r3, [r7, #6]
 8009972:	3303      	adds	r3, #3
 8009974:	b29b      	uxth	r3, r3
 8009976:	f023 0303 	bic.w	r3, r3, #3
 800997a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800997c:	8bbb      	ldrh	r3, [r7, #28]
 800997e:	2b0b      	cmp	r3, #11
 8009980:	d801      	bhi.n	8009986 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8009982:	230c      	movs	r3, #12
 8009984:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8009986:	8bbb      	ldrh	r3, [r7, #28]
 8009988:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800998c:	d803      	bhi.n	8009996 <mem_malloc+0x3a>
 800998e:	8bba      	ldrh	r2, [r7, #28]
 8009990:	88fb      	ldrh	r3, [r7, #6]
 8009992:	429a      	cmp	r2, r3
 8009994:	d201      	bcs.n	800999a <mem_malloc+0x3e>
    return NULL;
 8009996:	2300      	movs	r3, #0
 8009998:	e0cd      	b.n	8009b36 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800999a:	4869      	ldr	r0, [pc, #420]	; (8009b40 <mem_malloc+0x1e4>)
 800999c:	f00c fc7a 	bl	8016294 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80099a0:	4b68      	ldr	r3, [pc, #416]	; (8009b44 <mem_malloc+0x1e8>)
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	4618      	mov	r0, r3
 80099a6:	f7ff fcfd 	bl	80093a4 <mem_to_ptr>
 80099aa:	4603      	mov	r3, r0
 80099ac:	83fb      	strh	r3, [r7, #30]
 80099ae:	e0b7      	b.n	8009b20 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80099b0:	8bfb      	ldrh	r3, [r7, #30]
 80099b2:	4618      	mov	r0, r3
 80099b4:	f7ff fce4 	bl	8009380 <ptr_to_mem>
 80099b8:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80099ba:	697b      	ldr	r3, [r7, #20]
 80099bc:	791b      	ldrb	r3, [r3, #4]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	f040 80a7 	bne.w	8009b12 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80099c4:	697b      	ldr	r3, [r7, #20]
 80099c6:	881b      	ldrh	r3, [r3, #0]
 80099c8:	461a      	mov	r2, r3
 80099ca:	8bfb      	ldrh	r3, [r7, #30]
 80099cc:	1ad3      	subs	r3, r2, r3
 80099ce:	f1a3 0208 	sub.w	r2, r3, #8
 80099d2:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80099d4:	429a      	cmp	r2, r3
 80099d6:	f0c0 809c 	bcc.w	8009b12 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80099da:	697b      	ldr	r3, [r7, #20]
 80099dc:	881b      	ldrh	r3, [r3, #0]
 80099de:	461a      	mov	r2, r3
 80099e0:	8bfb      	ldrh	r3, [r7, #30]
 80099e2:	1ad3      	subs	r3, r2, r3
 80099e4:	f1a3 0208 	sub.w	r2, r3, #8
 80099e8:	8bbb      	ldrh	r3, [r7, #28]
 80099ea:	3314      	adds	r3, #20
 80099ec:	429a      	cmp	r2, r3
 80099ee:	d333      	bcc.n	8009a58 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80099f0:	8bfa      	ldrh	r2, [r7, #30]
 80099f2:	8bbb      	ldrh	r3, [r7, #28]
 80099f4:	4413      	add	r3, r2
 80099f6:	b29b      	uxth	r3, r3
 80099f8:	3308      	adds	r3, #8
 80099fa:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80099fc:	8a7b      	ldrh	r3, [r7, #18]
 80099fe:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009a02:	d106      	bne.n	8009a12 <mem_malloc+0xb6>
 8009a04:	4b50      	ldr	r3, [pc, #320]	; (8009b48 <mem_malloc+0x1ec>)
 8009a06:	f240 3287 	movw	r2, #903	; 0x387
 8009a0a:	4950      	ldr	r1, [pc, #320]	; (8009b4c <mem_malloc+0x1f0>)
 8009a0c:	4850      	ldr	r0, [pc, #320]	; (8009b50 <mem_malloc+0x1f4>)
 8009a0e:	f00c fcff 	bl	8016410 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8009a12:	8a7b      	ldrh	r3, [r7, #18]
 8009a14:	4618      	mov	r0, r3
 8009a16:	f7ff fcb3 	bl	8009380 <ptr_to_mem>
 8009a1a:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	2200      	movs	r2, #0
 8009a20:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8009a22:	697b      	ldr	r3, [r7, #20]
 8009a24:	881a      	ldrh	r2, [r3, #0]
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	8bfa      	ldrh	r2, [r7, #30]
 8009a2e:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8009a30:	697b      	ldr	r3, [r7, #20]
 8009a32:	8a7a      	ldrh	r2, [r7, #18]
 8009a34:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8009a36:	697b      	ldr	r3, [r7, #20]
 8009a38:	2201      	movs	r2, #1
 8009a3a:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	881b      	ldrh	r3, [r3, #0]
 8009a40:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009a44:	d00b      	beq.n	8009a5e <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	881b      	ldrh	r3, [r3, #0]
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	f7ff fc98 	bl	8009380 <ptr_to_mem>
 8009a50:	4602      	mov	r2, r0
 8009a52:	8a7b      	ldrh	r3, [r7, #18]
 8009a54:	8053      	strh	r3, [r2, #2]
 8009a56:	e002      	b.n	8009a5e <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8009a58:	697b      	ldr	r3, [r7, #20]
 8009a5a:	2201      	movs	r2, #1
 8009a5c:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8009a5e:	4b39      	ldr	r3, [pc, #228]	; (8009b44 <mem_malloc+0x1e8>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	697a      	ldr	r2, [r7, #20]
 8009a64:	429a      	cmp	r2, r3
 8009a66:	d127      	bne.n	8009ab8 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8009a68:	4b36      	ldr	r3, [pc, #216]	; (8009b44 <mem_malloc+0x1e8>)
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8009a6e:	e005      	b.n	8009a7c <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8009a70:	69bb      	ldr	r3, [r7, #24]
 8009a72:	881b      	ldrh	r3, [r3, #0]
 8009a74:	4618      	mov	r0, r3
 8009a76:	f7ff fc83 	bl	8009380 <ptr_to_mem>
 8009a7a:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8009a7c:	69bb      	ldr	r3, [r7, #24]
 8009a7e:	791b      	ldrb	r3, [r3, #4]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d004      	beq.n	8009a8e <mem_malloc+0x132>
 8009a84:	4b33      	ldr	r3, [pc, #204]	; (8009b54 <mem_malloc+0x1f8>)
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	69ba      	ldr	r2, [r7, #24]
 8009a8a:	429a      	cmp	r2, r3
 8009a8c:	d1f0      	bne.n	8009a70 <mem_malloc+0x114>
          }
          lfree = cur;
 8009a8e:	4a2d      	ldr	r2, [pc, #180]	; (8009b44 <mem_malloc+0x1e8>)
 8009a90:	69bb      	ldr	r3, [r7, #24]
 8009a92:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8009a94:	4b2b      	ldr	r3, [pc, #172]	; (8009b44 <mem_malloc+0x1e8>)
 8009a96:	681a      	ldr	r2, [r3, #0]
 8009a98:	4b2e      	ldr	r3, [pc, #184]	; (8009b54 <mem_malloc+0x1f8>)
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	429a      	cmp	r2, r3
 8009a9e:	d00b      	beq.n	8009ab8 <mem_malloc+0x15c>
 8009aa0:	4b28      	ldr	r3, [pc, #160]	; (8009b44 <mem_malloc+0x1e8>)
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	791b      	ldrb	r3, [r3, #4]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d006      	beq.n	8009ab8 <mem_malloc+0x15c>
 8009aaa:	4b27      	ldr	r3, [pc, #156]	; (8009b48 <mem_malloc+0x1ec>)
 8009aac:	f240 32b5 	movw	r2, #949	; 0x3b5
 8009ab0:	4929      	ldr	r1, [pc, #164]	; (8009b58 <mem_malloc+0x1fc>)
 8009ab2:	4827      	ldr	r0, [pc, #156]	; (8009b50 <mem_malloc+0x1f4>)
 8009ab4:	f00c fcac 	bl	8016410 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8009ab8:	4821      	ldr	r0, [pc, #132]	; (8009b40 <mem_malloc+0x1e4>)
 8009aba:	f00c fbfa 	bl	80162b2 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8009abe:	8bba      	ldrh	r2, [r7, #28]
 8009ac0:	697b      	ldr	r3, [r7, #20]
 8009ac2:	4413      	add	r3, r2
 8009ac4:	3308      	adds	r3, #8
 8009ac6:	4a23      	ldr	r2, [pc, #140]	; (8009b54 <mem_malloc+0x1f8>)
 8009ac8:	6812      	ldr	r2, [r2, #0]
 8009aca:	4293      	cmp	r3, r2
 8009acc:	d906      	bls.n	8009adc <mem_malloc+0x180>
 8009ace:	4b1e      	ldr	r3, [pc, #120]	; (8009b48 <mem_malloc+0x1ec>)
 8009ad0:	f240 32b9 	movw	r2, #953	; 0x3b9
 8009ad4:	4921      	ldr	r1, [pc, #132]	; (8009b5c <mem_malloc+0x200>)
 8009ad6:	481e      	ldr	r0, [pc, #120]	; (8009b50 <mem_malloc+0x1f4>)
 8009ad8:	f00c fc9a 	bl	8016410 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8009adc:	697b      	ldr	r3, [r7, #20]
 8009ade:	f003 0303 	and.w	r3, r3, #3
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d006      	beq.n	8009af4 <mem_malloc+0x198>
 8009ae6:	4b18      	ldr	r3, [pc, #96]	; (8009b48 <mem_malloc+0x1ec>)
 8009ae8:	f240 32bb 	movw	r2, #955	; 0x3bb
 8009aec:	491c      	ldr	r1, [pc, #112]	; (8009b60 <mem_malloc+0x204>)
 8009aee:	4818      	ldr	r0, [pc, #96]	; (8009b50 <mem_malloc+0x1f4>)
 8009af0:	f00c fc8e 	bl	8016410 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8009af4:	697b      	ldr	r3, [r7, #20]
 8009af6:	f003 0303 	and.w	r3, r3, #3
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d006      	beq.n	8009b0c <mem_malloc+0x1b0>
 8009afe:	4b12      	ldr	r3, [pc, #72]	; (8009b48 <mem_malloc+0x1ec>)
 8009b00:	f240 32bd 	movw	r2, #957	; 0x3bd
 8009b04:	4917      	ldr	r1, [pc, #92]	; (8009b64 <mem_malloc+0x208>)
 8009b06:	4812      	ldr	r0, [pc, #72]	; (8009b50 <mem_malloc+0x1f4>)
 8009b08:	f00c fc82 	bl	8016410 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8009b0c:	697b      	ldr	r3, [r7, #20]
 8009b0e:	3308      	adds	r3, #8
 8009b10:	e011      	b.n	8009b36 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 8009b12:	8bfb      	ldrh	r3, [r7, #30]
 8009b14:	4618      	mov	r0, r3
 8009b16:	f7ff fc33 	bl	8009380 <ptr_to_mem>
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	881b      	ldrh	r3, [r3, #0]
 8009b1e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8009b20:	8bfa      	ldrh	r2, [r7, #30]
 8009b22:	8bbb      	ldrh	r3, [r7, #28]
 8009b24:	f5c3 53a0 	rsb	r3, r3, #5120	; 0x1400
 8009b28:	429a      	cmp	r2, r3
 8009b2a:	f4ff af41 	bcc.w	80099b0 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8009b2e:	4804      	ldr	r0, [pc, #16]	; (8009b40 <mem_malloc+0x1e4>)
 8009b30:	f00c fbbf 	bl	80162b2 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8009b34:	2300      	movs	r3, #0
}
 8009b36:	4618      	mov	r0, r3
 8009b38:	3720      	adds	r7, #32
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bd80      	pop	{r7, pc}
 8009b3e:	bf00      	nop
 8009b40:	20017db4 	.word	0x20017db4
 8009b44:	20017db8 	.word	0x20017db8
 8009b48:	08018490 	.word	0x08018490
 8009b4c:	08018654 	.word	0x08018654
 8009b50:	080184d8 	.word	0x080184d8
 8009b54:	20017db0 	.word	0x20017db0
 8009b58:	08018668 	.word	0x08018668
 8009b5c:	08018684 	.word	0x08018684
 8009b60:	080186b4 	.word	0x080186b4
 8009b64:	080186e4 	.word	0x080186e4

08009b68 <mem_calloc>:
 * @param size size of the objects to allocate
 * @return pointer to allocated memory / NULL pointer if there is an error
 */
void *
mem_calloc(mem_size_t count, mem_size_t size)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b084      	sub	sp, #16
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	4603      	mov	r3, r0
 8009b70:	460a      	mov	r2, r1
 8009b72:	80fb      	strh	r3, [r7, #6]
 8009b74:	4613      	mov	r3, r2
 8009b76:	80bb      	strh	r3, [r7, #4]
  void *p;
  size_t alloc_size = (size_t)count * (size_t)size;
 8009b78:	88fb      	ldrh	r3, [r7, #6]
 8009b7a:	88ba      	ldrh	r2, [r7, #4]
 8009b7c:	fb02 f303 	mul.w	r3, r2, r3
 8009b80:	60fb      	str	r3, [r7, #12]

  if ((size_t)(mem_size_t)alloc_size != alloc_size) {
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	b29b      	uxth	r3, r3
 8009b86:	461a      	mov	r2, r3
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	4293      	cmp	r3, r2
 8009b8c:	d001      	beq.n	8009b92 <mem_calloc+0x2a>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_calloc: could not allocate %"SZT_F" bytes\n", alloc_size));
    return NULL;
 8009b8e:	2300      	movs	r3, #0
 8009b90:	e00e      	b.n	8009bb0 <mem_calloc+0x48>
  }

  /* allocate 'count' objects of size 'size' */
  p = mem_malloc((mem_size_t)alloc_size);
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	b29b      	uxth	r3, r3
 8009b96:	4618      	mov	r0, r3
 8009b98:	f7ff fee0 	bl	800995c <mem_malloc>
 8009b9c:	60b8      	str	r0, [r7, #8]
  if (p) {
 8009b9e:	68bb      	ldr	r3, [r7, #8]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d004      	beq.n	8009bae <mem_calloc+0x46>
    /* zero the memory */
    memset(p, 0, alloc_size);
 8009ba4:	68fa      	ldr	r2, [r7, #12]
 8009ba6:	2100      	movs	r1, #0
 8009ba8:	68b8      	ldr	r0, [r7, #8]
 8009baa:	f00c fc29 	bl	8016400 <memset>
  }
  return p;
 8009bae:	68bb      	ldr	r3, [r7, #8]
}
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	3710      	adds	r7, #16
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	bd80      	pop	{r7, pc}

08009bb8 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8009bb8:	b480      	push	{r7}
 8009bba:	b085      	sub	sp, #20
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	689b      	ldr	r3, [r3, #8]
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	685b      	ldr	r3, [r3, #4]
 8009bcc:	3303      	adds	r3, #3
 8009bce:	f023 0303 	bic.w	r3, r3, #3
 8009bd2:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	60fb      	str	r3, [r7, #12]
 8009bd8:	e011      	b.n	8009bfe <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	689b      	ldr	r3, [r3, #8]
 8009bde:	681a      	ldr	r2, [r3, #0]
 8009be0:	68bb      	ldr	r3, [r7, #8]
 8009be2:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	689b      	ldr	r3, [r3, #8]
 8009be8:	68ba      	ldr	r2, [r7, #8]
 8009bea:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	881b      	ldrh	r3, [r3, #0]
 8009bf0:	461a      	mov	r2, r3
 8009bf2:	68bb      	ldr	r3, [r7, #8]
 8009bf4:	4413      	add	r3, r2
 8009bf6:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	3301      	adds	r3, #1
 8009bfc:	60fb      	str	r3, [r7, #12]
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	885b      	ldrh	r3, [r3, #2]
 8009c02:	461a      	mov	r2, r3
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	4293      	cmp	r3, r2
 8009c08:	dbe7      	blt.n	8009bda <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8009c0a:	bf00      	nop
 8009c0c:	bf00      	nop
 8009c0e:	3714      	adds	r7, #20
 8009c10:	46bd      	mov	sp, r7
 8009c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c16:	4770      	bx	lr

08009c18 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b082      	sub	sp, #8
 8009c1c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8009c1e:	2300      	movs	r3, #0
 8009c20:	80fb      	strh	r3, [r7, #6]
 8009c22:	e009      	b.n	8009c38 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8009c24:	88fb      	ldrh	r3, [r7, #6]
 8009c26:	4a08      	ldr	r2, [pc, #32]	; (8009c48 <memp_init+0x30>)
 8009c28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	f7ff ffc3 	bl	8009bb8 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8009c32:	88fb      	ldrh	r3, [r7, #6]
 8009c34:	3301      	adds	r3, #1
 8009c36:	80fb      	strh	r3, [r7, #6]
 8009c38:	88fb      	ldrh	r3, [r7, #6]
 8009c3a:	2b0c      	cmp	r3, #12
 8009c3c:	d9f2      	bls.n	8009c24 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8009c3e:	bf00      	nop
 8009c40:	bf00      	nop
 8009c42:	3708      	adds	r7, #8
 8009c44:	46bd      	mov	sp, r7
 8009c46:	bd80      	pop	{r7, pc}
 8009c48:	0801b2a8 	.word	0x0801b2a8

08009c4c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b084      	sub	sp, #16
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8009c54:	f00c fb5a 	bl	801630c <sys_arch_protect>
 8009c58:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	689b      	ldr	r3, [r3, #8]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8009c62:	68bb      	ldr	r3, [r7, #8]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d015      	beq.n	8009c94 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	689b      	ldr	r3, [r3, #8]
 8009c6c:	68ba      	ldr	r2, [r7, #8]
 8009c6e:	6812      	ldr	r2, [r2, #0]
 8009c70:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8009c72:	68bb      	ldr	r3, [r7, #8]
 8009c74:	f003 0303 	and.w	r3, r3, #3
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d006      	beq.n	8009c8a <do_memp_malloc_pool+0x3e>
 8009c7c:	4b09      	ldr	r3, [pc, #36]	; (8009ca4 <do_memp_malloc_pool+0x58>)
 8009c7e:	f44f 728c 	mov.w	r2, #280	; 0x118
 8009c82:	4909      	ldr	r1, [pc, #36]	; (8009ca8 <do_memp_malloc_pool+0x5c>)
 8009c84:	4809      	ldr	r0, [pc, #36]	; (8009cac <do_memp_malloc_pool+0x60>)
 8009c86:	f00c fbc3 	bl	8016410 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8009c8a:	68f8      	ldr	r0, [r7, #12]
 8009c8c:	f00c fb4c 	bl	8016328 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8009c90:	68bb      	ldr	r3, [r7, #8]
 8009c92:	e003      	b.n	8009c9c <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8009c94:	68f8      	ldr	r0, [r7, #12]
 8009c96:	f00c fb47 	bl	8016328 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8009c9a:	2300      	movs	r3, #0
}
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	3710      	adds	r7, #16
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	bd80      	pop	{r7, pc}
 8009ca4:	08018708 	.word	0x08018708
 8009ca8:	08018738 	.word	0x08018738
 8009cac:	0801875c 	.word	0x0801875c

08009cb0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b084      	sub	sp, #16
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	4603      	mov	r3, r0
 8009cb8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8009cba:	79fb      	ldrb	r3, [r7, #7]
 8009cbc:	2b0c      	cmp	r3, #12
 8009cbe:	d908      	bls.n	8009cd2 <memp_malloc+0x22>
 8009cc0:	4b0a      	ldr	r3, [pc, #40]	; (8009cec <memp_malloc+0x3c>)
 8009cc2:	f240 1257 	movw	r2, #343	; 0x157
 8009cc6:	490a      	ldr	r1, [pc, #40]	; (8009cf0 <memp_malloc+0x40>)
 8009cc8:	480a      	ldr	r0, [pc, #40]	; (8009cf4 <memp_malloc+0x44>)
 8009cca:	f00c fba1 	bl	8016410 <iprintf>
 8009cce:	2300      	movs	r3, #0
 8009cd0:	e008      	b.n	8009ce4 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8009cd2:	79fb      	ldrb	r3, [r7, #7]
 8009cd4:	4a08      	ldr	r2, [pc, #32]	; (8009cf8 <memp_malloc+0x48>)
 8009cd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009cda:	4618      	mov	r0, r3
 8009cdc:	f7ff ffb6 	bl	8009c4c <do_memp_malloc_pool>
 8009ce0:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
}
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	3710      	adds	r7, #16
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	bd80      	pop	{r7, pc}
 8009cec:	08018708 	.word	0x08018708
 8009cf0:	08018798 	.word	0x08018798
 8009cf4:	0801875c 	.word	0x0801875c
 8009cf8:	0801b2a8 	.word	0x0801b2a8

08009cfc <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b084      	sub	sp, #16
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
 8009d04:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	f003 0303 	and.w	r3, r3, #3
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d006      	beq.n	8009d1e <do_memp_free_pool+0x22>
 8009d10:	4b0d      	ldr	r3, [pc, #52]	; (8009d48 <do_memp_free_pool+0x4c>)
 8009d12:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8009d16:	490d      	ldr	r1, [pc, #52]	; (8009d4c <do_memp_free_pool+0x50>)
 8009d18:	480d      	ldr	r0, [pc, #52]	; (8009d50 <do_memp_free_pool+0x54>)
 8009d1a:	f00c fb79 	bl	8016410 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8009d22:	f00c faf3 	bl	801630c <sys_arch_protect>
 8009d26:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	689b      	ldr	r3, [r3, #8]
 8009d2c:	681a      	ldr	r2, [r3, #0]
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	689b      	ldr	r3, [r3, #8]
 8009d36:	68fa      	ldr	r2, [r7, #12]
 8009d38:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8009d3a:	68b8      	ldr	r0, [r7, #8]
 8009d3c:	f00c faf4 	bl	8016328 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8009d40:	bf00      	nop
 8009d42:	3710      	adds	r7, #16
 8009d44:	46bd      	mov	sp, r7
 8009d46:	bd80      	pop	{r7, pc}
 8009d48:	08018708 	.word	0x08018708
 8009d4c:	080187b8 	.word	0x080187b8
 8009d50:	0801875c 	.word	0x0801875c

08009d54 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b082      	sub	sp, #8
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	6039      	str	r1, [r7, #0]
 8009d5e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8009d60:	79fb      	ldrb	r3, [r7, #7]
 8009d62:	2b0c      	cmp	r3, #12
 8009d64:	d907      	bls.n	8009d76 <memp_free+0x22>
 8009d66:	4b0c      	ldr	r3, [pc, #48]	; (8009d98 <memp_free+0x44>)
 8009d68:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8009d6c:	490b      	ldr	r1, [pc, #44]	; (8009d9c <memp_free+0x48>)
 8009d6e:	480c      	ldr	r0, [pc, #48]	; (8009da0 <memp_free+0x4c>)
 8009d70:	f00c fb4e 	bl	8016410 <iprintf>
 8009d74:	e00c      	b.n	8009d90 <memp_free+0x3c>

  if (mem == NULL) {
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d008      	beq.n	8009d8e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8009d7c:	79fb      	ldrb	r3, [r7, #7]
 8009d7e:	4a09      	ldr	r2, [pc, #36]	; (8009da4 <memp_free+0x50>)
 8009d80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009d84:	6839      	ldr	r1, [r7, #0]
 8009d86:	4618      	mov	r0, r3
 8009d88:	f7ff ffb8 	bl	8009cfc <do_memp_free_pool>
 8009d8c:	e000      	b.n	8009d90 <memp_free+0x3c>
    return;
 8009d8e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8009d90:	3708      	adds	r7, #8
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bd80      	pop	{r7, pc}
 8009d96:	bf00      	nop
 8009d98:	08018708 	.word	0x08018708
 8009d9c:	080187d8 	.word	0x080187d8
 8009da0:	0801875c 	.word	0x0801875c
 8009da4:	0801b2a8 	.word	0x0801b2a8

08009da8 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8009da8:	b480      	push	{r7}
 8009daa:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8009dac:	bf00      	nop
 8009dae:	46bd      	mov	sp, r7
 8009db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db4:	4770      	bx	lr
	...

08009db8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b086      	sub	sp, #24
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	60f8      	str	r0, [r7, #12]
 8009dc0:	60b9      	str	r1, [r7, #8]
 8009dc2:	607a      	str	r2, [r7, #4]
 8009dc4:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d108      	bne.n	8009dde <netif_add+0x26>
 8009dcc:	4b5b      	ldr	r3, [pc, #364]	; (8009f3c <netif_add+0x184>)
 8009dce:	f240 1227 	movw	r2, #295	; 0x127
 8009dd2:	495b      	ldr	r1, [pc, #364]	; (8009f40 <netif_add+0x188>)
 8009dd4:	485b      	ldr	r0, [pc, #364]	; (8009f44 <netif_add+0x18c>)
 8009dd6:	f00c fb1b 	bl	8016410 <iprintf>
 8009dda:	2300      	movs	r3, #0
 8009ddc:	e0a9      	b.n	8009f32 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8009dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d108      	bne.n	8009df6 <netif_add+0x3e>
 8009de4:	4b55      	ldr	r3, [pc, #340]	; (8009f3c <netif_add+0x184>)
 8009de6:	f44f 7294 	mov.w	r2, #296	; 0x128
 8009dea:	4957      	ldr	r1, [pc, #348]	; (8009f48 <netif_add+0x190>)
 8009dec:	4855      	ldr	r0, [pc, #340]	; (8009f44 <netif_add+0x18c>)
 8009dee:	f00c fb0f 	bl	8016410 <iprintf>
 8009df2:	2300      	movs	r3, #0
 8009df4:	e09d      	b.n	8009f32 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8009df6:	68bb      	ldr	r3, [r7, #8]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d101      	bne.n	8009e00 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8009dfc:	4b53      	ldr	r3, [pc, #332]	; (8009f4c <netif_add+0x194>)
 8009dfe:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d101      	bne.n	8009e0a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8009e06:	4b51      	ldr	r3, [pc, #324]	; (8009f4c <netif_add+0x194>)
 8009e08:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d101      	bne.n	8009e14 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8009e10:	4b4e      	ldr	r3, [pc, #312]	; (8009f4c <netif_add+0x194>)
 8009e12:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	2200      	movs	r2, #0
 8009e18:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	2200      	movs	r2, #0
 8009e24:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	4a49      	ldr	r2, [pc, #292]	; (8009f50 <netif_add+0x198>)
 8009e2a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	2200      	movs	r2, #0
 8009e30:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	2200      	movs	r2, #0
 8009e36:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	3324      	adds	r3, #36	; 0x24
 8009e3e:	2204      	movs	r2, #4
 8009e40:	2100      	movs	r1, #0
 8009e42:	4618      	mov	r0, r3
 8009e44:	f00c fadc 	bl	8016400 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	6a3a      	ldr	r2, [r7, #32]
 8009e52:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8009e54:	4b3f      	ldr	r3, [pc, #252]	; (8009f54 <netif_add+0x19c>)
 8009e56:	781a      	ldrb	r2, [r3, #0]
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e62:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	687a      	ldr	r2, [r7, #4]
 8009e68:	68b9      	ldr	r1, [r7, #8]
 8009e6a:	68f8      	ldr	r0, [r7, #12]
 8009e6c:	f000 f914 	bl	800a098 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8009e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e72:	68f8      	ldr	r0, [r7, #12]
 8009e74:	4798      	blx	r3
 8009e76:	4603      	mov	r3, r0
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d001      	beq.n	8009e80 <netif_add+0xc8>
    return NULL;
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	e058      	b.n	8009f32 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009e86:	2bff      	cmp	r3, #255	; 0xff
 8009e88:	d103      	bne.n	8009e92 <netif_add+0xda>
        netif->num = 0;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 8009e92:	2300      	movs	r3, #0
 8009e94:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8009e96:	4b30      	ldr	r3, [pc, #192]	; (8009f58 <netif_add+0x1a0>)
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	617b      	str	r3, [r7, #20]
 8009e9c:	e02b      	b.n	8009ef6 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8009e9e:	697a      	ldr	r2, [r7, #20]
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	429a      	cmp	r2, r3
 8009ea4:	d106      	bne.n	8009eb4 <netif_add+0xfc>
 8009ea6:	4b25      	ldr	r3, [pc, #148]	; (8009f3c <netif_add+0x184>)
 8009ea8:	f240 128b 	movw	r2, #395	; 0x18b
 8009eac:	492b      	ldr	r1, [pc, #172]	; (8009f5c <netif_add+0x1a4>)
 8009eae:	4825      	ldr	r0, [pc, #148]	; (8009f44 <netif_add+0x18c>)
 8009eb0:	f00c faae 	bl	8016410 <iprintf>
        num_netifs++;
 8009eb4:	693b      	ldr	r3, [r7, #16]
 8009eb6:	3301      	adds	r3, #1
 8009eb8:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8009eba:	693b      	ldr	r3, [r7, #16]
 8009ebc:	2bff      	cmp	r3, #255	; 0xff
 8009ebe:	dd06      	ble.n	8009ece <netif_add+0x116>
 8009ec0:	4b1e      	ldr	r3, [pc, #120]	; (8009f3c <netif_add+0x184>)
 8009ec2:	f240 128d 	movw	r2, #397	; 0x18d
 8009ec6:	4926      	ldr	r1, [pc, #152]	; (8009f60 <netif_add+0x1a8>)
 8009ec8:	481e      	ldr	r0, [pc, #120]	; (8009f44 <netif_add+0x18c>)
 8009eca:	f00c faa1 	bl	8016410 <iprintf>
        if (netif2->num == netif->num) {
 8009ece:	697b      	ldr	r3, [r7, #20]
 8009ed0:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009eda:	429a      	cmp	r2, r3
 8009edc:	d108      	bne.n	8009ef0 <netif_add+0x138>
          netif->num++;
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009ee4:	3301      	adds	r3, #1
 8009ee6:	b2da      	uxtb	r2, r3
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 8009eee:	e005      	b.n	8009efc <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8009ef0:	697b      	ldr	r3, [r7, #20]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	617b      	str	r3, [r7, #20]
 8009ef6:	697b      	ldr	r3, [r7, #20]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d1d0      	bne.n	8009e9e <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 8009efc:	697b      	ldr	r3, [r7, #20]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d1be      	bne.n	8009e80 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009f08:	2bfe      	cmp	r3, #254	; 0xfe
 8009f0a:	d103      	bne.n	8009f14 <netif_add+0x15c>
    netif_num = 0;
 8009f0c:	4b11      	ldr	r3, [pc, #68]	; (8009f54 <netif_add+0x19c>)
 8009f0e:	2200      	movs	r2, #0
 8009f10:	701a      	strb	r2, [r3, #0]
 8009f12:	e006      	b.n	8009f22 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009f1a:	3301      	adds	r3, #1
 8009f1c:	b2da      	uxtb	r2, r3
 8009f1e:	4b0d      	ldr	r3, [pc, #52]	; (8009f54 <netif_add+0x19c>)
 8009f20:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8009f22:	4b0d      	ldr	r3, [pc, #52]	; (8009f58 <netif_add+0x1a0>)
 8009f24:	681a      	ldr	r2, [r3, #0]
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8009f2a:	4a0b      	ldr	r2, [pc, #44]	; (8009f58 <netif_add+0x1a0>)
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8009f30:	68fb      	ldr	r3, [r7, #12]
}
 8009f32:	4618      	mov	r0, r3
 8009f34:	3718      	adds	r7, #24
 8009f36:	46bd      	mov	sp, r7
 8009f38:	bd80      	pop	{r7, pc}
 8009f3a:	bf00      	nop
 8009f3c:	080187f4 	.word	0x080187f4
 8009f40:	08018888 	.word	0x08018888
 8009f44:	08018844 	.word	0x08018844
 8009f48:	080188a4 	.word	0x080188a4
 8009f4c:	0801b32c 	.word	0x0801b32c
 8009f50:	0800a37b 	.word	0x0800a37b
 8009f54:	2001aeb0 	.word	0x2001aeb0
 8009f58:	2001aea8 	.word	0x2001aea8
 8009f5c:	080188c8 	.word	0x080188c8
 8009f60:	080188dc 	.word	0x080188dc

08009f64 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b082      	sub	sp, #8
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
 8009f6c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8009f6e:	6839      	ldr	r1, [r7, #0]
 8009f70:	6878      	ldr	r0, [r7, #4]
 8009f72:	f002 fea1 	bl	800ccb8 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8009f76:	6839      	ldr	r1, [r7, #0]
 8009f78:	6878      	ldr	r0, [r7, #4]
 8009f7a:	f007 ff49 	bl	8011e10 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8009f7e:	bf00      	nop
 8009f80:	3708      	adds	r7, #8
 8009f82:	46bd      	mov	sp, r7
 8009f84:	bd80      	pop	{r7, pc}
	...

08009f88 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b086      	sub	sp, #24
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	60f8      	str	r0, [r7, #12]
 8009f90:	60b9      	str	r1, [r7, #8]
 8009f92:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8009f94:	68bb      	ldr	r3, [r7, #8]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d106      	bne.n	8009fa8 <netif_do_set_ipaddr+0x20>
 8009f9a:	4b1d      	ldr	r3, [pc, #116]	; (800a010 <netif_do_set_ipaddr+0x88>)
 8009f9c:	f240 12cb 	movw	r2, #459	; 0x1cb
 8009fa0:	491c      	ldr	r1, [pc, #112]	; (800a014 <netif_do_set_ipaddr+0x8c>)
 8009fa2:	481d      	ldr	r0, [pc, #116]	; (800a018 <netif_do_set_ipaddr+0x90>)
 8009fa4:	f00c fa34 	bl	8016410 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d106      	bne.n	8009fbc <netif_do_set_ipaddr+0x34>
 8009fae:	4b18      	ldr	r3, [pc, #96]	; (800a010 <netif_do_set_ipaddr+0x88>)
 8009fb0:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8009fb4:	4917      	ldr	r1, [pc, #92]	; (800a014 <netif_do_set_ipaddr+0x8c>)
 8009fb6:	4818      	ldr	r0, [pc, #96]	; (800a018 <netif_do_set_ipaddr+0x90>)
 8009fb8:	f00c fa2a 	bl	8016410 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8009fbc:	68bb      	ldr	r3, [r7, #8]
 8009fbe:	681a      	ldr	r2, [r3, #0]
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	3304      	adds	r3, #4
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	429a      	cmp	r2, r3
 8009fc8:	d01c      	beq.n	800a004 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8009fca:	68bb      	ldr	r3, [r7, #8]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	3304      	adds	r3, #4
 8009fd4:	681a      	ldr	r2, [r3, #0]
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8009fda:	f107 0314 	add.w	r3, r7, #20
 8009fde:	4619      	mov	r1, r3
 8009fe0:	6878      	ldr	r0, [r7, #4]
 8009fe2:	f7ff ffbf 	bl	8009f64 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8009fe6:	68bb      	ldr	r3, [r7, #8]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d002      	beq.n	8009ff2 <netif_do_set_ipaddr+0x6a>
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	e000      	b.n	8009ff4 <netif_do_set_ipaddr+0x6c>
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	68fa      	ldr	r2, [r7, #12]
 8009ff6:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8009ff8:	2101      	movs	r1, #1
 8009ffa:	68f8      	ldr	r0, [r7, #12]
 8009ffc:	f000 f8d2 	bl	800a1a4 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800a000:	2301      	movs	r3, #1
 800a002:	e000      	b.n	800a006 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800a004:	2300      	movs	r3, #0
}
 800a006:	4618      	mov	r0, r3
 800a008:	3718      	adds	r7, #24
 800a00a:	46bd      	mov	sp, r7
 800a00c:	bd80      	pop	{r7, pc}
 800a00e:	bf00      	nop
 800a010:	080187f4 	.word	0x080187f4
 800a014:	0801890c 	.word	0x0801890c
 800a018:	08018844 	.word	0x08018844

0800a01c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800a01c:	b480      	push	{r7}
 800a01e:	b085      	sub	sp, #20
 800a020:	af00      	add	r7, sp, #0
 800a022:	60f8      	str	r0, [r7, #12]
 800a024:	60b9      	str	r1, [r7, #8]
 800a026:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800a028:	68bb      	ldr	r3, [r7, #8]
 800a02a:	681a      	ldr	r2, [r3, #0]
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	3308      	adds	r3, #8
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	429a      	cmp	r2, r3
 800a034:	d00a      	beq.n	800a04c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800a036:	68bb      	ldr	r3, [r7, #8]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d002      	beq.n	800a042 <netif_do_set_netmask+0x26>
 800a03c:	68bb      	ldr	r3, [r7, #8]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	e000      	b.n	800a044 <netif_do_set_netmask+0x28>
 800a042:	2300      	movs	r3, #0
 800a044:	68fa      	ldr	r2, [r7, #12]
 800a046:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800a048:	2301      	movs	r3, #1
 800a04a:	e000      	b.n	800a04e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800a04c:	2300      	movs	r3, #0
}
 800a04e:	4618      	mov	r0, r3
 800a050:	3714      	adds	r7, #20
 800a052:	46bd      	mov	sp, r7
 800a054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a058:	4770      	bx	lr

0800a05a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800a05a:	b480      	push	{r7}
 800a05c:	b085      	sub	sp, #20
 800a05e:	af00      	add	r7, sp, #0
 800a060:	60f8      	str	r0, [r7, #12]
 800a062:	60b9      	str	r1, [r7, #8]
 800a064:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800a066:	68bb      	ldr	r3, [r7, #8]
 800a068:	681a      	ldr	r2, [r3, #0]
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	330c      	adds	r3, #12
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	429a      	cmp	r2, r3
 800a072:	d00a      	beq.n	800a08a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800a074:	68bb      	ldr	r3, [r7, #8]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d002      	beq.n	800a080 <netif_do_set_gw+0x26>
 800a07a:	68bb      	ldr	r3, [r7, #8]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	e000      	b.n	800a082 <netif_do_set_gw+0x28>
 800a080:	2300      	movs	r3, #0
 800a082:	68fa      	ldr	r2, [r7, #12]
 800a084:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800a086:	2301      	movs	r3, #1
 800a088:	e000      	b.n	800a08c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800a08a:	2300      	movs	r3, #0
}
 800a08c:	4618      	mov	r0, r3
 800a08e:	3714      	adds	r7, #20
 800a090:	46bd      	mov	sp, r7
 800a092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a096:	4770      	bx	lr

0800a098 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b088      	sub	sp, #32
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	60f8      	str	r0, [r7, #12]
 800a0a0:	60b9      	str	r1, [r7, #8]
 800a0a2:	607a      	str	r2, [r7, #4]
 800a0a4:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800a0ae:	68bb      	ldr	r3, [r7, #8]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d101      	bne.n	800a0b8 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800a0b4:	4b1c      	ldr	r3, [pc, #112]	; (800a128 <netif_set_addr+0x90>)
 800a0b6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d101      	bne.n	800a0c2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800a0be:	4b1a      	ldr	r3, [pc, #104]	; (800a128 <netif_set_addr+0x90>)
 800a0c0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d101      	bne.n	800a0cc <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800a0c8:	4b17      	ldr	r3, [pc, #92]	; (800a128 <netif_set_addr+0x90>)
 800a0ca:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800a0cc:	68bb      	ldr	r3, [r7, #8]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d003      	beq.n	800a0da <netif_set_addr+0x42>
 800a0d2:	68bb      	ldr	r3, [r7, #8]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d101      	bne.n	800a0de <netif_set_addr+0x46>
 800a0da:	2301      	movs	r3, #1
 800a0dc:	e000      	b.n	800a0e0 <netif_set_addr+0x48>
 800a0de:	2300      	movs	r3, #0
 800a0e0:	617b      	str	r3, [r7, #20]
  if (remove) {
 800a0e2:	697b      	ldr	r3, [r7, #20]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d006      	beq.n	800a0f6 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800a0e8:	f107 0310 	add.w	r3, r7, #16
 800a0ec:	461a      	mov	r2, r3
 800a0ee:	68b9      	ldr	r1, [r7, #8]
 800a0f0:	68f8      	ldr	r0, [r7, #12]
 800a0f2:	f7ff ff49 	bl	8009f88 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800a0f6:	69fa      	ldr	r2, [r7, #28]
 800a0f8:	6879      	ldr	r1, [r7, #4]
 800a0fa:	68f8      	ldr	r0, [r7, #12]
 800a0fc:	f7ff ff8e 	bl	800a01c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800a100:	69ba      	ldr	r2, [r7, #24]
 800a102:	6839      	ldr	r1, [r7, #0]
 800a104:	68f8      	ldr	r0, [r7, #12]
 800a106:	f7ff ffa8 	bl	800a05a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800a10a:	697b      	ldr	r3, [r7, #20]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d106      	bne.n	800a11e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800a110:	f107 0310 	add.w	r3, r7, #16
 800a114:	461a      	mov	r2, r3
 800a116:	68b9      	ldr	r1, [r7, #8]
 800a118:	68f8      	ldr	r0, [r7, #12]
 800a11a:	f7ff ff35 	bl	8009f88 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800a11e:	bf00      	nop
 800a120:	3720      	adds	r7, #32
 800a122:	46bd      	mov	sp, r7
 800a124:	bd80      	pop	{r7, pc}
 800a126:	bf00      	nop
 800a128:	0801b32c 	.word	0x0801b32c

0800a12c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800a12c:	b480      	push	{r7}
 800a12e:	b083      	sub	sp, #12
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800a134:	4a04      	ldr	r2, [pc, #16]	; (800a148 <netif_set_default+0x1c>)
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800a13a:	bf00      	nop
 800a13c:	370c      	adds	r7, #12
 800a13e:	46bd      	mov	sp, r7
 800a140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a144:	4770      	bx	lr
 800a146:	bf00      	nop
 800a148:	2001aeac 	.word	0x2001aeac

0800a14c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b082      	sub	sp, #8
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d107      	bne.n	800a16a <netif_set_up+0x1e>
 800a15a:	4b0f      	ldr	r3, [pc, #60]	; (800a198 <netif_set_up+0x4c>)
 800a15c:	f44f 7254 	mov.w	r2, #848	; 0x350
 800a160:	490e      	ldr	r1, [pc, #56]	; (800a19c <netif_set_up+0x50>)
 800a162:	480f      	ldr	r0, [pc, #60]	; (800a1a0 <netif_set_up+0x54>)
 800a164:	f00c f954 	bl	8016410 <iprintf>
 800a168:	e013      	b.n	800a192 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a170:	f003 0301 	and.w	r3, r3, #1
 800a174:	2b00      	cmp	r3, #0
 800a176:	d10c      	bne.n	800a192 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a17e:	f043 0301 	orr.w	r3, r3, #1
 800a182:	b2da      	uxtb	r2, r3
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800a18a:	2103      	movs	r1, #3
 800a18c:	6878      	ldr	r0, [r7, #4]
 800a18e:	f000 f809 	bl	800a1a4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800a192:	3708      	adds	r7, #8
 800a194:	46bd      	mov	sp, r7
 800a196:	bd80      	pop	{r7, pc}
 800a198:	080187f4 	.word	0x080187f4
 800a19c:	0801897c 	.word	0x0801897c
 800a1a0:	08018844 	.word	0x08018844

0800a1a4 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b082      	sub	sp, #8
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
 800a1ac:	460b      	mov	r3, r1
 800a1ae:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d106      	bne.n	800a1c4 <netif_issue_reports+0x20>
 800a1b6:	4b18      	ldr	r3, [pc, #96]	; (800a218 <netif_issue_reports+0x74>)
 800a1b8:	f240 326d 	movw	r2, #877	; 0x36d
 800a1bc:	4917      	ldr	r1, [pc, #92]	; (800a21c <netif_issue_reports+0x78>)
 800a1be:	4818      	ldr	r0, [pc, #96]	; (800a220 <netif_issue_reports+0x7c>)
 800a1c0:	f00c f926 	bl	8016410 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a1ca:	f003 0304 	and.w	r3, r3, #4
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d01e      	beq.n	800a210 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a1d8:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d017      	beq.n	800a210 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800a1e0:	78fb      	ldrb	r3, [r7, #3]
 800a1e2:	f003 0301 	and.w	r3, r3, #1
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d013      	beq.n	800a212 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	3304      	adds	r3, #4
 800a1ee:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d00e      	beq.n	800a212 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a1fa:	f003 0308 	and.w	r3, r3, #8
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d007      	beq.n	800a212 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	3304      	adds	r3, #4
 800a206:	4619      	mov	r1, r3
 800a208:	6878      	ldr	r0, [r7, #4]
 800a20a:	f00a fc01 	bl	8014a10 <etharp_request>
 800a20e:	e000      	b.n	800a212 <netif_issue_reports+0x6e>
    return;
 800a210:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800a212:	3708      	adds	r7, #8
 800a214:	46bd      	mov	sp, r7
 800a216:	bd80      	pop	{r7, pc}
 800a218:	080187f4 	.word	0x080187f4
 800a21c:	08018998 	.word	0x08018998
 800a220:	08018844 	.word	0x08018844

0800a224 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b082      	sub	sp, #8
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d107      	bne.n	800a242 <netif_set_down+0x1e>
 800a232:	4b12      	ldr	r3, [pc, #72]	; (800a27c <netif_set_down+0x58>)
 800a234:	f240 329b 	movw	r2, #923	; 0x39b
 800a238:	4911      	ldr	r1, [pc, #68]	; (800a280 <netif_set_down+0x5c>)
 800a23a:	4812      	ldr	r0, [pc, #72]	; (800a284 <netif_set_down+0x60>)
 800a23c:	f00c f8e8 	bl	8016410 <iprintf>
 800a240:	e019      	b.n	800a276 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a248:	f003 0301 	and.w	r3, r3, #1
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d012      	beq.n	800a276 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a256:	f023 0301 	bic.w	r3, r3, #1
 800a25a:	b2da      	uxtb	r2, r3
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a268:	f003 0308 	and.w	r3, r3, #8
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d002      	beq.n	800a276 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800a270:	6878      	ldr	r0, [r7, #4]
 800a272:	f009 ff87 	bl	8014184 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800a276:	3708      	adds	r7, #8
 800a278:	46bd      	mov	sp, r7
 800a27a:	bd80      	pop	{r7, pc}
 800a27c:	080187f4 	.word	0x080187f4
 800a280:	080189bc 	.word	0x080189bc
 800a284:	08018844 	.word	0x08018844

0800a288 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b082      	sub	sp, #8
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d107      	bne.n	800a2a6 <netif_set_link_up+0x1e>
 800a296:	4b15      	ldr	r3, [pc, #84]	; (800a2ec <netif_set_link_up+0x64>)
 800a298:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800a29c:	4914      	ldr	r1, [pc, #80]	; (800a2f0 <netif_set_link_up+0x68>)
 800a29e:	4815      	ldr	r0, [pc, #84]	; (800a2f4 <netif_set_link_up+0x6c>)
 800a2a0:	f00c f8b6 	bl	8016410 <iprintf>
 800a2a4:	e01e      	b.n	800a2e4 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a2ac:	f003 0304 	and.w	r3, r3, #4
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d117      	bne.n	800a2e4 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a2ba:	f043 0304 	orr.w	r3, r3, #4
 800a2be:	b2da      	uxtb	r2, r3
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 800a2c6:	6878      	ldr	r0, [r7, #4]
 800a2c8:	f008 f9cc 	bl	8012664 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800a2cc:	2103      	movs	r1, #3
 800a2ce:	6878      	ldr	r0, [r7, #4]
 800a2d0:	f7ff ff68 	bl	800a1a4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	69db      	ldr	r3, [r3, #28]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d003      	beq.n	800a2e4 <netif_set_link_up+0x5c>
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	69db      	ldr	r3, [r3, #28]
 800a2e0:	6878      	ldr	r0, [r7, #4]
 800a2e2:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800a2e4:	3708      	adds	r7, #8
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	bd80      	pop	{r7, pc}
 800a2ea:	bf00      	nop
 800a2ec:	080187f4 	.word	0x080187f4
 800a2f0:	080189dc 	.word	0x080189dc
 800a2f4:	08018844 	.word	0x08018844

0800a2f8 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b082      	sub	sp, #8
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d107      	bne.n	800a316 <netif_set_link_down+0x1e>
 800a306:	4b11      	ldr	r3, [pc, #68]	; (800a34c <netif_set_link_down+0x54>)
 800a308:	f240 4206 	movw	r2, #1030	; 0x406
 800a30c:	4910      	ldr	r1, [pc, #64]	; (800a350 <netif_set_link_down+0x58>)
 800a30e:	4811      	ldr	r0, [pc, #68]	; (800a354 <netif_set_link_down+0x5c>)
 800a310:	f00c f87e 	bl	8016410 <iprintf>
 800a314:	e017      	b.n	800a346 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a31c:	f003 0304 	and.w	r3, r3, #4
 800a320:	2b00      	cmp	r3, #0
 800a322:	d010      	beq.n	800a346 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a32a:	f023 0304 	bic.w	r3, r3, #4
 800a32e:	b2da      	uxtb	r2, r3
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	69db      	ldr	r3, [r3, #28]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d003      	beq.n	800a346 <netif_set_link_down+0x4e>
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	69db      	ldr	r3, [r3, #28]
 800a342:	6878      	ldr	r0, [r7, #4]
 800a344:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800a346:	3708      	adds	r7, #8
 800a348:	46bd      	mov	sp, r7
 800a34a:	bd80      	pop	{r7, pc}
 800a34c:	080187f4 	.word	0x080187f4
 800a350:	08018a00 	.word	0x08018a00
 800a354:	08018844 	.word	0x08018844

0800a358 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800a358:	b480      	push	{r7}
 800a35a:	b083      	sub	sp, #12
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
 800a360:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d002      	beq.n	800a36e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	683a      	ldr	r2, [r7, #0]
 800a36c:	61da      	str	r2, [r3, #28]
  }
}
 800a36e:	bf00      	nop
 800a370:	370c      	adds	r7, #12
 800a372:	46bd      	mov	sp, r7
 800a374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a378:	4770      	bx	lr

0800a37a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800a37a:	b480      	push	{r7}
 800a37c:	b085      	sub	sp, #20
 800a37e:	af00      	add	r7, sp, #0
 800a380:	60f8      	str	r0, [r7, #12]
 800a382:	60b9      	str	r1, [r7, #8]
 800a384:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800a386:	f06f 030b 	mvn.w	r3, #11
}
 800a38a:	4618      	mov	r0, r3
 800a38c:	3714      	adds	r7, #20
 800a38e:	46bd      	mov	sp, r7
 800a390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a394:	4770      	bx	lr
	...

0800a398 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800a398:	b480      	push	{r7}
 800a39a:	b085      	sub	sp, #20
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	4603      	mov	r3, r0
 800a3a0:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800a3a2:	79fb      	ldrb	r3, [r7, #7]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d013      	beq.n	800a3d0 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800a3a8:	4b0d      	ldr	r3, [pc, #52]	; (800a3e0 <netif_get_by_index+0x48>)
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	60fb      	str	r3, [r7, #12]
 800a3ae:	e00c      	b.n	800a3ca <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a3b6:	3301      	adds	r3, #1
 800a3b8:	b2db      	uxtb	r3, r3
 800a3ba:	79fa      	ldrb	r2, [r7, #7]
 800a3bc:	429a      	cmp	r2, r3
 800a3be:	d101      	bne.n	800a3c4 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	e006      	b.n	800a3d2 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	60fb      	str	r3, [r7, #12]
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d1ef      	bne.n	800a3b0 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800a3d0:	2300      	movs	r3, #0
}
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	3714      	adds	r7, #20
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3dc:	4770      	bx	lr
 800a3de:	bf00      	nop
 800a3e0:	2001aea8 	.word	0x2001aea8

0800a3e4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b082      	sub	sp, #8
 800a3e8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800a3ea:	f00b ff8f 	bl	801630c <sys_arch_protect>
 800a3ee:	6038      	str	r0, [r7, #0]
 800a3f0:	4b0d      	ldr	r3, [pc, #52]	; (800a428 <pbuf_free_ooseq+0x44>)
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	701a      	strb	r2, [r3, #0]
 800a3f6:	6838      	ldr	r0, [r7, #0]
 800a3f8:	f00b ff96 	bl	8016328 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800a3fc:	4b0b      	ldr	r3, [pc, #44]	; (800a42c <pbuf_free_ooseq+0x48>)
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	607b      	str	r3, [r7, #4]
 800a402:	e00a      	b.n	800a41a <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d003      	beq.n	800a414 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800a40c:	6878      	ldr	r0, [r7, #4]
 800a40e:	f002 fc91 	bl	800cd34 <tcp_free_ooseq>
      return;
 800a412:	e005      	b.n	800a420 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	68db      	ldr	r3, [r3, #12]
 800a418:	607b      	str	r3, [r7, #4]
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d1f1      	bne.n	800a404 <pbuf_free_ooseq+0x20>
    }
  }
}
 800a420:	3708      	adds	r7, #8
 800a422:	46bd      	mov	sp, r7
 800a424:	bd80      	pop	{r7, pc}
 800a426:	bf00      	nop
 800a428:	2001aeb1 	.word	0x2001aeb1
 800a42c:	2001aec0 	.word	0x2001aec0

0800a430 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b082      	sub	sp, #8
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800a438:	f7ff ffd4 	bl	800a3e4 <pbuf_free_ooseq>
}
 800a43c:	bf00      	nop
 800a43e:	3708      	adds	r7, #8
 800a440:	46bd      	mov	sp, r7
 800a442:	bd80      	pop	{r7, pc}

0800a444 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b082      	sub	sp, #8
 800a448:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800a44a:	f00b ff5f 	bl	801630c <sys_arch_protect>
 800a44e:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800a450:	4b0f      	ldr	r3, [pc, #60]	; (800a490 <pbuf_pool_is_empty+0x4c>)
 800a452:	781b      	ldrb	r3, [r3, #0]
 800a454:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800a456:	4b0e      	ldr	r3, [pc, #56]	; (800a490 <pbuf_pool_is_empty+0x4c>)
 800a458:	2201      	movs	r2, #1
 800a45a:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800a45c:	6878      	ldr	r0, [r7, #4]
 800a45e:	f00b ff63 	bl	8016328 <sys_arch_unprotect>

  if (!queued) {
 800a462:	78fb      	ldrb	r3, [r7, #3]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d10f      	bne.n	800a488 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800a468:	2100      	movs	r1, #0
 800a46a:	480a      	ldr	r0, [pc, #40]	; (800a494 <pbuf_pool_is_empty+0x50>)
 800a46c:	f7fd f99e 	bl	80077ac <tcpip_try_callback>
 800a470:	4603      	mov	r3, r0
 800a472:	2b00      	cmp	r3, #0
 800a474:	d008      	beq.n	800a488 <pbuf_pool_is_empty+0x44>
 800a476:	f00b ff49 	bl	801630c <sys_arch_protect>
 800a47a:	6078      	str	r0, [r7, #4]
 800a47c:	4b04      	ldr	r3, [pc, #16]	; (800a490 <pbuf_pool_is_empty+0x4c>)
 800a47e:	2200      	movs	r2, #0
 800a480:	701a      	strb	r2, [r3, #0]
 800a482:	6878      	ldr	r0, [r7, #4]
 800a484:	f00b ff50 	bl	8016328 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800a488:	bf00      	nop
 800a48a:	3708      	adds	r7, #8
 800a48c:	46bd      	mov	sp, r7
 800a48e:	bd80      	pop	{r7, pc}
 800a490:	2001aeb1 	.word	0x2001aeb1
 800a494:	0800a431 	.word	0x0800a431

0800a498 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800a498:	b480      	push	{r7}
 800a49a:	b085      	sub	sp, #20
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	60f8      	str	r0, [r7, #12]
 800a4a0:	60b9      	str	r1, [r7, #8]
 800a4a2:	4611      	mov	r1, r2
 800a4a4:	461a      	mov	r2, r3
 800a4a6:	460b      	mov	r3, r1
 800a4a8:	80fb      	strh	r3, [r7, #6]
 800a4aa:	4613      	mov	r3, r2
 800a4ac:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	68ba      	ldr	r2, [r7, #8]
 800a4b8:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	88fa      	ldrh	r2, [r7, #6]
 800a4be:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	88ba      	ldrh	r2, [r7, #4]
 800a4c4:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800a4c6:	8b3b      	ldrh	r3, [r7, #24]
 800a4c8:	b2da      	uxtb	r2, r3
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	7f3a      	ldrb	r2, [r7, #28]
 800a4d2:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	2201      	movs	r2, #1
 800a4d8:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	2200      	movs	r2, #0
 800a4de:	73da      	strb	r2, [r3, #15]
}
 800a4e0:	bf00      	nop
 800a4e2:	3714      	adds	r7, #20
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ea:	4770      	bx	lr

0800a4ec <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b08c      	sub	sp, #48	; 0x30
 800a4f0:	af02      	add	r7, sp, #8
 800a4f2:	4603      	mov	r3, r0
 800a4f4:	71fb      	strb	r3, [r7, #7]
 800a4f6:	460b      	mov	r3, r1
 800a4f8:	80bb      	strh	r3, [r7, #4]
 800a4fa:	4613      	mov	r3, r2
 800a4fc:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800a4fe:	79fb      	ldrb	r3, [r7, #7]
 800a500:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800a502:	887b      	ldrh	r3, [r7, #2]
 800a504:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800a508:	d07f      	beq.n	800a60a <pbuf_alloc+0x11e>
 800a50a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800a50e:	f300 80c8 	bgt.w	800a6a2 <pbuf_alloc+0x1b6>
 800a512:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800a516:	d010      	beq.n	800a53a <pbuf_alloc+0x4e>
 800a518:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800a51c:	f300 80c1 	bgt.w	800a6a2 <pbuf_alloc+0x1b6>
 800a520:	2b01      	cmp	r3, #1
 800a522:	d002      	beq.n	800a52a <pbuf_alloc+0x3e>
 800a524:	2b41      	cmp	r3, #65	; 0x41
 800a526:	f040 80bc 	bne.w	800a6a2 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800a52a:	887a      	ldrh	r2, [r7, #2]
 800a52c:	88bb      	ldrh	r3, [r7, #4]
 800a52e:	4619      	mov	r1, r3
 800a530:	2000      	movs	r0, #0
 800a532:	f000 f8d1 	bl	800a6d8 <pbuf_alloc_reference>
 800a536:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800a538:	e0bd      	b.n	800a6b6 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800a53a:	2300      	movs	r3, #0
 800a53c:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800a53e:	2300      	movs	r3, #0
 800a540:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800a542:	88bb      	ldrh	r3, [r7, #4]
 800a544:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800a546:	200c      	movs	r0, #12
 800a548:	f7ff fbb2 	bl	8009cb0 <memp_malloc>
 800a54c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800a54e:	693b      	ldr	r3, [r7, #16]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d109      	bne.n	800a568 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800a554:	f7ff ff76 	bl	800a444 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800a558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d002      	beq.n	800a564 <pbuf_alloc+0x78>
            pbuf_free(p);
 800a55e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a560:	f000 faa8 	bl	800aab4 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800a564:	2300      	movs	r3, #0
 800a566:	e0a7      	b.n	800a6b8 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800a568:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a56a:	3303      	adds	r3, #3
 800a56c:	b29b      	uxth	r3, r3
 800a56e:	f023 0303 	bic.w	r3, r3, #3
 800a572:	b29b      	uxth	r3, r3
 800a574:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800a578:	b29b      	uxth	r3, r3
 800a57a:	8b7a      	ldrh	r2, [r7, #26]
 800a57c:	4293      	cmp	r3, r2
 800a57e:	bf28      	it	cs
 800a580:	4613      	movcs	r3, r2
 800a582:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800a584:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a586:	3310      	adds	r3, #16
 800a588:	693a      	ldr	r2, [r7, #16]
 800a58a:	4413      	add	r3, r2
 800a58c:	3303      	adds	r3, #3
 800a58e:	f023 0303 	bic.w	r3, r3, #3
 800a592:	4618      	mov	r0, r3
 800a594:	89f9      	ldrh	r1, [r7, #14]
 800a596:	8b7a      	ldrh	r2, [r7, #26]
 800a598:	2300      	movs	r3, #0
 800a59a:	9301      	str	r3, [sp, #4]
 800a59c:	887b      	ldrh	r3, [r7, #2]
 800a59e:	9300      	str	r3, [sp, #0]
 800a5a0:	460b      	mov	r3, r1
 800a5a2:	4601      	mov	r1, r0
 800a5a4:	6938      	ldr	r0, [r7, #16]
 800a5a6:	f7ff ff77 	bl	800a498 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800a5aa:	693b      	ldr	r3, [r7, #16]
 800a5ac:	685b      	ldr	r3, [r3, #4]
 800a5ae:	f003 0303 	and.w	r3, r3, #3
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d006      	beq.n	800a5c4 <pbuf_alloc+0xd8>
 800a5b6:	4b42      	ldr	r3, [pc, #264]	; (800a6c0 <pbuf_alloc+0x1d4>)
 800a5b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a5bc:	4941      	ldr	r1, [pc, #260]	; (800a6c4 <pbuf_alloc+0x1d8>)
 800a5be:	4842      	ldr	r0, [pc, #264]	; (800a6c8 <pbuf_alloc+0x1dc>)
 800a5c0:	f00b ff26 	bl	8016410 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800a5c4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a5c6:	3303      	adds	r3, #3
 800a5c8:	f023 0303 	bic.w	r3, r3, #3
 800a5cc:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800a5d0:	d106      	bne.n	800a5e0 <pbuf_alloc+0xf4>
 800a5d2:	4b3b      	ldr	r3, [pc, #236]	; (800a6c0 <pbuf_alloc+0x1d4>)
 800a5d4:	f44f 7281 	mov.w	r2, #258	; 0x102
 800a5d8:	493c      	ldr	r1, [pc, #240]	; (800a6cc <pbuf_alloc+0x1e0>)
 800a5da:	483b      	ldr	r0, [pc, #236]	; (800a6c8 <pbuf_alloc+0x1dc>)
 800a5dc:	f00b ff18 	bl	8016410 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800a5e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d102      	bne.n	800a5ec <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800a5e6:	693b      	ldr	r3, [r7, #16]
 800a5e8:	627b      	str	r3, [r7, #36]	; 0x24
 800a5ea:	e002      	b.n	800a5f2 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800a5ec:	69fb      	ldr	r3, [r7, #28]
 800a5ee:	693a      	ldr	r2, [r7, #16]
 800a5f0:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800a5f2:	693b      	ldr	r3, [r7, #16]
 800a5f4:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800a5f6:	8b7a      	ldrh	r2, [r7, #26]
 800a5f8:	89fb      	ldrh	r3, [r7, #14]
 800a5fa:	1ad3      	subs	r3, r2, r3
 800a5fc:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800a5fe:	2300      	movs	r3, #0
 800a600:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800a602:	8b7b      	ldrh	r3, [r7, #26]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d19e      	bne.n	800a546 <pbuf_alloc+0x5a>
      break;
 800a608:	e055      	b.n	800a6b6 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800a60a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a60c:	3303      	adds	r3, #3
 800a60e:	b29b      	uxth	r3, r3
 800a610:	f023 0303 	bic.w	r3, r3, #3
 800a614:	b29a      	uxth	r2, r3
 800a616:	88bb      	ldrh	r3, [r7, #4]
 800a618:	3303      	adds	r3, #3
 800a61a:	b29b      	uxth	r3, r3
 800a61c:	f023 0303 	bic.w	r3, r3, #3
 800a620:	b29b      	uxth	r3, r3
 800a622:	4413      	add	r3, r2
 800a624:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800a626:	8b3b      	ldrh	r3, [r7, #24]
 800a628:	3310      	adds	r3, #16
 800a62a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800a62c:	8b3a      	ldrh	r2, [r7, #24]
 800a62e:	88bb      	ldrh	r3, [r7, #4]
 800a630:	3303      	adds	r3, #3
 800a632:	f023 0303 	bic.w	r3, r3, #3
 800a636:	429a      	cmp	r2, r3
 800a638:	d306      	bcc.n	800a648 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800a63a:	8afa      	ldrh	r2, [r7, #22]
 800a63c:	88bb      	ldrh	r3, [r7, #4]
 800a63e:	3303      	adds	r3, #3
 800a640:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800a644:	429a      	cmp	r2, r3
 800a646:	d201      	bcs.n	800a64c <pbuf_alloc+0x160>
        return NULL;
 800a648:	2300      	movs	r3, #0
 800a64a:	e035      	b.n	800a6b8 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800a64c:	8afb      	ldrh	r3, [r7, #22]
 800a64e:	4618      	mov	r0, r3
 800a650:	f7ff f984 	bl	800995c <mem_malloc>
 800a654:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800a656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d101      	bne.n	800a660 <pbuf_alloc+0x174>
        return NULL;
 800a65c:	2300      	movs	r3, #0
 800a65e:	e02b      	b.n	800a6b8 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800a660:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a662:	3310      	adds	r3, #16
 800a664:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a666:	4413      	add	r3, r2
 800a668:	3303      	adds	r3, #3
 800a66a:	f023 0303 	bic.w	r3, r3, #3
 800a66e:	4618      	mov	r0, r3
 800a670:	88b9      	ldrh	r1, [r7, #4]
 800a672:	88ba      	ldrh	r2, [r7, #4]
 800a674:	2300      	movs	r3, #0
 800a676:	9301      	str	r3, [sp, #4]
 800a678:	887b      	ldrh	r3, [r7, #2]
 800a67a:	9300      	str	r3, [sp, #0]
 800a67c:	460b      	mov	r3, r1
 800a67e:	4601      	mov	r1, r0
 800a680:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a682:	f7ff ff09 	bl	800a498 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800a686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a688:	685b      	ldr	r3, [r3, #4]
 800a68a:	f003 0303 	and.w	r3, r3, #3
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d010      	beq.n	800a6b4 <pbuf_alloc+0x1c8>
 800a692:	4b0b      	ldr	r3, [pc, #44]	; (800a6c0 <pbuf_alloc+0x1d4>)
 800a694:	f44f 7291 	mov.w	r2, #290	; 0x122
 800a698:	490d      	ldr	r1, [pc, #52]	; (800a6d0 <pbuf_alloc+0x1e4>)
 800a69a:	480b      	ldr	r0, [pc, #44]	; (800a6c8 <pbuf_alloc+0x1dc>)
 800a69c:	f00b feb8 	bl	8016410 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800a6a0:	e008      	b.n	800a6b4 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800a6a2:	4b07      	ldr	r3, [pc, #28]	; (800a6c0 <pbuf_alloc+0x1d4>)
 800a6a4:	f240 1227 	movw	r2, #295	; 0x127
 800a6a8:	490a      	ldr	r1, [pc, #40]	; (800a6d4 <pbuf_alloc+0x1e8>)
 800a6aa:	4807      	ldr	r0, [pc, #28]	; (800a6c8 <pbuf_alloc+0x1dc>)
 800a6ac:	f00b feb0 	bl	8016410 <iprintf>
      return NULL;
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	e001      	b.n	800a6b8 <pbuf_alloc+0x1cc>
      break;
 800a6b4:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800a6b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	3728      	adds	r7, #40	; 0x28
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	bd80      	pop	{r7, pc}
 800a6c0:	08018a24 	.word	0x08018a24
 800a6c4:	08018a54 	.word	0x08018a54
 800a6c8:	08018a84 	.word	0x08018a84
 800a6cc:	08018aac 	.word	0x08018aac
 800a6d0:	08018ae0 	.word	0x08018ae0
 800a6d4:	08018b0c 	.word	0x08018b0c

0800a6d8 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b086      	sub	sp, #24
 800a6dc:	af02      	add	r7, sp, #8
 800a6de:	6078      	str	r0, [r7, #4]
 800a6e0:	460b      	mov	r3, r1
 800a6e2:	807b      	strh	r3, [r7, #2]
 800a6e4:	4613      	mov	r3, r2
 800a6e6:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800a6e8:	883b      	ldrh	r3, [r7, #0]
 800a6ea:	2b41      	cmp	r3, #65	; 0x41
 800a6ec:	d009      	beq.n	800a702 <pbuf_alloc_reference+0x2a>
 800a6ee:	883b      	ldrh	r3, [r7, #0]
 800a6f0:	2b01      	cmp	r3, #1
 800a6f2:	d006      	beq.n	800a702 <pbuf_alloc_reference+0x2a>
 800a6f4:	4b0f      	ldr	r3, [pc, #60]	; (800a734 <pbuf_alloc_reference+0x5c>)
 800a6f6:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800a6fa:	490f      	ldr	r1, [pc, #60]	; (800a738 <pbuf_alloc_reference+0x60>)
 800a6fc:	480f      	ldr	r0, [pc, #60]	; (800a73c <pbuf_alloc_reference+0x64>)
 800a6fe:	f00b fe87 	bl	8016410 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800a702:	200b      	movs	r0, #11
 800a704:	f7ff fad4 	bl	8009cb0 <memp_malloc>
 800a708:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d101      	bne.n	800a714 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800a710:	2300      	movs	r3, #0
 800a712:	e00b      	b.n	800a72c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800a714:	8879      	ldrh	r1, [r7, #2]
 800a716:	887a      	ldrh	r2, [r7, #2]
 800a718:	2300      	movs	r3, #0
 800a71a:	9301      	str	r3, [sp, #4]
 800a71c:	883b      	ldrh	r3, [r7, #0]
 800a71e:	9300      	str	r3, [sp, #0]
 800a720:	460b      	mov	r3, r1
 800a722:	6879      	ldr	r1, [r7, #4]
 800a724:	68f8      	ldr	r0, [r7, #12]
 800a726:	f7ff feb7 	bl	800a498 <pbuf_init_alloced_pbuf>
  return p;
 800a72a:	68fb      	ldr	r3, [r7, #12]
}
 800a72c:	4618      	mov	r0, r3
 800a72e:	3710      	adds	r7, #16
 800a730:	46bd      	mov	sp, r7
 800a732:	bd80      	pop	{r7, pc}
 800a734:	08018a24 	.word	0x08018a24
 800a738:	08018b28 	.word	0x08018b28
 800a73c:	08018a84 	.word	0x08018a84

0800a740 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800a740:	b580      	push	{r7, lr}
 800a742:	b088      	sub	sp, #32
 800a744:	af02      	add	r7, sp, #8
 800a746:	607b      	str	r3, [r7, #4]
 800a748:	4603      	mov	r3, r0
 800a74a:	73fb      	strb	r3, [r7, #15]
 800a74c:	460b      	mov	r3, r1
 800a74e:	81bb      	strh	r3, [r7, #12]
 800a750:	4613      	mov	r3, r2
 800a752:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800a754:	7bfb      	ldrb	r3, [r7, #15]
 800a756:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800a758:	8a7b      	ldrh	r3, [r7, #18]
 800a75a:	3303      	adds	r3, #3
 800a75c:	f023 0203 	bic.w	r2, r3, #3
 800a760:	89bb      	ldrh	r3, [r7, #12]
 800a762:	441a      	add	r2, r3
 800a764:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a766:	429a      	cmp	r2, r3
 800a768:	d901      	bls.n	800a76e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800a76a:	2300      	movs	r3, #0
 800a76c:	e018      	b.n	800a7a0 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800a76e:	6a3b      	ldr	r3, [r7, #32]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d007      	beq.n	800a784 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800a774:	8a7b      	ldrh	r3, [r7, #18]
 800a776:	3303      	adds	r3, #3
 800a778:	f023 0303 	bic.w	r3, r3, #3
 800a77c:	6a3a      	ldr	r2, [r7, #32]
 800a77e:	4413      	add	r3, r2
 800a780:	617b      	str	r3, [r7, #20]
 800a782:	e001      	b.n	800a788 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800a784:	2300      	movs	r3, #0
 800a786:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800a788:	6878      	ldr	r0, [r7, #4]
 800a78a:	89b9      	ldrh	r1, [r7, #12]
 800a78c:	89ba      	ldrh	r2, [r7, #12]
 800a78e:	2302      	movs	r3, #2
 800a790:	9301      	str	r3, [sp, #4]
 800a792:	897b      	ldrh	r3, [r7, #10]
 800a794:	9300      	str	r3, [sp, #0]
 800a796:	460b      	mov	r3, r1
 800a798:	6979      	ldr	r1, [r7, #20]
 800a79a:	f7ff fe7d 	bl	800a498 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800a79e:	687b      	ldr	r3, [r7, #4]
}
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	3718      	adds	r7, #24
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	bd80      	pop	{r7, pc}

0800a7a8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b084      	sub	sp, #16
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
 800a7b0:	460b      	mov	r3, r1
 800a7b2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d106      	bne.n	800a7c8 <pbuf_realloc+0x20>
 800a7ba:	4b3a      	ldr	r3, [pc, #232]	; (800a8a4 <pbuf_realloc+0xfc>)
 800a7bc:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800a7c0:	4939      	ldr	r1, [pc, #228]	; (800a8a8 <pbuf_realloc+0x100>)
 800a7c2:	483a      	ldr	r0, [pc, #232]	; (800a8ac <pbuf_realloc+0x104>)
 800a7c4:	f00b fe24 	bl	8016410 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	891b      	ldrh	r3, [r3, #8]
 800a7cc:	887a      	ldrh	r2, [r7, #2]
 800a7ce:	429a      	cmp	r2, r3
 800a7d0:	d263      	bcs.n	800a89a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	891a      	ldrh	r2, [r3, #8]
 800a7d6:	887b      	ldrh	r3, [r7, #2]
 800a7d8:	1ad3      	subs	r3, r2, r3
 800a7da:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800a7dc:	887b      	ldrh	r3, [r7, #2]
 800a7de:	817b      	strh	r3, [r7, #10]
  q = p;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800a7e4:	e018      	b.n	800a818 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	895b      	ldrh	r3, [r3, #10]
 800a7ea:	897a      	ldrh	r2, [r7, #10]
 800a7ec:	1ad3      	subs	r3, r2, r3
 800a7ee:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	891a      	ldrh	r2, [r3, #8]
 800a7f4:	893b      	ldrh	r3, [r7, #8]
 800a7f6:	1ad3      	subs	r3, r2, r3
 800a7f8:	b29a      	uxth	r2, r3
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d106      	bne.n	800a818 <pbuf_realloc+0x70>
 800a80a:	4b26      	ldr	r3, [pc, #152]	; (800a8a4 <pbuf_realloc+0xfc>)
 800a80c:	f240 12af 	movw	r2, #431	; 0x1af
 800a810:	4927      	ldr	r1, [pc, #156]	; (800a8b0 <pbuf_realloc+0x108>)
 800a812:	4826      	ldr	r0, [pc, #152]	; (800a8ac <pbuf_realloc+0x104>)
 800a814:	f00b fdfc 	bl	8016410 <iprintf>
  while (rem_len > q->len) {
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	895b      	ldrh	r3, [r3, #10]
 800a81c:	897a      	ldrh	r2, [r7, #10]
 800a81e:	429a      	cmp	r2, r3
 800a820:	d8e1      	bhi.n	800a7e6 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	7b1b      	ldrb	r3, [r3, #12]
 800a826:	f003 030f 	and.w	r3, r3, #15
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d121      	bne.n	800a872 <pbuf_realloc+0xca>
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	895b      	ldrh	r3, [r3, #10]
 800a832:	897a      	ldrh	r2, [r7, #10]
 800a834:	429a      	cmp	r2, r3
 800a836:	d01c      	beq.n	800a872 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	7b5b      	ldrb	r3, [r3, #13]
 800a83c:	f003 0302 	and.w	r3, r3, #2
 800a840:	2b00      	cmp	r3, #0
 800a842:	d116      	bne.n	800a872 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	685a      	ldr	r2, [r3, #4]
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	1ad3      	subs	r3, r2, r3
 800a84c:	b29a      	uxth	r2, r3
 800a84e:	897b      	ldrh	r3, [r7, #10]
 800a850:	4413      	add	r3, r2
 800a852:	b29b      	uxth	r3, r3
 800a854:	4619      	mov	r1, r3
 800a856:	68f8      	ldr	r0, [r7, #12]
 800a858:	f7fe ff76 	bl	8009748 <mem_trim>
 800a85c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	2b00      	cmp	r3, #0
 800a862:	d106      	bne.n	800a872 <pbuf_realloc+0xca>
 800a864:	4b0f      	ldr	r3, [pc, #60]	; (800a8a4 <pbuf_realloc+0xfc>)
 800a866:	f240 12bd 	movw	r2, #445	; 0x1bd
 800a86a:	4912      	ldr	r1, [pc, #72]	; (800a8b4 <pbuf_realloc+0x10c>)
 800a86c:	480f      	ldr	r0, [pc, #60]	; (800a8ac <pbuf_realloc+0x104>)
 800a86e:	f00b fdcf 	bl	8016410 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	897a      	ldrh	r2, [r7, #10]
 800a876:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	895a      	ldrh	r2, [r3, #10]
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	2b00      	cmp	r3, #0
 800a886:	d004      	beq.n	800a892 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	4618      	mov	r0, r3
 800a88e:	f000 f911 	bl	800aab4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	2200      	movs	r2, #0
 800a896:	601a      	str	r2, [r3, #0]
 800a898:	e000      	b.n	800a89c <pbuf_realloc+0xf4>
    return;
 800a89a:	bf00      	nop

}
 800a89c:	3710      	adds	r7, #16
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	bd80      	pop	{r7, pc}
 800a8a2:	bf00      	nop
 800a8a4:	08018a24 	.word	0x08018a24
 800a8a8:	08018b3c 	.word	0x08018b3c
 800a8ac:	08018a84 	.word	0x08018a84
 800a8b0:	08018b54 	.word	0x08018b54
 800a8b4:	08018b6c 	.word	0x08018b6c

0800a8b8 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b086      	sub	sp, #24
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	60f8      	str	r0, [r7, #12]
 800a8c0:	60b9      	str	r1, [r7, #8]
 800a8c2:	4613      	mov	r3, r2
 800a8c4:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d106      	bne.n	800a8da <pbuf_add_header_impl+0x22>
 800a8cc:	4b2b      	ldr	r3, [pc, #172]	; (800a97c <pbuf_add_header_impl+0xc4>)
 800a8ce:	f240 12df 	movw	r2, #479	; 0x1df
 800a8d2:	492b      	ldr	r1, [pc, #172]	; (800a980 <pbuf_add_header_impl+0xc8>)
 800a8d4:	482b      	ldr	r0, [pc, #172]	; (800a984 <pbuf_add_header_impl+0xcc>)
 800a8d6:	f00b fd9b 	bl	8016410 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d003      	beq.n	800a8e8 <pbuf_add_header_impl+0x30>
 800a8e0:	68bb      	ldr	r3, [r7, #8]
 800a8e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a8e6:	d301      	bcc.n	800a8ec <pbuf_add_header_impl+0x34>
    return 1;
 800a8e8:	2301      	movs	r3, #1
 800a8ea:	e043      	b.n	800a974 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800a8ec:	68bb      	ldr	r3, [r7, #8]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d101      	bne.n	800a8f6 <pbuf_add_header_impl+0x3e>
    return 0;
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	e03e      	b.n	800a974 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800a8f6:	68bb      	ldr	r3, [r7, #8]
 800a8f8:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	891a      	ldrh	r2, [r3, #8]
 800a8fe:	8a7b      	ldrh	r3, [r7, #18]
 800a900:	4413      	add	r3, r2
 800a902:	b29b      	uxth	r3, r3
 800a904:	8a7a      	ldrh	r2, [r7, #18]
 800a906:	429a      	cmp	r2, r3
 800a908:	d901      	bls.n	800a90e <pbuf_add_header_impl+0x56>
    return 1;
 800a90a:	2301      	movs	r3, #1
 800a90c:	e032      	b.n	800a974 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	7b1b      	ldrb	r3, [r3, #12]
 800a912:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800a914:	8a3b      	ldrh	r3, [r7, #16]
 800a916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d00c      	beq.n	800a938 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	685a      	ldr	r2, [r3, #4]
 800a922:	68bb      	ldr	r3, [r7, #8]
 800a924:	425b      	negs	r3, r3
 800a926:	4413      	add	r3, r2
 800a928:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	3310      	adds	r3, #16
 800a92e:	697a      	ldr	r2, [r7, #20]
 800a930:	429a      	cmp	r2, r3
 800a932:	d20d      	bcs.n	800a950 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800a934:	2301      	movs	r3, #1
 800a936:	e01d      	b.n	800a974 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800a938:	79fb      	ldrb	r3, [r7, #7]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d006      	beq.n	800a94c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	685a      	ldr	r2, [r3, #4]
 800a942:	68bb      	ldr	r3, [r7, #8]
 800a944:	425b      	negs	r3, r3
 800a946:	4413      	add	r3, r2
 800a948:	617b      	str	r3, [r7, #20]
 800a94a:	e001      	b.n	800a950 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800a94c:	2301      	movs	r3, #1
 800a94e:	e011      	b.n	800a974 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	697a      	ldr	r2, [r7, #20]
 800a954:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	895a      	ldrh	r2, [r3, #10]
 800a95a:	8a7b      	ldrh	r3, [r7, #18]
 800a95c:	4413      	add	r3, r2
 800a95e:	b29a      	uxth	r2, r3
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	891a      	ldrh	r2, [r3, #8]
 800a968:	8a7b      	ldrh	r3, [r7, #18]
 800a96a:	4413      	add	r3, r2
 800a96c:	b29a      	uxth	r2, r3
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	811a      	strh	r2, [r3, #8]


  return 0;
 800a972:	2300      	movs	r3, #0
}
 800a974:	4618      	mov	r0, r3
 800a976:	3718      	adds	r7, #24
 800a978:	46bd      	mov	sp, r7
 800a97a:	bd80      	pop	{r7, pc}
 800a97c:	08018a24 	.word	0x08018a24
 800a980:	08018b88 	.word	0x08018b88
 800a984:	08018a84 	.word	0x08018a84

0800a988 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b082      	sub	sp, #8
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
 800a990:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800a992:	2200      	movs	r2, #0
 800a994:	6839      	ldr	r1, [r7, #0]
 800a996:	6878      	ldr	r0, [r7, #4]
 800a998:	f7ff ff8e 	bl	800a8b8 <pbuf_add_header_impl>
 800a99c:	4603      	mov	r3, r0
}
 800a99e:	4618      	mov	r0, r3
 800a9a0:	3708      	adds	r7, #8
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	bd80      	pop	{r7, pc}
	...

0800a9a8 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b084      	sub	sp, #16
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]
 800a9b0:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d106      	bne.n	800a9c6 <pbuf_remove_header+0x1e>
 800a9b8:	4b20      	ldr	r3, [pc, #128]	; (800aa3c <pbuf_remove_header+0x94>)
 800a9ba:	f240 224b 	movw	r2, #587	; 0x24b
 800a9be:	4920      	ldr	r1, [pc, #128]	; (800aa40 <pbuf_remove_header+0x98>)
 800a9c0:	4820      	ldr	r0, [pc, #128]	; (800aa44 <pbuf_remove_header+0x9c>)
 800a9c2:	f00b fd25 	bl	8016410 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d003      	beq.n	800a9d4 <pbuf_remove_header+0x2c>
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a9d2:	d301      	bcc.n	800a9d8 <pbuf_remove_header+0x30>
    return 1;
 800a9d4:	2301      	movs	r3, #1
 800a9d6:	e02c      	b.n	800aa32 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d101      	bne.n	800a9e2 <pbuf_remove_header+0x3a>
    return 0;
 800a9de:	2300      	movs	r3, #0
 800a9e0:	e027      	b.n	800aa32 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	895b      	ldrh	r3, [r3, #10]
 800a9ea:	89fa      	ldrh	r2, [r7, #14]
 800a9ec:	429a      	cmp	r2, r3
 800a9ee:	d908      	bls.n	800aa02 <pbuf_remove_header+0x5a>
 800a9f0:	4b12      	ldr	r3, [pc, #72]	; (800aa3c <pbuf_remove_header+0x94>)
 800a9f2:	f240 2255 	movw	r2, #597	; 0x255
 800a9f6:	4914      	ldr	r1, [pc, #80]	; (800aa48 <pbuf_remove_header+0xa0>)
 800a9f8:	4812      	ldr	r0, [pc, #72]	; (800aa44 <pbuf_remove_header+0x9c>)
 800a9fa:	f00b fd09 	bl	8016410 <iprintf>
 800a9fe:	2301      	movs	r3, #1
 800aa00:	e017      	b.n	800aa32 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	685b      	ldr	r3, [r3, #4]
 800aa06:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	685a      	ldr	r2, [r3, #4]
 800aa0c:	683b      	ldr	r3, [r7, #0]
 800aa0e:	441a      	add	r2, r3
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	895a      	ldrh	r2, [r3, #10]
 800aa18:	89fb      	ldrh	r3, [r7, #14]
 800aa1a:	1ad3      	subs	r3, r2, r3
 800aa1c:	b29a      	uxth	r2, r3
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	891a      	ldrh	r2, [r3, #8]
 800aa26:	89fb      	ldrh	r3, [r7, #14]
 800aa28:	1ad3      	subs	r3, r2, r3
 800aa2a:	b29a      	uxth	r2, r3
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800aa30:	2300      	movs	r3, #0
}
 800aa32:	4618      	mov	r0, r3
 800aa34:	3710      	adds	r7, #16
 800aa36:	46bd      	mov	sp, r7
 800aa38:	bd80      	pop	{r7, pc}
 800aa3a:	bf00      	nop
 800aa3c:	08018a24 	.word	0x08018a24
 800aa40:	08018b88 	.word	0x08018b88
 800aa44:	08018a84 	.word	0x08018a84
 800aa48:	08018b94 	.word	0x08018b94

0800aa4c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b082      	sub	sp, #8
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
 800aa54:	460b      	mov	r3, r1
 800aa56:	807b      	strh	r3, [r7, #2]
 800aa58:	4613      	mov	r3, r2
 800aa5a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800aa5c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	da08      	bge.n	800aa76 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800aa64:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800aa68:	425b      	negs	r3, r3
 800aa6a:	4619      	mov	r1, r3
 800aa6c:	6878      	ldr	r0, [r7, #4]
 800aa6e:	f7ff ff9b 	bl	800a9a8 <pbuf_remove_header>
 800aa72:	4603      	mov	r3, r0
 800aa74:	e007      	b.n	800aa86 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800aa76:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800aa7a:	787a      	ldrb	r2, [r7, #1]
 800aa7c:	4619      	mov	r1, r3
 800aa7e:	6878      	ldr	r0, [r7, #4]
 800aa80:	f7ff ff1a 	bl	800a8b8 <pbuf_add_header_impl>
 800aa84:	4603      	mov	r3, r0
  }
}
 800aa86:	4618      	mov	r0, r3
 800aa88:	3708      	adds	r7, #8
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	bd80      	pop	{r7, pc}

0800aa8e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800aa8e:	b580      	push	{r7, lr}
 800aa90:	b082      	sub	sp, #8
 800aa92:	af00      	add	r7, sp, #0
 800aa94:	6078      	str	r0, [r7, #4]
 800aa96:	460b      	mov	r3, r1
 800aa98:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800aa9a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800aa9e:	2201      	movs	r2, #1
 800aaa0:	4619      	mov	r1, r3
 800aaa2:	6878      	ldr	r0, [r7, #4]
 800aaa4:	f7ff ffd2 	bl	800aa4c <pbuf_header_impl>
 800aaa8:	4603      	mov	r3, r0
}
 800aaaa:	4618      	mov	r0, r3
 800aaac:	3708      	adds	r7, #8
 800aaae:	46bd      	mov	sp, r7
 800aab0:	bd80      	pop	{r7, pc}
	...

0800aab4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b088      	sub	sp, #32
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d10b      	bne.n	800aada <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d106      	bne.n	800aad6 <pbuf_free+0x22>
 800aac8:	4b3b      	ldr	r3, [pc, #236]	; (800abb8 <pbuf_free+0x104>)
 800aaca:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800aace:	493b      	ldr	r1, [pc, #236]	; (800abbc <pbuf_free+0x108>)
 800aad0:	483b      	ldr	r0, [pc, #236]	; (800abc0 <pbuf_free+0x10c>)
 800aad2:	f00b fc9d 	bl	8016410 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800aad6:	2300      	movs	r3, #0
 800aad8:	e069      	b.n	800abae <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800aada:	2300      	movs	r3, #0
 800aadc:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800aade:	e062      	b.n	800aba6 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800aae0:	f00b fc14 	bl	801630c <sys_arch_protect>
 800aae4:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	7b9b      	ldrb	r3, [r3, #14]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d106      	bne.n	800aafc <pbuf_free+0x48>
 800aaee:	4b32      	ldr	r3, [pc, #200]	; (800abb8 <pbuf_free+0x104>)
 800aaf0:	f240 22f1 	movw	r2, #753	; 0x2f1
 800aaf4:	4933      	ldr	r1, [pc, #204]	; (800abc4 <pbuf_free+0x110>)
 800aaf6:	4832      	ldr	r0, [pc, #200]	; (800abc0 <pbuf_free+0x10c>)
 800aaf8:	f00b fc8a 	bl	8016410 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	7b9b      	ldrb	r3, [r3, #14]
 800ab00:	3b01      	subs	r3, #1
 800ab02:	b2da      	uxtb	r2, r3
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	739a      	strb	r2, [r3, #14]
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	7b9b      	ldrb	r3, [r3, #14]
 800ab0c:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800ab0e:	69b8      	ldr	r0, [r7, #24]
 800ab10:	f00b fc0a 	bl	8016328 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800ab14:	7dfb      	ldrb	r3, [r7, #23]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d143      	bne.n	800aba2 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	7b1b      	ldrb	r3, [r3, #12]
 800ab24:	f003 030f 	and.w	r3, r3, #15
 800ab28:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	7b5b      	ldrb	r3, [r3, #13]
 800ab2e:	f003 0302 	and.w	r3, r3, #2
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d011      	beq.n	800ab5a <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800ab3a:	68bb      	ldr	r3, [r7, #8]
 800ab3c:	691b      	ldr	r3, [r3, #16]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d106      	bne.n	800ab50 <pbuf_free+0x9c>
 800ab42:	4b1d      	ldr	r3, [pc, #116]	; (800abb8 <pbuf_free+0x104>)
 800ab44:	f240 22ff 	movw	r2, #767	; 0x2ff
 800ab48:	491f      	ldr	r1, [pc, #124]	; (800abc8 <pbuf_free+0x114>)
 800ab4a:	481d      	ldr	r0, [pc, #116]	; (800abc0 <pbuf_free+0x10c>)
 800ab4c:	f00b fc60 	bl	8016410 <iprintf>
        pc->custom_free_function(p);
 800ab50:	68bb      	ldr	r3, [r7, #8]
 800ab52:	691b      	ldr	r3, [r3, #16]
 800ab54:	6878      	ldr	r0, [r7, #4]
 800ab56:	4798      	blx	r3
 800ab58:	e01d      	b.n	800ab96 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800ab5a:	7bfb      	ldrb	r3, [r7, #15]
 800ab5c:	2b02      	cmp	r3, #2
 800ab5e:	d104      	bne.n	800ab6a <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800ab60:	6879      	ldr	r1, [r7, #4]
 800ab62:	200c      	movs	r0, #12
 800ab64:	f7ff f8f6 	bl	8009d54 <memp_free>
 800ab68:	e015      	b.n	800ab96 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800ab6a:	7bfb      	ldrb	r3, [r7, #15]
 800ab6c:	2b01      	cmp	r3, #1
 800ab6e:	d104      	bne.n	800ab7a <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800ab70:	6879      	ldr	r1, [r7, #4]
 800ab72:	200b      	movs	r0, #11
 800ab74:	f7ff f8ee 	bl	8009d54 <memp_free>
 800ab78:	e00d      	b.n	800ab96 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800ab7a:	7bfb      	ldrb	r3, [r7, #15]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d103      	bne.n	800ab88 <pbuf_free+0xd4>
          mem_free(p);
 800ab80:	6878      	ldr	r0, [r7, #4]
 800ab82:	f7fe fd51 	bl	8009628 <mem_free>
 800ab86:	e006      	b.n	800ab96 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800ab88:	4b0b      	ldr	r3, [pc, #44]	; (800abb8 <pbuf_free+0x104>)
 800ab8a:	f240 320f 	movw	r2, #783	; 0x30f
 800ab8e:	490f      	ldr	r1, [pc, #60]	; (800abcc <pbuf_free+0x118>)
 800ab90:	480b      	ldr	r0, [pc, #44]	; (800abc0 <pbuf_free+0x10c>)
 800ab92:	f00b fc3d 	bl	8016410 <iprintf>
        }
      }
      count++;
 800ab96:	7ffb      	ldrb	r3, [r7, #31]
 800ab98:	3301      	adds	r3, #1
 800ab9a:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800ab9c:	693b      	ldr	r3, [r7, #16]
 800ab9e:	607b      	str	r3, [r7, #4]
 800aba0:	e001      	b.n	800aba6 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800aba2:	2300      	movs	r3, #0
 800aba4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d199      	bne.n	800aae0 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800abac:	7ffb      	ldrb	r3, [r7, #31]
}
 800abae:	4618      	mov	r0, r3
 800abb0:	3720      	adds	r7, #32
 800abb2:	46bd      	mov	sp, r7
 800abb4:	bd80      	pop	{r7, pc}
 800abb6:	bf00      	nop
 800abb8:	08018a24 	.word	0x08018a24
 800abbc:	08018b88 	.word	0x08018b88
 800abc0:	08018a84 	.word	0x08018a84
 800abc4:	08018bb4 	.word	0x08018bb4
 800abc8:	08018bcc 	.word	0x08018bcc
 800abcc:	08018bf0 	.word	0x08018bf0

0800abd0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800abd0:	b480      	push	{r7}
 800abd2:	b085      	sub	sp, #20
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800abd8:	2300      	movs	r3, #0
 800abda:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800abdc:	e005      	b.n	800abea <pbuf_clen+0x1a>
    ++len;
 800abde:	89fb      	ldrh	r3, [r7, #14]
 800abe0:	3301      	adds	r3, #1
 800abe2:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d1f6      	bne.n	800abde <pbuf_clen+0xe>
  }
  return len;
 800abf0:	89fb      	ldrh	r3, [r7, #14]
}
 800abf2:	4618      	mov	r0, r3
 800abf4:	3714      	adds	r7, #20
 800abf6:	46bd      	mov	sp, r7
 800abf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfc:	4770      	bx	lr
	...

0800ac00 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b084      	sub	sp, #16
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d016      	beq.n	800ac3c <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800ac0e:	f00b fb7d 	bl	801630c <sys_arch_protect>
 800ac12:	60f8      	str	r0, [r7, #12]
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	7b9b      	ldrb	r3, [r3, #14]
 800ac18:	3301      	adds	r3, #1
 800ac1a:	b2da      	uxtb	r2, r3
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	739a      	strb	r2, [r3, #14]
 800ac20:	68f8      	ldr	r0, [r7, #12]
 800ac22:	f00b fb81 	bl	8016328 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	7b9b      	ldrb	r3, [r3, #14]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d106      	bne.n	800ac3c <pbuf_ref+0x3c>
 800ac2e:	4b05      	ldr	r3, [pc, #20]	; (800ac44 <pbuf_ref+0x44>)
 800ac30:	f240 3242 	movw	r2, #834	; 0x342
 800ac34:	4904      	ldr	r1, [pc, #16]	; (800ac48 <pbuf_ref+0x48>)
 800ac36:	4805      	ldr	r0, [pc, #20]	; (800ac4c <pbuf_ref+0x4c>)
 800ac38:	f00b fbea 	bl	8016410 <iprintf>
  }
}
 800ac3c:	bf00      	nop
 800ac3e:	3710      	adds	r7, #16
 800ac40:	46bd      	mov	sp, r7
 800ac42:	bd80      	pop	{r7, pc}
 800ac44:	08018a24 	.word	0x08018a24
 800ac48:	08018c04 	.word	0x08018c04
 800ac4c:	08018a84 	.word	0x08018a84

0800ac50 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b084      	sub	sp, #16
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
 800ac58:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d002      	beq.n	800ac66 <pbuf_cat+0x16>
 800ac60:	683b      	ldr	r3, [r7, #0]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d107      	bne.n	800ac76 <pbuf_cat+0x26>
 800ac66:	4b20      	ldr	r3, [pc, #128]	; (800ace8 <pbuf_cat+0x98>)
 800ac68:	f240 3259 	movw	r2, #857	; 0x359
 800ac6c:	491f      	ldr	r1, [pc, #124]	; (800acec <pbuf_cat+0x9c>)
 800ac6e:	4820      	ldr	r0, [pc, #128]	; (800acf0 <pbuf_cat+0xa0>)
 800ac70:	f00b fbce 	bl	8016410 <iprintf>
 800ac74:	e034      	b.n	800ace0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	60fb      	str	r3, [r7, #12]
 800ac7a:	e00a      	b.n	800ac92 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	891a      	ldrh	r2, [r3, #8]
 800ac80:	683b      	ldr	r3, [r7, #0]
 800ac82:	891b      	ldrh	r3, [r3, #8]
 800ac84:	4413      	add	r3, r2
 800ac86:	b29a      	uxth	r2, r3
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	60fb      	str	r3, [r7, #12]
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d1f0      	bne.n	800ac7c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	891a      	ldrh	r2, [r3, #8]
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	895b      	ldrh	r3, [r3, #10]
 800aca2:	429a      	cmp	r2, r3
 800aca4:	d006      	beq.n	800acb4 <pbuf_cat+0x64>
 800aca6:	4b10      	ldr	r3, [pc, #64]	; (800ace8 <pbuf_cat+0x98>)
 800aca8:	f240 3262 	movw	r2, #866	; 0x362
 800acac:	4911      	ldr	r1, [pc, #68]	; (800acf4 <pbuf_cat+0xa4>)
 800acae:	4810      	ldr	r0, [pc, #64]	; (800acf0 <pbuf_cat+0xa0>)
 800acb0:	f00b fbae 	bl	8016410 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d006      	beq.n	800acca <pbuf_cat+0x7a>
 800acbc:	4b0a      	ldr	r3, [pc, #40]	; (800ace8 <pbuf_cat+0x98>)
 800acbe:	f240 3263 	movw	r2, #867	; 0x363
 800acc2:	490d      	ldr	r1, [pc, #52]	; (800acf8 <pbuf_cat+0xa8>)
 800acc4:	480a      	ldr	r0, [pc, #40]	; (800acf0 <pbuf_cat+0xa0>)
 800acc6:	f00b fba3 	bl	8016410 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	891a      	ldrh	r2, [r3, #8]
 800acce:	683b      	ldr	r3, [r7, #0]
 800acd0:	891b      	ldrh	r3, [r3, #8]
 800acd2:	4413      	add	r3, r2
 800acd4:	b29a      	uxth	r2, r3
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	683a      	ldr	r2, [r7, #0]
 800acde:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800ace0:	3710      	adds	r7, #16
 800ace2:	46bd      	mov	sp, r7
 800ace4:	bd80      	pop	{r7, pc}
 800ace6:	bf00      	nop
 800ace8:	08018a24 	.word	0x08018a24
 800acec:	08018c18 	.word	0x08018c18
 800acf0:	08018a84 	.word	0x08018a84
 800acf4:	08018c50 	.word	0x08018c50
 800acf8:	08018c80 	.word	0x08018c80

0800acfc <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b082      	sub	sp, #8
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
 800ad04:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800ad06:	6839      	ldr	r1, [r7, #0]
 800ad08:	6878      	ldr	r0, [r7, #4]
 800ad0a:	f7ff ffa1 	bl	800ac50 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800ad0e:	6838      	ldr	r0, [r7, #0]
 800ad10:	f7ff ff76 	bl	800ac00 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800ad14:	bf00      	nop
 800ad16:	3708      	adds	r7, #8
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	bd80      	pop	{r7, pc}

0800ad1c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	b086      	sub	sp, #24
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
 800ad24:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800ad26:	2300      	movs	r3, #0
 800ad28:	617b      	str	r3, [r7, #20]
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d008      	beq.n	800ad46 <pbuf_copy+0x2a>
 800ad34:	683b      	ldr	r3, [r7, #0]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d005      	beq.n	800ad46 <pbuf_copy+0x2a>
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	891a      	ldrh	r2, [r3, #8]
 800ad3e:	683b      	ldr	r3, [r7, #0]
 800ad40:	891b      	ldrh	r3, [r3, #8]
 800ad42:	429a      	cmp	r2, r3
 800ad44:	d209      	bcs.n	800ad5a <pbuf_copy+0x3e>
 800ad46:	4b57      	ldr	r3, [pc, #348]	; (800aea4 <pbuf_copy+0x188>)
 800ad48:	f240 32c9 	movw	r2, #969	; 0x3c9
 800ad4c:	4956      	ldr	r1, [pc, #344]	; (800aea8 <pbuf_copy+0x18c>)
 800ad4e:	4857      	ldr	r0, [pc, #348]	; (800aeac <pbuf_copy+0x190>)
 800ad50:	f00b fb5e 	bl	8016410 <iprintf>
 800ad54:	f06f 030f 	mvn.w	r3, #15
 800ad58:	e09f      	b.n	800ae9a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	895b      	ldrh	r3, [r3, #10]
 800ad5e:	461a      	mov	r2, r3
 800ad60:	697b      	ldr	r3, [r7, #20]
 800ad62:	1ad2      	subs	r2, r2, r3
 800ad64:	683b      	ldr	r3, [r7, #0]
 800ad66:	895b      	ldrh	r3, [r3, #10]
 800ad68:	4619      	mov	r1, r3
 800ad6a:	693b      	ldr	r3, [r7, #16]
 800ad6c:	1acb      	subs	r3, r1, r3
 800ad6e:	429a      	cmp	r2, r3
 800ad70:	d306      	bcc.n	800ad80 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800ad72:	683b      	ldr	r3, [r7, #0]
 800ad74:	895b      	ldrh	r3, [r3, #10]
 800ad76:	461a      	mov	r2, r3
 800ad78:	693b      	ldr	r3, [r7, #16]
 800ad7a:	1ad3      	subs	r3, r2, r3
 800ad7c:	60fb      	str	r3, [r7, #12]
 800ad7e:	e005      	b.n	800ad8c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	895b      	ldrh	r3, [r3, #10]
 800ad84:	461a      	mov	r2, r3
 800ad86:	697b      	ldr	r3, [r7, #20]
 800ad88:	1ad3      	subs	r3, r2, r3
 800ad8a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	685a      	ldr	r2, [r3, #4]
 800ad90:	697b      	ldr	r3, [r7, #20]
 800ad92:	18d0      	adds	r0, r2, r3
 800ad94:	683b      	ldr	r3, [r7, #0]
 800ad96:	685a      	ldr	r2, [r3, #4]
 800ad98:	693b      	ldr	r3, [r7, #16]
 800ad9a:	4413      	add	r3, r2
 800ad9c:	68fa      	ldr	r2, [r7, #12]
 800ad9e:	4619      	mov	r1, r3
 800ada0:	f00b fb06 	bl	80163b0 <memcpy>
    offset_to += len;
 800ada4:	697a      	ldr	r2, [r7, #20]
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	4413      	add	r3, r2
 800adaa:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800adac:	693a      	ldr	r2, [r7, #16]
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	4413      	add	r3, r2
 800adb2:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	895b      	ldrh	r3, [r3, #10]
 800adb8:	461a      	mov	r2, r3
 800adba:	697b      	ldr	r3, [r7, #20]
 800adbc:	4293      	cmp	r3, r2
 800adbe:	d906      	bls.n	800adce <pbuf_copy+0xb2>
 800adc0:	4b38      	ldr	r3, [pc, #224]	; (800aea4 <pbuf_copy+0x188>)
 800adc2:	f240 32d9 	movw	r2, #985	; 0x3d9
 800adc6:	493a      	ldr	r1, [pc, #232]	; (800aeb0 <pbuf_copy+0x194>)
 800adc8:	4838      	ldr	r0, [pc, #224]	; (800aeac <pbuf_copy+0x190>)
 800adca:	f00b fb21 	bl	8016410 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800adce:	683b      	ldr	r3, [r7, #0]
 800add0:	895b      	ldrh	r3, [r3, #10]
 800add2:	461a      	mov	r2, r3
 800add4:	693b      	ldr	r3, [r7, #16]
 800add6:	4293      	cmp	r3, r2
 800add8:	d906      	bls.n	800ade8 <pbuf_copy+0xcc>
 800adda:	4b32      	ldr	r3, [pc, #200]	; (800aea4 <pbuf_copy+0x188>)
 800addc:	f240 32da 	movw	r2, #986	; 0x3da
 800ade0:	4934      	ldr	r1, [pc, #208]	; (800aeb4 <pbuf_copy+0x198>)
 800ade2:	4832      	ldr	r0, [pc, #200]	; (800aeac <pbuf_copy+0x190>)
 800ade4:	f00b fb14 	bl	8016410 <iprintf>
    if (offset_from >= p_from->len) {
 800ade8:	683b      	ldr	r3, [r7, #0]
 800adea:	895b      	ldrh	r3, [r3, #10]
 800adec:	461a      	mov	r2, r3
 800adee:	693b      	ldr	r3, [r7, #16]
 800adf0:	4293      	cmp	r3, r2
 800adf2:	d304      	bcc.n	800adfe <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800adf4:	2300      	movs	r3, #0
 800adf6:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800adf8:	683b      	ldr	r3, [r7, #0]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	895b      	ldrh	r3, [r3, #10]
 800ae02:	461a      	mov	r2, r3
 800ae04:	697b      	ldr	r3, [r7, #20]
 800ae06:	4293      	cmp	r3, r2
 800ae08:	d114      	bne.n	800ae34 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d10c      	bne.n	800ae34 <pbuf_copy+0x118>
 800ae1a:	683b      	ldr	r3, [r7, #0]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d009      	beq.n	800ae34 <pbuf_copy+0x118>
 800ae20:	4b20      	ldr	r3, [pc, #128]	; (800aea4 <pbuf_copy+0x188>)
 800ae22:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800ae26:	4924      	ldr	r1, [pc, #144]	; (800aeb8 <pbuf_copy+0x19c>)
 800ae28:	4820      	ldr	r0, [pc, #128]	; (800aeac <pbuf_copy+0x190>)
 800ae2a:	f00b faf1 	bl	8016410 <iprintf>
 800ae2e:	f06f 030f 	mvn.w	r3, #15
 800ae32:	e032      	b.n	800ae9a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800ae34:	683b      	ldr	r3, [r7, #0]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d013      	beq.n	800ae62 <pbuf_copy+0x146>
 800ae3a:	683b      	ldr	r3, [r7, #0]
 800ae3c:	895a      	ldrh	r2, [r3, #10]
 800ae3e:	683b      	ldr	r3, [r7, #0]
 800ae40:	891b      	ldrh	r3, [r3, #8]
 800ae42:	429a      	cmp	r2, r3
 800ae44:	d10d      	bne.n	800ae62 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800ae46:	683b      	ldr	r3, [r7, #0]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d009      	beq.n	800ae62 <pbuf_copy+0x146>
 800ae4e:	4b15      	ldr	r3, [pc, #84]	; (800aea4 <pbuf_copy+0x188>)
 800ae50:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800ae54:	4919      	ldr	r1, [pc, #100]	; (800aebc <pbuf_copy+0x1a0>)
 800ae56:	4815      	ldr	r0, [pc, #84]	; (800aeac <pbuf_copy+0x190>)
 800ae58:	f00b fada 	bl	8016410 <iprintf>
 800ae5c:	f06f 0305 	mvn.w	r3, #5
 800ae60:	e01b      	b.n	800ae9a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d013      	beq.n	800ae90 <pbuf_copy+0x174>
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	895a      	ldrh	r2, [r3, #10]
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	891b      	ldrh	r3, [r3, #8]
 800ae70:	429a      	cmp	r2, r3
 800ae72:	d10d      	bne.n	800ae90 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d009      	beq.n	800ae90 <pbuf_copy+0x174>
 800ae7c:	4b09      	ldr	r3, [pc, #36]	; (800aea4 <pbuf_copy+0x188>)
 800ae7e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800ae82:	490e      	ldr	r1, [pc, #56]	; (800aebc <pbuf_copy+0x1a0>)
 800ae84:	4809      	ldr	r0, [pc, #36]	; (800aeac <pbuf_copy+0x190>)
 800ae86:	f00b fac3 	bl	8016410 <iprintf>
 800ae8a:	f06f 0305 	mvn.w	r3, #5
 800ae8e:	e004      	b.n	800ae9a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800ae90:	683b      	ldr	r3, [r7, #0]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	f47f af61 	bne.w	800ad5a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800ae98:	2300      	movs	r3, #0
}
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	3718      	adds	r7, #24
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	bd80      	pop	{r7, pc}
 800aea2:	bf00      	nop
 800aea4:	08018a24 	.word	0x08018a24
 800aea8:	08018ccc 	.word	0x08018ccc
 800aeac:	08018a84 	.word	0x08018a84
 800aeb0:	08018cfc 	.word	0x08018cfc
 800aeb4:	08018d14 	.word	0x08018d14
 800aeb8:	08018d30 	.word	0x08018d30
 800aebc:	08018d40 	.word	0x08018d40

0800aec0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b088      	sub	sp, #32
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	60f8      	str	r0, [r7, #12]
 800aec8:	60b9      	str	r1, [r7, #8]
 800aeca:	4611      	mov	r1, r2
 800aecc:	461a      	mov	r2, r3
 800aece:	460b      	mov	r3, r1
 800aed0:	80fb      	strh	r3, [r7, #6]
 800aed2:	4613      	mov	r3, r2
 800aed4:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800aed6:	2300      	movs	r3, #0
 800aed8:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800aeda:	2300      	movs	r3, #0
 800aedc:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d108      	bne.n	800aef6 <pbuf_copy_partial+0x36>
 800aee4:	4b2b      	ldr	r3, [pc, #172]	; (800af94 <pbuf_copy_partial+0xd4>)
 800aee6:	f240 420a 	movw	r2, #1034	; 0x40a
 800aeea:	492b      	ldr	r1, [pc, #172]	; (800af98 <pbuf_copy_partial+0xd8>)
 800aeec:	482b      	ldr	r0, [pc, #172]	; (800af9c <pbuf_copy_partial+0xdc>)
 800aeee:	f00b fa8f 	bl	8016410 <iprintf>
 800aef2:	2300      	movs	r3, #0
 800aef4:	e04a      	b.n	800af8c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800aef6:	68bb      	ldr	r3, [r7, #8]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d108      	bne.n	800af0e <pbuf_copy_partial+0x4e>
 800aefc:	4b25      	ldr	r3, [pc, #148]	; (800af94 <pbuf_copy_partial+0xd4>)
 800aefe:	f240 420b 	movw	r2, #1035	; 0x40b
 800af02:	4927      	ldr	r1, [pc, #156]	; (800afa0 <pbuf_copy_partial+0xe0>)
 800af04:	4825      	ldr	r0, [pc, #148]	; (800af9c <pbuf_copy_partial+0xdc>)
 800af06:	f00b fa83 	bl	8016410 <iprintf>
 800af0a:	2300      	movs	r3, #0
 800af0c:	e03e      	b.n	800af8c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	61fb      	str	r3, [r7, #28]
 800af12:	e034      	b.n	800af7e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800af14:	88bb      	ldrh	r3, [r7, #4]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d00a      	beq.n	800af30 <pbuf_copy_partial+0x70>
 800af1a:	69fb      	ldr	r3, [r7, #28]
 800af1c:	895b      	ldrh	r3, [r3, #10]
 800af1e:	88ba      	ldrh	r2, [r7, #4]
 800af20:	429a      	cmp	r2, r3
 800af22:	d305      	bcc.n	800af30 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800af24:	69fb      	ldr	r3, [r7, #28]
 800af26:	895b      	ldrh	r3, [r3, #10]
 800af28:	88ba      	ldrh	r2, [r7, #4]
 800af2a:	1ad3      	subs	r3, r2, r3
 800af2c:	80bb      	strh	r3, [r7, #4]
 800af2e:	e023      	b.n	800af78 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800af30:	69fb      	ldr	r3, [r7, #28]
 800af32:	895a      	ldrh	r2, [r3, #10]
 800af34:	88bb      	ldrh	r3, [r7, #4]
 800af36:	1ad3      	subs	r3, r2, r3
 800af38:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800af3a:	8b3a      	ldrh	r2, [r7, #24]
 800af3c:	88fb      	ldrh	r3, [r7, #6]
 800af3e:	429a      	cmp	r2, r3
 800af40:	d901      	bls.n	800af46 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800af42:	88fb      	ldrh	r3, [r7, #6]
 800af44:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800af46:	8b7b      	ldrh	r3, [r7, #26]
 800af48:	68ba      	ldr	r2, [r7, #8]
 800af4a:	18d0      	adds	r0, r2, r3
 800af4c:	69fb      	ldr	r3, [r7, #28]
 800af4e:	685a      	ldr	r2, [r3, #4]
 800af50:	88bb      	ldrh	r3, [r7, #4]
 800af52:	4413      	add	r3, r2
 800af54:	8b3a      	ldrh	r2, [r7, #24]
 800af56:	4619      	mov	r1, r3
 800af58:	f00b fa2a 	bl	80163b0 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800af5c:	8afa      	ldrh	r2, [r7, #22]
 800af5e:	8b3b      	ldrh	r3, [r7, #24]
 800af60:	4413      	add	r3, r2
 800af62:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800af64:	8b7a      	ldrh	r2, [r7, #26]
 800af66:	8b3b      	ldrh	r3, [r7, #24]
 800af68:	4413      	add	r3, r2
 800af6a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800af6c:	88fa      	ldrh	r2, [r7, #6]
 800af6e:	8b3b      	ldrh	r3, [r7, #24]
 800af70:	1ad3      	subs	r3, r2, r3
 800af72:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800af74:	2300      	movs	r3, #0
 800af76:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800af78:	69fb      	ldr	r3, [r7, #28]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	61fb      	str	r3, [r7, #28]
 800af7e:	88fb      	ldrh	r3, [r7, #6]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d002      	beq.n	800af8a <pbuf_copy_partial+0xca>
 800af84:	69fb      	ldr	r3, [r7, #28]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d1c4      	bne.n	800af14 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800af8a:	8afb      	ldrh	r3, [r7, #22]
}
 800af8c:	4618      	mov	r0, r3
 800af8e:	3720      	adds	r7, #32
 800af90:	46bd      	mov	sp, r7
 800af92:	bd80      	pop	{r7, pc}
 800af94:	08018a24 	.word	0x08018a24
 800af98:	08018d6c 	.word	0x08018d6c
 800af9c:	08018a84 	.word	0x08018a84
 800afa0:	08018d8c 	.word	0x08018d8c

0800afa4 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 800afa4:	b480      	push	{r7}
 800afa6:	b087      	sub	sp, #28
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	60f8      	str	r0, [r7, #12]
 800afac:	460b      	mov	r3, r1
 800afae:	607a      	str	r2, [r7, #4]
 800afb0:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 800afb2:	897b      	ldrh	r3, [r7, #10]
 800afb4:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 800afba:	e007      	b.n	800afcc <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 800afbc:	693b      	ldr	r3, [r7, #16]
 800afbe:	895b      	ldrh	r3, [r3, #10]
 800afc0:	8afa      	ldrh	r2, [r7, #22]
 800afc2:	1ad3      	subs	r3, r2, r3
 800afc4:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 800afc6:	693b      	ldr	r3, [r7, #16]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 800afcc:	693b      	ldr	r3, [r7, #16]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d004      	beq.n	800afdc <pbuf_skip_const+0x38>
 800afd2:	693b      	ldr	r3, [r7, #16]
 800afd4:	895b      	ldrh	r3, [r3, #10]
 800afd6:	8afa      	ldrh	r2, [r7, #22]
 800afd8:	429a      	cmp	r2, r3
 800afda:	d2ef      	bcs.n	800afbc <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d002      	beq.n	800afe8 <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	8afa      	ldrh	r2, [r7, #22]
 800afe6:	801a      	strh	r2, [r3, #0]
  }
  return q;
 800afe8:	693b      	ldr	r3, [r7, #16]
}
 800afea:	4618      	mov	r0, r3
 800afec:	371c      	adds	r7, #28
 800afee:	46bd      	mov	sp, r7
 800aff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff4:	4770      	bx	lr
	...

0800aff8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b084      	sub	sp, #16
 800affc:	af00      	add	r7, sp, #0
 800affe:	4603      	mov	r3, r0
 800b000:	603a      	str	r2, [r7, #0]
 800b002:	71fb      	strb	r3, [r7, #7]
 800b004:	460b      	mov	r3, r1
 800b006:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800b008:	683b      	ldr	r3, [r7, #0]
 800b00a:	8919      	ldrh	r1, [r3, #8]
 800b00c:	88ba      	ldrh	r2, [r7, #4]
 800b00e:	79fb      	ldrb	r3, [r7, #7]
 800b010:	4618      	mov	r0, r3
 800b012:	f7ff fa6b 	bl	800a4ec <pbuf_alloc>
 800b016:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d101      	bne.n	800b022 <pbuf_clone+0x2a>
    return NULL;
 800b01e:	2300      	movs	r3, #0
 800b020:	e011      	b.n	800b046 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800b022:	6839      	ldr	r1, [r7, #0]
 800b024:	68f8      	ldr	r0, [r7, #12]
 800b026:	f7ff fe79 	bl	800ad1c <pbuf_copy>
 800b02a:	4603      	mov	r3, r0
 800b02c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800b02e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d006      	beq.n	800b044 <pbuf_clone+0x4c>
 800b036:	4b06      	ldr	r3, [pc, #24]	; (800b050 <pbuf_clone+0x58>)
 800b038:	f240 5224 	movw	r2, #1316	; 0x524
 800b03c:	4905      	ldr	r1, [pc, #20]	; (800b054 <pbuf_clone+0x5c>)
 800b03e:	4806      	ldr	r0, [pc, #24]	; (800b058 <pbuf_clone+0x60>)
 800b040:	f00b f9e6 	bl	8016410 <iprintf>
  return q;
 800b044:	68fb      	ldr	r3, [r7, #12]
}
 800b046:	4618      	mov	r0, r3
 800b048:	3710      	adds	r7, #16
 800b04a:	46bd      	mov	sp, r7
 800b04c:	bd80      	pop	{r7, pc}
 800b04e:	bf00      	nop
 800b050:	08018a24 	.word	0x08018a24
 800b054:	08018e98 	.word	0x08018e98
 800b058:	08018a84 	.word	0x08018a84

0800b05c <pbuf_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p OR ZERO IF 'offset' >= p->tot_len
 */
u8_t
pbuf_get_at(const struct pbuf *p, u16_t offset)
{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b084      	sub	sp, #16
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
 800b064:	460b      	mov	r3, r1
 800b066:	807b      	strh	r3, [r7, #2]
  int ret = pbuf_try_get_at(p, offset);
 800b068:	887b      	ldrh	r3, [r7, #2]
 800b06a:	4619      	mov	r1, r3
 800b06c:	6878      	ldr	r0, [r7, #4]
 800b06e:	f000 f80c 	bl	800b08a <pbuf_try_get_at>
 800b072:	60f8      	str	r0, [r7, #12]
  if (ret >= 0) {
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	2b00      	cmp	r3, #0
 800b078:	db02      	blt.n	800b080 <pbuf_get_at+0x24>
    return (u8_t)ret;
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	b2db      	uxtb	r3, r3
 800b07e:	e000      	b.n	800b082 <pbuf_get_at+0x26>
  }
  return 0;
 800b080:	2300      	movs	r3, #0
}
 800b082:	4618      	mov	r0, r3
 800b084:	3710      	adds	r7, #16
 800b086:	46bd      	mov	sp, r7
 800b088:	bd80      	pop	{r7, pc}

0800b08a <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf *p, u16_t offset)
{
 800b08a:	b580      	push	{r7, lr}
 800b08c:	b084      	sub	sp, #16
 800b08e:	af00      	add	r7, sp, #0
 800b090:	6078      	str	r0, [r7, #4]
 800b092:	460b      	mov	r3, r1
 800b094:	807b      	strh	r3, [r7, #2]
  u16_t q_idx;
  const struct pbuf *q = pbuf_skip_const(p, offset, &q_idx);
 800b096:	f107 020a 	add.w	r2, r7, #10
 800b09a:	887b      	ldrh	r3, [r7, #2]
 800b09c:	4619      	mov	r1, r3
 800b09e:	6878      	ldr	r0, [r7, #4]
 800b0a0:	f7ff ff80 	bl	800afa4 <pbuf_skip_const>
 800b0a4:	60f8      	str	r0, [r7, #12]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d00a      	beq.n	800b0c2 <pbuf_try_get_at+0x38>
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	895a      	ldrh	r2, [r3, #10]
 800b0b0:	897b      	ldrh	r3, [r7, #10]
 800b0b2:	429a      	cmp	r2, r3
 800b0b4:	d905      	bls.n	800b0c2 <pbuf_try_get_at+0x38>
    return ((u8_t *)q->payload)[q_idx];
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	685b      	ldr	r3, [r3, #4]
 800b0ba:	897a      	ldrh	r2, [r7, #10]
 800b0bc:	4413      	add	r3, r2
 800b0be:	781b      	ldrb	r3, [r3, #0]
 800b0c0:	e001      	b.n	800b0c6 <pbuf_try_get_at+0x3c>
  }
  return -1;
 800b0c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	3710      	adds	r7, #16
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	bd80      	pop	{r7, pc}
	...

0800b0d0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800b0d4:	f00b fa2a 	bl	801652c <rand>
 800b0d8:	4603      	mov	r3, r0
 800b0da:	b29b      	uxth	r3, r3
 800b0dc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800b0e0:	b29b      	uxth	r3, r3
 800b0e2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800b0e6:	b29a      	uxth	r2, r3
 800b0e8:	4b01      	ldr	r3, [pc, #4]	; (800b0f0 <tcp_init+0x20>)
 800b0ea:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800b0ec:	bf00      	nop
 800b0ee:	bd80      	pop	{r7, pc}
 800b0f0:	20000014 	.word	0x20000014

0800b0f4 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b082      	sub	sp, #8
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	7d1b      	ldrb	r3, [r3, #20]
 800b100:	2b01      	cmp	r3, #1
 800b102:	d105      	bne.n	800b110 <tcp_free+0x1c>
 800b104:	4b06      	ldr	r3, [pc, #24]	; (800b120 <tcp_free+0x2c>)
 800b106:	22d4      	movs	r2, #212	; 0xd4
 800b108:	4906      	ldr	r1, [pc, #24]	; (800b124 <tcp_free+0x30>)
 800b10a:	4807      	ldr	r0, [pc, #28]	; (800b128 <tcp_free+0x34>)
 800b10c:	f00b f980 	bl	8016410 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800b110:	6879      	ldr	r1, [r7, #4]
 800b112:	2001      	movs	r0, #1
 800b114:	f7fe fe1e 	bl	8009d54 <memp_free>
}
 800b118:	bf00      	nop
 800b11a:	3708      	adds	r7, #8
 800b11c:	46bd      	mov	sp, r7
 800b11e:	bd80      	pop	{r7, pc}
 800b120:	08018f24 	.word	0x08018f24
 800b124:	08018f54 	.word	0x08018f54
 800b128:	08018f68 	.word	0x08018f68

0800b12c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b082      	sub	sp, #8
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	7d1b      	ldrb	r3, [r3, #20]
 800b138:	2b01      	cmp	r3, #1
 800b13a:	d105      	bne.n	800b148 <tcp_free_listen+0x1c>
 800b13c:	4b06      	ldr	r3, [pc, #24]	; (800b158 <tcp_free_listen+0x2c>)
 800b13e:	22df      	movs	r2, #223	; 0xdf
 800b140:	4906      	ldr	r1, [pc, #24]	; (800b15c <tcp_free_listen+0x30>)
 800b142:	4807      	ldr	r0, [pc, #28]	; (800b160 <tcp_free_listen+0x34>)
 800b144:	f00b f964 	bl	8016410 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800b148:	6879      	ldr	r1, [r7, #4]
 800b14a:	2002      	movs	r0, #2
 800b14c:	f7fe fe02 	bl	8009d54 <memp_free>
}
 800b150:	bf00      	nop
 800b152:	3708      	adds	r7, #8
 800b154:	46bd      	mov	sp, r7
 800b156:	bd80      	pop	{r7, pc}
 800b158:	08018f24 	.word	0x08018f24
 800b15c:	08018f90 	.word	0x08018f90
 800b160:	08018f68 	.word	0x08018f68

0800b164 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800b164:	b580      	push	{r7, lr}
 800b166:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800b168:	f001 f898 	bl	800c29c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800b16c:	4b07      	ldr	r3, [pc, #28]	; (800b18c <tcp_tmr+0x28>)
 800b16e:	781b      	ldrb	r3, [r3, #0]
 800b170:	3301      	adds	r3, #1
 800b172:	b2da      	uxtb	r2, r3
 800b174:	4b05      	ldr	r3, [pc, #20]	; (800b18c <tcp_tmr+0x28>)
 800b176:	701a      	strb	r2, [r3, #0]
 800b178:	4b04      	ldr	r3, [pc, #16]	; (800b18c <tcp_tmr+0x28>)
 800b17a:	781b      	ldrb	r3, [r3, #0]
 800b17c:	f003 0301 	and.w	r3, r3, #1
 800b180:	2b00      	cmp	r3, #0
 800b182:	d001      	beq.n	800b188 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800b184:	f000 fd4a 	bl	800bc1c <tcp_slowtmr>
  }
}
 800b188:	bf00      	nop
 800b18a:	bd80      	pop	{r7, pc}
 800b18c:	2001aec9 	.word	0x2001aec9

0800b190 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800b190:	b580      	push	{r7, lr}
 800b192:	b084      	sub	sp, #16
 800b194:	af00      	add	r7, sp, #0
 800b196:	6078      	str	r0, [r7, #4]
 800b198:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d105      	bne.n	800b1ac <tcp_remove_listener+0x1c>
 800b1a0:	4b0d      	ldr	r3, [pc, #52]	; (800b1d8 <tcp_remove_listener+0x48>)
 800b1a2:	22ff      	movs	r2, #255	; 0xff
 800b1a4:	490d      	ldr	r1, [pc, #52]	; (800b1dc <tcp_remove_listener+0x4c>)
 800b1a6:	480e      	ldr	r0, [pc, #56]	; (800b1e0 <tcp_remove_listener+0x50>)
 800b1a8:	f00b f932 	bl	8016410 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	60fb      	str	r3, [r7, #12]
 800b1b0:	e00a      	b.n	800b1c8 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b1b6:	683a      	ldr	r2, [r7, #0]
 800b1b8:	429a      	cmp	r2, r3
 800b1ba:	d102      	bne.n	800b1c2 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	2200      	movs	r2, #0
 800b1c0:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	68db      	ldr	r3, [r3, #12]
 800b1c6:	60fb      	str	r3, [r7, #12]
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d1f1      	bne.n	800b1b2 <tcp_remove_listener+0x22>
    }
  }
}
 800b1ce:	bf00      	nop
 800b1d0:	bf00      	nop
 800b1d2:	3710      	adds	r7, #16
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	bd80      	pop	{r7, pc}
 800b1d8:	08018f24 	.word	0x08018f24
 800b1dc:	08018fac 	.word	0x08018fac
 800b1e0:	08018f68 	.word	0x08018f68

0800b1e4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800b1e4:	b580      	push	{r7, lr}
 800b1e6:	b084      	sub	sp, #16
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d106      	bne.n	800b200 <tcp_listen_closed+0x1c>
 800b1f2:	4b14      	ldr	r3, [pc, #80]	; (800b244 <tcp_listen_closed+0x60>)
 800b1f4:	f240 1211 	movw	r2, #273	; 0x111
 800b1f8:	4913      	ldr	r1, [pc, #76]	; (800b248 <tcp_listen_closed+0x64>)
 800b1fa:	4814      	ldr	r0, [pc, #80]	; (800b24c <tcp_listen_closed+0x68>)
 800b1fc:	f00b f908 	bl	8016410 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	7d1b      	ldrb	r3, [r3, #20]
 800b204:	2b01      	cmp	r3, #1
 800b206:	d006      	beq.n	800b216 <tcp_listen_closed+0x32>
 800b208:	4b0e      	ldr	r3, [pc, #56]	; (800b244 <tcp_listen_closed+0x60>)
 800b20a:	f44f 7289 	mov.w	r2, #274	; 0x112
 800b20e:	4910      	ldr	r1, [pc, #64]	; (800b250 <tcp_listen_closed+0x6c>)
 800b210:	480e      	ldr	r0, [pc, #56]	; (800b24c <tcp_listen_closed+0x68>)
 800b212:	f00b f8fd 	bl	8016410 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800b216:	2301      	movs	r3, #1
 800b218:	60fb      	str	r3, [r7, #12]
 800b21a:	e00b      	b.n	800b234 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800b21c:	4a0d      	ldr	r2, [pc, #52]	; (800b254 <tcp_listen_closed+0x70>)
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	6879      	ldr	r1, [r7, #4]
 800b228:	4618      	mov	r0, r3
 800b22a:	f7ff ffb1 	bl	800b190 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	3301      	adds	r3, #1
 800b232:	60fb      	str	r3, [r7, #12]
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	2b03      	cmp	r3, #3
 800b238:	d9f0      	bls.n	800b21c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800b23a:	bf00      	nop
 800b23c:	bf00      	nop
 800b23e:	3710      	adds	r7, #16
 800b240:	46bd      	mov	sp, r7
 800b242:	bd80      	pop	{r7, pc}
 800b244:	08018f24 	.word	0x08018f24
 800b248:	08018fd4 	.word	0x08018fd4
 800b24c:	08018f68 	.word	0x08018f68
 800b250:	08018fe0 	.word	0x08018fe0
 800b254:	0801b2f4 	.word	0x0801b2f4

0800b258 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800b258:	b5b0      	push	{r4, r5, r7, lr}
 800b25a:	b088      	sub	sp, #32
 800b25c:	af04      	add	r7, sp, #16
 800b25e:	6078      	str	r0, [r7, #4]
 800b260:	460b      	mov	r3, r1
 800b262:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d106      	bne.n	800b278 <tcp_close_shutdown+0x20>
 800b26a:	4b63      	ldr	r3, [pc, #396]	; (800b3f8 <tcp_close_shutdown+0x1a0>)
 800b26c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800b270:	4962      	ldr	r1, [pc, #392]	; (800b3fc <tcp_close_shutdown+0x1a4>)
 800b272:	4863      	ldr	r0, [pc, #396]	; (800b400 <tcp_close_shutdown+0x1a8>)
 800b274:	f00b f8cc 	bl	8016410 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800b278:	78fb      	ldrb	r3, [r7, #3]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d066      	beq.n	800b34c <tcp_close_shutdown+0xf4>
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	7d1b      	ldrb	r3, [r3, #20]
 800b282:	2b04      	cmp	r3, #4
 800b284:	d003      	beq.n	800b28e <tcp_close_shutdown+0x36>
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	7d1b      	ldrb	r3, [r3, #20]
 800b28a:	2b07      	cmp	r3, #7
 800b28c:	d15e      	bne.n	800b34c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b292:	2b00      	cmp	r3, #0
 800b294:	d104      	bne.n	800b2a0 <tcp_close_shutdown+0x48>
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b29a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800b29e:	d055      	beq.n	800b34c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	8b5b      	ldrh	r3, [r3, #26]
 800b2a4:	f003 0310 	and.w	r3, r3, #16
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d106      	bne.n	800b2ba <tcp_close_shutdown+0x62>
 800b2ac:	4b52      	ldr	r3, [pc, #328]	; (800b3f8 <tcp_close_shutdown+0x1a0>)
 800b2ae:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800b2b2:	4954      	ldr	r1, [pc, #336]	; (800b404 <tcp_close_shutdown+0x1ac>)
 800b2b4:	4852      	ldr	r0, [pc, #328]	; (800b400 <tcp_close_shutdown+0x1a8>)
 800b2b6:	f00b f8ab 	bl	8016410 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800b2c2:	687d      	ldr	r5, [r7, #4]
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	3304      	adds	r3, #4
 800b2c8:	687a      	ldr	r2, [r7, #4]
 800b2ca:	8ad2      	ldrh	r2, [r2, #22]
 800b2cc:	6879      	ldr	r1, [r7, #4]
 800b2ce:	8b09      	ldrh	r1, [r1, #24]
 800b2d0:	9102      	str	r1, [sp, #8]
 800b2d2:	9201      	str	r2, [sp, #4]
 800b2d4:	9300      	str	r3, [sp, #0]
 800b2d6:	462b      	mov	r3, r5
 800b2d8:	4622      	mov	r2, r4
 800b2da:	4601      	mov	r1, r0
 800b2dc:	6878      	ldr	r0, [r7, #4]
 800b2de:	f005 fd95 	bl	8010e0c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800b2e2:	6878      	ldr	r0, [r7, #4]
 800b2e4:	f001 fb72 	bl	800c9cc <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800b2e8:	4b47      	ldr	r3, [pc, #284]	; (800b408 <tcp_close_shutdown+0x1b0>)
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	687a      	ldr	r2, [r7, #4]
 800b2ee:	429a      	cmp	r2, r3
 800b2f0:	d105      	bne.n	800b2fe <tcp_close_shutdown+0xa6>
 800b2f2:	4b45      	ldr	r3, [pc, #276]	; (800b408 <tcp_close_shutdown+0x1b0>)
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	68db      	ldr	r3, [r3, #12]
 800b2f8:	4a43      	ldr	r2, [pc, #268]	; (800b408 <tcp_close_shutdown+0x1b0>)
 800b2fa:	6013      	str	r3, [r2, #0]
 800b2fc:	e013      	b.n	800b326 <tcp_close_shutdown+0xce>
 800b2fe:	4b42      	ldr	r3, [pc, #264]	; (800b408 <tcp_close_shutdown+0x1b0>)
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	60fb      	str	r3, [r7, #12]
 800b304:	e00c      	b.n	800b320 <tcp_close_shutdown+0xc8>
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	68db      	ldr	r3, [r3, #12]
 800b30a:	687a      	ldr	r2, [r7, #4]
 800b30c:	429a      	cmp	r2, r3
 800b30e:	d104      	bne.n	800b31a <tcp_close_shutdown+0xc2>
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	68da      	ldr	r2, [r3, #12]
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	60da      	str	r2, [r3, #12]
 800b318:	e005      	b.n	800b326 <tcp_close_shutdown+0xce>
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	68db      	ldr	r3, [r3, #12]
 800b31e:	60fb      	str	r3, [r7, #12]
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	2b00      	cmp	r3, #0
 800b324:	d1ef      	bne.n	800b306 <tcp_close_shutdown+0xae>
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	2200      	movs	r2, #0
 800b32a:	60da      	str	r2, [r3, #12]
 800b32c:	4b37      	ldr	r3, [pc, #220]	; (800b40c <tcp_close_shutdown+0x1b4>)
 800b32e:	2201      	movs	r2, #1
 800b330:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800b332:	4b37      	ldr	r3, [pc, #220]	; (800b410 <tcp_close_shutdown+0x1b8>)
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	687a      	ldr	r2, [r7, #4]
 800b338:	429a      	cmp	r2, r3
 800b33a:	d102      	bne.n	800b342 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800b33c:	f004 f80a 	bl	800f354 <tcp_trigger_input_pcb_close>
 800b340:	e002      	b.n	800b348 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800b342:	6878      	ldr	r0, [r7, #4]
 800b344:	f7ff fed6 	bl	800b0f4 <tcp_free>
      }
      return ERR_OK;
 800b348:	2300      	movs	r3, #0
 800b34a:	e050      	b.n	800b3ee <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	7d1b      	ldrb	r3, [r3, #20]
 800b350:	2b02      	cmp	r3, #2
 800b352:	d03b      	beq.n	800b3cc <tcp_close_shutdown+0x174>
 800b354:	2b02      	cmp	r3, #2
 800b356:	dc44      	bgt.n	800b3e2 <tcp_close_shutdown+0x18a>
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d002      	beq.n	800b362 <tcp_close_shutdown+0x10a>
 800b35c:	2b01      	cmp	r3, #1
 800b35e:	d02a      	beq.n	800b3b6 <tcp_close_shutdown+0x15e>
 800b360:	e03f      	b.n	800b3e2 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	8adb      	ldrh	r3, [r3, #22]
 800b366:	2b00      	cmp	r3, #0
 800b368:	d021      	beq.n	800b3ae <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800b36a:	4b2a      	ldr	r3, [pc, #168]	; (800b414 <tcp_close_shutdown+0x1bc>)
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	687a      	ldr	r2, [r7, #4]
 800b370:	429a      	cmp	r2, r3
 800b372:	d105      	bne.n	800b380 <tcp_close_shutdown+0x128>
 800b374:	4b27      	ldr	r3, [pc, #156]	; (800b414 <tcp_close_shutdown+0x1bc>)
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	68db      	ldr	r3, [r3, #12]
 800b37a:	4a26      	ldr	r2, [pc, #152]	; (800b414 <tcp_close_shutdown+0x1bc>)
 800b37c:	6013      	str	r3, [r2, #0]
 800b37e:	e013      	b.n	800b3a8 <tcp_close_shutdown+0x150>
 800b380:	4b24      	ldr	r3, [pc, #144]	; (800b414 <tcp_close_shutdown+0x1bc>)
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	60bb      	str	r3, [r7, #8]
 800b386:	e00c      	b.n	800b3a2 <tcp_close_shutdown+0x14a>
 800b388:	68bb      	ldr	r3, [r7, #8]
 800b38a:	68db      	ldr	r3, [r3, #12]
 800b38c:	687a      	ldr	r2, [r7, #4]
 800b38e:	429a      	cmp	r2, r3
 800b390:	d104      	bne.n	800b39c <tcp_close_shutdown+0x144>
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	68da      	ldr	r2, [r3, #12]
 800b396:	68bb      	ldr	r3, [r7, #8]
 800b398:	60da      	str	r2, [r3, #12]
 800b39a:	e005      	b.n	800b3a8 <tcp_close_shutdown+0x150>
 800b39c:	68bb      	ldr	r3, [r7, #8]
 800b39e:	68db      	ldr	r3, [r3, #12]
 800b3a0:	60bb      	str	r3, [r7, #8]
 800b3a2:	68bb      	ldr	r3, [r7, #8]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d1ef      	bne.n	800b388 <tcp_close_shutdown+0x130>
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800b3ae:	6878      	ldr	r0, [r7, #4]
 800b3b0:	f7ff fea0 	bl	800b0f4 <tcp_free>
      break;
 800b3b4:	e01a      	b.n	800b3ec <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800b3b6:	6878      	ldr	r0, [r7, #4]
 800b3b8:	f7ff ff14 	bl	800b1e4 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800b3bc:	6879      	ldr	r1, [r7, #4]
 800b3be:	4816      	ldr	r0, [pc, #88]	; (800b418 <tcp_close_shutdown+0x1c0>)
 800b3c0:	f001 fb54 	bl	800ca6c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800b3c4:	6878      	ldr	r0, [r7, #4]
 800b3c6:	f7ff feb1 	bl	800b12c <tcp_free_listen>
      break;
 800b3ca:	e00f      	b.n	800b3ec <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800b3cc:	6879      	ldr	r1, [r7, #4]
 800b3ce:	480e      	ldr	r0, [pc, #56]	; (800b408 <tcp_close_shutdown+0x1b0>)
 800b3d0:	f001 fb4c 	bl	800ca6c <tcp_pcb_remove>
 800b3d4:	4b0d      	ldr	r3, [pc, #52]	; (800b40c <tcp_close_shutdown+0x1b4>)
 800b3d6:	2201      	movs	r2, #1
 800b3d8:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800b3da:	6878      	ldr	r0, [r7, #4]
 800b3dc:	f7ff fe8a 	bl	800b0f4 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800b3e0:	e004      	b.n	800b3ec <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800b3e2:	6878      	ldr	r0, [r7, #4]
 800b3e4:	f000 f81a 	bl	800b41c <tcp_close_shutdown_fin>
 800b3e8:	4603      	mov	r3, r0
 800b3ea:	e000      	b.n	800b3ee <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800b3ec:	2300      	movs	r3, #0
}
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	3710      	adds	r7, #16
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	bdb0      	pop	{r4, r5, r7, pc}
 800b3f6:	bf00      	nop
 800b3f8:	08018f24 	.word	0x08018f24
 800b3fc:	08018ff8 	.word	0x08018ff8
 800b400:	08018f68 	.word	0x08018f68
 800b404:	08019018 	.word	0x08019018
 800b408:	2001aec0 	.word	0x2001aec0
 800b40c:	2001aec8 	.word	0x2001aec8
 800b410:	2001af00 	.word	0x2001af00
 800b414:	2001aeb8 	.word	0x2001aeb8
 800b418:	2001aebc 	.word	0x2001aebc

0800b41c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800b41c:	b580      	push	{r7, lr}
 800b41e:	b084      	sub	sp, #16
 800b420:	af00      	add	r7, sp, #0
 800b422:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d106      	bne.n	800b438 <tcp_close_shutdown_fin+0x1c>
 800b42a:	4b2e      	ldr	r3, [pc, #184]	; (800b4e4 <tcp_close_shutdown_fin+0xc8>)
 800b42c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800b430:	492d      	ldr	r1, [pc, #180]	; (800b4e8 <tcp_close_shutdown_fin+0xcc>)
 800b432:	482e      	ldr	r0, [pc, #184]	; (800b4ec <tcp_close_shutdown_fin+0xd0>)
 800b434:	f00a ffec 	bl	8016410 <iprintf>

  switch (pcb->state) {
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	7d1b      	ldrb	r3, [r3, #20]
 800b43c:	2b07      	cmp	r3, #7
 800b43e:	d020      	beq.n	800b482 <tcp_close_shutdown_fin+0x66>
 800b440:	2b07      	cmp	r3, #7
 800b442:	dc2b      	bgt.n	800b49c <tcp_close_shutdown_fin+0x80>
 800b444:	2b03      	cmp	r3, #3
 800b446:	d002      	beq.n	800b44e <tcp_close_shutdown_fin+0x32>
 800b448:	2b04      	cmp	r3, #4
 800b44a:	d00d      	beq.n	800b468 <tcp_close_shutdown_fin+0x4c>
 800b44c:	e026      	b.n	800b49c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800b44e:	6878      	ldr	r0, [r7, #4]
 800b450:	f004 fdea 	bl	8010028 <tcp_send_fin>
 800b454:	4603      	mov	r3, r0
 800b456:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800b458:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d11f      	bne.n	800b4a0 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	2205      	movs	r2, #5
 800b464:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b466:	e01b      	b.n	800b4a0 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800b468:	6878      	ldr	r0, [r7, #4]
 800b46a:	f004 fddd 	bl	8010028 <tcp_send_fin>
 800b46e:	4603      	mov	r3, r0
 800b470:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800b472:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d114      	bne.n	800b4a4 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	2205      	movs	r2, #5
 800b47e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b480:	e010      	b.n	800b4a4 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800b482:	6878      	ldr	r0, [r7, #4]
 800b484:	f004 fdd0 	bl	8010028 <tcp_send_fin>
 800b488:	4603      	mov	r3, r0
 800b48a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800b48c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d109      	bne.n	800b4a8 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	2209      	movs	r2, #9
 800b498:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b49a:	e005      	b.n	800b4a8 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800b49c:	2300      	movs	r3, #0
 800b49e:	e01c      	b.n	800b4da <tcp_close_shutdown_fin+0xbe>
      break;
 800b4a0:	bf00      	nop
 800b4a2:	e002      	b.n	800b4aa <tcp_close_shutdown_fin+0x8e>
      break;
 800b4a4:	bf00      	nop
 800b4a6:	e000      	b.n	800b4aa <tcp_close_shutdown_fin+0x8e>
      break;
 800b4a8:	bf00      	nop
  }

  if (err == ERR_OK) {
 800b4aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d103      	bne.n	800b4ba <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800b4b2:	6878      	ldr	r0, [r7, #4]
 800b4b4:	f004 fef6 	bl	80102a4 <tcp_output>
 800b4b8:	e00d      	b.n	800b4d6 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800b4ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b4be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4c2:	d108      	bne.n	800b4d6 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	8b5b      	ldrh	r3, [r3, #26]
 800b4c8:	f043 0308 	orr.w	r3, r3, #8
 800b4cc:	b29a      	uxth	r2, r3
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	e001      	b.n	800b4da <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800b4d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b4da:	4618      	mov	r0, r3
 800b4dc:	3710      	adds	r7, #16
 800b4de:	46bd      	mov	sp, r7
 800b4e0:	bd80      	pop	{r7, pc}
 800b4e2:	bf00      	nop
 800b4e4:	08018f24 	.word	0x08018f24
 800b4e8:	08018fd4 	.word	0x08018fd4
 800b4ec:	08018f68 	.word	0x08018f68

0800b4f0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b082      	sub	sp, #8
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d109      	bne.n	800b512 <tcp_close+0x22>
 800b4fe:	4b0f      	ldr	r3, [pc, #60]	; (800b53c <tcp_close+0x4c>)
 800b500:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800b504:	490e      	ldr	r1, [pc, #56]	; (800b540 <tcp_close+0x50>)
 800b506:	480f      	ldr	r0, [pc, #60]	; (800b544 <tcp_close+0x54>)
 800b508:	f00a ff82 	bl	8016410 <iprintf>
 800b50c:	f06f 030f 	mvn.w	r3, #15
 800b510:	e00f      	b.n	800b532 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	7d1b      	ldrb	r3, [r3, #20]
 800b516:	2b01      	cmp	r3, #1
 800b518:	d006      	beq.n	800b528 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	8b5b      	ldrh	r3, [r3, #26]
 800b51e:	f043 0310 	orr.w	r3, r3, #16
 800b522:	b29a      	uxth	r2, r3
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800b528:	2101      	movs	r1, #1
 800b52a:	6878      	ldr	r0, [r7, #4]
 800b52c:	f7ff fe94 	bl	800b258 <tcp_close_shutdown>
 800b530:	4603      	mov	r3, r0
}
 800b532:	4618      	mov	r0, r3
 800b534:	3708      	adds	r7, #8
 800b536:	46bd      	mov	sp, r7
 800b538:	bd80      	pop	{r7, pc}
 800b53a:	bf00      	nop
 800b53c:	08018f24 	.word	0x08018f24
 800b540:	08019034 	.word	0x08019034
 800b544:	08018f68 	.word	0x08018f68

0800b548 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800b548:	b580      	push	{r7, lr}
 800b54a:	b08e      	sub	sp, #56	; 0x38
 800b54c:	af04      	add	r7, sp, #16
 800b54e:	6078      	str	r0, [r7, #4]
 800b550:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d107      	bne.n	800b568 <tcp_abandon+0x20>
 800b558:	4b52      	ldr	r3, [pc, #328]	; (800b6a4 <tcp_abandon+0x15c>)
 800b55a:	f240 223d 	movw	r2, #573	; 0x23d
 800b55e:	4952      	ldr	r1, [pc, #328]	; (800b6a8 <tcp_abandon+0x160>)
 800b560:	4852      	ldr	r0, [pc, #328]	; (800b6ac <tcp_abandon+0x164>)
 800b562:	f00a ff55 	bl	8016410 <iprintf>
 800b566:	e099      	b.n	800b69c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	7d1b      	ldrb	r3, [r3, #20]
 800b56c:	2b01      	cmp	r3, #1
 800b56e:	d106      	bne.n	800b57e <tcp_abandon+0x36>
 800b570:	4b4c      	ldr	r3, [pc, #304]	; (800b6a4 <tcp_abandon+0x15c>)
 800b572:	f44f 7210 	mov.w	r2, #576	; 0x240
 800b576:	494e      	ldr	r1, [pc, #312]	; (800b6b0 <tcp_abandon+0x168>)
 800b578:	484c      	ldr	r0, [pc, #304]	; (800b6ac <tcp_abandon+0x164>)
 800b57a:	f00a ff49 	bl	8016410 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	7d1b      	ldrb	r3, [r3, #20]
 800b582:	2b0a      	cmp	r3, #10
 800b584:	d107      	bne.n	800b596 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800b586:	6879      	ldr	r1, [r7, #4]
 800b588:	484a      	ldr	r0, [pc, #296]	; (800b6b4 <tcp_abandon+0x16c>)
 800b58a:	f001 fa6f 	bl	800ca6c <tcp_pcb_remove>
    tcp_free(pcb);
 800b58e:	6878      	ldr	r0, [r7, #4]
 800b590:	f7ff fdb0 	bl	800b0f4 <tcp_free>
 800b594:	e082      	b.n	800b69c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800b596:	2300      	movs	r3, #0
 800b598:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800b59a:	2300      	movs	r3, #0
 800b59c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b5a2:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5a8:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b5b0:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	691b      	ldr	r3, [r3, #16]
 800b5b6:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	7d1b      	ldrb	r3, [r3, #20]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d126      	bne.n	800b60e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	8adb      	ldrh	r3, [r3, #22]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d02e      	beq.n	800b626 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800b5c8:	4b3b      	ldr	r3, [pc, #236]	; (800b6b8 <tcp_abandon+0x170>)
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	687a      	ldr	r2, [r7, #4]
 800b5ce:	429a      	cmp	r2, r3
 800b5d0:	d105      	bne.n	800b5de <tcp_abandon+0x96>
 800b5d2:	4b39      	ldr	r3, [pc, #228]	; (800b6b8 <tcp_abandon+0x170>)
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	68db      	ldr	r3, [r3, #12]
 800b5d8:	4a37      	ldr	r2, [pc, #220]	; (800b6b8 <tcp_abandon+0x170>)
 800b5da:	6013      	str	r3, [r2, #0]
 800b5dc:	e013      	b.n	800b606 <tcp_abandon+0xbe>
 800b5de:	4b36      	ldr	r3, [pc, #216]	; (800b6b8 <tcp_abandon+0x170>)
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	61fb      	str	r3, [r7, #28]
 800b5e4:	e00c      	b.n	800b600 <tcp_abandon+0xb8>
 800b5e6:	69fb      	ldr	r3, [r7, #28]
 800b5e8:	68db      	ldr	r3, [r3, #12]
 800b5ea:	687a      	ldr	r2, [r7, #4]
 800b5ec:	429a      	cmp	r2, r3
 800b5ee:	d104      	bne.n	800b5fa <tcp_abandon+0xb2>
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	68da      	ldr	r2, [r3, #12]
 800b5f4:	69fb      	ldr	r3, [r7, #28]
 800b5f6:	60da      	str	r2, [r3, #12]
 800b5f8:	e005      	b.n	800b606 <tcp_abandon+0xbe>
 800b5fa:	69fb      	ldr	r3, [r7, #28]
 800b5fc:	68db      	ldr	r3, [r3, #12]
 800b5fe:	61fb      	str	r3, [r7, #28]
 800b600:	69fb      	ldr	r3, [r7, #28]
 800b602:	2b00      	cmp	r3, #0
 800b604:	d1ef      	bne.n	800b5e6 <tcp_abandon+0x9e>
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	2200      	movs	r2, #0
 800b60a:	60da      	str	r2, [r3, #12]
 800b60c:	e00b      	b.n	800b626 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800b60e:	683b      	ldr	r3, [r7, #0]
 800b610:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	8adb      	ldrh	r3, [r3, #22]
 800b616:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800b618:	6879      	ldr	r1, [r7, #4]
 800b61a:	4828      	ldr	r0, [pc, #160]	; (800b6bc <tcp_abandon+0x174>)
 800b61c:	f001 fa26 	bl	800ca6c <tcp_pcb_remove>
 800b620:	4b27      	ldr	r3, [pc, #156]	; (800b6c0 <tcp_abandon+0x178>)
 800b622:	2201      	movs	r2, #1
 800b624:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d004      	beq.n	800b638 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b632:	4618      	mov	r0, r3
 800b634:	f000 ff12 	bl	800c45c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d004      	beq.n	800b64a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b644:	4618      	mov	r0, r3
 800b646:	f000 ff09 	bl	800c45c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d004      	beq.n	800b65c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b656:	4618      	mov	r0, r3
 800b658:	f000 ff00 	bl	800c45c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800b65c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d00e      	beq.n	800b680 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800b662:	6879      	ldr	r1, [r7, #4]
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	3304      	adds	r3, #4
 800b668:	687a      	ldr	r2, [r7, #4]
 800b66a:	8b12      	ldrh	r2, [r2, #24]
 800b66c:	9202      	str	r2, [sp, #8]
 800b66e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800b670:	9201      	str	r2, [sp, #4]
 800b672:	9300      	str	r3, [sp, #0]
 800b674:	460b      	mov	r3, r1
 800b676:	697a      	ldr	r2, [r7, #20]
 800b678:	69b9      	ldr	r1, [r7, #24]
 800b67a:	6878      	ldr	r0, [r7, #4]
 800b67c:	f005 fbc6 	bl	8010e0c <tcp_rst>
    }
    last_state = pcb->state;
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	7d1b      	ldrb	r3, [r3, #20]
 800b684:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800b686:	6878      	ldr	r0, [r7, #4]
 800b688:	f7ff fd34 	bl	800b0f4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800b68c:	693b      	ldr	r3, [r7, #16]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d004      	beq.n	800b69c <tcp_abandon+0x154>
 800b692:	693b      	ldr	r3, [r7, #16]
 800b694:	f06f 010c 	mvn.w	r1, #12
 800b698:	68f8      	ldr	r0, [r7, #12]
 800b69a:	4798      	blx	r3
  }
}
 800b69c:	3728      	adds	r7, #40	; 0x28
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	bd80      	pop	{r7, pc}
 800b6a2:	bf00      	nop
 800b6a4:	08018f24 	.word	0x08018f24
 800b6a8:	08019068 	.word	0x08019068
 800b6ac:	08018f68 	.word	0x08018f68
 800b6b0:	08019084 	.word	0x08019084
 800b6b4:	2001aec4 	.word	0x2001aec4
 800b6b8:	2001aeb8 	.word	0x2001aeb8
 800b6bc:	2001aec0 	.word	0x2001aec0
 800b6c0:	2001aec8 	.word	0x2001aec8

0800b6c4 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	b082      	sub	sp, #8
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800b6cc:	2101      	movs	r1, #1
 800b6ce:	6878      	ldr	r0, [r7, #4]
 800b6d0:	f7ff ff3a 	bl	800b548 <tcp_abandon>
}
 800b6d4:	bf00      	nop
 800b6d6:	3708      	adds	r7, #8
 800b6d8:	46bd      	mov	sp, r7
 800b6da:	bd80      	pop	{r7, pc}

0800b6dc <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	b088      	sub	sp, #32
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	60f8      	str	r0, [r7, #12]
 800b6e4:	60b9      	str	r1, [r7, #8]
 800b6e6:	4613      	mov	r3, r2
 800b6e8:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800b6ea:	2304      	movs	r3, #4
 800b6ec:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800b6ee:	68bb      	ldr	r3, [r7, #8]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d101      	bne.n	800b6f8 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800b6f4:	4b3e      	ldr	r3, [pc, #248]	; (800b7f0 <tcp_bind+0x114>)
 800b6f6:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d109      	bne.n	800b712 <tcp_bind+0x36>
 800b6fe:	4b3d      	ldr	r3, [pc, #244]	; (800b7f4 <tcp_bind+0x118>)
 800b700:	f240 22a9 	movw	r2, #681	; 0x2a9
 800b704:	493c      	ldr	r1, [pc, #240]	; (800b7f8 <tcp_bind+0x11c>)
 800b706:	483d      	ldr	r0, [pc, #244]	; (800b7fc <tcp_bind+0x120>)
 800b708:	f00a fe82 	bl	8016410 <iprintf>
 800b70c:	f06f 030f 	mvn.w	r3, #15
 800b710:	e06a      	b.n	800b7e8 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	7d1b      	ldrb	r3, [r3, #20]
 800b716:	2b00      	cmp	r3, #0
 800b718:	d009      	beq.n	800b72e <tcp_bind+0x52>
 800b71a:	4b36      	ldr	r3, [pc, #216]	; (800b7f4 <tcp_bind+0x118>)
 800b71c:	f240 22ab 	movw	r2, #683	; 0x2ab
 800b720:	4937      	ldr	r1, [pc, #220]	; (800b800 <tcp_bind+0x124>)
 800b722:	4836      	ldr	r0, [pc, #216]	; (800b7fc <tcp_bind+0x120>)
 800b724:	f00a fe74 	bl	8016410 <iprintf>
 800b728:	f06f 0305 	mvn.w	r3, #5
 800b72c:	e05c      	b.n	800b7e8 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800b72e:	88fb      	ldrh	r3, [r7, #6]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d109      	bne.n	800b748 <tcp_bind+0x6c>
    port = tcp_new_port();
 800b734:	f000 f914 	bl	800b960 <tcp_new_port>
 800b738:	4603      	mov	r3, r0
 800b73a:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800b73c:	88fb      	ldrh	r3, [r7, #6]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d135      	bne.n	800b7ae <tcp_bind+0xd2>
      return ERR_BUF;
 800b742:	f06f 0301 	mvn.w	r3, #1
 800b746:	e04f      	b.n	800b7e8 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800b748:	2300      	movs	r3, #0
 800b74a:	61fb      	str	r3, [r7, #28]
 800b74c:	e02b      	b.n	800b7a6 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800b74e:	4a2d      	ldr	r2, [pc, #180]	; (800b804 <tcp_bind+0x128>)
 800b750:	69fb      	ldr	r3, [r7, #28]
 800b752:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	61bb      	str	r3, [r7, #24]
 800b75a:	e01e      	b.n	800b79a <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800b75c:	69bb      	ldr	r3, [r7, #24]
 800b75e:	8adb      	ldrh	r3, [r3, #22]
 800b760:	88fa      	ldrh	r2, [r7, #6]
 800b762:	429a      	cmp	r2, r3
 800b764:	d116      	bne.n	800b794 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800b766:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d010      	beq.n	800b78e <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800b76c:	69bb      	ldr	r3, [r7, #24]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d00c      	beq.n	800b78e <tcp_bind+0xb2>
 800b774:	68bb      	ldr	r3, [r7, #8]
 800b776:	2b00      	cmp	r3, #0
 800b778:	d009      	beq.n	800b78e <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800b77a:	68bb      	ldr	r3, [r7, #8]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d005      	beq.n	800b78e <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800b782:	69bb      	ldr	r3, [r7, #24]
 800b784:	681a      	ldr	r2, [r3, #0]
 800b786:	68bb      	ldr	r3, [r7, #8]
 800b788:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800b78a:	429a      	cmp	r2, r3
 800b78c:	d102      	bne.n	800b794 <tcp_bind+0xb8>
              return ERR_USE;
 800b78e:	f06f 0307 	mvn.w	r3, #7
 800b792:	e029      	b.n	800b7e8 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800b794:	69bb      	ldr	r3, [r7, #24]
 800b796:	68db      	ldr	r3, [r3, #12]
 800b798:	61bb      	str	r3, [r7, #24]
 800b79a:	69bb      	ldr	r3, [r7, #24]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d1dd      	bne.n	800b75c <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800b7a0:	69fb      	ldr	r3, [r7, #28]
 800b7a2:	3301      	adds	r3, #1
 800b7a4:	61fb      	str	r3, [r7, #28]
 800b7a6:	69fa      	ldr	r2, [r7, #28]
 800b7a8:	697b      	ldr	r3, [r7, #20]
 800b7aa:	429a      	cmp	r2, r3
 800b7ac:	dbcf      	blt.n	800b74e <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800b7ae:	68bb      	ldr	r3, [r7, #8]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d00c      	beq.n	800b7ce <tcp_bind+0xf2>
 800b7b4:	68bb      	ldr	r3, [r7, #8]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d008      	beq.n	800b7ce <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800b7bc:	68bb      	ldr	r3, [r7, #8]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d002      	beq.n	800b7c8 <tcp_bind+0xec>
 800b7c2:	68bb      	ldr	r3, [r7, #8]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	e000      	b.n	800b7ca <tcp_bind+0xee>
 800b7c8:	2300      	movs	r3, #0
 800b7ca:	68fa      	ldr	r2, [r7, #12]
 800b7cc:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	88fa      	ldrh	r2, [r7, #6]
 800b7d2:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800b7d4:	4b0c      	ldr	r3, [pc, #48]	; (800b808 <tcp_bind+0x12c>)
 800b7d6:	681a      	ldr	r2, [r3, #0]
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	60da      	str	r2, [r3, #12]
 800b7dc:	4a0a      	ldr	r2, [pc, #40]	; (800b808 <tcp_bind+0x12c>)
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	6013      	str	r3, [r2, #0]
 800b7e2:	f005 fcd5 	bl	8011190 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800b7e6:	2300      	movs	r3, #0
}
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	3720      	adds	r7, #32
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	bd80      	pop	{r7, pc}
 800b7f0:	0801b32c 	.word	0x0801b32c
 800b7f4:	08018f24 	.word	0x08018f24
 800b7f8:	080190b8 	.word	0x080190b8
 800b7fc:	08018f68 	.word	0x08018f68
 800b800:	080190d0 	.word	0x080190d0
 800b804:	0801b2f4 	.word	0x0801b2f4
 800b808:	2001aeb8 	.word	0x2001aeb8

0800b80c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800b80c:	b580      	push	{r7, lr}
 800b80e:	b084      	sub	sp, #16
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d106      	bne.n	800b828 <tcp_update_rcv_ann_wnd+0x1c>
 800b81a:	4b25      	ldr	r3, [pc, #148]	; (800b8b0 <tcp_update_rcv_ann_wnd+0xa4>)
 800b81c:	f240 32a6 	movw	r2, #934	; 0x3a6
 800b820:	4924      	ldr	r1, [pc, #144]	; (800b8b4 <tcp_update_rcv_ann_wnd+0xa8>)
 800b822:	4825      	ldr	r0, [pc, #148]	; (800b8b8 <tcp_update_rcv_ann_wnd+0xac>)
 800b824:	f00a fdf4 	bl	8016410 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b82c:	687a      	ldr	r2, [r7, #4]
 800b82e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800b830:	4413      	add	r3, r2
 800b832:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b838:	687a      	ldr	r2, [r7, #4]
 800b83a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800b83c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800b840:	bf28      	it	cs
 800b842:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800b846:	b292      	uxth	r2, r2
 800b848:	4413      	add	r3, r2
 800b84a:	68fa      	ldr	r2, [r7, #12]
 800b84c:	1ad3      	subs	r3, r2, r3
 800b84e:	2b00      	cmp	r3, #0
 800b850:	db08      	blt.n	800b864 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b85e:	68fa      	ldr	r2, [r7, #12]
 800b860:	1ad3      	subs	r3, r2, r3
 800b862:	e020      	b.n	800b8a6 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b86c:	1ad3      	subs	r3, r2, r3
 800b86e:	2b00      	cmp	r3, #0
 800b870:	dd03      	ble.n	800b87a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	2200      	movs	r2, #0
 800b876:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b878:	e014      	b.n	800b8a4 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b882:	1ad3      	subs	r3, r2, r3
 800b884:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800b886:	68bb      	ldr	r3, [r7, #8]
 800b888:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b88c:	d306      	bcc.n	800b89c <tcp_update_rcv_ann_wnd+0x90>
 800b88e:	4b08      	ldr	r3, [pc, #32]	; (800b8b0 <tcp_update_rcv_ann_wnd+0xa4>)
 800b890:	f240 32b6 	movw	r2, #950	; 0x3b6
 800b894:	4909      	ldr	r1, [pc, #36]	; (800b8bc <tcp_update_rcv_ann_wnd+0xb0>)
 800b896:	4808      	ldr	r0, [pc, #32]	; (800b8b8 <tcp_update_rcv_ann_wnd+0xac>)
 800b898:	f00a fdba 	bl	8016410 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800b89c:	68bb      	ldr	r3, [r7, #8]
 800b89e:	b29a      	uxth	r2, r3
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800b8a4:	2300      	movs	r3, #0
  }
}
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	3710      	adds	r7, #16
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	bd80      	pop	{r7, pc}
 800b8ae:	bf00      	nop
 800b8b0:	08018f24 	.word	0x08018f24
 800b8b4:	08019180 	.word	0x08019180
 800b8b8:	08018f68 	.word	0x08018f68
 800b8bc:	080191a4 	.word	0x080191a4

0800b8c0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	b084      	sub	sp, #16
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
 800b8c8:	460b      	mov	r3, r1
 800b8ca:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d107      	bne.n	800b8e2 <tcp_recved+0x22>
 800b8d2:	4b1f      	ldr	r3, [pc, #124]	; (800b950 <tcp_recved+0x90>)
 800b8d4:	f240 32cf 	movw	r2, #975	; 0x3cf
 800b8d8:	491e      	ldr	r1, [pc, #120]	; (800b954 <tcp_recved+0x94>)
 800b8da:	481f      	ldr	r0, [pc, #124]	; (800b958 <tcp_recved+0x98>)
 800b8dc:	f00a fd98 	bl	8016410 <iprintf>
 800b8e0:	e032      	b.n	800b948 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	7d1b      	ldrb	r3, [r3, #20]
 800b8e6:	2b01      	cmp	r3, #1
 800b8e8:	d106      	bne.n	800b8f8 <tcp_recved+0x38>
 800b8ea:	4b19      	ldr	r3, [pc, #100]	; (800b950 <tcp_recved+0x90>)
 800b8ec:	f240 32d2 	movw	r2, #978	; 0x3d2
 800b8f0:	491a      	ldr	r1, [pc, #104]	; (800b95c <tcp_recved+0x9c>)
 800b8f2:	4819      	ldr	r0, [pc, #100]	; (800b958 <tcp_recved+0x98>)
 800b8f4:	f00a fd8c 	bl	8016410 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b8fc:	887b      	ldrh	r3, [r7, #2]
 800b8fe:	4413      	add	r3, r2
 800b900:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800b902:	89fb      	ldrh	r3, [r7, #14]
 800b904:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800b908:	d804      	bhi.n	800b914 <tcp_recved+0x54>
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b90e:	89fa      	ldrh	r2, [r7, #14]
 800b910:	429a      	cmp	r2, r3
 800b912:	d204      	bcs.n	800b91e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800b91a:	851a      	strh	r2, [r3, #40]	; 0x28
 800b91c:	e002      	b.n	800b924 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	89fa      	ldrh	r2, [r7, #14]
 800b922:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800b924:	6878      	ldr	r0, [r7, #4]
 800b926:	f7ff ff71 	bl	800b80c <tcp_update_rcv_ann_wnd>
 800b92a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800b92c:	68bb      	ldr	r3, [r7, #8]
 800b92e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800b932:	d309      	bcc.n	800b948 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	8b5b      	ldrh	r3, [r3, #26]
 800b938:	f043 0302 	orr.w	r3, r3, #2
 800b93c:	b29a      	uxth	r2, r3
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800b942:	6878      	ldr	r0, [r7, #4]
 800b944:	f004 fcae 	bl	80102a4 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800b948:	3710      	adds	r7, #16
 800b94a:	46bd      	mov	sp, r7
 800b94c:	bd80      	pop	{r7, pc}
 800b94e:	bf00      	nop
 800b950:	08018f24 	.word	0x08018f24
 800b954:	080191c0 	.word	0x080191c0
 800b958:	08018f68 	.word	0x08018f68
 800b95c:	080191d8 	.word	0x080191d8

0800b960 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800b960:	b480      	push	{r7}
 800b962:	b083      	sub	sp, #12
 800b964:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800b966:	2300      	movs	r3, #0
 800b968:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800b96a:	4b1e      	ldr	r3, [pc, #120]	; (800b9e4 <tcp_new_port+0x84>)
 800b96c:	881b      	ldrh	r3, [r3, #0]
 800b96e:	3301      	adds	r3, #1
 800b970:	b29a      	uxth	r2, r3
 800b972:	4b1c      	ldr	r3, [pc, #112]	; (800b9e4 <tcp_new_port+0x84>)
 800b974:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800b976:	4b1b      	ldr	r3, [pc, #108]	; (800b9e4 <tcp_new_port+0x84>)
 800b978:	881b      	ldrh	r3, [r3, #0]
 800b97a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b97e:	4293      	cmp	r3, r2
 800b980:	d103      	bne.n	800b98a <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800b982:	4b18      	ldr	r3, [pc, #96]	; (800b9e4 <tcp_new_port+0x84>)
 800b984:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800b988:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800b98a:	2300      	movs	r3, #0
 800b98c:	71fb      	strb	r3, [r7, #7]
 800b98e:	e01e      	b.n	800b9ce <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800b990:	79fb      	ldrb	r3, [r7, #7]
 800b992:	4a15      	ldr	r2, [pc, #84]	; (800b9e8 <tcp_new_port+0x88>)
 800b994:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	603b      	str	r3, [r7, #0]
 800b99c:	e011      	b.n	800b9c2 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800b99e:	683b      	ldr	r3, [r7, #0]
 800b9a0:	8ada      	ldrh	r2, [r3, #22]
 800b9a2:	4b10      	ldr	r3, [pc, #64]	; (800b9e4 <tcp_new_port+0x84>)
 800b9a4:	881b      	ldrh	r3, [r3, #0]
 800b9a6:	429a      	cmp	r2, r3
 800b9a8:	d108      	bne.n	800b9bc <tcp_new_port+0x5c>
        n++;
 800b9aa:	88bb      	ldrh	r3, [r7, #4]
 800b9ac:	3301      	adds	r3, #1
 800b9ae:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800b9b0:	88bb      	ldrh	r3, [r7, #4]
 800b9b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b9b6:	d3d8      	bcc.n	800b96a <tcp_new_port+0xa>
          return 0;
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	e00d      	b.n	800b9d8 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800b9bc:	683b      	ldr	r3, [r7, #0]
 800b9be:	68db      	ldr	r3, [r3, #12]
 800b9c0:	603b      	str	r3, [r7, #0]
 800b9c2:	683b      	ldr	r3, [r7, #0]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d1ea      	bne.n	800b99e <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800b9c8:	79fb      	ldrb	r3, [r7, #7]
 800b9ca:	3301      	adds	r3, #1
 800b9cc:	71fb      	strb	r3, [r7, #7]
 800b9ce:	79fb      	ldrb	r3, [r7, #7]
 800b9d0:	2b03      	cmp	r3, #3
 800b9d2:	d9dd      	bls.n	800b990 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800b9d4:	4b03      	ldr	r3, [pc, #12]	; (800b9e4 <tcp_new_port+0x84>)
 800b9d6:	881b      	ldrh	r3, [r3, #0]
}
 800b9d8:	4618      	mov	r0, r3
 800b9da:	370c      	adds	r7, #12
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e2:	4770      	bx	lr
 800b9e4:	20000014 	.word	0x20000014
 800b9e8:	0801b2f4 	.word	0x0801b2f4

0800b9ec <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b08a      	sub	sp, #40	; 0x28
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	60f8      	str	r0, [r7, #12]
 800b9f4:	60b9      	str	r1, [r7, #8]
 800b9f6:	603b      	str	r3, [r7, #0]
 800b9f8:	4613      	mov	r3, r2
 800b9fa:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d109      	bne.n	800ba1a <tcp_connect+0x2e>
 800ba06:	4b7d      	ldr	r3, [pc, #500]	; (800bbfc <tcp_connect+0x210>)
 800ba08:	f240 4235 	movw	r2, #1077	; 0x435
 800ba0c:	497c      	ldr	r1, [pc, #496]	; (800bc00 <tcp_connect+0x214>)
 800ba0e:	487d      	ldr	r0, [pc, #500]	; (800bc04 <tcp_connect+0x218>)
 800ba10:	f00a fcfe 	bl	8016410 <iprintf>
 800ba14:	f06f 030f 	mvn.w	r3, #15
 800ba18:	e0ec      	b.n	800bbf4 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800ba1a:	68bb      	ldr	r3, [r7, #8]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d109      	bne.n	800ba34 <tcp_connect+0x48>
 800ba20:	4b76      	ldr	r3, [pc, #472]	; (800bbfc <tcp_connect+0x210>)
 800ba22:	f240 4236 	movw	r2, #1078	; 0x436
 800ba26:	4978      	ldr	r1, [pc, #480]	; (800bc08 <tcp_connect+0x21c>)
 800ba28:	4876      	ldr	r0, [pc, #472]	; (800bc04 <tcp_connect+0x218>)
 800ba2a:	f00a fcf1 	bl	8016410 <iprintf>
 800ba2e:	f06f 030f 	mvn.w	r3, #15
 800ba32:	e0df      	b.n	800bbf4 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	7d1b      	ldrb	r3, [r3, #20]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d009      	beq.n	800ba50 <tcp_connect+0x64>
 800ba3c:	4b6f      	ldr	r3, [pc, #444]	; (800bbfc <tcp_connect+0x210>)
 800ba3e:	f44f 6287 	mov.w	r2, #1080	; 0x438
 800ba42:	4972      	ldr	r1, [pc, #456]	; (800bc0c <tcp_connect+0x220>)
 800ba44:	486f      	ldr	r0, [pc, #444]	; (800bc04 <tcp_connect+0x218>)
 800ba46:	f00a fce3 	bl	8016410 <iprintf>
 800ba4a:	f06f 0309 	mvn.w	r3, #9
 800ba4e:	e0d1      	b.n	800bbf4 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800ba50:	68bb      	ldr	r3, [r7, #8]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d002      	beq.n	800ba5c <tcp_connect+0x70>
 800ba56:	68bb      	ldr	r3, [r7, #8]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	e000      	b.n	800ba5e <tcp_connect+0x72>
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	68fa      	ldr	r2, [r7, #12]
 800ba60:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	88fa      	ldrh	r2, [r7, #6]
 800ba66:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	7a1b      	ldrb	r3, [r3, #8]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d006      	beq.n	800ba7e <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	7a1b      	ldrb	r3, [r3, #8]
 800ba74:	4618      	mov	r0, r3
 800ba76:	f7fe fc8f 	bl	800a398 <netif_get_by_index>
 800ba7a:	6278      	str	r0, [r7, #36]	; 0x24
 800ba7c:	e005      	b.n	800ba8a <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	3304      	adds	r3, #4
 800ba82:	4618      	mov	r0, r3
 800ba84:	f009 f964 	bl	8014d50 <ip4_route>
 800ba88:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 800ba8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d102      	bne.n	800ba96 <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 800ba90:	f06f 0303 	mvn.w	r3, #3
 800ba94:	e0ae      	b.n	800bbf4 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d003      	beq.n	800baa4 <tcp_connect+0xb8>
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d111      	bne.n	800bac8 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 800baa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d002      	beq.n	800bab0 <tcp_connect+0xc4>
 800baaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baac:	3304      	adds	r3, #4
 800baae:	e000      	b.n	800bab2 <tcp_connect+0xc6>
 800bab0:	2300      	movs	r3, #0
 800bab2:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 800bab4:	69fb      	ldr	r3, [r7, #28]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d102      	bne.n	800bac0 <tcp_connect+0xd4>
      return ERR_RTE;
 800baba:	f06f 0303 	mvn.w	r3, #3
 800babe:	e099      	b.n	800bbf4 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800bac0:	69fb      	ldr	r3, [r7, #28]
 800bac2:	681a      	ldr	r2, [r3, #0]
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	8adb      	ldrh	r3, [r3, #22]
 800bacc:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	8adb      	ldrh	r3, [r3, #22]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d10c      	bne.n	800baf0 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 800bad6:	f7ff ff43 	bl	800b960 <tcp_new_port>
 800bada:	4603      	mov	r3, r0
 800badc:	461a      	mov	r2, r3
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	8adb      	ldrh	r3, [r3, #22]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d102      	bne.n	800baf0 <tcp_connect+0x104>
      return ERR_BUF;
 800baea:	f06f 0301 	mvn.w	r3, #1
 800baee:	e081      	b.n	800bbf4 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 800baf0:	68f8      	ldr	r0, [r7, #12]
 800baf2:	f001 f84f 	bl	800cb94 <tcp_next_iss>
 800baf6:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	2200      	movs	r2, #0
 800bafc:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	697a      	ldr	r2, [r7, #20]
 800bb02:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 800bb04:	697b      	ldr	r3, [r7, #20]
 800bb06:	1e5a      	subs	r2, r3, #1
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 800bb0c:	697b      	ldr	r3, [r7, #20]
 800bb0e:	1e5a      	subs	r2, r3, #1
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 800bb14:	697b      	ldr	r3, [r7, #20]
 800bb16:	1e5a      	subs	r2, r3, #1
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800bb22:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800bb3a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	f44f 7206 	mov.w	r2, #536	; 0x218
 800bb44:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	3304      	adds	r3, #4
 800bb4e:	461a      	mov	r2, r3
 800bb50:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bb52:	f001 f845 	bl	800cbe0 <tcp_eff_send_mss_netif>
 800bb56:	4603      	mov	r3, r0
 800bb58:	461a      	mov	r2, r3
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	2201      	movs	r2, #1
 800bb62:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	683a      	ldr	r2, [r7, #0]
 800bb6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800bb6e:	2102      	movs	r1, #2
 800bb70:	68f8      	ldr	r0, [r7, #12]
 800bb72:	f004 faa9 	bl	80100c8 <tcp_enqueue_flags>
 800bb76:	4603      	mov	r3, r0
 800bb78:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 800bb7a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d136      	bne.n	800bbf0 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	2202      	movs	r2, #2
 800bb86:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 800bb88:	8b7b      	ldrh	r3, [r7, #26]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d021      	beq.n	800bbd2 <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800bb8e:	4b20      	ldr	r3, [pc, #128]	; (800bc10 <tcp_connect+0x224>)
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	68fa      	ldr	r2, [r7, #12]
 800bb94:	429a      	cmp	r2, r3
 800bb96:	d105      	bne.n	800bba4 <tcp_connect+0x1b8>
 800bb98:	4b1d      	ldr	r3, [pc, #116]	; (800bc10 <tcp_connect+0x224>)
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	68db      	ldr	r3, [r3, #12]
 800bb9e:	4a1c      	ldr	r2, [pc, #112]	; (800bc10 <tcp_connect+0x224>)
 800bba0:	6013      	str	r3, [r2, #0]
 800bba2:	e013      	b.n	800bbcc <tcp_connect+0x1e0>
 800bba4:	4b1a      	ldr	r3, [pc, #104]	; (800bc10 <tcp_connect+0x224>)
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	623b      	str	r3, [r7, #32]
 800bbaa:	e00c      	b.n	800bbc6 <tcp_connect+0x1da>
 800bbac:	6a3b      	ldr	r3, [r7, #32]
 800bbae:	68db      	ldr	r3, [r3, #12]
 800bbb0:	68fa      	ldr	r2, [r7, #12]
 800bbb2:	429a      	cmp	r2, r3
 800bbb4:	d104      	bne.n	800bbc0 <tcp_connect+0x1d4>
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	68da      	ldr	r2, [r3, #12]
 800bbba:	6a3b      	ldr	r3, [r7, #32]
 800bbbc:	60da      	str	r2, [r3, #12]
 800bbbe:	e005      	b.n	800bbcc <tcp_connect+0x1e0>
 800bbc0:	6a3b      	ldr	r3, [r7, #32]
 800bbc2:	68db      	ldr	r3, [r3, #12]
 800bbc4:	623b      	str	r3, [r7, #32]
 800bbc6:	6a3b      	ldr	r3, [r7, #32]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d1ef      	bne.n	800bbac <tcp_connect+0x1c0>
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	2200      	movs	r2, #0
 800bbd0:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 800bbd2:	4b10      	ldr	r3, [pc, #64]	; (800bc14 <tcp_connect+0x228>)
 800bbd4:	681a      	ldr	r2, [r3, #0]
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	60da      	str	r2, [r3, #12]
 800bbda:	4a0e      	ldr	r2, [pc, #56]	; (800bc14 <tcp_connect+0x228>)
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	6013      	str	r3, [r2, #0]
 800bbe0:	f005 fad6 	bl	8011190 <tcp_timer_needed>
 800bbe4:	4b0c      	ldr	r3, [pc, #48]	; (800bc18 <tcp_connect+0x22c>)
 800bbe6:	2201      	movs	r2, #1
 800bbe8:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 800bbea:	68f8      	ldr	r0, [r7, #12]
 800bbec:	f004 fb5a 	bl	80102a4 <tcp_output>
  }
  return ret;
 800bbf0:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	3728      	adds	r7, #40	; 0x28
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	bd80      	pop	{r7, pc}
 800bbfc:	08018f24 	.word	0x08018f24
 800bc00:	08019200 	.word	0x08019200
 800bc04:	08018f68 	.word	0x08018f68
 800bc08:	0801921c 	.word	0x0801921c
 800bc0c:	08019238 	.word	0x08019238
 800bc10:	2001aeb8 	.word	0x2001aeb8
 800bc14:	2001aec0 	.word	0x2001aec0
 800bc18:	2001aec8 	.word	0x2001aec8

0800bc1c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800bc1c:	b5b0      	push	{r4, r5, r7, lr}
 800bc1e:	b090      	sub	sp, #64	; 0x40
 800bc20:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800bc22:	2300      	movs	r3, #0
 800bc24:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800bc28:	4b94      	ldr	r3, [pc, #592]	; (800be7c <tcp_slowtmr+0x260>)
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	3301      	adds	r3, #1
 800bc2e:	4a93      	ldr	r2, [pc, #588]	; (800be7c <tcp_slowtmr+0x260>)
 800bc30:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800bc32:	4b93      	ldr	r3, [pc, #588]	; (800be80 <tcp_slowtmr+0x264>)
 800bc34:	781b      	ldrb	r3, [r3, #0]
 800bc36:	3301      	adds	r3, #1
 800bc38:	b2da      	uxtb	r2, r3
 800bc3a:	4b91      	ldr	r3, [pc, #580]	; (800be80 <tcp_slowtmr+0x264>)
 800bc3c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800bc3e:	2300      	movs	r3, #0
 800bc40:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800bc42:	4b90      	ldr	r3, [pc, #576]	; (800be84 <tcp_slowtmr+0x268>)
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800bc48:	e29f      	b.n	800c18a <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800bc4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc4c:	7d1b      	ldrb	r3, [r3, #20]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d106      	bne.n	800bc60 <tcp_slowtmr+0x44>
 800bc52:	4b8d      	ldr	r3, [pc, #564]	; (800be88 <tcp_slowtmr+0x26c>)
 800bc54:	f240 42be 	movw	r2, #1214	; 0x4be
 800bc58:	498c      	ldr	r1, [pc, #560]	; (800be8c <tcp_slowtmr+0x270>)
 800bc5a:	488d      	ldr	r0, [pc, #564]	; (800be90 <tcp_slowtmr+0x274>)
 800bc5c:	f00a fbd8 	bl	8016410 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800bc60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc62:	7d1b      	ldrb	r3, [r3, #20]
 800bc64:	2b01      	cmp	r3, #1
 800bc66:	d106      	bne.n	800bc76 <tcp_slowtmr+0x5a>
 800bc68:	4b87      	ldr	r3, [pc, #540]	; (800be88 <tcp_slowtmr+0x26c>)
 800bc6a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800bc6e:	4989      	ldr	r1, [pc, #548]	; (800be94 <tcp_slowtmr+0x278>)
 800bc70:	4887      	ldr	r0, [pc, #540]	; (800be90 <tcp_slowtmr+0x274>)
 800bc72:	f00a fbcd 	bl	8016410 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800bc76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc78:	7d1b      	ldrb	r3, [r3, #20]
 800bc7a:	2b0a      	cmp	r3, #10
 800bc7c:	d106      	bne.n	800bc8c <tcp_slowtmr+0x70>
 800bc7e:	4b82      	ldr	r3, [pc, #520]	; (800be88 <tcp_slowtmr+0x26c>)
 800bc80:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800bc84:	4984      	ldr	r1, [pc, #528]	; (800be98 <tcp_slowtmr+0x27c>)
 800bc86:	4882      	ldr	r0, [pc, #520]	; (800be90 <tcp_slowtmr+0x274>)
 800bc88:	f00a fbc2 	bl	8016410 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800bc8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc8e:	7f9a      	ldrb	r2, [r3, #30]
 800bc90:	4b7b      	ldr	r3, [pc, #492]	; (800be80 <tcp_slowtmr+0x264>)
 800bc92:	781b      	ldrb	r3, [r3, #0]
 800bc94:	429a      	cmp	r2, r3
 800bc96:	d105      	bne.n	800bca4 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800bc98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc9a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800bc9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc9e:	68db      	ldr	r3, [r3, #12]
 800bca0:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800bca2:	e272      	b.n	800c18a <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800bca4:	4b76      	ldr	r3, [pc, #472]	; (800be80 <tcp_slowtmr+0x264>)
 800bca6:	781a      	ldrb	r2, [r3, #0]
 800bca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcaa:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800bcac:	2300      	movs	r3, #0
 800bcae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800bcb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcba:	7d1b      	ldrb	r3, [r3, #20]
 800bcbc:	2b02      	cmp	r3, #2
 800bcbe:	d10a      	bne.n	800bcd6 <tcp_slowtmr+0xba>
 800bcc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcc2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bcc6:	2b05      	cmp	r3, #5
 800bcc8:	d905      	bls.n	800bcd6 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800bcca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bcce:	3301      	adds	r3, #1
 800bcd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bcd4:	e11e      	b.n	800bf14 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800bcd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcd8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bcdc:	2b0b      	cmp	r3, #11
 800bcde:	d905      	bls.n	800bcec <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800bce0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bce4:	3301      	adds	r3, #1
 800bce6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bcea:	e113      	b.n	800bf14 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800bcec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcee:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d075      	beq.n	800bde2 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800bcf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d006      	beq.n	800bd0c <tcp_slowtmr+0xf0>
 800bcfe:	4b62      	ldr	r3, [pc, #392]	; (800be88 <tcp_slowtmr+0x26c>)
 800bd00:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800bd04:	4965      	ldr	r1, [pc, #404]	; (800be9c <tcp_slowtmr+0x280>)
 800bd06:	4862      	ldr	r0, [pc, #392]	; (800be90 <tcp_slowtmr+0x274>)
 800bd08:	f00a fb82 	bl	8016410 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800bd0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d106      	bne.n	800bd22 <tcp_slowtmr+0x106>
 800bd14:	4b5c      	ldr	r3, [pc, #368]	; (800be88 <tcp_slowtmr+0x26c>)
 800bd16:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800bd1a:	4961      	ldr	r1, [pc, #388]	; (800bea0 <tcp_slowtmr+0x284>)
 800bd1c:	485c      	ldr	r0, [pc, #368]	; (800be90 <tcp_slowtmr+0x274>)
 800bd1e:	f00a fb77 	bl	8016410 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800bd22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd24:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800bd28:	2b0b      	cmp	r3, #11
 800bd2a:	d905      	bls.n	800bd38 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800bd2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bd30:	3301      	adds	r3, #1
 800bd32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bd36:	e0ed      	b.n	800bf14 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800bd38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd3a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800bd3e:	3b01      	subs	r3, #1
 800bd40:	4a58      	ldr	r2, [pc, #352]	; (800bea4 <tcp_slowtmr+0x288>)
 800bd42:	5cd3      	ldrb	r3, [r2, r3]
 800bd44:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800bd46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd48:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800bd4c:	7c7a      	ldrb	r2, [r7, #17]
 800bd4e:	429a      	cmp	r2, r3
 800bd50:	d907      	bls.n	800bd62 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800bd52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd54:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800bd58:	3301      	adds	r3, #1
 800bd5a:	b2da      	uxtb	r2, r3
 800bd5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd5e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800bd62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd64:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800bd68:	7c7a      	ldrb	r2, [r7, #17]
 800bd6a:	429a      	cmp	r2, r3
 800bd6c:	f200 80d2 	bhi.w	800bf14 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800bd70:	2301      	movs	r3, #1
 800bd72:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800bd74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd76:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d108      	bne.n	800bd90 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800bd7e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bd80:	f005 f938 	bl	8010ff4 <tcp_zero_window_probe>
 800bd84:	4603      	mov	r3, r0
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d014      	beq.n	800bdb4 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	623b      	str	r3, [r7, #32]
 800bd8e:	e011      	b.n	800bdb4 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800bd90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd92:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bd96:	4619      	mov	r1, r3
 800bd98:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bd9a:	f003 fffd 	bl	800fd98 <tcp_split_unsent_seg>
 800bd9e:	4603      	mov	r3, r0
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d107      	bne.n	800bdb4 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800bda4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bda6:	f004 fa7d 	bl	80102a4 <tcp_output>
 800bdaa:	4603      	mov	r3, r0
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d101      	bne.n	800bdb4 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800bdb0:	2300      	movs	r3, #0
 800bdb2:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800bdb4:	6a3b      	ldr	r3, [r7, #32]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	f000 80ac 	beq.w	800bf14 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800bdbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdbe:	2200      	movs	r2, #0
 800bdc0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800bdc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdc6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800bdca:	2b06      	cmp	r3, #6
 800bdcc:	f200 80a2 	bhi.w	800bf14 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800bdd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdd2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800bdd6:	3301      	adds	r3, #1
 800bdd8:	b2da      	uxtb	r2, r3
 800bdda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bddc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800bde0:	e098      	b.n	800bf14 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800bde2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bde4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	db0f      	blt.n	800be0c <tcp_slowtmr+0x1f0>
 800bdec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdee:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800bdf2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800bdf6:	4293      	cmp	r3, r2
 800bdf8:	d008      	beq.n	800be0c <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800bdfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdfc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800be00:	b29b      	uxth	r3, r3
 800be02:	3301      	adds	r3, #1
 800be04:	b29b      	uxth	r3, r3
 800be06:	b21a      	sxth	r2, r3
 800be08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be0a:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800be0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be0e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800be12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be14:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800be18:	429a      	cmp	r2, r3
 800be1a:	db7b      	blt.n	800bf14 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800be1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800be1e:	f004 fd33 	bl	8010888 <tcp_rexmit_rto_prepare>
 800be22:	4603      	mov	r3, r0
 800be24:	2b00      	cmp	r3, #0
 800be26:	d007      	beq.n	800be38 <tcp_slowtmr+0x21c>
 800be28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d171      	bne.n	800bf14 <tcp_slowtmr+0x2f8>
 800be30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be34:	2b00      	cmp	r3, #0
 800be36:	d06d      	beq.n	800bf14 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800be38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be3a:	7d1b      	ldrb	r3, [r3, #20]
 800be3c:	2b02      	cmp	r3, #2
 800be3e:	d03a      	beq.n	800beb6 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800be40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be42:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800be46:	2b0c      	cmp	r3, #12
 800be48:	bf28      	it	cs
 800be4a:	230c      	movcs	r3, #12
 800be4c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800be4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be50:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800be54:	10db      	asrs	r3, r3, #3
 800be56:	b21b      	sxth	r3, r3
 800be58:	461a      	mov	r2, r3
 800be5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be5c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800be60:	4413      	add	r3, r2
 800be62:	7efa      	ldrb	r2, [r7, #27]
 800be64:	4910      	ldr	r1, [pc, #64]	; (800bea8 <tcp_slowtmr+0x28c>)
 800be66:	5c8a      	ldrb	r2, [r1, r2]
 800be68:	4093      	lsls	r3, r2
 800be6a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800be6c:	697b      	ldr	r3, [r7, #20]
 800be6e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800be72:	4293      	cmp	r3, r2
 800be74:	dc1a      	bgt.n	800beac <tcp_slowtmr+0x290>
 800be76:	697b      	ldr	r3, [r7, #20]
 800be78:	b21a      	sxth	r2, r3
 800be7a:	e019      	b.n	800beb0 <tcp_slowtmr+0x294>
 800be7c:	2001aeb4 	.word	0x2001aeb4
 800be80:	2001aeca 	.word	0x2001aeca
 800be84:	2001aec0 	.word	0x2001aec0
 800be88:	08018f24 	.word	0x08018f24
 800be8c:	08019268 	.word	0x08019268
 800be90:	08018f68 	.word	0x08018f68
 800be94:	08019294 	.word	0x08019294
 800be98:	080192c0 	.word	0x080192c0
 800be9c:	080192f0 	.word	0x080192f0
 800bea0:	08019324 	.word	0x08019324
 800bea4:	0801b2ec 	.word	0x0801b2ec
 800bea8:	0801b2dc 	.word	0x0801b2dc
 800beac:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800beb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beb2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800beb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beb8:	2200      	movs	r2, #0
 800beba:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800bebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bebe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800bec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bec4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800bec8:	4293      	cmp	r3, r2
 800beca:	bf28      	it	cs
 800becc:	4613      	movcs	r3, r2
 800bece:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800bed0:	8a7b      	ldrh	r3, [r7, #18]
 800bed2:	085b      	lsrs	r3, r3, #1
 800bed4:	b29a      	uxth	r2, r3
 800bed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bed8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800bedc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bede:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800bee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bee4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bee6:	005b      	lsls	r3, r3, #1
 800bee8:	b29b      	uxth	r3, r3
 800beea:	429a      	cmp	r2, r3
 800beec:	d206      	bcs.n	800befc <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800beee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bef0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bef2:	005b      	lsls	r3, r3, #1
 800bef4:	b29a      	uxth	r2, r3
 800bef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bef8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800befc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800befe:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800bf00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf02:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800bf06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf08:	2200      	movs	r2, #0
 800bf0a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800bf0e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bf10:	f004 fd2a 	bl	8010968 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800bf14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf16:	7d1b      	ldrb	r3, [r3, #20]
 800bf18:	2b06      	cmp	r3, #6
 800bf1a:	d111      	bne.n	800bf40 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800bf1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf1e:	8b5b      	ldrh	r3, [r3, #26]
 800bf20:	f003 0310 	and.w	r3, r3, #16
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d00b      	beq.n	800bf40 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800bf28:	4b9d      	ldr	r3, [pc, #628]	; (800c1a0 <tcp_slowtmr+0x584>)
 800bf2a:	681a      	ldr	r2, [r3, #0]
 800bf2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf2e:	6a1b      	ldr	r3, [r3, #32]
 800bf30:	1ad3      	subs	r3, r2, r3
 800bf32:	2b28      	cmp	r3, #40	; 0x28
 800bf34:	d904      	bls.n	800bf40 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800bf36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bf3a:	3301      	adds	r3, #1
 800bf3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800bf40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf42:	7a5b      	ldrb	r3, [r3, #9]
 800bf44:	f003 0308 	and.w	r3, r3, #8
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d04c      	beq.n	800bfe6 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800bf4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf4e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800bf50:	2b04      	cmp	r3, #4
 800bf52:	d003      	beq.n	800bf5c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800bf54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf56:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800bf58:	2b07      	cmp	r3, #7
 800bf5a:	d144      	bne.n	800bfe6 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800bf5c:	4b90      	ldr	r3, [pc, #576]	; (800c1a0 <tcp_slowtmr+0x584>)
 800bf5e:	681a      	ldr	r2, [r3, #0]
 800bf60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf62:	6a1b      	ldr	r3, [r3, #32]
 800bf64:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800bf66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bf6c:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800bf70:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800bf74:	498b      	ldr	r1, [pc, #556]	; (800c1a4 <tcp_slowtmr+0x588>)
 800bf76:	fba1 1303 	umull	r1, r3, r1, r3
 800bf7a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800bf7c:	429a      	cmp	r2, r3
 800bf7e:	d90a      	bls.n	800bf96 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800bf80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bf84:	3301      	adds	r3, #1
 800bf86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800bf8a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bf8e:	3301      	adds	r3, #1
 800bf90:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800bf94:	e027      	b.n	800bfe6 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800bf96:	4b82      	ldr	r3, [pc, #520]	; (800c1a0 <tcp_slowtmr+0x584>)
 800bf98:	681a      	ldr	r2, [r3, #0]
 800bf9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf9c:	6a1b      	ldr	r3, [r3, #32]
 800bf9e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800bfa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfa2:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800bfa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfa8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800bfac:	4618      	mov	r0, r3
 800bfae:	4b7e      	ldr	r3, [pc, #504]	; (800c1a8 <tcp_slowtmr+0x58c>)
 800bfb0:	fb00 f303 	mul.w	r3, r0, r3
 800bfb4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800bfb6:	497b      	ldr	r1, [pc, #492]	; (800c1a4 <tcp_slowtmr+0x588>)
 800bfb8:	fba1 1303 	umull	r1, r3, r1, r3
 800bfbc:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800bfbe:	429a      	cmp	r2, r3
 800bfc0:	d911      	bls.n	800bfe6 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800bfc2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bfc4:	f004 ffd6 	bl	8010f74 <tcp_keepalive>
 800bfc8:	4603      	mov	r3, r0
 800bfca:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800bfce:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d107      	bne.n	800bfe6 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800bfd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfd8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800bfdc:	3301      	adds	r3, #1
 800bfde:	b2da      	uxtb	r2, r3
 800bfe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfe2:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800bfe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfe8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d011      	beq.n	800c012 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800bfee:	4b6c      	ldr	r3, [pc, #432]	; (800c1a0 <tcp_slowtmr+0x584>)
 800bff0:	681a      	ldr	r2, [r3, #0]
 800bff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bff4:	6a1b      	ldr	r3, [r3, #32]
 800bff6:	1ad2      	subs	r2, r2, r3
 800bff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bffa:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800bffe:	4619      	mov	r1, r3
 800c000:	460b      	mov	r3, r1
 800c002:	005b      	lsls	r3, r3, #1
 800c004:	440b      	add	r3, r1
 800c006:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800c008:	429a      	cmp	r2, r3
 800c00a:	d302      	bcc.n	800c012 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800c00c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c00e:	f000 fe91 	bl	800cd34 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800c012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c014:	7d1b      	ldrb	r3, [r3, #20]
 800c016:	2b03      	cmp	r3, #3
 800c018:	d10b      	bne.n	800c032 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c01a:	4b61      	ldr	r3, [pc, #388]	; (800c1a0 <tcp_slowtmr+0x584>)
 800c01c:	681a      	ldr	r2, [r3, #0]
 800c01e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c020:	6a1b      	ldr	r3, [r3, #32]
 800c022:	1ad3      	subs	r3, r2, r3
 800c024:	2b28      	cmp	r3, #40	; 0x28
 800c026:	d904      	bls.n	800c032 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800c028:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c02c:	3301      	adds	r3, #1
 800c02e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800c032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c034:	7d1b      	ldrb	r3, [r3, #20]
 800c036:	2b09      	cmp	r3, #9
 800c038:	d10b      	bne.n	800c052 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800c03a:	4b59      	ldr	r3, [pc, #356]	; (800c1a0 <tcp_slowtmr+0x584>)
 800c03c:	681a      	ldr	r2, [r3, #0]
 800c03e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c040:	6a1b      	ldr	r3, [r3, #32]
 800c042:	1ad3      	subs	r3, r2, r3
 800c044:	2bf0      	cmp	r3, #240	; 0xf0
 800c046:	d904      	bls.n	800c052 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800c048:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c04c:	3301      	adds	r3, #1
 800c04e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800c052:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c056:	2b00      	cmp	r3, #0
 800c058:	d060      	beq.n	800c11c <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800c05a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c05c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c060:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800c062:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c064:	f000 fcb2 	bl	800c9cc <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800c068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d010      	beq.n	800c090 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800c06e:	4b4f      	ldr	r3, [pc, #316]	; (800c1ac <tcp_slowtmr+0x590>)
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c074:	429a      	cmp	r2, r3
 800c076:	d106      	bne.n	800c086 <tcp_slowtmr+0x46a>
 800c078:	4b4d      	ldr	r3, [pc, #308]	; (800c1b0 <tcp_slowtmr+0x594>)
 800c07a:	f240 526d 	movw	r2, #1389	; 0x56d
 800c07e:	494d      	ldr	r1, [pc, #308]	; (800c1b4 <tcp_slowtmr+0x598>)
 800c080:	484d      	ldr	r0, [pc, #308]	; (800c1b8 <tcp_slowtmr+0x59c>)
 800c082:	f00a f9c5 	bl	8016410 <iprintf>
        prev->next = pcb->next;
 800c086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c088:	68da      	ldr	r2, [r3, #12]
 800c08a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c08c:	60da      	str	r2, [r3, #12]
 800c08e:	e00f      	b.n	800c0b0 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800c090:	4b46      	ldr	r3, [pc, #280]	; (800c1ac <tcp_slowtmr+0x590>)
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c096:	429a      	cmp	r2, r3
 800c098:	d006      	beq.n	800c0a8 <tcp_slowtmr+0x48c>
 800c09a:	4b45      	ldr	r3, [pc, #276]	; (800c1b0 <tcp_slowtmr+0x594>)
 800c09c:	f240 5271 	movw	r2, #1393	; 0x571
 800c0a0:	4946      	ldr	r1, [pc, #280]	; (800c1bc <tcp_slowtmr+0x5a0>)
 800c0a2:	4845      	ldr	r0, [pc, #276]	; (800c1b8 <tcp_slowtmr+0x59c>)
 800c0a4:	f00a f9b4 	bl	8016410 <iprintf>
        tcp_active_pcbs = pcb->next;
 800c0a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0aa:	68db      	ldr	r3, [r3, #12]
 800c0ac:	4a3f      	ldr	r2, [pc, #252]	; (800c1ac <tcp_slowtmr+0x590>)
 800c0ae:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800c0b0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d013      	beq.n	800c0e0 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800c0b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0ba:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800c0bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0be:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800c0c0:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800c0c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0c4:	3304      	adds	r3, #4
 800c0c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c0c8:	8ad2      	ldrh	r2, [r2, #22]
 800c0ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c0cc:	8b09      	ldrh	r1, [r1, #24]
 800c0ce:	9102      	str	r1, [sp, #8]
 800c0d0:	9201      	str	r2, [sp, #4]
 800c0d2:	9300      	str	r3, [sp, #0]
 800c0d4:	462b      	mov	r3, r5
 800c0d6:	4622      	mov	r2, r4
 800c0d8:	4601      	mov	r1, r0
 800c0da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c0dc:	f004 fe96 	bl	8010e0c <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800c0e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0e2:	691b      	ldr	r3, [r3, #16]
 800c0e4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800c0e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0e8:	7d1b      	ldrb	r3, [r3, #20]
 800c0ea:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800c0ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0ee:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800c0f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0f2:	68db      	ldr	r3, [r3, #12]
 800c0f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800c0f6:	6838      	ldr	r0, [r7, #0]
 800c0f8:	f7fe fffc 	bl	800b0f4 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800c0fc:	4b30      	ldr	r3, [pc, #192]	; (800c1c0 <tcp_slowtmr+0x5a4>)
 800c0fe:	2200      	movs	r2, #0
 800c100:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	2b00      	cmp	r3, #0
 800c106:	d004      	beq.n	800c112 <tcp_slowtmr+0x4f6>
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	f06f 010c 	mvn.w	r1, #12
 800c10e:	68b8      	ldr	r0, [r7, #8]
 800c110:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800c112:	4b2b      	ldr	r3, [pc, #172]	; (800c1c0 <tcp_slowtmr+0x5a4>)
 800c114:	781b      	ldrb	r3, [r3, #0]
 800c116:	2b00      	cmp	r3, #0
 800c118:	d037      	beq.n	800c18a <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800c11a:	e590      	b.n	800bc3e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800c11c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c11e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800c120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c122:	68db      	ldr	r3, [r3, #12]
 800c124:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800c126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c128:	7f1b      	ldrb	r3, [r3, #28]
 800c12a:	3301      	adds	r3, #1
 800c12c:	b2da      	uxtb	r2, r3
 800c12e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c130:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800c132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c134:	7f1a      	ldrb	r2, [r3, #28]
 800c136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c138:	7f5b      	ldrb	r3, [r3, #29]
 800c13a:	429a      	cmp	r2, r3
 800c13c:	d325      	bcc.n	800c18a <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800c13e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c140:	2200      	movs	r2, #0
 800c142:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800c144:	4b1e      	ldr	r3, [pc, #120]	; (800c1c0 <tcp_slowtmr+0x5a4>)
 800c146:	2200      	movs	r2, #0
 800c148:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800c14a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c14c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c150:	2b00      	cmp	r3, #0
 800c152:	d00b      	beq.n	800c16c <tcp_slowtmr+0x550>
 800c154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c156:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c15a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c15c:	6912      	ldr	r2, [r2, #16]
 800c15e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c160:	4610      	mov	r0, r2
 800c162:	4798      	blx	r3
 800c164:	4603      	mov	r3, r0
 800c166:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800c16a:	e002      	b.n	800c172 <tcp_slowtmr+0x556>
 800c16c:	2300      	movs	r3, #0
 800c16e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800c172:	4b13      	ldr	r3, [pc, #76]	; (800c1c0 <tcp_slowtmr+0x5a4>)
 800c174:	781b      	ldrb	r3, [r3, #0]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d000      	beq.n	800c17c <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800c17a:	e560      	b.n	800bc3e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800c17c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800c180:	2b00      	cmp	r3, #0
 800c182:	d102      	bne.n	800c18a <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800c184:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c186:	f004 f88d 	bl	80102a4 <tcp_output>
  while (pcb != NULL) {
 800c18a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	f47f ad5c 	bne.w	800bc4a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800c192:	2300      	movs	r3, #0
 800c194:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800c196:	4b0b      	ldr	r3, [pc, #44]	; (800c1c4 <tcp_slowtmr+0x5a8>)
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800c19c:	e067      	b.n	800c26e <tcp_slowtmr+0x652>
 800c19e:	bf00      	nop
 800c1a0:	2001aeb4 	.word	0x2001aeb4
 800c1a4:	10624dd3 	.word	0x10624dd3
 800c1a8:	000124f8 	.word	0x000124f8
 800c1ac:	2001aec0 	.word	0x2001aec0
 800c1b0:	08018f24 	.word	0x08018f24
 800c1b4:	0801935c 	.word	0x0801935c
 800c1b8:	08018f68 	.word	0x08018f68
 800c1bc:	08019388 	.word	0x08019388
 800c1c0:	2001aec8 	.word	0x2001aec8
 800c1c4:	2001aec4 	.word	0x2001aec4
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800c1c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1ca:	7d1b      	ldrb	r3, [r3, #20]
 800c1cc:	2b0a      	cmp	r3, #10
 800c1ce:	d006      	beq.n	800c1de <tcp_slowtmr+0x5c2>
 800c1d0:	4b2b      	ldr	r3, [pc, #172]	; (800c280 <tcp_slowtmr+0x664>)
 800c1d2:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800c1d6:	492b      	ldr	r1, [pc, #172]	; (800c284 <tcp_slowtmr+0x668>)
 800c1d8:	482b      	ldr	r0, [pc, #172]	; (800c288 <tcp_slowtmr+0x66c>)
 800c1da:	f00a f919 	bl	8016410 <iprintf>
    pcb_remove = 0;
 800c1de:	2300      	movs	r3, #0
 800c1e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800c1e4:	4b29      	ldr	r3, [pc, #164]	; (800c28c <tcp_slowtmr+0x670>)
 800c1e6:	681a      	ldr	r2, [r3, #0]
 800c1e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1ea:	6a1b      	ldr	r3, [r3, #32]
 800c1ec:	1ad3      	subs	r3, r2, r3
 800c1ee:	2bf0      	cmp	r3, #240	; 0xf0
 800c1f0:	d904      	bls.n	800c1fc <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800c1f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c1f6:	3301      	adds	r3, #1
 800c1f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800c1fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c200:	2b00      	cmp	r3, #0
 800c202:	d02f      	beq.n	800c264 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800c204:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c206:	f000 fbe1 	bl	800c9cc <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800c20a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d010      	beq.n	800c232 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800c210:	4b1f      	ldr	r3, [pc, #124]	; (800c290 <tcp_slowtmr+0x674>)
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c216:	429a      	cmp	r2, r3
 800c218:	d106      	bne.n	800c228 <tcp_slowtmr+0x60c>
 800c21a:	4b19      	ldr	r3, [pc, #100]	; (800c280 <tcp_slowtmr+0x664>)
 800c21c:	f240 52af 	movw	r2, #1455	; 0x5af
 800c220:	491c      	ldr	r1, [pc, #112]	; (800c294 <tcp_slowtmr+0x678>)
 800c222:	4819      	ldr	r0, [pc, #100]	; (800c288 <tcp_slowtmr+0x66c>)
 800c224:	f00a f8f4 	bl	8016410 <iprintf>
        prev->next = pcb->next;
 800c228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c22a:	68da      	ldr	r2, [r3, #12]
 800c22c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c22e:	60da      	str	r2, [r3, #12]
 800c230:	e00f      	b.n	800c252 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800c232:	4b17      	ldr	r3, [pc, #92]	; (800c290 <tcp_slowtmr+0x674>)
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c238:	429a      	cmp	r2, r3
 800c23a:	d006      	beq.n	800c24a <tcp_slowtmr+0x62e>
 800c23c:	4b10      	ldr	r3, [pc, #64]	; (800c280 <tcp_slowtmr+0x664>)
 800c23e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800c242:	4915      	ldr	r1, [pc, #84]	; (800c298 <tcp_slowtmr+0x67c>)
 800c244:	4810      	ldr	r0, [pc, #64]	; (800c288 <tcp_slowtmr+0x66c>)
 800c246:	f00a f8e3 	bl	8016410 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800c24a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c24c:	68db      	ldr	r3, [r3, #12]
 800c24e:	4a10      	ldr	r2, [pc, #64]	; (800c290 <tcp_slowtmr+0x674>)
 800c250:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800c252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c254:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800c256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c258:	68db      	ldr	r3, [r3, #12]
 800c25a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800c25c:	69f8      	ldr	r0, [r7, #28]
 800c25e:	f7fe ff49 	bl	800b0f4 <tcp_free>
 800c262:	e004      	b.n	800c26e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800c264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c266:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800c268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c26a:	68db      	ldr	r3, [r3, #12]
 800c26c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800c26e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c270:	2b00      	cmp	r3, #0
 800c272:	d1a9      	bne.n	800c1c8 <tcp_slowtmr+0x5ac>
    }
  }
}
 800c274:	bf00      	nop
 800c276:	bf00      	nop
 800c278:	3730      	adds	r7, #48	; 0x30
 800c27a:	46bd      	mov	sp, r7
 800c27c:	bdb0      	pop	{r4, r5, r7, pc}
 800c27e:	bf00      	nop
 800c280:	08018f24 	.word	0x08018f24
 800c284:	080193b4 	.word	0x080193b4
 800c288:	08018f68 	.word	0x08018f68
 800c28c:	2001aeb4 	.word	0x2001aeb4
 800c290:	2001aec4 	.word	0x2001aec4
 800c294:	080193e4 	.word	0x080193e4
 800c298:	0801940c 	.word	0x0801940c

0800c29c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800c29c:	b580      	push	{r7, lr}
 800c29e:	b082      	sub	sp, #8
 800c2a0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800c2a2:	4b2d      	ldr	r3, [pc, #180]	; (800c358 <tcp_fasttmr+0xbc>)
 800c2a4:	781b      	ldrb	r3, [r3, #0]
 800c2a6:	3301      	adds	r3, #1
 800c2a8:	b2da      	uxtb	r2, r3
 800c2aa:	4b2b      	ldr	r3, [pc, #172]	; (800c358 <tcp_fasttmr+0xbc>)
 800c2ac:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800c2ae:	4b2b      	ldr	r3, [pc, #172]	; (800c35c <tcp_fasttmr+0xc0>)
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800c2b4:	e048      	b.n	800c348 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	7f9a      	ldrb	r2, [r3, #30]
 800c2ba:	4b27      	ldr	r3, [pc, #156]	; (800c358 <tcp_fasttmr+0xbc>)
 800c2bc:	781b      	ldrb	r3, [r3, #0]
 800c2be:	429a      	cmp	r2, r3
 800c2c0:	d03f      	beq.n	800c342 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800c2c2:	4b25      	ldr	r3, [pc, #148]	; (800c358 <tcp_fasttmr+0xbc>)
 800c2c4:	781a      	ldrb	r2, [r3, #0]
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	8b5b      	ldrh	r3, [r3, #26]
 800c2ce:	f003 0301 	and.w	r3, r3, #1
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d010      	beq.n	800c2f8 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	8b5b      	ldrh	r3, [r3, #26]
 800c2da:	f043 0302 	orr.w	r3, r3, #2
 800c2de:	b29a      	uxth	r2, r3
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800c2e4:	6878      	ldr	r0, [r7, #4]
 800c2e6:	f003 ffdd 	bl	80102a4 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	8b5b      	ldrh	r3, [r3, #26]
 800c2ee:	f023 0303 	bic.w	r3, r3, #3
 800c2f2:	b29a      	uxth	r2, r3
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	8b5b      	ldrh	r3, [r3, #26]
 800c2fc:	f003 0308 	and.w	r3, r3, #8
 800c300:	2b00      	cmp	r3, #0
 800c302:	d009      	beq.n	800c318 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	8b5b      	ldrh	r3, [r3, #26]
 800c308:	f023 0308 	bic.w	r3, r3, #8
 800c30c:	b29a      	uxth	r2, r3
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800c312:	6878      	ldr	r0, [r7, #4]
 800c314:	f7ff f882 	bl	800b41c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	68db      	ldr	r3, [r3, #12]
 800c31c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c322:	2b00      	cmp	r3, #0
 800c324:	d00a      	beq.n	800c33c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800c326:	4b0e      	ldr	r3, [pc, #56]	; (800c360 <tcp_fasttmr+0xc4>)
 800c328:	2200      	movs	r2, #0
 800c32a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800c32c:	6878      	ldr	r0, [r7, #4]
 800c32e:	f000 f819 	bl	800c364 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800c332:	4b0b      	ldr	r3, [pc, #44]	; (800c360 <tcp_fasttmr+0xc4>)
 800c334:	781b      	ldrb	r3, [r3, #0]
 800c336:	2b00      	cmp	r3, #0
 800c338:	d000      	beq.n	800c33c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800c33a:	e7b8      	b.n	800c2ae <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800c33c:	683b      	ldr	r3, [r7, #0]
 800c33e:	607b      	str	r3, [r7, #4]
 800c340:	e002      	b.n	800c348 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	68db      	ldr	r3, [r3, #12]
 800c346:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d1b3      	bne.n	800c2b6 <tcp_fasttmr+0x1a>
    }
  }
}
 800c34e:	bf00      	nop
 800c350:	bf00      	nop
 800c352:	3708      	adds	r7, #8
 800c354:	46bd      	mov	sp, r7
 800c356:	bd80      	pop	{r7, pc}
 800c358:	2001aeca 	.word	0x2001aeca
 800c35c:	2001aec0 	.word	0x2001aec0
 800c360:	2001aec8 	.word	0x2001aec8

0800c364 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800c364:	b590      	push	{r4, r7, lr}
 800c366:	b085      	sub	sp, #20
 800c368:	af00      	add	r7, sp, #0
 800c36a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d109      	bne.n	800c386 <tcp_process_refused_data+0x22>
 800c372:	4b37      	ldr	r3, [pc, #220]	; (800c450 <tcp_process_refused_data+0xec>)
 800c374:	f240 6209 	movw	r2, #1545	; 0x609
 800c378:	4936      	ldr	r1, [pc, #216]	; (800c454 <tcp_process_refused_data+0xf0>)
 800c37a:	4837      	ldr	r0, [pc, #220]	; (800c458 <tcp_process_refused_data+0xf4>)
 800c37c:	f00a f848 	bl	8016410 <iprintf>
 800c380:	f06f 030f 	mvn.w	r3, #15
 800c384:	e060      	b.n	800c448 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c38a:	7b5b      	ldrb	r3, [r3, #13]
 800c38c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c392:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	2200      	movs	r2, #0
 800c398:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d00b      	beq.n	800c3bc <tcp_process_refused_data+0x58>
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	6918      	ldr	r0, [r3, #16]
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	68ba      	ldr	r2, [r7, #8]
 800c3b2:	6879      	ldr	r1, [r7, #4]
 800c3b4:	47a0      	blx	r4
 800c3b6:	4603      	mov	r3, r0
 800c3b8:	73fb      	strb	r3, [r7, #15]
 800c3ba:	e007      	b.n	800c3cc <tcp_process_refused_data+0x68>
 800c3bc:	2300      	movs	r3, #0
 800c3be:	68ba      	ldr	r2, [r7, #8]
 800c3c0:	6879      	ldr	r1, [r7, #4]
 800c3c2:	2000      	movs	r0, #0
 800c3c4:	f000 f8a4 	bl	800c510 <tcp_recv_null>
 800c3c8:	4603      	mov	r3, r0
 800c3ca:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800c3cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d12a      	bne.n	800c42a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800c3d4:	7bbb      	ldrb	r3, [r7, #14]
 800c3d6:	f003 0320 	and.w	r3, r3, #32
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d033      	beq.n	800c446 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c3e2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c3e6:	d005      	beq.n	800c3f4 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c3ec:	3301      	adds	r3, #1
 800c3ee:	b29a      	uxth	r2, r3
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d00b      	beq.n	800c416 <tcp_process_refused_data+0xb2>
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	6918      	ldr	r0, [r3, #16]
 800c408:	2300      	movs	r3, #0
 800c40a:	2200      	movs	r2, #0
 800c40c:	6879      	ldr	r1, [r7, #4]
 800c40e:	47a0      	blx	r4
 800c410:	4603      	mov	r3, r0
 800c412:	73fb      	strb	r3, [r7, #15]
 800c414:	e001      	b.n	800c41a <tcp_process_refused_data+0xb6>
 800c416:	2300      	movs	r3, #0
 800c418:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800c41a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c41e:	f113 0f0d 	cmn.w	r3, #13
 800c422:	d110      	bne.n	800c446 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800c424:	f06f 030c 	mvn.w	r3, #12
 800c428:	e00e      	b.n	800c448 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800c42a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c42e:	f113 0f0d 	cmn.w	r3, #13
 800c432:	d102      	bne.n	800c43a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800c434:	f06f 030c 	mvn.w	r3, #12
 800c438:	e006      	b.n	800c448 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	68ba      	ldr	r2, [r7, #8]
 800c43e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800c440:	f06f 0304 	mvn.w	r3, #4
 800c444:	e000      	b.n	800c448 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800c446:	2300      	movs	r3, #0
}
 800c448:	4618      	mov	r0, r3
 800c44a:	3714      	adds	r7, #20
 800c44c:	46bd      	mov	sp, r7
 800c44e:	bd90      	pop	{r4, r7, pc}
 800c450:	08018f24 	.word	0x08018f24
 800c454:	08019434 	.word	0x08019434
 800c458:	08018f68 	.word	0x08018f68

0800c45c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800c45c:	b580      	push	{r7, lr}
 800c45e:	b084      	sub	sp, #16
 800c460:	af00      	add	r7, sp, #0
 800c462:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800c464:	e007      	b.n	800c476 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800c46c:	6878      	ldr	r0, [r7, #4]
 800c46e:	f000 f80a 	bl	800c486 <tcp_seg_free>
    seg = next;
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d1f4      	bne.n	800c466 <tcp_segs_free+0xa>
  }
}
 800c47c:	bf00      	nop
 800c47e:	bf00      	nop
 800c480:	3710      	adds	r7, #16
 800c482:	46bd      	mov	sp, r7
 800c484:	bd80      	pop	{r7, pc}

0800c486 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800c486:	b580      	push	{r7, lr}
 800c488:	b082      	sub	sp, #8
 800c48a:	af00      	add	r7, sp, #0
 800c48c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	2b00      	cmp	r3, #0
 800c492:	d00c      	beq.n	800c4ae <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	685b      	ldr	r3, [r3, #4]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d004      	beq.n	800c4a6 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	685b      	ldr	r3, [r3, #4]
 800c4a0:	4618      	mov	r0, r3
 800c4a2:	f7fe fb07 	bl	800aab4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800c4a6:	6879      	ldr	r1, [r7, #4]
 800c4a8:	2003      	movs	r0, #3
 800c4aa:	f7fd fc53 	bl	8009d54 <memp_free>
  }
}
 800c4ae:	bf00      	nop
 800c4b0:	3708      	adds	r7, #8
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	bd80      	pop	{r7, pc}
	...

0800c4b8 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	b084      	sub	sp, #16
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d106      	bne.n	800c4d4 <tcp_seg_copy+0x1c>
 800c4c6:	4b0f      	ldr	r3, [pc, #60]	; (800c504 <tcp_seg_copy+0x4c>)
 800c4c8:	f240 6282 	movw	r2, #1666	; 0x682
 800c4cc:	490e      	ldr	r1, [pc, #56]	; (800c508 <tcp_seg_copy+0x50>)
 800c4ce:	480f      	ldr	r0, [pc, #60]	; (800c50c <tcp_seg_copy+0x54>)
 800c4d0:	f009 ff9e 	bl	8016410 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800c4d4:	2003      	movs	r0, #3
 800c4d6:	f7fd fbeb 	bl	8009cb0 <memp_malloc>
 800c4da:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d101      	bne.n	800c4e6 <tcp_seg_copy+0x2e>
    return NULL;
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	e00a      	b.n	800c4fc <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800c4e6:	2210      	movs	r2, #16
 800c4e8:	6879      	ldr	r1, [r7, #4]
 800c4ea:	68f8      	ldr	r0, [r7, #12]
 800c4ec:	f009 ff60 	bl	80163b0 <memcpy>
  pbuf_ref(cseg->p);
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	685b      	ldr	r3, [r3, #4]
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	f7fe fb83 	bl	800ac00 <pbuf_ref>
  return cseg;
 800c4fa:	68fb      	ldr	r3, [r7, #12]
}
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	3710      	adds	r7, #16
 800c500:	46bd      	mov	sp, r7
 800c502:	bd80      	pop	{r7, pc}
 800c504:	08018f24 	.word	0x08018f24
 800c508:	08019478 	.word	0x08019478
 800c50c:	08018f68 	.word	0x08018f68

0800c510 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800c510:	b580      	push	{r7, lr}
 800c512:	b084      	sub	sp, #16
 800c514:	af00      	add	r7, sp, #0
 800c516:	60f8      	str	r0, [r7, #12]
 800c518:	60b9      	str	r1, [r7, #8]
 800c51a:	607a      	str	r2, [r7, #4]
 800c51c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800c51e:	68bb      	ldr	r3, [r7, #8]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d109      	bne.n	800c538 <tcp_recv_null+0x28>
 800c524:	4b12      	ldr	r3, [pc, #72]	; (800c570 <tcp_recv_null+0x60>)
 800c526:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800c52a:	4912      	ldr	r1, [pc, #72]	; (800c574 <tcp_recv_null+0x64>)
 800c52c:	4812      	ldr	r0, [pc, #72]	; (800c578 <tcp_recv_null+0x68>)
 800c52e:	f009 ff6f 	bl	8016410 <iprintf>
 800c532:	f06f 030f 	mvn.w	r3, #15
 800c536:	e016      	b.n	800c566 <tcp_recv_null+0x56>

  if (p != NULL) {
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d009      	beq.n	800c552 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	891b      	ldrh	r3, [r3, #8]
 800c542:	4619      	mov	r1, r3
 800c544:	68b8      	ldr	r0, [r7, #8]
 800c546:	f7ff f9bb 	bl	800b8c0 <tcp_recved>
    pbuf_free(p);
 800c54a:	6878      	ldr	r0, [r7, #4]
 800c54c:	f7fe fab2 	bl	800aab4 <pbuf_free>
 800c550:	e008      	b.n	800c564 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800c552:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c556:	2b00      	cmp	r3, #0
 800c558:	d104      	bne.n	800c564 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800c55a:	68b8      	ldr	r0, [r7, #8]
 800c55c:	f7fe ffc8 	bl	800b4f0 <tcp_close>
 800c560:	4603      	mov	r3, r0
 800c562:	e000      	b.n	800c566 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800c564:	2300      	movs	r3, #0
}
 800c566:	4618      	mov	r0, r3
 800c568:	3710      	adds	r7, #16
 800c56a:	46bd      	mov	sp, r7
 800c56c:	bd80      	pop	{r7, pc}
 800c56e:	bf00      	nop
 800c570:	08018f24 	.word	0x08018f24
 800c574:	08019494 	.word	0x08019494
 800c578:	08018f68 	.word	0x08018f68

0800c57c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800c57c:	b580      	push	{r7, lr}
 800c57e:	b086      	sub	sp, #24
 800c580:	af00      	add	r7, sp, #0
 800c582:	4603      	mov	r3, r0
 800c584:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800c586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	db01      	blt.n	800c592 <tcp_kill_prio+0x16>
 800c58e:	79fb      	ldrb	r3, [r7, #7]
 800c590:	e000      	b.n	800c594 <tcp_kill_prio+0x18>
 800c592:	237f      	movs	r3, #127	; 0x7f
 800c594:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800c596:	7afb      	ldrb	r3, [r7, #11]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d034      	beq.n	800c606 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800c59c:	7afb      	ldrb	r3, [r7, #11]
 800c59e:	3b01      	subs	r3, #1
 800c5a0:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c5aa:	4b19      	ldr	r3, [pc, #100]	; (800c610 <tcp_kill_prio+0x94>)
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	617b      	str	r3, [r7, #20]
 800c5b0:	e01f      	b.n	800c5f2 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800c5b2:	697b      	ldr	r3, [r7, #20]
 800c5b4:	7d5b      	ldrb	r3, [r3, #21]
 800c5b6:	7afa      	ldrb	r2, [r7, #11]
 800c5b8:	429a      	cmp	r2, r3
 800c5ba:	d80c      	bhi.n	800c5d6 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800c5bc:	697b      	ldr	r3, [r7, #20]
 800c5be:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800c5c0:	7afa      	ldrb	r2, [r7, #11]
 800c5c2:	429a      	cmp	r2, r3
 800c5c4:	d112      	bne.n	800c5ec <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800c5c6:	4b13      	ldr	r3, [pc, #76]	; (800c614 <tcp_kill_prio+0x98>)
 800c5c8:	681a      	ldr	r2, [r3, #0]
 800c5ca:	697b      	ldr	r3, [r7, #20]
 800c5cc:	6a1b      	ldr	r3, [r3, #32]
 800c5ce:	1ad3      	subs	r3, r2, r3
 800c5d0:	68fa      	ldr	r2, [r7, #12]
 800c5d2:	429a      	cmp	r2, r3
 800c5d4:	d80a      	bhi.n	800c5ec <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800c5d6:	4b0f      	ldr	r3, [pc, #60]	; (800c614 <tcp_kill_prio+0x98>)
 800c5d8:	681a      	ldr	r2, [r3, #0]
 800c5da:	697b      	ldr	r3, [r7, #20]
 800c5dc:	6a1b      	ldr	r3, [r3, #32]
 800c5de:	1ad3      	subs	r3, r2, r3
 800c5e0:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800c5e2:	697b      	ldr	r3, [r7, #20]
 800c5e4:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800c5e6:	697b      	ldr	r3, [r7, #20]
 800c5e8:	7d5b      	ldrb	r3, [r3, #21]
 800c5ea:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c5ec:	697b      	ldr	r3, [r7, #20]
 800c5ee:	68db      	ldr	r3, [r3, #12]
 800c5f0:	617b      	str	r3, [r7, #20]
 800c5f2:	697b      	ldr	r3, [r7, #20]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d1dc      	bne.n	800c5b2 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800c5f8:	693b      	ldr	r3, [r7, #16]
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d004      	beq.n	800c608 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800c5fe:	6938      	ldr	r0, [r7, #16]
 800c600:	f7ff f860 	bl	800b6c4 <tcp_abort>
 800c604:	e000      	b.n	800c608 <tcp_kill_prio+0x8c>
    return;
 800c606:	bf00      	nop
  }
}
 800c608:	3718      	adds	r7, #24
 800c60a:	46bd      	mov	sp, r7
 800c60c:	bd80      	pop	{r7, pc}
 800c60e:	bf00      	nop
 800c610:	2001aec0 	.word	0x2001aec0
 800c614:	2001aeb4 	.word	0x2001aeb4

0800c618 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800c618:	b580      	push	{r7, lr}
 800c61a:	b086      	sub	sp, #24
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	4603      	mov	r3, r0
 800c620:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800c622:	79fb      	ldrb	r3, [r7, #7]
 800c624:	2b08      	cmp	r3, #8
 800c626:	d009      	beq.n	800c63c <tcp_kill_state+0x24>
 800c628:	79fb      	ldrb	r3, [r7, #7]
 800c62a:	2b09      	cmp	r3, #9
 800c62c:	d006      	beq.n	800c63c <tcp_kill_state+0x24>
 800c62e:	4b1a      	ldr	r3, [pc, #104]	; (800c698 <tcp_kill_state+0x80>)
 800c630:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800c634:	4919      	ldr	r1, [pc, #100]	; (800c69c <tcp_kill_state+0x84>)
 800c636:	481a      	ldr	r0, [pc, #104]	; (800c6a0 <tcp_kill_state+0x88>)
 800c638:	f009 feea 	bl	8016410 <iprintf>

  inactivity = 0;
 800c63c:	2300      	movs	r3, #0
 800c63e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800c640:	2300      	movs	r3, #0
 800c642:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c644:	4b17      	ldr	r3, [pc, #92]	; (800c6a4 <tcp_kill_state+0x8c>)
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	617b      	str	r3, [r7, #20]
 800c64a:	e017      	b.n	800c67c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800c64c:	697b      	ldr	r3, [r7, #20]
 800c64e:	7d1b      	ldrb	r3, [r3, #20]
 800c650:	79fa      	ldrb	r2, [r7, #7]
 800c652:	429a      	cmp	r2, r3
 800c654:	d10f      	bne.n	800c676 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800c656:	4b14      	ldr	r3, [pc, #80]	; (800c6a8 <tcp_kill_state+0x90>)
 800c658:	681a      	ldr	r2, [r3, #0]
 800c65a:	697b      	ldr	r3, [r7, #20]
 800c65c:	6a1b      	ldr	r3, [r3, #32]
 800c65e:	1ad3      	subs	r3, r2, r3
 800c660:	68fa      	ldr	r2, [r7, #12]
 800c662:	429a      	cmp	r2, r3
 800c664:	d807      	bhi.n	800c676 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800c666:	4b10      	ldr	r3, [pc, #64]	; (800c6a8 <tcp_kill_state+0x90>)
 800c668:	681a      	ldr	r2, [r3, #0]
 800c66a:	697b      	ldr	r3, [r7, #20]
 800c66c:	6a1b      	ldr	r3, [r3, #32]
 800c66e:	1ad3      	subs	r3, r2, r3
 800c670:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800c672:	697b      	ldr	r3, [r7, #20]
 800c674:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c676:	697b      	ldr	r3, [r7, #20]
 800c678:	68db      	ldr	r3, [r3, #12]
 800c67a:	617b      	str	r3, [r7, #20]
 800c67c:	697b      	ldr	r3, [r7, #20]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d1e4      	bne.n	800c64c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800c682:	693b      	ldr	r3, [r7, #16]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d003      	beq.n	800c690 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800c688:	2100      	movs	r1, #0
 800c68a:	6938      	ldr	r0, [r7, #16]
 800c68c:	f7fe ff5c 	bl	800b548 <tcp_abandon>
  }
}
 800c690:	bf00      	nop
 800c692:	3718      	adds	r7, #24
 800c694:	46bd      	mov	sp, r7
 800c696:	bd80      	pop	{r7, pc}
 800c698:	08018f24 	.word	0x08018f24
 800c69c:	080194b0 	.word	0x080194b0
 800c6a0:	08018f68 	.word	0x08018f68
 800c6a4:	2001aec0 	.word	0x2001aec0
 800c6a8:	2001aeb4 	.word	0x2001aeb4

0800c6ac <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800c6ac:	b580      	push	{r7, lr}
 800c6ae:	b084      	sub	sp, #16
 800c6b0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c6ba:	4b12      	ldr	r3, [pc, #72]	; (800c704 <tcp_kill_timewait+0x58>)
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	60fb      	str	r3, [r7, #12]
 800c6c0:	e012      	b.n	800c6e8 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800c6c2:	4b11      	ldr	r3, [pc, #68]	; (800c708 <tcp_kill_timewait+0x5c>)
 800c6c4:	681a      	ldr	r2, [r3, #0]
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	6a1b      	ldr	r3, [r3, #32]
 800c6ca:	1ad3      	subs	r3, r2, r3
 800c6cc:	687a      	ldr	r2, [r7, #4]
 800c6ce:	429a      	cmp	r2, r3
 800c6d0:	d807      	bhi.n	800c6e2 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800c6d2:	4b0d      	ldr	r3, [pc, #52]	; (800c708 <tcp_kill_timewait+0x5c>)
 800c6d4:	681a      	ldr	r2, [r3, #0]
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	6a1b      	ldr	r3, [r3, #32]
 800c6da:	1ad3      	subs	r3, r2, r3
 800c6dc:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	68db      	ldr	r3, [r3, #12]
 800c6e6:	60fb      	str	r3, [r7, #12]
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d1e9      	bne.n	800c6c2 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800c6ee:	68bb      	ldr	r3, [r7, #8]
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d002      	beq.n	800c6fa <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800c6f4:	68b8      	ldr	r0, [r7, #8]
 800c6f6:	f7fe ffe5 	bl	800b6c4 <tcp_abort>
  }
}
 800c6fa:	bf00      	nop
 800c6fc:	3710      	adds	r7, #16
 800c6fe:	46bd      	mov	sp, r7
 800c700:	bd80      	pop	{r7, pc}
 800c702:	bf00      	nop
 800c704:	2001aec4 	.word	0x2001aec4
 800c708:	2001aeb4 	.word	0x2001aeb4

0800c70c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800c70c:	b580      	push	{r7, lr}
 800c70e:	b082      	sub	sp, #8
 800c710:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800c712:	4b10      	ldr	r3, [pc, #64]	; (800c754 <tcp_handle_closepend+0x48>)
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800c718:	e014      	b.n	800c744 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	68db      	ldr	r3, [r3, #12]
 800c71e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	8b5b      	ldrh	r3, [r3, #26]
 800c724:	f003 0308 	and.w	r3, r3, #8
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d009      	beq.n	800c740 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	8b5b      	ldrh	r3, [r3, #26]
 800c730:	f023 0308 	bic.w	r3, r3, #8
 800c734:	b29a      	uxth	r2, r3
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800c73a:	6878      	ldr	r0, [r7, #4]
 800c73c:	f7fe fe6e 	bl	800b41c <tcp_close_shutdown_fin>
    }
    pcb = next;
 800c740:	683b      	ldr	r3, [r7, #0]
 800c742:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	2b00      	cmp	r3, #0
 800c748:	d1e7      	bne.n	800c71a <tcp_handle_closepend+0xe>
  }
}
 800c74a:	bf00      	nop
 800c74c:	bf00      	nop
 800c74e:	3708      	adds	r7, #8
 800c750:	46bd      	mov	sp, r7
 800c752:	bd80      	pop	{r7, pc}
 800c754:	2001aec0 	.word	0x2001aec0

0800c758 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800c758:	b580      	push	{r7, lr}
 800c75a:	b084      	sub	sp, #16
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	4603      	mov	r3, r0
 800c760:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c762:	2001      	movs	r0, #1
 800c764:	f7fd faa4 	bl	8009cb0 <memp_malloc>
 800c768:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d126      	bne.n	800c7be <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800c770:	f7ff ffcc 	bl	800c70c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800c774:	f7ff ff9a 	bl	800c6ac <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c778:	2001      	movs	r0, #1
 800c77a:	f7fd fa99 	bl	8009cb0 <memp_malloc>
 800c77e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	2b00      	cmp	r3, #0
 800c784:	d11b      	bne.n	800c7be <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800c786:	2009      	movs	r0, #9
 800c788:	f7ff ff46 	bl	800c618 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c78c:	2001      	movs	r0, #1
 800c78e:	f7fd fa8f 	bl	8009cb0 <memp_malloc>
 800c792:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	2b00      	cmp	r3, #0
 800c798:	d111      	bne.n	800c7be <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800c79a:	2008      	movs	r0, #8
 800c79c:	f7ff ff3c 	bl	800c618 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c7a0:	2001      	movs	r0, #1
 800c7a2:	f7fd fa85 	bl	8009cb0 <memp_malloc>
 800c7a6:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d107      	bne.n	800c7be <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800c7ae:	79fb      	ldrb	r3, [r7, #7]
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	f7ff fee3 	bl	800c57c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c7b6:	2001      	movs	r0, #1
 800c7b8:	f7fd fa7a 	bl	8009cb0 <memp_malloc>
 800c7bc:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d03f      	beq.n	800c844 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800c7c4:	229c      	movs	r2, #156	; 0x9c
 800c7c6:	2100      	movs	r1, #0
 800c7c8:	68f8      	ldr	r0, [r7, #12]
 800c7ca:	f009 fe19 	bl	8016400 <memset>
    pcb->prio = prio;
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	79fa      	ldrb	r2, [r7, #7]
 800c7d2:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800c7da:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800c7e4:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	22ff      	movs	r2, #255	; 0xff
 800c7f2:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	f44f 7206 	mov.w	r2, #536	; 0x218
 800c7fa:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	2206      	movs	r2, #6
 800c800:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	2206      	movs	r2, #6
 800c808:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c810:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	2201      	movs	r2, #1
 800c816:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800c81a:	4b0d      	ldr	r3, [pc, #52]	; (800c850 <tcp_alloc+0xf8>)
 800c81c:	681a      	ldr	r2, [r3, #0]
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800c822:	4b0c      	ldr	r3, [pc, #48]	; (800c854 <tcp_alloc+0xfc>)
 800c824:	781a      	ldrb	r2, [r3, #0]
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800c830:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	4a08      	ldr	r2, [pc, #32]	; (800c858 <tcp_alloc+0x100>)
 800c838:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	4a07      	ldr	r2, [pc, #28]	; (800c85c <tcp_alloc+0x104>)
 800c840:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800c844:	68fb      	ldr	r3, [r7, #12]
}
 800c846:	4618      	mov	r0, r3
 800c848:	3710      	adds	r7, #16
 800c84a:	46bd      	mov	sp, r7
 800c84c:	bd80      	pop	{r7, pc}
 800c84e:	bf00      	nop
 800c850:	2001aeb4 	.word	0x2001aeb4
 800c854:	2001aeca 	.word	0x2001aeca
 800c858:	0800c511 	.word	0x0800c511
 800c85c:	006ddd00 	.word	0x006ddd00

0800c860 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800c860:	b580      	push	{r7, lr}
 800c862:	b084      	sub	sp, #16
 800c864:	af00      	add	r7, sp, #0
 800c866:	4603      	mov	r3, r0
 800c868:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800c86a:	2040      	movs	r0, #64	; 0x40
 800c86c:	f7ff ff74 	bl	800c758 <tcp_alloc>
 800c870:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800c872:	68fb      	ldr	r3, [r7, #12]
}
 800c874:	4618      	mov	r0, r3
 800c876:	3710      	adds	r7, #16
 800c878:	46bd      	mov	sp, r7
 800c87a:	bd80      	pop	{r7, pc}

0800c87c <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800c87c:	b480      	push	{r7}
 800c87e:	b083      	sub	sp, #12
 800c880:	af00      	add	r7, sp, #0
 800c882:	6078      	str	r0, [r7, #4]
 800c884:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d002      	beq.n	800c892 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	683a      	ldr	r2, [r7, #0]
 800c890:	611a      	str	r2, [r3, #16]
  }
}
 800c892:	bf00      	nop
 800c894:	370c      	adds	r7, #12
 800c896:	46bd      	mov	sp, r7
 800c898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c89c:	4770      	bx	lr
	...

0800c8a0 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800c8a0:	b580      	push	{r7, lr}
 800c8a2:	b082      	sub	sp, #8
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	6078      	str	r0, [r7, #4]
 800c8a8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d00e      	beq.n	800c8ce <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	7d1b      	ldrb	r3, [r3, #20]
 800c8b4:	2b01      	cmp	r3, #1
 800c8b6:	d106      	bne.n	800c8c6 <tcp_recv+0x26>
 800c8b8:	4b07      	ldr	r3, [pc, #28]	; (800c8d8 <tcp_recv+0x38>)
 800c8ba:	f240 72df 	movw	r2, #2015	; 0x7df
 800c8be:	4907      	ldr	r1, [pc, #28]	; (800c8dc <tcp_recv+0x3c>)
 800c8c0:	4807      	ldr	r0, [pc, #28]	; (800c8e0 <tcp_recv+0x40>)
 800c8c2:	f009 fda5 	bl	8016410 <iprintf>
    pcb->recv = recv;
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	683a      	ldr	r2, [r7, #0]
 800c8ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800c8ce:	bf00      	nop
 800c8d0:	3708      	adds	r7, #8
 800c8d2:	46bd      	mov	sp, r7
 800c8d4:	bd80      	pop	{r7, pc}
 800c8d6:	bf00      	nop
 800c8d8:	08018f24 	.word	0x08018f24
 800c8dc:	080194c0 	.word	0x080194c0
 800c8e0:	08018f68 	.word	0x08018f68

0800c8e4 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	b082      	sub	sp, #8
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
 800c8ec:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d00e      	beq.n	800c912 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	7d1b      	ldrb	r3, [r3, #20]
 800c8f8:	2b01      	cmp	r3, #1
 800c8fa:	d106      	bne.n	800c90a <tcp_sent+0x26>
 800c8fc:	4b07      	ldr	r3, [pc, #28]	; (800c91c <tcp_sent+0x38>)
 800c8fe:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800c902:	4907      	ldr	r1, [pc, #28]	; (800c920 <tcp_sent+0x3c>)
 800c904:	4807      	ldr	r0, [pc, #28]	; (800c924 <tcp_sent+0x40>)
 800c906:	f009 fd83 	bl	8016410 <iprintf>
    pcb->sent = sent;
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	683a      	ldr	r2, [r7, #0]
 800c90e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800c912:	bf00      	nop
 800c914:	3708      	adds	r7, #8
 800c916:	46bd      	mov	sp, r7
 800c918:	bd80      	pop	{r7, pc}
 800c91a:	bf00      	nop
 800c91c:	08018f24 	.word	0x08018f24
 800c920:	080194e8 	.word	0x080194e8
 800c924:	08018f68 	.word	0x08018f68

0800c928 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800c928:	b580      	push	{r7, lr}
 800c92a:	b082      	sub	sp, #8
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	6078      	str	r0, [r7, #4]
 800c930:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	2b00      	cmp	r3, #0
 800c936:	d00e      	beq.n	800c956 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	7d1b      	ldrb	r3, [r3, #20]
 800c93c:	2b01      	cmp	r3, #1
 800c93e:	d106      	bne.n	800c94e <tcp_err+0x26>
 800c940:	4b07      	ldr	r3, [pc, #28]	; (800c960 <tcp_err+0x38>)
 800c942:	f640 020d 	movw	r2, #2061	; 0x80d
 800c946:	4907      	ldr	r1, [pc, #28]	; (800c964 <tcp_err+0x3c>)
 800c948:	4807      	ldr	r0, [pc, #28]	; (800c968 <tcp_err+0x40>)
 800c94a:	f009 fd61 	bl	8016410 <iprintf>
    pcb->errf = err;
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	683a      	ldr	r2, [r7, #0]
 800c952:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800c956:	bf00      	nop
 800c958:	3708      	adds	r7, #8
 800c95a:	46bd      	mov	sp, r7
 800c95c:	bd80      	pop	{r7, pc}
 800c95e:	bf00      	nop
 800c960:	08018f24 	.word	0x08018f24
 800c964:	08019510 	.word	0x08019510
 800c968:	08018f68 	.word	0x08018f68

0800c96c <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800c96c:	b580      	push	{r7, lr}
 800c96e:	b084      	sub	sp, #16
 800c970:	af00      	add	r7, sp, #0
 800c972:	60f8      	str	r0, [r7, #12]
 800c974:	60b9      	str	r1, [r7, #8]
 800c976:	4613      	mov	r3, r2
 800c978:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d107      	bne.n	800c990 <tcp_poll+0x24>
 800c980:	4b0e      	ldr	r3, [pc, #56]	; (800c9bc <tcp_poll+0x50>)
 800c982:	f640 023d 	movw	r2, #2109	; 0x83d
 800c986:	490e      	ldr	r1, [pc, #56]	; (800c9c0 <tcp_poll+0x54>)
 800c988:	480e      	ldr	r0, [pc, #56]	; (800c9c4 <tcp_poll+0x58>)
 800c98a:	f009 fd41 	bl	8016410 <iprintf>
 800c98e:	e011      	b.n	800c9b4 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	7d1b      	ldrb	r3, [r3, #20]
 800c994:	2b01      	cmp	r3, #1
 800c996:	d106      	bne.n	800c9a6 <tcp_poll+0x3a>
 800c998:	4b08      	ldr	r3, [pc, #32]	; (800c9bc <tcp_poll+0x50>)
 800c99a:	f640 023e 	movw	r2, #2110	; 0x83e
 800c99e:	490a      	ldr	r1, [pc, #40]	; (800c9c8 <tcp_poll+0x5c>)
 800c9a0:	4808      	ldr	r0, [pc, #32]	; (800c9c4 <tcp_poll+0x58>)
 800c9a2:	f009 fd35 	bl	8016410 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	68ba      	ldr	r2, [r7, #8]
 800c9aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	79fa      	ldrb	r2, [r7, #7]
 800c9b2:	775a      	strb	r2, [r3, #29]
}
 800c9b4:	3710      	adds	r7, #16
 800c9b6:	46bd      	mov	sp, r7
 800c9b8:	bd80      	pop	{r7, pc}
 800c9ba:	bf00      	nop
 800c9bc:	08018f24 	.word	0x08018f24
 800c9c0:	08019538 	.word	0x08019538
 800c9c4:	08018f68 	.word	0x08018f68
 800c9c8:	08019550 	.word	0x08019550

0800c9cc <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800c9cc:	b580      	push	{r7, lr}
 800c9ce:	b082      	sub	sp, #8
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d107      	bne.n	800c9ea <tcp_pcb_purge+0x1e>
 800c9da:	4b21      	ldr	r3, [pc, #132]	; (800ca60 <tcp_pcb_purge+0x94>)
 800c9dc:	f640 0251 	movw	r2, #2129	; 0x851
 800c9e0:	4920      	ldr	r1, [pc, #128]	; (800ca64 <tcp_pcb_purge+0x98>)
 800c9e2:	4821      	ldr	r0, [pc, #132]	; (800ca68 <tcp_pcb_purge+0x9c>)
 800c9e4:	f009 fd14 	bl	8016410 <iprintf>
 800c9e8:	e037      	b.n	800ca5a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	7d1b      	ldrb	r3, [r3, #20]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d033      	beq.n	800ca5a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800c9f6:	2b0a      	cmp	r3, #10
 800c9f8:	d02f      	beq.n	800ca5a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800c9fe:	2b01      	cmp	r3, #1
 800ca00:	d02b      	beq.n	800ca5a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d007      	beq.n	800ca1a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ca0e:	4618      	mov	r0, r3
 800ca10:	f7fe f850 	bl	800aab4 <pbuf_free>
      pcb->refused_data = NULL;
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	2200      	movs	r2, #0
 800ca18:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d002      	beq.n	800ca28 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800ca22:	6878      	ldr	r0, [r7, #4]
 800ca24:	f000 f986 	bl	800cd34 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ca2e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca34:	4618      	mov	r0, r3
 800ca36:	f7ff fd11 	bl	800c45c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca3e:	4618      	mov	r0, r3
 800ca40:	f7ff fd0c 	bl	800c45c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	2200      	movs	r2, #0
 800ca48:	66da      	str	r2, [r3, #108]	; 0x6c
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	2200      	movs	r2, #0
 800ca56:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800ca5a:	3708      	adds	r7, #8
 800ca5c:	46bd      	mov	sp, r7
 800ca5e:	bd80      	pop	{r7, pc}
 800ca60:	08018f24 	.word	0x08018f24
 800ca64:	08019570 	.word	0x08019570
 800ca68:	08018f68 	.word	0x08018f68

0800ca6c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800ca6c:	b580      	push	{r7, lr}
 800ca6e:	b084      	sub	sp, #16
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	6078      	str	r0, [r7, #4]
 800ca74:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800ca76:	683b      	ldr	r3, [r7, #0]
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d106      	bne.n	800ca8a <tcp_pcb_remove+0x1e>
 800ca7c:	4b3e      	ldr	r3, [pc, #248]	; (800cb78 <tcp_pcb_remove+0x10c>)
 800ca7e:	f640 0283 	movw	r2, #2179	; 0x883
 800ca82:	493e      	ldr	r1, [pc, #248]	; (800cb7c <tcp_pcb_remove+0x110>)
 800ca84:	483e      	ldr	r0, [pc, #248]	; (800cb80 <tcp_pcb_remove+0x114>)
 800ca86:	f009 fcc3 	bl	8016410 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d106      	bne.n	800ca9e <tcp_pcb_remove+0x32>
 800ca90:	4b39      	ldr	r3, [pc, #228]	; (800cb78 <tcp_pcb_remove+0x10c>)
 800ca92:	f640 0284 	movw	r2, #2180	; 0x884
 800ca96:	493b      	ldr	r1, [pc, #236]	; (800cb84 <tcp_pcb_remove+0x118>)
 800ca98:	4839      	ldr	r0, [pc, #228]	; (800cb80 <tcp_pcb_remove+0x114>)
 800ca9a:	f009 fcb9 	bl	8016410 <iprintf>

  TCP_RMV(pcblist, pcb);
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	683a      	ldr	r2, [r7, #0]
 800caa4:	429a      	cmp	r2, r3
 800caa6:	d105      	bne.n	800cab4 <tcp_pcb_remove+0x48>
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	68da      	ldr	r2, [r3, #12]
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	601a      	str	r2, [r3, #0]
 800cab2:	e013      	b.n	800cadc <tcp_pcb_remove+0x70>
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	60fb      	str	r3, [r7, #12]
 800caba:	e00c      	b.n	800cad6 <tcp_pcb_remove+0x6a>
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	68db      	ldr	r3, [r3, #12]
 800cac0:	683a      	ldr	r2, [r7, #0]
 800cac2:	429a      	cmp	r2, r3
 800cac4:	d104      	bne.n	800cad0 <tcp_pcb_remove+0x64>
 800cac6:	683b      	ldr	r3, [r7, #0]
 800cac8:	68da      	ldr	r2, [r3, #12]
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	60da      	str	r2, [r3, #12]
 800cace:	e005      	b.n	800cadc <tcp_pcb_remove+0x70>
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	68db      	ldr	r3, [r3, #12]
 800cad4:	60fb      	str	r3, [r7, #12]
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d1ef      	bne.n	800cabc <tcp_pcb_remove+0x50>
 800cadc:	683b      	ldr	r3, [r7, #0]
 800cade:	2200      	movs	r2, #0
 800cae0:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800cae2:	6838      	ldr	r0, [r7, #0]
 800cae4:	f7ff ff72 	bl	800c9cc <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800cae8:	683b      	ldr	r3, [r7, #0]
 800caea:	7d1b      	ldrb	r3, [r3, #20]
 800caec:	2b0a      	cmp	r3, #10
 800caee:	d013      	beq.n	800cb18 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800caf0:	683b      	ldr	r3, [r7, #0]
 800caf2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800caf4:	2b01      	cmp	r3, #1
 800caf6:	d00f      	beq.n	800cb18 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800caf8:	683b      	ldr	r3, [r7, #0]
 800cafa:	8b5b      	ldrh	r3, [r3, #26]
 800cafc:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d009      	beq.n	800cb18 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800cb04:	683b      	ldr	r3, [r7, #0]
 800cb06:	8b5b      	ldrh	r3, [r3, #26]
 800cb08:	f043 0302 	orr.w	r3, r3, #2
 800cb0c:	b29a      	uxth	r2, r3
 800cb0e:	683b      	ldr	r3, [r7, #0]
 800cb10:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800cb12:	6838      	ldr	r0, [r7, #0]
 800cb14:	f003 fbc6 	bl	80102a4 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800cb18:	683b      	ldr	r3, [r7, #0]
 800cb1a:	7d1b      	ldrb	r3, [r3, #20]
 800cb1c:	2b01      	cmp	r3, #1
 800cb1e:	d020      	beq.n	800cb62 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800cb20:	683b      	ldr	r3, [r7, #0]
 800cb22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d006      	beq.n	800cb36 <tcp_pcb_remove+0xca>
 800cb28:	4b13      	ldr	r3, [pc, #76]	; (800cb78 <tcp_pcb_remove+0x10c>)
 800cb2a:	f640 0293 	movw	r2, #2195	; 0x893
 800cb2e:	4916      	ldr	r1, [pc, #88]	; (800cb88 <tcp_pcb_remove+0x11c>)
 800cb30:	4813      	ldr	r0, [pc, #76]	; (800cb80 <tcp_pcb_remove+0x114>)
 800cb32:	f009 fc6d 	bl	8016410 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800cb36:	683b      	ldr	r3, [r7, #0]
 800cb38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d006      	beq.n	800cb4c <tcp_pcb_remove+0xe0>
 800cb3e:	4b0e      	ldr	r3, [pc, #56]	; (800cb78 <tcp_pcb_remove+0x10c>)
 800cb40:	f640 0294 	movw	r2, #2196	; 0x894
 800cb44:	4911      	ldr	r1, [pc, #68]	; (800cb8c <tcp_pcb_remove+0x120>)
 800cb46:	480e      	ldr	r0, [pc, #56]	; (800cb80 <tcp_pcb_remove+0x114>)
 800cb48:	f009 fc62 	bl	8016410 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800cb4c:	683b      	ldr	r3, [r7, #0]
 800cb4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d006      	beq.n	800cb62 <tcp_pcb_remove+0xf6>
 800cb54:	4b08      	ldr	r3, [pc, #32]	; (800cb78 <tcp_pcb_remove+0x10c>)
 800cb56:	f640 0296 	movw	r2, #2198	; 0x896
 800cb5a:	490d      	ldr	r1, [pc, #52]	; (800cb90 <tcp_pcb_remove+0x124>)
 800cb5c:	4808      	ldr	r0, [pc, #32]	; (800cb80 <tcp_pcb_remove+0x114>)
 800cb5e:	f009 fc57 	bl	8016410 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800cb62:	683b      	ldr	r3, [r7, #0]
 800cb64:	2200      	movs	r2, #0
 800cb66:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800cb68:	683b      	ldr	r3, [r7, #0]
 800cb6a:	2200      	movs	r2, #0
 800cb6c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800cb6e:	bf00      	nop
 800cb70:	3710      	adds	r7, #16
 800cb72:	46bd      	mov	sp, r7
 800cb74:	bd80      	pop	{r7, pc}
 800cb76:	bf00      	nop
 800cb78:	08018f24 	.word	0x08018f24
 800cb7c:	0801958c 	.word	0x0801958c
 800cb80:	08018f68 	.word	0x08018f68
 800cb84:	080195a8 	.word	0x080195a8
 800cb88:	080195c8 	.word	0x080195c8
 800cb8c:	080195e0 	.word	0x080195e0
 800cb90:	080195fc 	.word	0x080195fc

0800cb94 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800cb94:	b580      	push	{r7, lr}
 800cb96:	b082      	sub	sp, #8
 800cb98:	af00      	add	r7, sp, #0
 800cb9a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d106      	bne.n	800cbb0 <tcp_next_iss+0x1c>
 800cba2:	4b0a      	ldr	r3, [pc, #40]	; (800cbcc <tcp_next_iss+0x38>)
 800cba4:	f640 02af 	movw	r2, #2223	; 0x8af
 800cba8:	4909      	ldr	r1, [pc, #36]	; (800cbd0 <tcp_next_iss+0x3c>)
 800cbaa:	480a      	ldr	r0, [pc, #40]	; (800cbd4 <tcp_next_iss+0x40>)
 800cbac:	f009 fc30 	bl	8016410 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800cbb0:	4b09      	ldr	r3, [pc, #36]	; (800cbd8 <tcp_next_iss+0x44>)
 800cbb2:	681a      	ldr	r2, [r3, #0]
 800cbb4:	4b09      	ldr	r3, [pc, #36]	; (800cbdc <tcp_next_iss+0x48>)
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	4413      	add	r3, r2
 800cbba:	4a07      	ldr	r2, [pc, #28]	; (800cbd8 <tcp_next_iss+0x44>)
 800cbbc:	6013      	str	r3, [r2, #0]
  return iss;
 800cbbe:	4b06      	ldr	r3, [pc, #24]	; (800cbd8 <tcp_next_iss+0x44>)
 800cbc0:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	3708      	adds	r7, #8
 800cbc6:	46bd      	mov	sp, r7
 800cbc8:	bd80      	pop	{r7, pc}
 800cbca:	bf00      	nop
 800cbcc:	08018f24 	.word	0x08018f24
 800cbd0:	08019614 	.word	0x08019614
 800cbd4:	08018f68 	.word	0x08018f68
 800cbd8:	20000018 	.word	0x20000018
 800cbdc:	2001aeb4 	.word	0x2001aeb4

0800cbe0 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	b086      	sub	sp, #24
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	4603      	mov	r3, r0
 800cbe8:	60b9      	str	r1, [r7, #8]
 800cbea:	607a      	str	r2, [r7, #4]
 800cbec:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d106      	bne.n	800cc02 <tcp_eff_send_mss_netif+0x22>
 800cbf4:	4b14      	ldr	r3, [pc, #80]	; (800cc48 <tcp_eff_send_mss_netif+0x68>)
 800cbf6:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800cbfa:	4914      	ldr	r1, [pc, #80]	; (800cc4c <tcp_eff_send_mss_netif+0x6c>)
 800cbfc:	4814      	ldr	r0, [pc, #80]	; (800cc50 <tcp_eff_send_mss_netif+0x70>)
 800cbfe:	f009 fc07 	bl	8016410 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800cc02:	68bb      	ldr	r3, [r7, #8]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d101      	bne.n	800cc0c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800cc08:	89fb      	ldrh	r3, [r7, #14]
 800cc0a:	e019      	b.n	800cc40 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800cc0c:	68bb      	ldr	r3, [r7, #8]
 800cc0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cc10:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800cc12:	8afb      	ldrh	r3, [r7, #22]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d012      	beq.n	800cc3e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800cc18:	2328      	movs	r3, #40	; 0x28
 800cc1a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800cc1c:	8afa      	ldrh	r2, [r7, #22]
 800cc1e:	8abb      	ldrh	r3, [r7, #20]
 800cc20:	429a      	cmp	r2, r3
 800cc22:	d904      	bls.n	800cc2e <tcp_eff_send_mss_netif+0x4e>
 800cc24:	8afa      	ldrh	r2, [r7, #22]
 800cc26:	8abb      	ldrh	r3, [r7, #20]
 800cc28:	1ad3      	subs	r3, r2, r3
 800cc2a:	b29b      	uxth	r3, r3
 800cc2c:	e000      	b.n	800cc30 <tcp_eff_send_mss_netif+0x50>
 800cc2e:	2300      	movs	r3, #0
 800cc30:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800cc32:	8a7a      	ldrh	r2, [r7, #18]
 800cc34:	89fb      	ldrh	r3, [r7, #14]
 800cc36:	4293      	cmp	r3, r2
 800cc38:	bf28      	it	cs
 800cc3a:	4613      	movcs	r3, r2
 800cc3c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800cc3e:	89fb      	ldrh	r3, [r7, #14]
}
 800cc40:	4618      	mov	r0, r3
 800cc42:	3718      	adds	r7, #24
 800cc44:	46bd      	mov	sp, r7
 800cc46:	bd80      	pop	{r7, pc}
 800cc48:	08018f24 	.word	0x08018f24
 800cc4c:	08019630 	.word	0x08019630
 800cc50:	08018f68 	.word	0x08018f68

0800cc54 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800cc54:	b580      	push	{r7, lr}
 800cc56:	b084      	sub	sp, #16
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	6078      	str	r0, [r7, #4]
 800cc5c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800cc5e:	683b      	ldr	r3, [r7, #0]
 800cc60:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d119      	bne.n	800cc9c <tcp_netif_ip_addr_changed_pcblist+0x48>
 800cc68:	4b10      	ldr	r3, [pc, #64]	; (800ccac <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800cc6a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800cc6e:	4910      	ldr	r1, [pc, #64]	; (800ccb0 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800cc70:	4810      	ldr	r0, [pc, #64]	; (800ccb4 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800cc72:	f009 fbcd 	bl	8016410 <iprintf>

  while (pcb != NULL) {
 800cc76:	e011      	b.n	800cc9c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	681a      	ldr	r2, [r3, #0]
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	429a      	cmp	r2, r3
 800cc82:	d108      	bne.n	800cc96 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	68db      	ldr	r3, [r3, #12]
 800cc88:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800cc8a:	68f8      	ldr	r0, [r7, #12]
 800cc8c:	f7fe fd1a 	bl	800b6c4 <tcp_abort>
      pcb = next;
 800cc90:	68bb      	ldr	r3, [r7, #8]
 800cc92:	60fb      	str	r3, [r7, #12]
 800cc94:	e002      	b.n	800cc9c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	68db      	ldr	r3, [r3, #12]
 800cc9a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d1ea      	bne.n	800cc78 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800cca2:	bf00      	nop
 800cca4:	bf00      	nop
 800cca6:	3710      	adds	r7, #16
 800cca8:	46bd      	mov	sp, r7
 800ccaa:	bd80      	pop	{r7, pc}
 800ccac:	08018f24 	.word	0x08018f24
 800ccb0:	08019658 	.word	0x08019658
 800ccb4:	08018f68 	.word	0x08018f68

0800ccb8 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ccb8:	b580      	push	{r7, lr}
 800ccba:	b084      	sub	sp, #16
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	6078      	str	r0, [r7, #4]
 800ccc0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d02a      	beq.n	800cd1e <tcp_netif_ip_addr_changed+0x66>
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d026      	beq.n	800cd1e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800ccd0:	4b15      	ldr	r3, [pc, #84]	; (800cd28 <tcp_netif_ip_addr_changed+0x70>)
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	4619      	mov	r1, r3
 800ccd6:	6878      	ldr	r0, [r7, #4]
 800ccd8:	f7ff ffbc 	bl	800cc54 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800ccdc:	4b13      	ldr	r3, [pc, #76]	; (800cd2c <tcp_netif_ip_addr_changed+0x74>)
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	4619      	mov	r1, r3
 800cce2:	6878      	ldr	r0, [r7, #4]
 800cce4:	f7ff ffb6 	bl	800cc54 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800cce8:	683b      	ldr	r3, [r7, #0]
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d017      	beq.n	800cd1e <tcp_netif_ip_addr_changed+0x66>
 800ccee:	683b      	ldr	r3, [r7, #0]
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d013      	beq.n	800cd1e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ccf6:	4b0e      	ldr	r3, [pc, #56]	; (800cd30 <tcp_netif_ip_addr_changed+0x78>)
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	60fb      	str	r3, [r7, #12]
 800ccfc:	e00c      	b.n	800cd18 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	681a      	ldr	r2, [r3, #0]
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	429a      	cmp	r2, r3
 800cd08:	d103      	bne.n	800cd12 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800cd0a:	683b      	ldr	r3, [r7, #0]
 800cd0c:	681a      	ldr	r2, [r3, #0]
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	68db      	ldr	r3, [r3, #12]
 800cd16:	60fb      	str	r3, [r7, #12]
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d1ef      	bne.n	800ccfe <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800cd1e:	bf00      	nop
 800cd20:	3710      	adds	r7, #16
 800cd22:	46bd      	mov	sp, r7
 800cd24:	bd80      	pop	{r7, pc}
 800cd26:	bf00      	nop
 800cd28:	2001aec0 	.word	0x2001aec0
 800cd2c:	2001aeb8 	.word	0x2001aeb8
 800cd30:	2001aebc 	.word	0x2001aebc

0800cd34 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800cd34:	b580      	push	{r7, lr}
 800cd36:	b082      	sub	sp, #8
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d007      	beq.n	800cd54 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cd48:	4618      	mov	r0, r3
 800cd4a:	f7ff fb87 	bl	800c45c <tcp_segs_free>
    pcb->ooseq = NULL;
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	2200      	movs	r2, #0
 800cd52:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800cd54:	bf00      	nop
 800cd56:	3708      	adds	r7, #8
 800cd58:	46bd      	mov	sp, r7
 800cd5a:	bd80      	pop	{r7, pc}

0800cd5c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800cd5c:	b590      	push	{r4, r7, lr}
 800cd5e:	b08d      	sub	sp, #52	; 0x34
 800cd60:	af04      	add	r7, sp, #16
 800cd62:	6078      	str	r0, [r7, #4]
 800cd64:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d105      	bne.n	800cd78 <tcp_input+0x1c>
 800cd6c:	4b9b      	ldr	r3, [pc, #620]	; (800cfdc <tcp_input+0x280>)
 800cd6e:	2283      	movs	r2, #131	; 0x83
 800cd70:	499b      	ldr	r1, [pc, #620]	; (800cfe0 <tcp_input+0x284>)
 800cd72:	489c      	ldr	r0, [pc, #624]	; (800cfe4 <tcp_input+0x288>)
 800cd74:	f009 fb4c 	bl	8016410 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	685b      	ldr	r3, [r3, #4]
 800cd7c:	4a9a      	ldr	r2, [pc, #616]	; (800cfe8 <tcp_input+0x28c>)
 800cd7e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	895b      	ldrh	r3, [r3, #10]
 800cd84:	2b13      	cmp	r3, #19
 800cd86:	f240 83d1 	bls.w	800d52c <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800cd8a:	4b98      	ldr	r3, [pc, #608]	; (800cfec <tcp_input+0x290>)
 800cd8c:	695b      	ldr	r3, [r3, #20]
 800cd8e:	4a97      	ldr	r2, [pc, #604]	; (800cfec <tcp_input+0x290>)
 800cd90:	6812      	ldr	r2, [r2, #0]
 800cd92:	4611      	mov	r1, r2
 800cd94:	4618      	mov	r0, r3
 800cd96:	f008 fa8f 	bl	80152b8 <ip4_addr_isbroadcast_u32>
 800cd9a:	4603      	mov	r3, r0
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	f040 83c7 	bne.w	800d530 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800cda2:	4b92      	ldr	r3, [pc, #584]	; (800cfec <tcp_input+0x290>)
 800cda4:	695b      	ldr	r3, [r3, #20]
 800cda6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800cdaa:	2be0      	cmp	r3, #224	; 0xe0
 800cdac:	f000 83c0 	beq.w	800d530 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800cdb0:	4b8d      	ldr	r3, [pc, #564]	; (800cfe8 <tcp_input+0x28c>)
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	899b      	ldrh	r3, [r3, #12]
 800cdb6:	b29b      	uxth	r3, r3
 800cdb8:	4618      	mov	r0, r3
 800cdba:	f7fc fa9b 	bl	80092f4 <lwip_htons>
 800cdbe:	4603      	mov	r3, r0
 800cdc0:	0b1b      	lsrs	r3, r3, #12
 800cdc2:	b29b      	uxth	r3, r3
 800cdc4:	b2db      	uxtb	r3, r3
 800cdc6:	009b      	lsls	r3, r3, #2
 800cdc8:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800cdca:	7cbb      	ldrb	r3, [r7, #18]
 800cdcc:	2b13      	cmp	r3, #19
 800cdce:	f240 83b1 	bls.w	800d534 <tcp_input+0x7d8>
 800cdd2:	7cbb      	ldrb	r3, [r7, #18]
 800cdd4:	b29a      	uxth	r2, r3
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	891b      	ldrh	r3, [r3, #8]
 800cdda:	429a      	cmp	r2, r3
 800cddc:	f200 83aa 	bhi.w	800d534 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800cde0:	7cbb      	ldrb	r3, [r7, #18]
 800cde2:	b29b      	uxth	r3, r3
 800cde4:	3b14      	subs	r3, #20
 800cde6:	b29a      	uxth	r2, r3
 800cde8:	4b81      	ldr	r3, [pc, #516]	; (800cff0 <tcp_input+0x294>)
 800cdea:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800cdec:	4b81      	ldr	r3, [pc, #516]	; (800cff4 <tcp_input+0x298>)
 800cdee:	2200      	movs	r2, #0
 800cdf0:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	895a      	ldrh	r2, [r3, #10]
 800cdf6:	7cbb      	ldrb	r3, [r7, #18]
 800cdf8:	b29b      	uxth	r3, r3
 800cdfa:	429a      	cmp	r2, r3
 800cdfc:	d309      	bcc.n	800ce12 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800cdfe:	4b7c      	ldr	r3, [pc, #496]	; (800cff0 <tcp_input+0x294>)
 800ce00:	881a      	ldrh	r2, [r3, #0]
 800ce02:	4b7d      	ldr	r3, [pc, #500]	; (800cff8 <tcp_input+0x29c>)
 800ce04:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800ce06:	7cbb      	ldrb	r3, [r7, #18]
 800ce08:	4619      	mov	r1, r3
 800ce0a:	6878      	ldr	r0, [r7, #4]
 800ce0c:	f7fd fdcc 	bl	800a9a8 <pbuf_remove_header>
 800ce10:	e04e      	b.n	800ceb0 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d105      	bne.n	800ce26 <tcp_input+0xca>
 800ce1a:	4b70      	ldr	r3, [pc, #448]	; (800cfdc <tcp_input+0x280>)
 800ce1c:	22c2      	movs	r2, #194	; 0xc2
 800ce1e:	4977      	ldr	r1, [pc, #476]	; (800cffc <tcp_input+0x2a0>)
 800ce20:	4870      	ldr	r0, [pc, #448]	; (800cfe4 <tcp_input+0x288>)
 800ce22:	f009 faf5 	bl	8016410 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800ce26:	2114      	movs	r1, #20
 800ce28:	6878      	ldr	r0, [r7, #4]
 800ce2a:	f7fd fdbd 	bl	800a9a8 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	895a      	ldrh	r2, [r3, #10]
 800ce32:	4b71      	ldr	r3, [pc, #452]	; (800cff8 <tcp_input+0x29c>)
 800ce34:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800ce36:	4b6e      	ldr	r3, [pc, #440]	; (800cff0 <tcp_input+0x294>)
 800ce38:	881a      	ldrh	r2, [r3, #0]
 800ce3a:	4b6f      	ldr	r3, [pc, #444]	; (800cff8 <tcp_input+0x29c>)
 800ce3c:	881b      	ldrh	r3, [r3, #0]
 800ce3e:	1ad3      	subs	r3, r2, r3
 800ce40:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800ce42:	4b6d      	ldr	r3, [pc, #436]	; (800cff8 <tcp_input+0x29c>)
 800ce44:	881b      	ldrh	r3, [r3, #0]
 800ce46:	4619      	mov	r1, r3
 800ce48:	6878      	ldr	r0, [r7, #4]
 800ce4a:	f7fd fdad 	bl	800a9a8 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	895b      	ldrh	r3, [r3, #10]
 800ce54:	8a3a      	ldrh	r2, [r7, #16]
 800ce56:	429a      	cmp	r2, r3
 800ce58:	f200 836e 	bhi.w	800d538 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	685b      	ldr	r3, [r3, #4]
 800ce62:	4a64      	ldr	r2, [pc, #400]	; (800cff4 <tcp_input+0x298>)
 800ce64:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	8a3a      	ldrh	r2, [r7, #16]
 800ce6c:	4611      	mov	r1, r2
 800ce6e:	4618      	mov	r0, r3
 800ce70:	f7fd fd9a 	bl	800a9a8 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	891a      	ldrh	r2, [r3, #8]
 800ce78:	8a3b      	ldrh	r3, [r7, #16]
 800ce7a:	1ad3      	subs	r3, r2, r3
 800ce7c:	b29a      	uxth	r2, r3
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	895b      	ldrh	r3, [r3, #10]
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d005      	beq.n	800ce96 <tcp_input+0x13a>
 800ce8a:	4b54      	ldr	r3, [pc, #336]	; (800cfdc <tcp_input+0x280>)
 800ce8c:	22df      	movs	r2, #223	; 0xdf
 800ce8e:	495c      	ldr	r1, [pc, #368]	; (800d000 <tcp_input+0x2a4>)
 800ce90:	4854      	ldr	r0, [pc, #336]	; (800cfe4 <tcp_input+0x288>)
 800ce92:	f009 fabd 	bl	8016410 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	891a      	ldrh	r2, [r3, #8]
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	891b      	ldrh	r3, [r3, #8]
 800cea0:	429a      	cmp	r2, r3
 800cea2:	d005      	beq.n	800ceb0 <tcp_input+0x154>
 800cea4:	4b4d      	ldr	r3, [pc, #308]	; (800cfdc <tcp_input+0x280>)
 800cea6:	22e0      	movs	r2, #224	; 0xe0
 800cea8:	4956      	ldr	r1, [pc, #344]	; (800d004 <tcp_input+0x2a8>)
 800ceaa:	484e      	ldr	r0, [pc, #312]	; (800cfe4 <tcp_input+0x288>)
 800ceac:	f009 fab0 	bl	8016410 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800ceb0:	4b4d      	ldr	r3, [pc, #308]	; (800cfe8 <tcp_input+0x28c>)
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	881b      	ldrh	r3, [r3, #0]
 800ceb6:	b29b      	uxth	r3, r3
 800ceb8:	4a4b      	ldr	r2, [pc, #300]	; (800cfe8 <tcp_input+0x28c>)
 800ceba:	6814      	ldr	r4, [r2, #0]
 800cebc:	4618      	mov	r0, r3
 800cebe:	f7fc fa19 	bl	80092f4 <lwip_htons>
 800cec2:	4603      	mov	r3, r0
 800cec4:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800cec6:	4b48      	ldr	r3, [pc, #288]	; (800cfe8 <tcp_input+0x28c>)
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	885b      	ldrh	r3, [r3, #2]
 800cecc:	b29b      	uxth	r3, r3
 800cece:	4a46      	ldr	r2, [pc, #280]	; (800cfe8 <tcp_input+0x28c>)
 800ced0:	6814      	ldr	r4, [r2, #0]
 800ced2:	4618      	mov	r0, r3
 800ced4:	f7fc fa0e 	bl	80092f4 <lwip_htons>
 800ced8:	4603      	mov	r3, r0
 800ceda:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800cedc:	4b42      	ldr	r3, [pc, #264]	; (800cfe8 <tcp_input+0x28c>)
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	685b      	ldr	r3, [r3, #4]
 800cee2:	4a41      	ldr	r2, [pc, #260]	; (800cfe8 <tcp_input+0x28c>)
 800cee4:	6814      	ldr	r4, [r2, #0]
 800cee6:	4618      	mov	r0, r3
 800cee8:	f7fc fa19 	bl	800931e <lwip_htonl>
 800ceec:	4603      	mov	r3, r0
 800ceee:	6063      	str	r3, [r4, #4]
 800cef0:	6863      	ldr	r3, [r4, #4]
 800cef2:	4a45      	ldr	r2, [pc, #276]	; (800d008 <tcp_input+0x2ac>)
 800cef4:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800cef6:	4b3c      	ldr	r3, [pc, #240]	; (800cfe8 <tcp_input+0x28c>)
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	689b      	ldr	r3, [r3, #8]
 800cefc:	4a3a      	ldr	r2, [pc, #232]	; (800cfe8 <tcp_input+0x28c>)
 800cefe:	6814      	ldr	r4, [r2, #0]
 800cf00:	4618      	mov	r0, r3
 800cf02:	f7fc fa0c 	bl	800931e <lwip_htonl>
 800cf06:	4603      	mov	r3, r0
 800cf08:	60a3      	str	r3, [r4, #8]
 800cf0a:	68a3      	ldr	r3, [r4, #8]
 800cf0c:	4a3f      	ldr	r2, [pc, #252]	; (800d00c <tcp_input+0x2b0>)
 800cf0e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800cf10:	4b35      	ldr	r3, [pc, #212]	; (800cfe8 <tcp_input+0x28c>)
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	89db      	ldrh	r3, [r3, #14]
 800cf16:	b29b      	uxth	r3, r3
 800cf18:	4a33      	ldr	r2, [pc, #204]	; (800cfe8 <tcp_input+0x28c>)
 800cf1a:	6814      	ldr	r4, [r2, #0]
 800cf1c:	4618      	mov	r0, r3
 800cf1e:	f7fc f9e9 	bl	80092f4 <lwip_htons>
 800cf22:	4603      	mov	r3, r0
 800cf24:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800cf26:	4b30      	ldr	r3, [pc, #192]	; (800cfe8 <tcp_input+0x28c>)
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	899b      	ldrh	r3, [r3, #12]
 800cf2c:	b29b      	uxth	r3, r3
 800cf2e:	4618      	mov	r0, r3
 800cf30:	f7fc f9e0 	bl	80092f4 <lwip_htons>
 800cf34:	4603      	mov	r3, r0
 800cf36:	b2db      	uxtb	r3, r3
 800cf38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cf3c:	b2da      	uxtb	r2, r3
 800cf3e:	4b34      	ldr	r3, [pc, #208]	; (800d010 <tcp_input+0x2b4>)
 800cf40:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	891a      	ldrh	r2, [r3, #8]
 800cf46:	4b33      	ldr	r3, [pc, #204]	; (800d014 <tcp_input+0x2b8>)
 800cf48:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800cf4a:	4b31      	ldr	r3, [pc, #196]	; (800d010 <tcp_input+0x2b4>)
 800cf4c:	781b      	ldrb	r3, [r3, #0]
 800cf4e:	f003 0303 	and.w	r3, r3, #3
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d00c      	beq.n	800cf70 <tcp_input+0x214>
    tcplen++;
 800cf56:	4b2f      	ldr	r3, [pc, #188]	; (800d014 <tcp_input+0x2b8>)
 800cf58:	881b      	ldrh	r3, [r3, #0]
 800cf5a:	3301      	adds	r3, #1
 800cf5c:	b29a      	uxth	r2, r3
 800cf5e:	4b2d      	ldr	r3, [pc, #180]	; (800d014 <tcp_input+0x2b8>)
 800cf60:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	891a      	ldrh	r2, [r3, #8]
 800cf66:	4b2b      	ldr	r3, [pc, #172]	; (800d014 <tcp_input+0x2b8>)
 800cf68:	881b      	ldrh	r3, [r3, #0]
 800cf6a:	429a      	cmp	r2, r3
 800cf6c:	f200 82e6 	bhi.w	800d53c <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800cf70:	2300      	movs	r3, #0
 800cf72:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cf74:	4b28      	ldr	r3, [pc, #160]	; (800d018 <tcp_input+0x2bc>)
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	61fb      	str	r3, [r7, #28]
 800cf7a:	e09d      	b.n	800d0b8 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800cf7c:	69fb      	ldr	r3, [r7, #28]
 800cf7e:	7d1b      	ldrb	r3, [r3, #20]
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d105      	bne.n	800cf90 <tcp_input+0x234>
 800cf84:	4b15      	ldr	r3, [pc, #84]	; (800cfdc <tcp_input+0x280>)
 800cf86:	22fb      	movs	r2, #251	; 0xfb
 800cf88:	4924      	ldr	r1, [pc, #144]	; (800d01c <tcp_input+0x2c0>)
 800cf8a:	4816      	ldr	r0, [pc, #88]	; (800cfe4 <tcp_input+0x288>)
 800cf8c:	f009 fa40 	bl	8016410 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800cf90:	69fb      	ldr	r3, [r7, #28]
 800cf92:	7d1b      	ldrb	r3, [r3, #20]
 800cf94:	2b0a      	cmp	r3, #10
 800cf96:	d105      	bne.n	800cfa4 <tcp_input+0x248>
 800cf98:	4b10      	ldr	r3, [pc, #64]	; (800cfdc <tcp_input+0x280>)
 800cf9a:	22fc      	movs	r2, #252	; 0xfc
 800cf9c:	4920      	ldr	r1, [pc, #128]	; (800d020 <tcp_input+0x2c4>)
 800cf9e:	4811      	ldr	r0, [pc, #68]	; (800cfe4 <tcp_input+0x288>)
 800cfa0:	f009 fa36 	bl	8016410 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800cfa4:	69fb      	ldr	r3, [r7, #28]
 800cfa6:	7d1b      	ldrb	r3, [r3, #20]
 800cfa8:	2b01      	cmp	r3, #1
 800cfaa:	d105      	bne.n	800cfb8 <tcp_input+0x25c>
 800cfac:	4b0b      	ldr	r3, [pc, #44]	; (800cfdc <tcp_input+0x280>)
 800cfae:	22fd      	movs	r2, #253	; 0xfd
 800cfb0:	491c      	ldr	r1, [pc, #112]	; (800d024 <tcp_input+0x2c8>)
 800cfb2:	480c      	ldr	r0, [pc, #48]	; (800cfe4 <tcp_input+0x288>)
 800cfb4:	f009 fa2c 	bl	8016410 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800cfb8:	69fb      	ldr	r3, [r7, #28]
 800cfba:	7a1b      	ldrb	r3, [r3, #8]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d033      	beq.n	800d028 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800cfc0:	69fb      	ldr	r3, [r7, #28]
 800cfc2:	7a1a      	ldrb	r2, [r3, #8]
 800cfc4:	4b09      	ldr	r3, [pc, #36]	; (800cfec <tcp_input+0x290>)
 800cfc6:	685b      	ldr	r3, [r3, #4]
 800cfc8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cfcc:	3301      	adds	r3, #1
 800cfce:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800cfd0:	429a      	cmp	r2, r3
 800cfd2:	d029      	beq.n	800d028 <tcp_input+0x2cc>
      prev = pcb;
 800cfd4:	69fb      	ldr	r3, [r7, #28]
 800cfd6:	61bb      	str	r3, [r7, #24]
      continue;
 800cfd8:	e06b      	b.n	800d0b2 <tcp_input+0x356>
 800cfda:	bf00      	nop
 800cfdc:	0801968c 	.word	0x0801968c
 800cfe0:	080196c0 	.word	0x080196c0
 800cfe4:	080196d8 	.word	0x080196d8
 800cfe8:	2001aedc 	.word	0x2001aedc
 800cfec:	20016980 	.word	0x20016980
 800cff0:	2001aee0 	.word	0x2001aee0
 800cff4:	2001aee4 	.word	0x2001aee4
 800cff8:	2001aee2 	.word	0x2001aee2
 800cffc:	08019700 	.word	0x08019700
 800d000:	08019710 	.word	0x08019710
 800d004:	0801971c 	.word	0x0801971c
 800d008:	2001aeec 	.word	0x2001aeec
 800d00c:	2001aef0 	.word	0x2001aef0
 800d010:	2001aef8 	.word	0x2001aef8
 800d014:	2001aef6 	.word	0x2001aef6
 800d018:	2001aec0 	.word	0x2001aec0
 800d01c:	0801973c 	.word	0x0801973c
 800d020:	08019764 	.word	0x08019764
 800d024:	08019790 	.word	0x08019790
    }

    if (pcb->remote_port == tcphdr->src &&
 800d028:	69fb      	ldr	r3, [r7, #28]
 800d02a:	8b1a      	ldrh	r2, [r3, #24]
 800d02c:	4b72      	ldr	r3, [pc, #456]	; (800d1f8 <tcp_input+0x49c>)
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	881b      	ldrh	r3, [r3, #0]
 800d032:	b29b      	uxth	r3, r3
 800d034:	429a      	cmp	r2, r3
 800d036:	d13a      	bne.n	800d0ae <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800d038:	69fb      	ldr	r3, [r7, #28]
 800d03a:	8ada      	ldrh	r2, [r3, #22]
 800d03c:	4b6e      	ldr	r3, [pc, #440]	; (800d1f8 <tcp_input+0x49c>)
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	885b      	ldrh	r3, [r3, #2]
 800d042:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800d044:	429a      	cmp	r2, r3
 800d046:	d132      	bne.n	800d0ae <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d048:	69fb      	ldr	r3, [r7, #28]
 800d04a:	685a      	ldr	r2, [r3, #4]
 800d04c:	4b6b      	ldr	r3, [pc, #428]	; (800d1fc <tcp_input+0x4a0>)
 800d04e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800d050:	429a      	cmp	r2, r3
 800d052:	d12c      	bne.n	800d0ae <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d054:	69fb      	ldr	r3, [r7, #28]
 800d056:	681a      	ldr	r2, [r3, #0]
 800d058:	4b68      	ldr	r3, [pc, #416]	; (800d1fc <tcp_input+0x4a0>)
 800d05a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d05c:	429a      	cmp	r2, r3
 800d05e:	d126      	bne.n	800d0ae <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800d060:	69fb      	ldr	r3, [r7, #28]
 800d062:	68db      	ldr	r3, [r3, #12]
 800d064:	69fa      	ldr	r2, [r7, #28]
 800d066:	429a      	cmp	r2, r3
 800d068:	d106      	bne.n	800d078 <tcp_input+0x31c>
 800d06a:	4b65      	ldr	r3, [pc, #404]	; (800d200 <tcp_input+0x4a4>)
 800d06c:	f240 120d 	movw	r2, #269	; 0x10d
 800d070:	4964      	ldr	r1, [pc, #400]	; (800d204 <tcp_input+0x4a8>)
 800d072:	4865      	ldr	r0, [pc, #404]	; (800d208 <tcp_input+0x4ac>)
 800d074:	f009 f9cc 	bl	8016410 <iprintf>
      if (prev != NULL) {
 800d078:	69bb      	ldr	r3, [r7, #24]
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d00a      	beq.n	800d094 <tcp_input+0x338>
        prev->next = pcb->next;
 800d07e:	69fb      	ldr	r3, [r7, #28]
 800d080:	68da      	ldr	r2, [r3, #12]
 800d082:	69bb      	ldr	r3, [r7, #24]
 800d084:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800d086:	4b61      	ldr	r3, [pc, #388]	; (800d20c <tcp_input+0x4b0>)
 800d088:	681a      	ldr	r2, [r3, #0]
 800d08a:	69fb      	ldr	r3, [r7, #28]
 800d08c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800d08e:	4a5f      	ldr	r2, [pc, #380]	; (800d20c <tcp_input+0x4b0>)
 800d090:	69fb      	ldr	r3, [r7, #28]
 800d092:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800d094:	69fb      	ldr	r3, [r7, #28]
 800d096:	68db      	ldr	r3, [r3, #12]
 800d098:	69fa      	ldr	r2, [r7, #28]
 800d09a:	429a      	cmp	r2, r3
 800d09c:	d111      	bne.n	800d0c2 <tcp_input+0x366>
 800d09e:	4b58      	ldr	r3, [pc, #352]	; (800d200 <tcp_input+0x4a4>)
 800d0a0:	f240 1215 	movw	r2, #277	; 0x115
 800d0a4:	495a      	ldr	r1, [pc, #360]	; (800d210 <tcp_input+0x4b4>)
 800d0a6:	4858      	ldr	r0, [pc, #352]	; (800d208 <tcp_input+0x4ac>)
 800d0a8:	f009 f9b2 	bl	8016410 <iprintf>
      break;
 800d0ac:	e009      	b.n	800d0c2 <tcp_input+0x366>
    }
    prev = pcb;
 800d0ae:	69fb      	ldr	r3, [r7, #28]
 800d0b0:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d0b2:	69fb      	ldr	r3, [r7, #28]
 800d0b4:	68db      	ldr	r3, [r3, #12]
 800d0b6:	61fb      	str	r3, [r7, #28]
 800d0b8:	69fb      	ldr	r3, [r7, #28]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	f47f af5e 	bne.w	800cf7c <tcp_input+0x220>
 800d0c0:	e000      	b.n	800d0c4 <tcp_input+0x368>
      break;
 800d0c2:	bf00      	nop
  }

  if (pcb == NULL) {
 800d0c4:	69fb      	ldr	r3, [r7, #28]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	f040 80aa 	bne.w	800d220 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d0cc:	4b51      	ldr	r3, [pc, #324]	; (800d214 <tcp_input+0x4b8>)
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	61fb      	str	r3, [r7, #28]
 800d0d2:	e03f      	b.n	800d154 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d0d4:	69fb      	ldr	r3, [r7, #28]
 800d0d6:	7d1b      	ldrb	r3, [r3, #20]
 800d0d8:	2b0a      	cmp	r3, #10
 800d0da:	d006      	beq.n	800d0ea <tcp_input+0x38e>
 800d0dc:	4b48      	ldr	r3, [pc, #288]	; (800d200 <tcp_input+0x4a4>)
 800d0de:	f240 121f 	movw	r2, #287	; 0x11f
 800d0e2:	494d      	ldr	r1, [pc, #308]	; (800d218 <tcp_input+0x4bc>)
 800d0e4:	4848      	ldr	r0, [pc, #288]	; (800d208 <tcp_input+0x4ac>)
 800d0e6:	f009 f993 	bl	8016410 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d0ea:	69fb      	ldr	r3, [r7, #28]
 800d0ec:	7a1b      	ldrb	r3, [r3, #8]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d009      	beq.n	800d106 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d0f2:	69fb      	ldr	r3, [r7, #28]
 800d0f4:	7a1a      	ldrb	r2, [r3, #8]
 800d0f6:	4b41      	ldr	r3, [pc, #260]	; (800d1fc <tcp_input+0x4a0>)
 800d0f8:	685b      	ldr	r3, [r3, #4]
 800d0fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d0fe:	3301      	adds	r3, #1
 800d100:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d102:	429a      	cmp	r2, r3
 800d104:	d122      	bne.n	800d14c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800d106:	69fb      	ldr	r3, [r7, #28]
 800d108:	8b1a      	ldrh	r2, [r3, #24]
 800d10a:	4b3b      	ldr	r3, [pc, #236]	; (800d1f8 <tcp_input+0x49c>)
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	881b      	ldrh	r3, [r3, #0]
 800d110:	b29b      	uxth	r3, r3
 800d112:	429a      	cmp	r2, r3
 800d114:	d11b      	bne.n	800d14e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800d116:	69fb      	ldr	r3, [r7, #28]
 800d118:	8ada      	ldrh	r2, [r3, #22]
 800d11a:	4b37      	ldr	r3, [pc, #220]	; (800d1f8 <tcp_input+0x49c>)
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	885b      	ldrh	r3, [r3, #2]
 800d120:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800d122:	429a      	cmp	r2, r3
 800d124:	d113      	bne.n	800d14e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d126:	69fb      	ldr	r3, [r7, #28]
 800d128:	685a      	ldr	r2, [r3, #4]
 800d12a:	4b34      	ldr	r3, [pc, #208]	; (800d1fc <tcp_input+0x4a0>)
 800d12c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800d12e:	429a      	cmp	r2, r3
 800d130:	d10d      	bne.n	800d14e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d132:	69fb      	ldr	r3, [r7, #28]
 800d134:	681a      	ldr	r2, [r3, #0]
 800d136:	4b31      	ldr	r3, [pc, #196]	; (800d1fc <tcp_input+0x4a0>)
 800d138:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d13a:	429a      	cmp	r2, r3
 800d13c:	d107      	bne.n	800d14e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800d13e:	69f8      	ldr	r0, [r7, #28]
 800d140:	f000 fb56 	bl	800d7f0 <tcp_timewait_input>
        }
        pbuf_free(p);
 800d144:	6878      	ldr	r0, [r7, #4]
 800d146:	f7fd fcb5 	bl	800aab4 <pbuf_free>
        return;
 800d14a:	e1fd      	b.n	800d548 <tcp_input+0x7ec>
        continue;
 800d14c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d14e:	69fb      	ldr	r3, [r7, #28]
 800d150:	68db      	ldr	r3, [r3, #12]
 800d152:	61fb      	str	r3, [r7, #28]
 800d154:	69fb      	ldr	r3, [r7, #28]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d1bc      	bne.n	800d0d4 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800d15a:	2300      	movs	r3, #0
 800d15c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d15e:	4b2f      	ldr	r3, [pc, #188]	; (800d21c <tcp_input+0x4c0>)
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	617b      	str	r3, [r7, #20]
 800d164:	e02a      	b.n	800d1bc <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800d166:	697b      	ldr	r3, [r7, #20]
 800d168:	7a1b      	ldrb	r3, [r3, #8]
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d00c      	beq.n	800d188 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d16e:	697b      	ldr	r3, [r7, #20]
 800d170:	7a1a      	ldrb	r2, [r3, #8]
 800d172:	4b22      	ldr	r3, [pc, #136]	; (800d1fc <tcp_input+0x4a0>)
 800d174:	685b      	ldr	r3, [r3, #4]
 800d176:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d17a:	3301      	adds	r3, #1
 800d17c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800d17e:	429a      	cmp	r2, r3
 800d180:	d002      	beq.n	800d188 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800d182:	697b      	ldr	r3, [r7, #20]
 800d184:	61bb      	str	r3, [r7, #24]
        continue;
 800d186:	e016      	b.n	800d1b6 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800d188:	697b      	ldr	r3, [r7, #20]
 800d18a:	8ada      	ldrh	r2, [r3, #22]
 800d18c:	4b1a      	ldr	r3, [pc, #104]	; (800d1f8 <tcp_input+0x49c>)
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	885b      	ldrh	r3, [r3, #2]
 800d192:	b29b      	uxth	r3, r3
 800d194:	429a      	cmp	r2, r3
 800d196:	d10c      	bne.n	800d1b2 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800d198:	697b      	ldr	r3, [r7, #20]
 800d19a:	681a      	ldr	r2, [r3, #0]
 800d19c:	4b17      	ldr	r3, [pc, #92]	; (800d1fc <tcp_input+0x4a0>)
 800d19e:	695b      	ldr	r3, [r3, #20]
 800d1a0:	429a      	cmp	r2, r3
 800d1a2:	d00f      	beq.n	800d1c4 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800d1a4:	697b      	ldr	r3, [r7, #20]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d00d      	beq.n	800d1c6 <tcp_input+0x46a>
 800d1aa:	697b      	ldr	r3, [r7, #20]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d009      	beq.n	800d1c6 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800d1b2:	697b      	ldr	r3, [r7, #20]
 800d1b4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d1b6:	697b      	ldr	r3, [r7, #20]
 800d1b8:	68db      	ldr	r3, [r3, #12]
 800d1ba:	617b      	str	r3, [r7, #20]
 800d1bc:	697b      	ldr	r3, [r7, #20]
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d1d1      	bne.n	800d166 <tcp_input+0x40a>
 800d1c2:	e000      	b.n	800d1c6 <tcp_input+0x46a>
            break;
 800d1c4:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800d1c6:	697b      	ldr	r3, [r7, #20]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d029      	beq.n	800d220 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800d1cc:	69bb      	ldr	r3, [r7, #24]
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d00a      	beq.n	800d1e8 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800d1d2:	697b      	ldr	r3, [r7, #20]
 800d1d4:	68da      	ldr	r2, [r3, #12]
 800d1d6:	69bb      	ldr	r3, [r7, #24]
 800d1d8:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800d1da:	4b10      	ldr	r3, [pc, #64]	; (800d21c <tcp_input+0x4c0>)
 800d1dc:	681a      	ldr	r2, [r3, #0]
 800d1de:	697b      	ldr	r3, [r7, #20]
 800d1e0:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800d1e2:	4a0e      	ldr	r2, [pc, #56]	; (800d21c <tcp_input+0x4c0>)
 800d1e4:	697b      	ldr	r3, [r7, #20]
 800d1e6:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800d1e8:	6978      	ldr	r0, [r7, #20]
 800d1ea:	f000 fa03 	bl	800d5f4 <tcp_listen_input>
      }
      pbuf_free(p);
 800d1ee:	6878      	ldr	r0, [r7, #4]
 800d1f0:	f7fd fc60 	bl	800aab4 <pbuf_free>
      return;
 800d1f4:	e1a8      	b.n	800d548 <tcp_input+0x7ec>
 800d1f6:	bf00      	nop
 800d1f8:	2001aedc 	.word	0x2001aedc
 800d1fc:	20016980 	.word	0x20016980
 800d200:	0801968c 	.word	0x0801968c
 800d204:	080197b8 	.word	0x080197b8
 800d208:	080196d8 	.word	0x080196d8
 800d20c:	2001aec0 	.word	0x2001aec0
 800d210:	080197e4 	.word	0x080197e4
 800d214:	2001aec4 	.word	0x2001aec4
 800d218:	08019810 	.word	0x08019810
 800d21c:	2001aebc 	.word	0x2001aebc
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800d220:	69fb      	ldr	r3, [r7, #28]
 800d222:	2b00      	cmp	r3, #0
 800d224:	f000 8158 	beq.w	800d4d8 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800d228:	4b95      	ldr	r3, [pc, #596]	; (800d480 <tcp_input+0x724>)
 800d22a:	2200      	movs	r2, #0
 800d22c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	891a      	ldrh	r2, [r3, #8]
 800d232:	4b93      	ldr	r3, [pc, #588]	; (800d480 <tcp_input+0x724>)
 800d234:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800d236:	4a92      	ldr	r2, [pc, #584]	; (800d480 <tcp_input+0x724>)
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800d23c:	4b91      	ldr	r3, [pc, #580]	; (800d484 <tcp_input+0x728>)
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	4a8f      	ldr	r2, [pc, #572]	; (800d480 <tcp_input+0x724>)
 800d242:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800d244:	4b90      	ldr	r3, [pc, #576]	; (800d488 <tcp_input+0x72c>)
 800d246:	2200      	movs	r2, #0
 800d248:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800d24a:	4b90      	ldr	r3, [pc, #576]	; (800d48c <tcp_input+0x730>)
 800d24c:	2200      	movs	r2, #0
 800d24e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800d250:	4b8f      	ldr	r3, [pc, #572]	; (800d490 <tcp_input+0x734>)
 800d252:	2200      	movs	r2, #0
 800d254:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800d256:	4b8f      	ldr	r3, [pc, #572]	; (800d494 <tcp_input+0x738>)
 800d258:	781b      	ldrb	r3, [r3, #0]
 800d25a:	f003 0308 	and.w	r3, r3, #8
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d006      	beq.n	800d270 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	7b5b      	ldrb	r3, [r3, #13]
 800d266:	f043 0301 	orr.w	r3, r3, #1
 800d26a:	b2da      	uxtb	r2, r3
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800d270:	69fb      	ldr	r3, [r7, #28]
 800d272:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d274:	2b00      	cmp	r3, #0
 800d276:	d017      	beq.n	800d2a8 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800d278:	69f8      	ldr	r0, [r7, #28]
 800d27a:	f7ff f873 	bl	800c364 <tcp_process_refused_data>
 800d27e:	4603      	mov	r3, r0
 800d280:	f113 0f0d 	cmn.w	r3, #13
 800d284:	d007      	beq.n	800d296 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800d286:	69fb      	ldr	r3, [r7, #28]
 800d288:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d00c      	beq.n	800d2a8 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800d28e:	4b82      	ldr	r3, [pc, #520]	; (800d498 <tcp_input+0x73c>)
 800d290:	881b      	ldrh	r3, [r3, #0]
 800d292:	2b00      	cmp	r3, #0
 800d294:	d008      	beq.n	800d2a8 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800d296:	69fb      	ldr	r3, [r7, #28]
 800d298:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	f040 80e3 	bne.w	800d466 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800d2a0:	69f8      	ldr	r0, [r7, #28]
 800d2a2:	f003 fe05 	bl	8010eb0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800d2a6:	e0de      	b.n	800d466 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800d2a8:	4a7c      	ldr	r2, [pc, #496]	; (800d49c <tcp_input+0x740>)
 800d2aa:	69fb      	ldr	r3, [r7, #28]
 800d2ac:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800d2ae:	69f8      	ldr	r0, [r7, #28]
 800d2b0:	f000 fb18 	bl	800d8e4 <tcp_process>
 800d2b4:	4603      	mov	r3, r0
 800d2b6:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800d2b8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d2bc:	f113 0f0d 	cmn.w	r3, #13
 800d2c0:	f000 80d3 	beq.w	800d46a <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800d2c4:	4b71      	ldr	r3, [pc, #452]	; (800d48c <tcp_input+0x730>)
 800d2c6:	781b      	ldrb	r3, [r3, #0]
 800d2c8:	f003 0308 	and.w	r3, r3, #8
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d015      	beq.n	800d2fc <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800d2d0:	69fb      	ldr	r3, [r7, #28]
 800d2d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d008      	beq.n	800d2ec <tcp_input+0x590>
 800d2da:	69fb      	ldr	r3, [r7, #28]
 800d2dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d2e0:	69fa      	ldr	r2, [r7, #28]
 800d2e2:	6912      	ldr	r2, [r2, #16]
 800d2e4:	f06f 010d 	mvn.w	r1, #13
 800d2e8:	4610      	mov	r0, r2
 800d2ea:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800d2ec:	69f9      	ldr	r1, [r7, #28]
 800d2ee:	486c      	ldr	r0, [pc, #432]	; (800d4a0 <tcp_input+0x744>)
 800d2f0:	f7ff fbbc 	bl	800ca6c <tcp_pcb_remove>
        tcp_free(pcb);
 800d2f4:	69f8      	ldr	r0, [r7, #28]
 800d2f6:	f7fd fefd 	bl	800b0f4 <tcp_free>
 800d2fa:	e0da      	b.n	800d4b2 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800d2fc:	2300      	movs	r3, #0
 800d2fe:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800d300:	4b63      	ldr	r3, [pc, #396]	; (800d490 <tcp_input+0x734>)
 800d302:	881b      	ldrh	r3, [r3, #0]
 800d304:	2b00      	cmp	r3, #0
 800d306:	d01d      	beq.n	800d344 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800d308:	4b61      	ldr	r3, [pc, #388]	; (800d490 <tcp_input+0x734>)
 800d30a:	881b      	ldrh	r3, [r3, #0]
 800d30c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800d30e:	69fb      	ldr	r3, [r7, #28]
 800d310:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d314:	2b00      	cmp	r3, #0
 800d316:	d00a      	beq.n	800d32e <tcp_input+0x5d2>
 800d318:	69fb      	ldr	r3, [r7, #28]
 800d31a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d31e:	69fa      	ldr	r2, [r7, #28]
 800d320:	6910      	ldr	r0, [r2, #16]
 800d322:	89fa      	ldrh	r2, [r7, #14]
 800d324:	69f9      	ldr	r1, [r7, #28]
 800d326:	4798      	blx	r3
 800d328:	4603      	mov	r3, r0
 800d32a:	74fb      	strb	r3, [r7, #19]
 800d32c:	e001      	b.n	800d332 <tcp_input+0x5d6>
 800d32e:	2300      	movs	r3, #0
 800d330:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800d332:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d336:	f113 0f0d 	cmn.w	r3, #13
 800d33a:	f000 8098 	beq.w	800d46e <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800d33e:	4b54      	ldr	r3, [pc, #336]	; (800d490 <tcp_input+0x734>)
 800d340:	2200      	movs	r2, #0
 800d342:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800d344:	69f8      	ldr	r0, [r7, #28]
 800d346:	f000 f915 	bl	800d574 <tcp_input_delayed_close>
 800d34a:	4603      	mov	r3, r0
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	f040 8090 	bne.w	800d472 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800d352:	4b4d      	ldr	r3, [pc, #308]	; (800d488 <tcp_input+0x72c>)
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	2b00      	cmp	r3, #0
 800d358:	d041      	beq.n	800d3de <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800d35a:	69fb      	ldr	r3, [r7, #28]
 800d35c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d006      	beq.n	800d370 <tcp_input+0x614>
 800d362:	4b50      	ldr	r3, [pc, #320]	; (800d4a4 <tcp_input+0x748>)
 800d364:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800d368:	494f      	ldr	r1, [pc, #316]	; (800d4a8 <tcp_input+0x74c>)
 800d36a:	4850      	ldr	r0, [pc, #320]	; (800d4ac <tcp_input+0x750>)
 800d36c:	f009 f850 	bl	8016410 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800d370:	69fb      	ldr	r3, [r7, #28]
 800d372:	8b5b      	ldrh	r3, [r3, #26]
 800d374:	f003 0310 	and.w	r3, r3, #16
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d008      	beq.n	800d38e <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800d37c:	4b42      	ldr	r3, [pc, #264]	; (800d488 <tcp_input+0x72c>)
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	4618      	mov	r0, r3
 800d382:	f7fd fb97 	bl	800aab4 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800d386:	69f8      	ldr	r0, [r7, #28]
 800d388:	f7fe f99c 	bl	800b6c4 <tcp_abort>
            goto aborted;
 800d38c:	e091      	b.n	800d4b2 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800d38e:	69fb      	ldr	r3, [r7, #28]
 800d390:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d394:	2b00      	cmp	r3, #0
 800d396:	d00c      	beq.n	800d3b2 <tcp_input+0x656>
 800d398:	69fb      	ldr	r3, [r7, #28]
 800d39a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d39e:	69fb      	ldr	r3, [r7, #28]
 800d3a0:	6918      	ldr	r0, [r3, #16]
 800d3a2:	4b39      	ldr	r3, [pc, #228]	; (800d488 <tcp_input+0x72c>)
 800d3a4:	681a      	ldr	r2, [r3, #0]
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	69f9      	ldr	r1, [r7, #28]
 800d3aa:	47a0      	blx	r4
 800d3ac:	4603      	mov	r3, r0
 800d3ae:	74fb      	strb	r3, [r7, #19]
 800d3b0:	e008      	b.n	800d3c4 <tcp_input+0x668>
 800d3b2:	4b35      	ldr	r3, [pc, #212]	; (800d488 <tcp_input+0x72c>)
 800d3b4:	681a      	ldr	r2, [r3, #0]
 800d3b6:	2300      	movs	r3, #0
 800d3b8:	69f9      	ldr	r1, [r7, #28]
 800d3ba:	2000      	movs	r0, #0
 800d3bc:	f7ff f8a8 	bl	800c510 <tcp_recv_null>
 800d3c0:	4603      	mov	r3, r0
 800d3c2:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800d3c4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d3c8:	f113 0f0d 	cmn.w	r3, #13
 800d3cc:	d053      	beq.n	800d476 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800d3ce:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d003      	beq.n	800d3de <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800d3d6:	4b2c      	ldr	r3, [pc, #176]	; (800d488 <tcp_input+0x72c>)
 800d3d8:	681a      	ldr	r2, [r3, #0]
 800d3da:	69fb      	ldr	r3, [r7, #28]
 800d3dc:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800d3de:	4b2b      	ldr	r3, [pc, #172]	; (800d48c <tcp_input+0x730>)
 800d3e0:	781b      	ldrb	r3, [r3, #0]
 800d3e2:	f003 0320 	and.w	r3, r3, #32
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d030      	beq.n	800d44c <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800d3ea:	69fb      	ldr	r3, [r7, #28]
 800d3ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d009      	beq.n	800d406 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800d3f2:	69fb      	ldr	r3, [r7, #28]
 800d3f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d3f6:	7b5a      	ldrb	r2, [r3, #13]
 800d3f8:	69fb      	ldr	r3, [r7, #28]
 800d3fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d3fc:	f042 0220 	orr.w	r2, r2, #32
 800d400:	b2d2      	uxtb	r2, r2
 800d402:	735a      	strb	r2, [r3, #13]
 800d404:	e022      	b.n	800d44c <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800d406:	69fb      	ldr	r3, [r7, #28]
 800d408:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d40a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d40e:	d005      	beq.n	800d41c <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800d410:	69fb      	ldr	r3, [r7, #28]
 800d412:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d414:	3301      	adds	r3, #1
 800d416:	b29a      	uxth	r2, r3
 800d418:	69fb      	ldr	r3, [r7, #28]
 800d41a:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800d41c:	69fb      	ldr	r3, [r7, #28]
 800d41e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d422:	2b00      	cmp	r3, #0
 800d424:	d00b      	beq.n	800d43e <tcp_input+0x6e2>
 800d426:	69fb      	ldr	r3, [r7, #28]
 800d428:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d42c:	69fb      	ldr	r3, [r7, #28]
 800d42e:	6918      	ldr	r0, [r3, #16]
 800d430:	2300      	movs	r3, #0
 800d432:	2200      	movs	r2, #0
 800d434:	69f9      	ldr	r1, [r7, #28]
 800d436:	47a0      	blx	r4
 800d438:	4603      	mov	r3, r0
 800d43a:	74fb      	strb	r3, [r7, #19]
 800d43c:	e001      	b.n	800d442 <tcp_input+0x6e6>
 800d43e:	2300      	movs	r3, #0
 800d440:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800d442:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d446:	f113 0f0d 	cmn.w	r3, #13
 800d44a:	d016      	beq.n	800d47a <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800d44c:	4b13      	ldr	r3, [pc, #76]	; (800d49c <tcp_input+0x740>)
 800d44e:	2200      	movs	r2, #0
 800d450:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800d452:	69f8      	ldr	r0, [r7, #28]
 800d454:	f000 f88e 	bl	800d574 <tcp_input_delayed_close>
 800d458:	4603      	mov	r3, r0
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d128      	bne.n	800d4b0 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800d45e:	69f8      	ldr	r0, [r7, #28]
 800d460:	f002 ff20 	bl	80102a4 <tcp_output>
 800d464:	e025      	b.n	800d4b2 <tcp_input+0x756>
        goto aborted;
 800d466:	bf00      	nop
 800d468:	e023      	b.n	800d4b2 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800d46a:	bf00      	nop
 800d46c:	e021      	b.n	800d4b2 <tcp_input+0x756>
              goto aborted;
 800d46e:	bf00      	nop
 800d470:	e01f      	b.n	800d4b2 <tcp_input+0x756>
          goto aborted;
 800d472:	bf00      	nop
 800d474:	e01d      	b.n	800d4b2 <tcp_input+0x756>
            goto aborted;
 800d476:	bf00      	nop
 800d478:	e01b      	b.n	800d4b2 <tcp_input+0x756>
              goto aborted;
 800d47a:	bf00      	nop
 800d47c:	e019      	b.n	800d4b2 <tcp_input+0x756>
 800d47e:	bf00      	nop
 800d480:	2001aecc 	.word	0x2001aecc
 800d484:	2001aedc 	.word	0x2001aedc
 800d488:	2001aefc 	.word	0x2001aefc
 800d48c:	2001aef9 	.word	0x2001aef9
 800d490:	2001aef4 	.word	0x2001aef4
 800d494:	2001aef8 	.word	0x2001aef8
 800d498:	2001aef6 	.word	0x2001aef6
 800d49c:	2001af00 	.word	0x2001af00
 800d4a0:	2001aec0 	.word	0x2001aec0
 800d4a4:	0801968c 	.word	0x0801968c
 800d4a8:	08019840 	.word	0x08019840
 800d4ac:	080196d8 	.word	0x080196d8
          goto aborted;
 800d4b0:	bf00      	nop
    tcp_input_pcb = NULL;
 800d4b2:	4b27      	ldr	r3, [pc, #156]	; (800d550 <tcp_input+0x7f4>)
 800d4b4:	2200      	movs	r2, #0
 800d4b6:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800d4b8:	4b26      	ldr	r3, [pc, #152]	; (800d554 <tcp_input+0x7f8>)
 800d4ba:	2200      	movs	r2, #0
 800d4bc:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800d4be:	4b26      	ldr	r3, [pc, #152]	; (800d558 <tcp_input+0x7fc>)
 800d4c0:	685b      	ldr	r3, [r3, #4]
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d03f      	beq.n	800d546 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800d4c6:	4b24      	ldr	r3, [pc, #144]	; (800d558 <tcp_input+0x7fc>)
 800d4c8:	685b      	ldr	r3, [r3, #4]
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	f7fd faf2 	bl	800aab4 <pbuf_free>
      inseg.p = NULL;
 800d4d0:	4b21      	ldr	r3, [pc, #132]	; (800d558 <tcp_input+0x7fc>)
 800d4d2:	2200      	movs	r2, #0
 800d4d4:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800d4d6:	e036      	b.n	800d546 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800d4d8:	4b20      	ldr	r3, [pc, #128]	; (800d55c <tcp_input+0x800>)
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	899b      	ldrh	r3, [r3, #12]
 800d4de:	b29b      	uxth	r3, r3
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	f7fb ff07 	bl	80092f4 <lwip_htons>
 800d4e6:	4603      	mov	r3, r0
 800d4e8:	b2db      	uxtb	r3, r3
 800d4ea:	f003 0304 	and.w	r3, r3, #4
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d118      	bne.n	800d524 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d4f2:	4b1b      	ldr	r3, [pc, #108]	; (800d560 <tcp_input+0x804>)
 800d4f4:	6819      	ldr	r1, [r3, #0]
 800d4f6:	4b1b      	ldr	r3, [pc, #108]	; (800d564 <tcp_input+0x808>)
 800d4f8:	881b      	ldrh	r3, [r3, #0]
 800d4fa:	461a      	mov	r2, r3
 800d4fc:	4b1a      	ldr	r3, [pc, #104]	; (800d568 <tcp_input+0x80c>)
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d502:	4b16      	ldr	r3, [pc, #88]	; (800d55c <tcp_input+0x800>)
 800d504:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d506:	885b      	ldrh	r3, [r3, #2]
 800d508:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d50a:	4a14      	ldr	r2, [pc, #80]	; (800d55c <tcp_input+0x800>)
 800d50c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d50e:	8812      	ldrh	r2, [r2, #0]
 800d510:	b292      	uxth	r2, r2
 800d512:	9202      	str	r2, [sp, #8]
 800d514:	9301      	str	r3, [sp, #4]
 800d516:	4b15      	ldr	r3, [pc, #84]	; (800d56c <tcp_input+0x810>)
 800d518:	9300      	str	r3, [sp, #0]
 800d51a:	4b15      	ldr	r3, [pc, #84]	; (800d570 <tcp_input+0x814>)
 800d51c:	4602      	mov	r2, r0
 800d51e:	2000      	movs	r0, #0
 800d520:	f003 fc74 	bl	8010e0c <tcp_rst>
    pbuf_free(p);
 800d524:	6878      	ldr	r0, [r7, #4]
 800d526:	f7fd fac5 	bl	800aab4 <pbuf_free>
  return;
 800d52a:	e00c      	b.n	800d546 <tcp_input+0x7ea>
    goto dropped;
 800d52c:	bf00      	nop
 800d52e:	e006      	b.n	800d53e <tcp_input+0x7e2>
    goto dropped;
 800d530:	bf00      	nop
 800d532:	e004      	b.n	800d53e <tcp_input+0x7e2>
    goto dropped;
 800d534:	bf00      	nop
 800d536:	e002      	b.n	800d53e <tcp_input+0x7e2>
      goto dropped;
 800d538:	bf00      	nop
 800d53a:	e000      	b.n	800d53e <tcp_input+0x7e2>
      goto dropped;
 800d53c:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800d53e:	6878      	ldr	r0, [r7, #4]
 800d540:	f7fd fab8 	bl	800aab4 <pbuf_free>
 800d544:	e000      	b.n	800d548 <tcp_input+0x7ec>
  return;
 800d546:	bf00      	nop
}
 800d548:	3724      	adds	r7, #36	; 0x24
 800d54a:	46bd      	mov	sp, r7
 800d54c:	bd90      	pop	{r4, r7, pc}
 800d54e:	bf00      	nop
 800d550:	2001af00 	.word	0x2001af00
 800d554:	2001aefc 	.word	0x2001aefc
 800d558:	2001aecc 	.word	0x2001aecc
 800d55c:	2001aedc 	.word	0x2001aedc
 800d560:	2001aef0 	.word	0x2001aef0
 800d564:	2001aef6 	.word	0x2001aef6
 800d568:	2001aeec 	.word	0x2001aeec
 800d56c:	20016990 	.word	0x20016990
 800d570:	20016994 	.word	0x20016994

0800d574 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800d574:	b580      	push	{r7, lr}
 800d576:	b082      	sub	sp, #8
 800d578:	af00      	add	r7, sp, #0
 800d57a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d106      	bne.n	800d590 <tcp_input_delayed_close+0x1c>
 800d582:	4b17      	ldr	r3, [pc, #92]	; (800d5e0 <tcp_input_delayed_close+0x6c>)
 800d584:	f240 225a 	movw	r2, #602	; 0x25a
 800d588:	4916      	ldr	r1, [pc, #88]	; (800d5e4 <tcp_input_delayed_close+0x70>)
 800d58a:	4817      	ldr	r0, [pc, #92]	; (800d5e8 <tcp_input_delayed_close+0x74>)
 800d58c:	f008 ff40 	bl	8016410 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800d590:	4b16      	ldr	r3, [pc, #88]	; (800d5ec <tcp_input_delayed_close+0x78>)
 800d592:	781b      	ldrb	r3, [r3, #0]
 800d594:	f003 0310 	and.w	r3, r3, #16
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d01c      	beq.n	800d5d6 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	8b5b      	ldrh	r3, [r3, #26]
 800d5a0:	f003 0310 	and.w	r3, r3, #16
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d10d      	bne.n	800d5c4 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d008      	beq.n	800d5c4 <tcp_input_delayed_close+0x50>
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d5b8:	687a      	ldr	r2, [r7, #4]
 800d5ba:	6912      	ldr	r2, [r2, #16]
 800d5bc:	f06f 010e 	mvn.w	r1, #14
 800d5c0:	4610      	mov	r0, r2
 800d5c2:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800d5c4:	6879      	ldr	r1, [r7, #4]
 800d5c6:	480a      	ldr	r0, [pc, #40]	; (800d5f0 <tcp_input_delayed_close+0x7c>)
 800d5c8:	f7ff fa50 	bl	800ca6c <tcp_pcb_remove>
    tcp_free(pcb);
 800d5cc:	6878      	ldr	r0, [r7, #4]
 800d5ce:	f7fd fd91 	bl	800b0f4 <tcp_free>
    return 1;
 800d5d2:	2301      	movs	r3, #1
 800d5d4:	e000      	b.n	800d5d8 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800d5d6:	2300      	movs	r3, #0
}
 800d5d8:	4618      	mov	r0, r3
 800d5da:	3708      	adds	r7, #8
 800d5dc:	46bd      	mov	sp, r7
 800d5de:	bd80      	pop	{r7, pc}
 800d5e0:	0801968c 	.word	0x0801968c
 800d5e4:	0801985c 	.word	0x0801985c
 800d5e8:	080196d8 	.word	0x080196d8
 800d5ec:	2001aef9 	.word	0x2001aef9
 800d5f0:	2001aec0 	.word	0x2001aec0

0800d5f4 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800d5f4:	b590      	push	{r4, r7, lr}
 800d5f6:	b08b      	sub	sp, #44	; 0x2c
 800d5f8:	af04      	add	r7, sp, #16
 800d5fa:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800d5fc:	4b6f      	ldr	r3, [pc, #444]	; (800d7bc <tcp_listen_input+0x1c8>)
 800d5fe:	781b      	ldrb	r3, [r3, #0]
 800d600:	f003 0304 	and.w	r3, r3, #4
 800d604:	2b00      	cmp	r3, #0
 800d606:	f040 80d2 	bne.w	800d7ae <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d106      	bne.n	800d61e <tcp_listen_input+0x2a>
 800d610:	4b6b      	ldr	r3, [pc, #428]	; (800d7c0 <tcp_listen_input+0x1cc>)
 800d612:	f240 2281 	movw	r2, #641	; 0x281
 800d616:	496b      	ldr	r1, [pc, #428]	; (800d7c4 <tcp_listen_input+0x1d0>)
 800d618:	486b      	ldr	r0, [pc, #428]	; (800d7c8 <tcp_listen_input+0x1d4>)
 800d61a:	f008 fef9 	bl	8016410 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800d61e:	4b67      	ldr	r3, [pc, #412]	; (800d7bc <tcp_listen_input+0x1c8>)
 800d620:	781b      	ldrb	r3, [r3, #0]
 800d622:	f003 0310 	and.w	r3, r3, #16
 800d626:	2b00      	cmp	r3, #0
 800d628:	d019      	beq.n	800d65e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d62a:	4b68      	ldr	r3, [pc, #416]	; (800d7cc <tcp_listen_input+0x1d8>)
 800d62c:	6819      	ldr	r1, [r3, #0]
 800d62e:	4b68      	ldr	r3, [pc, #416]	; (800d7d0 <tcp_listen_input+0x1dc>)
 800d630:	881b      	ldrh	r3, [r3, #0]
 800d632:	461a      	mov	r2, r3
 800d634:	4b67      	ldr	r3, [pc, #412]	; (800d7d4 <tcp_listen_input+0x1e0>)
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d63a:	4b67      	ldr	r3, [pc, #412]	; (800d7d8 <tcp_listen_input+0x1e4>)
 800d63c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d63e:	885b      	ldrh	r3, [r3, #2]
 800d640:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d642:	4a65      	ldr	r2, [pc, #404]	; (800d7d8 <tcp_listen_input+0x1e4>)
 800d644:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d646:	8812      	ldrh	r2, [r2, #0]
 800d648:	b292      	uxth	r2, r2
 800d64a:	9202      	str	r2, [sp, #8]
 800d64c:	9301      	str	r3, [sp, #4]
 800d64e:	4b63      	ldr	r3, [pc, #396]	; (800d7dc <tcp_listen_input+0x1e8>)
 800d650:	9300      	str	r3, [sp, #0]
 800d652:	4b63      	ldr	r3, [pc, #396]	; (800d7e0 <tcp_listen_input+0x1ec>)
 800d654:	4602      	mov	r2, r0
 800d656:	6878      	ldr	r0, [r7, #4]
 800d658:	f003 fbd8 	bl	8010e0c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800d65c:	e0a9      	b.n	800d7b2 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800d65e:	4b57      	ldr	r3, [pc, #348]	; (800d7bc <tcp_listen_input+0x1c8>)
 800d660:	781b      	ldrb	r3, [r3, #0]
 800d662:	f003 0302 	and.w	r3, r3, #2
 800d666:	2b00      	cmp	r3, #0
 800d668:	f000 80a3 	beq.w	800d7b2 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	7d5b      	ldrb	r3, [r3, #21]
 800d670:	4618      	mov	r0, r3
 800d672:	f7ff f871 	bl	800c758 <tcp_alloc>
 800d676:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800d678:	697b      	ldr	r3, [r7, #20]
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d111      	bne.n	800d6a2 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	699b      	ldr	r3, [r3, #24]
 800d682:	2b00      	cmp	r3, #0
 800d684:	d00a      	beq.n	800d69c <tcp_listen_input+0xa8>
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	699b      	ldr	r3, [r3, #24]
 800d68a:	687a      	ldr	r2, [r7, #4]
 800d68c:	6910      	ldr	r0, [r2, #16]
 800d68e:	f04f 32ff 	mov.w	r2, #4294967295
 800d692:	2100      	movs	r1, #0
 800d694:	4798      	blx	r3
 800d696:	4603      	mov	r3, r0
 800d698:	73bb      	strb	r3, [r7, #14]
      return;
 800d69a:	e08b      	b.n	800d7b4 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800d69c:	23f0      	movs	r3, #240	; 0xf0
 800d69e:	73bb      	strb	r3, [r7, #14]
      return;
 800d6a0:	e088      	b.n	800d7b4 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800d6a2:	4b50      	ldr	r3, [pc, #320]	; (800d7e4 <tcp_listen_input+0x1f0>)
 800d6a4:	695a      	ldr	r2, [r3, #20]
 800d6a6:	697b      	ldr	r3, [r7, #20]
 800d6a8:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800d6aa:	4b4e      	ldr	r3, [pc, #312]	; (800d7e4 <tcp_listen_input+0x1f0>)
 800d6ac:	691a      	ldr	r2, [r3, #16]
 800d6ae:	697b      	ldr	r3, [r7, #20]
 800d6b0:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	8ada      	ldrh	r2, [r3, #22]
 800d6b6:	697b      	ldr	r3, [r7, #20]
 800d6b8:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800d6ba:	4b47      	ldr	r3, [pc, #284]	; (800d7d8 <tcp_listen_input+0x1e4>)
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	881b      	ldrh	r3, [r3, #0]
 800d6c0:	b29a      	uxth	r2, r3
 800d6c2:	697b      	ldr	r3, [r7, #20]
 800d6c4:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800d6c6:	697b      	ldr	r3, [r7, #20]
 800d6c8:	2203      	movs	r2, #3
 800d6ca:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800d6cc:	4b41      	ldr	r3, [pc, #260]	; (800d7d4 <tcp_listen_input+0x1e0>)
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	1c5a      	adds	r2, r3, #1
 800d6d2:	697b      	ldr	r3, [r7, #20]
 800d6d4:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800d6d6:	697b      	ldr	r3, [r7, #20]
 800d6d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d6da:	697b      	ldr	r3, [r7, #20]
 800d6dc:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800d6de:	6978      	ldr	r0, [r7, #20]
 800d6e0:	f7ff fa58 	bl	800cb94 <tcp_next_iss>
 800d6e4:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800d6e6:	697b      	ldr	r3, [r7, #20]
 800d6e8:	693a      	ldr	r2, [r7, #16]
 800d6ea:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800d6ec:	697b      	ldr	r3, [r7, #20]
 800d6ee:	693a      	ldr	r2, [r7, #16]
 800d6f0:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800d6f2:	697b      	ldr	r3, [r7, #20]
 800d6f4:	693a      	ldr	r2, [r7, #16]
 800d6f6:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800d6f8:	697b      	ldr	r3, [r7, #20]
 800d6fa:	693a      	ldr	r2, [r7, #16]
 800d6fc:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800d6fe:	4b35      	ldr	r3, [pc, #212]	; (800d7d4 <tcp_listen_input+0x1e0>)
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	1e5a      	subs	r2, r3, #1
 800d704:	697b      	ldr	r3, [r7, #20]
 800d706:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	691a      	ldr	r2, [r3, #16]
 800d70c:	697b      	ldr	r3, [r7, #20]
 800d70e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800d710:	697b      	ldr	r3, [r7, #20]
 800d712:	687a      	ldr	r2, [r7, #4]
 800d714:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	7a5b      	ldrb	r3, [r3, #9]
 800d71a:	f003 030c 	and.w	r3, r3, #12
 800d71e:	b2da      	uxtb	r2, r3
 800d720:	697b      	ldr	r3, [r7, #20]
 800d722:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	7a1a      	ldrb	r2, [r3, #8]
 800d728:	697b      	ldr	r3, [r7, #20]
 800d72a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800d72c:	4b2e      	ldr	r3, [pc, #184]	; (800d7e8 <tcp_listen_input+0x1f4>)
 800d72e:	681a      	ldr	r2, [r3, #0]
 800d730:	697b      	ldr	r3, [r7, #20]
 800d732:	60da      	str	r2, [r3, #12]
 800d734:	4a2c      	ldr	r2, [pc, #176]	; (800d7e8 <tcp_listen_input+0x1f4>)
 800d736:	697b      	ldr	r3, [r7, #20]
 800d738:	6013      	str	r3, [r2, #0]
 800d73a:	f003 fd29 	bl	8011190 <tcp_timer_needed>
 800d73e:	4b2b      	ldr	r3, [pc, #172]	; (800d7ec <tcp_listen_input+0x1f8>)
 800d740:	2201      	movs	r2, #1
 800d742:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800d744:	6978      	ldr	r0, [r7, #20]
 800d746:	f001 fd8f 	bl	800f268 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800d74a:	4b23      	ldr	r3, [pc, #140]	; (800d7d8 <tcp_listen_input+0x1e4>)
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	89db      	ldrh	r3, [r3, #14]
 800d750:	b29a      	uxth	r2, r3
 800d752:	697b      	ldr	r3, [r7, #20]
 800d754:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800d758:	697b      	ldr	r3, [r7, #20]
 800d75a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d75e:	697b      	ldr	r3, [r7, #20]
 800d760:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800d764:	697b      	ldr	r3, [r7, #20]
 800d766:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800d768:	697b      	ldr	r3, [r7, #20]
 800d76a:	3304      	adds	r3, #4
 800d76c:	4618      	mov	r0, r3
 800d76e:	f007 faef 	bl	8014d50 <ip4_route>
 800d772:	4601      	mov	r1, r0
 800d774:	697b      	ldr	r3, [r7, #20]
 800d776:	3304      	adds	r3, #4
 800d778:	461a      	mov	r2, r3
 800d77a:	4620      	mov	r0, r4
 800d77c:	f7ff fa30 	bl	800cbe0 <tcp_eff_send_mss_netif>
 800d780:	4603      	mov	r3, r0
 800d782:	461a      	mov	r2, r3
 800d784:	697b      	ldr	r3, [r7, #20]
 800d786:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800d788:	2112      	movs	r1, #18
 800d78a:	6978      	ldr	r0, [r7, #20]
 800d78c:	f002 fc9c 	bl	80100c8 <tcp_enqueue_flags>
 800d790:	4603      	mov	r3, r0
 800d792:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800d794:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d004      	beq.n	800d7a6 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800d79c:	2100      	movs	r1, #0
 800d79e:	6978      	ldr	r0, [r7, #20]
 800d7a0:	f7fd fed2 	bl	800b548 <tcp_abandon>
      return;
 800d7a4:	e006      	b.n	800d7b4 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800d7a6:	6978      	ldr	r0, [r7, #20]
 800d7a8:	f002 fd7c 	bl	80102a4 <tcp_output>
  return;
 800d7ac:	e001      	b.n	800d7b2 <tcp_listen_input+0x1be>
    return;
 800d7ae:	bf00      	nop
 800d7b0:	e000      	b.n	800d7b4 <tcp_listen_input+0x1c0>
  return;
 800d7b2:	bf00      	nop
}
 800d7b4:	371c      	adds	r7, #28
 800d7b6:	46bd      	mov	sp, r7
 800d7b8:	bd90      	pop	{r4, r7, pc}
 800d7ba:	bf00      	nop
 800d7bc:	2001aef8 	.word	0x2001aef8
 800d7c0:	0801968c 	.word	0x0801968c
 800d7c4:	08019884 	.word	0x08019884
 800d7c8:	080196d8 	.word	0x080196d8
 800d7cc:	2001aef0 	.word	0x2001aef0
 800d7d0:	2001aef6 	.word	0x2001aef6
 800d7d4:	2001aeec 	.word	0x2001aeec
 800d7d8:	2001aedc 	.word	0x2001aedc
 800d7dc:	20016990 	.word	0x20016990
 800d7e0:	20016994 	.word	0x20016994
 800d7e4:	20016980 	.word	0x20016980
 800d7e8:	2001aec0 	.word	0x2001aec0
 800d7ec:	2001aec8 	.word	0x2001aec8

0800d7f0 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800d7f0:	b580      	push	{r7, lr}
 800d7f2:	b086      	sub	sp, #24
 800d7f4:	af04      	add	r7, sp, #16
 800d7f6:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800d7f8:	4b2f      	ldr	r3, [pc, #188]	; (800d8b8 <tcp_timewait_input+0xc8>)
 800d7fa:	781b      	ldrb	r3, [r3, #0]
 800d7fc:	f003 0304 	and.w	r3, r3, #4
 800d800:	2b00      	cmp	r3, #0
 800d802:	d153      	bne.n	800d8ac <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	2b00      	cmp	r3, #0
 800d808:	d106      	bne.n	800d818 <tcp_timewait_input+0x28>
 800d80a:	4b2c      	ldr	r3, [pc, #176]	; (800d8bc <tcp_timewait_input+0xcc>)
 800d80c:	f240 22ee 	movw	r2, #750	; 0x2ee
 800d810:	492b      	ldr	r1, [pc, #172]	; (800d8c0 <tcp_timewait_input+0xd0>)
 800d812:	482c      	ldr	r0, [pc, #176]	; (800d8c4 <tcp_timewait_input+0xd4>)
 800d814:	f008 fdfc 	bl	8016410 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800d818:	4b27      	ldr	r3, [pc, #156]	; (800d8b8 <tcp_timewait_input+0xc8>)
 800d81a:	781b      	ldrb	r3, [r3, #0]
 800d81c:	f003 0302 	and.w	r3, r3, #2
 800d820:	2b00      	cmp	r3, #0
 800d822:	d02a      	beq.n	800d87a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800d824:	4b28      	ldr	r3, [pc, #160]	; (800d8c8 <tcp_timewait_input+0xd8>)
 800d826:	681a      	ldr	r2, [r3, #0]
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d82c:	1ad3      	subs	r3, r2, r3
 800d82e:	2b00      	cmp	r3, #0
 800d830:	db2d      	blt.n	800d88e <tcp_timewait_input+0x9e>
 800d832:	4b25      	ldr	r3, [pc, #148]	; (800d8c8 <tcp_timewait_input+0xd8>)
 800d834:	681a      	ldr	r2, [r3, #0]
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d83a:	6879      	ldr	r1, [r7, #4]
 800d83c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d83e:	440b      	add	r3, r1
 800d840:	1ad3      	subs	r3, r2, r3
 800d842:	2b00      	cmp	r3, #0
 800d844:	dc23      	bgt.n	800d88e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d846:	4b21      	ldr	r3, [pc, #132]	; (800d8cc <tcp_timewait_input+0xdc>)
 800d848:	6819      	ldr	r1, [r3, #0]
 800d84a:	4b21      	ldr	r3, [pc, #132]	; (800d8d0 <tcp_timewait_input+0xe0>)
 800d84c:	881b      	ldrh	r3, [r3, #0]
 800d84e:	461a      	mov	r2, r3
 800d850:	4b1d      	ldr	r3, [pc, #116]	; (800d8c8 <tcp_timewait_input+0xd8>)
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d856:	4b1f      	ldr	r3, [pc, #124]	; (800d8d4 <tcp_timewait_input+0xe4>)
 800d858:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d85a:	885b      	ldrh	r3, [r3, #2]
 800d85c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d85e:	4a1d      	ldr	r2, [pc, #116]	; (800d8d4 <tcp_timewait_input+0xe4>)
 800d860:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d862:	8812      	ldrh	r2, [r2, #0]
 800d864:	b292      	uxth	r2, r2
 800d866:	9202      	str	r2, [sp, #8]
 800d868:	9301      	str	r3, [sp, #4]
 800d86a:	4b1b      	ldr	r3, [pc, #108]	; (800d8d8 <tcp_timewait_input+0xe8>)
 800d86c:	9300      	str	r3, [sp, #0]
 800d86e:	4b1b      	ldr	r3, [pc, #108]	; (800d8dc <tcp_timewait_input+0xec>)
 800d870:	4602      	mov	r2, r0
 800d872:	6878      	ldr	r0, [r7, #4]
 800d874:	f003 faca 	bl	8010e0c <tcp_rst>
      return;
 800d878:	e01b      	b.n	800d8b2 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800d87a:	4b0f      	ldr	r3, [pc, #60]	; (800d8b8 <tcp_timewait_input+0xc8>)
 800d87c:	781b      	ldrb	r3, [r3, #0]
 800d87e:	f003 0301 	and.w	r3, r3, #1
 800d882:	2b00      	cmp	r3, #0
 800d884:	d003      	beq.n	800d88e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800d886:	4b16      	ldr	r3, [pc, #88]	; (800d8e0 <tcp_timewait_input+0xf0>)
 800d888:	681a      	ldr	r2, [r3, #0]
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800d88e:	4b10      	ldr	r3, [pc, #64]	; (800d8d0 <tcp_timewait_input+0xe0>)
 800d890:	881b      	ldrh	r3, [r3, #0]
 800d892:	2b00      	cmp	r3, #0
 800d894:	d00c      	beq.n	800d8b0 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	8b5b      	ldrh	r3, [r3, #26]
 800d89a:	f043 0302 	orr.w	r3, r3, #2
 800d89e:	b29a      	uxth	r2, r3
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d8a4:	6878      	ldr	r0, [r7, #4]
 800d8a6:	f002 fcfd 	bl	80102a4 <tcp_output>
  }
  return;
 800d8aa:	e001      	b.n	800d8b0 <tcp_timewait_input+0xc0>
    return;
 800d8ac:	bf00      	nop
 800d8ae:	e000      	b.n	800d8b2 <tcp_timewait_input+0xc2>
  return;
 800d8b0:	bf00      	nop
}
 800d8b2:	3708      	adds	r7, #8
 800d8b4:	46bd      	mov	sp, r7
 800d8b6:	bd80      	pop	{r7, pc}
 800d8b8:	2001aef8 	.word	0x2001aef8
 800d8bc:	0801968c 	.word	0x0801968c
 800d8c0:	080198a4 	.word	0x080198a4
 800d8c4:	080196d8 	.word	0x080196d8
 800d8c8:	2001aeec 	.word	0x2001aeec
 800d8cc:	2001aef0 	.word	0x2001aef0
 800d8d0:	2001aef6 	.word	0x2001aef6
 800d8d4:	2001aedc 	.word	0x2001aedc
 800d8d8:	20016990 	.word	0x20016990
 800d8dc:	20016994 	.word	0x20016994
 800d8e0:	2001aeb4 	.word	0x2001aeb4

0800d8e4 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800d8e4:	b590      	push	{r4, r7, lr}
 800d8e6:	b08d      	sub	sp, #52	; 0x34
 800d8e8:	af04      	add	r7, sp, #16
 800d8ea:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800d8ec:	2300      	movs	r3, #0
 800d8ee:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800d8f0:	2300      	movs	r3, #0
 800d8f2:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d106      	bne.n	800d908 <tcp_process+0x24>
 800d8fa:	4b9d      	ldr	r3, [pc, #628]	; (800db70 <tcp_process+0x28c>)
 800d8fc:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800d900:	499c      	ldr	r1, [pc, #624]	; (800db74 <tcp_process+0x290>)
 800d902:	489d      	ldr	r0, [pc, #628]	; (800db78 <tcp_process+0x294>)
 800d904:	f008 fd84 	bl	8016410 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800d908:	4b9c      	ldr	r3, [pc, #624]	; (800db7c <tcp_process+0x298>)
 800d90a:	781b      	ldrb	r3, [r3, #0]
 800d90c:	f003 0304 	and.w	r3, r3, #4
 800d910:	2b00      	cmp	r3, #0
 800d912:	d04e      	beq.n	800d9b2 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	7d1b      	ldrb	r3, [r3, #20]
 800d918:	2b02      	cmp	r3, #2
 800d91a:	d108      	bne.n	800d92e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d920:	4b97      	ldr	r3, [pc, #604]	; (800db80 <tcp_process+0x29c>)
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	429a      	cmp	r2, r3
 800d926:	d123      	bne.n	800d970 <tcp_process+0x8c>
        acceptable = 1;
 800d928:	2301      	movs	r3, #1
 800d92a:	76fb      	strb	r3, [r7, #27]
 800d92c:	e020      	b.n	800d970 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d932:	4b94      	ldr	r3, [pc, #592]	; (800db84 <tcp_process+0x2a0>)
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	429a      	cmp	r2, r3
 800d938:	d102      	bne.n	800d940 <tcp_process+0x5c>
        acceptable = 1;
 800d93a:	2301      	movs	r3, #1
 800d93c:	76fb      	strb	r3, [r7, #27]
 800d93e:	e017      	b.n	800d970 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800d940:	4b90      	ldr	r3, [pc, #576]	; (800db84 <tcp_process+0x2a0>)
 800d942:	681a      	ldr	r2, [r3, #0]
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d948:	1ad3      	subs	r3, r2, r3
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	db10      	blt.n	800d970 <tcp_process+0x8c>
 800d94e:	4b8d      	ldr	r3, [pc, #564]	; (800db84 <tcp_process+0x2a0>)
 800d950:	681a      	ldr	r2, [r3, #0]
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d956:	6879      	ldr	r1, [r7, #4]
 800d958:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d95a:	440b      	add	r3, r1
 800d95c:	1ad3      	subs	r3, r2, r3
 800d95e:	2b00      	cmp	r3, #0
 800d960:	dc06      	bgt.n	800d970 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	8b5b      	ldrh	r3, [r3, #26]
 800d966:	f043 0302 	orr.w	r3, r3, #2
 800d96a:	b29a      	uxth	r2, r3
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800d970:	7efb      	ldrb	r3, [r7, #27]
 800d972:	2b00      	cmp	r3, #0
 800d974:	d01b      	beq.n	800d9ae <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	7d1b      	ldrb	r3, [r3, #20]
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d106      	bne.n	800d98c <tcp_process+0xa8>
 800d97e:	4b7c      	ldr	r3, [pc, #496]	; (800db70 <tcp_process+0x28c>)
 800d980:	f44f 724e 	mov.w	r2, #824	; 0x338
 800d984:	4980      	ldr	r1, [pc, #512]	; (800db88 <tcp_process+0x2a4>)
 800d986:	487c      	ldr	r0, [pc, #496]	; (800db78 <tcp_process+0x294>)
 800d988:	f008 fd42 	bl	8016410 <iprintf>
      recv_flags |= TF_RESET;
 800d98c:	4b7f      	ldr	r3, [pc, #508]	; (800db8c <tcp_process+0x2a8>)
 800d98e:	781b      	ldrb	r3, [r3, #0]
 800d990:	f043 0308 	orr.w	r3, r3, #8
 800d994:	b2da      	uxtb	r2, r3
 800d996:	4b7d      	ldr	r3, [pc, #500]	; (800db8c <tcp_process+0x2a8>)
 800d998:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	8b5b      	ldrh	r3, [r3, #26]
 800d99e:	f023 0301 	bic.w	r3, r3, #1
 800d9a2:	b29a      	uxth	r2, r3
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800d9a8:	f06f 030d 	mvn.w	r3, #13
 800d9ac:	e37a      	b.n	800e0a4 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800d9ae:	2300      	movs	r3, #0
 800d9b0:	e378      	b.n	800e0a4 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800d9b2:	4b72      	ldr	r3, [pc, #456]	; (800db7c <tcp_process+0x298>)
 800d9b4:	781b      	ldrb	r3, [r3, #0]
 800d9b6:	f003 0302 	and.w	r3, r3, #2
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d010      	beq.n	800d9e0 <tcp_process+0xfc>
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	7d1b      	ldrb	r3, [r3, #20]
 800d9c2:	2b02      	cmp	r3, #2
 800d9c4:	d00c      	beq.n	800d9e0 <tcp_process+0xfc>
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	7d1b      	ldrb	r3, [r3, #20]
 800d9ca:	2b03      	cmp	r3, #3
 800d9cc:	d008      	beq.n	800d9e0 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	8b5b      	ldrh	r3, [r3, #26]
 800d9d2:	f043 0302 	orr.w	r3, r3, #2
 800d9d6:	b29a      	uxth	r2, r3
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800d9dc:	2300      	movs	r3, #0
 800d9de:	e361      	b.n	800e0a4 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	8b5b      	ldrh	r3, [r3, #26]
 800d9e4:	f003 0310 	and.w	r3, r3, #16
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d103      	bne.n	800d9f4 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800d9ec:	4b68      	ldr	r3, [pc, #416]	; (800db90 <tcp_process+0x2ac>)
 800d9ee:	681a      	ldr	r2, [r3, #0]
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	2200      	movs	r2, #0
 800d9f8:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	2200      	movs	r2, #0
 800da00:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800da04:	6878      	ldr	r0, [r7, #4]
 800da06:	f001 fc2f 	bl	800f268 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	7d1b      	ldrb	r3, [r3, #20]
 800da0e:	3b02      	subs	r3, #2
 800da10:	2b07      	cmp	r3, #7
 800da12:	f200 8337 	bhi.w	800e084 <tcp_process+0x7a0>
 800da16:	a201      	add	r2, pc, #4	; (adr r2, 800da1c <tcp_process+0x138>)
 800da18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da1c:	0800da3d 	.word	0x0800da3d
 800da20:	0800dc6d 	.word	0x0800dc6d
 800da24:	0800dde5 	.word	0x0800dde5
 800da28:	0800de0f 	.word	0x0800de0f
 800da2c:	0800df33 	.word	0x0800df33
 800da30:	0800dde5 	.word	0x0800dde5
 800da34:	0800dfbf 	.word	0x0800dfbf
 800da38:	0800e04f 	.word	0x0800e04f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800da3c:	4b4f      	ldr	r3, [pc, #316]	; (800db7c <tcp_process+0x298>)
 800da3e:	781b      	ldrb	r3, [r3, #0]
 800da40:	f003 0310 	and.w	r3, r3, #16
 800da44:	2b00      	cmp	r3, #0
 800da46:	f000 80e4 	beq.w	800dc12 <tcp_process+0x32e>
 800da4a:	4b4c      	ldr	r3, [pc, #304]	; (800db7c <tcp_process+0x298>)
 800da4c:	781b      	ldrb	r3, [r3, #0]
 800da4e:	f003 0302 	and.w	r3, r3, #2
 800da52:	2b00      	cmp	r3, #0
 800da54:	f000 80dd 	beq.w	800dc12 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da5c:	1c5a      	adds	r2, r3, #1
 800da5e:	4b48      	ldr	r3, [pc, #288]	; (800db80 <tcp_process+0x29c>)
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	429a      	cmp	r2, r3
 800da64:	f040 80d5 	bne.w	800dc12 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800da68:	4b46      	ldr	r3, [pc, #280]	; (800db84 <tcp_process+0x2a0>)
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	1c5a      	adds	r2, r3, #1
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800da7a:	4b41      	ldr	r3, [pc, #260]	; (800db80 <tcp_process+0x29c>)
 800da7c:	681a      	ldr	r2, [r3, #0]
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800da82:	4b44      	ldr	r3, [pc, #272]	; (800db94 <tcp_process+0x2b0>)
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	89db      	ldrh	r3, [r3, #14]
 800da88:	b29a      	uxth	r2, r3
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800da9c:	4b39      	ldr	r3, [pc, #228]	; (800db84 <tcp_process+0x2a0>)
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	1e5a      	subs	r2, r3, #1
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	2204      	movs	r2, #4
 800daaa:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	3304      	adds	r3, #4
 800dab4:	4618      	mov	r0, r3
 800dab6:	f007 f94b 	bl	8014d50 <ip4_route>
 800daba:	4601      	mov	r1, r0
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	3304      	adds	r3, #4
 800dac0:	461a      	mov	r2, r3
 800dac2:	4620      	mov	r0, r4
 800dac4:	f7ff f88c 	bl	800cbe0 <tcp_eff_send_mss_netif>
 800dac8:	4603      	mov	r3, r0
 800daca:	461a      	mov	r2, r3
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dad4:	009a      	lsls	r2, r3, #2
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dada:	005b      	lsls	r3, r3, #1
 800dadc:	f241 111c 	movw	r1, #4380	; 0x111c
 800dae0:	428b      	cmp	r3, r1
 800dae2:	bf38      	it	cc
 800dae4:	460b      	movcc	r3, r1
 800dae6:	429a      	cmp	r2, r3
 800dae8:	d204      	bcs.n	800daf4 <tcp_process+0x210>
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800daee:	009b      	lsls	r3, r3, #2
 800daf0:	b29b      	uxth	r3, r3
 800daf2:	e00d      	b.n	800db10 <tcp_process+0x22c>
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800daf8:	005b      	lsls	r3, r3, #1
 800dafa:	f241 121c 	movw	r2, #4380	; 0x111c
 800dafe:	4293      	cmp	r3, r2
 800db00:	d904      	bls.n	800db0c <tcp_process+0x228>
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800db06:	005b      	lsls	r3, r3, #1
 800db08:	b29b      	uxth	r3, r3
 800db0a:	e001      	b.n	800db10 <tcp_process+0x22c>
 800db0c:	f241 131c 	movw	r3, #4380	; 0x111c
 800db10:	687a      	ldr	r2, [r7, #4]
 800db12:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d106      	bne.n	800db2e <tcp_process+0x24a>
 800db20:	4b13      	ldr	r3, [pc, #76]	; (800db70 <tcp_process+0x28c>)
 800db22:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800db26:	491c      	ldr	r1, [pc, #112]	; (800db98 <tcp_process+0x2b4>)
 800db28:	4813      	ldr	r0, [pc, #76]	; (800db78 <tcp_process+0x294>)
 800db2a:	f008 fc71 	bl	8016410 <iprintf>
        --pcb->snd_queuelen;
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800db34:	3b01      	subs	r3, #1
 800db36:	b29a      	uxth	r2, r3
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db42:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800db44:	69fb      	ldr	r3, [r7, #28]
 800db46:	2b00      	cmp	r3, #0
 800db48:	d12a      	bne.n	800dba0 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db4e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800db50:	69fb      	ldr	r3, [r7, #28]
 800db52:	2b00      	cmp	r3, #0
 800db54:	d106      	bne.n	800db64 <tcp_process+0x280>
 800db56:	4b06      	ldr	r3, [pc, #24]	; (800db70 <tcp_process+0x28c>)
 800db58:	f44f 725d 	mov.w	r2, #884	; 0x374
 800db5c:	490f      	ldr	r1, [pc, #60]	; (800db9c <tcp_process+0x2b8>)
 800db5e:	4806      	ldr	r0, [pc, #24]	; (800db78 <tcp_process+0x294>)
 800db60:	f008 fc56 	bl	8016410 <iprintf>
          pcb->unsent = rseg->next;
 800db64:	69fb      	ldr	r3, [r7, #28]
 800db66:	681a      	ldr	r2, [r3, #0]
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	66da      	str	r2, [r3, #108]	; 0x6c
 800db6c:	e01c      	b.n	800dba8 <tcp_process+0x2c4>
 800db6e:	bf00      	nop
 800db70:	0801968c 	.word	0x0801968c
 800db74:	080198c4 	.word	0x080198c4
 800db78:	080196d8 	.word	0x080196d8
 800db7c:	2001aef8 	.word	0x2001aef8
 800db80:	2001aef0 	.word	0x2001aef0
 800db84:	2001aeec 	.word	0x2001aeec
 800db88:	080198e0 	.word	0x080198e0
 800db8c:	2001aef9 	.word	0x2001aef9
 800db90:	2001aeb4 	.word	0x2001aeb4
 800db94:	2001aedc 	.word	0x2001aedc
 800db98:	08019900 	.word	0x08019900
 800db9c:	08019918 	.word	0x08019918
        } else {
          pcb->unacked = rseg->next;
 800dba0:	69fb      	ldr	r3, [r7, #28]
 800dba2:	681a      	ldr	r2, [r3, #0]
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800dba8:	69f8      	ldr	r0, [r7, #28]
 800dbaa:	f7fe fc6c 	bl	800c486 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d104      	bne.n	800dbc0 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dbbc:	861a      	strh	r2, [r3, #48]	; 0x30
 800dbbe:	e006      	b.n	800dbce <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	2200      	movs	r2, #0
 800dbc4:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	2200      	movs	r2, #0
 800dbca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d00a      	beq.n	800dbee <tcp_process+0x30a>
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dbde:	687a      	ldr	r2, [r7, #4]
 800dbe0:	6910      	ldr	r0, [r2, #16]
 800dbe2:	2200      	movs	r2, #0
 800dbe4:	6879      	ldr	r1, [r7, #4]
 800dbe6:	4798      	blx	r3
 800dbe8:	4603      	mov	r3, r0
 800dbea:	76bb      	strb	r3, [r7, #26]
 800dbec:	e001      	b.n	800dbf2 <tcp_process+0x30e>
 800dbee:	2300      	movs	r3, #0
 800dbf0:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800dbf2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800dbf6:	f113 0f0d 	cmn.w	r3, #13
 800dbfa:	d102      	bne.n	800dc02 <tcp_process+0x31e>
          return ERR_ABRT;
 800dbfc:	f06f 030c 	mvn.w	r3, #12
 800dc00:	e250      	b.n	800e0a4 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	8b5b      	ldrh	r3, [r3, #26]
 800dc06:	f043 0302 	orr.w	r3, r3, #2
 800dc0a:	b29a      	uxth	r2, r3
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800dc10:	e23a      	b.n	800e088 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800dc12:	4b98      	ldr	r3, [pc, #608]	; (800de74 <tcp_process+0x590>)
 800dc14:	781b      	ldrb	r3, [r3, #0]
 800dc16:	f003 0310 	and.w	r3, r3, #16
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	f000 8234 	beq.w	800e088 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dc20:	4b95      	ldr	r3, [pc, #596]	; (800de78 <tcp_process+0x594>)
 800dc22:	6819      	ldr	r1, [r3, #0]
 800dc24:	4b95      	ldr	r3, [pc, #596]	; (800de7c <tcp_process+0x598>)
 800dc26:	881b      	ldrh	r3, [r3, #0]
 800dc28:	461a      	mov	r2, r3
 800dc2a:	4b95      	ldr	r3, [pc, #596]	; (800de80 <tcp_process+0x59c>)
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800dc30:	4b94      	ldr	r3, [pc, #592]	; (800de84 <tcp_process+0x5a0>)
 800dc32:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dc34:	885b      	ldrh	r3, [r3, #2]
 800dc36:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800dc38:	4a92      	ldr	r2, [pc, #584]	; (800de84 <tcp_process+0x5a0>)
 800dc3a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dc3c:	8812      	ldrh	r2, [r2, #0]
 800dc3e:	b292      	uxth	r2, r2
 800dc40:	9202      	str	r2, [sp, #8]
 800dc42:	9301      	str	r3, [sp, #4]
 800dc44:	4b90      	ldr	r3, [pc, #576]	; (800de88 <tcp_process+0x5a4>)
 800dc46:	9300      	str	r3, [sp, #0]
 800dc48:	4b90      	ldr	r3, [pc, #576]	; (800de8c <tcp_process+0x5a8>)
 800dc4a:	4602      	mov	r2, r0
 800dc4c:	6878      	ldr	r0, [r7, #4]
 800dc4e:	f003 f8dd 	bl	8010e0c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800dc58:	2b05      	cmp	r3, #5
 800dc5a:	f200 8215 	bhi.w	800e088 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	2200      	movs	r2, #0
 800dc62:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800dc64:	6878      	ldr	r0, [r7, #4]
 800dc66:	f002 fea7 	bl	80109b8 <tcp_rexmit_rto>
      break;
 800dc6a:	e20d      	b.n	800e088 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800dc6c:	4b81      	ldr	r3, [pc, #516]	; (800de74 <tcp_process+0x590>)
 800dc6e:	781b      	ldrb	r3, [r3, #0]
 800dc70:	f003 0310 	and.w	r3, r3, #16
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	f000 80a1 	beq.w	800ddbc <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800dc7a:	4b7f      	ldr	r3, [pc, #508]	; (800de78 <tcp_process+0x594>)
 800dc7c:	681a      	ldr	r2, [r3, #0]
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dc82:	1ad3      	subs	r3, r2, r3
 800dc84:	3b01      	subs	r3, #1
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	db7e      	blt.n	800dd88 <tcp_process+0x4a4>
 800dc8a:	4b7b      	ldr	r3, [pc, #492]	; (800de78 <tcp_process+0x594>)
 800dc8c:	681a      	ldr	r2, [r3, #0]
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc92:	1ad3      	subs	r3, r2, r3
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	dc77      	bgt.n	800dd88 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	2204      	movs	r2, #4
 800dc9c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d102      	bne.n	800dcac <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800dca6:	23fa      	movs	r3, #250	; 0xfa
 800dca8:	76bb      	strb	r3, [r7, #26]
 800dcaa:	e01d      	b.n	800dce8 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dcb0:	699b      	ldr	r3, [r3, #24]
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d106      	bne.n	800dcc4 <tcp_process+0x3e0>
 800dcb6:	4b76      	ldr	r3, [pc, #472]	; (800de90 <tcp_process+0x5ac>)
 800dcb8:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800dcbc:	4975      	ldr	r1, [pc, #468]	; (800de94 <tcp_process+0x5b0>)
 800dcbe:	4876      	ldr	r0, [pc, #472]	; (800de98 <tcp_process+0x5b4>)
 800dcc0:	f008 fba6 	bl	8016410 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dcc8:	699b      	ldr	r3, [r3, #24]
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d00a      	beq.n	800dce4 <tcp_process+0x400>
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dcd2:	699b      	ldr	r3, [r3, #24]
 800dcd4:	687a      	ldr	r2, [r7, #4]
 800dcd6:	6910      	ldr	r0, [r2, #16]
 800dcd8:	2200      	movs	r2, #0
 800dcda:	6879      	ldr	r1, [r7, #4]
 800dcdc:	4798      	blx	r3
 800dcde:	4603      	mov	r3, r0
 800dce0:	76bb      	strb	r3, [r7, #26]
 800dce2:	e001      	b.n	800dce8 <tcp_process+0x404>
 800dce4:	23f0      	movs	r3, #240	; 0xf0
 800dce6:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800dce8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d00a      	beq.n	800dd06 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800dcf0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800dcf4:	f113 0f0d 	cmn.w	r3, #13
 800dcf8:	d002      	beq.n	800dd00 <tcp_process+0x41c>
              tcp_abort(pcb);
 800dcfa:	6878      	ldr	r0, [r7, #4]
 800dcfc:	f7fd fce2 	bl	800b6c4 <tcp_abort>
            }
            return ERR_ABRT;
 800dd00:	f06f 030c 	mvn.w	r3, #12
 800dd04:	e1ce      	b.n	800e0a4 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800dd06:	6878      	ldr	r0, [r7, #4]
 800dd08:	f000 fae0 	bl	800e2cc <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800dd0c:	4b63      	ldr	r3, [pc, #396]	; (800de9c <tcp_process+0x5b8>)
 800dd0e:	881b      	ldrh	r3, [r3, #0]
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d005      	beq.n	800dd20 <tcp_process+0x43c>
            recv_acked--;
 800dd14:	4b61      	ldr	r3, [pc, #388]	; (800de9c <tcp_process+0x5b8>)
 800dd16:	881b      	ldrh	r3, [r3, #0]
 800dd18:	3b01      	subs	r3, #1
 800dd1a:	b29a      	uxth	r2, r3
 800dd1c:	4b5f      	ldr	r3, [pc, #380]	; (800de9c <tcp_process+0x5b8>)
 800dd1e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dd24:	009a      	lsls	r2, r3, #2
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dd2a:	005b      	lsls	r3, r3, #1
 800dd2c:	f241 111c 	movw	r1, #4380	; 0x111c
 800dd30:	428b      	cmp	r3, r1
 800dd32:	bf38      	it	cc
 800dd34:	460b      	movcc	r3, r1
 800dd36:	429a      	cmp	r2, r3
 800dd38:	d204      	bcs.n	800dd44 <tcp_process+0x460>
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dd3e:	009b      	lsls	r3, r3, #2
 800dd40:	b29b      	uxth	r3, r3
 800dd42:	e00d      	b.n	800dd60 <tcp_process+0x47c>
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dd48:	005b      	lsls	r3, r3, #1
 800dd4a:	f241 121c 	movw	r2, #4380	; 0x111c
 800dd4e:	4293      	cmp	r3, r2
 800dd50:	d904      	bls.n	800dd5c <tcp_process+0x478>
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dd56:	005b      	lsls	r3, r3, #1
 800dd58:	b29b      	uxth	r3, r3
 800dd5a:	e001      	b.n	800dd60 <tcp_process+0x47c>
 800dd5c:	f241 131c 	movw	r3, #4380	; 0x111c
 800dd60:	687a      	ldr	r2, [r7, #4]
 800dd62:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800dd66:	4b4e      	ldr	r3, [pc, #312]	; (800dea0 <tcp_process+0x5bc>)
 800dd68:	781b      	ldrb	r3, [r3, #0]
 800dd6a:	f003 0320 	and.w	r3, r3, #32
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d037      	beq.n	800dde2 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	8b5b      	ldrh	r3, [r3, #26]
 800dd76:	f043 0302 	orr.w	r3, r3, #2
 800dd7a:	b29a      	uxth	r2, r3
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	2207      	movs	r2, #7
 800dd84:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800dd86:	e02c      	b.n	800dde2 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dd88:	4b3b      	ldr	r3, [pc, #236]	; (800de78 <tcp_process+0x594>)
 800dd8a:	6819      	ldr	r1, [r3, #0]
 800dd8c:	4b3b      	ldr	r3, [pc, #236]	; (800de7c <tcp_process+0x598>)
 800dd8e:	881b      	ldrh	r3, [r3, #0]
 800dd90:	461a      	mov	r2, r3
 800dd92:	4b3b      	ldr	r3, [pc, #236]	; (800de80 <tcp_process+0x59c>)
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800dd98:	4b3a      	ldr	r3, [pc, #232]	; (800de84 <tcp_process+0x5a0>)
 800dd9a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dd9c:	885b      	ldrh	r3, [r3, #2]
 800dd9e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800dda0:	4a38      	ldr	r2, [pc, #224]	; (800de84 <tcp_process+0x5a0>)
 800dda2:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dda4:	8812      	ldrh	r2, [r2, #0]
 800dda6:	b292      	uxth	r2, r2
 800dda8:	9202      	str	r2, [sp, #8]
 800ddaa:	9301      	str	r3, [sp, #4]
 800ddac:	4b36      	ldr	r3, [pc, #216]	; (800de88 <tcp_process+0x5a4>)
 800ddae:	9300      	str	r3, [sp, #0]
 800ddb0:	4b36      	ldr	r3, [pc, #216]	; (800de8c <tcp_process+0x5a8>)
 800ddb2:	4602      	mov	r2, r0
 800ddb4:	6878      	ldr	r0, [r7, #4]
 800ddb6:	f003 f829 	bl	8010e0c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800ddba:	e167      	b.n	800e08c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800ddbc:	4b2d      	ldr	r3, [pc, #180]	; (800de74 <tcp_process+0x590>)
 800ddbe:	781b      	ldrb	r3, [r3, #0]
 800ddc0:	f003 0302 	and.w	r3, r3, #2
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	f000 8161 	beq.w	800e08c <tcp_process+0x7a8>
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddce:	1e5a      	subs	r2, r3, #1
 800ddd0:	4b2b      	ldr	r3, [pc, #172]	; (800de80 <tcp_process+0x59c>)
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	429a      	cmp	r2, r3
 800ddd6:	f040 8159 	bne.w	800e08c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800ddda:	6878      	ldr	r0, [r7, #4]
 800dddc:	f002 fe0e 	bl	80109fc <tcp_rexmit>
      break;
 800dde0:	e154      	b.n	800e08c <tcp_process+0x7a8>
 800dde2:	e153      	b.n	800e08c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800dde4:	6878      	ldr	r0, [r7, #4]
 800dde6:	f000 fa71 	bl	800e2cc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800ddea:	4b2d      	ldr	r3, [pc, #180]	; (800dea0 <tcp_process+0x5bc>)
 800ddec:	781b      	ldrb	r3, [r3, #0]
 800ddee:	f003 0320 	and.w	r3, r3, #32
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	f000 814c 	beq.w	800e090 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	8b5b      	ldrh	r3, [r3, #26]
 800ddfc:	f043 0302 	orr.w	r3, r3, #2
 800de00:	b29a      	uxth	r2, r3
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	2207      	movs	r2, #7
 800de0a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800de0c:	e140      	b.n	800e090 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800de0e:	6878      	ldr	r0, [r7, #4]
 800de10:	f000 fa5c 	bl	800e2cc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800de14:	4b22      	ldr	r3, [pc, #136]	; (800dea0 <tcp_process+0x5bc>)
 800de16:	781b      	ldrb	r3, [r3, #0]
 800de18:	f003 0320 	and.w	r3, r3, #32
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d071      	beq.n	800df04 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800de20:	4b14      	ldr	r3, [pc, #80]	; (800de74 <tcp_process+0x590>)
 800de22:	781b      	ldrb	r3, [r3, #0]
 800de24:	f003 0310 	and.w	r3, r3, #16
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d060      	beq.n	800deee <tcp_process+0x60a>
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800de30:	4b11      	ldr	r3, [pc, #68]	; (800de78 <tcp_process+0x594>)
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	429a      	cmp	r2, r3
 800de36:	d15a      	bne.n	800deee <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d156      	bne.n	800deee <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	8b5b      	ldrh	r3, [r3, #26]
 800de44:	f043 0302 	orr.w	r3, r3, #2
 800de48:	b29a      	uxth	r2, r3
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800de4e:	6878      	ldr	r0, [r7, #4]
 800de50:	f7fe fdbc 	bl	800c9cc <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800de54:	4b13      	ldr	r3, [pc, #76]	; (800dea4 <tcp_process+0x5c0>)
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	687a      	ldr	r2, [r7, #4]
 800de5a:	429a      	cmp	r2, r3
 800de5c:	d105      	bne.n	800de6a <tcp_process+0x586>
 800de5e:	4b11      	ldr	r3, [pc, #68]	; (800dea4 <tcp_process+0x5c0>)
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	68db      	ldr	r3, [r3, #12]
 800de64:	4a0f      	ldr	r2, [pc, #60]	; (800dea4 <tcp_process+0x5c0>)
 800de66:	6013      	str	r3, [r2, #0]
 800de68:	e02e      	b.n	800dec8 <tcp_process+0x5e4>
 800de6a:	4b0e      	ldr	r3, [pc, #56]	; (800dea4 <tcp_process+0x5c0>)
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	617b      	str	r3, [r7, #20]
 800de70:	e027      	b.n	800dec2 <tcp_process+0x5de>
 800de72:	bf00      	nop
 800de74:	2001aef8 	.word	0x2001aef8
 800de78:	2001aef0 	.word	0x2001aef0
 800de7c:	2001aef6 	.word	0x2001aef6
 800de80:	2001aeec 	.word	0x2001aeec
 800de84:	2001aedc 	.word	0x2001aedc
 800de88:	20016990 	.word	0x20016990
 800de8c:	20016994 	.word	0x20016994
 800de90:	0801968c 	.word	0x0801968c
 800de94:	0801992c 	.word	0x0801992c
 800de98:	080196d8 	.word	0x080196d8
 800de9c:	2001aef4 	.word	0x2001aef4
 800dea0:	2001aef9 	.word	0x2001aef9
 800dea4:	2001aec0 	.word	0x2001aec0
 800dea8:	697b      	ldr	r3, [r7, #20]
 800deaa:	68db      	ldr	r3, [r3, #12]
 800deac:	687a      	ldr	r2, [r7, #4]
 800deae:	429a      	cmp	r2, r3
 800deb0:	d104      	bne.n	800debc <tcp_process+0x5d8>
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	68da      	ldr	r2, [r3, #12]
 800deb6:	697b      	ldr	r3, [r7, #20]
 800deb8:	60da      	str	r2, [r3, #12]
 800deba:	e005      	b.n	800dec8 <tcp_process+0x5e4>
 800debc:	697b      	ldr	r3, [r7, #20]
 800debe:	68db      	ldr	r3, [r3, #12]
 800dec0:	617b      	str	r3, [r7, #20]
 800dec2:	697b      	ldr	r3, [r7, #20]
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d1ef      	bne.n	800dea8 <tcp_process+0x5c4>
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	2200      	movs	r2, #0
 800decc:	60da      	str	r2, [r3, #12]
 800dece:	4b77      	ldr	r3, [pc, #476]	; (800e0ac <tcp_process+0x7c8>)
 800ded0:	2201      	movs	r2, #1
 800ded2:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	220a      	movs	r2, #10
 800ded8:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800deda:	4b75      	ldr	r3, [pc, #468]	; (800e0b0 <tcp_process+0x7cc>)
 800dedc:	681a      	ldr	r2, [r3, #0]
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	60da      	str	r2, [r3, #12]
 800dee2:	4a73      	ldr	r2, [pc, #460]	; (800e0b0 <tcp_process+0x7cc>)
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	6013      	str	r3, [r2, #0]
 800dee8:	f003 f952 	bl	8011190 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800deec:	e0d2      	b.n	800e094 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	8b5b      	ldrh	r3, [r3, #26]
 800def2:	f043 0302 	orr.w	r3, r3, #2
 800def6:	b29a      	uxth	r2, r3
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	2208      	movs	r2, #8
 800df00:	751a      	strb	r2, [r3, #20]
      break;
 800df02:	e0c7      	b.n	800e094 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800df04:	4b6b      	ldr	r3, [pc, #428]	; (800e0b4 <tcp_process+0x7d0>)
 800df06:	781b      	ldrb	r3, [r3, #0]
 800df08:	f003 0310 	and.w	r3, r3, #16
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	f000 80c1 	beq.w	800e094 <tcp_process+0x7b0>
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800df16:	4b68      	ldr	r3, [pc, #416]	; (800e0b8 <tcp_process+0x7d4>)
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	429a      	cmp	r2, r3
 800df1c:	f040 80ba 	bne.w	800e094 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800df24:	2b00      	cmp	r3, #0
 800df26:	f040 80b5 	bne.w	800e094 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	2206      	movs	r2, #6
 800df2e:	751a      	strb	r2, [r3, #20]
      break;
 800df30:	e0b0      	b.n	800e094 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800df32:	6878      	ldr	r0, [r7, #4]
 800df34:	f000 f9ca 	bl	800e2cc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800df38:	4b60      	ldr	r3, [pc, #384]	; (800e0bc <tcp_process+0x7d8>)
 800df3a:	781b      	ldrb	r3, [r3, #0]
 800df3c:	f003 0320 	and.w	r3, r3, #32
 800df40:	2b00      	cmp	r3, #0
 800df42:	f000 80a9 	beq.w	800e098 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	8b5b      	ldrh	r3, [r3, #26]
 800df4a:	f043 0302 	orr.w	r3, r3, #2
 800df4e:	b29a      	uxth	r2, r3
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800df54:	6878      	ldr	r0, [r7, #4]
 800df56:	f7fe fd39 	bl	800c9cc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800df5a:	4b59      	ldr	r3, [pc, #356]	; (800e0c0 <tcp_process+0x7dc>)
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	687a      	ldr	r2, [r7, #4]
 800df60:	429a      	cmp	r2, r3
 800df62:	d105      	bne.n	800df70 <tcp_process+0x68c>
 800df64:	4b56      	ldr	r3, [pc, #344]	; (800e0c0 <tcp_process+0x7dc>)
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	68db      	ldr	r3, [r3, #12]
 800df6a:	4a55      	ldr	r2, [pc, #340]	; (800e0c0 <tcp_process+0x7dc>)
 800df6c:	6013      	str	r3, [r2, #0]
 800df6e:	e013      	b.n	800df98 <tcp_process+0x6b4>
 800df70:	4b53      	ldr	r3, [pc, #332]	; (800e0c0 <tcp_process+0x7dc>)
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	613b      	str	r3, [r7, #16]
 800df76:	e00c      	b.n	800df92 <tcp_process+0x6ae>
 800df78:	693b      	ldr	r3, [r7, #16]
 800df7a:	68db      	ldr	r3, [r3, #12]
 800df7c:	687a      	ldr	r2, [r7, #4]
 800df7e:	429a      	cmp	r2, r3
 800df80:	d104      	bne.n	800df8c <tcp_process+0x6a8>
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	68da      	ldr	r2, [r3, #12]
 800df86:	693b      	ldr	r3, [r7, #16]
 800df88:	60da      	str	r2, [r3, #12]
 800df8a:	e005      	b.n	800df98 <tcp_process+0x6b4>
 800df8c:	693b      	ldr	r3, [r7, #16]
 800df8e:	68db      	ldr	r3, [r3, #12]
 800df90:	613b      	str	r3, [r7, #16]
 800df92:	693b      	ldr	r3, [r7, #16]
 800df94:	2b00      	cmp	r3, #0
 800df96:	d1ef      	bne.n	800df78 <tcp_process+0x694>
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	2200      	movs	r2, #0
 800df9c:	60da      	str	r2, [r3, #12]
 800df9e:	4b43      	ldr	r3, [pc, #268]	; (800e0ac <tcp_process+0x7c8>)
 800dfa0:	2201      	movs	r2, #1
 800dfa2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	220a      	movs	r2, #10
 800dfa8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800dfaa:	4b41      	ldr	r3, [pc, #260]	; (800e0b0 <tcp_process+0x7cc>)
 800dfac:	681a      	ldr	r2, [r3, #0]
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	60da      	str	r2, [r3, #12]
 800dfb2:	4a3f      	ldr	r2, [pc, #252]	; (800e0b0 <tcp_process+0x7cc>)
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	6013      	str	r3, [r2, #0]
 800dfb8:	f003 f8ea 	bl	8011190 <tcp_timer_needed>
      }
      break;
 800dfbc:	e06c      	b.n	800e098 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800dfbe:	6878      	ldr	r0, [r7, #4]
 800dfc0:	f000 f984 	bl	800e2cc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800dfc4:	4b3b      	ldr	r3, [pc, #236]	; (800e0b4 <tcp_process+0x7d0>)
 800dfc6:	781b      	ldrb	r3, [r3, #0]
 800dfc8:	f003 0310 	and.w	r3, r3, #16
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d065      	beq.n	800e09c <tcp_process+0x7b8>
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dfd4:	4b38      	ldr	r3, [pc, #224]	; (800e0b8 <tcp_process+0x7d4>)
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	429a      	cmp	r2, r3
 800dfda:	d15f      	bne.n	800e09c <tcp_process+0x7b8>
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d15b      	bne.n	800e09c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800dfe4:	6878      	ldr	r0, [r7, #4]
 800dfe6:	f7fe fcf1 	bl	800c9cc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800dfea:	4b35      	ldr	r3, [pc, #212]	; (800e0c0 <tcp_process+0x7dc>)
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	687a      	ldr	r2, [r7, #4]
 800dff0:	429a      	cmp	r2, r3
 800dff2:	d105      	bne.n	800e000 <tcp_process+0x71c>
 800dff4:	4b32      	ldr	r3, [pc, #200]	; (800e0c0 <tcp_process+0x7dc>)
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	68db      	ldr	r3, [r3, #12]
 800dffa:	4a31      	ldr	r2, [pc, #196]	; (800e0c0 <tcp_process+0x7dc>)
 800dffc:	6013      	str	r3, [r2, #0]
 800dffe:	e013      	b.n	800e028 <tcp_process+0x744>
 800e000:	4b2f      	ldr	r3, [pc, #188]	; (800e0c0 <tcp_process+0x7dc>)
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	60fb      	str	r3, [r7, #12]
 800e006:	e00c      	b.n	800e022 <tcp_process+0x73e>
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	68db      	ldr	r3, [r3, #12]
 800e00c:	687a      	ldr	r2, [r7, #4]
 800e00e:	429a      	cmp	r2, r3
 800e010:	d104      	bne.n	800e01c <tcp_process+0x738>
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	68da      	ldr	r2, [r3, #12]
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	60da      	str	r2, [r3, #12]
 800e01a:	e005      	b.n	800e028 <tcp_process+0x744>
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	68db      	ldr	r3, [r3, #12]
 800e020:	60fb      	str	r3, [r7, #12]
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	2b00      	cmp	r3, #0
 800e026:	d1ef      	bne.n	800e008 <tcp_process+0x724>
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	2200      	movs	r2, #0
 800e02c:	60da      	str	r2, [r3, #12]
 800e02e:	4b1f      	ldr	r3, [pc, #124]	; (800e0ac <tcp_process+0x7c8>)
 800e030:	2201      	movs	r2, #1
 800e032:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	220a      	movs	r2, #10
 800e038:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800e03a:	4b1d      	ldr	r3, [pc, #116]	; (800e0b0 <tcp_process+0x7cc>)
 800e03c:	681a      	ldr	r2, [r3, #0]
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	60da      	str	r2, [r3, #12]
 800e042:	4a1b      	ldr	r2, [pc, #108]	; (800e0b0 <tcp_process+0x7cc>)
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	6013      	str	r3, [r2, #0]
 800e048:	f003 f8a2 	bl	8011190 <tcp_timer_needed>
      }
      break;
 800e04c:	e026      	b.n	800e09c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800e04e:	6878      	ldr	r0, [r7, #4]
 800e050:	f000 f93c 	bl	800e2cc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800e054:	4b17      	ldr	r3, [pc, #92]	; (800e0b4 <tcp_process+0x7d0>)
 800e056:	781b      	ldrb	r3, [r3, #0]
 800e058:	f003 0310 	and.w	r3, r3, #16
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d01f      	beq.n	800e0a0 <tcp_process+0x7bc>
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e064:	4b14      	ldr	r3, [pc, #80]	; (800e0b8 <tcp_process+0x7d4>)
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	429a      	cmp	r2, r3
 800e06a:	d119      	bne.n	800e0a0 <tcp_process+0x7bc>
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e070:	2b00      	cmp	r3, #0
 800e072:	d115      	bne.n	800e0a0 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800e074:	4b11      	ldr	r3, [pc, #68]	; (800e0bc <tcp_process+0x7d8>)
 800e076:	781b      	ldrb	r3, [r3, #0]
 800e078:	f043 0310 	orr.w	r3, r3, #16
 800e07c:	b2da      	uxtb	r2, r3
 800e07e:	4b0f      	ldr	r3, [pc, #60]	; (800e0bc <tcp_process+0x7d8>)
 800e080:	701a      	strb	r2, [r3, #0]
      }
      break;
 800e082:	e00d      	b.n	800e0a0 <tcp_process+0x7bc>
    default:
      break;
 800e084:	bf00      	nop
 800e086:	e00c      	b.n	800e0a2 <tcp_process+0x7be>
      break;
 800e088:	bf00      	nop
 800e08a:	e00a      	b.n	800e0a2 <tcp_process+0x7be>
      break;
 800e08c:	bf00      	nop
 800e08e:	e008      	b.n	800e0a2 <tcp_process+0x7be>
      break;
 800e090:	bf00      	nop
 800e092:	e006      	b.n	800e0a2 <tcp_process+0x7be>
      break;
 800e094:	bf00      	nop
 800e096:	e004      	b.n	800e0a2 <tcp_process+0x7be>
      break;
 800e098:	bf00      	nop
 800e09a:	e002      	b.n	800e0a2 <tcp_process+0x7be>
      break;
 800e09c:	bf00      	nop
 800e09e:	e000      	b.n	800e0a2 <tcp_process+0x7be>
      break;
 800e0a0:	bf00      	nop
  }
  return ERR_OK;
 800e0a2:	2300      	movs	r3, #0
}
 800e0a4:	4618      	mov	r0, r3
 800e0a6:	3724      	adds	r7, #36	; 0x24
 800e0a8:	46bd      	mov	sp, r7
 800e0aa:	bd90      	pop	{r4, r7, pc}
 800e0ac:	2001aec8 	.word	0x2001aec8
 800e0b0:	2001aec4 	.word	0x2001aec4
 800e0b4:	2001aef8 	.word	0x2001aef8
 800e0b8:	2001aef0 	.word	0x2001aef0
 800e0bc:	2001aef9 	.word	0x2001aef9
 800e0c0:	2001aec0 	.word	0x2001aec0

0800e0c4 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800e0c4:	b590      	push	{r4, r7, lr}
 800e0c6:	b085      	sub	sp, #20
 800e0c8:	af00      	add	r7, sp, #0
 800e0ca:	6078      	str	r0, [r7, #4]
 800e0cc:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d106      	bne.n	800e0e2 <tcp_oos_insert_segment+0x1e>
 800e0d4:	4b3b      	ldr	r3, [pc, #236]	; (800e1c4 <tcp_oos_insert_segment+0x100>)
 800e0d6:	f240 421f 	movw	r2, #1055	; 0x41f
 800e0da:	493b      	ldr	r1, [pc, #236]	; (800e1c8 <tcp_oos_insert_segment+0x104>)
 800e0dc:	483b      	ldr	r0, [pc, #236]	; (800e1cc <tcp_oos_insert_segment+0x108>)
 800e0de:	f008 f997 	bl	8016410 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	68db      	ldr	r3, [r3, #12]
 800e0e6:	899b      	ldrh	r3, [r3, #12]
 800e0e8:	b29b      	uxth	r3, r3
 800e0ea:	4618      	mov	r0, r3
 800e0ec:	f7fb f902 	bl	80092f4 <lwip_htons>
 800e0f0:	4603      	mov	r3, r0
 800e0f2:	b2db      	uxtb	r3, r3
 800e0f4:	f003 0301 	and.w	r3, r3, #1
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d028      	beq.n	800e14e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800e0fc:	6838      	ldr	r0, [r7, #0]
 800e0fe:	f7fe f9ad 	bl	800c45c <tcp_segs_free>
    next = NULL;
 800e102:	2300      	movs	r3, #0
 800e104:	603b      	str	r3, [r7, #0]
 800e106:	e056      	b.n	800e1b6 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800e108:	683b      	ldr	r3, [r7, #0]
 800e10a:	68db      	ldr	r3, [r3, #12]
 800e10c:	899b      	ldrh	r3, [r3, #12]
 800e10e:	b29b      	uxth	r3, r3
 800e110:	4618      	mov	r0, r3
 800e112:	f7fb f8ef 	bl	80092f4 <lwip_htons>
 800e116:	4603      	mov	r3, r0
 800e118:	b2db      	uxtb	r3, r3
 800e11a:	f003 0301 	and.w	r3, r3, #1
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d00d      	beq.n	800e13e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	68db      	ldr	r3, [r3, #12]
 800e126:	899b      	ldrh	r3, [r3, #12]
 800e128:	b29c      	uxth	r4, r3
 800e12a:	2001      	movs	r0, #1
 800e12c:	f7fb f8e2 	bl	80092f4 <lwip_htons>
 800e130:	4603      	mov	r3, r0
 800e132:	461a      	mov	r2, r3
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	68db      	ldr	r3, [r3, #12]
 800e138:	4322      	orrs	r2, r4
 800e13a:	b292      	uxth	r2, r2
 800e13c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800e13e:	683b      	ldr	r3, [r7, #0]
 800e140:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800e142:	683b      	ldr	r3, [r7, #0]
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800e148:	68f8      	ldr	r0, [r7, #12]
 800e14a:	f7fe f99c 	bl	800c486 <tcp_seg_free>
    while (next &&
 800e14e:	683b      	ldr	r3, [r7, #0]
 800e150:	2b00      	cmp	r3, #0
 800e152:	d00e      	beq.n	800e172 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	891b      	ldrh	r3, [r3, #8]
 800e158:	461a      	mov	r2, r3
 800e15a:	4b1d      	ldr	r3, [pc, #116]	; (800e1d0 <tcp_oos_insert_segment+0x10c>)
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	441a      	add	r2, r3
 800e160:	683b      	ldr	r3, [r7, #0]
 800e162:	68db      	ldr	r3, [r3, #12]
 800e164:	685b      	ldr	r3, [r3, #4]
 800e166:	6839      	ldr	r1, [r7, #0]
 800e168:	8909      	ldrh	r1, [r1, #8]
 800e16a:	440b      	add	r3, r1
 800e16c:	1ad3      	subs	r3, r2, r3
    while (next &&
 800e16e:	2b00      	cmp	r3, #0
 800e170:	daca      	bge.n	800e108 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800e172:	683b      	ldr	r3, [r7, #0]
 800e174:	2b00      	cmp	r3, #0
 800e176:	d01e      	beq.n	800e1b6 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	891b      	ldrh	r3, [r3, #8]
 800e17c:	461a      	mov	r2, r3
 800e17e:	4b14      	ldr	r3, [pc, #80]	; (800e1d0 <tcp_oos_insert_segment+0x10c>)
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	441a      	add	r2, r3
 800e184:	683b      	ldr	r3, [r7, #0]
 800e186:	68db      	ldr	r3, [r3, #12]
 800e188:	685b      	ldr	r3, [r3, #4]
 800e18a:	1ad3      	subs	r3, r2, r3
    if (next &&
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	dd12      	ble.n	800e1b6 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800e190:	683b      	ldr	r3, [r7, #0]
 800e192:	68db      	ldr	r3, [r3, #12]
 800e194:	685b      	ldr	r3, [r3, #4]
 800e196:	b29a      	uxth	r2, r3
 800e198:	4b0d      	ldr	r3, [pc, #52]	; (800e1d0 <tcp_oos_insert_segment+0x10c>)
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	b29b      	uxth	r3, r3
 800e19e:	1ad3      	subs	r3, r2, r3
 800e1a0:	b29a      	uxth	r2, r3
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	685a      	ldr	r2, [r3, #4]
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	891b      	ldrh	r3, [r3, #8]
 800e1ae:	4619      	mov	r1, r3
 800e1b0:	4610      	mov	r0, r2
 800e1b2:	f7fc faf9 	bl	800a7a8 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	683a      	ldr	r2, [r7, #0]
 800e1ba:	601a      	str	r2, [r3, #0]
}
 800e1bc:	bf00      	nop
 800e1be:	3714      	adds	r7, #20
 800e1c0:	46bd      	mov	sp, r7
 800e1c2:	bd90      	pop	{r4, r7, pc}
 800e1c4:	0801968c 	.word	0x0801968c
 800e1c8:	0801994c 	.word	0x0801994c
 800e1cc:	080196d8 	.word	0x080196d8
 800e1d0:	2001aeec 	.word	0x2001aeec

0800e1d4 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800e1d4:	b5b0      	push	{r4, r5, r7, lr}
 800e1d6:	b086      	sub	sp, #24
 800e1d8:	af00      	add	r7, sp, #0
 800e1da:	60f8      	str	r0, [r7, #12]
 800e1dc:	60b9      	str	r1, [r7, #8]
 800e1de:	607a      	str	r2, [r7, #4]
 800e1e0:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800e1e2:	e03e      	b.n	800e262 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800e1e4:	68bb      	ldr	r3, [r7, #8]
 800e1e6:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800e1e8:	68bb      	ldr	r3, [r7, #8]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800e1ee:	697b      	ldr	r3, [r7, #20]
 800e1f0:	685b      	ldr	r3, [r3, #4]
 800e1f2:	4618      	mov	r0, r3
 800e1f4:	f7fc fcec 	bl	800abd0 <pbuf_clen>
 800e1f8:	4603      	mov	r3, r0
 800e1fa:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e202:	8a7a      	ldrh	r2, [r7, #18]
 800e204:	429a      	cmp	r2, r3
 800e206:	d906      	bls.n	800e216 <tcp_free_acked_segments+0x42>
 800e208:	4b2a      	ldr	r3, [pc, #168]	; (800e2b4 <tcp_free_acked_segments+0xe0>)
 800e20a:	f240 4257 	movw	r2, #1111	; 0x457
 800e20e:	492a      	ldr	r1, [pc, #168]	; (800e2b8 <tcp_free_acked_segments+0xe4>)
 800e210:	482a      	ldr	r0, [pc, #168]	; (800e2bc <tcp_free_acked_segments+0xe8>)
 800e212:	f008 f8fd 	bl	8016410 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800e21c:	8a7b      	ldrh	r3, [r7, #18]
 800e21e:	1ad3      	subs	r3, r2, r3
 800e220:	b29a      	uxth	r2, r3
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800e228:	697b      	ldr	r3, [r7, #20]
 800e22a:	891a      	ldrh	r2, [r3, #8]
 800e22c:	4b24      	ldr	r3, [pc, #144]	; (800e2c0 <tcp_free_acked_segments+0xec>)
 800e22e:	881b      	ldrh	r3, [r3, #0]
 800e230:	4413      	add	r3, r2
 800e232:	b29a      	uxth	r2, r3
 800e234:	4b22      	ldr	r3, [pc, #136]	; (800e2c0 <tcp_free_acked_segments+0xec>)
 800e236:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800e238:	6978      	ldr	r0, [r7, #20]
 800e23a:	f7fe f924 	bl	800c486 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e244:	2b00      	cmp	r3, #0
 800e246:	d00c      	beq.n	800e262 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800e248:	68bb      	ldr	r3, [r7, #8]
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d109      	bne.n	800e262 <tcp_free_acked_segments+0x8e>
 800e24e:	683b      	ldr	r3, [r7, #0]
 800e250:	2b00      	cmp	r3, #0
 800e252:	d106      	bne.n	800e262 <tcp_free_acked_segments+0x8e>
 800e254:	4b17      	ldr	r3, [pc, #92]	; (800e2b4 <tcp_free_acked_segments+0xe0>)
 800e256:	f240 4261 	movw	r2, #1121	; 0x461
 800e25a:	491a      	ldr	r1, [pc, #104]	; (800e2c4 <tcp_free_acked_segments+0xf0>)
 800e25c:	4817      	ldr	r0, [pc, #92]	; (800e2bc <tcp_free_acked_segments+0xe8>)
 800e25e:	f008 f8d7 	bl	8016410 <iprintf>
  while (seg_list != NULL &&
 800e262:	68bb      	ldr	r3, [r7, #8]
 800e264:	2b00      	cmp	r3, #0
 800e266:	d020      	beq.n	800e2aa <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800e268:	68bb      	ldr	r3, [r7, #8]
 800e26a:	68db      	ldr	r3, [r3, #12]
 800e26c:	685b      	ldr	r3, [r3, #4]
 800e26e:	4618      	mov	r0, r3
 800e270:	f7fb f855 	bl	800931e <lwip_htonl>
 800e274:	4604      	mov	r4, r0
 800e276:	68bb      	ldr	r3, [r7, #8]
 800e278:	891b      	ldrh	r3, [r3, #8]
 800e27a:	461d      	mov	r5, r3
 800e27c:	68bb      	ldr	r3, [r7, #8]
 800e27e:	68db      	ldr	r3, [r3, #12]
 800e280:	899b      	ldrh	r3, [r3, #12]
 800e282:	b29b      	uxth	r3, r3
 800e284:	4618      	mov	r0, r3
 800e286:	f7fb f835 	bl	80092f4 <lwip_htons>
 800e28a:	4603      	mov	r3, r0
 800e28c:	b2db      	uxtb	r3, r3
 800e28e:	f003 0303 	and.w	r3, r3, #3
 800e292:	2b00      	cmp	r3, #0
 800e294:	d001      	beq.n	800e29a <tcp_free_acked_segments+0xc6>
 800e296:	2301      	movs	r3, #1
 800e298:	e000      	b.n	800e29c <tcp_free_acked_segments+0xc8>
 800e29a:	2300      	movs	r3, #0
 800e29c:	442b      	add	r3, r5
 800e29e:	18e2      	adds	r2, r4, r3
 800e2a0:	4b09      	ldr	r3, [pc, #36]	; (800e2c8 <tcp_free_acked_segments+0xf4>)
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	dd9c      	ble.n	800e1e4 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800e2aa:	68bb      	ldr	r3, [r7, #8]
}
 800e2ac:	4618      	mov	r0, r3
 800e2ae:	3718      	adds	r7, #24
 800e2b0:	46bd      	mov	sp, r7
 800e2b2:	bdb0      	pop	{r4, r5, r7, pc}
 800e2b4:	0801968c 	.word	0x0801968c
 800e2b8:	08019974 	.word	0x08019974
 800e2bc:	080196d8 	.word	0x080196d8
 800e2c0:	2001aef4 	.word	0x2001aef4
 800e2c4:	0801999c 	.word	0x0801999c
 800e2c8:	2001aef0 	.word	0x2001aef0

0800e2cc <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800e2cc:	b5b0      	push	{r4, r5, r7, lr}
 800e2ce:	b094      	sub	sp, #80	; 0x50
 800e2d0:	af00      	add	r7, sp, #0
 800e2d2:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800e2d4:	2300      	movs	r3, #0
 800e2d6:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d106      	bne.n	800e2ec <tcp_receive+0x20>
 800e2de:	4b91      	ldr	r3, [pc, #580]	; (800e524 <tcp_receive+0x258>)
 800e2e0:	f240 427b 	movw	r2, #1147	; 0x47b
 800e2e4:	4990      	ldr	r1, [pc, #576]	; (800e528 <tcp_receive+0x25c>)
 800e2e6:	4891      	ldr	r0, [pc, #580]	; (800e52c <tcp_receive+0x260>)
 800e2e8:	f008 f892 	bl	8016410 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	7d1b      	ldrb	r3, [r3, #20]
 800e2f0:	2b03      	cmp	r3, #3
 800e2f2:	d806      	bhi.n	800e302 <tcp_receive+0x36>
 800e2f4:	4b8b      	ldr	r3, [pc, #556]	; (800e524 <tcp_receive+0x258>)
 800e2f6:	f240 427c 	movw	r2, #1148	; 0x47c
 800e2fa:	498d      	ldr	r1, [pc, #564]	; (800e530 <tcp_receive+0x264>)
 800e2fc:	488b      	ldr	r0, [pc, #556]	; (800e52c <tcp_receive+0x260>)
 800e2fe:	f008 f887 	bl	8016410 <iprintf>

  if (flags & TCP_ACK) {
 800e302:	4b8c      	ldr	r3, [pc, #560]	; (800e534 <tcp_receive+0x268>)
 800e304:	781b      	ldrb	r3, [r3, #0]
 800e306:	f003 0310 	and.w	r3, r3, #16
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	f000 8264 	beq.w	800e7d8 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e316:	461a      	mov	r2, r3
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e31c:	4413      	add	r3, r2
 800e31e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e324:	4b84      	ldr	r3, [pc, #528]	; (800e538 <tcp_receive+0x26c>)
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	1ad3      	subs	r3, r2, r3
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	db1b      	blt.n	800e366 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e332:	4b81      	ldr	r3, [pc, #516]	; (800e538 <tcp_receive+0x26c>)
 800e334:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800e336:	429a      	cmp	r2, r3
 800e338:	d106      	bne.n	800e348 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e33e:	4b7f      	ldr	r3, [pc, #508]	; (800e53c <tcp_receive+0x270>)
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	1ad3      	subs	r3, r2, r3
 800e344:	2b00      	cmp	r3, #0
 800e346:	db0e      	blt.n	800e366 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e34c:	4b7b      	ldr	r3, [pc, #492]	; (800e53c <tcp_receive+0x270>)
 800e34e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800e350:	429a      	cmp	r2, r3
 800e352:	d125      	bne.n	800e3a0 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800e354:	4b7a      	ldr	r3, [pc, #488]	; (800e540 <tcp_receive+0x274>)
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	89db      	ldrh	r3, [r3, #14]
 800e35a:	b29a      	uxth	r2, r3
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e362:	429a      	cmp	r2, r3
 800e364:	d91c      	bls.n	800e3a0 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800e366:	4b76      	ldr	r3, [pc, #472]	; (800e540 <tcp_receive+0x274>)
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	89db      	ldrh	r3, [r3, #14]
 800e36c:	b29a      	uxth	r2, r3
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e380:	429a      	cmp	r2, r3
 800e382:	d205      	bcs.n	800e390 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800e390:	4b69      	ldr	r3, [pc, #420]	; (800e538 <tcp_receive+0x26c>)
 800e392:	681a      	ldr	r2, [r3, #0]
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800e398:	4b68      	ldr	r3, [pc, #416]	; (800e53c <tcp_receive+0x270>)
 800e39a:	681a      	ldr	r2, [r3, #0]
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800e3a0:	4b66      	ldr	r3, [pc, #408]	; (800e53c <tcp_receive+0x270>)
 800e3a2:	681a      	ldr	r2, [r3, #0]
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e3a8:	1ad3      	subs	r3, r2, r3
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	dc58      	bgt.n	800e460 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800e3ae:	4b65      	ldr	r3, [pc, #404]	; (800e544 <tcp_receive+0x278>)
 800e3b0:	881b      	ldrh	r3, [r3, #0]
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d14b      	bne.n	800e44e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e3ba:	687a      	ldr	r2, [r7, #4]
 800e3bc:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800e3c0:	4413      	add	r3, r2
 800e3c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e3c4:	429a      	cmp	r2, r3
 800e3c6:	d142      	bne.n	800e44e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	db3d      	blt.n	800e44e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e3d6:	4b59      	ldr	r3, [pc, #356]	; (800e53c <tcp_receive+0x270>)
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	429a      	cmp	r2, r3
 800e3dc:	d137      	bne.n	800e44e <tcp_receive+0x182>
              found_dupack = 1;
 800e3de:	2301      	movs	r3, #1
 800e3e0:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e3e8:	2bff      	cmp	r3, #255	; 0xff
 800e3ea:	d007      	beq.n	800e3fc <tcp_receive+0x130>
                ++pcb->dupacks;
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e3f2:	3301      	adds	r3, #1
 800e3f4:	b2da      	uxtb	r2, r3
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e402:	2b03      	cmp	r3, #3
 800e404:	d91b      	bls.n	800e43e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e410:	4413      	add	r3, r2
 800e412:	b29a      	uxth	r2, r3
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e41a:	429a      	cmp	r2, r3
 800e41c:	d30a      	bcc.n	800e434 <tcp_receive+0x168>
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e428:	4413      	add	r3, r2
 800e42a:	b29a      	uxth	r2, r3
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e432:	e004      	b.n	800e43e <tcp_receive+0x172>
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e43a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e444:	2b02      	cmp	r3, #2
 800e446:	d902      	bls.n	800e44e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800e448:	6878      	ldr	r0, [r7, #4]
 800e44a:	f002 fb43 	bl	8010ad4 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800e44e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e450:	2b00      	cmp	r3, #0
 800e452:	f040 8161 	bne.w	800e718 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	2200      	movs	r2, #0
 800e45a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e45e:	e15b      	b.n	800e718 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e460:	4b36      	ldr	r3, [pc, #216]	; (800e53c <tcp_receive+0x270>)
 800e462:	681a      	ldr	r2, [r3, #0]
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e468:	1ad3      	subs	r3, r2, r3
 800e46a:	3b01      	subs	r3, #1
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	f2c0 814e 	blt.w	800e70e <tcp_receive+0x442>
 800e472:	4b32      	ldr	r3, [pc, #200]	; (800e53c <tcp_receive+0x270>)
 800e474:	681a      	ldr	r2, [r3, #0]
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e47a:	1ad3      	subs	r3, r2, r3
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	f300 8146 	bgt.w	800e70e <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	8b5b      	ldrh	r3, [r3, #26]
 800e486:	f003 0304 	and.w	r3, r3, #4
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d010      	beq.n	800e4b0 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	8b5b      	ldrh	r3, [r3, #26]
 800e492:	f023 0304 	bic.w	r3, r3, #4
 800e496:	b29a      	uxth	r2, r3
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	2200      	movs	r2, #0
 800e4ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	2200      	movs	r2, #0
 800e4b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e4be:	10db      	asrs	r3, r3, #3
 800e4c0:	b21b      	sxth	r3, r3
 800e4c2:	b29a      	uxth	r2, r3
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e4ca:	b29b      	uxth	r3, r3
 800e4cc:	4413      	add	r3, r2
 800e4ce:	b29b      	uxth	r3, r3
 800e4d0:	b21a      	sxth	r2, r3
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800e4d8:	4b18      	ldr	r3, [pc, #96]	; (800e53c <tcp_receive+0x270>)
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	b29a      	uxth	r2, r3
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e4e2:	b29b      	uxth	r3, r3
 800e4e4:	1ad3      	subs	r3, r2, r3
 800e4e6:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	2200      	movs	r2, #0
 800e4ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800e4f0:	4b12      	ldr	r3, [pc, #72]	; (800e53c <tcp_receive+0x270>)
 800e4f2:	681a      	ldr	r2, [r3, #0]
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	7d1b      	ldrb	r3, [r3, #20]
 800e4fc:	2b03      	cmp	r3, #3
 800e4fe:	f240 8097 	bls.w	800e630 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800e50e:	429a      	cmp	r2, r3
 800e510:	d245      	bcs.n	800e59e <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	8b5b      	ldrh	r3, [r3, #26]
 800e516:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d014      	beq.n	800e548 <tcp_receive+0x27c>
 800e51e:	2301      	movs	r3, #1
 800e520:	e013      	b.n	800e54a <tcp_receive+0x27e>
 800e522:	bf00      	nop
 800e524:	0801968c 	.word	0x0801968c
 800e528:	080199bc 	.word	0x080199bc
 800e52c:	080196d8 	.word	0x080196d8
 800e530:	080199d8 	.word	0x080199d8
 800e534:	2001aef8 	.word	0x2001aef8
 800e538:	2001aeec 	.word	0x2001aeec
 800e53c:	2001aef0 	.word	0x2001aef0
 800e540:	2001aedc 	.word	0x2001aedc
 800e544:	2001aef6 	.word	0x2001aef6
 800e548:	2302      	movs	r3, #2
 800e54a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800e54e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e552:	b29a      	uxth	r2, r3
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e558:	fb12 f303 	smulbb	r3, r2, r3
 800e55c:	b29b      	uxth	r3, r3
 800e55e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e560:	4293      	cmp	r3, r2
 800e562:	bf28      	it	cs
 800e564:	4613      	movcs	r3, r2
 800e566:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e56e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e570:	4413      	add	r3, r2
 800e572:	b29a      	uxth	r2, r3
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e57a:	429a      	cmp	r2, r3
 800e57c:	d309      	bcc.n	800e592 <tcp_receive+0x2c6>
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e584:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e586:	4413      	add	r3, r2
 800e588:	b29a      	uxth	r2, r3
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e590:	e04e      	b.n	800e630 <tcp_receive+0x364>
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e598:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e59c:	e048      	b.n	800e630 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800e5a4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e5a6:	4413      	add	r3, r2
 800e5a8:	b29a      	uxth	r2, r3
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e5b0:	429a      	cmp	r2, r3
 800e5b2:	d309      	bcc.n	800e5c8 <tcp_receive+0x2fc>
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800e5ba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e5bc:	4413      	add	r3, r2
 800e5be:	b29a      	uxth	r2, r3
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e5c6:	e004      	b.n	800e5d2 <tcp_receive+0x306>
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e5ce:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e5de:	429a      	cmp	r2, r3
 800e5e0:	d326      	bcc.n	800e630 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e5ee:	1ad3      	subs	r3, r2, r3
 800e5f0:	b29a      	uxth	r2, r3
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e602:	4413      	add	r3, r2
 800e604:	b29a      	uxth	r2, r3
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e60c:	429a      	cmp	r2, r3
 800e60e:	d30a      	bcc.n	800e626 <tcp_receive+0x35a>
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e61a:	4413      	add	r3, r2
 800e61c:	b29a      	uxth	r2, r3
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e624:	e004      	b.n	800e630 <tcp_receive+0x364>
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e62c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e638:	4a98      	ldr	r2, [pc, #608]	; (800e89c <tcp_receive+0x5d0>)
 800e63a:	6878      	ldr	r0, [r7, #4]
 800e63c:	f7ff fdca 	bl	800e1d4 <tcp_free_acked_segments>
 800e640:	4602      	mov	r2, r0
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e64e:	4a94      	ldr	r2, [pc, #592]	; (800e8a0 <tcp_receive+0x5d4>)
 800e650:	6878      	ldr	r0, [r7, #4]
 800e652:	f7ff fdbf 	bl	800e1d4 <tcp_free_acked_segments>
 800e656:	4602      	mov	r2, r0
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e660:	2b00      	cmp	r3, #0
 800e662:	d104      	bne.n	800e66e <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e66a:	861a      	strh	r2, [r3, #48]	; 0x30
 800e66c:	e002      	b.n	800e674 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	2200      	movs	r2, #0
 800e672:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	2200      	movs	r2, #0
 800e678:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d103      	bne.n	800e68a <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	2200      	movs	r2, #0
 800e686:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800e690:	4b84      	ldr	r3, [pc, #528]	; (800e8a4 <tcp_receive+0x5d8>)
 800e692:	881b      	ldrh	r3, [r3, #0]
 800e694:	4413      	add	r3, r2
 800e696:	b29a      	uxth	r2, r3
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	8b5b      	ldrh	r3, [r3, #26]
 800e6a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d035      	beq.n	800e716 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d118      	bne.n	800e6e4 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d00c      	beq.n	800e6d4 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e6c2:	68db      	ldr	r3, [r3, #12]
 800e6c4:	685b      	ldr	r3, [r3, #4]
 800e6c6:	4618      	mov	r0, r3
 800e6c8:	f7fa fe29 	bl	800931e <lwip_htonl>
 800e6cc:	4603      	mov	r3, r0
 800e6ce:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	dc20      	bgt.n	800e716 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	8b5b      	ldrh	r3, [r3, #26]
 800e6d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e6dc:	b29a      	uxth	r2, r3
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e6e2:	e018      	b.n	800e716 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e6ec:	68db      	ldr	r3, [r3, #12]
 800e6ee:	685b      	ldr	r3, [r3, #4]
 800e6f0:	4618      	mov	r0, r3
 800e6f2:	f7fa fe14 	bl	800931e <lwip_htonl>
 800e6f6:	4603      	mov	r3, r0
 800e6f8:	1ae3      	subs	r3, r4, r3
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	dc0b      	bgt.n	800e716 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	8b5b      	ldrh	r3, [r3, #26]
 800e702:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e706:	b29a      	uxth	r2, r3
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e70c:	e003      	b.n	800e716 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800e70e:	6878      	ldr	r0, [r7, #4]
 800e710:	f002 fbce 	bl	8010eb0 <tcp_send_empty_ack>
 800e714:	e000      	b.n	800e718 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e716:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d05b      	beq.n	800e7d8 <tcp_receive+0x50c>
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e724:	4b60      	ldr	r3, [pc, #384]	; (800e8a8 <tcp_receive+0x5dc>)
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	1ad3      	subs	r3, r2, r3
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	da54      	bge.n	800e7d8 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800e72e:	4b5f      	ldr	r3, [pc, #380]	; (800e8ac <tcp_receive+0x5e0>)
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	b29a      	uxth	r2, r3
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e738:	b29b      	uxth	r3, r3
 800e73a:	1ad3      	subs	r3, r2, r3
 800e73c:	b29b      	uxth	r3, r3
 800e73e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800e742:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e74c:	10db      	asrs	r3, r3, #3
 800e74e:	b21b      	sxth	r3, r3
 800e750:	b29b      	uxth	r3, r3
 800e752:	1ad3      	subs	r3, r2, r3
 800e754:	b29b      	uxth	r3, r3
 800e756:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e760:	b29a      	uxth	r2, r3
 800e762:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800e766:	4413      	add	r3, r2
 800e768:	b29b      	uxth	r3, r3
 800e76a:	b21a      	sxth	r2, r3
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800e770:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800e774:	2b00      	cmp	r3, #0
 800e776:	da05      	bge.n	800e784 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800e778:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800e77c:	425b      	negs	r3, r3
 800e77e:	b29b      	uxth	r3, r3
 800e780:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800e784:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e78e:	109b      	asrs	r3, r3, #2
 800e790:	b21b      	sxth	r3, r3
 800e792:	b29b      	uxth	r3, r3
 800e794:	1ad3      	subs	r3, r2, r3
 800e796:	b29b      	uxth	r3, r3
 800e798:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e7a2:	b29a      	uxth	r2, r3
 800e7a4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800e7a8:	4413      	add	r3, r2
 800e7aa:	b29b      	uxth	r3, r3
 800e7ac:	b21a      	sxth	r2, r3
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e7b8:	10db      	asrs	r3, r3, #3
 800e7ba:	b21b      	sxth	r3, r3
 800e7bc:	b29a      	uxth	r2, r3
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e7c4:	b29b      	uxth	r3, r3
 800e7c6:	4413      	add	r3, r2
 800e7c8:	b29b      	uxth	r3, r3
 800e7ca:	b21a      	sxth	r2, r3
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	2200      	movs	r2, #0
 800e7d6:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800e7d8:	4b35      	ldr	r3, [pc, #212]	; (800e8b0 <tcp_receive+0x5e4>)
 800e7da:	881b      	ldrh	r3, [r3, #0]
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	f000 84e2 	beq.w	800f1a6 <tcp_receive+0xeda>
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	7d1b      	ldrb	r3, [r3, #20]
 800e7e6:	2b06      	cmp	r3, #6
 800e7e8:	f200 84dd 	bhi.w	800f1a6 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e7f0:	4b30      	ldr	r3, [pc, #192]	; (800e8b4 <tcp_receive+0x5e8>)
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	1ad3      	subs	r3, r2, r3
 800e7f6:	3b01      	subs	r3, #1
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	f2c0 808f 	blt.w	800e91c <tcp_receive+0x650>
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e802:	4b2b      	ldr	r3, [pc, #172]	; (800e8b0 <tcp_receive+0x5e4>)
 800e804:	881b      	ldrh	r3, [r3, #0]
 800e806:	4619      	mov	r1, r3
 800e808:	4b2a      	ldr	r3, [pc, #168]	; (800e8b4 <tcp_receive+0x5e8>)
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	440b      	add	r3, r1
 800e80e:	1ad3      	subs	r3, r2, r3
 800e810:	3301      	adds	r3, #1
 800e812:	2b00      	cmp	r3, #0
 800e814:	f300 8082 	bgt.w	800e91c <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800e818:	4b27      	ldr	r3, [pc, #156]	; (800e8b8 <tcp_receive+0x5ec>)
 800e81a:	685b      	ldr	r3, [r3, #4]
 800e81c:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e822:	4b24      	ldr	r3, [pc, #144]	; (800e8b4 <tcp_receive+0x5e8>)
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	1ad3      	subs	r3, r2, r3
 800e828:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800e82a:	4b23      	ldr	r3, [pc, #140]	; (800e8b8 <tcp_receive+0x5ec>)
 800e82c:	685b      	ldr	r3, [r3, #4]
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d106      	bne.n	800e840 <tcp_receive+0x574>
 800e832:	4b22      	ldr	r3, [pc, #136]	; (800e8bc <tcp_receive+0x5f0>)
 800e834:	f240 5294 	movw	r2, #1428	; 0x594
 800e838:	4921      	ldr	r1, [pc, #132]	; (800e8c0 <tcp_receive+0x5f4>)
 800e83a:	4822      	ldr	r0, [pc, #136]	; (800e8c4 <tcp_receive+0x5f8>)
 800e83c:	f007 fde8 	bl	8016410 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800e840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e842:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e846:	4293      	cmp	r3, r2
 800e848:	d906      	bls.n	800e858 <tcp_receive+0x58c>
 800e84a:	4b1c      	ldr	r3, [pc, #112]	; (800e8bc <tcp_receive+0x5f0>)
 800e84c:	f240 5295 	movw	r2, #1429	; 0x595
 800e850:	491d      	ldr	r1, [pc, #116]	; (800e8c8 <tcp_receive+0x5fc>)
 800e852:	481c      	ldr	r0, [pc, #112]	; (800e8c4 <tcp_receive+0x5f8>)
 800e854:	f007 fddc 	bl	8016410 <iprintf>
      off = (u16_t)off32;
 800e858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e85a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800e85e:	4b16      	ldr	r3, [pc, #88]	; (800e8b8 <tcp_receive+0x5ec>)
 800e860:	685b      	ldr	r3, [r3, #4]
 800e862:	891b      	ldrh	r3, [r3, #8]
 800e864:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e868:	429a      	cmp	r2, r3
 800e86a:	d906      	bls.n	800e87a <tcp_receive+0x5ae>
 800e86c:	4b13      	ldr	r3, [pc, #76]	; (800e8bc <tcp_receive+0x5f0>)
 800e86e:	f240 5297 	movw	r2, #1431	; 0x597
 800e872:	4916      	ldr	r1, [pc, #88]	; (800e8cc <tcp_receive+0x600>)
 800e874:	4813      	ldr	r0, [pc, #76]	; (800e8c4 <tcp_receive+0x5f8>)
 800e876:	f007 fdcb 	bl	8016410 <iprintf>
      inseg.len -= off;
 800e87a:	4b0f      	ldr	r3, [pc, #60]	; (800e8b8 <tcp_receive+0x5ec>)
 800e87c:	891a      	ldrh	r2, [r3, #8]
 800e87e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e882:	1ad3      	subs	r3, r2, r3
 800e884:	b29a      	uxth	r2, r3
 800e886:	4b0c      	ldr	r3, [pc, #48]	; (800e8b8 <tcp_receive+0x5ec>)
 800e888:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800e88a:	4b0b      	ldr	r3, [pc, #44]	; (800e8b8 <tcp_receive+0x5ec>)
 800e88c:	685b      	ldr	r3, [r3, #4]
 800e88e:	891a      	ldrh	r2, [r3, #8]
 800e890:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e894:	1ad3      	subs	r3, r2, r3
 800e896:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800e898:	e02a      	b.n	800e8f0 <tcp_receive+0x624>
 800e89a:	bf00      	nop
 800e89c:	080199f4 	.word	0x080199f4
 800e8a0:	080199fc 	.word	0x080199fc
 800e8a4:	2001aef4 	.word	0x2001aef4
 800e8a8:	2001aef0 	.word	0x2001aef0
 800e8ac:	2001aeb4 	.word	0x2001aeb4
 800e8b0:	2001aef6 	.word	0x2001aef6
 800e8b4:	2001aeec 	.word	0x2001aeec
 800e8b8:	2001aecc 	.word	0x2001aecc
 800e8bc:	0801968c 	.word	0x0801968c
 800e8c0:	08019a04 	.word	0x08019a04
 800e8c4:	080196d8 	.word	0x080196d8
 800e8c8:	08019a14 	.word	0x08019a14
 800e8cc:	08019a24 	.word	0x08019a24
        off -= p->len;
 800e8d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e8d2:	895b      	ldrh	r3, [r3, #10]
 800e8d4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e8d8:	1ad3      	subs	r3, r2, r3
 800e8da:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800e8de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e8e0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e8e2:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800e8e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e8e6:	2200      	movs	r2, #0
 800e8e8:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800e8ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800e8f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e8f2:	895b      	ldrh	r3, [r3, #10]
 800e8f4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e8f8:	429a      	cmp	r2, r3
 800e8fa:	d8e9      	bhi.n	800e8d0 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800e8fc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e900:	4619      	mov	r1, r3
 800e902:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800e904:	f7fc f850 	bl	800a9a8 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e90c:	4a91      	ldr	r2, [pc, #580]	; (800eb54 <tcp_receive+0x888>)
 800e90e:	6013      	str	r3, [r2, #0]
 800e910:	4b91      	ldr	r3, [pc, #580]	; (800eb58 <tcp_receive+0x88c>)
 800e912:	68db      	ldr	r3, [r3, #12]
 800e914:	4a8f      	ldr	r2, [pc, #572]	; (800eb54 <tcp_receive+0x888>)
 800e916:	6812      	ldr	r2, [r2, #0]
 800e918:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800e91a:	e00d      	b.n	800e938 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800e91c:	4b8d      	ldr	r3, [pc, #564]	; (800eb54 <tcp_receive+0x888>)
 800e91e:	681a      	ldr	r2, [r3, #0]
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e924:	1ad3      	subs	r3, r2, r3
 800e926:	2b00      	cmp	r3, #0
 800e928:	da06      	bge.n	800e938 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	8b5b      	ldrh	r3, [r3, #26]
 800e92e:	f043 0302 	orr.w	r3, r3, #2
 800e932:	b29a      	uxth	r2, r3
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e938:	4b86      	ldr	r3, [pc, #536]	; (800eb54 <tcp_receive+0x888>)
 800e93a:	681a      	ldr	r2, [r3, #0]
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e940:	1ad3      	subs	r3, r2, r3
 800e942:	2b00      	cmp	r3, #0
 800e944:	f2c0 842a 	blt.w	800f19c <tcp_receive+0xed0>
 800e948:	4b82      	ldr	r3, [pc, #520]	; (800eb54 <tcp_receive+0x888>)
 800e94a:	681a      	ldr	r2, [r3, #0]
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e950:	6879      	ldr	r1, [r7, #4]
 800e952:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e954:	440b      	add	r3, r1
 800e956:	1ad3      	subs	r3, r2, r3
 800e958:	3301      	adds	r3, #1
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	f300 841e 	bgt.w	800f19c <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e964:	4b7b      	ldr	r3, [pc, #492]	; (800eb54 <tcp_receive+0x888>)
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	429a      	cmp	r2, r3
 800e96a:	f040 829a 	bne.w	800eea2 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800e96e:	4b7a      	ldr	r3, [pc, #488]	; (800eb58 <tcp_receive+0x88c>)
 800e970:	891c      	ldrh	r4, [r3, #8]
 800e972:	4b79      	ldr	r3, [pc, #484]	; (800eb58 <tcp_receive+0x88c>)
 800e974:	68db      	ldr	r3, [r3, #12]
 800e976:	899b      	ldrh	r3, [r3, #12]
 800e978:	b29b      	uxth	r3, r3
 800e97a:	4618      	mov	r0, r3
 800e97c:	f7fa fcba 	bl	80092f4 <lwip_htons>
 800e980:	4603      	mov	r3, r0
 800e982:	b2db      	uxtb	r3, r3
 800e984:	f003 0303 	and.w	r3, r3, #3
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d001      	beq.n	800e990 <tcp_receive+0x6c4>
 800e98c:	2301      	movs	r3, #1
 800e98e:	e000      	b.n	800e992 <tcp_receive+0x6c6>
 800e990:	2300      	movs	r3, #0
 800e992:	4423      	add	r3, r4
 800e994:	b29a      	uxth	r2, r3
 800e996:	4b71      	ldr	r3, [pc, #452]	; (800eb5c <tcp_receive+0x890>)
 800e998:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e99e:	4b6f      	ldr	r3, [pc, #444]	; (800eb5c <tcp_receive+0x890>)
 800e9a0:	881b      	ldrh	r3, [r3, #0]
 800e9a2:	429a      	cmp	r2, r3
 800e9a4:	d275      	bcs.n	800ea92 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800e9a6:	4b6c      	ldr	r3, [pc, #432]	; (800eb58 <tcp_receive+0x88c>)
 800e9a8:	68db      	ldr	r3, [r3, #12]
 800e9aa:	899b      	ldrh	r3, [r3, #12]
 800e9ac:	b29b      	uxth	r3, r3
 800e9ae:	4618      	mov	r0, r3
 800e9b0:	f7fa fca0 	bl	80092f4 <lwip_htons>
 800e9b4:	4603      	mov	r3, r0
 800e9b6:	b2db      	uxtb	r3, r3
 800e9b8:	f003 0301 	and.w	r3, r3, #1
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d01f      	beq.n	800ea00 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800e9c0:	4b65      	ldr	r3, [pc, #404]	; (800eb58 <tcp_receive+0x88c>)
 800e9c2:	68db      	ldr	r3, [r3, #12]
 800e9c4:	899b      	ldrh	r3, [r3, #12]
 800e9c6:	b29b      	uxth	r3, r3
 800e9c8:	b21b      	sxth	r3, r3
 800e9ca:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800e9ce:	b21c      	sxth	r4, r3
 800e9d0:	4b61      	ldr	r3, [pc, #388]	; (800eb58 <tcp_receive+0x88c>)
 800e9d2:	68db      	ldr	r3, [r3, #12]
 800e9d4:	899b      	ldrh	r3, [r3, #12]
 800e9d6:	b29b      	uxth	r3, r3
 800e9d8:	4618      	mov	r0, r3
 800e9da:	f7fa fc8b 	bl	80092f4 <lwip_htons>
 800e9de:	4603      	mov	r3, r0
 800e9e0:	b2db      	uxtb	r3, r3
 800e9e2:	b29b      	uxth	r3, r3
 800e9e4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800e9e8:	b29b      	uxth	r3, r3
 800e9ea:	4618      	mov	r0, r3
 800e9ec:	f7fa fc82 	bl	80092f4 <lwip_htons>
 800e9f0:	4603      	mov	r3, r0
 800e9f2:	b21b      	sxth	r3, r3
 800e9f4:	4323      	orrs	r3, r4
 800e9f6:	b21a      	sxth	r2, r3
 800e9f8:	4b57      	ldr	r3, [pc, #348]	; (800eb58 <tcp_receive+0x88c>)
 800e9fa:	68db      	ldr	r3, [r3, #12]
 800e9fc:	b292      	uxth	r2, r2
 800e9fe:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ea04:	4b54      	ldr	r3, [pc, #336]	; (800eb58 <tcp_receive+0x88c>)
 800ea06:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800ea08:	4b53      	ldr	r3, [pc, #332]	; (800eb58 <tcp_receive+0x88c>)
 800ea0a:	68db      	ldr	r3, [r3, #12]
 800ea0c:	899b      	ldrh	r3, [r3, #12]
 800ea0e:	b29b      	uxth	r3, r3
 800ea10:	4618      	mov	r0, r3
 800ea12:	f7fa fc6f 	bl	80092f4 <lwip_htons>
 800ea16:	4603      	mov	r3, r0
 800ea18:	b2db      	uxtb	r3, r3
 800ea1a:	f003 0302 	and.w	r3, r3, #2
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d005      	beq.n	800ea2e <tcp_receive+0x762>
            inseg.len -= 1;
 800ea22:	4b4d      	ldr	r3, [pc, #308]	; (800eb58 <tcp_receive+0x88c>)
 800ea24:	891b      	ldrh	r3, [r3, #8]
 800ea26:	3b01      	subs	r3, #1
 800ea28:	b29a      	uxth	r2, r3
 800ea2a:	4b4b      	ldr	r3, [pc, #300]	; (800eb58 <tcp_receive+0x88c>)
 800ea2c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800ea2e:	4b4a      	ldr	r3, [pc, #296]	; (800eb58 <tcp_receive+0x88c>)
 800ea30:	685b      	ldr	r3, [r3, #4]
 800ea32:	4a49      	ldr	r2, [pc, #292]	; (800eb58 <tcp_receive+0x88c>)
 800ea34:	8912      	ldrh	r2, [r2, #8]
 800ea36:	4611      	mov	r1, r2
 800ea38:	4618      	mov	r0, r3
 800ea3a:	f7fb feb5 	bl	800a7a8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800ea3e:	4b46      	ldr	r3, [pc, #280]	; (800eb58 <tcp_receive+0x88c>)
 800ea40:	891c      	ldrh	r4, [r3, #8]
 800ea42:	4b45      	ldr	r3, [pc, #276]	; (800eb58 <tcp_receive+0x88c>)
 800ea44:	68db      	ldr	r3, [r3, #12]
 800ea46:	899b      	ldrh	r3, [r3, #12]
 800ea48:	b29b      	uxth	r3, r3
 800ea4a:	4618      	mov	r0, r3
 800ea4c:	f7fa fc52 	bl	80092f4 <lwip_htons>
 800ea50:	4603      	mov	r3, r0
 800ea52:	b2db      	uxtb	r3, r3
 800ea54:	f003 0303 	and.w	r3, r3, #3
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d001      	beq.n	800ea60 <tcp_receive+0x794>
 800ea5c:	2301      	movs	r3, #1
 800ea5e:	e000      	b.n	800ea62 <tcp_receive+0x796>
 800ea60:	2300      	movs	r3, #0
 800ea62:	4423      	add	r3, r4
 800ea64:	b29a      	uxth	r2, r3
 800ea66:	4b3d      	ldr	r3, [pc, #244]	; (800eb5c <tcp_receive+0x890>)
 800ea68:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800ea6a:	4b3c      	ldr	r3, [pc, #240]	; (800eb5c <tcp_receive+0x890>)
 800ea6c:	881b      	ldrh	r3, [r3, #0]
 800ea6e:	461a      	mov	r2, r3
 800ea70:	4b38      	ldr	r3, [pc, #224]	; (800eb54 <tcp_receive+0x888>)
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	441a      	add	r2, r3
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea7a:	6879      	ldr	r1, [r7, #4]
 800ea7c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ea7e:	440b      	add	r3, r1
 800ea80:	429a      	cmp	r2, r3
 800ea82:	d006      	beq.n	800ea92 <tcp_receive+0x7c6>
 800ea84:	4b36      	ldr	r3, [pc, #216]	; (800eb60 <tcp_receive+0x894>)
 800ea86:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800ea8a:	4936      	ldr	r1, [pc, #216]	; (800eb64 <tcp_receive+0x898>)
 800ea8c:	4836      	ldr	r0, [pc, #216]	; (800eb68 <tcp_receive+0x89c>)
 800ea8e:	f007 fcbf 	bl	8016410 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	f000 80e7 	beq.w	800ec6a <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ea9c:	4b2e      	ldr	r3, [pc, #184]	; (800eb58 <tcp_receive+0x88c>)
 800ea9e:	68db      	ldr	r3, [r3, #12]
 800eaa0:	899b      	ldrh	r3, [r3, #12]
 800eaa2:	b29b      	uxth	r3, r3
 800eaa4:	4618      	mov	r0, r3
 800eaa6:	f7fa fc25 	bl	80092f4 <lwip_htons>
 800eaaa:	4603      	mov	r3, r0
 800eaac:	b2db      	uxtb	r3, r3
 800eaae:	f003 0301 	and.w	r3, r3, #1
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d010      	beq.n	800ead8 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800eab6:	e00a      	b.n	800eace <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eabc:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eac2:	681a      	ldr	r2, [r3, #0]
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800eac8:	68f8      	ldr	r0, [r7, #12]
 800eaca:	f7fd fcdc 	bl	800c486 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d1f0      	bne.n	800eab8 <tcp_receive+0x7ec>
 800ead6:	e0c8      	b.n	800ec6a <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eadc:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800eade:	e052      	b.n	800eb86 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800eae0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eae2:	68db      	ldr	r3, [r3, #12]
 800eae4:	899b      	ldrh	r3, [r3, #12]
 800eae6:	b29b      	uxth	r3, r3
 800eae8:	4618      	mov	r0, r3
 800eaea:	f7fa fc03 	bl	80092f4 <lwip_htons>
 800eaee:	4603      	mov	r3, r0
 800eaf0:	b2db      	uxtb	r3, r3
 800eaf2:	f003 0301 	and.w	r3, r3, #1
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d03d      	beq.n	800eb76 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800eafa:	4b17      	ldr	r3, [pc, #92]	; (800eb58 <tcp_receive+0x88c>)
 800eafc:	68db      	ldr	r3, [r3, #12]
 800eafe:	899b      	ldrh	r3, [r3, #12]
 800eb00:	b29b      	uxth	r3, r3
 800eb02:	4618      	mov	r0, r3
 800eb04:	f7fa fbf6 	bl	80092f4 <lwip_htons>
 800eb08:	4603      	mov	r3, r0
 800eb0a:	b2db      	uxtb	r3, r3
 800eb0c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d130      	bne.n	800eb76 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800eb14:	4b10      	ldr	r3, [pc, #64]	; (800eb58 <tcp_receive+0x88c>)
 800eb16:	68db      	ldr	r3, [r3, #12]
 800eb18:	899b      	ldrh	r3, [r3, #12]
 800eb1a:	b29c      	uxth	r4, r3
 800eb1c:	2001      	movs	r0, #1
 800eb1e:	f7fa fbe9 	bl	80092f4 <lwip_htons>
 800eb22:	4603      	mov	r3, r0
 800eb24:	461a      	mov	r2, r3
 800eb26:	4b0c      	ldr	r3, [pc, #48]	; (800eb58 <tcp_receive+0x88c>)
 800eb28:	68db      	ldr	r3, [r3, #12]
 800eb2a:	4322      	orrs	r2, r4
 800eb2c:	b292      	uxth	r2, r2
 800eb2e:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800eb30:	4b09      	ldr	r3, [pc, #36]	; (800eb58 <tcp_receive+0x88c>)
 800eb32:	891c      	ldrh	r4, [r3, #8]
 800eb34:	4b08      	ldr	r3, [pc, #32]	; (800eb58 <tcp_receive+0x88c>)
 800eb36:	68db      	ldr	r3, [r3, #12]
 800eb38:	899b      	ldrh	r3, [r3, #12]
 800eb3a:	b29b      	uxth	r3, r3
 800eb3c:	4618      	mov	r0, r3
 800eb3e:	f7fa fbd9 	bl	80092f4 <lwip_htons>
 800eb42:	4603      	mov	r3, r0
 800eb44:	b2db      	uxtb	r3, r3
 800eb46:	f003 0303 	and.w	r3, r3, #3
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d00e      	beq.n	800eb6c <tcp_receive+0x8a0>
 800eb4e:	2301      	movs	r3, #1
 800eb50:	e00d      	b.n	800eb6e <tcp_receive+0x8a2>
 800eb52:	bf00      	nop
 800eb54:	2001aeec 	.word	0x2001aeec
 800eb58:	2001aecc 	.word	0x2001aecc
 800eb5c:	2001aef6 	.word	0x2001aef6
 800eb60:	0801968c 	.word	0x0801968c
 800eb64:	08019a34 	.word	0x08019a34
 800eb68:	080196d8 	.word	0x080196d8
 800eb6c:	2300      	movs	r3, #0
 800eb6e:	4423      	add	r3, r4
 800eb70:	b29a      	uxth	r2, r3
 800eb72:	4b98      	ldr	r3, [pc, #608]	; (800edd4 <tcp_receive+0xb08>)
 800eb74:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800eb76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb78:	613b      	str	r3, [r7, #16]
              next = next->next;
 800eb7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800eb80:	6938      	ldr	r0, [r7, #16]
 800eb82:	f7fd fc80 	bl	800c486 <tcp_seg_free>
            while (next &&
 800eb86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d00e      	beq.n	800ebaa <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800eb8c:	4b91      	ldr	r3, [pc, #580]	; (800edd4 <tcp_receive+0xb08>)
 800eb8e:	881b      	ldrh	r3, [r3, #0]
 800eb90:	461a      	mov	r2, r3
 800eb92:	4b91      	ldr	r3, [pc, #580]	; (800edd8 <tcp_receive+0xb0c>)
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	441a      	add	r2, r3
 800eb98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb9a:	68db      	ldr	r3, [r3, #12]
 800eb9c:	685b      	ldr	r3, [r3, #4]
 800eb9e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800eba0:	8909      	ldrh	r1, [r1, #8]
 800eba2:	440b      	add	r3, r1
 800eba4:	1ad3      	subs	r3, r2, r3
            while (next &&
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	da9a      	bge.n	800eae0 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800ebaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d059      	beq.n	800ec64 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800ebb0:	4b88      	ldr	r3, [pc, #544]	; (800edd4 <tcp_receive+0xb08>)
 800ebb2:	881b      	ldrh	r3, [r3, #0]
 800ebb4:	461a      	mov	r2, r3
 800ebb6:	4b88      	ldr	r3, [pc, #544]	; (800edd8 <tcp_receive+0xb0c>)
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	441a      	add	r2, r3
 800ebbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ebbe:	68db      	ldr	r3, [r3, #12]
 800ebc0:	685b      	ldr	r3, [r3, #4]
 800ebc2:	1ad3      	subs	r3, r2, r3
            if (next &&
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	dd4d      	ble.n	800ec64 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800ebc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ebca:	68db      	ldr	r3, [r3, #12]
 800ebcc:	685b      	ldr	r3, [r3, #4]
 800ebce:	b29a      	uxth	r2, r3
 800ebd0:	4b81      	ldr	r3, [pc, #516]	; (800edd8 <tcp_receive+0xb0c>)
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	b29b      	uxth	r3, r3
 800ebd6:	1ad3      	subs	r3, r2, r3
 800ebd8:	b29a      	uxth	r2, r3
 800ebda:	4b80      	ldr	r3, [pc, #512]	; (800eddc <tcp_receive+0xb10>)
 800ebdc:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800ebde:	4b7f      	ldr	r3, [pc, #508]	; (800eddc <tcp_receive+0xb10>)
 800ebe0:	68db      	ldr	r3, [r3, #12]
 800ebe2:	899b      	ldrh	r3, [r3, #12]
 800ebe4:	b29b      	uxth	r3, r3
 800ebe6:	4618      	mov	r0, r3
 800ebe8:	f7fa fb84 	bl	80092f4 <lwip_htons>
 800ebec:	4603      	mov	r3, r0
 800ebee:	b2db      	uxtb	r3, r3
 800ebf0:	f003 0302 	and.w	r3, r3, #2
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d005      	beq.n	800ec04 <tcp_receive+0x938>
                inseg.len -= 1;
 800ebf8:	4b78      	ldr	r3, [pc, #480]	; (800eddc <tcp_receive+0xb10>)
 800ebfa:	891b      	ldrh	r3, [r3, #8]
 800ebfc:	3b01      	subs	r3, #1
 800ebfe:	b29a      	uxth	r2, r3
 800ec00:	4b76      	ldr	r3, [pc, #472]	; (800eddc <tcp_receive+0xb10>)
 800ec02:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800ec04:	4b75      	ldr	r3, [pc, #468]	; (800eddc <tcp_receive+0xb10>)
 800ec06:	685b      	ldr	r3, [r3, #4]
 800ec08:	4a74      	ldr	r2, [pc, #464]	; (800eddc <tcp_receive+0xb10>)
 800ec0a:	8912      	ldrh	r2, [r2, #8]
 800ec0c:	4611      	mov	r1, r2
 800ec0e:	4618      	mov	r0, r3
 800ec10:	f7fb fdca 	bl	800a7a8 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800ec14:	4b71      	ldr	r3, [pc, #452]	; (800eddc <tcp_receive+0xb10>)
 800ec16:	891c      	ldrh	r4, [r3, #8]
 800ec18:	4b70      	ldr	r3, [pc, #448]	; (800eddc <tcp_receive+0xb10>)
 800ec1a:	68db      	ldr	r3, [r3, #12]
 800ec1c:	899b      	ldrh	r3, [r3, #12]
 800ec1e:	b29b      	uxth	r3, r3
 800ec20:	4618      	mov	r0, r3
 800ec22:	f7fa fb67 	bl	80092f4 <lwip_htons>
 800ec26:	4603      	mov	r3, r0
 800ec28:	b2db      	uxtb	r3, r3
 800ec2a:	f003 0303 	and.w	r3, r3, #3
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d001      	beq.n	800ec36 <tcp_receive+0x96a>
 800ec32:	2301      	movs	r3, #1
 800ec34:	e000      	b.n	800ec38 <tcp_receive+0x96c>
 800ec36:	2300      	movs	r3, #0
 800ec38:	4423      	add	r3, r4
 800ec3a:	b29a      	uxth	r2, r3
 800ec3c:	4b65      	ldr	r3, [pc, #404]	; (800edd4 <tcp_receive+0xb08>)
 800ec3e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800ec40:	4b64      	ldr	r3, [pc, #400]	; (800edd4 <tcp_receive+0xb08>)
 800ec42:	881b      	ldrh	r3, [r3, #0]
 800ec44:	461a      	mov	r2, r3
 800ec46:	4b64      	ldr	r3, [pc, #400]	; (800edd8 <tcp_receive+0xb0c>)
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	441a      	add	r2, r3
 800ec4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec4e:	68db      	ldr	r3, [r3, #12]
 800ec50:	685b      	ldr	r3, [r3, #4]
 800ec52:	429a      	cmp	r2, r3
 800ec54:	d006      	beq.n	800ec64 <tcp_receive+0x998>
 800ec56:	4b62      	ldr	r3, [pc, #392]	; (800ede0 <tcp_receive+0xb14>)
 800ec58:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800ec5c:	4961      	ldr	r1, [pc, #388]	; (800ede4 <tcp_receive+0xb18>)
 800ec5e:	4862      	ldr	r0, [pc, #392]	; (800ede8 <tcp_receive+0xb1c>)
 800ec60:	f007 fbd6 	bl	8016410 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ec68:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800ec6a:	4b5a      	ldr	r3, [pc, #360]	; (800edd4 <tcp_receive+0xb08>)
 800ec6c:	881b      	ldrh	r3, [r3, #0]
 800ec6e:	461a      	mov	r2, r3
 800ec70:	4b59      	ldr	r3, [pc, #356]	; (800edd8 <tcp_receive+0xb0c>)
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	441a      	add	r2, r3
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ec7e:	4b55      	ldr	r3, [pc, #340]	; (800edd4 <tcp_receive+0xb08>)
 800ec80:	881b      	ldrh	r3, [r3, #0]
 800ec82:	429a      	cmp	r2, r3
 800ec84:	d206      	bcs.n	800ec94 <tcp_receive+0x9c8>
 800ec86:	4b56      	ldr	r3, [pc, #344]	; (800ede0 <tcp_receive+0xb14>)
 800ec88:	f240 6207 	movw	r2, #1543	; 0x607
 800ec8c:	4957      	ldr	r1, [pc, #348]	; (800edec <tcp_receive+0xb20>)
 800ec8e:	4856      	ldr	r0, [pc, #344]	; (800ede8 <tcp_receive+0xb1c>)
 800ec90:	f007 fbbe 	bl	8016410 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ec98:	4b4e      	ldr	r3, [pc, #312]	; (800edd4 <tcp_receive+0xb08>)
 800ec9a:	881b      	ldrh	r3, [r3, #0]
 800ec9c:	1ad3      	subs	r3, r2, r3
 800ec9e:	b29a      	uxth	r2, r3
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800eca4:	6878      	ldr	r0, [r7, #4]
 800eca6:	f7fc fdb1 	bl	800b80c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800ecaa:	4b4c      	ldr	r3, [pc, #304]	; (800eddc <tcp_receive+0xb10>)
 800ecac:	685b      	ldr	r3, [r3, #4]
 800ecae:	891b      	ldrh	r3, [r3, #8]
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d006      	beq.n	800ecc2 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800ecb4:	4b49      	ldr	r3, [pc, #292]	; (800eddc <tcp_receive+0xb10>)
 800ecb6:	685b      	ldr	r3, [r3, #4]
 800ecb8:	4a4d      	ldr	r2, [pc, #308]	; (800edf0 <tcp_receive+0xb24>)
 800ecba:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800ecbc:	4b47      	ldr	r3, [pc, #284]	; (800eddc <tcp_receive+0xb10>)
 800ecbe:	2200      	movs	r2, #0
 800ecc0:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ecc2:	4b46      	ldr	r3, [pc, #280]	; (800eddc <tcp_receive+0xb10>)
 800ecc4:	68db      	ldr	r3, [r3, #12]
 800ecc6:	899b      	ldrh	r3, [r3, #12]
 800ecc8:	b29b      	uxth	r3, r3
 800ecca:	4618      	mov	r0, r3
 800eccc:	f7fa fb12 	bl	80092f4 <lwip_htons>
 800ecd0:	4603      	mov	r3, r0
 800ecd2:	b2db      	uxtb	r3, r3
 800ecd4:	f003 0301 	and.w	r3, r3, #1
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	f000 80b8 	beq.w	800ee4e <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800ecde:	4b45      	ldr	r3, [pc, #276]	; (800edf4 <tcp_receive+0xb28>)
 800ece0:	781b      	ldrb	r3, [r3, #0]
 800ece2:	f043 0320 	orr.w	r3, r3, #32
 800ece6:	b2da      	uxtb	r2, r3
 800ece8:	4b42      	ldr	r3, [pc, #264]	; (800edf4 <tcp_receive+0xb28>)
 800ecea:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800ecec:	e0af      	b.n	800ee4e <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ecf2:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ecf8:	68db      	ldr	r3, [r3, #12]
 800ecfa:	685b      	ldr	r3, [r3, #4]
 800ecfc:	4a36      	ldr	r2, [pc, #216]	; (800edd8 <tcp_receive+0xb0c>)
 800ecfe:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800ed00:	68bb      	ldr	r3, [r7, #8]
 800ed02:	891b      	ldrh	r3, [r3, #8]
 800ed04:	461c      	mov	r4, r3
 800ed06:	68bb      	ldr	r3, [r7, #8]
 800ed08:	68db      	ldr	r3, [r3, #12]
 800ed0a:	899b      	ldrh	r3, [r3, #12]
 800ed0c:	b29b      	uxth	r3, r3
 800ed0e:	4618      	mov	r0, r3
 800ed10:	f7fa faf0 	bl	80092f4 <lwip_htons>
 800ed14:	4603      	mov	r3, r0
 800ed16:	b2db      	uxtb	r3, r3
 800ed18:	f003 0303 	and.w	r3, r3, #3
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d001      	beq.n	800ed24 <tcp_receive+0xa58>
 800ed20:	2301      	movs	r3, #1
 800ed22:	e000      	b.n	800ed26 <tcp_receive+0xa5a>
 800ed24:	2300      	movs	r3, #0
 800ed26:	191a      	adds	r2, r3, r4
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed2c:	441a      	add	r2, r3
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ed36:	461c      	mov	r4, r3
 800ed38:	68bb      	ldr	r3, [r7, #8]
 800ed3a:	891b      	ldrh	r3, [r3, #8]
 800ed3c:	461d      	mov	r5, r3
 800ed3e:	68bb      	ldr	r3, [r7, #8]
 800ed40:	68db      	ldr	r3, [r3, #12]
 800ed42:	899b      	ldrh	r3, [r3, #12]
 800ed44:	b29b      	uxth	r3, r3
 800ed46:	4618      	mov	r0, r3
 800ed48:	f7fa fad4 	bl	80092f4 <lwip_htons>
 800ed4c:	4603      	mov	r3, r0
 800ed4e:	b2db      	uxtb	r3, r3
 800ed50:	f003 0303 	and.w	r3, r3, #3
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d001      	beq.n	800ed5c <tcp_receive+0xa90>
 800ed58:	2301      	movs	r3, #1
 800ed5a:	e000      	b.n	800ed5e <tcp_receive+0xa92>
 800ed5c:	2300      	movs	r3, #0
 800ed5e:	442b      	add	r3, r5
 800ed60:	429c      	cmp	r4, r3
 800ed62:	d206      	bcs.n	800ed72 <tcp_receive+0xaa6>
 800ed64:	4b1e      	ldr	r3, [pc, #120]	; (800ede0 <tcp_receive+0xb14>)
 800ed66:	f240 622b 	movw	r2, #1579	; 0x62b
 800ed6a:	4923      	ldr	r1, [pc, #140]	; (800edf8 <tcp_receive+0xb2c>)
 800ed6c:	481e      	ldr	r0, [pc, #120]	; (800ede8 <tcp_receive+0xb1c>)
 800ed6e:	f007 fb4f 	bl	8016410 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800ed72:	68bb      	ldr	r3, [r7, #8]
 800ed74:	891b      	ldrh	r3, [r3, #8]
 800ed76:	461c      	mov	r4, r3
 800ed78:	68bb      	ldr	r3, [r7, #8]
 800ed7a:	68db      	ldr	r3, [r3, #12]
 800ed7c:	899b      	ldrh	r3, [r3, #12]
 800ed7e:	b29b      	uxth	r3, r3
 800ed80:	4618      	mov	r0, r3
 800ed82:	f7fa fab7 	bl	80092f4 <lwip_htons>
 800ed86:	4603      	mov	r3, r0
 800ed88:	b2db      	uxtb	r3, r3
 800ed8a:	f003 0303 	and.w	r3, r3, #3
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d001      	beq.n	800ed96 <tcp_receive+0xaca>
 800ed92:	2301      	movs	r3, #1
 800ed94:	e000      	b.n	800ed98 <tcp_receive+0xacc>
 800ed96:	2300      	movs	r3, #0
 800ed98:	1919      	adds	r1, r3, r4
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ed9e:	b28b      	uxth	r3, r1
 800eda0:	1ad3      	subs	r3, r2, r3
 800eda2:	b29a      	uxth	r2, r3
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800eda8:	6878      	ldr	r0, [r7, #4]
 800edaa:	f7fc fd2f 	bl	800b80c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800edae:	68bb      	ldr	r3, [r7, #8]
 800edb0:	685b      	ldr	r3, [r3, #4]
 800edb2:	891b      	ldrh	r3, [r3, #8]
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d028      	beq.n	800ee0a <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800edb8:	4b0d      	ldr	r3, [pc, #52]	; (800edf0 <tcp_receive+0xb24>)
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d01d      	beq.n	800edfc <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800edc0:	4b0b      	ldr	r3, [pc, #44]	; (800edf0 <tcp_receive+0xb24>)
 800edc2:	681a      	ldr	r2, [r3, #0]
 800edc4:	68bb      	ldr	r3, [r7, #8]
 800edc6:	685b      	ldr	r3, [r3, #4]
 800edc8:	4619      	mov	r1, r3
 800edca:	4610      	mov	r0, r2
 800edcc:	f7fb ff40 	bl	800ac50 <pbuf_cat>
 800edd0:	e018      	b.n	800ee04 <tcp_receive+0xb38>
 800edd2:	bf00      	nop
 800edd4:	2001aef6 	.word	0x2001aef6
 800edd8:	2001aeec 	.word	0x2001aeec
 800eddc:	2001aecc 	.word	0x2001aecc
 800ede0:	0801968c 	.word	0x0801968c
 800ede4:	08019a6c 	.word	0x08019a6c
 800ede8:	080196d8 	.word	0x080196d8
 800edec:	08019aa8 	.word	0x08019aa8
 800edf0:	2001aefc 	.word	0x2001aefc
 800edf4:	2001aef9 	.word	0x2001aef9
 800edf8:	08019ac8 	.word	0x08019ac8
            } else {
              recv_data = cseg->p;
 800edfc:	68bb      	ldr	r3, [r7, #8]
 800edfe:	685b      	ldr	r3, [r3, #4]
 800ee00:	4a70      	ldr	r2, [pc, #448]	; (800efc4 <tcp_receive+0xcf8>)
 800ee02:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800ee04:	68bb      	ldr	r3, [r7, #8]
 800ee06:	2200      	movs	r2, #0
 800ee08:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800ee0a:	68bb      	ldr	r3, [r7, #8]
 800ee0c:	68db      	ldr	r3, [r3, #12]
 800ee0e:	899b      	ldrh	r3, [r3, #12]
 800ee10:	b29b      	uxth	r3, r3
 800ee12:	4618      	mov	r0, r3
 800ee14:	f7fa fa6e 	bl	80092f4 <lwip_htons>
 800ee18:	4603      	mov	r3, r0
 800ee1a:	b2db      	uxtb	r3, r3
 800ee1c:	f003 0301 	and.w	r3, r3, #1
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d00d      	beq.n	800ee40 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800ee24:	4b68      	ldr	r3, [pc, #416]	; (800efc8 <tcp_receive+0xcfc>)
 800ee26:	781b      	ldrb	r3, [r3, #0]
 800ee28:	f043 0320 	orr.w	r3, r3, #32
 800ee2c:	b2da      	uxtb	r2, r3
 800ee2e:	4b66      	ldr	r3, [pc, #408]	; (800efc8 <tcp_receive+0xcfc>)
 800ee30:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	7d1b      	ldrb	r3, [r3, #20]
 800ee36:	2b04      	cmp	r3, #4
 800ee38:	d102      	bne.n	800ee40 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	2207      	movs	r2, #7
 800ee3e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800ee40:	68bb      	ldr	r3, [r7, #8]
 800ee42:	681a      	ldr	r2, [r3, #0]
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800ee48:	68b8      	ldr	r0, [r7, #8]
 800ee4a:	f7fd fb1c 	bl	800c486 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d008      	beq.n	800ee68 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ee5a:	68db      	ldr	r3, [r3, #12]
 800ee5c:	685a      	ldr	r2, [r3, #4]
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800ee62:	429a      	cmp	r2, r3
 800ee64:	f43f af43 	beq.w	800ecee <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	8b5b      	ldrh	r3, [r3, #26]
 800ee6c:	f003 0301 	and.w	r3, r3, #1
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d00e      	beq.n	800ee92 <tcp_receive+0xbc6>
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	8b5b      	ldrh	r3, [r3, #26]
 800ee78:	f023 0301 	bic.w	r3, r3, #1
 800ee7c:	b29a      	uxth	r2, r3
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	835a      	strh	r2, [r3, #26]
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	8b5b      	ldrh	r3, [r3, #26]
 800ee86:	f043 0302 	orr.w	r3, r3, #2
 800ee8a:	b29a      	uxth	r2, r3
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800ee90:	e188      	b.n	800f1a4 <tcp_receive+0xed8>
        tcp_ack(pcb);
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	8b5b      	ldrh	r3, [r3, #26]
 800ee96:	f043 0301 	orr.w	r3, r3, #1
 800ee9a:	b29a      	uxth	r2, r3
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800eea0:	e180      	b.n	800f1a4 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d106      	bne.n	800eeb8 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800eeaa:	4848      	ldr	r0, [pc, #288]	; (800efcc <tcp_receive+0xd00>)
 800eeac:	f7fd fb04 	bl	800c4b8 <tcp_seg_copy>
 800eeb0:	4602      	mov	r2, r0
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	675a      	str	r2, [r3, #116]	; 0x74
 800eeb6:	e16d      	b.n	800f194 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800eeb8:	2300      	movs	r3, #0
 800eeba:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eec0:	63bb      	str	r3, [r7, #56]	; 0x38
 800eec2:	e157      	b.n	800f174 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800eec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eec6:	68db      	ldr	r3, [r3, #12]
 800eec8:	685a      	ldr	r2, [r3, #4]
 800eeca:	4b41      	ldr	r3, [pc, #260]	; (800efd0 <tcp_receive+0xd04>)
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	429a      	cmp	r2, r3
 800eed0:	d11d      	bne.n	800ef0e <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800eed2:	4b3e      	ldr	r3, [pc, #248]	; (800efcc <tcp_receive+0xd00>)
 800eed4:	891a      	ldrh	r2, [r3, #8]
 800eed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eed8:	891b      	ldrh	r3, [r3, #8]
 800eeda:	429a      	cmp	r2, r3
 800eedc:	f240 814f 	bls.w	800f17e <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800eee0:	483a      	ldr	r0, [pc, #232]	; (800efcc <tcp_receive+0xd00>)
 800eee2:	f7fd fae9 	bl	800c4b8 <tcp_seg_copy>
 800eee6:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800eee8:	697b      	ldr	r3, [r7, #20]
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	f000 8149 	beq.w	800f182 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800eef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d003      	beq.n	800eefe <tcp_receive+0xc32>
                    prev->next = cseg;
 800eef6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eef8:	697a      	ldr	r2, [r7, #20]
 800eefa:	601a      	str	r2, [r3, #0]
 800eefc:	e002      	b.n	800ef04 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	697a      	ldr	r2, [r7, #20]
 800ef02:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800ef04:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ef06:	6978      	ldr	r0, [r7, #20]
 800ef08:	f7ff f8dc 	bl	800e0c4 <tcp_oos_insert_segment>
                }
                break;
 800ef0c:	e139      	b.n	800f182 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800ef0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d117      	bne.n	800ef44 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800ef14:	4b2e      	ldr	r3, [pc, #184]	; (800efd0 <tcp_receive+0xd04>)
 800ef16:	681a      	ldr	r2, [r3, #0]
 800ef18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef1a:	68db      	ldr	r3, [r3, #12]
 800ef1c:	685b      	ldr	r3, [r3, #4]
 800ef1e:	1ad3      	subs	r3, r2, r3
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	da57      	bge.n	800efd4 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ef24:	4829      	ldr	r0, [pc, #164]	; (800efcc <tcp_receive+0xd00>)
 800ef26:	f7fd fac7 	bl	800c4b8 <tcp_seg_copy>
 800ef2a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800ef2c:	69bb      	ldr	r3, [r7, #24]
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	f000 8129 	beq.w	800f186 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	69ba      	ldr	r2, [r7, #24]
 800ef38:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800ef3a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ef3c:	69b8      	ldr	r0, [r7, #24]
 800ef3e:	f7ff f8c1 	bl	800e0c4 <tcp_oos_insert_segment>
                  }
                  break;
 800ef42:	e120      	b.n	800f186 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800ef44:	4b22      	ldr	r3, [pc, #136]	; (800efd0 <tcp_receive+0xd04>)
 800ef46:	681a      	ldr	r2, [r3, #0]
 800ef48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef4a:	68db      	ldr	r3, [r3, #12]
 800ef4c:	685b      	ldr	r3, [r3, #4]
 800ef4e:	1ad3      	subs	r3, r2, r3
 800ef50:	3b01      	subs	r3, #1
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	db3e      	blt.n	800efd4 <tcp_receive+0xd08>
 800ef56:	4b1e      	ldr	r3, [pc, #120]	; (800efd0 <tcp_receive+0xd04>)
 800ef58:	681a      	ldr	r2, [r3, #0]
 800ef5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef5c:	68db      	ldr	r3, [r3, #12]
 800ef5e:	685b      	ldr	r3, [r3, #4]
 800ef60:	1ad3      	subs	r3, r2, r3
 800ef62:	3301      	adds	r3, #1
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	dc35      	bgt.n	800efd4 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ef68:	4818      	ldr	r0, [pc, #96]	; (800efcc <tcp_receive+0xd00>)
 800ef6a:	f7fd faa5 	bl	800c4b8 <tcp_seg_copy>
 800ef6e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800ef70:	69fb      	ldr	r3, [r7, #28]
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	f000 8109 	beq.w	800f18a <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800ef78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef7a:	68db      	ldr	r3, [r3, #12]
 800ef7c:	685b      	ldr	r3, [r3, #4]
 800ef7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ef80:	8912      	ldrh	r2, [r2, #8]
 800ef82:	441a      	add	r2, r3
 800ef84:	4b12      	ldr	r3, [pc, #72]	; (800efd0 <tcp_receive+0xd04>)
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	1ad3      	subs	r3, r2, r3
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	dd12      	ble.n	800efb4 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800ef8e:	4b10      	ldr	r3, [pc, #64]	; (800efd0 <tcp_receive+0xd04>)
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	b29a      	uxth	r2, r3
 800ef94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef96:	68db      	ldr	r3, [r3, #12]
 800ef98:	685b      	ldr	r3, [r3, #4]
 800ef9a:	b29b      	uxth	r3, r3
 800ef9c:	1ad3      	subs	r3, r2, r3
 800ef9e:	b29a      	uxth	r2, r3
 800efa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800efa2:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800efa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800efa6:	685a      	ldr	r2, [r3, #4]
 800efa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800efaa:	891b      	ldrh	r3, [r3, #8]
 800efac:	4619      	mov	r1, r3
 800efae:	4610      	mov	r0, r2
 800efb0:	f7fb fbfa 	bl	800a7a8 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800efb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800efb6:	69fa      	ldr	r2, [r7, #28]
 800efb8:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800efba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800efbc:	69f8      	ldr	r0, [r7, #28]
 800efbe:	f7ff f881 	bl	800e0c4 <tcp_oos_insert_segment>
                  }
                  break;
 800efc2:	e0e2      	b.n	800f18a <tcp_receive+0xebe>
 800efc4:	2001aefc 	.word	0x2001aefc
 800efc8:	2001aef9 	.word	0x2001aef9
 800efcc:	2001aecc 	.word	0x2001aecc
 800efd0:	2001aeec 	.word	0x2001aeec
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800efd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efd6:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800efd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	2b00      	cmp	r3, #0
 800efde:	f040 80c6 	bne.w	800f16e <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800efe2:	4b80      	ldr	r3, [pc, #512]	; (800f1e4 <tcp_receive+0xf18>)
 800efe4:	681a      	ldr	r2, [r3, #0]
 800efe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efe8:	68db      	ldr	r3, [r3, #12]
 800efea:	685b      	ldr	r3, [r3, #4]
 800efec:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800efee:	2b00      	cmp	r3, #0
 800eff0:	f340 80bd 	ble.w	800f16e <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800eff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eff6:	68db      	ldr	r3, [r3, #12]
 800eff8:	899b      	ldrh	r3, [r3, #12]
 800effa:	b29b      	uxth	r3, r3
 800effc:	4618      	mov	r0, r3
 800effe:	f7fa f979 	bl	80092f4 <lwip_htons>
 800f002:	4603      	mov	r3, r0
 800f004:	b2db      	uxtb	r3, r3
 800f006:	f003 0301 	and.w	r3, r3, #1
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	f040 80bf 	bne.w	800f18e <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800f010:	4875      	ldr	r0, [pc, #468]	; (800f1e8 <tcp_receive+0xf1c>)
 800f012:	f7fd fa51 	bl	800c4b8 <tcp_seg_copy>
 800f016:	4602      	mov	r2, r0
 800f018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f01a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800f01c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	2b00      	cmp	r3, #0
 800f022:	f000 80b6 	beq.w	800f192 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800f026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f028:	68db      	ldr	r3, [r3, #12]
 800f02a:	685b      	ldr	r3, [r3, #4]
 800f02c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f02e:	8912      	ldrh	r2, [r2, #8]
 800f030:	441a      	add	r2, r3
 800f032:	4b6c      	ldr	r3, [pc, #432]	; (800f1e4 <tcp_receive+0xf18>)
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	1ad3      	subs	r3, r2, r3
 800f038:	2b00      	cmp	r3, #0
 800f03a:	dd12      	ble.n	800f062 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800f03c:	4b69      	ldr	r3, [pc, #420]	; (800f1e4 <tcp_receive+0xf18>)
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	b29a      	uxth	r2, r3
 800f042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f044:	68db      	ldr	r3, [r3, #12]
 800f046:	685b      	ldr	r3, [r3, #4]
 800f048:	b29b      	uxth	r3, r3
 800f04a:	1ad3      	subs	r3, r2, r3
 800f04c:	b29a      	uxth	r2, r3
 800f04e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f050:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800f052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f054:	685a      	ldr	r2, [r3, #4]
 800f056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f058:	891b      	ldrh	r3, [r3, #8]
 800f05a:	4619      	mov	r1, r3
 800f05c:	4610      	mov	r0, r2
 800f05e:	f7fb fba3 	bl	800a7a8 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800f062:	4b62      	ldr	r3, [pc, #392]	; (800f1ec <tcp_receive+0xf20>)
 800f064:	881b      	ldrh	r3, [r3, #0]
 800f066:	461a      	mov	r2, r3
 800f068:	4b5e      	ldr	r3, [pc, #376]	; (800f1e4 <tcp_receive+0xf18>)
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	441a      	add	r2, r3
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f072:	6879      	ldr	r1, [r7, #4]
 800f074:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f076:	440b      	add	r3, r1
 800f078:	1ad3      	subs	r3, r2, r3
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	f340 8089 	ble.w	800f192 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800f080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	68db      	ldr	r3, [r3, #12]
 800f086:	899b      	ldrh	r3, [r3, #12]
 800f088:	b29b      	uxth	r3, r3
 800f08a:	4618      	mov	r0, r3
 800f08c:	f7fa f932 	bl	80092f4 <lwip_htons>
 800f090:	4603      	mov	r3, r0
 800f092:	b2db      	uxtb	r3, r3
 800f094:	f003 0301 	and.w	r3, r3, #1
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d022      	beq.n	800f0e2 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800f09c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	68db      	ldr	r3, [r3, #12]
 800f0a2:	899b      	ldrh	r3, [r3, #12]
 800f0a4:	b29b      	uxth	r3, r3
 800f0a6:	b21b      	sxth	r3, r3
 800f0a8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f0ac:	b21c      	sxth	r4, r3
 800f0ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	68db      	ldr	r3, [r3, #12]
 800f0b4:	899b      	ldrh	r3, [r3, #12]
 800f0b6:	b29b      	uxth	r3, r3
 800f0b8:	4618      	mov	r0, r3
 800f0ba:	f7fa f91b 	bl	80092f4 <lwip_htons>
 800f0be:	4603      	mov	r3, r0
 800f0c0:	b2db      	uxtb	r3, r3
 800f0c2:	b29b      	uxth	r3, r3
 800f0c4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800f0c8:	b29b      	uxth	r3, r3
 800f0ca:	4618      	mov	r0, r3
 800f0cc:	f7fa f912 	bl	80092f4 <lwip_htons>
 800f0d0:	4603      	mov	r3, r0
 800f0d2:	b21b      	sxth	r3, r3
 800f0d4:	4323      	orrs	r3, r4
 800f0d6:	b21a      	sxth	r2, r3
 800f0d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	68db      	ldr	r3, [r3, #12]
 800f0de:	b292      	uxth	r2, r2
 800f0e0:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0e6:	b29a      	uxth	r2, r3
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f0ec:	4413      	add	r3, r2
 800f0ee:	b299      	uxth	r1, r3
 800f0f0:	4b3c      	ldr	r3, [pc, #240]	; (800f1e4 <tcp_receive+0xf18>)
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	b29a      	uxth	r2, r3
 800f0f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	1a8a      	subs	r2, r1, r2
 800f0fc:	b292      	uxth	r2, r2
 800f0fe:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800f100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	685a      	ldr	r2, [r3, #4]
 800f106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	891b      	ldrh	r3, [r3, #8]
 800f10c:	4619      	mov	r1, r3
 800f10e:	4610      	mov	r0, r2
 800f110:	f7fb fb4a 	bl	800a7a8 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800f114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	891c      	ldrh	r4, [r3, #8]
 800f11a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	68db      	ldr	r3, [r3, #12]
 800f120:	899b      	ldrh	r3, [r3, #12]
 800f122:	b29b      	uxth	r3, r3
 800f124:	4618      	mov	r0, r3
 800f126:	f7fa f8e5 	bl	80092f4 <lwip_htons>
 800f12a:	4603      	mov	r3, r0
 800f12c:	b2db      	uxtb	r3, r3
 800f12e:	f003 0303 	and.w	r3, r3, #3
 800f132:	2b00      	cmp	r3, #0
 800f134:	d001      	beq.n	800f13a <tcp_receive+0xe6e>
 800f136:	2301      	movs	r3, #1
 800f138:	e000      	b.n	800f13c <tcp_receive+0xe70>
 800f13a:	2300      	movs	r3, #0
 800f13c:	4423      	add	r3, r4
 800f13e:	b29a      	uxth	r2, r3
 800f140:	4b2a      	ldr	r3, [pc, #168]	; (800f1ec <tcp_receive+0xf20>)
 800f142:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800f144:	4b29      	ldr	r3, [pc, #164]	; (800f1ec <tcp_receive+0xf20>)
 800f146:	881b      	ldrh	r3, [r3, #0]
 800f148:	461a      	mov	r2, r3
 800f14a:	4b26      	ldr	r3, [pc, #152]	; (800f1e4 <tcp_receive+0xf18>)
 800f14c:	681b      	ldr	r3, [r3, #0]
 800f14e:	441a      	add	r2, r3
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f154:	6879      	ldr	r1, [r7, #4]
 800f156:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f158:	440b      	add	r3, r1
 800f15a:	429a      	cmp	r2, r3
 800f15c:	d019      	beq.n	800f192 <tcp_receive+0xec6>
 800f15e:	4b24      	ldr	r3, [pc, #144]	; (800f1f0 <tcp_receive+0xf24>)
 800f160:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800f164:	4923      	ldr	r1, [pc, #140]	; (800f1f4 <tcp_receive+0xf28>)
 800f166:	4824      	ldr	r0, [pc, #144]	; (800f1f8 <tcp_receive+0xf2c>)
 800f168:	f007 f952 	bl	8016410 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800f16c:	e011      	b.n	800f192 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800f16e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	63bb      	str	r3, [r7, #56]	; 0x38
 800f174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f176:	2b00      	cmp	r3, #0
 800f178:	f47f aea4 	bne.w	800eec4 <tcp_receive+0xbf8>
 800f17c:	e00a      	b.n	800f194 <tcp_receive+0xec8>
                break;
 800f17e:	bf00      	nop
 800f180:	e008      	b.n	800f194 <tcp_receive+0xec8>
                break;
 800f182:	bf00      	nop
 800f184:	e006      	b.n	800f194 <tcp_receive+0xec8>
                  break;
 800f186:	bf00      	nop
 800f188:	e004      	b.n	800f194 <tcp_receive+0xec8>
                  break;
 800f18a:	bf00      	nop
 800f18c:	e002      	b.n	800f194 <tcp_receive+0xec8>
                  break;
 800f18e:	bf00      	nop
 800f190:	e000      	b.n	800f194 <tcp_receive+0xec8>
                break;
 800f192:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800f194:	6878      	ldr	r0, [r7, #4]
 800f196:	f001 fe8b 	bl	8010eb0 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800f19a:	e003      	b.n	800f1a4 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800f19c:	6878      	ldr	r0, [r7, #4]
 800f19e:	f001 fe87 	bl	8010eb0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f1a2:	e01a      	b.n	800f1da <tcp_receive+0xf0e>
 800f1a4:	e019      	b.n	800f1da <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800f1a6:	4b0f      	ldr	r3, [pc, #60]	; (800f1e4 <tcp_receive+0xf18>)
 800f1a8:	681a      	ldr	r2, [r3, #0]
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1ae:	1ad3      	subs	r3, r2, r3
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	db0a      	blt.n	800f1ca <tcp_receive+0xefe>
 800f1b4:	4b0b      	ldr	r3, [pc, #44]	; (800f1e4 <tcp_receive+0xf18>)
 800f1b6:	681a      	ldr	r2, [r3, #0]
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1bc:	6879      	ldr	r1, [r7, #4]
 800f1be:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f1c0:	440b      	add	r3, r1
 800f1c2:	1ad3      	subs	r3, r2, r3
 800f1c4:	3301      	adds	r3, #1
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	dd07      	ble.n	800f1da <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	8b5b      	ldrh	r3, [r3, #26]
 800f1ce:	f043 0302 	orr.w	r3, r3, #2
 800f1d2:	b29a      	uxth	r2, r3
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800f1d8:	e7ff      	b.n	800f1da <tcp_receive+0xf0e>
 800f1da:	bf00      	nop
 800f1dc:	3750      	adds	r7, #80	; 0x50
 800f1de:	46bd      	mov	sp, r7
 800f1e0:	bdb0      	pop	{r4, r5, r7, pc}
 800f1e2:	bf00      	nop
 800f1e4:	2001aeec 	.word	0x2001aeec
 800f1e8:	2001aecc 	.word	0x2001aecc
 800f1ec:	2001aef6 	.word	0x2001aef6
 800f1f0:	0801968c 	.word	0x0801968c
 800f1f4:	08019a34 	.word	0x08019a34
 800f1f8:	080196d8 	.word	0x080196d8

0800f1fc <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800f1fc:	b480      	push	{r7}
 800f1fe:	b083      	sub	sp, #12
 800f200:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800f202:	4b15      	ldr	r3, [pc, #84]	; (800f258 <tcp_get_next_optbyte+0x5c>)
 800f204:	881b      	ldrh	r3, [r3, #0]
 800f206:	1c5a      	adds	r2, r3, #1
 800f208:	b291      	uxth	r1, r2
 800f20a:	4a13      	ldr	r2, [pc, #76]	; (800f258 <tcp_get_next_optbyte+0x5c>)
 800f20c:	8011      	strh	r1, [r2, #0]
 800f20e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800f210:	4b12      	ldr	r3, [pc, #72]	; (800f25c <tcp_get_next_optbyte+0x60>)
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	2b00      	cmp	r3, #0
 800f216:	d004      	beq.n	800f222 <tcp_get_next_optbyte+0x26>
 800f218:	4b11      	ldr	r3, [pc, #68]	; (800f260 <tcp_get_next_optbyte+0x64>)
 800f21a:	881b      	ldrh	r3, [r3, #0]
 800f21c:	88fa      	ldrh	r2, [r7, #6]
 800f21e:	429a      	cmp	r2, r3
 800f220:	d208      	bcs.n	800f234 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800f222:	4b10      	ldr	r3, [pc, #64]	; (800f264 <tcp_get_next_optbyte+0x68>)
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	3314      	adds	r3, #20
 800f228:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800f22a:	88fb      	ldrh	r3, [r7, #6]
 800f22c:	683a      	ldr	r2, [r7, #0]
 800f22e:	4413      	add	r3, r2
 800f230:	781b      	ldrb	r3, [r3, #0]
 800f232:	e00b      	b.n	800f24c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800f234:	88fb      	ldrh	r3, [r7, #6]
 800f236:	b2da      	uxtb	r2, r3
 800f238:	4b09      	ldr	r3, [pc, #36]	; (800f260 <tcp_get_next_optbyte+0x64>)
 800f23a:	881b      	ldrh	r3, [r3, #0]
 800f23c:	b2db      	uxtb	r3, r3
 800f23e:	1ad3      	subs	r3, r2, r3
 800f240:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800f242:	4b06      	ldr	r3, [pc, #24]	; (800f25c <tcp_get_next_optbyte+0x60>)
 800f244:	681a      	ldr	r2, [r3, #0]
 800f246:	797b      	ldrb	r3, [r7, #5]
 800f248:	4413      	add	r3, r2
 800f24a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f24c:	4618      	mov	r0, r3
 800f24e:	370c      	adds	r7, #12
 800f250:	46bd      	mov	sp, r7
 800f252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f256:	4770      	bx	lr
 800f258:	2001aee8 	.word	0x2001aee8
 800f25c:	2001aee4 	.word	0x2001aee4
 800f260:	2001aee2 	.word	0x2001aee2
 800f264:	2001aedc 	.word	0x2001aedc

0800f268 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800f268:	b580      	push	{r7, lr}
 800f26a:	b084      	sub	sp, #16
 800f26c:	af00      	add	r7, sp, #0
 800f26e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	2b00      	cmp	r3, #0
 800f274:	d106      	bne.n	800f284 <tcp_parseopt+0x1c>
 800f276:	4b32      	ldr	r3, [pc, #200]	; (800f340 <tcp_parseopt+0xd8>)
 800f278:	f240 727d 	movw	r2, #1917	; 0x77d
 800f27c:	4931      	ldr	r1, [pc, #196]	; (800f344 <tcp_parseopt+0xdc>)
 800f27e:	4832      	ldr	r0, [pc, #200]	; (800f348 <tcp_parseopt+0xe0>)
 800f280:	f007 f8c6 	bl	8016410 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800f284:	4b31      	ldr	r3, [pc, #196]	; (800f34c <tcp_parseopt+0xe4>)
 800f286:	881b      	ldrh	r3, [r3, #0]
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d055      	beq.n	800f338 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800f28c:	4b30      	ldr	r3, [pc, #192]	; (800f350 <tcp_parseopt+0xe8>)
 800f28e:	2200      	movs	r2, #0
 800f290:	801a      	strh	r2, [r3, #0]
 800f292:	e045      	b.n	800f320 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800f294:	f7ff ffb2 	bl	800f1fc <tcp_get_next_optbyte>
 800f298:	4603      	mov	r3, r0
 800f29a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800f29c:	7bfb      	ldrb	r3, [r7, #15]
 800f29e:	2b02      	cmp	r3, #2
 800f2a0:	d006      	beq.n	800f2b0 <tcp_parseopt+0x48>
 800f2a2:	2b02      	cmp	r3, #2
 800f2a4:	dc2b      	bgt.n	800f2fe <tcp_parseopt+0x96>
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d041      	beq.n	800f32e <tcp_parseopt+0xc6>
 800f2aa:	2b01      	cmp	r3, #1
 800f2ac:	d127      	bne.n	800f2fe <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800f2ae:	e037      	b.n	800f320 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800f2b0:	f7ff ffa4 	bl	800f1fc <tcp_get_next_optbyte>
 800f2b4:	4603      	mov	r3, r0
 800f2b6:	2b04      	cmp	r3, #4
 800f2b8:	d13b      	bne.n	800f332 <tcp_parseopt+0xca>
 800f2ba:	4b25      	ldr	r3, [pc, #148]	; (800f350 <tcp_parseopt+0xe8>)
 800f2bc:	881b      	ldrh	r3, [r3, #0]
 800f2be:	3301      	adds	r3, #1
 800f2c0:	4a22      	ldr	r2, [pc, #136]	; (800f34c <tcp_parseopt+0xe4>)
 800f2c2:	8812      	ldrh	r2, [r2, #0]
 800f2c4:	4293      	cmp	r3, r2
 800f2c6:	da34      	bge.n	800f332 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800f2c8:	f7ff ff98 	bl	800f1fc <tcp_get_next_optbyte>
 800f2cc:	4603      	mov	r3, r0
 800f2ce:	b29b      	uxth	r3, r3
 800f2d0:	021b      	lsls	r3, r3, #8
 800f2d2:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800f2d4:	f7ff ff92 	bl	800f1fc <tcp_get_next_optbyte>
 800f2d8:	4603      	mov	r3, r0
 800f2da:	b29a      	uxth	r2, r3
 800f2dc:	89bb      	ldrh	r3, [r7, #12]
 800f2de:	4313      	orrs	r3, r2
 800f2e0:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800f2e2:	89bb      	ldrh	r3, [r7, #12]
 800f2e4:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800f2e8:	d804      	bhi.n	800f2f4 <tcp_parseopt+0x8c>
 800f2ea:	89bb      	ldrh	r3, [r7, #12]
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d001      	beq.n	800f2f4 <tcp_parseopt+0x8c>
 800f2f0:	89ba      	ldrh	r2, [r7, #12]
 800f2f2:	e001      	b.n	800f2f8 <tcp_parseopt+0x90>
 800f2f4:	f44f 7206 	mov.w	r2, #536	; 0x218
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800f2fc:	e010      	b.n	800f320 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800f2fe:	f7ff ff7d 	bl	800f1fc <tcp_get_next_optbyte>
 800f302:	4603      	mov	r3, r0
 800f304:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800f306:	7afb      	ldrb	r3, [r7, #11]
 800f308:	2b01      	cmp	r3, #1
 800f30a:	d914      	bls.n	800f336 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800f30c:	7afb      	ldrb	r3, [r7, #11]
 800f30e:	b29a      	uxth	r2, r3
 800f310:	4b0f      	ldr	r3, [pc, #60]	; (800f350 <tcp_parseopt+0xe8>)
 800f312:	881b      	ldrh	r3, [r3, #0]
 800f314:	4413      	add	r3, r2
 800f316:	b29b      	uxth	r3, r3
 800f318:	3b02      	subs	r3, #2
 800f31a:	b29a      	uxth	r2, r3
 800f31c:	4b0c      	ldr	r3, [pc, #48]	; (800f350 <tcp_parseopt+0xe8>)
 800f31e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800f320:	4b0b      	ldr	r3, [pc, #44]	; (800f350 <tcp_parseopt+0xe8>)
 800f322:	881a      	ldrh	r2, [r3, #0]
 800f324:	4b09      	ldr	r3, [pc, #36]	; (800f34c <tcp_parseopt+0xe4>)
 800f326:	881b      	ldrh	r3, [r3, #0]
 800f328:	429a      	cmp	r2, r3
 800f32a:	d3b3      	bcc.n	800f294 <tcp_parseopt+0x2c>
 800f32c:	e004      	b.n	800f338 <tcp_parseopt+0xd0>
          return;
 800f32e:	bf00      	nop
 800f330:	e002      	b.n	800f338 <tcp_parseopt+0xd0>
            return;
 800f332:	bf00      	nop
 800f334:	e000      	b.n	800f338 <tcp_parseopt+0xd0>
            return;
 800f336:	bf00      	nop
      }
    }
  }
}
 800f338:	3710      	adds	r7, #16
 800f33a:	46bd      	mov	sp, r7
 800f33c:	bd80      	pop	{r7, pc}
 800f33e:	bf00      	nop
 800f340:	0801968c 	.word	0x0801968c
 800f344:	08019af0 	.word	0x08019af0
 800f348:	080196d8 	.word	0x080196d8
 800f34c:	2001aee0 	.word	0x2001aee0
 800f350:	2001aee8 	.word	0x2001aee8

0800f354 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800f354:	b480      	push	{r7}
 800f356:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800f358:	4b05      	ldr	r3, [pc, #20]	; (800f370 <tcp_trigger_input_pcb_close+0x1c>)
 800f35a:	781b      	ldrb	r3, [r3, #0]
 800f35c:	f043 0310 	orr.w	r3, r3, #16
 800f360:	b2da      	uxtb	r2, r3
 800f362:	4b03      	ldr	r3, [pc, #12]	; (800f370 <tcp_trigger_input_pcb_close+0x1c>)
 800f364:	701a      	strb	r2, [r3, #0]
}
 800f366:	bf00      	nop
 800f368:	46bd      	mov	sp, r7
 800f36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f36e:	4770      	bx	lr
 800f370:	2001aef9 	.word	0x2001aef9

0800f374 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800f374:	b580      	push	{r7, lr}
 800f376:	b084      	sub	sp, #16
 800f378:	af00      	add	r7, sp, #0
 800f37a:	60f8      	str	r0, [r7, #12]
 800f37c:	60b9      	str	r1, [r7, #8]
 800f37e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800f380:	68fb      	ldr	r3, [r7, #12]
 800f382:	2b00      	cmp	r3, #0
 800f384:	d00a      	beq.n	800f39c <tcp_route+0x28>
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	7a1b      	ldrb	r3, [r3, #8]
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d006      	beq.n	800f39c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	7a1b      	ldrb	r3, [r3, #8]
 800f392:	4618      	mov	r0, r3
 800f394:	f7fb f800 	bl	800a398 <netif_get_by_index>
 800f398:	4603      	mov	r3, r0
 800f39a:	e003      	b.n	800f3a4 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800f39c:	6878      	ldr	r0, [r7, #4]
 800f39e:	f005 fcd7 	bl	8014d50 <ip4_route>
 800f3a2:	4603      	mov	r3, r0
  }
}
 800f3a4:	4618      	mov	r0, r3
 800f3a6:	3710      	adds	r7, #16
 800f3a8:	46bd      	mov	sp, r7
 800f3aa:	bd80      	pop	{r7, pc}

0800f3ac <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800f3ac:	b590      	push	{r4, r7, lr}
 800f3ae:	b087      	sub	sp, #28
 800f3b0:	af00      	add	r7, sp, #0
 800f3b2:	60f8      	str	r0, [r7, #12]
 800f3b4:	60b9      	str	r1, [r7, #8]
 800f3b6:	603b      	str	r3, [r7, #0]
 800f3b8:	4613      	mov	r3, r2
 800f3ba:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d105      	bne.n	800f3ce <tcp_create_segment+0x22>
 800f3c2:	4b44      	ldr	r3, [pc, #272]	; (800f4d4 <tcp_create_segment+0x128>)
 800f3c4:	22a3      	movs	r2, #163	; 0xa3
 800f3c6:	4944      	ldr	r1, [pc, #272]	; (800f4d8 <tcp_create_segment+0x12c>)
 800f3c8:	4844      	ldr	r0, [pc, #272]	; (800f4dc <tcp_create_segment+0x130>)
 800f3ca:	f007 f821 	bl	8016410 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800f3ce:	68bb      	ldr	r3, [r7, #8]
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d105      	bne.n	800f3e0 <tcp_create_segment+0x34>
 800f3d4:	4b3f      	ldr	r3, [pc, #252]	; (800f4d4 <tcp_create_segment+0x128>)
 800f3d6:	22a4      	movs	r2, #164	; 0xa4
 800f3d8:	4941      	ldr	r1, [pc, #260]	; (800f4e0 <tcp_create_segment+0x134>)
 800f3da:	4840      	ldr	r0, [pc, #256]	; (800f4dc <tcp_create_segment+0x130>)
 800f3dc:	f007 f818 	bl	8016410 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800f3e0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f3e4:	009b      	lsls	r3, r3, #2
 800f3e6:	b2db      	uxtb	r3, r3
 800f3e8:	f003 0304 	and.w	r3, r3, #4
 800f3ec:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800f3ee:	2003      	movs	r0, #3
 800f3f0:	f7fa fc5e 	bl	8009cb0 <memp_malloc>
 800f3f4:	6138      	str	r0, [r7, #16]
 800f3f6:	693b      	ldr	r3, [r7, #16]
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d104      	bne.n	800f406 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800f3fc:	68b8      	ldr	r0, [r7, #8]
 800f3fe:	f7fb fb59 	bl	800aab4 <pbuf_free>
    return NULL;
 800f402:	2300      	movs	r3, #0
 800f404:	e061      	b.n	800f4ca <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800f406:	693b      	ldr	r3, [r7, #16]
 800f408:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800f40c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800f40e:	693b      	ldr	r3, [r7, #16]
 800f410:	2200      	movs	r2, #0
 800f412:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800f414:	693b      	ldr	r3, [r7, #16]
 800f416:	68ba      	ldr	r2, [r7, #8]
 800f418:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800f41a:	68bb      	ldr	r3, [r7, #8]
 800f41c:	891a      	ldrh	r2, [r3, #8]
 800f41e:	7dfb      	ldrb	r3, [r7, #23]
 800f420:	b29b      	uxth	r3, r3
 800f422:	429a      	cmp	r2, r3
 800f424:	d205      	bcs.n	800f432 <tcp_create_segment+0x86>
 800f426:	4b2b      	ldr	r3, [pc, #172]	; (800f4d4 <tcp_create_segment+0x128>)
 800f428:	22b0      	movs	r2, #176	; 0xb0
 800f42a:	492e      	ldr	r1, [pc, #184]	; (800f4e4 <tcp_create_segment+0x138>)
 800f42c:	482b      	ldr	r0, [pc, #172]	; (800f4dc <tcp_create_segment+0x130>)
 800f42e:	f006 ffef 	bl	8016410 <iprintf>
  seg->len = p->tot_len - optlen;
 800f432:	68bb      	ldr	r3, [r7, #8]
 800f434:	891a      	ldrh	r2, [r3, #8]
 800f436:	7dfb      	ldrb	r3, [r7, #23]
 800f438:	b29b      	uxth	r3, r3
 800f43a:	1ad3      	subs	r3, r2, r3
 800f43c:	b29a      	uxth	r2, r3
 800f43e:	693b      	ldr	r3, [r7, #16]
 800f440:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800f442:	2114      	movs	r1, #20
 800f444:	68b8      	ldr	r0, [r7, #8]
 800f446:	f7fb fa9f 	bl	800a988 <pbuf_add_header>
 800f44a:	4603      	mov	r3, r0
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d004      	beq.n	800f45a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800f450:	6938      	ldr	r0, [r7, #16]
 800f452:	f7fd f818 	bl	800c486 <tcp_seg_free>
    return NULL;
 800f456:	2300      	movs	r3, #0
 800f458:	e037      	b.n	800f4ca <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800f45a:	693b      	ldr	r3, [r7, #16]
 800f45c:	685b      	ldr	r3, [r3, #4]
 800f45e:	685a      	ldr	r2, [r3, #4]
 800f460:	693b      	ldr	r3, [r7, #16]
 800f462:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	8ada      	ldrh	r2, [r3, #22]
 800f468:	693b      	ldr	r3, [r7, #16]
 800f46a:	68dc      	ldr	r4, [r3, #12]
 800f46c:	4610      	mov	r0, r2
 800f46e:	f7f9 ff41 	bl	80092f4 <lwip_htons>
 800f472:	4603      	mov	r3, r0
 800f474:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	8b1a      	ldrh	r2, [r3, #24]
 800f47a:	693b      	ldr	r3, [r7, #16]
 800f47c:	68dc      	ldr	r4, [r3, #12]
 800f47e:	4610      	mov	r0, r2
 800f480:	f7f9 ff38 	bl	80092f4 <lwip_htons>
 800f484:	4603      	mov	r3, r0
 800f486:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800f488:	693b      	ldr	r3, [r7, #16]
 800f48a:	68dc      	ldr	r4, [r3, #12]
 800f48c:	6838      	ldr	r0, [r7, #0]
 800f48e:	f7f9 ff46 	bl	800931e <lwip_htonl>
 800f492:	4603      	mov	r3, r0
 800f494:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800f496:	7dfb      	ldrb	r3, [r7, #23]
 800f498:	089b      	lsrs	r3, r3, #2
 800f49a:	b2db      	uxtb	r3, r3
 800f49c:	b29b      	uxth	r3, r3
 800f49e:	3305      	adds	r3, #5
 800f4a0:	b29b      	uxth	r3, r3
 800f4a2:	031b      	lsls	r3, r3, #12
 800f4a4:	b29a      	uxth	r2, r3
 800f4a6:	79fb      	ldrb	r3, [r7, #7]
 800f4a8:	b29b      	uxth	r3, r3
 800f4aa:	4313      	orrs	r3, r2
 800f4ac:	b29a      	uxth	r2, r3
 800f4ae:	693b      	ldr	r3, [r7, #16]
 800f4b0:	68dc      	ldr	r4, [r3, #12]
 800f4b2:	4610      	mov	r0, r2
 800f4b4:	f7f9 ff1e 	bl	80092f4 <lwip_htons>
 800f4b8:	4603      	mov	r3, r0
 800f4ba:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800f4bc:	693b      	ldr	r3, [r7, #16]
 800f4be:	68db      	ldr	r3, [r3, #12]
 800f4c0:	2200      	movs	r2, #0
 800f4c2:	749a      	strb	r2, [r3, #18]
 800f4c4:	2200      	movs	r2, #0
 800f4c6:	74da      	strb	r2, [r3, #19]
  return seg;
 800f4c8:	693b      	ldr	r3, [r7, #16]
}
 800f4ca:	4618      	mov	r0, r3
 800f4cc:	371c      	adds	r7, #28
 800f4ce:	46bd      	mov	sp, r7
 800f4d0:	bd90      	pop	{r4, r7, pc}
 800f4d2:	bf00      	nop
 800f4d4:	08019b0c 	.word	0x08019b0c
 800f4d8:	08019b40 	.word	0x08019b40
 800f4dc:	08019b60 	.word	0x08019b60
 800f4e0:	08019b88 	.word	0x08019b88
 800f4e4:	08019bac 	.word	0x08019bac

0800f4e8 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800f4e8:	b580      	push	{r7, lr}
 800f4ea:	b086      	sub	sp, #24
 800f4ec:	af00      	add	r7, sp, #0
 800f4ee:	607b      	str	r3, [r7, #4]
 800f4f0:	4603      	mov	r3, r0
 800f4f2:	73fb      	strb	r3, [r7, #15]
 800f4f4:	460b      	mov	r3, r1
 800f4f6:	81bb      	strh	r3, [r7, #12]
 800f4f8:	4613      	mov	r3, r2
 800f4fa:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800f4fc:	89bb      	ldrh	r3, [r7, #12]
 800f4fe:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	2b00      	cmp	r3, #0
 800f504:	d105      	bne.n	800f512 <tcp_pbuf_prealloc+0x2a>
 800f506:	4b30      	ldr	r3, [pc, #192]	; (800f5c8 <tcp_pbuf_prealloc+0xe0>)
 800f508:	22e8      	movs	r2, #232	; 0xe8
 800f50a:	4930      	ldr	r1, [pc, #192]	; (800f5cc <tcp_pbuf_prealloc+0xe4>)
 800f50c:	4830      	ldr	r0, [pc, #192]	; (800f5d0 <tcp_pbuf_prealloc+0xe8>)
 800f50e:	f006 ff7f 	bl	8016410 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800f512:	6a3b      	ldr	r3, [r7, #32]
 800f514:	2b00      	cmp	r3, #0
 800f516:	d105      	bne.n	800f524 <tcp_pbuf_prealloc+0x3c>
 800f518:	4b2b      	ldr	r3, [pc, #172]	; (800f5c8 <tcp_pbuf_prealloc+0xe0>)
 800f51a:	22e9      	movs	r2, #233	; 0xe9
 800f51c:	492d      	ldr	r1, [pc, #180]	; (800f5d4 <tcp_pbuf_prealloc+0xec>)
 800f51e:	482c      	ldr	r0, [pc, #176]	; (800f5d0 <tcp_pbuf_prealloc+0xe8>)
 800f520:	f006 ff76 	bl	8016410 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800f524:	89ba      	ldrh	r2, [r7, #12]
 800f526:	897b      	ldrh	r3, [r7, #10]
 800f528:	429a      	cmp	r2, r3
 800f52a:	d221      	bcs.n	800f570 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800f52c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f530:	f003 0302 	and.w	r3, r3, #2
 800f534:	2b00      	cmp	r3, #0
 800f536:	d111      	bne.n	800f55c <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800f538:	6a3b      	ldr	r3, [r7, #32]
 800f53a:	8b5b      	ldrh	r3, [r3, #26]
 800f53c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800f540:	2b00      	cmp	r3, #0
 800f542:	d115      	bne.n	800f570 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800f544:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d007      	beq.n	800f55c <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800f54c:	6a3b      	ldr	r3, [r7, #32]
 800f54e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 800f550:	2b00      	cmp	r3, #0
 800f552:	d103      	bne.n	800f55c <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800f554:	6a3b      	ldr	r3, [r7, #32]
 800f556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 800f558:	2b00      	cmp	r3, #0
 800f55a:	d009      	beq.n	800f570 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800f55c:	89bb      	ldrh	r3, [r7, #12]
 800f55e:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800f562:	f023 0203 	bic.w	r2, r3, #3
 800f566:	897b      	ldrh	r3, [r7, #10]
 800f568:	4293      	cmp	r3, r2
 800f56a:	bf28      	it	cs
 800f56c:	4613      	movcs	r3, r2
 800f56e:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800f570:	8af9      	ldrh	r1, [r7, #22]
 800f572:	7bfb      	ldrb	r3, [r7, #15]
 800f574:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f578:	4618      	mov	r0, r3
 800f57a:	f7fa ffb7 	bl	800a4ec <pbuf_alloc>
 800f57e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800f580:	693b      	ldr	r3, [r7, #16]
 800f582:	2b00      	cmp	r3, #0
 800f584:	d101      	bne.n	800f58a <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800f586:	2300      	movs	r3, #0
 800f588:	e019      	b.n	800f5be <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800f58a:	693b      	ldr	r3, [r7, #16]
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d006      	beq.n	800f5a0 <tcp_pbuf_prealloc+0xb8>
 800f592:	4b0d      	ldr	r3, [pc, #52]	; (800f5c8 <tcp_pbuf_prealloc+0xe0>)
 800f594:	f240 120b 	movw	r2, #267	; 0x10b
 800f598:	490f      	ldr	r1, [pc, #60]	; (800f5d8 <tcp_pbuf_prealloc+0xf0>)
 800f59a:	480d      	ldr	r0, [pc, #52]	; (800f5d0 <tcp_pbuf_prealloc+0xe8>)
 800f59c:	f006 ff38 	bl	8016410 <iprintf>
  *oversize = p->len - length;
 800f5a0:	693b      	ldr	r3, [r7, #16]
 800f5a2:	895a      	ldrh	r2, [r3, #10]
 800f5a4:	89bb      	ldrh	r3, [r7, #12]
 800f5a6:	1ad3      	subs	r3, r2, r3
 800f5a8:	b29a      	uxth	r2, r3
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800f5ae:	693b      	ldr	r3, [r7, #16]
 800f5b0:	89ba      	ldrh	r2, [r7, #12]
 800f5b2:	811a      	strh	r2, [r3, #8]
 800f5b4:	693b      	ldr	r3, [r7, #16]
 800f5b6:	891a      	ldrh	r2, [r3, #8]
 800f5b8:	693b      	ldr	r3, [r7, #16]
 800f5ba:	815a      	strh	r2, [r3, #10]
  return p;
 800f5bc:	693b      	ldr	r3, [r7, #16]
}
 800f5be:	4618      	mov	r0, r3
 800f5c0:	3718      	adds	r7, #24
 800f5c2:	46bd      	mov	sp, r7
 800f5c4:	bd80      	pop	{r7, pc}
 800f5c6:	bf00      	nop
 800f5c8:	08019b0c 	.word	0x08019b0c
 800f5cc:	08019bc4 	.word	0x08019bc4
 800f5d0:	08019b60 	.word	0x08019b60
 800f5d4:	08019be8 	.word	0x08019be8
 800f5d8:	08019c08 	.word	0x08019c08

0800f5dc <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800f5dc:	b580      	push	{r7, lr}
 800f5de:	b082      	sub	sp, #8
 800f5e0:	af00      	add	r7, sp, #0
 800f5e2:	6078      	str	r0, [r7, #4]
 800f5e4:	460b      	mov	r3, r1
 800f5e6:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d106      	bne.n	800f5fc <tcp_write_checks+0x20>
 800f5ee:	4b33      	ldr	r3, [pc, #204]	; (800f6bc <tcp_write_checks+0xe0>)
 800f5f0:	f240 1233 	movw	r2, #307	; 0x133
 800f5f4:	4932      	ldr	r1, [pc, #200]	; (800f6c0 <tcp_write_checks+0xe4>)
 800f5f6:	4833      	ldr	r0, [pc, #204]	; (800f6c4 <tcp_write_checks+0xe8>)
 800f5f8:	f006 ff0a 	bl	8016410 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	7d1b      	ldrb	r3, [r3, #20]
 800f600:	2b04      	cmp	r3, #4
 800f602:	d00e      	beq.n	800f622 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800f608:	2b07      	cmp	r3, #7
 800f60a:	d00a      	beq.n	800f622 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800f610:	2b02      	cmp	r3, #2
 800f612:	d006      	beq.n	800f622 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800f618:	2b03      	cmp	r3, #3
 800f61a:	d002      	beq.n	800f622 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800f61c:	f06f 030a 	mvn.w	r3, #10
 800f620:	e048      	b.n	800f6b4 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800f622:	887b      	ldrh	r3, [r7, #2]
 800f624:	2b00      	cmp	r3, #0
 800f626:	d101      	bne.n	800f62c <tcp_write_checks+0x50>
    return ERR_OK;
 800f628:	2300      	movs	r3, #0
 800f62a:	e043      	b.n	800f6b4 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800f632:	887a      	ldrh	r2, [r7, #2]
 800f634:	429a      	cmp	r2, r3
 800f636:	d909      	bls.n	800f64c <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	8b5b      	ldrh	r3, [r3, #26]
 800f63c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f640:	b29a      	uxth	r2, r3
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800f646:	f04f 33ff 	mov.w	r3, #4294967295
 800f64a:	e033      	b.n	800f6b4 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f652:	2b08      	cmp	r3, #8
 800f654:	d909      	bls.n	800f66a <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	8b5b      	ldrh	r3, [r3, #26]
 800f65a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f65e:	b29a      	uxth	r2, r3
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800f664:	f04f 33ff 	mov.w	r3, #4294967295
 800f668:	e024      	b.n	800f6b4 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f670:	2b00      	cmp	r3, #0
 800f672:	d00f      	beq.n	800f694 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d11a      	bne.n	800f6b2 <tcp_write_checks+0xd6>
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f680:	2b00      	cmp	r3, #0
 800f682:	d116      	bne.n	800f6b2 <tcp_write_checks+0xd6>
 800f684:	4b0d      	ldr	r3, [pc, #52]	; (800f6bc <tcp_write_checks+0xe0>)
 800f686:	f240 1255 	movw	r2, #341	; 0x155
 800f68a:	490f      	ldr	r1, [pc, #60]	; (800f6c8 <tcp_write_checks+0xec>)
 800f68c:	480d      	ldr	r0, [pc, #52]	; (800f6c4 <tcp_write_checks+0xe8>)
 800f68e:	f006 febf 	bl	8016410 <iprintf>
 800f692:	e00e      	b.n	800f6b2 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d103      	bne.n	800f6a4 <tcp_write_checks+0xc8>
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d006      	beq.n	800f6b2 <tcp_write_checks+0xd6>
 800f6a4:	4b05      	ldr	r3, [pc, #20]	; (800f6bc <tcp_write_checks+0xe0>)
 800f6a6:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800f6aa:	4908      	ldr	r1, [pc, #32]	; (800f6cc <tcp_write_checks+0xf0>)
 800f6ac:	4805      	ldr	r0, [pc, #20]	; (800f6c4 <tcp_write_checks+0xe8>)
 800f6ae:	f006 feaf 	bl	8016410 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800f6b2:	2300      	movs	r3, #0
}
 800f6b4:	4618      	mov	r0, r3
 800f6b6:	3708      	adds	r7, #8
 800f6b8:	46bd      	mov	sp, r7
 800f6ba:	bd80      	pop	{r7, pc}
 800f6bc:	08019b0c 	.word	0x08019b0c
 800f6c0:	08019c1c 	.word	0x08019c1c
 800f6c4:	08019b60 	.word	0x08019b60
 800f6c8:	08019c3c 	.word	0x08019c3c
 800f6cc:	08019c78 	.word	0x08019c78

0800f6d0 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800f6d0:	b590      	push	{r4, r7, lr}
 800f6d2:	b09b      	sub	sp, #108	; 0x6c
 800f6d4:	af04      	add	r7, sp, #16
 800f6d6:	60f8      	str	r0, [r7, #12]
 800f6d8:	60b9      	str	r1, [r7, #8]
 800f6da:	4611      	mov	r1, r2
 800f6dc:	461a      	mov	r2, r3
 800f6de:	460b      	mov	r3, r1
 800f6e0:	80fb      	strh	r3, [r7, #6]
 800f6e2:	4613      	mov	r3, r2
 800f6e4:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800f6e6:	2300      	movs	r3, #0
 800f6e8:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800f6ea:	2300      	movs	r3, #0
 800f6ec:	653b      	str	r3, [r7, #80]	; 0x50
 800f6ee:	2300      	movs	r3, #0
 800f6f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f6f2:	2300      	movs	r3, #0
 800f6f4:	64bb      	str	r3, [r7, #72]	; 0x48
 800f6f6:	2300      	movs	r3, #0
 800f6f8:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800f6fa:	2300      	movs	r3, #0
 800f6fc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800f700:	2300      	movs	r3, #0
 800f702:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800f706:	2300      	movs	r3, #0
 800f708:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800f70a:	2300      	movs	r3, #0
 800f70c:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800f70e:	2300      	movs	r3, #0
 800f710:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800f712:	68fb      	ldr	r3, [r7, #12]
 800f714:	2b00      	cmp	r3, #0
 800f716:	d109      	bne.n	800f72c <tcp_write+0x5c>
 800f718:	4ba4      	ldr	r3, [pc, #656]	; (800f9ac <tcp_write+0x2dc>)
 800f71a:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800f71e:	49a4      	ldr	r1, [pc, #656]	; (800f9b0 <tcp_write+0x2e0>)
 800f720:	48a4      	ldr	r0, [pc, #656]	; (800f9b4 <tcp_write+0x2e4>)
 800f722:	f006 fe75 	bl	8016410 <iprintf>
 800f726:	f06f 030f 	mvn.w	r3, #15
 800f72a:	e32a      	b.n	800fd82 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f732:	085b      	lsrs	r3, r3, #1
 800f734:	b29a      	uxth	r2, r3
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f73a:	4293      	cmp	r3, r2
 800f73c:	bf28      	it	cs
 800f73e:	4613      	movcs	r3, r2
 800f740:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800f742:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f744:	2b00      	cmp	r3, #0
 800f746:	d102      	bne.n	800f74e <tcp_write+0x7e>
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f74c:	e000      	b.n	800f750 <tcp_write+0x80>
 800f74e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f750:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800f752:	68bb      	ldr	r3, [r7, #8]
 800f754:	2b00      	cmp	r3, #0
 800f756:	d109      	bne.n	800f76c <tcp_write+0x9c>
 800f758:	4b94      	ldr	r3, [pc, #592]	; (800f9ac <tcp_write+0x2dc>)
 800f75a:	f240 12ad 	movw	r2, #429	; 0x1ad
 800f75e:	4996      	ldr	r1, [pc, #600]	; (800f9b8 <tcp_write+0x2e8>)
 800f760:	4894      	ldr	r0, [pc, #592]	; (800f9b4 <tcp_write+0x2e4>)
 800f762:	f006 fe55 	bl	8016410 <iprintf>
 800f766:	f06f 030f 	mvn.w	r3, #15
 800f76a:	e30a      	b.n	800fd82 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800f76c:	88fb      	ldrh	r3, [r7, #6]
 800f76e:	4619      	mov	r1, r3
 800f770:	68f8      	ldr	r0, [r7, #12]
 800f772:	f7ff ff33 	bl	800f5dc <tcp_write_checks>
 800f776:	4603      	mov	r3, r0
 800f778:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800f77c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800f780:	2b00      	cmp	r3, #0
 800f782:	d002      	beq.n	800f78a <tcp_write+0xba>
    return err;
 800f784:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800f788:	e2fb      	b.n	800fd82 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 800f78a:	68fb      	ldr	r3, [r7, #12]
 800f78c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f790:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800f794:	2300      	movs	r3, #0
 800f796:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800f79a:	68fb      	ldr	r3, [r7, #12]
 800f79c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	f000 80f6 	beq.w	800f990 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f7a8:	653b      	str	r3, [r7, #80]	; 0x50
 800f7aa:	e002      	b.n	800f7b2 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800f7ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f7ae:	681b      	ldr	r3, [r3, #0]
 800f7b0:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800f7b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d1f8      	bne.n	800f7ac <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800f7ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f7bc:	7a9b      	ldrb	r3, [r3, #10]
 800f7be:	009b      	lsls	r3, r3, #2
 800f7c0:	b29b      	uxth	r3, r3
 800f7c2:	f003 0304 	and.w	r3, r3, #4
 800f7c6:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800f7c8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f7ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f7cc:	891b      	ldrh	r3, [r3, #8]
 800f7ce:	4619      	mov	r1, r3
 800f7d0:	8c3b      	ldrh	r3, [r7, #32]
 800f7d2:	440b      	add	r3, r1
 800f7d4:	429a      	cmp	r2, r3
 800f7d6:	da06      	bge.n	800f7e6 <tcp_write+0x116>
 800f7d8:	4b74      	ldr	r3, [pc, #464]	; (800f9ac <tcp_write+0x2dc>)
 800f7da:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800f7de:	4977      	ldr	r1, [pc, #476]	; (800f9bc <tcp_write+0x2ec>)
 800f7e0:	4874      	ldr	r0, [pc, #464]	; (800f9b4 <tcp_write+0x2e4>)
 800f7e2:	f006 fe15 	bl	8016410 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800f7e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f7e8:	891a      	ldrh	r2, [r3, #8]
 800f7ea:	8c3b      	ldrh	r3, [r7, #32]
 800f7ec:	4413      	add	r3, r2
 800f7ee:	b29b      	uxth	r3, r3
 800f7f0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f7f2:	1ad3      	subs	r3, r2, r3
 800f7f4:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800f7f6:	68fb      	ldr	r3, [r7, #12]
 800f7f8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f7fc:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800f7fe:	8a7b      	ldrh	r3, [r7, #18]
 800f800:	2b00      	cmp	r3, #0
 800f802:	d026      	beq.n	800f852 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800f804:	8a7b      	ldrh	r3, [r7, #18]
 800f806:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800f808:	429a      	cmp	r2, r3
 800f80a:	d206      	bcs.n	800f81a <tcp_write+0x14a>
 800f80c:	4b67      	ldr	r3, [pc, #412]	; (800f9ac <tcp_write+0x2dc>)
 800f80e:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800f812:	496b      	ldr	r1, [pc, #428]	; (800f9c0 <tcp_write+0x2f0>)
 800f814:	4867      	ldr	r0, [pc, #412]	; (800f9b4 <tcp_write+0x2e4>)
 800f816:	f006 fdfb 	bl	8016410 <iprintf>
      seg = last_unsent;
 800f81a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f81c:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800f81e:	8a7b      	ldrh	r3, [r7, #18]
 800f820:	88fa      	ldrh	r2, [r7, #6]
 800f822:	4293      	cmp	r3, r2
 800f824:	bf28      	it	cs
 800f826:	4613      	movcs	r3, r2
 800f828:	b29b      	uxth	r3, r3
 800f82a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800f82c:	4293      	cmp	r3, r2
 800f82e:	bf28      	it	cs
 800f830:	4613      	movcs	r3, r2
 800f832:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800f834:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f838:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f83a:	4413      	add	r3, r2
 800f83c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800f840:	8a7a      	ldrh	r2, [r7, #18]
 800f842:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f844:	1ad3      	subs	r3, r2, r3
 800f846:	b29b      	uxth	r3, r3
 800f848:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800f84a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800f84c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f84e:	1ad3      	subs	r3, r2, r3
 800f850:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800f852:	8a7b      	ldrh	r3, [r7, #18]
 800f854:	2b00      	cmp	r3, #0
 800f856:	d00b      	beq.n	800f870 <tcp_write+0x1a0>
 800f858:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f85c:	88fb      	ldrh	r3, [r7, #6]
 800f85e:	429a      	cmp	r2, r3
 800f860:	d006      	beq.n	800f870 <tcp_write+0x1a0>
 800f862:	4b52      	ldr	r3, [pc, #328]	; (800f9ac <tcp_write+0x2dc>)
 800f864:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f868:	4956      	ldr	r1, [pc, #344]	; (800f9c4 <tcp_write+0x2f4>)
 800f86a:	4852      	ldr	r0, [pc, #328]	; (800f9b4 <tcp_write+0x2e4>)
 800f86c:	f006 fdd0 	bl	8016410 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800f870:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f874:	88fb      	ldrh	r3, [r7, #6]
 800f876:	429a      	cmp	r2, r3
 800f878:	f080 8167 	bcs.w	800fb4a <tcp_write+0x47a>
 800f87c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f87e:	2b00      	cmp	r3, #0
 800f880:	f000 8163 	beq.w	800fb4a <tcp_write+0x47a>
 800f884:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f886:	891b      	ldrh	r3, [r3, #8]
 800f888:	2b00      	cmp	r3, #0
 800f88a:	f000 815e 	beq.w	800fb4a <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800f88e:	88fa      	ldrh	r2, [r7, #6]
 800f890:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f894:	1ad2      	subs	r2, r2, r3
 800f896:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f898:	4293      	cmp	r3, r2
 800f89a:	bfa8      	it	ge
 800f89c:	4613      	movge	r3, r2
 800f89e:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800f8a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f8a2:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800f8a4:	797b      	ldrb	r3, [r7, #5]
 800f8a6:	f003 0301 	and.w	r3, r3, #1
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d027      	beq.n	800f8fe <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800f8ae:	f107 0012 	add.w	r0, r7, #18
 800f8b2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800f8b4:	8bf9      	ldrh	r1, [r7, #30]
 800f8b6:	2301      	movs	r3, #1
 800f8b8:	9302      	str	r3, [sp, #8]
 800f8ba:	797b      	ldrb	r3, [r7, #5]
 800f8bc:	9301      	str	r3, [sp, #4]
 800f8be:	68fb      	ldr	r3, [r7, #12]
 800f8c0:	9300      	str	r3, [sp, #0]
 800f8c2:	4603      	mov	r3, r0
 800f8c4:	2000      	movs	r0, #0
 800f8c6:	f7ff fe0f 	bl	800f4e8 <tcp_pbuf_prealloc>
 800f8ca:	6578      	str	r0, [r7, #84]	; 0x54
 800f8cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	f000 8225 	beq.w	800fd1e <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800f8d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f8d6:	6858      	ldr	r0, [r3, #4]
 800f8d8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f8dc:	68ba      	ldr	r2, [r7, #8]
 800f8de:	4413      	add	r3, r2
 800f8e0:	8bfa      	ldrh	r2, [r7, #30]
 800f8e2:	4619      	mov	r1, r3
 800f8e4:	f006 fd64 	bl	80163b0 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800f8e8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800f8ea:	f7fb f971 	bl	800abd0 <pbuf_clen>
 800f8ee:	4603      	mov	r3, r0
 800f8f0:	461a      	mov	r2, r3
 800f8f2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800f8f6:	4413      	add	r3, r2
 800f8f8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800f8fc:	e041      	b.n	800f982 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800f8fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f900:	685b      	ldr	r3, [r3, #4]
 800f902:	637b      	str	r3, [r7, #52]	; 0x34
 800f904:	e002      	b.n	800f90c <tcp_write+0x23c>
 800f906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	637b      	str	r3, [r7, #52]	; 0x34
 800f90c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	2b00      	cmp	r3, #0
 800f912:	d1f8      	bne.n	800f906 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800f914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f916:	7b1b      	ldrb	r3, [r3, #12]
 800f918:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d115      	bne.n	800f94c <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800f920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f922:	685b      	ldr	r3, [r3, #4]
 800f924:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f926:	8952      	ldrh	r2, [r2, #10]
 800f928:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800f92a:	68ba      	ldr	r2, [r7, #8]
 800f92c:	429a      	cmp	r2, r3
 800f92e:	d10d      	bne.n	800f94c <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800f930:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f934:	2b00      	cmp	r3, #0
 800f936:	d006      	beq.n	800f946 <tcp_write+0x276>
 800f938:	4b1c      	ldr	r3, [pc, #112]	; (800f9ac <tcp_write+0x2dc>)
 800f93a:	f240 2231 	movw	r2, #561	; 0x231
 800f93e:	4922      	ldr	r1, [pc, #136]	; (800f9c8 <tcp_write+0x2f8>)
 800f940:	481c      	ldr	r0, [pc, #112]	; (800f9b4 <tcp_write+0x2e4>)
 800f942:	f006 fd65 	bl	8016410 <iprintf>
          extendlen = seglen;
 800f946:	8bfb      	ldrh	r3, [r7, #30]
 800f948:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800f94a:	e01a      	b.n	800f982 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800f94c:	8bfb      	ldrh	r3, [r7, #30]
 800f94e:	2201      	movs	r2, #1
 800f950:	4619      	mov	r1, r3
 800f952:	2000      	movs	r0, #0
 800f954:	f7fa fdca 	bl	800a4ec <pbuf_alloc>
 800f958:	6578      	str	r0, [r7, #84]	; 0x54
 800f95a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	f000 81e0 	beq.w	800fd22 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800f962:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f966:	68ba      	ldr	r2, [r7, #8]
 800f968:	441a      	add	r2, r3
 800f96a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f96c:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800f96e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800f970:	f7fb f92e 	bl	800abd0 <pbuf_clen>
 800f974:	4603      	mov	r3, r0
 800f976:	461a      	mov	r2, r3
 800f978:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800f97c:	4413      	add	r3, r2
 800f97e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800f982:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f986:	8bfb      	ldrh	r3, [r7, #30]
 800f988:	4413      	add	r3, r2
 800f98a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800f98e:	e0dc      	b.n	800fb4a <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800f990:	68fb      	ldr	r3, [r7, #12]
 800f992:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f996:	2b00      	cmp	r3, #0
 800f998:	f000 80d7 	beq.w	800fb4a <tcp_write+0x47a>
 800f99c:	4b03      	ldr	r3, [pc, #12]	; (800f9ac <tcp_write+0x2dc>)
 800f99e:	f240 224a 	movw	r2, #586	; 0x24a
 800f9a2:	490a      	ldr	r1, [pc, #40]	; (800f9cc <tcp_write+0x2fc>)
 800f9a4:	4803      	ldr	r0, [pc, #12]	; (800f9b4 <tcp_write+0x2e4>)
 800f9a6:	f006 fd33 	bl	8016410 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800f9aa:	e0ce      	b.n	800fb4a <tcp_write+0x47a>
 800f9ac:	08019b0c 	.word	0x08019b0c
 800f9b0:	08019cac 	.word	0x08019cac
 800f9b4:	08019b60 	.word	0x08019b60
 800f9b8:	08019cc4 	.word	0x08019cc4
 800f9bc:	08019cf8 	.word	0x08019cf8
 800f9c0:	08019d10 	.word	0x08019d10
 800f9c4:	08019d30 	.word	0x08019d30
 800f9c8:	08019d50 	.word	0x08019d50
 800f9cc:	08019d7c 	.word	0x08019d7c
    struct pbuf *p;
    u16_t left = len - pos;
 800f9d0:	88fa      	ldrh	r2, [r7, #6]
 800f9d2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f9d6:	1ad3      	subs	r3, r2, r3
 800f9d8:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800f9da:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800f9de:	b29b      	uxth	r3, r3
 800f9e0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f9e2:	1ad3      	subs	r3, r2, r3
 800f9e4:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800f9e6:	8b7a      	ldrh	r2, [r7, #26]
 800f9e8:	8bbb      	ldrh	r3, [r7, #28]
 800f9ea:	4293      	cmp	r3, r2
 800f9ec:	bf28      	it	cs
 800f9ee:	4613      	movcs	r3, r2
 800f9f0:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800f9f2:	797b      	ldrb	r3, [r7, #5]
 800f9f4:	f003 0301 	and.w	r3, r3, #1
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d036      	beq.n	800fa6a <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800f9fc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800fa00:	b29a      	uxth	r2, r3
 800fa02:	8b3b      	ldrh	r3, [r7, #24]
 800fa04:	4413      	add	r3, r2
 800fa06:	b299      	uxth	r1, r3
 800fa08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	bf0c      	ite	eq
 800fa0e:	2301      	moveq	r3, #1
 800fa10:	2300      	movne	r3, #0
 800fa12:	b2db      	uxtb	r3, r3
 800fa14:	f107 0012 	add.w	r0, r7, #18
 800fa18:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800fa1a:	9302      	str	r3, [sp, #8]
 800fa1c:	797b      	ldrb	r3, [r7, #5]
 800fa1e:	9301      	str	r3, [sp, #4]
 800fa20:	68fb      	ldr	r3, [r7, #12]
 800fa22:	9300      	str	r3, [sp, #0]
 800fa24:	4603      	mov	r3, r0
 800fa26:	2036      	movs	r0, #54	; 0x36
 800fa28:	f7ff fd5e 	bl	800f4e8 <tcp_pbuf_prealloc>
 800fa2c:	6338      	str	r0, [r7, #48]	; 0x30
 800fa2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	f000 8178 	beq.w	800fd26 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800fa36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa38:	895b      	ldrh	r3, [r3, #10]
 800fa3a:	8b3a      	ldrh	r2, [r7, #24]
 800fa3c:	429a      	cmp	r2, r3
 800fa3e:	d906      	bls.n	800fa4e <tcp_write+0x37e>
 800fa40:	4b8c      	ldr	r3, [pc, #560]	; (800fc74 <tcp_write+0x5a4>)
 800fa42:	f240 2266 	movw	r2, #614	; 0x266
 800fa46:	498c      	ldr	r1, [pc, #560]	; (800fc78 <tcp_write+0x5a8>)
 800fa48:	488c      	ldr	r0, [pc, #560]	; (800fc7c <tcp_write+0x5ac>)
 800fa4a:	f006 fce1 	bl	8016410 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800fa4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa50:	685a      	ldr	r2, [r3, #4]
 800fa52:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800fa56:	18d0      	adds	r0, r2, r3
 800fa58:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fa5c:	68ba      	ldr	r2, [r7, #8]
 800fa5e:	4413      	add	r3, r2
 800fa60:	8b3a      	ldrh	r2, [r7, #24]
 800fa62:	4619      	mov	r1, r3
 800fa64:	f006 fca4 	bl	80163b0 <memcpy>
 800fa68:	e02f      	b.n	800faca <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800fa6a:	8a7b      	ldrh	r3, [r7, #18]
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d006      	beq.n	800fa7e <tcp_write+0x3ae>
 800fa70:	4b80      	ldr	r3, [pc, #512]	; (800fc74 <tcp_write+0x5a4>)
 800fa72:	f240 2271 	movw	r2, #625	; 0x271
 800fa76:	4982      	ldr	r1, [pc, #520]	; (800fc80 <tcp_write+0x5b0>)
 800fa78:	4880      	ldr	r0, [pc, #512]	; (800fc7c <tcp_write+0x5ac>)
 800fa7a:	f006 fcc9 	bl	8016410 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800fa7e:	8b3b      	ldrh	r3, [r7, #24]
 800fa80:	2201      	movs	r2, #1
 800fa82:	4619      	mov	r1, r3
 800fa84:	2036      	movs	r0, #54	; 0x36
 800fa86:	f7fa fd31 	bl	800a4ec <pbuf_alloc>
 800fa8a:	6178      	str	r0, [r7, #20]
 800fa8c:	697b      	ldr	r3, [r7, #20]
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	f000 814b 	beq.w	800fd2a <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800fa94:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fa98:	68ba      	ldr	r2, [r7, #8]
 800fa9a:	441a      	add	r2, r3
 800fa9c:	697b      	ldr	r3, [r7, #20]
 800fa9e:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800faa0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800faa4:	b29b      	uxth	r3, r3
 800faa6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800faaa:	4619      	mov	r1, r3
 800faac:	2036      	movs	r0, #54	; 0x36
 800faae:	f7fa fd1d 	bl	800a4ec <pbuf_alloc>
 800fab2:	6338      	str	r0, [r7, #48]	; 0x30
 800fab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d103      	bne.n	800fac2 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800faba:	6978      	ldr	r0, [r7, #20]
 800fabc:	f7fa fffa 	bl	800aab4 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800fac0:	e136      	b.n	800fd30 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800fac2:	6979      	ldr	r1, [r7, #20]
 800fac4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fac6:	f7fb f8c3 	bl	800ac50 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800faca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800facc:	f7fb f880 	bl	800abd0 <pbuf_clen>
 800fad0:	4603      	mov	r3, r0
 800fad2:	461a      	mov	r2, r3
 800fad4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800fad8:	4413      	add	r3, r2
 800fada:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800fade:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800fae2:	2b09      	cmp	r3, #9
 800fae4:	d903      	bls.n	800faee <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800fae6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fae8:	f7fa ffe4 	bl	800aab4 <pbuf_free>
      goto memerr;
 800faec:	e120      	b.n	800fd30 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800faee:	68fb      	ldr	r3, [r7, #12]
 800faf0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800faf2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800faf6:	441a      	add	r2, r3
 800faf8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fafc:	9300      	str	r3, [sp, #0]
 800fafe:	4613      	mov	r3, r2
 800fb00:	2200      	movs	r2, #0
 800fb02:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fb04:	68f8      	ldr	r0, [r7, #12]
 800fb06:	f7ff fc51 	bl	800f3ac <tcp_create_segment>
 800fb0a:	64f8      	str	r0, [r7, #76]	; 0x4c
 800fb0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	f000 810d 	beq.w	800fd2e <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800fb14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d102      	bne.n	800fb20 <tcp_write+0x450>
      queue = seg;
 800fb1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fb1c:	647b      	str	r3, [r7, #68]	; 0x44
 800fb1e:	e00c      	b.n	800fb3a <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800fb20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d106      	bne.n	800fb34 <tcp_write+0x464>
 800fb26:	4b53      	ldr	r3, [pc, #332]	; (800fc74 <tcp_write+0x5a4>)
 800fb28:	f240 22ab 	movw	r2, #683	; 0x2ab
 800fb2c:	4955      	ldr	r1, [pc, #340]	; (800fc84 <tcp_write+0x5b4>)
 800fb2e:	4853      	ldr	r0, [pc, #332]	; (800fc7c <tcp_write+0x5ac>)
 800fb30:	f006 fc6e 	bl	8016410 <iprintf>
      prev_seg->next = seg;
 800fb34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fb36:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fb38:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800fb3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fb3c:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800fb3e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800fb42:	8b3b      	ldrh	r3, [r7, #24]
 800fb44:	4413      	add	r3, r2
 800fb46:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800fb4a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800fb4e:	88fb      	ldrh	r3, [r7, #6]
 800fb50:	429a      	cmp	r2, r3
 800fb52:	f4ff af3d 	bcc.w	800f9d0 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800fb56:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d02c      	beq.n	800fbb6 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800fb5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fb5e:	685b      	ldr	r3, [r3, #4]
 800fb60:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fb62:	e01e      	b.n	800fba2 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 800fb64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb66:	891a      	ldrh	r2, [r3, #8]
 800fb68:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800fb6a:	4413      	add	r3, r2
 800fb6c:	b29a      	uxth	r2, r3
 800fb6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb70:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800fb72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d110      	bne.n	800fb9c <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800fb7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb7c:	685b      	ldr	r3, [r3, #4]
 800fb7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fb80:	8952      	ldrh	r2, [r2, #10]
 800fb82:	4413      	add	r3, r2
 800fb84:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800fb86:	68b9      	ldr	r1, [r7, #8]
 800fb88:	4618      	mov	r0, r3
 800fb8a:	f006 fc11 	bl	80163b0 <memcpy>
        p->len += oversize_used;
 800fb8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb90:	895a      	ldrh	r2, [r3, #10]
 800fb92:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800fb94:	4413      	add	r3, r2
 800fb96:	b29a      	uxth	r2, r3
 800fb98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb9a:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800fb9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb9e:	681b      	ldr	r3, [r3, #0]
 800fba0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d1dd      	bne.n	800fb64 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 800fba8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fbaa:	891a      	ldrh	r2, [r3, #8]
 800fbac:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800fbae:	4413      	add	r3, r2
 800fbb0:	b29a      	uxth	r2, r3
 800fbb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fbb4:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800fbb6:	8a7a      	ldrh	r2, [r7, #18]
 800fbb8:	68fb      	ldr	r3, [r7, #12]
 800fbba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800fbbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d018      	beq.n	800fbf6 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800fbc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	d106      	bne.n	800fbd8 <tcp_write+0x508>
 800fbca:	4b2a      	ldr	r3, [pc, #168]	; (800fc74 <tcp_write+0x5a4>)
 800fbcc:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800fbd0:	492d      	ldr	r1, [pc, #180]	; (800fc88 <tcp_write+0x5b8>)
 800fbd2:	482a      	ldr	r0, [pc, #168]	; (800fc7c <tcp_write+0x5ac>)
 800fbd4:	f006 fc1c 	bl	8016410 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800fbd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fbda:	685b      	ldr	r3, [r3, #4]
 800fbdc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fbde:	4618      	mov	r0, r3
 800fbe0:	f7fb f836 	bl	800ac50 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800fbe4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fbe6:	891a      	ldrh	r2, [r3, #8]
 800fbe8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fbea:	891b      	ldrh	r3, [r3, #8]
 800fbec:	4413      	add	r3, r2
 800fbee:	b29a      	uxth	r2, r3
 800fbf0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fbf2:	811a      	strh	r2, [r3, #8]
 800fbf4:	e037      	b.n	800fc66 <tcp_write+0x596>
  } else if (extendlen > 0) {
 800fbf6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d034      	beq.n	800fc66 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800fbfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d003      	beq.n	800fc0a <tcp_write+0x53a>
 800fc02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc04:	685b      	ldr	r3, [r3, #4]
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d106      	bne.n	800fc18 <tcp_write+0x548>
 800fc0a:	4b1a      	ldr	r3, [pc, #104]	; (800fc74 <tcp_write+0x5a4>)
 800fc0c:	f240 22e6 	movw	r2, #742	; 0x2e6
 800fc10:	491e      	ldr	r1, [pc, #120]	; (800fc8c <tcp_write+0x5bc>)
 800fc12:	481a      	ldr	r0, [pc, #104]	; (800fc7c <tcp_write+0x5ac>)
 800fc14:	f006 fbfc 	bl	8016410 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800fc18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc1a:	685b      	ldr	r3, [r3, #4]
 800fc1c:	62bb      	str	r3, [r7, #40]	; 0x28
 800fc1e:	e009      	b.n	800fc34 <tcp_write+0x564>
      p->tot_len += extendlen;
 800fc20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc22:	891a      	ldrh	r2, [r3, #8]
 800fc24:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fc26:	4413      	add	r3, r2
 800fc28:	b29a      	uxth	r2, r3
 800fc2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc2c:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800fc2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc30:	681b      	ldr	r3, [r3, #0]
 800fc32:	62bb      	str	r3, [r7, #40]	; 0x28
 800fc34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc36:	681b      	ldr	r3, [r3, #0]
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d1f1      	bne.n	800fc20 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 800fc3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc3e:	891a      	ldrh	r2, [r3, #8]
 800fc40:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fc42:	4413      	add	r3, r2
 800fc44:	b29a      	uxth	r2, r3
 800fc46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc48:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800fc4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc4c:	895a      	ldrh	r2, [r3, #10]
 800fc4e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fc50:	4413      	add	r3, r2
 800fc52:	b29a      	uxth	r2, r3
 800fc54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc56:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800fc58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc5a:	891a      	ldrh	r2, [r3, #8]
 800fc5c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fc5e:	4413      	add	r3, r2
 800fc60:	b29a      	uxth	r2, r3
 800fc62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc64:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800fc66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d111      	bne.n	800fc90 <tcp_write+0x5c0>
    pcb->unsent = queue;
 800fc6c:	68fb      	ldr	r3, [r7, #12]
 800fc6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fc70:	66da      	str	r2, [r3, #108]	; 0x6c
 800fc72:	e010      	b.n	800fc96 <tcp_write+0x5c6>
 800fc74:	08019b0c 	.word	0x08019b0c
 800fc78:	08019dac 	.word	0x08019dac
 800fc7c:	08019b60 	.word	0x08019b60
 800fc80:	08019dec 	.word	0x08019dec
 800fc84:	08019dfc 	.word	0x08019dfc
 800fc88:	08019e10 	.word	0x08019e10
 800fc8c:	08019e48 	.word	0x08019e48
  } else {
    last_unsent->next = queue;
 800fc90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fc94:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800fc96:	68fb      	ldr	r3, [r7, #12]
 800fc98:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800fc9a:	88fb      	ldrh	r3, [r7, #6]
 800fc9c:	441a      	add	r2, r3
 800fc9e:	68fb      	ldr	r3, [r7, #12]
 800fca0:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 800fca2:	68fb      	ldr	r3, [r7, #12]
 800fca4:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800fca8:	88fb      	ldrh	r3, [r7, #6]
 800fcaa:	1ad3      	subs	r3, r2, r3
 800fcac:	b29a      	uxth	r2, r3
 800fcae:	68fb      	ldr	r3, [r7, #12]
 800fcb0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800fcba:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800fcbe:	68fb      	ldr	r3, [r7, #12]
 800fcc0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d00e      	beq.n	800fce6 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 800fcc8:	68fb      	ldr	r3, [r7, #12]
 800fcca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d10a      	bne.n	800fce6 <tcp_write+0x616>
 800fcd0:	68fb      	ldr	r3, [r7, #12]
 800fcd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	d106      	bne.n	800fce6 <tcp_write+0x616>
 800fcd8:	4b2c      	ldr	r3, [pc, #176]	; (800fd8c <tcp_write+0x6bc>)
 800fcda:	f240 3212 	movw	r2, #786	; 0x312
 800fcde:	492c      	ldr	r1, [pc, #176]	; (800fd90 <tcp_write+0x6c0>)
 800fce0:	482c      	ldr	r0, [pc, #176]	; (800fd94 <tcp_write+0x6c4>)
 800fce2:	f006 fb95 	bl	8016410 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800fce6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d016      	beq.n	800fd1a <tcp_write+0x64a>
 800fcec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fcee:	68db      	ldr	r3, [r3, #12]
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d012      	beq.n	800fd1a <tcp_write+0x64a>
 800fcf4:	797b      	ldrb	r3, [r7, #5]
 800fcf6:	f003 0302 	and.w	r3, r3, #2
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d10d      	bne.n	800fd1a <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800fcfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd00:	68db      	ldr	r3, [r3, #12]
 800fd02:	899b      	ldrh	r3, [r3, #12]
 800fd04:	b29c      	uxth	r4, r3
 800fd06:	2008      	movs	r0, #8
 800fd08:	f7f9 faf4 	bl	80092f4 <lwip_htons>
 800fd0c:	4603      	mov	r3, r0
 800fd0e:	461a      	mov	r2, r3
 800fd10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd12:	68db      	ldr	r3, [r3, #12]
 800fd14:	4322      	orrs	r2, r4
 800fd16:	b292      	uxth	r2, r2
 800fd18:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800fd1a:	2300      	movs	r3, #0
 800fd1c:	e031      	b.n	800fd82 <tcp_write+0x6b2>
          goto memerr;
 800fd1e:	bf00      	nop
 800fd20:	e006      	b.n	800fd30 <tcp_write+0x660>
            goto memerr;
 800fd22:	bf00      	nop
 800fd24:	e004      	b.n	800fd30 <tcp_write+0x660>
        goto memerr;
 800fd26:	bf00      	nop
 800fd28:	e002      	b.n	800fd30 <tcp_write+0x660>
        goto memerr;
 800fd2a:	bf00      	nop
 800fd2c:	e000      	b.n	800fd30 <tcp_write+0x660>
      goto memerr;
 800fd2e:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800fd30:	68fb      	ldr	r3, [r7, #12]
 800fd32:	8b5b      	ldrh	r3, [r3, #26]
 800fd34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fd38:	b29a      	uxth	r2, r3
 800fd3a:	68fb      	ldr	r3, [r7, #12]
 800fd3c:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800fd3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	d002      	beq.n	800fd4a <tcp_write+0x67a>
    pbuf_free(concat_p);
 800fd44:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800fd46:	f7fa feb5 	bl	800aab4 <pbuf_free>
  }
  if (queue != NULL) {
 800fd4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d002      	beq.n	800fd56 <tcp_write+0x686>
    tcp_segs_free(queue);
 800fd50:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800fd52:	f7fc fb83 	bl	800c45c <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d00e      	beq.n	800fd7e <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d10a      	bne.n	800fd7e <tcp_write+0x6ae>
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d106      	bne.n	800fd7e <tcp_write+0x6ae>
 800fd70:	4b06      	ldr	r3, [pc, #24]	; (800fd8c <tcp_write+0x6bc>)
 800fd72:	f240 3227 	movw	r2, #807	; 0x327
 800fd76:	4906      	ldr	r1, [pc, #24]	; (800fd90 <tcp_write+0x6c0>)
 800fd78:	4806      	ldr	r0, [pc, #24]	; (800fd94 <tcp_write+0x6c4>)
 800fd7a:	f006 fb49 	bl	8016410 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800fd7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800fd82:	4618      	mov	r0, r3
 800fd84:	375c      	adds	r7, #92	; 0x5c
 800fd86:	46bd      	mov	sp, r7
 800fd88:	bd90      	pop	{r4, r7, pc}
 800fd8a:	bf00      	nop
 800fd8c:	08019b0c 	.word	0x08019b0c
 800fd90:	08019e80 	.word	0x08019e80
 800fd94:	08019b60 	.word	0x08019b60

0800fd98 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800fd98:	b590      	push	{r4, r7, lr}
 800fd9a:	b08b      	sub	sp, #44	; 0x2c
 800fd9c:	af02      	add	r7, sp, #8
 800fd9e:	6078      	str	r0, [r7, #4]
 800fda0:	460b      	mov	r3, r1
 800fda2:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800fda4:	2300      	movs	r3, #0
 800fda6:	61fb      	str	r3, [r7, #28]
 800fda8:	2300      	movs	r3, #0
 800fdaa:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800fdac:	2300      	movs	r3, #0
 800fdae:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d106      	bne.n	800fdc4 <tcp_split_unsent_seg+0x2c>
 800fdb6:	4b95      	ldr	r3, [pc, #596]	; (801000c <tcp_split_unsent_seg+0x274>)
 800fdb8:	f240 324b 	movw	r2, #843	; 0x34b
 800fdbc:	4994      	ldr	r1, [pc, #592]	; (8010010 <tcp_split_unsent_seg+0x278>)
 800fdbe:	4895      	ldr	r0, [pc, #596]	; (8010014 <tcp_split_unsent_seg+0x27c>)
 800fdc0:	f006 fb26 	bl	8016410 <iprintf>

  useg = pcb->unsent;
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fdc8:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800fdca:	697b      	ldr	r3, [r7, #20]
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	d102      	bne.n	800fdd6 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800fdd0:	f04f 33ff 	mov.w	r3, #4294967295
 800fdd4:	e116      	b.n	8010004 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800fdd6:	887b      	ldrh	r3, [r7, #2]
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d109      	bne.n	800fdf0 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800fddc:	4b8b      	ldr	r3, [pc, #556]	; (801000c <tcp_split_unsent_seg+0x274>)
 800fdde:	f240 3253 	movw	r2, #851	; 0x353
 800fde2:	498d      	ldr	r1, [pc, #564]	; (8010018 <tcp_split_unsent_seg+0x280>)
 800fde4:	488b      	ldr	r0, [pc, #556]	; (8010014 <tcp_split_unsent_seg+0x27c>)
 800fde6:	f006 fb13 	bl	8016410 <iprintf>
    return ERR_VAL;
 800fdea:	f06f 0305 	mvn.w	r3, #5
 800fdee:	e109      	b.n	8010004 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800fdf0:	697b      	ldr	r3, [r7, #20]
 800fdf2:	891b      	ldrh	r3, [r3, #8]
 800fdf4:	887a      	ldrh	r2, [r7, #2]
 800fdf6:	429a      	cmp	r2, r3
 800fdf8:	d301      	bcc.n	800fdfe <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800fdfa:	2300      	movs	r3, #0
 800fdfc:	e102      	b.n	8010004 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fe02:	887a      	ldrh	r2, [r7, #2]
 800fe04:	429a      	cmp	r2, r3
 800fe06:	d906      	bls.n	800fe16 <tcp_split_unsent_seg+0x7e>
 800fe08:	4b80      	ldr	r3, [pc, #512]	; (801000c <tcp_split_unsent_seg+0x274>)
 800fe0a:	f240 325b 	movw	r2, #859	; 0x35b
 800fe0e:	4983      	ldr	r1, [pc, #524]	; (801001c <tcp_split_unsent_seg+0x284>)
 800fe10:	4880      	ldr	r0, [pc, #512]	; (8010014 <tcp_split_unsent_seg+0x27c>)
 800fe12:	f006 fafd 	bl	8016410 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800fe16:	697b      	ldr	r3, [r7, #20]
 800fe18:	891b      	ldrh	r3, [r3, #8]
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d106      	bne.n	800fe2c <tcp_split_unsent_seg+0x94>
 800fe1e:	4b7b      	ldr	r3, [pc, #492]	; (801000c <tcp_split_unsent_seg+0x274>)
 800fe20:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800fe24:	497e      	ldr	r1, [pc, #504]	; (8010020 <tcp_split_unsent_seg+0x288>)
 800fe26:	487b      	ldr	r0, [pc, #492]	; (8010014 <tcp_split_unsent_seg+0x27c>)
 800fe28:	f006 faf2 	bl	8016410 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800fe2c:	697b      	ldr	r3, [r7, #20]
 800fe2e:	7a9b      	ldrb	r3, [r3, #10]
 800fe30:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800fe32:	7bfb      	ldrb	r3, [r7, #15]
 800fe34:	009b      	lsls	r3, r3, #2
 800fe36:	b2db      	uxtb	r3, r3
 800fe38:	f003 0304 	and.w	r3, r3, #4
 800fe3c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800fe3e:	697b      	ldr	r3, [r7, #20]
 800fe40:	891a      	ldrh	r2, [r3, #8]
 800fe42:	887b      	ldrh	r3, [r7, #2]
 800fe44:	1ad3      	subs	r3, r2, r3
 800fe46:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800fe48:	7bbb      	ldrb	r3, [r7, #14]
 800fe4a:	b29a      	uxth	r2, r3
 800fe4c:	89bb      	ldrh	r3, [r7, #12]
 800fe4e:	4413      	add	r3, r2
 800fe50:	b29b      	uxth	r3, r3
 800fe52:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fe56:	4619      	mov	r1, r3
 800fe58:	2036      	movs	r0, #54	; 0x36
 800fe5a:	f7fa fb47 	bl	800a4ec <pbuf_alloc>
 800fe5e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800fe60:	693b      	ldr	r3, [r7, #16]
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	f000 80b7 	beq.w	800ffd6 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800fe68:	697b      	ldr	r3, [r7, #20]
 800fe6a:	685b      	ldr	r3, [r3, #4]
 800fe6c:	891a      	ldrh	r2, [r3, #8]
 800fe6e:	697b      	ldr	r3, [r7, #20]
 800fe70:	891b      	ldrh	r3, [r3, #8]
 800fe72:	1ad3      	subs	r3, r2, r3
 800fe74:	b29a      	uxth	r2, r3
 800fe76:	887b      	ldrh	r3, [r7, #2]
 800fe78:	4413      	add	r3, r2
 800fe7a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800fe7c:	697b      	ldr	r3, [r7, #20]
 800fe7e:	6858      	ldr	r0, [r3, #4]
 800fe80:	693b      	ldr	r3, [r7, #16]
 800fe82:	685a      	ldr	r2, [r3, #4]
 800fe84:	7bbb      	ldrb	r3, [r7, #14]
 800fe86:	18d1      	adds	r1, r2, r3
 800fe88:	897b      	ldrh	r3, [r7, #10]
 800fe8a:	89ba      	ldrh	r2, [r7, #12]
 800fe8c:	f7fb f818 	bl	800aec0 <pbuf_copy_partial>
 800fe90:	4603      	mov	r3, r0
 800fe92:	461a      	mov	r2, r3
 800fe94:	89bb      	ldrh	r3, [r7, #12]
 800fe96:	4293      	cmp	r3, r2
 800fe98:	f040 809f 	bne.w	800ffda <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800fe9c:	697b      	ldr	r3, [r7, #20]
 800fe9e:	68db      	ldr	r3, [r3, #12]
 800fea0:	899b      	ldrh	r3, [r3, #12]
 800fea2:	b29b      	uxth	r3, r3
 800fea4:	4618      	mov	r0, r3
 800fea6:	f7f9 fa25 	bl	80092f4 <lwip_htons>
 800feaa:	4603      	mov	r3, r0
 800feac:	b2db      	uxtb	r3, r3
 800feae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800feb2:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800feb4:	2300      	movs	r3, #0
 800feb6:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800feb8:	7efb      	ldrb	r3, [r7, #27]
 800feba:	f003 0308 	and.w	r3, r3, #8
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d007      	beq.n	800fed2 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800fec2:	7efb      	ldrb	r3, [r7, #27]
 800fec4:	f023 0308 	bic.w	r3, r3, #8
 800fec8:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800feca:	7ebb      	ldrb	r3, [r7, #26]
 800fecc:	f043 0308 	orr.w	r3, r3, #8
 800fed0:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800fed2:	7efb      	ldrb	r3, [r7, #27]
 800fed4:	f003 0301 	and.w	r3, r3, #1
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d007      	beq.n	800feec <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800fedc:	7efb      	ldrb	r3, [r7, #27]
 800fede:	f023 0301 	bic.w	r3, r3, #1
 800fee2:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800fee4:	7ebb      	ldrb	r3, [r7, #26]
 800fee6:	f043 0301 	orr.w	r3, r3, #1
 800feea:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800feec:	697b      	ldr	r3, [r7, #20]
 800feee:	68db      	ldr	r3, [r3, #12]
 800fef0:	685b      	ldr	r3, [r3, #4]
 800fef2:	4618      	mov	r0, r3
 800fef4:	f7f9 fa13 	bl	800931e <lwip_htonl>
 800fef8:	4602      	mov	r2, r0
 800fefa:	887b      	ldrh	r3, [r7, #2]
 800fefc:	18d1      	adds	r1, r2, r3
 800fefe:	7eba      	ldrb	r2, [r7, #26]
 800ff00:	7bfb      	ldrb	r3, [r7, #15]
 800ff02:	9300      	str	r3, [sp, #0]
 800ff04:	460b      	mov	r3, r1
 800ff06:	6939      	ldr	r1, [r7, #16]
 800ff08:	6878      	ldr	r0, [r7, #4]
 800ff0a:	f7ff fa4f 	bl	800f3ac <tcp_create_segment>
 800ff0e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800ff10:	69fb      	ldr	r3, [r7, #28]
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d063      	beq.n	800ffde <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800ff16:	697b      	ldr	r3, [r7, #20]
 800ff18:	685b      	ldr	r3, [r3, #4]
 800ff1a:	4618      	mov	r0, r3
 800ff1c:	f7fa fe58 	bl	800abd0 <pbuf_clen>
 800ff20:	4603      	mov	r3, r0
 800ff22:	461a      	mov	r2, r3
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ff2a:	1a9b      	subs	r3, r3, r2
 800ff2c:	b29a      	uxth	r2, r3
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800ff34:	697b      	ldr	r3, [r7, #20]
 800ff36:	6858      	ldr	r0, [r3, #4]
 800ff38:	697b      	ldr	r3, [r7, #20]
 800ff3a:	685b      	ldr	r3, [r3, #4]
 800ff3c:	891a      	ldrh	r2, [r3, #8]
 800ff3e:	89bb      	ldrh	r3, [r7, #12]
 800ff40:	1ad3      	subs	r3, r2, r3
 800ff42:	b29b      	uxth	r3, r3
 800ff44:	4619      	mov	r1, r3
 800ff46:	f7fa fc2f 	bl	800a7a8 <pbuf_realloc>
  useg->len -= remainder;
 800ff4a:	697b      	ldr	r3, [r7, #20]
 800ff4c:	891a      	ldrh	r2, [r3, #8]
 800ff4e:	89bb      	ldrh	r3, [r7, #12]
 800ff50:	1ad3      	subs	r3, r2, r3
 800ff52:	b29a      	uxth	r2, r3
 800ff54:	697b      	ldr	r3, [r7, #20]
 800ff56:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800ff58:	697b      	ldr	r3, [r7, #20]
 800ff5a:	68db      	ldr	r3, [r3, #12]
 800ff5c:	899b      	ldrh	r3, [r3, #12]
 800ff5e:	b29c      	uxth	r4, r3
 800ff60:	7efb      	ldrb	r3, [r7, #27]
 800ff62:	b29b      	uxth	r3, r3
 800ff64:	4618      	mov	r0, r3
 800ff66:	f7f9 f9c5 	bl	80092f4 <lwip_htons>
 800ff6a:	4603      	mov	r3, r0
 800ff6c:	461a      	mov	r2, r3
 800ff6e:	697b      	ldr	r3, [r7, #20]
 800ff70:	68db      	ldr	r3, [r3, #12]
 800ff72:	4322      	orrs	r2, r4
 800ff74:	b292      	uxth	r2, r2
 800ff76:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800ff78:	697b      	ldr	r3, [r7, #20]
 800ff7a:	685b      	ldr	r3, [r3, #4]
 800ff7c:	4618      	mov	r0, r3
 800ff7e:	f7fa fe27 	bl	800abd0 <pbuf_clen>
 800ff82:	4603      	mov	r3, r0
 800ff84:	461a      	mov	r2, r3
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ff8c:	4413      	add	r3, r2
 800ff8e:	b29a      	uxth	r2, r3
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800ff96:	69fb      	ldr	r3, [r7, #28]
 800ff98:	685b      	ldr	r3, [r3, #4]
 800ff9a:	4618      	mov	r0, r3
 800ff9c:	f7fa fe18 	bl	800abd0 <pbuf_clen>
 800ffa0:	4603      	mov	r3, r0
 800ffa2:	461a      	mov	r2, r3
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ffaa:	4413      	add	r3, r2
 800ffac:	b29a      	uxth	r2, r3
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800ffb4:	697b      	ldr	r3, [r7, #20]
 800ffb6:	681a      	ldr	r2, [r3, #0]
 800ffb8:	69fb      	ldr	r3, [r7, #28]
 800ffba:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800ffbc:	697b      	ldr	r3, [r7, #20]
 800ffbe:	69fa      	ldr	r2, [r7, #28]
 800ffc0:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800ffc2:	69fb      	ldr	r3, [r7, #28]
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d103      	bne.n	800ffd2 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	2200      	movs	r2, #0
 800ffce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800ffd2:	2300      	movs	r3, #0
 800ffd4:	e016      	b.n	8010004 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800ffd6:	bf00      	nop
 800ffd8:	e002      	b.n	800ffe0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800ffda:	bf00      	nop
 800ffdc:	e000      	b.n	800ffe0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800ffde:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800ffe0:	69fb      	ldr	r3, [r7, #28]
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d006      	beq.n	800fff4 <tcp_split_unsent_seg+0x25c>
 800ffe6:	4b09      	ldr	r3, [pc, #36]	; (801000c <tcp_split_unsent_seg+0x274>)
 800ffe8:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800ffec:	490d      	ldr	r1, [pc, #52]	; (8010024 <tcp_split_unsent_seg+0x28c>)
 800ffee:	4809      	ldr	r0, [pc, #36]	; (8010014 <tcp_split_unsent_seg+0x27c>)
 800fff0:	f006 fa0e 	bl	8016410 <iprintf>
  if (p != NULL) {
 800fff4:	693b      	ldr	r3, [r7, #16]
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d002      	beq.n	8010000 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800fffa:	6938      	ldr	r0, [r7, #16]
 800fffc:	f7fa fd5a 	bl	800aab4 <pbuf_free>
  }

  return ERR_MEM;
 8010000:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010004:	4618      	mov	r0, r3
 8010006:	3724      	adds	r7, #36	; 0x24
 8010008:	46bd      	mov	sp, r7
 801000a:	bd90      	pop	{r4, r7, pc}
 801000c:	08019b0c 	.word	0x08019b0c
 8010010:	08019ea0 	.word	0x08019ea0
 8010014:	08019b60 	.word	0x08019b60
 8010018:	08019ec4 	.word	0x08019ec4
 801001c:	08019ee8 	.word	0x08019ee8
 8010020:	08019ef8 	.word	0x08019ef8
 8010024:	08019f08 	.word	0x08019f08

08010028 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8010028:	b590      	push	{r4, r7, lr}
 801002a:	b085      	sub	sp, #20
 801002c:	af00      	add	r7, sp, #0
 801002e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	2b00      	cmp	r3, #0
 8010034:	d106      	bne.n	8010044 <tcp_send_fin+0x1c>
 8010036:	4b21      	ldr	r3, [pc, #132]	; (80100bc <tcp_send_fin+0x94>)
 8010038:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801003c:	4920      	ldr	r1, [pc, #128]	; (80100c0 <tcp_send_fin+0x98>)
 801003e:	4821      	ldr	r0, [pc, #132]	; (80100c4 <tcp_send_fin+0x9c>)
 8010040:	f006 f9e6 	bl	8016410 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010048:	2b00      	cmp	r3, #0
 801004a:	d02e      	beq.n	80100aa <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010050:	60fb      	str	r3, [r7, #12]
 8010052:	e002      	b.n	801005a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8010054:	68fb      	ldr	r3, [r7, #12]
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	2b00      	cmp	r3, #0
 8010060:	d1f8      	bne.n	8010054 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8010062:	68fb      	ldr	r3, [r7, #12]
 8010064:	68db      	ldr	r3, [r3, #12]
 8010066:	899b      	ldrh	r3, [r3, #12]
 8010068:	b29b      	uxth	r3, r3
 801006a:	4618      	mov	r0, r3
 801006c:	f7f9 f942 	bl	80092f4 <lwip_htons>
 8010070:	4603      	mov	r3, r0
 8010072:	b2db      	uxtb	r3, r3
 8010074:	f003 0307 	and.w	r3, r3, #7
 8010078:	2b00      	cmp	r3, #0
 801007a:	d116      	bne.n	80100aa <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801007c:	68fb      	ldr	r3, [r7, #12]
 801007e:	68db      	ldr	r3, [r3, #12]
 8010080:	899b      	ldrh	r3, [r3, #12]
 8010082:	b29c      	uxth	r4, r3
 8010084:	2001      	movs	r0, #1
 8010086:	f7f9 f935 	bl	80092f4 <lwip_htons>
 801008a:	4603      	mov	r3, r0
 801008c:	461a      	mov	r2, r3
 801008e:	68fb      	ldr	r3, [r7, #12]
 8010090:	68db      	ldr	r3, [r3, #12]
 8010092:	4322      	orrs	r2, r4
 8010094:	b292      	uxth	r2, r2
 8010096:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	8b5b      	ldrh	r3, [r3, #26]
 801009c:	f043 0320 	orr.w	r3, r3, #32
 80100a0:	b29a      	uxth	r2, r3
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80100a6:	2300      	movs	r3, #0
 80100a8:	e004      	b.n	80100b4 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80100aa:	2101      	movs	r1, #1
 80100ac:	6878      	ldr	r0, [r7, #4]
 80100ae:	f000 f80b 	bl	80100c8 <tcp_enqueue_flags>
 80100b2:	4603      	mov	r3, r0
}
 80100b4:	4618      	mov	r0, r3
 80100b6:	3714      	adds	r7, #20
 80100b8:	46bd      	mov	sp, r7
 80100ba:	bd90      	pop	{r4, r7, pc}
 80100bc:	08019b0c 	.word	0x08019b0c
 80100c0:	08019f14 	.word	0x08019f14
 80100c4:	08019b60 	.word	0x08019b60

080100c8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80100c8:	b580      	push	{r7, lr}
 80100ca:	b08a      	sub	sp, #40	; 0x28
 80100cc:	af02      	add	r7, sp, #8
 80100ce:	6078      	str	r0, [r7, #4]
 80100d0:	460b      	mov	r3, r1
 80100d2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80100d4:	2300      	movs	r3, #0
 80100d6:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80100d8:	2300      	movs	r3, #0
 80100da:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80100dc:	78fb      	ldrb	r3, [r7, #3]
 80100de:	f003 0303 	and.w	r3, r3, #3
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d106      	bne.n	80100f4 <tcp_enqueue_flags+0x2c>
 80100e6:	4b67      	ldr	r3, [pc, #412]	; (8010284 <tcp_enqueue_flags+0x1bc>)
 80100e8:	f240 4211 	movw	r2, #1041	; 0x411
 80100ec:	4966      	ldr	r1, [pc, #408]	; (8010288 <tcp_enqueue_flags+0x1c0>)
 80100ee:	4867      	ldr	r0, [pc, #412]	; (801028c <tcp_enqueue_flags+0x1c4>)
 80100f0:	f006 f98e 	bl	8016410 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d106      	bne.n	8010108 <tcp_enqueue_flags+0x40>
 80100fa:	4b62      	ldr	r3, [pc, #392]	; (8010284 <tcp_enqueue_flags+0x1bc>)
 80100fc:	f240 4213 	movw	r2, #1043	; 0x413
 8010100:	4963      	ldr	r1, [pc, #396]	; (8010290 <tcp_enqueue_flags+0x1c8>)
 8010102:	4862      	ldr	r0, [pc, #392]	; (801028c <tcp_enqueue_flags+0x1c4>)
 8010104:	f006 f984 	bl	8016410 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8010108:	78fb      	ldrb	r3, [r7, #3]
 801010a:	f003 0302 	and.w	r3, r3, #2
 801010e:	2b00      	cmp	r3, #0
 8010110:	d001      	beq.n	8010116 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8010112:	2301      	movs	r3, #1
 8010114:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010116:	7ffb      	ldrb	r3, [r7, #31]
 8010118:	009b      	lsls	r3, r3, #2
 801011a:	b2db      	uxtb	r3, r3
 801011c:	f003 0304 	and.w	r3, r3, #4
 8010120:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8010122:	7dfb      	ldrb	r3, [r7, #23]
 8010124:	b29b      	uxth	r3, r3
 8010126:	f44f 7220 	mov.w	r2, #640	; 0x280
 801012a:	4619      	mov	r1, r3
 801012c:	2036      	movs	r0, #54	; 0x36
 801012e:	f7fa f9dd 	bl	800a4ec <pbuf_alloc>
 8010132:	6138      	str	r0, [r7, #16]
 8010134:	693b      	ldr	r3, [r7, #16]
 8010136:	2b00      	cmp	r3, #0
 8010138:	d109      	bne.n	801014e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	8b5b      	ldrh	r3, [r3, #26]
 801013e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010142:	b29a      	uxth	r2, r3
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010148:	f04f 33ff 	mov.w	r3, #4294967295
 801014c:	e095      	b.n	801027a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801014e:	693b      	ldr	r3, [r7, #16]
 8010150:	895a      	ldrh	r2, [r3, #10]
 8010152:	7dfb      	ldrb	r3, [r7, #23]
 8010154:	b29b      	uxth	r3, r3
 8010156:	429a      	cmp	r2, r3
 8010158:	d206      	bcs.n	8010168 <tcp_enqueue_flags+0xa0>
 801015a:	4b4a      	ldr	r3, [pc, #296]	; (8010284 <tcp_enqueue_flags+0x1bc>)
 801015c:	f240 4239 	movw	r2, #1081	; 0x439
 8010160:	494c      	ldr	r1, [pc, #304]	; (8010294 <tcp_enqueue_flags+0x1cc>)
 8010162:	484a      	ldr	r0, [pc, #296]	; (801028c <tcp_enqueue_flags+0x1c4>)
 8010164:	f006 f954 	bl	8016410 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 801016c:	78fa      	ldrb	r2, [r7, #3]
 801016e:	7ffb      	ldrb	r3, [r7, #31]
 8010170:	9300      	str	r3, [sp, #0]
 8010172:	460b      	mov	r3, r1
 8010174:	6939      	ldr	r1, [r7, #16]
 8010176:	6878      	ldr	r0, [r7, #4]
 8010178:	f7ff f918 	bl	800f3ac <tcp_create_segment>
 801017c:	60f8      	str	r0, [r7, #12]
 801017e:	68fb      	ldr	r3, [r7, #12]
 8010180:	2b00      	cmp	r3, #0
 8010182:	d109      	bne.n	8010198 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	8b5b      	ldrh	r3, [r3, #26]
 8010188:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801018c:	b29a      	uxth	r2, r3
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010192:	f04f 33ff 	mov.w	r3, #4294967295
 8010196:	e070      	b.n	801027a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8010198:	68fb      	ldr	r3, [r7, #12]
 801019a:	68db      	ldr	r3, [r3, #12]
 801019c:	f003 0303 	and.w	r3, r3, #3
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	d006      	beq.n	80101b2 <tcp_enqueue_flags+0xea>
 80101a4:	4b37      	ldr	r3, [pc, #220]	; (8010284 <tcp_enqueue_flags+0x1bc>)
 80101a6:	f240 4242 	movw	r2, #1090	; 0x442
 80101aa:	493b      	ldr	r1, [pc, #236]	; (8010298 <tcp_enqueue_flags+0x1d0>)
 80101ac:	4837      	ldr	r0, [pc, #220]	; (801028c <tcp_enqueue_flags+0x1c4>)
 80101ae:	f006 f92f 	bl	8016410 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80101b2:	68fb      	ldr	r3, [r7, #12]
 80101b4:	891b      	ldrh	r3, [r3, #8]
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d006      	beq.n	80101c8 <tcp_enqueue_flags+0x100>
 80101ba:	4b32      	ldr	r3, [pc, #200]	; (8010284 <tcp_enqueue_flags+0x1bc>)
 80101bc:	f240 4243 	movw	r2, #1091	; 0x443
 80101c0:	4936      	ldr	r1, [pc, #216]	; (801029c <tcp_enqueue_flags+0x1d4>)
 80101c2:	4832      	ldr	r0, [pc, #200]	; (801028c <tcp_enqueue_flags+0x1c4>)
 80101c4:	f006 f924 	bl	8016410 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d103      	bne.n	80101d8 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	68fa      	ldr	r2, [r7, #12]
 80101d4:	66da      	str	r2, [r3, #108]	; 0x6c
 80101d6:	e00d      	b.n	80101f4 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80101dc:	61bb      	str	r3, [r7, #24]
 80101de:	e002      	b.n	80101e6 <tcp_enqueue_flags+0x11e>
 80101e0:	69bb      	ldr	r3, [r7, #24]
 80101e2:	681b      	ldr	r3, [r3, #0]
 80101e4:	61bb      	str	r3, [r7, #24]
 80101e6:	69bb      	ldr	r3, [r7, #24]
 80101e8:	681b      	ldr	r3, [r3, #0]
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d1f8      	bne.n	80101e0 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80101ee:	69bb      	ldr	r3, [r7, #24]
 80101f0:	68fa      	ldr	r2, [r7, #12]
 80101f2:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	2200      	movs	r2, #0
 80101f8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80101fc:	78fb      	ldrb	r3, [r7, #3]
 80101fe:	f003 0302 	and.w	r3, r3, #2
 8010202:	2b00      	cmp	r3, #0
 8010204:	d104      	bne.n	8010210 <tcp_enqueue_flags+0x148>
 8010206:	78fb      	ldrb	r3, [r7, #3]
 8010208:	f003 0301 	and.w	r3, r3, #1
 801020c:	2b00      	cmp	r3, #0
 801020e:	d004      	beq.n	801021a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010214:	1c5a      	adds	r2, r3, #1
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801021a:	78fb      	ldrb	r3, [r7, #3]
 801021c:	f003 0301 	and.w	r3, r3, #1
 8010220:	2b00      	cmp	r3, #0
 8010222:	d006      	beq.n	8010232 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	8b5b      	ldrh	r3, [r3, #26]
 8010228:	f043 0320 	orr.w	r3, r3, #32
 801022c:	b29a      	uxth	r2, r3
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010232:	68fb      	ldr	r3, [r7, #12]
 8010234:	685b      	ldr	r3, [r3, #4]
 8010236:	4618      	mov	r0, r3
 8010238:	f7fa fcca 	bl	800abd0 <pbuf_clen>
 801023c:	4603      	mov	r3, r0
 801023e:	461a      	mov	r2, r3
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010246:	4413      	add	r3, r2
 8010248:	b29a      	uxth	r2, r3
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010256:	2b00      	cmp	r3, #0
 8010258:	d00e      	beq.n	8010278 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801025e:	2b00      	cmp	r3, #0
 8010260:	d10a      	bne.n	8010278 <tcp_enqueue_flags+0x1b0>
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010266:	2b00      	cmp	r3, #0
 8010268:	d106      	bne.n	8010278 <tcp_enqueue_flags+0x1b0>
 801026a:	4b06      	ldr	r3, [pc, #24]	; (8010284 <tcp_enqueue_flags+0x1bc>)
 801026c:	f240 4265 	movw	r2, #1125	; 0x465
 8010270:	490b      	ldr	r1, [pc, #44]	; (80102a0 <tcp_enqueue_flags+0x1d8>)
 8010272:	4806      	ldr	r0, [pc, #24]	; (801028c <tcp_enqueue_flags+0x1c4>)
 8010274:	f006 f8cc 	bl	8016410 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8010278:	2300      	movs	r3, #0
}
 801027a:	4618      	mov	r0, r3
 801027c:	3720      	adds	r7, #32
 801027e:	46bd      	mov	sp, r7
 8010280:	bd80      	pop	{r7, pc}
 8010282:	bf00      	nop
 8010284:	08019b0c 	.word	0x08019b0c
 8010288:	08019f30 	.word	0x08019f30
 801028c:	08019b60 	.word	0x08019b60
 8010290:	08019f88 	.word	0x08019f88
 8010294:	08019fa8 	.word	0x08019fa8
 8010298:	08019fe4 	.word	0x08019fe4
 801029c:	08019ffc 	.word	0x08019ffc
 80102a0:	0801a028 	.word	0x0801a028

080102a4 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80102a4:	b5b0      	push	{r4, r5, r7, lr}
 80102a6:	b08a      	sub	sp, #40	; 0x28
 80102a8:	af00      	add	r7, sp, #0
 80102aa:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d106      	bne.n	80102c0 <tcp_output+0x1c>
 80102b2:	4b8a      	ldr	r3, [pc, #552]	; (80104dc <tcp_output+0x238>)
 80102b4:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80102b8:	4989      	ldr	r1, [pc, #548]	; (80104e0 <tcp_output+0x23c>)
 80102ba:	488a      	ldr	r0, [pc, #552]	; (80104e4 <tcp_output+0x240>)
 80102bc:	f006 f8a8 	bl	8016410 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	7d1b      	ldrb	r3, [r3, #20]
 80102c4:	2b01      	cmp	r3, #1
 80102c6:	d106      	bne.n	80102d6 <tcp_output+0x32>
 80102c8:	4b84      	ldr	r3, [pc, #528]	; (80104dc <tcp_output+0x238>)
 80102ca:	f240 42e3 	movw	r2, #1251	; 0x4e3
 80102ce:	4986      	ldr	r1, [pc, #536]	; (80104e8 <tcp_output+0x244>)
 80102d0:	4884      	ldr	r0, [pc, #528]	; (80104e4 <tcp_output+0x240>)
 80102d2:	f006 f89d 	bl	8016410 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80102d6:	4b85      	ldr	r3, [pc, #532]	; (80104ec <tcp_output+0x248>)
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	687a      	ldr	r2, [r7, #4]
 80102dc:	429a      	cmp	r2, r3
 80102de:	d101      	bne.n	80102e4 <tcp_output+0x40>
    return ERR_OK;
 80102e0:	2300      	movs	r3, #0
 80102e2:	e1ce      	b.n	8010682 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80102f0:	4293      	cmp	r3, r2
 80102f2:	bf28      	it	cs
 80102f4:	4613      	movcs	r3, r2
 80102f6:	b29b      	uxth	r3, r3
 80102f8:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80102fe:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8010300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010302:	2b00      	cmp	r3, #0
 8010304:	d10b      	bne.n	801031e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	8b5b      	ldrh	r3, [r3, #26]
 801030a:	f003 0302 	and.w	r3, r3, #2
 801030e:	2b00      	cmp	r3, #0
 8010310:	f000 81aa 	beq.w	8010668 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8010314:	6878      	ldr	r0, [r7, #4]
 8010316:	f000 fdcb 	bl	8010eb0 <tcp_send_empty_ack>
 801031a:	4603      	mov	r3, r0
 801031c:	e1b1      	b.n	8010682 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801031e:	6879      	ldr	r1, [r7, #4]
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	3304      	adds	r3, #4
 8010324:	461a      	mov	r2, r3
 8010326:	6878      	ldr	r0, [r7, #4]
 8010328:	f7ff f824 	bl	800f374 <tcp_route>
 801032c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801032e:	697b      	ldr	r3, [r7, #20]
 8010330:	2b00      	cmp	r3, #0
 8010332:	d102      	bne.n	801033a <tcp_output+0x96>
    return ERR_RTE;
 8010334:	f06f 0303 	mvn.w	r3, #3
 8010338:	e1a3      	b.n	8010682 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	2b00      	cmp	r3, #0
 801033e:	d003      	beq.n	8010348 <tcp_output+0xa4>
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	681b      	ldr	r3, [r3, #0]
 8010344:	2b00      	cmp	r3, #0
 8010346:	d111      	bne.n	801036c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8010348:	697b      	ldr	r3, [r7, #20]
 801034a:	2b00      	cmp	r3, #0
 801034c:	d002      	beq.n	8010354 <tcp_output+0xb0>
 801034e:	697b      	ldr	r3, [r7, #20]
 8010350:	3304      	adds	r3, #4
 8010352:	e000      	b.n	8010356 <tcp_output+0xb2>
 8010354:	2300      	movs	r3, #0
 8010356:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8010358:	693b      	ldr	r3, [r7, #16]
 801035a:	2b00      	cmp	r3, #0
 801035c:	d102      	bne.n	8010364 <tcp_output+0xc0>
      return ERR_RTE;
 801035e:	f06f 0303 	mvn.w	r3, #3
 8010362:	e18e      	b.n	8010682 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8010364:	693b      	ldr	r3, [r7, #16]
 8010366:	681a      	ldr	r2, [r3, #0]
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801036c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801036e:	68db      	ldr	r3, [r3, #12]
 8010370:	685b      	ldr	r3, [r3, #4]
 8010372:	4618      	mov	r0, r3
 8010374:	f7f8 ffd3 	bl	800931e <lwip_htonl>
 8010378:	4602      	mov	r2, r0
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801037e:	1ad3      	subs	r3, r2, r3
 8010380:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010382:	8912      	ldrh	r2, [r2, #8]
 8010384:	4413      	add	r3, r2
 8010386:	69ba      	ldr	r2, [r7, #24]
 8010388:	429a      	cmp	r2, r3
 801038a:	d227      	bcs.n	80103dc <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010392:	461a      	mov	r2, r3
 8010394:	69bb      	ldr	r3, [r7, #24]
 8010396:	4293      	cmp	r3, r2
 8010398:	d114      	bne.n	80103c4 <tcp_output+0x120>
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801039e:	2b00      	cmp	r3, #0
 80103a0:	d110      	bne.n	80103c4 <tcp_output+0x120>
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d10b      	bne.n	80103c4 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	2200      	movs	r2, #0
 80103b0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	2201      	movs	r2, #1
 80103b8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	2200      	movs	r2, #0
 80103c0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	8b5b      	ldrh	r3, [r3, #26]
 80103c8:	f003 0302 	and.w	r3, r3, #2
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	f000 814d 	beq.w	801066c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 80103d2:	6878      	ldr	r0, [r7, #4]
 80103d4:	f000 fd6c 	bl	8010eb0 <tcp_send_empty_ack>
 80103d8:	4603      	mov	r3, r0
 80103da:	e152      	b.n	8010682 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	2200      	movs	r2, #0
 80103e0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80103e8:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80103ea:	6a3b      	ldr	r3, [r7, #32]
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	f000 811c 	beq.w	801062a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 80103f2:	e002      	b.n	80103fa <tcp_output+0x156>
 80103f4:	6a3b      	ldr	r3, [r7, #32]
 80103f6:	681b      	ldr	r3, [r3, #0]
 80103f8:	623b      	str	r3, [r7, #32]
 80103fa:	6a3b      	ldr	r3, [r7, #32]
 80103fc:	681b      	ldr	r3, [r3, #0]
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d1f8      	bne.n	80103f4 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8010402:	e112      	b.n	801062a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8010404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010406:	68db      	ldr	r3, [r3, #12]
 8010408:	899b      	ldrh	r3, [r3, #12]
 801040a:	b29b      	uxth	r3, r3
 801040c:	4618      	mov	r0, r3
 801040e:	f7f8 ff71 	bl	80092f4 <lwip_htons>
 8010412:	4603      	mov	r3, r0
 8010414:	b2db      	uxtb	r3, r3
 8010416:	f003 0304 	and.w	r3, r3, #4
 801041a:	2b00      	cmp	r3, #0
 801041c:	d006      	beq.n	801042c <tcp_output+0x188>
 801041e:	4b2f      	ldr	r3, [pc, #188]	; (80104dc <tcp_output+0x238>)
 8010420:	f240 5236 	movw	r2, #1334	; 0x536
 8010424:	4932      	ldr	r1, [pc, #200]	; (80104f0 <tcp_output+0x24c>)
 8010426:	482f      	ldr	r0, [pc, #188]	; (80104e4 <tcp_output+0x240>)
 8010428:	f005 fff2 	bl	8016410 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010430:	2b00      	cmp	r3, #0
 8010432:	d01f      	beq.n	8010474 <tcp_output+0x1d0>
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	8b5b      	ldrh	r3, [r3, #26]
 8010438:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801043c:	2b00      	cmp	r3, #0
 801043e:	d119      	bne.n	8010474 <tcp_output+0x1d0>
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010444:	2b00      	cmp	r3, #0
 8010446:	d00b      	beq.n	8010460 <tcp_output+0x1bc>
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	2b00      	cmp	r3, #0
 8010450:	d110      	bne.n	8010474 <tcp_output+0x1d0>
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010456:	891a      	ldrh	r2, [r3, #8]
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801045c:	429a      	cmp	r2, r3
 801045e:	d209      	bcs.n	8010474 <tcp_output+0x1d0>
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8010466:	2b00      	cmp	r3, #0
 8010468:	d004      	beq.n	8010474 <tcp_output+0x1d0>
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010470:	2b08      	cmp	r3, #8
 8010472:	d901      	bls.n	8010478 <tcp_output+0x1d4>
 8010474:	2301      	movs	r3, #1
 8010476:	e000      	b.n	801047a <tcp_output+0x1d6>
 8010478:	2300      	movs	r3, #0
 801047a:	2b00      	cmp	r3, #0
 801047c:	d106      	bne.n	801048c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	8b5b      	ldrh	r3, [r3, #26]
 8010482:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8010486:	2b00      	cmp	r3, #0
 8010488:	f000 80e4 	beq.w	8010654 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	7d1b      	ldrb	r3, [r3, #20]
 8010490:	2b02      	cmp	r3, #2
 8010492:	d00d      	beq.n	80104b0 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8010494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010496:	68db      	ldr	r3, [r3, #12]
 8010498:	899b      	ldrh	r3, [r3, #12]
 801049a:	b29c      	uxth	r4, r3
 801049c:	2010      	movs	r0, #16
 801049e:	f7f8 ff29 	bl	80092f4 <lwip_htons>
 80104a2:	4603      	mov	r3, r0
 80104a4:	461a      	mov	r2, r3
 80104a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104a8:	68db      	ldr	r3, [r3, #12]
 80104aa:	4322      	orrs	r2, r4
 80104ac:	b292      	uxth	r2, r2
 80104ae:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80104b0:	697a      	ldr	r2, [r7, #20]
 80104b2:	6879      	ldr	r1, [r7, #4]
 80104b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80104b6:	f000 f909 	bl	80106cc <tcp_output_segment>
 80104ba:	4603      	mov	r3, r0
 80104bc:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80104be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	d016      	beq.n	80104f4 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	8b5b      	ldrh	r3, [r3, #26]
 80104ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80104ce:	b29a      	uxth	r2, r3
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	835a      	strh	r2, [r3, #26]
      return err;
 80104d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80104d8:	e0d3      	b.n	8010682 <tcp_output+0x3de>
 80104da:	bf00      	nop
 80104dc:	08019b0c 	.word	0x08019b0c
 80104e0:	0801a050 	.word	0x0801a050
 80104e4:	08019b60 	.word	0x08019b60
 80104e8:	0801a068 	.word	0x0801a068
 80104ec:	2001af00 	.word	0x2001af00
 80104f0:	0801a090 	.word	0x0801a090
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80104f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104f6:	681a      	ldr	r2, [r3, #0]
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	7d1b      	ldrb	r3, [r3, #20]
 8010500:	2b02      	cmp	r3, #2
 8010502:	d006      	beq.n	8010512 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	8b5b      	ldrh	r3, [r3, #26]
 8010508:	f023 0303 	bic.w	r3, r3, #3
 801050c:	b29a      	uxth	r2, r3
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8010512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010514:	68db      	ldr	r3, [r3, #12]
 8010516:	685b      	ldr	r3, [r3, #4]
 8010518:	4618      	mov	r0, r3
 801051a:	f7f8 ff00 	bl	800931e <lwip_htonl>
 801051e:	4604      	mov	r4, r0
 8010520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010522:	891b      	ldrh	r3, [r3, #8]
 8010524:	461d      	mov	r5, r3
 8010526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010528:	68db      	ldr	r3, [r3, #12]
 801052a:	899b      	ldrh	r3, [r3, #12]
 801052c:	b29b      	uxth	r3, r3
 801052e:	4618      	mov	r0, r3
 8010530:	f7f8 fee0 	bl	80092f4 <lwip_htons>
 8010534:	4603      	mov	r3, r0
 8010536:	b2db      	uxtb	r3, r3
 8010538:	f003 0303 	and.w	r3, r3, #3
 801053c:	2b00      	cmp	r3, #0
 801053e:	d001      	beq.n	8010544 <tcp_output+0x2a0>
 8010540:	2301      	movs	r3, #1
 8010542:	e000      	b.n	8010546 <tcp_output+0x2a2>
 8010544:	2300      	movs	r3, #0
 8010546:	442b      	add	r3, r5
 8010548:	4423      	add	r3, r4
 801054a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010550:	68bb      	ldr	r3, [r7, #8]
 8010552:	1ad3      	subs	r3, r2, r3
 8010554:	2b00      	cmp	r3, #0
 8010556:	da02      	bge.n	801055e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	68ba      	ldr	r2, [r7, #8]
 801055c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801055e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010560:	891b      	ldrh	r3, [r3, #8]
 8010562:	461c      	mov	r4, r3
 8010564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010566:	68db      	ldr	r3, [r3, #12]
 8010568:	899b      	ldrh	r3, [r3, #12]
 801056a:	b29b      	uxth	r3, r3
 801056c:	4618      	mov	r0, r3
 801056e:	f7f8 fec1 	bl	80092f4 <lwip_htons>
 8010572:	4603      	mov	r3, r0
 8010574:	b2db      	uxtb	r3, r3
 8010576:	f003 0303 	and.w	r3, r3, #3
 801057a:	2b00      	cmp	r3, #0
 801057c:	d001      	beq.n	8010582 <tcp_output+0x2de>
 801057e:	2301      	movs	r3, #1
 8010580:	e000      	b.n	8010584 <tcp_output+0x2e0>
 8010582:	2300      	movs	r3, #0
 8010584:	4423      	add	r3, r4
 8010586:	2b00      	cmp	r3, #0
 8010588:	d049      	beq.n	801061e <tcp_output+0x37a>
      seg->next = NULL;
 801058a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801058c:	2200      	movs	r2, #0
 801058e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010594:	2b00      	cmp	r3, #0
 8010596:	d105      	bne.n	80105a4 <tcp_output+0x300>
        pcb->unacked = seg;
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801059c:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801059e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105a0:	623b      	str	r3, [r7, #32]
 80105a2:	e03f      	b.n	8010624 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80105a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105a6:	68db      	ldr	r3, [r3, #12]
 80105a8:	685b      	ldr	r3, [r3, #4]
 80105aa:	4618      	mov	r0, r3
 80105ac:	f7f8 feb7 	bl	800931e <lwip_htonl>
 80105b0:	4604      	mov	r4, r0
 80105b2:	6a3b      	ldr	r3, [r7, #32]
 80105b4:	68db      	ldr	r3, [r3, #12]
 80105b6:	685b      	ldr	r3, [r3, #4]
 80105b8:	4618      	mov	r0, r3
 80105ba:	f7f8 feb0 	bl	800931e <lwip_htonl>
 80105be:	4603      	mov	r3, r0
 80105c0:	1ae3      	subs	r3, r4, r3
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	da24      	bge.n	8010610 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	3370      	adds	r3, #112	; 0x70
 80105ca:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80105cc:	e002      	b.n	80105d4 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80105ce:	69fb      	ldr	r3, [r7, #28]
 80105d0:	681b      	ldr	r3, [r3, #0]
 80105d2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80105d4:	69fb      	ldr	r3, [r7, #28]
 80105d6:	681b      	ldr	r3, [r3, #0]
 80105d8:	2b00      	cmp	r3, #0
 80105da:	d011      	beq.n	8010600 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80105dc:	69fb      	ldr	r3, [r7, #28]
 80105de:	681b      	ldr	r3, [r3, #0]
 80105e0:	68db      	ldr	r3, [r3, #12]
 80105e2:	685b      	ldr	r3, [r3, #4]
 80105e4:	4618      	mov	r0, r3
 80105e6:	f7f8 fe9a 	bl	800931e <lwip_htonl>
 80105ea:	4604      	mov	r4, r0
 80105ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105ee:	68db      	ldr	r3, [r3, #12]
 80105f0:	685b      	ldr	r3, [r3, #4]
 80105f2:	4618      	mov	r0, r3
 80105f4:	f7f8 fe93 	bl	800931e <lwip_htonl>
 80105f8:	4603      	mov	r3, r0
 80105fa:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	dbe6      	blt.n	80105ce <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8010600:	69fb      	ldr	r3, [r7, #28]
 8010602:	681a      	ldr	r2, [r3, #0]
 8010604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010606:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8010608:	69fb      	ldr	r3, [r7, #28]
 801060a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801060c:	601a      	str	r2, [r3, #0]
 801060e:	e009      	b.n	8010624 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8010610:	6a3b      	ldr	r3, [r7, #32]
 8010612:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010614:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8010616:	6a3b      	ldr	r3, [r7, #32]
 8010618:	681b      	ldr	r3, [r3, #0]
 801061a:	623b      	str	r3, [r7, #32]
 801061c:	e002      	b.n	8010624 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801061e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010620:	f7fb ff31 	bl	800c486 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010628:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801062a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801062c:	2b00      	cmp	r3, #0
 801062e:	d012      	beq.n	8010656 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8010630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010632:	68db      	ldr	r3, [r3, #12]
 8010634:	685b      	ldr	r3, [r3, #4]
 8010636:	4618      	mov	r0, r3
 8010638:	f7f8 fe71 	bl	800931e <lwip_htonl>
 801063c:	4602      	mov	r2, r0
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010642:	1ad3      	subs	r3, r2, r3
 8010644:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010646:	8912      	ldrh	r2, [r2, #8]
 8010648:	4413      	add	r3, r2
  while (seg != NULL &&
 801064a:	69ba      	ldr	r2, [r7, #24]
 801064c:	429a      	cmp	r2, r3
 801064e:	f4bf aed9 	bcs.w	8010404 <tcp_output+0x160>
 8010652:	e000      	b.n	8010656 <tcp_output+0x3b2>
      break;
 8010654:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801065a:	2b00      	cmp	r3, #0
 801065c:	d108      	bne.n	8010670 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	2200      	movs	r2, #0
 8010662:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8010666:	e004      	b.n	8010672 <tcp_output+0x3ce>
    goto output_done;
 8010668:	bf00      	nop
 801066a:	e002      	b.n	8010672 <tcp_output+0x3ce>
    goto output_done;
 801066c:	bf00      	nop
 801066e:	e000      	b.n	8010672 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8010670:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	8b5b      	ldrh	r3, [r3, #26]
 8010676:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801067a:	b29a      	uxth	r2, r3
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8010680:	2300      	movs	r3, #0
}
 8010682:	4618      	mov	r0, r3
 8010684:	3728      	adds	r7, #40	; 0x28
 8010686:	46bd      	mov	sp, r7
 8010688:	bdb0      	pop	{r4, r5, r7, pc}
 801068a:	bf00      	nop

0801068c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801068c:	b580      	push	{r7, lr}
 801068e:	b082      	sub	sp, #8
 8010690:	af00      	add	r7, sp, #0
 8010692:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	2b00      	cmp	r3, #0
 8010698:	d106      	bne.n	80106a8 <tcp_output_segment_busy+0x1c>
 801069a:	4b09      	ldr	r3, [pc, #36]	; (80106c0 <tcp_output_segment_busy+0x34>)
 801069c:	f240 529a 	movw	r2, #1434	; 0x59a
 80106a0:	4908      	ldr	r1, [pc, #32]	; (80106c4 <tcp_output_segment_busy+0x38>)
 80106a2:	4809      	ldr	r0, [pc, #36]	; (80106c8 <tcp_output_segment_busy+0x3c>)
 80106a4:	f005 feb4 	bl	8016410 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	685b      	ldr	r3, [r3, #4]
 80106ac:	7b9b      	ldrb	r3, [r3, #14]
 80106ae:	2b01      	cmp	r3, #1
 80106b0:	d001      	beq.n	80106b6 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80106b2:	2301      	movs	r3, #1
 80106b4:	e000      	b.n	80106b8 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80106b6:	2300      	movs	r3, #0
}
 80106b8:	4618      	mov	r0, r3
 80106ba:	3708      	adds	r7, #8
 80106bc:	46bd      	mov	sp, r7
 80106be:	bd80      	pop	{r7, pc}
 80106c0:	08019b0c 	.word	0x08019b0c
 80106c4:	0801a0a8 	.word	0x0801a0a8
 80106c8:	08019b60 	.word	0x08019b60

080106cc <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80106cc:	b5b0      	push	{r4, r5, r7, lr}
 80106ce:	b08c      	sub	sp, #48	; 0x30
 80106d0:	af04      	add	r7, sp, #16
 80106d2:	60f8      	str	r0, [r7, #12]
 80106d4:	60b9      	str	r1, [r7, #8]
 80106d6:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80106d8:	68fb      	ldr	r3, [r7, #12]
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d106      	bne.n	80106ec <tcp_output_segment+0x20>
 80106de:	4b63      	ldr	r3, [pc, #396]	; (801086c <tcp_output_segment+0x1a0>)
 80106e0:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 80106e4:	4962      	ldr	r1, [pc, #392]	; (8010870 <tcp_output_segment+0x1a4>)
 80106e6:	4863      	ldr	r0, [pc, #396]	; (8010874 <tcp_output_segment+0x1a8>)
 80106e8:	f005 fe92 	bl	8016410 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80106ec:	68bb      	ldr	r3, [r7, #8]
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d106      	bne.n	8010700 <tcp_output_segment+0x34>
 80106f2:	4b5e      	ldr	r3, [pc, #376]	; (801086c <tcp_output_segment+0x1a0>)
 80106f4:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80106f8:	495f      	ldr	r1, [pc, #380]	; (8010878 <tcp_output_segment+0x1ac>)
 80106fa:	485e      	ldr	r0, [pc, #376]	; (8010874 <tcp_output_segment+0x1a8>)
 80106fc:	f005 fe88 	bl	8016410 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	2b00      	cmp	r3, #0
 8010704:	d106      	bne.n	8010714 <tcp_output_segment+0x48>
 8010706:	4b59      	ldr	r3, [pc, #356]	; (801086c <tcp_output_segment+0x1a0>)
 8010708:	f240 52ba 	movw	r2, #1466	; 0x5ba
 801070c:	495b      	ldr	r1, [pc, #364]	; (801087c <tcp_output_segment+0x1b0>)
 801070e:	4859      	ldr	r0, [pc, #356]	; (8010874 <tcp_output_segment+0x1a8>)
 8010710:	f005 fe7e 	bl	8016410 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8010714:	68f8      	ldr	r0, [r7, #12]
 8010716:	f7ff ffb9 	bl	801068c <tcp_output_segment_busy>
 801071a:	4603      	mov	r3, r0
 801071c:	2b00      	cmp	r3, #0
 801071e:	d001      	beq.n	8010724 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8010720:	2300      	movs	r3, #0
 8010722:	e09f      	b.n	8010864 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8010724:	68bb      	ldr	r3, [r7, #8]
 8010726:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	68dc      	ldr	r4, [r3, #12]
 801072c:	4610      	mov	r0, r2
 801072e:	f7f8 fdf6 	bl	800931e <lwip_htonl>
 8010732:	4603      	mov	r3, r0
 8010734:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8010736:	68bb      	ldr	r3, [r7, #8]
 8010738:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801073a:	68fb      	ldr	r3, [r7, #12]
 801073c:	68dc      	ldr	r4, [r3, #12]
 801073e:	4610      	mov	r0, r2
 8010740:	f7f8 fdd8 	bl	80092f4 <lwip_htons>
 8010744:	4603      	mov	r3, r0
 8010746:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8010748:	68bb      	ldr	r3, [r7, #8]
 801074a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801074c:	68ba      	ldr	r2, [r7, #8]
 801074e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8010750:	441a      	add	r2, r3
 8010752:	68bb      	ldr	r3, [r7, #8]
 8010754:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8010756:	68fb      	ldr	r3, [r7, #12]
 8010758:	68db      	ldr	r3, [r3, #12]
 801075a:	3314      	adds	r3, #20
 801075c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801075e:	68fb      	ldr	r3, [r7, #12]
 8010760:	7a9b      	ldrb	r3, [r3, #10]
 8010762:	f003 0301 	and.w	r3, r3, #1
 8010766:	2b00      	cmp	r3, #0
 8010768:	d015      	beq.n	8010796 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801076a:	68bb      	ldr	r3, [r7, #8]
 801076c:	3304      	adds	r3, #4
 801076e:	461a      	mov	r2, r3
 8010770:	6879      	ldr	r1, [r7, #4]
 8010772:	f44f 7006 	mov.w	r0, #536	; 0x218
 8010776:	f7fc fa33 	bl	800cbe0 <tcp_eff_send_mss_netif>
 801077a:	4603      	mov	r3, r0
 801077c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801077e:	8b7b      	ldrh	r3, [r7, #26]
 8010780:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8010784:	4618      	mov	r0, r3
 8010786:	f7f8 fdca 	bl	800931e <lwip_htonl>
 801078a:	4602      	mov	r2, r0
 801078c:	69fb      	ldr	r3, [r7, #28]
 801078e:	601a      	str	r2, [r3, #0]
    opts += 1;
 8010790:	69fb      	ldr	r3, [r7, #28]
 8010792:	3304      	adds	r3, #4
 8010794:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8010796:	68bb      	ldr	r3, [r7, #8]
 8010798:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801079c:	2b00      	cmp	r3, #0
 801079e:	da02      	bge.n	80107a6 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80107a0:	68bb      	ldr	r3, [r7, #8]
 80107a2:	2200      	movs	r2, #0
 80107a4:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80107a6:	68bb      	ldr	r3, [r7, #8]
 80107a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	d10c      	bne.n	80107c8 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80107ae:	4b34      	ldr	r3, [pc, #208]	; (8010880 <tcp_output_segment+0x1b4>)
 80107b0:	681a      	ldr	r2, [r3, #0]
 80107b2:	68bb      	ldr	r3, [r7, #8]
 80107b4:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80107b6:	68fb      	ldr	r3, [r7, #12]
 80107b8:	68db      	ldr	r3, [r3, #12]
 80107ba:	685b      	ldr	r3, [r3, #4]
 80107bc:	4618      	mov	r0, r3
 80107be:	f7f8 fdae 	bl	800931e <lwip_htonl>
 80107c2:	4602      	mov	r2, r0
 80107c4:	68bb      	ldr	r3, [r7, #8]
 80107c6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80107c8:	68fb      	ldr	r3, [r7, #12]
 80107ca:	68da      	ldr	r2, [r3, #12]
 80107cc:	68fb      	ldr	r3, [r7, #12]
 80107ce:	685b      	ldr	r3, [r3, #4]
 80107d0:	685b      	ldr	r3, [r3, #4]
 80107d2:	1ad3      	subs	r3, r2, r3
 80107d4:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80107d6:	68fb      	ldr	r3, [r7, #12]
 80107d8:	685b      	ldr	r3, [r3, #4]
 80107da:	8959      	ldrh	r1, [r3, #10]
 80107dc:	68fb      	ldr	r3, [r7, #12]
 80107de:	685b      	ldr	r3, [r3, #4]
 80107e0:	8b3a      	ldrh	r2, [r7, #24]
 80107e2:	1a8a      	subs	r2, r1, r2
 80107e4:	b292      	uxth	r2, r2
 80107e6:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80107e8:	68fb      	ldr	r3, [r7, #12]
 80107ea:	685b      	ldr	r3, [r3, #4]
 80107ec:	8919      	ldrh	r1, [r3, #8]
 80107ee:	68fb      	ldr	r3, [r7, #12]
 80107f0:	685b      	ldr	r3, [r3, #4]
 80107f2:	8b3a      	ldrh	r2, [r7, #24]
 80107f4:	1a8a      	subs	r2, r1, r2
 80107f6:	b292      	uxth	r2, r2
 80107f8:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80107fa:	68fb      	ldr	r3, [r7, #12]
 80107fc:	685b      	ldr	r3, [r3, #4]
 80107fe:	68fa      	ldr	r2, [r7, #12]
 8010800:	68d2      	ldr	r2, [r2, #12]
 8010802:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8010804:	68fb      	ldr	r3, [r7, #12]
 8010806:	68db      	ldr	r3, [r3, #12]
 8010808:	2200      	movs	r2, #0
 801080a:	741a      	strb	r2, [r3, #16]
 801080c:	2200      	movs	r2, #0
 801080e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8010810:	68fb      	ldr	r3, [r7, #12]
 8010812:	68db      	ldr	r3, [r3, #12]
 8010814:	f103 0214 	add.w	r2, r3, #20
 8010818:	68fb      	ldr	r3, [r7, #12]
 801081a:	7a9b      	ldrb	r3, [r3, #10]
 801081c:	009b      	lsls	r3, r3, #2
 801081e:	f003 0304 	and.w	r3, r3, #4
 8010822:	4413      	add	r3, r2
 8010824:	69fa      	ldr	r2, [r7, #28]
 8010826:	429a      	cmp	r2, r3
 8010828:	d006      	beq.n	8010838 <tcp_output_segment+0x16c>
 801082a:	4b10      	ldr	r3, [pc, #64]	; (801086c <tcp_output_segment+0x1a0>)
 801082c:	f240 621c 	movw	r2, #1564	; 0x61c
 8010830:	4914      	ldr	r1, [pc, #80]	; (8010884 <tcp_output_segment+0x1b8>)
 8010832:	4810      	ldr	r0, [pc, #64]	; (8010874 <tcp_output_segment+0x1a8>)
 8010834:	f005 fdec 	bl	8016410 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8010838:	68fb      	ldr	r3, [r7, #12]
 801083a:	6858      	ldr	r0, [r3, #4]
 801083c:	68b9      	ldr	r1, [r7, #8]
 801083e:	68bb      	ldr	r3, [r7, #8]
 8010840:	1d1c      	adds	r4, r3, #4
 8010842:	68bb      	ldr	r3, [r7, #8]
 8010844:	7add      	ldrb	r5, [r3, #11]
 8010846:	68bb      	ldr	r3, [r7, #8]
 8010848:	7a9b      	ldrb	r3, [r3, #10]
 801084a:	687a      	ldr	r2, [r7, #4]
 801084c:	9202      	str	r2, [sp, #8]
 801084e:	2206      	movs	r2, #6
 8010850:	9201      	str	r2, [sp, #4]
 8010852:	9300      	str	r3, [sp, #0]
 8010854:	462b      	mov	r3, r5
 8010856:	4622      	mov	r2, r4
 8010858:	f004 fc56 	bl	8015108 <ip4_output_if>
 801085c:	4603      	mov	r3, r0
 801085e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8010860:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010864:	4618      	mov	r0, r3
 8010866:	3720      	adds	r7, #32
 8010868:	46bd      	mov	sp, r7
 801086a:	bdb0      	pop	{r4, r5, r7, pc}
 801086c:	08019b0c 	.word	0x08019b0c
 8010870:	0801a0d0 	.word	0x0801a0d0
 8010874:	08019b60 	.word	0x08019b60
 8010878:	0801a0f0 	.word	0x0801a0f0
 801087c:	0801a110 	.word	0x0801a110
 8010880:	2001aeb4 	.word	0x2001aeb4
 8010884:	0801a134 	.word	0x0801a134

08010888 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8010888:	b5b0      	push	{r4, r5, r7, lr}
 801088a:	b084      	sub	sp, #16
 801088c:	af00      	add	r7, sp, #0
 801088e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	2b00      	cmp	r3, #0
 8010894:	d106      	bne.n	80108a4 <tcp_rexmit_rto_prepare+0x1c>
 8010896:	4b31      	ldr	r3, [pc, #196]	; (801095c <tcp_rexmit_rto_prepare+0xd4>)
 8010898:	f240 6263 	movw	r2, #1635	; 0x663
 801089c:	4930      	ldr	r1, [pc, #192]	; (8010960 <tcp_rexmit_rto_prepare+0xd8>)
 801089e:	4831      	ldr	r0, [pc, #196]	; (8010964 <tcp_rexmit_rto_prepare+0xdc>)
 80108a0:	f005 fdb6 	bl	8016410 <iprintf>

  if (pcb->unacked == NULL) {
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d102      	bne.n	80108b2 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80108ac:	f06f 0305 	mvn.w	r3, #5
 80108b0:	e050      	b.n	8010954 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80108b6:	60fb      	str	r3, [r7, #12]
 80108b8:	e00b      	b.n	80108d2 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80108ba:	68f8      	ldr	r0, [r7, #12]
 80108bc:	f7ff fee6 	bl	801068c <tcp_output_segment_busy>
 80108c0:	4603      	mov	r3, r0
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	d002      	beq.n	80108cc <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80108c6:	f06f 0305 	mvn.w	r3, #5
 80108ca:	e043      	b.n	8010954 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80108cc:	68fb      	ldr	r3, [r7, #12]
 80108ce:	681b      	ldr	r3, [r3, #0]
 80108d0:	60fb      	str	r3, [r7, #12]
 80108d2:	68fb      	ldr	r3, [r7, #12]
 80108d4:	681b      	ldr	r3, [r3, #0]
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	d1ef      	bne.n	80108ba <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80108da:	68f8      	ldr	r0, [r7, #12]
 80108dc:	f7ff fed6 	bl	801068c <tcp_output_segment_busy>
 80108e0:	4603      	mov	r3, r0
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d002      	beq.n	80108ec <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80108e6:	f06f 0305 	mvn.w	r3, #5
 80108ea:	e033      	b.n	8010954 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80108f0:	68fb      	ldr	r3, [r7, #12]
 80108f2:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	2200      	movs	r2, #0
 8010900:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	8b5b      	ldrh	r3, [r3, #26]
 8010906:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801090a:	b29a      	uxth	r2, r3
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8010910:	68fb      	ldr	r3, [r7, #12]
 8010912:	68db      	ldr	r3, [r3, #12]
 8010914:	685b      	ldr	r3, [r3, #4]
 8010916:	4618      	mov	r0, r3
 8010918:	f7f8 fd01 	bl	800931e <lwip_htonl>
 801091c:	4604      	mov	r4, r0
 801091e:	68fb      	ldr	r3, [r7, #12]
 8010920:	891b      	ldrh	r3, [r3, #8]
 8010922:	461d      	mov	r5, r3
 8010924:	68fb      	ldr	r3, [r7, #12]
 8010926:	68db      	ldr	r3, [r3, #12]
 8010928:	899b      	ldrh	r3, [r3, #12]
 801092a:	b29b      	uxth	r3, r3
 801092c:	4618      	mov	r0, r3
 801092e:	f7f8 fce1 	bl	80092f4 <lwip_htons>
 8010932:	4603      	mov	r3, r0
 8010934:	b2db      	uxtb	r3, r3
 8010936:	f003 0303 	and.w	r3, r3, #3
 801093a:	2b00      	cmp	r3, #0
 801093c:	d001      	beq.n	8010942 <tcp_rexmit_rto_prepare+0xba>
 801093e:	2301      	movs	r3, #1
 8010940:	e000      	b.n	8010944 <tcp_rexmit_rto_prepare+0xbc>
 8010942:	2300      	movs	r3, #0
 8010944:	442b      	add	r3, r5
 8010946:	18e2      	adds	r2, r4, r3
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	2200      	movs	r2, #0
 8010950:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8010952:	2300      	movs	r3, #0
}
 8010954:	4618      	mov	r0, r3
 8010956:	3710      	adds	r7, #16
 8010958:	46bd      	mov	sp, r7
 801095a:	bdb0      	pop	{r4, r5, r7, pc}
 801095c:	08019b0c 	.word	0x08019b0c
 8010960:	0801a148 	.word	0x0801a148
 8010964:	08019b60 	.word	0x08019b60

08010968 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8010968:	b580      	push	{r7, lr}
 801096a:	b082      	sub	sp, #8
 801096c:	af00      	add	r7, sp, #0
 801096e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	2b00      	cmp	r3, #0
 8010974:	d106      	bne.n	8010984 <tcp_rexmit_rto_commit+0x1c>
 8010976:	4b0d      	ldr	r3, [pc, #52]	; (80109ac <tcp_rexmit_rto_commit+0x44>)
 8010978:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801097c:	490c      	ldr	r1, [pc, #48]	; (80109b0 <tcp_rexmit_rto_commit+0x48>)
 801097e:	480d      	ldr	r0, [pc, #52]	; (80109b4 <tcp_rexmit_rto_commit+0x4c>)
 8010980:	f005 fd46 	bl	8016410 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801098a:	2bff      	cmp	r3, #255	; 0xff
 801098c:	d007      	beq.n	801099e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010994:	3301      	adds	r3, #1
 8010996:	b2da      	uxtb	r2, r3
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801099e:	6878      	ldr	r0, [r7, #4]
 80109a0:	f7ff fc80 	bl	80102a4 <tcp_output>
}
 80109a4:	bf00      	nop
 80109a6:	3708      	adds	r7, #8
 80109a8:	46bd      	mov	sp, r7
 80109aa:	bd80      	pop	{r7, pc}
 80109ac:	08019b0c 	.word	0x08019b0c
 80109b0:	0801a16c 	.word	0x0801a16c
 80109b4:	08019b60 	.word	0x08019b60

080109b8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80109b8:	b580      	push	{r7, lr}
 80109ba:	b082      	sub	sp, #8
 80109bc:	af00      	add	r7, sp, #0
 80109be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	d106      	bne.n	80109d4 <tcp_rexmit_rto+0x1c>
 80109c6:	4b0a      	ldr	r3, [pc, #40]	; (80109f0 <tcp_rexmit_rto+0x38>)
 80109c8:	f240 62ad 	movw	r2, #1709	; 0x6ad
 80109cc:	4909      	ldr	r1, [pc, #36]	; (80109f4 <tcp_rexmit_rto+0x3c>)
 80109ce:	480a      	ldr	r0, [pc, #40]	; (80109f8 <tcp_rexmit_rto+0x40>)
 80109d0:	f005 fd1e 	bl	8016410 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80109d4:	6878      	ldr	r0, [r7, #4]
 80109d6:	f7ff ff57 	bl	8010888 <tcp_rexmit_rto_prepare>
 80109da:	4603      	mov	r3, r0
 80109dc:	2b00      	cmp	r3, #0
 80109de:	d102      	bne.n	80109e6 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80109e0:	6878      	ldr	r0, [r7, #4]
 80109e2:	f7ff ffc1 	bl	8010968 <tcp_rexmit_rto_commit>
  }
}
 80109e6:	bf00      	nop
 80109e8:	3708      	adds	r7, #8
 80109ea:	46bd      	mov	sp, r7
 80109ec:	bd80      	pop	{r7, pc}
 80109ee:	bf00      	nop
 80109f0:	08019b0c 	.word	0x08019b0c
 80109f4:	0801a190 	.word	0x0801a190
 80109f8:	08019b60 	.word	0x08019b60

080109fc <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80109fc:	b590      	push	{r4, r7, lr}
 80109fe:	b085      	sub	sp, #20
 8010a00:	af00      	add	r7, sp, #0
 8010a02:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d106      	bne.n	8010a18 <tcp_rexmit+0x1c>
 8010a0a:	4b2f      	ldr	r3, [pc, #188]	; (8010ac8 <tcp_rexmit+0xcc>)
 8010a0c:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8010a10:	492e      	ldr	r1, [pc, #184]	; (8010acc <tcp_rexmit+0xd0>)
 8010a12:	482f      	ldr	r0, [pc, #188]	; (8010ad0 <tcp_rexmit+0xd4>)
 8010a14:	f005 fcfc 	bl	8016410 <iprintf>

  if (pcb->unacked == NULL) {
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	d102      	bne.n	8010a26 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8010a20:	f06f 0305 	mvn.w	r3, #5
 8010a24:	e04c      	b.n	8010ac0 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010a2a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8010a2c:	68b8      	ldr	r0, [r7, #8]
 8010a2e:	f7ff fe2d 	bl	801068c <tcp_output_segment_busy>
 8010a32:	4603      	mov	r3, r0
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d002      	beq.n	8010a3e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8010a38:	f06f 0305 	mvn.w	r3, #5
 8010a3c:	e040      	b.n	8010ac0 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8010a3e:	68bb      	ldr	r3, [r7, #8]
 8010a40:	681a      	ldr	r2, [r3, #0]
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	336c      	adds	r3, #108	; 0x6c
 8010a4a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8010a4c:	e002      	b.n	8010a54 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8010a4e:	68fb      	ldr	r3, [r7, #12]
 8010a50:	681b      	ldr	r3, [r3, #0]
 8010a52:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8010a54:	68fb      	ldr	r3, [r7, #12]
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	d011      	beq.n	8010a80 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8010a5c:	68fb      	ldr	r3, [r7, #12]
 8010a5e:	681b      	ldr	r3, [r3, #0]
 8010a60:	68db      	ldr	r3, [r3, #12]
 8010a62:	685b      	ldr	r3, [r3, #4]
 8010a64:	4618      	mov	r0, r3
 8010a66:	f7f8 fc5a 	bl	800931e <lwip_htonl>
 8010a6a:	4604      	mov	r4, r0
 8010a6c:	68bb      	ldr	r3, [r7, #8]
 8010a6e:	68db      	ldr	r3, [r3, #12]
 8010a70:	685b      	ldr	r3, [r3, #4]
 8010a72:	4618      	mov	r0, r3
 8010a74:	f7f8 fc53 	bl	800931e <lwip_htonl>
 8010a78:	4603      	mov	r3, r0
 8010a7a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	dbe6      	blt.n	8010a4e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8010a80:	68fb      	ldr	r3, [r7, #12]
 8010a82:	681a      	ldr	r2, [r3, #0]
 8010a84:	68bb      	ldr	r3, [r7, #8]
 8010a86:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8010a88:	68fb      	ldr	r3, [r7, #12]
 8010a8a:	68ba      	ldr	r2, [r7, #8]
 8010a8c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8010a8e:	68bb      	ldr	r3, [r7, #8]
 8010a90:	681b      	ldr	r3, [r3, #0]
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d103      	bne.n	8010a9e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	2200      	movs	r2, #0
 8010a9a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010aa4:	2bff      	cmp	r3, #255	; 0xff
 8010aa6:	d007      	beq.n	8010ab8 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010aae:	3301      	adds	r3, #1
 8010ab0:	b2da      	uxtb	r2, r3
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	2200      	movs	r2, #0
 8010abc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8010abe:	2300      	movs	r3, #0
}
 8010ac0:	4618      	mov	r0, r3
 8010ac2:	3714      	adds	r7, #20
 8010ac4:	46bd      	mov	sp, r7
 8010ac6:	bd90      	pop	{r4, r7, pc}
 8010ac8:	08019b0c 	.word	0x08019b0c
 8010acc:	0801a1ac 	.word	0x0801a1ac
 8010ad0:	08019b60 	.word	0x08019b60

08010ad4 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8010ad4:	b580      	push	{r7, lr}
 8010ad6:	b082      	sub	sp, #8
 8010ad8:	af00      	add	r7, sp, #0
 8010ada:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d106      	bne.n	8010af0 <tcp_rexmit_fast+0x1c>
 8010ae2:	4b2a      	ldr	r3, [pc, #168]	; (8010b8c <tcp_rexmit_fast+0xb8>)
 8010ae4:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8010ae8:	4929      	ldr	r1, [pc, #164]	; (8010b90 <tcp_rexmit_fast+0xbc>)
 8010aea:	482a      	ldr	r0, [pc, #168]	; (8010b94 <tcp_rexmit_fast+0xc0>)
 8010aec:	f005 fc90 	bl	8016410 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	d044      	beq.n	8010b82 <tcp_rexmit_fast+0xae>
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	8b5b      	ldrh	r3, [r3, #26]
 8010afc:	f003 0304 	and.w	r3, r3, #4
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	d13e      	bne.n	8010b82 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8010b04:	6878      	ldr	r0, [r7, #4]
 8010b06:	f7ff ff79 	bl	80109fc <tcp_rexmit>
 8010b0a:	4603      	mov	r3, r0
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	d138      	bne.n	8010b82 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010b1c:	4293      	cmp	r3, r2
 8010b1e:	bf28      	it	cs
 8010b20:	4613      	movcs	r3, r2
 8010b22:	b29b      	uxth	r3, r3
 8010b24:	0fda      	lsrs	r2, r3, #31
 8010b26:	4413      	add	r3, r2
 8010b28:	105b      	asrs	r3, r3, #1
 8010b2a:	b29a      	uxth	r2, r3
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8010b38:	461a      	mov	r2, r3
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010b3e:	005b      	lsls	r3, r3, #1
 8010b40:	429a      	cmp	r2, r3
 8010b42:	d206      	bcs.n	8010b52 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010b48:	005b      	lsls	r3, r3, #1
 8010b4a:	b29a      	uxth	r2, r3
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010b5c:	4619      	mov	r1, r3
 8010b5e:	0049      	lsls	r1, r1, #1
 8010b60:	440b      	add	r3, r1
 8010b62:	b29b      	uxth	r3, r3
 8010b64:	4413      	add	r3, r2
 8010b66:	b29a      	uxth	r2, r3
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	8b5b      	ldrh	r3, [r3, #26]
 8010b72:	f043 0304 	orr.w	r3, r3, #4
 8010b76:	b29a      	uxth	r2, r3
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	2200      	movs	r2, #0
 8010b80:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8010b82:	bf00      	nop
 8010b84:	3708      	adds	r7, #8
 8010b86:	46bd      	mov	sp, r7
 8010b88:	bd80      	pop	{r7, pc}
 8010b8a:	bf00      	nop
 8010b8c:	08019b0c 	.word	0x08019b0c
 8010b90:	0801a1c4 	.word	0x0801a1c4
 8010b94:	08019b60 	.word	0x08019b60

08010b98 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8010b98:	b580      	push	{r7, lr}
 8010b9a:	b086      	sub	sp, #24
 8010b9c:	af00      	add	r7, sp, #0
 8010b9e:	60f8      	str	r0, [r7, #12]
 8010ba0:	607b      	str	r3, [r7, #4]
 8010ba2:	460b      	mov	r3, r1
 8010ba4:	817b      	strh	r3, [r7, #10]
 8010ba6:	4613      	mov	r3, r2
 8010ba8:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8010baa:	897a      	ldrh	r2, [r7, #10]
 8010bac:	893b      	ldrh	r3, [r7, #8]
 8010bae:	4413      	add	r3, r2
 8010bb0:	b29b      	uxth	r3, r3
 8010bb2:	3314      	adds	r3, #20
 8010bb4:	b29b      	uxth	r3, r3
 8010bb6:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010bba:	4619      	mov	r1, r3
 8010bbc:	2022      	movs	r0, #34	; 0x22
 8010bbe:	f7f9 fc95 	bl	800a4ec <pbuf_alloc>
 8010bc2:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8010bc4:	697b      	ldr	r3, [r7, #20]
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d04d      	beq.n	8010c66 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8010bca:	897b      	ldrh	r3, [r7, #10]
 8010bcc:	3313      	adds	r3, #19
 8010bce:	697a      	ldr	r2, [r7, #20]
 8010bd0:	8952      	ldrh	r2, [r2, #10]
 8010bd2:	4293      	cmp	r3, r2
 8010bd4:	db06      	blt.n	8010be4 <tcp_output_alloc_header_common+0x4c>
 8010bd6:	4b26      	ldr	r3, [pc, #152]	; (8010c70 <tcp_output_alloc_header_common+0xd8>)
 8010bd8:	f240 7223 	movw	r2, #1827	; 0x723
 8010bdc:	4925      	ldr	r1, [pc, #148]	; (8010c74 <tcp_output_alloc_header_common+0xdc>)
 8010bde:	4826      	ldr	r0, [pc, #152]	; (8010c78 <tcp_output_alloc_header_common+0xe0>)
 8010be0:	f005 fc16 	bl	8016410 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8010be4:	697b      	ldr	r3, [r7, #20]
 8010be6:	685b      	ldr	r3, [r3, #4]
 8010be8:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8010bea:	8c3b      	ldrh	r3, [r7, #32]
 8010bec:	4618      	mov	r0, r3
 8010bee:	f7f8 fb81 	bl	80092f4 <lwip_htons>
 8010bf2:	4603      	mov	r3, r0
 8010bf4:	461a      	mov	r2, r3
 8010bf6:	693b      	ldr	r3, [r7, #16]
 8010bf8:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8010bfa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010bfc:	4618      	mov	r0, r3
 8010bfe:	f7f8 fb79 	bl	80092f4 <lwip_htons>
 8010c02:	4603      	mov	r3, r0
 8010c04:	461a      	mov	r2, r3
 8010c06:	693b      	ldr	r3, [r7, #16]
 8010c08:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8010c0a:	693b      	ldr	r3, [r7, #16]
 8010c0c:	687a      	ldr	r2, [r7, #4]
 8010c0e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8010c10:	68f8      	ldr	r0, [r7, #12]
 8010c12:	f7f8 fb84 	bl	800931e <lwip_htonl>
 8010c16:	4602      	mov	r2, r0
 8010c18:	693b      	ldr	r3, [r7, #16]
 8010c1a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8010c1c:	897b      	ldrh	r3, [r7, #10]
 8010c1e:	089b      	lsrs	r3, r3, #2
 8010c20:	b29b      	uxth	r3, r3
 8010c22:	3305      	adds	r3, #5
 8010c24:	b29b      	uxth	r3, r3
 8010c26:	031b      	lsls	r3, r3, #12
 8010c28:	b29a      	uxth	r2, r3
 8010c2a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010c2e:	b29b      	uxth	r3, r3
 8010c30:	4313      	orrs	r3, r2
 8010c32:	b29b      	uxth	r3, r3
 8010c34:	4618      	mov	r0, r3
 8010c36:	f7f8 fb5d 	bl	80092f4 <lwip_htons>
 8010c3a:	4603      	mov	r3, r0
 8010c3c:	461a      	mov	r2, r3
 8010c3e:	693b      	ldr	r3, [r7, #16]
 8010c40:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8010c42:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010c44:	4618      	mov	r0, r3
 8010c46:	f7f8 fb55 	bl	80092f4 <lwip_htons>
 8010c4a:	4603      	mov	r3, r0
 8010c4c:	461a      	mov	r2, r3
 8010c4e:	693b      	ldr	r3, [r7, #16]
 8010c50:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8010c52:	693b      	ldr	r3, [r7, #16]
 8010c54:	2200      	movs	r2, #0
 8010c56:	741a      	strb	r2, [r3, #16]
 8010c58:	2200      	movs	r2, #0
 8010c5a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8010c5c:	693b      	ldr	r3, [r7, #16]
 8010c5e:	2200      	movs	r2, #0
 8010c60:	749a      	strb	r2, [r3, #18]
 8010c62:	2200      	movs	r2, #0
 8010c64:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8010c66:	697b      	ldr	r3, [r7, #20]
}
 8010c68:	4618      	mov	r0, r3
 8010c6a:	3718      	adds	r7, #24
 8010c6c:	46bd      	mov	sp, r7
 8010c6e:	bd80      	pop	{r7, pc}
 8010c70:	08019b0c 	.word	0x08019b0c
 8010c74:	0801a1e4 	.word	0x0801a1e4
 8010c78:	08019b60 	.word	0x08019b60

08010c7c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8010c7c:	b5b0      	push	{r4, r5, r7, lr}
 8010c7e:	b08a      	sub	sp, #40	; 0x28
 8010c80:	af04      	add	r7, sp, #16
 8010c82:	60f8      	str	r0, [r7, #12]
 8010c84:	607b      	str	r3, [r7, #4]
 8010c86:	460b      	mov	r3, r1
 8010c88:	817b      	strh	r3, [r7, #10]
 8010c8a:	4613      	mov	r3, r2
 8010c8c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8010c8e:	68fb      	ldr	r3, [r7, #12]
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	d106      	bne.n	8010ca2 <tcp_output_alloc_header+0x26>
 8010c94:	4b15      	ldr	r3, [pc, #84]	; (8010cec <tcp_output_alloc_header+0x70>)
 8010c96:	f240 7242 	movw	r2, #1858	; 0x742
 8010c9a:	4915      	ldr	r1, [pc, #84]	; (8010cf0 <tcp_output_alloc_header+0x74>)
 8010c9c:	4815      	ldr	r0, [pc, #84]	; (8010cf4 <tcp_output_alloc_header+0x78>)
 8010c9e:	f005 fbb7 	bl	8016410 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8010ca2:	68fb      	ldr	r3, [r7, #12]
 8010ca4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8010ca6:	68fb      	ldr	r3, [r7, #12]
 8010ca8:	8adb      	ldrh	r3, [r3, #22]
 8010caa:	68fa      	ldr	r2, [r7, #12]
 8010cac:	8b12      	ldrh	r2, [r2, #24]
 8010cae:	68f9      	ldr	r1, [r7, #12]
 8010cb0:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8010cb2:	893d      	ldrh	r5, [r7, #8]
 8010cb4:	897c      	ldrh	r4, [r7, #10]
 8010cb6:	9103      	str	r1, [sp, #12]
 8010cb8:	2110      	movs	r1, #16
 8010cba:	9102      	str	r1, [sp, #8]
 8010cbc:	9201      	str	r2, [sp, #4]
 8010cbe:	9300      	str	r3, [sp, #0]
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	462a      	mov	r2, r5
 8010cc4:	4621      	mov	r1, r4
 8010cc6:	f7ff ff67 	bl	8010b98 <tcp_output_alloc_header_common>
 8010cca:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8010ccc:	697b      	ldr	r3, [r7, #20]
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d006      	beq.n	8010ce0 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8010cd2:	68fb      	ldr	r3, [r7, #12]
 8010cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010cd6:	68fa      	ldr	r2, [r7, #12]
 8010cd8:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8010cda:	441a      	add	r2, r3
 8010cdc:	68fb      	ldr	r3, [r7, #12]
 8010cde:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8010ce0:	697b      	ldr	r3, [r7, #20]
}
 8010ce2:	4618      	mov	r0, r3
 8010ce4:	3718      	adds	r7, #24
 8010ce6:	46bd      	mov	sp, r7
 8010ce8:	bdb0      	pop	{r4, r5, r7, pc}
 8010cea:	bf00      	nop
 8010cec:	08019b0c 	.word	0x08019b0c
 8010cf0:	0801a214 	.word	0x0801a214
 8010cf4:	08019b60 	.word	0x08019b60

08010cf8 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8010cf8:	b580      	push	{r7, lr}
 8010cfa:	b088      	sub	sp, #32
 8010cfc:	af00      	add	r7, sp, #0
 8010cfe:	60f8      	str	r0, [r7, #12]
 8010d00:	60b9      	str	r1, [r7, #8]
 8010d02:	4611      	mov	r1, r2
 8010d04:	461a      	mov	r2, r3
 8010d06:	460b      	mov	r3, r1
 8010d08:	71fb      	strb	r3, [r7, #7]
 8010d0a:	4613      	mov	r3, r2
 8010d0c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8010d0e:	2300      	movs	r3, #0
 8010d10:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8010d12:	68bb      	ldr	r3, [r7, #8]
 8010d14:	2b00      	cmp	r3, #0
 8010d16:	d106      	bne.n	8010d26 <tcp_output_fill_options+0x2e>
 8010d18:	4b13      	ldr	r3, [pc, #76]	; (8010d68 <tcp_output_fill_options+0x70>)
 8010d1a:	f240 7256 	movw	r2, #1878	; 0x756
 8010d1e:	4913      	ldr	r1, [pc, #76]	; (8010d6c <tcp_output_fill_options+0x74>)
 8010d20:	4813      	ldr	r0, [pc, #76]	; (8010d70 <tcp_output_fill_options+0x78>)
 8010d22:	f005 fb75 	bl	8016410 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8010d26:	68bb      	ldr	r3, [r7, #8]
 8010d28:	685b      	ldr	r3, [r3, #4]
 8010d2a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8010d2c:	69bb      	ldr	r3, [r7, #24]
 8010d2e:	3314      	adds	r3, #20
 8010d30:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8010d32:	69bb      	ldr	r3, [r7, #24]
 8010d34:	f103 0214 	add.w	r2, r3, #20
 8010d38:	8bfb      	ldrh	r3, [r7, #30]
 8010d3a:	009b      	lsls	r3, r3, #2
 8010d3c:	4619      	mov	r1, r3
 8010d3e:	79fb      	ldrb	r3, [r7, #7]
 8010d40:	009b      	lsls	r3, r3, #2
 8010d42:	f003 0304 	and.w	r3, r3, #4
 8010d46:	440b      	add	r3, r1
 8010d48:	4413      	add	r3, r2
 8010d4a:	697a      	ldr	r2, [r7, #20]
 8010d4c:	429a      	cmp	r2, r3
 8010d4e:	d006      	beq.n	8010d5e <tcp_output_fill_options+0x66>
 8010d50:	4b05      	ldr	r3, [pc, #20]	; (8010d68 <tcp_output_fill_options+0x70>)
 8010d52:	f240 7275 	movw	r2, #1909	; 0x775
 8010d56:	4907      	ldr	r1, [pc, #28]	; (8010d74 <tcp_output_fill_options+0x7c>)
 8010d58:	4805      	ldr	r0, [pc, #20]	; (8010d70 <tcp_output_fill_options+0x78>)
 8010d5a:	f005 fb59 	bl	8016410 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8010d5e:	bf00      	nop
 8010d60:	3720      	adds	r7, #32
 8010d62:	46bd      	mov	sp, r7
 8010d64:	bd80      	pop	{r7, pc}
 8010d66:	bf00      	nop
 8010d68:	08019b0c 	.word	0x08019b0c
 8010d6c:	0801a23c 	.word	0x0801a23c
 8010d70:	08019b60 	.word	0x08019b60
 8010d74:	0801a134 	.word	0x0801a134

08010d78 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8010d78:	b580      	push	{r7, lr}
 8010d7a:	b08a      	sub	sp, #40	; 0x28
 8010d7c:	af04      	add	r7, sp, #16
 8010d7e:	60f8      	str	r0, [r7, #12]
 8010d80:	60b9      	str	r1, [r7, #8]
 8010d82:	607a      	str	r2, [r7, #4]
 8010d84:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8010d86:	68bb      	ldr	r3, [r7, #8]
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d106      	bne.n	8010d9a <tcp_output_control_segment+0x22>
 8010d8c:	4b1c      	ldr	r3, [pc, #112]	; (8010e00 <tcp_output_control_segment+0x88>)
 8010d8e:	f240 7287 	movw	r2, #1927	; 0x787
 8010d92:	491c      	ldr	r1, [pc, #112]	; (8010e04 <tcp_output_control_segment+0x8c>)
 8010d94:	481c      	ldr	r0, [pc, #112]	; (8010e08 <tcp_output_control_segment+0x90>)
 8010d96:	f005 fb3b 	bl	8016410 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8010d9a:	683a      	ldr	r2, [r7, #0]
 8010d9c:	6879      	ldr	r1, [r7, #4]
 8010d9e:	68f8      	ldr	r0, [r7, #12]
 8010da0:	f7fe fae8 	bl	800f374 <tcp_route>
 8010da4:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8010da6:	693b      	ldr	r3, [r7, #16]
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	d102      	bne.n	8010db2 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8010dac:	23fc      	movs	r3, #252	; 0xfc
 8010dae:	75fb      	strb	r3, [r7, #23]
 8010db0:	e01c      	b.n	8010dec <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8010db2:	68fb      	ldr	r3, [r7, #12]
 8010db4:	2b00      	cmp	r3, #0
 8010db6:	d006      	beq.n	8010dc6 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8010db8:	68fb      	ldr	r3, [r7, #12]
 8010dba:	7adb      	ldrb	r3, [r3, #11]
 8010dbc:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8010dbe:	68fb      	ldr	r3, [r7, #12]
 8010dc0:	7a9b      	ldrb	r3, [r3, #10]
 8010dc2:	757b      	strb	r3, [r7, #21]
 8010dc4:	e003      	b.n	8010dce <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8010dc6:	23ff      	movs	r3, #255	; 0xff
 8010dc8:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8010dca:	2300      	movs	r3, #0
 8010dcc:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8010dce:	7dba      	ldrb	r2, [r7, #22]
 8010dd0:	693b      	ldr	r3, [r7, #16]
 8010dd2:	9302      	str	r3, [sp, #8]
 8010dd4:	2306      	movs	r3, #6
 8010dd6:	9301      	str	r3, [sp, #4]
 8010dd8:	7d7b      	ldrb	r3, [r7, #21]
 8010dda:	9300      	str	r3, [sp, #0]
 8010ddc:	4613      	mov	r3, r2
 8010dde:	683a      	ldr	r2, [r7, #0]
 8010de0:	6879      	ldr	r1, [r7, #4]
 8010de2:	68b8      	ldr	r0, [r7, #8]
 8010de4:	f004 f990 	bl	8015108 <ip4_output_if>
 8010de8:	4603      	mov	r3, r0
 8010dea:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8010dec:	68b8      	ldr	r0, [r7, #8]
 8010dee:	f7f9 fe61 	bl	800aab4 <pbuf_free>
  return err;
 8010df2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010df6:	4618      	mov	r0, r3
 8010df8:	3718      	adds	r7, #24
 8010dfa:	46bd      	mov	sp, r7
 8010dfc:	bd80      	pop	{r7, pc}
 8010dfe:	bf00      	nop
 8010e00:	08019b0c 	.word	0x08019b0c
 8010e04:	0801a264 	.word	0x0801a264
 8010e08:	08019b60 	.word	0x08019b60

08010e0c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8010e0c:	b590      	push	{r4, r7, lr}
 8010e0e:	b08b      	sub	sp, #44	; 0x2c
 8010e10:	af04      	add	r7, sp, #16
 8010e12:	60f8      	str	r0, [r7, #12]
 8010e14:	60b9      	str	r1, [r7, #8]
 8010e16:	607a      	str	r2, [r7, #4]
 8010e18:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8010e1a:	683b      	ldr	r3, [r7, #0]
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d106      	bne.n	8010e2e <tcp_rst+0x22>
 8010e20:	4b1f      	ldr	r3, [pc, #124]	; (8010ea0 <tcp_rst+0x94>)
 8010e22:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8010e26:	491f      	ldr	r1, [pc, #124]	; (8010ea4 <tcp_rst+0x98>)
 8010e28:	481f      	ldr	r0, [pc, #124]	; (8010ea8 <tcp_rst+0x9c>)
 8010e2a:	f005 faf1 	bl	8016410 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8010e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d106      	bne.n	8010e42 <tcp_rst+0x36>
 8010e34:	4b1a      	ldr	r3, [pc, #104]	; (8010ea0 <tcp_rst+0x94>)
 8010e36:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8010e3a:	491c      	ldr	r1, [pc, #112]	; (8010eac <tcp_rst+0xa0>)
 8010e3c:	481a      	ldr	r0, [pc, #104]	; (8010ea8 <tcp_rst+0x9c>)
 8010e3e:	f005 fae7 	bl	8016410 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010e42:	2300      	movs	r3, #0
 8010e44:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8010e46:	f246 0308 	movw	r3, #24584	; 0x6008
 8010e4a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8010e4c:	7dfb      	ldrb	r3, [r7, #23]
 8010e4e:	b29c      	uxth	r4, r3
 8010e50:	68b8      	ldr	r0, [r7, #8]
 8010e52:	f7f8 fa64 	bl	800931e <lwip_htonl>
 8010e56:	4602      	mov	r2, r0
 8010e58:	8abb      	ldrh	r3, [r7, #20]
 8010e5a:	9303      	str	r3, [sp, #12]
 8010e5c:	2314      	movs	r3, #20
 8010e5e:	9302      	str	r3, [sp, #8]
 8010e60:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8010e62:	9301      	str	r3, [sp, #4]
 8010e64:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010e66:	9300      	str	r3, [sp, #0]
 8010e68:	4613      	mov	r3, r2
 8010e6a:	2200      	movs	r2, #0
 8010e6c:	4621      	mov	r1, r4
 8010e6e:	6878      	ldr	r0, [r7, #4]
 8010e70:	f7ff fe92 	bl	8010b98 <tcp_output_alloc_header_common>
 8010e74:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8010e76:	693b      	ldr	r3, [r7, #16]
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	d00c      	beq.n	8010e96 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8010e7c:	7dfb      	ldrb	r3, [r7, #23]
 8010e7e:	2200      	movs	r2, #0
 8010e80:	6939      	ldr	r1, [r7, #16]
 8010e82:	68f8      	ldr	r0, [r7, #12]
 8010e84:	f7ff ff38 	bl	8010cf8 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8010e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e8a:	683a      	ldr	r2, [r7, #0]
 8010e8c:	6939      	ldr	r1, [r7, #16]
 8010e8e:	68f8      	ldr	r0, [r7, #12]
 8010e90:	f7ff ff72 	bl	8010d78 <tcp_output_control_segment>
 8010e94:	e000      	b.n	8010e98 <tcp_rst+0x8c>
    return;
 8010e96:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8010e98:	371c      	adds	r7, #28
 8010e9a:	46bd      	mov	sp, r7
 8010e9c:	bd90      	pop	{r4, r7, pc}
 8010e9e:	bf00      	nop
 8010ea0:	08019b0c 	.word	0x08019b0c
 8010ea4:	0801a290 	.word	0x0801a290
 8010ea8:	08019b60 	.word	0x08019b60
 8010eac:	0801a2ac 	.word	0x0801a2ac

08010eb0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8010eb0:	b590      	push	{r4, r7, lr}
 8010eb2:	b087      	sub	sp, #28
 8010eb4:	af00      	add	r7, sp, #0
 8010eb6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8010eb8:	2300      	movs	r3, #0
 8010eba:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8010ebc:	2300      	movs	r3, #0
 8010ebe:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	d106      	bne.n	8010ed4 <tcp_send_empty_ack+0x24>
 8010ec6:	4b28      	ldr	r3, [pc, #160]	; (8010f68 <tcp_send_empty_ack+0xb8>)
 8010ec8:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8010ecc:	4927      	ldr	r1, [pc, #156]	; (8010f6c <tcp_send_empty_ack+0xbc>)
 8010ece:	4828      	ldr	r0, [pc, #160]	; (8010f70 <tcp_send_empty_ack+0xc0>)
 8010ed0:	f005 fa9e 	bl	8016410 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010ed4:	7dfb      	ldrb	r3, [r7, #23]
 8010ed6:	009b      	lsls	r3, r3, #2
 8010ed8:	b2db      	uxtb	r3, r3
 8010eda:	f003 0304 	and.w	r3, r3, #4
 8010ede:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8010ee0:	7d7b      	ldrb	r3, [r7, #21]
 8010ee2:	b29c      	uxth	r4, r3
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010ee8:	4618      	mov	r0, r3
 8010eea:	f7f8 fa18 	bl	800931e <lwip_htonl>
 8010eee:	4603      	mov	r3, r0
 8010ef0:	2200      	movs	r2, #0
 8010ef2:	4621      	mov	r1, r4
 8010ef4:	6878      	ldr	r0, [r7, #4]
 8010ef6:	f7ff fec1 	bl	8010c7c <tcp_output_alloc_header>
 8010efa:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010efc:	693b      	ldr	r3, [r7, #16]
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	d109      	bne.n	8010f16 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	8b5b      	ldrh	r3, [r3, #26]
 8010f06:	f043 0303 	orr.w	r3, r3, #3
 8010f0a:	b29a      	uxth	r2, r3
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8010f10:	f06f 0301 	mvn.w	r3, #1
 8010f14:	e023      	b.n	8010f5e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8010f16:	7dbb      	ldrb	r3, [r7, #22]
 8010f18:	7dfa      	ldrb	r2, [r7, #23]
 8010f1a:	6939      	ldr	r1, [r7, #16]
 8010f1c:	6878      	ldr	r0, [r7, #4]
 8010f1e:	f7ff feeb 	bl	8010cf8 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8010f22:	687a      	ldr	r2, [r7, #4]
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	3304      	adds	r3, #4
 8010f28:	6939      	ldr	r1, [r7, #16]
 8010f2a:	6878      	ldr	r0, [r7, #4]
 8010f2c:	f7ff ff24 	bl	8010d78 <tcp_output_control_segment>
 8010f30:	4603      	mov	r3, r0
 8010f32:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8010f34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	d007      	beq.n	8010f4c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	8b5b      	ldrh	r3, [r3, #26]
 8010f40:	f043 0303 	orr.w	r3, r3, #3
 8010f44:	b29a      	uxth	r2, r3
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	835a      	strh	r2, [r3, #26]
 8010f4a:	e006      	b.n	8010f5a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	8b5b      	ldrh	r3, [r3, #26]
 8010f50:	f023 0303 	bic.w	r3, r3, #3
 8010f54:	b29a      	uxth	r2, r3
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8010f5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010f5e:	4618      	mov	r0, r3
 8010f60:	371c      	adds	r7, #28
 8010f62:	46bd      	mov	sp, r7
 8010f64:	bd90      	pop	{r4, r7, pc}
 8010f66:	bf00      	nop
 8010f68:	08019b0c 	.word	0x08019b0c
 8010f6c:	0801a2c8 	.word	0x0801a2c8
 8010f70:	08019b60 	.word	0x08019b60

08010f74 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8010f74:	b590      	push	{r4, r7, lr}
 8010f76:	b087      	sub	sp, #28
 8010f78:	af00      	add	r7, sp, #0
 8010f7a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010f7c:	2300      	movs	r3, #0
 8010f7e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d106      	bne.n	8010f94 <tcp_keepalive+0x20>
 8010f86:	4b18      	ldr	r3, [pc, #96]	; (8010fe8 <tcp_keepalive+0x74>)
 8010f88:	f640 0224 	movw	r2, #2084	; 0x824
 8010f8c:	4917      	ldr	r1, [pc, #92]	; (8010fec <tcp_keepalive+0x78>)
 8010f8e:	4818      	ldr	r0, [pc, #96]	; (8010ff0 <tcp_keepalive+0x7c>)
 8010f90:	f005 fa3e 	bl	8016410 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8010f94:	7dfb      	ldrb	r3, [r7, #23]
 8010f96:	b29c      	uxth	r4, r3
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010f9c:	3b01      	subs	r3, #1
 8010f9e:	4618      	mov	r0, r3
 8010fa0:	f7f8 f9bd 	bl	800931e <lwip_htonl>
 8010fa4:	4603      	mov	r3, r0
 8010fa6:	2200      	movs	r2, #0
 8010fa8:	4621      	mov	r1, r4
 8010faa:	6878      	ldr	r0, [r7, #4]
 8010fac:	f7ff fe66 	bl	8010c7c <tcp_output_alloc_header>
 8010fb0:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010fb2:	693b      	ldr	r3, [r7, #16]
 8010fb4:	2b00      	cmp	r3, #0
 8010fb6:	d102      	bne.n	8010fbe <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8010fb8:	f04f 33ff 	mov.w	r3, #4294967295
 8010fbc:	e010      	b.n	8010fe0 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8010fbe:	7dfb      	ldrb	r3, [r7, #23]
 8010fc0:	2200      	movs	r2, #0
 8010fc2:	6939      	ldr	r1, [r7, #16]
 8010fc4:	6878      	ldr	r0, [r7, #4]
 8010fc6:	f7ff fe97 	bl	8010cf8 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8010fca:	687a      	ldr	r2, [r7, #4]
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	3304      	adds	r3, #4
 8010fd0:	6939      	ldr	r1, [r7, #16]
 8010fd2:	6878      	ldr	r0, [r7, #4]
 8010fd4:	f7ff fed0 	bl	8010d78 <tcp_output_control_segment>
 8010fd8:	4603      	mov	r3, r0
 8010fda:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8010fdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010fe0:	4618      	mov	r0, r3
 8010fe2:	371c      	adds	r7, #28
 8010fe4:	46bd      	mov	sp, r7
 8010fe6:	bd90      	pop	{r4, r7, pc}
 8010fe8:	08019b0c 	.word	0x08019b0c
 8010fec:	0801a2e8 	.word	0x0801a2e8
 8010ff0:	08019b60 	.word	0x08019b60

08010ff4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8010ff4:	b590      	push	{r4, r7, lr}
 8010ff6:	b08b      	sub	sp, #44	; 0x2c
 8010ff8:	af00      	add	r7, sp, #0
 8010ffa:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010ffc:	2300      	movs	r3, #0
 8010ffe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	2b00      	cmp	r3, #0
 8011006:	d106      	bne.n	8011016 <tcp_zero_window_probe+0x22>
 8011008:	4b4c      	ldr	r3, [pc, #304]	; (801113c <tcp_zero_window_probe+0x148>)
 801100a:	f640 024f 	movw	r2, #2127	; 0x84f
 801100e:	494c      	ldr	r1, [pc, #304]	; (8011140 <tcp_zero_window_probe+0x14c>)
 8011010:	484c      	ldr	r0, [pc, #304]	; (8011144 <tcp_zero_window_probe+0x150>)
 8011012:	f005 f9fd 	bl	8016410 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801101a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801101c:	6a3b      	ldr	r3, [r7, #32]
 801101e:	2b00      	cmp	r3, #0
 8011020:	d101      	bne.n	8011026 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8011022:	2300      	movs	r3, #0
 8011024:	e086      	b.n	8011134 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801102c:	2bff      	cmp	r3, #255	; 0xff
 801102e:	d007      	beq.n	8011040 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8011036:	3301      	adds	r3, #1
 8011038:	b2da      	uxtb	r2, r3
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8011040:	6a3b      	ldr	r3, [r7, #32]
 8011042:	68db      	ldr	r3, [r3, #12]
 8011044:	899b      	ldrh	r3, [r3, #12]
 8011046:	b29b      	uxth	r3, r3
 8011048:	4618      	mov	r0, r3
 801104a:	f7f8 f953 	bl	80092f4 <lwip_htons>
 801104e:	4603      	mov	r3, r0
 8011050:	b2db      	uxtb	r3, r3
 8011052:	f003 0301 	and.w	r3, r3, #1
 8011056:	2b00      	cmp	r3, #0
 8011058:	d005      	beq.n	8011066 <tcp_zero_window_probe+0x72>
 801105a:	6a3b      	ldr	r3, [r7, #32]
 801105c:	891b      	ldrh	r3, [r3, #8]
 801105e:	2b00      	cmp	r3, #0
 8011060:	d101      	bne.n	8011066 <tcp_zero_window_probe+0x72>
 8011062:	2301      	movs	r3, #1
 8011064:	e000      	b.n	8011068 <tcp_zero_window_probe+0x74>
 8011066:	2300      	movs	r3, #0
 8011068:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801106a:	7ffb      	ldrb	r3, [r7, #31]
 801106c:	2b00      	cmp	r3, #0
 801106e:	bf0c      	ite	eq
 8011070:	2301      	moveq	r3, #1
 8011072:	2300      	movne	r3, #0
 8011074:	b2db      	uxtb	r3, r3
 8011076:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8011078:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801107c:	b299      	uxth	r1, r3
 801107e:	6a3b      	ldr	r3, [r7, #32]
 8011080:	68db      	ldr	r3, [r3, #12]
 8011082:	685b      	ldr	r3, [r3, #4]
 8011084:	8bba      	ldrh	r2, [r7, #28]
 8011086:	6878      	ldr	r0, [r7, #4]
 8011088:	f7ff fdf8 	bl	8010c7c <tcp_output_alloc_header>
 801108c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801108e:	69bb      	ldr	r3, [r7, #24]
 8011090:	2b00      	cmp	r3, #0
 8011092:	d102      	bne.n	801109a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8011094:	f04f 33ff 	mov.w	r3, #4294967295
 8011098:	e04c      	b.n	8011134 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801109a:	69bb      	ldr	r3, [r7, #24]
 801109c:	685b      	ldr	r3, [r3, #4]
 801109e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80110a0:	7ffb      	ldrb	r3, [r7, #31]
 80110a2:	2b00      	cmp	r3, #0
 80110a4:	d011      	beq.n	80110ca <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80110a6:	697b      	ldr	r3, [r7, #20]
 80110a8:	899b      	ldrh	r3, [r3, #12]
 80110aa:	b29b      	uxth	r3, r3
 80110ac:	b21b      	sxth	r3, r3
 80110ae:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80110b2:	b21c      	sxth	r4, r3
 80110b4:	2011      	movs	r0, #17
 80110b6:	f7f8 f91d 	bl	80092f4 <lwip_htons>
 80110ba:	4603      	mov	r3, r0
 80110bc:	b21b      	sxth	r3, r3
 80110be:	4323      	orrs	r3, r4
 80110c0:	b21b      	sxth	r3, r3
 80110c2:	b29a      	uxth	r2, r3
 80110c4:	697b      	ldr	r3, [r7, #20]
 80110c6:	819a      	strh	r2, [r3, #12]
 80110c8:	e010      	b.n	80110ec <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80110ca:	69bb      	ldr	r3, [r7, #24]
 80110cc:	685b      	ldr	r3, [r3, #4]
 80110ce:	3314      	adds	r3, #20
 80110d0:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80110d2:	6a3b      	ldr	r3, [r7, #32]
 80110d4:	6858      	ldr	r0, [r3, #4]
 80110d6:	6a3b      	ldr	r3, [r7, #32]
 80110d8:	685b      	ldr	r3, [r3, #4]
 80110da:	891a      	ldrh	r2, [r3, #8]
 80110dc:	6a3b      	ldr	r3, [r7, #32]
 80110de:	891b      	ldrh	r3, [r3, #8]
 80110e0:	1ad3      	subs	r3, r2, r3
 80110e2:	b29b      	uxth	r3, r3
 80110e4:	2201      	movs	r2, #1
 80110e6:	6939      	ldr	r1, [r7, #16]
 80110e8:	f7f9 feea 	bl	800aec0 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80110ec:	6a3b      	ldr	r3, [r7, #32]
 80110ee:	68db      	ldr	r3, [r3, #12]
 80110f0:	685b      	ldr	r3, [r3, #4]
 80110f2:	4618      	mov	r0, r3
 80110f4:	f7f8 f913 	bl	800931e <lwip_htonl>
 80110f8:	4603      	mov	r3, r0
 80110fa:	3301      	adds	r3, #1
 80110fc:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011102:	68fb      	ldr	r3, [r7, #12]
 8011104:	1ad3      	subs	r3, r2, r3
 8011106:	2b00      	cmp	r3, #0
 8011108:	da02      	bge.n	8011110 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	68fa      	ldr	r2, [r7, #12]
 801110e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011110:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011114:	2200      	movs	r2, #0
 8011116:	69b9      	ldr	r1, [r7, #24]
 8011118:	6878      	ldr	r0, [r7, #4]
 801111a:	f7ff fded 	bl	8010cf8 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801111e:	687a      	ldr	r2, [r7, #4]
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	3304      	adds	r3, #4
 8011124:	69b9      	ldr	r1, [r7, #24]
 8011126:	6878      	ldr	r0, [r7, #4]
 8011128:	f7ff fe26 	bl	8010d78 <tcp_output_control_segment>
 801112c:	4603      	mov	r3, r0
 801112e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011130:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8011134:	4618      	mov	r0, r3
 8011136:	372c      	adds	r7, #44	; 0x2c
 8011138:	46bd      	mov	sp, r7
 801113a:	bd90      	pop	{r4, r7, pc}
 801113c:	08019b0c 	.word	0x08019b0c
 8011140:	0801a304 	.word	0x0801a304
 8011144:	08019b60 	.word	0x08019b60

08011148 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8011148:	b580      	push	{r7, lr}
 801114a:	b082      	sub	sp, #8
 801114c:	af00      	add	r7, sp, #0
 801114e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8011150:	f7fa f808 	bl	800b164 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8011154:	4b0a      	ldr	r3, [pc, #40]	; (8011180 <tcpip_tcp_timer+0x38>)
 8011156:	681b      	ldr	r3, [r3, #0]
 8011158:	2b00      	cmp	r3, #0
 801115a:	d103      	bne.n	8011164 <tcpip_tcp_timer+0x1c>
 801115c:	4b09      	ldr	r3, [pc, #36]	; (8011184 <tcpip_tcp_timer+0x3c>)
 801115e:	681b      	ldr	r3, [r3, #0]
 8011160:	2b00      	cmp	r3, #0
 8011162:	d005      	beq.n	8011170 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011164:	2200      	movs	r2, #0
 8011166:	4908      	ldr	r1, [pc, #32]	; (8011188 <tcpip_tcp_timer+0x40>)
 8011168:	20fa      	movs	r0, #250	; 0xfa
 801116a:	f000 f8f3 	bl	8011354 <sys_timeout>
 801116e:	e003      	b.n	8011178 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8011170:	4b06      	ldr	r3, [pc, #24]	; (801118c <tcpip_tcp_timer+0x44>)
 8011172:	2200      	movs	r2, #0
 8011174:	601a      	str	r2, [r3, #0]
  }
}
 8011176:	bf00      	nop
 8011178:	bf00      	nop
 801117a:	3708      	adds	r7, #8
 801117c:	46bd      	mov	sp, r7
 801117e:	bd80      	pop	{r7, pc}
 8011180:	2001aec0 	.word	0x2001aec0
 8011184:	2001aec4 	.word	0x2001aec4
 8011188:	08011149 	.word	0x08011149
 801118c:	2001af0c 	.word	0x2001af0c

08011190 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8011190:	b580      	push	{r7, lr}
 8011192:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8011194:	4b0a      	ldr	r3, [pc, #40]	; (80111c0 <tcp_timer_needed+0x30>)
 8011196:	681b      	ldr	r3, [r3, #0]
 8011198:	2b00      	cmp	r3, #0
 801119a:	d10f      	bne.n	80111bc <tcp_timer_needed+0x2c>
 801119c:	4b09      	ldr	r3, [pc, #36]	; (80111c4 <tcp_timer_needed+0x34>)
 801119e:	681b      	ldr	r3, [r3, #0]
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d103      	bne.n	80111ac <tcp_timer_needed+0x1c>
 80111a4:	4b08      	ldr	r3, [pc, #32]	; (80111c8 <tcp_timer_needed+0x38>)
 80111a6:	681b      	ldr	r3, [r3, #0]
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	d007      	beq.n	80111bc <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80111ac:	4b04      	ldr	r3, [pc, #16]	; (80111c0 <tcp_timer_needed+0x30>)
 80111ae:	2201      	movs	r2, #1
 80111b0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80111b2:	2200      	movs	r2, #0
 80111b4:	4905      	ldr	r1, [pc, #20]	; (80111cc <tcp_timer_needed+0x3c>)
 80111b6:	20fa      	movs	r0, #250	; 0xfa
 80111b8:	f000 f8cc 	bl	8011354 <sys_timeout>
  }
}
 80111bc:	bf00      	nop
 80111be:	bd80      	pop	{r7, pc}
 80111c0:	2001af0c 	.word	0x2001af0c
 80111c4:	2001aec0 	.word	0x2001aec0
 80111c8:	2001aec4 	.word	0x2001aec4
 80111cc:	08011149 	.word	0x08011149

080111d0 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80111d0:	b580      	push	{r7, lr}
 80111d2:	b086      	sub	sp, #24
 80111d4:	af00      	add	r7, sp, #0
 80111d6:	60f8      	str	r0, [r7, #12]
 80111d8:	60b9      	str	r1, [r7, #8]
 80111da:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80111dc:	200a      	movs	r0, #10
 80111de:	f7f8 fd67 	bl	8009cb0 <memp_malloc>
 80111e2:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80111e4:	693b      	ldr	r3, [r7, #16]
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	d109      	bne.n	80111fe <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80111ea:	693b      	ldr	r3, [r7, #16]
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	d151      	bne.n	8011294 <sys_timeout_abs+0xc4>
 80111f0:	4b2a      	ldr	r3, [pc, #168]	; (801129c <sys_timeout_abs+0xcc>)
 80111f2:	22be      	movs	r2, #190	; 0xbe
 80111f4:	492a      	ldr	r1, [pc, #168]	; (80112a0 <sys_timeout_abs+0xd0>)
 80111f6:	482b      	ldr	r0, [pc, #172]	; (80112a4 <sys_timeout_abs+0xd4>)
 80111f8:	f005 f90a 	bl	8016410 <iprintf>
    return;
 80111fc:	e04a      	b.n	8011294 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80111fe:	693b      	ldr	r3, [r7, #16]
 8011200:	2200      	movs	r2, #0
 8011202:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8011204:	693b      	ldr	r3, [r7, #16]
 8011206:	68ba      	ldr	r2, [r7, #8]
 8011208:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801120a:	693b      	ldr	r3, [r7, #16]
 801120c:	687a      	ldr	r2, [r7, #4]
 801120e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8011210:	693b      	ldr	r3, [r7, #16]
 8011212:	68fa      	ldr	r2, [r7, #12]
 8011214:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8011216:	4b24      	ldr	r3, [pc, #144]	; (80112a8 <sys_timeout_abs+0xd8>)
 8011218:	681b      	ldr	r3, [r3, #0]
 801121a:	2b00      	cmp	r3, #0
 801121c:	d103      	bne.n	8011226 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801121e:	4a22      	ldr	r2, [pc, #136]	; (80112a8 <sys_timeout_abs+0xd8>)
 8011220:	693b      	ldr	r3, [r7, #16]
 8011222:	6013      	str	r3, [r2, #0]
    return;
 8011224:	e037      	b.n	8011296 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8011226:	693b      	ldr	r3, [r7, #16]
 8011228:	685a      	ldr	r2, [r3, #4]
 801122a:	4b1f      	ldr	r3, [pc, #124]	; (80112a8 <sys_timeout_abs+0xd8>)
 801122c:	681b      	ldr	r3, [r3, #0]
 801122e:	685b      	ldr	r3, [r3, #4]
 8011230:	1ad3      	subs	r3, r2, r3
 8011232:	0fdb      	lsrs	r3, r3, #31
 8011234:	f003 0301 	and.w	r3, r3, #1
 8011238:	b2db      	uxtb	r3, r3
 801123a:	2b00      	cmp	r3, #0
 801123c:	d007      	beq.n	801124e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801123e:	4b1a      	ldr	r3, [pc, #104]	; (80112a8 <sys_timeout_abs+0xd8>)
 8011240:	681a      	ldr	r2, [r3, #0]
 8011242:	693b      	ldr	r3, [r7, #16]
 8011244:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8011246:	4a18      	ldr	r2, [pc, #96]	; (80112a8 <sys_timeout_abs+0xd8>)
 8011248:	693b      	ldr	r3, [r7, #16]
 801124a:	6013      	str	r3, [r2, #0]
 801124c:	e023      	b.n	8011296 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801124e:	4b16      	ldr	r3, [pc, #88]	; (80112a8 <sys_timeout_abs+0xd8>)
 8011250:	681b      	ldr	r3, [r3, #0]
 8011252:	617b      	str	r3, [r7, #20]
 8011254:	e01a      	b.n	801128c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8011256:	697b      	ldr	r3, [r7, #20]
 8011258:	681b      	ldr	r3, [r3, #0]
 801125a:	2b00      	cmp	r3, #0
 801125c:	d00b      	beq.n	8011276 <sys_timeout_abs+0xa6>
 801125e:	693b      	ldr	r3, [r7, #16]
 8011260:	685a      	ldr	r2, [r3, #4]
 8011262:	697b      	ldr	r3, [r7, #20]
 8011264:	681b      	ldr	r3, [r3, #0]
 8011266:	685b      	ldr	r3, [r3, #4]
 8011268:	1ad3      	subs	r3, r2, r3
 801126a:	0fdb      	lsrs	r3, r3, #31
 801126c:	f003 0301 	and.w	r3, r3, #1
 8011270:	b2db      	uxtb	r3, r3
 8011272:	2b00      	cmp	r3, #0
 8011274:	d007      	beq.n	8011286 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8011276:	697b      	ldr	r3, [r7, #20]
 8011278:	681a      	ldr	r2, [r3, #0]
 801127a:	693b      	ldr	r3, [r7, #16]
 801127c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801127e:	697b      	ldr	r3, [r7, #20]
 8011280:	693a      	ldr	r2, [r7, #16]
 8011282:	601a      	str	r2, [r3, #0]
        break;
 8011284:	e007      	b.n	8011296 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8011286:	697b      	ldr	r3, [r7, #20]
 8011288:	681b      	ldr	r3, [r3, #0]
 801128a:	617b      	str	r3, [r7, #20]
 801128c:	697b      	ldr	r3, [r7, #20]
 801128e:	2b00      	cmp	r3, #0
 8011290:	d1e1      	bne.n	8011256 <sys_timeout_abs+0x86>
 8011292:	e000      	b.n	8011296 <sys_timeout_abs+0xc6>
    return;
 8011294:	bf00      	nop
      }
    }
  }
}
 8011296:	3718      	adds	r7, #24
 8011298:	46bd      	mov	sp, r7
 801129a:	bd80      	pop	{r7, pc}
 801129c:	0801a328 	.word	0x0801a328
 80112a0:	0801a35c 	.word	0x0801a35c
 80112a4:	0801a39c 	.word	0x0801a39c
 80112a8:	2001af04 	.word	0x2001af04

080112ac <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80112ac:	b580      	push	{r7, lr}
 80112ae:	b086      	sub	sp, #24
 80112b0:	af00      	add	r7, sp, #0
 80112b2:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80112b8:	697b      	ldr	r3, [r7, #20]
 80112ba:	685b      	ldr	r3, [r3, #4]
 80112bc:	4798      	blx	r3

  now = sys_now();
 80112be:	f7f2 faa3 	bl	8003808 <sys_now>
 80112c2:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80112c4:	697b      	ldr	r3, [r7, #20]
 80112c6:	681a      	ldr	r2, [r3, #0]
 80112c8:	4b0f      	ldr	r3, [pc, #60]	; (8011308 <lwip_cyclic_timer+0x5c>)
 80112ca:	681b      	ldr	r3, [r3, #0]
 80112cc:	4413      	add	r3, r2
 80112ce:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80112d0:	68fa      	ldr	r2, [r7, #12]
 80112d2:	693b      	ldr	r3, [r7, #16]
 80112d4:	1ad3      	subs	r3, r2, r3
 80112d6:	0fdb      	lsrs	r3, r3, #31
 80112d8:	f003 0301 	and.w	r3, r3, #1
 80112dc:	b2db      	uxtb	r3, r3
 80112de:	2b00      	cmp	r3, #0
 80112e0:	d009      	beq.n	80112f6 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80112e2:	697b      	ldr	r3, [r7, #20]
 80112e4:	681a      	ldr	r2, [r3, #0]
 80112e6:	693b      	ldr	r3, [r7, #16]
 80112e8:	4413      	add	r3, r2
 80112ea:	687a      	ldr	r2, [r7, #4]
 80112ec:	4907      	ldr	r1, [pc, #28]	; (801130c <lwip_cyclic_timer+0x60>)
 80112ee:	4618      	mov	r0, r3
 80112f0:	f7ff ff6e 	bl	80111d0 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80112f4:	e004      	b.n	8011300 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80112f6:	687a      	ldr	r2, [r7, #4]
 80112f8:	4904      	ldr	r1, [pc, #16]	; (801130c <lwip_cyclic_timer+0x60>)
 80112fa:	68f8      	ldr	r0, [r7, #12]
 80112fc:	f7ff ff68 	bl	80111d0 <sys_timeout_abs>
}
 8011300:	bf00      	nop
 8011302:	3718      	adds	r7, #24
 8011304:	46bd      	mov	sp, r7
 8011306:	bd80      	pop	{r7, pc}
 8011308:	2001af08 	.word	0x2001af08
 801130c:	080112ad 	.word	0x080112ad

08011310 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8011310:	b580      	push	{r7, lr}
 8011312:	b082      	sub	sp, #8
 8011314:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011316:	2301      	movs	r3, #1
 8011318:	607b      	str	r3, [r7, #4]
 801131a:	e00e      	b.n	801133a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801131c:	4a0b      	ldr	r2, [pc, #44]	; (801134c <sys_timeouts_init+0x3c>)
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	00db      	lsls	r3, r3, #3
 8011328:	4a08      	ldr	r2, [pc, #32]	; (801134c <sys_timeouts_init+0x3c>)
 801132a:	4413      	add	r3, r2
 801132c:	461a      	mov	r2, r3
 801132e:	4908      	ldr	r1, [pc, #32]	; (8011350 <sys_timeouts_init+0x40>)
 8011330:	f000 f810 	bl	8011354 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	3301      	adds	r3, #1
 8011338:	607b      	str	r3, [r7, #4]
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	2b04      	cmp	r3, #4
 801133e:	d9ed      	bls.n	801131c <sys_timeouts_init+0xc>
  }
}
 8011340:	bf00      	nop
 8011342:	bf00      	nop
 8011344:	3708      	adds	r7, #8
 8011346:	46bd      	mov	sp, r7
 8011348:	bd80      	pop	{r7, pc}
 801134a:	bf00      	nop
 801134c:	0801b304 	.word	0x0801b304
 8011350:	080112ad 	.word	0x080112ad

08011354 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8011354:	b580      	push	{r7, lr}
 8011356:	b086      	sub	sp, #24
 8011358:	af00      	add	r7, sp, #0
 801135a:	60f8      	str	r0, [r7, #12]
 801135c:	60b9      	str	r1, [r7, #8]
 801135e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8011360:	68fb      	ldr	r3, [r7, #12]
 8011362:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011366:	d306      	bcc.n	8011376 <sys_timeout+0x22>
 8011368:	4b0a      	ldr	r3, [pc, #40]	; (8011394 <sys_timeout+0x40>)
 801136a:	f240 1229 	movw	r2, #297	; 0x129
 801136e:	490a      	ldr	r1, [pc, #40]	; (8011398 <sys_timeout+0x44>)
 8011370:	480a      	ldr	r0, [pc, #40]	; (801139c <sys_timeout+0x48>)
 8011372:	f005 f84d 	bl	8016410 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8011376:	f7f2 fa47 	bl	8003808 <sys_now>
 801137a:	4602      	mov	r2, r0
 801137c:	68fb      	ldr	r3, [r7, #12]
 801137e:	4413      	add	r3, r2
 8011380:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8011382:	687a      	ldr	r2, [r7, #4]
 8011384:	68b9      	ldr	r1, [r7, #8]
 8011386:	6978      	ldr	r0, [r7, #20]
 8011388:	f7ff ff22 	bl	80111d0 <sys_timeout_abs>
#endif
}
 801138c:	bf00      	nop
 801138e:	3718      	adds	r7, #24
 8011390:	46bd      	mov	sp, r7
 8011392:	bd80      	pop	{r7, pc}
 8011394:	0801a328 	.word	0x0801a328
 8011398:	0801a3c4 	.word	0x0801a3c4
 801139c:	0801a39c 	.word	0x0801a39c

080113a0 <sys_untimeout>:
 * @param handler callback function that would be called by the timeout
 * @param arg callback argument that would be passed to handler
*/
void
sys_untimeout(sys_timeout_handler handler, void *arg)
{
 80113a0:	b580      	push	{r7, lr}
 80113a2:	b084      	sub	sp, #16
 80113a4:	af00      	add	r7, sp, #0
 80113a6:	6078      	str	r0, [r7, #4]
 80113a8:	6039      	str	r1, [r7, #0]
  struct sys_timeo *prev_t, *t;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 80113aa:	4b19      	ldr	r3, [pc, #100]	; (8011410 <sys_untimeout+0x70>)
 80113ac:	681b      	ldr	r3, [r3, #0]
 80113ae:	2b00      	cmp	r3, #0
 80113b0:	d029      	beq.n	8011406 <sys_untimeout+0x66>
    return;
  }

  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 80113b2:	4b17      	ldr	r3, [pc, #92]	; (8011410 <sys_untimeout+0x70>)
 80113b4:	681b      	ldr	r3, [r3, #0]
 80113b6:	60bb      	str	r3, [r7, #8]
 80113b8:	2300      	movs	r3, #0
 80113ba:	60fb      	str	r3, [r7, #12]
 80113bc:	e01f      	b.n	80113fe <sys_untimeout+0x5e>
    if ((t->h == handler) && (t->arg == arg)) {
 80113be:	68bb      	ldr	r3, [r7, #8]
 80113c0:	689b      	ldr	r3, [r3, #8]
 80113c2:	687a      	ldr	r2, [r7, #4]
 80113c4:	429a      	cmp	r2, r3
 80113c6:	d115      	bne.n	80113f4 <sys_untimeout+0x54>
 80113c8:	68bb      	ldr	r3, [r7, #8]
 80113ca:	68db      	ldr	r3, [r3, #12]
 80113cc:	683a      	ldr	r2, [r7, #0]
 80113ce:	429a      	cmp	r2, r3
 80113d0:	d110      	bne.n	80113f4 <sys_untimeout+0x54>
      /* We have a match */
      /* Unlink from previous in list */
      if (prev_t == NULL) {
 80113d2:	68fb      	ldr	r3, [r7, #12]
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d104      	bne.n	80113e2 <sys_untimeout+0x42>
        next_timeout = t->next;
 80113d8:	68bb      	ldr	r3, [r7, #8]
 80113da:	681b      	ldr	r3, [r3, #0]
 80113dc:	4a0c      	ldr	r2, [pc, #48]	; (8011410 <sys_untimeout+0x70>)
 80113de:	6013      	str	r3, [r2, #0]
 80113e0:	e003      	b.n	80113ea <sys_untimeout+0x4a>
      } else {
        prev_t->next = t->next;
 80113e2:	68bb      	ldr	r3, [r7, #8]
 80113e4:	681a      	ldr	r2, [r3, #0]
 80113e6:	68fb      	ldr	r3, [r7, #12]
 80113e8:	601a      	str	r2, [r3, #0]
      }
      memp_free(MEMP_SYS_TIMEOUT, t);
 80113ea:	68b9      	ldr	r1, [r7, #8]
 80113ec:	200a      	movs	r0, #10
 80113ee:	f7f8 fcb1 	bl	8009d54 <memp_free>
      return;
 80113f2:	e009      	b.n	8011408 <sys_untimeout+0x68>
  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 80113f4:	68bb      	ldr	r3, [r7, #8]
 80113f6:	60fb      	str	r3, [r7, #12]
 80113f8:	68bb      	ldr	r3, [r7, #8]
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	60bb      	str	r3, [r7, #8]
 80113fe:	68bb      	ldr	r3, [r7, #8]
 8011400:	2b00      	cmp	r3, #0
 8011402:	d1dc      	bne.n	80113be <sys_untimeout+0x1e>
    }
  }
  return;
 8011404:	e000      	b.n	8011408 <sys_untimeout+0x68>
    return;
 8011406:	bf00      	nop
}
 8011408:	3710      	adds	r7, #16
 801140a:	46bd      	mov	sp, r7
 801140c:	bd80      	pop	{r7, pc}
 801140e:	bf00      	nop
 8011410:	2001af04 	.word	0x2001af04

08011414 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8011414:	b580      	push	{r7, lr}
 8011416:	b084      	sub	sp, #16
 8011418:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801141a:	f7f2 f9f5 	bl	8003808 <sys_now>
 801141e:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8011420:	4b17      	ldr	r3, [pc, #92]	; (8011480 <sys_check_timeouts+0x6c>)
 8011422:	681b      	ldr	r3, [r3, #0]
 8011424:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8011426:	68bb      	ldr	r3, [r7, #8]
 8011428:	2b00      	cmp	r3, #0
 801142a:	d022      	beq.n	8011472 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801142c:	68bb      	ldr	r3, [r7, #8]
 801142e:	685b      	ldr	r3, [r3, #4]
 8011430:	68fa      	ldr	r2, [r7, #12]
 8011432:	1ad3      	subs	r3, r2, r3
 8011434:	0fdb      	lsrs	r3, r3, #31
 8011436:	f003 0301 	and.w	r3, r3, #1
 801143a:	b2db      	uxtb	r3, r3
 801143c:	2b00      	cmp	r3, #0
 801143e:	d11a      	bne.n	8011476 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8011440:	68bb      	ldr	r3, [r7, #8]
 8011442:	681b      	ldr	r3, [r3, #0]
 8011444:	4a0e      	ldr	r2, [pc, #56]	; (8011480 <sys_check_timeouts+0x6c>)
 8011446:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8011448:	68bb      	ldr	r3, [r7, #8]
 801144a:	689b      	ldr	r3, [r3, #8]
 801144c:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801144e:	68bb      	ldr	r3, [r7, #8]
 8011450:	68db      	ldr	r3, [r3, #12]
 8011452:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8011454:	68bb      	ldr	r3, [r7, #8]
 8011456:	685b      	ldr	r3, [r3, #4]
 8011458:	4a0a      	ldr	r2, [pc, #40]	; (8011484 <sys_check_timeouts+0x70>)
 801145a:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801145c:	68b9      	ldr	r1, [r7, #8]
 801145e:	200a      	movs	r0, #10
 8011460:	f7f8 fc78 	bl	8009d54 <memp_free>
    if (handler != NULL) {
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	2b00      	cmp	r3, #0
 8011468:	d0da      	beq.n	8011420 <sys_check_timeouts+0xc>
      handler(arg);
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	6838      	ldr	r0, [r7, #0]
 801146e:	4798      	blx	r3
  do {
 8011470:	e7d6      	b.n	8011420 <sys_check_timeouts+0xc>
      return;
 8011472:	bf00      	nop
 8011474:	e000      	b.n	8011478 <sys_check_timeouts+0x64>
      return;
 8011476:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8011478:	3710      	adds	r7, #16
 801147a:	46bd      	mov	sp, r7
 801147c:	bd80      	pop	{r7, pc}
 801147e:	bf00      	nop
 8011480:	2001af04 	.word	0x2001af04
 8011484:	2001af08 	.word	0x2001af08

08011488 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8011488:	b580      	push	{r7, lr}
 801148a:	b082      	sub	sp, #8
 801148c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801148e:	4b16      	ldr	r3, [pc, #88]	; (80114e8 <sys_timeouts_sleeptime+0x60>)
 8011490:	681b      	ldr	r3, [r3, #0]
 8011492:	2b00      	cmp	r3, #0
 8011494:	d102      	bne.n	801149c <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8011496:	f04f 33ff 	mov.w	r3, #4294967295
 801149a:	e020      	b.n	80114de <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801149c:	f7f2 f9b4 	bl	8003808 <sys_now>
 80114a0:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 80114a2:	4b11      	ldr	r3, [pc, #68]	; (80114e8 <sys_timeouts_sleeptime+0x60>)
 80114a4:	681b      	ldr	r3, [r3, #0]
 80114a6:	685a      	ldr	r2, [r3, #4]
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	1ad3      	subs	r3, r2, r3
 80114ac:	0fdb      	lsrs	r3, r3, #31
 80114ae:	f003 0301 	and.w	r3, r3, #1
 80114b2:	b2db      	uxtb	r3, r3
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	d001      	beq.n	80114bc <sys_timeouts_sleeptime+0x34>
    return 0;
 80114b8:	2300      	movs	r3, #0
 80114ba:	e010      	b.n	80114de <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 80114bc:	4b0a      	ldr	r3, [pc, #40]	; (80114e8 <sys_timeouts_sleeptime+0x60>)
 80114be:	681b      	ldr	r3, [r3, #0]
 80114c0:	685a      	ldr	r2, [r3, #4]
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	1ad3      	subs	r3, r2, r3
 80114c6:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 80114c8:	683b      	ldr	r3, [r7, #0]
 80114ca:	2b00      	cmp	r3, #0
 80114cc:	da06      	bge.n	80114dc <sys_timeouts_sleeptime+0x54>
 80114ce:	4b07      	ldr	r3, [pc, #28]	; (80114ec <sys_timeouts_sleeptime+0x64>)
 80114d0:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80114d4:	4906      	ldr	r1, [pc, #24]	; (80114f0 <sys_timeouts_sleeptime+0x68>)
 80114d6:	4807      	ldr	r0, [pc, #28]	; (80114f4 <sys_timeouts_sleeptime+0x6c>)
 80114d8:	f004 ff9a 	bl	8016410 <iprintf>
    return ret;
 80114dc:	683b      	ldr	r3, [r7, #0]
  }
}
 80114de:	4618      	mov	r0, r3
 80114e0:	3708      	adds	r7, #8
 80114e2:	46bd      	mov	sp, r7
 80114e4:	bd80      	pop	{r7, pc}
 80114e6:	bf00      	nop
 80114e8:	2001af04 	.word	0x2001af04
 80114ec:	0801a328 	.word	0x0801a328
 80114f0:	0801a3fc 	.word	0x0801a3fc
 80114f4:	0801a39c 	.word	0x0801a39c

080114f8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80114f8:	b580      	push	{r7, lr}
 80114fa:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80114fc:	f005 f816 	bl	801652c <rand>
 8011500:	4603      	mov	r3, r0
 8011502:	b29b      	uxth	r3, r3
 8011504:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8011508:	b29b      	uxth	r3, r3
 801150a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801150e:	b29a      	uxth	r2, r3
 8011510:	4b01      	ldr	r3, [pc, #4]	; (8011518 <udp_init+0x20>)
 8011512:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8011514:	bf00      	nop
 8011516:	bd80      	pop	{r7, pc}
 8011518:	2000001c 	.word	0x2000001c

0801151c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801151c:	b480      	push	{r7}
 801151e:	b083      	sub	sp, #12
 8011520:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8011522:	2300      	movs	r3, #0
 8011524:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8011526:	4b17      	ldr	r3, [pc, #92]	; (8011584 <udp_new_port+0x68>)
 8011528:	881b      	ldrh	r3, [r3, #0]
 801152a:	1c5a      	adds	r2, r3, #1
 801152c:	b291      	uxth	r1, r2
 801152e:	4a15      	ldr	r2, [pc, #84]	; (8011584 <udp_new_port+0x68>)
 8011530:	8011      	strh	r1, [r2, #0]
 8011532:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011536:	4293      	cmp	r3, r2
 8011538:	d103      	bne.n	8011542 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801153a:	4b12      	ldr	r3, [pc, #72]	; (8011584 <udp_new_port+0x68>)
 801153c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8011540:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011542:	4b11      	ldr	r3, [pc, #68]	; (8011588 <udp_new_port+0x6c>)
 8011544:	681b      	ldr	r3, [r3, #0]
 8011546:	603b      	str	r3, [r7, #0]
 8011548:	e011      	b.n	801156e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801154a:	683b      	ldr	r3, [r7, #0]
 801154c:	8a5a      	ldrh	r2, [r3, #18]
 801154e:	4b0d      	ldr	r3, [pc, #52]	; (8011584 <udp_new_port+0x68>)
 8011550:	881b      	ldrh	r3, [r3, #0]
 8011552:	429a      	cmp	r2, r3
 8011554:	d108      	bne.n	8011568 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8011556:	88fb      	ldrh	r3, [r7, #6]
 8011558:	3301      	adds	r3, #1
 801155a:	80fb      	strh	r3, [r7, #6]
 801155c:	88fb      	ldrh	r3, [r7, #6]
 801155e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011562:	d3e0      	bcc.n	8011526 <udp_new_port+0xa>
        return 0;
 8011564:	2300      	movs	r3, #0
 8011566:	e007      	b.n	8011578 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011568:	683b      	ldr	r3, [r7, #0]
 801156a:	68db      	ldr	r3, [r3, #12]
 801156c:	603b      	str	r3, [r7, #0]
 801156e:	683b      	ldr	r3, [r7, #0]
 8011570:	2b00      	cmp	r3, #0
 8011572:	d1ea      	bne.n	801154a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8011574:	4b03      	ldr	r3, [pc, #12]	; (8011584 <udp_new_port+0x68>)
 8011576:	881b      	ldrh	r3, [r3, #0]
}
 8011578:	4618      	mov	r0, r3
 801157a:	370c      	adds	r7, #12
 801157c:	46bd      	mov	sp, r7
 801157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011582:	4770      	bx	lr
 8011584:	2000001c 	.word	0x2000001c
 8011588:	2001af10 	.word	0x2001af10

0801158c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801158c:	b580      	push	{r7, lr}
 801158e:	b084      	sub	sp, #16
 8011590:	af00      	add	r7, sp, #0
 8011592:	60f8      	str	r0, [r7, #12]
 8011594:	60b9      	str	r1, [r7, #8]
 8011596:	4613      	mov	r3, r2
 8011598:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801159a:	68fb      	ldr	r3, [r7, #12]
 801159c:	2b00      	cmp	r3, #0
 801159e:	d105      	bne.n	80115ac <udp_input_local_match+0x20>
 80115a0:	4b27      	ldr	r3, [pc, #156]	; (8011640 <udp_input_local_match+0xb4>)
 80115a2:	2287      	movs	r2, #135	; 0x87
 80115a4:	4927      	ldr	r1, [pc, #156]	; (8011644 <udp_input_local_match+0xb8>)
 80115a6:	4828      	ldr	r0, [pc, #160]	; (8011648 <udp_input_local_match+0xbc>)
 80115a8:	f004 ff32 	bl	8016410 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80115ac:	68bb      	ldr	r3, [r7, #8]
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d105      	bne.n	80115be <udp_input_local_match+0x32>
 80115b2:	4b23      	ldr	r3, [pc, #140]	; (8011640 <udp_input_local_match+0xb4>)
 80115b4:	2288      	movs	r2, #136	; 0x88
 80115b6:	4925      	ldr	r1, [pc, #148]	; (801164c <udp_input_local_match+0xc0>)
 80115b8:	4823      	ldr	r0, [pc, #140]	; (8011648 <udp_input_local_match+0xbc>)
 80115ba:	f004 ff29 	bl	8016410 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80115be:	68fb      	ldr	r3, [r7, #12]
 80115c0:	7a1b      	ldrb	r3, [r3, #8]
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	d00b      	beq.n	80115de <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80115c6:	68fb      	ldr	r3, [r7, #12]
 80115c8:	7a1a      	ldrb	r2, [r3, #8]
 80115ca:	4b21      	ldr	r3, [pc, #132]	; (8011650 <udp_input_local_match+0xc4>)
 80115cc:	685b      	ldr	r3, [r3, #4]
 80115ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80115d2:	3301      	adds	r3, #1
 80115d4:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80115d6:	429a      	cmp	r2, r3
 80115d8:	d001      	beq.n	80115de <udp_input_local_match+0x52>
    return 0;
 80115da:	2300      	movs	r3, #0
 80115dc:	e02b      	b.n	8011636 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80115de:	79fb      	ldrb	r3, [r7, #7]
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	d018      	beq.n	8011616 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80115e4:	68fb      	ldr	r3, [r7, #12]
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	d013      	beq.n	8011612 <udp_input_local_match+0x86>
 80115ea:	68fb      	ldr	r3, [r7, #12]
 80115ec:	681b      	ldr	r3, [r3, #0]
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	d00f      	beq.n	8011612 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80115f2:	4b17      	ldr	r3, [pc, #92]	; (8011650 <udp_input_local_match+0xc4>)
 80115f4:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80115f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80115fa:	d00a      	beq.n	8011612 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80115fc:	68fb      	ldr	r3, [r7, #12]
 80115fe:	681a      	ldr	r2, [r3, #0]
 8011600:	4b13      	ldr	r3, [pc, #76]	; (8011650 <udp_input_local_match+0xc4>)
 8011602:	695b      	ldr	r3, [r3, #20]
 8011604:	405a      	eors	r2, r3
 8011606:	68bb      	ldr	r3, [r7, #8]
 8011608:	3308      	adds	r3, #8
 801160a:	681b      	ldr	r3, [r3, #0]
 801160c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801160e:	2b00      	cmp	r3, #0
 8011610:	d110      	bne.n	8011634 <udp_input_local_match+0xa8>
          return 1;
 8011612:	2301      	movs	r3, #1
 8011614:	e00f      	b.n	8011636 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8011616:	68fb      	ldr	r3, [r7, #12]
 8011618:	2b00      	cmp	r3, #0
 801161a:	d009      	beq.n	8011630 <udp_input_local_match+0xa4>
 801161c:	68fb      	ldr	r3, [r7, #12]
 801161e:	681b      	ldr	r3, [r3, #0]
 8011620:	2b00      	cmp	r3, #0
 8011622:	d005      	beq.n	8011630 <udp_input_local_match+0xa4>
 8011624:	68fb      	ldr	r3, [r7, #12]
 8011626:	681a      	ldr	r2, [r3, #0]
 8011628:	4b09      	ldr	r3, [pc, #36]	; (8011650 <udp_input_local_match+0xc4>)
 801162a:	695b      	ldr	r3, [r3, #20]
 801162c:	429a      	cmp	r2, r3
 801162e:	d101      	bne.n	8011634 <udp_input_local_match+0xa8>
        return 1;
 8011630:	2301      	movs	r3, #1
 8011632:	e000      	b.n	8011636 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8011634:	2300      	movs	r3, #0
}
 8011636:	4618      	mov	r0, r3
 8011638:	3710      	adds	r7, #16
 801163a:	46bd      	mov	sp, r7
 801163c:	bd80      	pop	{r7, pc}
 801163e:	bf00      	nop
 8011640:	0801a410 	.word	0x0801a410
 8011644:	0801a440 	.word	0x0801a440
 8011648:	0801a464 	.word	0x0801a464
 801164c:	0801a48c 	.word	0x0801a48c
 8011650:	20016980 	.word	0x20016980

08011654 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8011654:	b590      	push	{r4, r7, lr}
 8011656:	b08d      	sub	sp, #52	; 0x34
 8011658:	af02      	add	r7, sp, #8
 801165a:	6078      	str	r0, [r7, #4]
 801165c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801165e:	2300      	movs	r3, #0
 8011660:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	2b00      	cmp	r3, #0
 8011666:	d105      	bne.n	8011674 <udp_input+0x20>
 8011668:	4b7c      	ldr	r3, [pc, #496]	; (801185c <udp_input+0x208>)
 801166a:	22cf      	movs	r2, #207	; 0xcf
 801166c:	497c      	ldr	r1, [pc, #496]	; (8011860 <udp_input+0x20c>)
 801166e:	487d      	ldr	r0, [pc, #500]	; (8011864 <udp_input+0x210>)
 8011670:	f004 fece 	bl	8016410 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8011674:	683b      	ldr	r3, [r7, #0]
 8011676:	2b00      	cmp	r3, #0
 8011678:	d105      	bne.n	8011686 <udp_input+0x32>
 801167a:	4b78      	ldr	r3, [pc, #480]	; (801185c <udp_input+0x208>)
 801167c:	22d0      	movs	r2, #208	; 0xd0
 801167e:	497a      	ldr	r1, [pc, #488]	; (8011868 <udp_input+0x214>)
 8011680:	4878      	ldr	r0, [pc, #480]	; (8011864 <udp_input+0x210>)
 8011682:	f004 fec5 	bl	8016410 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	895b      	ldrh	r3, [r3, #10]
 801168a:	2b07      	cmp	r3, #7
 801168c:	d803      	bhi.n	8011696 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801168e:	6878      	ldr	r0, [r7, #4]
 8011690:	f7f9 fa10 	bl	800aab4 <pbuf_free>
    goto end;
 8011694:	e0de      	b.n	8011854 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	685b      	ldr	r3, [r3, #4]
 801169a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801169c:	4b73      	ldr	r3, [pc, #460]	; (801186c <udp_input+0x218>)
 801169e:	695b      	ldr	r3, [r3, #20]
 80116a0:	4a72      	ldr	r2, [pc, #456]	; (801186c <udp_input+0x218>)
 80116a2:	6812      	ldr	r2, [r2, #0]
 80116a4:	4611      	mov	r1, r2
 80116a6:	4618      	mov	r0, r3
 80116a8:	f003 fe06 	bl	80152b8 <ip4_addr_isbroadcast_u32>
 80116ac:	4603      	mov	r3, r0
 80116ae:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80116b0:	697b      	ldr	r3, [r7, #20]
 80116b2:	881b      	ldrh	r3, [r3, #0]
 80116b4:	b29b      	uxth	r3, r3
 80116b6:	4618      	mov	r0, r3
 80116b8:	f7f7 fe1c 	bl	80092f4 <lwip_htons>
 80116bc:	4603      	mov	r3, r0
 80116be:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80116c0:	697b      	ldr	r3, [r7, #20]
 80116c2:	885b      	ldrh	r3, [r3, #2]
 80116c4:	b29b      	uxth	r3, r3
 80116c6:	4618      	mov	r0, r3
 80116c8:	f7f7 fe14 	bl	80092f4 <lwip_htons>
 80116cc:	4603      	mov	r3, r0
 80116ce:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80116d0:	2300      	movs	r3, #0
 80116d2:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80116d4:	2300      	movs	r3, #0
 80116d6:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80116d8:	2300      	movs	r3, #0
 80116da:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80116dc:	4b64      	ldr	r3, [pc, #400]	; (8011870 <udp_input+0x21c>)
 80116de:	681b      	ldr	r3, [r3, #0]
 80116e0:	627b      	str	r3, [r7, #36]	; 0x24
 80116e2:	e054      	b.n	801178e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80116e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116e6:	8a5b      	ldrh	r3, [r3, #18]
 80116e8:	89fa      	ldrh	r2, [r7, #14]
 80116ea:	429a      	cmp	r2, r3
 80116ec:	d14a      	bne.n	8011784 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80116ee:	7cfb      	ldrb	r3, [r7, #19]
 80116f0:	461a      	mov	r2, r3
 80116f2:	6839      	ldr	r1, [r7, #0]
 80116f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80116f6:	f7ff ff49 	bl	801158c <udp_input_local_match>
 80116fa:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80116fc:	2b00      	cmp	r3, #0
 80116fe:	d041      	beq.n	8011784 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8011700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011702:	7c1b      	ldrb	r3, [r3, #16]
 8011704:	f003 0304 	and.w	r3, r3, #4
 8011708:	2b00      	cmp	r3, #0
 801170a:	d11d      	bne.n	8011748 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801170c:	69fb      	ldr	r3, [r7, #28]
 801170e:	2b00      	cmp	r3, #0
 8011710:	d102      	bne.n	8011718 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8011712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011714:	61fb      	str	r3, [r7, #28]
 8011716:	e017      	b.n	8011748 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8011718:	7cfb      	ldrb	r3, [r7, #19]
 801171a:	2b00      	cmp	r3, #0
 801171c:	d014      	beq.n	8011748 <udp_input+0xf4>
 801171e:	4b53      	ldr	r3, [pc, #332]	; (801186c <udp_input+0x218>)
 8011720:	695b      	ldr	r3, [r3, #20]
 8011722:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011726:	d10f      	bne.n	8011748 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8011728:	69fb      	ldr	r3, [r7, #28]
 801172a:	681a      	ldr	r2, [r3, #0]
 801172c:	683b      	ldr	r3, [r7, #0]
 801172e:	3304      	adds	r3, #4
 8011730:	681b      	ldr	r3, [r3, #0]
 8011732:	429a      	cmp	r2, r3
 8011734:	d008      	beq.n	8011748 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8011736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011738:	681a      	ldr	r2, [r3, #0]
 801173a:	683b      	ldr	r3, [r7, #0]
 801173c:	3304      	adds	r3, #4
 801173e:	681b      	ldr	r3, [r3, #0]
 8011740:	429a      	cmp	r2, r3
 8011742:	d101      	bne.n	8011748 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8011744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011746:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8011748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801174a:	8a9b      	ldrh	r3, [r3, #20]
 801174c:	8a3a      	ldrh	r2, [r7, #16]
 801174e:	429a      	cmp	r2, r3
 8011750:	d118      	bne.n	8011784 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8011752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011754:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8011756:	2b00      	cmp	r3, #0
 8011758:	d005      	beq.n	8011766 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801175a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801175c:	685a      	ldr	r2, [r3, #4]
 801175e:	4b43      	ldr	r3, [pc, #268]	; (801186c <udp_input+0x218>)
 8011760:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8011762:	429a      	cmp	r2, r3
 8011764:	d10e      	bne.n	8011784 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8011766:	6a3b      	ldr	r3, [r7, #32]
 8011768:	2b00      	cmp	r3, #0
 801176a:	d014      	beq.n	8011796 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801176c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801176e:	68da      	ldr	r2, [r3, #12]
 8011770:	6a3b      	ldr	r3, [r7, #32]
 8011772:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8011774:	4b3e      	ldr	r3, [pc, #248]	; (8011870 <udp_input+0x21c>)
 8011776:	681a      	ldr	r2, [r3, #0]
 8011778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801177a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801177c:	4a3c      	ldr	r2, [pc, #240]	; (8011870 <udp_input+0x21c>)
 801177e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011780:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8011782:	e008      	b.n	8011796 <udp_input+0x142>
      }
    }

    prev = pcb;
 8011784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011786:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801178a:	68db      	ldr	r3, [r3, #12]
 801178c:	627b      	str	r3, [r7, #36]	; 0x24
 801178e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011790:	2b00      	cmp	r3, #0
 8011792:	d1a7      	bne.n	80116e4 <udp_input+0x90>
 8011794:	e000      	b.n	8011798 <udp_input+0x144>
        break;
 8011796:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8011798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801179a:	2b00      	cmp	r3, #0
 801179c:	d101      	bne.n	80117a2 <udp_input+0x14e>
    pcb = uncon_pcb;
 801179e:	69fb      	ldr	r3, [r7, #28]
 80117a0:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80117a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	d002      	beq.n	80117ae <udp_input+0x15a>
    for_us = 1;
 80117a8:	2301      	movs	r3, #1
 80117aa:	76fb      	strb	r3, [r7, #27]
 80117ac:	e00a      	b.n	80117c4 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80117ae:	683b      	ldr	r3, [r7, #0]
 80117b0:	3304      	adds	r3, #4
 80117b2:	681a      	ldr	r2, [r3, #0]
 80117b4:	4b2d      	ldr	r3, [pc, #180]	; (801186c <udp_input+0x218>)
 80117b6:	695b      	ldr	r3, [r3, #20]
 80117b8:	429a      	cmp	r2, r3
 80117ba:	bf0c      	ite	eq
 80117bc:	2301      	moveq	r3, #1
 80117be:	2300      	movne	r3, #0
 80117c0:	b2db      	uxtb	r3, r3
 80117c2:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80117c4:	7efb      	ldrb	r3, [r7, #27]
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	d041      	beq.n	801184e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80117ca:	2108      	movs	r1, #8
 80117cc:	6878      	ldr	r0, [r7, #4]
 80117ce:	f7f9 f8eb 	bl	800a9a8 <pbuf_remove_header>
 80117d2:	4603      	mov	r3, r0
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	d00a      	beq.n	80117ee <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80117d8:	4b20      	ldr	r3, [pc, #128]	; (801185c <udp_input+0x208>)
 80117da:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80117de:	4925      	ldr	r1, [pc, #148]	; (8011874 <udp_input+0x220>)
 80117e0:	4820      	ldr	r0, [pc, #128]	; (8011864 <udp_input+0x210>)
 80117e2:	f004 fe15 	bl	8016410 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80117e6:	6878      	ldr	r0, [r7, #4]
 80117e8:	f7f9 f964 	bl	800aab4 <pbuf_free>
      goto end;
 80117ec:	e032      	b.n	8011854 <udp_input+0x200>
    }

    if (pcb != NULL) {
 80117ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	d012      	beq.n	801181a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80117f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117f6:	699b      	ldr	r3, [r3, #24]
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	d00a      	beq.n	8011812 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80117fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117fe:	699c      	ldr	r4, [r3, #24]
 8011800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011802:	69d8      	ldr	r0, [r3, #28]
 8011804:	8a3b      	ldrh	r3, [r7, #16]
 8011806:	9300      	str	r3, [sp, #0]
 8011808:	4b1b      	ldr	r3, [pc, #108]	; (8011878 <udp_input+0x224>)
 801180a:	687a      	ldr	r2, [r7, #4]
 801180c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801180e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8011810:	e021      	b.n	8011856 <udp_input+0x202>
        pbuf_free(p);
 8011812:	6878      	ldr	r0, [r7, #4]
 8011814:	f7f9 f94e 	bl	800aab4 <pbuf_free>
        goto end;
 8011818:	e01c      	b.n	8011854 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801181a:	7cfb      	ldrb	r3, [r7, #19]
 801181c:	2b00      	cmp	r3, #0
 801181e:	d112      	bne.n	8011846 <udp_input+0x1f2>
 8011820:	4b12      	ldr	r3, [pc, #72]	; (801186c <udp_input+0x218>)
 8011822:	695b      	ldr	r3, [r3, #20]
 8011824:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011828:	2be0      	cmp	r3, #224	; 0xe0
 801182a:	d00c      	beq.n	8011846 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801182c:	4b0f      	ldr	r3, [pc, #60]	; (801186c <udp_input+0x218>)
 801182e:	899b      	ldrh	r3, [r3, #12]
 8011830:	3308      	adds	r3, #8
 8011832:	b29b      	uxth	r3, r3
 8011834:	b21b      	sxth	r3, r3
 8011836:	4619      	mov	r1, r3
 8011838:	6878      	ldr	r0, [r7, #4]
 801183a:	f7f9 f928 	bl	800aa8e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801183e:	2103      	movs	r1, #3
 8011840:	6878      	ldr	r0, [r7, #4]
 8011842:	f003 f9fb 	bl	8014c3c <icmp_dest_unreach>
      pbuf_free(p);
 8011846:	6878      	ldr	r0, [r7, #4]
 8011848:	f7f9 f934 	bl	800aab4 <pbuf_free>
  return;
 801184c:	e003      	b.n	8011856 <udp_input+0x202>
    pbuf_free(p);
 801184e:	6878      	ldr	r0, [r7, #4]
 8011850:	f7f9 f930 	bl	800aab4 <pbuf_free>
  return;
 8011854:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8011856:	372c      	adds	r7, #44	; 0x2c
 8011858:	46bd      	mov	sp, r7
 801185a:	bd90      	pop	{r4, r7, pc}
 801185c:	0801a410 	.word	0x0801a410
 8011860:	0801a4b4 	.word	0x0801a4b4
 8011864:	0801a464 	.word	0x0801a464
 8011868:	0801a4cc 	.word	0x0801a4cc
 801186c:	20016980 	.word	0x20016980
 8011870:	2001af10 	.word	0x2001af10
 8011874:	0801a4e8 	.word	0x0801a4e8
 8011878:	20016990 	.word	0x20016990

0801187c <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801187c:	b580      	push	{r7, lr}
 801187e:	b088      	sub	sp, #32
 8011880:	af02      	add	r7, sp, #8
 8011882:	60f8      	str	r0, [r7, #12]
 8011884:	60b9      	str	r1, [r7, #8]
 8011886:	607a      	str	r2, [r7, #4]
 8011888:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801188a:	68fb      	ldr	r3, [r7, #12]
 801188c:	2b00      	cmp	r3, #0
 801188e:	d109      	bne.n	80118a4 <udp_sendto_if+0x28>
 8011890:	4b2e      	ldr	r3, [pc, #184]	; (801194c <udp_sendto_if+0xd0>)
 8011892:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011896:	492e      	ldr	r1, [pc, #184]	; (8011950 <udp_sendto_if+0xd4>)
 8011898:	482e      	ldr	r0, [pc, #184]	; (8011954 <udp_sendto_if+0xd8>)
 801189a:	f004 fdb9 	bl	8016410 <iprintf>
 801189e:	f06f 030f 	mvn.w	r3, #15
 80118a2:	e04f      	b.n	8011944 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 80118a4:	68bb      	ldr	r3, [r7, #8]
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	d109      	bne.n	80118be <udp_sendto_if+0x42>
 80118aa:	4b28      	ldr	r3, [pc, #160]	; (801194c <udp_sendto_if+0xd0>)
 80118ac:	f240 2281 	movw	r2, #641	; 0x281
 80118b0:	4929      	ldr	r1, [pc, #164]	; (8011958 <udp_sendto_if+0xdc>)
 80118b2:	4828      	ldr	r0, [pc, #160]	; (8011954 <udp_sendto_if+0xd8>)
 80118b4:	f004 fdac 	bl	8016410 <iprintf>
 80118b8:	f06f 030f 	mvn.w	r3, #15
 80118bc:	e042      	b.n	8011944 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	d109      	bne.n	80118d8 <udp_sendto_if+0x5c>
 80118c4:	4b21      	ldr	r3, [pc, #132]	; (801194c <udp_sendto_if+0xd0>)
 80118c6:	f240 2282 	movw	r2, #642	; 0x282
 80118ca:	4924      	ldr	r1, [pc, #144]	; (801195c <udp_sendto_if+0xe0>)
 80118cc:	4821      	ldr	r0, [pc, #132]	; (8011954 <udp_sendto_if+0xd8>)
 80118ce:	f004 fd9f 	bl	8016410 <iprintf>
 80118d2:	f06f 030f 	mvn.w	r3, #15
 80118d6:	e035      	b.n	8011944 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 80118d8:	6a3b      	ldr	r3, [r7, #32]
 80118da:	2b00      	cmp	r3, #0
 80118dc:	d109      	bne.n	80118f2 <udp_sendto_if+0x76>
 80118de:	4b1b      	ldr	r3, [pc, #108]	; (801194c <udp_sendto_if+0xd0>)
 80118e0:	f240 2283 	movw	r2, #643	; 0x283
 80118e4:	491e      	ldr	r1, [pc, #120]	; (8011960 <udp_sendto_if+0xe4>)
 80118e6:	481b      	ldr	r0, [pc, #108]	; (8011954 <udp_sendto_if+0xd8>)
 80118e8:	f004 fd92 	bl	8016410 <iprintf>
 80118ec:	f06f 030f 	mvn.w	r3, #15
 80118f0:	e028      	b.n	8011944 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80118f2:	68fb      	ldr	r3, [r7, #12]
 80118f4:	2b00      	cmp	r3, #0
 80118f6:	d009      	beq.n	801190c <udp_sendto_if+0x90>
 80118f8:	68fb      	ldr	r3, [r7, #12]
 80118fa:	681b      	ldr	r3, [r3, #0]
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	d005      	beq.n	801190c <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8011900:	68fb      	ldr	r3, [r7, #12]
 8011902:	681b      	ldr	r3, [r3, #0]
 8011904:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011908:	2be0      	cmp	r3, #224	; 0xe0
 801190a:	d103      	bne.n	8011914 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 801190c:	6a3b      	ldr	r3, [r7, #32]
 801190e:	3304      	adds	r3, #4
 8011910:	617b      	str	r3, [r7, #20]
 8011912:	e00b      	b.n	801192c <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8011914:	68fb      	ldr	r3, [r7, #12]
 8011916:	681a      	ldr	r2, [r3, #0]
 8011918:	6a3b      	ldr	r3, [r7, #32]
 801191a:	3304      	adds	r3, #4
 801191c:	681b      	ldr	r3, [r3, #0]
 801191e:	429a      	cmp	r2, r3
 8011920:	d002      	beq.n	8011928 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8011922:	f06f 0303 	mvn.w	r3, #3
 8011926:	e00d      	b.n	8011944 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8011928:	68fb      	ldr	r3, [r7, #12]
 801192a:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801192c:	887a      	ldrh	r2, [r7, #2]
 801192e:	697b      	ldr	r3, [r7, #20]
 8011930:	9301      	str	r3, [sp, #4]
 8011932:	6a3b      	ldr	r3, [r7, #32]
 8011934:	9300      	str	r3, [sp, #0]
 8011936:	4613      	mov	r3, r2
 8011938:	687a      	ldr	r2, [r7, #4]
 801193a:	68b9      	ldr	r1, [r7, #8]
 801193c:	68f8      	ldr	r0, [r7, #12]
 801193e:	f000 f811 	bl	8011964 <udp_sendto_if_src>
 8011942:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8011944:	4618      	mov	r0, r3
 8011946:	3718      	adds	r7, #24
 8011948:	46bd      	mov	sp, r7
 801194a:	bd80      	pop	{r7, pc}
 801194c:	0801a410 	.word	0x0801a410
 8011950:	0801a584 	.word	0x0801a584
 8011954:	0801a464 	.word	0x0801a464
 8011958:	0801a5a0 	.word	0x0801a5a0
 801195c:	0801a5bc 	.word	0x0801a5bc
 8011960:	0801a5dc 	.word	0x0801a5dc

08011964 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8011964:	b580      	push	{r7, lr}
 8011966:	b08c      	sub	sp, #48	; 0x30
 8011968:	af04      	add	r7, sp, #16
 801196a:	60f8      	str	r0, [r7, #12]
 801196c:	60b9      	str	r1, [r7, #8]
 801196e:	607a      	str	r2, [r7, #4]
 8011970:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8011972:	68fb      	ldr	r3, [r7, #12]
 8011974:	2b00      	cmp	r3, #0
 8011976:	d109      	bne.n	801198c <udp_sendto_if_src+0x28>
 8011978:	4b65      	ldr	r3, [pc, #404]	; (8011b10 <udp_sendto_if_src+0x1ac>)
 801197a:	f240 22d1 	movw	r2, #721	; 0x2d1
 801197e:	4965      	ldr	r1, [pc, #404]	; (8011b14 <udp_sendto_if_src+0x1b0>)
 8011980:	4865      	ldr	r0, [pc, #404]	; (8011b18 <udp_sendto_if_src+0x1b4>)
 8011982:	f004 fd45 	bl	8016410 <iprintf>
 8011986:	f06f 030f 	mvn.w	r3, #15
 801198a:	e0bc      	b.n	8011b06 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801198c:	68bb      	ldr	r3, [r7, #8]
 801198e:	2b00      	cmp	r3, #0
 8011990:	d109      	bne.n	80119a6 <udp_sendto_if_src+0x42>
 8011992:	4b5f      	ldr	r3, [pc, #380]	; (8011b10 <udp_sendto_if_src+0x1ac>)
 8011994:	f240 22d2 	movw	r2, #722	; 0x2d2
 8011998:	4960      	ldr	r1, [pc, #384]	; (8011b1c <udp_sendto_if_src+0x1b8>)
 801199a:	485f      	ldr	r0, [pc, #380]	; (8011b18 <udp_sendto_if_src+0x1b4>)
 801199c:	f004 fd38 	bl	8016410 <iprintf>
 80119a0:	f06f 030f 	mvn.w	r3, #15
 80119a4:	e0af      	b.n	8011b06 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	d109      	bne.n	80119c0 <udp_sendto_if_src+0x5c>
 80119ac:	4b58      	ldr	r3, [pc, #352]	; (8011b10 <udp_sendto_if_src+0x1ac>)
 80119ae:	f240 22d3 	movw	r2, #723	; 0x2d3
 80119b2:	495b      	ldr	r1, [pc, #364]	; (8011b20 <udp_sendto_if_src+0x1bc>)
 80119b4:	4858      	ldr	r0, [pc, #352]	; (8011b18 <udp_sendto_if_src+0x1b4>)
 80119b6:	f004 fd2b 	bl	8016410 <iprintf>
 80119ba:	f06f 030f 	mvn.w	r3, #15
 80119be:	e0a2      	b.n	8011b06 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 80119c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119c2:	2b00      	cmp	r3, #0
 80119c4:	d109      	bne.n	80119da <udp_sendto_if_src+0x76>
 80119c6:	4b52      	ldr	r3, [pc, #328]	; (8011b10 <udp_sendto_if_src+0x1ac>)
 80119c8:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 80119cc:	4955      	ldr	r1, [pc, #340]	; (8011b24 <udp_sendto_if_src+0x1c0>)
 80119ce:	4852      	ldr	r0, [pc, #328]	; (8011b18 <udp_sendto_if_src+0x1b4>)
 80119d0:	f004 fd1e 	bl	8016410 <iprintf>
 80119d4:	f06f 030f 	mvn.w	r3, #15
 80119d8:	e095      	b.n	8011b06 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 80119da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d109      	bne.n	80119f4 <udp_sendto_if_src+0x90>
 80119e0:	4b4b      	ldr	r3, [pc, #300]	; (8011b10 <udp_sendto_if_src+0x1ac>)
 80119e2:	f240 22d5 	movw	r2, #725	; 0x2d5
 80119e6:	4950      	ldr	r1, [pc, #320]	; (8011b28 <udp_sendto_if_src+0x1c4>)
 80119e8:	484b      	ldr	r0, [pc, #300]	; (8011b18 <udp_sendto_if_src+0x1b4>)
 80119ea:	f004 fd11 	bl	8016410 <iprintf>
 80119ee:	f06f 030f 	mvn.w	r3, #15
 80119f2:	e088      	b.n	8011b06 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 80119f4:	68fb      	ldr	r3, [r7, #12]
 80119f6:	8a5b      	ldrh	r3, [r3, #18]
 80119f8:	2b00      	cmp	r3, #0
 80119fa:	d10f      	bne.n	8011a1c <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80119fc:	68f9      	ldr	r1, [r7, #12]
 80119fe:	68fb      	ldr	r3, [r7, #12]
 8011a00:	8a5b      	ldrh	r3, [r3, #18]
 8011a02:	461a      	mov	r2, r3
 8011a04:	68f8      	ldr	r0, [r7, #12]
 8011a06:	f000 f893 	bl	8011b30 <udp_bind>
 8011a0a:	4603      	mov	r3, r0
 8011a0c:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8011a0e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	d002      	beq.n	8011a1c <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8011a16:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8011a1a:	e074      	b.n	8011b06 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8011a1c:	68bb      	ldr	r3, [r7, #8]
 8011a1e:	891b      	ldrh	r3, [r3, #8]
 8011a20:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8011a24:	4293      	cmp	r3, r2
 8011a26:	d902      	bls.n	8011a2e <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8011a28:	f04f 33ff 	mov.w	r3, #4294967295
 8011a2c:	e06b      	b.n	8011b06 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8011a2e:	2108      	movs	r1, #8
 8011a30:	68b8      	ldr	r0, [r7, #8]
 8011a32:	f7f8 ffa9 	bl	800a988 <pbuf_add_header>
 8011a36:	4603      	mov	r3, r0
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	d015      	beq.n	8011a68 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8011a3c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011a40:	2108      	movs	r1, #8
 8011a42:	2022      	movs	r0, #34	; 0x22
 8011a44:	f7f8 fd52 	bl	800a4ec <pbuf_alloc>
 8011a48:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8011a4a:	69fb      	ldr	r3, [r7, #28]
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	d102      	bne.n	8011a56 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8011a50:	f04f 33ff 	mov.w	r3, #4294967295
 8011a54:	e057      	b.n	8011b06 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8011a56:	68bb      	ldr	r3, [r7, #8]
 8011a58:	891b      	ldrh	r3, [r3, #8]
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	d006      	beq.n	8011a6c <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8011a5e:	68b9      	ldr	r1, [r7, #8]
 8011a60:	69f8      	ldr	r0, [r7, #28]
 8011a62:	f7f9 f94b 	bl	800acfc <pbuf_chain>
 8011a66:	e001      	b.n	8011a6c <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8011a68:	68bb      	ldr	r3, [r7, #8]
 8011a6a:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8011a6c:	69fb      	ldr	r3, [r7, #28]
 8011a6e:	895b      	ldrh	r3, [r3, #10]
 8011a70:	2b07      	cmp	r3, #7
 8011a72:	d806      	bhi.n	8011a82 <udp_sendto_if_src+0x11e>
 8011a74:	4b26      	ldr	r3, [pc, #152]	; (8011b10 <udp_sendto_if_src+0x1ac>)
 8011a76:	f240 320d 	movw	r2, #781	; 0x30d
 8011a7a:	492c      	ldr	r1, [pc, #176]	; (8011b2c <udp_sendto_if_src+0x1c8>)
 8011a7c:	4826      	ldr	r0, [pc, #152]	; (8011b18 <udp_sendto_if_src+0x1b4>)
 8011a7e:	f004 fcc7 	bl	8016410 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8011a82:	69fb      	ldr	r3, [r7, #28]
 8011a84:	685b      	ldr	r3, [r3, #4]
 8011a86:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8011a88:	68fb      	ldr	r3, [r7, #12]
 8011a8a:	8a5b      	ldrh	r3, [r3, #18]
 8011a8c:	4618      	mov	r0, r3
 8011a8e:	f7f7 fc31 	bl	80092f4 <lwip_htons>
 8011a92:	4603      	mov	r3, r0
 8011a94:	461a      	mov	r2, r3
 8011a96:	697b      	ldr	r3, [r7, #20]
 8011a98:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8011a9a:	887b      	ldrh	r3, [r7, #2]
 8011a9c:	4618      	mov	r0, r3
 8011a9e:	f7f7 fc29 	bl	80092f4 <lwip_htons>
 8011aa2:	4603      	mov	r3, r0
 8011aa4:	461a      	mov	r2, r3
 8011aa6:	697b      	ldr	r3, [r7, #20]
 8011aa8:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8011aaa:	697b      	ldr	r3, [r7, #20]
 8011aac:	2200      	movs	r2, #0
 8011aae:	719a      	strb	r2, [r3, #6]
 8011ab0:	2200      	movs	r2, #0
 8011ab2:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8011ab4:	69fb      	ldr	r3, [r7, #28]
 8011ab6:	891b      	ldrh	r3, [r3, #8]
 8011ab8:	4618      	mov	r0, r3
 8011aba:	f7f7 fc1b 	bl	80092f4 <lwip_htons>
 8011abe:	4603      	mov	r3, r0
 8011ac0:	461a      	mov	r2, r3
 8011ac2:	697b      	ldr	r3, [r7, #20]
 8011ac4:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8011ac6:	2311      	movs	r3, #17
 8011ac8:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8011aca:	68fb      	ldr	r3, [r7, #12]
 8011acc:	7adb      	ldrb	r3, [r3, #11]
 8011ace:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8011ad0:	68fb      	ldr	r3, [r7, #12]
 8011ad2:	7a9b      	ldrb	r3, [r3, #10]
 8011ad4:	7cb9      	ldrb	r1, [r7, #18]
 8011ad6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011ad8:	9202      	str	r2, [sp, #8]
 8011ada:	7cfa      	ldrb	r2, [r7, #19]
 8011adc:	9201      	str	r2, [sp, #4]
 8011ade:	9300      	str	r3, [sp, #0]
 8011ae0:	460b      	mov	r3, r1
 8011ae2:	687a      	ldr	r2, [r7, #4]
 8011ae4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011ae6:	69f8      	ldr	r0, [r7, #28]
 8011ae8:	f003 fb38 	bl	801515c <ip4_output_if_src>
 8011aec:	4603      	mov	r3, r0
 8011aee:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8011af0:	69fa      	ldr	r2, [r7, #28]
 8011af2:	68bb      	ldr	r3, [r7, #8]
 8011af4:	429a      	cmp	r2, r3
 8011af6:	d004      	beq.n	8011b02 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8011af8:	69f8      	ldr	r0, [r7, #28]
 8011afa:	f7f8 ffdb 	bl	800aab4 <pbuf_free>
    q = NULL;
 8011afe:	2300      	movs	r3, #0
 8011b00:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8011b02:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8011b06:	4618      	mov	r0, r3
 8011b08:	3720      	adds	r7, #32
 8011b0a:	46bd      	mov	sp, r7
 8011b0c:	bd80      	pop	{r7, pc}
 8011b0e:	bf00      	nop
 8011b10:	0801a410 	.word	0x0801a410
 8011b14:	0801a5fc 	.word	0x0801a5fc
 8011b18:	0801a464 	.word	0x0801a464
 8011b1c:	0801a61c 	.word	0x0801a61c
 8011b20:	0801a63c 	.word	0x0801a63c
 8011b24:	0801a660 	.word	0x0801a660
 8011b28:	0801a684 	.word	0x0801a684
 8011b2c:	0801a6a8 	.word	0x0801a6a8

08011b30 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8011b30:	b580      	push	{r7, lr}
 8011b32:	b086      	sub	sp, #24
 8011b34:	af00      	add	r7, sp, #0
 8011b36:	60f8      	str	r0, [r7, #12]
 8011b38:	60b9      	str	r1, [r7, #8]
 8011b3a:	4613      	mov	r3, r2
 8011b3c:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8011b3e:	68bb      	ldr	r3, [r7, #8]
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	d101      	bne.n	8011b48 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8011b44:	4b39      	ldr	r3, [pc, #228]	; (8011c2c <udp_bind+0xfc>)
 8011b46:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8011b48:	68fb      	ldr	r3, [r7, #12]
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	d109      	bne.n	8011b62 <udp_bind+0x32>
 8011b4e:	4b38      	ldr	r3, [pc, #224]	; (8011c30 <udp_bind+0x100>)
 8011b50:	f240 32b7 	movw	r2, #951	; 0x3b7
 8011b54:	4937      	ldr	r1, [pc, #220]	; (8011c34 <udp_bind+0x104>)
 8011b56:	4838      	ldr	r0, [pc, #224]	; (8011c38 <udp_bind+0x108>)
 8011b58:	f004 fc5a 	bl	8016410 <iprintf>
 8011b5c:	f06f 030f 	mvn.w	r3, #15
 8011b60:	e060      	b.n	8011c24 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8011b62:	2300      	movs	r3, #0
 8011b64:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011b66:	4b35      	ldr	r3, [pc, #212]	; (8011c3c <udp_bind+0x10c>)
 8011b68:	681b      	ldr	r3, [r3, #0]
 8011b6a:	617b      	str	r3, [r7, #20]
 8011b6c:	e009      	b.n	8011b82 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8011b6e:	68fa      	ldr	r2, [r7, #12]
 8011b70:	697b      	ldr	r3, [r7, #20]
 8011b72:	429a      	cmp	r2, r3
 8011b74:	d102      	bne.n	8011b7c <udp_bind+0x4c>
      rebind = 1;
 8011b76:	2301      	movs	r3, #1
 8011b78:	74fb      	strb	r3, [r7, #19]
      break;
 8011b7a:	e005      	b.n	8011b88 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011b7c:	697b      	ldr	r3, [r7, #20]
 8011b7e:	68db      	ldr	r3, [r3, #12]
 8011b80:	617b      	str	r3, [r7, #20]
 8011b82:	697b      	ldr	r3, [r7, #20]
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	d1f2      	bne.n	8011b6e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8011b88:	88fb      	ldrh	r3, [r7, #6]
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	d109      	bne.n	8011ba2 <udp_bind+0x72>
    port = udp_new_port();
 8011b8e:	f7ff fcc5 	bl	801151c <udp_new_port>
 8011b92:	4603      	mov	r3, r0
 8011b94:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8011b96:	88fb      	ldrh	r3, [r7, #6]
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	d12c      	bne.n	8011bf6 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8011b9c:	f06f 0307 	mvn.w	r3, #7
 8011ba0:	e040      	b.n	8011c24 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011ba2:	4b26      	ldr	r3, [pc, #152]	; (8011c3c <udp_bind+0x10c>)
 8011ba4:	681b      	ldr	r3, [r3, #0]
 8011ba6:	617b      	str	r3, [r7, #20]
 8011ba8:	e022      	b.n	8011bf0 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8011baa:	68fa      	ldr	r2, [r7, #12]
 8011bac:	697b      	ldr	r3, [r7, #20]
 8011bae:	429a      	cmp	r2, r3
 8011bb0:	d01b      	beq.n	8011bea <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8011bb2:	697b      	ldr	r3, [r7, #20]
 8011bb4:	8a5b      	ldrh	r3, [r3, #18]
 8011bb6:	88fa      	ldrh	r2, [r7, #6]
 8011bb8:	429a      	cmp	r2, r3
 8011bba:	d116      	bne.n	8011bea <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8011bbc:	697b      	ldr	r3, [r7, #20]
 8011bbe:	681a      	ldr	r2, [r3, #0]
 8011bc0:	68bb      	ldr	r3, [r7, #8]
 8011bc2:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8011bc4:	429a      	cmp	r2, r3
 8011bc6:	d00d      	beq.n	8011be4 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8011bc8:	68bb      	ldr	r3, [r7, #8]
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	d00a      	beq.n	8011be4 <udp_bind+0xb4>
 8011bce:	68bb      	ldr	r3, [r7, #8]
 8011bd0:	681b      	ldr	r3, [r3, #0]
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	d006      	beq.n	8011be4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8011bd6:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8011bd8:	2b00      	cmp	r3, #0
 8011bda:	d003      	beq.n	8011be4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8011bdc:	697b      	ldr	r3, [r7, #20]
 8011bde:	681b      	ldr	r3, [r3, #0]
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	d102      	bne.n	8011bea <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8011be4:	f06f 0307 	mvn.w	r3, #7
 8011be8:	e01c      	b.n	8011c24 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011bea:	697b      	ldr	r3, [r7, #20]
 8011bec:	68db      	ldr	r3, [r3, #12]
 8011bee:	617b      	str	r3, [r7, #20]
 8011bf0:	697b      	ldr	r3, [r7, #20]
 8011bf2:	2b00      	cmp	r3, #0
 8011bf4:	d1d9      	bne.n	8011baa <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8011bf6:	68bb      	ldr	r3, [r7, #8]
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	d002      	beq.n	8011c02 <udp_bind+0xd2>
 8011bfc:	68bb      	ldr	r3, [r7, #8]
 8011bfe:	681b      	ldr	r3, [r3, #0]
 8011c00:	e000      	b.n	8011c04 <udp_bind+0xd4>
 8011c02:	2300      	movs	r3, #0
 8011c04:	68fa      	ldr	r2, [r7, #12]
 8011c06:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8011c08:	68fb      	ldr	r3, [r7, #12]
 8011c0a:	88fa      	ldrh	r2, [r7, #6]
 8011c0c:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8011c0e:	7cfb      	ldrb	r3, [r7, #19]
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	d106      	bne.n	8011c22 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8011c14:	4b09      	ldr	r3, [pc, #36]	; (8011c3c <udp_bind+0x10c>)
 8011c16:	681a      	ldr	r2, [r3, #0]
 8011c18:	68fb      	ldr	r3, [r7, #12]
 8011c1a:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8011c1c:	4a07      	ldr	r2, [pc, #28]	; (8011c3c <udp_bind+0x10c>)
 8011c1e:	68fb      	ldr	r3, [r7, #12]
 8011c20:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8011c22:	2300      	movs	r3, #0
}
 8011c24:	4618      	mov	r0, r3
 8011c26:	3718      	adds	r7, #24
 8011c28:	46bd      	mov	sp, r7
 8011c2a:	bd80      	pop	{r7, pc}
 8011c2c:	0801b32c 	.word	0x0801b32c
 8011c30:	0801a410 	.word	0x0801a410
 8011c34:	0801a6d8 	.word	0x0801a6d8
 8011c38:	0801a464 	.word	0x0801a464
 8011c3c:	2001af10 	.word	0x2001af10

08011c40 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8011c40:	b580      	push	{r7, lr}
 8011c42:	b086      	sub	sp, #24
 8011c44:	af00      	add	r7, sp, #0
 8011c46:	60f8      	str	r0, [r7, #12]
 8011c48:	60b9      	str	r1, [r7, #8]
 8011c4a:	4613      	mov	r3, r2
 8011c4c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8011c4e:	68fb      	ldr	r3, [r7, #12]
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	d109      	bne.n	8011c68 <udp_connect+0x28>
 8011c54:	4b2c      	ldr	r3, [pc, #176]	; (8011d08 <udp_connect+0xc8>)
 8011c56:	f240 4235 	movw	r2, #1077	; 0x435
 8011c5a:	492c      	ldr	r1, [pc, #176]	; (8011d0c <udp_connect+0xcc>)
 8011c5c:	482c      	ldr	r0, [pc, #176]	; (8011d10 <udp_connect+0xd0>)
 8011c5e:	f004 fbd7 	bl	8016410 <iprintf>
 8011c62:	f06f 030f 	mvn.w	r3, #15
 8011c66:	e04b      	b.n	8011d00 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8011c68:	68bb      	ldr	r3, [r7, #8]
 8011c6a:	2b00      	cmp	r3, #0
 8011c6c:	d109      	bne.n	8011c82 <udp_connect+0x42>
 8011c6e:	4b26      	ldr	r3, [pc, #152]	; (8011d08 <udp_connect+0xc8>)
 8011c70:	f240 4236 	movw	r2, #1078	; 0x436
 8011c74:	4927      	ldr	r1, [pc, #156]	; (8011d14 <udp_connect+0xd4>)
 8011c76:	4826      	ldr	r0, [pc, #152]	; (8011d10 <udp_connect+0xd0>)
 8011c78:	f004 fbca 	bl	8016410 <iprintf>
 8011c7c:	f06f 030f 	mvn.w	r3, #15
 8011c80:	e03e      	b.n	8011d00 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8011c82:	68fb      	ldr	r3, [r7, #12]
 8011c84:	8a5b      	ldrh	r3, [r3, #18]
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	d10f      	bne.n	8011caa <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8011c8a:	68f9      	ldr	r1, [r7, #12]
 8011c8c:	68fb      	ldr	r3, [r7, #12]
 8011c8e:	8a5b      	ldrh	r3, [r3, #18]
 8011c90:	461a      	mov	r2, r3
 8011c92:	68f8      	ldr	r0, [r7, #12]
 8011c94:	f7ff ff4c 	bl	8011b30 <udp_bind>
 8011c98:	4603      	mov	r3, r0
 8011c9a:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8011c9c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011ca0:	2b00      	cmp	r3, #0
 8011ca2:	d002      	beq.n	8011caa <udp_connect+0x6a>
      return err;
 8011ca4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011ca8:	e02a      	b.n	8011d00 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8011caa:	68bb      	ldr	r3, [r7, #8]
 8011cac:	2b00      	cmp	r3, #0
 8011cae:	d002      	beq.n	8011cb6 <udp_connect+0x76>
 8011cb0:	68bb      	ldr	r3, [r7, #8]
 8011cb2:	681b      	ldr	r3, [r3, #0]
 8011cb4:	e000      	b.n	8011cb8 <udp_connect+0x78>
 8011cb6:	2300      	movs	r3, #0
 8011cb8:	68fa      	ldr	r2, [r7, #12]
 8011cba:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8011cbc:	68fb      	ldr	r3, [r7, #12]
 8011cbe:	88fa      	ldrh	r2, [r7, #6]
 8011cc0:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8011cc2:	68fb      	ldr	r3, [r7, #12]
 8011cc4:	7c1b      	ldrb	r3, [r3, #16]
 8011cc6:	f043 0304 	orr.w	r3, r3, #4
 8011cca:	b2da      	uxtb	r2, r3
 8011ccc:	68fb      	ldr	r3, [r7, #12]
 8011cce:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011cd0:	4b11      	ldr	r3, [pc, #68]	; (8011d18 <udp_connect+0xd8>)
 8011cd2:	681b      	ldr	r3, [r3, #0]
 8011cd4:	617b      	str	r3, [r7, #20]
 8011cd6:	e008      	b.n	8011cea <udp_connect+0xaa>
    if (pcb == ipcb) {
 8011cd8:	68fa      	ldr	r2, [r7, #12]
 8011cda:	697b      	ldr	r3, [r7, #20]
 8011cdc:	429a      	cmp	r2, r3
 8011cde:	d101      	bne.n	8011ce4 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8011ce0:	2300      	movs	r3, #0
 8011ce2:	e00d      	b.n	8011d00 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011ce4:	697b      	ldr	r3, [r7, #20]
 8011ce6:	68db      	ldr	r3, [r3, #12]
 8011ce8:	617b      	str	r3, [r7, #20]
 8011cea:	697b      	ldr	r3, [r7, #20]
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	d1f3      	bne.n	8011cd8 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8011cf0:	4b09      	ldr	r3, [pc, #36]	; (8011d18 <udp_connect+0xd8>)
 8011cf2:	681a      	ldr	r2, [r3, #0]
 8011cf4:	68fb      	ldr	r3, [r7, #12]
 8011cf6:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8011cf8:	4a07      	ldr	r2, [pc, #28]	; (8011d18 <udp_connect+0xd8>)
 8011cfa:	68fb      	ldr	r3, [r7, #12]
 8011cfc:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8011cfe:	2300      	movs	r3, #0
}
 8011d00:	4618      	mov	r0, r3
 8011d02:	3718      	adds	r7, #24
 8011d04:	46bd      	mov	sp, r7
 8011d06:	bd80      	pop	{r7, pc}
 8011d08:	0801a410 	.word	0x0801a410
 8011d0c:	0801a6f0 	.word	0x0801a6f0
 8011d10:	0801a464 	.word	0x0801a464
 8011d14:	0801a70c 	.word	0x0801a70c
 8011d18:	2001af10 	.word	0x2001af10

08011d1c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8011d1c:	b580      	push	{r7, lr}
 8011d1e:	b084      	sub	sp, #16
 8011d20:	af00      	add	r7, sp, #0
 8011d22:	60f8      	str	r0, [r7, #12]
 8011d24:	60b9      	str	r1, [r7, #8]
 8011d26:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8011d28:	68fb      	ldr	r3, [r7, #12]
 8011d2a:	2b00      	cmp	r3, #0
 8011d2c:	d107      	bne.n	8011d3e <udp_recv+0x22>
 8011d2e:	4b08      	ldr	r3, [pc, #32]	; (8011d50 <udp_recv+0x34>)
 8011d30:	f240 428a 	movw	r2, #1162	; 0x48a
 8011d34:	4907      	ldr	r1, [pc, #28]	; (8011d54 <udp_recv+0x38>)
 8011d36:	4808      	ldr	r0, [pc, #32]	; (8011d58 <udp_recv+0x3c>)
 8011d38:	f004 fb6a 	bl	8016410 <iprintf>
 8011d3c:	e005      	b.n	8011d4a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8011d3e:	68fb      	ldr	r3, [r7, #12]
 8011d40:	68ba      	ldr	r2, [r7, #8]
 8011d42:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8011d44:	68fb      	ldr	r3, [r7, #12]
 8011d46:	687a      	ldr	r2, [r7, #4]
 8011d48:	61da      	str	r2, [r3, #28]
}
 8011d4a:	3710      	adds	r7, #16
 8011d4c:	46bd      	mov	sp, r7
 8011d4e:	bd80      	pop	{r7, pc}
 8011d50:	0801a410 	.word	0x0801a410
 8011d54:	0801a744 	.word	0x0801a744
 8011d58:	0801a464 	.word	0x0801a464

08011d5c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8011d5c:	b580      	push	{r7, lr}
 8011d5e:	b084      	sub	sp, #16
 8011d60:	af00      	add	r7, sp, #0
 8011d62:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	d107      	bne.n	8011d7a <udp_remove+0x1e>
 8011d6a:	4b19      	ldr	r3, [pc, #100]	; (8011dd0 <udp_remove+0x74>)
 8011d6c:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8011d70:	4918      	ldr	r1, [pc, #96]	; (8011dd4 <udp_remove+0x78>)
 8011d72:	4819      	ldr	r0, [pc, #100]	; (8011dd8 <udp_remove+0x7c>)
 8011d74:	f004 fb4c 	bl	8016410 <iprintf>
 8011d78:	e026      	b.n	8011dc8 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8011d7a:	4b18      	ldr	r3, [pc, #96]	; (8011ddc <udp_remove+0x80>)
 8011d7c:	681b      	ldr	r3, [r3, #0]
 8011d7e:	687a      	ldr	r2, [r7, #4]
 8011d80:	429a      	cmp	r2, r3
 8011d82:	d105      	bne.n	8011d90 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8011d84:	4b15      	ldr	r3, [pc, #84]	; (8011ddc <udp_remove+0x80>)
 8011d86:	681b      	ldr	r3, [r3, #0]
 8011d88:	68db      	ldr	r3, [r3, #12]
 8011d8a:	4a14      	ldr	r2, [pc, #80]	; (8011ddc <udp_remove+0x80>)
 8011d8c:	6013      	str	r3, [r2, #0]
 8011d8e:	e017      	b.n	8011dc0 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8011d90:	4b12      	ldr	r3, [pc, #72]	; (8011ddc <udp_remove+0x80>)
 8011d92:	681b      	ldr	r3, [r3, #0]
 8011d94:	60fb      	str	r3, [r7, #12]
 8011d96:	e010      	b.n	8011dba <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8011d98:	68fb      	ldr	r3, [r7, #12]
 8011d9a:	68db      	ldr	r3, [r3, #12]
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	d009      	beq.n	8011db4 <udp_remove+0x58>
 8011da0:	68fb      	ldr	r3, [r7, #12]
 8011da2:	68db      	ldr	r3, [r3, #12]
 8011da4:	687a      	ldr	r2, [r7, #4]
 8011da6:	429a      	cmp	r2, r3
 8011da8:	d104      	bne.n	8011db4 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	68da      	ldr	r2, [r3, #12]
 8011dae:	68fb      	ldr	r3, [r7, #12]
 8011db0:	60da      	str	r2, [r3, #12]
        break;
 8011db2:	e005      	b.n	8011dc0 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8011db4:	68fb      	ldr	r3, [r7, #12]
 8011db6:	68db      	ldr	r3, [r3, #12]
 8011db8:	60fb      	str	r3, [r7, #12]
 8011dba:	68fb      	ldr	r3, [r7, #12]
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	d1eb      	bne.n	8011d98 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8011dc0:	6879      	ldr	r1, [r7, #4]
 8011dc2:	2000      	movs	r0, #0
 8011dc4:	f7f7 ffc6 	bl	8009d54 <memp_free>
}
 8011dc8:	3710      	adds	r7, #16
 8011dca:	46bd      	mov	sp, r7
 8011dcc:	bd80      	pop	{r7, pc}
 8011dce:	bf00      	nop
 8011dd0:	0801a410 	.word	0x0801a410
 8011dd4:	0801a75c 	.word	0x0801a75c
 8011dd8:	0801a464 	.word	0x0801a464
 8011ddc:	2001af10 	.word	0x2001af10

08011de0 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8011de0:	b580      	push	{r7, lr}
 8011de2:	b082      	sub	sp, #8
 8011de4:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8011de6:	2000      	movs	r0, #0
 8011de8:	f7f7 ff62 	bl	8009cb0 <memp_malloc>
 8011dec:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	2b00      	cmp	r3, #0
 8011df2:	d007      	beq.n	8011e04 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8011df4:	2220      	movs	r2, #32
 8011df6:	2100      	movs	r1, #0
 8011df8:	6878      	ldr	r0, [r7, #4]
 8011dfa:	f004 fb01 	bl	8016400 <memset>
    pcb->ttl = UDP_TTL;
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	22ff      	movs	r2, #255	; 0xff
 8011e02:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8011e04:	687b      	ldr	r3, [r7, #4]
}
 8011e06:	4618      	mov	r0, r3
 8011e08:	3708      	adds	r7, #8
 8011e0a:	46bd      	mov	sp, r7
 8011e0c:	bd80      	pop	{r7, pc}
	...

08011e10 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8011e10:	b480      	push	{r7}
 8011e12:	b085      	sub	sp, #20
 8011e14:	af00      	add	r7, sp, #0
 8011e16:	6078      	str	r0, [r7, #4]
 8011e18:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	d01e      	beq.n	8011e5e <udp_netif_ip_addr_changed+0x4e>
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	681b      	ldr	r3, [r3, #0]
 8011e24:	2b00      	cmp	r3, #0
 8011e26:	d01a      	beq.n	8011e5e <udp_netif_ip_addr_changed+0x4e>
 8011e28:	683b      	ldr	r3, [r7, #0]
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d017      	beq.n	8011e5e <udp_netif_ip_addr_changed+0x4e>
 8011e2e:	683b      	ldr	r3, [r7, #0]
 8011e30:	681b      	ldr	r3, [r3, #0]
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	d013      	beq.n	8011e5e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8011e36:	4b0d      	ldr	r3, [pc, #52]	; (8011e6c <udp_netif_ip_addr_changed+0x5c>)
 8011e38:	681b      	ldr	r3, [r3, #0]
 8011e3a:	60fb      	str	r3, [r7, #12]
 8011e3c:	e00c      	b.n	8011e58 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8011e3e:	68fb      	ldr	r3, [r7, #12]
 8011e40:	681a      	ldr	r2, [r3, #0]
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	681b      	ldr	r3, [r3, #0]
 8011e46:	429a      	cmp	r2, r3
 8011e48:	d103      	bne.n	8011e52 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8011e4a:	683b      	ldr	r3, [r7, #0]
 8011e4c:	681a      	ldr	r2, [r3, #0]
 8011e4e:	68fb      	ldr	r3, [r7, #12]
 8011e50:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8011e52:	68fb      	ldr	r3, [r7, #12]
 8011e54:	68db      	ldr	r3, [r3, #12]
 8011e56:	60fb      	str	r3, [r7, #12]
 8011e58:	68fb      	ldr	r3, [r7, #12]
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	d1ef      	bne.n	8011e3e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8011e5e:	bf00      	nop
 8011e60:	3714      	adds	r7, #20
 8011e62:	46bd      	mov	sp, r7
 8011e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e68:	4770      	bx	lr
 8011e6a:	bf00      	nop
 8011e6c:	2001af10 	.word	0x2001af10

08011e70 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8011e70:	b580      	push	{r7, lr}
 8011e72:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8011e74:	4b20      	ldr	r3, [pc, #128]	; (8011ef8 <dhcp_inc_pcb_refcount+0x88>)
 8011e76:	781b      	ldrb	r3, [r3, #0]
 8011e78:	2b00      	cmp	r3, #0
 8011e7a:	d133      	bne.n	8011ee4 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8011e7c:	4b1f      	ldr	r3, [pc, #124]	; (8011efc <dhcp_inc_pcb_refcount+0x8c>)
 8011e7e:	681b      	ldr	r3, [r3, #0]
 8011e80:	2b00      	cmp	r3, #0
 8011e82:	d005      	beq.n	8011e90 <dhcp_inc_pcb_refcount+0x20>
 8011e84:	4b1e      	ldr	r3, [pc, #120]	; (8011f00 <dhcp_inc_pcb_refcount+0x90>)
 8011e86:	22e5      	movs	r2, #229	; 0xe5
 8011e88:	491e      	ldr	r1, [pc, #120]	; (8011f04 <dhcp_inc_pcb_refcount+0x94>)
 8011e8a:	481f      	ldr	r0, [pc, #124]	; (8011f08 <dhcp_inc_pcb_refcount+0x98>)
 8011e8c:	f004 fac0 	bl	8016410 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8011e90:	f7ff ffa6 	bl	8011de0 <udp_new>
 8011e94:	4603      	mov	r3, r0
 8011e96:	4a19      	ldr	r2, [pc, #100]	; (8011efc <dhcp_inc_pcb_refcount+0x8c>)
 8011e98:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 8011e9a:	4b18      	ldr	r3, [pc, #96]	; (8011efc <dhcp_inc_pcb_refcount+0x8c>)
 8011e9c:	681b      	ldr	r3, [r3, #0]
 8011e9e:	2b00      	cmp	r3, #0
 8011ea0:	d102      	bne.n	8011ea8 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8011ea2:	f04f 33ff 	mov.w	r3, #4294967295
 8011ea6:	e024      	b.n	8011ef2 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8011ea8:	4b14      	ldr	r3, [pc, #80]	; (8011efc <dhcp_inc_pcb_refcount+0x8c>)
 8011eaa:	681b      	ldr	r3, [r3, #0]
 8011eac:	7a5a      	ldrb	r2, [r3, #9]
 8011eae:	4b13      	ldr	r3, [pc, #76]	; (8011efc <dhcp_inc_pcb_refcount+0x8c>)
 8011eb0:	681b      	ldr	r3, [r3, #0]
 8011eb2:	f042 0220 	orr.w	r2, r2, #32
 8011eb6:	b2d2      	uxtb	r2, r2
 8011eb8:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8011eba:	4b10      	ldr	r3, [pc, #64]	; (8011efc <dhcp_inc_pcb_refcount+0x8c>)
 8011ebc:	681b      	ldr	r3, [r3, #0]
 8011ebe:	2244      	movs	r2, #68	; 0x44
 8011ec0:	4912      	ldr	r1, [pc, #72]	; (8011f0c <dhcp_inc_pcb_refcount+0x9c>)
 8011ec2:	4618      	mov	r0, r3
 8011ec4:	f7ff fe34 	bl	8011b30 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8011ec8:	4b0c      	ldr	r3, [pc, #48]	; (8011efc <dhcp_inc_pcb_refcount+0x8c>)
 8011eca:	681b      	ldr	r3, [r3, #0]
 8011ecc:	2243      	movs	r2, #67	; 0x43
 8011ece:	490f      	ldr	r1, [pc, #60]	; (8011f0c <dhcp_inc_pcb_refcount+0x9c>)
 8011ed0:	4618      	mov	r0, r3
 8011ed2:	f7ff feb5 	bl	8011c40 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8011ed6:	4b09      	ldr	r3, [pc, #36]	; (8011efc <dhcp_inc_pcb_refcount+0x8c>)
 8011ed8:	681b      	ldr	r3, [r3, #0]
 8011eda:	2200      	movs	r2, #0
 8011edc:	490c      	ldr	r1, [pc, #48]	; (8011f10 <dhcp_inc_pcb_refcount+0xa0>)
 8011ede:	4618      	mov	r0, r3
 8011ee0:	f7ff ff1c 	bl	8011d1c <udp_recv>
  }

  dhcp_pcb_refcount++;
 8011ee4:	4b04      	ldr	r3, [pc, #16]	; (8011ef8 <dhcp_inc_pcb_refcount+0x88>)
 8011ee6:	781b      	ldrb	r3, [r3, #0]
 8011ee8:	3301      	adds	r3, #1
 8011eea:	b2da      	uxtb	r2, r3
 8011eec:	4b02      	ldr	r3, [pc, #8]	; (8011ef8 <dhcp_inc_pcb_refcount+0x88>)
 8011eee:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8011ef0:	2300      	movs	r3, #0
}
 8011ef2:	4618      	mov	r0, r3
 8011ef4:	bd80      	pop	{r7, pc}
 8011ef6:	bf00      	nop
 8011ef8:	2001af40 	.word	0x2001af40
 8011efc:	2001af3c 	.word	0x2001af3c
 8011f00:	0801a774 	.word	0x0801a774
 8011f04:	0801a7ac 	.word	0x0801a7ac
 8011f08:	0801a7d4 	.word	0x0801a7d4
 8011f0c:	0801b32c 	.word	0x0801b32c
 8011f10:	080137a5 	.word	0x080137a5

08011f14 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8011f14:	b580      	push	{r7, lr}
 8011f16:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8011f18:	4b0e      	ldr	r3, [pc, #56]	; (8011f54 <dhcp_dec_pcb_refcount+0x40>)
 8011f1a:	781b      	ldrb	r3, [r3, #0]
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	d105      	bne.n	8011f2c <dhcp_dec_pcb_refcount+0x18>
 8011f20:	4b0d      	ldr	r3, [pc, #52]	; (8011f58 <dhcp_dec_pcb_refcount+0x44>)
 8011f22:	22ff      	movs	r2, #255	; 0xff
 8011f24:	490d      	ldr	r1, [pc, #52]	; (8011f5c <dhcp_dec_pcb_refcount+0x48>)
 8011f26:	480e      	ldr	r0, [pc, #56]	; (8011f60 <dhcp_dec_pcb_refcount+0x4c>)
 8011f28:	f004 fa72 	bl	8016410 <iprintf>
  dhcp_pcb_refcount--;
 8011f2c:	4b09      	ldr	r3, [pc, #36]	; (8011f54 <dhcp_dec_pcb_refcount+0x40>)
 8011f2e:	781b      	ldrb	r3, [r3, #0]
 8011f30:	3b01      	subs	r3, #1
 8011f32:	b2da      	uxtb	r2, r3
 8011f34:	4b07      	ldr	r3, [pc, #28]	; (8011f54 <dhcp_dec_pcb_refcount+0x40>)
 8011f36:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8011f38:	4b06      	ldr	r3, [pc, #24]	; (8011f54 <dhcp_dec_pcb_refcount+0x40>)
 8011f3a:	781b      	ldrb	r3, [r3, #0]
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d107      	bne.n	8011f50 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8011f40:	4b08      	ldr	r3, [pc, #32]	; (8011f64 <dhcp_dec_pcb_refcount+0x50>)
 8011f42:	681b      	ldr	r3, [r3, #0]
 8011f44:	4618      	mov	r0, r3
 8011f46:	f7ff ff09 	bl	8011d5c <udp_remove>
    dhcp_pcb = NULL;
 8011f4a:	4b06      	ldr	r3, [pc, #24]	; (8011f64 <dhcp_dec_pcb_refcount+0x50>)
 8011f4c:	2200      	movs	r2, #0
 8011f4e:	601a      	str	r2, [r3, #0]
  }
}
 8011f50:	bf00      	nop
 8011f52:	bd80      	pop	{r7, pc}
 8011f54:	2001af40 	.word	0x2001af40
 8011f58:	0801a774 	.word	0x0801a774
 8011f5c:	0801a7fc 	.word	0x0801a7fc
 8011f60:	0801a7d4 	.word	0x0801a7d4
 8011f64:	2001af3c 	.word	0x2001af3c

08011f68 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8011f68:	b580      	push	{r7, lr}
 8011f6a:	b084      	sub	sp, #16
 8011f6c:	af00      	add	r7, sp, #0
 8011f6e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f74:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8011f76:	210c      	movs	r1, #12
 8011f78:	68f8      	ldr	r0, [r7, #12]
 8011f7a:	f001 f855 	bl	8013028 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8011f7e:	4b06      	ldr	r3, [pc, #24]	; (8011f98 <dhcp_handle_nak+0x30>)
 8011f80:	4a05      	ldr	r2, [pc, #20]	; (8011f98 <dhcp_handle_nak+0x30>)
 8011f82:	4905      	ldr	r1, [pc, #20]	; (8011f98 <dhcp_handle_nak+0x30>)
 8011f84:	6878      	ldr	r0, [r7, #4]
 8011f86:	f7f8 f887 	bl	800a098 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8011f8a:	6878      	ldr	r0, [r7, #4]
 8011f8c:	f000 fc48 	bl	8012820 <dhcp_discover>
}
 8011f90:	bf00      	nop
 8011f92:	3710      	adds	r7, #16
 8011f94:	46bd      	mov	sp, r7
 8011f96:	bd80      	pop	{r7, pc}
 8011f98:	0801b32c 	.word	0x0801b32c

08011f9c <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8011f9c:	b580      	push	{r7, lr}
 8011f9e:	b084      	sub	sp, #16
 8011fa0:	af00      	add	r7, sp, #0
 8011fa2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011fa8:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8011faa:	2108      	movs	r1, #8
 8011fac:	68f8      	ldr	r0, [r7, #12]
 8011fae:	f001 f83b 	bl	8013028 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8011fb2:	68fb      	ldr	r3, [r7, #12]
 8011fb4:	331c      	adds	r3, #28
 8011fb6:	2200      	movs	r2, #0
 8011fb8:	4619      	mov	r1, r3
 8011fba:	6878      	ldr	r0, [r7, #4]
 8011fbc:	f002 fb3c 	bl	8014638 <etharp_query>
 8011fc0:	4603      	mov	r3, r0
 8011fc2:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8011fc4:	68fb      	ldr	r3, [r7, #12]
 8011fc6:	799b      	ldrb	r3, [r3, #6]
 8011fc8:	2bff      	cmp	r3, #255	; 0xff
 8011fca:	d005      	beq.n	8011fd8 <dhcp_check+0x3c>
    dhcp->tries++;
 8011fcc:	68fb      	ldr	r3, [r7, #12]
 8011fce:	799b      	ldrb	r3, [r3, #6]
 8011fd0:	3301      	adds	r3, #1
 8011fd2:	b2da      	uxtb	r2, r3
 8011fd4:	68fb      	ldr	r3, [r7, #12]
 8011fd6:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8011fd8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8011fdc:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8011fde:	893b      	ldrh	r3, [r7, #8]
 8011fe0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8011fe4:	4a06      	ldr	r2, [pc, #24]	; (8012000 <dhcp_check+0x64>)
 8011fe6:	fb82 1203 	smull	r1, r2, r2, r3
 8011fea:	1152      	asrs	r2, r2, #5
 8011fec:	17db      	asrs	r3, r3, #31
 8011fee:	1ad3      	subs	r3, r2, r3
 8011ff0:	b29a      	uxth	r2, r3
 8011ff2:	68fb      	ldr	r3, [r7, #12]
 8011ff4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8011ff6:	bf00      	nop
 8011ff8:	3710      	adds	r7, #16
 8011ffa:	46bd      	mov	sp, r7
 8011ffc:	bd80      	pop	{r7, pc}
 8011ffe:	bf00      	nop
 8012000:	10624dd3 	.word	0x10624dd3

08012004 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8012004:	b580      	push	{r7, lr}
 8012006:	b084      	sub	sp, #16
 8012008:	af00      	add	r7, sp, #0
 801200a:	6078      	str	r0, [r7, #4]
 801200c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012012:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8012014:	4b0c      	ldr	r3, [pc, #48]	; (8012048 <dhcp_handle_offer+0x44>)
 8012016:	789b      	ldrb	r3, [r3, #2]
 8012018:	2b00      	cmp	r3, #0
 801201a:	d011      	beq.n	8012040 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 801201c:	68fb      	ldr	r3, [r7, #12]
 801201e:	2200      	movs	r2, #0
 8012020:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8012022:	4b0a      	ldr	r3, [pc, #40]	; (801204c <dhcp_handle_offer+0x48>)
 8012024:	689b      	ldr	r3, [r3, #8]
 8012026:	4618      	mov	r0, r3
 8012028:	f7f7 f979 	bl	800931e <lwip_htonl>
 801202c:	4602      	mov	r2, r0
 801202e:	68fb      	ldr	r3, [r7, #12]
 8012030:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8012032:	683b      	ldr	r3, [r7, #0]
 8012034:	691a      	ldr	r2, [r3, #16]
 8012036:	68fb      	ldr	r3, [r7, #12]
 8012038:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 801203a:	6878      	ldr	r0, [r7, #4]
 801203c:	f000 f808 	bl	8012050 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8012040:	bf00      	nop
 8012042:	3710      	adds	r7, #16
 8012044:	46bd      	mov	sp, r7
 8012046:	bd80      	pop	{r7, pc}
 8012048:	2001af34 	.word	0x2001af34
 801204c:	2001af14 	.word	0x2001af14

08012050 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8012050:	b5b0      	push	{r4, r5, r7, lr}
 8012052:	b08a      	sub	sp, #40	; 0x28
 8012054:	af02      	add	r7, sp, #8
 8012056:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	2b00      	cmp	r3, #0
 801205c:	d109      	bne.n	8012072 <dhcp_select+0x22>
 801205e:	4b71      	ldr	r3, [pc, #452]	; (8012224 <dhcp_select+0x1d4>)
 8012060:	f240 1277 	movw	r2, #375	; 0x177
 8012064:	4970      	ldr	r1, [pc, #448]	; (8012228 <dhcp_select+0x1d8>)
 8012066:	4871      	ldr	r0, [pc, #452]	; (801222c <dhcp_select+0x1dc>)
 8012068:	f004 f9d2 	bl	8016410 <iprintf>
 801206c:	f06f 030f 	mvn.w	r3, #15
 8012070:	e0d3      	b.n	801221a <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012076:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8012078:	69bb      	ldr	r3, [r7, #24]
 801207a:	2b00      	cmp	r3, #0
 801207c:	d109      	bne.n	8012092 <dhcp_select+0x42>
 801207e:	4b69      	ldr	r3, [pc, #420]	; (8012224 <dhcp_select+0x1d4>)
 8012080:	f240 1279 	movw	r2, #377	; 0x179
 8012084:	496a      	ldr	r1, [pc, #424]	; (8012230 <dhcp_select+0x1e0>)
 8012086:	4869      	ldr	r0, [pc, #420]	; (801222c <dhcp_select+0x1dc>)
 8012088:	f004 f9c2 	bl	8016410 <iprintf>
 801208c:	f06f 0305 	mvn.w	r3, #5
 8012090:	e0c3      	b.n	801221a <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8012092:	2101      	movs	r1, #1
 8012094:	69b8      	ldr	r0, [r7, #24]
 8012096:	f000 ffc7 	bl	8013028 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801209a:	f107 030c 	add.w	r3, r7, #12
 801209e:	2203      	movs	r2, #3
 80120a0:	69b9      	ldr	r1, [r7, #24]
 80120a2:	6878      	ldr	r0, [r7, #4]
 80120a4:	f001 fc4c 	bl	8013940 <dhcp_create_msg>
 80120a8:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80120aa:	697b      	ldr	r3, [r7, #20]
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	f000 8085 	beq.w	80121bc <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80120b2:	697b      	ldr	r3, [r7, #20]
 80120b4:	685b      	ldr	r3, [r3, #4]
 80120b6:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80120b8:	89b8      	ldrh	r0, [r7, #12]
 80120ba:	693b      	ldr	r3, [r7, #16]
 80120bc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80120c0:	2302      	movs	r3, #2
 80120c2:	2239      	movs	r2, #57	; 0x39
 80120c4:	f000 ffca 	bl	801305c <dhcp_option>
 80120c8:	4603      	mov	r3, r0
 80120ca:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80120cc:	89b8      	ldrh	r0, [r7, #12]
 80120ce:	693b      	ldr	r3, [r7, #16]
 80120d0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80120d8:	461a      	mov	r2, r3
 80120da:	f001 f819 	bl	8013110 <dhcp_option_short>
 80120de:	4603      	mov	r3, r0
 80120e0:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80120e2:	89b8      	ldrh	r0, [r7, #12]
 80120e4:	693b      	ldr	r3, [r7, #16]
 80120e6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80120ea:	2304      	movs	r3, #4
 80120ec:	2232      	movs	r2, #50	; 0x32
 80120ee:	f000 ffb5 	bl	801305c <dhcp_option>
 80120f2:	4603      	mov	r3, r0
 80120f4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80120f6:	89bc      	ldrh	r4, [r7, #12]
 80120f8:	693b      	ldr	r3, [r7, #16]
 80120fa:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80120fe:	69bb      	ldr	r3, [r7, #24]
 8012100:	69db      	ldr	r3, [r3, #28]
 8012102:	4618      	mov	r0, r3
 8012104:	f7f7 f90b 	bl	800931e <lwip_htonl>
 8012108:	4603      	mov	r3, r0
 801210a:	461a      	mov	r2, r3
 801210c:	4629      	mov	r1, r5
 801210e:	4620      	mov	r0, r4
 8012110:	f001 f830 	bl	8013174 <dhcp_option_long>
 8012114:	4603      	mov	r3, r0
 8012116:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8012118:	89b8      	ldrh	r0, [r7, #12]
 801211a:	693b      	ldr	r3, [r7, #16]
 801211c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012120:	2304      	movs	r3, #4
 8012122:	2236      	movs	r2, #54	; 0x36
 8012124:	f000 ff9a 	bl	801305c <dhcp_option>
 8012128:	4603      	mov	r3, r0
 801212a:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 801212c:	89bc      	ldrh	r4, [r7, #12]
 801212e:	693b      	ldr	r3, [r7, #16]
 8012130:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8012134:	69bb      	ldr	r3, [r7, #24]
 8012136:	699b      	ldr	r3, [r3, #24]
 8012138:	4618      	mov	r0, r3
 801213a:	f7f7 f8f0 	bl	800931e <lwip_htonl>
 801213e:	4603      	mov	r3, r0
 8012140:	461a      	mov	r2, r3
 8012142:	4629      	mov	r1, r5
 8012144:	4620      	mov	r0, r4
 8012146:	f001 f815 	bl	8013174 <dhcp_option_long>
 801214a:	4603      	mov	r3, r0
 801214c:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801214e:	89b8      	ldrh	r0, [r7, #12]
 8012150:	693b      	ldr	r3, [r7, #16]
 8012152:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012156:	2303      	movs	r3, #3
 8012158:	2237      	movs	r2, #55	; 0x37
 801215a:	f000 ff7f 	bl	801305c <dhcp_option>
 801215e:	4603      	mov	r3, r0
 8012160:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012162:	2300      	movs	r3, #0
 8012164:	77bb      	strb	r3, [r7, #30]
 8012166:	e00e      	b.n	8012186 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8012168:	89b8      	ldrh	r0, [r7, #12]
 801216a:	693b      	ldr	r3, [r7, #16]
 801216c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012170:	7fbb      	ldrb	r3, [r7, #30]
 8012172:	4a30      	ldr	r2, [pc, #192]	; (8012234 <dhcp_select+0x1e4>)
 8012174:	5cd3      	ldrb	r3, [r2, r3]
 8012176:	461a      	mov	r2, r3
 8012178:	f000 ffa4 	bl	80130c4 <dhcp_option_byte>
 801217c:	4603      	mov	r3, r0
 801217e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012180:	7fbb      	ldrb	r3, [r7, #30]
 8012182:	3301      	adds	r3, #1
 8012184:	77bb      	strb	r3, [r7, #30]
 8012186:	7fbb      	ldrb	r3, [r7, #30]
 8012188:	2b02      	cmp	r3, #2
 801218a:	d9ed      	bls.n	8012168 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801218c:	89b8      	ldrh	r0, [r7, #12]
 801218e:	693b      	ldr	r3, [r7, #16]
 8012190:	33f0      	adds	r3, #240	; 0xf0
 8012192:	697a      	ldr	r2, [r7, #20]
 8012194:	4619      	mov	r1, r3
 8012196:	f001 fca9 	bl	8013aec <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801219a:	4b27      	ldr	r3, [pc, #156]	; (8012238 <dhcp_select+0x1e8>)
 801219c:	6818      	ldr	r0, [r3, #0]
 801219e:	4b27      	ldr	r3, [pc, #156]	; (801223c <dhcp_select+0x1ec>)
 80121a0:	9301      	str	r3, [sp, #4]
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	9300      	str	r3, [sp, #0]
 80121a6:	2343      	movs	r3, #67	; 0x43
 80121a8:	4a25      	ldr	r2, [pc, #148]	; (8012240 <dhcp_select+0x1f0>)
 80121aa:	6979      	ldr	r1, [r7, #20]
 80121ac:	f7ff fbda 	bl	8011964 <udp_sendto_if_src>
 80121b0:	4603      	mov	r3, r0
 80121b2:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80121b4:	6978      	ldr	r0, [r7, #20]
 80121b6:	f7f8 fc7d 	bl	800aab4 <pbuf_free>
 80121ba:	e001      	b.n	80121c0 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80121bc:	23ff      	movs	r3, #255	; 0xff
 80121be:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80121c0:	69bb      	ldr	r3, [r7, #24]
 80121c2:	799b      	ldrb	r3, [r3, #6]
 80121c4:	2bff      	cmp	r3, #255	; 0xff
 80121c6:	d005      	beq.n	80121d4 <dhcp_select+0x184>
    dhcp->tries++;
 80121c8:	69bb      	ldr	r3, [r7, #24]
 80121ca:	799b      	ldrb	r3, [r3, #6]
 80121cc:	3301      	adds	r3, #1
 80121ce:	b2da      	uxtb	r2, r3
 80121d0:	69bb      	ldr	r3, [r7, #24]
 80121d2:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80121d4:	69bb      	ldr	r3, [r7, #24]
 80121d6:	799b      	ldrb	r3, [r3, #6]
 80121d8:	2b05      	cmp	r3, #5
 80121da:	d80d      	bhi.n	80121f8 <dhcp_select+0x1a8>
 80121dc:	69bb      	ldr	r3, [r7, #24]
 80121de:	799b      	ldrb	r3, [r3, #6]
 80121e0:	461a      	mov	r2, r3
 80121e2:	2301      	movs	r3, #1
 80121e4:	4093      	lsls	r3, r2
 80121e6:	b29b      	uxth	r3, r3
 80121e8:	461a      	mov	r2, r3
 80121ea:	0152      	lsls	r2, r2, #5
 80121ec:	1ad2      	subs	r2, r2, r3
 80121ee:	0092      	lsls	r2, r2, #2
 80121f0:	4413      	add	r3, r2
 80121f2:	00db      	lsls	r3, r3, #3
 80121f4:	b29b      	uxth	r3, r3
 80121f6:	e001      	b.n	80121fc <dhcp_select+0x1ac>
 80121f8:	f64e 2360 	movw	r3, #60000	; 0xea60
 80121fc:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80121fe:	89fb      	ldrh	r3, [r7, #14]
 8012200:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8012204:	4a0f      	ldr	r2, [pc, #60]	; (8012244 <dhcp_select+0x1f4>)
 8012206:	fb82 1203 	smull	r1, r2, r2, r3
 801220a:	1152      	asrs	r2, r2, #5
 801220c:	17db      	asrs	r3, r3, #31
 801220e:	1ad3      	subs	r3, r2, r3
 8012210:	b29a      	uxth	r2, r3
 8012212:	69bb      	ldr	r3, [r7, #24]
 8012214:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8012216:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801221a:	4618      	mov	r0, r3
 801221c:	3720      	adds	r7, #32
 801221e:	46bd      	mov	sp, r7
 8012220:	bdb0      	pop	{r4, r5, r7, pc}
 8012222:	bf00      	nop
 8012224:	0801a774 	.word	0x0801a774
 8012228:	0801a820 	.word	0x0801a820
 801222c:	0801a7d4 	.word	0x0801a7d4
 8012230:	0801a83c 	.word	0x0801a83c
 8012234:	20000020 	.word	0x20000020
 8012238:	2001af3c 	.word	0x2001af3c
 801223c:	0801b32c 	.word	0x0801b32c
 8012240:	0801b330 	.word	0x0801b330
 8012244:	10624dd3 	.word	0x10624dd3

08012248 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8012248:	b580      	push	{r7, lr}
 801224a:	b082      	sub	sp, #8
 801224c:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 801224e:	4b27      	ldr	r3, [pc, #156]	; (80122ec <dhcp_coarse_tmr+0xa4>)
 8012250:	681b      	ldr	r3, [r3, #0]
 8012252:	607b      	str	r3, [r7, #4]
 8012254:	e042      	b.n	80122dc <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801225a:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 801225c:	683b      	ldr	r3, [r7, #0]
 801225e:	2b00      	cmp	r3, #0
 8012260:	d039      	beq.n	80122d6 <dhcp_coarse_tmr+0x8e>
 8012262:	683b      	ldr	r3, [r7, #0]
 8012264:	795b      	ldrb	r3, [r3, #5]
 8012266:	2b00      	cmp	r3, #0
 8012268:	d035      	beq.n	80122d6 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 801226a:	683b      	ldr	r3, [r7, #0]
 801226c:	8a9b      	ldrh	r3, [r3, #20]
 801226e:	2b00      	cmp	r3, #0
 8012270:	d012      	beq.n	8012298 <dhcp_coarse_tmr+0x50>
 8012272:	683b      	ldr	r3, [r7, #0]
 8012274:	8a5b      	ldrh	r3, [r3, #18]
 8012276:	3301      	adds	r3, #1
 8012278:	b29a      	uxth	r2, r3
 801227a:	683b      	ldr	r3, [r7, #0]
 801227c:	825a      	strh	r2, [r3, #18]
 801227e:	683b      	ldr	r3, [r7, #0]
 8012280:	8a5a      	ldrh	r2, [r3, #18]
 8012282:	683b      	ldr	r3, [r7, #0]
 8012284:	8a9b      	ldrh	r3, [r3, #20]
 8012286:	429a      	cmp	r2, r3
 8012288:	d106      	bne.n	8012298 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 801228a:	6878      	ldr	r0, [r7, #4]
 801228c:	f000 fe32 	bl	8012ef4 <dhcp_release_and_stop>
        dhcp_start(netif);
 8012290:	6878      	ldr	r0, [r7, #4]
 8012292:	f000 f969 	bl	8012568 <dhcp_start>
 8012296:	e01e      	b.n	80122d6 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8012298:	683b      	ldr	r3, [r7, #0]
 801229a:	8a1b      	ldrh	r3, [r3, #16]
 801229c:	2b00      	cmp	r3, #0
 801229e:	d00b      	beq.n	80122b8 <dhcp_coarse_tmr+0x70>
 80122a0:	683b      	ldr	r3, [r7, #0]
 80122a2:	8a1b      	ldrh	r3, [r3, #16]
 80122a4:	1e5a      	subs	r2, r3, #1
 80122a6:	b291      	uxth	r1, r2
 80122a8:	683a      	ldr	r2, [r7, #0]
 80122aa:	8211      	strh	r1, [r2, #16]
 80122ac:	2b01      	cmp	r3, #1
 80122ae:	d103      	bne.n	80122b8 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 80122b0:	6878      	ldr	r0, [r7, #4]
 80122b2:	f000 f8c6 	bl	8012442 <dhcp_t2_timeout>
 80122b6:	e00e      	b.n	80122d6 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 80122b8:	683b      	ldr	r3, [r7, #0]
 80122ba:	89db      	ldrh	r3, [r3, #14]
 80122bc:	2b00      	cmp	r3, #0
 80122be:	d00a      	beq.n	80122d6 <dhcp_coarse_tmr+0x8e>
 80122c0:	683b      	ldr	r3, [r7, #0]
 80122c2:	89db      	ldrh	r3, [r3, #14]
 80122c4:	1e5a      	subs	r2, r3, #1
 80122c6:	b291      	uxth	r1, r2
 80122c8:	683a      	ldr	r2, [r7, #0]
 80122ca:	81d1      	strh	r1, [r2, #14]
 80122cc:	2b01      	cmp	r3, #1
 80122ce:	d102      	bne.n	80122d6 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 80122d0:	6878      	ldr	r0, [r7, #4]
 80122d2:	f000 f888 	bl	80123e6 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	681b      	ldr	r3, [r3, #0]
 80122da:	607b      	str	r3, [r7, #4]
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	2b00      	cmp	r3, #0
 80122e0:	d1b9      	bne.n	8012256 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 80122e2:	bf00      	nop
 80122e4:	bf00      	nop
 80122e6:	3708      	adds	r7, #8
 80122e8:	46bd      	mov	sp, r7
 80122ea:	bd80      	pop	{r7, pc}
 80122ec:	2001aea8 	.word	0x2001aea8

080122f0 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 80122f0:	b580      	push	{r7, lr}
 80122f2:	b082      	sub	sp, #8
 80122f4:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 80122f6:	4b16      	ldr	r3, [pc, #88]	; (8012350 <dhcp_fine_tmr+0x60>)
 80122f8:	681b      	ldr	r3, [r3, #0]
 80122fa:	607b      	str	r3, [r7, #4]
 80122fc:	e020      	b.n	8012340 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012302:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8012304:	683b      	ldr	r3, [r7, #0]
 8012306:	2b00      	cmp	r3, #0
 8012308:	d017      	beq.n	801233a <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 801230a:	683b      	ldr	r3, [r7, #0]
 801230c:	891b      	ldrh	r3, [r3, #8]
 801230e:	2b01      	cmp	r3, #1
 8012310:	d906      	bls.n	8012320 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8012312:	683b      	ldr	r3, [r7, #0]
 8012314:	891b      	ldrh	r3, [r3, #8]
 8012316:	3b01      	subs	r3, #1
 8012318:	b29a      	uxth	r2, r3
 801231a:	683b      	ldr	r3, [r7, #0]
 801231c:	811a      	strh	r2, [r3, #8]
 801231e:	e00c      	b.n	801233a <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8012320:	683b      	ldr	r3, [r7, #0]
 8012322:	891b      	ldrh	r3, [r3, #8]
 8012324:	2b01      	cmp	r3, #1
 8012326:	d108      	bne.n	801233a <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8012328:	683b      	ldr	r3, [r7, #0]
 801232a:	891b      	ldrh	r3, [r3, #8]
 801232c:	3b01      	subs	r3, #1
 801232e:	b29a      	uxth	r2, r3
 8012330:	683b      	ldr	r3, [r7, #0]
 8012332:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8012334:	6878      	ldr	r0, [r7, #4]
 8012336:	f000 f80d 	bl	8012354 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	681b      	ldr	r3, [r3, #0]
 801233e:	607b      	str	r3, [r7, #4]
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	2b00      	cmp	r3, #0
 8012344:	d1db      	bne.n	80122fe <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8012346:	bf00      	nop
 8012348:	bf00      	nop
 801234a:	3708      	adds	r7, #8
 801234c:	46bd      	mov	sp, r7
 801234e:	bd80      	pop	{r7, pc}
 8012350:	2001aea8 	.word	0x2001aea8

08012354 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8012354:	b580      	push	{r7, lr}
 8012356:	b084      	sub	sp, #16
 8012358:	af00      	add	r7, sp, #0
 801235a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012360:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8012362:	68fb      	ldr	r3, [r7, #12]
 8012364:	795b      	ldrb	r3, [r3, #5]
 8012366:	2b0c      	cmp	r3, #12
 8012368:	d003      	beq.n	8012372 <dhcp_timeout+0x1e>
 801236a:	68fb      	ldr	r3, [r7, #12]
 801236c:	795b      	ldrb	r3, [r3, #5]
 801236e:	2b06      	cmp	r3, #6
 8012370:	d103      	bne.n	801237a <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8012372:	6878      	ldr	r0, [r7, #4]
 8012374:	f000 fa54 	bl	8012820 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8012378:	e031      	b.n	80123de <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 801237a:	68fb      	ldr	r3, [r7, #12]
 801237c:	795b      	ldrb	r3, [r3, #5]
 801237e:	2b01      	cmp	r3, #1
 8012380:	d10e      	bne.n	80123a0 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8012382:	68fb      	ldr	r3, [r7, #12]
 8012384:	799b      	ldrb	r3, [r3, #6]
 8012386:	2b05      	cmp	r3, #5
 8012388:	d803      	bhi.n	8012392 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 801238a:	6878      	ldr	r0, [r7, #4]
 801238c:	f7ff fe60 	bl	8012050 <dhcp_select>
}
 8012390:	e025      	b.n	80123de <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 8012392:	6878      	ldr	r0, [r7, #4]
 8012394:	f000 fdae 	bl	8012ef4 <dhcp_release_and_stop>
      dhcp_start(netif);
 8012398:	6878      	ldr	r0, [r7, #4]
 801239a:	f000 f8e5 	bl	8012568 <dhcp_start>
}
 801239e:	e01e      	b.n	80123de <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 80123a0:	68fb      	ldr	r3, [r7, #12]
 80123a2:	795b      	ldrb	r3, [r3, #5]
 80123a4:	2b08      	cmp	r3, #8
 80123a6:	d10b      	bne.n	80123c0 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 80123a8:	68fb      	ldr	r3, [r7, #12]
 80123aa:	799b      	ldrb	r3, [r3, #6]
 80123ac:	2b01      	cmp	r3, #1
 80123ae:	d803      	bhi.n	80123b8 <dhcp_timeout+0x64>
      dhcp_check(netif);
 80123b0:	6878      	ldr	r0, [r7, #4]
 80123b2:	f7ff fdf3 	bl	8011f9c <dhcp_check>
}
 80123b6:	e012      	b.n	80123de <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 80123b8:	6878      	ldr	r0, [r7, #4]
 80123ba:	f000 fad3 	bl	8012964 <dhcp_bind>
}
 80123be:	e00e      	b.n	80123de <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 80123c0:	68fb      	ldr	r3, [r7, #12]
 80123c2:	795b      	ldrb	r3, [r3, #5]
 80123c4:	2b03      	cmp	r3, #3
 80123c6:	d10a      	bne.n	80123de <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 80123c8:	68fb      	ldr	r3, [r7, #12]
 80123ca:	799b      	ldrb	r3, [r3, #6]
 80123cc:	2b01      	cmp	r3, #1
 80123ce:	d803      	bhi.n	80123d8 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 80123d0:	6878      	ldr	r0, [r7, #4]
 80123d2:	f000 fcd9 	bl	8012d88 <dhcp_reboot>
}
 80123d6:	e002      	b.n	80123de <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 80123d8:	6878      	ldr	r0, [r7, #4]
 80123da:	f000 fa21 	bl	8012820 <dhcp_discover>
}
 80123de:	bf00      	nop
 80123e0:	3710      	adds	r7, #16
 80123e2:	46bd      	mov	sp, r7
 80123e4:	bd80      	pop	{r7, pc}

080123e6 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 80123e6:	b580      	push	{r7, lr}
 80123e8:	b084      	sub	sp, #16
 80123ea:	af00      	add	r7, sp, #0
 80123ec:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123f2:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80123f4:	68fb      	ldr	r3, [r7, #12]
 80123f6:	795b      	ldrb	r3, [r3, #5]
 80123f8:	2b01      	cmp	r3, #1
 80123fa:	d007      	beq.n	801240c <dhcp_t1_timeout+0x26>
 80123fc:	68fb      	ldr	r3, [r7, #12]
 80123fe:	795b      	ldrb	r3, [r3, #5]
 8012400:	2b0a      	cmp	r3, #10
 8012402:	d003      	beq.n	801240c <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8012404:	68fb      	ldr	r3, [r7, #12]
 8012406:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8012408:	2b05      	cmp	r3, #5
 801240a:	d116      	bne.n	801243a <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 801240c:	6878      	ldr	r0, [r7, #4]
 801240e:	f000 fb83 	bl	8012b18 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8012412:	68fb      	ldr	r3, [r7, #12]
 8012414:	899b      	ldrh	r3, [r3, #12]
 8012416:	461a      	mov	r2, r3
 8012418:	68fb      	ldr	r3, [r7, #12]
 801241a:	8a5b      	ldrh	r3, [r3, #18]
 801241c:	1ad3      	subs	r3, r2, r3
 801241e:	2b01      	cmp	r3, #1
 8012420:	dd0b      	ble.n	801243a <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8012422:	68fb      	ldr	r3, [r7, #12]
 8012424:	899b      	ldrh	r3, [r3, #12]
 8012426:	461a      	mov	r2, r3
 8012428:	68fb      	ldr	r3, [r7, #12]
 801242a:	8a5b      	ldrh	r3, [r3, #18]
 801242c:	1ad3      	subs	r3, r2, r3
 801242e:	0fda      	lsrs	r2, r3, #31
 8012430:	4413      	add	r3, r2
 8012432:	105b      	asrs	r3, r3, #1
 8012434:	b29a      	uxth	r2, r3
 8012436:	68fb      	ldr	r3, [r7, #12]
 8012438:	81da      	strh	r2, [r3, #14]
    }
  }
}
 801243a:	bf00      	nop
 801243c:	3710      	adds	r7, #16
 801243e:	46bd      	mov	sp, r7
 8012440:	bd80      	pop	{r7, pc}

08012442 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8012442:	b580      	push	{r7, lr}
 8012444:	b084      	sub	sp, #16
 8012446:	af00      	add	r7, sp, #0
 8012448:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801244e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8012450:	68fb      	ldr	r3, [r7, #12]
 8012452:	795b      	ldrb	r3, [r3, #5]
 8012454:	2b01      	cmp	r3, #1
 8012456:	d00b      	beq.n	8012470 <dhcp_t2_timeout+0x2e>
 8012458:	68fb      	ldr	r3, [r7, #12]
 801245a:	795b      	ldrb	r3, [r3, #5]
 801245c:	2b0a      	cmp	r3, #10
 801245e:	d007      	beq.n	8012470 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8012460:	68fb      	ldr	r3, [r7, #12]
 8012462:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8012464:	2b05      	cmp	r3, #5
 8012466:	d003      	beq.n	8012470 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8012468:	68fb      	ldr	r3, [r7, #12]
 801246a:	795b      	ldrb	r3, [r3, #5]
 801246c:	2b04      	cmp	r3, #4
 801246e:	d116      	bne.n	801249e <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8012470:	6878      	ldr	r0, [r7, #4]
 8012472:	f000 fbed 	bl	8012c50 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8012476:	68fb      	ldr	r3, [r7, #12]
 8012478:	8a9b      	ldrh	r3, [r3, #20]
 801247a:	461a      	mov	r2, r3
 801247c:	68fb      	ldr	r3, [r7, #12]
 801247e:	8a5b      	ldrh	r3, [r3, #18]
 8012480:	1ad3      	subs	r3, r2, r3
 8012482:	2b01      	cmp	r3, #1
 8012484:	dd0b      	ble.n	801249e <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8012486:	68fb      	ldr	r3, [r7, #12]
 8012488:	8a9b      	ldrh	r3, [r3, #20]
 801248a:	461a      	mov	r2, r3
 801248c:	68fb      	ldr	r3, [r7, #12]
 801248e:	8a5b      	ldrh	r3, [r3, #18]
 8012490:	1ad3      	subs	r3, r2, r3
 8012492:	0fda      	lsrs	r2, r3, #31
 8012494:	4413      	add	r3, r2
 8012496:	105b      	asrs	r3, r3, #1
 8012498:	b29a      	uxth	r2, r3
 801249a:	68fb      	ldr	r3, [r7, #12]
 801249c:	821a      	strh	r2, [r3, #16]
    }
  }
}
 801249e:	bf00      	nop
 80124a0:	3710      	adds	r7, #16
 80124a2:	46bd      	mov	sp, r7
 80124a4:	bd80      	pop	{r7, pc}
	...

080124a8 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 80124a8:	b580      	push	{r7, lr}
 80124aa:	b084      	sub	sp, #16
 80124ac:	af00      	add	r7, sp, #0
 80124ae:	6078      	str	r0, [r7, #4]
 80124b0:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124b6:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80124b8:	68fb      	ldr	r3, [r7, #12]
 80124ba:	2200      	movs	r2, #0
 80124bc:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80124be:	68fb      	ldr	r3, [r7, #12]
 80124c0:	2200      	movs	r2, #0
 80124c2:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 80124c4:	4b26      	ldr	r3, [pc, #152]	; (8012560 <dhcp_handle_ack+0xb8>)
 80124c6:	78db      	ldrb	r3, [r3, #3]
 80124c8:	2b00      	cmp	r3, #0
 80124ca:	d003      	beq.n	80124d4 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 80124cc:	4b25      	ldr	r3, [pc, #148]	; (8012564 <dhcp_handle_ack+0xbc>)
 80124ce:	68da      	ldr	r2, [r3, #12]
 80124d0:	68fb      	ldr	r3, [r7, #12]
 80124d2:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 80124d4:	4b22      	ldr	r3, [pc, #136]	; (8012560 <dhcp_handle_ack+0xb8>)
 80124d6:	791b      	ldrb	r3, [r3, #4]
 80124d8:	2b00      	cmp	r3, #0
 80124da:	d004      	beq.n	80124e6 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 80124dc:	4b21      	ldr	r3, [pc, #132]	; (8012564 <dhcp_handle_ack+0xbc>)
 80124de:	691a      	ldr	r2, [r3, #16]
 80124e0:	68fb      	ldr	r3, [r7, #12]
 80124e2:	62da      	str	r2, [r3, #44]	; 0x2c
 80124e4:	e004      	b.n	80124f0 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 80124e6:	68fb      	ldr	r3, [r7, #12]
 80124e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80124ea:	085a      	lsrs	r2, r3, #1
 80124ec:	68fb      	ldr	r3, [r7, #12]
 80124ee:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 80124f0:	4b1b      	ldr	r3, [pc, #108]	; (8012560 <dhcp_handle_ack+0xb8>)
 80124f2:	795b      	ldrb	r3, [r3, #5]
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	d004      	beq.n	8012502 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 80124f8:	4b1a      	ldr	r3, [pc, #104]	; (8012564 <dhcp_handle_ack+0xbc>)
 80124fa:	695a      	ldr	r2, [r3, #20]
 80124fc:	68fb      	ldr	r3, [r7, #12]
 80124fe:	631a      	str	r2, [r3, #48]	; 0x30
 8012500:	e007      	b.n	8012512 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8012502:	68fb      	ldr	r3, [r7, #12]
 8012504:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012506:	4613      	mov	r3, r2
 8012508:	00db      	lsls	r3, r3, #3
 801250a:	1a9b      	subs	r3, r3, r2
 801250c:	08da      	lsrs	r2, r3, #3
 801250e:	68fb      	ldr	r3, [r7, #12]
 8012510:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8012512:	683b      	ldr	r3, [r7, #0]
 8012514:	691a      	ldr	r2, [r3, #16]
 8012516:	68fb      	ldr	r3, [r7, #12]
 8012518:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 801251a:	4b11      	ldr	r3, [pc, #68]	; (8012560 <dhcp_handle_ack+0xb8>)
 801251c:	799b      	ldrb	r3, [r3, #6]
 801251e:	2b00      	cmp	r3, #0
 8012520:	d00b      	beq.n	801253a <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8012522:	4b10      	ldr	r3, [pc, #64]	; (8012564 <dhcp_handle_ack+0xbc>)
 8012524:	699b      	ldr	r3, [r3, #24]
 8012526:	4618      	mov	r0, r3
 8012528:	f7f6 fef9 	bl	800931e <lwip_htonl>
 801252c:	4602      	mov	r2, r0
 801252e:	68fb      	ldr	r3, [r7, #12]
 8012530:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8012532:	68fb      	ldr	r3, [r7, #12]
 8012534:	2201      	movs	r2, #1
 8012536:	71da      	strb	r2, [r3, #7]
 8012538:	e002      	b.n	8012540 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 801253a:	68fb      	ldr	r3, [r7, #12]
 801253c:	2200      	movs	r2, #0
 801253e:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8012540:	4b07      	ldr	r3, [pc, #28]	; (8012560 <dhcp_handle_ack+0xb8>)
 8012542:	79db      	ldrb	r3, [r3, #7]
 8012544:	2b00      	cmp	r3, #0
 8012546:	d007      	beq.n	8012558 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8012548:	4b06      	ldr	r3, [pc, #24]	; (8012564 <dhcp_handle_ack+0xbc>)
 801254a:	69db      	ldr	r3, [r3, #28]
 801254c:	4618      	mov	r0, r3
 801254e:	f7f6 fee6 	bl	800931e <lwip_htonl>
 8012552:	4602      	mov	r2, r0
 8012554:	68fb      	ldr	r3, [r7, #12]
 8012556:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8012558:	bf00      	nop
 801255a:	3710      	adds	r7, #16
 801255c:	46bd      	mov	sp, r7
 801255e:	bd80      	pop	{r7, pc}
 8012560:	2001af34 	.word	0x2001af34
 8012564:	2001af14 	.word	0x2001af14

08012568 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8012568:	b580      	push	{r7, lr}
 801256a:	b084      	sub	sp, #16
 801256c:	af00      	add	r7, sp, #0
 801256e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	2b00      	cmp	r3, #0
 8012574:	d109      	bne.n	801258a <dhcp_start+0x22>
 8012576:	4b37      	ldr	r3, [pc, #220]	; (8012654 <dhcp_start+0xec>)
 8012578:	f240 22e7 	movw	r2, #743	; 0x2e7
 801257c:	4936      	ldr	r1, [pc, #216]	; (8012658 <dhcp_start+0xf0>)
 801257e:	4837      	ldr	r0, [pc, #220]	; (801265c <dhcp_start+0xf4>)
 8012580:	f003 ff46 	bl	8016410 <iprintf>
 8012584:	f06f 030f 	mvn.w	r3, #15
 8012588:	e060      	b.n	801264c <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012590:	f003 0301 	and.w	r3, r3, #1
 8012594:	2b00      	cmp	r3, #0
 8012596:	d109      	bne.n	80125ac <dhcp_start+0x44>
 8012598:	4b2e      	ldr	r3, [pc, #184]	; (8012654 <dhcp_start+0xec>)
 801259a:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 801259e:	4930      	ldr	r1, [pc, #192]	; (8012660 <dhcp_start+0xf8>)
 80125a0:	482e      	ldr	r0, [pc, #184]	; (801265c <dhcp_start+0xf4>)
 80125a2:	f003 ff35 	bl	8016410 <iprintf>
 80125a6:	f06f 030f 	mvn.w	r3, #15
 80125aa:	e04f      	b.n	801264c <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80125b0:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80125b6:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 80125ba:	d202      	bcs.n	80125c2 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 80125bc:	f04f 33ff 	mov.w	r3, #4294967295
 80125c0:	e044      	b.n	801264c <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 80125c2:	68fb      	ldr	r3, [r7, #12]
 80125c4:	2b00      	cmp	r3, #0
 80125c6:	d10d      	bne.n	80125e4 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 80125c8:	2034      	movs	r0, #52	; 0x34
 80125ca:	f7f7 f9c7 	bl	800995c <mem_malloc>
 80125ce:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 80125d0:	68fb      	ldr	r3, [r7, #12]
 80125d2:	2b00      	cmp	r3, #0
 80125d4:	d102      	bne.n	80125dc <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 80125d6:	f04f 33ff 	mov.w	r3, #4294967295
 80125da:	e037      	b.n	801264c <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	68fa      	ldr	r2, [r7, #12]
 80125e0:	625a      	str	r2, [r3, #36]	; 0x24
 80125e2:	e005      	b.n	80125f0 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 80125e4:	68fb      	ldr	r3, [r7, #12]
 80125e6:	791b      	ldrb	r3, [r3, #4]
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	d001      	beq.n	80125f0 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 80125ec:	f7ff fc92 	bl	8011f14 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 80125f0:	2234      	movs	r2, #52	; 0x34
 80125f2:	2100      	movs	r1, #0
 80125f4:	68f8      	ldr	r0, [r7, #12]
 80125f6:	f003 ff03 	bl	8016400 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 80125fa:	f7ff fc39 	bl	8011e70 <dhcp_inc_pcb_refcount>
 80125fe:	4603      	mov	r3, r0
 8012600:	2b00      	cmp	r3, #0
 8012602:	d002      	beq.n	801260a <dhcp_start+0xa2>
    return ERR_MEM;
 8012604:	f04f 33ff 	mov.w	r3, #4294967295
 8012608:	e020      	b.n	801264c <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 801260a:	68fb      	ldr	r3, [r7, #12]
 801260c:	2201      	movs	r2, #1
 801260e:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012616:	f003 0304 	and.w	r3, r3, #4
 801261a:	2b00      	cmp	r3, #0
 801261c:	d105      	bne.n	801262a <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 801261e:	2102      	movs	r1, #2
 8012620:	68f8      	ldr	r0, [r7, #12]
 8012622:	f000 fd01 	bl	8013028 <dhcp_set_state>
    return ERR_OK;
 8012626:	2300      	movs	r3, #0
 8012628:	e010      	b.n	801264c <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 801262a:	6878      	ldr	r0, [r7, #4]
 801262c:	f000 f8f8 	bl	8012820 <dhcp_discover>
 8012630:	4603      	mov	r3, r0
 8012632:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8012634:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8012638:	2b00      	cmp	r3, #0
 801263a:	d005      	beq.n	8012648 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 801263c:	6878      	ldr	r0, [r7, #4]
 801263e:	f000 fc59 	bl	8012ef4 <dhcp_release_and_stop>
    return ERR_MEM;
 8012642:	f04f 33ff 	mov.w	r3, #4294967295
 8012646:	e001      	b.n	801264c <dhcp_start+0xe4>
  }
  return result;
 8012648:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801264c:	4618      	mov	r0, r3
 801264e:	3710      	adds	r7, #16
 8012650:	46bd      	mov	sp, r7
 8012652:	bd80      	pop	{r7, pc}
 8012654:	0801a774 	.word	0x0801a774
 8012658:	0801a858 	.word	0x0801a858
 801265c:	0801a7d4 	.word	0x0801a7d4
 8012660:	0801a89c 	.word	0x0801a89c

08012664 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 8012664:	b580      	push	{r7, lr}
 8012666:	b084      	sub	sp, #16
 8012668:	af00      	add	r7, sp, #0
 801266a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012670:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 8012672:	68fb      	ldr	r3, [r7, #12]
 8012674:	2b00      	cmp	r3, #0
 8012676:	d025      	beq.n	80126c4 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 8012678:	68fb      	ldr	r3, [r7, #12]
 801267a:	795b      	ldrb	r3, [r3, #5]
 801267c:	2b0a      	cmp	r3, #10
 801267e:	d008      	beq.n	8012692 <dhcp_network_changed+0x2e>
 8012680:	2b0a      	cmp	r3, #10
 8012682:	dc0d      	bgt.n	80126a0 <dhcp_network_changed+0x3c>
 8012684:	2b00      	cmp	r3, #0
 8012686:	d01f      	beq.n	80126c8 <dhcp_network_changed+0x64>
 8012688:	2b00      	cmp	r3, #0
 801268a:	db09      	blt.n	80126a0 <dhcp_network_changed+0x3c>
 801268c:	3b03      	subs	r3, #3
 801268e:	2b02      	cmp	r3, #2
 8012690:	d806      	bhi.n	80126a0 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 8012692:	68fb      	ldr	r3, [r7, #12]
 8012694:	2200      	movs	r2, #0
 8012696:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 8012698:	6878      	ldr	r0, [r7, #4]
 801269a:	f000 fb75 	bl	8012d88 <dhcp_reboot>
      break;
 801269e:	e014      	b.n	80126ca <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 80126a0:	68fb      	ldr	r3, [r7, #12]
 80126a2:	795b      	ldrb	r3, [r3, #5]
 80126a4:	2b0c      	cmp	r3, #12
 80126a6:	d906      	bls.n	80126b6 <dhcp_network_changed+0x52>
 80126a8:	4b09      	ldr	r3, [pc, #36]	; (80126d0 <dhcp_network_changed+0x6c>)
 80126aa:	f240 326d 	movw	r2, #877	; 0x36d
 80126ae:	4909      	ldr	r1, [pc, #36]	; (80126d4 <dhcp_network_changed+0x70>)
 80126b0:	4809      	ldr	r0, [pc, #36]	; (80126d8 <dhcp_network_changed+0x74>)
 80126b2:	f003 fead 	bl	8016410 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 80126b6:	68fb      	ldr	r3, [r7, #12]
 80126b8:	2200      	movs	r2, #0
 80126ba:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 80126bc:	6878      	ldr	r0, [r7, #4]
 80126be:	f000 f8af 	bl	8012820 <dhcp_discover>
      break;
 80126c2:	e002      	b.n	80126ca <dhcp_network_changed+0x66>
    return;
 80126c4:	bf00      	nop
 80126c6:	e000      	b.n	80126ca <dhcp_network_changed+0x66>
      break;
 80126c8:	bf00      	nop
  }
}
 80126ca:	3710      	adds	r7, #16
 80126cc:	46bd      	mov	sp, r7
 80126ce:	bd80      	pop	{r7, pc}
 80126d0:	0801a774 	.word	0x0801a774
 80126d4:	0801a8c0 	.word	0x0801a8c0
 80126d8:	0801a7d4 	.word	0x0801a7d4

080126dc <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 80126dc:	b580      	push	{r7, lr}
 80126de:	b084      	sub	sp, #16
 80126e0:	af00      	add	r7, sp, #0
 80126e2:	6078      	str	r0, [r7, #4]
 80126e4:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	d107      	bne.n	80126fc <dhcp_arp_reply+0x20>
 80126ec:	4b0e      	ldr	r3, [pc, #56]	; (8012728 <dhcp_arp_reply+0x4c>)
 80126ee:	f240 328b 	movw	r2, #907	; 0x38b
 80126f2:	490e      	ldr	r1, [pc, #56]	; (801272c <dhcp_arp_reply+0x50>)
 80126f4:	480e      	ldr	r0, [pc, #56]	; (8012730 <dhcp_arp_reply+0x54>)
 80126f6:	f003 fe8b 	bl	8016410 <iprintf>
 80126fa:	e012      	b.n	8012722 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012700:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8012702:	68fb      	ldr	r3, [r7, #12]
 8012704:	2b00      	cmp	r3, #0
 8012706:	d00c      	beq.n	8012722 <dhcp_arp_reply+0x46>
 8012708:	68fb      	ldr	r3, [r7, #12]
 801270a:	795b      	ldrb	r3, [r3, #5]
 801270c:	2b08      	cmp	r3, #8
 801270e:	d108      	bne.n	8012722 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8012710:	683b      	ldr	r3, [r7, #0]
 8012712:	681a      	ldr	r2, [r3, #0]
 8012714:	68fb      	ldr	r3, [r7, #12]
 8012716:	69db      	ldr	r3, [r3, #28]
 8012718:	429a      	cmp	r2, r3
 801271a:	d102      	bne.n	8012722 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 801271c:	6878      	ldr	r0, [r7, #4]
 801271e:	f000 f809 	bl	8012734 <dhcp_decline>
    }
  }
}
 8012722:	3710      	adds	r7, #16
 8012724:	46bd      	mov	sp, r7
 8012726:	bd80      	pop	{r7, pc}
 8012728:	0801a774 	.word	0x0801a774
 801272c:	0801a858 	.word	0x0801a858
 8012730:	0801a7d4 	.word	0x0801a7d4

08012734 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8012734:	b5b0      	push	{r4, r5, r7, lr}
 8012736:	b08a      	sub	sp, #40	; 0x28
 8012738:	af02      	add	r7, sp, #8
 801273a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012740:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8012742:	210c      	movs	r1, #12
 8012744:	69b8      	ldr	r0, [r7, #24]
 8012746:	f000 fc6f 	bl	8013028 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 801274a:	f107 030c 	add.w	r3, r7, #12
 801274e:	2204      	movs	r2, #4
 8012750:	69b9      	ldr	r1, [r7, #24]
 8012752:	6878      	ldr	r0, [r7, #4]
 8012754:	f001 f8f4 	bl	8013940 <dhcp_create_msg>
 8012758:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801275a:	697b      	ldr	r3, [r7, #20]
 801275c:	2b00      	cmp	r3, #0
 801275e:	d035      	beq.n	80127cc <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8012760:	697b      	ldr	r3, [r7, #20]
 8012762:	685b      	ldr	r3, [r3, #4]
 8012764:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8012766:	89b8      	ldrh	r0, [r7, #12]
 8012768:	693b      	ldr	r3, [r7, #16]
 801276a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801276e:	2304      	movs	r3, #4
 8012770:	2232      	movs	r2, #50	; 0x32
 8012772:	f000 fc73 	bl	801305c <dhcp_option>
 8012776:	4603      	mov	r3, r0
 8012778:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801277a:	89bc      	ldrh	r4, [r7, #12]
 801277c:	693b      	ldr	r3, [r7, #16]
 801277e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8012782:	69bb      	ldr	r3, [r7, #24]
 8012784:	69db      	ldr	r3, [r3, #28]
 8012786:	4618      	mov	r0, r3
 8012788:	f7f6 fdc9 	bl	800931e <lwip_htonl>
 801278c:	4603      	mov	r3, r0
 801278e:	461a      	mov	r2, r3
 8012790:	4629      	mov	r1, r5
 8012792:	4620      	mov	r0, r4
 8012794:	f000 fcee 	bl	8013174 <dhcp_option_long>
 8012798:	4603      	mov	r3, r0
 801279a:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801279c:	89b8      	ldrh	r0, [r7, #12]
 801279e:	693b      	ldr	r3, [r7, #16]
 80127a0:	33f0      	adds	r3, #240	; 0xf0
 80127a2:	697a      	ldr	r2, [r7, #20]
 80127a4:	4619      	mov	r1, r3
 80127a6:	f001 f9a1 	bl	8013aec <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80127aa:	4b19      	ldr	r3, [pc, #100]	; (8012810 <dhcp_decline+0xdc>)
 80127ac:	6818      	ldr	r0, [r3, #0]
 80127ae:	4b19      	ldr	r3, [pc, #100]	; (8012814 <dhcp_decline+0xe0>)
 80127b0:	9301      	str	r3, [sp, #4]
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	9300      	str	r3, [sp, #0]
 80127b6:	2343      	movs	r3, #67	; 0x43
 80127b8:	4a17      	ldr	r2, [pc, #92]	; (8012818 <dhcp_decline+0xe4>)
 80127ba:	6979      	ldr	r1, [r7, #20]
 80127bc:	f7ff f8d2 	bl	8011964 <udp_sendto_if_src>
 80127c0:	4603      	mov	r3, r0
 80127c2:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80127c4:	6978      	ldr	r0, [r7, #20]
 80127c6:	f7f8 f975 	bl	800aab4 <pbuf_free>
 80127ca:	e001      	b.n	80127d0 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80127cc:	23ff      	movs	r3, #255	; 0xff
 80127ce:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80127d0:	69bb      	ldr	r3, [r7, #24]
 80127d2:	799b      	ldrb	r3, [r3, #6]
 80127d4:	2bff      	cmp	r3, #255	; 0xff
 80127d6:	d005      	beq.n	80127e4 <dhcp_decline+0xb0>
    dhcp->tries++;
 80127d8:	69bb      	ldr	r3, [r7, #24]
 80127da:	799b      	ldrb	r3, [r3, #6]
 80127dc:	3301      	adds	r3, #1
 80127de:	b2da      	uxtb	r2, r3
 80127e0:	69bb      	ldr	r3, [r7, #24]
 80127e2:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 80127e4:	f242 7310 	movw	r3, #10000	; 0x2710
 80127e8:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80127ea:	89fb      	ldrh	r3, [r7, #14]
 80127ec:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80127f0:	4a0a      	ldr	r2, [pc, #40]	; (801281c <dhcp_decline+0xe8>)
 80127f2:	fb82 1203 	smull	r1, r2, r2, r3
 80127f6:	1152      	asrs	r2, r2, #5
 80127f8:	17db      	asrs	r3, r3, #31
 80127fa:	1ad3      	subs	r3, r2, r3
 80127fc:	b29a      	uxth	r2, r3
 80127fe:	69bb      	ldr	r3, [r7, #24]
 8012800:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8012802:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012806:	4618      	mov	r0, r3
 8012808:	3720      	adds	r7, #32
 801280a:	46bd      	mov	sp, r7
 801280c:	bdb0      	pop	{r4, r5, r7, pc}
 801280e:	bf00      	nop
 8012810:	2001af3c 	.word	0x2001af3c
 8012814:	0801b32c 	.word	0x0801b32c
 8012818:	0801b330 	.word	0x0801b330
 801281c:	10624dd3 	.word	0x10624dd3

08012820 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8012820:	b580      	push	{r7, lr}
 8012822:	b08a      	sub	sp, #40	; 0x28
 8012824:	af02      	add	r7, sp, #8
 8012826:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801282c:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 801282e:	2300      	movs	r3, #0
 8012830:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8012832:	69bb      	ldr	r3, [r7, #24]
 8012834:	2200      	movs	r2, #0
 8012836:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8012838:	2106      	movs	r1, #6
 801283a:	69b8      	ldr	r0, [r7, #24]
 801283c:	f000 fbf4 	bl	8013028 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8012840:	f107 0308 	add.w	r3, r7, #8
 8012844:	2201      	movs	r2, #1
 8012846:	69b9      	ldr	r1, [r7, #24]
 8012848:	6878      	ldr	r0, [r7, #4]
 801284a:	f001 f879 	bl	8013940 <dhcp_create_msg>
 801284e:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8012850:	693b      	ldr	r3, [r7, #16]
 8012852:	2b00      	cmp	r3, #0
 8012854:	d04b      	beq.n	80128ee <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8012856:	693b      	ldr	r3, [r7, #16]
 8012858:	685b      	ldr	r3, [r3, #4]
 801285a:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801285c:	8938      	ldrh	r0, [r7, #8]
 801285e:	68fb      	ldr	r3, [r7, #12]
 8012860:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012864:	2302      	movs	r3, #2
 8012866:	2239      	movs	r2, #57	; 0x39
 8012868:	f000 fbf8 	bl	801305c <dhcp_option>
 801286c:	4603      	mov	r3, r0
 801286e:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8012870:	8938      	ldrh	r0, [r7, #8]
 8012872:	68fb      	ldr	r3, [r7, #12]
 8012874:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801287c:	461a      	mov	r2, r3
 801287e:	f000 fc47 	bl	8013110 <dhcp_option_short>
 8012882:	4603      	mov	r3, r0
 8012884:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8012886:	8938      	ldrh	r0, [r7, #8]
 8012888:	68fb      	ldr	r3, [r7, #12]
 801288a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801288e:	2303      	movs	r3, #3
 8012890:	2237      	movs	r2, #55	; 0x37
 8012892:	f000 fbe3 	bl	801305c <dhcp_option>
 8012896:	4603      	mov	r3, r0
 8012898:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801289a:	2300      	movs	r3, #0
 801289c:	77fb      	strb	r3, [r7, #31]
 801289e:	e00e      	b.n	80128be <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80128a0:	8938      	ldrh	r0, [r7, #8]
 80128a2:	68fb      	ldr	r3, [r7, #12]
 80128a4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80128a8:	7ffb      	ldrb	r3, [r7, #31]
 80128aa:	4a29      	ldr	r2, [pc, #164]	; (8012950 <dhcp_discover+0x130>)
 80128ac:	5cd3      	ldrb	r3, [r2, r3]
 80128ae:	461a      	mov	r2, r3
 80128b0:	f000 fc08 	bl	80130c4 <dhcp_option_byte>
 80128b4:	4603      	mov	r3, r0
 80128b6:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80128b8:	7ffb      	ldrb	r3, [r7, #31]
 80128ba:	3301      	adds	r3, #1
 80128bc:	77fb      	strb	r3, [r7, #31]
 80128be:	7ffb      	ldrb	r3, [r7, #31]
 80128c0:	2b02      	cmp	r3, #2
 80128c2:	d9ed      	bls.n	80128a0 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80128c4:	8938      	ldrh	r0, [r7, #8]
 80128c6:	68fb      	ldr	r3, [r7, #12]
 80128c8:	33f0      	adds	r3, #240	; 0xf0
 80128ca:	693a      	ldr	r2, [r7, #16]
 80128cc:	4619      	mov	r1, r3
 80128ce:	f001 f90d 	bl	8013aec <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80128d2:	4b20      	ldr	r3, [pc, #128]	; (8012954 <dhcp_discover+0x134>)
 80128d4:	6818      	ldr	r0, [r3, #0]
 80128d6:	4b20      	ldr	r3, [pc, #128]	; (8012958 <dhcp_discover+0x138>)
 80128d8:	9301      	str	r3, [sp, #4]
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	9300      	str	r3, [sp, #0]
 80128de:	2343      	movs	r3, #67	; 0x43
 80128e0:	4a1e      	ldr	r2, [pc, #120]	; (801295c <dhcp_discover+0x13c>)
 80128e2:	6939      	ldr	r1, [r7, #16]
 80128e4:	f7ff f83e 	bl	8011964 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 80128e8:	6938      	ldr	r0, [r7, #16]
 80128ea:	f7f8 f8e3 	bl	800aab4 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 80128ee:	69bb      	ldr	r3, [r7, #24]
 80128f0:	799b      	ldrb	r3, [r3, #6]
 80128f2:	2bff      	cmp	r3, #255	; 0xff
 80128f4:	d005      	beq.n	8012902 <dhcp_discover+0xe2>
    dhcp->tries++;
 80128f6:	69bb      	ldr	r3, [r7, #24]
 80128f8:	799b      	ldrb	r3, [r3, #6]
 80128fa:	3301      	adds	r3, #1
 80128fc:	b2da      	uxtb	r2, r3
 80128fe:	69bb      	ldr	r3, [r7, #24]
 8012900:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8012902:	69bb      	ldr	r3, [r7, #24]
 8012904:	799b      	ldrb	r3, [r3, #6]
 8012906:	2b05      	cmp	r3, #5
 8012908:	d80d      	bhi.n	8012926 <dhcp_discover+0x106>
 801290a:	69bb      	ldr	r3, [r7, #24]
 801290c:	799b      	ldrb	r3, [r3, #6]
 801290e:	461a      	mov	r2, r3
 8012910:	2301      	movs	r3, #1
 8012912:	4093      	lsls	r3, r2
 8012914:	b29b      	uxth	r3, r3
 8012916:	461a      	mov	r2, r3
 8012918:	0152      	lsls	r2, r2, #5
 801291a:	1ad2      	subs	r2, r2, r3
 801291c:	0092      	lsls	r2, r2, #2
 801291e:	4413      	add	r3, r2
 8012920:	00db      	lsls	r3, r3, #3
 8012922:	b29b      	uxth	r3, r3
 8012924:	e001      	b.n	801292a <dhcp_discover+0x10a>
 8012926:	f64e 2360 	movw	r3, #60000	; 0xea60
 801292a:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801292c:	897b      	ldrh	r3, [r7, #10]
 801292e:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8012932:	4a0b      	ldr	r2, [pc, #44]	; (8012960 <dhcp_discover+0x140>)
 8012934:	fb82 1203 	smull	r1, r2, r2, r3
 8012938:	1152      	asrs	r2, r2, #5
 801293a:	17db      	asrs	r3, r3, #31
 801293c:	1ad3      	subs	r3, r2, r3
 801293e:	b29a      	uxth	r2, r3
 8012940:	69bb      	ldr	r3, [r7, #24]
 8012942:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8012944:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012948:	4618      	mov	r0, r3
 801294a:	3720      	adds	r7, #32
 801294c:	46bd      	mov	sp, r7
 801294e:	bd80      	pop	{r7, pc}
 8012950:	20000020 	.word	0x20000020
 8012954:	2001af3c 	.word	0x2001af3c
 8012958:	0801b32c 	.word	0x0801b32c
 801295c:	0801b330 	.word	0x0801b330
 8012960:	10624dd3 	.word	0x10624dd3

08012964 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8012964:	b580      	push	{r7, lr}
 8012966:	b088      	sub	sp, #32
 8012968:	af00      	add	r7, sp, #0
 801296a:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	2b00      	cmp	r3, #0
 8012970:	d107      	bne.n	8012982 <dhcp_bind+0x1e>
 8012972:	4b64      	ldr	r3, [pc, #400]	; (8012b04 <dhcp_bind+0x1a0>)
 8012974:	f240 4215 	movw	r2, #1045	; 0x415
 8012978:	4963      	ldr	r1, [pc, #396]	; (8012b08 <dhcp_bind+0x1a4>)
 801297a:	4864      	ldr	r0, [pc, #400]	; (8012b0c <dhcp_bind+0x1a8>)
 801297c:	f003 fd48 	bl	8016410 <iprintf>
 8012980:	e0bc      	b.n	8012afc <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012986:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8012988:	69bb      	ldr	r3, [r7, #24]
 801298a:	2b00      	cmp	r3, #0
 801298c:	d107      	bne.n	801299e <dhcp_bind+0x3a>
 801298e:	4b5d      	ldr	r3, [pc, #372]	; (8012b04 <dhcp_bind+0x1a0>)
 8012990:	f240 4217 	movw	r2, #1047	; 0x417
 8012994:	495e      	ldr	r1, [pc, #376]	; (8012b10 <dhcp_bind+0x1ac>)
 8012996:	485d      	ldr	r0, [pc, #372]	; (8012b0c <dhcp_bind+0x1a8>)
 8012998:	f003 fd3a 	bl	8016410 <iprintf>
 801299c:	e0ae      	b.n	8012afc <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 801299e:	69bb      	ldr	r3, [r7, #24]
 80129a0:	2200      	movs	r2, #0
 80129a2:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 80129a4:	69bb      	ldr	r3, [r7, #24]
 80129a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80129a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80129ac:	d019      	beq.n	80129e2 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80129ae:	69bb      	ldr	r3, [r7, #24]
 80129b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80129b2:	331e      	adds	r3, #30
 80129b4:	4a57      	ldr	r2, [pc, #348]	; (8012b14 <dhcp_bind+0x1b0>)
 80129b6:	fba2 2303 	umull	r2, r3, r2, r3
 80129ba:	095b      	lsrs	r3, r3, #5
 80129bc:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80129be:	69fb      	ldr	r3, [r7, #28]
 80129c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80129c4:	d302      	bcc.n	80129cc <dhcp_bind+0x68>
      timeout = 0xffff;
 80129c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80129ca:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 80129cc:	69fb      	ldr	r3, [r7, #28]
 80129ce:	b29a      	uxth	r2, r3
 80129d0:	69bb      	ldr	r3, [r7, #24]
 80129d2:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 80129d4:	69bb      	ldr	r3, [r7, #24]
 80129d6:	8a9b      	ldrh	r3, [r3, #20]
 80129d8:	2b00      	cmp	r3, #0
 80129da:	d102      	bne.n	80129e2 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 80129dc:	69bb      	ldr	r3, [r7, #24]
 80129de:	2201      	movs	r2, #1
 80129e0:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 80129e2:	69bb      	ldr	r3, [r7, #24]
 80129e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80129e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80129ea:	d01d      	beq.n	8012a28 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80129ec:	69bb      	ldr	r3, [r7, #24]
 80129ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80129f0:	331e      	adds	r3, #30
 80129f2:	4a48      	ldr	r2, [pc, #288]	; (8012b14 <dhcp_bind+0x1b0>)
 80129f4:	fba2 2303 	umull	r2, r3, r2, r3
 80129f8:	095b      	lsrs	r3, r3, #5
 80129fa:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80129fc:	69fb      	ldr	r3, [r7, #28]
 80129fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012a02:	d302      	bcc.n	8012a0a <dhcp_bind+0xa6>
      timeout = 0xffff;
 8012a04:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012a08:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 8012a0a:	69fb      	ldr	r3, [r7, #28]
 8012a0c:	b29a      	uxth	r2, r3
 8012a0e:	69bb      	ldr	r3, [r7, #24]
 8012a10:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8012a12:	69bb      	ldr	r3, [r7, #24]
 8012a14:	895b      	ldrh	r3, [r3, #10]
 8012a16:	2b00      	cmp	r3, #0
 8012a18:	d102      	bne.n	8012a20 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 8012a1a:	69bb      	ldr	r3, [r7, #24]
 8012a1c:	2201      	movs	r2, #1
 8012a1e:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8012a20:	69bb      	ldr	r3, [r7, #24]
 8012a22:	895a      	ldrh	r2, [r3, #10]
 8012a24:	69bb      	ldr	r3, [r7, #24]
 8012a26:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8012a28:	69bb      	ldr	r3, [r7, #24]
 8012a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a30:	d01d      	beq.n	8012a6e <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8012a32:	69bb      	ldr	r3, [r7, #24]
 8012a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012a36:	331e      	adds	r3, #30
 8012a38:	4a36      	ldr	r2, [pc, #216]	; (8012b14 <dhcp_bind+0x1b0>)
 8012a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8012a3e:	095b      	lsrs	r3, r3, #5
 8012a40:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8012a42:	69fb      	ldr	r3, [r7, #28]
 8012a44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012a48:	d302      	bcc.n	8012a50 <dhcp_bind+0xec>
      timeout = 0xffff;
 8012a4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012a4e:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8012a50:	69fb      	ldr	r3, [r7, #28]
 8012a52:	b29a      	uxth	r2, r3
 8012a54:	69bb      	ldr	r3, [r7, #24]
 8012a56:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8012a58:	69bb      	ldr	r3, [r7, #24]
 8012a5a:	899b      	ldrh	r3, [r3, #12]
 8012a5c:	2b00      	cmp	r3, #0
 8012a5e:	d102      	bne.n	8012a66 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8012a60:	69bb      	ldr	r3, [r7, #24]
 8012a62:	2201      	movs	r2, #1
 8012a64:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8012a66:	69bb      	ldr	r3, [r7, #24]
 8012a68:	899a      	ldrh	r2, [r3, #12]
 8012a6a:	69bb      	ldr	r3, [r7, #24]
 8012a6c:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8012a6e:	69bb      	ldr	r3, [r7, #24]
 8012a70:	895a      	ldrh	r2, [r3, #10]
 8012a72:	69bb      	ldr	r3, [r7, #24]
 8012a74:	899b      	ldrh	r3, [r3, #12]
 8012a76:	429a      	cmp	r2, r3
 8012a78:	d306      	bcc.n	8012a88 <dhcp_bind+0x124>
 8012a7a:	69bb      	ldr	r3, [r7, #24]
 8012a7c:	899b      	ldrh	r3, [r3, #12]
 8012a7e:	2b00      	cmp	r3, #0
 8012a80:	d002      	beq.n	8012a88 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 8012a82:	69bb      	ldr	r3, [r7, #24]
 8012a84:	2200      	movs	r2, #0
 8012a86:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8012a88:	69bb      	ldr	r3, [r7, #24]
 8012a8a:	79db      	ldrb	r3, [r3, #7]
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	d003      	beq.n	8012a98 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8012a90:	69bb      	ldr	r3, [r7, #24]
 8012a92:	6a1b      	ldr	r3, [r3, #32]
 8012a94:	613b      	str	r3, [r7, #16]
 8012a96:	e014      	b.n	8012ac2 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8012a98:	69bb      	ldr	r3, [r7, #24]
 8012a9a:	331c      	adds	r3, #28
 8012a9c:	781b      	ldrb	r3, [r3, #0]
 8012a9e:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8012aa0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	db02      	blt.n	8012aae <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8012aa8:	23ff      	movs	r3, #255	; 0xff
 8012aaa:	613b      	str	r3, [r7, #16]
 8012aac:	e009      	b.n	8012ac2 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 8012aae:	7dfb      	ldrb	r3, [r7, #23]
 8012ab0:	2bbf      	cmp	r3, #191	; 0xbf
 8012ab2:	d903      	bls.n	8012abc <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8012ab4:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8012ab8:	613b      	str	r3, [r7, #16]
 8012aba:	e002      	b.n	8012ac2 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8012abc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012ac0:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8012ac2:	69bb      	ldr	r3, [r7, #24]
 8012ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ac6:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8012ac8:	68fb      	ldr	r3, [r7, #12]
 8012aca:	2b00      	cmp	r3, #0
 8012acc:	d108      	bne.n	8012ae0 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8012ace:	69bb      	ldr	r3, [r7, #24]
 8012ad0:	69da      	ldr	r2, [r3, #28]
 8012ad2:	693b      	ldr	r3, [r7, #16]
 8012ad4:	4013      	ands	r3, r2
 8012ad6:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8012ad8:	68fb      	ldr	r3, [r7, #12]
 8012ada:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8012ade:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8012ae0:	210a      	movs	r1, #10
 8012ae2:	69b8      	ldr	r0, [r7, #24]
 8012ae4:	f000 faa0 	bl	8013028 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8012ae8:	69bb      	ldr	r3, [r7, #24]
 8012aea:	f103 011c 	add.w	r1, r3, #28
 8012aee:	f107 030c 	add.w	r3, r7, #12
 8012af2:	f107 0210 	add.w	r2, r7, #16
 8012af6:	6878      	ldr	r0, [r7, #4]
 8012af8:	f7f7 face 	bl	800a098 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8012afc:	3720      	adds	r7, #32
 8012afe:	46bd      	mov	sp, r7
 8012b00:	bd80      	pop	{r7, pc}
 8012b02:	bf00      	nop
 8012b04:	0801a774 	.word	0x0801a774
 8012b08:	0801a8d4 	.word	0x0801a8d4
 8012b0c:	0801a7d4 	.word	0x0801a7d4
 8012b10:	0801a8f0 	.word	0x0801a8f0
 8012b14:	88888889 	.word	0x88888889

08012b18 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8012b18:	b580      	push	{r7, lr}
 8012b1a:	b08a      	sub	sp, #40	; 0x28
 8012b1c:	af02      	add	r7, sp, #8
 8012b1e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b24:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8012b26:	2105      	movs	r1, #5
 8012b28:	69b8      	ldr	r0, [r7, #24]
 8012b2a:	f000 fa7d 	bl	8013028 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8012b2e:	f107 030c 	add.w	r3, r7, #12
 8012b32:	2203      	movs	r2, #3
 8012b34:	69b9      	ldr	r1, [r7, #24]
 8012b36:	6878      	ldr	r0, [r7, #4]
 8012b38:	f000 ff02 	bl	8013940 <dhcp_create_msg>
 8012b3c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8012b3e:	697b      	ldr	r3, [r7, #20]
 8012b40:	2b00      	cmp	r3, #0
 8012b42:	d04e      	beq.n	8012be2 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8012b44:	697b      	ldr	r3, [r7, #20]
 8012b46:	685b      	ldr	r3, [r3, #4]
 8012b48:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8012b4a:	89b8      	ldrh	r0, [r7, #12]
 8012b4c:	693b      	ldr	r3, [r7, #16]
 8012b4e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012b52:	2302      	movs	r3, #2
 8012b54:	2239      	movs	r2, #57	; 0x39
 8012b56:	f000 fa81 	bl	801305c <dhcp_option>
 8012b5a:	4603      	mov	r3, r0
 8012b5c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8012b5e:	89b8      	ldrh	r0, [r7, #12]
 8012b60:	693b      	ldr	r3, [r7, #16]
 8012b62:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012b6a:	461a      	mov	r2, r3
 8012b6c:	f000 fad0 	bl	8013110 <dhcp_option_short>
 8012b70:	4603      	mov	r3, r0
 8012b72:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8012b74:	89b8      	ldrh	r0, [r7, #12]
 8012b76:	693b      	ldr	r3, [r7, #16]
 8012b78:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012b7c:	2303      	movs	r3, #3
 8012b7e:	2237      	movs	r2, #55	; 0x37
 8012b80:	f000 fa6c 	bl	801305c <dhcp_option>
 8012b84:	4603      	mov	r3, r0
 8012b86:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012b88:	2300      	movs	r3, #0
 8012b8a:	77bb      	strb	r3, [r7, #30]
 8012b8c:	e00e      	b.n	8012bac <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8012b8e:	89b8      	ldrh	r0, [r7, #12]
 8012b90:	693b      	ldr	r3, [r7, #16]
 8012b92:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012b96:	7fbb      	ldrb	r3, [r7, #30]
 8012b98:	4a2a      	ldr	r2, [pc, #168]	; (8012c44 <dhcp_renew+0x12c>)
 8012b9a:	5cd3      	ldrb	r3, [r2, r3]
 8012b9c:	461a      	mov	r2, r3
 8012b9e:	f000 fa91 	bl	80130c4 <dhcp_option_byte>
 8012ba2:	4603      	mov	r3, r0
 8012ba4:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012ba6:	7fbb      	ldrb	r3, [r7, #30]
 8012ba8:	3301      	adds	r3, #1
 8012baa:	77bb      	strb	r3, [r7, #30]
 8012bac:	7fbb      	ldrb	r3, [r7, #30]
 8012bae:	2b02      	cmp	r3, #2
 8012bb0:	d9ed      	bls.n	8012b8e <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8012bb2:	89b8      	ldrh	r0, [r7, #12]
 8012bb4:	693b      	ldr	r3, [r7, #16]
 8012bb6:	33f0      	adds	r3, #240	; 0xf0
 8012bb8:	697a      	ldr	r2, [r7, #20]
 8012bba:	4619      	mov	r1, r3
 8012bbc:	f000 ff96 	bl	8013aec <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8012bc0:	4b21      	ldr	r3, [pc, #132]	; (8012c48 <dhcp_renew+0x130>)
 8012bc2:	6818      	ldr	r0, [r3, #0]
 8012bc4:	69bb      	ldr	r3, [r7, #24]
 8012bc6:	f103 0218 	add.w	r2, r3, #24
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	9300      	str	r3, [sp, #0]
 8012bce:	2343      	movs	r3, #67	; 0x43
 8012bd0:	6979      	ldr	r1, [r7, #20]
 8012bd2:	f7fe fe53 	bl	801187c <udp_sendto_if>
 8012bd6:	4603      	mov	r3, r0
 8012bd8:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8012bda:	6978      	ldr	r0, [r7, #20]
 8012bdc:	f7f7 ff6a 	bl	800aab4 <pbuf_free>
 8012be0:	e001      	b.n	8012be6 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8012be2:	23ff      	movs	r3, #255	; 0xff
 8012be4:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8012be6:	69bb      	ldr	r3, [r7, #24]
 8012be8:	799b      	ldrb	r3, [r3, #6]
 8012bea:	2bff      	cmp	r3, #255	; 0xff
 8012bec:	d005      	beq.n	8012bfa <dhcp_renew+0xe2>
    dhcp->tries++;
 8012bee:	69bb      	ldr	r3, [r7, #24]
 8012bf0:	799b      	ldrb	r3, [r3, #6]
 8012bf2:	3301      	adds	r3, #1
 8012bf4:	b2da      	uxtb	r2, r3
 8012bf6:	69bb      	ldr	r3, [r7, #24]
 8012bf8:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8012bfa:	69bb      	ldr	r3, [r7, #24]
 8012bfc:	799b      	ldrb	r3, [r3, #6]
 8012bfe:	2b09      	cmp	r3, #9
 8012c00:	d80a      	bhi.n	8012c18 <dhcp_renew+0x100>
 8012c02:	69bb      	ldr	r3, [r7, #24]
 8012c04:	799b      	ldrb	r3, [r3, #6]
 8012c06:	b29b      	uxth	r3, r3
 8012c08:	461a      	mov	r2, r3
 8012c0a:	0152      	lsls	r2, r2, #5
 8012c0c:	1ad2      	subs	r2, r2, r3
 8012c0e:	0092      	lsls	r2, r2, #2
 8012c10:	4413      	add	r3, r2
 8012c12:	011b      	lsls	r3, r3, #4
 8012c14:	b29b      	uxth	r3, r3
 8012c16:	e001      	b.n	8012c1c <dhcp_renew+0x104>
 8012c18:	f644 6320 	movw	r3, #20000	; 0x4e20
 8012c1c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8012c1e:	89fb      	ldrh	r3, [r7, #14]
 8012c20:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8012c24:	4a09      	ldr	r2, [pc, #36]	; (8012c4c <dhcp_renew+0x134>)
 8012c26:	fb82 1203 	smull	r1, r2, r2, r3
 8012c2a:	1152      	asrs	r2, r2, #5
 8012c2c:	17db      	asrs	r3, r3, #31
 8012c2e:	1ad3      	subs	r3, r2, r3
 8012c30:	b29a      	uxth	r2, r3
 8012c32:	69bb      	ldr	r3, [r7, #24]
 8012c34:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8012c36:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012c3a:	4618      	mov	r0, r3
 8012c3c:	3720      	adds	r7, #32
 8012c3e:	46bd      	mov	sp, r7
 8012c40:	bd80      	pop	{r7, pc}
 8012c42:	bf00      	nop
 8012c44:	20000020 	.word	0x20000020
 8012c48:	2001af3c 	.word	0x2001af3c
 8012c4c:	10624dd3 	.word	0x10624dd3

08012c50 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8012c50:	b580      	push	{r7, lr}
 8012c52:	b08a      	sub	sp, #40	; 0x28
 8012c54:	af02      	add	r7, sp, #8
 8012c56:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c5c:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8012c5e:	2104      	movs	r1, #4
 8012c60:	69b8      	ldr	r0, [r7, #24]
 8012c62:	f000 f9e1 	bl	8013028 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8012c66:	f107 030c 	add.w	r3, r7, #12
 8012c6a:	2203      	movs	r2, #3
 8012c6c:	69b9      	ldr	r1, [r7, #24]
 8012c6e:	6878      	ldr	r0, [r7, #4]
 8012c70:	f000 fe66 	bl	8013940 <dhcp_create_msg>
 8012c74:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8012c76:	697b      	ldr	r3, [r7, #20]
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	d04c      	beq.n	8012d16 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8012c7c:	697b      	ldr	r3, [r7, #20]
 8012c7e:	685b      	ldr	r3, [r3, #4]
 8012c80:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8012c82:	89b8      	ldrh	r0, [r7, #12]
 8012c84:	693b      	ldr	r3, [r7, #16]
 8012c86:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012c8a:	2302      	movs	r3, #2
 8012c8c:	2239      	movs	r2, #57	; 0x39
 8012c8e:	f000 f9e5 	bl	801305c <dhcp_option>
 8012c92:	4603      	mov	r3, r0
 8012c94:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8012c96:	89b8      	ldrh	r0, [r7, #12]
 8012c98:	693b      	ldr	r3, [r7, #16]
 8012c9a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012ca2:	461a      	mov	r2, r3
 8012ca4:	f000 fa34 	bl	8013110 <dhcp_option_short>
 8012ca8:	4603      	mov	r3, r0
 8012caa:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8012cac:	89b8      	ldrh	r0, [r7, #12]
 8012cae:	693b      	ldr	r3, [r7, #16]
 8012cb0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012cb4:	2303      	movs	r3, #3
 8012cb6:	2237      	movs	r2, #55	; 0x37
 8012cb8:	f000 f9d0 	bl	801305c <dhcp_option>
 8012cbc:	4603      	mov	r3, r0
 8012cbe:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012cc0:	2300      	movs	r3, #0
 8012cc2:	77bb      	strb	r3, [r7, #30]
 8012cc4:	e00e      	b.n	8012ce4 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8012cc6:	89b8      	ldrh	r0, [r7, #12]
 8012cc8:	693b      	ldr	r3, [r7, #16]
 8012cca:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012cce:	7fbb      	ldrb	r3, [r7, #30]
 8012cd0:	4a29      	ldr	r2, [pc, #164]	; (8012d78 <dhcp_rebind+0x128>)
 8012cd2:	5cd3      	ldrb	r3, [r2, r3]
 8012cd4:	461a      	mov	r2, r3
 8012cd6:	f000 f9f5 	bl	80130c4 <dhcp_option_byte>
 8012cda:	4603      	mov	r3, r0
 8012cdc:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012cde:	7fbb      	ldrb	r3, [r7, #30]
 8012ce0:	3301      	adds	r3, #1
 8012ce2:	77bb      	strb	r3, [r7, #30]
 8012ce4:	7fbb      	ldrb	r3, [r7, #30]
 8012ce6:	2b02      	cmp	r3, #2
 8012ce8:	d9ed      	bls.n	8012cc6 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8012cea:	89b8      	ldrh	r0, [r7, #12]
 8012cec:	693b      	ldr	r3, [r7, #16]
 8012cee:	33f0      	adds	r3, #240	; 0xf0
 8012cf0:	697a      	ldr	r2, [r7, #20]
 8012cf2:	4619      	mov	r1, r3
 8012cf4:	f000 fefa 	bl	8013aec <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8012cf8:	4b20      	ldr	r3, [pc, #128]	; (8012d7c <dhcp_rebind+0x12c>)
 8012cfa:	6818      	ldr	r0, [r3, #0]
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	9300      	str	r3, [sp, #0]
 8012d00:	2343      	movs	r3, #67	; 0x43
 8012d02:	4a1f      	ldr	r2, [pc, #124]	; (8012d80 <dhcp_rebind+0x130>)
 8012d04:	6979      	ldr	r1, [r7, #20]
 8012d06:	f7fe fdb9 	bl	801187c <udp_sendto_if>
 8012d0a:	4603      	mov	r3, r0
 8012d0c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8012d0e:	6978      	ldr	r0, [r7, #20]
 8012d10:	f7f7 fed0 	bl	800aab4 <pbuf_free>
 8012d14:	e001      	b.n	8012d1a <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8012d16:	23ff      	movs	r3, #255	; 0xff
 8012d18:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8012d1a:	69bb      	ldr	r3, [r7, #24]
 8012d1c:	799b      	ldrb	r3, [r3, #6]
 8012d1e:	2bff      	cmp	r3, #255	; 0xff
 8012d20:	d005      	beq.n	8012d2e <dhcp_rebind+0xde>
    dhcp->tries++;
 8012d22:	69bb      	ldr	r3, [r7, #24]
 8012d24:	799b      	ldrb	r3, [r3, #6]
 8012d26:	3301      	adds	r3, #1
 8012d28:	b2da      	uxtb	r2, r3
 8012d2a:	69bb      	ldr	r3, [r7, #24]
 8012d2c:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8012d2e:	69bb      	ldr	r3, [r7, #24]
 8012d30:	799b      	ldrb	r3, [r3, #6]
 8012d32:	2b09      	cmp	r3, #9
 8012d34:	d80a      	bhi.n	8012d4c <dhcp_rebind+0xfc>
 8012d36:	69bb      	ldr	r3, [r7, #24]
 8012d38:	799b      	ldrb	r3, [r3, #6]
 8012d3a:	b29b      	uxth	r3, r3
 8012d3c:	461a      	mov	r2, r3
 8012d3e:	0152      	lsls	r2, r2, #5
 8012d40:	1ad2      	subs	r2, r2, r3
 8012d42:	0092      	lsls	r2, r2, #2
 8012d44:	4413      	add	r3, r2
 8012d46:	00db      	lsls	r3, r3, #3
 8012d48:	b29b      	uxth	r3, r3
 8012d4a:	e001      	b.n	8012d50 <dhcp_rebind+0x100>
 8012d4c:	f242 7310 	movw	r3, #10000	; 0x2710
 8012d50:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8012d52:	89fb      	ldrh	r3, [r7, #14]
 8012d54:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8012d58:	4a0a      	ldr	r2, [pc, #40]	; (8012d84 <dhcp_rebind+0x134>)
 8012d5a:	fb82 1203 	smull	r1, r2, r2, r3
 8012d5e:	1152      	asrs	r2, r2, #5
 8012d60:	17db      	asrs	r3, r3, #31
 8012d62:	1ad3      	subs	r3, r2, r3
 8012d64:	b29a      	uxth	r2, r3
 8012d66:	69bb      	ldr	r3, [r7, #24]
 8012d68:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8012d6a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012d6e:	4618      	mov	r0, r3
 8012d70:	3720      	adds	r7, #32
 8012d72:	46bd      	mov	sp, r7
 8012d74:	bd80      	pop	{r7, pc}
 8012d76:	bf00      	nop
 8012d78:	20000020 	.word	0x20000020
 8012d7c:	2001af3c 	.word	0x2001af3c
 8012d80:	0801b330 	.word	0x0801b330
 8012d84:	10624dd3 	.word	0x10624dd3

08012d88 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8012d88:	b5b0      	push	{r4, r5, r7, lr}
 8012d8a:	b08a      	sub	sp, #40	; 0x28
 8012d8c:	af02      	add	r7, sp, #8
 8012d8e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d94:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8012d96:	2103      	movs	r1, #3
 8012d98:	69b8      	ldr	r0, [r7, #24]
 8012d9a:	f000 f945 	bl	8013028 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8012d9e:	f107 030c 	add.w	r3, r7, #12
 8012da2:	2203      	movs	r2, #3
 8012da4:	69b9      	ldr	r1, [r7, #24]
 8012da6:	6878      	ldr	r0, [r7, #4]
 8012da8:	f000 fdca 	bl	8013940 <dhcp_create_msg>
 8012dac:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8012dae:	697b      	ldr	r3, [r7, #20]
 8012db0:	2b00      	cmp	r3, #0
 8012db2:	d066      	beq.n	8012e82 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8012db4:	697b      	ldr	r3, [r7, #20]
 8012db6:	685b      	ldr	r3, [r3, #4]
 8012db8:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8012dba:	89b8      	ldrh	r0, [r7, #12]
 8012dbc:	693b      	ldr	r3, [r7, #16]
 8012dbe:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012dc2:	2302      	movs	r3, #2
 8012dc4:	2239      	movs	r2, #57	; 0x39
 8012dc6:	f000 f949 	bl	801305c <dhcp_option>
 8012dca:	4603      	mov	r3, r0
 8012dcc:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8012dce:	89b8      	ldrh	r0, [r7, #12]
 8012dd0:	693b      	ldr	r3, [r7, #16]
 8012dd2:	33f0      	adds	r3, #240	; 0xf0
 8012dd4:	f44f 7210 	mov.w	r2, #576	; 0x240
 8012dd8:	4619      	mov	r1, r3
 8012dda:	f000 f999 	bl	8013110 <dhcp_option_short>
 8012dde:	4603      	mov	r3, r0
 8012de0:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8012de2:	89b8      	ldrh	r0, [r7, #12]
 8012de4:	693b      	ldr	r3, [r7, #16]
 8012de6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012dea:	2304      	movs	r3, #4
 8012dec:	2232      	movs	r2, #50	; 0x32
 8012dee:	f000 f935 	bl	801305c <dhcp_option>
 8012df2:	4603      	mov	r3, r0
 8012df4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8012df6:	89bc      	ldrh	r4, [r7, #12]
 8012df8:	693b      	ldr	r3, [r7, #16]
 8012dfa:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8012dfe:	69bb      	ldr	r3, [r7, #24]
 8012e00:	69db      	ldr	r3, [r3, #28]
 8012e02:	4618      	mov	r0, r3
 8012e04:	f7f6 fa8b 	bl	800931e <lwip_htonl>
 8012e08:	4603      	mov	r3, r0
 8012e0a:	461a      	mov	r2, r3
 8012e0c:	4629      	mov	r1, r5
 8012e0e:	4620      	mov	r0, r4
 8012e10:	f000 f9b0 	bl	8013174 <dhcp_option_long>
 8012e14:	4603      	mov	r3, r0
 8012e16:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8012e18:	89b8      	ldrh	r0, [r7, #12]
 8012e1a:	693b      	ldr	r3, [r7, #16]
 8012e1c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012e20:	2303      	movs	r3, #3
 8012e22:	2237      	movs	r2, #55	; 0x37
 8012e24:	f000 f91a 	bl	801305c <dhcp_option>
 8012e28:	4603      	mov	r3, r0
 8012e2a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012e2c:	2300      	movs	r3, #0
 8012e2e:	77bb      	strb	r3, [r7, #30]
 8012e30:	e00e      	b.n	8012e50 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8012e32:	89b8      	ldrh	r0, [r7, #12]
 8012e34:	693b      	ldr	r3, [r7, #16]
 8012e36:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012e3a:	7fbb      	ldrb	r3, [r7, #30]
 8012e3c:	4a29      	ldr	r2, [pc, #164]	; (8012ee4 <dhcp_reboot+0x15c>)
 8012e3e:	5cd3      	ldrb	r3, [r2, r3]
 8012e40:	461a      	mov	r2, r3
 8012e42:	f000 f93f 	bl	80130c4 <dhcp_option_byte>
 8012e46:	4603      	mov	r3, r0
 8012e48:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012e4a:	7fbb      	ldrb	r3, [r7, #30]
 8012e4c:	3301      	adds	r3, #1
 8012e4e:	77bb      	strb	r3, [r7, #30]
 8012e50:	7fbb      	ldrb	r3, [r7, #30]
 8012e52:	2b02      	cmp	r3, #2
 8012e54:	d9ed      	bls.n	8012e32 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8012e56:	89b8      	ldrh	r0, [r7, #12]
 8012e58:	693b      	ldr	r3, [r7, #16]
 8012e5a:	33f0      	adds	r3, #240	; 0xf0
 8012e5c:	697a      	ldr	r2, [r7, #20]
 8012e5e:	4619      	mov	r1, r3
 8012e60:	f000 fe44 	bl	8013aec <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8012e64:	4b20      	ldr	r3, [pc, #128]	; (8012ee8 <dhcp_reboot+0x160>)
 8012e66:	6818      	ldr	r0, [r3, #0]
 8012e68:	687b      	ldr	r3, [r7, #4]
 8012e6a:	9300      	str	r3, [sp, #0]
 8012e6c:	2343      	movs	r3, #67	; 0x43
 8012e6e:	4a1f      	ldr	r2, [pc, #124]	; (8012eec <dhcp_reboot+0x164>)
 8012e70:	6979      	ldr	r1, [r7, #20]
 8012e72:	f7fe fd03 	bl	801187c <udp_sendto_if>
 8012e76:	4603      	mov	r3, r0
 8012e78:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8012e7a:	6978      	ldr	r0, [r7, #20]
 8012e7c:	f7f7 fe1a 	bl	800aab4 <pbuf_free>
 8012e80:	e001      	b.n	8012e86 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8012e82:	23ff      	movs	r3, #255	; 0xff
 8012e84:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8012e86:	69bb      	ldr	r3, [r7, #24]
 8012e88:	799b      	ldrb	r3, [r3, #6]
 8012e8a:	2bff      	cmp	r3, #255	; 0xff
 8012e8c:	d005      	beq.n	8012e9a <dhcp_reboot+0x112>
    dhcp->tries++;
 8012e8e:	69bb      	ldr	r3, [r7, #24]
 8012e90:	799b      	ldrb	r3, [r3, #6]
 8012e92:	3301      	adds	r3, #1
 8012e94:	b2da      	uxtb	r2, r3
 8012e96:	69bb      	ldr	r3, [r7, #24]
 8012e98:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8012e9a:	69bb      	ldr	r3, [r7, #24]
 8012e9c:	799b      	ldrb	r3, [r3, #6]
 8012e9e:	2b09      	cmp	r3, #9
 8012ea0:	d80a      	bhi.n	8012eb8 <dhcp_reboot+0x130>
 8012ea2:	69bb      	ldr	r3, [r7, #24]
 8012ea4:	799b      	ldrb	r3, [r3, #6]
 8012ea6:	b29b      	uxth	r3, r3
 8012ea8:	461a      	mov	r2, r3
 8012eaa:	0152      	lsls	r2, r2, #5
 8012eac:	1ad2      	subs	r2, r2, r3
 8012eae:	0092      	lsls	r2, r2, #2
 8012eb0:	4413      	add	r3, r2
 8012eb2:	00db      	lsls	r3, r3, #3
 8012eb4:	b29b      	uxth	r3, r3
 8012eb6:	e001      	b.n	8012ebc <dhcp_reboot+0x134>
 8012eb8:	f242 7310 	movw	r3, #10000	; 0x2710
 8012ebc:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8012ebe:	89fb      	ldrh	r3, [r7, #14]
 8012ec0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8012ec4:	4a0a      	ldr	r2, [pc, #40]	; (8012ef0 <dhcp_reboot+0x168>)
 8012ec6:	fb82 1203 	smull	r1, r2, r2, r3
 8012eca:	1152      	asrs	r2, r2, #5
 8012ecc:	17db      	asrs	r3, r3, #31
 8012ece:	1ad3      	subs	r3, r2, r3
 8012ed0:	b29a      	uxth	r2, r3
 8012ed2:	69bb      	ldr	r3, [r7, #24]
 8012ed4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8012ed6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012eda:	4618      	mov	r0, r3
 8012edc:	3720      	adds	r7, #32
 8012ede:	46bd      	mov	sp, r7
 8012ee0:	bdb0      	pop	{r4, r5, r7, pc}
 8012ee2:	bf00      	nop
 8012ee4:	20000020 	.word	0x20000020
 8012ee8:	2001af3c 	.word	0x2001af3c
 8012eec:	0801b330 	.word	0x0801b330
 8012ef0:	10624dd3 	.word	0x10624dd3

08012ef4 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8012ef4:	b5b0      	push	{r4, r5, r7, lr}
 8012ef6:	b08a      	sub	sp, #40	; 0x28
 8012ef8:	af02      	add	r7, sp, #8
 8012efa:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f00:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8012f02:	69fb      	ldr	r3, [r7, #28]
 8012f04:	2b00      	cmp	r3, #0
 8012f06:	f000 8084 	beq.w	8013012 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8012f0a:	69fb      	ldr	r3, [r7, #28]
 8012f0c:	795b      	ldrb	r3, [r3, #5]
 8012f0e:	2b00      	cmp	r3, #0
 8012f10:	f000 8081 	beq.w	8013016 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8012f14:	69fb      	ldr	r3, [r7, #28]
 8012f16:	699b      	ldr	r3, [r3, #24]
 8012f18:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8012f1a:	69fb      	ldr	r3, [r7, #28]
 8012f1c:	2200      	movs	r2, #0
 8012f1e:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8012f20:	69fb      	ldr	r3, [r7, #28]
 8012f22:	2200      	movs	r2, #0
 8012f24:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8012f26:	69fb      	ldr	r3, [r7, #28]
 8012f28:	2200      	movs	r2, #0
 8012f2a:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8012f2c:	69fb      	ldr	r3, [r7, #28]
 8012f2e:	2200      	movs	r2, #0
 8012f30:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8012f32:	69fb      	ldr	r3, [r7, #28]
 8012f34:	2200      	movs	r2, #0
 8012f36:	631a      	str	r2, [r3, #48]	; 0x30
 8012f38:	69fb      	ldr	r3, [r7, #28]
 8012f3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012f3c:	69fb      	ldr	r3, [r7, #28]
 8012f3e:	62da      	str	r2, [r3, #44]	; 0x2c
 8012f40:	69fb      	ldr	r3, [r7, #28]
 8012f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012f44:	69fb      	ldr	r3, [r7, #28]
 8012f46:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8012f48:	69fb      	ldr	r3, [r7, #28]
 8012f4a:	2200      	movs	r2, #0
 8012f4c:	829a      	strh	r2, [r3, #20]
 8012f4e:	69fb      	ldr	r3, [r7, #28]
 8012f50:	8a9a      	ldrh	r2, [r3, #20]
 8012f52:	69fb      	ldr	r3, [r7, #28]
 8012f54:	825a      	strh	r2, [r3, #18]
 8012f56:	69fb      	ldr	r3, [r7, #28]
 8012f58:	8a5a      	ldrh	r2, [r3, #18]
 8012f5a:	69fb      	ldr	r3, [r7, #28]
 8012f5c:	821a      	strh	r2, [r3, #16]
 8012f5e:	69fb      	ldr	r3, [r7, #28]
 8012f60:	8a1a      	ldrh	r2, [r3, #16]
 8012f62:	69fb      	ldr	r3, [r7, #28]
 8012f64:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8012f66:	6878      	ldr	r0, [r7, #4]
 8012f68:	f000 fdee 	bl	8013b48 <dhcp_supplied_address>
 8012f6c:	4603      	mov	r3, r0
 8012f6e:	2b00      	cmp	r3, #0
 8012f70:	d03b      	beq.n	8012fea <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8012f72:	f107 030e 	add.w	r3, r7, #14
 8012f76:	2207      	movs	r2, #7
 8012f78:	69f9      	ldr	r1, [r7, #28]
 8012f7a:	6878      	ldr	r0, [r7, #4]
 8012f7c:	f000 fce0 	bl	8013940 <dhcp_create_msg>
 8012f80:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8012f82:	69bb      	ldr	r3, [r7, #24]
 8012f84:	2b00      	cmp	r3, #0
 8012f86:	d030      	beq.n	8012fea <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8012f88:	69bb      	ldr	r3, [r7, #24]
 8012f8a:	685b      	ldr	r3, [r3, #4]
 8012f8c:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8012f8e:	89f8      	ldrh	r0, [r7, #14]
 8012f90:	697b      	ldr	r3, [r7, #20]
 8012f92:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012f96:	2304      	movs	r3, #4
 8012f98:	2236      	movs	r2, #54	; 0x36
 8012f9a:	f000 f85f 	bl	801305c <dhcp_option>
 8012f9e:	4603      	mov	r3, r0
 8012fa0:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8012fa2:	89fc      	ldrh	r4, [r7, #14]
 8012fa4:	697b      	ldr	r3, [r7, #20]
 8012fa6:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8012faa:	693b      	ldr	r3, [r7, #16]
 8012fac:	4618      	mov	r0, r3
 8012fae:	f7f6 f9b6 	bl	800931e <lwip_htonl>
 8012fb2:	4603      	mov	r3, r0
 8012fb4:	461a      	mov	r2, r3
 8012fb6:	4629      	mov	r1, r5
 8012fb8:	4620      	mov	r0, r4
 8012fba:	f000 f8db 	bl	8013174 <dhcp_option_long>
 8012fbe:	4603      	mov	r3, r0
 8012fc0:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8012fc2:	89f8      	ldrh	r0, [r7, #14]
 8012fc4:	697b      	ldr	r3, [r7, #20]
 8012fc6:	33f0      	adds	r3, #240	; 0xf0
 8012fc8:	69ba      	ldr	r2, [r7, #24]
 8012fca:	4619      	mov	r1, r3
 8012fcc:	f000 fd8e 	bl	8013aec <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8012fd0:	4b13      	ldr	r3, [pc, #76]	; (8013020 <dhcp_release_and_stop+0x12c>)
 8012fd2:	6818      	ldr	r0, [r3, #0]
 8012fd4:	f107 0210 	add.w	r2, r7, #16
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	9300      	str	r3, [sp, #0]
 8012fdc:	2343      	movs	r3, #67	; 0x43
 8012fde:	69b9      	ldr	r1, [r7, #24]
 8012fe0:	f7fe fc4c 	bl	801187c <udp_sendto_if>
      pbuf_free(p_out);
 8012fe4:	69b8      	ldr	r0, [r7, #24]
 8012fe6:	f7f7 fd65 	bl	800aab4 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8012fea:	4b0e      	ldr	r3, [pc, #56]	; (8013024 <dhcp_release_and_stop+0x130>)
 8012fec:	4a0d      	ldr	r2, [pc, #52]	; (8013024 <dhcp_release_and_stop+0x130>)
 8012fee:	490d      	ldr	r1, [pc, #52]	; (8013024 <dhcp_release_and_stop+0x130>)
 8012ff0:	6878      	ldr	r0, [r7, #4]
 8012ff2:	f7f7 f851 	bl	800a098 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8012ff6:	2100      	movs	r1, #0
 8012ff8:	69f8      	ldr	r0, [r7, #28]
 8012ffa:	f000 f815 	bl	8013028 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8012ffe:	69fb      	ldr	r3, [r7, #28]
 8013000:	791b      	ldrb	r3, [r3, #4]
 8013002:	2b00      	cmp	r3, #0
 8013004:	d008      	beq.n	8013018 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8013006:	f7fe ff85 	bl	8011f14 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 801300a:	69fb      	ldr	r3, [r7, #28]
 801300c:	2200      	movs	r2, #0
 801300e:	711a      	strb	r2, [r3, #4]
 8013010:	e002      	b.n	8013018 <dhcp_release_and_stop+0x124>
    return;
 8013012:	bf00      	nop
 8013014:	e000      	b.n	8013018 <dhcp_release_and_stop+0x124>
    return;
 8013016:	bf00      	nop
  }
}
 8013018:	3720      	adds	r7, #32
 801301a:	46bd      	mov	sp, r7
 801301c:	bdb0      	pop	{r4, r5, r7, pc}
 801301e:	bf00      	nop
 8013020:	2001af3c 	.word	0x2001af3c
 8013024:	0801b32c 	.word	0x0801b32c

08013028 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8013028:	b480      	push	{r7}
 801302a:	b083      	sub	sp, #12
 801302c:	af00      	add	r7, sp, #0
 801302e:	6078      	str	r0, [r7, #4]
 8013030:	460b      	mov	r3, r1
 8013032:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	795b      	ldrb	r3, [r3, #5]
 8013038:	78fa      	ldrb	r2, [r7, #3]
 801303a:	429a      	cmp	r2, r3
 801303c:	d008      	beq.n	8013050 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 801303e:	687b      	ldr	r3, [r7, #4]
 8013040:	78fa      	ldrb	r2, [r7, #3]
 8013042:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8013044:	687b      	ldr	r3, [r7, #4]
 8013046:	2200      	movs	r2, #0
 8013048:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 801304a:	687b      	ldr	r3, [r7, #4]
 801304c:	2200      	movs	r2, #0
 801304e:	811a      	strh	r2, [r3, #8]
  }
}
 8013050:	bf00      	nop
 8013052:	370c      	adds	r7, #12
 8013054:	46bd      	mov	sp, r7
 8013056:	f85d 7b04 	ldr.w	r7, [sp], #4
 801305a:	4770      	bx	lr

0801305c <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 801305c:	b580      	push	{r7, lr}
 801305e:	b082      	sub	sp, #8
 8013060:	af00      	add	r7, sp, #0
 8013062:	6039      	str	r1, [r7, #0]
 8013064:	4611      	mov	r1, r2
 8013066:	461a      	mov	r2, r3
 8013068:	4603      	mov	r3, r0
 801306a:	80fb      	strh	r3, [r7, #6]
 801306c:	460b      	mov	r3, r1
 801306e:	717b      	strb	r3, [r7, #5]
 8013070:	4613      	mov	r3, r2
 8013072:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8013074:	88fa      	ldrh	r2, [r7, #6]
 8013076:	793b      	ldrb	r3, [r7, #4]
 8013078:	4413      	add	r3, r2
 801307a:	3302      	adds	r3, #2
 801307c:	2b44      	cmp	r3, #68	; 0x44
 801307e:	d906      	bls.n	801308e <dhcp_option+0x32>
 8013080:	4b0d      	ldr	r3, [pc, #52]	; (80130b8 <dhcp_option+0x5c>)
 8013082:	f240 529a 	movw	r2, #1434	; 0x59a
 8013086:	490d      	ldr	r1, [pc, #52]	; (80130bc <dhcp_option+0x60>)
 8013088:	480d      	ldr	r0, [pc, #52]	; (80130c0 <dhcp_option+0x64>)
 801308a:	f003 f9c1 	bl	8016410 <iprintf>
  options[options_out_len++] = option_type;
 801308e:	88fb      	ldrh	r3, [r7, #6]
 8013090:	1c5a      	adds	r2, r3, #1
 8013092:	80fa      	strh	r2, [r7, #6]
 8013094:	461a      	mov	r2, r3
 8013096:	683b      	ldr	r3, [r7, #0]
 8013098:	4413      	add	r3, r2
 801309a:	797a      	ldrb	r2, [r7, #5]
 801309c:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 801309e:	88fb      	ldrh	r3, [r7, #6]
 80130a0:	1c5a      	adds	r2, r3, #1
 80130a2:	80fa      	strh	r2, [r7, #6]
 80130a4:	461a      	mov	r2, r3
 80130a6:	683b      	ldr	r3, [r7, #0]
 80130a8:	4413      	add	r3, r2
 80130aa:	793a      	ldrb	r2, [r7, #4]
 80130ac:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80130ae:	88fb      	ldrh	r3, [r7, #6]
}
 80130b0:	4618      	mov	r0, r3
 80130b2:	3708      	adds	r7, #8
 80130b4:	46bd      	mov	sp, r7
 80130b6:	bd80      	pop	{r7, pc}
 80130b8:	0801a774 	.word	0x0801a774
 80130bc:	0801a908 	.word	0x0801a908
 80130c0:	0801a7d4 	.word	0x0801a7d4

080130c4 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 80130c4:	b580      	push	{r7, lr}
 80130c6:	b082      	sub	sp, #8
 80130c8:	af00      	add	r7, sp, #0
 80130ca:	4603      	mov	r3, r0
 80130cc:	6039      	str	r1, [r7, #0]
 80130ce:	80fb      	strh	r3, [r7, #6]
 80130d0:	4613      	mov	r3, r2
 80130d2:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 80130d4:	88fb      	ldrh	r3, [r7, #6]
 80130d6:	2b43      	cmp	r3, #67	; 0x43
 80130d8:	d906      	bls.n	80130e8 <dhcp_option_byte+0x24>
 80130da:	4b0a      	ldr	r3, [pc, #40]	; (8013104 <dhcp_option_byte+0x40>)
 80130dc:	f240 52a6 	movw	r2, #1446	; 0x5a6
 80130e0:	4909      	ldr	r1, [pc, #36]	; (8013108 <dhcp_option_byte+0x44>)
 80130e2:	480a      	ldr	r0, [pc, #40]	; (801310c <dhcp_option_byte+0x48>)
 80130e4:	f003 f994 	bl	8016410 <iprintf>
  options[options_out_len++] = value;
 80130e8:	88fb      	ldrh	r3, [r7, #6]
 80130ea:	1c5a      	adds	r2, r3, #1
 80130ec:	80fa      	strh	r2, [r7, #6]
 80130ee:	461a      	mov	r2, r3
 80130f0:	683b      	ldr	r3, [r7, #0]
 80130f2:	4413      	add	r3, r2
 80130f4:	797a      	ldrb	r2, [r7, #5]
 80130f6:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80130f8:	88fb      	ldrh	r3, [r7, #6]
}
 80130fa:	4618      	mov	r0, r3
 80130fc:	3708      	adds	r7, #8
 80130fe:	46bd      	mov	sp, r7
 8013100:	bd80      	pop	{r7, pc}
 8013102:	bf00      	nop
 8013104:	0801a774 	.word	0x0801a774
 8013108:	0801a94c 	.word	0x0801a94c
 801310c:	0801a7d4 	.word	0x0801a7d4

08013110 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8013110:	b580      	push	{r7, lr}
 8013112:	b082      	sub	sp, #8
 8013114:	af00      	add	r7, sp, #0
 8013116:	4603      	mov	r3, r0
 8013118:	6039      	str	r1, [r7, #0]
 801311a:	80fb      	strh	r3, [r7, #6]
 801311c:	4613      	mov	r3, r2
 801311e:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8013120:	88fb      	ldrh	r3, [r7, #6]
 8013122:	3302      	adds	r3, #2
 8013124:	2b44      	cmp	r3, #68	; 0x44
 8013126:	d906      	bls.n	8013136 <dhcp_option_short+0x26>
 8013128:	4b0f      	ldr	r3, [pc, #60]	; (8013168 <dhcp_option_short+0x58>)
 801312a:	f240 52ae 	movw	r2, #1454	; 0x5ae
 801312e:	490f      	ldr	r1, [pc, #60]	; (801316c <dhcp_option_short+0x5c>)
 8013130:	480f      	ldr	r0, [pc, #60]	; (8013170 <dhcp_option_short+0x60>)
 8013132:	f003 f96d 	bl	8016410 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8013136:	88bb      	ldrh	r3, [r7, #4]
 8013138:	0a1b      	lsrs	r3, r3, #8
 801313a:	b29a      	uxth	r2, r3
 801313c:	88fb      	ldrh	r3, [r7, #6]
 801313e:	1c59      	adds	r1, r3, #1
 8013140:	80f9      	strh	r1, [r7, #6]
 8013142:	4619      	mov	r1, r3
 8013144:	683b      	ldr	r3, [r7, #0]
 8013146:	440b      	add	r3, r1
 8013148:	b2d2      	uxtb	r2, r2
 801314a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 801314c:	88fb      	ldrh	r3, [r7, #6]
 801314e:	1c5a      	adds	r2, r3, #1
 8013150:	80fa      	strh	r2, [r7, #6]
 8013152:	461a      	mov	r2, r3
 8013154:	683b      	ldr	r3, [r7, #0]
 8013156:	4413      	add	r3, r2
 8013158:	88ba      	ldrh	r2, [r7, #4]
 801315a:	b2d2      	uxtb	r2, r2
 801315c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801315e:	88fb      	ldrh	r3, [r7, #6]
}
 8013160:	4618      	mov	r0, r3
 8013162:	3708      	adds	r7, #8
 8013164:	46bd      	mov	sp, r7
 8013166:	bd80      	pop	{r7, pc}
 8013168:	0801a774 	.word	0x0801a774
 801316c:	0801a984 	.word	0x0801a984
 8013170:	0801a7d4 	.word	0x0801a7d4

08013174 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8013174:	b580      	push	{r7, lr}
 8013176:	b084      	sub	sp, #16
 8013178:	af00      	add	r7, sp, #0
 801317a:	4603      	mov	r3, r0
 801317c:	60b9      	str	r1, [r7, #8]
 801317e:	607a      	str	r2, [r7, #4]
 8013180:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8013182:	89fb      	ldrh	r3, [r7, #14]
 8013184:	3304      	adds	r3, #4
 8013186:	2b44      	cmp	r3, #68	; 0x44
 8013188:	d906      	bls.n	8013198 <dhcp_option_long+0x24>
 801318a:	4b19      	ldr	r3, [pc, #100]	; (80131f0 <dhcp_option_long+0x7c>)
 801318c:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8013190:	4918      	ldr	r1, [pc, #96]	; (80131f4 <dhcp_option_long+0x80>)
 8013192:	4819      	ldr	r0, [pc, #100]	; (80131f8 <dhcp_option_long+0x84>)
 8013194:	f003 f93c 	bl	8016410 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8013198:	687b      	ldr	r3, [r7, #4]
 801319a:	0e1a      	lsrs	r2, r3, #24
 801319c:	89fb      	ldrh	r3, [r7, #14]
 801319e:	1c59      	adds	r1, r3, #1
 80131a0:	81f9      	strh	r1, [r7, #14]
 80131a2:	4619      	mov	r1, r3
 80131a4:	68bb      	ldr	r3, [r7, #8]
 80131a6:	440b      	add	r3, r1
 80131a8:	b2d2      	uxtb	r2, r2
 80131aa:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	0c1a      	lsrs	r2, r3, #16
 80131b0:	89fb      	ldrh	r3, [r7, #14]
 80131b2:	1c59      	adds	r1, r3, #1
 80131b4:	81f9      	strh	r1, [r7, #14]
 80131b6:	4619      	mov	r1, r3
 80131b8:	68bb      	ldr	r3, [r7, #8]
 80131ba:	440b      	add	r3, r1
 80131bc:	b2d2      	uxtb	r2, r2
 80131be:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	0a1a      	lsrs	r2, r3, #8
 80131c4:	89fb      	ldrh	r3, [r7, #14]
 80131c6:	1c59      	adds	r1, r3, #1
 80131c8:	81f9      	strh	r1, [r7, #14]
 80131ca:	4619      	mov	r1, r3
 80131cc:	68bb      	ldr	r3, [r7, #8]
 80131ce:	440b      	add	r3, r1
 80131d0:	b2d2      	uxtb	r2, r2
 80131d2:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 80131d4:	89fb      	ldrh	r3, [r7, #14]
 80131d6:	1c5a      	adds	r2, r3, #1
 80131d8:	81fa      	strh	r2, [r7, #14]
 80131da:	461a      	mov	r2, r3
 80131dc:	68bb      	ldr	r3, [r7, #8]
 80131de:	4413      	add	r3, r2
 80131e0:	687a      	ldr	r2, [r7, #4]
 80131e2:	b2d2      	uxtb	r2, r2
 80131e4:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80131e6:	89fb      	ldrh	r3, [r7, #14]
}
 80131e8:	4618      	mov	r0, r3
 80131ea:	3710      	adds	r7, #16
 80131ec:	46bd      	mov	sp, r7
 80131ee:	bd80      	pop	{r7, pc}
 80131f0:	0801a774 	.word	0x0801a774
 80131f4:	0801a9c0 	.word	0x0801a9c0
 80131f8:	0801a7d4 	.word	0x0801a7d4

080131fc <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 80131fc:	b580      	push	{r7, lr}
 80131fe:	b090      	sub	sp, #64	; 0x40
 8013200:	af00      	add	r7, sp, #0
 8013202:	6078      	str	r0, [r7, #4]
 8013204:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8013206:	2300      	movs	r3, #0
 8013208:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 801320a:	2300      	movs	r3, #0
 801320c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 801320e:	2208      	movs	r2, #8
 8013210:	2100      	movs	r1, #0
 8013212:	48b5      	ldr	r0, [pc, #724]	; (80134e8 <dhcp_parse_reply+0x2ec>)
 8013214:	f003 f8f4 	bl	8016400 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	895b      	ldrh	r3, [r3, #10]
 801321c:	2b2b      	cmp	r3, #43	; 0x2b
 801321e:	d802      	bhi.n	8013226 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8013220:	f06f 0301 	mvn.w	r3, #1
 8013224:	e2a7      	b.n	8013776 <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	685b      	ldr	r3, [r3, #4]
 801322a:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 801322c:	23f0      	movs	r3, #240	; 0xf0
 801322e:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	891b      	ldrh	r3, [r3, #8]
 8013234:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 8013236:	687b      	ldr	r3, [r7, #4]
 8013238:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 801323a:	e00c      	b.n	8013256 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 801323c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801323e:	895b      	ldrh	r3, [r3, #10]
 8013240:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8013242:	1ad3      	subs	r3, r2, r3
 8013244:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8013246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013248:	895b      	ldrh	r3, [r3, #10]
 801324a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 801324c:	1ad3      	subs	r3, r2, r3
 801324e:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 8013250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013252:	681b      	ldr	r3, [r3, #0]
 8013254:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8013256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013258:	2b00      	cmp	r3, #0
 801325a:	d004      	beq.n	8013266 <dhcp_parse_reply+0x6a>
 801325c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801325e:	895b      	ldrh	r3, [r3, #10]
 8013260:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8013262:	429a      	cmp	r2, r3
 8013264:	d2ea      	bcs.n	801323c <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8013266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013268:	2b00      	cmp	r3, #0
 801326a:	d102      	bne.n	8013272 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 801326c:	f06f 0301 	mvn.w	r3, #1
 8013270:	e281      	b.n	8013776 <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 8013272:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8013274:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 8013276:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8013278:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 801327a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801327c:	685b      	ldr	r3, [r3, #4]
 801327e:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8013280:	e239      	b.n	80136f6 <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 8013282:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013284:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013286:	4413      	add	r3, r2
 8013288:	781b      	ldrb	r3, [r3, #0]
 801328a:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 801328c:	2300      	movs	r3, #0
 801328e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 8013292:	f04f 33ff 	mov.w	r3, #4294967295
 8013296:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8013298:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801329a:	3302      	adds	r3, #2
 801329c:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 801329e:	8bfa      	ldrh	r2, [r7, #30]
 80132a0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80132a2:	429a      	cmp	r2, r3
 80132a4:	d202      	bcs.n	80132ac <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 80132a6:	f06f 0301 	mvn.w	r3, #1
 80132aa:	e264      	b.n	8013776 <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 80132ac:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80132ae:	3301      	adds	r3, #1
 80132b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80132b2:	8952      	ldrh	r2, [r2, #10]
 80132b4:	4293      	cmp	r3, r2
 80132b6:	da07      	bge.n	80132c8 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 80132b8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80132ba:	3301      	adds	r3, #1
 80132bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80132be:	4413      	add	r3, r2
 80132c0:	781b      	ldrb	r3, [r3, #0]
 80132c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80132c6:	e00b      	b.n	80132e0 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 80132c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132ca:	681b      	ldr	r3, [r3, #0]
 80132cc:	2b00      	cmp	r3, #0
 80132ce:	d004      	beq.n	80132da <dhcp_parse_reply+0xde>
 80132d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132d2:	681b      	ldr	r3, [r3, #0]
 80132d4:	685b      	ldr	r3, [r3, #4]
 80132d6:	781b      	ldrb	r3, [r3, #0]
 80132d8:	e000      	b.n	80132dc <dhcp_parse_reply+0xe0>
 80132da:	2300      	movs	r3, #0
 80132dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 80132e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80132e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 80132e8:	7dfb      	ldrb	r3, [r7, #23]
 80132ea:	2b3b      	cmp	r3, #59	; 0x3b
 80132ec:	f200 812c 	bhi.w	8013548 <dhcp_parse_reply+0x34c>
 80132f0:	a201      	add	r2, pc, #4	; (adr r2, 80132f8 <dhcp_parse_reply+0xfc>)
 80132f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80132f6:	bf00      	nop
 80132f8:	080133e9 	.word	0x080133e9
 80132fc:	080133f9 	.word	0x080133f9
 8013300:	08013549 	.word	0x08013549
 8013304:	0801341b 	.word	0x0801341b
 8013308:	08013549 	.word	0x08013549
 801330c:	08013549 	.word	0x08013549
 8013310:	08013549 	.word	0x08013549
 8013314:	08013549 	.word	0x08013549
 8013318:	08013549 	.word	0x08013549
 801331c:	08013549 	.word	0x08013549
 8013320:	08013549 	.word	0x08013549
 8013324:	08013549 	.word	0x08013549
 8013328:	08013549 	.word	0x08013549
 801332c:	08013549 	.word	0x08013549
 8013330:	08013549 	.word	0x08013549
 8013334:	08013549 	.word	0x08013549
 8013338:	08013549 	.word	0x08013549
 801333c:	08013549 	.word	0x08013549
 8013340:	08013549 	.word	0x08013549
 8013344:	08013549 	.word	0x08013549
 8013348:	08013549 	.word	0x08013549
 801334c:	08013549 	.word	0x08013549
 8013350:	08013549 	.word	0x08013549
 8013354:	08013549 	.word	0x08013549
 8013358:	08013549 	.word	0x08013549
 801335c:	08013549 	.word	0x08013549
 8013360:	08013549 	.word	0x08013549
 8013364:	08013549 	.word	0x08013549
 8013368:	08013549 	.word	0x08013549
 801336c:	08013549 	.word	0x08013549
 8013370:	08013549 	.word	0x08013549
 8013374:	08013549 	.word	0x08013549
 8013378:	08013549 	.word	0x08013549
 801337c:	08013549 	.word	0x08013549
 8013380:	08013549 	.word	0x08013549
 8013384:	08013549 	.word	0x08013549
 8013388:	08013549 	.word	0x08013549
 801338c:	08013549 	.word	0x08013549
 8013390:	08013549 	.word	0x08013549
 8013394:	08013549 	.word	0x08013549
 8013398:	08013549 	.word	0x08013549
 801339c:	08013549 	.word	0x08013549
 80133a0:	08013549 	.word	0x08013549
 80133a4:	08013549 	.word	0x08013549
 80133a8:	08013549 	.word	0x08013549
 80133ac:	08013549 	.word	0x08013549
 80133b0:	08013549 	.word	0x08013549
 80133b4:	08013549 	.word	0x08013549
 80133b8:	08013549 	.word	0x08013549
 80133bc:	08013549 	.word	0x08013549
 80133c0:	08013549 	.word	0x08013549
 80133c4:	08013447 	.word	0x08013447
 80133c8:	08013469 	.word	0x08013469
 80133cc:	080134a5 	.word	0x080134a5
 80133d0:	080134c7 	.word	0x080134c7
 80133d4:	08013549 	.word	0x08013549
 80133d8:	08013549 	.word	0x08013549
 80133dc:	08013549 	.word	0x08013549
 80133e0:	08013505 	.word	0x08013505
 80133e4:	08013527 	.word	0x08013527
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 80133e8:	2300      	movs	r3, #0
 80133ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80133ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80133f2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 80133f6:	e0ab      	b.n	8013550 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80133f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80133fc:	2b04      	cmp	r3, #4
 80133fe:	d009      	beq.n	8013414 <dhcp_parse_reply+0x218>
 8013400:	4b3a      	ldr	r3, [pc, #232]	; (80134ec <dhcp_parse_reply+0x2f0>)
 8013402:	f240 622e 	movw	r2, #1582	; 0x62e
 8013406:	493a      	ldr	r1, [pc, #232]	; (80134f0 <dhcp_parse_reply+0x2f4>)
 8013408:	483a      	ldr	r0, [pc, #232]	; (80134f4 <dhcp_parse_reply+0x2f8>)
 801340a:	f003 f801 	bl	8016410 <iprintf>
 801340e:	f06f 0305 	mvn.w	r3, #5
 8013412:	e1b0      	b.n	8013776 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8013414:	2306      	movs	r3, #6
 8013416:	623b      	str	r3, [r7, #32]
        break;
 8013418:	e09a      	b.n	8013550 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 801341a:	2304      	movs	r3, #4
 801341c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8013420:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8013424:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013428:	429a      	cmp	r2, r3
 801342a:	d209      	bcs.n	8013440 <dhcp_parse_reply+0x244>
 801342c:	4b2f      	ldr	r3, [pc, #188]	; (80134ec <dhcp_parse_reply+0x2f0>)
 801342e:	f240 6233 	movw	r2, #1587	; 0x633
 8013432:	4931      	ldr	r1, [pc, #196]	; (80134f8 <dhcp_parse_reply+0x2fc>)
 8013434:	482f      	ldr	r0, [pc, #188]	; (80134f4 <dhcp_parse_reply+0x2f8>)
 8013436:	f002 ffeb 	bl	8016410 <iprintf>
 801343a:	f06f 0305 	mvn.w	r3, #5
 801343e:	e19a      	b.n	8013776 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8013440:	2307      	movs	r3, #7
 8013442:	623b      	str	r3, [r7, #32]
        break;
 8013444:	e084      	b.n	8013550 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8013446:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801344a:	2b04      	cmp	r3, #4
 801344c:	d009      	beq.n	8013462 <dhcp_parse_reply+0x266>
 801344e:	4b27      	ldr	r3, [pc, #156]	; (80134ec <dhcp_parse_reply+0x2f0>)
 8013450:	f240 6241 	movw	r2, #1601	; 0x641
 8013454:	4926      	ldr	r1, [pc, #152]	; (80134f0 <dhcp_parse_reply+0x2f4>)
 8013456:	4827      	ldr	r0, [pc, #156]	; (80134f4 <dhcp_parse_reply+0x2f8>)
 8013458:	f002 ffda 	bl	8016410 <iprintf>
 801345c:	f06f 0305 	mvn.w	r3, #5
 8013460:	e189      	b.n	8013776 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8013462:	2303      	movs	r3, #3
 8013464:	623b      	str	r3, [r7, #32]
        break;
 8013466:	e073      	b.n	8013550 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8013468:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801346c:	2b01      	cmp	r3, #1
 801346e:	d009      	beq.n	8013484 <dhcp_parse_reply+0x288>
 8013470:	4b1e      	ldr	r3, [pc, #120]	; (80134ec <dhcp_parse_reply+0x2f0>)
 8013472:	f240 624f 	movw	r2, #1615	; 0x64f
 8013476:	4921      	ldr	r1, [pc, #132]	; (80134fc <dhcp_parse_reply+0x300>)
 8013478:	481e      	ldr	r0, [pc, #120]	; (80134f4 <dhcp_parse_reply+0x2f8>)
 801347a:	f002 ffc9 	bl	8016410 <iprintf>
 801347e:	f06f 0305 	mvn.w	r3, #5
 8013482:	e178      	b.n	8013776 <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8013484:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8013486:	2bf0      	cmp	r3, #240	; 0xf0
 8013488:	d009      	beq.n	801349e <dhcp_parse_reply+0x2a2>
 801348a:	4b18      	ldr	r3, [pc, #96]	; (80134ec <dhcp_parse_reply+0x2f0>)
 801348c:	f240 6251 	movw	r2, #1617	; 0x651
 8013490:	491b      	ldr	r1, [pc, #108]	; (8013500 <dhcp_parse_reply+0x304>)
 8013492:	4818      	ldr	r0, [pc, #96]	; (80134f4 <dhcp_parse_reply+0x2f8>)
 8013494:	f002 ffbc 	bl	8016410 <iprintf>
 8013498:	f06f 0305 	mvn.w	r3, #5
 801349c:	e16b      	b.n	8013776 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 801349e:	2300      	movs	r3, #0
 80134a0:	623b      	str	r3, [r7, #32]
        break;
 80134a2:	e055      	b.n	8013550 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80134a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80134a8:	2b01      	cmp	r3, #1
 80134aa:	d009      	beq.n	80134c0 <dhcp_parse_reply+0x2c4>
 80134ac:	4b0f      	ldr	r3, [pc, #60]	; (80134ec <dhcp_parse_reply+0x2f0>)
 80134ae:	f240 6255 	movw	r2, #1621	; 0x655
 80134b2:	4912      	ldr	r1, [pc, #72]	; (80134fc <dhcp_parse_reply+0x300>)
 80134b4:	480f      	ldr	r0, [pc, #60]	; (80134f4 <dhcp_parse_reply+0x2f8>)
 80134b6:	f002 ffab 	bl	8016410 <iprintf>
 80134ba:	f06f 0305 	mvn.w	r3, #5
 80134be:	e15a      	b.n	8013776 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 80134c0:	2301      	movs	r3, #1
 80134c2:	623b      	str	r3, [r7, #32]
        break;
 80134c4:	e044      	b.n	8013550 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80134c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80134ca:	2b04      	cmp	r3, #4
 80134cc:	d009      	beq.n	80134e2 <dhcp_parse_reply+0x2e6>
 80134ce:	4b07      	ldr	r3, [pc, #28]	; (80134ec <dhcp_parse_reply+0x2f0>)
 80134d0:	f240 6259 	movw	r2, #1625	; 0x659
 80134d4:	4906      	ldr	r1, [pc, #24]	; (80134f0 <dhcp_parse_reply+0x2f4>)
 80134d6:	4807      	ldr	r0, [pc, #28]	; (80134f4 <dhcp_parse_reply+0x2f8>)
 80134d8:	f002 ff9a 	bl	8016410 <iprintf>
 80134dc:	f06f 0305 	mvn.w	r3, #5
 80134e0:	e149      	b.n	8013776 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 80134e2:	2302      	movs	r3, #2
 80134e4:	623b      	str	r3, [r7, #32]
        break;
 80134e6:	e033      	b.n	8013550 <dhcp_parse_reply+0x354>
 80134e8:	2001af34 	.word	0x2001af34
 80134ec:	0801a774 	.word	0x0801a774
 80134f0:	0801a9fc 	.word	0x0801a9fc
 80134f4:	0801a7d4 	.word	0x0801a7d4
 80134f8:	0801aa08 	.word	0x0801aa08
 80134fc:	0801aa1c 	.word	0x0801aa1c
 8013500:	0801aa28 	.word	0x0801aa28
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8013504:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013508:	2b04      	cmp	r3, #4
 801350a:	d009      	beq.n	8013520 <dhcp_parse_reply+0x324>
 801350c:	4b9c      	ldr	r3, [pc, #624]	; (8013780 <dhcp_parse_reply+0x584>)
 801350e:	f240 625d 	movw	r2, #1629	; 0x65d
 8013512:	499c      	ldr	r1, [pc, #624]	; (8013784 <dhcp_parse_reply+0x588>)
 8013514:	489c      	ldr	r0, [pc, #624]	; (8013788 <dhcp_parse_reply+0x58c>)
 8013516:	f002 ff7b 	bl	8016410 <iprintf>
 801351a:	f06f 0305 	mvn.w	r3, #5
 801351e:	e12a      	b.n	8013776 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 8013520:	2304      	movs	r3, #4
 8013522:	623b      	str	r3, [r7, #32]
        break;
 8013524:	e014      	b.n	8013550 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8013526:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801352a:	2b04      	cmp	r3, #4
 801352c:	d009      	beq.n	8013542 <dhcp_parse_reply+0x346>
 801352e:	4b94      	ldr	r3, [pc, #592]	; (8013780 <dhcp_parse_reply+0x584>)
 8013530:	f240 6261 	movw	r2, #1633	; 0x661
 8013534:	4993      	ldr	r1, [pc, #588]	; (8013784 <dhcp_parse_reply+0x588>)
 8013536:	4894      	ldr	r0, [pc, #592]	; (8013788 <dhcp_parse_reply+0x58c>)
 8013538:	f002 ff6a 	bl	8016410 <iprintf>
 801353c:	f06f 0305 	mvn.w	r3, #5
 8013540:	e119      	b.n	8013776 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 8013542:	2305      	movs	r3, #5
 8013544:	623b      	str	r3, [r7, #32]
        break;
 8013546:	e003      	b.n	8013550 <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 8013548:	2300      	movs	r3, #0
 801354a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 801354e:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8013550:	7dfb      	ldrb	r3, [r7, #23]
 8013552:	2b00      	cmp	r3, #0
 8013554:	d103      	bne.n	801355e <dhcp_parse_reply+0x362>
      offset++;
 8013556:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013558:	3301      	adds	r3, #1
 801355a:	877b      	strh	r3, [r7, #58]	; 0x3a
 801355c:	e0a1      	b.n	80136a2 <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 801355e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013560:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013564:	4413      	add	r3, r2
 8013566:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 801356a:	4293      	cmp	r3, r2
 801356c:	dd02      	ble.n	8013574 <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 801356e:	f06f 0301 	mvn.w	r3, #1
 8013572:	e100      	b.n	8013776 <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 8013574:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013578:	b29a      	uxth	r2, r3
 801357a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801357c:	4413      	add	r3, r2
 801357e:	b29b      	uxth	r3, r3
 8013580:	3302      	adds	r3, #2
 8013582:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 8013584:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013588:	2b00      	cmp	r3, #0
 801358a:	f000 808a 	beq.w	80136a2 <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 801358e:	2300      	movs	r3, #0
 8013590:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8013592:	6a3b      	ldr	r3, [r7, #32]
 8013594:	2b00      	cmp	r3, #0
 8013596:	db02      	blt.n	801359e <dhcp_parse_reply+0x3a2>
 8013598:	6a3b      	ldr	r3, [r7, #32]
 801359a:	2b07      	cmp	r3, #7
 801359c:	dd06      	ble.n	80135ac <dhcp_parse_reply+0x3b0>
 801359e:	4b78      	ldr	r3, [pc, #480]	; (8013780 <dhcp_parse_reply+0x584>)
 80135a0:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 80135a4:	4979      	ldr	r1, [pc, #484]	; (801378c <dhcp_parse_reply+0x590>)
 80135a6:	4878      	ldr	r0, [pc, #480]	; (8013788 <dhcp_parse_reply+0x58c>)
 80135a8:	f002 ff32 	bl	8016410 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 80135ac:	4a78      	ldr	r2, [pc, #480]	; (8013790 <dhcp_parse_reply+0x594>)
 80135ae:	6a3b      	ldr	r3, [r7, #32]
 80135b0:	4413      	add	r3, r2
 80135b2:	781b      	ldrb	r3, [r3, #0]
 80135b4:	2b00      	cmp	r3, #0
 80135b6:	d174      	bne.n	80136a2 <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 80135b8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80135bc:	2b04      	cmp	r3, #4
 80135be:	bf28      	it	cs
 80135c0:	2304      	movcs	r3, #4
 80135c2:	b2db      	uxtb	r3, r3
 80135c4:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 80135c6:	8bfb      	ldrh	r3, [r7, #30]
 80135c8:	8aba      	ldrh	r2, [r7, #20]
 80135ca:	f107 0108 	add.w	r1, r7, #8
 80135ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80135d0:	f7f7 fc76 	bl	800aec0 <pbuf_copy_partial>
 80135d4:	4603      	mov	r3, r0
 80135d6:	461a      	mov	r2, r3
 80135d8:	8abb      	ldrh	r3, [r7, #20]
 80135da:	4293      	cmp	r3, r2
 80135dc:	d002      	beq.n	80135e4 <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 80135de:	f06f 0301 	mvn.w	r3, #1
 80135e2:	e0c8      	b.n	8013776 <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 80135e4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80135e8:	2b04      	cmp	r3, #4
 80135ea:	d933      	bls.n	8013654 <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 80135ec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80135f0:	f003 0303 	and.w	r3, r3, #3
 80135f4:	b2db      	uxtb	r3, r3
 80135f6:	2b00      	cmp	r3, #0
 80135f8:	d009      	beq.n	801360e <dhcp_parse_reply+0x412>
 80135fa:	4b61      	ldr	r3, [pc, #388]	; (8013780 <dhcp_parse_reply+0x584>)
 80135fc:	f240 6281 	movw	r2, #1665	; 0x681
 8013600:	4964      	ldr	r1, [pc, #400]	; (8013794 <dhcp_parse_reply+0x598>)
 8013602:	4861      	ldr	r0, [pc, #388]	; (8013788 <dhcp_parse_reply+0x58c>)
 8013604:	f002 ff04 	bl	8016410 <iprintf>
 8013608:	f06f 0305 	mvn.w	r3, #5
 801360c:	e0b3      	b.n	8013776 <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 801360e:	4a60      	ldr	r2, [pc, #384]	; (8013790 <dhcp_parse_reply+0x594>)
 8013610:	6a3b      	ldr	r3, [r7, #32]
 8013612:	4413      	add	r3, r2
 8013614:	2201      	movs	r2, #1
 8013616:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8013618:	68bb      	ldr	r3, [r7, #8]
 801361a:	4618      	mov	r0, r3
 801361c:	f7f5 fe7f 	bl	800931e <lwip_htonl>
 8013620:	4602      	mov	r2, r0
 8013622:	495d      	ldr	r1, [pc, #372]	; (8013798 <dhcp_parse_reply+0x59c>)
 8013624:	6a3b      	ldr	r3, [r7, #32]
 8013626:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 801362a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801362e:	3b04      	subs	r3, #4
 8013630:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8013634:	8bfb      	ldrh	r3, [r7, #30]
 8013636:	3304      	adds	r3, #4
 8013638:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 801363a:	8a7a      	ldrh	r2, [r7, #18]
 801363c:	8bfb      	ldrh	r3, [r7, #30]
 801363e:	429a      	cmp	r2, r3
 8013640:	d202      	bcs.n	8013648 <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 8013642:	f06f 0301 	mvn.w	r3, #1
 8013646:	e096      	b.n	8013776 <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 8013648:	8a7b      	ldrh	r3, [r7, #18]
 801364a:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 801364c:	6a3b      	ldr	r3, [r7, #32]
 801364e:	3301      	adds	r3, #1
 8013650:	623b      	str	r3, [r7, #32]
            goto decode_next;
 8013652:	e79e      	b.n	8013592 <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 8013654:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013658:	2b04      	cmp	r3, #4
 801365a:	d106      	bne.n	801366a <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 801365c:	68bb      	ldr	r3, [r7, #8]
 801365e:	4618      	mov	r0, r3
 8013660:	f7f5 fe5d 	bl	800931e <lwip_htonl>
 8013664:	4603      	mov	r3, r0
 8013666:	60bb      	str	r3, [r7, #8]
 8013668:	e011      	b.n	801368e <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 801366a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801366e:	2b01      	cmp	r3, #1
 8013670:	d009      	beq.n	8013686 <dhcp_parse_reply+0x48a>
 8013672:	4b43      	ldr	r3, [pc, #268]	; (8013780 <dhcp_parse_reply+0x584>)
 8013674:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8013678:	4948      	ldr	r1, [pc, #288]	; (801379c <dhcp_parse_reply+0x5a0>)
 801367a:	4843      	ldr	r0, [pc, #268]	; (8013788 <dhcp_parse_reply+0x58c>)
 801367c:	f002 fec8 	bl	8016410 <iprintf>
 8013680:	f06f 0305 	mvn.w	r3, #5
 8013684:	e077      	b.n	8013776 <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 8013686:	f107 0308 	add.w	r3, r7, #8
 801368a:	781b      	ldrb	r3, [r3, #0]
 801368c:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 801368e:	4a40      	ldr	r2, [pc, #256]	; (8013790 <dhcp_parse_reply+0x594>)
 8013690:	6a3b      	ldr	r3, [r7, #32]
 8013692:	4413      	add	r3, r2
 8013694:	2201      	movs	r2, #1
 8013696:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8013698:	68ba      	ldr	r2, [r7, #8]
 801369a:	493f      	ldr	r1, [pc, #252]	; (8013798 <dhcp_parse_reply+0x59c>)
 801369c:	6a3b      	ldr	r3, [r7, #32]
 801369e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 80136a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136a4:	895b      	ldrh	r3, [r3, #10]
 80136a6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80136a8:	429a      	cmp	r2, r3
 80136aa:	d324      	bcc.n	80136f6 <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 80136ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136ae:	895b      	ldrh	r3, [r3, #10]
 80136b0:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80136b2:	1ad3      	subs	r3, r2, r3
 80136b4:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 80136b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136b8:	895b      	ldrh	r3, [r3, #10]
 80136ba:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80136bc:	1ad3      	subs	r3, r2, r3
 80136be:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 80136c0:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80136c2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80136c4:	429a      	cmp	r2, r3
 80136c6:	d213      	bcs.n	80136f0 <dhcp_parse_reply+0x4f4>
        q = q->next;
 80136c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136ca:	681b      	ldr	r3, [r3, #0]
 80136cc:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 80136ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136d0:	2b00      	cmp	r3, #0
 80136d2:	d109      	bne.n	80136e8 <dhcp_parse_reply+0x4ec>
 80136d4:	4b2a      	ldr	r3, [pc, #168]	; (8013780 <dhcp_parse_reply+0x584>)
 80136d6:	f240 629d 	movw	r2, #1693	; 0x69d
 80136da:	4931      	ldr	r1, [pc, #196]	; (80137a0 <dhcp_parse_reply+0x5a4>)
 80136dc:	482a      	ldr	r0, [pc, #168]	; (8013788 <dhcp_parse_reply+0x58c>)
 80136de:	f002 fe97 	bl	8016410 <iprintf>
 80136e2:	f06f 0305 	mvn.w	r3, #5
 80136e6:	e046      	b.n	8013776 <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 80136e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136ea:	685b      	ldr	r3, [r3, #4]
 80136ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80136ee:	e002      	b.n	80136f6 <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 80136f0:	f06f 0301 	mvn.w	r3, #1
 80136f4:	e03f      	b.n	8013776 <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80136f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136f8:	2b00      	cmp	r3, #0
 80136fa:	d00a      	beq.n	8013712 <dhcp_parse_reply+0x516>
 80136fc:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80136fe:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8013700:	429a      	cmp	r2, r3
 8013702:	d206      	bcs.n	8013712 <dhcp_parse_reply+0x516>
 8013704:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013706:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013708:	4413      	add	r3, r2
 801370a:	781b      	ldrb	r3, [r3, #0]
 801370c:	2bff      	cmp	r3, #255	; 0xff
 801370e:	f47f adb8 	bne.w	8013282 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8013712:	4b1f      	ldr	r3, [pc, #124]	; (8013790 <dhcp_parse_reply+0x594>)
 8013714:	781b      	ldrb	r3, [r3, #0]
 8013716:	2b00      	cmp	r3, #0
 8013718:	d018      	beq.n	801374c <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801371a:	4b1f      	ldr	r3, [pc, #124]	; (8013798 <dhcp_parse_reply+0x59c>)
 801371c:	681b      	ldr	r3, [r3, #0]
 801371e:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8013720:	4b1b      	ldr	r3, [pc, #108]	; (8013790 <dhcp_parse_reply+0x594>)
 8013722:	2200      	movs	r2, #0
 8013724:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8013726:	68fb      	ldr	r3, [r7, #12]
 8013728:	2b01      	cmp	r3, #1
 801372a:	d102      	bne.n	8013732 <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 801372c:	2301      	movs	r3, #1
 801372e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013730:	e00c      	b.n	801374c <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8013732:	68fb      	ldr	r3, [r7, #12]
 8013734:	2b02      	cmp	r3, #2
 8013736:	d102      	bne.n	801373e <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 8013738:	2301      	movs	r3, #1
 801373a:	62bb      	str	r3, [r7, #40]	; 0x28
 801373c:	e006      	b.n	801374c <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 801373e:	68fb      	ldr	r3, [r7, #12]
 8013740:	2b03      	cmp	r3, #3
 8013742:	d103      	bne.n	801374c <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 8013744:	2301      	movs	r3, #1
 8013746:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 8013748:	2301      	movs	r3, #1
 801374a:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 801374c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801374e:	2b00      	cmp	r3, #0
 8013750:	d006      	beq.n	8013760 <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8013752:	2300      	movs	r3, #0
 8013754:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 8013756:	236c      	movs	r3, #108	; 0x6c
 8013758:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 801375a:	23ec      	movs	r3, #236	; 0xec
 801375c:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 801375e:	e56a      	b.n	8013236 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8013760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013762:	2b00      	cmp	r3, #0
 8013764:	d006      	beq.n	8013774 <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 8013766:	2300      	movs	r3, #0
 8013768:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 801376a:	232c      	movs	r3, #44	; 0x2c
 801376c:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 801376e:	236c      	movs	r3, #108	; 0x6c
 8013770:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 8013772:	e560      	b.n	8013236 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8013774:	2300      	movs	r3, #0
}
 8013776:	4618      	mov	r0, r3
 8013778:	3740      	adds	r7, #64	; 0x40
 801377a:	46bd      	mov	sp, r7
 801377c:	bd80      	pop	{r7, pc}
 801377e:	bf00      	nop
 8013780:	0801a774 	.word	0x0801a774
 8013784:	0801a9fc 	.word	0x0801a9fc
 8013788:	0801a7d4 	.word	0x0801a7d4
 801378c:	0801aa40 	.word	0x0801aa40
 8013790:	2001af34 	.word	0x2001af34
 8013794:	0801aa54 	.word	0x0801aa54
 8013798:	2001af14 	.word	0x2001af14
 801379c:	0801aa6c 	.word	0x0801aa6c
 80137a0:	0801aa80 	.word	0x0801aa80

080137a4 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 80137a4:	b580      	push	{r7, lr}
 80137a6:	b08a      	sub	sp, #40	; 0x28
 80137a8:	af00      	add	r7, sp, #0
 80137aa:	60f8      	str	r0, [r7, #12]
 80137ac:	60b9      	str	r1, [r7, #8]
 80137ae:	607a      	str	r2, [r7, #4]
 80137b0:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 80137b2:	4b60      	ldr	r3, [pc, #384]	; (8013934 <dhcp_recv+0x190>)
 80137b4:	685b      	ldr	r3, [r3, #4]
 80137b6:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80137b8:	6a3b      	ldr	r3, [r7, #32]
 80137ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80137bc:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 80137be:	687b      	ldr	r3, [r7, #4]
 80137c0:	685b      	ldr	r3, [r3, #4]
 80137c2:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 80137c4:	69fb      	ldr	r3, [r7, #28]
 80137c6:	2b00      	cmp	r3, #0
 80137c8:	f000 809d 	beq.w	8013906 <dhcp_recv+0x162>
 80137cc:	69fb      	ldr	r3, [r7, #28]
 80137ce:	791b      	ldrb	r3, [r3, #4]
 80137d0:	2b00      	cmp	r3, #0
 80137d2:	f000 8098 	beq.w	8013906 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 80137d6:	687b      	ldr	r3, [r7, #4]
 80137d8:	895b      	ldrh	r3, [r3, #10]
 80137da:	2b2b      	cmp	r3, #43	; 0x2b
 80137dc:	f240 8095 	bls.w	801390a <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 80137e0:	69bb      	ldr	r3, [r7, #24]
 80137e2:	781b      	ldrb	r3, [r3, #0]
 80137e4:	2b02      	cmp	r3, #2
 80137e6:	f040 8092 	bne.w	801390e <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80137ea:	2300      	movs	r3, #0
 80137ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80137f0:	e012      	b.n	8013818 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 80137f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80137f6:	6a3a      	ldr	r2, [r7, #32]
 80137f8:	4413      	add	r3, r2
 80137fa:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80137fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013802:	69b9      	ldr	r1, [r7, #24]
 8013804:	440b      	add	r3, r1
 8013806:	7f1b      	ldrb	r3, [r3, #28]
 8013808:	429a      	cmp	r2, r3
 801380a:	f040 8082 	bne.w	8013912 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801380e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013812:	3301      	adds	r3, #1
 8013814:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013818:	6a3b      	ldr	r3, [r7, #32]
 801381a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801381e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8013822:	429a      	cmp	r2, r3
 8013824:	d203      	bcs.n	801382e <dhcp_recv+0x8a>
 8013826:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801382a:	2b05      	cmp	r3, #5
 801382c:	d9e1      	bls.n	80137f2 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 801382e:	69bb      	ldr	r3, [r7, #24]
 8013830:	685b      	ldr	r3, [r3, #4]
 8013832:	4618      	mov	r0, r3
 8013834:	f7f5 fd73 	bl	800931e <lwip_htonl>
 8013838:	4602      	mov	r2, r0
 801383a:	69fb      	ldr	r3, [r7, #28]
 801383c:	681b      	ldr	r3, [r3, #0]
 801383e:	429a      	cmp	r2, r3
 8013840:	d169      	bne.n	8013916 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8013842:	69f9      	ldr	r1, [r7, #28]
 8013844:	6878      	ldr	r0, [r7, #4]
 8013846:	f7ff fcd9 	bl	80131fc <dhcp_parse_reply>
 801384a:	4603      	mov	r3, r0
 801384c:	2b00      	cmp	r3, #0
 801384e:	d164      	bne.n	801391a <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8013850:	4b39      	ldr	r3, [pc, #228]	; (8013938 <dhcp_recv+0x194>)
 8013852:	785b      	ldrb	r3, [r3, #1]
 8013854:	2b00      	cmp	r3, #0
 8013856:	d062      	beq.n	801391e <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	685b      	ldr	r3, [r3, #4]
 801385c:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 801385e:	4b37      	ldr	r3, [pc, #220]	; (801393c <dhcp_recv+0x198>)
 8013860:	685b      	ldr	r3, [r3, #4]
 8013862:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8013864:	7cfb      	ldrb	r3, [r7, #19]
 8013866:	2b05      	cmp	r3, #5
 8013868:	d12a      	bne.n	80138c0 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 801386a:	69fb      	ldr	r3, [r7, #28]
 801386c:	795b      	ldrb	r3, [r3, #5]
 801386e:	2b01      	cmp	r3, #1
 8013870:	d112      	bne.n	8013898 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 8013872:	6979      	ldr	r1, [r7, #20]
 8013874:	6a38      	ldr	r0, [r7, #32]
 8013876:	f7fe fe17 	bl	80124a8 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 801387a:	6a3b      	ldr	r3, [r7, #32]
 801387c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013880:	f003 0308 	and.w	r3, r3, #8
 8013884:	2b00      	cmp	r3, #0
 8013886:	d003      	beq.n	8013890 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8013888:	6a38      	ldr	r0, [r7, #32]
 801388a:	f7fe fb87 	bl	8011f9c <dhcp_check>
 801388e:	e049      	b.n	8013924 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8013890:	6a38      	ldr	r0, [r7, #32]
 8013892:	f7ff f867 	bl	8012964 <dhcp_bind>
 8013896:	e045      	b.n	8013924 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8013898:	69fb      	ldr	r3, [r7, #28]
 801389a:	795b      	ldrb	r3, [r3, #5]
 801389c:	2b03      	cmp	r3, #3
 801389e:	d007      	beq.n	80138b0 <dhcp_recv+0x10c>
 80138a0:	69fb      	ldr	r3, [r7, #28]
 80138a2:	795b      	ldrb	r3, [r3, #5]
 80138a4:	2b04      	cmp	r3, #4
 80138a6:	d003      	beq.n	80138b0 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 80138a8:	69fb      	ldr	r3, [r7, #28]
 80138aa:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80138ac:	2b05      	cmp	r3, #5
 80138ae:	d139      	bne.n	8013924 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 80138b0:	6979      	ldr	r1, [r7, #20]
 80138b2:	6a38      	ldr	r0, [r7, #32]
 80138b4:	f7fe fdf8 	bl	80124a8 <dhcp_handle_ack>
      dhcp_bind(netif);
 80138b8:	6a38      	ldr	r0, [r7, #32]
 80138ba:	f7ff f853 	bl	8012964 <dhcp_bind>
 80138be:	e031      	b.n	8013924 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 80138c0:	7cfb      	ldrb	r3, [r7, #19]
 80138c2:	2b06      	cmp	r3, #6
 80138c4:	d113      	bne.n	80138ee <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80138c6:	69fb      	ldr	r3, [r7, #28]
 80138c8:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 80138ca:	2b03      	cmp	r3, #3
 80138cc:	d00b      	beq.n	80138e6 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80138ce:	69fb      	ldr	r3, [r7, #28]
 80138d0:	795b      	ldrb	r3, [r3, #5]
 80138d2:	2b01      	cmp	r3, #1
 80138d4:	d007      	beq.n	80138e6 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80138d6:	69fb      	ldr	r3, [r7, #28]
 80138d8:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80138da:	2b04      	cmp	r3, #4
 80138dc:	d003      	beq.n	80138e6 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80138de:	69fb      	ldr	r3, [r7, #28]
 80138e0:	795b      	ldrb	r3, [r3, #5]
 80138e2:	2b05      	cmp	r3, #5
 80138e4:	d103      	bne.n	80138ee <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 80138e6:	6a38      	ldr	r0, [r7, #32]
 80138e8:	f7fe fb3e 	bl	8011f68 <dhcp_handle_nak>
 80138ec:	e01a      	b.n	8013924 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 80138ee:	7cfb      	ldrb	r3, [r7, #19]
 80138f0:	2b02      	cmp	r3, #2
 80138f2:	d116      	bne.n	8013922 <dhcp_recv+0x17e>
 80138f4:	69fb      	ldr	r3, [r7, #28]
 80138f6:	795b      	ldrb	r3, [r3, #5]
 80138f8:	2b06      	cmp	r3, #6
 80138fa:	d112      	bne.n	8013922 <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 80138fc:	6979      	ldr	r1, [r7, #20]
 80138fe:	6a38      	ldr	r0, [r7, #32]
 8013900:	f7fe fb80 	bl	8012004 <dhcp_handle_offer>
 8013904:	e00e      	b.n	8013924 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8013906:	bf00      	nop
 8013908:	e00c      	b.n	8013924 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801390a:	bf00      	nop
 801390c:	e00a      	b.n	8013924 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801390e:	bf00      	nop
 8013910:	e008      	b.n	8013924 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 8013912:	bf00      	nop
 8013914:	e006      	b.n	8013924 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8013916:	bf00      	nop
 8013918:	e004      	b.n	8013924 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801391a:	bf00      	nop
 801391c:	e002      	b.n	8013924 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801391e:	bf00      	nop
 8013920:	e000      	b.n	8013924 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 8013922:	bf00      	nop
  pbuf_free(p);
 8013924:	6878      	ldr	r0, [r7, #4]
 8013926:	f7f7 f8c5 	bl	800aab4 <pbuf_free>
}
 801392a:	bf00      	nop
 801392c:	3728      	adds	r7, #40	; 0x28
 801392e:	46bd      	mov	sp, r7
 8013930:	bd80      	pop	{r7, pc}
 8013932:	bf00      	nop
 8013934:	20016980 	.word	0x20016980
 8013938:	2001af34 	.word	0x2001af34
 801393c:	2001af14 	.word	0x2001af14

08013940 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8013940:	b580      	push	{r7, lr}
 8013942:	b088      	sub	sp, #32
 8013944:	af00      	add	r7, sp, #0
 8013946:	60f8      	str	r0, [r7, #12]
 8013948:	60b9      	str	r1, [r7, #8]
 801394a:	603b      	str	r3, [r7, #0]
 801394c:	4613      	mov	r3, r2
 801394e:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8013950:	68fb      	ldr	r3, [r7, #12]
 8013952:	2b00      	cmp	r3, #0
 8013954:	d108      	bne.n	8013968 <dhcp_create_msg+0x28>
 8013956:	4b5f      	ldr	r3, [pc, #380]	; (8013ad4 <dhcp_create_msg+0x194>)
 8013958:	f240 7269 	movw	r2, #1897	; 0x769
 801395c:	495e      	ldr	r1, [pc, #376]	; (8013ad8 <dhcp_create_msg+0x198>)
 801395e:	485f      	ldr	r0, [pc, #380]	; (8013adc <dhcp_create_msg+0x19c>)
 8013960:	f002 fd56 	bl	8016410 <iprintf>
 8013964:	2300      	movs	r3, #0
 8013966:	e0b1      	b.n	8013acc <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8013968:	68bb      	ldr	r3, [r7, #8]
 801396a:	2b00      	cmp	r3, #0
 801396c:	d108      	bne.n	8013980 <dhcp_create_msg+0x40>
 801396e:	4b59      	ldr	r3, [pc, #356]	; (8013ad4 <dhcp_create_msg+0x194>)
 8013970:	f240 726a 	movw	r2, #1898	; 0x76a
 8013974:	495a      	ldr	r1, [pc, #360]	; (8013ae0 <dhcp_create_msg+0x1a0>)
 8013976:	4859      	ldr	r0, [pc, #356]	; (8013adc <dhcp_create_msg+0x19c>)
 8013978:	f002 fd4a 	bl	8016410 <iprintf>
 801397c:	2300      	movs	r3, #0
 801397e:	e0a5      	b.n	8013acc <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8013980:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013984:	f44f 719a 	mov.w	r1, #308	; 0x134
 8013988:	2036      	movs	r0, #54	; 0x36
 801398a:	f7f6 fdaf 	bl	800a4ec <pbuf_alloc>
 801398e:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8013990:	69bb      	ldr	r3, [r7, #24]
 8013992:	2b00      	cmp	r3, #0
 8013994:	d101      	bne.n	801399a <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 8013996:	2300      	movs	r3, #0
 8013998:	e098      	b.n	8013acc <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 801399a:	69bb      	ldr	r3, [r7, #24]
 801399c:	895b      	ldrh	r3, [r3, #10]
 801399e:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 80139a2:	d206      	bcs.n	80139b2 <dhcp_create_msg+0x72>
 80139a4:	4b4b      	ldr	r3, [pc, #300]	; (8013ad4 <dhcp_create_msg+0x194>)
 80139a6:	f240 7271 	movw	r2, #1905	; 0x771
 80139aa:	494e      	ldr	r1, [pc, #312]	; (8013ae4 <dhcp_create_msg+0x1a4>)
 80139ac:	484b      	ldr	r0, [pc, #300]	; (8013adc <dhcp_create_msg+0x19c>)
 80139ae:	f002 fd2f 	bl	8016410 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 80139b2:	79fb      	ldrb	r3, [r7, #7]
 80139b4:	2b03      	cmp	r3, #3
 80139b6:	d103      	bne.n	80139c0 <dhcp_create_msg+0x80>
 80139b8:	68bb      	ldr	r3, [r7, #8]
 80139ba:	795b      	ldrb	r3, [r3, #5]
 80139bc:	2b03      	cmp	r3, #3
 80139be:	d10d      	bne.n	80139dc <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 80139c0:	68bb      	ldr	r3, [r7, #8]
 80139c2:	799b      	ldrb	r3, [r3, #6]
 80139c4:	2b00      	cmp	r3, #0
 80139c6:	d105      	bne.n	80139d4 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 80139c8:	f002 fdb0 	bl	801652c <rand>
 80139cc:	4603      	mov	r3, r0
 80139ce:	461a      	mov	r2, r3
 80139d0:	4b45      	ldr	r3, [pc, #276]	; (8013ae8 <dhcp_create_msg+0x1a8>)
 80139d2:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 80139d4:	4b44      	ldr	r3, [pc, #272]	; (8013ae8 <dhcp_create_msg+0x1a8>)
 80139d6:	681a      	ldr	r2, [r3, #0]
 80139d8:	68bb      	ldr	r3, [r7, #8]
 80139da:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 80139dc:	69bb      	ldr	r3, [r7, #24]
 80139de:	685b      	ldr	r3, [r3, #4]
 80139e0:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 80139e2:	f44f 729a 	mov.w	r2, #308	; 0x134
 80139e6:	2100      	movs	r1, #0
 80139e8:	6978      	ldr	r0, [r7, #20]
 80139ea:	f002 fd09 	bl	8016400 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 80139ee:	697b      	ldr	r3, [r7, #20]
 80139f0:	2201      	movs	r2, #1
 80139f2:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 80139f4:	697b      	ldr	r3, [r7, #20]
 80139f6:	2201      	movs	r2, #1
 80139f8:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 80139fa:	68fb      	ldr	r3, [r7, #12]
 80139fc:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8013a00:	697b      	ldr	r3, [r7, #20]
 8013a02:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8013a04:	68bb      	ldr	r3, [r7, #8]
 8013a06:	681b      	ldr	r3, [r3, #0]
 8013a08:	4618      	mov	r0, r3
 8013a0a:	f7f5 fc88 	bl	800931e <lwip_htonl>
 8013a0e:	4602      	mov	r2, r0
 8013a10:	697b      	ldr	r3, [r7, #20]
 8013a12:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8013a14:	79fb      	ldrb	r3, [r7, #7]
 8013a16:	2b08      	cmp	r3, #8
 8013a18:	d010      	beq.n	8013a3c <dhcp_create_msg+0xfc>
 8013a1a:	79fb      	ldrb	r3, [r7, #7]
 8013a1c:	2b04      	cmp	r3, #4
 8013a1e:	d00d      	beq.n	8013a3c <dhcp_create_msg+0xfc>
 8013a20:	79fb      	ldrb	r3, [r7, #7]
 8013a22:	2b07      	cmp	r3, #7
 8013a24:	d00a      	beq.n	8013a3c <dhcp_create_msg+0xfc>
 8013a26:	79fb      	ldrb	r3, [r7, #7]
 8013a28:	2b03      	cmp	r3, #3
 8013a2a:	d10c      	bne.n	8013a46 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8013a2c:	68bb      	ldr	r3, [r7, #8]
 8013a2e:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8013a30:	2b05      	cmp	r3, #5
 8013a32:	d003      	beq.n	8013a3c <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8013a34:	68bb      	ldr	r3, [r7, #8]
 8013a36:	795b      	ldrb	r3, [r3, #5]
 8013a38:	2b04      	cmp	r3, #4
 8013a3a:	d104      	bne.n	8013a46 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8013a3c:	68fb      	ldr	r3, [r7, #12]
 8013a3e:	3304      	adds	r3, #4
 8013a40:	681a      	ldr	r2, [r3, #0]
 8013a42:	697b      	ldr	r3, [r7, #20]
 8013a44:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8013a46:	2300      	movs	r3, #0
 8013a48:	83fb      	strh	r3, [r7, #30]
 8013a4a:	e00c      	b.n	8013a66 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8013a4c:	8bfa      	ldrh	r2, [r7, #30]
 8013a4e:	8bfb      	ldrh	r3, [r7, #30]
 8013a50:	68f9      	ldr	r1, [r7, #12]
 8013a52:	440a      	add	r2, r1
 8013a54:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 8013a58:	697a      	ldr	r2, [r7, #20]
 8013a5a:	4413      	add	r3, r2
 8013a5c:	460a      	mov	r2, r1
 8013a5e:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8013a60:	8bfb      	ldrh	r3, [r7, #30]
 8013a62:	3301      	adds	r3, #1
 8013a64:	83fb      	strh	r3, [r7, #30]
 8013a66:	8bfb      	ldrh	r3, [r7, #30]
 8013a68:	2b05      	cmp	r3, #5
 8013a6a:	d9ef      	bls.n	8013a4c <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8013a6c:	697b      	ldr	r3, [r7, #20]
 8013a6e:	2200      	movs	r2, #0
 8013a70:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8013a74:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8013a78:	2200      	movs	r2, #0
 8013a7a:	f062 027d 	orn	r2, r2, #125	; 0x7d
 8013a7e:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 8013a82:	2200      	movs	r2, #0
 8013a84:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8013a88:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8013a8c:	2200      	movs	r2, #0
 8013a8e:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8013a92:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8013a96:	697b      	ldr	r3, [r7, #20]
 8013a98:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013a9c:	2301      	movs	r3, #1
 8013a9e:	2235      	movs	r2, #53	; 0x35
 8013aa0:	2000      	movs	r0, #0
 8013aa2:	f7ff fadb 	bl	801305c <dhcp_option>
 8013aa6:	4603      	mov	r3, r0
 8013aa8:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8013aaa:	697b      	ldr	r3, [r7, #20]
 8013aac:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013ab0:	79fa      	ldrb	r2, [r7, #7]
 8013ab2:	8a7b      	ldrh	r3, [r7, #18]
 8013ab4:	4618      	mov	r0, r3
 8013ab6:	f7ff fb05 	bl	80130c4 <dhcp_option_byte>
 8013aba:	4603      	mov	r3, r0
 8013abc:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 8013abe:	683b      	ldr	r3, [r7, #0]
 8013ac0:	2b00      	cmp	r3, #0
 8013ac2:	d002      	beq.n	8013aca <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 8013ac4:	683b      	ldr	r3, [r7, #0]
 8013ac6:	8a7a      	ldrh	r2, [r7, #18]
 8013ac8:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 8013aca:	69bb      	ldr	r3, [r7, #24]
}
 8013acc:	4618      	mov	r0, r3
 8013ace:	3720      	adds	r7, #32
 8013ad0:	46bd      	mov	sp, r7
 8013ad2:	bd80      	pop	{r7, pc}
 8013ad4:	0801a774 	.word	0x0801a774
 8013ad8:	0801aa94 	.word	0x0801aa94
 8013adc:	0801a7d4 	.word	0x0801a7d4
 8013ae0:	0801aab4 	.word	0x0801aab4
 8013ae4:	0801aad4 	.word	0x0801aad4
 8013ae8:	2001af44 	.word	0x2001af44

08013aec <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8013aec:	b580      	push	{r7, lr}
 8013aee:	b084      	sub	sp, #16
 8013af0:	af00      	add	r7, sp, #0
 8013af2:	4603      	mov	r3, r0
 8013af4:	60b9      	str	r1, [r7, #8]
 8013af6:	607a      	str	r2, [r7, #4]
 8013af8:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 8013afa:	89fb      	ldrh	r3, [r7, #14]
 8013afc:	1c5a      	adds	r2, r3, #1
 8013afe:	81fa      	strh	r2, [r7, #14]
 8013b00:	461a      	mov	r2, r3
 8013b02:	68bb      	ldr	r3, [r7, #8]
 8013b04:	4413      	add	r3, r2
 8013b06:	22ff      	movs	r2, #255	; 0xff
 8013b08:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8013b0a:	e007      	b.n	8013b1c <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8013b0c:	89fb      	ldrh	r3, [r7, #14]
 8013b0e:	1c5a      	adds	r2, r3, #1
 8013b10:	81fa      	strh	r2, [r7, #14]
 8013b12:	461a      	mov	r2, r3
 8013b14:	68bb      	ldr	r3, [r7, #8]
 8013b16:	4413      	add	r3, r2
 8013b18:	2200      	movs	r2, #0
 8013b1a:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8013b1c:	89fb      	ldrh	r3, [r7, #14]
 8013b1e:	2b43      	cmp	r3, #67	; 0x43
 8013b20:	d904      	bls.n	8013b2c <dhcp_option_trailer+0x40>
 8013b22:	89fb      	ldrh	r3, [r7, #14]
 8013b24:	f003 0303 	and.w	r3, r3, #3
 8013b28:	2b00      	cmp	r3, #0
 8013b2a:	d002      	beq.n	8013b32 <dhcp_option_trailer+0x46>
 8013b2c:	89fb      	ldrh	r3, [r7, #14]
 8013b2e:	2b43      	cmp	r3, #67	; 0x43
 8013b30:	d9ec      	bls.n	8013b0c <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8013b32:	89fb      	ldrh	r3, [r7, #14]
 8013b34:	33f0      	adds	r3, #240	; 0xf0
 8013b36:	b29b      	uxth	r3, r3
 8013b38:	4619      	mov	r1, r3
 8013b3a:	6878      	ldr	r0, [r7, #4]
 8013b3c:	f7f6 fe34 	bl	800a7a8 <pbuf_realloc>
}
 8013b40:	bf00      	nop
 8013b42:	3710      	adds	r7, #16
 8013b44:	46bd      	mov	sp, r7
 8013b46:	bd80      	pop	{r7, pc}

08013b48 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8013b48:	b480      	push	{r7}
 8013b4a:	b085      	sub	sp, #20
 8013b4c:	af00      	add	r7, sp, #0
 8013b4e:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8013b50:	687b      	ldr	r3, [r7, #4]
 8013b52:	2b00      	cmp	r3, #0
 8013b54:	d017      	beq.n	8013b86 <dhcp_supplied_address+0x3e>
 8013b56:	687b      	ldr	r3, [r7, #4]
 8013b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b5a:	2b00      	cmp	r3, #0
 8013b5c:	d013      	beq.n	8013b86 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b62:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8013b64:	68fb      	ldr	r3, [r7, #12]
 8013b66:	795b      	ldrb	r3, [r3, #5]
 8013b68:	2b0a      	cmp	r3, #10
 8013b6a:	d007      	beq.n	8013b7c <dhcp_supplied_address+0x34>
 8013b6c:	68fb      	ldr	r3, [r7, #12]
 8013b6e:	795b      	ldrb	r3, [r3, #5]
 8013b70:	2b05      	cmp	r3, #5
 8013b72:	d003      	beq.n	8013b7c <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8013b74:	68fb      	ldr	r3, [r7, #12]
 8013b76:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8013b78:	2b04      	cmp	r3, #4
 8013b7a:	d101      	bne.n	8013b80 <dhcp_supplied_address+0x38>
 8013b7c:	2301      	movs	r3, #1
 8013b7e:	e000      	b.n	8013b82 <dhcp_supplied_address+0x3a>
 8013b80:	2300      	movs	r3, #0
 8013b82:	b2db      	uxtb	r3, r3
 8013b84:	e000      	b.n	8013b88 <dhcp_supplied_address+0x40>
  }
  return 0;
 8013b86:	2300      	movs	r3, #0
}
 8013b88:	4618      	mov	r0, r3
 8013b8a:	3714      	adds	r7, #20
 8013b8c:	46bd      	mov	sp, r7
 8013b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b92:	4770      	bx	lr

08013b94 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8013b94:	b580      	push	{r7, lr}
 8013b96:	b082      	sub	sp, #8
 8013b98:	af00      	add	r7, sp, #0
 8013b9a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8013b9c:	4915      	ldr	r1, [pc, #84]	; (8013bf4 <etharp_free_entry+0x60>)
 8013b9e:	687a      	ldr	r2, [r7, #4]
 8013ba0:	4613      	mov	r3, r2
 8013ba2:	005b      	lsls	r3, r3, #1
 8013ba4:	4413      	add	r3, r2
 8013ba6:	00db      	lsls	r3, r3, #3
 8013ba8:	440b      	add	r3, r1
 8013baa:	681b      	ldr	r3, [r3, #0]
 8013bac:	2b00      	cmp	r3, #0
 8013bae:	d013      	beq.n	8013bd8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8013bb0:	4910      	ldr	r1, [pc, #64]	; (8013bf4 <etharp_free_entry+0x60>)
 8013bb2:	687a      	ldr	r2, [r7, #4]
 8013bb4:	4613      	mov	r3, r2
 8013bb6:	005b      	lsls	r3, r3, #1
 8013bb8:	4413      	add	r3, r2
 8013bba:	00db      	lsls	r3, r3, #3
 8013bbc:	440b      	add	r3, r1
 8013bbe:	681b      	ldr	r3, [r3, #0]
 8013bc0:	4618      	mov	r0, r3
 8013bc2:	f7f6 ff77 	bl	800aab4 <pbuf_free>
    arp_table[i].q = NULL;
 8013bc6:	490b      	ldr	r1, [pc, #44]	; (8013bf4 <etharp_free_entry+0x60>)
 8013bc8:	687a      	ldr	r2, [r7, #4]
 8013bca:	4613      	mov	r3, r2
 8013bcc:	005b      	lsls	r3, r3, #1
 8013bce:	4413      	add	r3, r2
 8013bd0:	00db      	lsls	r3, r3, #3
 8013bd2:	440b      	add	r3, r1
 8013bd4:	2200      	movs	r2, #0
 8013bd6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8013bd8:	4906      	ldr	r1, [pc, #24]	; (8013bf4 <etharp_free_entry+0x60>)
 8013bda:	687a      	ldr	r2, [r7, #4]
 8013bdc:	4613      	mov	r3, r2
 8013bde:	005b      	lsls	r3, r3, #1
 8013be0:	4413      	add	r3, r2
 8013be2:	00db      	lsls	r3, r3, #3
 8013be4:	440b      	add	r3, r1
 8013be6:	3314      	adds	r3, #20
 8013be8:	2200      	movs	r2, #0
 8013bea:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8013bec:	bf00      	nop
 8013bee:	3708      	adds	r7, #8
 8013bf0:	46bd      	mov	sp, r7
 8013bf2:	bd80      	pop	{r7, pc}
 8013bf4:	2001af48 	.word	0x2001af48

08013bf8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8013bf8:	b580      	push	{r7, lr}
 8013bfa:	b082      	sub	sp, #8
 8013bfc:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013bfe:	2300      	movs	r3, #0
 8013c00:	607b      	str	r3, [r7, #4]
 8013c02:	e096      	b.n	8013d32 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8013c04:	494f      	ldr	r1, [pc, #316]	; (8013d44 <etharp_tmr+0x14c>)
 8013c06:	687a      	ldr	r2, [r7, #4]
 8013c08:	4613      	mov	r3, r2
 8013c0a:	005b      	lsls	r3, r3, #1
 8013c0c:	4413      	add	r3, r2
 8013c0e:	00db      	lsls	r3, r3, #3
 8013c10:	440b      	add	r3, r1
 8013c12:	3314      	adds	r3, #20
 8013c14:	781b      	ldrb	r3, [r3, #0]
 8013c16:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8013c18:	78fb      	ldrb	r3, [r7, #3]
 8013c1a:	2b00      	cmp	r3, #0
 8013c1c:	f000 8086 	beq.w	8013d2c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8013c20:	4948      	ldr	r1, [pc, #288]	; (8013d44 <etharp_tmr+0x14c>)
 8013c22:	687a      	ldr	r2, [r7, #4]
 8013c24:	4613      	mov	r3, r2
 8013c26:	005b      	lsls	r3, r3, #1
 8013c28:	4413      	add	r3, r2
 8013c2a:	00db      	lsls	r3, r3, #3
 8013c2c:	440b      	add	r3, r1
 8013c2e:	3312      	adds	r3, #18
 8013c30:	881b      	ldrh	r3, [r3, #0]
 8013c32:	3301      	adds	r3, #1
 8013c34:	b298      	uxth	r0, r3
 8013c36:	4943      	ldr	r1, [pc, #268]	; (8013d44 <etharp_tmr+0x14c>)
 8013c38:	687a      	ldr	r2, [r7, #4]
 8013c3a:	4613      	mov	r3, r2
 8013c3c:	005b      	lsls	r3, r3, #1
 8013c3e:	4413      	add	r3, r2
 8013c40:	00db      	lsls	r3, r3, #3
 8013c42:	440b      	add	r3, r1
 8013c44:	3312      	adds	r3, #18
 8013c46:	4602      	mov	r2, r0
 8013c48:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8013c4a:	493e      	ldr	r1, [pc, #248]	; (8013d44 <etharp_tmr+0x14c>)
 8013c4c:	687a      	ldr	r2, [r7, #4]
 8013c4e:	4613      	mov	r3, r2
 8013c50:	005b      	lsls	r3, r3, #1
 8013c52:	4413      	add	r3, r2
 8013c54:	00db      	lsls	r3, r3, #3
 8013c56:	440b      	add	r3, r1
 8013c58:	3312      	adds	r3, #18
 8013c5a:	881b      	ldrh	r3, [r3, #0]
 8013c5c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8013c60:	d215      	bcs.n	8013c8e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8013c62:	4938      	ldr	r1, [pc, #224]	; (8013d44 <etharp_tmr+0x14c>)
 8013c64:	687a      	ldr	r2, [r7, #4]
 8013c66:	4613      	mov	r3, r2
 8013c68:	005b      	lsls	r3, r3, #1
 8013c6a:	4413      	add	r3, r2
 8013c6c:	00db      	lsls	r3, r3, #3
 8013c6e:	440b      	add	r3, r1
 8013c70:	3314      	adds	r3, #20
 8013c72:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8013c74:	2b01      	cmp	r3, #1
 8013c76:	d10e      	bne.n	8013c96 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8013c78:	4932      	ldr	r1, [pc, #200]	; (8013d44 <etharp_tmr+0x14c>)
 8013c7a:	687a      	ldr	r2, [r7, #4]
 8013c7c:	4613      	mov	r3, r2
 8013c7e:	005b      	lsls	r3, r3, #1
 8013c80:	4413      	add	r3, r2
 8013c82:	00db      	lsls	r3, r3, #3
 8013c84:	440b      	add	r3, r1
 8013c86:	3312      	adds	r3, #18
 8013c88:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8013c8a:	2b04      	cmp	r3, #4
 8013c8c:	d903      	bls.n	8013c96 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8013c8e:	6878      	ldr	r0, [r7, #4]
 8013c90:	f7ff ff80 	bl	8013b94 <etharp_free_entry>
 8013c94:	e04a      	b.n	8013d2c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8013c96:	492b      	ldr	r1, [pc, #172]	; (8013d44 <etharp_tmr+0x14c>)
 8013c98:	687a      	ldr	r2, [r7, #4]
 8013c9a:	4613      	mov	r3, r2
 8013c9c:	005b      	lsls	r3, r3, #1
 8013c9e:	4413      	add	r3, r2
 8013ca0:	00db      	lsls	r3, r3, #3
 8013ca2:	440b      	add	r3, r1
 8013ca4:	3314      	adds	r3, #20
 8013ca6:	781b      	ldrb	r3, [r3, #0]
 8013ca8:	2b03      	cmp	r3, #3
 8013caa:	d10a      	bne.n	8013cc2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8013cac:	4925      	ldr	r1, [pc, #148]	; (8013d44 <etharp_tmr+0x14c>)
 8013cae:	687a      	ldr	r2, [r7, #4]
 8013cb0:	4613      	mov	r3, r2
 8013cb2:	005b      	lsls	r3, r3, #1
 8013cb4:	4413      	add	r3, r2
 8013cb6:	00db      	lsls	r3, r3, #3
 8013cb8:	440b      	add	r3, r1
 8013cba:	3314      	adds	r3, #20
 8013cbc:	2204      	movs	r2, #4
 8013cbe:	701a      	strb	r2, [r3, #0]
 8013cc0:	e034      	b.n	8013d2c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8013cc2:	4920      	ldr	r1, [pc, #128]	; (8013d44 <etharp_tmr+0x14c>)
 8013cc4:	687a      	ldr	r2, [r7, #4]
 8013cc6:	4613      	mov	r3, r2
 8013cc8:	005b      	lsls	r3, r3, #1
 8013cca:	4413      	add	r3, r2
 8013ccc:	00db      	lsls	r3, r3, #3
 8013cce:	440b      	add	r3, r1
 8013cd0:	3314      	adds	r3, #20
 8013cd2:	781b      	ldrb	r3, [r3, #0]
 8013cd4:	2b04      	cmp	r3, #4
 8013cd6:	d10a      	bne.n	8013cee <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8013cd8:	491a      	ldr	r1, [pc, #104]	; (8013d44 <etharp_tmr+0x14c>)
 8013cda:	687a      	ldr	r2, [r7, #4]
 8013cdc:	4613      	mov	r3, r2
 8013cde:	005b      	lsls	r3, r3, #1
 8013ce0:	4413      	add	r3, r2
 8013ce2:	00db      	lsls	r3, r3, #3
 8013ce4:	440b      	add	r3, r1
 8013ce6:	3314      	adds	r3, #20
 8013ce8:	2202      	movs	r2, #2
 8013cea:	701a      	strb	r2, [r3, #0]
 8013cec:	e01e      	b.n	8013d2c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8013cee:	4915      	ldr	r1, [pc, #84]	; (8013d44 <etharp_tmr+0x14c>)
 8013cf0:	687a      	ldr	r2, [r7, #4]
 8013cf2:	4613      	mov	r3, r2
 8013cf4:	005b      	lsls	r3, r3, #1
 8013cf6:	4413      	add	r3, r2
 8013cf8:	00db      	lsls	r3, r3, #3
 8013cfa:	440b      	add	r3, r1
 8013cfc:	3314      	adds	r3, #20
 8013cfe:	781b      	ldrb	r3, [r3, #0]
 8013d00:	2b01      	cmp	r3, #1
 8013d02:	d113      	bne.n	8013d2c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8013d04:	490f      	ldr	r1, [pc, #60]	; (8013d44 <etharp_tmr+0x14c>)
 8013d06:	687a      	ldr	r2, [r7, #4]
 8013d08:	4613      	mov	r3, r2
 8013d0a:	005b      	lsls	r3, r3, #1
 8013d0c:	4413      	add	r3, r2
 8013d0e:	00db      	lsls	r3, r3, #3
 8013d10:	440b      	add	r3, r1
 8013d12:	3308      	adds	r3, #8
 8013d14:	6818      	ldr	r0, [r3, #0]
 8013d16:	687a      	ldr	r2, [r7, #4]
 8013d18:	4613      	mov	r3, r2
 8013d1a:	005b      	lsls	r3, r3, #1
 8013d1c:	4413      	add	r3, r2
 8013d1e:	00db      	lsls	r3, r3, #3
 8013d20:	4a08      	ldr	r2, [pc, #32]	; (8013d44 <etharp_tmr+0x14c>)
 8013d22:	4413      	add	r3, r2
 8013d24:	3304      	adds	r3, #4
 8013d26:	4619      	mov	r1, r3
 8013d28:	f000 fe72 	bl	8014a10 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	3301      	adds	r3, #1
 8013d30:	607b      	str	r3, [r7, #4]
 8013d32:	687b      	ldr	r3, [r7, #4]
 8013d34:	2b09      	cmp	r3, #9
 8013d36:	f77f af65 	ble.w	8013c04 <etharp_tmr+0xc>
      }
    }
  }
}
 8013d3a:	bf00      	nop
 8013d3c:	bf00      	nop
 8013d3e:	3708      	adds	r7, #8
 8013d40:	46bd      	mov	sp, r7
 8013d42:	bd80      	pop	{r7, pc}
 8013d44:	2001af48 	.word	0x2001af48

08013d48 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8013d48:	b580      	push	{r7, lr}
 8013d4a:	b08a      	sub	sp, #40	; 0x28
 8013d4c:	af00      	add	r7, sp, #0
 8013d4e:	60f8      	str	r0, [r7, #12]
 8013d50:	460b      	mov	r3, r1
 8013d52:	607a      	str	r2, [r7, #4]
 8013d54:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8013d56:	230a      	movs	r3, #10
 8013d58:	84fb      	strh	r3, [r7, #38]	; 0x26
 8013d5a:	230a      	movs	r3, #10
 8013d5c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8013d5e:	230a      	movs	r3, #10
 8013d60:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8013d62:	2300      	movs	r3, #0
 8013d64:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8013d66:	230a      	movs	r3, #10
 8013d68:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8013d6a:	2300      	movs	r3, #0
 8013d6c:	83bb      	strh	r3, [r7, #28]
 8013d6e:	2300      	movs	r3, #0
 8013d70:	837b      	strh	r3, [r7, #26]
 8013d72:	2300      	movs	r3, #0
 8013d74:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013d76:	2300      	movs	r3, #0
 8013d78:	843b      	strh	r3, [r7, #32]
 8013d7a:	e0ae      	b.n	8013eda <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8013d7c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013d80:	49a6      	ldr	r1, [pc, #664]	; (801401c <etharp_find_entry+0x2d4>)
 8013d82:	4613      	mov	r3, r2
 8013d84:	005b      	lsls	r3, r3, #1
 8013d86:	4413      	add	r3, r2
 8013d88:	00db      	lsls	r3, r3, #3
 8013d8a:	440b      	add	r3, r1
 8013d8c:	3314      	adds	r3, #20
 8013d8e:	781b      	ldrb	r3, [r3, #0]
 8013d90:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8013d92:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8013d96:	2b0a      	cmp	r3, #10
 8013d98:	d105      	bne.n	8013da6 <etharp_find_entry+0x5e>
 8013d9a:	7dfb      	ldrb	r3, [r7, #23]
 8013d9c:	2b00      	cmp	r3, #0
 8013d9e:	d102      	bne.n	8013da6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8013da0:	8c3b      	ldrh	r3, [r7, #32]
 8013da2:	847b      	strh	r3, [r7, #34]	; 0x22
 8013da4:	e095      	b.n	8013ed2 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8013da6:	7dfb      	ldrb	r3, [r7, #23]
 8013da8:	2b00      	cmp	r3, #0
 8013daa:	f000 8092 	beq.w	8013ed2 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8013dae:	7dfb      	ldrb	r3, [r7, #23]
 8013db0:	2b01      	cmp	r3, #1
 8013db2:	d009      	beq.n	8013dc8 <etharp_find_entry+0x80>
 8013db4:	7dfb      	ldrb	r3, [r7, #23]
 8013db6:	2b01      	cmp	r3, #1
 8013db8:	d806      	bhi.n	8013dc8 <etharp_find_entry+0x80>
 8013dba:	4b99      	ldr	r3, [pc, #612]	; (8014020 <etharp_find_entry+0x2d8>)
 8013dbc:	f240 1223 	movw	r2, #291	; 0x123
 8013dc0:	4998      	ldr	r1, [pc, #608]	; (8014024 <etharp_find_entry+0x2dc>)
 8013dc2:	4899      	ldr	r0, [pc, #612]	; (8014028 <etharp_find_entry+0x2e0>)
 8013dc4:	f002 fb24 	bl	8016410 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8013dc8:	68fb      	ldr	r3, [r7, #12]
 8013dca:	2b00      	cmp	r3, #0
 8013dcc:	d020      	beq.n	8013e10 <etharp_find_entry+0xc8>
 8013dce:	68fb      	ldr	r3, [r7, #12]
 8013dd0:	6819      	ldr	r1, [r3, #0]
 8013dd2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013dd6:	4891      	ldr	r0, [pc, #580]	; (801401c <etharp_find_entry+0x2d4>)
 8013dd8:	4613      	mov	r3, r2
 8013dda:	005b      	lsls	r3, r3, #1
 8013ddc:	4413      	add	r3, r2
 8013dde:	00db      	lsls	r3, r3, #3
 8013de0:	4403      	add	r3, r0
 8013de2:	3304      	adds	r3, #4
 8013de4:	681b      	ldr	r3, [r3, #0]
 8013de6:	4299      	cmp	r1, r3
 8013de8:	d112      	bne.n	8013e10 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	2b00      	cmp	r3, #0
 8013dee:	d00c      	beq.n	8013e0a <etharp_find_entry+0xc2>
 8013df0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013df4:	4989      	ldr	r1, [pc, #548]	; (801401c <etharp_find_entry+0x2d4>)
 8013df6:	4613      	mov	r3, r2
 8013df8:	005b      	lsls	r3, r3, #1
 8013dfa:	4413      	add	r3, r2
 8013dfc:	00db      	lsls	r3, r3, #3
 8013dfe:	440b      	add	r3, r1
 8013e00:	3308      	adds	r3, #8
 8013e02:	681b      	ldr	r3, [r3, #0]
 8013e04:	687a      	ldr	r2, [r7, #4]
 8013e06:	429a      	cmp	r2, r3
 8013e08:	d102      	bne.n	8013e10 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8013e0a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013e0e:	e100      	b.n	8014012 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8013e10:	7dfb      	ldrb	r3, [r7, #23]
 8013e12:	2b01      	cmp	r3, #1
 8013e14:	d140      	bne.n	8013e98 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8013e16:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013e1a:	4980      	ldr	r1, [pc, #512]	; (801401c <etharp_find_entry+0x2d4>)
 8013e1c:	4613      	mov	r3, r2
 8013e1e:	005b      	lsls	r3, r3, #1
 8013e20:	4413      	add	r3, r2
 8013e22:	00db      	lsls	r3, r3, #3
 8013e24:	440b      	add	r3, r1
 8013e26:	681b      	ldr	r3, [r3, #0]
 8013e28:	2b00      	cmp	r3, #0
 8013e2a:	d01a      	beq.n	8013e62 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8013e2c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013e30:	497a      	ldr	r1, [pc, #488]	; (801401c <etharp_find_entry+0x2d4>)
 8013e32:	4613      	mov	r3, r2
 8013e34:	005b      	lsls	r3, r3, #1
 8013e36:	4413      	add	r3, r2
 8013e38:	00db      	lsls	r3, r3, #3
 8013e3a:	440b      	add	r3, r1
 8013e3c:	3312      	adds	r3, #18
 8013e3e:	881b      	ldrh	r3, [r3, #0]
 8013e40:	8bba      	ldrh	r2, [r7, #28]
 8013e42:	429a      	cmp	r2, r3
 8013e44:	d845      	bhi.n	8013ed2 <etharp_find_entry+0x18a>
            old_queue = i;
 8013e46:	8c3b      	ldrh	r3, [r7, #32]
 8013e48:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8013e4a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013e4e:	4973      	ldr	r1, [pc, #460]	; (801401c <etharp_find_entry+0x2d4>)
 8013e50:	4613      	mov	r3, r2
 8013e52:	005b      	lsls	r3, r3, #1
 8013e54:	4413      	add	r3, r2
 8013e56:	00db      	lsls	r3, r3, #3
 8013e58:	440b      	add	r3, r1
 8013e5a:	3312      	adds	r3, #18
 8013e5c:	881b      	ldrh	r3, [r3, #0]
 8013e5e:	83bb      	strh	r3, [r7, #28]
 8013e60:	e037      	b.n	8013ed2 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8013e62:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013e66:	496d      	ldr	r1, [pc, #436]	; (801401c <etharp_find_entry+0x2d4>)
 8013e68:	4613      	mov	r3, r2
 8013e6a:	005b      	lsls	r3, r3, #1
 8013e6c:	4413      	add	r3, r2
 8013e6e:	00db      	lsls	r3, r3, #3
 8013e70:	440b      	add	r3, r1
 8013e72:	3312      	adds	r3, #18
 8013e74:	881b      	ldrh	r3, [r3, #0]
 8013e76:	8b7a      	ldrh	r2, [r7, #26]
 8013e78:	429a      	cmp	r2, r3
 8013e7a:	d82a      	bhi.n	8013ed2 <etharp_find_entry+0x18a>
            old_pending = i;
 8013e7c:	8c3b      	ldrh	r3, [r7, #32]
 8013e7e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8013e80:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013e84:	4965      	ldr	r1, [pc, #404]	; (801401c <etharp_find_entry+0x2d4>)
 8013e86:	4613      	mov	r3, r2
 8013e88:	005b      	lsls	r3, r3, #1
 8013e8a:	4413      	add	r3, r2
 8013e8c:	00db      	lsls	r3, r3, #3
 8013e8e:	440b      	add	r3, r1
 8013e90:	3312      	adds	r3, #18
 8013e92:	881b      	ldrh	r3, [r3, #0]
 8013e94:	837b      	strh	r3, [r7, #26]
 8013e96:	e01c      	b.n	8013ed2 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8013e98:	7dfb      	ldrb	r3, [r7, #23]
 8013e9a:	2b01      	cmp	r3, #1
 8013e9c:	d919      	bls.n	8013ed2 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8013e9e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013ea2:	495e      	ldr	r1, [pc, #376]	; (801401c <etharp_find_entry+0x2d4>)
 8013ea4:	4613      	mov	r3, r2
 8013ea6:	005b      	lsls	r3, r3, #1
 8013ea8:	4413      	add	r3, r2
 8013eaa:	00db      	lsls	r3, r3, #3
 8013eac:	440b      	add	r3, r1
 8013eae:	3312      	adds	r3, #18
 8013eb0:	881b      	ldrh	r3, [r3, #0]
 8013eb2:	8b3a      	ldrh	r2, [r7, #24]
 8013eb4:	429a      	cmp	r2, r3
 8013eb6:	d80c      	bhi.n	8013ed2 <etharp_find_entry+0x18a>
            old_stable = i;
 8013eb8:	8c3b      	ldrh	r3, [r7, #32]
 8013eba:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8013ebc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013ec0:	4956      	ldr	r1, [pc, #344]	; (801401c <etharp_find_entry+0x2d4>)
 8013ec2:	4613      	mov	r3, r2
 8013ec4:	005b      	lsls	r3, r3, #1
 8013ec6:	4413      	add	r3, r2
 8013ec8:	00db      	lsls	r3, r3, #3
 8013eca:	440b      	add	r3, r1
 8013ecc:	3312      	adds	r3, #18
 8013ece:	881b      	ldrh	r3, [r3, #0]
 8013ed0:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013ed2:	8c3b      	ldrh	r3, [r7, #32]
 8013ed4:	3301      	adds	r3, #1
 8013ed6:	b29b      	uxth	r3, r3
 8013ed8:	843b      	strh	r3, [r7, #32]
 8013eda:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013ede:	2b09      	cmp	r3, #9
 8013ee0:	f77f af4c 	ble.w	8013d7c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8013ee4:	7afb      	ldrb	r3, [r7, #11]
 8013ee6:	f003 0302 	and.w	r3, r3, #2
 8013eea:	2b00      	cmp	r3, #0
 8013eec:	d108      	bne.n	8013f00 <etharp_find_entry+0x1b8>
 8013eee:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8013ef2:	2b0a      	cmp	r3, #10
 8013ef4:	d107      	bne.n	8013f06 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8013ef6:	7afb      	ldrb	r3, [r7, #11]
 8013ef8:	f003 0301 	and.w	r3, r3, #1
 8013efc:	2b00      	cmp	r3, #0
 8013efe:	d102      	bne.n	8013f06 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8013f00:	f04f 33ff 	mov.w	r3, #4294967295
 8013f04:	e085      	b.n	8014012 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8013f06:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8013f0a:	2b09      	cmp	r3, #9
 8013f0c:	dc02      	bgt.n	8013f14 <etharp_find_entry+0x1cc>
    i = empty;
 8013f0e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013f10:	843b      	strh	r3, [r7, #32]
 8013f12:	e039      	b.n	8013f88 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8013f14:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8013f18:	2b09      	cmp	r3, #9
 8013f1a:	dc14      	bgt.n	8013f46 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8013f1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013f1e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8013f20:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013f24:	493d      	ldr	r1, [pc, #244]	; (801401c <etharp_find_entry+0x2d4>)
 8013f26:	4613      	mov	r3, r2
 8013f28:	005b      	lsls	r3, r3, #1
 8013f2a:	4413      	add	r3, r2
 8013f2c:	00db      	lsls	r3, r3, #3
 8013f2e:	440b      	add	r3, r1
 8013f30:	681b      	ldr	r3, [r3, #0]
 8013f32:	2b00      	cmp	r3, #0
 8013f34:	d018      	beq.n	8013f68 <etharp_find_entry+0x220>
 8013f36:	4b3a      	ldr	r3, [pc, #232]	; (8014020 <etharp_find_entry+0x2d8>)
 8013f38:	f240 126d 	movw	r2, #365	; 0x16d
 8013f3c:	493b      	ldr	r1, [pc, #236]	; (801402c <etharp_find_entry+0x2e4>)
 8013f3e:	483a      	ldr	r0, [pc, #232]	; (8014028 <etharp_find_entry+0x2e0>)
 8013f40:	f002 fa66 	bl	8016410 <iprintf>
 8013f44:	e010      	b.n	8013f68 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8013f46:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8013f4a:	2b09      	cmp	r3, #9
 8013f4c:	dc02      	bgt.n	8013f54 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8013f4e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013f50:	843b      	strh	r3, [r7, #32]
 8013f52:	e009      	b.n	8013f68 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8013f54:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8013f58:	2b09      	cmp	r3, #9
 8013f5a:	dc02      	bgt.n	8013f62 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8013f5c:	8bfb      	ldrh	r3, [r7, #30]
 8013f5e:	843b      	strh	r3, [r7, #32]
 8013f60:	e002      	b.n	8013f68 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8013f62:	f04f 33ff 	mov.w	r3, #4294967295
 8013f66:	e054      	b.n	8014012 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8013f68:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013f6c:	2b09      	cmp	r3, #9
 8013f6e:	dd06      	ble.n	8013f7e <etharp_find_entry+0x236>
 8013f70:	4b2b      	ldr	r3, [pc, #172]	; (8014020 <etharp_find_entry+0x2d8>)
 8013f72:	f240 127f 	movw	r2, #383	; 0x17f
 8013f76:	492e      	ldr	r1, [pc, #184]	; (8014030 <etharp_find_entry+0x2e8>)
 8013f78:	482b      	ldr	r0, [pc, #172]	; (8014028 <etharp_find_entry+0x2e0>)
 8013f7a:	f002 fa49 	bl	8016410 <iprintf>
    etharp_free_entry(i);
 8013f7e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013f82:	4618      	mov	r0, r3
 8013f84:	f7ff fe06 	bl	8013b94 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8013f88:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013f8c:	2b09      	cmp	r3, #9
 8013f8e:	dd06      	ble.n	8013f9e <etharp_find_entry+0x256>
 8013f90:	4b23      	ldr	r3, [pc, #140]	; (8014020 <etharp_find_entry+0x2d8>)
 8013f92:	f240 1283 	movw	r2, #387	; 0x183
 8013f96:	4926      	ldr	r1, [pc, #152]	; (8014030 <etharp_find_entry+0x2e8>)
 8013f98:	4823      	ldr	r0, [pc, #140]	; (8014028 <etharp_find_entry+0x2e0>)
 8013f9a:	f002 fa39 	bl	8016410 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8013f9e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013fa2:	491e      	ldr	r1, [pc, #120]	; (801401c <etharp_find_entry+0x2d4>)
 8013fa4:	4613      	mov	r3, r2
 8013fa6:	005b      	lsls	r3, r3, #1
 8013fa8:	4413      	add	r3, r2
 8013faa:	00db      	lsls	r3, r3, #3
 8013fac:	440b      	add	r3, r1
 8013fae:	3314      	adds	r3, #20
 8013fb0:	781b      	ldrb	r3, [r3, #0]
 8013fb2:	2b00      	cmp	r3, #0
 8013fb4:	d006      	beq.n	8013fc4 <etharp_find_entry+0x27c>
 8013fb6:	4b1a      	ldr	r3, [pc, #104]	; (8014020 <etharp_find_entry+0x2d8>)
 8013fb8:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8013fbc:	491d      	ldr	r1, [pc, #116]	; (8014034 <etharp_find_entry+0x2ec>)
 8013fbe:	481a      	ldr	r0, [pc, #104]	; (8014028 <etharp_find_entry+0x2e0>)
 8013fc0:	f002 fa26 	bl	8016410 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8013fc4:	68fb      	ldr	r3, [r7, #12]
 8013fc6:	2b00      	cmp	r3, #0
 8013fc8:	d00b      	beq.n	8013fe2 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8013fca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013fce:	68fb      	ldr	r3, [r7, #12]
 8013fd0:	6819      	ldr	r1, [r3, #0]
 8013fd2:	4812      	ldr	r0, [pc, #72]	; (801401c <etharp_find_entry+0x2d4>)
 8013fd4:	4613      	mov	r3, r2
 8013fd6:	005b      	lsls	r3, r3, #1
 8013fd8:	4413      	add	r3, r2
 8013fda:	00db      	lsls	r3, r3, #3
 8013fdc:	4403      	add	r3, r0
 8013fde:	3304      	adds	r3, #4
 8013fe0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8013fe2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013fe6:	490d      	ldr	r1, [pc, #52]	; (801401c <etharp_find_entry+0x2d4>)
 8013fe8:	4613      	mov	r3, r2
 8013fea:	005b      	lsls	r3, r3, #1
 8013fec:	4413      	add	r3, r2
 8013fee:	00db      	lsls	r3, r3, #3
 8013ff0:	440b      	add	r3, r1
 8013ff2:	3312      	adds	r3, #18
 8013ff4:	2200      	movs	r2, #0
 8013ff6:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8013ff8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013ffc:	4907      	ldr	r1, [pc, #28]	; (801401c <etharp_find_entry+0x2d4>)
 8013ffe:	4613      	mov	r3, r2
 8014000:	005b      	lsls	r3, r3, #1
 8014002:	4413      	add	r3, r2
 8014004:	00db      	lsls	r3, r3, #3
 8014006:	440b      	add	r3, r1
 8014008:	3308      	adds	r3, #8
 801400a:	687a      	ldr	r2, [r7, #4]
 801400c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801400e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8014012:	4618      	mov	r0, r3
 8014014:	3728      	adds	r7, #40	; 0x28
 8014016:	46bd      	mov	sp, r7
 8014018:	bd80      	pop	{r7, pc}
 801401a:	bf00      	nop
 801401c:	2001af48 	.word	0x2001af48
 8014020:	0801ab14 	.word	0x0801ab14
 8014024:	0801ab4c 	.word	0x0801ab4c
 8014028:	0801ab8c 	.word	0x0801ab8c
 801402c:	0801abb4 	.word	0x0801abb4
 8014030:	0801abcc 	.word	0x0801abcc
 8014034:	0801abe0 	.word	0x0801abe0

08014038 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8014038:	b580      	push	{r7, lr}
 801403a:	b088      	sub	sp, #32
 801403c:	af02      	add	r7, sp, #8
 801403e:	60f8      	str	r0, [r7, #12]
 8014040:	60b9      	str	r1, [r7, #8]
 8014042:	607a      	str	r2, [r7, #4]
 8014044:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8014046:	68fb      	ldr	r3, [r7, #12]
 8014048:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801404c:	2b06      	cmp	r3, #6
 801404e:	d006      	beq.n	801405e <etharp_update_arp_entry+0x26>
 8014050:	4b48      	ldr	r3, [pc, #288]	; (8014174 <etharp_update_arp_entry+0x13c>)
 8014052:	f240 12a9 	movw	r2, #425	; 0x1a9
 8014056:	4948      	ldr	r1, [pc, #288]	; (8014178 <etharp_update_arp_entry+0x140>)
 8014058:	4848      	ldr	r0, [pc, #288]	; (801417c <etharp_update_arp_entry+0x144>)
 801405a:	f002 f9d9 	bl	8016410 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801405e:	68bb      	ldr	r3, [r7, #8]
 8014060:	2b00      	cmp	r3, #0
 8014062:	d012      	beq.n	801408a <etharp_update_arp_entry+0x52>
 8014064:	68bb      	ldr	r3, [r7, #8]
 8014066:	681b      	ldr	r3, [r3, #0]
 8014068:	2b00      	cmp	r3, #0
 801406a:	d00e      	beq.n	801408a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801406c:	68bb      	ldr	r3, [r7, #8]
 801406e:	681b      	ldr	r3, [r3, #0]
 8014070:	68f9      	ldr	r1, [r7, #12]
 8014072:	4618      	mov	r0, r3
 8014074:	f001 f920 	bl	80152b8 <ip4_addr_isbroadcast_u32>
 8014078:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801407a:	2b00      	cmp	r3, #0
 801407c:	d105      	bne.n	801408a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801407e:	68bb      	ldr	r3, [r7, #8]
 8014080:	681b      	ldr	r3, [r3, #0]
 8014082:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014086:	2be0      	cmp	r3, #224	; 0xe0
 8014088:	d102      	bne.n	8014090 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801408a:	f06f 030f 	mvn.w	r3, #15
 801408e:	e06c      	b.n	801416a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8014090:	78fb      	ldrb	r3, [r7, #3]
 8014092:	68fa      	ldr	r2, [r7, #12]
 8014094:	4619      	mov	r1, r3
 8014096:	68b8      	ldr	r0, [r7, #8]
 8014098:	f7ff fe56 	bl	8013d48 <etharp_find_entry>
 801409c:	4603      	mov	r3, r0
 801409e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80140a0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80140a4:	2b00      	cmp	r3, #0
 80140a6:	da02      	bge.n	80140ae <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80140a8:	8afb      	ldrh	r3, [r7, #22]
 80140aa:	b25b      	sxtb	r3, r3
 80140ac:	e05d      	b.n	801416a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80140ae:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80140b2:	4933      	ldr	r1, [pc, #204]	; (8014180 <etharp_update_arp_entry+0x148>)
 80140b4:	4613      	mov	r3, r2
 80140b6:	005b      	lsls	r3, r3, #1
 80140b8:	4413      	add	r3, r2
 80140ba:	00db      	lsls	r3, r3, #3
 80140bc:	440b      	add	r3, r1
 80140be:	3314      	adds	r3, #20
 80140c0:	2202      	movs	r2, #2
 80140c2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80140c4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80140c8:	492d      	ldr	r1, [pc, #180]	; (8014180 <etharp_update_arp_entry+0x148>)
 80140ca:	4613      	mov	r3, r2
 80140cc:	005b      	lsls	r3, r3, #1
 80140ce:	4413      	add	r3, r2
 80140d0:	00db      	lsls	r3, r3, #3
 80140d2:	440b      	add	r3, r1
 80140d4:	3308      	adds	r3, #8
 80140d6:	68fa      	ldr	r2, [r7, #12]
 80140d8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80140da:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80140de:	4613      	mov	r3, r2
 80140e0:	005b      	lsls	r3, r3, #1
 80140e2:	4413      	add	r3, r2
 80140e4:	00db      	lsls	r3, r3, #3
 80140e6:	3308      	adds	r3, #8
 80140e8:	4a25      	ldr	r2, [pc, #148]	; (8014180 <etharp_update_arp_entry+0x148>)
 80140ea:	4413      	add	r3, r2
 80140ec:	3304      	adds	r3, #4
 80140ee:	2206      	movs	r2, #6
 80140f0:	6879      	ldr	r1, [r7, #4]
 80140f2:	4618      	mov	r0, r3
 80140f4:	f002 f95c 	bl	80163b0 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80140f8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80140fc:	4920      	ldr	r1, [pc, #128]	; (8014180 <etharp_update_arp_entry+0x148>)
 80140fe:	4613      	mov	r3, r2
 8014100:	005b      	lsls	r3, r3, #1
 8014102:	4413      	add	r3, r2
 8014104:	00db      	lsls	r3, r3, #3
 8014106:	440b      	add	r3, r1
 8014108:	3312      	adds	r3, #18
 801410a:	2200      	movs	r2, #0
 801410c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801410e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014112:	491b      	ldr	r1, [pc, #108]	; (8014180 <etharp_update_arp_entry+0x148>)
 8014114:	4613      	mov	r3, r2
 8014116:	005b      	lsls	r3, r3, #1
 8014118:	4413      	add	r3, r2
 801411a:	00db      	lsls	r3, r3, #3
 801411c:	440b      	add	r3, r1
 801411e:	681b      	ldr	r3, [r3, #0]
 8014120:	2b00      	cmp	r3, #0
 8014122:	d021      	beq.n	8014168 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8014124:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014128:	4915      	ldr	r1, [pc, #84]	; (8014180 <etharp_update_arp_entry+0x148>)
 801412a:	4613      	mov	r3, r2
 801412c:	005b      	lsls	r3, r3, #1
 801412e:	4413      	add	r3, r2
 8014130:	00db      	lsls	r3, r3, #3
 8014132:	440b      	add	r3, r1
 8014134:	681b      	ldr	r3, [r3, #0]
 8014136:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8014138:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801413c:	4910      	ldr	r1, [pc, #64]	; (8014180 <etharp_update_arp_entry+0x148>)
 801413e:	4613      	mov	r3, r2
 8014140:	005b      	lsls	r3, r3, #1
 8014142:	4413      	add	r3, r2
 8014144:	00db      	lsls	r3, r3, #3
 8014146:	440b      	add	r3, r1
 8014148:	2200      	movs	r2, #0
 801414a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801414c:	68fb      	ldr	r3, [r7, #12]
 801414e:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8014152:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014156:	9300      	str	r3, [sp, #0]
 8014158:	687b      	ldr	r3, [r7, #4]
 801415a:	6939      	ldr	r1, [r7, #16]
 801415c:	68f8      	ldr	r0, [r7, #12]
 801415e:	f001 ffb9 	bl	80160d4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8014162:	6938      	ldr	r0, [r7, #16]
 8014164:	f7f6 fca6 	bl	800aab4 <pbuf_free>
  }
  return ERR_OK;
 8014168:	2300      	movs	r3, #0
}
 801416a:	4618      	mov	r0, r3
 801416c:	3718      	adds	r7, #24
 801416e:	46bd      	mov	sp, r7
 8014170:	bd80      	pop	{r7, pc}
 8014172:	bf00      	nop
 8014174:	0801ab14 	.word	0x0801ab14
 8014178:	0801ac0c 	.word	0x0801ac0c
 801417c:	0801ab8c 	.word	0x0801ab8c
 8014180:	2001af48 	.word	0x2001af48

08014184 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8014184:	b580      	push	{r7, lr}
 8014186:	b084      	sub	sp, #16
 8014188:	af00      	add	r7, sp, #0
 801418a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801418c:	2300      	movs	r3, #0
 801418e:	60fb      	str	r3, [r7, #12]
 8014190:	e01e      	b.n	80141d0 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8014192:	4913      	ldr	r1, [pc, #76]	; (80141e0 <etharp_cleanup_netif+0x5c>)
 8014194:	68fa      	ldr	r2, [r7, #12]
 8014196:	4613      	mov	r3, r2
 8014198:	005b      	lsls	r3, r3, #1
 801419a:	4413      	add	r3, r2
 801419c:	00db      	lsls	r3, r3, #3
 801419e:	440b      	add	r3, r1
 80141a0:	3314      	adds	r3, #20
 80141a2:	781b      	ldrb	r3, [r3, #0]
 80141a4:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80141a6:	7afb      	ldrb	r3, [r7, #11]
 80141a8:	2b00      	cmp	r3, #0
 80141aa:	d00e      	beq.n	80141ca <etharp_cleanup_netif+0x46>
 80141ac:	490c      	ldr	r1, [pc, #48]	; (80141e0 <etharp_cleanup_netif+0x5c>)
 80141ae:	68fa      	ldr	r2, [r7, #12]
 80141b0:	4613      	mov	r3, r2
 80141b2:	005b      	lsls	r3, r3, #1
 80141b4:	4413      	add	r3, r2
 80141b6:	00db      	lsls	r3, r3, #3
 80141b8:	440b      	add	r3, r1
 80141ba:	3308      	adds	r3, #8
 80141bc:	681b      	ldr	r3, [r3, #0]
 80141be:	687a      	ldr	r2, [r7, #4]
 80141c0:	429a      	cmp	r2, r3
 80141c2:	d102      	bne.n	80141ca <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80141c4:	68f8      	ldr	r0, [r7, #12]
 80141c6:	f7ff fce5 	bl	8013b94 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80141ca:	68fb      	ldr	r3, [r7, #12]
 80141cc:	3301      	adds	r3, #1
 80141ce:	60fb      	str	r3, [r7, #12]
 80141d0:	68fb      	ldr	r3, [r7, #12]
 80141d2:	2b09      	cmp	r3, #9
 80141d4:	dddd      	ble.n	8014192 <etharp_cleanup_netif+0xe>
    }
  }
}
 80141d6:	bf00      	nop
 80141d8:	bf00      	nop
 80141da:	3710      	adds	r7, #16
 80141dc:	46bd      	mov	sp, r7
 80141de:	bd80      	pop	{r7, pc}
 80141e0:	2001af48 	.word	0x2001af48

080141e4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80141e4:	b5b0      	push	{r4, r5, r7, lr}
 80141e6:	b08a      	sub	sp, #40	; 0x28
 80141e8:	af04      	add	r7, sp, #16
 80141ea:	6078      	str	r0, [r7, #4]
 80141ec:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80141ee:	683b      	ldr	r3, [r7, #0]
 80141f0:	2b00      	cmp	r3, #0
 80141f2:	d107      	bne.n	8014204 <etharp_input+0x20>
 80141f4:	4b3f      	ldr	r3, [pc, #252]	; (80142f4 <etharp_input+0x110>)
 80141f6:	f240 228a 	movw	r2, #650	; 0x28a
 80141fa:	493f      	ldr	r1, [pc, #252]	; (80142f8 <etharp_input+0x114>)
 80141fc:	483f      	ldr	r0, [pc, #252]	; (80142fc <etharp_input+0x118>)
 80141fe:	f002 f907 	bl	8016410 <iprintf>
 8014202:	e074      	b.n	80142ee <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	685b      	ldr	r3, [r3, #4]
 8014208:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801420a:	693b      	ldr	r3, [r7, #16]
 801420c:	881b      	ldrh	r3, [r3, #0]
 801420e:	b29b      	uxth	r3, r3
 8014210:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014214:	d10c      	bne.n	8014230 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8014216:	693b      	ldr	r3, [r7, #16]
 8014218:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801421a:	2b06      	cmp	r3, #6
 801421c:	d108      	bne.n	8014230 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801421e:	693b      	ldr	r3, [r7, #16]
 8014220:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8014222:	2b04      	cmp	r3, #4
 8014224:	d104      	bne.n	8014230 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8014226:	693b      	ldr	r3, [r7, #16]
 8014228:	885b      	ldrh	r3, [r3, #2]
 801422a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801422c:	2b08      	cmp	r3, #8
 801422e:	d003      	beq.n	8014238 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8014230:	6878      	ldr	r0, [r7, #4]
 8014232:	f7f6 fc3f 	bl	800aab4 <pbuf_free>
    return;
 8014236:	e05a      	b.n	80142ee <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8014238:	693b      	ldr	r3, [r7, #16]
 801423a:	330e      	adds	r3, #14
 801423c:	681b      	ldr	r3, [r3, #0]
 801423e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8014240:	693b      	ldr	r3, [r7, #16]
 8014242:	3318      	adds	r3, #24
 8014244:	681b      	ldr	r3, [r3, #0]
 8014246:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014248:	683b      	ldr	r3, [r7, #0]
 801424a:	3304      	adds	r3, #4
 801424c:	681b      	ldr	r3, [r3, #0]
 801424e:	2b00      	cmp	r3, #0
 8014250:	d102      	bne.n	8014258 <etharp_input+0x74>
    for_us = 0;
 8014252:	2300      	movs	r3, #0
 8014254:	75fb      	strb	r3, [r7, #23]
 8014256:	e009      	b.n	801426c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8014258:	68ba      	ldr	r2, [r7, #8]
 801425a:	683b      	ldr	r3, [r7, #0]
 801425c:	3304      	adds	r3, #4
 801425e:	681b      	ldr	r3, [r3, #0]
 8014260:	429a      	cmp	r2, r3
 8014262:	bf0c      	ite	eq
 8014264:	2301      	moveq	r3, #1
 8014266:	2300      	movne	r3, #0
 8014268:	b2db      	uxtb	r3, r3
 801426a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801426c:	693b      	ldr	r3, [r7, #16]
 801426e:	f103 0208 	add.w	r2, r3, #8
 8014272:	7dfb      	ldrb	r3, [r7, #23]
 8014274:	2b00      	cmp	r3, #0
 8014276:	d001      	beq.n	801427c <etharp_input+0x98>
 8014278:	2301      	movs	r3, #1
 801427a:	e000      	b.n	801427e <etharp_input+0x9a>
 801427c:	2302      	movs	r3, #2
 801427e:	f107 010c 	add.w	r1, r7, #12
 8014282:	6838      	ldr	r0, [r7, #0]
 8014284:	f7ff fed8 	bl	8014038 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8014288:	693b      	ldr	r3, [r7, #16]
 801428a:	88db      	ldrh	r3, [r3, #6]
 801428c:	b29b      	uxth	r3, r3
 801428e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014292:	d003      	beq.n	801429c <etharp_input+0xb8>
 8014294:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014298:	d01e      	beq.n	80142d8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801429a:	e025      	b.n	80142e8 <etharp_input+0x104>
      if (for_us) {
 801429c:	7dfb      	ldrb	r3, [r7, #23]
 801429e:	2b00      	cmp	r3, #0
 80142a0:	d021      	beq.n	80142e6 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80142a2:	683b      	ldr	r3, [r7, #0]
 80142a4:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 80142a8:	693b      	ldr	r3, [r7, #16]
 80142aa:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80142ae:	683b      	ldr	r3, [r7, #0]
 80142b0:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 80142b4:	683b      	ldr	r3, [r7, #0]
 80142b6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80142b8:	693a      	ldr	r2, [r7, #16]
 80142ba:	3208      	adds	r2, #8
        etharp_raw(netif,
 80142bc:	2102      	movs	r1, #2
 80142be:	9103      	str	r1, [sp, #12]
 80142c0:	f107 010c 	add.w	r1, r7, #12
 80142c4:	9102      	str	r1, [sp, #8]
 80142c6:	9201      	str	r2, [sp, #4]
 80142c8:	9300      	str	r3, [sp, #0]
 80142ca:	462b      	mov	r3, r5
 80142cc:	4622      	mov	r2, r4
 80142ce:	4601      	mov	r1, r0
 80142d0:	6838      	ldr	r0, [r7, #0]
 80142d2:	f000 faef 	bl	80148b4 <etharp_raw>
      break;
 80142d6:	e006      	b.n	80142e6 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 80142d8:	f107 030c 	add.w	r3, r7, #12
 80142dc:	4619      	mov	r1, r3
 80142de:	6838      	ldr	r0, [r7, #0]
 80142e0:	f7fe f9fc 	bl	80126dc <dhcp_arp_reply>
      break;
 80142e4:	e000      	b.n	80142e8 <etharp_input+0x104>
      break;
 80142e6:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80142e8:	6878      	ldr	r0, [r7, #4]
 80142ea:	f7f6 fbe3 	bl	800aab4 <pbuf_free>
}
 80142ee:	3718      	adds	r7, #24
 80142f0:	46bd      	mov	sp, r7
 80142f2:	bdb0      	pop	{r4, r5, r7, pc}
 80142f4:	0801ab14 	.word	0x0801ab14
 80142f8:	0801ac64 	.word	0x0801ac64
 80142fc:	0801ab8c 	.word	0x0801ab8c

08014300 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8014300:	b580      	push	{r7, lr}
 8014302:	b086      	sub	sp, #24
 8014304:	af02      	add	r7, sp, #8
 8014306:	60f8      	str	r0, [r7, #12]
 8014308:	60b9      	str	r1, [r7, #8]
 801430a:	4613      	mov	r3, r2
 801430c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801430e:	79fa      	ldrb	r2, [r7, #7]
 8014310:	4944      	ldr	r1, [pc, #272]	; (8014424 <etharp_output_to_arp_index+0x124>)
 8014312:	4613      	mov	r3, r2
 8014314:	005b      	lsls	r3, r3, #1
 8014316:	4413      	add	r3, r2
 8014318:	00db      	lsls	r3, r3, #3
 801431a:	440b      	add	r3, r1
 801431c:	3314      	adds	r3, #20
 801431e:	781b      	ldrb	r3, [r3, #0]
 8014320:	2b01      	cmp	r3, #1
 8014322:	d806      	bhi.n	8014332 <etharp_output_to_arp_index+0x32>
 8014324:	4b40      	ldr	r3, [pc, #256]	; (8014428 <etharp_output_to_arp_index+0x128>)
 8014326:	f240 22ee 	movw	r2, #750	; 0x2ee
 801432a:	4940      	ldr	r1, [pc, #256]	; (801442c <etharp_output_to_arp_index+0x12c>)
 801432c:	4840      	ldr	r0, [pc, #256]	; (8014430 <etharp_output_to_arp_index+0x130>)
 801432e:	f002 f86f 	bl	8016410 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8014332:	79fa      	ldrb	r2, [r7, #7]
 8014334:	493b      	ldr	r1, [pc, #236]	; (8014424 <etharp_output_to_arp_index+0x124>)
 8014336:	4613      	mov	r3, r2
 8014338:	005b      	lsls	r3, r3, #1
 801433a:	4413      	add	r3, r2
 801433c:	00db      	lsls	r3, r3, #3
 801433e:	440b      	add	r3, r1
 8014340:	3314      	adds	r3, #20
 8014342:	781b      	ldrb	r3, [r3, #0]
 8014344:	2b02      	cmp	r3, #2
 8014346:	d153      	bne.n	80143f0 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8014348:	79fa      	ldrb	r2, [r7, #7]
 801434a:	4936      	ldr	r1, [pc, #216]	; (8014424 <etharp_output_to_arp_index+0x124>)
 801434c:	4613      	mov	r3, r2
 801434e:	005b      	lsls	r3, r3, #1
 8014350:	4413      	add	r3, r2
 8014352:	00db      	lsls	r3, r3, #3
 8014354:	440b      	add	r3, r1
 8014356:	3312      	adds	r3, #18
 8014358:	881b      	ldrh	r3, [r3, #0]
 801435a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801435e:	d919      	bls.n	8014394 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8014360:	79fa      	ldrb	r2, [r7, #7]
 8014362:	4613      	mov	r3, r2
 8014364:	005b      	lsls	r3, r3, #1
 8014366:	4413      	add	r3, r2
 8014368:	00db      	lsls	r3, r3, #3
 801436a:	4a2e      	ldr	r2, [pc, #184]	; (8014424 <etharp_output_to_arp_index+0x124>)
 801436c:	4413      	add	r3, r2
 801436e:	3304      	adds	r3, #4
 8014370:	4619      	mov	r1, r3
 8014372:	68f8      	ldr	r0, [r7, #12]
 8014374:	f000 fb4c 	bl	8014a10 <etharp_request>
 8014378:	4603      	mov	r3, r0
 801437a:	2b00      	cmp	r3, #0
 801437c:	d138      	bne.n	80143f0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801437e:	79fa      	ldrb	r2, [r7, #7]
 8014380:	4928      	ldr	r1, [pc, #160]	; (8014424 <etharp_output_to_arp_index+0x124>)
 8014382:	4613      	mov	r3, r2
 8014384:	005b      	lsls	r3, r3, #1
 8014386:	4413      	add	r3, r2
 8014388:	00db      	lsls	r3, r3, #3
 801438a:	440b      	add	r3, r1
 801438c:	3314      	adds	r3, #20
 801438e:	2203      	movs	r2, #3
 8014390:	701a      	strb	r2, [r3, #0]
 8014392:	e02d      	b.n	80143f0 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8014394:	79fa      	ldrb	r2, [r7, #7]
 8014396:	4923      	ldr	r1, [pc, #140]	; (8014424 <etharp_output_to_arp_index+0x124>)
 8014398:	4613      	mov	r3, r2
 801439a:	005b      	lsls	r3, r3, #1
 801439c:	4413      	add	r3, r2
 801439e:	00db      	lsls	r3, r3, #3
 80143a0:	440b      	add	r3, r1
 80143a2:	3312      	adds	r3, #18
 80143a4:	881b      	ldrh	r3, [r3, #0]
 80143a6:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80143aa:	d321      	bcc.n	80143f0 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80143ac:	79fa      	ldrb	r2, [r7, #7]
 80143ae:	4613      	mov	r3, r2
 80143b0:	005b      	lsls	r3, r3, #1
 80143b2:	4413      	add	r3, r2
 80143b4:	00db      	lsls	r3, r3, #3
 80143b6:	4a1b      	ldr	r2, [pc, #108]	; (8014424 <etharp_output_to_arp_index+0x124>)
 80143b8:	4413      	add	r3, r2
 80143ba:	1d19      	adds	r1, r3, #4
 80143bc:	79fa      	ldrb	r2, [r7, #7]
 80143be:	4613      	mov	r3, r2
 80143c0:	005b      	lsls	r3, r3, #1
 80143c2:	4413      	add	r3, r2
 80143c4:	00db      	lsls	r3, r3, #3
 80143c6:	3308      	adds	r3, #8
 80143c8:	4a16      	ldr	r2, [pc, #88]	; (8014424 <etharp_output_to_arp_index+0x124>)
 80143ca:	4413      	add	r3, r2
 80143cc:	3304      	adds	r3, #4
 80143ce:	461a      	mov	r2, r3
 80143d0:	68f8      	ldr	r0, [r7, #12]
 80143d2:	f000 fafb 	bl	80149cc <etharp_request_dst>
 80143d6:	4603      	mov	r3, r0
 80143d8:	2b00      	cmp	r3, #0
 80143da:	d109      	bne.n	80143f0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80143dc:	79fa      	ldrb	r2, [r7, #7]
 80143de:	4911      	ldr	r1, [pc, #68]	; (8014424 <etharp_output_to_arp_index+0x124>)
 80143e0:	4613      	mov	r3, r2
 80143e2:	005b      	lsls	r3, r3, #1
 80143e4:	4413      	add	r3, r2
 80143e6:	00db      	lsls	r3, r3, #3
 80143e8:	440b      	add	r3, r1
 80143ea:	3314      	adds	r3, #20
 80143ec:	2203      	movs	r2, #3
 80143ee:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80143f0:	68fb      	ldr	r3, [r7, #12]
 80143f2:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 80143f6:	79fa      	ldrb	r2, [r7, #7]
 80143f8:	4613      	mov	r3, r2
 80143fa:	005b      	lsls	r3, r3, #1
 80143fc:	4413      	add	r3, r2
 80143fe:	00db      	lsls	r3, r3, #3
 8014400:	3308      	adds	r3, #8
 8014402:	4a08      	ldr	r2, [pc, #32]	; (8014424 <etharp_output_to_arp_index+0x124>)
 8014404:	4413      	add	r3, r2
 8014406:	3304      	adds	r3, #4
 8014408:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801440c:	9200      	str	r2, [sp, #0]
 801440e:	460a      	mov	r2, r1
 8014410:	68b9      	ldr	r1, [r7, #8]
 8014412:	68f8      	ldr	r0, [r7, #12]
 8014414:	f001 fe5e 	bl	80160d4 <ethernet_output>
 8014418:	4603      	mov	r3, r0
}
 801441a:	4618      	mov	r0, r3
 801441c:	3710      	adds	r7, #16
 801441e:	46bd      	mov	sp, r7
 8014420:	bd80      	pop	{r7, pc}
 8014422:	bf00      	nop
 8014424:	2001af48 	.word	0x2001af48
 8014428:	0801ab14 	.word	0x0801ab14
 801442c:	0801ac84 	.word	0x0801ac84
 8014430:	0801ab8c 	.word	0x0801ab8c

08014434 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8014434:	b580      	push	{r7, lr}
 8014436:	b08a      	sub	sp, #40	; 0x28
 8014438:	af02      	add	r7, sp, #8
 801443a:	60f8      	str	r0, [r7, #12]
 801443c:	60b9      	str	r1, [r7, #8]
 801443e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8014440:	687b      	ldr	r3, [r7, #4]
 8014442:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014444:	68fb      	ldr	r3, [r7, #12]
 8014446:	2b00      	cmp	r3, #0
 8014448:	d106      	bne.n	8014458 <etharp_output+0x24>
 801444a:	4b73      	ldr	r3, [pc, #460]	; (8014618 <etharp_output+0x1e4>)
 801444c:	f240 321e 	movw	r2, #798	; 0x31e
 8014450:	4972      	ldr	r1, [pc, #456]	; (801461c <etharp_output+0x1e8>)
 8014452:	4873      	ldr	r0, [pc, #460]	; (8014620 <etharp_output+0x1ec>)
 8014454:	f001 ffdc 	bl	8016410 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8014458:	68bb      	ldr	r3, [r7, #8]
 801445a:	2b00      	cmp	r3, #0
 801445c:	d106      	bne.n	801446c <etharp_output+0x38>
 801445e:	4b6e      	ldr	r3, [pc, #440]	; (8014618 <etharp_output+0x1e4>)
 8014460:	f240 321f 	movw	r2, #799	; 0x31f
 8014464:	496f      	ldr	r1, [pc, #444]	; (8014624 <etharp_output+0x1f0>)
 8014466:	486e      	ldr	r0, [pc, #440]	; (8014620 <etharp_output+0x1ec>)
 8014468:	f001 ffd2 	bl	8016410 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801446c:	687b      	ldr	r3, [r7, #4]
 801446e:	2b00      	cmp	r3, #0
 8014470:	d106      	bne.n	8014480 <etharp_output+0x4c>
 8014472:	4b69      	ldr	r3, [pc, #420]	; (8014618 <etharp_output+0x1e4>)
 8014474:	f44f 7248 	mov.w	r2, #800	; 0x320
 8014478:	496b      	ldr	r1, [pc, #428]	; (8014628 <etharp_output+0x1f4>)
 801447a:	4869      	ldr	r0, [pc, #420]	; (8014620 <etharp_output+0x1ec>)
 801447c:	f001 ffc8 	bl	8016410 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8014480:	687b      	ldr	r3, [r7, #4]
 8014482:	681b      	ldr	r3, [r3, #0]
 8014484:	68f9      	ldr	r1, [r7, #12]
 8014486:	4618      	mov	r0, r3
 8014488:	f000 ff16 	bl	80152b8 <ip4_addr_isbroadcast_u32>
 801448c:	4603      	mov	r3, r0
 801448e:	2b00      	cmp	r3, #0
 8014490:	d002      	beq.n	8014498 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8014492:	4b66      	ldr	r3, [pc, #408]	; (801462c <etharp_output+0x1f8>)
 8014494:	61fb      	str	r3, [r7, #28]
 8014496:	e0af      	b.n	80145f8 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8014498:	687b      	ldr	r3, [r7, #4]
 801449a:	681b      	ldr	r3, [r3, #0]
 801449c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80144a0:	2be0      	cmp	r3, #224	; 0xe0
 80144a2:	d118      	bne.n	80144d6 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80144a4:	2301      	movs	r3, #1
 80144a6:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80144a8:	2300      	movs	r3, #0
 80144aa:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80144ac:	235e      	movs	r3, #94	; 0x5e
 80144ae:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80144b0:	687b      	ldr	r3, [r7, #4]
 80144b2:	3301      	adds	r3, #1
 80144b4:	781b      	ldrb	r3, [r3, #0]
 80144b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80144ba:	b2db      	uxtb	r3, r3
 80144bc:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80144be:	687b      	ldr	r3, [r7, #4]
 80144c0:	3302      	adds	r3, #2
 80144c2:	781b      	ldrb	r3, [r3, #0]
 80144c4:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80144c6:	687b      	ldr	r3, [r7, #4]
 80144c8:	3303      	adds	r3, #3
 80144ca:	781b      	ldrb	r3, [r3, #0]
 80144cc:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80144ce:	f107 0310 	add.w	r3, r7, #16
 80144d2:	61fb      	str	r3, [r7, #28]
 80144d4:	e090      	b.n	80145f8 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80144d6:	687b      	ldr	r3, [r7, #4]
 80144d8:	681a      	ldr	r2, [r3, #0]
 80144da:	68fb      	ldr	r3, [r7, #12]
 80144dc:	3304      	adds	r3, #4
 80144de:	681b      	ldr	r3, [r3, #0]
 80144e0:	405a      	eors	r2, r3
 80144e2:	68fb      	ldr	r3, [r7, #12]
 80144e4:	3308      	adds	r3, #8
 80144e6:	681b      	ldr	r3, [r3, #0]
 80144e8:	4013      	ands	r3, r2
 80144ea:	2b00      	cmp	r3, #0
 80144ec:	d012      	beq.n	8014514 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80144ee:	687b      	ldr	r3, [r7, #4]
 80144f0:	681b      	ldr	r3, [r3, #0]
 80144f2:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80144f4:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80144f8:	4293      	cmp	r3, r2
 80144fa:	d00b      	beq.n	8014514 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80144fc:	68fb      	ldr	r3, [r7, #12]
 80144fe:	330c      	adds	r3, #12
 8014500:	681b      	ldr	r3, [r3, #0]
 8014502:	2b00      	cmp	r3, #0
 8014504:	d003      	beq.n	801450e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8014506:	68fb      	ldr	r3, [r7, #12]
 8014508:	330c      	adds	r3, #12
 801450a:	61bb      	str	r3, [r7, #24]
 801450c:	e002      	b.n	8014514 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801450e:	f06f 0303 	mvn.w	r3, #3
 8014512:	e07d      	b.n	8014610 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014514:	4b46      	ldr	r3, [pc, #280]	; (8014630 <etharp_output+0x1fc>)
 8014516:	781b      	ldrb	r3, [r3, #0]
 8014518:	4619      	mov	r1, r3
 801451a:	4a46      	ldr	r2, [pc, #280]	; (8014634 <etharp_output+0x200>)
 801451c:	460b      	mov	r3, r1
 801451e:	005b      	lsls	r3, r3, #1
 8014520:	440b      	add	r3, r1
 8014522:	00db      	lsls	r3, r3, #3
 8014524:	4413      	add	r3, r2
 8014526:	3314      	adds	r3, #20
 8014528:	781b      	ldrb	r3, [r3, #0]
 801452a:	2b01      	cmp	r3, #1
 801452c:	d925      	bls.n	801457a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801452e:	4b40      	ldr	r3, [pc, #256]	; (8014630 <etharp_output+0x1fc>)
 8014530:	781b      	ldrb	r3, [r3, #0]
 8014532:	4619      	mov	r1, r3
 8014534:	4a3f      	ldr	r2, [pc, #252]	; (8014634 <etharp_output+0x200>)
 8014536:	460b      	mov	r3, r1
 8014538:	005b      	lsls	r3, r3, #1
 801453a:	440b      	add	r3, r1
 801453c:	00db      	lsls	r3, r3, #3
 801453e:	4413      	add	r3, r2
 8014540:	3308      	adds	r3, #8
 8014542:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014544:	68fa      	ldr	r2, [r7, #12]
 8014546:	429a      	cmp	r2, r3
 8014548:	d117      	bne.n	801457a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801454a:	69bb      	ldr	r3, [r7, #24]
 801454c:	681a      	ldr	r2, [r3, #0]
 801454e:	4b38      	ldr	r3, [pc, #224]	; (8014630 <etharp_output+0x1fc>)
 8014550:	781b      	ldrb	r3, [r3, #0]
 8014552:	4618      	mov	r0, r3
 8014554:	4937      	ldr	r1, [pc, #220]	; (8014634 <etharp_output+0x200>)
 8014556:	4603      	mov	r3, r0
 8014558:	005b      	lsls	r3, r3, #1
 801455a:	4403      	add	r3, r0
 801455c:	00db      	lsls	r3, r3, #3
 801455e:	440b      	add	r3, r1
 8014560:	3304      	adds	r3, #4
 8014562:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8014564:	429a      	cmp	r2, r3
 8014566:	d108      	bne.n	801457a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8014568:	4b31      	ldr	r3, [pc, #196]	; (8014630 <etharp_output+0x1fc>)
 801456a:	781b      	ldrb	r3, [r3, #0]
 801456c:	461a      	mov	r2, r3
 801456e:	68b9      	ldr	r1, [r7, #8]
 8014570:	68f8      	ldr	r0, [r7, #12]
 8014572:	f7ff fec5 	bl	8014300 <etharp_output_to_arp_index>
 8014576:	4603      	mov	r3, r0
 8014578:	e04a      	b.n	8014610 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801457a:	2300      	movs	r3, #0
 801457c:	75fb      	strb	r3, [r7, #23]
 801457e:	e031      	b.n	80145e4 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014580:	7dfa      	ldrb	r2, [r7, #23]
 8014582:	492c      	ldr	r1, [pc, #176]	; (8014634 <etharp_output+0x200>)
 8014584:	4613      	mov	r3, r2
 8014586:	005b      	lsls	r3, r3, #1
 8014588:	4413      	add	r3, r2
 801458a:	00db      	lsls	r3, r3, #3
 801458c:	440b      	add	r3, r1
 801458e:	3314      	adds	r3, #20
 8014590:	781b      	ldrb	r3, [r3, #0]
 8014592:	2b01      	cmp	r3, #1
 8014594:	d923      	bls.n	80145de <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8014596:	7dfa      	ldrb	r2, [r7, #23]
 8014598:	4926      	ldr	r1, [pc, #152]	; (8014634 <etharp_output+0x200>)
 801459a:	4613      	mov	r3, r2
 801459c:	005b      	lsls	r3, r3, #1
 801459e:	4413      	add	r3, r2
 80145a0:	00db      	lsls	r3, r3, #3
 80145a2:	440b      	add	r3, r1
 80145a4:	3308      	adds	r3, #8
 80145a6:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80145a8:	68fa      	ldr	r2, [r7, #12]
 80145aa:	429a      	cmp	r2, r3
 80145ac:	d117      	bne.n	80145de <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80145ae:	69bb      	ldr	r3, [r7, #24]
 80145b0:	6819      	ldr	r1, [r3, #0]
 80145b2:	7dfa      	ldrb	r2, [r7, #23]
 80145b4:	481f      	ldr	r0, [pc, #124]	; (8014634 <etharp_output+0x200>)
 80145b6:	4613      	mov	r3, r2
 80145b8:	005b      	lsls	r3, r3, #1
 80145ba:	4413      	add	r3, r2
 80145bc:	00db      	lsls	r3, r3, #3
 80145be:	4403      	add	r3, r0
 80145c0:	3304      	adds	r3, #4
 80145c2:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80145c4:	4299      	cmp	r1, r3
 80145c6:	d10a      	bne.n	80145de <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80145c8:	4a19      	ldr	r2, [pc, #100]	; (8014630 <etharp_output+0x1fc>)
 80145ca:	7dfb      	ldrb	r3, [r7, #23]
 80145cc:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80145ce:	7dfb      	ldrb	r3, [r7, #23]
 80145d0:	461a      	mov	r2, r3
 80145d2:	68b9      	ldr	r1, [r7, #8]
 80145d4:	68f8      	ldr	r0, [r7, #12]
 80145d6:	f7ff fe93 	bl	8014300 <etharp_output_to_arp_index>
 80145da:	4603      	mov	r3, r0
 80145dc:	e018      	b.n	8014610 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80145de:	7dfb      	ldrb	r3, [r7, #23]
 80145e0:	3301      	adds	r3, #1
 80145e2:	75fb      	strb	r3, [r7, #23]
 80145e4:	7dfb      	ldrb	r3, [r7, #23]
 80145e6:	2b09      	cmp	r3, #9
 80145e8:	d9ca      	bls.n	8014580 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80145ea:	68ba      	ldr	r2, [r7, #8]
 80145ec:	69b9      	ldr	r1, [r7, #24]
 80145ee:	68f8      	ldr	r0, [r7, #12]
 80145f0:	f000 f822 	bl	8014638 <etharp_query>
 80145f4:	4603      	mov	r3, r0
 80145f6:	e00b      	b.n	8014610 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80145f8:	68fb      	ldr	r3, [r7, #12]
 80145fa:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 80145fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014602:	9300      	str	r3, [sp, #0]
 8014604:	69fb      	ldr	r3, [r7, #28]
 8014606:	68b9      	ldr	r1, [r7, #8]
 8014608:	68f8      	ldr	r0, [r7, #12]
 801460a:	f001 fd63 	bl	80160d4 <ethernet_output>
 801460e:	4603      	mov	r3, r0
}
 8014610:	4618      	mov	r0, r3
 8014612:	3720      	adds	r7, #32
 8014614:	46bd      	mov	sp, r7
 8014616:	bd80      	pop	{r7, pc}
 8014618:	0801ab14 	.word	0x0801ab14
 801461c:	0801ac64 	.word	0x0801ac64
 8014620:	0801ab8c 	.word	0x0801ab8c
 8014624:	0801acb4 	.word	0x0801acb4
 8014628:	0801ac54 	.word	0x0801ac54
 801462c:	0801b334 	.word	0x0801b334
 8014630:	2001b038 	.word	0x2001b038
 8014634:	2001af48 	.word	0x2001af48

08014638 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8014638:	b580      	push	{r7, lr}
 801463a:	b08c      	sub	sp, #48	; 0x30
 801463c:	af02      	add	r7, sp, #8
 801463e:	60f8      	str	r0, [r7, #12]
 8014640:	60b9      	str	r1, [r7, #8]
 8014642:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8014644:	68fb      	ldr	r3, [r7, #12]
 8014646:	332a      	adds	r3, #42	; 0x2a
 8014648:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801464a:	23ff      	movs	r3, #255	; 0xff
 801464c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8014650:	2300      	movs	r3, #0
 8014652:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014654:	68bb      	ldr	r3, [r7, #8]
 8014656:	681b      	ldr	r3, [r3, #0]
 8014658:	68f9      	ldr	r1, [r7, #12]
 801465a:	4618      	mov	r0, r3
 801465c:	f000 fe2c 	bl	80152b8 <ip4_addr_isbroadcast_u32>
 8014660:	4603      	mov	r3, r0
 8014662:	2b00      	cmp	r3, #0
 8014664:	d10c      	bne.n	8014680 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8014666:	68bb      	ldr	r3, [r7, #8]
 8014668:	681b      	ldr	r3, [r3, #0]
 801466a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801466e:	2be0      	cmp	r3, #224	; 0xe0
 8014670:	d006      	beq.n	8014680 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8014672:	68bb      	ldr	r3, [r7, #8]
 8014674:	2b00      	cmp	r3, #0
 8014676:	d003      	beq.n	8014680 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8014678:	68bb      	ldr	r3, [r7, #8]
 801467a:	681b      	ldr	r3, [r3, #0]
 801467c:	2b00      	cmp	r3, #0
 801467e:	d102      	bne.n	8014686 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014680:	f06f 030f 	mvn.w	r3, #15
 8014684:	e101      	b.n	801488a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8014686:	68fa      	ldr	r2, [r7, #12]
 8014688:	2101      	movs	r1, #1
 801468a:	68b8      	ldr	r0, [r7, #8]
 801468c:	f7ff fb5c 	bl	8013d48 <etharp_find_entry>
 8014690:	4603      	mov	r3, r0
 8014692:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8014694:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014698:	2b00      	cmp	r3, #0
 801469a:	da02      	bge.n	80146a2 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801469c:	8a7b      	ldrh	r3, [r7, #18]
 801469e:	b25b      	sxtb	r3, r3
 80146a0:	e0f3      	b.n	801488a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80146a2:	8a7b      	ldrh	r3, [r7, #18]
 80146a4:	2b7e      	cmp	r3, #126	; 0x7e
 80146a6:	d906      	bls.n	80146b6 <etharp_query+0x7e>
 80146a8:	4b7a      	ldr	r3, [pc, #488]	; (8014894 <etharp_query+0x25c>)
 80146aa:	f240 32c1 	movw	r2, #961	; 0x3c1
 80146ae:	497a      	ldr	r1, [pc, #488]	; (8014898 <etharp_query+0x260>)
 80146b0:	487a      	ldr	r0, [pc, #488]	; (801489c <etharp_query+0x264>)
 80146b2:	f001 fead 	bl	8016410 <iprintf>
  i = (netif_addr_idx_t)i_err;
 80146b6:	8a7b      	ldrh	r3, [r7, #18]
 80146b8:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80146ba:	7c7a      	ldrb	r2, [r7, #17]
 80146bc:	4978      	ldr	r1, [pc, #480]	; (80148a0 <etharp_query+0x268>)
 80146be:	4613      	mov	r3, r2
 80146c0:	005b      	lsls	r3, r3, #1
 80146c2:	4413      	add	r3, r2
 80146c4:	00db      	lsls	r3, r3, #3
 80146c6:	440b      	add	r3, r1
 80146c8:	3314      	adds	r3, #20
 80146ca:	781b      	ldrb	r3, [r3, #0]
 80146cc:	2b00      	cmp	r3, #0
 80146ce:	d115      	bne.n	80146fc <etharp_query+0xc4>
    is_new_entry = 1;
 80146d0:	2301      	movs	r3, #1
 80146d2:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80146d4:	7c7a      	ldrb	r2, [r7, #17]
 80146d6:	4972      	ldr	r1, [pc, #456]	; (80148a0 <etharp_query+0x268>)
 80146d8:	4613      	mov	r3, r2
 80146da:	005b      	lsls	r3, r3, #1
 80146dc:	4413      	add	r3, r2
 80146de:	00db      	lsls	r3, r3, #3
 80146e0:	440b      	add	r3, r1
 80146e2:	3314      	adds	r3, #20
 80146e4:	2201      	movs	r2, #1
 80146e6:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80146e8:	7c7a      	ldrb	r2, [r7, #17]
 80146ea:	496d      	ldr	r1, [pc, #436]	; (80148a0 <etharp_query+0x268>)
 80146ec:	4613      	mov	r3, r2
 80146ee:	005b      	lsls	r3, r3, #1
 80146f0:	4413      	add	r3, r2
 80146f2:	00db      	lsls	r3, r3, #3
 80146f4:	440b      	add	r3, r1
 80146f6:	3308      	adds	r3, #8
 80146f8:	68fa      	ldr	r2, [r7, #12]
 80146fa:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80146fc:	7c7a      	ldrb	r2, [r7, #17]
 80146fe:	4968      	ldr	r1, [pc, #416]	; (80148a0 <etharp_query+0x268>)
 8014700:	4613      	mov	r3, r2
 8014702:	005b      	lsls	r3, r3, #1
 8014704:	4413      	add	r3, r2
 8014706:	00db      	lsls	r3, r3, #3
 8014708:	440b      	add	r3, r1
 801470a:	3314      	adds	r3, #20
 801470c:	781b      	ldrb	r3, [r3, #0]
 801470e:	2b01      	cmp	r3, #1
 8014710:	d011      	beq.n	8014736 <etharp_query+0xfe>
 8014712:	7c7a      	ldrb	r2, [r7, #17]
 8014714:	4962      	ldr	r1, [pc, #392]	; (80148a0 <etharp_query+0x268>)
 8014716:	4613      	mov	r3, r2
 8014718:	005b      	lsls	r3, r3, #1
 801471a:	4413      	add	r3, r2
 801471c:	00db      	lsls	r3, r3, #3
 801471e:	440b      	add	r3, r1
 8014720:	3314      	adds	r3, #20
 8014722:	781b      	ldrb	r3, [r3, #0]
 8014724:	2b01      	cmp	r3, #1
 8014726:	d806      	bhi.n	8014736 <etharp_query+0xfe>
 8014728:	4b5a      	ldr	r3, [pc, #360]	; (8014894 <etharp_query+0x25c>)
 801472a:	f240 32cd 	movw	r2, #973	; 0x3cd
 801472e:	495d      	ldr	r1, [pc, #372]	; (80148a4 <etharp_query+0x26c>)
 8014730:	485a      	ldr	r0, [pc, #360]	; (801489c <etharp_query+0x264>)
 8014732:	f001 fe6d 	bl	8016410 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8014736:	6a3b      	ldr	r3, [r7, #32]
 8014738:	2b00      	cmp	r3, #0
 801473a:	d102      	bne.n	8014742 <etharp_query+0x10a>
 801473c:	687b      	ldr	r3, [r7, #4]
 801473e:	2b00      	cmp	r3, #0
 8014740:	d10c      	bne.n	801475c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8014742:	68b9      	ldr	r1, [r7, #8]
 8014744:	68f8      	ldr	r0, [r7, #12]
 8014746:	f000 f963 	bl	8014a10 <etharp_request>
 801474a:	4603      	mov	r3, r0
 801474c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8014750:	687b      	ldr	r3, [r7, #4]
 8014752:	2b00      	cmp	r3, #0
 8014754:	d102      	bne.n	801475c <etharp_query+0x124>
      return result;
 8014756:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801475a:	e096      	b.n	801488a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801475c:	687b      	ldr	r3, [r7, #4]
 801475e:	2b00      	cmp	r3, #0
 8014760:	d106      	bne.n	8014770 <etharp_query+0x138>
 8014762:	4b4c      	ldr	r3, [pc, #304]	; (8014894 <etharp_query+0x25c>)
 8014764:	f240 32e1 	movw	r2, #993	; 0x3e1
 8014768:	494f      	ldr	r1, [pc, #316]	; (80148a8 <etharp_query+0x270>)
 801476a:	484c      	ldr	r0, [pc, #304]	; (801489c <etharp_query+0x264>)
 801476c:	f001 fe50 	bl	8016410 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8014770:	7c7a      	ldrb	r2, [r7, #17]
 8014772:	494b      	ldr	r1, [pc, #300]	; (80148a0 <etharp_query+0x268>)
 8014774:	4613      	mov	r3, r2
 8014776:	005b      	lsls	r3, r3, #1
 8014778:	4413      	add	r3, r2
 801477a:	00db      	lsls	r3, r3, #3
 801477c:	440b      	add	r3, r1
 801477e:	3314      	adds	r3, #20
 8014780:	781b      	ldrb	r3, [r3, #0]
 8014782:	2b01      	cmp	r3, #1
 8014784:	d917      	bls.n	80147b6 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8014786:	4a49      	ldr	r2, [pc, #292]	; (80148ac <etharp_query+0x274>)
 8014788:	7c7b      	ldrb	r3, [r7, #17]
 801478a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801478c:	7c7a      	ldrb	r2, [r7, #17]
 801478e:	4613      	mov	r3, r2
 8014790:	005b      	lsls	r3, r3, #1
 8014792:	4413      	add	r3, r2
 8014794:	00db      	lsls	r3, r3, #3
 8014796:	3308      	adds	r3, #8
 8014798:	4a41      	ldr	r2, [pc, #260]	; (80148a0 <etharp_query+0x268>)
 801479a:	4413      	add	r3, r2
 801479c:	3304      	adds	r3, #4
 801479e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80147a2:	9200      	str	r2, [sp, #0]
 80147a4:	697a      	ldr	r2, [r7, #20]
 80147a6:	6879      	ldr	r1, [r7, #4]
 80147a8:	68f8      	ldr	r0, [r7, #12]
 80147aa:	f001 fc93 	bl	80160d4 <ethernet_output>
 80147ae:	4603      	mov	r3, r0
 80147b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80147b4:	e067      	b.n	8014886 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80147b6:	7c7a      	ldrb	r2, [r7, #17]
 80147b8:	4939      	ldr	r1, [pc, #228]	; (80148a0 <etharp_query+0x268>)
 80147ba:	4613      	mov	r3, r2
 80147bc:	005b      	lsls	r3, r3, #1
 80147be:	4413      	add	r3, r2
 80147c0:	00db      	lsls	r3, r3, #3
 80147c2:	440b      	add	r3, r1
 80147c4:	3314      	adds	r3, #20
 80147c6:	781b      	ldrb	r3, [r3, #0]
 80147c8:	2b01      	cmp	r3, #1
 80147ca:	d15c      	bne.n	8014886 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80147cc:	2300      	movs	r3, #0
 80147ce:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80147d0:	687b      	ldr	r3, [r7, #4]
 80147d2:	61fb      	str	r3, [r7, #28]
    while (p) {
 80147d4:	e01c      	b.n	8014810 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80147d6:	69fb      	ldr	r3, [r7, #28]
 80147d8:	895a      	ldrh	r2, [r3, #10]
 80147da:	69fb      	ldr	r3, [r7, #28]
 80147dc:	891b      	ldrh	r3, [r3, #8]
 80147de:	429a      	cmp	r2, r3
 80147e0:	d10a      	bne.n	80147f8 <etharp_query+0x1c0>
 80147e2:	69fb      	ldr	r3, [r7, #28]
 80147e4:	681b      	ldr	r3, [r3, #0]
 80147e6:	2b00      	cmp	r3, #0
 80147e8:	d006      	beq.n	80147f8 <etharp_query+0x1c0>
 80147ea:	4b2a      	ldr	r3, [pc, #168]	; (8014894 <etharp_query+0x25c>)
 80147ec:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80147f0:	492f      	ldr	r1, [pc, #188]	; (80148b0 <etharp_query+0x278>)
 80147f2:	482a      	ldr	r0, [pc, #168]	; (801489c <etharp_query+0x264>)
 80147f4:	f001 fe0c 	bl	8016410 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80147f8:	69fb      	ldr	r3, [r7, #28]
 80147fa:	7b1b      	ldrb	r3, [r3, #12]
 80147fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014800:	2b00      	cmp	r3, #0
 8014802:	d002      	beq.n	801480a <etharp_query+0x1d2>
        copy_needed = 1;
 8014804:	2301      	movs	r3, #1
 8014806:	61bb      	str	r3, [r7, #24]
        break;
 8014808:	e005      	b.n	8014816 <etharp_query+0x1de>
      }
      p = p->next;
 801480a:	69fb      	ldr	r3, [r7, #28]
 801480c:	681b      	ldr	r3, [r3, #0]
 801480e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014810:	69fb      	ldr	r3, [r7, #28]
 8014812:	2b00      	cmp	r3, #0
 8014814:	d1df      	bne.n	80147d6 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8014816:	69bb      	ldr	r3, [r7, #24]
 8014818:	2b00      	cmp	r3, #0
 801481a:	d007      	beq.n	801482c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801481c:	687a      	ldr	r2, [r7, #4]
 801481e:	f44f 7120 	mov.w	r1, #640	; 0x280
 8014822:	200e      	movs	r0, #14
 8014824:	f7f6 fbe8 	bl	800aff8 <pbuf_clone>
 8014828:	61f8      	str	r0, [r7, #28]
 801482a:	e004      	b.n	8014836 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801482c:	687b      	ldr	r3, [r7, #4]
 801482e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8014830:	69f8      	ldr	r0, [r7, #28]
 8014832:	f7f6 f9e5 	bl	800ac00 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8014836:	69fb      	ldr	r3, [r7, #28]
 8014838:	2b00      	cmp	r3, #0
 801483a:	d021      	beq.n	8014880 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801483c:	7c7a      	ldrb	r2, [r7, #17]
 801483e:	4918      	ldr	r1, [pc, #96]	; (80148a0 <etharp_query+0x268>)
 8014840:	4613      	mov	r3, r2
 8014842:	005b      	lsls	r3, r3, #1
 8014844:	4413      	add	r3, r2
 8014846:	00db      	lsls	r3, r3, #3
 8014848:	440b      	add	r3, r1
 801484a:	681b      	ldr	r3, [r3, #0]
 801484c:	2b00      	cmp	r3, #0
 801484e:	d00a      	beq.n	8014866 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8014850:	7c7a      	ldrb	r2, [r7, #17]
 8014852:	4913      	ldr	r1, [pc, #76]	; (80148a0 <etharp_query+0x268>)
 8014854:	4613      	mov	r3, r2
 8014856:	005b      	lsls	r3, r3, #1
 8014858:	4413      	add	r3, r2
 801485a:	00db      	lsls	r3, r3, #3
 801485c:	440b      	add	r3, r1
 801485e:	681b      	ldr	r3, [r3, #0]
 8014860:	4618      	mov	r0, r3
 8014862:	f7f6 f927 	bl	800aab4 <pbuf_free>
      }
      arp_table[i].q = p;
 8014866:	7c7a      	ldrb	r2, [r7, #17]
 8014868:	490d      	ldr	r1, [pc, #52]	; (80148a0 <etharp_query+0x268>)
 801486a:	4613      	mov	r3, r2
 801486c:	005b      	lsls	r3, r3, #1
 801486e:	4413      	add	r3, r2
 8014870:	00db      	lsls	r3, r3, #3
 8014872:	440b      	add	r3, r1
 8014874:	69fa      	ldr	r2, [r7, #28]
 8014876:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8014878:	2300      	movs	r3, #0
 801487a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801487e:	e002      	b.n	8014886 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8014880:	23ff      	movs	r3, #255	; 0xff
 8014882:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8014886:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801488a:	4618      	mov	r0, r3
 801488c:	3728      	adds	r7, #40	; 0x28
 801488e:	46bd      	mov	sp, r7
 8014890:	bd80      	pop	{r7, pc}
 8014892:	bf00      	nop
 8014894:	0801ab14 	.word	0x0801ab14
 8014898:	0801acc0 	.word	0x0801acc0
 801489c:	0801ab8c 	.word	0x0801ab8c
 80148a0:	2001af48 	.word	0x2001af48
 80148a4:	0801acd0 	.word	0x0801acd0
 80148a8:	0801acb4 	.word	0x0801acb4
 80148ac:	2001b038 	.word	0x2001b038
 80148b0:	0801acf8 	.word	0x0801acf8

080148b4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80148b4:	b580      	push	{r7, lr}
 80148b6:	b08a      	sub	sp, #40	; 0x28
 80148b8:	af02      	add	r7, sp, #8
 80148ba:	60f8      	str	r0, [r7, #12]
 80148bc:	60b9      	str	r1, [r7, #8]
 80148be:	607a      	str	r2, [r7, #4]
 80148c0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80148c2:	2300      	movs	r3, #0
 80148c4:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80148c6:	68fb      	ldr	r3, [r7, #12]
 80148c8:	2b00      	cmp	r3, #0
 80148ca:	d106      	bne.n	80148da <etharp_raw+0x26>
 80148cc:	4b3a      	ldr	r3, [pc, #232]	; (80149b8 <etharp_raw+0x104>)
 80148ce:	f240 4257 	movw	r2, #1111	; 0x457
 80148d2:	493a      	ldr	r1, [pc, #232]	; (80149bc <etharp_raw+0x108>)
 80148d4:	483a      	ldr	r0, [pc, #232]	; (80149c0 <etharp_raw+0x10c>)
 80148d6:	f001 fd9b 	bl	8016410 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80148da:	f44f 7220 	mov.w	r2, #640	; 0x280
 80148de:	211c      	movs	r1, #28
 80148e0:	200e      	movs	r0, #14
 80148e2:	f7f5 fe03 	bl	800a4ec <pbuf_alloc>
 80148e6:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80148e8:	69bb      	ldr	r3, [r7, #24]
 80148ea:	2b00      	cmp	r3, #0
 80148ec:	d102      	bne.n	80148f4 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80148ee:	f04f 33ff 	mov.w	r3, #4294967295
 80148f2:	e05d      	b.n	80149b0 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80148f4:	69bb      	ldr	r3, [r7, #24]
 80148f6:	895b      	ldrh	r3, [r3, #10]
 80148f8:	2b1b      	cmp	r3, #27
 80148fa:	d806      	bhi.n	801490a <etharp_raw+0x56>
 80148fc:	4b2e      	ldr	r3, [pc, #184]	; (80149b8 <etharp_raw+0x104>)
 80148fe:	f240 4262 	movw	r2, #1122	; 0x462
 8014902:	4930      	ldr	r1, [pc, #192]	; (80149c4 <etharp_raw+0x110>)
 8014904:	482e      	ldr	r0, [pc, #184]	; (80149c0 <etharp_raw+0x10c>)
 8014906:	f001 fd83 	bl	8016410 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801490a:	69bb      	ldr	r3, [r7, #24]
 801490c:	685b      	ldr	r3, [r3, #4]
 801490e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8014910:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8014912:	4618      	mov	r0, r3
 8014914:	f7f4 fcee 	bl	80092f4 <lwip_htons>
 8014918:	4603      	mov	r3, r0
 801491a:	461a      	mov	r2, r3
 801491c:	697b      	ldr	r3, [r7, #20]
 801491e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8014920:	68fb      	ldr	r3, [r7, #12]
 8014922:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014926:	2b06      	cmp	r3, #6
 8014928:	d006      	beq.n	8014938 <etharp_raw+0x84>
 801492a:	4b23      	ldr	r3, [pc, #140]	; (80149b8 <etharp_raw+0x104>)
 801492c:	f240 4269 	movw	r2, #1129	; 0x469
 8014930:	4925      	ldr	r1, [pc, #148]	; (80149c8 <etharp_raw+0x114>)
 8014932:	4823      	ldr	r0, [pc, #140]	; (80149c0 <etharp_raw+0x10c>)
 8014934:	f001 fd6c 	bl	8016410 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8014938:	697b      	ldr	r3, [r7, #20]
 801493a:	3308      	adds	r3, #8
 801493c:	2206      	movs	r2, #6
 801493e:	6839      	ldr	r1, [r7, #0]
 8014940:	4618      	mov	r0, r3
 8014942:	f001 fd35 	bl	80163b0 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8014946:	697b      	ldr	r3, [r7, #20]
 8014948:	3312      	adds	r3, #18
 801494a:	2206      	movs	r2, #6
 801494c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801494e:	4618      	mov	r0, r3
 8014950:	f001 fd2e 	bl	80163b0 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8014954:	697b      	ldr	r3, [r7, #20]
 8014956:	330e      	adds	r3, #14
 8014958:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801495a:	6812      	ldr	r2, [r2, #0]
 801495c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801495e:	697b      	ldr	r3, [r7, #20]
 8014960:	3318      	adds	r3, #24
 8014962:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014964:	6812      	ldr	r2, [r2, #0]
 8014966:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8014968:	697b      	ldr	r3, [r7, #20]
 801496a:	2200      	movs	r2, #0
 801496c:	701a      	strb	r2, [r3, #0]
 801496e:	2200      	movs	r2, #0
 8014970:	f042 0201 	orr.w	r2, r2, #1
 8014974:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8014976:	697b      	ldr	r3, [r7, #20]
 8014978:	2200      	movs	r2, #0
 801497a:	f042 0208 	orr.w	r2, r2, #8
 801497e:	709a      	strb	r2, [r3, #2]
 8014980:	2200      	movs	r2, #0
 8014982:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8014984:	697b      	ldr	r3, [r7, #20]
 8014986:	2206      	movs	r2, #6
 8014988:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801498a:	697b      	ldr	r3, [r7, #20]
 801498c:	2204      	movs	r2, #4
 801498e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8014990:	f640 0306 	movw	r3, #2054	; 0x806
 8014994:	9300      	str	r3, [sp, #0]
 8014996:	687b      	ldr	r3, [r7, #4]
 8014998:	68ba      	ldr	r2, [r7, #8]
 801499a:	69b9      	ldr	r1, [r7, #24]
 801499c:	68f8      	ldr	r0, [r7, #12]
 801499e:	f001 fb99 	bl	80160d4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80149a2:	69b8      	ldr	r0, [r7, #24]
 80149a4:	f7f6 f886 	bl	800aab4 <pbuf_free>
  p = NULL;
 80149a8:	2300      	movs	r3, #0
 80149aa:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80149ac:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80149b0:	4618      	mov	r0, r3
 80149b2:	3720      	adds	r7, #32
 80149b4:	46bd      	mov	sp, r7
 80149b6:	bd80      	pop	{r7, pc}
 80149b8:	0801ab14 	.word	0x0801ab14
 80149bc:	0801ac64 	.word	0x0801ac64
 80149c0:	0801ab8c 	.word	0x0801ab8c
 80149c4:	0801ad14 	.word	0x0801ad14
 80149c8:	0801ad48 	.word	0x0801ad48

080149cc <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80149cc:	b580      	push	{r7, lr}
 80149ce:	b088      	sub	sp, #32
 80149d0:	af04      	add	r7, sp, #16
 80149d2:	60f8      	str	r0, [r7, #12]
 80149d4:	60b9      	str	r1, [r7, #8]
 80149d6:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80149d8:	68fb      	ldr	r3, [r7, #12]
 80149da:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80149de:	68fb      	ldr	r3, [r7, #12]
 80149e0:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 80149e4:	68fb      	ldr	r3, [r7, #12]
 80149e6:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80149e8:	2201      	movs	r2, #1
 80149ea:	9203      	str	r2, [sp, #12]
 80149ec:	68ba      	ldr	r2, [r7, #8]
 80149ee:	9202      	str	r2, [sp, #8]
 80149f0:	4a06      	ldr	r2, [pc, #24]	; (8014a0c <etharp_request_dst+0x40>)
 80149f2:	9201      	str	r2, [sp, #4]
 80149f4:	9300      	str	r3, [sp, #0]
 80149f6:	4603      	mov	r3, r0
 80149f8:	687a      	ldr	r2, [r7, #4]
 80149fa:	68f8      	ldr	r0, [r7, #12]
 80149fc:	f7ff ff5a 	bl	80148b4 <etharp_raw>
 8014a00:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8014a02:	4618      	mov	r0, r3
 8014a04:	3710      	adds	r7, #16
 8014a06:	46bd      	mov	sp, r7
 8014a08:	bd80      	pop	{r7, pc}
 8014a0a:	bf00      	nop
 8014a0c:	0801b33c 	.word	0x0801b33c

08014a10 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8014a10:	b580      	push	{r7, lr}
 8014a12:	b082      	sub	sp, #8
 8014a14:	af00      	add	r7, sp, #0
 8014a16:	6078      	str	r0, [r7, #4]
 8014a18:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8014a1a:	4a05      	ldr	r2, [pc, #20]	; (8014a30 <etharp_request+0x20>)
 8014a1c:	6839      	ldr	r1, [r7, #0]
 8014a1e:	6878      	ldr	r0, [r7, #4]
 8014a20:	f7ff ffd4 	bl	80149cc <etharp_request_dst>
 8014a24:	4603      	mov	r3, r0
}
 8014a26:	4618      	mov	r0, r3
 8014a28:	3708      	adds	r7, #8
 8014a2a:	46bd      	mov	sp, r7
 8014a2c:	bd80      	pop	{r7, pc}
 8014a2e:	bf00      	nop
 8014a30:	0801b334 	.word	0x0801b334

08014a34 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8014a34:	b580      	push	{r7, lr}
 8014a36:	b08e      	sub	sp, #56	; 0x38
 8014a38:	af04      	add	r7, sp, #16
 8014a3a:	6078      	str	r0, [r7, #4]
 8014a3c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8014a3e:	4b79      	ldr	r3, [pc, #484]	; (8014c24 <icmp_input+0x1f0>)
 8014a40:	689b      	ldr	r3, [r3, #8]
 8014a42:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8014a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a46:	781b      	ldrb	r3, [r3, #0]
 8014a48:	f003 030f 	and.w	r3, r3, #15
 8014a4c:	b2db      	uxtb	r3, r3
 8014a4e:	009b      	lsls	r3, r3, #2
 8014a50:	b2db      	uxtb	r3, r3
 8014a52:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8014a54:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014a56:	2b13      	cmp	r3, #19
 8014a58:	f240 80cd 	bls.w	8014bf6 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8014a5c:	687b      	ldr	r3, [r7, #4]
 8014a5e:	895b      	ldrh	r3, [r3, #10]
 8014a60:	2b03      	cmp	r3, #3
 8014a62:	f240 80ca 	bls.w	8014bfa <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8014a66:	687b      	ldr	r3, [r7, #4]
 8014a68:	685b      	ldr	r3, [r3, #4]
 8014a6a:	781b      	ldrb	r3, [r3, #0]
 8014a6c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8014a70:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8014a74:	2b00      	cmp	r3, #0
 8014a76:	f000 80b7 	beq.w	8014be8 <icmp_input+0x1b4>
 8014a7a:	2b08      	cmp	r3, #8
 8014a7c:	f040 80b7 	bne.w	8014bee <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8014a80:	4b69      	ldr	r3, [pc, #420]	; (8014c28 <icmp_input+0x1f4>)
 8014a82:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014a84:	4b67      	ldr	r3, [pc, #412]	; (8014c24 <icmp_input+0x1f0>)
 8014a86:	695b      	ldr	r3, [r3, #20]
 8014a88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014a8c:	2be0      	cmp	r3, #224	; 0xe0
 8014a8e:	f000 80bb 	beq.w	8014c08 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8014a92:	4b64      	ldr	r3, [pc, #400]	; (8014c24 <icmp_input+0x1f0>)
 8014a94:	695b      	ldr	r3, [r3, #20]
 8014a96:	4a63      	ldr	r2, [pc, #396]	; (8014c24 <icmp_input+0x1f0>)
 8014a98:	6812      	ldr	r2, [r2, #0]
 8014a9a:	4611      	mov	r1, r2
 8014a9c:	4618      	mov	r0, r3
 8014a9e:	f000 fc0b 	bl	80152b8 <ip4_addr_isbroadcast_u32>
 8014aa2:	4603      	mov	r3, r0
 8014aa4:	2b00      	cmp	r3, #0
 8014aa6:	f040 80b1 	bne.w	8014c0c <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8014aaa:	687b      	ldr	r3, [r7, #4]
 8014aac:	891b      	ldrh	r3, [r3, #8]
 8014aae:	2b07      	cmp	r3, #7
 8014ab0:	f240 80a5 	bls.w	8014bfe <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014ab4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014ab6:	330e      	adds	r3, #14
 8014ab8:	4619      	mov	r1, r3
 8014aba:	6878      	ldr	r0, [r7, #4]
 8014abc:	f7f5 ff64 	bl	800a988 <pbuf_add_header>
 8014ac0:	4603      	mov	r3, r0
 8014ac2:	2b00      	cmp	r3, #0
 8014ac4:	d04b      	beq.n	8014b5e <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8014ac6:	687b      	ldr	r3, [r7, #4]
 8014ac8:	891a      	ldrh	r2, [r3, #8]
 8014aca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014acc:	4413      	add	r3, r2
 8014ace:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8014ad0:	687b      	ldr	r3, [r7, #4]
 8014ad2:	891b      	ldrh	r3, [r3, #8]
 8014ad4:	8b7a      	ldrh	r2, [r7, #26]
 8014ad6:	429a      	cmp	r2, r3
 8014ad8:	f0c0 809a 	bcc.w	8014c10 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8014adc:	8b7b      	ldrh	r3, [r7, #26]
 8014ade:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014ae2:	4619      	mov	r1, r3
 8014ae4:	200e      	movs	r0, #14
 8014ae6:	f7f5 fd01 	bl	800a4ec <pbuf_alloc>
 8014aea:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8014aec:	697b      	ldr	r3, [r7, #20]
 8014aee:	2b00      	cmp	r3, #0
 8014af0:	f000 8090 	beq.w	8014c14 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8014af4:	697b      	ldr	r3, [r7, #20]
 8014af6:	895b      	ldrh	r3, [r3, #10]
 8014af8:	461a      	mov	r2, r3
 8014afa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014afc:	3308      	adds	r3, #8
 8014afe:	429a      	cmp	r2, r3
 8014b00:	d203      	bcs.n	8014b0a <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8014b02:	6978      	ldr	r0, [r7, #20]
 8014b04:	f7f5 ffd6 	bl	800aab4 <pbuf_free>
          goto icmperr;
 8014b08:	e085      	b.n	8014c16 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8014b0a:	697b      	ldr	r3, [r7, #20]
 8014b0c:	685b      	ldr	r3, [r3, #4]
 8014b0e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8014b10:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014b12:	4618      	mov	r0, r3
 8014b14:	f001 fc4c 	bl	80163b0 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8014b18:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014b1a:	4619      	mov	r1, r3
 8014b1c:	6978      	ldr	r0, [r7, #20]
 8014b1e:	f7f5 ff43 	bl	800a9a8 <pbuf_remove_header>
 8014b22:	4603      	mov	r3, r0
 8014b24:	2b00      	cmp	r3, #0
 8014b26:	d009      	beq.n	8014b3c <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8014b28:	4b40      	ldr	r3, [pc, #256]	; (8014c2c <icmp_input+0x1f8>)
 8014b2a:	22b6      	movs	r2, #182	; 0xb6
 8014b2c:	4940      	ldr	r1, [pc, #256]	; (8014c30 <icmp_input+0x1fc>)
 8014b2e:	4841      	ldr	r0, [pc, #260]	; (8014c34 <icmp_input+0x200>)
 8014b30:	f001 fc6e 	bl	8016410 <iprintf>
          pbuf_free(r);
 8014b34:	6978      	ldr	r0, [r7, #20]
 8014b36:	f7f5 ffbd 	bl	800aab4 <pbuf_free>
          goto icmperr;
 8014b3a:	e06c      	b.n	8014c16 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8014b3c:	6879      	ldr	r1, [r7, #4]
 8014b3e:	6978      	ldr	r0, [r7, #20]
 8014b40:	f7f6 f8ec 	bl	800ad1c <pbuf_copy>
 8014b44:	4603      	mov	r3, r0
 8014b46:	2b00      	cmp	r3, #0
 8014b48:	d003      	beq.n	8014b52 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8014b4a:	6978      	ldr	r0, [r7, #20]
 8014b4c:	f7f5 ffb2 	bl	800aab4 <pbuf_free>
          goto icmperr;
 8014b50:	e061      	b.n	8014c16 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8014b52:	6878      	ldr	r0, [r7, #4]
 8014b54:	f7f5 ffae 	bl	800aab4 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8014b58:	697b      	ldr	r3, [r7, #20]
 8014b5a:	607b      	str	r3, [r7, #4]
 8014b5c:	e00f      	b.n	8014b7e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014b5e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014b60:	330e      	adds	r3, #14
 8014b62:	4619      	mov	r1, r3
 8014b64:	6878      	ldr	r0, [r7, #4]
 8014b66:	f7f5 ff1f 	bl	800a9a8 <pbuf_remove_header>
 8014b6a:	4603      	mov	r3, r0
 8014b6c:	2b00      	cmp	r3, #0
 8014b6e:	d006      	beq.n	8014b7e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8014b70:	4b2e      	ldr	r3, [pc, #184]	; (8014c2c <icmp_input+0x1f8>)
 8014b72:	22c7      	movs	r2, #199	; 0xc7
 8014b74:	4930      	ldr	r1, [pc, #192]	; (8014c38 <icmp_input+0x204>)
 8014b76:	482f      	ldr	r0, [pc, #188]	; (8014c34 <icmp_input+0x200>)
 8014b78:	f001 fc4a 	bl	8016410 <iprintf>
          goto icmperr;
 8014b7c:	e04b      	b.n	8014c16 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8014b7e:	687b      	ldr	r3, [r7, #4]
 8014b80:	685b      	ldr	r3, [r3, #4]
 8014b82:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8014b84:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014b86:	4619      	mov	r1, r3
 8014b88:	6878      	ldr	r0, [r7, #4]
 8014b8a:	f7f5 fefd 	bl	800a988 <pbuf_add_header>
 8014b8e:	4603      	mov	r3, r0
 8014b90:	2b00      	cmp	r3, #0
 8014b92:	d12b      	bne.n	8014bec <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8014b94:	687b      	ldr	r3, [r7, #4]
 8014b96:	685b      	ldr	r3, [r3, #4]
 8014b98:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8014b9a:	69fb      	ldr	r3, [r7, #28]
 8014b9c:	681a      	ldr	r2, [r3, #0]
 8014b9e:	68fb      	ldr	r3, [r7, #12]
 8014ba0:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8014ba2:	4b20      	ldr	r3, [pc, #128]	; (8014c24 <icmp_input+0x1f0>)
 8014ba4:	691a      	ldr	r2, [r3, #16]
 8014ba6:	68fb      	ldr	r3, [r7, #12]
 8014ba8:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8014baa:	693b      	ldr	r3, [r7, #16]
 8014bac:	2200      	movs	r2, #0
 8014bae:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8014bb0:	693b      	ldr	r3, [r7, #16]
 8014bb2:	2200      	movs	r2, #0
 8014bb4:	709a      	strb	r2, [r3, #2]
 8014bb6:	2200      	movs	r2, #0
 8014bb8:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8014bba:	68fb      	ldr	r3, [r7, #12]
 8014bbc:	22ff      	movs	r2, #255	; 0xff
 8014bbe:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8014bc0:	68fb      	ldr	r3, [r7, #12]
 8014bc2:	2200      	movs	r2, #0
 8014bc4:	729a      	strb	r2, [r3, #10]
 8014bc6:	2200      	movs	r2, #0
 8014bc8:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8014bca:	683b      	ldr	r3, [r7, #0]
 8014bcc:	9302      	str	r3, [sp, #8]
 8014bce:	2301      	movs	r3, #1
 8014bd0:	9301      	str	r3, [sp, #4]
 8014bd2:	2300      	movs	r3, #0
 8014bd4:	9300      	str	r3, [sp, #0]
 8014bd6:	23ff      	movs	r3, #255	; 0xff
 8014bd8:	2200      	movs	r2, #0
 8014bda:	69f9      	ldr	r1, [r7, #28]
 8014bdc:	6878      	ldr	r0, [r7, #4]
 8014bde:	f000 fa93 	bl	8015108 <ip4_output_if>
 8014be2:	4603      	mov	r3, r0
 8014be4:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8014be6:	e001      	b.n	8014bec <icmp_input+0x1b8>
      break;
 8014be8:	bf00      	nop
 8014bea:	e000      	b.n	8014bee <icmp_input+0x1ba>
      break;
 8014bec:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8014bee:	6878      	ldr	r0, [r7, #4]
 8014bf0:	f7f5 ff60 	bl	800aab4 <pbuf_free>
  return;
 8014bf4:	e013      	b.n	8014c1e <icmp_input+0x1ea>
    goto lenerr;
 8014bf6:	bf00      	nop
 8014bf8:	e002      	b.n	8014c00 <icmp_input+0x1cc>
    goto lenerr;
 8014bfa:	bf00      	nop
 8014bfc:	e000      	b.n	8014c00 <icmp_input+0x1cc>
        goto lenerr;
 8014bfe:	bf00      	nop
lenerr:
  pbuf_free(p);
 8014c00:	6878      	ldr	r0, [r7, #4]
 8014c02:	f7f5 ff57 	bl	800aab4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8014c06:	e00a      	b.n	8014c1e <icmp_input+0x1ea>
        goto icmperr;
 8014c08:	bf00      	nop
 8014c0a:	e004      	b.n	8014c16 <icmp_input+0x1e2>
        goto icmperr;
 8014c0c:	bf00      	nop
 8014c0e:	e002      	b.n	8014c16 <icmp_input+0x1e2>
          goto icmperr;
 8014c10:	bf00      	nop
 8014c12:	e000      	b.n	8014c16 <icmp_input+0x1e2>
          goto icmperr;
 8014c14:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8014c16:	6878      	ldr	r0, [r7, #4]
 8014c18:	f7f5 ff4c 	bl	800aab4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8014c1c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8014c1e:	3728      	adds	r7, #40	; 0x28
 8014c20:	46bd      	mov	sp, r7
 8014c22:	bd80      	pop	{r7, pc}
 8014c24:	20016980 	.word	0x20016980
 8014c28:	20016994 	.word	0x20016994
 8014c2c:	0801ad8c 	.word	0x0801ad8c
 8014c30:	0801adc4 	.word	0x0801adc4
 8014c34:	0801adfc 	.word	0x0801adfc
 8014c38:	0801ae24 	.word	0x0801ae24

08014c3c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8014c3c:	b580      	push	{r7, lr}
 8014c3e:	b082      	sub	sp, #8
 8014c40:	af00      	add	r7, sp, #0
 8014c42:	6078      	str	r0, [r7, #4]
 8014c44:	460b      	mov	r3, r1
 8014c46:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8014c48:	78fb      	ldrb	r3, [r7, #3]
 8014c4a:	461a      	mov	r2, r3
 8014c4c:	2103      	movs	r1, #3
 8014c4e:	6878      	ldr	r0, [r7, #4]
 8014c50:	f000 f814 	bl	8014c7c <icmp_send_response>
}
 8014c54:	bf00      	nop
 8014c56:	3708      	adds	r7, #8
 8014c58:	46bd      	mov	sp, r7
 8014c5a:	bd80      	pop	{r7, pc}

08014c5c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8014c5c:	b580      	push	{r7, lr}
 8014c5e:	b082      	sub	sp, #8
 8014c60:	af00      	add	r7, sp, #0
 8014c62:	6078      	str	r0, [r7, #4]
 8014c64:	460b      	mov	r3, r1
 8014c66:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8014c68:	78fb      	ldrb	r3, [r7, #3]
 8014c6a:	461a      	mov	r2, r3
 8014c6c:	210b      	movs	r1, #11
 8014c6e:	6878      	ldr	r0, [r7, #4]
 8014c70:	f000 f804 	bl	8014c7c <icmp_send_response>
}
 8014c74:	bf00      	nop
 8014c76:	3708      	adds	r7, #8
 8014c78:	46bd      	mov	sp, r7
 8014c7a:	bd80      	pop	{r7, pc}

08014c7c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8014c7c:	b580      	push	{r7, lr}
 8014c7e:	b08c      	sub	sp, #48	; 0x30
 8014c80:	af04      	add	r7, sp, #16
 8014c82:	6078      	str	r0, [r7, #4]
 8014c84:	460b      	mov	r3, r1
 8014c86:	70fb      	strb	r3, [r7, #3]
 8014c88:	4613      	mov	r3, r2
 8014c8a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8014c8c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014c90:	2124      	movs	r1, #36	; 0x24
 8014c92:	2022      	movs	r0, #34	; 0x22
 8014c94:	f7f5 fc2a 	bl	800a4ec <pbuf_alloc>
 8014c98:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8014c9a:	69fb      	ldr	r3, [r7, #28]
 8014c9c:	2b00      	cmp	r3, #0
 8014c9e:	d04c      	beq.n	8014d3a <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8014ca0:	69fb      	ldr	r3, [r7, #28]
 8014ca2:	895b      	ldrh	r3, [r3, #10]
 8014ca4:	2b23      	cmp	r3, #35	; 0x23
 8014ca6:	d806      	bhi.n	8014cb6 <icmp_send_response+0x3a>
 8014ca8:	4b26      	ldr	r3, [pc, #152]	; (8014d44 <icmp_send_response+0xc8>)
 8014caa:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8014cae:	4926      	ldr	r1, [pc, #152]	; (8014d48 <icmp_send_response+0xcc>)
 8014cb0:	4826      	ldr	r0, [pc, #152]	; (8014d4c <icmp_send_response+0xd0>)
 8014cb2:	f001 fbad 	bl	8016410 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8014cb6:	687b      	ldr	r3, [r7, #4]
 8014cb8:	685b      	ldr	r3, [r3, #4]
 8014cba:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8014cbc:	69fb      	ldr	r3, [r7, #28]
 8014cbe:	685b      	ldr	r3, [r3, #4]
 8014cc0:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8014cc2:	697b      	ldr	r3, [r7, #20]
 8014cc4:	78fa      	ldrb	r2, [r7, #3]
 8014cc6:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8014cc8:	697b      	ldr	r3, [r7, #20]
 8014cca:	78ba      	ldrb	r2, [r7, #2]
 8014ccc:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8014cce:	697b      	ldr	r3, [r7, #20]
 8014cd0:	2200      	movs	r2, #0
 8014cd2:	711a      	strb	r2, [r3, #4]
 8014cd4:	2200      	movs	r2, #0
 8014cd6:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8014cd8:	697b      	ldr	r3, [r7, #20]
 8014cda:	2200      	movs	r2, #0
 8014cdc:	719a      	strb	r2, [r3, #6]
 8014cde:	2200      	movs	r2, #0
 8014ce0:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8014ce2:	69fb      	ldr	r3, [r7, #28]
 8014ce4:	685b      	ldr	r3, [r3, #4]
 8014ce6:	f103 0008 	add.w	r0, r3, #8
 8014cea:	687b      	ldr	r3, [r7, #4]
 8014cec:	685b      	ldr	r3, [r3, #4]
 8014cee:	221c      	movs	r2, #28
 8014cf0:	4619      	mov	r1, r3
 8014cf2:	f001 fb5d 	bl	80163b0 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8014cf6:	69bb      	ldr	r3, [r7, #24]
 8014cf8:	68db      	ldr	r3, [r3, #12]
 8014cfa:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8014cfc:	f107 030c 	add.w	r3, r7, #12
 8014d00:	4618      	mov	r0, r3
 8014d02:	f000 f825 	bl	8014d50 <ip4_route>
 8014d06:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8014d08:	693b      	ldr	r3, [r7, #16]
 8014d0a:	2b00      	cmp	r3, #0
 8014d0c:	d011      	beq.n	8014d32 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8014d0e:	697b      	ldr	r3, [r7, #20]
 8014d10:	2200      	movs	r2, #0
 8014d12:	709a      	strb	r2, [r3, #2]
 8014d14:	2200      	movs	r2, #0
 8014d16:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8014d18:	f107 020c 	add.w	r2, r7, #12
 8014d1c:	693b      	ldr	r3, [r7, #16]
 8014d1e:	9302      	str	r3, [sp, #8]
 8014d20:	2301      	movs	r3, #1
 8014d22:	9301      	str	r3, [sp, #4]
 8014d24:	2300      	movs	r3, #0
 8014d26:	9300      	str	r3, [sp, #0]
 8014d28:	23ff      	movs	r3, #255	; 0xff
 8014d2a:	2100      	movs	r1, #0
 8014d2c:	69f8      	ldr	r0, [r7, #28]
 8014d2e:	f000 f9eb 	bl	8015108 <ip4_output_if>
  }
  pbuf_free(q);
 8014d32:	69f8      	ldr	r0, [r7, #28]
 8014d34:	f7f5 febe 	bl	800aab4 <pbuf_free>
 8014d38:	e000      	b.n	8014d3c <icmp_send_response+0xc0>
    return;
 8014d3a:	bf00      	nop
}
 8014d3c:	3720      	adds	r7, #32
 8014d3e:	46bd      	mov	sp, r7
 8014d40:	bd80      	pop	{r7, pc}
 8014d42:	bf00      	nop
 8014d44:	0801ad8c 	.word	0x0801ad8c
 8014d48:	0801ae58 	.word	0x0801ae58
 8014d4c:	0801adfc 	.word	0x0801adfc

08014d50 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8014d50:	b480      	push	{r7}
 8014d52:	b085      	sub	sp, #20
 8014d54:	af00      	add	r7, sp, #0
 8014d56:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8014d58:	4b33      	ldr	r3, [pc, #204]	; (8014e28 <ip4_route+0xd8>)
 8014d5a:	681b      	ldr	r3, [r3, #0]
 8014d5c:	60fb      	str	r3, [r7, #12]
 8014d5e:	e036      	b.n	8014dce <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014d60:	68fb      	ldr	r3, [r7, #12]
 8014d62:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014d66:	f003 0301 	and.w	r3, r3, #1
 8014d6a:	b2db      	uxtb	r3, r3
 8014d6c:	2b00      	cmp	r3, #0
 8014d6e:	d02b      	beq.n	8014dc8 <ip4_route+0x78>
 8014d70:	68fb      	ldr	r3, [r7, #12]
 8014d72:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014d76:	089b      	lsrs	r3, r3, #2
 8014d78:	f003 0301 	and.w	r3, r3, #1
 8014d7c:	b2db      	uxtb	r3, r3
 8014d7e:	2b00      	cmp	r3, #0
 8014d80:	d022      	beq.n	8014dc8 <ip4_route+0x78>
 8014d82:	68fb      	ldr	r3, [r7, #12]
 8014d84:	3304      	adds	r3, #4
 8014d86:	681b      	ldr	r3, [r3, #0]
 8014d88:	2b00      	cmp	r3, #0
 8014d8a:	d01d      	beq.n	8014dc8 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8014d8c:	687b      	ldr	r3, [r7, #4]
 8014d8e:	681a      	ldr	r2, [r3, #0]
 8014d90:	68fb      	ldr	r3, [r7, #12]
 8014d92:	3304      	adds	r3, #4
 8014d94:	681b      	ldr	r3, [r3, #0]
 8014d96:	405a      	eors	r2, r3
 8014d98:	68fb      	ldr	r3, [r7, #12]
 8014d9a:	3308      	adds	r3, #8
 8014d9c:	681b      	ldr	r3, [r3, #0]
 8014d9e:	4013      	ands	r3, r2
 8014da0:	2b00      	cmp	r3, #0
 8014da2:	d101      	bne.n	8014da8 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8014da4:	68fb      	ldr	r3, [r7, #12]
 8014da6:	e038      	b.n	8014e1a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8014da8:	68fb      	ldr	r3, [r7, #12]
 8014daa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014dae:	f003 0302 	and.w	r3, r3, #2
 8014db2:	2b00      	cmp	r3, #0
 8014db4:	d108      	bne.n	8014dc8 <ip4_route+0x78>
 8014db6:	687b      	ldr	r3, [r7, #4]
 8014db8:	681a      	ldr	r2, [r3, #0]
 8014dba:	68fb      	ldr	r3, [r7, #12]
 8014dbc:	330c      	adds	r3, #12
 8014dbe:	681b      	ldr	r3, [r3, #0]
 8014dc0:	429a      	cmp	r2, r3
 8014dc2:	d101      	bne.n	8014dc8 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8014dc4:	68fb      	ldr	r3, [r7, #12]
 8014dc6:	e028      	b.n	8014e1a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8014dc8:	68fb      	ldr	r3, [r7, #12]
 8014dca:	681b      	ldr	r3, [r3, #0]
 8014dcc:	60fb      	str	r3, [r7, #12]
 8014dce:	68fb      	ldr	r3, [r7, #12]
 8014dd0:	2b00      	cmp	r3, #0
 8014dd2:	d1c5      	bne.n	8014d60 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8014dd4:	4b15      	ldr	r3, [pc, #84]	; (8014e2c <ip4_route+0xdc>)
 8014dd6:	681b      	ldr	r3, [r3, #0]
 8014dd8:	2b00      	cmp	r3, #0
 8014dda:	d01a      	beq.n	8014e12 <ip4_route+0xc2>
 8014ddc:	4b13      	ldr	r3, [pc, #76]	; (8014e2c <ip4_route+0xdc>)
 8014dde:	681b      	ldr	r3, [r3, #0]
 8014de0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014de4:	f003 0301 	and.w	r3, r3, #1
 8014de8:	2b00      	cmp	r3, #0
 8014dea:	d012      	beq.n	8014e12 <ip4_route+0xc2>
 8014dec:	4b0f      	ldr	r3, [pc, #60]	; (8014e2c <ip4_route+0xdc>)
 8014dee:	681b      	ldr	r3, [r3, #0]
 8014df0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014df4:	f003 0304 	and.w	r3, r3, #4
 8014df8:	2b00      	cmp	r3, #0
 8014dfa:	d00a      	beq.n	8014e12 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8014dfc:	4b0b      	ldr	r3, [pc, #44]	; (8014e2c <ip4_route+0xdc>)
 8014dfe:	681b      	ldr	r3, [r3, #0]
 8014e00:	3304      	adds	r3, #4
 8014e02:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8014e04:	2b00      	cmp	r3, #0
 8014e06:	d004      	beq.n	8014e12 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8014e08:	687b      	ldr	r3, [r7, #4]
 8014e0a:	681b      	ldr	r3, [r3, #0]
 8014e0c:	b2db      	uxtb	r3, r3
 8014e0e:	2b7f      	cmp	r3, #127	; 0x7f
 8014e10:	d101      	bne.n	8014e16 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8014e12:	2300      	movs	r3, #0
 8014e14:	e001      	b.n	8014e1a <ip4_route+0xca>
  }

  return netif_default;
 8014e16:	4b05      	ldr	r3, [pc, #20]	; (8014e2c <ip4_route+0xdc>)
 8014e18:	681b      	ldr	r3, [r3, #0]
}
 8014e1a:	4618      	mov	r0, r3
 8014e1c:	3714      	adds	r7, #20
 8014e1e:	46bd      	mov	sp, r7
 8014e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e24:	4770      	bx	lr
 8014e26:	bf00      	nop
 8014e28:	2001aea8 	.word	0x2001aea8
 8014e2c:	2001aeac 	.word	0x2001aeac

08014e30 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8014e30:	b580      	push	{r7, lr}
 8014e32:	b082      	sub	sp, #8
 8014e34:	af00      	add	r7, sp, #0
 8014e36:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8014e38:	687b      	ldr	r3, [r7, #4]
 8014e3a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014e3e:	f003 0301 	and.w	r3, r3, #1
 8014e42:	b2db      	uxtb	r3, r3
 8014e44:	2b00      	cmp	r3, #0
 8014e46:	d016      	beq.n	8014e76 <ip4_input_accept+0x46>
 8014e48:	687b      	ldr	r3, [r7, #4]
 8014e4a:	3304      	adds	r3, #4
 8014e4c:	681b      	ldr	r3, [r3, #0]
 8014e4e:	2b00      	cmp	r3, #0
 8014e50:	d011      	beq.n	8014e76 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8014e52:	4b0b      	ldr	r3, [pc, #44]	; (8014e80 <ip4_input_accept+0x50>)
 8014e54:	695a      	ldr	r2, [r3, #20]
 8014e56:	687b      	ldr	r3, [r7, #4]
 8014e58:	3304      	adds	r3, #4
 8014e5a:	681b      	ldr	r3, [r3, #0]
 8014e5c:	429a      	cmp	r2, r3
 8014e5e:	d008      	beq.n	8014e72 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8014e60:	4b07      	ldr	r3, [pc, #28]	; (8014e80 <ip4_input_accept+0x50>)
 8014e62:	695b      	ldr	r3, [r3, #20]
 8014e64:	6879      	ldr	r1, [r7, #4]
 8014e66:	4618      	mov	r0, r3
 8014e68:	f000 fa26 	bl	80152b8 <ip4_addr_isbroadcast_u32>
 8014e6c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8014e6e:	2b00      	cmp	r3, #0
 8014e70:	d001      	beq.n	8014e76 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8014e72:	2301      	movs	r3, #1
 8014e74:	e000      	b.n	8014e78 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8014e76:	2300      	movs	r3, #0
}
 8014e78:	4618      	mov	r0, r3
 8014e7a:	3708      	adds	r7, #8
 8014e7c:	46bd      	mov	sp, r7
 8014e7e:	bd80      	pop	{r7, pc}
 8014e80:	20016980 	.word	0x20016980

08014e84 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8014e84:	b580      	push	{r7, lr}
 8014e86:	b088      	sub	sp, #32
 8014e88:	af00      	add	r7, sp, #0
 8014e8a:	6078      	str	r0, [r7, #4]
 8014e8c:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8014e8e:	2301      	movs	r3, #1
 8014e90:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8014e92:	687b      	ldr	r3, [r7, #4]
 8014e94:	685b      	ldr	r3, [r3, #4]
 8014e96:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8014e98:	69fb      	ldr	r3, [r7, #28]
 8014e9a:	781b      	ldrb	r3, [r3, #0]
 8014e9c:	091b      	lsrs	r3, r3, #4
 8014e9e:	b2db      	uxtb	r3, r3
 8014ea0:	2b04      	cmp	r3, #4
 8014ea2:	d004      	beq.n	8014eae <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8014ea4:	6878      	ldr	r0, [r7, #4]
 8014ea6:	f7f5 fe05 	bl	800aab4 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8014eaa:	2300      	movs	r3, #0
 8014eac:	e123      	b.n	80150f6 <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8014eae:	69fb      	ldr	r3, [r7, #28]
 8014eb0:	781b      	ldrb	r3, [r3, #0]
 8014eb2:	f003 030f 	and.w	r3, r3, #15
 8014eb6:	b2db      	uxtb	r3, r3
 8014eb8:	009b      	lsls	r3, r3, #2
 8014eba:	b2db      	uxtb	r3, r3
 8014ebc:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8014ebe:	69fb      	ldr	r3, [r7, #28]
 8014ec0:	885b      	ldrh	r3, [r3, #2]
 8014ec2:	b29b      	uxth	r3, r3
 8014ec4:	4618      	mov	r0, r3
 8014ec6:	f7f4 fa15 	bl	80092f4 <lwip_htons>
 8014eca:	4603      	mov	r3, r0
 8014ecc:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8014ece:	687b      	ldr	r3, [r7, #4]
 8014ed0:	891b      	ldrh	r3, [r3, #8]
 8014ed2:	8a3a      	ldrh	r2, [r7, #16]
 8014ed4:	429a      	cmp	r2, r3
 8014ed6:	d204      	bcs.n	8014ee2 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8014ed8:	8a3b      	ldrh	r3, [r7, #16]
 8014eda:	4619      	mov	r1, r3
 8014edc:	6878      	ldr	r0, [r7, #4]
 8014ede:	f7f5 fc63 	bl	800a7a8 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8014ee2:	687b      	ldr	r3, [r7, #4]
 8014ee4:	895b      	ldrh	r3, [r3, #10]
 8014ee6:	8a7a      	ldrh	r2, [r7, #18]
 8014ee8:	429a      	cmp	r2, r3
 8014eea:	d807      	bhi.n	8014efc <ip4_input+0x78>
 8014eec:	687b      	ldr	r3, [r7, #4]
 8014eee:	891b      	ldrh	r3, [r3, #8]
 8014ef0:	8a3a      	ldrh	r2, [r7, #16]
 8014ef2:	429a      	cmp	r2, r3
 8014ef4:	d802      	bhi.n	8014efc <ip4_input+0x78>
 8014ef6:	8a7b      	ldrh	r3, [r7, #18]
 8014ef8:	2b13      	cmp	r3, #19
 8014efa:	d804      	bhi.n	8014f06 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8014efc:	6878      	ldr	r0, [r7, #4]
 8014efe:	f7f5 fdd9 	bl	800aab4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8014f02:	2300      	movs	r3, #0
 8014f04:	e0f7      	b.n	80150f6 <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8014f06:	69fb      	ldr	r3, [r7, #28]
 8014f08:	691b      	ldr	r3, [r3, #16]
 8014f0a:	4a7d      	ldr	r2, [pc, #500]	; (8015100 <ip4_input+0x27c>)
 8014f0c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8014f0e:	69fb      	ldr	r3, [r7, #28]
 8014f10:	68db      	ldr	r3, [r3, #12]
 8014f12:	4a7b      	ldr	r2, [pc, #492]	; (8015100 <ip4_input+0x27c>)
 8014f14:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014f16:	4b7a      	ldr	r3, [pc, #488]	; (8015100 <ip4_input+0x27c>)
 8014f18:	695b      	ldr	r3, [r3, #20]
 8014f1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014f1e:	2be0      	cmp	r3, #224	; 0xe0
 8014f20:	d112      	bne.n	8014f48 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8014f22:	683b      	ldr	r3, [r7, #0]
 8014f24:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014f28:	f003 0301 	and.w	r3, r3, #1
 8014f2c:	b2db      	uxtb	r3, r3
 8014f2e:	2b00      	cmp	r3, #0
 8014f30:	d007      	beq.n	8014f42 <ip4_input+0xbe>
 8014f32:	683b      	ldr	r3, [r7, #0]
 8014f34:	3304      	adds	r3, #4
 8014f36:	681b      	ldr	r3, [r3, #0]
 8014f38:	2b00      	cmp	r3, #0
 8014f3a:	d002      	beq.n	8014f42 <ip4_input+0xbe>
      netif = inp;
 8014f3c:	683b      	ldr	r3, [r7, #0]
 8014f3e:	61bb      	str	r3, [r7, #24]
 8014f40:	e02a      	b.n	8014f98 <ip4_input+0x114>
    } else {
      netif = NULL;
 8014f42:	2300      	movs	r3, #0
 8014f44:	61bb      	str	r3, [r7, #24]
 8014f46:	e027      	b.n	8014f98 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8014f48:	6838      	ldr	r0, [r7, #0]
 8014f4a:	f7ff ff71 	bl	8014e30 <ip4_input_accept>
 8014f4e:	4603      	mov	r3, r0
 8014f50:	2b00      	cmp	r3, #0
 8014f52:	d002      	beq.n	8014f5a <ip4_input+0xd6>
      netif = inp;
 8014f54:	683b      	ldr	r3, [r7, #0]
 8014f56:	61bb      	str	r3, [r7, #24]
 8014f58:	e01e      	b.n	8014f98 <ip4_input+0x114>
    } else {
      netif = NULL;
 8014f5a:	2300      	movs	r3, #0
 8014f5c:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8014f5e:	4b68      	ldr	r3, [pc, #416]	; (8015100 <ip4_input+0x27c>)
 8014f60:	695b      	ldr	r3, [r3, #20]
 8014f62:	b2db      	uxtb	r3, r3
 8014f64:	2b7f      	cmp	r3, #127	; 0x7f
 8014f66:	d017      	beq.n	8014f98 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8014f68:	4b66      	ldr	r3, [pc, #408]	; (8015104 <ip4_input+0x280>)
 8014f6a:	681b      	ldr	r3, [r3, #0]
 8014f6c:	61bb      	str	r3, [r7, #24]
 8014f6e:	e00e      	b.n	8014f8e <ip4_input+0x10a>
          if (netif == inp) {
 8014f70:	69ba      	ldr	r2, [r7, #24]
 8014f72:	683b      	ldr	r3, [r7, #0]
 8014f74:	429a      	cmp	r2, r3
 8014f76:	d006      	beq.n	8014f86 <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8014f78:	69b8      	ldr	r0, [r7, #24]
 8014f7a:	f7ff ff59 	bl	8014e30 <ip4_input_accept>
 8014f7e:	4603      	mov	r3, r0
 8014f80:	2b00      	cmp	r3, #0
 8014f82:	d108      	bne.n	8014f96 <ip4_input+0x112>
 8014f84:	e000      	b.n	8014f88 <ip4_input+0x104>
            continue;
 8014f86:	bf00      	nop
        NETIF_FOREACH(netif) {
 8014f88:	69bb      	ldr	r3, [r7, #24]
 8014f8a:	681b      	ldr	r3, [r3, #0]
 8014f8c:	61bb      	str	r3, [r7, #24]
 8014f8e:	69bb      	ldr	r3, [r7, #24]
 8014f90:	2b00      	cmp	r3, #0
 8014f92:	d1ed      	bne.n	8014f70 <ip4_input+0xec>
 8014f94:	e000      	b.n	8014f98 <ip4_input+0x114>
            break;
 8014f96:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8014f98:	69bb      	ldr	r3, [r7, #24]
 8014f9a:	2b00      	cmp	r3, #0
 8014f9c:	d111      	bne.n	8014fc2 <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8014f9e:	69fb      	ldr	r3, [r7, #28]
 8014fa0:	7a5b      	ldrb	r3, [r3, #9]
 8014fa2:	2b11      	cmp	r3, #17
 8014fa4:	d10d      	bne.n	8014fc2 <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8014fa6:	8a7b      	ldrh	r3, [r7, #18]
 8014fa8:	69fa      	ldr	r2, [r7, #28]
 8014faa:	4413      	add	r3, r2
 8014fac:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8014fae:	68fb      	ldr	r3, [r7, #12]
 8014fb0:	885b      	ldrh	r3, [r3, #2]
 8014fb2:	b29b      	uxth	r3, r3
 8014fb4:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8014fb8:	d103      	bne.n	8014fc2 <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8014fba:	683b      	ldr	r3, [r7, #0]
 8014fbc:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8014fbe:	2300      	movs	r3, #0
 8014fc0:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8014fc2:	697b      	ldr	r3, [r7, #20]
 8014fc4:	2b00      	cmp	r3, #0
 8014fc6:	d017      	beq.n	8014ff8 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8014fc8:	4b4d      	ldr	r3, [pc, #308]	; (8015100 <ip4_input+0x27c>)
 8014fca:	691b      	ldr	r3, [r3, #16]
 8014fcc:	2b00      	cmp	r3, #0
 8014fce:	d013      	beq.n	8014ff8 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8014fd0:	4b4b      	ldr	r3, [pc, #300]	; (8015100 <ip4_input+0x27c>)
 8014fd2:	691b      	ldr	r3, [r3, #16]
 8014fd4:	6839      	ldr	r1, [r7, #0]
 8014fd6:	4618      	mov	r0, r3
 8014fd8:	f000 f96e 	bl	80152b8 <ip4_addr_isbroadcast_u32>
 8014fdc:	4603      	mov	r3, r0
 8014fde:	2b00      	cmp	r3, #0
 8014fe0:	d105      	bne.n	8014fee <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8014fe2:	4b47      	ldr	r3, [pc, #284]	; (8015100 <ip4_input+0x27c>)
 8014fe4:	691b      	ldr	r3, [r3, #16]
 8014fe6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8014fea:	2be0      	cmp	r3, #224	; 0xe0
 8014fec:	d104      	bne.n	8014ff8 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8014fee:	6878      	ldr	r0, [r7, #4]
 8014ff0:	f7f5 fd60 	bl	800aab4 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8014ff4:	2300      	movs	r3, #0
 8014ff6:	e07e      	b.n	80150f6 <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8014ff8:	69bb      	ldr	r3, [r7, #24]
 8014ffa:	2b00      	cmp	r3, #0
 8014ffc:	d104      	bne.n	8015008 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8014ffe:	6878      	ldr	r0, [r7, #4]
 8015000:	f7f5 fd58 	bl	800aab4 <pbuf_free>
    return ERR_OK;
 8015004:	2300      	movs	r3, #0
 8015006:	e076      	b.n	80150f6 <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8015008:	69fb      	ldr	r3, [r7, #28]
 801500a:	88db      	ldrh	r3, [r3, #6]
 801500c:	b29b      	uxth	r3, r3
 801500e:	461a      	mov	r2, r3
 8015010:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8015014:	4013      	ands	r3, r2
 8015016:	2b00      	cmp	r3, #0
 8015018:	d00b      	beq.n	8015032 <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801501a:	6878      	ldr	r0, [r7, #4]
 801501c:	f000 fc92 	bl	8015944 <ip4_reass>
 8015020:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8015022:	687b      	ldr	r3, [r7, #4]
 8015024:	2b00      	cmp	r3, #0
 8015026:	d101      	bne.n	801502c <ip4_input+0x1a8>
      return ERR_OK;
 8015028:	2300      	movs	r3, #0
 801502a:	e064      	b.n	80150f6 <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801502c:	687b      	ldr	r3, [r7, #4]
 801502e:	685b      	ldr	r3, [r3, #4]
 8015030:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8015032:	4a33      	ldr	r2, [pc, #204]	; (8015100 <ip4_input+0x27c>)
 8015034:	69bb      	ldr	r3, [r7, #24]
 8015036:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8015038:	4a31      	ldr	r2, [pc, #196]	; (8015100 <ip4_input+0x27c>)
 801503a:	683b      	ldr	r3, [r7, #0]
 801503c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801503e:	4a30      	ldr	r2, [pc, #192]	; (8015100 <ip4_input+0x27c>)
 8015040:	69fb      	ldr	r3, [r7, #28]
 8015042:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8015044:	69fb      	ldr	r3, [r7, #28]
 8015046:	781b      	ldrb	r3, [r3, #0]
 8015048:	f003 030f 	and.w	r3, r3, #15
 801504c:	b2db      	uxtb	r3, r3
 801504e:	009b      	lsls	r3, r3, #2
 8015050:	b2db      	uxtb	r3, r3
 8015052:	b29a      	uxth	r2, r3
 8015054:	4b2a      	ldr	r3, [pc, #168]	; (8015100 <ip4_input+0x27c>)
 8015056:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8015058:	8a7b      	ldrh	r3, [r7, #18]
 801505a:	4619      	mov	r1, r3
 801505c:	6878      	ldr	r0, [r7, #4]
 801505e:	f7f5 fca3 	bl	800a9a8 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8015062:	69fb      	ldr	r3, [r7, #28]
 8015064:	7a5b      	ldrb	r3, [r3, #9]
 8015066:	2b11      	cmp	r3, #17
 8015068:	d006      	beq.n	8015078 <ip4_input+0x1f4>
 801506a:	2b11      	cmp	r3, #17
 801506c:	dc13      	bgt.n	8015096 <ip4_input+0x212>
 801506e:	2b01      	cmp	r3, #1
 8015070:	d00c      	beq.n	801508c <ip4_input+0x208>
 8015072:	2b06      	cmp	r3, #6
 8015074:	d005      	beq.n	8015082 <ip4_input+0x1fe>
 8015076:	e00e      	b.n	8015096 <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8015078:	6839      	ldr	r1, [r7, #0]
 801507a:	6878      	ldr	r0, [r7, #4]
 801507c:	f7fc faea 	bl	8011654 <udp_input>
        break;
 8015080:	e026      	b.n	80150d0 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8015082:	6839      	ldr	r1, [r7, #0]
 8015084:	6878      	ldr	r0, [r7, #4]
 8015086:	f7f7 fe69 	bl	800cd5c <tcp_input>
        break;
 801508a:	e021      	b.n	80150d0 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801508c:	6839      	ldr	r1, [r7, #0]
 801508e:	6878      	ldr	r0, [r7, #4]
 8015090:	f7ff fcd0 	bl	8014a34 <icmp_input>
        break;
 8015094:	e01c      	b.n	80150d0 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015096:	4b1a      	ldr	r3, [pc, #104]	; (8015100 <ip4_input+0x27c>)
 8015098:	695b      	ldr	r3, [r3, #20]
 801509a:	69b9      	ldr	r1, [r7, #24]
 801509c:	4618      	mov	r0, r3
 801509e:	f000 f90b 	bl	80152b8 <ip4_addr_isbroadcast_u32>
 80150a2:	4603      	mov	r3, r0
 80150a4:	2b00      	cmp	r3, #0
 80150a6:	d10f      	bne.n	80150c8 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80150a8:	4b15      	ldr	r3, [pc, #84]	; (8015100 <ip4_input+0x27c>)
 80150aa:	695b      	ldr	r3, [r3, #20]
 80150ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80150b0:	2be0      	cmp	r3, #224	; 0xe0
 80150b2:	d009      	beq.n	80150c8 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80150b4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80150b8:	4619      	mov	r1, r3
 80150ba:	6878      	ldr	r0, [r7, #4]
 80150bc:	f7f5 fce7 	bl	800aa8e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80150c0:	2102      	movs	r1, #2
 80150c2:	6878      	ldr	r0, [r7, #4]
 80150c4:	f7ff fdba 	bl	8014c3c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80150c8:	6878      	ldr	r0, [r7, #4]
 80150ca:	f7f5 fcf3 	bl	800aab4 <pbuf_free>
        break;
 80150ce:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80150d0:	4b0b      	ldr	r3, [pc, #44]	; (8015100 <ip4_input+0x27c>)
 80150d2:	2200      	movs	r2, #0
 80150d4:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80150d6:	4b0a      	ldr	r3, [pc, #40]	; (8015100 <ip4_input+0x27c>)
 80150d8:	2200      	movs	r2, #0
 80150da:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80150dc:	4b08      	ldr	r3, [pc, #32]	; (8015100 <ip4_input+0x27c>)
 80150de:	2200      	movs	r2, #0
 80150e0:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80150e2:	4b07      	ldr	r3, [pc, #28]	; (8015100 <ip4_input+0x27c>)
 80150e4:	2200      	movs	r2, #0
 80150e6:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80150e8:	4b05      	ldr	r3, [pc, #20]	; (8015100 <ip4_input+0x27c>)
 80150ea:	2200      	movs	r2, #0
 80150ec:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80150ee:	4b04      	ldr	r3, [pc, #16]	; (8015100 <ip4_input+0x27c>)
 80150f0:	2200      	movs	r2, #0
 80150f2:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80150f4:	2300      	movs	r3, #0
}
 80150f6:	4618      	mov	r0, r3
 80150f8:	3720      	adds	r7, #32
 80150fa:	46bd      	mov	sp, r7
 80150fc:	bd80      	pop	{r7, pc}
 80150fe:	bf00      	nop
 8015100:	20016980 	.word	0x20016980
 8015104:	2001aea8 	.word	0x2001aea8

08015108 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8015108:	b580      	push	{r7, lr}
 801510a:	b08a      	sub	sp, #40	; 0x28
 801510c:	af04      	add	r7, sp, #16
 801510e:	60f8      	str	r0, [r7, #12]
 8015110:	60b9      	str	r1, [r7, #8]
 8015112:	607a      	str	r2, [r7, #4]
 8015114:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8015116:	68bb      	ldr	r3, [r7, #8]
 8015118:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801511a:	687b      	ldr	r3, [r7, #4]
 801511c:	2b00      	cmp	r3, #0
 801511e:	d009      	beq.n	8015134 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8015120:	68bb      	ldr	r3, [r7, #8]
 8015122:	2b00      	cmp	r3, #0
 8015124:	d003      	beq.n	801512e <ip4_output_if+0x26>
 8015126:	68bb      	ldr	r3, [r7, #8]
 8015128:	681b      	ldr	r3, [r3, #0]
 801512a:	2b00      	cmp	r3, #0
 801512c:	d102      	bne.n	8015134 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801512e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015130:	3304      	adds	r3, #4
 8015132:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8015134:	78fa      	ldrb	r2, [r7, #3]
 8015136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015138:	9302      	str	r3, [sp, #8]
 801513a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801513e:	9301      	str	r3, [sp, #4]
 8015140:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015144:	9300      	str	r3, [sp, #0]
 8015146:	4613      	mov	r3, r2
 8015148:	687a      	ldr	r2, [r7, #4]
 801514a:	6979      	ldr	r1, [r7, #20]
 801514c:	68f8      	ldr	r0, [r7, #12]
 801514e:	f000 f805 	bl	801515c <ip4_output_if_src>
 8015152:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8015154:	4618      	mov	r0, r3
 8015156:	3718      	adds	r7, #24
 8015158:	46bd      	mov	sp, r7
 801515a:	bd80      	pop	{r7, pc}

0801515c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801515c:	b580      	push	{r7, lr}
 801515e:	b088      	sub	sp, #32
 8015160:	af00      	add	r7, sp, #0
 8015162:	60f8      	str	r0, [r7, #12]
 8015164:	60b9      	str	r1, [r7, #8]
 8015166:	607a      	str	r2, [r7, #4]
 8015168:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801516a:	68fb      	ldr	r3, [r7, #12]
 801516c:	7b9b      	ldrb	r3, [r3, #14]
 801516e:	2b01      	cmp	r3, #1
 8015170:	d006      	beq.n	8015180 <ip4_output_if_src+0x24>
 8015172:	4b4b      	ldr	r3, [pc, #300]	; (80152a0 <ip4_output_if_src+0x144>)
 8015174:	f44f 7255 	mov.w	r2, #852	; 0x354
 8015178:	494a      	ldr	r1, [pc, #296]	; (80152a4 <ip4_output_if_src+0x148>)
 801517a:	484b      	ldr	r0, [pc, #300]	; (80152a8 <ip4_output_if_src+0x14c>)
 801517c:	f001 f948 	bl	8016410 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8015180:	687b      	ldr	r3, [r7, #4]
 8015182:	2b00      	cmp	r3, #0
 8015184:	d060      	beq.n	8015248 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8015186:	2314      	movs	r3, #20
 8015188:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801518a:	2114      	movs	r1, #20
 801518c:	68f8      	ldr	r0, [r7, #12]
 801518e:	f7f5 fbfb 	bl	800a988 <pbuf_add_header>
 8015192:	4603      	mov	r3, r0
 8015194:	2b00      	cmp	r3, #0
 8015196:	d002      	beq.n	801519e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015198:	f06f 0301 	mvn.w	r3, #1
 801519c:	e07c      	b.n	8015298 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801519e:	68fb      	ldr	r3, [r7, #12]
 80151a0:	685b      	ldr	r3, [r3, #4]
 80151a2:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80151a4:	68fb      	ldr	r3, [r7, #12]
 80151a6:	895b      	ldrh	r3, [r3, #10]
 80151a8:	2b13      	cmp	r3, #19
 80151aa:	d806      	bhi.n	80151ba <ip4_output_if_src+0x5e>
 80151ac:	4b3c      	ldr	r3, [pc, #240]	; (80152a0 <ip4_output_if_src+0x144>)
 80151ae:	f44f 7262 	mov.w	r2, #904	; 0x388
 80151b2:	493e      	ldr	r1, [pc, #248]	; (80152ac <ip4_output_if_src+0x150>)
 80151b4:	483c      	ldr	r0, [pc, #240]	; (80152a8 <ip4_output_if_src+0x14c>)
 80151b6:	f001 f92b 	bl	8016410 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80151ba:	69fb      	ldr	r3, [r7, #28]
 80151bc:	78fa      	ldrb	r2, [r7, #3]
 80151be:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80151c0:	69fb      	ldr	r3, [r7, #28]
 80151c2:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80151c6:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80151c8:	687b      	ldr	r3, [r7, #4]
 80151ca:	681a      	ldr	r2, [r3, #0]
 80151cc:	69fb      	ldr	r3, [r7, #28]
 80151ce:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80151d0:	8b7b      	ldrh	r3, [r7, #26]
 80151d2:	089b      	lsrs	r3, r3, #2
 80151d4:	b29b      	uxth	r3, r3
 80151d6:	b2db      	uxtb	r3, r3
 80151d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80151dc:	b2da      	uxtb	r2, r3
 80151de:	69fb      	ldr	r3, [r7, #28]
 80151e0:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80151e2:	69fb      	ldr	r3, [r7, #28]
 80151e4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80151e8:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80151ea:	68fb      	ldr	r3, [r7, #12]
 80151ec:	891b      	ldrh	r3, [r3, #8]
 80151ee:	4618      	mov	r0, r3
 80151f0:	f7f4 f880 	bl	80092f4 <lwip_htons>
 80151f4:	4603      	mov	r3, r0
 80151f6:	461a      	mov	r2, r3
 80151f8:	69fb      	ldr	r3, [r7, #28]
 80151fa:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80151fc:	69fb      	ldr	r3, [r7, #28]
 80151fe:	2200      	movs	r2, #0
 8015200:	719a      	strb	r2, [r3, #6]
 8015202:	2200      	movs	r2, #0
 8015204:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8015206:	4b2a      	ldr	r3, [pc, #168]	; (80152b0 <ip4_output_if_src+0x154>)
 8015208:	881b      	ldrh	r3, [r3, #0]
 801520a:	4618      	mov	r0, r3
 801520c:	f7f4 f872 	bl	80092f4 <lwip_htons>
 8015210:	4603      	mov	r3, r0
 8015212:	461a      	mov	r2, r3
 8015214:	69fb      	ldr	r3, [r7, #28]
 8015216:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8015218:	4b25      	ldr	r3, [pc, #148]	; (80152b0 <ip4_output_if_src+0x154>)
 801521a:	881b      	ldrh	r3, [r3, #0]
 801521c:	3301      	adds	r3, #1
 801521e:	b29a      	uxth	r2, r3
 8015220:	4b23      	ldr	r3, [pc, #140]	; (80152b0 <ip4_output_if_src+0x154>)
 8015222:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8015224:	68bb      	ldr	r3, [r7, #8]
 8015226:	2b00      	cmp	r3, #0
 8015228:	d104      	bne.n	8015234 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801522a:	4b22      	ldr	r3, [pc, #136]	; (80152b4 <ip4_output_if_src+0x158>)
 801522c:	681a      	ldr	r2, [r3, #0]
 801522e:	69fb      	ldr	r3, [r7, #28]
 8015230:	60da      	str	r2, [r3, #12]
 8015232:	e003      	b.n	801523c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8015234:	68bb      	ldr	r3, [r7, #8]
 8015236:	681a      	ldr	r2, [r3, #0]
 8015238:	69fb      	ldr	r3, [r7, #28]
 801523a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801523c:	69fb      	ldr	r3, [r7, #28]
 801523e:	2200      	movs	r2, #0
 8015240:	729a      	strb	r2, [r3, #10]
 8015242:	2200      	movs	r2, #0
 8015244:	72da      	strb	r2, [r3, #11]
 8015246:	e00f      	b.n	8015268 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8015248:	68fb      	ldr	r3, [r7, #12]
 801524a:	895b      	ldrh	r3, [r3, #10]
 801524c:	2b13      	cmp	r3, #19
 801524e:	d802      	bhi.n	8015256 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015250:	f06f 0301 	mvn.w	r3, #1
 8015254:	e020      	b.n	8015298 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8015256:	68fb      	ldr	r3, [r7, #12]
 8015258:	685b      	ldr	r3, [r3, #4]
 801525a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801525c:	69fb      	ldr	r3, [r7, #28]
 801525e:	691b      	ldr	r3, [r3, #16]
 8015260:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8015262:	f107 0314 	add.w	r3, r7, #20
 8015266:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8015268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801526a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801526c:	2b00      	cmp	r3, #0
 801526e:	d00c      	beq.n	801528a <ip4_output_if_src+0x12e>
 8015270:	68fb      	ldr	r3, [r7, #12]
 8015272:	891a      	ldrh	r2, [r3, #8]
 8015274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015276:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015278:	429a      	cmp	r2, r3
 801527a:	d906      	bls.n	801528a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801527c:	687a      	ldr	r2, [r7, #4]
 801527e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015280:	68f8      	ldr	r0, [r7, #12]
 8015282:	f000 fd53 	bl	8015d2c <ip4_frag>
 8015286:	4603      	mov	r3, r0
 8015288:	e006      	b.n	8015298 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801528a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801528c:	695b      	ldr	r3, [r3, #20]
 801528e:	687a      	ldr	r2, [r7, #4]
 8015290:	68f9      	ldr	r1, [r7, #12]
 8015292:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015294:	4798      	blx	r3
 8015296:	4603      	mov	r3, r0
}
 8015298:	4618      	mov	r0, r3
 801529a:	3720      	adds	r7, #32
 801529c:	46bd      	mov	sp, r7
 801529e:	bd80      	pop	{r7, pc}
 80152a0:	0801ae84 	.word	0x0801ae84
 80152a4:	0801aeb8 	.word	0x0801aeb8
 80152a8:	0801aec4 	.word	0x0801aec4
 80152ac:	0801aeec 	.word	0x0801aeec
 80152b0:	2001b03a 	.word	0x2001b03a
 80152b4:	0801b32c 	.word	0x0801b32c

080152b8 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80152b8:	b480      	push	{r7}
 80152ba:	b085      	sub	sp, #20
 80152bc:	af00      	add	r7, sp, #0
 80152be:	6078      	str	r0, [r7, #4]
 80152c0:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80152c2:	687b      	ldr	r3, [r7, #4]
 80152c4:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80152c6:	687b      	ldr	r3, [r7, #4]
 80152c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80152cc:	d002      	beq.n	80152d4 <ip4_addr_isbroadcast_u32+0x1c>
 80152ce:	687b      	ldr	r3, [r7, #4]
 80152d0:	2b00      	cmp	r3, #0
 80152d2:	d101      	bne.n	80152d8 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80152d4:	2301      	movs	r3, #1
 80152d6:	e02a      	b.n	801532e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80152d8:	683b      	ldr	r3, [r7, #0]
 80152da:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80152de:	f003 0302 	and.w	r3, r3, #2
 80152e2:	2b00      	cmp	r3, #0
 80152e4:	d101      	bne.n	80152ea <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80152e6:	2300      	movs	r3, #0
 80152e8:	e021      	b.n	801532e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80152ea:	683b      	ldr	r3, [r7, #0]
 80152ec:	3304      	adds	r3, #4
 80152ee:	681b      	ldr	r3, [r3, #0]
 80152f0:	687a      	ldr	r2, [r7, #4]
 80152f2:	429a      	cmp	r2, r3
 80152f4:	d101      	bne.n	80152fa <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80152f6:	2300      	movs	r3, #0
 80152f8:	e019      	b.n	801532e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80152fa:	68fa      	ldr	r2, [r7, #12]
 80152fc:	683b      	ldr	r3, [r7, #0]
 80152fe:	3304      	adds	r3, #4
 8015300:	681b      	ldr	r3, [r3, #0]
 8015302:	405a      	eors	r2, r3
 8015304:	683b      	ldr	r3, [r7, #0]
 8015306:	3308      	adds	r3, #8
 8015308:	681b      	ldr	r3, [r3, #0]
 801530a:	4013      	ands	r3, r2
 801530c:	2b00      	cmp	r3, #0
 801530e:	d10d      	bne.n	801532c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015310:	683b      	ldr	r3, [r7, #0]
 8015312:	3308      	adds	r3, #8
 8015314:	681b      	ldr	r3, [r3, #0]
 8015316:	43da      	mvns	r2, r3
 8015318:	687b      	ldr	r3, [r7, #4]
 801531a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801531c:	683b      	ldr	r3, [r7, #0]
 801531e:	3308      	adds	r3, #8
 8015320:	681b      	ldr	r3, [r3, #0]
 8015322:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015324:	429a      	cmp	r2, r3
 8015326:	d101      	bne.n	801532c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8015328:	2301      	movs	r3, #1
 801532a:	e000      	b.n	801532e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801532c:	2300      	movs	r3, #0
  }
}
 801532e:	4618      	mov	r0, r3
 8015330:	3714      	adds	r7, #20
 8015332:	46bd      	mov	sp, r7
 8015334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015338:	4770      	bx	lr
	...

0801533c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801533c:	b580      	push	{r7, lr}
 801533e:	b084      	sub	sp, #16
 8015340:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8015342:	2300      	movs	r3, #0
 8015344:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8015346:	4b12      	ldr	r3, [pc, #72]	; (8015390 <ip_reass_tmr+0x54>)
 8015348:	681b      	ldr	r3, [r3, #0]
 801534a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801534c:	e018      	b.n	8015380 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801534e:	68fb      	ldr	r3, [r7, #12]
 8015350:	7fdb      	ldrb	r3, [r3, #31]
 8015352:	2b00      	cmp	r3, #0
 8015354:	d00b      	beq.n	801536e <ip_reass_tmr+0x32>
      r->timer--;
 8015356:	68fb      	ldr	r3, [r7, #12]
 8015358:	7fdb      	ldrb	r3, [r3, #31]
 801535a:	3b01      	subs	r3, #1
 801535c:	b2da      	uxtb	r2, r3
 801535e:	68fb      	ldr	r3, [r7, #12]
 8015360:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8015362:	68fb      	ldr	r3, [r7, #12]
 8015364:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8015366:	68fb      	ldr	r3, [r7, #12]
 8015368:	681b      	ldr	r3, [r3, #0]
 801536a:	60fb      	str	r3, [r7, #12]
 801536c:	e008      	b.n	8015380 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801536e:	68fb      	ldr	r3, [r7, #12]
 8015370:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8015372:	68fb      	ldr	r3, [r7, #12]
 8015374:	681b      	ldr	r3, [r3, #0]
 8015376:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8015378:	68b9      	ldr	r1, [r7, #8]
 801537a:	6878      	ldr	r0, [r7, #4]
 801537c:	f000 f80a 	bl	8015394 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8015380:	68fb      	ldr	r3, [r7, #12]
 8015382:	2b00      	cmp	r3, #0
 8015384:	d1e3      	bne.n	801534e <ip_reass_tmr+0x12>
    }
  }
}
 8015386:	bf00      	nop
 8015388:	bf00      	nop
 801538a:	3710      	adds	r7, #16
 801538c:	46bd      	mov	sp, r7
 801538e:	bd80      	pop	{r7, pc}
 8015390:	2001b03c 	.word	0x2001b03c

08015394 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015394:	b580      	push	{r7, lr}
 8015396:	b088      	sub	sp, #32
 8015398:	af00      	add	r7, sp, #0
 801539a:	6078      	str	r0, [r7, #4]
 801539c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801539e:	2300      	movs	r3, #0
 80153a0:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80153a2:	683a      	ldr	r2, [r7, #0]
 80153a4:	687b      	ldr	r3, [r7, #4]
 80153a6:	429a      	cmp	r2, r3
 80153a8:	d105      	bne.n	80153b6 <ip_reass_free_complete_datagram+0x22>
 80153aa:	4b45      	ldr	r3, [pc, #276]	; (80154c0 <ip_reass_free_complete_datagram+0x12c>)
 80153ac:	22ab      	movs	r2, #171	; 0xab
 80153ae:	4945      	ldr	r1, [pc, #276]	; (80154c4 <ip_reass_free_complete_datagram+0x130>)
 80153b0:	4845      	ldr	r0, [pc, #276]	; (80154c8 <ip_reass_free_complete_datagram+0x134>)
 80153b2:	f001 f82d 	bl	8016410 <iprintf>
  if (prev != NULL) {
 80153b6:	683b      	ldr	r3, [r7, #0]
 80153b8:	2b00      	cmp	r3, #0
 80153ba:	d00a      	beq.n	80153d2 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80153bc:	683b      	ldr	r3, [r7, #0]
 80153be:	681b      	ldr	r3, [r3, #0]
 80153c0:	687a      	ldr	r2, [r7, #4]
 80153c2:	429a      	cmp	r2, r3
 80153c4:	d005      	beq.n	80153d2 <ip_reass_free_complete_datagram+0x3e>
 80153c6:	4b3e      	ldr	r3, [pc, #248]	; (80154c0 <ip_reass_free_complete_datagram+0x12c>)
 80153c8:	22ad      	movs	r2, #173	; 0xad
 80153ca:	4940      	ldr	r1, [pc, #256]	; (80154cc <ip_reass_free_complete_datagram+0x138>)
 80153cc:	483e      	ldr	r0, [pc, #248]	; (80154c8 <ip_reass_free_complete_datagram+0x134>)
 80153ce:	f001 f81f 	bl	8016410 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80153d2:	687b      	ldr	r3, [r7, #4]
 80153d4:	685b      	ldr	r3, [r3, #4]
 80153d6:	685b      	ldr	r3, [r3, #4]
 80153d8:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80153da:	697b      	ldr	r3, [r7, #20]
 80153dc:	889b      	ldrh	r3, [r3, #4]
 80153de:	b29b      	uxth	r3, r3
 80153e0:	2b00      	cmp	r3, #0
 80153e2:	d12a      	bne.n	801543a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80153e4:	687b      	ldr	r3, [r7, #4]
 80153e6:	685b      	ldr	r3, [r3, #4]
 80153e8:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80153ea:	697b      	ldr	r3, [r7, #20]
 80153ec:	681a      	ldr	r2, [r3, #0]
 80153ee:	687b      	ldr	r3, [r7, #4]
 80153f0:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80153f2:	69bb      	ldr	r3, [r7, #24]
 80153f4:	6858      	ldr	r0, [r3, #4]
 80153f6:	687b      	ldr	r3, [r7, #4]
 80153f8:	3308      	adds	r3, #8
 80153fa:	2214      	movs	r2, #20
 80153fc:	4619      	mov	r1, r3
 80153fe:	f000 ffd7 	bl	80163b0 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8015402:	2101      	movs	r1, #1
 8015404:	69b8      	ldr	r0, [r7, #24]
 8015406:	f7ff fc29 	bl	8014c5c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801540a:	69b8      	ldr	r0, [r7, #24]
 801540c:	f7f5 fbe0 	bl	800abd0 <pbuf_clen>
 8015410:	4603      	mov	r3, r0
 8015412:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015414:	8bfa      	ldrh	r2, [r7, #30]
 8015416:	8a7b      	ldrh	r3, [r7, #18]
 8015418:	4413      	add	r3, r2
 801541a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801541e:	db05      	blt.n	801542c <ip_reass_free_complete_datagram+0x98>
 8015420:	4b27      	ldr	r3, [pc, #156]	; (80154c0 <ip_reass_free_complete_datagram+0x12c>)
 8015422:	22bc      	movs	r2, #188	; 0xbc
 8015424:	492a      	ldr	r1, [pc, #168]	; (80154d0 <ip_reass_free_complete_datagram+0x13c>)
 8015426:	4828      	ldr	r0, [pc, #160]	; (80154c8 <ip_reass_free_complete_datagram+0x134>)
 8015428:	f000 fff2 	bl	8016410 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801542c:	8bfa      	ldrh	r2, [r7, #30]
 801542e:	8a7b      	ldrh	r3, [r7, #18]
 8015430:	4413      	add	r3, r2
 8015432:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8015434:	69b8      	ldr	r0, [r7, #24]
 8015436:	f7f5 fb3d 	bl	800aab4 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801543a:	687b      	ldr	r3, [r7, #4]
 801543c:	685b      	ldr	r3, [r3, #4]
 801543e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8015440:	e01f      	b.n	8015482 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8015442:	69bb      	ldr	r3, [r7, #24]
 8015444:	685b      	ldr	r3, [r3, #4]
 8015446:	617b      	str	r3, [r7, #20]
    pcur = p;
 8015448:	69bb      	ldr	r3, [r7, #24]
 801544a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801544c:	697b      	ldr	r3, [r7, #20]
 801544e:	681b      	ldr	r3, [r3, #0]
 8015450:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8015452:	68f8      	ldr	r0, [r7, #12]
 8015454:	f7f5 fbbc 	bl	800abd0 <pbuf_clen>
 8015458:	4603      	mov	r3, r0
 801545a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801545c:	8bfa      	ldrh	r2, [r7, #30]
 801545e:	8a7b      	ldrh	r3, [r7, #18]
 8015460:	4413      	add	r3, r2
 8015462:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015466:	db05      	blt.n	8015474 <ip_reass_free_complete_datagram+0xe0>
 8015468:	4b15      	ldr	r3, [pc, #84]	; (80154c0 <ip_reass_free_complete_datagram+0x12c>)
 801546a:	22cc      	movs	r2, #204	; 0xcc
 801546c:	4918      	ldr	r1, [pc, #96]	; (80154d0 <ip_reass_free_complete_datagram+0x13c>)
 801546e:	4816      	ldr	r0, [pc, #88]	; (80154c8 <ip_reass_free_complete_datagram+0x134>)
 8015470:	f000 ffce 	bl	8016410 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015474:	8bfa      	ldrh	r2, [r7, #30]
 8015476:	8a7b      	ldrh	r3, [r7, #18]
 8015478:	4413      	add	r3, r2
 801547a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801547c:	68f8      	ldr	r0, [r7, #12]
 801547e:	f7f5 fb19 	bl	800aab4 <pbuf_free>
  while (p != NULL) {
 8015482:	69bb      	ldr	r3, [r7, #24]
 8015484:	2b00      	cmp	r3, #0
 8015486:	d1dc      	bne.n	8015442 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8015488:	6839      	ldr	r1, [r7, #0]
 801548a:	6878      	ldr	r0, [r7, #4]
 801548c:	f000 f8c2 	bl	8015614 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8015490:	4b10      	ldr	r3, [pc, #64]	; (80154d4 <ip_reass_free_complete_datagram+0x140>)
 8015492:	881b      	ldrh	r3, [r3, #0]
 8015494:	8bfa      	ldrh	r2, [r7, #30]
 8015496:	429a      	cmp	r2, r3
 8015498:	d905      	bls.n	80154a6 <ip_reass_free_complete_datagram+0x112>
 801549a:	4b09      	ldr	r3, [pc, #36]	; (80154c0 <ip_reass_free_complete_datagram+0x12c>)
 801549c:	22d2      	movs	r2, #210	; 0xd2
 801549e:	490e      	ldr	r1, [pc, #56]	; (80154d8 <ip_reass_free_complete_datagram+0x144>)
 80154a0:	4809      	ldr	r0, [pc, #36]	; (80154c8 <ip_reass_free_complete_datagram+0x134>)
 80154a2:	f000 ffb5 	bl	8016410 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80154a6:	4b0b      	ldr	r3, [pc, #44]	; (80154d4 <ip_reass_free_complete_datagram+0x140>)
 80154a8:	881a      	ldrh	r2, [r3, #0]
 80154aa:	8bfb      	ldrh	r3, [r7, #30]
 80154ac:	1ad3      	subs	r3, r2, r3
 80154ae:	b29a      	uxth	r2, r3
 80154b0:	4b08      	ldr	r3, [pc, #32]	; (80154d4 <ip_reass_free_complete_datagram+0x140>)
 80154b2:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80154b4:	8bfb      	ldrh	r3, [r7, #30]
}
 80154b6:	4618      	mov	r0, r3
 80154b8:	3720      	adds	r7, #32
 80154ba:	46bd      	mov	sp, r7
 80154bc:	bd80      	pop	{r7, pc}
 80154be:	bf00      	nop
 80154c0:	0801af1c 	.word	0x0801af1c
 80154c4:	0801af58 	.word	0x0801af58
 80154c8:	0801af64 	.word	0x0801af64
 80154cc:	0801af8c 	.word	0x0801af8c
 80154d0:	0801afa0 	.word	0x0801afa0
 80154d4:	2001b040 	.word	0x2001b040
 80154d8:	0801afc0 	.word	0x0801afc0

080154dc <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80154dc:	b580      	push	{r7, lr}
 80154de:	b08a      	sub	sp, #40	; 0x28
 80154e0:	af00      	add	r7, sp, #0
 80154e2:	6078      	str	r0, [r7, #4]
 80154e4:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80154e6:	2300      	movs	r3, #0
 80154e8:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80154ea:	2300      	movs	r3, #0
 80154ec:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80154ee:	2300      	movs	r3, #0
 80154f0:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80154f2:	2300      	movs	r3, #0
 80154f4:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80154f6:	2300      	movs	r3, #0
 80154f8:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80154fa:	4b28      	ldr	r3, [pc, #160]	; (801559c <ip_reass_remove_oldest_datagram+0xc0>)
 80154fc:	681b      	ldr	r3, [r3, #0]
 80154fe:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8015500:	e030      	b.n	8015564 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8015502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015504:	695a      	ldr	r2, [r3, #20]
 8015506:	687b      	ldr	r3, [r7, #4]
 8015508:	68db      	ldr	r3, [r3, #12]
 801550a:	429a      	cmp	r2, r3
 801550c:	d10c      	bne.n	8015528 <ip_reass_remove_oldest_datagram+0x4c>
 801550e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015510:	699a      	ldr	r2, [r3, #24]
 8015512:	687b      	ldr	r3, [r7, #4]
 8015514:	691b      	ldr	r3, [r3, #16]
 8015516:	429a      	cmp	r2, r3
 8015518:	d106      	bne.n	8015528 <ip_reass_remove_oldest_datagram+0x4c>
 801551a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801551c:	899a      	ldrh	r2, [r3, #12]
 801551e:	687b      	ldr	r3, [r7, #4]
 8015520:	889b      	ldrh	r3, [r3, #4]
 8015522:	b29b      	uxth	r3, r3
 8015524:	429a      	cmp	r2, r3
 8015526:	d014      	beq.n	8015552 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8015528:	693b      	ldr	r3, [r7, #16]
 801552a:	3301      	adds	r3, #1
 801552c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801552e:	6a3b      	ldr	r3, [r7, #32]
 8015530:	2b00      	cmp	r3, #0
 8015532:	d104      	bne.n	801553e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8015534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015536:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015538:	69fb      	ldr	r3, [r7, #28]
 801553a:	61bb      	str	r3, [r7, #24]
 801553c:	e009      	b.n	8015552 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801553e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015540:	7fda      	ldrb	r2, [r3, #31]
 8015542:	6a3b      	ldr	r3, [r7, #32]
 8015544:	7fdb      	ldrb	r3, [r3, #31]
 8015546:	429a      	cmp	r2, r3
 8015548:	d803      	bhi.n	8015552 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801554a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801554c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801554e:	69fb      	ldr	r3, [r7, #28]
 8015550:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8015552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015554:	681b      	ldr	r3, [r3, #0]
 8015556:	2b00      	cmp	r3, #0
 8015558:	d001      	beq.n	801555e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801555a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801555c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801555e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015560:	681b      	ldr	r3, [r3, #0]
 8015562:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8015564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015566:	2b00      	cmp	r3, #0
 8015568:	d1cb      	bne.n	8015502 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801556a:	6a3b      	ldr	r3, [r7, #32]
 801556c:	2b00      	cmp	r3, #0
 801556e:	d008      	beq.n	8015582 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8015570:	69b9      	ldr	r1, [r7, #24]
 8015572:	6a38      	ldr	r0, [r7, #32]
 8015574:	f7ff ff0e 	bl	8015394 <ip_reass_free_complete_datagram>
 8015578:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801557a:	697a      	ldr	r2, [r7, #20]
 801557c:	68fb      	ldr	r3, [r7, #12]
 801557e:	4413      	add	r3, r2
 8015580:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8015582:	697a      	ldr	r2, [r7, #20]
 8015584:	683b      	ldr	r3, [r7, #0]
 8015586:	429a      	cmp	r2, r3
 8015588:	da02      	bge.n	8015590 <ip_reass_remove_oldest_datagram+0xb4>
 801558a:	693b      	ldr	r3, [r7, #16]
 801558c:	2b01      	cmp	r3, #1
 801558e:	dcac      	bgt.n	80154ea <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8015590:	697b      	ldr	r3, [r7, #20]
}
 8015592:	4618      	mov	r0, r3
 8015594:	3728      	adds	r7, #40	; 0x28
 8015596:	46bd      	mov	sp, r7
 8015598:	bd80      	pop	{r7, pc}
 801559a:	bf00      	nop
 801559c:	2001b03c 	.word	0x2001b03c

080155a0 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80155a0:	b580      	push	{r7, lr}
 80155a2:	b084      	sub	sp, #16
 80155a4:	af00      	add	r7, sp, #0
 80155a6:	6078      	str	r0, [r7, #4]
 80155a8:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80155aa:	2004      	movs	r0, #4
 80155ac:	f7f4 fb80 	bl	8009cb0 <memp_malloc>
 80155b0:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80155b2:	68fb      	ldr	r3, [r7, #12]
 80155b4:	2b00      	cmp	r3, #0
 80155b6:	d110      	bne.n	80155da <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80155b8:	6839      	ldr	r1, [r7, #0]
 80155ba:	6878      	ldr	r0, [r7, #4]
 80155bc:	f7ff ff8e 	bl	80154dc <ip_reass_remove_oldest_datagram>
 80155c0:	4602      	mov	r2, r0
 80155c2:	683b      	ldr	r3, [r7, #0]
 80155c4:	4293      	cmp	r3, r2
 80155c6:	dc03      	bgt.n	80155d0 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80155c8:	2004      	movs	r0, #4
 80155ca:	f7f4 fb71 	bl	8009cb0 <memp_malloc>
 80155ce:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80155d0:	68fb      	ldr	r3, [r7, #12]
 80155d2:	2b00      	cmp	r3, #0
 80155d4:	d101      	bne.n	80155da <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80155d6:	2300      	movs	r3, #0
 80155d8:	e016      	b.n	8015608 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80155da:	2220      	movs	r2, #32
 80155dc:	2100      	movs	r1, #0
 80155de:	68f8      	ldr	r0, [r7, #12]
 80155e0:	f000 ff0e 	bl	8016400 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80155e4:	68fb      	ldr	r3, [r7, #12]
 80155e6:	220f      	movs	r2, #15
 80155e8:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80155ea:	4b09      	ldr	r3, [pc, #36]	; (8015610 <ip_reass_enqueue_new_datagram+0x70>)
 80155ec:	681a      	ldr	r2, [r3, #0]
 80155ee:	68fb      	ldr	r3, [r7, #12]
 80155f0:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80155f2:	4a07      	ldr	r2, [pc, #28]	; (8015610 <ip_reass_enqueue_new_datagram+0x70>)
 80155f4:	68fb      	ldr	r3, [r7, #12]
 80155f6:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80155f8:	68fb      	ldr	r3, [r7, #12]
 80155fa:	3308      	adds	r3, #8
 80155fc:	2214      	movs	r2, #20
 80155fe:	6879      	ldr	r1, [r7, #4]
 8015600:	4618      	mov	r0, r3
 8015602:	f000 fed5 	bl	80163b0 <memcpy>
  return ipr;
 8015606:	68fb      	ldr	r3, [r7, #12]
}
 8015608:	4618      	mov	r0, r3
 801560a:	3710      	adds	r7, #16
 801560c:	46bd      	mov	sp, r7
 801560e:	bd80      	pop	{r7, pc}
 8015610:	2001b03c 	.word	0x2001b03c

08015614 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015614:	b580      	push	{r7, lr}
 8015616:	b082      	sub	sp, #8
 8015618:	af00      	add	r7, sp, #0
 801561a:	6078      	str	r0, [r7, #4]
 801561c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801561e:	4b10      	ldr	r3, [pc, #64]	; (8015660 <ip_reass_dequeue_datagram+0x4c>)
 8015620:	681b      	ldr	r3, [r3, #0]
 8015622:	687a      	ldr	r2, [r7, #4]
 8015624:	429a      	cmp	r2, r3
 8015626:	d104      	bne.n	8015632 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8015628:	687b      	ldr	r3, [r7, #4]
 801562a:	681b      	ldr	r3, [r3, #0]
 801562c:	4a0c      	ldr	r2, [pc, #48]	; (8015660 <ip_reass_dequeue_datagram+0x4c>)
 801562e:	6013      	str	r3, [r2, #0]
 8015630:	e00d      	b.n	801564e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8015632:	683b      	ldr	r3, [r7, #0]
 8015634:	2b00      	cmp	r3, #0
 8015636:	d106      	bne.n	8015646 <ip_reass_dequeue_datagram+0x32>
 8015638:	4b0a      	ldr	r3, [pc, #40]	; (8015664 <ip_reass_dequeue_datagram+0x50>)
 801563a:	f240 1245 	movw	r2, #325	; 0x145
 801563e:	490a      	ldr	r1, [pc, #40]	; (8015668 <ip_reass_dequeue_datagram+0x54>)
 8015640:	480a      	ldr	r0, [pc, #40]	; (801566c <ip_reass_dequeue_datagram+0x58>)
 8015642:	f000 fee5 	bl	8016410 <iprintf>
    prev->next = ipr->next;
 8015646:	687b      	ldr	r3, [r7, #4]
 8015648:	681a      	ldr	r2, [r3, #0]
 801564a:	683b      	ldr	r3, [r7, #0]
 801564c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801564e:	6879      	ldr	r1, [r7, #4]
 8015650:	2004      	movs	r0, #4
 8015652:	f7f4 fb7f 	bl	8009d54 <memp_free>
}
 8015656:	bf00      	nop
 8015658:	3708      	adds	r7, #8
 801565a:	46bd      	mov	sp, r7
 801565c:	bd80      	pop	{r7, pc}
 801565e:	bf00      	nop
 8015660:	2001b03c 	.word	0x2001b03c
 8015664:	0801af1c 	.word	0x0801af1c
 8015668:	0801afe4 	.word	0x0801afe4
 801566c:	0801af64 	.word	0x0801af64

08015670 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8015670:	b580      	push	{r7, lr}
 8015672:	b08c      	sub	sp, #48	; 0x30
 8015674:	af00      	add	r7, sp, #0
 8015676:	60f8      	str	r0, [r7, #12]
 8015678:	60b9      	str	r1, [r7, #8]
 801567a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801567c:	2300      	movs	r3, #0
 801567e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8015680:	2301      	movs	r3, #1
 8015682:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8015684:	68bb      	ldr	r3, [r7, #8]
 8015686:	685b      	ldr	r3, [r3, #4]
 8015688:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801568a:	69fb      	ldr	r3, [r7, #28]
 801568c:	885b      	ldrh	r3, [r3, #2]
 801568e:	b29b      	uxth	r3, r3
 8015690:	4618      	mov	r0, r3
 8015692:	f7f3 fe2f 	bl	80092f4 <lwip_htons>
 8015696:	4603      	mov	r3, r0
 8015698:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801569a:	69fb      	ldr	r3, [r7, #28]
 801569c:	781b      	ldrb	r3, [r3, #0]
 801569e:	f003 030f 	and.w	r3, r3, #15
 80156a2:	b2db      	uxtb	r3, r3
 80156a4:	009b      	lsls	r3, r3, #2
 80156a6:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80156a8:	7e7b      	ldrb	r3, [r7, #25]
 80156aa:	b29b      	uxth	r3, r3
 80156ac:	8b7a      	ldrh	r2, [r7, #26]
 80156ae:	429a      	cmp	r2, r3
 80156b0:	d202      	bcs.n	80156b8 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80156b2:	f04f 33ff 	mov.w	r3, #4294967295
 80156b6:	e135      	b.n	8015924 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80156b8:	7e7b      	ldrb	r3, [r7, #25]
 80156ba:	b29b      	uxth	r3, r3
 80156bc:	8b7a      	ldrh	r2, [r7, #26]
 80156be:	1ad3      	subs	r3, r2, r3
 80156c0:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80156c2:	69fb      	ldr	r3, [r7, #28]
 80156c4:	88db      	ldrh	r3, [r3, #6]
 80156c6:	b29b      	uxth	r3, r3
 80156c8:	4618      	mov	r0, r3
 80156ca:	f7f3 fe13 	bl	80092f4 <lwip_htons>
 80156ce:	4603      	mov	r3, r0
 80156d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80156d4:	b29b      	uxth	r3, r3
 80156d6:	00db      	lsls	r3, r3, #3
 80156d8:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80156da:	68bb      	ldr	r3, [r7, #8]
 80156dc:	685b      	ldr	r3, [r3, #4]
 80156de:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 80156e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156e2:	2200      	movs	r2, #0
 80156e4:	701a      	strb	r2, [r3, #0]
 80156e6:	2200      	movs	r2, #0
 80156e8:	705a      	strb	r2, [r3, #1]
 80156ea:	2200      	movs	r2, #0
 80156ec:	709a      	strb	r2, [r3, #2]
 80156ee:	2200      	movs	r2, #0
 80156f0:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80156f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156f4:	8afa      	ldrh	r2, [r7, #22]
 80156f6:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80156f8:	8afa      	ldrh	r2, [r7, #22]
 80156fa:	8b7b      	ldrh	r3, [r7, #26]
 80156fc:	4413      	add	r3, r2
 80156fe:	b29a      	uxth	r2, r3
 8015700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015702:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8015704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015706:	88db      	ldrh	r3, [r3, #6]
 8015708:	b29b      	uxth	r3, r3
 801570a:	8afa      	ldrh	r2, [r7, #22]
 801570c:	429a      	cmp	r2, r3
 801570e:	d902      	bls.n	8015716 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015710:	f04f 33ff 	mov.w	r3, #4294967295
 8015714:	e106      	b.n	8015924 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8015716:	68fb      	ldr	r3, [r7, #12]
 8015718:	685b      	ldr	r3, [r3, #4]
 801571a:	627b      	str	r3, [r7, #36]	; 0x24
 801571c:	e068      	b.n	80157f0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801571e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015720:	685b      	ldr	r3, [r3, #4]
 8015722:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8015724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015726:	889b      	ldrh	r3, [r3, #4]
 8015728:	b29a      	uxth	r2, r3
 801572a:	693b      	ldr	r3, [r7, #16]
 801572c:	889b      	ldrh	r3, [r3, #4]
 801572e:	b29b      	uxth	r3, r3
 8015730:	429a      	cmp	r2, r3
 8015732:	d235      	bcs.n	80157a0 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8015734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015736:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015738:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801573a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801573c:	2b00      	cmp	r3, #0
 801573e:	d020      	beq.n	8015782 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8015740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015742:	889b      	ldrh	r3, [r3, #4]
 8015744:	b29a      	uxth	r2, r3
 8015746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015748:	88db      	ldrh	r3, [r3, #6]
 801574a:	b29b      	uxth	r3, r3
 801574c:	429a      	cmp	r2, r3
 801574e:	d307      	bcc.n	8015760 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8015750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015752:	88db      	ldrh	r3, [r3, #6]
 8015754:	b29a      	uxth	r2, r3
 8015756:	693b      	ldr	r3, [r7, #16]
 8015758:	889b      	ldrh	r3, [r3, #4]
 801575a:	b29b      	uxth	r3, r3
 801575c:	429a      	cmp	r2, r3
 801575e:	d902      	bls.n	8015766 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015760:	f04f 33ff 	mov.w	r3, #4294967295
 8015764:	e0de      	b.n	8015924 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8015766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015768:	68ba      	ldr	r2, [r7, #8]
 801576a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801576c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801576e:	88db      	ldrh	r3, [r3, #6]
 8015770:	b29a      	uxth	r2, r3
 8015772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015774:	889b      	ldrh	r3, [r3, #4]
 8015776:	b29b      	uxth	r3, r3
 8015778:	429a      	cmp	r2, r3
 801577a:	d03d      	beq.n	80157f8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801577c:	2300      	movs	r3, #0
 801577e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8015780:	e03a      	b.n	80157f8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8015782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015784:	88db      	ldrh	r3, [r3, #6]
 8015786:	b29a      	uxth	r2, r3
 8015788:	693b      	ldr	r3, [r7, #16]
 801578a:	889b      	ldrh	r3, [r3, #4]
 801578c:	b29b      	uxth	r3, r3
 801578e:	429a      	cmp	r2, r3
 8015790:	d902      	bls.n	8015798 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015792:	f04f 33ff 	mov.w	r3, #4294967295
 8015796:	e0c5      	b.n	8015924 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8015798:	68fb      	ldr	r3, [r7, #12]
 801579a:	68ba      	ldr	r2, [r7, #8]
 801579c:	605a      	str	r2, [r3, #4]
      break;
 801579e:	e02b      	b.n	80157f8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80157a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157a2:	889b      	ldrh	r3, [r3, #4]
 80157a4:	b29a      	uxth	r2, r3
 80157a6:	693b      	ldr	r3, [r7, #16]
 80157a8:	889b      	ldrh	r3, [r3, #4]
 80157aa:	b29b      	uxth	r3, r3
 80157ac:	429a      	cmp	r2, r3
 80157ae:	d102      	bne.n	80157b6 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80157b0:	f04f 33ff 	mov.w	r3, #4294967295
 80157b4:	e0b6      	b.n	8015924 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80157b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157b8:	889b      	ldrh	r3, [r3, #4]
 80157ba:	b29a      	uxth	r2, r3
 80157bc:	693b      	ldr	r3, [r7, #16]
 80157be:	88db      	ldrh	r3, [r3, #6]
 80157c0:	b29b      	uxth	r3, r3
 80157c2:	429a      	cmp	r2, r3
 80157c4:	d202      	bcs.n	80157cc <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80157c6:	f04f 33ff 	mov.w	r3, #4294967295
 80157ca:	e0ab      	b.n	8015924 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80157cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157ce:	2b00      	cmp	r3, #0
 80157d0:	d009      	beq.n	80157e6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80157d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157d4:	88db      	ldrh	r3, [r3, #6]
 80157d6:	b29a      	uxth	r2, r3
 80157d8:	693b      	ldr	r3, [r7, #16]
 80157da:	889b      	ldrh	r3, [r3, #4]
 80157dc:	b29b      	uxth	r3, r3
 80157de:	429a      	cmp	r2, r3
 80157e0:	d001      	beq.n	80157e6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80157e2:	2300      	movs	r3, #0
 80157e4:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80157e6:	693b      	ldr	r3, [r7, #16]
 80157e8:	681b      	ldr	r3, [r3, #0]
 80157ea:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80157ec:	693b      	ldr	r3, [r7, #16]
 80157ee:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80157f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157f2:	2b00      	cmp	r3, #0
 80157f4:	d193      	bne.n	801571e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80157f6:	e000      	b.n	80157fa <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80157f8:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80157fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157fc:	2b00      	cmp	r3, #0
 80157fe:	d12d      	bne.n	801585c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8015800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015802:	2b00      	cmp	r3, #0
 8015804:	d01c      	beq.n	8015840 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8015806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015808:	88db      	ldrh	r3, [r3, #6]
 801580a:	b29a      	uxth	r2, r3
 801580c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801580e:	889b      	ldrh	r3, [r3, #4]
 8015810:	b29b      	uxth	r3, r3
 8015812:	429a      	cmp	r2, r3
 8015814:	d906      	bls.n	8015824 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8015816:	4b45      	ldr	r3, [pc, #276]	; (801592c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015818:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801581c:	4944      	ldr	r1, [pc, #272]	; (8015930 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801581e:	4845      	ldr	r0, [pc, #276]	; (8015934 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015820:	f000 fdf6 	bl	8016410 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8015824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015826:	68ba      	ldr	r2, [r7, #8]
 8015828:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801582a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801582c:	88db      	ldrh	r3, [r3, #6]
 801582e:	b29a      	uxth	r2, r3
 8015830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015832:	889b      	ldrh	r3, [r3, #4]
 8015834:	b29b      	uxth	r3, r3
 8015836:	429a      	cmp	r2, r3
 8015838:	d010      	beq.n	801585c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801583a:	2300      	movs	r3, #0
 801583c:	623b      	str	r3, [r7, #32]
 801583e:	e00d      	b.n	801585c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8015840:	68fb      	ldr	r3, [r7, #12]
 8015842:	685b      	ldr	r3, [r3, #4]
 8015844:	2b00      	cmp	r3, #0
 8015846:	d006      	beq.n	8015856 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8015848:	4b38      	ldr	r3, [pc, #224]	; (801592c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801584a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801584e:	493a      	ldr	r1, [pc, #232]	; (8015938 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8015850:	4838      	ldr	r0, [pc, #224]	; (8015934 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015852:	f000 fddd 	bl	8016410 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8015856:	68fb      	ldr	r3, [r7, #12]
 8015858:	68ba      	ldr	r2, [r7, #8]
 801585a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801585c:	687b      	ldr	r3, [r7, #4]
 801585e:	2b00      	cmp	r3, #0
 8015860:	d105      	bne.n	801586e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8015862:	68fb      	ldr	r3, [r7, #12]
 8015864:	7f9b      	ldrb	r3, [r3, #30]
 8015866:	f003 0301 	and.w	r3, r3, #1
 801586a:	2b00      	cmp	r3, #0
 801586c:	d059      	beq.n	8015922 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801586e:	6a3b      	ldr	r3, [r7, #32]
 8015870:	2b00      	cmp	r3, #0
 8015872:	d04f      	beq.n	8015914 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8015874:	68fb      	ldr	r3, [r7, #12]
 8015876:	685b      	ldr	r3, [r3, #4]
 8015878:	2b00      	cmp	r3, #0
 801587a:	d006      	beq.n	801588a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801587c:	68fb      	ldr	r3, [r7, #12]
 801587e:	685b      	ldr	r3, [r3, #4]
 8015880:	685b      	ldr	r3, [r3, #4]
 8015882:	889b      	ldrh	r3, [r3, #4]
 8015884:	b29b      	uxth	r3, r3
 8015886:	2b00      	cmp	r3, #0
 8015888:	d002      	beq.n	8015890 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801588a:	2300      	movs	r3, #0
 801588c:	623b      	str	r3, [r7, #32]
 801588e:	e041      	b.n	8015914 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8015890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015892:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8015894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015896:	681b      	ldr	r3, [r3, #0]
 8015898:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801589a:	e012      	b.n	80158c2 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801589c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801589e:	685b      	ldr	r3, [r3, #4]
 80158a0:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80158a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158a4:	88db      	ldrh	r3, [r3, #6]
 80158a6:	b29a      	uxth	r2, r3
 80158a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158aa:	889b      	ldrh	r3, [r3, #4]
 80158ac:	b29b      	uxth	r3, r3
 80158ae:	429a      	cmp	r2, r3
 80158b0:	d002      	beq.n	80158b8 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80158b2:	2300      	movs	r3, #0
 80158b4:	623b      	str	r3, [r7, #32]
            break;
 80158b6:	e007      	b.n	80158c8 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80158b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158ba:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80158bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158be:	681b      	ldr	r3, [r3, #0]
 80158c0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80158c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158c4:	2b00      	cmp	r3, #0
 80158c6:	d1e9      	bne.n	801589c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80158c8:	6a3b      	ldr	r3, [r7, #32]
 80158ca:	2b00      	cmp	r3, #0
 80158cc:	d022      	beq.n	8015914 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80158ce:	68fb      	ldr	r3, [r7, #12]
 80158d0:	685b      	ldr	r3, [r3, #4]
 80158d2:	2b00      	cmp	r3, #0
 80158d4:	d106      	bne.n	80158e4 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80158d6:	4b15      	ldr	r3, [pc, #84]	; (801592c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80158d8:	f240 12df 	movw	r2, #479	; 0x1df
 80158dc:	4917      	ldr	r1, [pc, #92]	; (801593c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80158de:	4815      	ldr	r0, [pc, #84]	; (8015934 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80158e0:	f000 fd96 	bl	8016410 <iprintf>
          LWIP_ASSERT("sanity check",
 80158e4:	68fb      	ldr	r3, [r7, #12]
 80158e6:	685b      	ldr	r3, [r3, #4]
 80158e8:	685b      	ldr	r3, [r3, #4]
 80158ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80158ec:	429a      	cmp	r2, r3
 80158ee:	d106      	bne.n	80158fe <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80158f0:	4b0e      	ldr	r3, [pc, #56]	; (801592c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80158f2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80158f6:	4911      	ldr	r1, [pc, #68]	; (801593c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80158f8:	480e      	ldr	r0, [pc, #56]	; (8015934 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80158fa:	f000 fd89 	bl	8016410 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80158fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015900:	681b      	ldr	r3, [r3, #0]
 8015902:	2b00      	cmp	r3, #0
 8015904:	d006      	beq.n	8015914 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8015906:	4b09      	ldr	r3, [pc, #36]	; (801592c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015908:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801590c:	490c      	ldr	r1, [pc, #48]	; (8015940 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801590e:	4809      	ldr	r0, [pc, #36]	; (8015934 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015910:	f000 fd7e 	bl	8016410 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8015914:	6a3b      	ldr	r3, [r7, #32]
 8015916:	2b00      	cmp	r3, #0
 8015918:	bf14      	ite	ne
 801591a:	2301      	movne	r3, #1
 801591c:	2300      	moveq	r3, #0
 801591e:	b2db      	uxtb	r3, r3
 8015920:	e000      	b.n	8015924 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8015922:	2300      	movs	r3, #0
}
 8015924:	4618      	mov	r0, r3
 8015926:	3730      	adds	r7, #48	; 0x30
 8015928:	46bd      	mov	sp, r7
 801592a:	bd80      	pop	{r7, pc}
 801592c:	0801af1c 	.word	0x0801af1c
 8015930:	0801b000 	.word	0x0801b000
 8015934:	0801af64 	.word	0x0801af64
 8015938:	0801b020 	.word	0x0801b020
 801593c:	0801b058 	.word	0x0801b058
 8015940:	0801b068 	.word	0x0801b068

08015944 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8015944:	b580      	push	{r7, lr}
 8015946:	b08e      	sub	sp, #56	; 0x38
 8015948:	af00      	add	r7, sp, #0
 801594a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801594c:	687b      	ldr	r3, [r7, #4]
 801594e:	685b      	ldr	r3, [r3, #4]
 8015950:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8015952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015954:	781b      	ldrb	r3, [r3, #0]
 8015956:	f003 030f 	and.w	r3, r3, #15
 801595a:	b2db      	uxtb	r3, r3
 801595c:	009b      	lsls	r3, r3, #2
 801595e:	b2db      	uxtb	r3, r3
 8015960:	2b14      	cmp	r3, #20
 8015962:	f040 8171 	bne.w	8015c48 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8015966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015968:	88db      	ldrh	r3, [r3, #6]
 801596a:	b29b      	uxth	r3, r3
 801596c:	4618      	mov	r0, r3
 801596e:	f7f3 fcc1 	bl	80092f4 <lwip_htons>
 8015972:	4603      	mov	r3, r0
 8015974:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015978:	b29b      	uxth	r3, r3
 801597a:	00db      	lsls	r3, r3, #3
 801597c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801597e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015980:	885b      	ldrh	r3, [r3, #2]
 8015982:	b29b      	uxth	r3, r3
 8015984:	4618      	mov	r0, r3
 8015986:	f7f3 fcb5 	bl	80092f4 <lwip_htons>
 801598a:	4603      	mov	r3, r0
 801598c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801598e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015990:	781b      	ldrb	r3, [r3, #0]
 8015992:	f003 030f 	and.w	r3, r3, #15
 8015996:	b2db      	uxtb	r3, r3
 8015998:	009b      	lsls	r3, r3, #2
 801599a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801599e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80159a2:	b29b      	uxth	r3, r3
 80159a4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80159a6:	429a      	cmp	r2, r3
 80159a8:	f0c0 8150 	bcc.w	8015c4c <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80159ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80159b0:	b29b      	uxth	r3, r3
 80159b2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80159b4:	1ad3      	subs	r3, r2, r3
 80159b6:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80159b8:	6878      	ldr	r0, [r7, #4]
 80159ba:	f7f5 f909 	bl	800abd0 <pbuf_clen>
 80159be:	4603      	mov	r3, r0
 80159c0:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80159c2:	4b8c      	ldr	r3, [pc, #560]	; (8015bf4 <ip4_reass+0x2b0>)
 80159c4:	881b      	ldrh	r3, [r3, #0]
 80159c6:	461a      	mov	r2, r3
 80159c8:	8c3b      	ldrh	r3, [r7, #32]
 80159ca:	4413      	add	r3, r2
 80159cc:	2b0a      	cmp	r3, #10
 80159ce:	dd10      	ble.n	80159f2 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80159d0:	8c3b      	ldrh	r3, [r7, #32]
 80159d2:	4619      	mov	r1, r3
 80159d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80159d6:	f7ff fd81 	bl	80154dc <ip_reass_remove_oldest_datagram>
 80159da:	4603      	mov	r3, r0
 80159dc:	2b00      	cmp	r3, #0
 80159de:	f000 8137 	beq.w	8015c50 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80159e2:	4b84      	ldr	r3, [pc, #528]	; (8015bf4 <ip4_reass+0x2b0>)
 80159e4:	881b      	ldrh	r3, [r3, #0]
 80159e6:	461a      	mov	r2, r3
 80159e8:	8c3b      	ldrh	r3, [r7, #32]
 80159ea:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80159ec:	2b0a      	cmp	r3, #10
 80159ee:	f300 812f 	bgt.w	8015c50 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80159f2:	4b81      	ldr	r3, [pc, #516]	; (8015bf8 <ip4_reass+0x2b4>)
 80159f4:	681b      	ldr	r3, [r3, #0]
 80159f6:	633b      	str	r3, [r7, #48]	; 0x30
 80159f8:	e015      	b.n	8015a26 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80159fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159fc:	695a      	ldr	r2, [r3, #20]
 80159fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a00:	68db      	ldr	r3, [r3, #12]
 8015a02:	429a      	cmp	r2, r3
 8015a04:	d10c      	bne.n	8015a20 <ip4_reass+0xdc>
 8015a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a08:	699a      	ldr	r2, [r3, #24]
 8015a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a0c:	691b      	ldr	r3, [r3, #16]
 8015a0e:	429a      	cmp	r2, r3
 8015a10:	d106      	bne.n	8015a20 <ip4_reass+0xdc>
 8015a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a14:	899a      	ldrh	r2, [r3, #12]
 8015a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a18:	889b      	ldrh	r3, [r3, #4]
 8015a1a:	b29b      	uxth	r3, r3
 8015a1c:	429a      	cmp	r2, r3
 8015a1e:	d006      	beq.n	8015a2e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8015a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a22:	681b      	ldr	r3, [r3, #0]
 8015a24:	633b      	str	r3, [r7, #48]	; 0x30
 8015a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a28:	2b00      	cmp	r3, #0
 8015a2a:	d1e6      	bne.n	80159fa <ip4_reass+0xb6>
 8015a2c:	e000      	b.n	8015a30 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8015a2e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8015a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a32:	2b00      	cmp	r3, #0
 8015a34:	d109      	bne.n	8015a4a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8015a36:	8c3b      	ldrh	r3, [r7, #32]
 8015a38:	4619      	mov	r1, r3
 8015a3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015a3c:	f7ff fdb0 	bl	80155a0 <ip_reass_enqueue_new_datagram>
 8015a40:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8015a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a44:	2b00      	cmp	r3, #0
 8015a46:	d11c      	bne.n	8015a82 <ip4_reass+0x13e>
      goto nullreturn;
 8015a48:	e105      	b.n	8015c56 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a4c:	88db      	ldrh	r3, [r3, #6]
 8015a4e:	b29b      	uxth	r3, r3
 8015a50:	4618      	mov	r0, r3
 8015a52:	f7f3 fc4f 	bl	80092f4 <lwip_htons>
 8015a56:	4603      	mov	r3, r0
 8015a58:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015a5c:	2b00      	cmp	r3, #0
 8015a5e:	d110      	bne.n	8015a82 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8015a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a62:	89db      	ldrh	r3, [r3, #14]
 8015a64:	4618      	mov	r0, r3
 8015a66:	f7f3 fc45 	bl	80092f4 <lwip_htons>
 8015a6a:	4603      	mov	r3, r0
 8015a6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015a70:	2b00      	cmp	r3, #0
 8015a72:	d006      	beq.n	8015a82 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8015a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a76:	3308      	adds	r3, #8
 8015a78:	2214      	movs	r2, #20
 8015a7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015a7c:	4618      	mov	r0, r3
 8015a7e:	f000 fc97 	bl	80163b0 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8015a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a84:	88db      	ldrh	r3, [r3, #6]
 8015a86:	b29b      	uxth	r3, r3
 8015a88:	f003 0320 	and.w	r3, r3, #32
 8015a8c:	2b00      	cmp	r3, #0
 8015a8e:	bf0c      	ite	eq
 8015a90:	2301      	moveq	r3, #1
 8015a92:	2300      	movne	r3, #0
 8015a94:	b2db      	uxtb	r3, r3
 8015a96:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8015a98:	69fb      	ldr	r3, [r7, #28]
 8015a9a:	2b00      	cmp	r3, #0
 8015a9c:	d00e      	beq.n	8015abc <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8015a9e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8015aa0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015aa2:	4413      	add	r3, r2
 8015aa4:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8015aa6:	8b7a      	ldrh	r2, [r7, #26]
 8015aa8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015aaa:	429a      	cmp	r2, r3
 8015aac:	f0c0 80a0 	bcc.w	8015bf0 <ip4_reass+0x2ac>
 8015ab0:	8b7b      	ldrh	r3, [r7, #26]
 8015ab2:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8015ab6:	4293      	cmp	r3, r2
 8015ab8:	f200 809a 	bhi.w	8015bf0 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8015abc:	69fa      	ldr	r2, [r7, #28]
 8015abe:	6879      	ldr	r1, [r7, #4]
 8015ac0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015ac2:	f7ff fdd5 	bl	8015670 <ip_reass_chain_frag_into_datagram_and_validate>
 8015ac6:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8015ac8:	697b      	ldr	r3, [r7, #20]
 8015aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015ace:	f000 809b 	beq.w	8015c08 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8015ad2:	4b48      	ldr	r3, [pc, #288]	; (8015bf4 <ip4_reass+0x2b0>)
 8015ad4:	881a      	ldrh	r2, [r3, #0]
 8015ad6:	8c3b      	ldrh	r3, [r7, #32]
 8015ad8:	4413      	add	r3, r2
 8015ada:	b29a      	uxth	r2, r3
 8015adc:	4b45      	ldr	r3, [pc, #276]	; (8015bf4 <ip4_reass+0x2b0>)
 8015ade:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8015ae0:	69fb      	ldr	r3, [r7, #28]
 8015ae2:	2b00      	cmp	r3, #0
 8015ae4:	d00d      	beq.n	8015b02 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8015ae6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8015ae8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015aea:	4413      	add	r3, r2
 8015aec:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8015aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015af0:	8a7a      	ldrh	r2, [r7, #18]
 8015af2:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8015af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015af6:	7f9b      	ldrb	r3, [r3, #30]
 8015af8:	f043 0301 	orr.w	r3, r3, #1
 8015afc:	b2da      	uxtb	r2, r3
 8015afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b00:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8015b02:	697b      	ldr	r3, [r7, #20]
 8015b04:	2b01      	cmp	r3, #1
 8015b06:	d171      	bne.n	8015bec <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8015b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b0a:	8b9b      	ldrh	r3, [r3, #28]
 8015b0c:	3314      	adds	r3, #20
 8015b0e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8015b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b12:	685b      	ldr	r3, [r3, #4]
 8015b14:	685b      	ldr	r3, [r3, #4]
 8015b16:	681b      	ldr	r3, [r3, #0]
 8015b18:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8015b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b1c:	685b      	ldr	r3, [r3, #4]
 8015b1e:	685b      	ldr	r3, [r3, #4]
 8015b20:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8015b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b24:	3308      	adds	r3, #8
 8015b26:	2214      	movs	r2, #20
 8015b28:	4619      	mov	r1, r3
 8015b2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015b2c:	f000 fc40 	bl	80163b0 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8015b30:	8a3b      	ldrh	r3, [r7, #16]
 8015b32:	4618      	mov	r0, r3
 8015b34:	f7f3 fbde 	bl	80092f4 <lwip_htons>
 8015b38:	4603      	mov	r3, r0
 8015b3a:	461a      	mov	r2, r3
 8015b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b3e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8015b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b42:	2200      	movs	r2, #0
 8015b44:	719a      	strb	r2, [r3, #6]
 8015b46:	2200      	movs	r2, #0
 8015b48:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8015b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b4c:	2200      	movs	r2, #0
 8015b4e:	729a      	strb	r2, [r3, #10]
 8015b50:	2200      	movs	r2, #0
 8015b52:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8015b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b56:	685b      	ldr	r3, [r3, #4]
 8015b58:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8015b5a:	e00d      	b.n	8015b78 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8015b5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015b5e:	685b      	ldr	r3, [r3, #4]
 8015b60:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8015b62:	2114      	movs	r1, #20
 8015b64:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8015b66:	f7f4 ff1f 	bl	800a9a8 <pbuf_remove_header>
      pbuf_cat(p, r);
 8015b6a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8015b6c:	6878      	ldr	r0, [r7, #4]
 8015b6e:	f7f5 f86f 	bl	800ac50 <pbuf_cat>
      r = iprh->next_pbuf;
 8015b72:	68fb      	ldr	r3, [r7, #12]
 8015b74:	681b      	ldr	r3, [r3, #0]
 8015b76:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8015b78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015b7a:	2b00      	cmp	r3, #0
 8015b7c:	d1ee      	bne.n	8015b5c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8015b7e:	4b1e      	ldr	r3, [pc, #120]	; (8015bf8 <ip4_reass+0x2b4>)
 8015b80:	681b      	ldr	r3, [r3, #0]
 8015b82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015b84:	429a      	cmp	r2, r3
 8015b86:	d102      	bne.n	8015b8e <ip4_reass+0x24a>
      ipr_prev = NULL;
 8015b88:	2300      	movs	r3, #0
 8015b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015b8c:	e010      	b.n	8015bb0 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8015b8e:	4b1a      	ldr	r3, [pc, #104]	; (8015bf8 <ip4_reass+0x2b4>)
 8015b90:	681b      	ldr	r3, [r3, #0]
 8015b92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015b94:	e007      	b.n	8015ba6 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8015b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b98:	681b      	ldr	r3, [r3, #0]
 8015b9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015b9c:	429a      	cmp	r2, r3
 8015b9e:	d006      	beq.n	8015bae <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8015ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ba2:	681b      	ldr	r3, [r3, #0]
 8015ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ba8:	2b00      	cmp	r3, #0
 8015baa:	d1f4      	bne.n	8015b96 <ip4_reass+0x252>
 8015bac:	e000      	b.n	8015bb0 <ip4_reass+0x26c>
          break;
 8015bae:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8015bb0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015bb2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015bb4:	f7ff fd2e 	bl	8015614 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8015bb8:	6878      	ldr	r0, [r7, #4]
 8015bba:	f7f5 f809 	bl	800abd0 <pbuf_clen>
 8015bbe:	4603      	mov	r3, r0
 8015bc0:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8015bc2:	4b0c      	ldr	r3, [pc, #48]	; (8015bf4 <ip4_reass+0x2b0>)
 8015bc4:	881b      	ldrh	r3, [r3, #0]
 8015bc6:	8c3a      	ldrh	r2, [r7, #32]
 8015bc8:	429a      	cmp	r2, r3
 8015bca:	d906      	bls.n	8015bda <ip4_reass+0x296>
 8015bcc:	4b0b      	ldr	r3, [pc, #44]	; (8015bfc <ip4_reass+0x2b8>)
 8015bce:	f240 229b 	movw	r2, #667	; 0x29b
 8015bd2:	490b      	ldr	r1, [pc, #44]	; (8015c00 <ip4_reass+0x2bc>)
 8015bd4:	480b      	ldr	r0, [pc, #44]	; (8015c04 <ip4_reass+0x2c0>)
 8015bd6:	f000 fc1b 	bl	8016410 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8015bda:	4b06      	ldr	r3, [pc, #24]	; (8015bf4 <ip4_reass+0x2b0>)
 8015bdc:	881a      	ldrh	r2, [r3, #0]
 8015bde:	8c3b      	ldrh	r3, [r7, #32]
 8015be0:	1ad3      	subs	r3, r2, r3
 8015be2:	b29a      	uxth	r2, r3
 8015be4:	4b03      	ldr	r3, [pc, #12]	; (8015bf4 <ip4_reass+0x2b0>)
 8015be6:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8015be8:	687b      	ldr	r3, [r7, #4]
 8015bea:	e038      	b.n	8015c5e <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8015bec:	2300      	movs	r3, #0
 8015bee:	e036      	b.n	8015c5e <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8015bf0:	bf00      	nop
 8015bf2:	e00a      	b.n	8015c0a <ip4_reass+0x2c6>
 8015bf4:	2001b040 	.word	0x2001b040
 8015bf8:	2001b03c 	.word	0x2001b03c
 8015bfc:	0801af1c 	.word	0x0801af1c
 8015c00:	0801b08c 	.word	0x0801b08c
 8015c04:	0801af64 	.word	0x0801af64
    goto nullreturn_ipr;
 8015c08:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8015c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c0c:	2b00      	cmp	r3, #0
 8015c0e:	d106      	bne.n	8015c1e <ip4_reass+0x2da>
 8015c10:	4b15      	ldr	r3, [pc, #84]	; (8015c68 <ip4_reass+0x324>)
 8015c12:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8015c16:	4915      	ldr	r1, [pc, #84]	; (8015c6c <ip4_reass+0x328>)
 8015c18:	4815      	ldr	r0, [pc, #84]	; (8015c70 <ip4_reass+0x32c>)
 8015c1a:	f000 fbf9 	bl	8016410 <iprintf>
  if (ipr->p == NULL) {
 8015c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c20:	685b      	ldr	r3, [r3, #4]
 8015c22:	2b00      	cmp	r3, #0
 8015c24:	d116      	bne.n	8015c54 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8015c26:	4b13      	ldr	r3, [pc, #76]	; (8015c74 <ip4_reass+0x330>)
 8015c28:	681b      	ldr	r3, [r3, #0]
 8015c2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015c2c:	429a      	cmp	r2, r3
 8015c2e:	d006      	beq.n	8015c3e <ip4_reass+0x2fa>
 8015c30:	4b0d      	ldr	r3, [pc, #52]	; (8015c68 <ip4_reass+0x324>)
 8015c32:	f240 22ab 	movw	r2, #683	; 0x2ab
 8015c36:	4910      	ldr	r1, [pc, #64]	; (8015c78 <ip4_reass+0x334>)
 8015c38:	480d      	ldr	r0, [pc, #52]	; (8015c70 <ip4_reass+0x32c>)
 8015c3a:	f000 fbe9 	bl	8016410 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8015c3e:	2100      	movs	r1, #0
 8015c40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015c42:	f7ff fce7 	bl	8015614 <ip_reass_dequeue_datagram>
 8015c46:	e006      	b.n	8015c56 <ip4_reass+0x312>
    goto nullreturn;
 8015c48:	bf00      	nop
 8015c4a:	e004      	b.n	8015c56 <ip4_reass+0x312>
    goto nullreturn;
 8015c4c:	bf00      	nop
 8015c4e:	e002      	b.n	8015c56 <ip4_reass+0x312>
      goto nullreturn;
 8015c50:	bf00      	nop
 8015c52:	e000      	b.n	8015c56 <ip4_reass+0x312>
  }

nullreturn:
 8015c54:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8015c56:	6878      	ldr	r0, [r7, #4]
 8015c58:	f7f4 ff2c 	bl	800aab4 <pbuf_free>
  return NULL;
 8015c5c:	2300      	movs	r3, #0
}
 8015c5e:	4618      	mov	r0, r3
 8015c60:	3738      	adds	r7, #56	; 0x38
 8015c62:	46bd      	mov	sp, r7
 8015c64:	bd80      	pop	{r7, pc}
 8015c66:	bf00      	nop
 8015c68:	0801af1c 	.word	0x0801af1c
 8015c6c:	0801b0a8 	.word	0x0801b0a8
 8015c70:	0801af64 	.word	0x0801af64
 8015c74:	2001b03c 	.word	0x2001b03c
 8015c78:	0801b0b4 	.word	0x0801b0b4

08015c7c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8015c7c:	b580      	push	{r7, lr}
 8015c7e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8015c80:	2005      	movs	r0, #5
 8015c82:	f7f4 f815 	bl	8009cb0 <memp_malloc>
 8015c86:	4603      	mov	r3, r0
}
 8015c88:	4618      	mov	r0, r3
 8015c8a:	bd80      	pop	{r7, pc}

08015c8c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8015c8c:	b580      	push	{r7, lr}
 8015c8e:	b082      	sub	sp, #8
 8015c90:	af00      	add	r7, sp, #0
 8015c92:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8015c94:	687b      	ldr	r3, [r7, #4]
 8015c96:	2b00      	cmp	r3, #0
 8015c98:	d106      	bne.n	8015ca8 <ip_frag_free_pbuf_custom_ref+0x1c>
 8015c9a:	4b07      	ldr	r3, [pc, #28]	; (8015cb8 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8015c9c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8015ca0:	4906      	ldr	r1, [pc, #24]	; (8015cbc <ip_frag_free_pbuf_custom_ref+0x30>)
 8015ca2:	4807      	ldr	r0, [pc, #28]	; (8015cc0 <ip_frag_free_pbuf_custom_ref+0x34>)
 8015ca4:	f000 fbb4 	bl	8016410 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8015ca8:	6879      	ldr	r1, [r7, #4]
 8015caa:	2005      	movs	r0, #5
 8015cac:	f7f4 f852 	bl	8009d54 <memp_free>
}
 8015cb0:	bf00      	nop
 8015cb2:	3708      	adds	r7, #8
 8015cb4:	46bd      	mov	sp, r7
 8015cb6:	bd80      	pop	{r7, pc}
 8015cb8:	0801af1c 	.word	0x0801af1c
 8015cbc:	0801b0d4 	.word	0x0801b0d4
 8015cc0:	0801af64 	.word	0x0801af64

08015cc4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8015cc4:	b580      	push	{r7, lr}
 8015cc6:	b084      	sub	sp, #16
 8015cc8:	af00      	add	r7, sp, #0
 8015cca:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8015ccc:	687b      	ldr	r3, [r7, #4]
 8015cce:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8015cd0:	68fb      	ldr	r3, [r7, #12]
 8015cd2:	2b00      	cmp	r3, #0
 8015cd4:	d106      	bne.n	8015ce4 <ipfrag_free_pbuf_custom+0x20>
 8015cd6:	4b11      	ldr	r3, [pc, #68]	; (8015d1c <ipfrag_free_pbuf_custom+0x58>)
 8015cd8:	f240 22ce 	movw	r2, #718	; 0x2ce
 8015cdc:	4910      	ldr	r1, [pc, #64]	; (8015d20 <ipfrag_free_pbuf_custom+0x5c>)
 8015cde:	4811      	ldr	r0, [pc, #68]	; (8015d24 <ipfrag_free_pbuf_custom+0x60>)
 8015ce0:	f000 fb96 	bl	8016410 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8015ce4:	68fa      	ldr	r2, [r7, #12]
 8015ce6:	687b      	ldr	r3, [r7, #4]
 8015ce8:	429a      	cmp	r2, r3
 8015cea:	d006      	beq.n	8015cfa <ipfrag_free_pbuf_custom+0x36>
 8015cec:	4b0b      	ldr	r3, [pc, #44]	; (8015d1c <ipfrag_free_pbuf_custom+0x58>)
 8015cee:	f240 22cf 	movw	r2, #719	; 0x2cf
 8015cf2:	490d      	ldr	r1, [pc, #52]	; (8015d28 <ipfrag_free_pbuf_custom+0x64>)
 8015cf4:	480b      	ldr	r0, [pc, #44]	; (8015d24 <ipfrag_free_pbuf_custom+0x60>)
 8015cf6:	f000 fb8b 	bl	8016410 <iprintf>
  if (pcr->original != NULL) {
 8015cfa:	68fb      	ldr	r3, [r7, #12]
 8015cfc:	695b      	ldr	r3, [r3, #20]
 8015cfe:	2b00      	cmp	r3, #0
 8015d00:	d004      	beq.n	8015d0c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8015d02:	68fb      	ldr	r3, [r7, #12]
 8015d04:	695b      	ldr	r3, [r3, #20]
 8015d06:	4618      	mov	r0, r3
 8015d08:	f7f4 fed4 	bl	800aab4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8015d0c:	68f8      	ldr	r0, [r7, #12]
 8015d0e:	f7ff ffbd 	bl	8015c8c <ip_frag_free_pbuf_custom_ref>
}
 8015d12:	bf00      	nop
 8015d14:	3710      	adds	r7, #16
 8015d16:	46bd      	mov	sp, r7
 8015d18:	bd80      	pop	{r7, pc}
 8015d1a:	bf00      	nop
 8015d1c:	0801af1c 	.word	0x0801af1c
 8015d20:	0801b0e0 	.word	0x0801b0e0
 8015d24:	0801af64 	.word	0x0801af64
 8015d28:	0801b0ec 	.word	0x0801b0ec

08015d2c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8015d2c:	b580      	push	{r7, lr}
 8015d2e:	b094      	sub	sp, #80	; 0x50
 8015d30:	af02      	add	r7, sp, #8
 8015d32:	60f8      	str	r0, [r7, #12]
 8015d34:	60b9      	str	r1, [r7, #8]
 8015d36:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8015d38:	2300      	movs	r3, #0
 8015d3a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8015d3e:	68bb      	ldr	r3, [r7, #8]
 8015d40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015d42:	3b14      	subs	r3, #20
 8015d44:	2b00      	cmp	r3, #0
 8015d46:	da00      	bge.n	8015d4a <ip4_frag+0x1e>
 8015d48:	3307      	adds	r3, #7
 8015d4a:	10db      	asrs	r3, r3, #3
 8015d4c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8015d4e:	2314      	movs	r3, #20
 8015d50:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8015d52:	68fb      	ldr	r3, [r7, #12]
 8015d54:	685b      	ldr	r3, [r3, #4]
 8015d56:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8015d58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015d5a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8015d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d5e:	781b      	ldrb	r3, [r3, #0]
 8015d60:	f003 030f 	and.w	r3, r3, #15
 8015d64:	b2db      	uxtb	r3, r3
 8015d66:	009b      	lsls	r3, r3, #2
 8015d68:	b2db      	uxtb	r3, r3
 8015d6a:	2b14      	cmp	r3, #20
 8015d6c:	d002      	beq.n	8015d74 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8015d6e:	f06f 0305 	mvn.w	r3, #5
 8015d72:	e110      	b.n	8015f96 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8015d74:	68fb      	ldr	r3, [r7, #12]
 8015d76:	895b      	ldrh	r3, [r3, #10]
 8015d78:	2b13      	cmp	r3, #19
 8015d7a:	d809      	bhi.n	8015d90 <ip4_frag+0x64>
 8015d7c:	4b88      	ldr	r3, [pc, #544]	; (8015fa0 <ip4_frag+0x274>)
 8015d7e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8015d82:	4988      	ldr	r1, [pc, #544]	; (8015fa4 <ip4_frag+0x278>)
 8015d84:	4888      	ldr	r0, [pc, #544]	; (8015fa8 <ip4_frag+0x27c>)
 8015d86:	f000 fb43 	bl	8016410 <iprintf>
 8015d8a:	f06f 0305 	mvn.w	r3, #5
 8015d8e:	e102      	b.n	8015f96 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8015d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d92:	88db      	ldrh	r3, [r3, #6]
 8015d94:	b29b      	uxth	r3, r3
 8015d96:	4618      	mov	r0, r3
 8015d98:	f7f3 faac 	bl	80092f4 <lwip_htons>
 8015d9c:	4603      	mov	r3, r0
 8015d9e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8015da0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015da2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015da6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8015daa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015dac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8015db0:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8015db2:	68fb      	ldr	r3, [r7, #12]
 8015db4:	891b      	ldrh	r3, [r3, #8]
 8015db6:	3b14      	subs	r3, #20
 8015db8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8015dbc:	e0e1      	b.n	8015f82 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8015dbe:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015dc0:	00db      	lsls	r3, r3, #3
 8015dc2:	b29b      	uxth	r3, r3
 8015dc4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015dc8:	4293      	cmp	r3, r2
 8015dca:	bf28      	it	cs
 8015dcc:	4613      	movcs	r3, r2
 8015dce:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8015dd0:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015dd4:	2114      	movs	r1, #20
 8015dd6:	200e      	movs	r0, #14
 8015dd8:	f7f4 fb88 	bl	800a4ec <pbuf_alloc>
 8015ddc:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8015dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015de0:	2b00      	cmp	r3, #0
 8015de2:	f000 80d5 	beq.w	8015f90 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8015de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015de8:	895b      	ldrh	r3, [r3, #10]
 8015dea:	2b13      	cmp	r3, #19
 8015dec:	d806      	bhi.n	8015dfc <ip4_frag+0xd0>
 8015dee:	4b6c      	ldr	r3, [pc, #432]	; (8015fa0 <ip4_frag+0x274>)
 8015df0:	f44f 7249 	mov.w	r2, #804	; 0x324
 8015df4:	496d      	ldr	r1, [pc, #436]	; (8015fac <ip4_frag+0x280>)
 8015df6:	486c      	ldr	r0, [pc, #432]	; (8015fa8 <ip4_frag+0x27c>)
 8015df8:	f000 fb0a 	bl	8016410 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8015dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015dfe:	685b      	ldr	r3, [r3, #4]
 8015e00:	2214      	movs	r2, #20
 8015e02:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8015e04:	4618      	mov	r0, r3
 8015e06:	f000 fad3 	bl	80163b0 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8015e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e0c:	685b      	ldr	r3, [r3, #4]
 8015e0e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8015e10:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015e12:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8015e16:	e064      	b.n	8015ee2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8015e18:	68fb      	ldr	r3, [r7, #12]
 8015e1a:	895a      	ldrh	r2, [r3, #10]
 8015e1c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015e1e:	1ad3      	subs	r3, r2, r3
 8015e20:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8015e22:	68fb      	ldr	r3, [r7, #12]
 8015e24:	895b      	ldrh	r3, [r3, #10]
 8015e26:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8015e28:	429a      	cmp	r2, r3
 8015e2a:	d906      	bls.n	8015e3a <ip4_frag+0x10e>
 8015e2c:	4b5c      	ldr	r3, [pc, #368]	; (8015fa0 <ip4_frag+0x274>)
 8015e2e:	f240 322d 	movw	r2, #813	; 0x32d
 8015e32:	495f      	ldr	r1, [pc, #380]	; (8015fb0 <ip4_frag+0x284>)
 8015e34:	485c      	ldr	r0, [pc, #368]	; (8015fa8 <ip4_frag+0x27c>)
 8015e36:	f000 faeb 	bl	8016410 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8015e3a:	8bfa      	ldrh	r2, [r7, #30]
 8015e3c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015e40:	4293      	cmp	r3, r2
 8015e42:	bf28      	it	cs
 8015e44:	4613      	movcs	r3, r2
 8015e46:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8015e4a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8015e4e:	2b00      	cmp	r3, #0
 8015e50:	d105      	bne.n	8015e5e <ip4_frag+0x132>
        poff = 0;
 8015e52:	2300      	movs	r3, #0
 8015e54:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8015e56:	68fb      	ldr	r3, [r7, #12]
 8015e58:	681b      	ldr	r3, [r3, #0]
 8015e5a:	60fb      	str	r3, [r7, #12]
        continue;
 8015e5c:	e041      	b.n	8015ee2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8015e5e:	f7ff ff0d 	bl	8015c7c <ip_frag_alloc_pbuf_custom_ref>
 8015e62:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8015e64:	69bb      	ldr	r3, [r7, #24]
 8015e66:	2b00      	cmp	r3, #0
 8015e68:	d103      	bne.n	8015e72 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8015e6a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015e6c:	f7f4 fe22 	bl	800aab4 <pbuf_free>
        goto memerr;
 8015e70:	e08f      	b.n	8015f92 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8015e72:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8015e74:	68fb      	ldr	r3, [r7, #12]
 8015e76:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8015e78:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015e7a:	4413      	add	r3, r2
 8015e7c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8015e80:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8015e84:	9201      	str	r2, [sp, #4]
 8015e86:	9300      	str	r3, [sp, #0]
 8015e88:	4603      	mov	r3, r0
 8015e8a:	2241      	movs	r2, #65	; 0x41
 8015e8c:	2000      	movs	r0, #0
 8015e8e:	f7f4 fc57 	bl	800a740 <pbuf_alloced_custom>
 8015e92:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8015e94:	697b      	ldr	r3, [r7, #20]
 8015e96:	2b00      	cmp	r3, #0
 8015e98:	d106      	bne.n	8015ea8 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8015e9a:	69b8      	ldr	r0, [r7, #24]
 8015e9c:	f7ff fef6 	bl	8015c8c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8015ea0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015ea2:	f7f4 fe07 	bl	800aab4 <pbuf_free>
        goto memerr;
 8015ea6:	e074      	b.n	8015f92 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8015ea8:	68f8      	ldr	r0, [r7, #12]
 8015eaa:	f7f4 fea9 	bl	800ac00 <pbuf_ref>
      pcr->original = p;
 8015eae:	69bb      	ldr	r3, [r7, #24]
 8015eb0:	68fa      	ldr	r2, [r7, #12]
 8015eb2:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8015eb4:	69bb      	ldr	r3, [r7, #24]
 8015eb6:	4a3f      	ldr	r2, [pc, #252]	; (8015fb4 <ip4_frag+0x288>)
 8015eb8:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8015eba:	6979      	ldr	r1, [r7, #20]
 8015ebc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015ebe:	f7f4 fec7 	bl	800ac50 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8015ec2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8015ec6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8015eca:	1ad3      	subs	r3, r2, r3
 8015ecc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8015ed0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015ed4:	2b00      	cmp	r3, #0
 8015ed6:	d004      	beq.n	8015ee2 <ip4_frag+0x1b6>
        poff = 0;
 8015ed8:	2300      	movs	r3, #0
 8015eda:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8015edc:	68fb      	ldr	r3, [r7, #12]
 8015ede:	681b      	ldr	r3, [r3, #0]
 8015ee0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8015ee2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015ee6:	2b00      	cmp	r3, #0
 8015ee8:	d196      	bne.n	8015e18 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8015eea:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8015eec:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8015ef0:	4413      	add	r3, r2
 8015ef2:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8015ef4:	68bb      	ldr	r3, [r7, #8]
 8015ef6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015ef8:	f1a3 0213 	sub.w	r2, r3, #19
 8015efc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015f00:	429a      	cmp	r2, r3
 8015f02:	bfcc      	ite	gt
 8015f04:	2301      	movgt	r3, #1
 8015f06:	2300      	movle	r3, #0
 8015f08:	b2db      	uxtb	r3, r3
 8015f0a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8015f0c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8015f10:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015f14:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8015f16:	6a3b      	ldr	r3, [r7, #32]
 8015f18:	2b00      	cmp	r3, #0
 8015f1a:	d002      	beq.n	8015f22 <ip4_frag+0x1f6>
 8015f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f1e:	2b00      	cmp	r3, #0
 8015f20:	d003      	beq.n	8015f2a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8015f22:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015f24:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8015f28:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8015f2a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015f2c:	4618      	mov	r0, r3
 8015f2e:	f7f3 f9e1 	bl	80092f4 <lwip_htons>
 8015f32:	4603      	mov	r3, r0
 8015f34:	461a      	mov	r2, r3
 8015f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f38:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8015f3a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015f3c:	3314      	adds	r3, #20
 8015f3e:	b29b      	uxth	r3, r3
 8015f40:	4618      	mov	r0, r3
 8015f42:	f7f3 f9d7 	bl	80092f4 <lwip_htons>
 8015f46:	4603      	mov	r3, r0
 8015f48:	461a      	mov	r2, r3
 8015f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f4c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8015f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f50:	2200      	movs	r2, #0
 8015f52:	729a      	strb	r2, [r3, #10]
 8015f54:	2200      	movs	r2, #0
 8015f56:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8015f58:	68bb      	ldr	r3, [r7, #8]
 8015f5a:	695b      	ldr	r3, [r3, #20]
 8015f5c:	687a      	ldr	r2, [r7, #4]
 8015f5e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015f60:	68b8      	ldr	r0, [r7, #8]
 8015f62:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8015f64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015f66:	f7f4 fda5 	bl	800aab4 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8015f6a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015f6e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015f70:	1ad3      	subs	r3, r2, r3
 8015f72:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8015f76:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8015f7a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015f7c:	4413      	add	r3, r2
 8015f7e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8015f82:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015f86:	2b00      	cmp	r3, #0
 8015f88:	f47f af19 	bne.w	8015dbe <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8015f8c:	2300      	movs	r3, #0
 8015f8e:	e002      	b.n	8015f96 <ip4_frag+0x26a>
      goto memerr;
 8015f90:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8015f92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015f96:	4618      	mov	r0, r3
 8015f98:	3748      	adds	r7, #72	; 0x48
 8015f9a:	46bd      	mov	sp, r7
 8015f9c:	bd80      	pop	{r7, pc}
 8015f9e:	bf00      	nop
 8015fa0:	0801af1c 	.word	0x0801af1c
 8015fa4:	0801b0f8 	.word	0x0801b0f8
 8015fa8:	0801af64 	.word	0x0801af64
 8015fac:	0801b114 	.word	0x0801b114
 8015fb0:	0801b134 	.word	0x0801b134
 8015fb4:	08015cc5 	.word	0x08015cc5

08015fb8 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8015fb8:	b580      	push	{r7, lr}
 8015fba:	b086      	sub	sp, #24
 8015fbc:	af00      	add	r7, sp, #0
 8015fbe:	6078      	str	r0, [r7, #4]
 8015fc0:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8015fc2:	230e      	movs	r3, #14
 8015fc4:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8015fc6:	687b      	ldr	r3, [r7, #4]
 8015fc8:	895b      	ldrh	r3, [r3, #10]
 8015fca:	2b0e      	cmp	r3, #14
 8015fcc:	d96e      	bls.n	80160ac <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8015fce:	687b      	ldr	r3, [r7, #4]
 8015fd0:	7bdb      	ldrb	r3, [r3, #15]
 8015fd2:	2b00      	cmp	r3, #0
 8015fd4:	d106      	bne.n	8015fe4 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8015fd6:	683b      	ldr	r3, [r7, #0]
 8015fd8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8015fdc:	3301      	adds	r3, #1
 8015fde:	b2da      	uxtb	r2, r3
 8015fe0:	687b      	ldr	r3, [r7, #4]
 8015fe2:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8015fe4:	687b      	ldr	r3, [r7, #4]
 8015fe6:	685b      	ldr	r3, [r3, #4]
 8015fe8:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8015fea:	693b      	ldr	r3, [r7, #16]
 8015fec:	7b1a      	ldrb	r2, [r3, #12]
 8015fee:	7b5b      	ldrb	r3, [r3, #13]
 8015ff0:	021b      	lsls	r3, r3, #8
 8015ff2:	4313      	orrs	r3, r2
 8015ff4:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8015ff6:	693b      	ldr	r3, [r7, #16]
 8015ff8:	781b      	ldrb	r3, [r3, #0]
 8015ffa:	f003 0301 	and.w	r3, r3, #1
 8015ffe:	2b00      	cmp	r3, #0
 8016000:	d023      	beq.n	801604a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8016002:	693b      	ldr	r3, [r7, #16]
 8016004:	781b      	ldrb	r3, [r3, #0]
 8016006:	2b01      	cmp	r3, #1
 8016008:	d10f      	bne.n	801602a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801600a:	693b      	ldr	r3, [r7, #16]
 801600c:	785b      	ldrb	r3, [r3, #1]
 801600e:	2b00      	cmp	r3, #0
 8016010:	d11b      	bne.n	801604a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8016012:	693b      	ldr	r3, [r7, #16]
 8016014:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8016016:	2b5e      	cmp	r3, #94	; 0x5e
 8016018:	d117      	bne.n	801604a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801601a:	687b      	ldr	r3, [r7, #4]
 801601c:	7b5b      	ldrb	r3, [r3, #13]
 801601e:	f043 0310 	orr.w	r3, r3, #16
 8016022:	b2da      	uxtb	r2, r3
 8016024:	687b      	ldr	r3, [r7, #4]
 8016026:	735a      	strb	r2, [r3, #13]
 8016028:	e00f      	b.n	801604a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801602a:	693b      	ldr	r3, [r7, #16]
 801602c:	2206      	movs	r2, #6
 801602e:	4928      	ldr	r1, [pc, #160]	; (80160d0 <ethernet_input+0x118>)
 8016030:	4618      	mov	r0, r3
 8016032:	f000 f9ad 	bl	8016390 <memcmp>
 8016036:	4603      	mov	r3, r0
 8016038:	2b00      	cmp	r3, #0
 801603a:	d106      	bne.n	801604a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801603c:	687b      	ldr	r3, [r7, #4]
 801603e:	7b5b      	ldrb	r3, [r3, #13]
 8016040:	f043 0308 	orr.w	r3, r3, #8
 8016044:	b2da      	uxtb	r2, r3
 8016046:	687b      	ldr	r3, [r7, #4]
 8016048:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801604a:	89fb      	ldrh	r3, [r7, #14]
 801604c:	2b08      	cmp	r3, #8
 801604e:	d003      	beq.n	8016058 <ethernet_input+0xa0>
 8016050:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8016054:	d014      	beq.n	8016080 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8016056:	e032      	b.n	80160be <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016058:	683b      	ldr	r3, [r7, #0]
 801605a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801605e:	f003 0308 	and.w	r3, r3, #8
 8016062:	2b00      	cmp	r3, #0
 8016064:	d024      	beq.n	80160b0 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8016066:	8afb      	ldrh	r3, [r7, #22]
 8016068:	4619      	mov	r1, r3
 801606a:	6878      	ldr	r0, [r7, #4]
 801606c:	f7f4 fc9c 	bl	800a9a8 <pbuf_remove_header>
 8016070:	4603      	mov	r3, r0
 8016072:	2b00      	cmp	r3, #0
 8016074:	d11e      	bne.n	80160b4 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8016076:	6839      	ldr	r1, [r7, #0]
 8016078:	6878      	ldr	r0, [r7, #4]
 801607a:	f7fe ff03 	bl	8014e84 <ip4_input>
      break;
 801607e:	e013      	b.n	80160a8 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016080:	683b      	ldr	r3, [r7, #0]
 8016082:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016086:	f003 0308 	and.w	r3, r3, #8
 801608a:	2b00      	cmp	r3, #0
 801608c:	d014      	beq.n	80160b8 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801608e:	8afb      	ldrh	r3, [r7, #22]
 8016090:	4619      	mov	r1, r3
 8016092:	6878      	ldr	r0, [r7, #4]
 8016094:	f7f4 fc88 	bl	800a9a8 <pbuf_remove_header>
 8016098:	4603      	mov	r3, r0
 801609a:	2b00      	cmp	r3, #0
 801609c:	d10e      	bne.n	80160bc <ethernet_input+0x104>
        etharp_input(p, netif);
 801609e:	6839      	ldr	r1, [r7, #0]
 80160a0:	6878      	ldr	r0, [r7, #4]
 80160a2:	f7fe f89f 	bl	80141e4 <etharp_input>
      break;
 80160a6:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80160a8:	2300      	movs	r3, #0
 80160aa:	e00c      	b.n	80160c6 <ethernet_input+0x10e>
    goto free_and_return;
 80160ac:	bf00      	nop
 80160ae:	e006      	b.n	80160be <ethernet_input+0x106>
        goto free_and_return;
 80160b0:	bf00      	nop
 80160b2:	e004      	b.n	80160be <ethernet_input+0x106>
        goto free_and_return;
 80160b4:	bf00      	nop
 80160b6:	e002      	b.n	80160be <ethernet_input+0x106>
        goto free_and_return;
 80160b8:	bf00      	nop
 80160ba:	e000      	b.n	80160be <ethernet_input+0x106>
        goto free_and_return;
 80160bc:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80160be:	6878      	ldr	r0, [r7, #4]
 80160c0:	f7f4 fcf8 	bl	800aab4 <pbuf_free>
  return ERR_OK;
 80160c4:	2300      	movs	r3, #0
}
 80160c6:	4618      	mov	r0, r3
 80160c8:	3718      	adds	r7, #24
 80160ca:	46bd      	mov	sp, r7
 80160cc:	bd80      	pop	{r7, pc}
 80160ce:	bf00      	nop
 80160d0:	0801b334 	.word	0x0801b334

080160d4 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80160d4:	b580      	push	{r7, lr}
 80160d6:	b086      	sub	sp, #24
 80160d8:	af00      	add	r7, sp, #0
 80160da:	60f8      	str	r0, [r7, #12]
 80160dc:	60b9      	str	r1, [r7, #8]
 80160de:	607a      	str	r2, [r7, #4]
 80160e0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80160e2:	8c3b      	ldrh	r3, [r7, #32]
 80160e4:	4618      	mov	r0, r3
 80160e6:	f7f3 f905 	bl	80092f4 <lwip_htons>
 80160ea:	4603      	mov	r3, r0
 80160ec:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80160ee:	210e      	movs	r1, #14
 80160f0:	68b8      	ldr	r0, [r7, #8]
 80160f2:	f7f4 fc49 	bl	800a988 <pbuf_add_header>
 80160f6:	4603      	mov	r3, r0
 80160f8:	2b00      	cmp	r3, #0
 80160fa:	d125      	bne.n	8016148 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80160fc:	68bb      	ldr	r3, [r7, #8]
 80160fe:	685b      	ldr	r3, [r3, #4]
 8016100:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8016102:	693b      	ldr	r3, [r7, #16]
 8016104:	8afa      	ldrh	r2, [r7, #22]
 8016106:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8016108:	693b      	ldr	r3, [r7, #16]
 801610a:	2206      	movs	r2, #6
 801610c:	6839      	ldr	r1, [r7, #0]
 801610e:	4618      	mov	r0, r3
 8016110:	f000 f94e 	bl	80163b0 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8016114:	693b      	ldr	r3, [r7, #16]
 8016116:	3306      	adds	r3, #6
 8016118:	2206      	movs	r2, #6
 801611a:	6879      	ldr	r1, [r7, #4]
 801611c:	4618      	mov	r0, r3
 801611e:	f000 f947 	bl	80163b0 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8016122:	68fb      	ldr	r3, [r7, #12]
 8016124:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016128:	2b06      	cmp	r3, #6
 801612a:	d006      	beq.n	801613a <ethernet_output+0x66>
 801612c:	4b0a      	ldr	r3, [pc, #40]	; (8016158 <ethernet_output+0x84>)
 801612e:	f44f 7299 	mov.w	r2, #306	; 0x132
 8016132:	490a      	ldr	r1, [pc, #40]	; (801615c <ethernet_output+0x88>)
 8016134:	480a      	ldr	r0, [pc, #40]	; (8016160 <ethernet_output+0x8c>)
 8016136:	f000 f96b 	bl	8016410 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801613a:	68fb      	ldr	r3, [r7, #12]
 801613c:	699b      	ldr	r3, [r3, #24]
 801613e:	68b9      	ldr	r1, [r7, #8]
 8016140:	68f8      	ldr	r0, [r7, #12]
 8016142:	4798      	blx	r3
 8016144:	4603      	mov	r3, r0
 8016146:	e002      	b.n	801614e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8016148:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801614a:	f06f 0301 	mvn.w	r3, #1
}
 801614e:	4618      	mov	r0, r3
 8016150:	3718      	adds	r7, #24
 8016152:	46bd      	mov	sp, r7
 8016154:	bd80      	pop	{r7, pc}
 8016156:	bf00      	nop
 8016158:	0801b144 	.word	0x0801b144
 801615c:	0801b17c 	.word	0x0801b17c
 8016160:	0801b1b0 	.word	0x0801b1b0

08016164 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8016164:	b580      	push	{r7, lr}
 8016166:	b082      	sub	sp, #8
 8016168:	af00      	add	r7, sp, #0
 801616a:	6078      	str	r0, [r7, #4]
 801616c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 801616e:	683b      	ldr	r3, [r7, #0]
 8016170:	2200      	movs	r2, #0
 8016172:	2104      	movs	r1, #4
 8016174:	4618      	mov	r0, r3
 8016176:	f7ed ff7f 	bl	8004078 <osMessageQueueNew>
 801617a:	4602      	mov	r2, r0
 801617c:	687b      	ldr	r3, [r7, #4]
 801617e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8016180:	687b      	ldr	r3, [r7, #4]
 8016182:	681b      	ldr	r3, [r3, #0]
 8016184:	2b00      	cmp	r3, #0
 8016186:	d102      	bne.n	801618e <sys_mbox_new+0x2a>
    return ERR_MEM;
 8016188:	f04f 33ff 	mov.w	r3, #4294967295
 801618c:	e000      	b.n	8016190 <sys_mbox_new+0x2c>

  return ERR_OK;
 801618e:	2300      	movs	r3, #0
}
 8016190:	4618      	mov	r0, r3
 8016192:	3708      	adds	r7, #8
 8016194:	46bd      	mov	sp, r7
 8016196:	bd80      	pop	{r7, pc}

08016198 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8016198:	b580      	push	{r7, lr}
 801619a:	b084      	sub	sp, #16
 801619c:	af00      	add	r7, sp, #0
 801619e:	6078      	str	r0, [r7, #4]
 80161a0:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 80161a2:	687b      	ldr	r3, [r7, #4]
 80161a4:	6818      	ldr	r0, [r3, #0]
 80161a6:	4639      	mov	r1, r7
 80161a8:	2300      	movs	r3, #0
 80161aa:	2200      	movs	r2, #0
 80161ac:	f7ed ffd8 	bl	8004160 <osMessageQueuePut>
 80161b0:	4603      	mov	r3, r0
 80161b2:	2b00      	cmp	r3, #0
 80161b4:	d102      	bne.n	80161bc <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 80161b6:	2300      	movs	r3, #0
 80161b8:	73fb      	strb	r3, [r7, #15]
 80161ba:	e001      	b.n	80161c0 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 80161bc:	23ff      	movs	r3, #255	; 0xff
 80161be:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 80161c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80161c4:	4618      	mov	r0, r3
 80161c6:	3710      	adds	r7, #16
 80161c8:	46bd      	mov	sp, r7
 80161ca:	bd80      	pop	{r7, pc}

080161cc <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80161cc:	b580      	push	{r7, lr}
 80161ce:	b086      	sub	sp, #24
 80161d0:	af00      	add	r7, sp, #0
 80161d2:	60f8      	str	r0, [r7, #12]
 80161d4:	60b9      	str	r1, [r7, #8]
 80161d6:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 80161d8:	f7ed fc5e 	bl	8003a98 <osKernelGetTickCount>
 80161dc:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 80161de:	687b      	ldr	r3, [r7, #4]
 80161e0:	2b00      	cmp	r3, #0
 80161e2:	d013      	beq.n	801620c <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 80161e4:	68fb      	ldr	r3, [r7, #12]
 80161e6:	6818      	ldr	r0, [r3, #0]
 80161e8:	687b      	ldr	r3, [r7, #4]
 80161ea:	2200      	movs	r2, #0
 80161ec:	68b9      	ldr	r1, [r7, #8]
 80161ee:	f7ee f817 	bl	8004220 <osMessageQueueGet>
 80161f2:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 80161f4:	693b      	ldr	r3, [r7, #16]
 80161f6:	2b00      	cmp	r3, #0
 80161f8:	d105      	bne.n	8016206 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 80161fa:	f7ed fc4d 	bl	8003a98 <osKernelGetTickCount>
 80161fe:	4602      	mov	r2, r0
 8016200:	697b      	ldr	r3, [r7, #20]
 8016202:	1ad3      	subs	r3, r2, r3
 8016204:	e00f      	b.n	8016226 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8016206:	f04f 33ff 	mov.w	r3, #4294967295
 801620a:	e00c      	b.n	8016226 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 801620c:	68fb      	ldr	r3, [r7, #12]
 801620e:	6818      	ldr	r0, [r3, #0]
 8016210:	f04f 33ff 	mov.w	r3, #4294967295
 8016214:	2200      	movs	r2, #0
 8016216:	68b9      	ldr	r1, [r7, #8]
 8016218:	f7ee f802 	bl	8004220 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 801621c:	f7ed fc3c 	bl	8003a98 <osKernelGetTickCount>
 8016220:	4602      	mov	r2, r0
 8016222:	697b      	ldr	r3, [r7, #20]
 8016224:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8016226:	4618      	mov	r0, r3
 8016228:	3718      	adds	r7, #24
 801622a:	46bd      	mov	sp, r7
 801622c:	bd80      	pop	{r7, pc}

0801622e <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801622e:	b480      	push	{r7}
 8016230:	b083      	sub	sp, #12
 8016232:	af00      	add	r7, sp, #0
 8016234:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8016236:	687b      	ldr	r3, [r7, #4]
 8016238:	681b      	ldr	r3, [r3, #0]
 801623a:	2b00      	cmp	r3, #0
 801623c:	d101      	bne.n	8016242 <sys_mbox_valid+0x14>
    return 0;
 801623e:	2300      	movs	r3, #0
 8016240:	e000      	b.n	8016244 <sys_mbox_valid+0x16>
  else
    return 1;
 8016242:	2301      	movs	r3, #1
}
 8016244:	4618      	mov	r0, r3
 8016246:	370c      	adds	r7, #12
 8016248:	46bd      	mov	sp, r7
 801624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801624e:	4770      	bx	lr

08016250 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8016250:	b580      	push	{r7, lr}
 8016252:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 8016254:	2000      	movs	r0, #0
 8016256:	f7ed fce2 	bl	8003c1e <osMutexNew>
 801625a:	4603      	mov	r3, r0
 801625c:	4a01      	ldr	r2, [pc, #4]	; (8016264 <sys_init+0x14>)
 801625e:	6013      	str	r3, [r2, #0]
#endif
}
 8016260:	bf00      	nop
 8016262:	bd80      	pop	{r7, pc}
 8016264:	2001b048 	.word	0x2001b048

08016268 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8016268:	b580      	push	{r7, lr}
 801626a:	b082      	sub	sp, #8
 801626c:	af00      	add	r7, sp, #0
 801626e:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 8016270:	2000      	movs	r0, #0
 8016272:	f7ed fcd4 	bl	8003c1e <osMutexNew>
 8016276:	4602      	mov	r2, r0
 8016278:	687b      	ldr	r3, [r7, #4]
 801627a:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 801627c:	687b      	ldr	r3, [r7, #4]
 801627e:	681b      	ldr	r3, [r3, #0]
 8016280:	2b00      	cmp	r3, #0
 8016282:	d102      	bne.n	801628a <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8016284:	f04f 33ff 	mov.w	r3, #4294967295
 8016288:	e000      	b.n	801628c <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801628a:	2300      	movs	r3, #0
}
 801628c:	4618      	mov	r0, r3
 801628e:	3708      	adds	r7, #8
 8016290:	46bd      	mov	sp, r7
 8016292:	bd80      	pop	{r7, pc}

08016294 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8016294:	b580      	push	{r7, lr}
 8016296:	b082      	sub	sp, #8
 8016298:	af00      	add	r7, sp, #0
 801629a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 801629c:	687b      	ldr	r3, [r7, #4]
 801629e:	681b      	ldr	r3, [r3, #0]
 80162a0:	f04f 31ff 	mov.w	r1, #4294967295
 80162a4:	4618      	mov	r0, r3
 80162a6:	f7ed fd40 	bl	8003d2a <osMutexAcquire>
#endif
}
 80162aa:	bf00      	nop
 80162ac:	3708      	adds	r7, #8
 80162ae:	46bd      	mov	sp, r7
 80162b0:	bd80      	pop	{r7, pc}

080162b2 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 80162b2:	b580      	push	{r7, lr}
 80162b4:	b082      	sub	sp, #8
 80162b6:	af00      	add	r7, sp, #0
 80162b8:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 80162ba:	687b      	ldr	r3, [r7, #4]
 80162bc:	681b      	ldr	r3, [r3, #0]
 80162be:	4618      	mov	r0, r3
 80162c0:	f7ed fd7e 	bl	8003dc0 <osMutexRelease>
}
 80162c4:	bf00      	nop
 80162c6:	3708      	adds	r7, #8
 80162c8:	46bd      	mov	sp, r7
 80162ca:	bd80      	pop	{r7, pc}

080162cc <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 80162cc:	b580      	push	{r7, lr}
 80162ce:	b08e      	sub	sp, #56	; 0x38
 80162d0:	af00      	add	r7, sp, #0
 80162d2:	60f8      	str	r0, [r7, #12]
 80162d4:	60b9      	str	r1, [r7, #8]
 80162d6:	607a      	str	r2, [r7, #4]
 80162d8:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 80162da:	f107 0314 	add.w	r3, r7, #20
 80162de:	2224      	movs	r2, #36	; 0x24
 80162e0:	2100      	movs	r1, #0
 80162e2:	4618      	mov	r0, r3
 80162e4:	f000 f88c 	bl	8016400 <memset>
 80162e8:	68fb      	ldr	r3, [r7, #12]
 80162ea:	617b      	str	r3, [r7, #20]
 80162ec:	683b      	ldr	r3, [r7, #0]
 80162ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80162f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80162f2:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 80162f4:	f107 0314 	add.w	r3, r7, #20
 80162f8:	461a      	mov	r2, r3
 80162fa:	6879      	ldr	r1, [r7, #4]
 80162fc:	68b8      	ldr	r0, [r7, #8]
 80162fe:	f7ed fbe0 	bl	8003ac2 <osThreadNew>
 8016302:	4603      	mov	r3, r0
#endif
}
 8016304:	4618      	mov	r0, r3
 8016306:	3738      	adds	r7, #56	; 0x38
 8016308:	46bd      	mov	sp, r7
 801630a:	bd80      	pop	{r7, pc}

0801630c <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801630c:	b580      	push	{r7, lr}
 801630e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 8016310:	4b04      	ldr	r3, [pc, #16]	; (8016324 <sys_arch_protect+0x18>)
 8016312:	681b      	ldr	r3, [r3, #0]
 8016314:	f04f 31ff 	mov.w	r1, #4294967295
 8016318:	4618      	mov	r0, r3
 801631a:	f7ed fd06 	bl	8003d2a <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 801631e:	2301      	movs	r3, #1
}
 8016320:	4618      	mov	r0, r3
 8016322:	bd80      	pop	{r7, pc}
 8016324:	2001b048 	.word	0x2001b048

08016328 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8016328:	b580      	push	{r7, lr}
 801632a:	b082      	sub	sp, #8
 801632c:	af00      	add	r7, sp, #0
 801632e:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8016330:	4b04      	ldr	r3, [pc, #16]	; (8016344 <sys_arch_unprotect+0x1c>)
 8016332:	681b      	ldr	r3, [r3, #0]
 8016334:	4618      	mov	r0, r3
 8016336:	f7ed fd43 	bl	8003dc0 <osMutexRelease>
}
 801633a:	bf00      	nop
 801633c:	3708      	adds	r7, #8
 801633e:	46bd      	mov	sp, r7
 8016340:	bd80      	pop	{r7, pc}
 8016342:	bf00      	nop
 8016344:	2001b048 	.word	0x2001b048

08016348 <__libc_init_array>:
 8016348:	b570      	push	{r4, r5, r6, lr}
 801634a:	4d0d      	ldr	r5, [pc, #52]	; (8016380 <__libc_init_array+0x38>)
 801634c:	4c0d      	ldr	r4, [pc, #52]	; (8016384 <__libc_init_array+0x3c>)
 801634e:	1b64      	subs	r4, r4, r5
 8016350:	10a4      	asrs	r4, r4, #2
 8016352:	2600      	movs	r6, #0
 8016354:	42a6      	cmp	r6, r4
 8016356:	d109      	bne.n	801636c <__libc_init_array+0x24>
 8016358:	4d0b      	ldr	r5, [pc, #44]	; (8016388 <__libc_init_array+0x40>)
 801635a:	4c0c      	ldr	r4, [pc, #48]	; (801638c <__libc_init_array+0x44>)
 801635c:	f001 fae6 	bl	801792c <_init>
 8016360:	1b64      	subs	r4, r4, r5
 8016362:	10a4      	asrs	r4, r4, #2
 8016364:	2600      	movs	r6, #0
 8016366:	42a6      	cmp	r6, r4
 8016368:	d105      	bne.n	8016376 <__libc_init_array+0x2e>
 801636a:	bd70      	pop	{r4, r5, r6, pc}
 801636c:	f855 3b04 	ldr.w	r3, [r5], #4
 8016370:	4798      	blx	r3
 8016372:	3601      	adds	r6, #1
 8016374:	e7ee      	b.n	8016354 <__libc_init_array+0xc>
 8016376:	f855 3b04 	ldr.w	r3, [r5], #4
 801637a:	4798      	blx	r3
 801637c:	3601      	adds	r6, #1
 801637e:	e7f2      	b.n	8016366 <__libc_init_array+0x1e>
 8016380:	0801b494 	.word	0x0801b494
 8016384:	0801b494 	.word	0x0801b494
 8016388:	0801b494 	.word	0x0801b494
 801638c:	0801b498 	.word	0x0801b498

08016390 <memcmp>:
 8016390:	b510      	push	{r4, lr}
 8016392:	3901      	subs	r1, #1
 8016394:	4402      	add	r2, r0
 8016396:	4290      	cmp	r0, r2
 8016398:	d101      	bne.n	801639e <memcmp+0xe>
 801639a:	2000      	movs	r0, #0
 801639c:	e005      	b.n	80163aa <memcmp+0x1a>
 801639e:	7803      	ldrb	r3, [r0, #0]
 80163a0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80163a4:	42a3      	cmp	r3, r4
 80163a6:	d001      	beq.n	80163ac <memcmp+0x1c>
 80163a8:	1b18      	subs	r0, r3, r4
 80163aa:	bd10      	pop	{r4, pc}
 80163ac:	3001      	adds	r0, #1
 80163ae:	e7f2      	b.n	8016396 <memcmp+0x6>

080163b0 <memcpy>:
 80163b0:	440a      	add	r2, r1
 80163b2:	4291      	cmp	r1, r2
 80163b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80163b8:	d100      	bne.n	80163bc <memcpy+0xc>
 80163ba:	4770      	bx	lr
 80163bc:	b510      	push	{r4, lr}
 80163be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80163c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80163c6:	4291      	cmp	r1, r2
 80163c8:	d1f9      	bne.n	80163be <memcpy+0xe>
 80163ca:	bd10      	pop	{r4, pc}

080163cc <memmove>:
 80163cc:	4288      	cmp	r0, r1
 80163ce:	b510      	push	{r4, lr}
 80163d0:	eb01 0402 	add.w	r4, r1, r2
 80163d4:	d902      	bls.n	80163dc <memmove+0x10>
 80163d6:	4284      	cmp	r4, r0
 80163d8:	4623      	mov	r3, r4
 80163da:	d807      	bhi.n	80163ec <memmove+0x20>
 80163dc:	1e43      	subs	r3, r0, #1
 80163de:	42a1      	cmp	r1, r4
 80163e0:	d008      	beq.n	80163f4 <memmove+0x28>
 80163e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80163e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80163ea:	e7f8      	b.n	80163de <memmove+0x12>
 80163ec:	4402      	add	r2, r0
 80163ee:	4601      	mov	r1, r0
 80163f0:	428a      	cmp	r2, r1
 80163f2:	d100      	bne.n	80163f6 <memmove+0x2a>
 80163f4:	bd10      	pop	{r4, pc}
 80163f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80163fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80163fe:	e7f7      	b.n	80163f0 <memmove+0x24>

08016400 <memset>:
 8016400:	4402      	add	r2, r0
 8016402:	4603      	mov	r3, r0
 8016404:	4293      	cmp	r3, r2
 8016406:	d100      	bne.n	801640a <memset+0xa>
 8016408:	4770      	bx	lr
 801640a:	f803 1b01 	strb.w	r1, [r3], #1
 801640e:	e7f9      	b.n	8016404 <memset+0x4>

08016410 <iprintf>:
 8016410:	b40f      	push	{r0, r1, r2, r3}
 8016412:	4b0a      	ldr	r3, [pc, #40]	; (801643c <iprintf+0x2c>)
 8016414:	b513      	push	{r0, r1, r4, lr}
 8016416:	681c      	ldr	r4, [r3, #0]
 8016418:	b124      	cbz	r4, 8016424 <iprintf+0x14>
 801641a:	69a3      	ldr	r3, [r4, #24]
 801641c:	b913      	cbnz	r3, 8016424 <iprintf+0x14>
 801641e:	4620      	mov	r0, r4
 8016420:	f000 faee 	bl	8016a00 <__sinit>
 8016424:	ab05      	add	r3, sp, #20
 8016426:	9a04      	ldr	r2, [sp, #16]
 8016428:	68a1      	ldr	r1, [r4, #8]
 801642a:	9301      	str	r3, [sp, #4]
 801642c:	4620      	mov	r0, r4
 801642e:	f000 fe6d 	bl	801710c <_vfiprintf_r>
 8016432:	b002      	add	sp, #8
 8016434:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016438:	b004      	add	sp, #16
 801643a:	4770      	bx	lr
 801643c:	20000024 	.word	0x20000024

08016440 <_puts_r>:
 8016440:	b570      	push	{r4, r5, r6, lr}
 8016442:	460e      	mov	r6, r1
 8016444:	4605      	mov	r5, r0
 8016446:	b118      	cbz	r0, 8016450 <_puts_r+0x10>
 8016448:	6983      	ldr	r3, [r0, #24]
 801644a:	b90b      	cbnz	r3, 8016450 <_puts_r+0x10>
 801644c:	f000 fad8 	bl	8016a00 <__sinit>
 8016450:	69ab      	ldr	r3, [r5, #24]
 8016452:	68ac      	ldr	r4, [r5, #8]
 8016454:	b913      	cbnz	r3, 801645c <_puts_r+0x1c>
 8016456:	4628      	mov	r0, r5
 8016458:	f000 fad2 	bl	8016a00 <__sinit>
 801645c:	4b2c      	ldr	r3, [pc, #176]	; (8016510 <_puts_r+0xd0>)
 801645e:	429c      	cmp	r4, r3
 8016460:	d120      	bne.n	80164a4 <_puts_r+0x64>
 8016462:	686c      	ldr	r4, [r5, #4]
 8016464:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016466:	07db      	lsls	r3, r3, #31
 8016468:	d405      	bmi.n	8016476 <_puts_r+0x36>
 801646a:	89a3      	ldrh	r3, [r4, #12]
 801646c:	0598      	lsls	r0, r3, #22
 801646e:	d402      	bmi.n	8016476 <_puts_r+0x36>
 8016470:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016472:	f000 fb75 	bl	8016b60 <__retarget_lock_acquire_recursive>
 8016476:	89a3      	ldrh	r3, [r4, #12]
 8016478:	0719      	lsls	r1, r3, #28
 801647a:	d51d      	bpl.n	80164b8 <_puts_r+0x78>
 801647c:	6923      	ldr	r3, [r4, #16]
 801647e:	b1db      	cbz	r3, 80164b8 <_puts_r+0x78>
 8016480:	3e01      	subs	r6, #1
 8016482:	68a3      	ldr	r3, [r4, #8]
 8016484:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8016488:	3b01      	subs	r3, #1
 801648a:	60a3      	str	r3, [r4, #8]
 801648c:	bb39      	cbnz	r1, 80164de <_puts_r+0x9e>
 801648e:	2b00      	cmp	r3, #0
 8016490:	da38      	bge.n	8016504 <_puts_r+0xc4>
 8016492:	4622      	mov	r2, r4
 8016494:	210a      	movs	r1, #10
 8016496:	4628      	mov	r0, r5
 8016498:	f000 f8ba 	bl	8016610 <__swbuf_r>
 801649c:	3001      	adds	r0, #1
 801649e:	d011      	beq.n	80164c4 <_puts_r+0x84>
 80164a0:	250a      	movs	r5, #10
 80164a2:	e011      	b.n	80164c8 <_puts_r+0x88>
 80164a4:	4b1b      	ldr	r3, [pc, #108]	; (8016514 <_puts_r+0xd4>)
 80164a6:	429c      	cmp	r4, r3
 80164a8:	d101      	bne.n	80164ae <_puts_r+0x6e>
 80164aa:	68ac      	ldr	r4, [r5, #8]
 80164ac:	e7da      	b.n	8016464 <_puts_r+0x24>
 80164ae:	4b1a      	ldr	r3, [pc, #104]	; (8016518 <_puts_r+0xd8>)
 80164b0:	429c      	cmp	r4, r3
 80164b2:	bf08      	it	eq
 80164b4:	68ec      	ldreq	r4, [r5, #12]
 80164b6:	e7d5      	b.n	8016464 <_puts_r+0x24>
 80164b8:	4621      	mov	r1, r4
 80164ba:	4628      	mov	r0, r5
 80164bc:	f000 f8fa 	bl	80166b4 <__swsetup_r>
 80164c0:	2800      	cmp	r0, #0
 80164c2:	d0dd      	beq.n	8016480 <_puts_r+0x40>
 80164c4:	f04f 35ff 	mov.w	r5, #4294967295
 80164c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80164ca:	07da      	lsls	r2, r3, #31
 80164cc:	d405      	bmi.n	80164da <_puts_r+0x9a>
 80164ce:	89a3      	ldrh	r3, [r4, #12]
 80164d0:	059b      	lsls	r3, r3, #22
 80164d2:	d402      	bmi.n	80164da <_puts_r+0x9a>
 80164d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80164d6:	f000 fb44 	bl	8016b62 <__retarget_lock_release_recursive>
 80164da:	4628      	mov	r0, r5
 80164dc:	bd70      	pop	{r4, r5, r6, pc}
 80164de:	2b00      	cmp	r3, #0
 80164e0:	da04      	bge.n	80164ec <_puts_r+0xac>
 80164e2:	69a2      	ldr	r2, [r4, #24]
 80164e4:	429a      	cmp	r2, r3
 80164e6:	dc06      	bgt.n	80164f6 <_puts_r+0xb6>
 80164e8:	290a      	cmp	r1, #10
 80164ea:	d004      	beq.n	80164f6 <_puts_r+0xb6>
 80164ec:	6823      	ldr	r3, [r4, #0]
 80164ee:	1c5a      	adds	r2, r3, #1
 80164f0:	6022      	str	r2, [r4, #0]
 80164f2:	7019      	strb	r1, [r3, #0]
 80164f4:	e7c5      	b.n	8016482 <_puts_r+0x42>
 80164f6:	4622      	mov	r2, r4
 80164f8:	4628      	mov	r0, r5
 80164fa:	f000 f889 	bl	8016610 <__swbuf_r>
 80164fe:	3001      	adds	r0, #1
 8016500:	d1bf      	bne.n	8016482 <_puts_r+0x42>
 8016502:	e7df      	b.n	80164c4 <_puts_r+0x84>
 8016504:	6823      	ldr	r3, [r4, #0]
 8016506:	250a      	movs	r5, #10
 8016508:	1c5a      	adds	r2, r3, #1
 801650a:	6022      	str	r2, [r4, #0]
 801650c:	701d      	strb	r5, [r3, #0]
 801650e:	e7db      	b.n	80164c8 <_puts_r+0x88>
 8016510:	0801b418 	.word	0x0801b418
 8016514:	0801b438 	.word	0x0801b438
 8016518:	0801b3f8 	.word	0x0801b3f8

0801651c <puts>:
 801651c:	4b02      	ldr	r3, [pc, #8]	; (8016528 <puts+0xc>)
 801651e:	4601      	mov	r1, r0
 8016520:	6818      	ldr	r0, [r3, #0]
 8016522:	f7ff bf8d 	b.w	8016440 <_puts_r>
 8016526:	bf00      	nop
 8016528:	20000024 	.word	0x20000024

0801652c <rand>:
 801652c:	4b16      	ldr	r3, [pc, #88]	; (8016588 <rand+0x5c>)
 801652e:	b510      	push	{r4, lr}
 8016530:	681c      	ldr	r4, [r3, #0]
 8016532:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8016534:	b9b3      	cbnz	r3, 8016564 <rand+0x38>
 8016536:	2018      	movs	r0, #24
 8016538:	f000 fb7a 	bl	8016c30 <malloc>
 801653c:	63a0      	str	r0, [r4, #56]	; 0x38
 801653e:	b928      	cbnz	r0, 801654c <rand+0x20>
 8016540:	4602      	mov	r2, r0
 8016542:	4b12      	ldr	r3, [pc, #72]	; (801658c <rand+0x60>)
 8016544:	4812      	ldr	r0, [pc, #72]	; (8016590 <rand+0x64>)
 8016546:	214e      	movs	r1, #78	; 0x4e
 8016548:	f000 f922 	bl	8016790 <__assert_func>
 801654c:	4a11      	ldr	r2, [pc, #68]	; (8016594 <rand+0x68>)
 801654e:	4b12      	ldr	r3, [pc, #72]	; (8016598 <rand+0x6c>)
 8016550:	e9c0 2300 	strd	r2, r3, [r0]
 8016554:	4b11      	ldr	r3, [pc, #68]	; (801659c <rand+0x70>)
 8016556:	6083      	str	r3, [r0, #8]
 8016558:	230b      	movs	r3, #11
 801655a:	8183      	strh	r3, [r0, #12]
 801655c:	2201      	movs	r2, #1
 801655e:	2300      	movs	r3, #0
 8016560:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8016564:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8016566:	4a0e      	ldr	r2, [pc, #56]	; (80165a0 <rand+0x74>)
 8016568:	6920      	ldr	r0, [r4, #16]
 801656a:	6963      	ldr	r3, [r4, #20]
 801656c:	490d      	ldr	r1, [pc, #52]	; (80165a4 <rand+0x78>)
 801656e:	4342      	muls	r2, r0
 8016570:	fb01 2203 	mla	r2, r1, r3, r2
 8016574:	fba0 0101 	umull	r0, r1, r0, r1
 8016578:	1c43      	adds	r3, r0, #1
 801657a:	eb42 0001 	adc.w	r0, r2, r1
 801657e:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8016582:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8016586:	bd10      	pop	{r4, pc}
 8016588:	20000024 	.word	0x20000024
 801658c:	0801b348 	.word	0x0801b348
 8016590:	0801b35f 	.word	0x0801b35f
 8016594:	abcd330e 	.word	0xabcd330e
 8016598:	e66d1234 	.word	0xe66d1234
 801659c:	0005deec 	.word	0x0005deec
 80165a0:	5851f42d 	.word	0x5851f42d
 80165a4:	4c957f2d 	.word	0x4c957f2d

080165a8 <sniprintf>:
 80165a8:	b40c      	push	{r2, r3}
 80165aa:	b530      	push	{r4, r5, lr}
 80165ac:	4b17      	ldr	r3, [pc, #92]	; (801660c <sniprintf+0x64>)
 80165ae:	1e0c      	subs	r4, r1, #0
 80165b0:	681d      	ldr	r5, [r3, #0]
 80165b2:	b09d      	sub	sp, #116	; 0x74
 80165b4:	da08      	bge.n	80165c8 <sniprintf+0x20>
 80165b6:	238b      	movs	r3, #139	; 0x8b
 80165b8:	602b      	str	r3, [r5, #0]
 80165ba:	f04f 30ff 	mov.w	r0, #4294967295
 80165be:	b01d      	add	sp, #116	; 0x74
 80165c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80165c4:	b002      	add	sp, #8
 80165c6:	4770      	bx	lr
 80165c8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80165cc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80165d0:	bf14      	ite	ne
 80165d2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80165d6:	4623      	moveq	r3, r4
 80165d8:	9304      	str	r3, [sp, #16]
 80165da:	9307      	str	r3, [sp, #28]
 80165dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80165e0:	9002      	str	r0, [sp, #8]
 80165e2:	9006      	str	r0, [sp, #24]
 80165e4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80165e8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80165ea:	ab21      	add	r3, sp, #132	; 0x84
 80165ec:	a902      	add	r1, sp, #8
 80165ee:	4628      	mov	r0, r5
 80165f0:	9301      	str	r3, [sp, #4]
 80165f2:	f000 fc61 	bl	8016eb8 <_svfiprintf_r>
 80165f6:	1c43      	adds	r3, r0, #1
 80165f8:	bfbc      	itt	lt
 80165fa:	238b      	movlt	r3, #139	; 0x8b
 80165fc:	602b      	strlt	r3, [r5, #0]
 80165fe:	2c00      	cmp	r4, #0
 8016600:	d0dd      	beq.n	80165be <sniprintf+0x16>
 8016602:	9b02      	ldr	r3, [sp, #8]
 8016604:	2200      	movs	r2, #0
 8016606:	701a      	strb	r2, [r3, #0]
 8016608:	e7d9      	b.n	80165be <sniprintf+0x16>
 801660a:	bf00      	nop
 801660c:	20000024 	.word	0x20000024

08016610 <__swbuf_r>:
 8016610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016612:	460e      	mov	r6, r1
 8016614:	4614      	mov	r4, r2
 8016616:	4605      	mov	r5, r0
 8016618:	b118      	cbz	r0, 8016622 <__swbuf_r+0x12>
 801661a:	6983      	ldr	r3, [r0, #24]
 801661c:	b90b      	cbnz	r3, 8016622 <__swbuf_r+0x12>
 801661e:	f000 f9ef 	bl	8016a00 <__sinit>
 8016622:	4b21      	ldr	r3, [pc, #132]	; (80166a8 <__swbuf_r+0x98>)
 8016624:	429c      	cmp	r4, r3
 8016626:	d12b      	bne.n	8016680 <__swbuf_r+0x70>
 8016628:	686c      	ldr	r4, [r5, #4]
 801662a:	69a3      	ldr	r3, [r4, #24]
 801662c:	60a3      	str	r3, [r4, #8]
 801662e:	89a3      	ldrh	r3, [r4, #12]
 8016630:	071a      	lsls	r2, r3, #28
 8016632:	d52f      	bpl.n	8016694 <__swbuf_r+0x84>
 8016634:	6923      	ldr	r3, [r4, #16]
 8016636:	b36b      	cbz	r3, 8016694 <__swbuf_r+0x84>
 8016638:	6923      	ldr	r3, [r4, #16]
 801663a:	6820      	ldr	r0, [r4, #0]
 801663c:	1ac0      	subs	r0, r0, r3
 801663e:	6963      	ldr	r3, [r4, #20]
 8016640:	b2f6      	uxtb	r6, r6
 8016642:	4283      	cmp	r3, r0
 8016644:	4637      	mov	r7, r6
 8016646:	dc04      	bgt.n	8016652 <__swbuf_r+0x42>
 8016648:	4621      	mov	r1, r4
 801664a:	4628      	mov	r0, r5
 801664c:	f000 f944 	bl	80168d8 <_fflush_r>
 8016650:	bb30      	cbnz	r0, 80166a0 <__swbuf_r+0x90>
 8016652:	68a3      	ldr	r3, [r4, #8]
 8016654:	3b01      	subs	r3, #1
 8016656:	60a3      	str	r3, [r4, #8]
 8016658:	6823      	ldr	r3, [r4, #0]
 801665a:	1c5a      	adds	r2, r3, #1
 801665c:	6022      	str	r2, [r4, #0]
 801665e:	701e      	strb	r6, [r3, #0]
 8016660:	6963      	ldr	r3, [r4, #20]
 8016662:	3001      	adds	r0, #1
 8016664:	4283      	cmp	r3, r0
 8016666:	d004      	beq.n	8016672 <__swbuf_r+0x62>
 8016668:	89a3      	ldrh	r3, [r4, #12]
 801666a:	07db      	lsls	r3, r3, #31
 801666c:	d506      	bpl.n	801667c <__swbuf_r+0x6c>
 801666e:	2e0a      	cmp	r6, #10
 8016670:	d104      	bne.n	801667c <__swbuf_r+0x6c>
 8016672:	4621      	mov	r1, r4
 8016674:	4628      	mov	r0, r5
 8016676:	f000 f92f 	bl	80168d8 <_fflush_r>
 801667a:	b988      	cbnz	r0, 80166a0 <__swbuf_r+0x90>
 801667c:	4638      	mov	r0, r7
 801667e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016680:	4b0a      	ldr	r3, [pc, #40]	; (80166ac <__swbuf_r+0x9c>)
 8016682:	429c      	cmp	r4, r3
 8016684:	d101      	bne.n	801668a <__swbuf_r+0x7a>
 8016686:	68ac      	ldr	r4, [r5, #8]
 8016688:	e7cf      	b.n	801662a <__swbuf_r+0x1a>
 801668a:	4b09      	ldr	r3, [pc, #36]	; (80166b0 <__swbuf_r+0xa0>)
 801668c:	429c      	cmp	r4, r3
 801668e:	bf08      	it	eq
 8016690:	68ec      	ldreq	r4, [r5, #12]
 8016692:	e7ca      	b.n	801662a <__swbuf_r+0x1a>
 8016694:	4621      	mov	r1, r4
 8016696:	4628      	mov	r0, r5
 8016698:	f000 f80c 	bl	80166b4 <__swsetup_r>
 801669c:	2800      	cmp	r0, #0
 801669e:	d0cb      	beq.n	8016638 <__swbuf_r+0x28>
 80166a0:	f04f 37ff 	mov.w	r7, #4294967295
 80166a4:	e7ea      	b.n	801667c <__swbuf_r+0x6c>
 80166a6:	bf00      	nop
 80166a8:	0801b418 	.word	0x0801b418
 80166ac:	0801b438 	.word	0x0801b438
 80166b0:	0801b3f8 	.word	0x0801b3f8

080166b4 <__swsetup_r>:
 80166b4:	4b32      	ldr	r3, [pc, #200]	; (8016780 <__swsetup_r+0xcc>)
 80166b6:	b570      	push	{r4, r5, r6, lr}
 80166b8:	681d      	ldr	r5, [r3, #0]
 80166ba:	4606      	mov	r6, r0
 80166bc:	460c      	mov	r4, r1
 80166be:	b125      	cbz	r5, 80166ca <__swsetup_r+0x16>
 80166c0:	69ab      	ldr	r3, [r5, #24]
 80166c2:	b913      	cbnz	r3, 80166ca <__swsetup_r+0x16>
 80166c4:	4628      	mov	r0, r5
 80166c6:	f000 f99b 	bl	8016a00 <__sinit>
 80166ca:	4b2e      	ldr	r3, [pc, #184]	; (8016784 <__swsetup_r+0xd0>)
 80166cc:	429c      	cmp	r4, r3
 80166ce:	d10f      	bne.n	80166f0 <__swsetup_r+0x3c>
 80166d0:	686c      	ldr	r4, [r5, #4]
 80166d2:	89a3      	ldrh	r3, [r4, #12]
 80166d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80166d8:	0719      	lsls	r1, r3, #28
 80166da:	d42c      	bmi.n	8016736 <__swsetup_r+0x82>
 80166dc:	06dd      	lsls	r5, r3, #27
 80166de:	d411      	bmi.n	8016704 <__swsetup_r+0x50>
 80166e0:	2309      	movs	r3, #9
 80166e2:	6033      	str	r3, [r6, #0]
 80166e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80166e8:	81a3      	strh	r3, [r4, #12]
 80166ea:	f04f 30ff 	mov.w	r0, #4294967295
 80166ee:	e03e      	b.n	801676e <__swsetup_r+0xba>
 80166f0:	4b25      	ldr	r3, [pc, #148]	; (8016788 <__swsetup_r+0xd4>)
 80166f2:	429c      	cmp	r4, r3
 80166f4:	d101      	bne.n	80166fa <__swsetup_r+0x46>
 80166f6:	68ac      	ldr	r4, [r5, #8]
 80166f8:	e7eb      	b.n	80166d2 <__swsetup_r+0x1e>
 80166fa:	4b24      	ldr	r3, [pc, #144]	; (801678c <__swsetup_r+0xd8>)
 80166fc:	429c      	cmp	r4, r3
 80166fe:	bf08      	it	eq
 8016700:	68ec      	ldreq	r4, [r5, #12]
 8016702:	e7e6      	b.n	80166d2 <__swsetup_r+0x1e>
 8016704:	0758      	lsls	r0, r3, #29
 8016706:	d512      	bpl.n	801672e <__swsetup_r+0x7a>
 8016708:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801670a:	b141      	cbz	r1, 801671e <__swsetup_r+0x6a>
 801670c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016710:	4299      	cmp	r1, r3
 8016712:	d002      	beq.n	801671a <__swsetup_r+0x66>
 8016714:	4630      	mov	r0, r6
 8016716:	f000 fa93 	bl	8016c40 <_free_r>
 801671a:	2300      	movs	r3, #0
 801671c:	6363      	str	r3, [r4, #52]	; 0x34
 801671e:	89a3      	ldrh	r3, [r4, #12]
 8016720:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016724:	81a3      	strh	r3, [r4, #12]
 8016726:	2300      	movs	r3, #0
 8016728:	6063      	str	r3, [r4, #4]
 801672a:	6923      	ldr	r3, [r4, #16]
 801672c:	6023      	str	r3, [r4, #0]
 801672e:	89a3      	ldrh	r3, [r4, #12]
 8016730:	f043 0308 	orr.w	r3, r3, #8
 8016734:	81a3      	strh	r3, [r4, #12]
 8016736:	6923      	ldr	r3, [r4, #16]
 8016738:	b94b      	cbnz	r3, 801674e <__swsetup_r+0x9a>
 801673a:	89a3      	ldrh	r3, [r4, #12]
 801673c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016740:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016744:	d003      	beq.n	801674e <__swsetup_r+0x9a>
 8016746:	4621      	mov	r1, r4
 8016748:	4630      	mov	r0, r6
 801674a:	f000 fa31 	bl	8016bb0 <__smakebuf_r>
 801674e:	89a0      	ldrh	r0, [r4, #12]
 8016750:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016754:	f010 0301 	ands.w	r3, r0, #1
 8016758:	d00a      	beq.n	8016770 <__swsetup_r+0xbc>
 801675a:	2300      	movs	r3, #0
 801675c:	60a3      	str	r3, [r4, #8]
 801675e:	6963      	ldr	r3, [r4, #20]
 8016760:	425b      	negs	r3, r3
 8016762:	61a3      	str	r3, [r4, #24]
 8016764:	6923      	ldr	r3, [r4, #16]
 8016766:	b943      	cbnz	r3, 801677a <__swsetup_r+0xc6>
 8016768:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801676c:	d1ba      	bne.n	80166e4 <__swsetup_r+0x30>
 801676e:	bd70      	pop	{r4, r5, r6, pc}
 8016770:	0781      	lsls	r1, r0, #30
 8016772:	bf58      	it	pl
 8016774:	6963      	ldrpl	r3, [r4, #20]
 8016776:	60a3      	str	r3, [r4, #8]
 8016778:	e7f4      	b.n	8016764 <__swsetup_r+0xb0>
 801677a:	2000      	movs	r0, #0
 801677c:	e7f7      	b.n	801676e <__swsetup_r+0xba>
 801677e:	bf00      	nop
 8016780:	20000024 	.word	0x20000024
 8016784:	0801b418 	.word	0x0801b418
 8016788:	0801b438 	.word	0x0801b438
 801678c:	0801b3f8 	.word	0x0801b3f8

08016790 <__assert_func>:
 8016790:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016792:	4614      	mov	r4, r2
 8016794:	461a      	mov	r2, r3
 8016796:	4b09      	ldr	r3, [pc, #36]	; (80167bc <__assert_func+0x2c>)
 8016798:	681b      	ldr	r3, [r3, #0]
 801679a:	4605      	mov	r5, r0
 801679c:	68d8      	ldr	r0, [r3, #12]
 801679e:	b14c      	cbz	r4, 80167b4 <__assert_func+0x24>
 80167a0:	4b07      	ldr	r3, [pc, #28]	; (80167c0 <__assert_func+0x30>)
 80167a2:	9100      	str	r1, [sp, #0]
 80167a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80167a8:	4906      	ldr	r1, [pc, #24]	; (80167c4 <__assert_func+0x34>)
 80167aa:	462b      	mov	r3, r5
 80167ac:	f000 f9a6 	bl	8016afc <fiprintf>
 80167b0:	f000 ffd6 	bl	8017760 <abort>
 80167b4:	4b04      	ldr	r3, [pc, #16]	; (80167c8 <__assert_func+0x38>)
 80167b6:	461c      	mov	r4, r3
 80167b8:	e7f3      	b.n	80167a2 <__assert_func+0x12>
 80167ba:	bf00      	nop
 80167bc:	20000024 	.word	0x20000024
 80167c0:	0801b3ba 	.word	0x0801b3ba
 80167c4:	0801b3c7 	.word	0x0801b3c7
 80167c8:	0801b3f5 	.word	0x0801b3f5

080167cc <__sflush_r>:
 80167cc:	898a      	ldrh	r2, [r1, #12]
 80167ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80167d2:	4605      	mov	r5, r0
 80167d4:	0710      	lsls	r0, r2, #28
 80167d6:	460c      	mov	r4, r1
 80167d8:	d458      	bmi.n	801688c <__sflush_r+0xc0>
 80167da:	684b      	ldr	r3, [r1, #4]
 80167dc:	2b00      	cmp	r3, #0
 80167de:	dc05      	bgt.n	80167ec <__sflush_r+0x20>
 80167e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80167e2:	2b00      	cmp	r3, #0
 80167e4:	dc02      	bgt.n	80167ec <__sflush_r+0x20>
 80167e6:	2000      	movs	r0, #0
 80167e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80167ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80167ee:	2e00      	cmp	r6, #0
 80167f0:	d0f9      	beq.n	80167e6 <__sflush_r+0x1a>
 80167f2:	2300      	movs	r3, #0
 80167f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80167f8:	682f      	ldr	r7, [r5, #0]
 80167fa:	602b      	str	r3, [r5, #0]
 80167fc:	d032      	beq.n	8016864 <__sflush_r+0x98>
 80167fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016800:	89a3      	ldrh	r3, [r4, #12]
 8016802:	075a      	lsls	r2, r3, #29
 8016804:	d505      	bpl.n	8016812 <__sflush_r+0x46>
 8016806:	6863      	ldr	r3, [r4, #4]
 8016808:	1ac0      	subs	r0, r0, r3
 801680a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801680c:	b10b      	cbz	r3, 8016812 <__sflush_r+0x46>
 801680e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016810:	1ac0      	subs	r0, r0, r3
 8016812:	2300      	movs	r3, #0
 8016814:	4602      	mov	r2, r0
 8016816:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016818:	6a21      	ldr	r1, [r4, #32]
 801681a:	4628      	mov	r0, r5
 801681c:	47b0      	blx	r6
 801681e:	1c43      	adds	r3, r0, #1
 8016820:	89a3      	ldrh	r3, [r4, #12]
 8016822:	d106      	bne.n	8016832 <__sflush_r+0x66>
 8016824:	6829      	ldr	r1, [r5, #0]
 8016826:	291d      	cmp	r1, #29
 8016828:	d82c      	bhi.n	8016884 <__sflush_r+0xb8>
 801682a:	4a2a      	ldr	r2, [pc, #168]	; (80168d4 <__sflush_r+0x108>)
 801682c:	40ca      	lsrs	r2, r1
 801682e:	07d6      	lsls	r6, r2, #31
 8016830:	d528      	bpl.n	8016884 <__sflush_r+0xb8>
 8016832:	2200      	movs	r2, #0
 8016834:	6062      	str	r2, [r4, #4]
 8016836:	04d9      	lsls	r1, r3, #19
 8016838:	6922      	ldr	r2, [r4, #16]
 801683a:	6022      	str	r2, [r4, #0]
 801683c:	d504      	bpl.n	8016848 <__sflush_r+0x7c>
 801683e:	1c42      	adds	r2, r0, #1
 8016840:	d101      	bne.n	8016846 <__sflush_r+0x7a>
 8016842:	682b      	ldr	r3, [r5, #0]
 8016844:	b903      	cbnz	r3, 8016848 <__sflush_r+0x7c>
 8016846:	6560      	str	r0, [r4, #84]	; 0x54
 8016848:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801684a:	602f      	str	r7, [r5, #0]
 801684c:	2900      	cmp	r1, #0
 801684e:	d0ca      	beq.n	80167e6 <__sflush_r+0x1a>
 8016850:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016854:	4299      	cmp	r1, r3
 8016856:	d002      	beq.n	801685e <__sflush_r+0x92>
 8016858:	4628      	mov	r0, r5
 801685a:	f000 f9f1 	bl	8016c40 <_free_r>
 801685e:	2000      	movs	r0, #0
 8016860:	6360      	str	r0, [r4, #52]	; 0x34
 8016862:	e7c1      	b.n	80167e8 <__sflush_r+0x1c>
 8016864:	6a21      	ldr	r1, [r4, #32]
 8016866:	2301      	movs	r3, #1
 8016868:	4628      	mov	r0, r5
 801686a:	47b0      	blx	r6
 801686c:	1c41      	adds	r1, r0, #1
 801686e:	d1c7      	bne.n	8016800 <__sflush_r+0x34>
 8016870:	682b      	ldr	r3, [r5, #0]
 8016872:	2b00      	cmp	r3, #0
 8016874:	d0c4      	beq.n	8016800 <__sflush_r+0x34>
 8016876:	2b1d      	cmp	r3, #29
 8016878:	d001      	beq.n	801687e <__sflush_r+0xb2>
 801687a:	2b16      	cmp	r3, #22
 801687c:	d101      	bne.n	8016882 <__sflush_r+0xb6>
 801687e:	602f      	str	r7, [r5, #0]
 8016880:	e7b1      	b.n	80167e6 <__sflush_r+0x1a>
 8016882:	89a3      	ldrh	r3, [r4, #12]
 8016884:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016888:	81a3      	strh	r3, [r4, #12]
 801688a:	e7ad      	b.n	80167e8 <__sflush_r+0x1c>
 801688c:	690f      	ldr	r7, [r1, #16]
 801688e:	2f00      	cmp	r7, #0
 8016890:	d0a9      	beq.n	80167e6 <__sflush_r+0x1a>
 8016892:	0793      	lsls	r3, r2, #30
 8016894:	680e      	ldr	r6, [r1, #0]
 8016896:	bf08      	it	eq
 8016898:	694b      	ldreq	r3, [r1, #20]
 801689a:	600f      	str	r7, [r1, #0]
 801689c:	bf18      	it	ne
 801689e:	2300      	movne	r3, #0
 80168a0:	eba6 0807 	sub.w	r8, r6, r7
 80168a4:	608b      	str	r3, [r1, #8]
 80168a6:	f1b8 0f00 	cmp.w	r8, #0
 80168aa:	dd9c      	ble.n	80167e6 <__sflush_r+0x1a>
 80168ac:	6a21      	ldr	r1, [r4, #32]
 80168ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80168b0:	4643      	mov	r3, r8
 80168b2:	463a      	mov	r2, r7
 80168b4:	4628      	mov	r0, r5
 80168b6:	47b0      	blx	r6
 80168b8:	2800      	cmp	r0, #0
 80168ba:	dc06      	bgt.n	80168ca <__sflush_r+0xfe>
 80168bc:	89a3      	ldrh	r3, [r4, #12]
 80168be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80168c2:	81a3      	strh	r3, [r4, #12]
 80168c4:	f04f 30ff 	mov.w	r0, #4294967295
 80168c8:	e78e      	b.n	80167e8 <__sflush_r+0x1c>
 80168ca:	4407      	add	r7, r0
 80168cc:	eba8 0800 	sub.w	r8, r8, r0
 80168d0:	e7e9      	b.n	80168a6 <__sflush_r+0xda>
 80168d2:	bf00      	nop
 80168d4:	20400001 	.word	0x20400001

080168d8 <_fflush_r>:
 80168d8:	b538      	push	{r3, r4, r5, lr}
 80168da:	690b      	ldr	r3, [r1, #16]
 80168dc:	4605      	mov	r5, r0
 80168de:	460c      	mov	r4, r1
 80168e0:	b913      	cbnz	r3, 80168e8 <_fflush_r+0x10>
 80168e2:	2500      	movs	r5, #0
 80168e4:	4628      	mov	r0, r5
 80168e6:	bd38      	pop	{r3, r4, r5, pc}
 80168e8:	b118      	cbz	r0, 80168f2 <_fflush_r+0x1a>
 80168ea:	6983      	ldr	r3, [r0, #24]
 80168ec:	b90b      	cbnz	r3, 80168f2 <_fflush_r+0x1a>
 80168ee:	f000 f887 	bl	8016a00 <__sinit>
 80168f2:	4b14      	ldr	r3, [pc, #80]	; (8016944 <_fflush_r+0x6c>)
 80168f4:	429c      	cmp	r4, r3
 80168f6:	d11b      	bne.n	8016930 <_fflush_r+0x58>
 80168f8:	686c      	ldr	r4, [r5, #4]
 80168fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80168fe:	2b00      	cmp	r3, #0
 8016900:	d0ef      	beq.n	80168e2 <_fflush_r+0xa>
 8016902:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016904:	07d0      	lsls	r0, r2, #31
 8016906:	d404      	bmi.n	8016912 <_fflush_r+0x3a>
 8016908:	0599      	lsls	r1, r3, #22
 801690a:	d402      	bmi.n	8016912 <_fflush_r+0x3a>
 801690c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801690e:	f000 f927 	bl	8016b60 <__retarget_lock_acquire_recursive>
 8016912:	4628      	mov	r0, r5
 8016914:	4621      	mov	r1, r4
 8016916:	f7ff ff59 	bl	80167cc <__sflush_r>
 801691a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801691c:	07da      	lsls	r2, r3, #31
 801691e:	4605      	mov	r5, r0
 8016920:	d4e0      	bmi.n	80168e4 <_fflush_r+0xc>
 8016922:	89a3      	ldrh	r3, [r4, #12]
 8016924:	059b      	lsls	r3, r3, #22
 8016926:	d4dd      	bmi.n	80168e4 <_fflush_r+0xc>
 8016928:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801692a:	f000 f91a 	bl	8016b62 <__retarget_lock_release_recursive>
 801692e:	e7d9      	b.n	80168e4 <_fflush_r+0xc>
 8016930:	4b05      	ldr	r3, [pc, #20]	; (8016948 <_fflush_r+0x70>)
 8016932:	429c      	cmp	r4, r3
 8016934:	d101      	bne.n	801693a <_fflush_r+0x62>
 8016936:	68ac      	ldr	r4, [r5, #8]
 8016938:	e7df      	b.n	80168fa <_fflush_r+0x22>
 801693a:	4b04      	ldr	r3, [pc, #16]	; (801694c <_fflush_r+0x74>)
 801693c:	429c      	cmp	r4, r3
 801693e:	bf08      	it	eq
 8016940:	68ec      	ldreq	r4, [r5, #12]
 8016942:	e7da      	b.n	80168fa <_fflush_r+0x22>
 8016944:	0801b418 	.word	0x0801b418
 8016948:	0801b438 	.word	0x0801b438
 801694c:	0801b3f8 	.word	0x0801b3f8

08016950 <std>:
 8016950:	2300      	movs	r3, #0
 8016952:	b510      	push	{r4, lr}
 8016954:	4604      	mov	r4, r0
 8016956:	e9c0 3300 	strd	r3, r3, [r0]
 801695a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801695e:	6083      	str	r3, [r0, #8]
 8016960:	8181      	strh	r1, [r0, #12]
 8016962:	6643      	str	r3, [r0, #100]	; 0x64
 8016964:	81c2      	strh	r2, [r0, #14]
 8016966:	6183      	str	r3, [r0, #24]
 8016968:	4619      	mov	r1, r3
 801696a:	2208      	movs	r2, #8
 801696c:	305c      	adds	r0, #92	; 0x5c
 801696e:	f7ff fd47 	bl	8016400 <memset>
 8016972:	4b05      	ldr	r3, [pc, #20]	; (8016988 <std+0x38>)
 8016974:	6263      	str	r3, [r4, #36]	; 0x24
 8016976:	4b05      	ldr	r3, [pc, #20]	; (801698c <std+0x3c>)
 8016978:	62a3      	str	r3, [r4, #40]	; 0x28
 801697a:	4b05      	ldr	r3, [pc, #20]	; (8016990 <std+0x40>)
 801697c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801697e:	4b05      	ldr	r3, [pc, #20]	; (8016994 <std+0x44>)
 8016980:	6224      	str	r4, [r4, #32]
 8016982:	6323      	str	r3, [r4, #48]	; 0x30
 8016984:	bd10      	pop	{r4, pc}
 8016986:	bf00      	nop
 8016988:	080176b5 	.word	0x080176b5
 801698c:	080176d7 	.word	0x080176d7
 8016990:	0801770f 	.word	0x0801770f
 8016994:	08017733 	.word	0x08017733

08016998 <_cleanup_r>:
 8016998:	4901      	ldr	r1, [pc, #4]	; (80169a0 <_cleanup_r+0x8>)
 801699a:	f000 b8c1 	b.w	8016b20 <_fwalk_reent>
 801699e:	bf00      	nop
 80169a0:	080168d9 	.word	0x080168d9

080169a4 <__sfmoreglue>:
 80169a4:	b570      	push	{r4, r5, r6, lr}
 80169a6:	2268      	movs	r2, #104	; 0x68
 80169a8:	1e4d      	subs	r5, r1, #1
 80169aa:	4355      	muls	r5, r2
 80169ac:	460e      	mov	r6, r1
 80169ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80169b2:	f000 f9b1 	bl	8016d18 <_malloc_r>
 80169b6:	4604      	mov	r4, r0
 80169b8:	b140      	cbz	r0, 80169cc <__sfmoreglue+0x28>
 80169ba:	2100      	movs	r1, #0
 80169bc:	e9c0 1600 	strd	r1, r6, [r0]
 80169c0:	300c      	adds	r0, #12
 80169c2:	60a0      	str	r0, [r4, #8]
 80169c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80169c8:	f7ff fd1a 	bl	8016400 <memset>
 80169cc:	4620      	mov	r0, r4
 80169ce:	bd70      	pop	{r4, r5, r6, pc}

080169d0 <__sfp_lock_acquire>:
 80169d0:	4801      	ldr	r0, [pc, #4]	; (80169d8 <__sfp_lock_acquire+0x8>)
 80169d2:	f000 b8c5 	b.w	8016b60 <__retarget_lock_acquire_recursive>
 80169d6:	bf00      	nop
 80169d8:	2001b04d 	.word	0x2001b04d

080169dc <__sfp_lock_release>:
 80169dc:	4801      	ldr	r0, [pc, #4]	; (80169e4 <__sfp_lock_release+0x8>)
 80169de:	f000 b8c0 	b.w	8016b62 <__retarget_lock_release_recursive>
 80169e2:	bf00      	nop
 80169e4:	2001b04d 	.word	0x2001b04d

080169e8 <__sinit_lock_acquire>:
 80169e8:	4801      	ldr	r0, [pc, #4]	; (80169f0 <__sinit_lock_acquire+0x8>)
 80169ea:	f000 b8b9 	b.w	8016b60 <__retarget_lock_acquire_recursive>
 80169ee:	bf00      	nop
 80169f0:	2001b04e 	.word	0x2001b04e

080169f4 <__sinit_lock_release>:
 80169f4:	4801      	ldr	r0, [pc, #4]	; (80169fc <__sinit_lock_release+0x8>)
 80169f6:	f000 b8b4 	b.w	8016b62 <__retarget_lock_release_recursive>
 80169fa:	bf00      	nop
 80169fc:	2001b04e 	.word	0x2001b04e

08016a00 <__sinit>:
 8016a00:	b510      	push	{r4, lr}
 8016a02:	4604      	mov	r4, r0
 8016a04:	f7ff fff0 	bl	80169e8 <__sinit_lock_acquire>
 8016a08:	69a3      	ldr	r3, [r4, #24]
 8016a0a:	b11b      	cbz	r3, 8016a14 <__sinit+0x14>
 8016a0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016a10:	f7ff bff0 	b.w	80169f4 <__sinit_lock_release>
 8016a14:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8016a18:	6523      	str	r3, [r4, #80]	; 0x50
 8016a1a:	4b13      	ldr	r3, [pc, #76]	; (8016a68 <__sinit+0x68>)
 8016a1c:	4a13      	ldr	r2, [pc, #76]	; (8016a6c <__sinit+0x6c>)
 8016a1e:	681b      	ldr	r3, [r3, #0]
 8016a20:	62a2      	str	r2, [r4, #40]	; 0x28
 8016a22:	42a3      	cmp	r3, r4
 8016a24:	bf04      	itt	eq
 8016a26:	2301      	moveq	r3, #1
 8016a28:	61a3      	streq	r3, [r4, #24]
 8016a2a:	4620      	mov	r0, r4
 8016a2c:	f000 f820 	bl	8016a70 <__sfp>
 8016a30:	6060      	str	r0, [r4, #4]
 8016a32:	4620      	mov	r0, r4
 8016a34:	f000 f81c 	bl	8016a70 <__sfp>
 8016a38:	60a0      	str	r0, [r4, #8]
 8016a3a:	4620      	mov	r0, r4
 8016a3c:	f000 f818 	bl	8016a70 <__sfp>
 8016a40:	2200      	movs	r2, #0
 8016a42:	60e0      	str	r0, [r4, #12]
 8016a44:	2104      	movs	r1, #4
 8016a46:	6860      	ldr	r0, [r4, #4]
 8016a48:	f7ff ff82 	bl	8016950 <std>
 8016a4c:	68a0      	ldr	r0, [r4, #8]
 8016a4e:	2201      	movs	r2, #1
 8016a50:	2109      	movs	r1, #9
 8016a52:	f7ff ff7d 	bl	8016950 <std>
 8016a56:	68e0      	ldr	r0, [r4, #12]
 8016a58:	2202      	movs	r2, #2
 8016a5a:	2112      	movs	r1, #18
 8016a5c:	f7ff ff78 	bl	8016950 <std>
 8016a60:	2301      	movs	r3, #1
 8016a62:	61a3      	str	r3, [r4, #24]
 8016a64:	e7d2      	b.n	8016a0c <__sinit+0xc>
 8016a66:	bf00      	nop
 8016a68:	0801b344 	.word	0x0801b344
 8016a6c:	08016999 	.word	0x08016999

08016a70 <__sfp>:
 8016a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016a72:	4607      	mov	r7, r0
 8016a74:	f7ff ffac 	bl	80169d0 <__sfp_lock_acquire>
 8016a78:	4b1e      	ldr	r3, [pc, #120]	; (8016af4 <__sfp+0x84>)
 8016a7a:	681e      	ldr	r6, [r3, #0]
 8016a7c:	69b3      	ldr	r3, [r6, #24]
 8016a7e:	b913      	cbnz	r3, 8016a86 <__sfp+0x16>
 8016a80:	4630      	mov	r0, r6
 8016a82:	f7ff ffbd 	bl	8016a00 <__sinit>
 8016a86:	3648      	adds	r6, #72	; 0x48
 8016a88:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8016a8c:	3b01      	subs	r3, #1
 8016a8e:	d503      	bpl.n	8016a98 <__sfp+0x28>
 8016a90:	6833      	ldr	r3, [r6, #0]
 8016a92:	b30b      	cbz	r3, 8016ad8 <__sfp+0x68>
 8016a94:	6836      	ldr	r6, [r6, #0]
 8016a96:	e7f7      	b.n	8016a88 <__sfp+0x18>
 8016a98:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8016a9c:	b9d5      	cbnz	r5, 8016ad4 <__sfp+0x64>
 8016a9e:	4b16      	ldr	r3, [pc, #88]	; (8016af8 <__sfp+0x88>)
 8016aa0:	60e3      	str	r3, [r4, #12]
 8016aa2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016aa6:	6665      	str	r5, [r4, #100]	; 0x64
 8016aa8:	f000 f859 	bl	8016b5e <__retarget_lock_init_recursive>
 8016aac:	f7ff ff96 	bl	80169dc <__sfp_lock_release>
 8016ab0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8016ab4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8016ab8:	6025      	str	r5, [r4, #0]
 8016aba:	61a5      	str	r5, [r4, #24]
 8016abc:	2208      	movs	r2, #8
 8016abe:	4629      	mov	r1, r5
 8016ac0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016ac4:	f7ff fc9c 	bl	8016400 <memset>
 8016ac8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8016acc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8016ad0:	4620      	mov	r0, r4
 8016ad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016ad4:	3468      	adds	r4, #104	; 0x68
 8016ad6:	e7d9      	b.n	8016a8c <__sfp+0x1c>
 8016ad8:	2104      	movs	r1, #4
 8016ada:	4638      	mov	r0, r7
 8016adc:	f7ff ff62 	bl	80169a4 <__sfmoreglue>
 8016ae0:	4604      	mov	r4, r0
 8016ae2:	6030      	str	r0, [r6, #0]
 8016ae4:	2800      	cmp	r0, #0
 8016ae6:	d1d5      	bne.n	8016a94 <__sfp+0x24>
 8016ae8:	f7ff ff78 	bl	80169dc <__sfp_lock_release>
 8016aec:	230c      	movs	r3, #12
 8016aee:	603b      	str	r3, [r7, #0]
 8016af0:	e7ee      	b.n	8016ad0 <__sfp+0x60>
 8016af2:	bf00      	nop
 8016af4:	0801b344 	.word	0x0801b344
 8016af8:	ffff0001 	.word	0xffff0001

08016afc <fiprintf>:
 8016afc:	b40e      	push	{r1, r2, r3}
 8016afe:	b503      	push	{r0, r1, lr}
 8016b00:	4601      	mov	r1, r0
 8016b02:	ab03      	add	r3, sp, #12
 8016b04:	4805      	ldr	r0, [pc, #20]	; (8016b1c <fiprintf+0x20>)
 8016b06:	f853 2b04 	ldr.w	r2, [r3], #4
 8016b0a:	6800      	ldr	r0, [r0, #0]
 8016b0c:	9301      	str	r3, [sp, #4]
 8016b0e:	f000 fafd 	bl	801710c <_vfiprintf_r>
 8016b12:	b002      	add	sp, #8
 8016b14:	f85d eb04 	ldr.w	lr, [sp], #4
 8016b18:	b003      	add	sp, #12
 8016b1a:	4770      	bx	lr
 8016b1c:	20000024 	.word	0x20000024

08016b20 <_fwalk_reent>:
 8016b20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016b24:	4606      	mov	r6, r0
 8016b26:	4688      	mov	r8, r1
 8016b28:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016b2c:	2700      	movs	r7, #0
 8016b2e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016b32:	f1b9 0901 	subs.w	r9, r9, #1
 8016b36:	d505      	bpl.n	8016b44 <_fwalk_reent+0x24>
 8016b38:	6824      	ldr	r4, [r4, #0]
 8016b3a:	2c00      	cmp	r4, #0
 8016b3c:	d1f7      	bne.n	8016b2e <_fwalk_reent+0xe>
 8016b3e:	4638      	mov	r0, r7
 8016b40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016b44:	89ab      	ldrh	r3, [r5, #12]
 8016b46:	2b01      	cmp	r3, #1
 8016b48:	d907      	bls.n	8016b5a <_fwalk_reent+0x3a>
 8016b4a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016b4e:	3301      	adds	r3, #1
 8016b50:	d003      	beq.n	8016b5a <_fwalk_reent+0x3a>
 8016b52:	4629      	mov	r1, r5
 8016b54:	4630      	mov	r0, r6
 8016b56:	47c0      	blx	r8
 8016b58:	4307      	orrs	r7, r0
 8016b5a:	3568      	adds	r5, #104	; 0x68
 8016b5c:	e7e9      	b.n	8016b32 <_fwalk_reent+0x12>

08016b5e <__retarget_lock_init_recursive>:
 8016b5e:	4770      	bx	lr

08016b60 <__retarget_lock_acquire_recursive>:
 8016b60:	4770      	bx	lr

08016b62 <__retarget_lock_release_recursive>:
 8016b62:	4770      	bx	lr

08016b64 <__swhatbuf_r>:
 8016b64:	b570      	push	{r4, r5, r6, lr}
 8016b66:	460e      	mov	r6, r1
 8016b68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016b6c:	2900      	cmp	r1, #0
 8016b6e:	b096      	sub	sp, #88	; 0x58
 8016b70:	4614      	mov	r4, r2
 8016b72:	461d      	mov	r5, r3
 8016b74:	da08      	bge.n	8016b88 <__swhatbuf_r+0x24>
 8016b76:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8016b7a:	2200      	movs	r2, #0
 8016b7c:	602a      	str	r2, [r5, #0]
 8016b7e:	061a      	lsls	r2, r3, #24
 8016b80:	d410      	bmi.n	8016ba4 <__swhatbuf_r+0x40>
 8016b82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016b86:	e00e      	b.n	8016ba6 <__swhatbuf_r+0x42>
 8016b88:	466a      	mov	r2, sp
 8016b8a:	f000 fe01 	bl	8017790 <_fstat_r>
 8016b8e:	2800      	cmp	r0, #0
 8016b90:	dbf1      	blt.n	8016b76 <__swhatbuf_r+0x12>
 8016b92:	9a01      	ldr	r2, [sp, #4]
 8016b94:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8016b98:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8016b9c:	425a      	negs	r2, r3
 8016b9e:	415a      	adcs	r2, r3
 8016ba0:	602a      	str	r2, [r5, #0]
 8016ba2:	e7ee      	b.n	8016b82 <__swhatbuf_r+0x1e>
 8016ba4:	2340      	movs	r3, #64	; 0x40
 8016ba6:	2000      	movs	r0, #0
 8016ba8:	6023      	str	r3, [r4, #0]
 8016baa:	b016      	add	sp, #88	; 0x58
 8016bac:	bd70      	pop	{r4, r5, r6, pc}
	...

08016bb0 <__smakebuf_r>:
 8016bb0:	898b      	ldrh	r3, [r1, #12]
 8016bb2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016bb4:	079d      	lsls	r5, r3, #30
 8016bb6:	4606      	mov	r6, r0
 8016bb8:	460c      	mov	r4, r1
 8016bba:	d507      	bpl.n	8016bcc <__smakebuf_r+0x1c>
 8016bbc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016bc0:	6023      	str	r3, [r4, #0]
 8016bc2:	6123      	str	r3, [r4, #16]
 8016bc4:	2301      	movs	r3, #1
 8016bc6:	6163      	str	r3, [r4, #20]
 8016bc8:	b002      	add	sp, #8
 8016bca:	bd70      	pop	{r4, r5, r6, pc}
 8016bcc:	ab01      	add	r3, sp, #4
 8016bce:	466a      	mov	r2, sp
 8016bd0:	f7ff ffc8 	bl	8016b64 <__swhatbuf_r>
 8016bd4:	9900      	ldr	r1, [sp, #0]
 8016bd6:	4605      	mov	r5, r0
 8016bd8:	4630      	mov	r0, r6
 8016bda:	f000 f89d 	bl	8016d18 <_malloc_r>
 8016bde:	b948      	cbnz	r0, 8016bf4 <__smakebuf_r+0x44>
 8016be0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016be4:	059a      	lsls	r2, r3, #22
 8016be6:	d4ef      	bmi.n	8016bc8 <__smakebuf_r+0x18>
 8016be8:	f023 0303 	bic.w	r3, r3, #3
 8016bec:	f043 0302 	orr.w	r3, r3, #2
 8016bf0:	81a3      	strh	r3, [r4, #12]
 8016bf2:	e7e3      	b.n	8016bbc <__smakebuf_r+0xc>
 8016bf4:	4b0d      	ldr	r3, [pc, #52]	; (8016c2c <__smakebuf_r+0x7c>)
 8016bf6:	62b3      	str	r3, [r6, #40]	; 0x28
 8016bf8:	89a3      	ldrh	r3, [r4, #12]
 8016bfa:	6020      	str	r0, [r4, #0]
 8016bfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016c00:	81a3      	strh	r3, [r4, #12]
 8016c02:	9b00      	ldr	r3, [sp, #0]
 8016c04:	6163      	str	r3, [r4, #20]
 8016c06:	9b01      	ldr	r3, [sp, #4]
 8016c08:	6120      	str	r0, [r4, #16]
 8016c0a:	b15b      	cbz	r3, 8016c24 <__smakebuf_r+0x74>
 8016c0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016c10:	4630      	mov	r0, r6
 8016c12:	f000 fdcf 	bl	80177b4 <_isatty_r>
 8016c16:	b128      	cbz	r0, 8016c24 <__smakebuf_r+0x74>
 8016c18:	89a3      	ldrh	r3, [r4, #12]
 8016c1a:	f023 0303 	bic.w	r3, r3, #3
 8016c1e:	f043 0301 	orr.w	r3, r3, #1
 8016c22:	81a3      	strh	r3, [r4, #12]
 8016c24:	89a0      	ldrh	r0, [r4, #12]
 8016c26:	4305      	orrs	r5, r0
 8016c28:	81a5      	strh	r5, [r4, #12]
 8016c2a:	e7cd      	b.n	8016bc8 <__smakebuf_r+0x18>
 8016c2c:	08016999 	.word	0x08016999

08016c30 <malloc>:
 8016c30:	4b02      	ldr	r3, [pc, #8]	; (8016c3c <malloc+0xc>)
 8016c32:	4601      	mov	r1, r0
 8016c34:	6818      	ldr	r0, [r3, #0]
 8016c36:	f000 b86f 	b.w	8016d18 <_malloc_r>
 8016c3a:	bf00      	nop
 8016c3c:	20000024 	.word	0x20000024

08016c40 <_free_r>:
 8016c40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016c42:	2900      	cmp	r1, #0
 8016c44:	d044      	beq.n	8016cd0 <_free_r+0x90>
 8016c46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016c4a:	9001      	str	r0, [sp, #4]
 8016c4c:	2b00      	cmp	r3, #0
 8016c4e:	f1a1 0404 	sub.w	r4, r1, #4
 8016c52:	bfb8      	it	lt
 8016c54:	18e4      	addlt	r4, r4, r3
 8016c56:	f000 fdcf 	bl	80177f8 <__malloc_lock>
 8016c5a:	4a1e      	ldr	r2, [pc, #120]	; (8016cd4 <_free_r+0x94>)
 8016c5c:	9801      	ldr	r0, [sp, #4]
 8016c5e:	6813      	ldr	r3, [r2, #0]
 8016c60:	b933      	cbnz	r3, 8016c70 <_free_r+0x30>
 8016c62:	6063      	str	r3, [r4, #4]
 8016c64:	6014      	str	r4, [r2, #0]
 8016c66:	b003      	add	sp, #12
 8016c68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016c6c:	f000 bdca 	b.w	8017804 <__malloc_unlock>
 8016c70:	42a3      	cmp	r3, r4
 8016c72:	d908      	bls.n	8016c86 <_free_r+0x46>
 8016c74:	6825      	ldr	r5, [r4, #0]
 8016c76:	1961      	adds	r1, r4, r5
 8016c78:	428b      	cmp	r3, r1
 8016c7a:	bf01      	itttt	eq
 8016c7c:	6819      	ldreq	r1, [r3, #0]
 8016c7e:	685b      	ldreq	r3, [r3, #4]
 8016c80:	1949      	addeq	r1, r1, r5
 8016c82:	6021      	streq	r1, [r4, #0]
 8016c84:	e7ed      	b.n	8016c62 <_free_r+0x22>
 8016c86:	461a      	mov	r2, r3
 8016c88:	685b      	ldr	r3, [r3, #4]
 8016c8a:	b10b      	cbz	r3, 8016c90 <_free_r+0x50>
 8016c8c:	42a3      	cmp	r3, r4
 8016c8e:	d9fa      	bls.n	8016c86 <_free_r+0x46>
 8016c90:	6811      	ldr	r1, [r2, #0]
 8016c92:	1855      	adds	r5, r2, r1
 8016c94:	42a5      	cmp	r5, r4
 8016c96:	d10b      	bne.n	8016cb0 <_free_r+0x70>
 8016c98:	6824      	ldr	r4, [r4, #0]
 8016c9a:	4421      	add	r1, r4
 8016c9c:	1854      	adds	r4, r2, r1
 8016c9e:	42a3      	cmp	r3, r4
 8016ca0:	6011      	str	r1, [r2, #0]
 8016ca2:	d1e0      	bne.n	8016c66 <_free_r+0x26>
 8016ca4:	681c      	ldr	r4, [r3, #0]
 8016ca6:	685b      	ldr	r3, [r3, #4]
 8016ca8:	6053      	str	r3, [r2, #4]
 8016caa:	4421      	add	r1, r4
 8016cac:	6011      	str	r1, [r2, #0]
 8016cae:	e7da      	b.n	8016c66 <_free_r+0x26>
 8016cb0:	d902      	bls.n	8016cb8 <_free_r+0x78>
 8016cb2:	230c      	movs	r3, #12
 8016cb4:	6003      	str	r3, [r0, #0]
 8016cb6:	e7d6      	b.n	8016c66 <_free_r+0x26>
 8016cb8:	6825      	ldr	r5, [r4, #0]
 8016cba:	1961      	adds	r1, r4, r5
 8016cbc:	428b      	cmp	r3, r1
 8016cbe:	bf04      	itt	eq
 8016cc0:	6819      	ldreq	r1, [r3, #0]
 8016cc2:	685b      	ldreq	r3, [r3, #4]
 8016cc4:	6063      	str	r3, [r4, #4]
 8016cc6:	bf04      	itt	eq
 8016cc8:	1949      	addeq	r1, r1, r5
 8016cca:	6021      	streq	r1, [r4, #0]
 8016ccc:	6054      	str	r4, [r2, #4]
 8016cce:	e7ca      	b.n	8016c66 <_free_r+0x26>
 8016cd0:	b003      	add	sp, #12
 8016cd2:	bd30      	pop	{r4, r5, pc}
 8016cd4:	2001b050 	.word	0x2001b050

08016cd8 <sbrk_aligned>:
 8016cd8:	b570      	push	{r4, r5, r6, lr}
 8016cda:	4e0e      	ldr	r6, [pc, #56]	; (8016d14 <sbrk_aligned+0x3c>)
 8016cdc:	460c      	mov	r4, r1
 8016cde:	6831      	ldr	r1, [r6, #0]
 8016ce0:	4605      	mov	r5, r0
 8016ce2:	b911      	cbnz	r1, 8016cea <sbrk_aligned+0x12>
 8016ce4:	f000 fcd6 	bl	8017694 <_sbrk_r>
 8016ce8:	6030      	str	r0, [r6, #0]
 8016cea:	4621      	mov	r1, r4
 8016cec:	4628      	mov	r0, r5
 8016cee:	f000 fcd1 	bl	8017694 <_sbrk_r>
 8016cf2:	1c43      	adds	r3, r0, #1
 8016cf4:	d00a      	beq.n	8016d0c <sbrk_aligned+0x34>
 8016cf6:	1cc4      	adds	r4, r0, #3
 8016cf8:	f024 0403 	bic.w	r4, r4, #3
 8016cfc:	42a0      	cmp	r0, r4
 8016cfe:	d007      	beq.n	8016d10 <sbrk_aligned+0x38>
 8016d00:	1a21      	subs	r1, r4, r0
 8016d02:	4628      	mov	r0, r5
 8016d04:	f000 fcc6 	bl	8017694 <_sbrk_r>
 8016d08:	3001      	adds	r0, #1
 8016d0a:	d101      	bne.n	8016d10 <sbrk_aligned+0x38>
 8016d0c:	f04f 34ff 	mov.w	r4, #4294967295
 8016d10:	4620      	mov	r0, r4
 8016d12:	bd70      	pop	{r4, r5, r6, pc}
 8016d14:	2001b054 	.word	0x2001b054

08016d18 <_malloc_r>:
 8016d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016d1c:	1ccd      	adds	r5, r1, #3
 8016d1e:	f025 0503 	bic.w	r5, r5, #3
 8016d22:	3508      	adds	r5, #8
 8016d24:	2d0c      	cmp	r5, #12
 8016d26:	bf38      	it	cc
 8016d28:	250c      	movcc	r5, #12
 8016d2a:	2d00      	cmp	r5, #0
 8016d2c:	4607      	mov	r7, r0
 8016d2e:	db01      	blt.n	8016d34 <_malloc_r+0x1c>
 8016d30:	42a9      	cmp	r1, r5
 8016d32:	d905      	bls.n	8016d40 <_malloc_r+0x28>
 8016d34:	230c      	movs	r3, #12
 8016d36:	603b      	str	r3, [r7, #0]
 8016d38:	2600      	movs	r6, #0
 8016d3a:	4630      	mov	r0, r6
 8016d3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016d40:	4e2e      	ldr	r6, [pc, #184]	; (8016dfc <_malloc_r+0xe4>)
 8016d42:	f000 fd59 	bl	80177f8 <__malloc_lock>
 8016d46:	6833      	ldr	r3, [r6, #0]
 8016d48:	461c      	mov	r4, r3
 8016d4a:	bb34      	cbnz	r4, 8016d9a <_malloc_r+0x82>
 8016d4c:	4629      	mov	r1, r5
 8016d4e:	4638      	mov	r0, r7
 8016d50:	f7ff ffc2 	bl	8016cd8 <sbrk_aligned>
 8016d54:	1c43      	adds	r3, r0, #1
 8016d56:	4604      	mov	r4, r0
 8016d58:	d14d      	bne.n	8016df6 <_malloc_r+0xde>
 8016d5a:	6834      	ldr	r4, [r6, #0]
 8016d5c:	4626      	mov	r6, r4
 8016d5e:	2e00      	cmp	r6, #0
 8016d60:	d140      	bne.n	8016de4 <_malloc_r+0xcc>
 8016d62:	6823      	ldr	r3, [r4, #0]
 8016d64:	4631      	mov	r1, r6
 8016d66:	4638      	mov	r0, r7
 8016d68:	eb04 0803 	add.w	r8, r4, r3
 8016d6c:	f000 fc92 	bl	8017694 <_sbrk_r>
 8016d70:	4580      	cmp	r8, r0
 8016d72:	d13a      	bne.n	8016dea <_malloc_r+0xd2>
 8016d74:	6821      	ldr	r1, [r4, #0]
 8016d76:	3503      	adds	r5, #3
 8016d78:	1a6d      	subs	r5, r5, r1
 8016d7a:	f025 0503 	bic.w	r5, r5, #3
 8016d7e:	3508      	adds	r5, #8
 8016d80:	2d0c      	cmp	r5, #12
 8016d82:	bf38      	it	cc
 8016d84:	250c      	movcc	r5, #12
 8016d86:	4629      	mov	r1, r5
 8016d88:	4638      	mov	r0, r7
 8016d8a:	f7ff ffa5 	bl	8016cd8 <sbrk_aligned>
 8016d8e:	3001      	adds	r0, #1
 8016d90:	d02b      	beq.n	8016dea <_malloc_r+0xd2>
 8016d92:	6823      	ldr	r3, [r4, #0]
 8016d94:	442b      	add	r3, r5
 8016d96:	6023      	str	r3, [r4, #0]
 8016d98:	e00e      	b.n	8016db8 <_malloc_r+0xa0>
 8016d9a:	6822      	ldr	r2, [r4, #0]
 8016d9c:	1b52      	subs	r2, r2, r5
 8016d9e:	d41e      	bmi.n	8016dde <_malloc_r+0xc6>
 8016da0:	2a0b      	cmp	r2, #11
 8016da2:	d916      	bls.n	8016dd2 <_malloc_r+0xba>
 8016da4:	1961      	adds	r1, r4, r5
 8016da6:	42a3      	cmp	r3, r4
 8016da8:	6025      	str	r5, [r4, #0]
 8016daa:	bf18      	it	ne
 8016dac:	6059      	strne	r1, [r3, #4]
 8016dae:	6863      	ldr	r3, [r4, #4]
 8016db0:	bf08      	it	eq
 8016db2:	6031      	streq	r1, [r6, #0]
 8016db4:	5162      	str	r2, [r4, r5]
 8016db6:	604b      	str	r3, [r1, #4]
 8016db8:	4638      	mov	r0, r7
 8016dba:	f104 060b 	add.w	r6, r4, #11
 8016dbe:	f000 fd21 	bl	8017804 <__malloc_unlock>
 8016dc2:	f026 0607 	bic.w	r6, r6, #7
 8016dc6:	1d23      	adds	r3, r4, #4
 8016dc8:	1af2      	subs	r2, r6, r3
 8016dca:	d0b6      	beq.n	8016d3a <_malloc_r+0x22>
 8016dcc:	1b9b      	subs	r3, r3, r6
 8016dce:	50a3      	str	r3, [r4, r2]
 8016dd0:	e7b3      	b.n	8016d3a <_malloc_r+0x22>
 8016dd2:	6862      	ldr	r2, [r4, #4]
 8016dd4:	42a3      	cmp	r3, r4
 8016dd6:	bf0c      	ite	eq
 8016dd8:	6032      	streq	r2, [r6, #0]
 8016dda:	605a      	strne	r2, [r3, #4]
 8016ddc:	e7ec      	b.n	8016db8 <_malloc_r+0xa0>
 8016dde:	4623      	mov	r3, r4
 8016de0:	6864      	ldr	r4, [r4, #4]
 8016de2:	e7b2      	b.n	8016d4a <_malloc_r+0x32>
 8016de4:	4634      	mov	r4, r6
 8016de6:	6876      	ldr	r6, [r6, #4]
 8016de8:	e7b9      	b.n	8016d5e <_malloc_r+0x46>
 8016dea:	230c      	movs	r3, #12
 8016dec:	603b      	str	r3, [r7, #0]
 8016dee:	4638      	mov	r0, r7
 8016df0:	f000 fd08 	bl	8017804 <__malloc_unlock>
 8016df4:	e7a1      	b.n	8016d3a <_malloc_r+0x22>
 8016df6:	6025      	str	r5, [r4, #0]
 8016df8:	e7de      	b.n	8016db8 <_malloc_r+0xa0>
 8016dfa:	bf00      	nop
 8016dfc:	2001b050 	.word	0x2001b050

08016e00 <__ssputs_r>:
 8016e00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016e04:	688e      	ldr	r6, [r1, #8]
 8016e06:	429e      	cmp	r6, r3
 8016e08:	4682      	mov	sl, r0
 8016e0a:	460c      	mov	r4, r1
 8016e0c:	4690      	mov	r8, r2
 8016e0e:	461f      	mov	r7, r3
 8016e10:	d838      	bhi.n	8016e84 <__ssputs_r+0x84>
 8016e12:	898a      	ldrh	r2, [r1, #12]
 8016e14:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016e18:	d032      	beq.n	8016e80 <__ssputs_r+0x80>
 8016e1a:	6825      	ldr	r5, [r4, #0]
 8016e1c:	6909      	ldr	r1, [r1, #16]
 8016e1e:	eba5 0901 	sub.w	r9, r5, r1
 8016e22:	6965      	ldr	r5, [r4, #20]
 8016e24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016e28:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016e2c:	3301      	adds	r3, #1
 8016e2e:	444b      	add	r3, r9
 8016e30:	106d      	asrs	r5, r5, #1
 8016e32:	429d      	cmp	r5, r3
 8016e34:	bf38      	it	cc
 8016e36:	461d      	movcc	r5, r3
 8016e38:	0553      	lsls	r3, r2, #21
 8016e3a:	d531      	bpl.n	8016ea0 <__ssputs_r+0xa0>
 8016e3c:	4629      	mov	r1, r5
 8016e3e:	f7ff ff6b 	bl	8016d18 <_malloc_r>
 8016e42:	4606      	mov	r6, r0
 8016e44:	b950      	cbnz	r0, 8016e5c <__ssputs_r+0x5c>
 8016e46:	230c      	movs	r3, #12
 8016e48:	f8ca 3000 	str.w	r3, [sl]
 8016e4c:	89a3      	ldrh	r3, [r4, #12]
 8016e4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016e52:	81a3      	strh	r3, [r4, #12]
 8016e54:	f04f 30ff 	mov.w	r0, #4294967295
 8016e58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016e5c:	6921      	ldr	r1, [r4, #16]
 8016e5e:	464a      	mov	r2, r9
 8016e60:	f7ff faa6 	bl	80163b0 <memcpy>
 8016e64:	89a3      	ldrh	r3, [r4, #12]
 8016e66:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8016e6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016e6e:	81a3      	strh	r3, [r4, #12]
 8016e70:	6126      	str	r6, [r4, #16]
 8016e72:	6165      	str	r5, [r4, #20]
 8016e74:	444e      	add	r6, r9
 8016e76:	eba5 0509 	sub.w	r5, r5, r9
 8016e7a:	6026      	str	r6, [r4, #0]
 8016e7c:	60a5      	str	r5, [r4, #8]
 8016e7e:	463e      	mov	r6, r7
 8016e80:	42be      	cmp	r6, r7
 8016e82:	d900      	bls.n	8016e86 <__ssputs_r+0x86>
 8016e84:	463e      	mov	r6, r7
 8016e86:	6820      	ldr	r0, [r4, #0]
 8016e88:	4632      	mov	r2, r6
 8016e8a:	4641      	mov	r1, r8
 8016e8c:	f7ff fa9e 	bl	80163cc <memmove>
 8016e90:	68a3      	ldr	r3, [r4, #8]
 8016e92:	1b9b      	subs	r3, r3, r6
 8016e94:	60a3      	str	r3, [r4, #8]
 8016e96:	6823      	ldr	r3, [r4, #0]
 8016e98:	4433      	add	r3, r6
 8016e9a:	6023      	str	r3, [r4, #0]
 8016e9c:	2000      	movs	r0, #0
 8016e9e:	e7db      	b.n	8016e58 <__ssputs_r+0x58>
 8016ea0:	462a      	mov	r2, r5
 8016ea2:	f000 fcb5 	bl	8017810 <_realloc_r>
 8016ea6:	4606      	mov	r6, r0
 8016ea8:	2800      	cmp	r0, #0
 8016eaa:	d1e1      	bne.n	8016e70 <__ssputs_r+0x70>
 8016eac:	6921      	ldr	r1, [r4, #16]
 8016eae:	4650      	mov	r0, sl
 8016eb0:	f7ff fec6 	bl	8016c40 <_free_r>
 8016eb4:	e7c7      	b.n	8016e46 <__ssputs_r+0x46>
	...

08016eb8 <_svfiprintf_r>:
 8016eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ebc:	4698      	mov	r8, r3
 8016ebe:	898b      	ldrh	r3, [r1, #12]
 8016ec0:	061b      	lsls	r3, r3, #24
 8016ec2:	b09d      	sub	sp, #116	; 0x74
 8016ec4:	4607      	mov	r7, r0
 8016ec6:	460d      	mov	r5, r1
 8016ec8:	4614      	mov	r4, r2
 8016eca:	d50e      	bpl.n	8016eea <_svfiprintf_r+0x32>
 8016ecc:	690b      	ldr	r3, [r1, #16]
 8016ece:	b963      	cbnz	r3, 8016eea <_svfiprintf_r+0x32>
 8016ed0:	2140      	movs	r1, #64	; 0x40
 8016ed2:	f7ff ff21 	bl	8016d18 <_malloc_r>
 8016ed6:	6028      	str	r0, [r5, #0]
 8016ed8:	6128      	str	r0, [r5, #16]
 8016eda:	b920      	cbnz	r0, 8016ee6 <_svfiprintf_r+0x2e>
 8016edc:	230c      	movs	r3, #12
 8016ede:	603b      	str	r3, [r7, #0]
 8016ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8016ee4:	e0d1      	b.n	801708a <_svfiprintf_r+0x1d2>
 8016ee6:	2340      	movs	r3, #64	; 0x40
 8016ee8:	616b      	str	r3, [r5, #20]
 8016eea:	2300      	movs	r3, #0
 8016eec:	9309      	str	r3, [sp, #36]	; 0x24
 8016eee:	2320      	movs	r3, #32
 8016ef0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016ef4:	f8cd 800c 	str.w	r8, [sp, #12]
 8016ef8:	2330      	movs	r3, #48	; 0x30
 8016efa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80170a4 <_svfiprintf_r+0x1ec>
 8016efe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016f02:	f04f 0901 	mov.w	r9, #1
 8016f06:	4623      	mov	r3, r4
 8016f08:	469a      	mov	sl, r3
 8016f0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016f0e:	b10a      	cbz	r2, 8016f14 <_svfiprintf_r+0x5c>
 8016f10:	2a25      	cmp	r2, #37	; 0x25
 8016f12:	d1f9      	bne.n	8016f08 <_svfiprintf_r+0x50>
 8016f14:	ebba 0b04 	subs.w	fp, sl, r4
 8016f18:	d00b      	beq.n	8016f32 <_svfiprintf_r+0x7a>
 8016f1a:	465b      	mov	r3, fp
 8016f1c:	4622      	mov	r2, r4
 8016f1e:	4629      	mov	r1, r5
 8016f20:	4638      	mov	r0, r7
 8016f22:	f7ff ff6d 	bl	8016e00 <__ssputs_r>
 8016f26:	3001      	adds	r0, #1
 8016f28:	f000 80aa 	beq.w	8017080 <_svfiprintf_r+0x1c8>
 8016f2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016f2e:	445a      	add	r2, fp
 8016f30:	9209      	str	r2, [sp, #36]	; 0x24
 8016f32:	f89a 3000 	ldrb.w	r3, [sl]
 8016f36:	2b00      	cmp	r3, #0
 8016f38:	f000 80a2 	beq.w	8017080 <_svfiprintf_r+0x1c8>
 8016f3c:	2300      	movs	r3, #0
 8016f3e:	f04f 32ff 	mov.w	r2, #4294967295
 8016f42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016f46:	f10a 0a01 	add.w	sl, sl, #1
 8016f4a:	9304      	str	r3, [sp, #16]
 8016f4c:	9307      	str	r3, [sp, #28]
 8016f4e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016f52:	931a      	str	r3, [sp, #104]	; 0x68
 8016f54:	4654      	mov	r4, sl
 8016f56:	2205      	movs	r2, #5
 8016f58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016f5c:	4851      	ldr	r0, [pc, #324]	; (80170a4 <_svfiprintf_r+0x1ec>)
 8016f5e:	f7e9 f94f 	bl	8000200 <memchr>
 8016f62:	9a04      	ldr	r2, [sp, #16]
 8016f64:	b9d8      	cbnz	r0, 8016f9e <_svfiprintf_r+0xe6>
 8016f66:	06d0      	lsls	r0, r2, #27
 8016f68:	bf44      	itt	mi
 8016f6a:	2320      	movmi	r3, #32
 8016f6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016f70:	0711      	lsls	r1, r2, #28
 8016f72:	bf44      	itt	mi
 8016f74:	232b      	movmi	r3, #43	; 0x2b
 8016f76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016f7a:	f89a 3000 	ldrb.w	r3, [sl]
 8016f7e:	2b2a      	cmp	r3, #42	; 0x2a
 8016f80:	d015      	beq.n	8016fae <_svfiprintf_r+0xf6>
 8016f82:	9a07      	ldr	r2, [sp, #28]
 8016f84:	4654      	mov	r4, sl
 8016f86:	2000      	movs	r0, #0
 8016f88:	f04f 0c0a 	mov.w	ip, #10
 8016f8c:	4621      	mov	r1, r4
 8016f8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016f92:	3b30      	subs	r3, #48	; 0x30
 8016f94:	2b09      	cmp	r3, #9
 8016f96:	d94e      	bls.n	8017036 <_svfiprintf_r+0x17e>
 8016f98:	b1b0      	cbz	r0, 8016fc8 <_svfiprintf_r+0x110>
 8016f9a:	9207      	str	r2, [sp, #28]
 8016f9c:	e014      	b.n	8016fc8 <_svfiprintf_r+0x110>
 8016f9e:	eba0 0308 	sub.w	r3, r0, r8
 8016fa2:	fa09 f303 	lsl.w	r3, r9, r3
 8016fa6:	4313      	orrs	r3, r2
 8016fa8:	9304      	str	r3, [sp, #16]
 8016faa:	46a2      	mov	sl, r4
 8016fac:	e7d2      	b.n	8016f54 <_svfiprintf_r+0x9c>
 8016fae:	9b03      	ldr	r3, [sp, #12]
 8016fb0:	1d19      	adds	r1, r3, #4
 8016fb2:	681b      	ldr	r3, [r3, #0]
 8016fb4:	9103      	str	r1, [sp, #12]
 8016fb6:	2b00      	cmp	r3, #0
 8016fb8:	bfbb      	ittet	lt
 8016fba:	425b      	neglt	r3, r3
 8016fbc:	f042 0202 	orrlt.w	r2, r2, #2
 8016fc0:	9307      	strge	r3, [sp, #28]
 8016fc2:	9307      	strlt	r3, [sp, #28]
 8016fc4:	bfb8      	it	lt
 8016fc6:	9204      	strlt	r2, [sp, #16]
 8016fc8:	7823      	ldrb	r3, [r4, #0]
 8016fca:	2b2e      	cmp	r3, #46	; 0x2e
 8016fcc:	d10c      	bne.n	8016fe8 <_svfiprintf_r+0x130>
 8016fce:	7863      	ldrb	r3, [r4, #1]
 8016fd0:	2b2a      	cmp	r3, #42	; 0x2a
 8016fd2:	d135      	bne.n	8017040 <_svfiprintf_r+0x188>
 8016fd4:	9b03      	ldr	r3, [sp, #12]
 8016fd6:	1d1a      	adds	r2, r3, #4
 8016fd8:	681b      	ldr	r3, [r3, #0]
 8016fda:	9203      	str	r2, [sp, #12]
 8016fdc:	2b00      	cmp	r3, #0
 8016fde:	bfb8      	it	lt
 8016fe0:	f04f 33ff 	movlt.w	r3, #4294967295
 8016fe4:	3402      	adds	r4, #2
 8016fe6:	9305      	str	r3, [sp, #20]
 8016fe8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80170b4 <_svfiprintf_r+0x1fc>
 8016fec:	7821      	ldrb	r1, [r4, #0]
 8016fee:	2203      	movs	r2, #3
 8016ff0:	4650      	mov	r0, sl
 8016ff2:	f7e9 f905 	bl	8000200 <memchr>
 8016ff6:	b140      	cbz	r0, 801700a <_svfiprintf_r+0x152>
 8016ff8:	2340      	movs	r3, #64	; 0x40
 8016ffa:	eba0 000a 	sub.w	r0, r0, sl
 8016ffe:	fa03 f000 	lsl.w	r0, r3, r0
 8017002:	9b04      	ldr	r3, [sp, #16]
 8017004:	4303      	orrs	r3, r0
 8017006:	3401      	adds	r4, #1
 8017008:	9304      	str	r3, [sp, #16]
 801700a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801700e:	4826      	ldr	r0, [pc, #152]	; (80170a8 <_svfiprintf_r+0x1f0>)
 8017010:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017014:	2206      	movs	r2, #6
 8017016:	f7e9 f8f3 	bl	8000200 <memchr>
 801701a:	2800      	cmp	r0, #0
 801701c:	d038      	beq.n	8017090 <_svfiprintf_r+0x1d8>
 801701e:	4b23      	ldr	r3, [pc, #140]	; (80170ac <_svfiprintf_r+0x1f4>)
 8017020:	bb1b      	cbnz	r3, 801706a <_svfiprintf_r+0x1b2>
 8017022:	9b03      	ldr	r3, [sp, #12]
 8017024:	3307      	adds	r3, #7
 8017026:	f023 0307 	bic.w	r3, r3, #7
 801702a:	3308      	adds	r3, #8
 801702c:	9303      	str	r3, [sp, #12]
 801702e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017030:	4433      	add	r3, r6
 8017032:	9309      	str	r3, [sp, #36]	; 0x24
 8017034:	e767      	b.n	8016f06 <_svfiprintf_r+0x4e>
 8017036:	fb0c 3202 	mla	r2, ip, r2, r3
 801703a:	460c      	mov	r4, r1
 801703c:	2001      	movs	r0, #1
 801703e:	e7a5      	b.n	8016f8c <_svfiprintf_r+0xd4>
 8017040:	2300      	movs	r3, #0
 8017042:	3401      	adds	r4, #1
 8017044:	9305      	str	r3, [sp, #20]
 8017046:	4619      	mov	r1, r3
 8017048:	f04f 0c0a 	mov.w	ip, #10
 801704c:	4620      	mov	r0, r4
 801704e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017052:	3a30      	subs	r2, #48	; 0x30
 8017054:	2a09      	cmp	r2, #9
 8017056:	d903      	bls.n	8017060 <_svfiprintf_r+0x1a8>
 8017058:	2b00      	cmp	r3, #0
 801705a:	d0c5      	beq.n	8016fe8 <_svfiprintf_r+0x130>
 801705c:	9105      	str	r1, [sp, #20]
 801705e:	e7c3      	b.n	8016fe8 <_svfiprintf_r+0x130>
 8017060:	fb0c 2101 	mla	r1, ip, r1, r2
 8017064:	4604      	mov	r4, r0
 8017066:	2301      	movs	r3, #1
 8017068:	e7f0      	b.n	801704c <_svfiprintf_r+0x194>
 801706a:	ab03      	add	r3, sp, #12
 801706c:	9300      	str	r3, [sp, #0]
 801706e:	462a      	mov	r2, r5
 8017070:	4b0f      	ldr	r3, [pc, #60]	; (80170b0 <_svfiprintf_r+0x1f8>)
 8017072:	a904      	add	r1, sp, #16
 8017074:	4638      	mov	r0, r7
 8017076:	f3af 8000 	nop.w
 801707a:	1c42      	adds	r2, r0, #1
 801707c:	4606      	mov	r6, r0
 801707e:	d1d6      	bne.n	801702e <_svfiprintf_r+0x176>
 8017080:	89ab      	ldrh	r3, [r5, #12]
 8017082:	065b      	lsls	r3, r3, #25
 8017084:	f53f af2c 	bmi.w	8016ee0 <_svfiprintf_r+0x28>
 8017088:	9809      	ldr	r0, [sp, #36]	; 0x24
 801708a:	b01d      	add	sp, #116	; 0x74
 801708c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017090:	ab03      	add	r3, sp, #12
 8017092:	9300      	str	r3, [sp, #0]
 8017094:	462a      	mov	r2, r5
 8017096:	4b06      	ldr	r3, [pc, #24]	; (80170b0 <_svfiprintf_r+0x1f8>)
 8017098:	a904      	add	r1, sp, #16
 801709a:	4638      	mov	r0, r7
 801709c:	f000 f9d4 	bl	8017448 <_printf_i>
 80170a0:	e7eb      	b.n	801707a <_svfiprintf_r+0x1c2>
 80170a2:	bf00      	nop
 80170a4:	0801b458 	.word	0x0801b458
 80170a8:	0801b462 	.word	0x0801b462
 80170ac:	00000000 	.word	0x00000000
 80170b0:	08016e01 	.word	0x08016e01
 80170b4:	0801b45e 	.word	0x0801b45e

080170b8 <__sfputc_r>:
 80170b8:	6893      	ldr	r3, [r2, #8]
 80170ba:	3b01      	subs	r3, #1
 80170bc:	2b00      	cmp	r3, #0
 80170be:	b410      	push	{r4}
 80170c0:	6093      	str	r3, [r2, #8]
 80170c2:	da08      	bge.n	80170d6 <__sfputc_r+0x1e>
 80170c4:	6994      	ldr	r4, [r2, #24]
 80170c6:	42a3      	cmp	r3, r4
 80170c8:	db01      	blt.n	80170ce <__sfputc_r+0x16>
 80170ca:	290a      	cmp	r1, #10
 80170cc:	d103      	bne.n	80170d6 <__sfputc_r+0x1e>
 80170ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80170d2:	f7ff ba9d 	b.w	8016610 <__swbuf_r>
 80170d6:	6813      	ldr	r3, [r2, #0]
 80170d8:	1c58      	adds	r0, r3, #1
 80170da:	6010      	str	r0, [r2, #0]
 80170dc:	7019      	strb	r1, [r3, #0]
 80170de:	4608      	mov	r0, r1
 80170e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80170e4:	4770      	bx	lr

080170e6 <__sfputs_r>:
 80170e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80170e8:	4606      	mov	r6, r0
 80170ea:	460f      	mov	r7, r1
 80170ec:	4614      	mov	r4, r2
 80170ee:	18d5      	adds	r5, r2, r3
 80170f0:	42ac      	cmp	r4, r5
 80170f2:	d101      	bne.n	80170f8 <__sfputs_r+0x12>
 80170f4:	2000      	movs	r0, #0
 80170f6:	e007      	b.n	8017108 <__sfputs_r+0x22>
 80170f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80170fc:	463a      	mov	r2, r7
 80170fe:	4630      	mov	r0, r6
 8017100:	f7ff ffda 	bl	80170b8 <__sfputc_r>
 8017104:	1c43      	adds	r3, r0, #1
 8017106:	d1f3      	bne.n	80170f0 <__sfputs_r+0xa>
 8017108:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801710c <_vfiprintf_r>:
 801710c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017110:	460d      	mov	r5, r1
 8017112:	b09d      	sub	sp, #116	; 0x74
 8017114:	4614      	mov	r4, r2
 8017116:	4698      	mov	r8, r3
 8017118:	4606      	mov	r6, r0
 801711a:	b118      	cbz	r0, 8017124 <_vfiprintf_r+0x18>
 801711c:	6983      	ldr	r3, [r0, #24]
 801711e:	b90b      	cbnz	r3, 8017124 <_vfiprintf_r+0x18>
 8017120:	f7ff fc6e 	bl	8016a00 <__sinit>
 8017124:	4b89      	ldr	r3, [pc, #548]	; (801734c <_vfiprintf_r+0x240>)
 8017126:	429d      	cmp	r5, r3
 8017128:	d11b      	bne.n	8017162 <_vfiprintf_r+0x56>
 801712a:	6875      	ldr	r5, [r6, #4]
 801712c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801712e:	07d9      	lsls	r1, r3, #31
 8017130:	d405      	bmi.n	801713e <_vfiprintf_r+0x32>
 8017132:	89ab      	ldrh	r3, [r5, #12]
 8017134:	059a      	lsls	r2, r3, #22
 8017136:	d402      	bmi.n	801713e <_vfiprintf_r+0x32>
 8017138:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801713a:	f7ff fd11 	bl	8016b60 <__retarget_lock_acquire_recursive>
 801713e:	89ab      	ldrh	r3, [r5, #12]
 8017140:	071b      	lsls	r3, r3, #28
 8017142:	d501      	bpl.n	8017148 <_vfiprintf_r+0x3c>
 8017144:	692b      	ldr	r3, [r5, #16]
 8017146:	b9eb      	cbnz	r3, 8017184 <_vfiprintf_r+0x78>
 8017148:	4629      	mov	r1, r5
 801714a:	4630      	mov	r0, r6
 801714c:	f7ff fab2 	bl	80166b4 <__swsetup_r>
 8017150:	b1c0      	cbz	r0, 8017184 <_vfiprintf_r+0x78>
 8017152:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017154:	07dc      	lsls	r4, r3, #31
 8017156:	d50e      	bpl.n	8017176 <_vfiprintf_r+0x6a>
 8017158:	f04f 30ff 	mov.w	r0, #4294967295
 801715c:	b01d      	add	sp, #116	; 0x74
 801715e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017162:	4b7b      	ldr	r3, [pc, #492]	; (8017350 <_vfiprintf_r+0x244>)
 8017164:	429d      	cmp	r5, r3
 8017166:	d101      	bne.n	801716c <_vfiprintf_r+0x60>
 8017168:	68b5      	ldr	r5, [r6, #8]
 801716a:	e7df      	b.n	801712c <_vfiprintf_r+0x20>
 801716c:	4b79      	ldr	r3, [pc, #484]	; (8017354 <_vfiprintf_r+0x248>)
 801716e:	429d      	cmp	r5, r3
 8017170:	bf08      	it	eq
 8017172:	68f5      	ldreq	r5, [r6, #12]
 8017174:	e7da      	b.n	801712c <_vfiprintf_r+0x20>
 8017176:	89ab      	ldrh	r3, [r5, #12]
 8017178:	0598      	lsls	r0, r3, #22
 801717a:	d4ed      	bmi.n	8017158 <_vfiprintf_r+0x4c>
 801717c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801717e:	f7ff fcf0 	bl	8016b62 <__retarget_lock_release_recursive>
 8017182:	e7e9      	b.n	8017158 <_vfiprintf_r+0x4c>
 8017184:	2300      	movs	r3, #0
 8017186:	9309      	str	r3, [sp, #36]	; 0x24
 8017188:	2320      	movs	r3, #32
 801718a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801718e:	f8cd 800c 	str.w	r8, [sp, #12]
 8017192:	2330      	movs	r3, #48	; 0x30
 8017194:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8017358 <_vfiprintf_r+0x24c>
 8017198:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801719c:	f04f 0901 	mov.w	r9, #1
 80171a0:	4623      	mov	r3, r4
 80171a2:	469a      	mov	sl, r3
 80171a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80171a8:	b10a      	cbz	r2, 80171ae <_vfiprintf_r+0xa2>
 80171aa:	2a25      	cmp	r2, #37	; 0x25
 80171ac:	d1f9      	bne.n	80171a2 <_vfiprintf_r+0x96>
 80171ae:	ebba 0b04 	subs.w	fp, sl, r4
 80171b2:	d00b      	beq.n	80171cc <_vfiprintf_r+0xc0>
 80171b4:	465b      	mov	r3, fp
 80171b6:	4622      	mov	r2, r4
 80171b8:	4629      	mov	r1, r5
 80171ba:	4630      	mov	r0, r6
 80171bc:	f7ff ff93 	bl	80170e6 <__sfputs_r>
 80171c0:	3001      	adds	r0, #1
 80171c2:	f000 80aa 	beq.w	801731a <_vfiprintf_r+0x20e>
 80171c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80171c8:	445a      	add	r2, fp
 80171ca:	9209      	str	r2, [sp, #36]	; 0x24
 80171cc:	f89a 3000 	ldrb.w	r3, [sl]
 80171d0:	2b00      	cmp	r3, #0
 80171d2:	f000 80a2 	beq.w	801731a <_vfiprintf_r+0x20e>
 80171d6:	2300      	movs	r3, #0
 80171d8:	f04f 32ff 	mov.w	r2, #4294967295
 80171dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80171e0:	f10a 0a01 	add.w	sl, sl, #1
 80171e4:	9304      	str	r3, [sp, #16]
 80171e6:	9307      	str	r3, [sp, #28]
 80171e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80171ec:	931a      	str	r3, [sp, #104]	; 0x68
 80171ee:	4654      	mov	r4, sl
 80171f0:	2205      	movs	r2, #5
 80171f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80171f6:	4858      	ldr	r0, [pc, #352]	; (8017358 <_vfiprintf_r+0x24c>)
 80171f8:	f7e9 f802 	bl	8000200 <memchr>
 80171fc:	9a04      	ldr	r2, [sp, #16]
 80171fe:	b9d8      	cbnz	r0, 8017238 <_vfiprintf_r+0x12c>
 8017200:	06d1      	lsls	r1, r2, #27
 8017202:	bf44      	itt	mi
 8017204:	2320      	movmi	r3, #32
 8017206:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801720a:	0713      	lsls	r3, r2, #28
 801720c:	bf44      	itt	mi
 801720e:	232b      	movmi	r3, #43	; 0x2b
 8017210:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017214:	f89a 3000 	ldrb.w	r3, [sl]
 8017218:	2b2a      	cmp	r3, #42	; 0x2a
 801721a:	d015      	beq.n	8017248 <_vfiprintf_r+0x13c>
 801721c:	9a07      	ldr	r2, [sp, #28]
 801721e:	4654      	mov	r4, sl
 8017220:	2000      	movs	r0, #0
 8017222:	f04f 0c0a 	mov.w	ip, #10
 8017226:	4621      	mov	r1, r4
 8017228:	f811 3b01 	ldrb.w	r3, [r1], #1
 801722c:	3b30      	subs	r3, #48	; 0x30
 801722e:	2b09      	cmp	r3, #9
 8017230:	d94e      	bls.n	80172d0 <_vfiprintf_r+0x1c4>
 8017232:	b1b0      	cbz	r0, 8017262 <_vfiprintf_r+0x156>
 8017234:	9207      	str	r2, [sp, #28]
 8017236:	e014      	b.n	8017262 <_vfiprintf_r+0x156>
 8017238:	eba0 0308 	sub.w	r3, r0, r8
 801723c:	fa09 f303 	lsl.w	r3, r9, r3
 8017240:	4313      	orrs	r3, r2
 8017242:	9304      	str	r3, [sp, #16]
 8017244:	46a2      	mov	sl, r4
 8017246:	e7d2      	b.n	80171ee <_vfiprintf_r+0xe2>
 8017248:	9b03      	ldr	r3, [sp, #12]
 801724a:	1d19      	adds	r1, r3, #4
 801724c:	681b      	ldr	r3, [r3, #0]
 801724e:	9103      	str	r1, [sp, #12]
 8017250:	2b00      	cmp	r3, #0
 8017252:	bfbb      	ittet	lt
 8017254:	425b      	neglt	r3, r3
 8017256:	f042 0202 	orrlt.w	r2, r2, #2
 801725a:	9307      	strge	r3, [sp, #28]
 801725c:	9307      	strlt	r3, [sp, #28]
 801725e:	bfb8      	it	lt
 8017260:	9204      	strlt	r2, [sp, #16]
 8017262:	7823      	ldrb	r3, [r4, #0]
 8017264:	2b2e      	cmp	r3, #46	; 0x2e
 8017266:	d10c      	bne.n	8017282 <_vfiprintf_r+0x176>
 8017268:	7863      	ldrb	r3, [r4, #1]
 801726a:	2b2a      	cmp	r3, #42	; 0x2a
 801726c:	d135      	bne.n	80172da <_vfiprintf_r+0x1ce>
 801726e:	9b03      	ldr	r3, [sp, #12]
 8017270:	1d1a      	adds	r2, r3, #4
 8017272:	681b      	ldr	r3, [r3, #0]
 8017274:	9203      	str	r2, [sp, #12]
 8017276:	2b00      	cmp	r3, #0
 8017278:	bfb8      	it	lt
 801727a:	f04f 33ff 	movlt.w	r3, #4294967295
 801727e:	3402      	adds	r4, #2
 8017280:	9305      	str	r3, [sp, #20]
 8017282:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8017368 <_vfiprintf_r+0x25c>
 8017286:	7821      	ldrb	r1, [r4, #0]
 8017288:	2203      	movs	r2, #3
 801728a:	4650      	mov	r0, sl
 801728c:	f7e8 ffb8 	bl	8000200 <memchr>
 8017290:	b140      	cbz	r0, 80172a4 <_vfiprintf_r+0x198>
 8017292:	2340      	movs	r3, #64	; 0x40
 8017294:	eba0 000a 	sub.w	r0, r0, sl
 8017298:	fa03 f000 	lsl.w	r0, r3, r0
 801729c:	9b04      	ldr	r3, [sp, #16]
 801729e:	4303      	orrs	r3, r0
 80172a0:	3401      	adds	r4, #1
 80172a2:	9304      	str	r3, [sp, #16]
 80172a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80172a8:	482c      	ldr	r0, [pc, #176]	; (801735c <_vfiprintf_r+0x250>)
 80172aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80172ae:	2206      	movs	r2, #6
 80172b0:	f7e8 ffa6 	bl	8000200 <memchr>
 80172b4:	2800      	cmp	r0, #0
 80172b6:	d03f      	beq.n	8017338 <_vfiprintf_r+0x22c>
 80172b8:	4b29      	ldr	r3, [pc, #164]	; (8017360 <_vfiprintf_r+0x254>)
 80172ba:	bb1b      	cbnz	r3, 8017304 <_vfiprintf_r+0x1f8>
 80172bc:	9b03      	ldr	r3, [sp, #12]
 80172be:	3307      	adds	r3, #7
 80172c0:	f023 0307 	bic.w	r3, r3, #7
 80172c4:	3308      	adds	r3, #8
 80172c6:	9303      	str	r3, [sp, #12]
 80172c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80172ca:	443b      	add	r3, r7
 80172cc:	9309      	str	r3, [sp, #36]	; 0x24
 80172ce:	e767      	b.n	80171a0 <_vfiprintf_r+0x94>
 80172d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80172d4:	460c      	mov	r4, r1
 80172d6:	2001      	movs	r0, #1
 80172d8:	e7a5      	b.n	8017226 <_vfiprintf_r+0x11a>
 80172da:	2300      	movs	r3, #0
 80172dc:	3401      	adds	r4, #1
 80172de:	9305      	str	r3, [sp, #20]
 80172e0:	4619      	mov	r1, r3
 80172e2:	f04f 0c0a 	mov.w	ip, #10
 80172e6:	4620      	mov	r0, r4
 80172e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80172ec:	3a30      	subs	r2, #48	; 0x30
 80172ee:	2a09      	cmp	r2, #9
 80172f0:	d903      	bls.n	80172fa <_vfiprintf_r+0x1ee>
 80172f2:	2b00      	cmp	r3, #0
 80172f4:	d0c5      	beq.n	8017282 <_vfiprintf_r+0x176>
 80172f6:	9105      	str	r1, [sp, #20]
 80172f8:	e7c3      	b.n	8017282 <_vfiprintf_r+0x176>
 80172fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80172fe:	4604      	mov	r4, r0
 8017300:	2301      	movs	r3, #1
 8017302:	e7f0      	b.n	80172e6 <_vfiprintf_r+0x1da>
 8017304:	ab03      	add	r3, sp, #12
 8017306:	9300      	str	r3, [sp, #0]
 8017308:	462a      	mov	r2, r5
 801730a:	4b16      	ldr	r3, [pc, #88]	; (8017364 <_vfiprintf_r+0x258>)
 801730c:	a904      	add	r1, sp, #16
 801730e:	4630      	mov	r0, r6
 8017310:	f3af 8000 	nop.w
 8017314:	4607      	mov	r7, r0
 8017316:	1c78      	adds	r0, r7, #1
 8017318:	d1d6      	bne.n	80172c8 <_vfiprintf_r+0x1bc>
 801731a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801731c:	07d9      	lsls	r1, r3, #31
 801731e:	d405      	bmi.n	801732c <_vfiprintf_r+0x220>
 8017320:	89ab      	ldrh	r3, [r5, #12]
 8017322:	059a      	lsls	r2, r3, #22
 8017324:	d402      	bmi.n	801732c <_vfiprintf_r+0x220>
 8017326:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017328:	f7ff fc1b 	bl	8016b62 <__retarget_lock_release_recursive>
 801732c:	89ab      	ldrh	r3, [r5, #12]
 801732e:	065b      	lsls	r3, r3, #25
 8017330:	f53f af12 	bmi.w	8017158 <_vfiprintf_r+0x4c>
 8017334:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017336:	e711      	b.n	801715c <_vfiprintf_r+0x50>
 8017338:	ab03      	add	r3, sp, #12
 801733a:	9300      	str	r3, [sp, #0]
 801733c:	462a      	mov	r2, r5
 801733e:	4b09      	ldr	r3, [pc, #36]	; (8017364 <_vfiprintf_r+0x258>)
 8017340:	a904      	add	r1, sp, #16
 8017342:	4630      	mov	r0, r6
 8017344:	f000 f880 	bl	8017448 <_printf_i>
 8017348:	e7e4      	b.n	8017314 <_vfiprintf_r+0x208>
 801734a:	bf00      	nop
 801734c:	0801b418 	.word	0x0801b418
 8017350:	0801b438 	.word	0x0801b438
 8017354:	0801b3f8 	.word	0x0801b3f8
 8017358:	0801b458 	.word	0x0801b458
 801735c:	0801b462 	.word	0x0801b462
 8017360:	00000000 	.word	0x00000000
 8017364:	080170e7 	.word	0x080170e7
 8017368:	0801b45e 	.word	0x0801b45e

0801736c <_printf_common>:
 801736c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017370:	4616      	mov	r6, r2
 8017372:	4699      	mov	r9, r3
 8017374:	688a      	ldr	r2, [r1, #8]
 8017376:	690b      	ldr	r3, [r1, #16]
 8017378:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801737c:	4293      	cmp	r3, r2
 801737e:	bfb8      	it	lt
 8017380:	4613      	movlt	r3, r2
 8017382:	6033      	str	r3, [r6, #0]
 8017384:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017388:	4607      	mov	r7, r0
 801738a:	460c      	mov	r4, r1
 801738c:	b10a      	cbz	r2, 8017392 <_printf_common+0x26>
 801738e:	3301      	adds	r3, #1
 8017390:	6033      	str	r3, [r6, #0]
 8017392:	6823      	ldr	r3, [r4, #0]
 8017394:	0699      	lsls	r1, r3, #26
 8017396:	bf42      	ittt	mi
 8017398:	6833      	ldrmi	r3, [r6, #0]
 801739a:	3302      	addmi	r3, #2
 801739c:	6033      	strmi	r3, [r6, #0]
 801739e:	6825      	ldr	r5, [r4, #0]
 80173a0:	f015 0506 	ands.w	r5, r5, #6
 80173a4:	d106      	bne.n	80173b4 <_printf_common+0x48>
 80173a6:	f104 0a19 	add.w	sl, r4, #25
 80173aa:	68e3      	ldr	r3, [r4, #12]
 80173ac:	6832      	ldr	r2, [r6, #0]
 80173ae:	1a9b      	subs	r3, r3, r2
 80173b0:	42ab      	cmp	r3, r5
 80173b2:	dc26      	bgt.n	8017402 <_printf_common+0x96>
 80173b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80173b8:	1e13      	subs	r3, r2, #0
 80173ba:	6822      	ldr	r2, [r4, #0]
 80173bc:	bf18      	it	ne
 80173be:	2301      	movne	r3, #1
 80173c0:	0692      	lsls	r2, r2, #26
 80173c2:	d42b      	bmi.n	801741c <_printf_common+0xb0>
 80173c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80173c8:	4649      	mov	r1, r9
 80173ca:	4638      	mov	r0, r7
 80173cc:	47c0      	blx	r8
 80173ce:	3001      	adds	r0, #1
 80173d0:	d01e      	beq.n	8017410 <_printf_common+0xa4>
 80173d2:	6823      	ldr	r3, [r4, #0]
 80173d4:	68e5      	ldr	r5, [r4, #12]
 80173d6:	6832      	ldr	r2, [r6, #0]
 80173d8:	f003 0306 	and.w	r3, r3, #6
 80173dc:	2b04      	cmp	r3, #4
 80173de:	bf08      	it	eq
 80173e0:	1aad      	subeq	r5, r5, r2
 80173e2:	68a3      	ldr	r3, [r4, #8]
 80173e4:	6922      	ldr	r2, [r4, #16]
 80173e6:	bf0c      	ite	eq
 80173e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80173ec:	2500      	movne	r5, #0
 80173ee:	4293      	cmp	r3, r2
 80173f0:	bfc4      	itt	gt
 80173f2:	1a9b      	subgt	r3, r3, r2
 80173f4:	18ed      	addgt	r5, r5, r3
 80173f6:	2600      	movs	r6, #0
 80173f8:	341a      	adds	r4, #26
 80173fa:	42b5      	cmp	r5, r6
 80173fc:	d11a      	bne.n	8017434 <_printf_common+0xc8>
 80173fe:	2000      	movs	r0, #0
 8017400:	e008      	b.n	8017414 <_printf_common+0xa8>
 8017402:	2301      	movs	r3, #1
 8017404:	4652      	mov	r2, sl
 8017406:	4649      	mov	r1, r9
 8017408:	4638      	mov	r0, r7
 801740a:	47c0      	blx	r8
 801740c:	3001      	adds	r0, #1
 801740e:	d103      	bne.n	8017418 <_printf_common+0xac>
 8017410:	f04f 30ff 	mov.w	r0, #4294967295
 8017414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017418:	3501      	adds	r5, #1
 801741a:	e7c6      	b.n	80173aa <_printf_common+0x3e>
 801741c:	18e1      	adds	r1, r4, r3
 801741e:	1c5a      	adds	r2, r3, #1
 8017420:	2030      	movs	r0, #48	; 0x30
 8017422:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017426:	4422      	add	r2, r4
 8017428:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801742c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017430:	3302      	adds	r3, #2
 8017432:	e7c7      	b.n	80173c4 <_printf_common+0x58>
 8017434:	2301      	movs	r3, #1
 8017436:	4622      	mov	r2, r4
 8017438:	4649      	mov	r1, r9
 801743a:	4638      	mov	r0, r7
 801743c:	47c0      	blx	r8
 801743e:	3001      	adds	r0, #1
 8017440:	d0e6      	beq.n	8017410 <_printf_common+0xa4>
 8017442:	3601      	adds	r6, #1
 8017444:	e7d9      	b.n	80173fa <_printf_common+0x8e>
	...

08017448 <_printf_i>:
 8017448:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801744c:	7e0f      	ldrb	r7, [r1, #24]
 801744e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8017450:	2f78      	cmp	r7, #120	; 0x78
 8017452:	4691      	mov	r9, r2
 8017454:	4680      	mov	r8, r0
 8017456:	460c      	mov	r4, r1
 8017458:	469a      	mov	sl, r3
 801745a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801745e:	d807      	bhi.n	8017470 <_printf_i+0x28>
 8017460:	2f62      	cmp	r7, #98	; 0x62
 8017462:	d80a      	bhi.n	801747a <_printf_i+0x32>
 8017464:	2f00      	cmp	r7, #0
 8017466:	f000 80d8 	beq.w	801761a <_printf_i+0x1d2>
 801746a:	2f58      	cmp	r7, #88	; 0x58
 801746c:	f000 80a3 	beq.w	80175b6 <_printf_i+0x16e>
 8017470:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017474:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017478:	e03a      	b.n	80174f0 <_printf_i+0xa8>
 801747a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801747e:	2b15      	cmp	r3, #21
 8017480:	d8f6      	bhi.n	8017470 <_printf_i+0x28>
 8017482:	a101      	add	r1, pc, #4	; (adr r1, 8017488 <_printf_i+0x40>)
 8017484:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017488:	080174e1 	.word	0x080174e1
 801748c:	080174f5 	.word	0x080174f5
 8017490:	08017471 	.word	0x08017471
 8017494:	08017471 	.word	0x08017471
 8017498:	08017471 	.word	0x08017471
 801749c:	08017471 	.word	0x08017471
 80174a0:	080174f5 	.word	0x080174f5
 80174a4:	08017471 	.word	0x08017471
 80174a8:	08017471 	.word	0x08017471
 80174ac:	08017471 	.word	0x08017471
 80174b0:	08017471 	.word	0x08017471
 80174b4:	08017601 	.word	0x08017601
 80174b8:	08017525 	.word	0x08017525
 80174bc:	080175e3 	.word	0x080175e3
 80174c0:	08017471 	.word	0x08017471
 80174c4:	08017471 	.word	0x08017471
 80174c8:	08017623 	.word	0x08017623
 80174cc:	08017471 	.word	0x08017471
 80174d0:	08017525 	.word	0x08017525
 80174d4:	08017471 	.word	0x08017471
 80174d8:	08017471 	.word	0x08017471
 80174dc:	080175eb 	.word	0x080175eb
 80174e0:	682b      	ldr	r3, [r5, #0]
 80174e2:	1d1a      	adds	r2, r3, #4
 80174e4:	681b      	ldr	r3, [r3, #0]
 80174e6:	602a      	str	r2, [r5, #0]
 80174e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80174ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80174f0:	2301      	movs	r3, #1
 80174f2:	e0a3      	b.n	801763c <_printf_i+0x1f4>
 80174f4:	6820      	ldr	r0, [r4, #0]
 80174f6:	6829      	ldr	r1, [r5, #0]
 80174f8:	0606      	lsls	r6, r0, #24
 80174fa:	f101 0304 	add.w	r3, r1, #4
 80174fe:	d50a      	bpl.n	8017516 <_printf_i+0xce>
 8017500:	680e      	ldr	r6, [r1, #0]
 8017502:	602b      	str	r3, [r5, #0]
 8017504:	2e00      	cmp	r6, #0
 8017506:	da03      	bge.n	8017510 <_printf_i+0xc8>
 8017508:	232d      	movs	r3, #45	; 0x2d
 801750a:	4276      	negs	r6, r6
 801750c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017510:	485e      	ldr	r0, [pc, #376]	; (801768c <_printf_i+0x244>)
 8017512:	230a      	movs	r3, #10
 8017514:	e019      	b.n	801754a <_printf_i+0x102>
 8017516:	680e      	ldr	r6, [r1, #0]
 8017518:	602b      	str	r3, [r5, #0]
 801751a:	f010 0f40 	tst.w	r0, #64	; 0x40
 801751e:	bf18      	it	ne
 8017520:	b236      	sxthne	r6, r6
 8017522:	e7ef      	b.n	8017504 <_printf_i+0xbc>
 8017524:	682b      	ldr	r3, [r5, #0]
 8017526:	6820      	ldr	r0, [r4, #0]
 8017528:	1d19      	adds	r1, r3, #4
 801752a:	6029      	str	r1, [r5, #0]
 801752c:	0601      	lsls	r1, r0, #24
 801752e:	d501      	bpl.n	8017534 <_printf_i+0xec>
 8017530:	681e      	ldr	r6, [r3, #0]
 8017532:	e002      	b.n	801753a <_printf_i+0xf2>
 8017534:	0646      	lsls	r6, r0, #25
 8017536:	d5fb      	bpl.n	8017530 <_printf_i+0xe8>
 8017538:	881e      	ldrh	r6, [r3, #0]
 801753a:	4854      	ldr	r0, [pc, #336]	; (801768c <_printf_i+0x244>)
 801753c:	2f6f      	cmp	r7, #111	; 0x6f
 801753e:	bf0c      	ite	eq
 8017540:	2308      	moveq	r3, #8
 8017542:	230a      	movne	r3, #10
 8017544:	2100      	movs	r1, #0
 8017546:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801754a:	6865      	ldr	r5, [r4, #4]
 801754c:	60a5      	str	r5, [r4, #8]
 801754e:	2d00      	cmp	r5, #0
 8017550:	bfa2      	ittt	ge
 8017552:	6821      	ldrge	r1, [r4, #0]
 8017554:	f021 0104 	bicge.w	r1, r1, #4
 8017558:	6021      	strge	r1, [r4, #0]
 801755a:	b90e      	cbnz	r6, 8017560 <_printf_i+0x118>
 801755c:	2d00      	cmp	r5, #0
 801755e:	d04d      	beq.n	80175fc <_printf_i+0x1b4>
 8017560:	4615      	mov	r5, r2
 8017562:	fbb6 f1f3 	udiv	r1, r6, r3
 8017566:	fb03 6711 	mls	r7, r3, r1, r6
 801756a:	5dc7      	ldrb	r7, [r0, r7]
 801756c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8017570:	4637      	mov	r7, r6
 8017572:	42bb      	cmp	r3, r7
 8017574:	460e      	mov	r6, r1
 8017576:	d9f4      	bls.n	8017562 <_printf_i+0x11a>
 8017578:	2b08      	cmp	r3, #8
 801757a:	d10b      	bne.n	8017594 <_printf_i+0x14c>
 801757c:	6823      	ldr	r3, [r4, #0]
 801757e:	07de      	lsls	r6, r3, #31
 8017580:	d508      	bpl.n	8017594 <_printf_i+0x14c>
 8017582:	6923      	ldr	r3, [r4, #16]
 8017584:	6861      	ldr	r1, [r4, #4]
 8017586:	4299      	cmp	r1, r3
 8017588:	bfde      	ittt	le
 801758a:	2330      	movle	r3, #48	; 0x30
 801758c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8017590:	f105 35ff 	addle.w	r5, r5, #4294967295
 8017594:	1b52      	subs	r2, r2, r5
 8017596:	6122      	str	r2, [r4, #16]
 8017598:	f8cd a000 	str.w	sl, [sp]
 801759c:	464b      	mov	r3, r9
 801759e:	aa03      	add	r2, sp, #12
 80175a0:	4621      	mov	r1, r4
 80175a2:	4640      	mov	r0, r8
 80175a4:	f7ff fee2 	bl	801736c <_printf_common>
 80175a8:	3001      	adds	r0, #1
 80175aa:	d14c      	bne.n	8017646 <_printf_i+0x1fe>
 80175ac:	f04f 30ff 	mov.w	r0, #4294967295
 80175b0:	b004      	add	sp, #16
 80175b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80175b6:	4835      	ldr	r0, [pc, #212]	; (801768c <_printf_i+0x244>)
 80175b8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80175bc:	6829      	ldr	r1, [r5, #0]
 80175be:	6823      	ldr	r3, [r4, #0]
 80175c0:	f851 6b04 	ldr.w	r6, [r1], #4
 80175c4:	6029      	str	r1, [r5, #0]
 80175c6:	061d      	lsls	r5, r3, #24
 80175c8:	d514      	bpl.n	80175f4 <_printf_i+0x1ac>
 80175ca:	07df      	lsls	r7, r3, #31
 80175cc:	bf44      	itt	mi
 80175ce:	f043 0320 	orrmi.w	r3, r3, #32
 80175d2:	6023      	strmi	r3, [r4, #0]
 80175d4:	b91e      	cbnz	r6, 80175de <_printf_i+0x196>
 80175d6:	6823      	ldr	r3, [r4, #0]
 80175d8:	f023 0320 	bic.w	r3, r3, #32
 80175dc:	6023      	str	r3, [r4, #0]
 80175de:	2310      	movs	r3, #16
 80175e0:	e7b0      	b.n	8017544 <_printf_i+0xfc>
 80175e2:	6823      	ldr	r3, [r4, #0]
 80175e4:	f043 0320 	orr.w	r3, r3, #32
 80175e8:	6023      	str	r3, [r4, #0]
 80175ea:	2378      	movs	r3, #120	; 0x78
 80175ec:	4828      	ldr	r0, [pc, #160]	; (8017690 <_printf_i+0x248>)
 80175ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80175f2:	e7e3      	b.n	80175bc <_printf_i+0x174>
 80175f4:	0659      	lsls	r1, r3, #25
 80175f6:	bf48      	it	mi
 80175f8:	b2b6      	uxthmi	r6, r6
 80175fa:	e7e6      	b.n	80175ca <_printf_i+0x182>
 80175fc:	4615      	mov	r5, r2
 80175fe:	e7bb      	b.n	8017578 <_printf_i+0x130>
 8017600:	682b      	ldr	r3, [r5, #0]
 8017602:	6826      	ldr	r6, [r4, #0]
 8017604:	6961      	ldr	r1, [r4, #20]
 8017606:	1d18      	adds	r0, r3, #4
 8017608:	6028      	str	r0, [r5, #0]
 801760a:	0635      	lsls	r5, r6, #24
 801760c:	681b      	ldr	r3, [r3, #0]
 801760e:	d501      	bpl.n	8017614 <_printf_i+0x1cc>
 8017610:	6019      	str	r1, [r3, #0]
 8017612:	e002      	b.n	801761a <_printf_i+0x1d2>
 8017614:	0670      	lsls	r0, r6, #25
 8017616:	d5fb      	bpl.n	8017610 <_printf_i+0x1c8>
 8017618:	8019      	strh	r1, [r3, #0]
 801761a:	2300      	movs	r3, #0
 801761c:	6123      	str	r3, [r4, #16]
 801761e:	4615      	mov	r5, r2
 8017620:	e7ba      	b.n	8017598 <_printf_i+0x150>
 8017622:	682b      	ldr	r3, [r5, #0]
 8017624:	1d1a      	adds	r2, r3, #4
 8017626:	602a      	str	r2, [r5, #0]
 8017628:	681d      	ldr	r5, [r3, #0]
 801762a:	6862      	ldr	r2, [r4, #4]
 801762c:	2100      	movs	r1, #0
 801762e:	4628      	mov	r0, r5
 8017630:	f7e8 fde6 	bl	8000200 <memchr>
 8017634:	b108      	cbz	r0, 801763a <_printf_i+0x1f2>
 8017636:	1b40      	subs	r0, r0, r5
 8017638:	6060      	str	r0, [r4, #4]
 801763a:	6863      	ldr	r3, [r4, #4]
 801763c:	6123      	str	r3, [r4, #16]
 801763e:	2300      	movs	r3, #0
 8017640:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017644:	e7a8      	b.n	8017598 <_printf_i+0x150>
 8017646:	6923      	ldr	r3, [r4, #16]
 8017648:	462a      	mov	r2, r5
 801764a:	4649      	mov	r1, r9
 801764c:	4640      	mov	r0, r8
 801764e:	47d0      	blx	sl
 8017650:	3001      	adds	r0, #1
 8017652:	d0ab      	beq.n	80175ac <_printf_i+0x164>
 8017654:	6823      	ldr	r3, [r4, #0]
 8017656:	079b      	lsls	r3, r3, #30
 8017658:	d413      	bmi.n	8017682 <_printf_i+0x23a>
 801765a:	68e0      	ldr	r0, [r4, #12]
 801765c:	9b03      	ldr	r3, [sp, #12]
 801765e:	4298      	cmp	r0, r3
 8017660:	bfb8      	it	lt
 8017662:	4618      	movlt	r0, r3
 8017664:	e7a4      	b.n	80175b0 <_printf_i+0x168>
 8017666:	2301      	movs	r3, #1
 8017668:	4632      	mov	r2, r6
 801766a:	4649      	mov	r1, r9
 801766c:	4640      	mov	r0, r8
 801766e:	47d0      	blx	sl
 8017670:	3001      	adds	r0, #1
 8017672:	d09b      	beq.n	80175ac <_printf_i+0x164>
 8017674:	3501      	adds	r5, #1
 8017676:	68e3      	ldr	r3, [r4, #12]
 8017678:	9903      	ldr	r1, [sp, #12]
 801767a:	1a5b      	subs	r3, r3, r1
 801767c:	42ab      	cmp	r3, r5
 801767e:	dcf2      	bgt.n	8017666 <_printf_i+0x21e>
 8017680:	e7eb      	b.n	801765a <_printf_i+0x212>
 8017682:	2500      	movs	r5, #0
 8017684:	f104 0619 	add.w	r6, r4, #25
 8017688:	e7f5      	b.n	8017676 <_printf_i+0x22e>
 801768a:	bf00      	nop
 801768c:	0801b469 	.word	0x0801b469
 8017690:	0801b47a 	.word	0x0801b47a

08017694 <_sbrk_r>:
 8017694:	b538      	push	{r3, r4, r5, lr}
 8017696:	4d06      	ldr	r5, [pc, #24]	; (80176b0 <_sbrk_r+0x1c>)
 8017698:	2300      	movs	r3, #0
 801769a:	4604      	mov	r4, r0
 801769c:	4608      	mov	r0, r1
 801769e:	602b      	str	r3, [r5, #0]
 80176a0:	f7e9 fb48 	bl	8000d34 <_sbrk>
 80176a4:	1c43      	adds	r3, r0, #1
 80176a6:	d102      	bne.n	80176ae <_sbrk_r+0x1a>
 80176a8:	682b      	ldr	r3, [r5, #0]
 80176aa:	b103      	cbz	r3, 80176ae <_sbrk_r+0x1a>
 80176ac:	6023      	str	r3, [r4, #0]
 80176ae:	bd38      	pop	{r3, r4, r5, pc}
 80176b0:	2001b044 	.word	0x2001b044

080176b4 <__sread>:
 80176b4:	b510      	push	{r4, lr}
 80176b6:	460c      	mov	r4, r1
 80176b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80176bc:	f000 f8d8 	bl	8017870 <_read_r>
 80176c0:	2800      	cmp	r0, #0
 80176c2:	bfab      	itete	ge
 80176c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80176c6:	89a3      	ldrhlt	r3, [r4, #12]
 80176c8:	181b      	addge	r3, r3, r0
 80176ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80176ce:	bfac      	ite	ge
 80176d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80176d2:	81a3      	strhlt	r3, [r4, #12]
 80176d4:	bd10      	pop	{r4, pc}

080176d6 <__swrite>:
 80176d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80176da:	461f      	mov	r7, r3
 80176dc:	898b      	ldrh	r3, [r1, #12]
 80176de:	05db      	lsls	r3, r3, #23
 80176e0:	4605      	mov	r5, r0
 80176e2:	460c      	mov	r4, r1
 80176e4:	4616      	mov	r6, r2
 80176e6:	d505      	bpl.n	80176f4 <__swrite+0x1e>
 80176e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80176ec:	2302      	movs	r3, #2
 80176ee:	2200      	movs	r2, #0
 80176f0:	f000 f870 	bl	80177d4 <_lseek_r>
 80176f4:	89a3      	ldrh	r3, [r4, #12]
 80176f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80176fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80176fe:	81a3      	strh	r3, [r4, #12]
 8017700:	4632      	mov	r2, r6
 8017702:	463b      	mov	r3, r7
 8017704:	4628      	mov	r0, r5
 8017706:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801770a:	f000 b817 	b.w	801773c <_write_r>

0801770e <__sseek>:
 801770e:	b510      	push	{r4, lr}
 8017710:	460c      	mov	r4, r1
 8017712:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017716:	f000 f85d 	bl	80177d4 <_lseek_r>
 801771a:	1c43      	adds	r3, r0, #1
 801771c:	89a3      	ldrh	r3, [r4, #12]
 801771e:	bf15      	itete	ne
 8017720:	6560      	strne	r0, [r4, #84]	; 0x54
 8017722:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017726:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801772a:	81a3      	strheq	r3, [r4, #12]
 801772c:	bf18      	it	ne
 801772e:	81a3      	strhne	r3, [r4, #12]
 8017730:	bd10      	pop	{r4, pc}

08017732 <__sclose>:
 8017732:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017736:	f000 b81b 	b.w	8017770 <_close_r>
	...

0801773c <_write_r>:
 801773c:	b538      	push	{r3, r4, r5, lr}
 801773e:	4d07      	ldr	r5, [pc, #28]	; (801775c <_write_r+0x20>)
 8017740:	4604      	mov	r4, r0
 8017742:	4608      	mov	r0, r1
 8017744:	4611      	mov	r1, r2
 8017746:	2200      	movs	r2, #0
 8017748:	602a      	str	r2, [r5, #0]
 801774a:	461a      	mov	r2, r3
 801774c:	f7e9 f987 	bl	8000a5e <_write>
 8017750:	1c43      	adds	r3, r0, #1
 8017752:	d102      	bne.n	801775a <_write_r+0x1e>
 8017754:	682b      	ldr	r3, [r5, #0]
 8017756:	b103      	cbz	r3, 801775a <_write_r+0x1e>
 8017758:	6023      	str	r3, [r4, #0]
 801775a:	bd38      	pop	{r3, r4, r5, pc}
 801775c:	2001b044 	.word	0x2001b044

08017760 <abort>:
 8017760:	b508      	push	{r3, lr}
 8017762:	2006      	movs	r0, #6
 8017764:	f000 f8be 	bl	80178e4 <raise>
 8017768:	2001      	movs	r0, #1
 801776a:	f7e9 fa87 	bl	8000c7c <_exit>
	...

08017770 <_close_r>:
 8017770:	b538      	push	{r3, r4, r5, lr}
 8017772:	4d06      	ldr	r5, [pc, #24]	; (801778c <_close_r+0x1c>)
 8017774:	2300      	movs	r3, #0
 8017776:	4604      	mov	r4, r0
 8017778:	4608      	mov	r0, r1
 801777a:	602b      	str	r3, [r5, #0]
 801777c:	f7e9 faa5 	bl	8000cca <_close>
 8017780:	1c43      	adds	r3, r0, #1
 8017782:	d102      	bne.n	801778a <_close_r+0x1a>
 8017784:	682b      	ldr	r3, [r5, #0]
 8017786:	b103      	cbz	r3, 801778a <_close_r+0x1a>
 8017788:	6023      	str	r3, [r4, #0]
 801778a:	bd38      	pop	{r3, r4, r5, pc}
 801778c:	2001b044 	.word	0x2001b044

08017790 <_fstat_r>:
 8017790:	b538      	push	{r3, r4, r5, lr}
 8017792:	4d07      	ldr	r5, [pc, #28]	; (80177b0 <_fstat_r+0x20>)
 8017794:	2300      	movs	r3, #0
 8017796:	4604      	mov	r4, r0
 8017798:	4608      	mov	r0, r1
 801779a:	4611      	mov	r1, r2
 801779c:	602b      	str	r3, [r5, #0]
 801779e:	f7e9 faa0 	bl	8000ce2 <_fstat>
 80177a2:	1c43      	adds	r3, r0, #1
 80177a4:	d102      	bne.n	80177ac <_fstat_r+0x1c>
 80177a6:	682b      	ldr	r3, [r5, #0]
 80177a8:	b103      	cbz	r3, 80177ac <_fstat_r+0x1c>
 80177aa:	6023      	str	r3, [r4, #0]
 80177ac:	bd38      	pop	{r3, r4, r5, pc}
 80177ae:	bf00      	nop
 80177b0:	2001b044 	.word	0x2001b044

080177b4 <_isatty_r>:
 80177b4:	b538      	push	{r3, r4, r5, lr}
 80177b6:	4d06      	ldr	r5, [pc, #24]	; (80177d0 <_isatty_r+0x1c>)
 80177b8:	2300      	movs	r3, #0
 80177ba:	4604      	mov	r4, r0
 80177bc:	4608      	mov	r0, r1
 80177be:	602b      	str	r3, [r5, #0]
 80177c0:	f7e9 fa9f 	bl	8000d02 <_isatty>
 80177c4:	1c43      	adds	r3, r0, #1
 80177c6:	d102      	bne.n	80177ce <_isatty_r+0x1a>
 80177c8:	682b      	ldr	r3, [r5, #0]
 80177ca:	b103      	cbz	r3, 80177ce <_isatty_r+0x1a>
 80177cc:	6023      	str	r3, [r4, #0]
 80177ce:	bd38      	pop	{r3, r4, r5, pc}
 80177d0:	2001b044 	.word	0x2001b044

080177d4 <_lseek_r>:
 80177d4:	b538      	push	{r3, r4, r5, lr}
 80177d6:	4d07      	ldr	r5, [pc, #28]	; (80177f4 <_lseek_r+0x20>)
 80177d8:	4604      	mov	r4, r0
 80177da:	4608      	mov	r0, r1
 80177dc:	4611      	mov	r1, r2
 80177de:	2200      	movs	r2, #0
 80177e0:	602a      	str	r2, [r5, #0]
 80177e2:	461a      	mov	r2, r3
 80177e4:	f7e9 fa98 	bl	8000d18 <_lseek>
 80177e8:	1c43      	adds	r3, r0, #1
 80177ea:	d102      	bne.n	80177f2 <_lseek_r+0x1e>
 80177ec:	682b      	ldr	r3, [r5, #0]
 80177ee:	b103      	cbz	r3, 80177f2 <_lseek_r+0x1e>
 80177f0:	6023      	str	r3, [r4, #0]
 80177f2:	bd38      	pop	{r3, r4, r5, pc}
 80177f4:	2001b044 	.word	0x2001b044

080177f8 <__malloc_lock>:
 80177f8:	4801      	ldr	r0, [pc, #4]	; (8017800 <__malloc_lock+0x8>)
 80177fa:	f7ff b9b1 	b.w	8016b60 <__retarget_lock_acquire_recursive>
 80177fe:	bf00      	nop
 8017800:	2001b04c 	.word	0x2001b04c

08017804 <__malloc_unlock>:
 8017804:	4801      	ldr	r0, [pc, #4]	; (801780c <__malloc_unlock+0x8>)
 8017806:	f7ff b9ac 	b.w	8016b62 <__retarget_lock_release_recursive>
 801780a:	bf00      	nop
 801780c:	2001b04c 	.word	0x2001b04c

08017810 <_realloc_r>:
 8017810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017814:	4680      	mov	r8, r0
 8017816:	4614      	mov	r4, r2
 8017818:	460e      	mov	r6, r1
 801781a:	b921      	cbnz	r1, 8017826 <_realloc_r+0x16>
 801781c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017820:	4611      	mov	r1, r2
 8017822:	f7ff ba79 	b.w	8016d18 <_malloc_r>
 8017826:	b92a      	cbnz	r2, 8017834 <_realloc_r+0x24>
 8017828:	f7ff fa0a 	bl	8016c40 <_free_r>
 801782c:	4625      	mov	r5, r4
 801782e:	4628      	mov	r0, r5
 8017830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017834:	f000 f872 	bl	801791c <_malloc_usable_size_r>
 8017838:	4284      	cmp	r4, r0
 801783a:	4607      	mov	r7, r0
 801783c:	d802      	bhi.n	8017844 <_realloc_r+0x34>
 801783e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8017842:	d812      	bhi.n	801786a <_realloc_r+0x5a>
 8017844:	4621      	mov	r1, r4
 8017846:	4640      	mov	r0, r8
 8017848:	f7ff fa66 	bl	8016d18 <_malloc_r>
 801784c:	4605      	mov	r5, r0
 801784e:	2800      	cmp	r0, #0
 8017850:	d0ed      	beq.n	801782e <_realloc_r+0x1e>
 8017852:	42bc      	cmp	r4, r7
 8017854:	4622      	mov	r2, r4
 8017856:	4631      	mov	r1, r6
 8017858:	bf28      	it	cs
 801785a:	463a      	movcs	r2, r7
 801785c:	f7fe fda8 	bl	80163b0 <memcpy>
 8017860:	4631      	mov	r1, r6
 8017862:	4640      	mov	r0, r8
 8017864:	f7ff f9ec 	bl	8016c40 <_free_r>
 8017868:	e7e1      	b.n	801782e <_realloc_r+0x1e>
 801786a:	4635      	mov	r5, r6
 801786c:	e7df      	b.n	801782e <_realloc_r+0x1e>
	...

08017870 <_read_r>:
 8017870:	b538      	push	{r3, r4, r5, lr}
 8017872:	4d07      	ldr	r5, [pc, #28]	; (8017890 <_read_r+0x20>)
 8017874:	4604      	mov	r4, r0
 8017876:	4608      	mov	r0, r1
 8017878:	4611      	mov	r1, r2
 801787a:	2200      	movs	r2, #0
 801787c:	602a      	str	r2, [r5, #0]
 801787e:	461a      	mov	r2, r3
 8017880:	f7e9 fa06 	bl	8000c90 <_read>
 8017884:	1c43      	adds	r3, r0, #1
 8017886:	d102      	bne.n	801788e <_read_r+0x1e>
 8017888:	682b      	ldr	r3, [r5, #0]
 801788a:	b103      	cbz	r3, 801788e <_read_r+0x1e>
 801788c:	6023      	str	r3, [r4, #0]
 801788e:	bd38      	pop	{r3, r4, r5, pc}
 8017890:	2001b044 	.word	0x2001b044

08017894 <_raise_r>:
 8017894:	291f      	cmp	r1, #31
 8017896:	b538      	push	{r3, r4, r5, lr}
 8017898:	4604      	mov	r4, r0
 801789a:	460d      	mov	r5, r1
 801789c:	d904      	bls.n	80178a8 <_raise_r+0x14>
 801789e:	2316      	movs	r3, #22
 80178a0:	6003      	str	r3, [r0, #0]
 80178a2:	f04f 30ff 	mov.w	r0, #4294967295
 80178a6:	bd38      	pop	{r3, r4, r5, pc}
 80178a8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80178aa:	b112      	cbz	r2, 80178b2 <_raise_r+0x1e>
 80178ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80178b0:	b94b      	cbnz	r3, 80178c6 <_raise_r+0x32>
 80178b2:	4620      	mov	r0, r4
 80178b4:	f000 f830 	bl	8017918 <_getpid_r>
 80178b8:	462a      	mov	r2, r5
 80178ba:	4601      	mov	r1, r0
 80178bc:	4620      	mov	r0, r4
 80178be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80178c2:	f000 b817 	b.w	80178f4 <_kill_r>
 80178c6:	2b01      	cmp	r3, #1
 80178c8:	d00a      	beq.n	80178e0 <_raise_r+0x4c>
 80178ca:	1c59      	adds	r1, r3, #1
 80178cc:	d103      	bne.n	80178d6 <_raise_r+0x42>
 80178ce:	2316      	movs	r3, #22
 80178d0:	6003      	str	r3, [r0, #0]
 80178d2:	2001      	movs	r0, #1
 80178d4:	e7e7      	b.n	80178a6 <_raise_r+0x12>
 80178d6:	2400      	movs	r4, #0
 80178d8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80178dc:	4628      	mov	r0, r5
 80178de:	4798      	blx	r3
 80178e0:	2000      	movs	r0, #0
 80178e2:	e7e0      	b.n	80178a6 <_raise_r+0x12>

080178e4 <raise>:
 80178e4:	4b02      	ldr	r3, [pc, #8]	; (80178f0 <raise+0xc>)
 80178e6:	4601      	mov	r1, r0
 80178e8:	6818      	ldr	r0, [r3, #0]
 80178ea:	f7ff bfd3 	b.w	8017894 <_raise_r>
 80178ee:	bf00      	nop
 80178f0:	20000024 	.word	0x20000024

080178f4 <_kill_r>:
 80178f4:	b538      	push	{r3, r4, r5, lr}
 80178f6:	4d07      	ldr	r5, [pc, #28]	; (8017914 <_kill_r+0x20>)
 80178f8:	2300      	movs	r3, #0
 80178fa:	4604      	mov	r4, r0
 80178fc:	4608      	mov	r0, r1
 80178fe:	4611      	mov	r1, r2
 8017900:	602b      	str	r3, [r5, #0]
 8017902:	f7e9 f9a9 	bl	8000c58 <_kill>
 8017906:	1c43      	adds	r3, r0, #1
 8017908:	d102      	bne.n	8017910 <_kill_r+0x1c>
 801790a:	682b      	ldr	r3, [r5, #0]
 801790c:	b103      	cbz	r3, 8017910 <_kill_r+0x1c>
 801790e:	6023      	str	r3, [r4, #0]
 8017910:	bd38      	pop	{r3, r4, r5, pc}
 8017912:	bf00      	nop
 8017914:	2001b044 	.word	0x2001b044

08017918 <_getpid_r>:
 8017918:	f7e9 b996 	b.w	8000c48 <_getpid>

0801791c <_malloc_usable_size_r>:
 801791c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017920:	1f18      	subs	r0, r3, #4
 8017922:	2b00      	cmp	r3, #0
 8017924:	bfbc      	itt	lt
 8017926:	580b      	ldrlt	r3, [r1, r0]
 8017928:	18c0      	addlt	r0, r0, r3
 801792a:	4770      	bx	lr

0801792c <_init>:
 801792c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801792e:	bf00      	nop
 8017930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017932:	bc08      	pop	{r3}
 8017934:	469e      	mov	lr, r3
 8017936:	4770      	bx	lr

08017938 <_fini>:
 8017938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801793a:	bf00      	nop
 801793c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801793e:	bc08      	pop	{r3}
 8017940:	469e      	mov	lr, r3
 8017942:	4770      	bx	lr
