
Stm32f407Ethernet_flash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019f78  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000032b0  0801a108  0801a108  0002a108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d3b8  0801d3b8  00030084  2**0
                  CONTENTS
  4 .ARM          00000008  0801d3b8  0801d3b8  0002d3b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d3c0  0801d3c0  00030084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801d3c0  0801d3c0  0002d3c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801d3c4  0801d3c4  0002d3c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  0801d3c8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030084  2**0
                  CONTENTS
 10 .bss          0001b620  20000088  20000088  00030088  2**3
                  ALLOC
 11 ._user_heap_stack 00002200  2001b6a8  2001b6a8  00030088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030084  2**0
                  CONTENTS, READONLY
 13 .debug_info   0004c188  00000000  00000000  000300b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000a5bf  00000000  00000000  0007c23c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002dd0  00000000  00000000  00086800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002b58  00000000  00000000  000895d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00035537  00000000  00000000  0008c128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0004a00d  00000000  00000000  000c165f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f9288  00000000  00000000  0010b66c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  002048f4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000c410  00000000  00000000  00204944  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801a0f0 	.word	0x0801a0f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	0801a0f0 	.word	0x0801a0f0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <DS18B20_IsValid>:
  * @brief  The function is used to check valid DS18B20 ROM
  * @retval Return in OK = 1, Failed = 0
  * @param  ROM		Pointer to ROM number
  */
uint8_t DS18B20_IsValid(uint8_t *ROM)
{
 8000574:	b480      	push	{r7}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
	/* Checks if first byte is equal to DS18B20's family code */
	return (*ROM == DS18B20_FAMILY_CODE) ? 1 : 0;
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	2b28      	cmp	r3, #40	; 0x28
 8000582:	bf0c      	ite	eq
 8000584:	2301      	moveq	r3, #1
 8000586:	2300      	movne	r3, #0
 8000588:	b2db      	uxtb	r3, r3
}
 800058a:	4618      	mov	r0, r3
 800058c:	370c      	adds	r7, #12
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr

08000596 <DS18B20_SetResolution>:
  * @param  ROM			Pointer to ROM number
  * @param  Resolution	Resolution in 9 - 12
  */
uint8_t DS18B20_SetResolution(OneWire_t* OW, uint8_t *ROM,
		DS18B20_Res_t Resolution)
{
 8000596:	b580      	push	{r7, lr}
 8000598:	b086      	sub	sp, #24
 800059a:	af00      	add	r7, sp, #0
 800059c:	60f8      	str	r0, [r7, #12]
 800059e:	60b9      	str	r1, [r7, #8]
 80005a0:	4613      	mov	r3, r2
 80005a2:	71fb      	strb	r3, [r7, #7]
	uint8_t th, tl, conf;

	/* Check valid ROM */
	if (!DS18B20_IsValid(ROM)) return 0;
 80005a4:	68b8      	ldr	r0, [r7, #8]
 80005a6:	f7ff ffe5 	bl	8000574 <DS18B20_IsValid>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d101      	bne.n	80005b4 <DS18B20_SetResolution+0x1e>
 80005b0:	2300      	movs	r3, #0
 80005b2:	e074      	b.n	800069e <DS18B20_SetResolution+0x108>

	/* Reset line */
	OneWire_Reset(OW);
 80005b4:	68f8      	ldr	r0, [r7, #12]
 80005b6:	f000 fa70 	bl	8000a9a <OneWire_Reset>

	/* Select ROM number */
	OneWire_SelectWithPointer(OW, ROM);
 80005ba:	68b9      	ldr	r1, [r7, #8]
 80005bc:	68f8      	ldr	r0, [r7, #12]
 80005be:	f000 fba4 	bl	8000d0a <OneWire_SelectWithPointer>

	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OW, DS18B20_CMD_READSCRATCHPAD);
 80005c2:	21be      	movs	r1, #190	; 0xbe
 80005c4:	68f8      	ldr	r0, [r7, #12]
 80005c6:	f000 fa29 	bl	8000a1c <OneWire_WriteByte>

	/* Ignore first 2 bytes */
	OneWire_ReadByte(OW);
 80005ca:	68f8      	ldr	r0, [r7, #12]
 80005cc:	f000 fa44 	bl	8000a58 <OneWire_ReadByte>
	OneWire_ReadByte(OW);
 80005d0:	68f8      	ldr	r0, [r7, #12]
 80005d2:	f000 fa41 	bl	8000a58 <OneWire_ReadByte>

	th = OneWire_ReadByte(OW);
 80005d6:	68f8      	ldr	r0, [r7, #12]
 80005d8:	f000 fa3e 	bl	8000a58 <OneWire_ReadByte>
 80005dc:	4603      	mov	r3, r0
 80005de:	75bb      	strb	r3, [r7, #22]
	tl = OneWire_ReadByte(OW);
 80005e0:	68f8      	ldr	r0, [r7, #12]
 80005e2:	f000 fa39 	bl	8000a58 <OneWire_ReadByte>
 80005e6:	4603      	mov	r3, r0
 80005e8:	757b      	strb	r3, [r7, #21]
	conf = OneWire_ReadByte(OW);
 80005ea:	68f8      	ldr	r0, [r7, #12]
 80005ec:	f000 fa34 	bl	8000a58 <OneWire_ReadByte>
 80005f0:	4603      	mov	r3, r0
 80005f2:	75fb      	strb	r3, [r7, #23]

	if (Resolution == DS18B20_Resolution_9bits) {
 80005f4:	79fb      	ldrb	r3, [r7, #7]
 80005f6:	2b09      	cmp	r3, #9
 80005f8:	d108      	bne.n	800060c <DS18B20_SetResolution+0x76>
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 80005fa:	7dfb      	ldrb	r3, [r7, #23]
 80005fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000600:	75fb      	strb	r3, [r7, #23]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8000602:	7dfb      	ldrb	r3, [r7, #23]
 8000604:	f023 0320 	bic.w	r3, r3, #32
 8000608:	75fb      	strb	r3, [r7, #23]
 800060a:	e022      	b.n	8000652 <DS18B20_SetResolution+0xbc>
	} else if (Resolution == DS18B20_Resolution_10bits) {
 800060c:	79fb      	ldrb	r3, [r7, #7]
 800060e:	2b0a      	cmp	r3, #10
 8000610:	d108      	bne.n	8000624 <DS18B20_SetResolution+0x8e>
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 8000612:	7dfb      	ldrb	r3, [r7, #23]
 8000614:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000618:	75fb      	strb	r3, [r7, #23]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 800061a:	7dfb      	ldrb	r3, [r7, #23]
 800061c:	f043 0320 	orr.w	r3, r3, #32
 8000620:	75fb      	strb	r3, [r7, #23]
 8000622:	e016      	b.n	8000652 <DS18B20_SetResolution+0xbc>
	} else if (Resolution == DS18B20_Resolution_11bits) {
 8000624:	79fb      	ldrb	r3, [r7, #7]
 8000626:	2b0b      	cmp	r3, #11
 8000628:	d108      	bne.n	800063c <DS18B20_SetResolution+0xa6>
		conf |= 1 << DS18B20_RESOLUTION_R1;
 800062a:	7dfb      	ldrb	r3, [r7, #23]
 800062c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000630:	75fb      	strb	r3, [r7, #23]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8000632:	7dfb      	ldrb	r3, [r7, #23]
 8000634:	f023 0320 	bic.w	r3, r3, #32
 8000638:	75fb      	strb	r3, [r7, #23]
 800063a:	e00a      	b.n	8000652 <DS18B20_SetResolution+0xbc>
	} else if (Resolution == DS18B20_Resolution_12bits) {
 800063c:	79fb      	ldrb	r3, [r7, #7]
 800063e:	2b0c      	cmp	r3, #12
 8000640:	d107      	bne.n	8000652 <DS18B20_SetResolution+0xbc>
		conf |= 1 << DS18B20_RESOLUTION_R1;
 8000642:	7dfb      	ldrb	r3, [r7, #23]
 8000644:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000648:	75fb      	strb	r3, [r7, #23]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 800064a:	7dfb      	ldrb	r3, [r7, #23]
 800064c:	f043 0320 	orr.w	r3, r3, #32
 8000650:	75fb      	strb	r3, [r7, #23]
	}

	/* Reset line */
	OneWire_Reset(OW);
 8000652:	68f8      	ldr	r0, [r7, #12]
 8000654:	f000 fa21 	bl	8000a9a <OneWire_Reset>

	/* Select ROM number */
	OneWire_SelectWithPointer(OW, ROM);
 8000658:	68b9      	ldr	r1, [r7, #8]
 800065a:	68f8      	ldr	r0, [r7, #12]
 800065c:	f000 fb55 	bl	8000d0a <OneWire_SelectWithPointer>

	/* Write scratchpad command by onewire protocol, only th, tl and conf
	 * register can be written */
	OneWire_WriteByte(OW, DS18B20_CMD_WRITESCRATCHPAD);
 8000660:	214e      	movs	r1, #78	; 0x4e
 8000662:	68f8      	ldr	r0, [r7, #12]
 8000664:	f000 f9da 	bl	8000a1c <OneWire_WriteByte>

	/* Write bytes */
	OneWire_WriteByte(OW, th);
 8000668:	7dbb      	ldrb	r3, [r7, #22]
 800066a:	4619      	mov	r1, r3
 800066c:	68f8      	ldr	r0, [r7, #12]
 800066e:	f000 f9d5 	bl	8000a1c <OneWire_WriteByte>
	OneWire_WriteByte(OW, tl);
 8000672:	7d7b      	ldrb	r3, [r7, #21]
 8000674:	4619      	mov	r1, r3
 8000676:	68f8      	ldr	r0, [r7, #12]
 8000678:	f000 f9d0 	bl	8000a1c <OneWire_WriteByte>
	OneWire_WriteByte(OW, conf);
 800067c:	7dfb      	ldrb	r3, [r7, #23]
 800067e:	4619      	mov	r1, r3
 8000680:	68f8      	ldr	r0, [r7, #12]
 8000682:	f000 f9cb 	bl	8000a1c <OneWire_WriteByte>

	/* Reset line */
	OneWire_Reset(OW);
 8000686:	68f8      	ldr	r0, [r7, #12]
 8000688:	f000 fa07 	bl	8000a9a <OneWire_Reset>

	/* Select ROM number */
	OneWire_SelectWithPointer(OW, ROM);
 800068c:	68b9      	ldr	r1, [r7, #8]
 800068e:	68f8      	ldr	r0, [r7, #12]
 8000690:	f000 fb3b 	bl	8000d0a <OneWire_SelectWithPointer>

	/* Copy scratchpad to EEPROM of DS18B20 */
	OneWire_WriteByte(OW, DS18B20_CMD_COPYSCRATCHPAD);
 8000694:	2148      	movs	r1, #72	; 0x48
 8000696:	68f8      	ldr	r0, [r7, #12]
 8000698:	f000 f9c0 	bl	8000a1c <OneWire_WriteByte>

	return 1;
 800069c:	2301      	movs	r3, #1
}
 800069e:	4618      	mov	r0, r3
 80006a0:	3718      	adds	r7, #24
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}

080006a6 <DS18B20_SetTempAlarm>:
  * @param  Low		Low temperature alarm, value > -55, 0 = reset
  * @param  High	High temperature alarm,, value < 125, 0 = reset
  */
uint8_t DS18B20_SetTempAlarm(OneWire_t* OW, uint8_t *ROM, int8_t Low,
		int8_t High)
{
 80006a6:	b580      	push	{r7, lr}
 80006a8:	b086      	sub	sp, #24
 80006aa:	af00      	add	r7, sp, #0
 80006ac:	60f8      	str	r0, [r7, #12]
 80006ae:	60b9      	str	r1, [r7, #8]
 80006b0:	4611      	mov	r1, r2
 80006b2:	461a      	mov	r2, r3
 80006b4:	460b      	mov	r3, r1
 80006b6:	71fb      	strb	r3, [r7, #7]
 80006b8:	4613      	mov	r3, r2
 80006ba:	71bb      	strb	r3, [r7, #6]
	uint8_t tl, th, conf;

	/* Check if device is DS18B20 */
	if (!DS18B20_IsValid(ROM)) return 0;
 80006bc:	68b8      	ldr	r0, [r7, #8]
 80006be:	f7ff ff59 	bl	8000574 <DS18B20_IsValid>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d101      	bne.n	80006cc <DS18B20_SetTempAlarm+0x26>
 80006c8:	2300      	movs	r3, #0
 80006ca:	e065      	b.n	8000798 <DS18B20_SetTempAlarm+0xf2>

	Low = ((Low < -55) || (Low == 0)) ? -55 : Low;
 80006cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006d0:	f113 0f37 	cmn.w	r3, #55	; 0x37
 80006d4:	db06      	blt.n	80006e4 <DS18B20_SetTempAlarm+0x3e>
 80006d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d002      	beq.n	80006e4 <DS18B20_SetTempAlarm+0x3e>
 80006de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006e2:	e001      	b.n	80006e8 <DS18B20_SetTempAlarm+0x42>
 80006e4:	f06f 0336 	mvn.w	r3, #54	; 0x36
 80006e8:	71fb      	strb	r3, [r7, #7]
	High = ((High > 125) || (High == 0)) ? 125 : High;
 80006ea:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80006ee:	2b7d      	cmp	r3, #125	; 0x7d
 80006f0:	dc06      	bgt.n	8000700 <DS18B20_SetTempAlarm+0x5a>
 80006f2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d002      	beq.n	8000700 <DS18B20_SetTempAlarm+0x5a>
 80006fa:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80006fe:	e000      	b.n	8000702 <DS18B20_SetTempAlarm+0x5c>
 8000700:	237d      	movs	r3, #125	; 0x7d
 8000702:	71bb      	strb	r3, [r7, #6]

	/* Reset line */
	OneWire_Reset(OW);
 8000704:	68f8      	ldr	r0, [r7, #12]
 8000706:	f000 f9c8 	bl	8000a9a <OneWire_Reset>

	/* Select ROM number */
	OneWire_SelectWithPointer(OW, ROM);
 800070a:	68b9      	ldr	r1, [r7, #8]
 800070c:	68f8      	ldr	r0, [r7, #12]
 800070e:	f000 fafc 	bl	8000d0a <OneWire_SelectWithPointer>

	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OW, DS18B20_CMD_READSCRATCHPAD);
 8000712:	21be      	movs	r1, #190	; 0xbe
 8000714:	68f8      	ldr	r0, [r7, #12]
 8000716:	f000 f981 	bl	8000a1c <OneWire_WriteByte>

	/* Ignore first 2 bytes */
	OneWire_ReadByte(OW);
 800071a:	68f8      	ldr	r0, [r7, #12]
 800071c:	f000 f99c 	bl	8000a58 <OneWire_ReadByte>
	OneWire_ReadByte(OW);
 8000720:	68f8      	ldr	r0, [r7, #12]
 8000722:	f000 f999 	bl	8000a58 <OneWire_ReadByte>

	th = OneWire_ReadByte(OW);
 8000726:	68f8      	ldr	r0, [r7, #12]
 8000728:	f000 f996 	bl	8000a58 <OneWire_ReadByte>
 800072c:	4603      	mov	r3, r0
 800072e:	75fb      	strb	r3, [r7, #23]
	tl = OneWire_ReadByte(OW);
 8000730:	68f8      	ldr	r0, [r7, #12]
 8000732:	f000 f991 	bl	8000a58 <OneWire_ReadByte>
 8000736:	4603      	mov	r3, r0
 8000738:	75bb      	strb	r3, [r7, #22]
	conf = OneWire_ReadByte(OW);
 800073a:	68f8      	ldr	r0, [r7, #12]
 800073c:	f000 f98c 	bl	8000a58 <OneWire_ReadByte>
 8000740:	4603      	mov	r3, r0
 8000742:	757b      	strb	r3, [r7, #21]

	th = (uint8_t)High;
 8000744:	79bb      	ldrb	r3, [r7, #6]
 8000746:	75fb      	strb	r3, [r7, #23]
	tl = (uint8_t)Low;
 8000748:	79fb      	ldrb	r3, [r7, #7]
 800074a:	75bb      	strb	r3, [r7, #22]

	/* Reset line */
	OneWire_Reset(OW);
 800074c:	68f8      	ldr	r0, [r7, #12]
 800074e:	f000 f9a4 	bl	8000a9a <OneWire_Reset>

	/* Select ROM number */
	OneWire_SelectWithPointer(OW, ROM);
 8000752:	68b9      	ldr	r1, [r7, #8]
 8000754:	68f8      	ldr	r0, [r7, #12]
 8000756:	f000 fad8 	bl	8000d0a <OneWire_SelectWithPointer>

	/* Write scratchpad command by onewire protocol, only th, tl and conf
	 * register can be written */
	OneWire_WriteByte(OW, DS18B20_CMD_WRITESCRATCHPAD);
 800075a:	214e      	movs	r1, #78	; 0x4e
 800075c:	68f8      	ldr	r0, [r7, #12]
 800075e:	f000 f95d 	bl	8000a1c <OneWire_WriteByte>

	/* Write bytes */
	OneWire_WriteByte(OW, th);
 8000762:	7dfb      	ldrb	r3, [r7, #23]
 8000764:	4619      	mov	r1, r3
 8000766:	68f8      	ldr	r0, [r7, #12]
 8000768:	f000 f958 	bl	8000a1c <OneWire_WriteByte>
	OneWire_WriteByte(OW, tl);
 800076c:	7dbb      	ldrb	r3, [r7, #22]
 800076e:	4619      	mov	r1, r3
 8000770:	68f8      	ldr	r0, [r7, #12]
 8000772:	f000 f953 	bl	8000a1c <OneWire_WriteByte>
	OneWire_WriteByte(OW, conf);
 8000776:	7d7b      	ldrb	r3, [r7, #21]
 8000778:	4619      	mov	r1, r3
 800077a:	68f8      	ldr	r0, [r7, #12]
 800077c:	f000 f94e 	bl	8000a1c <OneWire_WriteByte>

	/* Reset line */
	OneWire_Reset(OW);
 8000780:	68f8      	ldr	r0, [r7, #12]
 8000782:	f000 f98a 	bl	8000a9a <OneWire_Reset>

	/* Select ROM number */
	OneWire_SelectWithPointer(OW, ROM);
 8000786:	68b9      	ldr	r1, [r7, #8]
 8000788:	68f8      	ldr	r0, [r7, #12]
 800078a:	f000 fabe 	bl	8000d0a <OneWire_SelectWithPointer>

	/* Copy scratchpad to EEPROM of DS18B20 */
	OneWire_WriteByte(OW, DS18B20_CMD_COPYSCRATCHPAD);
 800078e:	2148      	movs	r1, #72	; 0x48
 8000790:	68f8      	ldr	r0, [r7, #12]
 8000792:	f000 f943 	bl	8000a1c <OneWire_WriteByte>

	return 1;
 8000796:	2301      	movs	r3, #1
}
 8000798:	4618      	mov	r0, r3
 800079a:	3718      	adds	r7, #24
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}

080007a0 <DS18B20_Init>:
  * @retval Rom detect status, OK = 1, No Rom detected = 0
  * @param  DS			DS18B20 HandleTypedef
  * @param  OW			OneWire HandleTypedef
  */
uint8_t DS18B20_Init(DS18B20_Drv_t *DS, OneWire_t *OW)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
 80007a8:	6039      	str	r1, [r7, #0]
	/* Initialize OneWire and reset all data */
	OneWire_Init(OW);
 80007aa:	6838      	ldr	r0, [r7, #0]
 80007ac:	f000 fa7d 	bl	8000caa <OneWire_Init>

	/* Search all OneWire devices ROM */
	while(1)
	{
		/* Start searching for OneWire devices along the line */
		if(OneWire_Search(OW, ONEWIRE_CMD_SEARCHROM) != 1) break;
 80007b0:	21f0      	movs	r1, #240	; 0xf0
 80007b2:	6838      	ldr	r0, [r7, #0]
 80007b4:	f000 f996 	bl	8000ae4 <OneWire_Search>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b01      	cmp	r3, #1
 80007bc:	d121      	bne.n	8000802 <DS18B20_Init+0x62>

		/* Get device ROM */
		OneWire_GetDevRom(OW, DS->DevAddr[OW->RomCnt]);
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	7adb      	ldrb	r3, [r3, #11]
 80007c2:	00db      	lsls	r3, r3, #3
 80007c4:	687a      	ldr	r2, [r7, #4]
 80007c6:	4413      	add	r3, r2
 80007c8:	4619      	mov	r1, r3
 80007ca:	6838      	ldr	r0, [r7, #0]
 80007cc:	f000 fa50 	bl	8000c70 <OneWire_GetDevRom>

		/* Set ROM Resolution */
		DS18B20_SetResolution(OW, &OW->RomCnt, DS->Resolution);
 80007d0:	683b      	ldr	r3, [r7, #0]
 80007d2:	f103 010b 	add.w	r1, r3, #11
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80007dc:	461a      	mov	r2, r3
 80007de:	6838      	ldr	r0, [r7, #0]
 80007e0:	f7ff fed9 	bl	8000596 <DS18B20_SetResolution>

		/* Reset Temperature Alarm */
		DS18B20_SetTempAlarm(OW, &OW->RomCnt, 0, 0);
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	f103 010b 	add.w	r1, r3, #11
 80007ea:	2300      	movs	r3, #0
 80007ec:	2200      	movs	r2, #0
 80007ee:	6838      	ldr	r0, [r7, #0]
 80007f0:	f7ff ff59 	bl	80006a6 <DS18B20_SetTempAlarm>

		OW->RomCnt++;
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	7adb      	ldrb	r3, [r3, #11]
 80007f8:	3301      	adds	r3, #1
 80007fa:	b2da      	uxtb	r2, r3
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	72da      	strb	r2, [r3, #11]
		if(OneWire_Search(OW, ONEWIRE_CMD_SEARCHROM) != 1) break;
 8000800:	e7d6      	b.n	80007b0 <DS18B20_Init+0x10>
 8000802:	bf00      	nop
	}

	return (OW->RomCnt != 0) ? 1 : 0;
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	7adb      	ldrb	r3, [r3, #11]
 8000808:	2b00      	cmp	r3, #0
 800080a:	bf14      	ite	ne
 800080c:	2301      	movne	r3, #1
 800080e:	2300      	moveq	r3, #0
 8000810:	b2db      	uxtb	r3, r3
}
 8000812:	4618      	mov	r0, r3
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
	...

0800081c <DwtInit>:

/**
  * @brief  Initialize DWT
  */
void DwtInit(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
	SysCClk 		= (SystemCoreClock / 1000000);	// Calculate in us
 8000820:	4b10      	ldr	r3, [pc, #64]	; (8000864 <DwtInit+0x48>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a10      	ldr	r2, [pc, #64]	; (8000868 <DwtInit+0x4c>)
 8000826:	fba2 2303 	umull	r2, r3, r2, r3
 800082a:	0c9b      	lsrs	r3, r3, #18
 800082c:	4a0f      	ldr	r2, [pc, #60]	; (800086c <DwtInit+0x50>)
 800082e:	6013      	str	r3, [r2, #0]
	DWT_LAR			|= DWT_LAR_UNLOCK;
 8000830:	4b0f      	ldr	r3, [pc, #60]	; (8000870 <DwtInit+0x54>)
 8000832:	681a      	ldr	r2, [r3, #0]
 8000834:	490e      	ldr	r1, [pc, #56]	; (8000870 <DwtInit+0x54>)
 8000836:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <DwtInit+0x58>)
 8000838:	4313      	orrs	r3, r2
 800083a:	600b      	str	r3, [r1, #0]
	DEM_CR			|= (uint32_t)DEM_CR_TRCENA;
 800083c:	4b0e      	ldr	r3, [pc, #56]	; (8000878 <DwtInit+0x5c>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a0d      	ldr	r2, [pc, #52]	; (8000878 <DwtInit+0x5c>)
 8000842:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000846:	6013      	str	r3, [r2, #0]
	DWT_CYCCNT		= (uint32_t)0u;					// Reset the clock counter
 8000848:	4b0c      	ldr	r3, [pc, #48]	; (800087c <DwtInit+0x60>)
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
	DWT_CR			|= (uint32_t)DWT_CR_CYCCNTENA;
 800084e:	4b0c      	ldr	r3, [pc, #48]	; (8000880 <DwtInit+0x64>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	4a0b      	ldr	r2, [pc, #44]	; (8000880 <DwtInit+0x64>)
 8000854:	f043 0301 	orr.w	r3, r3, #1
 8000858:	6013      	str	r3, [r2, #0]
}
 800085a:	bf00      	nop
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr
 8000864:	20000000 	.word	0x20000000
 8000868:	431bde83 	.word	0x431bde83
 800086c:	200000a4 	.word	0x200000a4
 8000870:	e0001fb0 	.word	0xe0001fb0
 8000874:	c5acce55 	.word	0xc5acce55
 8000878:	e000edfc 	.word	0xe000edfc
 800087c:	e0001004 	.word	0xe0001004
 8000880:	e0001000 	.word	0xe0001000

08000884 <DwtDelay_us>:
/**
  * @brief  Function to delay in microsecond
  * @param	usec	Period in microsecond
  */
inline void DwtDelay_us(uint32_t usec)
{
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
	start = DWT_CYCCNT;
 800088c:	4b0b      	ldr	r3, [pc, #44]	; (80008bc <DwtDelay_us+0x38>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a0b      	ldr	r2, [pc, #44]	; (80008c0 <DwtDelay_us+0x3c>)
 8000892:	6013      	str	r3, [r2, #0]
	while(((DWT_CYCCNT - start) / SysCClk) < usec) {};
 8000894:	bf00      	nop
 8000896:	4b09      	ldr	r3, [pc, #36]	; (80008bc <DwtDelay_us+0x38>)
 8000898:	681a      	ldr	r2, [r3, #0]
 800089a:	4b09      	ldr	r3, [pc, #36]	; (80008c0 <DwtDelay_us+0x3c>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	1ad2      	subs	r2, r2, r3
 80008a0:	4b08      	ldr	r3, [pc, #32]	; (80008c4 <DwtDelay_us+0x40>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80008a8:	687a      	ldr	r2, [r7, #4]
 80008aa:	429a      	cmp	r2, r3
 80008ac:	d8f3      	bhi.n	8000896 <DwtDelay_us+0x12>
}
 80008ae:	bf00      	nop
 80008b0:	bf00      	nop
 80008b2:	370c      	adds	r7, #12
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr
 80008bc:	e0001004 	.word	0xe0001004
 80008c0:	200000a8 	.word	0x200000a8
 80008c4:	200000a4 	.word	0x200000a4

080008c8 <OneWire_Pin_Mode>:
  * @brief  The internal function is used as gpio pin mode
  * @param  OW		OneWire HandleTypedef
  * @param  Mode	Input or Output
  */
static void OneWire_Pin_Mode(OneWire_t* OW, PinMode Mode)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b088      	sub	sp, #32
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
 80008d0:	460b      	mov	r3, r1
 80008d2:	70fb      	strb	r3, [r7, #3]
		LL_GPIO_SetPinMode(OW->DataPort, OW->DataPin, LL_GPIO_MODE_INPUT);
	}else{
		LL_GPIO_SetPinMode(OW->DataPort, OW->DataPin, LL_GPIO_MODE_OUTPUT);
	}
#else
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d4:	f107 030c 	add.w	r3, r7, #12
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
 80008dc:	605a      	str	r2, [r3, #4]
 80008de:	609a      	str	r2, [r3, #8]
 80008e0:	60da      	str	r2, [r3, #12]
 80008e2:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = OW->DataPin;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	899b      	ldrh	r3, [r3, #12]
 80008e8:	60fb      	str	r3, [r7, #12]
	if(Mode == Input)
 80008ea:	78fb      	ldrb	r3, [r7, #3]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d102      	bne.n	80008f6 <OneWire_Pin_Mode+0x2e>
	{
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f0:	2300      	movs	r3, #0
 80008f2:	613b      	str	r3, [r7, #16]
 80008f4:	e001      	b.n	80008fa <OneWire_Pin_Mode+0x32>
	}else{
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f6:	2301      	movs	r3, #1
 80008f8:	613b      	str	r3, [r7, #16]
	}
	HAL_GPIO_Init(OW->DataPort, &GPIO_InitStruct);
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	691b      	ldr	r3, [r3, #16]
 80008fe:	f107 020c 	add.w	r2, r7, #12
 8000902:	4611      	mov	r1, r2
 8000904:	4618      	mov	r0, r3
 8000906:	f004 fbaf 	bl	8005068 <HAL_GPIO_Init>
#endif
}
 800090a:	bf00      	nop
 800090c:	3720      	adds	r7, #32
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}

08000912 <OneWire_Pin_Level>:
  * @brief  The internal function is used as gpio pin level
  * @param  OW		OneWire HandleTypedef
  * @param  Mode	Level: Set/High = 1, Reset/Low = 0
  */
static void OneWire_Pin_Level(OneWire_t* OW, uint8_t Level)
{
 8000912:	b580      	push	{r7, lr}
 8000914:	b082      	sub	sp, #8
 8000916:	af00      	add	r7, sp, #0
 8000918:	6078      	str	r0, [r7, #4]
 800091a:	460b      	mov	r3, r1
 800091c:	70fb      	strb	r3, [r7, #3]
		LL_GPIO_SetOutputPin(OW->DataPort, OW->DataPin);
	}else{
		LL_GPIO_ResetOutputPin(OW->DataPort, OW->DataPin);
	}
#else
	HAL_GPIO_WritePin(OW->DataPort, OW->DataPin, Level);
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	6918      	ldr	r0, [r3, #16]
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	899b      	ldrh	r3, [r3, #12]
 8000926:	78fa      	ldrb	r2, [r7, #3]
 8000928:	4619      	mov	r1, r3
 800092a:	f004 fd51 	bl	80053d0 <HAL_GPIO_WritePin>
#endif
}
 800092e:	bf00      	nop
 8000930:	3708      	adds	r7, #8
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}

08000936 <OneWire_Pin_Read>:
  * @brief  The internal function is used to read data pin
  * @retval Pin level status
  * @param  OW		OneWire HandleTypedef
  */
static uint8_t OneWire_Pin_Read(OneWire_t* OW)
{
 8000936:	b580      	push	{r7, lr}
 8000938:	b082      	sub	sp, #8
 800093a:	af00      	add	r7, sp, #0
 800093c:	6078      	str	r0, [r7, #4]
#ifdef LL_Driver
	return ((OW->DataPort->IDR & OW->DataPin) != 0x00U) ? 1 : 0;
#else
	return HAL_GPIO_ReadPin(OW->DataPort, OW->DataPin);
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	691a      	ldr	r2, [r3, #16]
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	899b      	ldrh	r3, [r3, #12]
 8000946:	4619      	mov	r1, r3
 8000948:	4610      	mov	r0, r2
 800094a:	f004 fd29 	bl	80053a0 <HAL_GPIO_ReadPin>
 800094e:	4603      	mov	r3, r0
#endif
}
 8000950:	4618      	mov	r0, r3
 8000952:	3708      	adds	r7, #8
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}

08000958 <OneWire_WriteBit>:
  * @brief  The internal function is used to write bit
  * @param  OW		OneWire HandleTypedef
  * @param  bit		bit in 0 or 1
  */
static void OneWire_WriteBit(OneWire_t* OW, uint8_t bit)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
 8000960:	460b      	mov	r3, r1
 8000962:	70fb      	strb	r3, [r7, #3]
	if(bit)
 8000964:	78fb      	ldrb	r3, [r7, #3]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d016      	beq.n	8000998 <OneWire_WriteBit+0x40>
	{
		/* Set line low */
		OneWire_Pin_Level(OW, 0);
 800096a:	2100      	movs	r1, #0
 800096c:	6878      	ldr	r0, [r7, #4]
 800096e:	f7ff ffd0 	bl	8000912 <OneWire_Pin_Level>
		OneWire_Pin_Mode(OW, Output);
 8000972:	2101      	movs	r1, #1
 8000974:	6878      	ldr	r0, [r7, #4]
 8000976:	f7ff ffa7 	bl	80008c8 <OneWire_Pin_Mode>
		DwtDelay_us(10);
 800097a:	200a      	movs	r0, #10
 800097c:	f7ff ff82 	bl	8000884 <DwtDelay_us>

		/* Bit high */
		OneWire_Pin_Mode(OW, Input);
 8000980:	2100      	movs	r1, #0
 8000982:	6878      	ldr	r0, [r7, #4]
 8000984:	f7ff ffa0 	bl	80008c8 <OneWire_Pin_Mode>

		/* Wait for 55 us and release the line */
		DwtDelay_us(55);
 8000988:	2037      	movs	r0, #55	; 0x37
 800098a:	f7ff ff7b 	bl	8000884 <DwtDelay_us>
		OneWire_Pin_Mode(OW, Input);
 800098e:	2100      	movs	r1, #0
 8000990:	6878      	ldr	r0, [r7, #4]
 8000992:	f7ff ff99 	bl	80008c8 <OneWire_Pin_Mode>

		/* Wait for 5 us and release the line */
		DwtDelay_us(5);
		OneWire_Pin_Mode(OW, Input);
	}
}
 8000996:	e015      	b.n	80009c4 <OneWire_WriteBit+0x6c>
		OneWire_Pin_Level(OW, 0);
 8000998:	2100      	movs	r1, #0
 800099a:	6878      	ldr	r0, [r7, #4]
 800099c:	f7ff ffb9 	bl	8000912 <OneWire_Pin_Level>
		OneWire_Pin_Mode(OW, Output);
 80009a0:	2101      	movs	r1, #1
 80009a2:	6878      	ldr	r0, [r7, #4]
 80009a4:	f7ff ff90 	bl	80008c8 <OneWire_Pin_Mode>
		DwtDelay_us(65);
 80009a8:	2041      	movs	r0, #65	; 0x41
 80009aa:	f7ff ff6b 	bl	8000884 <DwtDelay_us>
		OneWire_Pin_Mode(OW, Input);
 80009ae:	2100      	movs	r1, #0
 80009b0:	6878      	ldr	r0, [r7, #4]
 80009b2:	f7ff ff89 	bl	80008c8 <OneWire_Pin_Mode>
		DwtDelay_us(5);
 80009b6:	2005      	movs	r0, #5
 80009b8:	f7ff ff64 	bl	8000884 <DwtDelay_us>
		OneWire_Pin_Mode(OW, Input);
 80009bc:	2100      	movs	r1, #0
 80009be:	6878      	ldr	r0, [r7, #4]
 80009c0:	f7ff ff82 	bl	80008c8 <OneWire_Pin_Mode>
}
 80009c4:	bf00      	nop
 80009c6:	3708      	adds	r7, #8
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}

080009cc <OneWire_ReadBit>:
  * @brief  The function is used to read bit
  * @retval bit
  * @param  OW		OneWire HandleTypedef
  */
uint8_t OneWire_ReadBit(OneWire_t* OW)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b084      	sub	sp, #16
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
	uint8_t bit = 0;
 80009d4:	2300      	movs	r3, #0
 80009d6:	73fb      	strb	r3, [r7, #15]

	/* Line low */
	OneWire_Pin_Level(OW, 0);
 80009d8:	2100      	movs	r1, #0
 80009da:	6878      	ldr	r0, [r7, #4]
 80009dc:	f7ff ff99 	bl	8000912 <OneWire_Pin_Level>
	OneWire_Pin_Mode(OW, Output);
 80009e0:	2101      	movs	r1, #1
 80009e2:	6878      	ldr	r0, [r7, #4]
 80009e4:	f7ff ff70 	bl	80008c8 <OneWire_Pin_Mode>
	DwtDelay_us(3);
 80009e8:	2003      	movs	r0, #3
 80009ea:	f7ff ff4b 	bl	8000884 <DwtDelay_us>

	/* Release line */
	OneWire_Pin_Mode(OW, Input);
 80009ee:	2100      	movs	r1, #0
 80009f0:	6878      	ldr	r0, [r7, #4]
 80009f2:	f7ff ff69 	bl	80008c8 <OneWire_Pin_Mode>
	DwtDelay_us(10);
 80009f6:	200a      	movs	r0, #10
 80009f8:	f7ff ff44 	bl	8000884 <DwtDelay_us>

	/* Read line value */
	if (OneWire_Pin_Read(OW))
 80009fc:	6878      	ldr	r0, [r7, #4]
 80009fe:	f7ff ff9a 	bl	8000936 <OneWire_Pin_Read>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <OneWire_ReadBit+0x40>
	{
		/* Bit is HIGH */
		bit = 1;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	73fb      	strb	r3, [r7, #15]
	}

	/* Wait 50us to complete 60us period */
	DwtDelay_us(50);
 8000a0c:	2032      	movs	r0, #50	; 0x32
 8000a0e:	f7ff ff39 	bl	8000884 <DwtDelay_us>

	/* Return bit value */
	return bit;
 8000a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	3710      	adds	r7, #16
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}

08000a1c <OneWire_WriteByte>:
  * @brief  The function is used to write byte
  * @param  OW		OneWire HandleTypedef
  * @param  byte	byte to write
  */
void OneWire_WriteByte(OneWire_t* OW, uint8_t byte)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
 8000a24:	460b      	mov	r3, r1
 8000a26:	70fb      	strb	r3, [r7, #3]
	uint8_t bit = 8;
 8000a28:	2308      	movs	r3, #8
 8000a2a:	73fb      	strb	r3, [r7, #15]
	/* Write 8 bits */
	while (bit--) {
 8000a2c:	e00a      	b.n	8000a44 <OneWire_WriteByte+0x28>
		/* LSB bit is first */
		OneWire_WriteBit(OW, byte & 0x01);
 8000a2e:	78fb      	ldrb	r3, [r7, #3]
 8000a30:	f003 0301 	and.w	r3, r3, #1
 8000a34:	b2db      	uxtb	r3, r3
 8000a36:	4619      	mov	r1, r3
 8000a38:	6878      	ldr	r0, [r7, #4]
 8000a3a:	f7ff ff8d 	bl	8000958 <OneWire_WriteBit>
		byte >>= 1;
 8000a3e:	78fb      	ldrb	r3, [r7, #3]
 8000a40:	085b      	lsrs	r3, r3, #1
 8000a42:	70fb      	strb	r3, [r7, #3]
	while (bit--) {
 8000a44:	7bfb      	ldrb	r3, [r7, #15]
 8000a46:	1e5a      	subs	r2, r3, #1
 8000a48:	73fa      	strb	r2, [r7, #15]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d1ef      	bne.n	8000a2e <OneWire_WriteByte+0x12>
	}
}
 8000a4e:	bf00      	nop
 8000a50:	bf00      	nop
 8000a52:	3710      	adds	r7, #16
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}

08000a58 <OneWire_ReadByte>:
  * @brief  The function is used to read byte
  * @retval byte from device
  * @param  OW		OneWire HandleTypedef
  */
uint8_t OneWire_ReadByte(OneWire_t* OW)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b084      	sub	sp, #16
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
	uint8_t bit = 8, byte = 0;
 8000a60:	2308      	movs	r3, #8
 8000a62:	73fb      	strb	r3, [r7, #15]
 8000a64:	2300      	movs	r3, #0
 8000a66:	73bb      	strb	r3, [r7, #14]
	while (bit--) {
 8000a68:	e00d      	b.n	8000a86 <OneWire_ReadByte+0x2e>
		byte >>= 1;
 8000a6a:	7bbb      	ldrb	r3, [r7, #14]
 8000a6c:	085b      	lsrs	r3, r3, #1
 8000a6e:	73bb      	strb	r3, [r7, #14]
		byte |= (OneWire_ReadBit(OW) << 7);
 8000a70:	6878      	ldr	r0, [r7, #4]
 8000a72:	f7ff ffab 	bl	80009cc <OneWire_ReadBit>
 8000a76:	4603      	mov	r3, r0
 8000a78:	01db      	lsls	r3, r3, #7
 8000a7a:	b25a      	sxtb	r2, r3
 8000a7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000a80:	4313      	orrs	r3, r2
 8000a82:	b25b      	sxtb	r3, r3
 8000a84:	73bb      	strb	r3, [r7, #14]
	while (bit--) {
 8000a86:	7bfb      	ldrb	r3, [r7, #15]
 8000a88:	1e5a      	subs	r2, r3, #1
 8000a8a:	73fa      	strb	r2, [r7, #15]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d1ec      	bne.n	8000a6a <OneWire_ReadByte+0x12>
	}

	return byte;
 8000a90:	7bbb      	ldrb	r3, [r7, #14]
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3710      	adds	r7, #16
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}

08000a9a <OneWire_Reset>:
  * @brief  The function is used to reset device
  * @retval respond from device
  * @param  OW		OneWire HandleTypedef
  */
uint8_t OneWire_Reset(OneWire_t* OW)
{
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	b084      	sub	sp, #16
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	6078      	str	r0, [r7, #4]
	/* Line low, and wait 480us */
	OneWire_Pin_Level(OW, 0);
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	6878      	ldr	r0, [r7, #4]
 8000aa6:	f7ff ff34 	bl	8000912 <OneWire_Pin_Level>
	OneWire_Pin_Mode(OW, Output);
 8000aaa:	2101      	movs	r1, #1
 8000aac:	6878      	ldr	r0, [r7, #4]
 8000aae:	f7ff ff0b 	bl	80008c8 <OneWire_Pin_Mode>
	DwtDelay_us(480);
 8000ab2:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8000ab6:	f7ff fee5 	bl	8000884 <DwtDelay_us>

	/* Release line and wait for 70us */
	OneWire_Pin_Mode(OW, Input);
 8000aba:	2100      	movs	r1, #0
 8000abc:	6878      	ldr	r0, [r7, #4]
 8000abe:	f7ff ff03 	bl	80008c8 <OneWire_Pin_Mode>
	DwtDelay_us(70);
 8000ac2:	2046      	movs	r0, #70	; 0x46
 8000ac4:	f7ff fede 	bl	8000884 <DwtDelay_us>

	/* Check bit value */
	uint8_t rslt = OneWire_Pin_Read(OW);
 8000ac8:	6878      	ldr	r0, [r7, #4]
 8000aca:	f7ff ff34 	bl	8000936 <OneWire_Pin_Read>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	73fb      	strb	r3, [r7, #15]

	/* Delay for 410 us */
	DwtDelay_us(410);
 8000ad2:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 8000ad6:	f7ff fed5 	bl	8000884 <DwtDelay_us>

	return rslt;
 8000ada:	7bfb      	ldrb	r3, [r7, #15]
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	3710      	adds	r7, #16
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}

08000ae4 <OneWire_Search>:
  * @brief  The function is used to search device
  * @retval Search result
  * @param  OW		OneWire HandleTypedef
  */
uint8_t OneWire_Search(OneWire_t* OW, uint8_t Cmd)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b084      	sub	sp, #16
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
 8000aec:	460b      	mov	r3, r1
 8000aee:	70fb      	strb	r3, [r7, #3]
	uint8_t id_bit_number 	= 1;
 8000af0:	2301      	movs	r3, #1
 8000af2:	73fb      	strb	r3, [r7, #15]
	uint8_t last_zero 		= 0;
 8000af4:	2300      	movs	r3, #0
 8000af6:	73bb      	strb	r3, [r7, #14]
	uint8_t rom_byte_number = 0;
 8000af8:	2300      	movs	r3, #0
 8000afa:	737b      	strb	r3, [r7, #13]
	uint8_t search_result 	= 0;
 8000afc:	2300      	movs	r3, #0
 8000afe:	733b      	strb	r3, [r7, #12]
	uint8_t rom_byte_mask 	= 1;
 8000b00:	2301      	movs	r3, #1
 8000b02:	72fb      	strb	r3, [r7, #11]
	uint8_t id_bit, cmp_id_bit, search_direction;

	/* if the last call was not the last one */
	if (!OW->LastDeviceFlag)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	789b      	ldrb	r3, [r3, #2]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	f040 809a 	bne.w	8000c42 <OneWire_Search+0x15e>
	{
		if (OneWire_Reset(OW))
 8000b0e:	6878      	ldr	r0, [r7, #4]
 8000b10:	f7ff ffc3 	bl	8000a9a <OneWire_Reset>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d00a      	beq.n	8000b30 <OneWire_Search+0x4c>
		{
			OW->LastDiscrepancy = 0;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	701a      	strb	r2, [r3, #0]
			OW->LastDeviceFlag = 0;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	2200      	movs	r2, #0
 8000b24:	709a      	strb	r2, [r3, #2]
			OW->LastFamilyDiscrepancy = 0;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	2200      	movs	r2, #0
 8000b2a:	705a      	strb	r2, [r3, #1]
			return 0;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	e09b      	b.n	8000c68 <OneWire_Search+0x184>
		}

		// issue the search command
		OneWire_WriteByte(OW, Cmd);
 8000b30:	78fb      	ldrb	r3, [r7, #3]
 8000b32:	4619      	mov	r1, r3
 8000b34:	6878      	ldr	r0, [r7, #4]
 8000b36:	f7ff ff71 	bl	8000a1c <OneWire_WriteByte>

		// loop to do the search
		do {
			// read a bit and its complement
			id_bit = OneWire_ReadBit(OW);
 8000b3a:	6878      	ldr	r0, [r7, #4]
 8000b3c:	f7ff ff46 	bl	80009cc <OneWire_ReadBit>
 8000b40:	4603      	mov	r3, r0
 8000b42:	727b      	strb	r3, [r7, #9]
			cmp_id_bit = OneWire_ReadBit(OW);
 8000b44:	6878      	ldr	r0, [r7, #4]
 8000b46:	f7ff ff41 	bl	80009cc <OneWire_ReadBit>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	723b      	strb	r3, [r7, #8]

			// check for no devices on 1-wire
			if ((id_bit == 1) && (cmp_id_bit == 1))
 8000b4e:	7a7b      	ldrb	r3, [r7, #9]
 8000b50:	2b01      	cmp	r3, #1
 8000b52:	d102      	bne.n	8000b5a <OneWire_Search+0x76>
 8000b54:	7a3b      	ldrb	r3, [r7, #8]
 8000b56:	2b01      	cmp	r3, #1
 8000b58:	d064      	beq.n	8000c24 <OneWire_Search+0x140>
			{
				break;
			} else {
				// all devices coupled have 0 or 1
				if (id_bit != cmp_id_bit)
 8000b5a:	7a7a      	ldrb	r2, [r7, #9]
 8000b5c:	7a3b      	ldrb	r3, [r7, #8]
 8000b5e:	429a      	cmp	r2, r3
 8000b60:	d002      	beq.n	8000b68 <OneWire_Search+0x84>
				{
					search_direction = id_bit;  // bit write value for search
 8000b62:	7a7b      	ldrb	r3, [r7, #9]
 8000b64:	72bb      	strb	r3, [r7, #10]
 8000b66:	e026      	b.n	8000bb6 <OneWire_Search+0xd2>
				} else {
					/* if this discrepancy if before the Last Discrepancy
					 * on a previous next then pick the same as last time */
					if (id_bit_number < OW->LastDiscrepancy)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	7bfa      	ldrb	r2, [r7, #15]
 8000b6e:	429a      	cmp	r2, r3
 8000b70:	d20d      	bcs.n	8000b8e <OneWire_Search+0xaa>
					{
						search_direction = ((OW->RomByte[rom_byte_number] & rom_byte_mask) > 0);
 8000b72:	7b7b      	ldrb	r3, [r7, #13]
 8000b74:	687a      	ldr	r2, [r7, #4]
 8000b76:	4413      	add	r3, r2
 8000b78:	78da      	ldrb	r2, [r3, #3]
 8000b7a:	7afb      	ldrb	r3, [r7, #11]
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	bf14      	ite	ne
 8000b84:	2301      	movne	r3, #1
 8000b86:	2300      	moveq	r3, #0
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	72bb      	strb	r3, [r7, #10]
 8000b8c:	e008      	b.n	8000ba0 <OneWire_Search+0xbc>
					} else {
						// if equal to last pick 1, if not then pick 0
						search_direction = (id_bit_number == OW->LastDiscrepancy);
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	7bfa      	ldrb	r2, [r7, #15]
 8000b94:	429a      	cmp	r2, r3
 8000b96:	bf0c      	ite	eq
 8000b98:	2301      	moveq	r3, #1
 8000b9a:	2300      	movne	r3, #0
 8000b9c:	b2db      	uxtb	r3, r3
 8000b9e:	72bb      	strb	r3, [r7, #10]
					}

					// if 0 was picked then record its position in LastZero
					if (search_direction == 0)
 8000ba0:	7abb      	ldrb	r3, [r7, #10]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d107      	bne.n	8000bb6 <OneWire_Search+0xd2>
					{
						last_zero = id_bit_number;
 8000ba6:	7bfb      	ldrb	r3, [r7, #15]
 8000ba8:	73bb      	strb	r3, [r7, #14]

						// check for Last discrepancy in family
						if (last_zero < 9)
 8000baa:	7bbb      	ldrb	r3, [r7, #14]
 8000bac:	2b08      	cmp	r3, #8
 8000bae:	d802      	bhi.n	8000bb6 <OneWire_Search+0xd2>
						{
							OW->LastFamilyDiscrepancy = last_zero;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	7bba      	ldrb	r2, [r7, #14]
 8000bb4:	705a      	strb	r2, [r3, #1]
					}
				}

				/* set or clear the bit in the ROM byte rom_byte_number
				 * with mask rom_byte_mask */
				if (search_direction == 1)
 8000bb6:	7abb      	ldrb	r3, [r7, #10]
 8000bb8:	2b01      	cmp	r3, #1
 8000bba:	d10c      	bne.n	8000bd6 <OneWire_Search+0xf2>
				{
					OW->RomByte[rom_byte_number] |= rom_byte_mask;
 8000bbc:	7b7b      	ldrb	r3, [r7, #13]
 8000bbe:	687a      	ldr	r2, [r7, #4]
 8000bc0:	4413      	add	r3, r2
 8000bc2:	78d9      	ldrb	r1, [r3, #3]
 8000bc4:	7b7b      	ldrb	r3, [r7, #13]
 8000bc6:	7afa      	ldrb	r2, [r7, #11]
 8000bc8:	430a      	orrs	r2, r1
 8000bca:	b2d1      	uxtb	r1, r2
 8000bcc:	687a      	ldr	r2, [r7, #4]
 8000bce:	4413      	add	r3, r2
 8000bd0:	460a      	mov	r2, r1
 8000bd2:	70da      	strb	r2, [r3, #3]
 8000bd4:	e010      	b.n	8000bf8 <OneWire_Search+0x114>
				} else {
					OW->RomByte[rom_byte_number] &= ~rom_byte_mask;
 8000bd6:	7b7b      	ldrb	r3, [r7, #13]
 8000bd8:	687a      	ldr	r2, [r7, #4]
 8000bda:	4413      	add	r3, r2
 8000bdc:	78db      	ldrb	r3, [r3, #3]
 8000bde:	b25a      	sxtb	r2, r3
 8000be0:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000be4:	43db      	mvns	r3, r3
 8000be6:	b25b      	sxtb	r3, r3
 8000be8:	4013      	ands	r3, r2
 8000bea:	b25a      	sxtb	r2, r3
 8000bec:	7b7b      	ldrb	r3, [r7, #13]
 8000bee:	b2d1      	uxtb	r1, r2
 8000bf0:	687a      	ldr	r2, [r7, #4]
 8000bf2:	4413      	add	r3, r2
 8000bf4:	460a      	mov	r2, r1
 8000bf6:	70da      	strb	r2, [r3, #3]
				}

				// serial number search direction write bit
				OneWire_WriteBit(OW, search_direction);
 8000bf8:	7abb      	ldrb	r3, [r7, #10]
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	6878      	ldr	r0, [r7, #4]
 8000bfe:	f7ff feab 	bl	8000958 <OneWire_WriteBit>

				/* increment the byte counter id_bit_number and shift the
				 * mask rom_byte_mask */
				id_bit_number++;
 8000c02:	7bfb      	ldrb	r3, [r7, #15]
 8000c04:	3301      	adds	r3, #1
 8000c06:	73fb      	strb	r3, [r7, #15]
				rom_byte_mask <<= 1;
 8000c08:	7afb      	ldrb	r3, [r7, #11]
 8000c0a:	005b      	lsls	r3, r3, #1
 8000c0c:	72fb      	strb	r3, [r7, #11]

				/* if the mask is 0 then go to new SerialNum byte
				 * rom_byte_number and reset mask */
				if (rom_byte_mask == 0)
 8000c0e:	7afb      	ldrb	r3, [r7, #11]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d104      	bne.n	8000c1e <OneWire_Search+0x13a>
				{
					rom_byte_number++;
 8000c14:	7b7b      	ldrb	r3, [r7, #13]
 8000c16:	3301      	adds	r3, #1
 8000c18:	737b      	strb	r3, [r7, #13]
					rom_byte_mask = 1;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	72fb      	strb	r3, [r7, #11]
				}
			}
		} while (rom_byte_number < 8);  /* loop until through all ROM bytes 0-7
 8000c1e:	7b7b      	ldrb	r3, [r7, #13]
 8000c20:	2b07      	cmp	r3, #7
 8000c22:	d98a      	bls.n	8000b3a <OneWire_Search+0x56>
		if the search was successful then */

		if (!(id_bit_number < 65))
 8000c24:	7bfb      	ldrb	r3, [r7, #15]
 8000c26:	2b40      	cmp	r3, #64	; 0x40
 8000c28:	d90b      	bls.n	8000c42 <OneWire_Search+0x15e>
		{
			/* search successful so set LastDiscrepancy, LastDeviceFlag,
			 * search_result */
			OW->LastDiscrepancy = last_zero;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	7bba      	ldrb	r2, [r7, #14]
 8000c2e:	701a      	strb	r2, [r3, #0]
			// check for last device
			if (OW->LastDiscrepancy == 0) {
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d102      	bne.n	8000c3e <OneWire_Search+0x15a>
				OW->LastDeviceFlag = 1;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	709a      	strb	r2, [r3, #2]
			}
			search_result = 1;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	733b      	strb	r3, [r7, #12]
		}
	}

	/* if no device found then reset counters so next 'search' will be like a
	 * first */
	if (!search_result || !OW->RomByte[0])
 8000c42:	7b3b      	ldrb	r3, [r7, #12]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d003      	beq.n	8000c50 <OneWire_Search+0x16c>
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	78db      	ldrb	r3, [r3, #3]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d10a      	bne.n	8000c66 <OneWire_Search+0x182>
	{
		OW->LastDiscrepancy = 0;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2200      	movs	r2, #0
 8000c54:	701a      	strb	r2, [r3, #0]
		OW->LastDeviceFlag = 0;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	2200      	movs	r2, #0
 8000c5a:	709a      	strb	r2, [r3, #2]
		OW->LastFamilyDiscrepancy = 0;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	2200      	movs	r2, #0
 8000c60:	705a      	strb	r2, [r3, #1]
		search_result = 0;
 8000c62:	2300      	movs	r3, #0
 8000c64:	733b      	strb	r3, [r7, #12]
	}

	return search_result;
 8000c66:	7b3b      	ldrb	r3, [r7, #12]
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	3710      	adds	r7, #16
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}

08000c70 <OneWire_GetDevRom>:
  * @brief  The function is used get ROM full address
  * @param  OW		OneWire HandleTypedef
  * @param  ROM		Pointer to device ROM
  */
void OneWire_GetDevRom(OneWire_t* OW, uint8_t *ROM)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b085      	sub	sp, #20
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	6039      	str	r1, [r7, #0]
	for (uint8_t i = 0; i < 8; i++) {
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	73fb      	strb	r3, [r7, #15]
 8000c7e:	e00a      	b.n	8000c96 <OneWire_GetDevRom+0x26>
		*(ROM + i) = OW->RomByte[i];
 8000c80:	7bfa      	ldrb	r2, [r7, #15]
 8000c82:	7bfb      	ldrb	r3, [r7, #15]
 8000c84:	6839      	ldr	r1, [r7, #0]
 8000c86:	440b      	add	r3, r1
 8000c88:	6879      	ldr	r1, [r7, #4]
 8000c8a:	440a      	add	r2, r1
 8000c8c:	78d2      	ldrb	r2, [r2, #3]
 8000c8e:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 8; i++) {
 8000c90:	7bfb      	ldrb	r3, [r7, #15]
 8000c92:	3301      	adds	r3, #1
 8000c94:	73fb      	strb	r3, [r7, #15]
 8000c96:	7bfb      	ldrb	r3, [r7, #15]
 8000c98:	2b07      	cmp	r3, #7
 8000c9a:	d9f1      	bls.n	8000c80 <OneWire_GetDevRom+0x10>
	}
}
 8000c9c:	bf00      	nop
 8000c9e:	bf00      	nop
 8000ca0:	3714      	adds	r7, #20
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr

08000caa <OneWire_Init>:
/**
  * @brief  The function is used to initialize OneWire Communication
  * @param  OW		OneWire HandleTypedef
  */
void OneWire_Init(OneWire_t* OW)
{
 8000caa:	b580      	push	{r7, lr}
 8000cac:	b082      	sub	sp, #8
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	6078      	str	r0, [r7, #4]
	OneWire_Pin_Mode(OW, Output);
 8000cb2:	2101      	movs	r1, #1
 8000cb4:	6878      	ldr	r0, [r7, #4]
 8000cb6:	f7ff fe07 	bl	80008c8 <OneWire_Pin_Mode>
	OneWire_Pin_Level(OW, 1);
 8000cba:	2101      	movs	r1, #1
 8000cbc:	6878      	ldr	r0, [r7, #4]
 8000cbe:	f7ff fe28 	bl	8000912 <OneWire_Pin_Level>
	DwtDelay_us(1000);
 8000cc2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cc6:	f7ff fddd 	bl	8000884 <DwtDelay_us>
	OneWire_Pin_Level(OW, 0);
 8000cca:	2100      	movs	r1, #0
 8000ccc:	6878      	ldr	r0, [r7, #4]
 8000cce:	f7ff fe20 	bl	8000912 <OneWire_Pin_Level>
	DwtDelay_us(1000);
 8000cd2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cd6:	f7ff fdd5 	bl	8000884 <DwtDelay_us>
	OneWire_Pin_Level(OW, 1);
 8000cda:	2101      	movs	r1, #1
 8000cdc:	6878      	ldr	r0, [r7, #4]
 8000cde:	f7ff fe18 	bl	8000912 <OneWire_Pin_Level>
	DwtDelay_us(2000);
 8000ce2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000ce6:	f7ff fdcd 	bl	8000884 <DwtDelay_us>

	/* Reset the search state */
	OW->LastDiscrepancy 		= 0;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2200      	movs	r2, #0
 8000cee:	701a      	strb	r2, [r3, #0]
	OW->LastDeviceFlag 			= 0;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	709a      	strb	r2, [r3, #2]
	OW->LastFamilyDiscrepancy 	= 0;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	705a      	strb	r2, [r3, #1]
	OW->RomCnt 					= 0;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2200      	movs	r2, #0
 8000d00:	72da      	strb	r2, [r3, #11]
}
 8000d02:	bf00      	nop
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}

08000d0a <OneWire_SelectWithPointer>:
  * @brief  The function is used selected specific device ROM
  * @param  OW		OneWire HandleTypedef
  * @param  ROM		Pointer to device ROM
  */
void OneWire_SelectWithPointer(OneWire_t* OW, uint8_t *ROM)
{
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b084      	sub	sp, #16
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	6078      	str	r0, [r7, #4]
 8000d12:	6039      	str	r1, [r7, #0]
	OneWire_WriteByte(OW, ONEWIRE_CMD_MATCHROM);
 8000d14:	2155      	movs	r1, #85	; 0x55
 8000d16:	6878      	ldr	r0, [r7, #4]
 8000d18:	f7ff fe80 	bl	8000a1c <OneWire_WriteByte>

	for (uint8_t i = 0; i < 8; i++)
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	73fb      	strb	r3, [r7, #15]
 8000d20:	e00a      	b.n	8000d38 <OneWire_SelectWithPointer+0x2e>
	{
		OneWire_WriteByte(OW, *(ROM + i));
 8000d22:	7bfb      	ldrb	r3, [r7, #15]
 8000d24:	683a      	ldr	r2, [r7, #0]
 8000d26:	4413      	add	r3, r2
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	6878      	ldr	r0, [r7, #4]
 8000d2e:	f7ff fe75 	bl	8000a1c <OneWire_WriteByte>
	for (uint8_t i = 0; i < 8; i++)
 8000d32:	7bfb      	ldrb	r3, [r7, #15]
 8000d34:	3301      	adds	r3, #1
 8000d36:	73fb      	strb	r3, [r7, #15]
 8000d38:	7bfb      	ldrb	r3, [r7, #15]
 8000d3a:	2b07      	cmp	r3, #7
 8000d3c:	d9f1      	bls.n	8000d22 <OneWire_SelectWithPointer+0x18>
	}
}
 8000d3e:	bf00      	nop
 8000d40:	bf00      	nop
 8000d42:	3710      	adds	r7, #16
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}

08000d48 <GetSector>:
 *  Sector 4 as 64KB
 *  Sector 5 to Sector 7 each 128KB
 */

static uint32_t GetSector(uint32_t Address)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b085      	sub	sp, #20
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 8000d50:	2300      	movs	r3, #0
 8000d52:	60fb      	str	r3, [r7, #12]

  if((Address < 0x08003FFF) && (Address >= 0x08000000))
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	4a44      	ldr	r2, [pc, #272]	; (8000e68 <GetSector+0x120>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d806      	bhi.n	8000d6a <GetSector+0x22>
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000d62:	d302      	bcc.n	8000d6a <GetSector+0x22>
  {
    sector = FLASH_SECTOR_0;
 8000d64:	2300      	movs	r3, #0
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	e077      	b.n	8000e5a <GetSector+0x112>
  }
  else if((Address < 0x08007FFF) && (Address >= 0x08004000))
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4a3f      	ldr	r2, [pc, #252]	; (8000e6c <GetSector+0x124>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d806      	bhi.n	8000d80 <GetSector+0x38>
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4a3e      	ldr	r2, [pc, #248]	; (8000e70 <GetSector+0x128>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d302      	bcc.n	8000d80 <GetSector+0x38>
  {
    sector = FLASH_SECTOR_1;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	60fb      	str	r3, [r7, #12]
 8000d7e:	e06c      	b.n	8000e5a <GetSector+0x112>
  }
  else if((Address < 0x0800BFFF) && (Address >= 0x08008000))
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	4a3c      	ldr	r2, [pc, #240]	; (8000e74 <GetSector+0x12c>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d806      	bhi.n	8000d96 <GetSector+0x4e>
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	4a3b      	ldr	r2, [pc, #236]	; (8000e78 <GetSector+0x130>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d302      	bcc.n	8000d96 <GetSector+0x4e>
  {
    sector = FLASH_SECTOR_2;
 8000d90:	2302      	movs	r3, #2
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	e061      	b.n	8000e5a <GetSector+0x112>
  }
  else if((Address < 0x0800FFFF) && (Address >= 0x0800C000))
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4a38      	ldr	r2, [pc, #224]	; (8000e7c <GetSector+0x134>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d206      	bcs.n	8000dac <GetSector+0x64>
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4a37      	ldr	r2, [pc, #220]	; (8000e80 <GetSector+0x138>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d302      	bcc.n	8000dac <GetSector+0x64>
  {
    sector = FLASH_SECTOR_3;
 8000da6:	2303      	movs	r3, #3
 8000da8:	60fb      	str	r3, [r7, #12]
 8000daa:	e056      	b.n	8000e5a <GetSector+0x112>
  }
  else if((Address < 0x0801FFFF) && (Address >= 0x08010000))
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	4a35      	ldr	r2, [pc, #212]	; (8000e84 <GetSector+0x13c>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d206      	bcs.n	8000dc2 <GetSector+0x7a>
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	4a31      	ldr	r2, [pc, #196]	; (8000e7c <GetSector+0x134>)
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d902      	bls.n	8000dc2 <GetSector+0x7a>
  {
    sector = FLASH_SECTOR_4;
 8000dbc:	2304      	movs	r3, #4
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	e04b      	b.n	8000e5a <GetSector+0x112>
  }
  else if((Address < 0x0803FFFF) && (Address >= 0x08020000))
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4a30      	ldr	r2, [pc, #192]	; (8000e88 <GetSector+0x140>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d206      	bcs.n	8000dd8 <GetSector+0x90>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4a2d      	ldr	r2, [pc, #180]	; (8000e84 <GetSector+0x13c>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d902      	bls.n	8000dd8 <GetSector+0x90>
  {
    sector = FLASH_SECTOR_5;
 8000dd2:	2305      	movs	r3, #5
 8000dd4:	60fb      	str	r3, [r7, #12]
 8000dd6:	e040      	b.n	8000e5a <GetSector+0x112>
  }
  else if((Address < 0x0805FFFF) && (Address >= 0x08040000))
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	4a2c      	ldr	r2, [pc, #176]	; (8000e8c <GetSector+0x144>)
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	d206      	bcs.n	8000dee <GetSector+0xa6>
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	4a29      	ldr	r2, [pc, #164]	; (8000e88 <GetSector+0x140>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d902      	bls.n	8000dee <GetSector+0xa6>
  {
    sector = FLASH_SECTOR_6;
 8000de8:	2306      	movs	r3, #6
 8000dea:	60fb      	str	r3, [r7, #12]
 8000dec:	e035      	b.n	8000e5a <GetSector+0x112>
  }
  else if((Address < 0x0807FFFF) && (Address >= 0x08060000))
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4a27      	ldr	r2, [pc, #156]	; (8000e90 <GetSector+0x148>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d206      	bcs.n	8000e04 <GetSector+0xbc>
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4a24      	ldr	r2, [pc, #144]	; (8000e8c <GetSector+0x144>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d902      	bls.n	8000e04 <GetSector+0xbc>
  {
    sector = FLASH_SECTOR_7;
 8000dfe:	2307      	movs	r3, #7
 8000e00:	60fb      	str	r3, [r7, #12]
 8000e02:	e02a      	b.n	8000e5a <GetSector+0x112>
  }
  else if((Address < 0x0809FFFF) && (Address >= 0x08080000))
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	4a23      	ldr	r2, [pc, #140]	; (8000e94 <GetSector+0x14c>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d206      	bcs.n	8000e1a <GetSector+0xd2>
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	4a20      	ldr	r2, [pc, #128]	; (8000e90 <GetSector+0x148>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d902      	bls.n	8000e1a <GetSector+0xd2>
  {
    sector = FLASH_SECTOR_8;
 8000e14:	2308      	movs	r3, #8
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	e01f      	b.n	8000e5a <GetSector+0x112>
  }
  else if((Address < 0x080BFFFF) && (Address >= 0x080A0000))
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4a1e      	ldr	r2, [pc, #120]	; (8000e98 <GetSector+0x150>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d206      	bcs.n	8000e30 <GetSector+0xe8>
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4a1b      	ldr	r2, [pc, #108]	; (8000e94 <GetSector+0x14c>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d902      	bls.n	8000e30 <GetSector+0xe8>
  {
    sector = FLASH_SECTOR_9;
 8000e2a:	2309      	movs	r3, #9
 8000e2c:	60fb      	str	r3, [r7, #12]
 8000e2e:	e014      	b.n	8000e5a <GetSector+0x112>
  }
  else if((Address < 0x080DFFFF) && (Address >= 0x080C0000))
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	4a1a      	ldr	r2, [pc, #104]	; (8000e9c <GetSector+0x154>)
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d806      	bhi.n	8000e46 <GetSector+0xfe>
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	4a17      	ldr	r2, [pc, #92]	; (8000e98 <GetSector+0x150>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d902      	bls.n	8000e46 <GetSector+0xfe>
  {
    sector = FLASH_SECTOR_10;
 8000e40:	230a      	movs	r3, #10
 8000e42:	60fb      	str	r3, [r7, #12]
 8000e44:	e009      	b.n	8000e5a <GetSector+0x112>
  }
  else if((Address < 0x080FFFFF) && (Address >= 0x080E0000))
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4a15      	ldr	r2, [pc, #84]	; (8000ea0 <GetSector+0x158>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d805      	bhi.n	8000e5a <GetSector+0x112>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4a14      	ldr	r2, [pc, #80]	; (8000ea4 <GetSector+0x15c>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d901      	bls.n	8000e5a <GetSector+0x112>
  {
    sector = FLASH_SECTOR_11;
 8000e56:	230b      	movs	r3, #11
 8000e58:	60fb      	str	r3, [r7, #12]
//  }
//  else if((Address < 0x081FFFFF) && (Address >= 0x081E0000))
//  {
//    sector = FLASH_SECTOR_23;
//  }
  return sector;
 8000e5a:	68fb      	ldr	r3, [r7, #12]
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3714      	adds	r7, #20
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr
 8000e68:	08003ffe 	.word	0x08003ffe
 8000e6c:	08007ffe 	.word	0x08007ffe
 8000e70:	08004000 	.word	0x08004000
 8000e74:	0800bffe 	.word	0x0800bffe
 8000e78:	08008000 	.word	0x08008000
 8000e7c:	0800ffff 	.word	0x0800ffff
 8000e80:	0800c000 	.word	0x0800c000
 8000e84:	0801ffff 	.word	0x0801ffff
 8000e88:	0803ffff 	.word	0x0803ffff
 8000e8c:	0805ffff 	.word	0x0805ffff
 8000e90:	0807ffff 	.word	0x0807ffff
 8000e94:	0809ffff 	.word	0x0809ffff
 8000e98:	080bffff 	.word	0x080bffff
 8000e9c:	080dfffe 	.word	0x080dfffe
 8000ea0:	080ffffe 	.word	0x080ffffe
 8000ea4:	080dffff 	.word	0x080dffff

08000ea8 <Flash_Write_Data>:
   return float_variable;
}


uint32_t Flash_Write_Data (uint32_t StartSectorAddress, uint32_t *Data, uint16_t numberofwords)
{
 8000ea8:	b5b0      	push	{r4, r5, r7, lr}
 8000eaa:	b08a      	sub	sp, #40	; 0x28
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	60f8      	str	r0, [r7, #12]
 8000eb0:	60b9      	str	r1, [r7, #8]
 8000eb2:	4613      	mov	r3, r2
 8000eb4:	80fb      	strh	r3, [r7, #6]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SECTORError;
	int sofar=0;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	627b      	str	r3, [r7, #36]	; 0x24


	 /* Unlock the Flash to enable the flash control register access *************/
	  HAL_FLASH_Unlock();
 8000eba:	f003 fe45 	bl	8004b48 <HAL_FLASH_Unlock>

	  /* Erase the user Flash area */

	  /* Get the number of sector to erase from 1st sector */

	  uint32_t StartSector = GetSector(StartSectorAddress);
 8000ebe:	68f8      	ldr	r0, [r7, #12]
 8000ec0:	f7ff ff42 	bl	8000d48 <GetSector>
 8000ec4:	6238      	str	r0, [r7, #32]
	  uint32_t EndSectorAddress = StartSectorAddress + numberofwords*4;
 8000ec6:	88fb      	ldrh	r3, [r7, #6]
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	461a      	mov	r2, r3
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	4413      	add	r3, r2
 8000ed0:	61fb      	str	r3, [r7, #28]
	  uint32_t EndSector = GetSector(EndSectorAddress);
 8000ed2:	69f8      	ldr	r0, [r7, #28]
 8000ed4:	f7ff ff38 	bl	8000d48 <GetSector>
 8000ed8:	61b8      	str	r0, [r7, #24]

	  /* Fill EraseInit structure*/
	  EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 8000eda:	4b21      	ldr	r3, [pc, #132]	; (8000f60 <Flash_Write_Data+0xb8>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
	  EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8000ee0:	4b1f      	ldr	r3, [pc, #124]	; (8000f60 <Flash_Write_Data+0xb8>)
 8000ee2:	2202      	movs	r2, #2
 8000ee4:	611a      	str	r2, [r3, #16]
	  EraseInitStruct.Sector        = StartSector;
 8000ee6:	4a1e      	ldr	r2, [pc, #120]	; (8000f60 <Flash_Write_Data+0xb8>)
 8000ee8:	6a3b      	ldr	r3, [r7, #32]
 8000eea:	6093      	str	r3, [r2, #8]
	  EraseInitStruct.NbSectors     = (EndSector - StartSector) + 1;
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	6a3b      	ldr	r3, [r7, #32]
 8000ef0:	1ad3      	subs	r3, r2, r3
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	4a1a      	ldr	r2, [pc, #104]	; (8000f60 <Flash_Write_Data+0xb8>)
 8000ef6:	60d3      	str	r3, [r2, #12]

	  /* Note: If an erase operation in Flash memory also concerns data in the data or instruction cache,
	     you have to make sure that these data are rewritten before they are accessed during code
	     execution. If this cannot be done safely, it is recommended to flush the caches by setting the
	     DCRST and ICRST bits in the FLASH_CR register. */
	  if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 8000ef8:	f107 0314 	add.w	r3, r7, #20
 8000efc:	4619      	mov	r1, r3
 8000efe:	4818      	ldr	r0, [pc, #96]	; (8000f60 <Flash_Write_Data+0xb8>)
 8000f00:	f003 ff90 	bl	8004e24 <HAL_FLASHEx_Erase>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d01f      	beq.n	8000f4a <Flash_Write_Data+0xa2>
	  {
		  return HAL_FLASH_GetError ();
 8000f0a:	f003 fe4f 	bl	8004bac <HAL_FLASH_GetError>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	e022      	b.n	8000f58 <Flash_Write_Data+0xb0>
	  /* Program the user Flash area word by word
	    (area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/

	   while (sofar<numberofwords)
	   {
	     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartSectorAddress, Data[sofar]) == HAL_OK)
 8000f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	68ba      	ldr	r2, [r7, #8]
 8000f18:	4413      	add	r3, r2
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	461c      	mov	r4, r3
 8000f20:	4615      	mov	r5, r2
 8000f22:	4622      	mov	r2, r4
 8000f24:	462b      	mov	r3, r5
 8000f26:	68f9      	ldr	r1, [r7, #12]
 8000f28:	2002      	movs	r0, #2
 8000f2a:	f003 fdb9 	bl	8004aa0 <HAL_FLASH_Program>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d106      	bne.n	8000f42 <Flash_Write_Data+0x9a>
	     {
	    	 StartSectorAddress += 4;  // use StartPageAddress += 2 for half word and 8 for double word
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	3304      	adds	r3, #4
 8000f38:	60fb      	str	r3, [r7, #12]
	    	 sofar++;
 8000f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	627b      	str	r3, [r7, #36]	; 0x24
 8000f40:	e003      	b.n	8000f4a <Flash_Write_Data+0xa2>
	     }
	     else
	     {
	       /* Error occurred while writing data in Flash memory*/
	    	 return HAL_FLASH_GetError ();
 8000f42:	f003 fe33 	bl	8004bac <HAL_FLASH_GetError>
 8000f46:	4603      	mov	r3, r0
 8000f48:	e006      	b.n	8000f58 <Flash_Write_Data+0xb0>
	   while (sofar<numberofwords)
 8000f4a:	88fb      	ldrh	r3, [r7, #6]
 8000f4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f4e:	429a      	cmp	r2, r3
 8000f50:	dbdf      	blt.n	8000f12 <Flash_Write_Data+0x6a>
	     }
	   }

	  /* Lock the Flash to disable the flash control register access (recommended
	     to protect the FLASH memory against possible unwanted operation) *********/
	  HAL_FLASH_Lock();
 8000f52:	f003 fe1b 	bl	8004b8c <HAL_FLASH_Lock>

	   return 0;
 8000f56:	2300      	movs	r3, #0
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3728      	adds	r7, #40	; 0x28
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bdb0      	pop	{r4, r5, r7, pc}
 8000f60:	200000ac 	.word	0x200000ac

08000f64 <Flash_Read_Data>:


void Flash_Read_Data (uint32_t StartSectorAddress, uint32_t *RxBuf, uint16_t numberofwords)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b085      	sub	sp, #20
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	60f8      	str	r0, [r7, #12]
 8000f6c:	60b9      	str	r1, [r7, #8]
 8000f6e:	4613      	mov	r3, r2
 8000f70:	80fb      	strh	r3, [r7, #6]
	while (1)
	{

		*RxBuf = *(__IO uint32_t *)StartSectorAddress;
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	68bb      	ldr	r3, [r7, #8]
 8000f78:	601a      	str	r2, [r3, #0]
		StartSectorAddress += 4;
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	3304      	adds	r3, #4
 8000f7e:	60fb      	str	r3, [r7, #12]
		RxBuf++;
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	3304      	adds	r3, #4
 8000f84:	60bb      	str	r3, [r7, #8]
		if (!(numberofwords--)) break;
 8000f86:	88fb      	ldrh	r3, [r7, #6]
 8000f88:	1e5a      	subs	r2, r3, #1
 8000f8a:	80fa      	strh	r2, [r7, #6]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d000      	beq.n	8000f92 <Flash_Read_Data+0x2e>
		*RxBuf = *(__IO uint32_t *)StartSectorAddress;
 8000f90:	e7ef      	b.n	8000f72 <Flash_Read_Data+0xe>
		if (!(numberofwords--)) break;
 8000f92:	bf00      	nop
	}
}
 8000f94:	bf00      	nop
 8000f96:	3714      	adds	r7, #20
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr

08000fa0 <RingAdd>:


/* Ring Buffer functions */
// This function must be called only after disabling USART RX interrupt or inside of the RX interrupt
void RingAdd(modbusRingBuffer_t *xRingBuffer, uint8_t u8Val)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	460b      	mov	r3, r1
 8000faa:	70fb      	strb	r3, [r7, #3]

	xRingBuffer->uxBuffer[xRingBuffer->u8end] = u8Val;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	78fa      	ldrb	r2, [r7, #3]
 8000fb8:	545a      	strb	r2, [r3, r1]
	xRingBuffer->u8end = (xRingBuffer->u8end + 1) % MAX_BUFFER;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	425a      	negs	r2, r3
 8000fc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000fc8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000fcc:	bf58      	it	pl
 8000fce:	4253      	negpl	r3, r2
 8000fd0:	b2da      	uxtb	r2, r3
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	if (xRingBuffer->u8available == MAX_BUFFER)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8000fde:	2b80      	cmp	r3, #128	; 0x80
 8000fe0:	d113      	bne.n	800100a <RingAdd+0x6a>
	{
		xRingBuffer->overflow = true;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	425a      	negs	r2, r3
 8000ff4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000ff8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000ffc:	bf58      	it	pl
 8000ffe:	4253      	negpl	r3, r2
 8001000:	b2da      	uxtb	r2, r3
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	{
		xRingBuffer->overflow = false;
		xRingBuffer->u8available++;
	}

}
 8001008:	e00b      	b.n	8001022 <RingAdd+0x82>
		xRingBuffer->overflow = false;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2200      	movs	r2, #0
 800100e:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
		xRingBuffer->u8available++;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8001018:	3301      	adds	r3, #1
 800101a:	b2da      	uxtb	r2, r3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
}
 8001022:	bf00      	nop
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
	...

08001030 <HAL_UART_TxCpltCallback>:
 * Modbus functionality.
 * @ingroup UartHandle UART HAL handler
 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b086      	sub	sp, #24
 8001034:	af02      	add	r7, sp, #8
 8001036:	6078      	str	r0, [r7, #4]
	/* Modbus RTU TX callback BEGIN */
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001038:	2300      	movs	r3, #0
 800103a:	60bb      	str	r3, [r7, #8]
	int i;
	for (i = 0; i < numberHandlers; i++ )
 800103c:	2300      	movs	r3, #0
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	e019      	b.n	8001076 <HAL_UART_TxCpltCallback+0x46>
	{
	   	if (mHandlers[i]->port == huart  )
 8001042:	4a17      	ldr	r2, [pc, #92]	; (80010a0 <HAL_UART_TxCpltCallback+0x70>)
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	687a      	ldr	r2, [r7, #4]
 800104e:	429a      	cmp	r2, r3
 8001050:	d10e      	bne.n	8001070 <HAL_UART_TxCpltCallback+0x40>
	   	{
	   		// notify the end of TX
	   		xTaskNotifyFromISR(mHandlers[i]->myTaskModbusAHandle, 0, eNoAction, &xHigherPriorityTaskWoken);
 8001052:	4a13      	ldr	r2, [pc, #76]	; (80010a0 <HAL_UART_TxCpltCallback+0x70>)
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800105a:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
 800105e:	f107 0308 	add.w	r3, r7, #8
 8001062:	9300      	str	r3, [sp, #0]
 8001064:	2300      	movs	r3, #0
 8001066:	2200      	movs	r2, #0
 8001068:	2100      	movs	r1, #0
 800106a:	f00a fc77 	bl	800b95c <xTaskGenericNotifyFromISR>
	   		break;
 800106e:	e008      	b.n	8001082 <HAL_UART_TxCpltCallback+0x52>
	for (i = 0; i < numberHandlers; i++ )
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	3301      	adds	r3, #1
 8001074:	60fb      	str	r3, [r7, #12]
 8001076:	4b0b      	ldr	r3, [pc, #44]	; (80010a4 <HAL_UART_TxCpltCallback+0x74>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	461a      	mov	r2, r3
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	4293      	cmp	r3, r2
 8001080:	dbdf      	blt.n	8001042 <HAL_UART_TxCpltCallback+0x12>
	   	}

	}
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8001082:	68bb      	ldr	r3, [r7, #8]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d007      	beq.n	8001098 <HAL_UART_TxCpltCallback+0x68>
 8001088:	4b07      	ldr	r3, [pc, #28]	; (80010a8 <HAL_UART_TxCpltCallback+0x78>)
 800108a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	f3bf 8f4f 	dsb	sy
 8001094:	f3bf 8f6f 	isb	sy
	/*
	 * Here you should implement the callback code for other UARTs not used by Modbus
	 *
	 * */

}
 8001098:	bf00      	nop
 800109a:	3710      	adds	r7, #16
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	20013b28 	.word	0x20013b28
 80010a4:	200000c0 	.word	0x200000c0
 80010a8:	e000ed04 	.word	0xe000ed04

080010ac <HAL_UART_RxCpltCallback>:
 * user should implement the correct control flow and verification to maintain
 * Modbus functionality.
 * @ingroup UartHandle UART HAL handler
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 80010ac:	b590      	push	{r4, r7, lr}
 80010ae:	b087      	sub	sp, #28
 80010b0:	af02      	add	r7, sp, #8
 80010b2:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80010b4:	2300      	movs	r3, #0
 80010b6:	60bb      	str	r3, [r7, #8]

	/* Modbus RTU RX callback BEGIN */
    int i;
    for (i = 0; i < numberHandlers; i++ )
 80010b8:	2300      	movs	r3, #0
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	e042      	b.n	8001144 <HAL_UART_RxCpltCallback+0x98>
    {
    	if (mHandlers[i]->port == UartHandle  )
 80010be:	4a2d      	ldr	r2, [pc, #180]	; (8001174 <HAL_UART_RxCpltCallback+0xc8>)
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	687a      	ldr	r2, [r7, #4]
 80010ca:	429a      	cmp	r2, r3
 80010cc:	d137      	bne.n	800113e <HAL_UART_RxCpltCallback+0x92>
    	{

    		if(mHandlers[i]->xTypeHW == USART_HW)
 80010ce:	4a29      	ldr	r2, [pc, #164]	; (8001174 <HAL_UART_RxCpltCallback+0xc8>)
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010d6:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d139      	bne.n	8001152 <HAL_UART_RxCpltCallback+0xa6>
    		{
    			RingAdd(&mHandlers[i]->xBufferRX, mHandlers[i]->dataRX);
 80010de:	4a25      	ldr	r2, [pc, #148]	; (8001174 <HAL_UART_RxCpltCallback+0xc8>)
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010e6:	f103 02bc 	add.w	r2, r3, #188	; 0xbc
 80010ea:	4922      	ldr	r1, [pc, #136]	; (8001174 <HAL_UART_RxCpltCallback+0xc8>)
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80010f2:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 80010f6:	4619      	mov	r1, r3
 80010f8:	4610      	mov	r0, r2
 80010fa:	f7ff ff51 	bl	8000fa0 <RingAdd>
    			HAL_UART_Receive_IT(mHandlers[i]->port, &mHandlers[i]->dataRX, 1);
 80010fe:	4a1d      	ldr	r2, [pc, #116]	; (8001174 <HAL_UART_RxCpltCallback+0xc8>)
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001106:	6858      	ldr	r0, [r3, #4]
 8001108:	4a1a      	ldr	r2, [pc, #104]	; (8001174 <HAL_UART_RxCpltCallback+0xc8>)
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001110:	33a6      	adds	r3, #166	; 0xa6
 8001112:	2201      	movs	r2, #1
 8001114:	4619      	mov	r1, r3
 8001116:	f005 ffd6 	bl	80070c6 <HAL_UART_Receive_IT>
    			xTimerResetFromISR(mHandlers[i]->xTimerT35, &xHigherPriorityTaskWoken);
 800111a:	4a16      	ldr	r2, [pc, #88]	; (8001174 <HAL_UART_RxCpltCallback+0xc8>)
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001122:	f8d3 40b0 	ldr.w	r4, [r3, #176]	; 0xb0
 8001126:	f009 ff47 	bl	800afb8 <xTaskGetTickCountFromISR>
 800112a:	4602      	mov	r2, r0
 800112c:	f107 0308 	add.w	r3, r7, #8
 8001130:	2100      	movs	r1, #0
 8001132:	9100      	str	r1, [sp, #0]
 8001134:	2107      	movs	r1, #7
 8001136:	4620      	mov	r0, r4
 8001138:	f00a fd88 	bl	800bc4c <xTimerGenericCommand>
    		}
    		break;
 800113c:	e009      	b.n	8001152 <HAL_UART_RxCpltCallback+0xa6>
    for (i = 0; i < numberHandlers; i++ )
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	3301      	adds	r3, #1
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	4b0c      	ldr	r3, [pc, #48]	; (8001178 <HAL_UART_RxCpltCallback+0xcc>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	461a      	mov	r2, r3
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	4293      	cmp	r3, r2
 800114e:	dbb6      	blt.n	80010be <HAL_UART_RxCpltCallback+0x12>
 8001150:	e000      	b.n	8001154 <HAL_UART_RxCpltCallback+0xa8>
    		break;
 8001152:	bf00      	nop
    	}
    }
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d007      	beq.n	800116a <HAL_UART_RxCpltCallback+0xbe>
 800115a:	4b08      	ldr	r3, [pc, #32]	; (800117c <HAL_UART_RxCpltCallback+0xd0>)
 800115c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	f3bf 8f4f 	dsb	sy
 8001166:	f3bf 8f6f 	isb	sy
	 * Here you should implement the callback code for other UARTs not used by Modbus
	 *
	 *
	 * */

}
 800116a:	bf00      	nop
 800116c:	3714      	adds	r7, #20
 800116e:	46bd      	mov	sp, r7
 8001170:	bd90      	pop	{r4, r7, pc}
 8001172:	bf00      	nop
 8001174:	20013b28 	.word	0x20013b28
 8001178:	200000c0 	.word	0x200000c0
 800117c:	e000ed04 	.word	0xe000ed04

08001180 <HAL_UART_ErrorCallback>:
 * handled by the HAL
 * */


void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]

 int i;

 for (i = 0; i < numberHandlers; i++ )
 8001188:	2300      	movs	r3, #0
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	e03f      	b.n	800120e <HAL_UART_ErrorCallback+0x8e>
 {
    	if (mHandlers[i]->port == huart  )
 800118e:	4a26      	ldr	r2, [pc, #152]	; (8001228 <HAL_UART_ErrorCallback+0xa8>)
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	687a      	ldr	r2, [r7, #4]
 800119a:	429a      	cmp	r2, r3
 800119c:	d134      	bne.n	8001208 <HAL_UART_ErrorCallback+0x88>
    	{

    		if(mHandlers[i]->xTypeHW == USART_HW_DMA)
 800119e:	4a22      	ldr	r2, [pc, #136]	; (8001228 <HAL_UART_ErrorCallback+0xa8>)
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011a6:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 80011aa:	2b04      	cmp	r3, #4
 80011ac:	d136      	bne.n	800121c <HAL_UART_ErrorCallback+0x9c>
    		{
    			while(HAL_UARTEx_ReceiveToIdle_DMA(mHandlers[i]->port, mHandlers[i]->xBufferRX.uxBuffer, MAX_BUFFER) != HAL_OK)
 80011ae:	e007      	b.n	80011c0 <HAL_UART_ErrorCallback+0x40>
    		    {
    					HAL_UART_DMAStop(mHandlers[i]->port);
 80011b0:	4a1d      	ldr	r2, [pc, #116]	; (8001228 <HAL_UART_ErrorCallback+0xa8>)
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	4618      	mov	r0, r3
 80011bc:	f005 ffb3 	bl	8007126 <HAL_UART_DMAStop>
    			while(HAL_UARTEx_ReceiveToIdle_DMA(mHandlers[i]->port, mHandlers[i]->xBufferRX.uxBuffer, MAX_BUFFER) != HAL_OK)
 80011c0:	4a19      	ldr	r2, [pc, #100]	; (8001228 <HAL_UART_ErrorCallback+0xa8>)
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011c8:	6858      	ldr	r0, [r3, #4]
 80011ca:	4a17      	ldr	r2, [pc, #92]	; (8001228 <HAL_UART_ErrorCallback+0xa8>)
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011d2:	33bc      	adds	r3, #188	; 0xbc
 80011d4:	2280      	movs	r2, #128	; 0x80
 80011d6:	4619      	mov	r1, r3
 80011d8:	f006 f824 	bl	8007224 <HAL_UARTEx_ReceiveToIdle_DMA>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d1e6      	bne.n	80011b0 <HAL_UART_ErrorCallback+0x30>
   				}
				__HAL_DMA_DISABLE_IT(mHandlers[i]->port->hdmarx, DMA_IT_HT); // we don't need half-transfer interrupt
 80011e2:	4a11      	ldr	r2, [pc, #68]	; (8001228 <HAL_UART_ErrorCallback+0xa8>)
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	490d      	ldr	r1, [pc, #52]	; (8001228 <HAL_UART_ErrorCallback+0xa8>)
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f022 0208 	bic.w	r2, r2, #8
 8001204:	601a      	str	r2, [r3, #0]

    		}

    		break;
 8001206:	e009      	b.n	800121c <HAL_UART_ErrorCallback+0x9c>
 for (i = 0; i < numberHandlers; i++ )
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	3301      	adds	r3, #1
 800120c:	60fb      	str	r3, [r7, #12]
 800120e:	4b07      	ldr	r3, [pc, #28]	; (800122c <HAL_UART_ErrorCallback+0xac>)
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	461a      	mov	r2, r3
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	4293      	cmp	r3, r2
 8001218:	dbb9      	blt.n	800118e <HAL_UART_ErrorCallback+0xe>
    	}
   }
}
 800121a:	e000      	b.n	800121e <HAL_UART_ErrorCallback+0x9e>
    		break;
 800121c:	bf00      	nop
}
 800121e:	bf00      	nop
 8001220:	3710      	adds	r7, #16
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	20013b28 	.word	0x20013b28
 800122c:	200000c0 	.word	0x200000c0

08001230 <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b086      	sub	sp, #24
 8001234:	af02      	add	r7, sp, #8
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	460b      	mov	r3, r1
 800123a:	807b      	strh	r3, [r7, #2]
	    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800123c:	2300      	movs	r3, #0
 800123e:	60bb      	str	r3, [r7, #8]
		/* Modbus RTU RX callback BEGIN */
	    int i;
	    for (i = 0; i < numberHandlers; i++ )
 8001240:	2300      	movs	r3, #0
 8001242:	60fb      	str	r3, [r7, #12]
 8001244:	e05f      	b.n	8001306 <HAL_UARTEx_RxEventCallback+0xd6>
	    {
	    	if (mHandlers[i]->port == huart  )
 8001246:	4a3b      	ldr	r2, [pc, #236]	; (8001334 <HAL_UARTEx_RxEventCallback+0x104>)
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	687a      	ldr	r2, [r7, #4]
 8001252:	429a      	cmp	r2, r3
 8001254:	d154      	bne.n	8001300 <HAL_UARTEx_RxEventCallback+0xd0>
	    	{


	    		if(mHandlers[i]->xTypeHW == USART_HW_DMA)
 8001256:	4a37      	ldr	r2, [pc, #220]	; (8001334 <HAL_UARTEx_RxEventCallback+0x104>)
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800125e:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8001262:	2b04      	cmp	r3, #4
 8001264:	d156      	bne.n	8001314 <HAL_UARTEx_RxEventCallback+0xe4>
	    		{
	    			if(Size) //check if we have received any byte
 8001266:	887b      	ldrh	r3, [r7, #2]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d053      	beq.n	8001314 <HAL_UARTEx_RxEventCallback+0xe4>
	    			{
		    				mHandlers[i]->xBufferRX.u8available = Size;
 800126c:	4a31      	ldr	r2, [pc, #196]	; (8001334 <HAL_UARTEx_RxEventCallback+0x104>)
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001274:	887a      	ldrh	r2, [r7, #2]
 8001276:	b2d2      	uxtb	r2, r2
 8001278:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
		    				mHandlers[i]->xBufferRX.overflow = false;
 800127c:	4a2d      	ldr	r2, [pc, #180]	; (8001334 <HAL_UARTEx_RxEventCallback+0x104>)
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001284:	2200      	movs	r2, #0
 8001286:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f

		    				while(HAL_UARTEx_ReceiveToIdle_DMA(mHandlers[i]->port, mHandlers[i]->xBufferRX.uxBuffer, MAX_BUFFER) != HAL_OK)
 800128a:	e007      	b.n	800129c <HAL_UARTEx_RxEventCallback+0x6c>
		    				{
		    					HAL_UART_DMAStop(mHandlers[i]->port);
 800128c:	4a29      	ldr	r2, [pc, #164]	; (8001334 <HAL_UARTEx_RxEventCallback+0x104>)
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	4618      	mov	r0, r3
 8001298:	f005 ff45 	bl	8007126 <HAL_UART_DMAStop>
		    				while(HAL_UARTEx_ReceiveToIdle_DMA(mHandlers[i]->port, mHandlers[i]->xBufferRX.uxBuffer, MAX_BUFFER) != HAL_OK)
 800129c:	4a25      	ldr	r2, [pc, #148]	; (8001334 <HAL_UARTEx_RxEventCallback+0x104>)
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012a4:	6858      	ldr	r0, [r3, #4]
 80012a6:	4a23      	ldr	r2, [pc, #140]	; (8001334 <HAL_UARTEx_RxEventCallback+0x104>)
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ae:	33bc      	adds	r3, #188	; 0xbc
 80012b0:	2280      	movs	r2, #128	; 0x80
 80012b2:	4619      	mov	r1, r3
 80012b4:	f005 ffb6 	bl	8007224 <HAL_UARTEx_ReceiveToIdle_DMA>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d1e6      	bne.n	800128c <HAL_UARTEx_RxEventCallback+0x5c>

		    				}
		    				__HAL_DMA_DISABLE_IT(mHandlers[i]->port->hdmarx, DMA_IT_HT); // we don't need half-transfer interrupt
 80012be:	4a1d      	ldr	r2, [pc, #116]	; (8001334 <HAL_UARTEx_RxEventCallback+0x104>)
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	4919      	ldr	r1, [pc, #100]	; (8001334 <HAL_UARTEx_RxEventCallback+0x104>)
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f022 0208 	bic.w	r2, r2, #8
 80012e0:	601a      	str	r2, [r3, #0]

		    				xTaskNotifyFromISR(mHandlers[i]->myTaskModbusAHandle, 0 , eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 80012e2:	4a14      	ldr	r2, [pc, #80]	; (8001334 <HAL_UARTEx_RxEventCallback+0x104>)
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ea:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
 80012ee:	f107 0308 	add.w	r3, r7, #8
 80012f2:	9300      	str	r3, [sp, #0]
 80012f4:	2300      	movs	r3, #0
 80012f6:	2203      	movs	r2, #3
 80012f8:	2100      	movs	r1, #0
 80012fa:	f00a fb2f 	bl	800b95c <xTaskGenericNotifyFromISR>
	    			}
	    		}

	    		break;
 80012fe:	e009      	b.n	8001314 <HAL_UARTEx_RxEventCallback+0xe4>
	    for (i = 0; i < numberHandlers; i++ )
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	3301      	adds	r3, #1
 8001304:	60fb      	str	r3, [r7, #12]
 8001306:	4b0c      	ldr	r3, [pc, #48]	; (8001338 <HAL_UARTEx_RxEventCallback+0x108>)
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	461a      	mov	r2, r3
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	4293      	cmp	r3, r2
 8001310:	db99      	blt.n	8001246 <HAL_UARTEx_RxEventCallback+0x16>
 8001312:	e000      	b.n	8001316 <HAL_UARTEx_RxEventCallback+0xe6>
	    		break;
 8001314:	bf00      	nop
	    	}
	    }
	    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d007      	beq.n	800132c <HAL_UARTEx_RxEventCallback+0xfc>
 800131c:	4b07      	ldr	r3, [pc, #28]	; (800133c <HAL_UARTEx_RxEventCallback+0x10c>)
 800131e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	f3bf 8f4f 	dsb	sy
 8001328:	f3bf 8f6f 	isb	sy
}
 800132c:	bf00      	nop
 800132e:	3710      	adds	r7, #16
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	20013b28 	.word	0x20013b28
 8001338:	200000c0 	.word	0x200000c0
 800133c:	e000ed04 	.word	0xe000ed04

08001340 <open_damper>:
#define OPENING_TIME 45000

uint32_t timer_damper;

void open_damper()
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
    if (state_damper == 0)
 8001344:	4b0b      	ldr	r3, [pc, #44]	; (8001374 <open_damper+0x34>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d110      	bne.n	800136e <open_damper+0x2e>
    {
    	state_damper = 1;
 800134c:	4b09      	ldr	r3, [pc, #36]	; (8001374 <open_damper+0x34>)
 800134e:	2201      	movs	r2, #1
 8001350:	701a      	strb	r2, [r3, #0]
    	timer_damper = HAL_GetTick(); // запуск таймера
 8001352:	f001 fcd3 	bl	8002cfc <HAL_GetTick>
 8001356:	4603      	mov	r3, r0
 8001358:	4a07      	ldr	r2, [pc, #28]	; (8001378 <open_damper+0x38>)
 800135a:	6013      	str	r3, [r2, #0]
    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 800135c:	2201      	movs	r2, #1
 800135e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001362:	4806      	ldr	r0, [pc, #24]	; (800137c <open_damper+0x3c>)
 8001364:	f004 f834 	bl	80053d0 <HAL_GPIO_WritePin>
        DEBUG_DAMP("opens damper\n");
 8001368:	4805      	ldr	r0, [pc, #20]	; (8001380 <open_damper+0x40>)
 800136a:	f018 fa69 	bl	8019840 <puts>
    }
}
 800136e:	bf00      	nop
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	20013b35 	.word	0x20013b35
 8001378:	20013b30 	.word	0x20013b30
 800137c:	40020c00 	.word	0x40020c00
 8001380:	0801a108 	.word	0x0801a108

08001384 <close_damper>:

void close_damper()
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
	state_damper = 0;
 8001388:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <close_damper+0x20>)
 800138a:	2200      	movs	r2, #0
 800138c:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 800138e:	2200      	movs	r2, #0
 8001390:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001394:	4804      	ldr	r0, [pc, #16]	; (80013a8 <close_damper+0x24>)
 8001396:	f004 f81b 	bl	80053d0 <HAL_GPIO_WritePin>
	DEBUG_DAMP("close damper\n");
 800139a:	4804      	ldr	r0, [pc, #16]	; (80013ac <close_damper+0x28>)
 800139c:	f018 fa50 	bl	8019840 <puts>
}
 80013a0:	bf00      	nop
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	20013b35 	.word	0x20013b35
 80013a8:	40020c00 	.word	0x40020c00
 80013ac:	0801a120 	.word	0x0801a120

080013b0 <DamperTask>:

void DamperTask(void *argument)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
    for(;;)
    {
    	if(device->state == ON && device->error_stop_hot == false && device->error_stop_cold == false &&
 80013b8:	4b29      	ldr	r3, [pc, #164]	; (8001460 <DamperTask+0xb0>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	789b      	ldrb	r3, [r3, #2]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d044      	beq.n	800144c <DamperTask+0x9c>
 80013c2:	4b27      	ldr	r3, [pc, #156]	; (8001460 <DamperTask+0xb0>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	795b      	ldrb	r3, [r3, #5]
 80013c8:	f083 0301 	eor.w	r3, r3, #1
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d03c      	beq.n	800144c <DamperTask+0x9c>
 80013d2:	4b23      	ldr	r3, [pc, #140]	; (8001460 <DamperTask+0xb0>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	799b      	ldrb	r3, [r3, #6]
 80013d8:	f083 0301 	eor.w	r3, r3, #1
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d034      	beq.n	800144c <DamperTask+0x9c>
            sensors_data->out_state && sensors_data->in_state && device->error_ds18_bus == false && device->error_ds18_lack == false && ds_count == 2)
 80013e2:	4b20      	ldr	r3, [pc, #128]	; (8001464 <DamperTask+0xb4>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	7f1b      	ldrb	r3, [r3, #28]
    	if(device->state == ON && device->error_stop_hot == false && device->error_stop_cold == false &&
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d02f      	beq.n	800144c <DamperTask+0x9c>
            sensors_data->out_state && sensors_data->in_state && device->error_ds18_bus == false && device->error_ds18_lack == false && ds_count == 2)
 80013ec:	4b1d      	ldr	r3, [pc, #116]	; (8001464 <DamperTask+0xb4>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	7f5b      	ldrb	r3, [r3, #29]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d02a      	beq.n	800144c <DamperTask+0x9c>
 80013f6:	4b1a      	ldr	r3, [pc, #104]	; (8001460 <DamperTask+0xb0>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	79db      	ldrb	r3, [r3, #7]
 80013fc:	f083 0301 	eor.w	r3, r3, #1
 8001400:	b2db      	uxtb	r3, r3
 8001402:	2b00      	cmp	r3, #0
 8001404:	d022      	beq.n	800144c <DamperTask+0x9c>
 8001406:	4b16      	ldr	r3, [pc, #88]	; (8001460 <DamperTask+0xb0>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	7a1b      	ldrb	r3, [r3, #8]
 800140c:	f083 0301 	eor.w	r3, r3, #1
 8001410:	b2db      	uxtb	r3, r3
 8001412:	2b00      	cmp	r3, #0
 8001414:	d01a      	beq.n	800144c <DamperTask+0x9c>
 8001416:	4b14      	ldr	r3, [pc, #80]	; (8001468 <DamperTask+0xb8>)
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	2b02      	cmp	r3, #2
 800141c:	d116      	bne.n	800144c <DamperTask+0x9c>
    	{
    		open_damper();
 800141e:	f7ff ff8f 	bl	8001340 <open_damper>
    		if(state_damper == 1 && ((HAL_GetTick() - timer_damper) > OPENING_TIME))
 8001422:	4b12      	ldr	r3, [pc, #72]	; (800146c <DamperTask+0xbc>)
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	2b01      	cmp	r3, #1
 8001428:	d113      	bne.n	8001452 <DamperTask+0xa2>
 800142a:	f001 fc67 	bl	8002cfc <HAL_GetTick>
 800142e:	4602      	mov	r2, r0
 8001430:	4b0f      	ldr	r3, [pc, #60]	; (8001470 <DamperTask+0xc0>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	f64a 72c8 	movw	r2, #45000	; 0xafc8
 800143a:	4293      	cmp	r3, r2
 800143c:	d909      	bls.n	8001452 <DamperTask+0xa2>
    		{
    			state_damper = 2;
 800143e:	4b0b      	ldr	r3, [pc, #44]	; (800146c <DamperTask+0xbc>)
 8001440:	2202      	movs	r2, #2
 8001442:	701a      	strb	r2, [r3, #0]
    			DEBUG_DAMP("opened damper\n");
 8001444:	480b      	ldr	r0, [pc, #44]	; (8001474 <DamperTask+0xc4>)
 8001446:	f018 f9fb 	bl	8019840 <puts>
    		if(state_damper == 1 && ((HAL_GetTick() - timer_damper) > OPENING_TIME))
 800144a:	e002      	b.n	8001452 <DamperTask+0xa2>
    		}
    	}
        else
        	close_damper();
 800144c:	f7ff ff9a 	bl	8001384 <close_damper>
 8001450:	e000      	b.n	8001454 <DamperTask+0xa4>
    		if(state_damper == 1 && ((HAL_GetTick() - timer_damper) > OPENING_TIME))
 8001452:	bf00      	nop
        osDelay(1000);
 8001454:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001458:	f007 fd90 	bl	8008f7c <osDelay>
    	if(device->state == ON && device->error_stop_hot == false && device->error_stop_cold == false &&
 800145c:	e7ac      	b.n	80013b8 <DamperTask+0x8>
 800145e:	bf00      	nop
 8001460:	20013b1c 	.word	0x20013b1c
 8001464:	20013b24 	.word	0x20013b24
 8001468:	20013b34 	.word	0x20013b34
 800146c:	20013b35 	.word	0x20013b35
 8001470:	20013b30 	.word	0x20013b30
 8001474:	0801a138 	.word	0x0801a138

08001478 <start_failure_led>:
    if (service_response == 4)
    	HAL_GPIO_TogglePin(LED_FAILURE_GPIO_Port, LED_FAILURE_Pin);
}

void start_failure_led()
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
	if (device->error_temp_hot || device->error_temp_cold || device->error_stop_hot || device->error_stop_cold ||
 800147c:	4b15      	ldr	r3, [pc, #84]	; (80014d4 <start_failure_led+0x5c>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	78db      	ldrb	r3, [r3, #3]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d118      	bne.n	80014b8 <start_failure_led+0x40>
 8001486:	4b13      	ldr	r3, [pc, #76]	; (80014d4 <start_failure_led+0x5c>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	791b      	ldrb	r3, [r3, #4]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d113      	bne.n	80014b8 <start_failure_led+0x40>
 8001490:	4b10      	ldr	r3, [pc, #64]	; (80014d4 <start_failure_led+0x5c>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	795b      	ldrb	r3, [r3, #5]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d10e      	bne.n	80014b8 <start_failure_led+0x40>
 800149a:	4b0e      	ldr	r3, [pc, #56]	; (80014d4 <start_failure_led+0x5c>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	799b      	ldrb	r3, [r3, #6]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d109      	bne.n	80014b8 <start_failure_led+0x40>
        device->error_ds18_bus || device->error_ds18_lack)
 80014a4:	4b0b      	ldr	r3, [pc, #44]	; (80014d4 <start_failure_led+0x5c>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	79db      	ldrb	r3, [r3, #7]
	if (device->error_temp_hot || device->error_temp_cold || device->error_stop_hot || device->error_stop_cold ||
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d104      	bne.n	80014b8 <start_failure_led+0x40>
        device->error_ds18_bus || device->error_ds18_lack)
 80014ae:	4b09      	ldr	r3, [pc, #36]	; (80014d4 <start_failure_led+0x5c>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	7a1b      	ldrb	r3, [r3, #8]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d005      	beq.n	80014c4 <start_failure_led+0x4c>
		HAL_GPIO_WritePin(LED_FAILURE_GPIO_Port, LED_FAILURE_Pin, GPIO_PIN_SET);
 80014b8:	2201      	movs	r2, #1
 80014ba:	2180      	movs	r1, #128	; 0x80
 80014bc:	4806      	ldr	r0, [pc, #24]	; (80014d8 <start_failure_led+0x60>)
 80014be:	f003 ff87 	bl	80053d0 <HAL_GPIO_WritePin>
 80014c2:	e005      	b.n	80014d0 <start_failure_led+0x58>
    else
    	HAL_GPIO_WritePin(LED_FAILURE_GPIO_Port, LED_FAILURE_Pin, GPIO_PIN_RESET);
 80014c4:	2200      	movs	r2, #0
 80014c6:	2180      	movs	r1, #128	; 0x80
 80014c8:	4803      	ldr	r0, [pc, #12]	; (80014d8 <start_failure_led+0x60>)
 80014ca:	f003 ff81 	bl	80053d0 <HAL_GPIO_WritePin>
}
 80014ce:	bf00      	nop
 80014d0:	bf00      	nop
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	20013b1c 	.word	0x20013b1c
 80014d8:	40020c00 	.word	0x40020c00

080014dc <start_work_led>:

void start_work_led()
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
	if(mqtt_status)
 80014e0:	4b08      	ldr	r3, [pc, #32]	; (8001504 <start_work_led+0x28>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d005      	beq.n	80014f4 <start_work_led+0x18>
		HAL_GPIO_WritePin(LED_WORK_GPIO_Port, LED_WORK_Pin, GPIO_PIN_SET);
 80014e8:	2201      	movs	r2, #1
 80014ea:	2140      	movs	r1, #64	; 0x40
 80014ec:	4806      	ldr	r0, [pc, #24]	; (8001508 <start_work_led+0x2c>)
 80014ee:	f003 ff6f 	bl	80053d0 <HAL_GPIO_WritePin>
    else
    	HAL_GPIO_WritePin(LED_WORK_GPIO_Port, LED_WORK_Pin, GPIO_PIN_RESET);
}
 80014f2:	e004      	b.n	80014fe <start_work_led+0x22>
    	HAL_GPIO_WritePin(LED_WORK_GPIO_Port, LED_WORK_Pin, GPIO_PIN_RESET);
 80014f4:	2200      	movs	r2, #0
 80014f6:	2140      	movs	r1, #64	; 0x40
 80014f8:	4803      	ldr	r0, [pc, #12]	; (8001508 <start_work_led+0x2c>)
 80014fa:	f003 ff69 	bl	80053d0 <HAL_GPIO_WritePin>
}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	20013aac 	.word	0x20013aac
 8001508:	40020c00 	.word	0x40020c00

0800150c <start_link_led>:

void start_link_led()
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
    if(netif_link)
 8001510:	4b0d      	ldr	r3, [pc, #52]	; (8001548 <start_link_led+0x3c>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d00f      	beq.n	8001538 <start_link_led+0x2c>
    {
        if(mqtt_status)
 8001518:	4b0c      	ldr	r3, [pc, #48]	; (800154c <start_link_led+0x40>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d007      	beq.n	8001530 <start_link_led+0x24>
        {
        	link_IP = false;
 8001520:	4b0b      	ldr	r3, [pc, #44]	; (8001550 <start_link_led+0x44>)
 8001522:	2200      	movs	r2, #0
 8001524:	701a      	strb	r2, [r3, #0]
        	HAL_GPIO_TogglePin(LED_LINK_GPIO_Port, LED_LINK_Pin);
 8001526:	2120      	movs	r1, #32
 8001528:	480a      	ldr	r0, [pc, #40]	; (8001554 <start_link_led+0x48>)
 800152a:	f003 ff6a 	bl	8005402 <HAL_GPIO_TogglePin>
        else
        	link_IP = true;
    }
    else
    	HAL_GPIO_WritePin(LED_LINK_GPIO_Port, LED_LINK_Pin, GPIO_PIN_RESET);
}
 800152e:	e008      	b.n	8001542 <start_link_led+0x36>
        	link_IP = true;
 8001530:	4b07      	ldr	r3, [pc, #28]	; (8001550 <start_link_led+0x44>)
 8001532:	2201      	movs	r2, #1
 8001534:	701a      	strb	r2, [r3, #0]
}
 8001536:	e004      	b.n	8001542 <start_link_led+0x36>
    	HAL_GPIO_WritePin(LED_LINK_GPIO_Port, LED_LINK_Pin, GPIO_PIN_RESET);
 8001538:	2200      	movs	r2, #0
 800153a:	2120      	movs	r1, #32
 800153c:	4805      	ldr	r0, [pc, #20]	; (8001554 <start_link_led+0x48>)
 800153e:	f003 ff47 	bl	80053d0 <HAL_GPIO_WritePin>
}
 8001542:	bf00      	nop
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	20013ab4 	.word	0x20013ab4
 800154c:	20013aac 	.word	0x20013aac
 8001550:	20013b36 	.word	0x20013b36
 8001554:	40020c00 	.word	0x40020c00

08001558 <start_service_led>:

void start_service_led()
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
	if(service_response == 1)//вошли в сервисный режим
 800155c:	4b23      	ldr	r3, [pc, #140]	; (80015ec <start_service_led+0x94>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	2b01      	cmp	r3, #1
 8001562:	d10e      	bne.n	8001582 <start_service_led+0x2a>
    {
		DEBUG_LED_BUT_CONTROL("service_response = 1\n");
 8001564:	4822      	ldr	r0, [pc, #136]	; (80015f0 <start_service_led+0x98>)
 8001566:	f018 f96b 	bl	8019840 <puts>
		HAL_GPIO_TogglePin(LED_LINK_GPIO_Port, LED_LINK_Pin);
 800156a:	2120      	movs	r1, #32
 800156c:	4821      	ldr	r0, [pc, #132]	; (80015f4 <start_service_led+0x9c>)
 800156e:	f003 ff48 	bl	8005402 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED_WORK_GPIO_Port, LED_WORK_Pin);
 8001572:	2140      	movs	r1, #64	; 0x40
 8001574:	481f      	ldr	r0, [pc, #124]	; (80015f4 <start_service_led+0x9c>)
 8001576:	f003 ff44 	bl	8005402 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED_FAILURE_GPIO_Port, LED_FAILURE_Pin);
 800157a:	2180      	movs	r1, #128	; 0x80
 800157c:	481d      	ldr	r0, [pc, #116]	; (80015f4 <start_service_led+0x9c>)
 800157e:	f003 ff40 	bl	8005402 <HAL_GPIO_TogglePin>
    }
    if(service_response == 3)//сброс ошибок
 8001582:	4b1a      	ldr	r3, [pc, #104]	; (80015ec <start_service_led+0x94>)
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	2b03      	cmp	r3, #3
 8001588:	d10c      	bne.n	80015a4 <start_service_led+0x4c>
    {
    	DEBUG_LED_BUT_CONTROL("service_response = 3\n");
 800158a:	481b      	ldr	r0, [pc, #108]	; (80015f8 <start_service_led+0xa0>)
 800158c:	f018 f958 	bl	8019840 <puts>
    	HAL_GPIO_WritePin(LED_LINK_GPIO_Port, LED_LINK_Pin, GPIO_PIN_RESET);
 8001590:	2200      	movs	r2, #0
 8001592:	2120      	movs	r1, #32
 8001594:	4817      	ldr	r0, [pc, #92]	; (80015f4 <start_service_led+0x9c>)
 8001596:	f003 ff1b 	bl	80053d0 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(LED_FAILURE_GPIO_Port, LED_FAILURE_Pin, GPIO_PIN_RESET);
 800159a:	2200      	movs	r2, #0
 800159c:	2180      	movs	r1, #128	; 0x80
 800159e:	4815      	ldr	r0, [pc, #84]	; (80015f4 <start_service_led+0x9c>)
 80015a0:	f003 ff16 	bl	80053d0 <HAL_GPIO_WritePin>
    }
    if(service_response == 4)//сброс памяти
 80015a4:	4b11      	ldr	r3, [pc, #68]	; (80015ec <start_service_led+0x94>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	2b04      	cmp	r3, #4
 80015aa:	d10c      	bne.n	80015c6 <start_service_led+0x6e>
    {
    	DEBUG_LED_BUT_CONTROL("service_response = 4\n");
 80015ac:	4813      	ldr	r0, [pc, #76]	; (80015fc <start_service_led+0xa4>)
 80015ae:	f018 f947 	bl	8019840 <puts>
    	HAL_GPIO_WritePin(LED_LINK_GPIO_Port, LED_LINK_Pin, GPIO_PIN_RESET);
 80015b2:	2200      	movs	r2, #0
 80015b4:	2120      	movs	r1, #32
 80015b6:	480f      	ldr	r0, [pc, #60]	; (80015f4 <start_service_led+0x9c>)
 80015b8:	f003 ff0a 	bl	80053d0 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(LED_WORK_GPIO_Port, LED_WORK_Pin, GPIO_PIN_RESET);
 80015bc:	2200      	movs	r2, #0
 80015be:	2140      	movs	r1, #64	; 0x40
 80015c0:	480c      	ldr	r0, [pc, #48]	; (80015f4 <start_service_led+0x9c>)
 80015c2:	f003 ff05 	bl	80053d0 <HAL_GPIO_WritePin>
    }
	if((service_response > 0) && ((HAL_GetTick() - timme) > 10000))
 80015c6:	4b09      	ldr	r3, [pc, #36]	; (80015ec <start_service_led+0x94>)
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d00c      	beq.n	80015e8 <start_service_led+0x90>
 80015ce:	f001 fb95 	bl	8002cfc <HAL_GetTick>
 80015d2:	4602      	mov	r2, r0
 80015d4:	4b0a      	ldr	r3, [pc, #40]	; (8001600 <start_service_led+0xa8>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	f242 7210 	movw	r2, #10000	; 0x2710
 80015de:	4293      	cmp	r3, r2
 80015e0:	d902      	bls.n	80015e8 <start_service_led+0x90>
		service_response = 0;
 80015e2:	4b02      	ldr	r3, [pc, #8]	; (80015ec <start_service_led+0x94>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	701a      	strb	r2, [r3, #0]
}
 80015e8:	bf00      	nop
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	200000c8 	.word	0x200000c8
 80015f0:	0801a150 	.word	0x0801a150
 80015f4:	40020c00 	.word	0x40020c00
 80015f8:	0801a17c 	.word	0x0801a17c
 80015fc:	0801a1a8 	.word	0x0801a1a8
 8001600:	200000c4 	.word	0x200000c4

08001604 <LedsTask>:

void LedsTask(void *argument)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
    for (;;)
    {
    	if (service_response == 0)
 800160c:	4b08      	ldr	r3, [pc, #32]	; (8001630 <LedsTask+0x2c>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d106      	bne.n	8001622 <LedsTask+0x1e>
    	{
            start_link_led();
 8001614:	f7ff ff7a 	bl	800150c <start_link_led>
            start_work_led();
 8001618:	f7ff ff60 	bl	80014dc <start_work_led>
            start_failure_led();
 800161c:	f7ff ff2c 	bl	8001478 <start_failure_led>
 8001620:	e001      	b.n	8001626 <LedsTask+0x22>
    	}
    	else
    		start_service_led();
 8001622:	f7ff ff99 	bl	8001558 <start_service_led>
        osDelay(1000);
 8001626:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800162a:	f007 fca7 	bl	8008f7c <osDelay>
    	if (service_response == 0)
 800162e:	e7ed      	b.n	800160c <LedsTask+0x8>
 8001630:	200000c8 	.word	0x200000c8

08001634 <init_ds_devices>:
	get_ds_data();
	mass_temp();
}

void init_ds_devices()
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
	DwtInit();
 8001638:	f7ff f8f0 	bl	800081c <DwtInit>

	OW.DataPin = DS_Pin;
 800163c:	4b15      	ldr	r3, [pc, #84]	; (8001694 <init_ds_devices+0x60>)
 800163e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001642:	819a      	strh	r2, [r3, #12]
	OW.DataPort = DS_GPIO_Port;
 8001644:	4b13      	ldr	r3, [pc, #76]	; (8001694 <init_ds_devices+0x60>)
 8001646:	4a14      	ldr	r2, [pc, #80]	; (8001698 <init_ds_devices+0x64>)
 8001648:	611a      	str	r2, [r3, #16]
	DS.Resolution = DS18B20_Resolution_12bits;
 800164a:	4b14      	ldr	r3, [pc, #80]	; (800169c <init_ds_devices+0x68>)
 800164c:	220c      	movs	r2, #12
 800164e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	DS18B20_Init(&DS, &OW);
 8001652:	4910      	ldr	r1, [pc, #64]	; (8001694 <init_ds_devices+0x60>)
 8001654:	4811      	ldr	r0, [pc, #68]	; (800169c <init_ds_devices+0x68>)
 8001656:	f7ff f8a3 	bl	80007a0 <DS18B20_Init>
	/* Set high temperature alarm on device number 0, 31 Deg C */
	DS18B20_SetTempAlarm(&OW, DS.DevAddr[0], 0, 31);
 800165a:	231f      	movs	r3, #31
 800165c:	2200      	movs	r2, #0
 800165e:	490f      	ldr	r1, [pc, #60]	; (800169c <init_ds_devices+0x68>)
 8001660:	480c      	ldr	r0, [pc, #48]	; (8001694 <init_ds_devices+0x60>)
 8001662:	f7ff f820 	bl	80006a6 <DS18B20_SetTempAlarm>

	OW2.DataPin = DS_Pin2;
 8001666:	4b0e      	ldr	r3, [pc, #56]	; (80016a0 <init_ds_devices+0x6c>)
 8001668:	2240      	movs	r2, #64	; 0x40
 800166a:	819a      	strh	r2, [r3, #12]
	OW2.DataPort = DS_GPIO_Port2;
 800166c:	4b0c      	ldr	r3, [pc, #48]	; (80016a0 <init_ds_devices+0x6c>)
 800166e:	4a0d      	ldr	r2, [pc, #52]	; (80016a4 <init_ds_devices+0x70>)
 8001670:	611a      	str	r2, [r3, #16]
	DS2.Resolution = DS18B20_Resolution_12bits;
 8001672:	4b0d      	ldr	r3, [pc, #52]	; (80016a8 <init_ds_devices+0x74>)
 8001674:	220c      	movs	r2, #12
 8001676:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	/* Set high temperature alarm on device number 0, 31 Deg C */
	DS18B20_Init(&DS2, &OW2);
 800167a:	4909      	ldr	r1, [pc, #36]	; (80016a0 <init_ds_devices+0x6c>)
 800167c:	480a      	ldr	r0, [pc, #40]	; (80016a8 <init_ds_devices+0x74>)
 800167e:	f7ff f88f 	bl	80007a0 <DS18B20_Init>
	DS18B20_SetTempAlarm(&OW2, DS2.DevAddr[0], 0, 60);
 8001682:	233c      	movs	r3, #60	; 0x3c
 8001684:	2200      	movs	r2, #0
 8001686:	4908      	ldr	r1, [pc, #32]	; (80016a8 <init_ds_devices+0x74>)
 8001688:	4805      	ldr	r0, [pc, #20]	; (80016a0 <init_ds_devices+0x6c>)
 800168a:	f7ff f80c 	bl	80006a6 <DS18B20_SetTempAlarm>
}
 800168e:	bf00      	nop
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	20013b50 	.word	0x20013b50
 8001698:	40020c00 	.word	0x40020c00
 800169c:	20013b90 	.word	0x20013b90
 80016a0:	20013b38 	.word	0x20013b38
 80016a4:	40020800 	.word	0x40020800
 80016a8:	20013b64 	.word	0x20013b64
 80016ac:	00000000 	.word	0x00000000

080016b0 <first_init_heaters>:
#include "storage.h"
#include "main.h"
#include <string.h>

void first_init_heaters()
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
    heaters->ten.off_temp = TEN_OFF_TEMP;
 80016b4:	4b1a      	ldr	r3, [pc, #104]	; (8001720 <first_init_heaters+0x70>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	222d      	movs	r2, #45	; 0x2d
 80016ba:	609a      	str	r2, [r3, #8]
    heaters->ten.off_temp_under = TEN_OFF_UNDER;
 80016bc:	4b18      	ldr	r3, [pc, #96]	; (8001720 <first_init_heaters+0x70>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	2205      	movs	r2, #5
 80016c2:	60da      	str	r2, [r3, #12]
    heaters->ten.temp_limit = TEN_TEMP_LIMIT;
 80016c4:	4b16      	ldr	r3, [pc, #88]	; (8001720 <first_init_heaters+0x70>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2219      	movs	r2, #25
 80016ca:	605a      	str	r2, [r3, #4]
    heaters->ten.started_value = TEN_STARTED_VALUE;
 80016cc:	4b14      	ldr	r3, [pc, #80]	; (8001720 <first_init_heaters+0x70>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2203      	movs	r2, #3
 80016d2:	749a      	strb	r2, [r3, #18]
    heaters->ten.power_koef = TEN_POWER_KOEF;
 80016d4:	4b12      	ldr	r3, [pc, #72]	; (8001720 <first_init_heaters+0x70>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2203      	movs	r2, #3
 80016da:	615a      	str	r2, [r3, #20]

    heaters->on_off_ten = ON;
 80016dc:	4b10      	ldr	r3, [pc, #64]	; (8001720 <first_init_heaters+0x70>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2201      	movs	r2, #1
 80016e2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    heaters->update_koef_time = 5000000;
 80016e6:	4b0e      	ldr	r3, [pc, #56]	; (8001720 <first_init_heaters+0x70>)
 80016e8:	6819      	ldr	r1, [r3, #0]
 80016ea:	a30b      	add	r3, pc, #44	; (adr r3, 8001718 <first_init_heaters+0x68>)
 80016ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f0:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    heaters->delta = 1;
 80016f4:	4b0a      	ldr	r3, [pc, #40]	; (8001720 <first_init_heaters+0x70>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80016fc:	61da      	str	r2, [r3, #28]
    heaters->delta_high = 10;
 80016fe:	4b08      	ldr	r3, [pc, #32]	; (8001720 <first_init_heaters+0x70>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a08      	ldr	r2, [pc, #32]	; (8001724 <first_init_heaters+0x74>)
 8001704:	621a      	str	r2, [r3, #32]
    heaters->koef_grow = 50;
 8001706:	4b06      	ldr	r3, [pc, #24]	; (8001720 <first_init_heaters+0x70>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2232      	movs	r2, #50	; 0x32
 800170c:	625a      	str	r2, [r3, #36]	; 0x24
    write_heaters();
 800170e:	f000 f8eb 	bl	80018e8 <write_heaters>
}
 8001712:	bf00      	nop
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	004c4b40 	.word	0x004c4b40
 800171c:	00000000 	.word	0x00000000
 8001720:	200139dc 	.word	0x200139dc
 8001724:	41200000 	.word	0x41200000

08001728 <first_init_wireless>:

void first_init_wireless()
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
	// Настройки брокера Вакио
	wireless_params->vakio_mqtt.host[0] = 0;
 800172c:	4b2c      	ldr	r3, [pc, #176]	; (80017e0 <first_init_wireless+0xb8>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2200      	movs	r2, #0
 8001732:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	wireless_params->vakio_mqtt.login[0] = 0;
 8001736:	4b2a      	ldr	r3, [pc, #168]	; (80017e0 <first_init_wireless+0xb8>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2200      	movs	r2, #0
 800173c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	wireless_params->vakio_mqtt.password[0] = 0;
 8001740:	4b27      	ldr	r3, [pc, #156]	; (80017e0 <first_init_wireless+0xb8>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2200      	movs	r2, #0
 8001746:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	wireless_params->vakio_mqtt.port = DEFAULT_MQTT_PORT;
 800174a:	4b25      	ldr	r3, [pc, #148]	; (80017e0 <first_init_wireless+0xb8>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f240 725b 	movw	r2, #1883	; 0x75b
 8001752:	669a      	str	r2, [r3, #104]	; 0x68
	wireless_params->vakio_mqtt.client_id[0] = 0;
 8001754:	4b22      	ldr	r3, [pc, #136]	; (80017e0 <first_init_wireless+0xb8>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2200      	movs	r2, #0
 800175a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

	// Настройки брокера пользователя
	wireless_params->user_mqtt.host[0] = 0;
 800175e:	4b20      	ldr	r3, [pc, #128]	; (80017e0 <first_init_wireless+0xb8>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	2200      	movs	r2, #0
 8001764:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	wireless_params->user_mqtt.login[0] = 0;
 8001768:	4b1d      	ldr	r3, [pc, #116]	; (80017e0 <first_init_wireless+0xb8>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2200      	movs	r2, #0
 800176e:	701a      	strb	r2, [r3, #0]
	wireless_params->user_mqtt.password[0] = 0;
 8001770:	4b1b      	ldr	r3, [pc, #108]	; (80017e0 <first_init_wireless+0xb8>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2200      	movs	r2, #0
 8001776:	731a      	strb	r2, [r3, #12]
	wireless_params->user_mqtt.port = DEFAULT_MQTT_PORT;
 8001778:	4b19      	ldr	r3, [pc, #100]	; (80017e0 <first_init_wireless+0xb8>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f240 725b 	movw	r2, #1883	; 0x75b
 8001780:	62da      	str	r2, [r3, #44]	; 0x2c
	wireless_params->user_mqtt.client_id[0] = 0;
 8001782:	4b17      	ldr	r3, [pc, #92]	; (80017e0 <first_init_wireless+0xb8>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2200      	movs	r2, #0
 8001788:	761a      	strb	r2, [r3, #24]
	strcpy(wireless_params->user_mqtt.topic, DEFAULT_USER_TOPIC);
 800178a:	4b15      	ldr	r3, [pc, #84]	; (80017e0 <first_init_wireless+0xb8>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	3330      	adds	r3, #48	; 0x30
 8001790:	4a14      	ldr	r2, [pc, #80]	; (80017e4 <first_init_wireless+0xbc>)
 8001792:	6810      	ldr	r0, [r2, #0]
 8001794:	6018      	str	r0, [r3, #0]
 8001796:	8892      	ldrh	r2, [r2, #4]
 8001798:	809a      	strh	r2, [r3, #4]

	// Идентификаторы прибора
	wireless_params->vakio.device_id[0] = 0;
 800179a:	4b11      	ldr	r3, [pc, #68]	; (80017e0 <first_init_wireless+0xb8>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2200      	movs	r2, #0
 80017a0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	wireless_params->vakio.user_id[0] = 0;
 80017a4:	4b0e      	ldr	r3, [pc, #56]	; (80017e0 <first_init_wireless+0xb8>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2200      	movs	r2, #0
 80017aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

	// Тип подключения к брокеру
	wireless_params->mqtt_type = VAKIO_MQTT;
 80017ae:	4b0c      	ldr	r3, [pc, #48]	; (80017e0 <first_init_wireless+0xb8>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	2201      	movs	r2, #1
 80017b4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

	// Айпи сервера
	wireless_params->server_ip[0] = 0;
 80017b8:	4b09      	ldr	r3, [pc, #36]	; (80017e0 <first_init_wireless+0xb8>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2200      	movs	r2, #0
 80017be:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
	wireless_params->vakio_mqtt_connect_ip = false;
 80017c2:	4b07      	ldr	r3, [pc, #28]	; (80017e0 <first_init_wireless+0xb8>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	2200      	movs	r2, #0
 80017c8:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
	wireless_params->vakio_mqtt_connect_ip;
	wireless_params->soft_ap_off_time = MIN_15_OFF_AP;
 80017cc:	4b04      	ldr	r3, [pc, #16]	; (80017e0 <first_init_wireless+0xb8>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2200      	movs	r2, #0
 80017d2:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
	write_wireless_params();
 80017d6:	f000 f867 	bl	80018a8 <write_wireless_params>
}
 80017da:	bf00      	nop
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	20013b20 	.word	0x20013b20
 80017e4:	0801a1d4 	.word	0x0801a1d4

080017e8 <first_init_device>:

void first_init_device()
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
	device->check_1_0_0 = CHECK_VALUE_1_0_0;
 80017ee:	4b2b      	ldr	r3, [pc, #172]	; (800189c <first_init_device+0xb4>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	2201      	movs	r2, #1
 80017f4:	72da      	strb	r2, [r3, #11]
	device->state = OFF;
 80017f6:	4b29      	ldr	r3, [pc, #164]	; (800189c <first_init_device+0xb4>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	2200      	movs	r2, #0
 80017fc:	709a      	strb	r2, [r3, #2]
	device->firmware_flag = false;
 80017fe:	4b27      	ldr	r3, [pc, #156]	; (800189c <first_init_device+0xb4>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	2200      	movs	r2, #0
 8001804:	701a      	strb	r2, [r3, #0]
	device->error_temp_hot = false;
 8001806:	4b25      	ldr	r3, [pc, #148]	; (800189c <first_init_device+0xb4>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	2200      	movs	r2, #0
 800180c:	70da      	strb	r2, [r3, #3]
	device->error_temp_cold = false;
 800180e:	4b23      	ldr	r3, [pc, #140]	; (800189c <first_init_device+0xb4>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	2200      	movs	r2, #0
 8001814:	711a      	strb	r2, [r3, #4]
	device->error_stop_hot = false;
 8001816:	4b21      	ldr	r3, [pc, #132]	; (800189c <first_init_device+0xb4>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	2200      	movs	r2, #0
 800181c:	715a      	strb	r2, [r3, #5]
	device->error_stop_cold = false;
 800181e:	4b1f      	ldr	r3, [pc, #124]	; (800189c <first_init_device+0xb4>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	2200      	movs	r2, #0
 8001824:	719a      	strb	r2, [r3, #6]
	device->mode = INFLOW_MODE;
 8001826:	4b1d      	ldr	r3, [pc, #116]	; (800189c <first_init_device+0xb4>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	2200      	movs	r2, #0
 800182c:	731a      	strb	r2, [r3, #12]
	device->last_mode = INFLOW_MODE;
 800182e:	4b1b      	ldr	r3, [pc, #108]	; (800189c <first_init_device+0xb4>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2200      	movs	r2, #0
 8001834:	735a      	strb	r2, [r3, #13]
	device->inflow_speed = 1;
 8001836:	4b19      	ldr	r3, [pc, #100]	; (800189c <first_init_device+0xb4>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	2201      	movs	r2, #1
 800183c:	739a      	strb	r2, [r3, #14]
	uint8_t speed_arr[8] = SPEED_ARR_DEFAUL;
 800183e:	4a18      	ldr	r2, [pc, #96]	; (80018a0 <first_init_device+0xb8>)
 8001840:	463b      	mov	r3, r7
 8001842:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001846:	e883 0003 	stmia.w	r3, {r0, r1}
	memcpy(device->speed_arr, speed_arr, 8);
 800184a:	4b14      	ldr	r3, [pc, #80]	; (800189c <first_init_device+0xb4>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	3310      	adds	r3, #16
 8001850:	461a      	mov	r2, r3
 8001852:	463b      	mov	r3, r7
 8001854:	cb03      	ldmia	r3!, {r0, r1}
 8001856:	6010      	str	r0, [r2, #0]
 8001858:	6051      	str	r1, [r2, #4]
	device->sensors_addr.out[0] = 0;
 800185a:	4b10      	ldr	r3, [pc, #64]	; (800189c <first_init_device+0xb4>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	2200      	movs	r2, #0
 8001860:	761a      	strb	r2, [r3, #24]
	device->sensors_addr.in[0] = 0;
 8001862:	4b0e      	ldr	r3, [pc, #56]	; (800189c <first_init_device+0xb4>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	2200      	movs	r2, #0
 8001868:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	device->remote_control.find = OFF;
 800186c:	4b0b      	ldr	r3, [pc, #44]	; (800189c <first_init_device+0xb4>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2200      	movs	r2, #0
 8001872:	725a      	strb	r2, [r3, #9]
	device->extra_options.deviation = 3;           // отклонение должно быть 3
 8001874:	4b09      	ldr	r3, [pc, #36]	; (800189c <first_init_device+0xb4>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2203      	movs	r2, #3
 800187a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	device->extra_options.check_time = 1 * MINUTE; // время проверки должно быть 1-5 минут
 800187e:	4b07      	ldr	r3, [pc, #28]	; (800189c <first_init_device+0xb4>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a08      	ldr	r2, [pc, #32]	; (80018a4 <first_init_device+0xbc>)
 8001884:	65da      	str	r2, [r3, #92]	; 0x5c
	device->extra_options.step_pwm = 5;            // шаг шим должно быть 5
 8001886:	4b05      	ldr	r3, [pc, #20]	; (800189c <first_init_device+0xb4>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	2205      	movs	r2, #5
 800188c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	write_device_params();
 8001890:	f000 f84a 	bl	8001928 <write_device_params>
}
 8001894:	bf00      	nop
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	20013b1c 	.word	0x20013b1c
 80018a0:	0801a1dc 	.word	0x0801a1dc
 80018a4:	03938700 	.word	0x03938700

080018a8 <write_wireless_params>:
#define LOCATION_DEVICE 	0x080A0000 //0x081A0000
#define LOCATION_WIRELESS 	0x080C0000 //0x081C0000
#define LOCATION_HEATERS  	0x080E0000 //0x081E0000

void write_wireless_params()
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
	Flash_Write_Data(LOCATION_WIRELESS, wireless_params, sizeof(wireless_parameters_s));
 80018ac:	4b04      	ldr	r3, [pc, #16]	; (80018c0 <write_wireless_params+0x18>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	22a0      	movs	r2, #160	; 0xa0
 80018b2:	4619      	mov	r1, r3
 80018b4:	4803      	ldr	r0, [pc, #12]	; (80018c4 <write_wireless_params+0x1c>)
 80018b6:	f7ff faf7 	bl	8000ea8 <Flash_Write_Data>
}
 80018ba:	bf00      	nop
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	20013b20 	.word	0x20013b20
 80018c4:	080c0000 	.word	0x080c0000

080018c8 <read_wireless_params>:

void read_wireless_params()
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
	Flash_Read_Data(LOCATION_WIRELESS, wireless_params, sizeof(wireless_parameters_s));
 80018cc:	4b04      	ldr	r3, [pc, #16]	; (80018e0 <read_wireless_params+0x18>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	22a0      	movs	r2, #160	; 0xa0
 80018d2:	4619      	mov	r1, r3
 80018d4:	4803      	ldr	r0, [pc, #12]	; (80018e4 <read_wireless_params+0x1c>)
 80018d6:	f7ff fb45 	bl	8000f64 <Flash_Read_Data>
}
 80018da:	bf00      	nop
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	20013b20 	.word	0x20013b20
 80018e4:	080c0000 	.word	0x080c0000

080018e8 <write_heaters>:

void write_heaters()
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
	Flash_Write_Data(LOCATION_HEATERS, heaters, sizeof(heaters_s));
 80018ec:	4b04      	ldr	r3, [pc, #16]	; (8001900 <write_heaters+0x18>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2238      	movs	r2, #56	; 0x38
 80018f2:	4619      	mov	r1, r3
 80018f4:	4803      	ldr	r0, [pc, #12]	; (8001904 <write_heaters+0x1c>)
 80018f6:	f7ff fad7 	bl	8000ea8 <Flash_Write_Data>
}
 80018fa:	bf00      	nop
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	200139dc 	.word	0x200139dc
 8001904:	080e0000 	.word	0x080e0000

08001908 <read_heaters>:

void read_heaters()
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
	Flash_Read_Data(LOCATION_HEATERS, heaters, sizeof(heaters_s));
 800190c:	4b04      	ldr	r3, [pc, #16]	; (8001920 <read_heaters+0x18>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2238      	movs	r2, #56	; 0x38
 8001912:	4619      	mov	r1, r3
 8001914:	4803      	ldr	r0, [pc, #12]	; (8001924 <read_heaters+0x1c>)
 8001916:	f7ff fb25 	bl	8000f64 <Flash_Read_Data>
}
 800191a:	bf00      	nop
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	200139dc 	.word	0x200139dc
 8001924:	080e0000 	.word	0x080e0000

08001928 <write_device_params>:

void write_device_params()
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
	Flash_Write_Data(LOCATION_DEVICE, device, sizeof(device_s));
 800192c:	4b04      	ldr	r3, [pc, #16]	; (8001940 <write_device_params+0x18>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2264      	movs	r2, #100	; 0x64
 8001932:	4619      	mov	r1, r3
 8001934:	4803      	ldr	r0, [pc, #12]	; (8001944 <write_device_params+0x1c>)
 8001936:	f7ff fab7 	bl	8000ea8 <Flash_Write_Data>
}
 800193a:	bf00      	nop
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	20013b1c 	.word	0x20013b1c
 8001944:	080a0000 	.word	0x080a0000

08001948 <read_device_params>:

void read_device_params()
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
	Flash_Read_Data(LOCATION_DEVICE, device, sizeof(device_s));
 800194c:	4b04      	ldr	r3, [pc, #16]	; (8001960 <read_device_params+0x18>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2264      	movs	r2, #100	; 0x64
 8001952:	4619      	mov	r1, r3
 8001954:	4803      	ldr	r0, [pc, #12]	; (8001964 <read_device_params+0x1c>)
 8001956:	f7ff fb05 	bl	8000f64 <Flash_Read_Data>
}
 800195a:	bf00      	nop
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	20013b1c 	.word	0x20013b1c
 8001964:	080a0000 	.word	0x080a0000

08001968 <first_start_init>:

void first_start_init()
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
    first_init_device();
 800196c:	f7ff ff3c 	bl	80017e8 <first_init_device>
    first_init_wireless();
 8001970:	f7ff feda 	bl	8001728 <first_init_wireless>
    first_init_heaters();
 8001974:	f7ff fe9c 	bl	80016b0 <first_init_heaters>
}
 8001978:	bf00      	nop
 800197a:	bd80      	pop	{r7, pc}

0800197c <second_start_init>:

void second_start_init()
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
    read_device_params();
 8001980:	f7ff ffe2 	bl	8001948 <read_device_params>
    read_wireless_params();
 8001984:	f7ff ffa0 	bl	80018c8 <read_wireless_params>
    read_heaters();
 8001988:	f7ff ffbe 	bl	8001908 <read_heaters>
}
 800198c:	bf00      	nop
 800198e:	bd80      	pop	{r7, pc}

08001990 <malloc_memory_parameters>:

void malloc_memory_parameters()
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
    device = malloc(sizeof(device_s));
 8001994:	2064      	movs	r0, #100	; 0x64
 8001996:	f017 fad1 	bl	8018f3c <malloc>
 800199a:	4603      	mov	r3, r0
 800199c:	461a      	mov	r2, r3
 800199e:	4b0c      	ldr	r3, [pc, #48]	; (80019d0 <malloc_memory_parameters+0x40>)
 80019a0:	601a      	str	r2, [r3, #0]
    wireless_params = malloc(sizeof(wireless_parameters_s));
 80019a2:	20a0      	movs	r0, #160	; 0xa0
 80019a4:	f017 faca 	bl	8018f3c <malloc>
 80019a8:	4603      	mov	r3, r0
 80019aa:	461a      	mov	r2, r3
 80019ac:	4b09      	ldr	r3, [pc, #36]	; (80019d4 <malloc_memory_parameters+0x44>)
 80019ae:	601a      	str	r2, [r3, #0]
    sensors_data = malloc(sizeof(sensors_data_s));
 80019b0:	2020      	movs	r0, #32
 80019b2:	f017 fac3 	bl	8018f3c <malloc>
 80019b6:	4603      	mov	r3, r0
 80019b8:	461a      	mov	r2, r3
 80019ba:	4b07      	ldr	r3, [pc, #28]	; (80019d8 <malloc_memory_parameters+0x48>)
 80019bc:	601a      	str	r2, [r3, #0]
    heaters = malloc(sizeof(heaters_s));
 80019be:	2038      	movs	r0, #56	; 0x38
 80019c0:	f017 fabc 	bl	8018f3c <malloc>
 80019c4:	4603      	mov	r3, r0
 80019c6:	461a      	mov	r2, r3
 80019c8:	4b04      	ldr	r3, [pc, #16]	; (80019dc <malloc_memory_parameters+0x4c>)
 80019ca:	601a      	str	r2, [r3, #0]
}
 80019cc:	bf00      	nop
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	20013b1c 	.word	0x20013b1c
 80019d4:	20013b20 	.word	0x20013b20
 80019d8:	20013b24 	.word	0x20013b24
 80019dc:	200139dc 	.word	0x200139dc

080019e0 <set_default_data>:
	device->check_1_0_0 = CHECK_VALUE_1_0_0 + 1;
	write_device_params();
}

void set_default_data()
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
    device->remote_control.error = false;
 80019e4:	4b18      	ldr	r3, [pc, #96]	; (8001a48 <set_default_data+0x68>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2200      	movs	r2, #0
 80019ea:	729a      	strb	r2, [r3, #10]
    sensors_data->out_state = false;
 80019ec:	4b17      	ldr	r3, [pc, #92]	; (8001a4c <set_default_data+0x6c>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	2200      	movs	r2, #0
 80019f2:	771a      	strb	r2, [r3, #28]
    sensors_data->in_state = false;
 80019f4:	4b15      	ldr	r3, [pc, #84]	; (8001a4c <set_default_data+0x6c>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2200      	movs	r2, #0
 80019fa:	775a      	strb	r2, [r3, #29]
    heaters->ten.state = OFF;
 80019fc:	4b14      	ldr	r3, [pc, #80]	; (8001a50 <set_default_data+0x70>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2200      	movs	r2, #0
 8001a02:	705a      	strb	r2, [r3, #1]
    heaters->update_koef_time = 5000000;
 8001a04:	4b12      	ldr	r3, [pc, #72]	; (8001a50 <set_default_data+0x70>)
 8001a06:	6819      	ldr	r1, [r3, #0]
 8001a08:	a30d      	add	r3, pc, #52	; (adr r3, 8001a40 <set_default_data+0x60>)
 8001a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a0e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    heaters->koef = 0;
 8001a12:	4b0f      	ldr	r3, [pc, #60]	; (8001a50 <set_default_data+0x70>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	2200      	movs	r2, #0
 8001a18:	619a      	str	r2, [r3, #24]
    heaters->delta = 1;
 8001a1a:	4b0d      	ldr	r3, [pc, #52]	; (8001a50 <set_default_data+0x70>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001a22:	61da      	str	r2, [r3, #28]
    heaters->delta_high = 15;
 8001a24:	4b0a      	ldr	r3, [pc, #40]	; (8001a50 <set_default_data+0x70>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a0a      	ldr	r2, [pc, #40]	; (8001a54 <set_default_data+0x74>)
 8001a2a:	621a      	str	r2, [r3, #32]
    heaters->koef_grow = 50;
 8001a2c:	4b08      	ldr	r3, [pc, #32]	; (8001a50 <set_default_data+0x70>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2232      	movs	r2, #50	; 0x32
 8001a32:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001a34:	bf00      	nop
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	004c4b40 	.word	0x004c4b40
 8001a44:	00000000 	.word	0x00000000
 8001a48:	20013b1c 	.word	0x20013b1c
 8001a4c:	20013b24 	.word	0x20013b24
 8001a50:	200139dc 	.word	0x200139dc
 8001a54:	41700000 	.word	0x41700000

08001a58 <init_storage>:

void init_storage()
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
	malloc_memory_parameters();
 8001a5c:	f7ff ff98 	bl	8001990 <malloc_memory_parameters>
	read_device_params();
 8001a60:	f7ff ff72 	bl	8001948 <read_device_params>
	// Проверка на первый запуск устройства
	if (device->check_1_0_0 != CHECK_VALUE_1_0_0)
 8001a64:	4b06      	ldr	r3, [pc, #24]	; (8001a80 <init_storage+0x28>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	7adb      	ldrb	r3, [r3, #11]
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d002      	beq.n	8001a74 <init_storage+0x1c>
	{
		first_start_init();
 8001a6e:	f7ff ff7b 	bl	8001968 <first_start_init>
 8001a72:	e001      	b.n	8001a78 <init_storage+0x20>
	}
	else
	{
		second_start_init();
 8001a74:	f7ff ff82 	bl	800197c <second_start_init>
	}
	set_default_data();
 8001a78:	f7ff ffb2 	bl	80019e0 <set_default_data>
}
 8001a7c:	bf00      	nop
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	20013b1c 	.word	0x20013b1c

08001a84 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	607b      	str	r3, [r7, #4]
 8001a8e:	4b1f      	ldr	r3, [pc, #124]	; (8001b0c <MX_DMA_Init+0x88>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a92:	4a1e      	ldr	r2, [pc, #120]	; (8001b0c <MX_DMA_Init+0x88>)
 8001a94:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a98:	6313      	str	r3, [r2, #48]	; 0x30
 8001a9a:	4b1c      	ldr	r3, [pc, #112]	; (8001b0c <MX_DMA_Init+0x88>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aa2:	607b      	str	r3, [r7, #4]
 8001aa4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	603b      	str	r3, [r7, #0]
 8001aaa:	4b18      	ldr	r3, [pc, #96]	; (8001b0c <MX_DMA_Init+0x88>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aae:	4a17      	ldr	r2, [pc, #92]	; (8001b0c <MX_DMA_Init+0x88>)
 8001ab0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab6:	4b15      	ldr	r3, [pc, #84]	; (8001b0c <MX_DMA_Init+0x88>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001abe:	603b      	str	r3, [r7, #0]
 8001ac0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	2105      	movs	r1, #5
 8001ac6:	200b      	movs	r0, #11
 8001ac8:	f001 fa23 	bl	8002f12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001acc:	200b      	movs	r0, #11
 8001ace:	f001 fa3c 	bl	8002f4a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	2105      	movs	r1, #5
 8001ad6:	202f      	movs	r0, #47	; 0x2f
 8001ad8:	f001 fa1b 	bl	8002f12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8001adc:	202f      	movs	r0, #47	; 0x2f
 8001ade:	f001 fa34 	bl	8002f4a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	2105      	movs	r1, #5
 8001ae6:	203a      	movs	r0, #58	; 0x3a
 8001ae8:	f001 fa13 	bl	8002f12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001aec:	203a      	movs	r0, #58	; 0x3a
 8001aee:	f001 fa2c 	bl	8002f4a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8001af2:	2200      	movs	r2, #0
 8001af4:	2105      	movs	r1, #5
 8001af6:	2046      	movs	r0, #70	; 0x46
 8001af8:	f001 fa0b 	bl	8002f12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001afc:	2046      	movs	r0, #70	; 0x46
 8001afe:	f001 fa24 	bl	8002f4a <HAL_NVIC_EnableIRQ>

}
 8001b02:	bf00      	nop
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	40023800 	.word	0x40023800

08001b10 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001b14:	4a0c      	ldr	r2, [pc, #48]	; (8001b48 <MX_FREERTOS_Init+0x38>)
 8001b16:	2100      	movs	r1, #0
 8001b18:	480c      	ldr	r0, [pc, #48]	; (8001b4c <MX_FREERTOS_Init+0x3c>)
 8001b1a:	f007 f99c 	bl	8008e56 <osThreadNew>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	4a0b      	ldr	r2, [pc, #44]	; (8001b50 <MX_FREERTOS_Init+0x40>)
 8001b22:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  ledsTaskHandle = osThreadNew(LedsTask, NULL, &ledsTask_attributes);
 8001b24:	4a0b      	ldr	r2, [pc, #44]	; (8001b54 <MX_FREERTOS_Init+0x44>)
 8001b26:	2100      	movs	r1, #0
 8001b28:	480b      	ldr	r0, [pc, #44]	; (8001b58 <MX_FREERTOS_Init+0x48>)
 8001b2a:	f007 f994 	bl	8008e56 <osThreadNew>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	4a0a      	ldr	r2, [pc, #40]	; (8001b5c <MX_FREERTOS_Init+0x4c>)
 8001b32:	6013      	str	r3, [r2, #0]
  damperTaskHandle = osThreadNew(DamperTask, NULL, &damperTask_attributes);
 8001b34:	4a0a      	ldr	r2, [pc, #40]	; (8001b60 <MX_FREERTOS_Init+0x50>)
 8001b36:	2100      	movs	r1, #0
 8001b38:	480a      	ldr	r0, [pc, #40]	; (8001b64 <MX_FREERTOS_Init+0x54>)
 8001b3a:	f007 f98c 	bl	8008e56 <osThreadNew>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	4a09      	ldr	r2, [pc, #36]	; (8001b68 <MX_FREERTOS_Init+0x58>)
 8001b42:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001b44:	bf00      	nop
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	0801d0f4 	.word	0x0801d0f4
 8001b4c:	08001b6d 	.word	0x08001b6d
 8001b50:	20013bc4 	.word	0x20013bc4
 8001b54:	0801d0ac 	.word	0x0801d0ac
 8001b58:	08001605 	.word	0x08001605
 8001b5c:	20013bc8 	.word	0x20013bc8
 8001b60:	0801d0d0 	.word	0x0801d0d0
 8001b64:	080013b1 	.word	0x080013b1
 8001b68:	20013bc0 	.word	0x20013bc0

08001b6c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8001b74:	f006 fc56 	bl	8008424 <MX_LWIP_Init>
//  check_remote_control();
  /* Infinite loop */
  for(;;)
  {
//	start_mqtt();
    osDelay(1000);
 8001b78:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b7c:	f007 f9fe 	bl	8008f7c <osDelay>
 8001b80:	e7fa      	b.n	8001b78 <StartDefaultTask+0xc>
	...

08001b84 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b08c      	sub	sp, #48	; 0x30
 8001b88:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b8a:	f107 031c 	add.w	r3, r7, #28
 8001b8e:	2200      	movs	r2, #0
 8001b90:	601a      	str	r2, [r3, #0]
 8001b92:	605a      	str	r2, [r3, #4]
 8001b94:	609a      	str	r2, [r3, #8]
 8001b96:	60da      	str	r2, [r3, #12]
 8001b98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	61bb      	str	r3, [r7, #24]
 8001b9e:	4b61      	ldr	r3, [pc, #388]	; (8001d24 <MX_GPIO_Init+0x1a0>)
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba2:	4a60      	ldr	r2, [pc, #384]	; (8001d24 <MX_GPIO_Init+0x1a0>)
 8001ba4:	f043 0310 	orr.w	r3, r3, #16
 8001ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8001baa:	4b5e      	ldr	r3, [pc, #376]	; (8001d24 <MX_GPIO_Init+0x1a0>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bae:	f003 0310 	and.w	r3, r3, #16
 8001bb2:	61bb      	str	r3, [r7, #24]
 8001bb4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	617b      	str	r3, [r7, #20]
 8001bba:	4b5a      	ldr	r3, [pc, #360]	; (8001d24 <MX_GPIO_Init+0x1a0>)
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbe:	4a59      	ldr	r2, [pc, #356]	; (8001d24 <MX_GPIO_Init+0x1a0>)
 8001bc0:	f043 0304 	orr.w	r3, r3, #4
 8001bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bc6:	4b57      	ldr	r3, [pc, #348]	; (8001d24 <MX_GPIO_Init+0x1a0>)
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bca:	f003 0304 	and.w	r3, r3, #4
 8001bce:	617b      	str	r3, [r7, #20]
 8001bd0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	613b      	str	r3, [r7, #16]
 8001bd6:	4b53      	ldr	r3, [pc, #332]	; (8001d24 <MX_GPIO_Init+0x1a0>)
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bda:	4a52      	ldr	r2, [pc, #328]	; (8001d24 <MX_GPIO_Init+0x1a0>)
 8001bdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001be0:	6313      	str	r3, [r2, #48]	; 0x30
 8001be2:	4b50      	ldr	r3, [pc, #320]	; (8001d24 <MX_GPIO_Init+0x1a0>)
 8001be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bea:	613b      	str	r3, [r7, #16]
 8001bec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bee:	2300      	movs	r3, #0
 8001bf0:	60fb      	str	r3, [r7, #12]
 8001bf2:	4b4c      	ldr	r3, [pc, #304]	; (8001d24 <MX_GPIO_Init+0x1a0>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	4a4b      	ldr	r2, [pc, #300]	; (8001d24 <MX_GPIO_Init+0x1a0>)
 8001bf8:	f043 0301 	orr.w	r3, r3, #1
 8001bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bfe:	4b49      	ldr	r3, [pc, #292]	; (8001d24 <MX_GPIO_Init+0x1a0>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c02:	f003 0301 	and.w	r3, r3, #1
 8001c06:	60fb      	str	r3, [r7, #12]
 8001c08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	60bb      	str	r3, [r7, #8]
 8001c0e:	4b45      	ldr	r3, [pc, #276]	; (8001d24 <MX_GPIO_Init+0x1a0>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	4a44      	ldr	r2, [pc, #272]	; (8001d24 <MX_GPIO_Init+0x1a0>)
 8001c14:	f043 0302 	orr.w	r3, r3, #2
 8001c18:	6313      	str	r3, [r2, #48]	; 0x30
 8001c1a:	4b42      	ldr	r3, [pc, #264]	; (8001d24 <MX_GPIO_Init+0x1a0>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	60bb      	str	r3, [r7, #8]
 8001c24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c26:	2300      	movs	r3, #0
 8001c28:	607b      	str	r3, [r7, #4]
 8001c2a:	4b3e      	ldr	r3, [pc, #248]	; (8001d24 <MX_GPIO_Init+0x1a0>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2e:	4a3d      	ldr	r2, [pc, #244]	; (8001d24 <MX_GPIO_Init+0x1a0>)
 8001c30:	f043 0308 	orr.w	r3, r3, #8
 8001c34:	6313      	str	r3, [r2, #48]	; 0x30
 8001c36:	4b3b      	ldr	r3, [pc, #236]	; (8001d24 <MX_GPIO_Init+0x1a0>)
 8001c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3a:	f003 0308 	and.w	r3, r3, #8
 8001c3e:	607b      	str	r3, [r7, #4]
 8001c40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SW_DIP3_Pin|SW_DIP4_Pin|SW_DIP5_Pin|SW_DIP6_Pin
 8001c42:	2200      	movs	r2, #0
 8001c44:	213f      	movs	r1, #63	; 0x3f
 8001c46:	4838      	ldr	r0, [pc, #224]	; (8001d28 <MX_GPIO_Init+0x1a4>)
 8001c48:	f003 fbc2 	bl	80053d0 <HAL_GPIO_WritePin>
                          |SW_DIP1_Pin|SW_DIP2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, HEAT_VALVE_GATE1_Pin|SPI1_CS_Pin|USART1_DIR_Pin, GPIO_PIN_RESET);
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f241 0118 	movw	r1, #4120	; 0x1018
 8001c52:	4836      	ldr	r0, [pc, #216]	; (8001d2c <MX_GPIO_Init+0x1a8>)
 8001c54:	f003 fbbc 	bl	80053d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RELAY_CH1_Pin|RELAY_CH2_Pin|RELAY_CH3_Pin|RELAY_CH4_Pin
 8001c58:	2200      	movs	r2, #0
 8001c5a:	f24f 01e8 	movw	r1, #61672	; 0xf0e8
 8001c5e:	4834      	ldr	r0, [pc, #208]	; (8001d30 <MX_GPIO_Init+0x1ac>)
 8001c60:	f003 fbb6 	bl	80053d0 <HAL_GPIO_WritePin>
                          |UART5_DIR_Pin|LED_LINK_Pin|LED_WORK_Pin|LED_FAILURE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SSR_GATE1_GPIO_Port, SSR_GATE1_Pin, GPIO_PIN_RESET);
 8001c64:	2200      	movs	r2, #0
 8001c66:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c6a:	4832      	ldr	r0, [pc, #200]	; (8001d34 <MX_GPIO_Init+0x1b0>)
 8001c6c:	f003 fbb0 	bl	80053d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = SW_DIP3_Pin|SW_DIP4_Pin|SW_DIP5_Pin|SW_DIP6_Pin
 8001c70:	233f      	movs	r3, #63	; 0x3f
 8001c72:	61fb      	str	r3, [r7, #28]
                          |SW_DIP1_Pin|SW_DIP2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c74:	2301      	movs	r3, #1
 8001c76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c80:	f107 031c 	add.w	r3, r7, #28
 8001c84:	4619      	mov	r1, r3
 8001c86:	4828      	ldr	r0, [pc, #160]	; (8001d28 <MX_GPIO_Init+0x1a4>)
 8001c88:	f003 f9ee 	bl	8005068 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = HEAT_VALVE_GATE1_Pin|SPI1_CS_Pin|USART1_DIR_Pin;
 8001c8c:	f241 0318 	movw	r3, #4120	; 0x1018
 8001c90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c92:	2301      	movs	r3, #1
 8001c94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c96:	2300      	movs	r3, #0
 8001c98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c9e:	f107 031c 	add.w	r3, r7, #28
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	4821      	ldr	r0, [pc, #132]	; (8001d2c <MX_GPIO_Init+0x1a8>)
 8001ca6:	f003 f9df 	bl	8005068 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PB15 */
  GPIO_InitStruct.Pin = FAN_FG1_Pin|GPIO_PIN_15;
 8001caa:	f248 0301 	movw	r3, #32769	; 0x8001
 8001cae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cb8:	f107 031c 	add.w	r3, r7, #28
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	481e      	ldr	r0, [pc, #120]	; (8001d38 <MX_GPIO_Init+0x1b4>)
 8001cc0:	f003 f9d2 	bl	8005068 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SERVICE_BTN_Pin;
 8001cc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SERVICE_BTN_GPIO_Port, &GPIO_InitStruct);
 8001cd2:	f107 031c 	add.w	r3, r7, #28
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	4815      	ldr	r0, [pc, #84]	; (8001d30 <MX_GPIO_Init+0x1ac>)
 8001cda:	f003 f9c5 	bl	8005068 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = RELAY_CH1_Pin|RELAY_CH2_Pin|RELAY_CH3_Pin|RELAY_CH4_Pin
 8001cde:	f24f 03e8 	movw	r3, #61672	; 0xf0e8
 8001ce2:	61fb      	str	r3, [r7, #28]
                          |UART5_DIR_Pin|LED_LINK_Pin|LED_WORK_Pin|LED_FAILURE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cec:	2300      	movs	r3, #0
 8001cee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cf0:	f107 031c 	add.w	r3, r7, #28
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	480e      	ldr	r0, [pc, #56]	; (8001d30 <MX_GPIO_Init+0x1ac>)
 8001cf8:	f003 f9b6 	bl	8005068 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SSR_GATE1_Pin;
 8001cfc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d02:	2301      	movs	r3, #1
 8001d04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d06:	2300      	movs	r3, #0
 8001d08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SSR_GATE1_GPIO_Port, &GPIO_InitStruct);
 8001d0e:	f107 031c 	add.w	r3, r7, #28
 8001d12:	4619      	mov	r1, r3
 8001d14:	4807      	ldr	r0, [pc, #28]	; (8001d34 <MX_GPIO_Init+0x1b0>)
 8001d16:	f003 f9a7 	bl	8005068 <HAL_GPIO_Init>

}
 8001d1a:	bf00      	nop
 8001d1c:	3730      	adds	r7, #48	; 0x30
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	40023800 	.word	0x40023800
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	40020000 	.word	0x40020000
 8001d30:	40020c00 	.word	0x40020c00
 8001d34:	40020800 	.word	0x40020800
 8001d38:	40020400 	.word	0x40020400

08001d3c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d40:	4b12      	ldr	r3, [pc, #72]	; (8001d8c <MX_I2C1_Init+0x50>)
 8001d42:	4a13      	ldr	r2, [pc, #76]	; (8001d90 <MX_I2C1_Init+0x54>)
 8001d44:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001d46:	4b11      	ldr	r3, [pc, #68]	; (8001d8c <MX_I2C1_Init+0x50>)
 8001d48:	4a12      	ldr	r2, [pc, #72]	; (8001d94 <MX_I2C1_Init+0x58>)
 8001d4a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d4c:	4b0f      	ldr	r3, [pc, #60]	; (8001d8c <MX_I2C1_Init+0x50>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001d52:	4b0e      	ldr	r3, [pc, #56]	; (8001d8c <MX_I2C1_Init+0x50>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d58:	4b0c      	ldr	r3, [pc, #48]	; (8001d8c <MX_I2C1_Init+0x50>)
 8001d5a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d5e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d60:	4b0a      	ldr	r3, [pc, #40]	; (8001d8c <MX_I2C1_Init+0x50>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001d66:	4b09      	ldr	r3, [pc, #36]	; (8001d8c <MX_I2C1_Init+0x50>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d6c:	4b07      	ldr	r3, [pc, #28]	; (8001d8c <MX_I2C1_Init+0x50>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d72:	4b06      	ldr	r3, [pc, #24]	; (8001d8c <MX_I2C1_Init+0x50>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d78:	4804      	ldr	r0, [pc, #16]	; (8001d8c <MX_I2C1_Init+0x50>)
 8001d7a:	f003 fb5d 	bl	8005438 <HAL_I2C_Init>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d001      	beq.n	8001d88 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001d84:	f000 f974 	bl	8002070 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d88:	bf00      	nop
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	20013c20 	.word	0x20013c20
 8001d90:	40005400 	.word	0x40005400
 8001d94:	000186a0 	.word	0x000186a0

08001d98 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001d9c:	4b12      	ldr	r3, [pc, #72]	; (8001de8 <MX_I2C3_Init+0x50>)
 8001d9e:	4a13      	ldr	r2, [pc, #76]	; (8001dec <MX_I2C3_Init+0x54>)
 8001da0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001da2:	4b11      	ldr	r3, [pc, #68]	; (8001de8 <MX_I2C3_Init+0x50>)
 8001da4:	4a12      	ldr	r2, [pc, #72]	; (8001df0 <MX_I2C3_Init+0x58>)
 8001da6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001da8:	4b0f      	ldr	r3, [pc, #60]	; (8001de8 <MX_I2C3_Init+0x50>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001dae:	4b0e      	ldr	r3, [pc, #56]	; (8001de8 <MX_I2C3_Init+0x50>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001db4:	4b0c      	ldr	r3, [pc, #48]	; (8001de8 <MX_I2C3_Init+0x50>)
 8001db6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001dba:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001dbc:	4b0a      	ldr	r3, [pc, #40]	; (8001de8 <MX_I2C3_Init+0x50>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001dc2:	4b09      	ldr	r3, [pc, #36]	; (8001de8 <MX_I2C3_Init+0x50>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001dc8:	4b07      	ldr	r3, [pc, #28]	; (8001de8 <MX_I2C3_Init+0x50>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001dce:	4b06      	ldr	r3, [pc, #24]	; (8001de8 <MX_I2C3_Init+0x50>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001dd4:	4804      	ldr	r0, [pc, #16]	; (8001de8 <MX_I2C3_Init+0x50>)
 8001dd6:	f003 fb2f 	bl	8005438 <HAL_I2C_Init>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001de0:	f000 f946 	bl	8002070 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001de4:	bf00      	nop
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	20013bcc 	.word	0x20013bcc
 8001dec:	40005c00 	.word	0x40005c00
 8001df0:	000186a0 	.word	0x000186a0

08001df4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b08c      	sub	sp, #48	; 0x30
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dfc:	f107 031c 	add.w	r3, r7, #28
 8001e00:	2200      	movs	r2, #0
 8001e02:	601a      	str	r2, [r3, #0]
 8001e04:	605a      	str	r2, [r3, #4]
 8001e06:	609a      	str	r2, [r3, #8]
 8001e08:	60da      	str	r2, [r3, #12]
 8001e0a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a42      	ldr	r2, [pc, #264]	; (8001f1c <HAL_I2C_MspInit+0x128>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d12c      	bne.n	8001e70 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e16:	2300      	movs	r3, #0
 8001e18:	61bb      	str	r3, [r7, #24]
 8001e1a:	4b41      	ldr	r3, [pc, #260]	; (8001f20 <HAL_I2C_MspInit+0x12c>)
 8001e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1e:	4a40      	ldr	r2, [pc, #256]	; (8001f20 <HAL_I2C_MspInit+0x12c>)
 8001e20:	f043 0302 	orr.w	r3, r3, #2
 8001e24:	6313      	str	r3, [r2, #48]	; 0x30
 8001e26:	4b3e      	ldr	r3, [pc, #248]	; (8001f20 <HAL_I2C_MspInit+0x12c>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	61bb      	str	r3, [r7, #24]
 8001e30:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e32:	23c0      	movs	r3, #192	; 0xc0
 8001e34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e36:	2312      	movs	r3, #18
 8001e38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e42:	2304      	movs	r3, #4
 8001e44:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e46:	f107 031c 	add.w	r3, r7, #28
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	4835      	ldr	r0, [pc, #212]	; (8001f24 <HAL_I2C_MspInit+0x130>)
 8001e4e:	f003 f90b 	bl	8005068 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e52:	2300      	movs	r3, #0
 8001e54:	617b      	str	r3, [r7, #20]
 8001e56:	4b32      	ldr	r3, [pc, #200]	; (8001f20 <HAL_I2C_MspInit+0x12c>)
 8001e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5a:	4a31      	ldr	r2, [pc, #196]	; (8001f20 <HAL_I2C_MspInit+0x12c>)
 8001e5c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e60:	6413      	str	r3, [r2, #64]	; 0x40
 8001e62:	4b2f      	ldr	r3, [pc, #188]	; (8001f20 <HAL_I2C_MspInit+0x12c>)
 8001e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e6a:	617b      	str	r3, [r7, #20]
 8001e6c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001e6e:	e050      	b.n	8001f12 <HAL_I2C_MspInit+0x11e>
  else if(i2cHandle->Instance==I2C3)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a2c      	ldr	r2, [pc, #176]	; (8001f28 <HAL_I2C_MspInit+0x134>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d14b      	bne.n	8001f12 <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	613b      	str	r3, [r7, #16]
 8001e7e:	4b28      	ldr	r3, [pc, #160]	; (8001f20 <HAL_I2C_MspInit+0x12c>)
 8001e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e82:	4a27      	ldr	r2, [pc, #156]	; (8001f20 <HAL_I2C_MspInit+0x12c>)
 8001e84:	f043 0304 	orr.w	r3, r3, #4
 8001e88:	6313      	str	r3, [r2, #48]	; 0x30
 8001e8a:	4b25      	ldr	r3, [pc, #148]	; (8001f20 <HAL_I2C_MspInit+0x12c>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8e:	f003 0304 	and.w	r3, r3, #4
 8001e92:	613b      	str	r3, [r7, #16]
 8001e94:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e96:	2300      	movs	r3, #0
 8001e98:	60fb      	str	r3, [r7, #12]
 8001e9a:	4b21      	ldr	r3, [pc, #132]	; (8001f20 <HAL_I2C_MspInit+0x12c>)
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9e:	4a20      	ldr	r2, [pc, #128]	; (8001f20 <HAL_I2C_MspInit+0x12c>)
 8001ea0:	f043 0301 	orr.w	r3, r3, #1
 8001ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ea6:	4b1e      	ldr	r3, [pc, #120]	; (8001f20 <HAL_I2C_MspInit+0x12c>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	60fb      	str	r3, [r7, #12]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001eb2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001eb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001eb8:	2312      	movs	r3, #18
 8001eba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001ec4:	2304      	movs	r3, #4
 8001ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ec8:	f107 031c 	add.w	r3, r7, #28
 8001ecc:	4619      	mov	r1, r3
 8001ece:	4817      	ldr	r0, [pc, #92]	; (8001f2c <HAL_I2C_MspInit+0x138>)
 8001ed0:	f003 f8ca 	bl	8005068 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001ed4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ed8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001eda:	2312      	movs	r3, #18
 8001edc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001ee6:	2304      	movs	r3, #4
 8001ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eea:	f107 031c 	add.w	r3, r7, #28
 8001eee:	4619      	mov	r1, r3
 8001ef0:	480f      	ldr	r0, [pc, #60]	; (8001f30 <HAL_I2C_MspInit+0x13c>)
 8001ef2:	f003 f8b9 	bl	8005068 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	60bb      	str	r3, [r7, #8]
 8001efa:	4b09      	ldr	r3, [pc, #36]	; (8001f20 <HAL_I2C_MspInit+0x12c>)
 8001efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efe:	4a08      	ldr	r2, [pc, #32]	; (8001f20 <HAL_I2C_MspInit+0x12c>)
 8001f00:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f04:	6413      	str	r3, [r2, #64]	; 0x40
 8001f06:	4b06      	ldr	r3, [pc, #24]	; (8001f20 <HAL_I2C_MspInit+0x12c>)
 8001f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f0e:	60bb      	str	r3, [r7, #8]
 8001f10:	68bb      	ldr	r3, [r7, #8]
}
 8001f12:	bf00      	nop
 8001f14:	3730      	adds	r7, #48	; 0x30
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	40005400 	.word	0x40005400
 8001f20:	40023800 	.word	0x40023800
 8001f24:	40020400 	.word	0x40020400
 8001f28:	40005c00 	.word	0x40005c00
 8001f2c:	40020800 	.word	0x40020800
 8001f30:	40020000 	.word	0x40020000

08001f34 <HAL_TIM_PeriodElapsedCallback>:
//  }
//  return len;
//}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  }
//  if (htim->Instance == TIM12) // check if the interrupt comes from TIM12
//  {
//    link_callback_IP();
//  }
}
 8001f3c:	bf00      	nop
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f4c:	f000 fe70 	bl	8002c30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f50:	f000 f824 	bl	8001f9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f54:	f7ff fe16 	bl	8001b84 <MX_GPIO_Init>
  MX_DMA_Init();
 8001f58:	f7ff fd94 	bl	8001a84 <MX_DMA_Init>
  MX_UART5_Init();
 8001f5c:	f000 fc6e 	bl	800283c <MX_UART5_Init>
  MX_SPI1_Init();
 8001f60:	f000 f88c 	bl	800207c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001f64:	f000 fc94 	bl	8002890 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001f68:	f7ff fee8 	bl	8001d3c <MX_I2C1_Init>
  MX_TIM1_Init();
 8001f6c:	f000 faae 	bl	80024cc <MX_TIM1_Init>
  MX_TIM8_Init();
 8001f70:	f000 fafe 	bl	8002570 <MX_TIM8_Init>
  MX_TIM12_Init();
 8001f74:	f000 fb80 	bl	8002678 <MX_TIM12_Init>
  MX_I2C3_Init();
 8001f78:	f7ff ff0e 	bl	8001d98 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  init_ds_devices();
 8001f7c:	f7ff fb5a 	bl	8001634 <init_ds_devices>
//  init_sht_devices();
  HAL_TIM_Base_Start_IT(&htim1);
 8001f80:	4805      	ldr	r0, [pc, #20]	; (8001f98 <main+0x50>)
 8001f82:	f004 f90d 	bl	80061a0 <HAL_TIM_Base_Start_IT>
  init_storage();
 8001f86:	f7ff fd67 	bl	8001a58 <init_storage>
//  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
//  HAL_TIM_Base_Start_IT(&htim12);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001f8a:	f006 ff05 	bl	8008d98 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001f8e:	f7ff fdbf 	bl	8001b10 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8001f92:	f006 ff25 	bl	8008de0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001f96:	e7fe      	b.n	8001f96 <main+0x4e>
 8001f98:	20013d14 	.word	0x20013d14

08001f9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b094      	sub	sp, #80	; 0x50
 8001fa0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fa2:	f107 0320 	add.w	r3, r7, #32
 8001fa6:	2230      	movs	r2, #48	; 0x30
 8001fa8:	2100      	movs	r1, #0
 8001faa:	4618      	mov	r0, r3
 8001fac:	f016 ffec 	bl	8018f88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fb0:	f107 030c 	add.w	r3, r7, #12
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]
 8001fb8:	605a      	str	r2, [r3, #4]
 8001fba:	609a      	str	r2, [r3, #8]
 8001fbc:	60da      	str	r2, [r3, #12]
 8001fbe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	60bb      	str	r3, [r7, #8]
 8001fc4:	4b28      	ldr	r3, [pc, #160]	; (8002068 <SystemClock_Config+0xcc>)
 8001fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc8:	4a27      	ldr	r2, [pc, #156]	; (8002068 <SystemClock_Config+0xcc>)
 8001fca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fce:	6413      	str	r3, [r2, #64]	; 0x40
 8001fd0:	4b25      	ldr	r3, [pc, #148]	; (8002068 <SystemClock_Config+0xcc>)
 8001fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fd8:	60bb      	str	r3, [r7, #8]
 8001fda:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fdc:	2300      	movs	r3, #0
 8001fde:	607b      	str	r3, [r7, #4]
 8001fe0:	4b22      	ldr	r3, [pc, #136]	; (800206c <SystemClock_Config+0xd0>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a21      	ldr	r2, [pc, #132]	; (800206c <SystemClock_Config+0xd0>)
 8001fe6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fea:	6013      	str	r3, [r2, #0]
 8001fec:	4b1f      	ldr	r3, [pc, #124]	; (800206c <SystemClock_Config+0xd0>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ff4:	607b      	str	r3, [r7, #4]
 8001ff6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ffc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002000:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002002:	2302      	movs	r3, #2
 8002004:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002006:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800200a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800200c:	2304      	movs	r3, #4
 800200e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002010:	23a8      	movs	r3, #168	; 0xa8
 8002012:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002014:	2302      	movs	r3, #2
 8002016:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002018:	2304      	movs	r3, #4
 800201a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800201c:	f107 0320 	add.w	r3, r7, #32
 8002020:	4618      	mov	r0, r3
 8002022:	f003 fb4d 	bl	80056c0 <HAL_RCC_OscConfig>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800202c:	f000 f820 	bl	8002070 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002030:	230f      	movs	r3, #15
 8002032:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002034:	2302      	movs	r3, #2
 8002036:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002038:	2300      	movs	r3, #0
 800203a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800203c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002040:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002042:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002046:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002048:	f107 030c 	add.w	r3, r7, #12
 800204c:	2105      	movs	r1, #5
 800204e:	4618      	mov	r0, r3
 8002050:	f003 fdae 	bl	8005bb0 <HAL_RCC_ClockConfig>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800205a:	f000 f809 	bl	8002070 <Error_Handler>
  }
}
 800205e:	bf00      	nop
 8002060:	3750      	adds	r7, #80	; 0x50
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	40023800 	.word	0x40023800
 800206c:	40007000 	.word	0x40007000

08002070 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002074:	b672      	cpsid	i
}
 8002076:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002078:	e7fe      	b.n	8002078 <Error_Handler+0x8>
	...

0800207c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002080:	4b17      	ldr	r3, [pc, #92]	; (80020e0 <MX_SPI1_Init+0x64>)
 8002082:	4a18      	ldr	r2, [pc, #96]	; (80020e4 <MX_SPI1_Init+0x68>)
 8002084:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002086:	4b16      	ldr	r3, [pc, #88]	; (80020e0 <MX_SPI1_Init+0x64>)
 8002088:	f44f 7282 	mov.w	r2, #260	; 0x104
 800208c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800208e:	4b14      	ldr	r3, [pc, #80]	; (80020e0 <MX_SPI1_Init+0x64>)
 8002090:	2200      	movs	r2, #0
 8002092:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002094:	4b12      	ldr	r3, [pc, #72]	; (80020e0 <MX_SPI1_Init+0x64>)
 8002096:	2200      	movs	r2, #0
 8002098:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800209a:	4b11      	ldr	r3, [pc, #68]	; (80020e0 <MX_SPI1_Init+0x64>)
 800209c:	2200      	movs	r2, #0
 800209e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80020a0:	4b0f      	ldr	r3, [pc, #60]	; (80020e0 <MX_SPI1_Init+0x64>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80020a6:	4b0e      	ldr	r3, [pc, #56]	; (80020e0 <MX_SPI1_Init+0x64>)
 80020a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020ac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80020ae:	4b0c      	ldr	r3, [pc, #48]	; (80020e0 <MX_SPI1_Init+0x64>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80020b4:	4b0a      	ldr	r3, [pc, #40]	; (80020e0 <MX_SPI1_Init+0x64>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80020ba:	4b09      	ldr	r3, [pc, #36]	; (80020e0 <MX_SPI1_Init+0x64>)
 80020bc:	2200      	movs	r2, #0
 80020be:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020c0:	4b07      	ldr	r3, [pc, #28]	; (80020e0 <MX_SPI1_Init+0x64>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80020c6:	4b06      	ldr	r3, [pc, #24]	; (80020e0 <MX_SPI1_Init+0x64>)
 80020c8:	220a      	movs	r2, #10
 80020ca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80020cc:	4804      	ldr	r0, [pc, #16]	; (80020e0 <MX_SPI1_Init+0x64>)
 80020ce:	f003 ff8f 	bl	8005ff0 <HAL_SPI_Init>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80020d8:	f7ff ffca 	bl	8002070 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80020dc:	bf00      	nop
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	20013c74 	.word	0x20013c74
 80020e4:	40013000 	.word	0x40013000

080020e8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b08a      	sub	sp, #40	; 0x28
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f0:	f107 0314 	add.w	r3, r7, #20
 80020f4:	2200      	movs	r2, #0
 80020f6:	601a      	str	r2, [r3, #0]
 80020f8:	605a      	str	r2, [r3, #4]
 80020fa:	609a      	str	r2, [r3, #8]
 80020fc:	60da      	str	r2, [r3, #12]
 80020fe:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a28      	ldr	r2, [pc, #160]	; (80021a8 <HAL_SPI_MspInit+0xc0>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d149      	bne.n	800219e <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800210a:	2300      	movs	r3, #0
 800210c:	613b      	str	r3, [r7, #16]
 800210e:	4b27      	ldr	r3, [pc, #156]	; (80021ac <HAL_SPI_MspInit+0xc4>)
 8002110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002112:	4a26      	ldr	r2, [pc, #152]	; (80021ac <HAL_SPI_MspInit+0xc4>)
 8002114:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002118:	6453      	str	r3, [r2, #68]	; 0x44
 800211a:	4b24      	ldr	r3, [pc, #144]	; (80021ac <HAL_SPI_MspInit+0xc4>)
 800211c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800211e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002122:	613b      	str	r3, [r7, #16]
 8002124:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002126:	2300      	movs	r3, #0
 8002128:	60fb      	str	r3, [r7, #12]
 800212a:	4b20      	ldr	r3, [pc, #128]	; (80021ac <HAL_SPI_MspInit+0xc4>)
 800212c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212e:	4a1f      	ldr	r2, [pc, #124]	; (80021ac <HAL_SPI_MspInit+0xc4>)
 8002130:	f043 0301 	orr.w	r3, r3, #1
 8002134:	6313      	str	r3, [r2, #48]	; 0x30
 8002136:	4b1d      	ldr	r3, [pc, #116]	; (80021ac <HAL_SPI_MspInit+0xc4>)
 8002138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213a:	f003 0301 	and.w	r3, r3, #1
 800213e:	60fb      	str	r3, [r7, #12]
 8002140:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002142:	2300      	movs	r3, #0
 8002144:	60bb      	str	r3, [r7, #8]
 8002146:	4b19      	ldr	r3, [pc, #100]	; (80021ac <HAL_SPI_MspInit+0xc4>)
 8002148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214a:	4a18      	ldr	r2, [pc, #96]	; (80021ac <HAL_SPI_MspInit+0xc4>)
 800214c:	f043 0302 	orr.w	r3, r3, #2
 8002150:	6313      	str	r3, [r2, #48]	; 0x30
 8002152:	4b16      	ldr	r3, [pc, #88]	; (80021ac <HAL_SPI_MspInit+0xc4>)
 8002154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002156:	f003 0302 	and.w	r3, r3, #2
 800215a:	60bb      	str	r3, [r7, #8]
 800215c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800215e:	2360      	movs	r3, #96	; 0x60
 8002160:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002162:	2302      	movs	r3, #2
 8002164:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002166:	2300      	movs	r3, #0
 8002168:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800216a:	2303      	movs	r3, #3
 800216c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800216e:	2305      	movs	r3, #5
 8002170:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002172:	f107 0314 	add.w	r3, r7, #20
 8002176:	4619      	mov	r1, r3
 8002178:	480d      	ldr	r0, [pc, #52]	; (80021b0 <HAL_SPI_MspInit+0xc8>)
 800217a:	f002 ff75 	bl	8005068 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800217e:	2320      	movs	r3, #32
 8002180:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002182:	2302      	movs	r3, #2
 8002184:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002186:	2300      	movs	r3, #0
 8002188:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800218a:	2303      	movs	r3, #3
 800218c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800218e:	2305      	movs	r3, #5
 8002190:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002192:	f107 0314 	add.w	r3, r7, #20
 8002196:	4619      	mov	r1, r3
 8002198:	4806      	ldr	r0, [pc, #24]	; (80021b4 <HAL_SPI_MspInit+0xcc>)
 800219a:	f002 ff65 	bl	8005068 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800219e:	bf00      	nop
 80021a0:	3728      	adds	r7, #40	; 0x28
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	40013000 	.word	0x40013000
 80021ac:	40023800 	.word	0x40023800
 80021b0:	40020000 	.word	0x40020000
 80021b4:	40020400 	.word	0x40020400

080021b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021be:	2300      	movs	r3, #0
 80021c0:	607b      	str	r3, [r7, #4]
 80021c2:	4b12      	ldr	r3, [pc, #72]	; (800220c <HAL_MspInit+0x54>)
 80021c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c6:	4a11      	ldr	r2, [pc, #68]	; (800220c <HAL_MspInit+0x54>)
 80021c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021cc:	6453      	str	r3, [r2, #68]	; 0x44
 80021ce:	4b0f      	ldr	r3, [pc, #60]	; (800220c <HAL_MspInit+0x54>)
 80021d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021d6:	607b      	str	r3, [r7, #4]
 80021d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021da:	2300      	movs	r3, #0
 80021dc:	603b      	str	r3, [r7, #0]
 80021de:	4b0b      	ldr	r3, [pc, #44]	; (800220c <HAL_MspInit+0x54>)
 80021e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e2:	4a0a      	ldr	r2, [pc, #40]	; (800220c <HAL_MspInit+0x54>)
 80021e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021e8:	6413      	str	r3, [r2, #64]	; 0x40
 80021ea:	4b08      	ldr	r3, [pc, #32]	; (800220c <HAL_MspInit+0x54>)
 80021ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021f2:	603b      	str	r3, [r7, #0]
 80021f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80021f6:	2200      	movs	r2, #0
 80021f8:	210f      	movs	r1, #15
 80021fa:	f06f 0001 	mvn.w	r0, #1
 80021fe:	f000 fe88 	bl	8002f12 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002202:	bf00      	nop
 8002204:	3708      	adds	r7, #8
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	40023800 	.word	0x40023800

08002210 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002214:	e7fe      	b.n	8002214 <NMI_Handler+0x4>

08002216 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002216:	b480      	push	{r7}
 8002218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800221a:	e7fe      	b.n	800221a <HardFault_Handler+0x4>

0800221c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002220:	e7fe      	b.n	8002220 <MemManage_Handler+0x4>

08002222 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002222:	b480      	push	{r7}
 8002224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002226:	e7fe      	b.n	8002226 <BusFault_Handler+0x4>

08002228 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800222c:	e7fe      	b.n	800222c <UsageFault_Handler+0x4>

0800222e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800222e:	b480      	push	{r7}
 8002230:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002232:	bf00      	nop
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr

0800223c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002240:	f000 fd48 	bl	8002cd4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002244:	f009 fa00 	bl	800b648 <xTaskGetSchedulerState>
 8002248:	4603      	mov	r3, r0
 800224a:	2b01      	cmp	r3, #1
 800224c:	d001      	beq.n	8002252 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800224e:	f00a f9c3 	bl	800c5d8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002252:	bf00      	nop
 8002254:	bd80      	pop	{r7, pc}
	...

08002258 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 800225c:	4802      	ldr	r0, [pc, #8]	; (8002268 <DMA1_Stream0_IRQHandler+0x10>)
 800225e:	f001 f827 	bl	80032b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002262:	bf00      	nop
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	20013eec 	.word	0x20013eec

0800226c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002270:	4802      	ldr	r0, [pc, #8]	; (800227c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002272:	f004 f854 	bl	800631e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002276:	bf00      	nop
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	20013d14 	.word	0x20013d14

08002280 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002284:	4802      	ldr	r0, [pc, #8]	; (8002290 <USART1_IRQHandler+0x10>)
 8002286:	f005 f833 	bl	80072f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800228a:	bf00      	nop
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	20013ea8 	.word	0x20013ea8

08002294 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8002298:	4803      	ldr	r0, [pc, #12]	; (80022a8 <TIM8_BRK_TIM12_IRQHandler+0x14>)
 800229a:	f004 f840 	bl	800631e <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 800229e:	4803      	ldr	r0, [pc, #12]	; (80022ac <TIM8_BRK_TIM12_IRQHandler+0x18>)
 80022a0:	f004 f83d 	bl	800631e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 80022a4:	bf00      	nop
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	20013ccc 	.word	0x20013ccc
 80022ac:	20013d5c 	.word	0x20013d5c

080022b0 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 80022b4:	4802      	ldr	r0, [pc, #8]	; (80022c0 <DMA1_Stream7_IRQHandler+0x10>)
 80022b6:	f000 fffb 	bl	80032b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80022ba:	bf00      	nop
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	20013f4c 	.word	0x20013f4c

080022c4 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80022c8:	4802      	ldr	r0, [pc, #8]	; (80022d4 <UART5_IRQHandler+0x10>)
 80022ca:	f005 f811 	bl	80072f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80022ce:	bf00      	nop
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	20013e04 	.word	0x20013e04

080022d8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80022dc:	4802      	ldr	r0, [pc, #8]	; (80022e8 <DMA2_Stream2_IRQHandler+0x10>)
 80022de:	f000 ffe7 	bl	80032b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80022e2:	bf00      	nop
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	20013e48 	.word	0x20013e48

080022ec <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80022f0:	4802      	ldr	r0, [pc, #8]	; (80022fc <ETH_IRQHandler+0x10>)
 80022f2:	f001 fe27 	bl	8003f44 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80022f6:	bf00      	nop
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	20015910 	.word	0x20015910

08002300 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002304:	4802      	ldr	r0, [pc, #8]	; (8002310 <DMA2_Stream7_IRQHandler+0x10>)
 8002306:	f000 ffd3 	bl	80032b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800230a:	bf00      	nop
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	20013da4 	.word	0x20013da4

08002314 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
  return 1;
 8002318:	2301      	movs	r3, #1
}
 800231a:	4618      	mov	r0, r3
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <_kill>:

int _kill(int pid, int sig)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800232e:	4b05      	ldr	r3, [pc, #20]	; (8002344 <_kill+0x20>)
 8002330:	2216      	movs	r2, #22
 8002332:	601a      	str	r2, [r3, #0]
  return -1;
 8002334:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002338:	4618      	mov	r0, r3
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr
 8002344:	2001398c 	.word	0x2001398c

08002348 <_exit>:

void _exit (int status)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002350:	f04f 31ff 	mov.w	r1, #4294967295
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f7ff ffe5 	bl	8002324 <_kill>
  while (1) {}    /* Make sure we hang here */
 800235a:	e7fe      	b.n	800235a <_exit+0x12>

0800235c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b086      	sub	sp, #24
 8002360:	af00      	add	r7, sp, #0
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	60b9      	str	r1, [r7, #8]
 8002366:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002368:	2300      	movs	r3, #0
 800236a:	617b      	str	r3, [r7, #20]
 800236c:	e00a      	b.n	8002384 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800236e:	f3af 8000 	nop.w
 8002372:	4601      	mov	r1, r0
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	1c5a      	adds	r2, r3, #1
 8002378:	60ba      	str	r2, [r7, #8]
 800237a:	b2ca      	uxtb	r2, r1
 800237c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	3301      	adds	r3, #1
 8002382:	617b      	str	r3, [r7, #20]
 8002384:	697a      	ldr	r2, [r7, #20]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	429a      	cmp	r2, r3
 800238a:	dbf0      	blt.n	800236e <_read+0x12>
  }

  return len;
 800238c:	687b      	ldr	r3, [r7, #4]
}
 800238e:	4618      	mov	r0, r3
 8002390:	3718      	adds	r7, #24
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}

08002396 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002396:	b580      	push	{r7, lr}
 8002398:	b086      	sub	sp, #24
 800239a:	af00      	add	r7, sp, #0
 800239c:	60f8      	str	r0, [r7, #12]
 800239e:	60b9      	str	r1, [r7, #8]
 80023a0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023a2:	2300      	movs	r3, #0
 80023a4:	617b      	str	r3, [r7, #20]
 80023a6:	e009      	b.n	80023bc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	1c5a      	adds	r2, r3, #1
 80023ac:	60ba      	str	r2, [r7, #8]
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	4618      	mov	r0, r3
 80023b2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	3301      	adds	r3, #1
 80023ba:	617b      	str	r3, [r7, #20]
 80023bc:	697a      	ldr	r2, [r7, #20]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	dbf1      	blt.n	80023a8 <_write+0x12>
  }
  return len;
 80023c4:	687b      	ldr	r3, [r7, #4]
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3718      	adds	r7, #24
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}

080023ce <_close>:

int _close(int file)
{
 80023ce:	b480      	push	{r7}
 80023d0:	b083      	sub	sp, #12
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80023d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023da:	4618      	mov	r0, r3
 80023dc:	370c      	adds	r7, #12
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr

080023e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023e6:	b480      	push	{r7}
 80023e8:	b083      	sub	sp, #12
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	6078      	str	r0, [r7, #4]
 80023ee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023f6:	605a      	str	r2, [r3, #4]
  return 0;
 80023f8:	2300      	movs	r3, #0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	370c      	adds	r7, #12
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr

08002406 <_isatty>:

int _isatty(int file)
{
 8002406:	b480      	push	{r7}
 8002408:	b083      	sub	sp, #12
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800240e:	2301      	movs	r3, #1
}
 8002410:	4618      	mov	r0, r3
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800241c:	b480      	push	{r7}
 800241e:	b085      	sub	sp, #20
 8002420:	af00      	add	r7, sp, #0
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	60b9      	str	r1, [r7, #8]
 8002426:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002428:	2300      	movs	r3, #0
}
 800242a:	4618      	mov	r0, r3
 800242c:	3714      	adds	r7, #20
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
	...

08002438 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002438:	b480      	push	{r7}
 800243a:	b087      	sub	sp, #28
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002440:	4a14      	ldr	r2, [pc, #80]	; (8002494 <_sbrk+0x5c>)
 8002442:	4b15      	ldr	r3, [pc, #84]	; (8002498 <_sbrk+0x60>)
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800244c:	4b13      	ldr	r3, [pc, #76]	; (800249c <_sbrk+0x64>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d102      	bne.n	800245a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002454:	4b11      	ldr	r3, [pc, #68]	; (800249c <_sbrk+0x64>)
 8002456:	4a12      	ldr	r2, [pc, #72]	; (80024a0 <_sbrk+0x68>)
 8002458:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800245a:	4b10      	ldr	r3, [pc, #64]	; (800249c <_sbrk+0x64>)
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4413      	add	r3, r2
 8002462:	693a      	ldr	r2, [r7, #16]
 8002464:	429a      	cmp	r2, r3
 8002466:	d205      	bcs.n	8002474 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8002468:	4b0e      	ldr	r3, [pc, #56]	; (80024a4 <_sbrk+0x6c>)
 800246a:	220c      	movs	r2, #12
 800246c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800246e:	f04f 33ff 	mov.w	r3, #4294967295
 8002472:	e009      	b.n	8002488 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8002474:	4b09      	ldr	r3, [pc, #36]	; (800249c <_sbrk+0x64>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800247a:	4b08      	ldr	r3, [pc, #32]	; (800249c <_sbrk+0x64>)
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4413      	add	r3, r2
 8002482:	4a06      	ldr	r2, [pc, #24]	; (800249c <_sbrk+0x64>)
 8002484:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002486:	68fb      	ldr	r3, [r7, #12]
}
 8002488:	4618      	mov	r0, r3
 800248a:	371c      	adds	r7, #28
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr
 8002494:	20020000 	.word	0x20020000
 8002498:	00002000 	.word	0x00002000
 800249c:	200000cc 	.word	0x200000cc
 80024a0:	2001b6a8 	.word	0x2001b6a8
 80024a4:	2001398c 	.word	0x2001398c

080024a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024ac:	4b06      	ldr	r3, [pc, #24]	; (80024c8 <SystemInit+0x20>)
 80024ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024b2:	4a05      	ldr	r2, [pc, #20]	; (80024c8 <SystemInit+0x20>)
 80024b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024bc:	bf00      	nop
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	e000ed00 	.word	0xe000ed00

080024cc <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b086      	sub	sp, #24
 80024d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024d2:	f107 0308 	add.w	r3, r7, #8
 80024d6:	2200      	movs	r2, #0
 80024d8:	601a      	str	r2, [r3, #0]
 80024da:	605a      	str	r2, [r3, #4]
 80024dc:	609a      	str	r2, [r3, #8]
 80024de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024e0:	463b      	mov	r3, r7
 80024e2:	2200      	movs	r2, #0
 80024e4:	601a      	str	r2, [r3, #0]
 80024e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80024e8:	4b1f      	ldr	r3, [pc, #124]	; (8002568 <MX_TIM1_Init+0x9c>)
 80024ea:	4a20      	ldr	r2, [pc, #128]	; (800256c <MX_TIM1_Init+0xa0>)
 80024ec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8400;
 80024ee:	4b1e      	ldr	r3, [pc, #120]	; (8002568 <MX_TIM1_Init+0x9c>)
 80024f0:	f242 02d0 	movw	r2, #8400	; 0x20d0
 80024f4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024f6:	4b1c      	ldr	r3, [pc, #112]	; (8002568 <MX_TIM1_Init+0x9c>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 80024fc:	4b1a      	ldr	r3, [pc, #104]	; (8002568 <MX_TIM1_Init+0x9c>)
 80024fe:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8002502:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002504:	4b18      	ldr	r3, [pc, #96]	; (8002568 <MX_TIM1_Init+0x9c>)
 8002506:	2200      	movs	r2, #0
 8002508:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800250a:	4b17      	ldr	r3, [pc, #92]	; (8002568 <MX_TIM1_Init+0x9c>)
 800250c:	2200      	movs	r2, #0
 800250e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002510:	4b15      	ldr	r3, [pc, #84]	; (8002568 <MX_TIM1_Init+0x9c>)
 8002512:	2200      	movs	r2, #0
 8002514:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002516:	4814      	ldr	r0, [pc, #80]	; (8002568 <MX_TIM1_Init+0x9c>)
 8002518:	f003 fdf3 	bl	8006102 <HAL_TIM_Base_Init>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8002522:	f7ff fda5 	bl	8002070 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002526:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800252a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800252c:	f107 0308 	add.w	r3, r7, #8
 8002530:	4619      	mov	r1, r3
 8002532:	480d      	ldr	r0, [pc, #52]	; (8002568 <MX_TIM1_Init+0x9c>)
 8002534:	f004 f8be 	bl	80066b4 <HAL_TIM_ConfigClockSource>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800253e:	f7ff fd97 	bl	8002070 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002542:	2300      	movs	r3, #0
 8002544:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002546:	2300      	movs	r3, #0
 8002548:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800254a:	463b      	mov	r3, r7
 800254c:	4619      	mov	r1, r3
 800254e:	4806      	ldr	r0, [pc, #24]	; (8002568 <MX_TIM1_Init+0x9c>)
 8002550:	f004 fc8a 	bl	8006e68 <HAL_TIMEx_MasterConfigSynchronization>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800255a:	f7ff fd89 	bl	8002070 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800255e:	bf00      	nop
 8002560:	3718      	adds	r7, #24
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	20013d14 	.word	0x20013d14
 800256c:	40010000 	.word	0x40010000

08002570 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b092      	sub	sp, #72	; 0x48
 8002574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002576:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800257a:	2200      	movs	r2, #0
 800257c:	601a      	str	r2, [r3, #0]
 800257e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002580:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002584:	2200      	movs	r2, #0
 8002586:	601a      	str	r2, [r3, #0]
 8002588:	605a      	str	r2, [r3, #4]
 800258a:	609a      	str	r2, [r3, #8]
 800258c:	60da      	str	r2, [r3, #12]
 800258e:	611a      	str	r2, [r3, #16]
 8002590:	615a      	str	r2, [r3, #20]
 8002592:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002594:	1d3b      	adds	r3, r7, #4
 8002596:	2220      	movs	r2, #32
 8002598:	2100      	movs	r1, #0
 800259a:	4618      	mov	r0, r3
 800259c:	f016 fcf4 	bl	8018f88 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80025a0:	4b33      	ldr	r3, [pc, #204]	; (8002670 <MX_TIM8_Init+0x100>)
 80025a2:	4a34      	ldr	r2, [pc, #208]	; (8002674 <MX_TIM8_Init+0x104>)
 80025a4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80025a6:	4b32      	ldr	r3, [pc, #200]	; (8002670 <MX_TIM8_Init+0x100>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025ac:	4b30      	ldr	r3, [pc, #192]	; (8002670 <MX_TIM8_Init+0x100>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 3360-1;
 80025b2:	4b2f      	ldr	r3, [pc, #188]	; (8002670 <MX_TIM8_Init+0x100>)
 80025b4:	f640 521f 	movw	r2, #3359	; 0xd1f
 80025b8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025ba:	4b2d      	ldr	r3, [pc, #180]	; (8002670 <MX_TIM8_Init+0x100>)
 80025bc:	2200      	movs	r2, #0
 80025be:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80025c0:	4b2b      	ldr	r3, [pc, #172]	; (8002670 <MX_TIM8_Init+0x100>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025c6:	4b2a      	ldr	r3, [pc, #168]	; (8002670 <MX_TIM8_Init+0x100>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80025cc:	4828      	ldr	r0, [pc, #160]	; (8002670 <MX_TIM8_Init+0x100>)
 80025ce:	f003 fe57 	bl	8006280 <HAL_TIM_PWM_Init>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d001      	beq.n	80025dc <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 80025d8:	f7ff fd4a 	bl	8002070 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025dc:	2300      	movs	r3, #0
 80025de:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025e0:	2300      	movs	r3, #0
 80025e2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80025e4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80025e8:	4619      	mov	r1, r3
 80025ea:	4821      	ldr	r0, [pc, #132]	; (8002670 <MX_TIM8_Init+0x100>)
 80025ec:	f004 fc3c 	bl	8006e68 <HAL_TIMEx_MasterConfigSynchronization>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d001      	beq.n	80025fa <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 80025f6:	f7ff fd3b 	bl	8002070 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025fa:	2360      	movs	r3, #96	; 0x60
 80025fc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80025fe:	2300      	movs	r3, #0
 8002600:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002602:	2300      	movs	r3, #0
 8002604:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002606:	2300      	movs	r3, #0
 8002608:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800260a:	2300      	movs	r3, #0
 800260c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800260e:	2300      	movs	r3, #0
 8002610:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002612:	2300      	movs	r3, #0
 8002614:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002616:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800261a:	2204      	movs	r2, #4
 800261c:	4619      	mov	r1, r3
 800261e:	4814      	ldr	r0, [pc, #80]	; (8002670 <MX_TIM8_Init+0x100>)
 8002620:	f003 ff86 	bl	8006530 <HAL_TIM_PWM_ConfigChannel>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d001      	beq.n	800262e <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 800262a:	f7ff fd21 	bl	8002070 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800262e:	2300      	movs	r3, #0
 8002630:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002632:	2300      	movs	r3, #0
 8002634:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002636:	2300      	movs	r3, #0
 8002638:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800263a:	2300      	movs	r3, #0
 800263c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800263e:	2300      	movs	r3, #0
 8002640:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002642:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002646:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002648:	2300      	movs	r3, #0
 800264a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800264c:	1d3b      	adds	r3, r7, #4
 800264e:	4619      	mov	r1, r3
 8002650:	4807      	ldr	r0, [pc, #28]	; (8002670 <MX_TIM8_Init+0x100>)
 8002652:	f004 fc85 	bl	8006f60 <HAL_TIMEx_ConfigBreakDeadTime>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d001      	beq.n	8002660 <MX_TIM8_Init+0xf0>
  {
    Error_Handler();
 800265c:	f7ff fd08 	bl	8002070 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002660:	4803      	ldr	r0, [pc, #12]	; (8002670 <MX_TIM8_Init+0x100>)
 8002662:	f000 f8b1 	bl	80027c8 <HAL_TIM_MspPostInit>

}
 8002666:	bf00      	nop
 8002668:	3748      	adds	r7, #72	; 0x48
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	20013ccc 	.word	0x20013ccc
 8002674:	40010400 	.word	0x40010400

08002678 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800267e:	463b      	mov	r3, r7
 8002680:	2200      	movs	r2, #0
 8002682:	601a      	str	r2, [r3, #0]
 8002684:	605a      	str	r2, [r3, #4]
 8002686:	609a      	str	r2, [r3, #8]
 8002688:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800268a:	4b16      	ldr	r3, [pc, #88]	; (80026e4 <MX_TIM12_Init+0x6c>)
 800268c:	4a16      	ldr	r2, [pc, #88]	; (80026e8 <MX_TIM12_Init+0x70>)
 800268e:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 8400-1;
 8002690:	4b14      	ldr	r3, [pc, #80]	; (80026e4 <MX_TIM12_Init+0x6c>)
 8002692:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8002696:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002698:	4b12      	ldr	r3, [pc, #72]	; (80026e4 <MX_TIM12_Init+0x6c>)
 800269a:	2200      	movs	r2, #0
 800269c:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 800269e:	4b11      	ldr	r3, [pc, #68]	; (80026e4 <MX_TIM12_Init+0x6c>)
 80026a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026a4:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026a6:	4b0f      	ldr	r3, [pc, #60]	; (80026e4 <MX_TIM12_Init+0x6c>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026ac:	4b0d      	ldr	r3, [pc, #52]	; (80026e4 <MX_TIM12_Init+0x6c>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 80026b2:	480c      	ldr	r0, [pc, #48]	; (80026e4 <MX_TIM12_Init+0x6c>)
 80026b4:	f003 fd25 	bl	8006102 <HAL_TIM_Base_Init>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d001      	beq.n	80026c2 <MX_TIM12_Init+0x4a>
  {
    Error_Handler();
 80026be:	f7ff fcd7 	bl	8002070 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026c6:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 80026c8:	463b      	mov	r3, r7
 80026ca:	4619      	mov	r1, r3
 80026cc:	4805      	ldr	r0, [pc, #20]	; (80026e4 <MX_TIM12_Init+0x6c>)
 80026ce:	f003 fff1 	bl	80066b4 <HAL_TIM_ConfigClockSource>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d001      	beq.n	80026dc <MX_TIM12_Init+0x64>
  {
    Error_Handler();
 80026d8:	f7ff fcca 	bl	8002070 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 80026dc:	bf00      	nop
 80026de:	3710      	adds	r7, #16
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	20013d5c 	.word	0x20013d5c
 80026e8:	40001800 	.word	0x40001800

080026ec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a1c      	ldr	r2, [pc, #112]	; (800276c <HAL_TIM_Base_MspInit+0x80>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d116      	bne.n	800272c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80026fe:	2300      	movs	r3, #0
 8002700:	60fb      	str	r3, [r7, #12]
 8002702:	4b1b      	ldr	r3, [pc, #108]	; (8002770 <HAL_TIM_Base_MspInit+0x84>)
 8002704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002706:	4a1a      	ldr	r2, [pc, #104]	; (8002770 <HAL_TIM_Base_MspInit+0x84>)
 8002708:	f043 0301 	orr.w	r3, r3, #1
 800270c:	6453      	str	r3, [r2, #68]	; 0x44
 800270e:	4b18      	ldr	r3, [pc, #96]	; (8002770 <HAL_TIM_Base_MspInit+0x84>)
 8002710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002712:	f003 0301 	and.w	r3, r3, #1
 8002716:	60fb      	str	r3, [r7, #12]
 8002718:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 800271a:	2200      	movs	r2, #0
 800271c:	2105      	movs	r1, #5
 800271e:	2019      	movs	r0, #25
 8002720:	f000 fbf7 	bl	8002f12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002724:	2019      	movs	r0, #25
 8002726:	f000 fc10 	bl	8002f4a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 800272a:	e01a      	b.n	8002762 <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM12)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a10      	ldr	r2, [pc, #64]	; (8002774 <HAL_TIM_Base_MspInit+0x88>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d115      	bne.n	8002762 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002736:	2300      	movs	r3, #0
 8002738:	60bb      	str	r3, [r7, #8]
 800273a:	4b0d      	ldr	r3, [pc, #52]	; (8002770 <HAL_TIM_Base_MspInit+0x84>)
 800273c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273e:	4a0c      	ldr	r2, [pc, #48]	; (8002770 <HAL_TIM_Base_MspInit+0x84>)
 8002740:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002744:	6413      	str	r3, [r2, #64]	; 0x40
 8002746:	4b0a      	ldr	r3, [pc, #40]	; (8002770 <HAL_TIM_Base_MspInit+0x84>)
 8002748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800274e:	60bb      	str	r3, [r7, #8]
 8002750:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 5, 0);
 8002752:	2200      	movs	r2, #0
 8002754:	2105      	movs	r1, #5
 8002756:	202b      	movs	r0, #43	; 0x2b
 8002758:	f000 fbdb 	bl	8002f12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 800275c:	202b      	movs	r0, #43	; 0x2b
 800275e:	f000 fbf4 	bl	8002f4a <HAL_NVIC_EnableIRQ>
}
 8002762:	bf00      	nop
 8002764:	3710      	adds	r7, #16
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	40010000 	.word	0x40010000
 8002770:	40023800 	.word	0x40023800
 8002774:	40001800 	.word	0x40001800

08002778 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM8)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a0e      	ldr	r2, [pc, #56]	; (80027c0 <HAL_TIM_PWM_MspInit+0x48>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d115      	bne.n	80027b6 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800278a:	2300      	movs	r3, #0
 800278c:	60fb      	str	r3, [r7, #12]
 800278e:	4b0d      	ldr	r3, [pc, #52]	; (80027c4 <HAL_TIM_PWM_MspInit+0x4c>)
 8002790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002792:	4a0c      	ldr	r2, [pc, #48]	; (80027c4 <HAL_TIM_PWM_MspInit+0x4c>)
 8002794:	f043 0302 	orr.w	r3, r3, #2
 8002798:	6453      	str	r3, [r2, #68]	; 0x44
 800279a:	4b0a      	ldr	r3, [pc, #40]	; (80027c4 <HAL_TIM_PWM_MspInit+0x4c>)
 800279c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800279e:	f003 0302 	and.w	r3, r3, #2
 80027a2:	60fb      	str	r3, [r7, #12]
 80027a4:	68fb      	ldr	r3, [r7, #12]

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 5, 0);
 80027a6:	2200      	movs	r2, #0
 80027a8:	2105      	movs	r1, #5
 80027aa:	202b      	movs	r0, #43	; 0x2b
 80027ac:	f000 fbb1 	bl	8002f12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80027b0:	202b      	movs	r0, #43	; 0x2b
 80027b2:	f000 fbca 	bl	8002f4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80027b6:	bf00      	nop
 80027b8:	3710      	adds	r7, #16
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	40010400 	.word	0x40010400
 80027c4:	40023800 	.word	0x40023800

080027c8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b088      	sub	sp, #32
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d0:	f107 030c 	add.w	r3, r7, #12
 80027d4:	2200      	movs	r2, #0
 80027d6:	601a      	str	r2, [r3, #0]
 80027d8:	605a      	str	r2, [r3, #4]
 80027da:	609a      	str	r2, [r3, #8]
 80027dc:	60da      	str	r2, [r3, #12]
 80027de:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a12      	ldr	r2, [pc, #72]	; (8002830 <HAL_TIM_MspPostInit+0x68>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d11d      	bne.n	8002826 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027ea:	2300      	movs	r3, #0
 80027ec:	60bb      	str	r3, [r7, #8]
 80027ee:	4b11      	ldr	r3, [pc, #68]	; (8002834 <HAL_TIM_MspPostInit+0x6c>)
 80027f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f2:	4a10      	ldr	r2, [pc, #64]	; (8002834 <HAL_TIM_MspPostInit+0x6c>)
 80027f4:	f043 0304 	orr.w	r3, r3, #4
 80027f8:	6313      	str	r3, [r2, #48]	; 0x30
 80027fa:	4b0e      	ldr	r3, [pc, #56]	; (8002834 <HAL_TIM_MspPostInit+0x6c>)
 80027fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fe:	f003 0304 	and.w	r3, r3, #4
 8002802:	60bb      	str	r3, [r7, #8]
 8002804:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002806:	2380      	movs	r3, #128	; 0x80
 8002808:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800280a:	2302      	movs	r3, #2
 800280c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280e:	2300      	movs	r3, #0
 8002810:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002812:	2300      	movs	r3, #0
 8002814:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002816:	2303      	movs	r3, #3
 8002818:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800281a:	f107 030c 	add.w	r3, r7, #12
 800281e:	4619      	mov	r1, r3
 8002820:	4805      	ldr	r0, [pc, #20]	; (8002838 <HAL_TIM_MspPostInit+0x70>)
 8002822:	f002 fc21 	bl	8005068 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002826:	bf00      	nop
 8002828:	3720      	adds	r7, #32
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	40010400 	.word	0x40010400
 8002834:	40023800 	.word	0x40023800
 8002838:	40020800 	.word	0x40020800

0800283c <MX_UART5_Init>:
DMA_HandleTypeDef hdma_usart1_rx;
DMA_HandleTypeDef hdma_usart1_tx;

/* UART5 init function */
void MX_UART5_Init(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002840:	4b11      	ldr	r3, [pc, #68]	; (8002888 <MX_UART5_Init+0x4c>)
 8002842:	4a12      	ldr	r2, [pc, #72]	; (800288c <MX_UART5_Init+0x50>)
 8002844:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8002846:	4b10      	ldr	r3, [pc, #64]	; (8002888 <MX_UART5_Init+0x4c>)
 8002848:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800284c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800284e:	4b0e      	ldr	r3, [pc, #56]	; (8002888 <MX_UART5_Init+0x4c>)
 8002850:	2200      	movs	r2, #0
 8002852:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002854:	4b0c      	ldr	r3, [pc, #48]	; (8002888 <MX_UART5_Init+0x4c>)
 8002856:	2200      	movs	r2, #0
 8002858:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800285a:	4b0b      	ldr	r3, [pc, #44]	; (8002888 <MX_UART5_Init+0x4c>)
 800285c:	2200      	movs	r2, #0
 800285e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002860:	4b09      	ldr	r3, [pc, #36]	; (8002888 <MX_UART5_Init+0x4c>)
 8002862:	220c      	movs	r2, #12
 8002864:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002866:	4b08      	ldr	r3, [pc, #32]	; (8002888 <MX_UART5_Init+0x4c>)
 8002868:	2200      	movs	r2, #0
 800286a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800286c:	4b06      	ldr	r3, [pc, #24]	; (8002888 <MX_UART5_Init+0x4c>)
 800286e:	2200      	movs	r2, #0
 8002870:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002872:	4805      	ldr	r0, [pc, #20]	; (8002888 <MX_UART5_Init+0x4c>)
 8002874:	f004 fbda 	bl	800702c <HAL_UART_Init>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800287e:	f7ff fbf7 	bl	8002070 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002882:	bf00      	nop
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	20013e04 	.word	0x20013e04
 800288c:	40005000 	.word	0x40005000

08002890 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002894:	4b11      	ldr	r3, [pc, #68]	; (80028dc <MX_USART1_UART_Init+0x4c>)
 8002896:	4a12      	ldr	r2, [pc, #72]	; (80028e0 <MX_USART1_UART_Init+0x50>)
 8002898:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800289a:	4b10      	ldr	r3, [pc, #64]	; (80028dc <MX_USART1_UART_Init+0x4c>)
 800289c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80028a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80028a2:	4b0e      	ldr	r3, [pc, #56]	; (80028dc <MX_USART1_UART_Init+0x4c>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80028a8:	4b0c      	ldr	r3, [pc, #48]	; (80028dc <MX_USART1_UART_Init+0x4c>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80028ae:	4b0b      	ldr	r3, [pc, #44]	; (80028dc <MX_USART1_UART_Init+0x4c>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80028b4:	4b09      	ldr	r3, [pc, #36]	; (80028dc <MX_USART1_UART_Init+0x4c>)
 80028b6:	220c      	movs	r2, #12
 80028b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028ba:	4b08      	ldr	r3, [pc, #32]	; (80028dc <MX_USART1_UART_Init+0x4c>)
 80028bc:	2200      	movs	r2, #0
 80028be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80028c0:	4b06      	ldr	r3, [pc, #24]	; (80028dc <MX_USART1_UART_Init+0x4c>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80028c6:	4805      	ldr	r0, [pc, #20]	; (80028dc <MX_USART1_UART_Init+0x4c>)
 80028c8:	f004 fbb0 	bl	800702c <HAL_UART_Init>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80028d2:	f7ff fbcd 	bl	8002070 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80028d6:	bf00      	nop
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	20013ea8 	.word	0x20013ea8
 80028e0:	40011000 	.word	0x40011000

080028e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b08c      	sub	sp, #48	; 0x30
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028ec:	f107 031c 	add.w	r3, r7, #28
 80028f0:	2200      	movs	r2, #0
 80028f2:	601a      	str	r2, [r3, #0]
 80028f4:	605a      	str	r2, [r3, #4]
 80028f6:	609a      	str	r2, [r3, #8]
 80028f8:	60da      	str	r2, [r3, #12]
 80028fa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a59      	ldr	r2, [pc, #356]	; (8002a68 <HAL_UART_MspInit+0x184>)
 8002902:	4293      	cmp	r3, r2
 8002904:	f040 80c0 	bne.w	8002a88 <HAL_UART_MspInit+0x1a4>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8002908:	2300      	movs	r3, #0
 800290a:	61bb      	str	r3, [r7, #24]
 800290c:	4b57      	ldr	r3, [pc, #348]	; (8002a6c <HAL_UART_MspInit+0x188>)
 800290e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002910:	4a56      	ldr	r2, [pc, #344]	; (8002a6c <HAL_UART_MspInit+0x188>)
 8002912:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002916:	6413      	str	r3, [r2, #64]	; 0x40
 8002918:	4b54      	ldr	r3, [pc, #336]	; (8002a6c <HAL_UART_MspInit+0x188>)
 800291a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002920:	61bb      	str	r3, [r7, #24]
 8002922:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002924:	2300      	movs	r3, #0
 8002926:	617b      	str	r3, [r7, #20]
 8002928:	4b50      	ldr	r3, [pc, #320]	; (8002a6c <HAL_UART_MspInit+0x188>)
 800292a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292c:	4a4f      	ldr	r2, [pc, #316]	; (8002a6c <HAL_UART_MspInit+0x188>)
 800292e:	f043 0304 	orr.w	r3, r3, #4
 8002932:	6313      	str	r3, [r2, #48]	; 0x30
 8002934:	4b4d      	ldr	r3, [pc, #308]	; (8002a6c <HAL_UART_MspInit+0x188>)
 8002936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002938:	f003 0304 	and.w	r3, r3, #4
 800293c:	617b      	str	r3, [r7, #20]
 800293e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002940:	2300      	movs	r3, #0
 8002942:	613b      	str	r3, [r7, #16]
 8002944:	4b49      	ldr	r3, [pc, #292]	; (8002a6c <HAL_UART_MspInit+0x188>)
 8002946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002948:	4a48      	ldr	r2, [pc, #288]	; (8002a6c <HAL_UART_MspInit+0x188>)
 800294a:	f043 0308 	orr.w	r3, r3, #8
 800294e:	6313      	str	r3, [r2, #48]	; 0x30
 8002950:	4b46      	ldr	r3, [pc, #280]	; (8002a6c <HAL_UART_MspInit+0x188>)
 8002952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002954:	f003 0308 	and.w	r3, r3, #8
 8002958:	613b      	str	r3, [r7, #16]
 800295a:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800295c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002960:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002962:	2302      	movs	r3, #2
 8002964:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002966:	2300      	movs	r3, #0
 8002968:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800296a:	2303      	movs	r3, #3
 800296c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800296e:	2308      	movs	r3, #8
 8002970:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002972:	f107 031c 	add.w	r3, r7, #28
 8002976:	4619      	mov	r1, r3
 8002978:	483d      	ldr	r0, [pc, #244]	; (8002a70 <HAL_UART_MspInit+0x18c>)
 800297a:	f002 fb75 	bl	8005068 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800297e:	2304      	movs	r3, #4
 8002980:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002982:	2302      	movs	r3, #2
 8002984:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002986:	2300      	movs	r3, #0
 8002988:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800298a:	2303      	movs	r3, #3
 800298c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800298e:	2308      	movs	r3, #8
 8002990:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002992:	f107 031c 	add.w	r3, r7, #28
 8002996:	4619      	mov	r1, r3
 8002998:	4836      	ldr	r0, [pc, #216]	; (8002a74 <HAL_UART_MspInit+0x190>)
 800299a:	f002 fb65 	bl	8005068 <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream0;
 800299e:	4b36      	ldr	r3, [pc, #216]	; (8002a78 <HAL_UART_MspInit+0x194>)
 80029a0:	4a36      	ldr	r2, [pc, #216]	; (8002a7c <HAL_UART_MspInit+0x198>)
 80029a2:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 80029a4:	4b34      	ldr	r3, [pc, #208]	; (8002a78 <HAL_UART_MspInit+0x194>)
 80029a6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80029aa:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80029ac:	4b32      	ldr	r3, [pc, #200]	; (8002a78 <HAL_UART_MspInit+0x194>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029b2:	4b31      	ldr	r3, [pc, #196]	; (8002a78 <HAL_UART_MspInit+0x194>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80029b8:	4b2f      	ldr	r3, [pc, #188]	; (8002a78 <HAL_UART_MspInit+0x194>)
 80029ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029be:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029c0:	4b2d      	ldr	r3, [pc, #180]	; (8002a78 <HAL_UART_MspInit+0x194>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029c6:	4b2c      	ldr	r3, [pc, #176]	; (8002a78 <HAL_UART_MspInit+0x194>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 80029cc:	4b2a      	ldr	r3, [pc, #168]	; (8002a78 <HAL_UART_MspInit+0x194>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 80029d2:	4b29      	ldr	r3, [pc, #164]	; (8002a78 <HAL_UART_MspInit+0x194>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80029d8:	4b27      	ldr	r3, [pc, #156]	; (8002a78 <HAL_UART_MspInit+0x194>)
 80029da:	2200      	movs	r2, #0
 80029dc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 80029de:	4826      	ldr	r0, [pc, #152]	; (8002a78 <HAL_UART_MspInit+0x194>)
 80029e0:	f000 face 	bl	8002f80 <HAL_DMA_Init>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d001      	beq.n	80029ee <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 80029ea:	f7ff fb41 	bl	8002070 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a21      	ldr	r2, [pc, #132]	; (8002a78 <HAL_UART_MspInit+0x194>)
 80029f2:	639a      	str	r2, [r3, #56]	; 0x38
 80029f4:	4a20      	ldr	r2, [pc, #128]	; (8002a78 <HAL_UART_MspInit+0x194>)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5_TX Init */
    hdma_uart5_tx.Instance = DMA1_Stream7;
 80029fa:	4b21      	ldr	r3, [pc, #132]	; (8002a80 <HAL_UART_MspInit+0x19c>)
 80029fc:	4a21      	ldr	r2, [pc, #132]	; (8002a84 <HAL_UART_MspInit+0x1a0>)
 80029fe:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 8002a00:	4b1f      	ldr	r3, [pc, #124]	; (8002a80 <HAL_UART_MspInit+0x19c>)
 8002a02:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002a06:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a08:	4b1d      	ldr	r3, [pc, #116]	; (8002a80 <HAL_UART_MspInit+0x19c>)
 8002a0a:	2240      	movs	r2, #64	; 0x40
 8002a0c:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a0e:	4b1c      	ldr	r3, [pc, #112]	; (8002a80 <HAL_UART_MspInit+0x19c>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002a14:	4b1a      	ldr	r3, [pc, #104]	; (8002a80 <HAL_UART_MspInit+0x19c>)
 8002a16:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a1a:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a1c:	4b18      	ldr	r3, [pc, #96]	; (8002a80 <HAL_UART_MspInit+0x19c>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a22:	4b17      	ldr	r3, [pc, #92]	; (8002a80 <HAL_UART_MspInit+0x19c>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 8002a28:	4b15      	ldr	r3, [pc, #84]	; (8002a80 <HAL_UART_MspInit+0x19c>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002a2e:	4b14      	ldr	r3, [pc, #80]	; (8002a80 <HAL_UART_MspInit+0x19c>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a34:	4b12      	ldr	r3, [pc, #72]	; (8002a80 <HAL_UART_MspInit+0x19c>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8002a3a:	4811      	ldr	r0, [pc, #68]	; (8002a80 <HAL_UART_MspInit+0x19c>)
 8002a3c:	f000 faa0 	bl	8002f80 <HAL_DMA_Init>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d001      	beq.n	8002a4a <HAL_UART_MspInit+0x166>
    {
      Error_Handler();
 8002a46:	f7ff fb13 	bl	8002070 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart5_tx);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4a0c      	ldr	r2, [pc, #48]	; (8002a80 <HAL_UART_MspInit+0x19c>)
 8002a4e:	635a      	str	r2, [r3, #52]	; 0x34
 8002a50:	4a0b      	ldr	r2, [pc, #44]	; (8002a80 <HAL_UART_MspInit+0x19c>)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8002a56:	2200      	movs	r2, #0
 8002a58:	2105      	movs	r1, #5
 8002a5a:	2035      	movs	r0, #53	; 0x35
 8002a5c:	f000 fa59 	bl	8002f12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8002a60:	2035      	movs	r0, #53	; 0x35
 8002a62:	f000 fa72 	bl	8002f4a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002a66:	e0a6      	b.n	8002bb6 <HAL_UART_MspInit+0x2d2>
 8002a68:	40005000 	.word	0x40005000
 8002a6c:	40023800 	.word	0x40023800
 8002a70:	40020800 	.word	0x40020800
 8002a74:	40020c00 	.word	0x40020c00
 8002a78:	20013eec 	.word	0x20013eec
 8002a7c:	40026010 	.word	0x40026010
 8002a80:	20013f4c 	.word	0x20013f4c
 8002a84:	400260b8 	.word	0x400260b8
  else if(uartHandle->Instance==USART1)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a4c      	ldr	r2, [pc, #304]	; (8002bc0 <HAL_UART_MspInit+0x2dc>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	f040 8091 	bne.w	8002bb6 <HAL_UART_MspInit+0x2d2>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a94:	2300      	movs	r3, #0
 8002a96:	60fb      	str	r3, [r7, #12]
 8002a98:	4b4a      	ldr	r3, [pc, #296]	; (8002bc4 <HAL_UART_MspInit+0x2e0>)
 8002a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a9c:	4a49      	ldr	r2, [pc, #292]	; (8002bc4 <HAL_UART_MspInit+0x2e0>)
 8002a9e:	f043 0310 	orr.w	r3, r3, #16
 8002aa2:	6453      	str	r3, [r2, #68]	; 0x44
 8002aa4:	4b47      	ldr	r3, [pc, #284]	; (8002bc4 <HAL_UART_MspInit+0x2e0>)
 8002aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa8:	f003 0310 	and.w	r3, r3, #16
 8002aac:	60fb      	str	r3, [r7, #12]
 8002aae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	60bb      	str	r3, [r7, #8]
 8002ab4:	4b43      	ldr	r3, [pc, #268]	; (8002bc4 <HAL_UART_MspInit+0x2e0>)
 8002ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab8:	4a42      	ldr	r2, [pc, #264]	; (8002bc4 <HAL_UART_MspInit+0x2e0>)
 8002aba:	f043 0301 	orr.w	r3, r3, #1
 8002abe:	6313      	str	r3, [r2, #48]	; 0x30
 8002ac0:	4b40      	ldr	r3, [pc, #256]	; (8002bc4 <HAL_UART_MspInit+0x2e0>)
 8002ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac4:	f003 0301 	and.w	r3, r3, #1
 8002ac8:	60bb      	str	r3, [r7, #8]
 8002aca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002acc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002ad0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ad2:	2302      	movs	r3, #2
 8002ad4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ada:	2303      	movs	r3, #3
 8002adc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002ade:	2307      	movs	r3, #7
 8002ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ae2:	f107 031c 	add.w	r3, r7, #28
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	4837      	ldr	r0, [pc, #220]	; (8002bc8 <HAL_UART_MspInit+0x2e4>)
 8002aea:	f002 fabd 	bl	8005068 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002aee:	4b37      	ldr	r3, [pc, #220]	; (8002bcc <HAL_UART_MspInit+0x2e8>)
 8002af0:	4a37      	ldr	r2, [pc, #220]	; (8002bd0 <HAL_UART_MspInit+0x2ec>)
 8002af2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002af4:	4b35      	ldr	r3, [pc, #212]	; (8002bcc <HAL_UART_MspInit+0x2e8>)
 8002af6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002afa:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002afc:	4b33      	ldr	r3, [pc, #204]	; (8002bcc <HAL_UART_MspInit+0x2e8>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b02:	4b32      	ldr	r3, [pc, #200]	; (8002bcc <HAL_UART_MspInit+0x2e8>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002b08:	4b30      	ldr	r3, [pc, #192]	; (8002bcc <HAL_UART_MspInit+0x2e8>)
 8002b0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b0e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b10:	4b2e      	ldr	r3, [pc, #184]	; (8002bcc <HAL_UART_MspInit+0x2e8>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b16:	4b2d      	ldr	r3, [pc, #180]	; (8002bcc <HAL_UART_MspInit+0x2e8>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002b1c:	4b2b      	ldr	r3, [pc, #172]	; (8002bcc <HAL_UART_MspInit+0x2e8>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002b22:	4b2a      	ldr	r3, [pc, #168]	; (8002bcc <HAL_UART_MspInit+0x2e8>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b28:	4b28      	ldr	r3, [pc, #160]	; (8002bcc <HAL_UART_MspInit+0x2e8>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002b2e:	4827      	ldr	r0, [pc, #156]	; (8002bcc <HAL_UART_MspInit+0x2e8>)
 8002b30:	f000 fa26 	bl	8002f80 <HAL_DMA_Init>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d001      	beq.n	8002b3e <HAL_UART_MspInit+0x25a>
      Error_Handler();
 8002b3a:	f7ff fa99 	bl	8002070 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a22      	ldr	r2, [pc, #136]	; (8002bcc <HAL_UART_MspInit+0x2e8>)
 8002b42:	639a      	str	r2, [r3, #56]	; 0x38
 8002b44:	4a21      	ldr	r2, [pc, #132]	; (8002bcc <HAL_UART_MspInit+0x2e8>)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8002b4a:	4b22      	ldr	r3, [pc, #136]	; (8002bd4 <HAL_UART_MspInit+0x2f0>)
 8002b4c:	4a22      	ldr	r2, [pc, #136]	; (8002bd8 <HAL_UART_MspInit+0x2f4>)
 8002b4e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002b50:	4b20      	ldr	r3, [pc, #128]	; (8002bd4 <HAL_UART_MspInit+0x2f0>)
 8002b52:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002b56:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b58:	4b1e      	ldr	r3, [pc, #120]	; (8002bd4 <HAL_UART_MspInit+0x2f0>)
 8002b5a:	2240      	movs	r2, #64	; 0x40
 8002b5c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b5e:	4b1d      	ldr	r3, [pc, #116]	; (8002bd4 <HAL_UART_MspInit+0x2f0>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b64:	4b1b      	ldr	r3, [pc, #108]	; (8002bd4 <HAL_UART_MspInit+0x2f0>)
 8002b66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b6a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b6c:	4b19      	ldr	r3, [pc, #100]	; (8002bd4 <HAL_UART_MspInit+0x2f0>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b72:	4b18      	ldr	r3, [pc, #96]	; (8002bd4 <HAL_UART_MspInit+0x2f0>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002b78:	4b16      	ldr	r3, [pc, #88]	; (8002bd4 <HAL_UART_MspInit+0x2f0>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002b7e:	4b15      	ldr	r3, [pc, #84]	; (8002bd4 <HAL_UART_MspInit+0x2f0>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b84:	4b13      	ldr	r3, [pc, #76]	; (8002bd4 <HAL_UART_MspInit+0x2f0>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002b8a:	4812      	ldr	r0, [pc, #72]	; (8002bd4 <HAL_UART_MspInit+0x2f0>)
 8002b8c:	f000 f9f8 	bl	8002f80 <HAL_DMA_Init>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d001      	beq.n	8002b9a <HAL_UART_MspInit+0x2b6>
      Error_Handler();
 8002b96:	f7ff fa6b 	bl	8002070 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4a0d      	ldr	r2, [pc, #52]	; (8002bd4 <HAL_UART_MspInit+0x2f0>)
 8002b9e:	635a      	str	r2, [r3, #52]	; 0x34
 8002ba0:	4a0c      	ldr	r2, [pc, #48]	; (8002bd4 <HAL_UART_MspInit+0x2f0>)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	2105      	movs	r1, #5
 8002baa:	2025      	movs	r0, #37	; 0x25
 8002bac:	f000 f9b1 	bl	8002f12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002bb0:	2025      	movs	r0, #37	; 0x25
 8002bb2:	f000 f9ca 	bl	8002f4a <HAL_NVIC_EnableIRQ>
}
 8002bb6:	bf00      	nop
 8002bb8:	3730      	adds	r7, #48	; 0x30
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	40011000 	.word	0x40011000
 8002bc4:	40023800 	.word	0x40023800
 8002bc8:	40020000 	.word	0x40020000
 8002bcc:	20013e48 	.word	0x20013e48
 8002bd0:	40026440 	.word	0x40026440
 8002bd4:	20013da4 	.word	0x20013da4
 8002bd8:	400264b8 	.word	0x400264b8

08002bdc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002bdc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c14 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002be0:	480d      	ldr	r0, [pc, #52]	; (8002c18 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002be2:	490e      	ldr	r1, [pc, #56]	; (8002c1c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002be4:	4a0e      	ldr	r2, [pc, #56]	; (8002c20 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002be6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002be8:	e002      	b.n	8002bf0 <LoopCopyDataInit>

08002bea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bee:	3304      	adds	r3, #4

08002bf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bf4:	d3f9      	bcc.n	8002bea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bf6:	4a0b      	ldr	r2, [pc, #44]	; (8002c24 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002bf8:	4c0b      	ldr	r4, [pc, #44]	; (8002c28 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002bfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bfc:	e001      	b.n	8002c02 <LoopFillZerobss>

08002bfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c00:	3204      	adds	r2, #4

08002c02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c04:	d3fb      	bcc.n	8002bfe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002c06:	f7ff fc4f 	bl	80024a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c0a:	f016 f973 	bl	8018ef4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c0e:	f7ff f99b 	bl	8001f48 <main>
  bx  lr    
 8002c12:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002c14:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002c18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c1c:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8002c20:	0801d3c8 	.word	0x0801d3c8
  ldr r2, =_sbss
 8002c24:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8002c28:	2001b6a8 	.word	0x2001b6a8

08002c2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c2c:	e7fe      	b.n	8002c2c <ADC_IRQHandler>
	...

08002c30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c34:	4b0e      	ldr	r3, [pc, #56]	; (8002c70 <HAL_Init+0x40>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a0d      	ldr	r2, [pc, #52]	; (8002c70 <HAL_Init+0x40>)
 8002c3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c40:	4b0b      	ldr	r3, [pc, #44]	; (8002c70 <HAL_Init+0x40>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a0a      	ldr	r2, [pc, #40]	; (8002c70 <HAL_Init+0x40>)
 8002c46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c4c:	4b08      	ldr	r3, [pc, #32]	; (8002c70 <HAL_Init+0x40>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a07      	ldr	r2, [pc, #28]	; (8002c70 <HAL_Init+0x40>)
 8002c52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c58:	2003      	movs	r0, #3
 8002c5a:	f000 f94f 	bl	8002efc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c5e:	200f      	movs	r0, #15
 8002c60:	f000 f808 	bl	8002c74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c64:	f7ff faa8 	bl	80021b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c68:	2300      	movs	r3, #0
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	40023c00 	.word	0x40023c00

08002c74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c7c:	4b12      	ldr	r3, [pc, #72]	; (8002cc8 <HAL_InitTick+0x54>)
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	4b12      	ldr	r3, [pc, #72]	; (8002ccc <HAL_InitTick+0x58>)
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	4619      	mov	r1, r3
 8002c86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c92:	4618      	mov	r0, r3
 8002c94:	f000 f967 	bl	8002f66 <HAL_SYSTICK_Config>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d001      	beq.n	8002ca2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e00e      	b.n	8002cc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2b0f      	cmp	r3, #15
 8002ca6:	d80a      	bhi.n	8002cbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ca8:	2200      	movs	r2, #0
 8002caa:	6879      	ldr	r1, [r7, #4]
 8002cac:	f04f 30ff 	mov.w	r0, #4294967295
 8002cb0:	f000 f92f 	bl	8002f12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002cb4:	4a06      	ldr	r2, [pc, #24]	; (8002cd0 <HAL_InitTick+0x5c>)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	e000      	b.n	8002cc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3708      	adds	r7, #8
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	20000000 	.word	0x20000000
 8002ccc:	20000008 	.word	0x20000008
 8002cd0:	20000004 	.word	0x20000004

08002cd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002cd8:	4b06      	ldr	r3, [pc, #24]	; (8002cf4 <HAL_IncTick+0x20>)
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	461a      	mov	r2, r3
 8002cde:	4b06      	ldr	r3, [pc, #24]	; (8002cf8 <HAL_IncTick+0x24>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	4a04      	ldr	r2, [pc, #16]	; (8002cf8 <HAL_IncTick+0x24>)
 8002ce6:	6013      	str	r3, [r2, #0]
}
 8002ce8:	bf00      	nop
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	20000008 	.word	0x20000008
 8002cf8:	20013fac 	.word	0x20013fac

08002cfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	af00      	add	r7, sp, #0
  return uwTick;
 8002d00:	4b03      	ldr	r3, [pc, #12]	; (8002d10 <HAL_GetTick+0x14>)
 8002d02:	681b      	ldr	r3, [r3, #0]
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr
 8002d0e:	bf00      	nop
 8002d10:	20013fac 	.word	0x20013fac

08002d14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d1c:	f7ff ffee 	bl	8002cfc <HAL_GetTick>
 8002d20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d2c:	d005      	beq.n	8002d3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d2e:	4b0a      	ldr	r3, [pc, #40]	; (8002d58 <HAL_Delay+0x44>)
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	461a      	mov	r2, r3
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	4413      	add	r3, r2
 8002d38:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d3a:	bf00      	nop
 8002d3c:	f7ff ffde 	bl	8002cfc <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	68fa      	ldr	r2, [r7, #12]
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d8f7      	bhi.n	8002d3c <HAL_Delay+0x28>
  {
  }
}
 8002d4c:	bf00      	nop
 8002d4e:	bf00      	nop
 8002d50:	3710      	adds	r7, #16
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	20000008 	.word	0x20000008

08002d5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b085      	sub	sp, #20
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f003 0307 	and.w	r3, r3, #7
 8002d6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d6c:	4b0c      	ldr	r3, [pc, #48]	; (8002da0 <__NVIC_SetPriorityGrouping+0x44>)
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d72:	68ba      	ldr	r2, [r7, #8]
 8002d74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d78:	4013      	ands	r3, r2
 8002d7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d8e:	4a04      	ldr	r2, [pc, #16]	; (8002da0 <__NVIC_SetPriorityGrouping+0x44>)
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	60d3      	str	r3, [r2, #12]
}
 8002d94:	bf00      	nop
 8002d96:	3714      	adds	r7, #20
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr
 8002da0:	e000ed00 	.word	0xe000ed00

08002da4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002da4:	b480      	push	{r7}
 8002da6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002da8:	4b04      	ldr	r3, [pc, #16]	; (8002dbc <__NVIC_GetPriorityGrouping+0x18>)
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	0a1b      	lsrs	r3, r3, #8
 8002dae:	f003 0307 	and.w	r3, r3, #7
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr
 8002dbc:	e000ed00 	.word	0xe000ed00

08002dc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	db0b      	blt.n	8002dea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dd2:	79fb      	ldrb	r3, [r7, #7]
 8002dd4:	f003 021f 	and.w	r2, r3, #31
 8002dd8:	4907      	ldr	r1, [pc, #28]	; (8002df8 <__NVIC_EnableIRQ+0x38>)
 8002dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dde:	095b      	lsrs	r3, r3, #5
 8002de0:	2001      	movs	r0, #1
 8002de2:	fa00 f202 	lsl.w	r2, r0, r2
 8002de6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002dea:	bf00      	nop
 8002dec:	370c      	adds	r7, #12
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop
 8002df8:	e000e100 	.word	0xe000e100

08002dfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	4603      	mov	r3, r0
 8002e04:	6039      	str	r1, [r7, #0]
 8002e06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	db0a      	blt.n	8002e26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	b2da      	uxtb	r2, r3
 8002e14:	490c      	ldr	r1, [pc, #48]	; (8002e48 <__NVIC_SetPriority+0x4c>)
 8002e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e1a:	0112      	lsls	r2, r2, #4
 8002e1c:	b2d2      	uxtb	r2, r2
 8002e1e:	440b      	add	r3, r1
 8002e20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e24:	e00a      	b.n	8002e3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	b2da      	uxtb	r2, r3
 8002e2a:	4908      	ldr	r1, [pc, #32]	; (8002e4c <__NVIC_SetPriority+0x50>)
 8002e2c:	79fb      	ldrb	r3, [r7, #7]
 8002e2e:	f003 030f 	and.w	r3, r3, #15
 8002e32:	3b04      	subs	r3, #4
 8002e34:	0112      	lsls	r2, r2, #4
 8002e36:	b2d2      	uxtb	r2, r2
 8002e38:	440b      	add	r3, r1
 8002e3a:	761a      	strb	r2, [r3, #24]
}
 8002e3c:	bf00      	nop
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr
 8002e48:	e000e100 	.word	0xe000e100
 8002e4c:	e000ed00 	.word	0xe000ed00

08002e50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b089      	sub	sp, #36	; 0x24
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	60b9      	str	r1, [r7, #8]
 8002e5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f003 0307 	and.w	r3, r3, #7
 8002e62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	f1c3 0307 	rsb	r3, r3, #7
 8002e6a:	2b04      	cmp	r3, #4
 8002e6c:	bf28      	it	cs
 8002e6e:	2304      	movcs	r3, #4
 8002e70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	3304      	adds	r3, #4
 8002e76:	2b06      	cmp	r3, #6
 8002e78:	d902      	bls.n	8002e80 <NVIC_EncodePriority+0x30>
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	3b03      	subs	r3, #3
 8002e7e:	e000      	b.n	8002e82 <NVIC_EncodePriority+0x32>
 8002e80:	2300      	movs	r3, #0
 8002e82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e84:	f04f 32ff 	mov.w	r2, #4294967295
 8002e88:	69bb      	ldr	r3, [r7, #24]
 8002e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8e:	43da      	mvns	r2, r3
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	401a      	ands	r2, r3
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e98:	f04f 31ff 	mov.w	r1, #4294967295
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002ea2:	43d9      	mvns	r1, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ea8:	4313      	orrs	r3, r2
         );
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3724      	adds	r7, #36	; 0x24
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr
	...

08002eb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b082      	sub	sp, #8
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	3b01      	subs	r3, #1
 8002ec4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ec8:	d301      	bcc.n	8002ece <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e00f      	b.n	8002eee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ece:	4a0a      	ldr	r2, [pc, #40]	; (8002ef8 <SysTick_Config+0x40>)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	3b01      	subs	r3, #1
 8002ed4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ed6:	210f      	movs	r1, #15
 8002ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8002edc:	f7ff ff8e 	bl	8002dfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ee0:	4b05      	ldr	r3, [pc, #20]	; (8002ef8 <SysTick_Config+0x40>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ee6:	4b04      	ldr	r3, [pc, #16]	; (8002ef8 <SysTick_Config+0x40>)
 8002ee8:	2207      	movs	r2, #7
 8002eea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3708      	adds	r7, #8
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	e000e010 	.word	0xe000e010

08002efc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f7ff ff29 	bl	8002d5c <__NVIC_SetPriorityGrouping>
}
 8002f0a:	bf00      	nop
 8002f0c:	3708      	adds	r7, #8
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}

08002f12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f12:	b580      	push	{r7, lr}
 8002f14:	b086      	sub	sp, #24
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	4603      	mov	r3, r0
 8002f1a:	60b9      	str	r1, [r7, #8]
 8002f1c:	607a      	str	r2, [r7, #4]
 8002f1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f20:	2300      	movs	r3, #0
 8002f22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f24:	f7ff ff3e 	bl	8002da4 <__NVIC_GetPriorityGrouping>
 8002f28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	68b9      	ldr	r1, [r7, #8]
 8002f2e:	6978      	ldr	r0, [r7, #20]
 8002f30:	f7ff ff8e 	bl	8002e50 <NVIC_EncodePriority>
 8002f34:	4602      	mov	r2, r0
 8002f36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f3a:	4611      	mov	r1, r2
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f7ff ff5d 	bl	8002dfc <__NVIC_SetPriority>
}
 8002f42:	bf00      	nop
 8002f44:	3718      	adds	r7, #24
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}

08002f4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f4a:	b580      	push	{r7, lr}
 8002f4c:	b082      	sub	sp, #8
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	4603      	mov	r3, r0
 8002f52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7ff ff31 	bl	8002dc0 <__NVIC_EnableIRQ>
}
 8002f5e:	bf00      	nop
 8002f60:	3708      	adds	r7, #8
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}

08002f66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f66:	b580      	push	{r7, lr}
 8002f68:	b082      	sub	sp, #8
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f7ff ffa2 	bl	8002eb8 <SysTick_Config>
 8002f74:	4603      	mov	r3, r0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3708      	adds	r7, #8
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
	...

08002f80 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b086      	sub	sp, #24
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002f8c:	f7ff feb6 	bl	8002cfc <HAL_GetTick>
 8002f90:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d101      	bne.n	8002f9c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e099      	b.n	80030d0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2202      	movs	r2, #2
 8002fa0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f022 0201 	bic.w	r2, r2, #1
 8002fba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fbc:	e00f      	b.n	8002fde <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002fbe:	f7ff fe9d 	bl	8002cfc <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	2b05      	cmp	r3, #5
 8002fca:	d908      	bls.n	8002fde <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2220      	movs	r2, #32
 8002fd0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2203      	movs	r2, #3
 8002fd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e078      	b.n	80030d0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0301 	and.w	r3, r3, #1
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d1e8      	bne.n	8002fbe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002ff4:	697a      	ldr	r2, [r7, #20]
 8002ff6:	4b38      	ldr	r3, [pc, #224]	; (80030d8 <HAL_DMA_Init+0x158>)
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	685a      	ldr	r2, [r3, #4]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800300a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	691b      	ldr	r3, [r3, #16]
 8003010:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003016:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	699b      	ldr	r3, [r3, #24]
 800301c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003022:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a1b      	ldr	r3, [r3, #32]
 8003028:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800302a:	697a      	ldr	r2, [r7, #20]
 800302c:	4313      	orrs	r3, r2
 800302e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003034:	2b04      	cmp	r3, #4
 8003036:	d107      	bne.n	8003048 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003040:	4313      	orrs	r3, r2
 8003042:	697a      	ldr	r2, [r7, #20]
 8003044:	4313      	orrs	r3, r2
 8003046:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	697a      	ldr	r2, [r7, #20]
 800304e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	695b      	ldr	r3, [r3, #20]
 8003056:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	f023 0307 	bic.w	r3, r3, #7
 800305e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003064:	697a      	ldr	r2, [r7, #20]
 8003066:	4313      	orrs	r3, r2
 8003068:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306e:	2b04      	cmp	r3, #4
 8003070:	d117      	bne.n	80030a2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003076:	697a      	ldr	r2, [r7, #20]
 8003078:	4313      	orrs	r3, r2
 800307a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003080:	2b00      	cmp	r3, #0
 8003082:	d00e      	beq.n	80030a2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f000 fb01 	bl	800368c <DMA_CheckFifoParam>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d008      	beq.n	80030a2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2240      	movs	r2, #64	; 0x40
 8003094:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2201      	movs	r2, #1
 800309a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800309e:	2301      	movs	r3, #1
 80030a0:	e016      	b.n	80030d0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	697a      	ldr	r2, [r7, #20]
 80030a8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f000 fab8 	bl	8003620 <DMA_CalcBaseAndBitshift>
 80030b0:	4603      	mov	r3, r0
 80030b2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030b8:	223f      	movs	r2, #63	; 0x3f
 80030ba:	409a      	lsls	r2, r3
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2201      	movs	r2, #1
 80030ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80030ce:	2300      	movs	r3, #0
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3718      	adds	r7, #24
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	f010803f 	.word	0xf010803f

080030dc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b086      	sub	sp, #24
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	60b9      	str	r1, [r7, #8]
 80030e6:	607a      	str	r2, [r7, #4]
 80030e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030ea:	2300      	movs	r3, #0
 80030ec:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030f2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d101      	bne.n	8003102 <HAL_DMA_Start_IT+0x26>
 80030fe:	2302      	movs	r3, #2
 8003100:	e040      	b.n	8003184 <HAL_DMA_Start_IT+0xa8>
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2201      	movs	r2, #1
 8003106:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003110:	b2db      	uxtb	r3, r3
 8003112:	2b01      	cmp	r3, #1
 8003114:	d12f      	bne.n	8003176 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2202      	movs	r2, #2
 800311a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2200      	movs	r2, #0
 8003122:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	68b9      	ldr	r1, [r7, #8]
 800312a:	68f8      	ldr	r0, [r7, #12]
 800312c:	f000 fa4a 	bl	80035c4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003134:	223f      	movs	r2, #63	; 0x3f
 8003136:	409a      	lsls	r2, r3
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f042 0216 	orr.w	r2, r2, #22
 800314a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003150:	2b00      	cmp	r3, #0
 8003152:	d007      	beq.n	8003164 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f042 0208 	orr.w	r2, r2, #8
 8003162:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f042 0201 	orr.w	r2, r2, #1
 8003172:	601a      	str	r2, [r3, #0]
 8003174:	e005      	b.n	8003182 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800317e:	2302      	movs	r3, #2
 8003180:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003182:	7dfb      	ldrb	r3, [r7, #23]
}
 8003184:	4618      	mov	r0, r3
 8003186:	3718      	adds	r7, #24
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003198:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800319a:	f7ff fdaf 	bl	8002cfc <HAL_GetTick>
 800319e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	2b02      	cmp	r3, #2
 80031aa:	d008      	beq.n	80031be <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2280      	movs	r2, #128	; 0x80
 80031b0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e052      	b.n	8003264 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f022 0216 	bic.w	r2, r2, #22
 80031cc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	695a      	ldr	r2, [r3, #20]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031dc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d103      	bne.n	80031ee <HAL_DMA_Abort+0x62>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d007      	beq.n	80031fe <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f022 0208 	bic.w	r2, r2, #8
 80031fc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f022 0201 	bic.w	r2, r2, #1
 800320c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800320e:	e013      	b.n	8003238 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003210:	f7ff fd74 	bl	8002cfc <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	2b05      	cmp	r3, #5
 800321c:	d90c      	bls.n	8003238 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2220      	movs	r2, #32
 8003222:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2203      	movs	r2, #3
 8003228:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2200      	movs	r2, #0
 8003230:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003234:	2303      	movs	r3, #3
 8003236:	e015      	b.n	8003264 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0301 	and.w	r3, r3, #1
 8003242:	2b00      	cmp	r3, #0
 8003244:	d1e4      	bne.n	8003210 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800324a:	223f      	movs	r2, #63	; 0x3f
 800324c:	409a      	lsls	r2, r3
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2201      	movs	r2, #1
 8003256:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003262:	2300      	movs	r3, #0
}
 8003264:	4618      	mov	r0, r3
 8003266:	3710      	adds	r7, #16
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}

0800326c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800327a:	b2db      	uxtb	r3, r3
 800327c:	2b02      	cmp	r3, #2
 800327e:	d004      	beq.n	800328a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2280      	movs	r2, #128	; 0x80
 8003284:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e00c      	b.n	80032a4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2205      	movs	r2, #5
 800328e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f022 0201 	bic.w	r2, r2, #1
 80032a0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80032a2:	2300      	movs	r3, #0
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	370c      	adds	r7, #12
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr

080032b0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b086      	sub	sp, #24
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80032b8:	2300      	movs	r3, #0
 80032ba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80032bc:	4b8e      	ldr	r3, [pc, #568]	; (80034f8 <HAL_DMA_IRQHandler+0x248>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a8e      	ldr	r2, [pc, #568]	; (80034fc <HAL_DMA_IRQHandler+0x24c>)
 80032c2:	fba2 2303 	umull	r2, r3, r2, r3
 80032c6:	0a9b      	lsrs	r3, r3, #10
 80032c8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ce:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032da:	2208      	movs	r2, #8
 80032dc:	409a      	lsls	r2, r3
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	4013      	ands	r3, r2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d01a      	beq.n	800331c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0304 	and.w	r3, r3, #4
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d013      	beq.n	800331c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f022 0204 	bic.w	r2, r2, #4
 8003302:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003308:	2208      	movs	r2, #8
 800330a:	409a      	lsls	r2, r3
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003314:	f043 0201 	orr.w	r2, r3, #1
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003320:	2201      	movs	r2, #1
 8003322:	409a      	lsls	r2, r3
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	4013      	ands	r3, r2
 8003328:	2b00      	cmp	r3, #0
 800332a:	d012      	beq.n	8003352 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	695b      	ldr	r3, [r3, #20]
 8003332:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003336:	2b00      	cmp	r3, #0
 8003338:	d00b      	beq.n	8003352 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800333e:	2201      	movs	r2, #1
 8003340:	409a      	lsls	r2, r3
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800334a:	f043 0202 	orr.w	r2, r3, #2
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003356:	2204      	movs	r2, #4
 8003358:	409a      	lsls	r2, r3
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	4013      	ands	r3, r2
 800335e:	2b00      	cmp	r3, #0
 8003360:	d012      	beq.n	8003388 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0302 	and.w	r3, r3, #2
 800336c:	2b00      	cmp	r3, #0
 800336e:	d00b      	beq.n	8003388 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003374:	2204      	movs	r2, #4
 8003376:	409a      	lsls	r2, r3
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003380:	f043 0204 	orr.w	r2, r3, #4
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800338c:	2210      	movs	r2, #16
 800338e:	409a      	lsls	r2, r3
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	4013      	ands	r3, r2
 8003394:	2b00      	cmp	r3, #0
 8003396:	d043      	beq.n	8003420 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0308 	and.w	r3, r3, #8
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d03c      	beq.n	8003420 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033aa:	2210      	movs	r2, #16
 80033ac:	409a      	lsls	r2, r3
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d018      	beq.n	80033f2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d108      	bne.n	80033e0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d024      	beq.n	8003420 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	4798      	blx	r3
 80033de:	e01f      	b.n	8003420 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d01b      	beq.n	8003420 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	4798      	blx	r3
 80033f0:	e016      	b.n	8003420 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d107      	bne.n	8003410 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f022 0208 	bic.w	r2, r2, #8
 800340e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003414:	2b00      	cmp	r3, #0
 8003416:	d003      	beq.n	8003420 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003424:	2220      	movs	r2, #32
 8003426:	409a      	lsls	r2, r3
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	4013      	ands	r3, r2
 800342c:	2b00      	cmp	r3, #0
 800342e:	f000 808f 	beq.w	8003550 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0310 	and.w	r3, r3, #16
 800343c:	2b00      	cmp	r3, #0
 800343e:	f000 8087 	beq.w	8003550 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003446:	2220      	movs	r2, #32
 8003448:	409a      	lsls	r2, r3
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003454:	b2db      	uxtb	r3, r3
 8003456:	2b05      	cmp	r3, #5
 8003458:	d136      	bne.n	80034c8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f022 0216 	bic.w	r2, r2, #22
 8003468:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	695a      	ldr	r2, [r3, #20]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003478:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347e:	2b00      	cmp	r3, #0
 8003480:	d103      	bne.n	800348a <HAL_DMA_IRQHandler+0x1da>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003486:	2b00      	cmp	r3, #0
 8003488:	d007      	beq.n	800349a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f022 0208 	bic.w	r2, r2, #8
 8003498:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800349e:	223f      	movs	r2, #63	; 0x3f
 80034a0:	409a      	lsls	r2, r3
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2201      	movs	r2, #1
 80034aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d07e      	beq.n	80035bc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	4798      	blx	r3
        }
        return;
 80034c6:	e079      	b.n	80035bc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d01d      	beq.n	8003512 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d10d      	bne.n	8003500 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d031      	beq.n	8003550 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	4798      	blx	r3
 80034f4:	e02c      	b.n	8003550 <HAL_DMA_IRQHandler+0x2a0>
 80034f6:	bf00      	nop
 80034f8:	20000000 	.word	0x20000000
 80034fc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003504:	2b00      	cmp	r3, #0
 8003506:	d023      	beq.n	8003550 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	4798      	blx	r3
 8003510:	e01e      	b.n	8003550 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800351c:	2b00      	cmp	r3, #0
 800351e:	d10f      	bne.n	8003540 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f022 0210 	bic.w	r2, r2, #16
 800352e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003544:	2b00      	cmp	r3, #0
 8003546:	d003      	beq.n	8003550 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003554:	2b00      	cmp	r3, #0
 8003556:	d032      	beq.n	80035be <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800355c:	f003 0301 	and.w	r3, r3, #1
 8003560:	2b00      	cmp	r3, #0
 8003562:	d022      	beq.n	80035aa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2205      	movs	r2, #5
 8003568:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f022 0201 	bic.w	r2, r2, #1
 800357a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	3301      	adds	r3, #1
 8003580:	60bb      	str	r3, [r7, #8]
 8003582:	697a      	ldr	r2, [r7, #20]
 8003584:	429a      	cmp	r2, r3
 8003586:	d307      	bcc.n	8003598 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0301 	and.w	r3, r3, #1
 8003592:	2b00      	cmp	r3, #0
 8003594:	d1f2      	bne.n	800357c <HAL_DMA_IRQHandler+0x2cc>
 8003596:	e000      	b.n	800359a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003598:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2201      	movs	r2, #1
 800359e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d005      	beq.n	80035be <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	4798      	blx	r3
 80035ba:	e000      	b.n	80035be <HAL_DMA_IRQHandler+0x30e>
        return;
 80035bc:	bf00      	nop
    }
  }
}
 80035be:	3718      	adds	r7, #24
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}

080035c4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b085      	sub	sp, #20
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	60f8      	str	r0, [r7, #12]
 80035cc:	60b9      	str	r1, [r7, #8]
 80035ce:	607a      	str	r2, [r7, #4]
 80035d0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80035e0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	683a      	ldr	r2, [r7, #0]
 80035e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	2b40      	cmp	r3, #64	; 0x40
 80035f0:	d108      	bne.n	8003604 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	68ba      	ldr	r2, [r7, #8]
 8003600:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003602:	e007      	b.n	8003614 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	68ba      	ldr	r2, [r7, #8]
 800360a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	60da      	str	r2, [r3, #12]
}
 8003614:	bf00      	nop
 8003616:	3714      	adds	r7, #20
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr

08003620 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003620:	b480      	push	{r7}
 8003622:	b085      	sub	sp, #20
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	b2db      	uxtb	r3, r3
 800362e:	3b10      	subs	r3, #16
 8003630:	4a14      	ldr	r2, [pc, #80]	; (8003684 <DMA_CalcBaseAndBitshift+0x64>)
 8003632:	fba2 2303 	umull	r2, r3, r2, r3
 8003636:	091b      	lsrs	r3, r3, #4
 8003638:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800363a:	4a13      	ldr	r2, [pc, #76]	; (8003688 <DMA_CalcBaseAndBitshift+0x68>)
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	4413      	add	r3, r2
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	461a      	mov	r2, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2b03      	cmp	r3, #3
 800364c:	d909      	bls.n	8003662 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003656:	f023 0303 	bic.w	r3, r3, #3
 800365a:	1d1a      	adds	r2, r3, #4
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	659a      	str	r2, [r3, #88]	; 0x58
 8003660:	e007      	b.n	8003672 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800366a:	f023 0303 	bic.w	r3, r3, #3
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003676:	4618      	mov	r0, r3
 8003678:	3714      	adds	r7, #20
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
 8003682:	bf00      	nop
 8003684:	aaaaaaab 	.word	0xaaaaaaab
 8003688:	0801d130 	.word	0x0801d130

0800368c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800368c:	b480      	push	{r7}
 800368e:	b085      	sub	sp, #20
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003694:	2300      	movs	r3, #0
 8003696:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800369c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	699b      	ldr	r3, [r3, #24]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d11f      	bne.n	80036e6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	2b03      	cmp	r3, #3
 80036aa:	d856      	bhi.n	800375a <DMA_CheckFifoParam+0xce>
 80036ac:	a201      	add	r2, pc, #4	; (adr r2, 80036b4 <DMA_CheckFifoParam+0x28>)
 80036ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036b2:	bf00      	nop
 80036b4:	080036c5 	.word	0x080036c5
 80036b8:	080036d7 	.word	0x080036d7
 80036bc:	080036c5 	.word	0x080036c5
 80036c0:	0800375b 	.word	0x0800375b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d046      	beq.n	800375e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036d4:	e043      	b.n	800375e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036da:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80036de:	d140      	bne.n	8003762 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036e4:	e03d      	b.n	8003762 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	699b      	ldr	r3, [r3, #24]
 80036ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036ee:	d121      	bne.n	8003734 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	2b03      	cmp	r3, #3
 80036f4:	d837      	bhi.n	8003766 <DMA_CheckFifoParam+0xda>
 80036f6:	a201      	add	r2, pc, #4	; (adr r2, 80036fc <DMA_CheckFifoParam+0x70>)
 80036f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036fc:	0800370d 	.word	0x0800370d
 8003700:	08003713 	.word	0x08003713
 8003704:	0800370d 	.word	0x0800370d
 8003708:	08003725 	.word	0x08003725
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	73fb      	strb	r3, [r7, #15]
      break;
 8003710:	e030      	b.n	8003774 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003716:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d025      	beq.n	800376a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003722:	e022      	b.n	800376a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003728:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800372c:	d11f      	bne.n	800376e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003732:	e01c      	b.n	800376e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	2b02      	cmp	r3, #2
 8003738:	d903      	bls.n	8003742 <DMA_CheckFifoParam+0xb6>
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	2b03      	cmp	r3, #3
 800373e:	d003      	beq.n	8003748 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003740:	e018      	b.n	8003774 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	73fb      	strb	r3, [r7, #15]
      break;
 8003746:	e015      	b.n	8003774 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800374c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d00e      	beq.n	8003772 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	73fb      	strb	r3, [r7, #15]
      break;
 8003758:	e00b      	b.n	8003772 <DMA_CheckFifoParam+0xe6>
      break;
 800375a:	bf00      	nop
 800375c:	e00a      	b.n	8003774 <DMA_CheckFifoParam+0xe8>
      break;
 800375e:	bf00      	nop
 8003760:	e008      	b.n	8003774 <DMA_CheckFifoParam+0xe8>
      break;
 8003762:	bf00      	nop
 8003764:	e006      	b.n	8003774 <DMA_CheckFifoParam+0xe8>
      break;
 8003766:	bf00      	nop
 8003768:	e004      	b.n	8003774 <DMA_CheckFifoParam+0xe8>
      break;
 800376a:	bf00      	nop
 800376c:	e002      	b.n	8003774 <DMA_CheckFifoParam+0xe8>
      break;   
 800376e:	bf00      	nop
 8003770:	e000      	b.n	8003774 <DMA_CheckFifoParam+0xe8>
      break;
 8003772:	bf00      	nop
    }
  } 
  
  return status; 
 8003774:	7bfb      	ldrb	r3, [r7, #15]
}
 8003776:	4618      	mov	r0, r3
 8003778:	3714      	adds	r7, #20
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop

08003784 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b088      	sub	sp, #32
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 800378c:	2300      	movs	r3, #0
 800378e:	61fb      	str	r3, [r7, #28]
 8003790:	2300      	movs	r3, #0
 8003792:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8003794:	4ba1      	ldr	r3, [pc, #644]	; (8003a1c <HAL_ETH_Init+0x298>)
 8003796:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8003798:	2300      	movs	r3, #0
 800379a:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 800379c:	2300      	movs	r3, #0
 800379e:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d101      	bne.n	80037aa <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e182      	b.n	8003ab0 <HAL_ETH_Init+0x32c>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d106      	bne.n	80037c4 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f004 feac 	bl	800851c <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037c4:	2300      	movs	r3, #0
 80037c6:	60bb      	str	r3, [r7, #8]
 80037c8:	4b95      	ldr	r3, [pc, #596]	; (8003a20 <HAL_ETH_Init+0x29c>)
 80037ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037cc:	4a94      	ldr	r2, [pc, #592]	; (8003a20 <HAL_ETH_Init+0x29c>)
 80037ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037d2:	6453      	str	r3, [r2, #68]	; 0x44
 80037d4:	4b92      	ldr	r3, [pc, #584]	; (8003a20 <HAL_ETH_Init+0x29c>)
 80037d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037dc:	60bb      	str	r3, [r7, #8]
 80037de:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80037e0:	4b90      	ldr	r3, [pc, #576]	; (8003a24 <HAL_ETH_Init+0x2a0>)
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	4a8f      	ldr	r2, [pc, #572]	; (8003a24 <HAL_ETH_Init+0x2a0>)
 80037e6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80037ea:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80037ec:	4b8d      	ldr	r3, [pc, #564]	; (8003a24 <HAL_ETH_Init+0x2a0>)
 80037ee:	685a      	ldr	r2, [r3, #4]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6a1b      	ldr	r3, [r3, #32]
 80037f4:	498b      	ldr	r1, [pc, #556]	; (8003a24 <HAL_ETH_Init+0x2a0>)
 80037f6:	4313      	orrs	r3, r2
 80037f8:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	6812      	ldr	r2, [r2, #0]
 8003808:	f043 0301 	orr.w	r3, r3, #1
 800380c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003810:	6013      	str	r3, [r2, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8003812:	f7ff fa73 	bl	8002cfc <HAL_GetTick>
 8003816:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8003818:	e011      	b.n	800383e <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800381a:	f7ff fa6f 	bl	8002cfc <HAL_GetTick>
 800381e:	4602      	mov	r2, r0
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	1ad3      	subs	r3, r2, r3
 8003824:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003828:	d909      	bls.n	800383e <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2203      	movs	r2, #3
 800382e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e138      	b.n	8003ab0 <HAL_ETH_Init+0x32c>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0301 	and.w	r3, r3, #1
 800384c:	2b00      	cmp	r3, #0
 800384e:	d1e4      	bne.n	800381a <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	691b      	ldr	r3, [r3, #16]
 8003856:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	f023 031c 	bic.w	r3, r3, #28
 800385e:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003860:	f002 fb92 	bl	8005f88 <HAL_RCC_GetHCLKFreq>
 8003864:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8003866:	69bb      	ldr	r3, [r7, #24]
 8003868:	4a6f      	ldr	r2, [pc, #444]	; (8003a28 <HAL_ETH_Init+0x2a4>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d908      	bls.n	8003880 <HAL_ETH_Init+0xfc>
 800386e:	69bb      	ldr	r3, [r7, #24]
 8003870:	4a6e      	ldr	r2, [pc, #440]	; (8003a2c <HAL_ETH_Init+0x2a8>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d804      	bhi.n	8003880 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	f043 0308 	orr.w	r3, r3, #8
 800387c:	61fb      	str	r3, [r7, #28]
 800387e:	e027      	b.n	80038d0 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	4a6a      	ldr	r2, [pc, #424]	; (8003a2c <HAL_ETH_Init+0x2a8>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d908      	bls.n	800389a <HAL_ETH_Init+0x116>
 8003888:	69bb      	ldr	r3, [r7, #24]
 800388a:	4a64      	ldr	r2, [pc, #400]	; (8003a1c <HAL_ETH_Init+0x298>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d204      	bcs.n	800389a <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	f043 030c 	orr.w	r3, r3, #12
 8003896:	61fb      	str	r3, [r7, #28]
 8003898:	e01a      	b.n	80038d0 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	4a5f      	ldr	r2, [pc, #380]	; (8003a1c <HAL_ETH_Init+0x298>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d303      	bcc.n	80038aa <HAL_ETH_Init+0x126>
 80038a2:	69bb      	ldr	r3, [r7, #24]
 80038a4:	4a62      	ldr	r2, [pc, #392]	; (8003a30 <HAL_ETH_Init+0x2ac>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d911      	bls.n	80038ce <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80038aa:	69bb      	ldr	r3, [r7, #24]
 80038ac:	4a60      	ldr	r2, [pc, #384]	; (8003a30 <HAL_ETH_Init+0x2ac>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d908      	bls.n	80038c4 <HAL_ETH_Init+0x140>
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	4a5f      	ldr	r2, [pc, #380]	; (8003a34 <HAL_ETH_Init+0x2b0>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d804      	bhi.n	80038c4 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	f043 0304 	orr.w	r3, r3, #4
 80038c0:	61fb      	str	r3, [r7, #28]
 80038c2:	e005      	b.n	80038d0 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	f043 0310 	orr.w	r3, r3, #16
 80038ca:	61fb      	str	r3, [r7, #28]
 80038cc:	e000      	b.n	80038d0 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80038ce:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	69fa      	ldr	r2, [r7, #28]
 80038d6:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80038d8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80038dc:	2100      	movs	r1, #0
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f000 fc10 	bl	8004104 <HAL_ETH_WritePHYRegister>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d00b      	beq.n	8003902 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80038ee:	6939      	ldr	r1, [r7, #16]
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f000 fdc5 	bl	8004480 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2201      	movs	r2, #1
 80038fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e0d6      	b.n	8003ab0 <HAL_ETH_Init+0x32c>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8003902:	20ff      	movs	r0, #255	; 0xff
 8003904:	f7ff fa06 	bl	8002d14 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	2b00      	cmp	r3, #0
 800390e:	f000 80a4 	beq.w	8003a5a <HAL_ETH_Init+0x2d6>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003912:	f7ff f9f3 	bl	8002cfc <HAL_GetTick>
 8003916:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8003918:	f107 030c 	add.w	r3, r7, #12
 800391c:	461a      	mov	r2, r3
 800391e:	2101      	movs	r1, #1
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f000 fb87 	bl	8004034 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8003926:	f7ff f9e9 	bl	8002cfc <HAL_GetTick>
 800392a:	4602      	mov	r2, r0
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	f241 3288 	movw	r2, #5000	; 0x1388
 8003934:	4293      	cmp	r3, r2
 8003936:	d90f      	bls.n	8003958 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800393c:	6939      	ldr	r1, [r7, #16]
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f000 fd9e 	bl	8004480 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8003954:	2303      	movs	r3, #3
 8003956:	e0ab      	b.n	8003ab0 <HAL_ETH_Init+0x32c>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f003 0304 	and.w	r3, r3, #4
 800395e:	2b00      	cmp	r3, #0
 8003960:	d0da      	beq.n	8003918 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8003962:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003966:	2100      	movs	r1, #0
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f000 fbcb 	bl	8004104 <HAL_ETH_WritePHYRegister>
 800396e:	4603      	mov	r3, r0
 8003970:	2b00      	cmp	r3, #0
 8003972:	d00b      	beq.n	800398c <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8003978:	6939      	ldr	r1, [r7, #16]
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 fd80 	bl	8004480 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8003988:	2301      	movs	r3, #1
 800398a:	e091      	b.n	8003ab0 <HAL_ETH_Init+0x32c>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 800398c:	f7ff f9b6 	bl	8002cfc <HAL_GetTick>
 8003990:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8003992:	f107 030c 	add.w	r3, r7, #12
 8003996:	461a      	mov	r2, r3
 8003998:	2101      	movs	r1, #1
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f000 fb4a 	bl	8004034 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80039a0:	f7ff f9ac 	bl	8002cfc <HAL_GetTick>
 80039a4:	4602      	mov	r2, r0
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d90f      	bls.n	80039d2 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80039b6:	6939      	ldr	r1, [r7, #16]
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f000 fd61 	bl	8004480 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2201      	movs	r2, #1
 80039c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e06e      	b.n	8003ab0 <HAL_ETH_Init+0x32c>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	f003 0320 	and.w	r3, r3, #32
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d0da      	beq.n	8003992 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80039dc:	f107 030c 	add.w	r3, r7, #12
 80039e0:	461a      	mov	r2, r3
 80039e2:	2110      	movs	r1, #16
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f000 fb25 	bl	8004034 <HAL_ETH_ReadPHYRegister>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d00b      	beq.n	8003a08 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80039f4:	6939      	ldr	r1, [r7, #16]
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f000 fd42 	bl	8004480 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8003a04:	2301      	movs	r3, #1
 8003a06:	e053      	b.n	8003ab0 <HAL_ETH_Init+0x32c>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f003 0304 	and.w	r3, r3, #4
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d012      	beq.n	8003a38 <HAL_ETH_Init+0x2b4>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a18:	60da      	str	r2, [r3, #12]
 8003a1a:	e010      	b.n	8003a3e <HAL_ETH_Init+0x2ba>
 8003a1c:	03938700 	.word	0x03938700
 8003a20:	40023800 	.word	0x40023800
 8003a24:	40013800 	.word	0x40013800
 8003a28:	01312cff 	.word	0x01312cff
 8003a2c:	02160ebf 	.word	0x02160ebf
 8003a30:	05f5e0ff 	.word	0x05f5e0ff
 8003a34:	08f0d17f 	.word	0x08f0d17f
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	f003 0302 	and.w	r3, r3, #2
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d003      	beq.n	8003a50 <HAL_ETH_Init+0x2cc>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	609a      	str	r2, [r3, #8]
 8003a4e:	e026      	b.n	8003a9e <HAL_ETH_Init+0x31a>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003a56:	609a      	str	r2, [r3, #8]
 8003a58:	e021      	b.n	8003a9e <HAL_ETH_Init+0x31a>
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	08db      	lsrs	r3, r3, #3
 8003a60:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	085b      	lsrs	r3, r3, #1
 8003a68:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	461a      	mov	r2, r3
 8003a70:	2100      	movs	r1, #0
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f000 fb46 	bl	8004104 <HAL_ETH_WritePHYRegister>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d00b      	beq.n	8003a96 <HAL_ETH_Init+0x312>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8003a82:	6939      	ldr	r1, [r7, #16]
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f000 fcfb 	bl	8004480 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e00c      	b.n	8003ab0 <HAL_ETH_Init+0x32c>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8003a96:	f640 70ff 	movw	r0, #4095	; 0xfff
 8003a9a:	f7ff f93b 	bl	8002d14 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8003a9e:	6939      	ldr	r1, [r7, #16]
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f000 fced 	bl	8004480 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8003aae:	2300      	movs	r3, #0
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3720      	adds	r7, #32
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b087      	sub	sp, #28
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	60f8      	str	r0, [r7, #12]
 8003ac0:	60b9      	str	r1, [r7, #8]
 8003ac2:	607a      	str	r2, [r7, #4]
 8003ac4:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d101      	bne.n	8003ad8 <HAL_ETH_DMATxDescListInit+0x20>
 8003ad4:	2302      	movs	r3, #2
 8003ad6:	e051      	b.n	8003b7c <HAL_ETH_DMATxDescListInit+0xc4>
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2201      	movs	r2, #1
 8003adc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2202      	movs	r2, #2
 8003ae4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	68ba      	ldr	r2, [r7, #8]
 8003aec:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 8003aee:	2300      	movs	r3, #0
 8003af0:	617b      	str	r3, [r7, #20]
 8003af2:	e030      	b.n	8003b56 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	015b      	lsls	r3, r3, #5
 8003af8:	68ba      	ldr	r2, [r7, #8]
 8003afa:	4413      	add	r3, r2
 8003afc:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003b04:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003b0c:	fb02 f303 	mul.w	r3, r2, r3
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	4413      	add	r3, r2
 8003b14:	461a      	mov	r2, r3
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	69db      	ldr	r3, [r3, #28]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d105      	bne.n	8003b2e <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	3b01      	subs	r3, #1
 8003b32:	697a      	ldr	r2, [r7, #20]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d208      	bcs.n	8003b4a <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	015b      	lsls	r3, r3, #5
 8003b3e:	68ba      	ldr	r2, [r7, #8]
 8003b40:	4413      	add	r3, r2
 8003b42:	461a      	mov	r2, r3
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	60da      	str	r2, [r3, #12]
 8003b48:	e002      	b.n	8003b50 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8003b4a:	68ba      	ldr	r2, [r7, #8]
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	3301      	adds	r3, #1
 8003b54:	617b      	str	r3, [r7, #20]
 8003b56:	697a      	ldr	r2, [r7, #20]
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d3ca      	bcc.n	8003af4 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003b68:	6113      	str	r3, [r2, #16]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2200      	movs	r2, #0
 8003b76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003b7a:	2300      	movs	r3, #0
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	371c      	adds	r7, #28
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr

08003b88 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b087      	sub	sp, #28
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	60b9      	str	r1, [r7, #8]
 8003b92:	607a      	str	r2, [r7, #4]
 8003b94:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8003b96:	2300      	movs	r3, #0
 8003b98:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d101      	bne.n	8003ba8 <HAL_ETH_DMARxDescListInit+0x20>
 8003ba4:	2302      	movs	r3, #2
 8003ba6:	e055      	b.n	8003c54 <HAL_ETH_DMARxDescListInit+0xcc>
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2202      	movs	r2, #2
 8003bb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	68ba      	ldr	r2, [r7, #8]
 8003bbc:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	617b      	str	r3, [r7, #20]
 8003bc2:	e034      	b.n	8003c2e <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	015b      	lsls	r3, r3, #5
 8003bc8:	68ba      	ldr	r2, [r7, #8]
 8003bca:	4413      	add	r3, r2
 8003bcc:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003bd4:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8003bdc:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003be4:	fb02 f303 	mul.w	r3, r2, r3
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	4413      	add	r3, r2
 8003bec:	461a      	mov	r2, r3
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	699b      	ldr	r3, [r3, #24]
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d105      	bne.n	8003c06 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	3b01      	subs	r3, #1
 8003c0a:	697a      	ldr	r2, [r7, #20]
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d208      	bcs.n	8003c22 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	3301      	adds	r3, #1
 8003c14:	015b      	lsls	r3, r3, #5
 8003c16:	68ba      	ldr	r2, [r7, #8]
 8003c18:	4413      	add	r3, r2
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	60da      	str	r2, [r3, #12]
 8003c20:	e002      	b.n	8003c28 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8003c22:	68ba      	ldr	r2, [r7, #8]
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	617b      	str	r3, [r7, #20]
 8003c2e:	697a      	ldr	r2, [r7, #20]
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d3c6      	bcc.n	8003bc4 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003c40:	60d3      	str	r3, [r2, #12]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2201      	movs	r2, #1
 8003c46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003c52:	2300      	movs	r3, #0
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	371c      	adds	r7, #28
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr

08003c60 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b087      	sub	sp, #28
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	617b      	str	r3, [r7, #20]
 8003c6e:	2300      	movs	r3, #0
 8003c70:	60fb      	str	r3, [r7, #12]
 8003c72:	2300      	movs	r3, #0
 8003c74:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d101      	bne.n	8003c84 <HAL_ETH_TransmitFrame+0x24>
 8003c80:	2302      	movs	r3, #2
 8003c82:	e0cc      	b.n	8003e1e <HAL_ETH_TransmitFrame+0x1be>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2202      	movs	r2, #2
 8003c90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d109      	bne.n	8003cae <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8003caa:	2301      	movs	r3, #1
 8003cac:	e0b7      	b.n	8003e1e <HAL_ETH_TransmitFrame+0x1be>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	da09      	bge.n	8003ccc <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2212      	movs	r2, #18
 8003cbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e0a8      	b.n	8003e1e <HAL_ETH_TransmitFrame+0x1be>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d915      	bls.n	8003d02 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	4a54      	ldr	r2, [pc, #336]	; (8003e2c <HAL_ETH_TransmitFrame+0x1cc>)
 8003cda:	fba2 2303 	umull	r2, r3, r2, r3
 8003cde:	0a9b      	lsrs	r3, r3, #10
 8003ce0:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8003ce2:	683a      	ldr	r2, [r7, #0]
 8003ce4:	4b51      	ldr	r3, [pc, #324]	; (8003e2c <HAL_ETH_TransmitFrame+0x1cc>)
 8003ce6:	fba3 1302 	umull	r1, r3, r3, r2
 8003cea:	0a9b      	lsrs	r3, r3, #10
 8003cec:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8003cf0:	fb01 f303 	mul.w	r3, r1, r3
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d005      	beq.n	8003d06 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	3301      	adds	r3, #1
 8003cfe:	617b      	str	r3, [r7, #20]
 8003d00:	e001      	b.n	8003d06 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8003d02:	2301      	movs	r3, #1
 8003d04:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d11c      	bne.n	8003d46 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d16:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8003d1a:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d20:	683a      	ldr	r2, [r7, #0]
 8003d22:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8003d26:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d32:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003d36:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	461a      	mov	r2, r3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	62da      	str	r2, [r3, #44]	; 0x2c
 8003d44:	e04b      	b.n	8003dde <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8003d46:	2300      	movs	r3, #0
 8003d48:	613b      	str	r3, [r7, #16]
 8003d4a:	e044      	b.n	8003dd6 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d56:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003d5a:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d107      	bne.n	8003d72 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d6c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003d70:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d76:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003d7a:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	3b01      	subs	r3, #1
 8003d80:	693a      	ldr	r2, [r7, #16]
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d116      	bne.n	8003db4 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d90:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003d94:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	4a25      	ldr	r2, [pc, #148]	; (8003e30 <HAL_ETH_TransmitFrame+0x1d0>)
 8003d9a:	fb03 f202 	mul.w	r2, r3, r2
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	4413      	add	r3, r2
 8003da2:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003da6:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dac:	68fa      	ldr	r2, [r7, #12]
 8003dae:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8003db2:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dbe:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003dc2:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	461a      	mov	r2, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	3301      	adds	r3, #1
 8003dd4:	613b      	str	r3, [r7, #16]
 8003dd6:	693a      	ldr	r2, [r7, #16]
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d3b6      	bcc.n	8003d4c <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003de6:	695b      	ldr	r3, [r3, #20]
 8003de8:	f003 0304 	and.w	r3, r3, #4
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d00d      	beq.n	8003e0c <HAL_ETH_TransmitFrame+0x1ac>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003df8:	461a      	mov	r2, r3
 8003dfa:	2304      	movs	r3, #4
 8003dfc:	6153      	str	r3, [r2, #20]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e06:	461a      	mov	r2, r3
 8003e08:	2300      	movs	r3, #0
 8003e0a:	6053      	str	r3, [r2, #4]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	371c      	adds	r7, #28
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr
 8003e2a:	bf00      	nop
 8003e2c:	ac02b00b 	.word	0xac02b00b
 8003e30:	fffffa0c 	.word	0xfffffa0c

08003e34 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b085      	sub	sp, #20
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d101      	bne.n	8003e4e <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8003e4a:	2302      	movs	r3, #2
 8003e4c:	e074      	b.n	8003f38 <HAL_ETH_GetReceivedFrame_IT+0x104>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2201      	movs	r2, #1
 8003e52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2202      	movs	r2, #2
 8003e5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8003e5e:	e05a      	b.n	8003f16 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	3301      	adds	r3, #1
 8003e64:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e74:	d10d      	bne.n	8003e92 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2201      	movs	r2, #1
 8003e82:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	629a      	str	r2, [r3, #40]	; 0x28
 8003e90:	e041      	b.n	8003f16 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d10b      	bne.n	8003eb8 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea4:	1c5a      	adds	r2, r3, #1
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	629a      	str	r2, [r3, #40]	; 0x28
 8003eb6:	e02e      	b.n	8003f16 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec4:	1c5a      	adds	r2, r3, #1
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d103      	bne.n	8003eda <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	0c1b      	lsrs	r3, r3, #16
 8003ee2:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8003ee6:	1f1a      	subs	r2, r3, #4
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef0:	689a      	ldr	r2, [r3, #8]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	461a      	mov	r2, r3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2201      	movs	r2, #1
 8003f06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8003f12:	2300      	movs	r3, #0
 8003f14:	e010      	b.n	8003f38 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	db02      	blt.n	8003f26 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2b03      	cmp	r3, #3
 8003f24:	d99c      	bls.n	8003e60 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2201      	movs	r2, #1
 8003f2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3714      	adds	r7, #20
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b082      	sub	sp, #8
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f54:	695b      	ldr	r3, [r3, #20]
 8003f56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f5a:	2b40      	cmp	r3, #64	; 0x40
 8003f5c:	d112      	bne.n	8003f84 <HAL_ETH_IRQHandler+0x40>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f004 fb8a 	bl	8008678 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	2340      	movs	r3, #64	; 0x40
 8003f70:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2201      	movs	r2, #1
 8003f76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f82:	e01a      	b.n	8003fba <HAL_ETH_IRQHandler+0x76>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f8c:	695b      	ldr	r3, [r3, #20]
 8003f8e:	f003 0301 	and.w	r3, r3, #1
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d111      	bne.n	8003fba <HAL_ETH_IRQHandler+0x76>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f000 f838 	bl	800400c <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2201      	movs	r2, #1
 8003fae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003fc8:	6153      	str	r3, [r2, #20]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fd2:	695b      	ldr	r3, [r3, #20]
 8003fd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003fd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fdc:	d112      	bne.n	8004004 <HAL_ETH_IRQHandler+0xc0>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f000 f81e 	bl	8004020 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fec:	461a      	mov	r2, r3
 8003fee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ff2:	6153      	str	r3, [r2, #20]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8004004:	bf00      	nop
 8004006:	3708      	adds	r7, #8
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}

0800400c <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 800400c:	b480      	push	{r7}
 800400e:	b083      	sub	sp, #12
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8004014:	bf00      	nop
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8004028:	bf00      	nop
 800402a:	370c      	adds	r7, #12
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr

08004034 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b086      	sub	sp, #24
 8004038:	af00      	add	r7, sp, #0
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	460b      	mov	r3, r1
 800403e:	607a      	str	r2, [r7, #4]
 8004040:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8004042:	2300      	movs	r3, #0
 8004044:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8004046:	2300      	movs	r3, #0
 8004048:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004050:	b2db      	uxtb	r3, r3
 8004052:	2b82      	cmp	r3, #130	; 0x82
 8004054:	d101      	bne.n	800405a <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8004056:	2302      	movs	r3, #2
 8004058:	e050      	b.n	80040fc <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2282      	movs	r2, #130	; 0x82
 800405e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	691b      	ldr	r3, [r3, #16]
 8004068:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	f003 031c 	and.w	r3, r3, #28
 8004070:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	8a1b      	ldrh	r3, [r3, #16]
 8004076:	02db      	lsls	r3, r3, #11
 8004078:	b29b      	uxth	r3, r3
 800407a:	697a      	ldr	r2, [r7, #20]
 800407c:	4313      	orrs	r3, r2
 800407e:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8004080:	897b      	ldrh	r3, [r7, #10]
 8004082:	019b      	lsls	r3, r3, #6
 8004084:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8004088:	697a      	ldr	r2, [r7, #20]
 800408a:	4313      	orrs	r3, r2
 800408c:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	f023 0302 	bic.w	r3, r3, #2
 8004094:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	f043 0301 	orr.w	r3, r3, #1
 800409c:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	697a      	ldr	r2, [r7, #20]
 80040a4:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80040a6:	f7fe fe29 	bl	8002cfc <HAL_GetTick>
 80040aa:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80040ac:	e015      	b.n	80040da <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80040ae:	f7fe fe25 	bl	8002cfc <HAL_GetTick>
 80040b2:	4602      	mov	r2, r0
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040bc:	d309      	bcc.n	80040d2 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2201      	movs	r2, #1
 80040c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2200      	movs	r2, #0
 80040ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e014      	b.n	80040fc <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	691b      	ldr	r3, [r3, #16]
 80040d8:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	f003 0301 	and.w	r3, r3, #1
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d1e4      	bne.n	80040ae <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	695b      	ldr	r3, [r3, #20]
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	461a      	mov	r2, r3
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2201      	movs	r2, #1
 80040f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80040fa:	2300      	movs	r3, #0
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3718      	adds	r7, #24
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}

08004104 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b086      	sub	sp, #24
 8004108:	af00      	add	r7, sp, #0
 800410a:	60f8      	str	r0, [r7, #12]
 800410c:	460b      	mov	r3, r1
 800410e:	607a      	str	r2, [r7, #4]
 8004110:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8004112:	2300      	movs	r3, #0
 8004114:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8004116:	2300      	movs	r3, #0
 8004118:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004120:	b2db      	uxtb	r3, r3
 8004122:	2b42      	cmp	r3, #66	; 0x42
 8004124:	d101      	bne.n	800412a <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8004126:	2302      	movs	r3, #2
 8004128:	e04e      	b.n	80041c8 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2242      	movs	r2, #66	; 0x42
 800412e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	691b      	ldr	r3, [r3, #16]
 8004138:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	f003 031c 	and.w	r3, r3, #28
 8004140:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	8a1b      	ldrh	r3, [r3, #16]
 8004146:	02db      	lsls	r3, r3, #11
 8004148:	b29b      	uxth	r3, r3
 800414a:	697a      	ldr	r2, [r7, #20]
 800414c:	4313      	orrs	r3, r2
 800414e:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8004150:	897b      	ldrh	r3, [r7, #10]
 8004152:	019b      	lsls	r3, r3, #6
 8004154:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8004158:	697a      	ldr	r2, [r7, #20]
 800415a:	4313      	orrs	r3, r2
 800415c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	f043 0302 	orr.w	r3, r3, #2
 8004164:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	f043 0301 	orr.w	r3, r3, #1
 800416c:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	b29a      	uxth	r2, r3
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	697a      	ldr	r2, [r7, #20]
 800417e:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8004180:	f7fe fdbc 	bl	8002cfc <HAL_GetTick>
 8004184:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004186:	e015      	b.n	80041b4 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8004188:	f7fe fdb8 	bl	8002cfc <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004196:	d309      	bcc.n	80041ac <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80041a8:	2303      	movs	r3, #3
 80041aa:	e00d      	b.n	80041c8 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	691b      	ldr	r3, [r3, #16]
 80041b2:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	f003 0301 	and.w	r3, r3, #1
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d1e4      	bne.n	8004188 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2201      	movs	r2, #1
 80041c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 80041c6:	2300      	movs	r3, #0
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3718      	adds	r7, #24
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b082      	sub	sp, #8
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d101      	bne.n	80041e6 <HAL_ETH_Start+0x16>
 80041e2:	2302      	movs	r3, #2
 80041e4:	e01f      	b.n	8004226 <HAL_ETH_Start+0x56>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2201      	movs	r2, #1
 80041ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2202      	movs	r2, #2
 80041f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f000 fb40 	bl	800487c <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	f000 fb77 	bl	80048f0 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f000 fc06 	bl	8004a14 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f000 fbab 	bl	8004964 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f000 fbd4 	bl	80049bc <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	3708      	adds	r7, #8
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}

0800422e <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 800422e:	b580      	push	{r7, lr}
 8004230:	b082      	sub	sp, #8
 8004232:	af00      	add	r7, sp, #0
 8004234:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800423c:	2b01      	cmp	r3, #1
 800423e:	d101      	bne.n	8004244 <HAL_ETH_Stop+0x16>
 8004240:	2302      	movs	r3, #2
 8004242:	e01f      	b.n	8004284 <HAL_ETH_Stop+0x56>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2202      	movs	r2, #2
 8004250:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f000 fb9b 	bl	8004990 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f000 fbc4 	bl	80049e8 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f000 fb62 	bl	800492a <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f000 fbd4 	bl	8004a14 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f000 fb22 	bl	80048b6 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2201      	movs	r2, #1
 8004276:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8004282:	2300      	movs	r3, #0
}
 8004284:	4618      	mov	r0, r3
 8004286:	3708      	adds	r7, #8
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8004296:	2300      	movs	r3, #0
 8004298:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d101      	bne.n	80042a8 <HAL_ETH_ConfigMAC+0x1c>
 80042a4:	2302      	movs	r3, #2
 80042a6:	e0e4      	b.n	8004472 <HAL_ETH_ConfigMAC+0x1e6>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2202      	movs	r2, #2
 80042b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	f000 80b1 	beq.w	8004422 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80042c8:	68fa      	ldr	r2, [r7, #12]
 80042ca:	4b6c      	ldr	r3, [pc, #432]	; (800447c <HAL_ETH_ConfigMAC+0x1f0>)
 80042cc:	4013      	ands	r3, r2
 80042ce:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80042d8:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 80042de:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 80042e4:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 80042ea:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 80042f0:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 80042f6:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 80042fc:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8004302:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8004308:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 800430e:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8004314:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 800431a:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 800431c:	68fa      	ldr	r2, [r7, #12]
 800431e:	4313      	orrs	r3, r2
 8004320:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	68fa      	ldr	r2, [r7, #12]
 8004328:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004332:	2001      	movs	r0, #1
 8004334:	f7fe fcee 	bl	8002d14 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	68fa      	ldr	r2, [r7, #12]
 800433e:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8004348:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 800434e:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8004354:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 800435a:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8004360:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8004366:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8004372:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8004374:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800437e:	2001      	movs	r0, #1
 8004380:	f7fe fcc8 	bl	8002d14 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	68fa      	ldr	r2, [r7, #12]
 800438a:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	683a      	ldr	r2, [r7, #0]
 8004392:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004394:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	683a      	ldr	r2, [r7, #0]
 800439c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800439e:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	699b      	ldr	r3, [r3, #24]
 80043a6:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80043a8:	68fa      	ldr	r2, [r7, #12]
 80043aa:	f64f 7341 	movw	r3, #65345	; 0xff41
 80043ae:	4013      	ands	r3, r2
 80043b0:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043b6:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80043bc:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 80043c2:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 80043c8:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 80043ce:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 80043d4:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80043d6:	68fa      	ldr	r2, [r7, #12]
 80043d8:	4313      	orrs	r3, r2
 80043da:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	68fa      	ldr	r2, [r7, #12]
 80043e2:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	699b      	ldr	r3, [r3, #24]
 80043ea:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80043ec:	2001      	movs	r0, #1
 80043ee:	f7fe fc91 	bl	8002d14 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	68fa      	ldr	r2, [r7, #12]
 80043f8:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	430a      	orrs	r2, r1
 8004408:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	69db      	ldr	r3, [r3, #28]
 8004410:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8004412:	2001      	movs	r0, #1
 8004414:	f7fe fc7e 	bl	8002d14 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	68fa      	ldr	r2, [r7, #12]
 800441e:	61da      	str	r2, [r3, #28]
 8004420:	e01e      	b.n	8004460 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8004430:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	689a      	ldr	r2, [r3, #8]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	4313      	orrs	r3, r2
 800443c:	68fa      	ldr	r2, [r7, #12]
 800443e:	4313      	orrs	r3, r2
 8004440:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	68fa      	ldr	r2, [r7, #12]
 8004448:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004452:	2001      	movs	r0, #1
 8004454:	f7fe fc5e 	bl	8002d14 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	68fa      	ldr	r2, [r7, #12]
 800445e:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8004470:	2300      	movs	r3, #0
}
 8004472:	4618      	mov	r0, r3
 8004474:	3710      	adds	r7, #16
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	ff20810f 	.word	0xff20810f

08004480 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b0b0      	sub	sp, #192	; 0xc0
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 800448a:	2300      	movs	r3, #0
 800448c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d007      	beq.n	80044a6 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800449c:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80044a4:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80044a6:	2300      	movs	r3, #0
 80044a8:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80044aa:	2300      	movs	r3, #0
 80044ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80044ae:	2300      	movs	r3, #0
 80044b0:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80044b2:	2300      	movs	r3, #0
 80044b4:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80044b6:	2300      	movs	r3, #0
 80044b8:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80044ba:	2300      	movs	r3, #0
 80044bc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	69db      	ldr	r3, [r3, #28]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d103      	bne.n	80044ce <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80044c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044ca:	663b      	str	r3, [r7, #96]	; 0x60
 80044cc:	e001      	b.n	80044d2 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80044ce:	2300      	movs	r3, #0
 80044d0:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80044d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80044d6:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80044d8:	2300      	movs	r3, #0
 80044da:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80044dc:	2300      	movs	r3, #0
 80044de:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80044e0:	2300      	movs	r3, #0
 80044e2:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80044e4:	2300      	movs	r3, #0
 80044e6:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80044e8:	2300      	movs	r3, #0
 80044ea:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80044ec:	2340      	movs	r3, #64	; 0x40
 80044ee:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80044f0:	2300      	movs	r3, #0
 80044f2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80044f6:	2300      	movs	r3, #0
 80044f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80044fc:	2300      	movs	r3, #0
 80044fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8004502:	2300      	movs	r3, #0
 8004504:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8004508:	2300      	movs	r3, #0
 800450a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 800450e:	2300      	movs	r3, #0
 8004510:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8004514:	2300      	movs	r3, #0
 8004516:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 800451a:	2300      	movs	r3, #0
 800451c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8004520:	2380      	movs	r3, #128	; 0x80
 8004522:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8004526:	2300      	movs	r3, #0
 8004528:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 800452c:	2300      	movs	r3, #0
 800452e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8004532:	2300      	movs	r3, #0
 8004534:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8004538:	2300      	movs	r3, #0
 800453a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800453e:	2300      	movs	r3, #0
 8004540:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8004544:	2300      	movs	r3, #0
 8004546:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8004554:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004558:	4baa      	ldr	r3, [pc, #680]	; (8004804 <ETH_MACDMAConfig+0x384>)
 800455a:	4013      	ands	r3, r2
 800455c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8004560:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8004562:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8004564:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8004566:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8004568:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 800456a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 800456c:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8004572:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8004574:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8004576:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8004578:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 800457a:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8004580:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8004582:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8004584:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8004586:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8004588:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 800458a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 800458c:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 800458e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8004590:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8004592:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8004594:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8004596:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800459a:	4313      	orrs	r3, r2
 800459c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80045a8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80045b4:	2001      	movs	r0, #1
 80045b6:	f7fe fbad 	bl	8002d14 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80045c2:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80045c4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80045c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80045c8:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80045ca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80045cc:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 80045ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80045d2:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80045d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 80045d8:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80045da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80045de:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 80045e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80045e4:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 80045e8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 80045f0:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80045f2:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80045fe:	2001      	movs	r0, #1
 8004600:	f7fe fb88 	bl	8002d14 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800460c:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004616:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8004620:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	699b      	ldr	r3, [r3, #24]
 8004628:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800462c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004630:	f64f 7341 	movw	r3, #65345	; 0xff41
 8004634:	4013      	ands	r3, r2
 8004636:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800463a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800463e:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8004640:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8004644:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8004646:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 800464a:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 800464c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8004650:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8004652:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8004656:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8004658:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 800465c:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800465e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004662:	4313      	orrs	r3, r2
 8004664:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004670:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	699b      	ldr	r3, [r3, #24]
 8004678:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800467c:	2001      	movs	r0, #1
 800467e:	f7fe fb49 	bl	8002d14 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800468a:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800468c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8004690:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	430a      	orrs	r2, r1
 800469a:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	69db      	ldr	r3, [r3, #28]
 80046a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80046a6:	2001      	movs	r0, #1
 80046a8:	f7fe fb34 	bl	8002d14 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80046b4:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80046b6:	2300      	movs	r3, #0
 80046b8:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80046ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80046be:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80046c0:	2300      	movs	r3, #0
 80046c2:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80046c4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80046c8:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80046ca:	2300      	movs	r3, #0
 80046cc:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80046ce:	2300      	movs	r3, #0
 80046d0:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80046d2:	2300      	movs	r3, #0
 80046d4:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80046d6:	2300      	movs	r3, #0
 80046d8:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80046da:	2304      	movs	r3, #4
 80046dc:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80046de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80046e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80046e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80046e8:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80046ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80046ee:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80046f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80046f4:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80046f6:	2380      	movs	r3, #128	; 0x80
 80046f8:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 80046fa:	2300      	movs	r3, #0
 80046fc:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80046fe:	2300      	movs	r3, #0
 8004700:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800470a:	699b      	ldr	r3, [r3, #24]
 800470c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8004710:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004714:	4b3c      	ldr	r3, [pc, #240]	; (8004808 <ETH_MACDMAConfig+0x388>)
 8004716:	4013      	ands	r3, r2
 8004718:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800471c:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 800471e:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8004720:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8004722:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8004724:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8004726:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8004728:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 800472a:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 800472c:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 800472e:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8004730:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8004732:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8004734:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8004736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8004738:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 800473a:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 800473c:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800473e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004742:	4313      	orrs	r3, r2
 8004744:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004750:	461a      	mov	r2, r3
 8004752:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004756:	6193      	str	r3, [r2, #24]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004760:	699b      	ldr	r3, [r3, #24]
 8004762:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004766:	2001      	movs	r0, #1
 8004768:	f7fe fad4 	bl	8002d14 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004774:	461a      	mov	r2, r3
 8004776:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800477a:	6193      	str	r3, [r2, #24]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800477c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800477e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8004780:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8004782:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8004784:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8004786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8004788:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 800478a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 800478c:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 800478e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004790:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8004792:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8004794:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8004796:	4313      	orrs	r3, r2
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	6812      	ldr	r2, [r2, #0]
 800479c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80047a0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80047a4:	6013      	str	r3, [r2, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80047b4:	2001      	movs	r0, #1
 80047b6:	f7fe faad 	bl	8002d14 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047c2:	461a      	mov	r2, r3
 80047c4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80047c8:	6013      	str	r3, [r2, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	699b      	ldr	r3, [r3, #24]
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d10d      	bne.n	80047ee <ETH_MACDMAConfig+0x36e>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047da:	69db      	ldr	r3, [r3, #28]
 80047dc:	687a      	ldr	r2, [r7, #4]
 80047de:	6812      	ldr	r2, [r2, #0]
 80047e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047e8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80047ec:	61d3      	str	r3, [r2, #28]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	695b      	ldr	r3, [r3, #20]
 80047f2:	461a      	mov	r2, r3
 80047f4:	2100      	movs	r1, #0
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f000 f808 	bl	800480c <ETH_MACAddressConfig>
}
 80047fc:	bf00      	nop
 80047fe:	37c0      	adds	r7, #192	; 0xc0
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}
 8004804:	ff20810f 	.word	0xff20810f
 8004808:	f8de3f23 	.word	0xf8de3f23

0800480c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800480c:	b480      	push	{r7}
 800480e:	b087      	sub	sp, #28
 8004810:	af00      	add	r7, sp, #0
 8004812:	60f8      	str	r0, [r7, #12]
 8004814:	60b9      	str	r1, [r7, #8]
 8004816:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	3305      	adds	r3, #5
 800481c:	781b      	ldrb	r3, [r3, #0]
 800481e:	021b      	lsls	r3, r3, #8
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	3204      	adds	r2, #4
 8004824:	7812      	ldrb	r2, [r2, #0]
 8004826:	4313      	orrs	r3, r2
 8004828:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800482a:	68ba      	ldr	r2, [r7, #8]
 800482c:	4b11      	ldr	r3, [pc, #68]	; (8004874 <ETH_MACAddressConfig+0x68>)
 800482e:	4413      	add	r3, r2
 8004830:	461a      	mov	r2, r3
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	3303      	adds	r3, #3
 800483a:	781b      	ldrb	r3, [r3, #0]
 800483c:	061a      	lsls	r2, r3, #24
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	3302      	adds	r3, #2
 8004842:	781b      	ldrb	r3, [r3, #0]
 8004844:	041b      	lsls	r3, r3, #16
 8004846:	431a      	orrs	r2, r3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	3301      	adds	r3, #1
 800484c:	781b      	ldrb	r3, [r3, #0]
 800484e:	021b      	lsls	r3, r3, #8
 8004850:	4313      	orrs	r3, r2
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	7812      	ldrb	r2, [r2, #0]
 8004856:	4313      	orrs	r3, r2
 8004858:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800485a:	68ba      	ldr	r2, [r7, #8]
 800485c:	4b06      	ldr	r3, [pc, #24]	; (8004878 <ETH_MACAddressConfig+0x6c>)
 800485e:	4413      	add	r3, r2
 8004860:	461a      	mov	r2, r3
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	6013      	str	r3, [r2, #0]
}
 8004866:	bf00      	nop
 8004868:	371c      	adds	r7, #28
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr
 8004872:	bf00      	nop
 8004874:	40028040 	.word	0x40028040
 8004878:	40028044 	.word	0x40028044

0800487c <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 800487c:	b580      	push	{r7, lr}
 800487e:	b084      	sub	sp, #16
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8004884:	2300      	movs	r3, #0
 8004886:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f042 0208 	orr.w	r2, r2, #8
 8004896:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80048a0:	2001      	movs	r0, #1
 80048a2:	f000 f8dd 	bl	8004a60 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	68fa      	ldr	r2, [r7, #12]
 80048ac:	601a      	str	r2, [r3, #0]
}
 80048ae:	bf00      	nop
 80048b0:	3710      	adds	r7, #16
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}

080048b6 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80048b6:	b580      	push	{r7, lr}
 80048b8:	b084      	sub	sp, #16
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80048be:	2300      	movs	r3, #0
 80048c0:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f022 0208 	bic.w	r2, r2, #8
 80048d0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80048da:	2001      	movs	r0, #1
 80048dc:	f000 f8c0 	bl	8004a60 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	68fa      	ldr	r2, [r7, #12]
 80048e6:	601a      	str	r2, [r3, #0]
}
 80048e8:	bf00      	nop
 80048ea:	3710      	adds	r7, #16
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}

080048f0 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b084      	sub	sp, #16
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80048f8:	2300      	movs	r3, #0
 80048fa:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f042 0204 	orr.w	r2, r2, #4
 800490a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8004914:	2001      	movs	r0, #1
 8004916:	f000 f8a3 	bl	8004a60 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	68fa      	ldr	r2, [r7, #12]
 8004920:	601a      	str	r2, [r3, #0]
}
 8004922:	bf00      	nop
 8004924:	3710      	adds	r7, #16
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}

0800492a <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800492a:	b580      	push	{r7, lr}
 800492c:	b084      	sub	sp, #16
 800492e:	af00      	add	r7, sp, #0
 8004930:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8004932:	2300      	movs	r3, #0
 8004934:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f022 0204 	bic.w	r2, r2, #4
 8004944:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800494e:	2001      	movs	r0, #1
 8004950:	f000 f886 	bl	8004a60 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	68fa      	ldr	r2, [r7, #12]
 800495a:	601a      	str	r2, [r3, #0]
}
 800495c:	bf00      	nop
 800495e:	3710      	adds	r7, #16
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}

08004964 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8004964:	b480      	push	{r7}
 8004966:	b083      	sub	sp, #12
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004974:	699b      	ldr	r3, [r3, #24]
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	6812      	ldr	r2, [r2, #0]
 800497a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800497e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004982:	6193      	str	r3, [r2, #24]
}
 8004984:	bf00      	nop
 8004986:	370c      	adds	r7, #12
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr

08004990 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8004990:	b480      	push	{r7}
 8004992:	b083      	sub	sp, #12
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049a0:	699b      	ldr	r3, [r3, #24]
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	6812      	ldr	r2, [r2, #0]
 80049a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80049aa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80049ae:	6193      	str	r3, [r2, #24]
}
 80049b0:	bf00      	nop
 80049b2:	370c      	adds	r7, #12
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr

080049bc <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 80049bc:	b480      	push	{r7}
 80049be:	b083      	sub	sp, #12
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049cc:	699b      	ldr	r3, [r3, #24]
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	6812      	ldr	r2, [r2, #0]
 80049d2:	f043 0302 	orr.w	r3, r3, #2
 80049d6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80049da:	6193      	str	r3, [r2, #24]
}
 80049dc:	bf00      	nop
 80049de:	370c      	adds	r7, #12
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr

080049e8 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049f8:	699b      	ldr	r3, [r3, #24]
 80049fa:	687a      	ldr	r2, [r7, #4]
 80049fc:	6812      	ldr	r2, [r2, #0]
 80049fe:	f023 0302 	bic.w	r3, r3, #2
 8004a02:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004a06:	6193      	str	r3, [r2, #24]
}
 8004a08:	bf00      	nop
 8004a0a:	370c      	adds	r7, #12
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b084      	sub	sp, #16
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a28:	699b      	ldr	r3, [r3, #24]
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	6812      	ldr	r2, [r2, #0]
 8004a2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a32:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004a36:	6193      	str	r3, [r2, #24]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a40:	699b      	ldr	r3, [r3, #24]
 8004a42:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8004a44:	2001      	movs	r0, #1
 8004a46:	f000 f80b 	bl	8004a60 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004a54:	6193      	str	r3, [r2, #24]
}
 8004a56:	bf00      	nop
 8004a58:	3710      	adds	r7, #16
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}
	...

08004a60 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b085      	sub	sp, #20
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004a68:	4b0b      	ldr	r3, [pc, #44]	; (8004a98 <ETH_Delay+0x38>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a0b      	ldr	r2, [pc, #44]	; (8004a9c <ETH_Delay+0x3c>)
 8004a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a72:	0a5b      	lsrs	r3, r3, #9
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	fb02 f303 	mul.w	r3, r2, r3
 8004a7a:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8004a7c:	bf00      	nop
  } 
  while (Delay --);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	1e5a      	subs	r2, r3, #1
 8004a82:	60fa      	str	r2, [r7, #12]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d1f9      	bne.n	8004a7c <ETH_Delay+0x1c>
}
 8004a88:	bf00      	nop
 8004a8a:	bf00      	nop
 8004a8c:	3714      	adds	r7, #20
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr
 8004a96:	bf00      	nop
 8004a98:	20000000 	.word	0x20000000
 8004a9c:	10624dd3 	.word	0x10624dd3

08004aa0 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b086      	sub	sp, #24
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	60f8      	str	r0, [r7, #12]
 8004aa8:	60b9      	str	r1, [r7, #8]
 8004aaa:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004ab2:	4b23      	ldr	r3, [pc, #140]	; (8004b40 <HAL_FLASH_Program+0xa0>)
 8004ab4:	7e1b      	ldrb	r3, [r3, #24]
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d101      	bne.n	8004abe <HAL_FLASH_Program+0x1e>
 8004aba:	2302      	movs	r3, #2
 8004abc:	e03b      	b.n	8004b36 <HAL_FLASH_Program+0x96>
 8004abe:	4b20      	ldr	r3, [pc, #128]	; (8004b40 <HAL_FLASH_Program+0xa0>)
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004ac4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004ac8:	f000 f87c 	bl	8004bc4 <FLASH_WaitForLastOperation>
 8004acc:	4603      	mov	r3, r0
 8004ace:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8004ad0:	7dfb      	ldrb	r3, [r7, #23]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d12b      	bne.n	8004b2e <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d105      	bne.n	8004ae8 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8004adc:	783b      	ldrb	r3, [r7, #0]
 8004ade:	4619      	mov	r1, r3
 8004ae0:	68b8      	ldr	r0, [r7, #8]
 8004ae2:	f000 f927 	bl	8004d34 <FLASH_Program_Byte>
 8004ae6:	e016      	b.n	8004b16 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d105      	bne.n	8004afa <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8004aee:	883b      	ldrh	r3, [r7, #0]
 8004af0:	4619      	mov	r1, r3
 8004af2:	68b8      	ldr	r0, [r7, #8]
 8004af4:	f000 f8fa 	bl	8004cec <FLASH_Program_HalfWord>
 8004af8:	e00d      	b.n	8004b16 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2b02      	cmp	r3, #2
 8004afe:	d105      	bne.n	8004b0c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	4619      	mov	r1, r3
 8004b04:	68b8      	ldr	r0, [r7, #8]
 8004b06:	f000 f8cf 	bl	8004ca8 <FLASH_Program_Word>
 8004b0a:	e004      	b.n	8004b16 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8004b0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b10:	68b8      	ldr	r0, [r7, #8]
 8004b12:	f000 f897 	bl	8004c44 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004b16:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004b1a:	f000 f853 	bl	8004bc4 <FLASH_WaitForLastOperation>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8004b22:	4b08      	ldr	r3, [pc, #32]	; (8004b44 <HAL_FLASH_Program+0xa4>)
 8004b24:	691b      	ldr	r3, [r3, #16]
 8004b26:	4a07      	ldr	r2, [pc, #28]	; (8004b44 <HAL_FLASH_Program+0xa4>)
 8004b28:	f023 0301 	bic.w	r3, r3, #1
 8004b2c:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004b2e:	4b04      	ldr	r3, [pc, #16]	; (8004b40 <HAL_FLASH_Program+0xa0>)
 8004b30:	2200      	movs	r2, #0
 8004b32:	761a      	strb	r2, [r3, #24]
  
  return status;
 8004b34:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3718      	adds	r7, #24
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop
 8004b40:	20013fb0 	.word	0x20013fb0
 8004b44:	40023c00 	.word	0x40023c00

08004b48 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b083      	sub	sp, #12
 8004b4c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004b52:	4b0b      	ldr	r3, [pc, #44]	; (8004b80 <HAL_FLASH_Unlock+0x38>)
 8004b54:	691b      	ldr	r3, [r3, #16]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	da0b      	bge.n	8004b72 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004b5a:	4b09      	ldr	r3, [pc, #36]	; (8004b80 <HAL_FLASH_Unlock+0x38>)
 8004b5c:	4a09      	ldr	r2, [pc, #36]	; (8004b84 <HAL_FLASH_Unlock+0x3c>)
 8004b5e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004b60:	4b07      	ldr	r3, [pc, #28]	; (8004b80 <HAL_FLASH_Unlock+0x38>)
 8004b62:	4a09      	ldr	r2, [pc, #36]	; (8004b88 <HAL_FLASH_Unlock+0x40>)
 8004b64:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004b66:	4b06      	ldr	r3, [pc, #24]	; (8004b80 <HAL_FLASH_Unlock+0x38>)
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	da01      	bge.n	8004b72 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8004b72:	79fb      	ldrb	r3, [r7, #7]
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	370c      	adds	r7, #12
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr
 8004b80:	40023c00 	.word	0x40023c00
 8004b84:	45670123 	.word	0x45670123
 8004b88:	cdef89ab 	.word	0xcdef89ab

08004b8c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8004b90:	4b05      	ldr	r3, [pc, #20]	; (8004ba8 <HAL_FLASH_Lock+0x1c>)
 8004b92:	691b      	ldr	r3, [r3, #16]
 8004b94:	4a04      	ldr	r2, [pc, #16]	; (8004ba8 <HAL_FLASH_Lock+0x1c>)
 8004b96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004b9a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8004b9c:	2300      	movs	r3, #0
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr
 8004ba8:	40023c00 	.word	0x40023c00

08004bac <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 8004bac:	b480      	push	{r7}
 8004bae:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8004bb0:	4b03      	ldr	r3, [pc, #12]	; (8004bc0 <HAL_FLASH_GetError+0x14>)
 8004bb2:	69db      	ldr	r3, [r3, #28]
}  
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr
 8004bbe:	bf00      	nop
 8004bc0:	20013fb0 	.word	0x20013fb0

08004bc4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b084      	sub	sp, #16
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004bd0:	4b1a      	ldr	r3, [pc, #104]	; (8004c3c <FLASH_WaitForLastOperation+0x78>)
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8004bd6:	f7fe f891 	bl	8002cfc <HAL_GetTick>
 8004bda:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8004bdc:	e010      	b.n	8004c00 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004be4:	d00c      	beq.n	8004c00 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d007      	beq.n	8004bfc <FLASH_WaitForLastOperation+0x38>
 8004bec:	f7fe f886 	bl	8002cfc <HAL_GetTick>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	1ad3      	subs	r3, r2, r3
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d201      	bcs.n	8004c00 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8004bfc:	2303      	movs	r3, #3
 8004bfe:	e019      	b.n	8004c34 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8004c00:	4b0f      	ldr	r3, [pc, #60]	; (8004c40 <FLASH_WaitForLastOperation+0x7c>)
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d1e8      	bne.n	8004bde <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8004c0c:	4b0c      	ldr	r3, [pc, #48]	; (8004c40 <FLASH_WaitForLastOperation+0x7c>)
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	f003 0301 	and.w	r3, r3, #1
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d002      	beq.n	8004c1e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004c18:	4b09      	ldr	r3, [pc, #36]	; (8004c40 <FLASH_WaitForLastOperation+0x7c>)
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8004c1e:	4b08      	ldr	r3, [pc, #32]	; (8004c40 <FLASH_WaitForLastOperation+0x7c>)
 8004c20:	68db      	ldr	r3, [r3, #12]
 8004c22:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d003      	beq.n	8004c32 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8004c2a:	f000 f8a5 	bl	8004d78 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e000      	b.n	8004c34 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8004c32:	2300      	movs	r3, #0
  
}  
 8004c34:	4618      	mov	r0, r3
 8004c36:	3710      	adds	r7, #16
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}
 8004c3c:	20013fb0 	.word	0x20013fb0
 8004c40:	40023c00 	.word	0x40023c00

08004c44 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b085      	sub	sp, #20
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	60f8      	str	r0, [r7, #12]
 8004c4c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004c50:	4b14      	ldr	r3, [pc, #80]	; (8004ca4 <FLASH_Program_DoubleWord+0x60>)
 8004c52:	691b      	ldr	r3, [r3, #16]
 8004c54:	4a13      	ldr	r2, [pc, #76]	; (8004ca4 <FLASH_Program_DoubleWord+0x60>)
 8004c56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c5a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8004c5c:	4b11      	ldr	r3, [pc, #68]	; (8004ca4 <FLASH_Program_DoubleWord+0x60>)
 8004c5e:	691b      	ldr	r3, [r3, #16]
 8004c60:	4a10      	ldr	r2, [pc, #64]	; (8004ca4 <FLASH_Program_DoubleWord+0x60>)
 8004c62:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004c66:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004c68:	4b0e      	ldr	r3, [pc, #56]	; (8004ca4 <FLASH_Program_DoubleWord+0x60>)
 8004c6a:	691b      	ldr	r3, [r3, #16]
 8004c6c:	4a0d      	ldr	r2, [pc, #52]	; (8004ca4 <FLASH_Program_DoubleWord+0x60>)
 8004c6e:	f043 0301 	orr.w	r3, r3, #1
 8004c72:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	683a      	ldr	r2, [r7, #0]
 8004c78:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8004c7a:	f3bf 8f6f 	isb	sy
}
 8004c7e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8004c80:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004c84:	f04f 0200 	mov.w	r2, #0
 8004c88:	f04f 0300 	mov.w	r3, #0
 8004c8c:	000a      	movs	r2, r1
 8004c8e:	2300      	movs	r3, #0
 8004c90:	68f9      	ldr	r1, [r7, #12]
 8004c92:	3104      	adds	r1, #4
 8004c94:	4613      	mov	r3, r2
 8004c96:	600b      	str	r3, [r1, #0]
}
 8004c98:	bf00      	nop
 8004c9a:	3714      	adds	r7, #20
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr
 8004ca4:	40023c00 	.word	0x40023c00

08004ca8 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b083      	sub	sp, #12
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004cb2:	4b0d      	ldr	r3, [pc, #52]	; (8004ce8 <FLASH_Program_Word+0x40>)
 8004cb4:	691b      	ldr	r3, [r3, #16]
 8004cb6:	4a0c      	ldr	r2, [pc, #48]	; (8004ce8 <FLASH_Program_Word+0x40>)
 8004cb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cbc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8004cbe:	4b0a      	ldr	r3, [pc, #40]	; (8004ce8 <FLASH_Program_Word+0x40>)
 8004cc0:	691b      	ldr	r3, [r3, #16]
 8004cc2:	4a09      	ldr	r2, [pc, #36]	; (8004ce8 <FLASH_Program_Word+0x40>)
 8004cc4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004cc8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004cca:	4b07      	ldr	r3, [pc, #28]	; (8004ce8 <FLASH_Program_Word+0x40>)
 8004ccc:	691b      	ldr	r3, [r3, #16]
 8004cce:	4a06      	ldr	r2, [pc, #24]	; (8004ce8 <FLASH_Program_Word+0x40>)
 8004cd0:	f043 0301 	orr.w	r3, r3, #1
 8004cd4:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	683a      	ldr	r2, [r7, #0]
 8004cda:	601a      	str	r2, [r3, #0]
}
 8004cdc:	bf00      	nop
 8004cde:	370c      	adds	r7, #12
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr
 8004ce8:	40023c00 	.word	0x40023c00

08004cec <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	460b      	mov	r3, r1
 8004cf6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004cf8:	4b0d      	ldr	r3, [pc, #52]	; (8004d30 <FLASH_Program_HalfWord+0x44>)
 8004cfa:	691b      	ldr	r3, [r3, #16]
 8004cfc:	4a0c      	ldr	r2, [pc, #48]	; (8004d30 <FLASH_Program_HalfWord+0x44>)
 8004cfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d02:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8004d04:	4b0a      	ldr	r3, [pc, #40]	; (8004d30 <FLASH_Program_HalfWord+0x44>)
 8004d06:	691b      	ldr	r3, [r3, #16]
 8004d08:	4a09      	ldr	r2, [pc, #36]	; (8004d30 <FLASH_Program_HalfWord+0x44>)
 8004d0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d0e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004d10:	4b07      	ldr	r3, [pc, #28]	; (8004d30 <FLASH_Program_HalfWord+0x44>)
 8004d12:	691b      	ldr	r3, [r3, #16]
 8004d14:	4a06      	ldr	r2, [pc, #24]	; (8004d30 <FLASH_Program_HalfWord+0x44>)
 8004d16:	f043 0301 	orr.w	r3, r3, #1
 8004d1a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	887a      	ldrh	r2, [r7, #2]
 8004d20:	801a      	strh	r2, [r3, #0]
}
 8004d22:	bf00      	nop
 8004d24:	370c      	adds	r7, #12
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr
 8004d2e:	bf00      	nop
 8004d30:	40023c00 	.word	0x40023c00

08004d34 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b083      	sub	sp, #12
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	460b      	mov	r3, r1
 8004d3e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004d40:	4b0c      	ldr	r3, [pc, #48]	; (8004d74 <FLASH_Program_Byte+0x40>)
 8004d42:	691b      	ldr	r3, [r3, #16]
 8004d44:	4a0b      	ldr	r2, [pc, #44]	; (8004d74 <FLASH_Program_Byte+0x40>)
 8004d46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d4a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8004d4c:	4b09      	ldr	r3, [pc, #36]	; (8004d74 <FLASH_Program_Byte+0x40>)
 8004d4e:	4a09      	ldr	r2, [pc, #36]	; (8004d74 <FLASH_Program_Byte+0x40>)
 8004d50:	691b      	ldr	r3, [r3, #16]
 8004d52:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004d54:	4b07      	ldr	r3, [pc, #28]	; (8004d74 <FLASH_Program_Byte+0x40>)
 8004d56:	691b      	ldr	r3, [r3, #16]
 8004d58:	4a06      	ldr	r2, [pc, #24]	; (8004d74 <FLASH_Program_Byte+0x40>)
 8004d5a:	f043 0301 	orr.w	r3, r3, #1
 8004d5e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	78fa      	ldrb	r2, [r7, #3]
 8004d64:	701a      	strb	r2, [r3, #0]
}
 8004d66:	bf00      	nop
 8004d68:	370c      	adds	r7, #12
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr
 8004d72:	bf00      	nop
 8004d74:	40023c00 	.word	0x40023c00

08004d78 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8004d78:	b480      	push	{r7}
 8004d7a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8004d7c:	4b27      	ldr	r3, [pc, #156]	; (8004e1c <FLASH_SetErrorCode+0xa4>)
 8004d7e:	68db      	ldr	r3, [r3, #12]
 8004d80:	f003 0310 	and.w	r3, r3, #16
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d008      	beq.n	8004d9a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004d88:	4b25      	ldr	r3, [pc, #148]	; (8004e20 <FLASH_SetErrorCode+0xa8>)
 8004d8a:	69db      	ldr	r3, [r3, #28]
 8004d8c:	f043 0310 	orr.w	r3, r3, #16
 8004d90:	4a23      	ldr	r2, [pc, #140]	; (8004e20 <FLASH_SetErrorCode+0xa8>)
 8004d92:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8004d94:	4b21      	ldr	r3, [pc, #132]	; (8004e1c <FLASH_SetErrorCode+0xa4>)
 8004d96:	2210      	movs	r2, #16
 8004d98:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8004d9a:	4b20      	ldr	r3, [pc, #128]	; (8004e1c <FLASH_SetErrorCode+0xa4>)
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	f003 0320 	and.w	r3, r3, #32
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d008      	beq.n	8004db8 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8004da6:	4b1e      	ldr	r3, [pc, #120]	; (8004e20 <FLASH_SetErrorCode+0xa8>)
 8004da8:	69db      	ldr	r3, [r3, #28]
 8004daa:	f043 0308 	orr.w	r3, r3, #8
 8004dae:	4a1c      	ldr	r2, [pc, #112]	; (8004e20 <FLASH_SetErrorCode+0xa8>)
 8004db0:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8004db2:	4b1a      	ldr	r3, [pc, #104]	; (8004e1c <FLASH_SetErrorCode+0xa4>)
 8004db4:	2220      	movs	r2, #32
 8004db6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8004db8:	4b18      	ldr	r3, [pc, #96]	; (8004e1c <FLASH_SetErrorCode+0xa4>)
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d008      	beq.n	8004dd6 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8004dc4:	4b16      	ldr	r3, [pc, #88]	; (8004e20 <FLASH_SetErrorCode+0xa8>)
 8004dc6:	69db      	ldr	r3, [r3, #28]
 8004dc8:	f043 0304 	orr.w	r3, r3, #4
 8004dcc:	4a14      	ldr	r2, [pc, #80]	; (8004e20 <FLASH_SetErrorCode+0xa8>)
 8004dce:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8004dd0:	4b12      	ldr	r3, [pc, #72]	; (8004e1c <FLASH_SetErrorCode+0xa4>)
 8004dd2:	2240      	movs	r2, #64	; 0x40
 8004dd4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8004dd6:	4b11      	ldr	r3, [pc, #68]	; (8004e1c <FLASH_SetErrorCode+0xa4>)
 8004dd8:	68db      	ldr	r3, [r3, #12]
 8004dda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d008      	beq.n	8004df4 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8004de2:	4b0f      	ldr	r3, [pc, #60]	; (8004e20 <FLASH_SetErrorCode+0xa8>)
 8004de4:	69db      	ldr	r3, [r3, #28]
 8004de6:	f043 0302 	orr.w	r3, r3, #2
 8004dea:	4a0d      	ldr	r2, [pc, #52]	; (8004e20 <FLASH_SetErrorCode+0xa8>)
 8004dec:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8004dee:	4b0b      	ldr	r3, [pc, #44]	; (8004e1c <FLASH_SetErrorCode+0xa4>)
 8004df0:	2280      	movs	r2, #128	; 0x80
 8004df2:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8004df4:	4b09      	ldr	r3, [pc, #36]	; (8004e1c <FLASH_SetErrorCode+0xa4>)
 8004df6:	68db      	ldr	r3, [r3, #12]
 8004df8:	f003 0302 	and.w	r3, r3, #2
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d008      	beq.n	8004e12 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8004e00:	4b07      	ldr	r3, [pc, #28]	; (8004e20 <FLASH_SetErrorCode+0xa8>)
 8004e02:	69db      	ldr	r3, [r3, #28]
 8004e04:	f043 0320 	orr.w	r3, r3, #32
 8004e08:	4a05      	ldr	r2, [pc, #20]	; (8004e20 <FLASH_SetErrorCode+0xa8>)
 8004e0a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8004e0c:	4b03      	ldr	r3, [pc, #12]	; (8004e1c <FLASH_SetErrorCode+0xa4>)
 8004e0e:	2202      	movs	r2, #2
 8004e10:	60da      	str	r2, [r3, #12]
  }
}
 8004e12:	bf00      	nop
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr
 8004e1c:	40023c00 	.word	0x40023c00
 8004e20:	20013fb0 	.word	0x20013fb0

08004e24 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b084      	sub	sp, #16
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8004e32:	2300      	movs	r3, #0
 8004e34:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004e36:	4b31      	ldr	r3, [pc, #196]	; (8004efc <HAL_FLASHEx_Erase+0xd8>)
 8004e38:	7e1b      	ldrb	r3, [r3, #24]
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d101      	bne.n	8004e42 <HAL_FLASHEx_Erase+0x1e>
 8004e3e:	2302      	movs	r3, #2
 8004e40:	e058      	b.n	8004ef4 <HAL_FLASHEx_Erase+0xd0>
 8004e42:	4b2e      	ldr	r3, [pc, #184]	; (8004efc <HAL_FLASHEx_Erase+0xd8>)
 8004e44:	2201      	movs	r2, #1
 8004e46:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004e48:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004e4c:	f7ff feba 	bl	8004bc4 <FLASH_WaitForLastOperation>
 8004e50:	4603      	mov	r3, r0
 8004e52:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004e54:	7bfb      	ldrb	r3, [r7, #15]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d148      	bne.n	8004eec <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	f04f 32ff 	mov.w	r2, #4294967295
 8004e60:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d115      	bne.n	8004e96 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	691b      	ldr	r3, [r3, #16]
 8004e6e:	b2da      	uxtb	r2, r3
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	4619      	mov	r1, r3
 8004e76:	4610      	mov	r0, r2
 8004e78:	f000 f844 	bl	8004f04 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004e7c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004e80:	f7ff fea0 	bl	8004bc4 <FLASH_WaitForLastOperation>
 8004e84:	4603      	mov	r3, r0
 8004e86:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8004e88:	4b1d      	ldr	r3, [pc, #116]	; (8004f00 <HAL_FLASHEx_Erase+0xdc>)
 8004e8a:	691b      	ldr	r3, [r3, #16]
 8004e8c:	4a1c      	ldr	r2, [pc, #112]	; (8004f00 <HAL_FLASHEx_Erase+0xdc>)
 8004e8e:	f023 0304 	bic.w	r3, r3, #4
 8004e92:	6113      	str	r3, [r2, #16]
 8004e94:	e028      	b.n	8004ee8 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	60bb      	str	r3, [r7, #8]
 8004e9c:	e01c      	b.n	8004ed8 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	691b      	ldr	r3, [r3, #16]
 8004ea2:	b2db      	uxtb	r3, r3
 8004ea4:	4619      	mov	r1, r3
 8004ea6:	68b8      	ldr	r0, [r7, #8]
 8004ea8:	f000 f850 	bl	8004f4c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004eac:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004eb0:	f7ff fe88 	bl	8004bc4 <FLASH_WaitForLastOperation>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8004eb8:	4b11      	ldr	r3, [pc, #68]	; (8004f00 <HAL_FLASHEx_Erase+0xdc>)
 8004eba:	691b      	ldr	r3, [r3, #16]
 8004ebc:	4a10      	ldr	r2, [pc, #64]	; (8004f00 <HAL_FLASHEx_Erase+0xdc>)
 8004ebe:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8004ec2:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8004ec4:	7bfb      	ldrb	r3, [r7, #15]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d003      	beq.n	8004ed2 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	68ba      	ldr	r2, [r7, #8]
 8004ece:	601a      	str	r2, [r3, #0]
          break;
 8004ed0:	e00a      	b.n	8004ee8 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	3301      	adds	r3, #1
 8004ed6:	60bb      	str	r3, [r7, #8]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	68da      	ldr	r2, [r3, #12]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	4413      	add	r3, r2
 8004ee2:	68ba      	ldr	r2, [r7, #8]
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d3da      	bcc.n	8004e9e <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8004ee8:	f000 f878 	bl	8004fdc <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004eec:	4b03      	ldr	r3, [pc, #12]	; (8004efc <HAL_FLASHEx_Erase+0xd8>)
 8004eee:	2200      	movs	r2, #0
 8004ef0:	761a      	strb	r2, [r3, #24]

  return status;
 8004ef2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3710      	adds	r7, #16
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}
 8004efc:	20013fb0 	.word	0x20013fb0
 8004f00:	40023c00 	.word	0x40023c00

08004f04 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b083      	sub	sp, #12
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	6039      	str	r1, [r7, #0]
 8004f0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004f10:	4b0d      	ldr	r3, [pc, #52]	; (8004f48 <FLASH_MassErase+0x44>)
 8004f12:	691b      	ldr	r3, [r3, #16]
 8004f14:	4a0c      	ldr	r2, [pc, #48]	; (8004f48 <FLASH_MassErase+0x44>)
 8004f16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f1a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8004f1c:	4b0a      	ldr	r3, [pc, #40]	; (8004f48 <FLASH_MassErase+0x44>)
 8004f1e:	691b      	ldr	r3, [r3, #16]
 8004f20:	4a09      	ldr	r2, [pc, #36]	; (8004f48 <FLASH_MassErase+0x44>)
 8004f22:	f043 0304 	orr.w	r3, r3, #4
 8004f26:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8004f28:	4b07      	ldr	r3, [pc, #28]	; (8004f48 <FLASH_MassErase+0x44>)
 8004f2a:	691a      	ldr	r2, [r3, #16]
 8004f2c:	79fb      	ldrb	r3, [r7, #7]
 8004f2e:	021b      	lsls	r3, r3, #8
 8004f30:	4313      	orrs	r3, r2
 8004f32:	4a05      	ldr	r2, [pc, #20]	; (8004f48 <FLASH_MassErase+0x44>)
 8004f34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f38:	6113      	str	r3, [r2, #16]
}
 8004f3a:	bf00      	nop
 8004f3c:	370c      	adds	r7, #12
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr
 8004f46:	bf00      	nop
 8004f48:	40023c00 	.word	0x40023c00

08004f4c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b085      	sub	sp, #20
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	460b      	mov	r3, r1
 8004f56:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8004f5c:	78fb      	ldrb	r3, [r7, #3]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d102      	bne.n	8004f68 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8004f62:	2300      	movs	r3, #0
 8004f64:	60fb      	str	r3, [r7, #12]
 8004f66:	e010      	b.n	8004f8a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8004f68:	78fb      	ldrb	r3, [r7, #3]
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	d103      	bne.n	8004f76 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8004f6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f72:	60fb      	str	r3, [r7, #12]
 8004f74:	e009      	b.n	8004f8a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8004f76:	78fb      	ldrb	r3, [r7, #3]
 8004f78:	2b02      	cmp	r3, #2
 8004f7a:	d103      	bne.n	8004f84 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8004f7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f80:	60fb      	str	r3, [r7, #12]
 8004f82:	e002      	b.n	8004f8a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8004f84:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004f88:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004f8a:	4b13      	ldr	r3, [pc, #76]	; (8004fd8 <FLASH_Erase_Sector+0x8c>)
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	4a12      	ldr	r2, [pc, #72]	; (8004fd8 <FLASH_Erase_Sector+0x8c>)
 8004f90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f94:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8004f96:	4b10      	ldr	r3, [pc, #64]	; (8004fd8 <FLASH_Erase_Sector+0x8c>)
 8004f98:	691a      	ldr	r2, [r3, #16]
 8004f9a:	490f      	ldr	r1, [pc, #60]	; (8004fd8 <FLASH_Erase_Sector+0x8c>)
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8004fa2:	4b0d      	ldr	r3, [pc, #52]	; (8004fd8 <FLASH_Erase_Sector+0x8c>)
 8004fa4:	691b      	ldr	r3, [r3, #16]
 8004fa6:	4a0c      	ldr	r2, [pc, #48]	; (8004fd8 <FLASH_Erase_Sector+0x8c>)
 8004fa8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004fac:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8004fae:	4b0a      	ldr	r3, [pc, #40]	; (8004fd8 <FLASH_Erase_Sector+0x8c>)
 8004fb0:	691a      	ldr	r2, [r3, #16]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	00db      	lsls	r3, r3, #3
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	4a07      	ldr	r2, [pc, #28]	; (8004fd8 <FLASH_Erase_Sector+0x8c>)
 8004fba:	f043 0302 	orr.w	r3, r3, #2
 8004fbe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8004fc0:	4b05      	ldr	r3, [pc, #20]	; (8004fd8 <FLASH_Erase_Sector+0x8c>)
 8004fc2:	691b      	ldr	r3, [r3, #16]
 8004fc4:	4a04      	ldr	r2, [pc, #16]	; (8004fd8 <FLASH_Erase_Sector+0x8c>)
 8004fc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fca:	6113      	str	r3, [r2, #16]
}
 8004fcc:	bf00      	nop
 8004fce:	3714      	adds	r7, #20
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr
 8004fd8:	40023c00 	.word	0x40023c00

08004fdc <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8004fe0:	4b20      	ldr	r3, [pc, #128]	; (8005064 <FLASH_FlushCaches+0x88>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d017      	beq.n	800501c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004fec:	4b1d      	ldr	r3, [pc, #116]	; (8005064 <FLASH_FlushCaches+0x88>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a1c      	ldr	r2, [pc, #112]	; (8005064 <FLASH_FlushCaches+0x88>)
 8004ff2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ff6:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8004ff8:	4b1a      	ldr	r3, [pc, #104]	; (8005064 <FLASH_FlushCaches+0x88>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a19      	ldr	r2, [pc, #100]	; (8005064 <FLASH_FlushCaches+0x88>)
 8004ffe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005002:	6013      	str	r3, [r2, #0]
 8005004:	4b17      	ldr	r3, [pc, #92]	; (8005064 <FLASH_FlushCaches+0x88>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a16      	ldr	r2, [pc, #88]	; (8005064 <FLASH_FlushCaches+0x88>)
 800500a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800500e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005010:	4b14      	ldr	r3, [pc, #80]	; (8005064 <FLASH_FlushCaches+0x88>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a13      	ldr	r2, [pc, #76]	; (8005064 <FLASH_FlushCaches+0x88>)
 8005016:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800501a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800501c:	4b11      	ldr	r3, [pc, #68]	; (8005064 <FLASH_FlushCaches+0x88>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005024:	2b00      	cmp	r3, #0
 8005026:	d017      	beq.n	8005058 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8005028:	4b0e      	ldr	r3, [pc, #56]	; (8005064 <FLASH_FlushCaches+0x88>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a0d      	ldr	r2, [pc, #52]	; (8005064 <FLASH_FlushCaches+0x88>)
 800502e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005032:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8005034:	4b0b      	ldr	r3, [pc, #44]	; (8005064 <FLASH_FlushCaches+0x88>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a0a      	ldr	r2, [pc, #40]	; (8005064 <FLASH_FlushCaches+0x88>)
 800503a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800503e:	6013      	str	r3, [r2, #0]
 8005040:	4b08      	ldr	r3, [pc, #32]	; (8005064 <FLASH_FlushCaches+0x88>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a07      	ldr	r2, [pc, #28]	; (8005064 <FLASH_FlushCaches+0x88>)
 8005046:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800504a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800504c:	4b05      	ldr	r3, [pc, #20]	; (8005064 <FLASH_FlushCaches+0x88>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a04      	ldr	r2, [pc, #16]	; (8005064 <FLASH_FlushCaches+0x88>)
 8005052:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005056:	6013      	str	r3, [r2, #0]
  }
}
 8005058:	bf00      	nop
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr
 8005062:	bf00      	nop
 8005064:	40023c00 	.word	0x40023c00

08005068 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005068:	b480      	push	{r7}
 800506a:	b089      	sub	sp, #36	; 0x24
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005072:	2300      	movs	r3, #0
 8005074:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005076:	2300      	movs	r3, #0
 8005078:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800507a:	2300      	movs	r3, #0
 800507c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800507e:	2300      	movs	r3, #0
 8005080:	61fb      	str	r3, [r7, #28]
 8005082:	e16b      	b.n	800535c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005084:	2201      	movs	r2, #1
 8005086:	69fb      	ldr	r3, [r7, #28]
 8005088:	fa02 f303 	lsl.w	r3, r2, r3
 800508c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	697a      	ldr	r2, [r7, #20]
 8005094:	4013      	ands	r3, r2
 8005096:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005098:	693a      	ldr	r2, [r7, #16]
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	429a      	cmp	r2, r3
 800509e:	f040 815a 	bne.w	8005356 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	f003 0303 	and.w	r3, r3, #3
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d005      	beq.n	80050ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80050b6:	2b02      	cmp	r3, #2
 80050b8:	d130      	bne.n	800511c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80050c0:	69fb      	ldr	r3, [r7, #28]
 80050c2:	005b      	lsls	r3, r3, #1
 80050c4:	2203      	movs	r2, #3
 80050c6:	fa02 f303 	lsl.w	r3, r2, r3
 80050ca:	43db      	mvns	r3, r3
 80050cc:	69ba      	ldr	r2, [r7, #24]
 80050ce:	4013      	ands	r3, r2
 80050d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	68da      	ldr	r2, [r3, #12]
 80050d6:	69fb      	ldr	r3, [r7, #28]
 80050d8:	005b      	lsls	r3, r3, #1
 80050da:	fa02 f303 	lsl.w	r3, r2, r3
 80050de:	69ba      	ldr	r2, [r7, #24]
 80050e0:	4313      	orrs	r3, r2
 80050e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	69ba      	ldr	r2, [r7, #24]
 80050e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80050f0:	2201      	movs	r2, #1
 80050f2:	69fb      	ldr	r3, [r7, #28]
 80050f4:	fa02 f303 	lsl.w	r3, r2, r3
 80050f8:	43db      	mvns	r3, r3
 80050fa:	69ba      	ldr	r2, [r7, #24]
 80050fc:	4013      	ands	r3, r2
 80050fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	091b      	lsrs	r3, r3, #4
 8005106:	f003 0201 	and.w	r2, r3, #1
 800510a:	69fb      	ldr	r3, [r7, #28]
 800510c:	fa02 f303 	lsl.w	r3, r2, r3
 8005110:	69ba      	ldr	r2, [r7, #24]
 8005112:	4313      	orrs	r3, r2
 8005114:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	69ba      	ldr	r2, [r7, #24]
 800511a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	f003 0303 	and.w	r3, r3, #3
 8005124:	2b03      	cmp	r3, #3
 8005126:	d017      	beq.n	8005158 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800512e:	69fb      	ldr	r3, [r7, #28]
 8005130:	005b      	lsls	r3, r3, #1
 8005132:	2203      	movs	r2, #3
 8005134:	fa02 f303 	lsl.w	r3, r2, r3
 8005138:	43db      	mvns	r3, r3
 800513a:	69ba      	ldr	r2, [r7, #24]
 800513c:	4013      	ands	r3, r2
 800513e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	689a      	ldr	r2, [r3, #8]
 8005144:	69fb      	ldr	r3, [r7, #28]
 8005146:	005b      	lsls	r3, r3, #1
 8005148:	fa02 f303 	lsl.w	r3, r2, r3
 800514c:	69ba      	ldr	r2, [r7, #24]
 800514e:	4313      	orrs	r3, r2
 8005150:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	69ba      	ldr	r2, [r7, #24]
 8005156:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	f003 0303 	and.w	r3, r3, #3
 8005160:	2b02      	cmp	r3, #2
 8005162:	d123      	bne.n	80051ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	08da      	lsrs	r2, r3, #3
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	3208      	adds	r2, #8
 800516c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005170:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005172:	69fb      	ldr	r3, [r7, #28]
 8005174:	f003 0307 	and.w	r3, r3, #7
 8005178:	009b      	lsls	r3, r3, #2
 800517a:	220f      	movs	r2, #15
 800517c:	fa02 f303 	lsl.w	r3, r2, r3
 8005180:	43db      	mvns	r3, r3
 8005182:	69ba      	ldr	r2, [r7, #24]
 8005184:	4013      	ands	r3, r2
 8005186:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	691a      	ldr	r2, [r3, #16]
 800518c:	69fb      	ldr	r3, [r7, #28]
 800518e:	f003 0307 	and.w	r3, r3, #7
 8005192:	009b      	lsls	r3, r3, #2
 8005194:	fa02 f303 	lsl.w	r3, r2, r3
 8005198:	69ba      	ldr	r2, [r7, #24]
 800519a:	4313      	orrs	r3, r2
 800519c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800519e:	69fb      	ldr	r3, [r7, #28]
 80051a0:	08da      	lsrs	r2, r3, #3
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	3208      	adds	r2, #8
 80051a6:	69b9      	ldr	r1, [r7, #24]
 80051a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	005b      	lsls	r3, r3, #1
 80051b6:	2203      	movs	r2, #3
 80051b8:	fa02 f303 	lsl.w	r3, r2, r3
 80051bc:	43db      	mvns	r3, r3
 80051be:	69ba      	ldr	r2, [r7, #24]
 80051c0:	4013      	ands	r3, r2
 80051c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	f003 0203 	and.w	r2, r3, #3
 80051cc:	69fb      	ldr	r3, [r7, #28]
 80051ce:	005b      	lsls	r3, r3, #1
 80051d0:	fa02 f303 	lsl.w	r3, r2, r3
 80051d4:	69ba      	ldr	r2, [r7, #24]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	69ba      	ldr	r2, [r7, #24]
 80051de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	f000 80b4 	beq.w	8005356 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80051ee:	2300      	movs	r3, #0
 80051f0:	60fb      	str	r3, [r7, #12]
 80051f2:	4b60      	ldr	r3, [pc, #384]	; (8005374 <HAL_GPIO_Init+0x30c>)
 80051f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051f6:	4a5f      	ldr	r2, [pc, #380]	; (8005374 <HAL_GPIO_Init+0x30c>)
 80051f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80051fc:	6453      	str	r3, [r2, #68]	; 0x44
 80051fe:	4b5d      	ldr	r3, [pc, #372]	; (8005374 <HAL_GPIO_Init+0x30c>)
 8005200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005202:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005206:	60fb      	str	r3, [r7, #12]
 8005208:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800520a:	4a5b      	ldr	r2, [pc, #364]	; (8005378 <HAL_GPIO_Init+0x310>)
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	089b      	lsrs	r3, r3, #2
 8005210:	3302      	adds	r3, #2
 8005212:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005216:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005218:	69fb      	ldr	r3, [r7, #28]
 800521a:	f003 0303 	and.w	r3, r3, #3
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	220f      	movs	r2, #15
 8005222:	fa02 f303 	lsl.w	r3, r2, r3
 8005226:	43db      	mvns	r3, r3
 8005228:	69ba      	ldr	r2, [r7, #24]
 800522a:	4013      	ands	r3, r2
 800522c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	4a52      	ldr	r2, [pc, #328]	; (800537c <HAL_GPIO_Init+0x314>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d02b      	beq.n	800528e <HAL_GPIO_Init+0x226>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	4a51      	ldr	r2, [pc, #324]	; (8005380 <HAL_GPIO_Init+0x318>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d025      	beq.n	800528a <HAL_GPIO_Init+0x222>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4a50      	ldr	r2, [pc, #320]	; (8005384 <HAL_GPIO_Init+0x31c>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d01f      	beq.n	8005286 <HAL_GPIO_Init+0x21e>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4a4f      	ldr	r2, [pc, #316]	; (8005388 <HAL_GPIO_Init+0x320>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d019      	beq.n	8005282 <HAL_GPIO_Init+0x21a>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a4e      	ldr	r2, [pc, #312]	; (800538c <HAL_GPIO_Init+0x324>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d013      	beq.n	800527e <HAL_GPIO_Init+0x216>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a4d      	ldr	r2, [pc, #308]	; (8005390 <HAL_GPIO_Init+0x328>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d00d      	beq.n	800527a <HAL_GPIO_Init+0x212>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4a4c      	ldr	r2, [pc, #304]	; (8005394 <HAL_GPIO_Init+0x32c>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d007      	beq.n	8005276 <HAL_GPIO_Init+0x20e>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4a4b      	ldr	r2, [pc, #300]	; (8005398 <HAL_GPIO_Init+0x330>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d101      	bne.n	8005272 <HAL_GPIO_Init+0x20a>
 800526e:	2307      	movs	r3, #7
 8005270:	e00e      	b.n	8005290 <HAL_GPIO_Init+0x228>
 8005272:	2308      	movs	r3, #8
 8005274:	e00c      	b.n	8005290 <HAL_GPIO_Init+0x228>
 8005276:	2306      	movs	r3, #6
 8005278:	e00a      	b.n	8005290 <HAL_GPIO_Init+0x228>
 800527a:	2305      	movs	r3, #5
 800527c:	e008      	b.n	8005290 <HAL_GPIO_Init+0x228>
 800527e:	2304      	movs	r3, #4
 8005280:	e006      	b.n	8005290 <HAL_GPIO_Init+0x228>
 8005282:	2303      	movs	r3, #3
 8005284:	e004      	b.n	8005290 <HAL_GPIO_Init+0x228>
 8005286:	2302      	movs	r3, #2
 8005288:	e002      	b.n	8005290 <HAL_GPIO_Init+0x228>
 800528a:	2301      	movs	r3, #1
 800528c:	e000      	b.n	8005290 <HAL_GPIO_Init+0x228>
 800528e:	2300      	movs	r3, #0
 8005290:	69fa      	ldr	r2, [r7, #28]
 8005292:	f002 0203 	and.w	r2, r2, #3
 8005296:	0092      	lsls	r2, r2, #2
 8005298:	4093      	lsls	r3, r2
 800529a:	69ba      	ldr	r2, [r7, #24]
 800529c:	4313      	orrs	r3, r2
 800529e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80052a0:	4935      	ldr	r1, [pc, #212]	; (8005378 <HAL_GPIO_Init+0x310>)
 80052a2:	69fb      	ldr	r3, [r7, #28]
 80052a4:	089b      	lsrs	r3, r3, #2
 80052a6:	3302      	adds	r3, #2
 80052a8:	69ba      	ldr	r2, [r7, #24]
 80052aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80052ae:	4b3b      	ldr	r3, [pc, #236]	; (800539c <HAL_GPIO_Init+0x334>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	43db      	mvns	r3, r3
 80052b8:	69ba      	ldr	r2, [r7, #24]
 80052ba:	4013      	ands	r3, r2
 80052bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d003      	beq.n	80052d2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80052ca:	69ba      	ldr	r2, [r7, #24]
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	4313      	orrs	r3, r2
 80052d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80052d2:	4a32      	ldr	r2, [pc, #200]	; (800539c <HAL_GPIO_Init+0x334>)
 80052d4:	69bb      	ldr	r3, [r7, #24]
 80052d6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80052d8:	4b30      	ldr	r3, [pc, #192]	; (800539c <HAL_GPIO_Init+0x334>)
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	43db      	mvns	r3, r3
 80052e2:	69ba      	ldr	r2, [r7, #24]
 80052e4:	4013      	ands	r3, r2
 80052e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d003      	beq.n	80052fc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80052f4:	69ba      	ldr	r2, [r7, #24]
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	4313      	orrs	r3, r2
 80052fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80052fc:	4a27      	ldr	r2, [pc, #156]	; (800539c <HAL_GPIO_Init+0x334>)
 80052fe:	69bb      	ldr	r3, [r7, #24]
 8005300:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005302:	4b26      	ldr	r3, [pc, #152]	; (800539c <HAL_GPIO_Init+0x334>)
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	43db      	mvns	r3, r3
 800530c:	69ba      	ldr	r2, [r7, #24]
 800530e:	4013      	ands	r3, r2
 8005310:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800531a:	2b00      	cmp	r3, #0
 800531c:	d003      	beq.n	8005326 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800531e:	69ba      	ldr	r2, [r7, #24]
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	4313      	orrs	r3, r2
 8005324:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005326:	4a1d      	ldr	r2, [pc, #116]	; (800539c <HAL_GPIO_Init+0x334>)
 8005328:	69bb      	ldr	r3, [r7, #24]
 800532a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800532c:	4b1b      	ldr	r3, [pc, #108]	; (800539c <HAL_GPIO_Init+0x334>)
 800532e:	68db      	ldr	r3, [r3, #12]
 8005330:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	43db      	mvns	r3, r3
 8005336:	69ba      	ldr	r2, [r7, #24]
 8005338:	4013      	ands	r3, r2
 800533a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005344:	2b00      	cmp	r3, #0
 8005346:	d003      	beq.n	8005350 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005348:	69ba      	ldr	r2, [r7, #24]
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	4313      	orrs	r3, r2
 800534e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005350:	4a12      	ldr	r2, [pc, #72]	; (800539c <HAL_GPIO_Init+0x334>)
 8005352:	69bb      	ldr	r3, [r7, #24]
 8005354:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005356:	69fb      	ldr	r3, [r7, #28]
 8005358:	3301      	adds	r3, #1
 800535a:	61fb      	str	r3, [r7, #28]
 800535c:	69fb      	ldr	r3, [r7, #28]
 800535e:	2b0f      	cmp	r3, #15
 8005360:	f67f ae90 	bls.w	8005084 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005364:	bf00      	nop
 8005366:	bf00      	nop
 8005368:	3724      	adds	r7, #36	; 0x24
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr
 8005372:	bf00      	nop
 8005374:	40023800 	.word	0x40023800
 8005378:	40013800 	.word	0x40013800
 800537c:	40020000 	.word	0x40020000
 8005380:	40020400 	.word	0x40020400
 8005384:	40020800 	.word	0x40020800
 8005388:	40020c00 	.word	0x40020c00
 800538c:	40021000 	.word	0x40021000
 8005390:	40021400 	.word	0x40021400
 8005394:	40021800 	.word	0x40021800
 8005398:	40021c00 	.word	0x40021c00
 800539c:	40013c00 	.word	0x40013c00

080053a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b085      	sub	sp, #20
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	460b      	mov	r3, r1
 80053aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	691a      	ldr	r2, [r3, #16]
 80053b0:	887b      	ldrh	r3, [r7, #2]
 80053b2:	4013      	ands	r3, r2
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d002      	beq.n	80053be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80053b8:	2301      	movs	r3, #1
 80053ba:	73fb      	strb	r3, [r7, #15]
 80053bc:	e001      	b.n	80053c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80053be:	2300      	movs	r3, #0
 80053c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80053c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3714      	adds	r7, #20
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr

080053d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b083      	sub	sp, #12
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	460b      	mov	r3, r1
 80053da:	807b      	strh	r3, [r7, #2]
 80053dc:	4613      	mov	r3, r2
 80053de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80053e0:	787b      	ldrb	r3, [r7, #1]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d003      	beq.n	80053ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80053e6:	887a      	ldrh	r2, [r7, #2]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80053ec:	e003      	b.n	80053f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80053ee:	887b      	ldrh	r3, [r7, #2]
 80053f0:	041a      	lsls	r2, r3, #16
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	619a      	str	r2, [r3, #24]
}
 80053f6:	bf00      	nop
 80053f8:	370c      	adds	r7, #12
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr

08005402 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005402:	b480      	push	{r7}
 8005404:	b085      	sub	sp, #20
 8005406:	af00      	add	r7, sp, #0
 8005408:	6078      	str	r0, [r7, #4]
 800540a:	460b      	mov	r3, r1
 800540c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	695b      	ldr	r3, [r3, #20]
 8005412:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005414:	887a      	ldrh	r2, [r7, #2]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	4013      	ands	r3, r2
 800541a:	041a      	lsls	r2, r3, #16
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	43d9      	mvns	r1, r3
 8005420:	887b      	ldrh	r3, [r7, #2]
 8005422:	400b      	ands	r3, r1
 8005424:	431a      	orrs	r2, r3
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	619a      	str	r2, [r3, #24]
}
 800542a:	bf00      	nop
 800542c:	3714      	adds	r7, #20
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr
	...

08005438 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b084      	sub	sp, #16
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d101      	bne.n	800544a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	e12b      	b.n	80056a2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005450:	b2db      	uxtb	r3, r3
 8005452:	2b00      	cmp	r3, #0
 8005454:	d106      	bne.n	8005464 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2200      	movs	r2, #0
 800545a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f7fc fcc8 	bl	8001df4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2224      	movs	r2, #36	; 0x24
 8005468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f022 0201 	bic.w	r2, r2, #1
 800547a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800548a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800549a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800549c:	f000 fd80 	bl	8005fa0 <HAL_RCC_GetPCLK1Freq>
 80054a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	4a81      	ldr	r2, [pc, #516]	; (80056ac <HAL_I2C_Init+0x274>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d807      	bhi.n	80054bc <HAL_I2C_Init+0x84>
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	4a80      	ldr	r2, [pc, #512]	; (80056b0 <HAL_I2C_Init+0x278>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	bf94      	ite	ls
 80054b4:	2301      	movls	r3, #1
 80054b6:	2300      	movhi	r3, #0
 80054b8:	b2db      	uxtb	r3, r3
 80054ba:	e006      	b.n	80054ca <HAL_I2C_Init+0x92>
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	4a7d      	ldr	r2, [pc, #500]	; (80056b4 <HAL_I2C_Init+0x27c>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	bf94      	ite	ls
 80054c4:	2301      	movls	r3, #1
 80054c6:	2300      	movhi	r3, #0
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d001      	beq.n	80054d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	e0e7      	b.n	80056a2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	4a78      	ldr	r2, [pc, #480]	; (80056b8 <HAL_I2C_Init+0x280>)
 80054d6:	fba2 2303 	umull	r2, r3, r2, r3
 80054da:	0c9b      	lsrs	r3, r3, #18
 80054dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	68ba      	ldr	r2, [r7, #8]
 80054ee:	430a      	orrs	r2, r1
 80054f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	6a1b      	ldr	r3, [r3, #32]
 80054f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	4a6a      	ldr	r2, [pc, #424]	; (80056ac <HAL_I2C_Init+0x274>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d802      	bhi.n	800550c <HAL_I2C_Init+0xd4>
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	3301      	adds	r3, #1
 800550a:	e009      	b.n	8005520 <HAL_I2C_Init+0xe8>
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005512:	fb02 f303 	mul.w	r3, r2, r3
 8005516:	4a69      	ldr	r2, [pc, #420]	; (80056bc <HAL_I2C_Init+0x284>)
 8005518:	fba2 2303 	umull	r2, r3, r2, r3
 800551c:	099b      	lsrs	r3, r3, #6
 800551e:	3301      	adds	r3, #1
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	6812      	ldr	r2, [r2, #0]
 8005524:	430b      	orrs	r3, r1
 8005526:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	69db      	ldr	r3, [r3, #28]
 800552e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005532:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	495c      	ldr	r1, [pc, #368]	; (80056ac <HAL_I2C_Init+0x274>)
 800553c:	428b      	cmp	r3, r1
 800553e:	d819      	bhi.n	8005574 <HAL_I2C_Init+0x13c>
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	1e59      	subs	r1, r3, #1
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	005b      	lsls	r3, r3, #1
 800554a:	fbb1 f3f3 	udiv	r3, r1, r3
 800554e:	1c59      	adds	r1, r3, #1
 8005550:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005554:	400b      	ands	r3, r1
 8005556:	2b00      	cmp	r3, #0
 8005558:	d00a      	beq.n	8005570 <HAL_I2C_Init+0x138>
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	1e59      	subs	r1, r3, #1
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	005b      	lsls	r3, r3, #1
 8005564:	fbb1 f3f3 	udiv	r3, r1, r3
 8005568:	3301      	adds	r3, #1
 800556a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800556e:	e051      	b.n	8005614 <HAL_I2C_Init+0x1dc>
 8005570:	2304      	movs	r3, #4
 8005572:	e04f      	b.n	8005614 <HAL_I2C_Init+0x1dc>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d111      	bne.n	80055a0 <HAL_I2C_Init+0x168>
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	1e58      	subs	r0, r3, #1
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6859      	ldr	r1, [r3, #4]
 8005584:	460b      	mov	r3, r1
 8005586:	005b      	lsls	r3, r3, #1
 8005588:	440b      	add	r3, r1
 800558a:	fbb0 f3f3 	udiv	r3, r0, r3
 800558e:	3301      	adds	r3, #1
 8005590:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005594:	2b00      	cmp	r3, #0
 8005596:	bf0c      	ite	eq
 8005598:	2301      	moveq	r3, #1
 800559a:	2300      	movne	r3, #0
 800559c:	b2db      	uxtb	r3, r3
 800559e:	e012      	b.n	80055c6 <HAL_I2C_Init+0x18e>
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	1e58      	subs	r0, r3, #1
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6859      	ldr	r1, [r3, #4]
 80055a8:	460b      	mov	r3, r1
 80055aa:	009b      	lsls	r3, r3, #2
 80055ac:	440b      	add	r3, r1
 80055ae:	0099      	lsls	r1, r3, #2
 80055b0:	440b      	add	r3, r1
 80055b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80055b6:	3301      	adds	r3, #1
 80055b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055bc:	2b00      	cmp	r3, #0
 80055be:	bf0c      	ite	eq
 80055c0:	2301      	moveq	r3, #1
 80055c2:	2300      	movne	r3, #0
 80055c4:	b2db      	uxtb	r3, r3
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d001      	beq.n	80055ce <HAL_I2C_Init+0x196>
 80055ca:	2301      	movs	r3, #1
 80055cc:	e022      	b.n	8005614 <HAL_I2C_Init+0x1dc>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d10e      	bne.n	80055f4 <HAL_I2C_Init+0x1bc>
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	1e58      	subs	r0, r3, #1
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6859      	ldr	r1, [r3, #4]
 80055de:	460b      	mov	r3, r1
 80055e0:	005b      	lsls	r3, r3, #1
 80055e2:	440b      	add	r3, r1
 80055e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80055e8:	3301      	adds	r3, #1
 80055ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055f2:	e00f      	b.n	8005614 <HAL_I2C_Init+0x1dc>
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	1e58      	subs	r0, r3, #1
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6859      	ldr	r1, [r3, #4]
 80055fc:	460b      	mov	r3, r1
 80055fe:	009b      	lsls	r3, r3, #2
 8005600:	440b      	add	r3, r1
 8005602:	0099      	lsls	r1, r3, #2
 8005604:	440b      	add	r3, r1
 8005606:	fbb0 f3f3 	udiv	r3, r0, r3
 800560a:	3301      	adds	r3, #1
 800560c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005610:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005614:	6879      	ldr	r1, [r7, #4]
 8005616:	6809      	ldr	r1, [r1, #0]
 8005618:	4313      	orrs	r3, r2
 800561a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	69da      	ldr	r2, [r3, #28]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6a1b      	ldr	r3, [r3, #32]
 800562e:	431a      	orrs	r2, r3
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	430a      	orrs	r2, r1
 8005636:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005642:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005646:	687a      	ldr	r2, [r7, #4]
 8005648:	6911      	ldr	r1, [r2, #16]
 800564a:	687a      	ldr	r2, [r7, #4]
 800564c:	68d2      	ldr	r2, [r2, #12]
 800564e:	4311      	orrs	r1, r2
 8005650:	687a      	ldr	r2, [r7, #4]
 8005652:	6812      	ldr	r2, [r2, #0]
 8005654:	430b      	orrs	r3, r1
 8005656:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	68db      	ldr	r3, [r3, #12]
 800565e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	695a      	ldr	r2, [r3, #20]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	699b      	ldr	r3, [r3, #24]
 800566a:	431a      	orrs	r2, r3
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	430a      	orrs	r2, r1
 8005672:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f042 0201 	orr.w	r2, r2, #1
 8005682:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2220      	movs	r2, #32
 800568e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2200      	movs	r2, #0
 8005696:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2200      	movs	r2, #0
 800569c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80056a0:	2300      	movs	r3, #0
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3710      	adds	r7, #16
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}
 80056aa:	bf00      	nop
 80056ac:	000186a0 	.word	0x000186a0
 80056b0:	001e847f 	.word	0x001e847f
 80056b4:	003d08ff 	.word	0x003d08ff
 80056b8:	431bde83 	.word	0x431bde83
 80056bc:	10624dd3 	.word	0x10624dd3

080056c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b086      	sub	sp, #24
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d101      	bne.n	80056d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80056ce:	2301      	movs	r3, #1
 80056d0:	e267      	b.n	8005ba2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f003 0301 	and.w	r3, r3, #1
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d075      	beq.n	80057ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80056de:	4b88      	ldr	r3, [pc, #544]	; (8005900 <HAL_RCC_OscConfig+0x240>)
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	f003 030c 	and.w	r3, r3, #12
 80056e6:	2b04      	cmp	r3, #4
 80056e8:	d00c      	beq.n	8005704 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80056ea:	4b85      	ldr	r3, [pc, #532]	; (8005900 <HAL_RCC_OscConfig+0x240>)
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80056f2:	2b08      	cmp	r3, #8
 80056f4:	d112      	bne.n	800571c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80056f6:	4b82      	ldr	r3, [pc, #520]	; (8005900 <HAL_RCC_OscConfig+0x240>)
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005702:	d10b      	bne.n	800571c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005704:	4b7e      	ldr	r3, [pc, #504]	; (8005900 <HAL_RCC_OscConfig+0x240>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800570c:	2b00      	cmp	r3, #0
 800570e:	d05b      	beq.n	80057c8 <HAL_RCC_OscConfig+0x108>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d157      	bne.n	80057c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	e242      	b.n	8005ba2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005724:	d106      	bne.n	8005734 <HAL_RCC_OscConfig+0x74>
 8005726:	4b76      	ldr	r3, [pc, #472]	; (8005900 <HAL_RCC_OscConfig+0x240>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a75      	ldr	r2, [pc, #468]	; (8005900 <HAL_RCC_OscConfig+0x240>)
 800572c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005730:	6013      	str	r3, [r2, #0]
 8005732:	e01d      	b.n	8005770 <HAL_RCC_OscConfig+0xb0>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800573c:	d10c      	bne.n	8005758 <HAL_RCC_OscConfig+0x98>
 800573e:	4b70      	ldr	r3, [pc, #448]	; (8005900 <HAL_RCC_OscConfig+0x240>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a6f      	ldr	r2, [pc, #444]	; (8005900 <HAL_RCC_OscConfig+0x240>)
 8005744:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005748:	6013      	str	r3, [r2, #0]
 800574a:	4b6d      	ldr	r3, [pc, #436]	; (8005900 <HAL_RCC_OscConfig+0x240>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a6c      	ldr	r2, [pc, #432]	; (8005900 <HAL_RCC_OscConfig+0x240>)
 8005750:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005754:	6013      	str	r3, [r2, #0]
 8005756:	e00b      	b.n	8005770 <HAL_RCC_OscConfig+0xb0>
 8005758:	4b69      	ldr	r3, [pc, #420]	; (8005900 <HAL_RCC_OscConfig+0x240>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a68      	ldr	r2, [pc, #416]	; (8005900 <HAL_RCC_OscConfig+0x240>)
 800575e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005762:	6013      	str	r3, [r2, #0]
 8005764:	4b66      	ldr	r3, [pc, #408]	; (8005900 <HAL_RCC_OscConfig+0x240>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a65      	ldr	r2, [pc, #404]	; (8005900 <HAL_RCC_OscConfig+0x240>)
 800576a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800576e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d013      	beq.n	80057a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005778:	f7fd fac0 	bl	8002cfc <HAL_GetTick>
 800577c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800577e:	e008      	b.n	8005792 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005780:	f7fd fabc 	bl	8002cfc <HAL_GetTick>
 8005784:	4602      	mov	r2, r0
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	1ad3      	subs	r3, r2, r3
 800578a:	2b64      	cmp	r3, #100	; 0x64
 800578c:	d901      	bls.n	8005792 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800578e:	2303      	movs	r3, #3
 8005790:	e207      	b.n	8005ba2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005792:	4b5b      	ldr	r3, [pc, #364]	; (8005900 <HAL_RCC_OscConfig+0x240>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800579a:	2b00      	cmp	r3, #0
 800579c:	d0f0      	beq.n	8005780 <HAL_RCC_OscConfig+0xc0>
 800579e:	e014      	b.n	80057ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057a0:	f7fd faac 	bl	8002cfc <HAL_GetTick>
 80057a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057a6:	e008      	b.n	80057ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80057a8:	f7fd faa8 	bl	8002cfc <HAL_GetTick>
 80057ac:	4602      	mov	r2, r0
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	1ad3      	subs	r3, r2, r3
 80057b2:	2b64      	cmp	r3, #100	; 0x64
 80057b4:	d901      	bls.n	80057ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80057b6:	2303      	movs	r3, #3
 80057b8:	e1f3      	b.n	8005ba2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057ba:	4b51      	ldr	r3, [pc, #324]	; (8005900 <HAL_RCC_OscConfig+0x240>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d1f0      	bne.n	80057a8 <HAL_RCC_OscConfig+0xe8>
 80057c6:	e000      	b.n	80057ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f003 0302 	and.w	r3, r3, #2
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d063      	beq.n	800589e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80057d6:	4b4a      	ldr	r3, [pc, #296]	; (8005900 <HAL_RCC_OscConfig+0x240>)
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	f003 030c 	and.w	r3, r3, #12
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d00b      	beq.n	80057fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80057e2:	4b47      	ldr	r3, [pc, #284]	; (8005900 <HAL_RCC_OscConfig+0x240>)
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80057ea:	2b08      	cmp	r3, #8
 80057ec:	d11c      	bne.n	8005828 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80057ee:	4b44      	ldr	r3, [pc, #272]	; (8005900 <HAL_RCC_OscConfig+0x240>)
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d116      	bne.n	8005828 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057fa:	4b41      	ldr	r3, [pc, #260]	; (8005900 <HAL_RCC_OscConfig+0x240>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f003 0302 	and.w	r3, r3, #2
 8005802:	2b00      	cmp	r3, #0
 8005804:	d005      	beq.n	8005812 <HAL_RCC_OscConfig+0x152>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	68db      	ldr	r3, [r3, #12]
 800580a:	2b01      	cmp	r3, #1
 800580c:	d001      	beq.n	8005812 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	e1c7      	b.n	8005ba2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005812:	4b3b      	ldr	r3, [pc, #236]	; (8005900 <HAL_RCC_OscConfig+0x240>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	691b      	ldr	r3, [r3, #16]
 800581e:	00db      	lsls	r3, r3, #3
 8005820:	4937      	ldr	r1, [pc, #220]	; (8005900 <HAL_RCC_OscConfig+0x240>)
 8005822:	4313      	orrs	r3, r2
 8005824:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005826:	e03a      	b.n	800589e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	68db      	ldr	r3, [r3, #12]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d020      	beq.n	8005872 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005830:	4b34      	ldr	r3, [pc, #208]	; (8005904 <HAL_RCC_OscConfig+0x244>)
 8005832:	2201      	movs	r2, #1
 8005834:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005836:	f7fd fa61 	bl	8002cfc <HAL_GetTick>
 800583a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800583c:	e008      	b.n	8005850 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800583e:	f7fd fa5d 	bl	8002cfc <HAL_GetTick>
 8005842:	4602      	mov	r2, r0
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	1ad3      	subs	r3, r2, r3
 8005848:	2b02      	cmp	r3, #2
 800584a:	d901      	bls.n	8005850 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800584c:	2303      	movs	r3, #3
 800584e:	e1a8      	b.n	8005ba2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005850:	4b2b      	ldr	r3, [pc, #172]	; (8005900 <HAL_RCC_OscConfig+0x240>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f003 0302 	and.w	r3, r3, #2
 8005858:	2b00      	cmp	r3, #0
 800585a:	d0f0      	beq.n	800583e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800585c:	4b28      	ldr	r3, [pc, #160]	; (8005900 <HAL_RCC_OscConfig+0x240>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	691b      	ldr	r3, [r3, #16]
 8005868:	00db      	lsls	r3, r3, #3
 800586a:	4925      	ldr	r1, [pc, #148]	; (8005900 <HAL_RCC_OscConfig+0x240>)
 800586c:	4313      	orrs	r3, r2
 800586e:	600b      	str	r3, [r1, #0]
 8005870:	e015      	b.n	800589e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005872:	4b24      	ldr	r3, [pc, #144]	; (8005904 <HAL_RCC_OscConfig+0x244>)
 8005874:	2200      	movs	r2, #0
 8005876:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005878:	f7fd fa40 	bl	8002cfc <HAL_GetTick>
 800587c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800587e:	e008      	b.n	8005892 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005880:	f7fd fa3c 	bl	8002cfc <HAL_GetTick>
 8005884:	4602      	mov	r2, r0
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	1ad3      	subs	r3, r2, r3
 800588a:	2b02      	cmp	r3, #2
 800588c:	d901      	bls.n	8005892 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800588e:	2303      	movs	r3, #3
 8005890:	e187      	b.n	8005ba2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005892:	4b1b      	ldr	r3, [pc, #108]	; (8005900 <HAL_RCC_OscConfig+0x240>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f003 0302 	and.w	r3, r3, #2
 800589a:	2b00      	cmp	r3, #0
 800589c:	d1f0      	bne.n	8005880 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f003 0308 	and.w	r3, r3, #8
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d036      	beq.n	8005918 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	695b      	ldr	r3, [r3, #20]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d016      	beq.n	80058e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80058b2:	4b15      	ldr	r3, [pc, #84]	; (8005908 <HAL_RCC_OscConfig+0x248>)
 80058b4:	2201      	movs	r2, #1
 80058b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058b8:	f7fd fa20 	bl	8002cfc <HAL_GetTick>
 80058bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058be:	e008      	b.n	80058d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80058c0:	f7fd fa1c 	bl	8002cfc <HAL_GetTick>
 80058c4:	4602      	mov	r2, r0
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	1ad3      	subs	r3, r2, r3
 80058ca:	2b02      	cmp	r3, #2
 80058cc:	d901      	bls.n	80058d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80058ce:	2303      	movs	r3, #3
 80058d0:	e167      	b.n	8005ba2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058d2:	4b0b      	ldr	r3, [pc, #44]	; (8005900 <HAL_RCC_OscConfig+0x240>)
 80058d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058d6:	f003 0302 	and.w	r3, r3, #2
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d0f0      	beq.n	80058c0 <HAL_RCC_OscConfig+0x200>
 80058de:	e01b      	b.n	8005918 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80058e0:	4b09      	ldr	r3, [pc, #36]	; (8005908 <HAL_RCC_OscConfig+0x248>)
 80058e2:	2200      	movs	r2, #0
 80058e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058e6:	f7fd fa09 	bl	8002cfc <HAL_GetTick>
 80058ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058ec:	e00e      	b.n	800590c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80058ee:	f7fd fa05 	bl	8002cfc <HAL_GetTick>
 80058f2:	4602      	mov	r2, r0
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	1ad3      	subs	r3, r2, r3
 80058f8:	2b02      	cmp	r3, #2
 80058fa:	d907      	bls.n	800590c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80058fc:	2303      	movs	r3, #3
 80058fe:	e150      	b.n	8005ba2 <HAL_RCC_OscConfig+0x4e2>
 8005900:	40023800 	.word	0x40023800
 8005904:	42470000 	.word	0x42470000
 8005908:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800590c:	4b88      	ldr	r3, [pc, #544]	; (8005b30 <HAL_RCC_OscConfig+0x470>)
 800590e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005910:	f003 0302 	and.w	r3, r3, #2
 8005914:	2b00      	cmp	r3, #0
 8005916:	d1ea      	bne.n	80058ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f003 0304 	and.w	r3, r3, #4
 8005920:	2b00      	cmp	r3, #0
 8005922:	f000 8097 	beq.w	8005a54 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005926:	2300      	movs	r3, #0
 8005928:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800592a:	4b81      	ldr	r3, [pc, #516]	; (8005b30 <HAL_RCC_OscConfig+0x470>)
 800592c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800592e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005932:	2b00      	cmp	r3, #0
 8005934:	d10f      	bne.n	8005956 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005936:	2300      	movs	r3, #0
 8005938:	60bb      	str	r3, [r7, #8]
 800593a:	4b7d      	ldr	r3, [pc, #500]	; (8005b30 <HAL_RCC_OscConfig+0x470>)
 800593c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800593e:	4a7c      	ldr	r2, [pc, #496]	; (8005b30 <HAL_RCC_OscConfig+0x470>)
 8005940:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005944:	6413      	str	r3, [r2, #64]	; 0x40
 8005946:	4b7a      	ldr	r3, [pc, #488]	; (8005b30 <HAL_RCC_OscConfig+0x470>)
 8005948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800594a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800594e:	60bb      	str	r3, [r7, #8]
 8005950:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005952:	2301      	movs	r3, #1
 8005954:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005956:	4b77      	ldr	r3, [pc, #476]	; (8005b34 <HAL_RCC_OscConfig+0x474>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800595e:	2b00      	cmp	r3, #0
 8005960:	d118      	bne.n	8005994 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005962:	4b74      	ldr	r3, [pc, #464]	; (8005b34 <HAL_RCC_OscConfig+0x474>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a73      	ldr	r2, [pc, #460]	; (8005b34 <HAL_RCC_OscConfig+0x474>)
 8005968:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800596c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800596e:	f7fd f9c5 	bl	8002cfc <HAL_GetTick>
 8005972:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005974:	e008      	b.n	8005988 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005976:	f7fd f9c1 	bl	8002cfc <HAL_GetTick>
 800597a:	4602      	mov	r2, r0
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	1ad3      	subs	r3, r2, r3
 8005980:	2b02      	cmp	r3, #2
 8005982:	d901      	bls.n	8005988 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005984:	2303      	movs	r3, #3
 8005986:	e10c      	b.n	8005ba2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005988:	4b6a      	ldr	r3, [pc, #424]	; (8005b34 <HAL_RCC_OscConfig+0x474>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005990:	2b00      	cmp	r3, #0
 8005992:	d0f0      	beq.n	8005976 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	2b01      	cmp	r3, #1
 800599a:	d106      	bne.n	80059aa <HAL_RCC_OscConfig+0x2ea>
 800599c:	4b64      	ldr	r3, [pc, #400]	; (8005b30 <HAL_RCC_OscConfig+0x470>)
 800599e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059a0:	4a63      	ldr	r2, [pc, #396]	; (8005b30 <HAL_RCC_OscConfig+0x470>)
 80059a2:	f043 0301 	orr.w	r3, r3, #1
 80059a6:	6713      	str	r3, [r2, #112]	; 0x70
 80059a8:	e01c      	b.n	80059e4 <HAL_RCC_OscConfig+0x324>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	2b05      	cmp	r3, #5
 80059b0:	d10c      	bne.n	80059cc <HAL_RCC_OscConfig+0x30c>
 80059b2:	4b5f      	ldr	r3, [pc, #380]	; (8005b30 <HAL_RCC_OscConfig+0x470>)
 80059b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059b6:	4a5e      	ldr	r2, [pc, #376]	; (8005b30 <HAL_RCC_OscConfig+0x470>)
 80059b8:	f043 0304 	orr.w	r3, r3, #4
 80059bc:	6713      	str	r3, [r2, #112]	; 0x70
 80059be:	4b5c      	ldr	r3, [pc, #368]	; (8005b30 <HAL_RCC_OscConfig+0x470>)
 80059c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059c2:	4a5b      	ldr	r2, [pc, #364]	; (8005b30 <HAL_RCC_OscConfig+0x470>)
 80059c4:	f043 0301 	orr.w	r3, r3, #1
 80059c8:	6713      	str	r3, [r2, #112]	; 0x70
 80059ca:	e00b      	b.n	80059e4 <HAL_RCC_OscConfig+0x324>
 80059cc:	4b58      	ldr	r3, [pc, #352]	; (8005b30 <HAL_RCC_OscConfig+0x470>)
 80059ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059d0:	4a57      	ldr	r2, [pc, #348]	; (8005b30 <HAL_RCC_OscConfig+0x470>)
 80059d2:	f023 0301 	bic.w	r3, r3, #1
 80059d6:	6713      	str	r3, [r2, #112]	; 0x70
 80059d8:	4b55      	ldr	r3, [pc, #340]	; (8005b30 <HAL_RCC_OscConfig+0x470>)
 80059da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059dc:	4a54      	ldr	r2, [pc, #336]	; (8005b30 <HAL_RCC_OscConfig+0x470>)
 80059de:	f023 0304 	bic.w	r3, r3, #4
 80059e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d015      	beq.n	8005a18 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059ec:	f7fd f986 	bl	8002cfc <HAL_GetTick>
 80059f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059f2:	e00a      	b.n	8005a0a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059f4:	f7fd f982 	bl	8002cfc <HAL_GetTick>
 80059f8:	4602      	mov	r2, r0
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	1ad3      	subs	r3, r2, r3
 80059fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d901      	bls.n	8005a0a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005a06:	2303      	movs	r3, #3
 8005a08:	e0cb      	b.n	8005ba2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a0a:	4b49      	ldr	r3, [pc, #292]	; (8005b30 <HAL_RCC_OscConfig+0x470>)
 8005a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a0e:	f003 0302 	and.w	r3, r3, #2
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d0ee      	beq.n	80059f4 <HAL_RCC_OscConfig+0x334>
 8005a16:	e014      	b.n	8005a42 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a18:	f7fd f970 	bl	8002cfc <HAL_GetTick>
 8005a1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a1e:	e00a      	b.n	8005a36 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a20:	f7fd f96c 	bl	8002cfc <HAL_GetTick>
 8005a24:	4602      	mov	r2, r0
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	1ad3      	subs	r3, r2, r3
 8005a2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d901      	bls.n	8005a36 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005a32:	2303      	movs	r3, #3
 8005a34:	e0b5      	b.n	8005ba2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a36:	4b3e      	ldr	r3, [pc, #248]	; (8005b30 <HAL_RCC_OscConfig+0x470>)
 8005a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a3a:	f003 0302 	and.w	r3, r3, #2
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d1ee      	bne.n	8005a20 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a42:	7dfb      	ldrb	r3, [r7, #23]
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d105      	bne.n	8005a54 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a48:	4b39      	ldr	r3, [pc, #228]	; (8005b30 <HAL_RCC_OscConfig+0x470>)
 8005a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a4c:	4a38      	ldr	r2, [pc, #224]	; (8005b30 <HAL_RCC_OscConfig+0x470>)
 8005a4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a52:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	699b      	ldr	r3, [r3, #24]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	f000 80a1 	beq.w	8005ba0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005a5e:	4b34      	ldr	r3, [pc, #208]	; (8005b30 <HAL_RCC_OscConfig+0x470>)
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	f003 030c 	and.w	r3, r3, #12
 8005a66:	2b08      	cmp	r3, #8
 8005a68:	d05c      	beq.n	8005b24 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	699b      	ldr	r3, [r3, #24]
 8005a6e:	2b02      	cmp	r3, #2
 8005a70:	d141      	bne.n	8005af6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a72:	4b31      	ldr	r3, [pc, #196]	; (8005b38 <HAL_RCC_OscConfig+0x478>)
 8005a74:	2200      	movs	r2, #0
 8005a76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a78:	f7fd f940 	bl	8002cfc <HAL_GetTick>
 8005a7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a7e:	e008      	b.n	8005a92 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a80:	f7fd f93c 	bl	8002cfc <HAL_GetTick>
 8005a84:	4602      	mov	r2, r0
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	1ad3      	subs	r3, r2, r3
 8005a8a:	2b02      	cmp	r3, #2
 8005a8c:	d901      	bls.n	8005a92 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005a8e:	2303      	movs	r3, #3
 8005a90:	e087      	b.n	8005ba2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a92:	4b27      	ldr	r3, [pc, #156]	; (8005b30 <HAL_RCC_OscConfig+0x470>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d1f0      	bne.n	8005a80 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	69da      	ldr	r2, [r3, #28]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6a1b      	ldr	r3, [r3, #32]
 8005aa6:	431a      	orrs	r2, r3
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aac:	019b      	lsls	r3, r3, #6
 8005aae:	431a      	orrs	r2, r3
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ab4:	085b      	lsrs	r3, r3, #1
 8005ab6:	3b01      	subs	r3, #1
 8005ab8:	041b      	lsls	r3, r3, #16
 8005aba:	431a      	orrs	r2, r3
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ac0:	061b      	lsls	r3, r3, #24
 8005ac2:	491b      	ldr	r1, [pc, #108]	; (8005b30 <HAL_RCC_OscConfig+0x470>)
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ac8:	4b1b      	ldr	r3, [pc, #108]	; (8005b38 <HAL_RCC_OscConfig+0x478>)
 8005aca:	2201      	movs	r2, #1
 8005acc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ace:	f7fd f915 	bl	8002cfc <HAL_GetTick>
 8005ad2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ad4:	e008      	b.n	8005ae8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ad6:	f7fd f911 	bl	8002cfc <HAL_GetTick>
 8005ada:	4602      	mov	r2, r0
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	1ad3      	subs	r3, r2, r3
 8005ae0:	2b02      	cmp	r3, #2
 8005ae2:	d901      	bls.n	8005ae8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005ae4:	2303      	movs	r3, #3
 8005ae6:	e05c      	b.n	8005ba2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ae8:	4b11      	ldr	r3, [pc, #68]	; (8005b30 <HAL_RCC_OscConfig+0x470>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d0f0      	beq.n	8005ad6 <HAL_RCC_OscConfig+0x416>
 8005af4:	e054      	b.n	8005ba0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005af6:	4b10      	ldr	r3, [pc, #64]	; (8005b38 <HAL_RCC_OscConfig+0x478>)
 8005af8:	2200      	movs	r2, #0
 8005afa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005afc:	f7fd f8fe 	bl	8002cfc <HAL_GetTick>
 8005b00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b02:	e008      	b.n	8005b16 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b04:	f7fd f8fa 	bl	8002cfc <HAL_GetTick>
 8005b08:	4602      	mov	r2, r0
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	1ad3      	subs	r3, r2, r3
 8005b0e:	2b02      	cmp	r3, #2
 8005b10:	d901      	bls.n	8005b16 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005b12:	2303      	movs	r3, #3
 8005b14:	e045      	b.n	8005ba2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b16:	4b06      	ldr	r3, [pc, #24]	; (8005b30 <HAL_RCC_OscConfig+0x470>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d1f0      	bne.n	8005b04 <HAL_RCC_OscConfig+0x444>
 8005b22:	e03d      	b.n	8005ba0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	699b      	ldr	r3, [r3, #24]
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d107      	bne.n	8005b3c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	e038      	b.n	8005ba2 <HAL_RCC_OscConfig+0x4e2>
 8005b30:	40023800 	.word	0x40023800
 8005b34:	40007000 	.word	0x40007000
 8005b38:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005b3c:	4b1b      	ldr	r3, [pc, #108]	; (8005bac <HAL_RCC_OscConfig+0x4ec>)
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	699b      	ldr	r3, [r3, #24]
 8005b46:	2b01      	cmp	r3, #1
 8005b48:	d028      	beq.n	8005b9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d121      	bne.n	8005b9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d11a      	bne.n	8005b9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b66:	68fa      	ldr	r2, [r7, #12]
 8005b68:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005b6c:	4013      	ands	r3, r2
 8005b6e:	687a      	ldr	r2, [r7, #4]
 8005b70:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005b72:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d111      	bne.n	8005b9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b82:	085b      	lsrs	r3, r3, #1
 8005b84:	3b01      	subs	r3, #1
 8005b86:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d107      	bne.n	8005b9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b96:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d001      	beq.n	8005ba0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	e000      	b.n	8005ba2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005ba0:	2300      	movs	r3, #0
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3718      	adds	r7, #24
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}
 8005baa:	bf00      	nop
 8005bac:	40023800 	.word	0x40023800

08005bb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b084      	sub	sp, #16
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
 8005bb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d101      	bne.n	8005bc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	e0cc      	b.n	8005d5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005bc4:	4b68      	ldr	r3, [pc, #416]	; (8005d68 <HAL_RCC_ClockConfig+0x1b8>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f003 0307 	and.w	r3, r3, #7
 8005bcc:	683a      	ldr	r2, [r7, #0]
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	d90c      	bls.n	8005bec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bd2:	4b65      	ldr	r3, [pc, #404]	; (8005d68 <HAL_RCC_ClockConfig+0x1b8>)
 8005bd4:	683a      	ldr	r2, [r7, #0]
 8005bd6:	b2d2      	uxtb	r2, r2
 8005bd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bda:	4b63      	ldr	r3, [pc, #396]	; (8005d68 <HAL_RCC_ClockConfig+0x1b8>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f003 0307 	and.w	r3, r3, #7
 8005be2:	683a      	ldr	r2, [r7, #0]
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d001      	beq.n	8005bec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	e0b8      	b.n	8005d5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f003 0302 	and.w	r3, r3, #2
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d020      	beq.n	8005c3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f003 0304 	and.w	r3, r3, #4
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d005      	beq.n	8005c10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c04:	4b59      	ldr	r3, [pc, #356]	; (8005d6c <HAL_RCC_ClockConfig+0x1bc>)
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	4a58      	ldr	r2, [pc, #352]	; (8005d6c <HAL_RCC_ClockConfig+0x1bc>)
 8005c0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005c0e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f003 0308 	and.w	r3, r3, #8
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d005      	beq.n	8005c28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005c1c:	4b53      	ldr	r3, [pc, #332]	; (8005d6c <HAL_RCC_ClockConfig+0x1bc>)
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	4a52      	ldr	r2, [pc, #328]	; (8005d6c <HAL_RCC_ClockConfig+0x1bc>)
 8005c22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005c26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c28:	4b50      	ldr	r3, [pc, #320]	; (8005d6c <HAL_RCC_ClockConfig+0x1bc>)
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	494d      	ldr	r1, [pc, #308]	; (8005d6c <HAL_RCC_ClockConfig+0x1bc>)
 8005c36:	4313      	orrs	r3, r2
 8005c38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f003 0301 	and.w	r3, r3, #1
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d044      	beq.n	8005cd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	2b01      	cmp	r3, #1
 8005c4c:	d107      	bne.n	8005c5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c4e:	4b47      	ldr	r3, [pc, #284]	; (8005d6c <HAL_RCC_ClockConfig+0x1bc>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d119      	bne.n	8005c8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e07f      	b.n	8005d5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	2b02      	cmp	r3, #2
 8005c64:	d003      	beq.n	8005c6e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c6a:	2b03      	cmp	r3, #3
 8005c6c:	d107      	bne.n	8005c7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c6e:	4b3f      	ldr	r3, [pc, #252]	; (8005d6c <HAL_RCC_ClockConfig+0x1bc>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d109      	bne.n	8005c8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e06f      	b.n	8005d5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c7e:	4b3b      	ldr	r3, [pc, #236]	; (8005d6c <HAL_RCC_ClockConfig+0x1bc>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f003 0302 	and.w	r3, r3, #2
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d101      	bne.n	8005c8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e067      	b.n	8005d5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c8e:	4b37      	ldr	r3, [pc, #220]	; (8005d6c <HAL_RCC_ClockConfig+0x1bc>)
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	f023 0203 	bic.w	r2, r3, #3
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	4934      	ldr	r1, [pc, #208]	; (8005d6c <HAL_RCC_ClockConfig+0x1bc>)
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ca0:	f7fd f82c 	bl	8002cfc <HAL_GetTick>
 8005ca4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ca6:	e00a      	b.n	8005cbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ca8:	f7fd f828 	bl	8002cfc <HAL_GetTick>
 8005cac:	4602      	mov	r2, r0
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	1ad3      	subs	r3, r2, r3
 8005cb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d901      	bls.n	8005cbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005cba:	2303      	movs	r3, #3
 8005cbc:	e04f      	b.n	8005d5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cbe:	4b2b      	ldr	r3, [pc, #172]	; (8005d6c <HAL_RCC_ClockConfig+0x1bc>)
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	f003 020c 	and.w	r2, r3, #12
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	009b      	lsls	r3, r3, #2
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d1eb      	bne.n	8005ca8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005cd0:	4b25      	ldr	r3, [pc, #148]	; (8005d68 <HAL_RCC_ClockConfig+0x1b8>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f003 0307 	and.w	r3, r3, #7
 8005cd8:	683a      	ldr	r2, [r7, #0]
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d20c      	bcs.n	8005cf8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cde:	4b22      	ldr	r3, [pc, #136]	; (8005d68 <HAL_RCC_ClockConfig+0x1b8>)
 8005ce0:	683a      	ldr	r2, [r7, #0]
 8005ce2:	b2d2      	uxtb	r2, r2
 8005ce4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ce6:	4b20      	ldr	r3, [pc, #128]	; (8005d68 <HAL_RCC_ClockConfig+0x1b8>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f003 0307 	and.w	r3, r3, #7
 8005cee:	683a      	ldr	r2, [r7, #0]
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	d001      	beq.n	8005cf8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	e032      	b.n	8005d5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f003 0304 	and.w	r3, r3, #4
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d008      	beq.n	8005d16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d04:	4b19      	ldr	r3, [pc, #100]	; (8005d6c <HAL_RCC_ClockConfig+0x1bc>)
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	68db      	ldr	r3, [r3, #12]
 8005d10:	4916      	ldr	r1, [pc, #88]	; (8005d6c <HAL_RCC_ClockConfig+0x1bc>)
 8005d12:	4313      	orrs	r3, r2
 8005d14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f003 0308 	and.w	r3, r3, #8
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d009      	beq.n	8005d36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d22:	4b12      	ldr	r3, [pc, #72]	; (8005d6c <HAL_RCC_ClockConfig+0x1bc>)
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	691b      	ldr	r3, [r3, #16]
 8005d2e:	00db      	lsls	r3, r3, #3
 8005d30:	490e      	ldr	r1, [pc, #56]	; (8005d6c <HAL_RCC_ClockConfig+0x1bc>)
 8005d32:	4313      	orrs	r3, r2
 8005d34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005d36:	f000 f821 	bl	8005d7c <HAL_RCC_GetSysClockFreq>
 8005d3a:	4602      	mov	r2, r0
 8005d3c:	4b0b      	ldr	r3, [pc, #44]	; (8005d6c <HAL_RCC_ClockConfig+0x1bc>)
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	091b      	lsrs	r3, r3, #4
 8005d42:	f003 030f 	and.w	r3, r3, #15
 8005d46:	490a      	ldr	r1, [pc, #40]	; (8005d70 <HAL_RCC_ClockConfig+0x1c0>)
 8005d48:	5ccb      	ldrb	r3, [r1, r3]
 8005d4a:	fa22 f303 	lsr.w	r3, r2, r3
 8005d4e:	4a09      	ldr	r2, [pc, #36]	; (8005d74 <HAL_RCC_ClockConfig+0x1c4>)
 8005d50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005d52:	4b09      	ldr	r3, [pc, #36]	; (8005d78 <HAL_RCC_ClockConfig+0x1c8>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4618      	mov	r0, r3
 8005d58:	f7fc ff8c 	bl	8002c74 <HAL_InitTick>

  return HAL_OK;
 8005d5c:	2300      	movs	r3, #0
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3710      	adds	r7, #16
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}
 8005d66:	bf00      	nop
 8005d68:	40023c00 	.word	0x40023c00
 8005d6c:	40023800 	.word	0x40023800
 8005d70:	0801d118 	.word	0x0801d118
 8005d74:	20000000 	.word	0x20000000
 8005d78:	20000004 	.word	0x20000004

08005d7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d80:	b094      	sub	sp, #80	; 0x50
 8005d82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005d84:	2300      	movs	r3, #0
 8005d86:	647b      	str	r3, [r7, #68]	; 0x44
 8005d88:	2300      	movs	r3, #0
 8005d8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005d90:	2300      	movs	r3, #0
 8005d92:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d94:	4b79      	ldr	r3, [pc, #484]	; (8005f7c <HAL_RCC_GetSysClockFreq+0x200>)
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	f003 030c 	and.w	r3, r3, #12
 8005d9c:	2b08      	cmp	r3, #8
 8005d9e:	d00d      	beq.n	8005dbc <HAL_RCC_GetSysClockFreq+0x40>
 8005da0:	2b08      	cmp	r3, #8
 8005da2:	f200 80e1 	bhi.w	8005f68 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d002      	beq.n	8005db0 <HAL_RCC_GetSysClockFreq+0x34>
 8005daa:	2b04      	cmp	r3, #4
 8005dac:	d003      	beq.n	8005db6 <HAL_RCC_GetSysClockFreq+0x3a>
 8005dae:	e0db      	b.n	8005f68 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005db0:	4b73      	ldr	r3, [pc, #460]	; (8005f80 <HAL_RCC_GetSysClockFreq+0x204>)
 8005db2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005db4:	e0db      	b.n	8005f6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005db6:	4b73      	ldr	r3, [pc, #460]	; (8005f84 <HAL_RCC_GetSysClockFreq+0x208>)
 8005db8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005dba:	e0d8      	b.n	8005f6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005dbc:	4b6f      	ldr	r3, [pc, #444]	; (8005f7c <HAL_RCC_GetSysClockFreq+0x200>)
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005dc4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005dc6:	4b6d      	ldr	r3, [pc, #436]	; (8005f7c <HAL_RCC_GetSysClockFreq+0x200>)
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d063      	beq.n	8005e9a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005dd2:	4b6a      	ldr	r3, [pc, #424]	; (8005f7c <HAL_RCC_GetSysClockFreq+0x200>)
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	099b      	lsrs	r3, r3, #6
 8005dd8:	2200      	movs	r2, #0
 8005dda:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ddc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005de0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005de4:	633b      	str	r3, [r7, #48]	; 0x30
 8005de6:	2300      	movs	r3, #0
 8005de8:	637b      	str	r3, [r7, #52]	; 0x34
 8005dea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005dee:	4622      	mov	r2, r4
 8005df0:	462b      	mov	r3, r5
 8005df2:	f04f 0000 	mov.w	r0, #0
 8005df6:	f04f 0100 	mov.w	r1, #0
 8005dfa:	0159      	lsls	r1, r3, #5
 8005dfc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005e00:	0150      	lsls	r0, r2, #5
 8005e02:	4602      	mov	r2, r0
 8005e04:	460b      	mov	r3, r1
 8005e06:	4621      	mov	r1, r4
 8005e08:	1a51      	subs	r1, r2, r1
 8005e0a:	6139      	str	r1, [r7, #16]
 8005e0c:	4629      	mov	r1, r5
 8005e0e:	eb63 0301 	sbc.w	r3, r3, r1
 8005e12:	617b      	str	r3, [r7, #20]
 8005e14:	f04f 0200 	mov.w	r2, #0
 8005e18:	f04f 0300 	mov.w	r3, #0
 8005e1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005e20:	4659      	mov	r1, fp
 8005e22:	018b      	lsls	r3, r1, #6
 8005e24:	4651      	mov	r1, sl
 8005e26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005e2a:	4651      	mov	r1, sl
 8005e2c:	018a      	lsls	r2, r1, #6
 8005e2e:	4651      	mov	r1, sl
 8005e30:	ebb2 0801 	subs.w	r8, r2, r1
 8005e34:	4659      	mov	r1, fp
 8005e36:	eb63 0901 	sbc.w	r9, r3, r1
 8005e3a:	f04f 0200 	mov.w	r2, #0
 8005e3e:	f04f 0300 	mov.w	r3, #0
 8005e42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e4e:	4690      	mov	r8, r2
 8005e50:	4699      	mov	r9, r3
 8005e52:	4623      	mov	r3, r4
 8005e54:	eb18 0303 	adds.w	r3, r8, r3
 8005e58:	60bb      	str	r3, [r7, #8]
 8005e5a:	462b      	mov	r3, r5
 8005e5c:	eb49 0303 	adc.w	r3, r9, r3
 8005e60:	60fb      	str	r3, [r7, #12]
 8005e62:	f04f 0200 	mov.w	r2, #0
 8005e66:	f04f 0300 	mov.w	r3, #0
 8005e6a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005e6e:	4629      	mov	r1, r5
 8005e70:	024b      	lsls	r3, r1, #9
 8005e72:	4621      	mov	r1, r4
 8005e74:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005e78:	4621      	mov	r1, r4
 8005e7a:	024a      	lsls	r2, r1, #9
 8005e7c:	4610      	mov	r0, r2
 8005e7e:	4619      	mov	r1, r3
 8005e80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e82:	2200      	movs	r2, #0
 8005e84:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e86:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e88:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005e8c:	f7fa f9f0 	bl	8000270 <__aeabi_uldivmod>
 8005e90:	4602      	mov	r2, r0
 8005e92:	460b      	mov	r3, r1
 8005e94:	4613      	mov	r3, r2
 8005e96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e98:	e058      	b.n	8005f4c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e9a:	4b38      	ldr	r3, [pc, #224]	; (8005f7c <HAL_RCC_GetSysClockFreq+0x200>)
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	099b      	lsrs	r3, r3, #6
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	4611      	mov	r1, r2
 8005ea6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005eaa:	623b      	str	r3, [r7, #32]
 8005eac:	2300      	movs	r3, #0
 8005eae:	627b      	str	r3, [r7, #36]	; 0x24
 8005eb0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005eb4:	4642      	mov	r2, r8
 8005eb6:	464b      	mov	r3, r9
 8005eb8:	f04f 0000 	mov.w	r0, #0
 8005ebc:	f04f 0100 	mov.w	r1, #0
 8005ec0:	0159      	lsls	r1, r3, #5
 8005ec2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005ec6:	0150      	lsls	r0, r2, #5
 8005ec8:	4602      	mov	r2, r0
 8005eca:	460b      	mov	r3, r1
 8005ecc:	4641      	mov	r1, r8
 8005ece:	ebb2 0a01 	subs.w	sl, r2, r1
 8005ed2:	4649      	mov	r1, r9
 8005ed4:	eb63 0b01 	sbc.w	fp, r3, r1
 8005ed8:	f04f 0200 	mov.w	r2, #0
 8005edc:	f04f 0300 	mov.w	r3, #0
 8005ee0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005ee4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005ee8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005eec:	ebb2 040a 	subs.w	r4, r2, sl
 8005ef0:	eb63 050b 	sbc.w	r5, r3, fp
 8005ef4:	f04f 0200 	mov.w	r2, #0
 8005ef8:	f04f 0300 	mov.w	r3, #0
 8005efc:	00eb      	lsls	r3, r5, #3
 8005efe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005f02:	00e2      	lsls	r2, r4, #3
 8005f04:	4614      	mov	r4, r2
 8005f06:	461d      	mov	r5, r3
 8005f08:	4643      	mov	r3, r8
 8005f0a:	18e3      	adds	r3, r4, r3
 8005f0c:	603b      	str	r3, [r7, #0]
 8005f0e:	464b      	mov	r3, r9
 8005f10:	eb45 0303 	adc.w	r3, r5, r3
 8005f14:	607b      	str	r3, [r7, #4]
 8005f16:	f04f 0200 	mov.w	r2, #0
 8005f1a:	f04f 0300 	mov.w	r3, #0
 8005f1e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005f22:	4629      	mov	r1, r5
 8005f24:	028b      	lsls	r3, r1, #10
 8005f26:	4621      	mov	r1, r4
 8005f28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005f2c:	4621      	mov	r1, r4
 8005f2e:	028a      	lsls	r2, r1, #10
 8005f30:	4610      	mov	r0, r2
 8005f32:	4619      	mov	r1, r3
 8005f34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f36:	2200      	movs	r2, #0
 8005f38:	61bb      	str	r3, [r7, #24]
 8005f3a:	61fa      	str	r2, [r7, #28]
 8005f3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f40:	f7fa f996 	bl	8000270 <__aeabi_uldivmod>
 8005f44:	4602      	mov	r2, r0
 8005f46:	460b      	mov	r3, r1
 8005f48:	4613      	mov	r3, r2
 8005f4a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005f4c:	4b0b      	ldr	r3, [pc, #44]	; (8005f7c <HAL_RCC_GetSysClockFreq+0x200>)
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	0c1b      	lsrs	r3, r3, #16
 8005f52:	f003 0303 	and.w	r3, r3, #3
 8005f56:	3301      	adds	r3, #1
 8005f58:	005b      	lsls	r3, r3, #1
 8005f5a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005f5c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005f5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f60:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f64:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005f66:	e002      	b.n	8005f6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005f68:	4b05      	ldr	r3, [pc, #20]	; (8005f80 <HAL_RCC_GetSysClockFreq+0x204>)
 8005f6a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005f6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005f6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	3750      	adds	r7, #80	; 0x50
 8005f74:	46bd      	mov	sp, r7
 8005f76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f7a:	bf00      	nop
 8005f7c:	40023800 	.word	0x40023800
 8005f80:	00f42400 	.word	0x00f42400
 8005f84:	007a1200 	.word	0x007a1200

08005f88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f8c:	4b03      	ldr	r3, [pc, #12]	; (8005f9c <HAL_RCC_GetHCLKFreq+0x14>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	46bd      	mov	sp, r7
 8005f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f98:	4770      	bx	lr
 8005f9a:	bf00      	nop
 8005f9c:	20000000 	.word	0x20000000

08005fa0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005fa4:	f7ff fff0 	bl	8005f88 <HAL_RCC_GetHCLKFreq>
 8005fa8:	4602      	mov	r2, r0
 8005faa:	4b05      	ldr	r3, [pc, #20]	; (8005fc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	0a9b      	lsrs	r3, r3, #10
 8005fb0:	f003 0307 	and.w	r3, r3, #7
 8005fb4:	4903      	ldr	r1, [pc, #12]	; (8005fc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005fb6:	5ccb      	ldrb	r3, [r1, r3]
 8005fb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	bd80      	pop	{r7, pc}
 8005fc0:	40023800 	.word	0x40023800
 8005fc4:	0801d128 	.word	0x0801d128

08005fc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005fcc:	f7ff ffdc 	bl	8005f88 <HAL_RCC_GetHCLKFreq>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	4b05      	ldr	r3, [pc, #20]	; (8005fe8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005fd4:	689b      	ldr	r3, [r3, #8]
 8005fd6:	0b5b      	lsrs	r3, r3, #13
 8005fd8:	f003 0307 	and.w	r3, r3, #7
 8005fdc:	4903      	ldr	r1, [pc, #12]	; (8005fec <HAL_RCC_GetPCLK2Freq+0x24>)
 8005fde:	5ccb      	ldrb	r3, [r1, r3]
 8005fe0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	bd80      	pop	{r7, pc}
 8005fe8:	40023800 	.word	0x40023800
 8005fec:	0801d128 	.word	0x0801d128

08005ff0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b082      	sub	sp, #8
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d101      	bne.n	8006002 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	e07b      	b.n	80060fa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006006:	2b00      	cmp	r3, #0
 8006008:	d108      	bne.n	800601c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006012:	d009      	beq.n	8006028 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2200      	movs	r2, #0
 8006018:	61da      	str	r2, [r3, #28]
 800601a:	e005      	b.n	8006028 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2200      	movs	r2, #0
 8006020:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2200      	movs	r2, #0
 8006026:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2200      	movs	r2, #0
 800602c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006034:	b2db      	uxtb	r3, r3
 8006036:	2b00      	cmp	r3, #0
 8006038:	d106      	bne.n	8006048 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2200      	movs	r2, #0
 800603e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f7fc f850 	bl	80020e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2202      	movs	r2, #2
 800604c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800605e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	689b      	ldr	r3, [r3, #8]
 800606c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006070:	431a      	orrs	r2, r3
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	68db      	ldr	r3, [r3, #12]
 8006076:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800607a:	431a      	orrs	r2, r3
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	691b      	ldr	r3, [r3, #16]
 8006080:	f003 0302 	and.w	r3, r3, #2
 8006084:	431a      	orrs	r2, r3
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	695b      	ldr	r3, [r3, #20]
 800608a:	f003 0301 	and.w	r3, r3, #1
 800608e:	431a      	orrs	r2, r3
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	699b      	ldr	r3, [r3, #24]
 8006094:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006098:	431a      	orrs	r2, r3
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	69db      	ldr	r3, [r3, #28]
 800609e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80060a2:	431a      	orrs	r2, r3
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6a1b      	ldr	r3, [r3, #32]
 80060a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060ac:	ea42 0103 	orr.w	r1, r2, r3
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060b4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	430a      	orrs	r2, r1
 80060be:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	699b      	ldr	r3, [r3, #24]
 80060c4:	0c1b      	lsrs	r3, r3, #16
 80060c6:	f003 0104 	and.w	r1, r3, #4
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ce:	f003 0210 	and.w	r2, r3, #16
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	430a      	orrs	r2, r1
 80060d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	69da      	ldr	r2, [r3, #28]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80060e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2200      	movs	r2, #0
 80060ee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2201      	movs	r2, #1
 80060f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80060f8:	2300      	movs	r3, #0
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3708      	adds	r7, #8
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}

08006102 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006102:	b580      	push	{r7, lr}
 8006104:	b082      	sub	sp, #8
 8006106:	af00      	add	r7, sp, #0
 8006108:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d101      	bne.n	8006114 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006110:	2301      	movs	r3, #1
 8006112:	e041      	b.n	8006198 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800611a:	b2db      	uxtb	r3, r3
 800611c:	2b00      	cmp	r3, #0
 800611e:	d106      	bne.n	800612e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2200      	movs	r2, #0
 8006124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f7fc fadf 	bl	80026ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2202      	movs	r2, #2
 8006132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	3304      	adds	r3, #4
 800613e:	4619      	mov	r1, r3
 8006140:	4610      	mov	r0, r2
 8006142:	f000 fba7 	bl	8006894 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2201      	movs	r2, #1
 800614a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2201      	movs	r2, #1
 8006152:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2201      	movs	r2, #1
 800615a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2201      	movs	r2, #1
 8006162:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2201      	movs	r2, #1
 800616a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2201      	movs	r2, #1
 8006172:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2201      	movs	r2, #1
 800617a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2201      	movs	r2, #1
 8006182:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2201      	movs	r2, #1
 800618a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2201      	movs	r2, #1
 8006192:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006196:	2300      	movs	r3, #0
}
 8006198:	4618      	mov	r0, r3
 800619a:	3708      	adds	r7, #8
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}

080061a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b085      	sub	sp, #20
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061ae:	b2db      	uxtb	r3, r3
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	d001      	beq.n	80061b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80061b4:	2301      	movs	r3, #1
 80061b6:	e04e      	b.n	8006256 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2202      	movs	r2, #2
 80061bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	68da      	ldr	r2, [r3, #12]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f042 0201 	orr.w	r2, r2, #1
 80061ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a23      	ldr	r2, [pc, #140]	; (8006264 <HAL_TIM_Base_Start_IT+0xc4>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d022      	beq.n	8006220 <HAL_TIM_Base_Start_IT+0x80>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061e2:	d01d      	beq.n	8006220 <HAL_TIM_Base_Start_IT+0x80>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a1f      	ldr	r2, [pc, #124]	; (8006268 <HAL_TIM_Base_Start_IT+0xc8>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d018      	beq.n	8006220 <HAL_TIM_Base_Start_IT+0x80>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a1e      	ldr	r2, [pc, #120]	; (800626c <HAL_TIM_Base_Start_IT+0xcc>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d013      	beq.n	8006220 <HAL_TIM_Base_Start_IT+0x80>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a1c      	ldr	r2, [pc, #112]	; (8006270 <HAL_TIM_Base_Start_IT+0xd0>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d00e      	beq.n	8006220 <HAL_TIM_Base_Start_IT+0x80>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a1b      	ldr	r2, [pc, #108]	; (8006274 <HAL_TIM_Base_Start_IT+0xd4>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d009      	beq.n	8006220 <HAL_TIM_Base_Start_IT+0x80>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a19      	ldr	r2, [pc, #100]	; (8006278 <HAL_TIM_Base_Start_IT+0xd8>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d004      	beq.n	8006220 <HAL_TIM_Base_Start_IT+0x80>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a18      	ldr	r2, [pc, #96]	; (800627c <HAL_TIM_Base_Start_IT+0xdc>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d111      	bne.n	8006244 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	f003 0307 	and.w	r3, r3, #7
 800622a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2b06      	cmp	r3, #6
 8006230:	d010      	beq.n	8006254 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	681a      	ldr	r2, [r3, #0]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f042 0201 	orr.w	r2, r2, #1
 8006240:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006242:	e007      	b.n	8006254 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	681a      	ldr	r2, [r3, #0]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f042 0201 	orr.w	r2, r2, #1
 8006252:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006254:	2300      	movs	r3, #0
}
 8006256:	4618      	mov	r0, r3
 8006258:	3714      	adds	r7, #20
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr
 8006262:	bf00      	nop
 8006264:	40010000 	.word	0x40010000
 8006268:	40000400 	.word	0x40000400
 800626c:	40000800 	.word	0x40000800
 8006270:	40000c00 	.word	0x40000c00
 8006274:	40010400 	.word	0x40010400
 8006278:	40014000 	.word	0x40014000
 800627c:	40001800 	.word	0x40001800

08006280 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b082      	sub	sp, #8
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d101      	bne.n	8006292 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800628e:	2301      	movs	r3, #1
 8006290:	e041      	b.n	8006316 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006298:	b2db      	uxtb	r3, r3
 800629a:	2b00      	cmp	r3, #0
 800629c:	d106      	bne.n	80062ac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2200      	movs	r2, #0
 80062a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f7fc fa66 	bl	8002778 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2202      	movs	r2, #2
 80062b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	3304      	adds	r3, #4
 80062bc:	4619      	mov	r1, r3
 80062be:	4610      	mov	r0, r2
 80062c0:	f000 fae8 	bl	8006894 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2201      	movs	r2, #1
 80062c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2201      	movs	r2, #1
 80062d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2201      	movs	r2, #1
 80062d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2201      	movs	r2, #1
 80062e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2201      	movs	r2, #1
 80062e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2201      	movs	r2, #1
 80062f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2201      	movs	r2, #1
 80062f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2201      	movs	r2, #1
 8006300:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2201      	movs	r2, #1
 8006308:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2201      	movs	r2, #1
 8006310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006314:	2300      	movs	r3, #0
}
 8006316:	4618      	mov	r0, r3
 8006318:	3708      	adds	r7, #8
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}

0800631e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800631e:	b580      	push	{r7, lr}
 8006320:	b082      	sub	sp, #8
 8006322:	af00      	add	r7, sp, #0
 8006324:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	691b      	ldr	r3, [r3, #16]
 800632c:	f003 0302 	and.w	r3, r3, #2
 8006330:	2b02      	cmp	r3, #2
 8006332:	d122      	bne.n	800637a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	68db      	ldr	r3, [r3, #12]
 800633a:	f003 0302 	and.w	r3, r3, #2
 800633e:	2b02      	cmp	r3, #2
 8006340:	d11b      	bne.n	800637a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f06f 0202 	mvn.w	r2, #2
 800634a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2201      	movs	r2, #1
 8006350:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	699b      	ldr	r3, [r3, #24]
 8006358:	f003 0303 	and.w	r3, r3, #3
 800635c:	2b00      	cmp	r3, #0
 800635e:	d003      	beq.n	8006368 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f000 fa78 	bl	8006856 <HAL_TIM_IC_CaptureCallback>
 8006366:	e005      	b.n	8006374 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f000 fa6a 	bl	8006842 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f000 fa7b 	bl	800686a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2200      	movs	r2, #0
 8006378:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	691b      	ldr	r3, [r3, #16]
 8006380:	f003 0304 	and.w	r3, r3, #4
 8006384:	2b04      	cmp	r3, #4
 8006386:	d122      	bne.n	80063ce <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	68db      	ldr	r3, [r3, #12]
 800638e:	f003 0304 	and.w	r3, r3, #4
 8006392:	2b04      	cmp	r3, #4
 8006394:	d11b      	bne.n	80063ce <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f06f 0204 	mvn.w	r2, #4
 800639e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2202      	movs	r2, #2
 80063a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	699b      	ldr	r3, [r3, #24]
 80063ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d003      	beq.n	80063bc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f000 fa4e 	bl	8006856 <HAL_TIM_IC_CaptureCallback>
 80063ba:	e005      	b.n	80063c8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f000 fa40 	bl	8006842 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f000 fa51 	bl	800686a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2200      	movs	r2, #0
 80063cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	691b      	ldr	r3, [r3, #16]
 80063d4:	f003 0308 	and.w	r3, r3, #8
 80063d8:	2b08      	cmp	r3, #8
 80063da:	d122      	bne.n	8006422 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	68db      	ldr	r3, [r3, #12]
 80063e2:	f003 0308 	and.w	r3, r3, #8
 80063e6:	2b08      	cmp	r3, #8
 80063e8:	d11b      	bne.n	8006422 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f06f 0208 	mvn.w	r2, #8
 80063f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2204      	movs	r2, #4
 80063f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	69db      	ldr	r3, [r3, #28]
 8006400:	f003 0303 	and.w	r3, r3, #3
 8006404:	2b00      	cmp	r3, #0
 8006406:	d003      	beq.n	8006410 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f000 fa24 	bl	8006856 <HAL_TIM_IC_CaptureCallback>
 800640e:	e005      	b.n	800641c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f000 fa16 	bl	8006842 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f000 fa27 	bl	800686a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2200      	movs	r2, #0
 8006420:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	691b      	ldr	r3, [r3, #16]
 8006428:	f003 0310 	and.w	r3, r3, #16
 800642c:	2b10      	cmp	r3, #16
 800642e:	d122      	bne.n	8006476 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	68db      	ldr	r3, [r3, #12]
 8006436:	f003 0310 	and.w	r3, r3, #16
 800643a:	2b10      	cmp	r3, #16
 800643c:	d11b      	bne.n	8006476 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f06f 0210 	mvn.w	r2, #16
 8006446:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2208      	movs	r2, #8
 800644c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	69db      	ldr	r3, [r3, #28]
 8006454:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006458:	2b00      	cmp	r3, #0
 800645a:	d003      	beq.n	8006464 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f000 f9fa 	bl	8006856 <HAL_TIM_IC_CaptureCallback>
 8006462:	e005      	b.n	8006470 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f000 f9ec 	bl	8006842 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f000 f9fd 	bl	800686a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2200      	movs	r2, #0
 8006474:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	691b      	ldr	r3, [r3, #16]
 800647c:	f003 0301 	and.w	r3, r3, #1
 8006480:	2b01      	cmp	r3, #1
 8006482:	d10e      	bne.n	80064a2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	68db      	ldr	r3, [r3, #12]
 800648a:	f003 0301 	and.w	r3, r3, #1
 800648e:	2b01      	cmp	r3, #1
 8006490:	d107      	bne.n	80064a2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f06f 0201 	mvn.w	r2, #1
 800649a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f7fb fd49 	bl	8001f34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	691b      	ldr	r3, [r3, #16]
 80064a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064ac:	2b80      	cmp	r3, #128	; 0x80
 80064ae:	d10e      	bne.n	80064ce <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	68db      	ldr	r3, [r3, #12]
 80064b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064ba:	2b80      	cmp	r3, #128	; 0x80
 80064bc:	d107      	bne.n	80064ce <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80064c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f000 fda5 	bl	8007018 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	691b      	ldr	r3, [r3, #16]
 80064d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064d8:	2b40      	cmp	r3, #64	; 0x40
 80064da:	d10e      	bne.n	80064fa <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	68db      	ldr	r3, [r3, #12]
 80064e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064e6:	2b40      	cmp	r3, #64	; 0x40
 80064e8:	d107      	bne.n	80064fa <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80064f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f000 f9c2 	bl	800687e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	691b      	ldr	r3, [r3, #16]
 8006500:	f003 0320 	and.w	r3, r3, #32
 8006504:	2b20      	cmp	r3, #32
 8006506:	d10e      	bne.n	8006526 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	68db      	ldr	r3, [r3, #12]
 800650e:	f003 0320 	and.w	r3, r3, #32
 8006512:	2b20      	cmp	r3, #32
 8006514:	d107      	bne.n	8006526 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f06f 0220 	mvn.w	r2, #32
 800651e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f000 fd6f 	bl	8007004 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006526:	bf00      	nop
 8006528:	3708      	adds	r7, #8
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}
	...

08006530 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b086      	sub	sp, #24
 8006534:	af00      	add	r7, sp, #0
 8006536:	60f8      	str	r0, [r7, #12]
 8006538:	60b9      	str	r1, [r7, #8]
 800653a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800653c:	2300      	movs	r3, #0
 800653e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006546:	2b01      	cmp	r3, #1
 8006548:	d101      	bne.n	800654e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800654a:	2302      	movs	r3, #2
 800654c:	e0ae      	b.n	80066ac <HAL_TIM_PWM_ConfigChannel+0x17c>
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2201      	movs	r2, #1
 8006552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2b0c      	cmp	r3, #12
 800655a:	f200 809f 	bhi.w	800669c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800655e:	a201      	add	r2, pc, #4	; (adr r2, 8006564 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006564:	08006599 	.word	0x08006599
 8006568:	0800669d 	.word	0x0800669d
 800656c:	0800669d 	.word	0x0800669d
 8006570:	0800669d 	.word	0x0800669d
 8006574:	080065d9 	.word	0x080065d9
 8006578:	0800669d 	.word	0x0800669d
 800657c:	0800669d 	.word	0x0800669d
 8006580:	0800669d 	.word	0x0800669d
 8006584:	0800661b 	.word	0x0800661b
 8006588:	0800669d 	.word	0x0800669d
 800658c:	0800669d 	.word	0x0800669d
 8006590:	0800669d 	.word	0x0800669d
 8006594:	0800665b 	.word	0x0800665b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	68b9      	ldr	r1, [r7, #8]
 800659e:	4618      	mov	r0, r3
 80065a0:	f000 fa18 	bl	80069d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	699a      	ldr	r2, [r3, #24]
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f042 0208 	orr.w	r2, r2, #8
 80065b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	699a      	ldr	r2, [r3, #24]
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f022 0204 	bic.w	r2, r2, #4
 80065c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	6999      	ldr	r1, [r3, #24]
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	691a      	ldr	r2, [r3, #16]
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	430a      	orrs	r2, r1
 80065d4:	619a      	str	r2, [r3, #24]
      break;
 80065d6:	e064      	b.n	80066a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	68b9      	ldr	r1, [r7, #8]
 80065de:	4618      	mov	r0, r3
 80065e0:	f000 fa68 	bl	8006ab4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	699a      	ldr	r2, [r3, #24]
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	699a      	ldr	r2, [r3, #24]
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006602:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	6999      	ldr	r1, [r3, #24]
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	691b      	ldr	r3, [r3, #16]
 800660e:	021a      	lsls	r2, r3, #8
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	430a      	orrs	r2, r1
 8006616:	619a      	str	r2, [r3, #24]
      break;
 8006618:	e043      	b.n	80066a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	68b9      	ldr	r1, [r7, #8]
 8006620:	4618      	mov	r0, r3
 8006622:	f000 fabd 	bl	8006ba0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	69da      	ldr	r2, [r3, #28]
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f042 0208 	orr.w	r2, r2, #8
 8006634:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	69da      	ldr	r2, [r3, #28]
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f022 0204 	bic.w	r2, r2, #4
 8006644:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	69d9      	ldr	r1, [r3, #28]
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	691a      	ldr	r2, [r3, #16]
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	430a      	orrs	r2, r1
 8006656:	61da      	str	r2, [r3, #28]
      break;
 8006658:	e023      	b.n	80066a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	68b9      	ldr	r1, [r7, #8]
 8006660:	4618      	mov	r0, r3
 8006662:	f000 fb11 	bl	8006c88 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	69da      	ldr	r2, [r3, #28]
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006674:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	69da      	ldr	r2, [r3, #28]
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006684:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	69d9      	ldr	r1, [r3, #28]
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	691b      	ldr	r3, [r3, #16]
 8006690:	021a      	lsls	r2, r3, #8
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	430a      	orrs	r2, r1
 8006698:	61da      	str	r2, [r3, #28]
      break;
 800669a:	e002      	b.n	80066a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800669c:	2301      	movs	r3, #1
 800669e:	75fb      	strb	r3, [r7, #23]
      break;
 80066a0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2200      	movs	r2, #0
 80066a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80066aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3718      	adds	r7, #24
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}

080066b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b084      	sub	sp, #16
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80066be:	2300      	movs	r3, #0
 80066c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	d101      	bne.n	80066d0 <HAL_TIM_ConfigClockSource+0x1c>
 80066cc:	2302      	movs	r3, #2
 80066ce:	e0b4      	b.n	800683a <HAL_TIM_ConfigClockSource+0x186>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2201      	movs	r2, #1
 80066d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2202      	movs	r2, #2
 80066dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	689b      	ldr	r3, [r3, #8]
 80066e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80066ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80066f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	68ba      	ldr	r2, [r7, #8]
 80066fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006708:	d03e      	beq.n	8006788 <HAL_TIM_ConfigClockSource+0xd4>
 800670a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800670e:	f200 8087 	bhi.w	8006820 <HAL_TIM_ConfigClockSource+0x16c>
 8006712:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006716:	f000 8086 	beq.w	8006826 <HAL_TIM_ConfigClockSource+0x172>
 800671a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800671e:	d87f      	bhi.n	8006820 <HAL_TIM_ConfigClockSource+0x16c>
 8006720:	2b70      	cmp	r3, #112	; 0x70
 8006722:	d01a      	beq.n	800675a <HAL_TIM_ConfigClockSource+0xa6>
 8006724:	2b70      	cmp	r3, #112	; 0x70
 8006726:	d87b      	bhi.n	8006820 <HAL_TIM_ConfigClockSource+0x16c>
 8006728:	2b60      	cmp	r3, #96	; 0x60
 800672a:	d050      	beq.n	80067ce <HAL_TIM_ConfigClockSource+0x11a>
 800672c:	2b60      	cmp	r3, #96	; 0x60
 800672e:	d877      	bhi.n	8006820 <HAL_TIM_ConfigClockSource+0x16c>
 8006730:	2b50      	cmp	r3, #80	; 0x50
 8006732:	d03c      	beq.n	80067ae <HAL_TIM_ConfigClockSource+0xfa>
 8006734:	2b50      	cmp	r3, #80	; 0x50
 8006736:	d873      	bhi.n	8006820 <HAL_TIM_ConfigClockSource+0x16c>
 8006738:	2b40      	cmp	r3, #64	; 0x40
 800673a:	d058      	beq.n	80067ee <HAL_TIM_ConfigClockSource+0x13a>
 800673c:	2b40      	cmp	r3, #64	; 0x40
 800673e:	d86f      	bhi.n	8006820 <HAL_TIM_ConfigClockSource+0x16c>
 8006740:	2b30      	cmp	r3, #48	; 0x30
 8006742:	d064      	beq.n	800680e <HAL_TIM_ConfigClockSource+0x15a>
 8006744:	2b30      	cmp	r3, #48	; 0x30
 8006746:	d86b      	bhi.n	8006820 <HAL_TIM_ConfigClockSource+0x16c>
 8006748:	2b20      	cmp	r3, #32
 800674a:	d060      	beq.n	800680e <HAL_TIM_ConfigClockSource+0x15a>
 800674c:	2b20      	cmp	r3, #32
 800674e:	d867      	bhi.n	8006820 <HAL_TIM_ConfigClockSource+0x16c>
 8006750:	2b00      	cmp	r3, #0
 8006752:	d05c      	beq.n	800680e <HAL_TIM_ConfigClockSource+0x15a>
 8006754:	2b10      	cmp	r3, #16
 8006756:	d05a      	beq.n	800680e <HAL_TIM_ConfigClockSource+0x15a>
 8006758:	e062      	b.n	8006820 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6818      	ldr	r0, [r3, #0]
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	6899      	ldr	r1, [r3, #8]
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	685a      	ldr	r2, [r3, #4]
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	68db      	ldr	r3, [r3, #12]
 800676a:	f000 fb5d 	bl	8006e28 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800677c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	68ba      	ldr	r2, [r7, #8]
 8006784:	609a      	str	r2, [r3, #8]
      break;
 8006786:	e04f      	b.n	8006828 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6818      	ldr	r0, [r3, #0]
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	6899      	ldr	r1, [r3, #8]
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	685a      	ldr	r2, [r3, #4]
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	68db      	ldr	r3, [r3, #12]
 8006798:	f000 fb46 	bl	8006e28 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	689a      	ldr	r2, [r3, #8]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80067aa:	609a      	str	r2, [r3, #8]
      break;
 80067ac:	e03c      	b.n	8006828 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6818      	ldr	r0, [r3, #0]
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	6859      	ldr	r1, [r3, #4]
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	68db      	ldr	r3, [r3, #12]
 80067ba:	461a      	mov	r2, r3
 80067bc:	f000 faba 	bl	8006d34 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	2150      	movs	r1, #80	; 0x50
 80067c6:	4618      	mov	r0, r3
 80067c8:	f000 fb13 	bl	8006df2 <TIM_ITRx_SetConfig>
      break;
 80067cc:	e02c      	b.n	8006828 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6818      	ldr	r0, [r3, #0]
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	6859      	ldr	r1, [r3, #4]
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	68db      	ldr	r3, [r3, #12]
 80067da:	461a      	mov	r2, r3
 80067dc:	f000 fad9 	bl	8006d92 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	2160      	movs	r1, #96	; 0x60
 80067e6:	4618      	mov	r0, r3
 80067e8:	f000 fb03 	bl	8006df2 <TIM_ITRx_SetConfig>
      break;
 80067ec:	e01c      	b.n	8006828 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6818      	ldr	r0, [r3, #0]
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	6859      	ldr	r1, [r3, #4]
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	68db      	ldr	r3, [r3, #12]
 80067fa:	461a      	mov	r2, r3
 80067fc:	f000 fa9a 	bl	8006d34 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	2140      	movs	r1, #64	; 0x40
 8006806:	4618      	mov	r0, r3
 8006808:	f000 faf3 	bl	8006df2 <TIM_ITRx_SetConfig>
      break;
 800680c:	e00c      	b.n	8006828 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681a      	ldr	r2, [r3, #0]
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4619      	mov	r1, r3
 8006818:	4610      	mov	r0, r2
 800681a:	f000 faea 	bl	8006df2 <TIM_ITRx_SetConfig>
      break;
 800681e:	e003      	b.n	8006828 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006820:	2301      	movs	r3, #1
 8006822:	73fb      	strb	r3, [r7, #15]
      break;
 8006824:	e000      	b.n	8006828 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006826:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2201      	movs	r2, #1
 800682c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2200      	movs	r2, #0
 8006834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006838:	7bfb      	ldrb	r3, [r7, #15]
}
 800683a:	4618      	mov	r0, r3
 800683c:	3710      	adds	r7, #16
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}

08006842 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006842:	b480      	push	{r7}
 8006844:	b083      	sub	sp, #12
 8006846:	af00      	add	r7, sp, #0
 8006848:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800684a:	bf00      	nop
 800684c:	370c      	adds	r7, #12
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr

08006856 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006856:	b480      	push	{r7}
 8006858:	b083      	sub	sp, #12
 800685a:	af00      	add	r7, sp, #0
 800685c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800685e:	bf00      	nop
 8006860:	370c      	adds	r7, #12
 8006862:	46bd      	mov	sp, r7
 8006864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006868:	4770      	bx	lr

0800686a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800686a:	b480      	push	{r7}
 800686c:	b083      	sub	sp, #12
 800686e:	af00      	add	r7, sp, #0
 8006870:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006872:	bf00      	nop
 8006874:	370c      	adds	r7, #12
 8006876:	46bd      	mov	sp, r7
 8006878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687c:	4770      	bx	lr

0800687e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800687e:	b480      	push	{r7}
 8006880:	b083      	sub	sp, #12
 8006882:	af00      	add	r7, sp, #0
 8006884:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006886:	bf00      	nop
 8006888:	370c      	adds	r7, #12
 800688a:	46bd      	mov	sp, r7
 800688c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006890:	4770      	bx	lr
	...

08006894 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006894:	b480      	push	{r7}
 8006896:	b085      	sub	sp, #20
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
 800689c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	4a40      	ldr	r2, [pc, #256]	; (80069a8 <TIM_Base_SetConfig+0x114>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d013      	beq.n	80068d4 <TIM_Base_SetConfig+0x40>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068b2:	d00f      	beq.n	80068d4 <TIM_Base_SetConfig+0x40>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	4a3d      	ldr	r2, [pc, #244]	; (80069ac <TIM_Base_SetConfig+0x118>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d00b      	beq.n	80068d4 <TIM_Base_SetConfig+0x40>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	4a3c      	ldr	r2, [pc, #240]	; (80069b0 <TIM_Base_SetConfig+0x11c>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d007      	beq.n	80068d4 <TIM_Base_SetConfig+0x40>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	4a3b      	ldr	r2, [pc, #236]	; (80069b4 <TIM_Base_SetConfig+0x120>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d003      	beq.n	80068d4 <TIM_Base_SetConfig+0x40>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	4a3a      	ldr	r2, [pc, #232]	; (80069b8 <TIM_Base_SetConfig+0x124>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d108      	bne.n	80068e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	68fa      	ldr	r2, [r7, #12]
 80068e2:	4313      	orrs	r3, r2
 80068e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	4a2f      	ldr	r2, [pc, #188]	; (80069a8 <TIM_Base_SetConfig+0x114>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d02b      	beq.n	8006946 <TIM_Base_SetConfig+0xb2>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068f4:	d027      	beq.n	8006946 <TIM_Base_SetConfig+0xb2>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	4a2c      	ldr	r2, [pc, #176]	; (80069ac <TIM_Base_SetConfig+0x118>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d023      	beq.n	8006946 <TIM_Base_SetConfig+0xb2>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	4a2b      	ldr	r2, [pc, #172]	; (80069b0 <TIM_Base_SetConfig+0x11c>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d01f      	beq.n	8006946 <TIM_Base_SetConfig+0xb2>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	4a2a      	ldr	r2, [pc, #168]	; (80069b4 <TIM_Base_SetConfig+0x120>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d01b      	beq.n	8006946 <TIM_Base_SetConfig+0xb2>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	4a29      	ldr	r2, [pc, #164]	; (80069b8 <TIM_Base_SetConfig+0x124>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d017      	beq.n	8006946 <TIM_Base_SetConfig+0xb2>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	4a28      	ldr	r2, [pc, #160]	; (80069bc <TIM_Base_SetConfig+0x128>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d013      	beq.n	8006946 <TIM_Base_SetConfig+0xb2>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	4a27      	ldr	r2, [pc, #156]	; (80069c0 <TIM_Base_SetConfig+0x12c>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d00f      	beq.n	8006946 <TIM_Base_SetConfig+0xb2>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	4a26      	ldr	r2, [pc, #152]	; (80069c4 <TIM_Base_SetConfig+0x130>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d00b      	beq.n	8006946 <TIM_Base_SetConfig+0xb2>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	4a25      	ldr	r2, [pc, #148]	; (80069c8 <TIM_Base_SetConfig+0x134>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d007      	beq.n	8006946 <TIM_Base_SetConfig+0xb2>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	4a24      	ldr	r2, [pc, #144]	; (80069cc <TIM_Base_SetConfig+0x138>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d003      	beq.n	8006946 <TIM_Base_SetConfig+0xb2>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	4a23      	ldr	r2, [pc, #140]	; (80069d0 <TIM_Base_SetConfig+0x13c>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d108      	bne.n	8006958 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800694c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	68db      	ldr	r3, [r3, #12]
 8006952:	68fa      	ldr	r2, [r7, #12]
 8006954:	4313      	orrs	r3, r2
 8006956:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	695b      	ldr	r3, [r3, #20]
 8006962:	4313      	orrs	r3, r2
 8006964:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	68fa      	ldr	r2, [r7, #12]
 800696a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	689a      	ldr	r2, [r3, #8]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	681a      	ldr	r2, [r3, #0]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	4a0a      	ldr	r2, [pc, #40]	; (80069a8 <TIM_Base_SetConfig+0x114>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d003      	beq.n	800698c <TIM_Base_SetConfig+0xf8>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	4a0c      	ldr	r2, [pc, #48]	; (80069b8 <TIM_Base_SetConfig+0x124>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d103      	bne.n	8006994 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	691a      	ldr	r2, [r3, #16]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2201      	movs	r2, #1
 8006998:	615a      	str	r2, [r3, #20]
}
 800699a:	bf00      	nop
 800699c:	3714      	adds	r7, #20
 800699e:	46bd      	mov	sp, r7
 80069a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a4:	4770      	bx	lr
 80069a6:	bf00      	nop
 80069a8:	40010000 	.word	0x40010000
 80069ac:	40000400 	.word	0x40000400
 80069b0:	40000800 	.word	0x40000800
 80069b4:	40000c00 	.word	0x40000c00
 80069b8:	40010400 	.word	0x40010400
 80069bc:	40014000 	.word	0x40014000
 80069c0:	40014400 	.word	0x40014400
 80069c4:	40014800 	.word	0x40014800
 80069c8:	40001800 	.word	0x40001800
 80069cc:	40001c00 	.word	0x40001c00
 80069d0:	40002000 	.word	0x40002000

080069d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b087      	sub	sp, #28
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6a1b      	ldr	r3, [r3, #32]
 80069e2:	f023 0201 	bic.w	r2, r3, #1
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6a1b      	ldr	r3, [r3, #32]
 80069ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	699b      	ldr	r3, [r3, #24]
 80069fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f023 0303 	bic.w	r3, r3, #3
 8006a0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	68fa      	ldr	r2, [r7, #12]
 8006a12:	4313      	orrs	r3, r2
 8006a14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	f023 0302 	bic.w	r3, r3, #2
 8006a1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	689b      	ldr	r3, [r3, #8]
 8006a22:	697a      	ldr	r2, [r7, #20]
 8006a24:	4313      	orrs	r3, r2
 8006a26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	4a20      	ldr	r2, [pc, #128]	; (8006aac <TIM_OC1_SetConfig+0xd8>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d003      	beq.n	8006a38 <TIM_OC1_SetConfig+0x64>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	4a1f      	ldr	r2, [pc, #124]	; (8006ab0 <TIM_OC1_SetConfig+0xdc>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d10c      	bne.n	8006a52 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	f023 0308 	bic.w	r3, r3, #8
 8006a3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	68db      	ldr	r3, [r3, #12]
 8006a44:	697a      	ldr	r2, [r7, #20]
 8006a46:	4313      	orrs	r3, r2
 8006a48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	f023 0304 	bic.w	r3, r3, #4
 8006a50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	4a15      	ldr	r2, [pc, #84]	; (8006aac <TIM_OC1_SetConfig+0xd8>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d003      	beq.n	8006a62 <TIM_OC1_SetConfig+0x8e>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	4a14      	ldr	r2, [pc, #80]	; (8006ab0 <TIM_OC1_SetConfig+0xdc>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d111      	bne.n	8006a86 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	695b      	ldr	r3, [r3, #20]
 8006a76:	693a      	ldr	r2, [r7, #16]
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	699b      	ldr	r3, [r3, #24]
 8006a80:	693a      	ldr	r2, [r7, #16]
 8006a82:	4313      	orrs	r3, r2
 8006a84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	693a      	ldr	r2, [r7, #16]
 8006a8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	68fa      	ldr	r2, [r7, #12]
 8006a90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	685a      	ldr	r2, [r3, #4]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	697a      	ldr	r2, [r7, #20]
 8006a9e:	621a      	str	r2, [r3, #32]
}
 8006aa0:	bf00      	nop
 8006aa2:	371c      	adds	r7, #28
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aaa:	4770      	bx	lr
 8006aac:	40010000 	.word	0x40010000
 8006ab0:	40010400 	.word	0x40010400

08006ab4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b087      	sub	sp, #28
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6a1b      	ldr	r3, [r3, #32]
 8006ac2:	f023 0210 	bic.w	r2, r3, #16
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6a1b      	ldr	r3, [r3, #32]
 8006ace:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	699b      	ldr	r3, [r3, #24]
 8006ada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ae2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006aea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	021b      	lsls	r3, r3, #8
 8006af2:	68fa      	ldr	r2, [r7, #12]
 8006af4:	4313      	orrs	r3, r2
 8006af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	f023 0320 	bic.w	r3, r3, #32
 8006afe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	011b      	lsls	r3, r3, #4
 8006b06:	697a      	ldr	r2, [r7, #20]
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	4a22      	ldr	r2, [pc, #136]	; (8006b98 <TIM_OC2_SetConfig+0xe4>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d003      	beq.n	8006b1c <TIM_OC2_SetConfig+0x68>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	4a21      	ldr	r2, [pc, #132]	; (8006b9c <TIM_OC2_SetConfig+0xe8>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d10d      	bne.n	8006b38 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	68db      	ldr	r3, [r3, #12]
 8006b28:	011b      	lsls	r3, r3, #4
 8006b2a:	697a      	ldr	r2, [r7, #20]
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b36:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	4a17      	ldr	r2, [pc, #92]	; (8006b98 <TIM_OC2_SetConfig+0xe4>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d003      	beq.n	8006b48 <TIM_OC2_SetConfig+0x94>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	4a16      	ldr	r2, [pc, #88]	; (8006b9c <TIM_OC2_SetConfig+0xe8>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d113      	bne.n	8006b70 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b4e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b56:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	695b      	ldr	r3, [r3, #20]
 8006b5c:	009b      	lsls	r3, r3, #2
 8006b5e:	693a      	ldr	r2, [r7, #16]
 8006b60:	4313      	orrs	r3, r2
 8006b62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	699b      	ldr	r3, [r3, #24]
 8006b68:	009b      	lsls	r3, r3, #2
 8006b6a:	693a      	ldr	r2, [r7, #16]
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	693a      	ldr	r2, [r7, #16]
 8006b74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	68fa      	ldr	r2, [r7, #12]
 8006b7a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	685a      	ldr	r2, [r3, #4]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	697a      	ldr	r2, [r7, #20]
 8006b88:	621a      	str	r2, [r3, #32]
}
 8006b8a:	bf00      	nop
 8006b8c:	371c      	adds	r7, #28
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b94:	4770      	bx	lr
 8006b96:	bf00      	nop
 8006b98:	40010000 	.word	0x40010000
 8006b9c:	40010400 	.word	0x40010400

08006ba0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b087      	sub	sp, #28
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6a1b      	ldr	r3, [r3, #32]
 8006bae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6a1b      	ldr	r3, [r3, #32]
 8006bba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	69db      	ldr	r3, [r3, #28]
 8006bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f023 0303 	bic.w	r3, r3, #3
 8006bd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	68fa      	ldr	r2, [r7, #12]
 8006bde:	4313      	orrs	r3, r2
 8006be0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006be8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	689b      	ldr	r3, [r3, #8]
 8006bee:	021b      	lsls	r3, r3, #8
 8006bf0:	697a      	ldr	r2, [r7, #20]
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	4a21      	ldr	r2, [pc, #132]	; (8006c80 <TIM_OC3_SetConfig+0xe0>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d003      	beq.n	8006c06 <TIM_OC3_SetConfig+0x66>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	4a20      	ldr	r2, [pc, #128]	; (8006c84 <TIM_OC3_SetConfig+0xe4>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d10d      	bne.n	8006c22 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	68db      	ldr	r3, [r3, #12]
 8006c12:	021b      	lsls	r3, r3, #8
 8006c14:	697a      	ldr	r2, [r7, #20]
 8006c16:	4313      	orrs	r3, r2
 8006c18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	4a16      	ldr	r2, [pc, #88]	; (8006c80 <TIM_OC3_SetConfig+0xe0>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d003      	beq.n	8006c32 <TIM_OC3_SetConfig+0x92>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	4a15      	ldr	r2, [pc, #84]	; (8006c84 <TIM_OC3_SetConfig+0xe4>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d113      	bne.n	8006c5a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	695b      	ldr	r3, [r3, #20]
 8006c46:	011b      	lsls	r3, r3, #4
 8006c48:	693a      	ldr	r2, [r7, #16]
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	699b      	ldr	r3, [r3, #24]
 8006c52:	011b      	lsls	r3, r3, #4
 8006c54:	693a      	ldr	r2, [r7, #16]
 8006c56:	4313      	orrs	r3, r2
 8006c58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	693a      	ldr	r2, [r7, #16]
 8006c5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	68fa      	ldr	r2, [r7, #12]
 8006c64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	685a      	ldr	r2, [r3, #4]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	697a      	ldr	r2, [r7, #20]
 8006c72:	621a      	str	r2, [r3, #32]
}
 8006c74:	bf00      	nop
 8006c76:	371c      	adds	r7, #28
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7e:	4770      	bx	lr
 8006c80:	40010000 	.word	0x40010000
 8006c84:	40010400 	.word	0x40010400

08006c88 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b087      	sub	sp, #28
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
 8006c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6a1b      	ldr	r3, [r3, #32]
 8006c96:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6a1b      	ldr	r3, [r3, #32]
 8006ca2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	69db      	ldr	r3, [r3, #28]
 8006cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	021b      	lsls	r3, r3, #8
 8006cc6:	68fa      	ldr	r2, [r7, #12]
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006cd2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	689b      	ldr	r3, [r3, #8]
 8006cd8:	031b      	lsls	r3, r3, #12
 8006cda:	693a      	ldr	r2, [r7, #16]
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	4a12      	ldr	r2, [pc, #72]	; (8006d2c <TIM_OC4_SetConfig+0xa4>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d003      	beq.n	8006cf0 <TIM_OC4_SetConfig+0x68>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	4a11      	ldr	r2, [pc, #68]	; (8006d30 <TIM_OC4_SetConfig+0xa8>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d109      	bne.n	8006d04 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006cf6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	695b      	ldr	r3, [r3, #20]
 8006cfc:	019b      	lsls	r3, r3, #6
 8006cfe:	697a      	ldr	r2, [r7, #20]
 8006d00:	4313      	orrs	r3, r2
 8006d02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	697a      	ldr	r2, [r7, #20]
 8006d08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	68fa      	ldr	r2, [r7, #12]
 8006d0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	685a      	ldr	r2, [r3, #4]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	693a      	ldr	r2, [r7, #16]
 8006d1c:	621a      	str	r2, [r3, #32]
}
 8006d1e:	bf00      	nop
 8006d20:	371c      	adds	r7, #28
 8006d22:	46bd      	mov	sp, r7
 8006d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d28:	4770      	bx	lr
 8006d2a:	bf00      	nop
 8006d2c:	40010000 	.word	0x40010000
 8006d30:	40010400 	.word	0x40010400

08006d34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b087      	sub	sp, #28
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	60f8      	str	r0, [r7, #12]
 8006d3c:	60b9      	str	r1, [r7, #8]
 8006d3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	6a1b      	ldr	r3, [r3, #32]
 8006d44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	6a1b      	ldr	r3, [r3, #32]
 8006d4a:	f023 0201 	bic.w	r2, r3, #1
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	699b      	ldr	r3, [r3, #24]
 8006d56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	011b      	lsls	r3, r3, #4
 8006d64:	693a      	ldr	r2, [r7, #16]
 8006d66:	4313      	orrs	r3, r2
 8006d68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	f023 030a 	bic.w	r3, r3, #10
 8006d70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006d72:	697a      	ldr	r2, [r7, #20]
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	4313      	orrs	r3, r2
 8006d78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	693a      	ldr	r2, [r7, #16]
 8006d7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	697a      	ldr	r2, [r7, #20]
 8006d84:	621a      	str	r2, [r3, #32]
}
 8006d86:	bf00      	nop
 8006d88:	371c      	adds	r7, #28
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d90:	4770      	bx	lr

08006d92 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d92:	b480      	push	{r7}
 8006d94:	b087      	sub	sp, #28
 8006d96:	af00      	add	r7, sp, #0
 8006d98:	60f8      	str	r0, [r7, #12]
 8006d9a:	60b9      	str	r1, [r7, #8]
 8006d9c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	6a1b      	ldr	r3, [r3, #32]
 8006da2:	f023 0210 	bic.w	r2, r3, #16
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	699b      	ldr	r3, [r3, #24]
 8006dae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	6a1b      	ldr	r3, [r3, #32]
 8006db4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006dbc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	031b      	lsls	r3, r3, #12
 8006dc2:	697a      	ldr	r2, [r7, #20]
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006dce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	011b      	lsls	r3, r3, #4
 8006dd4:	693a      	ldr	r2, [r7, #16]
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	697a      	ldr	r2, [r7, #20]
 8006dde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	693a      	ldr	r2, [r7, #16]
 8006de4:	621a      	str	r2, [r3, #32]
}
 8006de6:	bf00      	nop
 8006de8:	371c      	adds	r7, #28
 8006dea:	46bd      	mov	sp, r7
 8006dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df0:	4770      	bx	lr

08006df2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006df2:	b480      	push	{r7}
 8006df4:	b085      	sub	sp, #20
 8006df6:	af00      	add	r7, sp, #0
 8006df8:	6078      	str	r0, [r7, #4]
 8006dfa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006e0a:	683a      	ldr	r2, [r7, #0]
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	f043 0307 	orr.w	r3, r3, #7
 8006e14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	68fa      	ldr	r2, [r7, #12]
 8006e1a:	609a      	str	r2, [r3, #8]
}
 8006e1c:	bf00      	nop
 8006e1e:	3714      	adds	r7, #20
 8006e20:	46bd      	mov	sp, r7
 8006e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e26:	4770      	bx	lr

08006e28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b087      	sub	sp, #28
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	60f8      	str	r0, [r7, #12]
 8006e30:	60b9      	str	r1, [r7, #8]
 8006e32:	607a      	str	r2, [r7, #4]
 8006e34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	689b      	ldr	r3, [r3, #8]
 8006e3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	021a      	lsls	r2, r3, #8
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	431a      	orrs	r2, r3
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	697a      	ldr	r2, [r7, #20]
 8006e52:	4313      	orrs	r3, r2
 8006e54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	697a      	ldr	r2, [r7, #20]
 8006e5a:	609a      	str	r2, [r3, #8]
}
 8006e5c:	bf00      	nop
 8006e5e:	371c      	adds	r7, #28
 8006e60:	46bd      	mov	sp, r7
 8006e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e66:	4770      	bx	lr

08006e68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b085      	sub	sp, #20
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
 8006e70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d101      	bne.n	8006e80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e7c:	2302      	movs	r3, #2
 8006e7e:	e05a      	b.n	8006f36 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2201      	movs	r2, #1
 8006e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2202      	movs	r2, #2
 8006e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	689b      	ldr	r3, [r3, #8]
 8006e9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ea6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	68fa      	ldr	r2, [r7, #12]
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	68fa      	ldr	r2, [r7, #12]
 8006eb8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a21      	ldr	r2, [pc, #132]	; (8006f44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d022      	beq.n	8006f0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ecc:	d01d      	beq.n	8006f0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4a1d      	ldr	r2, [pc, #116]	; (8006f48 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d018      	beq.n	8006f0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a1b      	ldr	r2, [pc, #108]	; (8006f4c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d013      	beq.n	8006f0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a1a      	ldr	r2, [pc, #104]	; (8006f50 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d00e      	beq.n	8006f0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a18      	ldr	r2, [pc, #96]	; (8006f54 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d009      	beq.n	8006f0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a17      	ldr	r2, [pc, #92]	; (8006f58 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d004      	beq.n	8006f0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a15      	ldr	r2, [pc, #84]	; (8006f5c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d10c      	bne.n	8006f24 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	685b      	ldr	r3, [r3, #4]
 8006f16:	68ba      	ldr	r2, [r7, #8]
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	68ba      	ldr	r2, [r7, #8]
 8006f22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2201      	movs	r2, #1
 8006f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f34:	2300      	movs	r3, #0
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3714      	adds	r7, #20
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f40:	4770      	bx	lr
 8006f42:	bf00      	nop
 8006f44:	40010000 	.word	0x40010000
 8006f48:	40000400 	.word	0x40000400
 8006f4c:	40000800 	.word	0x40000800
 8006f50:	40000c00 	.word	0x40000c00
 8006f54:	40010400 	.word	0x40010400
 8006f58:	40014000 	.word	0x40014000
 8006f5c:	40001800 	.word	0x40001800

08006f60 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006f60:	b480      	push	{r7}
 8006f62:	b085      	sub	sp, #20
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
 8006f68:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f74:	2b01      	cmp	r3, #1
 8006f76:	d101      	bne.n	8006f7c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006f78:	2302      	movs	r3, #2
 8006f7a:	e03d      	b.n	8006ff8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2201      	movs	r2, #1
 8006f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	68db      	ldr	r3, [r3, #12]
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	689b      	ldr	r3, [r3, #8]
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	4313      	orrs	r3, r2
 8006fac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4313      	orrs	r3, r2
 8006fba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	691b      	ldr	r3, [r3, #16]
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	695b      	ldr	r3, [r3, #20]
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	69db      	ldr	r3, [r3, #28]
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	68fa      	ldr	r2, [r7, #12]
 8006fec:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ff6:	2300      	movs	r3, #0
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	3714      	adds	r7, #20
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007002:	4770      	bx	lr

08007004 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007004:	b480      	push	{r7}
 8007006:	b083      	sub	sp, #12
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800700c:	bf00      	nop
 800700e:	370c      	adds	r7, #12
 8007010:	46bd      	mov	sp, r7
 8007012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007016:	4770      	bx	lr

08007018 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007018:	b480      	push	{r7}
 800701a:	b083      	sub	sp, #12
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007020:	bf00      	nop
 8007022:	370c      	adds	r7, #12
 8007024:	46bd      	mov	sp, r7
 8007026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702a:	4770      	bx	lr

0800702c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b082      	sub	sp, #8
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d101      	bne.n	800703e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800703a:	2301      	movs	r3, #1
 800703c:	e03f      	b.n	80070be <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007044:	b2db      	uxtb	r3, r3
 8007046:	2b00      	cmp	r3, #0
 8007048:	d106      	bne.n	8007058 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2200      	movs	r2, #0
 800704e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f7fb fc46 	bl	80028e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2224      	movs	r2, #36	; 0x24
 800705c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	68da      	ldr	r2, [r3, #12]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800706e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f000 ff63 	bl	8007f3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	691a      	ldr	r2, [r3, #16]
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007084:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	695a      	ldr	r2, [r3, #20]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007094:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	68da      	ldr	r2, [r3, #12]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80070a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2200      	movs	r2, #0
 80070aa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2220      	movs	r2, #32
 80070b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2220      	movs	r2, #32
 80070b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80070bc:	2300      	movs	r3, #0
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3708      	adds	r7, #8
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}

080070c6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80070c6:	b580      	push	{r7, lr}
 80070c8:	b084      	sub	sp, #16
 80070ca:	af00      	add	r7, sp, #0
 80070cc:	60f8      	str	r0, [r7, #12]
 80070ce:	60b9      	str	r1, [r7, #8]
 80070d0:	4613      	mov	r3, r2
 80070d2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80070da:	b2db      	uxtb	r3, r3
 80070dc:	2b20      	cmp	r3, #32
 80070de:	d11d      	bne.n	800711c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d002      	beq.n	80070ec <HAL_UART_Receive_IT+0x26>
 80070e6:	88fb      	ldrh	r3, [r7, #6]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d101      	bne.n	80070f0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80070ec:	2301      	movs	r3, #1
 80070ee:	e016      	b.n	800711e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070f6:	2b01      	cmp	r3, #1
 80070f8:	d101      	bne.n	80070fe <HAL_UART_Receive_IT+0x38>
 80070fa:	2302      	movs	r3, #2
 80070fc:	e00f      	b.n	800711e <HAL_UART_Receive_IT+0x58>
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	2201      	movs	r2, #1
 8007102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2200      	movs	r2, #0
 800710a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800710c:	88fb      	ldrh	r3, [r7, #6]
 800710e:	461a      	mov	r2, r3
 8007110:	68b9      	ldr	r1, [r7, #8]
 8007112:	68f8      	ldr	r0, [r7, #12]
 8007114:	f000 fc7c 	bl	8007a10 <UART_Start_Receive_IT>
 8007118:	4603      	mov	r3, r0
 800711a:	e000      	b.n	800711e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800711c:	2302      	movs	r3, #2
  }
}
 800711e:	4618      	mov	r0, r3
 8007120:	3710      	adds	r7, #16
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}

08007126 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8007126:	b580      	push	{r7, lr}
 8007128:	b090      	sub	sp, #64	; 0x40
 800712a:	af00      	add	r7, sp, #0
 800712c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800712e:	2300      	movs	r3, #0
 8007130:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	695b      	ldr	r3, [r3, #20]
 8007138:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800713c:	2b80      	cmp	r3, #128	; 0x80
 800713e:	bf0c      	ite	eq
 8007140:	2301      	moveq	r3, #1
 8007142:	2300      	movne	r3, #0
 8007144:	b2db      	uxtb	r3, r3
 8007146:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800714e:	b2db      	uxtb	r3, r3
 8007150:	2b21      	cmp	r3, #33	; 0x21
 8007152:	d128      	bne.n	80071a6 <HAL_UART_DMAStop+0x80>
 8007154:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007156:	2b00      	cmp	r3, #0
 8007158:	d025      	beq.n	80071a6 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	3314      	adds	r3, #20
 8007160:	627b      	str	r3, [r7, #36]	; 0x24
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007164:	e853 3f00 	ldrex	r3, [r3]
 8007168:	623b      	str	r3, [r7, #32]
   return(result);
 800716a:	6a3b      	ldr	r3, [r7, #32]
 800716c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007170:	63bb      	str	r3, [r7, #56]	; 0x38
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	3314      	adds	r3, #20
 8007178:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800717a:	633a      	str	r2, [r7, #48]	; 0x30
 800717c:	62fb      	str	r3, [r7, #44]	; 0x2c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800717e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007180:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007182:	e841 2300 	strex	r3, r2, [r1]
 8007186:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800718a:	2b00      	cmp	r3, #0
 800718c:	d1e5      	bne.n	800715a <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007192:	2b00      	cmp	r3, #0
 8007194:	d004      	beq.n	80071a0 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800719a:	4618      	mov	r0, r3
 800719c:	f7fb fff6 	bl	800318c <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f000 fd09 	bl	8007bb8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	695b      	ldr	r3, [r3, #20]
 80071ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071b0:	2b40      	cmp	r3, #64	; 0x40
 80071b2:	bf0c      	ite	eq
 80071b4:	2301      	moveq	r3, #1
 80071b6:	2300      	movne	r3, #0
 80071b8:	b2db      	uxtb	r3, r3
 80071ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80071c2:	b2db      	uxtb	r3, r3
 80071c4:	2b22      	cmp	r3, #34	; 0x22
 80071c6:	d128      	bne.n	800721a <HAL_UART_DMAStop+0xf4>
 80071c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d025      	beq.n	800721a <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	3314      	adds	r3, #20
 80071d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	e853 3f00 	ldrex	r3, [r3]
 80071dc:	60fb      	str	r3, [r7, #12]
   return(result);
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071e4:	637b      	str	r3, [r7, #52]	; 0x34
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	3314      	adds	r3, #20
 80071ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80071ee:	61fa      	str	r2, [r7, #28]
 80071f0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071f2:	69b9      	ldr	r1, [r7, #24]
 80071f4:	69fa      	ldr	r2, [r7, #28]
 80071f6:	e841 2300 	strex	r3, r2, [r1]
 80071fa:	617b      	str	r3, [r7, #20]
   return(result);
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d1e5      	bne.n	80071ce <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007206:	2b00      	cmp	r3, #0
 8007208:	d004      	beq.n	8007214 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800720e:	4618      	mov	r0, r3
 8007210:	f7fb ffbc 	bl	800318c <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f000 fcf7 	bl	8007c08 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800721a:	2300      	movs	r3, #0
}
 800721c:	4618      	mov	r0, r3
 800721e:	3740      	adds	r7, #64	; 0x40
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}

08007224 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b08c      	sub	sp, #48	; 0x30
 8007228:	af00      	add	r7, sp, #0
 800722a:	60f8      	str	r0, [r7, #12]
 800722c:	60b9      	str	r1, [r7, #8]
 800722e:	4613      	mov	r3, r2
 8007230:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007238:	b2db      	uxtb	r3, r3
 800723a:	2b20      	cmp	r3, #32
 800723c:	d152      	bne.n	80072e4 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d002      	beq.n	800724a <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8007244:	88fb      	ldrh	r3, [r7, #6]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d101      	bne.n	800724e <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800724a:	2301      	movs	r3, #1
 800724c:	e04b      	b.n	80072e6 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007254:	2b01      	cmp	r3, #1
 8007256:	d101      	bne.n	800725c <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8007258:	2302      	movs	r3, #2
 800725a:	e044      	b.n	80072e6 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	2201      	movs	r2, #1
 8007260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2201      	movs	r2, #1
 8007268:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800726a:	88fb      	ldrh	r3, [r7, #6]
 800726c:	461a      	mov	r2, r3
 800726e:	68b9      	ldr	r1, [r7, #8]
 8007270:	68f8      	ldr	r0, [r7, #12]
 8007272:	f000 fc07 	bl	8007a84 <UART_Start_Receive_DMA>
 8007276:	4603      	mov	r3, r0
 8007278:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800727c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007280:	2b00      	cmp	r3, #0
 8007282:	d12c      	bne.n	80072de <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007288:	2b01      	cmp	r3, #1
 800728a:	d125      	bne.n	80072d8 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800728c:	2300      	movs	r3, #0
 800728e:	613b      	str	r3, [r7, #16]
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	613b      	str	r3, [r7, #16]
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	685b      	ldr	r3, [r3, #4]
 800729e:	613b      	str	r3, [r7, #16]
 80072a0:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	330c      	adds	r3, #12
 80072a8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072aa:	69bb      	ldr	r3, [r7, #24]
 80072ac:	e853 3f00 	ldrex	r3, [r3]
 80072b0:	617b      	str	r3, [r7, #20]
   return(result);
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	f043 0310 	orr.w	r3, r3, #16
 80072b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	330c      	adds	r3, #12
 80072c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80072c2:	627a      	str	r2, [r7, #36]	; 0x24
 80072c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072c6:	6a39      	ldr	r1, [r7, #32]
 80072c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072ca:	e841 2300 	strex	r3, r2, [r1]
 80072ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80072d0:	69fb      	ldr	r3, [r7, #28]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d1e5      	bne.n	80072a2 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 80072d6:	e002      	b.n	80072de <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80072d8:	2301      	movs	r3, #1
 80072da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80072de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80072e2:	e000      	b.n	80072e6 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 80072e4:	2302      	movs	r3, #2
  }
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3730      	adds	r7, #48	; 0x30
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}
	...

080072f0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b0ba      	sub	sp, #232	; 0xe8
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	68db      	ldr	r3, [r3, #12]
 8007308:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	695b      	ldr	r3, [r3, #20]
 8007312:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007316:	2300      	movs	r3, #0
 8007318:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800731c:	2300      	movs	r3, #0
 800731e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007322:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007326:	f003 030f 	and.w	r3, r3, #15
 800732a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800732e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007332:	2b00      	cmp	r3, #0
 8007334:	d10f      	bne.n	8007356 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007336:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800733a:	f003 0320 	and.w	r3, r3, #32
 800733e:	2b00      	cmp	r3, #0
 8007340:	d009      	beq.n	8007356 <HAL_UART_IRQHandler+0x66>
 8007342:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007346:	f003 0320 	and.w	r3, r3, #32
 800734a:	2b00      	cmp	r3, #0
 800734c:	d003      	beq.n	8007356 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f000 fd39 	bl	8007dc6 <UART_Receive_IT>
      return;
 8007354:	e256      	b.n	8007804 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007356:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800735a:	2b00      	cmp	r3, #0
 800735c:	f000 80de 	beq.w	800751c <HAL_UART_IRQHandler+0x22c>
 8007360:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007364:	f003 0301 	and.w	r3, r3, #1
 8007368:	2b00      	cmp	r3, #0
 800736a:	d106      	bne.n	800737a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800736c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007370:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007374:	2b00      	cmp	r3, #0
 8007376:	f000 80d1 	beq.w	800751c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800737a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800737e:	f003 0301 	and.w	r3, r3, #1
 8007382:	2b00      	cmp	r3, #0
 8007384:	d00b      	beq.n	800739e <HAL_UART_IRQHandler+0xae>
 8007386:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800738a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800738e:	2b00      	cmp	r3, #0
 8007390:	d005      	beq.n	800739e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007396:	f043 0201 	orr.w	r2, r3, #1
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800739e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073a2:	f003 0304 	and.w	r3, r3, #4
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d00b      	beq.n	80073c2 <HAL_UART_IRQHandler+0xd2>
 80073aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80073ae:	f003 0301 	and.w	r3, r3, #1
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d005      	beq.n	80073c2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ba:	f043 0202 	orr.w	r2, r3, #2
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80073c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073c6:	f003 0302 	and.w	r3, r3, #2
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d00b      	beq.n	80073e6 <HAL_UART_IRQHandler+0xf6>
 80073ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80073d2:	f003 0301 	and.w	r3, r3, #1
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d005      	beq.n	80073e6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073de:	f043 0204 	orr.w	r2, r3, #4
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80073e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073ea:	f003 0308 	and.w	r3, r3, #8
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d011      	beq.n	8007416 <HAL_UART_IRQHandler+0x126>
 80073f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073f6:	f003 0320 	and.w	r3, r3, #32
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d105      	bne.n	800740a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80073fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007402:	f003 0301 	and.w	r3, r3, #1
 8007406:	2b00      	cmp	r3, #0
 8007408:	d005      	beq.n	8007416 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800740e:	f043 0208 	orr.w	r2, r3, #8
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800741a:	2b00      	cmp	r3, #0
 800741c:	f000 81ed 	beq.w	80077fa <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007420:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007424:	f003 0320 	and.w	r3, r3, #32
 8007428:	2b00      	cmp	r3, #0
 800742a:	d008      	beq.n	800743e <HAL_UART_IRQHandler+0x14e>
 800742c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007430:	f003 0320 	and.w	r3, r3, #32
 8007434:	2b00      	cmp	r3, #0
 8007436:	d002      	beq.n	800743e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f000 fcc4 	bl	8007dc6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	695b      	ldr	r3, [r3, #20]
 8007444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007448:	2b40      	cmp	r3, #64	; 0x40
 800744a:	bf0c      	ite	eq
 800744c:	2301      	moveq	r3, #1
 800744e:	2300      	movne	r3, #0
 8007450:	b2db      	uxtb	r3, r3
 8007452:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800745a:	f003 0308 	and.w	r3, r3, #8
 800745e:	2b00      	cmp	r3, #0
 8007460:	d103      	bne.n	800746a <HAL_UART_IRQHandler+0x17a>
 8007462:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007466:	2b00      	cmp	r3, #0
 8007468:	d04f      	beq.n	800750a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f000 fbcc 	bl	8007c08 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	695b      	ldr	r3, [r3, #20]
 8007476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800747a:	2b40      	cmp	r3, #64	; 0x40
 800747c:	d141      	bne.n	8007502 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	3314      	adds	r3, #20
 8007484:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007488:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800748c:	e853 3f00 	ldrex	r3, [r3]
 8007490:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007494:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007498:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800749c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	3314      	adds	r3, #20
 80074a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80074aa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80074ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80074b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80074ba:	e841 2300 	strex	r3, r2, [r1]
 80074be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80074c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d1d9      	bne.n	800747e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d013      	beq.n	80074fa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074d6:	4a7d      	ldr	r2, [pc, #500]	; (80076cc <HAL_UART_IRQHandler+0x3dc>)
 80074d8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074de:	4618      	mov	r0, r3
 80074e0:	f7fb fec4 	bl	800326c <HAL_DMA_Abort_IT>
 80074e4:	4603      	mov	r3, r0
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d016      	beq.n	8007518 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074f0:	687a      	ldr	r2, [r7, #4]
 80074f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80074f4:	4610      	mov	r0, r2
 80074f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074f8:	e00e      	b.n	8007518 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f7f9 fe40 	bl	8001180 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007500:	e00a      	b.n	8007518 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f7f9 fe3c 	bl	8001180 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007508:	e006      	b.n	8007518 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f7f9 fe38 	bl	8001180 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2200      	movs	r2, #0
 8007514:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007516:	e170      	b.n	80077fa <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007518:	bf00      	nop
    return;
 800751a:	e16e      	b.n	80077fa <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007520:	2b01      	cmp	r3, #1
 8007522:	f040 814a 	bne.w	80077ba <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007526:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800752a:	f003 0310 	and.w	r3, r3, #16
 800752e:	2b00      	cmp	r3, #0
 8007530:	f000 8143 	beq.w	80077ba <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007534:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007538:	f003 0310 	and.w	r3, r3, #16
 800753c:	2b00      	cmp	r3, #0
 800753e:	f000 813c 	beq.w	80077ba <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007542:	2300      	movs	r3, #0
 8007544:	60bb      	str	r3, [r7, #8]
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	60bb      	str	r3, [r7, #8]
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	685b      	ldr	r3, [r3, #4]
 8007554:	60bb      	str	r3, [r7, #8]
 8007556:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	695b      	ldr	r3, [r3, #20]
 800755e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007562:	2b40      	cmp	r3, #64	; 0x40
 8007564:	f040 80b4 	bne.w	80076d0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	685b      	ldr	r3, [r3, #4]
 8007570:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007574:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007578:	2b00      	cmp	r3, #0
 800757a:	f000 8140 	beq.w	80077fe <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007582:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007586:	429a      	cmp	r2, r3
 8007588:	f080 8139 	bcs.w	80077fe <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007592:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007598:	69db      	ldr	r3, [r3, #28]
 800759a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800759e:	f000 8088 	beq.w	80076b2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	330c      	adds	r3, #12
 80075a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80075b0:	e853 3f00 	ldrex	r3, [r3]
 80075b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80075b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80075bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80075c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	330c      	adds	r3, #12
 80075ca:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80075ce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80075d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075d6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80075da:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80075de:	e841 2300 	strex	r3, r2, [r1]
 80075e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80075e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d1d9      	bne.n	80075a2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	3314      	adds	r3, #20
 80075f4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80075f8:	e853 3f00 	ldrex	r3, [r3]
 80075fc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80075fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007600:	f023 0301 	bic.w	r3, r3, #1
 8007604:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	3314      	adds	r3, #20
 800760e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007612:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007616:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007618:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800761a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800761e:	e841 2300 	strex	r3, r2, [r1]
 8007622:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007624:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007626:	2b00      	cmp	r3, #0
 8007628:	d1e1      	bne.n	80075ee <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	3314      	adds	r3, #20
 8007630:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007632:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007634:	e853 3f00 	ldrex	r3, [r3]
 8007638:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800763a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800763c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007640:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	3314      	adds	r3, #20
 800764a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800764e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007650:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007652:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007654:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007656:	e841 2300 	strex	r3, r2, [r1]
 800765a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800765c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800765e:	2b00      	cmp	r3, #0
 8007660:	d1e3      	bne.n	800762a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2220      	movs	r2, #32
 8007666:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2200      	movs	r2, #0
 800766e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	330c      	adds	r3, #12
 8007676:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007678:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800767a:	e853 3f00 	ldrex	r3, [r3]
 800767e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007680:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007682:	f023 0310 	bic.w	r3, r3, #16
 8007686:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	330c      	adds	r3, #12
 8007690:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007694:	65ba      	str	r2, [r7, #88]	; 0x58
 8007696:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007698:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800769a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800769c:	e841 2300 	strex	r3, r2, [r1]
 80076a0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80076a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d1e3      	bne.n	8007670 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ac:	4618      	mov	r0, r3
 80076ae:	f7fb fd6d 	bl	800318c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80076ba:	b29b      	uxth	r3, r3
 80076bc:	1ad3      	subs	r3, r2, r3
 80076be:	b29b      	uxth	r3, r3
 80076c0:	4619      	mov	r1, r3
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f7f9 fdb4 	bl	8001230 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80076c8:	e099      	b.n	80077fe <HAL_UART_IRQHandler+0x50e>
 80076ca:	bf00      	nop
 80076cc:	08007ccf 	.word	0x08007ccf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80076d8:	b29b      	uxth	r3, r3
 80076da:	1ad3      	subs	r3, r2, r3
 80076dc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80076e4:	b29b      	uxth	r3, r3
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	f000 808b 	beq.w	8007802 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80076ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	f000 8086 	beq.w	8007802 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	330c      	adds	r3, #12
 80076fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007700:	e853 3f00 	ldrex	r3, [r3]
 8007704:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007708:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800770c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	330c      	adds	r3, #12
 8007716:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800771a:	647a      	str	r2, [r7, #68]	; 0x44
 800771c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800771e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007720:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007722:	e841 2300 	strex	r3, r2, [r1]
 8007726:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007728:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800772a:	2b00      	cmp	r3, #0
 800772c:	d1e3      	bne.n	80076f6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	3314      	adds	r3, #20
 8007734:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007738:	e853 3f00 	ldrex	r3, [r3]
 800773c:	623b      	str	r3, [r7, #32]
   return(result);
 800773e:	6a3b      	ldr	r3, [r7, #32]
 8007740:	f023 0301 	bic.w	r3, r3, #1
 8007744:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	3314      	adds	r3, #20
 800774e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007752:	633a      	str	r2, [r7, #48]	; 0x30
 8007754:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007756:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007758:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800775a:	e841 2300 	strex	r3, r2, [r1]
 800775e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007762:	2b00      	cmp	r3, #0
 8007764:	d1e3      	bne.n	800772e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2220      	movs	r2, #32
 800776a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2200      	movs	r2, #0
 8007772:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	330c      	adds	r3, #12
 800777a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800777c:	693b      	ldr	r3, [r7, #16]
 800777e:	e853 3f00 	ldrex	r3, [r3]
 8007782:	60fb      	str	r3, [r7, #12]
   return(result);
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f023 0310 	bic.w	r3, r3, #16
 800778a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	330c      	adds	r3, #12
 8007794:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007798:	61fa      	str	r2, [r7, #28]
 800779a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800779c:	69b9      	ldr	r1, [r7, #24]
 800779e:	69fa      	ldr	r2, [r7, #28]
 80077a0:	e841 2300 	strex	r3, r2, [r1]
 80077a4:	617b      	str	r3, [r7, #20]
   return(result);
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d1e3      	bne.n	8007774 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80077ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80077b0:	4619      	mov	r1, r3
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f7f9 fd3c 	bl	8001230 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80077b8:	e023      	b.n	8007802 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80077ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d009      	beq.n	80077da <HAL_UART_IRQHandler+0x4ea>
 80077c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d003      	beq.n	80077da <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f000 fa8f 	bl	8007cf6 <UART_Transmit_IT>
    return;
 80077d8:	e014      	b.n	8007804 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80077da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d00e      	beq.n	8007804 <HAL_UART_IRQHandler+0x514>
 80077e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d008      	beq.n	8007804 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f000 facf 	bl	8007d96 <UART_EndTransmit_IT>
    return;
 80077f8:	e004      	b.n	8007804 <HAL_UART_IRQHandler+0x514>
    return;
 80077fa:	bf00      	nop
 80077fc:	e002      	b.n	8007804 <HAL_UART_IRQHandler+0x514>
      return;
 80077fe:	bf00      	nop
 8007800:	e000      	b.n	8007804 <HAL_UART_IRQHandler+0x514>
      return;
 8007802:	bf00      	nop
  }
}
 8007804:	37e8      	adds	r7, #232	; 0xe8
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}
 800780a:	bf00      	nop

0800780c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800780c:	b480      	push	{r7}
 800780e:	b083      	sub	sp, #12
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007814:	bf00      	nop
 8007816:	370c      	adds	r7, #12
 8007818:	46bd      	mov	sp, r7
 800781a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781e:	4770      	bx	lr

08007820 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b09c      	sub	sp, #112	; 0x70
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800782c:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007838:	2b00      	cmp	r3, #0
 800783a:	d172      	bne.n	8007922 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800783c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800783e:	2200      	movs	r2, #0
 8007840:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007842:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	330c      	adds	r3, #12
 8007848:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800784a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800784c:	e853 3f00 	ldrex	r3, [r3]
 8007850:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007852:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007854:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007858:	66bb      	str	r3, [r7, #104]	; 0x68
 800785a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	330c      	adds	r3, #12
 8007860:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007862:	65ba      	str	r2, [r7, #88]	; 0x58
 8007864:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007866:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007868:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800786a:	e841 2300 	strex	r3, r2, [r1]
 800786e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007870:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007872:	2b00      	cmp	r3, #0
 8007874:	d1e5      	bne.n	8007842 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007876:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	3314      	adds	r3, #20
 800787c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800787e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007880:	e853 3f00 	ldrex	r3, [r3]
 8007884:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007888:	f023 0301 	bic.w	r3, r3, #1
 800788c:	667b      	str	r3, [r7, #100]	; 0x64
 800788e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	3314      	adds	r3, #20
 8007894:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007896:	647a      	str	r2, [r7, #68]	; 0x44
 8007898:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800789a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800789c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800789e:	e841 2300 	strex	r3, r2, [r1]
 80078a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80078a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d1e5      	bne.n	8007876 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80078aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	3314      	adds	r3, #20
 80078b0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b4:	e853 3f00 	ldrex	r3, [r3]
 80078b8:	623b      	str	r3, [r7, #32]
   return(result);
 80078ba:	6a3b      	ldr	r3, [r7, #32]
 80078bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078c0:	663b      	str	r3, [r7, #96]	; 0x60
 80078c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	3314      	adds	r3, #20
 80078c8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80078ca:	633a      	str	r2, [r7, #48]	; 0x30
 80078cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80078d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078d2:	e841 2300 	strex	r3, r2, [r1]
 80078d6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80078d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d1e5      	bne.n	80078aa <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80078de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078e0:	2220      	movs	r2, #32
 80078e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078ea:	2b01      	cmp	r3, #1
 80078ec:	d119      	bne.n	8007922 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	330c      	adds	r3, #12
 80078f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	e853 3f00 	ldrex	r3, [r3]
 80078fc:	60fb      	str	r3, [r7, #12]
   return(result);
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	f023 0310 	bic.w	r3, r3, #16
 8007904:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007906:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	330c      	adds	r3, #12
 800790c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800790e:	61fa      	str	r2, [r7, #28]
 8007910:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007912:	69b9      	ldr	r1, [r7, #24]
 8007914:	69fa      	ldr	r2, [r7, #28]
 8007916:	e841 2300 	strex	r3, r2, [r1]
 800791a:	617b      	str	r3, [r7, #20]
   return(result);
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d1e5      	bne.n	80078ee <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007922:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007926:	2b01      	cmp	r3, #1
 8007928:	d106      	bne.n	8007938 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800792a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800792c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800792e:	4619      	mov	r1, r3
 8007930:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007932:	f7f9 fc7d 	bl	8001230 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007936:	e002      	b.n	800793e <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8007938:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800793a:	f7f9 fbb7 	bl	80010ac <HAL_UART_RxCpltCallback>
}
 800793e:	bf00      	nop
 8007940:	3770      	adds	r7, #112	; 0x70
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}

08007946 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007946:	b580      	push	{r7, lr}
 8007948:	b084      	sub	sp, #16
 800794a:	af00      	add	r7, sp, #0
 800794c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007952:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007958:	2b01      	cmp	r3, #1
 800795a:	d108      	bne.n	800796e <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007960:	085b      	lsrs	r3, r3, #1
 8007962:	b29b      	uxth	r3, r3
 8007964:	4619      	mov	r1, r3
 8007966:	68f8      	ldr	r0, [r7, #12]
 8007968:	f7f9 fc62 	bl	8001230 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800796c:	e002      	b.n	8007974 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800796e:	68f8      	ldr	r0, [r7, #12]
 8007970:	f7ff ff4c 	bl	800780c <HAL_UART_RxHalfCpltCallback>
}
 8007974:	bf00      	nop
 8007976:	3710      	adds	r7, #16
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}

0800797c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b084      	sub	sp, #16
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007984:	2300      	movs	r3, #0
 8007986:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800798c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	695b      	ldr	r3, [r3, #20]
 8007994:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007998:	2b80      	cmp	r3, #128	; 0x80
 800799a:	bf0c      	ite	eq
 800799c:	2301      	moveq	r3, #1
 800799e:	2300      	movne	r3, #0
 80079a0:	b2db      	uxtb	r3, r3
 80079a2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079aa:	b2db      	uxtb	r3, r3
 80079ac:	2b21      	cmp	r3, #33	; 0x21
 80079ae:	d108      	bne.n	80079c2 <UART_DMAError+0x46>
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d005      	beq.n	80079c2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	2200      	movs	r2, #0
 80079ba:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80079bc:	68b8      	ldr	r0, [r7, #8]
 80079be:	f000 f8fb 	bl	8007bb8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	695b      	ldr	r3, [r3, #20]
 80079c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079cc:	2b40      	cmp	r3, #64	; 0x40
 80079ce:	bf0c      	ite	eq
 80079d0:	2301      	moveq	r3, #1
 80079d2:	2300      	movne	r3, #0
 80079d4:	b2db      	uxtb	r3, r3
 80079d6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80079de:	b2db      	uxtb	r3, r3
 80079e0:	2b22      	cmp	r3, #34	; 0x22
 80079e2:	d108      	bne.n	80079f6 <UART_DMAError+0x7a>
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d005      	beq.n	80079f6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	2200      	movs	r2, #0
 80079ee:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80079f0:	68b8      	ldr	r0, [r7, #8]
 80079f2:	f000 f909 	bl	8007c08 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079fa:	f043 0210 	orr.w	r2, r3, #16
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007a02:	68b8      	ldr	r0, [r7, #8]
 8007a04:	f7f9 fbbc 	bl	8001180 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a08:	bf00      	nop
 8007a0a:	3710      	adds	r7, #16
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}

08007a10 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007a10:	b480      	push	{r7}
 8007a12:	b085      	sub	sp, #20
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	60f8      	str	r0, [r7, #12]
 8007a18:	60b9      	str	r1, [r7, #8]
 8007a1a:	4613      	mov	r3, r2
 8007a1c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	68ba      	ldr	r2, [r7, #8]
 8007a22:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	88fa      	ldrh	r2, [r7, #6]
 8007a28:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	88fa      	ldrh	r2, [r7, #6]
 8007a2e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	2200      	movs	r2, #0
 8007a34:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	2222      	movs	r2, #34	; 0x22
 8007a3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	2200      	movs	r2, #0
 8007a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	68da      	ldr	r2, [r3, #12]
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007a54:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	695a      	ldr	r2, [r3, #20]
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f042 0201 	orr.w	r2, r2, #1
 8007a64:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	68da      	ldr	r2, [r3, #12]
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f042 0220 	orr.w	r2, r2, #32
 8007a74:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007a76:	2300      	movs	r3, #0
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	3714      	adds	r7, #20
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a82:	4770      	bx	lr

08007a84 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b098      	sub	sp, #96	; 0x60
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	60f8      	str	r0, [r7, #12]
 8007a8c:	60b9      	str	r1, [r7, #8]
 8007a8e:	4613      	mov	r3, r2
 8007a90:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007a92:	68ba      	ldr	r2, [r7, #8]
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	88fa      	ldrh	r2, [r7, #6]
 8007a9c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	2222      	movs	r2, #34	; 0x22
 8007aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ab0:	4a3e      	ldr	r2, [pc, #248]	; (8007bac <UART_Start_Receive_DMA+0x128>)
 8007ab2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ab8:	4a3d      	ldr	r2, [pc, #244]	; (8007bb0 <UART_Start_Receive_DMA+0x12c>)
 8007aba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ac0:	4a3c      	ldr	r2, [pc, #240]	; (8007bb4 <UART_Start_Receive_DMA+0x130>)
 8007ac2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ac8:	2200      	movs	r2, #0
 8007aca:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007acc:	f107 0308 	add.w	r3, r7, #8
 8007ad0:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	3304      	adds	r3, #4
 8007adc:	4619      	mov	r1, r3
 8007ade:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ae0:	681a      	ldr	r2, [r3, #0]
 8007ae2:	88fb      	ldrh	r3, [r7, #6]
 8007ae4:	f7fb fafa 	bl	80030dc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007ae8:	2300      	movs	r3, #0
 8007aea:	613b      	str	r3, [r7, #16]
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	613b      	str	r3, [r7, #16]
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	613b      	str	r3, [r7, #16]
 8007afc:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	2200      	movs	r2, #0
 8007b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	330c      	adds	r3, #12
 8007b0c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b10:	e853 3f00 	ldrex	r3, [r3]
 8007b14:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007b16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b1c:	65bb      	str	r3, [r7, #88]	; 0x58
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	330c      	adds	r3, #12
 8007b24:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007b26:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007b28:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b2a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007b2c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007b2e:	e841 2300 	strex	r3, r2, [r1]
 8007b32:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007b34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d1e5      	bne.n	8007b06 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	3314      	adds	r3, #20
 8007b40:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b44:	e853 3f00 	ldrex	r3, [r3]
 8007b48:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b4c:	f043 0301 	orr.w	r3, r3, #1
 8007b50:	657b      	str	r3, [r7, #84]	; 0x54
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	3314      	adds	r3, #20
 8007b58:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007b5a:	63ba      	str	r2, [r7, #56]	; 0x38
 8007b5c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b5e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007b60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b62:	e841 2300 	strex	r3, r2, [r1]
 8007b66:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d1e5      	bne.n	8007b3a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	3314      	adds	r3, #20
 8007b74:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b76:	69bb      	ldr	r3, [r7, #24]
 8007b78:	e853 3f00 	ldrex	r3, [r3]
 8007b7c:	617b      	str	r3, [r7, #20]
   return(result);
 8007b7e:	697b      	ldr	r3, [r7, #20]
 8007b80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b84:	653b      	str	r3, [r7, #80]	; 0x50
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	3314      	adds	r3, #20
 8007b8c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007b8e:	627a      	str	r2, [r7, #36]	; 0x24
 8007b90:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b92:	6a39      	ldr	r1, [r7, #32]
 8007b94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b96:	e841 2300 	strex	r3, r2, [r1]
 8007b9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b9c:	69fb      	ldr	r3, [r7, #28]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d1e5      	bne.n	8007b6e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8007ba2:	2300      	movs	r3, #0
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	3760      	adds	r7, #96	; 0x60
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}
 8007bac:	08007821 	.word	0x08007821
 8007bb0:	08007947 	.word	0x08007947
 8007bb4:	0800797d 	.word	0x0800797d

08007bb8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b089      	sub	sp, #36	; 0x24
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	330c      	adds	r3, #12
 8007bc6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	e853 3f00 	ldrex	r3, [r3]
 8007bce:	60bb      	str	r3, [r7, #8]
   return(result);
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007bd6:	61fb      	str	r3, [r7, #28]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	330c      	adds	r3, #12
 8007bde:	69fa      	ldr	r2, [r7, #28]
 8007be0:	61ba      	str	r2, [r7, #24]
 8007be2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007be4:	6979      	ldr	r1, [r7, #20]
 8007be6:	69ba      	ldr	r2, [r7, #24]
 8007be8:	e841 2300 	strex	r3, r2, [r1]
 8007bec:	613b      	str	r3, [r7, #16]
   return(result);
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d1e5      	bne.n	8007bc0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2220      	movs	r2, #32
 8007bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007bfc:	bf00      	nop
 8007bfe:	3724      	adds	r7, #36	; 0x24
 8007c00:	46bd      	mov	sp, r7
 8007c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c06:	4770      	bx	lr

08007c08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b095      	sub	sp, #84	; 0x54
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	330c      	adds	r3, #12
 8007c16:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c1a:	e853 3f00 	ldrex	r3, [r3]
 8007c1e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c22:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007c26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	330c      	adds	r3, #12
 8007c2e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007c30:	643a      	str	r2, [r7, #64]	; 0x40
 8007c32:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c34:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007c36:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007c38:	e841 2300 	strex	r3, r2, [r1]
 8007c3c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d1e5      	bne.n	8007c10 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	3314      	adds	r3, #20
 8007c4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c4c:	6a3b      	ldr	r3, [r7, #32]
 8007c4e:	e853 3f00 	ldrex	r3, [r3]
 8007c52:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c54:	69fb      	ldr	r3, [r7, #28]
 8007c56:	f023 0301 	bic.w	r3, r3, #1
 8007c5a:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	3314      	adds	r3, #20
 8007c62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c64:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007c66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c6c:	e841 2300 	strex	r3, r2, [r1]
 8007c70:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d1e5      	bne.n	8007c44 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c7c:	2b01      	cmp	r3, #1
 8007c7e:	d119      	bne.n	8007cb4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	330c      	adds	r3, #12
 8007c86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	e853 3f00 	ldrex	r3, [r3]
 8007c8e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	f023 0310 	bic.w	r3, r3, #16
 8007c96:	647b      	str	r3, [r7, #68]	; 0x44
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	330c      	adds	r3, #12
 8007c9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007ca0:	61ba      	str	r2, [r7, #24]
 8007ca2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ca4:	6979      	ldr	r1, [r7, #20]
 8007ca6:	69ba      	ldr	r2, [r7, #24]
 8007ca8:	e841 2300 	strex	r3, r2, [r1]
 8007cac:	613b      	str	r3, [r7, #16]
   return(result);
 8007cae:	693b      	ldr	r3, [r7, #16]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d1e5      	bne.n	8007c80 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2220      	movs	r2, #32
 8007cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007cc2:	bf00      	nop
 8007cc4:	3754      	adds	r7, #84	; 0x54
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ccc:	4770      	bx	lr

08007cce <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007cce:	b580      	push	{r7, lr}
 8007cd0:	b084      	sub	sp, #16
 8007cd2:	af00      	add	r7, sp, #0
 8007cd4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cda:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007ce8:	68f8      	ldr	r0, [r7, #12]
 8007cea:	f7f9 fa49 	bl	8001180 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007cee:	bf00      	nop
 8007cf0:	3710      	adds	r7, #16
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}

08007cf6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007cf6:	b480      	push	{r7}
 8007cf8:	b085      	sub	sp, #20
 8007cfa:	af00      	add	r7, sp, #0
 8007cfc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d04:	b2db      	uxtb	r3, r3
 8007d06:	2b21      	cmp	r3, #33	; 0x21
 8007d08:	d13e      	bne.n	8007d88 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	689b      	ldr	r3, [r3, #8]
 8007d0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d12:	d114      	bne.n	8007d3e <UART_Transmit_IT+0x48>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	691b      	ldr	r3, [r3, #16]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d110      	bne.n	8007d3e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6a1b      	ldr	r3, [r3, #32]
 8007d20:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	881b      	ldrh	r3, [r3, #0]
 8007d26:	461a      	mov	r2, r3
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007d30:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6a1b      	ldr	r3, [r3, #32]
 8007d36:	1c9a      	adds	r2, r3, #2
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	621a      	str	r2, [r3, #32]
 8007d3c:	e008      	b.n	8007d50 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6a1b      	ldr	r3, [r3, #32]
 8007d42:	1c59      	adds	r1, r3, #1
 8007d44:	687a      	ldr	r2, [r7, #4]
 8007d46:	6211      	str	r1, [r2, #32]
 8007d48:	781a      	ldrb	r2, [r3, #0]
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007d54:	b29b      	uxth	r3, r3
 8007d56:	3b01      	subs	r3, #1
 8007d58:	b29b      	uxth	r3, r3
 8007d5a:	687a      	ldr	r2, [r7, #4]
 8007d5c:	4619      	mov	r1, r3
 8007d5e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d10f      	bne.n	8007d84 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	68da      	ldr	r2, [r3, #12]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007d72:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	68da      	ldr	r2, [r3, #12]
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d82:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007d84:	2300      	movs	r3, #0
 8007d86:	e000      	b.n	8007d8a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007d88:	2302      	movs	r3, #2
  }
}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	3714      	adds	r7, #20
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d94:	4770      	bx	lr

08007d96 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007d96:	b580      	push	{r7, lr}
 8007d98:	b082      	sub	sp, #8
 8007d9a:	af00      	add	r7, sp, #0
 8007d9c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	68da      	ldr	r2, [r3, #12]
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007dac:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2220      	movs	r2, #32
 8007db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f7f9 f93a 	bl	8001030 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007dbc:	2300      	movs	r3, #0
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	3708      	adds	r7, #8
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}

08007dc6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007dc6:	b580      	push	{r7, lr}
 8007dc8:	b08c      	sub	sp, #48	; 0x30
 8007dca:	af00      	add	r7, sp, #0
 8007dcc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007dd4:	b2db      	uxtb	r3, r3
 8007dd6:	2b22      	cmp	r3, #34	; 0x22
 8007dd8:	f040 80ab 	bne.w	8007f32 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	689b      	ldr	r3, [r3, #8]
 8007de0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007de4:	d117      	bne.n	8007e16 <UART_Receive_IT+0x50>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	691b      	ldr	r3, [r3, #16]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d113      	bne.n	8007e16 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007dee:	2300      	movs	r3, #0
 8007df0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007df6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	685b      	ldr	r3, [r3, #4]
 8007dfe:	b29b      	uxth	r3, r3
 8007e00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e04:	b29a      	uxth	r2, r3
 8007e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e08:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e0e:	1c9a      	adds	r2, r3, #2
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	629a      	str	r2, [r3, #40]	; 0x28
 8007e14:	e026      	b.n	8007e64 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	689b      	ldr	r3, [r3, #8]
 8007e24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e28:	d007      	beq.n	8007e3a <UART_Receive_IT+0x74>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	689b      	ldr	r3, [r3, #8]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d10a      	bne.n	8007e48 <UART_Receive_IT+0x82>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	691b      	ldr	r3, [r3, #16]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d106      	bne.n	8007e48 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	685b      	ldr	r3, [r3, #4]
 8007e40:	b2da      	uxtb	r2, r3
 8007e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e44:	701a      	strb	r2, [r3, #0]
 8007e46:	e008      	b.n	8007e5a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	685b      	ldr	r3, [r3, #4]
 8007e4e:	b2db      	uxtb	r3, r3
 8007e50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e54:	b2da      	uxtb	r2, r3
 8007e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e58:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e5e:	1c5a      	adds	r2, r3, #1
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007e68:	b29b      	uxth	r3, r3
 8007e6a:	3b01      	subs	r3, #1
 8007e6c:	b29b      	uxth	r3, r3
 8007e6e:	687a      	ldr	r2, [r7, #4]
 8007e70:	4619      	mov	r1, r3
 8007e72:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d15a      	bne.n	8007f2e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	68da      	ldr	r2, [r3, #12]
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f022 0220 	bic.w	r2, r2, #32
 8007e86:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	68da      	ldr	r2, [r3, #12]
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007e96:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	695a      	ldr	r2, [r3, #20]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f022 0201 	bic.w	r2, r2, #1
 8007ea6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2220      	movs	r2, #32
 8007eac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eb4:	2b01      	cmp	r3, #1
 8007eb6:	d135      	bne.n	8007f24 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	330c      	adds	r3, #12
 8007ec4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	e853 3f00 	ldrex	r3, [r3]
 8007ecc:	613b      	str	r3, [r7, #16]
   return(result);
 8007ece:	693b      	ldr	r3, [r7, #16]
 8007ed0:	f023 0310 	bic.w	r3, r3, #16
 8007ed4:	627b      	str	r3, [r7, #36]	; 0x24
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	330c      	adds	r3, #12
 8007edc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ede:	623a      	str	r2, [r7, #32]
 8007ee0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ee2:	69f9      	ldr	r1, [r7, #28]
 8007ee4:	6a3a      	ldr	r2, [r7, #32]
 8007ee6:	e841 2300 	strex	r3, r2, [r1]
 8007eea:	61bb      	str	r3, [r7, #24]
   return(result);
 8007eec:	69bb      	ldr	r3, [r7, #24]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d1e5      	bne.n	8007ebe <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f003 0310 	and.w	r3, r3, #16
 8007efc:	2b10      	cmp	r3, #16
 8007efe:	d10a      	bne.n	8007f16 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007f00:	2300      	movs	r3, #0
 8007f02:	60fb      	str	r3, [r7, #12]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	60fb      	str	r3, [r7, #12]
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	685b      	ldr	r3, [r3, #4]
 8007f12:	60fb      	str	r3, [r7, #12]
 8007f14:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007f1a:	4619      	mov	r1, r3
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f7f9 f987 	bl	8001230 <HAL_UARTEx_RxEventCallback>
 8007f22:	e002      	b.n	8007f2a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f7f9 f8c1 	bl	80010ac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	e002      	b.n	8007f34 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	e000      	b.n	8007f34 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007f32:	2302      	movs	r3, #2
  }
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	3730      	adds	r7, #48	; 0x30
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}

08007f3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007f3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007f40:	b0c0      	sub	sp, #256	; 0x100
 8007f42:	af00      	add	r7, sp, #0
 8007f44:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	691b      	ldr	r3, [r3, #16]
 8007f50:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f58:	68d9      	ldr	r1, [r3, #12]
 8007f5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f5e:	681a      	ldr	r2, [r3, #0]
 8007f60:	ea40 0301 	orr.w	r3, r0, r1
 8007f64:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007f66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f6a:	689a      	ldr	r2, [r3, #8]
 8007f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f70:	691b      	ldr	r3, [r3, #16]
 8007f72:	431a      	orrs	r2, r3
 8007f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f78:	695b      	ldr	r3, [r3, #20]
 8007f7a:	431a      	orrs	r2, r3
 8007f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f80:	69db      	ldr	r3, [r3, #28]
 8007f82:	4313      	orrs	r3, r2
 8007f84:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	68db      	ldr	r3, [r3, #12]
 8007f90:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007f94:	f021 010c 	bic.w	r1, r1, #12
 8007f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f9c:	681a      	ldr	r2, [r3, #0]
 8007f9e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007fa2:	430b      	orrs	r3, r1
 8007fa4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007fa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	695b      	ldr	r3, [r3, #20]
 8007fae:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007fb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fb6:	6999      	ldr	r1, [r3, #24]
 8007fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fbc:	681a      	ldr	r2, [r3, #0]
 8007fbe:	ea40 0301 	orr.w	r3, r0, r1
 8007fc2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fc8:	681a      	ldr	r2, [r3, #0]
 8007fca:	4b8f      	ldr	r3, [pc, #572]	; (8008208 <UART_SetConfig+0x2cc>)
 8007fcc:	429a      	cmp	r2, r3
 8007fce:	d005      	beq.n	8007fdc <UART_SetConfig+0xa0>
 8007fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fd4:	681a      	ldr	r2, [r3, #0]
 8007fd6:	4b8d      	ldr	r3, [pc, #564]	; (800820c <UART_SetConfig+0x2d0>)
 8007fd8:	429a      	cmp	r2, r3
 8007fda:	d104      	bne.n	8007fe6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007fdc:	f7fd fff4 	bl	8005fc8 <HAL_RCC_GetPCLK2Freq>
 8007fe0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007fe4:	e003      	b.n	8007fee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007fe6:	f7fd ffdb 	bl	8005fa0 <HAL_RCC_GetPCLK1Freq>
 8007fea:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007fee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ff2:	69db      	ldr	r3, [r3, #28]
 8007ff4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ff8:	f040 810c 	bne.w	8008214 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007ffc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008000:	2200      	movs	r2, #0
 8008002:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008006:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800800a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800800e:	4622      	mov	r2, r4
 8008010:	462b      	mov	r3, r5
 8008012:	1891      	adds	r1, r2, r2
 8008014:	65b9      	str	r1, [r7, #88]	; 0x58
 8008016:	415b      	adcs	r3, r3
 8008018:	65fb      	str	r3, [r7, #92]	; 0x5c
 800801a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800801e:	4621      	mov	r1, r4
 8008020:	eb12 0801 	adds.w	r8, r2, r1
 8008024:	4629      	mov	r1, r5
 8008026:	eb43 0901 	adc.w	r9, r3, r1
 800802a:	f04f 0200 	mov.w	r2, #0
 800802e:	f04f 0300 	mov.w	r3, #0
 8008032:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008036:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800803a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800803e:	4690      	mov	r8, r2
 8008040:	4699      	mov	r9, r3
 8008042:	4623      	mov	r3, r4
 8008044:	eb18 0303 	adds.w	r3, r8, r3
 8008048:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800804c:	462b      	mov	r3, r5
 800804e:	eb49 0303 	adc.w	r3, r9, r3
 8008052:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008056:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800805a:	685b      	ldr	r3, [r3, #4]
 800805c:	2200      	movs	r2, #0
 800805e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008062:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008066:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800806a:	460b      	mov	r3, r1
 800806c:	18db      	adds	r3, r3, r3
 800806e:	653b      	str	r3, [r7, #80]	; 0x50
 8008070:	4613      	mov	r3, r2
 8008072:	eb42 0303 	adc.w	r3, r2, r3
 8008076:	657b      	str	r3, [r7, #84]	; 0x54
 8008078:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800807c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008080:	f7f8 f8f6 	bl	8000270 <__aeabi_uldivmod>
 8008084:	4602      	mov	r2, r0
 8008086:	460b      	mov	r3, r1
 8008088:	4b61      	ldr	r3, [pc, #388]	; (8008210 <UART_SetConfig+0x2d4>)
 800808a:	fba3 2302 	umull	r2, r3, r3, r2
 800808e:	095b      	lsrs	r3, r3, #5
 8008090:	011c      	lsls	r4, r3, #4
 8008092:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008096:	2200      	movs	r2, #0
 8008098:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800809c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80080a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80080a4:	4642      	mov	r2, r8
 80080a6:	464b      	mov	r3, r9
 80080a8:	1891      	adds	r1, r2, r2
 80080aa:	64b9      	str	r1, [r7, #72]	; 0x48
 80080ac:	415b      	adcs	r3, r3
 80080ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80080b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80080b4:	4641      	mov	r1, r8
 80080b6:	eb12 0a01 	adds.w	sl, r2, r1
 80080ba:	4649      	mov	r1, r9
 80080bc:	eb43 0b01 	adc.w	fp, r3, r1
 80080c0:	f04f 0200 	mov.w	r2, #0
 80080c4:	f04f 0300 	mov.w	r3, #0
 80080c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80080cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80080d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80080d4:	4692      	mov	sl, r2
 80080d6:	469b      	mov	fp, r3
 80080d8:	4643      	mov	r3, r8
 80080da:	eb1a 0303 	adds.w	r3, sl, r3
 80080de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80080e2:	464b      	mov	r3, r9
 80080e4:	eb4b 0303 	adc.w	r3, fp, r3
 80080e8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80080ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080f0:	685b      	ldr	r3, [r3, #4]
 80080f2:	2200      	movs	r2, #0
 80080f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80080f8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80080fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008100:	460b      	mov	r3, r1
 8008102:	18db      	adds	r3, r3, r3
 8008104:	643b      	str	r3, [r7, #64]	; 0x40
 8008106:	4613      	mov	r3, r2
 8008108:	eb42 0303 	adc.w	r3, r2, r3
 800810c:	647b      	str	r3, [r7, #68]	; 0x44
 800810e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008112:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008116:	f7f8 f8ab 	bl	8000270 <__aeabi_uldivmod>
 800811a:	4602      	mov	r2, r0
 800811c:	460b      	mov	r3, r1
 800811e:	4611      	mov	r1, r2
 8008120:	4b3b      	ldr	r3, [pc, #236]	; (8008210 <UART_SetConfig+0x2d4>)
 8008122:	fba3 2301 	umull	r2, r3, r3, r1
 8008126:	095b      	lsrs	r3, r3, #5
 8008128:	2264      	movs	r2, #100	; 0x64
 800812a:	fb02 f303 	mul.w	r3, r2, r3
 800812e:	1acb      	subs	r3, r1, r3
 8008130:	00db      	lsls	r3, r3, #3
 8008132:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008136:	4b36      	ldr	r3, [pc, #216]	; (8008210 <UART_SetConfig+0x2d4>)
 8008138:	fba3 2302 	umull	r2, r3, r3, r2
 800813c:	095b      	lsrs	r3, r3, #5
 800813e:	005b      	lsls	r3, r3, #1
 8008140:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008144:	441c      	add	r4, r3
 8008146:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800814a:	2200      	movs	r2, #0
 800814c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008150:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008154:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008158:	4642      	mov	r2, r8
 800815a:	464b      	mov	r3, r9
 800815c:	1891      	adds	r1, r2, r2
 800815e:	63b9      	str	r1, [r7, #56]	; 0x38
 8008160:	415b      	adcs	r3, r3
 8008162:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008164:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008168:	4641      	mov	r1, r8
 800816a:	1851      	adds	r1, r2, r1
 800816c:	6339      	str	r1, [r7, #48]	; 0x30
 800816e:	4649      	mov	r1, r9
 8008170:	414b      	adcs	r3, r1
 8008172:	637b      	str	r3, [r7, #52]	; 0x34
 8008174:	f04f 0200 	mov.w	r2, #0
 8008178:	f04f 0300 	mov.w	r3, #0
 800817c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008180:	4659      	mov	r1, fp
 8008182:	00cb      	lsls	r3, r1, #3
 8008184:	4651      	mov	r1, sl
 8008186:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800818a:	4651      	mov	r1, sl
 800818c:	00ca      	lsls	r2, r1, #3
 800818e:	4610      	mov	r0, r2
 8008190:	4619      	mov	r1, r3
 8008192:	4603      	mov	r3, r0
 8008194:	4642      	mov	r2, r8
 8008196:	189b      	adds	r3, r3, r2
 8008198:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800819c:	464b      	mov	r3, r9
 800819e:	460a      	mov	r2, r1
 80081a0:	eb42 0303 	adc.w	r3, r2, r3
 80081a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80081a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081ac:	685b      	ldr	r3, [r3, #4]
 80081ae:	2200      	movs	r2, #0
 80081b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80081b4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80081b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80081bc:	460b      	mov	r3, r1
 80081be:	18db      	adds	r3, r3, r3
 80081c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80081c2:	4613      	mov	r3, r2
 80081c4:	eb42 0303 	adc.w	r3, r2, r3
 80081c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80081ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80081ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80081d2:	f7f8 f84d 	bl	8000270 <__aeabi_uldivmod>
 80081d6:	4602      	mov	r2, r0
 80081d8:	460b      	mov	r3, r1
 80081da:	4b0d      	ldr	r3, [pc, #52]	; (8008210 <UART_SetConfig+0x2d4>)
 80081dc:	fba3 1302 	umull	r1, r3, r3, r2
 80081e0:	095b      	lsrs	r3, r3, #5
 80081e2:	2164      	movs	r1, #100	; 0x64
 80081e4:	fb01 f303 	mul.w	r3, r1, r3
 80081e8:	1ad3      	subs	r3, r2, r3
 80081ea:	00db      	lsls	r3, r3, #3
 80081ec:	3332      	adds	r3, #50	; 0x32
 80081ee:	4a08      	ldr	r2, [pc, #32]	; (8008210 <UART_SetConfig+0x2d4>)
 80081f0:	fba2 2303 	umull	r2, r3, r2, r3
 80081f4:	095b      	lsrs	r3, r3, #5
 80081f6:	f003 0207 	and.w	r2, r3, #7
 80081fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	4422      	add	r2, r4
 8008202:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008204:	e105      	b.n	8008412 <UART_SetConfig+0x4d6>
 8008206:	bf00      	nop
 8008208:	40011000 	.word	0x40011000
 800820c:	40011400 	.word	0x40011400
 8008210:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008214:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008218:	2200      	movs	r2, #0
 800821a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800821e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008222:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008226:	4642      	mov	r2, r8
 8008228:	464b      	mov	r3, r9
 800822a:	1891      	adds	r1, r2, r2
 800822c:	6239      	str	r1, [r7, #32]
 800822e:	415b      	adcs	r3, r3
 8008230:	627b      	str	r3, [r7, #36]	; 0x24
 8008232:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008236:	4641      	mov	r1, r8
 8008238:	1854      	adds	r4, r2, r1
 800823a:	4649      	mov	r1, r9
 800823c:	eb43 0501 	adc.w	r5, r3, r1
 8008240:	f04f 0200 	mov.w	r2, #0
 8008244:	f04f 0300 	mov.w	r3, #0
 8008248:	00eb      	lsls	r3, r5, #3
 800824a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800824e:	00e2      	lsls	r2, r4, #3
 8008250:	4614      	mov	r4, r2
 8008252:	461d      	mov	r5, r3
 8008254:	4643      	mov	r3, r8
 8008256:	18e3      	adds	r3, r4, r3
 8008258:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800825c:	464b      	mov	r3, r9
 800825e:	eb45 0303 	adc.w	r3, r5, r3
 8008262:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008266:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800826a:	685b      	ldr	r3, [r3, #4]
 800826c:	2200      	movs	r2, #0
 800826e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008272:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008276:	f04f 0200 	mov.w	r2, #0
 800827a:	f04f 0300 	mov.w	r3, #0
 800827e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008282:	4629      	mov	r1, r5
 8008284:	008b      	lsls	r3, r1, #2
 8008286:	4621      	mov	r1, r4
 8008288:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800828c:	4621      	mov	r1, r4
 800828e:	008a      	lsls	r2, r1, #2
 8008290:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008294:	f7f7 ffec 	bl	8000270 <__aeabi_uldivmod>
 8008298:	4602      	mov	r2, r0
 800829a:	460b      	mov	r3, r1
 800829c:	4b60      	ldr	r3, [pc, #384]	; (8008420 <UART_SetConfig+0x4e4>)
 800829e:	fba3 2302 	umull	r2, r3, r3, r2
 80082a2:	095b      	lsrs	r3, r3, #5
 80082a4:	011c      	lsls	r4, r3, #4
 80082a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80082aa:	2200      	movs	r2, #0
 80082ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80082b0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80082b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80082b8:	4642      	mov	r2, r8
 80082ba:	464b      	mov	r3, r9
 80082bc:	1891      	adds	r1, r2, r2
 80082be:	61b9      	str	r1, [r7, #24]
 80082c0:	415b      	adcs	r3, r3
 80082c2:	61fb      	str	r3, [r7, #28]
 80082c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80082c8:	4641      	mov	r1, r8
 80082ca:	1851      	adds	r1, r2, r1
 80082cc:	6139      	str	r1, [r7, #16]
 80082ce:	4649      	mov	r1, r9
 80082d0:	414b      	adcs	r3, r1
 80082d2:	617b      	str	r3, [r7, #20]
 80082d4:	f04f 0200 	mov.w	r2, #0
 80082d8:	f04f 0300 	mov.w	r3, #0
 80082dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80082e0:	4659      	mov	r1, fp
 80082e2:	00cb      	lsls	r3, r1, #3
 80082e4:	4651      	mov	r1, sl
 80082e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80082ea:	4651      	mov	r1, sl
 80082ec:	00ca      	lsls	r2, r1, #3
 80082ee:	4610      	mov	r0, r2
 80082f0:	4619      	mov	r1, r3
 80082f2:	4603      	mov	r3, r0
 80082f4:	4642      	mov	r2, r8
 80082f6:	189b      	adds	r3, r3, r2
 80082f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80082fc:	464b      	mov	r3, r9
 80082fe:	460a      	mov	r2, r1
 8008300:	eb42 0303 	adc.w	r3, r2, r3
 8008304:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800830c:	685b      	ldr	r3, [r3, #4]
 800830e:	2200      	movs	r2, #0
 8008310:	67bb      	str	r3, [r7, #120]	; 0x78
 8008312:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008314:	f04f 0200 	mov.w	r2, #0
 8008318:	f04f 0300 	mov.w	r3, #0
 800831c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008320:	4649      	mov	r1, r9
 8008322:	008b      	lsls	r3, r1, #2
 8008324:	4641      	mov	r1, r8
 8008326:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800832a:	4641      	mov	r1, r8
 800832c:	008a      	lsls	r2, r1, #2
 800832e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008332:	f7f7 ff9d 	bl	8000270 <__aeabi_uldivmod>
 8008336:	4602      	mov	r2, r0
 8008338:	460b      	mov	r3, r1
 800833a:	4b39      	ldr	r3, [pc, #228]	; (8008420 <UART_SetConfig+0x4e4>)
 800833c:	fba3 1302 	umull	r1, r3, r3, r2
 8008340:	095b      	lsrs	r3, r3, #5
 8008342:	2164      	movs	r1, #100	; 0x64
 8008344:	fb01 f303 	mul.w	r3, r1, r3
 8008348:	1ad3      	subs	r3, r2, r3
 800834a:	011b      	lsls	r3, r3, #4
 800834c:	3332      	adds	r3, #50	; 0x32
 800834e:	4a34      	ldr	r2, [pc, #208]	; (8008420 <UART_SetConfig+0x4e4>)
 8008350:	fba2 2303 	umull	r2, r3, r2, r3
 8008354:	095b      	lsrs	r3, r3, #5
 8008356:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800835a:	441c      	add	r4, r3
 800835c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008360:	2200      	movs	r2, #0
 8008362:	673b      	str	r3, [r7, #112]	; 0x70
 8008364:	677a      	str	r2, [r7, #116]	; 0x74
 8008366:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800836a:	4642      	mov	r2, r8
 800836c:	464b      	mov	r3, r9
 800836e:	1891      	adds	r1, r2, r2
 8008370:	60b9      	str	r1, [r7, #8]
 8008372:	415b      	adcs	r3, r3
 8008374:	60fb      	str	r3, [r7, #12]
 8008376:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800837a:	4641      	mov	r1, r8
 800837c:	1851      	adds	r1, r2, r1
 800837e:	6039      	str	r1, [r7, #0]
 8008380:	4649      	mov	r1, r9
 8008382:	414b      	adcs	r3, r1
 8008384:	607b      	str	r3, [r7, #4]
 8008386:	f04f 0200 	mov.w	r2, #0
 800838a:	f04f 0300 	mov.w	r3, #0
 800838e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008392:	4659      	mov	r1, fp
 8008394:	00cb      	lsls	r3, r1, #3
 8008396:	4651      	mov	r1, sl
 8008398:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800839c:	4651      	mov	r1, sl
 800839e:	00ca      	lsls	r2, r1, #3
 80083a0:	4610      	mov	r0, r2
 80083a2:	4619      	mov	r1, r3
 80083a4:	4603      	mov	r3, r0
 80083a6:	4642      	mov	r2, r8
 80083a8:	189b      	adds	r3, r3, r2
 80083aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80083ac:	464b      	mov	r3, r9
 80083ae:	460a      	mov	r2, r1
 80083b0:	eb42 0303 	adc.w	r3, r2, r3
 80083b4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80083b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083ba:	685b      	ldr	r3, [r3, #4]
 80083bc:	2200      	movs	r2, #0
 80083be:	663b      	str	r3, [r7, #96]	; 0x60
 80083c0:	667a      	str	r2, [r7, #100]	; 0x64
 80083c2:	f04f 0200 	mov.w	r2, #0
 80083c6:	f04f 0300 	mov.w	r3, #0
 80083ca:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80083ce:	4649      	mov	r1, r9
 80083d0:	008b      	lsls	r3, r1, #2
 80083d2:	4641      	mov	r1, r8
 80083d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80083d8:	4641      	mov	r1, r8
 80083da:	008a      	lsls	r2, r1, #2
 80083dc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80083e0:	f7f7 ff46 	bl	8000270 <__aeabi_uldivmod>
 80083e4:	4602      	mov	r2, r0
 80083e6:	460b      	mov	r3, r1
 80083e8:	4b0d      	ldr	r3, [pc, #52]	; (8008420 <UART_SetConfig+0x4e4>)
 80083ea:	fba3 1302 	umull	r1, r3, r3, r2
 80083ee:	095b      	lsrs	r3, r3, #5
 80083f0:	2164      	movs	r1, #100	; 0x64
 80083f2:	fb01 f303 	mul.w	r3, r1, r3
 80083f6:	1ad3      	subs	r3, r2, r3
 80083f8:	011b      	lsls	r3, r3, #4
 80083fa:	3332      	adds	r3, #50	; 0x32
 80083fc:	4a08      	ldr	r2, [pc, #32]	; (8008420 <UART_SetConfig+0x4e4>)
 80083fe:	fba2 2303 	umull	r2, r3, r2, r3
 8008402:	095b      	lsrs	r3, r3, #5
 8008404:	f003 020f 	and.w	r2, r3, #15
 8008408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	4422      	add	r2, r4
 8008410:	609a      	str	r2, [r3, #8]
}
 8008412:	bf00      	nop
 8008414:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008418:	46bd      	mov	sp, r7
 800841a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800841e:	bf00      	nop
 8008420:	51eb851f 	.word	0x51eb851f

08008424 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b084      	sub	sp, #16
 8008428:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800842a:	2100      	movs	r1, #0
 800842c:	2000      	movs	r0, #0
 800842e:	f004 fca5 	bl	800cd7c <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 8008432:	4b2d      	ldr	r3, [pc, #180]	; (80084e8 <MX_LWIP_Init+0xc4>)
 8008434:	2200      	movs	r2, #0
 8008436:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8008438:	4b2c      	ldr	r3, [pc, #176]	; (80084ec <MX_LWIP_Init+0xc8>)
 800843a:	2200      	movs	r2, #0
 800843c:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 800843e:	4b2c      	ldr	r3, [pc, #176]	; (80084f0 <MX_LWIP_Init+0xcc>)
 8008440:	2200      	movs	r2, #0
 8008442:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8008444:	4b2b      	ldr	r3, [pc, #172]	; (80084f4 <MX_LWIP_Init+0xd0>)
 8008446:	9302      	str	r3, [sp, #8]
 8008448:	4b2b      	ldr	r3, [pc, #172]	; (80084f8 <MX_LWIP_Init+0xd4>)
 800844a:	9301      	str	r3, [sp, #4]
 800844c:	2300      	movs	r3, #0
 800844e:	9300      	str	r3, [sp, #0]
 8008450:	4b27      	ldr	r3, [pc, #156]	; (80084f0 <MX_LWIP_Init+0xcc>)
 8008452:	4a26      	ldr	r2, [pc, #152]	; (80084ec <MX_LWIP_Init+0xc8>)
 8008454:	4924      	ldr	r1, [pc, #144]	; (80084e8 <MX_LWIP_Init+0xc4>)
 8008456:	4829      	ldr	r0, [pc, #164]	; (80084fc <MX_LWIP_Init+0xd8>)
 8008458:	f005 fa14 	bl	800d884 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800845c:	4827      	ldr	r0, [pc, #156]	; (80084fc <MX_LWIP_Init+0xd8>)
 800845e:	f005 fbcb 	bl	800dbf8 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8008462:	4b26      	ldr	r3, [pc, #152]	; (80084fc <MX_LWIP_Init+0xd8>)
 8008464:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008468:	089b      	lsrs	r3, r3, #2
 800846a:	f003 0301 	and.w	r3, r3, #1
 800846e:	b2db      	uxtb	r3, r3
 8008470:	2b00      	cmp	r3, #0
 8008472:	d006      	beq.n	8008482 <MX_LWIP_Init+0x5e>
  {
    /* When the netif is fully configured this function must be called */
	///////////////////////////////////
	netif_link = true;
 8008474:	4b22      	ldr	r3, [pc, #136]	; (8008500 <MX_LWIP_Init+0xdc>)
 8008476:	2201      	movs	r2, #1
 8008478:	701a      	strb	r2, [r3, #0]
	///////////////////////////////////
    netif_set_up(&gnetif);
 800847a:	4820      	ldr	r0, [pc, #128]	; (80084fc <MX_LWIP_Init+0xd8>)
 800847c:	f005 fbcc 	bl	800dc18 <netif_set_up>
 8008480:	e005      	b.n	800848e <MX_LWIP_Init+0x6a>
  }
  else
  {
    /* When the netif link is down this function must be called */
	///////////////////////////////////
	netif_link = false;
 8008482:	4b1f      	ldr	r3, [pc, #124]	; (8008500 <MX_LWIP_Init+0xdc>)
 8008484:	2200      	movs	r2, #0
 8008486:	701a      	strb	r2, [r3, #0]
	///////////////////////////////////
    netif_set_down(&gnetif);
 8008488:	481c      	ldr	r0, [pc, #112]	; (80084fc <MX_LWIP_Init+0xd8>)
 800848a:	f005 fc31 	bl	800dcf0 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 800848e:	491d      	ldr	r1, [pc, #116]	; (8008504 <MX_LWIP_Init+0xe0>)
 8008490:	481a      	ldr	r0, [pc, #104]	; (80084fc <MX_LWIP_Init+0xd8>)
 8008492:	f005 fcc7 	bl	800de24 <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  Netif_LinkSemaphore = osSemaphoreNew(1, 1, NULL);
 8008496:	2200      	movs	r2, #0
 8008498:	2101      	movs	r1, #1
 800849a:	2001      	movs	r0, #1
 800849c:	f000 fe97 	bl	80091ce <osSemaphoreNew>
 80084a0:	4603      	mov	r3, r0
 80084a2:	4a19      	ldr	r2, [pc, #100]	; (8008508 <MX_LWIP_Init+0xe4>)
 80084a4:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 80084a6:	4b19      	ldr	r3, [pc, #100]	; (800850c <MX_LWIP_Init+0xe8>)
 80084a8:	4a14      	ldr	r2, [pc, #80]	; (80084fc <MX_LWIP_Init+0xd8>)
 80084aa:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 80084ac:	4b16      	ldr	r3, [pc, #88]	; (8008508 <MX_LWIP_Init+0xe4>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	4a16      	ldr	r2, [pc, #88]	; (800850c <MX_LWIP_Init+0xe8>)
 80084b2:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 80084b4:	2224      	movs	r2, #36	; 0x24
 80084b6:	2100      	movs	r1, #0
 80084b8:	4815      	ldr	r0, [pc, #84]	; (8008510 <MX_LWIP_Init+0xec>)
 80084ba:	f010 fd65 	bl	8018f88 <memset>
  attributes.name = "LinkThr";
 80084be:	4b14      	ldr	r3, [pc, #80]	; (8008510 <MX_LWIP_Init+0xec>)
 80084c0:	4a14      	ldr	r2, [pc, #80]	; (8008514 <MX_LWIP_Init+0xf0>)
 80084c2:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 80084c4:	4b12      	ldr	r3, [pc, #72]	; (8008510 <MX_LWIP_Init+0xec>)
 80084c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80084ca:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 80084cc:	4b10      	ldr	r3, [pc, #64]	; (8008510 <MX_LWIP_Init+0xec>)
 80084ce:	2210      	movs	r2, #16
 80084d0:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernetif_set_link, &link_arg, &attributes);
 80084d2:	4a0f      	ldr	r2, [pc, #60]	; (8008510 <MX_LWIP_Init+0xec>)
 80084d4:	490d      	ldr	r1, [pc, #52]	; (800850c <MX_LWIP_Init+0xe8>)
 80084d6:	4810      	ldr	r0, [pc, #64]	; (8008518 <MX_LWIP_Init+0xf4>)
 80084d8:	f000 fcbd 	bl	8008e56 <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 80084dc:	4807      	ldr	r0, [pc, #28]	; (80084fc <MX_LWIP_Init+0xd8>)
 80084de:	f00c fe07 	bl	80150f0 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80084e2:	bf00      	nop
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bd80      	pop	{r7, pc}
 80084e8:	20014034 	.word	0x20014034
 80084ec:	20014038 	.word	0x20014038
 80084f0:	2001403c 	.word	0x2001403c
 80084f4:	0800ccb9 	.word	0x0800ccb9
 80084f8:	08008b41 	.word	0x08008b41
 80084fc:	20013ffc 	.word	0x20013ffc
 8008500:	20013ab4 	.word	0x20013ab4
 8008504:	08008c25 	.word	0x08008c25
 8008508:	200000d0 	.word	0x200000d0
 800850c:	20013fd0 	.word	0x20013fd0
 8008510:	20013fd8 	.word	0x20013fd8
 8008514:	0801a208 	.word	0x0801a208
 8008518:	08008bad 	.word	0x08008bad

0800851c <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b08e      	sub	sp, #56	; 0x38
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008524:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008528:	2200      	movs	r2, #0
 800852a:	601a      	str	r2, [r3, #0]
 800852c:	605a      	str	r2, [r3, #4]
 800852e:	609a      	str	r2, [r3, #8]
 8008530:	60da      	str	r2, [r3, #12]
 8008532:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	4a4a      	ldr	r2, [pc, #296]	; (8008664 <HAL_ETH_MspInit+0x148>)
 800853a:	4293      	cmp	r3, r2
 800853c:	f040 808d 	bne.w	800865a <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8008540:	2300      	movs	r3, #0
 8008542:	623b      	str	r3, [r7, #32]
 8008544:	4b48      	ldr	r3, [pc, #288]	; (8008668 <HAL_ETH_MspInit+0x14c>)
 8008546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008548:	4a47      	ldr	r2, [pc, #284]	; (8008668 <HAL_ETH_MspInit+0x14c>)
 800854a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800854e:	6313      	str	r3, [r2, #48]	; 0x30
 8008550:	4b45      	ldr	r3, [pc, #276]	; (8008668 <HAL_ETH_MspInit+0x14c>)
 8008552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008554:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008558:	623b      	str	r3, [r7, #32]
 800855a:	6a3b      	ldr	r3, [r7, #32]
 800855c:	2300      	movs	r3, #0
 800855e:	61fb      	str	r3, [r7, #28]
 8008560:	4b41      	ldr	r3, [pc, #260]	; (8008668 <HAL_ETH_MspInit+0x14c>)
 8008562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008564:	4a40      	ldr	r2, [pc, #256]	; (8008668 <HAL_ETH_MspInit+0x14c>)
 8008566:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800856a:	6313      	str	r3, [r2, #48]	; 0x30
 800856c:	4b3e      	ldr	r3, [pc, #248]	; (8008668 <HAL_ETH_MspInit+0x14c>)
 800856e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008570:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008574:	61fb      	str	r3, [r7, #28]
 8008576:	69fb      	ldr	r3, [r7, #28]
 8008578:	2300      	movs	r3, #0
 800857a:	61bb      	str	r3, [r7, #24]
 800857c:	4b3a      	ldr	r3, [pc, #232]	; (8008668 <HAL_ETH_MspInit+0x14c>)
 800857e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008580:	4a39      	ldr	r2, [pc, #228]	; (8008668 <HAL_ETH_MspInit+0x14c>)
 8008582:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008586:	6313      	str	r3, [r2, #48]	; 0x30
 8008588:	4b37      	ldr	r3, [pc, #220]	; (8008668 <HAL_ETH_MspInit+0x14c>)
 800858a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800858c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008590:	61bb      	str	r3, [r7, #24]
 8008592:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008594:	2300      	movs	r3, #0
 8008596:	617b      	str	r3, [r7, #20]
 8008598:	4b33      	ldr	r3, [pc, #204]	; (8008668 <HAL_ETH_MspInit+0x14c>)
 800859a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800859c:	4a32      	ldr	r2, [pc, #200]	; (8008668 <HAL_ETH_MspInit+0x14c>)
 800859e:	f043 0304 	orr.w	r3, r3, #4
 80085a2:	6313      	str	r3, [r2, #48]	; 0x30
 80085a4:	4b30      	ldr	r3, [pc, #192]	; (8008668 <HAL_ETH_MspInit+0x14c>)
 80085a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085a8:	f003 0304 	and.w	r3, r3, #4
 80085ac:	617b      	str	r3, [r7, #20]
 80085ae:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80085b0:	2300      	movs	r3, #0
 80085b2:	613b      	str	r3, [r7, #16]
 80085b4:	4b2c      	ldr	r3, [pc, #176]	; (8008668 <HAL_ETH_MspInit+0x14c>)
 80085b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085b8:	4a2b      	ldr	r2, [pc, #172]	; (8008668 <HAL_ETH_MspInit+0x14c>)
 80085ba:	f043 0301 	orr.w	r3, r3, #1
 80085be:	6313      	str	r3, [r2, #48]	; 0x30
 80085c0:	4b29      	ldr	r3, [pc, #164]	; (8008668 <HAL_ETH_MspInit+0x14c>)
 80085c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085c4:	f003 0301 	and.w	r3, r3, #1
 80085c8:	613b      	str	r3, [r7, #16]
 80085ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80085cc:	2300      	movs	r3, #0
 80085ce:	60fb      	str	r3, [r7, #12]
 80085d0:	4b25      	ldr	r3, [pc, #148]	; (8008668 <HAL_ETH_MspInit+0x14c>)
 80085d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085d4:	4a24      	ldr	r2, [pc, #144]	; (8008668 <HAL_ETH_MspInit+0x14c>)
 80085d6:	f043 0302 	orr.w	r3, r3, #2
 80085da:	6313      	str	r3, [r2, #48]	; 0x30
 80085dc:	4b22      	ldr	r3, [pc, #136]	; (8008668 <HAL_ETH_MspInit+0x14c>)
 80085de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085e0:	f003 0302 	and.w	r3, r3, #2
 80085e4:	60fb      	str	r3, [r7, #12]
 80085e6:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80085e8:	2332      	movs	r3, #50	; 0x32
 80085ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80085ec:	2302      	movs	r3, #2
 80085ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085f0:	2300      	movs	r3, #0
 80085f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80085f4:	2303      	movs	r3, #3
 80085f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80085f8:	230b      	movs	r3, #11
 80085fa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80085fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008600:	4619      	mov	r1, r3
 8008602:	481a      	ldr	r0, [pc, #104]	; (800866c <HAL_ETH_MspInit+0x150>)
 8008604:	f7fc fd30 	bl	8005068 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8008608:	2386      	movs	r3, #134	; 0x86
 800860a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800860c:	2302      	movs	r3, #2
 800860e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008610:	2300      	movs	r3, #0
 8008612:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008614:	2303      	movs	r3, #3
 8008616:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008618:	230b      	movs	r3, #11
 800861a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800861c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008620:	4619      	mov	r1, r3
 8008622:	4813      	ldr	r0, [pc, #76]	; (8008670 <HAL_ETH_MspInit+0x154>)
 8008624:	f7fc fd20 	bl	8005068 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8008628:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800862c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800862e:	2302      	movs	r3, #2
 8008630:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008632:	2300      	movs	r3, #0
 8008634:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008636:	2303      	movs	r3, #3
 8008638:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800863a:	230b      	movs	r3, #11
 800863c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800863e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008642:	4619      	mov	r1, r3
 8008644:	480b      	ldr	r0, [pc, #44]	; (8008674 <HAL_ETH_MspInit+0x158>)
 8008646:	f7fc fd0f 	bl	8005068 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800864a:	2200      	movs	r2, #0
 800864c:	2105      	movs	r1, #5
 800864e:	203d      	movs	r0, #61	; 0x3d
 8008650:	f7fa fc5f 	bl	8002f12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8008654:	203d      	movs	r0, #61	; 0x3d
 8008656:	f7fa fc78 	bl	8002f4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800865a:	bf00      	nop
 800865c:	3738      	adds	r7, #56	; 0x38
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}
 8008662:	bf00      	nop
 8008664:	40028000 	.word	0x40028000
 8008668:	40023800 	.word	0x40023800
 800866c:	40020800 	.word	0x40020800
 8008670:	40020000 	.word	0x40020000
 8008674:	40020400 	.word	0x40020400

08008678 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b082      	sub	sp, #8
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8008680:	4b04      	ldr	r3, [pc, #16]	; (8008694 <HAL_ETH_RxCpltCallback+0x1c>)
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	4618      	mov	r0, r3
 8008686:	f000 fe7d 	bl	8009384 <osSemaphoreRelease>
}
 800868a:	bf00      	nop
 800868c:	3708      	adds	r7, #8
 800868e:	46bd      	mov	sp, r7
 8008690:	bd80      	pop	{r7, pc}
 8008692:	bf00      	nop
 8008694:	200000d4 	.word	0x200000d4

08008698 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b090      	sub	sp, #64	; 0x40
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 80086a0:	2300      	movs	r3, #0
 80086a2:	63bb      	str	r3, [r7, #56]	; 0x38
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80086a4:	4b5d      	ldr	r3, [pc, #372]	; (800881c <low_level_init+0x184>)
 80086a6:	4a5e      	ldr	r2, [pc, #376]	; (8008820 <low_level_init+0x188>)
 80086a8:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80086aa:	4b5c      	ldr	r3, [pc, #368]	; (800881c <low_level_init+0x184>)
 80086ac:	2201      	movs	r2, #1
 80086ae:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 80086b0:	4b5a      	ldr	r3, [pc, #360]	; (800881c <low_level_init+0x184>)
 80086b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80086b6:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80086b8:	4b58      	ldr	r3, [pc, #352]	; (800881c <low_level_init+0x184>)
 80086ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80086be:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80086c0:	4b56      	ldr	r3, [pc, #344]	; (800881c <low_level_init+0x184>)
 80086c2:	2201      	movs	r2, #1
 80086c4:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 80086c6:	2300      	movs	r3, #0
 80086c8:	733b      	strb	r3, [r7, #12]
  MACAddr[1] = 0x80;
 80086ca:	2380      	movs	r3, #128	; 0x80
 80086cc:	737b      	strb	r3, [r7, #13]
  MACAddr[2] = 0xE1;
 80086ce:	23e1      	movs	r3, #225	; 0xe1
 80086d0:	73bb      	strb	r3, [r7, #14]
  MACAddr[3] = 0x00;
 80086d2:	2300      	movs	r3, #0
 80086d4:	73fb      	strb	r3, [r7, #15]
  MACAddr[4] = 0x00;
 80086d6:	2300      	movs	r3, #0
 80086d8:	743b      	strb	r3, [r7, #16]
  MACAddr[5] = 0x00;
 80086da:	2300      	movs	r3, #0
 80086dc:	747b      	strb	r3, [r7, #17]
  heth.Init.MACAddr = &MACAddr[0];
 80086de:	4a4f      	ldr	r2, [pc, #316]	; (800881c <low_level_init+0x184>)
 80086e0:	f107 030c 	add.w	r3, r7, #12
 80086e4:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 80086e6:	4b4d      	ldr	r3, [pc, #308]	; (800881c <low_level_init+0x184>)
 80086e8:	2201      	movs	r2, #1
 80086ea:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80086ec:	4b4b      	ldr	r3, [pc, #300]	; (800881c <low_level_init+0x184>)
 80086ee:	2200      	movs	r2, #0
 80086f0:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80086f2:	4b4a      	ldr	r3, [pc, #296]	; (800881c <low_level_init+0x184>)
 80086f4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80086f8:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80086fa:	4848      	ldr	r0, [pc, #288]	; (800881c <low_level_init+0x184>)
 80086fc:	f7fb f842 	bl	8003784 <HAL_ETH_Init>
 8008700:	4603      	mov	r3, r0
 8008702:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 8008706:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800870a:	2b00      	cmp	r3, #0
 800870c:	d108      	bne.n	8008720 <low_level_init+0x88>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008714:	f043 0304 	orr.w	r3, r3, #4
 8008718:	b2da      	uxtb	r2, r3
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8008720:	2304      	movs	r3, #4
 8008722:	4a40      	ldr	r2, [pc, #256]	; (8008824 <low_level_init+0x18c>)
 8008724:	4940      	ldr	r1, [pc, #256]	; (8008828 <low_level_init+0x190>)
 8008726:	483d      	ldr	r0, [pc, #244]	; (800881c <low_level_init+0x184>)
 8008728:	f7fb f9c6 	bl	8003ab8 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800872c:	2304      	movs	r3, #4
 800872e:	4a3f      	ldr	r2, [pc, #252]	; (800882c <low_level_init+0x194>)
 8008730:	493f      	ldr	r1, [pc, #252]	; (8008830 <low_level_init+0x198>)
 8008732:	483a      	ldr	r0, [pc, #232]	; (800881c <low_level_init+0x184>)
 8008734:	f7fb fa28 	bl	8003b88 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2206      	movs	r2, #6
 800873c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8008740:	4b36      	ldr	r3, [pc, #216]	; (800881c <low_level_init+0x184>)
 8008742:	695b      	ldr	r3, [r3, #20]
 8008744:	781a      	ldrb	r2, [r3, #0]
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800874c:	4b33      	ldr	r3, [pc, #204]	; (800881c <low_level_init+0x184>)
 800874e:	695b      	ldr	r3, [r3, #20]
 8008750:	785a      	ldrb	r2, [r3, #1]
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8008758:	4b30      	ldr	r3, [pc, #192]	; (800881c <low_level_init+0x184>)
 800875a:	695b      	ldr	r3, [r3, #20]
 800875c:	789a      	ldrb	r2, [r3, #2]
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8008764:	4b2d      	ldr	r3, [pc, #180]	; (800881c <low_level_init+0x184>)
 8008766:	695b      	ldr	r3, [r3, #20]
 8008768:	78da      	ldrb	r2, [r3, #3]
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8008770:	4b2a      	ldr	r3, [pc, #168]	; (800881c <low_level_init+0x184>)
 8008772:	695b      	ldr	r3, [r3, #20]
 8008774:	791a      	ldrb	r2, [r3, #4]
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800877c:	4b27      	ldr	r3, [pc, #156]	; (800881c <low_level_init+0x184>)
 800877e:	695b      	ldr	r3, [r3, #20]
 8008780:	795a      	ldrb	r2, [r3, #5]
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = 1500;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800878e:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008796:	f043 030a 	orr.w	r3, r3, #10
 800879a:	b2da      	uxtb	r2, r3
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  s_xSemaphore = osSemaphoreNew(1, 1, NULL);
 80087a2:	2200      	movs	r2, #0
 80087a4:	2101      	movs	r1, #1
 80087a6:	2001      	movs	r0, #1
 80087a8:	f000 fd11 	bl	80091ce <osSemaphoreNew>
 80087ac:	4603      	mov	r3, r0
 80087ae:	4a21      	ldr	r2, [pc, #132]	; (8008834 <low_level_init+0x19c>)
 80087b0:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 80087b2:	f107 0314 	add.w	r3, r7, #20
 80087b6:	2224      	movs	r2, #36	; 0x24
 80087b8:	2100      	movs	r1, #0
 80087ba:	4618      	mov	r0, r3
 80087bc:	f010 fbe4 	bl	8018f88 <memset>
  attributes.name = "EthIf";
 80087c0:	4b1d      	ldr	r3, [pc, #116]	; (8008838 <low_level_init+0x1a0>)
 80087c2:	617b      	str	r3, [r7, #20]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 80087c4:	f44f 73af 	mov.w	r3, #350	; 0x15e
 80087c8:	62bb      	str	r3, [r7, #40]	; 0x28
  attributes.priority = osPriorityRealtime;
 80087ca:	2330      	movs	r3, #48	; 0x30
 80087cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  osThreadNew(ethernetif_input, netif, &attributes);
 80087ce:	f107 0314 	add.w	r3, r7, #20
 80087d2:	461a      	mov	r2, r3
 80087d4:	6879      	ldr	r1, [r7, #4]
 80087d6:	4819      	ldr	r0, [pc, #100]	; (800883c <low_level_init+0x1a4>)
 80087d8:	f000 fb3d 	bl	8008e56 <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 80087dc:	480f      	ldr	r0, [pc, #60]	; (800881c <low_level_init+0x184>)
 80087de:	f7fb fcf7 	bl	80041d0 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 80087e2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80087e6:	461a      	mov	r2, r3
 80087e8:	211d      	movs	r1, #29
 80087ea:	480c      	ldr	r0, [pc, #48]	; (800881c <low_level_init+0x184>)
 80087ec:	f7fb fc22 	bl	8004034 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 80087f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087f2:	f043 030b 	orr.w	r3, r3, #11
 80087f6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 80087f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087fa:	461a      	mov	r2, r3
 80087fc:	211d      	movs	r1, #29
 80087fe:	4807      	ldr	r0, [pc, #28]	; (800881c <low_level_init+0x184>)
 8008800:	f7fb fc80 	bl	8004104 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8008804:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008808:	461a      	mov	r2, r3
 800880a:	211d      	movs	r1, #29
 800880c:	4803      	ldr	r0, [pc, #12]	; (800881c <low_level_init+0x184>)
 800880e:	f7fb fc11 	bl	8004034 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8008812:	bf00      	nop
 8008814:	3740      	adds	r7, #64	; 0x40
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}
 800881a:	bf00      	nop
 800881c:	20015910 	.word	0x20015910
 8008820:	40028000 	.word	0x40028000
 8008824:	20015958 	.word	0x20015958
 8008828:	20014040 	.word	0x20014040
 800882c:	200140c0 	.word	0x200140c0
 8008830:	20015890 	.word	0x20015890
 8008834:	200000d4 	.word	0x200000d4
 8008838:	0801a210 	.word	0x0801a210
 800883c:	08008ae1 	.word	0x08008ae1

08008840 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b08a      	sub	sp, #40	; 0x28
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
 8008848:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800884a:	4b4b      	ldr	r3, [pc, #300]	; (8008978 <low_level_output+0x138>)
 800884c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800884e:	689b      	ldr	r3, [r3, #8]
 8008850:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8008852:	2300      	movs	r3, #0
 8008854:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8008856:	2300      	movs	r3, #0
 8008858:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800885a:	2300      	movs	r3, #0
 800885c:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800885e:	2300      	movs	r3, #0
 8008860:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8008862:	4b45      	ldr	r3, [pc, #276]	; (8008978 <low_level_output+0x138>)
 8008864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008866:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8008868:	2300      	movs	r3, #0
 800886a:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	623b      	str	r3, [r7, #32]
 8008870:	e05a      	b.n	8008928 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8008872:	69bb      	ldr	r3, [r7, #24]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	2b00      	cmp	r3, #0
 8008878:	da03      	bge.n	8008882 <low_level_output+0x42>
      {
        errval = ERR_USE;
 800887a:	23f8      	movs	r3, #248	; 0xf8
 800887c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8008880:	e05c      	b.n	800893c <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8008882:	6a3b      	ldr	r3, [r7, #32]
 8008884:	895b      	ldrh	r3, [r3, #10]
 8008886:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8008888:	2300      	movs	r3, #0
 800888a:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800888c:	e02f      	b.n	80088ee <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800888e:	69fa      	ldr	r2, [r7, #28]
 8008890:	693b      	ldr	r3, [r7, #16]
 8008892:	18d0      	adds	r0, r2, r3
 8008894:	6a3b      	ldr	r3, [r7, #32]
 8008896:	685a      	ldr	r2, [r3, #4]
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	18d1      	adds	r1, r2, r3
 800889c:	693b      	ldr	r3, [r7, #16]
 800889e:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80088a2:	3304      	adds	r3, #4
 80088a4:	461a      	mov	r2, r3
 80088a6:	f010 fb61 	bl	8018f6c <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 80088aa:	69bb      	ldr	r3, [r7, #24]
 80088ac:	68db      	ldr	r3, [r3, #12]
 80088ae:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80088b0:	69bb      	ldr	r3, [r7, #24]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	da03      	bge.n	80088c0 <low_level_output+0x80>
        {
          errval = ERR_USE;
 80088b8:	23f8      	movs	r3, #248	; 0xf8
 80088ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80088be:	e03d      	b.n	800893c <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 80088c0:	69bb      	ldr	r3, [r7, #24]
 80088c2:	689b      	ldr	r3, [r3, #8]
 80088c4:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 80088c6:	693a      	ldr	r2, [r7, #16]
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	4413      	add	r3, r2
 80088cc:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80088d0:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 80088d2:	68ba      	ldr	r2, [r7, #8]
 80088d4:	693b      	ldr	r3, [r7, #16]
 80088d6:	1ad3      	subs	r3, r2, r3
 80088d8:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80088dc:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 80088de:	697a      	ldr	r2, [r7, #20]
 80088e0:	693b      	ldr	r3, [r7, #16]
 80088e2:	1ad3      	subs	r3, r2, r3
 80088e4:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80088e8:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 80088ea:	2300      	movs	r3, #0
 80088ec:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80088ee:	68fa      	ldr	r2, [r7, #12]
 80088f0:	693b      	ldr	r3, [r7, #16]
 80088f2:	4413      	add	r3, r2
 80088f4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80088f8:	4293      	cmp	r3, r2
 80088fa:	d8c8      	bhi.n	800888e <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 80088fc:	69fa      	ldr	r2, [r7, #28]
 80088fe:	693b      	ldr	r3, [r7, #16]
 8008900:	18d0      	adds	r0, r2, r3
 8008902:	6a3b      	ldr	r3, [r7, #32]
 8008904:	685a      	ldr	r2, [r3, #4]
 8008906:	68bb      	ldr	r3, [r7, #8]
 8008908:	4413      	add	r3, r2
 800890a:	68fa      	ldr	r2, [r7, #12]
 800890c:	4619      	mov	r1, r3
 800890e:	f010 fb2d 	bl	8018f6c <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8008912:	693a      	ldr	r2, [r7, #16]
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	4413      	add	r3, r2
 8008918:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800891a:	697a      	ldr	r2, [r7, #20]
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	4413      	add	r3, r2
 8008920:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8008922:	6a3b      	ldr	r3, [r7, #32]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	623b      	str	r3, [r7, #32]
 8008928:	6a3b      	ldr	r3, [r7, #32]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d1a1      	bne.n	8008872 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800892e:	6979      	ldr	r1, [r7, #20]
 8008930:	4811      	ldr	r0, [pc, #68]	; (8008978 <low_level_output+0x138>)
 8008932:	f7fb f995 	bl	8003c60 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8008936:	2300      	movs	r3, #0
 8008938:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800893c:	4b0e      	ldr	r3, [pc, #56]	; (8008978 <low_level_output+0x138>)
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008944:	695b      	ldr	r3, [r3, #20]
 8008946:	f003 0320 	and.w	r3, r3, #32
 800894a:	2b00      	cmp	r3, #0
 800894c:	d00d      	beq.n	800896a <low_level_output+0x12a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800894e:	4b0a      	ldr	r3, [pc, #40]	; (8008978 <low_level_output+0x138>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008956:	461a      	mov	r2, r3
 8008958:	2320      	movs	r3, #32
 800895a:	6153      	str	r3, [r2, #20]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800895c:	4b06      	ldr	r3, [pc, #24]	; (8008978 <low_level_output+0x138>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008964:	461a      	mov	r2, r3
 8008966:	2300      	movs	r3, #0
 8008968:	6053      	str	r3, [r2, #4]
  }
  return errval;
 800896a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800896e:	4618      	mov	r0, r3
 8008970:	3728      	adds	r7, #40	; 0x28
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}
 8008976:	bf00      	nop
 8008978:	20015910 	.word	0x20015910

0800897c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b08c      	sub	sp, #48	; 0x30
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8008984:	2300      	movs	r3, #0
 8008986:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8008988:	2300      	movs	r3, #0
 800898a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 800898c:	2300      	movs	r3, #0
 800898e:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8008990:	2300      	movs	r3, #0
 8008992:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8008994:	2300      	movs	r3, #0
 8008996:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8008998:	2300      	movs	r3, #0
 800899a:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 800899c:	2300      	movs	r3, #0
 800899e:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 80089a0:	484e      	ldr	r0, [pc, #312]	; (8008adc <low_level_input+0x160>)
 80089a2:	f7fb fa47 	bl	8003e34 <HAL_ETH_GetReceivedFrame_IT>
 80089a6:	4603      	mov	r3, r0
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d001      	beq.n	80089b0 <low_level_input+0x34>

    return NULL;
 80089ac:	2300      	movs	r3, #0
 80089ae:	e091      	b.n	8008ad4 <low_level_input+0x158>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 80089b0:	4b4a      	ldr	r3, [pc, #296]	; (8008adc <low_level_input+0x160>)
 80089b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089b4:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 80089b6:	4b49      	ldr	r3, [pc, #292]	; (8008adc <low_level_input+0x160>)
 80089b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ba:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 80089bc:	89fb      	ldrh	r3, [r7, #14]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d007      	beq.n	80089d2 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 80089c2:	89fb      	ldrh	r3, [r7, #14]
 80089c4:	f44f 72c1 	mov.w	r2, #386	; 0x182
 80089c8:	4619      	mov	r1, r3
 80089ca:	2000      	movs	r0, #0
 80089cc:	f005 faf4 	bl	800dfb8 <pbuf_alloc>
 80089d0:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 80089d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d04b      	beq.n	8008a70 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80089d8:	4b40      	ldr	r3, [pc, #256]	; (8008adc <low_level_input+0x160>)
 80089da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089dc:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 80089de:	2300      	movs	r3, #0
 80089e0:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80089e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80089e6:	e040      	b.n	8008a6a <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 80089e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ea:	895b      	ldrh	r3, [r3, #10]
 80089ec:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 80089ee:	2300      	movs	r3, #0
 80089f0:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80089f2:	e021      	b.n	8008a38 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 80089f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089f6:	685a      	ldr	r2, [r3, #4]
 80089f8:	69bb      	ldr	r3, [r7, #24]
 80089fa:	18d0      	adds	r0, r2, r3
 80089fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089fe:	69fb      	ldr	r3, [r7, #28]
 8008a00:	18d1      	adds	r1, r2, r3
 8008a02:	69fb      	ldr	r3, [r7, #28]
 8008a04:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8008a08:	3304      	adds	r3, #4
 8008a0a:	461a      	mov	r2, r3
 8008a0c:	f010 faae 	bl	8018f6c <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8008a10:	6a3b      	ldr	r3, [r7, #32]
 8008a12:	68db      	ldr	r3, [r3, #12]
 8008a14:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8008a16:	6a3b      	ldr	r3, [r7, #32]
 8008a18:	689b      	ldr	r3, [r3, #8]
 8008a1a:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8008a1c:	69fa      	ldr	r2, [r7, #28]
 8008a1e:	697b      	ldr	r3, [r7, #20]
 8008a20:	4413      	add	r3, r2
 8008a22:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8008a26:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8008a28:	69ba      	ldr	r2, [r7, #24]
 8008a2a:	69fb      	ldr	r3, [r7, #28]
 8008a2c:	1ad3      	subs	r3, r2, r3
 8008a2e:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8008a32:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8008a34:	2300      	movs	r3, #0
 8008a36:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8008a38:	697a      	ldr	r2, [r7, #20]
 8008a3a:	69fb      	ldr	r3, [r7, #28]
 8008a3c:	4413      	add	r3, r2
 8008a3e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8008a42:	4293      	cmp	r3, r2
 8008a44:	d8d6      	bhi.n	80089f4 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8008a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a48:	685a      	ldr	r2, [r3, #4]
 8008a4a:	69bb      	ldr	r3, [r7, #24]
 8008a4c:	18d0      	adds	r0, r2, r3
 8008a4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a50:	69fb      	ldr	r3, [r7, #28]
 8008a52:	4413      	add	r3, r2
 8008a54:	697a      	ldr	r2, [r7, #20]
 8008a56:	4619      	mov	r1, r3
 8008a58:	f010 fa88 	bl	8018f6c <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8008a5c:	69fa      	ldr	r2, [r7, #28]
 8008a5e:	697b      	ldr	r3, [r7, #20]
 8008a60:	4413      	add	r3, r2
 8008a62:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8008a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	62bb      	str	r3, [r7, #40]	; 0x28
 8008a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d1bb      	bne.n	80089e8 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8008a70:	4b1a      	ldr	r3, [pc, #104]	; (8008adc <low_level_input+0x160>)
 8008a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a74:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8008a76:	2300      	movs	r3, #0
 8008a78:	613b      	str	r3, [r7, #16]
 8008a7a:	e00b      	b.n	8008a94 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8008a7c:	6a3b      	ldr	r3, [r7, #32]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008a84:	6a3b      	ldr	r3, [r7, #32]
 8008a86:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8008a88:	6a3b      	ldr	r3, [r7, #32]
 8008a8a:	68db      	ldr	r3, [r3, #12]
 8008a8c:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8008a8e:	693b      	ldr	r3, [r7, #16]
 8008a90:	3301      	adds	r3, #1
 8008a92:	613b      	str	r3, [r7, #16]
 8008a94:	4b11      	ldr	r3, [pc, #68]	; (8008adc <low_level_input+0x160>)
 8008a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a98:	693a      	ldr	r2, [r7, #16]
 8008a9a:	429a      	cmp	r2, r3
 8008a9c:	d3ee      	bcc.n	8008a7c <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8008a9e:	4b0f      	ldr	r3, [pc, #60]	; (8008adc <low_level_input+0x160>)
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8008aa4:	4b0d      	ldr	r3, [pc, #52]	; (8008adc <low_level_input+0x160>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008aac:	695b      	ldr	r3, [r3, #20]
 8008aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d00d      	beq.n	8008ad2 <low_level_input+0x156>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8008ab6:	4b09      	ldr	r3, [pc, #36]	; (8008adc <low_level_input+0x160>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008abe:	461a      	mov	r2, r3
 8008ac0:	2380      	movs	r3, #128	; 0x80
 8008ac2:	6153      	str	r3, [r2, #20]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8008ac4:	4b05      	ldr	r3, [pc, #20]	; (8008adc <low_level_input+0x160>)
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008acc:	461a      	mov	r2, r3
 8008ace:	2300      	movs	r3, #0
 8008ad0:	6093      	str	r3, [r2, #8]
  }
  return p;
 8008ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3730      	adds	r7, #48	; 0x30
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}
 8008adc:	20015910 	.word	0x20015910

08008ae0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b084      	sub	sp, #16
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8008aec:	4b12      	ldr	r3, [pc, #72]	; (8008b38 <ethernetif_input+0x58>)
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f04f 31ff 	mov.w	r1, #4294967295
 8008af4:	4618      	mov	r0, r3
 8008af6:	f000 fbf3 	bl	80092e0 <osSemaphoreAcquire>
 8008afa:	4603      	mov	r3, r0
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d1f5      	bne.n	8008aec <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8008b00:	480e      	ldr	r0, [pc, #56]	; (8008b3c <ethernetif_input+0x5c>)
 8008b02:	f010 f98b 	bl	8018e1c <sys_mutex_lock>
        p = low_level_input( netif );
 8008b06:	68f8      	ldr	r0, [r7, #12]
 8008b08:	f7ff ff38 	bl	800897c <low_level_input>
 8008b0c:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d00a      	beq.n	8008b2a <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	691b      	ldr	r3, [r3, #16]
 8008b18:	68f9      	ldr	r1, [r7, #12]
 8008b1a:	68b8      	ldr	r0, [r7, #8]
 8008b1c:	4798      	blx	r3
 8008b1e:	4603      	mov	r3, r0
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d002      	beq.n	8008b2a <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8008b24:	68b8      	ldr	r0, [r7, #8]
 8008b26:	f005 fd2b 	bl	800e580 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 8008b2a:	4804      	ldr	r0, [pc, #16]	; (8008b3c <ethernetif_input+0x5c>)
 8008b2c:	f010 f985 	bl	8018e3a <sys_mutex_unlock>
      } while(p!=NULL);
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d1e4      	bne.n	8008b00 <ethernetif_input+0x20>
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8008b36:	e7d9      	b.n	8008aec <ethernetif_input+0xc>
 8008b38:	200000d4 	.word	0x200000d4
 8008b3c:	20017168 	.word	0x20017168

08008b40 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b082      	sub	sp, #8
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d106      	bne.n	8008b5c <ethernetif_init+0x1c>
 8008b4e:	4b0e      	ldr	r3, [pc, #56]	; (8008b88 <ethernetif_init+0x48>)
 8008b50:	f240 2231 	movw	r2, #561	; 0x231
 8008b54:	490d      	ldr	r1, [pc, #52]	; (8008b8c <ethernetif_init+0x4c>)
 8008b56:	480e      	ldr	r0, [pc, #56]	; (8008b90 <ethernetif_init+0x50>)
 8008b58:	f010 fdec 	bl	8019734 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2273      	movs	r2, #115	; 0x73
 8008b60:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2274      	movs	r2, #116	; 0x74
 8008b68:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	4a09      	ldr	r2, [pc, #36]	; (8008b94 <ethernetif_init+0x54>)
 8008b70:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	4a08      	ldr	r2, [pc, #32]	; (8008b98 <ethernetif_init+0x58>)
 8008b76:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8008b78:	6878      	ldr	r0, [r7, #4]
 8008b7a:	f7ff fd8d 	bl	8008698 <low_level_init>

  return ERR_OK;
 8008b7e:	2300      	movs	r3, #0
}
 8008b80:	4618      	mov	r0, r3
 8008b82:	3708      	adds	r7, #8
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}
 8008b88:	0801a218 	.word	0x0801a218
 8008b8c:	0801a234 	.word	0x0801a234
 8008b90:	0801a244 	.word	0x0801a244
 8008b94:	08016fbd 	.word	0x08016fbd
 8008b98:	08008841 	.word	0x08008841

08008b9c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8008ba0:	f7fa f8ac 	bl	8002cfc <HAL_GetTick>
 8008ba4:	4603      	mov	r3, r0
}
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	bd80      	pop	{r7, pc}
	...

08008bac <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void* argument)

{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b084      	sub	sp, #16
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8008bbc:	f107 0308 	add.w	r3, r7, #8
 8008bc0:	461a      	mov	r2, r3
 8008bc2:	2101      	movs	r1, #1
 8008bc4:	4816      	ldr	r0, [pc, #88]	; (8008c20 <ethernetif_set_link+0x74>)
 8008bc6:	f7fb fa35 	bl	8004034 <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 8008bca:	68bb      	ldr	r3, [r7, #8]
 8008bcc:	f003 0304 	and.w	r3, r3, #4
 8008bd0:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008bda:	f003 0304 	and.w	r3, r3, #4
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d108      	bne.n	8008bf4 <ethernetif_set_link+0x48>
 8008be2:	68bb      	ldr	r3, [r7, #8]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d005      	beq.n	8008bf4 <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	4618      	mov	r0, r3
 8008bee:	f005 f8b1 	bl	800dd54 <netif_set_link_up>
 8008bf2:	e011      	b.n	8008c18 <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008bfc:	089b      	lsrs	r3, r3, #2
 8008bfe:	f003 0301 	and.w	r3, r3, #1
 8008c02:	b2db      	uxtb	r3, r3
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d007      	beq.n	8008c18 <ethernetif_set_link+0x6c>
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d104      	bne.n	8008c18 <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	4618      	mov	r0, r3
 8008c14:	f005 f8d6 	bl	800ddc4 <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 8008c18:	20c8      	movs	r0, #200	; 0xc8
 8008c1a:	f000 f9af 	bl	8008f7c <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8008c1e:	e7cd      	b.n	8008bbc <ethernetif_set_link+0x10>
 8008c20:	20015910 	.word	0x20015910

08008c24 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b084      	sub	sp, #16
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8008c30:	2300      	movs	r3, #0
 8008c32:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008c3a:	089b      	lsrs	r3, r3, #2
 8008c3c:	f003 0301 	and.w	r3, r3, #1
 8008c40:	b2db      	uxtb	r3, r3
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d05d      	beq.n	8008d02 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8008c46:	4b34      	ldr	r3, [pc, #208]	; (8008d18 <ethernetif_update_config+0xf4>)
 8008c48:	685b      	ldr	r3, [r3, #4]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d03f      	beq.n	8008cce <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8008c4e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008c52:	2100      	movs	r1, #0
 8008c54:	4830      	ldr	r0, [pc, #192]	; (8008d18 <ethernetif_update_config+0xf4>)
 8008c56:	f7fb fa55 	bl	8004104 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8008c5a:	f7fa f84f 	bl	8002cfc <HAL_GetTick>
 8008c5e:	4603      	mov	r3, r0
 8008c60:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8008c62:	f107 0308 	add.w	r3, r7, #8
 8008c66:	461a      	mov	r2, r3
 8008c68:	2101      	movs	r1, #1
 8008c6a:	482b      	ldr	r0, [pc, #172]	; (8008d18 <ethernetif_update_config+0xf4>)
 8008c6c:	f7fb f9e2 	bl	8004034 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8008c70:	f7fa f844 	bl	8002cfc <HAL_GetTick>
 8008c74:	4602      	mov	r2, r0
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	1ad3      	subs	r3, r2, r3
 8008c7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008c7e:	d828      	bhi.n	8008cd2 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	f003 0320 	and.w	r3, r3, #32
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d0eb      	beq.n	8008c62 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8008c8a:	f107 0308 	add.w	r3, r7, #8
 8008c8e:	461a      	mov	r2, r3
 8008c90:	2110      	movs	r1, #16
 8008c92:	4821      	ldr	r0, [pc, #132]	; (8008d18 <ethernetif_update_config+0xf4>)
 8008c94:	f7fb f9ce 	bl	8004034 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	f003 0304 	and.w	r3, r3, #4
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d004      	beq.n	8008cac <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8008ca2:	4b1d      	ldr	r3, [pc, #116]	; (8008d18 <ethernetif_update_config+0xf4>)
 8008ca4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008ca8:	60da      	str	r2, [r3, #12]
 8008caa:	e002      	b.n	8008cb2 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8008cac:	4b1a      	ldr	r3, [pc, #104]	; (8008d18 <ethernetif_update_config+0xf4>)
 8008cae:	2200      	movs	r2, #0
 8008cb0:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	f003 0302 	and.w	r3, r3, #2
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d003      	beq.n	8008cc4 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8008cbc:	4b16      	ldr	r3, [pc, #88]	; (8008d18 <ethernetif_update_config+0xf4>)
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	609a      	str	r2, [r3, #8]
 8008cc2:	e016      	b.n	8008cf2 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8008cc4:	4b14      	ldr	r3, [pc, #80]	; (8008d18 <ethernetif_update_config+0xf4>)
 8008cc6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008cca:	609a      	str	r2, [r3, #8]
 8008ccc:	e011      	b.n	8008cf2 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8008cce:	bf00      	nop
 8008cd0:	e000      	b.n	8008cd4 <ethernetif_update_config+0xb0>
          goto error;
 8008cd2:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8008cd4:	4b10      	ldr	r3, [pc, #64]	; (8008d18 <ethernetif_update_config+0xf4>)
 8008cd6:	68db      	ldr	r3, [r3, #12]
 8008cd8:	08db      	lsrs	r3, r3, #3
 8008cda:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8008cdc:	4b0e      	ldr	r3, [pc, #56]	; (8008d18 <ethernetif_update_config+0xf4>)
 8008cde:	689b      	ldr	r3, [r3, #8]
 8008ce0:	085b      	lsrs	r3, r3, #1
 8008ce2:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8008ce4:	4313      	orrs	r3, r2
 8008ce6:	b29b      	uxth	r3, r3
 8008ce8:	461a      	mov	r2, r3
 8008cea:	2100      	movs	r1, #0
 8008cec:	480a      	ldr	r0, [pc, #40]	; (8008d18 <ethernetif_update_config+0xf4>)
 8008cee:	f7fb fa09 	bl	8004104 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8008cf2:	2100      	movs	r1, #0
 8008cf4:	4808      	ldr	r0, [pc, #32]	; (8008d18 <ethernetif_update_config+0xf4>)
 8008cf6:	f7fb fac9 	bl	800428c <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8008cfa:	4807      	ldr	r0, [pc, #28]	; (8008d18 <ethernetif_update_config+0xf4>)
 8008cfc:	f7fb fa68 	bl	80041d0 <HAL_ETH_Start>
 8008d00:	e002      	b.n	8008d08 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8008d02:	4805      	ldr	r0, [pc, #20]	; (8008d18 <ethernetif_update_config+0xf4>)
 8008d04:	f7fb fa93 	bl	800422e <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f000 f807 	bl	8008d1c <ethernetif_notify_conn_changed>
}
 8008d0e:	bf00      	nop
 8008d10:	3710      	adds	r7, #16
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd80      	pop	{r7, pc}
 8008d16:	bf00      	nop
 8008d18:	20015910 	.word	0x20015910

08008d1c <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8008d1c:	b480      	push	{r7}
 8008d1e:	b083      	sub	sp, #12
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8008d24:	bf00      	nop
 8008d26:	370c      	adds	r7, #12
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2e:	4770      	bx	lr

08008d30 <__NVIC_SetPriority>:
{
 8008d30:	b480      	push	{r7}
 8008d32:	b083      	sub	sp, #12
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	4603      	mov	r3, r0
 8008d38:	6039      	str	r1, [r7, #0]
 8008d3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008d3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	db0a      	blt.n	8008d5a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	b2da      	uxtb	r2, r3
 8008d48:	490c      	ldr	r1, [pc, #48]	; (8008d7c <__NVIC_SetPriority+0x4c>)
 8008d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d4e:	0112      	lsls	r2, r2, #4
 8008d50:	b2d2      	uxtb	r2, r2
 8008d52:	440b      	add	r3, r1
 8008d54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008d58:	e00a      	b.n	8008d70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	b2da      	uxtb	r2, r3
 8008d5e:	4908      	ldr	r1, [pc, #32]	; (8008d80 <__NVIC_SetPriority+0x50>)
 8008d60:	79fb      	ldrb	r3, [r7, #7]
 8008d62:	f003 030f 	and.w	r3, r3, #15
 8008d66:	3b04      	subs	r3, #4
 8008d68:	0112      	lsls	r2, r2, #4
 8008d6a:	b2d2      	uxtb	r2, r2
 8008d6c:	440b      	add	r3, r1
 8008d6e:	761a      	strb	r2, [r3, #24]
}
 8008d70:	bf00      	nop
 8008d72:	370c      	adds	r7, #12
 8008d74:	46bd      	mov	sp, r7
 8008d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7a:	4770      	bx	lr
 8008d7c:	e000e100 	.word	0xe000e100
 8008d80:	e000ed00 	.word	0xe000ed00

08008d84 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008d84:	b580      	push	{r7, lr}
 8008d86:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008d88:	2100      	movs	r1, #0
 8008d8a:	f06f 0004 	mvn.w	r0, #4
 8008d8e:	f7ff ffcf 	bl	8008d30 <__NVIC_SetPriority>
#endif
}
 8008d92:	bf00      	nop
 8008d94:	bd80      	pop	{r7, pc}
	...

08008d98 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008d98:	b480      	push	{r7}
 8008d9a:	b083      	sub	sp, #12
 8008d9c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d9e:	f3ef 8305 	mrs	r3, IPSR
 8008da2:	603b      	str	r3, [r7, #0]
  return(result);
 8008da4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d003      	beq.n	8008db2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008daa:	f06f 0305 	mvn.w	r3, #5
 8008dae:	607b      	str	r3, [r7, #4]
 8008db0:	e00c      	b.n	8008dcc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008db2:	4b0a      	ldr	r3, [pc, #40]	; (8008ddc <osKernelInitialize+0x44>)
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d105      	bne.n	8008dc6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008dba:	4b08      	ldr	r3, [pc, #32]	; (8008ddc <osKernelInitialize+0x44>)
 8008dbc:	2201      	movs	r2, #1
 8008dbe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	607b      	str	r3, [r7, #4]
 8008dc4:	e002      	b.n	8008dcc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8008dca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008dcc:	687b      	ldr	r3, [r7, #4]
}
 8008dce:	4618      	mov	r0, r3
 8008dd0:	370c      	adds	r7, #12
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd8:	4770      	bx	lr
 8008dda:	bf00      	nop
 8008ddc:	200000d8 	.word	0x200000d8

08008de0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b082      	sub	sp, #8
 8008de4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008de6:	f3ef 8305 	mrs	r3, IPSR
 8008dea:	603b      	str	r3, [r7, #0]
  return(result);
 8008dec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d003      	beq.n	8008dfa <osKernelStart+0x1a>
    stat = osErrorISR;
 8008df2:	f06f 0305 	mvn.w	r3, #5
 8008df6:	607b      	str	r3, [r7, #4]
 8008df8:	e010      	b.n	8008e1c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008dfa:	4b0b      	ldr	r3, [pc, #44]	; (8008e28 <osKernelStart+0x48>)
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	2b01      	cmp	r3, #1
 8008e00:	d109      	bne.n	8008e16 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008e02:	f7ff ffbf 	bl	8008d84 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008e06:	4b08      	ldr	r3, [pc, #32]	; (8008e28 <osKernelStart+0x48>)
 8008e08:	2202      	movs	r2, #2
 8008e0a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008e0c:	f001 ffb2 	bl	800ad74 <vTaskStartScheduler>
      stat = osOK;
 8008e10:	2300      	movs	r3, #0
 8008e12:	607b      	str	r3, [r7, #4]
 8008e14:	e002      	b.n	8008e1c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008e16:	f04f 33ff 	mov.w	r3, #4294967295
 8008e1a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008e1c:	687b      	ldr	r3, [r7, #4]
}
 8008e1e:	4618      	mov	r0, r3
 8008e20:	3708      	adds	r7, #8
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bd80      	pop	{r7, pc}
 8008e26:	bf00      	nop
 8008e28:	200000d8 	.word	0x200000d8

08008e2c <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b082      	sub	sp, #8
 8008e30:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e32:	f3ef 8305 	mrs	r3, IPSR
 8008e36:	603b      	str	r3, [r7, #0]
  return(result);
 8008e38:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d003      	beq.n	8008e46 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8008e3e:	f002 f8bb 	bl	800afb8 <xTaskGetTickCountFromISR>
 8008e42:	6078      	str	r0, [r7, #4]
 8008e44:	e002      	b.n	8008e4c <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8008e46:	f002 f8a7 	bl	800af98 <xTaskGetTickCount>
 8008e4a:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8008e4c:	687b      	ldr	r3, [r7, #4]
}
 8008e4e:	4618      	mov	r0, r3
 8008e50:	3708      	adds	r7, #8
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bd80      	pop	{r7, pc}

08008e56 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008e56:	b580      	push	{r7, lr}
 8008e58:	b08e      	sub	sp, #56	; 0x38
 8008e5a:	af04      	add	r7, sp, #16
 8008e5c:	60f8      	str	r0, [r7, #12]
 8008e5e:	60b9      	str	r1, [r7, #8]
 8008e60:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008e62:	2300      	movs	r3, #0
 8008e64:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e66:	f3ef 8305 	mrs	r3, IPSR
 8008e6a:	617b      	str	r3, [r7, #20]
  return(result);
 8008e6c:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d17f      	bne.n	8008f72 <osThreadNew+0x11c>
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d07c      	beq.n	8008f72 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 8008e78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e7c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008e7e:	2318      	movs	r3, #24
 8008e80:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008e82:	2300      	movs	r3, #0
 8008e84:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008e86:	f04f 33ff 	mov.w	r3, #4294967295
 8008e8a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d045      	beq.n	8008f1e <osThreadNew+0xc8>
      if (attr->name != NULL) {
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d002      	beq.n	8008ea0 <osThreadNew+0x4a>
        name = attr->name;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	699b      	ldr	r3, [r3, #24]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d002      	beq.n	8008eae <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	699b      	ldr	r3, [r3, #24]
 8008eac:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008eae:	69fb      	ldr	r3, [r7, #28]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d008      	beq.n	8008ec6 <osThreadNew+0x70>
 8008eb4:	69fb      	ldr	r3, [r7, #28]
 8008eb6:	2b38      	cmp	r3, #56	; 0x38
 8008eb8:	d805      	bhi.n	8008ec6 <osThreadNew+0x70>
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	685b      	ldr	r3, [r3, #4]
 8008ebe:	f003 0301 	and.w	r3, r3, #1
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d001      	beq.n	8008eca <osThreadNew+0x74>
        return (NULL);
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	e054      	b.n	8008f74 <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	695b      	ldr	r3, [r3, #20]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d003      	beq.n	8008eda <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	695b      	ldr	r3, [r3, #20]
 8008ed6:	089b      	lsrs	r3, r3, #2
 8008ed8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	689b      	ldr	r3, [r3, #8]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d00e      	beq.n	8008f00 <osThreadNew+0xaa>
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	68db      	ldr	r3, [r3, #12]
 8008ee6:	2b5b      	cmp	r3, #91	; 0x5b
 8008ee8:	d90a      	bls.n	8008f00 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d006      	beq.n	8008f00 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	695b      	ldr	r3, [r3, #20]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d002      	beq.n	8008f00 <osThreadNew+0xaa>
        mem = 1;
 8008efa:	2301      	movs	r3, #1
 8008efc:	61bb      	str	r3, [r7, #24]
 8008efe:	e010      	b.n	8008f22 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	689b      	ldr	r3, [r3, #8]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d10c      	bne.n	8008f22 <osThreadNew+0xcc>
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	68db      	ldr	r3, [r3, #12]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d108      	bne.n	8008f22 <osThreadNew+0xcc>
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	691b      	ldr	r3, [r3, #16]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d104      	bne.n	8008f22 <osThreadNew+0xcc>
          mem = 0;
 8008f18:	2300      	movs	r3, #0
 8008f1a:	61bb      	str	r3, [r7, #24]
 8008f1c:	e001      	b.n	8008f22 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 8008f1e:	2300      	movs	r3, #0
 8008f20:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008f22:	69bb      	ldr	r3, [r7, #24]
 8008f24:	2b01      	cmp	r3, #1
 8008f26:	d110      	bne.n	8008f4a <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008f2c:	687a      	ldr	r2, [r7, #4]
 8008f2e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008f30:	9202      	str	r2, [sp, #8]
 8008f32:	9301      	str	r3, [sp, #4]
 8008f34:	69fb      	ldr	r3, [r7, #28]
 8008f36:	9300      	str	r3, [sp, #0]
 8008f38:	68bb      	ldr	r3, [r7, #8]
 8008f3a:	6a3a      	ldr	r2, [r7, #32]
 8008f3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008f3e:	68f8      	ldr	r0, [r7, #12]
 8008f40:	f001 fd42 	bl	800a9c8 <xTaskCreateStatic>
 8008f44:	4603      	mov	r3, r0
 8008f46:	613b      	str	r3, [r7, #16]
 8008f48:	e013      	b.n	8008f72 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 8008f4a:	69bb      	ldr	r3, [r7, #24]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d110      	bne.n	8008f72 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008f50:	6a3b      	ldr	r3, [r7, #32]
 8008f52:	b29a      	uxth	r2, r3
 8008f54:	f107 0310 	add.w	r3, r7, #16
 8008f58:	9301      	str	r3, [sp, #4]
 8008f5a:	69fb      	ldr	r3, [r7, #28]
 8008f5c:	9300      	str	r3, [sp, #0]
 8008f5e:	68bb      	ldr	r3, [r7, #8]
 8008f60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008f62:	68f8      	ldr	r0, [r7, #12]
 8008f64:	f001 fd8d 	bl	800aa82 <xTaskCreate>
 8008f68:	4603      	mov	r3, r0
 8008f6a:	2b01      	cmp	r3, #1
 8008f6c:	d001      	beq.n	8008f72 <osThreadNew+0x11c>
            hTask = NULL;
 8008f6e:	2300      	movs	r3, #0
 8008f70:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008f72:	693b      	ldr	r3, [r7, #16]
}
 8008f74:	4618      	mov	r0, r3
 8008f76:	3728      	adds	r7, #40	; 0x28
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bd80      	pop	{r7, pc}

08008f7c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b084      	sub	sp, #16
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f84:	f3ef 8305 	mrs	r3, IPSR
 8008f88:	60bb      	str	r3, [r7, #8]
  return(result);
 8008f8a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d003      	beq.n	8008f98 <osDelay+0x1c>
    stat = osErrorISR;
 8008f90:	f06f 0305 	mvn.w	r3, #5
 8008f94:	60fb      	str	r3, [r7, #12]
 8008f96:	e007      	b.n	8008fa8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008f98:	2300      	movs	r3, #0
 8008f9a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d002      	beq.n	8008fa8 <osDelay+0x2c>
      vTaskDelay(ticks);
 8008fa2:	6878      	ldr	r0, [r7, #4]
 8008fa4:	f001 feb2 	bl	800ad0c <vTaskDelay>
    }
  }

  return (stat);
 8008fa8:	68fb      	ldr	r3, [r7, #12]
}
 8008faa:	4618      	mov	r0, r3
 8008fac:	3710      	adds	r7, #16
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}

08008fb2 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8008fb2:	b580      	push	{r7, lr}
 8008fb4:	b088      	sub	sp, #32
 8008fb6:	af00      	add	r7, sp, #0
 8008fb8:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8008fba:	2300      	movs	r3, #0
 8008fbc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008fbe:	f3ef 8305 	mrs	r3, IPSR
 8008fc2:	60bb      	str	r3, [r7, #8]
  return(result);
 8008fc4:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d174      	bne.n	80090b4 <osMutexNew+0x102>
    if (attr != NULL) {
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d003      	beq.n	8008fd8 <osMutexNew+0x26>
      type = attr->attr_bits;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	685b      	ldr	r3, [r3, #4]
 8008fd4:	61bb      	str	r3, [r7, #24]
 8008fd6:	e001      	b.n	8008fdc <osMutexNew+0x2a>
    } else {
      type = 0U;
 8008fd8:	2300      	movs	r3, #0
 8008fda:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8008fdc:	69bb      	ldr	r3, [r7, #24]
 8008fde:	f003 0301 	and.w	r3, r3, #1
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d002      	beq.n	8008fec <osMutexNew+0x3a>
      rmtx = 1U;
 8008fe6:	2301      	movs	r3, #1
 8008fe8:	617b      	str	r3, [r7, #20]
 8008fea:	e001      	b.n	8008ff0 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8008fec:	2300      	movs	r3, #0
 8008fee:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8008ff0:	69bb      	ldr	r3, [r7, #24]
 8008ff2:	f003 0308 	and.w	r3, r3, #8
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d15c      	bne.n	80090b4 <osMutexNew+0x102>
      mem = -1;
 8008ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8008ffe:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d015      	beq.n	8009032 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	689b      	ldr	r3, [r3, #8]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d006      	beq.n	800901c <osMutexNew+0x6a>
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	68db      	ldr	r3, [r3, #12]
 8009012:	2b4f      	cmp	r3, #79	; 0x4f
 8009014:	d902      	bls.n	800901c <osMutexNew+0x6a>
          mem = 1;
 8009016:	2301      	movs	r3, #1
 8009018:	613b      	str	r3, [r7, #16]
 800901a:	e00c      	b.n	8009036 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	689b      	ldr	r3, [r3, #8]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d108      	bne.n	8009036 <osMutexNew+0x84>
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	68db      	ldr	r3, [r3, #12]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d104      	bne.n	8009036 <osMutexNew+0x84>
            mem = 0;
 800902c:	2300      	movs	r3, #0
 800902e:	613b      	str	r3, [r7, #16]
 8009030:	e001      	b.n	8009036 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8009032:	2300      	movs	r3, #0
 8009034:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8009036:	693b      	ldr	r3, [r7, #16]
 8009038:	2b01      	cmp	r3, #1
 800903a:	d112      	bne.n	8009062 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800903c:	697b      	ldr	r3, [r7, #20]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d007      	beq.n	8009052 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	689b      	ldr	r3, [r3, #8]
 8009046:	4619      	mov	r1, r3
 8009048:	2004      	movs	r0, #4
 800904a:	f000 fd68 	bl	8009b1e <xQueueCreateMutexStatic>
 800904e:	61f8      	str	r0, [r7, #28]
 8009050:	e016      	b.n	8009080 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	689b      	ldr	r3, [r3, #8]
 8009056:	4619      	mov	r1, r3
 8009058:	2001      	movs	r0, #1
 800905a:	f000 fd60 	bl	8009b1e <xQueueCreateMutexStatic>
 800905e:	61f8      	str	r0, [r7, #28]
 8009060:	e00e      	b.n	8009080 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8009062:	693b      	ldr	r3, [r7, #16]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d10b      	bne.n	8009080 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8009068:	697b      	ldr	r3, [r7, #20]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d004      	beq.n	8009078 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800906e:	2004      	movs	r0, #4
 8009070:	f000 fd3d 	bl	8009aee <xQueueCreateMutex>
 8009074:	61f8      	str	r0, [r7, #28]
 8009076:	e003      	b.n	8009080 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8009078:	2001      	movs	r0, #1
 800907a:	f000 fd38 	bl	8009aee <xQueueCreateMutex>
 800907e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8009080:	69fb      	ldr	r3, [r7, #28]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d00c      	beq.n	80090a0 <osMutexNew+0xee>
        if (attr != NULL) {
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d003      	beq.n	8009094 <osMutexNew+0xe2>
          name = attr->name;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	60fb      	str	r3, [r7, #12]
 8009092:	e001      	b.n	8009098 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8009094:	2300      	movs	r3, #0
 8009096:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8009098:	68f9      	ldr	r1, [r7, #12]
 800909a:	69f8      	ldr	r0, [r7, #28]
 800909c:	f001 fc0c 	bl	800a8b8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80090a0:	69fb      	ldr	r3, [r7, #28]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d006      	beq.n	80090b4 <osMutexNew+0x102>
 80090a6:	697b      	ldr	r3, [r7, #20]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d003      	beq.n	80090b4 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80090ac:	69fb      	ldr	r3, [r7, #28]
 80090ae:	f043 0301 	orr.w	r3, r3, #1
 80090b2:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80090b4:	69fb      	ldr	r3, [r7, #28]
}
 80090b6:	4618      	mov	r0, r3
 80090b8:	3720      	adds	r7, #32
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd80      	pop	{r7, pc}

080090be <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80090be:	b580      	push	{r7, lr}
 80090c0:	b086      	sub	sp, #24
 80090c2:	af00      	add	r7, sp, #0
 80090c4:	6078      	str	r0, [r7, #4]
 80090c6:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f023 0301 	bic.w	r3, r3, #1
 80090ce:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f003 0301 	and.w	r3, r3, #1
 80090d6:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80090d8:	2300      	movs	r3, #0
 80090da:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80090dc:	f3ef 8305 	mrs	r3, IPSR
 80090e0:	60bb      	str	r3, [r7, #8]
  return(result);
 80090e2:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d003      	beq.n	80090f0 <osMutexAcquire+0x32>
    stat = osErrorISR;
 80090e8:	f06f 0305 	mvn.w	r3, #5
 80090ec:	617b      	str	r3, [r7, #20]
 80090ee:	e02c      	b.n	800914a <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 80090f0:	693b      	ldr	r3, [r7, #16]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d103      	bne.n	80090fe <osMutexAcquire+0x40>
    stat = osErrorParameter;
 80090f6:	f06f 0303 	mvn.w	r3, #3
 80090fa:	617b      	str	r3, [r7, #20]
 80090fc:	e025      	b.n	800914a <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d011      	beq.n	8009128 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8009104:	6839      	ldr	r1, [r7, #0]
 8009106:	6938      	ldr	r0, [r7, #16]
 8009108:	f000 fd58 	bl	8009bbc <xQueueTakeMutexRecursive>
 800910c:	4603      	mov	r3, r0
 800910e:	2b01      	cmp	r3, #1
 8009110:	d01b      	beq.n	800914a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d003      	beq.n	8009120 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8009118:	f06f 0301 	mvn.w	r3, #1
 800911c:	617b      	str	r3, [r7, #20]
 800911e:	e014      	b.n	800914a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8009120:	f06f 0302 	mvn.w	r3, #2
 8009124:	617b      	str	r3, [r7, #20]
 8009126:	e010      	b.n	800914a <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8009128:	6839      	ldr	r1, [r7, #0]
 800912a:	6938      	ldr	r0, [r7, #16]
 800912c:	f001 f8ec 	bl	800a308 <xQueueSemaphoreTake>
 8009130:	4603      	mov	r3, r0
 8009132:	2b01      	cmp	r3, #1
 8009134:	d009      	beq.n	800914a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d003      	beq.n	8009144 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800913c:	f06f 0301 	mvn.w	r3, #1
 8009140:	617b      	str	r3, [r7, #20]
 8009142:	e002      	b.n	800914a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8009144:	f06f 0302 	mvn.w	r3, #2
 8009148:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800914a:	697b      	ldr	r3, [r7, #20]
}
 800914c:	4618      	mov	r0, r3
 800914e:	3718      	adds	r7, #24
 8009150:	46bd      	mov	sp, r7
 8009152:	bd80      	pop	{r7, pc}

08009154 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8009154:	b580      	push	{r7, lr}
 8009156:	b086      	sub	sp, #24
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f023 0301 	bic.w	r3, r3, #1
 8009162:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f003 0301 	and.w	r3, r3, #1
 800916a:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800916c:	2300      	movs	r3, #0
 800916e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009170:	f3ef 8305 	mrs	r3, IPSR
 8009174:	60bb      	str	r3, [r7, #8]
  return(result);
 8009176:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8009178:	2b00      	cmp	r3, #0
 800917a:	d003      	beq.n	8009184 <osMutexRelease+0x30>
    stat = osErrorISR;
 800917c:	f06f 0305 	mvn.w	r3, #5
 8009180:	617b      	str	r3, [r7, #20]
 8009182:	e01f      	b.n	80091c4 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8009184:	693b      	ldr	r3, [r7, #16]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d103      	bne.n	8009192 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800918a:	f06f 0303 	mvn.w	r3, #3
 800918e:	617b      	str	r3, [r7, #20]
 8009190:	e018      	b.n	80091c4 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d009      	beq.n	80091ac <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8009198:	6938      	ldr	r0, [r7, #16]
 800919a:	f000 fcdb 	bl	8009b54 <xQueueGiveMutexRecursive>
 800919e:	4603      	mov	r3, r0
 80091a0:	2b01      	cmp	r3, #1
 80091a2:	d00f      	beq.n	80091c4 <osMutexRelease+0x70>
        stat = osErrorResource;
 80091a4:	f06f 0302 	mvn.w	r3, #2
 80091a8:	617b      	str	r3, [r7, #20]
 80091aa:	e00b      	b.n	80091c4 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80091ac:	2300      	movs	r3, #0
 80091ae:	2200      	movs	r2, #0
 80091b0:	2100      	movs	r1, #0
 80091b2:	6938      	ldr	r0, [r7, #16]
 80091b4:	f000 fda2 	bl	8009cfc <xQueueGenericSend>
 80091b8:	4603      	mov	r3, r0
 80091ba:	2b01      	cmp	r3, #1
 80091bc:	d002      	beq.n	80091c4 <osMutexRelease+0x70>
        stat = osErrorResource;
 80091be:	f06f 0302 	mvn.w	r3, #2
 80091c2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80091c4:	697b      	ldr	r3, [r7, #20]
}
 80091c6:	4618      	mov	r0, r3
 80091c8:	3718      	adds	r7, #24
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bd80      	pop	{r7, pc}

080091ce <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80091ce:	b580      	push	{r7, lr}
 80091d0:	b08a      	sub	sp, #40	; 0x28
 80091d2:	af02      	add	r7, sp, #8
 80091d4:	60f8      	str	r0, [r7, #12]
 80091d6:	60b9      	str	r1, [r7, #8]
 80091d8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80091da:	2300      	movs	r3, #0
 80091dc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80091de:	f3ef 8305 	mrs	r3, IPSR
 80091e2:	613b      	str	r3, [r7, #16]
  return(result);
 80091e4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d175      	bne.n	80092d6 <osSemaphoreNew+0x108>
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d072      	beq.n	80092d6 <osSemaphoreNew+0x108>
 80091f0:	68ba      	ldr	r2, [r7, #8]
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	429a      	cmp	r2, r3
 80091f6:	d86e      	bhi.n	80092d6 <osSemaphoreNew+0x108>
    mem = -1;
 80091f8:	f04f 33ff 	mov.w	r3, #4294967295
 80091fc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d015      	beq.n	8009230 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	689b      	ldr	r3, [r3, #8]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d006      	beq.n	800921a <osSemaphoreNew+0x4c>
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	68db      	ldr	r3, [r3, #12]
 8009210:	2b4f      	cmp	r3, #79	; 0x4f
 8009212:	d902      	bls.n	800921a <osSemaphoreNew+0x4c>
        mem = 1;
 8009214:	2301      	movs	r3, #1
 8009216:	61bb      	str	r3, [r7, #24]
 8009218:	e00c      	b.n	8009234 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	689b      	ldr	r3, [r3, #8]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d108      	bne.n	8009234 <osSemaphoreNew+0x66>
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	68db      	ldr	r3, [r3, #12]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d104      	bne.n	8009234 <osSemaphoreNew+0x66>
          mem = 0;
 800922a:	2300      	movs	r3, #0
 800922c:	61bb      	str	r3, [r7, #24]
 800922e:	e001      	b.n	8009234 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8009230:	2300      	movs	r3, #0
 8009232:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8009234:	69bb      	ldr	r3, [r7, #24]
 8009236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800923a:	d04c      	beq.n	80092d6 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	2b01      	cmp	r3, #1
 8009240:	d128      	bne.n	8009294 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8009242:	69bb      	ldr	r3, [r7, #24]
 8009244:	2b01      	cmp	r3, #1
 8009246:	d10a      	bne.n	800925e <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	689b      	ldr	r3, [r3, #8]
 800924c:	2203      	movs	r2, #3
 800924e:	9200      	str	r2, [sp, #0]
 8009250:	2200      	movs	r2, #0
 8009252:	2100      	movs	r1, #0
 8009254:	2001      	movs	r0, #1
 8009256:	f000 fb5b 	bl	8009910 <xQueueGenericCreateStatic>
 800925a:	61f8      	str	r0, [r7, #28]
 800925c:	e005      	b.n	800926a <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800925e:	2203      	movs	r2, #3
 8009260:	2100      	movs	r1, #0
 8009262:	2001      	movs	r0, #1
 8009264:	f000 fbcc 	bl	8009a00 <xQueueGenericCreate>
 8009268:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800926a:	69fb      	ldr	r3, [r7, #28]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d022      	beq.n	80092b6 <osSemaphoreNew+0xe8>
 8009270:	68bb      	ldr	r3, [r7, #8]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d01f      	beq.n	80092b6 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009276:	2300      	movs	r3, #0
 8009278:	2200      	movs	r2, #0
 800927a:	2100      	movs	r1, #0
 800927c:	69f8      	ldr	r0, [r7, #28]
 800927e:	f000 fd3d 	bl	8009cfc <xQueueGenericSend>
 8009282:	4603      	mov	r3, r0
 8009284:	2b01      	cmp	r3, #1
 8009286:	d016      	beq.n	80092b6 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8009288:	69f8      	ldr	r0, [r7, #28]
 800928a:	f001 f9c9 	bl	800a620 <vQueueDelete>
            hSemaphore = NULL;
 800928e:	2300      	movs	r3, #0
 8009290:	61fb      	str	r3, [r7, #28]
 8009292:	e010      	b.n	80092b6 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8009294:	69bb      	ldr	r3, [r7, #24]
 8009296:	2b01      	cmp	r3, #1
 8009298:	d108      	bne.n	80092ac <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	689b      	ldr	r3, [r3, #8]
 800929e:	461a      	mov	r2, r3
 80092a0:	68b9      	ldr	r1, [r7, #8]
 80092a2:	68f8      	ldr	r0, [r7, #12]
 80092a4:	f000 fcc0 	bl	8009c28 <xQueueCreateCountingSemaphoreStatic>
 80092a8:	61f8      	str	r0, [r7, #28]
 80092aa:	e004      	b.n	80092b6 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80092ac:	68b9      	ldr	r1, [r7, #8]
 80092ae:	68f8      	ldr	r0, [r7, #12]
 80092b0:	f000 fcf1 	bl	8009c96 <xQueueCreateCountingSemaphore>
 80092b4:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80092b6:	69fb      	ldr	r3, [r7, #28]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d00c      	beq.n	80092d6 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d003      	beq.n	80092ca <osSemaphoreNew+0xfc>
          name = attr->name;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	617b      	str	r3, [r7, #20]
 80092c8:	e001      	b.n	80092ce <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80092ca:	2300      	movs	r3, #0
 80092cc:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80092ce:	6979      	ldr	r1, [r7, #20]
 80092d0:	69f8      	ldr	r0, [r7, #28]
 80092d2:	f001 faf1 	bl	800a8b8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80092d6:	69fb      	ldr	r3, [r7, #28]
}
 80092d8:	4618      	mov	r0, r3
 80092da:	3720      	adds	r7, #32
 80092dc:	46bd      	mov	sp, r7
 80092de:	bd80      	pop	{r7, pc}

080092e0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b086      	sub	sp, #24
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
 80092e8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80092ee:	2300      	movs	r3, #0
 80092f0:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80092f2:	693b      	ldr	r3, [r7, #16]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d103      	bne.n	8009300 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80092f8:	f06f 0303 	mvn.w	r3, #3
 80092fc:	617b      	str	r3, [r7, #20]
 80092fe:	e039      	b.n	8009374 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009300:	f3ef 8305 	mrs	r3, IPSR
 8009304:	60fb      	str	r3, [r7, #12]
  return(result);
 8009306:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009308:	2b00      	cmp	r3, #0
 800930a:	d022      	beq.n	8009352 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d003      	beq.n	800931a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8009312:	f06f 0303 	mvn.w	r3, #3
 8009316:	617b      	str	r3, [r7, #20]
 8009318:	e02c      	b.n	8009374 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800931a:	2300      	movs	r3, #0
 800931c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800931e:	f107 0308 	add.w	r3, r7, #8
 8009322:	461a      	mov	r2, r3
 8009324:	2100      	movs	r1, #0
 8009326:	6938      	ldr	r0, [r7, #16]
 8009328:	f001 f8fa 	bl	800a520 <xQueueReceiveFromISR>
 800932c:	4603      	mov	r3, r0
 800932e:	2b01      	cmp	r3, #1
 8009330:	d003      	beq.n	800933a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8009332:	f06f 0302 	mvn.w	r3, #2
 8009336:	617b      	str	r3, [r7, #20]
 8009338:	e01c      	b.n	8009374 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800933a:	68bb      	ldr	r3, [r7, #8]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d019      	beq.n	8009374 <osSemaphoreAcquire+0x94>
 8009340:	4b0f      	ldr	r3, [pc, #60]	; (8009380 <osSemaphoreAcquire+0xa0>)
 8009342:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009346:	601a      	str	r2, [r3, #0]
 8009348:	f3bf 8f4f 	dsb	sy
 800934c:	f3bf 8f6f 	isb	sy
 8009350:	e010      	b.n	8009374 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8009352:	6839      	ldr	r1, [r7, #0]
 8009354:	6938      	ldr	r0, [r7, #16]
 8009356:	f000 ffd7 	bl	800a308 <xQueueSemaphoreTake>
 800935a:	4603      	mov	r3, r0
 800935c:	2b01      	cmp	r3, #1
 800935e:	d009      	beq.n	8009374 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d003      	beq.n	800936e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8009366:	f06f 0301 	mvn.w	r3, #1
 800936a:	617b      	str	r3, [r7, #20]
 800936c:	e002      	b.n	8009374 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800936e:	f06f 0302 	mvn.w	r3, #2
 8009372:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8009374:	697b      	ldr	r3, [r7, #20]
}
 8009376:	4618      	mov	r0, r3
 8009378:	3718      	adds	r7, #24
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}
 800937e:	bf00      	nop
 8009380:	e000ed04 	.word	0xe000ed04

08009384 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8009384:	b580      	push	{r7, lr}
 8009386:	b086      	sub	sp, #24
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009390:	2300      	movs	r3, #0
 8009392:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8009394:	693b      	ldr	r3, [r7, #16]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d103      	bne.n	80093a2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800939a:	f06f 0303 	mvn.w	r3, #3
 800939e:	617b      	str	r3, [r7, #20]
 80093a0:	e02c      	b.n	80093fc <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80093a2:	f3ef 8305 	mrs	r3, IPSR
 80093a6:	60fb      	str	r3, [r7, #12]
  return(result);
 80093a8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d01a      	beq.n	80093e4 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80093ae:	2300      	movs	r3, #0
 80093b0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80093b2:	f107 0308 	add.w	r3, r7, #8
 80093b6:	4619      	mov	r1, r3
 80093b8:	6938      	ldr	r0, [r7, #16]
 80093ba:	f000 fe38 	bl	800a02e <xQueueGiveFromISR>
 80093be:	4603      	mov	r3, r0
 80093c0:	2b01      	cmp	r3, #1
 80093c2:	d003      	beq.n	80093cc <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80093c4:	f06f 0302 	mvn.w	r3, #2
 80093c8:	617b      	str	r3, [r7, #20]
 80093ca:	e017      	b.n	80093fc <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80093cc:	68bb      	ldr	r3, [r7, #8]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d014      	beq.n	80093fc <osSemaphoreRelease+0x78>
 80093d2:	4b0d      	ldr	r3, [pc, #52]	; (8009408 <osSemaphoreRelease+0x84>)
 80093d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093d8:	601a      	str	r2, [r3, #0]
 80093da:	f3bf 8f4f 	dsb	sy
 80093de:	f3bf 8f6f 	isb	sy
 80093e2:	e00b      	b.n	80093fc <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80093e4:	2300      	movs	r3, #0
 80093e6:	2200      	movs	r2, #0
 80093e8:	2100      	movs	r1, #0
 80093ea:	6938      	ldr	r0, [r7, #16]
 80093ec:	f000 fc86 	bl	8009cfc <xQueueGenericSend>
 80093f0:	4603      	mov	r3, r0
 80093f2:	2b01      	cmp	r3, #1
 80093f4:	d002      	beq.n	80093fc <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80093f6:	f06f 0302 	mvn.w	r3, #2
 80093fa:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80093fc:	697b      	ldr	r3, [r7, #20]
}
 80093fe:	4618      	mov	r0, r3
 8009400:	3718      	adds	r7, #24
 8009402:	46bd      	mov	sp, r7
 8009404:	bd80      	pop	{r7, pc}
 8009406:	bf00      	nop
 8009408:	e000ed04 	.word	0xe000ed04

0800940c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800940c:	b580      	push	{r7, lr}
 800940e:	b08a      	sub	sp, #40	; 0x28
 8009410:	af02      	add	r7, sp, #8
 8009412:	60f8      	str	r0, [r7, #12]
 8009414:	60b9      	str	r1, [r7, #8]
 8009416:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8009418:	2300      	movs	r3, #0
 800941a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800941c:	f3ef 8305 	mrs	r3, IPSR
 8009420:	613b      	str	r3, [r7, #16]
  return(result);
 8009422:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8009424:	2b00      	cmp	r3, #0
 8009426:	d15f      	bne.n	80094e8 <osMessageQueueNew+0xdc>
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d05c      	beq.n	80094e8 <osMessageQueueNew+0xdc>
 800942e:	68bb      	ldr	r3, [r7, #8]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d059      	beq.n	80094e8 <osMessageQueueNew+0xdc>
    mem = -1;
 8009434:	f04f 33ff 	mov.w	r3, #4294967295
 8009438:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d029      	beq.n	8009494 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	689b      	ldr	r3, [r3, #8]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d012      	beq.n	800946e <osMessageQueueNew+0x62>
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	68db      	ldr	r3, [r3, #12]
 800944c:	2b4f      	cmp	r3, #79	; 0x4f
 800944e:	d90e      	bls.n	800946e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009454:	2b00      	cmp	r3, #0
 8009456:	d00a      	beq.n	800946e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	695a      	ldr	r2, [r3, #20]
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	68b9      	ldr	r1, [r7, #8]
 8009460:	fb01 f303 	mul.w	r3, r1, r3
 8009464:	429a      	cmp	r2, r3
 8009466:	d302      	bcc.n	800946e <osMessageQueueNew+0x62>
        mem = 1;
 8009468:	2301      	movs	r3, #1
 800946a:	61bb      	str	r3, [r7, #24]
 800946c:	e014      	b.n	8009498 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	689b      	ldr	r3, [r3, #8]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d110      	bne.n	8009498 <osMessageQueueNew+0x8c>
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	68db      	ldr	r3, [r3, #12]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d10c      	bne.n	8009498 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009482:	2b00      	cmp	r3, #0
 8009484:	d108      	bne.n	8009498 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	695b      	ldr	r3, [r3, #20]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d104      	bne.n	8009498 <osMessageQueueNew+0x8c>
          mem = 0;
 800948e:	2300      	movs	r3, #0
 8009490:	61bb      	str	r3, [r7, #24]
 8009492:	e001      	b.n	8009498 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8009494:	2300      	movs	r3, #0
 8009496:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009498:	69bb      	ldr	r3, [r7, #24]
 800949a:	2b01      	cmp	r3, #1
 800949c:	d10b      	bne.n	80094b6 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	691a      	ldr	r2, [r3, #16]
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	689b      	ldr	r3, [r3, #8]
 80094a6:	2100      	movs	r1, #0
 80094a8:	9100      	str	r1, [sp, #0]
 80094aa:	68b9      	ldr	r1, [r7, #8]
 80094ac:	68f8      	ldr	r0, [r7, #12]
 80094ae:	f000 fa2f 	bl	8009910 <xQueueGenericCreateStatic>
 80094b2:	61f8      	str	r0, [r7, #28]
 80094b4:	e008      	b.n	80094c8 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80094b6:	69bb      	ldr	r3, [r7, #24]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d105      	bne.n	80094c8 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80094bc:	2200      	movs	r2, #0
 80094be:	68b9      	ldr	r1, [r7, #8]
 80094c0:	68f8      	ldr	r0, [r7, #12]
 80094c2:	f000 fa9d 	bl	8009a00 <xQueueGenericCreate>
 80094c6:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80094c8:	69fb      	ldr	r3, [r7, #28]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d00c      	beq.n	80094e8 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d003      	beq.n	80094dc <osMessageQueueNew+0xd0>
        name = attr->name;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	617b      	str	r3, [r7, #20]
 80094da:	e001      	b.n	80094e0 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80094dc:	2300      	movs	r3, #0
 80094de:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80094e0:	6979      	ldr	r1, [r7, #20]
 80094e2:	69f8      	ldr	r0, [r7, #28]
 80094e4:	f001 f9e8 	bl	800a8b8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80094e8:	69fb      	ldr	r3, [r7, #28]
}
 80094ea:	4618      	mov	r0, r3
 80094ec:	3720      	adds	r7, #32
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd80      	pop	{r7, pc}
	...

080094f4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b088      	sub	sp, #32
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	60f8      	str	r0, [r7, #12]
 80094fc:	60b9      	str	r1, [r7, #8]
 80094fe:	603b      	str	r3, [r7, #0]
 8009500:	4613      	mov	r3, r2
 8009502:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009508:	2300      	movs	r3, #0
 800950a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800950c:	f3ef 8305 	mrs	r3, IPSR
 8009510:	617b      	str	r3, [r7, #20]
  return(result);
 8009512:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8009514:	2b00      	cmp	r3, #0
 8009516:	d028      	beq.n	800956a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009518:	69bb      	ldr	r3, [r7, #24]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d005      	beq.n	800952a <osMessageQueuePut+0x36>
 800951e:	68bb      	ldr	r3, [r7, #8]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d002      	beq.n	800952a <osMessageQueuePut+0x36>
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d003      	beq.n	8009532 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800952a:	f06f 0303 	mvn.w	r3, #3
 800952e:	61fb      	str	r3, [r7, #28]
 8009530:	e038      	b.n	80095a4 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8009532:	2300      	movs	r3, #0
 8009534:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8009536:	f107 0210 	add.w	r2, r7, #16
 800953a:	2300      	movs	r3, #0
 800953c:	68b9      	ldr	r1, [r7, #8]
 800953e:	69b8      	ldr	r0, [r7, #24]
 8009540:	f000 fcda 	bl	8009ef8 <xQueueGenericSendFromISR>
 8009544:	4603      	mov	r3, r0
 8009546:	2b01      	cmp	r3, #1
 8009548:	d003      	beq.n	8009552 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800954a:	f06f 0302 	mvn.w	r3, #2
 800954e:	61fb      	str	r3, [r7, #28]
 8009550:	e028      	b.n	80095a4 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8009552:	693b      	ldr	r3, [r7, #16]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d025      	beq.n	80095a4 <osMessageQueuePut+0xb0>
 8009558:	4b15      	ldr	r3, [pc, #84]	; (80095b0 <osMessageQueuePut+0xbc>)
 800955a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800955e:	601a      	str	r2, [r3, #0]
 8009560:	f3bf 8f4f 	dsb	sy
 8009564:	f3bf 8f6f 	isb	sy
 8009568:	e01c      	b.n	80095a4 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800956a:	69bb      	ldr	r3, [r7, #24]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d002      	beq.n	8009576 <osMessageQueuePut+0x82>
 8009570:	68bb      	ldr	r3, [r7, #8]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d103      	bne.n	800957e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8009576:	f06f 0303 	mvn.w	r3, #3
 800957a:	61fb      	str	r3, [r7, #28]
 800957c:	e012      	b.n	80095a4 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800957e:	2300      	movs	r3, #0
 8009580:	683a      	ldr	r2, [r7, #0]
 8009582:	68b9      	ldr	r1, [r7, #8]
 8009584:	69b8      	ldr	r0, [r7, #24]
 8009586:	f000 fbb9 	bl	8009cfc <xQueueGenericSend>
 800958a:	4603      	mov	r3, r0
 800958c:	2b01      	cmp	r3, #1
 800958e:	d009      	beq.n	80095a4 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d003      	beq.n	800959e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8009596:	f06f 0301 	mvn.w	r3, #1
 800959a:	61fb      	str	r3, [r7, #28]
 800959c:	e002      	b.n	80095a4 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800959e:	f06f 0302 	mvn.w	r3, #2
 80095a2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80095a4:	69fb      	ldr	r3, [r7, #28]
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	3720      	adds	r7, #32
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bd80      	pop	{r7, pc}
 80095ae:	bf00      	nop
 80095b0:	e000ed04 	.word	0xe000ed04

080095b4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b088      	sub	sp, #32
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	60f8      	str	r0, [r7, #12]
 80095bc:	60b9      	str	r1, [r7, #8]
 80095be:	607a      	str	r2, [r7, #4]
 80095c0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80095c6:	2300      	movs	r3, #0
 80095c8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80095ca:	f3ef 8305 	mrs	r3, IPSR
 80095ce:	617b      	str	r3, [r7, #20]
  return(result);
 80095d0:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d028      	beq.n	8009628 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80095d6:	69bb      	ldr	r3, [r7, #24]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d005      	beq.n	80095e8 <osMessageQueueGet+0x34>
 80095dc:	68bb      	ldr	r3, [r7, #8]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d002      	beq.n	80095e8 <osMessageQueueGet+0x34>
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d003      	beq.n	80095f0 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80095e8:	f06f 0303 	mvn.w	r3, #3
 80095ec:	61fb      	str	r3, [r7, #28]
 80095ee:	e037      	b.n	8009660 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80095f0:	2300      	movs	r3, #0
 80095f2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80095f4:	f107 0310 	add.w	r3, r7, #16
 80095f8:	461a      	mov	r2, r3
 80095fa:	68b9      	ldr	r1, [r7, #8]
 80095fc:	69b8      	ldr	r0, [r7, #24]
 80095fe:	f000 ff8f 	bl	800a520 <xQueueReceiveFromISR>
 8009602:	4603      	mov	r3, r0
 8009604:	2b01      	cmp	r3, #1
 8009606:	d003      	beq.n	8009610 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8009608:	f06f 0302 	mvn.w	r3, #2
 800960c:	61fb      	str	r3, [r7, #28]
 800960e:	e027      	b.n	8009660 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8009610:	693b      	ldr	r3, [r7, #16]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d024      	beq.n	8009660 <osMessageQueueGet+0xac>
 8009616:	4b15      	ldr	r3, [pc, #84]	; (800966c <osMessageQueueGet+0xb8>)
 8009618:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800961c:	601a      	str	r2, [r3, #0]
 800961e:	f3bf 8f4f 	dsb	sy
 8009622:	f3bf 8f6f 	isb	sy
 8009626:	e01b      	b.n	8009660 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009628:	69bb      	ldr	r3, [r7, #24]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d002      	beq.n	8009634 <osMessageQueueGet+0x80>
 800962e:	68bb      	ldr	r3, [r7, #8]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d103      	bne.n	800963c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8009634:	f06f 0303 	mvn.w	r3, #3
 8009638:	61fb      	str	r3, [r7, #28]
 800963a:	e011      	b.n	8009660 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800963c:	683a      	ldr	r2, [r7, #0]
 800963e:	68b9      	ldr	r1, [r7, #8]
 8009640:	69b8      	ldr	r0, [r7, #24]
 8009642:	f000 fd81 	bl	800a148 <xQueueReceive>
 8009646:	4603      	mov	r3, r0
 8009648:	2b01      	cmp	r3, #1
 800964a:	d009      	beq.n	8009660 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d003      	beq.n	800965a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8009652:	f06f 0301 	mvn.w	r3, #1
 8009656:	61fb      	str	r3, [r7, #28]
 8009658:	e002      	b.n	8009660 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800965a:	f06f 0302 	mvn.w	r3, #2
 800965e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009660:	69fb      	ldr	r3, [r7, #28]
}
 8009662:	4618      	mov	r0, r3
 8009664:	3720      	adds	r7, #32
 8009666:	46bd      	mov	sp, r7
 8009668:	bd80      	pop	{r7, pc}
 800966a:	bf00      	nop
 800966c:	e000ed04 	.word	0xe000ed04

08009670 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009670:	b480      	push	{r7}
 8009672:	b085      	sub	sp, #20
 8009674:	af00      	add	r7, sp, #0
 8009676:	60f8      	str	r0, [r7, #12]
 8009678:	60b9      	str	r1, [r7, #8]
 800967a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	4a07      	ldr	r2, [pc, #28]	; (800969c <vApplicationGetIdleTaskMemory+0x2c>)
 8009680:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009682:	68bb      	ldr	r3, [r7, #8]
 8009684:	4a06      	ldr	r2, [pc, #24]	; (80096a0 <vApplicationGetIdleTaskMemory+0x30>)
 8009686:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800968e:	601a      	str	r2, [r3, #0]
}
 8009690:	bf00      	nop
 8009692:	3714      	adds	r7, #20
 8009694:	46bd      	mov	sp, r7
 8009696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969a:	4770      	bx	lr
 800969c:	200000dc 	.word	0x200000dc
 80096a0:	20000138 	.word	0x20000138

080096a4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80096a4:	b480      	push	{r7}
 80096a6:	b085      	sub	sp, #20
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	60f8      	str	r0, [r7, #12]
 80096ac:	60b9      	str	r1, [r7, #8]
 80096ae:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	4a07      	ldr	r2, [pc, #28]	; (80096d0 <vApplicationGetTimerTaskMemory+0x2c>)
 80096b4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80096b6:	68bb      	ldr	r3, [r7, #8]
 80096b8:	4a06      	ldr	r2, [pc, #24]	; (80096d4 <vApplicationGetTimerTaskMemory+0x30>)
 80096ba:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80096c2:	601a      	str	r2, [r3, #0]
}
 80096c4:	bf00      	nop
 80096c6:	3714      	adds	r7, #20
 80096c8:	46bd      	mov	sp, r7
 80096ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ce:	4770      	bx	lr
 80096d0:	20001138 	.word	0x20001138
 80096d4:	20001194 	.word	0x20001194

080096d8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80096d8:	b480      	push	{r7}
 80096da:	b083      	sub	sp, #12
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f103 0208 	add.w	r2, r3, #8
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	f04f 32ff 	mov.w	r2, #4294967295
 80096f0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	f103 0208 	add.w	r2, r3, #8
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	f103 0208 	add.w	r2, r3, #8
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2200      	movs	r2, #0
 800970a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800970c:	bf00      	nop
 800970e:	370c      	adds	r7, #12
 8009710:	46bd      	mov	sp, r7
 8009712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009716:	4770      	bx	lr

08009718 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009718:	b480      	push	{r7}
 800971a:	b083      	sub	sp, #12
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2200      	movs	r2, #0
 8009724:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009726:	bf00      	nop
 8009728:	370c      	adds	r7, #12
 800972a:	46bd      	mov	sp, r7
 800972c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009730:	4770      	bx	lr

08009732 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009732:	b480      	push	{r7}
 8009734:	b085      	sub	sp, #20
 8009736:	af00      	add	r7, sp, #0
 8009738:	6078      	str	r0, [r7, #4]
 800973a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	685b      	ldr	r3, [r3, #4]
 8009740:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	68fa      	ldr	r2, [r7, #12]
 8009746:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	689a      	ldr	r2, [r3, #8]
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	689b      	ldr	r3, [r3, #8]
 8009754:	683a      	ldr	r2, [r7, #0]
 8009756:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	683a      	ldr	r2, [r7, #0]
 800975c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	687a      	ldr	r2, [r7, #4]
 8009762:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	1c5a      	adds	r2, r3, #1
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	601a      	str	r2, [r3, #0]
}
 800976e:	bf00      	nop
 8009770:	3714      	adds	r7, #20
 8009772:	46bd      	mov	sp, r7
 8009774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009778:	4770      	bx	lr

0800977a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800977a:	b480      	push	{r7}
 800977c:	b085      	sub	sp, #20
 800977e:	af00      	add	r7, sp, #0
 8009780:	6078      	str	r0, [r7, #4]
 8009782:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800978a:	68bb      	ldr	r3, [r7, #8]
 800978c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009790:	d103      	bne.n	800979a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	691b      	ldr	r3, [r3, #16]
 8009796:	60fb      	str	r3, [r7, #12]
 8009798:	e00c      	b.n	80097b4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	3308      	adds	r3, #8
 800979e:	60fb      	str	r3, [r7, #12]
 80097a0:	e002      	b.n	80097a8 <vListInsert+0x2e>
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	685b      	ldr	r3, [r3, #4]
 80097a6:	60fb      	str	r3, [r7, #12]
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	685b      	ldr	r3, [r3, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	68ba      	ldr	r2, [r7, #8]
 80097b0:	429a      	cmp	r2, r3
 80097b2:	d2f6      	bcs.n	80097a2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	685a      	ldr	r2, [r3, #4]
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	685b      	ldr	r3, [r3, #4]
 80097c0:	683a      	ldr	r2, [r7, #0]
 80097c2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	68fa      	ldr	r2, [r7, #12]
 80097c8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	683a      	ldr	r2, [r7, #0]
 80097ce:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	687a      	ldr	r2, [r7, #4]
 80097d4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	1c5a      	adds	r2, r3, #1
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	601a      	str	r2, [r3, #0]
}
 80097e0:	bf00      	nop
 80097e2:	3714      	adds	r7, #20
 80097e4:	46bd      	mov	sp, r7
 80097e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ea:	4770      	bx	lr

080097ec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80097ec:	b480      	push	{r7}
 80097ee:	b085      	sub	sp, #20
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	691b      	ldr	r3, [r3, #16]
 80097f8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	685b      	ldr	r3, [r3, #4]
 80097fe:	687a      	ldr	r2, [r7, #4]
 8009800:	6892      	ldr	r2, [r2, #8]
 8009802:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	689b      	ldr	r3, [r3, #8]
 8009808:	687a      	ldr	r2, [r7, #4]
 800980a:	6852      	ldr	r2, [r2, #4]
 800980c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	685b      	ldr	r3, [r3, #4]
 8009812:	687a      	ldr	r2, [r7, #4]
 8009814:	429a      	cmp	r2, r3
 8009816:	d103      	bne.n	8009820 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	689a      	ldr	r2, [r3, #8]
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2200      	movs	r2, #0
 8009824:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	1e5a      	subs	r2, r3, #1
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	681b      	ldr	r3, [r3, #0]
}
 8009834:	4618      	mov	r0, r3
 8009836:	3714      	adds	r7, #20
 8009838:	46bd      	mov	sp, r7
 800983a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983e:	4770      	bx	lr

08009840 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b084      	sub	sp, #16
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
 8009848:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d10a      	bne.n	800986a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009858:	f383 8811 	msr	BASEPRI, r3
 800985c:	f3bf 8f6f 	isb	sy
 8009860:	f3bf 8f4f 	dsb	sy
 8009864:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009866:	bf00      	nop
 8009868:	e7fe      	b.n	8009868 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800986a:	f002 fe23 	bl	800c4b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	681a      	ldr	r2, [r3, #0]
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009876:	68f9      	ldr	r1, [r7, #12]
 8009878:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800987a:	fb01 f303 	mul.w	r3, r1, r3
 800987e:	441a      	add	r2, r3
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	2200      	movs	r2, #0
 8009888:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	681a      	ldr	r2, [r3, #0]
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	681a      	ldr	r2, [r3, #0]
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800989a:	3b01      	subs	r3, #1
 800989c:	68f9      	ldr	r1, [r7, #12]
 800989e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80098a0:	fb01 f303 	mul.w	r3, r1, r3
 80098a4:	441a      	add	r2, r3
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	22ff      	movs	r2, #255	; 0xff
 80098ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	22ff      	movs	r2, #255	; 0xff
 80098b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80098ba:	683b      	ldr	r3, [r7, #0]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d114      	bne.n	80098ea <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	691b      	ldr	r3, [r3, #16]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d01a      	beq.n	80098fe <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	3310      	adds	r3, #16
 80098cc:	4618      	mov	r0, r3
 80098ce:	f001 fced 	bl	800b2ac <xTaskRemoveFromEventList>
 80098d2:	4603      	mov	r3, r0
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d012      	beq.n	80098fe <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80098d8:	4b0c      	ldr	r3, [pc, #48]	; (800990c <xQueueGenericReset+0xcc>)
 80098da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098de:	601a      	str	r2, [r3, #0]
 80098e0:	f3bf 8f4f 	dsb	sy
 80098e4:	f3bf 8f6f 	isb	sy
 80098e8:	e009      	b.n	80098fe <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	3310      	adds	r3, #16
 80098ee:	4618      	mov	r0, r3
 80098f0:	f7ff fef2 	bl	80096d8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	3324      	adds	r3, #36	; 0x24
 80098f8:	4618      	mov	r0, r3
 80098fa:	f7ff feed 	bl	80096d8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80098fe:	f002 fe09 	bl	800c514 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009902:	2301      	movs	r3, #1
}
 8009904:	4618      	mov	r0, r3
 8009906:	3710      	adds	r7, #16
 8009908:	46bd      	mov	sp, r7
 800990a:	bd80      	pop	{r7, pc}
 800990c:	e000ed04 	.word	0xe000ed04

08009910 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009910:	b580      	push	{r7, lr}
 8009912:	b08e      	sub	sp, #56	; 0x38
 8009914:	af02      	add	r7, sp, #8
 8009916:	60f8      	str	r0, [r7, #12]
 8009918:	60b9      	str	r1, [r7, #8]
 800991a:	607a      	str	r2, [r7, #4]
 800991c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d10a      	bne.n	800993a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009928:	f383 8811 	msr	BASEPRI, r3
 800992c:	f3bf 8f6f 	isb	sy
 8009930:	f3bf 8f4f 	dsb	sy
 8009934:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009936:	bf00      	nop
 8009938:	e7fe      	b.n	8009938 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d10a      	bne.n	8009956 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009944:	f383 8811 	msr	BASEPRI, r3
 8009948:	f3bf 8f6f 	isb	sy
 800994c:	f3bf 8f4f 	dsb	sy
 8009950:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009952:	bf00      	nop
 8009954:	e7fe      	b.n	8009954 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d002      	beq.n	8009962 <xQueueGenericCreateStatic+0x52>
 800995c:	68bb      	ldr	r3, [r7, #8]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d001      	beq.n	8009966 <xQueueGenericCreateStatic+0x56>
 8009962:	2301      	movs	r3, #1
 8009964:	e000      	b.n	8009968 <xQueueGenericCreateStatic+0x58>
 8009966:	2300      	movs	r3, #0
 8009968:	2b00      	cmp	r3, #0
 800996a:	d10a      	bne.n	8009982 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800996c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009970:	f383 8811 	msr	BASEPRI, r3
 8009974:	f3bf 8f6f 	isb	sy
 8009978:	f3bf 8f4f 	dsb	sy
 800997c:	623b      	str	r3, [r7, #32]
}
 800997e:	bf00      	nop
 8009980:	e7fe      	b.n	8009980 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d102      	bne.n	800998e <xQueueGenericCreateStatic+0x7e>
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d101      	bne.n	8009992 <xQueueGenericCreateStatic+0x82>
 800998e:	2301      	movs	r3, #1
 8009990:	e000      	b.n	8009994 <xQueueGenericCreateStatic+0x84>
 8009992:	2300      	movs	r3, #0
 8009994:	2b00      	cmp	r3, #0
 8009996:	d10a      	bne.n	80099ae <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800999c:	f383 8811 	msr	BASEPRI, r3
 80099a0:	f3bf 8f6f 	isb	sy
 80099a4:	f3bf 8f4f 	dsb	sy
 80099a8:	61fb      	str	r3, [r7, #28]
}
 80099aa:	bf00      	nop
 80099ac:	e7fe      	b.n	80099ac <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80099ae:	2350      	movs	r3, #80	; 0x50
 80099b0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80099b2:	697b      	ldr	r3, [r7, #20]
 80099b4:	2b50      	cmp	r3, #80	; 0x50
 80099b6:	d00a      	beq.n	80099ce <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80099b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099bc:	f383 8811 	msr	BASEPRI, r3
 80099c0:	f3bf 8f6f 	isb	sy
 80099c4:	f3bf 8f4f 	dsb	sy
 80099c8:	61bb      	str	r3, [r7, #24]
}
 80099ca:	bf00      	nop
 80099cc:	e7fe      	b.n	80099cc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80099ce:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80099d0:	683b      	ldr	r3, [r7, #0]
 80099d2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80099d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d00d      	beq.n	80099f6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80099da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099dc:	2201      	movs	r2, #1
 80099de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80099e2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80099e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099e8:	9300      	str	r3, [sp, #0]
 80099ea:	4613      	mov	r3, r2
 80099ec:	687a      	ldr	r2, [r7, #4]
 80099ee:	68b9      	ldr	r1, [r7, #8]
 80099f0:	68f8      	ldr	r0, [r7, #12]
 80099f2:	f000 f83f 	bl	8009a74 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80099f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80099f8:	4618      	mov	r0, r3
 80099fa:	3730      	adds	r7, #48	; 0x30
 80099fc:	46bd      	mov	sp, r7
 80099fe:	bd80      	pop	{r7, pc}

08009a00 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b08a      	sub	sp, #40	; 0x28
 8009a04:	af02      	add	r7, sp, #8
 8009a06:	60f8      	str	r0, [r7, #12]
 8009a08:	60b9      	str	r1, [r7, #8]
 8009a0a:	4613      	mov	r3, r2
 8009a0c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d10a      	bne.n	8009a2a <xQueueGenericCreate+0x2a>
	__asm volatile
 8009a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a18:	f383 8811 	msr	BASEPRI, r3
 8009a1c:	f3bf 8f6f 	isb	sy
 8009a20:	f3bf 8f4f 	dsb	sy
 8009a24:	613b      	str	r3, [r7, #16]
}
 8009a26:	bf00      	nop
 8009a28:	e7fe      	b.n	8009a28 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	68ba      	ldr	r2, [r7, #8]
 8009a2e:	fb02 f303 	mul.w	r3, r2, r3
 8009a32:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009a34:	69fb      	ldr	r3, [r7, #28]
 8009a36:	3350      	adds	r3, #80	; 0x50
 8009a38:	4618      	mov	r0, r3
 8009a3a:	f002 fe5d 	bl	800c6f8 <pvPortMalloc>
 8009a3e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009a40:	69bb      	ldr	r3, [r7, #24]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d011      	beq.n	8009a6a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009a46:	69bb      	ldr	r3, [r7, #24]
 8009a48:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009a4a:	697b      	ldr	r3, [r7, #20]
 8009a4c:	3350      	adds	r3, #80	; 0x50
 8009a4e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009a50:	69bb      	ldr	r3, [r7, #24]
 8009a52:	2200      	movs	r2, #0
 8009a54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009a58:	79fa      	ldrb	r2, [r7, #7]
 8009a5a:	69bb      	ldr	r3, [r7, #24]
 8009a5c:	9300      	str	r3, [sp, #0]
 8009a5e:	4613      	mov	r3, r2
 8009a60:	697a      	ldr	r2, [r7, #20]
 8009a62:	68b9      	ldr	r1, [r7, #8]
 8009a64:	68f8      	ldr	r0, [r7, #12]
 8009a66:	f000 f805 	bl	8009a74 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009a6a:	69bb      	ldr	r3, [r7, #24]
	}
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	3720      	adds	r7, #32
 8009a70:	46bd      	mov	sp, r7
 8009a72:	bd80      	pop	{r7, pc}

08009a74 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b084      	sub	sp, #16
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	60f8      	str	r0, [r7, #12]
 8009a7c:	60b9      	str	r1, [r7, #8]
 8009a7e:	607a      	str	r2, [r7, #4]
 8009a80:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009a82:	68bb      	ldr	r3, [r7, #8]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d103      	bne.n	8009a90 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009a88:	69bb      	ldr	r3, [r7, #24]
 8009a8a:	69ba      	ldr	r2, [r7, #24]
 8009a8c:	601a      	str	r2, [r3, #0]
 8009a8e:	e002      	b.n	8009a96 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009a90:	69bb      	ldr	r3, [r7, #24]
 8009a92:	687a      	ldr	r2, [r7, #4]
 8009a94:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009a96:	69bb      	ldr	r3, [r7, #24]
 8009a98:	68fa      	ldr	r2, [r7, #12]
 8009a9a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009a9c:	69bb      	ldr	r3, [r7, #24]
 8009a9e:	68ba      	ldr	r2, [r7, #8]
 8009aa0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009aa2:	2101      	movs	r1, #1
 8009aa4:	69b8      	ldr	r0, [r7, #24]
 8009aa6:	f7ff fecb 	bl	8009840 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009aaa:	69bb      	ldr	r3, [r7, #24]
 8009aac:	78fa      	ldrb	r2, [r7, #3]
 8009aae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009ab2:	bf00      	nop
 8009ab4:	3710      	adds	r7, #16
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	bd80      	pop	{r7, pc}

08009aba <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8009aba:	b580      	push	{r7, lr}
 8009abc:	b082      	sub	sp, #8
 8009abe:	af00      	add	r7, sp, #0
 8009ac0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d00e      	beq.n	8009ae6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2200      	movs	r2, #0
 8009acc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8009ada:	2300      	movs	r3, #0
 8009adc:	2200      	movs	r2, #0
 8009ade:	2100      	movs	r1, #0
 8009ae0:	6878      	ldr	r0, [r7, #4]
 8009ae2:	f000 f90b 	bl	8009cfc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8009ae6:	bf00      	nop
 8009ae8:	3708      	adds	r7, #8
 8009aea:	46bd      	mov	sp, r7
 8009aec:	bd80      	pop	{r7, pc}

08009aee <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8009aee:	b580      	push	{r7, lr}
 8009af0:	b086      	sub	sp, #24
 8009af2:	af00      	add	r7, sp, #0
 8009af4:	4603      	mov	r3, r0
 8009af6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009af8:	2301      	movs	r3, #1
 8009afa:	617b      	str	r3, [r7, #20]
 8009afc:	2300      	movs	r3, #0
 8009afe:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8009b00:	79fb      	ldrb	r3, [r7, #7]
 8009b02:	461a      	mov	r2, r3
 8009b04:	6939      	ldr	r1, [r7, #16]
 8009b06:	6978      	ldr	r0, [r7, #20]
 8009b08:	f7ff ff7a 	bl	8009a00 <xQueueGenericCreate>
 8009b0c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009b0e:	68f8      	ldr	r0, [r7, #12]
 8009b10:	f7ff ffd3 	bl	8009aba <prvInitialiseMutex>

		return xNewQueue;
 8009b14:	68fb      	ldr	r3, [r7, #12]
	}
 8009b16:	4618      	mov	r0, r3
 8009b18:	3718      	adds	r7, #24
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	bd80      	pop	{r7, pc}

08009b1e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8009b1e:	b580      	push	{r7, lr}
 8009b20:	b088      	sub	sp, #32
 8009b22:	af02      	add	r7, sp, #8
 8009b24:	4603      	mov	r3, r0
 8009b26:	6039      	str	r1, [r7, #0]
 8009b28:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009b2a:	2301      	movs	r3, #1
 8009b2c:	617b      	str	r3, [r7, #20]
 8009b2e:	2300      	movs	r3, #0
 8009b30:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8009b32:	79fb      	ldrb	r3, [r7, #7]
 8009b34:	9300      	str	r3, [sp, #0]
 8009b36:	683b      	ldr	r3, [r7, #0]
 8009b38:	2200      	movs	r2, #0
 8009b3a:	6939      	ldr	r1, [r7, #16]
 8009b3c:	6978      	ldr	r0, [r7, #20]
 8009b3e:	f7ff fee7 	bl	8009910 <xQueueGenericCreateStatic>
 8009b42:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009b44:	68f8      	ldr	r0, [r7, #12]
 8009b46:	f7ff ffb8 	bl	8009aba <prvInitialiseMutex>

		return xNewQueue;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
	}
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	3718      	adds	r7, #24
 8009b50:	46bd      	mov	sp, r7
 8009b52:	bd80      	pop	{r7, pc}

08009b54 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8009b54:	b590      	push	{r4, r7, lr}
 8009b56:	b087      	sub	sp, #28
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8009b60:	693b      	ldr	r3, [r7, #16]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d10a      	bne.n	8009b7c <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8009b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b6a:	f383 8811 	msr	BASEPRI, r3
 8009b6e:	f3bf 8f6f 	isb	sy
 8009b72:	f3bf 8f4f 	dsb	sy
 8009b76:	60fb      	str	r3, [r7, #12]
}
 8009b78:	bf00      	nop
 8009b7a:	e7fe      	b.n	8009b7a <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8009b7c:	693b      	ldr	r3, [r7, #16]
 8009b7e:	689c      	ldr	r4, [r3, #8]
 8009b80:	f001 fd52 	bl	800b628 <xTaskGetCurrentTaskHandle>
 8009b84:	4603      	mov	r3, r0
 8009b86:	429c      	cmp	r4, r3
 8009b88:	d111      	bne.n	8009bae <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8009b8a:	693b      	ldr	r3, [r7, #16]
 8009b8c:	68db      	ldr	r3, [r3, #12]
 8009b8e:	1e5a      	subs	r2, r3, #1
 8009b90:	693b      	ldr	r3, [r7, #16]
 8009b92:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8009b94:	693b      	ldr	r3, [r7, #16]
 8009b96:	68db      	ldr	r3, [r3, #12]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d105      	bne.n	8009ba8 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	2100      	movs	r1, #0
 8009ba2:	6938      	ldr	r0, [r7, #16]
 8009ba4:	f000 f8aa 	bl	8009cfc <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8009ba8:	2301      	movs	r3, #1
 8009baa:	617b      	str	r3, [r7, #20]
 8009bac:	e001      	b.n	8009bb2 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8009bae:	2300      	movs	r3, #0
 8009bb0:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8009bb2:	697b      	ldr	r3, [r7, #20]
	}
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	371c      	adds	r7, #28
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	bd90      	pop	{r4, r7, pc}

08009bbc <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8009bbc:	b590      	push	{r4, r7, lr}
 8009bbe:	b087      	sub	sp, #28
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
 8009bc4:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8009bca:	693b      	ldr	r3, [r7, #16]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d10a      	bne.n	8009be6 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8009bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bd4:	f383 8811 	msr	BASEPRI, r3
 8009bd8:	f3bf 8f6f 	isb	sy
 8009bdc:	f3bf 8f4f 	dsb	sy
 8009be0:	60fb      	str	r3, [r7, #12]
}
 8009be2:	bf00      	nop
 8009be4:	e7fe      	b.n	8009be4 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8009be6:	693b      	ldr	r3, [r7, #16]
 8009be8:	689c      	ldr	r4, [r3, #8]
 8009bea:	f001 fd1d 	bl	800b628 <xTaskGetCurrentTaskHandle>
 8009bee:	4603      	mov	r3, r0
 8009bf0:	429c      	cmp	r4, r3
 8009bf2:	d107      	bne.n	8009c04 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8009bf4:	693b      	ldr	r3, [r7, #16]
 8009bf6:	68db      	ldr	r3, [r3, #12]
 8009bf8:	1c5a      	adds	r2, r3, #1
 8009bfa:	693b      	ldr	r3, [r7, #16]
 8009bfc:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8009bfe:	2301      	movs	r3, #1
 8009c00:	617b      	str	r3, [r7, #20]
 8009c02:	e00c      	b.n	8009c1e <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8009c04:	6839      	ldr	r1, [r7, #0]
 8009c06:	6938      	ldr	r0, [r7, #16]
 8009c08:	f000 fb7e 	bl	800a308 <xQueueSemaphoreTake>
 8009c0c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8009c0e:	697b      	ldr	r3, [r7, #20]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d004      	beq.n	8009c1e <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8009c14:	693b      	ldr	r3, [r7, #16]
 8009c16:	68db      	ldr	r3, [r3, #12]
 8009c18:	1c5a      	adds	r2, r3, #1
 8009c1a:	693b      	ldr	r3, [r7, #16]
 8009c1c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8009c1e:	697b      	ldr	r3, [r7, #20]
	}
 8009c20:	4618      	mov	r0, r3
 8009c22:	371c      	adds	r7, #28
 8009c24:	46bd      	mov	sp, r7
 8009c26:	bd90      	pop	{r4, r7, pc}

08009c28 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b08a      	sub	sp, #40	; 0x28
 8009c2c:	af02      	add	r7, sp, #8
 8009c2e:	60f8      	str	r0, [r7, #12]
 8009c30:	60b9      	str	r1, [r7, #8]
 8009c32:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d10a      	bne.n	8009c50 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8009c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c3e:	f383 8811 	msr	BASEPRI, r3
 8009c42:	f3bf 8f6f 	isb	sy
 8009c46:	f3bf 8f4f 	dsb	sy
 8009c4a:	61bb      	str	r3, [r7, #24]
}
 8009c4c:	bf00      	nop
 8009c4e:	e7fe      	b.n	8009c4e <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009c50:	68ba      	ldr	r2, [r7, #8]
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	429a      	cmp	r2, r3
 8009c56:	d90a      	bls.n	8009c6e <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8009c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c5c:	f383 8811 	msr	BASEPRI, r3
 8009c60:	f3bf 8f6f 	isb	sy
 8009c64:	f3bf 8f4f 	dsb	sy
 8009c68:	617b      	str	r3, [r7, #20]
}
 8009c6a:	bf00      	nop
 8009c6c:	e7fe      	b.n	8009c6c <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009c6e:	2302      	movs	r3, #2
 8009c70:	9300      	str	r3, [sp, #0]
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	2200      	movs	r2, #0
 8009c76:	2100      	movs	r1, #0
 8009c78:	68f8      	ldr	r0, [r7, #12]
 8009c7a:	f7ff fe49 	bl	8009910 <xQueueGenericCreateStatic>
 8009c7e:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8009c80:	69fb      	ldr	r3, [r7, #28]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d002      	beq.n	8009c8c <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009c86:	69fb      	ldr	r3, [r7, #28]
 8009c88:	68ba      	ldr	r2, [r7, #8]
 8009c8a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009c8c:	69fb      	ldr	r3, [r7, #28]
	}
 8009c8e:	4618      	mov	r0, r3
 8009c90:	3720      	adds	r7, #32
 8009c92:	46bd      	mov	sp, r7
 8009c94:	bd80      	pop	{r7, pc}

08009c96 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8009c96:	b580      	push	{r7, lr}
 8009c98:	b086      	sub	sp, #24
 8009c9a:	af00      	add	r7, sp, #0
 8009c9c:	6078      	str	r0, [r7, #4]
 8009c9e:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d10a      	bne.n	8009cbc <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8009ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009caa:	f383 8811 	msr	BASEPRI, r3
 8009cae:	f3bf 8f6f 	isb	sy
 8009cb2:	f3bf 8f4f 	dsb	sy
 8009cb6:	613b      	str	r3, [r7, #16]
}
 8009cb8:	bf00      	nop
 8009cba:	e7fe      	b.n	8009cba <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009cbc:	683a      	ldr	r2, [r7, #0]
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	429a      	cmp	r2, r3
 8009cc2:	d90a      	bls.n	8009cda <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8009cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cc8:	f383 8811 	msr	BASEPRI, r3
 8009ccc:	f3bf 8f6f 	isb	sy
 8009cd0:	f3bf 8f4f 	dsb	sy
 8009cd4:	60fb      	str	r3, [r7, #12]
}
 8009cd6:	bf00      	nop
 8009cd8:	e7fe      	b.n	8009cd8 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009cda:	2202      	movs	r2, #2
 8009cdc:	2100      	movs	r1, #0
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	f7ff fe8e 	bl	8009a00 <xQueueGenericCreate>
 8009ce4:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8009ce6:	697b      	ldr	r3, [r7, #20]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d002      	beq.n	8009cf2 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009cec:	697b      	ldr	r3, [r7, #20]
 8009cee:	683a      	ldr	r2, [r7, #0]
 8009cf0:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009cf2:	697b      	ldr	r3, [r7, #20]
	}
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	3718      	adds	r7, #24
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	bd80      	pop	{r7, pc}

08009cfc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b08e      	sub	sp, #56	; 0x38
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	60f8      	str	r0, [r7, #12]
 8009d04:	60b9      	str	r1, [r7, #8]
 8009d06:	607a      	str	r2, [r7, #4]
 8009d08:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d10a      	bne.n	8009d2e <xQueueGenericSend+0x32>
	__asm volatile
 8009d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d1c:	f383 8811 	msr	BASEPRI, r3
 8009d20:	f3bf 8f6f 	isb	sy
 8009d24:	f3bf 8f4f 	dsb	sy
 8009d28:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009d2a:	bf00      	nop
 8009d2c:	e7fe      	b.n	8009d2c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009d2e:	68bb      	ldr	r3, [r7, #8]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d103      	bne.n	8009d3c <xQueueGenericSend+0x40>
 8009d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d101      	bne.n	8009d40 <xQueueGenericSend+0x44>
 8009d3c:	2301      	movs	r3, #1
 8009d3e:	e000      	b.n	8009d42 <xQueueGenericSend+0x46>
 8009d40:	2300      	movs	r3, #0
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d10a      	bne.n	8009d5c <xQueueGenericSend+0x60>
	__asm volatile
 8009d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d4a:	f383 8811 	msr	BASEPRI, r3
 8009d4e:	f3bf 8f6f 	isb	sy
 8009d52:	f3bf 8f4f 	dsb	sy
 8009d56:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009d58:	bf00      	nop
 8009d5a:	e7fe      	b.n	8009d5a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	2b02      	cmp	r3, #2
 8009d60:	d103      	bne.n	8009d6a <xQueueGenericSend+0x6e>
 8009d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d66:	2b01      	cmp	r3, #1
 8009d68:	d101      	bne.n	8009d6e <xQueueGenericSend+0x72>
 8009d6a:	2301      	movs	r3, #1
 8009d6c:	e000      	b.n	8009d70 <xQueueGenericSend+0x74>
 8009d6e:	2300      	movs	r3, #0
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d10a      	bne.n	8009d8a <xQueueGenericSend+0x8e>
	__asm volatile
 8009d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d78:	f383 8811 	msr	BASEPRI, r3
 8009d7c:	f3bf 8f6f 	isb	sy
 8009d80:	f3bf 8f4f 	dsb	sy
 8009d84:	623b      	str	r3, [r7, #32]
}
 8009d86:	bf00      	nop
 8009d88:	e7fe      	b.n	8009d88 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009d8a:	f001 fc5d 	bl	800b648 <xTaskGetSchedulerState>
 8009d8e:	4603      	mov	r3, r0
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d102      	bne.n	8009d9a <xQueueGenericSend+0x9e>
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d101      	bne.n	8009d9e <xQueueGenericSend+0xa2>
 8009d9a:	2301      	movs	r3, #1
 8009d9c:	e000      	b.n	8009da0 <xQueueGenericSend+0xa4>
 8009d9e:	2300      	movs	r3, #0
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d10a      	bne.n	8009dba <xQueueGenericSend+0xbe>
	__asm volatile
 8009da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009da8:	f383 8811 	msr	BASEPRI, r3
 8009dac:	f3bf 8f6f 	isb	sy
 8009db0:	f3bf 8f4f 	dsb	sy
 8009db4:	61fb      	str	r3, [r7, #28]
}
 8009db6:	bf00      	nop
 8009db8:	e7fe      	b.n	8009db8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009dba:	f002 fb7b 	bl	800c4b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009dc6:	429a      	cmp	r2, r3
 8009dc8:	d302      	bcc.n	8009dd0 <xQueueGenericSend+0xd4>
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	2b02      	cmp	r3, #2
 8009dce:	d129      	bne.n	8009e24 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009dd0:	683a      	ldr	r2, [r7, #0]
 8009dd2:	68b9      	ldr	r1, [r7, #8]
 8009dd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009dd6:	f000 fc5e 	bl	800a696 <prvCopyDataToQueue>
 8009dda:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d010      	beq.n	8009e06 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009de6:	3324      	adds	r3, #36	; 0x24
 8009de8:	4618      	mov	r0, r3
 8009dea:	f001 fa5f 	bl	800b2ac <xTaskRemoveFromEventList>
 8009dee:	4603      	mov	r3, r0
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d013      	beq.n	8009e1c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009df4:	4b3f      	ldr	r3, [pc, #252]	; (8009ef4 <xQueueGenericSend+0x1f8>)
 8009df6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009dfa:	601a      	str	r2, [r3, #0]
 8009dfc:	f3bf 8f4f 	dsb	sy
 8009e00:	f3bf 8f6f 	isb	sy
 8009e04:	e00a      	b.n	8009e1c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d007      	beq.n	8009e1c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009e0c:	4b39      	ldr	r3, [pc, #228]	; (8009ef4 <xQueueGenericSend+0x1f8>)
 8009e0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e12:	601a      	str	r2, [r3, #0]
 8009e14:	f3bf 8f4f 	dsb	sy
 8009e18:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009e1c:	f002 fb7a 	bl	800c514 <vPortExitCritical>
				return pdPASS;
 8009e20:	2301      	movs	r3, #1
 8009e22:	e063      	b.n	8009eec <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d103      	bne.n	8009e32 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009e2a:	f002 fb73 	bl	800c514 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009e2e:	2300      	movs	r3, #0
 8009e30:	e05c      	b.n	8009eec <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009e32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d106      	bne.n	8009e46 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009e38:	f107 0314 	add.w	r3, r7, #20
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	f001 fa99 	bl	800b374 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009e42:	2301      	movs	r3, #1
 8009e44:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009e46:	f002 fb65 	bl	800c514 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009e4a:	f000 fff9 	bl	800ae40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009e4e:	f002 fb31 	bl	800c4b4 <vPortEnterCritical>
 8009e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009e58:	b25b      	sxtb	r3, r3
 8009e5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e5e:	d103      	bne.n	8009e68 <xQueueGenericSend+0x16c>
 8009e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e62:	2200      	movs	r2, #0
 8009e64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009e6e:	b25b      	sxtb	r3, r3
 8009e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e74:	d103      	bne.n	8009e7e <xQueueGenericSend+0x182>
 8009e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e78:	2200      	movs	r2, #0
 8009e7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009e7e:	f002 fb49 	bl	800c514 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009e82:	1d3a      	adds	r2, r7, #4
 8009e84:	f107 0314 	add.w	r3, r7, #20
 8009e88:	4611      	mov	r1, r2
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	f001 fa88 	bl	800b3a0 <xTaskCheckForTimeOut>
 8009e90:	4603      	mov	r3, r0
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d124      	bne.n	8009ee0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009e96:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009e98:	f000 fcf5 	bl	800a886 <prvIsQueueFull>
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d018      	beq.n	8009ed4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ea4:	3310      	adds	r3, #16
 8009ea6:	687a      	ldr	r2, [r7, #4]
 8009ea8:	4611      	mov	r1, r2
 8009eaa:	4618      	mov	r0, r3
 8009eac:	f001 f9ae 	bl	800b20c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009eb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009eb2:	f000 fc80 	bl	800a7b6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009eb6:	f000 ffd1 	bl	800ae5c <xTaskResumeAll>
 8009eba:	4603      	mov	r3, r0
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	f47f af7c 	bne.w	8009dba <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009ec2:	4b0c      	ldr	r3, [pc, #48]	; (8009ef4 <xQueueGenericSend+0x1f8>)
 8009ec4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ec8:	601a      	str	r2, [r3, #0]
 8009eca:	f3bf 8f4f 	dsb	sy
 8009ece:	f3bf 8f6f 	isb	sy
 8009ed2:	e772      	b.n	8009dba <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009ed4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009ed6:	f000 fc6e 	bl	800a7b6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009eda:	f000 ffbf 	bl	800ae5c <xTaskResumeAll>
 8009ede:	e76c      	b.n	8009dba <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009ee0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009ee2:	f000 fc68 	bl	800a7b6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009ee6:	f000 ffb9 	bl	800ae5c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009eea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009eec:	4618      	mov	r0, r3
 8009eee:	3738      	adds	r7, #56	; 0x38
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	bd80      	pop	{r7, pc}
 8009ef4:	e000ed04 	.word	0xe000ed04

08009ef8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b090      	sub	sp, #64	; 0x40
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	60f8      	str	r0, [r7, #12]
 8009f00:	60b9      	str	r1, [r7, #8]
 8009f02:	607a      	str	r2, [r7, #4]
 8009f04:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d10a      	bne.n	8009f26 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f14:	f383 8811 	msr	BASEPRI, r3
 8009f18:	f3bf 8f6f 	isb	sy
 8009f1c:	f3bf 8f4f 	dsb	sy
 8009f20:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009f22:	bf00      	nop
 8009f24:	e7fe      	b.n	8009f24 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009f26:	68bb      	ldr	r3, [r7, #8]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d103      	bne.n	8009f34 <xQueueGenericSendFromISR+0x3c>
 8009f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d101      	bne.n	8009f38 <xQueueGenericSendFromISR+0x40>
 8009f34:	2301      	movs	r3, #1
 8009f36:	e000      	b.n	8009f3a <xQueueGenericSendFromISR+0x42>
 8009f38:	2300      	movs	r3, #0
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d10a      	bne.n	8009f54 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f42:	f383 8811 	msr	BASEPRI, r3
 8009f46:	f3bf 8f6f 	isb	sy
 8009f4a:	f3bf 8f4f 	dsb	sy
 8009f4e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009f50:	bf00      	nop
 8009f52:	e7fe      	b.n	8009f52 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	2b02      	cmp	r3, #2
 8009f58:	d103      	bne.n	8009f62 <xQueueGenericSendFromISR+0x6a>
 8009f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f5e:	2b01      	cmp	r3, #1
 8009f60:	d101      	bne.n	8009f66 <xQueueGenericSendFromISR+0x6e>
 8009f62:	2301      	movs	r3, #1
 8009f64:	e000      	b.n	8009f68 <xQueueGenericSendFromISR+0x70>
 8009f66:	2300      	movs	r3, #0
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d10a      	bne.n	8009f82 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f70:	f383 8811 	msr	BASEPRI, r3
 8009f74:	f3bf 8f6f 	isb	sy
 8009f78:	f3bf 8f4f 	dsb	sy
 8009f7c:	623b      	str	r3, [r7, #32]
}
 8009f7e:	bf00      	nop
 8009f80:	e7fe      	b.n	8009f80 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009f82:	f002 fb79 	bl	800c678 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009f86:	f3ef 8211 	mrs	r2, BASEPRI
 8009f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f8e:	f383 8811 	msr	BASEPRI, r3
 8009f92:	f3bf 8f6f 	isb	sy
 8009f96:	f3bf 8f4f 	dsb	sy
 8009f9a:	61fa      	str	r2, [r7, #28]
 8009f9c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009f9e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009fa0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fa4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009faa:	429a      	cmp	r2, r3
 8009fac:	d302      	bcc.n	8009fb4 <xQueueGenericSendFromISR+0xbc>
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	2b02      	cmp	r3, #2
 8009fb2:	d12f      	bne.n	800a014 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fb6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009fba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009fc4:	683a      	ldr	r2, [r7, #0]
 8009fc6:	68b9      	ldr	r1, [r7, #8]
 8009fc8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009fca:	f000 fb64 	bl	800a696 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009fce:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fd6:	d112      	bne.n	8009ffe <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d016      	beq.n	800a00e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fe2:	3324      	adds	r3, #36	; 0x24
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	f001 f961 	bl	800b2ac <xTaskRemoveFromEventList>
 8009fea:	4603      	mov	r3, r0
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d00e      	beq.n	800a00e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d00b      	beq.n	800a00e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	2201      	movs	r2, #1
 8009ffa:	601a      	str	r2, [r3, #0]
 8009ffc:	e007      	b.n	800a00e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009ffe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a002:	3301      	adds	r3, #1
 800a004:	b2db      	uxtb	r3, r3
 800a006:	b25a      	sxtb	r2, r3
 800a008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a00a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a00e:	2301      	movs	r3, #1
 800a010:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a012:	e001      	b.n	800a018 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a014:	2300      	movs	r3, #0
 800a016:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a01a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a01c:	697b      	ldr	r3, [r7, #20]
 800a01e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a022:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a024:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a026:	4618      	mov	r0, r3
 800a028:	3740      	adds	r7, #64	; 0x40
 800a02a:	46bd      	mov	sp, r7
 800a02c:	bd80      	pop	{r7, pc}

0800a02e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a02e:	b580      	push	{r7, lr}
 800a030:	b08e      	sub	sp, #56	; 0x38
 800a032:	af00      	add	r7, sp, #0
 800a034:	6078      	str	r0, [r7, #4]
 800a036:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a03c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d10a      	bne.n	800a058 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800a042:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a046:	f383 8811 	msr	BASEPRI, r3
 800a04a:	f3bf 8f6f 	isb	sy
 800a04e:	f3bf 8f4f 	dsb	sy
 800a052:	623b      	str	r3, [r7, #32]
}
 800a054:	bf00      	nop
 800a056:	e7fe      	b.n	800a056 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a05a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d00a      	beq.n	800a076 <xQueueGiveFromISR+0x48>
	__asm volatile
 800a060:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a064:	f383 8811 	msr	BASEPRI, r3
 800a068:	f3bf 8f6f 	isb	sy
 800a06c:	f3bf 8f4f 	dsb	sy
 800a070:	61fb      	str	r3, [r7, #28]
}
 800a072:	bf00      	nop
 800a074:	e7fe      	b.n	800a074 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d103      	bne.n	800a086 <xQueueGiveFromISR+0x58>
 800a07e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a080:	689b      	ldr	r3, [r3, #8]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d101      	bne.n	800a08a <xQueueGiveFromISR+0x5c>
 800a086:	2301      	movs	r3, #1
 800a088:	e000      	b.n	800a08c <xQueueGiveFromISR+0x5e>
 800a08a:	2300      	movs	r3, #0
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d10a      	bne.n	800a0a6 <xQueueGiveFromISR+0x78>
	__asm volatile
 800a090:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a094:	f383 8811 	msr	BASEPRI, r3
 800a098:	f3bf 8f6f 	isb	sy
 800a09c:	f3bf 8f4f 	dsb	sy
 800a0a0:	61bb      	str	r3, [r7, #24]
}
 800a0a2:	bf00      	nop
 800a0a4:	e7fe      	b.n	800a0a4 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a0a6:	f002 fae7 	bl	800c678 <vPortValidateInterruptPriority>
	__asm volatile
 800a0aa:	f3ef 8211 	mrs	r2, BASEPRI
 800a0ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0b2:	f383 8811 	msr	BASEPRI, r3
 800a0b6:	f3bf 8f6f 	isb	sy
 800a0ba:	f3bf 8f4f 	dsb	sy
 800a0be:	617a      	str	r2, [r7, #20]
 800a0c0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a0c2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a0c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a0c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0ca:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a0cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a0d2:	429a      	cmp	r2, r3
 800a0d4:	d22b      	bcs.n	800a12e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a0d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a0dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a0e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0e2:	1c5a      	adds	r2, r3, #1
 800a0e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0e6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a0e8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a0ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0f0:	d112      	bne.n	800a118 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a0f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d016      	beq.n	800a128 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a0fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0fc:	3324      	adds	r3, #36	; 0x24
 800a0fe:	4618      	mov	r0, r3
 800a100:	f001 f8d4 	bl	800b2ac <xTaskRemoveFromEventList>
 800a104:	4603      	mov	r3, r0
 800a106:	2b00      	cmp	r3, #0
 800a108:	d00e      	beq.n	800a128 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d00b      	beq.n	800a128 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a110:	683b      	ldr	r3, [r7, #0]
 800a112:	2201      	movs	r2, #1
 800a114:	601a      	str	r2, [r3, #0]
 800a116:	e007      	b.n	800a128 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a118:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a11c:	3301      	adds	r3, #1
 800a11e:	b2db      	uxtb	r3, r3
 800a120:	b25a      	sxtb	r2, r3
 800a122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a124:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a128:	2301      	movs	r3, #1
 800a12a:	637b      	str	r3, [r7, #52]	; 0x34
 800a12c:	e001      	b.n	800a132 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a12e:	2300      	movs	r3, #0
 800a130:	637b      	str	r3, [r7, #52]	; 0x34
 800a132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a134:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	f383 8811 	msr	BASEPRI, r3
}
 800a13c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a13e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a140:	4618      	mov	r0, r3
 800a142:	3738      	adds	r7, #56	; 0x38
 800a144:	46bd      	mov	sp, r7
 800a146:	bd80      	pop	{r7, pc}

0800a148 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b08c      	sub	sp, #48	; 0x30
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	60f8      	str	r0, [r7, #12]
 800a150:	60b9      	str	r1, [r7, #8]
 800a152:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a154:	2300      	movs	r3, #0
 800a156:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a15c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d10a      	bne.n	800a178 <xQueueReceive+0x30>
	__asm volatile
 800a162:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a166:	f383 8811 	msr	BASEPRI, r3
 800a16a:	f3bf 8f6f 	isb	sy
 800a16e:	f3bf 8f4f 	dsb	sy
 800a172:	623b      	str	r3, [r7, #32]
}
 800a174:	bf00      	nop
 800a176:	e7fe      	b.n	800a176 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a178:	68bb      	ldr	r3, [r7, #8]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d103      	bne.n	800a186 <xQueueReceive+0x3e>
 800a17e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a182:	2b00      	cmp	r3, #0
 800a184:	d101      	bne.n	800a18a <xQueueReceive+0x42>
 800a186:	2301      	movs	r3, #1
 800a188:	e000      	b.n	800a18c <xQueueReceive+0x44>
 800a18a:	2300      	movs	r3, #0
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d10a      	bne.n	800a1a6 <xQueueReceive+0x5e>
	__asm volatile
 800a190:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a194:	f383 8811 	msr	BASEPRI, r3
 800a198:	f3bf 8f6f 	isb	sy
 800a19c:	f3bf 8f4f 	dsb	sy
 800a1a0:	61fb      	str	r3, [r7, #28]
}
 800a1a2:	bf00      	nop
 800a1a4:	e7fe      	b.n	800a1a4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a1a6:	f001 fa4f 	bl	800b648 <xTaskGetSchedulerState>
 800a1aa:	4603      	mov	r3, r0
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d102      	bne.n	800a1b6 <xQueueReceive+0x6e>
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d101      	bne.n	800a1ba <xQueueReceive+0x72>
 800a1b6:	2301      	movs	r3, #1
 800a1b8:	e000      	b.n	800a1bc <xQueueReceive+0x74>
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d10a      	bne.n	800a1d6 <xQueueReceive+0x8e>
	__asm volatile
 800a1c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1c4:	f383 8811 	msr	BASEPRI, r3
 800a1c8:	f3bf 8f6f 	isb	sy
 800a1cc:	f3bf 8f4f 	dsb	sy
 800a1d0:	61bb      	str	r3, [r7, #24]
}
 800a1d2:	bf00      	nop
 800a1d4:	e7fe      	b.n	800a1d4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a1d6:	f002 f96d 	bl	800c4b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a1da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1de:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a1e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d01f      	beq.n	800a226 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a1e6:	68b9      	ldr	r1, [r7, #8]
 800a1e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a1ea:	f000 fabe 	bl	800a76a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a1ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1f0:	1e5a      	subs	r2, r3, #1
 800a1f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1f4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a1f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1f8:	691b      	ldr	r3, [r3, #16]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d00f      	beq.n	800a21e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a1fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a200:	3310      	adds	r3, #16
 800a202:	4618      	mov	r0, r3
 800a204:	f001 f852 	bl	800b2ac <xTaskRemoveFromEventList>
 800a208:	4603      	mov	r3, r0
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d007      	beq.n	800a21e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a20e:	4b3d      	ldr	r3, [pc, #244]	; (800a304 <xQueueReceive+0x1bc>)
 800a210:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a214:	601a      	str	r2, [r3, #0]
 800a216:	f3bf 8f4f 	dsb	sy
 800a21a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a21e:	f002 f979 	bl	800c514 <vPortExitCritical>
				return pdPASS;
 800a222:	2301      	movs	r3, #1
 800a224:	e069      	b.n	800a2fa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d103      	bne.n	800a234 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a22c:	f002 f972 	bl	800c514 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a230:	2300      	movs	r3, #0
 800a232:	e062      	b.n	800a2fa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a236:	2b00      	cmp	r3, #0
 800a238:	d106      	bne.n	800a248 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a23a:	f107 0310 	add.w	r3, r7, #16
 800a23e:	4618      	mov	r0, r3
 800a240:	f001 f898 	bl	800b374 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a244:	2301      	movs	r3, #1
 800a246:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a248:	f002 f964 	bl	800c514 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a24c:	f000 fdf8 	bl	800ae40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a250:	f002 f930 	bl	800c4b4 <vPortEnterCritical>
 800a254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a256:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a25a:	b25b      	sxtb	r3, r3
 800a25c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a260:	d103      	bne.n	800a26a <xQueueReceive+0x122>
 800a262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a264:	2200      	movs	r2, #0
 800a266:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a26a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a26c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a270:	b25b      	sxtb	r3, r3
 800a272:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a276:	d103      	bne.n	800a280 <xQueueReceive+0x138>
 800a278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a27a:	2200      	movs	r2, #0
 800a27c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a280:	f002 f948 	bl	800c514 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a284:	1d3a      	adds	r2, r7, #4
 800a286:	f107 0310 	add.w	r3, r7, #16
 800a28a:	4611      	mov	r1, r2
 800a28c:	4618      	mov	r0, r3
 800a28e:	f001 f887 	bl	800b3a0 <xTaskCheckForTimeOut>
 800a292:	4603      	mov	r3, r0
 800a294:	2b00      	cmp	r3, #0
 800a296:	d123      	bne.n	800a2e0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a298:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a29a:	f000 fade 	bl	800a85a <prvIsQueueEmpty>
 800a29e:	4603      	mov	r3, r0
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d017      	beq.n	800a2d4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a2a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2a6:	3324      	adds	r3, #36	; 0x24
 800a2a8:	687a      	ldr	r2, [r7, #4]
 800a2aa:	4611      	mov	r1, r2
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	f000 ffad 	bl	800b20c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a2b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a2b4:	f000 fa7f 	bl	800a7b6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a2b8:	f000 fdd0 	bl	800ae5c <xTaskResumeAll>
 800a2bc:	4603      	mov	r3, r0
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d189      	bne.n	800a1d6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a2c2:	4b10      	ldr	r3, [pc, #64]	; (800a304 <xQueueReceive+0x1bc>)
 800a2c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2c8:	601a      	str	r2, [r3, #0]
 800a2ca:	f3bf 8f4f 	dsb	sy
 800a2ce:	f3bf 8f6f 	isb	sy
 800a2d2:	e780      	b.n	800a1d6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a2d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a2d6:	f000 fa6e 	bl	800a7b6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a2da:	f000 fdbf 	bl	800ae5c <xTaskResumeAll>
 800a2de:	e77a      	b.n	800a1d6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a2e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a2e2:	f000 fa68 	bl	800a7b6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a2e6:	f000 fdb9 	bl	800ae5c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a2ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a2ec:	f000 fab5 	bl	800a85a <prvIsQueueEmpty>
 800a2f0:	4603      	mov	r3, r0
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	f43f af6f 	beq.w	800a1d6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a2f8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	3730      	adds	r7, #48	; 0x30
 800a2fe:	46bd      	mov	sp, r7
 800a300:	bd80      	pop	{r7, pc}
 800a302:	bf00      	nop
 800a304:	e000ed04 	.word	0xe000ed04

0800a308 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b08e      	sub	sp, #56	; 0x38
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
 800a310:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a312:	2300      	movs	r3, #0
 800a314:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a31a:	2300      	movs	r3, #0
 800a31c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a31e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a320:	2b00      	cmp	r3, #0
 800a322:	d10a      	bne.n	800a33a <xQueueSemaphoreTake+0x32>
	__asm volatile
 800a324:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a328:	f383 8811 	msr	BASEPRI, r3
 800a32c:	f3bf 8f6f 	isb	sy
 800a330:	f3bf 8f4f 	dsb	sy
 800a334:	623b      	str	r3, [r7, #32]
}
 800a336:	bf00      	nop
 800a338:	e7fe      	b.n	800a338 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a33a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a33c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d00a      	beq.n	800a358 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800a342:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a346:	f383 8811 	msr	BASEPRI, r3
 800a34a:	f3bf 8f6f 	isb	sy
 800a34e:	f3bf 8f4f 	dsb	sy
 800a352:	61fb      	str	r3, [r7, #28]
}
 800a354:	bf00      	nop
 800a356:	e7fe      	b.n	800a356 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a358:	f001 f976 	bl	800b648 <xTaskGetSchedulerState>
 800a35c:	4603      	mov	r3, r0
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d102      	bne.n	800a368 <xQueueSemaphoreTake+0x60>
 800a362:	683b      	ldr	r3, [r7, #0]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d101      	bne.n	800a36c <xQueueSemaphoreTake+0x64>
 800a368:	2301      	movs	r3, #1
 800a36a:	e000      	b.n	800a36e <xQueueSemaphoreTake+0x66>
 800a36c:	2300      	movs	r3, #0
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d10a      	bne.n	800a388 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800a372:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a376:	f383 8811 	msr	BASEPRI, r3
 800a37a:	f3bf 8f6f 	isb	sy
 800a37e:	f3bf 8f4f 	dsb	sy
 800a382:	61bb      	str	r3, [r7, #24]
}
 800a384:	bf00      	nop
 800a386:	e7fe      	b.n	800a386 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a388:	f002 f894 	bl	800c4b4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a38c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a38e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a390:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a394:	2b00      	cmp	r3, #0
 800a396:	d024      	beq.n	800a3e2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a39a:	1e5a      	subs	r2, r3, #1
 800a39c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a39e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a3a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d104      	bne.n	800a3b2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a3a8:	f001 fac4 	bl	800b934 <pvTaskIncrementMutexHeldCount>
 800a3ac:	4602      	mov	r2, r0
 800a3ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3b0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a3b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3b4:	691b      	ldr	r3, [r3, #16]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d00f      	beq.n	800a3da <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a3ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3bc:	3310      	adds	r3, #16
 800a3be:	4618      	mov	r0, r3
 800a3c0:	f000 ff74 	bl	800b2ac <xTaskRemoveFromEventList>
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d007      	beq.n	800a3da <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a3ca:	4b54      	ldr	r3, [pc, #336]	; (800a51c <xQueueSemaphoreTake+0x214>)
 800a3cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3d0:	601a      	str	r2, [r3, #0]
 800a3d2:	f3bf 8f4f 	dsb	sy
 800a3d6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a3da:	f002 f89b 	bl	800c514 <vPortExitCritical>
				return pdPASS;
 800a3de:	2301      	movs	r3, #1
 800a3e0:	e097      	b.n	800a512 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a3e2:	683b      	ldr	r3, [r7, #0]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d111      	bne.n	800a40c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a3e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d00a      	beq.n	800a404 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800a3ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3f2:	f383 8811 	msr	BASEPRI, r3
 800a3f6:	f3bf 8f6f 	isb	sy
 800a3fa:	f3bf 8f4f 	dsb	sy
 800a3fe:	617b      	str	r3, [r7, #20]
}
 800a400:	bf00      	nop
 800a402:	e7fe      	b.n	800a402 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a404:	f002 f886 	bl	800c514 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a408:	2300      	movs	r3, #0
 800a40a:	e082      	b.n	800a512 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a40c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d106      	bne.n	800a420 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a412:	f107 030c 	add.w	r3, r7, #12
 800a416:	4618      	mov	r0, r3
 800a418:	f000 ffac 	bl	800b374 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a41c:	2301      	movs	r3, #1
 800a41e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a420:	f002 f878 	bl	800c514 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a424:	f000 fd0c 	bl	800ae40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a428:	f002 f844 	bl	800c4b4 <vPortEnterCritical>
 800a42c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a42e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a432:	b25b      	sxtb	r3, r3
 800a434:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a438:	d103      	bne.n	800a442 <xQueueSemaphoreTake+0x13a>
 800a43a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a43c:	2200      	movs	r2, #0
 800a43e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a444:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a448:	b25b      	sxtb	r3, r3
 800a44a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a44e:	d103      	bne.n	800a458 <xQueueSemaphoreTake+0x150>
 800a450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a452:	2200      	movs	r2, #0
 800a454:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a458:	f002 f85c 	bl	800c514 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a45c:	463a      	mov	r2, r7
 800a45e:	f107 030c 	add.w	r3, r7, #12
 800a462:	4611      	mov	r1, r2
 800a464:	4618      	mov	r0, r3
 800a466:	f000 ff9b 	bl	800b3a0 <xTaskCheckForTimeOut>
 800a46a:	4603      	mov	r3, r0
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d132      	bne.n	800a4d6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a470:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a472:	f000 f9f2 	bl	800a85a <prvIsQueueEmpty>
 800a476:	4603      	mov	r3, r0
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d026      	beq.n	800a4ca <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a47c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	2b00      	cmp	r3, #0
 800a482:	d109      	bne.n	800a498 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800a484:	f002 f816 	bl	800c4b4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a48a:	689b      	ldr	r3, [r3, #8]
 800a48c:	4618      	mov	r0, r3
 800a48e:	f001 f8f9 	bl	800b684 <xTaskPriorityInherit>
 800a492:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800a494:	f002 f83e 	bl	800c514 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a49a:	3324      	adds	r3, #36	; 0x24
 800a49c:	683a      	ldr	r2, [r7, #0]
 800a49e:	4611      	mov	r1, r2
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	f000 feb3 	bl	800b20c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a4a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a4a8:	f000 f985 	bl	800a7b6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a4ac:	f000 fcd6 	bl	800ae5c <xTaskResumeAll>
 800a4b0:	4603      	mov	r3, r0
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	f47f af68 	bne.w	800a388 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800a4b8:	4b18      	ldr	r3, [pc, #96]	; (800a51c <xQueueSemaphoreTake+0x214>)
 800a4ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4be:	601a      	str	r2, [r3, #0]
 800a4c0:	f3bf 8f4f 	dsb	sy
 800a4c4:	f3bf 8f6f 	isb	sy
 800a4c8:	e75e      	b.n	800a388 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a4ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a4cc:	f000 f973 	bl	800a7b6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a4d0:	f000 fcc4 	bl	800ae5c <xTaskResumeAll>
 800a4d4:	e758      	b.n	800a388 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a4d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a4d8:	f000 f96d 	bl	800a7b6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a4dc:	f000 fcbe 	bl	800ae5c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a4e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a4e2:	f000 f9ba 	bl	800a85a <prvIsQueueEmpty>
 800a4e6:	4603      	mov	r3, r0
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	f43f af4d 	beq.w	800a388 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a4ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d00d      	beq.n	800a510 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800a4f4:	f001 ffde 	bl	800c4b4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a4f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a4fa:	f000 f8b4 	bl	800a666 <prvGetDisinheritPriorityAfterTimeout>
 800a4fe:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a502:	689b      	ldr	r3, [r3, #8]
 800a504:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a506:	4618      	mov	r0, r3
 800a508:	f001 f992 	bl	800b830 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a50c:	f002 f802 	bl	800c514 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a510:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a512:	4618      	mov	r0, r3
 800a514:	3738      	adds	r7, #56	; 0x38
 800a516:	46bd      	mov	sp, r7
 800a518:	bd80      	pop	{r7, pc}
 800a51a:	bf00      	nop
 800a51c:	e000ed04 	.word	0xe000ed04

0800a520 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b08e      	sub	sp, #56	; 0x38
 800a524:	af00      	add	r7, sp, #0
 800a526:	60f8      	str	r0, [r7, #12]
 800a528:	60b9      	str	r1, [r7, #8]
 800a52a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a532:	2b00      	cmp	r3, #0
 800a534:	d10a      	bne.n	800a54c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800a536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a53a:	f383 8811 	msr	BASEPRI, r3
 800a53e:	f3bf 8f6f 	isb	sy
 800a542:	f3bf 8f4f 	dsb	sy
 800a546:	623b      	str	r3, [r7, #32]
}
 800a548:	bf00      	nop
 800a54a:	e7fe      	b.n	800a54a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a54c:	68bb      	ldr	r3, [r7, #8]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d103      	bne.n	800a55a <xQueueReceiveFromISR+0x3a>
 800a552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a556:	2b00      	cmp	r3, #0
 800a558:	d101      	bne.n	800a55e <xQueueReceiveFromISR+0x3e>
 800a55a:	2301      	movs	r3, #1
 800a55c:	e000      	b.n	800a560 <xQueueReceiveFromISR+0x40>
 800a55e:	2300      	movs	r3, #0
 800a560:	2b00      	cmp	r3, #0
 800a562:	d10a      	bne.n	800a57a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800a564:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a568:	f383 8811 	msr	BASEPRI, r3
 800a56c:	f3bf 8f6f 	isb	sy
 800a570:	f3bf 8f4f 	dsb	sy
 800a574:	61fb      	str	r3, [r7, #28]
}
 800a576:	bf00      	nop
 800a578:	e7fe      	b.n	800a578 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a57a:	f002 f87d 	bl	800c678 <vPortValidateInterruptPriority>
	__asm volatile
 800a57e:	f3ef 8211 	mrs	r2, BASEPRI
 800a582:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a586:	f383 8811 	msr	BASEPRI, r3
 800a58a:	f3bf 8f6f 	isb	sy
 800a58e:	f3bf 8f4f 	dsb	sy
 800a592:	61ba      	str	r2, [r7, #24]
 800a594:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a596:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a598:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a59a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a59c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a59e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a5a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d02f      	beq.n	800a606 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a5a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a5ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a5b0:	68b9      	ldr	r1, [r7, #8]
 800a5b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a5b4:	f000 f8d9 	bl	800a76a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a5b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5ba:	1e5a      	subs	r2, r3, #1
 800a5bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5be:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a5c0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a5c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5c8:	d112      	bne.n	800a5f0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a5ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5cc:	691b      	ldr	r3, [r3, #16]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d016      	beq.n	800a600 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a5d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5d4:	3310      	adds	r3, #16
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	f000 fe68 	bl	800b2ac <xTaskRemoveFromEventList>
 800a5dc:	4603      	mov	r3, r0
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d00e      	beq.n	800a600 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d00b      	beq.n	800a600 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2201      	movs	r2, #1
 800a5ec:	601a      	str	r2, [r3, #0]
 800a5ee:	e007      	b.n	800a600 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a5f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a5f4:	3301      	adds	r3, #1
 800a5f6:	b2db      	uxtb	r3, r3
 800a5f8:	b25a      	sxtb	r2, r3
 800a5fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800a600:	2301      	movs	r3, #1
 800a602:	637b      	str	r3, [r7, #52]	; 0x34
 800a604:	e001      	b.n	800a60a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800a606:	2300      	movs	r3, #0
 800a608:	637b      	str	r3, [r7, #52]	; 0x34
 800a60a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a60c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a60e:	693b      	ldr	r3, [r7, #16]
 800a610:	f383 8811 	msr	BASEPRI, r3
}
 800a614:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a618:	4618      	mov	r0, r3
 800a61a:	3738      	adds	r7, #56	; 0x38
 800a61c:	46bd      	mov	sp, r7
 800a61e:	bd80      	pop	{r7, pc}

0800a620 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b084      	sub	sp, #16
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d10a      	bne.n	800a648 <vQueueDelete+0x28>
	__asm volatile
 800a632:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a636:	f383 8811 	msr	BASEPRI, r3
 800a63a:	f3bf 8f6f 	isb	sy
 800a63e:	f3bf 8f4f 	dsb	sy
 800a642:	60bb      	str	r3, [r7, #8]
}
 800a644:	bf00      	nop
 800a646:	e7fe      	b.n	800a646 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800a648:	68f8      	ldr	r0, [r7, #12]
 800a64a:	f000 f95f 	bl	800a90c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a654:	2b00      	cmp	r3, #0
 800a656:	d102      	bne.n	800a65e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800a658:	68f8      	ldr	r0, [r7, #12]
 800a65a:	f002 f919 	bl	800c890 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800a65e:	bf00      	nop
 800a660:	3710      	adds	r7, #16
 800a662:	46bd      	mov	sp, r7
 800a664:	bd80      	pop	{r7, pc}

0800a666 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a666:	b480      	push	{r7}
 800a668:	b085      	sub	sp, #20
 800a66a:	af00      	add	r7, sp, #0
 800a66c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a672:	2b00      	cmp	r3, #0
 800a674:	d006      	beq.n	800a684 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800a680:	60fb      	str	r3, [r7, #12]
 800a682:	e001      	b.n	800a688 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a684:	2300      	movs	r3, #0
 800a686:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a688:	68fb      	ldr	r3, [r7, #12]
	}
 800a68a:	4618      	mov	r0, r3
 800a68c:	3714      	adds	r7, #20
 800a68e:	46bd      	mov	sp, r7
 800a690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a694:	4770      	bx	lr

0800a696 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a696:	b580      	push	{r7, lr}
 800a698:	b086      	sub	sp, #24
 800a69a:	af00      	add	r7, sp, #0
 800a69c:	60f8      	str	r0, [r7, #12]
 800a69e:	60b9      	str	r1, [r7, #8]
 800a6a0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6aa:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d10d      	bne.n	800a6d0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d14d      	bne.n	800a758 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	689b      	ldr	r3, [r3, #8]
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	f001 f847 	bl	800b754 <xTaskPriorityDisinherit>
 800a6c6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	609a      	str	r2, [r3, #8]
 800a6ce:	e043      	b.n	800a758 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d119      	bne.n	800a70a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	6858      	ldr	r0, [r3, #4]
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6de:	461a      	mov	r2, r3
 800a6e0:	68b9      	ldr	r1, [r7, #8]
 800a6e2:	f00e fc43 	bl	8018f6c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	685a      	ldr	r2, [r3, #4]
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6ee:	441a      	add	r2, r3
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	685a      	ldr	r2, [r3, #4]
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	689b      	ldr	r3, [r3, #8]
 800a6fc:	429a      	cmp	r2, r3
 800a6fe:	d32b      	bcc.n	800a758 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	681a      	ldr	r2, [r3, #0]
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	605a      	str	r2, [r3, #4]
 800a708:	e026      	b.n	800a758 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	68d8      	ldr	r0, [r3, #12]
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a712:	461a      	mov	r2, r3
 800a714:	68b9      	ldr	r1, [r7, #8]
 800a716:	f00e fc29 	bl	8018f6c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	68da      	ldr	r2, [r3, #12]
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a722:	425b      	negs	r3, r3
 800a724:	441a      	add	r2, r3
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	68da      	ldr	r2, [r3, #12]
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	429a      	cmp	r2, r3
 800a734:	d207      	bcs.n	800a746 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	689a      	ldr	r2, [r3, #8]
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a73e:	425b      	negs	r3, r3
 800a740:	441a      	add	r2, r3
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	2b02      	cmp	r3, #2
 800a74a:	d105      	bne.n	800a758 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a74c:	693b      	ldr	r3, [r7, #16]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d002      	beq.n	800a758 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a752:	693b      	ldr	r3, [r7, #16]
 800a754:	3b01      	subs	r3, #1
 800a756:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a758:	693b      	ldr	r3, [r7, #16]
 800a75a:	1c5a      	adds	r2, r3, #1
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a760:	697b      	ldr	r3, [r7, #20]
}
 800a762:	4618      	mov	r0, r3
 800a764:	3718      	adds	r7, #24
 800a766:	46bd      	mov	sp, r7
 800a768:	bd80      	pop	{r7, pc}

0800a76a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a76a:	b580      	push	{r7, lr}
 800a76c:	b082      	sub	sp, #8
 800a76e:	af00      	add	r7, sp, #0
 800a770:	6078      	str	r0, [r7, #4]
 800a772:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d018      	beq.n	800a7ae <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	68da      	ldr	r2, [r3, #12]
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a784:	441a      	add	r2, r3
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	68da      	ldr	r2, [r3, #12]
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	689b      	ldr	r3, [r3, #8]
 800a792:	429a      	cmp	r2, r3
 800a794:	d303      	bcc.n	800a79e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681a      	ldr	r2, [r3, #0]
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	68d9      	ldr	r1, [r3, #12]
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7a6:	461a      	mov	r2, r3
 800a7a8:	6838      	ldr	r0, [r7, #0]
 800a7aa:	f00e fbdf 	bl	8018f6c <memcpy>
	}
}
 800a7ae:	bf00      	nop
 800a7b0:	3708      	adds	r7, #8
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	bd80      	pop	{r7, pc}

0800a7b6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a7b6:	b580      	push	{r7, lr}
 800a7b8:	b084      	sub	sp, #16
 800a7ba:	af00      	add	r7, sp, #0
 800a7bc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a7be:	f001 fe79 	bl	800c4b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a7c8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a7ca:	e011      	b.n	800a7f0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d012      	beq.n	800a7fa <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	3324      	adds	r3, #36	; 0x24
 800a7d8:	4618      	mov	r0, r3
 800a7da:	f000 fd67 	bl	800b2ac <xTaskRemoveFromEventList>
 800a7de:	4603      	mov	r3, r0
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d001      	beq.n	800a7e8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a7e4:	f000 fe3e 	bl	800b464 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a7e8:	7bfb      	ldrb	r3, [r7, #15]
 800a7ea:	3b01      	subs	r3, #1
 800a7ec:	b2db      	uxtb	r3, r3
 800a7ee:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a7f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	dce9      	bgt.n	800a7cc <prvUnlockQueue+0x16>
 800a7f8:	e000      	b.n	800a7fc <prvUnlockQueue+0x46>
					break;
 800a7fa:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	22ff      	movs	r2, #255	; 0xff
 800a800:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a804:	f001 fe86 	bl	800c514 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a808:	f001 fe54 	bl	800c4b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a812:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a814:	e011      	b.n	800a83a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	691b      	ldr	r3, [r3, #16]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d012      	beq.n	800a844 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	3310      	adds	r3, #16
 800a822:	4618      	mov	r0, r3
 800a824:	f000 fd42 	bl	800b2ac <xTaskRemoveFromEventList>
 800a828:	4603      	mov	r3, r0
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d001      	beq.n	800a832 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a82e:	f000 fe19 	bl	800b464 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a832:	7bbb      	ldrb	r3, [r7, #14]
 800a834:	3b01      	subs	r3, #1
 800a836:	b2db      	uxtb	r3, r3
 800a838:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a83a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	dce9      	bgt.n	800a816 <prvUnlockQueue+0x60>
 800a842:	e000      	b.n	800a846 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a844:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	22ff      	movs	r2, #255	; 0xff
 800a84a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a84e:	f001 fe61 	bl	800c514 <vPortExitCritical>
}
 800a852:	bf00      	nop
 800a854:	3710      	adds	r7, #16
 800a856:	46bd      	mov	sp, r7
 800a858:	bd80      	pop	{r7, pc}

0800a85a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a85a:	b580      	push	{r7, lr}
 800a85c:	b084      	sub	sp, #16
 800a85e:	af00      	add	r7, sp, #0
 800a860:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a862:	f001 fe27 	bl	800c4b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d102      	bne.n	800a874 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a86e:	2301      	movs	r3, #1
 800a870:	60fb      	str	r3, [r7, #12]
 800a872:	e001      	b.n	800a878 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a874:	2300      	movs	r3, #0
 800a876:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a878:	f001 fe4c 	bl	800c514 <vPortExitCritical>

	return xReturn;
 800a87c:	68fb      	ldr	r3, [r7, #12]
}
 800a87e:	4618      	mov	r0, r3
 800a880:	3710      	adds	r7, #16
 800a882:	46bd      	mov	sp, r7
 800a884:	bd80      	pop	{r7, pc}

0800a886 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a886:	b580      	push	{r7, lr}
 800a888:	b084      	sub	sp, #16
 800a88a:	af00      	add	r7, sp, #0
 800a88c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a88e:	f001 fe11 	bl	800c4b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a89a:	429a      	cmp	r2, r3
 800a89c:	d102      	bne.n	800a8a4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a89e:	2301      	movs	r3, #1
 800a8a0:	60fb      	str	r3, [r7, #12]
 800a8a2:	e001      	b.n	800a8a8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a8a8:	f001 fe34 	bl	800c514 <vPortExitCritical>

	return xReturn;
 800a8ac:	68fb      	ldr	r3, [r7, #12]
}
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	3710      	adds	r7, #16
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	bd80      	pop	{r7, pc}
	...

0800a8b8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a8b8:	b480      	push	{r7}
 800a8ba:	b085      	sub	sp, #20
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
 800a8c0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	60fb      	str	r3, [r7, #12]
 800a8c6:	e014      	b.n	800a8f2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a8c8:	4a0f      	ldr	r2, [pc, #60]	; (800a908 <vQueueAddToRegistry+0x50>)
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d10b      	bne.n	800a8ec <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a8d4:	490c      	ldr	r1, [pc, #48]	; (800a908 <vQueueAddToRegistry+0x50>)
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	683a      	ldr	r2, [r7, #0]
 800a8da:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a8de:	4a0a      	ldr	r2, [pc, #40]	; (800a908 <vQueueAddToRegistry+0x50>)
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	00db      	lsls	r3, r3, #3
 800a8e4:	4413      	add	r3, r2
 800a8e6:	687a      	ldr	r2, [r7, #4]
 800a8e8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a8ea:	e006      	b.n	800a8fa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	3301      	adds	r3, #1
 800a8f0:	60fb      	str	r3, [r7, #12]
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	2b07      	cmp	r3, #7
 800a8f6:	d9e7      	bls.n	800a8c8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a8f8:	bf00      	nop
 800a8fa:	bf00      	nop
 800a8fc:	3714      	adds	r7, #20
 800a8fe:	46bd      	mov	sp, r7
 800a900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a904:	4770      	bx	lr
 800a906:	bf00      	nop
 800a908:	20017128 	.word	0x20017128

0800a90c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800a90c:	b480      	push	{r7}
 800a90e:	b085      	sub	sp, #20
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a914:	2300      	movs	r3, #0
 800a916:	60fb      	str	r3, [r7, #12]
 800a918:	e016      	b.n	800a948 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800a91a:	4a10      	ldr	r2, [pc, #64]	; (800a95c <vQueueUnregisterQueue+0x50>)
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	00db      	lsls	r3, r3, #3
 800a920:	4413      	add	r3, r2
 800a922:	685b      	ldr	r3, [r3, #4]
 800a924:	687a      	ldr	r2, [r7, #4]
 800a926:	429a      	cmp	r2, r3
 800a928:	d10b      	bne.n	800a942 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800a92a:	4a0c      	ldr	r2, [pc, #48]	; (800a95c <vQueueUnregisterQueue+0x50>)
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	2100      	movs	r1, #0
 800a930:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800a934:	4a09      	ldr	r2, [pc, #36]	; (800a95c <vQueueUnregisterQueue+0x50>)
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	00db      	lsls	r3, r3, #3
 800a93a:	4413      	add	r3, r2
 800a93c:	2200      	movs	r2, #0
 800a93e:	605a      	str	r2, [r3, #4]
				break;
 800a940:	e006      	b.n	800a950 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	3301      	adds	r3, #1
 800a946:	60fb      	str	r3, [r7, #12]
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	2b07      	cmp	r3, #7
 800a94c:	d9e5      	bls.n	800a91a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800a94e:	bf00      	nop
 800a950:	bf00      	nop
 800a952:	3714      	adds	r7, #20
 800a954:	46bd      	mov	sp, r7
 800a956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95a:	4770      	bx	lr
 800a95c:	20017128 	.word	0x20017128

0800a960 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a960:	b580      	push	{r7, lr}
 800a962:	b086      	sub	sp, #24
 800a964:	af00      	add	r7, sp, #0
 800a966:	60f8      	str	r0, [r7, #12]
 800a968:	60b9      	str	r1, [r7, #8]
 800a96a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a970:	f001 fda0 	bl	800c4b4 <vPortEnterCritical>
 800a974:	697b      	ldr	r3, [r7, #20]
 800a976:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a97a:	b25b      	sxtb	r3, r3
 800a97c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a980:	d103      	bne.n	800a98a <vQueueWaitForMessageRestricted+0x2a>
 800a982:	697b      	ldr	r3, [r7, #20]
 800a984:	2200      	movs	r2, #0
 800a986:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a98a:	697b      	ldr	r3, [r7, #20]
 800a98c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a990:	b25b      	sxtb	r3, r3
 800a992:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a996:	d103      	bne.n	800a9a0 <vQueueWaitForMessageRestricted+0x40>
 800a998:	697b      	ldr	r3, [r7, #20]
 800a99a:	2200      	movs	r2, #0
 800a99c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a9a0:	f001 fdb8 	bl	800c514 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a9a4:	697b      	ldr	r3, [r7, #20]
 800a9a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d106      	bne.n	800a9ba <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a9ac:	697b      	ldr	r3, [r7, #20]
 800a9ae:	3324      	adds	r3, #36	; 0x24
 800a9b0:	687a      	ldr	r2, [r7, #4]
 800a9b2:	68b9      	ldr	r1, [r7, #8]
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	f000 fc4d 	bl	800b254 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a9ba:	6978      	ldr	r0, [r7, #20]
 800a9bc:	f7ff fefb 	bl	800a7b6 <prvUnlockQueue>
	}
 800a9c0:	bf00      	nop
 800a9c2:	3718      	adds	r7, #24
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	bd80      	pop	{r7, pc}

0800a9c8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b08e      	sub	sp, #56	; 0x38
 800a9cc:	af04      	add	r7, sp, #16
 800a9ce:	60f8      	str	r0, [r7, #12]
 800a9d0:	60b9      	str	r1, [r7, #8]
 800a9d2:	607a      	str	r2, [r7, #4]
 800a9d4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a9d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d10a      	bne.n	800a9f2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800a9dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9e0:	f383 8811 	msr	BASEPRI, r3
 800a9e4:	f3bf 8f6f 	isb	sy
 800a9e8:	f3bf 8f4f 	dsb	sy
 800a9ec:	623b      	str	r3, [r7, #32]
}
 800a9ee:	bf00      	nop
 800a9f0:	e7fe      	b.n	800a9f0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a9f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d10a      	bne.n	800aa0e <xTaskCreateStatic+0x46>
	__asm volatile
 800a9f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9fc:	f383 8811 	msr	BASEPRI, r3
 800aa00:	f3bf 8f6f 	isb	sy
 800aa04:	f3bf 8f4f 	dsb	sy
 800aa08:	61fb      	str	r3, [r7, #28]
}
 800aa0a:	bf00      	nop
 800aa0c:	e7fe      	b.n	800aa0c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800aa0e:	235c      	movs	r3, #92	; 0x5c
 800aa10:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800aa12:	693b      	ldr	r3, [r7, #16]
 800aa14:	2b5c      	cmp	r3, #92	; 0x5c
 800aa16:	d00a      	beq.n	800aa2e <xTaskCreateStatic+0x66>
	__asm volatile
 800aa18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa1c:	f383 8811 	msr	BASEPRI, r3
 800aa20:	f3bf 8f6f 	isb	sy
 800aa24:	f3bf 8f4f 	dsb	sy
 800aa28:	61bb      	str	r3, [r7, #24]
}
 800aa2a:	bf00      	nop
 800aa2c:	e7fe      	b.n	800aa2c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800aa2e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800aa30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d01e      	beq.n	800aa74 <xTaskCreateStatic+0xac>
 800aa36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d01b      	beq.n	800aa74 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800aa3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa3e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800aa40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aa44:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800aa46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa48:	2202      	movs	r2, #2
 800aa4a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800aa4e:	2300      	movs	r3, #0
 800aa50:	9303      	str	r3, [sp, #12]
 800aa52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa54:	9302      	str	r3, [sp, #8]
 800aa56:	f107 0314 	add.w	r3, r7, #20
 800aa5a:	9301      	str	r3, [sp, #4]
 800aa5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa5e:	9300      	str	r3, [sp, #0]
 800aa60:	683b      	ldr	r3, [r7, #0]
 800aa62:	687a      	ldr	r2, [r7, #4]
 800aa64:	68b9      	ldr	r1, [r7, #8]
 800aa66:	68f8      	ldr	r0, [r7, #12]
 800aa68:	f000 f850 	bl	800ab0c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aa6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aa6e:	f000 f8dd 	bl	800ac2c <prvAddNewTaskToReadyList>
 800aa72:	e001      	b.n	800aa78 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800aa74:	2300      	movs	r3, #0
 800aa76:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800aa78:	697b      	ldr	r3, [r7, #20]
	}
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	3728      	adds	r7, #40	; 0x28
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	bd80      	pop	{r7, pc}

0800aa82 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800aa82:	b580      	push	{r7, lr}
 800aa84:	b08c      	sub	sp, #48	; 0x30
 800aa86:	af04      	add	r7, sp, #16
 800aa88:	60f8      	str	r0, [r7, #12]
 800aa8a:	60b9      	str	r1, [r7, #8]
 800aa8c:	603b      	str	r3, [r7, #0]
 800aa8e:	4613      	mov	r3, r2
 800aa90:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800aa92:	88fb      	ldrh	r3, [r7, #6]
 800aa94:	009b      	lsls	r3, r3, #2
 800aa96:	4618      	mov	r0, r3
 800aa98:	f001 fe2e 	bl	800c6f8 <pvPortMalloc>
 800aa9c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800aa9e:	697b      	ldr	r3, [r7, #20]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d00e      	beq.n	800aac2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800aaa4:	205c      	movs	r0, #92	; 0x5c
 800aaa6:	f001 fe27 	bl	800c6f8 <pvPortMalloc>
 800aaaa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800aaac:	69fb      	ldr	r3, [r7, #28]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d003      	beq.n	800aaba <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800aab2:	69fb      	ldr	r3, [r7, #28]
 800aab4:	697a      	ldr	r2, [r7, #20]
 800aab6:	631a      	str	r2, [r3, #48]	; 0x30
 800aab8:	e005      	b.n	800aac6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800aaba:	6978      	ldr	r0, [r7, #20]
 800aabc:	f001 fee8 	bl	800c890 <vPortFree>
 800aac0:	e001      	b.n	800aac6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800aac2:	2300      	movs	r3, #0
 800aac4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800aac6:	69fb      	ldr	r3, [r7, #28]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d017      	beq.n	800aafc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800aacc:	69fb      	ldr	r3, [r7, #28]
 800aace:	2200      	movs	r2, #0
 800aad0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800aad4:	88fa      	ldrh	r2, [r7, #6]
 800aad6:	2300      	movs	r3, #0
 800aad8:	9303      	str	r3, [sp, #12]
 800aada:	69fb      	ldr	r3, [r7, #28]
 800aadc:	9302      	str	r3, [sp, #8]
 800aade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aae0:	9301      	str	r3, [sp, #4]
 800aae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aae4:	9300      	str	r3, [sp, #0]
 800aae6:	683b      	ldr	r3, [r7, #0]
 800aae8:	68b9      	ldr	r1, [r7, #8]
 800aaea:	68f8      	ldr	r0, [r7, #12]
 800aaec:	f000 f80e 	bl	800ab0c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aaf0:	69f8      	ldr	r0, [r7, #28]
 800aaf2:	f000 f89b 	bl	800ac2c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800aaf6:	2301      	movs	r3, #1
 800aaf8:	61bb      	str	r3, [r7, #24]
 800aafa:	e002      	b.n	800ab02 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800aafc:	f04f 33ff 	mov.w	r3, #4294967295
 800ab00:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ab02:	69bb      	ldr	r3, [r7, #24]
	}
 800ab04:	4618      	mov	r0, r3
 800ab06:	3720      	adds	r7, #32
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	bd80      	pop	{r7, pc}

0800ab0c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b088      	sub	sp, #32
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	60f8      	str	r0, [r7, #12]
 800ab14:	60b9      	str	r1, [r7, #8]
 800ab16:	607a      	str	r2, [r7, #4]
 800ab18:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ab1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab1c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	009b      	lsls	r3, r3, #2
 800ab22:	461a      	mov	r2, r3
 800ab24:	21a5      	movs	r1, #165	; 0xa5
 800ab26:	f00e fa2f 	bl	8018f88 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ab2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ab34:	3b01      	subs	r3, #1
 800ab36:	009b      	lsls	r3, r3, #2
 800ab38:	4413      	add	r3, r2
 800ab3a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ab3c:	69bb      	ldr	r3, [r7, #24]
 800ab3e:	f023 0307 	bic.w	r3, r3, #7
 800ab42:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ab44:	69bb      	ldr	r3, [r7, #24]
 800ab46:	f003 0307 	and.w	r3, r3, #7
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d00a      	beq.n	800ab64 <prvInitialiseNewTask+0x58>
	__asm volatile
 800ab4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab52:	f383 8811 	msr	BASEPRI, r3
 800ab56:	f3bf 8f6f 	isb	sy
 800ab5a:	f3bf 8f4f 	dsb	sy
 800ab5e:	617b      	str	r3, [r7, #20]
}
 800ab60:	bf00      	nop
 800ab62:	e7fe      	b.n	800ab62 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ab64:	68bb      	ldr	r3, [r7, #8]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d01f      	beq.n	800abaa <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	61fb      	str	r3, [r7, #28]
 800ab6e:	e012      	b.n	800ab96 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ab70:	68ba      	ldr	r2, [r7, #8]
 800ab72:	69fb      	ldr	r3, [r7, #28]
 800ab74:	4413      	add	r3, r2
 800ab76:	7819      	ldrb	r1, [r3, #0]
 800ab78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab7a:	69fb      	ldr	r3, [r7, #28]
 800ab7c:	4413      	add	r3, r2
 800ab7e:	3334      	adds	r3, #52	; 0x34
 800ab80:	460a      	mov	r2, r1
 800ab82:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ab84:	68ba      	ldr	r2, [r7, #8]
 800ab86:	69fb      	ldr	r3, [r7, #28]
 800ab88:	4413      	add	r3, r2
 800ab8a:	781b      	ldrb	r3, [r3, #0]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d006      	beq.n	800ab9e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ab90:	69fb      	ldr	r3, [r7, #28]
 800ab92:	3301      	adds	r3, #1
 800ab94:	61fb      	str	r3, [r7, #28]
 800ab96:	69fb      	ldr	r3, [r7, #28]
 800ab98:	2b0f      	cmp	r3, #15
 800ab9a:	d9e9      	bls.n	800ab70 <prvInitialiseNewTask+0x64>
 800ab9c:	e000      	b.n	800aba0 <prvInitialiseNewTask+0x94>
			{
				break;
 800ab9e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800aba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aba2:	2200      	movs	r2, #0
 800aba4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800aba8:	e003      	b.n	800abb2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800abaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abac:	2200      	movs	r2, #0
 800abae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800abb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abb4:	2b37      	cmp	r3, #55	; 0x37
 800abb6:	d901      	bls.n	800abbc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800abb8:	2337      	movs	r3, #55	; 0x37
 800abba:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800abbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800abc0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800abc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800abc6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800abc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abca:	2200      	movs	r2, #0
 800abcc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800abce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abd0:	3304      	adds	r3, #4
 800abd2:	4618      	mov	r0, r3
 800abd4:	f7fe fda0 	bl	8009718 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800abd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abda:	3318      	adds	r3, #24
 800abdc:	4618      	mov	r0, r3
 800abde:	f7fe fd9b 	bl	8009718 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800abe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abe4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800abe6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800abe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abea:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800abee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abf0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800abf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800abf6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800abf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abfa:	2200      	movs	r2, #0
 800abfc:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800abfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac00:	2200      	movs	r2, #0
 800ac02:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ac06:	683a      	ldr	r2, [r7, #0]
 800ac08:	68f9      	ldr	r1, [r7, #12]
 800ac0a:	69b8      	ldr	r0, [r7, #24]
 800ac0c:	f001 fb24 	bl	800c258 <pxPortInitialiseStack>
 800ac10:	4602      	mov	r2, r0
 800ac12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac14:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ac16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d002      	beq.n	800ac22 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ac1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac20:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ac22:	bf00      	nop
 800ac24:	3720      	adds	r7, #32
 800ac26:	46bd      	mov	sp, r7
 800ac28:	bd80      	pop	{r7, pc}
	...

0800ac2c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b082      	sub	sp, #8
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ac34:	f001 fc3e 	bl	800c4b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ac38:	4b2d      	ldr	r3, [pc, #180]	; (800acf0 <prvAddNewTaskToReadyList+0xc4>)
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	3301      	adds	r3, #1
 800ac3e:	4a2c      	ldr	r2, [pc, #176]	; (800acf0 <prvAddNewTaskToReadyList+0xc4>)
 800ac40:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ac42:	4b2c      	ldr	r3, [pc, #176]	; (800acf4 <prvAddNewTaskToReadyList+0xc8>)
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d109      	bne.n	800ac5e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ac4a:	4a2a      	ldr	r2, [pc, #168]	; (800acf4 <prvAddNewTaskToReadyList+0xc8>)
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ac50:	4b27      	ldr	r3, [pc, #156]	; (800acf0 <prvAddNewTaskToReadyList+0xc4>)
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	2b01      	cmp	r3, #1
 800ac56:	d110      	bne.n	800ac7a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ac58:	f000 fc28 	bl	800b4ac <prvInitialiseTaskLists>
 800ac5c:	e00d      	b.n	800ac7a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ac5e:	4b26      	ldr	r3, [pc, #152]	; (800acf8 <prvAddNewTaskToReadyList+0xcc>)
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d109      	bne.n	800ac7a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ac66:	4b23      	ldr	r3, [pc, #140]	; (800acf4 <prvAddNewTaskToReadyList+0xc8>)
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac70:	429a      	cmp	r2, r3
 800ac72:	d802      	bhi.n	800ac7a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ac74:	4a1f      	ldr	r2, [pc, #124]	; (800acf4 <prvAddNewTaskToReadyList+0xc8>)
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ac7a:	4b20      	ldr	r3, [pc, #128]	; (800acfc <prvAddNewTaskToReadyList+0xd0>)
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	3301      	adds	r3, #1
 800ac80:	4a1e      	ldr	r2, [pc, #120]	; (800acfc <prvAddNewTaskToReadyList+0xd0>)
 800ac82:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ac84:	4b1d      	ldr	r3, [pc, #116]	; (800acfc <prvAddNewTaskToReadyList+0xd0>)
 800ac86:	681a      	ldr	r2, [r3, #0]
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac90:	4b1b      	ldr	r3, [pc, #108]	; (800ad00 <prvAddNewTaskToReadyList+0xd4>)
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	429a      	cmp	r2, r3
 800ac96:	d903      	bls.n	800aca0 <prvAddNewTaskToReadyList+0x74>
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac9c:	4a18      	ldr	r2, [pc, #96]	; (800ad00 <prvAddNewTaskToReadyList+0xd4>)
 800ac9e:	6013      	str	r3, [r2, #0]
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aca4:	4613      	mov	r3, r2
 800aca6:	009b      	lsls	r3, r3, #2
 800aca8:	4413      	add	r3, r2
 800acaa:	009b      	lsls	r3, r3, #2
 800acac:	4a15      	ldr	r2, [pc, #84]	; (800ad04 <prvAddNewTaskToReadyList+0xd8>)
 800acae:	441a      	add	r2, r3
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	3304      	adds	r3, #4
 800acb4:	4619      	mov	r1, r3
 800acb6:	4610      	mov	r0, r2
 800acb8:	f7fe fd3b 	bl	8009732 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800acbc:	f001 fc2a 	bl	800c514 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800acc0:	4b0d      	ldr	r3, [pc, #52]	; (800acf8 <prvAddNewTaskToReadyList+0xcc>)
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d00e      	beq.n	800ace6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800acc8:	4b0a      	ldr	r3, [pc, #40]	; (800acf4 <prvAddNewTaskToReadyList+0xc8>)
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acd2:	429a      	cmp	r2, r3
 800acd4:	d207      	bcs.n	800ace6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800acd6:	4b0c      	ldr	r3, [pc, #48]	; (800ad08 <prvAddNewTaskToReadyList+0xdc>)
 800acd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800acdc:	601a      	str	r2, [r3, #0]
 800acde:	f3bf 8f4f 	dsb	sy
 800ace2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ace6:	bf00      	nop
 800ace8:	3708      	adds	r7, #8
 800acea:	46bd      	mov	sp, r7
 800acec:	bd80      	pop	{r7, pc}
 800acee:	bf00      	nop
 800acf0:	20003668 	.word	0x20003668
 800acf4:	20003194 	.word	0x20003194
 800acf8:	20003674 	.word	0x20003674
 800acfc:	20003684 	.word	0x20003684
 800ad00:	20003670 	.word	0x20003670
 800ad04:	20003198 	.word	0x20003198
 800ad08:	e000ed04 	.word	0xe000ed04

0800ad0c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	b084      	sub	sp, #16
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ad14:	2300      	movs	r3, #0
 800ad16:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d017      	beq.n	800ad4e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ad1e:	4b13      	ldr	r3, [pc, #76]	; (800ad6c <vTaskDelay+0x60>)
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d00a      	beq.n	800ad3c <vTaskDelay+0x30>
	__asm volatile
 800ad26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad2a:	f383 8811 	msr	BASEPRI, r3
 800ad2e:	f3bf 8f6f 	isb	sy
 800ad32:	f3bf 8f4f 	dsb	sy
 800ad36:	60bb      	str	r3, [r7, #8]
}
 800ad38:	bf00      	nop
 800ad3a:	e7fe      	b.n	800ad3a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ad3c:	f000 f880 	bl	800ae40 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ad40:	2100      	movs	r1, #0
 800ad42:	6878      	ldr	r0, [r7, #4]
 800ad44:	f000 fee6 	bl	800bb14 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ad48:	f000 f888 	bl	800ae5c <xTaskResumeAll>
 800ad4c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d107      	bne.n	800ad64 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800ad54:	4b06      	ldr	r3, [pc, #24]	; (800ad70 <vTaskDelay+0x64>)
 800ad56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad5a:	601a      	str	r2, [r3, #0]
 800ad5c:	f3bf 8f4f 	dsb	sy
 800ad60:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ad64:	bf00      	nop
 800ad66:	3710      	adds	r7, #16
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	bd80      	pop	{r7, pc}
 800ad6c:	20003690 	.word	0x20003690
 800ad70:	e000ed04 	.word	0xe000ed04

0800ad74 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b08a      	sub	sp, #40	; 0x28
 800ad78:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ad7e:	2300      	movs	r3, #0
 800ad80:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ad82:	463a      	mov	r2, r7
 800ad84:	1d39      	adds	r1, r7, #4
 800ad86:	f107 0308 	add.w	r3, r7, #8
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	f7fe fc70 	bl	8009670 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ad90:	6839      	ldr	r1, [r7, #0]
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	68ba      	ldr	r2, [r7, #8]
 800ad96:	9202      	str	r2, [sp, #8]
 800ad98:	9301      	str	r3, [sp, #4]
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	9300      	str	r3, [sp, #0]
 800ad9e:	2300      	movs	r3, #0
 800ada0:	460a      	mov	r2, r1
 800ada2:	4921      	ldr	r1, [pc, #132]	; (800ae28 <vTaskStartScheduler+0xb4>)
 800ada4:	4821      	ldr	r0, [pc, #132]	; (800ae2c <vTaskStartScheduler+0xb8>)
 800ada6:	f7ff fe0f 	bl	800a9c8 <xTaskCreateStatic>
 800adaa:	4603      	mov	r3, r0
 800adac:	4a20      	ldr	r2, [pc, #128]	; (800ae30 <vTaskStartScheduler+0xbc>)
 800adae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800adb0:	4b1f      	ldr	r3, [pc, #124]	; (800ae30 <vTaskStartScheduler+0xbc>)
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d002      	beq.n	800adbe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800adb8:	2301      	movs	r3, #1
 800adba:	617b      	str	r3, [r7, #20]
 800adbc:	e001      	b.n	800adc2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800adbe:	2300      	movs	r3, #0
 800adc0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800adc2:	697b      	ldr	r3, [r7, #20]
 800adc4:	2b01      	cmp	r3, #1
 800adc6:	d102      	bne.n	800adce <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800adc8:	f000 fef8 	bl	800bbbc <xTimerCreateTimerTask>
 800adcc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800adce:	697b      	ldr	r3, [r7, #20]
 800add0:	2b01      	cmp	r3, #1
 800add2:	d116      	bne.n	800ae02 <vTaskStartScheduler+0x8e>
	__asm volatile
 800add4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800add8:	f383 8811 	msr	BASEPRI, r3
 800addc:	f3bf 8f6f 	isb	sy
 800ade0:	f3bf 8f4f 	dsb	sy
 800ade4:	613b      	str	r3, [r7, #16]
}
 800ade6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ade8:	4b12      	ldr	r3, [pc, #72]	; (800ae34 <vTaskStartScheduler+0xc0>)
 800adea:	f04f 32ff 	mov.w	r2, #4294967295
 800adee:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800adf0:	4b11      	ldr	r3, [pc, #68]	; (800ae38 <vTaskStartScheduler+0xc4>)
 800adf2:	2201      	movs	r2, #1
 800adf4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800adf6:	4b11      	ldr	r3, [pc, #68]	; (800ae3c <vTaskStartScheduler+0xc8>)
 800adf8:	2200      	movs	r2, #0
 800adfa:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800adfc:	f001 fab8 	bl	800c370 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ae00:	e00e      	b.n	800ae20 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ae02:	697b      	ldr	r3, [r7, #20]
 800ae04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae08:	d10a      	bne.n	800ae20 <vTaskStartScheduler+0xac>
	__asm volatile
 800ae0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae0e:	f383 8811 	msr	BASEPRI, r3
 800ae12:	f3bf 8f6f 	isb	sy
 800ae16:	f3bf 8f4f 	dsb	sy
 800ae1a:	60fb      	str	r3, [r7, #12]
}
 800ae1c:	bf00      	nop
 800ae1e:	e7fe      	b.n	800ae1e <vTaskStartScheduler+0xaa>
}
 800ae20:	bf00      	nop
 800ae22:	3718      	adds	r7, #24
 800ae24:	46bd      	mov	sp, r7
 800ae26:	bd80      	pop	{r7, pc}
 800ae28:	0801a26c 	.word	0x0801a26c
 800ae2c:	0800b47d 	.word	0x0800b47d
 800ae30:	2000368c 	.word	0x2000368c
 800ae34:	20003688 	.word	0x20003688
 800ae38:	20003674 	.word	0x20003674
 800ae3c:	2000366c 	.word	0x2000366c

0800ae40 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ae40:	b480      	push	{r7}
 800ae42:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ae44:	4b04      	ldr	r3, [pc, #16]	; (800ae58 <vTaskSuspendAll+0x18>)
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	3301      	adds	r3, #1
 800ae4a:	4a03      	ldr	r2, [pc, #12]	; (800ae58 <vTaskSuspendAll+0x18>)
 800ae4c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ae4e:	bf00      	nop
 800ae50:	46bd      	mov	sp, r7
 800ae52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae56:	4770      	bx	lr
 800ae58:	20003690 	.word	0x20003690

0800ae5c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	b084      	sub	sp, #16
 800ae60:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ae62:	2300      	movs	r3, #0
 800ae64:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ae66:	2300      	movs	r3, #0
 800ae68:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ae6a:	4b42      	ldr	r3, [pc, #264]	; (800af74 <xTaskResumeAll+0x118>)
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d10a      	bne.n	800ae88 <xTaskResumeAll+0x2c>
	__asm volatile
 800ae72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae76:	f383 8811 	msr	BASEPRI, r3
 800ae7a:	f3bf 8f6f 	isb	sy
 800ae7e:	f3bf 8f4f 	dsb	sy
 800ae82:	603b      	str	r3, [r7, #0]
}
 800ae84:	bf00      	nop
 800ae86:	e7fe      	b.n	800ae86 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ae88:	f001 fb14 	bl	800c4b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ae8c:	4b39      	ldr	r3, [pc, #228]	; (800af74 <xTaskResumeAll+0x118>)
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	3b01      	subs	r3, #1
 800ae92:	4a38      	ldr	r2, [pc, #224]	; (800af74 <xTaskResumeAll+0x118>)
 800ae94:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ae96:	4b37      	ldr	r3, [pc, #220]	; (800af74 <xTaskResumeAll+0x118>)
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d162      	bne.n	800af64 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ae9e:	4b36      	ldr	r3, [pc, #216]	; (800af78 <xTaskResumeAll+0x11c>)
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d05e      	beq.n	800af64 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aea6:	e02f      	b.n	800af08 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aea8:	4b34      	ldr	r3, [pc, #208]	; (800af7c <xTaskResumeAll+0x120>)
 800aeaa:	68db      	ldr	r3, [r3, #12]
 800aeac:	68db      	ldr	r3, [r3, #12]
 800aeae:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	3318      	adds	r3, #24
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	f7fe fc99 	bl	80097ec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	3304      	adds	r3, #4
 800aebe:	4618      	mov	r0, r3
 800aec0:	f7fe fc94 	bl	80097ec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aec8:	4b2d      	ldr	r3, [pc, #180]	; (800af80 <xTaskResumeAll+0x124>)
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	429a      	cmp	r2, r3
 800aece:	d903      	bls.n	800aed8 <xTaskResumeAll+0x7c>
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aed4:	4a2a      	ldr	r2, [pc, #168]	; (800af80 <xTaskResumeAll+0x124>)
 800aed6:	6013      	str	r3, [r2, #0]
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aedc:	4613      	mov	r3, r2
 800aede:	009b      	lsls	r3, r3, #2
 800aee0:	4413      	add	r3, r2
 800aee2:	009b      	lsls	r3, r3, #2
 800aee4:	4a27      	ldr	r2, [pc, #156]	; (800af84 <xTaskResumeAll+0x128>)
 800aee6:	441a      	add	r2, r3
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	3304      	adds	r3, #4
 800aeec:	4619      	mov	r1, r3
 800aeee:	4610      	mov	r0, r2
 800aef0:	f7fe fc1f 	bl	8009732 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aef8:	4b23      	ldr	r3, [pc, #140]	; (800af88 <xTaskResumeAll+0x12c>)
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aefe:	429a      	cmp	r2, r3
 800af00:	d302      	bcc.n	800af08 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800af02:	4b22      	ldr	r3, [pc, #136]	; (800af8c <xTaskResumeAll+0x130>)
 800af04:	2201      	movs	r2, #1
 800af06:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800af08:	4b1c      	ldr	r3, [pc, #112]	; (800af7c <xTaskResumeAll+0x120>)
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d1cb      	bne.n	800aea8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	2b00      	cmp	r3, #0
 800af14:	d001      	beq.n	800af1a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800af16:	f000 fb67 	bl	800b5e8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800af1a:	4b1d      	ldr	r3, [pc, #116]	; (800af90 <xTaskResumeAll+0x134>)
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d010      	beq.n	800af48 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800af26:	f000 f859 	bl	800afdc <xTaskIncrementTick>
 800af2a:	4603      	mov	r3, r0
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d002      	beq.n	800af36 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800af30:	4b16      	ldr	r3, [pc, #88]	; (800af8c <xTaskResumeAll+0x130>)
 800af32:	2201      	movs	r2, #1
 800af34:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	3b01      	subs	r3, #1
 800af3a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d1f1      	bne.n	800af26 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800af42:	4b13      	ldr	r3, [pc, #76]	; (800af90 <xTaskResumeAll+0x134>)
 800af44:	2200      	movs	r2, #0
 800af46:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800af48:	4b10      	ldr	r3, [pc, #64]	; (800af8c <xTaskResumeAll+0x130>)
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d009      	beq.n	800af64 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800af50:	2301      	movs	r3, #1
 800af52:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800af54:	4b0f      	ldr	r3, [pc, #60]	; (800af94 <xTaskResumeAll+0x138>)
 800af56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af5a:	601a      	str	r2, [r3, #0]
 800af5c:	f3bf 8f4f 	dsb	sy
 800af60:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800af64:	f001 fad6 	bl	800c514 <vPortExitCritical>

	return xAlreadyYielded;
 800af68:	68bb      	ldr	r3, [r7, #8]
}
 800af6a:	4618      	mov	r0, r3
 800af6c:	3710      	adds	r7, #16
 800af6e:	46bd      	mov	sp, r7
 800af70:	bd80      	pop	{r7, pc}
 800af72:	bf00      	nop
 800af74:	20003690 	.word	0x20003690
 800af78:	20003668 	.word	0x20003668
 800af7c:	20003628 	.word	0x20003628
 800af80:	20003670 	.word	0x20003670
 800af84:	20003198 	.word	0x20003198
 800af88:	20003194 	.word	0x20003194
 800af8c:	2000367c 	.word	0x2000367c
 800af90:	20003678 	.word	0x20003678
 800af94:	e000ed04 	.word	0xe000ed04

0800af98 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800af98:	b480      	push	{r7}
 800af9a:	b083      	sub	sp, #12
 800af9c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800af9e:	4b05      	ldr	r3, [pc, #20]	; (800afb4 <xTaskGetTickCount+0x1c>)
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800afa4:	687b      	ldr	r3, [r7, #4]
}
 800afa6:	4618      	mov	r0, r3
 800afa8:	370c      	adds	r7, #12
 800afaa:	46bd      	mov	sp, r7
 800afac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb0:	4770      	bx	lr
 800afb2:	bf00      	nop
 800afb4:	2000366c 	.word	0x2000366c

0800afb8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	b082      	sub	sp, #8
 800afbc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800afbe:	f001 fb5b 	bl	800c678 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800afc2:	2300      	movs	r3, #0
 800afc4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800afc6:	4b04      	ldr	r3, [pc, #16]	; (800afd8 <xTaskGetTickCountFromISR+0x20>)
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800afcc:	683b      	ldr	r3, [r7, #0]
}
 800afce:	4618      	mov	r0, r3
 800afd0:	3708      	adds	r7, #8
 800afd2:	46bd      	mov	sp, r7
 800afd4:	bd80      	pop	{r7, pc}
 800afd6:	bf00      	nop
 800afd8:	2000366c 	.word	0x2000366c

0800afdc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b086      	sub	sp, #24
 800afe0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800afe2:	2300      	movs	r3, #0
 800afe4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800afe6:	4b4f      	ldr	r3, [pc, #316]	; (800b124 <xTaskIncrementTick+0x148>)
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	2b00      	cmp	r3, #0
 800afec:	f040 808f 	bne.w	800b10e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800aff0:	4b4d      	ldr	r3, [pc, #308]	; (800b128 <xTaskIncrementTick+0x14c>)
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	3301      	adds	r3, #1
 800aff6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800aff8:	4a4b      	ldr	r2, [pc, #300]	; (800b128 <xTaskIncrementTick+0x14c>)
 800affa:	693b      	ldr	r3, [r7, #16]
 800affc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800affe:	693b      	ldr	r3, [r7, #16]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d120      	bne.n	800b046 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b004:	4b49      	ldr	r3, [pc, #292]	; (800b12c <xTaskIncrementTick+0x150>)
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d00a      	beq.n	800b024 <xTaskIncrementTick+0x48>
	__asm volatile
 800b00e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b012:	f383 8811 	msr	BASEPRI, r3
 800b016:	f3bf 8f6f 	isb	sy
 800b01a:	f3bf 8f4f 	dsb	sy
 800b01e:	603b      	str	r3, [r7, #0]
}
 800b020:	bf00      	nop
 800b022:	e7fe      	b.n	800b022 <xTaskIncrementTick+0x46>
 800b024:	4b41      	ldr	r3, [pc, #260]	; (800b12c <xTaskIncrementTick+0x150>)
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	60fb      	str	r3, [r7, #12]
 800b02a:	4b41      	ldr	r3, [pc, #260]	; (800b130 <xTaskIncrementTick+0x154>)
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	4a3f      	ldr	r2, [pc, #252]	; (800b12c <xTaskIncrementTick+0x150>)
 800b030:	6013      	str	r3, [r2, #0]
 800b032:	4a3f      	ldr	r2, [pc, #252]	; (800b130 <xTaskIncrementTick+0x154>)
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	6013      	str	r3, [r2, #0]
 800b038:	4b3e      	ldr	r3, [pc, #248]	; (800b134 <xTaskIncrementTick+0x158>)
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	3301      	adds	r3, #1
 800b03e:	4a3d      	ldr	r2, [pc, #244]	; (800b134 <xTaskIncrementTick+0x158>)
 800b040:	6013      	str	r3, [r2, #0]
 800b042:	f000 fad1 	bl	800b5e8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b046:	4b3c      	ldr	r3, [pc, #240]	; (800b138 <xTaskIncrementTick+0x15c>)
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	693a      	ldr	r2, [r7, #16]
 800b04c:	429a      	cmp	r2, r3
 800b04e:	d349      	bcc.n	800b0e4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b050:	4b36      	ldr	r3, [pc, #216]	; (800b12c <xTaskIncrementTick+0x150>)
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d104      	bne.n	800b064 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b05a:	4b37      	ldr	r3, [pc, #220]	; (800b138 <xTaskIncrementTick+0x15c>)
 800b05c:	f04f 32ff 	mov.w	r2, #4294967295
 800b060:	601a      	str	r2, [r3, #0]
					break;
 800b062:	e03f      	b.n	800b0e4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b064:	4b31      	ldr	r3, [pc, #196]	; (800b12c <xTaskIncrementTick+0x150>)
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	68db      	ldr	r3, [r3, #12]
 800b06a:	68db      	ldr	r3, [r3, #12]
 800b06c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b06e:	68bb      	ldr	r3, [r7, #8]
 800b070:	685b      	ldr	r3, [r3, #4]
 800b072:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b074:	693a      	ldr	r2, [r7, #16]
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	429a      	cmp	r2, r3
 800b07a:	d203      	bcs.n	800b084 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b07c:	4a2e      	ldr	r2, [pc, #184]	; (800b138 <xTaskIncrementTick+0x15c>)
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b082:	e02f      	b.n	800b0e4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b084:	68bb      	ldr	r3, [r7, #8]
 800b086:	3304      	adds	r3, #4
 800b088:	4618      	mov	r0, r3
 800b08a:	f7fe fbaf 	bl	80097ec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b08e:	68bb      	ldr	r3, [r7, #8]
 800b090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b092:	2b00      	cmp	r3, #0
 800b094:	d004      	beq.n	800b0a0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b096:	68bb      	ldr	r3, [r7, #8]
 800b098:	3318      	adds	r3, #24
 800b09a:	4618      	mov	r0, r3
 800b09c:	f7fe fba6 	bl	80097ec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b0a0:	68bb      	ldr	r3, [r7, #8]
 800b0a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0a4:	4b25      	ldr	r3, [pc, #148]	; (800b13c <xTaskIncrementTick+0x160>)
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	429a      	cmp	r2, r3
 800b0aa:	d903      	bls.n	800b0b4 <xTaskIncrementTick+0xd8>
 800b0ac:	68bb      	ldr	r3, [r7, #8]
 800b0ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0b0:	4a22      	ldr	r2, [pc, #136]	; (800b13c <xTaskIncrementTick+0x160>)
 800b0b2:	6013      	str	r3, [r2, #0]
 800b0b4:	68bb      	ldr	r3, [r7, #8]
 800b0b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0b8:	4613      	mov	r3, r2
 800b0ba:	009b      	lsls	r3, r3, #2
 800b0bc:	4413      	add	r3, r2
 800b0be:	009b      	lsls	r3, r3, #2
 800b0c0:	4a1f      	ldr	r2, [pc, #124]	; (800b140 <xTaskIncrementTick+0x164>)
 800b0c2:	441a      	add	r2, r3
 800b0c4:	68bb      	ldr	r3, [r7, #8]
 800b0c6:	3304      	adds	r3, #4
 800b0c8:	4619      	mov	r1, r3
 800b0ca:	4610      	mov	r0, r2
 800b0cc:	f7fe fb31 	bl	8009732 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b0d0:	68bb      	ldr	r3, [r7, #8]
 800b0d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0d4:	4b1b      	ldr	r3, [pc, #108]	; (800b144 <xTaskIncrementTick+0x168>)
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0da:	429a      	cmp	r2, r3
 800b0dc:	d3b8      	bcc.n	800b050 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b0de:	2301      	movs	r3, #1
 800b0e0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b0e2:	e7b5      	b.n	800b050 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b0e4:	4b17      	ldr	r3, [pc, #92]	; (800b144 <xTaskIncrementTick+0x168>)
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0ea:	4915      	ldr	r1, [pc, #84]	; (800b140 <xTaskIncrementTick+0x164>)
 800b0ec:	4613      	mov	r3, r2
 800b0ee:	009b      	lsls	r3, r3, #2
 800b0f0:	4413      	add	r3, r2
 800b0f2:	009b      	lsls	r3, r3, #2
 800b0f4:	440b      	add	r3, r1
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	2b01      	cmp	r3, #1
 800b0fa:	d901      	bls.n	800b100 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b0fc:	2301      	movs	r3, #1
 800b0fe:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b100:	4b11      	ldr	r3, [pc, #68]	; (800b148 <xTaskIncrementTick+0x16c>)
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d007      	beq.n	800b118 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b108:	2301      	movs	r3, #1
 800b10a:	617b      	str	r3, [r7, #20]
 800b10c:	e004      	b.n	800b118 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b10e:	4b0f      	ldr	r3, [pc, #60]	; (800b14c <xTaskIncrementTick+0x170>)
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	3301      	adds	r3, #1
 800b114:	4a0d      	ldr	r2, [pc, #52]	; (800b14c <xTaskIncrementTick+0x170>)
 800b116:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b118:	697b      	ldr	r3, [r7, #20]
}
 800b11a:	4618      	mov	r0, r3
 800b11c:	3718      	adds	r7, #24
 800b11e:	46bd      	mov	sp, r7
 800b120:	bd80      	pop	{r7, pc}
 800b122:	bf00      	nop
 800b124:	20003690 	.word	0x20003690
 800b128:	2000366c 	.word	0x2000366c
 800b12c:	20003620 	.word	0x20003620
 800b130:	20003624 	.word	0x20003624
 800b134:	20003680 	.word	0x20003680
 800b138:	20003688 	.word	0x20003688
 800b13c:	20003670 	.word	0x20003670
 800b140:	20003198 	.word	0x20003198
 800b144:	20003194 	.word	0x20003194
 800b148:	2000367c 	.word	0x2000367c
 800b14c:	20003678 	.word	0x20003678

0800b150 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b150:	b480      	push	{r7}
 800b152:	b085      	sub	sp, #20
 800b154:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b156:	4b28      	ldr	r3, [pc, #160]	; (800b1f8 <vTaskSwitchContext+0xa8>)
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d003      	beq.n	800b166 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b15e:	4b27      	ldr	r3, [pc, #156]	; (800b1fc <vTaskSwitchContext+0xac>)
 800b160:	2201      	movs	r2, #1
 800b162:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b164:	e041      	b.n	800b1ea <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800b166:	4b25      	ldr	r3, [pc, #148]	; (800b1fc <vTaskSwitchContext+0xac>)
 800b168:	2200      	movs	r2, #0
 800b16a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b16c:	4b24      	ldr	r3, [pc, #144]	; (800b200 <vTaskSwitchContext+0xb0>)
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	60fb      	str	r3, [r7, #12]
 800b172:	e010      	b.n	800b196 <vTaskSwitchContext+0x46>
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d10a      	bne.n	800b190 <vTaskSwitchContext+0x40>
	__asm volatile
 800b17a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b17e:	f383 8811 	msr	BASEPRI, r3
 800b182:	f3bf 8f6f 	isb	sy
 800b186:	f3bf 8f4f 	dsb	sy
 800b18a:	607b      	str	r3, [r7, #4]
}
 800b18c:	bf00      	nop
 800b18e:	e7fe      	b.n	800b18e <vTaskSwitchContext+0x3e>
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	3b01      	subs	r3, #1
 800b194:	60fb      	str	r3, [r7, #12]
 800b196:	491b      	ldr	r1, [pc, #108]	; (800b204 <vTaskSwitchContext+0xb4>)
 800b198:	68fa      	ldr	r2, [r7, #12]
 800b19a:	4613      	mov	r3, r2
 800b19c:	009b      	lsls	r3, r3, #2
 800b19e:	4413      	add	r3, r2
 800b1a0:	009b      	lsls	r3, r3, #2
 800b1a2:	440b      	add	r3, r1
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d0e4      	beq.n	800b174 <vTaskSwitchContext+0x24>
 800b1aa:	68fa      	ldr	r2, [r7, #12]
 800b1ac:	4613      	mov	r3, r2
 800b1ae:	009b      	lsls	r3, r3, #2
 800b1b0:	4413      	add	r3, r2
 800b1b2:	009b      	lsls	r3, r3, #2
 800b1b4:	4a13      	ldr	r2, [pc, #76]	; (800b204 <vTaskSwitchContext+0xb4>)
 800b1b6:	4413      	add	r3, r2
 800b1b8:	60bb      	str	r3, [r7, #8]
 800b1ba:	68bb      	ldr	r3, [r7, #8]
 800b1bc:	685b      	ldr	r3, [r3, #4]
 800b1be:	685a      	ldr	r2, [r3, #4]
 800b1c0:	68bb      	ldr	r3, [r7, #8]
 800b1c2:	605a      	str	r2, [r3, #4]
 800b1c4:	68bb      	ldr	r3, [r7, #8]
 800b1c6:	685a      	ldr	r2, [r3, #4]
 800b1c8:	68bb      	ldr	r3, [r7, #8]
 800b1ca:	3308      	adds	r3, #8
 800b1cc:	429a      	cmp	r2, r3
 800b1ce:	d104      	bne.n	800b1da <vTaskSwitchContext+0x8a>
 800b1d0:	68bb      	ldr	r3, [r7, #8]
 800b1d2:	685b      	ldr	r3, [r3, #4]
 800b1d4:	685a      	ldr	r2, [r3, #4]
 800b1d6:	68bb      	ldr	r3, [r7, #8]
 800b1d8:	605a      	str	r2, [r3, #4]
 800b1da:	68bb      	ldr	r3, [r7, #8]
 800b1dc:	685b      	ldr	r3, [r3, #4]
 800b1de:	68db      	ldr	r3, [r3, #12]
 800b1e0:	4a09      	ldr	r2, [pc, #36]	; (800b208 <vTaskSwitchContext+0xb8>)
 800b1e2:	6013      	str	r3, [r2, #0]
 800b1e4:	4a06      	ldr	r2, [pc, #24]	; (800b200 <vTaskSwitchContext+0xb0>)
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	6013      	str	r3, [r2, #0]
}
 800b1ea:	bf00      	nop
 800b1ec:	3714      	adds	r7, #20
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f4:	4770      	bx	lr
 800b1f6:	bf00      	nop
 800b1f8:	20003690 	.word	0x20003690
 800b1fc:	2000367c 	.word	0x2000367c
 800b200:	20003670 	.word	0x20003670
 800b204:	20003198 	.word	0x20003198
 800b208:	20003194 	.word	0x20003194

0800b20c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b084      	sub	sp, #16
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
 800b214:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d10a      	bne.n	800b232 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b21c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b220:	f383 8811 	msr	BASEPRI, r3
 800b224:	f3bf 8f6f 	isb	sy
 800b228:	f3bf 8f4f 	dsb	sy
 800b22c:	60fb      	str	r3, [r7, #12]
}
 800b22e:	bf00      	nop
 800b230:	e7fe      	b.n	800b230 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b232:	4b07      	ldr	r3, [pc, #28]	; (800b250 <vTaskPlaceOnEventList+0x44>)
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	3318      	adds	r3, #24
 800b238:	4619      	mov	r1, r3
 800b23a:	6878      	ldr	r0, [r7, #4]
 800b23c:	f7fe fa9d 	bl	800977a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b240:	2101      	movs	r1, #1
 800b242:	6838      	ldr	r0, [r7, #0]
 800b244:	f000 fc66 	bl	800bb14 <prvAddCurrentTaskToDelayedList>
}
 800b248:	bf00      	nop
 800b24a:	3710      	adds	r7, #16
 800b24c:	46bd      	mov	sp, r7
 800b24e:	bd80      	pop	{r7, pc}
 800b250:	20003194 	.word	0x20003194

0800b254 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b254:	b580      	push	{r7, lr}
 800b256:	b086      	sub	sp, #24
 800b258:	af00      	add	r7, sp, #0
 800b25a:	60f8      	str	r0, [r7, #12]
 800b25c:	60b9      	str	r1, [r7, #8]
 800b25e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d10a      	bne.n	800b27c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b26a:	f383 8811 	msr	BASEPRI, r3
 800b26e:	f3bf 8f6f 	isb	sy
 800b272:	f3bf 8f4f 	dsb	sy
 800b276:	617b      	str	r3, [r7, #20]
}
 800b278:	bf00      	nop
 800b27a:	e7fe      	b.n	800b27a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b27c:	4b0a      	ldr	r3, [pc, #40]	; (800b2a8 <vTaskPlaceOnEventListRestricted+0x54>)
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	3318      	adds	r3, #24
 800b282:	4619      	mov	r1, r3
 800b284:	68f8      	ldr	r0, [r7, #12]
 800b286:	f7fe fa54 	bl	8009732 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d002      	beq.n	800b296 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b290:	f04f 33ff 	mov.w	r3, #4294967295
 800b294:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b296:	6879      	ldr	r1, [r7, #4]
 800b298:	68b8      	ldr	r0, [r7, #8]
 800b29a:	f000 fc3b 	bl	800bb14 <prvAddCurrentTaskToDelayedList>
	}
 800b29e:	bf00      	nop
 800b2a0:	3718      	adds	r7, #24
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	bd80      	pop	{r7, pc}
 800b2a6:	bf00      	nop
 800b2a8:	20003194 	.word	0x20003194

0800b2ac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b086      	sub	sp, #24
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	68db      	ldr	r3, [r3, #12]
 800b2b8:	68db      	ldr	r3, [r3, #12]
 800b2ba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b2bc:	693b      	ldr	r3, [r7, #16]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d10a      	bne.n	800b2d8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b2c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2c6:	f383 8811 	msr	BASEPRI, r3
 800b2ca:	f3bf 8f6f 	isb	sy
 800b2ce:	f3bf 8f4f 	dsb	sy
 800b2d2:	60fb      	str	r3, [r7, #12]
}
 800b2d4:	bf00      	nop
 800b2d6:	e7fe      	b.n	800b2d6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b2d8:	693b      	ldr	r3, [r7, #16]
 800b2da:	3318      	adds	r3, #24
 800b2dc:	4618      	mov	r0, r3
 800b2de:	f7fe fa85 	bl	80097ec <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b2e2:	4b1e      	ldr	r3, [pc, #120]	; (800b35c <xTaskRemoveFromEventList+0xb0>)
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d11d      	bne.n	800b326 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b2ea:	693b      	ldr	r3, [r7, #16]
 800b2ec:	3304      	adds	r3, #4
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	f7fe fa7c 	bl	80097ec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b2f4:	693b      	ldr	r3, [r7, #16]
 800b2f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2f8:	4b19      	ldr	r3, [pc, #100]	; (800b360 <xTaskRemoveFromEventList+0xb4>)
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	429a      	cmp	r2, r3
 800b2fe:	d903      	bls.n	800b308 <xTaskRemoveFromEventList+0x5c>
 800b300:	693b      	ldr	r3, [r7, #16]
 800b302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b304:	4a16      	ldr	r2, [pc, #88]	; (800b360 <xTaskRemoveFromEventList+0xb4>)
 800b306:	6013      	str	r3, [r2, #0]
 800b308:	693b      	ldr	r3, [r7, #16]
 800b30a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b30c:	4613      	mov	r3, r2
 800b30e:	009b      	lsls	r3, r3, #2
 800b310:	4413      	add	r3, r2
 800b312:	009b      	lsls	r3, r3, #2
 800b314:	4a13      	ldr	r2, [pc, #76]	; (800b364 <xTaskRemoveFromEventList+0xb8>)
 800b316:	441a      	add	r2, r3
 800b318:	693b      	ldr	r3, [r7, #16]
 800b31a:	3304      	adds	r3, #4
 800b31c:	4619      	mov	r1, r3
 800b31e:	4610      	mov	r0, r2
 800b320:	f7fe fa07 	bl	8009732 <vListInsertEnd>
 800b324:	e005      	b.n	800b332 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b326:	693b      	ldr	r3, [r7, #16]
 800b328:	3318      	adds	r3, #24
 800b32a:	4619      	mov	r1, r3
 800b32c:	480e      	ldr	r0, [pc, #56]	; (800b368 <xTaskRemoveFromEventList+0xbc>)
 800b32e:	f7fe fa00 	bl	8009732 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b332:	693b      	ldr	r3, [r7, #16]
 800b334:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b336:	4b0d      	ldr	r3, [pc, #52]	; (800b36c <xTaskRemoveFromEventList+0xc0>)
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b33c:	429a      	cmp	r2, r3
 800b33e:	d905      	bls.n	800b34c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b340:	2301      	movs	r3, #1
 800b342:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b344:	4b0a      	ldr	r3, [pc, #40]	; (800b370 <xTaskRemoveFromEventList+0xc4>)
 800b346:	2201      	movs	r2, #1
 800b348:	601a      	str	r2, [r3, #0]
 800b34a:	e001      	b.n	800b350 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b34c:	2300      	movs	r3, #0
 800b34e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b350:	697b      	ldr	r3, [r7, #20]
}
 800b352:	4618      	mov	r0, r3
 800b354:	3718      	adds	r7, #24
 800b356:	46bd      	mov	sp, r7
 800b358:	bd80      	pop	{r7, pc}
 800b35a:	bf00      	nop
 800b35c:	20003690 	.word	0x20003690
 800b360:	20003670 	.word	0x20003670
 800b364:	20003198 	.word	0x20003198
 800b368:	20003628 	.word	0x20003628
 800b36c:	20003194 	.word	0x20003194
 800b370:	2000367c 	.word	0x2000367c

0800b374 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b374:	b480      	push	{r7}
 800b376:	b083      	sub	sp, #12
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b37c:	4b06      	ldr	r3, [pc, #24]	; (800b398 <vTaskInternalSetTimeOutState+0x24>)
 800b37e:	681a      	ldr	r2, [r3, #0]
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b384:	4b05      	ldr	r3, [pc, #20]	; (800b39c <vTaskInternalSetTimeOutState+0x28>)
 800b386:	681a      	ldr	r2, [r3, #0]
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	605a      	str	r2, [r3, #4]
}
 800b38c:	bf00      	nop
 800b38e:	370c      	adds	r7, #12
 800b390:	46bd      	mov	sp, r7
 800b392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b396:	4770      	bx	lr
 800b398:	20003680 	.word	0x20003680
 800b39c:	2000366c 	.word	0x2000366c

0800b3a0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b088      	sub	sp, #32
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	6078      	str	r0, [r7, #4]
 800b3a8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d10a      	bne.n	800b3c6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b3b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3b4:	f383 8811 	msr	BASEPRI, r3
 800b3b8:	f3bf 8f6f 	isb	sy
 800b3bc:	f3bf 8f4f 	dsb	sy
 800b3c0:	613b      	str	r3, [r7, #16]
}
 800b3c2:	bf00      	nop
 800b3c4:	e7fe      	b.n	800b3c4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b3c6:	683b      	ldr	r3, [r7, #0]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d10a      	bne.n	800b3e2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b3cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3d0:	f383 8811 	msr	BASEPRI, r3
 800b3d4:	f3bf 8f6f 	isb	sy
 800b3d8:	f3bf 8f4f 	dsb	sy
 800b3dc:	60fb      	str	r3, [r7, #12]
}
 800b3de:	bf00      	nop
 800b3e0:	e7fe      	b.n	800b3e0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b3e2:	f001 f867 	bl	800c4b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b3e6:	4b1d      	ldr	r3, [pc, #116]	; (800b45c <xTaskCheckForTimeOut+0xbc>)
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	685b      	ldr	r3, [r3, #4]
 800b3f0:	69ba      	ldr	r2, [r7, #24]
 800b3f2:	1ad3      	subs	r3, r2, r3
 800b3f4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b3f6:	683b      	ldr	r3, [r7, #0]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3fe:	d102      	bne.n	800b406 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b400:	2300      	movs	r3, #0
 800b402:	61fb      	str	r3, [r7, #28]
 800b404:	e023      	b.n	800b44e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	681a      	ldr	r2, [r3, #0]
 800b40a:	4b15      	ldr	r3, [pc, #84]	; (800b460 <xTaskCheckForTimeOut+0xc0>)
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	429a      	cmp	r2, r3
 800b410:	d007      	beq.n	800b422 <xTaskCheckForTimeOut+0x82>
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	685b      	ldr	r3, [r3, #4]
 800b416:	69ba      	ldr	r2, [r7, #24]
 800b418:	429a      	cmp	r2, r3
 800b41a:	d302      	bcc.n	800b422 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b41c:	2301      	movs	r3, #1
 800b41e:	61fb      	str	r3, [r7, #28]
 800b420:	e015      	b.n	800b44e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b422:	683b      	ldr	r3, [r7, #0]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	697a      	ldr	r2, [r7, #20]
 800b428:	429a      	cmp	r2, r3
 800b42a:	d20b      	bcs.n	800b444 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b42c:	683b      	ldr	r3, [r7, #0]
 800b42e:	681a      	ldr	r2, [r3, #0]
 800b430:	697b      	ldr	r3, [r7, #20]
 800b432:	1ad2      	subs	r2, r2, r3
 800b434:	683b      	ldr	r3, [r7, #0]
 800b436:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b438:	6878      	ldr	r0, [r7, #4]
 800b43a:	f7ff ff9b 	bl	800b374 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b43e:	2300      	movs	r3, #0
 800b440:	61fb      	str	r3, [r7, #28]
 800b442:	e004      	b.n	800b44e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b444:	683b      	ldr	r3, [r7, #0]
 800b446:	2200      	movs	r2, #0
 800b448:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b44a:	2301      	movs	r3, #1
 800b44c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b44e:	f001 f861 	bl	800c514 <vPortExitCritical>

	return xReturn;
 800b452:	69fb      	ldr	r3, [r7, #28]
}
 800b454:	4618      	mov	r0, r3
 800b456:	3720      	adds	r7, #32
 800b458:	46bd      	mov	sp, r7
 800b45a:	bd80      	pop	{r7, pc}
 800b45c:	2000366c 	.word	0x2000366c
 800b460:	20003680 	.word	0x20003680

0800b464 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b464:	b480      	push	{r7}
 800b466:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b468:	4b03      	ldr	r3, [pc, #12]	; (800b478 <vTaskMissedYield+0x14>)
 800b46a:	2201      	movs	r2, #1
 800b46c:	601a      	str	r2, [r3, #0]
}
 800b46e:	bf00      	nop
 800b470:	46bd      	mov	sp, r7
 800b472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b476:	4770      	bx	lr
 800b478:	2000367c 	.word	0x2000367c

0800b47c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b47c:	b580      	push	{r7, lr}
 800b47e:	b082      	sub	sp, #8
 800b480:	af00      	add	r7, sp, #0
 800b482:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b484:	f000 f852 	bl	800b52c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b488:	4b06      	ldr	r3, [pc, #24]	; (800b4a4 <prvIdleTask+0x28>)
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	2b01      	cmp	r3, #1
 800b48e:	d9f9      	bls.n	800b484 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b490:	4b05      	ldr	r3, [pc, #20]	; (800b4a8 <prvIdleTask+0x2c>)
 800b492:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b496:	601a      	str	r2, [r3, #0]
 800b498:	f3bf 8f4f 	dsb	sy
 800b49c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b4a0:	e7f0      	b.n	800b484 <prvIdleTask+0x8>
 800b4a2:	bf00      	nop
 800b4a4:	20003198 	.word	0x20003198
 800b4a8:	e000ed04 	.word	0xe000ed04

0800b4ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b4ac:	b580      	push	{r7, lr}
 800b4ae:	b082      	sub	sp, #8
 800b4b0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	607b      	str	r3, [r7, #4]
 800b4b6:	e00c      	b.n	800b4d2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b4b8:	687a      	ldr	r2, [r7, #4]
 800b4ba:	4613      	mov	r3, r2
 800b4bc:	009b      	lsls	r3, r3, #2
 800b4be:	4413      	add	r3, r2
 800b4c0:	009b      	lsls	r3, r3, #2
 800b4c2:	4a12      	ldr	r2, [pc, #72]	; (800b50c <prvInitialiseTaskLists+0x60>)
 800b4c4:	4413      	add	r3, r2
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	f7fe f906 	bl	80096d8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	3301      	adds	r3, #1
 800b4d0:	607b      	str	r3, [r7, #4]
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	2b37      	cmp	r3, #55	; 0x37
 800b4d6:	d9ef      	bls.n	800b4b8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b4d8:	480d      	ldr	r0, [pc, #52]	; (800b510 <prvInitialiseTaskLists+0x64>)
 800b4da:	f7fe f8fd 	bl	80096d8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b4de:	480d      	ldr	r0, [pc, #52]	; (800b514 <prvInitialiseTaskLists+0x68>)
 800b4e0:	f7fe f8fa 	bl	80096d8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b4e4:	480c      	ldr	r0, [pc, #48]	; (800b518 <prvInitialiseTaskLists+0x6c>)
 800b4e6:	f7fe f8f7 	bl	80096d8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b4ea:	480c      	ldr	r0, [pc, #48]	; (800b51c <prvInitialiseTaskLists+0x70>)
 800b4ec:	f7fe f8f4 	bl	80096d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b4f0:	480b      	ldr	r0, [pc, #44]	; (800b520 <prvInitialiseTaskLists+0x74>)
 800b4f2:	f7fe f8f1 	bl	80096d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b4f6:	4b0b      	ldr	r3, [pc, #44]	; (800b524 <prvInitialiseTaskLists+0x78>)
 800b4f8:	4a05      	ldr	r2, [pc, #20]	; (800b510 <prvInitialiseTaskLists+0x64>)
 800b4fa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b4fc:	4b0a      	ldr	r3, [pc, #40]	; (800b528 <prvInitialiseTaskLists+0x7c>)
 800b4fe:	4a05      	ldr	r2, [pc, #20]	; (800b514 <prvInitialiseTaskLists+0x68>)
 800b500:	601a      	str	r2, [r3, #0]
}
 800b502:	bf00      	nop
 800b504:	3708      	adds	r7, #8
 800b506:	46bd      	mov	sp, r7
 800b508:	bd80      	pop	{r7, pc}
 800b50a:	bf00      	nop
 800b50c:	20003198 	.word	0x20003198
 800b510:	200035f8 	.word	0x200035f8
 800b514:	2000360c 	.word	0x2000360c
 800b518:	20003628 	.word	0x20003628
 800b51c:	2000363c 	.word	0x2000363c
 800b520:	20003654 	.word	0x20003654
 800b524:	20003620 	.word	0x20003620
 800b528:	20003624 	.word	0x20003624

0800b52c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b082      	sub	sp, #8
 800b530:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b532:	e019      	b.n	800b568 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b534:	f000 ffbe 	bl	800c4b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b538:	4b10      	ldr	r3, [pc, #64]	; (800b57c <prvCheckTasksWaitingTermination+0x50>)
 800b53a:	68db      	ldr	r3, [r3, #12]
 800b53c:	68db      	ldr	r3, [r3, #12]
 800b53e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	3304      	adds	r3, #4
 800b544:	4618      	mov	r0, r3
 800b546:	f7fe f951 	bl	80097ec <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b54a:	4b0d      	ldr	r3, [pc, #52]	; (800b580 <prvCheckTasksWaitingTermination+0x54>)
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	3b01      	subs	r3, #1
 800b550:	4a0b      	ldr	r2, [pc, #44]	; (800b580 <prvCheckTasksWaitingTermination+0x54>)
 800b552:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b554:	4b0b      	ldr	r3, [pc, #44]	; (800b584 <prvCheckTasksWaitingTermination+0x58>)
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	3b01      	subs	r3, #1
 800b55a:	4a0a      	ldr	r2, [pc, #40]	; (800b584 <prvCheckTasksWaitingTermination+0x58>)
 800b55c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b55e:	f000 ffd9 	bl	800c514 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b562:	6878      	ldr	r0, [r7, #4]
 800b564:	f000 f810 	bl	800b588 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b568:	4b06      	ldr	r3, [pc, #24]	; (800b584 <prvCheckTasksWaitingTermination+0x58>)
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d1e1      	bne.n	800b534 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b570:	bf00      	nop
 800b572:	bf00      	nop
 800b574:	3708      	adds	r7, #8
 800b576:	46bd      	mov	sp, r7
 800b578:	bd80      	pop	{r7, pc}
 800b57a:	bf00      	nop
 800b57c:	2000363c 	.word	0x2000363c
 800b580:	20003668 	.word	0x20003668
 800b584:	20003650 	.word	0x20003650

0800b588 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b588:	b580      	push	{r7, lr}
 800b58a:	b084      	sub	sp, #16
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b596:	2b00      	cmp	r3, #0
 800b598:	d108      	bne.n	800b5ac <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b59e:	4618      	mov	r0, r3
 800b5a0:	f001 f976 	bl	800c890 <vPortFree>
				vPortFree( pxTCB );
 800b5a4:	6878      	ldr	r0, [r7, #4]
 800b5a6:	f001 f973 	bl	800c890 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b5aa:	e018      	b.n	800b5de <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b5b2:	2b01      	cmp	r3, #1
 800b5b4:	d103      	bne.n	800b5be <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b5b6:	6878      	ldr	r0, [r7, #4]
 800b5b8:	f001 f96a 	bl	800c890 <vPortFree>
	}
 800b5bc:	e00f      	b.n	800b5de <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b5c4:	2b02      	cmp	r3, #2
 800b5c6:	d00a      	beq.n	800b5de <prvDeleteTCB+0x56>
	__asm volatile
 800b5c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5cc:	f383 8811 	msr	BASEPRI, r3
 800b5d0:	f3bf 8f6f 	isb	sy
 800b5d4:	f3bf 8f4f 	dsb	sy
 800b5d8:	60fb      	str	r3, [r7, #12]
}
 800b5da:	bf00      	nop
 800b5dc:	e7fe      	b.n	800b5dc <prvDeleteTCB+0x54>
	}
 800b5de:	bf00      	nop
 800b5e0:	3710      	adds	r7, #16
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	bd80      	pop	{r7, pc}
	...

0800b5e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b5e8:	b480      	push	{r7}
 800b5ea:	b083      	sub	sp, #12
 800b5ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b5ee:	4b0c      	ldr	r3, [pc, #48]	; (800b620 <prvResetNextTaskUnblockTime+0x38>)
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d104      	bne.n	800b602 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b5f8:	4b0a      	ldr	r3, [pc, #40]	; (800b624 <prvResetNextTaskUnblockTime+0x3c>)
 800b5fa:	f04f 32ff 	mov.w	r2, #4294967295
 800b5fe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b600:	e008      	b.n	800b614 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b602:	4b07      	ldr	r3, [pc, #28]	; (800b620 <prvResetNextTaskUnblockTime+0x38>)
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	68db      	ldr	r3, [r3, #12]
 800b608:	68db      	ldr	r3, [r3, #12]
 800b60a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	685b      	ldr	r3, [r3, #4]
 800b610:	4a04      	ldr	r2, [pc, #16]	; (800b624 <prvResetNextTaskUnblockTime+0x3c>)
 800b612:	6013      	str	r3, [r2, #0]
}
 800b614:	bf00      	nop
 800b616:	370c      	adds	r7, #12
 800b618:	46bd      	mov	sp, r7
 800b61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61e:	4770      	bx	lr
 800b620:	20003620 	.word	0x20003620
 800b624:	20003688 	.word	0x20003688

0800b628 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800b628:	b480      	push	{r7}
 800b62a:	b083      	sub	sp, #12
 800b62c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800b62e:	4b05      	ldr	r3, [pc, #20]	; (800b644 <xTaskGetCurrentTaskHandle+0x1c>)
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	607b      	str	r3, [r7, #4]

		return xReturn;
 800b634:	687b      	ldr	r3, [r7, #4]
	}
 800b636:	4618      	mov	r0, r3
 800b638:	370c      	adds	r7, #12
 800b63a:	46bd      	mov	sp, r7
 800b63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b640:	4770      	bx	lr
 800b642:	bf00      	nop
 800b644:	20003194 	.word	0x20003194

0800b648 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b648:	b480      	push	{r7}
 800b64a:	b083      	sub	sp, #12
 800b64c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b64e:	4b0b      	ldr	r3, [pc, #44]	; (800b67c <xTaskGetSchedulerState+0x34>)
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d102      	bne.n	800b65c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b656:	2301      	movs	r3, #1
 800b658:	607b      	str	r3, [r7, #4]
 800b65a:	e008      	b.n	800b66e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b65c:	4b08      	ldr	r3, [pc, #32]	; (800b680 <xTaskGetSchedulerState+0x38>)
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d102      	bne.n	800b66a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b664:	2302      	movs	r3, #2
 800b666:	607b      	str	r3, [r7, #4]
 800b668:	e001      	b.n	800b66e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b66a:	2300      	movs	r3, #0
 800b66c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b66e:	687b      	ldr	r3, [r7, #4]
	}
 800b670:	4618      	mov	r0, r3
 800b672:	370c      	adds	r7, #12
 800b674:	46bd      	mov	sp, r7
 800b676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b67a:	4770      	bx	lr
 800b67c:	20003674 	.word	0x20003674
 800b680:	20003690 	.word	0x20003690

0800b684 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b684:	b580      	push	{r7, lr}
 800b686:	b084      	sub	sp, #16
 800b688:	af00      	add	r7, sp, #0
 800b68a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b690:	2300      	movs	r3, #0
 800b692:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d051      	beq.n	800b73e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b69a:	68bb      	ldr	r3, [r7, #8]
 800b69c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b69e:	4b2a      	ldr	r3, [pc, #168]	; (800b748 <xTaskPriorityInherit+0xc4>)
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6a4:	429a      	cmp	r2, r3
 800b6a6:	d241      	bcs.n	800b72c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b6a8:	68bb      	ldr	r3, [r7, #8]
 800b6aa:	699b      	ldr	r3, [r3, #24]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	db06      	blt.n	800b6be <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b6b0:	4b25      	ldr	r3, [pc, #148]	; (800b748 <xTaskPriorityInherit+0xc4>)
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6b6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b6ba:	68bb      	ldr	r3, [r7, #8]
 800b6bc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b6be:	68bb      	ldr	r3, [r7, #8]
 800b6c0:	6959      	ldr	r1, [r3, #20]
 800b6c2:	68bb      	ldr	r3, [r7, #8]
 800b6c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6c6:	4613      	mov	r3, r2
 800b6c8:	009b      	lsls	r3, r3, #2
 800b6ca:	4413      	add	r3, r2
 800b6cc:	009b      	lsls	r3, r3, #2
 800b6ce:	4a1f      	ldr	r2, [pc, #124]	; (800b74c <xTaskPriorityInherit+0xc8>)
 800b6d0:	4413      	add	r3, r2
 800b6d2:	4299      	cmp	r1, r3
 800b6d4:	d122      	bne.n	800b71c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b6d6:	68bb      	ldr	r3, [r7, #8]
 800b6d8:	3304      	adds	r3, #4
 800b6da:	4618      	mov	r0, r3
 800b6dc:	f7fe f886 	bl	80097ec <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b6e0:	4b19      	ldr	r3, [pc, #100]	; (800b748 <xTaskPriorityInherit+0xc4>)
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6e6:	68bb      	ldr	r3, [r7, #8]
 800b6e8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b6ea:	68bb      	ldr	r3, [r7, #8]
 800b6ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6ee:	4b18      	ldr	r3, [pc, #96]	; (800b750 <xTaskPriorityInherit+0xcc>)
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	429a      	cmp	r2, r3
 800b6f4:	d903      	bls.n	800b6fe <xTaskPriorityInherit+0x7a>
 800b6f6:	68bb      	ldr	r3, [r7, #8]
 800b6f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6fa:	4a15      	ldr	r2, [pc, #84]	; (800b750 <xTaskPriorityInherit+0xcc>)
 800b6fc:	6013      	str	r3, [r2, #0]
 800b6fe:	68bb      	ldr	r3, [r7, #8]
 800b700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b702:	4613      	mov	r3, r2
 800b704:	009b      	lsls	r3, r3, #2
 800b706:	4413      	add	r3, r2
 800b708:	009b      	lsls	r3, r3, #2
 800b70a:	4a10      	ldr	r2, [pc, #64]	; (800b74c <xTaskPriorityInherit+0xc8>)
 800b70c:	441a      	add	r2, r3
 800b70e:	68bb      	ldr	r3, [r7, #8]
 800b710:	3304      	adds	r3, #4
 800b712:	4619      	mov	r1, r3
 800b714:	4610      	mov	r0, r2
 800b716:	f7fe f80c 	bl	8009732 <vListInsertEnd>
 800b71a:	e004      	b.n	800b726 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b71c:	4b0a      	ldr	r3, [pc, #40]	; (800b748 <xTaskPriorityInherit+0xc4>)
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b722:	68bb      	ldr	r3, [r7, #8]
 800b724:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b726:	2301      	movs	r3, #1
 800b728:	60fb      	str	r3, [r7, #12]
 800b72a:	e008      	b.n	800b73e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b72c:	68bb      	ldr	r3, [r7, #8]
 800b72e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b730:	4b05      	ldr	r3, [pc, #20]	; (800b748 <xTaskPriorityInherit+0xc4>)
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b736:	429a      	cmp	r2, r3
 800b738:	d201      	bcs.n	800b73e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b73a:	2301      	movs	r3, #1
 800b73c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b73e:	68fb      	ldr	r3, [r7, #12]
	}
 800b740:	4618      	mov	r0, r3
 800b742:	3710      	adds	r7, #16
 800b744:	46bd      	mov	sp, r7
 800b746:	bd80      	pop	{r7, pc}
 800b748:	20003194 	.word	0x20003194
 800b74c:	20003198 	.word	0x20003198
 800b750:	20003670 	.word	0x20003670

0800b754 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b754:	b580      	push	{r7, lr}
 800b756:	b086      	sub	sp, #24
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b760:	2300      	movs	r3, #0
 800b762:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	2b00      	cmp	r3, #0
 800b768:	d056      	beq.n	800b818 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b76a:	4b2e      	ldr	r3, [pc, #184]	; (800b824 <xTaskPriorityDisinherit+0xd0>)
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	693a      	ldr	r2, [r7, #16]
 800b770:	429a      	cmp	r2, r3
 800b772:	d00a      	beq.n	800b78a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b774:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b778:	f383 8811 	msr	BASEPRI, r3
 800b77c:	f3bf 8f6f 	isb	sy
 800b780:	f3bf 8f4f 	dsb	sy
 800b784:	60fb      	str	r3, [r7, #12]
}
 800b786:	bf00      	nop
 800b788:	e7fe      	b.n	800b788 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b78a:	693b      	ldr	r3, [r7, #16]
 800b78c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d10a      	bne.n	800b7a8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b792:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b796:	f383 8811 	msr	BASEPRI, r3
 800b79a:	f3bf 8f6f 	isb	sy
 800b79e:	f3bf 8f4f 	dsb	sy
 800b7a2:	60bb      	str	r3, [r7, #8]
}
 800b7a4:	bf00      	nop
 800b7a6:	e7fe      	b.n	800b7a6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b7a8:	693b      	ldr	r3, [r7, #16]
 800b7aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7ac:	1e5a      	subs	r2, r3, #1
 800b7ae:	693b      	ldr	r3, [r7, #16]
 800b7b0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b7b2:	693b      	ldr	r3, [r7, #16]
 800b7b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7b6:	693b      	ldr	r3, [r7, #16]
 800b7b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b7ba:	429a      	cmp	r2, r3
 800b7bc:	d02c      	beq.n	800b818 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b7be:	693b      	ldr	r3, [r7, #16]
 800b7c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d128      	bne.n	800b818 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b7c6:	693b      	ldr	r3, [r7, #16]
 800b7c8:	3304      	adds	r3, #4
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	f7fe f80e 	bl	80097ec <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b7d0:	693b      	ldr	r3, [r7, #16]
 800b7d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b7d4:	693b      	ldr	r3, [r7, #16]
 800b7d6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b7d8:	693b      	ldr	r3, [r7, #16]
 800b7da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7dc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b7e0:	693b      	ldr	r3, [r7, #16]
 800b7e2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b7e4:	693b      	ldr	r3, [r7, #16]
 800b7e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7e8:	4b0f      	ldr	r3, [pc, #60]	; (800b828 <xTaskPriorityDisinherit+0xd4>)
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	429a      	cmp	r2, r3
 800b7ee:	d903      	bls.n	800b7f8 <xTaskPriorityDisinherit+0xa4>
 800b7f0:	693b      	ldr	r3, [r7, #16]
 800b7f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7f4:	4a0c      	ldr	r2, [pc, #48]	; (800b828 <xTaskPriorityDisinherit+0xd4>)
 800b7f6:	6013      	str	r3, [r2, #0]
 800b7f8:	693b      	ldr	r3, [r7, #16]
 800b7fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7fc:	4613      	mov	r3, r2
 800b7fe:	009b      	lsls	r3, r3, #2
 800b800:	4413      	add	r3, r2
 800b802:	009b      	lsls	r3, r3, #2
 800b804:	4a09      	ldr	r2, [pc, #36]	; (800b82c <xTaskPriorityDisinherit+0xd8>)
 800b806:	441a      	add	r2, r3
 800b808:	693b      	ldr	r3, [r7, #16]
 800b80a:	3304      	adds	r3, #4
 800b80c:	4619      	mov	r1, r3
 800b80e:	4610      	mov	r0, r2
 800b810:	f7fd ff8f 	bl	8009732 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b814:	2301      	movs	r3, #1
 800b816:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b818:	697b      	ldr	r3, [r7, #20]
	}
 800b81a:	4618      	mov	r0, r3
 800b81c:	3718      	adds	r7, #24
 800b81e:	46bd      	mov	sp, r7
 800b820:	bd80      	pop	{r7, pc}
 800b822:	bf00      	nop
 800b824:	20003194 	.word	0x20003194
 800b828:	20003670 	.word	0x20003670
 800b82c:	20003198 	.word	0x20003198

0800b830 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b830:	b580      	push	{r7, lr}
 800b832:	b088      	sub	sp, #32
 800b834:	af00      	add	r7, sp, #0
 800b836:	6078      	str	r0, [r7, #4]
 800b838:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b83e:	2301      	movs	r3, #1
 800b840:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d06a      	beq.n	800b91e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b848:	69bb      	ldr	r3, [r7, #24]
 800b84a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d10a      	bne.n	800b866 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800b850:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b854:	f383 8811 	msr	BASEPRI, r3
 800b858:	f3bf 8f6f 	isb	sy
 800b85c:	f3bf 8f4f 	dsb	sy
 800b860:	60fb      	str	r3, [r7, #12]
}
 800b862:	bf00      	nop
 800b864:	e7fe      	b.n	800b864 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b866:	69bb      	ldr	r3, [r7, #24]
 800b868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b86a:	683a      	ldr	r2, [r7, #0]
 800b86c:	429a      	cmp	r2, r3
 800b86e:	d902      	bls.n	800b876 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b870:	683b      	ldr	r3, [r7, #0]
 800b872:	61fb      	str	r3, [r7, #28]
 800b874:	e002      	b.n	800b87c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b876:	69bb      	ldr	r3, [r7, #24]
 800b878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b87a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b87c:	69bb      	ldr	r3, [r7, #24]
 800b87e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b880:	69fa      	ldr	r2, [r7, #28]
 800b882:	429a      	cmp	r2, r3
 800b884:	d04b      	beq.n	800b91e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b886:	69bb      	ldr	r3, [r7, #24]
 800b888:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b88a:	697a      	ldr	r2, [r7, #20]
 800b88c:	429a      	cmp	r2, r3
 800b88e:	d146      	bne.n	800b91e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b890:	4b25      	ldr	r3, [pc, #148]	; (800b928 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	69ba      	ldr	r2, [r7, #24]
 800b896:	429a      	cmp	r2, r3
 800b898:	d10a      	bne.n	800b8b0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800b89a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b89e:	f383 8811 	msr	BASEPRI, r3
 800b8a2:	f3bf 8f6f 	isb	sy
 800b8a6:	f3bf 8f4f 	dsb	sy
 800b8aa:	60bb      	str	r3, [r7, #8]
}
 800b8ac:	bf00      	nop
 800b8ae:	e7fe      	b.n	800b8ae <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b8b0:	69bb      	ldr	r3, [r7, #24]
 800b8b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8b4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b8b6:	69bb      	ldr	r3, [r7, #24]
 800b8b8:	69fa      	ldr	r2, [r7, #28]
 800b8ba:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b8bc:	69bb      	ldr	r3, [r7, #24]
 800b8be:	699b      	ldr	r3, [r3, #24]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	db04      	blt.n	800b8ce <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b8c4:	69fb      	ldr	r3, [r7, #28]
 800b8c6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b8ca:	69bb      	ldr	r3, [r7, #24]
 800b8cc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b8ce:	69bb      	ldr	r3, [r7, #24]
 800b8d0:	6959      	ldr	r1, [r3, #20]
 800b8d2:	693a      	ldr	r2, [r7, #16]
 800b8d4:	4613      	mov	r3, r2
 800b8d6:	009b      	lsls	r3, r3, #2
 800b8d8:	4413      	add	r3, r2
 800b8da:	009b      	lsls	r3, r3, #2
 800b8dc:	4a13      	ldr	r2, [pc, #76]	; (800b92c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b8de:	4413      	add	r3, r2
 800b8e0:	4299      	cmp	r1, r3
 800b8e2:	d11c      	bne.n	800b91e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b8e4:	69bb      	ldr	r3, [r7, #24]
 800b8e6:	3304      	adds	r3, #4
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	f7fd ff7f 	bl	80097ec <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b8ee:	69bb      	ldr	r3, [r7, #24]
 800b8f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8f2:	4b0f      	ldr	r3, [pc, #60]	; (800b930 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	429a      	cmp	r2, r3
 800b8f8:	d903      	bls.n	800b902 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800b8fa:	69bb      	ldr	r3, [r7, #24]
 800b8fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8fe:	4a0c      	ldr	r2, [pc, #48]	; (800b930 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b900:	6013      	str	r3, [r2, #0]
 800b902:	69bb      	ldr	r3, [r7, #24]
 800b904:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b906:	4613      	mov	r3, r2
 800b908:	009b      	lsls	r3, r3, #2
 800b90a:	4413      	add	r3, r2
 800b90c:	009b      	lsls	r3, r3, #2
 800b90e:	4a07      	ldr	r2, [pc, #28]	; (800b92c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b910:	441a      	add	r2, r3
 800b912:	69bb      	ldr	r3, [r7, #24]
 800b914:	3304      	adds	r3, #4
 800b916:	4619      	mov	r1, r3
 800b918:	4610      	mov	r0, r2
 800b91a:	f7fd ff0a 	bl	8009732 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b91e:	bf00      	nop
 800b920:	3720      	adds	r7, #32
 800b922:	46bd      	mov	sp, r7
 800b924:	bd80      	pop	{r7, pc}
 800b926:	bf00      	nop
 800b928:	20003194 	.word	0x20003194
 800b92c:	20003198 	.word	0x20003198
 800b930:	20003670 	.word	0x20003670

0800b934 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800b934:	b480      	push	{r7}
 800b936:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b938:	4b07      	ldr	r3, [pc, #28]	; (800b958 <pvTaskIncrementMutexHeldCount+0x24>)
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d004      	beq.n	800b94a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b940:	4b05      	ldr	r3, [pc, #20]	; (800b958 <pvTaskIncrementMutexHeldCount+0x24>)
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b946:	3201      	adds	r2, #1
 800b948:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800b94a:	4b03      	ldr	r3, [pc, #12]	; (800b958 <pvTaskIncrementMutexHeldCount+0x24>)
 800b94c:	681b      	ldr	r3, [r3, #0]
	}
 800b94e:	4618      	mov	r0, r3
 800b950:	46bd      	mov	sp, r7
 800b952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b956:	4770      	bx	lr
 800b958:	20003194 	.word	0x20003194

0800b95c <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800b95c:	b580      	push	{r7, lr}
 800b95e:	b08e      	sub	sp, #56	; 0x38
 800b960:	af00      	add	r7, sp, #0
 800b962:	60f8      	str	r0, [r7, #12]
 800b964:	60b9      	str	r1, [r7, #8]
 800b966:	603b      	str	r3, [r7, #0]
 800b968:	4613      	mov	r3, r2
 800b96a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800b96c:	2301      	movs	r3, #1
 800b96e:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d10a      	bne.n	800b98c <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800b976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b97a:	f383 8811 	msr	BASEPRI, r3
 800b97e:	f3bf 8f6f 	isb	sy
 800b982:	f3bf 8f4f 	dsb	sy
 800b986:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b988:	bf00      	nop
 800b98a:	e7fe      	b.n	800b98a <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b98c:	f000 fe74 	bl	800c678 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800b994:	f3ef 8211 	mrs	r2, BASEPRI
 800b998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b99c:	f383 8811 	msr	BASEPRI, r3
 800b9a0:	f3bf 8f6f 	isb	sy
 800b9a4:	f3bf 8f4f 	dsb	sy
 800b9a8:	623a      	str	r2, [r7, #32]
 800b9aa:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800b9ac:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b9ae:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800b9b0:	683b      	ldr	r3, [r7, #0]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d003      	beq.n	800b9be <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800b9b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b9ba:	683b      	ldr	r3, [r7, #0]
 800b9bc:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800b9be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9c0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800b9c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800b9c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9ca:	2202      	movs	r2, #2
 800b9cc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800b9d0:	79fb      	ldrb	r3, [r7, #7]
 800b9d2:	2b04      	cmp	r3, #4
 800b9d4:	d828      	bhi.n	800ba28 <xTaskGenericNotifyFromISR+0xcc>
 800b9d6:	a201      	add	r2, pc, #4	; (adr r2, 800b9dc <xTaskGenericNotifyFromISR+0x80>)
 800b9d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9dc:	0800ba49 	.word	0x0800ba49
 800b9e0:	0800b9f1 	.word	0x0800b9f1
 800b9e4:	0800b9ff 	.word	0x0800b9ff
 800b9e8:	0800ba0b 	.word	0x0800ba0b
 800b9ec:	0800ba13 	.word	0x0800ba13
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800b9f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9f2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b9f4:	68bb      	ldr	r3, [r7, #8]
 800b9f6:	431a      	orrs	r2, r3
 800b9f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9fa:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800b9fc:	e027      	b.n	800ba4e <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800b9fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba02:	1c5a      	adds	r2, r3, #1
 800ba04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba06:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800ba08:	e021      	b.n	800ba4e <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800ba0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba0c:	68ba      	ldr	r2, [r7, #8]
 800ba0e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800ba10:	e01d      	b.n	800ba4e <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800ba12:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ba16:	2b02      	cmp	r3, #2
 800ba18:	d003      	beq.n	800ba22 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800ba1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba1c:	68ba      	ldr	r2, [r7, #8]
 800ba1e:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800ba20:	e015      	b.n	800ba4e <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 800ba22:	2300      	movs	r3, #0
 800ba24:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800ba26:	e012      	b.n	800ba4e <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800ba28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba30:	d00c      	beq.n	800ba4c <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 800ba32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba36:	f383 8811 	msr	BASEPRI, r3
 800ba3a:	f3bf 8f6f 	isb	sy
 800ba3e:	f3bf 8f4f 	dsb	sy
 800ba42:	61bb      	str	r3, [r7, #24]
}
 800ba44:	bf00      	nop
 800ba46:	e7fe      	b.n	800ba46 <xTaskGenericNotifyFromISR+0xea>
					break;
 800ba48:	bf00      	nop
 800ba4a:	e000      	b.n	800ba4e <xTaskGenericNotifyFromISR+0xf2>
					break;
 800ba4c:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800ba4e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ba52:	2b01      	cmp	r3, #1
 800ba54:	d146      	bne.n	800bae4 <xTaskGenericNotifyFromISR+0x188>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800ba56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d00a      	beq.n	800ba74 <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 800ba5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba62:	f383 8811 	msr	BASEPRI, r3
 800ba66:	f3bf 8f6f 	isb	sy
 800ba6a:	f3bf 8f4f 	dsb	sy
 800ba6e:	617b      	str	r3, [r7, #20]
}
 800ba70:	bf00      	nop
 800ba72:	e7fe      	b.n	800ba72 <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ba74:	4b21      	ldr	r3, [pc, #132]	; (800bafc <xTaskGenericNotifyFromISR+0x1a0>)
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d11d      	bne.n	800bab8 <xTaskGenericNotifyFromISR+0x15c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ba7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba7e:	3304      	adds	r3, #4
 800ba80:	4618      	mov	r0, r3
 800ba82:	f7fd feb3 	bl	80097ec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ba86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba8a:	4b1d      	ldr	r3, [pc, #116]	; (800bb00 <xTaskGenericNotifyFromISR+0x1a4>)
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	429a      	cmp	r2, r3
 800ba90:	d903      	bls.n	800ba9a <xTaskGenericNotifyFromISR+0x13e>
 800ba92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba96:	4a1a      	ldr	r2, [pc, #104]	; (800bb00 <xTaskGenericNotifyFromISR+0x1a4>)
 800ba98:	6013      	str	r3, [r2, #0]
 800ba9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba9e:	4613      	mov	r3, r2
 800baa0:	009b      	lsls	r3, r3, #2
 800baa2:	4413      	add	r3, r2
 800baa4:	009b      	lsls	r3, r3, #2
 800baa6:	4a17      	ldr	r2, [pc, #92]	; (800bb04 <xTaskGenericNotifyFromISR+0x1a8>)
 800baa8:	441a      	add	r2, r3
 800baaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baac:	3304      	adds	r3, #4
 800baae:	4619      	mov	r1, r3
 800bab0:	4610      	mov	r0, r2
 800bab2:	f7fd fe3e 	bl	8009732 <vListInsertEnd>
 800bab6:	e005      	b.n	800bac4 <xTaskGenericNotifyFromISR+0x168>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800bab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baba:	3318      	adds	r3, #24
 800babc:	4619      	mov	r1, r3
 800babe:	4812      	ldr	r0, [pc, #72]	; (800bb08 <xTaskGenericNotifyFromISR+0x1ac>)
 800bac0:	f7fd fe37 	bl	8009732 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bac8:	4b10      	ldr	r3, [pc, #64]	; (800bb0c <xTaskGenericNotifyFromISR+0x1b0>)
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bace:	429a      	cmp	r2, r3
 800bad0:	d908      	bls.n	800bae4 <xTaskGenericNotifyFromISR+0x188>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800bad2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d002      	beq.n	800bade <xTaskGenericNotifyFromISR+0x182>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800bad8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bada:	2201      	movs	r2, #1
 800badc:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800bade:	4b0c      	ldr	r3, [pc, #48]	; (800bb10 <xTaskGenericNotifyFromISR+0x1b4>)
 800bae0:	2201      	movs	r2, #1
 800bae2:	601a      	str	r2, [r3, #0]
 800bae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bae6:	613b      	str	r3, [r7, #16]
	__asm volatile
 800bae8:	693b      	ldr	r3, [r7, #16]
 800baea:	f383 8811 	msr	BASEPRI, r3
}
 800baee:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800baf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800baf2:	4618      	mov	r0, r3
 800baf4:	3738      	adds	r7, #56	; 0x38
 800baf6:	46bd      	mov	sp, r7
 800baf8:	bd80      	pop	{r7, pc}
 800bafa:	bf00      	nop
 800bafc:	20003690 	.word	0x20003690
 800bb00:	20003670 	.word	0x20003670
 800bb04:	20003198 	.word	0x20003198
 800bb08:	20003628 	.word	0x20003628
 800bb0c:	20003194 	.word	0x20003194
 800bb10:	2000367c 	.word	0x2000367c

0800bb14 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b084      	sub	sp, #16
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	6078      	str	r0, [r7, #4]
 800bb1c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bb1e:	4b21      	ldr	r3, [pc, #132]	; (800bba4 <prvAddCurrentTaskToDelayedList+0x90>)
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bb24:	4b20      	ldr	r3, [pc, #128]	; (800bba8 <prvAddCurrentTaskToDelayedList+0x94>)
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	3304      	adds	r3, #4
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	f7fd fe5e 	bl	80097ec <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb36:	d10a      	bne.n	800bb4e <prvAddCurrentTaskToDelayedList+0x3a>
 800bb38:	683b      	ldr	r3, [r7, #0]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d007      	beq.n	800bb4e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bb3e:	4b1a      	ldr	r3, [pc, #104]	; (800bba8 <prvAddCurrentTaskToDelayedList+0x94>)
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	3304      	adds	r3, #4
 800bb44:	4619      	mov	r1, r3
 800bb46:	4819      	ldr	r0, [pc, #100]	; (800bbac <prvAddCurrentTaskToDelayedList+0x98>)
 800bb48:	f7fd fdf3 	bl	8009732 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bb4c:	e026      	b.n	800bb9c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bb4e:	68fa      	ldr	r2, [r7, #12]
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	4413      	add	r3, r2
 800bb54:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bb56:	4b14      	ldr	r3, [pc, #80]	; (800bba8 <prvAddCurrentTaskToDelayedList+0x94>)
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	68ba      	ldr	r2, [r7, #8]
 800bb5c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bb5e:	68ba      	ldr	r2, [r7, #8]
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	429a      	cmp	r2, r3
 800bb64:	d209      	bcs.n	800bb7a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bb66:	4b12      	ldr	r3, [pc, #72]	; (800bbb0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800bb68:	681a      	ldr	r2, [r3, #0]
 800bb6a:	4b0f      	ldr	r3, [pc, #60]	; (800bba8 <prvAddCurrentTaskToDelayedList+0x94>)
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	3304      	adds	r3, #4
 800bb70:	4619      	mov	r1, r3
 800bb72:	4610      	mov	r0, r2
 800bb74:	f7fd fe01 	bl	800977a <vListInsert>
}
 800bb78:	e010      	b.n	800bb9c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bb7a:	4b0e      	ldr	r3, [pc, #56]	; (800bbb4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800bb7c:	681a      	ldr	r2, [r3, #0]
 800bb7e:	4b0a      	ldr	r3, [pc, #40]	; (800bba8 <prvAddCurrentTaskToDelayedList+0x94>)
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	3304      	adds	r3, #4
 800bb84:	4619      	mov	r1, r3
 800bb86:	4610      	mov	r0, r2
 800bb88:	f7fd fdf7 	bl	800977a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bb8c:	4b0a      	ldr	r3, [pc, #40]	; (800bbb8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	68ba      	ldr	r2, [r7, #8]
 800bb92:	429a      	cmp	r2, r3
 800bb94:	d202      	bcs.n	800bb9c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bb96:	4a08      	ldr	r2, [pc, #32]	; (800bbb8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bb98:	68bb      	ldr	r3, [r7, #8]
 800bb9a:	6013      	str	r3, [r2, #0]
}
 800bb9c:	bf00      	nop
 800bb9e:	3710      	adds	r7, #16
 800bba0:	46bd      	mov	sp, r7
 800bba2:	bd80      	pop	{r7, pc}
 800bba4:	2000366c 	.word	0x2000366c
 800bba8:	20003194 	.word	0x20003194
 800bbac:	20003654 	.word	0x20003654
 800bbb0:	20003624 	.word	0x20003624
 800bbb4:	20003620 	.word	0x20003620
 800bbb8:	20003688 	.word	0x20003688

0800bbbc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b08a      	sub	sp, #40	; 0x28
 800bbc0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bbc6:	f000 fb07 	bl	800c1d8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bbca:	4b1c      	ldr	r3, [pc, #112]	; (800bc3c <xTimerCreateTimerTask+0x80>)
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d021      	beq.n	800bc16 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bbd2:	2300      	movs	r3, #0
 800bbd4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bbda:	1d3a      	adds	r2, r7, #4
 800bbdc:	f107 0108 	add.w	r1, r7, #8
 800bbe0:	f107 030c 	add.w	r3, r7, #12
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	f7fd fd5d 	bl	80096a4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bbea:	6879      	ldr	r1, [r7, #4]
 800bbec:	68bb      	ldr	r3, [r7, #8]
 800bbee:	68fa      	ldr	r2, [r7, #12]
 800bbf0:	9202      	str	r2, [sp, #8]
 800bbf2:	9301      	str	r3, [sp, #4]
 800bbf4:	2302      	movs	r3, #2
 800bbf6:	9300      	str	r3, [sp, #0]
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	460a      	mov	r2, r1
 800bbfc:	4910      	ldr	r1, [pc, #64]	; (800bc40 <xTimerCreateTimerTask+0x84>)
 800bbfe:	4811      	ldr	r0, [pc, #68]	; (800bc44 <xTimerCreateTimerTask+0x88>)
 800bc00:	f7fe fee2 	bl	800a9c8 <xTaskCreateStatic>
 800bc04:	4603      	mov	r3, r0
 800bc06:	4a10      	ldr	r2, [pc, #64]	; (800bc48 <xTimerCreateTimerTask+0x8c>)
 800bc08:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bc0a:	4b0f      	ldr	r3, [pc, #60]	; (800bc48 <xTimerCreateTimerTask+0x8c>)
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d001      	beq.n	800bc16 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bc12:	2301      	movs	r3, #1
 800bc14:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bc16:	697b      	ldr	r3, [r7, #20]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d10a      	bne.n	800bc32 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800bc1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc20:	f383 8811 	msr	BASEPRI, r3
 800bc24:	f3bf 8f6f 	isb	sy
 800bc28:	f3bf 8f4f 	dsb	sy
 800bc2c:	613b      	str	r3, [r7, #16]
}
 800bc2e:	bf00      	nop
 800bc30:	e7fe      	b.n	800bc30 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bc32:	697b      	ldr	r3, [r7, #20]
}
 800bc34:	4618      	mov	r0, r3
 800bc36:	3718      	adds	r7, #24
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	bd80      	pop	{r7, pc}
 800bc3c:	200036c4 	.word	0x200036c4
 800bc40:	0801a274 	.word	0x0801a274
 800bc44:	0800bd81 	.word	0x0800bd81
 800bc48:	200036c8 	.word	0x200036c8

0800bc4c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	b08a      	sub	sp, #40	; 0x28
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	60f8      	str	r0, [r7, #12]
 800bc54:	60b9      	str	r1, [r7, #8]
 800bc56:	607a      	str	r2, [r7, #4]
 800bc58:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d10a      	bne.n	800bc7a <xTimerGenericCommand+0x2e>
	__asm volatile
 800bc64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc68:	f383 8811 	msr	BASEPRI, r3
 800bc6c:	f3bf 8f6f 	isb	sy
 800bc70:	f3bf 8f4f 	dsb	sy
 800bc74:	623b      	str	r3, [r7, #32]
}
 800bc76:	bf00      	nop
 800bc78:	e7fe      	b.n	800bc78 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bc7a:	4b1a      	ldr	r3, [pc, #104]	; (800bce4 <xTimerGenericCommand+0x98>)
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d02a      	beq.n	800bcd8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bc82:	68bb      	ldr	r3, [r7, #8]
 800bc84:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bc8e:	68bb      	ldr	r3, [r7, #8]
 800bc90:	2b05      	cmp	r3, #5
 800bc92:	dc18      	bgt.n	800bcc6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bc94:	f7ff fcd8 	bl	800b648 <xTaskGetSchedulerState>
 800bc98:	4603      	mov	r3, r0
 800bc9a:	2b02      	cmp	r3, #2
 800bc9c:	d109      	bne.n	800bcb2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bc9e:	4b11      	ldr	r3, [pc, #68]	; (800bce4 <xTimerGenericCommand+0x98>)
 800bca0:	6818      	ldr	r0, [r3, #0]
 800bca2:	f107 0110 	add.w	r1, r7, #16
 800bca6:	2300      	movs	r3, #0
 800bca8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bcaa:	f7fe f827 	bl	8009cfc <xQueueGenericSend>
 800bcae:	6278      	str	r0, [r7, #36]	; 0x24
 800bcb0:	e012      	b.n	800bcd8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bcb2:	4b0c      	ldr	r3, [pc, #48]	; (800bce4 <xTimerGenericCommand+0x98>)
 800bcb4:	6818      	ldr	r0, [r3, #0]
 800bcb6:	f107 0110 	add.w	r1, r7, #16
 800bcba:	2300      	movs	r3, #0
 800bcbc:	2200      	movs	r2, #0
 800bcbe:	f7fe f81d 	bl	8009cfc <xQueueGenericSend>
 800bcc2:	6278      	str	r0, [r7, #36]	; 0x24
 800bcc4:	e008      	b.n	800bcd8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bcc6:	4b07      	ldr	r3, [pc, #28]	; (800bce4 <xTimerGenericCommand+0x98>)
 800bcc8:	6818      	ldr	r0, [r3, #0]
 800bcca:	f107 0110 	add.w	r1, r7, #16
 800bcce:	2300      	movs	r3, #0
 800bcd0:	683a      	ldr	r2, [r7, #0]
 800bcd2:	f7fe f911 	bl	8009ef8 <xQueueGenericSendFromISR>
 800bcd6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bcd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bcda:	4618      	mov	r0, r3
 800bcdc:	3728      	adds	r7, #40	; 0x28
 800bcde:	46bd      	mov	sp, r7
 800bce0:	bd80      	pop	{r7, pc}
 800bce2:	bf00      	nop
 800bce4:	200036c4 	.word	0x200036c4

0800bce8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b088      	sub	sp, #32
 800bcec:	af02      	add	r7, sp, #8
 800bcee:	6078      	str	r0, [r7, #4]
 800bcf0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bcf2:	4b22      	ldr	r3, [pc, #136]	; (800bd7c <prvProcessExpiredTimer+0x94>)
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	68db      	ldr	r3, [r3, #12]
 800bcf8:	68db      	ldr	r3, [r3, #12]
 800bcfa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bcfc:	697b      	ldr	r3, [r7, #20]
 800bcfe:	3304      	adds	r3, #4
 800bd00:	4618      	mov	r0, r3
 800bd02:	f7fd fd73 	bl	80097ec <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bd06:	697b      	ldr	r3, [r7, #20]
 800bd08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd0c:	f003 0304 	and.w	r3, r3, #4
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d022      	beq.n	800bd5a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bd14:	697b      	ldr	r3, [r7, #20]
 800bd16:	699a      	ldr	r2, [r3, #24]
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	18d1      	adds	r1, r2, r3
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	683a      	ldr	r2, [r7, #0]
 800bd20:	6978      	ldr	r0, [r7, #20]
 800bd22:	f000 f8d1 	bl	800bec8 <prvInsertTimerInActiveList>
 800bd26:	4603      	mov	r3, r0
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d01f      	beq.n	800bd6c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	9300      	str	r3, [sp, #0]
 800bd30:	2300      	movs	r3, #0
 800bd32:	687a      	ldr	r2, [r7, #4]
 800bd34:	2100      	movs	r1, #0
 800bd36:	6978      	ldr	r0, [r7, #20]
 800bd38:	f7ff ff88 	bl	800bc4c <xTimerGenericCommand>
 800bd3c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bd3e:	693b      	ldr	r3, [r7, #16]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d113      	bne.n	800bd6c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800bd44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd48:	f383 8811 	msr	BASEPRI, r3
 800bd4c:	f3bf 8f6f 	isb	sy
 800bd50:	f3bf 8f4f 	dsb	sy
 800bd54:	60fb      	str	r3, [r7, #12]
}
 800bd56:	bf00      	nop
 800bd58:	e7fe      	b.n	800bd58 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bd5a:	697b      	ldr	r3, [r7, #20]
 800bd5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd60:	f023 0301 	bic.w	r3, r3, #1
 800bd64:	b2da      	uxtb	r2, r3
 800bd66:	697b      	ldr	r3, [r7, #20]
 800bd68:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bd6c:	697b      	ldr	r3, [r7, #20]
 800bd6e:	6a1b      	ldr	r3, [r3, #32]
 800bd70:	6978      	ldr	r0, [r7, #20]
 800bd72:	4798      	blx	r3
}
 800bd74:	bf00      	nop
 800bd76:	3718      	adds	r7, #24
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	bd80      	pop	{r7, pc}
 800bd7c:	200036bc 	.word	0x200036bc

0800bd80 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b084      	sub	sp, #16
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bd88:	f107 0308 	add.w	r3, r7, #8
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	f000 f857 	bl	800be40 <prvGetNextExpireTime>
 800bd92:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bd94:	68bb      	ldr	r3, [r7, #8]
 800bd96:	4619      	mov	r1, r3
 800bd98:	68f8      	ldr	r0, [r7, #12]
 800bd9a:	f000 f803 	bl	800bda4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bd9e:	f000 f8d5 	bl	800bf4c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bda2:	e7f1      	b.n	800bd88 <prvTimerTask+0x8>

0800bda4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bda4:	b580      	push	{r7, lr}
 800bda6:	b084      	sub	sp, #16
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
 800bdac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bdae:	f7ff f847 	bl	800ae40 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bdb2:	f107 0308 	add.w	r3, r7, #8
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	f000 f866 	bl	800be88 <prvSampleTimeNow>
 800bdbc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bdbe:	68bb      	ldr	r3, [r7, #8]
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d130      	bne.n	800be26 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bdc4:	683b      	ldr	r3, [r7, #0]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d10a      	bne.n	800bde0 <prvProcessTimerOrBlockTask+0x3c>
 800bdca:	687a      	ldr	r2, [r7, #4]
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	429a      	cmp	r2, r3
 800bdd0:	d806      	bhi.n	800bde0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bdd2:	f7ff f843 	bl	800ae5c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bdd6:	68f9      	ldr	r1, [r7, #12]
 800bdd8:	6878      	ldr	r0, [r7, #4]
 800bdda:	f7ff ff85 	bl	800bce8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bdde:	e024      	b.n	800be2a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bde0:	683b      	ldr	r3, [r7, #0]
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d008      	beq.n	800bdf8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bde6:	4b13      	ldr	r3, [pc, #76]	; (800be34 <prvProcessTimerOrBlockTask+0x90>)
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d101      	bne.n	800bdf4 <prvProcessTimerOrBlockTask+0x50>
 800bdf0:	2301      	movs	r3, #1
 800bdf2:	e000      	b.n	800bdf6 <prvProcessTimerOrBlockTask+0x52>
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bdf8:	4b0f      	ldr	r3, [pc, #60]	; (800be38 <prvProcessTimerOrBlockTask+0x94>)
 800bdfa:	6818      	ldr	r0, [r3, #0]
 800bdfc:	687a      	ldr	r2, [r7, #4]
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	1ad3      	subs	r3, r2, r3
 800be02:	683a      	ldr	r2, [r7, #0]
 800be04:	4619      	mov	r1, r3
 800be06:	f7fe fdab 	bl	800a960 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800be0a:	f7ff f827 	bl	800ae5c <xTaskResumeAll>
 800be0e:	4603      	mov	r3, r0
 800be10:	2b00      	cmp	r3, #0
 800be12:	d10a      	bne.n	800be2a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800be14:	4b09      	ldr	r3, [pc, #36]	; (800be3c <prvProcessTimerOrBlockTask+0x98>)
 800be16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be1a:	601a      	str	r2, [r3, #0]
 800be1c:	f3bf 8f4f 	dsb	sy
 800be20:	f3bf 8f6f 	isb	sy
}
 800be24:	e001      	b.n	800be2a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800be26:	f7ff f819 	bl	800ae5c <xTaskResumeAll>
}
 800be2a:	bf00      	nop
 800be2c:	3710      	adds	r7, #16
 800be2e:	46bd      	mov	sp, r7
 800be30:	bd80      	pop	{r7, pc}
 800be32:	bf00      	nop
 800be34:	200036c0 	.word	0x200036c0
 800be38:	200036c4 	.word	0x200036c4
 800be3c:	e000ed04 	.word	0xe000ed04

0800be40 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800be40:	b480      	push	{r7}
 800be42:	b085      	sub	sp, #20
 800be44:	af00      	add	r7, sp, #0
 800be46:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800be48:	4b0e      	ldr	r3, [pc, #56]	; (800be84 <prvGetNextExpireTime+0x44>)
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d101      	bne.n	800be56 <prvGetNextExpireTime+0x16>
 800be52:	2201      	movs	r2, #1
 800be54:	e000      	b.n	800be58 <prvGetNextExpireTime+0x18>
 800be56:	2200      	movs	r2, #0
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d105      	bne.n	800be70 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800be64:	4b07      	ldr	r3, [pc, #28]	; (800be84 <prvGetNextExpireTime+0x44>)
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	68db      	ldr	r3, [r3, #12]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	60fb      	str	r3, [r7, #12]
 800be6e:	e001      	b.n	800be74 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800be70:	2300      	movs	r3, #0
 800be72:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800be74:	68fb      	ldr	r3, [r7, #12]
}
 800be76:	4618      	mov	r0, r3
 800be78:	3714      	adds	r7, #20
 800be7a:	46bd      	mov	sp, r7
 800be7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be80:	4770      	bx	lr
 800be82:	bf00      	nop
 800be84:	200036bc 	.word	0x200036bc

0800be88 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800be88:	b580      	push	{r7, lr}
 800be8a:	b084      	sub	sp, #16
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800be90:	f7ff f882 	bl	800af98 <xTaskGetTickCount>
 800be94:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800be96:	4b0b      	ldr	r3, [pc, #44]	; (800bec4 <prvSampleTimeNow+0x3c>)
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	68fa      	ldr	r2, [r7, #12]
 800be9c:	429a      	cmp	r2, r3
 800be9e:	d205      	bcs.n	800beac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bea0:	f000 f936 	bl	800c110 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	2201      	movs	r2, #1
 800bea8:	601a      	str	r2, [r3, #0]
 800beaa:	e002      	b.n	800beb2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	2200      	movs	r2, #0
 800beb0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800beb2:	4a04      	ldr	r2, [pc, #16]	; (800bec4 <prvSampleTimeNow+0x3c>)
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800beb8:	68fb      	ldr	r3, [r7, #12]
}
 800beba:	4618      	mov	r0, r3
 800bebc:	3710      	adds	r7, #16
 800bebe:	46bd      	mov	sp, r7
 800bec0:	bd80      	pop	{r7, pc}
 800bec2:	bf00      	nop
 800bec4:	200036cc 	.word	0x200036cc

0800bec8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bec8:	b580      	push	{r7, lr}
 800beca:	b086      	sub	sp, #24
 800becc:	af00      	add	r7, sp, #0
 800bece:	60f8      	str	r0, [r7, #12]
 800bed0:	60b9      	str	r1, [r7, #8]
 800bed2:	607a      	str	r2, [r7, #4]
 800bed4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bed6:	2300      	movs	r3, #0
 800bed8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	68ba      	ldr	r2, [r7, #8]
 800bede:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	68fa      	ldr	r2, [r7, #12]
 800bee4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bee6:	68ba      	ldr	r2, [r7, #8]
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	429a      	cmp	r2, r3
 800beec:	d812      	bhi.n	800bf14 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800beee:	687a      	ldr	r2, [r7, #4]
 800bef0:	683b      	ldr	r3, [r7, #0]
 800bef2:	1ad2      	subs	r2, r2, r3
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	699b      	ldr	r3, [r3, #24]
 800bef8:	429a      	cmp	r2, r3
 800befa:	d302      	bcc.n	800bf02 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800befc:	2301      	movs	r3, #1
 800befe:	617b      	str	r3, [r7, #20]
 800bf00:	e01b      	b.n	800bf3a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bf02:	4b10      	ldr	r3, [pc, #64]	; (800bf44 <prvInsertTimerInActiveList+0x7c>)
 800bf04:	681a      	ldr	r2, [r3, #0]
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	3304      	adds	r3, #4
 800bf0a:	4619      	mov	r1, r3
 800bf0c:	4610      	mov	r0, r2
 800bf0e:	f7fd fc34 	bl	800977a <vListInsert>
 800bf12:	e012      	b.n	800bf3a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bf14:	687a      	ldr	r2, [r7, #4]
 800bf16:	683b      	ldr	r3, [r7, #0]
 800bf18:	429a      	cmp	r2, r3
 800bf1a:	d206      	bcs.n	800bf2a <prvInsertTimerInActiveList+0x62>
 800bf1c:	68ba      	ldr	r2, [r7, #8]
 800bf1e:	683b      	ldr	r3, [r7, #0]
 800bf20:	429a      	cmp	r2, r3
 800bf22:	d302      	bcc.n	800bf2a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bf24:	2301      	movs	r3, #1
 800bf26:	617b      	str	r3, [r7, #20]
 800bf28:	e007      	b.n	800bf3a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bf2a:	4b07      	ldr	r3, [pc, #28]	; (800bf48 <prvInsertTimerInActiveList+0x80>)
 800bf2c:	681a      	ldr	r2, [r3, #0]
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	3304      	adds	r3, #4
 800bf32:	4619      	mov	r1, r3
 800bf34:	4610      	mov	r0, r2
 800bf36:	f7fd fc20 	bl	800977a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bf3a:	697b      	ldr	r3, [r7, #20]
}
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	3718      	adds	r7, #24
 800bf40:	46bd      	mov	sp, r7
 800bf42:	bd80      	pop	{r7, pc}
 800bf44:	200036c0 	.word	0x200036c0
 800bf48:	200036bc 	.word	0x200036bc

0800bf4c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bf4c:	b580      	push	{r7, lr}
 800bf4e:	b08e      	sub	sp, #56	; 0x38
 800bf50:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bf52:	e0ca      	b.n	800c0ea <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	da18      	bge.n	800bf8c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bf5a:	1d3b      	adds	r3, r7, #4
 800bf5c:	3304      	adds	r3, #4
 800bf5e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bf60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d10a      	bne.n	800bf7c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800bf66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf6a:	f383 8811 	msr	BASEPRI, r3
 800bf6e:	f3bf 8f6f 	isb	sy
 800bf72:	f3bf 8f4f 	dsb	sy
 800bf76:	61fb      	str	r3, [r7, #28]
}
 800bf78:	bf00      	nop
 800bf7a:	e7fe      	b.n	800bf7a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bf7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bf82:	6850      	ldr	r0, [r2, #4]
 800bf84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bf86:	6892      	ldr	r2, [r2, #8]
 800bf88:	4611      	mov	r1, r2
 800bf8a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	f2c0 80aa 	blt.w	800c0e8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bf98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf9a:	695b      	ldr	r3, [r3, #20]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d004      	beq.n	800bfaa <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bfa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfa2:	3304      	adds	r3, #4
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	f7fd fc21 	bl	80097ec <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bfaa:	463b      	mov	r3, r7
 800bfac:	4618      	mov	r0, r3
 800bfae:	f7ff ff6b 	bl	800be88 <prvSampleTimeNow>
 800bfb2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	2b09      	cmp	r3, #9
 800bfb8:	f200 8097 	bhi.w	800c0ea <prvProcessReceivedCommands+0x19e>
 800bfbc:	a201      	add	r2, pc, #4	; (adr r2, 800bfc4 <prvProcessReceivedCommands+0x78>)
 800bfbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfc2:	bf00      	nop
 800bfc4:	0800bfed 	.word	0x0800bfed
 800bfc8:	0800bfed 	.word	0x0800bfed
 800bfcc:	0800bfed 	.word	0x0800bfed
 800bfd0:	0800c061 	.word	0x0800c061
 800bfd4:	0800c075 	.word	0x0800c075
 800bfd8:	0800c0bf 	.word	0x0800c0bf
 800bfdc:	0800bfed 	.word	0x0800bfed
 800bfe0:	0800bfed 	.word	0x0800bfed
 800bfe4:	0800c061 	.word	0x0800c061
 800bfe8:	0800c075 	.word	0x0800c075
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bfec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bff2:	f043 0301 	orr.w	r3, r3, #1
 800bff6:	b2da      	uxtb	r2, r3
 800bff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bffa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bffe:	68ba      	ldr	r2, [r7, #8]
 800c000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c002:	699b      	ldr	r3, [r3, #24]
 800c004:	18d1      	adds	r1, r2, r3
 800c006:	68bb      	ldr	r3, [r7, #8]
 800c008:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c00a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c00c:	f7ff ff5c 	bl	800bec8 <prvInsertTimerInActiveList>
 800c010:	4603      	mov	r3, r0
 800c012:	2b00      	cmp	r3, #0
 800c014:	d069      	beq.n	800c0ea <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c018:	6a1b      	ldr	r3, [r3, #32]
 800c01a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c01c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c01e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c020:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c024:	f003 0304 	and.w	r3, r3, #4
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d05e      	beq.n	800c0ea <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c02c:	68ba      	ldr	r2, [r7, #8]
 800c02e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c030:	699b      	ldr	r3, [r3, #24]
 800c032:	441a      	add	r2, r3
 800c034:	2300      	movs	r3, #0
 800c036:	9300      	str	r3, [sp, #0]
 800c038:	2300      	movs	r3, #0
 800c03a:	2100      	movs	r1, #0
 800c03c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c03e:	f7ff fe05 	bl	800bc4c <xTimerGenericCommand>
 800c042:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c044:	6a3b      	ldr	r3, [r7, #32]
 800c046:	2b00      	cmp	r3, #0
 800c048:	d14f      	bne.n	800c0ea <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c04a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c04e:	f383 8811 	msr	BASEPRI, r3
 800c052:	f3bf 8f6f 	isb	sy
 800c056:	f3bf 8f4f 	dsb	sy
 800c05a:	61bb      	str	r3, [r7, #24]
}
 800c05c:	bf00      	nop
 800c05e:	e7fe      	b.n	800c05e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c062:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c066:	f023 0301 	bic.w	r3, r3, #1
 800c06a:	b2da      	uxtb	r2, r3
 800c06c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c06e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c072:	e03a      	b.n	800c0ea <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c076:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c07a:	f043 0301 	orr.w	r3, r3, #1
 800c07e:	b2da      	uxtb	r2, r3
 800c080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c082:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c086:	68ba      	ldr	r2, [r7, #8]
 800c088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c08a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c08c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c08e:	699b      	ldr	r3, [r3, #24]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d10a      	bne.n	800c0aa <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c094:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c098:	f383 8811 	msr	BASEPRI, r3
 800c09c:	f3bf 8f6f 	isb	sy
 800c0a0:	f3bf 8f4f 	dsb	sy
 800c0a4:	617b      	str	r3, [r7, #20]
}
 800c0a6:	bf00      	nop
 800c0a8:	e7fe      	b.n	800c0a8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c0aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0ac:	699a      	ldr	r2, [r3, #24]
 800c0ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0b0:	18d1      	adds	r1, r2, r3
 800c0b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c0b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c0b8:	f7ff ff06 	bl	800bec8 <prvInsertTimerInActiveList>
					break;
 800c0bc:	e015      	b.n	800c0ea <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c0be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c0c4:	f003 0302 	and.w	r3, r3, #2
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d103      	bne.n	800c0d4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c0cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c0ce:	f000 fbdf 	bl	800c890 <vPortFree>
 800c0d2:	e00a      	b.n	800c0ea <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c0d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c0da:	f023 0301 	bic.w	r3, r3, #1
 800c0de:	b2da      	uxtb	r2, r3
 800c0e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c0e6:	e000      	b.n	800c0ea <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c0e8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c0ea:	4b08      	ldr	r3, [pc, #32]	; (800c10c <prvProcessReceivedCommands+0x1c0>)
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	1d39      	adds	r1, r7, #4
 800c0f0:	2200      	movs	r2, #0
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	f7fe f828 	bl	800a148 <xQueueReceive>
 800c0f8:	4603      	mov	r3, r0
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	f47f af2a 	bne.w	800bf54 <prvProcessReceivedCommands+0x8>
	}
}
 800c100:	bf00      	nop
 800c102:	bf00      	nop
 800c104:	3730      	adds	r7, #48	; 0x30
 800c106:	46bd      	mov	sp, r7
 800c108:	bd80      	pop	{r7, pc}
 800c10a:	bf00      	nop
 800c10c:	200036c4 	.word	0x200036c4

0800c110 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c110:	b580      	push	{r7, lr}
 800c112:	b088      	sub	sp, #32
 800c114:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c116:	e048      	b.n	800c1aa <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c118:	4b2d      	ldr	r3, [pc, #180]	; (800c1d0 <prvSwitchTimerLists+0xc0>)
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	68db      	ldr	r3, [r3, #12]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c122:	4b2b      	ldr	r3, [pc, #172]	; (800c1d0 <prvSwitchTimerLists+0xc0>)
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	68db      	ldr	r3, [r3, #12]
 800c128:	68db      	ldr	r3, [r3, #12]
 800c12a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	3304      	adds	r3, #4
 800c130:	4618      	mov	r0, r3
 800c132:	f7fd fb5b 	bl	80097ec <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	6a1b      	ldr	r3, [r3, #32]
 800c13a:	68f8      	ldr	r0, [r7, #12]
 800c13c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c144:	f003 0304 	and.w	r3, r3, #4
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d02e      	beq.n	800c1aa <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	699b      	ldr	r3, [r3, #24]
 800c150:	693a      	ldr	r2, [r7, #16]
 800c152:	4413      	add	r3, r2
 800c154:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c156:	68ba      	ldr	r2, [r7, #8]
 800c158:	693b      	ldr	r3, [r7, #16]
 800c15a:	429a      	cmp	r2, r3
 800c15c:	d90e      	bls.n	800c17c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	68ba      	ldr	r2, [r7, #8]
 800c162:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	68fa      	ldr	r2, [r7, #12]
 800c168:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c16a:	4b19      	ldr	r3, [pc, #100]	; (800c1d0 <prvSwitchTimerLists+0xc0>)
 800c16c:	681a      	ldr	r2, [r3, #0]
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	3304      	adds	r3, #4
 800c172:	4619      	mov	r1, r3
 800c174:	4610      	mov	r0, r2
 800c176:	f7fd fb00 	bl	800977a <vListInsert>
 800c17a:	e016      	b.n	800c1aa <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c17c:	2300      	movs	r3, #0
 800c17e:	9300      	str	r3, [sp, #0]
 800c180:	2300      	movs	r3, #0
 800c182:	693a      	ldr	r2, [r7, #16]
 800c184:	2100      	movs	r1, #0
 800c186:	68f8      	ldr	r0, [r7, #12]
 800c188:	f7ff fd60 	bl	800bc4c <xTimerGenericCommand>
 800c18c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	2b00      	cmp	r3, #0
 800c192:	d10a      	bne.n	800c1aa <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c194:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c198:	f383 8811 	msr	BASEPRI, r3
 800c19c:	f3bf 8f6f 	isb	sy
 800c1a0:	f3bf 8f4f 	dsb	sy
 800c1a4:	603b      	str	r3, [r7, #0]
}
 800c1a6:	bf00      	nop
 800c1a8:	e7fe      	b.n	800c1a8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c1aa:	4b09      	ldr	r3, [pc, #36]	; (800c1d0 <prvSwitchTimerLists+0xc0>)
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d1b1      	bne.n	800c118 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c1b4:	4b06      	ldr	r3, [pc, #24]	; (800c1d0 <prvSwitchTimerLists+0xc0>)
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c1ba:	4b06      	ldr	r3, [pc, #24]	; (800c1d4 <prvSwitchTimerLists+0xc4>)
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	4a04      	ldr	r2, [pc, #16]	; (800c1d0 <prvSwitchTimerLists+0xc0>)
 800c1c0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c1c2:	4a04      	ldr	r2, [pc, #16]	; (800c1d4 <prvSwitchTimerLists+0xc4>)
 800c1c4:	697b      	ldr	r3, [r7, #20]
 800c1c6:	6013      	str	r3, [r2, #0]
}
 800c1c8:	bf00      	nop
 800c1ca:	3718      	adds	r7, #24
 800c1cc:	46bd      	mov	sp, r7
 800c1ce:	bd80      	pop	{r7, pc}
 800c1d0:	200036bc 	.word	0x200036bc
 800c1d4:	200036c0 	.word	0x200036c0

0800c1d8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c1d8:	b580      	push	{r7, lr}
 800c1da:	b082      	sub	sp, #8
 800c1dc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c1de:	f000 f969 	bl	800c4b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c1e2:	4b15      	ldr	r3, [pc, #84]	; (800c238 <prvCheckForValidListAndQueue+0x60>)
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d120      	bne.n	800c22c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c1ea:	4814      	ldr	r0, [pc, #80]	; (800c23c <prvCheckForValidListAndQueue+0x64>)
 800c1ec:	f7fd fa74 	bl	80096d8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c1f0:	4813      	ldr	r0, [pc, #76]	; (800c240 <prvCheckForValidListAndQueue+0x68>)
 800c1f2:	f7fd fa71 	bl	80096d8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c1f6:	4b13      	ldr	r3, [pc, #76]	; (800c244 <prvCheckForValidListAndQueue+0x6c>)
 800c1f8:	4a10      	ldr	r2, [pc, #64]	; (800c23c <prvCheckForValidListAndQueue+0x64>)
 800c1fa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c1fc:	4b12      	ldr	r3, [pc, #72]	; (800c248 <prvCheckForValidListAndQueue+0x70>)
 800c1fe:	4a10      	ldr	r2, [pc, #64]	; (800c240 <prvCheckForValidListAndQueue+0x68>)
 800c200:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c202:	2300      	movs	r3, #0
 800c204:	9300      	str	r3, [sp, #0]
 800c206:	4b11      	ldr	r3, [pc, #68]	; (800c24c <prvCheckForValidListAndQueue+0x74>)
 800c208:	4a11      	ldr	r2, [pc, #68]	; (800c250 <prvCheckForValidListAndQueue+0x78>)
 800c20a:	2110      	movs	r1, #16
 800c20c:	200a      	movs	r0, #10
 800c20e:	f7fd fb7f 	bl	8009910 <xQueueGenericCreateStatic>
 800c212:	4603      	mov	r3, r0
 800c214:	4a08      	ldr	r2, [pc, #32]	; (800c238 <prvCheckForValidListAndQueue+0x60>)
 800c216:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c218:	4b07      	ldr	r3, [pc, #28]	; (800c238 <prvCheckForValidListAndQueue+0x60>)
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d005      	beq.n	800c22c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c220:	4b05      	ldr	r3, [pc, #20]	; (800c238 <prvCheckForValidListAndQueue+0x60>)
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	490b      	ldr	r1, [pc, #44]	; (800c254 <prvCheckForValidListAndQueue+0x7c>)
 800c226:	4618      	mov	r0, r3
 800c228:	f7fe fb46 	bl	800a8b8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c22c:	f000 f972 	bl	800c514 <vPortExitCritical>
}
 800c230:	bf00      	nop
 800c232:	46bd      	mov	sp, r7
 800c234:	bd80      	pop	{r7, pc}
 800c236:	bf00      	nop
 800c238:	200036c4 	.word	0x200036c4
 800c23c:	20003694 	.word	0x20003694
 800c240:	200036a8 	.word	0x200036a8
 800c244:	200036bc 	.word	0x200036bc
 800c248:	200036c0 	.word	0x200036c0
 800c24c:	20003770 	.word	0x20003770
 800c250:	200036d0 	.word	0x200036d0
 800c254:	0801a27c 	.word	0x0801a27c

0800c258 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c258:	b480      	push	{r7}
 800c25a:	b085      	sub	sp, #20
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	60f8      	str	r0, [r7, #12]
 800c260:	60b9      	str	r1, [r7, #8]
 800c262:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	3b04      	subs	r3, #4
 800c268:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c270:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	3b04      	subs	r3, #4
 800c276:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c278:	68bb      	ldr	r3, [r7, #8]
 800c27a:	f023 0201 	bic.w	r2, r3, #1
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	3b04      	subs	r3, #4
 800c286:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c288:	4a0c      	ldr	r2, [pc, #48]	; (800c2bc <pxPortInitialiseStack+0x64>)
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	3b14      	subs	r3, #20
 800c292:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c294:	687a      	ldr	r2, [r7, #4]
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	3b04      	subs	r3, #4
 800c29e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	f06f 0202 	mvn.w	r2, #2
 800c2a6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	3b20      	subs	r3, #32
 800c2ac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c2ae:	68fb      	ldr	r3, [r7, #12]
}
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	3714      	adds	r7, #20
 800c2b4:	46bd      	mov	sp, r7
 800c2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ba:	4770      	bx	lr
 800c2bc:	0800c2c1 	.word	0x0800c2c1

0800c2c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c2c0:	b480      	push	{r7}
 800c2c2:	b085      	sub	sp, #20
 800c2c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c2ca:	4b12      	ldr	r3, [pc, #72]	; (800c314 <prvTaskExitError+0x54>)
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2d2:	d00a      	beq.n	800c2ea <prvTaskExitError+0x2a>
	__asm volatile
 800c2d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2d8:	f383 8811 	msr	BASEPRI, r3
 800c2dc:	f3bf 8f6f 	isb	sy
 800c2e0:	f3bf 8f4f 	dsb	sy
 800c2e4:	60fb      	str	r3, [r7, #12]
}
 800c2e6:	bf00      	nop
 800c2e8:	e7fe      	b.n	800c2e8 <prvTaskExitError+0x28>
	__asm volatile
 800c2ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2ee:	f383 8811 	msr	BASEPRI, r3
 800c2f2:	f3bf 8f6f 	isb	sy
 800c2f6:	f3bf 8f4f 	dsb	sy
 800c2fa:	60bb      	str	r3, [r7, #8]
}
 800c2fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c2fe:	bf00      	nop
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	2b00      	cmp	r3, #0
 800c304:	d0fc      	beq.n	800c300 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c306:	bf00      	nop
 800c308:	bf00      	nop
 800c30a:	3714      	adds	r7, #20
 800c30c:	46bd      	mov	sp, r7
 800c30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c312:	4770      	bx	lr
 800c314:	2000000c 	.word	0x2000000c
	...

0800c320 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c320:	4b07      	ldr	r3, [pc, #28]	; (800c340 <pxCurrentTCBConst2>)
 800c322:	6819      	ldr	r1, [r3, #0]
 800c324:	6808      	ldr	r0, [r1, #0]
 800c326:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c32a:	f380 8809 	msr	PSP, r0
 800c32e:	f3bf 8f6f 	isb	sy
 800c332:	f04f 0000 	mov.w	r0, #0
 800c336:	f380 8811 	msr	BASEPRI, r0
 800c33a:	4770      	bx	lr
 800c33c:	f3af 8000 	nop.w

0800c340 <pxCurrentTCBConst2>:
 800c340:	20003194 	.word	0x20003194
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c344:	bf00      	nop
 800c346:	bf00      	nop

0800c348 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c348:	4808      	ldr	r0, [pc, #32]	; (800c36c <prvPortStartFirstTask+0x24>)
 800c34a:	6800      	ldr	r0, [r0, #0]
 800c34c:	6800      	ldr	r0, [r0, #0]
 800c34e:	f380 8808 	msr	MSP, r0
 800c352:	f04f 0000 	mov.w	r0, #0
 800c356:	f380 8814 	msr	CONTROL, r0
 800c35a:	b662      	cpsie	i
 800c35c:	b661      	cpsie	f
 800c35e:	f3bf 8f4f 	dsb	sy
 800c362:	f3bf 8f6f 	isb	sy
 800c366:	df00      	svc	0
 800c368:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c36a:	bf00      	nop
 800c36c:	e000ed08 	.word	0xe000ed08

0800c370 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c370:	b580      	push	{r7, lr}
 800c372:	b086      	sub	sp, #24
 800c374:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c376:	4b46      	ldr	r3, [pc, #280]	; (800c490 <xPortStartScheduler+0x120>)
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	4a46      	ldr	r2, [pc, #280]	; (800c494 <xPortStartScheduler+0x124>)
 800c37c:	4293      	cmp	r3, r2
 800c37e:	d10a      	bne.n	800c396 <xPortStartScheduler+0x26>
	__asm volatile
 800c380:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c384:	f383 8811 	msr	BASEPRI, r3
 800c388:	f3bf 8f6f 	isb	sy
 800c38c:	f3bf 8f4f 	dsb	sy
 800c390:	613b      	str	r3, [r7, #16]
}
 800c392:	bf00      	nop
 800c394:	e7fe      	b.n	800c394 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c396:	4b3e      	ldr	r3, [pc, #248]	; (800c490 <xPortStartScheduler+0x120>)
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	4a3f      	ldr	r2, [pc, #252]	; (800c498 <xPortStartScheduler+0x128>)
 800c39c:	4293      	cmp	r3, r2
 800c39e:	d10a      	bne.n	800c3b6 <xPortStartScheduler+0x46>
	__asm volatile
 800c3a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3a4:	f383 8811 	msr	BASEPRI, r3
 800c3a8:	f3bf 8f6f 	isb	sy
 800c3ac:	f3bf 8f4f 	dsb	sy
 800c3b0:	60fb      	str	r3, [r7, #12]
}
 800c3b2:	bf00      	nop
 800c3b4:	e7fe      	b.n	800c3b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c3b6:	4b39      	ldr	r3, [pc, #228]	; (800c49c <xPortStartScheduler+0x12c>)
 800c3b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c3ba:	697b      	ldr	r3, [r7, #20]
 800c3bc:	781b      	ldrb	r3, [r3, #0]
 800c3be:	b2db      	uxtb	r3, r3
 800c3c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c3c2:	697b      	ldr	r3, [r7, #20]
 800c3c4:	22ff      	movs	r2, #255	; 0xff
 800c3c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c3c8:	697b      	ldr	r3, [r7, #20]
 800c3ca:	781b      	ldrb	r3, [r3, #0]
 800c3cc:	b2db      	uxtb	r3, r3
 800c3ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c3d0:	78fb      	ldrb	r3, [r7, #3]
 800c3d2:	b2db      	uxtb	r3, r3
 800c3d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c3d8:	b2da      	uxtb	r2, r3
 800c3da:	4b31      	ldr	r3, [pc, #196]	; (800c4a0 <xPortStartScheduler+0x130>)
 800c3dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c3de:	4b31      	ldr	r3, [pc, #196]	; (800c4a4 <xPortStartScheduler+0x134>)
 800c3e0:	2207      	movs	r2, #7
 800c3e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c3e4:	e009      	b.n	800c3fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c3e6:	4b2f      	ldr	r3, [pc, #188]	; (800c4a4 <xPortStartScheduler+0x134>)
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	3b01      	subs	r3, #1
 800c3ec:	4a2d      	ldr	r2, [pc, #180]	; (800c4a4 <xPortStartScheduler+0x134>)
 800c3ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c3f0:	78fb      	ldrb	r3, [r7, #3]
 800c3f2:	b2db      	uxtb	r3, r3
 800c3f4:	005b      	lsls	r3, r3, #1
 800c3f6:	b2db      	uxtb	r3, r3
 800c3f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c3fa:	78fb      	ldrb	r3, [r7, #3]
 800c3fc:	b2db      	uxtb	r3, r3
 800c3fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c402:	2b80      	cmp	r3, #128	; 0x80
 800c404:	d0ef      	beq.n	800c3e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c406:	4b27      	ldr	r3, [pc, #156]	; (800c4a4 <xPortStartScheduler+0x134>)
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	f1c3 0307 	rsb	r3, r3, #7
 800c40e:	2b04      	cmp	r3, #4
 800c410:	d00a      	beq.n	800c428 <xPortStartScheduler+0xb8>
	__asm volatile
 800c412:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c416:	f383 8811 	msr	BASEPRI, r3
 800c41a:	f3bf 8f6f 	isb	sy
 800c41e:	f3bf 8f4f 	dsb	sy
 800c422:	60bb      	str	r3, [r7, #8]
}
 800c424:	bf00      	nop
 800c426:	e7fe      	b.n	800c426 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c428:	4b1e      	ldr	r3, [pc, #120]	; (800c4a4 <xPortStartScheduler+0x134>)
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	021b      	lsls	r3, r3, #8
 800c42e:	4a1d      	ldr	r2, [pc, #116]	; (800c4a4 <xPortStartScheduler+0x134>)
 800c430:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c432:	4b1c      	ldr	r3, [pc, #112]	; (800c4a4 <xPortStartScheduler+0x134>)
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c43a:	4a1a      	ldr	r2, [pc, #104]	; (800c4a4 <xPortStartScheduler+0x134>)
 800c43c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	b2da      	uxtb	r2, r3
 800c442:	697b      	ldr	r3, [r7, #20]
 800c444:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c446:	4b18      	ldr	r3, [pc, #96]	; (800c4a8 <xPortStartScheduler+0x138>)
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	4a17      	ldr	r2, [pc, #92]	; (800c4a8 <xPortStartScheduler+0x138>)
 800c44c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c450:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c452:	4b15      	ldr	r3, [pc, #84]	; (800c4a8 <xPortStartScheduler+0x138>)
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	4a14      	ldr	r2, [pc, #80]	; (800c4a8 <xPortStartScheduler+0x138>)
 800c458:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c45c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c45e:	f000 f8dd 	bl	800c61c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c462:	4b12      	ldr	r3, [pc, #72]	; (800c4ac <xPortStartScheduler+0x13c>)
 800c464:	2200      	movs	r2, #0
 800c466:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c468:	f000 f8fc 	bl	800c664 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c46c:	4b10      	ldr	r3, [pc, #64]	; (800c4b0 <xPortStartScheduler+0x140>)
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	4a0f      	ldr	r2, [pc, #60]	; (800c4b0 <xPortStartScheduler+0x140>)
 800c472:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c476:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c478:	f7ff ff66 	bl	800c348 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c47c:	f7fe fe68 	bl	800b150 <vTaskSwitchContext>
	prvTaskExitError();
 800c480:	f7ff ff1e 	bl	800c2c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c484:	2300      	movs	r3, #0
}
 800c486:	4618      	mov	r0, r3
 800c488:	3718      	adds	r7, #24
 800c48a:	46bd      	mov	sp, r7
 800c48c:	bd80      	pop	{r7, pc}
 800c48e:	bf00      	nop
 800c490:	e000ed00 	.word	0xe000ed00
 800c494:	410fc271 	.word	0x410fc271
 800c498:	410fc270 	.word	0x410fc270
 800c49c:	e000e400 	.word	0xe000e400
 800c4a0:	200037c0 	.word	0x200037c0
 800c4a4:	200037c4 	.word	0x200037c4
 800c4a8:	e000ed20 	.word	0xe000ed20
 800c4ac:	2000000c 	.word	0x2000000c
 800c4b0:	e000ef34 	.word	0xe000ef34

0800c4b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c4b4:	b480      	push	{r7}
 800c4b6:	b083      	sub	sp, #12
 800c4b8:	af00      	add	r7, sp, #0
	__asm volatile
 800c4ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4be:	f383 8811 	msr	BASEPRI, r3
 800c4c2:	f3bf 8f6f 	isb	sy
 800c4c6:	f3bf 8f4f 	dsb	sy
 800c4ca:	607b      	str	r3, [r7, #4]
}
 800c4cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c4ce:	4b0f      	ldr	r3, [pc, #60]	; (800c50c <vPortEnterCritical+0x58>)
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	3301      	adds	r3, #1
 800c4d4:	4a0d      	ldr	r2, [pc, #52]	; (800c50c <vPortEnterCritical+0x58>)
 800c4d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c4d8:	4b0c      	ldr	r3, [pc, #48]	; (800c50c <vPortEnterCritical+0x58>)
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	2b01      	cmp	r3, #1
 800c4de:	d10f      	bne.n	800c500 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c4e0:	4b0b      	ldr	r3, [pc, #44]	; (800c510 <vPortEnterCritical+0x5c>)
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	b2db      	uxtb	r3, r3
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d00a      	beq.n	800c500 <vPortEnterCritical+0x4c>
	__asm volatile
 800c4ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4ee:	f383 8811 	msr	BASEPRI, r3
 800c4f2:	f3bf 8f6f 	isb	sy
 800c4f6:	f3bf 8f4f 	dsb	sy
 800c4fa:	603b      	str	r3, [r7, #0]
}
 800c4fc:	bf00      	nop
 800c4fe:	e7fe      	b.n	800c4fe <vPortEnterCritical+0x4a>
	}
}
 800c500:	bf00      	nop
 800c502:	370c      	adds	r7, #12
 800c504:	46bd      	mov	sp, r7
 800c506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50a:	4770      	bx	lr
 800c50c:	2000000c 	.word	0x2000000c
 800c510:	e000ed04 	.word	0xe000ed04

0800c514 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c514:	b480      	push	{r7}
 800c516:	b083      	sub	sp, #12
 800c518:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c51a:	4b12      	ldr	r3, [pc, #72]	; (800c564 <vPortExitCritical+0x50>)
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d10a      	bne.n	800c538 <vPortExitCritical+0x24>
	__asm volatile
 800c522:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c526:	f383 8811 	msr	BASEPRI, r3
 800c52a:	f3bf 8f6f 	isb	sy
 800c52e:	f3bf 8f4f 	dsb	sy
 800c532:	607b      	str	r3, [r7, #4]
}
 800c534:	bf00      	nop
 800c536:	e7fe      	b.n	800c536 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c538:	4b0a      	ldr	r3, [pc, #40]	; (800c564 <vPortExitCritical+0x50>)
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	3b01      	subs	r3, #1
 800c53e:	4a09      	ldr	r2, [pc, #36]	; (800c564 <vPortExitCritical+0x50>)
 800c540:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c542:	4b08      	ldr	r3, [pc, #32]	; (800c564 <vPortExitCritical+0x50>)
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	2b00      	cmp	r3, #0
 800c548:	d105      	bne.n	800c556 <vPortExitCritical+0x42>
 800c54a:	2300      	movs	r3, #0
 800c54c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c54e:	683b      	ldr	r3, [r7, #0]
 800c550:	f383 8811 	msr	BASEPRI, r3
}
 800c554:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c556:	bf00      	nop
 800c558:	370c      	adds	r7, #12
 800c55a:	46bd      	mov	sp, r7
 800c55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c560:	4770      	bx	lr
 800c562:	bf00      	nop
 800c564:	2000000c 	.word	0x2000000c
	...

0800c570 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c570:	f3ef 8009 	mrs	r0, PSP
 800c574:	f3bf 8f6f 	isb	sy
 800c578:	4b15      	ldr	r3, [pc, #84]	; (800c5d0 <pxCurrentTCBConst>)
 800c57a:	681a      	ldr	r2, [r3, #0]
 800c57c:	f01e 0f10 	tst.w	lr, #16
 800c580:	bf08      	it	eq
 800c582:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c586:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c58a:	6010      	str	r0, [r2, #0]
 800c58c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c590:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c594:	f380 8811 	msr	BASEPRI, r0
 800c598:	f3bf 8f4f 	dsb	sy
 800c59c:	f3bf 8f6f 	isb	sy
 800c5a0:	f7fe fdd6 	bl	800b150 <vTaskSwitchContext>
 800c5a4:	f04f 0000 	mov.w	r0, #0
 800c5a8:	f380 8811 	msr	BASEPRI, r0
 800c5ac:	bc09      	pop	{r0, r3}
 800c5ae:	6819      	ldr	r1, [r3, #0]
 800c5b0:	6808      	ldr	r0, [r1, #0]
 800c5b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5b6:	f01e 0f10 	tst.w	lr, #16
 800c5ba:	bf08      	it	eq
 800c5bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c5c0:	f380 8809 	msr	PSP, r0
 800c5c4:	f3bf 8f6f 	isb	sy
 800c5c8:	4770      	bx	lr
 800c5ca:	bf00      	nop
 800c5cc:	f3af 8000 	nop.w

0800c5d0 <pxCurrentTCBConst>:
 800c5d0:	20003194 	.word	0x20003194
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c5d4:	bf00      	nop
 800c5d6:	bf00      	nop

0800c5d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c5d8:	b580      	push	{r7, lr}
 800c5da:	b082      	sub	sp, #8
 800c5dc:	af00      	add	r7, sp, #0
	__asm volatile
 800c5de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5e2:	f383 8811 	msr	BASEPRI, r3
 800c5e6:	f3bf 8f6f 	isb	sy
 800c5ea:	f3bf 8f4f 	dsb	sy
 800c5ee:	607b      	str	r3, [r7, #4]
}
 800c5f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c5f2:	f7fe fcf3 	bl	800afdc <xTaskIncrementTick>
 800c5f6:	4603      	mov	r3, r0
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d003      	beq.n	800c604 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c5fc:	4b06      	ldr	r3, [pc, #24]	; (800c618 <xPortSysTickHandler+0x40>)
 800c5fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c602:	601a      	str	r2, [r3, #0]
 800c604:	2300      	movs	r3, #0
 800c606:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c608:	683b      	ldr	r3, [r7, #0]
 800c60a:	f383 8811 	msr	BASEPRI, r3
}
 800c60e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c610:	bf00      	nop
 800c612:	3708      	adds	r7, #8
 800c614:	46bd      	mov	sp, r7
 800c616:	bd80      	pop	{r7, pc}
 800c618:	e000ed04 	.word	0xe000ed04

0800c61c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c61c:	b480      	push	{r7}
 800c61e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c620:	4b0b      	ldr	r3, [pc, #44]	; (800c650 <vPortSetupTimerInterrupt+0x34>)
 800c622:	2200      	movs	r2, #0
 800c624:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c626:	4b0b      	ldr	r3, [pc, #44]	; (800c654 <vPortSetupTimerInterrupt+0x38>)
 800c628:	2200      	movs	r2, #0
 800c62a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c62c:	4b0a      	ldr	r3, [pc, #40]	; (800c658 <vPortSetupTimerInterrupt+0x3c>)
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	4a0a      	ldr	r2, [pc, #40]	; (800c65c <vPortSetupTimerInterrupt+0x40>)
 800c632:	fba2 2303 	umull	r2, r3, r2, r3
 800c636:	099b      	lsrs	r3, r3, #6
 800c638:	4a09      	ldr	r2, [pc, #36]	; (800c660 <vPortSetupTimerInterrupt+0x44>)
 800c63a:	3b01      	subs	r3, #1
 800c63c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c63e:	4b04      	ldr	r3, [pc, #16]	; (800c650 <vPortSetupTimerInterrupt+0x34>)
 800c640:	2207      	movs	r2, #7
 800c642:	601a      	str	r2, [r3, #0]
}
 800c644:	bf00      	nop
 800c646:	46bd      	mov	sp, r7
 800c648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c64c:	4770      	bx	lr
 800c64e:	bf00      	nop
 800c650:	e000e010 	.word	0xe000e010
 800c654:	e000e018 	.word	0xe000e018
 800c658:	20000000 	.word	0x20000000
 800c65c:	10624dd3 	.word	0x10624dd3
 800c660:	e000e014 	.word	0xe000e014

0800c664 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c664:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c674 <vPortEnableVFP+0x10>
 800c668:	6801      	ldr	r1, [r0, #0]
 800c66a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c66e:	6001      	str	r1, [r0, #0]
 800c670:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c672:	bf00      	nop
 800c674:	e000ed88 	.word	0xe000ed88

0800c678 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c678:	b480      	push	{r7}
 800c67a:	b085      	sub	sp, #20
 800c67c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c67e:	f3ef 8305 	mrs	r3, IPSR
 800c682:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	2b0f      	cmp	r3, #15
 800c688:	d914      	bls.n	800c6b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c68a:	4a17      	ldr	r2, [pc, #92]	; (800c6e8 <vPortValidateInterruptPriority+0x70>)
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	4413      	add	r3, r2
 800c690:	781b      	ldrb	r3, [r3, #0]
 800c692:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c694:	4b15      	ldr	r3, [pc, #84]	; (800c6ec <vPortValidateInterruptPriority+0x74>)
 800c696:	781b      	ldrb	r3, [r3, #0]
 800c698:	7afa      	ldrb	r2, [r7, #11]
 800c69a:	429a      	cmp	r2, r3
 800c69c:	d20a      	bcs.n	800c6b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c69e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6a2:	f383 8811 	msr	BASEPRI, r3
 800c6a6:	f3bf 8f6f 	isb	sy
 800c6aa:	f3bf 8f4f 	dsb	sy
 800c6ae:	607b      	str	r3, [r7, #4]
}
 800c6b0:	bf00      	nop
 800c6b2:	e7fe      	b.n	800c6b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c6b4:	4b0e      	ldr	r3, [pc, #56]	; (800c6f0 <vPortValidateInterruptPriority+0x78>)
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c6bc:	4b0d      	ldr	r3, [pc, #52]	; (800c6f4 <vPortValidateInterruptPriority+0x7c>)
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	429a      	cmp	r2, r3
 800c6c2:	d90a      	bls.n	800c6da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c6c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6c8:	f383 8811 	msr	BASEPRI, r3
 800c6cc:	f3bf 8f6f 	isb	sy
 800c6d0:	f3bf 8f4f 	dsb	sy
 800c6d4:	603b      	str	r3, [r7, #0]
}
 800c6d6:	bf00      	nop
 800c6d8:	e7fe      	b.n	800c6d8 <vPortValidateInterruptPriority+0x60>
	}
 800c6da:	bf00      	nop
 800c6dc:	3714      	adds	r7, #20
 800c6de:	46bd      	mov	sp, r7
 800c6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e4:	4770      	bx	lr
 800c6e6:	bf00      	nop
 800c6e8:	e000e3f0 	.word	0xe000e3f0
 800c6ec:	200037c0 	.word	0x200037c0
 800c6f0:	e000ed0c 	.word	0xe000ed0c
 800c6f4:	200037c4 	.word	0x200037c4

0800c6f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c6f8:	b580      	push	{r7, lr}
 800c6fa:	b08a      	sub	sp, #40	; 0x28
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c700:	2300      	movs	r3, #0
 800c702:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c704:	f7fe fb9c 	bl	800ae40 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c708:	4b5b      	ldr	r3, [pc, #364]	; (800c878 <pvPortMalloc+0x180>)
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d101      	bne.n	800c714 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c710:	f000 f920 	bl	800c954 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c714:	4b59      	ldr	r3, [pc, #356]	; (800c87c <pvPortMalloc+0x184>)
 800c716:	681a      	ldr	r2, [r3, #0]
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	4013      	ands	r3, r2
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	f040 8093 	bne.w	800c848 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	2b00      	cmp	r3, #0
 800c726:	d01d      	beq.n	800c764 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c728:	2208      	movs	r2, #8
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	4413      	add	r3, r2
 800c72e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	f003 0307 	and.w	r3, r3, #7
 800c736:	2b00      	cmp	r3, #0
 800c738:	d014      	beq.n	800c764 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	f023 0307 	bic.w	r3, r3, #7
 800c740:	3308      	adds	r3, #8
 800c742:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	f003 0307 	and.w	r3, r3, #7
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d00a      	beq.n	800c764 <pvPortMalloc+0x6c>
	__asm volatile
 800c74e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c752:	f383 8811 	msr	BASEPRI, r3
 800c756:	f3bf 8f6f 	isb	sy
 800c75a:	f3bf 8f4f 	dsb	sy
 800c75e:	617b      	str	r3, [r7, #20]
}
 800c760:	bf00      	nop
 800c762:	e7fe      	b.n	800c762 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d06e      	beq.n	800c848 <pvPortMalloc+0x150>
 800c76a:	4b45      	ldr	r3, [pc, #276]	; (800c880 <pvPortMalloc+0x188>)
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	687a      	ldr	r2, [r7, #4]
 800c770:	429a      	cmp	r2, r3
 800c772:	d869      	bhi.n	800c848 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c774:	4b43      	ldr	r3, [pc, #268]	; (800c884 <pvPortMalloc+0x18c>)
 800c776:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c778:	4b42      	ldr	r3, [pc, #264]	; (800c884 <pvPortMalloc+0x18c>)
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c77e:	e004      	b.n	800c78a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c782:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c78a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c78c:	685b      	ldr	r3, [r3, #4]
 800c78e:	687a      	ldr	r2, [r7, #4]
 800c790:	429a      	cmp	r2, r3
 800c792:	d903      	bls.n	800c79c <pvPortMalloc+0xa4>
 800c794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d1f1      	bne.n	800c780 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c79c:	4b36      	ldr	r3, [pc, #216]	; (800c878 <pvPortMalloc+0x180>)
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c7a2:	429a      	cmp	r2, r3
 800c7a4:	d050      	beq.n	800c848 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c7a6:	6a3b      	ldr	r3, [r7, #32]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	2208      	movs	r2, #8
 800c7ac:	4413      	add	r3, r2
 800c7ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c7b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7b2:	681a      	ldr	r2, [r3, #0]
 800c7b4:	6a3b      	ldr	r3, [r7, #32]
 800c7b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c7b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7ba:	685a      	ldr	r2, [r3, #4]
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	1ad2      	subs	r2, r2, r3
 800c7c0:	2308      	movs	r3, #8
 800c7c2:	005b      	lsls	r3, r3, #1
 800c7c4:	429a      	cmp	r2, r3
 800c7c6:	d91f      	bls.n	800c808 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c7c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	4413      	add	r3, r2
 800c7ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c7d0:	69bb      	ldr	r3, [r7, #24]
 800c7d2:	f003 0307 	and.w	r3, r3, #7
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d00a      	beq.n	800c7f0 <pvPortMalloc+0xf8>
	__asm volatile
 800c7da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7de:	f383 8811 	msr	BASEPRI, r3
 800c7e2:	f3bf 8f6f 	isb	sy
 800c7e6:	f3bf 8f4f 	dsb	sy
 800c7ea:	613b      	str	r3, [r7, #16]
}
 800c7ec:	bf00      	nop
 800c7ee:	e7fe      	b.n	800c7ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c7f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7f2:	685a      	ldr	r2, [r3, #4]
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	1ad2      	subs	r2, r2, r3
 800c7f8:	69bb      	ldr	r3, [r7, #24]
 800c7fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c7fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7fe:	687a      	ldr	r2, [r7, #4]
 800c800:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c802:	69b8      	ldr	r0, [r7, #24]
 800c804:	f000 f908 	bl	800ca18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c808:	4b1d      	ldr	r3, [pc, #116]	; (800c880 <pvPortMalloc+0x188>)
 800c80a:	681a      	ldr	r2, [r3, #0]
 800c80c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c80e:	685b      	ldr	r3, [r3, #4]
 800c810:	1ad3      	subs	r3, r2, r3
 800c812:	4a1b      	ldr	r2, [pc, #108]	; (800c880 <pvPortMalloc+0x188>)
 800c814:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c816:	4b1a      	ldr	r3, [pc, #104]	; (800c880 <pvPortMalloc+0x188>)
 800c818:	681a      	ldr	r2, [r3, #0]
 800c81a:	4b1b      	ldr	r3, [pc, #108]	; (800c888 <pvPortMalloc+0x190>)
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	429a      	cmp	r2, r3
 800c820:	d203      	bcs.n	800c82a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c822:	4b17      	ldr	r3, [pc, #92]	; (800c880 <pvPortMalloc+0x188>)
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	4a18      	ldr	r2, [pc, #96]	; (800c888 <pvPortMalloc+0x190>)
 800c828:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c82a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c82c:	685a      	ldr	r2, [r3, #4]
 800c82e:	4b13      	ldr	r3, [pc, #76]	; (800c87c <pvPortMalloc+0x184>)
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	431a      	orrs	r2, r3
 800c834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c836:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c83a:	2200      	movs	r2, #0
 800c83c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c83e:	4b13      	ldr	r3, [pc, #76]	; (800c88c <pvPortMalloc+0x194>)
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	3301      	adds	r3, #1
 800c844:	4a11      	ldr	r2, [pc, #68]	; (800c88c <pvPortMalloc+0x194>)
 800c846:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c848:	f7fe fb08 	bl	800ae5c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c84c:	69fb      	ldr	r3, [r7, #28]
 800c84e:	f003 0307 	and.w	r3, r3, #7
 800c852:	2b00      	cmp	r3, #0
 800c854:	d00a      	beq.n	800c86c <pvPortMalloc+0x174>
	__asm volatile
 800c856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c85a:	f383 8811 	msr	BASEPRI, r3
 800c85e:	f3bf 8f6f 	isb	sy
 800c862:	f3bf 8f4f 	dsb	sy
 800c866:	60fb      	str	r3, [r7, #12]
}
 800c868:	bf00      	nop
 800c86a:	e7fe      	b.n	800c86a <pvPortMalloc+0x172>
	return pvReturn;
 800c86c:	69fb      	ldr	r3, [r7, #28]
}
 800c86e:	4618      	mov	r0, r3
 800c870:	3728      	adds	r7, #40	; 0x28
 800c872:	46bd      	mov	sp, r7
 800c874:	bd80      	pop	{r7, pc}
 800c876:	bf00      	nop
 800c878:	200137d0 	.word	0x200137d0
 800c87c:	200137e4 	.word	0x200137e4
 800c880:	200137d4 	.word	0x200137d4
 800c884:	200137c8 	.word	0x200137c8
 800c888:	200137d8 	.word	0x200137d8
 800c88c:	200137dc 	.word	0x200137dc

0800c890 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c890:	b580      	push	{r7, lr}
 800c892:	b086      	sub	sp, #24
 800c894:	af00      	add	r7, sp, #0
 800c896:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d04d      	beq.n	800c93e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c8a2:	2308      	movs	r3, #8
 800c8a4:	425b      	negs	r3, r3
 800c8a6:	697a      	ldr	r2, [r7, #20]
 800c8a8:	4413      	add	r3, r2
 800c8aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c8ac:	697b      	ldr	r3, [r7, #20]
 800c8ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c8b0:	693b      	ldr	r3, [r7, #16]
 800c8b2:	685a      	ldr	r2, [r3, #4]
 800c8b4:	4b24      	ldr	r3, [pc, #144]	; (800c948 <vPortFree+0xb8>)
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	4013      	ands	r3, r2
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d10a      	bne.n	800c8d4 <vPortFree+0x44>
	__asm volatile
 800c8be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8c2:	f383 8811 	msr	BASEPRI, r3
 800c8c6:	f3bf 8f6f 	isb	sy
 800c8ca:	f3bf 8f4f 	dsb	sy
 800c8ce:	60fb      	str	r3, [r7, #12]
}
 800c8d0:	bf00      	nop
 800c8d2:	e7fe      	b.n	800c8d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c8d4:	693b      	ldr	r3, [r7, #16]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d00a      	beq.n	800c8f2 <vPortFree+0x62>
	__asm volatile
 800c8dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8e0:	f383 8811 	msr	BASEPRI, r3
 800c8e4:	f3bf 8f6f 	isb	sy
 800c8e8:	f3bf 8f4f 	dsb	sy
 800c8ec:	60bb      	str	r3, [r7, #8]
}
 800c8ee:	bf00      	nop
 800c8f0:	e7fe      	b.n	800c8f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c8f2:	693b      	ldr	r3, [r7, #16]
 800c8f4:	685a      	ldr	r2, [r3, #4]
 800c8f6:	4b14      	ldr	r3, [pc, #80]	; (800c948 <vPortFree+0xb8>)
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	4013      	ands	r3, r2
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d01e      	beq.n	800c93e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c900:	693b      	ldr	r3, [r7, #16]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	2b00      	cmp	r3, #0
 800c906:	d11a      	bne.n	800c93e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c908:	693b      	ldr	r3, [r7, #16]
 800c90a:	685a      	ldr	r2, [r3, #4]
 800c90c:	4b0e      	ldr	r3, [pc, #56]	; (800c948 <vPortFree+0xb8>)
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	43db      	mvns	r3, r3
 800c912:	401a      	ands	r2, r3
 800c914:	693b      	ldr	r3, [r7, #16]
 800c916:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c918:	f7fe fa92 	bl	800ae40 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c91c:	693b      	ldr	r3, [r7, #16]
 800c91e:	685a      	ldr	r2, [r3, #4]
 800c920:	4b0a      	ldr	r3, [pc, #40]	; (800c94c <vPortFree+0xbc>)
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	4413      	add	r3, r2
 800c926:	4a09      	ldr	r2, [pc, #36]	; (800c94c <vPortFree+0xbc>)
 800c928:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c92a:	6938      	ldr	r0, [r7, #16]
 800c92c:	f000 f874 	bl	800ca18 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c930:	4b07      	ldr	r3, [pc, #28]	; (800c950 <vPortFree+0xc0>)
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	3301      	adds	r3, #1
 800c936:	4a06      	ldr	r2, [pc, #24]	; (800c950 <vPortFree+0xc0>)
 800c938:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c93a:	f7fe fa8f 	bl	800ae5c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c93e:	bf00      	nop
 800c940:	3718      	adds	r7, #24
 800c942:	46bd      	mov	sp, r7
 800c944:	bd80      	pop	{r7, pc}
 800c946:	bf00      	nop
 800c948:	200137e4 	.word	0x200137e4
 800c94c:	200137d4 	.word	0x200137d4
 800c950:	200137e0 	.word	0x200137e0

0800c954 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c954:	b480      	push	{r7}
 800c956:	b085      	sub	sp, #20
 800c958:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c95a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c95e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c960:	4b27      	ldr	r3, [pc, #156]	; (800ca00 <prvHeapInit+0xac>)
 800c962:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	f003 0307 	and.w	r3, r3, #7
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d00c      	beq.n	800c988 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	3307      	adds	r3, #7
 800c972:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	f023 0307 	bic.w	r3, r3, #7
 800c97a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c97c:	68ba      	ldr	r2, [r7, #8]
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	1ad3      	subs	r3, r2, r3
 800c982:	4a1f      	ldr	r2, [pc, #124]	; (800ca00 <prvHeapInit+0xac>)
 800c984:	4413      	add	r3, r2
 800c986:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c98c:	4a1d      	ldr	r2, [pc, #116]	; (800ca04 <prvHeapInit+0xb0>)
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c992:	4b1c      	ldr	r3, [pc, #112]	; (800ca04 <prvHeapInit+0xb0>)
 800c994:	2200      	movs	r2, #0
 800c996:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	68ba      	ldr	r2, [r7, #8]
 800c99c:	4413      	add	r3, r2
 800c99e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c9a0:	2208      	movs	r2, #8
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	1a9b      	subs	r3, r3, r2
 800c9a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	f023 0307 	bic.w	r3, r3, #7
 800c9ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	4a15      	ldr	r2, [pc, #84]	; (800ca08 <prvHeapInit+0xb4>)
 800c9b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c9b6:	4b14      	ldr	r3, [pc, #80]	; (800ca08 <prvHeapInit+0xb4>)
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	2200      	movs	r2, #0
 800c9bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c9be:	4b12      	ldr	r3, [pc, #72]	; (800ca08 <prvHeapInit+0xb4>)
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	2200      	movs	r2, #0
 800c9c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c9ca:	683b      	ldr	r3, [r7, #0]
 800c9cc:	68fa      	ldr	r2, [r7, #12]
 800c9ce:	1ad2      	subs	r2, r2, r3
 800c9d0:	683b      	ldr	r3, [r7, #0]
 800c9d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c9d4:	4b0c      	ldr	r3, [pc, #48]	; (800ca08 <prvHeapInit+0xb4>)
 800c9d6:	681a      	ldr	r2, [r3, #0]
 800c9d8:	683b      	ldr	r3, [r7, #0]
 800c9da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c9dc:	683b      	ldr	r3, [r7, #0]
 800c9de:	685b      	ldr	r3, [r3, #4]
 800c9e0:	4a0a      	ldr	r2, [pc, #40]	; (800ca0c <prvHeapInit+0xb8>)
 800c9e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c9e4:	683b      	ldr	r3, [r7, #0]
 800c9e6:	685b      	ldr	r3, [r3, #4]
 800c9e8:	4a09      	ldr	r2, [pc, #36]	; (800ca10 <prvHeapInit+0xbc>)
 800c9ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c9ec:	4b09      	ldr	r3, [pc, #36]	; (800ca14 <prvHeapInit+0xc0>)
 800c9ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c9f2:	601a      	str	r2, [r3, #0]
}
 800c9f4:	bf00      	nop
 800c9f6:	3714      	adds	r7, #20
 800c9f8:	46bd      	mov	sp, r7
 800c9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fe:	4770      	bx	lr
 800ca00:	200037c8 	.word	0x200037c8
 800ca04:	200137c8 	.word	0x200137c8
 800ca08:	200137d0 	.word	0x200137d0
 800ca0c:	200137d8 	.word	0x200137d8
 800ca10:	200137d4 	.word	0x200137d4
 800ca14:	200137e4 	.word	0x200137e4

0800ca18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ca18:	b480      	push	{r7}
 800ca1a:	b085      	sub	sp, #20
 800ca1c:	af00      	add	r7, sp, #0
 800ca1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ca20:	4b28      	ldr	r3, [pc, #160]	; (800cac4 <prvInsertBlockIntoFreeList+0xac>)
 800ca22:	60fb      	str	r3, [r7, #12]
 800ca24:	e002      	b.n	800ca2c <prvInsertBlockIntoFreeList+0x14>
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	60fb      	str	r3, [r7, #12]
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	687a      	ldr	r2, [r7, #4]
 800ca32:	429a      	cmp	r2, r3
 800ca34:	d8f7      	bhi.n	800ca26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	685b      	ldr	r3, [r3, #4]
 800ca3e:	68ba      	ldr	r2, [r7, #8]
 800ca40:	4413      	add	r3, r2
 800ca42:	687a      	ldr	r2, [r7, #4]
 800ca44:	429a      	cmp	r2, r3
 800ca46:	d108      	bne.n	800ca5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	685a      	ldr	r2, [r3, #4]
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	685b      	ldr	r3, [r3, #4]
 800ca50:	441a      	add	r2, r3
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	685b      	ldr	r3, [r3, #4]
 800ca62:	68ba      	ldr	r2, [r7, #8]
 800ca64:	441a      	add	r2, r3
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	429a      	cmp	r2, r3
 800ca6c:	d118      	bne.n	800caa0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	681a      	ldr	r2, [r3, #0]
 800ca72:	4b15      	ldr	r3, [pc, #84]	; (800cac8 <prvInsertBlockIntoFreeList+0xb0>)
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	429a      	cmp	r2, r3
 800ca78:	d00d      	beq.n	800ca96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	685a      	ldr	r2, [r3, #4]
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	685b      	ldr	r3, [r3, #4]
 800ca84:	441a      	add	r2, r3
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	681a      	ldr	r2, [r3, #0]
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	601a      	str	r2, [r3, #0]
 800ca94:	e008      	b.n	800caa8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ca96:	4b0c      	ldr	r3, [pc, #48]	; (800cac8 <prvInsertBlockIntoFreeList+0xb0>)
 800ca98:	681a      	ldr	r2, [r3, #0]
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	601a      	str	r2, [r3, #0]
 800ca9e:	e003      	b.n	800caa8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	681a      	ldr	r2, [r3, #0]
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800caa8:	68fa      	ldr	r2, [r7, #12]
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	429a      	cmp	r2, r3
 800caae:	d002      	beq.n	800cab6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	687a      	ldr	r2, [r7, #4]
 800cab4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cab6:	bf00      	nop
 800cab8:	3714      	adds	r7, #20
 800caba:	46bd      	mov	sp, r7
 800cabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac0:	4770      	bx	lr
 800cac2:	bf00      	nop
 800cac4:	200137c8 	.word	0x200137c8
 800cac8:	200137d0 	.word	0x200137d0

0800cacc <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800cacc:	b580      	push	{r7, lr}
 800cace:	b084      	sub	sp, #16
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	6078      	str	r0, [r7, #4]
 800cad4:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800cad6:	f007 fa9b 	bl	8014010 <sys_timeouts_sleeptime>
 800cada:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cae2:	d10b      	bne.n	800cafc <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800cae4:	4813      	ldr	r0, [pc, #76]	; (800cb34 <tcpip_timeouts_mbox_fetch+0x68>)
 800cae6:	f00c f9a8 	bl	8018e3a <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800caea:	2200      	movs	r2, #0
 800caec:	6839      	ldr	r1, [r7, #0]
 800caee:	6878      	ldr	r0, [r7, #4]
 800caf0:	f00c f930 	bl	8018d54 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800caf4:	480f      	ldr	r0, [pc, #60]	; (800cb34 <tcpip_timeouts_mbox_fetch+0x68>)
 800caf6:	f00c f991 	bl	8018e1c <sys_mutex_lock>
    return;
 800cafa:	e018      	b.n	800cb2e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d102      	bne.n	800cb08 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800cb02:	f007 fa4b 	bl	8013f9c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800cb06:	e7e6      	b.n	800cad6 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800cb08:	480a      	ldr	r0, [pc, #40]	; (800cb34 <tcpip_timeouts_mbox_fetch+0x68>)
 800cb0a:	f00c f996 	bl	8018e3a <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800cb0e:	68fa      	ldr	r2, [r7, #12]
 800cb10:	6839      	ldr	r1, [r7, #0]
 800cb12:	6878      	ldr	r0, [r7, #4]
 800cb14:	f00c f91e 	bl	8018d54 <sys_arch_mbox_fetch>
 800cb18:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800cb1a:	4806      	ldr	r0, [pc, #24]	; (800cb34 <tcpip_timeouts_mbox_fetch+0x68>)
 800cb1c:	f00c f97e 	bl	8018e1c <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800cb20:	68bb      	ldr	r3, [r7, #8]
 800cb22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb26:	d102      	bne.n	800cb2e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800cb28:	f007 fa38 	bl	8013f9c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800cb2c:	e7d3      	b.n	800cad6 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800cb2e:	3710      	adds	r7, #16
 800cb30:	46bd      	mov	sp, r7
 800cb32:	bd80      	pop	{r7, pc}
 800cb34:	20017168 	.word	0x20017168

0800cb38 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	b084      	sub	sp, #16
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800cb40:	4810      	ldr	r0, [pc, #64]	; (800cb84 <tcpip_thread+0x4c>)
 800cb42:	f00c f96b 	bl	8018e1c <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800cb46:	4b10      	ldr	r3, [pc, #64]	; (800cb88 <tcpip_thread+0x50>)
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d005      	beq.n	800cb5a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800cb4e:	4b0e      	ldr	r3, [pc, #56]	; (800cb88 <tcpip_thread+0x50>)
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	4a0e      	ldr	r2, [pc, #56]	; (800cb8c <tcpip_thread+0x54>)
 800cb54:	6812      	ldr	r2, [r2, #0]
 800cb56:	4610      	mov	r0, r2
 800cb58:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800cb5a:	f107 030c 	add.w	r3, r7, #12
 800cb5e:	4619      	mov	r1, r3
 800cb60:	480b      	ldr	r0, [pc, #44]	; (800cb90 <tcpip_thread+0x58>)
 800cb62:	f7ff ffb3 	bl	800cacc <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d106      	bne.n	800cb7a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800cb6c:	4b09      	ldr	r3, [pc, #36]	; (800cb94 <tcpip_thread+0x5c>)
 800cb6e:	2291      	movs	r2, #145	; 0x91
 800cb70:	4909      	ldr	r1, [pc, #36]	; (800cb98 <tcpip_thread+0x60>)
 800cb72:	480a      	ldr	r0, [pc, #40]	; (800cb9c <tcpip_thread+0x64>)
 800cb74:	f00c fdde 	bl	8019734 <iprintf>
      continue;
 800cb78:	e003      	b.n	800cb82 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	f000 f80f 	bl	800cba0 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800cb82:	e7ea      	b.n	800cb5a <tcpip_thread+0x22>
 800cb84:	20017168 	.word	0x20017168
 800cb88:	200137e8 	.word	0x200137e8
 800cb8c:	200137ec 	.word	0x200137ec
 800cb90:	200137f0 	.word	0x200137f0
 800cb94:	0801a284 	.word	0x0801a284
 800cb98:	0801a2b4 	.word	0x0801a2b4
 800cb9c:	0801a2d4 	.word	0x0801a2d4

0800cba0 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800cba0:	b580      	push	{r7, lr}
 800cba2:	b082      	sub	sp, #8
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	781b      	ldrb	r3, [r3, #0]
 800cbac:	2b02      	cmp	r3, #2
 800cbae:	d026      	beq.n	800cbfe <tcpip_thread_handle_msg+0x5e>
 800cbb0:	2b02      	cmp	r3, #2
 800cbb2:	dc2b      	bgt.n	800cc0c <tcpip_thread_handle_msg+0x6c>
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d002      	beq.n	800cbbe <tcpip_thread_handle_msg+0x1e>
 800cbb8:	2b01      	cmp	r3, #1
 800cbba:	d015      	beq.n	800cbe8 <tcpip_thread_handle_msg+0x48>
 800cbbc:	e026      	b.n	800cc0c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	68db      	ldr	r3, [r3, #12]
 800cbc2:	687a      	ldr	r2, [r7, #4]
 800cbc4:	6850      	ldr	r0, [r2, #4]
 800cbc6:	687a      	ldr	r2, [r7, #4]
 800cbc8:	6892      	ldr	r2, [r2, #8]
 800cbca:	4611      	mov	r1, r2
 800cbcc:	4798      	blx	r3
 800cbce:	4603      	mov	r3, r0
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d004      	beq.n	800cbde <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	685b      	ldr	r3, [r3, #4]
 800cbd8:	4618      	mov	r0, r3
 800cbda:	f001 fcd1 	bl	800e580 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800cbde:	6879      	ldr	r1, [r7, #4]
 800cbe0:	2009      	movs	r0, #9
 800cbe2:	f000 fe1d 	bl	800d820 <memp_free>
      break;
 800cbe6:	e018      	b.n	800cc1a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	685b      	ldr	r3, [r3, #4]
 800cbec:	687a      	ldr	r2, [r7, #4]
 800cbee:	6892      	ldr	r2, [r2, #8]
 800cbf0:	4610      	mov	r0, r2
 800cbf2:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800cbf4:	6879      	ldr	r1, [r7, #4]
 800cbf6:	2008      	movs	r0, #8
 800cbf8:	f000 fe12 	bl	800d820 <memp_free>
      break;
 800cbfc:	e00d      	b.n	800cc1a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	685b      	ldr	r3, [r3, #4]
 800cc02:	687a      	ldr	r2, [r7, #4]
 800cc04:	6892      	ldr	r2, [r2, #8]
 800cc06:	4610      	mov	r0, r2
 800cc08:	4798      	blx	r3
      break;
 800cc0a:	e006      	b.n	800cc1a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800cc0c:	4b05      	ldr	r3, [pc, #20]	; (800cc24 <tcpip_thread_handle_msg+0x84>)
 800cc0e:	22cf      	movs	r2, #207	; 0xcf
 800cc10:	4905      	ldr	r1, [pc, #20]	; (800cc28 <tcpip_thread_handle_msg+0x88>)
 800cc12:	4806      	ldr	r0, [pc, #24]	; (800cc2c <tcpip_thread_handle_msg+0x8c>)
 800cc14:	f00c fd8e 	bl	8019734 <iprintf>
      break;
 800cc18:	bf00      	nop
  }
}
 800cc1a:	bf00      	nop
 800cc1c:	3708      	adds	r7, #8
 800cc1e:	46bd      	mov	sp, r7
 800cc20:	bd80      	pop	{r7, pc}
 800cc22:	bf00      	nop
 800cc24:	0801a284 	.word	0x0801a284
 800cc28:	0801a2b4 	.word	0x0801a2b4
 800cc2c:	0801a2d4 	.word	0x0801a2d4

0800cc30 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800cc30:	b580      	push	{r7, lr}
 800cc32:	b086      	sub	sp, #24
 800cc34:	af00      	add	r7, sp, #0
 800cc36:	60f8      	str	r0, [r7, #12]
 800cc38:	60b9      	str	r1, [r7, #8]
 800cc3a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800cc3c:	481a      	ldr	r0, [pc, #104]	; (800cca8 <tcpip_inpkt+0x78>)
 800cc3e:	f00c f8ba 	bl	8018db6 <sys_mbox_valid>
 800cc42:	4603      	mov	r3, r0
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d105      	bne.n	800cc54 <tcpip_inpkt+0x24>
 800cc48:	4b18      	ldr	r3, [pc, #96]	; (800ccac <tcpip_inpkt+0x7c>)
 800cc4a:	22fc      	movs	r2, #252	; 0xfc
 800cc4c:	4918      	ldr	r1, [pc, #96]	; (800ccb0 <tcpip_inpkt+0x80>)
 800cc4e:	4819      	ldr	r0, [pc, #100]	; (800ccb4 <tcpip_inpkt+0x84>)
 800cc50:	f00c fd70 	bl	8019734 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800cc54:	2009      	movs	r0, #9
 800cc56:	f000 fd91 	bl	800d77c <memp_malloc>
 800cc5a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800cc5c:	697b      	ldr	r3, [r7, #20]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d102      	bne.n	800cc68 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800cc62:	f04f 33ff 	mov.w	r3, #4294967295
 800cc66:	e01a      	b.n	800cc9e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800cc68:	697b      	ldr	r3, [r7, #20]
 800cc6a:	2200      	movs	r2, #0
 800cc6c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800cc6e:	697b      	ldr	r3, [r7, #20]
 800cc70:	68fa      	ldr	r2, [r7, #12]
 800cc72:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800cc74:	697b      	ldr	r3, [r7, #20]
 800cc76:	68ba      	ldr	r2, [r7, #8]
 800cc78:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800cc7a:	697b      	ldr	r3, [r7, #20]
 800cc7c:	687a      	ldr	r2, [r7, #4]
 800cc7e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800cc80:	6979      	ldr	r1, [r7, #20]
 800cc82:	4809      	ldr	r0, [pc, #36]	; (800cca8 <tcpip_inpkt+0x78>)
 800cc84:	f00c f84c 	bl	8018d20 <sys_mbox_trypost>
 800cc88:	4603      	mov	r3, r0
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d006      	beq.n	800cc9c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800cc8e:	6979      	ldr	r1, [r7, #20]
 800cc90:	2009      	movs	r0, #9
 800cc92:	f000 fdc5 	bl	800d820 <memp_free>
    return ERR_MEM;
 800cc96:	f04f 33ff 	mov.w	r3, #4294967295
 800cc9a:	e000      	b.n	800cc9e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800cc9c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800cc9e:	4618      	mov	r0, r3
 800cca0:	3718      	adds	r7, #24
 800cca2:	46bd      	mov	sp, r7
 800cca4:	bd80      	pop	{r7, pc}
 800cca6:	bf00      	nop
 800cca8:	200137f0 	.word	0x200137f0
 800ccac:	0801a284 	.word	0x0801a284
 800ccb0:	0801a2fc 	.word	0x0801a2fc
 800ccb4:	0801a2d4 	.word	0x0801a2d4

0800ccb8 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800ccb8:	b580      	push	{r7, lr}
 800ccba:	b082      	sub	sp, #8
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	6078      	str	r0, [r7, #4]
 800ccc0:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800ccc2:	683b      	ldr	r3, [r7, #0]
 800ccc4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ccc8:	f003 0318 	and.w	r3, r3, #24
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d006      	beq.n	800ccde <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800ccd0:	4a08      	ldr	r2, [pc, #32]	; (800ccf4 <tcpip_input+0x3c>)
 800ccd2:	6839      	ldr	r1, [r7, #0]
 800ccd4:	6878      	ldr	r0, [r7, #4]
 800ccd6:	f7ff ffab 	bl	800cc30 <tcpip_inpkt>
 800ccda:	4603      	mov	r3, r0
 800ccdc:	e005      	b.n	800ccea <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800ccde:	4a06      	ldr	r2, [pc, #24]	; (800ccf8 <tcpip_input+0x40>)
 800cce0:	6839      	ldr	r1, [r7, #0]
 800cce2:	6878      	ldr	r0, [r7, #4]
 800cce4:	f7ff ffa4 	bl	800cc30 <tcpip_inpkt>
 800cce8:	4603      	mov	r3, r0
}
 800ccea:	4618      	mov	r0, r3
 800ccec:	3708      	adds	r7, #8
 800ccee:	46bd      	mov	sp, r7
 800ccf0:	bd80      	pop	{r7, pc}
 800ccf2:	bf00      	nop
 800ccf4:	08018b41 	.word	0x08018b41
 800ccf8:	08017a0d 	.word	0x08017a0d

0800ccfc <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800ccfc:	b580      	push	{r7, lr}
 800ccfe:	b084      	sub	sp, #16
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	6078      	str	r0, [r7, #4]
 800cd04:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800cd06:	4819      	ldr	r0, [pc, #100]	; (800cd6c <tcpip_try_callback+0x70>)
 800cd08:	f00c f855 	bl	8018db6 <sys_mbox_valid>
 800cd0c:	4603      	mov	r3, r0
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d106      	bne.n	800cd20 <tcpip_try_callback+0x24>
 800cd12:	4b17      	ldr	r3, [pc, #92]	; (800cd70 <tcpip_try_callback+0x74>)
 800cd14:	f240 125d 	movw	r2, #349	; 0x15d
 800cd18:	4916      	ldr	r1, [pc, #88]	; (800cd74 <tcpip_try_callback+0x78>)
 800cd1a:	4817      	ldr	r0, [pc, #92]	; (800cd78 <tcpip_try_callback+0x7c>)
 800cd1c:	f00c fd0a 	bl	8019734 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800cd20:	2008      	movs	r0, #8
 800cd22:	f000 fd2b 	bl	800d77c <memp_malloc>
 800cd26:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d102      	bne.n	800cd34 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800cd2e:	f04f 33ff 	mov.w	r3, #4294967295
 800cd32:	e017      	b.n	800cd64 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	2201      	movs	r2, #1
 800cd38:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	687a      	ldr	r2, [r7, #4]
 800cd3e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	683a      	ldr	r2, [r7, #0]
 800cd44:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800cd46:	68f9      	ldr	r1, [r7, #12]
 800cd48:	4808      	ldr	r0, [pc, #32]	; (800cd6c <tcpip_try_callback+0x70>)
 800cd4a:	f00b ffe9 	bl	8018d20 <sys_mbox_trypost>
 800cd4e:	4603      	mov	r3, r0
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d006      	beq.n	800cd62 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800cd54:	68f9      	ldr	r1, [r7, #12]
 800cd56:	2008      	movs	r0, #8
 800cd58:	f000 fd62 	bl	800d820 <memp_free>
    return ERR_MEM;
 800cd5c:	f04f 33ff 	mov.w	r3, #4294967295
 800cd60:	e000      	b.n	800cd64 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800cd62:	2300      	movs	r3, #0
}
 800cd64:	4618      	mov	r0, r3
 800cd66:	3710      	adds	r7, #16
 800cd68:	46bd      	mov	sp, r7
 800cd6a:	bd80      	pop	{r7, pc}
 800cd6c:	200137f0 	.word	0x200137f0
 800cd70:	0801a284 	.word	0x0801a284
 800cd74:	0801a2fc 	.word	0x0801a2fc
 800cd78:	0801a2d4 	.word	0x0801a2d4

0800cd7c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800cd7c:	b580      	push	{r7, lr}
 800cd7e:	b084      	sub	sp, #16
 800cd80:	af02      	add	r7, sp, #8
 800cd82:	6078      	str	r0, [r7, #4]
 800cd84:	6039      	str	r1, [r7, #0]
  lwip_init();
 800cd86:	f000 f871 	bl	800ce6c <lwip_init>

  tcpip_init_done = initfunc;
 800cd8a:	4a17      	ldr	r2, [pc, #92]	; (800cde8 <tcpip_init+0x6c>)
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800cd90:	4a16      	ldr	r2, [pc, #88]	; (800cdec <tcpip_init+0x70>)
 800cd92:	683b      	ldr	r3, [r7, #0]
 800cd94:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800cd96:	2106      	movs	r1, #6
 800cd98:	4815      	ldr	r0, [pc, #84]	; (800cdf0 <tcpip_init+0x74>)
 800cd9a:	f00b ffa7 	bl	8018cec <sys_mbox_new>
 800cd9e:	4603      	mov	r3, r0
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d006      	beq.n	800cdb2 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800cda4:	4b13      	ldr	r3, [pc, #76]	; (800cdf4 <tcpip_init+0x78>)
 800cda6:	f240 2261 	movw	r2, #609	; 0x261
 800cdaa:	4913      	ldr	r1, [pc, #76]	; (800cdf8 <tcpip_init+0x7c>)
 800cdac:	4813      	ldr	r0, [pc, #76]	; (800cdfc <tcpip_init+0x80>)
 800cdae:	f00c fcc1 	bl	8019734 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800cdb2:	4813      	ldr	r0, [pc, #76]	; (800ce00 <tcpip_init+0x84>)
 800cdb4:	f00c f81c 	bl	8018df0 <sys_mutex_new>
 800cdb8:	4603      	mov	r3, r0
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d006      	beq.n	800cdcc <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800cdbe:	4b0d      	ldr	r3, [pc, #52]	; (800cdf4 <tcpip_init+0x78>)
 800cdc0:	f240 2265 	movw	r2, #613	; 0x265
 800cdc4:	490f      	ldr	r1, [pc, #60]	; (800ce04 <tcpip_init+0x88>)
 800cdc6:	480d      	ldr	r0, [pc, #52]	; (800cdfc <tcpip_init+0x80>)
 800cdc8:	f00c fcb4 	bl	8019734 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800cdcc:	2318      	movs	r3, #24
 800cdce:	9300      	str	r3, [sp, #0]
 800cdd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cdd4:	2200      	movs	r2, #0
 800cdd6:	490c      	ldr	r1, [pc, #48]	; (800ce08 <tcpip_init+0x8c>)
 800cdd8:	480c      	ldr	r0, [pc, #48]	; (800ce0c <tcpip_init+0x90>)
 800cdda:	f00c f83b 	bl	8018e54 <sys_thread_new>
}
 800cdde:	bf00      	nop
 800cde0:	3708      	adds	r7, #8
 800cde2:	46bd      	mov	sp, r7
 800cde4:	bd80      	pop	{r7, pc}
 800cde6:	bf00      	nop
 800cde8:	200137e8 	.word	0x200137e8
 800cdec:	200137ec 	.word	0x200137ec
 800cdf0:	200137f0 	.word	0x200137f0
 800cdf4:	0801a284 	.word	0x0801a284
 800cdf8:	0801a30c 	.word	0x0801a30c
 800cdfc:	0801a2d4 	.word	0x0801a2d4
 800ce00:	20017168 	.word	0x20017168
 800ce04:	0801a330 	.word	0x0801a330
 800ce08:	0800cb39 	.word	0x0800cb39
 800ce0c:	0801a354 	.word	0x0801a354

0800ce10 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800ce10:	b480      	push	{r7}
 800ce12:	b083      	sub	sp, #12
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	4603      	mov	r3, r0
 800ce18:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800ce1a:	88fb      	ldrh	r3, [r7, #6]
 800ce1c:	021b      	lsls	r3, r3, #8
 800ce1e:	b21a      	sxth	r2, r3
 800ce20:	88fb      	ldrh	r3, [r7, #6]
 800ce22:	0a1b      	lsrs	r3, r3, #8
 800ce24:	b29b      	uxth	r3, r3
 800ce26:	b21b      	sxth	r3, r3
 800ce28:	4313      	orrs	r3, r2
 800ce2a:	b21b      	sxth	r3, r3
 800ce2c:	b29b      	uxth	r3, r3
}
 800ce2e:	4618      	mov	r0, r3
 800ce30:	370c      	adds	r7, #12
 800ce32:	46bd      	mov	sp, r7
 800ce34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce38:	4770      	bx	lr

0800ce3a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800ce3a:	b480      	push	{r7}
 800ce3c:	b083      	sub	sp, #12
 800ce3e:	af00      	add	r7, sp, #0
 800ce40:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	061a      	lsls	r2, r3, #24
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	021b      	lsls	r3, r3, #8
 800ce4a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ce4e:	431a      	orrs	r2, r3
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	0a1b      	lsrs	r3, r3, #8
 800ce54:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ce58:	431a      	orrs	r2, r3
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	0e1b      	lsrs	r3, r3, #24
 800ce5e:	4313      	orrs	r3, r2
}
 800ce60:	4618      	mov	r0, r3
 800ce62:	370c      	adds	r7, #12
 800ce64:	46bd      	mov	sp, r7
 800ce66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce6a:	4770      	bx	lr

0800ce6c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800ce6c:	b580      	push	{r7, lr}
 800ce6e:	b082      	sub	sp, #8
 800ce70:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800ce72:	2300      	movs	r3, #0
 800ce74:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800ce76:	f00b ffaf 	bl	8018dd8 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800ce7a:	f000 f8d5 	bl	800d028 <mem_init>
  memp_init();
 800ce7e:	f000 fc31 	bl	800d6e4 <memp_init>
  pbuf_init();
  netif_init();
 800ce82:	f000 fcf7 	bl	800d874 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800ce86:	f007 f8fb 	bl	8014080 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800ce8a:	f001 fe23 	bl	800ead4 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800ce8e:	f007 f83d 	bl	8013f0c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800ce92:	bf00      	nop
 800ce94:	3708      	adds	r7, #8
 800ce96:	46bd      	mov	sp, r7
 800ce98:	bd80      	pop	{r7, pc}
	...

0800ce9c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800ce9c:	b480      	push	{r7}
 800ce9e:	b083      	sub	sp, #12
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	4603      	mov	r3, r0
 800cea4:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800cea6:	4b05      	ldr	r3, [pc, #20]	; (800cebc <ptr_to_mem+0x20>)
 800cea8:	681a      	ldr	r2, [r3, #0]
 800ceaa:	88fb      	ldrh	r3, [r7, #6]
 800ceac:	4413      	add	r3, r2
}
 800ceae:	4618      	mov	r0, r3
 800ceb0:	370c      	adds	r7, #12
 800ceb2:	46bd      	mov	sp, r7
 800ceb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb8:	4770      	bx	lr
 800ceba:	bf00      	nop
 800cebc:	200137f4 	.word	0x200137f4

0800cec0 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800cec0:	b480      	push	{r7}
 800cec2:	b083      	sub	sp, #12
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800cec8:	4b05      	ldr	r3, [pc, #20]	; (800cee0 <mem_to_ptr+0x20>)
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	687a      	ldr	r2, [r7, #4]
 800cece:	1ad3      	subs	r3, r2, r3
 800ced0:	b29b      	uxth	r3, r3
}
 800ced2:	4618      	mov	r0, r3
 800ced4:	370c      	adds	r7, #12
 800ced6:	46bd      	mov	sp, r7
 800ced8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cedc:	4770      	bx	lr
 800cede:	bf00      	nop
 800cee0:	200137f4 	.word	0x200137f4

0800cee4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800cee4:	b590      	push	{r4, r7, lr}
 800cee6:	b085      	sub	sp, #20
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800ceec:	4b45      	ldr	r3, [pc, #276]	; (800d004 <plug_holes+0x120>)
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	687a      	ldr	r2, [r7, #4]
 800cef2:	429a      	cmp	r2, r3
 800cef4:	d206      	bcs.n	800cf04 <plug_holes+0x20>
 800cef6:	4b44      	ldr	r3, [pc, #272]	; (800d008 <plug_holes+0x124>)
 800cef8:	f240 12df 	movw	r2, #479	; 0x1df
 800cefc:	4943      	ldr	r1, [pc, #268]	; (800d00c <plug_holes+0x128>)
 800cefe:	4844      	ldr	r0, [pc, #272]	; (800d010 <plug_holes+0x12c>)
 800cf00:	f00c fc18 	bl	8019734 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800cf04:	4b43      	ldr	r3, [pc, #268]	; (800d014 <plug_holes+0x130>)
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	687a      	ldr	r2, [r7, #4]
 800cf0a:	429a      	cmp	r2, r3
 800cf0c:	d306      	bcc.n	800cf1c <plug_holes+0x38>
 800cf0e:	4b3e      	ldr	r3, [pc, #248]	; (800d008 <plug_holes+0x124>)
 800cf10:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800cf14:	4940      	ldr	r1, [pc, #256]	; (800d018 <plug_holes+0x134>)
 800cf16:	483e      	ldr	r0, [pc, #248]	; (800d010 <plug_holes+0x12c>)
 800cf18:	f00c fc0c 	bl	8019734 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	791b      	ldrb	r3, [r3, #4]
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d006      	beq.n	800cf32 <plug_holes+0x4e>
 800cf24:	4b38      	ldr	r3, [pc, #224]	; (800d008 <plug_holes+0x124>)
 800cf26:	f240 12e1 	movw	r2, #481	; 0x1e1
 800cf2a:	493c      	ldr	r1, [pc, #240]	; (800d01c <plug_holes+0x138>)
 800cf2c:	4838      	ldr	r0, [pc, #224]	; (800d010 <plug_holes+0x12c>)
 800cf2e:	f00c fc01 	bl	8019734 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	881b      	ldrh	r3, [r3, #0]
 800cf36:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800cf3a:	d906      	bls.n	800cf4a <plug_holes+0x66>
 800cf3c:	4b32      	ldr	r3, [pc, #200]	; (800d008 <plug_holes+0x124>)
 800cf3e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800cf42:	4937      	ldr	r1, [pc, #220]	; (800d020 <plug_holes+0x13c>)
 800cf44:	4832      	ldr	r0, [pc, #200]	; (800d010 <plug_holes+0x12c>)
 800cf46:	f00c fbf5 	bl	8019734 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	881b      	ldrh	r3, [r3, #0]
 800cf4e:	4618      	mov	r0, r3
 800cf50:	f7ff ffa4 	bl	800ce9c <ptr_to_mem>
 800cf54:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800cf56:	687a      	ldr	r2, [r7, #4]
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	429a      	cmp	r2, r3
 800cf5c:	d024      	beq.n	800cfa8 <plug_holes+0xc4>
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	791b      	ldrb	r3, [r3, #4]
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d120      	bne.n	800cfa8 <plug_holes+0xc4>
 800cf66:	4b2b      	ldr	r3, [pc, #172]	; (800d014 <plug_holes+0x130>)
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	68fa      	ldr	r2, [r7, #12]
 800cf6c:	429a      	cmp	r2, r3
 800cf6e:	d01b      	beq.n	800cfa8 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800cf70:	4b2c      	ldr	r3, [pc, #176]	; (800d024 <plug_holes+0x140>)
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	68fa      	ldr	r2, [r7, #12]
 800cf76:	429a      	cmp	r2, r3
 800cf78:	d102      	bne.n	800cf80 <plug_holes+0x9c>
      lfree = mem;
 800cf7a:	4a2a      	ldr	r2, [pc, #168]	; (800d024 <plug_holes+0x140>)
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	881a      	ldrh	r2, [r3, #0]
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	881b      	ldrh	r3, [r3, #0]
 800cf8c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800cf90:	d00a      	beq.n	800cfa8 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	881b      	ldrh	r3, [r3, #0]
 800cf96:	4618      	mov	r0, r3
 800cf98:	f7ff ff80 	bl	800ce9c <ptr_to_mem>
 800cf9c:	4604      	mov	r4, r0
 800cf9e:	6878      	ldr	r0, [r7, #4]
 800cfa0:	f7ff ff8e 	bl	800cec0 <mem_to_ptr>
 800cfa4:	4603      	mov	r3, r0
 800cfa6:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	885b      	ldrh	r3, [r3, #2]
 800cfac:	4618      	mov	r0, r3
 800cfae:	f7ff ff75 	bl	800ce9c <ptr_to_mem>
 800cfb2:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800cfb4:	68ba      	ldr	r2, [r7, #8]
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	429a      	cmp	r2, r3
 800cfba:	d01f      	beq.n	800cffc <plug_holes+0x118>
 800cfbc:	68bb      	ldr	r3, [r7, #8]
 800cfbe:	791b      	ldrb	r3, [r3, #4]
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d11b      	bne.n	800cffc <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800cfc4:	4b17      	ldr	r3, [pc, #92]	; (800d024 <plug_holes+0x140>)
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	687a      	ldr	r2, [r7, #4]
 800cfca:	429a      	cmp	r2, r3
 800cfcc:	d102      	bne.n	800cfd4 <plug_holes+0xf0>
      lfree = pmem;
 800cfce:	4a15      	ldr	r2, [pc, #84]	; (800d024 <plug_holes+0x140>)
 800cfd0:	68bb      	ldr	r3, [r7, #8]
 800cfd2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	881a      	ldrh	r2, [r3, #0]
 800cfd8:	68bb      	ldr	r3, [r7, #8]
 800cfda:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	881b      	ldrh	r3, [r3, #0]
 800cfe0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800cfe4:	d00a      	beq.n	800cffc <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	881b      	ldrh	r3, [r3, #0]
 800cfea:	4618      	mov	r0, r3
 800cfec:	f7ff ff56 	bl	800ce9c <ptr_to_mem>
 800cff0:	4604      	mov	r4, r0
 800cff2:	68b8      	ldr	r0, [r7, #8]
 800cff4:	f7ff ff64 	bl	800cec0 <mem_to_ptr>
 800cff8:	4603      	mov	r3, r0
 800cffa:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800cffc:	bf00      	nop
 800cffe:	3714      	adds	r7, #20
 800d000:	46bd      	mov	sp, r7
 800d002:	bd90      	pop	{r4, r7, pc}
 800d004:	200137f4 	.word	0x200137f4
 800d008:	0801a364 	.word	0x0801a364
 800d00c:	0801a394 	.word	0x0801a394
 800d010:	0801a3ac 	.word	0x0801a3ac
 800d014:	200137f8 	.word	0x200137f8
 800d018:	0801a3d4 	.word	0x0801a3d4
 800d01c:	0801a3f0 	.word	0x0801a3f0
 800d020:	0801a40c 	.word	0x0801a40c
 800d024:	20013800 	.word	0x20013800

0800d028 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800d028:	b580      	push	{r7, lr}
 800d02a:	b082      	sub	sp, #8
 800d02c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800d02e:	4b1f      	ldr	r3, [pc, #124]	; (800d0ac <mem_init+0x84>)
 800d030:	3303      	adds	r3, #3
 800d032:	f023 0303 	bic.w	r3, r3, #3
 800d036:	461a      	mov	r2, r3
 800d038:	4b1d      	ldr	r3, [pc, #116]	; (800d0b0 <mem_init+0x88>)
 800d03a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800d03c:	4b1c      	ldr	r3, [pc, #112]	; (800d0b0 <mem_init+0x88>)
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800d048:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	2200      	movs	r2, #0
 800d04e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	2200      	movs	r2, #0
 800d054:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800d056:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 800d05a:	f7ff ff1f 	bl	800ce9c <ptr_to_mem>
 800d05e:	4603      	mov	r3, r0
 800d060:	4a14      	ldr	r2, [pc, #80]	; (800d0b4 <mem_init+0x8c>)
 800d062:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800d064:	4b13      	ldr	r3, [pc, #76]	; (800d0b4 <mem_init+0x8c>)
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	2201      	movs	r2, #1
 800d06a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800d06c:	4b11      	ldr	r3, [pc, #68]	; (800d0b4 <mem_init+0x8c>)
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800d074:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800d076:	4b0f      	ldr	r3, [pc, #60]	; (800d0b4 <mem_init+0x8c>)
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800d07e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800d080:	4b0b      	ldr	r3, [pc, #44]	; (800d0b0 <mem_init+0x88>)
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	4a0c      	ldr	r2, [pc, #48]	; (800d0b8 <mem_init+0x90>)
 800d086:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800d088:	480c      	ldr	r0, [pc, #48]	; (800d0bc <mem_init+0x94>)
 800d08a:	f00b feb1 	bl	8018df0 <sys_mutex_new>
 800d08e:	4603      	mov	r3, r0
 800d090:	2b00      	cmp	r3, #0
 800d092:	d006      	beq.n	800d0a2 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800d094:	4b0a      	ldr	r3, [pc, #40]	; (800d0c0 <mem_init+0x98>)
 800d096:	f240 221f 	movw	r2, #543	; 0x21f
 800d09a:	490a      	ldr	r1, [pc, #40]	; (800d0c4 <mem_init+0x9c>)
 800d09c:	480a      	ldr	r0, [pc, #40]	; (800d0c8 <mem_init+0xa0>)
 800d09e:	f00c fb49 	bl	8019734 <iprintf>
  }
}
 800d0a2:	bf00      	nop
 800d0a4:	3708      	adds	r7, #8
 800d0a6:	46bd      	mov	sp, r7
 800d0a8:	bd80      	pop	{r7, pc}
 800d0aa:	bf00      	nop
 800d0ac:	20017184 	.word	0x20017184
 800d0b0:	200137f4 	.word	0x200137f4
 800d0b4:	200137f8 	.word	0x200137f8
 800d0b8:	20013800 	.word	0x20013800
 800d0bc:	200137fc 	.word	0x200137fc
 800d0c0:	0801a364 	.word	0x0801a364
 800d0c4:	0801a438 	.word	0x0801a438
 800d0c8:	0801a3ac 	.word	0x0801a3ac

0800d0cc <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800d0cc:	b580      	push	{r7, lr}
 800d0ce:	b086      	sub	sp, #24
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800d0d4:	6878      	ldr	r0, [r7, #4]
 800d0d6:	f7ff fef3 	bl	800cec0 <mem_to_ptr>
 800d0da:	4603      	mov	r3, r0
 800d0dc:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	881b      	ldrh	r3, [r3, #0]
 800d0e2:	4618      	mov	r0, r3
 800d0e4:	f7ff feda 	bl	800ce9c <ptr_to_mem>
 800d0e8:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	885b      	ldrh	r3, [r3, #2]
 800d0ee:	4618      	mov	r0, r3
 800d0f0:	f7ff fed4 	bl	800ce9c <ptr_to_mem>
 800d0f4:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	881b      	ldrh	r3, [r3, #0]
 800d0fa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800d0fe:	d818      	bhi.n	800d132 <mem_link_valid+0x66>
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	885b      	ldrh	r3, [r3, #2]
 800d104:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800d108:	d813      	bhi.n	800d132 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800d10e:	8afa      	ldrh	r2, [r7, #22]
 800d110:	429a      	cmp	r2, r3
 800d112:	d004      	beq.n	800d11e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	881b      	ldrh	r3, [r3, #0]
 800d118:	8afa      	ldrh	r2, [r7, #22]
 800d11a:	429a      	cmp	r2, r3
 800d11c:	d109      	bne.n	800d132 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800d11e:	4b08      	ldr	r3, [pc, #32]	; (800d140 <mem_link_valid+0x74>)
 800d120:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d122:	693a      	ldr	r2, [r7, #16]
 800d124:	429a      	cmp	r2, r3
 800d126:	d006      	beq.n	800d136 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800d128:	693b      	ldr	r3, [r7, #16]
 800d12a:	885b      	ldrh	r3, [r3, #2]
 800d12c:	8afa      	ldrh	r2, [r7, #22]
 800d12e:	429a      	cmp	r2, r3
 800d130:	d001      	beq.n	800d136 <mem_link_valid+0x6a>
    return 0;
 800d132:	2300      	movs	r3, #0
 800d134:	e000      	b.n	800d138 <mem_link_valid+0x6c>
  }
  return 1;
 800d136:	2301      	movs	r3, #1
}
 800d138:	4618      	mov	r0, r3
 800d13a:	3718      	adds	r7, #24
 800d13c:	46bd      	mov	sp, r7
 800d13e:	bd80      	pop	{r7, pc}
 800d140:	200137f8 	.word	0x200137f8

0800d144 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800d144:	b580      	push	{r7, lr}
 800d146:	b088      	sub	sp, #32
 800d148:	af00      	add	r7, sp, #0
 800d14a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d070      	beq.n	800d234 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	f003 0303 	and.w	r3, r3, #3
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d00d      	beq.n	800d178 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800d15c:	4b37      	ldr	r3, [pc, #220]	; (800d23c <mem_free+0xf8>)
 800d15e:	f240 2273 	movw	r2, #627	; 0x273
 800d162:	4937      	ldr	r1, [pc, #220]	; (800d240 <mem_free+0xfc>)
 800d164:	4837      	ldr	r0, [pc, #220]	; (800d244 <mem_free+0x100>)
 800d166:	f00c fae5 	bl	8019734 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d16a:	f00b fe93 	bl	8018e94 <sys_arch_protect>
 800d16e:	60f8      	str	r0, [r7, #12]
 800d170:	68f8      	ldr	r0, [r7, #12]
 800d172:	f00b fe9d 	bl	8018eb0 <sys_arch_unprotect>
    return;
 800d176:	e05e      	b.n	800d236 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	3b08      	subs	r3, #8
 800d17c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800d17e:	4b32      	ldr	r3, [pc, #200]	; (800d248 <mem_free+0x104>)
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	69fa      	ldr	r2, [r7, #28]
 800d184:	429a      	cmp	r2, r3
 800d186:	d306      	bcc.n	800d196 <mem_free+0x52>
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	f103 020c 	add.w	r2, r3, #12
 800d18e:	4b2f      	ldr	r3, [pc, #188]	; (800d24c <mem_free+0x108>)
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	429a      	cmp	r2, r3
 800d194:	d90d      	bls.n	800d1b2 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800d196:	4b29      	ldr	r3, [pc, #164]	; (800d23c <mem_free+0xf8>)
 800d198:	f240 227f 	movw	r2, #639	; 0x27f
 800d19c:	492c      	ldr	r1, [pc, #176]	; (800d250 <mem_free+0x10c>)
 800d19e:	4829      	ldr	r0, [pc, #164]	; (800d244 <mem_free+0x100>)
 800d1a0:	f00c fac8 	bl	8019734 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d1a4:	f00b fe76 	bl	8018e94 <sys_arch_protect>
 800d1a8:	6138      	str	r0, [r7, #16]
 800d1aa:	6938      	ldr	r0, [r7, #16]
 800d1ac:	f00b fe80 	bl	8018eb0 <sys_arch_unprotect>
    return;
 800d1b0:	e041      	b.n	800d236 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800d1b2:	4828      	ldr	r0, [pc, #160]	; (800d254 <mem_free+0x110>)
 800d1b4:	f00b fe32 	bl	8018e1c <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800d1b8:	69fb      	ldr	r3, [r7, #28]
 800d1ba:	791b      	ldrb	r3, [r3, #4]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d110      	bne.n	800d1e2 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800d1c0:	4b1e      	ldr	r3, [pc, #120]	; (800d23c <mem_free+0xf8>)
 800d1c2:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800d1c6:	4924      	ldr	r1, [pc, #144]	; (800d258 <mem_free+0x114>)
 800d1c8:	481e      	ldr	r0, [pc, #120]	; (800d244 <mem_free+0x100>)
 800d1ca:	f00c fab3 	bl	8019734 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800d1ce:	4821      	ldr	r0, [pc, #132]	; (800d254 <mem_free+0x110>)
 800d1d0:	f00b fe33 	bl	8018e3a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d1d4:	f00b fe5e 	bl	8018e94 <sys_arch_protect>
 800d1d8:	6178      	str	r0, [r7, #20]
 800d1da:	6978      	ldr	r0, [r7, #20]
 800d1dc:	f00b fe68 	bl	8018eb0 <sys_arch_unprotect>
    return;
 800d1e0:	e029      	b.n	800d236 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800d1e2:	69f8      	ldr	r0, [r7, #28]
 800d1e4:	f7ff ff72 	bl	800d0cc <mem_link_valid>
 800d1e8:	4603      	mov	r3, r0
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d110      	bne.n	800d210 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800d1ee:	4b13      	ldr	r3, [pc, #76]	; (800d23c <mem_free+0xf8>)
 800d1f0:	f240 2295 	movw	r2, #661	; 0x295
 800d1f4:	4919      	ldr	r1, [pc, #100]	; (800d25c <mem_free+0x118>)
 800d1f6:	4813      	ldr	r0, [pc, #76]	; (800d244 <mem_free+0x100>)
 800d1f8:	f00c fa9c 	bl	8019734 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800d1fc:	4815      	ldr	r0, [pc, #84]	; (800d254 <mem_free+0x110>)
 800d1fe:	f00b fe1c 	bl	8018e3a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d202:	f00b fe47 	bl	8018e94 <sys_arch_protect>
 800d206:	61b8      	str	r0, [r7, #24]
 800d208:	69b8      	ldr	r0, [r7, #24]
 800d20a:	f00b fe51 	bl	8018eb0 <sys_arch_unprotect>
    return;
 800d20e:	e012      	b.n	800d236 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800d210:	69fb      	ldr	r3, [r7, #28]
 800d212:	2200      	movs	r2, #0
 800d214:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800d216:	4b12      	ldr	r3, [pc, #72]	; (800d260 <mem_free+0x11c>)
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	69fa      	ldr	r2, [r7, #28]
 800d21c:	429a      	cmp	r2, r3
 800d21e:	d202      	bcs.n	800d226 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800d220:	4a0f      	ldr	r2, [pc, #60]	; (800d260 <mem_free+0x11c>)
 800d222:	69fb      	ldr	r3, [r7, #28]
 800d224:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800d226:	69f8      	ldr	r0, [r7, #28]
 800d228:	f7ff fe5c 	bl	800cee4 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800d22c:	4809      	ldr	r0, [pc, #36]	; (800d254 <mem_free+0x110>)
 800d22e:	f00b fe04 	bl	8018e3a <sys_mutex_unlock>
 800d232:	e000      	b.n	800d236 <mem_free+0xf2>
    return;
 800d234:	bf00      	nop
}
 800d236:	3720      	adds	r7, #32
 800d238:	46bd      	mov	sp, r7
 800d23a:	bd80      	pop	{r7, pc}
 800d23c:	0801a364 	.word	0x0801a364
 800d240:	0801a454 	.word	0x0801a454
 800d244:	0801a3ac 	.word	0x0801a3ac
 800d248:	200137f4 	.word	0x200137f4
 800d24c:	200137f8 	.word	0x200137f8
 800d250:	0801a478 	.word	0x0801a478
 800d254:	200137fc 	.word	0x200137fc
 800d258:	0801a494 	.word	0x0801a494
 800d25c:	0801a4bc 	.word	0x0801a4bc
 800d260:	20013800 	.word	0x20013800

0800d264 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800d264:	b580      	push	{r7, lr}
 800d266:	b088      	sub	sp, #32
 800d268:	af00      	add	r7, sp, #0
 800d26a:	6078      	str	r0, [r7, #4]
 800d26c:	460b      	mov	r3, r1
 800d26e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800d270:	887b      	ldrh	r3, [r7, #2]
 800d272:	3303      	adds	r3, #3
 800d274:	b29b      	uxth	r3, r3
 800d276:	f023 0303 	bic.w	r3, r3, #3
 800d27a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800d27c:	8bfb      	ldrh	r3, [r7, #30]
 800d27e:	2b0b      	cmp	r3, #11
 800d280:	d801      	bhi.n	800d286 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800d282:	230c      	movs	r3, #12
 800d284:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800d286:	8bfb      	ldrh	r3, [r7, #30]
 800d288:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800d28c:	d803      	bhi.n	800d296 <mem_trim+0x32>
 800d28e:	8bfa      	ldrh	r2, [r7, #30]
 800d290:	887b      	ldrh	r3, [r7, #2]
 800d292:	429a      	cmp	r2, r3
 800d294:	d201      	bcs.n	800d29a <mem_trim+0x36>
    return NULL;
 800d296:	2300      	movs	r3, #0
 800d298:	e0d8      	b.n	800d44c <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800d29a:	4b6e      	ldr	r3, [pc, #440]	; (800d454 <mem_trim+0x1f0>)
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	687a      	ldr	r2, [r7, #4]
 800d2a0:	429a      	cmp	r2, r3
 800d2a2:	d304      	bcc.n	800d2ae <mem_trim+0x4a>
 800d2a4:	4b6c      	ldr	r3, [pc, #432]	; (800d458 <mem_trim+0x1f4>)
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	687a      	ldr	r2, [r7, #4]
 800d2aa:	429a      	cmp	r2, r3
 800d2ac:	d306      	bcc.n	800d2bc <mem_trim+0x58>
 800d2ae:	4b6b      	ldr	r3, [pc, #428]	; (800d45c <mem_trim+0x1f8>)
 800d2b0:	f240 22d1 	movw	r2, #721	; 0x2d1
 800d2b4:	496a      	ldr	r1, [pc, #424]	; (800d460 <mem_trim+0x1fc>)
 800d2b6:	486b      	ldr	r0, [pc, #428]	; (800d464 <mem_trim+0x200>)
 800d2b8:	f00c fa3c 	bl	8019734 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800d2bc:	4b65      	ldr	r3, [pc, #404]	; (800d454 <mem_trim+0x1f0>)
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	687a      	ldr	r2, [r7, #4]
 800d2c2:	429a      	cmp	r2, r3
 800d2c4:	d304      	bcc.n	800d2d0 <mem_trim+0x6c>
 800d2c6:	4b64      	ldr	r3, [pc, #400]	; (800d458 <mem_trim+0x1f4>)
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	687a      	ldr	r2, [r7, #4]
 800d2cc:	429a      	cmp	r2, r3
 800d2ce:	d307      	bcc.n	800d2e0 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d2d0:	f00b fde0 	bl	8018e94 <sys_arch_protect>
 800d2d4:	60b8      	str	r0, [r7, #8]
 800d2d6:	68b8      	ldr	r0, [r7, #8]
 800d2d8:	f00b fdea 	bl	8018eb0 <sys_arch_unprotect>
    return rmem;
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	e0b5      	b.n	800d44c <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	3b08      	subs	r3, #8
 800d2e4:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800d2e6:	69b8      	ldr	r0, [r7, #24]
 800d2e8:	f7ff fdea 	bl	800cec0 <mem_to_ptr>
 800d2ec:	4603      	mov	r3, r0
 800d2ee:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800d2f0:	69bb      	ldr	r3, [r7, #24]
 800d2f2:	881a      	ldrh	r2, [r3, #0]
 800d2f4:	8afb      	ldrh	r3, [r7, #22]
 800d2f6:	1ad3      	subs	r3, r2, r3
 800d2f8:	b29b      	uxth	r3, r3
 800d2fa:	3b08      	subs	r3, #8
 800d2fc:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800d2fe:	8bfa      	ldrh	r2, [r7, #30]
 800d300:	8abb      	ldrh	r3, [r7, #20]
 800d302:	429a      	cmp	r2, r3
 800d304:	d906      	bls.n	800d314 <mem_trim+0xb0>
 800d306:	4b55      	ldr	r3, [pc, #340]	; (800d45c <mem_trim+0x1f8>)
 800d308:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800d30c:	4956      	ldr	r1, [pc, #344]	; (800d468 <mem_trim+0x204>)
 800d30e:	4855      	ldr	r0, [pc, #340]	; (800d464 <mem_trim+0x200>)
 800d310:	f00c fa10 	bl	8019734 <iprintf>
  if (newsize > size) {
 800d314:	8bfa      	ldrh	r2, [r7, #30]
 800d316:	8abb      	ldrh	r3, [r7, #20]
 800d318:	429a      	cmp	r2, r3
 800d31a:	d901      	bls.n	800d320 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800d31c:	2300      	movs	r3, #0
 800d31e:	e095      	b.n	800d44c <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800d320:	8bfa      	ldrh	r2, [r7, #30]
 800d322:	8abb      	ldrh	r3, [r7, #20]
 800d324:	429a      	cmp	r2, r3
 800d326:	d101      	bne.n	800d32c <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	e08f      	b.n	800d44c <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800d32c:	484f      	ldr	r0, [pc, #316]	; (800d46c <mem_trim+0x208>)
 800d32e:	f00b fd75 	bl	8018e1c <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800d332:	69bb      	ldr	r3, [r7, #24]
 800d334:	881b      	ldrh	r3, [r3, #0]
 800d336:	4618      	mov	r0, r3
 800d338:	f7ff fdb0 	bl	800ce9c <ptr_to_mem>
 800d33c:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800d33e:	693b      	ldr	r3, [r7, #16]
 800d340:	791b      	ldrb	r3, [r3, #4]
 800d342:	2b00      	cmp	r3, #0
 800d344:	d13f      	bne.n	800d3c6 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800d346:	69bb      	ldr	r3, [r7, #24]
 800d348:	881b      	ldrh	r3, [r3, #0]
 800d34a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800d34e:	d106      	bne.n	800d35e <mem_trim+0xfa>
 800d350:	4b42      	ldr	r3, [pc, #264]	; (800d45c <mem_trim+0x1f8>)
 800d352:	f240 22f5 	movw	r2, #757	; 0x2f5
 800d356:	4946      	ldr	r1, [pc, #280]	; (800d470 <mem_trim+0x20c>)
 800d358:	4842      	ldr	r0, [pc, #264]	; (800d464 <mem_trim+0x200>)
 800d35a:	f00c f9eb 	bl	8019734 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800d35e:	693b      	ldr	r3, [r7, #16]
 800d360:	881b      	ldrh	r3, [r3, #0]
 800d362:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800d364:	8afa      	ldrh	r2, [r7, #22]
 800d366:	8bfb      	ldrh	r3, [r7, #30]
 800d368:	4413      	add	r3, r2
 800d36a:	b29b      	uxth	r3, r3
 800d36c:	3308      	adds	r3, #8
 800d36e:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800d370:	4b40      	ldr	r3, [pc, #256]	; (800d474 <mem_trim+0x210>)
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	693a      	ldr	r2, [r7, #16]
 800d376:	429a      	cmp	r2, r3
 800d378:	d106      	bne.n	800d388 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800d37a:	89fb      	ldrh	r3, [r7, #14]
 800d37c:	4618      	mov	r0, r3
 800d37e:	f7ff fd8d 	bl	800ce9c <ptr_to_mem>
 800d382:	4603      	mov	r3, r0
 800d384:	4a3b      	ldr	r2, [pc, #236]	; (800d474 <mem_trim+0x210>)
 800d386:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800d388:	89fb      	ldrh	r3, [r7, #14]
 800d38a:	4618      	mov	r0, r3
 800d38c:	f7ff fd86 	bl	800ce9c <ptr_to_mem>
 800d390:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800d392:	693b      	ldr	r3, [r7, #16]
 800d394:	2200      	movs	r2, #0
 800d396:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800d398:	693b      	ldr	r3, [r7, #16]
 800d39a:	89ba      	ldrh	r2, [r7, #12]
 800d39c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800d39e:	693b      	ldr	r3, [r7, #16]
 800d3a0:	8afa      	ldrh	r2, [r7, #22]
 800d3a2:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800d3a4:	69bb      	ldr	r3, [r7, #24]
 800d3a6:	89fa      	ldrh	r2, [r7, #14]
 800d3a8:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800d3aa:	693b      	ldr	r3, [r7, #16]
 800d3ac:	881b      	ldrh	r3, [r3, #0]
 800d3ae:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800d3b2:	d047      	beq.n	800d444 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800d3b4:	693b      	ldr	r3, [r7, #16]
 800d3b6:	881b      	ldrh	r3, [r3, #0]
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	f7ff fd6f 	bl	800ce9c <ptr_to_mem>
 800d3be:	4602      	mov	r2, r0
 800d3c0:	89fb      	ldrh	r3, [r7, #14]
 800d3c2:	8053      	strh	r3, [r2, #2]
 800d3c4:	e03e      	b.n	800d444 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800d3c6:	8bfb      	ldrh	r3, [r7, #30]
 800d3c8:	f103 0214 	add.w	r2, r3, #20
 800d3cc:	8abb      	ldrh	r3, [r7, #20]
 800d3ce:	429a      	cmp	r2, r3
 800d3d0:	d838      	bhi.n	800d444 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800d3d2:	8afa      	ldrh	r2, [r7, #22]
 800d3d4:	8bfb      	ldrh	r3, [r7, #30]
 800d3d6:	4413      	add	r3, r2
 800d3d8:	b29b      	uxth	r3, r3
 800d3da:	3308      	adds	r3, #8
 800d3dc:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800d3de:	69bb      	ldr	r3, [r7, #24]
 800d3e0:	881b      	ldrh	r3, [r3, #0]
 800d3e2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800d3e6:	d106      	bne.n	800d3f6 <mem_trim+0x192>
 800d3e8:	4b1c      	ldr	r3, [pc, #112]	; (800d45c <mem_trim+0x1f8>)
 800d3ea:	f240 3216 	movw	r2, #790	; 0x316
 800d3ee:	4920      	ldr	r1, [pc, #128]	; (800d470 <mem_trim+0x20c>)
 800d3f0:	481c      	ldr	r0, [pc, #112]	; (800d464 <mem_trim+0x200>)
 800d3f2:	f00c f99f 	bl	8019734 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800d3f6:	89fb      	ldrh	r3, [r7, #14]
 800d3f8:	4618      	mov	r0, r3
 800d3fa:	f7ff fd4f 	bl	800ce9c <ptr_to_mem>
 800d3fe:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800d400:	4b1c      	ldr	r3, [pc, #112]	; (800d474 <mem_trim+0x210>)
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	693a      	ldr	r2, [r7, #16]
 800d406:	429a      	cmp	r2, r3
 800d408:	d202      	bcs.n	800d410 <mem_trim+0x1ac>
      lfree = mem2;
 800d40a:	4a1a      	ldr	r2, [pc, #104]	; (800d474 <mem_trim+0x210>)
 800d40c:	693b      	ldr	r3, [r7, #16]
 800d40e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800d410:	693b      	ldr	r3, [r7, #16]
 800d412:	2200      	movs	r2, #0
 800d414:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800d416:	69bb      	ldr	r3, [r7, #24]
 800d418:	881a      	ldrh	r2, [r3, #0]
 800d41a:	693b      	ldr	r3, [r7, #16]
 800d41c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800d41e:	693b      	ldr	r3, [r7, #16]
 800d420:	8afa      	ldrh	r2, [r7, #22]
 800d422:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800d424:	69bb      	ldr	r3, [r7, #24]
 800d426:	89fa      	ldrh	r2, [r7, #14]
 800d428:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800d42a:	693b      	ldr	r3, [r7, #16]
 800d42c:	881b      	ldrh	r3, [r3, #0]
 800d42e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800d432:	d007      	beq.n	800d444 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800d434:	693b      	ldr	r3, [r7, #16]
 800d436:	881b      	ldrh	r3, [r3, #0]
 800d438:	4618      	mov	r0, r3
 800d43a:	f7ff fd2f 	bl	800ce9c <ptr_to_mem>
 800d43e:	4602      	mov	r2, r0
 800d440:	89fb      	ldrh	r3, [r7, #14]
 800d442:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800d444:	4809      	ldr	r0, [pc, #36]	; (800d46c <mem_trim+0x208>)
 800d446:	f00b fcf8 	bl	8018e3a <sys_mutex_unlock>
  return rmem;
 800d44a:	687b      	ldr	r3, [r7, #4]
}
 800d44c:	4618      	mov	r0, r3
 800d44e:	3720      	adds	r7, #32
 800d450:	46bd      	mov	sp, r7
 800d452:	bd80      	pop	{r7, pc}
 800d454:	200137f4 	.word	0x200137f4
 800d458:	200137f8 	.word	0x200137f8
 800d45c:	0801a364 	.word	0x0801a364
 800d460:	0801a4f0 	.word	0x0801a4f0
 800d464:	0801a3ac 	.word	0x0801a3ac
 800d468:	0801a508 	.word	0x0801a508
 800d46c:	200137fc 	.word	0x200137fc
 800d470:	0801a528 	.word	0x0801a528
 800d474:	20013800 	.word	0x20013800

0800d478 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800d478:	b580      	push	{r7, lr}
 800d47a:	b088      	sub	sp, #32
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	4603      	mov	r3, r0
 800d480:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800d482:	88fb      	ldrh	r3, [r7, #6]
 800d484:	2b00      	cmp	r3, #0
 800d486:	d101      	bne.n	800d48c <mem_malloc+0x14>
    return NULL;
 800d488:	2300      	movs	r3, #0
 800d48a:	e0e2      	b.n	800d652 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800d48c:	88fb      	ldrh	r3, [r7, #6]
 800d48e:	3303      	adds	r3, #3
 800d490:	b29b      	uxth	r3, r3
 800d492:	f023 0303 	bic.w	r3, r3, #3
 800d496:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800d498:	8bbb      	ldrh	r3, [r7, #28]
 800d49a:	2b0b      	cmp	r3, #11
 800d49c:	d801      	bhi.n	800d4a2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800d49e:	230c      	movs	r3, #12
 800d4a0:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800d4a2:	8bbb      	ldrh	r3, [r7, #28]
 800d4a4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800d4a8:	d803      	bhi.n	800d4b2 <mem_malloc+0x3a>
 800d4aa:	8bba      	ldrh	r2, [r7, #28]
 800d4ac:	88fb      	ldrh	r3, [r7, #6]
 800d4ae:	429a      	cmp	r2, r3
 800d4b0:	d201      	bcs.n	800d4b6 <mem_malloc+0x3e>
    return NULL;
 800d4b2:	2300      	movs	r3, #0
 800d4b4:	e0cd      	b.n	800d652 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800d4b6:	4869      	ldr	r0, [pc, #420]	; (800d65c <mem_malloc+0x1e4>)
 800d4b8:	f00b fcb0 	bl	8018e1c <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800d4bc:	4b68      	ldr	r3, [pc, #416]	; (800d660 <mem_malloc+0x1e8>)
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	4618      	mov	r0, r3
 800d4c2:	f7ff fcfd 	bl	800cec0 <mem_to_ptr>
 800d4c6:	4603      	mov	r3, r0
 800d4c8:	83fb      	strh	r3, [r7, #30]
 800d4ca:	e0b7      	b.n	800d63c <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800d4cc:	8bfb      	ldrh	r3, [r7, #30]
 800d4ce:	4618      	mov	r0, r3
 800d4d0:	f7ff fce4 	bl	800ce9c <ptr_to_mem>
 800d4d4:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800d4d6:	697b      	ldr	r3, [r7, #20]
 800d4d8:	791b      	ldrb	r3, [r3, #4]
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	f040 80a7 	bne.w	800d62e <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800d4e0:	697b      	ldr	r3, [r7, #20]
 800d4e2:	881b      	ldrh	r3, [r3, #0]
 800d4e4:	461a      	mov	r2, r3
 800d4e6:	8bfb      	ldrh	r3, [r7, #30]
 800d4e8:	1ad3      	subs	r3, r2, r3
 800d4ea:	f1a3 0208 	sub.w	r2, r3, #8
 800d4ee:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800d4f0:	429a      	cmp	r2, r3
 800d4f2:	f0c0 809c 	bcc.w	800d62e <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800d4f6:	697b      	ldr	r3, [r7, #20]
 800d4f8:	881b      	ldrh	r3, [r3, #0]
 800d4fa:	461a      	mov	r2, r3
 800d4fc:	8bfb      	ldrh	r3, [r7, #30]
 800d4fe:	1ad3      	subs	r3, r2, r3
 800d500:	f1a3 0208 	sub.w	r2, r3, #8
 800d504:	8bbb      	ldrh	r3, [r7, #28]
 800d506:	3314      	adds	r3, #20
 800d508:	429a      	cmp	r2, r3
 800d50a:	d333      	bcc.n	800d574 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800d50c:	8bfa      	ldrh	r2, [r7, #30]
 800d50e:	8bbb      	ldrh	r3, [r7, #28]
 800d510:	4413      	add	r3, r2
 800d512:	b29b      	uxth	r3, r3
 800d514:	3308      	adds	r3, #8
 800d516:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800d518:	8a7b      	ldrh	r3, [r7, #18]
 800d51a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800d51e:	d106      	bne.n	800d52e <mem_malloc+0xb6>
 800d520:	4b50      	ldr	r3, [pc, #320]	; (800d664 <mem_malloc+0x1ec>)
 800d522:	f240 3287 	movw	r2, #903	; 0x387
 800d526:	4950      	ldr	r1, [pc, #320]	; (800d668 <mem_malloc+0x1f0>)
 800d528:	4850      	ldr	r0, [pc, #320]	; (800d66c <mem_malloc+0x1f4>)
 800d52a:	f00c f903 	bl	8019734 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800d52e:	8a7b      	ldrh	r3, [r7, #18]
 800d530:	4618      	mov	r0, r3
 800d532:	f7ff fcb3 	bl	800ce9c <ptr_to_mem>
 800d536:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	2200      	movs	r2, #0
 800d53c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800d53e:	697b      	ldr	r3, [r7, #20]
 800d540:	881a      	ldrh	r2, [r3, #0]
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	8bfa      	ldrh	r2, [r7, #30]
 800d54a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800d54c:	697b      	ldr	r3, [r7, #20]
 800d54e:	8a7a      	ldrh	r2, [r7, #18]
 800d550:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800d552:	697b      	ldr	r3, [r7, #20]
 800d554:	2201      	movs	r2, #1
 800d556:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	881b      	ldrh	r3, [r3, #0]
 800d55c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800d560:	d00b      	beq.n	800d57a <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	881b      	ldrh	r3, [r3, #0]
 800d566:	4618      	mov	r0, r3
 800d568:	f7ff fc98 	bl	800ce9c <ptr_to_mem>
 800d56c:	4602      	mov	r2, r0
 800d56e:	8a7b      	ldrh	r3, [r7, #18]
 800d570:	8053      	strh	r3, [r2, #2]
 800d572:	e002      	b.n	800d57a <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800d574:	697b      	ldr	r3, [r7, #20]
 800d576:	2201      	movs	r2, #1
 800d578:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800d57a:	4b39      	ldr	r3, [pc, #228]	; (800d660 <mem_malloc+0x1e8>)
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	697a      	ldr	r2, [r7, #20]
 800d580:	429a      	cmp	r2, r3
 800d582:	d127      	bne.n	800d5d4 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800d584:	4b36      	ldr	r3, [pc, #216]	; (800d660 <mem_malloc+0x1e8>)
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800d58a:	e005      	b.n	800d598 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800d58c:	69bb      	ldr	r3, [r7, #24]
 800d58e:	881b      	ldrh	r3, [r3, #0]
 800d590:	4618      	mov	r0, r3
 800d592:	f7ff fc83 	bl	800ce9c <ptr_to_mem>
 800d596:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800d598:	69bb      	ldr	r3, [r7, #24]
 800d59a:	791b      	ldrb	r3, [r3, #4]
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d004      	beq.n	800d5aa <mem_malloc+0x132>
 800d5a0:	4b33      	ldr	r3, [pc, #204]	; (800d670 <mem_malloc+0x1f8>)
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	69ba      	ldr	r2, [r7, #24]
 800d5a6:	429a      	cmp	r2, r3
 800d5a8:	d1f0      	bne.n	800d58c <mem_malloc+0x114>
          }
          lfree = cur;
 800d5aa:	4a2d      	ldr	r2, [pc, #180]	; (800d660 <mem_malloc+0x1e8>)
 800d5ac:	69bb      	ldr	r3, [r7, #24]
 800d5ae:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800d5b0:	4b2b      	ldr	r3, [pc, #172]	; (800d660 <mem_malloc+0x1e8>)
 800d5b2:	681a      	ldr	r2, [r3, #0]
 800d5b4:	4b2e      	ldr	r3, [pc, #184]	; (800d670 <mem_malloc+0x1f8>)
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	429a      	cmp	r2, r3
 800d5ba:	d00b      	beq.n	800d5d4 <mem_malloc+0x15c>
 800d5bc:	4b28      	ldr	r3, [pc, #160]	; (800d660 <mem_malloc+0x1e8>)
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	791b      	ldrb	r3, [r3, #4]
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d006      	beq.n	800d5d4 <mem_malloc+0x15c>
 800d5c6:	4b27      	ldr	r3, [pc, #156]	; (800d664 <mem_malloc+0x1ec>)
 800d5c8:	f240 32b5 	movw	r2, #949	; 0x3b5
 800d5cc:	4929      	ldr	r1, [pc, #164]	; (800d674 <mem_malloc+0x1fc>)
 800d5ce:	4827      	ldr	r0, [pc, #156]	; (800d66c <mem_malloc+0x1f4>)
 800d5d0:	f00c f8b0 	bl	8019734 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800d5d4:	4821      	ldr	r0, [pc, #132]	; (800d65c <mem_malloc+0x1e4>)
 800d5d6:	f00b fc30 	bl	8018e3a <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800d5da:	8bba      	ldrh	r2, [r7, #28]
 800d5dc:	697b      	ldr	r3, [r7, #20]
 800d5de:	4413      	add	r3, r2
 800d5e0:	3308      	adds	r3, #8
 800d5e2:	4a23      	ldr	r2, [pc, #140]	; (800d670 <mem_malloc+0x1f8>)
 800d5e4:	6812      	ldr	r2, [r2, #0]
 800d5e6:	4293      	cmp	r3, r2
 800d5e8:	d906      	bls.n	800d5f8 <mem_malloc+0x180>
 800d5ea:	4b1e      	ldr	r3, [pc, #120]	; (800d664 <mem_malloc+0x1ec>)
 800d5ec:	f240 32b9 	movw	r2, #953	; 0x3b9
 800d5f0:	4921      	ldr	r1, [pc, #132]	; (800d678 <mem_malloc+0x200>)
 800d5f2:	481e      	ldr	r0, [pc, #120]	; (800d66c <mem_malloc+0x1f4>)
 800d5f4:	f00c f89e 	bl	8019734 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800d5f8:	697b      	ldr	r3, [r7, #20]
 800d5fa:	f003 0303 	and.w	r3, r3, #3
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d006      	beq.n	800d610 <mem_malloc+0x198>
 800d602:	4b18      	ldr	r3, [pc, #96]	; (800d664 <mem_malloc+0x1ec>)
 800d604:	f240 32bb 	movw	r2, #955	; 0x3bb
 800d608:	491c      	ldr	r1, [pc, #112]	; (800d67c <mem_malloc+0x204>)
 800d60a:	4818      	ldr	r0, [pc, #96]	; (800d66c <mem_malloc+0x1f4>)
 800d60c:	f00c f892 	bl	8019734 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800d610:	697b      	ldr	r3, [r7, #20]
 800d612:	f003 0303 	and.w	r3, r3, #3
 800d616:	2b00      	cmp	r3, #0
 800d618:	d006      	beq.n	800d628 <mem_malloc+0x1b0>
 800d61a:	4b12      	ldr	r3, [pc, #72]	; (800d664 <mem_malloc+0x1ec>)
 800d61c:	f240 32bd 	movw	r2, #957	; 0x3bd
 800d620:	4917      	ldr	r1, [pc, #92]	; (800d680 <mem_malloc+0x208>)
 800d622:	4812      	ldr	r0, [pc, #72]	; (800d66c <mem_malloc+0x1f4>)
 800d624:	f00c f886 	bl	8019734 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800d628:	697b      	ldr	r3, [r7, #20]
 800d62a:	3308      	adds	r3, #8
 800d62c:	e011      	b.n	800d652 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800d62e:	8bfb      	ldrh	r3, [r7, #30]
 800d630:	4618      	mov	r0, r3
 800d632:	f7ff fc33 	bl	800ce9c <ptr_to_mem>
 800d636:	4603      	mov	r3, r0
 800d638:	881b      	ldrh	r3, [r3, #0]
 800d63a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800d63c:	8bfa      	ldrh	r2, [r7, #30]
 800d63e:	8bbb      	ldrh	r3, [r7, #28]
 800d640:	f5c3 53a0 	rsb	r3, r3, #5120	; 0x1400
 800d644:	429a      	cmp	r2, r3
 800d646:	f4ff af41 	bcc.w	800d4cc <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800d64a:	4804      	ldr	r0, [pc, #16]	; (800d65c <mem_malloc+0x1e4>)
 800d64c:	f00b fbf5 	bl	8018e3a <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800d650:	2300      	movs	r3, #0
}
 800d652:	4618      	mov	r0, r3
 800d654:	3720      	adds	r7, #32
 800d656:	46bd      	mov	sp, r7
 800d658:	bd80      	pop	{r7, pc}
 800d65a:	bf00      	nop
 800d65c:	200137fc 	.word	0x200137fc
 800d660:	20013800 	.word	0x20013800
 800d664:	0801a364 	.word	0x0801a364
 800d668:	0801a528 	.word	0x0801a528
 800d66c:	0801a3ac 	.word	0x0801a3ac
 800d670:	200137f8 	.word	0x200137f8
 800d674:	0801a53c 	.word	0x0801a53c
 800d678:	0801a558 	.word	0x0801a558
 800d67c:	0801a588 	.word	0x0801a588
 800d680:	0801a5b8 	.word	0x0801a5b8

0800d684 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800d684:	b480      	push	{r7}
 800d686:	b085      	sub	sp, #20
 800d688:	af00      	add	r7, sp, #0
 800d68a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	689b      	ldr	r3, [r3, #8]
 800d690:	2200      	movs	r2, #0
 800d692:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	685b      	ldr	r3, [r3, #4]
 800d698:	3303      	adds	r3, #3
 800d69a:	f023 0303 	bic.w	r3, r3, #3
 800d69e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800d6a0:	2300      	movs	r3, #0
 800d6a2:	60fb      	str	r3, [r7, #12]
 800d6a4:	e011      	b.n	800d6ca <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	689b      	ldr	r3, [r3, #8]
 800d6aa:	681a      	ldr	r2, [r3, #0]
 800d6ac:	68bb      	ldr	r3, [r7, #8]
 800d6ae:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	689b      	ldr	r3, [r3, #8]
 800d6b4:	68ba      	ldr	r2, [r7, #8]
 800d6b6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	881b      	ldrh	r3, [r3, #0]
 800d6bc:	461a      	mov	r2, r3
 800d6be:	68bb      	ldr	r3, [r7, #8]
 800d6c0:	4413      	add	r3, r2
 800d6c2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	3301      	adds	r3, #1
 800d6c8:	60fb      	str	r3, [r7, #12]
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	885b      	ldrh	r3, [r3, #2]
 800d6ce:	461a      	mov	r2, r3
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	4293      	cmp	r3, r2
 800d6d4:	dbe7      	blt.n	800d6a6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800d6d6:	bf00      	nop
 800d6d8:	bf00      	nop
 800d6da:	3714      	adds	r7, #20
 800d6dc:	46bd      	mov	sp, r7
 800d6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e2:	4770      	bx	lr

0800d6e4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800d6e4:	b580      	push	{r7, lr}
 800d6e6:	b082      	sub	sp, #8
 800d6e8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800d6ea:	2300      	movs	r3, #0
 800d6ec:	80fb      	strh	r3, [r7, #6]
 800d6ee:	e009      	b.n	800d704 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800d6f0:	88fb      	ldrh	r3, [r7, #6]
 800d6f2:	4a08      	ldr	r2, [pc, #32]	; (800d714 <memp_init+0x30>)
 800d6f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	f7ff ffc3 	bl	800d684 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800d6fe:	88fb      	ldrh	r3, [r7, #6]
 800d700:	3301      	adds	r3, #1
 800d702:	80fb      	strh	r3, [r7, #6]
 800d704:	88fb      	ldrh	r3, [r7, #6]
 800d706:	2b0c      	cmp	r3, #12
 800d708:	d9f2      	bls.n	800d6f0 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800d70a:	bf00      	nop
 800d70c:	bf00      	nop
 800d70e:	3708      	adds	r7, #8
 800d710:	46bd      	mov	sp, r7
 800d712:	bd80      	pop	{r7, pc}
 800d714:	0801d1d4 	.word	0x0801d1d4

0800d718 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800d718:	b580      	push	{r7, lr}
 800d71a:	b084      	sub	sp, #16
 800d71c:	af00      	add	r7, sp, #0
 800d71e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800d720:	f00b fbb8 	bl	8018e94 <sys_arch_protect>
 800d724:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	689b      	ldr	r3, [r3, #8]
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800d72e:	68bb      	ldr	r3, [r7, #8]
 800d730:	2b00      	cmp	r3, #0
 800d732:	d015      	beq.n	800d760 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	689b      	ldr	r3, [r3, #8]
 800d738:	68ba      	ldr	r2, [r7, #8]
 800d73a:	6812      	ldr	r2, [r2, #0]
 800d73c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800d73e:	68bb      	ldr	r3, [r7, #8]
 800d740:	f003 0303 	and.w	r3, r3, #3
 800d744:	2b00      	cmp	r3, #0
 800d746:	d006      	beq.n	800d756 <do_memp_malloc_pool+0x3e>
 800d748:	4b09      	ldr	r3, [pc, #36]	; (800d770 <do_memp_malloc_pool+0x58>)
 800d74a:	f44f 728c 	mov.w	r2, #280	; 0x118
 800d74e:	4909      	ldr	r1, [pc, #36]	; (800d774 <do_memp_malloc_pool+0x5c>)
 800d750:	4809      	ldr	r0, [pc, #36]	; (800d778 <do_memp_malloc_pool+0x60>)
 800d752:	f00b ffef 	bl	8019734 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800d756:	68f8      	ldr	r0, [r7, #12]
 800d758:	f00b fbaa 	bl	8018eb0 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800d75c:	68bb      	ldr	r3, [r7, #8]
 800d75e:	e003      	b.n	800d768 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800d760:	68f8      	ldr	r0, [r7, #12]
 800d762:	f00b fba5 	bl	8018eb0 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800d766:	2300      	movs	r3, #0
}
 800d768:	4618      	mov	r0, r3
 800d76a:	3710      	adds	r7, #16
 800d76c:	46bd      	mov	sp, r7
 800d76e:	bd80      	pop	{r7, pc}
 800d770:	0801a5dc 	.word	0x0801a5dc
 800d774:	0801a60c 	.word	0x0801a60c
 800d778:	0801a630 	.word	0x0801a630

0800d77c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800d77c:	b580      	push	{r7, lr}
 800d77e:	b084      	sub	sp, #16
 800d780:	af00      	add	r7, sp, #0
 800d782:	4603      	mov	r3, r0
 800d784:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800d786:	79fb      	ldrb	r3, [r7, #7]
 800d788:	2b0c      	cmp	r3, #12
 800d78a:	d908      	bls.n	800d79e <memp_malloc+0x22>
 800d78c:	4b0a      	ldr	r3, [pc, #40]	; (800d7b8 <memp_malloc+0x3c>)
 800d78e:	f240 1257 	movw	r2, #343	; 0x157
 800d792:	490a      	ldr	r1, [pc, #40]	; (800d7bc <memp_malloc+0x40>)
 800d794:	480a      	ldr	r0, [pc, #40]	; (800d7c0 <memp_malloc+0x44>)
 800d796:	f00b ffcd 	bl	8019734 <iprintf>
 800d79a:	2300      	movs	r3, #0
 800d79c:	e008      	b.n	800d7b0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800d79e:	79fb      	ldrb	r3, [r7, #7]
 800d7a0:	4a08      	ldr	r2, [pc, #32]	; (800d7c4 <memp_malloc+0x48>)
 800d7a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	f7ff ffb6 	bl	800d718 <do_memp_malloc_pool>
 800d7ac:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800d7ae:	68fb      	ldr	r3, [r7, #12]
}
 800d7b0:	4618      	mov	r0, r3
 800d7b2:	3710      	adds	r7, #16
 800d7b4:	46bd      	mov	sp, r7
 800d7b6:	bd80      	pop	{r7, pc}
 800d7b8:	0801a5dc 	.word	0x0801a5dc
 800d7bc:	0801a66c 	.word	0x0801a66c
 800d7c0:	0801a630 	.word	0x0801a630
 800d7c4:	0801d1d4 	.word	0x0801d1d4

0800d7c8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800d7c8:	b580      	push	{r7, lr}
 800d7ca:	b084      	sub	sp, #16
 800d7cc:	af00      	add	r7, sp, #0
 800d7ce:	6078      	str	r0, [r7, #4]
 800d7d0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800d7d2:	683b      	ldr	r3, [r7, #0]
 800d7d4:	f003 0303 	and.w	r3, r3, #3
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d006      	beq.n	800d7ea <do_memp_free_pool+0x22>
 800d7dc:	4b0d      	ldr	r3, [pc, #52]	; (800d814 <do_memp_free_pool+0x4c>)
 800d7de:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800d7e2:	490d      	ldr	r1, [pc, #52]	; (800d818 <do_memp_free_pool+0x50>)
 800d7e4:	480d      	ldr	r0, [pc, #52]	; (800d81c <do_memp_free_pool+0x54>)
 800d7e6:	f00b ffa5 	bl	8019734 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800d7ea:	683b      	ldr	r3, [r7, #0]
 800d7ec:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800d7ee:	f00b fb51 	bl	8018e94 <sys_arch_protect>
 800d7f2:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	689b      	ldr	r3, [r3, #8]
 800d7f8:	681a      	ldr	r2, [r3, #0]
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	689b      	ldr	r3, [r3, #8]
 800d802:	68fa      	ldr	r2, [r7, #12]
 800d804:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800d806:	68b8      	ldr	r0, [r7, #8]
 800d808:	f00b fb52 	bl	8018eb0 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800d80c:	bf00      	nop
 800d80e:	3710      	adds	r7, #16
 800d810:	46bd      	mov	sp, r7
 800d812:	bd80      	pop	{r7, pc}
 800d814:	0801a5dc 	.word	0x0801a5dc
 800d818:	0801a68c 	.word	0x0801a68c
 800d81c:	0801a630 	.word	0x0801a630

0800d820 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800d820:	b580      	push	{r7, lr}
 800d822:	b082      	sub	sp, #8
 800d824:	af00      	add	r7, sp, #0
 800d826:	4603      	mov	r3, r0
 800d828:	6039      	str	r1, [r7, #0]
 800d82a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800d82c:	79fb      	ldrb	r3, [r7, #7]
 800d82e:	2b0c      	cmp	r3, #12
 800d830:	d907      	bls.n	800d842 <memp_free+0x22>
 800d832:	4b0c      	ldr	r3, [pc, #48]	; (800d864 <memp_free+0x44>)
 800d834:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800d838:	490b      	ldr	r1, [pc, #44]	; (800d868 <memp_free+0x48>)
 800d83a:	480c      	ldr	r0, [pc, #48]	; (800d86c <memp_free+0x4c>)
 800d83c:	f00b ff7a 	bl	8019734 <iprintf>
 800d840:	e00c      	b.n	800d85c <memp_free+0x3c>

  if (mem == NULL) {
 800d842:	683b      	ldr	r3, [r7, #0]
 800d844:	2b00      	cmp	r3, #0
 800d846:	d008      	beq.n	800d85a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800d848:	79fb      	ldrb	r3, [r7, #7]
 800d84a:	4a09      	ldr	r2, [pc, #36]	; (800d870 <memp_free+0x50>)
 800d84c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d850:	6839      	ldr	r1, [r7, #0]
 800d852:	4618      	mov	r0, r3
 800d854:	f7ff ffb8 	bl	800d7c8 <do_memp_free_pool>
 800d858:	e000      	b.n	800d85c <memp_free+0x3c>
    return;
 800d85a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800d85c:	3708      	adds	r7, #8
 800d85e:	46bd      	mov	sp, r7
 800d860:	bd80      	pop	{r7, pc}
 800d862:	bf00      	nop
 800d864:	0801a5dc 	.word	0x0801a5dc
 800d868:	0801a6ac 	.word	0x0801a6ac
 800d86c:	0801a630 	.word	0x0801a630
 800d870:	0801d1d4 	.word	0x0801d1d4

0800d874 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800d874:	b480      	push	{r7}
 800d876:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800d878:	bf00      	nop
 800d87a:	46bd      	mov	sp, r7
 800d87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d880:	4770      	bx	lr
	...

0800d884 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800d884:	b580      	push	{r7, lr}
 800d886:	b086      	sub	sp, #24
 800d888:	af00      	add	r7, sp, #0
 800d88a:	60f8      	str	r0, [r7, #12]
 800d88c:	60b9      	str	r1, [r7, #8]
 800d88e:	607a      	str	r2, [r7, #4]
 800d890:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	2b00      	cmp	r3, #0
 800d896:	d108      	bne.n	800d8aa <netif_add+0x26>
 800d898:	4b5b      	ldr	r3, [pc, #364]	; (800da08 <netif_add+0x184>)
 800d89a:	f240 1227 	movw	r2, #295	; 0x127
 800d89e:	495b      	ldr	r1, [pc, #364]	; (800da0c <netif_add+0x188>)
 800d8a0:	485b      	ldr	r0, [pc, #364]	; (800da10 <netif_add+0x18c>)
 800d8a2:	f00b ff47 	bl	8019734 <iprintf>
 800d8a6:	2300      	movs	r3, #0
 800d8a8:	e0a9      	b.n	800d9fe <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800d8aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d108      	bne.n	800d8c2 <netif_add+0x3e>
 800d8b0:	4b55      	ldr	r3, [pc, #340]	; (800da08 <netif_add+0x184>)
 800d8b2:	f44f 7294 	mov.w	r2, #296	; 0x128
 800d8b6:	4957      	ldr	r1, [pc, #348]	; (800da14 <netif_add+0x190>)
 800d8b8:	4855      	ldr	r0, [pc, #340]	; (800da10 <netif_add+0x18c>)
 800d8ba:	f00b ff3b 	bl	8019734 <iprintf>
 800d8be:	2300      	movs	r3, #0
 800d8c0:	e09d      	b.n	800d9fe <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800d8c2:	68bb      	ldr	r3, [r7, #8]
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d101      	bne.n	800d8cc <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800d8c8:	4b53      	ldr	r3, [pc, #332]	; (800da18 <netif_add+0x194>)
 800d8ca:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d101      	bne.n	800d8d6 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800d8d2:	4b51      	ldr	r3, [pc, #324]	; (800da18 <netif_add+0x194>)
 800d8d4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800d8d6:	683b      	ldr	r3, [r7, #0]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d101      	bne.n	800d8e0 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800d8dc:	4b4e      	ldr	r3, [pc, #312]	; (800da18 <netif_add+0x194>)
 800d8de:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	2200      	movs	r2, #0
 800d8e4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	2200      	movs	r2, #0
 800d8ea:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	2200      	movs	r2, #0
 800d8f0:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	4a49      	ldr	r2, [pc, #292]	; (800da1c <netif_add+0x198>)
 800d8f6:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	2200      	movs	r2, #0
 800d8fc:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	2200      	movs	r2, #0
 800d902:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	3324      	adds	r3, #36	; 0x24
 800d90a:	2204      	movs	r2, #4
 800d90c:	2100      	movs	r1, #0
 800d90e:	4618      	mov	r0, r3
 800d910:	f00b fb3a 	bl	8018f88 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	2200      	movs	r2, #0
 800d918:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	6a3a      	ldr	r2, [r7, #32]
 800d91e:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800d920:	4b3f      	ldr	r3, [pc, #252]	; (800da20 <netif_add+0x19c>)
 800d922:	781a      	ldrb	r2, [r3, #0]
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d92e:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800d930:	683b      	ldr	r3, [r7, #0]
 800d932:	687a      	ldr	r2, [r7, #4]
 800d934:	68b9      	ldr	r1, [r7, #8]
 800d936:	68f8      	ldr	r0, [r7, #12]
 800d938:	f000 f914 	bl	800db64 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800d93c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d93e:	68f8      	ldr	r0, [r7, #12]
 800d940:	4798      	blx	r3
 800d942:	4603      	mov	r3, r0
 800d944:	2b00      	cmp	r3, #0
 800d946:	d001      	beq.n	800d94c <netif_add+0xc8>
    return NULL;
 800d948:	2300      	movs	r3, #0
 800d94a:	e058      	b.n	800d9fe <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d952:	2bff      	cmp	r3, #255	; 0xff
 800d954:	d103      	bne.n	800d95e <netif_add+0xda>
        netif->num = 0;
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	2200      	movs	r2, #0
 800d95a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800d95e:	2300      	movs	r3, #0
 800d960:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800d962:	4b30      	ldr	r3, [pc, #192]	; (800da24 <netif_add+0x1a0>)
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	617b      	str	r3, [r7, #20]
 800d968:	e02b      	b.n	800d9c2 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800d96a:	697a      	ldr	r2, [r7, #20]
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	429a      	cmp	r2, r3
 800d970:	d106      	bne.n	800d980 <netif_add+0xfc>
 800d972:	4b25      	ldr	r3, [pc, #148]	; (800da08 <netif_add+0x184>)
 800d974:	f240 128b 	movw	r2, #395	; 0x18b
 800d978:	492b      	ldr	r1, [pc, #172]	; (800da28 <netif_add+0x1a4>)
 800d97a:	4825      	ldr	r0, [pc, #148]	; (800da10 <netif_add+0x18c>)
 800d97c:	f00b feda 	bl	8019734 <iprintf>
        num_netifs++;
 800d980:	693b      	ldr	r3, [r7, #16]
 800d982:	3301      	adds	r3, #1
 800d984:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800d986:	693b      	ldr	r3, [r7, #16]
 800d988:	2bff      	cmp	r3, #255	; 0xff
 800d98a:	dd06      	ble.n	800d99a <netif_add+0x116>
 800d98c:	4b1e      	ldr	r3, [pc, #120]	; (800da08 <netif_add+0x184>)
 800d98e:	f240 128d 	movw	r2, #397	; 0x18d
 800d992:	4926      	ldr	r1, [pc, #152]	; (800da2c <netif_add+0x1a8>)
 800d994:	481e      	ldr	r0, [pc, #120]	; (800da10 <netif_add+0x18c>)
 800d996:	f00b fecd 	bl	8019734 <iprintf>
        if (netif2->num == netif->num) {
 800d99a:	697b      	ldr	r3, [r7, #20]
 800d99c:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d9a6:	429a      	cmp	r2, r3
 800d9a8:	d108      	bne.n	800d9bc <netif_add+0x138>
          netif->num++;
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d9b0:	3301      	adds	r3, #1
 800d9b2:	b2da      	uxtb	r2, r3
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 800d9ba:	e005      	b.n	800d9c8 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800d9bc:	697b      	ldr	r3, [r7, #20]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	617b      	str	r3, [r7, #20]
 800d9c2:	697b      	ldr	r3, [r7, #20]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d1d0      	bne.n	800d96a <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 800d9c8:	697b      	ldr	r3, [r7, #20]
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d1be      	bne.n	800d94c <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d9d4:	2bfe      	cmp	r3, #254	; 0xfe
 800d9d6:	d103      	bne.n	800d9e0 <netif_add+0x15c>
    netif_num = 0;
 800d9d8:	4b11      	ldr	r3, [pc, #68]	; (800da20 <netif_add+0x19c>)
 800d9da:	2200      	movs	r2, #0
 800d9dc:	701a      	strb	r2, [r3, #0]
 800d9de:	e006      	b.n	800d9ee <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d9e6:	3301      	adds	r3, #1
 800d9e8:	b2da      	uxtb	r2, r3
 800d9ea:	4b0d      	ldr	r3, [pc, #52]	; (800da20 <netif_add+0x19c>)
 800d9ec:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800d9ee:	4b0d      	ldr	r3, [pc, #52]	; (800da24 <netif_add+0x1a0>)
 800d9f0:	681a      	ldr	r2, [r3, #0]
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800d9f6:	4a0b      	ldr	r2, [pc, #44]	; (800da24 <netif_add+0x1a0>)
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800d9fc:	68fb      	ldr	r3, [r7, #12]
}
 800d9fe:	4618      	mov	r0, r3
 800da00:	3718      	adds	r7, #24
 800da02:	46bd      	mov	sp, r7
 800da04:	bd80      	pop	{r7, pc}
 800da06:	bf00      	nop
 800da08:	0801a6c8 	.word	0x0801a6c8
 800da0c:	0801a75c 	.word	0x0801a75c
 800da10:	0801a718 	.word	0x0801a718
 800da14:	0801a778 	.word	0x0801a778
 800da18:	0801d258 	.word	0x0801d258
 800da1c:	0800de47 	.word	0x0800de47
 800da20:	20013838 	.word	0x20013838
 800da24:	2001b650 	.word	0x2001b650
 800da28:	0801a79c 	.word	0x0801a79c
 800da2c:	0801a7b0 	.word	0x0801a7b0

0800da30 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800da30:	b580      	push	{r7, lr}
 800da32:	b082      	sub	sp, #8
 800da34:	af00      	add	r7, sp, #0
 800da36:	6078      	str	r0, [r7, #4]
 800da38:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800da3a:	6839      	ldr	r1, [r7, #0]
 800da3c:	6878      	ldr	r0, [r7, #4]
 800da3e:	f002 fb91 	bl	8010164 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800da42:	6839      	ldr	r1, [r7, #0]
 800da44:	6878      	ldr	r0, [r7, #4]
 800da46:	f006 ffa7 	bl	8014998 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800da4a:	bf00      	nop
 800da4c:	3708      	adds	r7, #8
 800da4e:	46bd      	mov	sp, r7
 800da50:	bd80      	pop	{r7, pc}
	...

0800da54 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800da54:	b580      	push	{r7, lr}
 800da56:	b086      	sub	sp, #24
 800da58:	af00      	add	r7, sp, #0
 800da5a:	60f8      	str	r0, [r7, #12]
 800da5c:	60b9      	str	r1, [r7, #8]
 800da5e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800da60:	68bb      	ldr	r3, [r7, #8]
 800da62:	2b00      	cmp	r3, #0
 800da64:	d106      	bne.n	800da74 <netif_do_set_ipaddr+0x20>
 800da66:	4b1d      	ldr	r3, [pc, #116]	; (800dadc <netif_do_set_ipaddr+0x88>)
 800da68:	f240 12cb 	movw	r2, #459	; 0x1cb
 800da6c:	491c      	ldr	r1, [pc, #112]	; (800dae0 <netif_do_set_ipaddr+0x8c>)
 800da6e:	481d      	ldr	r0, [pc, #116]	; (800dae4 <netif_do_set_ipaddr+0x90>)
 800da70:	f00b fe60 	bl	8019734 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	2b00      	cmp	r3, #0
 800da78:	d106      	bne.n	800da88 <netif_do_set_ipaddr+0x34>
 800da7a:	4b18      	ldr	r3, [pc, #96]	; (800dadc <netif_do_set_ipaddr+0x88>)
 800da7c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800da80:	4917      	ldr	r1, [pc, #92]	; (800dae0 <netif_do_set_ipaddr+0x8c>)
 800da82:	4818      	ldr	r0, [pc, #96]	; (800dae4 <netif_do_set_ipaddr+0x90>)
 800da84:	f00b fe56 	bl	8019734 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800da88:	68bb      	ldr	r3, [r7, #8]
 800da8a:	681a      	ldr	r2, [r3, #0]
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	3304      	adds	r3, #4
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	429a      	cmp	r2, r3
 800da94:	d01c      	beq.n	800dad0 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800da96:	68bb      	ldr	r3, [r7, #8]
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	3304      	adds	r3, #4
 800daa0:	681a      	ldr	r2, [r3, #0]
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800daa6:	f107 0314 	add.w	r3, r7, #20
 800daaa:	4619      	mov	r1, r3
 800daac:	6878      	ldr	r0, [r7, #4]
 800daae:	f7ff ffbf 	bl	800da30 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800dab2:	68bb      	ldr	r3, [r7, #8]
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d002      	beq.n	800dabe <netif_do_set_ipaddr+0x6a>
 800dab8:	68bb      	ldr	r3, [r7, #8]
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	e000      	b.n	800dac0 <netif_do_set_ipaddr+0x6c>
 800dabe:	2300      	movs	r3, #0
 800dac0:	68fa      	ldr	r2, [r7, #12]
 800dac2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800dac4:	2101      	movs	r1, #1
 800dac6:	68f8      	ldr	r0, [r7, #12]
 800dac8:	f000 f8d2 	bl	800dc70 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800dacc:	2301      	movs	r3, #1
 800dace:	e000      	b.n	800dad2 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800dad0:	2300      	movs	r3, #0
}
 800dad2:	4618      	mov	r0, r3
 800dad4:	3718      	adds	r7, #24
 800dad6:	46bd      	mov	sp, r7
 800dad8:	bd80      	pop	{r7, pc}
 800dada:	bf00      	nop
 800dadc:	0801a6c8 	.word	0x0801a6c8
 800dae0:	0801a7e0 	.word	0x0801a7e0
 800dae4:	0801a718 	.word	0x0801a718

0800dae8 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800dae8:	b480      	push	{r7}
 800daea:	b085      	sub	sp, #20
 800daec:	af00      	add	r7, sp, #0
 800daee:	60f8      	str	r0, [r7, #12]
 800daf0:	60b9      	str	r1, [r7, #8]
 800daf2:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800daf4:	68bb      	ldr	r3, [r7, #8]
 800daf6:	681a      	ldr	r2, [r3, #0]
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	3308      	adds	r3, #8
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	429a      	cmp	r2, r3
 800db00:	d00a      	beq.n	800db18 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800db02:	68bb      	ldr	r3, [r7, #8]
 800db04:	2b00      	cmp	r3, #0
 800db06:	d002      	beq.n	800db0e <netif_do_set_netmask+0x26>
 800db08:	68bb      	ldr	r3, [r7, #8]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	e000      	b.n	800db10 <netif_do_set_netmask+0x28>
 800db0e:	2300      	movs	r3, #0
 800db10:	68fa      	ldr	r2, [r7, #12]
 800db12:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800db14:	2301      	movs	r3, #1
 800db16:	e000      	b.n	800db1a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800db18:	2300      	movs	r3, #0
}
 800db1a:	4618      	mov	r0, r3
 800db1c:	3714      	adds	r7, #20
 800db1e:	46bd      	mov	sp, r7
 800db20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db24:	4770      	bx	lr

0800db26 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800db26:	b480      	push	{r7}
 800db28:	b085      	sub	sp, #20
 800db2a:	af00      	add	r7, sp, #0
 800db2c:	60f8      	str	r0, [r7, #12]
 800db2e:	60b9      	str	r1, [r7, #8]
 800db30:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800db32:	68bb      	ldr	r3, [r7, #8]
 800db34:	681a      	ldr	r2, [r3, #0]
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	330c      	adds	r3, #12
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	429a      	cmp	r2, r3
 800db3e:	d00a      	beq.n	800db56 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800db40:	68bb      	ldr	r3, [r7, #8]
 800db42:	2b00      	cmp	r3, #0
 800db44:	d002      	beq.n	800db4c <netif_do_set_gw+0x26>
 800db46:	68bb      	ldr	r3, [r7, #8]
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	e000      	b.n	800db4e <netif_do_set_gw+0x28>
 800db4c:	2300      	movs	r3, #0
 800db4e:	68fa      	ldr	r2, [r7, #12]
 800db50:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800db52:	2301      	movs	r3, #1
 800db54:	e000      	b.n	800db58 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800db56:	2300      	movs	r3, #0
}
 800db58:	4618      	mov	r0, r3
 800db5a:	3714      	adds	r7, #20
 800db5c:	46bd      	mov	sp, r7
 800db5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db62:	4770      	bx	lr

0800db64 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800db64:	b580      	push	{r7, lr}
 800db66:	b088      	sub	sp, #32
 800db68:	af00      	add	r7, sp, #0
 800db6a:	60f8      	str	r0, [r7, #12]
 800db6c:	60b9      	str	r1, [r7, #8]
 800db6e:	607a      	str	r2, [r7, #4]
 800db70:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800db72:	2300      	movs	r3, #0
 800db74:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800db76:	2300      	movs	r3, #0
 800db78:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800db7a:	68bb      	ldr	r3, [r7, #8]
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d101      	bne.n	800db84 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800db80:	4b1c      	ldr	r3, [pc, #112]	; (800dbf4 <netif_set_addr+0x90>)
 800db82:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	2b00      	cmp	r3, #0
 800db88:	d101      	bne.n	800db8e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800db8a:	4b1a      	ldr	r3, [pc, #104]	; (800dbf4 <netif_set_addr+0x90>)
 800db8c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800db8e:	683b      	ldr	r3, [r7, #0]
 800db90:	2b00      	cmp	r3, #0
 800db92:	d101      	bne.n	800db98 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800db94:	4b17      	ldr	r3, [pc, #92]	; (800dbf4 <netif_set_addr+0x90>)
 800db96:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800db98:	68bb      	ldr	r3, [r7, #8]
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d003      	beq.n	800dba6 <netif_set_addr+0x42>
 800db9e:	68bb      	ldr	r3, [r7, #8]
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d101      	bne.n	800dbaa <netif_set_addr+0x46>
 800dba6:	2301      	movs	r3, #1
 800dba8:	e000      	b.n	800dbac <netif_set_addr+0x48>
 800dbaa:	2300      	movs	r3, #0
 800dbac:	617b      	str	r3, [r7, #20]
  if (remove) {
 800dbae:	697b      	ldr	r3, [r7, #20]
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d006      	beq.n	800dbc2 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800dbb4:	f107 0310 	add.w	r3, r7, #16
 800dbb8:	461a      	mov	r2, r3
 800dbba:	68b9      	ldr	r1, [r7, #8]
 800dbbc:	68f8      	ldr	r0, [r7, #12]
 800dbbe:	f7ff ff49 	bl	800da54 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800dbc2:	69fa      	ldr	r2, [r7, #28]
 800dbc4:	6879      	ldr	r1, [r7, #4]
 800dbc6:	68f8      	ldr	r0, [r7, #12]
 800dbc8:	f7ff ff8e 	bl	800dae8 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800dbcc:	69ba      	ldr	r2, [r7, #24]
 800dbce:	6839      	ldr	r1, [r7, #0]
 800dbd0:	68f8      	ldr	r0, [r7, #12]
 800dbd2:	f7ff ffa8 	bl	800db26 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800dbd6:	697b      	ldr	r3, [r7, #20]
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d106      	bne.n	800dbea <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800dbdc:	f107 0310 	add.w	r3, r7, #16
 800dbe0:	461a      	mov	r2, r3
 800dbe2:	68b9      	ldr	r1, [r7, #8]
 800dbe4:	68f8      	ldr	r0, [r7, #12]
 800dbe6:	f7ff ff35 	bl	800da54 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800dbea:	bf00      	nop
 800dbec:	3720      	adds	r7, #32
 800dbee:	46bd      	mov	sp, r7
 800dbf0:	bd80      	pop	{r7, pc}
 800dbf2:	bf00      	nop
 800dbf4:	0801d258 	.word	0x0801d258

0800dbf8 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800dbf8:	b480      	push	{r7}
 800dbfa:	b083      	sub	sp, #12
 800dbfc:	af00      	add	r7, sp, #0
 800dbfe:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800dc00:	4a04      	ldr	r2, [pc, #16]	; (800dc14 <netif_set_default+0x1c>)
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800dc06:	bf00      	nop
 800dc08:	370c      	adds	r7, #12
 800dc0a:	46bd      	mov	sp, r7
 800dc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc10:	4770      	bx	lr
 800dc12:	bf00      	nop
 800dc14:	2001b654 	.word	0x2001b654

0800dc18 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800dc18:	b580      	push	{r7, lr}
 800dc1a:	b082      	sub	sp, #8
 800dc1c:	af00      	add	r7, sp, #0
 800dc1e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d107      	bne.n	800dc36 <netif_set_up+0x1e>
 800dc26:	4b0f      	ldr	r3, [pc, #60]	; (800dc64 <netif_set_up+0x4c>)
 800dc28:	f44f 7254 	mov.w	r2, #848	; 0x350
 800dc2c:	490e      	ldr	r1, [pc, #56]	; (800dc68 <netif_set_up+0x50>)
 800dc2e:	480f      	ldr	r0, [pc, #60]	; (800dc6c <netif_set_up+0x54>)
 800dc30:	f00b fd80 	bl	8019734 <iprintf>
 800dc34:	e013      	b.n	800dc5e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800dc3c:	f003 0301 	and.w	r3, r3, #1
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d10c      	bne.n	800dc5e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800dc4a:	f043 0301 	orr.w	r3, r3, #1
 800dc4e:	b2da      	uxtb	r2, r3
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800dc56:	2103      	movs	r1, #3
 800dc58:	6878      	ldr	r0, [r7, #4]
 800dc5a:	f000 f809 	bl	800dc70 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800dc5e:	3708      	adds	r7, #8
 800dc60:	46bd      	mov	sp, r7
 800dc62:	bd80      	pop	{r7, pc}
 800dc64:	0801a6c8 	.word	0x0801a6c8
 800dc68:	0801a850 	.word	0x0801a850
 800dc6c:	0801a718 	.word	0x0801a718

0800dc70 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800dc70:	b580      	push	{r7, lr}
 800dc72:	b082      	sub	sp, #8
 800dc74:	af00      	add	r7, sp, #0
 800dc76:	6078      	str	r0, [r7, #4]
 800dc78:	460b      	mov	r3, r1
 800dc7a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d106      	bne.n	800dc90 <netif_issue_reports+0x20>
 800dc82:	4b18      	ldr	r3, [pc, #96]	; (800dce4 <netif_issue_reports+0x74>)
 800dc84:	f240 326d 	movw	r2, #877	; 0x36d
 800dc88:	4917      	ldr	r1, [pc, #92]	; (800dce8 <netif_issue_reports+0x78>)
 800dc8a:	4818      	ldr	r0, [pc, #96]	; (800dcec <netif_issue_reports+0x7c>)
 800dc8c:	f00b fd52 	bl	8019734 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800dc96:	f003 0304 	and.w	r3, r3, #4
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d01e      	beq.n	800dcdc <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800dca4:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d017      	beq.n	800dcdc <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800dcac:	78fb      	ldrb	r3, [r7, #3]
 800dcae:	f003 0301 	and.w	r3, r3, #1
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d013      	beq.n	800dcde <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	3304      	adds	r3, #4
 800dcba:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d00e      	beq.n	800dcde <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800dcc6:	f003 0308 	and.w	r3, r3, #8
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d007      	beq.n	800dcde <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	3304      	adds	r3, #4
 800dcd2:	4619      	mov	r1, r3
 800dcd4:	6878      	ldr	r0, [r7, #4]
 800dcd6:	f009 fc5f 	bl	8017598 <etharp_request>
 800dcda:	e000      	b.n	800dcde <netif_issue_reports+0x6e>
    return;
 800dcdc:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800dcde:	3708      	adds	r7, #8
 800dce0:	46bd      	mov	sp, r7
 800dce2:	bd80      	pop	{r7, pc}
 800dce4:	0801a6c8 	.word	0x0801a6c8
 800dce8:	0801a86c 	.word	0x0801a86c
 800dcec:	0801a718 	.word	0x0801a718

0800dcf0 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800dcf0:	b580      	push	{r7, lr}
 800dcf2:	b082      	sub	sp, #8
 800dcf4:	af00      	add	r7, sp, #0
 800dcf6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d107      	bne.n	800dd0e <netif_set_down+0x1e>
 800dcfe:	4b12      	ldr	r3, [pc, #72]	; (800dd48 <netif_set_down+0x58>)
 800dd00:	f240 329b 	movw	r2, #923	; 0x39b
 800dd04:	4911      	ldr	r1, [pc, #68]	; (800dd4c <netif_set_down+0x5c>)
 800dd06:	4812      	ldr	r0, [pc, #72]	; (800dd50 <netif_set_down+0x60>)
 800dd08:	f00b fd14 	bl	8019734 <iprintf>
 800dd0c:	e019      	b.n	800dd42 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800dd14:	f003 0301 	and.w	r3, r3, #1
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d012      	beq.n	800dd42 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800dd22:	f023 0301 	bic.w	r3, r3, #1
 800dd26:	b2da      	uxtb	r2, r3
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800dd34:	f003 0308 	and.w	r3, r3, #8
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d002      	beq.n	800dd42 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800dd3c:	6878      	ldr	r0, [r7, #4]
 800dd3e:	f008 ffe5 	bl	8016d0c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800dd42:	3708      	adds	r7, #8
 800dd44:	46bd      	mov	sp, r7
 800dd46:	bd80      	pop	{r7, pc}
 800dd48:	0801a6c8 	.word	0x0801a6c8
 800dd4c:	0801a890 	.word	0x0801a890
 800dd50:	0801a718 	.word	0x0801a718

0800dd54 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800dd54:	b580      	push	{r7, lr}
 800dd56:	b082      	sub	sp, #8
 800dd58:	af00      	add	r7, sp, #0
 800dd5a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d107      	bne.n	800dd72 <netif_set_link_up+0x1e>
 800dd62:	4b15      	ldr	r3, [pc, #84]	; (800ddb8 <netif_set_link_up+0x64>)
 800dd64:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800dd68:	4914      	ldr	r1, [pc, #80]	; (800ddbc <netif_set_link_up+0x68>)
 800dd6a:	4815      	ldr	r0, [pc, #84]	; (800ddc0 <netif_set_link_up+0x6c>)
 800dd6c:	f00b fce2 	bl	8019734 <iprintf>
 800dd70:	e01e      	b.n	800ddb0 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800dd78:	f003 0304 	and.w	r3, r3, #4
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d117      	bne.n	800ddb0 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800dd86:	f043 0304 	orr.w	r3, r3, #4
 800dd8a:	b2da      	uxtb	r2, r3
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 800dd92:	6878      	ldr	r0, [r7, #4]
 800dd94:	f007 fa2a 	bl	80151ec <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800dd98:	2103      	movs	r1, #3
 800dd9a:	6878      	ldr	r0, [r7, #4]
 800dd9c:	f7ff ff68 	bl	800dc70 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	69db      	ldr	r3, [r3, #28]
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d003      	beq.n	800ddb0 <netif_set_link_up+0x5c>
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	69db      	ldr	r3, [r3, #28]
 800ddac:	6878      	ldr	r0, [r7, #4]
 800ddae:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800ddb0:	3708      	adds	r7, #8
 800ddb2:	46bd      	mov	sp, r7
 800ddb4:	bd80      	pop	{r7, pc}
 800ddb6:	bf00      	nop
 800ddb8:	0801a6c8 	.word	0x0801a6c8
 800ddbc:	0801a8b0 	.word	0x0801a8b0
 800ddc0:	0801a718 	.word	0x0801a718

0800ddc4 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800ddc4:	b580      	push	{r7, lr}
 800ddc6:	b082      	sub	sp, #8
 800ddc8:	af00      	add	r7, sp, #0
 800ddca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d107      	bne.n	800dde2 <netif_set_link_down+0x1e>
 800ddd2:	4b11      	ldr	r3, [pc, #68]	; (800de18 <netif_set_link_down+0x54>)
 800ddd4:	f240 4206 	movw	r2, #1030	; 0x406
 800ddd8:	4910      	ldr	r1, [pc, #64]	; (800de1c <netif_set_link_down+0x58>)
 800ddda:	4811      	ldr	r0, [pc, #68]	; (800de20 <netif_set_link_down+0x5c>)
 800dddc:	f00b fcaa 	bl	8019734 <iprintf>
 800dde0:	e017      	b.n	800de12 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800dde8:	f003 0304 	and.w	r3, r3, #4
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d010      	beq.n	800de12 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ddf6:	f023 0304 	bic.w	r3, r3, #4
 800ddfa:	b2da      	uxtb	r2, r3
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	69db      	ldr	r3, [r3, #28]
 800de06:	2b00      	cmp	r3, #0
 800de08:	d003      	beq.n	800de12 <netif_set_link_down+0x4e>
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	69db      	ldr	r3, [r3, #28]
 800de0e:	6878      	ldr	r0, [r7, #4]
 800de10:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800de12:	3708      	adds	r7, #8
 800de14:	46bd      	mov	sp, r7
 800de16:	bd80      	pop	{r7, pc}
 800de18:	0801a6c8 	.word	0x0801a6c8
 800de1c:	0801a8d4 	.word	0x0801a8d4
 800de20:	0801a718 	.word	0x0801a718

0800de24 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800de24:	b480      	push	{r7}
 800de26:	b083      	sub	sp, #12
 800de28:	af00      	add	r7, sp, #0
 800de2a:	6078      	str	r0, [r7, #4]
 800de2c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	2b00      	cmp	r3, #0
 800de32:	d002      	beq.n	800de3a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	683a      	ldr	r2, [r7, #0]
 800de38:	61da      	str	r2, [r3, #28]
  }
}
 800de3a:	bf00      	nop
 800de3c:	370c      	adds	r7, #12
 800de3e:	46bd      	mov	sp, r7
 800de40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de44:	4770      	bx	lr

0800de46 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800de46:	b480      	push	{r7}
 800de48:	b085      	sub	sp, #20
 800de4a:	af00      	add	r7, sp, #0
 800de4c:	60f8      	str	r0, [r7, #12]
 800de4e:	60b9      	str	r1, [r7, #8]
 800de50:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800de52:	f06f 030b 	mvn.w	r3, #11
}
 800de56:	4618      	mov	r0, r3
 800de58:	3714      	adds	r7, #20
 800de5a:	46bd      	mov	sp, r7
 800de5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de60:	4770      	bx	lr
	...

0800de64 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800de64:	b480      	push	{r7}
 800de66:	b085      	sub	sp, #20
 800de68:	af00      	add	r7, sp, #0
 800de6a:	4603      	mov	r3, r0
 800de6c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800de6e:	79fb      	ldrb	r3, [r7, #7]
 800de70:	2b00      	cmp	r3, #0
 800de72:	d013      	beq.n	800de9c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800de74:	4b0d      	ldr	r3, [pc, #52]	; (800deac <netif_get_by_index+0x48>)
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	60fb      	str	r3, [r7, #12]
 800de7a:	e00c      	b.n	800de96 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800de82:	3301      	adds	r3, #1
 800de84:	b2db      	uxtb	r3, r3
 800de86:	79fa      	ldrb	r2, [r7, #7]
 800de88:	429a      	cmp	r2, r3
 800de8a:	d101      	bne.n	800de90 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	e006      	b.n	800de9e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	60fb      	str	r3, [r7, #12]
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d1ef      	bne.n	800de7c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800de9c:	2300      	movs	r3, #0
}
 800de9e:	4618      	mov	r0, r3
 800dea0:	3714      	adds	r7, #20
 800dea2:	46bd      	mov	sp, r7
 800dea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dea8:	4770      	bx	lr
 800deaa:	bf00      	nop
 800deac:	2001b650 	.word	0x2001b650

0800deb0 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800deb0:	b580      	push	{r7, lr}
 800deb2:	b082      	sub	sp, #8
 800deb4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800deb6:	f00a ffed 	bl	8018e94 <sys_arch_protect>
 800deba:	6038      	str	r0, [r7, #0]
 800debc:	4b0d      	ldr	r3, [pc, #52]	; (800def4 <pbuf_free_ooseq+0x44>)
 800debe:	2200      	movs	r2, #0
 800dec0:	701a      	strb	r2, [r3, #0]
 800dec2:	6838      	ldr	r0, [r7, #0]
 800dec4:	f00a fff4 	bl	8018eb0 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800dec8:	4b0b      	ldr	r3, [pc, #44]	; (800def8 <pbuf_free_ooseq+0x48>)
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	607b      	str	r3, [r7, #4]
 800dece:	e00a      	b.n	800dee6 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d003      	beq.n	800dee0 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800ded8:	6878      	ldr	r0, [r7, #4]
 800deda:	f002 f981 	bl	80101e0 <tcp_free_ooseq>
      return;
 800dede:	e005      	b.n	800deec <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	68db      	ldr	r3, [r3, #12]
 800dee4:	607b      	str	r3, [r7, #4]
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d1f1      	bne.n	800ded0 <pbuf_free_ooseq+0x20>
    }
  }
}
 800deec:	3708      	adds	r7, #8
 800deee:	46bd      	mov	sp, r7
 800def0:	bd80      	pop	{r7, pc}
 800def2:	bf00      	nop
 800def4:	2001b658 	.word	0x2001b658
 800def8:	2001b660 	.word	0x2001b660

0800defc <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800defc:	b580      	push	{r7, lr}
 800defe:	b082      	sub	sp, #8
 800df00:	af00      	add	r7, sp, #0
 800df02:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800df04:	f7ff ffd4 	bl	800deb0 <pbuf_free_ooseq>
}
 800df08:	bf00      	nop
 800df0a:	3708      	adds	r7, #8
 800df0c:	46bd      	mov	sp, r7
 800df0e:	bd80      	pop	{r7, pc}

0800df10 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800df10:	b580      	push	{r7, lr}
 800df12:	b082      	sub	sp, #8
 800df14:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800df16:	f00a ffbd 	bl	8018e94 <sys_arch_protect>
 800df1a:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800df1c:	4b0f      	ldr	r3, [pc, #60]	; (800df5c <pbuf_pool_is_empty+0x4c>)
 800df1e:	781b      	ldrb	r3, [r3, #0]
 800df20:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800df22:	4b0e      	ldr	r3, [pc, #56]	; (800df5c <pbuf_pool_is_empty+0x4c>)
 800df24:	2201      	movs	r2, #1
 800df26:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800df28:	6878      	ldr	r0, [r7, #4]
 800df2a:	f00a ffc1 	bl	8018eb0 <sys_arch_unprotect>

  if (!queued) {
 800df2e:	78fb      	ldrb	r3, [r7, #3]
 800df30:	2b00      	cmp	r3, #0
 800df32:	d10f      	bne.n	800df54 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800df34:	2100      	movs	r1, #0
 800df36:	480a      	ldr	r0, [pc, #40]	; (800df60 <pbuf_pool_is_empty+0x50>)
 800df38:	f7fe fee0 	bl	800ccfc <tcpip_try_callback>
 800df3c:	4603      	mov	r3, r0
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d008      	beq.n	800df54 <pbuf_pool_is_empty+0x44>
 800df42:	f00a ffa7 	bl	8018e94 <sys_arch_protect>
 800df46:	6078      	str	r0, [r7, #4]
 800df48:	4b04      	ldr	r3, [pc, #16]	; (800df5c <pbuf_pool_is_empty+0x4c>)
 800df4a:	2200      	movs	r2, #0
 800df4c:	701a      	strb	r2, [r3, #0]
 800df4e:	6878      	ldr	r0, [r7, #4]
 800df50:	f00a ffae 	bl	8018eb0 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800df54:	bf00      	nop
 800df56:	3708      	adds	r7, #8
 800df58:	46bd      	mov	sp, r7
 800df5a:	bd80      	pop	{r7, pc}
 800df5c:	2001b658 	.word	0x2001b658
 800df60:	0800defd 	.word	0x0800defd

0800df64 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800df64:	b480      	push	{r7}
 800df66:	b085      	sub	sp, #20
 800df68:	af00      	add	r7, sp, #0
 800df6a:	60f8      	str	r0, [r7, #12]
 800df6c:	60b9      	str	r1, [r7, #8]
 800df6e:	4611      	mov	r1, r2
 800df70:	461a      	mov	r2, r3
 800df72:	460b      	mov	r3, r1
 800df74:	80fb      	strh	r3, [r7, #6]
 800df76:	4613      	mov	r3, r2
 800df78:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	2200      	movs	r2, #0
 800df7e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	68ba      	ldr	r2, [r7, #8]
 800df84:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	88fa      	ldrh	r2, [r7, #6]
 800df8a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	88ba      	ldrh	r2, [r7, #4]
 800df90:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800df92:	8b3b      	ldrh	r3, [r7, #24]
 800df94:	b2da      	uxtb	r2, r3
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	7f3a      	ldrb	r2, [r7, #28]
 800df9e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	2201      	movs	r2, #1
 800dfa4:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	2200      	movs	r2, #0
 800dfaa:	73da      	strb	r2, [r3, #15]
}
 800dfac:	bf00      	nop
 800dfae:	3714      	adds	r7, #20
 800dfb0:	46bd      	mov	sp, r7
 800dfb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb6:	4770      	bx	lr

0800dfb8 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800dfb8:	b580      	push	{r7, lr}
 800dfba:	b08c      	sub	sp, #48	; 0x30
 800dfbc:	af02      	add	r7, sp, #8
 800dfbe:	4603      	mov	r3, r0
 800dfc0:	71fb      	strb	r3, [r7, #7]
 800dfc2:	460b      	mov	r3, r1
 800dfc4:	80bb      	strh	r3, [r7, #4]
 800dfc6:	4613      	mov	r3, r2
 800dfc8:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800dfca:	79fb      	ldrb	r3, [r7, #7]
 800dfcc:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800dfce:	887b      	ldrh	r3, [r7, #2]
 800dfd0:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800dfd4:	d07f      	beq.n	800e0d6 <pbuf_alloc+0x11e>
 800dfd6:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800dfda:	f300 80c8 	bgt.w	800e16e <pbuf_alloc+0x1b6>
 800dfde:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800dfe2:	d010      	beq.n	800e006 <pbuf_alloc+0x4e>
 800dfe4:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800dfe8:	f300 80c1 	bgt.w	800e16e <pbuf_alloc+0x1b6>
 800dfec:	2b01      	cmp	r3, #1
 800dfee:	d002      	beq.n	800dff6 <pbuf_alloc+0x3e>
 800dff0:	2b41      	cmp	r3, #65	; 0x41
 800dff2:	f040 80bc 	bne.w	800e16e <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800dff6:	887a      	ldrh	r2, [r7, #2]
 800dff8:	88bb      	ldrh	r3, [r7, #4]
 800dffa:	4619      	mov	r1, r3
 800dffc:	2000      	movs	r0, #0
 800dffe:	f000 f8d1 	bl	800e1a4 <pbuf_alloc_reference>
 800e002:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800e004:	e0bd      	b.n	800e182 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800e006:	2300      	movs	r3, #0
 800e008:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800e00a:	2300      	movs	r3, #0
 800e00c:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800e00e:	88bb      	ldrh	r3, [r7, #4]
 800e010:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800e012:	200c      	movs	r0, #12
 800e014:	f7ff fbb2 	bl	800d77c <memp_malloc>
 800e018:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800e01a:	693b      	ldr	r3, [r7, #16]
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d109      	bne.n	800e034 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800e020:	f7ff ff76 	bl	800df10 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800e024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e026:	2b00      	cmp	r3, #0
 800e028:	d002      	beq.n	800e030 <pbuf_alloc+0x78>
            pbuf_free(p);
 800e02a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e02c:	f000 faa8 	bl	800e580 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800e030:	2300      	movs	r3, #0
 800e032:	e0a7      	b.n	800e184 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800e034:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e036:	3303      	adds	r3, #3
 800e038:	b29b      	uxth	r3, r3
 800e03a:	f023 0303 	bic.w	r3, r3, #3
 800e03e:	b29b      	uxth	r3, r3
 800e040:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800e044:	b29b      	uxth	r3, r3
 800e046:	8b7a      	ldrh	r2, [r7, #26]
 800e048:	4293      	cmp	r3, r2
 800e04a:	bf28      	it	cs
 800e04c:	4613      	movcs	r3, r2
 800e04e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800e050:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e052:	3310      	adds	r3, #16
 800e054:	693a      	ldr	r2, [r7, #16]
 800e056:	4413      	add	r3, r2
 800e058:	3303      	adds	r3, #3
 800e05a:	f023 0303 	bic.w	r3, r3, #3
 800e05e:	4618      	mov	r0, r3
 800e060:	89f9      	ldrh	r1, [r7, #14]
 800e062:	8b7a      	ldrh	r2, [r7, #26]
 800e064:	2300      	movs	r3, #0
 800e066:	9301      	str	r3, [sp, #4]
 800e068:	887b      	ldrh	r3, [r7, #2]
 800e06a:	9300      	str	r3, [sp, #0]
 800e06c:	460b      	mov	r3, r1
 800e06e:	4601      	mov	r1, r0
 800e070:	6938      	ldr	r0, [r7, #16]
 800e072:	f7ff ff77 	bl	800df64 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800e076:	693b      	ldr	r3, [r7, #16]
 800e078:	685b      	ldr	r3, [r3, #4]
 800e07a:	f003 0303 	and.w	r3, r3, #3
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d006      	beq.n	800e090 <pbuf_alloc+0xd8>
 800e082:	4b42      	ldr	r3, [pc, #264]	; (800e18c <pbuf_alloc+0x1d4>)
 800e084:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e088:	4941      	ldr	r1, [pc, #260]	; (800e190 <pbuf_alloc+0x1d8>)
 800e08a:	4842      	ldr	r0, [pc, #264]	; (800e194 <pbuf_alloc+0x1dc>)
 800e08c:	f00b fb52 	bl	8019734 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800e090:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e092:	3303      	adds	r3, #3
 800e094:	f023 0303 	bic.w	r3, r3, #3
 800e098:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800e09c:	d106      	bne.n	800e0ac <pbuf_alloc+0xf4>
 800e09e:	4b3b      	ldr	r3, [pc, #236]	; (800e18c <pbuf_alloc+0x1d4>)
 800e0a0:	f44f 7281 	mov.w	r2, #258	; 0x102
 800e0a4:	493c      	ldr	r1, [pc, #240]	; (800e198 <pbuf_alloc+0x1e0>)
 800e0a6:	483b      	ldr	r0, [pc, #236]	; (800e194 <pbuf_alloc+0x1dc>)
 800e0a8:	f00b fb44 	bl	8019734 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800e0ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d102      	bne.n	800e0b8 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800e0b2:	693b      	ldr	r3, [r7, #16]
 800e0b4:	627b      	str	r3, [r7, #36]	; 0x24
 800e0b6:	e002      	b.n	800e0be <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800e0b8:	69fb      	ldr	r3, [r7, #28]
 800e0ba:	693a      	ldr	r2, [r7, #16]
 800e0bc:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800e0be:	693b      	ldr	r3, [r7, #16]
 800e0c0:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800e0c2:	8b7a      	ldrh	r2, [r7, #26]
 800e0c4:	89fb      	ldrh	r3, [r7, #14]
 800e0c6:	1ad3      	subs	r3, r2, r3
 800e0c8:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800e0ca:	2300      	movs	r3, #0
 800e0cc:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800e0ce:	8b7b      	ldrh	r3, [r7, #26]
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d19e      	bne.n	800e012 <pbuf_alloc+0x5a>
      break;
 800e0d4:	e055      	b.n	800e182 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800e0d6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e0d8:	3303      	adds	r3, #3
 800e0da:	b29b      	uxth	r3, r3
 800e0dc:	f023 0303 	bic.w	r3, r3, #3
 800e0e0:	b29a      	uxth	r2, r3
 800e0e2:	88bb      	ldrh	r3, [r7, #4]
 800e0e4:	3303      	adds	r3, #3
 800e0e6:	b29b      	uxth	r3, r3
 800e0e8:	f023 0303 	bic.w	r3, r3, #3
 800e0ec:	b29b      	uxth	r3, r3
 800e0ee:	4413      	add	r3, r2
 800e0f0:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800e0f2:	8b3b      	ldrh	r3, [r7, #24]
 800e0f4:	3310      	adds	r3, #16
 800e0f6:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800e0f8:	8b3a      	ldrh	r2, [r7, #24]
 800e0fa:	88bb      	ldrh	r3, [r7, #4]
 800e0fc:	3303      	adds	r3, #3
 800e0fe:	f023 0303 	bic.w	r3, r3, #3
 800e102:	429a      	cmp	r2, r3
 800e104:	d306      	bcc.n	800e114 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800e106:	8afa      	ldrh	r2, [r7, #22]
 800e108:	88bb      	ldrh	r3, [r7, #4]
 800e10a:	3303      	adds	r3, #3
 800e10c:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800e110:	429a      	cmp	r2, r3
 800e112:	d201      	bcs.n	800e118 <pbuf_alloc+0x160>
        return NULL;
 800e114:	2300      	movs	r3, #0
 800e116:	e035      	b.n	800e184 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800e118:	8afb      	ldrh	r3, [r7, #22]
 800e11a:	4618      	mov	r0, r3
 800e11c:	f7ff f9ac 	bl	800d478 <mem_malloc>
 800e120:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800e122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e124:	2b00      	cmp	r3, #0
 800e126:	d101      	bne.n	800e12c <pbuf_alloc+0x174>
        return NULL;
 800e128:	2300      	movs	r3, #0
 800e12a:	e02b      	b.n	800e184 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800e12c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e12e:	3310      	adds	r3, #16
 800e130:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e132:	4413      	add	r3, r2
 800e134:	3303      	adds	r3, #3
 800e136:	f023 0303 	bic.w	r3, r3, #3
 800e13a:	4618      	mov	r0, r3
 800e13c:	88b9      	ldrh	r1, [r7, #4]
 800e13e:	88ba      	ldrh	r2, [r7, #4]
 800e140:	2300      	movs	r3, #0
 800e142:	9301      	str	r3, [sp, #4]
 800e144:	887b      	ldrh	r3, [r7, #2]
 800e146:	9300      	str	r3, [sp, #0]
 800e148:	460b      	mov	r3, r1
 800e14a:	4601      	mov	r1, r0
 800e14c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e14e:	f7ff ff09 	bl	800df64 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800e152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e154:	685b      	ldr	r3, [r3, #4]
 800e156:	f003 0303 	and.w	r3, r3, #3
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d010      	beq.n	800e180 <pbuf_alloc+0x1c8>
 800e15e:	4b0b      	ldr	r3, [pc, #44]	; (800e18c <pbuf_alloc+0x1d4>)
 800e160:	f44f 7291 	mov.w	r2, #290	; 0x122
 800e164:	490d      	ldr	r1, [pc, #52]	; (800e19c <pbuf_alloc+0x1e4>)
 800e166:	480b      	ldr	r0, [pc, #44]	; (800e194 <pbuf_alloc+0x1dc>)
 800e168:	f00b fae4 	bl	8019734 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800e16c:	e008      	b.n	800e180 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800e16e:	4b07      	ldr	r3, [pc, #28]	; (800e18c <pbuf_alloc+0x1d4>)
 800e170:	f240 1227 	movw	r2, #295	; 0x127
 800e174:	490a      	ldr	r1, [pc, #40]	; (800e1a0 <pbuf_alloc+0x1e8>)
 800e176:	4807      	ldr	r0, [pc, #28]	; (800e194 <pbuf_alloc+0x1dc>)
 800e178:	f00b fadc 	bl	8019734 <iprintf>
      return NULL;
 800e17c:	2300      	movs	r3, #0
 800e17e:	e001      	b.n	800e184 <pbuf_alloc+0x1cc>
      break;
 800e180:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800e182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e184:	4618      	mov	r0, r3
 800e186:	3728      	adds	r7, #40	; 0x28
 800e188:	46bd      	mov	sp, r7
 800e18a:	bd80      	pop	{r7, pc}
 800e18c:	0801a8f8 	.word	0x0801a8f8
 800e190:	0801a928 	.word	0x0801a928
 800e194:	0801a958 	.word	0x0801a958
 800e198:	0801a980 	.word	0x0801a980
 800e19c:	0801a9b4 	.word	0x0801a9b4
 800e1a0:	0801a9e0 	.word	0x0801a9e0

0800e1a4 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800e1a4:	b580      	push	{r7, lr}
 800e1a6:	b086      	sub	sp, #24
 800e1a8:	af02      	add	r7, sp, #8
 800e1aa:	6078      	str	r0, [r7, #4]
 800e1ac:	460b      	mov	r3, r1
 800e1ae:	807b      	strh	r3, [r7, #2]
 800e1b0:	4613      	mov	r3, r2
 800e1b2:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800e1b4:	883b      	ldrh	r3, [r7, #0]
 800e1b6:	2b41      	cmp	r3, #65	; 0x41
 800e1b8:	d009      	beq.n	800e1ce <pbuf_alloc_reference+0x2a>
 800e1ba:	883b      	ldrh	r3, [r7, #0]
 800e1bc:	2b01      	cmp	r3, #1
 800e1be:	d006      	beq.n	800e1ce <pbuf_alloc_reference+0x2a>
 800e1c0:	4b0f      	ldr	r3, [pc, #60]	; (800e200 <pbuf_alloc_reference+0x5c>)
 800e1c2:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800e1c6:	490f      	ldr	r1, [pc, #60]	; (800e204 <pbuf_alloc_reference+0x60>)
 800e1c8:	480f      	ldr	r0, [pc, #60]	; (800e208 <pbuf_alloc_reference+0x64>)
 800e1ca:	f00b fab3 	bl	8019734 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800e1ce:	200b      	movs	r0, #11
 800e1d0:	f7ff fad4 	bl	800d77c <memp_malloc>
 800e1d4:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d101      	bne.n	800e1e0 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800e1dc:	2300      	movs	r3, #0
 800e1de:	e00b      	b.n	800e1f8 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800e1e0:	8879      	ldrh	r1, [r7, #2]
 800e1e2:	887a      	ldrh	r2, [r7, #2]
 800e1e4:	2300      	movs	r3, #0
 800e1e6:	9301      	str	r3, [sp, #4]
 800e1e8:	883b      	ldrh	r3, [r7, #0]
 800e1ea:	9300      	str	r3, [sp, #0]
 800e1ec:	460b      	mov	r3, r1
 800e1ee:	6879      	ldr	r1, [r7, #4]
 800e1f0:	68f8      	ldr	r0, [r7, #12]
 800e1f2:	f7ff feb7 	bl	800df64 <pbuf_init_alloced_pbuf>
  return p;
 800e1f6:	68fb      	ldr	r3, [r7, #12]
}
 800e1f8:	4618      	mov	r0, r3
 800e1fa:	3710      	adds	r7, #16
 800e1fc:	46bd      	mov	sp, r7
 800e1fe:	bd80      	pop	{r7, pc}
 800e200:	0801a8f8 	.word	0x0801a8f8
 800e204:	0801a9fc 	.word	0x0801a9fc
 800e208:	0801a958 	.word	0x0801a958

0800e20c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800e20c:	b580      	push	{r7, lr}
 800e20e:	b088      	sub	sp, #32
 800e210:	af02      	add	r7, sp, #8
 800e212:	607b      	str	r3, [r7, #4]
 800e214:	4603      	mov	r3, r0
 800e216:	73fb      	strb	r3, [r7, #15]
 800e218:	460b      	mov	r3, r1
 800e21a:	81bb      	strh	r3, [r7, #12]
 800e21c:	4613      	mov	r3, r2
 800e21e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800e220:	7bfb      	ldrb	r3, [r7, #15]
 800e222:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800e224:	8a7b      	ldrh	r3, [r7, #18]
 800e226:	3303      	adds	r3, #3
 800e228:	f023 0203 	bic.w	r2, r3, #3
 800e22c:	89bb      	ldrh	r3, [r7, #12]
 800e22e:	441a      	add	r2, r3
 800e230:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e232:	429a      	cmp	r2, r3
 800e234:	d901      	bls.n	800e23a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800e236:	2300      	movs	r3, #0
 800e238:	e018      	b.n	800e26c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800e23a:	6a3b      	ldr	r3, [r7, #32]
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d007      	beq.n	800e250 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800e240:	8a7b      	ldrh	r3, [r7, #18]
 800e242:	3303      	adds	r3, #3
 800e244:	f023 0303 	bic.w	r3, r3, #3
 800e248:	6a3a      	ldr	r2, [r7, #32]
 800e24a:	4413      	add	r3, r2
 800e24c:	617b      	str	r3, [r7, #20]
 800e24e:	e001      	b.n	800e254 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800e250:	2300      	movs	r3, #0
 800e252:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800e254:	6878      	ldr	r0, [r7, #4]
 800e256:	89b9      	ldrh	r1, [r7, #12]
 800e258:	89ba      	ldrh	r2, [r7, #12]
 800e25a:	2302      	movs	r3, #2
 800e25c:	9301      	str	r3, [sp, #4]
 800e25e:	897b      	ldrh	r3, [r7, #10]
 800e260:	9300      	str	r3, [sp, #0]
 800e262:	460b      	mov	r3, r1
 800e264:	6979      	ldr	r1, [r7, #20]
 800e266:	f7ff fe7d 	bl	800df64 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800e26a:	687b      	ldr	r3, [r7, #4]
}
 800e26c:	4618      	mov	r0, r3
 800e26e:	3718      	adds	r7, #24
 800e270:	46bd      	mov	sp, r7
 800e272:	bd80      	pop	{r7, pc}

0800e274 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800e274:	b580      	push	{r7, lr}
 800e276:	b084      	sub	sp, #16
 800e278:	af00      	add	r7, sp, #0
 800e27a:	6078      	str	r0, [r7, #4]
 800e27c:	460b      	mov	r3, r1
 800e27e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	2b00      	cmp	r3, #0
 800e284:	d106      	bne.n	800e294 <pbuf_realloc+0x20>
 800e286:	4b3a      	ldr	r3, [pc, #232]	; (800e370 <pbuf_realloc+0xfc>)
 800e288:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800e28c:	4939      	ldr	r1, [pc, #228]	; (800e374 <pbuf_realloc+0x100>)
 800e28e:	483a      	ldr	r0, [pc, #232]	; (800e378 <pbuf_realloc+0x104>)
 800e290:	f00b fa50 	bl	8019734 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	891b      	ldrh	r3, [r3, #8]
 800e298:	887a      	ldrh	r2, [r7, #2]
 800e29a:	429a      	cmp	r2, r3
 800e29c:	d263      	bcs.n	800e366 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	891a      	ldrh	r2, [r3, #8]
 800e2a2:	887b      	ldrh	r3, [r7, #2]
 800e2a4:	1ad3      	subs	r3, r2, r3
 800e2a6:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800e2a8:	887b      	ldrh	r3, [r7, #2]
 800e2aa:	817b      	strh	r3, [r7, #10]
  q = p;
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800e2b0:	e018      	b.n	800e2e4 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	895b      	ldrh	r3, [r3, #10]
 800e2b6:	897a      	ldrh	r2, [r7, #10]
 800e2b8:	1ad3      	subs	r3, r2, r3
 800e2ba:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	891a      	ldrh	r2, [r3, #8]
 800e2c0:	893b      	ldrh	r3, [r7, #8]
 800e2c2:	1ad3      	subs	r3, r2, r3
 800e2c4:	b29a      	uxth	r2, r3
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d106      	bne.n	800e2e4 <pbuf_realloc+0x70>
 800e2d6:	4b26      	ldr	r3, [pc, #152]	; (800e370 <pbuf_realloc+0xfc>)
 800e2d8:	f240 12af 	movw	r2, #431	; 0x1af
 800e2dc:	4927      	ldr	r1, [pc, #156]	; (800e37c <pbuf_realloc+0x108>)
 800e2de:	4826      	ldr	r0, [pc, #152]	; (800e378 <pbuf_realloc+0x104>)
 800e2e0:	f00b fa28 	bl	8019734 <iprintf>
  while (rem_len > q->len) {
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	895b      	ldrh	r3, [r3, #10]
 800e2e8:	897a      	ldrh	r2, [r7, #10]
 800e2ea:	429a      	cmp	r2, r3
 800e2ec:	d8e1      	bhi.n	800e2b2 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	7b1b      	ldrb	r3, [r3, #12]
 800e2f2:	f003 030f 	and.w	r3, r3, #15
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d121      	bne.n	800e33e <pbuf_realloc+0xca>
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	895b      	ldrh	r3, [r3, #10]
 800e2fe:	897a      	ldrh	r2, [r7, #10]
 800e300:	429a      	cmp	r2, r3
 800e302:	d01c      	beq.n	800e33e <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	7b5b      	ldrb	r3, [r3, #13]
 800e308:	f003 0302 	and.w	r3, r3, #2
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d116      	bne.n	800e33e <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	685a      	ldr	r2, [r3, #4]
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	1ad3      	subs	r3, r2, r3
 800e318:	b29a      	uxth	r2, r3
 800e31a:	897b      	ldrh	r3, [r7, #10]
 800e31c:	4413      	add	r3, r2
 800e31e:	b29b      	uxth	r3, r3
 800e320:	4619      	mov	r1, r3
 800e322:	68f8      	ldr	r0, [r7, #12]
 800e324:	f7fe ff9e 	bl	800d264 <mem_trim>
 800e328:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d106      	bne.n	800e33e <pbuf_realloc+0xca>
 800e330:	4b0f      	ldr	r3, [pc, #60]	; (800e370 <pbuf_realloc+0xfc>)
 800e332:	f240 12bd 	movw	r2, #445	; 0x1bd
 800e336:	4912      	ldr	r1, [pc, #72]	; (800e380 <pbuf_realloc+0x10c>)
 800e338:	480f      	ldr	r0, [pc, #60]	; (800e378 <pbuf_realloc+0x104>)
 800e33a:	f00b f9fb 	bl	8019734 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	897a      	ldrh	r2, [r7, #10]
 800e342:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	895a      	ldrh	r2, [r3, #10]
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	2b00      	cmp	r3, #0
 800e352:	d004      	beq.n	800e35e <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	4618      	mov	r0, r3
 800e35a:	f000 f911 	bl	800e580 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	2200      	movs	r2, #0
 800e362:	601a      	str	r2, [r3, #0]
 800e364:	e000      	b.n	800e368 <pbuf_realloc+0xf4>
    return;
 800e366:	bf00      	nop

}
 800e368:	3710      	adds	r7, #16
 800e36a:	46bd      	mov	sp, r7
 800e36c:	bd80      	pop	{r7, pc}
 800e36e:	bf00      	nop
 800e370:	0801a8f8 	.word	0x0801a8f8
 800e374:	0801aa10 	.word	0x0801aa10
 800e378:	0801a958 	.word	0x0801a958
 800e37c:	0801aa28 	.word	0x0801aa28
 800e380:	0801aa40 	.word	0x0801aa40

0800e384 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800e384:	b580      	push	{r7, lr}
 800e386:	b086      	sub	sp, #24
 800e388:	af00      	add	r7, sp, #0
 800e38a:	60f8      	str	r0, [r7, #12]
 800e38c:	60b9      	str	r1, [r7, #8]
 800e38e:	4613      	mov	r3, r2
 800e390:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	2b00      	cmp	r3, #0
 800e396:	d106      	bne.n	800e3a6 <pbuf_add_header_impl+0x22>
 800e398:	4b2b      	ldr	r3, [pc, #172]	; (800e448 <pbuf_add_header_impl+0xc4>)
 800e39a:	f240 12df 	movw	r2, #479	; 0x1df
 800e39e:	492b      	ldr	r1, [pc, #172]	; (800e44c <pbuf_add_header_impl+0xc8>)
 800e3a0:	482b      	ldr	r0, [pc, #172]	; (800e450 <pbuf_add_header_impl+0xcc>)
 800e3a2:	f00b f9c7 	bl	8019734 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d003      	beq.n	800e3b4 <pbuf_add_header_impl+0x30>
 800e3ac:	68bb      	ldr	r3, [r7, #8]
 800e3ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e3b2:	d301      	bcc.n	800e3b8 <pbuf_add_header_impl+0x34>
    return 1;
 800e3b4:	2301      	movs	r3, #1
 800e3b6:	e043      	b.n	800e440 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800e3b8:	68bb      	ldr	r3, [r7, #8]
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d101      	bne.n	800e3c2 <pbuf_add_header_impl+0x3e>
    return 0;
 800e3be:	2300      	movs	r3, #0
 800e3c0:	e03e      	b.n	800e440 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800e3c2:	68bb      	ldr	r3, [r7, #8]
 800e3c4:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	891a      	ldrh	r2, [r3, #8]
 800e3ca:	8a7b      	ldrh	r3, [r7, #18]
 800e3cc:	4413      	add	r3, r2
 800e3ce:	b29b      	uxth	r3, r3
 800e3d0:	8a7a      	ldrh	r2, [r7, #18]
 800e3d2:	429a      	cmp	r2, r3
 800e3d4:	d901      	bls.n	800e3da <pbuf_add_header_impl+0x56>
    return 1;
 800e3d6:	2301      	movs	r3, #1
 800e3d8:	e032      	b.n	800e440 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	7b1b      	ldrb	r3, [r3, #12]
 800e3de:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800e3e0:	8a3b      	ldrh	r3, [r7, #16]
 800e3e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d00c      	beq.n	800e404 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	685a      	ldr	r2, [r3, #4]
 800e3ee:	68bb      	ldr	r3, [r7, #8]
 800e3f0:	425b      	negs	r3, r3
 800e3f2:	4413      	add	r3, r2
 800e3f4:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	3310      	adds	r3, #16
 800e3fa:	697a      	ldr	r2, [r7, #20]
 800e3fc:	429a      	cmp	r2, r3
 800e3fe:	d20d      	bcs.n	800e41c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800e400:	2301      	movs	r3, #1
 800e402:	e01d      	b.n	800e440 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800e404:	79fb      	ldrb	r3, [r7, #7]
 800e406:	2b00      	cmp	r3, #0
 800e408:	d006      	beq.n	800e418 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	685a      	ldr	r2, [r3, #4]
 800e40e:	68bb      	ldr	r3, [r7, #8]
 800e410:	425b      	negs	r3, r3
 800e412:	4413      	add	r3, r2
 800e414:	617b      	str	r3, [r7, #20]
 800e416:	e001      	b.n	800e41c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800e418:	2301      	movs	r3, #1
 800e41a:	e011      	b.n	800e440 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	697a      	ldr	r2, [r7, #20]
 800e420:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	895a      	ldrh	r2, [r3, #10]
 800e426:	8a7b      	ldrh	r3, [r7, #18]
 800e428:	4413      	add	r3, r2
 800e42a:	b29a      	uxth	r2, r3
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	891a      	ldrh	r2, [r3, #8]
 800e434:	8a7b      	ldrh	r3, [r7, #18]
 800e436:	4413      	add	r3, r2
 800e438:	b29a      	uxth	r2, r3
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	811a      	strh	r2, [r3, #8]


  return 0;
 800e43e:	2300      	movs	r3, #0
}
 800e440:	4618      	mov	r0, r3
 800e442:	3718      	adds	r7, #24
 800e444:	46bd      	mov	sp, r7
 800e446:	bd80      	pop	{r7, pc}
 800e448:	0801a8f8 	.word	0x0801a8f8
 800e44c:	0801aa5c 	.word	0x0801aa5c
 800e450:	0801a958 	.word	0x0801a958

0800e454 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800e454:	b580      	push	{r7, lr}
 800e456:	b082      	sub	sp, #8
 800e458:	af00      	add	r7, sp, #0
 800e45a:	6078      	str	r0, [r7, #4]
 800e45c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800e45e:	2200      	movs	r2, #0
 800e460:	6839      	ldr	r1, [r7, #0]
 800e462:	6878      	ldr	r0, [r7, #4]
 800e464:	f7ff ff8e 	bl	800e384 <pbuf_add_header_impl>
 800e468:	4603      	mov	r3, r0
}
 800e46a:	4618      	mov	r0, r3
 800e46c:	3708      	adds	r7, #8
 800e46e:	46bd      	mov	sp, r7
 800e470:	bd80      	pop	{r7, pc}
	...

0800e474 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800e474:	b580      	push	{r7, lr}
 800e476:	b084      	sub	sp, #16
 800e478:	af00      	add	r7, sp, #0
 800e47a:	6078      	str	r0, [r7, #4]
 800e47c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	2b00      	cmp	r3, #0
 800e482:	d106      	bne.n	800e492 <pbuf_remove_header+0x1e>
 800e484:	4b20      	ldr	r3, [pc, #128]	; (800e508 <pbuf_remove_header+0x94>)
 800e486:	f240 224b 	movw	r2, #587	; 0x24b
 800e48a:	4920      	ldr	r1, [pc, #128]	; (800e50c <pbuf_remove_header+0x98>)
 800e48c:	4820      	ldr	r0, [pc, #128]	; (800e510 <pbuf_remove_header+0x9c>)
 800e48e:	f00b f951 	bl	8019734 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	2b00      	cmp	r3, #0
 800e496:	d003      	beq.n	800e4a0 <pbuf_remove_header+0x2c>
 800e498:	683b      	ldr	r3, [r7, #0]
 800e49a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e49e:	d301      	bcc.n	800e4a4 <pbuf_remove_header+0x30>
    return 1;
 800e4a0:	2301      	movs	r3, #1
 800e4a2:	e02c      	b.n	800e4fe <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800e4a4:	683b      	ldr	r3, [r7, #0]
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d101      	bne.n	800e4ae <pbuf_remove_header+0x3a>
    return 0;
 800e4aa:	2300      	movs	r3, #0
 800e4ac:	e027      	b.n	800e4fe <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800e4ae:	683b      	ldr	r3, [r7, #0]
 800e4b0:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	895b      	ldrh	r3, [r3, #10]
 800e4b6:	89fa      	ldrh	r2, [r7, #14]
 800e4b8:	429a      	cmp	r2, r3
 800e4ba:	d908      	bls.n	800e4ce <pbuf_remove_header+0x5a>
 800e4bc:	4b12      	ldr	r3, [pc, #72]	; (800e508 <pbuf_remove_header+0x94>)
 800e4be:	f240 2255 	movw	r2, #597	; 0x255
 800e4c2:	4914      	ldr	r1, [pc, #80]	; (800e514 <pbuf_remove_header+0xa0>)
 800e4c4:	4812      	ldr	r0, [pc, #72]	; (800e510 <pbuf_remove_header+0x9c>)
 800e4c6:	f00b f935 	bl	8019734 <iprintf>
 800e4ca:	2301      	movs	r3, #1
 800e4cc:	e017      	b.n	800e4fe <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	685b      	ldr	r3, [r3, #4]
 800e4d2:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	685a      	ldr	r2, [r3, #4]
 800e4d8:	683b      	ldr	r3, [r7, #0]
 800e4da:	441a      	add	r2, r3
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	895a      	ldrh	r2, [r3, #10]
 800e4e4:	89fb      	ldrh	r3, [r7, #14]
 800e4e6:	1ad3      	subs	r3, r2, r3
 800e4e8:	b29a      	uxth	r2, r3
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	891a      	ldrh	r2, [r3, #8]
 800e4f2:	89fb      	ldrh	r3, [r7, #14]
 800e4f4:	1ad3      	subs	r3, r2, r3
 800e4f6:	b29a      	uxth	r2, r3
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800e4fc:	2300      	movs	r3, #0
}
 800e4fe:	4618      	mov	r0, r3
 800e500:	3710      	adds	r7, #16
 800e502:	46bd      	mov	sp, r7
 800e504:	bd80      	pop	{r7, pc}
 800e506:	bf00      	nop
 800e508:	0801a8f8 	.word	0x0801a8f8
 800e50c:	0801aa5c 	.word	0x0801aa5c
 800e510:	0801a958 	.word	0x0801a958
 800e514:	0801aa68 	.word	0x0801aa68

0800e518 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800e518:	b580      	push	{r7, lr}
 800e51a:	b082      	sub	sp, #8
 800e51c:	af00      	add	r7, sp, #0
 800e51e:	6078      	str	r0, [r7, #4]
 800e520:	460b      	mov	r3, r1
 800e522:	807b      	strh	r3, [r7, #2]
 800e524:	4613      	mov	r3, r2
 800e526:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800e528:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	da08      	bge.n	800e542 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800e530:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e534:	425b      	negs	r3, r3
 800e536:	4619      	mov	r1, r3
 800e538:	6878      	ldr	r0, [r7, #4]
 800e53a:	f7ff ff9b 	bl	800e474 <pbuf_remove_header>
 800e53e:	4603      	mov	r3, r0
 800e540:	e007      	b.n	800e552 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800e542:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e546:	787a      	ldrb	r2, [r7, #1]
 800e548:	4619      	mov	r1, r3
 800e54a:	6878      	ldr	r0, [r7, #4]
 800e54c:	f7ff ff1a 	bl	800e384 <pbuf_add_header_impl>
 800e550:	4603      	mov	r3, r0
  }
}
 800e552:	4618      	mov	r0, r3
 800e554:	3708      	adds	r7, #8
 800e556:	46bd      	mov	sp, r7
 800e558:	bd80      	pop	{r7, pc}

0800e55a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800e55a:	b580      	push	{r7, lr}
 800e55c:	b082      	sub	sp, #8
 800e55e:	af00      	add	r7, sp, #0
 800e560:	6078      	str	r0, [r7, #4]
 800e562:	460b      	mov	r3, r1
 800e564:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800e566:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e56a:	2201      	movs	r2, #1
 800e56c:	4619      	mov	r1, r3
 800e56e:	6878      	ldr	r0, [r7, #4]
 800e570:	f7ff ffd2 	bl	800e518 <pbuf_header_impl>
 800e574:	4603      	mov	r3, r0
}
 800e576:	4618      	mov	r0, r3
 800e578:	3708      	adds	r7, #8
 800e57a:	46bd      	mov	sp, r7
 800e57c:	bd80      	pop	{r7, pc}
	...

0800e580 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800e580:	b580      	push	{r7, lr}
 800e582:	b088      	sub	sp, #32
 800e584:	af00      	add	r7, sp, #0
 800e586:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d10b      	bne.n	800e5a6 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	2b00      	cmp	r3, #0
 800e592:	d106      	bne.n	800e5a2 <pbuf_free+0x22>
 800e594:	4b3b      	ldr	r3, [pc, #236]	; (800e684 <pbuf_free+0x104>)
 800e596:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800e59a:	493b      	ldr	r1, [pc, #236]	; (800e688 <pbuf_free+0x108>)
 800e59c:	483b      	ldr	r0, [pc, #236]	; (800e68c <pbuf_free+0x10c>)
 800e59e:	f00b f8c9 	bl	8019734 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800e5a2:	2300      	movs	r3, #0
 800e5a4:	e069      	b.n	800e67a <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800e5a6:	2300      	movs	r3, #0
 800e5a8:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800e5aa:	e062      	b.n	800e672 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800e5ac:	f00a fc72 	bl	8018e94 <sys_arch_protect>
 800e5b0:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	7b9b      	ldrb	r3, [r3, #14]
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d106      	bne.n	800e5c8 <pbuf_free+0x48>
 800e5ba:	4b32      	ldr	r3, [pc, #200]	; (800e684 <pbuf_free+0x104>)
 800e5bc:	f240 22f1 	movw	r2, #753	; 0x2f1
 800e5c0:	4933      	ldr	r1, [pc, #204]	; (800e690 <pbuf_free+0x110>)
 800e5c2:	4832      	ldr	r0, [pc, #200]	; (800e68c <pbuf_free+0x10c>)
 800e5c4:	f00b f8b6 	bl	8019734 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	7b9b      	ldrb	r3, [r3, #14]
 800e5cc:	3b01      	subs	r3, #1
 800e5ce:	b2da      	uxtb	r2, r3
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	739a      	strb	r2, [r3, #14]
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	7b9b      	ldrb	r3, [r3, #14]
 800e5d8:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800e5da:	69b8      	ldr	r0, [r7, #24]
 800e5dc:	f00a fc68 	bl	8018eb0 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800e5e0:	7dfb      	ldrb	r3, [r7, #23]
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d143      	bne.n	800e66e <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	7b1b      	ldrb	r3, [r3, #12]
 800e5f0:	f003 030f 	and.w	r3, r3, #15
 800e5f4:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	7b5b      	ldrb	r3, [r3, #13]
 800e5fa:	f003 0302 	and.w	r3, r3, #2
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d011      	beq.n	800e626 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800e606:	68bb      	ldr	r3, [r7, #8]
 800e608:	691b      	ldr	r3, [r3, #16]
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d106      	bne.n	800e61c <pbuf_free+0x9c>
 800e60e:	4b1d      	ldr	r3, [pc, #116]	; (800e684 <pbuf_free+0x104>)
 800e610:	f240 22ff 	movw	r2, #767	; 0x2ff
 800e614:	491f      	ldr	r1, [pc, #124]	; (800e694 <pbuf_free+0x114>)
 800e616:	481d      	ldr	r0, [pc, #116]	; (800e68c <pbuf_free+0x10c>)
 800e618:	f00b f88c 	bl	8019734 <iprintf>
        pc->custom_free_function(p);
 800e61c:	68bb      	ldr	r3, [r7, #8]
 800e61e:	691b      	ldr	r3, [r3, #16]
 800e620:	6878      	ldr	r0, [r7, #4]
 800e622:	4798      	blx	r3
 800e624:	e01d      	b.n	800e662 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800e626:	7bfb      	ldrb	r3, [r7, #15]
 800e628:	2b02      	cmp	r3, #2
 800e62a:	d104      	bne.n	800e636 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800e62c:	6879      	ldr	r1, [r7, #4]
 800e62e:	200c      	movs	r0, #12
 800e630:	f7ff f8f6 	bl	800d820 <memp_free>
 800e634:	e015      	b.n	800e662 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800e636:	7bfb      	ldrb	r3, [r7, #15]
 800e638:	2b01      	cmp	r3, #1
 800e63a:	d104      	bne.n	800e646 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800e63c:	6879      	ldr	r1, [r7, #4]
 800e63e:	200b      	movs	r0, #11
 800e640:	f7ff f8ee 	bl	800d820 <memp_free>
 800e644:	e00d      	b.n	800e662 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800e646:	7bfb      	ldrb	r3, [r7, #15]
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d103      	bne.n	800e654 <pbuf_free+0xd4>
          mem_free(p);
 800e64c:	6878      	ldr	r0, [r7, #4]
 800e64e:	f7fe fd79 	bl	800d144 <mem_free>
 800e652:	e006      	b.n	800e662 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800e654:	4b0b      	ldr	r3, [pc, #44]	; (800e684 <pbuf_free+0x104>)
 800e656:	f240 320f 	movw	r2, #783	; 0x30f
 800e65a:	490f      	ldr	r1, [pc, #60]	; (800e698 <pbuf_free+0x118>)
 800e65c:	480b      	ldr	r0, [pc, #44]	; (800e68c <pbuf_free+0x10c>)
 800e65e:	f00b f869 	bl	8019734 <iprintf>
        }
      }
      count++;
 800e662:	7ffb      	ldrb	r3, [r7, #31]
 800e664:	3301      	adds	r3, #1
 800e666:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800e668:	693b      	ldr	r3, [r7, #16]
 800e66a:	607b      	str	r3, [r7, #4]
 800e66c:	e001      	b.n	800e672 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800e66e:	2300      	movs	r3, #0
 800e670:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	2b00      	cmp	r3, #0
 800e676:	d199      	bne.n	800e5ac <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800e678:	7ffb      	ldrb	r3, [r7, #31]
}
 800e67a:	4618      	mov	r0, r3
 800e67c:	3720      	adds	r7, #32
 800e67e:	46bd      	mov	sp, r7
 800e680:	bd80      	pop	{r7, pc}
 800e682:	bf00      	nop
 800e684:	0801a8f8 	.word	0x0801a8f8
 800e688:	0801aa5c 	.word	0x0801aa5c
 800e68c:	0801a958 	.word	0x0801a958
 800e690:	0801aa88 	.word	0x0801aa88
 800e694:	0801aaa0 	.word	0x0801aaa0
 800e698:	0801aac4 	.word	0x0801aac4

0800e69c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800e69c:	b480      	push	{r7}
 800e69e:	b085      	sub	sp, #20
 800e6a0:	af00      	add	r7, sp, #0
 800e6a2:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800e6a4:	2300      	movs	r3, #0
 800e6a6:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800e6a8:	e005      	b.n	800e6b6 <pbuf_clen+0x1a>
    ++len;
 800e6aa:	89fb      	ldrh	r3, [r7, #14]
 800e6ac:	3301      	adds	r3, #1
 800e6ae:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d1f6      	bne.n	800e6aa <pbuf_clen+0xe>
  }
  return len;
 800e6bc:	89fb      	ldrh	r3, [r7, #14]
}
 800e6be:	4618      	mov	r0, r3
 800e6c0:	3714      	adds	r7, #20
 800e6c2:	46bd      	mov	sp, r7
 800e6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6c8:	4770      	bx	lr
	...

0800e6cc <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800e6cc:	b580      	push	{r7, lr}
 800e6ce:	b084      	sub	sp, #16
 800e6d0:	af00      	add	r7, sp, #0
 800e6d2:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d016      	beq.n	800e708 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800e6da:	f00a fbdb 	bl	8018e94 <sys_arch_protect>
 800e6de:	60f8      	str	r0, [r7, #12]
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	7b9b      	ldrb	r3, [r3, #14]
 800e6e4:	3301      	adds	r3, #1
 800e6e6:	b2da      	uxtb	r2, r3
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	739a      	strb	r2, [r3, #14]
 800e6ec:	68f8      	ldr	r0, [r7, #12]
 800e6ee:	f00a fbdf 	bl	8018eb0 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	7b9b      	ldrb	r3, [r3, #14]
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d106      	bne.n	800e708 <pbuf_ref+0x3c>
 800e6fa:	4b05      	ldr	r3, [pc, #20]	; (800e710 <pbuf_ref+0x44>)
 800e6fc:	f240 3242 	movw	r2, #834	; 0x342
 800e700:	4904      	ldr	r1, [pc, #16]	; (800e714 <pbuf_ref+0x48>)
 800e702:	4805      	ldr	r0, [pc, #20]	; (800e718 <pbuf_ref+0x4c>)
 800e704:	f00b f816 	bl	8019734 <iprintf>
  }
}
 800e708:	bf00      	nop
 800e70a:	3710      	adds	r7, #16
 800e70c:	46bd      	mov	sp, r7
 800e70e:	bd80      	pop	{r7, pc}
 800e710:	0801a8f8 	.word	0x0801a8f8
 800e714:	0801aad8 	.word	0x0801aad8
 800e718:	0801a958 	.word	0x0801a958

0800e71c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800e71c:	b580      	push	{r7, lr}
 800e71e:	b084      	sub	sp, #16
 800e720:	af00      	add	r7, sp, #0
 800e722:	6078      	str	r0, [r7, #4]
 800e724:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d002      	beq.n	800e732 <pbuf_cat+0x16>
 800e72c:	683b      	ldr	r3, [r7, #0]
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d107      	bne.n	800e742 <pbuf_cat+0x26>
 800e732:	4b20      	ldr	r3, [pc, #128]	; (800e7b4 <pbuf_cat+0x98>)
 800e734:	f240 3259 	movw	r2, #857	; 0x359
 800e738:	491f      	ldr	r1, [pc, #124]	; (800e7b8 <pbuf_cat+0x9c>)
 800e73a:	4820      	ldr	r0, [pc, #128]	; (800e7bc <pbuf_cat+0xa0>)
 800e73c:	f00a fffa 	bl	8019734 <iprintf>
 800e740:	e034      	b.n	800e7ac <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	60fb      	str	r3, [r7, #12]
 800e746:	e00a      	b.n	800e75e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	891a      	ldrh	r2, [r3, #8]
 800e74c:	683b      	ldr	r3, [r7, #0]
 800e74e:	891b      	ldrh	r3, [r3, #8]
 800e750:	4413      	add	r3, r2
 800e752:	b29a      	uxth	r2, r3
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	60fb      	str	r3, [r7, #12]
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	2b00      	cmp	r3, #0
 800e764:	d1f0      	bne.n	800e748 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	891a      	ldrh	r2, [r3, #8]
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	895b      	ldrh	r3, [r3, #10]
 800e76e:	429a      	cmp	r2, r3
 800e770:	d006      	beq.n	800e780 <pbuf_cat+0x64>
 800e772:	4b10      	ldr	r3, [pc, #64]	; (800e7b4 <pbuf_cat+0x98>)
 800e774:	f240 3262 	movw	r2, #866	; 0x362
 800e778:	4911      	ldr	r1, [pc, #68]	; (800e7c0 <pbuf_cat+0xa4>)
 800e77a:	4810      	ldr	r0, [pc, #64]	; (800e7bc <pbuf_cat+0xa0>)
 800e77c:	f00a ffda 	bl	8019734 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	2b00      	cmp	r3, #0
 800e786:	d006      	beq.n	800e796 <pbuf_cat+0x7a>
 800e788:	4b0a      	ldr	r3, [pc, #40]	; (800e7b4 <pbuf_cat+0x98>)
 800e78a:	f240 3263 	movw	r2, #867	; 0x363
 800e78e:	490d      	ldr	r1, [pc, #52]	; (800e7c4 <pbuf_cat+0xa8>)
 800e790:	480a      	ldr	r0, [pc, #40]	; (800e7bc <pbuf_cat+0xa0>)
 800e792:	f00a ffcf 	bl	8019734 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	891a      	ldrh	r2, [r3, #8]
 800e79a:	683b      	ldr	r3, [r7, #0]
 800e79c:	891b      	ldrh	r3, [r3, #8]
 800e79e:	4413      	add	r3, r2
 800e7a0:	b29a      	uxth	r2, r3
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	683a      	ldr	r2, [r7, #0]
 800e7aa:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800e7ac:	3710      	adds	r7, #16
 800e7ae:	46bd      	mov	sp, r7
 800e7b0:	bd80      	pop	{r7, pc}
 800e7b2:	bf00      	nop
 800e7b4:	0801a8f8 	.word	0x0801a8f8
 800e7b8:	0801aaec 	.word	0x0801aaec
 800e7bc:	0801a958 	.word	0x0801a958
 800e7c0:	0801ab24 	.word	0x0801ab24
 800e7c4:	0801ab54 	.word	0x0801ab54

0800e7c8 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800e7c8:	b580      	push	{r7, lr}
 800e7ca:	b082      	sub	sp, #8
 800e7cc:	af00      	add	r7, sp, #0
 800e7ce:	6078      	str	r0, [r7, #4]
 800e7d0:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800e7d2:	6839      	ldr	r1, [r7, #0]
 800e7d4:	6878      	ldr	r0, [r7, #4]
 800e7d6:	f7ff ffa1 	bl	800e71c <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800e7da:	6838      	ldr	r0, [r7, #0]
 800e7dc:	f7ff ff76 	bl	800e6cc <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800e7e0:	bf00      	nop
 800e7e2:	3708      	adds	r7, #8
 800e7e4:	46bd      	mov	sp, r7
 800e7e6:	bd80      	pop	{r7, pc}

0800e7e8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800e7e8:	b580      	push	{r7, lr}
 800e7ea:	b086      	sub	sp, #24
 800e7ec:	af00      	add	r7, sp, #0
 800e7ee:	6078      	str	r0, [r7, #4]
 800e7f0:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800e7f2:	2300      	movs	r3, #0
 800e7f4:	617b      	str	r3, [r7, #20]
 800e7f6:	2300      	movs	r3, #0
 800e7f8:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d008      	beq.n	800e812 <pbuf_copy+0x2a>
 800e800:	683b      	ldr	r3, [r7, #0]
 800e802:	2b00      	cmp	r3, #0
 800e804:	d005      	beq.n	800e812 <pbuf_copy+0x2a>
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	891a      	ldrh	r2, [r3, #8]
 800e80a:	683b      	ldr	r3, [r7, #0]
 800e80c:	891b      	ldrh	r3, [r3, #8]
 800e80e:	429a      	cmp	r2, r3
 800e810:	d209      	bcs.n	800e826 <pbuf_copy+0x3e>
 800e812:	4b57      	ldr	r3, [pc, #348]	; (800e970 <pbuf_copy+0x188>)
 800e814:	f240 32c9 	movw	r2, #969	; 0x3c9
 800e818:	4956      	ldr	r1, [pc, #344]	; (800e974 <pbuf_copy+0x18c>)
 800e81a:	4857      	ldr	r0, [pc, #348]	; (800e978 <pbuf_copy+0x190>)
 800e81c:	f00a ff8a 	bl	8019734 <iprintf>
 800e820:	f06f 030f 	mvn.w	r3, #15
 800e824:	e09f      	b.n	800e966 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	895b      	ldrh	r3, [r3, #10]
 800e82a:	461a      	mov	r2, r3
 800e82c:	697b      	ldr	r3, [r7, #20]
 800e82e:	1ad2      	subs	r2, r2, r3
 800e830:	683b      	ldr	r3, [r7, #0]
 800e832:	895b      	ldrh	r3, [r3, #10]
 800e834:	4619      	mov	r1, r3
 800e836:	693b      	ldr	r3, [r7, #16]
 800e838:	1acb      	subs	r3, r1, r3
 800e83a:	429a      	cmp	r2, r3
 800e83c:	d306      	bcc.n	800e84c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800e83e:	683b      	ldr	r3, [r7, #0]
 800e840:	895b      	ldrh	r3, [r3, #10]
 800e842:	461a      	mov	r2, r3
 800e844:	693b      	ldr	r3, [r7, #16]
 800e846:	1ad3      	subs	r3, r2, r3
 800e848:	60fb      	str	r3, [r7, #12]
 800e84a:	e005      	b.n	800e858 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	895b      	ldrh	r3, [r3, #10]
 800e850:	461a      	mov	r2, r3
 800e852:	697b      	ldr	r3, [r7, #20]
 800e854:	1ad3      	subs	r3, r2, r3
 800e856:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	685a      	ldr	r2, [r3, #4]
 800e85c:	697b      	ldr	r3, [r7, #20]
 800e85e:	18d0      	adds	r0, r2, r3
 800e860:	683b      	ldr	r3, [r7, #0]
 800e862:	685a      	ldr	r2, [r3, #4]
 800e864:	693b      	ldr	r3, [r7, #16]
 800e866:	4413      	add	r3, r2
 800e868:	68fa      	ldr	r2, [r7, #12]
 800e86a:	4619      	mov	r1, r3
 800e86c:	f00a fb7e 	bl	8018f6c <memcpy>
    offset_to += len;
 800e870:	697a      	ldr	r2, [r7, #20]
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	4413      	add	r3, r2
 800e876:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800e878:	693a      	ldr	r2, [r7, #16]
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	4413      	add	r3, r2
 800e87e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	895b      	ldrh	r3, [r3, #10]
 800e884:	461a      	mov	r2, r3
 800e886:	697b      	ldr	r3, [r7, #20]
 800e888:	4293      	cmp	r3, r2
 800e88a:	d906      	bls.n	800e89a <pbuf_copy+0xb2>
 800e88c:	4b38      	ldr	r3, [pc, #224]	; (800e970 <pbuf_copy+0x188>)
 800e88e:	f240 32d9 	movw	r2, #985	; 0x3d9
 800e892:	493a      	ldr	r1, [pc, #232]	; (800e97c <pbuf_copy+0x194>)
 800e894:	4838      	ldr	r0, [pc, #224]	; (800e978 <pbuf_copy+0x190>)
 800e896:	f00a ff4d 	bl	8019734 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800e89a:	683b      	ldr	r3, [r7, #0]
 800e89c:	895b      	ldrh	r3, [r3, #10]
 800e89e:	461a      	mov	r2, r3
 800e8a0:	693b      	ldr	r3, [r7, #16]
 800e8a2:	4293      	cmp	r3, r2
 800e8a4:	d906      	bls.n	800e8b4 <pbuf_copy+0xcc>
 800e8a6:	4b32      	ldr	r3, [pc, #200]	; (800e970 <pbuf_copy+0x188>)
 800e8a8:	f240 32da 	movw	r2, #986	; 0x3da
 800e8ac:	4934      	ldr	r1, [pc, #208]	; (800e980 <pbuf_copy+0x198>)
 800e8ae:	4832      	ldr	r0, [pc, #200]	; (800e978 <pbuf_copy+0x190>)
 800e8b0:	f00a ff40 	bl	8019734 <iprintf>
    if (offset_from >= p_from->len) {
 800e8b4:	683b      	ldr	r3, [r7, #0]
 800e8b6:	895b      	ldrh	r3, [r3, #10]
 800e8b8:	461a      	mov	r2, r3
 800e8ba:	693b      	ldr	r3, [r7, #16]
 800e8bc:	4293      	cmp	r3, r2
 800e8be:	d304      	bcc.n	800e8ca <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800e8c0:	2300      	movs	r3, #0
 800e8c2:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800e8c4:	683b      	ldr	r3, [r7, #0]
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	895b      	ldrh	r3, [r3, #10]
 800e8ce:	461a      	mov	r2, r3
 800e8d0:	697b      	ldr	r3, [r7, #20]
 800e8d2:	4293      	cmp	r3, r2
 800e8d4:	d114      	bne.n	800e900 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800e8d6:	2300      	movs	r3, #0
 800e8d8:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d10c      	bne.n	800e900 <pbuf_copy+0x118>
 800e8e6:	683b      	ldr	r3, [r7, #0]
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d009      	beq.n	800e900 <pbuf_copy+0x118>
 800e8ec:	4b20      	ldr	r3, [pc, #128]	; (800e970 <pbuf_copy+0x188>)
 800e8ee:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800e8f2:	4924      	ldr	r1, [pc, #144]	; (800e984 <pbuf_copy+0x19c>)
 800e8f4:	4820      	ldr	r0, [pc, #128]	; (800e978 <pbuf_copy+0x190>)
 800e8f6:	f00a ff1d 	bl	8019734 <iprintf>
 800e8fa:	f06f 030f 	mvn.w	r3, #15
 800e8fe:	e032      	b.n	800e966 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800e900:	683b      	ldr	r3, [r7, #0]
 800e902:	2b00      	cmp	r3, #0
 800e904:	d013      	beq.n	800e92e <pbuf_copy+0x146>
 800e906:	683b      	ldr	r3, [r7, #0]
 800e908:	895a      	ldrh	r2, [r3, #10]
 800e90a:	683b      	ldr	r3, [r7, #0]
 800e90c:	891b      	ldrh	r3, [r3, #8]
 800e90e:	429a      	cmp	r2, r3
 800e910:	d10d      	bne.n	800e92e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e912:	683b      	ldr	r3, [r7, #0]
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	2b00      	cmp	r3, #0
 800e918:	d009      	beq.n	800e92e <pbuf_copy+0x146>
 800e91a:	4b15      	ldr	r3, [pc, #84]	; (800e970 <pbuf_copy+0x188>)
 800e91c:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800e920:	4919      	ldr	r1, [pc, #100]	; (800e988 <pbuf_copy+0x1a0>)
 800e922:	4815      	ldr	r0, [pc, #84]	; (800e978 <pbuf_copy+0x190>)
 800e924:	f00a ff06 	bl	8019734 <iprintf>
 800e928:	f06f 0305 	mvn.w	r3, #5
 800e92c:	e01b      	b.n	800e966 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	2b00      	cmp	r3, #0
 800e932:	d013      	beq.n	800e95c <pbuf_copy+0x174>
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	895a      	ldrh	r2, [r3, #10]
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	891b      	ldrh	r3, [r3, #8]
 800e93c:	429a      	cmp	r2, r3
 800e93e:	d10d      	bne.n	800e95c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	2b00      	cmp	r3, #0
 800e946:	d009      	beq.n	800e95c <pbuf_copy+0x174>
 800e948:	4b09      	ldr	r3, [pc, #36]	; (800e970 <pbuf_copy+0x188>)
 800e94a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800e94e:	490e      	ldr	r1, [pc, #56]	; (800e988 <pbuf_copy+0x1a0>)
 800e950:	4809      	ldr	r0, [pc, #36]	; (800e978 <pbuf_copy+0x190>)
 800e952:	f00a feef 	bl	8019734 <iprintf>
 800e956:	f06f 0305 	mvn.w	r3, #5
 800e95a:	e004      	b.n	800e966 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800e95c:	683b      	ldr	r3, [r7, #0]
 800e95e:	2b00      	cmp	r3, #0
 800e960:	f47f af61 	bne.w	800e826 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800e964:	2300      	movs	r3, #0
}
 800e966:	4618      	mov	r0, r3
 800e968:	3718      	adds	r7, #24
 800e96a:	46bd      	mov	sp, r7
 800e96c:	bd80      	pop	{r7, pc}
 800e96e:	bf00      	nop
 800e970:	0801a8f8 	.word	0x0801a8f8
 800e974:	0801aba0 	.word	0x0801aba0
 800e978:	0801a958 	.word	0x0801a958
 800e97c:	0801abd0 	.word	0x0801abd0
 800e980:	0801abe8 	.word	0x0801abe8
 800e984:	0801ac04 	.word	0x0801ac04
 800e988:	0801ac14 	.word	0x0801ac14

0800e98c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800e98c:	b580      	push	{r7, lr}
 800e98e:	b088      	sub	sp, #32
 800e990:	af00      	add	r7, sp, #0
 800e992:	60f8      	str	r0, [r7, #12]
 800e994:	60b9      	str	r1, [r7, #8]
 800e996:	4611      	mov	r1, r2
 800e998:	461a      	mov	r2, r3
 800e99a:	460b      	mov	r3, r1
 800e99c:	80fb      	strh	r3, [r7, #6]
 800e99e:	4613      	mov	r3, r2
 800e9a0:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800e9a2:	2300      	movs	r3, #0
 800e9a4:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800e9a6:	2300      	movs	r3, #0
 800e9a8:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d108      	bne.n	800e9c2 <pbuf_copy_partial+0x36>
 800e9b0:	4b2b      	ldr	r3, [pc, #172]	; (800ea60 <pbuf_copy_partial+0xd4>)
 800e9b2:	f240 420a 	movw	r2, #1034	; 0x40a
 800e9b6:	492b      	ldr	r1, [pc, #172]	; (800ea64 <pbuf_copy_partial+0xd8>)
 800e9b8:	482b      	ldr	r0, [pc, #172]	; (800ea68 <pbuf_copy_partial+0xdc>)
 800e9ba:	f00a febb 	bl	8019734 <iprintf>
 800e9be:	2300      	movs	r3, #0
 800e9c0:	e04a      	b.n	800ea58 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800e9c2:	68bb      	ldr	r3, [r7, #8]
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d108      	bne.n	800e9da <pbuf_copy_partial+0x4e>
 800e9c8:	4b25      	ldr	r3, [pc, #148]	; (800ea60 <pbuf_copy_partial+0xd4>)
 800e9ca:	f240 420b 	movw	r2, #1035	; 0x40b
 800e9ce:	4927      	ldr	r1, [pc, #156]	; (800ea6c <pbuf_copy_partial+0xe0>)
 800e9d0:	4825      	ldr	r0, [pc, #148]	; (800ea68 <pbuf_copy_partial+0xdc>)
 800e9d2:	f00a feaf 	bl	8019734 <iprintf>
 800e9d6:	2300      	movs	r3, #0
 800e9d8:	e03e      	b.n	800ea58 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	61fb      	str	r3, [r7, #28]
 800e9de:	e034      	b.n	800ea4a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800e9e0:	88bb      	ldrh	r3, [r7, #4]
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d00a      	beq.n	800e9fc <pbuf_copy_partial+0x70>
 800e9e6:	69fb      	ldr	r3, [r7, #28]
 800e9e8:	895b      	ldrh	r3, [r3, #10]
 800e9ea:	88ba      	ldrh	r2, [r7, #4]
 800e9ec:	429a      	cmp	r2, r3
 800e9ee:	d305      	bcc.n	800e9fc <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800e9f0:	69fb      	ldr	r3, [r7, #28]
 800e9f2:	895b      	ldrh	r3, [r3, #10]
 800e9f4:	88ba      	ldrh	r2, [r7, #4]
 800e9f6:	1ad3      	subs	r3, r2, r3
 800e9f8:	80bb      	strh	r3, [r7, #4]
 800e9fa:	e023      	b.n	800ea44 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800e9fc:	69fb      	ldr	r3, [r7, #28]
 800e9fe:	895a      	ldrh	r2, [r3, #10]
 800ea00:	88bb      	ldrh	r3, [r7, #4]
 800ea02:	1ad3      	subs	r3, r2, r3
 800ea04:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800ea06:	8b3a      	ldrh	r2, [r7, #24]
 800ea08:	88fb      	ldrh	r3, [r7, #6]
 800ea0a:	429a      	cmp	r2, r3
 800ea0c:	d901      	bls.n	800ea12 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800ea0e:	88fb      	ldrh	r3, [r7, #6]
 800ea10:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800ea12:	8b7b      	ldrh	r3, [r7, #26]
 800ea14:	68ba      	ldr	r2, [r7, #8]
 800ea16:	18d0      	adds	r0, r2, r3
 800ea18:	69fb      	ldr	r3, [r7, #28]
 800ea1a:	685a      	ldr	r2, [r3, #4]
 800ea1c:	88bb      	ldrh	r3, [r7, #4]
 800ea1e:	4413      	add	r3, r2
 800ea20:	8b3a      	ldrh	r2, [r7, #24]
 800ea22:	4619      	mov	r1, r3
 800ea24:	f00a faa2 	bl	8018f6c <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800ea28:	8afa      	ldrh	r2, [r7, #22]
 800ea2a:	8b3b      	ldrh	r3, [r7, #24]
 800ea2c:	4413      	add	r3, r2
 800ea2e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800ea30:	8b7a      	ldrh	r2, [r7, #26]
 800ea32:	8b3b      	ldrh	r3, [r7, #24]
 800ea34:	4413      	add	r3, r2
 800ea36:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800ea38:	88fa      	ldrh	r2, [r7, #6]
 800ea3a:	8b3b      	ldrh	r3, [r7, #24]
 800ea3c:	1ad3      	subs	r3, r2, r3
 800ea3e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800ea40:	2300      	movs	r3, #0
 800ea42:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800ea44:	69fb      	ldr	r3, [r7, #28]
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	61fb      	str	r3, [r7, #28]
 800ea4a:	88fb      	ldrh	r3, [r7, #6]
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d002      	beq.n	800ea56 <pbuf_copy_partial+0xca>
 800ea50:	69fb      	ldr	r3, [r7, #28]
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d1c4      	bne.n	800e9e0 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800ea56:	8afb      	ldrh	r3, [r7, #22]
}
 800ea58:	4618      	mov	r0, r3
 800ea5a:	3720      	adds	r7, #32
 800ea5c:	46bd      	mov	sp, r7
 800ea5e:	bd80      	pop	{r7, pc}
 800ea60:	0801a8f8 	.word	0x0801a8f8
 800ea64:	0801ac40 	.word	0x0801ac40
 800ea68:	0801a958 	.word	0x0801a958
 800ea6c:	0801ac60 	.word	0x0801ac60

0800ea70 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800ea70:	b580      	push	{r7, lr}
 800ea72:	b084      	sub	sp, #16
 800ea74:	af00      	add	r7, sp, #0
 800ea76:	4603      	mov	r3, r0
 800ea78:	603a      	str	r2, [r7, #0]
 800ea7a:	71fb      	strb	r3, [r7, #7]
 800ea7c:	460b      	mov	r3, r1
 800ea7e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800ea80:	683b      	ldr	r3, [r7, #0]
 800ea82:	8919      	ldrh	r1, [r3, #8]
 800ea84:	88ba      	ldrh	r2, [r7, #4]
 800ea86:	79fb      	ldrb	r3, [r7, #7]
 800ea88:	4618      	mov	r0, r3
 800ea8a:	f7ff fa95 	bl	800dfb8 <pbuf_alloc>
 800ea8e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d101      	bne.n	800ea9a <pbuf_clone+0x2a>
    return NULL;
 800ea96:	2300      	movs	r3, #0
 800ea98:	e011      	b.n	800eabe <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800ea9a:	6839      	ldr	r1, [r7, #0]
 800ea9c:	68f8      	ldr	r0, [r7, #12]
 800ea9e:	f7ff fea3 	bl	800e7e8 <pbuf_copy>
 800eaa2:	4603      	mov	r3, r0
 800eaa4:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800eaa6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d006      	beq.n	800eabc <pbuf_clone+0x4c>
 800eaae:	4b06      	ldr	r3, [pc, #24]	; (800eac8 <pbuf_clone+0x58>)
 800eab0:	f240 5224 	movw	r2, #1316	; 0x524
 800eab4:	4905      	ldr	r1, [pc, #20]	; (800eacc <pbuf_clone+0x5c>)
 800eab6:	4806      	ldr	r0, [pc, #24]	; (800ead0 <pbuf_clone+0x60>)
 800eab8:	f00a fe3c 	bl	8019734 <iprintf>
  return q;
 800eabc:	68fb      	ldr	r3, [r7, #12]
}
 800eabe:	4618      	mov	r0, r3
 800eac0:	3710      	adds	r7, #16
 800eac2:	46bd      	mov	sp, r7
 800eac4:	bd80      	pop	{r7, pc}
 800eac6:	bf00      	nop
 800eac8:	0801a8f8 	.word	0x0801a8f8
 800eacc:	0801ad6c 	.word	0x0801ad6c
 800ead0:	0801a958 	.word	0x0801a958

0800ead4 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800ead4:	b580      	push	{r7, lr}
 800ead6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800ead8:	f00a feba 	bl	8019850 <rand>
 800eadc:	4603      	mov	r3, r0
 800eade:	b29b      	uxth	r3, r3
 800eae0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800eae4:	b29b      	uxth	r3, r3
 800eae6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800eaea:	b29a      	uxth	r2, r3
 800eaec:	4b01      	ldr	r3, [pc, #4]	; (800eaf4 <tcp_init+0x20>)
 800eaee:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800eaf0:	bf00      	nop
 800eaf2:	bd80      	pop	{r7, pc}
 800eaf4:	20000010 	.word	0x20000010

0800eaf8 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800eaf8:	b580      	push	{r7, lr}
 800eafa:	b082      	sub	sp, #8
 800eafc:	af00      	add	r7, sp, #0
 800eafe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	7d1b      	ldrb	r3, [r3, #20]
 800eb04:	2b01      	cmp	r3, #1
 800eb06:	d105      	bne.n	800eb14 <tcp_free+0x1c>
 800eb08:	4b06      	ldr	r3, [pc, #24]	; (800eb24 <tcp_free+0x2c>)
 800eb0a:	22d4      	movs	r2, #212	; 0xd4
 800eb0c:	4906      	ldr	r1, [pc, #24]	; (800eb28 <tcp_free+0x30>)
 800eb0e:	4807      	ldr	r0, [pc, #28]	; (800eb2c <tcp_free+0x34>)
 800eb10:	f00a fe10 	bl	8019734 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800eb14:	6879      	ldr	r1, [r7, #4]
 800eb16:	2001      	movs	r0, #1
 800eb18:	f7fe fe82 	bl	800d820 <memp_free>
}
 800eb1c:	bf00      	nop
 800eb1e:	3708      	adds	r7, #8
 800eb20:	46bd      	mov	sp, r7
 800eb22:	bd80      	pop	{r7, pc}
 800eb24:	0801adf8 	.word	0x0801adf8
 800eb28:	0801ae28 	.word	0x0801ae28
 800eb2c:	0801ae3c 	.word	0x0801ae3c

0800eb30 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800eb30:	b580      	push	{r7, lr}
 800eb32:	b082      	sub	sp, #8
 800eb34:	af00      	add	r7, sp, #0
 800eb36:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	7d1b      	ldrb	r3, [r3, #20]
 800eb3c:	2b01      	cmp	r3, #1
 800eb3e:	d105      	bne.n	800eb4c <tcp_free_listen+0x1c>
 800eb40:	4b06      	ldr	r3, [pc, #24]	; (800eb5c <tcp_free_listen+0x2c>)
 800eb42:	22df      	movs	r2, #223	; 0xdf
 800eb44:	4906      	ldr	r1, [pc, #24]	; (800eb60 <tcp_free_listen+0x30>)
 800eb46:	4807      	ldr	r0, [pc, #28]	; (800eb64 <tcp_free_listen+0x34>)
 800eb48:	f00a fdf4 	bl	8019734 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800eb4c:	6879      	ldr	r1, [r7, #4]
 800eb4e:	2002      	movs	r0, #2
 800eb50:	f7fe fe66 	bl	800d820 <memp_free>
}
 800eb54:	bf00      	nop
 800eb56:	3708      	adds	r7, #8
 800eb58:	46bd      	mov	sp, r7
 800eb5a:	bd80      	pop	{r7, pc}
 800eb5c:	0801adf8 	.word	0x0801adf8
 800eb60:	0801ae64 	.word	0x0801ae64
 800eb64:	0801ae3c 	.word	0x0801ae3c

0800eb68 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800eb68:	b580      	push	{r7, lr}
 800eb6a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800eb6c:	f000 fea2 	bl	800f8b4 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800eb70:	4b07      	ldr	r3, [pc, #28]	; (800eb90 <tcp_tmr+0x28>)
 800eb72:	781b      	ldrb	r3, [r3, #0]
 800eb74:	3301      	adds	r3, #1
 800eb76:	b2da      	uxtb	r2, r3
 800eb78:	4b05      	ldr	r3, [pc, #20]	; (800eb90 <tcp_tmr+0x28>)
 800eb7a:	701a      	strb	r2, [r3, #0]
 800eb7c:	4b04      	ldr	r3, [pc, #16]	; (800eb90 <tcp_tmr+0x28>)
 800eb7e:	781b      	ldrb	r3, [r3, #0]
 800eb80:	f003 0301 	and.w	r3, r3, #1
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d001      	beq.n	800eb8c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800eb88:	f000 fb54 	bl	800f234 <tcp_slowtmr>
  }
}
 800eb8c:	bf00      	nop
 800eb8e:	bd80      	pop	{r7, pc}
 800eb90:	20013839 	.word	0x20013839

0800eb94 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800eb94:	b580      	push	{r7, lr}
 800eb96:	b084      	sub	sp, #16
 800eb98:	af00      	add	r7, sp, #0
 800eb9a:	6078      	str	r0, [r7, #4]
 800eb9c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800eb9e:	683b      	ldr	r3, [r7, #0]
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d105      	bne.n	800ebb0 <tcp_remove_listener+0x1c>
 800eba4:	4b0d      	ldr	r3, [pc, #52]	; (800ebdc <tcp_remove_listener+0x48>)
 800eba6:	22ff      	movs	r2, #255	; 0xff
 800eba8:	490d      	ldr	r1, [pc, #52]	; (800ebe0 <tcp_remove_listener+0x4c>)
 800ebaa:	480e      	ldr	r0, [pc, #56]	; (800ebe4 <tcp_remove_listener+0x50>)
 800ebac:	f00a fdc2 	bl	8019734 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	60fb      	str	r3, [r7, #12]
 800ebb4:	e00a      	b.n	800ebcc <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ebba:	683a      	ldr	r2, [r7, #0]
 800ebbc:	429a      	cmp	r2, r3
 800ebbe:	d102      	bne.n	800ebc6 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	2200      	movs	r2, #0
 800ebc4:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	68db      	ldr	r3, [r3, #12]
 800ebca:	60fb      	str	r3, [r7, #12]
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d1f1      	bne.n	800ebb6 <tcp_remove_listener+0x22>
    }
  }
}
 800ebd2:	bf00      	nop
 800ebd4:	bf00      	nop
 800ebd6:	3710      	adds	r7, #16
 800ebd8:	46bd      	mov	sp, r7
 800ebda:	bd80      	pop	{r7, pc}
 800ebdc:	0801adf8 	.word	0x0801adf8
 800ebe0:	0801ae80 	.word	0x0801ae80
 800ebe4:	0801ae3c 	.word	0x0801ae3c

0800ebe8 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800ebe8:	b580      	push	{r7, lr}
 800ebea:	b084      	sub	sp, #16
 800ebec:	af00      	add	r7, sp, #0
 800ebee:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d106      	bne.n	800ec04 <tcp_listen_closed+0x1c>
 800ebf6:	4b14      	ldr	r3, [pc, #80]	; (800ec48 <tcp_listen_closed+0x60>)
 800ebf8:	f240 1211 	movw	r2, #273	; 0x111
 800ebfc:	4913      	ldr	r1, [pc, #76]	; (800ec4c <tcp_listen_closed+0x64>)
 800ebfe:	4814      	ldr	r0, [pc, #80]	; (800ec50 <tcp_listen_closed+0x68>)
 800ec00:	f00a fd98 	bl	8019734 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	7d1b      	ldrb	r3, [r3, #20]
 800ec08:	2b01      	cmp	r3, #1
 800ec0a:	d006      	beq.n	800ec1a <tcp_listen_closed+0x32>
 800ec0c:	4b0e      	ldr	r3, [pc, #56]	; (800ec48 <tcp_listen_closed+0x60>)
 800ec0e:	f44f 7289 	mov.w	r2, #274	; 0x112
 800ec12:	4910      	ldr	r1, [pc, #64]	; (800ec54 <tcp_listen_closed+0x6c>)
 800ec14:	480e      	ldr	r0, [pc, #56]	; (800ec50 <tcp_listen_closed+0x68>)
 800ec16:	f00a fd8d 	bl	8019734 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800ec1a:	2301      	movs	r3, #1
 800ec1c:	60fb      	str	r3, [r7, #12]
 800ec1e:	e00b      	b.n	800ec38 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800ec20:	4a0d      	ldr	r2, [pc, #52]	; (800ec58 <tcp_listen_closed+0x70>)
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	6879      	ldr	r1, [r7, #4]
 800ec2c:	4618      	mov	r0, r3
 800ec2e:	f7ff ffb1 	bl	800eb94 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	3301      	adds	r3, #1
 800ec36:	60fb      	str	r3, [r7, #12]
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	2b03      	cmp	r3, #3
 800ec3c:	d9f0      	bls.n	800ec20 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800ec3e:	bf00      	nop
 800ec40:	bf00      	nop
 800ec42:	3710      	adds	r7, #16
 800ec44:	46bd      	mov	sp, r7
 800ec46:	bd80      	pop	{r7, pc}
 800ec48:	0801adf8 	.word	0x0801adf8
 800ec4c:	0801aea8 	.word	0x0801aea8
 800ec50:	0801ae3c 	.word	0x0801ae3c
 800ec54:	0801aeb4 	.word	0x0801aeb4
 800ec58:	0801d220 	.word	0x0801d220

0800ec5c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800ec5c:	b5b0      	push	{r4, r5, r7, lr}
 800ec5e:	b088      	sub	sp, #32
 800ec60:	af04      	add	r7, sp, #16
 800ec62:	6078      	str	r0, [r7, #4]
 800ec64:	460b      	mov	r3, r1
 800ec66:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d106      	bne.n	800ec7c <tcp_close_shutdown+0x20>
 800ec6e:	4b63      	ldr	r3, [pc, #396]	; (800edfc <tcp_close_shutdown+0x1a0>)
 800ec70:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800ec74:	4962      	ldr	r1, [pc, #392]	; (800ee00 <tcp_close_shutdown+0x1a4>)
 800ec76:	4863      	ldr	r0, [pc, #396]	; (800ee04 <tcp_close_shutdown+0x1a8>)
 800ec78:	f00a fd5c 	bl	8019734 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800ec7c:	78fb      	ldrb	r3, [r7, #3]
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d066      	beq.n	800ed50 <tcp_close_shutdown+0xf4>
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	7d1b      	ldrb	r3, [r3, #20]
 800ec86:	2b04      	cmp	r3, #4
 800ec88:	d003      	beq.n	800ec92 <tcp_close_shutdown+0x36>
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	7d1b      	ldrb	r3, [r3, #20]
 800ec8e:	2b07      	cmp	r3, #7
 800ec90:	d15e      	bne.n	800ed50 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d104      	bne.n	800eca4 <tcp_close_shutdown+0x48>
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ec9e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800eca2:	d055      	beq.n	800ed50 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	8b5b      	ldrh	r3, [r3, #26]
 800eca8:	f003 0310 	and.w	r3, r3, #16
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d106      	bne.n	800ecbe <tcp_close_shutdown+0x62>
 800ecb0:	4b52      	ldr	r3, [pc, #328]	; (800edfc <tcp_close_shutdown+0x1a0>)
 800ecb2:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800ecb6:	4954      	ldr	r1, [pc, #336]	; (800ee08 <tcp_close_shutdown+0x1ac>)
 800ecb8:	4852      	ldr	r0, [pc, #328]	; (800ee04 <tcp_close_shutdown+0x1a8>)
 800ecba:	f00a fd3b 	bl	8019734 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800ecc6:	687d      	ldr	r5, [r7, #4]
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	3304      	adds	r3, #4
 800eccc:	687a      	ldr	r2, [r7, #4]
 800ecce:	8ad2      	ldrh	r2, [r2, #22]
 800ecd0:	6879      	ldr	r1, [r7, #4]
 800ecd2:	8b09      	ldrh	r1, [r1, #24]
 800ecd4:	9102      	str	r1, [sp, #8]
 800ecd6:	9201      	str	r2, [sp, #4]
 800ecd8:	9300      	str	r3, [sp, #0]
 800ecda:	462b      	mov	r3, r5
 800ecdc:	4622      	mov	r2, r4
 800ecde:	4601      	mov	r1, r0
 800ece0:	6878      	ldr	r0, [r7, #4]
 800ece2:	f004 fe91 	bl	8013a08 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800ece6:	6878      	ldr	r0, [r7, #4]
 800ece8:	f001 f8c6 	bl	800fe78 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800ecec:	4b47      	ldr	r3, [pc, #284]	; (800ee0c <tcp_close_shutdown+0x1b0>)
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	687a      	ldr	r2, [r7, #4]
 800ecf2:	429a      	cmp	r2, r3
 800ecf4:	d105      	bne.n	800ed02 <tcp_close_shutdown+0xa6>
 800ecf6:	4b45      	ldr	r3, [pc, #276]	; (800ee0c <tcp_close_shutdown+0x1b0>)
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	68db      	ldr	r3, [r3, #12]
 800ecfc:	4a43      	ldr	r2, [pc, #268]	; (800ee0c <tcp_close_shutdown+0x1b0>)
 800ecfe:	6013      	str	r3, [r2, #0]
 800ed00:	e013      	b.n	800ed2a <tcp_close_shutdown+0xce>
 800ed02:	4b42      	ldr	r3, [pc, #264]	; (800ee0c <tcp_close_shutdown+0x1b0>)
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	60fb      	str	r3, [r7, #12]
 800ed08:	e00c      	b.n	800ed24 <tcp_close_shutdown+0xc8>
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	68db      	ldr	r3, [r3, #12]
 800ed0e:	687a      	ldr	r2, [r7, #4]
 800ed10:	429a      	cmp	r2, r3
 800ed12:	d104      	bne.n	800ed1e <tcp_close_shutdown+0xc2>
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	68da      	ldr	r2, [r3, #12]
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	60da      	str	r2, [r3, #12]
 800ed1c:	e005      	b.n	800ed2a <tcp_close_shutdown+0xce>
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	68db      	ldr	r3, [r3, #12]
 800ed22:	60fb      	str	r3, [r7, #12]
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d1ef      	bne.n	800ed0a <tcp_close_shutdown+0xae>
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	2200      	movs	r2, #0
 800ed2e:	60da      	str	r2, [r3, #12]
 800ed30:	4b37      	ldr	r3, [pc, #220]	; (800ee10 <tcp_close_shutdown+0x1b4>)
 800ed32:	2201      	movs	r2, #1
 800ed34:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800ed36:	4b37      	ldr	r3, [pc, #220]	; (800ee14 <tcp_close_shutdown+0x1b8>)
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	687a      	ldr	r2, [r7, #4]
 800ed3c:	429a      	cmp	r2, r3
 800ed3e:	d102      	bne.n	800ed46 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800ed40:	f003 fd5e 	bl	8012800 <tcp_trigger_input_pcb_close>
 800ed44:	e002      	b.n	800ed4c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800ed46:	6878      	ldr	r0, [r7, #4]
 800ed48:	f7ff fed6 	bl	800eaf8 <tcp_free>
      }
      return ERR_OK;
 800ed4c:	2300      	movs	r3, #0
 800ed4e:	e050      	b.n	800edf2 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	7d1b      	ldrb	r3, [r3, #20]
 800ed54:	2b02      	cmp	r3, #2
 800ed56:	d03b      	beq.n	800edd0 <tcp_close_shutdown+0x174>
 800ed58:	2b02      	cmp	r3, #2
 800ed5a:	dc44      	bgt.n	800ede6 <tcp_close_shutdown+0x18a>
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d002      	beq.n	800ed66 <tcp_close_shutdown+0x10a>
 800ed60:	2b01      	cmp	r3, #1
 800ed62:	d02a      	beq.n	800edba <tcp_close_shutdown+0x15e>
 800ed64:	e03f      	b.n	800ede6 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	8adb      	ldrh	r3, [r3, #22]
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d021      	beq.n	800edb2 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800ed6e:	4b2a      	ldr	r3, [pc, #168]	; (800ee18 <tcp_close_shutdown+0x1bc>)
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	687a      	ldr	r2, [r7, #4]
 800ed74:	429a      	cmp	r2, r3
 800ed76:	d105      	bne.n	800ed84 <tcp_close_shutdown+0x128>
 800ed78:	4b27      	ldr	r3, [pc, #156]	; (800ee18 <tcp_close_shutdown+0x1bc>)
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	68db      	ldr	r3, [r3, #12]
 800ed7e:	4a26      	ldr	r2, [pc, #152]	; (800ee18 <tcp_close_shutdown+0x1bc>)
 800ed80:	6013      	str	r3, [r2, #0]
 800ed82:	e013      	b.n	800edac <tcp_close_shutdown+0x150>
 800ed84:	4b24      	ldr	r3, [pc, #144]	; (800ee18 <tcp_close_shutdown+0x1bc>)
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	60bb      	str	r3, [r7, #8]
 800ed8a:	e00c      	b.n	800eda6 <tcp_close_shutdown+0x14a>
 800ed8c:	68bb      	ldr	r3, [r7, #8]
 800ed8e:	68db      	ldr	r3, [r3, #12]
 800ed90:	687a      	ldr	r2, [r7, #4]
 800ed92:	429a      	cmp	r2, r3
 800ed94:	d104      	bne.n	800eda0 <tcp_close_shutdown+0x144>
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	68da      	ldr	r2, [r3, #12]
 800ed9a:	68bb      	ldr	r3, [r7, #8]
 800ed9c:	60da      	str	r2, [r3, #12]
 800ed9e:	e005      	b.n	800edac <tcp_close_shutdown+0x150>
 800eda0:	68bb      	ldr	r3, [r7, #8]
 800eda2:	68db      	ldr	r3, [r3, #12]
 800eda4:	60bb      	str	r3, [r7, #8]
 800eda6:	68bb      	ldr	r3, [r7, #8]
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d1ef      	bne.n	800ed8c <tcp_close_shutdown+0x130>
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	2200      	movs	r2, #0
 800edb0:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800edb2:	6878      	ldr	r0, [r7, #4]
 800edb4:	f7ff fea0 	bl	800eaf8 <tcp_free>
      break;
 800edb8:	e01a      	b.n	800edf0 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800edba:	6878      	ldr	r0, [r7, #4]
 800edbc:	f7ff ff14 	bl	800ebe8 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800edc0:	6879      	ldr	r1, [r7, #4]
 800edc2:	4816      	ldr	r0, [pc, #88]	; (800ee1c <tcp_close_shutdown+0x1c0>)
 800edc4:	f001 f8a8 	bl	800ff18 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800edc8:	6878      	ldr	r0, [r7, #4]
 800edca:	f7ff feb1 	bl	800eb30 <tcp_free_listen>
      break;
 800edce:	e00f      	b.n	800edf0 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800edd0:	6879      	ldr	r1, [r7, #4]
 800edd2:	480e      	ldr	r0, [pc, #56]	; (800ee0c <tcp_close_shutdown+0x1b0>)
 800edd4:	f001 f8a0 	bl	800ff18 <tcp_pcb_remove>
 800edd8:	4b0d      	ldr	r3, [pc, #52]	; (800ee10 <tcp_close_shutdown+0x1b4>)
 800edda:	2201      	movs	r2, #1
 800eddc:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800edde:	6878      	ldr	r0, [r7, #4]
 800ede0:	f7ff fe8a 	bl	800eaf8 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800ede4:	e004      	b.n	800edf0 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800ede6:	6878      	ldr	r0, [r7, #4]
 800ede8:	f000 f81a 	bl	800ee20 <tcp_close_shutdown_fin>
 800edec:	4603      	mov	r3, r0
 800edee:	e000      	b.n	800edf2 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800edf0:	2300      	movs	r3, #0
}
 800edf2:	4618      	mov	r0, r3
 800edf4:	3710      	adds	r7, #16
 800edf6:	46bd      	mov	sp, r7
 800edf8:	bdb0      	pop	{r4, r5, r7, pc}
 800edfa:	bf00      	nop
 800edfc:	0801adf8 	.word	0x0801adf8
 800ee00:	0801aecc 	.word	0x0801aecc
 800ee04:	0801ae3c 	.word	0x0801ae3c
 800ee08:	0801aeec 	.word	0x0801aeec
 800ee0c:	2001b660 	.word	0x2001b660
 800ee10:	2001b65c 	.word	0x2001b65c
 800ee14:	2001b674 	.word	0x2001b674
 800ee18:	2001b66c 	.word	0x2001b66c
 800ee1c:	2001b668 	.word	0x2001b668

0800ee20 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800ee20:	b580      	push	{r7, lr}
 800ee22:	b084      	sub	sp, #16
 800ee24:	af00      	add	r7, sp, #0
 800ee26:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d106      	bne.n	800ee3c <tcp_close_shutdown_fin+0x1c>
 800ee2e:	4b2e      	ldr	r3, [pc, #184]	; (800eee8 <tcp_close_shutdown_fin+0xc8>)
 800ee30:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800ee34:	492d      	ldr	r1, [pc, #180]	; (800eeec <tcp_close_shutdown_fin+0xcc>)
 800ee36:	482e      	ldr	r0, [pc, #184]	; (800eef0 <tcp_close_shutdown_fin+0xd0>)
 800ee38:	f00a fc7c 	bl	8019734 <iprintf>

  switch (pcb->state) {
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	7d1b      	ldrb	r3, [r3, #20]
 800ee40:	2b07      	cmp	r3, #7
 800ee42:	d020      	beq.n	800ee86 <tcp_close_shutdown_fin+0x66>
 800ee44:	2b07      	cmp	r3, #7
 800ee46:	dc2b      	bgt.n	800eea0 <tcp_close_shutdown_fin+0x80>
 800ee48:	2b03      	cmp	r3, #3
 800ee4a:	d002      	beq.n	800ee52 <tcp_close_shutdown_fin+0x32>
 800ee4c:	2b04      	cmp	r3, #4
 800ee4e:	d00d      	beq.n	800ee6c <tcp_close_shutdown_fin+0x4c>
 800ee50:	e026      	b.n	800eea0 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800ee52:	6878      	ldr	r0, [r7, #4]
 800ee54:	f003 fee6 	bl	8012c24 <tcp_send_fin>
 800ee58:	4603      	mov	r3, r0
 800ee5a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ee5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d11f      	bne.n	800eea4 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	2205      	movs	r2, #5
 800ee68:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ee6a:	e01b      	b.n	800eea4 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800ee6c:	6878      	ldr	r0, [r7, #4]
 800ee6e:	f003 fed9 	bl	8012c24 <tcp_send_fin>
 800ee72:	4603      	mov	r3, r0
 800ee74:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ee76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d114      	bne.n	800eea8 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	2205      	movs	r2, #5
 800ee82:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ee84:	e010      	b.n	800eea8 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800ee86:	6878      	ldr	r0, [r7, #4]
 800ee88:	f003 fecc 	bl	8012c24 <tcp_send_fin>
 800ee8c:	4603      	mov	r3, r0
 800ee8e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ee90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d109      	bne.n	800eeac <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	2209      	movs	r2, #9
 800ee9c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ee9e:	e005      	b.n	800eeac <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800eea0:	2300      	movs	r3, #0
 800eea2:	e01c      	b.n	800eede <tcp_close_shutdown_fin+0xbe>
      break;
 800eea4:	bf00      	nop
 800eea6:	e002      	b.n	800eeae <tcp_close_shutdown_fin+0x8e>
      break;
 800eea8:	bf00      	nop
 800eeaa:	e000      	b.n	800eeae <tcp_close_shutdown_fin+0x8e>
      break;
 800eeac:	bf00      	nop
  }

  if (err == ERR_OK) {
 800eeae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d103      	bne.n	800eebe <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800eeb6:	6878      	ldr	r0, [r7, #4]
 800eeb8:	f003 fff2 	bl	8012ea0 <tcp_output>
 800eebc:	e00d      	b.n	800eeda <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800eebe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eec6:	d108      	bne.n	800eeda <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	8b5b      	ldrh	r3, [r3, #26]
 800eecc:	f043 0308 	orr.w	r3, r3, #8
 800eed0:	b29a      	uxth	r2, r3
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800eed6:	2300      	movs	r3, #0
 800eed8:	e001      	b.n	800eede <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800eeda:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800eede:	4618      	mov	r0, r3
 800eee0:	3710      	adds	r7, #16
 800eee2:	46bd      	mov	sp, r7
 800eee4:	bd80      	pop	{r7, pc}
 800eee6:	bf00      	nop
 800eee8:	0801adf8 	.word	0x0801adf8
 800eeec:	0801aea8 	.word	0x0801aea8
 800eef0:	0801ae3c 	.word	0x0801ae3c

0800eef4 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800eef4:	b580      	push	{r7, lr}
 800eef6:	b082      	sub	sp, #8
 800eef8:	af00      	add	r7, sp, #0
 800eefa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d109      	bne.n	800ef16 <tcp_close+0x22>
 800ef02:	4b0f      	ldr	r3, [pc, #60]	; (800ef40 <tcp_close+0x4c>)
 800ef04:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800ef08:	490e      	ldr	r1, [pc, #56]	; (800ef44 <tcp_close+0x50>)
 800ef0a:	480f      	ldr	r0, [pc, #60]	; (800ef48 <tcp_close+0x54>)
 800ef0c:	f00a fc12 	bl	8019734 <iprintf>
 800ef10:	f06f 030f 	mvn.w	r3, #15
 800ef14:	e00f      	b.n	800ef36 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	7d1b      	ldrb	r3, [r3, #20]
 800ef1a:	2b01      	cmp	r3, #1
 800ef1c:	d006      	beq.n	800ef2c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	8b5b      	ldrh	r3, [r3, #26]
 800ef22:	f043 0310 	orr.w	r3, r3, #16
 800ef26:	b29a      	uxth	r2, r3
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800ef2c:	2101      	movs	r1, #1
 800ef2e:	6878      	ldr	r0, [r7, #4]
 800ef30:	f7ff fe94 	bl	800ec5c <tcp_close_shutdown>
 800ef34:	4603      	mov	r3, r0
}
 800ef36:	4618      	mov	r0, r3
 800ef38:	3708      	adds	r7, #8
 800ef3a:	46bd      	mov	sp, r7
 800ef3c:	bd80      	pop	{r7, pc}
 800ef3e:	bf00      	nop
 800ef40:	0801adf8 	.word	0x0801adf8
 800ef44:	0801af08 	.word	0x0801af08
 800ef48:	0801ae3c 	.word	0x0801ae3c

0800ef4c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800ef4c:	b580      	push	{r7, lr}
 800ef4e:	b08e      	sub	sp, #56	; 0x38
 800ef50:	af04      	add	r7, sp, #16
 800ef52:	6078      	str	r0, [r7, #4]
 800ef54:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d107      	bne.n	800ef6c <tcp_abandon+0x20>
 800ef5c:	4b52      	ldr	r3, [pc, #328]	; (800f0a8 <tcp_abandon+0x15c>)
 800ef5e:	f240 223d 	movw	r2, #573	; 0x23d
 800ef62:	4952      	ldr	r1, [pc, #328]	; (800f0ac <tcp_abandon+0x160>)
 800ef64:	4852      	ldr	r0, [pc, #328]	; (800f0b0 <tcp_abandon+0x164>)
 800ef66:	f00a fbe5 	bl	8019734 <iprintf>
 800ef6a:	e099      	b.n	800f0a0 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	7d1b      	ldrb	r3, [r3, #20]
 800ef70:	2b01      	cmp	r3, #1
 800ef72:	d106      	bne.n	800ef82 <tcp_abandon+0x36>
 800ef74:	4b4c      	ldr	r3, [pc, #304]	; (800f0a8 <tcp_abandon+0x15c>)
 800ef76:	f44f 7210 	mov.w	r2, #576	; 0x240
 800ef7a:	494e      	ldr	r1, [pc, #312]	; (800f0b4 <tcp_abandon+0x168>)
 800ef7c:	484c      	ldr	r0, [pc, #304]	; (800f0b0 <tcp_abandon+0x164>)
 800ef7e:	f00a fbd9 	bl	8019734 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	7d1b      	ldrb	r3, [r3, #20]
 800ef86:	2b0a      	cmp	r3, #10
 800ef88:	d107      	bne.n	800ef9a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800ef8a:	6879      	ldr	r1, [r7, #4]
 800ef8c:	484a      	ldr	r0, [pc, #296]	; (800f0b8 <tcp_abandon+0x16c>)
 800ef8e:	f000 ffc3 	bl	800ff18 <tcp_pcb_remove>
    tcp_free(pcb);
 800ef92:	6878      	ldr	r0, [r7, #4]
 800ef94:	f7ff fdb0 	bl	800eaf8 <tcp_free>
 800ef98:	e082      	b.n	800f0a0 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800ef9a:	2300      	movs	r3, #0
 800ef9c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800ef9e:	2300      	movs	r3, #0
 800efa0:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800efa6:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efac:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800efb4:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	691b      	ldr	r3, [r3, #16]
 800efba:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	7d1b      	ldrb	r3, [r3, #20]
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d126      	bne.n	800f012 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	8adb      	ldrh	r3, [r3, #22]
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d02e      	beq.n	800f02a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800efcc:	4b3b      	ldr	r3, [pc, #236]	; (800f0bc <tcp_abandon+0x170>)
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	687a      	ldr	r2, [r7, #4]
 800efd2:	429a      	cmp	r2, r3
 800efd4:	d105      	bne.n	800efe2 <tcp_abandon+0x96>
 800efd6:	4b39      	ldr	r3, [pc, #228]	; (800f0bc <tcp_abandon+0x170>)
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	68db      	ldr	r3, [r3, #12]
 800efdc:	4a37      	ldr	r2, [pc, #220]	; (800f0bc <tcp_abandon+0x170>)
 800efde:	6013      	str	r3, [r2, #0]
 800efe0:	e013      	b.n	800f00a <tcp_abandon+0xbe>
 800efe2:	4b36      	ldr	r3, [pc, #216]	; (800f0bc <tcp_abandon+0x170>)
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	61fb      	str	r3, [r7, #28]
 800efe8:	e00c      	b.n	800f004 <tcp_abandon+0xb8>
 800efea:	69fb      	ldr	r3, [r7, #28]
 800efec:	68db      	ldr	r3, [r3, #12]
 800efee:	687a      	ldr	r2, [r7, #4]
 800eff0:	429a      	cmp	r2, r3
 800eff2:	d104      	bne.n	800effe <tcp_abandon+0xb2>
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	68da      	ldr	r2, [r3, #12]
 800eff8:	69fb      	ldr	r3, [r7, #28]
 800effa:	60da      	str	r2, [r3, #12]
 800effc:	e005      	b.n	800f00a <tcp_abandon+0xbe>
 800effe:	69fb      	ldr	r3, [r7, #28]
 800f000:	68db      	ldr	r3, [r3, #12]
 800f002:	61fb      	str	r3, [r7, #28]
 800f004:	69fb      	ldr	r3, [r7, #28]
 800f006:	2b00      	cmp	r3, #0
 800f008:	d1ef      	bne.n	800efea <tcp_abandon+0x9e>
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	2200      	movs	r2, #0
 800f00e:	60da      	str	r2, [r3, #12]
 800f010:	e00b      	b.n	800f02a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800f012:	683b      	ldr	r3, [r7, #0]
 800f014:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	8adb      	ldrh	r3, [r3, #22]
 800f01a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800f01c:	6879      	ldr	r1, [r7, #4]
 800f01e:	4828      	ldr	r0, [pc, #160]	; (800f0c0 <tcp_abandon+0x174>)
 800f020:	f000 ff7a 	bl	800ff18 <tcp_pcb_remove>
 800f024:	4b27      	ldr	r3, [pc, #156]	; (800f0c4 <tcp_abandon+0x178>)
 800f026:	2201      	movs	r2, #1
 800f028:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d004      	beq.n	800f03c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f036:	4618      	mov	r0, r3
 800f038:	f000 fd1c 	bl	800fa74 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f040:	2b00      	cmp	r3, #0
 800f042:	d004      	beq.n	800f04e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f048:	4618      	mov	r0, r3
 800f04a:	f000 fd13 	bl	800fa74 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f052:	2b00      	cmp	r3, #0
 800f054:	d004      	beq.n	800f060 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f05a:	4618      	mov	r0, r3
 800f05c:	f000 fd0a 	bl	800fa74 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800f060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f062:	2b00      	cmp	r3, #0
 800f064:	d00e      	beq.n	800f084 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800f066:	6879      	ldr	r1, [r7, #4]
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	3304      	adds	r3, #4
 800f06c:	687a      	ldr	r2, [r7, #4]
 800f06e:	8b12      	ldrh	r2, [r2, #24]
 800f070:	9202      	str	r2, [sp, #8]
 800f072:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f074:	9201      	str	r2, [sp, #4]
 800f076:	9300      	str	r3, [sp, #0]
 800f078:	460b      	mov	r3, r1
 800f07a:	697a      	ldr	r2, [r7, #20]
 800f07c:	69b9      	ldr	r1, [r7, #24]
 800f07e:	6878      	ldr	r0, [r7, #4]
 800f080:	f004 fcc2 	bl	8013a08 <tcp_rst>
    }
    last_state = pcb->state;
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	7d1b      	ldrb	r3, [r3, #20]
 800f088:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800f08a:	6878      	ldr	r0, [r7, #4]
 800f08c:	f7ff fd34 	bl	800eaf8 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800f090:	693b      	ldr	r3, [r7, #16]
 800f092:	2b00      	cmp	r3, #0
 800f094:	d004      	beq.n	800f0a0 <tcp_abandon+0x154>
 800f096:	693b      	ldr	r3, [r7, #16]
 800f098:	f06f 010c 	mvn.w	r1, #12
 800f09c:	68f8      	ldr	r0, [r7, #12]
 800f09e:	4798      	blx	r3
  }
}
 800f0a0:	3728      	adds	r7, #40	; 0x28
 800f0a2:	46bd      	mov	sp, r7
 800f0a4:	bd80      	pop	{r7, pc}
 800f0a6:	bf00      	nop
 800f0a8:	0801adf8 	.word	0x0801adf8
 800f0ac:	0801af3c 	.word	0x0801af3c
 800f0b0:	0801ae3c 	.word	0x0801ae3c
 800f0b4:	0801af58 	.word	0x0801af58
 800f0b8:	2001b670 	.word	0x2001b670
 800f0bc:	2001b66c 	.word	0x2001b66c
 800f0c0:	2001b660 	.word	0x2001b660
 800f0c4:	2001b65c 	.word	0x2001b65c

0800f0c8 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800f0c8:	b580      	push	{r7, lr}
 800f0ca:	b082      	sub	sp, #8
 800f0cc:	af00      	add	r7, sp, #0
 800f0ce:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800f0d0:	2101      	movs	r1, #1
 800f0d2:	6878      	ldr	r0, [r7, #4]
 800f0d4:	f7ff ff3a 	bl	800ef4c <tcp_abandon>
}
 800f0d8:	bf00      	nop
 800f0da:	3708      	adds	r7, #8
 800f0dc:	46bd      	mov	sp, r7
 800f0de:	bd80      	pop	{r7, pc}

0800f0e0 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800f0e0:	b580      	push	{r7, lr}
 800f0e2:	b084      	sub	sp, #16
 800f0e4:	af00      	add	r7, sp, #0
 800f0e6:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d106      	bne.n	800f0fc <tcp_update_rcv_ann_wnd+0x1c>
 800f0ee:	4b25      	ldr	r3, [pc, #148]	; (800f184 <tcp_update_rcv_ann_wnd+0xa4>)
 800f0f0:	f240 32a6 	movw	r2, #934	; 0x3a6
 800f0f4:	4924      	ldr	r1, [pc, #144]	; (800f188 <tcp_update_rcv_ann_wnd+0xa8>)
 800f0f6:	4825      	ldr	r0, [pc, #148]	; (800f18c <tcp_update_rcv_ann_wnd+0xac>)
 800f0f8:	f00a fb1c 	bl	8019734 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f100:	687a      	ldr	r2, [r7, #4]
 800f102:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800f104:	4413      	add	r3, r2
 800f106:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f10c:	687a      	ldr	r2, [r7, #4]
 800f10e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800f110:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800f114:	bf28      	it	cs
 800f116:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800f11a:	b292      	uxth	r2, r2
 800f11c:	4413      	add	r3, r2
 800f11e:	68fa      	ldr	r2, [r7, #12]
 800f120:	1ad3      	subs	r3, r2, r3
 800f122:	2b00      	cmp	r3, #0
 800f124:	db08      	blt.n	800f138 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f132:	68fa      	ldr	r2, [r7, #12]
 800f134:	1ad3      	subs	r3, r2, r3
 800f136:	e020      	b.n	800f17a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f140:	1ad3      	subs	r3, r2, r3
 800f142:	2b00      	cmp	r3, #0
 800f144:	dd03      	ble.n	800f14e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	2200      	movs	r2, #0
 800f14a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800f14c:	e014      	b.n	800f178 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f156:	1ad3      	subs	r3, r2, r3
 800f158:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800f15a:	68bb      	ldr	r3, [r7, #8]
 800f15c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f160:	d306      	bcc.n	800f170 <tcp_update_rcv_ann_wnd+0x90>
 800f162:	4b08      	ldr	r3, [pc, #32]	; (800f184 <tcp_update_rcv_ann_wnd+0xa4>)
 800f164:	f240 32b6 	movw	r2, #950	; 0x3b6
 800f168:	4909      	ldr	r1, [pc, #36]	; (800f190 <tcp_update_rcv_ann_wnd+0xb0>)
 800f16a:	4808      	ldr	r0, [pc, #32]	; (800f18c <tcp_update_rcv_ann_wnd+0xac>)
 800f16c:	f00a fae2 	bl	8019734 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800f170:	68bb      	ldr	r3, [r7, #8]
 800f172:	b29a      	uxth	r2, r3
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800f178:	2300      	movs	r3, #0
  }
}
 800f17a:	4618      	mov	r0, r3
 800f17c:	3710      	adds	r7, #16
 800f17e:	46bd      	mov	sp, r7
 800f180:	bd80      	pop	{r7, pc}
 800f182:	bf00      	nop
 800f184:	0801adf8 	.word	0x0801adf8
 800f188:	0801b054 	.word	0x0801b054
 800f18c:	0801ae3c 	.word	0x0801ae3c
 800f190:	0801b078 	.word	0x0801b078

0800f194 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800f194:	b580      	push	{r7, lr}
 800f196:	b084      	sub	sp, #16
 800f198:	af00      	add	r7, sp, #0
 800f19a:	6078      	str	r0, [r7, #4]
 800f19c:	460b      	mov	r3, r1
 800f19e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d107      	bne.n	800f1b6 <tcp_recved+0x22>
 800f1a6:	4b1f      	ldr	r3, [pc, #124]	; (800f224 <tcp_recved+0x90>)
 800f1a8:	f240 32cf 	movw	r2, #975	; 0x3cf
 800f1ac:	491e      	ldr	r1, [pc, #120]	; (800f228 <tcp_recved+0x94>)
 800f1ae:	481f      	ldr	r0, [pc, #124]	; (800f22c <tcp_recved+0x98>)
 800f1b0:	f00a fac0 	bl	8019734 <iprintf>
 800f1b4:	e032      	b.n	800f21c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	7d1b      	ldrb	r3, [r3, #20]
 800f1ba:	2b01      	cmp	r3, #1
 800f1bc:	d106      	bne.n	800f1cc <tcp_recved+0x38>
 800f1be:	4b19      	ldr	r3, [pc, #100]	; (800f224 <tcp_recved+0x90>)
 800f1c0:	f240 32d2 	movw	r2, #978	; 0x3d2
 800f1c4:	491a      	ldr	r1, [pc, #104]	; (800f230 <tcp_recved+0x9c>)
 800f1c6:	4819      	ldr	r0, [pc, #100]	; (800f22c <tcp_recved+0x98>)
 800f1c8:	f00a fab4 	bl	8019734 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f1d0:	887b      	ldrh	r3, [r7, #2]
 800f1d2:	4413      	add	r3, r2
 800f1d4:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800f1d6:	89fb      	ldrh	r3, [r7, #14]
 800f1d8:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f1dc:	d804      	bhi.n	800f1e8 <tcp_recved+0x54>
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f1e2:	89fa      	ldrh	r2, [r7, #14]
 800f1e4:	429a      	cmp	r2, r3
 800f1e6:	d204      	bcs.n	800f1f2 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800f1ee:	851a      	strh	r2, [r3, #40]	; 0x28
 800f1f0:	e002      	b.n	800f1f8 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	89fa      	ldrh	r2, [r7, #14]
 800f1f6:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800f1f8:	6878      	ldr	r0, [r7, #4]
 800f1fa:	f7ff ff71 	bl	800f0e0 <tcp_update_rcv_ann_wnd>
 800f1fe:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800f200:	68bb      	ldr	r3, [r7, #8]
 800f202:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800f206:	d309      	bcc.n	800f21c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	8b5b      	ldrh	r3, [r3, #26]
 800f20c:	f043 0302 	orr.w	r3, r3, #2
 800f210:	b29a      	uxth	r2, r3
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f216:	6878      	ldr	r0, [r7, #4]
 800f218:	f003 fe42 	bl	8012ea0 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800f21c:	3710      	adds	r7, #16
 800f21e:	46bd      	mov	sp, r7
 800f220:	bd80      	pop	{r7, pc}
 800f222:	bf00      	nop
 800f224:	0801adf8 	.word	0x0801adf8
 800f228:	0801b094 	.word	0x0801b094
 800f22c:	0801ae3c 	.word	0x0801ae3c
 800f230:	0801b0ac 	.word	0x0801b0ac

0800f234 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800f234:	b5b0      	push	{r4, r5, r7, lr}
 800f236:	b090      	sub	sp, #64	; 0x40
 800f238:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800f23a:	2300      	movs	r3, #0
 800f23c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800f240:	4b94      	ldr	r3, [pc, #592]	; (800f494 <tcp_slowtmr+0x260>)
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	3301      	adds	r3, #1
 800f246:	4a93      	ldr	r2, [pc, #588]	; (800f494 <tcp_slowtmr+0x260>)
 800f248:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800f24a:	4b93      	ldr	r3, [pc, #588]	; (800f498 <tcp_slowtmr+0x264>)
 800f24c:	781b      	ldrb	r3, [r3, #0]
 800f24e:	3301      	adds	r3, #1
 800f250:	b2da      	uxtb	r2, r3
 800f252:	4b91      	ldr	r3, [pc, #580]	; (800f498 <tcp_slowtmr+0x264>)
 800f254:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800f256:	2300      	movs	r3, #0
 800f258:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800f25a:	4b90      	ldr	r3, [pc, #576]	; (800f49c <tcp_slowtmr+0x268>)
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800f260:	e29f      	b.n	800f7a2 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800f262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f264:	7d1b      	ldrb	r3, [r3, #20]
 800f266:	2b00      	cmp	r3, #0
 800f268:	d106      	bne.n	800f278 <tcp_slowtmr+0x44>
 800f26a:	4b8d      	ldr	r3, [pc, #564]	; (800f4a0 <tcp_slowtmr+0x26c>)
 800f26c:	f240 42be 	movw	r2, #1214	; 0x4be
 800f270:	498c      	ldr	r1, [pc, #560]	; (800f4a4 <tcp_slowtmr+0x270>)
 800f272:	488d      	ldr	r0, [pc, #564]	; (800f4a8 <tcp_slowtmr+0x274>)
 800f274:	f00a fa5e 	bl	8019734 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800f278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f27a:	7d1b      	ldrb	r3, [r3, #20]
 800f27c:	2b01      	cmp	r3, #1
 800f27e:	d106      	bne.n	800f28e <tcp_slowtmr+0x5a>
 800f280:	4b87      	ldr	r3, [pc, #540]	; (800f4a0 <tcp_slowtmr+0x26c>)
 800f282:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800f286:	4989      	ldr	r1, [pc, #548]	; (800f4ac <tcp_slowtmr+0x278>)
 800f288:	4887      	ldr	r0, [pc, #540]	; (800f4a8 <tcp_slowtmr+0x274>)
 800f28a:	f00a fa53 	bl	8019734 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800f28e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f290:	7d1b      	ldrb	r3, [r3, #20]
 800f292:	2b0a      	cmp	r3, #10
 800f294:	d106      	bne.n	800f2a4 <tcp_slowtmr+0x70>
 800f296:	4b82      	ldr	r3, [pc, #520]	; (800f4a0 <tcp_slowtmr+0x26c>)
 800f298:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800f29c:	4984      	ldr	r1, [pc, #528]	; (800f4b0 <tcp_slowtmr+0x27c>)
 800f29e:	4882      	ldr	r0, [pc, #520]	; (800f4a8 <tcp_slowtmr+0x274>)
 800f2a0:	f00a fa48 	bl	8019734 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800f2a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2a6:	7f9a      	ldrb	r2, [r3, #30]
 800f2a8:	4b7b      	ldr	r3, [pc, #492]	; (800f498 <tcp_slowtmr+0x264>)
 800f2aa:	781b      	ldrb	r3, [r3, #0]
 800f2ac:	429a      	cmp	r2, r3
 800f2ae:	d105      	bne.n	800f2bc <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800f2b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2b2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800f2b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2b6:	68db      	ldr	r3, [r3, #12]
 800f2b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800f2ba:	e272      	b.n	800f7a2 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800f2bc:	4b76      	ldr	r3, [pc, #472]	; (800f498 <tcp_slowtmr+0x264>)
 800f2be:	781a      	ldrb	r2, [r3, #0]
 800f2c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2c2:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800f2c4:	2300      	movs	r3, #0
 800f2c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800f2ca:	2300      	movs	r3, #0
 800f2cc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800f2d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2d2:	7d1b      	ldrb	r3, [r3, #20]
 800f2d4:	2b02      	cmp	r3, #2
 800f2d6:	d10a      	bne.n	800f2ee <tcp_slowtmr+0xba>
 800f2d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f2de:	2b05      	cmp	r3, #5
 800f2e0:	d905      	bls.n	800f2ee <tcp_slowtmr+0xba>
      ++pcb_remove;
 800f2e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f2e6:	3301      	adds	r3, #1
 800f2e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f2ec:	e11e      	b.n	800f52c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800f2ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2f0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f2f4:	2b0b      	cmp	r3, #11
 800f2f6:	d905      	bls.n	800f304 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800f2f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f2fc:	3301      	adds	r3, #1
 800f2fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f302:	e113      	b.n	800f52c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800f304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f306:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d075      	beq.n	800f3fa <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800f30e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f312:	2b00      	cmp	r3, #0
 800f314:	d006      	beq.n	800f324 <tcp_slowtmr+0xf0>
 800f316:	4b62      	ldr	r3, [pc, #392]	; (800f4a0 <tcp_slowtmr+0x26c>)
 800f318:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800f31c:	4965      	ldr	r1, [pc, #404]	; (800f4b4 <tcp_slowtmr+0x280>)
 800f31e:	4862      	ldr	r0, [pc, #392]	; (800f4a8 <tcp_slowtmr+0x274>)
 800f320:	f00a fa08 	bl	8019734 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800f324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f326:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d106      	bne.n	800f33a <tcp_slowtmr+0x106>
 800f32c:	4b5c      	ldr	r3, [pc, #368]	; (800f4a0 <tcp_slowtmr+0x26c>)
 800f32e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800f332:	4961      	ldr	r1, [pc, #388]	; (800f4b8 <tcp_slowtmr+0x284>)
 800f334:	485c      	ldr	r0, [pc, #368]	; (800f4a8 <tcp_slowtmr+0x274>)
 800f336:	f00a f9fd 	bl	8019734 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800f33a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f33c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800f340:	2b0b      	cmp	r3, #11
 800f342:	d905      	bls.n	800f350 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800f344:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f348:	3301      	adds	r3, #1
 800f34a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f34e:	e0ed      	b.n	800f52c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800f350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f352:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f356:	3b01      	subs	r3, #1
 800f358:	4a58      	ldr	r2, [pc, #352]	; (800f4bc <tcp_slowtmr+0x288>)
 800f35a:	5cd3      	ldrb	r3, [r2, r3]
 800f35c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800f35e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f360:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800f364:	7c7a      	ldrb	r2, [r7, #17]
 800f366:	429a      	cmp	r2, r3
 800f368:	d907      	bls.n	800f37a <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800f36a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f36c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800f370:	3301      	adds	r3, #1
 800f372:	b2da      	uxtb	r2, r3
 800f374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f376:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800f37a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f37c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800f380:	7c7a      	ldrb	r2, [r7, #17]
 800f382:	429a      	cmp	r2, r3
 800f384:	f200 80d2 	bhi.w	800f52c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800f388:	2301      	movs	r3, #1
 800f38a:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800f38c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f38e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f392:	2b00      	cmp	r3, #0
 800f394:	d108      	bne.n	800f3a8 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800f396:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f398:	f004 fc2a 	bl	8013bf0 <tcp_zero_window_probe>
 800f39c:	4603      	mov	r3, r0
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d014      	beq.n	800f3cc <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800f3a2:	2300      	movs	r3, #0
 800f3a4:	623b      	str	r3, [r7, #32]
 800f3a6:	e011      	b.n	800f3cc <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800f3a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3aa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f3ae:	4619      	mov	r1, r3
 800f3b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f3b2:	f003 faef 	bl	8012994 <tcp_split_unsent_seg>
 800f3b6:	4603      	mov	r3, r0
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d107      	bne.n	800f3cc <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800f3bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f3be:	f003 fd6f 	bl	8012ea0 <tcp_output>
 800f3c2:	4603      	mov	r3, r0
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d101      	bne.n	800f3cc <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800f3c8:	2300      	movs	r3, #0
 800f3ca:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800f3cc:	6a3b      	ldr	r3, [r7, #32]
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	f000 80ac 	beq.w	800f52c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800f3d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3d6:	2200      	movs	r2, #0
 800f3d8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800f3dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3de:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f3e2:	2b06      	cmp	r3, #6
 800f3e4:	f200 80a2 	bhi.w	800f52c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800f3e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3ea:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f3ee:	3301      	adds	r3, #1
 800f3f0:	b2da      	uxtb	r2, r3
 800f3f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3f4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800f3f8:	e098      	b.n	800f52c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800f3fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3fc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f400:	2b00      	cmp	r3, #0
 800f402:	db0f      	blt.n	800f424 <tcp_slowtmr+0x1f0>
 800f404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f406:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f40a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800f40e:	4293      	cmp	r3, r2
 800f410:	d008      	beq.n	800f424 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800f412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f414:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f418:	b29b      	uxth	r3, r3
 800f41a:	3301      	adds	r3, #1
 800f41c:	b29b      	uxth	r3, r3
 800f41e:	b21a      	sxth	r2, r3
 800f420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f422:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800f424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f426:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800f42a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f42c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800f430:	429a      	cmp	r2, r3
 800f432:	db7b      	blt.n	800f52c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800f434:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f436:	f004 f825 	bl	8013484 <tcp_rexmit_rto_prepare>
 800f43a:	4603      	mov	r3, r0
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d007      	beq.n	800f450 <tcp_slowtmr+0x21c>
 800f440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f444:	2b00      	cmp	r3, #0
 800f446:	d171      	bne.n	800f52c <tcp_slowtmr+0x2f8>
 800f448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f44a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d06d      	beq.n	800f52c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800f450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f452:	7d1b      	ldrb	r3, [r3, #20]
 800f454:	2b02      	cmp	r3, #2
 800f456:	d03a      	beq.n	800f4ce <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800f458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f45a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f45e:	2b0c      	cmp	r3, #12
 800f460:	bf28      	it	cs
 800f462:	230c      	movcs	r3, #12
 800f464:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800f466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f468:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f46c:	10db      	asrs	r3, r3, #3
 800f46e:	b21b      	sxth	r3, r3
 800f470:	461a      	mov	r2, r3
 800f472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f474:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f478:	4413      	add	r3, r2
 800f47a:	7efa      	ldrb	r2, [r7, #27]
 800f47c:	4910      	ldr	r1, [pc, #64]	; (800f4c0 <tcp_slowtmr+0x28c>)
 800f47e:	5c8a      	ldrb	r2, [r1, r2]
 800f480:	4093      	lsls	r3, r2
 800f482:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800f484:	697b      	ldr	r3, [r7, #20]
 800f486:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800f48a:	4293      	cmp	r3, r2
 800f48c:	dc1a      	bgt.n	800f4c4 <tcp_slowtmr+0x290>
 800f48e:	697b      	ldr	r3, [r7, #20]
 800f490:	b21a      	sxth	r2, r3
 800f492:	e019      	b.n	800f4c8 <tcp_slowtmr+0x294>
 800f494:	2001b664 	.word	0x2001b664
 800f498:	2001383a 	.word	0x2001383a
 800f49c:	2001b660 	.word	0x2001b660
 800f4a0:	0801adf8 	.word	0x0801adf8
 800f4a4:	0801b13c 	.word	0x0801b13c
 800f4a8:	0801ae3c 	.word	0x0801ae3c
 800f4ac:	0801b168 	.word	0x0801b168
 800f4b0:	0801b194 	.word	0x0801b194
 800f4b4:	0801b1c4 	.word	0x0801b1c4
 800f4b8:	0801b1f8 	.word	0x0801b1f8
 800f4bc:	0801d218 	.word	0x0801d218
 800f4c0:	0801d208 	.word	0x0801d208
 800f4c4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800f4c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4ca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800f4ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4d0:	2200      	movs	r2, #0
 800f4d2:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800f4d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4d6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f4da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4dc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f4e0:	4293      	cmp	r3, r2
 800f4e2:	bf28      	it	cs
 800f4e4:	4613      	movcs	r3, r2
 800f4e6:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800f4e8:	8a7b      	ldrh	r3, [r7, #18]
 800f4ea:	085b      	lsrs	r3, r3, #1
 800f4ec:	b29a      	uxth	r2, r3
 800f4ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4f0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800f4f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4f6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f4fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f4fe:	005b      	lsls	r3, r3, #1
 800f500:	b29b      	uxth	r3, r3
 800f502:	429a      	cmp	r2, r3
 800f504:	d206      	bcs.n	800f514 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800f506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f508:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f50a:	005b      	lsls	r3, r3, #1
 800f50c:	b29a      	uxth	r2, r3
 800f50e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f510:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800f514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f516:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800f518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f51a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800f51e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f520:	2200      	movs	r2, #0
 800f522:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800f526:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f528:	f004 f81c 	bl	8013564 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800f52c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f52e:	7d1b      	ldrb	r3, [r3, #20]
 800f530:	2b06      	cmp	r3, #6
 800f532:	d111      	bne.n	800f558 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800f534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f536:	8b5b      	ldrh	r3, [r3, #26]
 800f538:	f003 0310 	and.w	r3, r3, #16
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d00b      	beq.n	800f558 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f540:	4b9d      	ldr	r3, [pc, #628]	; (800f7b8 <tcp_slowtmr+0x584>)
 800f542:	681a      	ldr	r2, [r3, #0]
 800f544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f546:	6a1b      	ldr	r3, [r3, #32]
 800f548:	1ad3      	subs	r3, r2, r3
 800f54a:	2b28      	cmp	r3, #40	; 0x28
 800f54c:	d904      	bls.n	800f558 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800f54e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f552:	3301      	adds	r3, #1
 800f554:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800f558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f55a:	7a5b      	ldrb	r3, [r3, #9]
 800f55c:	f003 0308 	and.w	r3, r3, #8
 800f560:	2b00      	cmp	r3, #0
 800f562:	d04c      	beq.n	800f5fe <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800f564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f566:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800f568:	2b04      	cmp	r3, #4
 800f56a:	d003      	beq.n	800f574 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800f56c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f56e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800f570:	2b07      	cmp	r3, #7
 800f572:	d144      	bne.n	800f5fe <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f574:	4b90      	ldr	r3, [pc, #576]	; (800f7b8 <tcp_slowtmr+0x584>)
 800f576:	681a      	ldr	r2, [r3, #0]
 800f578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f57a:	6a1b      	ldr	r3, [r3, #32]
 800f57c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800f57e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f580:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f584:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800f588:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800f58c:	498b      	ldr	r1, [pc, #556]	; (800f7bc <tcp_slowtmr+0x588>)
 800f58e:	fba1 1303 	umull	r1, r3, r1, r3
 800f592:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f594:	429a      	cmp	r2, r3
 800f596:	d90a      	bls.n	800f5ae <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800f598:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f59c:	3301      	adds	r3, #1
 800f59e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800f5a2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f5a6:	3301      	adds	r3, #1
 800f5a8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f5ac:	e027      	b.n	800f5fe <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f5ae:	4b82      	ldr	r3, [pc, #520]	; (800f7b8 <tcp_slowtmr+0x584>)
 800f5b0:	681a      	ldr	r2, [r3, #0]
 800f5b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5b4:	6a1b      	ldr	r3, [r3, #32]
 800f5b6:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800f5b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5ba:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800f5be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5c0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800f5c4:	4618      	mov	r0, r3
 800f5c6:	4b7e      	ldr	r3, [pc, #504]	; (800f7c0 <tcp_slowtmr+0x58c>)
 800f5c8:	fb00 f303 	mul.w	r3, r0, r3
 800f5cc:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800f5ce:	497b      	ldr	r1, [pc, #492]	; (800f7bc <tcp_slowtmr+0x588>)
 800f5d0:	fba1 1303 	umull	r1, r3, r1, r3
 800f5d4:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f5d6:	429a      	cmp	r2, r3
 800f5d8:	d911      	bls.n	800f5fe <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800f5da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f5dc:	f004 fac8 	bl	8013b70 <tcp_keepalive>
 800f5e0:	4603      	mov	r3, r0
 800f5e2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800f5e6:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d107      	bne.n	800f5fe <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800f5ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5f0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800f5f4:	3301      	adds	r3, #1
 800f5f6:	b2da      	uxtb	r2, r3
 800f5f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5fa:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800f5fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f600:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f602:	2b00      	cmp	r3, #0
 800f604:	d011      	beq.n	800f62a <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800f606:	4b6c      	ldr	r3, [pc, #432]	; (800f7b8 <tcp_slowtmr+0x584>)
 800f608:	681a      	ldr	r2, [r3, #0]
 800f60a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f60c:	6a1b      	ldr	r3, [r3, #32]
 800f60e:	1ad2      	subs	r2, r2, r3
 800f610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f612:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800f616:	4619      	mov	r1, r3
 800f618:	460b      	mov	r3, r1
 800f61a:	005b      	lsls	r3, r3, #1
 800f61c:	440b      	add	r3, r1
 800f61e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800f620:	429a      	cmp	r2, r3
 800f622:	d302      	bcc.n	800f62a <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800f624:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f626:	f000 fddb 	bl	80101e0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800f62a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f62c:	7d1b      	ldrb	r3, [r3, #20]
 800f62e:	2b03      	cmp	r3, #3
 800f630:	d10b      	bne.n	800f64a <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f632:	4b61      	ldr	r3, [pc, #388]	; (800f7b8 <tcp_slowtmr+0x584>)
 800f634:	681a      	ldr	r2, [r3, #0]
 800f636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f638:	6a1b      	ldr	r3, [r3, #32]
 800f63a:	1ad3      	subs	r3, r2, r3
 800f63c:	2b28      	cmp	r3, #40	; 0x28
 800f63e:	d904      	bls.n	800f64a <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800f640:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f644:	3301      	adds	r3, #1
 800f646:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800f64a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f64c:	7d1b      	ldrb	r3, [r3, #20]
 800f64e:	2b09      	cmp	r3, #9
 800f650:	d10b      	bne.n	800f66a <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800f652:	4b59      	ldr	r3, [pc, #356]	; (800f7b8 <tcp_slowtmr+0x584>)
 800f654:	681a      	ldr	r2, [r3, #0]
 800f656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f658:	6a1b      	ldr	r3, [r3, #32]
 800f65a:	1ad3      	subs	r3, r2, r3
 800f65c:	2bf0      	cmp	r3, #240	; 0xf0
 800f65e:	d904      	bls.n	800f66a <tcp_slowtmr+0x436>
        ++pcb_remove;
 800f660:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f664:	3301      	adds	r3, #1
 800f666:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800f66a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d060      	beq.n	800f734 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800f672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f674:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f678:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800f67a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f67c:	f000 fbfc 	bl	800fe78 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800f680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f682:	2b00      	cmp	r3, #0
 800f684:	d010      	beq.n	800f6a8 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800f686:	4b4f      	ldr	r3, [pc, #316]	; (800f7c4 <tcp_slowtmr+0x590>)
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f68c:	429a      	cmp	r2, r3
 800f68e:	d106      	bne.n	800f69e <tcp_slowtmr+0x46a>
 800f690:	4b4d      	ldr	r3, [pc, #308]	; (800f7c8 <tcp_slowtmr+0x594>)
 800f692:	f240 526d 	movw	r2, #1389	; 0x56d
 800f696:	494d      	ldr	r1, [pc, #308]	; (800f7cc <tcp_slowtmr+0x598>)
 800f698:	484d      	ldr	r0, [pc, #308]	; (800f7d0 <tcp_slowtmr+0x59c>)
 800f69a:	f00a f84b 	bl	8019734 <iprintf>
        prev->next = pcb->next;
 800f69e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6a0:	68da      	ldr	r2, [r3, #12]
 800f6a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6a4:	60da      	str	r2, [r3, #12]
 800f6a6:	e00f      	b.n	800f6c8 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800f6a8:	4b46      	ldr	r3, [pc, #280]	; (800f7c4 <tcp_slowtmr+0x590>)
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f6ae:	429a      	cmp	r2, r3
 800f6b0:	d006      	beq.n	800f6c0 <tcp_slowtmr+0x48c>
 800f6b2:	4b45      	ldr	r3, [pc, #276]	; (800f7c8 <tcp_slowtmr+0x594>)
 800f6b4:	f240 5271 	movw	r2, #1393	; 0x571
 800f6b8:	4946      	ldr	r1, [pc, #280]	; (800f7d4 <tcp_slowtmr+0x5a0>)
 800f6ba:	4845      	ldr	r0, [pc, #276]	; (800f7d0 <tcp_slowtmr+0x59c>)
 800f6bc:	f00a f83a 	bl	8019734 <iprintf>
        tcp_active_pcbs = pcb->next;
 800f6c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6c2:	68db      	ldr	r3, [r3, #12]
 800f6c4:	4a3f      	ldr	r2, [pc, #252]	; (800f7c4 <tcp_slowtmr+0x590>)
 800f6c6:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800f6c8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d013      	beq.n	800f6f8 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800f6d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6d2:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800f6d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6d6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800f6d8:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800f6da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6dc:	3304      	adds	r3, #4
 800f6de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f6e0:	8ad2      	ldrh	r2, [r2, #22]
 800f6e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f6e4:	8b09      	ldrh	r1, [r1, #24]
 800f6e6:	9102      	str	r1, [sp, #8]
 800f6e8:	9201      	str	r2, [sp, #4]
 800f6ea:	9300      	str	r3, [sp, #0]
 800f6ec:	462b      	mov	r3, r5
 800f6ee:	4622      	mov	r2, r4
 800f6f0:	4601      	mov	r1, r0
 800f6f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f6f4:	f004 f988 	bl	8013a08 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800f6f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6fa:	691b      	ldr	r3, [r3, #16]
 800f6fc:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800f6fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f700:	7d1b      	ldrb	r3, [r3, #20]
 800f702:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800f704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f706:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800f708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f70a:	68db      	ldr	r3, [r3, #12]
 800f70c:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800f70e:	6838      	ldr	r0, [r7, #0]
 800f710:	f7ff f9f2 	bl	800eaf8 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800f714:	4b30      	ldr	r3, [pc, #192]	; (800f7d8 <tcp_slowtmr+0x5a4>)
 800f716:	2200      	movs	r2, #0
 800f718:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d004      	beq.n	800f72a <tcp_slowtmr+0x4f6>
 800f720:	68fb      	ldr	r3, [r7, #12]
 800f722:	f06f 010c 	mvn.w	r1, #12
 800f726:	68b8      	ldr	r0, [r7, #8]
 800f728:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800f72a:	4b2b      	ldr	r3, [pc, #172]	; (800f7d8 <tcp_slowtmr+0x5a4>)
 800f72c:	781b      	ldrb	r3, [r3, #0]
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d037      	beq.n	800f7a2 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800f732:	e590      	b.n	800f256 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800f734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f736:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800f738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f73a:	68db      	ldr	r3, [r3, #12]
 800f73c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800f73e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f740:	7f1b      	ldrb	r3, [r3, #28]
 800f742:	3301      	adds	r3, #1
 800f744:	b2da      	uxtb	r2, r3
 800f746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f748:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800f74a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f74c:	7f1a      	ldrb	r2, [r3, #28]
 800f74e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f750:	7f5b      	ldrb	r3, [r3, #29]
 800f752:	429a      	cmp	r2, r3
 800f754:	d325      	bcc.n	800f7a2 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800f756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f758:	2200      	movs	r2, #0
 800f75a:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800f75c:	4b1e      	ldr	r3, [pc, #120]	; (800f7d8 <tcp_slowtmr+0x5a4>)
 800f75e:	2200      	movs	r2, #0
 800f760:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800f762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f764:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d00b      	beq.n	800f784 <tcp_slowtmr+0x550>
 800f76c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f76e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f772:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f774:	6912      	ldr	r2, [r2, #16]
 800f776:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f778:	4610      	mov	r0, r2
 800f77a:	4798      	blx	r3
 800f77c:	4603      	mov	r3, r0
 800f77e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800f782:	e002      	b.n	800f78a <tcp_slowtmr+0x556>
 800f784:	2300      	movs	r3, #0
 800f786:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800f78a:	4b13      	ldr	r3, [pc, #76]	; (800f7d8 <tcp_slowtmr+0x5a4>)
 800f78c:	781b      	ldrb	r3, [r3, #0]
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d000      	beq.n	800f794 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800f792:	e560      	b.n	800f256 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800f794:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800f798:	2b00      	cmp	r3, #0
 800f79a:	d102      	bne.n	800f7a2 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800f79c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f79e:	f003 fb7f 	bl	8012ea0 <tcp_output>
  while (pcb != NULL) {
 800f7a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	f47f ad5c 	bne.w	800f262 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800f7aa:	2300      	movs	r3, #0
 800f7ac:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800f7ae:	4b0b      	ldr	r3, [pc, #44]	; (800f7dc <tcp_slowtmr+0x5a8>)
 800f7b0:	681b      	ldr	r3, [r3, #0]
 800f7b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800f7b4:	e067      	b.n	800f886 <tcp_slowtmr+0x652>
 800f7b6:	bf00      	nop
 800f7b8:	2001b664 	.word	0x2001b664
 800f7bc:	10624dd3 	.word	0x10624dd3
 800f7c0:	000124f8 	.word	0x000124f8
 800f7c4:	2001b660 	.word	0x2001b660
 800f7c8:	0801adf8 	.word	0x0801adf8
 800f7cc:	0801b230 	.word	0x0801b230
 800f7d0:	0801ae3c 	.word	0x0801ae3c
 800f7d4:	0801b25c 	.word	0x0801b25c
 800f7d8:	2001b65c 	.word	0x2001b65c
 800f7dc:	2001b670 	.word	0x2001b670
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f7e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7e2:	7d1b      	ldrb	r3, [r3, #20]
 800f7e4:	2b0a      	cmp	r3, #10
 800f7e6:	d006      	beq.n	800f7f6 <tcp_slowtmr+0x5c2>
 800f7e8:	4b2b      	ldr	r3, [pc, #172]	; (800f898 <tcp_slowtmr+0x664>)
 800f7ea:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800f7ee:	492b      	ldr	r1, [pc, #172]	; (800f89c <tcp_slowtmr+0x668>)
 800f7f0:	482b      	ldr	r0, [pc, #172]	; (800f8a0 <tcp_slowtmr+0x66c>)
 800f7f2:	f009 ff9f 	bl	8019734 <iprintf>
    pcb_remove = 0;
 800f7f6:	2300      	movs	r3, #0
 800f7f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800f7fc:	4b29      	ldr	r3, [pc, #164]	; (800f8a4 <tcp_slowtmr+0x670>)
 800f7fe:	681a      	ldr	r2, [r3, #0]
 800f800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f802:	6a1b      	ldr	r3, [r3, #32]
 800f804:	1ad3      	subs	r3, r2, r3
 800f806:	2bf0      	cmp	r3, #240	; 0xf0
 800f808:	d904      	bls.n	800f814 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800f80a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f80e:	3301      	adds	r3, #1
 800f810:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800f814:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d02f      	beq.n	800f87c <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800f81c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f81e:	f000 fb2b 	bl	800fe78 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800f822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f824:	2b00      	cmp	r3, #0
 800f826:	d010      	beq.n	800f84a <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800f828:	4b1f      	ldr	r3, [pc, #124]	; (800f8a8 <tcp_slowtmr+0x674>)
 800f82a:	681b      	ldr	r3, [r3, #0]
 800f82c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f82e:	429a      	cmp	r2, r3
 800f830:	d106      	bne.n	800f840 <tcp_slowtmr+0x60c>
 800f832:	4b19      	ldr	r3, [pc, #100]	; (800f898 <tcp_slowtmr+0x664>)
 800f834:	f240 52af 	movw	r2, #1455	; 0x5af
 800f838:	491c      	ldr	r1, [pc, #112]	; (800f8ac <tcp_slowtmr+0x678>)
 800f83a:	4819      	ldr	r0, [pc, #100]	; (800f8a0 <tcp_slowtmr+0x66c>)
 800f83c:	f009 ff7a 	bl	8019734 <iprintf>
        prev->next = pcb->next;
 800f840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f842:	68da      	ldr	r2, [r3, #12]
 800f844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f846:	60da      	str	r2, [r3, #12]
 800f848:	e00f      	b.n	800f86a <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800f84a:	4b17      	ldr	r3, [pc, #92]	; (800f8a8 <tcp_slowtmr+0x674>)
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f850:	429a      	cmp	r2, r3
 800f852:	d006      	beq.n	800f862 <tcp_slowtmr+0x62e>
 800f854:	4b10      	ldr	r3, [pc, #64]	; (800f898 <tcp_slowtmr+0x664>)
 800f856:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800f85a:	4915      	ldr	r1, [pc, #84]	; (800f8b0 <tcp_slowtmr+0x67c>)
 800f85c:	4810      	ldr	r0, [pc, #64]	; (800f8a0 <tcp_slowtmr+0x66c>)
 800f85e:	f009 ff69 	bl	8019734 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800f862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f864:	68db      	ldr	r3, [r3, #12]
 800f866:	4a10      	ldr	r2, [pc, #64]	; (800f8a8 <tcp_slowtmr+0x674>)
 800f868:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800f86a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f86c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800f86e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f870:	68db      	ldr	r3, [r3, #12]
 800f872:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800f874:	69f8      	ldr	r0, [r7, #28]
 800f876:	f7ff f93f 	bl	800eaf8 <tcp_free>
 800f87a:	e004      	b.n	800f886 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800f87c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f87e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800f880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f882:	68db      	ldr	r3, [r3, #12]
 800f884:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800f886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d1a9      	bne.n	800f7e0 <tcp_slowtmr+0x5ac>
    }
  }
}
 800f88c:	bf00      	nop
 800f88e:	bf00      	nop
 800f890:	3730      	adds	r7, #48	; 0x30
 800f892:	46bd      	mov	sp, r7
 800f894:	bdb0      	pop	{r4, r5, r7, pc}
 800f896:	bf00      	nop
 800f898:	0801adf8 	.word	0x0801adf8
 800f89c:	0801b288 	.word	0x0801b288
 800f8a0:	0801ae3c 	.word	0x0801ae3c
 800f8a4:	2001b664 	.word	0x2001b664
 800f8a8:	2001b670 	.word	0x2001b670
 800f8ac:	0801b2b8 	.word	0x0801b2b8
 800f8b0:	0801b2e0 	.word	0x0801b2e0

0800f8b4 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800f8b4:	b580      	push	{r7, lr}
 800f8b6:	b082      	sub	sp, #8
 800f8b8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800f8ba:	4b2d      	ldr	r3, [pc, #180]	; (800f970 <tcp_fasttmr+0xbc>)
 800f8bc:	781b      	ldrb	r3, [r3, #0]
 800f8be:	3301      	adds	r3, #1
 800f8c0:	b2da      	uxtb	r2, r3
 800f8c2:	4b2b      	ldr	r3, [pc, #172]	; (800f970 <tcp_fasttmr+0xbc>)
 800f8c4:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800f8c6:	4b2b      	ldr	r3, [pc, #172]	; (800f974 <tcp_fasttmr+0xc0>)
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800f8cc:	e048      	b.n	800f960 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	7f9a      	ldrb	r2, [r3, #30]
 800f8d2:	4b27      	ldr	r3, [pc, #156]	; (800f970 <tcp_fasttmr+0xbc>)
 800f8d4:	781b      	ldrb	r3, [r3, #0]
 800f8d6:	429a      	cmp	r2, r3
 800f8d8:	d03f      	beq.n	800f95a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800f8da:	4b25      	ldr	r3, [pc, #148]	; (800f970 <tcp_fasttmr+0xbc>)
 800f8dc:	781a      	ldrb	r2, [r3, #0]
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	8b5b      	ldrh	r3, [r3, #26]
 800f8e6:	f003 0301 	and.w	r3, r3, #1
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d010      	beq.n	800f910 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	8b5b      	ldrh	r3, [r3, #26]
 800f8f2:	f043 0302 	orr.w	r3, r3, #2
 800f8f6:	b29a      	uxth	r2, r3
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800f8fc:	6878      	ldr	r0, [r7, #4]
 800f8fe:	f003 facf 	bl	8012ea0 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	8b5b      	ldrh	r3, [r3, #26]
 800f906:	f023 0303 	bic.w	r3, r3, #3
 800f90a:	b29a      	uxth	r2, r3
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	8b5b      	ldrh	r3, [r3, #26]
 800f914:	f003 0308 	and.w	r3, r3, #8
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d009      	beq.n	800f930 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	8b5b      	ldrh	r3, [r3, #26]
 800f920:	f023 0308 	bic.w	r3, r3, #8
 800f924:	b29a      	uxth	r2, r3
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800f92a:	6878      	ldr	r0, [r7, #4]
 800f92c:	f7ff fa78 	bl	800ee20 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	68db      	ldr	r3, [r3, #12]
 800f934:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	d00a      	beq.n	800f954 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800f93e:	4b0e      	ldr	r3, [pc, #56]	; (800f978 <tcp_fasttmr+0xc4>)
 800f940:	2200      	movs	r2, #0
 800f942:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800f944:	6878      	ldr	r0, [r7, #4]
 800f946:	f000 f819 	bl	800f97c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800f94a:	4b0b      	ldr	r3, [pc, #44]	; (800f978 <tcp_fasttmr+0xc4>)
 800f94c:	781b      	ldrb	r3, [r3, #0]
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d000      	beq.n	800f954 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800f952:	e7b8      	b.n	800f8c6 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800f954:	683b      	ldr	r3, [r7, #0]
 800f956:	607b      	str	r3, [r7, #4]
 800f958:	e002      	b.n	800f960 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	68db      	ldr	r3, [r3, #12]
 800f95e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	2b00      	cmp	r3, #0
 800f964:	d1b3      	bne.n	800f8ce <tcp_fasttmr+0x1a>
    }
  }
}
 800f966:	bf00      	nop
 800f968:	bf00      	nop
 800f96a:	3708      	adds	r7, #8
 800f96c:	46bd      	mov	sp, r7
 800f96e:	bd80      	pop	{r7, pc}
 800f970:	2001383a 	.word	0x2001383a
 800f974:	2001b660 	.word	0x2001b660
 800f978:	2001b65c 	.word	0x2001b65c

0800f97c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800f97c:	b590      	push	{r4, r7, lr}
 800f97e:	b085      	sub	sp, #20
 800f980:	af00      	add	r7, sp, #0
 800f982:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	2b00      	cmp	r3, #0
 800f988:	d109      	bne.n	800f99e <tcp_process_refused_data+0x22>
 800f98a:	4b37      	ldr	r3, [pc, #220]	; (800fa68 <tcp_process_refused_data+0xec>)
 800f98c:	f240 6209 	movw	r2, #1545	; 0x609
 800f990:	4936      	ldr	r1, [pc, #216]	; (800fa6c <tcp_process_refused_data+0xf0>)
 800f992:	4837      	ldr	r0, [pc, #220]	; (800fa70 <tcp_process_refused_data+0xf4>)
 800f994:	f009 fece 	bl	8019734 <iprintf>
 800f998:	f06f 030f 	mvn.w	r3, #15
 800f99c:	e060      	b.n	800fa60 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f9a2:	7b5b      	ldrb	r3, [r3, #13]
 800f9a4:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f9aa:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	2200      	movs	r2, #0
 800f9b0:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d00b      	beq.n	800f9d4 <tcp_process_refused_data+0x58>
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	6918      	ldr	r0, [r3, #16]
 800f9c6:	2300      	movs	r3, #0
 800f9c8:	68ba      	ldr	r2, [r7, #8]
 800f9ca:	6879      	ldr	r1, [r7, #4]
 800f9cc:	47a0      	blx	r4
 800f9ce:	4603      	mov	r3, r0
 800f9d0:	73fb      	strb	r3, [r7, #15]
 800f9d2:	e007      	b.n	800f9e4 <tcp_process_refused_data+0x68>
 800f9d4:	2300      	movs	r3, #0
 800f9d6:	68ba      	ldr	r2, [r7, #8]
 800f9d8:	6879      	ldr	r1, [r7, #4]
 800f9da:	2000      	movs	r0, #0
 800f9dc:	f000 f8a4 	bl	800fb28 <tcp_recv_null>
 800f9e0:	4603      	mov	r3, r0
 800f9e2:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800f9e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d12a      	bne.n	800fa42 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800f9ec:	7bbb      	ldrb	r3, [r7, #14]
 800f9ee:	f003 0320 	and.w	r3, r3, #32
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d033      	beq.n	800fa5e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f9fa:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f9fe:	d005      	beq.n	800fa0c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fa04:	3301      	adds	r3, #1
 800fa06:	b29a      	uxth	r2, r3
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d00b      	beq.n	800fa2e <tcp_process_refused_data+0xb2>
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	6918      	ldr	r0, [r3, #16]
 800fa20:	2300      	movs	r3, #0
 800fa22:	2200      	movs	r2, #0
 800fa24:	6879      	ldr	r1, [r7, #4]
 800fa26:	47a0      	blx	r4
 800fa28:	4603      	mov	r3, r0
 800fa2a:	73fb      	strb	r3, [r7, #15]
 800fa2c:	e001      	b.n	800fa32 <tcp_process_refused_data+0xb6>
 800fa2e:	2300      	movs	r3, #0
 800fa30:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800fa32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fa36:	f113 0f0d 	cmn.w	r3, #13
 800fa3a:	d110      	bne.n	800fa5e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800fa3c:	f06f 030c 	mvn.w	r3, #12
 800fa40:	e00e      	b.n	800fa60 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800fa42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fa46:	f113 0f0d 	cmn.w	r3, #13
 800fa4a:	d102      	bne.n	800fa52 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800fa4c:	f06f 030c 	mvn.w	r3, #12
 800fa50:	e006      	b.n	800fa60 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	68ba      	ldr	r2, [r7, #8]
 800fa56:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800fa58:	f06f 0304 	mvn.w	r3, #4
 800fa5c:	e000      	b.n	800fa60 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800fa5e:	2300      	movs	r3, #0
}
 800fa60:	4618      	mov	r0, r3
 800fa62:	3714      	adds	r7, #20
 800fa64:	46bd      	mov	sp, r7
 800fa66:	bd90      	pop	{r4, r7, pc}
 800fa68:	0801adf8 	.word	0x0801adf8
 800fa6c:	0801b308 	.word	0x0801b308
 800fa70:	0801ae3c 	.word	0x0801ae3c

0800fa74 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800fa74:	b580      	push	{r7, lr}
 800fa76:	b084      	sub	sp, #16
 800fa78:	af00      	add	r7, sp, #0
 800fa7a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800fa7c:	e007      	b.n	800fa8e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800fa84:	6878      	ldr	r0, [r7, #4]
 800fa86:	f000 f80a 	bl	800fa9e <tcp_seg_free>
    seg = next;
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d1f4      	bne.n	800fa7e <tcp_segs_free+0xa>
  }
}
 800fa94:	bf00      	nop
 800fa96:	bf00      	nop
 800fa98:	3710      	adds	r7, #16
 800fa9a:	46bd      	mov	sp, r7
 800fa9c:	bd80      	pop	{r7, pc}

0800fa9e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800fa9e:	b580      	push	{r7, lr}
 800faa0:	b082      	sub	sp, #8
 800faa2:	af00      	add	r7, sp, #0
 800faa4:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d00c      	beq.n	800fac6 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	685b      	ldr	r3, [r3, #4]
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d004      	beq.n	800fabe <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	685b      	ldr	r3, [r3, #4]
 800fab8:	4618      	mov	r0, r3
 800faba:	f7fe fd61 	bl	800e580 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800fabe:	6879      	ldr	r1, [r7, #4]
 800fac0:	2003      	movs	r0, #3
 800fac2:	f7fd fead 	bl	800d820 <memp_free>
  }
}
 800fac6:	bf00      	nop
 800fac8:	3708      	adds	r7, #8
 800faca:	46bd      	mov	sp, r7
 800facc:	bd80      	pop	{r7, pc}
	...

0800fad0 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800fad0:	b580      	push	{r7, lr}
 800fad2:	b084      	sub	sp, #16
 800fad4:	af00      	add	r7, sp, #0
 800fad6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d106      	bne.n	800faec <tcp_seg_copy+0x1c>
 800fade:	4b0f      	ldr	r3, [pc, #60]	; (800fb1c <tcp_seg_copy+0x4c>)
 800fae0:	f240 6282 	movw	r2, #1666	; 0x682
 800fae4:	490e      	ldr	r1, [pc, #56]	; (800fb20 <tcp_seg_copy+0x50>)
 800fae6:	480f      	ldr	r0, [pc, #60]	; (800fb24 <tcp_seg_copy+0x54>)
 800fae8:	f009 fe24 	bl	8019734 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800faec:	2003      	movs	r0, #3
 800faee:	f7fd fe45 	bl	800d77c <memp_malloc>
 800faf2:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800faf4:	68fb      	ldr	r3, [r7, #12]
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d101      	bne.n	800fafe <tcp_seg_copy+0x2e>
    return NULL;
 800fafa:	2300      	movs	r3, #0
 800fafc:	e00a      	b.n	800fb14 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800fafe:	2210      	movs	r2, #16
 800fb00:	6879      	ldr	r1, [r7, #4]
 800fb02:	68f8      	ldr	r0, [r7, #12]
 800fb04:	f009 fa32 	bl	8018f6c <memcpy>
  pbuf_ref(cseg->p);
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	685b      	ldr	r3, [r3, #4]
 800fb0c:	4618      	mov	r0, r3
 800fb0e:	f7fe fddd 	bl	800e6cc <pbuf_ref>
  return cseg;
 800fb12:	68fb      	ldr	r3, [r7, #12]
}
 800fb14:	4618      	mov	r0, r3
 800fb16:	3710      	adds	r7, #16
 800fb18:	46bd      	mov	sp, r7
 800fb1a:	bd80      	pop	{r7, pc}
 800fb1c:	0801adf8 	.word	0x0801adf8
 800fb20:	0801b34c 	.word	0x0801b34c
 800fb24:	0801ae3c 	.word	0x0801ae3c

0800fb28 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800fb28:	b580      	push	{r7, lr}
 800fb2a:	b084      	sub	sp, #16
 800fb2c:	af00      	add	r7, sp, #0
 800fb2e:	60f8      	str	r0, [r7, #12]
 800fb30:	60b9      	str	r1, [r7, #8]
 800fb32:	607a      	str	r2, [r7, #4]
 800fb34:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800fb36:	68bb      	ldr	r3, [r7, #8]
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d109      	bne.n	800fb50 <tcp_recv_null+0x28>
 800fb3c:	4b12      	ldr	r3, [pc, #72]	; (800fb88 <tcp_recv_null+0x60>)
 800fb3e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800fb42:	4912      	ldr	r1, [pc, #72]	; (800fb8c <tcp_recv_null+0x64>)
 800fb44:	4812      	ldr	r0, [pc, #72]	; (800fb90 <tcp_recv_null+0x68>)
 800fb46:	f009 fdf5 	bl	8019734 <iprintf>
 800fb4a:	f06f 030f 	mvn.w	r3, #15
 800fb4e:	e016      	b.n	800fb7e <tcp_recv_null+0x56>

  if (p != NULL) {
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d009      	beq.n	800fb6a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	891b      	ldrh	r3, [r3, #8]
 800fb5a:	4619      	mov	r1, r3
 800fb5c:	68b8      	ldr	r0, [r7, #8]
 800fb5e:	f7ff fb19 	bl	800f194 <tcp_recved>
    pbuf_free(p);
 800fb62:	6878      	ldr	r0, [r7, #4]
 800fb64:	f7fe fd0c 	bl	800e580 <pbuf_free>
 800fb68:	e008      	b.n	800fb7c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800fb6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d104      	bne.n	800fb7c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800fb72:	68b8      	ldr	r0, [r7, #8]
 800fb74:	f7ff f9be 	bl	800eef4 <tcp_close>
 800fb78:	4603      	mov	r3, r0
 800fb7a:	e000      	b.n	800fb7e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800fb7c:	2300      	movs	r3, #0
}
 800fb7e:	4618      	mov	r0, r3
 800fb80:	3710      	adds	r7, #16
 800fb82:	46bd      	mov	sp, r7
 800fb84:	bd80      	pop	{r7, pc}
 800fb86:	bf00      	nop
 800fb88:	0801adf8 	.word	0x0801adf8
 800fb8c:	0801b368 	.word	0x0801b368
 800fb90:	0801ae3c 	.word	0x0801ae3c

0800fb94 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800fb94:	b580      	push	{r7, lr}
 800fb96:	b086      	sub	sp, #24
 800fb98:	af00      	add	r7, sp, #0
 800fb9a:	4603      	mov	r3, r0
 800fb9c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800fb9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	db01      	blt.n	800fbaa <tcp_kill_prio+0x16>
 800fba6:	79fb      	ldrb	r3, [r7, #7]
 800fba8:	e000      	b.n	800fbac <tcp_kill_prio+0x18>
 800fbaa:	237f      	movs	r3, #127	; 0x7f
 800fbac:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800fbae:	7afb      	ldrb	r3, [r7, #11]
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d034      	beq.n	800fc1e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800fbb4:	7afb      	ldrb	r3, [r7, #11]
 800fbb6:	3b01      	subs	r3, #1
 800fbb8:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800fbba:	2300      	movs	r3, #0
 800fbbc:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800fbbe:	2300      	movs	r3, #0
 800fbc0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800fbc2:	4b19      	ldr	r3, [pc, #100]	; (800fc28 <tcp_kill_prio+0x94>)
 800fbc4:	681b      	ldr	r3, [r3, #0]
 800fbc6:	617b      	str	r3, [r7, #20]
 800fbc8:	e01f      	b.n	800fc0a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800fbca:	697b      	ldr	r3, [r7, #20]
 800fbcc:	7d5b      	ldrb	r3, [r3, #21]
 800fbce:	7afa      	ldrb	r2, [r7, #11]
 800fbd0:	429a      	cmp	r2, r3
 800fbd2:	d80c      	bhi.n	800fbee <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800fbd4:	697b      	ldr	r3, [r7, #20]
 800fbd6:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800fbd8:	7afa      	ldrb	r2, [r7, #11]
 800fbda:	429a      	cmp	r2, r3
 800fbdc:	d112      	bne.n	800fc04 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800fbde:	4b13      	ldr	r3, [pc, #76]	; (800fc2c <tcp_kill_prio+0x98>)
 800fbe0:	681a      	ldr	r2, [r3, #0]
 800fbe2:	697b      	ldr	r3, [r7, #20]
 800fbe4:	6a1b      	ldr	r3, [r3, #32]
 800fbe6:	1ad3      	subs	r3, r2, r3
 800fbe8:	68fa      	ldr	r2, [r7, #12]
 800fbea:	429a      	cmp	r2, r3
 800fbec:	d80a      	bhi.n	800fc04 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800fbee:	4b0f      	ldr	r3, [pc, #60]	; (800fc2c <tcp_kill_prio+0x98>)
 800fbf0:	681a      	ldr	r2, [r3, #0]
 800fbf2:	697b      	ldr	r3, [r7, #20]
 800fbf4:	6a1b      	ldr	r3, [r3, #32]
 800fbf6:	1ad3      	subs	r3, r2, r3
 800fbf8:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800fbfa:	697b      	ldr	r3, [r7, #20]
 800fbfc:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800fbfe:	697b      	ldr	r3, [r7, #20]
 800fc00:	7d5b      	ldrb	r3, [r3, #21]
 800fc02:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800fc04:	697b      	ldr	r3, [r7, #20]
 800fc06:	68db      	ldr	r3, [r3, #12]
 800fc08:	617b      	str	r3, [r7, #20]
 800fc0a:	697b      	ldr	r3, [r7, #20]
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d1dc      	bne.n	800fbca <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800fc10:	693b      	ldr	r3, [r7, #16]
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	d004      	beq.n	800fc20 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800fc16:	6938      	ldr	r0, [r7, #16]
 800fc18:	f7ff fa56 	bl	800f0c8 <tcp_abort>
 800fc1c:	e000      	b.n	800fc20 <tcp_kill_prio+0x8c>
    return;
 800fc1e:	bf00      	nop
  }
}
 800fc20:	3718      	adds	r7, #24
 800fc22:	46bd      	mov	sp, r7
 800fc24:	bd80      	pop	{r7, pc}
 800fc26:	bf00      	nop
 800fc28:	2001b660 	.word	0x2001b660
 800fc2c:	2001b664 	.word	0x2001b664

0800fc30 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800fc30:	b580      	push	{r7, lr}
 800fc32:	b086      	sub	sp, #24
 800fc34:	af00      	add	r7, sp, #0
 800fc36:	4603      	mov	r3, r0
 800fc38:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800fc3a:	79fb      	ldrb	r3, [r7, #7]
 800fc3c:	2b08      	cmp	r3, #8
 800fc3e:	d009      	beq.n	800fc54 <tcp_kill_state+0x24>
 800fc40:	79fb      	ldrb	r3, [r7, #7]
 800fc42:	2b09      	cmp	r3, #9
 800fc44:	d006      	beq.n	800fc54 <tcp_kill_state+0x24>
 800fc46:	4b1a      	ldr	r3, [pc, #104]	; (800fcb0 <tcp_kill_state+0x80>)
 800fc48:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800fc4c:	4919      	ldr	r1, [pc, #100]	; (800fcb4 <tcp_kill_state+0x84>)
 800fc4e:	481a      	ldr	r0, [pc, #104]	; (800fcb8 <tcp_kill_state+0x88>)
 800fc50:	f009 fd70 	bl	8019734 <iprintf>

  inactivity = 0;
 800fc54:	2300      	movs	r3, #0
 800fc56:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800fc58:	2300      	movs	r3, #0
 800fc5a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800fc5c:	4b17      	ldr	r3, [pc, #92]	; (800fcbc <tcp_kill_state+0x8c>)
 800fc5e:	681b      	ldr	r3, [r3, #0]
 800fc60:	617b      	str	r3, [r7, #20]
 800fc62:	e017      	b.n	800fc94 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800fc64:	697b      	ldr	r3, [r7, #20]
 800fc66:	7d1b      	ldrb	r3, [r3, #20]
 800fc68:	79fa      	ldrb	r2, [r7, #7]
 800fc6a:	429a      	cmp	r2, r3
 800fc6c:	d10f      	bne.n	800fc8e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800fc6e:	4b14      	ldr	r3, [pc, #80]	; (800fcc0 <tcp_kill_state+0x90>)
 800fc70:	681a      	ldr	r2, [r3, #0]
 800fc72:	697b      	ldr	r3, [r7, #20]
 800fc74:	6a1b      	ldr	r3, [r3, #32]
 800fc76:	1ad3      	subs	r3, r2, r3
 800fc78:	68fa      	ldr	r2, [r7, #12]
 800fc7a:	429a      	cmp	r2, r3
 800fc7c:	d807      	bhi.n	800fc8e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800fc7e:	4b10      	ldr	r3, [pc, #64]	; (800fcc0 <tcp_kill_state+0x90>)
 800fc80:	681a      	ldr	r2, [r3, #0]
 800fc82:	697b      	ldr	r3, [r7, #20]
 800fc84:	6a1b      	ldr	r3, [r3, #32]
 800fc86:	1ad3      	subs	r3, r2, r3
 800fc88:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800fc8a:	697b      	ldr	r3, [r7, #20]
 800fc8c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800fc8e:	697b      	ldr	r3, [r7, #20]
 800fc90:	68db      	ldr	r3, [r3, #12]
 800fc92:	617b      	str	r3, [r7, #20]
 800fc94:	697b      	ldr	r3, [r7, #20]
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d1e4      	bne.n	800fc64 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800fc9a:	693b      	ldr	r3, [r7, #16]
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d003      	beq.n	800fca8 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800fca0:	2100      	movs	r1, #0
 800fca2:	6938      	ldr	r0, [r7, #16]
 800fca4:	f7ff f952 	bl	800ef4c <tcp_abandon>
  }
}
 800fca8:	bf00      	nop
 800fcaa:	3718      	adds	r7, #24
 800fcac:	46bd      	mov	sp, r7
 800fcae:	bd80      	pop	{r7, pc}
 800fcb0:	0801adf8 	.word	0x0801adf8
 800fcb4:	0801b384 	.word	0x0801b384
 800fcb8:	0801ae3c 	.word	0x0801ae3c
 800fcbc:	2001b660 	.word	0x2001b660
 800fcc0:	2001b664 	.word	0x2001b664

0800fcc4 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800fcc4:	b580      	push	{r7, lr}
 800fcc6:	b084      	sub	sp, #16
 800fcc8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800fcca:	2300      	movs	r3, #0
 800fccc:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800fcce:	2300      	movs	r3, #0
 800fcd0:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800fcd2:	4b12      	ldr	r3, [pc, #72]	; (800fd1c <tcp_kill_timewait+0x58>)
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	60fb      	str	r3, [r7, #12]
 800fcd8:	e012      	b.n	800fd00 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800fcda:	4b11      	ldr	r3, [pc, #68]	; (800fd20 <tcp_kill_timewait+0x5c>)
 800fcdc:	681a      	ldr	r2, [r3, #0]
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	6a1b      	ldr	r3, [r3, #32]
 800fce2:	1ad3      	subs	r3, r2, r3
 800fce4:	687a      	ldr	r2, [r7, #4]
 800fce6:	429a      	cmp	r2, r3
 800fce8:	d807      	bhi.n	800fcfa <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800fcea:	4b0d      	ldr	r3, [pc, #52]	; (800fd20 <tcp_kill_timewait+0x5c>)
 800fcec:	681a      	ldr	r2, [r3, #0]
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	6a1b      	ldr	r3, [r3, #32]
 800fcf2:	1ad3      	subs	r3, r2, r3
 800fcf4:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800fcf6:	68fb      	ldr	r3, [r7, #12]
 800fcf8:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800fcfa:	68fb      	ldr	r3, [r7, #12]
 800fcfc:	68db      	ldr	r3, [r3, #12]
 800fcfe:	60fb      	str	r3, [r7, #12]
 800fd00:	68fb      	ldr	r3, [r7, #12]
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d1e9      	bne.n	800fcda <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800fd06:	68bb      	ldr	r3, [r7, #8]
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d002      	beq.n	800fd12 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800fd0c:	68b8      	ldr	r0, [r7, #8]
 800fd0e:	f7ff f9db 	bl	800f0c8 <tcp_abort>
  }
}
 800fd12:	bf00      	nop
 800fd14:	3710      	adds	r7, #16
 800fd16:	46bd      	mov	sp, r7
 800fd18:	bd80      	pop	{r7, pc}
 800fd1a:	bf00      	nop
 800fd1c:	2001b670 	.word	0x2001b670
 800fd20:	2001b664 	.word	0x2001b664

0800fd24 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800fd24:	b580      	push	{r7, lr}
 800fd26:	b082      	sub	sp, #8
 800fd28:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800fd2a:	4b10      	ldr	r3, [pc, #64]	; (800fd6c <tcp_handle_closepend+0x48>)
 800fd2c:	681b      	ldr	r3, [r3, #0]
 800fd2e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800fd30:	e014      	b.n	800fd5c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	68db      	ldr	r3, [r3, #12]
 800fd36:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	8b5b      	ldrh	r3, [r3, #26]
 800fd3c:	f003 0308 	and.w	r3, r3, #8
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	d009      	beq.n	800fd58 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	8b5b      	ldrh	r3, [r3, #26]
 800fd48:	f023 0308 	bic.w	r3, r3, #8
 800fd4c:	b29a      	uxth	r2, r3
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800fd52:	6878      	ldr	r0, [r7, #4]
 800fd54:	f7ff f864 	bl	800ee20 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800fd58:	683b      	ldr	r3, [r7, #0]
 800fd5a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d1e7      	bne.n	800fd32 <tcp_handle_closepend+0xe>
  }
}
 800fd62:	bf00      	nop
 800fd64:	bf00      	nop
 800fd66:	3708      	adds	r7, #8
 800fd68:	46bd      	mov	sp, r7
 800fd6a:	bd80      	pop	{r7, pc}
 800fd6c:	2001b660 	.word	0x2001b660

0800fd70 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800fd70:	b580      	push	{r7, lr}
 800fd72:	b084      	sub	sp, #16
 800fd74:	af00      	add	r7, sp, #0
 800fd76:	4603      	mov	r3, r0
 800fd78:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fd7a:	2001      	movs	r0, #1
 800fd7c:	f7fd fcfe 	bl	800d77c <memp_malloc>
 800fd80:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800fd82:	68fb      	ldr	r3, [r7, #12]
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d126      	bne.n	800fdd6 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800fd88:	f7ff ffcc 	bl	800fd24 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800fd8c:	f7ff ff9a 	bl	800fcc4 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fd90:	2001      	movs	r0, #1
 800fd92:	f7fd fcf3 	bl	800d77c <memp_malloc>
 800fd96:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d11b      	bne.n	800fdd6 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800fd9e:	2009      	movs	r0, #9
 800fda0:	f7ff ff46 	bl	800fc30 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fda4:	2001      	movs	r0, #1
 800fda6:	f7fd fce9 	bl	800d77c <memp_malloc>
 800fdaa:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800fdac:	68fb      	ldr	r3, [r7, #12]
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d111      	bne.n	800fdd6 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800fdb2:	2008      	movs	r0, #8
 800fdb4:	f7ff ff3c 	bl	800fc30 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fdb8:	2001      	movs	r0, #1
 800fdba:	f7fd fcdf 	bl	800d77c <memp_malloc>
 800fdbe:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800fdc0:	68fb      	ldr	r3, [r7, #12]
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d107      	bne.n	800fdd6 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800fdc6:	79fb      	ldrb	r3, [r7, #7]
 800fdc8:	4618      	mov	r0, r3
 800fdca:	f7ff fee3 	bl	800fb94 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fdce:	2001      	movs	r0, #1
 800fdd0:	f7fd fcd4 	bl	800d77c <memp_malloc>
 800fdd4:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800fdd6:	68fb      	ldr	r3, [r7, #12]
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d03f      	beq.n	800fe5c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800fddc:	229c      	movs	r2, #156	; 0x9c
 800fdde:	2100      	movs	r1, #0
 800fde0:	68f8      	ldr	r0, [r7, #12]
 800fde2:	f009 f8d1 	bl	8018f88 <memset>
    pcb->prio = prio;
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	79fa      	ldrb	r2, [r7, #7]
 800fdea:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800fdec:	68fb      	ldr	r3, [r7, #12]
 800fdee:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800fdf2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800fdf6:	68fb      	ldr	r3, [r7, #12]
 800fdf8:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800fdfc:	855a      	strh	r2, [r3, #42]	; 0x2a
 800fdfe:	68fb      	ldr	r3, [r7, #12]
 800fe00:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800fe02:	68fb      	ldr	r3, [r7, #12]
 800fe04:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	22ff      	movs	r2, #255	; 0xff
 800fe0a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800fe0c:	68fb      	ldr	r3, [r7, #12]
 800fe0e:	f44f 7206 	mov.w	r2, #536	; 0x218
 800fe12:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	2206      	movs	r2, #6
 800fe18:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800fe1c:	68fb      	ldr	r3, [r7, #12]
 800fe1e:	2206      	movs	r2, #6
 800fe20:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fe28:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800fe2a:	68fb      	ldr	r3, [r7, #12]
 800fe2c:	2201      	movs	r2, #1
 800fe2e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800fe32:	4b0d      	ldr	r3, [pc, #52]	; (800fe68 <tcp_alloc+0xf8>)
 800fe34:	681a      	ldr	r2, [r3, #0]
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800fe3a:	4b0c      	ldr	r3, [pc, #48]	; (800fe6c <tcp_alloc+0xfc>)
 800fe3c:	781a      	ldrb	r2, [r3, #0]
 800fe3e:	68fb      	ldr	r3, [r7, #12]
 800fe40:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800fe42:	68fb      	ldr	r3, [r7, #12]
 800fe44:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800fe48:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	4a08      	ldr	r2, [pc, #32]	; (800fe70 <tcp_alloc+0x100>)
 800fe50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800fe54:	68fb      	ldr	r3, [r7, #12]
 800fe56:	4a07      	ldr	r2, [pc, #28]	; (800fe74 <tcp_alloc+0x104>)
 800fe58:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800fe5c:	68fb      	ldr	r3, [r7, #12]
}
 800fe5e:	4618      	mov	r0, r3
 800fe60:	3710      	adds	r7, #16
 800fe62:	46bd      	mov	sp, r7
 800fe64:	bd80      	pop	{r7, pc}
 800fe66:	bf00      	nop
 800fe68:	2001b664 	.word	0x2001b664
 800fe6c:	2001383a 	.word	0x2001383a
 800fe70:	0800fb29 	.word	0x0800fb29
 800fe74:	006ddd00 	.word	0x006ddd00

0800fe78 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800fe78:	b580      	push	{r7, lr}
 800fe7a:	b082      	sub	sp, #8
 800fe7c:	af00      	add	r7, sp, #0
 800fe7e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d107      	bne.n	800fe96 <tcp_pcb_purge+0x1e>
 800fe86:	4b21      	ldr	r3, [pc, #132]	; (800ff0c <tcp_pcb_purge+0x94>)
 800fe88:	f640 0251 	movw	r2, #2129	; 0x851
 800fe8c:	4920      	ldr	r1, [pc, #128]	; (800ff10 <tcp_pcb_purge+0x98>)
 800fe8e:	4821      	ldr	r0, [pc, #132]	; (800ff14 <tcp_pcb_purge+0x9c>)
 800fe90:	f009 fc50 	bl	8019734 <iprintf>
 800fe94:	e037      	b.n	800ff06 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	7d1b      	ldrb	r3, [r3, #20]
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	d033      	beq.n	800ff06 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800fea2:	2b0a      	cmp	r3, #10
 800fea4:	d02f      	beq.n	800ff06 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800feaa:	2b01      	cmp	r3, #1
 800feac:	d02b      	beq.n	800ff06 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d007      	beq.n	800fec6 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800feba:	4618      	mov	r0, r3
 800febc:	f7fe fb60 	bl	800e580 <pbuf_free>
      pcb->refused_data = NULL;
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	2200      	movs	r2, #0
 800fec4:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800feca:	2b00      	cmp	r3, #0
 800fecc:	d002      	beq.n	800fed4 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800fece:	6878      	ldr	r0, [r7, #4]
 800fed0:	f000 f986 	bl	80101e0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800feda:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fee0:	4618      	mov	r0, r3
 800fee2:	f7ff fdc7 	bl	800fa74 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800feea:	4618      	mov	r0, r3
 800feec:	f7ff fdc2 	bl	800fa74 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	2200      	movs	r2, #0
 800fef4:	66da      	str	r2, [r3, #108]	; 0x6c
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	2200      	movs	r2, #0
 800ff02:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800ff06:	3708      	adds	r7, #8
 800ff08:	46bd      	mov	sp, r7
 800ff0a:	bd80      	pop	{r7, pc}
 800ff0c:	0801adf8 	.word	0x0801adf8
 800ff10:	0801b444 	.word	0x0801b444
 800ff14:	0801ae3c 	.word	0x0801ae3c

0800ff18 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800ff18:	b580      	push	{r7, lr}
 800ff1a:	b084      	sub	sp, #16
 800ff1c:	af00      	add	r7, sp, #0
 800ff1e:	6078      	str	r0, [r7, #4]
 800ff20:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800ff22:	683b      	ldr	r3, [r7, #0]
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d106      	bne.n	800ff36 <tcp_pcb_remove+0x1e>
 800ff28:	4b3e      	ldr	r3, [pc, #248]	; (8010024 <tcp_pcb_remove+0x10c>)
 800ff2a:	f640 0283 	movw	r2, #2179	; 0x883
 800ff2e:	493e      	ldr	r1, [pc, #248]	; (8010028 <tcp_pcb_remove+0x110>)
 800ff30:	483e      	ldr	r0, [pc, #248]	; (801002c <tcp_pcb_remove+0x114>)
 800ff32:	f009 fbff 	bl	8019734 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d106      	bne.n	800ff4a <tcp_pcb_remove+0x32>
 800ff3c:	4b39      	ldr	r3, [pc, #228]	; (8010024 <tcp_pcb_remove+0x10c>)
 800ff3e:	f640 0284 	movw	r2, #2180	; 0x884
 800ff42:	493b      	ldr	r1, [pc, #236]	; (8010030 <tcp_pcb_remove+0x118>)
 800ff44:	4839      	ldr	r0, [pc, #228]	; (801002c <tcp_pcb_remove+0x114>)
 800ff46:	f009 fbf5 	bl	8019734 <iprintf>

  TCP_RMV(pcblist, pcb);
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	681b      	ldr	r3, [r3, #0]
 800ff4e:	683a      	ldr	r2, [r7, #0]
 800ff50:	429a      	cmp	r2, r3
 800ff52:	d105      	bne.n	800ff60 <tcp_pcb_remove+0x48>
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	681b      	ldr	r3, [r3, #0]
 800ff58:	68da      	ldr	r2, [r3, #12]
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	601a      	str	r2, [r3, #0]
 800ff5e:	e013      	b.n	800ff88 <tcp_pcb_remove+0x70>
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	60fb      	str	r3, [r7, #12]
 800ff66:	e00c      	b.n	800ff82 <tcp_pcb_remove+0x6a>
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	68db      	ldr	r3, [r3, #12]
 800ff6c:	683a      	ldr	r2, [r7, #0]
 800ff6e:	429a      	cmp	r2, r3
 800ff70:	d104      	bne.n	800ff7c <tcp_pcb_remove+0x64>
 800ff72:	683b      	ldr	r3, [r7, #0]
 800ff74:	68da      	ldr	r2, [r3, #12]
 800ff76:	68fb      	ldr	r3, [r7, #12]
 800ff78:	60da      	str	r2, [r3, #12]
 800ff7a:	e005      	b.n	800ff88 <tcp_pcb_remove+0x70>
 800ff7c:	68fb      	ldr	r3, [r7, #12]
 800ff7e:	68db      	ldr	r3, [r3, #12]
 800ff80:	60fb      	str	r3, [r7, #12]
 800ff82:	68fb      	ldr	r3, [r7, #12]
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d1ef      	bne.n	800ff68 <tcp_pcb_remove+0x50>
 800ff88:	683b      	ldr	r3, [r7, #0]
 800ff8a:	2200      	movs	r2, #0
 800ff8c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800ff8e:	6838      	ldr	r0, [r7, #0]
 800ff90:	f7ff ff72 	bl	800fe78 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800ff94:	683b      	ldr	r3, [r7, #0]
 800ff96:	7d1b      	ldrb	r3, [r3, #20]
 800ff98:	2b0a      	cmp	r3, #10
 800ff9a:	d013      	beq.n	800ffc4 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800ff9c:	683b      	ldr	r3, [r7, #0]
 800ff9e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800ffa0:	2b01      	cmp	r3, #1
 800ffa2:	d00f      	beq.n	800ffc4 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800ffa4:	683b      	ldr	r3, [r7, #0]
 800ffa6:	8b5b      	ldrh	r3, [r3, #26]
 800ffa8:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d009      	beq.n	800ffc4 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800ffb0:	683b      	ldr	r3, [r7, #0]
 800ffb2:	8b5b      	ldrh	r3, [r3, #26]
 800ffb4:	f043 0302 	orr.w	r3, r3, #2
 800ffb8:	b29a      	uxth	r2, r3
 800ffba:	683b      	ldr	r3, [r7, #0]
 800ffbc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ffbe:	6838      	ldr	r0, [r7, #0]
 800ffc0:	f002 ff6e 	bl	8012ea0 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800ffc4:	683b      	ldr	r3, [r7, #0]
 800ffc6:	7d1b      	ldrb	r3, [r3, #20]
 800ffc8:	2b01      	cmp	r3, #1
 800ffca:	d020      	beq.n	801000e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800ffcc:	683b      	ldr	r3, [r7, #0]
 800ffce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d006      	beq.n	800ffe2 <tcp_pcb_remove+0xca>
 800ffd4:	4b13      	ldr	r3, [pc, #76]	; (8010024 <tcp_pcb_remove+0x10c>)
 800ffd6:	f640 0293 	movw	r2, #2195	; 0x893
 800ffda:	4916      	ldr	r1, [pc, #88]	; (8010034 <tcp_pcb_remove+0x11c>)
 800ffdc:	4813      	ldr	r0, [pc, #76]	; (801002c <tcp_pcb_remove+0x114>)
 800ffde:	f009 fba9 	bl	8019734 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800ffe2:	683b      	ldr	r3, [r7, #0]
 800ffe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	d006      	beq.n	800fff8 <tcp_pcb_remove+0xe0>
 800ffea:	4b0e      	ldr	r3, [pc, #56]	; (8010024 <tcp_pcb_remove+0x10c>)
 800ffec:	f640 0294 	movw	r2, #2196	; 0x894
 800fff0:	4911      	ldr	r1, [pc, #68]	; (8010038 <tcp_pcb_remove+0x120>)
 800fff2:	480e      	ldr	r0, [pc, #56]	; (801002c <tcp_pcb_remove+0x114>)
 800fff4:	f009 fb9e 	bl	8019734 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800fff8:	683b      	ldr	r3, [r7, #0]
 800fffa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fffc:	2b00      	cmp	r3, #0
 800fffe:	d006      	beq.n	801000e <tcp_pcb_remove+0xf6>
 8010000:	4b08      	ldr	r3, [pc, #32]	; (8010024 <tcp_pcb_remove+0x10c>)
 8010002:	f640 0296 	movw	r2, #2198	; 0x896
 8010006:	490d      	ldr	r1, [pc, #52]	; (801003c <tcp_pcb_remove+0x124>)
 8010008:	4808      	ldr	r0, [pc, #32]	; (801002c <tcp_pcb_remove+0x114>)
 801000a:	f009 fb93 	bl	8019734 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 801000e:	683b      	ldr	r3, [r7, #0]
 8010010:	2200      	movs	r2, #0
 8010012:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8010014:	683b      	ldr	r3, [r7, #0]
 8010016:	2200      	movs	r2, #0
 8010018:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801001a:	bf00      	nop
 801001c:	3710      	adds	r7, #16
 801001e:	46bd      	mov	sp, r7
 8010020:	bd80      	pop	{r7, pc}
 8010022:	bf00      	nop
 8010024:	0801adf8 	.word	0x0801adf8
 8010028:	0801b460 	.word	0x0801b460
 801002c:	0801ae3c 	.word	0x0801ae3c
 8010030:	0801b47c 	.word	0x0801b47c
 8010034:	0801b49c 	.word	0x0801b49c
 8010038:	0801b4b4 	.word	0x0801b4b4
 801003c:	0801b4d0 	.word	0x0801b4d0

08010040 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8010040:	b580      	push	{r7, lr}
 8010042:	b082      	sub	sp, #8
 8010044:	af00      	add	r7, sp, #0
 8010046:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	2b00      	cmp	r3, #0
 801004c:	d106      	bne.n	801005c <tcp_next_iss+0x1c>
 801004e:	4b0a      	ldr	r3, [pc, #40]	; (8010078 <tcp_next_iss+0x38>)
 8010050:	f640 02af 	movw	r2, #2223	; 0x8af
 8010054:	4909      	ldr	r1, [pc, #36]	; (801007c <tcp_next_iss+0x3c>)
 8010056:	480a      	ldr	r0, [pc, #40]	; (8010080 <tcp_next_iss+0x40>)
 8010058:	f009 fb6c 	bl	8019734 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 801005c:	4b09      	ldr	r3, [pc, #36]	; (8010084 <tcp_next_iss+0x44>)
 801005e:	681a      	ldr	r2, [r3, #0]
 8010060:	4b09      	ldr	r3, [pc, #36]	; (8010088 <tcp_next_iss+0x48>)
 8010062:	681b      	ldr	r3, [r3, #0]
 8010064:	4413      	add	r3, r2
 8010066:	4a07      	ldr	r2, [pc, #28]	; (8010084 <tcp_next_iss+0x44>)
 8010068:	6013      	str	r3, [r2, #0]
  return iss;
 801006a:	4b06      	ldr	r3, [pc, #24]	; (8010084 <tcp_next_iss+0x44>)
 801006c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801006e:	4618      	mov	r0, r3
 8010070:	3708      	adds	r7, #8
 8010072:	46bd      	mov	sp, r7
 8010074:	bd80      	pop	{r7, pc}
 8010076:	bf00      	nop
 8010078:	0801adf8 	.word	0x0801adf8
 801007c:	0801b4e8 	.word	0x0801b4e8
 8010080:	0801ae3c 	.word	0x0801ae3c
 8010084:	20000014 	.word	0x20000014
 8010088:	2001b664 	.word	0x2001b664

0801008c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 801008c:	b580      	push	{r7, lr}
 801008e:	b086      	sub	sp, #24
 8010090:	af00      	add	r7, sp, #0
 8010092:	4603      	mov	r3, r0
 8010094:	60b9      	str	r1, [r7, #8]
 8010096:	607a      	str	r2, [r7, #4]
 8010098:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	2b00      	cmp	r3, #0
 801009e:	d106      	bne.n	80100ae <tcp_eff_send_mss_netif+0x22>
 80100a0:	4b14      	ldr	r3, [pc, #80]	; (80100f4 <tcp_eff_send_mss_netif+0x68>)
 80100a2:	f640 02c5 	movw	r2, #2245	; 0x8c5
 80100a6:	4914      	ldr	r1, [pc, #80]	; (80100f8 <tcp_eff_send_mss_netif+0x6c>)
 80100a8:	4814      	ldr	r0, [pc, #80]	; (80100fc <tcp_eff_send_mss_netif+0x70>)
 80100aa:	f009 fb43 	bl	8019734 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80100ae:	68bb      	ldr	r3, [r7, #8]
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d101      	bne.n	80100b8 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80100b4:	89fb      	ldrh	r3, [r7, #14]
 80100b6:	e019      	b.n	80100ec <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80100b8:	68bb      	ldr	r3, [r7, #8]
 80100ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80100bc:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80100be:	8afb      	ldrh	r3, [r7, #22]
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d012      	beq.n	80100ea <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80100c4:	2328      	movs	r3, #40	; 0x28
 80100c6:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80100c8:	8afa      	ldrh	r2, [r7, #22]
 80100ca:	8abb      	ldrh	r3, [r7, #20]
 80100cc:	429a      	cmp	r2, r3
 80100ce:	d904      	bls.n	80100da <tcp_eff_send_mss_netif+0x4e>
 80100d0:	8afa      	ldrh	r2, [r7, #22]
 80100d2:	8abb      	ldrh	r3, [r7, #20]
 80100d4:	1ad3      	subs	r3, r2, r3
 80100d6:	b29b      	uxth	r3, r3
 80100d8:	e000      	b.n	80100dc <tcp_eff_send_mss_netif+0x50>
 80100da:	2300      	movs	r3, #0
 80100dc:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80100de:	8a7a      	ldrh	r2, [r7, #18]
 80100e0:	89fb      	ldrh	r3, [r7, #14]
 80100e2:	4293      	cmp	r3, r2
 80100e4:	bf28      	it	cs
 80100e6:	4613      	movcs	r3, r2
 80100e8:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80100ea:	89fb      	ldrh	r3, [r7, #14]
}
 80100ec:	4618      	mov	r0, r3
 80100ee:	3718      	adds	r7, #24
 80100f0:	46bd      	mov	sp, r7
 80100f2:	bd80      	pop	{r7, pc}
 80100f4:	0801adf8 	.word	0x0801adf8
 80100f8:	0801b504 	.word	0x0801b504
 80100fc:	0801ae3c 	.word	0x0801ae3c

08010100 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8010100:	b580      	push	{r7, lr}
 8010102:	b084      	sub	sp, #16
 8010104:	af00      	add	r7, sp, #0
 8010106:	6078      	str	r0, [r7, #4]
 8010108:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801010a:	683b      	ldr	r3, [r7, #0]
 801010c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	2b00      	cmp	r3, #0
 8010112:	d119      	bne.n	8010148 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8010114:	4b10      	ldr	r3, [pc, #64]	; (8010158 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8010116:	f44f 6210 	mov.w	r2, #2304	; 0x900
 801011a:	4910      	ldr	r1, [pc, #64]	; (801015c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 801011c:	4810      	ldr	r0, [pc, #64]	; (8010160 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 801011e:	f009 fb09 	bl	8019734 <iprintf>

  while (pcb != NULL) {
 8010122:	e011      	b.n	8010148 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8010124:	68fb      	ldr	r3, [r7, #12]
 8010126:	681a      	ldr	r2, [r3, #0]
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	429a      	cmp	r2, r3
 801012e:	d108      	bne.n	8010142 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8010130:	68fb      	ldr	r3, [r7, #12]
 8010132:	68db      	ldr	r3, [r3, #12]
 8010134:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8010136:	68f8      	ldr	r0, [r7, #12]
 8010138:	f7fe ffc6 	bl	800f0c8 <tcp_abort>
      pcb = next;
 801013c:	68bb      	ldr	r3, [r7, #8]
 801013e:	60fb      	str	r3, [r7, #12]
 8010140:	e002      	b.n	8010148 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8010142:	68fb      	ldr	r3, [r7, #12]
 8010144:	68db      	ldr	r3, [r3, #12]
 8010146:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8010148:	68fb      	ldr	r3, [r7, #12]
 801014a:	2b00      	cmp	r3, #0
 801014c:	d1ea      	bne.n	8010124 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 801014e:	bf00      	nop
 8010150:	bf00      	nop
 8010152:	3710      	adds	r7, #16
 8010154:	46bd      	mov	sp, r7
 8010156:	bd80      	pop	{r7, pc}
 8010158:	0801adf8 	.word	0x0801adf8
 801015c:	0801b52c 	.word	0x0801b52c
 8010160:	0801ae3c 	.word	0x0801ae3c

08010164 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010164:	b580      	push	{r7, lr}
 8010166:	b084      	sub	sp, #16
 8010168:	af00      	add	r7, sp, #0
 801016a:	6078      	str	r0, [r7, #4]
 801016c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	2b00      	cmp	r3, #0
 8010172:	d02a      	beq.n	80101ca <tcp_netif_ip_addr_changed+0x66>
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	681b      	ldr	r3, [r3, #0]
 8010178:	2b00      	cmp	r3, #0
 801017a:	d026      	beq.n	80101ca <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 801017c:	4b15      	ldr	r3, [pc, #84]	; (80101d4 <tcp_netif_ip_addr_changed+0x70>)
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	4619      	mov	r1, r3
 8010182:	6878      	ldr	r0, [r7, #4]
 8010184:	f7ff ffbc 	bl	8010100 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8010188:	4b13      	ldr	r3, [pc, #76]	; (80101d8 <tcp_netif_ip_addr_changed+0x74>)
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	4619      	mov	r1, r3
 801018e:	6878      	ldr	r0, [r7, #4]
 8010190:	f7ff ffb6 	bl	8010100 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8010194:	683b      	ldr	r3, [r7, #0]
 8010196:	2b00      	cmp	r3, #0
 8010198:	d017      	beq.n	80101ca <tcp_netif_ip_addr_changed+0x66>
 801019a:	683b      	ldr	r3, [r7, #0]
 801019c:	681b      	ldr	r3, [r3, #0]
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d013      	beq.n	80101ca <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80101a2:	4b0e      	ldr	r3, [pc, #56]	; (80101dc <tcp_netif_ip_addr_changed+0x78>)
 80101a4:	681b      	ldr	r3, [r3, #0]
 80101a6:	60fb      	str	r3, [r7, #12]
 80101a8:	e00c      	b.n	80101c4 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80101aa:	68fb      	ldr	r3, [r7, #12]
 80101ac:	681a      	ldr	r2, [r3, #0]
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	681b      	ldr	r3, [r3, #0]
 80101b2:	429a      	cmp	r2, r3
 80101b4:	d103      	bne.n	80101be <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80101b6:	683b      	ldr	r3, [r7, #0]
 80101b8:	681a      	ldr	r2, [r3, #0]
 80101ba:	68fb      	ldr	r3, [r7, #12]
 80101bc:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80101be:	68fb      	ldr	r3, [r7, #12]
 80101c0:	68db      	ldr	r3, [r3, #12]
 80101c2:	60fb      	str	r3, [r7, #12]
 80101c4:	68fb      	ldr	r3, [r7, #12]
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d1ef      	bne.n	80101aa <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80101ca:	bf00      	nop
 80101cc:	3710      	adds	r7, #16
 80101ce:	46bd      	mov	sp, r7
 80101d0:	bd80      	pop	{r7, pc}
 80101d2:	bf00      	nop
 80101d4:	2001b660 	.word	0x2001b660
 80101d8:	2001b66c 	.word	0x2001b66c
 80101dc:	2001b668 	.word	0x2001b668

080101e0 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80101e0:	b580      	push	{r7, lr}
 80101e2:	b082      	sub	sp, #8
 80101e4:	af00      	add	r7, sp, #0
 80101e6:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d007      	beq.n	8010200 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80101f4:	4618      	mov	r0, r3
 80101f6:	f7ff fc3d 	bl	800fa74 <tcp_segs_free>
    pcb->ooseq = NULL;
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	2200      	movs	r2, #0
 80101fe:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8010200:	bf00      	nop
 8010202:	3708      	adds	r7, #8
 8010204:	46bd      	mov	sp, r7
 8010206:	bd80      	pop	{r7, pc}

08010208 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8010208:	b590      	push	{r4, r7, lr}
 801020a:	b08d      	sub	sp, #52	; 0x34
 801020c:	af04      	add	r7, sp, #16
 801020e:	6078      	str	r0, [r7, #4]
 8010210:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	2b00      	cmp	r3, #0
 8010216:	d105      	bne.n	8010224 <tcp_input+0x1c>
 8010218:	4b9b      	ldr	r3, [pc, #620]	; (8010488 <tcp_input+0x280>)
 801021a:	2283      	movs	r2, #131	; 0x83
 801021c:	499b      	ldr	r1, [pc, #620]	; (801048c <tcp_input+0x284>)
 801021e:	489c      	ldr	r0, [pc, #624]	; (8010490 <tcp_input+0x288>)
 8010220:	f009 fa88 	bl	8019734 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	685b      	ldr	r3, [r3, #4]
 8010228:	4a9a      	ldr	r2, [pc, #616]	; (8010494 <tcp_input+0x28c>)
 801022a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	895b      	ldrh	r3, [r3, #10]
 8010230:	2b13      	cmp	r3, #19
 8010232:	f240 83d1 	bls.w	80109d8 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8010236:	4b98      	ldr	r3, [pc, #608]	; (8010498 <tcp_input+0x290>)
 8010238:	695b      	ldr	r3, [r3, #20]
 801023a:	4a97      	ldr	r2, [pc, #604]	; (8010498 <tcp_input+0x290>)
 801023c:	6812      	ldr	r2, [r2, #0]
 801023e:	4611      	mov	r1, r2
 8010240:	4618      	mov	r0, r3
 8010242:	f007 fdfd 	bl	8017e40 <ip4_addr_isbroadcast_u32>
 8010246:	4603      	mov	r3, r0
 8010248:	2b00      	cmp	r3, #0
 801024a:	f040 83c7 	bne.w	80109dc <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801024e:	4b92      	ldr	r3, [pc, #584]	; (8010498 <tcp_input+0x290>)
 8010250:	695b      	ldr	r3, [r3, #20]
 8010252:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8010256:	2be0      	cmp	r3, #224	; 0xe0
 8010258:	f000 83c0 	beq.w	80109dc <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 801025c:	4b8d      	ldr	r3, [pc, #564]	; (8010494 <tcp_input+0x28c>)
 801025e:	681b      	ldr	r3, [r3, #0]
 8010260:	899b      	ldrh	r3, [r3, #12]
 8010262:	b29b      	uxth	r3, r3
 8010264:	4618      	mov	r0, r3
 8010266:	f7fc fdd3 	bl	800ce10 <lwip_htons>
 801026a:	4603      	mov	r3, r0
 801026c:	0b1b      	lsrs	r3, r3, #12
 801026e:	b29b      	uxth	r3, r3
 8010270:	b2db      	uxtb	r3, r3
 8010272:	009b      	lsls	r3, r3, #2
 8010274:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8010276:	7cbb      	ldrb	r3, [r7, #18]
 8010278:	2b13      	cmp	r3, #19
 801027a:	f240 83b1 	bls.w	80109e0 <tcp_input+0x7d8>
 801027e:	7cbb      	ldrb	r3, [r7, #18]
 8010280:	b29a      	uxth	r2, r3
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	891b      	ldrh	r3, [r3, #8]
 8010286:	429a      	cmp	r2, r3
 8010288:	f200 83aa 	bhi.w	80109e0 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801028c:	7cbb      	ldrb	r3, [r7, #18]
 801028e:	b29b      	uxth	r3, r3
 8010290:	3b14      	subs	r3, #20
 8010292:	b29a      	uxth	r2, r3
 8010294:	4b81      	ldr	r3, [pc, #516]	; (801049c <tcp_input+0x294>)
 8010296:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8010298:	4b81      	ldr	r3, [pc, #516]	; (80104a0 <tcp_input+0x298>)
 801029a:	2200      	movs	r2, #0
 801029c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	895a      	ldrh	r2, [r3, #10]
 80102a2:	7cbb      	ldrb	r3, [r7, #18]
 80102a4:	b29b      	uxth	r3, r3
 80102a6:	429a      	cmp	r2, r3
 80102a8:	d309      	bcc.n	80102be <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80102aa:	4b7c      	ldr	r3, [pc, #496]	; (801049c <tcp_input+0x294>)
 80102ac:	881a      	ldrh	r2, [r3, #0]
 80102ae:	4b7d      	ldr	r3, [pc, #500]	; (80104a4 <tcp_input+0x29c>)
 80102b0:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80102b2:	7cbb      	ldrb	r3, [r7, #18]
 80102b4:	4619      	mov	r1, r3
 80102b6:	6878      	ldr	r0, [r7, #4]
 80102b8:	f7fe f8dc 	bl	800e474 <pbuf_remove_header>
 80102bc:	e04e      	b.n	801035c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	681b      	ldr	r3, [r3, #0]
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d105      	bne.n	80102d2 <tcp_input+0xca>
 80102c6:	4b70      	ldr	r3, [pc, #448]	; (8010488 <tcp_input+0x280>)
 80102c8:	22c2      	movs	r2, #194	; 0xc2
 80102ca:	4977      	ldr	r1, [pc, #476]	; (80104a8 <tcp_input+0x2a0>)
 80102cc:	4870      	ldr	r0, [pc, #448]	; (8010490 <tcp_input+0x288>)
 80102ce:	f009 fa31 	bl	8019734 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80102d2:	2114      	movs	r1, #20
 80102d4:	6878      	ldr	r0, [r7, #4]
 80102d6:	f7fe f8cd 	bl	800e474 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	895a      	ldrh	r2, [r3, #10]
 80102de:	4b71      	ldr	r3, [pc, #452]	; (80104a4 <tcp_input+0x29c>)
 80102e0:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80102e2:	4b6e      	ldr	r3, [pc, #440]	; (801049c <tcp_input+0x294>)
 80102e4:	881a      	ldrh	r2, [r3, #0]
 80102e6:	4b6f      	ldr	r3, [pc, #444]	; (80104a4 <tcp_input+0x29c>)
 80102e8:	881b      	ldrh	r3, [r3, #0]
 80102ea:	1ad3      	subs	r3, r2, r3
 80102ec:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80102ee:	4b6d      	ldr	r3, [pc, #436]	; (80104a4 <tcp_input+0x29c>)
 80102f0:	881b      	ldrh	r3, [r3, #0]
 80102f2:	4619      	mov	r1, r3
 80102f4:	6878      	ldr	r0, [r7, #4]
 80102f6:	f7fe f8bd 	bl	800e474 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	681b      	ldr	r3, [r3, #0]
 80102fe:	895b      	ldrh	r3, [r3, #10]
 8010300:	8a3a      	ldrh	r2, [r7, #16]
 8010302:	429a      	cmp	r2, r3
 8010304:	f200 836e 	bhi.w	80109e4 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	681b      	ldr	r3, [r3, #0]
 801030c:	685b      	ldr	r3, [r3, #4]
 801030e:	4a64      	ldr	r2, [pc, #400]	; (80104a0 <tcp_input+0x298>)
 8010310:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	681b      	ldr	r3, [r3, #0]
 8010316:	8a3a      	ldrh	r2, [r7, #16]
 8010318:	4611      	mov	r1, r2
 801031a:	4618      	mov	r0, r3
 801031c:	f7fe f8aa 	bl	800e474 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	891a      	ldrh	r2, [r3, #8]
 8010324:	8a3b      	ldrh	r3, [r7, #16]
 8010326:	1ad3      	subs	r3, r2, r3
 8010328:	b29a      	uxth	r2, r3
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	895b      	ldrh	r3, [r3, #10]
 8010332:	2b00      	cmp	r3, #0
 8010334:	d005      	beq.n	8010342 <tcp_input+0x13a>
 8010336:	4b54      	ldr	r3, [pc, #336]	; (8010488 <tcp_input+0x280>)
 8010338:	22df      	movs	r2, #223	; 0xdf
 801033a:	495c      	ldr	r1, [pc, #368]	; (80104ac <tcp_input+0x2a4>)
 801033c:	4854      	ldr	r0, [pc, #336]	; (8010490 <tcp_input+0x288>)
 801033e:	f009 f9f9 	bl	8019734 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	891a      	ldrh	r2, [r3, #8]
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	681b      	ldr	r3, [r3, #0]
 801034a:	891b      	ldrh	r3, [r3, #8]
 801034c:	429a      	cmp	r2, r3
 801034e:	d005      	beq.n	801035c <tcp_input+0x154>
 8010350:	4b4d      	ldr	r3, [pc, #308]	; (8010488 <tcp_input+0x280>)
 8010352:	22e0      	movs	r2, #224	; 0xe0
 8010354:	4956      	ldr	r1, [pc, #344]	; (80104b0 <tcp_input+0x2a8>)
 8010356:	484e      	ldr	r0, [pc, #312]	; (8010490 <tcp_input+0x288>)
 8010358:	f009 f9ec 	bl	8019734 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 801035c:	4b4d      	ldr	r3, [pc, #308]	; (8010494 <tcp_input+0x28c>)
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	881b      	ldrh	r3, [r3, #0]
 8010362:	b29b      	uxth	r3, r3
 8010364:	4a4b      	ldr	r2, [pc, #300]	; (8010494 <tcp_input+0x28c>)
 8010366:	6814      	ldr	r4, [r2, #0]
 8010368:	4618      	mov	r0, r3
 801036a:	f7fc fd51 	bl	800ce10 <lwip_htons>
 801036e:	4603      	mov	r3, r0
 8010370:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8010372:	4b48      	ldr	r3, [pc, #288]	; (8010494 <tcp_input+0x28c>)
 8010374:	681b      	ldr	r3, [r3, #0]
 8010376:	885b      	ldrh	r3, [r3, #2]
 8010378:	b29b      	uxth	r3, r3
 801037a:	4a46      	ldr	r2, [pc, #280]	; (8010494 <tcp_input+0x28c>)
 801037c:	6814      	ldr	r4, [r2, #0]
 801037e:	4618      	mov	r0, r3
 8010380:	f7fc fd46 	bl	800ce10 <lwip_htons>
 8010384:	4603      	mov	r3, r0
 8010386:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8010388:	4b42      	ldr	r3, [pc, #264]	; (8010494 <tcp_input+0x28c>)
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	685b      	ldr	r3, [r3, #4]
 801038e:	4a41      	ldr	r2, [pc, #260]	; (8010494 <tcp_input+0x28c>)
 8010390:	6814      	ldr	r4, [r2, #0]
 8010392:	4618      	mov	r0, r3
 8010394:	f7fc fd51 	bl	800ce3a <lwip_htonl>
 8010398:	4603      	mov	r3, r0
 801039a:	6063      	str	r3, [r4, #4]
 801039c:	6863      	ldr	r3, [r4, #4]
 801039e:	4a45      	ldr	r2, [pc, #276]	; (80104b4 <tcp_input+0x2ac>)
 80103a0:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80103a2:	4b3c      	ldr	r3, [pc, #240]	; (8010494 <tcp_input+0x28c>)
 80103a4:	681b      	ldr	r3, [r3, #0]
 80103a6:	689b      	ldr	r3, [r3, #8]
 80103a8:	4a3a      	ldr	r2, [pc, #232]	; (8010494 <tcp_input+0x28c>)
 80103aa:	6814      	ldr	r4, [r2, #0]
 80103ac:	4618      	mov	r0, r3
 80103ae:	f7fc fd44 	bl	800ce3a <lwip_htonl>
 80103b2:	4603      	mov	r3, r0
 80103b4:	60a3      	str	r3, [r4, #8]
 80103b6:	68a3      	ldr	r3, [r4, #8]
 80103b8:	4a3f      	ldr	r2, [pc, #252]	; (80104b8 <tcp_input+0x2b0>)
 80103ba:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80103bc:	4b35      	ldr	r3, [pc, #212]	; (8010494 <tcp_input+0x28c>)
 80103be:	681b      	ldr	r3, [r3, #0]
 80103c0:	89db      	ldrh	r3, [r3, #14]
 80103c2:	b29b      	uxth	r3, r3
 80103c4:	4a33      	ldr	r2, [pc, #204]	; (8010494 <tcp_input+0x28c>)
 80103c6:	6814      	ldr	r4, [r2, #0]
 80103c8:	4618      	mov	r0, r3
 80103ca:	f7fc fd21 	bl	800ce10 <lwip_htons>
 80103ce:	4603      	mov	r3, r0
 80103d0:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80103d2:	4b30      	ldr	r3, [pc, #192]	; (8010494 <tcp_input+0x28c>)
 80103d4:	681b      	ldr	r3, [r3, #0]
 80103d6:	899b      	ldrh	r3, [r3, #12]
 80103d8:	b29b      	uxth	r3, r3
 80103da:	4618      	mov	r0, r3
 80103dc:	f7fc fd18 	bl	800ce10 <lwip_htons>
 80103e0:	4603      	mov	r3, r0
 80103e2:	b2db      	uxtb	r3, r3
 80103e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80103e8:	b2da      	uxtb	r2, r3
 80103ea:	4b34      	ldr	r3, [pc, #208]	; (80104bc <tcp_input+0x2b4>)
 80103ec:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	891a      	ldrh	r2, [r3, #8]
 80103f2:	4b33      	ldr	r3, [pc, #204]	; (80104c0 <tcp_input+0x2b8>)
 80103f4:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80103f6:	4b31      	ldr	r3, [pc, #196]	; (80104bc <tcp_input+0x2b4>)
 80103f8:	781b      	ldrb	r3, [r3, #0]
 80103fa:	f003 0303 	and.w	r3, r3, #3
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d00c      	beq.n	801041c <tcp_input+0x214>
    tcplen++;
 8010402:	4b2f      	ldr	r3, [pc, #188]	; (80104c0 <tcp_input+0x2b8>)
 8010404:	881b      	ldrh	r3, [r3, #0]
 8010406:	3301      	adds	r3, #1
 8010408:	b29a      	uxth	r2, r3
 801040a:	4b2d      	ldr	r3, [pc, #180]	; (80104c0 <tcp_input+0x2b8>)
 801040c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	891a      	ldrh	r2, [r3, #8]
 8010412:	4b2b      	ldr	r3, [pc, #172]	; (80104c0 <tcp_input+0x2b8>)
 8010414:	881b      	ldrh	r3, [r3, #0]
 8010416:	429a      	cmp	r2, r3
 8010418:	f200 82e6 	bhi.w	80109e8 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 801041c:	2300      	movs	r3, #0
 801041e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010420:	4b28      	ldr	r3, [pc, #160]	; (80104c4 <tcp_input+0x2bc>)
 8010422:	681b      	ldr	r3, [r3, #0]
 8010424:	61fb      	str	r3, [r7, #28]
 8010426:	e09d      	b.n	8010564 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8010428:	69fb      	ldr	r3, [r7, #28]
 801042a:	7d1b      	ldrb	r3, [r3, #20]
 801042c:	2b00      	cmp	r3, #0
 801042e:	d105      	bne.n	801043c <tcp_input+0x234>
 8010430:	4b15      	ldr	r3, [pc, #84]	; (8010488 <tcp_input+0x280>)
 8010432:	22fb      	movs	r2, #251	; 0xfb
 8010434:	4924      	ldr	r1, [pc, #144]	; (80104c8 <tcp_input+0x2c0>)
 8010436:	4816      	ldr	r0, [pc, #88]	; (8010490 <tcp_input+0x288>)
 8010438:	f009 f97c 	bl	8019734 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801043c:	69fb      	ldr	r3, [r7, #28]
 801043e:	7d1b      	ldrb	r3, [r3, #20]
 8010440:	2b0a      	cmp	r3, #10
 8010442:	d105      	bne.n	8010450 <tcp_input+0x248>
 8010444:	4b10      	ldr	r3, [pc, #64]	; (8010488 <tcp_input+0x280>)
 8010446:	22fc      	movs	r2, #252	; 0xfc
 8010448:	4920      	ldr	r1, [pc, #128]	; (80104cc <tcp_input+0x2c4>)
 801044a:	4811      	ldr	r0, [pc, #68]	; (8010490 <tcp_input+0x288>)
 801044c:	f009 f972 	bl	8019734 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8010450:	69fb      	ldr	r3, [r7, #28]
 8010452:	7d1b      	ldrb	r3, [r3, #20]
 8010454:	2b01      	cmp	r3, #1
 8010456:	d105      	bne.n	8010464 <tcp_input+0x25c>
 8010458:	4b0b      	ldr	r3, [pc, #44]	; (8010488 <tcp_input+0x280>)
 801045a:	22fd      	movs	r2, #253	; 0xfd
 801045c:	491c      	ldr	r1, [pc, #112]	; (80104d0 <tcp_input+0x2c8>)
 801045e:	480c      	ldr	r0, [pc, #48]	; (8010490 <tcp_input+0x288>)
 8010460:	f009 f968 	bl	8019734 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010464:	69fb      	ldr	r3, [r7, #28]
 8010466:	7a1b      	ldrb	r3, [r3, #8]
 8010468:	2b00      	cmp	r3, #0
 801046a:	d033      	beq.n	80104d4 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801046c:	69fb      	ldr	r3, [r7, #28]
 801046e:	7a1a      	ldrb	r2, [r3, #8]
 8010470:	4b09      	ldr	r3, [pc, #36]	; (8010498 <tcp_input+0x290>)
 8010472:	685b      	ldr	r3, [r3, #4]
 8010474:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010478:	3301      	adds	r3, #1
 801047a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801047c:	429a      	cmp	r2, r3
 801047e:	d029      	beq.n	80104d4 <tcp_input+0x2cc>
      prev = pcb;
 8010480:	69fb      	ldr	r3, [r7, #28]
 8010482:	61bb      	str	r3, [r7, #24]
      continue;
 8010484:	e06b      	b.n	801055e <tcp_input+0x356>
 8010486:	bf00      	nop
 8010488:	0801b560 	.word	0x0801b560
 801048c:	0801b594 	.word	0x0801b594
 8010490:	0801b5ac 	.word	0x0801b5ac
 8010494:	2001384c 	.word	0x2001384c
 8010498:	2001716c 	.word	0x2001716c
 801049c:	20013850 	.word	0x20013850
 80104a0:	20013854 	.word	0x20013854
 80104a4:	20013852 	.word	0x20013852
 80104a8:	0801b5d4 	.word	0x0801b5d4
 80104ac:	0801b5e4 	.word	0x0801b5e4
 80104b0:	0801b5f0 	.word	0x0801b5f0
 80104b4:	2001385c 	.word	0x2001385c
 80104b8:	20013860 	.word	0x20013860
 80104bc:	20013868 	.word	0x20013868
 80104c0:	20013866 	.word	0x20013866
 80104c4:	2001b660 	.word	0x2001b660
 80104c8:	0801b610 	.word	0x0801b610
 80104cc:	0801b638 	.word	0x0801b638
 80104d0:	0801b664 	.word	0x0801b664
    }

    if (pcb->remote_port == tcphdr->src &&
 80104d4:	69fb      	ldr	r3, [r7, #28]
 80104d6:	8b1a      	ldrh	r2, [r3, #24]
 80104d8:	4b72      	ldr	r3, [pc, #456]	; (80106a4 <tcp_input+0x49c>)
 80104da:	681b      	ldr	r3, [r3, #0]
 80104dc:	881b      	ldrh	r3, [r3, #0]
 80104de:	b29b      	uxth	r3, r3
 80104e0:	429a      	cmp	r2, r3
 80104e2:	d13a      	bne.n	801055a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 80104e4:	69fb      	ldr	r3, [r7, #28]
 80104e6:	8ada      	ldrh	r2, [r3, #22]
 80104e8:	4b6e      	ldr	r3, [pc, #440]	; (80106a4 <tcp_input+0x49c>)
 80104ea:	681b      	ldr	r3, [r3, #0]
 80104ec:	885b      	ldrh	r3, [r3, #2]
 80104ee:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80104f0:	429a      	cmp	r2, r3
 80104f2:	d132      	bne.n	801055a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80104f4:	69fb      	ldr	r3, [r7, #28]
 80104f6:	685a      	ldr	r2, [r3, #4]
 80104f8:	4b6b      	ldr	r3, [pc, #428]	; (80106a8 <tcp_input+0x4a0>)
 80104fa:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80104fc:	429a      	cmp	r2, r3
 80104fe:	d12c      	bne.n	801055a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010500:	69fb      	ldr	r3, [r7, #28]
 8010502:	681a      	ldr	r2, [r3, #0]
 8010504:	4b68      	ldr	r3, [pc, #416]	; (80106a8 <tcp_input+0x4a0>)
 8010506:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010508:	429a      	cmp	r2, r3
 801050a:	d126      	bne.n	801055a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801050c:	69fb      	ldr	r3, [r7, #28]
 801050e:	68db      	ldr	r3, [r3, #12]
 8010510:	69fa      	ldr	r2, [r7, #28]
 8010512:	429a      	cmp	r2, r3
 8010514:	d106      	bne.n	8010524 <tcp_input+0x31c>
 8010516:	4b65      	ldr	r3, [pc, #404]	; (80106ac <tcp_input+0x4a4>)
 8010518:	f240 120d 	movw	r2, #269	; 0x10d
 801051c:	4964      	ldr	r1, [pc, #400]	; (80106b0 <tcp_input+0x4a8>)
 801051e:	4865      	ldr	r0, [pc, #404]	; (80106b4 <tcp_input+0x4ac>)
 8010520:	f009 f908 	bl	8019734 <iprintf>
      if (prev != NULL) {
 8010524:	69bb      	ldr	r3, [r7, #24]
 8010526:	2b00      	cmp	r3, #0
 8010528:	d00a      	beq.n	8010540 <tcp_input+0x338>
        prev->next = pcb->next;
 801052a:	69fb      	ldr	r3, [r7, #28]
 801052c:	68da      	ldr	r2, [r3, #12]
 801052e:	69bb      	ldr	r3, [r7, #24]
 8010530:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8010532:	4b61      	ldr	r3, [pc, #388]	; (80106b8 <tcp_input+0x4b0>)
 8010534:	681a      	ldr	r2, [r3, #0]
 8010536:	69fb      	ldr	r3, [r7, #28]
 8010538:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801053a:	4a5f      	ldr	r2, [pc, #380]	; (80106b8 <tcp_input+0x4b0>)
 801053c:	69fb      	ldr	r3, [r7, #28]
 801053e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8010540:	69fb      	ldr	r3, [r7, #28]
 8010542:	68db      	ldr	r3, [r3, #12]
 8010544:	69fa      	ldr	r2, [r7, #28]
 8010546:	429a      	cmp	r2, r3
 8010548:	d111      	bne.n	801056e <tcp_input+0x366>
 801054a:	4b58      	ldr	r3, [pc, #352]	; (80106ac <tcp_input+0x4a4>)
 801054c:	f240 1215 	movw	r2, #277	; 0x115
 8010550:	495a      	ldr	r1, [pc, #360]	; (80106bc <tcp_input+0x4b4>)
 8010552:	4858      	ldr	r0, [pc, #352]	; (80106b4 <tcp_input+0x4ac>)
 8010554:	f009 f8ee 	bl	8019734 <iprintf>
      break;
 8010558:	e009      	b.n	801056e <tcp_input+0x366>
    }
    prev = pcb;
 801055a:	69fb      	ldr	r3, [r7, #28]
 801055c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801055e:	69fb      	ldr	r3, [r7, #28]
 8010560:	68db      	ldr	r3, [r3, #12]
 8010562:	61fb      	str	r3, [r7, #28]
 8010564:	69fb      	ldr	r3, [r7, #28]
 8010566:	2b00      	cmp	r3, #0
 8010568:	f47f af5e 	bne.w	8010428 <tcp_input+0x220>
 801056c:	e000      	b.n	8010570 <tcp_input+0x368>
      break;
 801056e:	bf00      	nop
  }

  if (pcb == NULL) {
 8010570:	69fb      	ldr	r3, [r7, #28]
 8010572:	2b00      	cmp	r3, #0
 8010574:	f040 80aa 	bne.w	80106cc <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010578:	4b51      	ldr	r3, [pc, #324]	; (80106c0 <tcp_input+0x4b8>)
 801057a:	681b      	ldr	r3, [r3, #0]
 801057c:	61fb      	str	r3, [r7, #28]
 801057e:	e03f      	b.n	8010600 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8010580:	69fb      	ldr	r3, [r7, #28]
 8010582:	7d1b      	ldrb	r3, [r3, #20]
 8010584:	2b0a      	cmp	r3, #10
 8010586:	d006      	beq.n	8010596 <tcp_input+0x38e>
 8010588:	4b48      	ldr	r3, [pc, #288]	; (80106ac <tcp_input+0x4a4>)
 801058a:	f240 121f 	movw	r2, #287	; 0x11f
 801058e:	494d      	ldr	r1, [pc, #308]	; (80106c4 <tcp_input+0x4bc>)
 8010590:	4848      	ldr	r0, [pc, #288]	; (80106b4 <tcp_input+0x4ac>)
 8010592:	f009 f8cf 	bl	8019734 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010596:	69fb      	ldr	r3, [r7, #28]
 8010598:	7a1b      	ldrb	r3, [r3, #8]
 801059a:	2b00      	cmp	r3, #0
 801059c:	d009      	beq.n	80105b2 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801059e:	69fb      	ldr	r3, [r7, #28]
 80105a0:	7a1a      	ldrb	r2, [r3, #8]
 80105a2:	4b41      	ldr	r3, [pc, #260]	; (80106a8 <tcp_input+0x4a0>)
 80105a4:	685b      	ldr	r3, [r3, #4]
 80105a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80105aa:	3301      	adds	r3, #1
 80105ac:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80105ae:	429a      	cmp	r2, r3
 80105b0:	d122      	bne.n	80105f8 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80105b2:	69fb      	ldr	r3, [r7, #28]
 80105b4:	8b1a      	ldrh	r2, [r3, #24]
 80105b6:	4b3b      	ldr	r3, [pc, #236]	; (80106a4 <tcp_input+0x49c>)
 80105b8:	681b      	ldr	r3, [r3, #0]
 80105ba:	881b      	ldrh	r3, [r3, #0]
 80105bc:	b29b      	uxth	r3, r3
 80105be:	429a      	cmp	r2, r3
 80105c0:	d11b      	bne.n	80105fa <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80105c2:	69fb      	ldr	r3, [r7, #28]
 80105c4:	8ada      	ldrh	r2, [r3, #22]
 80105c6:	4b37      	ldr	r3, [pc, #220]	; (80106a4 <tcp_input+0x49c>)
 80105c8:	681b      	ldr	r3, [r3, #0]
 80105ca:	885b      	ldrh	r3, [r3, #2]
 80105cc:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80105ce:	429a      	cmp	r2, r3
 80105d0:	d113      	bne.n	80105fa <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80105d2:	69fb      	ldr	r3, [r7, #28]
 80105d4:	685a      	ldr	r2, [r3, #4]
 80105d6:	4b34      	ldr	r3, [pc, #208]	; (80106a8 <tcp_input+0x4a0>)
 80105d8:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80105da:	429a      	cmp	r2, r3
 80105dc:	d10d      	bne.n	80105fa <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80105de:	69fb      	ldr	r3, [r7, #28]
 80105e0:	681a      	ldr	r2, [r3, #0]
 80105e2:	4b31      	ldr	r3, [pc, #196]	; (80106a8 <tcp_input+0x4a0>)
 80105e4:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80105e6:	429a      	cmp	r2, r3
 80105e8:	d107      	bne.n	80105fa <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80105ea:	69f8      	ldr	r0, [r7, #28]
 80105ec:	f000 fb56 	bl	8010c9c <tcp_timewait_input>
        }
        pbuf_free(p);
 80105f0:	6878      	ldr	r0, [r7, #4]
 80105f2:	f7fd ffc5 	bl	800e580 <pbuf_free>
        return;
 80105f6:	e1fd      	b.n	80109f4 <tcp_input+0x7ec>
        continue;
 80105f8:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80105fa:	69fb      	ldr	r3, [r7, #28]
 80105fc:	68db      	ldr	r3, [r3, #12]
 80105fe:	61fb      	str	r3, [r7, #28]
 8010600:	69fb      	ldr	r3, [r7, #28]
 8010602:	2b00      	cmp	r3, #0
 8010604:	d1bc      	bne.n	8010580 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8010606:	2300      	movs	r3, #0
 8010608:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801060a:	4b2f      	ldr	r3, [pc, #188]	; (80106c8 <tcp_input+0x4c0>)
 801060c:	681b      	ldr	r3, [r3, #0]
 801060e:	617b      	str	r3, [r7, #20]
 8010610:	e02a      	b.n	8010668 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8010612:	697b      	ldr	r3, [r7, #20]
 8010614:	7a1b      	ldrb	r3, [r3, #8]
 8010616:	2b00      	cmp	r3, #0
 8010618:	d00c      	beq.n	8010634 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801061a:	697b      	ldr	r3, [r7, #20]
 801061c:	7a1a      	ldrb	r2, [r3, #8]
 801061e:	4b22      	ldr	r3, [pc, #136]	; (80106a8 <tcp_input+0x4a0>)
 8010620:	685b      	ldr	r3, [r3, #4]
 8010622:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010626:	3301      	adds	r3, #1
 8010628:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801062a:	429a      	cmp	r2, r3
 801062c:	d002      	beq.n	8010634 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 801062e:	697b      	ldr	r3, [r7, #20]
 8010630:	61bb      	str	r3, [r7, #24]
        continue;
 8010632:	e016      	b.n	8010662 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8010634:	697b      	ldr	r3, [r7, #20]
 8010636:	8ada      	ldrh	r2, [r3, #22]
 8010638:	4b1a      	ldr	r3, [pc, #104]	; (80106a4 <tcp_input+0x49c>)
 801063a:	681b      	ldr	r3, [r3, #0]
 801063c:	885b      	ldrh	r3, [r3, #2]
 801063e:	b29b      	uxth	r3, r3
 8010640:	429a      	cmp	r2, r3
 8010642:	d10c      	bne.n	801065e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8010644:	697b      	ldr	r3, [r7, #20]
 8010646:	681a      	ldr	r2, [r3, #0]
 8010648:	4b17      	ldr	r3, [pc, #92]	; (80106a8 <tcp_input+0x4a0>)
 801064a:	695b      	ldr	r3, [r3, #20]
 801064c:	429a      	cmp	r2, r3
 801064e:	d00f      	beq.n	8010670 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8010650:	697b      	ldr	r3, [r7, #20]
 8010652:	2b00      	cmp	r3, #0
 8010654:	d00d      	beq.n	8010672 <tcp_input+0x46a>
 8010656:	697b      	ldr	r3, [r7, #20]
 8010658:	681b      	ldr	r3, [r3, #0]
 801065a:	2b00      	cmp	r3, #0
 801065c:	d009      	beq.n	8010672 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801065e:	697b      	ldr	r3, [r7, #20]
 8010660:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010662:	697b      	ldr	r3, [r7, #20]
 8010664:	68db      	ldr	r3, [r3, #12]
 8010666:	617b      	str	r3, [r7, #20]
 8010668:	697b      	ldr	r3, [r7, #20]
 801066a:	2b00      	cmp	r3, #0
 801066c:	d1d1      	bne.n	8010612 <tcp_input+0x40a>
 801066e:	e000      	b.n	8010672 <tcp_input+0x46a>
            break;
 8010670:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8010672:	697b      	ldr	r3, [r7, #20]
 8010674:	2b00      	cmp	r3, #0
 8010676:	d029      	beq.n	80106cc <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8010678:	69bb      	ldr	r3, [r7, #24]
 801067a:	2b00      	cmp	r3, #0
 801067c:	d00a      	beq.n	8010694 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801067e:	697b      	ldr	r3, [r7, #20]
 8010680:	68da      	ldr	r2, [r3, #12]
 8010682:	69bb      	ldr	r3, [r7, #24]
 8010684:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8010686:	4b10      	ldr	r3, [pc, #64]	; (80106c8 <tcp_input+0x4c0>)
 8010688:	681a      	ldr	r2, [r3, #0]
 801068a:	697b      	ldr	r3, [r7, #20]
 801068c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801068e:	4a0e      	ldr	r2, [pc, #56]	; (80106c8 <tcp_input+0x4c0>)
 8010690:	697b      	ldr	r3, [r7, #20]
 8010692:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8010694:	6978      	ldr	r0, [r7, #20]
 8010696:	f000 fa03 	bl	8010aa0 <tcp_listen_input>
      }
      pbuf_free(p);
 801069a:	6878      	ldr	r0, [r7, #4]
 801069c:	f7fd ff70 	bl	800e580 <pbuf_free>
      return;
 80106a0:	e1a8      	b.n	80109f4 <tcp_input+0x7ec>
 80106a2:	bf00      	nop
 80106a4:	2001384c 	.word	0x2001384c
 80106a8:	2001716c 	.word	0x2001716c
 80106ac:	0801b560 	.word	0x0801b560
 80106b0:	0801b68c 	.word	0x0801b68c
 80106b4:	0801b5ac 	.word	0x0801b5ac
 80106b8:	2001b660 	.word	0x2001b660
 80106bc:	0801b6b8 	.word	0x0801b6b8
 80106c0:	2001b670 	.word	0x2001b670
 80106c4:	0801b6e4 	.word	0x0801b6e4
 80106c8:	2001b668 	.word	0x2001b668
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80106cc:	69fb      	ldr	r3, [r7, #28]
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	f000 8158 	beq.w	8010984 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80106d4:	4b95      	ldr	r3, [pc, #596]	; (801092c <tcp_input+0x724>)
 80106d6:	2200      	movs	r2, #0
 80106d8:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	891a      	ldrh	r2, [r3, #8]
 80106de:	4b93      	ldr	r3, [pc, #588]	; (801092c <tcp_input+0x724>)
 80106e0:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80106e2:	4a92      	ldr	r2, [pc, #584]	; (801092c <tcp_input+0x724>)
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80106e8:	4b91      	ldr	r3, [pc, #580]	; (8010930 <tcp_input+0x728>)
 80106ea:	681b      	ldr	r3, [r3, #0]
 80106ec:	4a8f      	ldr	r2, [pc, #572]	; (801092c <tcp_input+0x724>)
 80106ee:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80106f0:	4b90      	ldr	r3, [pc, #576]	; (8010934 <tcp_input+0x72c>)
 80106f2:	2200      	movs	r2, #0
 80106f4:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80106f6:	4b90      	ldr	r3, [pc, #576]	; (8010938 <tcp_input+0x730>)
 80106f8:	2200      	movs	r2, #0
 80106fa:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80106fc:	4b8f      	ldr	r3, [pc, #572]	; (801093c <tcp_input+0x734>)
 80106fe:	2200      	movs	r2, #0
 8010700:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8010702:	4b8f      	ldr	r3, [pc, #572]	; (8010940 <tcp_input+0x738>)
 8010704:	781b      	ldrb	r3, [r3, #0]
 8010706:	f003 0308 	and.w	r3, r3, #8
 801070a:	2b00      	cmp	r3, #0
 801070c:	d006      	beq.n	801071c <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	7b5b      	ldrb	r3, [r3, #13]
 8010712:	f043 0301 	orr.w	r3, r3, #1
 8010716:	b2da      	uxtb	r2, r3
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 801071c:	69fb      	ldr	r3, [r7, #28]
 801071e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010720:	2b00      	cmp	r3, #0
 8010722:	d017      	beq.n	8010754 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8010724:	69f8      	ldr	r0, [r7, #28]
 8010726:	f7ff f929 	bl	800f97c <tcp_process_refused_data>
 801072a:	4603      	mov	r3, r0
 801072c:	f113 0f0d 	cmn.w	r3, #13
 8010730:	d007      	beq.n	8010742 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8010732:	69fb      	ldr	r3, [r7, #28]
 8010734:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8010736:	2b00      	cmp	r3, #0
 8010738:	d00c      	beq.n	8010754 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801073a:	4b82      	ldr	r3, [pc, #520]	; (8010944 <tcp_input+0x73c>)
 801073c:	881b      	ldrh	r3, [r3, #0]
 801073e:	2b00      	cmp	r3, #0
 8010740:	d008      	beq.n	8010754 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8010742:	69fb      	ldr	r3, [r7, #28]
 8010744:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010746:	2b00      	cmp	r3, #0
 8010748:	f040 80e3 	bne.w	8010912 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 801074c:	69f8      	ldr	r0, [r7, #28]
 801074e:	f003 f9ad 	bl	8013aac <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8010752:	e0de      	b.n	8010912 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8010754:	4a7c      	ldr	r2, [pc, #496]	; (8010948 <tcp_input+0x740>)
 8010756:	69fb      	ldr	r3, [r7, #28]
 8010758:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801075a:	69f8      	ldr	r0, [r7, #28]
 801075c:	f000 fb18 	bl	8010d90 <tcp_process>
 8010760:	4603      	mov	r3, r0
 8010762:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8010764:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010768:	f113 0f0d 	cmn.w	r3, #13
 801076c:	f000 80d3 	beq.w	8010916 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8010770:	4b71      	ldr	r3, [pc, #452]	; (8010938 <tcp_input+0x730>)
 8010772:	781b      	ldrb	r3, [r3, #0]
 8010774:	f003 0308 	and.w	r3, r3, #8
 8010778:	2b00      	cmp	r3, #0
 801077a:	d015      	beq.n	80107a8 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 801077c:	69fb      	ldr	r3, [r7, #28]
 801077e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010782:	2b00      	cmp	r3, #0
 8010784:	d008      	beq.n	8010798 <tcp_input+0x590>
 8010786:	69fb      	ldr	r3, [r7, #28]
 8010788:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801078c:	69fa      	ldr	r2, [r7, #28]
 801078e:	6912      	ldr	r2, [r2, #16]
 8010790:	f06f 010d 	mvn.w	r1, #13
 8010794:	4610      	mov	r0, r2
 8010796:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8010798:	69f9      	ldr	r1, [r7, #28]
 801079a:	486c      	ldr	r0, [pc, #432]	; (801094c <tcp_input+0x744>)
 801079c:	f7ff fbbc 	bl	800ff18 <tcp_pcb_remove>
        tcp_free(pcb);
 80107a0:	69f8      	ldr	r0, [r7, #28]
 80107a2:	f7fe f9a9 	bl	800eaf8 <tcp_free>
 80107a6:	e0da      	b.n	801095e <tcp_input+0x756>
      } else {
        err = ERR_OK;
 80107a8:	2300      	movs	r3, #0
 80107aa:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80107ac:	4b63      	ldr	r3, [pc, #396]	; (801093c <tcp_input+0x734>)
 80107ae:	881b      	ldrh	r3, [r3, #0]
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	d01d      	beq.n	80107f0 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80107b4:	4b61      	ldr	r3, [pc, #388]	; (801093c <tcp_input+0x734>)
 80107b6:	881b      	ldrh	r3, [r3, #0]
 80107b8:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80107ba:	69fb      	ldr	r3, [r7, #28]
 80107bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d00a      	beq.n	80107da <tcp_input+0x5d2>
 80107c4:	69fb      	ldr	r3, [r7, #28]
 80107c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80107ca:	69fa      	ldr	r2, [r7, #28]
 80107cc:	6910      	ldr	r0, [r2, #16]
 80107ce:	89fa      	ldrh	r2, [r7, #14]
 80107d0:	69f9      	ldr	r1, [r7, #28]
 80107d2:	4798      	blx	r3
 80107d4:	4603      	mov	r3, r0
 80107d6:	74fb      	strb	r3, [r7, #19]
 80107d8:	e001      	b.n	80107de <tcp_input+0x5d6>
 80107da:	2300      	movs	r3, #0
 80107dc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80107de:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80107e2:	f113 0f0d 	cmn.w	r3, #13
 80107e6:	f000 8098 	beq.w	801091a <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 80107ea:	4b54      	ldr	r3, [pc, #336]	; (801093c <tcp_input+0x734>)
 80107ec:	2200      	movs	r2, #0
 80107ee:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80107f0:	69f8      	ldr	r0, [r7, #28]
 80107f2:	f000 f915 	bl	8010a20 <tcp_input_delayed_close>
 80107f6:	4603      	mov	r3, r0
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	f040 8090 	bne.w	801091e <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80107fe:	4b4d      	ldr	r3, [pc, #308]	; (8010934 <tcp_input+0x72c>)
 8010800:	681b      	ldr	r3, [r3, #0]
 8010802:	2b00      	cmp	r3, #0
 8010804:	d041      	beq.n	801088a <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8010806:	69fb      	ldr	r3, [r7, #28]
 8010808:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801080a:	2b00      	cmp	r3, #0
 801080c:	d006      	beq.n	801081c <tcp_input+0x614>
 801080e:	4b50      	ldr	r3, [pc, #320]	; (8010950 <tcp_input+0x748>)
 8010810:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8010814:	494f      	ldr	r1, [pc, #316]	; (8010954 <tcp_input+0x74c>)
 8010816:	4850      	ldr	r0, [pc, #320]	; (8010958 <tcp_input+0x750>)
 8010818:	f008 ff8c 	bl	8019734 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801081c:	69fb      	ldr	r3, [r7, #28]
 801081e:	8b5b      	ldrh	r3, [r3, #26]
 8010820:	f003 0310 	and.w	r3, r3, #16
 8010824:	2b00      	cmp	r3, #0
 8010826:	d008      	beq.n	801083a <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8010828:	4b42      	ldr	r3, [pc, #264]	; (8010934 <tcp_input+0x72c>)
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	4618      	mov	r0, r3
 801082e:	f7fd fea7 	bl	800e580 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8010832:	69f8      	ldr	r0, [r7, #28]
 8010834:	f7fe fc48 	bl	800f0c8 <tcp_abort>
            goto aborted;
 8010838:	e091      	b.n	801095e <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801083a:	69fb      	ldr	r3, [r7, #28]
 801083c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010840:	2b00      	cmp	r3, #0
 8010842:	d00c      	beq.n	801085e <tcp_input+0x656>
 8010844:	69fb      	ldr	r3, [r7, #28]
 8010846:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801084a:	69fb      	ldr	r3, [r7, #28]
 801084c:	6918      	ldr	r0, [r3, #16]
 801084e:	4b39      	ldr	r3, [pc, #228]	; (8010934 <tcp_input+0x72c>)
 8010850:	681a      	ldr	r2, [r3, #0]
 8010852:	2300      	movs	r3, #0
 8010854:	69f9      	ldr	r1, [r7, #28]
 8010856:	47a0      	blx	r4
 8010858:	4603      	mov	r3, r0
 801085a:	74fb      	strb	r3, [r7, #19]
 801085c:	e008      	b.n	8010870 <tcp_input+0x668>
 801085e:	4b35      	ldr	r3, [pc, #212]	; (8010934 <tcp_input+0x72c>)
 8010860:	681a      	ldr	r2, [r3, #0]
 8010862:	2300      	movs	r3, #0
 8010864:	69f9      	ldr	r1, [r7, #28]
 8010866:	2000      	movs	r0, #0
 8010868:	f7ff f95e 	bl	800fb28 <tcp_recv_null>
 801086c:	4603      	mov	r3, r0
 801086e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8010870:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010874:	f113 0f0d 	cmn.w	r3, #13
 8010878:	d053      	beq.n	8010922 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801087a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801087e:	2b00      	cmp	r3, #0
 8010880:	d003      	beq.n	801088a <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8010882:	4b2c      	ldr	r3, [pc, #176]	; (8010934 <tcp_input+0x72c>)
 8010884:	681a      	ldr	r2, [r3, #0]
 8010886:	69fb      	ldr	r3, [r7, #28]
 8010888:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801088a:	4b2b      	ldr	r3, [pc, #172]	; (8010938 <tcp_input+0x730>)
 801088c:	781b      	ldrb	r3, [r3, #0]
 801088e:	f003 0320 	and.w	r3, r3, #32
 8010892:	2b00      	cmp	r3, #0
 8010894:	d030      	beq.n	80108f8 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8010896:	69fb      	ldr	r3, [r7, #28]
 8010898:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801089a:	2b00      	cmp	r3, #0
 801089c:	d009      	beq.n	80108b2 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801089e:	69fb      	ldr	r3, [r7, #28]
 80108a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80108a2:	7b5a      	ldrb	r2, [r3, #13]
 80108a4:	69fb      	ldr	r3, [r7, #28]
 80108a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80108a8:	f042 0220 	orr.w	r2, r2, #32
 80108ac:	b2d2      	uxtb	r2, r2
 80108ae:	735a      	strb	r2, [r3, #13]
 80108b0:	e022      	b.n	80108f8 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80108b2:	69fb      	ldr	r3, [r7, #28]
 80108b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80108b6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80108ba:	d005      	beq.n	80108c8 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 80108bc:	69fb      	ldr	r3, [r7, #28]
 80108be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80108c0:	3301      	adds	r3, #1
 80108c2:	b29a      	uxth	r2, r3
 80108c4:	69fb      	ldr	r3, [r7, #28]
 80108c6:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80108c8:	69fb      	ldr	r3, [r7, #28]
 80108ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d00b      	beq.n	80108ea <tcp_input+0x6e2>
 80108d2:	69fb      	ldr	r3, [r7, #28]
 80108d4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80108d8:	69fb      	ldr	r3, [r7, #28]
 80108da:	6918      	ldr	r0, [r3, #16]
 80108dc:	2300      	movs	r3, #0
 80108de:	2200      	movs	r2, #0
 80108e0:	69f9      	ldr	r1, [r7, #28]
 80108e2:	47a0      	blx	r4
 80108e4:	4603      	mov	r3, r0
 80108e6:	74fb      	strb	r3, [r7, #19]
 80108e8:	e001      	b.n	80108ee <tcp_input+0x6e6>
 80108ea:	2300      	movs	r3, #0
 80108ec:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80108ee:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80108f2:	f113 0f0d 	cmn.w	r3, #13
 80108f6:	d016      	beq.n	8010926 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80108f8:	4b13      	ldr	r3, [pc, #76]	; (8010948 <tcp_input+0x740>)
 80108fa:	2200      	movs	r2, #0
 80108fc:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80108fe:	69f8      	ldr	r0, [r7, #28]
 8010900:	f000 f88e 	bl	8010a20 <tcp_input_delayed_close>
 8010904:	4603      	mov	r3, r0
 8010906:	2b00      	cmp	r3, #0
 8010908:	d128      	bne.n	801095c <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801090a:	69f8      	ldr	r0, [r7, #28]
 801090c:	f002 fac8 	bl	8012ea0 <tcp_output>
 8010910:	e025      	b.n	801095e <tcp_input+0x756>
        goto aborted;
 8010912:	bf00      	nop
 8010914:	e023      	b.n	801095e <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8010916:	bf00      	nop
 8010918:	e021      	b.n	801095e <tcp_input+0x756>
              goto aborted;
 801091a:	bf00      	nop
 801091c:	e01f      	b.n	801095e <tcp_input+0x756>
          goto aborted;
 801091e:	bf00      	nop
 8010920:	e01d      	b.n	801095e <tcp_input+0x756>
            goto aborted;
 8010922:	bf00      	nop
 8010924:	e01b      	b.n	801095e <tcp_input+0x756>
              goto aborted;
 8010926:	bf00      	nop
 8010928:	e019      	b.n	801095e <tcp_input+0x756>
 801092a:	bf00      	nop
 801092c:	2001383c 	.word	0x2001383c
 8010930:	2001384c 	.word	0x2001384c
 8010934:	2001386c 	.word	0x2001386c
 8010938:	20013869 	.word	0x20013869
 801093c:	20013864 	.word	0x20013864
 8010940:	20013868 	.word	0x20013868
 8010944:	20013866 	.word	0x20013866
 8010948:	2001b674 	.word	0x2001b674
 801094c:	2001b660 	.word	0x2001b660
 8010950:	0801b560 	.word	0x0801b560
 8010954:	0801b714 	.word	0x0801b714
 8010958:	0801b5ac 	.word	0x0801b5ac
          goto aborted;
 801095c:	bf00      	nop
    tcp_input_pcb = NULL;
 801095e:	4b27      	ldr	r3, [pc, #156]	; (80109fc <tcp_input+0x7f4>)
 8010960:	2200      	movs	r2, #0
 8010962:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8010964:	4b26      	ldr	r3, [pc, #152]	; (8010a00 <tcp_input+0x7f8>)
 8010966:	2200      	movs	r2, #0
 8010968:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 801096a:	4b26      	ldr	r3, [pc, #152]	; (8010a04 <tcp_input+0x7fc>)
 801096c:	685b      	ldr	r3, [r3, #4]
 801096e:	2b00      	cmp	r3, #0
 8010970:	d03f      	beq.n	80109f2 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8010972:	4b24      	ldr	r3, [pc, #144]	; (8010a04 <tcp_input+0x7fc>)
 8010974:	685b      	ldr	r3, [r3, #4]
 8010976:	4618      	mov	r0, r3
 8010978:	f7fd fe02 	bl	800e580 <pbuf_free>
      inseg.p = NULL;
 801097c:	4b21      	ldr	r3, [pc, #132]	; (8010a04 <tcp_input+0x7fc>)
 801097e:	2200      	movs	r2, #0
 8010980:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8010982:	e036      	b.n	80109f2 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8010984:	4b20      	ldr	r3, [pc, #128]	; (8010a08 <tcp_input+0x800>)
 8010986:	681b      	ldr	r3, [r3, #0]
 8010988:	899b      	ldrh	r3, [r3, #12]
 801098a:	b29b      	uxth	r3, r3
 801098c:	4618      	mov	r0, r3
 801098e:	f7fc fa3f 	bl	800ce10 <lwip_htons>
 8010992:	4603      	mov	r3, r0
 8010994:	b2db      	uxtb	r3, r3
 8010996:	f003 0304 	and.w	r3, r3, #4
 801099a:	2b00      	cmp	r3, #0
 801099c:	d118      	bne.n	80109d0 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801099e:	4b1b      	ldr	r3, [pc, #108]	; (8010a0c <tcp_input+0x804>)
 80109a0:	6819      	ldr	r1, [r3, #0]
 80109a2:	4b1b      	ldr	r3, [pc, #108]	; (8010a10 <tcp_input+0x808>)
 80109a4:	881b      	ldrh	r3, [r3, #0]
 80109a6:	461a      	mov	r2, r3
 80109a8:	4b1a      	ldr	r3, [pc, #104]	; (8010a14 <tcp_input+0x80c>)
 80109aa:	681b      	ldr	r3, [r3, #0]
 80109ac:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80109ae:	4b16      	ldr	r3, [pc, #88]	; (8010a08 <tcp_input+0x800>)
 80109b0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80109b2:	885b      	ldrh	r3, [r3, #2]
 80109b4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80109b6:	4a14      	ldr	r2, [pc, #80]	; (8010a08 <tcp_input+0x800>)
 80109b8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80109ba:	8812      	ldrh	r2, [r2, #0]
 80109bc:	b292      	uxth	r2, r2
 80109be:	9202      	str	r2, [sp, #8]
 80109c0:	9301      	str	r3, [sp, #4]
 80109c2:	4b15      	ldr	r3, [pc, #84]	; (8010a18 <tcp_input+0x810>)
 80109c4:	9300      	str	r3, [sp, #0]
 80109c6:	4b15      	ldr	r3, [pc, #84]	; (8010a1c <tcp_input+0x814>)
 80109c8:	4602      	mov	r2, r0
 80109ca:	2000      	movs	r0, #0
 80109cc:	f003 f81c 	bl	8013a08 <tcp_rst>
    pbuf_free(p);
 80109d0:	6878      	ldr	r0, [r7, #4]
 80109d2:	f7fd fdd5 	bl	800e580 <pbuf_free>
  return;
 80109d6:	e00c      	b.n	80109f2 <tcp_input+0x7ea>
    goto dropped;
 80109d8:	bf00      	nop
 80109da:	e006      	b.n	80109ea <tcp_input+0x7e2>
    goto dropped;
 80109dc:	bf00      	nop
 80109de:	e004      	b.n	80109ea <tcp_input+0x7e2>
    goto dropped;
 80109e0:	bf00      	nop
 80109e2:	e002      	b.n	80109ea <tcp_input+0x7e2>
      goto dropped;
 80109e4:	bf00      	nop
 80109e6:	e000      	b.n	80109ea <tcp_input+0x7e2>
      goto dropped;
 80109e8:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80109ea:	6878      	ldr	r0, [r7, #4]
 80109ec:	f7fd fdc8 	bl	800e580 <pbuf_free>
 80109f0:	e000      	b.n	80109f4 <tcp_input+0x7ec>
  return;
 80109f2:	bf00      	nop
}
 80109f4:	3724      	adds	r7, #36	; 0x24
 80109f6:	46bd      	mov	sp, r7
 80109f8:	bd90      	pop	{r4, r7, pc}
 80109fa:	bf00      	nop
 80109fc:	2001b674 	.word	0x2001b674
 8010a00:	2001386c 	.word	0x2001386c
 8010a04:	2001383c 	.word	0x2001383c
 8010a08:	2001384c 	.word	0x2001384c
 8010a0c:	20013860 	.word	0x20013860
 8010a10:	20013866 	.word	0x20013866
 8010a14:	2001385c 	.word	0x2001385c
 8010a18:	2001717c 	.word	0x2001717c
 8010a1c:	20017180 	.word	0x20017180

08010a20 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8010a20:	b580      	push	{r7, lr}
 8010a22:	b082      	sub	sp, #8
 8010a24:	af00      	add	r7, sp, #0
 8010a26:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	d106      	bne.n	8010a3c <tcp_input_delayed_close+0x1c>
 8010a2e:	4b17      	ldr	r3, [pc, #92]	; (8010a8c <tcp_input_delayed_close+0x6c>)
 8010a30:	f240 225a 	movw	r2, #602	; 0x25a
 8010a34:	4916      	ldr	r1, [pc, #88]	; (8010a90 <tcp_input_delayed_close+0x70>)
 8010a36:	4817      	ldr	r0, [pc, #92]	; (8010a94 <tcp_input_delayed_close+0x74>)
 8010a38:	f008 fe7c 	bl	8019734 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8010a3c:	4b16      	ldr	r3, [pc, #88]	; (8010a98 <tcp_input_delayed_close+0x78>)
 8010a3e:	781b      	ldrb	r3, [r3, #0]
 8010a40:	f003 0310 	and.w	r3, r3, #16
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d01c      	beq.n	8010a82 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	8b5b      	ldrh	r3, [r3, #26]
 8010a4c:	f003 0310 	and.w	r3, r3, #16
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	d10d      	bne.n	8010a70 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	d008      	beq.n	8010a70 <tcp_input_delayed_close+0x50>
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010a64:	687a      	ldr	r2, [r7, #4]
 8010a66:	6912      	ldr	r2, [r2, #16]
 8010a68:	f06f 010e 	mvn.w	r1, #14
 8010a6c:	4610      	mov	r0, r2
 8010a6e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8010a70:	6879      	ldr	r1, [r7, #4]
 8010a72:	480a      	ldr	r0, [pc, #40]	; (8010a9c <tcp_input_delayed_close+0x7c>)
 8010a74:	f7ff fa50 	bl	800ff18 <tcp_pcb_remove>
    tcp_free(pcb);
 8010a78:	6878      	ldr	r0, [r7, #4]
 8010a7a:	f7fe f83d 	bl	800eaf8 <tcp_free>
    return 1;
 8010a7e:	2301      	movs	r3, #1
 8010a80:	e000      	b.n	8010a84 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8010a82:	2300      	movs	r3, #0
}
 8010a84:	4618      	mov	r0, r3
 8010a86:	3708      	adds	r7, #8
 8010a88:	46bd      	mov	sp, r7
 8010a8a:	bd80      	pop	{r7, pc}
 8010a8c:	0801b560 	.word	0x0801b560
 8010a90:	0801b730 	.word	0x0801b730
 8010a94:	0801b5ac 	.word	0x0801b5ac
 8010a98:	20013869 	.word	0x20013869
 8010a9c:	2001b660 	.word	0x2001b660

08010aa0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8010aa0:	b590      	push	{r4, r7, lr}
 8010aa2:	b08b      	sub	sp, #44	; 0x2c
 8010aa4:	af04      	add	r7, sp, #16
 8010aa6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8010aa8:	4b6f      	ldr	r3, [pc, #444]	; (8010c68 <tcp_listen_input+0x1c8>)
 8010aaa:	781b      	ldrb	r3, [r3, #0]
 8010aac:	f003 0304 	and.w	r3, r3, #4
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	f040 80d2 	bne.w	8010c5a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	d106      	bne.n	8010aca <tcp_listen_input+0x2a>
 8010abc:	4b6b      	ldr	r3, [pc, #428]	; (8010c6c <tcp_listen_input+0x1cc>)
 8010abe:	f240 2281 	movw	r2, #641	; 0x281
 8010ac2:	496b      	ldr	r1, [pc, #428]	; (8010c70 <tcp_listen_input+0x1d0>)
 8010ac4:	486b      	ldr	r0, [pc, #428]	; (8010c74 <tcp_listen_input+0x1d4>)
 8010ac6:	f008 fe35 	bl	8019734 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8010aca:	4b67      	ldr	r3, [pc, #412]	; (8010c68 <tcp_listen_input+0x1c8>)
 8010acc:	781b      	ldrb	r3, [r3, #0]
 8010ace:	f003 0310 	and.w	r3, r3, #16
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	d019      	beq.n	8010b0a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010ad6:	4b68      	ldr	r3, [pc, #416]	; (8010c78 <tcp_listen_input+0x1d8>)
 8010ad8:	6819      	ldr	r1, [r3, #0]
 8010ada:	4b68      	ldr	r3, [pc, #416]	; (8010c7c <tcp_listen_input+0x1dc>)
 8010adc:	881b      	ldrh	r3, [r3, #0]
 8010ade:	461a      	mov	r2, r3
 8010ae0:	4b67      	ldr	r3, [pc, #412]	; (8010c80 <tcp_listen_input+0x1e0>)
 8010ae2:	681b      	ldr	r3, [r3, #0]
 8010ae4:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010ae6:	4b67      	ldr	r3, [pc, #412]	; (8010c84 <tcp_listen_input+0x1e4>)
 8010ae8:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010aea:	885b      	ldrh	r3, [r3, #2]
 8010aec:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010aee:	4a65      	ldr	r2, [pc, #404]	; (8010c84 <tcp_listen_input+0x1e4>)
 8010af0:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010af2:	8812      	ldrh	r2, [r2, #0]
 8010af4:	b292      	uxth	r2, r2
 8010af6:	9202      	str	r2, [sp, #8]
 8010af8:	9301      	str	r3, [sp, #4]
 8010afa:	4b63      	ldr	r3, [pc, #396]	; (8010c88 <tcp_listen_input+0x1e8>)
 8010afc:	9300      	str	r3, [sp, #0]
 8010afe:	4b63      	ldr	r3, [pc, #396]	; (8010c8c <tcp_listen_input+0x1ec>)
 8010b00:	4602      	mov	r2, r0
 8010b02:	6878      	ldr	r0, [r7, #4]
 8010b04:	f002 ff80 	bl	8013a08 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8010b08:	e0a9      	b.n	8010c5e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8010b0a:	4b57      	ldr	r3, [pc, #348]	; (8010c68 <tcp_listen_input+0x1c8>)
 8010b0c:	781b      	ldrb	r3, [r3, #0]
 8010b0e:	f003 0302 	and.w	r3, r3, #2
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	f000 80a3 	beq.w	8010c5e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	7d5b      	ldrb	r3, [r3, #21]
 8010b1c:	4618      	mov	r0, r3
 8010b1e:	f7ff f927 	bl	800fd70 <tcp_alloc>
 8010b22:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8010b24:	697b      	ldr	r3, [r7, #20]
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	d111      	bne.n	8010b4e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	699b      	ldr	r3, [r3, #24]
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d00a      	beq.n	8010b48 <tcp_listen_input+0xa8>
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	699b      	ldr	r3, [r3, #24]
 8010b36:	687a      	ldr	r2, [r7, #4]
 8010b38:	6910      	ldr	r0, [r2, #16]
 8010b3a:	f04f 32ff 	mov.w	r2, #4294967295
 8010b3e:	2100      	movs	r1, #0
 8010b40:	4798      	blx	r3
 8010b42:	4603      	mov	r3, r0
 8010b44:	73bb      	strb	r3, [r7, #14]
      return;
 8010b46:	e08b      	b.n	8010c60 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8010b48:	23f0      	movs	r3, #240	; 0xf0
 8010b4a:	73bb      	strb	r3, [r7, #14]
      return;
 8010b4c:	e088      	b.n	8010c60 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8010b4e:	4b50      	ldr	r3, [pc, #320]	; (8010c90 <tcp_listen_input+0x1f0>)
 8010b50:	695a      	ldr	r2, [r3, #20]
 8010b52:	697b      	ldr	r3, [r7, #20]
 8010b54:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8010b56:	4b4e      	ldr	r3, [pc, #312]	; (8010c90 <tcp_listen_input+0x1f0>)
 8010b58:	691a      	ldr	r2, [r3, #16]
 8010b5a:	697b      	ldr	r3, [r7, #20]
 8010b5c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	8ada      	ldrh	r2, [r3, #22]
 8010b62:	697b      	ldr	r3, [r7, #20]
 8010b64:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8010b66:	4b47      	ldr	r3, [pc, #284]	; (8010c84 <tcp_listen_input+0x1e4>)
 8010b68:	681b      	ldr	r3, [r3, #0]
 8010b6a:	881b      	ldrh	r3, [r3, #0]
 8010b6c:	b29a      	uxth	r2, r3
 8010b6e:	697b      	ldr	r3, [r7, #20]
 8010b70:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8010b72:	697b      	ldr	r3, [r7, #20]
 8010b74:	2203      	movs	r2, #3
 8010b76:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8010b78:	4b41      	ldr	r3, [pc, #260]	; (8010c80 <tcp_listen_input+0x1e0>)
 8010b7a:	681b      	ldr	r3, [r3, #0]
 8010b7c:	1c5a      	adds	r2, r3, #1
 8010b7e:	697b      	ldr	r3, [r7, #20]
 8010b80:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8010b82:	697b      	ldr	r3, [r7, #20]
 8010b84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010b86:	697b      	ldr	r3, [r7, #20]
 8010b88:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8010b8a:	6978      	ldr	r0, [r7, #20]
 8010b8c:	f7ff fa58 	bl	8010040 <tcp_next_iss>
 8010b90:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8010b92:	697b      	ldr	r3, [r7, #20]
 8010b94:	693a      	ldr	r2, [r7, #16]
 8010b96:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8010b98:	697b      	ldr	r3, [r7, #20]
 8010b9a:	693a      	ldr	r2, [r7, #16]
 8010b9c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8010b9e:	697b      	ldr	r3, [r7, #20]
 8010ba0:	693a      	ldr	r2, [r7, #16]
 8010ba2:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8010ba4:	697b      	ldr	r3, [r7, #20]
 8010ba6:	693a      	ldr	r2, [r7, #16]
 8010ba8:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8010baa:	4b35      	ldr	r3, [pc, #212]	; (8010c80 <tcp_listen_input+0x1e0>)
 8010bac:	681b      	ldr	r3, [r3, #0]
 8010bae:	1e5a      	subs	r2, r3, #1
 8010bb0:	697b      	ldr	r3, [r7, #20]
 8010bb2:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	691a      	ldr	r2, [r3, #16]
 8010bb8:	697b      	ldr	r3, [r7, #20]
 8010bba:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8010bbc:	697b      	ldr	r3, [r7, #20]
 8010bbe:	687a      	ldr	r2, [r7, #4]
 8010bc0:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	7a5b      	ldrb	r3, [r3, #9]
 8010bc6:	f003 030c 	and.w	r3, r3, #12
 8010bca:	b2da      	uxtb	r2, r3
 8010bcc:	697b      	ldr	r3, [r7, #20]
 8010bce:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	7a1a      	ldrb	r2, [r3, #8]
 8010bd4:	697b      	ldr	r3, [r7, #20]
 8010bd6:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8010bd8:	4b2e      	ldr	r3, [pc, #184]	; (8010c94 <tcp_listen_input+0x1f4>)
 8010bda:	681a      	ldr	r2, [r3, #0]
 8010bdc:	697b      	ldr	r3, [r7, #20]
 8010bde:	60da      	str	r2, [r3, #12]
 8010be0:	4a2c      	ldr	r2, [pc, #176]	; (8010c94 <tcp_listen_input+0x1f4>)
 8010be2:	697b      	ldr	r3, [r7, #20]
 8010be4:	6013      	str	r3, [r2, #0]
 8010be6:	f003 f8d1 	bl	8013d8c <tcp_timer_needed>
 8010bea:	4b2b      	ldr	r3, [pc, #172]	; (8010c98 <tcp_listen_input+0x1f8>)
 8010bec:	2201      	movs	r2, #1
 8010bee:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8010bf0:	6978      	ldr	r0, [r7, #20]
 8010bf2:	f001 fd8f 	bl	8012714 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8010bf6:	4b23      	ldr	r3, [pc, #140]	; (8010c84 <tcp_listen_input+0x1e4>)
 8010bf8:	681b      	ldr	r3, [r3, #0]
 8010bfa:	89db      	ldrh	r3, [r3, #14]
 8010bfc:	b29a      	uxth	r2, r3
 8010bfe:	697b      	ldr	r3, [r7, #20]
 8010c00:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8010c04:	697b      	ldr	r3, [r7, #20]
 8010c06:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010c0a:	697b      	ldr	r3, [r7, #20]
 8010c0c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8010c10:	697b      	ldr	r3, [r7, #20]
 8010c12:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8010c14:	697b      	ldr	r3, [r7, #20]
 8010c16:	3304      	adds	r3, #4
 8010c18:	4618      	mov	r0, r3
 8010c1a:	f006 fe5d 	bl	80178d8 <ip4_route>
 8010c1e:	4601      	mov	r1, r0
 8010c20:	697b      	ldr	r3, [r7, #20]
 8010c22:	3304      	adds	r3, #4
 8010c24:	461a      	mov	r2, r3
 8010c26:	4620      	mov	r0, r4
 8010c28:	f7ff fa30 	bl	801008c <tcp_eff_send_mss_netif>
 8010c2c:	4603      	mov	r3, r0
 8010c2e:	461a      	mov	r2, r3
 8010c30:	697b      	ldr	r3, [r7, #20]
 8010c32:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8010c34:	2112      	movs	r1, #18
 8010c36:	6978      	ldr	r0, [r7, #20]
 8010c38:	f002 f844 	bl	8012cc4 <tcp_enqueue_flags>
 8010c3c:	4603      	mov	r3, r0
 8010c3e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8010c40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d004      	beq.n	8010c52 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8010c48:	2100      	movs	r1, #0
 8010c4a:	6978      	ldr	r0, [r7, #20]
 8010c4c:	f7fe f97e 	bl	800ef4c <tcp_abandon>
      return;
 8010c50:	e006      	b.n	8010c60 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8010c52:	6978      	ldr	r0, [r7, #20]
 8010c54:	f002 f924 	bl	8012ea0 <tcp_output>
  return;
 8010c58:	e001      	b.n	8010c5e <tcp_listen_input+0x1be>
    return;
 8010c5a:	bf00      	nop
 8010c5c:	e000      	b.n	8010c60 <tcp_listen_input+0x1c0>
  return;
 8010c5e:	bf00      	nop
}
 8010c60:	371c      	adds	r7, #28
 8010c62:	46bd      	mov	sp, r7
 8010c64:	bd90      	pop	{r4, r7, pc}
 8010c66:	bf00      	nop
 8010c68:	20013868 	.word	0x20013868
 8010c6c:	0801b560 	.word	0x0801b560
 8010c70:	0801b758 	.word	0x0801b758
 8010c74:	0801b5ac 	.word	0x0801b5ac
 8010c78:	20013860 	.word	0x20013860
 8010c7c:	20013866 	.word	0x20013866
 8010c80:	2001385c 	.word	0x2001385c
 8010c84:	2001384c 	.word	0x2001384c
 8010c88:	2001717c 	.word	0x2001717c
 8010c8c:	20017180 	.word	0x20017180
 8010c90:	2001716c 	.word	0x2001716c
 8010c94:	2001b660 	.word	0x2001b660
 8010c98:	2001b65c 	.word	0x2001b65c

08010c9c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8010c9c:	b580      	push	{r7, lr}
 8010c9e:	b086      	sub	sp, #24
 8010ca0:	af04      	add	r7, sp, #16
 8010ca2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8010ca4:	4b2f      	ldr	r3, [pc, #188]	; (8010d64 <tcp_timewait_input+0xc8>)
 8010ca6:	781b      	ldrb	r3, [r3, #0]
 8010ca8:	f003 0304 	and.w	r3, r3, #4
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d153      	bne.n	8010d58 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	d106      	bne.n	8010cc4 <tcp_timewait_input+0x28>
 8010cb6:	4b2c      	ldr	r3, [pc, #176]	; (8010d68 <tcp_timewait_input+0xcc>)
 8010cb8:	f240 22ee 	movw	r2, #750	; 0x2ee
 8010cbc:	492b      	ldr	r1, [pc, #172]	; (8010d6c <tcp_timewait_input+0xd0>)
 8010cbe:	482c      	ldr	r0, [pc, #176]	; (8010d70 <tcp_timewait_input+0xd4>)
 8010cc0:	f008 fd38 	bl	8019734 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8010cc4:	4b27      	ldr	r3, [pc, #156]	; (8010d64 <tcp_timewait_input+0xc8>)
 8010cc6:	781b      	ldrb	r3, [r3, #0]
 8010cc8:	f003 0302 	and.w	r3, r3, #2
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	d02a      	beq.n	8010d26 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8010cd0:	4b28      	ldr	r3, [pc, #160]	; (8010d74 <tcp_timewait_input+0xd8>)
 8010cd2:	681a      	ldr	r2, [r3, #0]
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010cd8:	1ad3      	subs	r3, r2, r3
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	db2d      	blt.n	8010d3a <tcp_timewait_input+0x9e>
 8010cde:	4b25      	ldr	r3, [pc, #148]	; (8010d74 <tcp_timewait_input+0xd8>)
 8010ce0:	681a      	ldr	r2, [r3, #0]
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ce6:	6879      	ldr	r1, [r7, #4]
 8010ce8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010cea:	440b      	add	r3, r1
 8010cec:	1ad3      	subs	r3, r2, r3
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	dc23      	bgt.n	8010d3a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010cf2:	4b21      	ldr	r3, [pc, #132]	; (8010d78 <tcp_timewait_input+0xdc>)
 8010cf4:	6819      	ldr	r1, [r3, #0]
 8010cf6:	4b21      	ldr	r3, [pc, #132]	; (8010d7c <tcp_timewait_input+0xe0>)
 8010cf8:	881b      	ldrh	r3, [r3, #0]
 8010cfa:	461a      	mov	r2, r3
 8010cfc:	4b1d      	ldr	r3, [pc, #116]	; (8010d74 <tcp_timewait_input+0xd8>)
 8010cfe:	681b      	ldr	r3, [r3, #0]
 8010d00:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010d02:	4b1f      	ldr	r3, [pc, #124]	; (8010d80 <tcp_timewait_input+0xe4>)
 8010d04:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010d06:	885b      	ldrh	r3, [r3, #2]
 8010d08:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010d0a:	4a1d      	ldr	r2, [pc, #116]	; (8010d80 <tcp_timewait_input+0xe4>)
 8010d0c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010d0e:	8812      	ldrh	r2, [r2, #0]
 8010d10:	b292      	uxth	r2, r2
 8010d12:	9202      	str	r2, [sp, #8]
 8010d14:	9301      	str	r3, [sp, #4]
 8010d16:	4b1b      	ldr	r3, [pc, #108]	; (8010d84 <tcp_timewait_input+0xe8>)
 8010d18:	9300      	str	r3, [sp, #0]
 8010d1a:	4b1b      	ldr	r3, [pc, #108]	; (8010d88 <tcp_timewait_input+0xec>)
 8010d1c:	4602      	mov	r2, r0
 8010d1e:	6878      	ldr	r0, [r7, #4]
 8010d20:	f002 fe72 	bl	8013a08 <tcp_rst>
      return;
 8010d24:	e01b      	b.n	8010d5e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8010d26:	4b0f      	ldr	r3, [pc, #60]	; (8010d64 <tcp_timewait_input+0xc8>)
 8010d28:	781b      	ldrb	r3, [r3, #0]
 8010d2a:	f003 0301 	and.w	r3, r3, #1
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	d003      	beq.n	8010d3a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8010d32:	4b16      	ldr	r3, [pc, #88]	; (8010d8c <tcp_timewait_input+0xf0>)
 8010d34:	681a      	ldr	r2, [r3, #0]
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8010d3a:	4b10      	ldr	r3, [pc, #64]	; (8010d7c <tcp_timewait_input+0xe0>)
 8010d3c:	881b      	ldrh	r3, [r3, #0]
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	d00c      	beq.n	8010d5c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	8b5b      	ldrh	r3, [r3, #26]
 8010d46:	f043 0302 	orr.w	r3, r3, #2
 8010d4a:	b29a      	uxth	r2, r3
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010d50:	6878      	ldr	r0, [r7, #4]
 8010d52:	f002 f8a5 	bl	8012ea0 <tcp_output>
  }
  return;
 8010d56:	e001      	b.n	8010d5c <tcp_timewait_input+0xc0>
    return;
 8010d58:	bf00      	nop
 8010d5a:	e000      	b.n	8010d5e <tcp_timewait_input+0xc2>
  return;
 8010d5c:	bf00      	nop
}
 8010d5e:	3708      	adds	r7, #8
 8010d60:	46bd      	mov	sp, r7
 8010d62:	bd80      	pop	{r7, pc}
 8010d64:	20013868 	.word	0x20013868
 8010d68:	0801b560 	.word	0x0801b560
 8010d6c:	0801b778 	.word	0x0801b778
 8010d70:	0801b5ac 	.word	0x0801b5ac
 8010d74:	2001385c 	.word	0x2001385c
 8010d78:	20013860 	.word	0x20013860
 8010d7c:	20013866 	.word	0x20013866
 8010d80:	2001384c 	.word	0x2001384c
 8010d84:	2001717c 	.word	0x2001717c
 8010d88:	20017180 	.word	0x20017180
 8010d8c:	2001b664 	.word	0x2001b664

08010d90 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8010d90:	b590      	push	{r4, r7, lr}
 8010d92:	b08d      	sub	sp, #52	; 0x34
 8010d94:	af04      	add	r7, sp, #16
 8010d96:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8010d98:	2300      	movs	r3, #0
 8010d9a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8010d9c:	2300      	movs	r3, #0
 8010d9e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	d106      	bne.n	8010db4 <tcp_process+0x24>
 8010da6:	4b9d      	ldr	r3, [pc, #628]	; (801101c <tcp_process+0x28c>)
 8010da8:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8010dac:	499c      	ldr	r1, [pc, #624]	; (8011020 <tcp_process+0x290>)
 8010dae:	489d      	ldr	r0, [pc, #628]	; (8011024 <tcp_process+0x294>)
 8010db0:	f008 fcc0 	bl	8019734 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8010db4:	4b9c      	ldr	r3, [pc, #624]	; (8011028 <tcp_process+0x298>)
 8010db6:	781b      	ldrb	r3, [r3, #0]
 8010db8:	f003 0304 	and.w	r3, r3, #4
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	d04e      	beq.n	8010e5e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	7d1b      	ldrb	r3, [r3, #20]
 8010dc4:	2b02      	cmp	r3, #2
 8010dc6:	d108      	bne.n	8010dda <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010dcc:	4b97      	ldr	r3, [pc, #604]	; (801102c <tcp_process+0x29c>)
 8010dce:	681b      	ldr	r3, [r3, #0]
 8010dd0:	429a      	cmp	r2, r3
 8010dd2:	d123      	bne.n	8010e1c <tcp_process+0x8c>
        acceptable = 1;
 8010dd4:	2301      	movs	r3, #1
 8010dd6:	76fb      	strb	r3, [r7, #27]
 8010dd8:	e020      	b.n	8010e1c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010dde:	4b94      	ldr	r3, [pc, #592]	; (8011030 <tcp_process+0x2a0>)
 8010de0:	681b      	ldr	r3, [r3, #0]
 8010de2:	429a      	cmp	r2, r3
 8010de4:	d102      	bne.n	8010dec <tcp_process+0x5c>
        acceptable = 1;
 8010de6:	2301      	movs	r3, #1
 8010de8:	76fb      	strb	r3, [r7, #27]
 8010dea:	e017      	b.n	8010e1c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010dec:	4b90      	ldr	r3, [pc, #576]	; (8011030 <tcp_process+0x2a0>)
 8010dee:	681a      	ldr	r2, [r3, #0]
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010df4:	1ad3      	subs	r3, r2, r3
 8010df6:	2b00      	cmp	r3, #0
 8010df8:	db10      	blt.n	8010e1c <tcp_process+0x8c>
 8010dfa:	4b8d      	ldr	r3, [pc, #564]	; (8011030 <tcp_process+0x2a0>)
 8010dfc:	681a      	ldr	r2, [r3, #0]
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e02:	6879      	ldr	r1, [r7, #4]
 8010e04:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010e06:	440b      	add	r3, r1
 8010e08:	1ad3      	subs	r3, r2, r3
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	dc06      	bgt.n	8010e1c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	8b5b      	ldrh	r3, [r3, #26]
 8010e12:	f043 0302 	orr.w	r3, r3, #2
 8010e16:	b29a      	uxth	r2, r3
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8010e1c:	7efb      	ldrb	r3, [r7, #27]
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	d01b      	beq.n	8010e5a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	7d1b      	ldrb	r3, [r3, #20]
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d106      	bne.n	8010e38 <tcp_process+0xa8>
 8010e2a:	4b7c      	ldr	r3, [pc, #496]	; (801101c <tcp_process+0x28c>)
 8010e2c:	f44f 724e 	mov.w	r2, #824	; 0x338
 8010e30:	4980      	ldr	r1, [pc, #512]	; (8011034 <tcp_process+0x2a4>)
 8010e32:	487c      	ldr	r0, [pc, #496]	; (8011024 <tcp_process+0x294>)
 8010e34:	f008 fc7e 	bl	8019734 <iprintf>
      recv_flags |= TF_RESET;
 8010e38:	4b7f      	ldr	r3, [pc, #508]	; (8011038 <tcp_process+0x2a8>)
 8010e3a:	781b      	ldrb	r3, [r3, #0]
 8010e3c:	f043 0308 	orr.w	r3, r3, #8
 8010e40:	b2da      	uxtb	r2, r3
 8010e42:	4b7d      	ldr	r3, [pc, #500]	; (8011038 <tcp_process+0x2a8>)
 8010e44:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	8b5b      	ldrh	r3, [r3, #26]
 8010e4a:	f023 0301 	bic.w	r3, r3, #1
 8010e4e:	b29a      	uxth	r2, r3
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8010e54:	f06f 030d 	mvn.w	r3, #13
 8010e58:	e37a      	b.n	8011550 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8010e5a:	2300      	movs	r3, #0
 8010e5c:	e378      	b.n	8011550 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8010e5e:	4b72      	ldr	r3, [pc, #456]	; (8011028 <tcp_process+0x298>)
 8010e60:	781b      	ldrb	r3, [r3, #0]
 8010e62:	f003 0302 	and.w	r3, r3, #2
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	d010      	beq.n	8010e8c <tcp_process+0xfc>
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	7d1b      	ldrb	r3, [r3, #20]
 8010e6e:	2b02      	cmp	r3, #2
 8010e70:	d00c      	beq.n	8010e8c <tcp_process+0xfc>
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	7d1b      	ldrb	r3, [r3, #20]
 8010e76:	2b03      	cmp	r3, #3
 8010e78:	d008      	beq.n	8010e8c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	8b5b      	ldrh	r3, [r3, #26]
 8010e7e:	f043 0302 	orr.w	r3, r3, #2
 8010e82:	b29a      	uxth	r2, r3
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8010e88:	2300      	movs	r3, #0
 8010e8a:	e361      	b.n	8011550 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	8b5b      	ldrh	r3, [r3, #26]
 8010e90:	f003 0310 	and.w	r3, r3, #16
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	d103      	bne.n	8010ea0 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8010e98:	4b68      	ldr	r3, [pc, #416]	; (801103c <tcp_process+0x2ac>)
 8010e9a:	681a      	ldr	r2, [r3, #0]
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	2200      	movs	r2, #0
 8010ea4:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	2200      	movs	r2, #0
 8010eac:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8010eb0:	6878      	ldr	r0, [r7, #4]
 8010eb2:	f001 fc2f 	bl	8012714 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	7d1b      	ldrb	r3, [r3, #20]
 8010eba:	3b02      	subs	r3, #2
 8010ebc:	2b07      	cmp	r3, #7
 8010ebe:	f200 8337 	bhi.w	8011530 <tcp_process+0x7a0>
 8010ec2:	a201      	add	r2, pc, #4	; (adr r2, 8010ec8 <tcp_process+0x138>)
 8010ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ec8:	08010ee9 	.word	0x08010ee9
 8010ecc:	08011119 	.word	0x08011119
 8010ed0:	08011291 	.word	0x08011291
 8010ed4:	080112bb 	.word	0x080112bb
 8010ed8:	080113df 	.word	0x080113df
 8010edc:	08011291 	.word	0x08011291
 8010ee0:	0801146b 	.word	0x0801146b
 8010ee4:	080114fb 	.word	0x080114fb
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8010ee8:	4b4f      	ldr	r3, [pc, #316]	; (8011028 <tcp_process+0x298>)
 8010eea:	781b      	ldrb	r3, [r3, #0]
 8010eec:	f003 0310 	and.w	r3, r3, #16
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	f000 80e4 	beq.w	80110be <tcp_process+0x32e>
 8010ef6:	4b4c      	ldr	r3, [pc, #304]	; (8011028 <tcp_process+0x298>)
 8010ef8:	781b      	ldrb	r3, [r3, #0]
 8010efa:	f003 0302 	and.w	r3, r3, #2
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	f000 80dd 	beq.w	80110be <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010f08:	1c5a      	adds	r2, r3, #1
 8010f0a:	4b48      	ldr	r3, [pc, #288]	; (801102c <tcp_process+0x29c>)
 8010f0c:	681b      	ldr	r3, [r3, #0]
 8010f0e:	429a      	cmp	r2, r3
 8010f10:	f040 80d5 	bne.w	80110be <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8010f14:	4b46      	ldr	r3, [pc, #280]	; (8011030 <tcp_process+0x2a0>)
 8010f16:	681b      	ldr	r3, [r3, #0]
 8010f18:	1c5a      	adds	r2, r3, #1
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8010f26:	4b41      	ldr	r3, [pc, #260]	; (801102c <tcp_process+0x29c>)
 8010f28:	681a      	ldr	r2, [r3, #0]
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8010f2e:	4b44      	ldr	r3, [pc, #272]	; (8011040 <tcp_process+0x2b0>)
 8010f30:	681b      	ldr	r3, [r3, #0]
 8010f32:	89db      	ldrh	r3, [r3, #14]
 8010f34:	b29a      	uxth	r2, r3
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8010f48:	4b39      	ldr	r3, [pc, #228]	; (8011030 <tcp_process+0x2a0>)
 8010f4a:	681b      	ldr	r3, [r3, #0]
 8010f4c:	1e5a      	subs	r2, r3, #1
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	2204      	movs	r2, #4
 8010f56:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	3304      	adds	r3, #4
 8010f60:	4618      	mov	r0, r3
 8010f62:	f006 fcb9 	bl	80178d8 <ip4_route>
 8010f66:	4601      	mov	r1, r0
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	3304      	adds	r3, #4
 8010f6c:	461a      	mov	r2, r3
 8010f6e:	4620      	mov	r0, r4
 8010f70:	f7ff f88c 	bl	801008c <tcp_eff_send_mss_netif>
 8010f74:	4603      	mov	r3, r0
 8010f76:	461a      	mov	r2, r3
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010f80:	009a      	lsls	r2, r3, #2
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010f86:	005b      	lsls	r3, r3, #1
 8010f88:	f241 111c 	movw	r1, #4380	; 0x111c
 8010f8c:	428b      	cmp	r3, r1
 8010f8e:	bf38      	it	cc
 8010f90:	460b      	movcc	r3, r1
 8010f92:	429a      	cmp	r2, r3
 8010f94:	d204      	bcs.n	8010fa0 <tcp_process+0x210>
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010f9a:	009b      	lsls	r3, r3, #2
 8010f9c:	b29b      	uxth	r3, r3
 8010f9e:	e00d      	b.n	8010fbc <tcp_process+0x22c>
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010fa4:	005b      	lsls	r3, r3, #1
 8010fa6:	f241 121c 	movw	r2, #4380	; 0x111c
 8010faa:	4293      	cmp	r3, r2
 8010fac:	d904      	bls.n	8010fb8 <tcp_process+0x228>
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010fb2:	005b      	lsls	r3, r3, #1
 8010fb4:	b29b      	uxth	r3, r3
 8010fb6:	e001      	b.n	8010fbc <tcp_process+0x22c>
 8010fb8:	f241 131c 	movw	r3, #4380	; 0x111c
 8010fbc:	687a      	ldr	r2, [r7, #4]
 8010fbe:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	d106      	bne.n	8010fda <tcp_process+0x24a>
 8010fcc:	4b13      	ldr	r3, [pc, #76]	; (801101c <tcp_process+0x28c>)
 8010fce:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8010fd2:	491c      	ldr	r1, [pc, #112]	; (8011044 <tcp_process+0x2b4>)
 8010fd4:	4813      	ldr	r0, [pc, #76]	; (8011024 <tcp_process+0x294>)
 8010fd6:	f008 fbad 	bl	8019734 <iprintf>
        --pcb->snd_queuelen;
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010fe0:	3b01      	subs	r3, #1
 8010fe2:	b29a      	uxth	r2, r3
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010fee:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8010ff0:	69fb      	ldr	r3, [r7, #28]
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d12a      	bne.n	801104c <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010ffa:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8010ffc:	69fb      	ldr	r3, [r7, #28]
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d106      	bne.n	8011010 <tcp_process+0x280>
 8011002:	4b06      	ldr	r3, [pc, #24]	; (801101c <tcp_process+0x28c>)
 8011004:	f44f 725d 	mov.w	r2, #884	; 0x374
 8011008:	490f      	ldr	r1, [pc, #60]	; (8011048 <tcp_process+0x2b8>)
 801100a:	4806      	ldr	r0, [pc, #24]	; (8011024 <tcp_process+0x294>)
 801100c:	f008 fb92 	bl	8019734 <iprintf>
          pcb->unsent = rseg->next;
 8011010:	69fb      	ldr	r3, [r7, #28]
 8011012:	681a      	ldr	r2, [r3, #0]
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	66da      	str	r2, [r3, #108]	; 0x6c
 8011018:	e01c      	b.n	8011054 <tcp_process+0x2c4>
 801101a:	bf00      	nop
 801101c:	0801b560 	.word	0x0801b560
 8011020:	0801b798 	.word	0x0801b798
 8011024:	0801b5ac 	.word	0x0801b5ac
 8011028:	20013868 	.word	0x20013868
 801102c:	20013860 	.word	0x20013860
 8011030:	2001385c 	.word	0x2001385c
 8011034:	0801b7b4 	.word	0x0801b7b4
 8011038:	20013869 	.word	0x20013869
 801103c:	2001b664 	.word	0x2001b664
 8011040:	2001384c 	.word	0x2001384c
 8011044:	0801b7d4 	.word	0x0801b7d4
 8011048:	0801b7ec 	.word	0x0801b7ec
        } else {
          pcb->unacked = rseg->next;
 801104c:	69fb      	ldr	r3, [r7, #28]
 801104e:	681a      	ldr	r2, [r3, #0]
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8011054:	69f8      	ldr	r0, [r7, #28]
 8011056:	f7fe fd22 	bl	800fa9e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801105e:	2b00      	cmp	r3, #0
 8011060:	d104      	bne.n	801106c <tcp_process+0x2dc>
          pcb->rtime = -1;
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011068:	861a      	strh	r2, [r3, #48]	; 0x30
 801106a:	e006      	b.n	801107a <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	2200      	movs	r2, #0
 8011070:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	2200      	movs	r2, #0
 8011076:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011080:	2b00      	cmp	r3, #0
 8011082:	d00a      	beq.n	801109a <tcp_process+0x30a>
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801108a:	687a      	ldr	r2, [r7, #4]
 801108c:	6910      	ldr	r0, [r2, #16]
 801108e:	2200      	movs	r2, #0
 8011090:	6879      	ldr	r1, [r7, #4]
 8011092:	4798      	blx	r3
 8011094:	4603      	mov	r3, r0
 8011096:	76bb      	strb	r3, [r7, #26]
 8011098:	e001      	b.n	801109e <tcp_process+0x30e>
 801109a:	2300      	movs	r3, #0
 801109c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801109e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80110a2:	f113 0f0d 	cmn.w	r3, #13
 80110a6:	d102      	bne.n	80110ae <tcp_process+0x31e>
          return ERR_ABRT;
 80110a8:	f06f 030c 	mvn.w	r3, #12
 80110ac:	e250      	b.n	8011550 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	8b5b      	ldrh	r3, [r3, #26]
 80110b2:	f043 0302 	orr.w	r3, r3, #2
 80110b6:	b29a      	uxth	r2, r3
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80110bc:	e23a      	b.n	8011534 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80110be:	4b98      	ldr	r3, [pc, #608]	; (8011320 <tcp_process+0x590>)
 80110c0:	781b      	ldrb	r3, [r3, #0]
 80110c2:	f003 0310 	and.w	r3, r3, #16
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	f000 8234 	beq.w	8011534 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80110cc:	4b95      	ldr	r3, [pc, #596]	; (8011324 <tcp_process+0x594>)
 80110ce:	6819      	ldr	r1, [r3, #0]
 80110d0:	4b95      	ldr	r3, [pc, #596]	; (8011328 <tcp_process+0x598>)
 80110d2:	881b      	ldrh	r3, [r3, #0]
 80110d4:	461a      	mov	r2, r3
 80110d6:	4b95      	ldr	r3, [pc, #596]	; (801132c <tcp_process+0x59c>)
 80110d8:	681b      	ldr	r3, [r3, #0]
 80110da:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80110dc:	4b94      	ldr	r3, [pc, #592]	; (8011330 <tcp_process+0x5a0>)
 80110de:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80110e0:	885b      	ldrh	r3, [r3, #2]
 80110e2:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80110e4:	4a92      	ldr	r2, [pc, #584]	; (8011330 <tcp_process+0x5a0>)
 80110e6:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80110e8:	8812      	ldrh	r2, [r2, #0]
 80110ea:	b292      	uxth	r2, r2
 80110ec:	9202      	str	r2, [sp, #8]
 80110ee:	9301      	str	r3, [sp, #4]
 80110f0:	4b90      	ldr	r3, [pc, #576]	; (8011334 <tcp_process+0x5a4>)
 80110f2:	9300      	str	r3, [sp, #0]
 80110f4:	4b90      	ldr	r3, [pc, #576]	; (8011338 <tcp_process+0x5a8>)
 80110f6:	4602      	mov	r2, r0
 80110f8:	6878      	ldr	r0, [r7, #4]
 80110fa:	f002 fc85 	bl	8013a08 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011104:	2b05      	cmp	r3, #5
 8011106:	f200 8215 	bhi.w	8011534 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	2200      	movs	r2, #0
 801110e:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8011110:	6878      	ldr	r0, [r7, #4]
 8011112:	f002 fa4f 	bl	80135b4 <tcp_rexmit_rto>
      break;
 8011116:	e20d      	b.n	8011534 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8011118:	4b81      	ldr	r3, [pc, #516]	; (8011320 <tcp_process+0x590>)
 801111a:	781b      	ldrb	r3, [r3, #0]
 801111c:	f003 0310 	and.w	r3, r3, #16
 8011120:	2b00      	cmp	r3, #0
 8011122:	f000 80a1 	beq.w	8011268 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011126:	4b7f      	ldr	r3, [pc, #508]	; (8011324 <tcp_process+0x594>)
 8011128:	681a      	ldr	r2, [r3, #0]
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801112e:	1ad3      	subs	r3, r2, r3
 8011130:	3b01      	subs	r3, #1
 8011132:	2b00      	cmp	r3, #0
 8011134:	db7e      	blt.n	8011234 <tcp_process+0x4a4>
 8011136:	4b7b      	ldr	r3, [pc, #492]	; (8011324 <tcp_process+0x594>)
 8011138:	681a      	ldr	r2, [r3, #0]
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801113e:	1ad3      	subs	r3, r2, r3
 8011140:	2b00      	cmp	r3, #0
 8011142:	dc77      	bgt.n	8011234 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	2204      	movs	r2, #4
 8011148:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801114e:	2b00      	cmp	r3, #0
 8011150:	d102      	bne.n	8011158 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8011152:	23fa      	movs	r3, #250	; 0xfa
 8011154:	76bb      	strb	r3, [r7, #26]
 8011156:	e01d      	b.n	8011194 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801115c:	699b      	ldr	r3, [r3, #24]
 801115e:	2b00      	cmp	r3, #0
 8011160:	d106      	bne.n	8011170 <tcp_process+0x3e0>
 8011162:	4b76      	ldr	r3, [pc, #472]	; (801133c <tcp_process+0x5ac>)
 8011164:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8011168:	4975      	ldr	r1, [pc, #468]	; (8011340 <tcp_process+0x5b0>)
 801116a:	4876      	ldr	r0, [pc, #472]	; (8011344 <tcp_process+0x5b4>)
 801116c:	f008 fae2 	bl	8019734 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011174:	699b      	ldr	r3, [r3, #24]
 8011176:	2b00      	cmp	r3, #0
 8011178:	d00a      	beq.n	8011190 <tcp_process+0x400>
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801117e:	699b      	ldr	r3, [r3, #24]
 8011180:	687a      	ldr	r2, [r7, #4]
 8011182:	6910      	ldr	r0, [r2, #16]
 8011184:	2200      	movs	r2, #0
 8011186:	6879      	ldr	r1, [r7, #4]
 8011188:	4798      	blx	r3
 801118a:	4603      	mov	r3, r0
 801118c:	76bb      	strb	r3, [r7, #26]
 801118e:	e001      	b.n	8011194 <tcp_process+0x404>
 8011190:	23f0      	movs	r3, #240	; 0xf0
 8011192:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8011194:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8011198:	2b00      	cmp	r3, #0
 801119a:	d00a      	beq.n	80111b2 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 801119c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80111a0:	f113 0f0d 	cmn.w	r3, #13
 80111a4:	d002      	beq.n	80111ac <tcp_process+0x41c>
              tcp_abort(pcb);
 80111a6:	6878      	ldr	r0, [r7, #4]
 80111a8:	f7fd ff8e 	bl	800f0c8 <tcp_abort>
            }
            return ERR_ABRT;
 80111ac:	f06f 030c 	mvn.w	r3, #12
 80111b0:	e1ce      	b.n	8011550 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80111b2:	6878      	ldr	r0, [r7, #4]
 80111b4:	f000 fae0 	bl	8011778 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80111b8:	4b63      	ldr	r3, [pc, #396]	; (8011348 <tcp_process+0x5b8>)
 80111ba:	881b      	ldrh	r3, [r3, #0]
 80111bc:	2b00      	cmp	r3, #0
 80111be:	d005      	beq.n	80111cc <tcp_process+0x43c>
            recv_acked--;
 80111c0:	4b61      	ldr	r3, [pc, #388]	; (8011348 <tcp_process+0x5b8>)
 80111c2:	881b      	ldrh	r3, [r3, #0]
 80111c4:	3b01      	subs	r3, #1
 80111c6:	b29a      	uxth	r2, r3
 80111c8:	4b5f      	ldr	r3, [pc, #380]	; (8011348 <tcp_process+0x5b8>)
 80111ca:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80111d0:	009a      	lsls	r2, r3, #2
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80111d6:	005b      	lsls	r3, r3, #1
 80111d8:	f241 111c 	movw	r1, #4380	; 0x111c
 80111dc:	428b      	cmp	r3, r1
 80111de:	bf38      	it	cc
 80111e0:	460b      	movcc	r3, r1
 80111e2:	429a      	cmp	r2, r3
 80111e4:	d204      	bcs.n	80111f0 <tcp_process+0x460>
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80111ea:	009b      	lsls	r3, r3, #2
 80111ec:	b29b      	uxth	r3, r3
 80111ee:	e00d      	b.n	801120c <tcp_process+0x47c>
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80111f4:	005b      	lsls	r3, r3, #1
 80111f6:	f241 121c 	movw	r2, #4380	; 0x111c
 80111fa:	4293      	cmp	r3, r2
 80111fc:	d904      	bls.n	8011208 <tcp_process+0x478>
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011202:	005b      	lsls	r3, r3, #1
 8011204:	b29b      	uxth	r3, r3
 8011206:	e001      	b.n	801120c <tcp_process+0x47c>
 8011208:	f241 131c 	movw	r3, #4380	; 0x111c
 801120c:	687a      	ldr	r2, [r7, #4]
 801120e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8011212:	4b4e      	ldr	r3, [pc, #312]	; (801134c <tcp_process+0x5bc>)
 8011214:	781b      	ldrb	r3, [r3, #0]
 8011216:	f003 0320 	and.w	r3, r3, #32
 801121a:	2b00      	cmp	r3, #0
 801121c:	d037      	beq.n	801128e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	8b5b      	ldrh	r3, [r3, #26]
 8011222:	f043 0302 	orr.w	r3, r3, #2
 8011226:	b29a      	uxth	r2, r3
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	2207      	movs	r2, #7
 8011230:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8011232:	e02c      	b.n	801128e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011234:	4b3b      	ldr	r3, [pc, #236]	; (8011324 <tcp_process+0x594>)
 8011236:	6819      	ldr	r1, [r3, #0]
 8011238:	4b3b      	ldr	r3, [pc, #236]	; (8011328 <tcp_process+0x598>)
 801123a:	881b      	ldrh	r3, [r3, #0]
 801123c:	461a      	mov	r2, r3
 801123e:	4b3b      	ldr	r3, [pc, #236]	; (801132c <tcp_process+0x59c>)
 8011240:	681b      	ldr	r3, [r3, #0]
 8011242:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011244:	4b3a      	ldr	r3, [pc, #232]	; (8011330 <tcp_process+0x5a0>)
 8011246:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011248:	885b      	ldrh	r3, [r3, #2]
 801124a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801124c:	4a38      	ldr	r2, [pc, #224]	; (8011330 <tcp_process+0x5a0>)
 801124e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011250:	8812      	ldrh	r2, [r2, #0]
 8011252:	b292      	uxth	r2, r2
 8011254:	9202      	str	r2, [sp, #8]
 8011256:	9301      	str	r3, [sp, #4]
 8011258:	4b36      	ldr	r3, [pc, #216]	; (8011334 <tcp_process+0x5a4>)
 801125a:	9300      	str	r3, [sp, #0]
 801125c:	4b36      	ldr	r3, [pc, #216]	; (8011338 <tcp_process+0x5a8>)
 801125e:	4602      	mov	r2, r0
 8011260:	6878      	ldr	r0, [r7, #4]
 8011262:	f002 fbd1 	bl	8013a08 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8011266:	e167      	b.n	8011538 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8011268:	4b2d      	ldr	r3, [pc, #180]	; (8011320 <tcp_process+0x590>)
 801126a:	781b      	ldrb	r3, [r3, #0]
 801126c:	f003 0302 	and.w	r3, r3, #2
 8011270:	2b00      	cmp	r3, #0
 8011272:	f000 8161 	beq.w	8011538 <tcp_process+0x7a8>
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801127a:	1e5a      	subs	r2, r3, #1
 801127c:	4b2b      	ldr	r3, [pc, #172]	; (801132c <tcp_process+0x59c>)
 801127e:	681b      	ldr	r3, [r3, #0]
 8011280:	429a      	cmp	r2, r3
 8011282:	f040 8159 	bne.w	8011538 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8011286:	6878      	ldr	r0, [r7, #4]
 8011288:	f002 f9b6 	bl	80135f8 <tcp_rexmit>
      break;
 801128c:	e154      	b.n	8011538 <tcp_process+0x7a8>
 801128e:	e153      	b.n	8011538 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8011290:	6878      	ldr	r0, [r7, #4]
 8011292:	f000 fa71 	bl	8011778 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8011296:	4b2d      	ldr	r3, [pc, #180]	; (801134c <tcp_process+0x5bc>)
 8011298:	781b      	ldrb	r3, [r3, #0]
 801129a:	f003 0320 	and.w	r3, r3, #32
 801129e:	2b00      	cmp	r3, #0
 80112a0:	f000 814c 	beq.w	801153c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	8b5b      	ldrh	r3, [r3, #26]
 80112a8:	f043 0302 	orr.w	r3, r3, #2
 80112ac:	b29a      	uxth	r2, r3
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	2207      	movs	r2, #7
 80112b6:	751a      	strb	r2, [r3, #20]
      }
      break;
 80112b8:	e140      	b.n	801153c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80112ba:	6878      	ldr	r0, [r7, #4]
 80112bc:	f000 fa5c 	bl	8011778 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80112c0:	4b22      	ldr	r3, [pc, #136]	; (801134c <tcp_process+0x5bc>)
 80112c2:	781b      	ldrb	r3, [r3, #0]
 80112c4:	f003 0320 	and.w	r3, r3, #32
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	d071      	beq.n	80113b0 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80112cc:	4b14      	ldr	r3, [pc, #80]	; (8011320 <tcp_process+0x590>)
 80112ce:	781b      	ldrb	r3, [r3, #0]
 80112d0:	f003 0310 	and.w	r3, r3, #16
 80112d4:	2b00      	cmp	r3, #0
 80112d6:	d060      	beq.n	801139a <tcp_process+0x60a>
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80112dc:	4b11      	ldr	r3, [pc, #68]	; (8011324 <tcp_process+0x594>)
 80112de:	681b      	ldr	r3, [r3, #0]
 80112e0:	429a      	cmp	r2, r3
 80112e2:	d15a      	bne.n	801139a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	d156      	bne.n	801139a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	8b5b      	ldrh	r3, [r3, #26]
 80112f0:	f043 0302 	orr.w	r3, r3, #2
 80112f4:	b29a      	uxth	r2, r3
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80112fa:	6878      	ldr	r0, [r7, #4]
 80112fc:	f7fe fdbc 	bl	800fe78 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8011300:	4b13      	ldr	r3, [pc, #76]	; (8011350 <tcp_process+0x5c0>)
 8011302:	681b      	ldr	r3, [r3, #0]
 8011304:	687a      	ldr	r2, [r7, #4]
 8011306:	429a      	cmp	r2, r3
 8011308:	d105      	bne.n	8011316 <tcp_process+0x586>
 801130a:	4b11      	ldr	r3, [pc, #68]	; (8011350 <tcp_process+0x5c0>)
 801130c:	681b      	ldr	r3, [r3, #0]
 801130e:	68db      	ldr	r3, [r3, #12]
 8011310:	4a0f      	ldr	r2, [pc, #60]	; (8011350 <tcp_process+0x5c0>)
 8011312:	6013      	str	r3, [r2, #0]
 8011314:	e02e      	b.n	8011374 <tcp_process+0x5e4>
 8011316:	4b0e      	ldr	r3, [pc, #56]	; (8011350 <tcp_process+0x5c0>)
 8011318:	681b      	ldr	r3, [r3, #0]
 801131a:	617b      	str	r3, [r7, #20]
 801131c:	e027      	b.n	801136e <tcp_process+0x5de>
 801131e:	bf00      	nop
 8011320:	20013868 	.word	0x20013868
 8011324:	20013860 	.word	0x20013860
 8011328:	20013866 	.word	0x20013866
 801132c:	2001385c 	.word	0x2001385c
 8011330:	2001384c 	.word	0x2001384c
 8011334:	2001717c 	.word	0x2001717c
 8011338:	20017180 	.word	0x20017180
 801133c:	0801b560 	.word	0x0801b560
 8011340:	0801b800 	.word	0x0801b800
 8011344:	0801b5ac 	.word	0x0801b5ac
 8011348:	20013864 	.word	0x20013864
 801134c:	20013869 	.word	0x20013869
 8011350:	2001b660 	.word	0x2001b660
 8011354:	697b      	ldr	r3, [r7, #20]
 8011356:	68db      	ldr	r3, [r3, #12]
 8011358:	687a      	ldr	r2, [r7, #4]
 801135a:	429a      	cmp	r2, r3
 801135c:	d104      	bne.n	8011368 <tcp_process+0x5d8>
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	68da      	ldr	r2, [r3, #12]
 8011362:	697b      	ldr	r3, [r7, #20]
 8011364:	60da      	str	r2, [r3, #12]
 8011366:	e005      	b.n	8011374 <tcp_process+0x5e4>
 8011368:	697b      	ldr	r3, [r7, #20]
 801136a:	68db      	ldr	r3, [r3, #12]
 801136c:	617b      	str	r3, [r7, #20]
 801136e:	697b      	ldr	r3, [r7, #20]
 8011370:	2b00      	cmp	r3, #0
 8011372:	d1ef      	bne.n	8011354 <tcp_process+0x5c4>
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	2200      	movs	r2, #0
 8011378:	60da      	str	r2, [r3, #12]
 801137a:	4b77      	ldr	r3, [pc, #476]	; (8011558 <tcp_process+0x7c8>)
 801137c:	2201      	movs	r2, #1
 801137e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	220a      	movs	r2, #10
 8011384:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8011386:	4b75      	ldr	r3, [pc, #468]	; (801155c <tcp_process+0x7cc>)
 8011388:	681a      	ldr	r2, [r3, #0]
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	60da      	str	r2, [r3, #12]
 801138e:	4a73      	ldr	r2, [pc, #460]	; (801155c <tcp_process+0x7cc>)
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	6013      	str	r3, [r2, #0]
 8011394:	f002 fcfa 	bl	8013d8c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8011398:	e0d2      	b.n	8011540 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	8b5b      	ldrh	r3, [r3, #26]
 801139e:	f043 0302 	orr.w	r3, r3, #2
 80113a2:	b29a      	uxth	r2, r3
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	2208      	movs	r2, #8
 80113ac:	751a      	strb	r2, [r3, #20]
      break;
 80113ae:	e0c7      	b.n	8011540 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80113b0:	4b6b      	ldr	r3, [pc, #428]	; (8011560 <tcp_process+0x7d0>)
 80113b2:	781b      	ldrb	r3, [r3, #0]
 80113b4:	f003 0310 	and.w	r3, r3, #16
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	f000 80c1 	beq.w	8011540 <tcp_process+0x7b0>
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80113c2:	4b68      	ldr	r3, [pc, #416]	; (8011564 <tcp_process+0x7d4>)
 80113c4:	681b      	ldr	r3, [r3, #0]
 80113c6:	429a      	cmp	r2, r3
 80113c8:	f040 80ba 	bne.w	8011540 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	f040 80b5 	bne.w	8011540 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	2206      	movs	r2, #6
 80113da:	751a      	strb	r2, [r3, #20]
      break;
 80113dc:	e0b0      	b.n	8011540 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80113de:	6878      	ldr	r0, [r7, #4]
 80113e0:	f000 f9ca 	bl	8011778 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80113e4:	4b60      	ldr	r3, [pc, #384]	; (8011568 <tcp_process+0x7d8>)
 80113e6:	781b      	ldrb	r3, [r3, #0]
 80113e8:	f003 0320 	and.w	r3, r3, #32
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	f000 80a9 	beq.w	8011544 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	8b5b      	ldrh	r3, [r3, #26]
 80113f6:	f043 0302 	orr.w	r3, r3, #2
 80113fa:	b29a      	uxth	r2, r3
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8011400:	6878      	ldr	r0, [r7, #4]
 8011402:	f7fe fd39 	bl	800fe78 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8011406:	4b59      	ldr	r3, [pc, #356]	; (801156c <tcp_process+0x7dc>)
 8011408:	681b      	ldr	r3, [r3, #0]
 801140a:	687a      	ldr	r2, [r7, #4]
 801140c:	429a      	cmp	r2, r3
 801140e:	d105      	bne.n	801141c <tcp_process+0x68c>
 8011410:	4b56      	ldr	r3, [pc, #344]	; (801156c <tcp_process+0x7dc>)
 8011412:	681b      	ldr	r3, [r3, #0]
 8011414:	68db      	ldr	r3, [r3, #12]
 8011416:	4a55      	ldr	r2, [pc, #340]	; (801156c <tcp_process+0x7dc>)
 8011418:	6013      	str	r3, [r2, #0]
 801141a:	e013      	b.n	8011444 <tcp_process+0x6b4>
 801141c:	4b53      	ldr	r3, [pc, #332]	; (801156c <tcp_process+0x7dc>)
 801141e:	681b      	ldr	r3, [r3, #0]
 8011420:	613b      	str	r3, [r7, #16]
 8011422:	e00c      	b.n	801143e <tcp_process+0x6ae>
 8011424:	693b      	ldr	r3, [r7, #16]
 8011426:	68db      	ldr	r3, [r3, #12]
 8011428:	687a      	ldr	r2, [r7, #4]
 801142a:	429a      	cmp	r2, r3
 801142c:	d104      	bne.n	8011438 <tcp_process+0x6a8>
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	68da      	ldr	r2, [r3, #12]
 8011432:	693b      	ldr	r3, [r7, #16]
 8011434:	60da      	str	r2, [r3, #12]
 8011436:	e005      	b.n	8011444 <tcp_process+0x6b4>
 8011438:	693b      	ldr	r3, [r7, #16]
 801143a:	68db      	ldr	r3, [r3, #12]
 801143c:	613b      	str	r3, [r7, #16]
 801143e:	693b      	ldr	r3, [r7, #16]
 8011440:	2b00      	cmp	r3, #0
 8011442:	d1ef      	bne.n	8011424 <tcp_process+0x694>
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	2200      	movs	r2, #0
 8011448:	60da      	str	r2, [r3, #12]
 801144a:	4b43      	ldr	r3, [pc, #268]	; (8011558 <tcp_process+0x7c8>)
 801144c:	2201      	movs	r2, #1
 801144e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	220a      	movs	r2, #10
 8011454:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8011456:	4b41      	ldr	r3, [pc, #260]	; (801155c <tcp_process+0x7cc>)
 8011458:	681a      	ldr	r2, [r3, #0]
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	60da      	str	r2, [r3, #12]
 801145e:	4a3f      	ldr	r2, [pc, #252]	; (801155c <tcp_process+0x7cc>)
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	6013      	str	r3, [r2, #0]
 8011464:	f002 fc92 	bl	8013d8c <tcp_timer_needed>
      }
      break;
 8011468:	e06c      	b.n	8011544 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801146a:	6878      	ldr	r0, [r7, #4]
 801146c:	f000 f984 	bl	8011778 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011470:	4b3b      	ldr	r3, [pc, #236]	; (8011560 <tcp_process+0x7d0>)
 8011472:	781b      	ldrb	r3, [r3, #0]
 8011474:	f003 0310 	and.w	r3, r3, #16
 8011478:	2b00      	cmp	r3, #0
 801147a:	d065      	beq.n	8011548 <tcp_process+0x7b8>
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011480:	4b38      	ldr	r3, [pc, #224]	; (8011564 <tcp_process+0x7d4>)
 8011482:	681b      	ldr	r3, [r3, #0]
 8011484:	429a      	cmp	r2, r3
 8011486:	d15f      	bne.n	8011548 <tcp_process+0x7b8>
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801148c:	2b00      	cmp	r3, #0
 801148e:	d15b      	bne.n	8011548 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8011490:	6878      	ldr	r0, [r7, #4]
 8011492:	f7fe fcf1 	bl	800fe78 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8011496:	4b35      	ldr	r3, [pc, #212]	; (801156c <tcp_process+0x7dc>)
 8011498:	681b      	ldr	r3, [r3, #0]
 801149a:	687a      	ldr	r2, [r7, #4]
 801149c:	429a      	cmp	r2, r3
 801149e:	d105      	bne.n	80114ac <tcp_process+0x71c>
 80114a0:	4b32      	ldr	r3, [pc, #200]	; (801156c <tcp_process+0x7dc>)
 80114a2:	681b      	ldr	r3, [r3, #0]
 80114a4:	68db      	ldr	r3, [r3, #12]
 80114a6:	4a31      	ldr	r2, [pc, #196]	; (801156c <tcp_process+0x7dc>)
 80114a8:	6013      	str	r3, [r2, #0]
 80114aa:	e013      	b.n	80114d4 <tcp_process+0x744>
 80114ac:	4b2f      	ldr	r3, [pc, #188]	; (801156c <tcp_process+0x7dc>)
 80114ae:	681b      	ldr	r3, [r3, #0]
 80114b0:	60fb      	str	r3, [r7, #12]
 80114b2:	e00c      	b.n	80114ce <tcp_process+0x73e>
 80114b4:	68fb      	ldr	r3, [r7, #12]
 80114b6:	68db      	ldr	r3, [r3, #12]
 80114b8:	687a      	ldr	r2, [r7, #4]
 80114ba:	429a      	cmp	r2, r3
 80114bc:	d104      	bne.n	80114c8 <tcp_process+0x738>
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	68da      	ldr	r2, [r3, #12]
 80114c2:	68fb      	ldr	r3, [r7, #12]
 80114c4:	60da      	str	r2, [r3, #12]
 80114c6:	e005      	b.n	80114d4 <tcp_process+0x744>
 80114c8:	68fb      	ldr	r3, [r7, #12]
 80114ca:	68db      	ldr	r3, [r3, #12]
 80114cc:	60fb      	str	r3, [r7, #12]
 80114ce:	68fb      	ldr	r3, [r7, #12]
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	d1ef      	bne.n	80114b4 <tcp_process+0x724>
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	2200      	movs	r2, #0
 80114d8:	60da      	str	r2, [r3, #12]
 80114da:	4b1f      	ldr	r3, [pc, #124]	; (8011558 <tcp_process+0x7c8>)
 80114dc:	2201      	movs	r2, #1
 80114de:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	220a      	movs	r2, #10
 80114e4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80114e6:	4b1d      	ldr	r3, [pc, #116]	; (801155c <tcp_process+0x7cc>)
 80114e8:	681a      	ldr	r2, [r3, #0]
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	60da      	str	r2, [r3, #12]
 80114ee:	4a1b      	ldr	r2, [pc, #108]	; (801155c <tcp_process+0x7cc>)
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	6013      	str	r3, [r2, #0]
 80114f4:	f002 fc4a 	bl	8013d8c <tcp_timer_needed>
      }
      break;
 80114f8:	e026      	b.n	8011548 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80114fa:	6878      	ldr	r0, [r7, #4]
 80114fc:	f000 f93c 	bl	8011778 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011500:	4b17      	ldr	r3, [pc, #92]	; (8011560 <tcp_process+0x7d0>)
 8011502:	781b      	ldrb	r3, [r3, #0]
 8011504:	f003 0310 	and.w	r3, r3, #16
 8011508:	2b00      	cmp	r3, #0
 801150a:	d01f      	beq.n	801154c <tcp_process+0x7bc>
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011510:	4b14      	ldr	r3, [pc, #80]	; (8011564 <tcp_process+0x7d4>)
 8011512:	681b      	ldr	r3, [r3, #0]
 8011514:	429a      	cmp	r2, r3
 8011516:	d119      	bne.n	801154c <tcp_process+0x7bc>
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801151c:	2b00      	cmp	r3, #0
 801151e:	d115      	bne.n	801154c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8011520:	4b11      	ldr	r3, [pc, #68]	; (8011568 <tcp_process+0x7d8>)
 8011522:	781b      	ldrb	r3, [r3, #0]
 8011524:	f043 0310 	orr.w	r3, r3, #16
 8011528:	b2da      	uxtb	r2, r3
 801152a:	4b0f      	ldr	r3, [pc, #60]	; (8011568 <tcp_process+0x7d8>)
 801152c:	701a      	strb	r2, [r3, #0]
      }
      break;
 801152e:	e00d      	b.n	801154c <tcp_process+0x7bc>
    default:
      break;
 8011530:	bf00      	nop
 8011532:	e00c      	b.n	801154e <tcp_process+0x7be>
      break;
 8011534:	bf00      	nop
 8011536:	e00a      	b.n	801154e <tcp_process+0x7be>
      break;
 8011538:	bf00      	nop
 801153a:	e008      	b.n	801154e <tcp_process+0x7be>
      break;
 801153c:	bf00      	nop
 801153e:	e006      	b.n	801154e <tcp_process+0x7be>
      break;
 8011540:	bf00      	nop
 8011542:	e004      	b.n	801154e <tcp_process+0x7be>
      break;
 8011544:	bf00      	nop
 8011546:	e002      	b.n	801154e <tcp_process+0x7be>
      break;
 8011548:	bf00      	nop
 801154a:	e000      	b.n	801154e <tcp_process+0x7be>
      break;
 801154c:	bf00      	nop
  }
  return ERR_OK;
 801154e:	2300      	movs	r3, #0
}
 8011550:	4618      	mov	r0, r3
 8011552:	3724      	adds	r7, #36	; 0x24
 8011554:	46bd      	mov	sp, r7
 8011556:	bd90      	pop	{r4, r7, pc}
 8011558:	2001b65c 	.word	0x2001b65c
 801155c:	2001b670 	.word	0x2001b670
 8011560:	20013868 	.word	0x20013868
 8011564:	20013860 	.word	0x20013860
 8011568:	20013869 	.word	0x20013869
 801156c:	2001b660 	.word	0x2001b660

08011570 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8011570:	b590      	push	{r4, r7, lr}
 8011572:	b085      	sub	sp, #20
 8011574:	af00      	add	r7, sp, #0
 8011576:	6078      	str	r0, [r7, #4]
 8011578:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	2b00      	cmp	r3, #0
 801157e:	d106      	bne.n	801158e <tcp_oos_insert_segment+0x1e>
 8011580:	4b3b      	ldr	r3, [pc, #236]	; (8011670 <tcp_oos_insert_segment+0x100>)
 8011582:	f240 421f 	movw	r2, #1055	; 0x41f
 8011586:	493b      	ldr	r1, [pc, #236]	; (8011674 <tcp_oos_insert_segment+0x104>)
 8011588:	483b      	ldr	r0, [pc, #236]	; (8011678 <tcp_oos_insert_segment+0x108>)
 801158a:	f008 f8d3 	bl	8019734 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	68db      	ldr	r3, [r3, #12]
 8011592:	899b      	ldrh	r3, [r3, #12]
 8011594:	b29b      	uxth	r3, r3
 8011596:	4618      	mov	r0, r3
 8011598:	f7fb fc3a 	bl	800ce10 <lwip_htons>
 801159c:	4603      	mov	r3, r0
 801159e:	b2db      	uxtb	r3, r3
 80115a0:	f003 0301 	and.w	r3, r3, #1
 80115a4:	2b00      	cmp	r3, #0
 80115a6:	d028      	beq.n	80115fa <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80115a8:	6838      	ldr	r0, [r7, #0]
 80115aa:	f7fe fa63 	bl	800fa74 <tcp_segs_free>
    next = NULL;
 80115ae:	2300      	movs	r3, #0
 80115b0:	603b      	str	r3, [r7, #0]
 80115b2:	e056      	b.n	8011662 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80115b4:	683b      	ldr	r3, [r7, #0]
 80115b6:	68db      	ldr	r3, [r3, #12]
 80115b8:	899b      	ldrh	r3, [r3, #12]
 80115ba:	b29b      	uxth	r3, r3
 80115bc:	4618      	mov	r0, r3
 80115be:	f7fb fc27 	bl	800ce10 <lwip_htons>
 80115c2:	4603      	mov	r3, r0
 80115c4:	b2db      	uxtb	r3, r3
 80115c6:	f003 0301 	and.w	r3, r3, #1
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	d00d      	beq.n	80115ea <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	68db      	ldr	r3, [r3, #12]
 80115d2:	899b      	ldrh	r3, [r3, #12]
 80115d4:	b29c      	uxth	r4, r3
 80115d6:	2001      	movs	r0, #1
 80115d8:	f7fb fc1a 	bl	800ce10 <lwip_htons>
 80115dc:	4603      	mov	r3, r0
 80115de:	461a      	mov	r2, r3
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	68db      	ldr	r3, [r3, #12]
 80115e4:	4322      	orrs	r2, r4
 80115e6:	b292      	uxth	r2, r2
 80115e8:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80115ea:	683b      	ldr	r3, [r7, #0]
 80115ec:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80115ee:	683b      	ldr	r3, [r7, #0]
 80115f0:	681b      	ldr	r3, [r3, #0]
 80115f2:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80115f4:	68f8      	ldr	r0, [r7, #12]
 80115f6:	f7fe fa52 	bl	800fa9e <tcp_seg_free>
    while (next &&
 80115fa:	683b      	ldr	r3, [r7, #0]
 80115fc:	2b00      	cmp	r3, #0
 80115fe:	d00e      	beq.n	801161e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	891b      	ldrh	r3, [r3, #8]
 8011604:	461a      	mov	r2, r3
 8011606:	4b1d      	ldr	r3, [pc, #116]	; (801167c <tcp_oos_insert_segment+0x10c>)
 8011608:	681b      	ldr	r3, [r3, #0]
 801160a:	441a      	add	r2, r3
 801160c:	683b      	ldr	r3, [r7, #0]
 801160e:	68db      	ldr	r3, [r3, #12]
 8011610:	685b      	ldr	r3, [r3, #4]
 8011612:	6839      	ldr	r1, [r7, #0]
 8011614:	8909      	ldrh	r1, [r1, #8]
 8011616:	440b      	add	r3, r1
 8011618:	1ad3      	subs	r3, r2, r3
    while (next &&
 801161a:	2b00      	cmp	r3, #0
 801161c:	daca      	bge.n	80115b4 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801161e:	683b      	ldr	r3, [r7, #0]
 8011620:	2b00      	cmp	r3, #0
 8011622:	d01e      	beq.n	8011662 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	891b      	ldrh	r3, [r3, #8]
 8011628:	461a      	mov	r2, r3
 801162a:	4b14      	ldr	r3, [pc, #80]	; (801167c <tcp_oos_insert_segment+0x10c>)
 801162c:	681b      	ldr	r3, [r3, #0]
 801162e:	441a      	add	r2, r3
 8011630:	683b      	ldr	r3, [r7, #0]
 8011632:	68db      	ldr	r3, [r3, #12]
 8011634:	685b      	ldr	r3, [r3, #4]
 8011636:	1ad3      	subs	r3, r2, r3
    if (next &&
 8011638:	2b00      	cmp	r3, #0
 801163a:	dd12      	ble.n	8011662 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801163c:	683b      	ldr	r3, [r7, #0]
 801163e:	68db      	ldr	r3, [r3, #12]
 8011640:	685b      	ldr	r3, [r3, #4]
 8011642:	b29a      	uxth	r2, r3
 8011644:	4b0d      	ldr	r3, [pc, #52]	; (801167c <tcp_oos_insert_segment+0x10c>)
 8011646:	681b      	ldr	r3, [r3, #0]
 8011648:	b29b      	uxth	r3, r3
 801164a:	1ad3      	subs	r3, r2, r3
 801164c:	b29a      	uxth	r2, r3
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	685a      	ldr	r2, [r3, #4]
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	891b      	ldrh	r3, [r3, #8]
 801165a:	4619      	mov	r1, r3
 801165c:	4610      	mov	r0, r2
 801165e:	f7fc fe09 	bl	800e274 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	683a      	ldr	r2, [r7, #0]
 8011666:	601a      	str	r2, [r3, #0]
}
 8011668:	bf00      	nop
 801166a:	3714      	adds	r7, #20
 801166c:	46bd      	mov	sp, r7
 801166e:	bd90      	pop	{r4, r7, pc}
 8011670:	0801b560 	.word	0x0801b560
 8011674:	0801b820 	.word	0x0801b820
 8011678:	0801b5ac 	.word	0x0801b5ac
 801167c:	2001385c 	.word	0x2001385c

08011680 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8011680:	b5b0      	push	{r4, r5, r7, lr}
 8011682:	b086      	sub	sp, #24
 8011684:	af00      	add	r7, sp, #0
 8011686:	60f8      	str	r0, [r7, #12]
 8011688:	60b9      	str	r1, [r7, #8]
 801168a:	607a      	str	r2, [r7, #4]
 801168c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801168e:	e03e      	b.n	801170e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8011690:	68bb      	ldr	r3, [r7, #8]
 8011692:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8011694:	68bb      	ldr	r3, [r7, #8]
 8011696:	681b      	ldr	r3, [r3, #0]
 8011698:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801169a:	697b      	ldr	r3, [r7, #20]
 801169c:	685b      	ldr	r3, [r3, #4]
 801169e:	4618      	mov	r0, r3
 80116a0:	f7fc fffc 	bl	800e69c <pbuf_clen>
 80116a4:	4603      	mov	r3, r0
 80116a6:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80116a8:	68fb      	ldr	r3, [r7, #12]
 80116aa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80116ae:	8a7a      	ldrh	r2, [r7, #18]
 80116b0:	429a      	cmp	r2, r3
 80116b2:	d906      	bls.n	80116c2 <tcp_free_acked_segments+0x42>
 80116b4:	4b2a      	ldr	r3, [pc, #168]	; (8011760 <tcp_free_acked_segments+0xe0>)
 80116b6:	f240 4257 	movw	r2, #1111	; 0x457
 80116ba:	492a      	ldr	r1, [pc, #168]	; (8011764 <tcp_free_acked_segments+0xe4>)
 80116bc:	482a      	ldr	r0, [pc, #168]	; (8011768 <tcp_free_acked_segments+0xe8>)
 80116be:	f008 f839 	bl	8019734 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80116c2:	68fb      	ldr	r3, [r7, #12]
 80116c4:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80116c8:	8a7b      	ldrh	r3, [r7, #18]
 80116ca:	1ad3      	subs	r3, r2, r3
 80116cc:	b29a      	uxth	r2, r3
 80116ce:	68fb      	ldr	r3, [r7, #12]
 80116d0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80116d4:	697b      	ldr	r3, [r7, #20]
 80116d6:	891a      	ldrh	r2, [r3, #8]
 80116d8:	4b24      	ldr	r3, [pc, #144]	; (801176c <tcp_free_acked_segments+0xec>)
 80116da:	881b      	ldrh	r3, [r3, #0]
 80116dc:	4413      	add	r3, r2
 80116de:	b29a      	uxth	r2, r3
 80116e0:	4b22      	ldr	r3, [pc, #136]	; (801176c <tcp_free_acked_segments+0xec>)
 80116e2:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80116e4:	6978      	ldr	r0, [r7, #20]
 80116e6:	f7fe f9da 	bl	800fa9e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80116ea:	68fb      	ldr	r3, [r7, #12]
 80116ec:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	d00c      	beq.n	801170e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80116f4:	68bb      	ldr	r3, [r7, #8]
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d109      	bne.n	801170e <tcp_free_acked_segments+0x8e>
 80116fa:	683b      	ldr	r3, [r7, #0]
 80116fc:	2b00      	cmp	r3, #0
 80116fe:	d106      	bne.n	801170e <tcp_free_acked_segments+0x8e>
 8011700:	4b17      	ldr	r3, [pc, #92]	; (8011760 <tcp_free_acked_segments+0xe0>)
 8011702:	f240 4261 	movw	r2, #1121	; 0x461
 8011706:	491a      	ldr	r1, [pc, #104]	; (8011770 <tcp_free_acked_segments+0xf0>)
 8011708:	4817      	ldr	r0, [pc, #92]	; (8011768 <tcp_free_acked_segments+0xe8>)
 801170a:	f008 f813 	bl	8019734 <iprintf>
  while (seg_list != NULL &&
 801170e:	68bb      	ldr	r3, [r7, #8]
 8011710:	2b00      	cmp	r3, #0
 8011712:	d020      	beq.n	8011756 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8011714:	68bb      	ldr	r3, [r7, #8]
 8011716:	68db      	ldr	r3, [r3, #12]
 8011718:	685b      	ldr	r3, [r3, #4]
 801171a:	4618      	mov	r0, r3
 801171c:	f7fb fb8d 	bl	800ce3a <lwip_htonl>
 8011720:	4604      	mov	r4, r0
 8011722:	68bb      	ldr	r3, [r7, #8]
 8011724:	891b      	ldrh	r3, [r3, #8]
 8011726:	461d      	mov	r5, r3
 8011728:	68bb      	ldr	r3, [r7, #8]
 801172a:	68db      	ldr	r3, [r3, #12]
 801172c:	899b      	ldrh	r3, [r3, #12]
 801172e:	b29b      	uxth	r3, r3
 8011730:	4618      	mov	r0, r3
 8011732:	f7fb fb6d 	bl	800ce10 <lwip_htons>
 8011736:	4603      	mov	r3, r0
 8011738:	b2db      	uxtb	r3, r3
 801173a:	f003 0303 	and.w	r3, r3, #3
 801173e:	2b00      	cmp	r3, #0
 8011740:	d001      	beq.n	8011746 <tcp_free_acked_segments+0xc6>
 8011742:	2301      	movs	r3, #1
 8011744:	e000      	b.n	8011748 <tcp_free_acked_segments+0xc8>
 8011746:	2300      	movs	r3, #0
 8011748:	442b      	add	r3, r5
 801174a:	18e2      	adds	r2, r4, r3
 801174c:	4b09      	ldr	r3, [pc, #36]	; (8011774 <tcp_free_acked_segments+0xf4>)
 801174e:	681b      	ldr	r3, [r3, #0]
 8011750:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8011752:	2b00      	cmp	r3, #0
 8011754:	dd9c      	ble.n	8011690 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8011756:	68bb      	ldr	r3, [r7, #8]
}
 8011758:	4618      	mov	r0, r3
 801175a:	3718      	adds	r7, #24
 801175c:	46bd      	mov	sp, r7
 801175e:	bdb0      	pop	{r4, r5, r7, pc}
 8011760:	0801b560 	.word	0x0801b560
 8011764:	0801b848 	.word	0x0801b848
 8011768:	0801b5ac 	.word	0x0801b5ac
 801176c:	20013864 	.word	0x20013864
 8011770:	0801b870 	.word	0x0801b870
 8011774:	20013860 	.word	0x20013860

08011778 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8011778:	b5b0      	push	{r4, r5, r7, lr}
 801177a:	b094      	sub	sp, #80	; 0x50
 801177c:	af00      	add	r7, sp, #0
 801177e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8011780:	2300      	movs	r3, #0
 8011782:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	2b00      	cmp	r3, #0
 8011788:	d106      	bne.n	8011798 <tcp_receive+0x20>
 801178a:	4b91      	ldr	r3, [pc, #580]	; (80119d0 <tcp_receive+0x258>)
 801178c:	f240 427b 	movw	r2, #1147	; 0x47b
 8011790:	4990      	ldr	r1, [pc, #576]	; (80119d4 <tcp_receive+0x25c>)
 8011792:	4891      	ldr	r0, [pc, #580]	; (80119d8 <tcp_receive+0x260>)
 8011794:	f007 ffce 	bl	8019734 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	7d1b      	ldrb	r3, [r3, #20]
 801179c:	2b03      	cmp	r3, #3
 801179e:	d806      	bhi.n	80117ae <tcp_receive+0x36>
 80117a0:	4b8b      	ldr	r3, [pc, #556]	; (80119d0 <tcp_receive+0x258>)
 80117a2:	f240 427c 	movw	r2, #1148	; 0x47c
 80117a6:	498d      	ldr	r1, [pc, #564]	; (80119dc <tcp_receive+0x264>)
 80117a8:	488b      	ldr	r0, [pc, #556]	; (80119d8 <tcp_receive+0x260>)
 80117aa:	f007 ffc3 	bl	8019734 <iprintf>

  if (flags & TCP_ACK) {
 80117ae:	4b8c      	ldr	r3, [pc, #560]	; (80119e0 <tcp_receive+0x268>)
 80117b0:	781b      	ldrb	r3, [r3, #0]
 80117b2:	f003 0310 	and.w	r3, r3, #16
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	f000 8264 	beq.w	8011c84 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80117c2:	461a      	mov	r2, r3
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80117c8:	4413      	add	r3, r2
 80117ca:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80117d0:	4b84      	ldr	r3, [pc, #528]	; (80119e4 <tcp_receive+0x26c>)
 80117d2:	681b      	ldr	r3, [r3, #0]
 80117d4:	1ad3      	subs	r3, r2, r3
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	db1b      	blt.n	8011812 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80117de:	4b81      	ldr	r3, [pc, #516]	; (80119e4 <tcp_receive+0x26c>)
 80117e0:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80117e2:	429a      	cmp	r2, r3
 80117e4:	d106      	bne.n	80117f4 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80117ea:	4b7f      	ldr	r3, [pc, #508]	; (80119e8 <tcp_receive+0x270>)
 80117ec:	681b      	ldr	r3, [r3, #0]
 80117ee:	1ad3      	subs	r3, r2, r3
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	db0e      	blt.n	8011812 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80117f8:	4b7b      	ldr	r3, [pc, #492]	; (80119e8 <tcp_receive+0x270>)
 80117fa:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80117fc:	429a      	cmp	r2, r3
 80117fe:	d125      	bne.n	801184c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8011800:	4b7a      	ldr	r3, [pc, #488]	; (80119ec <tcp_receive+0x274>)
 8011802:	681b      	ldr	r3, [r3, #0]
 8011804:	89db      	ldrh	r3, [r3, #14]
 8011806:	b29a      	uxth	r2, r3
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801180e:	429a      	cmp	r2, r3
 8011810:	d91c      	bls.n	801184c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8011812:	4b76      	ldr	r3, [pc, #472]	; (80119ec <tcp_receive+0x274>)
 8011814:	681b      	ldr	r3, [r3, #0]
 8011816:	89db      	ldrh	r3, [r3, #14]
 8011818:	b29a      	uxth	r2, r3
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801182c:	429a      	cmp	r2, r3
 801182e:	d205      	bcs.n	801183c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 801183c:	4b69      	ldr	r3, [pc, #420]	; (80119e4 <tcp_receive+0x26c>)
 801183e:	681a      	ldr	r2, [r3, #0]
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8011844:	4b68      	ldr	r3, [pc, #416]	; (80119e8 <tcp_receive+0x270>)
 8011846:	681a      	ldr	r2, [r3, #0]
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801184c:	4b66      	ldr	r3, [pc, #408]	; (80119e8 <tcp_receive+0x270>)
 801184e:	681a      	ldr	r2, [r3, #0]
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011854:	1ad3      	subs	r3, r2, r3
 8011856:	2b00      	cmp	r3, #0
 8011858:	dc58      	bgt.n	801190c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801185a:	4b65      	ldr	r3, [pc, #404]	; (80119f0 <tcp_receive+0x278>)
 801185c:	881b      	ldrh	r3, [r3, #0]
 801185e:	2b00      	cmp	r3, #0
 8011860:	d14b      	bne.n	80118fa <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011866:	687a      	ldr	r2, [r7, #4]
 8011868:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 801186c:	4413      	add	r3, r2
 801186e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011870:	429a      	cmp	r2, r3
 8011872:	d142      	bne.n	80118fa <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801187a:	2b00      	cmp	r3, #0
 801187c:	db3d      	blt.n	80118fa <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011882:	4b59      	ldr	r3, [pc, #356]	; (80119e8 <tcp_receive+0x270>)
 8011884:	681b      	ldr	r3, [r3, #0]
 8011886:	429a      	cmp	r2, r3
 8011888:	d137      	bne.n	80118fa <tcp_receive+0x182>
              found_dupack = 1;
 801188a:	2301      	movs	r3, #1
 801188c:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011894:	2bff      	cmp	r3, #255	; 0xff
 8011896:	d007      	beq.n	80118a8 <tcp_receive+0x130>
                ++pcb->dupacks;
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801189e:	3301      	adds	r3, #1
 80118a0:	b2da      	uxtb	r2, r3
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80118ae:	2b03      	cmp	r3, #3
 80118b0:	d91b      	bls.n	80118ea <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80118bc:	4413      	add	r3, r2
 80118be:	b29a      	uxth	r2, r3
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80118c6:	429a      	cmp	r2, r3
 80118c8:	d30a      	bcc.n	80118e0 <tcp_receive+0x168>
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80118d4:	4413      	add	r3, r2
 80118d6:	b29a      	uxth	r2, r3
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80118de:	e004      	b.n	80118ea <tcp_receive+0x172>
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80118e6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80118f0:	2b02      	cmp	r3, #2
 80118f2:	d902      	bls.n	80118fa <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80118f4:	6878      	ldr	r0, [r7, #4]
 80118f6:	f001 feeb 	bl	80136d0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80118fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	f040 8161 	bne.w	8011bc4 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	2200      	movs	r2, #0
 8011906:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801190a:	e15b      	b.n	8011bc4 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801190c:	4b36      	ldr	r3, [pc, #216]	; (80119e8 <tcp_receive+0x270>)
 801190e:	681a      	ldr	r2, [r3, #0]
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011914:	1ad3      	subs	r3, r2, r3
 8011916:	3b01      	subs	r3, #1
 8011918:	2b00      	cmp	r3, #0
 801191a:	f2c0 814e 	blt.w	8011bba <tcp_receive+0x442>
 801191e:	4b32      	ldr	r3, [pc, #200]	; (80119e8 <tcp_receive+0x270>)
 8011920:	681a      	ldr	r2, [r3, #0]
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011926:	1ad3      	subs	r3, r2, r3
 8011928:	2b00      	cmp	r3, #0
 801192a:	f300 8146 	bgt.w	8011bba <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	8b5b      	ldrh	r3, [r3, #26]
 8011932:	f003 0304 	and.w	r3, r3, #4
 8011936:	2b00      	cmp	r3, #0
 8011938:	d010      	beq.n	801195c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	8b5b      	ldrh	r3, [r3, #26]
 801193e:	f023 0304 	bic.w	r3, r3, #4
 8011942:	b29a      	uxth	r2, r3
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	2200      	movs	r2, #0
 8011958:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	2200      	movs	r2, #0
 8011960:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801196a:	10db      	asrs	r3, r3, #3
 801196c:	b21b      	sxth	r3, r3
 801196e:	b29a      	uxth	r2, r3
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011976:	b29b      	uxth	r3, r3
 8011978:	4413      	add	r3, r2
 801197a:	b29b      	uxth	r3, r3
 801197c:	b21a      	sxth	r2, r3
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8011984:	4b18      	ldr	r3, [pc, #96]	; (80119e8 <tcp_receive+0x270>)
 8011986:	681b      	ldr	r3, [r3, #0]
 8011988:	b29a      	uxth	r2, r3
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801198e:	b29b      	uxth	r3, r3
 8011990:	1ad3      	subs	r3, r2, r3
 8011992:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	2200      	movs	r2, #0
 8011998:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 801199c:	4b12      	ldr	r3, [pc, #72]	; (80119e8 <tcp_receive+0x270>)
 801199e:	681a      	ldr	r2, [r3, #0]
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	7d1b      	ldrb	r3, [r3, #20]
 80119a8:	2b03      	cmp	r3, #3
 80119aa:	f240 8097 	bls.w	8011adc <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80119ba:	429a      	cmp	r2, r3
 80119bc:	d245      	bcs.n	8011a4a <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	8b5b      	ldrh	r3, [r3, #26]
 80119c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	d014      	beq.n	80119f4 <tcp_receive+0x27c>
 80119ca:	2301      	movs	r3, #1
 80119cc:	e013      	b.n	80119f6 <tcp_receive+0x27e>
 80119ce:	bf00      	nop
 80119d0:	0801b560 	.word	0x0801b560
 80119d4:	0801b890 	.word	0x0801b890
 80119d8:	0801b5ac 	.word	0x0801b5ac
 80119dc:	0801b8ac 	.word	0x0801b8ac
 80119e0:	20013868 	.word	0x20013868
 80119e4:	2001385c 	.word	0x2001385c
 80119e8:	20013860 	.word	0x20013860
 80119ec:	2001384c 	.word	0x2001384c
 80119f0:	20013866 	.word	0x20013866
 80119f4:	2302      	movs	r3, #2
 80119f6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80119fa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80119fe:	b29a      	uxth	r2, r3
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011a04:	fb12 f303 	smulbb	r3, r2, r3
 8011a08:	b29b      	uxth	r3, r3
 8011a0a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011a0c:	4293      	cmp	r3, r2
 8011a0e:	bf28      	it	cs
 8011a10:	4613      	movcs	r3, r2
 8011a12:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011a1a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011a1c:	4413      	add	r3, r2
 8011a1e:	b29a      	uxth	r2, r3
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011a26:	429a      	cmp	r2, r3
 8011a28:	d309      	bcc.n	8011a3e <tcp_receive+0x2c6>
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011a30:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011a32:	4413      	add	r3, r2
 8011a34:	b29a      	uxth	r2, r3
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011a3c:	e04e      	b.n	8011adc <tcp_receive+0x364>
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011a44:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011a48:	e048      	b.n	8011adc <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011a50:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011a52:	4413      	add	r3, r2
 8011a54:	b29a      	uxth	r2, r3
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011a5c:	429a      	cmp	r2, r3
 8011a5e:	d309      	bcc.n	8011a74 <tcp_receive+0x2fc>
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011a66:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011a68:	4413      	add	r3, r2
 8011a6a:	b29a      	uxth	r2, r3
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8011a72:	e004      	b.n	8011a7e <tcp_receive+0x306>
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011a7a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011a8a:	429a      	cmp	r2, r3
 8011a8c:	d326      	bcc.n	8011adc <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011a9a:	1ad3      	subs	r3, r2, r3
 8011a9c:	b29a      	uxth	r2, r3
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011aae:	4413      	add	r3, r2
 8011ab0:	b29a      	uxth	r2, r3
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011ab8:	429a      	cmp	r2, r3
 8011aba:	d30a      	bcc.n	8011ad2 <tcp_receive+0x35a>
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011ac6:	4413      	add	r3, r2
 8011ac8:	b29a      	uxth	r2, r3
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011ad0:	e004      	b.n	8011adc <tcp_receive+0x364>
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011ad8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011ae4:	4a98      	ldr	r2, [pc, #608]	; (8011d48 <tcp_receive+0x5d0>)
 8011ae6:	6878      	ldr	r0, [r7, #4]
 8011ae8:	f7ff fdca 	bl	8011680 <tcp_free_acked_segments>
 8011aec:	4602      	mov	r2, r0
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011afa:	4a94      	ldr	r2, [pc, #592]	; (8011d4c <tcp_receive+0x5d4>)
 8011afc:	6878      	ldr	r0, [r7, #4]
 8011afe:	f7ff fdbf 	bl	8011680 <tcp_free_acked_segments>
 8011b02:	4602      	mov	r2, r0
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	d104      	bne.n	8011b1a <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011b16:	861a      	strh	r2, [r3, #48]	; 0x30
 8011b18:	e002      	b.n	8011b20 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	2200      	movs	r2, #0
 8011b1e:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	2200      	movs	r2, #0
 8011b24:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d103      	bne.n	8011b36 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	2200      	movs	r2, #0
 8011b32:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8011b3c:	4b84      	ldr	r3, [pc, #528]	; (8011d50 <tcp_receive+0x5d8>)
 8011b3e:	881b      	ldrh	r3, [r3, #0]
 8011b40:	4413      	add	r3, r2
 8011b42:	b29a      	uxth	r2, r3
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	8b5b      	ldrh	r3, [r3, #26]
 8011b4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	d035      	beq.n	8011bc2 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	d118      	bne.n	8011b90 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	d00c      	beq.n	8011b80 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011b6e:	68db      	ldr	r3, [r3, #12]
 8011b70:	685b      	ldr	r3, [r3, #4]
 8011b72:	4618      	mov	r0, r3
 8011b74:	f7fb f961 	bl	800ce3a <lwip_htonl>
 8011b78:	4603      	mov	r3, r0
 8011b7a:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8011b7c:	2b00      	cmp	r3, #0
 8011b7e:	dc20      	bgt.n	8011bc2 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	8b5b      	ldrh	r3, [r3, #26]
 8011b84:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011b88:	b29a      	uxth	r2, r3
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011b8e:	e018      	b.n	8011bc2 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011b98:	68db      	ldr	r3, [r3, #12]
 8011b9a:	685b      	ldr	r3, [r3, #4]
 8011b9c:	4618      	mov	r0, r3
 8011b9e:	f7fb f94c 	bl	800ce3a <lwip_htonl>
 8011ba2:	4603      	mov	r3, r0
 8011ba4:	1ae3      	subs	r3, r4, r3
 8011ba6:	2b00      	cmp	r3, #0
 8011ba8:	dc0b      	bgt.n	8011bc2 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	8b5b      	ldrh	r3, [r3, #26]
 8011bae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011bb2:	b29a      	uxth	r2, r3
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011bb8:	e003      	b.n	8011bc2 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8011bba:	6878      	ldr	r0, [r7, #4]
 8011bbc:	f001 ff76 	bl	8013aac <tcp_send_empty_ack>
 8011bc0:	e000      	b.n	8011bc4 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011bc2:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d05b      	beq.n	8011c84 <tcp_receive+0x50c>
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011bd0:	4b60      	ldr	r3, [pc, #384]	; (8011d54 <tcp_receive+0x5dc>)
 8011bd2:	681b      	ldr	r3, [r3, #0]
 8011bd4:	1ad3      	subs	r3, r2, r3
 8011bd6:	2b00      	cmp	r3, #0
 8011bd8:	da54      	bge.n	8011c84 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8011bda:	4b5f      	ldr	r3, [pc, #380]	; (8011d58 <tcp_receive+0x5e0>)
 8011bdc:	681b      	ldr	r3, [r3, #0]
 8011bde:	b29a      	uxth	r2, r3
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011be4:	b29b      	uxth	r3, r3
 8011be6:	1ad3      	subs	r3, r2, r3
 8011be8:	b29b      	uxth	r3, r3
 8011bea:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8011bee:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011bf8:	10db      	asrs	r3, r3, #3
 8011bfa:	b21b      	sxth	r3, r3
 8011bfc:	b29b      	uxth	r3, r3
 8011bfe:	1ad3      	subs	r3, r2, r3
 8011c00:	b29b      	uxth	r3, r3
 8011c02:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011c0c:	b29a      	uxth	r2, r3
 8011c0e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8011c12:	4413      	add	r3, r2
 8011c14:	b29b      	uxth	r3, r3
 8011c16:	b21a      	sxth	r2, r3
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8011c1c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8011c20:	2b00      	cmp	r3, #0
 8011c22:	da05      	bge.n	8011c30 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8011c24:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8011c28:	425b      	negs	r3, r3
 8011c2a:	b29b      	uxth	r3, r3
 8011c2c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8011c30:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011c3a:	109b      	asrs	r3, r3, #2
 8011c3c:	b21b      	sxth	r3, r3
 8011c3e:	b29b      	uxth	r3, r3
 8011c40:	1ad3      	subs	r3, r2, r3
 8011c42:	b29b      	uxth	r3, r3
 8011c44:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011c4e:	b29a      	uxth	r2, r3
 8011c50:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8011c54:	4413      	add	r3, r2
 8011c56:	b29b      	uxth	r3, r3
 8011c58:	b21a      	sxth	r2, r3
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011c64:	10db      	asrs	r3, r3, #3
 8011c66:	b21b      	sxth	r3, r3
 8011c68:	b29a      	uxth	r2, r3
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011c70:	b29b      	uxth	r3, r3
 8011c72:	4413      	add	r3, r2
 8011c74:	b29b      	uxth	r3, r3
 8011c76:	b21a      	sxth	r2, r3
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	2200      	movs	r2, #0
 8011c82:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8011c84:	4b35      	ldr	r3, [pc, #212]	; (8011d5c <tcp_receive+0x5e4>)
 8011c86:	881b      	ldrh	r3, [r3, #0]
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	f000 84e2 	beq.w	8012652 <tcp_receive+0xeda>
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	7d1b      	ldrb	r3, [r3, #20]
 8011c92:	2b06      	cmp	r3, #6
 8011c94:	f200 84dd 	bhi.w	8012652 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011c9c:	4b30      	ldr	r3, [pc, #192]	; (8011d60 <tcp_receive+0x5e8>)
 8011c9e:	681b      	ldr	r3, [r3, #0]
 8011ca0:	1ad3      	subs	r3, r2, r3
 8011ca2:	3b01      	subs	r3, #1
 8011ca4:	2b00      	cmp	r3, #0
 8011ca6:	f2c0 808f 	blt.w	8011dc8 <tcp_receive+0x650>
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011cae:	4b2b      	ldr	r3, [pc, #172]	; (8011d5c <tcp_receive+0x5e4>)
 8011cb0:	881b      	ldrh	r3, [r3, #0]
 8011cb2:	4619      	mov	r1, r3
 8011cb4:	4b2a      	ldr	r3, [pc, #168]	; (8011d60 <tcp_receive+0x5e8>)
 8011cb6:	681b      	ldr	r3, [r3, #0]
 8011cb8:	440b      	add	r3, r1
 8011cba:	1ad3      	subs	r3, r2, r3
 8011cbc:	3301      	adds	r3, #1
 8011cbe:	2b00      	cmp	r3, #0
 8011cc0:	f300 8082 	bgt.w	8011dc8 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8011cc4:	4b27      	ldr	r3, [pc, #156]	; (8011d64 <tcp_receive+0x5ec>)
 8011cc6:	685b      	ldr	r3, [r3, #4]
 8011cc8:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011cce:	4b24      	ldr	r3, [pc, #144]	; (8011d60 <tcp_receive+0x5e8>)
 8011cd0:	681b      	ldr	r3, [r3, #0]
 8011cd2:	1ad3      	subs	r3, r2, r3
 8011cd4:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8011cd6:	4b23      	ldr	r3, [pc, #140]	; (8011d64 <tcp_receive+0x5ec>)
 8011cd8:	685b      	ldr	r3, [r3, #4]
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	d106      	bne.n	8011cec <tcp_receive+0x574>
 8011cde:	4b22      	ldr	r3, [pc, #136]	; (8011d68 <tcp_receive+0x5f0>)
 8011ce0:	f240 5294 	movw	r2, #1428	; 0x594
 8011ce4:	4921      	ldr	r1, [pc, #132]	; (8011d6c <tcp_receive+0x5f4>)
 8011ce6:	4822      	ldr	r0, [pc, #136]	; (8011d70 <tcp_receive+0x5f8>)
 8011ce8:	f007 fd24 	bl	8019734 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8011cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cee:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8011cf2:	4293      	cmp	r3, r2
 8011cf4:	d906      	bls.n	8011d04 <tcp_receive+0x58c>
 8011cf6:	4b1c      	ldr	r3, [pc, #112]	; (8011d68 <tcp_receive+0x5f0>)
 8011cf8:	f240 5295 	movw	r2, #1429	; 0x595
 8011cfc:	491d      	ldr	r1, [pc, #116]	; (8011d74 <tcp_receive+0x5fc>)
 8011cfe:	481c      	ldr	r0, [pc, #112]	; (8011d70 <tcp_receive+0x5f8>)
 8011d00:	f007 fd18 	bl	8019734 <iprintf>
      off = (u16_t)off32;
 8011d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d06:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8011d0a:	4b16      	ldr	r3, [pc, #88]	; (8011d64 <tcp_receive+0x5ec>)
 8011d0c:	685b      	ldr	r3, [r3, #4]
 8011d0e:	891b      	ldrh	r3, [r3, #8]
 8011d10:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011d14:	429a      	cmp	r2, r3
 8011d16:	d906      	bls.n	8011d26 <tcp_receive+0x5ae>
 8011d18:	4b13      	ldr	r3, [pc, #76]	; (8011d68 <tcp_receive+0x5f0>)
 8011d1a:	f240 5297 	movw	r2, #1431	; 0x597
 8011d1e:	4916      	ldr	r1, [pc, #88]	; (8011d78 <tcp_receive+0x600>)
 8011d20:	4813      	ldr	r0, [pc, #76]	; (8011d70 <tcp_receive+0x5f8>)
 8011d22:	f007 fd07 	bl	8019734 <iprintf>
      inseg.len -= off;
 8011d26:	4b0f      	ldr	r3, [pc, #60]	; (8011d64 <tcp_receive+0x5ec>)
 8011d28:	891a      	ldrh	r2, [r3, #8]
 8011d2a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011d2e:	1ad3      	subs	r3, r2, r3
 8011d30:	b29a      	uxth	r2, r3
 8011d32:	4b0c      	ldr	r3, [pc, #48]	; (8011d64 <tcp_receive+0x5ec>)
 8011d34:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8011d36:	4b0b      	ldr	r3, [pc, #44]	; (8011d64 <tcp_receive+0x5ec>)
 8011d38:	685b      	ldr	r3, [r3, #4]
 8011d3a:	891a      	ldrh	r2, [r3, #8]
 8011d3c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011d40:	1ad3      	subs	r3, r2, r3
 8011d42:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8011d44:	e02a      	b.n	8011d9c <tcp_receive+0x624>
 8011d46:	bf00      	nop
 8011d48:	0801b8c8 	.word	0x0801b8c8
 8011d4c:	0801b8d0 	.word	0x0801b8d0
 8011d50:	20013864 	.word	0x20013864
 8011d54:	20013860 	.word	0x20013860
 8011d58:	2001b664 	.word	0x2001b664
 8011d5c:	20013866 	.word	0x20013866
 8011d60:	2001385c 	.word	0x2001385c
 8011d64:	2001383c 	.word	0x2001383c
 8011d68:	0801b560 	.word	0x0801b560
 8011d6c:	0801b8d8 	.word	0x0801b8d8
 8011d70:	0801b5ac 	.word	0x0801b5ac
 8011d74:	0801b8e8 	.word	0x0801b8e8
 8011d78:	0801b8f8 	.word	0x0801b8f8
        off -= p->len;
 8011d7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011d7e:	895b      	ldrh	r3, [r3, #10]
 8011d80:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011d84:	1ad3      	subs	r3, r2, r3
 8011d86:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8011d8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011d8c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8011d8e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8011d90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011d92:	2200      	movs	r2, #0
 8011d94:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8011d96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011d98:	681b      	ldr	r3, [r3, #0]
 8011d9a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8011d9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011d9e:	895b      	ldrh	r3, [r3, #10]
 8011da0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011da4:	429a      	cmp	r2, r3
 8011da6:	d8e9      	bhi.n	8011d7c <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8011da8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011dac:	4619      	mov	r1, r3
 8011dae:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8011db0:	f7fc fb60 	bl	800e474 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011db8:	4a91      	ldr	r2, [pc, #580]	; (8012000 <tcp_receive+0x888>)
 8011dba:	6013      	str	r3, [r2, #0]
 8011dbc:	4b91      	ldr	r3, [pc, #580]	; (8012004 <tcp_receive+0x88c>)
 8011dbe:	68db      	ldr	r3, [r3, #12]
 8011dc0:	4a8f      	ldr	r2, [pc, #572]	; (8012000 <tcp_receive+0x888>)
 8011dc2:	6812      	ldr	r2, [r2, #0]
 8011dc4:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8011dc6:	e00d      	b.n	8011de4 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8011dc8:	4b8d      	ldr	r3, [pc, #564]	; (8012000 <tcp_receive+0x888>)
 8011dca:	681a      	ldr	r2, [r3, #0]
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011dd0:	1ad3      	subs	r3, r2, r3
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	da06      	bge.n	8011de4 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	8b5b      	ldrh	r3, [r3, #26]
 8011dda:	f043 0302 	orr.w	r3, r3, #2
 8011dde:	b29a      	uxth	r2, r3
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011de4:	4b86      	ldr	r3, [pc, #536]	; (8012000 <tcp_receive+0x888>)
 8011de6:	681a      	ldr	r2, [r3, #0]
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011dec:	1ad3      	subs	r3, r2, r3
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	f2c0 842a 	blt.w	8012648 <tcp_receive+0xed0>
 8011df4:	4b82      	ldr	r3, [pc, #520]	; (8012000 <tcp_receive+0x888>)
 8011df6:	681a      	ldr	r2, [r3, #0]
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011dfc:	6879      	ldr	r1, [r7, #4]
 8011dfe:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011e00:	440b      	add	r3, r1
 8011e02:	1ad3      	subs	r3, r2, r3
 8011e04:	3301      	adds	r3, #1
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	f300 841e 	bgt.w	8012648 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011e10:	4b7b      	ldr	r3, [pc, #492]	; (8012000 <tcp_receive+0x888>)
 8011e12:	681b      	ldr	r3, [r3, #0]
 8011e14:	429a      	cmp	r2, r3
 8011e16:	f040 829a 	bne.w	801234e <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8011e1a:	4b7a      	ldr	r3, [pc, #488]	; (8012004 <tcp_receive+0x88c>)
 8011e1c:	891c      	ldrh	r4, [r3, #8]
 8011e1e:	4b79      	ldr	r3, [pc, #484]	; (8012004 <tcp_receive+0x88c>)
 8011e20:	68db      	ldr	r3, [r3, #12]
 8011e22:	899b      	ldrh	r3, [r3, #12]
 8011e24:	b29b      	uxth	r3, r3
 8011e26:	4618      	mov	r0, r3
 8011e28:	f7fa fff2 	bl	800ce10 <lwip_htons>
 8011e2c:	4603      	mov	r3, r0
 8011e2e:	b2db      	uxtb	r3, r3
 8011e30:	f003 0303 	and.w	r3, r3, #3
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	d001      	beq.n	8011e3c <tcp_receive+0x6c4>
 8011e38:	2301      	movs	r3, #1
 8011e3a:	e000      	b.n	8011e3e <tcp_receive+0x6c6>
 8011e3c:	2300      	movs	r3, #0
 8011e3e:	4423      	add	r3, r4
 8011e40:	b29a      	uxth	r2, r3
 8011e42:	4b71      	ldr	r3, [pc, #452]	; (8012008 <tcp_receive+0x890>)
 8011e44:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011e4a:	4b6f      	ldr	r3, [pc, #444]	; (8012008 <tcp_receive+0x890>)
 8011e4c:	881b      	ldrh	r3, [r3, #0]
 8011e4e:	429a      	cmp	r2, r3
 8011e50:	d275      	bcs.n	8011f3e <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011e52:	4b6c      	ldr	r3, [pc, #432]	; (8012004 <tcp_receive+0x88c>)
 8011e54:	68db      	ldr	r3, [r3, #12]
 8011e56:	899b      	ldrh	r3, [r3, #12]
 8011e58:	b29b      	uxth	r3, r3
 8011e5a:	4618      	mov	r0, r3
 8011e5c:	f7fa ffd8 	bl	800ce10 <lwip_htons>
 8011e60:	4603      	mov	r3, r0
 8011e62:	b2db      	uxtb	r3, r3
 8011e64:	f003 0301 	and.w	r3, r3, #1
 8011e68:	2b00      	cmp	r3, #0
 8011e6a:	d01f      	beq.n	8011eac <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8011e6c:	4b65      	ldr	r3, [pc, #404]	; (8012004 <tcp_receive+0x88c>)
 8011e6e:	68db      	ldr	r3, [r3, #12]
 8011e70:	899b      	ldrh	r3, [r3, #12]
 8011e72:	b29b      	uxth	r3, r3
 8011e74:	b21b      	sxth	r3, r3
 8011e76:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011e7a:	b21c      	sxth	r4, r3
 8011e7c:	4b61      	ldr	r3, [pc, #388]	; (8012004 <tcp_receive+0x88c>)
 8011e7e:	68db      	ldr	r3, [r3, #12]
 8011e80:	899b      	ldrh	r3, [r3, #12]
 8011e82:	b29b      	uxth	r3, r3
 8011e84:	4618      	mov	r0, r3
 8011e86:	f7fa ffc3 	bl	800ce10 <lwip_htons>
 8011e8a:	4603      	mov	r3, r0
 8011e8c:	b2db      	uxtb	r3, r3
 8011e8e:	b29b      	uxth	r3, r3
 8011e90:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8011e94:	b29b      	uxth	r3, r3
 8011e96:	4618      	mov	r0, r3
 8011e98:	f7fa ffba 	bl	800ce10 <lwip_htons>
 8011e9c:	4603      	mov	r3, r0
 8011e9e:	b21b      	sxth	r3, r3
 8011ea0:	4323      	orrs	r3, r4
 8011ea2:	b21a      	sxth	r2, r3
 8011ea4:	4b57      	ldr	r3, [pc, #348]	; (8012004 <tcp_receive+0x88c>)
 8011ea6:	68db      	ldr	r3, [r3, #12]
 8011ea8:	b292      	uxth	r2, r2
 8011eaa:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011eb0:	4b54      	ldr	r3, [pc, #336]	; (8012004 <tcp_receive+0x88c>)
 8011eb2:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011eb4:	4b53      	ldr	r3, [pc, #332]	; (8012004 <tcp_receive+0x88c>)
 8011eb6:	68db      	ldr	r3, [r3, #12]
 8011eb8:	899b      	ldrh	r3, [r3, #12]
 8011eba:	b29b      	uxth	r3, r3
 8011ebc:	4618      	mov	r0, r3
 8011ebe:	f7fa ffa7 	bl	800ce10 <lwip_htons>
 8011ec2:	4603      	mov	r3, r0
 8011ec4:	b2db      	uxtb	r3, r3
 8011ec6:	f003 0302 	and.w	r3, r3, #2
 8011eca:	2b00      	cmp	r3, #0
 8011ecc:	d005      	beq.n	8011eda <tcp_receive+0x762>
            inseg.len -= 1;
 8011ece:	4b4d      	ldr	r3, [pc, #308]	; (8012004 <tcp_receive+0x88c>)
 8011ed0:	891b      	ldrh	r3, [r3, #8]
 8011ed2:	3b01      	subs	r3, #1
 8011ed4:	b29a      	uxth	r2, r3
 8011ed6:	4b4b      	ldr	r3, [pc, #300]	; (8012004 <tcp_receive+0x88c>)
 8011ed8:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8011eda:	4b4a      	ldr	r3, [pc, #296]	; (8012004 <tcp_receive+0x88c>)
 8011edc:	685b      	ldr	r3, [r3, #4]
 8011ede:	4a49      	ldr	r2, [pc, #292]	; (8012004 <tcp_receive+0x88c>)
 8011ee0:	8912      	ldrh	r2, [r2, #8]
 8011ee2:	4611      	mov	r1, r2
 8011ee4:	4618      	mov	r0, r3
 8011ee6:	f7fc f9c5 	bl	800e274 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8011eea:	4b46      	ldr	r3, [pc, #280]	; (8012004 <tcp_receive+0x88c>)
 8011eec:	891c      	ldrh	r4, [r3, #8]
 8011eee:	4b45      	ldr	r3, [pc, #276]	; (8012004 <tcp_receive+0x88c>)
 8011ef0:	68db      	ldr	r3, [r3, #12]
 8011ef2:	899b      	ldrh	r3, [r3, #12]
 8011ef4:	b29b      	uxth	r3, r3
 8011ef6:	4618      	mov	r0, r3
 8011ef8:	f7fa ff8a 	bl	800ce10 <lwip_htons>
 8011efc:	4603      	mov	r3, r0
 8011efe:	b2db      	uxtb	r3, r3
 8011f00:	f003 0303 	and.w	r3, r3, #3
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	d001      	beq.n	8011f0c <tcp_receive+0x794>
 8011f08:	2301      	movs	r3, #1
 8011f0a:	e000      	b.n	8011f0e <tcp_receive+0x796>
 8011f0c:	2300      	movs	r3, #0
 8011f0e:	4423      	add	r3, r4
 8011f10:	b29a      	uxth	r2, r3
 8011f12:	4b3d      	ldr	r3, [pc, #244]	; (8012008 <tcp_receive+0x890>)
 8011f14:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011f16:	4b3c      	ldr	r3, [pc, #240]	; (8012008 <tcp_receive+0x890>)
 8011f18:	881b      	ldrh	r3, [r3, #0]
 8011f1a:	461a      	mov	r2, r3
 8011f1c:	4b38      	ldr	r3, [pc, #224]	; (8012000 <tcp_receive+0x888>)
 8011f1e:	681b      	ldr	r3, [r3, #0]
 8011f20:	441a      	add	r2, r3
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f26:	6879      	ldr	r1, [r7, #4]
 8011f28:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011f2a:	440b      	add	r3, r1
 8011f2c:	429a      	cmp	r2, r3
 8011f2e:	d006      	beq.n	8011f3e <tcp_receive+0x7c6>
 8011f30:	4b36      	ldr	r3, [pc, #216]	; (801200c <tcp_receive+0x894>)
 8011f32:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8011f36:	4936      	ldr	r1, [pc, #216]	; (8012010 <tcp_receive+0x898>)
 8011f38:	4836      	ldr	r0, [pc, #216]	; (8012014 <tcp_receive+0x89c>)
 8011f3a:	f007 fbfb 	bl	8019734 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011f42:	2b00      	cmp	r3, #0
 8011f44:	f000 80e7 	beq.w	8012116 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011f48:	4b2e      	ldr	r3, [pc, #184]	; (8012004 <tcp_receive+0x88c>)
 8011f4a:	68db      	ldr	r3, [r3, #12]
 8011f4c:	899b      	ldrh	r3, [r3, #12]
 8011f4e:	b29b      	uxth	r3, r3
 8011f50:	4618      	mov	r0, r3
 8011f52:	f7fa ff5d 	bl	800ce10 <lwip_htons>
 8011f56:	4603      	mov	r3, r0
 8011f58:	b2db      	uxtb	r3, r3
 8011f5a:	f003 0301 	and.w	r3, r3, #1
 8011f5e:	2b00      	cmp	r3, #0
 8011f60:	d010      	beq.n	8011f84 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8011f62:	e00a      	b.n	8011f7a <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011f68:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011f6e:	681a      	ldr	r2, [r3, #0]
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8011f74:	68f8      	ldr	r0, [r7, #12]
 8011f76:	f7fd fd92 	bl	800fa9e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011f7e:	2b00      	cmp	r3, #0
 8011f80:	d1f0      	bne.n	8011f64 <tcp_receive+0x7ec>
 8011f82:	e0c8      	b.n	8012116 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011f88:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8011f8a:	e052      	b.n	8012032 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011f8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f8e:	68db      	ldr	r3, [r3, #12]
 8011f90:	899b      	ldrh	r3, [r3, #12]
 8011f92:	b29b      	uxth	r3, r3
 8011f94:	4618      	mov	r0, r3
 8011f96:	f7fa ff3b 	bl	800ce10 <lwip_htons>
 8011f9a:	4603      	mov	r3, r0
 8011f9c:	b2db      	uxtb	r3, r3
 8011f9e:	f003 0301 	and.w	r3, r3, #1
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	d03d      	beq.n	8012022 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8011fa6:	4b17      	ldr	r3, [pc, #92]	; (8012004 <tcp_receive+0x88c>)
 8011fa8:	68db      	ldr	r3, [r3, #12]
 8011faa:	899b      	ldrh	r3, [r3, #12]
 8011fac:	b29b      	uxth	r3, r3
 8011fae:	4618      	mov	r0, r3
 8011fb0:	f7fa ff2e 	bl	800ce10 <lwip_htons>
 8011fb4:	4603      	mov	r3, r0
 8011fb6:	b2db      	uxtb	r3, r3
 8011fb8:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	d130      	bne.n	8012022 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8011fc0:	4b10      	ldr	r3, [pc, #64]	; (8012004 <tcp_receive+0x88c>)
 8011fc2:	68db      	ldr	r3, [r3, #12]
 8011fc4:	899b      	ldrh	r3, [r3, #12]
 8011fc6:	b29c      	uxth	r4, r3
 8011fc8:	2001      	movs	r0, #1
 8011fca:	f7fa ff21 	bl	800ce10 <lwip_htons>
 8011fce:	4603      	mov	r3, r0
 8011fd0:	461a      	mov	r2, r3
 8011fd2:	4b0c      	ldr	r3, [pc, #48]	; (8012004 <tcp_receive+0x88c>)
 8011fd4:	68db      	ldr	r3, [r3, #12]
 8011fd6:	4322      	orrs	r2, r4
 8011fd8:	b292      	uxth	r2, r2
 8011fda:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8011fdc:	4b09      	ldr	r3, [pc, #36]	; (8012004 <tcp_receive+0x88c>)
 8011fde:	891c      	ldrh	r4, [r3, #8]
 8011fe0:	4b08      	ldr	r3, [pc, #32]	; (8012004 <tcp_receive+0x88c>)
 8011fe2:	68db      	ldr	r3, [r3, #12]
 8011fe4:	899b      	ldrh	r3, [r3, #12]
 8011fe6:	b29b      	uxth	r3, r3
 8011fe8:	4618      	mov	r0, r3
 8011fea:	f7fa ff11 	bl	800ce10 <lwip_htons>
 8011fee:	4603      	mov	r3, r0
 8011ff0:	b2db      	uxtb	r3, r3
 8011ff2:	f003 0303 	and.w	r3, r3, #3
 8011ff6:	2b00      	cmp	r3, #0
 8011ff8:	d00e      	beq.n	8012018 <tcp_receive+0x8a0>
 8011ffa:	2301      	movs	r3, #1
 8011ffc:	e00d      	b.n	801201a <tcp_receive+0x8a2>
 8011ffe:	bf00      	nop
 8012000:	2001385c 	.word	0x2001385c
 8012004:	2001383c 	.word	0x2001383c
 8012008:	20013866 	.word	0x20013866
 801200c:	0801b560 	.word	0x0801b560
 8012010:	0801b908 	.word	0x0801b908
 8012014:	0801b5ac 	.word	0x0801b5ac
 8012018:	2300      	movs	r3, #0
 801201a:	4423      	add	r3, r4
 801201c:	b29a      	uxth	r2, r3
 801201e:	4b98      	ldr	r3, [pc, #608]	; (8012280 <tcp_receive+0xb08>)
 8012020:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8012022:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012024:	613b      	str	r3, [r7, #16]
              next = next->next;
 8012026:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012028:	681b      	ldr	r3, [r3, #0]
 801202a:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 801202c:	6938      	ldr	r0, [r7, #16]
 801202e:	f7fd fd36 	bl	800fa9e <tcp_seg_free>
            while (next &&
 8012032:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012034:	2b00      	cmp	r3, #0
 8012036:	d00e      	beq.n	8012056 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8012038:	4b91      	ldr	r3, [pc, #580]	; (8012280 <tcp_receive+0xb08>)
 801203a:	881b      	ldrh	r3, [r3, #0]
 801203c:	461a      	mov	r2, r3
 801203e:	4b91      	ldr	r3, [pc, #580]	; (8012284 <tcp_receive+0xb0c>)
 8012040:	681b      	ldr	r3, [r3, #0]
 8012042:	441a      	add	r2, r3
 8012044:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012046:	68db      	ldr	r3, [r3, #12]
 8012048:	685b      	ldr	r3, [r3, #4]
 801204a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801204c:	8909      	ldrh	r1, [r1, #8]
 801204e:	440b      	add	r3, r1
 8012050:	1ad3      	subs	r3, r2, r3
            while (next &&
 8012052:	2b00      	cmp	r3, #0
 8012054:	da9a      	bge.n	8011f8c <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8012056:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012058:	2b00      	cmp	r3, #0
 801205a:	d059      	beq.n	8012110 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 801205c:	4b88      	ldr	r3, [pc, #544]	; (8012280 <tcp_receive+0xb08>)
 801205e:	881b      	ldrh	r3, [r3, #0]
 8012060:	461a      	mov	r2, r3
 8012062:	4b88      	ldr	r3, [pc, #544]	; (8012284 <tcp_receive+0xb0c>)
 8012064:	681b      	ldr	r3, [r3, #0]
 8012066:	441a      	add	r2, r3
 8012068:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801206a:	68db      	ldr	r3, [r3, #12]
 801206c:	685b      	ldr	r3, [r3, #4]
 801206e:	1ad3      	subs	r3, r2, r3
            if (next &&
 8012070:	2b00      	cmp	r3, #0
 8012072:	dd4d      	ble.n	8012110 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8012074:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012076:	68db      	ldr	r3, [r3, #12]
 8012078:	685b      	ldr	r3, [r3, #4]
 801207a:	b29a      	uxth	r2, r3
 801207c:	4b81      	ldr	r3, [pc, #516]	; (8012284 <tcp_receive+0xb0c>)
 801207e:	681b      	ldr	r3, [r3, #0]
 8012080:	b29b      	uxth	r3, r3
 8012082:	1ad3      	subs	r3, r2, r3
 8012084:	b29a      	uxth	r2, r3
 8012086:	4b80      	ldr	r3, [pc, #512]	; (8012288 <tcp_receive+0xb10>)
 8012088:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801208a:	4b7f      	ldr	r3, [pc, #508]	; (8012288 <tcp_receive+0xb10>)
 801208c:	68db      	ldr	r3, [r3, #12]
 801208e:	899b      	ldrh	r3, [r3, #12]
 8012090:	b29b      	uxth	r3, r3
 8012092:	4618      	mov	r0, r3
 8012094:	f7fa febc 	bl	800ce10 <lwip_htons>
 8012098:	4603      	mov	r3, r0
 801209a:	b2db      	uxtb	r3, r3
 801209c:	f003 0302 	and.w	r3, r3, #2
 80120a0:	2b00      	cmp	r3, #0
 80120a2:	d005      	beq.n	80120b0 <tcp_receive+0x938>
                inseg.len -= 1;
 80120a4:	4b78      	ldr	r3, [pc, #480]	; (8012288 <tcp_receive+0xb10>)
 80120a6:	891b      	ldrh	r3, [r3, #8]
 80120a8:	3b01      	subs	r3, #1
 80120aa:	b29a      	uxth	r2, r3
 80120ac:	4b76      	ldr	r3, [pc, #472]	; (8012288 <tcp_receive+0xb10>)
 80120ae:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80120b0:	4b75      	ldr	r3, [pc, #468]	; (8012288 <tcp_receive+0xb10>)
 80120b2:	685b      	ldr	r3, [r3, #4]
 80120b4:	4a74      	ldr	r2, [pc, #464]	; (8012288 <tcp_receive+0xb10>)
 80120b6:	8912      	ldrh	r2, [r2, #8]
 80120b8:	4611      	mov	r1, r2
 80120ba:	4618      	mov	r0, r3
 80120bc:	f7fc f8da 	bl	800e274 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80120c0:	4b71      	ldr	r3, [pc, #452]	; (8012288 <tcp_receive+0xb10>)
 80120c2:	891c      	ldrh	r4, [r3, #8]
 80120c4:	4b70      	ldr	r3, [pc, #448]	; (8012288 <tcp_receive+0xb10>)
 80120c6:	68db      	ldr	r3, [r3, #12]
 80120c8:	899b      	ldrh	r3, [r3, #12]
 80120ca:	b29b      	uxth	r3, r3
 80120cc:	4618      	mov	r0, r3
 80120ce:	f7fa fe9f 	bl	800ce10 <lwip_htons>
 80120d2:	4603      	mov	r3, r0
 80120d4:	b2db      	uxtb	r3, r3
 80120d6:	f003 0303 	and.w	r3, r3, #3
 80120da:	2b00      	cmp	r3, #0
 80120dc:	d001      	beq.n	80120e2 <tcp_receive+0x96a>
 80120de:	2301      	movs	r3, #1
 80120e0:	e000      	b.n	80120e4 <tcp_receive+0x96c>
 80120e2:	2300      	movs	r3, #0
 80120e4:	4423      	add	r3, r4
 80120e6:	b29a      	uxth	r2, r3
 80120e8:	4b65      	ldr	r3, [pc, #404]	; (8012280 <tcp_receive+0xb08>)
 80120ea:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80120ec:	4b64      	ldr	r3, [pc, #400]	; (8012280 <tcp_receive+0xb08>)
 80120ee:	881b      	ldrh	r3, [r3, #0]
 80120f0:	461a      	mov	r2, r3
 80120f2:	4b64      	ldr	r3, [pc, #400]	; (8012284 <tcp_receive+0xb0c>)
 80120f4:	681b      	ldr	r3, [r3, #0]
 80120f6:	441a      	add	r2, r3
 80120f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80120fa:	68db      	ldr	r3, [r3, #12]
 80120fc:	685b      	ldr	r3, [r3, #4]
 80120fe:	429a      	cmp	r2, r3
 8012100:	d006      	beq.n	8012110 <tcp_receive+0x998>
 8012102:	4b62      	ldr	r3, [pc, #392]	; (801228c <tcp_receive+0xb14>)
 8012104:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8012108:	4961      	ldr	r1, [pc, #388]	; (8012290 <tcp_receive+0xb18>)
 801210a:	4862      	ldr	r0, [pc, #392]	; (8012294 <tcp_receive+0xb1c>)
 801210c:	f007 fb12 	bl	8019734 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012114:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8012116:	4b5a      	ldr	r3, [pc, #360]	; (8012280 <tcp_receive+0xb08>)
 8012118:	881b      	ldrh	r3, [r3, #0]
 801211a:	461a      	mov	r2, r3
 801211c:	4b59      	ldr	r3, [pc, #356]	; (8012284 <tcp_receive+0xb0c>)
 801211e:	681b      	ldr	r3, [r3, #0]
 8012120:	441a      	add	r2, r3
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801212a:	4b55      	ldr	r3, [pc, #340]	; (8012280 <tcp_receive+0xb08>)
 801212c:	881b      	ldrh	r3, [r3, #0]
 801212e:	429a      	cmp	r2, r3
 8012130:	d206      	bcs.n	8012140 <tcp_receive+0x9c8>
 8012132:	4b56      	ldr	r3, [pc, #344]	; (801228c <tcp_receive+0xb14>)
 8012134:	f240 6207 	movw	r2, #1543	; 0x607
 8012138:	4957      	ldr	r1, [pc, #348]	; (8012298 <tcp_receive+0xb20>)
 801213a:	4856      	ldr	r0, [pc, #344]	; (8012294 <tcp_receive+0xb1c>)
 801213c:	f007 fafa 	bl	8019734 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012144:	4b4e      	ldr	r3, [pc, #312]	; (8012280 <tcp_receive+0xb08>)
 8012146:	881b      	ldrh	r3, [r3, #0]
 8012148:	1ad3      	subs	r3, r2, r3
 801214a:	b29a      	uxth	r2, r3
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8012150:	6878      	ldr	r0, [r7, #4]
 8012152:	f7fc ffc5 	bl	800f0e0 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8012156:	4b4c      	ldr	r3, [pc, #304]	; (8012288 <tcp_receive+0xb10>)
 8012158:	685b      	ldr	r3, [r3, #4]
 801215a:	891b      	ldrh	r3, [r3, #8]
 801215c:	2b00      	cmp	r3, #0
 801215e:	d006      	beq.n	801216e <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8012160:	4b49      	ldr	r3, [pc, #292]	; (8012288 <tcp_receive+0xb10>)
 8012162:	685b      	ldr	r3, [r3, #4]
 8012164:	4a4d      	ldr	r2, [pc, #308]	; (801229c <tcp_receive+0xb24>)
 8012166:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8012168:	4b47      	ldr	r3, [pc, #284]	; (8012288 <tcp_receive+0xb10>)
 801216a:	2200      	movs	r2, #0
 801216c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801216e:	4b46      	ldr	r3, [pc, #280]	; (8012288 <tcp_receive+0xb10>)
 8012170:	68db      	ldr	r3, [r3, #12]
 8012172:	899b      	ldrh	r3, [r3, #12]
 8012174:	b29b      	uxth	r3, r3
 8012176:	4618      	mov	r0, r3
 8012178:	f7fa fe4a 	bl	800ce10 <lwip_htons>
 801217c:	4603      	mov	r3, r0
 801217e:	b2db      	uxtb	r3, r3
 8012180:	f003 0301 	and.w	r3, r3, #1
 8012184:	2b00      	cmp	r3, #0
 8012186:	f000 80b8 	beq.w	80122fa <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801218a:	4b45      	ldr	r3, [pc, #276]	; (80122a0 <tcp_receive+0xb28>)
 801218c:	781b      	ldrb	r3, [r3, #0]
 801218e:	f043 0320 	orr.w	r3, r3, #32
 8012192:	b2da      	uxtb	r2, r3
 8012194:	4b42      	ldr	r3, [pc, #264]	; (80122a0 <tcp_receive+0xb28>)
 8012196:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8012198:	e0af      	b.n	80122fa <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801219e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80121a4:	68db      	ldr	r3, [r3, #12]
 80121a6:	685b      	ldr	r3, [r3, #4]
 80121a8:	4a36      	ldr	r2, [pc, #216]	; (8012284 <tcp_receive+0xb0c>)
 80121aa:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80121ac:	68bb      	ldr	r3, [r7, #8]
 80121ae:	891b      	ldrh	r3, [r3, #8]
 80121b0:	461c      	mov	r4, r3
 80121b2:	68bb      	ldr	r3, [r7, #8]
 80121b4:	68db      	ldr	r3, [r3, #12]
 80121b6:	899b      	ldrh	r3, [r3, #12]
 80121b8:	b29b      	uxth	r3, r3
 80121ba:	4618      	mov	r0, r3
 80121bc:	f7fa fe28 	bl	800ce10 <lwip_htons>
 80121c0:	4603      	mov	r3, r0
 80121c2:	b2db      	uxtb	r3, r3
 80121c4:	f003 0303 	and.w	r3, r3, #3
 80121c8:	2b00      	cmp	r3, #0
 80121ca:	d001      	beq.n	80121d0 <tcp_receive+0xa58>
 80121cc:	2301      	movs	r3, #1
 80121ce:	e000      	b.n	80121d2 <tcp_receive+0xa5a>
 80121d0:	2300      	movs	r3, #0
 80121d2:	191a      	adds	r2, r3, r4
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121d8:	441a      	add	r2, r3
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80121e2:	461c      	mov	r4, r3
 80121e4:	68bb      	ldr	r3, [r7, #8]
 80121e6:	891b      	ldrh	r3, [r3, #8]
 80121e8:	461d      	mov	r5, r3
 80121ea:	68bb      	ldr	r3, [r7, #8]
 80121ec:	68db      	ldr	r3, [r3, #12]
 80121ee:	899b      	ldrh	r3, [r3, #12]
 80121f0:	b29b      	uxth	r3, r3
 80121f2:	4618      	mov	r0, r3
 80121f4:	f7fa fe0c 	bl	800ce10 <lwip_htons>
 80121f8:	4603      	mov	r3, r0
 80121fa:	b2db      	uxtb	r3, r3
 80121fc:	f003 0303 	and.w	r3, r3, #3
 8012200:	2b00      	cmp	r3, #0
 8012202:	d001      	beq.n	8012208 <tcp_receive+0xa90>
 8012204:	2301      	movs	r3, #1
 8012206:	e000      	b.n	801220a <tcp_receive+0xa92>
 8012208:	2300      	movs	r3, #0
 801220a:	442b      	add	r3, r5
 801220c:	429c      	cmp	r4, r3
 801220e:	d206      	bcs.n	801221e <tcp_receive+0xaa6>
 8012210:	4b1e      	ldr	r3, [pc, #120]	; (801228c <tcp_receive+0xb14>)
 8012212:	f240 622b 	movw	r2, #1579	; 0x62b
 8012216:	4923      	ldr	r1, [pc, #140]	; (80122a4 <tcp_receive+0xb2c>)
 8012218:	481e      	ldr	r0, [pc, #120]	; (8012294 <tcp_receive+0xb1c>)
 801221a:	f007 fa8b 	bl	8019734 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801221e:	68bb      	ldr	r3, [r7, #8]
 8012220:	891b      	ldrh	r3, [r3, #8]
 8012222:	461c      	mov	r4, r3
 8012224:	68bb      	ldr	r3, [r7, #8]
 8012226:	68db      	ldr	r3, [r3, #12]
 8012228:	899b      	ldrh	r3, [r3, #12]
 801222a:	b29b      	uxth	r3, r3
 801222c:	4618      	mov	r0, r3
 801222e:	f7fa fdef 	bl	800ce10 <lwip_htons>
 8012232:	4603      	mov	r3, r0
 8012234:	b2db      	uxtb	r3, r3
 8012236:	f003 0303 	and.w	r3, r3, #3
 801223a:	2b00      	cmp	r3, #0
 801223c:	d001      	beq.n	8012242 <tcp_receive+0xaca>
 801223e:	2301      	movs	r3, #1
 8012240:	e000      	b.n	8012244 <tcp_receive+0xacc>
 8012242:	2300      	movs	r3, #0
 8012244:	1919      	adds	r1, r3, r4
 8012246:	687b      	ldr	r3, [r7, #4]
 8012248:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801224a:	b28b      	uxth	r3, r1
 801224c:	1ad3      	subs	r3, r2, r3
 801224e:	b29a      	uxth	r2, r3
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8012254:	6878      	ldr	r0, [r7, #4]
 8012256:	f7fc ff43 	bl	800f0e0 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801225a:	68bb      	ldr	r3, [r7, #8]
 801225c:	685b      	ldr	r3, [r3, #4]
 801225e:	891b      	ldrh	r3, [r3, #8]
 8012260:	2b00      	cmp	r3, #0
 8012262:	d028      	beq.n	80122b6 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8012264:	4b0d      	ldr	r3, [pc, #52]	; (801229c <tcp_receive+0xb24>)
 8012266:	681b      	ldr	r3, [r3, #0]
 8012268:	2b00      	cmp	r3, #0
 801226a:	d01d      	beq.n	80122a8 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 801226c:	4b0b      	ldr	r3, [pc, #44]	; (801229c <tcp_receive+0xb24>)
 801226e:	681a      	ldr	r2, [r3, #0]
 8012270:	68bb      	ldr	r3, [r7, #8]
 8012272:	685b      	ldr	r3, [r3, #4]
 8012274:	4619      	mov	r1, r3
 8012276:	4610      	mov	r0, r2
 8012278:	f7fc fa50 	bl	800e71c <pbuf_cat>
 801227c:	e018      	b.n	80122b0 <tcp_receive+0xb38>
 801227e:	bf00      	nop
 8012280:	20013866 	.word	0x20013866
 8012284:	2001385c 	.word	0x2001385c
 8012288:	2001383c 	.word	0x2001383c
 801228c:	0801b560 	.word	0x0801b560
 8012290:	0801b940 	.word	0x0801b940
 8012294:	0801b5ac 	.word	0x0801b5ac
 8012298:	0801b97c 	.word	0x0801b97c
 801229c:	2001386c 	.word	0x2001386c
 80122a0:	20013869 	.word	0x20013869
 80122a4:	0801b99c 	.word	0x0801b99c
            } else {
              recv_data = cseg->p;
 80122a8:	68bb      	ldr	r3, [r7, #8]
 80122aa:	685b      	ldr	r3, [r3, #4]
 80122ac:	4a70      	ldr	r2, [pc, #448]	; (8012470 <tcp_receive+0xcf8>)
 80122ae:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80122b0:	68bb      	ldr	r3, [r7, #8]
 80122b2:	2200      	movs	r2, #0
 80122b4:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80122b6:	68bb      	ldr	r3, [r7, #8]
 80122b8:	68db      	ldr	r3, [r3, #12]
 80122ba:	899b      	ldrh	r3, [r3, #12]
 80122bc:	b29b      	uxth	r3, r3
 80122be:	4618      	mov	r0, r3
 80122c0:	f7fa fda6 	bl	800ce10 <lwip_htons>
 80122c4:	4603      	mov	r3, r0
 80122c6:	b2db      	uxtb	r3, r3
 80122c8:	f003 0301 	and.w	r3, r3, #1
 80122cc:	2b00      	cmp	r3, #0
 80122ce:	d00d      	beq.n	80122ec <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80122d0:	4b68      	ldr	r3, [pc, #416]	; (8012474 <tcp_receive+0xcfc>)
 80122d2:	781b      	ldrb	r3, [r3, #0]
 80122d4:	f043 0320 	orr.w	r3, r3, #32
 80122d8:	b2da      	uxtb	r2, r3
 80122da:	4b66      	ldr	r3, [pc, #408]	; (8012474 <tcp_receive+0xcfc>)
 80122dc:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80122de:	687b      	ldr	r3, [r7, #4]
 80122e0:	7d1b      	ldrb	r3, [r3, #20]
 80122e2:	2b04      	cmp	r3, #4
 80122e4:	d102      	bne.n	80122ec <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	2207      	movs	r2, #7
 80122ea:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80122ec:	68bb      	ldr	r3, [r7, #8]
 80122ee:	681a      	ldr	r2, [r3, #0]
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 80122f4:	68b8      	ldr	r0, [r7, #8]
 80122f6:	f7fd fbd2 	bl	800fa9e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80122fe:	2b00      	cmp	r3, #0
 8012300:	d008      	beq.n	8012314 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012306:	68db      	ldr	r3, [r3, #12]
 8012308:	685a      	ldr	r2, [r3, #4]
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801230e:	429a      	cmp	r2, r3
 8012310:	f43f af43 	beq.w	801219a <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	8b5b      	ldrh	r3, [r3, #26]
 8012318:	f003 0301 	and.w	r3, r3, #1
 801231c:	2b00      	cmp	r3, #0
 801231e:	d00e      	beq.n	801233e <tcp_receive+0xbc6>
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	8b5b      	ldrh	r3, [r3, #26]
 8012324:	f023 0301 	bic.w	r3, r3, #1
 8012328:	b29a      	uxth	r2, r3
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	835a      	strh	r2, [r3, #26]
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	8b5b      	ldrh	r3, [r3, #26]
 8012332:	f043 0302 	orr.w	r3, r3, #2
 8012336:	b29a      	uxth	r2, r3
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801233c:	e188      	b.n	8012650 <tcp_receive+0xed8>
        tcp_ack(pcb);
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	8b5b      	ldrh	r3, [r3, #26]
 8012342:	f043 0301 	orr.w	r3, r3, #1
 8012346:	b29a      	uxth	r2, r3
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801234c:	e180      	b.n	8012650 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012352:	2b00      	cmp	r3, #0
 8012354:	d106      	bne.n	8012364 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8012356:	4848      	ldr	r0, [pc, #288]	; (8012478 <tcp_receive+0xd00>)
 8012358:	f7fd fbba 	bl	800fad0 <tcp_seg_copy>
 801235c:	4602      	mov	r2, r0
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	675a      	str	r2, [r3, #116]	; 0x74
 8012362:	e16d      	b.n	8012640 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8012364:	2300      	movs	r3, #0
 8012366:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801236c:	63bb      	str	r3, [r7, #56]	; 0x38
 801236e:	e157      	b.n	8012620 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8012370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012372:	68db      	ldr	r3, [r3, #12]
 8012374:	685a      	ldr	r2, [r3, #4]
 8012376:	4b41      	ldr	r3, [pc, #260]	; (801247c <tcp_receive+0xd04>)
 8012378:	681b      	ldr	r3, [r3, #0]
 801237a:	429a      	cmp	r2, r3
 801237c:	d11d      	bne.n	80123ba <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801237e:	4b3e      	ldr	r3, [pc, #248]	; (8012478 <tcp_receive+0xd00>)
 8012380:	891a      	ldrh	r2, [r3, #8]
 8012382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012384:	891b      	ldrh	r3, [r3, #8]
 8012386:	429a      	cmp	r2, r3
 8012388:	f240 814f 	bls.w	801262a <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801238c:	483a      	ldr	r0, [pc, #232]	; (8012478 <tcp_receive+0xd00>)
 801238e:	f7fd fb9f 	bl	800fad0 <tcp_seg_copy>
 8012392:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8012394:	697b      	ldr	r3, [r7, #20]
 8012396:	2b00      	cmp	r3, #0
 8012398:	f000 8149 	beq.w	801262e <tcp_receive+0xeb6>
                  if (prev != NULL) {
 801239c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801239e:	2b00      	cmp	r3, #0
 80123a0:	d003      	beq.n	80123aa <tcp_receive+0xc32>
                    prev->next = cseg;
 80123a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80123a4:	697a      	ldr	r2, [r7, #20]
 80123a6:	601a      	str	r2, [r3, #0]
 80123a8:	e002      	b.n	80123b0 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	697a      	ldr	r2, [r7, #20]
 80123ae:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80123b0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80123b2:	6978      	ldr	r0, [r7, #20]
 80123b4:	f7ff f8dc 	bl	8011570 <tcp_oos_insert_segment>
                }
                break;
 80123b8:	e139      	b.n	801262e <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80123ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80123bc:	2b00      	cmp	r3, #0
 80123be:	d117      	bne.n	80123f0 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80123c0:	4b2e      	ldr	r3, [pc, #184]	; (801247c <tcp_receive+0xd04>)
 80123c2:	681a      	ldr	r2, [r3, #0]
 80123c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123c6:	68db      	ldr	r3, [r3, #12]
 80123c8:	685b      	ldr	r3, [r3, #4]
 80123ca:	1ad3      	subs	r3, r2, r3
 80123cc:	2b00      	cmp	r3, #0
 80123ce:	da57      	bge.n	8012480 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80123d0:	4829      	ldr	r0, [pc, #164]	; (8012478 <tcp_receive+0xd00>)
 80123d2:	f7fd fb7d 	bl	800fad0 <tcp_seg_copy>
 80123d6:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80123d8:	69bb      	ldr	r3, [r7, #24]
 80123da:	2b00      	cmp	r3, #0
 80123dc:	f000 8129 	beq.w	8012632 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	69ba      	ldr	r2, [r7, #24]
 80123e4:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 80123e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80123e8:	69b8      	ldr	r0, [r7, #24]
 80123ea:	f7ff f8c1 	bl	8011570 <tcp_oos_insert_segment>
                  }
                  break;
 80123ee:	e120      	b.n	8012632 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80123f0:	4b22      	ldr	r3, [pc, #136]	; (801247c <tcp_receive+0xd04>)
 80123f2:	681a      	ldr	r2, [r3, #0]
 80123f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80123f6:	68db      	ldr	r3, [r3, #12]
 80123f8:	685b      	ldr	r3, [r3, #4]
 80123fa:	1ad3      	subs	r3, r2, r3
 80123fc:	3b01      	subs	r3, #1
 80123fe:	2b00      	cmp	r3, #0
 8012400:	db3e      	blt.n	8012480 <tcp_receive+0xd08>
 8012402:	4b1e      	ldr	r3, [pc, #120]	; (801247c <tcp_receive+0xd04>)
 8012404:	681a      	ldr	r2, [r3, #0]
 8012406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012408:	68db      	ldr	r3, [r3, #12]
 801240a:	685b      	ldr	r3, [r3, #4]
 801240c:	1ad3      	subs	r3, r2, r3
 801240e:	3301      	adds	r3, #1
 8012410:	2b00      	cmp	r3, #0
 8012412:	dc35      	bgt.n	8012480 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012414:	4818      	ldr	r0, [pc, #96]	; (8012478 <tcp_receive+0xd00>)
 8012416:	f7fd fb5b 	bl	800fad0 <tcp_seg_copy>
 801241a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 801241c:	69fb      	ldr	r3, [r7, #28]
 801241e:	2b00      	cmp	r3, #0
 8012420:	f000 8109 	beq.w	8012636 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8012424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012426:	68db      	ldr	r3, [r3, #12]
 8012428:	685b      	ldr	r3, [r3, #4]
 801242a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801242c:	8912      	ldrh	r2, [r2, #8]
 801242e:	441a      	add	r2, r3
 8012430:	4b12      	ldr	r3, [pc, #72]	; (801247c <tcp_receive+0xd04>)
 8012432:	681b      	ldr	r3, [r3, #0]
 8012434:	1ad3      	subs	r3, r2, r3
 8012436:	2b00      	cmp	r3, #0
 8012438:	dd12      	ble.n	8012460 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801243a:	4b10      	ldr	r3, [pc, #64]	; (801247c <tcp_receive+0xd04>)
 801243c:	681b      	ldr	r3, [r3, #0]
 801243e:	b29a      	uxth	r2, r3
 8012440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012442:	68db      	ldr	r3, [r3, #12]
 8012444:	685b      	ldr	r3, [r3, #4]
 8012446:	b29b      	uxth	r3, r3
 8012448:	1ad3      	subs	r3, r2, r3
 801244a:	b29a      	uxth	r2, r3
 801244c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801244e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8012450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012452:	685a      	ldr	r2, [r3, #4]
 8012454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012456:	891b      	ldrh	r3, [r3, #8]
 8012458:	4619      	mov	r1, r3
 801245a:	4610      	mov	r0, r2
 801245c:	f7fb ff0a 	bl	800e274 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8012460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012462:	69fa      	ldr	r2, [r7, #28]
 8012464:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8012466:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012468:	69f8      	ldr	r0, [r7, #28]
 801246a:	f7ff f881 	bl	8011570 <tcp_oos_insert_segment>
                  }
                  break;
 801246e:	e0e2      	b.n	8012636 <tcp_receive+0xebe>
 8012470:	2001386c 	.word	0x2001386c
 8012474:	20013869 	.word	0x20013869
 8012478:	2001383c 	.word	0x2001383c
 801247c:	2001385c 	.word	0x2001385c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8012480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012482:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8012484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012486:	681b      	ldr	r3, [r3, #0]
 8012488:	2b00      	cmp	r3, #0
 801248a:	f040 80c6 	bne.w	801261a <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801248e:	4b80      	ldr	r3, [pc, #512]	; (8012690 <tcp_receive+0xf18>)
 8012490:	681a      	ldr	r2, [r3, #0]
 8012492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012494:	68db      	ldr	r3, [r3, #12]
 8012496:	685b      	ldr	r3, [r3, #4]
 8012498:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801249a:	2b00      	cmp	r3, #0
 801249c:	f340 80bd 	ble.w	801261a <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80124a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124a2:	68db      	ldr	r3, [r3, #12]
 80124a4:	899b      	ldrh	r3, [r3, #12]
 80124a6:	b29b      	uxth	r3, r3
 80124a8:	4618      	mov	r0, r3
 80124aa:	f7fa fcb1 	bl	800ce10 <lwip_htons>
 80124ae:	4603      	mov	r3, r0
 80124b0:	b2db      	uxtb	r3, r3
 80124b2:	f003 0301 	and.w	r3, r3, #1
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	f040 80bf 	bne.w	801263a <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80124bc:	4875      	ldr	r0, [pc, #468]	; (8012694 <tcp_receive+0xf1c>)
 80124be:	f7fd fb07 	bl	800fad0 <tcp_seg_copy>
 80124c2:	4602      	mov	r2, r0
 80124c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124c6:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80124c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124ca:	681b      	ldr	r3, [r3, #0]
 80124cc:	2b00      	cmp	r3, #0
 80124ce:	f000 80b6 	beq.w	801263e <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80124d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124d4:	68db      	ldr	r3, [r3, #12]
 80124d6:	685b      	ldr	r3, [r3, #4]
 80124d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80124da:	8912      	ldrh	r2, [r2, #8]
 80124dc:	441a      	add	r2, r3
 80124de:	4b6c      	ldr	r3, [pc, #432]	; (8012690 <tcp_receive+0xf18>)
 80124e0:	681b      	ldr	r3, [r3, #0]
 80124e2:	1ad3      	subs	r3, r2, r3
 80124e4:	2b00      	cmp	r3, #0
 80124e6:	dd12      	ble.n	801250e <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80124e8:	4b69      	ldr	r3, [pc, #420]	; (8012690 <tcp_receive+0xf18>)
 80124ea:	681b      	ldr	r3, [r3, #0]
 80124ec:	b29a      	uxth	r2, r3
 80124ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124f0:	68db      	ldr	r3, [r3, #12]
 80124f2:	685b      	ldr	r3, [r3, #4]
 80124f4:	b29b      	uxth	r3, r3
 80124f6:	1ad3      	subs	r3, r2, r3
 80124f8:	b29a      	uxth	r2, r3
 80124fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124fc:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80124fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012500:	685a      	ldr	r2, [r3, #4]
 8012502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012504:	891b      	ldrh	r3, [r3, #8]
 8012506:	4619      	mov	r1, r3
 8012508:	4610      	mov	r0, r2
 801250a:	f7fb feb3 	bl	800e274 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801250e:	4b62      	ldr	r3, [pc, #392]	; (8012698 <tcp_receive+0xf20>)
 8012510:	881b      	ldrh	r3, [r3, #0]
 8012512:	461a      	mov	r2, r3
 8012514:	4b5e      	ldr	r3, [pc, #376]	; (8012690 <tcp_receive+0xf18>)
 8012516:	681b      	ldr	r3, [r3, #0]
 8012518:	441a      	add	r2, r3
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801251e:	6879      	ldr	r1, [r7, #4]
 8012520:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012522:	440b      	add	r3, r1
 8012524:	1ad3      	subs	r3, r2, r3
 8012526:	2b00      	cmp	r3, #0
 8012528:	f340 8089 	ble.w	801263e <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801252c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801252e:	681b      	ldr	r3, [r3, #0]
 8012530:	68db      	ldr	r3, [r3, #12]
 8012532:	899b      	ldrh	r3, [r3, #12]
 8012534:	b29b      	uxth	r3, r3
 8012536:	4618      	mov	r0, r3
 8012538:	f7fa fc6a 	bl	800ce10 <lwip_htons>
 801253c:	4603      	mov	r3, r0
 801253e:	b2db      	uxtb	r3, r3
 8012540:	f003 0301 	and.w	r3, r3, #1
 8012544:	2b00      	cmp	r3, #0
 8012546:	d022      	beq.n	801258e <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8012548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801254a:	681b      	ldr	r3, [r3, #0]
 801254c:	68db      	ldr	r3, [r3, #12]
 801254e:	899b      	ldrh	r3, [r3, #12]
 8012550:	b29b      	uxth	r3, r3
 8012552:	b21b      	sxth	r3, r3
 8012554:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012558:	b21c      	sxth	r4, r3
 801255a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801255c:	681b      	ldr	r3, [r3, #0]
 801255e:	68db      	ldr	r3, [r3, #12]
 8012560:	899b      	ldrh	r3, [r3, #12]
 8012562:	b29b      	uxth	r3, r3
 8012564:	4618      	mov	r0, r3
 8012566:	f7fa fc53 	bl	800ce10 <lwip_htons>
 801256a:	4603      	mov	r3, r0
 801256c:	b2db      	uxtb	r3, r3
 801256e:	b29b      	uxth	r3, r3
 8012570:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8012574:	b29b      	uxth	r3, r3
 8012576:	4618      	mov	r0, r3
 8012578:	f7fa fc4a 	bl	800ce10 <lwip_htons>
 801257c:	4603      	mov	r3, r0
 801257e:	b21b      	sxth	r3, r3
 8012580:	4323      	orrs	r3, r4
 8012582:	b21a      	sxth	r2, r3
 8012584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012586:	681b      	ldr	r3, [r3, #0]
 8012588:	68db      	ldr	r3, [r3, #12]
 801258a:	b292      	uxth	r2, r2
 801258c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012592:	b29a      	uxth	r2, r3
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012598:	4413      	add	r3, r2
 801259a:	b299      	uxth	r1, r3
 801259c:	4b3c      	ldr	r3, [pc, #240]	; (8012690 <tcp_receive+0xf18>)
 801259e:	681b      	ldr	r3, [r3, #0]
 80125a0:	b29a      	uxth	r2, r3
 80125a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125a4:	681b      	ldr	r3, [r3, #0]
 80125a6:	1a8a      	subs	r2, r1, r2
 80125a8:	b292      	uxth	r2, r2
 80125aa:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80125ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125ae:	681b      	ldr	r3, [r3, #0]
 80125b0:	685a      	ldr	r2, [r3, #4]
 80125b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125b4:	681b      	ldr	r3, [r3, #0]
 80125b6:	891b      	ldrh	r3, [r3, #8]
 80125b8:	4619      	mov	r1, r3
 80125ba:	4610      	mov	r0, r2
 80125bc:	f7fb fe5a 	bl	800e274 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80125c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125c2:	681b      	ldr	r3, [r3, #0]
 80125c4:	891c      	ldrh	r4, [r3, #8]
 80125c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125c8:	681b      	ldr	r3, [r3, #0]
 80125ca:	68db      	ldr	r3, [r3, #12]
 80125cc:	899b      	ldrh	r3, [r3, #12]
 80125ce:	b29b      	uxth	r3, r3
 80125d0:	4618      	mov	r0, r3
 80125d2:	f7fa fc1d 	bl	800ce10 <lwip_htons>
 80125d6:	4603      	mov	r3, r0
 80125d8:	b2db      	uxtb	r3, r3
 80125da:	f003 0303 	and.w	r3, r3, #3
 80125de:	2b00      	cmp	r3, #0
 80125e0:	d001      	beq.n	80125e6 <tcp_receive+0xe6e>
 80125e2:	2301      	movs	r3, #1
 80125e4:	e000      	b.n	80125e8 <tcp_receive+0xe70>
 80125e6:	2300      	movs	r3, #0
 80125e8:	4423      	add	r3, r4
 80125ea:	b29a      	uxth	r2, r3
 80125ec:	4b2a      	ldr	r3, [pc, #168]	; (8012698 <tcp_receive+0xf20>)
 80125ee:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80125f0:	4b29      	ldr	r3, [pc, #164]	; (8012698 <tcp_receive+0xf20>)
 80125f2:	881b      	ldrh	r3, [r3, #0]
 80125f4:	461a      	mov	r2, r3
 80125f6:	4b26      	ldr	r3, [pc, #152]	; (8012690 <tcp_receive+0xf18>)
 80125f8:	681b      	ldr	r3, [r3, #0]
 80125fa:	441a      	add	r2, r3
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012600:	6879      	ldr	r1, [r7, #4]
 8012602:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012604:	440b      	add	r3, r1
 8012606:	429a      	cmp	r2, r3
 8012608:	d019      	beq.n	801263e <tcp_receive+0xec6>
 801260a:	4b24      	ldr	r3, [pc, #144]	; (801269c <tcp_receive+0xf24>)
 801260c:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8012610:	4923      	ldr	r1, [pc, #140]	; (80126a0 <tcp_receive+0xf28>)
 8012612:	4824      	ldr	r0, [pc, #144]	; (80126a4 <tcp_receive+0xf2c>)
 8012614:	f007 f88e 	bl	8019734 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8012618:	e011      	b.n	801263e <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801261a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801261c:	681b      	ldr	r3, [r3, #0]
 801261e:	63bb      	str	r3, [r7, #56]	; 0x38
 8012620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012622:	2b00      	cmp	r3, #0
 8012624:	f47f aea4 	bne.w	8012370 <tcp_receive+0xbf8>
 8012628:	e00a      	b.n	8012640 <tcp_receive+0xec8>
                break;
 801262a:	bf00      	nop
 801262c:	e008      	b.n	8012640 <tcp_receive+0xec8>
                break;
 801262e:	bf00      	nop
 8012630:	e006      	b.n	8012640 <tcp_receive+0xec8>
                  break;
 8012632:	bf00      	nop
 8012634:	e004      	b.n	8012640 <tcp_receive+0xec8>
                  break;
 8012636:	bf00      	nop
 8012638:	e002      	b.n	8012640 <tcp_receive+0xec8>
                  break;
 801263a:	bf00      	nop
 801263c:	e000      	b.n	8012640 <tcp_receive+0xec8>
                break;
 801263e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8012640:	6878      	ldr	r0, [r7, #4]
 8012642:	f001 fa33 	bl	8013aac <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8012646:	e003      	b.n	8012650 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8012648:	6878      	ldr	r0, [r7, #4]
 801264a:	f001 fa2f 	bl	8013aac <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801264e:	e01a      	b.n	8012686 <tcp_receive+0xf0e>
 8012650:	e019      	b.n	8012686 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8012652:	4b0f      	ldr	r3, [pc, #60]	; (8012690 <tcp_receive+0xf18>)
 8012654:	681a      	ldr	r2, [r3, #0]
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801265a:	1ad3      	subs	r3, r2, r3
 801265c:	2b00      	cmp	r3, #0
 801265e:	db0a      	blt.n	8012676 <tcp_receive+0xefe>
 8012660:	4b0b      	ldr	r3, [pc, #44]	; (8012690 <tcp_receive+0xf18>)
 8012662:	681a      	ldr	r2, [r3, #0]
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012668:	6879      	ldr	r1, [r7, #4]
 801266a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801266c:	440b      	add	r3, r1
 801266e:	1ad3      	subs	r3, r2, r3
 8012670:	3301      	adds	r3, #1
 8012672:	2b00      	cmp	r3, #0
 8012674:	dd07      	ble.n	8012686 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	8b5b      	ldrh	r3, [r3, #26]
 801267a:	f043 0302 	orr.w	r3, r3, #2
 801267e:	b29a      	uxth	r2, r3
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8012684:	e7ff      	b.n	8012686 <tcp_receive+0xf0e>
 8012686:	bf00      	nop
 8012688:	3750      	adds	r7, #80	; 0x50
 801268a:	46bd      	mov	sp, r7
 801268c:	bdb0      	pop	{r4, r5, r7, pc}
 801268e:	bf00      	nop
 8012690:	2001385c 	.word	0x2001385c
 8012694:	2001383c 	.word	0x2001383c
 8012698:	20013866 	.word	0x20013866
 801269c:	0801b560 	.word	0x0801b560
 80126a0:	0801b908 	.word	0x0801b908
 80126a4:	0801b5ac 	.word	0x0801b5ac

080126a8 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80126a8:	b480      	push	{r7}
 80126aa:	b083      	sub	sp, #12
 80126ac:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80126ae:	4b15      	ldr	r3, [pc, #84]	; (8012704 <tcp_get_next_optbyte+0x5c>)
 80126b0:	881b      	ldrh	r3, [r3, #0]
 80126b2:	1c5a      	adds	r2, r3, #1
 80126b4:	b291      	uxth	r1, r2
 80126b6:	4a13      	ldr	r2, [pc, #76]	; (8012704 <tcp_get_next_optbyte+0x5c>)
 80126b8:	8011      	strh	r1, [r2, #0]
 80126ba:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80126bc:	4b12      	ldr	r3, [pc, #72]	; (8012708 <tcp_get_next_optbyte+0x60>)
 80126be:	681b      	ldr	r3, [r3, #0]
 80126c0:	2b00      	cmp	r3, #0
 80126c2:	d004      	beq.n	80126ce <tcp_get_next_optbyte+0x26>
 80126c4:	4b11      	ldr	r3, [pc, #68]	; (801270c <tcp_get_next_optbyte+0x64>)
 80126c6:	881b      	ldrh	r3, [r3, #0]
 80126c8:	88fa      	ldrh	r2, [r7, #6]
 80126ca:	429a      	cmp	r2, r3
 80126cc:	d208      	bcs.n	80126e0 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80126ce:	4b10      	ldr	r3, [pc, #64]	; (8012710 <tcp_get_next_optbyte+0x68>)
 80126d0:	681b      	ldr	r3, [r3, #0]
 80126d2:	3314      	adds	r3, #20
 80126d4:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80126d6:	88fb      	ldrh	r3, [r7, #6]
 80126d8:	683a      	ldr	r2, [r7, #0]
 80126da:	4413      	add	r3, r2
 80126dc:	781b      	ldrb	r3, [r3, #0]
 80126de:	e00b      	b.n	80126f8 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80126e0:	88fb      	ldrh	r3, [r7, #6]
 80126e2:	b2da      	uxtb	r2, r3
 80126e4:	4b09      	ldr	r3, [pc, #36]	; (801270c <tcp_get_next_optbyte+0x64>)
 80126e6:	881b      	ldrh	r3, [r3, #0]
 80126e8:	b2db      	uxtb	r3, r3
 80126ea:	1ad3      	subs	r3, r2, r3
 80126ec:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80126ee:	4b06      	ldr	r3, [pc, #24]	; (8012708 <tcp_get_next_optbyte+0x60>)
 80126f0:	681a      	ldr	r2, [r3, #0]
 80126f2:	797b      	ldrb	r3, [r7, #5]
 80126f4:	4413      	add	r3, r2
 80126f6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80126f8:	4618      	mov	r0, r3
 80126fa:	370c      	adds	r7, #12
 80126fc:	46bd      	mov	sp, r7
 80126fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012702:	4770      	bx	lr
 8012704:	20013858 	.word	0x20013858
 8012708:	20013854 	.word	0x20013854
 801270c:	20013852 	.word	0x20013852
 8012710:	2001384c 	.word	0x2001384c

08012714 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8012714:	b580      	push	{r7, lr}
 8012716:	b084      	sub	sp, #16
 8012718:	af00      	add	r7, sp, #0
 801271a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	2b00      	cmp	r3, #0
 8012720:	d106      	bne.n	8012730 <tcp_parseopt+0x1c>
 8012722:	4b32      	ldr	r3, [pc, #200]	; (80127ec <tcp_parseopt+0xd8>)
 8012724:	f240 727d 	movw	r2, #1917	; 0x77d
 8012728:	4931      	ldr	r1, [pc, #196]	; (80127f0 <tcp_parseopt+0xdc>)
 801272a:	4832      	ldr	r0, [pc, #200]	; (80127f4 <tcp_parseopt+0xe0>)
 801272c:	f007 f802 	bl	8019734 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8012730:	4b31      	ldr	r3, [pc, #196]	; (80127f8 <tcp_parseopt+0xe4>)
 8012732:	881b      	ldrh	r3, [r3, #0]
 8012734:	2b00      	cmp	r3, #0
 8012736:	d055      	beq.n	80127e4 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8012738:	4b30      	ldr	r3, [pc, #192]	; (80127fc <tcp_parseopt+0xe8>)
 801273a:	2200      	movs	r2, #0
 801273c:	801a      	strh	r2, [r3, #0]
 801273e:	e045      	b.n	80127cc <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8012740:	f7ff ffb2 	bl	80126a8 <tcp_get_next_optbyte>
 8012744:	4603      	mov	r3, r0
 8012746:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8012748:	7bfb      	ldrb	r3, [r7, #15]
 801274a:	2b02      	cmp	r3, #2
 801274c:	d006      	beq.n	801275c <tcp_parseopt+0x48>
 801274e:	2b02      	cmp	r3, #2
 8012750:	dc2b      	bgt.n	80127aa <tcp_parseopt+0x96>
 8012752:	2b00      	cmp	r3, #0
 8012754:	d041      	beq.n	80127da <tcp_parseopt+0xc6>
 8012756:	2b01      	cmp	r3, #1
 8012758:	d127      	bne.n	80127aa <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 801275a:	e037      	b.n	80127cc <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801275c:	f7ff ffa4 	bl	80126a8 <tcp_get_next_optbyte>
 8012760:	4603      	mov	r3, r0
 8012762:	2b04      	cmp	r3, #4
 8012764:	d13b      	bne.n	80127de <tcp_parseopt+0xca>
 8012766:	4b25      	ldr	r3, [pc, #148]	; (80127fc <tcp_parseopt+0xe8>)
 8012768:	881b      	ldrh	r3, [r3, #0]
 801276a:	3301      	adds	r3, #1
 801276c:	4a22      	ldr	r2, [pc, #136]	; (80127f8 <tcp_parseopt+0xe4>)
 801276e:	8812      	ldrh	r2, [r2, #0]
 8012770:	4293      	cmp	r3, r2
 8012772:	da34      	bge.n	80127de <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8012774:	f7ff ff98 	bl	80126a8 <tcp_get_next_optbyte>
 8012778:	4603      	mov	r3, r0
 801277a:	b29b      	uxth	r3, r3
 801277c:	021b      	lsls	r3, r3, #8
 801277e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8012780:	f7ff ff92 	bl	80126a8 <tcp_get_next_optbyte>
 8012784:	4603      	mov	r3, r0
 8012786:	b29a      	uxth	r2, r3
 8012788:	89bb      	ldrh	r3, [r7, #12]
 801278a:	4313      	orrs	r3, r2
 801278c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801278e:	89bb      	ldrh	r3, [r7, #12]
 8012790:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8012794:	d804      	bhi.n	80127a0 <tcp_parseopt+0x8c>
 8012796:	89bb      	ldrh	r3, [r7, #12]
 8012798:	2b00      	cmp	r3, #0
 801279a:	d001      	beq.n	80127a0 <tcp_parseopt+0x8c>
 801279c:	89ba      	ldrh	r2, [r7, #12]
 801279e:	e001      	b.n	80127a4 <tcp_parseopt+0x90>
 80127a0:	f44f 7206 	mov.w	r2, #536	; 0x218
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 80127a8:	e010      	b.n	80127cc <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80127aa:	f7ff ff7d 	bl	80126a8 <tcp_get_next_optbyte>
 80127ae:	4603      	mov	r3, r0
 80127b0:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80127b2:	7afb      	ldrb	r3, [r7, #11]
 80127b4:	2b01      	cmp	r3, #1
 80127b6:	d914      	bls.n	80127e2 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80127b8:	7afb      	ldrb	r3, [r7, #11]
 80127ba:	b29a      	uxth	r2, r3
 80127bc:	4b0f      	ldr	r3, [pc, #60]	; (80127fc <tcp_parseopt+0xe8>)
 80127be:	881b      	ldrh	r3, [r3, #0]
 80127c0:	4413      	add	r3, r2
 80127c2:	b29b      	uxth	r3, r3
 80127c4:	3b02      	subs	r3, #2
 80127c6:	b29a      	uxth	r2, r3
 80127c8:	4b0c      	ldr	r3, [pc, #48]	; (80127fc <tcp_parseopt+0xe8>)
 80127ca:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80127cc:	4b0b      	ldr	r3, [pc, #44]	; (80127fc <tcp_parseopt+0xe8>)
 80127ce:	881a      	ldrh	r2, [r3, #0]
 80127d0:	4b09      	ldr	r3, [pc, #36]	; (80127f8 <tcp_parseopt+0xe4>)
 80127d2:	881b      	ldrh	r3, [r3, #0]
 80127d4:	429a      	cmp	r2, r3
 80127d6:	d3b3      	bcc.n	8012740 <tcp_parseopt+0x2c>
 80127d8:	e004      	b.n	80127e4 <tcp_parseopt+0xd0>
          return;
 80127da:	bf00      	nop
 80127dc:	e002      	b.n	80127e4 <tcp_parseopt+0xd0>
            return;
 80127de:	bf00      	nop
 80127e0:	e000      	b.n	80127e4 <tcp_parseopt+0xd0>
            return;
 80127e2:	bf00      	nop
      }
    }
  }
}
 80127e4:	3710      	adds	r7, #16
 80127e6:	46bd      	mov	sp, r7
 80127e8:	bd80      	pop	{r7, pc}
 80127ea:	bf00      	nop
 80127ec:	0801b560 	.word	0x0801b560
 80127f0:	0801b9c4 	.word	0x0801b9c4
 80127f4:	0801b5ac 	.word	0x0801b5ac
 80127f8:	20013850 	.word	0x20013850
 80127fc:	20013858 	.word	0x20013858

08012800 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8012800:	b480      	push	{r7}
 8012802:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8012804:	4b05      	ldr	r3, [pc, #20]	; (801281c <tcp_trigger_input_pcb_close+0x1c>)
 8012806:	781b      	ldrb	r3, [r3, #0]
 8012808:	f043 0310 	orr.w	r3, r3, #16
 801280c:	b2da      	uxtb	r2, r3
 801280e:	4b03      	ldr	r3, [pc, #12]	; (801281c <tcp_trigger_input_pcb_close+0x1c>)
 8012810:	701a      	strb	r2, [r3, #0]
}
 8012812:	bf00      	nop
 8012814:	46bd      	mov	sp, r7
 8012816:	f85d 7b04 	ldr.w	r7, [sp], #4
 801281a:	4770      	bx	lr
 801281c:	20013869 	.word	0x20013869

08012820 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8012820:	b580      	push	{r7, lr}
 8012822:	b084      	sub	sp, #16
 8012824:	af00      	add	r7, sp, #0
 8012826:	60f8      	str	r0, [r7, #12]
 8012828:	60b9      	str	r1, [r7, #8]
 801282a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801282c:	68fb      	ldr	r3, [r7, #12]
 801282e:	2b00      	cmp	r3, #0
 8012830:	d00a      	beq.n	8012848 <tcp_route+0x28>
 8012832:	68fb      	ldr	r3, [r7, #12]
 8012834:	7a1b      	ldrb	r3, [r3, #8]
 8012836:	2b00      	cmp	r3, #0
 8012838:	d006      	beq.n	8012848 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801283a:	68fb      	ldr	r3, [r7, #12]
 801283c:	7a1b      	ldrb	r3, [r3, #8]
 801283e:	4618      	mov	r0, r3
 8012840:	f7fb fb10 	bl	800de64 <netif_get_by_index>
 8012844:	4603      	mov	r3, r0
 8012846:	e003      	b.n	8012850 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8012848:	6878      	ldr	r0, [r7, #4]
 801284a:	f005 f845 	bl	80178d8 <ip4_route>
 801284e:	4603      	mov	r3, r0
  }
}
 8012850:	4618      	mov	r0, r3
 8012852:	3710      	adds	r7, #16
 8012854:	46bd      	mov	sp, r7
 8012856:	bd80      	pop	{r7, pc}

08012858 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8012858:	b590      	push	{r4, r7, lr}
 801285a:	b087      	sub	sp, #28
 801285c:	af00      	add	r7, sp, #0
 801285e:	60f8      	str	r0, [r7, #12]
 8012860:	60b9      	str	r1, [r7, #8]
 8012862:	603b      	str	r3, [r7, #0]
 8012864:	4613      	mov	r3, r2
 8012866:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8012868:	68fb      	ldr	r3, [r7, #12]
 801286a:	2b00      	cmp	r3, #0
 801286c:	d105      	bne.n	801287a <tcp_create_segment+0x22>
 801286e:	4b44      	ldr	r3, [pc, #272]	; (8012980 <tcp_create_segment+0x128>)
 8012870:	22a3      	movs	r2, #163	; 0xa3
 8012872:	4944      	ldr	r1, [pc, #272]	; (8012984 <tcp_create_segment+0x12c>)
 8012874:	4844      	ldr	r0, [pc, #272]	; (8012988 <tcp_create_segment+0x130>)
 8012876:	f006 ff5d 	bl	8019734 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801287a:	68bb      	ldr	r3, [r7, #8]
 801287c:	2b00      	cmp	r3, #0
 801287e:	d105      	bne.n	801288c <tcp_create_segment+0x34>
 8012880:	4b3f      	ldr	r3, [pc, #252]	; (8012980 <tcp_create_segment+0x128>)
 8012882:	22a4      	movs	r2, #164	; 0xa4
 8012884:	4941      	ldr	r1, [pc, #260]	; (801298c <tcp_create_segment+0x134>)
 8012886:	4840      	ldr	r0, [pc, #256]	; (8012988 <tcp_create_segment+0x130>)
 8012888:	f006 ff54 	bl	8019734 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801288c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012890:	009b      	lsls	r3, r3, #2
 8012892:	b2db      	uxtb	r3, r3
 8012894:	f003 0304 	and.w	r3, r3, #4
 8012898:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801289a:	2003      	movs	r0, #3
 801289c:	f7fa ff6e 	bl	800d77c <memp_malloc>
 80128a0:	6138      	str	r0, [r7, #16]
 80128a2:	693b      	ldr	r3, [r7, #16]
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	d104      	bne.n	80128b2 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80128a8:	68b8      	ldr	r0, [r7, #8]
 80128aa:	f7fb fe69 	bl	800e580 <pbuf_free>
    return NULL;
 80128ae:	2300      	movs	r3, #0
 80128b0:	e061      	b.n	8012976 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 80128b2:	693b      	ldr	r3, [r7, #16]
 80128b4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80128b8:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80128ba:	693b      	ldr	r3, [r7, #16]
 80128bc:	2200      	movs	r2, #0
 80128be:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80128c0:	693b      	ldr	r3, [r7, #16]
 80128c2:	68ba      	ldr	r2, [r7, #8]
 80128c4:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80128c6:	68bb      	ldr	r3, [r7, #8]
 80128c8:	891a      	ldrh	r2, [r3, #8]
 80128ca:	7dfb      	ldrb	r3, [r7, #23]
 80128cc:	b29b      	uxth	r3, r3
 80128ce:	429a      	cmp	r2, r3
 80128d0:	d205      	bcs.n	80128de <tcp_create_segment+0x86>
 80128d2:	4b2b      	ldr	r3, [pc, #172]	; (8012980 <tcp_create_segment+0x128>)
 80128d4:	22b0      	movs	r2, #176	; 0xb0
 80128d6:	492e      	ldr	r1, [pc, #184]	; (8012990 <tcp_create_segment+0x138>)
 80128d8:	482b      	ldr	r0, [pc, #172]	; (8012988 <tcp_create_segment+0x130>)
 80128da:	f006 ff2b 	bl	8019734 <iprintf>
  seg->len = p->tot_len - optlen;
 80128de:	68bb      	ldr	r3, [r7, #8]
 80128e0:	891a      	ldrh	r2, [r3, #8]
 80128e2:	7dfb      	ldrb	r3, [r7, #23]
 80128e4:	b29b      	uxth	r3, r3
 80128e6:	1ad3      	subs	r3, r2, r3
 80128e8:	b29a      	uxth	r2, r3
 80128ea:	693b      	ldr	r3, [r7, #16]
 80128ec:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80128ee:	2114      	movs	r1, #20
 80128f0:	68b8      	ldr	r0, [r7, #8]
 80128f2:	f7fb fdaf 	bl	800e454 <pbuf_add_header>
 80128f6:	4603      	mov	r3, r0
 80128f8:	2b00      	cmp	r3, #0
 80128fa:	d004      	beq.n	8012906 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80128fc:	6938      	ldr	r0, [r7, #16]
 80128fe:	f7fd f8ce 	bl	800fa9e <tcp_seg_free>
    return NULL;
 8012902:	2300      	movs	r3, #0
 8012904:	e037      	b.n	8012976 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8012906:	693b      	ldr	r3, [r7, #16]
 8012908:	685b      	ldr	r3, [r3, #4]
 801290a:	685a      	ldr	r2, [r3, #4]
 801290c:	693b      	ldr	r3, [r7, #16]
 801290e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8012910:	68fb      	ldr	r3, [r7, #12]
 8012912:	8ada      	ldrh	r2, [r3, #22]
 8012914:	693b      	ldr	r3, [r7, #16]
 8012916:	68dc      	ldr	r4, [r3, #12]
 8012918:	4610      	mov	r0, r2
 801291a:	f7fa fa79 	bl	800ce10 <lwip_htons>
 801291e:	4603      	mov	r3, r0
 8012920:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8012922:	68fb      	ldr	r3, [r7, #12]
 8012924:	8b1a      	ldrh	r2, [r3, #24]
 8012926:	693b      	ldr	r3, [r7, #16]
 8012928:	68dc      	ldr	r4, [r3, #12]
 801292a:	4610      	mov	r0, r2
 801292c:	f7fa fa70 	bl	800ce10 <lwip_htons>
 8012930:	4603      	mov	r3, r0
 8012932:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8012934:	693b      	ldr	r3, [r7, #16]
 8012936:	68dc      	ldr	r4, [r3, #12]
 8012938:	6838      	ldr	r0, [r7, #0]
 801293a:	f7fa fa7e 	bl	800ce3a <lwip_htonl>
 801293e:	4603      	mov	r3, r0
 8012940:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8012942:	7dfb      	ldrb	r3, [r7, #23]
 8012944:	089b      	lsrs	r3, r3, #2
 8012946:	b2db      	uxtb	r3, r3
 8012948:	b29b      	uxth	r3, r3
 801294a:	3305      	adds	r3, #5
 801294c:	b29b      	uxth	r3, r3
 801294e:	031b      	lsls	r3, r3, #12
 8012950:	b29a      	uxth	r2, r3
 8012952:	79fb      	ldrb	r3, [r7, #7]
 8012954:	b29b      	uxth	r3, r3
 8012956:	4313      	orrs	r3, r2
 8012958:	b29a      	uxth	r2, r3
 801295a:	693b      	ldr	r3, [r7, #16]
 801295c:	68dc      	ldr	r4, [r3, #12]
 801295e:	4610      	mov	r0, r2
 8012960:	f7fa fa56 	bl	800ce10 <lwip_htons>
 8012964:	4603      	mov	r3, r0
 8012966:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8012968:	693b      	ldr	r3, [r7, #16]
 801296a:	68db      	ldr	r3, [r3, #12]
 801296c:	2200      	movs	r2, #0
 801296e:	749a      	strb	r2, [r3, #18]
 8012970:	2200      	movs	r2, #0
 8012972:	74da      	strb	r2, [r3, #19]
  return seg;
 8012974:	693b      	ldr	r3, [r7, #16]
}
 8012976:	4618      	mov	r0, r3
 8012978:	371c      	adds	r7, #28
 801297a:	46bd      	mov	sp, r7
 801297c:	bd90      	pop	{r4, r7, pc}
 801297e:	bf00      	nop
 8012980:	0801b9e0 	.word	0x0801b9e0
 8012984:	0801ba14 	.word	0x0801ba14
 8012988:	0801ba34 	.word	0x0801ba34
 801298c:	0801ba5c 	.word	0x0801ba5c
 8012990:	0801ba80 	.word	0x0801ba80

08012994 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8012994:	b590      	push	{r4, r7, lr}
 8012996:	b08b      	sub	sp, #44	; 0x2c
 8012998:	af02      	add	r7, sp, #8
 801299a:	6078      	str	r0, [r7, #4]
 801299c:	460b      	mov	r3, r1
 801299e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80129a0:	2300      	movs	r3, #0
 80129a2:	61fb      	str	r3, [r7, #28]
 80129a4:	2300      	movs	r3, #0
 80129a6:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80129a8:	2300      	movs	r3, #0
 80129aa:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	2b00      	cmp	r3, #0
 80129b0:	d106      	bne.n	80129c0 <tcp_split_unsent_seg+0x2c>
 80129b2:	4b95      	ldr	r3, [pc, #596]	; (8012c08 <tcp_split_unsent_seg+0x274>)
 80129b4:	f240 324b 	movw	r2, #843	; 0x34b
 80129b8:	4994      	ldr	r1, [pc, #592]	; (8012c0c <tcp_split_unsent_seg+0x278>)
 80129ba:	4895      	ldr	r0, [pc, #596]	; (8012c10 <tcp_split_unsent_seg+0x27c>)
 80129bc:	f006 feba 	bl	8019734 <iprintf>

  useg = pcb->unsent;
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80129c4:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80129c6:	697b      	ldr	r3, [r7, #20]
 80129c8:	2b00      	cmp	r3, #0
 80129ca:	d102      	bne.n	80129d2 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80129cc:	f04f 33ff 	mov.w	r3, #4294967295
 80129d0:	e116      	b.n	8012c00 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80129d2:	887b      	ldrh	r3, [r7, #2]
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	d109      	bne.n	80129ec <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80129d8:	4b8b      	ldr	r3, [pc, #556]	; (8012c08 <tcp_split_unsent_seg+0x274>)
 80129da:	f240 3253 	movw	r2, #851	; 0x353
 80129de:	498d      	ldr	r1, [pc, #564]	; (8012c14 <tcp_split_unsent_seg+0x280>)
 80129e0:	488b      	ldr	r0, [pc, #556]	; (8012c10 <tcp_split_unsent_seg+0x27c>)
 80129e2:	f006 fea7 	bl	8019734 <iprintf>
    return ERR_VAL;
 80129e6:	f06f 0305 	mvn.w	r3, #5
 80129ea:	e109      	b.n	8012c00 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80129ec:	697b      	ldr	r3, [r7, #20]
 80129ee:	891b      	ldrh	r3, [r3, #8]
 80129f0:	887a      	ldrh	r2, [r7, #2]
 80129f2:	429a      	cmp	r2, r3
 80129f4:	d301      	bcc.n	80129fa <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80129f6:	2300      	movs	r3, #0
 80129f8:	e102      	b.n	8012c00 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80129fe:	887a      	ldrh	r2, [r7, #2]
 8012a00:	429a      	cmp	r2, r3
 8012a02:	d906      	bls.n	8012a12 <tcp_split_unsent_seg+0x7e>
 8012a04:	4b80      	ldr	r3, [pc, #512]	; (8012c08 <tcp_split_unsent_seg+0x274>)
 8012a06:	f240 325b 	movw	r2, #859	; 0x35b
 8012a0a:	4983      	ldr	r1, [pc, #524]	; (8012c18 <tcp_split_unsent_seg+0x284>)
 8012a0c:	4880      	ldr	r0, [pc, #512]	; (8012c10 <tcp_split_unsent_seg+0x27c>)
 8012a0e:	f006 fe91 	bl	8019734 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8012a12:	697b      	ldr	r3, [r7, #20]
 8012a14:	891b      	ldrh	r3, [r3, #8]
 8012a16:	2b00      	cmp	r3, #0
 8012a18:	d106      	bne.n	8012a28 <tcp_split_unsent_seg+0x94>
 8012a1a:	4b7b      	ldr	r3, [pc, #492]	; (8012c08 <tcp_split_unsent_seg+0x274>)
 8012a1c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8012a20:	497e      	ldr	r1, [pc, #504]	; (8012c1c <tcp_split_unsent_seg+0x288>)
 8012a22:	487b      	ldr	r0, [pc, #492]	; (8012c10 <tcp_split_unsent_seg+0x27c>)
 8012a24:	f006 fe86 	bl	8019734 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8012a28:	697b      	ldr	r3, [r7, #20]
 8012a2a:	7a9b      	ldrb	r3, [r3, #10]
 8012a2c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8012a2e:	7bfb      	ldrb	r3, [r7, #15]
 8012a30:	009b      	lsls	r3, r3, #2
 8012a32:	b2db      	uxtb	r3, r3
 8012a34:	f003 0304 	and.w	r3, r3, #4
 8012a38:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8012a3a:	697b      	ldr	r3, [r7, #20]
 8012a3c:	891a      	ldrh	r2, [r3, #8]
 8012a3e:	887b      	ldrh	r3, [r7, #2]
 8012a40:	1ad3      	subs	r3, r2, r3
 8012a42:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8012a44:	7bbb      	ldrb	r3, [r7, #14]
 8012a46:	b29a      	uxth	r2, r3
 8012a48:	89bb      	ldrh	r3, [r7, #12]
 8012a4a:	4413      	add	r3, r2
 8012a4c:	b29b      	uxth	r3, r3
 8012a4e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012a52:	4619      	mov	r1, r3
 8012a54:	2036      	movs	r0, #54	; 0x36
 8012a56:	f7fb faaf 	bl	800dfb8 <pbuf_alloc>
 8012a5a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012a5c:	693b      	ldr	r3, [r7, #16]
 8012a5e:	2b00      	cmp	r3, #0
 8012a60:	f000 80b7 	beq.w	8012bd2 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8012a64:	697b      	ldr	r3, [r7, #20]
 8012a66:	685b      	ldr	r3, [r3, #4]
 8012a68:	891a      	ldrh	r2, [r3, #8]
 8012a6a:	697b      	ldr	r3, [r7, #20]
 8012a6c:	891b      	ldrh	r3, [r3, #8]
 8012a6e:	1ad3      	subs	r3, r2, r3
 8012a70:	b29a      	uxth	r2, r3
 8012a72:	887b      	ldrh	r3, [r7, #2]
 8012a74:	4413      	add	r3, r2
 8012a76:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8012a78:	697b      	ldr	r3, [r7, #20]
 8012a7a:	6858      	ldr	r0, [r3, #4]
 8012a7c:	693b      	ldr	r3, [r7, #16]
 8012a7e:	685a      	ldr	r2, [r3, #4]
 8012a80:	7bbb      	ldrb	r3, [r7, #14]
 8012a82:	18d1      	adds	r1, r2, r3
 8012a84:	897b      	ldrh	r3, [r7, #10]
 8012a86:	89ba      	ldrh	r2, [r7, #12]
 8012a88:	f7fb ff80 	bl	800e98c <pbuf_copy_partial>
 8012a8c:	4603      	mov	r3, r0
 8012a8e:	461a      	mov	r2, r3
 8012a90:	89bb      	ldrh	r3, [r7, #12]
 8012a92:	4293      	cmp	r3, r2
 8012a94:	f040 809f 	bne.w	8012bd6 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8012a98:	697b      	ldr	r3, [r7, #20]
 8012a9a:	68db      	ldr	r3, [r3, #12]
 8012a9c:	899b      	ldrh	r3, [r3, #12]
 8012a9e:	b29b      	uxth	r3, r3
 8012aa0:	4618      	mov	r0, r3
 8012aa2:	f7fa f9b5 	bl	800ce10 <lwip_htons>
 8012aa6:	4603      	mov	r3, r0
 8012aa8:	b2db      	uxtb	r3, r3
 8012aaa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012aae:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8012ab0:	2300      	movs	r3, #0
 8012ab2:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8012ab4:	7efb      	ldrb	r3, [r7, #27]
 8012ab6:	f003 0308 	and.w	r3, r3, #8
 8012aba:	2b00      	cmp	r3, #0
 8012abc:	d007      	beq.n	8012ace <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8012abe:	7efb      	ldrb	r3, [r7, #27]
 8012ac0:	f023 0308 	bic.w	r3, r3, #8
 8012ac4:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8012ac6:	7ebb      	ldrb	r3, [r7, #26]
 8012ac8:	f043 0308 	orr.w	r3, r3, #8
 8012acc:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8012ace:	7efb      	ldrb	r3, [r7, #27]
 8012ad0:	f003 0301 	and.w	r3, r3, #1
 8012ad4:	2b00      	cmp	r3, #0
 8012ad6:	d007      	beq.n	8012ae8 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8012ad8:	7efb      	ldrb	r3, [r7, #27]
 8012ada:	f023 0301 	bic.w	r3, r3, #1
 8012ade:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8012ae0:	7ebb      	ldrb	r3, [r7, #26]
 8012ae2:	f043 0301 	orr.w	r3, r3, #1
 8012ae6:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8012ae8:	697b      	ldr	r3, [r7, #20]
 8012aea:	68db      	ldr	r3, [r3, #12]
 8012aec:	685b      	ldr	r3, [r3, #4]
 8012aee:	4618      	mov	r0, r3
 8012af0:	f7fa f9a3 	bl	800ce3a <lwip_htonl>
 8012af4:	4602      	mov	r2, r0
 8012af6:	887b      	ldrh	r3, [r7, #2]
 8012af8:	18d1      	adds	r1, r2, r3
 8012afa:	7eba      	ldrb	r2, [r7, #26]
 8012afc:	7bfb      	ldrb	r3, [r7, #15]
 8012afe:	9300      	str	r3, [sp, #0]
 8012b00:	460b      	mov	r3, r1
 8012b02:	6939      	ldr	r1, [r7, #16]
 8012b04:	6878      	ldr	r0, [r7, #4]
 8012b06:	f7ff fea7 	bl	8012858 <tcp_create_segment>
 8012b0a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8012b0c:	69fb      	ldr	r3, [r7, #28]
 8012b0e:	2b00      	cmp	r3, #0
 8012b10:	d063      	beq.n	8012bda <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8012b12:	697b      	ldr	r3, [r7, #20]
 8012b14:	685b      	ldr	r3, [r3, #4]
 8012b16:	4618      	mov	r0, r3
 8012b18:	f7fb fdc0 	bl	800e69c <pbuf_clen>
 8012b1c:	4603      	mov	r3, r0
 8012b1e:	461a      	mov	r2, r3
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012b26:	1a9b      	subs	r3, r3, r2
 8012b28:	b29a      	uxth	r2, r3
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8012b30:	697b      	ldr	r3, [r7, #20]
 8012b32:	6858      	ldr	r0, [r3, #4]
 8012b34:	697b      	ldr	r3, [r7, #20]
 8012b36:	685b      	ldr	r3, [r3, #4]
 8012b38:	891a      	ldrh	r2, [r3, #8]
 8012b3a:	89bb      	ldrh	r3, [r7, #12]
 8012b3c:	1ad3      	subs	r3, r2, r3
 8012b3e:	b29b      	uxth	r3, r3
 8012b40:	4619      	mov	r1, r3
 8012b42:	f7fb fb97 	bl	800e274 <pbuf_realloc>
  useg->len -= remainder;
 8012b46:	697b      	ldr	r3, [r7, #20]
 8012b48:	891a      	ldrh	r2, [r3, #8]
 8012b4a:	89bb      	ldrh	r3, [r7, #12]
 8012b4c:	1ad3      	subs	r3, r2, r3
 8012b4e:	b29a      	uxth	r2, r3
 8012b50:	697b      	ldr	r3, [r7, #20]
 8012b52:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8012b54:	697b      	ldr	r3, [r7, #20]
 8012b56:	68db      	ldr	r3, [r3, #12]
 8012b58:	899b      	ldrh	r3, [r3, #12]
 8012b5a:	b29c      	uxth	r4, r3
 8012b5c:	7efb      	ldrb	r3, [r7, #27]
 8012b5e:	b29b      	uxth	r3, r3
 8012b60:	4618      	mov	r0, r3
 8012b62:	f7fa f955 	bl	800ce10 <lwip_htons>
 8012b66:	4603      	mov	r3, r0
 8012b68:	461a      	mov	r2, r3
 8012b6a:	697b      	ldr	r3, [r7, #20]
 8012b6c:	68db      	ldr	r3, [r3, #12]
 8012b6e:	4322      	orrs	r2, r4
 8012b70:	b292      	uxth	r2, r2
 8012b72:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8012b74:	697b      	ldr	r3, [r7, #20]
 8012b76:	685b      	ldr	r3, [r3, #4]
 8012b78:	4618      	mov	r0, r3
 8012b7a:	f7fb fd8f 	bl	800e69c <pbuf_clen>
 8012b7e:	4603      	mov	r3, r0
 8012b80:	461a      	mov	r2, r3
 8012b82:	687b      	ldr	r3, [r7, #4]
 8012b84:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012b88:	4413      	add	r3, r2
 8012b8a:	b29a      	uxth	r2, r3
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8012b92:	69fb      	ldr	r3, [r7, #28]
 8012b94:	685b      	ldr	r3, [r3, #4]
 8012b96:	4618      	mov	r0, r3
 8012b98:	f7fb fd80 	bl	800e69c <pbuf_clen>
 8012b9c:	4603      	mov	r3, r0
 8012b9e:	461a      	mov	r2, r3
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012ba6:	4413      	add	r3, r2
 8012ba8:	b29a      	uxth	r2, r3
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8012bb0:	697b      	ldr	r3, [r7, #20]
 8012bb2:	681a      	ldr	r2, [r3, #0]
 8012bb4:	69fb      	ldr	r3, [r7, #28]
 8012bb6:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8012bb8:	697b      	ldr	r3, [r7, #20]
 8012bba:	69fa      	ldr	r2, [r7, #28]
 8012bbc:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8012bbe:	69fb      	ldr	r3, [r7, #28]
 8012bc0:	681b      	ldr	r3, [r3, #0]
 8012bc2:	2b00      	cmp	r3, #0
 8012bc4:	d103      	bne.n	8012bce <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	2200      	movs	r2, #0
 8012bca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8012bce:	2300      	movs	r3, #0
 8012bd0:	e016      	b.n	8012c00 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8012bd2:	bf00      	nop
 8012bd4:	e002      	b.n	8012bdc <tcp_split_unsent_seg+0x248>
    goto memerr;
 8012bd6:	bf00      	nop
 8012bd8:	e000      	b.n	8012bdc <tcp_split_unsent_seg+0x248>
    goto memerr;
 8012bda:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8012bdc:	69fb      	ldr	r3, [r7, #28]
 8012bde:	2b00      	cmp	r3, #0
 8012be0:	d006      	beq.n	8012bf0 <tcp_split_unsent_seg+0x25c>
 8012be2:	4b09      	ldr	r3, [pc, #36]	; (8012c08 <tcp_split_unsent_seg+0x274>)
 8012be4:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8012be8:	490d      	ldr	r1, [pc, #52]	; (8012c20 <tcp_split_unsent_seg+0x28c>)
 8012bea:	4809      	ldr	r0, [pc, #36]	; (8012c10 <tcp_split_unsent_seg+0x27c>)
 8012bec:	f006 fda2 	bl	8019734 <iprintf>
  if (p != NULL) {
 8012bf0:	693b      	ldr	r3, [r7, #16]
 8012bf2:	2b00      	cmp	r3, #0
 8012bf4:	d002      	beq.n	8012bfc <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8012bf6:	6938      	ldr	r0, [r7, #16]
 8012bf8:	f7fb fcc2 	bl	800e580 <pbuf_free>
  }

  return ERR_MEM;
 8012bfc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012c00:	4618      	mov	r0, r3
 8012c02:	3724      	adds	r7, #36	; 0x24
 8012c04:	46bd      	mov	sp, r7
 8012c06:	bd90      	pop	{r4, r7, pc}
 8012c08:	0801b9e0 	.word	0x0801b9e0
 8012c0c:	0801bd74 	.word	0x0801bd74
 8012c10:	0801ba34 	.word	0x0801ba34
 8012c14:	0801bd98 	.word	0x0801bd98
 8012c18:	0801bdbc 	.word	0x0801bdbc
 8012c1c:	0801bdcc 	.word	0x0801bdcc
 8012c20:	0801bddc 	.word	0x0801bddc

08012c24 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8012c24:	b590      	push	{r4, r7, lr}
 8012c26:	b085      	sub	sp, #20
 8012c28:	af00      	add	r7, sp, #0
 8012c2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	2b00      	cmp	r3, #0
 8012c30:	d106      	bne.n	8012c40 <tcp_send_fin+0x1c>
 8012c32:	4b21      	ldr	r3, [pc, #132]	; (8012cb8 <tcp_send_fin+0x94>)
 8012c34:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8012c38:	4920      	ldr	r1, [pc, #128]	; (8012cbc <tcp_send_fin+0x98>)
 8012c3a:	4821      	ldr	r0, [pc, #132]	; (8012cc0 <tcp_send_fin+0x9c>)
 8012c3c:	f006 fd7a 	bl	8019734 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012c44:	2b00      	cmp	r3, #0
 8012c46:	d02e      	beq.n	8012ca6 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012c4c:	60fb      	str	r3, [r7, #12]
 8012c4e:	e002      	b.n	8012c56 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8012c50:	68fb      	ldr	r3, [r7, #12]
 8012c52:	681b      	ldr	r3, [r3, #0]
 8012c54:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012c56:	68fb      	ldr	r3, [r7, #12]
 8012c58:	681b      	ldr	r3, [r3, #0]
 8012c5a:	2b00      	cmp	r3, #0
 8012c5c:	d1f8      	bne.n	8012c50 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8012c5e:	68fb      	ldr	r3, [r7, #12]
 8012c60:	68db      	ldr	r3, [r3, #12]
 8012c62:	899b      	ldrh	r3, [r3, #12]
 8012c64:	b29b      	uxth	r3, r3
 8012c66:	4618      	mov	r0, r3
 8012c68:	f7fa f8d2 	bl	800ce10 <lwip_htons>
 8012c6c:	4603      	mov	r3, r0
 8012c6e:	b2db      	uxtb	r3, r3
 8012c70:	f003 0307 	and.w	r3, r3, #7
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	d116      	bne.n	8012ca6 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8012c78:	68fb      	ldr	r3, [r7, #12]
 8012c7a:	68db      	ldr	r3, [r3, #12]
 8012c7c:	899b      	ldrh	r3, [r3, #12]
 8012c7e:	b29c      	uxth	r4, r3
 8012c80:	2001      	movs	r0, #1
 8012c82:	f7fa f8c5 	bl	800ce10 <lwip_htons>
 8012c86:	4603      	mov	r3, r0
 8012c88:	461a      	mov	r2, r3
 8012c8a:	68fb      	ldr	r3, [r7, #12]
 8012c8c:	68db      	ldr	r3, [r3, #12]
 8012c8e:	4322      	orrs	r2, r4
 8012c90:	b292      	uxth	r2, r2
 8012c92:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	8b5b      	ldrh	r3, [r3, #26]
 8012c98:	f043 0320 	orr.w	r3, r3, #32
 8012c9c:	b29a      	uxth	r2, r3
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8012ca2:	2300      	movs	r3, #0
 8012ca4:	e004      	b.n	8012cb0 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8012ca6:	2101      	movs	r1, #1
 8012ca8:	6878      	ldr	r0, [r7, #4]
 8012caa:	f000 f80b 	bl	8012cc4 <tcp_enqueue_flags>
 8012cae:	4603      	mov	r3, r0
}
 8012cb0:	4618      	mov	r0, r3
 8012cb2:	3714      	adds	r7, #20
 8012cb4:	46bd      	mov	sp, r7
 8012cb6:	bd90      	pop	{r4, r7, pc}
 8012cb8:	0801b9e0 	.word	0x0801b9e0
 8012cbc:	0801bde8 	.word	0x0801bde8
 8012cc0:	0801ba34 	.word	0x0801ba34

08012cc4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8012cc4:	b580      	push	{r7, lr}
 8012cc6:	b08a      	sub	sp, #40	; 0x28
 8012cc8:	af02      	add	r7, sp, #8
 8012cca:	6078      	str	r0, [r7, #4]
 8012ccc:	460b      	mov	r3, r1
 8012cce:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8012cd0:	2300      	movs	r3, #0
 8012cd2:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8012cd4:	2300      	movs	r3, #0
 8012cd6:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8012cd8:	78fb      	ldrb	r3, [r7, #3]
 8012cda:	f003 0303 	and.w	r3, r3, #3
 8012cde:	2b00      	cmp	r3, #0
 8012ce0:	d106      	bne.n	8012cf0 <tcp_enqueue_flags+0x2c>
 8012ce2:	4b67      	ldr	r3, [pc, #412]	; (8012e80 <tcp_enqueue_flags+0x1bc>)
 8012ce4:	f240 4211 	movw	r2, #1041	; 0x411
 8012ce8:	4966      	ldr	r1, [pc, #408]	; (8012e84 <tcp_enqueue_flags+0x1c0>)
 8012cea:	4867      	ldr	r0, [pc, #412]	; (8012e88 <tcp_enqueue_flags+0x1c4>)
 8012cec:	f006 fd22 	bl	8019734 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	2b00      	cmp	r3, #0
 8012cf4:	d106      	bne.n	8012d04 <tcp_enqueue_flags+0x40>
 8012cf6:	4b62      	ldr	r3, [pc, #392]	; (8012e80 <tcp_enqueue_flags+0x1bc>)
 8012cf8:	f240 4213 	movw	r2, #1043	; 0x413
 8012cfc:	4963      	ldr	r1, [pc, #396]	; (8012e8c <tcp_enqueue_flags+0x1c8>)
 8012cfe:	4862      	ldr	r0, [pc, #392]	; (8012e88 <tcp_enqueue_flags+0x1c4>)
 8012d00:	f006 fd18 	bl	8019734 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8012d04:	78fb      	ldrb	r3, [r7, #3]
 8012d06:	f003 0302 	and.w	r3, r3, #2
 8012d0a:	2b00      	cmp	r3, #0
 8012d0c:	d001      	beq.n	8012d12 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8012d0e:	2301      	movs	r3, #1
 8012d10:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012d12:	7ffb      	ldrb	r3, [r7, #31]
 8012d14:	009b      	lsls	r3, r3, #2
 8012d16:	b2db      	uxtb	r3, r3
 8012d18:	f003 0304 	and.w	r3, r3, #4
 8012d1c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8012d1e:	7dfb      	ldrb	r3, [r7, #23]
 8012d20:	b29b      	uxth	r3, r3
 8012d22:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012d26:	4619      	mov	r1, r3
 8012d28:	2036      	movs	r0, #54	; 0x36
 8012d2a:	f7fb f945 	bl	800dfb8 <pbuf_alloc>
 8012d2e:	6138      	str	r0, [r7, #16]
 8012d30:	693b      	ldr	r3, [r7, #16]
 8012d32:	2b00      	cmp	r3, #0
 8012d34:	d109      	bne.n	8012d4a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	8b5b      	ldrh	r3, [r3, #26]
 8012d3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012d3e:	b29a      	uxth	r2, r3
 8012d40:	687b      	ldr	r3, [r7, #4]
 8012d42:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8012d44:	f04f 33ff 	mov.w	r3, #4294967295
 8012d48:	e095      	b.n	8012e76 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8012d4a:	693b      	ldr	r3, [r7, #16]
 8012d4c:	895a      	ldrh	r2, [r3, #10]
 8012d4e:	7dfb      	ldrb	r3, [r7, #23]
 8012d50:	b29b      	uxth	r3, r3
 8012d52:	429a      	cmp	r2, r3
 8012d54:	d206      	bcs.n	8012d64 <tcp_enqueue_flags+0xa0>
 8012d56:	4b4a      	ldr	r3, [pc, #296]	; (8012e80 <tcp_enqueue_flags+0x1bc>)
 8012d58:	f240 4239 	movw	r2, #1081	; 0x439
 8012d5c:	494c      	ldr	r1, [pc, #304]	; (8012e90 <tcp_enqueue_flags+0x1cc>)
 8012d5e:	484a      	ldr	r0, [pc, #296]	; (8012e88 <tcp_enqueue_flags+0x1c4>)
 8012d60:	f006 fce8 	bl	8019734 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8012d68:	78fa      	ldrb	r2, [r7, #3]
 8012d6a:	7ffb      	ldrb	r3, [r7, #31]
 8012d6c:	9300      	str	r3, [sp, #0]
 8012d6e:	460b      	mov	r3, r1
 8012d70:	6939      	ldr	r1, [r7, #16]
 8012d72:	6878      	ldr	r0, [r7, #4]
 8012d74:	f7ff fd70 	bl	8012858 <tcp_create_segment>
 8012d78:	60f8      	str	r0, [r7, #12]
 8012d7a:	68fb      	ldr	r3, [r7, #12]
 8012d7c:	2b00      	cmp	r3, #0
 8012d7e:	d109      	bne.n	8012d94 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	8b5b      	ldrh	r3, [r3, #26]
 8012d84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012d88:	b29a      	uxth	r2, r3
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8012d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8012d92:	e070      	b.n	8012e76 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8012d94:	68fb      	ldr	r3, [r7, #12]
 8012d96:	68db      	ldr	r3, [r3, #12]
 8012d98:	f003 0303 	and.w	r3, r3, #3
 8012d9c:	2b00      	cmp	r3, #0
 8012d9e:	d006      	beq.n	8012dae <tcp_enqueue_flags+0xea>
 8012da0:	4b37      	ldr	r3, [pc, #220]	; (8012e80 <tcp_enqueue_flags+0x1bc>)
 8012da2:	f240 4242 	movw	r2, #1090	; 0x442
 8012da6:	493b      	ldr	r1, [pc, #236]	; (8012e94 <tcp_enqueue_flags+0x1d0>)
 8012da8:	4837      	ldr	r0, [pc, #220]	; (8012e88 <tcp_enqueue_flags+0x1c4>)
 8012daa:	f006 fcc3 	bl	8019734 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8012dae:	68fb      	ldr	r3, [r7, #12]
 8012db0:	891b      	ldrh	r3, [r3, #8]
 8012db2:	2b00      	cmp	r3, #0
 8012db4:	d006      	beq.n	8012dc4 <tcp_enqueue_flags+0x100>
 8012db6:	4b32      	ldr	r3, [pc, #200]	; (8012e80 <tcp_enqueue_flags+0x1bc>)
 8012db8:	f240 4243 	movw	r2, #1091	; 0x443
 8012dbc:	4936      	ldr	r1, [pc, #216]	; (8012e98 <tcp_enqueue_flags+0x1d4>)
 8012dbe:	4832      	ldr	r0, [pc, #200]	; (8012e88 <tcp_enqueue_flags+0x1c4>)
 8012dc0:	f006 fcb8 	bl	8019734 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	d103      	bne.n	8012dd4 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8012dcc:	687b      	ldr	r3, [r7, #4]
 8012dce:	68fa      	ldr	r2, [r7, #12]
 8012dd0:	66da      	str	r2, [r3, #108]	; 0x6c
 8012dd2:	e00d      	b.n	8012df0 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012dd8:	61bb      	str	r3, [r7, #24]
 8012dda:	e002      	b.n	8012de2 <tcp_enqueue_flags+0x11e>
 8012ddc:	69bb      	ldr	r3, [r7, #24]
 8012dde:	681b      	ldr	r3, [r3, #0]
 8012de0:	61bb      	str	r3, [r7, #24]
 8012de2:	69bb      	ldr	r3, [r7, #24]
 8012de4:	681b      	ldr	r3, [r3, #0]
 8012de6:	2b00      	cmp	r3, #0
 8012de8:	d1f8      	bne.n	8012ddc <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8012dea:	69bb      	ldr	r3, [r7, #24]
 8012dec:	68fa      	ldr	r2, [r7, #12]
 8012dee:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	2200      	movs	r2, #0
 8012df4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8012df8:	78fb      	ldrb	r3, [r7, #3]
 8012dfa:	f003 0302 	and.w	r3, r3, #2
 8012dfe:	2b00      	cmp	r3, #0
 8012e00:	d104      	bne.n	8012e0c <tcp_enqueue_flags+0x148>
 8012e02:	78fb      	ldrb	r3, [r7, #3]
 8012e04:	f003 0301 	and.w	r3, r3, #1
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	d004      	beq.n	8012e16 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012e10:	1c5a      	adds	r2, r3, #1
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8012e16:	78fb      	ldrb	r3, [r7, #3]
 8012e18:	f003 0301 	and.w	r3, r3, #1
 8012e1c:	2b00      	cmp	r3, #0
 8012e1e:	d006      	beq.n	8012e2e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	8b5b      	ldrh	r3, [r3, #26]
 8012e24:	f043 0320 	orr.w	r3, r3, #32
 8012e28:	b29a      	uxth	r2, r3
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8012e2e:	68fb      	ldr	r3, [r7, #12]
 8012e30:	685b      	ldr	r3, [r3, #4]
 8012e32:	4618      	mov	r0, r3
 8012e34:	f7fb fc32 	bl	800e69c <pbuf_clen>
 8012e38:	4603      	mov	r3, r0
 8012e3a:	461a      	mov	r2, r3
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012e42:	4413      	add	r3, r2
 8012e44:	b29a      	uxth	r2, r3
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012e52:	2b00      	cmp	r3, #0
 8012e54:	d00e      	beq.n	8012e74 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	d10a      	bne.n	8012e74 <tcp_enqueue_flags+0x1b0>
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012e62:	2b00      	cmp	r3, #0
 8012e64:	d106      	bne.n	8012e74 <tcp_enqueue_flags+0x1b0>
 8012e66:	4b06      	ldr	r3, [pc, #24]	; (8012e80 <tcp_enqueue_flags+0x1bc>)
 8012e68:	f240 4265 	movw	r2, #1125	; 0x465
 8012e6c:	490b      	ldr	r1, [pc, #44]	; (8012e9c <tcp_enqueue_flags+0x1d8>)
 8012e6e:	4806      	ldr	r0, [pc, #24]	; (8012e88 <tcp_enqueue_flags+0x1c4>)
 8012e70:	f006 fc60 	bl	8019734 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8012e74:	2300      	movs	r3, #0
}
 8012e76:	4618      	mov	r0, r3
 8012e78:	3720      	adds	r7, #32
 8012e7a:	46bd      	mov	sp, r7
 8012e7c:	bd80      	pop	{r7, pc}
 8012e7e:	bf00      	nop
 8012e80:	0801b9e0 	.word	0x0801b9e0
 8012e84:	0801be04 	.word	0x0801be04
 8012e88:	0801ba34 	.word	0x0801ba34
 8012e8c:	0801be5c 	.word	0x0801be5c
 8012e90:	0801be7c 	.word	0x0801be7c
 8012e94:	0801beb8 	.word	0x0801beb8
 8012e98:	0801bed0 	.word	0x0801bed0
 8012e9c:	0801befc 	.word	0x0801befc

08012ea0 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8012ea0:	b5b0      	push	{r4, r5, r7, lr}
 8012ea2:	b08a      	sub	sp, #40	; 0x28
 8012ea4:	af00      	add	r7, sp, #0
 8012ea6:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	2b00      	cmp	r3, #0
 8012eac:	d106      	bne.n	8012ebc <tcp_output+0x1c>
 8012eae:	4b8a      	ldr	r3, [pc, #552]	; (80130d8 <tcp_output+0x238>)
 8012eb0:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8012eb4:	4989      	ldr	r1, [pc, #548]	; (80130dc <tcp_output+0x23c>)
 8012eb6:	488a      	ldr	r0, [pc, #552]	; (80130e0 <tcp_output+0x240>)
 8012eb8:	f006 fc3c 	bl	8019734 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	7d1b      	ldrb	r3, [r3, #20]
 8012ec0:	2b01      	cmp	r3, #1
 8012ec2:	d106      	bne.n	8012ed2 <tcp_output+0x32>
 8012ec4:	4b84      	ldr	r3, [pc, #528]	; (80130d8 <tcp_output+0x238>)
 8012ec6:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8012eca:	4986      	ldr	r1, [pc, #536]	; (80130e4 <tcp_output+0x244>)
 8012ecc:	4884      	ldr	r0, [pc, #528]	; (80130e0 <tcp_output+0x240>)
 8012ece:	f006 fc31 	bl	8019734 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8012ed2:	4b85      	ldr	r3, [pc, #532]	; (80130e8 <tcp_output+0x248>)
 8012ed4:	681b      	ldr	r3, [r3, #0]
 8012ed6:	687a      	ldr	r2, [r7, #4]
 8012ed8:	429a      	cmp	r2, r3
 8012eda:	d101      	bne.n	8012ee0 <tcp_output+0x40>
    return ERR_OK;
 8012edc:	2300      	movs	r3, #0
 8012ede:	e1ce      	b.n	801327e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012eec:	4293      	cmp	r3, r2
 8012eee:	bf28      	it	cs
 8012ef0:	4613      	movcs	r3, r2
 8012ef2:	b29b      	uxth	r3, r3
 8012ef4:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8012ef6:	687b      	ldr	r3, [r7, #4]
 8012ef8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012efa:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8012efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012efe:	2b00      	cmp	r3, #0
 8012f00:	d10b      	bne.n	8012f1a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	8b5b      	ldrh	r3, [r3, #26]
 8012f06:	f003 0302 	and.w	r3, r3, #2
 8012f0a:	2b00      	cmp	r3, #0
 8012f0c:	f000 81aa 	beq.w	8013264 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8012f10:	6878      	ldr	r0, [r7, #4]
 8012f12:	f000 fdcb 	bl	8013aac <tcp_send_empty_ack>
 8012f16:	4603      	mov	r3, r0
 8012f18:	e1b1      	b.n	801327e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8012f1a:	6879      	ldr	r1, [r7, #4]
 8012f1c:	687b      	ldr	r3, [r7, #4]
 8012f1e:	3304      	adds	r3, #4
 8012f20:	461a      	mov	r2, r3
 8012f22:	6878      	ldr	r0, [r7, #4]
 8012f24:	f7ff fc7c 	bl	8012820 <tcp_route>
 8012f28:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8012f2a:	697b      	ldr	r3, [r7, #20]
 8012f2c:	2b00      	cmp	r3, #0
 8012f2e:	d102      	bne.n	8012f36 <tcp_output+0x96>
    return ERR_RTE;
 8012f30:	f06f 0303 	mvn.w	r3, #3
 8012f34:	e1a3      	b.n	801327e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8012f36:	687b      	ldr	r3, [r7, #4]
 8012f38:	2b00      	cmp	r3, #0
 8012f3a:	d003      	beq.n	8012f44 <tcp_output+0xa4>
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	681b      	ldr	r3, [r3, #0]
 8012f40:	2b00      	cmp	r3, #0
 8012f42:	d111      	bne.n	8012f68 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8012f44:	697b      	ldr	r3, [r7, #20]
 8012f46:	2b00      	cmp	r3, #0
 8012f48:	d002      	beq.n	8012f50 <tcp_output+0xb0>
 8012f4a:	697b      	ldr	r3, [r7, #20]
 8012f4c:	3304      	adds	r3, #4
 8012f4e:	e000      	b.n	8012f52 <tcp_output+0xb2>
 8012f50:	2300      	movs	r3, #0
 8012f52:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8012f54:	693b      	ldr	r3, [r7, #16]
 8012f56:	2b00      	cmp	r3, #0
 8012f58:	d102      	bne.n	8012f60 <tcp_output+0xc0>
      return ERR_RTE;
 8012f5a:	f06f 0303 	mvn.w	r3, #3
 8012f5e:	e18e      	b.n	801327e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8012f60:	693b      	ldr	r3, [r7, #16]
 8012f62:	681a      	ldr	r2, [r3, #0]
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8012f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f6a:	68db      	ldr	r3, [r3, #12]
 8012f6c:	685b      	ldr	r3, [r3, #4]
 8012f6e:	4618      	mov	r0, r3
 8012f70:	f7f9 ff63 	bl	800ce3a <lwip_htonl>
 8012f74:	4602      	mov	r2, r0
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012f7a:	1ad3      	subs	r3, r2, r3
 8012f7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012f7e:	8912      	ldrh	r2, [r2, #8]
 8012f80:	4413      	add	r3, r2
 8012f82:	69ba      	ldr	r2, [r7, #24]
 8012f84:	429a      	cmp	r2, r3
 8012f86:	d227      	bcs.n	8012fd8 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012f8e:	461a      	mov	r2, r3
 8012f90:	69bb      	ldr	r3, [r7, #24]
 8012f92:	4293      	cmp	r3, r2
 8012f94:	d114      	bne.n	8012fc0 <tcp_output+0x120>
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012f9a:	2b00      	cmp	r3, #0
 8012f9c:	d110      	bne.n	8012fc0 <tcp_output+0x120>
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8012fa4:	2b00      	cmp	r3, #0
 8012fa6:	d10b      	bne.n	8012fc0 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8012fa8:	687b      	ldr	r3, [r7, #4]
 8012faa:	2200      	movs	r2, #0
 8012fac:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	2201      	movs	r2, #1
 8012fb4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	2200      	movs	r2, #0
 8012fbc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	8b5b      	ldrh	r3, [r3, #26]
 8012fc4:	f003 0302 	and.w	r3, r3, #2
 8012fc8:	2b00      	cmp	r3, #0
 8012fca:	f000 814d 	beq.w	8013268 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8012fce:	6878      	ldr	r0, [r7, #4]
 8012fd0:	f000 fd6c 	bl	8013aac <tcp_send_empty_ack>
 8012fd4:	4603      	mov	r3, r0
 8012fd6:	e152      	b.n	801327e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	2200      	movs	r2, #0
 8012fdc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012fe4:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8012fe6:	6a3b      	ldr	r3, [r7, #32]
 8012fe8:	2b00      	cmp	r3, #0
 8012fea:	f000 811c 	beq.w	8013226 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8012fee:	e002      	b.n	8012ff6 <tcp_output+0x156>
 8012ff0:	6a3b      	ldr	r3, [r7, #32]
 8012ff2:	681b      	ldr	r3, [r3, #0]
 8012ff4:	623b      	str	r3, [r7, #32]
 8012ff6:	6a3b      	ldr	r3, [r7, #32]
 8012ff8:	681b      	ldr	r3, [r3, #0]
 8012ffa:	2b00      	cmp	r3, #0
 8012ffc:	d1f8      	bne.n	8012ff0 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8012ffe:	e112      	b.n	8013226 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8013000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013002:	68db      	ldr	r3, [r3, #12]
 8013004:	899b      	ldrh	r3, [r3, #12]
 8013006:	b29b      	uxth	r3, r3
 8013008:	4618      	mov	r0, r3
 801300a:	f7f9 ff01 	bl	800ce10 <lwip_htons>
 801300e:	4603      	mov	r3, r0
 8013010:	b2db      	uxtb	r3, r3
 8013012:	f003 0304 	and.w	r3, r3, #4
 8013016:	2b00      	cmp	r3, #0
 8013018:	d006      	beq.n	8013028 <tcp_output+0x188>
 801301a:	4b2f      	ldr	r3, [pc, #188]	; (80130d8 <tcp_output+0x238>)
 801301c:	f240 5236 	movw	r2, #1334	; 0x536
 8013020:	4932      	ldr	r1, [pc, #200]	; (80130ec <tcp_output+0x24c>)
 8013022:	482f      	ldr	r0, [pc, #188]	; (80130e0 <tcp_output+0x240>)
 8013024:	f006 fb86 	bl	8019734 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801302c:	2b00      	cmp	r3, #0
 801302e:	d01f      	beq.n	8013070 <tcp_output+0x1d0>
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	8b5b      	ldrh	r3, [r3, #26]
 8013034:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8013038:	2b00      	cmp	r3, #0
 801303a:	d119      	bne.n	8013070 <tcp_output+0x1d0>
 801303c:	687b      	ldr	r3, [r7, #4]
 801303e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013040:	2b00      	cmp	r3, #0
 8013042:	d00b      	beq.n	801305c <tcp_output+0x1bc>
 8013044:	687b      	ldr	r3, [r7, #4]
 8013046:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013048:	681b      	ldr	r3, [r3, #0]
 801304a:	2b00      	cmp	r3, #0
 801304c:	d110      	bne.n	8013070 <tcp_output+0x1d0>
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013052:	891a      	ldrh	r2, [r3, #8]
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013058:	429a      	cmp	r2, r3
 801305a:	d209      	bcs.n	8013070 <tcp_output+0x1d0>
 801305c:	687b      	ldr	r3, [r7, #4]
 801305e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8013062:	2b00      	cmp	r3, #0
 8013064:	d004      	beq.n	8013070 <tcp_output+0x1d0>
 8013066:	687b      	ldr	r3, [r7, #4]
 8013068:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801306c:	2b08      	cmp	r3, #8
 801306e:	d901      	bls.n	8013074 <tcp_output+0x1d4>
 8013070:	2301      	movs	r3, #1
 8013072:	e000      	b.n	8013076 <tcp_output+0x1d6>
 8013074:	2300      	movs	r3, #0
 8013076:	2b00      	cmp	r3, #0
 8013078:	d106      	bne.n	8013088 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	8b5b      	ldrh	r3, [r3, #26]
 801307e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8013082:	2b00      	cmp	r3, #0
 8013084:	f000 80e4 	beq.w	8013250 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8013088:	687b      	ldr	r3, [r7, #4]
 801308a:	7d1b      	ldrb	r3, [r3, #20]
 801308c:	2b02      	cmp	r3, #2
 801308e:	d00d      	beq.n	80130ac <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8013090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013092:	68db      	ldr	r3, [r3, #12]
 8013094:	899b      	ldrh	r3, [r3, #12]
 8013096:	b29c      	uxth	r4, r3
 8013098:	2010      	movs	r0, #16
 801309a:	f7f9 feb9 	bl	800ce10 <lwip_htons>
 801309e:	4603      	mov	r3, r0
 80130a0:	461a      	mov	r2, r3
 80130a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130a4:	68db      	ldr	r3, [r3, #12]
 80130a6:	4322      	orrs	r2, r4
 80130a8:	b292      	uxth	r2, r2
 80130aa:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80130ac:	697a      	ldr	r2, [r7, #20]
 80130ae:	6879      	ldr	r1, [r7, #4]
 80130b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80130b2:	f000 f909 	bl	80132c8 <tcp_output_segment>
 80130b6:	4603      	mov	r3, r0
 80130b8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80130ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80130be:	2b00      	cmp	r3, #0
 80130c0:	d016      	beq.n	80130f0 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80130c2:	687b      	ldr	r3, [r7, #4]
 80130c4:	8b5b      	ldrh	r3, [r3, #26]
 80130c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80130ca:	b29a      	uxth	r2, r3
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	835a      	strh	r2, [r3, #26]
      return err;
 80130d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80130d4:	e0d3      	b.n	801327e <tcp_output+0x3de>
 80130d6:	bf00      	nop
 80130d8:	0801b9e0 	.word	0x0801b9e0
 80130dc:	0801bf24 	.word	0x0801bf24
 80130e0:	0801ba34 	.word	0x0801ba34
 80130e4:	0801bf3c 	.word	0x0801bf3c
 80130e8:	2001b674 	.word	0x2001b674
 80130ec:	0801bf64 	.word	0x0801bf64
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80130f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130f2:	681a      	ldr	r2, [r3, #0]
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	7d1b      	ldrb	r3, [r3, #20]
 80130fc:	2b02      	cmp	r3, #2
 80130fe:	d006      	beq.n	801310e <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	8b5b      	ldrh	r3, [r3, #26]
 8013104:	f023 0303 	bic.w	r3, r3, #3
 8013108:	b29a      	uxth	r2, r3
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801310e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013110:	68db      	ldr	r3, [r3, #12]
 8013112:	685b      	ldr	r3, [r3, #4]
 8013114:	4618      	mov	r0, r3
 8013116:	f7f9 fe90 	bl	800ce3a <lwip_htonl>
 801311a:	4604      	mov	r4, r0
 801311c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801311e:	891b      	ldrh	r3, [r3, #8]
 8013120:	461d      	mov	r5, r3
 8013122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013124:	68db      	ldr	r3, [r3, #12]
 8013126:	899b      	ldrh	r3, [r3, #12]
 8013128:	b29b      	uxth	r3, r3
 801312a:	4618      	mov	r0, r3
 801312c:	f7f9 fe70 	bl	800ce10 <lwip_htons>
 8013130:	4603      	mov	r3, r0
 8013132:	b2db      	uxtb	r3, r3
 8013134:	f003 0303 	and.w	r3, r3, #3
 8013138:	2b00      	cmp	r3, #0
 801313a:	d001      	beq.n	8013140 <tcp_output+0x2a0>
 801313c:	2301      	movs	r3, #1
 801313e:	e000      	b.n	8013142 <tcp_output+0x2a2>
 8013140:	2300      	movs	r3, #0
 8013142:	442b      	add	r3, r5
 8013144:	4423      	add	r3, r4
 8013146:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8013148:	687b      	ldr	r3, [r7, #4]
 801314a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801314c:	68bb      	ldr	r3, [r7, #8]
 801314e:	1ad3      	subs	r3, r2, r3
 8013150:	2b00      	cmp	r3, #0
 8013152:	da02      	bge.n	801315a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	68ba      	ldr	r2, [r7, #8]
 8013158:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801315a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801315c:	891b      	ldrh	r3, [r3, #8]
 801315e:	461c      	mov	r4, r3
 8013160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013162:	68db      	ldr	r3, [r3, #12]
 8013164:	899b      	ldrh	r3, [r3, #12]
 8013166:	b29b      	uxth	r3, r3
 8013168:	4618      	mov	r0, r3
 801316a:	f7f9 fe51 	bl	800ce10 <lwip_htons>
 801316e:	4603      	mov	r3, r0
 8013170:	b2db      	uxtb	r3, r3
 8013172:	f003 0303 	and.w	r3, r3, #3
 8013176:	2b00      	cmp	r3, #0
 8013178:	d001      	beq.n	801317e <tcp_output+0x2de>
 801317a:	2301      	movs	r3, #1
 801317c:	e000      	b.n	8013180 <tcp_output+0x2e0>
 801317e:	2300      	movs	r3, #0
 8013180:	4423      	add	r3, r4
 8013182:	2b00      	cmp	r3, #0
 8013184:	d049      	beq.n	801321a <tcp_output+0x37a>
      seg->next = NULL;
 8013186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013188:	2200      	movs	r2, #0
 801318a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801318c:	687b      	ldr	r3, [r7, #4]
 801318e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013190:	2b00      	cmp	r3, #0
 8013192:	d105      	bne.n	80131a0 <tcp_output+0x300>
        pcb->unacked = seg;
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013198:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801319a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801319c:	623b      	str	r3, [r7, #32]
 801319e:	e03f      	b.n	8013220 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80131a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131a2:	68db      	ldr	r3, [r3, #12]
 80131a4:	685b      	ldr	r3, [r3, #4]
 80131a6:	4618      	mov	r0, r3
 80131a8:	f7f9 fe47 	bl	800ce3a <lwip_htonl>
 80131ac:	4604      	mov	r4, r0
 80131ae:	6a3b      	ldr	r3, [r7, #32]
 80131b0:	68db      	ldr	r3, [r3, #12]
 80131b2:	685b      	ldr	r3, [r3, #4]
 80131b4:	4618      	mov	r0, r3
 80131b6:	f7f9 fe40 	bl	800ce3a <lwip_htonl>
 80131ba:	4603      	mov	r3, r0
 80131bc:	1ae3      	subs	r3, r4, r3
 80131be:	2b00      	cmp	r3, #0
 80131c0:	da24      	bge.n	801320c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80131c2:	687b      	ldr	r3, [r7, #4]
 80131c4:	3370      	adds	r3, #112	; 0x70
 80131c6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80131c8:	e002      	b.n	80131d0 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80131ca:	69fb      	ldr	r3, [r7, #28]
 80131cc:	681b      	ldr	r3, [r3, #0]
 80131ce:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80131d0:	69fb      	ldr	r3, [r7, #28]
 80131d2:	681b      	ldr	r3, [r3, #0]
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	d011      	beq.n	80131fc <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80131d8:	69fb      	ldr	r3, [r7, #28]
 80131da:	681b      	ldr	r3, [r3, #0]
 80131dc:	68db      	ldr	r3, [r3, #12]
 80131de:	685b      	ldr	r3, [r3, #4]
 80131e0:	4618      	mov	r0, r3
 80131e2:	f7f9 fe2a 	bl	800ce3a <lwip_htonl>
 80131e6:	4604      	mov	r4, r0
 80131e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131ea:	68db      	ldr	r3, [r3, #12]
 80131ec:	685b      	ldr	r3, [r3, #4]
 80131ee:	4618      	mov	r0, r3
 80131f0:	f7f9 fe23 	bl	800ce3a <lwip_htonl>
 80131f4:	4603      	mov	r3, r0
 80131f6:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80131f8:	2b00      	cmp	r3, #0
 80131fa:	dbe6      	blt.n	80131ca <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 80131fc:	69fb      	ldr	r3, [r7, #28]
 80131fe:	681a      	ldr	r2, [r3, #0]
 8013200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013202:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8013204:	69fb      	ldr	r3, [r7, #28]
 8013206:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013208:	601a      	str	r2, [r3, #0]
 801320a:	e009      	b.n	8013220 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801320c:	6a3b      	ldr	r3, [r7, #32]
 801320e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013210:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8013212:	6a3b      	ldr	r3, [r7, #32]
 8013214:	681b      	ldr	r3, [r3, #0]
 8013216:	623b      	str	r3, [r7, #32]
 8013218:	e002      	b.n	8013220 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801321a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801321c:	f7fc fc3f 	bl	800fa9e <tcp_seg_free>
    }
    seg = pcb->unsent;
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013224:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8013226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013228:	2b00      	cmp	r3, #0
 801322a:	d012      	beq.n	8013252 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801322c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801322e:	68db      	ldr	r3, [r3, #12]
 8013230:	685b      	ldr	r3, [r3, #4]
 8013232:	4618      	mov	r0, r3
 8013234:	f7f9 fe01 	bl	800ce3a <lwip_htonl>
 8013238:	4602      	mov	r2, r0
 801323a:	687b      	ldr	r3, [r7, #4]
 801323c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801323e:	1ad3      	subs	r3, r2, r3
 8013240:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013242:	8912      	ldrh	r2, [r2, #8]
 8013244:	4413      	add	r3, r2
  while (seg != NULL &&
 8013246:	69ba      	ldr	r2, [r7, #24]
 8013248:	429a      	cmp	r2, r3
 801324a:	f4bf aed9 	bcs.w	8013000 <tcp_output+0x160>
 801324e:	e000      	b.n	8013252 <tcp_output+0x3b2>
      break;
 8013250:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8013252:	687b      	ldr	r3, [r7, #4]
 8013254:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013256:	2b00      	cmp	r3, #0
 8013258:	d108      	bne.n	801326c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801325a:	687b      	ldr	r3, [r7, #4]
 801325c:	2200      	movs	r2, #0
 801325e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8013262:	e004      	b.n	801326e <tcp_output+0x3ce>
    goto output_done;
 8013264:	bf00      	nop
 8013266:	e002      	b.n	801326e <tcp_output+0x3ce>
    goto output_done;
 8013268:	bf00      	nop
 801326a:	e000      	b.n	801326e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801326c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	8b5b      	ldrh	r3, [r3, #26]
 8013272:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013276:	b29a      	uxth	r2, r3
 8013278:	687b      	ldr	r3, [r7, #4]
 801327a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801327c:	2300      	movs	r3, #0
}
 801327e:	4618      	mov	r0, r3
 8013280:	3728      	adds	r7, #40	; 0x28
 8013282:	46bd      	mov	sp, r7
 8013284:	bdb0      	pop	{r4, r5, r7, pc}
 8013286:	bf00      	nop

08013288 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8013288:	b580      	push	{r7, lr}
 801328a:	b082      	sub	sp, #8
 801328c:	af00      	add	r7, sp, #0
 801328e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8013290:	687b      	ldr	r3, [r7, #4]
 8013292:	2b00      	cmp	r3, #0
 8013294:	d106      	bne.n	80132a4 <tcp_output_segment_busy+0x1c>
 8013296:	4b09      	ldr	r3, [pc, #36]	; (80132bc <tcp_output_segment_busy+0x34>)
 8013298:	f240 529a 	movw	r2, #1434	; 0x59a
 801329c:	4908      	ldr	r1, [pc, #32]	; (80132c0 <tcp_output_segment_busy+0x38>)
 801329e:	4809      	ldr	r0, [pc, #36]	; (80132c4 <tcp_output_segment_busy+0x3c>)
 80132a0:	f006 fa48 	bl	8019734 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	685b      	ldr	r3, [r3, #4]
 80132a8:	7b9b      	ldrb	r3, [r3, #14]
 80132aa:	2b01      	cmp	r3, #1
 80132ac:	d001      	beq.n	80132b2 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80132ae:	2301      	movs	r3, #1
 80132b0:	e000      	b.n	80132b4 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80132b2:	2300      	movs	r3, #0
}
 80132b4:	4618      	mov	r0, r3
 80132b6:	3708      	adds	r7, #8
 80132b8:	46bd      	mov	sp, r7
 80132ba:	bd80      	pop	{r7, pc}
 80132bc:	0801b9e0 	.word	0x0801b9e0
 80132c0:	0801bf7c 	.word	0x0801bf7c
 80132c4:	0801ba34 	.word	0x0801ba34

080132c8 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80132c8:	b5b0      	push	{r4, r5, r7, lr}
 80132ca:	b08c      	sub	sp, #48	; 0x30
 80132cc:	af04      	add	r7, sp, #16
 80132ce:	60f8      	str	r0, [r7, #12]
 80132d0:	60b9      	str	r1, [r7, #8]
 80132d2:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80132d4:	68fb      	ldr	r3, [r7, #12]
 80132d6:	2b00      	cmp	r3, #0
 80132d8:	d106      	bne.n	80132e8 <tcp_output_segment+0x20>
 80132da:	4b63      	ldr	r3, [pc, #396]	; (8013468 <tcp_output_segment+0x1a0>)
 80132dc:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 80132e0:	4962      	ldr	r1, [pc, #392]	; (801346c <tcp_output_segment+0x1a4>)
 80132e2:	4863      	ldr	r0, [pc, #396]	; (8013470 <tcp_output_segment+0x1a8>)
 80132e4:	f006 fa26 	bl	8019734 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80132e8:	68bb      	ldr	r3, [r7, #8]
 80132ea:	2b00      	cmp	r3, #0
 80132ec:	d106      	bne.n	80132fc <tcp_output_segment+0x34>
 80132ee:	4b5e      	ldr	r3, [pc, #376]	; (8013468 <tcp_output_segment+0x1a0>)
 80132f0:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80132f4:	495f      	ldr	r1, [pc, #380]	; (8013474 <tcp_output_segment+0x1ac>)
 80132f6:	485e      	ldr	r0, [pc, #376]	; (8013470 <tcp_output_segment+0x1a8>)
 80132f8:	f006 fa1c 	bl	8019734 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	2b00      	cmp	r3, #0
 8013300:	d106      	bne.n	8013310 <tcp_output_segment+0x48>
 8013302:	4b59      	ldr	r3, [pc, #356]	; (8013468 <tcp_output_segment+0x1a0>)
 8013304:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8013308:	495b      	ldr	r1, [pc, #364]	; (8013478 <tcp_output_segment+0x1b0>)
 801330a:	4859      	ldr	r0, [pc, #356]	; (8013470 <tcp_output_segment+0x1a8>)
 801330c:	f006 fa12 	bl	8019734 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8013310:	68f8      	ldr	r0, [r7, #12]
 8013312:	f7ff ffb9 	bl	8013288 <tcp_output_segment_busy>
 8013316:	4603      	mov	r3, r0
 8013318:	2b00      	cmp	r3, #0
 801331a:	d001      	beq.n	8013320 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801331c:	2300      	movs	r3, #0
 801331e:	e09f      	b.n	8013460 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8013320:	68bb      	ldr	r3, [r7, #8]
 8013322:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013324:	68fb      	ldr	r3, [r7, #12]
 8013326:	68dc      	ldr	r4, [r3, #12]
 8013328:	4610      	mov	r0, r2
 801332a:	f7f9 fd86 	bl	800ce3a <lwip_htonl>
 801332e:	4603      	mov	r3, r0
 8013330:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8013332:	68bb      	ldr	r3, [r7, #8]
 8013334:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8013336:	68fb      	ldr	r3, [r7, #12]
 8013338:	68dc      	ldr	r4, [r3, #12]
 801333a:	4610      	mov	r0, r2
 801333c:	f7f9 fd68 	bl	800ce10 <lwip_htons>
 8013340:	4603      	mov	r3, r0
 8013342:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8013344:	68bb      	ldr	r3, [r7, #8]
 8013346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013348:	68ba      	ldr	r2, [r7, #8]
 801334a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801334c:	441a      	add	r2, r3
 801334e:	68bb      	ldr	r3, [r7, #8]
 8013350:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8013352:	68fb      	ldr	r3, [r7, #12]
 8013354:	68db      	ldr	r3, [r3, #12]
 8013356:	3314      	adds	r3, #20
 8013358:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801335a:	68fb      	ldr	r3, [r7, #12]
 801335c:	7a9b      	ldrb	r3, [r3, #10]
 801335e:	f003 0301 	and.w	r3, r3, #1
 8013362:	2b00      	cmp	r3, #0
 8013364:	d015      	beq.n	8013392 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8013366:	68bb      	ldr	r3, [r7, #8]
 8013368:	3304      	adds	r3, #4
 801336a:	461a      	mov	r2, r3
 801336c:	6879      	ldr	r1, [r7, #4]
 801336e:	f44f 7006 	mov.w	r0, #536	; 0x218
 8013372:	f7fc fe8b 	bl	801008c <tcp_eff_send_mss_netif>
 8013376:	4603      	mov	r3, r0
 8013378:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801337a:	8b7b      	ldrh	r3, [r7, #26]
 801337c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8013380:	4618      	mov	r0, r3
 8013382:	f7f9 fd5a 	bl	800ce3a <lwip_htonl>
 8013386:	4602      	mov	r2, r0
 8013388:	69fb      	ldr	r3, [r7, #28]
 801338a:	601a      	str	r2, [r3, #0]
    opts += 1;
 801338c:	69fb      	ldr	r3, [r7, #28]
 801338e:	3304      	adds	r3, #4
 8013390:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8013392:	68bb      	ldr	r3, [r7, #8]
 8013394:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8013398:	2b00      	cmp	r3, #0
 801339a:	da02      	bge.n	80133a2 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801339c:	68bb      	ldr	r3, [r7, #8]
 801339e:	2200      	movs	r2, #0
 80133a0:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80133a2:	68bb      	ldr	r3, [r7, #8]
 80133a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	d10c      	bne.n	80133c4 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80133aa:	4b34      	ldr	r3, [pc, #208]	; (801347c <tcp_output_segment+0x1b4>)
 80133ac:	681a      	ldr	r2, [r3, #0]
 80133ae:	68bb      	ldr	r3, [r7, #8]
 80133b0:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80133b2:	68fb      	ldr	r3, [r7, #12]
 80133b4:	68db      	ldr	r3, [r3, #12]
 80133b6:	685b      	ldr	r3, [r3, #4]
 80133b8:	4618      	mov	r0, r3
 80133ba:	f7f9 fd3e 	bl	800ce3a <lwip_htonl>
 80133be:	4602      	mov	r2, r0
 80133c0:	68bb      	ldr	r3, [r7, #8]
 80133c2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80133c4:	68fb      	ldr	r3, [r7, #12]
 80133c6:	68da      	ldr	r2, [r3, #12]
 80133c8:	68fb      	ldr	r3, [r7, #12]
 80133ca:	685b      	ldr	r3, [r3, #4]
 80133cc:	685b      	ldr	r3, [r3, #4]
 80133ce:	1ad3      	subs	r3, r2, r3
 80133d0:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80133d2:	68fb      	ldr	r3, [r7, #12]
 80133d4:	685b      	ldr	r3, [r3, #4]
 80133d6:	8959      	ldrh	r1, [r3, #10]
 80133d8:	68fb      	ldr	r3, [r7, #12]
 80133da:	685b      	ldr	r3, [r3, #4]
 80133dc:	8b3a      	ldrh	r2, [r7, #24]
 80133de:	1a8a      	subs	r2, r1, r2
 80133e0:	b292      	uxth	r2, r2
 80133e2:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80133e4:	68fb      	ldr	r3, [r7, #12]
 80133e6:	685b      	ldr	r3, [r3, #4]
 80133e8:	8919      	ldrh	r1, [r3, #8]
 80133ea:	68fb      	ldr	r3, [r7, #12]
 80133ec:	685b      	ldr	r3, [r3, #4]
 80133ee:	8b3a      	ldrh	r2, [r7, #24]
 80133f0:	1a8a      	subs	r2, r1, r2
 80133f2:	b292      	uxth	r2, r2
 80133f4:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80133f6:	68fb      	ldr	r3, [r7, #12]
 80133f8:	685b      	ldr	r3, [r3, #4]
 80133fa:	68fa      	ldr	r2, [r7, #12]
 80133fc:	68d2      	ldr	r2, [r2, #12]
 80133fe:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8013400:	68fb      	ldr	r3, [r7, #12]
 8013402:	68db      	ldr	r3, [r3, #12]
 8013404:	2200      	movs	r2, #0
 8013406:	741a      	strb	r2, [r3, #16]
 8013408:	2200      	movs	r2, #0
 801340a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801340c:	68fb      	ldr	r3, [r7, #12]
 801340e:	68db      	ldr	r3, [r3, #12]
 8013410:	f103 0214 	add.w	r2, r3, #20
 8013414:	68fb      	ldr	r3, [r7, #12]
 8013416:	7a9b      	ldrb	r3, [r3, #10]
 8013418:	009b      	lsls	r3, r3, #2
 801341a:	f003 0304 	and.w	r3, r3, #4
 801341e:	4413      	add	r3, r2
 8013420:	69fa      	ldr	r2, [r7, #28]
 8013422:	429a      	cmp	r2, r3
 8013424:	d006      	beq.n	8013434 <tcp_output_segment+0x16c>
 8013426:	4b10      	ldr	r3, [pc, #64]	; (8013468 <tcp_output_segment+0x1a0>)
 8013428:	f240 621c 	movw	r2, #1564	; 0x61c
 801342c:	4914      	ldr	r1, [pc, #80]	; (8013480 <tcp_output_segment+0x1b8>)
 801342e:	4810      	ldr	r0, [pc, #64]	; (8013470 <tcp_output_segment+0x1a8>)
 8013430:	f006 f980 	bl	8019734 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8013434:	68fb      	ldr	r3, [r7, #12]
 8013436:	6858      	ldr	r0, [r3, #4]
 8013438:	68b9      	ldr	r1, [r7, #8]
 801343a:	68bb      	ldr	r3, [r7, #8]
 801343c:	1d1c      	adds	r4, r3, #4
 801343e:	68bb      	ldr	r3, [r7, #8]
 8013440:	7add      	ldrb	r5, [r3, #11]
 8013442:	68bb      	ldr	r3, [r7, #8]
 8013444:	7a9b      	ldrb	r3, [r3, #10]
 8013446:	687a      	ldr	r2, [r7, #4]
 8013448:	9202      	str	r2, [sp, #8]
 801344a:	2206      	movs	r2, #6
 801344c:	9201      	str	r2, [sp, #4]
 801344e:	9300      	str	r3, [sp, #0]
 8013450:	462b      	mov	r3, r5
 8013452:	4622      	mov	r2, r4
 8013454:	f004 fc1c 	bl	8017c90 <ip4_output_if>
 8013458:	4603      	mov	r3, r0
 801345a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801345c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013460:	4618      	mov	r0, r3
 8013462:	3720      	adds	r7, #32
 8013464:	46bd      	mov	sp, r7
 8013466:	bdb0      	pop	{r4, r5, r7, pc}
 8013468:	0801b9e0 	.word	0x0801b9e0
 801346c:	0801bfa4 	.word	0x0801bfa4
 8013470:	0801ba34 	.word	0x0801ba34
 8013474:	0801bfc4 	.word	0x0801bfc4
 8013478:	0801bfe4 	.word	0x0801bfe4
 801347c:	2001b664 	.word	0x2001b664
 8013480:	0801c008 	.word	0x0801c008

08013484 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8013484:	b5b0      	push	{r4, r5, r7, lr}
 8013486:	b084      	sub	sp, #16
 8013488:	af00      	add	r7, sp, #0
 801348a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	2b00      	cmp	r3, #0
 8013490:	d106      	bne.n	80134a0 <tcp_rexmit_rto_prepare+0x1c>
 8013492:	4b31      	ldr	r3, [pc, #196]	; (8013558 <tcp_rexmit_rto_prepare+0xd4>)
 8013494:	f240 6263 	movw	r2, #1635	; 0x663
 8013498:	4930      	ldr	r1, [pc, #192]	; (801355c <tcp_rexmit_rto_prepare+0xd8>)
 801349a:	4831      	ldr	r0, [pc, #196]	; (8013560 <tcp_rexmit_rto_prepare+0xdc>)
 801349c:	f006 f94a 	bl	8019734 <iprintf>

  if (pcb->unacked == NULL) {
 80134a0:	687b      	ldr	r3, [r7, #4]
 80134a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80134a4:	2b00      	cmp	r3, #0
 80134a6:	d102      	bne.n	80134ae <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80134a8:	f06f 0305 	mvn.w	r3, #5
 80134ac:	e050      	b.n	8013550 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80134ae:	687b      	ldr	r3, [r7, #4]
 80134b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80134b2:	60fb      	str	r3, [r7, #12]
 80134b4:	e00b      	b.n	80134ce <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80134b6:	68f8      	ldr	r0, [r7, #12]
 80134b8:	f7ff fee6 	bl	8013288 <tcp_output_segment_busy>
 80134bc:	4603      	mov	r3, r0
 80134be:	2b00      	cmp	r3, #0
 80134c0:	d002      	beq.n	80134c8 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80134c2:	f06f 0305 	mvn.w	r3, #5
 80134c6:	e043      	b.n	8013550 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80134c8:	68fb      	ldr	r3, [r7, #12]
 80134ca:	681b      	ldr	r3, [r3, #0]
 80134cc:	60fb      	str	r3, [r7, #12]
 80134ce:	68fb      	ldr	r3, [r7, #12]
 80134d0:	681b      	ldr	r3, [r3, #0]
 80134d2:	2b00      	cmp	r3, #0
 80134d4:	d1ef      	bne.n	80134b6 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80134d6:	68f8      	ldr	r0, [r7, #12]
 80134d8:	f7ff fed6 	bl	8013288 <tcp_output_segment_busy>
 80134dc:	4603      	mov	r3, r0
 80134de:	2b00      	cmp	r3, #0
 80134e0:	d002      	beq.n	80134e8 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80134e2:	f06f 0305 	mvn.w	r3, #5
 80134e6:	e033      	b.n	8013550 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80134ec:	68fb      	ldr	r3, [r7, #12]
 80134ee:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80134f8:	687b      	ldr	r3, [r7, #4]
 80134fa:	2200      	movs	r2, #0
 80134fc:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	8b5b      	ldrh	r3, [r3, #26]
 8013502:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8013506:	b29a      	uxth	r2, r3
 8013508:	687b      	ldr	r3, [r7, #4]
 801350a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801350c:	68fb      	ldr	r3, [r7, #12]
 801350e:	68db      	ldr	r3, [r3, #12]
 8013510:	685b      	ldr	r3, [r3, #4]
 8013512:	4618      	mov	r0, r3
 8013514:	f7f9 fc91 	bl	800ce3a <lwip_htonl>
 8013518:	4604      	mov	r4, r0
 801351a:	68fb      	ldr	r3, [r7, #12]
 801351c:	891b      	ldrh	r3, [r3, #8]
 801351e:	461d      	mov	r5, r3
 8013520:	68fb      	ldr	r3, [r7, #12]
 8013522:	68db      	ldr	r3, [r3, #12]
 8013524:	899b      	ldrh	r3, [r3, #12]
 8013526:	b29b      	uxth	r3, r3
 8013528:	4618      	mov	r0, r3
 801352a:	f7f9 fc71 	bl	800ce10 <lwip_htons>
 801352e:	4603      	mov	r3, r0
 8013530:	b2db      	uxtb	r3, r3
 8013532:	f003 0303 	and.w	r3, r3, #3
 8013536:	2b00      	cmp	r3, #0
 8013538:	d001      	beq.n	801353e <tcp_rexmit_rto_prepare+0xba>
 801353a:	2301      	movs	r3, #1
 801353c:	e000      	b.n	8013540 <tcp_rexmit_rto_prepare+0xbc>
 801353e:	2300      	movs	r3, #0
 8013540:	442b      	add	r3, r5
 8013542:	18e2      	adds	r2, r4, r3
 8013544:	687b      	ldr	r3, [r7, #4]
 8013546:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	2200      	movs	r2, #0
 801354c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801354e:	2300      	movs	r3, #0
}
 8013550:	4618      	mov	r0, r3
 8013552:	3710      	adds	r7, #16
 8013554:	46bd      	mov	sp, r7
 8013556:	bdb0      	pop	{r4, r5, r7, pc}
 8013558:	0801b9e0 	.word	0x0801b9e0
 801355c:	0801c01c 	.word	0x0801c01c
 8013560:	0801ba34 	.word	0x0801ba34

08013564 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8013564:	b580      	push	{r7, lr}
 8013566:	b082      	sub	sp, #8
 8013568:	af00      	add	r7, sp, #0
 801356a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	2b00      	cmp	r3, #0
 8013570:	d106      	bne.n	8013580 <tcp_rexmit_rto_commit+0x1c>
 8013572:	4b0d      	ldr	r3, [pc, #52]	; (80135a8 <tcp_rexmit_rto_commit+0x44>)
 8013574:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8013578:	490c      	ldr	r1, [pc, #48]	; (80135ac <tcp_rexmit_rto_commit+0x48>)
 801357a:	480d      	ldr	r0, [pc, #52]	; (80135b0 <tcp_rexmit_rto_commit+0x4c>)
 801357c:	f006 f8da 	bl	8019734 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8013580:	687b      	ldr	r3, [r7, #4]
 8013582:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013586:	2bff      	cmp	r3, #255	; 0xff
 8013588:	d007      	beq.n	801359a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801358a:	687b      	ldr	r3, [r7, #4]
 801358c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013590:	3301      	adds	r3, #1
 8013592:	b2da      	uxtb	r2, r3
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801359a:	6878      	ldr	r0, [r7, #4]
 801359c:	f7ff fc80 	bl	8012ea0 <tcp_output>
}
 80135a0:	bf00      	nop
 80135a2:	3708      	adds	r7, #8
 80135a4:	46bd      	mov	sp, r7
 80135a6:	bd80      	pop	{r7, pc}
 80135a8:	0801b9e0 	.word	0x0801b9e0
 80135ac:	0801c040 	.word	0x0801c040
 80135b0:	0801ba34 	.word	0x0801ba34

080135b4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80135b4:	b580      	push	{r7, lr}
 80135b6:	b082      	sub	sp, #8
 80135b8:	af00      	add	r7, sp, #0
 80135ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	2b00      	cmp	r3, #0
 80135c0:	d106      	bne.n	80135d0 <tcp_rexmit_rto+0x1c>
 80135c2:	4b0a      	ldr	r3, [pc, #40]	; (80135ec <tcp_rexmit_rto+0x38>)
 80135c4:	f240 62ad 	movw	r2, #1709	; 0x6ad
 80135c8:	4909      	ldr	r1, [pc, #36]	; (80135f0 <tcp_rexmit_rto+0x3c>)
 80135ca:	480a      	ldr	r0, [pc, #40]	; (80135f4 <tcp_rexmit_rto+0x40>)
 80135cc:	f006 f8b2 	bl	8019734 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80135d0:	6878      	ldr	r0, [r7, #4]
 80135d2:	f7ff ff57 	bl	8013484 <tcp_rexmit_rto_prepare>
 80135d6:	4603      	mov	r3, r0
 80135d8:	2b00      	cmp	r3, #0
 80135da:	d102      	bne.n	80135e2 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80135dc:	6878      	ldr	r0, [r7, #4]
 80135de:	f7ff ffc1 	bl	8013564 <tcp_rexmit_rto_commit>
  }
}
 80135e2:	bf00      	nop
 80135e4:	3708      	adds	r7, #8
 80135e6:	46bd      	mov	sp, r7
 80135e8:	bd80      	pop	{r7, pc}
 80135ea:	bf00      	nop
 80135ec:	0801b9e0 	.word	0x0801b9e0
 80135f0:	0801c064 	.word	0x0801c064
 80135f4:	0801ba34 	.word	0x0801ba34

080135f8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80135f8:	b590      	push	{r4, r7, lr}
 80135fa:	b085      	sub	sp, #20
 80135fc:	af00      	add	r7, sp, #0
 80135fe:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8013600:	687b      	ldr	r3, [r7, #4]
 8013602:	2b00      	cmp	r3, #0
 8013604:	d106      	bne.n	8013614 <tcp_rexmit+0x1c>
 8013606:	4b2f      	ldr	r3, [pc, #188]	; (80136c4 <tcp_rexmit+0xcc>)
 8013608:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801360c:	492e      	ldr	r1, [pc, #184]	; (80136c8 <tcp_rexmit+0xd0>)
 801360e:	482f      	ldr	r0, [pc, #188]	; (80136cc <tcp_rexmit+0xd4>)
 8013610:	f006 f890 	bl	8019734 <iprintf>

  if (pcb->unacked == NULL) {
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013618:	2b00      	cmp	r3, #0
 801361a:	d102      	bne.n	8013622 <tcp_rexmit+0x2a>
    return ERR_VAL;
 801361c:	f06f 0305 	mvn.w	r3, #5
 8013620:	e04c      	b.n	80136bc <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013626:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8013628:	68b8      	ldr	r0, [r7, #8]
 801362a:	f7ff fe2d 	bl	8013288 <tcp_output_segment_busy>
 801362e:	4603      	mov	r3, r0
 8013630:	2b00      	cmp	r3, #0
 8013632:	d002      	beq.n	801363a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8013634:	f06f 0305 	mvn.w	r3, #5
 8013638:	e040      	b.n	80136bc <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801363a:	68bb      	ldr	r3, [r7, #8]
 801363c:	681a      	ldr	r2, [r3, #0]
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	336c      	adds	r3, #108	; 0x6c
 8013646:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8013648:	e002      	b.n	8013650 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801364a:	68fb      	ldr	r3, [r7, #12]
 801364c:	681b      	ldr	r3, [r3, #0]
 801364e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8013650:	68fb      	ldr	r3, [r7, #12]
 8013652:	681b      	ldr	r3, [r3, #0]
 8013654:	2b00      	cmp	r3, #0
 8013656:	d011      	beq.n	801367c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8013658:	68fb      	ldr	r3, [r7, #12]
 801365a:	681b      	ldr	r3, [r3, #0]
 801365c:	68db      	ldr	r3, [r3, #12]
 801365e:	685b      	ldr	r3, [r3, #4]
 8013660:	4618      	mov	r0, r3
 8013662:	f7f9 fbea 	bl	800ce3a <lwip_htonl>
 8013666:	4604      	mov	r4, r0
 8013668:	68bb      	ldr	r3, [r7, #8]
 801366a:	68db      	ldr	r3, [r3, #12]
 801366c:	685b      	ldr	r3, [r3, #4]
 801366e:	4618      	mov	r0, r3
 8013670:	f7f9 fbe3 	bl	800ce3a <lwip_htonl>
 8013674:	4603      	mov	r3, r0
 8013676:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8013678:	2b00      	cmp	r3, #0
 801367a:	dbe6      	blt.n	801364a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801367c:	68fb      	ldr	r3, [r7, #12]
 801367e:	681a      	ldr	r2, [r3, #0]
 8013680:	68bb      	ldr	r3, [r7, #8]
 8013682:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8013684:	68fb      	ldr	r3, [r7, #12]
 8013686:	68ba      	ldr	r2, [r7, #8]
 8013688:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801368a:	68bb      	ldr	r3, [r7, #8]
 801368c:	681b      	ldr	r3, [r3, #0]
 801368e:	2b00      	cmp	r3, #0
 8013690:	d103      	bne.n	801369a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8013692:	687b      	ldr	r3, [r7, #4]
 8013694:	2200      	movs	r2, #0
 8013696:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801369a:	687b      	ldr	r3, [r7, #4]
 801369c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80136a0:	2bff      	cmp	r3, #255	; 0xff
 80136a2:	d007      	beq.n	80136b4 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80136aa:	3301      	adds	r3, #1
 80136ac:	b2da      	uxtb	r2, r3
 80136ae:	687b      	ldr	r3, [r7, #4]
 80136b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80136b4:	687b      	ldr	r3, [r7, #4]
 80136b6:	2200      	movs	r2, #0
 80136b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80136ba:	2300      	movs	r3, #0
}
 80136bc:	4618      	mov	r0, r3
 80136be:	3714      	adds	r7, #20
 80136c0:	46bd      	mov	sp, r7
 80136c2:	bd90      	pop	{r4, r7, pc}
 80136c4:	0801b9e0 	.word	0x0801b9e0
 80136c8:	0801c080 	.word	0x0801c080
 80136cc:	0801ba34 	.word	0x0801ba34

080136d0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80136d0:	b580      	push	{r7, lr}
 80136d2:	b082      	sub	sp, #8
 80136d4:	af00      	add	r7, sp, #0
 80136d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	2b00      	cmp	r3, #0
 80136dc:	d106      	bne.n	80136ec <tcp_rexmit_fast+0x1c>
 80136de:	4b2a      	ldr	r3, [pc, #168]	; (8013788 <tcp_rexmit_fast+0xb8>)
 80136e0:	f240 62f9 	movw	r2, #1785	; 0x6f9
 80136e4:	4929      	ldr	r1, [pc, #164]	; (801378c <tcp_rexmit_fast+0xbc>)
 80136e6:	482a      	ldr	r0, [pc, #168]	; (8013790 <tcp_rexmit_fast+0xc0>)
 80136e8:	f006 f824 	bl	8019734 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80136ec:	687b      	ldr	r3, [r7, #4]
 80136ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80136f0:	2b00      	cmp	r3, #0
 80136f2:	d044      	beq.n	801377e <tcp_rexmit_fast+0xae>
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	8b5b      	ldrh	r3, [r3, #26]
 80136f8:	f003 0304 	and.w	r3, r3, #4
 80136fc:	2b00      	cmp	r3, #0
 80136fe:	d13e      	bne.n	801377e <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8013700:	6878      	ldr	r0, [r7, #4]
 8013702:	f7ff ff79 	bl	80135f8 <tcp_rexmit>
 8013706:	4603      	mov	r3, r0
 8013708:	2b00      	cmp	r3, #0
 801370a:	d138      	bne.n	801377e <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013718:	4293      	cmp	r3, r2
 801371a:	bf28      	it	cs
 801371c:	4613      	movcs	r3, r2
 801371e:	b29b      	uxth	r3, r3
 8013720:	0fda      	lsrs	r2, r3, #31
 8013722:	4413      	add	r3, r2
 8013724:	105b      	asrs	r3, r3, #1
 8013726:	b29a      	uxth	r2, r3
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801372e:	687b      	ldr	r3, [r7, #4]
 8013730:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8013734:	461a      	mov	r2, r3
 8013736:	687b      	ldr	r3, [r7, #4]
 8013738:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801373a:	005b      	lsls	r3, r3, #1
 801373c:	429a      	cmp	r2, r3
 801373e:	d206      	bcs.n	801374e <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8013740:	687b      	ldr	r3, [r7, #4]
 8013742:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013744:	005b      	lsls	r3, r3, #1
 8013746:	b29a      	uxth	r2, r3
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801374e:	687b      	ldr	r3, [r7, #4]
 8013750:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8013754:	687b      	ldr	r3, [r7, #4]
 8013756:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013758:	4619      	mov	r1, r3
 801375a:	0049      	lsls	r1, r1, #1
 801375c:	440b      	add	r3, r1
 801375e:	b29b      	uxth	r3, r3
 8013760:	4413      	add	r3, r2
 8013762:	b29a      	uxth	r2, r3
 8013764:	687b      	ldr	r3, [r7, #4]
 8013766:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	8b5b      	ldrh	r3, [r3, #26]
 801376e:	f043 0304 	orr.w	r3, r3, #4
 8013772:	b29a      	uxth	r2, r3
 8013774:	687b      	ldr	r3, [r7, #4]
 8013776:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8013778:	687b      	ldr	r3, [r7, #4]
 801377a:	2200      	movs	r2, #0
 801377c:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801377e:	bf00      	nop
 8013780:	3708      	adds	r7, #8
 8013782:	46bd      	mov	sp, r7
 8013784:	bd80      	pop	{r7, pc}
 8013786:	bf00      	nop
 8013788:	0801b9e0 	.word	0x0801b9e0
 801378c:	0801c098 	.word	0x0801c098
 8013790:	0801ba34 	.word	0x0801ba34

08013794 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8013794:	b580      	push	{r7, lr}
 8013796:	b086      	sub	sp, #24
 8013798:	af00      	add	r7, sp, #0
 801379a:	60f8      	str	r0, [r7, #12]
 801379c:	607b      	str	r3, [r7, #4]
 801379e:	460b      	mov	r3, r1
 80137a0:	817b      	strh	r3, [r7, #10]
 80137a2:	4613      	mov	r3, r2
 80137a4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80137a6:	897a      	ldrh	r2, [r7, #10]
 80137a8:	893b      	ldrh	r3, [r7, #8]
 80137aa:	4413      	add	r3, r2
 80137ac:	b29b      	uxth	r3, r3
 80137ae:	3314      	adds	r3, #20
 80137b0:	b29b      	uxth	r3, r3
 80137b2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80137b6:	4619      	mov	r1, r3
 80137b8:	2022      	movs	r0, #34	; 0x22
 80137ba:	f7fa fbfd 	bl	800dfb8 <pbuf_alloc>
 80137be:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80137c0:	697b      	ldr	r3, [r7, #20]
 80137c2:	2b00      	cmp	r3, #0
 80137c4:	d04d      	beq.n	8013862 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80137c6:	897b      	ldrh	r3, [r7, #10]
 80137c8:	3313      	adds	r3, #19
 80137ca:	697a      	ldr	r2, [r7, #20]
 80137cc:	8952      	ldrh	r2, [r2, #10]
 80137ce:	4293      	cmp	r3, r2
 80137d0:	db06      	blt.n	80137e0 <tcp_output_alloc_header_common+0x4c>
 80137d2:	4b26      	ldr	r3, [pc, #152]	; (801386c <tcp_output_alloc_header_common+0xd8>)
 80137d4:	f240 7223 	movw	r2, #1827	; 0x723
 80137d8:	4925      	ldr	r1, [pc, #148]	; (8013870 <tcp_output_alloc_header_common+0xdc>)
 80137da:	4826      	ldr	r0, [pc, #152]	; (8013874 <tcp_output_alloc_header_common+0xe0>)
 80137dc:	f005 ffaa 	bl	8019734 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80137e0:	697b      	ldr	r3, [r7, #20]
 80137e2:	685b      	ldr	r3, [r3, #4]
 80137e4:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80137e6:	8c3b      	ldrh	r3, [r7, #32]
 80137e8:	4618      	mov	r0, r3
 80137ea:	f7f9 fb11 	bl	800ce10 <lwip_htons>
 80137ee:	4603      	mov	r3, r0
 80137f0:	461a      	mov	r2, r3
 80137f2:	693b      	ldr	r3, [r7, #16]
 80137f4:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80137f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80137f8:	4618      	mov	r0, r3
 80137fa:	f7f9 fb09 	bl	800ce10 <lwip_htons>
 80137fe:	4603      	mov	r3, r0
 8013800:	461a      	mov	r2, r3
 8013802:	693b      	ldr	r3, [r7, #16]
 8013804:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8013806:	693b      	ldr	r3, [r7, #16]
 8013808:	687a      	ldr	r2, [r7, #4]
 801380a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801380c:	68f8      	ldr	r0, [r7, #12]
 801380e:	f7f9 fb14 	bl	800ce3a <lwip_htonl>
 8013812:	4602      	mov	r2, r0
 8013814:	693b      	ldr	r3, [r7, #16]
 8013816:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8013818:	897b      	ldrh	r3, [r7, #10]
 801381a:	089b      	lsrs	r3, r3, #2
 801381c:	b29b      	uxth	r3, r3
 801381e:	3305      	adds	r3, #5
 8013820:	b29b      	uxth	r3, r3
 8013822:	031b      	lsls	r3, r3, #12
 8013824:	b29a      	uxth	r2, r3
 8013826:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801382a:	b29b      	uxth	r3, r3
 801382c:	4313      	orrs	r3, r2
 801382e:	b29b      	uxth	r3, r3
 8013830:	4618      	mov	r0, r3
 8013832:	f7f9 faed 	bl	800ce10 <lwip_htons>
 8013836:	4603      	mov	r3, r0
 8013838:	461a      	mov	r2, r3
 801383a:	693b      	ldr	r3, [r7, #16]
 801383c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801383e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013840:	4618      	mov	r0, r3
 8013842:	f7f9 fae5 	bl	800ce10 <lwip_htons>
 8013846:	4603      	mov	r3, r0
 8013848:	461a      	mov	r2, r3
 801384a:	693b      	ldr	r3, [r7, #16]
 801384c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801384e:	693b      	ldr	r3, [r7, #16]
 8013850:	2200      	movs	r2, #0
 8013852:	741a      	strb	r2, [r3, #16]
 8013854:	2200      	movs	r2, #0
 8013856:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8013858:	693b      	ldr	r3, [r7, #16]
 801385a:	2200      	movs	r2, #0
 801385c:	749a      	strb	r2, [r3, #18]
 801385e:	2200      	movs	r2, #0
 8013860:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8013862:	697b      	ldr	r3, [r7, #20]
}
 8013864:	4618      	mov	r0, r3
 8013866:	3718      	adds	r7, #24
 8013868:	46bd      	mov	sp, r7
 801386a:	bd80      	pop	{r7, pc}
 801386c:	0801b9e0 	.word	0x0801b9e0
 8013870:	0801c0b8 	.word	0x0801c0b8
 8013874:	0801ba34 	.word	0x0801ba34

08013878 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8013878:	b5b0      	push	{r4, r5, r7, lr}
 801387a:	b08a      	sub	sp, #40	; 0x28
 801387c:	af04      	add	r7, sp, #16
 801387e:	60f8      	str	r0, [r7, #12]
 8013880:	607b      	str	r3, [r7, #4]
 8013882:	460b      	mov	r3, r1
 8013884:	817b      	strh	r3, [r7, #10]
 8013886:	4613      	mov	r3, r2
 8013888:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801388a:	68fb      	ldr	r3, [r7, #12]
 801388c:	2b00      	cmp	r3, #0
 801388e:	d106      	bne.n	801389e <tcp_output_alloc_header+0x26>
 8013890:	4b15      	ldr	r3, [pc, #84]	; (80138e8 <tcp_output_alloc_header+0x70>)
 8013892:	f240 7242 	movw	r2, #1858	; 0x742
 8013896:	4915      	ldr	r1, [pc, #84]	; (80138ec <tcp_output_alloc_header+0x74>)
 8013898:	4815      	ldr	r0, [pc, #84]	; (80138f0 <tcp_output_alloc_header+0x78>)
 801389a:	f005 ff4b 	bl	8019734 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801389e:	68fb      	ldr	r3, [r7, #12]
 80138a0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80138a2:	68fb      	ldr	r3, [r7, #12]
 80138a4:	8adb      	ldrh	r3, [r3, #22]
 80138a6:	68fa      	ldr	r2, [r7, #12]
 80138a8:	8b12      	ldrh	r2, [r2, #24]
 80138aa:	68f9      	ldr	r1, [r7, #12]
 80138ac:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 80138ae:	893d      	ldrh	r5, [r7, #8]
 80138b0:	897c      	ldrh	r4, [r7, #10]
 80138b2:	9103      	str	r1, [sp, #12]
 80138b4:	2110      	movs	r1, #16
 80138b6:	9102      	str	r1, [sp, #8]
 80138b8:	9201      	str	r2, [sp, #4]
 80138ba:	9300      	str	r3, [sp, #0]
 80138bc:	687b      	ldr	r3, [r7, #4]
 80138be:	462a      	mov	r2, r5
 80138c0:	4621      	mov	r1, r4
 80138c2:	f7ff ff67 	bl	8013794 <tcp_output_alloc_header_common>
 80138c6:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80138c8:	697b      	ldr	r3, [r7, #20]
 80138ca:	2b00      	cmp	r3, #0
 80138cc:	d006      	beq.n	80138dc <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80138ce:	68fb      	ldr	r3, [r7, #12]
 80138d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138d2:	68fa      	ldr	r2, [r7, #12]
 80138d4:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80138d6:	441a      	add	r2, r3
 80138d8:	68fb      	ldr	r3, [r7, #12]
 80138da:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 80138dc:	697b      	ldr	r3, [r7, #20]
}
 80138de:	4618      	mov	r0, r3
 80138e0:	3718      	adds	r7, #24
 80138e2:	46bd      	mov	sp, r7
 80138e4:	bdb0      	pop	{r4, r5, r7, pc}
 80138e6:	bf00      	nop
 80138e8:	0801b9e0 	.word	0x0801b9e0
 80138ec:	0801c0e8 	.word	0x0801c0e8
 80138f0:	0801ba34 	.word	0x0801ba34

080138f4 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80138f4:	b580      	push	{r7, lr}
 80138f6:	b088      	sub	sp, #32
 80138f8:	af00      	add	r7, sp, #0
 80138fa:	60f8      	str	r0, [r7, #12]
 80138fc:	60b9      	str	r1, [r7, #8]
 80138fe:	4611      	mov	r1, r2
 8013900:	461a      	mov	r2, r3
 8013902:	460b      	mov	r3, r1
 8013904:	71fb      	strb	r3, [r7, #7]
 8013906:	4613      	mov	r3, r2
 8013908:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801390a:	2300      	movs	r3, #0
 801390c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801390e:	68bb      	ldr	r3, [r7, #8]
 8013910:	2b00      	cmp	r3, #0
 8013912:	d106      	bne.n	8013922 <tcp_output_fill_options+0x2e>
 8013914:	4b13      	ldr	r3, [pc, #76]	; (8013964 <tcp_output_fill_options+0x70>)
 8013916:	f240 7256 	movw	r2, #1878	; 0x756
 801391a:	4913      	ldr	r1, [pc, #76]	; (8013968 <tcp_output_fill_options+0x74>)
 801391c:	4813      	ldr	r0, [pc, #76]	; (801396c <tcp_output_fill_options+0x78>)
 801391e:	f005 ff09 	bl	8019734 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8013922:	68bb      	ldr	r3, [r7, #8]
 8013924:	685b      	ldr	r3, [r3, #4]
 8013926:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8013928:	69bb      	ldr	r3, [r7, #24]
 801392a:	3314      	adds	r3, #20
 801392c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801392e:	69bb      	ldr	r3, [r7, #24]
 8013930:	f103 0214 	add.w	r2, r3, #20
 8013934:	8bfb      	ldrh	r3, [r7, #30]
 8013936:	009b      	lsls	r3, r3, #2
 8013938:	4619      	mov	r1, r3
 801393a:	79fb      	ldrb	r3, [r7, #7]
 801393c:	009b      	lsls	r3, r3, #2
 801393e:	f003 0304 	and.w	r3, r3, #4
 8013942:	440b      	add	r3, r1
 8013944:	4413      	add	r3, r2
 8013946:	697a      	ldr	r2, [r7, #20]
 8013948:	429a      	cmp	r2, r3
 801394a:	d006      	beq.n	801395a <tcp_output_fill_options+0x66>
 801394c:	4b05      	ldr	r3, [pc, #20]	; (8013964 <tcp_output_fill_options+0x70>)
 801394e:	f240 7275 	movw	r2, #1909	; 0x775
 8013952:	4907      	ldr	r1, [pc, #28]	; (8013970 <tcp_output_fill_options+0x7c>)
 8013954:	4805      	ldr	r0, [pc, #20]	; (801396c <tcp_output_fill_options+0x78>)
 8013956:	f005 feed 	bl	8019734 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801395a:	bf00      	nop
 801395c:	3720      	adds	r7, #32
 801395e:	46bd      	mov	sp, r7
 8013960:	bd80      	pop	{r7, pc}
 8013962:	bf00      	nop
 8013964:	0801b9e0 	.word	0x0801b9e0
 8013968:	0801c110 	.word	0x0801c110
 801396c:	0801ba34 	.word	0x0801ba34
 8013970:	0801c008 	.word	0x0801c008

08013974 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8013974:	b580      	push	{r7, lr}
 8013976:	b08a      	sub	sp, #40	; 0x28
 8013978:	af04      	add	r7, sp, #16
 801397a:	60f8      	str	r0, [r7, #12]
 801397c:	60b9      	str	r1, [r7, #8]
 801397e:	607a      	str	r2, [r7, #4]
 8013980:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8013982:	68bb      	ldr	r3, [r7, #8]
 8013984:	2b00      	cmp	r3, #0
 8013986:	d106      	bne.n	8013996 <tcp_output_control_segment+0x22>
 8013988:	4b1c      	ldr	r3, [pc, #112]	; (80139fc <tcp_output_control_segment+0x88>)
 801398a:	f240 7287 	movw	r2, #1927	; 0x787
 801398e:	491c      	ldr	r1, [pc, #112]	; (8013a00 <tcp_output_control_segment+0x8c>)
 8013990:	481c      	ldr	r0, [pc, #112]	; (8013a04 <tcp_output_control_segment+0x90>)
 8013992:	f005 fecf 	bl	8019734 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8013996:	683a      	ldr	r2, [r7, #0]
 8013998:	6879      	ldr	r1, [r7, #4]
 801399a:	68f8      	ldr	r0, [r7, #12]
 801399c:	f7fe ff40 	bl	8012820 <tcp_route>
 80139a0:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80139a2:	693b      	ldr	r3, [r7, #16]
 80139a4:	2b00      	cmp	r3, #0
 80139a6:	d102      	bne.n	80139ae <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80139a8:	23fc      	movs	r3, #252	; 0xfc
 80139aa:	75fb      	strb	r3, [r7, #23]
 80139ac:	e01c      	b.n	80139e8 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80139ae:	68fb      	ldr	r3, [r7, #12]
 80139b0:	2b00      	cmp	r3, #0
 80139b2:	d006      	beq.n	80139c2 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80139b4:	68fb      	ldr	r3, [r7, #12]
 80139b6:	7adb      	ldrb	r3, [r3, #11]
 80139b8:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80139ba:	68fb      	ldr	r3, [r7, #12]
 80139bc:	7a9b      	ldrb	r3, [r3, #10]
 80139be:	757b      	strb	r3, [r7, #21]
 80139c0:	e003      	b.n	80139ca <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80139c2:	23ff      	movs	r3, #255	; 0xff
 80139c4:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80139c6:	2300      	movs	r3, #0
 80139c8:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80139ca:	7dba      	ldrb	r2, [r7, #22]
 80139cc:	693b      	ldr	r3, [r7, #16]
 80139ce:	9302      	str	r3, [sp, #8]
 80139d0:	2306      	movs	r3, #6
 80139d2:	9301      	str	r3, [sp, #4]
 80139d4:	7d7b      	ldrb	r3, [r7, #21]
 80139d6:	9300      	str	r3, [sp, #0]
 80139d8:	4613      	mov	r3, r2
 80139da:	683a      	ldr	r2, [r7, #0]
 80139dc:	6879      	ldr	r1, [r7, #4]
 80139de:	68b8      	ldr	r0, [r7, #8]
 80139e0:	f004 f956 	bl	8017c90 <ip4_output_if>
 80139e4:	4603      	mov	r3, r0
 80139e6:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80139e8:	68b8      	ldr	r0, [r7, #8]
 80139ea:	f7fa fdc9 	bl	800e580 <pbuf_free>
  return err;
 80139ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80139f2:	4618      	mov	r0, r3
 80139f4:	3718      	adds	r7, #24
 80139f6:	46bd      	mov	sp, r7
 80139f8:	bd80      	pop	{r7, pc}
 80139fa:	bf00      	nop
 80139fc:	0801b9e0 	.word	0x0801b9e0
 8013a00:	0801c138 	.word	0x0801c138
 8013a04:	0801ba34 	.word	0x0801ba34

08013a08 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8013a08:	b590      	push	{r4, r7, lr}
 8013a0a:	b08b      	sub	sp, #44	; 0x2c
 8013a0c:	af04      	add	r7, sp, #16
 8013a0e:	60f8      	str	r0, [r7, #12]
 8013a10:	60b9      	str	r1, [r7, #8]
 8013a12:	607a      	str	r2, [r7, #4]
 8013a14:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8013a16:	683b      	ldr	r3, [r7, #0]
 8013a18:	2b00      	cmp	r3, #0
 8013a1a:	d106      	bne.n	8013a2a <tcp_rst+0x22>
 8013a1c:	4b1f      	ldr	r3, [pc, #124]	; (8013a9c <tcp_rst+0x94>)
 8013a1e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8013a22:	491f      	ldr	r1, [pc, #124]	; (8013aa0 <tcp_rst+0x98>)
 8013a24:	481f      	ldr	r0, [pc, #124]	; (8013aa4 <tcp_rst+0x9c>)
 8013a26:	f005 fe85 	bl	8019734 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8013a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a2c:	2b00      	cmp	r3, #0
 8013a2e:	d106      	bne.n	8013a3e <tcp_rst+0x36>
 8013a30:	4b1a      	ldr	r3, [pc, #104]	; (8013a9c <tcp_rst+0x94>)
 8013a32:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8013a36:	491c      	ldr	r1, [pc, #112]	; (8013aa8 <tcp_rst+0xa0>)
 8013a38:	481a      	ldr	r0, [pc, #104]	; (8013aa4 <tcp_rst+0x9c>)
 8013a3a:	f005 fe7b 	bl	8019734 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013a3e:	2300      	movs	r3, #0
 8013a40:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8013a42:	f246 0308 	movw	r3, #24584	; 0x6008
 8013a46:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8013a48:	7dfb      	ldrb	r3, [r7, #23]
 8013a4a:	b29c      	uxth	r4, r3
 8013a4c:	68b8      	ldr	r0, [r7, #8]
 8013a4e:	f7f9 f9f4 	bl	800ce3a <lwip_htonl>
 8013a52:	4602      	mov	r2, r0
 8013a54:	8abb      	ldrh	r3, [r7, #20]
 8013a56:	9303      	str	r3, [sp, #12]
 8013a58:	2314      	movs	r3, #20
 8013a5a:	9302      	str	r3, [sp, #8]
 8013a5c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8013a5e:	9301      	str	r3, [sp, #4]
 8013a60:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013a62:	9300      	str	r3, [sp, #0]
 8013a64:	4613      	mov	r3, r2
 8013a66:	2200      	movs	r2, #0
 8013a68:	4621      	mov	r1, r4
 8013a6a:	6878      	ldr	r0, [r7, #4]
 8013a6c:	f7ff fe92 	bl	8013794 <tcp_output_alloc_header_common>
 8013a70:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8013a72:	693b      	ldr	r3, [r7, #16]
 8013a74:	2b00      	cmp	r3, #0
 8013a76:	d00c      	beq.n	8013a92 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013a78:	7dfb      	ldrb	r3, [r7, #23]
 8013a7a:	2200      	movs	r2, #0
 8013a7c:	6939      	ldr	r1, [r7, #16]
 8013a7e:	68f8      	ldr	r0, [r7, #12]
 8013a80:	f7ff ff38 	bl	80138f4 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8013a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a86:	683a      	ldr	r2, [r7, #0]
 8013a88:	6939      	ldr	r1, [r7, #16]
 8013a8a:	68f8      	ldr	r0, [r7, #12]
 8013a8c:	f7ff ff72 	bl	8013974 <tcp_output_control_segment>
 8013a90:	e000      	b.n	8013a94 <tcp_rst+0x8c>
    return;
 8013a92:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8013a94:	371c      	adds	r7, #28
 8013a96:	46bd      	mov	sp, r7
 8013a98:	bd90      	pop	{r4, r7, pc}
 8013a9a:	bf00      	nop
 8013a9c:	0801b9e0 	.word	0x0801b9e0
 8013aa0:	0801c164 	.word	0x0801c164
 8013aa4:	0801ba34 	.word	0x0801ba34
 8013aa8:	0801c180 	.word	0x0801c180

08013aac <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8013aac:	b590      	push	{r4, r7, lr}
 8013aae:	b087      	sub	sp, #28
 8013ab0:	af00      	add	r7, sp, #0
 8013ab2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8013ab4:	2300      	movs	r3, #0
 8013ab6:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8013ab8:	2300      	movs	r3, #0
 8013aba:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8013abc:	687b      	ldr	r3, [r7, #4]
 8013abe:	2b00      	cmp	r3, #0
 8013ac0:	d106      	bne.n	8013ad0 <tcp_send_empty_ack+0x24>
 8013ac2:	4b28      	ldr	r3, [pc, #160]	; (8013b64 <tcp_send_empty_ack+0xb8>)
 8013ac4:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8013ac8:	4927      	ldr	r1, [pc, #156]	; (8013b68 <tcp_send_empty_ack+0xbc>)
 8013aca:	4828      	ldr	r0, [pc, #160]	; (8013b6c <tcp_send_empty_ack+0xc0>)
 8013acc:	f005 fe32 	bl	8019734 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013ad0:	7dfb      	ldrb	r3, [r7, #23]
 8013ad2:	009b      	lsls	r3, r3, #2
 8013ad4:	b2db      	uxtb	r3, r3
 8013ad6:	f003 0304 	and.w	r3, r3, #4
 8013ada:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8013adc:	7d7b      	ldrb	r3, [r7, #21]
 8013ade:	b29c      	uxth	r4, r3
 8013ae0:	687b      	ldr	r3, [r7, #4]
 8013ae2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013ae4:	4618      	mov	r0, r3
 8013ae6:	f7f9 f9a8 	bl	800ce3a <lwip_htonl>
 8013aea:	4603      	mov	r3, r0
 8013aec:	2200      	movs	r2, #0
 8013aee:	4621      	mov	r1, r4
 8013af0:	6878      	ldr	r0, [r7, #4]
 8013af2:	f7ff fec1 	bl	8013878 <tcp_output_alloc_header>
 8013af6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013af8:	693b      	ldr	r3, [r7, #16]
 8013afa:	2b00      	cmp	r3, #0
 8013afc:	d109      	bne.n	8013b12 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013afe:	687b      	ldr	r3, [r7, #4]
 8013b00:	8b5b      	ldrh	r3, [r3, #26]
 8013b02:	f043 0303 	orr.w	r3, r3, #3
 8013b06:	b29a      	uxth	r2, r3
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8013b0c:	f06f 0301 	mvn.w	r3, #1
 8013b10:	e023      	b.n	8013b5a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8013b12:	7dbb      	ldrb	r3, [r7, #22]
 8013b14:	7dfa      	ldrb	r2, [r7, #23]
 8013b16:	6939      	ldr	r1, [r7, #16]
 8013b18:	6878      	ldr	r0, [r7, #4]
 8013b1a:	f7ff feeb 	bl	80138f4 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013b1e:	687a      	ldr	r2, [r7, #4]
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	3304      	adds	r3, #4
 8013b24:	6939      	ldr	r1, [r7, #16]
 8013b26:	6878      	ldr	r0, [r7, #4]
 8013b28:	f7ff ff24 	bl	8013974 <tcp_output_control_segment>
 8013b2c:	4603      	mov	r3, r0
 8013b2e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8013b30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013b34:	2b00      	cmp	r3, #0
 8013b36:	d007      	beq.n	8013b48 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013b38:	687b      	ldr	r3, [r7, #4]
 8013b3a:	8b5b      	ldrh	r3, [r3, #26]
 8013b3c:	f043 0303 	orr.w	r3, r3, #3
 8013b40:	b29a      	uxth	r2, r3
 8013b42:	687b      	ldr	r3, [r7, #4]
 8013b44:	835a      	strh	r2, [r3, #26]
 8013b46:	e006      	b.n	8013b56 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013b48:	687b      	ldr	r3, [r7, #4]
 8013b4a:	8b5b      	ldrh	r3, [r3, #26]
 8013b4c:	f023 0303 	bic.w	r3, r3, #3
 8013b50:	b29a      	uxth	r2, r3
 8013b52:	687b      	ldr	r3, [r7, #4]
 8013b54:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8013b56:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013b5a:	4618      	mov	r0, r3
 8013b5c:	371c      	adds	r7, #28
 8013b5e:	46bd      	mov	sp, r7
 8013b60:	bd90      	pop	{r4, r7, pc}
 8013b62:	bf00      	nop
 8013b64:	0801b9e0 	.word	0x0801b9e0
 8013b68:	0801c19c 	.word	0x0801c19c
 8013b6c:	0801ba34 	.word	0x0801ba34

08013b70 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8013b70:	b590      	push	{r4, r7, lr}
 8013b72:	b087      	sub	sp, #28
 8013b74:	af00      	add	r7, sp, #0
 8013b76:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013b78:	2300      	movs	r3, #0
 8013b7a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8013b7c:	687b      	ldr	r3, [r7, #4]
 8013b7e:	2b00      	cmp	r3, #0
 8013b80:	d106      	bne.n	8013b90 <tcp_keepalive+0x20>
 8013b82:	4b18      	ldr	r3, [pc, #96]	; (8013be4 <tcp_keepalive+0x74>)
 8013b84:	f640 0224 	movw	r2, #2084	; 0x824
 8013b88:	4917      	ldr	r1, [pc, #92]	; (8013be8 <tcp_keepalive+0x78>)
 8013b8a:	4818      	ldr	r0, [pc, #96]	; (8013bec <tcp_keepalive+0x7c>)
 8013b8c:	f005 fdd2 	bl	8019734 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8013b90:	7dfb      	ldrb	r3, [r7, #23]
 8013b92:	b29c      	uxth	r4, r3
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013b98:	3b01      	subs	r3, #1
 8013b9a:	4618      	mov	r0, r3
 8013b9c:	f7f9 f94d 	bl	800ce3a <lwip_htonl>
 8013ba0:	4603      	mov	r3, r0
 8013ba2:	2200      	movs	r2, #0
 8013ba4:	4621      	mov	r1, r4
 8013ba6:	6878      	ldr	r0, [r7, #4]
 8013ba8:	f7ff fe66 	bl	8013878 <tcp_output_alloc_header>
 8013bac:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013bae:	693b      	ldr	r3, [r7, #16]
 8013bb0:	2b00      	cmp	r3, #0
 8013bb2:	d102      	bne.n	8013bba <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8013bb4:	f04f 33ff 	mov.w	r3, #4294967295
 8013bb8:	e010      	b.n	8013bdc <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013bba:	7dfb      	ldrb	r3, [r7, #23]
 8013bbc:	2200      	movs	r2, #0
 8013bbe:	6939      	ldr	r1, [r7, #16]
 8013bc0:	6878      	ldr	r0, [r7, #4]
 8013bc2:	f7ff fe97 	bl	80138f4 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013bc6:	687a      	ldr	r2, [r7, #4]
 8013bc8:	687b      	ldr	r3, [r7, #4]
 8013bca:	3304      	adds	r3, #4
 8013bcc:	6939      	ldr	r1, [r7, #16]
 8013bce:	6878      	ldr	r0, [r7, #4]
 8013bd0:	f7ff fed0 	bl	8013974 <tcp_output_control_segment>
 8013bd4:	4603      	mov	r3, r0
 8013bd6:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013bd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013bdc:	4618      	mov	r0, r3
 8013bde:	371c      	adds	r7, #28
 8013be0:	46bd      	mov	sp, r7
 8013be2:	bd90      	pop	{r4, r7, pc}
 8013be4:	0801b9e0 	.word	0x0801b9e0
 8013be8:	0801c1bc 	.word	0x0801c1bc
 8013bec:	0801ba34 	.word	0x0801ba34

08013bf0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8013bf0:	b590      	push	{r4, r7, lr}
 8013bf2:	b08b      	sub	sp, #44	; 0x2c
 8013bf4:	af00      	add	r7, sp, #0
 8013bf6:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013bf8:	2300      	movs	r3, #0
 8013bfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8013bfe:	687b      	ldr	r3, [r7, #4]
 8013c00:	2b00      	cmp	r3, #0
 8013c02:	d106      	bne.n	8013c12 <tcp_zero_window_probe+0x22>
 8013c04:	4b4c      	ldr	r3, [pc, #304]	; (8013d38 <tcp_zero_window_probe+0x148>)
 8013c06:	f640 024f 	movw	r2, #2127	; 0x84f
 8013c0a:	494c      	ldr	r1, [pc, #304]	; (8013d3c <tcp_zero_window_probe+0x14c>)
 8013c0c:	484c      	ldr	r0, [pc, #304]	; (8013d40 <tcp_zero_window_probe+0x150>)
 8013c0e:	f005 fd91 	bl	8019734 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8013c12:	687b      	ldr	r3, [r7, #4]
 8013c14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013c16:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8013c18:	6a3b      	ldr	r3, [r7, #32]
 8013c1a:	2b00      	cmp	r3, #0
 8013c1c:	d101      	bne.n	8013c22 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8013c1e:	2300      	movs	r3, #0
 8013c20:	e086      	b.n	8013d30 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8013c22:	687b      	ldr	r3, [r7, #4]
 8013c24:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8013c28:	2bff      	cmp	r3, #255	; 0xff
 8013c2a:	d007      	beq.n	8013c3c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8013c32:	3301      	adds	r3, #1
 8013c34:	b2da      	uxtb	r2, r3
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8013c3c:	6a3b      	ldr	r3, [r7, #32]
 8013c3e:	68db      	ldr	r3, [r3, #12]
 8013c40:	899b      	ldrh	r3, [r3, #12]
 8013c42:	b29b      	uxth	r3, r3
 8013c44:	4618      	mov	r0, r3
 8013c46:	f7f9 f8e3 	bl	800ce10 <lwip_htons>
 8013c4a:	4603      	mov	r3, r0
 8013c4c:	b2db      	uxtb	r3, r3
 8013c4e:	f003 0301 	and.w	r3, r3, #1
 8013c52:	2b00      	cmp	r3, #0
 8013c54:	d005      	beq.n	8013c62 <tcp_zero_window_probe+0x72>
 8013c56:	6a3b      	ldr	r3, [r7, #32]
 8013c58:	891b      	ldrh	r3, [r3, #8]
 8013c5a:	2b00      	cmp	r3, #0
 8013c5c:	d101      	bne.n	8013c62 <tcp_zero_window_probe+0x72>
 8013c5e:	2301      	movs	r3, #1
 8013c60:	e000      	b.n	8013c64 <tcp_zero_window_probe+0x74>
 8013c62:	2300      	movs	r3, #0
 8013c64:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8013c66:	7ffb      	ldrb	r3, [r7, #31]
 8013c68:	2b00      	cmp	r3, #0
 8013c6a:	bf0c      	ite	eq
 8013c6c:	2301      	moveq	r3, #1
 8013c6e:	2300      	movne	r3, #0
 8013c70:	b2db      	uxtb	r3, r3
 8013c72:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8013c74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013c78:	b299      	uxth	r1, r3
 8013c7a:	6a3b      	ldr	r3, [r7, #32]
 8013c7c:	68db      	ldr	r3, [r3, #12]
 8013c7e:	685b      	ldr	r3, [r3, #4]
 8013c80:	8bba      	ldrh	r2, [r7, #28]
 8013c82:	6878      	ldr	r0, [r7, #4]
 8013c84:	f7ff fdf8 	bl	8013878 <tcp_output_alloc_header>
 8013c88:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8013c8a:	69bb      	ldr	r3, [r7, #24]
 8013c8c:	2b00      	cmp	r3, #0
 8013c8e:	d102      	bne.n	8013c96 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8013c90:	f04f 33ff 	mov.w	r3, #4294967295
 8013c94:	e04c      	b.n	8013d30 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8013c96:	69bb      	ldr	r3, [r7, #24]
 8013c98:	685b      	ldr	r3, [r3, #4]
 8013c9a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8013c9c:	7ffb      	ldrb	r3, [r7, #31]
 8013c9e:	2b00      	cmp	r3, #0
 8013ca0:	d011      	beq.n	8013cc6 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8013ca2:	697b      	ldr	r3, [r7, #20]
 8013ca4:	899b      	ldrh	r3, [r3, #12]
 8013ca6:	b29b      	uxth	r3, r3
 8013ca8:	b21b      	sxth	r3, r3
 8013caa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8013cae:	b21c      	sxth	r4, r3
 8013cb0:	2011      	movs	r0, #17
 8013cb2:	f7f9 f8ad 	bl	800ce10 <lwip_htons>
 8013cb6:	4603      	mov	r3, r0
 8013cb8:	b21b      	sxth	r3, r3
 8013cba:	4323      	orrs	r3, r4
 8013cbc:	b21b      	sxth	r3, r3
 8013cbe:	b29a      	uxth	r2, r3
 8013cc0:	697b      	ldr	r3, [r7, #20]
 8013cc2:	819a      	strh	r2, [r3, #12]
 8013cc4:	e010      	b.n	8013ce8 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8013cc6:	69bb      	ldr	r3, [r7, #24]
 8013cc8:	685b      	ldr	r3, [r3, #4]
 8013cca:	3314      	adds	r3, #20
 8013ccc:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8013cce:	6a3b      	ldr	r3, [r7, #32]
 8013cd0:	6858      	ldr	r0, [r3, #4]
 8013cd2:	6a3b      	ldr	r3, [r7, #32]
 8013cd4:	685b      	ldr	r3, [r3, #4]
 8013cd6:	891a      	ldrh	r2, [r3, #8]
 8013cd8:	6a3b      	ldr	r3, [r7, #32]
 8013cda:	891b      	ldrh	r3, [r3, #8]
 8013cdc:	1ad3      	subs	r3, r2, r3
 8013cde:	b29b      	uxth	r3, r3
 8013ce0:	2201      	movs	r2, #1
 8013ce2:	6939      	ldr	r1, [r7, #16]
 8013ce4:	f7fa fe52 	bl	800e98c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8013ce8:	6a3b      	ldr	r3, [r7, #32]
 8013cea:	68db      	ldr	r3, [r3, #12]
 8013cec:	685b      	ldr	r3, [r3, #4]
 8013cee:	4618      	mov	r0, r3
 8013cf0:	f7f9 f8a3 	bl	800ce3a <lwip_htonl>
 8013cf4:	4603      	mov	r3, r0
 8013cf6:	3301      	adds	r3, #1
 8013cf8:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8013cfa:	687b      	ldr	r3, [r7, #4]
 8013cfc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013cfe:	68fb      	ldr	r3, [r7, #12]
 8013d00:	1ad3      	subs	r3, r2, r3
 8013d02:	2b00      	cmp	r3, #0
 8013d04:	da02      	bge.n	8013d0c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8013d06:	687b      	ldr	r3, [r7, #4]
 8013d08:	68fa      	ldr	r2, [r7, #12]
 8013d0a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013d0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013d10:	2200      	movs	r2, #0
 8013d12:	69b9      	ldr	r1, [r7, #24]
 8013d14:	6878      	ldr	r0, [r7, #4]
 8013d16:	f7ff fded 	bl	80138f4 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013d1a:	687a      	ldr	r2, [r7, #4]
 8013d1c:	687b      	ldr	r3, [r7, #4]
 8013d1e:	3304      	adds	r3, #4
 8013d20:	69b9      	ldr	r1, [r7, #24]
 8013d22:	6878      	ldr	r0, [r7, #4]
 8013d24:	f7ff fe26 	bl	8013974 <tcp_output_control_segment>
 8013d28:	4603      	mov	r3, r0
 8013d2a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013d2c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8013d30:	4618      	mov	r0, r3
 8013d32:	372c      	adds	r7, #44	; 0x2c
 8013d34:	46bd      	mov	sp, r7
 8013d36:	bd90      	pop	{r4, r7, pc}
 8013d38:	0801b9e0 	.word	0x0801b9e0
 8013d3c:	0801c1d8 	.word	0x0801c1d8
 8013d40:	0801ba34 	.word	0x0801ba34

08013d44 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8013d44:	b580      	push	{r7, lr}
 8013d46:	b082      	sub	sp, #8
 8013d48:	af00      	add	r7, sp, #0
 8013d4a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8013d4c:	f7fa ff0c 	bl	800eb68 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8013d50:	4b0a      	ldr	r3, [pc, #40]	; (8013d7c <tcpip_tcp_timer+0x38>)
 8013d52:	681b      	ldr	r3, [r3, #0]
 8013d54:	2b00      	cmp	r3, #0
 8013d56:	d103      	bne.n	8013d60 <tcpip_tcp_timer+0x1c>
 8013d58:	4b09      	ldr	r3, [pc, #36]	; (8013d80 <tcpip_tcp_timer+0x3c>)
 8013d5a:	681b      	ldr	r3, [r3, #0]
 8013d5c:	2b00      	cmp	r3, #0
 8013d5e:	d005      	beq.n	8013d6c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8013d60:	2200      	movs	r2, #0
 8013d62:	4908      	ldr	r1, [pc, #32]	; (8013d84 <tcpip_tcp_timer+0x40>)
 8013d64:	20fa      	movs	r0, #250	; 0xfa
 8013d66:	f000 f8f3 	bl	8013f50 <sys_timeout>
 8013d6a:	e003      	b.n	8013d74 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8013d6c:	4b06      	ldr	r3, [pc, #24]	; (8013d88 <tcpip_tcp_timer+0x44>)
 8013d6e:	2200      	movs	r2, #0
 8013d70:	601a      	str	r2, [r3, #0]
  }
}
 8013d72:	bf00      	nop
 8013d74:	bf00      	nop
 8013d76:	3708      	adds	r7, #8
 8013d78:	46bd      	mov	sp, r7
 8013d7a:	bd80      	pop	{r7, pc}
 8013d7c:	2001b660 	.word	0x2001b660
 8013d80:	2001b670 	.word	0x2001b670
 8013d84:	08013d45 	.word	0x08013d45
 8013d88:	20013878 	.word	0x20013878

08013d8c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8013d8c:	b580      	push	{r7, lr}
 8013d8e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8013d90:	4b0a      	ldr	r3, [pc, #40]	; (8013dbc <tcp_timer_needed+0x30>)
 8013d92:	681b      	ldr	r3, [r3, #0]
 8013d94:	2b00      	cmp	r3, #0
 8013d96:	d10f      	bne.n	8013db8 <tcp_timer_needed+0x2c>
 8013d98:	4b09      	ldr	r3, [pc, #36]	; (8013dc0 <tcp_timer_needed+0x34>)
 8013d9a:	681b      	ldr	r3, [r3, #0]
 8013d9c:	2b00      	cmp	r3, #0
 8013d9e:	d103      	bne.n	8013da8 <tcp_timer_needed+0x1c>
 8013da0:	4b08      	ldr	r3, [pc, #32]	; (8013dc4 <tcp_timer_needed+0x38>)
 8013da2:	681b      	ldr	r3, [r3, #0]
 8013da4:	2b00      	cmp	r3, #0
 8013da6:	d007      	beq.n	8013db8 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8013da8:	4b04      	ldr	r3, [pc, #16]	; (8013dbc <tcp_timer_needed+0x30>)
 8013daa:	2201      	movs	r2, #1
 8013dac:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8013dae:	2200      	movs	r2, #0
 8013db0:	4905      	ldr	r1, [pc, #20]	; (8013dc8 <tcp_timer_needed+0x3c>)
 8013db2:	20fa      	movs	r0, #250	; 0xfa
 8013db4:	f000 f8cc 	bl	8013f50 <sys_timeout>
  }
}
 8013db8:	bf00      	nop
 8013dba:	bd80      	pop	{r7, pc}
 8013dbc:	20013878 	.word	0x20013878
 8013dc0:	2001b660 	.word	0x2001b660
 8013dc4:	2001b670 	.word	0x2001b670
 8013dc8:	08013d45 	.word	0x08013d45

08013dcc <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8013dcc:	b580      	push	{r7, lr}
 8013dce:	b086      	sub	sp, #24
 8013dd0:	af00      	add	r7, sp, #0
 8013dd2:	60f8      	str	r0, [r7, #12]
 8013dd4:	60b9      	str	r1, [r7, #8]
 8013dd6:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8013dd8:	200a      	movs	r0, #10
 8013dda:	f7f9 fccf 	bl	800d77c <memp_malloc>
 8013dde:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8013de0:	693b      	ldr	r3, [r7, #16]
 8013de2:	2b00      	cmp	r3, #0
 8013de4:	d109      	bne.n	8013dfa <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8013de6:	693b      	ldr	r3, [r7, #16]
 8013de8:	2b00      	cmp	r3, #0
 8013dea:	d151      	bne.n	8013e90 <sys_timeout_abs+0xc4>
 8013dec:	4b2a      	ldr	r3, [pc, #168]	; (8013e98 <sys_timeout_abs+0xcc>)
 8013dee:	22be      	movs	r2, #190	; 0xbe
 8013df0:	492a      	ldr	r1, [pc, #168]	; (8013e9c <sys_timeout_abs+0xd0>)
 8013df2:	482b      	ldr	r0, [pc, #172]	; (8013ea0 <sys_timeout_abs+0xd4>)
 8013df4:	f005 fc9e 	bl	8019734 <iprintf>
    return;
 8013df8:	e04a      	b.n	8013e90 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8013dfa:	693b      	ldr	r3, [r7, #16]
 8013dfc:	2200      	movs	r2, #0
 8013dfe:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8013e00:	693b      	ldr	r3, [r7, #16]
 8013e02:	68ba      	ldr	r2, [r7, #8]
 8013e04:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8013e06:	693b      	ldr	r3, [r7, #16]
 8013e08:	687a      	ldr	r2, [r7, #4]
 8013e0a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8013e0c:	693b      	ldr	r3, [r7, #16]
 8013e0e:	68fa      	ldr	r2, [r7, #12]
 8013e10:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8013e12:	4b24      	ldr	r3, [pc, #144]	; (8013ea4 <sys_timeout_abs+0xd8>)
 8013e14:	681b      	ldr	r3, [r3, #0]
 8013e16:	2b00      	cmp	r3, #0
 8013e18:	d103      	bne.n	8013e22 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8013e1a:	4a22      	ldr	r2, [pc, #136]	; (8013ea4 <sys_timeout_abs+0xd8>)
 8013e1c:	693b      	ldr	r3, [r7, #16]
 8013e1e:	6013      	str	r3, [r2, #0]
    return;
 8013e20:	e037      	b.n	8013e92 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8013e22:	693b      	ldr	r3, [r7, #16]
 8013e24:	685a      	ldr	r2, [r3, #4]
 8013e26:	4b1f      	ldr	r3, [pc, #124]	; (8013ea4 <sys_timeout_abs+0xd8>)
 8013e28:	681b      	ldr	r3, [r3, #0]
 8013e2a:	685b      	ldr	r3, [r3, #4]
 8013e2c:	1ad3      	subs	r3, r2, r3
 8013e2e:	0fdb      	lsrs	r3, r3, #31
 8013e30:	f003 0301 	and.w	r3, r3, #1
 8013e34:	b2db      	uxtb	r3, r3
 8013e36:	2b00      	cmp	r3, #0
 8013e38:	d007      	beq.n	8013e4a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8013e3a:	4b1a      	ldr	r3, [pc, #104]	; (8013ea4 <sys_timeout_abs+0xd8>)
 8013e3c:	681a      	ldr	r2, [r3, #0]
 8013e3e:	693b      	ldr	r3, [r7, #16]
 8013e40:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8013e42:	4a18      	ldr	r2, [pc, #96]	; (8013ea4 <sys_timeout_abs+0xd8>)
 8013e44:	693b      	ldr	r3, [r7, #16]
 8013e46:	6013      	str	r3, [r2, #0]
 8013e48:	e023      	b.n	8013e92 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8013e4a:	4b16      	ldr	r3, [pc, #88]	; (8013ea4 <sys_timeout_abs+0xd8>)
 8013e4c:	681b      	ldr	r3, [r3, #0]
 8013e4e:	617b      	str	r3, [r7, #20]
 8013e50:	e01a      	b.n	8013e88 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8013e52:	697b      	ldr	r3, [r7, #20]
 8013e54:	681b      	ldr	r3, [r3, #0]
 8013e56:	2b00      	cmp	r3, #0
 8013e58:	d00b      	beq.n	8013e72 <sys_timeout_abs+0xa6>
 8013e5a:	693b      	ldr	r3, [r7, #16]
 8013e5c:	685a      	ldr	r2, [r3, #4]
 8013e5e:	697b      	ldr	r3, [r7, #20]
 8013e60:	681b      	ldr	r3, [r3, #0]
 8013e62:	685b      	ldr	r3, [r3, #4]
 8013e64:	1ad3      	subs	r3, r2, r3
 8013e66:	0fdb      	lsrs	r3, r3, #31
 8013e68:	f003 0301 	and.w	r3, r3, #1
 8013e6c:	b2db      	uxtb	r3, r3
 8013e6e:	2b00      	cmp	r3, #0
 8013e70:	d007      	beq.n	8013e82 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8013e72:	697b      	ldr	r3, [r7, #20]
 8013e74:	681a      	ldr	r2, [r3, #0]
 8013e76:	693b      	ldr	r3, [r7, #16]
 8013e78:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8013e7a:	697b      	ldr	r3, [r7, #20]
 8013e7c:	693a      	ldr	r2, [r7, #16]
 8013e7e:	601a      	str	r2, [r3, #0]
        break;
 8013e80:	e007      	b.n	8013e92 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8013e82:	697b      	ldr	r3, [r7, #20]
 8013e84:	681b      	ldr	r3, [r3, #0]
 8013e86:	617b      	str	r3, [r7, #20]
 8013e88:	697b      	ldr	r3, [r7, #20]
 8013e8a:	2b00      	cmp	r3, #0
 8013e8c:	d1e1      	bne.n	8013e52 <sys_timeout_abs+0x86>
 8013e8e:	e000      	b.n	8013e92 <sys_timeout_abs+0xc6>
    return;
 8013e90:	bf00      	nop
      }
    }
  }
}
 8013e92:	3718      	adds	r7, #24
 8013e94:	46bd      	mov	sp, r7
 8013e96:	bd80      	pop	{r7, pc}
 8013e98:	0801c1fc 	.word	0x0801c1fc
 8013e9c:	0801c230 	.word	0x0801c230
 8013ea0:	0801c270 	.word	0x0801c270
 8013ea4:	20013870 	.word	0x20013870

08013ea8 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8013ea8:	b580      	push	{r7, lr}
 8013eaa:	b086      	sub	sp, #24
 8013eac:	af00      	add	r7, sp, #0
 8013eae:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8013eb0:	687b      	ldr	r3, [r7, #4]
 8013eb2:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8013eb4:	697b      	ldr	r3, [r7, #20]
 8013eb6:	685b      	ldr	r3, [r3, #4]
 8013eb8:	4798      	blx	r3

  now = sys_now();
 8013eba:	f7f4 fe6f 	bl	8008b9c <sys_now>
 8013ebe:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8013ec0:	697b      	ldr	r3, [r7, #20]
 8013ec2:	681a      	ldr	r2, [r3, #0]
 8013ec4:	4b0f      	ldr	r3, [pc, #60]	; (8013f04 <lwip_cyclic_timer+0x5c>)
 8013ec6:	681b      	ldr	r3, [r3, #0]
 8013ec8:	4413      	add	r3, r2
 8013eca:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8013ecc:	68fa      	ldr	r2, [r7, #12]
 8013ece:	693b      	ldr	r3, [r7, #16]
 8013ed0:	1ad3      	subs	r3, r2, r3
 8013ed2:	0fdb      	lsrs	r3, r3, #31
 8013ed4:	f003 0301 	and.w	r3, r3, #1
 8013ed8:	b2db      	uxtb	r3, r3
 8013eda:	2b00      	cmp	r3, #0
 8013edc:	d009      	beq.n	8013ef2 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8013ede:	697b      	ldr	r3, [r7, #20]
 8013ee0:	681a      	ldr	r2, [r3, #0]
 8013ee2:	693b      	ldr	r3, [r7, #16]
 8013ee4:	4413      	add	r3, r2
 8013ee6:	687a      	ldr	r2, [r7, #4]
 8013ee8:	4907      	ldr	r1, [pc, #28]	; (8013f08 <lwip_cyclic_timer+0x60>)
 8013eea:	4618      	mov	r0, r3
 8013eec:	f7ff ff6e 	bl	8013dcc <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8013ef0:	e004      	b.n	8013efc <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8013ef2:	687a      	ldr	r2, [r7, #4]
 8013ef4:	4904      	ldr	r1, [pc, #16]	; (8013f08 <lwip_cyclic_timer+0x60>)
 8013ef6:	68f8      	ldr	r0, [r7, #12]
 8013ef8:	f7ff ff68 	bl	8013dcc <sys_timeout_abs>
}
 8013efc:	bf00      	nop
 8013efe:	3718      	adds	r7, #24
 8013f00:	46bd      	mov	sp, r7
 8013f02:	bd80      	pop	{r7, pc}
 8013f04:	20013874 	.word	0x20013874
 8013f08:	08013ea9 	.word	0x08013ea9

08013f0c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8013f0c:	b580      	push	{r7, lr}
 8013f0e:	b082      	sub	sp, #8
 8013f10:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013f12:	2301      	movs	r3, #1
 8013f14:	607b      	str	r3, [r7, #4]
 8013f16:	e00e      	b.n	8013f36 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8013f18:	4a0b      	ldr	r2, [pc, #44]	; (8013f48 <sys_timeouts_init+0x3c>)
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8013f20:	687b      	ldr	r3, [r7, #4]
 8013f22:	00db      	lsls	r3, r3, #3
 8013f24:	4a08      	ldr	r2, [pc, #32]	; (8013f48 <sys_timeouts_init+0x3c>)
 8013f26:	4413      	add	r3, r2
 8013f28:	461a      	mov	r2, r3
 8013f2a:	4908      	ldr	r1, [pc, #32]	; (8013f4c <sys_timeouts_init+0x40>)
 8013f2c:	f000 f810 	bl	8013f50 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013f30:	687b      	ldr	r3, [r7, #4]
 8013f32:	3301      	adds	r3, #1
 8013f34:	607b      	str	r3, [r7, #4]
 8013f36:	687b      	ldr	r3, [r7, #4]
 8013f38:	2b04      	cmp	r3, #4
 8013f3a:	d9ed      	bls.n	8013f18 <sys_timeouts_init+0xc>
  }
}
 8013f3c:	bf00      	nop
 8013f3e:	bf00      	nop
 8013f40:	3708      	adds	r7, #8
 8013f42:	46bd      	mov	sp, r7
 8013f44:	bd80      	pop	{r7, pc}
 8013f46:	bf00      	nop
 8013f48:	0801d230 	.word	0x0801d230
 8013f4c:	08013ea9 	.word	0x08013ea9

08013f50 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8013f50:	b580      	push	{r7, lr}
 8013f52:	b086      	sub	sp, #24
 8013f54:	af00      	add	r7, sp, #0
 8013f56:	60f8      	str	r0, [r7, #12]
 8013f58:	60b9      	str	r1, [r7, #8]
 8013f5a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8013f5c:	68fb      	ldr	r3, [r7, #12]
 8013f5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013f62:	d306      	bcc.n	8013f72 <sys_timeout+0x22>
 8013f64:	4b0a      	ldr	r3, [pc, #40]	; (8013f90 <sys_timeout+0x40>)
 8013f66:	f240 1229 	movw	r2, #297	; 0x129
 8013f6a:	490a      	ldr	r1, [pc, #40]	; (8013f94 <sys_timeout+0x44>)
 8013f6c:	480a      	ldr	r0, [pc, #40]	; (8013f98 <sys_timeout+0x48>)
 8013f6e:	f005 fbe1 	bl	8019734 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8013f72:	f7f4 fe13 	bl	8008b9c <sys_now>
 8013f76:	4602      	mov	r2, r0
 8013f78:	68fb      	ldr	r3, [r7, #12]
 8013f7a:	4413      	add	r3, r2
 8013f7c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8013f7e:	687a      	ldr	r2, [r7, #4]
 8013f80:	68b9      	ldr	r1, [r7, #8]
 8013f82:	6978      	ldr	r0, [r7, #20]
 8013f84:	f7ff ff22 	bl	8013dcc <sys_timeout_abs>
#endif
}
 8013f88:	bf00      	nop
 8013f8a:	3718      	adds	r7, #24
 8013f8c:	46bd      	mov	sp, r7
 8013f8e:	bd80      	pop	{r7, pc}
 8013f90:	0801c1fc 	.word	0x0801c1fc
 8013f94:	0801c298 	.word	0x0801c298
 8013f98:	0801c270 	.word	0x0801c270

08013f9c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8013f9c:	b580      	push	{r7, lr}
 8013f9e:	b084      	sub	sp, #16
 8013fa0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8013fa2:	f7f4 fdfb 	bl	8008b9c <sys_now>
 8013fa6:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8013fa8:	4b17      	ldr	r3, [pc, #92]	; (8014008 <sys_check_timeouts+0x6c>)
 8013faa:	681b      	ldr	r3, [r3, #0]
 8013fac:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8013fae:	68bb      	ldr	r3, [r7, #8]
 8013fb0:	2b00      	cmp	r3, #0
 8013fb2:	d022      	beq.n	8013ffa <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8013fb4:	68bb      	ldr	r3, [r7, #8]
 8013fb6:	685b      	ldr	r3, [r3, #4]
 8013fb8:	68fa      	ldr	r2, [r7, #12]
 8013fba:	1ad3      	subs	r3, r2, r3
 8013fbc:	0fdb      	lsrs	r3, r3, #31
 8013fbe:	f003 0301 	and.w	r3, r3, #1
 8013fc2:	b2db      	uxtb	r3, r3
 8013fc4:	2b00      	cmp	r3, #0
 8013fc6:	d11a      	bne.n	8013ffe <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8013fc8:	68bb      	ldr	r3, [r7, #8]
 8013fca:	681b      	ldr	r3, [r3, #0]
 8013fcc:	4a0e      	ldr	r2, [pc, #56]	; (8014008 <sys_check_timeouts+0x6c>)
 8013fce:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8013fd0:	68bb      	ldr	r3, [r7, #8]
 8013fd2:	689b      	ldr	r3, [r3, #8]
 8013fd4:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8013fd6:	68bb      	ldr	r3, [r7, #8]
 8013fd8:	68db      	ldr	r3, [r3, #12]
 8013fda:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8013fdc:	68bb      	ldr	r3, [r7, #8]
 8013fde:	685b      	ldr	r3, [r3, #4]
 8013fe0:	4a0a      	ldr	r2, [pc, #40]	; (801400c <sys_check_timeouts+0x70>)
 8013fe2:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8013fe4:	68b9      	ldr	r1, [r7, #8]
 8013fe6:	200a      	movs	r0, #10
 8013fe8:	f7f9 fc1a 	bl	800d820 <memp_free>
    if (handler != NULL) {
 8013fec:	687b      	ldr	r3, [r7, #4]
 8013fee:	2b00      	cmp	r3, #0
 8013ff0:	d0da      	beq.n	8013fa8 <sys_check_timeouts+0xc>
      handler(arg);
 8013ff2:	687b      	ldr	r3, [r7, #4]
 8013ff4:	6838      	ldr	r0, [r7, #0]
 8013ff6:	4798      	blx	r3
  do {
 8013ff8:	e7d6      	b.n	8013fa8 <sys_check_timeouts+0xc>
      return;
 8013ffa:	bf00      	nop
 8013ffc:	e000      	b.n	8014000 <sys_check_timeouts+0x64>
      return;
 8013ffe:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8014000:	3710      	adds	r7, #16
 8014002:	46bd      	mov	sp, r7
 8014004:	bd80      	pop	{r7, pc}
 8014006:	bf00      	nop
 8014008:	20013870 	.word	0x20013870
 801400c:	20013874 	.word	0x20013874

08014010 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8014010:	b580      	push	{r7, lr}
 8014012:	b082      	sub	sp, #8
 8014014:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8014016:	4b16      	ldr	r3, [pc, #88]	; (8014070 <sys_timeouts_sleeptime+0x60>)
 8014018:	681b      	ldr	r3, [r3, #0]
 801401a:	2b00      	cmp	r3, #0
 801401c:	d102      	bne.n	8014024 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801401e:	f04f 33ff 	mov.w	r3, #4294967295
 8014022:	e020      	b.n	8014066 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8014024:	f7f4 fdba 	bl	8008b9c <sys_now>
 8014028:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801402a:	4b11      	ldr	r3, [pc, #68]	; (8014070 <sys_timeouts_sleeptime+0x60>)
 801402c:	681b      	ldr	r3, [r3, #0]
 801402e:	685a      	ldr	r2, [r3, #4]
 8014030:	687b      	ldr	r3, [r7, #4]
 8014032:	1ad3      	subs	r3, r2, r3
 8014034:	0fdb      	lsrs	r3, r3, #31
 8014036:	f003 0301 	and.w	r3, r3, #1
 801403a:	b2db      	uxtb	r3, r3
 801403c:	2b00      	cmp	r3, #0
 801403e:	d001      	beq.n	8014044 <sys_timeouts_sleeptime+0x34>
    return 0;
 8014040:	2300      	movs	r3, #0
 8014042:	e010      	b.n	8014066 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8014044:	4b0a      	ldr	r3, [pc, #40]	; (8014070 <sys_timeouts_sleeptime+0x60>)
 8014046:	681b      	ldr	r3, [r3, #0]
 8014048:	685a      	ldr	r2, [r3, #4]
 801404a:	687b      	ldr	r3, [r7, #4]
 801404c:	1ad3      	subs	r3, r2, r3
 801404e:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8014050:	683b      	ldr	r3, [r7, #0]
 8014052:	2b00      	cmp	r3, #0
 8014054:	da06      	bge.n	8014064 <sys_timeouts_sleeptime+0x54>
 8014056:	4b07      	ldr	r3, [pc, #28]	; (8014074 <sys_timeouts_sleeptime+0x64>)
 8014058:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 801405c:	4906      	ldr	r1, [pc, #24]	; (8014078 <sys_timeouts_sleeptime+0x68>)
 801405e:	4807      	ldr	r0, [pc, #28]	; (801407c <sys_timeouts_sleeptime+0x6c>)
 8014060:	f005 fb68 	bl	8019734 <iprintf>
    return ret;
 8014064:	683b      	ldr	r3, [r7, #0]
  }
}
 8014066:	4618      	mov	r0, r3
 8014068:	3708      	adds	r7, #8
 801406a:	46bd      	mov	sp, r7
 801406c:	bd80      	pop	{r7, pc}
 801406e:	bf00      	nop
 8014070:	20013870 	.word	0x20013870
 8014074:	0801c1fc 	.word	0x0801c1fc
 8014078:	0801c2d0 	.word	0x0801c2d0
 801407c:	0801c270 	.word	0x0801c270

08014080 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8014080:	b580      	push	{r7, lr}
 8014082:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8014084:	f005 fbe4 	bl	8019850 <rand>
 8014088:	4603      	mov	r3, r0
 801408a:	b29b      	uxth	r3, r3
 801408c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8014090:	b29b      	uxth	r3, r3
 8014092:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8014096:	b29a      	uxth	r2, r3
 8014098:	4b01      	ldr	r3, [pc, #4]	; (80140a0 <udp_init+0x20>)
 801409a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801409c:	bf00      	nop
 801409e:	bd80      	pop	{r7, pc}
 80140a0:	20000018 	.word	0x20000018

080140a4 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80140a4:	b480      	push	{r7}
 80140a6:	b083      	sub	sp, #12
 80140a8:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80140aa:	2300      	movs	r3, #0
 80140ac:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80140ae:	4b17      	ldr	r3, [pc, #92]	; (801410c <udp_new_port+0x68>)
 80140b0:	881b      	ldrh	r3, [r3, #0]
 80140b2:	1c5a      	adds	r2, r3, #1
 80140b4:	b291      	uxth	r1, r2
 80140b6:	4a15      	ldr	r2, [pc, #84]	; (801410c <udp_new_port+0x68>)
 80140b8:	8011      	strh	r1, [r2, #0]
 80140ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80140be:	4293      	cmp	r3, r2
 80140c0:	d103      	bne.n	80140ca <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80140c2:	4b12      	ldr	r3, [pc, #72]	; (801410c <udp_new_port+0x68>)
 80140c4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80140c8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80140ca:	4b11      	ldr	r3, [pc, #68]	; (8014110 <udp_new_port+0x6c>)
 80140cc:	681b      	ldr	r3, [r3, #0]
 80140ce:	603b      	str	r3, [r7, #0]
 80140d0:	e011      	b.n	80140f6 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80140d2:	683b      	ldr	r3, [r7, #0]
 80140d4:	8a5a      	ldrh	r2, [r3, #18]
 80140d6:	4b0d      	ldr	r3, [pc, #52]	; (801410c <udp_new_port+0x68>)
 80140d8:	881b      	ldrh	r3, [r3, #0]
 80140da:	429a      	cmp	r2, r3
 80140dc:	d108      	bne.n	80140f0 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80140de:	88fb      	ldrh	r3, [r7, #6]
 80140e0:	3301      	adds	r3, #1
 80140e2:	80fb      	strh	r3, [r7, #6]
 80140e4:	88fb      	ldrh	r3, [r7, #6]
 80140e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80140ea:	d3e0      	bcc.n	80140ae <udp_new_port+0xa>
        return 0;
 80140ec:	2300      	movs	r3, #0
 80140ee:	e007      	b.n	8014100 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80140f0:	683b      	ldr	r3, [r7, #0]
 80140f2:	68db      	ldr	r3, [r3, #12]
 80140f4:	603b      	str	r3, [r7, #0]
 80140f6:	683b      	ldr	r3, [r7, #0]
 80140f8:	2b00      	cmp	r3, #0
 80140fa:	d1ea      	bne.n	80140d2 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80140fc:	4b03      	ldr	r3, [pc, #12]	; (801410c <udp_new_port+0x68>)
 80140fe:	881b      	ldrh	r3, [r3, #0]
}
 8014100:	4618      	mov	r0, r3
 8014102:	370c      	adds	r7, #12
 8014104:	46bd      	mov	sp, r7
 8014106:	f85d 7b04 	ldr.w	r7, [sp], #4
 801410a:	4770      	bx	lr
 801410c:	20000018 	.word	0x20000018
 8014110:	2001b678 	.word	0x2001b678

08014114 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8014114:	b580      	push	{r7, lr}
 8014116:	b084      	sub	sp, #16
 8014118:	af00      	add	r7, sp, #0
 801411a:	60f8      	str	r0, [r7, #12]
 801411c:	60b9      	str	r1, [r7, #8]
 801411e:	4613      	mov	r3, r2
 8014120:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8014122:	68fb      	ldr	r3, [r7, #12]
 8014124:	2b00      	cmp	r3, #0
 8014126:	d105      	bne.n	8014134 <udp_input_local_match+0x20>
 8014128:	4b27      	ldr	r3, [pc, #156]	; (80141c8 <udp_input_local_match+0xb4>)
 801412a:	2287      	movs	r2, #135	; 0x87
 801412c:	4927      	ldr	r1, [pc, #156]	; (80141cc <udp_input_local_match+0xb8>)
 801412e:	4828      	ldr	r0, [pc, #160]	; (80141d0 <udp_input_local_match+0xbc>)
 8014130:	f005 fb00 	bl	8019734 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8014134:	68bb      	ldr	r3, [r7, #8]
 8014136:	2b00      	cmp	r3, #0
 8014138:	d105      	bne.n	8014146 <udp_input_local_match+0x32>
 801413a:	4b23      	ldr	r3, [pc, #140]	; (80141c8 <udp_input_local_match+0xb4>)
 801413c:	2288      	movs	r2, #136	; 0x88
 801413e:	4925      	ldr	r1, [pc, #148]	; (80141d4 <udp_input_local_match+0xc0>)
 8014140:	4823      	ldr	r0, [pc, #140]	; (80141d0 <udp_input_local_match+0xbc>)
 8014142:	f005 faf7 	bl	8019734 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014146:	68fb      	ldr	r3, [r7, #12]
 8014148:	7a1b      	ldrb	r3, [r3, #8]
 801414a:	2b00      	cmp	r3, #0
 801414c:	d00b      	beq.n	8014166 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801414e:	68fb      	ldr	r3, [r7, #12]
 8014150:	7a1a      	ldrb	r2, [r3, #8]
 8014152:	4b21      	ldr	r3, [pc, #132]	; (80141d8 <udp_input_local_match+0xc4>)
 8014154:	685b      	ldr	r3, [r3, #4]
 8014156:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801415a:	3301      	adds	r3, #1
 801415c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801415e:	429a      	cmp	r2, r3
 8014160:	d001      	beq.n	8014166 <udp_input_local_match+0x52>
    return 0;
 8014162:	2300      	movs	r3, #0
 8014164:	e02b      	b.n	80141be <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8014166:	79fb      	ldrb	r3, [r7, #7]
 8014168:	2b00      	cmp	r3, #0
 801416a:	d018      	beq.n	801419e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801416c:	68fb      	ldr	r3, [r7, #12]
 801416e:	2b00      	cmp	r3, #0
 8014170:	d013      	beq.n	801419a <udp_input_local_match+0x86>
 8014172:	68fb      	ldr	r3, [r7, #12]
 8014174:	681b      	ldr	r3, [r3, #0]
 8014176:	2b00      	cmp	r3, #0
 8014178:	d00f      	beq.n	801419a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801417a:	4b17      	ldr	r3, [pc, #92]	; (80141d8 <udp_input_local_match+0xc4>)
 801417c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801417e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014182:	d00a      	beq.n	801419a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8014184:	68fb      	ldr	r3, [r7, #12]
 8014186:	681a      	ldr	r2, [r3, #0]
 8014188:	4b13      	ldr	r3, [pc, #76]	; (80141d8 <udp_input_local_match+0xc4>)
 801418a:	695b      	ldr	r3, [r3, #20]
 801418c:	405a      	eors	r2, r3
 801418e:	68bb      	ldr	r3, [r7, #8]
 8014190:	3308      	adds	r3, #8
 8014192:	681b      	ldr	r3, [r3, #0]
 8014194:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8014196:	2b00      	cmp	r3, #0
 8014198:	d110      	bne.n	80141bc <udp_input_local_match+0xa8>
          return 1;
 801419a:	2301      	movs	r3, #1
 801419c:	e00f      	b.n	80141be <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801419e:	68fb      	ldr	r3, [r7, #12]
 80141a0:	2b00      	cmp	r3, #0
 80141a2:	d009      	beq.n	80141b8 <udp_input_local_match+0xa4>
 80141a4:	68fb      	ldr	r3, [r7, #12]
 80141a6:	681b      	ldr	r3, [r3, #0]
 80141a8:	2b00      	cmp	r3, #0
 80141aa:	d005      	beq.n	80141b8 <udp_input_local_match+0xa4>
 80141ac:	68fb      	ldr	r3, [r7, #12]
 80141ae:	681a      	ldr	r2, [r3, #0]
 80141b0:	4b09      	ldr	r3, [pc, #36]	; (80141d8 <udp_input_local_match+0xc4>)
 80141b2:	695b      	ldr	r3, [r3, #20]
 80141b4:	429a      	cmp	r2, r3
 80141b6:	d101      	bne.n	80141bc <udp_input_local_match+0xa8>
        return 1;
 80141b8:	2301      	movs	r3, #1
 80141ba:	e000      	b.n	80141be <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80141bc:	2300      	movs	r3, #0
}
 80141be:	4618      	mov	r0, r3
 80141c0:	3710      	adds	r7, #16
 80141c2:	46bd      	mov	sp, r7
 80141c4:	bd80      	pop	{r7, pc}
 80141c6:	bf00      	nop
 80141c8:	0801c2e4 	.word	0x0801c2e4
 80141cc:	0801c314 	.word	0x0801c314
 80141d0:	0801c338 	.word	0x0801c338
 80141d4:	0801c360 	.word	0x0801c360
 80141d8:	2001716c 	.word	0x2001716c

080141dc <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80141dc:	b590      	push	{r4, r7, lr}
 80141de:	b08d      	sub	sp, #52	; 0x34
 80141e0:	af02      	add	r7, sp, #8
 80141e2:	6078      	str	r0, [r7, #4]
 80141e4:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80141e6:	2300      	movs	r3, #0
 80141e8:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80141ea:	687b      	ldr	r3, [r7, #4]
 80141ec:	2b00      	cmp	r3, #0
 80141ee:	d105      	bne.n	80141fc <udp_input+0x20>
 80141f0:	4b7c      	ldr	r3, [pc, #496]	; (80143e4 <udp_input+0x208>)
 80141f2:	22cf      	movs	r2, #207	; 0xcf
 80141f4:	497c      	ldr	r1, [pc, #496]	; (80143e8 <udp_input+0x20c>)
 80141f6:	487d      	ldr	r0, [pc, #500]	; (80143ec <udp_input+0x210>)
 80141f8:	f005 fa9c 	bl	8019734 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80141fc:	683b      	ldr	r3, [r7, #0]
 80141fe:	2b00      	cmp	r3, #0
 8014200:	d105      	bne.n	801420e <udp_input+0x32>
 8014202:	4b78      	ldr	r3, [pc, #480]	; (80143e4 <udp_input+0x208>)
 8014204:	22d0      	movs	r2, #208	; 0xd0
 8014206:	497a      	ldr	r1, [pc, #488]	; (80143f0 <udp_input+0x214>)
 8014208:	4878      	ldr	r0, [pc, #480]	; (80143ec <udp_input+0x210>)
 801420a:	f005 fa93 	bl	8019734 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801420e:	687b      	ldr	r3, [r7, #4]
 8014210:	895b      	ldrh	r3, [r3, #10]
 8014212:	2b07      	cmp	r3, #7
 8014214:	d803      	bhi.n	801421e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8014216:	6878      	ldr	r0, [r7, #4]
 8014218:	f7fa f9b2 	bl	800e580 <pbuf_free>
    goto end;
 801421c:	e0de      	b.n	80143dc <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801421e:	687b      	ldr	r3, [r7, #4]
 8014220:	685b      	ldr	r3, [r3, #4]
 8014222:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8014224:	4b73      	ldr	r3, [pc, #460]	; (80143f4 <udp_input+0x218>)
 8014226:	695b      	ldr	r3, [r3, #20]
 8014228:	4a72      	ldr	r2, [pc, #456]	; (80143f4 <udp_input+0x218>)
 801422a:	6812      	ldr	r2, [r2, #0]
 801422c:	4611      	mov	r1, r2
 801422e:	4618      	mov	r0, r3
 8014230:	f003 fe06 	bl	8017e40 <ip4_addr_isbroadcast_u32>
 8014234:	4603      	mov	r3, r0
 8014236:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8014238:	697b      	ldr	r3, [r7, #20]
 801423a:	881b      	ldrh	r3, [r3, #0]
 801423c:	b29b      	uxth	r3, r3
 801423e:	4618      	mov	r0, r3
 8014240:	f7f8 fde6 	bl	800ce10 <lwip_htons>
 8014244:	4603      	mov	r3, r0
 8014246:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8014248:	697b      	ldr	r3, [r7, #20]
 801424a:	885b      	ldrh	r3, [r3, #2]
 801424c:	b29b      	uxth	r3, r3
 801424e:	4618      	mov	r0, r3
 8014250:	f7f8 fdde 	bl	800ce10 <lwip_htons>
 8014254:	4603      	mov	r3, r0
 8014256:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8014258:	2300      	movs	r3, #0
 801425a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801425c:	2300      	movs	r3, #0
 801425e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8014260:	2300      	movs	r3, #0
 8014262:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014264:	4b64      	ldr	r3, [pc, #400]	; (80143f8 <udp_input+0x21c>)
 8014266:	681b      	ldr	r3, [r3, #0]
 8014268:	627b      	str	r3, [r7, #36]	; 0x24
 801426a:	e054      	b.n	8014316 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801426c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801426e:	8a5b      	ldrh	r3, [r3, #18]
 8014270:	89fa      	ldrh	r2, [r7, #14]
 8014272:	429a      	cmp	r2, r3
 8014274:	d14a      	bne.n	801430c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8014276:	7cfb      	ldrb	r3, [r7, #19]
 8014278:	461a      	mov	r2, r3
 801427a:	6839      	ldr	r1, [r7, #0]
 801427c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801427e:	f7ff ff49 	bl	8014114 <udp_input_local_match>
 8014282:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8014284:	2b00      	cmp	r3, #0
 8014286:	d041      	beq.n	801430c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8014288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801428a:	7c1b      	ldrb	r3, [r3, #16]
 801428c:	f003 0304 	and.w	r3, r3, #4
 8014290:	2b00      	cmp	r3, #0
 8014292:	d11d      	bne.n	80142d0 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8014294:	69fb      	ldr	r3, [r7, #28]
 8014296:	2b00      	cmp	r3, #0
 8014298:	d102      	bne.n	80142a0 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801429a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801429c:	61fb      	str	r3, [r7, #28]
 801429e:	e017      	b.n	80142d0 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80142a0:	7cfb      	ldrb	r3, [r7, #19]
 80142a2:	2b00      	cmp	r3, #0
 80142a4:	d014      	beq.n	80142d0 <udp_input+0xf4>
 80142a6:	4b53      	ldr	r3, [pc, #332]	; (80143f4 <udp_input+0x218>)
 80142a8:	695b      	ldr	r3, [r3, #20]
 80142aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80142ae:	d10f      	bne.n	80142d0 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80142b0:	69fb      	ldr	r3, [r7, #28]
 80142b2:	681a      	ldr	r2, [r3, #0]
 80142b4:	683b      	ldr	r3, [r7, #0]
 80142b6:	3304      	adds	r3, #4
 80142b8:	681b      	ldr	r3, [r3, #0]
 80142ba:	429a      	cmp	r2, r3
 80142bc:	d008      	beq.n	80142d0 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80142be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142c0:	681a      	ldr	r2, [r3, #0]
 80142c2:	683b      	ldr	r3, [r7, #0]
 80142c4:	3304      	adds	r3, #4
 80142c6:	681b      	ldr	r3, [r3, #0]
 80142c8:	429a      	cmp	r2, r3
 80142ca:	d101      	bne.n	80142d0 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80142cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142ce:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80142d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142d2:	8a9b      	ldrh	r3, [r3, #20]
 80142d4:	8a3a      	ldrh	r2, [r7, #16]
 80142d6:	429a      	cmp	r2, r3
 80142d8:	d118      	bne.n	801430c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80142da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142dc:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80142de:	2b00      	cmp	r3, #0
 80142e0:	d005      	beq.n	80142ee <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80142e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142e4:	685a      	ldr	r2, [r3, #4]
 80142e6:	4b43      	ldr	r3, [pc, #268]	; (80143f4 <udp_input+0x218>)
 80142e8:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80142ea:	429a      	cmp	r2, r3
 80142ec:	d10e      	bne.n	801430c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80142ee:	6a3b      	ldr	r3, [r7, #32]
 80142f0:	2b00      	cmp	r3, #0
 80142f2:	d014      	beq.n	801431e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80142f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142f6:	68da      	ldr	r2, [r3, #12]
 80142f8:	6a3b      	ldr	r3, [r7, #32]
 80142fa:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80142fc:	4b3e      	ldr	r3, [pc, #248]	; (80143f8 <udp_input+0x21c>)
 80142fe:	681a      	ldr	r2, [r3, #0]
 8014300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014302:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8014304:	4a3c      	ldr	r2, [pc, #240]	; (80143f8 <udp_input+0x21c>)
 8014306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014308:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801430a:	e008      	b.n	801431e <udp_input+0x142>
      }
    }

    prev = pcb;
 801430c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801430e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014312:	68db      	ldr	r3, [r3, #12]
 8014314:	627b      	str	r3, [r7, #36]	; 0x24
 8014316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014318:	2b00      	cmp	r3, #0
 801431a:	d1a7      	bne.n	801426c <udp_input+0x90>
 801431c:	e000      	b.n	8014320 <udp_input+0x144>
        break;
 801431e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8014320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014322:	2b00      	cmp	r3, #0
 8014324:	d101      	bne.n	801432a <udp_input+0x14e>
    pcb = uncon_pcb;
 8014326:	69fb      	ldr	r3, [r7, #28]
 8014328:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801432a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801432c:	2b00      	cmp	r3, #0
 801432e:	d002      	beq.n	8014336 <udp_input+0x15a>
    for_us = 1;
 8014330:	2301      	movs	r3, #1
 8014332:	76fb      	strb	r3, [r7, #27]
 8014334:	e00a      	b.n	801434c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8014336:	683b      	ldr	r3, [r7, #0]
 8014338:	3304      	adds	r3, #4
 801433a:	681a      	ldr	r2, [r3, #0]
 801433c:	4b2d      	ldr	r3, [pc, #180]	; (80143f4 <udp_input+0x218>)
 801433e:	695b      	ldr	r3, [r3, #20]
 8014340:	429a      	cmp	r2, r3
 8014342:	bf0c      	ite	eq
 8014344:	2301      	moveq	r3, #1
 8014346:	2300      	movne	r3, #0
 8014348:	b2db      	uxtb	r3, r3
 801434a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801434c:	7efb      	ldrb	r3, [r7, #27]
 801434e:	2b00      	cmp	r3, #0
 8014350:	d041      	beq.n	80143d6 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8014352:	2108      	movs	r1, #8
 8014354:	6878      	ldr	r0, [r7, #4]
 8014356:	f7fa f88d 	bl	800e474 <pbuf_remove_header>
 801435a:	4603      	mov	r3, r0
 801435c:	2b00      	cmp	r3, #0
 801435e:	d00a      	beq.n	8014376 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8014360:	4b20      	ldr	r3, [pc, #128]	; (80143e4 <udp_input+0x208>)
 8014362:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8014366:	4925      	ldr	r1, [pc, #148]	; (80143fc <udp_input+0x220>)
 8014368:	4820      	ldr	r0, [pc, #128]	; (80143ec <udp_input+0x210>)
 801436a:	f005 f9e3 	bl	8019734 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801436e:	6878      	ldr	r0, [r7, #4]
 8014370:	f7fa f906 	bl	800e580 <pbuf_free>
      goto end;
 8014374:	e032      	b.n	80143dc <udp_input+0x200>
    }

    if (pcb != NULL) {
 8014376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014378:	2b00      	cmp	r3, #0
 801437a:	d012      	beq.n	80143a2 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801437c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801437e:	699b      	ldr	r3, [r3, #24]
 8014380:	2b00      	cmp	r3, #0
 8014382:	d00a      	beq.n	801439a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8014384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014386:	699c      	ldr	r4, [r3, #24]
 8014388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801438a:	69d8      	ldr	r0, [r3, #28]
 801438c:	8a3b      	ldrh	r3, [r7, #16]
 801438e:	9300      	str	r3, [sp, #0]
 8014390:	4b1b      	ldr	r3, [pc, #108]	; (8014400 <udp_input+0x224>)
 8014392:	687a      	ldr	r2, [r7, #4]
 8014394:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014396:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8014398:	e021      	b.n	80143de <udp_input+0x202>
        pbuf_free(p);
 801439a:	6878      	ldr	r0, [r7, #4]
 801439c:	f7fa f8f0 	bl	800e580 <pbuf_free>
        goto end;
 80143a0:	e01c      	b.n	80143dc <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80143a2:	7cfb      	ldrb	r3, [r7, #19]
 80143a4:	2b00      	cmp	r3, #0
 80143a6:	d112      	bne.n	80143ce <udp_input+0x1f2>
 80143a8:	4b12      	ldr	r3, [pc, #72]	; (80143f4 <udp_input+0x218>)
 80143aa:	695b      	ldr	r3, [r3, #20]
 80143ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80143b0:	2be0      	cmp	r3, #224	; 0xe0
 80143b2:	d00c      	beq.n	80143ce <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80143b4:	4b0f      	ldr	r3, [pc, #60]	; (80143f4 <udp_input+0x218>)
 80143b6:	899b      	ldrh	r3, [r3, #12]
 80143b8:	3308      	adds	r3, #8
 80143ba:	b29b      	uxth	r3, r3
 80143bc:	b21b      	sxth	r3, r3
 80143be:	4619      	mov	r1, r3
 80143c0:	6878      	ldr	r0, [r7, #4]
 80143c2:	f7fa f8ca 	bl	800e55a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80143c6:	2103      	movs	r1, #3
 80143c8:	6878      	ldr	r0, [r7, #4]
 80143ca:	f003 f9fb 	bl	80177c4 <icmp_dest_unreach>
      pbuf_free(p);
 80143ce:	6878      	ldr	r0, [r7, #4]
 80143d0:	f7fa f8d6 	bl	800e580 <pbuf_free>
  return;
 80143d4:	e003      	b.n	80143de <udp_input+0x202>
    pbuf_free(p);
 80143d6:	6878      	ldr	r0, [r7, #4]
 80143d8:	f7fa f8d2 	bl	800e580 <pbuf_free>
  return;
 80143dc:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80143de:	372c      	adds	r7, #44	; 0x2c
 80143e0:	46bd      	mov	sp, r7
 80143e2:	bd90      	pop	{r4, r7, pc}
 80143e4:	0801c2e4 	.word	0x0801c2e4
 80143e8:	0801c388 	.word	0x0801c388
 80143ec:	0801c338 	.word	0x0801c338
 80143f0:	0801c3a0 	.word	0x0801c3a0
 80143f4:	2001716c 	.word	0x2001716c
 80143f8:	2001b678 	.word	0x2001b678
 80143fc:	0801c3bc 	.word	0x0801c3bc
 8014400:	2001717c 	.word	0x2001717c

08014404 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8014404:	b580      	push	{r7, lr}
 8014406:	b088      	sub	sp, #32
 8014408:	af02      	add	r7, sp, #8
 801440a:	60f8      	str	r0, [r7, #12]
 801440c:	60b9      	str	r1, [r7, #8]
 801440e:	607a      	str	r2, [r7, #4]
 8014410:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8014412:	68fb      	ldr	r3, [r7, #12]
 8014414:	2b00      	cmp	r3, #0
 8014416:	d109      	bne.n	801442c <udp_sendto_if+0x28>
 8014418:	4b2e      	ldr	r3, [pc, #184]	; (80144d4 <udp_sendto_if+0xd0>)
 801441a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801441e:	492e      	ldr	r1, [pc, #184]	; (80144d8 <udp_sendto_if+0xd4>)
 8014420:	482e      	ldr	r0, [pc, #184]	; (80144dc <udp_sendto_if+0xd8>)
 8014422:	f005 f987 	bl	8019734 <iprintf>
 8014426:	f06f 030f 	mvn.w	r3, #15
 801442a:	e04f      	b.n	80144cc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801442c:	68bb      	ldr	r3, [r7, #8]
 801442e:	2b00      	cmp	r3, #0
 8014430:	d109      	bne.n	8014446 <udp_sendto_if+0x42>
 8014432:	4b28      	ldr	r3, [pc, #160]	; (80144d4 <udp_sendto_if+0xd0>)
 8014434:	f240 2281 	movw	r2, #641	; 0x281
 8014438:	4929      	ldr	r1, [pc, #164]	; (80144e0 <udp_sendto_if+0xdc>)
 801443a:	4828      	ldr	r0, [pc, #160]	; (80144dc <udp_sendto_if+0xd8>)
 801443c:	f005 f97a 	bl	8019734 <iprintf>
 8014440:	f06f 030f 	mvn.w	r3, #15
 8014444:	e042      	b.n	80144cc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8014446:	687b      	ldr	r3, [r7, #4]
 8014448:	2b00      	cmp	r3, #0
 801444a:	d109      	bne.n	8014460 <udp_sendto_if+0x5c>
 801444c:	4b21      	ldr	r3, [pc, #132]	; (80144d4 <udp_sendto_if+0xd0>)
 801444e:	f240 2282 	movw	r2, #642	; 0x282
 8014452:	4924      	ldr	r1, [pc, #144]	; (80144e4 <udp_sendto_if+0xe0>)
 8014454:	4821      	ldr	r0, [pc, #132]	; (80144dc <udp_sendto_if+0xd8>)
 8014456:	f005 f96d 	bl	8019734 <iprintf>
 801445a:	f06f 030f 	mvn.w	r3, #15
 801445e:	e035      	b.n	80144cc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8014460:	6a3b      	ldr	r3, [r7, #32]
 8014462:	2b00      	cmp	r3, #0
 8014464:	d109      	bne.n	801447a <udp_sendto_if+0x76>
 8014466:	4b1b      	ldr	r3, [pc, #108]	; (80144d4 <udp_sendto_if+0xd0>)
 8014468:	f240 2283 	movw	r2, #643	; 0x283
 801446c:	491e      	ldr	r1, [pc, #120]	; (80144e8 <udp_sendto_if+0xe4>)
 801446e:	481b      	ldr	r0, [pc, #108]	; (80144dc <udp_sendto_if+0xd8>)
 8014470:	f005 f960 	bl	8019734 <iprintf>
 8014474:	f06f 030f 	mvn.w	r3, #15
 8014478:	e028      	b.n	80144cc <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801447a:	68fb      	ldr	r3, [r7, #12]
 801447c:	2b00      	cmp	r3, #0
 801447e:	d009      	beq.n	8014494 <udp_sendto_if+0x90>
 8014480:	68fb      	ldr	r3, [r7, #12]
 8014482:	681b      	ldr	r3, [r3, #0]
 8014484:	2b00      	cmp	r3, #0
 8014486:	d005      	beq.n	8014494 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8014488:	68fb      	ldr	r3, [r7, #12]
 801448a:	681b      	ldr	r3, [r3, #0]
 801448c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014490:	2be0      	cmp	r3, #224	; 0xe0
 8014492:	d103      	bne.n	801449c <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8014494:	6a3b      	ldr	r3, [r7, #32]
 8014496:	3304      	adds	r3, #4
 8014498:	617b      	str	r3, [r7, #20]
 801449a:	e00b      	b.n	80144b4 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801449c:	68fb      	ldr	r3, [r7, #12]
 801449e:	681a      	ldr	r2, [r3, #0]
 80144a0:	6a3b      	ldr	r3, [r7, #32]
 80144a2:	3304      	adds	r3, #4
 80144a4:	681b      	ldr	r3, [r3, #0]
 80144a6:	429a      	cmp	r2, r3
 80144a8:	d002      	beq.n	80144b0 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 80144aa:	f06f 0303 	mvn.w	r3, #3
 80144ae:	e00d      	b.n	80144cc <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 80144b0:	68fb      	ldr	r3, [r7, #12]
 80144b2:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 80144b4:	887a      	ldrh	r2, [r7, #2]
 80144b6:	697b      	ldr	r3, [r7, #20]
 80144b8:	9301      	str	r3, [sp, #4]
 80144ba:	6a3b      	ldr	r3, [r7, #32]
 80144bc:	9300      	str	r3, [sp, #0]
 80144be:	4613      	mov	r3, r2
 80144c0:	687a      	ldr	r2, [r7, #4]
 80144c2:	68b9      	ldr	r1, [r7, #8]
 80144c4:	68f8      	ldr	r0, [r7, #12]
 80144c6:	f000 f811 	bl	80144ec <udp_sendto_if_src>
 80144ca:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80144cc:	4618      	mov	r0, r3
 80144ce:	3718      	adds	r7, #24
 80144d0:	46bd      	mov	sp, r7
 80144d2:	bd80      	pop	{r7, pc}
 80144d4:	0801c2e4 	.word	0x0801c2e4
 80144d8:	0801c458 	.word	0x0801c458
 80144dc:	0801c338 	.word	0x0801c338
 80144e0:	0801c474 	.word	0x0801c474
 80144e4:	0801c490 	.word	0x0801c490
 80144e8:	0801c4b0 	.word	0x0801c4b0

080144ec <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 80144ec:	b580      	push	{r7, lr}
 80144ee:	b08c      	sub	sp, #48	; 0x30
 80144f0:	af04      	add	r7, sp, #16
 80144f2:	60f8      	str	r0, [r7, #12]
 80144f4:	60b9      	str	r1, [r7, #8]
 80144f6:	607a      	str	r2, [r7, #4]
 80144f8:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 80144fa:	68fb      	ldr	r3, [r7, #12]
 80144fc:	2b00      	cmp	r3, #0
 80144fe:	d109      	bne.n	8014514 <udp_sendto_if_src+0x28>
 8014500:	4b65      	ldr	r3, [pc, #404]	; (8014698 <udp_sendto_if_src+0x1ac>)
 8014502:	f240 22d1 	movw	r2, #721	; 0x2d1
 8014506:	4965      	ldr	r1, [pc, #404]	; (801469c <udp_sendto_if_src+0x1b0>)
 8014508:	4865      	ldr	r0, [pc, #404]	; (80146a0 <udp_sendto_if_src+0x1b4>)
 801450a:	f005 f913 	bl	8019734 <iprintf>
 801450e:	f06f 030f 	mvn.w	r3, #15
 8014512:	e0bc      	b.n	801468e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8014514:	68bb      	ldr	r3, [r7, #8]
 8014516:	2b00      	cmp	r3, #0
 8014518:	d109      	bne.n	801452e <udp_sendto_if_src+0x42>
 801451a:	4b5f      	ldr	r3, [pc, #380]	; (8014698 <udp_sendto_if_src+0x1ac>)
 801451c:	f240 22d2 	movw	r2, #722	; 0x2d2
 8014520:	4960      	ldr	r1, [pc, #384]	; (80146a4 <udp_sendto_if_src+0x1b8>)
 8014522:	485f      	ldr	r0, [pc, #380]	; (80146a0 <udp_sendto_if_src+0x1b4>)
 8014524:	f005 f906 	bl	8019734 <iprintf>
 8014528:	f06f 030f 	mvn.w	r3, #15
 801452c:	e0af      	b.n	801468e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801452e:	687b      	ldr	r3, [r7, #4]
 8014530:	2b00      	cmp	r3, #0
 8014532:	d109      	bne.n	8014548 <udp_sendto_if_src+0x5c>
 8014534:	4b58      	ldr	r3, [pc, #352]	; (8014698 <udp_sendto_if_src+0x1ac>)
 8014536:	f240 22d3 	movw	r2, #723	; 0x2d3
 801453a:	495b      	ldr	r1, [pc, #364]	; (80146a8 <udp_sendto_if_src+0x1bc>)
 801453c:	4858      	ldr	r0, [pc, #352]	; (80146a0 <udp_sendto_if_src+0x1b4>)
 801453e:	f005 f8f9 	bl	8019734 <iprintf>
 8014542:	f06f 030f 	mvn.w	r3, #15
 8014546:	e0a2      	b.n	801468e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8014548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801454a:	2b00      	cmp	r3, #0
 801454c:	d109      	bne.n	8014562 <udp_sendto_if_src+0x76>
 801454e:	4b52      	ldr	r3, [pc, #328]	; (8014698 <udp_sendto_if_src+0x1ac>)
 8014550:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8014554:	4955      	ldr	r1, [pc, #340]	; (80146ac <udp_sendto_if_src+0x1c0>)
 8014556:	4852      	ldr	r0, [pc, #328]	; (80146a0 <udp_sendto_if_src+0x1b4>)
 8014558:	f005 f8ec 	bl	8019734 <iprintf>
 801455c:	f06f 030f 	mvn.w	r3, #15
 8014560:	e095      	b.n	801468e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8014562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014564:	2b00      	cmp	r3, #0
 8014566:	d109      	bne.n	801457c <udp_sendto_if_src+0x90>
 8014568:	4b4b      	ldr	r3, [pc, #300]	; (8014698 <udp_sendto_if_src+0x1ac>)
 801456a:	f240 22d5 	movw	r2, #725	; 0x2d5
 801456e:	4950      	ldr	r1, [pc, #320]	; (80146b0 <udp_sendto_if_src+0x1c4>)
 8014570:	484b      	ldr	r0, [pc, #300]	; (80146a0 <udp_sendto_if_src+0x1b4>)
 8014572:	f005 f8df 	bl	8019734 <iprintf>
 8014576:	f06f 030f 	mvn.w	r3, #15
 801457a:	e088      	b.n	801468e <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 801457c:	68fb      	ldr	r3, [r7, #12]
 801457e:	8a5b      	ldrh	r3, [r3, #18]
 8014580:	2b00      	cmp	r3, #0
 8014582:	d10f      	bne.n	80145a4 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8014584:	68f9      	ldr	r1, [r7, #12]
 8014586:	68fb      	ldr	r3, [r7, #12]
 8014588:	8a5b      	ldrh	r3, [r3, #18]
 801458a:	461a      	mov	r2, r3
 801458c:	68f8      	ldr	r0, [r7, #12]
 801458e:	f000 f893 	bl	80146b8 <udp_bind>
 8014592:	4603      	mov	r3, r0
 8014594:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8014596:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801459a:	2b00      	cmp	r3, #0
 801459c:	d002      	beq.n	80145a4 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801459e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80145a2:	e074      	b.n	801468e <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 80145a4:	68bb      	ldr	r3, [r7, #8]
 80145a6:	891b      	ldrh	r3, [r3, #8]
 80145a8:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 80145ac:	4293      	cmp	r3, r2
 80145ae:	d902      	bls.n	80145b6 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 80145b0:	f04f 33ff 	mov.w	r3, #4294967295
 80145b4:	e06b      	b.n	801468e <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 80145b6:	2108      	movs	r1, #8
 80145b8:	68b8      	ldr	r0, [r7, #8]
 80145ba:	f7f9 ff4b 	bl	800e454 <pbuf_add_header>
 80145be:	4603      	mov	r3, r0
 80145c0:	2b00      	cmp	r3, #0
 80145c2:	d015      	beq.n	80145f0 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80145c4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80145c8:	2108      	movs	r1, #8
 80145ca:	2022      	movs	r0, #34	; 0x22
 80145cc:	f7f9 fcf4 	bl	800dfb8 <pbuf_alloc>
 80145d0:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 80145d2:	69fb      	ldr	r3, [r7, #28]
 80145d4:	2b00      	cmp	r3, #0
 80145d6:	d102      	bne.n	80145de <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 80145d8:	f04f 33ff 	mov.w	r3, #4294967295
 80145dc:	e057      	b.n	801468e <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 80145de:	68bb      	ldr	r3, [r7, #8]
 80145e0:	891b      	ldrh	r3, [r3, #8]
 80145e2:	2b00      	cmp	r3, #0
 80145e4:	d006      	beq.n	80145f4 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 80145e6:	68b9      	ldr	r1, [r7, #8]
 80145e8:	69f8      	ldr	r0, [r7, #28]
 80145ea:	f7fa f8ed 	bl	800e7c8 <pbuf_chain>
 80145ee:	e001      	b.n	80145f4 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 80145f0:	68bb      	ldr	r3, [r7, #8]
 80145f2:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 80145f4:	69fb      	ldr	r3, [r7, #28]
 80145f6:	895b      	ldrh	r3, [r3, #10]
 80145f8:	2b07      	cmp	r3, #7
 80145fa:	d806      	bhi.n	801460a <udp_sendto_if_src+0x11e>
 80145fc:	4b26      	ldr	r3, [pc, #152]	; (8014698 <udp_sendto_if_src+0x1ac>)
 80145fe:	f240 320d 	movw	r2, #781	; 0x30d
 8014602:	492c      	ldr	r1, [pc, #176]	; (80146b4 <udp_sendto_if_src+0x1c8>)
 8014604:	4826      	ldr	r0, [pc, #152]	; (80146a0 <udp_sendto_if_src+0x1b4>)
 8014606:	f005 f895 	bl	8019734 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801460a:	69fb      	ldr	r3, [r7, #28]
 801460c:	685b      	ldr	r3, [r3, #4]
 801460e:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8014610:	68fb      	ldr	r3, [r7, #12]
 8014612:	8a5b      	ldrh	r3, [r3, #18]
 8014614:	4618      	mov	r0, r3
 8014616:	f7f8 fbfb 	bl	800ce10 <lwip_htons>
 801461a:	4603      	mov	r3, r0
 801461c:	461a      	mov	r2, r3
 801461e:	697b      	ldr	r3, [r7, #20]
 8014620:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8014622:	887b      	ldrh	r3, [r7, #2]
 8014624:	4618      	mov	r0, r3
 8014626:	f7f8 fbf3 	bl	800ce10 <lwip_htons>
 801462a:	4603      	mov	r3, r0
 801462c:	461a      	mov	r2, r3
 801462e:	697b      	ldr	r3, [r7, #20]
 8014630:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8014632:	697b      	ldr	r3, [r7, #20]
 8014634:	2200      	movs	r2, #0
 8014636:	719a      	strb	r2, [r3, #6]
 8014638:	2200      	movs	r2, #0
 801463a:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 801463c:	69fb      	ldr	r3, [r7, #28]
 801463e:	891b      	ldrh	r3, [r3, #8]
 8014640:	4618      	mov	r0, r3
 8014642:	f7f8 fbe5 	bl	800ce10 <lwip_htons>
 8014646:	4603      	mov	r3, r0
 8014648:	461a      	mov	r2, r3
 801464a:	697b      	ldr	r3, [r7, #20]
 801464c:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801464e:	2311      	movs	r3, #17
 8014650:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8014652:	68fb      	ldr	r3, [r7, #12]
 8014654:	7adb      	ldrb	r3, [r3, #11]
 8014656:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8014658:	68fb      	ldr	r3, [r7, #12]
 801465a:	7a9b      	ldrb	r3, [r3, #10]
 801465c:	7cb9      	ldrb	r1, [r7, #18]
 801465e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014660:	9202      	str	r2, [sp, #8]
 8014662:	7cfa      	ldrb	r2, [r7, #19]
 8014664:	9201      	str	r2, [sp, #4]
 8014666:	9300      	str	r3, [sp, #0]
 8014668:	460b      	mov	r3, r1
 801466a:	687a      	ldr	r2, [r7, #4]
 801466c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801466e:	69f8      	ldr	r0, [r7, #28]
 8014670:	f003 fb38 	bl	8017ce4 <ip4_output_if_src>
 8014674:	4603      	mov	r3, r0
 8014676:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8014678:	69fa      	ldr	r2, [r7, #28]
 801467a:	68bb      	ldr	r3, [r7, #8]
 801467c:	429a      	cmp	r2, r3
 801467e:	d004      	beq.n	801468a <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8014680:	69f8      	ldr	r0, [r7, #28]
 8014682:	f7f9 ff7d 	bl	800e580 <pbuf_free>
    q = NULL;
 8014686:	2300      	movs	r3, #0
 8014688:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801468a:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801468e:	4618      	mov	r0, r3
 8014690:	3720      	adds	r7, #32
 8014692:	46bd      	mov	sp, r7
 8014694:	bd80      	pop	{r7, pc}
 8014696:	bf00      	nop
 8014698:	0801c2e4 	.word	0x0801c2e4
 801469c:	0801c4d0 	.word	0x0801c4d0
 80146a0:	0801c338 	.word	0x0801c338
 80146a4:	0801c4f0 	.word	0x0801c4f0
 80146a8:	0801c510 	.word	0x0801c510
 80146ac:	0801c534 	.word	0x0801c534
 80146b0:	0801c558 	.word	0x0801c558
 80146b4:	0801c57c 	.word	0x0801c57c

080146b8 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80146b8:	b580      	push	{r7, lr}
 80146ba:	b086      	sub	sp, #24
 80146bc:	af00      	add	r7, sp, #0
 80146be:	60f8      	str	r0, [r7, #12]
 80146c0:	60b9      	str	r1, [r7, #8]
 80146c2:	4613      	mov	r3, r2
 80146c4:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80146c6:	68bb      	ldr	r3, [r7, #8]
 80146c8:	2b00      	cmp	r3, #0
 80146ca:	d101      	bne.n	80146d0 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80146cc:	4b39      	ldr	r3, [pc, #228]	; (80147b4 <udp_bind+0xfc>)
 80146ce:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80146d0:	68fb      	ldr	r3, [r7, #12]
 80146d2:	2b00      	cmp	r3, #0
 80146d4:	d109      	bne.n	80146ea <udp_bind+0x32>
 80146d6:	4b38      	ldr	r3, [pc, #224]	; (80147b8 <udp_bind+0x100>)
 80146d8:	f240 32b7 	movw	r2, #951	; 0x3b7
 80146dc:	4937      	ldr	r1, [pc, #220]	; (80147bc <udp_bind+0x104>)
 80146de:	4838      	ldr	r0, [pc, #224]	; (80147c0 <udp_bind+0x108>)
 80146e0:	f005 f828 	bl	8019734 <iprintf>
 80146e4:	f06f 030f 	mvn.w	r3, #15
 80146e8:	e060      	b.n	80147ac <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80146ea:	2300      	movs	r3, #0
 80146ec:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80146ee:	4b35      	ldr	r3, [pc, #212]	; (80147c4 <udp_bind+0x10c>)
 80146f0:	681b      	ldr	r3, [r3, #0]
 80146f2:	617b      	str	r3, [r7, #20]
 80146f4:	e009      	b.n	801470a <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80146f6:	68fa      	ldr	r2, [r7, #12]
 80146f8:	697b      	ldr	r3, [r7, #20]
 80146fa:	429a      	cmp	r2, r3
 80146fc:	d102      	bne.n	8014704 <udp_bind+0x4c>
      rebind = 1;
 80146fe:	2301      	movs	r3, #1
 8014700:	74fb      	strb	r3, [r7, #19]
      break;
 8014702:	e005      	b.n	8014710 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014704:	697b      	ldr	r3, [r7, #20]
 8014706:	68db      	ldr	r3, [r3, #12]
 8014708:	617b      	str	r3, [r7, #20]
 801470a:	697b      	ldr	r3, [r7, #20]
 801470c:	2b00      	cmp	r3, #0
 801470e:	d1f2      	bne.n	80146f6 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8014710:	88fb      	ldrh	r3, [r7, #6]
 8014712:	2b00      	cmp	r3, #0
 8014714:	d109      	bne.n	801472a <udp_bind+0x72>
    port = udp_new_port();
 8014716:	f7ff fcc5 	bl	80140a4 <udp_new_port>
 801471a:	4603      	mov	r3, r0
 801471c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801471e:	88fb      	ldrh	r3, [r7, #6]
 8014720:	2b00      	cmp	r3, #0
 8014722:	d12c      	bne.n	801477e <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8014724:	f06f 0307 	mvn.w	r3, #7
 8014728:	e040      	b.n	80147ac <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801472a:	4b26      	ldr	r3, [pc, #152]	; (80147c4 <udp_bind+0x10c>)
 801472c:	681b      	ldr	r3, [r3, #0]
 801472e:	617b      	str	r3, [r7, #20]
 8014730:	e022      	b.n	8014778 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8014732:	68fa      	ldr	r2, [r7, #12]
 8014734:	697b      	ldr	r3, [r7, #20]
 8014736:	429a      	cmp	r2, r3
 8014738:	d01b      	beq.n	8014772 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801473a:	697b      	ldr	r3, [r7, #20]
 801473c:	8a5b      	ldrh	r3, [r3, #18]
 801473e:	88fa      	ldrh	r2, [r7, #6]
 8014740:	429a      	cmp	r2, r3
 8014742:	d116      	bne.n	8014772 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8014744:	697b      	ldr	r3, [r7, #20]
 8014746:	681a      	ldr	r2, [r3, #0]
 8014748:	68bb      	ldr	r3, [r7, #8]
 801474a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801474c:	429a      	cmp	r2, r3
 801474e:	d00d      	beq.n	801476c <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8014750:	68bb      	ldr	r3, [r7, #8]
 8014752:	2b00      	cmp	r3, #0
 8014754:	d00a      	beq.n	801476c <udp_bind+0xb4>
 8014756:	68bb      	ldr	r3, [r7, #8]
 8014758:	681b      	ldr	r3, [r3, #0]
 801475a:	2b00      	cmp	r3, #0
 801475c:	d006      	beq.n	801476c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801475e:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8014760:	2b00      	cmp	r3, #0
 8014762:	d003      	beq.n	801476c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8014764:	697b      	ldr	r3, [r7, #20]
 8014766:	681b      	ldr	r3, [r3, #0]
 8014768:	2b00      	cmp	r3, #0
 801476a:	d102      	bne.n	8014772 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801476c:	f06f 0307 	mvn.w	r3, #7
 8014770:	e01c      	b.n	80147ac <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014772:	697b      	ldr	r3, [r7, #20]
 8014774:	68db      	ldr	r3, [r3, #12]
 8014776:	617b      	str	r3, [r7, #20]
 8014778:	697b      	ldr	r3, [r7, #20]
 801477a:	2b00      	cmp	r3, #0
 801477c:	d1d9      	bne.n	8014732 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801477e:	68bb      	ldr	r3, [r7, #8]
 8014780:	2b00      	cmp	r3, #0
 8014782:	d002      	beq.n	801478a <udp_bind+0xd2>
 8014784:	68bb      	ldr	r3, [r7, #8]
 8014786:	681b      	ldr	r3, [r3, #0]
 8014788:	e000      	b.n	801478c <udp_bind+0xd4>
 801478a:	2300      	movs	r3, #0
 801478c:	68fa      	ldr	r2, [r7, #12]
 801478e:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8014790:	68fb      	ldr	r3, [r7, #12]
 8014792:	88fa      	ldrh	r2, [r7, #6]
 8014794:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8014796:	7cfb      	ldrb	r3, [r7, #19]
 8014798:	2b00      	cmp	r3, #0
 801479a:	d106      	bne.n	80147aa <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801479c:	4b09      	ldr	r3, [pc, #36]	; (80147c4 <udp_bind+0x10c>)
 801479e:	681a      	ldr	r2, [r3, #0]
 80147a0:	68fb      	ldr	r3, [r7, #12]
 80147a2:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80147a4:	4a07      	ldr	r2, [pc, #28]	; (80147c4 <udp_bind+0x10c>)
 80147a6:	68fb      	ldr	r3, [r7, #12]
 80147a8:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80147aa:	2300      	movs	r3, #0
}
 80147ac:	4618      	mov	r0, r3
 80147ae:	3718      	adds	r7, #24
 80147b0:	46bd      	mov	sp, r7
 80147b2:	bd80      	pop	{r7, pc}
 80147b4:	0801d258 	.word	0x0801d258
 80147b8:	0801c2e4 	.word	0x0801c2e4
 80147bc:	0801c5ac 	.word	0x0801c5ac
 80147c0:	0801c338 	.word	0x0801c338
 80147c4:	2001b678 	.word	0x2001b678

080147c8 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80147c8:	b580      	push	{r7, lr}
 80147ca:	b086      	sub	sp, #24
 80147cc:	af00      	add	r7, sp, #0
 80147ce:	60f8      	str	r0, [r7, #12]
 80147d0:	60b9      	str	r1, [r7, #8]
 80147d2:	4613      	mov	r3, r2
 80147d4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 80147d6:	68fb      	ldr	r3, [r7, #12]
 80147d8:	2b00      	cmp	r3, #0
 80147da:	d109      	bne.n	80147f0 <udp_connect+0x28>
 80147dc:	4b2c      	ldr	r3, [pc, #176]	; (8014890 <udp_connect+0xc8>)
 80147de:	f240 4235 	movw	r2, #1077	; 0x435
 80147e2:	492c      	ldr	r1, [pc, #176]	; (8014894 <udp_connect+0xcc>)
 80147e4:	482c      	ldr	r0, [pc, #176]	; (8014898 <udp_connect+0xd0>)
 80147e6:	f004 ffa5 	bl	8019734 <iprintf>
 80147ea:	f06f 030f 	mvn.w	r3, #15
 80147ee:	e04b      	b.n	8014888 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 80147f0:	68bb      	ldr	r3, [r7, #8]
 80147f2:	2b00      	cmp	r3, #0
 80147f4:	d109      	bne.n	801480a <udp_connect+0x42>
 80147f6:	4b26      	ldr	r3, [pc, #152]	; (8014890 <udp_connect+0xc8>)
 80147f8:	f240 4236 	movw	r2, #1078	; 0x436
 80147fc:	4927      	ldr	r1, [pc, #156]	; (801489c <udp_connect+0xd4>)
 80147fe:	4826      	ldr	r0, [pc, #152]	; (8014898 <udp_connect+0xd0>)
 8014800:	f004 ff98 	bl	8019734 <iprintf>
 8014804:	f06f 030f 	mvn.w	r3, #15
 8014808:	e03e      	b.n	8014888 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 801480a:	68fb      	ldr	r3, [r7, #12]
 801480c:	8a5b      	ldrh	r3, [r3, #18]
 801480e:	2b00      	cmp	r3, #0
 8014810:	d10f      	bne.n	8014832 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8014812:	68f9      	ldr	r1, [r7, #12]
 8014814:	68fb      	ldr	r3, [r7, #12]
 8014816:	8a5b      	ldrh	r3, [r3, #18]
 8014818:	461a      	mov	r2, r3
 801481a:	68f8      	ldr	r0, [r7, #12]
 801481c:	f7ff ff4c 	bl	80146b8 <udp_bind>
 8014820:	4603      	mov	r3, r0
 8014822:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8014824:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014828:	2b00      	cmp	r3, #0
 801482a:	d002      	beq.n	8014832 <udp_connect+0x6a>
      return err;
 801482c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014830:	e02a      	b.n	8014888 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8014832:	68bb      	ldr	r3, [r7, #8]
 8014834:	2b00      	cmp	r3, #0
 8014836:	d002      	beq.n	801483e <udp_connect+0x76>
 8014838:	68bb      	ldr	r3, [r7, #8]
 801483a:	681b      	ldr	r3, [r3, #0]
 801483c:	e000      	b.n	8014840 <udp_connect+0x78>
 801483e:	2300      	movs	r3, #0
 8014840:	68fa      	ldr	r2, [r7, #12]
 8014842:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8014844:	68fb      	ldr	r3, [r7, #12]
 8014846:	88fa      	ldrh	r2, [r7, #6]
 8014848:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801484a:	68fb      	ldr	r3, [r7, #12]
 801484c:	7c1b      	ldrb	r3, [r3, #16]
 801484e:	f043 0304 	orr.w	r3, r3, #4
 8014852:	b2da      	uxtb	r2, r3
 8014854:	68fb      	ldr	r3, [r7, #12]
 8014856:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014858:	4b11      	ldr	r3, [pc, #68]	; (80148a0 <udp_connect+0xd8>)
 801485a:	681b      	ldr	r3, [r3, #0]
 801485c:	617b      	str	r3, [r7, #20]
 801485e:	e008      	b.n	8014872 <udp_connect+0xaa>
    if (pcb == ipcb) {
 8014860:	68fa      	ldr	r2, [r7, #12]
 8014862:	697b      	ldr	r3, [r7, #20]
 8014864:	429a      	cmp	r2, r3
 8014866:	d101      	bne.n	801486c <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8014868:	2300      	movs	r3, #0
 801486a:	e00d      	b.n	8014888 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801486c:	697b      	ldr	r3, [r7, #20]
 801486e:	68db      	ldr	r3, [r3, #12]
 8014870:	617b      	str	r3, [r7, #20]
 8014872:	697b      	ldr	r3, [r7, #20]
 8014874:	2b00      	cmp	r3, #0
 8014876:	d1f3      	bne.n	8014860 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8014878:	4b09      	ldr	r3, [pc, #36]	; (80148a0 <udp_connect+0xd8>)
 801487a:	681a      	ldr	r2, [r3, #0]
 801487c:	68fb      	ldr	r3, [r7, #12]
 801487e:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8014880:	4a07      	ldr	r2, [pc, #28]	; (80148a0 <udp_connect+0xd8>)
 8014882:	68fb      	ldr	r3, [r7, #12]
 8014884:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8014886:	2300      	movs	r3, #0
}
 8014888:	4618      	mov	r0, r3
 801488a:	3718      	adds	r7, #24
 801488c:	46bd      	mov	sp, r7
 801488e:	bd80      	pop	{r7, pc}
 8014890:	0801c2e4 	.word	0x0801c2e4
 8014894:	0801c5c4 	.word	0x0801c5c4
 8014898:	0801c338 	.word	0x0801c338
 801489c:	0801c5e0 	.word	0x0801c5e0
 80148a0:	2001b678 	.word	0x2001b678

080148a4 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80148a4:	b580      	push	{r7, lr}
 80148a6:	b084      	sub	sp, #16
 80148a8:	af00      	add	r7, sp, #0
 80148aa:	60f8      	str	r0, [r7, #12]
 80148ac:	60b9      	str	r1, [r7, #8]
 80148ae:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80148b0:	68fb      	ldr	r3, [r7, #12]
 80148b2:	2b00      	cmp	r3, #0
 80148b4:	d107      	bne.n	80148c6 <udp_recv+0x22>
 80148b6:	4b08      	ldr	r3, [pc, #32]	; (80148d8 <udp_recv+0x34>)
 80148b8:	f240 428a 	movw	r2, #1162	; 0x48a
 80148bc:	4907      	ldr	r1, [pc, #28]	; (80148dc <udp_recv+0x38>)
 80148be:	4808      	ldr	r0, [pc, #32]	; (80148e0 <udp_recv+0x3c>)
 80148c0:	f004 ff38 	bl	8019734 <iprintf>
 80148c4:	e005      	b.n	80148d2 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 80148c6:	68fb      	ldr	r3, [r7, #12]
 80148c8:	68ba      	ldr	r2, [r7, #8]
 80148ca:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 80148cc:	68fb      	ldr	r3, [r7, #12]
 80148ce:	687a      	ldr	r2, [r7, #4]
 80148d0:	61da      	str	r2, [r3, #28]
}
 80148d2:	3710      	adds	r7, #16
 80148d4:	46bd      	mov	sp, r7
 80148d6:	bd80      	pop	{r7, pc}
 80148d8:	0801c2e4 	.word	0x0801c2e4
 80148dc:	0801c618 	.word	0x0801c618
 80148e0:	0801c338 	.word	0x0801c338

080148e4 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 80148e4:	b580      	push	{r7, lr}
 80148e6:	b084      	sub	sp, #16
 80148e8:	af00      	add	r7, sp, #0
 80148ea:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 80148ec:	687b      	ldr	r3, [r7, #4]
 80148ee:	2b00      	cmp	r3, #0
 80148f0:	d107      	bne.n	8014902 <udp_remove+0x1e>
 80148f2:	4b19      	ldr	r3, [pc, #100]	; (8014958 <udp_remove+0x74>)
 80148f4:	f240 42a1 	movw	r2, #1185	; 0x4a1
 80148f8:	4918      	ldr	r1, [pc, #96]	; (801495c <udp_remove+0x78>)
 80148fa:	4819      	ldr	r0, [pc, #100]	; (8014960 <udp_remove+0x7c>)
 80148fc:	f004 ff1a 	bl	8019734 <iprintf>
 8014900:	e026      	b.n	8014950 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8014902:	4b18      	ldr	r3, [pc, #96]	; (8014964 <udp_remove+0x80>)
 8014904:	681b      	ldr	r3, [r3, #0]
 8014906:	687a      	ldr	r2, [r7, #4]
 8014908:	429a      	cmp	r2, r3
 801490a:	d105      	bne.n	8014918 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801490c:	4b15      	ldr	r3, [pc, #84]	; (8014964 <udp_remove+0x80>)
 801490e:	681b      	ldr	r3, [r3, #0]
 8014910:	68db      	ldr	r3, [r3, #12]
 8014912:	4a14      	ldr	r2, [pc, #80]	; (8014964 <udp_remove+0x80>)
 8014914:	6013      	str	r3, [r2, #0]
 8014916:	e017      	b.n	8014948 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8014918:	4b12      	ldr	r3, [pc, #72]	; (8014964 <udp_remove+0x80>)
 801491a:	681b      	ldr	r3, [r3, #0]
 801491c:	60fb      	str	r3, [r7, #12]
 801491e:	e010      	b.n	8014942 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8014920:	68fb      	ldr	r3, [r7, #12]
 8014922:	68db      	ldr	r3, [r3, #12]
 8014924:	2b00      	cmp	r3, #0
 8014926:	d009      	beq.n	801493c <udp_remove+0x58>
 8014928:	68fb      	ldr	r3, [r7, #12]
 801492a:	68db      	ldr	r3, [r3, #12]
 801492c:	687a      	ldr	r2, [r7, #4]
 801492e:	429a      	cmp	r2, r3
 8014930:	d104      	bne.n	801493c <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8014932:	687b      	ldr	r3, [r7, #4]
 8014934:	68da      	ldr	r2, [r3, #12]
 8014936:	68fb      	ldr	r3, [r7, #12]
 8014938:	60da      	str	r2, [r3, #12]
        break;
 801493a:	e005      	b.n	8014948 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801493c:	68fb      	ldr	r3, [r7, #12]
 801493e:	68db      	ldr	r3, [r3, #12]
 8014940:	60fb      	str	r3, [r7, #12]
 8014942:	68fb      	ldr	r3, [r7, #12]
 8014944:	2b00      	cmp	r3, #0
 8014946:	d1eb      	bne.n	8014920 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8014948:	6879      	ldr	r1, [r7, #4]
 801494a:	2000      	movs	r0, #0
 801494c:	f7f8 ff68 	bl	800d820 <memp_free>
}
 8014950:	3710      	adds	r7, #16
 8014952:	46bd      	mov	sp, r7
 8014954:	bd80      	pop	{r7, pc}
 8014956:	bf00      	nop
 8014958:	0801c2e4 	.word	0x0801c2e4
 801495c:	0801c630 	.word	0x0801c630
 8014960:	0801c338 	.word	0x0801c338
 8014964:	2001b678 	.word	0x2001b678

08014968 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8014968:	b580      	push	{r7, lr}
 801496a:	b082      	sub	sp, #8
 801496c:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801496e:	2000      	movs	r0, #0
 8014970:	f7f8 ff04 	bl	800d77c <memp_malloc>
 8014974:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8014976:	687b      	ldr	r3, [r7, #4]
 8014978:	2b00      	cmp	r3, #0
 801497a:	d007      	beq.n	801498c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801497c:	2220      	movs	r2, #32
 801497e:	2100      	movs	r1, #0
 8014980:	6878      	ldr	r0, [r7, #4]
 8014982:	f004 fb01 	bl	8018f88 <memset>
    pcb->ttl = UDP_TTL;
 8014986:	687b      	ldr	r3, [r7, #4]
 8014988:	22ff      	movs	r2, #255	; 0xff
 801498a:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801498c:	687b      	ldr	r3, [r7, #4]
}
 801498e:	4618      	mov	r0, r3
 8014990:	3708      	adds	r7, #8
 8014992:	46bd      	mov	sp, r7
 8014994:	bd80      	pop	{r7, pc}
	...

08014998 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8014998:	b480      	push	{r7}
 801499a:	b085      	sub	sp, #20
 801499c:	af00      	add	r7, sp, #0
 801499e:	6078      	str	r0, [r7, #4]
 80149a0:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80149a2:	687b      	ldr	r3, [r7, #4]
 80149a4:	2b00      	cmp	r3, #0
 80149a6:	d01e      	beq.n	80149e6 <udp_netif_ip_addr_changed+0x4e>
 80149a8:	687b      	ldr	r3, [r7, #4]
 80149aa:	681b      	ldr	r3, [r3, #0]
 80149ac:	2b00      	cmp	r3, #0
 80149ae:	d01a      	beq.n	80149e6 <udp_netif_ip_addr_changed+0x4e>
 80149b0:	683b      	ldr	r3, [r7, #0]
 80149b2:	2b00      	cmp	r3, #0
 80149b4:	d017      	beq.n	80149e6 <udp_netif_ip_addr_changed+0x4e>
 80149b6:	683b      	ldr	r3, [r7, #0]
 80149b8:	681b      	ldr	r3, [r3, #0]
 80149ba:	2b00      	cmp	r3, #0
 80149bc:	d013      	beq.n	80149e6 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80149be:	4b0d      	ldr	r3, [pc, #52]	; (80149f4 <udp_netif_ip_addr_changed+0x5c>)
 80149c0:	681b      	ldr	r3, [r3, #0]
 80149c2:	60fb      	str	r3, [r7, #12]
 80149c4:	e00c      	b.n	80149e0 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80149c6:	68fb      	ldr	r3, [r7, #12]
 80149c8:	681a      	ldr	r2, [r3, #0]
 80149ca:	687b      	ldr	r3, [r7, #4]
 80149cc:	681b      	ldr	r3, [r3, #0]
 80149ce:	429a      	cmp	r2, r3
 80149d0:	d103      	bne.n	80149da <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80149d2:	683b      	ldr	r3, [r7, #0]
 80149d4:	681a      	ldr	r2, [r3, #0]
 80149d6:	68fb      	ldr	r3, [r7, #12]
 80149d8:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80149da:	68fb      	ldr	r3, [r7, #12]
 80149dc:	68db      	ldr	r3, [r3, #12]
 80149de:	60fb      	str	r3, [r7, #12]
 80149e0:	68fb      	ldr	r3, [r7, #12]
 80149e2:	2b00      	cmp	r3, #0
 80149e4:	d1ef      	bne.n	80149c6 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80149e6:	bf00      	nop
 80149e8:	3714      	adds	r7, #20
 80149ea:	46bd      	mov	sp, r7
 80149ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149f0:	4770      	bx	lr
 80149f2:	bf00      	nop
 80149f4:	2001b678 	.word	0x2001b678

080149f8 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 80149f8:	b580      	push	{r7, lr}
 80149fa:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 80149fc:	4b20      	ldr	r3, [pc, #128]	; (8014a80 <dhcp_inc_pcb_refcount+0x88>)
 80149fe:	781b      	ldrb	r3, [r3, #0]
 8014a00:	2b00      	cmp	r3, #0
 8014a02:	d133      	bne.n	8014a6c <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8014a04:	4b1f      	ldr	r3, [pc, #124]	; (8014a84 <dhcp_inc_pcb_refcount+0x8c>)
 8014a06:	681b      	ldr	r3, [r3, #0]
 8014a08:	2b00      	cmp	r3, #0
 8014a0a:	d005      	beq.n	8014a18 <dhcp_inc_pcb_refcount+0x20>
 8014a0c:	4b1e      	ldr	r3, [pc, #120]	; (8014a88 <dhcp_inc_pcb_refcount+0x90>)
 8014a0e:	22e5      	movs	r2, #229	; 0xe5
 8014a10:	491e      	ldr	r1, [pc, #120]	; (8014a8c <dhcp_inc_pcb_refcount+0x94>)
 8014a12:	481f      	ldr	r0, [pc, #124]	; (8014a90 <dhcp_inc_pcb_refcount+0x98>)
 8014a14:	f004 fe8e 	bl	8019734 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8014a18:	f7ff ffa6 	bl	8014968 <udp_new>
 8014a1c:	4603      	mov	r3, r0
 8014a1e:	4a19      	ldr	r2, [pc, #100]	; (8014a84 <dhcp_inc_pcb_refcount+0x8c>)
 8014a20:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 8014a22:	4b18      	ldr	r3, [pc, #96]	; (8014a84 <dhcp_inc_pcb_refcount+0x8c>)
 8014a24:	681b      	ldr	r3, [r3, #0]
 8014a26:	2b00      	cmp	r3, #0
 8014a28:	d102      	bne.n	8014a30 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8014a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8014a2e:	e024      	b.n	8014a7a <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8014a30:	4b14      	ldr	r3, [pc, #80]	; (8014a84 <dhcp_inc_pcb_refcount+0x8c>)
 8014a32:	681b      	ldr	r3, [r3, #0]
 8014a34:	7a5a      	ldrb	r2, [r3, #9]
 8014a36:	4b13      	ldr	r3, [pc, #76]	; (8014a84 <dhcp_inc_pcb_refcount+0x8c>)
 8014a38:	681b      	ldr	r3, [r3, #0]
 8014a3a:	f042 0220 	orr.w	r2, r2, #32
 8014a3e:	b2d2      	uxtb	r2, r2
 8014a40:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8014a42:	4b10      	ldr	r3, [pc, #64]	; (8014a84 <dhcp_inc_pcb_refcount+0x8c>)
 8014a44:	681b      	ldr	r3, [r3, #0]
 8014a46:	2244      	movs	r2, #68	; 0x44
 8014a48:	4912      	ldr	r1, [pc, #72]	; (8014a94 <dhcp_inc_pcb_refcount+0x9c>)
 8014a4a:	4618      	mov	r0, r3
 8014a4c:	f7ff fe34 	bl	80146b8 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8014a50:	4b0c      	ldr	r3, [pc, #48]	; (8014a84 <dhcp_inc_pcb_refcount+0x8c>)
 8014a52:	681b      	ldr	r3, [r3, #0]
 8014a54:	2243      	movs	r2, #67	; 0x43
 8014a56:	490f      	ldr	r1, [pc, #60]	; (8014a94 <dhcp_inc_pcb_refcount+0x9c>)
 8014a58:	4618      	mov	r0, r3
 8014a5a:	f7ff feb5 	bl	80147c8 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8014a5e:	4b09      	ldr	r3, [pc, #36]	; (8014a84 <dhcp_inc_pcb_refcount+0x8c>)
 8014a60:	681b      	ldr	r3, [r3, #0]
 8014a62:	2200      	movs	r2, #0
 8014a64:	490c      	ldr	r1, [pc, #48]	; (8014a98 <dhcp_inc_pcb_refcount+0xa0>)
 8014a66:	4618      	mov	r0, r3
 8014a68:	f7ff ff1c 	bl	80148a4 <udp_recv>
  }

  dhcp_pcb_refcount++;
 8014a6c:	4b04      	ldr	r3, [pc, #16]	; (8014a80 <dhcp_inc_pcb_refcount+0x88>)
 8014a6e:	781b      	ldrb	r3, [r3, #0]
 8014a70:	3301      	adds	r3, #1
 8014a72:	b2da      	uxtb	r2, r3
 8014a74:	4b02      	ldr	r3, [pc, #8]	; (8014a80 <dhcp_inc_pcb_refcount+0x88>)
 8014a76:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8014a78:	2300      	movs	r3, #0
}
 8014a7a:	4618      	mov	r0, r3
 8014a7c:	bd80      	pop	{r7, pc}
 8014a7e:	bf00      	nop
 8014a80:	20013880 	.word	0x20013880
 8014a84:	2001387c 	.word	0x2001387c
 8014a88:	0801c648 	.word	0x0801c648
 8014a8c:	0801c680 	.word	0x0801c680
 8014a90:	0801c6a8 	.word	0x0801c6a8
 8014a94:	0801d258 	.word	0x0801d258
 8014a98:	0801632d 	.word	0x0801632d

08014a9c <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8014a9c:	b580      	push	{r7, lr}
 8014a9e:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8014aa0:	4b0e      	ldr	r3, [pc, #56]	; (8014adc <dhcp_dec_pcb_refcount+0x40>)
 8014aa2:	781b      	ldrb	r3, [r3, #0]
 8014aa4:	2b00      	cmp	r3, #0
 8014aa6:	d105      	bne.n	8014ab4 <dhcp_dec_pcb_refcount+0x18>
 8014aa8:	4b0d      	ldr	r3, [pc, #52]	; (8014ae0 <dhcp_dec_pcb_refcount+0x44>)
 8014aaa:	22ff      	movs	r2, #255	; 0xff
 8014aac:	490d      	ldr	r1, [pc, #52]	; (8014ae4 <dhcp_dec_pcb_refcount+0x48>)
 8014aae:	480e      	ldr	r0, [pc, #56]	; (8014ae8 <dhcp_dec_pcb_refcount+0x4c>)
 8014ab0:	f004 fe40 	bl	8019734 <iprintf>
  dhcp_pcb_refcount--;
 8014ab4:	4b09      	ldr	r3, [pc, #36]	; (8014adc <dhcp_dec_pcb_refcount+0x40>)
 8014ab6:	781b      	ldrb	r3, [r3, #0]
 8014ab8:	3b01      	subs	r3, #1
 8014aba:	b2da      	uxtb	r2, r3
 8014abc:	4b07      	ldr	r3, [pc, #28]	; (8014adc <dhcp_dec_pcb_refcount+0x40>)
 8014abe:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8014ac0:	4b06      	ldr	r3, [pc, #24]	; (8014adc <dhcp_dec_pcb_refcount+0x40>)
 8014ac2:	781b      	ldrb	r3, [r3, #0]
 8014ac4:	2b00      	cmp	r3, #0
 8014ac6:	d107      	bne.n	8014ad8 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8014ac8:	4b08      	ldr	r3, [pc, #32]	; (8014aec <dhcp_dec_pcb_refcount+0x50>)
 8014aca:	681b      	ldr	r3, [r3, #0]
 8014acc:	4618      	mov	r0, r3
 8014ace:	f7ff ff09 	bl	80148e4 <udp_remove>
    dhcp_pcb = NULL;
 8014ad2:	4b06      	ldr	r3, [pc, #24]	; (8014aec <dhcp_dec_pcb_refcount+0x50>)
 8014ad4:	2200      	movs	r2, #0
 8014ad6:	601a      	str	r2, [r3, #0]
  }
}
 8014ad8:	bf00      	nop
 8014ada:	bd80      	pop	{r7, pc}
 8014adc:	20013880 	.word	0x20013880
 8014ae0:	0801c648 	.word	0x0801c648
 8014ae4:	0801c6d0 	.word	0x0801c6d0
 8014ae8:	0801c6a8 	.word	0x0801c6a8
 8014aec:	2001387c 	.word	0x2001387c

08014af0 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8014af0:	b580      	push	{r7, lr}
 8014af2:	b084      	sub	sp, #16
 8014af4:	af00      	add	r7, sp, #0
 8014af6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014af8:	687b      	ldr	r3, [r7, #4]
 8014afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014afc:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8014afe:	210c      	movs	r1, #12
 8014b00:	68f8      	ldr	r0, [r7, #12]
 8014b02:	f001 f855 	bl	8015bb0 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8014b06:	4b06      	ldr	r3, [pc, #24]	; (8014b20 <dhcp_handle_nak+0x30>)
 8014b08:	4a05      	ldr	r2, [pc, #20]	; (8014b20 <dhcp_handle_nak+0x30>)
 8014b0a:	4905      	ldr	r1, [pc, #20]	; (8014b20 <dhcp_handle_nak+0x30>)
 8014b0c:	6878      	ldr	r0, [r7, #4]
 8014b0e:	f7f9 f829 	bl	800db64 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8014b12:	6878      	ldr	r0, [r7, #4]
 8014b14:	f000 fc48 	bl	80153a8 <dhcp_discover>
}
 8014b18:	bf00      	nop
 8014b1a:	3710      	adds	r7, #16
 8014b1c:	46bd      	mov	sp, r7
 8014b1e:	bd80      	pop	{r7, pc}
 8014b20:	0801d258 	.word	0x0801d258

08014b24 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8014b24:	b580      	push	{r7, lr}
 8014b26:	b084      	sub	sp, #16
 8014b28:	af00      	add	r7, sp, #0
 8014b2a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014b2c:	687b      	ldr	r3, [r7, #4]
 8014b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b30:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8014b32:	2108      	movs	r1, #8
 8014b34:	68f8      	ldr	r0, [r7, #12]
 8014b36:	f001 f83b 	bl	8015bb0 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8014b3a:	68fb      	ldr	r3, [r7, #12]
 8014b3c:	331c      	adds	r3, #28
 8014b3e:	2200      	movs	r2, #0
 8014b40:	4619      	mov	r1, r3
 8014b42:	6878      	ldr	r0, [r7, #4]
 8014b44:	f002 fb3c 	bl	80171c0 <etharp_query>
 8014b48:	4603      	mov	r3, r0
 8014b4a:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8014b4c:	68fb      	ldr	r3, [r7, #12]
 8014b4e:	799b      	ldrb	r3, [r3, #6]
 8014b50:	2bff      	cmp	r3, #255	; 0xff
 8014b52:	d005      	beq.n	8014b60 <dhcp_check+0x3c>
    dhcp->tries++;
 8014b54:	68fb      	ldr	r3, [r7, #12]
 8014b56:	799b      	ldrb	r3, [r3, #6]
 8014b58:	3301      	adds	r3, #1
 8014b5a:	b2da      	uxtb	r2, r3
 8014b5c:	68fb      	ldr	r3, [r7, #12]
 8014b5e:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8014b60:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8014b64:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014b66:	893b      	ldrh	r3, [r7, #8]
 8014b68:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014b6c:	4a06      	ldr	r2, [pc, #24]	; (8014b88 <dhcp_check+0x64>)
 8014b6e:	fb82 1203 	smull	r1, r2, r2, r3
 8014b72:	1152      	asrs	r2, r2, #5
 8014b74:	17db      	asrs	r3, r3, #31
 8014b76:	1ad3      	subs	r3, r2, r3
 8014b78:	b29a      	uxth	r2, r3
 8014b7a:	68fb      	ldr	r3, [r7, #12]
 8014b7c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8014b7e:	bf00      	nop
 8014b80:	3710      	adds	r7, #16
 8014b82:	46bd      	mov	sp, r7
 8014b84:	bd80      	pop	{r7, pc}
 8014b86:	bf00      	nop
 8014b88:	10624dd3 	.word	0x10624dd3

08014b8c <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8014b8c:	b580      	push	{r7, lr}
 8014b8e:	b084      	sub	sp, #16
 8014b90:	af00      	add	r7, sp, #0
 8014b92:	6078      	str	r0, [r7, #4]
 8014b94:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014b96:	687b      	ldr	r3, [r7, #4]
 8014b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b9a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8014b9c:	4b0c      	ldr	r3, [pc, #48]	; (8014bd0 <dhcp_handle_offer+0x44>)
 8014b9e:	789b      	ldrb	r3, [r3, #2]
 8014ba0:	2b00      	cmp	r3, #0
 8014ba2:	d011      	beq.n	8014bc8 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8014ba4:	68fb      	ldr	r3, [r7, #12]
 8014ba6:	2200      	movs	r2, #0
 8014ba8:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8014baa:	4b0a      	ldr	r3, [pc, #40]	; (8014bd4 <dhcp_handle_offer+0x48>)
 8014bac:	689b      	ldr	r3, [r3, #8]
 8014bae:	4618      	mov	r0, r3
 8014bb0:	f7f8 f943 	bl	800ce3a <lwip_htonl>
 8014bb4:	4602      	mov	r2, r0
 8014bb6:	68fb      	ldr	r3, [r7, #12]
 8014bb8:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8014bba:	683b      	ldr	r3, [r7, #0]
 8014bbc:	691a      	ldr	r2, [r3, #16]
 8014bbe:	68fb      	ldr	r3, [r7, #12]
 8014bc0:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8014bc2:	6878      	ldr	r0, [r7, #4]
 8014bc4:	f000 f808 	bl	8014bd8 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8014bc8:	bf00      	nop
 8014bca:	3710      	adds	r7, #16
 8014bcc:	46bd      	mov	sp, r7
 8014bce:	bd80      	pop	{r7, pc}
 8014bd0:	2001b67c 	.word	0x2001b67c
 8014bd4:	2001b684 	.word	0x2001b684

08014bd8 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8014bd8:	b5b0      	push	{r4, r5, r7, lr}
 8014bda:	b08a      	sub	sp, #40	; 0x28
 8014bdc:	af02      	add	r7, sp, #8
 8014bde:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8014be0:	687b      	ldr	r3, [r7, #4]
 8014be2:	2b00      	cmp	r3, #0
 8014be4:	d109      	bne.n	8014bfa <dhcp_select+0x22>
 8014be6:	4b71      	ldr	r3, [pc, #452]	; (8014dac <dhcp_select+0x1d4>)
 8014be8:	f240 1277 	movw	r2, #375	; 0x177
 8014bec:	4970      	ldr	r1, [pc, #448]	; (8014db0 <dhcp_select+0x1d8>)
 8014bee:	4871      	ldr	r0, [pc, #452]	; (8014db4 <dhcp_select+0x1dc>)
 8014bf0:	f004 fda0 	bl	8019734 <iprintf>
 8014bf4:	f06f 030f 	mvn.w	r3, #15
 8014bf8:	e0d3      	b.n	8014da2 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 8014bfa:	687b      	ldr	r3, [r7, #4]
 8014bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014bfe:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8014c00:	69bb      	ldr	r3, [r7, #24]
 8014c02:	2b00      	cmp	r3, #0
 8014c04:	d109      	bne.n	8014c1a <dhcp_select+0x42>
 8014c06:	4b69      	ldr	r3, [pc, #420]	; (8014dac <dhcp_select+0x1d4>)
 8014c08:	f240 1279 	movw	r2, #377	; 0x179
 8014c0c:	496a      	ldr	r1, [pc, #424]	; (8014db8 <dhcp_select+0x1e0>)
 8014c0e:	4869      	ldr	r0, [pc, #420]	; (8014db4 <dhcp_select+0x1dc>)
 8014c10:	f004 fd90 	bl	8019734 <iprintf>
 8014c14:	f06f 0305 	mvn.w	r3, #5
 8014c18:	e0c3      	b.n	8014da2 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8014c1a:	2101      	movs	r1, #1
 8014c1c:	69b8      	ldr	r0, [r7, #24]
 8014c1e:	f000 ffc7 	bl	8015bb0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8014c22:	f107 030c 	add.w	r3, r7, #12
 8014c26:	2203      	movs	r2, #3
 8014c28:	69b9      	ldr	r1, [r7, #24]
 8014c2a:	6878      	ldr	r0, [r7, #4]
 8014c2c:	f001 fc4c 	bl	80164c8 <dhcp_create_msg>
 8014c30:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8014c32:	697b      	ldr	r3, [r7, #20]
 8014c34:	2b00      	cmp	r3, #0
 8014c36:	f000 8085 	beq.w	8014d44 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014c3a:	697b      	ldr	r3, [r7, #20]
 8014c3c:	685b      	ldr	r3, [r3, #4]
 8014c3e:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8014c40:	89b8      	ldrh	r0, [r7, #12]
 8014c42:	693b      	ldr	r3, [r7, #16]
 8014c44:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014c48:	2302      	movs	r3, #2
 8014c4a:	2239      	movs	r2, #57	; 0x39
 8014c4c:	f000 ffca 	bl	8015be4 <dhcp_option>
 8014c50:	4603      	mov	r3, r0
 8014c52:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8014c54:	89b8      	ldrh	r0, [r7, #12]
 8014c56:	693b      	ldr	r3, [r7, #16]
 8014c58:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014c5c:	687b      	ldr	r3, [r7, #4]
 8014c5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014c60:	461a      	mov	r2, r3
 8014c62:	f001 f819 	bl	8015c98 <dhcp_option_short>
 8014c66:	4603      	mov	r3, r0
 8014c68:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8014c6a:	89b8      	ldrh	r0, [r7, #12]
 8014c6c:	693b      	ldr	r3, [r7, #16]
 8014c6e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014c72:	2304      	movs	r3, #4
 8014c74:	2232      	movs	r2, #50	; 0x32
 8014c76:	f000 ffb5 	bl	8015be4 <dhcp_option>
 8014c7a:	4603      	mov	r3, r0
 8014c7c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8014c7e:	89bc      	ldrh	r4, [r7, #12]
 8014c80:	693b      	ldr	r3, [r7, #16]
 8014c82:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8014c86:	69bb      	ldr	r3, [r7, #24]
 8014c88:	69db      	ldr	r3, [r3, #28]
 8014c8a:	4618      	mov	r0, r3
 8014c8c:	f7f8 f8d5 	bl	800ce3a <lwip_htonl>
 8014c90:	4603      	mov	r3, r0
 8014c92:	461a      	mov	r2, r3
 8014c94:	4629      	mov	r1, r5
 8014c96:	4620      	mov	r0, r4
 8014c98:	f001 f830 	bl	8015cfc <dhcp_option_long>
 8014c9c:	4603      	mov	r3, r0
 8014c9e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8014ca0:	89b8      	ldrh	r0, [r7, #12]
 8014ca2:	693b      	ldr	r3, [r7, #16]
 8014ca4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014ca8:	2304      	movs	r3, #4
 8014caa:	2236      	movs	r2, #54	; 0x36
 8014cac:	f000 ff9a 	bl	8015be4 <dhcp_option>
 8014cb0:	4603      	mov	r3, r0
 8014cb2:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8014cb4:	89bc      	ldrh	r4, [r7, #12]
 8014cb6:	693b      	ldr	r3, [r7, #16]
 8014cb8:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8014cbc:	69bb      	ldr	r3, [r7, #24]
 8014cbe:	699b      	ldr	r3, [r3, #24]
 8014cc0:	4618      	mov	r0, r3
 8014cc2:	f7f8 f8ba 	bl	800ce3a <lwip_htonl>
 8014cc6:	4603      	mov	r3, r0
 8014cc8:	461a      	mov	r2, r3
 8014cca:	4629      	mov	r1, r5
 8014ccc:	4620      	mov	r0, r4
 8014cce:	f001 f815 	bl	8015cfc <dhcp_option_long>
 8014cd2:	4603      	mov	r3, r0
 8014cd4:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8014cd6:	89b8      	ldrh	r0, [r7, #12]
 8014cd8:	693b      	ldr	r3, [r7, #16]
 8014cda:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014cde:	2303      	movs	r3, #3
 8014ce0:	2237      	movs	r2, #55	; 0x37
 8014ce2:	f000 ff7f 	bl	8015be4 <dhcp_option>
 8014ce6:	4603      	mov	r3, r0
 8014ce8:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014cea:	2300      	movs	r3, #0
 8014cec:	77bb      	strb	r3, [r7, #30]
 8014cee:	e00e      	b.n	8014d0e <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8014cf0:	89b8      	ldrh	r0, [r7, #12]
 8014cf2:	693b      	ldr	r3, [r7, #16]
 8014cf4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014cf8:	7fbb      	ldrb	r3, [r7, #30]
 8014cfa:	4a30      	ldr	r2, [pc, #192]	; (8014dbc <dhcp_select+0x1e4>)
 8014cfc:	5cd3      	ldrb	r3, [r2, r3]
 8014cfe:	461a      	mov	r2, r3
 8014d00:	f000 ffa4 	bl	8015c4c <dhcp_option_byte>
 8014d04:	4603      	mov	r3, r0
 8014d06:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014d08:	7fbb      	ldrb	r3, [r7, #30]
 8014d0a:	3301      	adds	r3, #1
 8014d0c:	77bb      	strb	r3, [r7, #30]
 8014d0e:	7fbb      	ldrb	r3, [r7, #30]
 8014d10:	2b02      	cmp	r3, #2
 8014d12:	d9ed      	bls.n	8014cf0 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014d14:	89b8      	ldrh	r0, [r7, #12]
 8014d16:	693b      	ldr	r3, [r7, #16]
 8014d18:	33f0      	adds	r3, #240	; 0xf0
 8014d1a:	697a      	ldr	r2, [r7, #20]
 8014d1c:	4619      	mov	r1, r3
 8014d1e:	f001 fca9 	bl	8016674 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8014d22:	4b27      	ldr	r3, [pc, #156]	; (8014dc0 <dhcp_select+0x1e8>)
 8014d24:	6818      	ldr	r0, [r3, #0]
 8014d26:	4b27      	ldr	r3, [pc, #156]	; (8014dc4 <dhcp_select+0x1ec>)
 8014d28:	9301      	str	r3, [sp, #4]
 8014d2a:	687b      	ldr	r3, [r7, #4]
 8014d2c:	9300      	str	r3, [sp, #0]
 8014d2e:	2343      	movs	r3, #67	; 0x43
 8014d30:	4a25      	ldr	r2, [pc, #148]	; (8014dc8 <dhcp_select+0x1f0>)
 8014d32:	6979      	ldr	r1, [r7, #20]
 8014d34:	f7ff fbda 	bl	80144ec <udp_sendto_if_src>
 8014d38:	4603      	mov	r3, r0
 8014d3a:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8014d3c:	6978      	ldr	r0, [r7, #20]
 8014d3e:	f7f9 fc1f 	bl	800e580 <pbuf_free>
 8014d42:	e001      	b.n	8014d48 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8014d44:	23ff      	movs	r3, #255	; 0xff
 8014d46:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8014d48:	69bb      	ldr	r3, [r7, #24]
 8014d4a:	799b      	ldrb	r3, [r3, #6]
 8014d4c:	2bff      	cmp	r3, #255	; 0xff
 8014d4e:	d005      	beq.n	8014d5c <dhcp_select+0x184>
    dhcp->tries++;
 8014d50:	69bb      	ldr	r3, [r7, #24]
 8014d52:	799b      	ldrb	r3, [r3, #6]
 8014d54:	3301      	adds	r3, #1
 8014d56:	b2da      	uxtb	r2, r3
 8014d58:	69bb      	ldr	r3, [r7, #24]
 8014d5a:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8014d5c:	69bb      	ldr	r3, [r7, #24]
 8014d5e:	799b      	ldrb	r3, [r3, #6]
 8014d60:	2b05      	cmp	r3, #5
 8014d62:	d80d      	bhi.n	8014d80 <dhcp_select+0x1a8>
 8014d64:	69bb      	ldr	r3, [r7, #24]
 8014d66:	799b      	ldrb	r3, [r3, #6]
 8014d68:	461a      	mov	r2, r3
 8014d6a:	2301      	movs	r3, #1
 8014d6c:	4093      	lsls	r3, r2
 8014d6e:	b29b      	uxth	r3, r3
 8014d70:	461a      	mov	r2, r3
 8014d72:	0152      	lsls	r2, r2, #5
 8014d74:	1ad2      	subs	r2, r2, r3
 8014d76:	0092      	lsls	r2, r2, #2
 8014d78:	4413      	add	r3, r2
 8014d7a:	00db      	lsls	r3, r3, #3
 8014d7c:	b29b      	uxth	r3, r3
 8014d7e:	e001      	b.n	8014d84 <dhcp_select+0x1ac>
 8014d80:	f64e 2360 	movw	r3, #60000	; 0xea60
 8014d84:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014d86:	89fb      	ldrh	r3, [r7, #14]
 8014d88:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014d8c:	4a0f      	ldr	r2, [pc, #60]	; (8014dcc <dhcp_select+0x1f4>)
 8014d8e:	fb82 1203 	smull	r1, r2, r2, r3
 8014d92:	1152      	asrs	r2, r2, #5
 8014d94:	17db      	asrs	r3, r3, #31
 8014d96:	1ad3      	subs	r3, r2, r3
 8014d98:	b29a      	uxth	r2, r3
 8014d9a:	69bb      	ldr	r3, [r7, #24]
 8014d9c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8014d9e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014da2:	4618      	mov	r0, r3
 8014da4:	3720      	adds	r7, #32
 8014da6:	46bd      	mov	sp, r7
 8014da8:	bdb0      	pop	{r4, r5, r7, pc}
 8014daa:	bf00      	nop
 8014dac:	0801c648 	.word	0x0801c648
 8014db0:	0801c6f4 	.word	0x0801c6f4
 8014db4:	0801c6a8 	.word	0x0801c6a8
 8014db8:	0801c710 	.word	0x0801c710
 8014dbc:	2000001c 	.word	0x2000001c
 8014dc0:	2001387c 	.word	0x2001387c
 8014dc4:	0801d258 	.word	0x0801d258
 8014dc8:	0801d25c 	.word	0x0801d25c
 8014dcc:	10624dd3 	.word	0x10624dd3

08014dd0 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8014dd0:	b580      	push	{r7, lr}
 8014dd2:	b082      	sub	sp, #8
 8014dd4:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 8014dd6:	4b27      	ldr	r3, [pc, #156]	; (8014e74 <dhcp_coarse_tmr+0xa4>)
 8014dd8:	681b      	ldr	r3, [r3, #0]
 8014dda:	607b      	str	r3, [r7, #4]
 8014ddc:	e042      	b.n	8014e64 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8014dde:	687b      	ldr	r3, [r7, #4]
 8014de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014de2:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8014de4:	683b      	ldr	r3, [r7, #0]
 8014de6:	2b00      	cmp	r3, #0
 8014de8:	d039      	beq.n	8014e5e <dhcp_coarse_tmr+0x8e>
 8014dea:	683b      	ldr	r3, [r7, #0]
 8014dec:	795b      	ldrb	r3, [r3, #5]
 8014dee:	2b00      	cmp	r3, #0
 8014df0:	d035      	beq.n	8014e5e <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8014df2:	683b      	ldr	r3, [r7, #0]
 8014df4:	8a9b      	ldrh	r3, [r3, #20]
 8014df6:	2b00      	cmp	r3, #0
 8014df8:	d012      	beq.n	8014e20 <dhcp_coarse_tmr+0x50>
 8014dfa:	683b      	ldr	r3, [r7, #0]
 8014dfc:	8a5b      	ldrh	r3, [r3, #18]
 8014dfe:	3301      	adds	r3, #1
 8014e00:	b29a      	uxth	r2, r3
 8014e02:	683b      	ldr	r3, [r7, #0]
 8014e04:	825a      	strh	r2, [r3, #18]
 8014e06:	683b      	ldr	r3, [r7, #0]
 8014e08:	8a5a      	ldrh	r2, [r3, #18]
 8014e0a:	683b      	ldr	r3, [r7, #0]
 8014e0c:	8a9b      	ldrh	r3, [r3, #20]
 8014e0e:	429a      	cmp	r2, r3
 8014e10:	d106      	bne.n	8014e20 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 8014e12:	6878      	ldr	r0, [r7, #4]
 8014e14:	f000 fe32 	bl	8015a7c <dhcp_release_and_stop>
        dhcp_start(netif);
 8014e18:	6878      	ldr	r0, [r7, #4]
 8014e1a:	f000 f969 	bl	80150f0 <dhcp_start>
 8014e1e:	e01e      	b.n	8014e5e <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8014e20:	683b      	ldr	r3, [r7, #0]
 8014e22:	8a1b      	ldrh	r3, [r3, #16]
 8014e24:	2b00      	cmp	r3, #0
 8014e26:	d00b      	beq.n	8014e40 <dhcp_coarse_tmr+0x70>
 8014e28:	683b      	ldr	r3, [r7, #0]
 8014e2a:	8a1b      	ldrh	r3, [r3, #16]
 8014e2c:	1e5a      	subs	r2, r3, #1
 8014e2e:	b291      	uxth	r1, r2
 8014e30:	683a      	ldr	r2, [r7, #0]
 8014e32:	8211      	strh	r1, [r2, #16]
 8014e34:	2b01      	cmp	r3, #1
 8014e36:	d103      	bne.n	8014e40 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8014e38:	6878      	ldr	r0, [r7, #4]
 8014e3a:	f000 f8c6 	bl	8014fca <dhcp_t2_timeout>
 8014e3e:	e00e      	b.n	8014e5e <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8014e40:	683b      	ldr	r3, [r7, #0]
 8014e42:	89db      	ldrh	r3, [r3, #14]
 8014e44:	2b00      	cmp	r3, #0
 8014e46:	d00a      	beq.n	8014e5e <dhcp_coarse_tmr+0x8e>
 8014e48:	683b      	ldr	r3, [r7, #0]
 8014e4a:	89db      	ldrh	r3, [r3, #14]
 8014e4c:	1e5a      	subs	r2, r3, #1
 8014e4e:	b291      	uxth	r1, r2
 8014e50:	683a      	ldr	r2, [r7, #0]
 8014e52:	81d1      	strh	r1, [r2, #14]
 8014e54:	2b01      	cmp	r3, #1
 8014e56:	d102      	bne.n	8014e5e <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8014e58:	6878      	ldr	r0, [r7, #4]
 8014e5a:	f000 f888 	bl	8014f6e <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 8014e5e:	687b      	ldr	r3, [r7, #4]
 8014e60:	681b      	ldr	r3, [r3, #0]
 8014e62:	607b      	str	r3, [r7, #4]
 8014e64:	687b      	ldr	r3, [r7, #4]
 8014e66:	2b00      	cmp	r3, #0
 8014e68:	d1b9      	bne.n	8014dde <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 8014e6a:	bf00      	nop
 8014e6c:	bf00      	nop
 8014e6e:	3708      	adds	r7, #8
 8014e70:	46bd      	mov	sp, r7
 8014e72:	bd80      	pop	{r7, pc}
 8014e74:	2001b650 	.word	0x2001b650

08014e78 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8014e78:	b580      	push	{r7, lr}
 8014e7a:	b082      	sub	sp, #8
 8014e7c:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8014e7e:	4b16      	ldr	r3, [pc, #88]	; (8014ed8 <dhcp_fine_tmr+0x60>)
 8014e80:	681b      	ldr	r3, [r3, #0]
 8014e82:	607b      	str	r3, [r7, #4]
 8014e84:	e020      	b.n	8014ec8 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8014e86:	687b      	ldr	r3, [r7, #4]
 8014e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014e8a:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8014e8c:	683b      	ldr	r3, [r7, #0]
 8014e8e:	2b00      	cmp	r3, #0
 8014e90:	d017      	beq.n	8014ec2 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8014e92:	683b      	ldr	r3, [r7, #0]
 8014e94:	891b      	ldrh	r3, [r3, #8]
 8014e96:	2b01      	cmp	r3, #1
 8014e98:	d906      	bls.n	8014ea8 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8014e9a:	683b      	ldr	r3, [r7, #0]
 8014e9c:	891b      	ldrh	r3, [r3, #8]
 8014e9e:	3b01      	subs	r3, #1
 8014ea0:	b29a      	uxth	r2, r3
 8014ea2:	683b      	ldr	r3, [r7, #0]
 8014ea4:	811a      	strh	r2, [r3, #8]
 8014ea6:	e00c      	b.n	8014ec2 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8014ea8:	683b      	ldr	r3, [r7, #0]
 8014eaa:	891b      	ldrh	r3, [r3, #8]
 8014eac:	2b01      	cmp	r3, #1
 8014eae:	d108      	bne.n	8014ec2 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8014eb0:	683b      	ldr	r3, [r7, #0]
 8014eb2:	891b      	ldrh	r3, [r3, #8]
 8014eb4:	3b01      	subs	r3, #1
 8014eb6:	b29a      	uxth	r2, r3
 8014eb8:	683b      	ldr	r3, [r7, #0]
 8014eba:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8014ebc:	6878      	ldr	r0, [r7, #4]
 8014ebe:	f000 f80d 	bl	8014edc <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8014ec2:	687b      	ldr	r3, [r7, #4]
 8014ec4:	681b      	ldr	r3, [r3, #0]
 8014ec6:	607b      	str	r3, [r7, #4]
 8014ec8:	687b      	ldr	r3, [r7, #4]
 8014eca:	2b00      	cmp	r3, #0
 8014ecc:	d1db      	bne.n	8014e86 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8014ece:	bf00      	nop
 8014ed0:	bf00      	nop
 8014ed2:	3708      	adds	r7, #8
 8014ed4:	46bd      	mov	sp, r7
 8014ed6:	bd80      	pop	{r7, pc}
 8014ed8:	2001b650 	.word	0x2001b650

08014edc <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8014edc:	b580      	push	{r7, lr}
 8014ede:	b084      	sub	sp, #16
 8014ee0:	af00      	add	r7, sp, #0
 8014ee2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014ee4:	687b      	ldr	r3, [r7, #4]
 8014ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014ee8:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8014eea:	68fb      	ldr	r3, [r7, #12]
 8014eec:	795b      	ldrb	r3, [r3, #5]
 8014eee:	2b0c      	cmp	r3, #12
 8014ef0:	d003      	beq.n	8014efa <dhcp_timeout+0x1e>
 8014ef2:	68fb      	ldr	r3, [r7, #12]
 8014ef4:	795b      	ldrb	r3, [r3, #5]
 8014ef6:	2b06      	cmp	r3, #6
 8014ef8:	d103      	bne.n	8014f02 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8014efa:	6878      	ldr	r0, [r7, #4]
 8014efc:	f000 fa54 	bl	80153a8 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8014f00:	e031      	b.n	8014f66 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8014f02:	68fb      	ldr	r3, [r7, #12]
 8014f04:	795b      	ldrb	r3, [r3, #5]
 8014f06:	2b01      	cmp	r3, #1
 8014f08:	d10e      	bne.n	8014f28 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8014f0a:	68fb      	ldr	r3, [r7, #12]
 8014f0c:	799b      	ldrb	r3, [r3, #6]
 8014f0e:	2b05      	cmp	r3, #5
 8014f10:	d803      	bhi.n	8014f1a <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8014f12:	6878      	ldr	r0, [r7, #4]
 8014f14:	f7ff fe60 	bl	8014bd8 <dhcp_select>
}
 8014f18:	e025      	b.n	8014f66 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 8014f1a:	6878      	ldr	r0, [r7, #4]
 8014f1c:	f000 fdae 	bl	8015a7c <dhcp_release_and_stop>
      dhcp_start(netif);
 8014f20:	6878      	ldr	r0, [r7, #4]
 8014f22:	f000 f8e5 	bl	80150f0 <dhcp_start>
}
 8014f26:	e01e      	b.n	8014f66 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8014f28:	68fb      	ldr	r3, [r7, #12]
 8014f2a:	795b      	ldrb	r3, [r3, #5]
 8014f2c:	2b08      	cmp	r3, #8
 8014f2e:	d10b      	bne.n	8014f48 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8014f30:	68fb      	ldr	r3, [r7, #12]
 8014f32:	799b      	ldrb	r3, [r3, #6]
 8014f34:	2b01      	cmp	r3, #1
 8014f36:	d803      	bhi.n	8014f40 <dhcp_timeout+0x64>
      dhcp_check(netif);
 8014f38:	6878      	ldr	r0, [r7, #4]
 8014f3a:	f7ff fdf3 	bl	8014b24 <dhcp_check>
}
 8014f3e:	e012      	b.n	8014f66 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8014f40:	6878      	ldr	r0, [r7, #4]
 8014f42:	f000 fad3 	bl	80154ec <dhcp_bind>
}
 8014f46:	e00e      	b.n	8014f66 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8014f48:	68fb      	ldr	r3, [r7, #12]
 8014f4a:	795b      	ldrb	r3, [r3, #5]
 8014f4c:	2b03      	cmp	r3, #3
 8014f4e:	d10a      	bne.n	8014f66 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8014f50:	68fb      	ldr	r3, [r7, #12]
 8014f52:	799b      	ldrb	r3, [r3, #6]
 8014f54:	2b01      	cmp	r3, #1
 8014f56:	d803      	bhi.n	8014f60 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8014f58:	6878      	ldr	r0, [r7, #4]
 8014f5a:	f000 fcd9 	bl	8015910 <dhcp_reboot>
}
 8014f5e:	e002      	b.n	8014f66 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8014f60:	6878      	ldr	r0, [r7, #4]
 8014f62:	f000 fa21 	bl	80153a8 <dhcp_discover>
}
 8014f66:	bf00      	nop
 8014f68:	3710      	adds	r7, #16
 8014f6a:	46bd      	mov	sp, r7
 8014f6c:	bd80      	pop	{r7, pc}

08014f6e <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8014f6e:	b580      	push	{r7, lr}
 8014f70:	b084      	sub	sp, #16
 8014f72:	af00      	add	r7, sp, #0
 8014f74:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014f76:	687b      	ldr	r3, [r7, #4]
 8014f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014f7a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8014f7c:	68fb      	ldr	r3, [r7, #12]
 8014f7e:	795b      	ldrb	r3, [r3, #5]
 8014f80:	2b01      	cmp	r3, #1
 8014f82:	d007      	beq.n	8014f94 <dhcp_t1_timeout+0x26>
 8014f84:	68fb      	ldr	r3, [r7, #12]
 8014f86:	795b      	ldrb	r3, [r3, #5]
 8014f88:	2b0a      	cmp	r3, #10
 8014f8a:	d003      	beq.n	8014f94 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8014f8c:	68fb      	ldr	r3, [r7, #12]
 8014f8e:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8014f90:	2b05      	cmp	r3, #5
 8014f92:	d116      	bne.n	8014fc2 <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8014f94:	6878      	ldr	r0, [r7, #4]
 8014f96:	f000 fb83 	bl	80156a0 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8014f9a:	68fb      	ldr	r3, [r7, #12]
 8014f9c:	899b      	ldrh	r3, [r3, #12]
 8014f9e:	461a      	mov	r2, r3
 8014fa0:	68fb      	ldr	r3, [r7, #12]
 8014fa2:	8a5b      	ldrh	r3, [r3, #18]
 8014fa4:	1ad3      	subs	r3, r2, r3
 8014fa6:	2b01      	cmp	r3, #1
 8014fa8:	dd0b      	ble.n	8014fc2 <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8014faa:	68fb      	ldr	r3, [r7, #12]
 8014fac:	899b      	ldrh	r3, [r3, #12]
 8014fae:	461a      	mov	r2, r3
 8014fb0:	68fb      	ldr	r3, [r7, #12]
 8014fb2:	8a5b      	ldrh	r3, [r3, #18]
 8014fb4:	1ad3      	subs	r3, r2, r3
 8014fb6:	0fda      	lsrs	r2, r3, #31
 8014fb8:	4413      	add	r3, r2
 8014fba:	105b      	asrs	r3, r3, #1
 8014fbc:	b29a      	uxth	r2, r3
 8014fbe:	68fb      	ldr	r3, [r7, #12]
 8014fc0:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8014fc2:	bf00      	nop
 8014fc4:	3710      	adds	r7, #16
 8014fc6:	46bd      	mov	sp, r7
 8014fc8:	bd80      	pop	{r7, pc}

08014fca <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8014fca:	b580      	push	{r7, lr}
 8014fcc:	b084      	sub	sp, #16
 8014fce:	af00      	add	r7, sp, #0
 8014fd0:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014fd2:	687b      	ldr	r3, [r7, #4]
 8014fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014fd6:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8014fd8:	68fb      	ldr	r3, [r7, #12]
 8014fda:	795b      	ldrb	r3, [r3, #5]
 8014fdc:	2b01      	cmp	r3, #1
 8014fde:	d00b      	beq.n	8014ff8 <dhcp_t2_timeout+0x2e>
 8014fe0:	68fb      	ldr	r3, [r7, #12]
 8014fe2:	795b      	ldrb	r3, [r3, #5]
 8014fe4:	2b0a      	cmp	r3, #10
 8014fe6:	d007      	beq.n	8014ff8 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8014fe8:	68fb      	ldr	r3, [r7, #12]
 8014fea:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8014fec:	2b05      	cmp	r3, #5
 8014fee:	d003      	beq.n	8014ff8 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8014ff0:	68fb      	ldr	r3, [r7, #12]
 8014ff2:	795b      	ldrb	r3, [r3, #5]
 8014ff4:	2b04      	cmp	r3, #4
 8014ff6:	d116      	bne.n	8015026 <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8014ff8:	6878      	ldr	r0, [r7, #4]
 8014ffa:	f000 fbed 	bl	80157d8 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8014ffe:	68fb      	ldr	r3, [r7, #12]
 8015000:	8a9b      	ldrh	r3, [r3, #20]
 8015002:	461a      	mov	r2, r3
 8015004:	68fb      	ldr	r3, [r7, #12]
 8015006:	8a5b      	ldrh	r3, [r3, #18]
 8015008:	1ad3      	subs	r3, r2, r3
 801500a:	2b01      	cmp	r3, #1
 801500c:	dd0b      	ble.n	8015026 <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 801500e:	68fb      	ldr	r3, [r7, #12]
 8015010:	8a9b      	ldrh	r3, [r3, #20]
 8015012:	461a      	mov	r2, r3
 8015014:	68fb      	ldr	r3, [r7, #12]
 8015016:	8a5b      	ldrh	r3, [r3, #18]
 8015018:	1ad3      	subs	r3, r2, r3
 801501a:	0fda      	lsrs	r2, r3, #31
 801501c:	4413      	add	r3, r2
 801501e:	105b      	asrs	r3, r3, #1
 8015020:	b29a      	uxth	r2, r3
 8015022:	68fb      	ldr	r3, [r7, #12]
 8015024:	821a      	strh	r2, [r3, #16]
    }
  }
}
 8015026:	bf00      	nop
 8015028:	3710      	adds	r7, #16
 801502a:	46bd      	mov	sp, r7
 801502c:	bd80      	pop	{r7, pc}
	...

08015030 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8015030:	b580      	push	{r7, lr}
 8015032:	b084      	sub	sp, #16
 8015034:	af00      	add	r7, sp, #0
 8015036:	6078      	str	r0, [r7, #4]
 8015038:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801503a:	687b      	ldr	r3, [r7, #4]
 801503c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801503e:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8015040:	68fb      	ldr	r3, [r7, #12]
 8015042:	2200      	movs	r2, #0
 8015044:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8015046:	68fb      	ldr	r3, [r7, #12]
 8015048:	2200      	movs	r2, #0
 801504a:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 801504c:	4b26      	ldr	r3, [pc, #152]	; (80150e8 <dhcp_handle_ack+0xb8>)
 801504e:	78db      	ldrb	r3, [r3, #3]
 8015050:	2b00      	cmp	r3, #0
 8015052:	d003      	beq.n	801505c <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8015054:	4b25      	ldr	r3, [pc, #148]	; (80150ec <dhcp_handle_ack+0xbc>)
 8015056:	68da      	ldr	r2, [r3, #12]
 8015058:	68fb      	ldr	r3, [r7, #12]
 801505a:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 801505c:	4b22      	ldr	r3, [pc, #136]	; (80150e8 <dhcp_handle_ack+0xb8>)
 801505e:	791b      	ldrb	r3, [r3, #4]
 8015060:	2b00      	cmp	r3, #0
 8015062:	d004      	beq.n	801506e <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8015064:	4b21      	ldr	r3, [pc, #132]	; (80150ec <dhcp_handle_ack+0xbc>)
 8015066:	691a      	ldr	r2, [r3, #16]
 8015068:	68fb      	ldr	r3, [r7, #12]
 801506a:	62da      	str	r2, [r3, #44]	; 0x2c
 801506c:	e004      	b.n	8015078 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 801506e:	68fb      	ldr	r3, [r7, #12]
 8015070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015072:	085a      	lsrs	r2, r3, #1
 8015074:	68fb      	ldr	r3, [r7, #12]
 8015076:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8015078:	4b1b      	ldr	r3, [pc, #108]	; (80150e8 <dhcp_handle_ack+0xb8>)
 801507a:	795b      	ldrb	r3, [r3, #5]
 801507c:	2b00      	cmp	r3, #0
 801507e:	d004      	beq.n	801508a <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8015080:	4b1a      	ldr	r3, [pc, #104]	; (80150ec <dhcp_handle_ack+0xbc>)
 8015082:	695a      	ldr	r2, [r3, #20]
 8015084:	68fb      	ldr	r3, [r7, #12]
 8015086:	631a      	str	r2, [r3, #48]	; 0x30
 8015088:	e007      	b.n	801509a <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 801508a:	68fb      	ldr	r3, [r7, #12]
 801508c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801508e:	4613      	mov	r3, r2
 8015090:	00db      	lsls	r3, r3, #3
 8015092:	1a9b      	subs	r3, r3, r2
 8015094:	08da      	lsrs	r2, r3, #3
 8015096:	68fb      	ldr	r3, [r7, #12]
 8015098:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801509a:	683b      	ldr	r3, [r7, #0]
 801509c:	691a      	ldr	r2, [r3, #16]
 801509e:	68fb      	ldr	r3, [r7, #12]
 80150a0:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 80150a2:	4b11      	ldr	r3, [pc, #68]	; (80150e8 <dhcp_handle_ack+0xb8>)
 80150a4:	799b      	ldrb	r3, [r3, #6]
 80150a6:	2b00      	cmp	r3, #0
 80150a8:	d00b      	beq.n	80150c2 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 80150aa:	4b10      	ldr	r3, [pc, #64]	; (80150ec <dhcp_handle_ack+0xbc>)
 80150ac:	699b      	ldr	r3, [r3, #24]
 80150ae:	4618      	mov	r0, r3
 80150b0:	f7f7 fec3 	bl	800ce3a <lwip_htonl>
 80150b4:	4602      	mov	r2, r0
 80150b6:	68fb      	ldr	r3, [r7, #12]
 80150b8:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 80150ba:	68fb      	ldr	r3, [r7, #12]
 80150bc:	2201      	movs	r2, #1
 80150be:	71da      	strb	r2, [r3, #7]
 80150c0:	e002      	b.n	80150c8 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 80150c2:	68fb      	ldr	r3, [r7, #12]
 80150c4:	2200      	movs	r2, #0
 80150c6:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 80150c8:	4b07      	ldr	r3, [pc, #28]	; (80150e8 <dhcp_handle_ack+0xb8>)
 80150ca:	79db      	ldrb	r3, [r3, #7]
 80150cc:	2b00      	cmp	r3, #0
 80150ce:	d007      	beq.n	80150e0 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 80150d0:	4b06      	ldr	r3, [pc, #24]	; (80150ec <dhcp_handle_ack+0xbc>)
 80150d2:	69db      	ldr	r3, [r3, #28]
 80150d4:	4618      	mov	r0, r3
 80150d6:	f7f7 feb0 	bl	800ce3a <lwip_htonl>
 80150da:	4602      	mov	r2, r0
 80150dc:	68fb      	ldr	r3, [r7, #12]
 80150de:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 80150e0:	bf00      	nop
 80150e2:	3710      	adds	r7, #16
 80150e4:	46bd      	mov	sp, r7
 80150e6:	bd80      	pop	{r7, pc}
 80150e8:	2001b67c 	.word	0x2001b67c
 80150ec:	2001b684 	.word	0x2001b684

080150f0 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 80150f0:	b580      	push	{r7, lr}
 80150f2:	b084      	sub	sp, #16
 80150f4:	af00      	add	r7, sp, #0
 80150f6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 80150f8:	687b      	ldr	r3, [r7, #4]
 80150fa:	2b00      	cmp	r3, #0
 80150fc:	d109      	bne.n	8015112 <dhcp_start+0x22>
 80150fe:	4b37      	ldr	r3, [pc, #220]	; (80151dc <dhcp_start+0xec>)
 8015100:	f240 22e7 	movw	r2, #743	; 0x2e7
 8015104:	4936      	ldr	r1, [pc, #216]	; (80151e0 <dhcp_start+0xf0>)
 8015106:	4837      	ldr	r0, [pc, #220]	; (80151e4 <dhcp_start+0xf4>)
 8015108:	f004 fb14 	bl	8019734 <iprintf>
 801510c:	f06f 030f 	mvn.w	r3, #15
 8015110:	e060      	b.n	80151d4 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8015112:	687b      	ldr	r3, [r7, #4]
 8015114:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015118:	f003 0301 	and.w	r3, r3, #1
 801511c:	2b00      	cmp	r3, #0
 801511e:	d109      	bne.n	8015134 <dhcp_start+0x44>
 8015120:	4b2e      	ldr	r3, [pc, #184]	; (80151dc <dhcp_start+0xec>)
 8015122:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8015126:	4930      	ldr	r1, [pc, #192]	; (80151e8 <dhcp_start+0xf8>)
 8015128:	482e      	ldr	r0, [pc, #184]	; (80151e4 <dhcp_start+0xf4>)
 801512a:	f004 fb03 	bl	8019734 <iprintf>
 801512e:	f06f 030f 	mvn.w	r3, #15
 8015132:	e04f      	b.n	80151d4 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8015134:	687b      	ldr	r3, [r7, #4]
 8015136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015138:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 801513a:	687b      	ldr	r3, [r7, #4]
 801513c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801513e:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8015142:	d202      	bcs.n	801514a <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8015144:	f04f 33ff 	mov.w	r3, #4294967295
 8015148:	e044      	b.n	80151d4 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 801514a:	68fb      	ldr	r3, [r7, #12]
 801514c:	2b00      	cmp	r3, #0
 801514e:	d10d      	bne.n	801516c <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8015150:	2034      	movs	r0, #52	; 0x34
 8015152:	f7f8 f991 	bl	800d478 <mem_malloc>
 8015156:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8015158:	68fb      	ldr	r3, [r7, #12]
 801515a:	2b00      	cmp	r3, #0
 801515c:	d102      	bne.n	8015164 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 801515e:	f04f 33ff 	mov.w	r3, #4294967295
 8015162:	e037      	b.n	80151d4 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8015164:	687b      	ldr	r3, [r7, #4]
 8015166:	68fa      	ldr	r2, [r7, #12]
 8015168:	625a      	str	r2, [r3, #36]	; 0x24
 801516a:	e005      	b.n	8015178 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 801516c:	68fb      	ldr	r3, [r7, #12]
 801516e:	791b      	ldrb	r3, [r3, #4]
 8015170:	2b00      	cmp	r3, #0
 8015172:	d001      	beq.n	8015178 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8015174:	f7ff fc92 	bl	8014a9c <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8015178:	2234      	movs	r2, #52	; 0x34
 801517a:	2100      	movs	r1, #0
 801517c:	68f8      	ldr	r0, [r7, #12]
 801517e:	f003 ff03 	bl	8018f88 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8015182:	f7ff fc39 	bl	80149f8 <dhcp_inc_pcb_refcount>
 8015186:	4603      	mov	r3, r0
 8015188:	2b00      	cmp	r3, #0
 801518a:	d002      	beq.n	8015192 <dhcp_start+0xa2>
    return ERR_MEM;
 801518c:	f04f 33ff 	mov.w	r3, #4294967295
 8015190:	e020      	b.n	80151d4 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 8015192:	68fb      	ldr	r3, [r7, #12]
 8015194:	2201      	movs	r2, #1
 8015196:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8015198:	687b      	ldr	r3, [r7, #4]
 801519a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801519e:	f003 0304 	and.w	r3, r3, #4
 80151a2:	2b00      	cmp	r3, #0
 80151a4:	d105      	bne.n	80151b2 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 80151a6:	2102      	movs	r1, #2
 80151a8:	68f8      	ldr	r0, [r7, #12]
 80151aa:	f000 fd01 	bl	8015bb0 <dhcp_set_state>
    return ERR_OK;
 80151ae:	2300      	movs	r3, #0
 80151b0:	e010      	b.n	80151d4 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 80151b2:	6878      	ldr	r0, [r7, #4]
 80151b4:	f000 f8f8 	bl	80153a8 <dhcp_discover>
 80151b8:	4603      	mov	r3, r0
 80151ba:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 80151bc:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80151c0:	2b00      	cmp	r3, #0
 80151c2:	d005      	beq.n	80151d0 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 80151c4:	6878      	ldr	r0, [r7, #4]
 80151c6:	f000 fc59 	bl	8015a7c <dhcp_release_and_stop>
    return ERR_MEM;
 80151ca:	f04f 33ff 	mov.w	r3, #4294967295
 80151ce:	e001      	b.n	80151d4 <dhcp_start+0xe4>
  }
  return result;
 80151d0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80151d4:	4618      	mov	r0, r3
 80151d6:	3710      	adds	r7, #16
 80151d8:	46bd      	mov	sp, r7
 80151da:	bd80      	pop	{r7, pc}
 80151dc:	0801c648 	.word	0x0801c648
 80151e0:	0801c72c 	.word	0x0801c72c
 80151e4:	0801c6a8 	.word	0x0801c6a8
 80151e8:	0801c770 	.word	0x0801c770

080151ec <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 80151ec:	b580      	push	{r7, lr}
 80151ee:	b084      	sub	sp, #16
 80151f0:	af00      	add	r7, sp, #0
 80151f2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80151f4:	687b      	ldr	r3, [r7, #4]
 80151f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80151f8:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 80151fa:	68fb      	ldr	r3, [r7, #12]
 80151fc:	2b00      	cmp	r3, #0
 80151fe:	d025      	beq.n	801524c <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 8015200:	68fb      	ldr	r3, [r7, #12]
 8015202:	795b      	ldrb	r3, [r3, #5]
 8015204:	2b0a      	cmp	r3, #10
 8015206:	d008      	beq.n	801521a <dhcp_network_changed+0x2e>
 8015208:	2b0a      	cmp	r3, #10
 801520a:	dc0d      	bgt.n	8015228 <dhcp_network_changed+0x3c>
 801520c:	2b00      	cmp	r3, #0
 801520e:	d01f      	beq.n	8015250 <dhcp_network_changed+0x64>
 8015210:	2b00      	cmp	r3, #0
 8015212:	db09      	blt.n	8015228 <dhcp_network_changed+0x3c>
 8015214:	3b03      	subs	r3, #3
 8015216:	2b02      	cmp	r3, #2
 8015218:	d806      	bhi.n	8015228 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 801521a:	68fb      	ldr	r3, [r7, #12]
 801521c:	2200      	movs	r2, #0
 801521e:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 8015220:	6878      	ldr	r0, [r7, #4]
 8015222:	f000 fb75 	bl	8015910 <dhcp_reboot>
      break;
 8015226:	e014      	b.n	8015252 <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 8015228:	68fb      	ldr	r3, [r7, #12]
 801522a:	795b      	ldrb	r3, [r3, #5]
 801522c:	2b0c      	cmp	r3, #12
 801522e:	d906      	bls.n	801523e <dhcp_network_changed+0x52>
 8015230:	4b09      	ldr	r3, [pc, #36]	; (8015258 <dhcp_network_changed+0x6c>)
 8015232:	f240 326d 	movw	r2, #877	; 0x36d
 8015236:	4909      	ldr	r1, [pc, #36]	; (801525c <dhcp_network_changed+0x70>)
 8015238:	4809      	ldr	r0, [pc, #36]	; (8015260 <dhcp_network_changed+0x74>)
 801523a:	f004 fa7b 	bl	8019734 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 801523e:	68fb      	ldr	r3, [r7, #12]
 8015240:	2200      	movs	r2, #0
 8015242:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 8015244:	6878      	ldr	r0, [r7, #4]
 8015246:	f000 f8af 	bl	80153a8 <dhcp_discover>
      break;
 801524a:	e002      	b.n	8015252 <dhcp_network_changed+0x66>
    return;
 801524c:	bf00      	nop
 801524e:	e000      	b.n	8015252 <dhcp_network_changed+0x66>
      break;
 8015250:	bf00      	nop
  }
}
 8015252:	3710      	adds	r7, #16
 8015254:	46bd      	mov	sp, r7
 8015256:	bd80      	pop	{r7, pc}
 8015258:	0801c648 	.word	0x0801c648
 801525c:	0801c794 	.word	0x0801c794
 8015260:	0801c6a8 	.word	0x0801c6a8

08015264 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8015264:	b580      	push	{r7, lr}
 8015266:	b084      	sub	sp, #16
 8015268:	af00      	add	r7, sp, #0
 801526a:	6078      	str	r0, [r7, #4]
 801526c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801526e:	687b      	ldr	r3, [r7, #4]
 8015270:	2b00      	cmp	r3, #0
 8015272:	d107      	bne.n	8015284 <dhcp_arp_reply+0x20>
 8015274:	4b0e      	ldr	r3, [pc, #56]	; (80152b0 <dhcp_arp_reply+0x4c>)
 8015276:	f240 328b 	movw	r2, #907	; 0x38b
 801527a:	490e      	ldr	r1, [pc, #56]	; (80152b4 <dhcp_arp_reply+0x50>)
 801527c:	480e      	ldr	r0, [pc, #56]	; (80152b8 <dhcp_arp_reply+0x54>)
 801527e:	f004 fa59 	bl	8019734 <iprintf>
 8015282:	e012      	b.n	80152aa <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8015284:	687b      	ldr	r3, [r7, #4]
 8015286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015288:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 801528a:	68fb      	ldr	r3, [r7, #12]
 801528c:	2b00      	cmp	r3, #0
 801528e:	d00c      	beq.n	80152aa <dhcp_arp_reply+0x46>
 8015290:	68fb      	ldr	r3, [r7, #12]
 8015292:	795b      	ldrb	r3, [r3, #5]
 8015294:	2b08      	cmp	r3, #8
 8015296:	d108      	bne.n	80152aa <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8015298:	683b      	ldr	r3, [r7, #0]
 801529a:	681a      	ldr	r2, [r3, #0]
 801529c:	68fb      	ldr	r3, [r7, #12]
 801529e:	69db      	ldr	r3, [r3, #28]
 80152a0:	429a      	cmp	r2, r3
 80152a2:	d102      	bne.n	80152aa <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 80152a4:	6878      	ldr	r0, [r7, #4]
 80152a6:	f000 f809 	bl	80152bc <dhcp_decline>
    }
  }
}
 80152aa:	3710      	adds	r7, #16
 80152ac:	46bd      	mov	sp, r7
 80152ae:	bd80      	pop	{r7, pc}
 80152b0:	0801c648 	.word	0x0801c648
 80152b4:	0801c72c 	.word	0x0801c72c
 80152b8:	0801c6a8 	.word	0x0801c6a8

080152bc <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 80152bc:	b5b0      	push	{r4, r5, r7, lr}
 80152be:	b08a      	sub	sp, #40	; 0x28
 80152c0:	af02      	add	r7, sp, #8
 80152c2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80152c4:	687b      	ldr	r3, [r7, #4]
 80152c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80152c8:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 80152ca:	210c      	movs	r1, #12
 80152cc:	69b8      	ldr	r0, [r7, #24]
 80152ce:	f000 fc6f 	bl	8015bb0 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 80152d2:	f107 030c 	add.w	r3, r7, #12
 80152d6:	2204      	movs	r2, #4
 80152d8:	69b9      	ldr	r1, [r7, #24]
 80152da:	6878      	ldr	r0, [r7, #4]
 80152dc:	f001 f8f4 	bl	80164c8 <dhcp_create_msg>
 80152e0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80152e2:	697b      	ldr	r3, [r7, #20]
 80152e4:	2b00      	cmp	r3, #0
 80152e6:	d035      	beq.n	8015354 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80152e8:	697b      	ldr	r3, [r7, #20]
 80152ea:	685b      	ldr	r3, [r3, #4]
 80152ec:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80152ee:	89b8      	ldrh	r0, [r7, #12]
 80152f0:	693b      	ldr	r3, [r7, #16]
 80152f2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80152f6:	2304      	movs	r3, #4
 80152f8:	2232      	movs	r2, #50	; 0x32
 80152fa:	f000 fc73 	bl	8015be4 <dhcp_option>
 80152fe:	4603      	mov	r3, r0
 8015300:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8015302:	89bc      	ldrh	r4, [r7, #12]
 8015304:	693b      	ldr	r3, [r7, #16]
 8015306:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801530a:	69bb      	ldr	r3, [r7, #24]
 801530c:	69db      	ldr	r3, [r3, #28]
 801530e:	4618      	mov	r0, r3
 8015310:	f7f7 fd93 	bl	800ce3a <lwip_htonl>
 8015314:	4603      	mov	r3, r0
 8015316:	461a      	mov	r2, r3
 8015318:	4629      	mov	r1, r5
 801531a:	4620      	mov	r0, r4
 801531c:	f000 fcee 	bl	8015cfc <dhcp_option_long>
 8015320:	4603      	mov	r3, r0
 8015322:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8015324:	89b8      	ldrh	r0, [r7, #12]
 8015326:	693b      	ldr	r3, [r7, #16]
 8015328:	33f0      	adds	r3, #240	; 0xf0
 801532a:	697a      	ldr	r2, [r7, #20]
 801532c:	4619      	mov	r1, r3
 801532e:	f001 f9a1 	bl	8016674 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8015332:	4b19      	ldr	r3, [pc, #100]	; (8015398 <dhcp_decline+0xdc>)
 8015334:	6818      	ldr	r0, [r3, #0]
 8015336:	4b19      	ldr	r3, [pc, #100]	; (801539c <dhcp_decline+0xe0>)
 8015338:	9301      	str	r3, [sp, #4]
 801533a:	687b      	ldr	r3, [r7, #4]
 801533c:	9300      	str	r3, [sp, #0]
 801533e:	2343      	movs	r3, #67	; 0x43
 8015340:	4a17      	ldr	r2, [pc, #92]	; (80153a0 <dhcp_decline+0xe4>)
 8015342:	6979      	ldr	r1, [r7, #20]
 8015344:	f7ff f8d2 	bl	80144ec <udp_sendto_if_src>
 8015348:	4603      	mov	r3, r0
 801534a:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801534c:	6978      	ldr	r0, [r7, #20]
 801534e:	f7f9 f917 	bl	800e580 <pbuf_free>
 8015352:	e001      	b.n	8015358 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8015354:	23ff      	movs	r3, #255	; 0xff
 8015356:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8015358:	69bb      	ldr	r3, [r7, #24]
 801535a:	799b      	ldrb	r3, [r3, #6]
 801535c:	2bff      	cmp	r3, #255	; 0xff
 801535e:	d005      	beq.n	801536c <dhcp_decline+0xb0>
    dhcp->tries++;
 8015360:	69bb      	ldr	r3, [r7, #24]
 8015362:	799b      	ldrb	r3, [r3, #6]
 8015364:	3301      	adds	r3, #1
 8015366:	b2da      	uxtb	r2, r3
 8015368:	69bb      	ldr	r3, [r7, #24]
 801536a:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 801536c:	f242 7310 	movw	r3, #10000	; 0x2710
 8015370:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8015372:	89fb      	ldrh	r3, [r7, #14]
 8015374:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8015378:	4a0a      	ldr	r2, [pc, #40]	; (80153a4 <dhcp_decline+0xe8>)
 801537a:	fb82 1203 	smull	r1, r2, r2, r3
 801537e:	1152      	asrs	r2, r2, #5
 8015380:	17db      	asrs	r3, r3, #31
 8015382:	1ad3      	subs	r3, r2, r3
 8015384:	b29a      	uxth	r2, r3
 8015386:	69bb      	ldr	r3, [r7, #24]
 8015388:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801538a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801538e:	4618      	mov	r0, r3
 8015390:	3720      	adds	r7, #32
 8015392:	46bd      	mov	sp, r7
 8015394:	bdb0      	pop	{r4, r5, r7, pc}
 8015396:	bf00      	nop
 8015398:	2001387c 	.word	0x2001387c
 801539c:	0801d258 	.word	0x0801d258
 80153a0:	0801d25c 	.word	0x0801d25c
 80153a4:	10624dd3 	.word	0x10624dd3

080153a8 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 80153a8:	b580      	push	{r7, lr}
 80153aa:	b08a      	sub	sp, #40	; 0x28
 80153ac:	af02      	add	r7, sp, #8
 80153ae:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80153b0:	687b      	ldr	r3, [r7, #4]
 80153b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80153b4:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 80153b6:	2300      	movs	r3, #0
 80153b8:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 80153ba:	69bb      	ldr	r3, [r7, #24]
 80153bc:	2200      	movs	r2, #0
 80153be:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 80153c0:	2106      	movs	r1, #6
 80153c2:	69b8      	ldr	r0, [r7, #24]
 80153c4:	f000 fbf4 	bl	8015bb0 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 80153c8:	f107 0308 	add.w	r3, r7, #8
 80153cc:	2201      	movs	r2, #1
 80153ce:	69b9      	ldr	r1, [r7, #24]
 80153d0:	6878      	ldr	r0, [r7, #4]
 80153d2:	f001 f879 	bl	80164c8 <dhcp_create_msg>
 80153d6:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 80153d8:	693b      	ldr	r3, [r7, #16]
 80153da:	2b00      	cmp	r3, #0
 80153dc:	d04b      	beq.n	8015476 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80153de:	693b      	ldr	r3, [r7, #16]
 80153e0:	685b      	ldr	r3, [r3, #4]
 80153e2:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80153e4:	8938      	ldrh	r0, [r7, #8]
 80153e6:	68fb      	ldr	r3, [r7, #12]
 80153e8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80153ec:	2302      	movs	r3, #2
 80153ee:	2239      	movs	r2, #57	; 0x39
 80153f0:	f000 fbf8 	bl	8015be4 <dhcp_option>
 80153f4:	4603      	mov	r3, r0
 80153f6:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80153f8:	8938      	ldrh	r0, [r7, #8]
 80153fa:	68fb      	ldr	r3, [r7, #12]
 80153fc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015400:	687b      	ldr	r3, [r7, #4]
 8015402:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015404:	461a      	mov	r2, r3
 8015406:	f000 fc47 	bl	8015c98 <dhcp_option_short>
 801540a:	4603      	mov	r3, r0
 801540c:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801540e:	8938      	ldrh	r0, [r7, #8]
 8015410:	68fb      	ldr	r3, [r7, #12]
 8015412:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015416:	2303      	movs	r3, #3
 8015418:	2237      	movs	r2, #55	; 0x37
 801541a:	f000 fbe3 	bl	8015be4 <dhcp_option>
 801541e:	4603      	mov	r3, r0
 8015420:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015422:	2300      	movs	r3, #0
 8015424:	77fb      	strb	r3, [r7, #31]
 8015426:	e00e      	b.n	8015446 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8015428:	8938      	ldrh	r0, [r7, #8]
 801542a:	68fb      	ldr	r3, [r7, #12]
 801542c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015430:	7ffb      	ldrb	r3, [r7, #31]
 8015432:	4a29      	ldr	r2, [pc, #164]	; (80154d8 <dhcp_discover+0x130>)
 8015434:	5cd3      	ldrb	r3, [r2, r3]
 8015436:	461a      	mov	r2, r3
 8015438:	f000 fc08 	bl	8015c4c <dhcp_option_byte>
 801543c:	4603      	mov	r3, r0
 801543e:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015440:	7ffb      	ldrb	r3, [r7, #31]
 8015442:	3301      	adds	r3, #1
 8015444:	77fb      	strb	r3, [r7, #31]
 8015446:	7ffb      	ldrb	r3, [r7, #31]
 8015448:	2b02      	cmp	r3, #2
 801544a:	d9ed      	bls.n	8015428 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801544c:	8938      	ldrh	r0, [r7, #8]
 801544e:	68fb      	ldr	r3, [r7, #12]
 8015450:	33f0      	adds	r3, #240	; 0xf0
 8015452:	693a      	ldr	r2, [r7, #16]
 8015454:	4619      	mov	r1, r3
 8015456:	f001 f90d 	bl	8016674 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801545a:	4b20      	ldr	r3, [pc, #128]	; (80154dc <dhcp_discover+0x134>)
 801545c:	6818      	ldr	r0, [r3, #0]
 801545e:	4b20      	ldr	r3, [pc, #128]	; (80154e0 <dhcp_discover+0x138>)
 8015460:	9301      	str	r3, [sp, #4]
 8015462:	687b      	ldr	r3, [r7, #4]
 8015464:	9300      	str	r3, [sp, #0]
 8015466:	2343      	movs	r3, #67	; 0x43
 8015468:	4a1e      	ldr	r2, [pc, #120]	; (80154e4 <dhcp_discover+0x13c>)
 801546a:	6939      	ldr	r1, [r7, #16]
 801546c:	f7ff f83e 	bl	80144ec <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8015470:	6938      	ldr	r0, [r7, #16]
 8015472:	f7f9 f885 	bl	800e580 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8015476:	69bb      	ldr	r3, [r7, #24]
 8015478:	799b      	ldrb	r3, [r3, #6]
 801547a:	2bff      	cmp	r3, #255	; 0xff
 801547c:	d005      	beq.n	801548a <dhcp_discover+0xe2>
    dhcp->tries++;
 801547e:	69bb      	ldr	r3, [r7, #24]
 8015480:	799b      	ldrb	r3, [r3, #6]
 8015482:	3301      	adds	r3, #1
 8015484:	b2da      	uxtb	r2, r3
 8015486:	69bb      	ldr	r3, [r7, #24]
 8015488:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801548a:	69bb      	ldr	r3, [r7, #24]
 801548c:	799b      	ldrb	r3, [r3, #6]
 801548e:	2b05      	cmp	r3, #5
 8015490:	d80d      	bhi.n	80154ae <dhcp_discover+0x106>
 8015492:	69bb      	ldr	r3, [r7, #24]
 8015494:	799b      	ldrb	r3, [r3, #6]
 8015496:	461a      	mov	r2, r3
 8015498:	2301      	movs	r3, #1
 801549a:	4093      	lsls	r3, r2
 801549c:	b29b      	uxth	r3, r3
 801549e:	461a      	mov	r2, r3
 80154a0:	0152      	lsls	r2, r2, #5
 80154a2:	1ad2      	subs	r2, r2, r3
 80154a4:	0092      	lsls	r2, r2, #2
 80154a6:	4413      	add	r3, r2
 80154a8:	00db      	lsls	r3, r3, #3
 80154aa:	b29b      	uxth	r3, r3
 80154ac:	e001      	b.n	80154b2 <dhcp_discover+0x10a>
 80154ae:	f64e 2360 	movw	r3, #60000	; 0xea60
 80154b2:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80154b4:	897b      	ldrh	r3, [r7, #10]
 80154b6:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80154ba:	4a0b      	ldr	r2, [pc, #44]	; (80154e8 <dhcp_discover+0x140>)
 80154bc:	fb82 1203 	smull	r1, r2, r2, r3
 80154c0:	1152      	asrs	r2, r2, #5
 80154c2:	17db      	asrs	r3, r3, #31
 80154c4:	1ad3      	subs	r3, r2, r3
 80154c6:	b29a      	uxth	r2, r3
 80154c8:	69bb      	ldr	r3, [r7, #24]
 80154ca:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80154cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80154d0:	4618      	mov	r0, r3
 80154d2:	3720      	adds	r7, #32
 80154d4:	46bd      	mov	sp, r7
 80154d6:	bd80      	pop	{r7, pc}
 80154d8:	2000001c 	.word	0x2000001c
 80154dc:	2001387c 	.word	0x2001387c
 80154e0:	0801d258 	.word	0x0801d258
 80154e4:	0801d25c 	.word	0x0801d25c
 80154e8:	10624dd3 	.word	0x10624dd3

080154ec <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 80154ec:	b580      	push	{r7, lr}
 80154ee:	b088      	sub	sp, #32
 80154f0:	af00      	add	r7, sp, #0
 80154f2:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 80154f4:	687b      	ldr	r3, [r7, #4]
 80154f6:	2b00      	cmp	r3, #0
 80154f8:	d107      	bne.n	801550a <dhcp_bind+0x1e>
 80154fa:	4b64      	ldr	r3, [pc, #400]	; (801568c <dhcp_bind+0x1a0>)
 80154fc:	f240 4215 	movw	r2, #1045	; 0x415
 8015500:	4963      	ldr	r1, [pc, #396]	; (8015690 <dhcp_bind+0x1a4>)
 8015502:	4864      	ldr	r0, [pc, #400]	; (8015694 <dhcp_bind+0x1a8>)
 8015504:	f004 f916 	bl	8019734 <iprintf>
 8015508:	e0bc      	b.n	8015684 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 801550a:	687b      	ldr	r3, [r7, #4]
 801550c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801550e:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8015510:	69bb      	ldr	r3, [r7, #24]
 8015512:	2b00      	cmp	r3, #0
 8015514:	d107      	bne.n	8015526 <dhcp_bind+0x3a>
 8015516:	4b5d      	ldr	r3, [pc, #372]	; (801568c <dhcp_bind+0x1a0>)
 8015518:	f240 4217 	movw	r2, #1047	; 0x417
 801551c:	495e      	ldr	r1, [pc, #376]	; (8015698 <dhcp_bind+0x1ac>)
 801551e:	485d      	ldr	r0, [pc, #372]	; (8015694 <dhcp_bind+0x1a8>)
 8015520:	f004 f908 	bl	8019734 <iprintf>
 8015524:	e0ae      	b.n	8015684 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 8015526:	69bb      	ldr	r3, [r7, #24]
 8015528:	2200      	movs	r2, #0
 801552a:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 801552c:	69bb      	ldr	r3, [r7, #24]
 801552e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015534:	d019      	beq.n	801556a <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8015536:	69bb      	ldr	r3, [r7, #24]
 8015538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801553a:	331e      	adds	r3, #30
 801553c:	4a57      	ldr	r2, [pc, #348]	; (801569c <dhcp_bind+0x1b0>)
 801553e:	fba2 2303 	umull	r2, r3, r2, r3
 8015542:	095b      	lsrs	r3, r3, #5
 8015544:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8015546:	69fb      	ldr	r3, [r7, #28]
 8015548:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801554c:	d302      	bcc.n	8015554 <dhcp_bind+0x68>
      timeout = 0xffff;
 801554e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015552:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8015554:	69fb      	ldr	r3, [r7, #28]
 8015556:	b29a      	uxth	r2, r3
 8015558:	69bb      	ldr	r3, [r7, #24]
 801555a:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 801555c:	69bb      	ldr	r3, [r7, #24]
 801555e:	8a9b      	ldrh	r3, [r3, #20]
 8015560:	2b00      	cmp	r3, #0
 8015562:	d102      	bne.n	801556a <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 8015564:	69bb      	ldr	r3, [r7, #24]
 8015566:	2201      	movs	r2, #1
 8015568:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 801556a:	69bb      	ldr	r3, [r7, #24]
 801556c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801556e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015572:	d01d      	beq.n	80155b0 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8015574:	69bb      	ldr	r3, [r7, #24]
 8015576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015578:	331e      	adds	r3, #30
 801557a:	4a48      	ldr	r2, [pc, #288]	; (801569c <dhcp_bind+0x1b0>)
 801557c:	fba2 2303 	umull	r2, r3, r2, r3
 8015580:	095b      	lsrs	r3, r3, #5
 8015582:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8015584:	69fb      	ldr	r3, [r7, #28]
 8015586:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801558a:	d302      	bcc.n	8015592 <dhcp_bind+0xa6>
      timeout = 0xffff;
 801558c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015590:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 8015592:	69fb      	ldr	r3, [r7, #28]
 8015594:	b29a      	uxth	r2, r3
 8015596:	69bb      	ldr	r3, [r7, #24]
 8015598:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 801559a:	69bb      	ldr	r3, [r7, #24]
 801559c:	895b      	ldrh	r3, [r3, #10]
 801559e:	2b00      	cmp	r3, #0
 80155a0:	d102      	bne.n	80155a8 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 80155a2:	69bb      	ldr	r3, [r7, #24]
 80155a4:	2201      	movs	r2, #1
 80155a6:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 80155a8:	69bb      	ldr	r3, [r7, #24]
 80155aa:	895a      	ldrh	r2, [r3, #10]
 80155ac:	69bb      	ldr	r3, [r7, #24]
 80155ae:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 80155b0:	69bb      	ldr	r3, [r7, #24]
 80155b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80155b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80155b8:	d01d      	beq.n	80155f6 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80155ba:	69bb      	ldr	r3, [r7, #24]
 80155bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80155be:	331e      	adds	r3, #30
 80155c0:	4a36      	ldr	r2, [pc, #216]	; (801569c <dhcp_bind+0x1b0>)
 80155c2:	fba2 2303 	umull	r2, r3, r2, r3
 80155c6:	095b      	lsrs	r3, r3, #5
 80155c8:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80155ca:	69fb      	ldr	r3, [r7, #28]
 80155cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80155d0:	d302      	bcc.n	80155d8 <dhcp_bind+0xec>
      timeout = 0xffff;
 80155d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80155d6:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 80155d8:	69fb      	ldr	r3, [r7, #28]
 80155da:	b29a      	uxth	r2, r3
 80155dc:	69bb      	ldr	r3, [r7, #24]
 80155de:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 80155e0:	69bb      	ldr	r3, [r7, #24]
 80155e2:	899b      	ldrh	r3, [r3, #12]
 80155e4:	2b00      	cmp	r3, #0
 80155e6:	d102      	bne.n	80155ee <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 80155e8:	69bb      	ldr	r3, [r7, #24]
 80155ea:	2201      	movs	r2, #1
 80155ec:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 80155ee:	69bb      	ldr	r3, [r7, #24]
 80155f0:	899a      	ldrh	r2, [r3, #12]
 80155f2:	69bb      	ldr	r3, [r7, #24]
 80155f4:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 80155f6:	69bb      	ldr	r3, [r7, #24]
 80155f8:	895a      	ldrh	r2, [r3, #10]
 80155fa:	69bb      	ldr	r3, [r7, #24]
 80155fc:	899b      	ldrh	r3, [r3, #12]
 80155fe:	429a      	cmp	r2, r3
 8015600:	d306      	bcc.n	8015610 <dhcp_bind+0x124>
 8015602:	69bb      	ldr	r3, [r7, #24]
 8015604:	899b      	ldrh	r3, [r3, #12]
 8015606:	2b00      	cmp	r3, #0
 8015608:	d002      	beq.n	8015610 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 801560a:	69bb      	ldr	r3, [r7, #24]
 801560c:	2200      	movs	r2, #0
 801560e:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8015610:	69bb      	ldr	r3, [r7, #24]
 8015612:	79db      	ldrb	r3, [r3, #7]
 8015614:	2b00      	cmp	r3, #0
 8015616:	d003      	beq.n	8015620 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8015618:	69bb      	ldr	r3, [r7, #24]
 801561a:	6a1b      	ldr	r3, [r3, #32]
 801561c:	613b      	str	r3, [r7, #16]
 801561e:	e014      	b.n	801564a <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8015620:	69bb      	ldr	r3, [r7, #24]
 8015622:	331c      	adds	r3, #28
 8015624:	781b      	ldrb	r3, [r3, #0]
 8015626:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8015628:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801562c:	2b00      	cmp	r3, #0
 801562e:	db02      	blt.n	8015636 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8015630:	23ff      	movs	r3, #255	; 0xff
 8015632:	613b      	str	r3, [r7, #16]
 8015634:	e009      	b.n	801564a <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 8015636:	7dfb      	ldrb	r3, [r7, #23]
 8015638:	2bbf      	cmp	r3, #191	; 0xbf
 801563a:	d903      	bls.n	8015644 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 801563c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8015640:	613b      	str	r3, [r7, #16]
 8015642:	e002      	b.n	801564a <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8015644:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015648:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 801564a:	69bb      	ldr	r3, [r7, #24]
 801564c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801564e:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8015650:	68fb      	ldr	r3, [r7, #12]
 8015652:	2b00      	cmp	r3, #0
 8015654:	d108      	bne.n	8015668 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8015656:	69bb      	ldr	r3, [r7, #24]
 8015658:	69da      	ldr	r2, [r3, #28]
 801565a:	693b      	ldr	r3, [r7, #16]
 801565c:	4013      	ands	r3, r2
 801565e:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8015660:	68fb      	ldr	r3, [r7, #12]
 8015662:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8015666:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8015668:	210a      	movs	r1, #10
 801566a:	69b8      	ldr	r0, [r7, #24]
 801566c:	f000 faa0 	bl	8015bb0 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8015670:	69bb      	ldr	r3, [r7, #24]
 8015672:	f103 011c 	add.w	r1, r3, #28
 8015676:	f107 030c 	add.w	r3, r7, #12
 801567a:	f107 0210 	add.w	r2, r7, #16
 801567e:	6878      	ldr	r0, [r7, #4]
 8015680:	f7f8 fa70 	bl	800db64 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8015684:	3720      	adds	r7, #32
 8015686:	46bd      	mov	sp, r7
 8015688:	bd80      	pop	{r7, pc}
 801568a:	bf00      	nop
 801568c:	0801c648 	.word	0x0801c648
 8015690:	0801c7a8 	.word	0x0801c7a8
 8015694:	0801c6a8 	.word	0x0801c6a8
 8015698:	0801c7c4 	.word	0x0801c7c4
 801569c:	88888889 	.word	0x88888889

080156a0 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 80156a0:	b580      	push	{r7, lr}
 80156a2:	b08a      	sub	sp, #40	; 0x28
 80156a4:	af02      	add	r7, sp, #8
 80156a6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80156a8:	687b      	ldr	r3, [r7, #4]
 80156aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80156ac:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 80156ae:	2105      	movs	r1, #5
 80156b0:	69b8      	ldr	r0, [r7, #24]
 80156b2:	f000 fa7d 	bl	8015bb0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80156b6:	f107 030c 	add.w	r3, r7, #12
 80156ba:	2203      	movs	r2, #3
 80156bc:	69b9      	ldr	r1, [r7, #24]
 80156be:	6878      	ldr	r0, [r7, #4]
 80156c0:	f000 ff02 	bl	80164c8 <dhcp_create_msg>
 80156c4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80156c6:	697b      	ldr	r3, [r7, #20]
 80156c8:	2b00      	cmp	r3, #0
 80156ca:	d04e      	beq.n	801576a <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80156cc:	697b      	ldr	r3, [r7, #20]
 80156ce:	685b      	ldr	r3, [r3, #4]
 80156d0:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80156d2:	89b8      	ldrh	r0, [r7, #12]
 80156d4:	693b      	ldr	r3, [r7, #16]
 80156d6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80156da:	2302      	movs	r3, #2
 80156dc:	2239      	movs	r2, #57	; 0x39
 80156de:	f000 fa81 	bl	8015be4 <dhcp_option>
 80156e2:	4603      	mov	r3, r0
 80156e4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80156e6:	89b8      	ldrh	r0, [r7, #12]
 80156e8:	693b      	ldr	r3, [r7, #16]
 80156ea:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80156ee:	687b      	ldr	r3, [r7, #4]
 80156f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80156f2:	461a      	mov	r2, r3
 80156f4:	f000 fad0 	bl	8015c98 <dhcp_option_short>
 80156f8:	4603      	mov	r3, r0
 80156fa:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80156fc:	89b8      	ldrh	r0, [r7, #12]
 80156fe:	693b      	ldr	r3, [r7, #16]
 8015700:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015704:	2303      	movs	r3, #3
 8015706:	2237      	movs	r2, #55	; 0x37
 8015708:	f000 fa6c 	bl	8015be4 <dhcp_option>
 801570c:	4603      	mov	r3, r0
 801570e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015710:	2300      	movs	r3, #0
 8015712:	77bb      	strb	r3, [r7, #30]
 8015714:	e00e      	b.n	8015734 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8015716:	89b8      	ldrh	r0, [r7, #12]
 8015718:	693b      	ldr	r3, [r7, #16]
 801571a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801571e:	7fbb      	ldrb	r3, [r7, #30]
 8015720:	4a2a      	ldr	r2, [pc, #168]	; (80157cc <dhcp_renew+0x12c>)
 8015722:	5cd3      	ldrb	r3, [r2, r3]
 8015724:	461a      	mov	r2, r3
 8015726:	f000 fa91 	bl	8015c4c <dhcp_option_byte>
 801572a:	4603      	mov	r3, r0
 801572c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801572e:	7fbb      	ldrb	r3, [r7, #30]
 8015730:	3301      	adds	r3, #1
 8015732:	77bb      	strb	r3, [r7, #30]
 8015734:	7fbb      	ldrb	r3, [r7, #30]
 8015736:	2b02      	cmp	r3, #2
 8015738:	d9ed      	bls.n	8015716 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801573a:	89b8      	ldrh	r0, [r7, #12]
 801573c:	693b      	ldr	r3, [r7, #16]
 801573e:	33f0      	adds	r3, #240	; 0xf0
 8015740:	697a      	ldr	r2, [r7, #20]
 8015742:	4619      	mov	r1, r3
 8015744:	f000 ff96 	bl	8016674 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8015748:	4b21      	ldr	r3, [pc, #132]	; (80157d0 <dhcp_renew+0x130>)
 801574a:	6818      	ldr	r0, [r3, #0]
 801574c:	69bb      	ldr	r3, [r7, #24]
 801574e:	f103 0218 	add.w	r2, r3, #24
 8015752:	687b      	ldr	r3, [r7, #4]
 8015754:	9300      	str	r3, [sp, #0]
 8015756:	2343      	movs	r3, #67	; 0x43
 8015758:	6979      	ldr	r1, [r7, #20]
 801575a:	f7fe fe53 	bl	8014404 <udp_sendto_if>
 801575e:	4603      	mov	r3, r0
 8015760:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8015762:	6978      	ldr	r0, [r7, #20]
 8015764:	f7f8 ff0c 	bl	800e580 <pbuf_free>
 8015768:	e001      	b.n	801576e <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801576a:	23ff      	movs	r3, #255	; 0xff
 801576c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801576e:	69bb      	ldr	r3, [r7, #24]
 8015770:	799b      	ldrb	r3, [r3, #6]
 8015772:	2bff      	cmp	r3, #255	; 0xff
 8015774:	d005      	beq.n	8015782 <dhcp_renew+0xe2>
    dhcp->tries++;
 8015776:	69bb      	ldr	r3, [r7, #24]
 8015778:	799b      	ldrb	r3, [r3, #6]
 801577a:	3301      	adds	r3, #1
 801577c:	b2da      	uxtb	r2, r3
 801577e:	69bb      	ldr	r3, [r7, #24]
 8015780:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8015782:	69bb      	ldr	r3, [r7, #24]
 8015784:	799b      	ldrb	r3, [r3, #6]
 8015786:	2b09      	cmp	r3, #9
 8015788:	d80a      	bhi.n	80157a0 <dhcp_renew+0x100>
 801578a:	69bb      	ldr	r3, [r7, #24]
 801578c:	799b      	ldrb	r3, [r3, #6]
 801578e:	b29b      	uxth	r3, r3
 8015790:	461a      	mov	r2, r3
 8015792:	0152      	lsls	r2, r2, #5
 8015794:	1ad2      	subs	r2, r2, r3
 8015796:	0092      	lsls	r2, r2, #2
 8015798:	4413      	add	r3, r2
 801579a:	011b      	lsls	r3, r3, #4
 801579c:	b29b      	uxth	r3, r3
 801579e:	e001      	b.n	80157a4 <dhcp_renew+0x104>
 80157a0:	f644 6320 	movw	r3, #20000	; 0x4e20
 80157a4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80157a6:	89fb      	ldrh	r3, [r7, #14]
 80157a8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80157ac:	4a09      	ldr	r2, [pc, #36]	; (80157d4 <dhcp_renew+0x134>)
 80157ae:	fb82 1203 	smull	r1, r2, r2, r3
 80157b2:	1152      	asrs	r2, r2, #5
 80157b4:	17db      	asrs	r3, r3, #31
 80157b6:	1ad3      	subs	r3, r2, r3
 80157b8:	b29a      	uxth	r2, r3
 80157ba:	69bb      	ldr	r3, [r7, #24]
 80157bc:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80157be:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80157c2:	4618      	mov	r0, r3
 80157c4:	3720      	adds	r7, #32
 80157c6:	46bd      	mov	sp, r7
 80157c8:	bd80      	pop	{r7, pc}
 80157ca:	bf00      	nop
 80157cc:	2000001c 	.word	0x2000001c
 80157d0:	2001387c 	.word	0x2001387c
 80157d4:	10624dd3 	.word	0x10624dd3

080157d8 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 80157d8:	b580      	push	{r7, lr}
 80157da:	b08a      	sub	sp, #40	; 0x28
 80157dc:	af02      	add	r7, sp, #8
 80157de:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80157e0:	687b      	ldr	r3, [r7, #4]
 80157e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80157e4:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 80157e6:	2104      	movs	r1, #4
 80157e8:	69b8      	ldr	r0, [r7, #24]
 80157ea:	f000 f9e1 	bl	8015bb0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80157ee:	f107 030c 	add.w	r3, r7, #12
 80157f2:	2203      	movs	r2, #3
 80157f4:	69b9      	ldr	r1, [r7, #24]
 80157f6:	6878      	ldr	r0, [r7, #4]
 80157f8:	f000 fe66 	bl	80164c8 <dhcp_create_msg>
 80157fc:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80157fe:	697b      	ldr	r3, [r7, #20]
 8015800:	2b00      	cmp	r3, #0
 8015802:	d04c      	beq.n	801589e <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015804:	697b      	ldr	r3, [r7, #20]
 8015806:	685b      	ldr	r3, [r3, #4]
 8015808:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801580a:	89b8      	ldrh	r0, [r7, #12]
 801580c:	693b      	ldr	r3, [r7, #16]
 801580e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015812:	2302      	movs	r3, #2
 8015814:	2239      	movs	r2, #57	; 0x39
 8015816:	f000 f9e5 	bl	8015be4 <dhcp_option>
 801581a:	4603      	mov	r3, r0
 801581c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801581e:	89b8      	ldrh	r0, [r7, #12]
 8015820:	693b      	ldr	r3, [r7, #16]
 8015822:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015826:	687b      	ldr	r3, [r7, #4]
 8015828:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801582a:	461a      	mov	r2, r3
 801582c:	f000 fa34 	bl	8015c98 <dhcp_option_short>
 8015830:	4603      	mov	r3, r0
 8015832:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8015834:	89b8      	ldrh	r0, [r7, #12]
 8015836:	693b      	ldr	r3, [r7, #16]
 8015838:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801583c:	2303      	movs	r3, #3
 801583e:	2237      	movs	r2, #55	; 0x37
 8015840:	f000 f9d0 	bl	8015be4 <dhcp_option>
 8015844:	4603      	mov	r3, r0
 8015846:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015848:	2300      	movs	r3, #0
 801584a:	77bb      	strb	r3, [r7, #30]
 801584c:	e00e      	b.n	801586c <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801584e:	89b8      	ldrh	r0, [r7, #12]
 8015850:	693b      	ldr	r3, [r7, #16]
 8015852:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015856:	7fbb      	ldrb	r3, [r7, #30]
 8015858:	4a29      	ldr	r2, [pc, #164]	; (8015900 <dhcp_rebind+0x128>)
 801585a:	5cd3      	ldrb	r3, [r2, r3]
 801585c:	461a      	mov	r2, r3
 801585e:	f000 f9f5 	bl	8015c4c <dhcp_option_byte>
 8015862:	4603      	mov	r3, r0
 8015864:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015866:	7fbb      	ldrb	r3, [r7, #30]
 8015868:	3301      	adds	r3, #1
 801586a:	77bb      	strb	r3, [r7, #30]
 801586c:	7fbb      	ldrb	r3, [r7, #30]
 801586e:	2b02      	cmp	r3, #2
 8015870:	d9ed      	bls.n	801584e <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8015872:	89b8      	ldrh	r0, [r7, #12]
 8015874:	693b      	ldr	r3, [r7, #16]
 8015876:	33f0      	adds	r3, #240	; 0xf0
 8015878:	697a      	ldr	r2, [r7, #20]
 801587a:	4619      	mov	r1, r3
 801587c:	f000 fefa 	bl	8016674 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8015880:	4b20      	ldr	r3, [pc, #128]	; (8015904 <dhcp_rebind+0x12c>)
 8015882:	6818      	ldr	r0, [r3, #0]
 8015884:	687b      	ldr	r3, [r7, #4]
 8015886:	9300      	str	r3, [sp, #0]
 8015888:	2343      	movs	r3, #67	; 0x43
 801588a:	4a1f      	ldr	r2, [pc, #124]	; (8015908 <dhcp_rebind+0x130>)
 801588c:	6979      	ldr	r1, [r7, #20]
 801588e:	f7fe fdb9 	bl	8014404 <udp_sendto_if>
 8015892:	4603      	mov	r3, r0
 8015894:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8015896:	6978      	ldr	r0, [r7, #20]
 8015898:	f7f8 fe72 	bl	800e580 <pbuf_free>
 801589c:	e001      	b.n	80158a2 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801589e:	23ff      	movs	r3, #255	; 0xff
 80158a0:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80158a2:	69bb      	ldr	r3, [r7, #24]
 80158a4:	799b      	ldrb	r3, [r3, #6]
 80158a6:	2bff      	cmp	r3, #255	; 0xff
 80158a8:	d005      	beq.n	80158b6 <dhcp_rebind+0xde>
    dhcp->tries++;
 80158aa:	69bb      	ldr	r3, [r7, #24]
 80158ac:	799b      	ldrb	r3, [r3, #6]
 80158ae:	3301      	adds	r3, #1
 80158b0:	b2da      	uxtb	r2, r3
 80158b2:	69bb      	ldr	r3, [r7, #24]
 80158b4:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80158b6:	69bb      	ldr	r3, [r7, #24]
 80158b8:	799b      	ldrb	r3, [r3, #6]
 80158ba:	2b09      	cmp	r3, #9
 80158bc:	d80a      	bhi.n	80158d4 <dhcp_rebind+0xfc>
 80158be:	69bb      	ldr	r3, [r7, #24]
 80158c0:	799b      	ldrb	r3, [r3, #6]
 80158c2:	b29b      	uxth	r3, r3
 80158c4:	461a      	mov	r2, r3
 80158c6:	0152      	lsls	r2, r2, #5
 80158c8:	1ad2      	subs	r2, r2, r3
 80158ca:	0092      	lsls	r2, r2, #2
 80158cc:	4413      	add	r3, r2
 80158ce:	00db      	lsls	r3, r3, #3
 80158d0:	b29b      	uxth	r3, r3
 80158d2:	e001      	b.n	80158d8 <dhcp_rebind+0x100>
 80158d4:	f242 7310 	movw	r3, #10000	; 0x2710
 80158d8:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80158da:	89fb      	ldrh	r3, [r7, #14]
 80158dc:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80158e0:	4a0a      	ldr	r2, [pc, #40]	; (801590c <dhcp_rebind+0x134>)
 80158e2:	fb82 1203 	smull	r1, r2, r2, r3
 80158e6:	1152      	asrs	r2, r2, #5
 80158e8:	17db      	asrs	r3, r3, #31
 80158ea:	1ad3      	subs	r3, r2, r3
 80158ec:	b29a      	uxth	r2, r3
 80158ee:	69bb      	ldr	r3, [r7, #24]
 80158f0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80158f2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80158f6:	4618      	mov	r0, r3
 80158f8:	3720      	adds	r7, #32
 80158fa:	46bd      	mov	sp, r7
 80158fc:	bd80      	pop	{r7, pc}
 80158fe:	bf00      	nop
 8015900:	2000001c 	.word	0x2000001c
 8015904:	2001387c 	.word	0x2001387c
 8015908:	0801d25c 	.word	0x0801d25c
 801590c:	10624dd3 	.word	0x10624dd3

08015910 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8015910:	b5b0      	push	{r4, r5, r7, lr}
 8015912:	b08a      	sub	sp, #40	; 0x28
 8015914:	af02      	add	r7, sp, #8
 8015916:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015918:	687b      	ldr	r3, [r7, #4]
 801591a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801591c:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 801591e:	2103      	movs	r1, #3
 8015920:	69b8      	ldr	r0, [r7, #24]
 8015922:	f000 f945 	bl	8015bb0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8015926:	f107 030c 	add.w	r3, r7, #12
 801592a:	2203      	movs	r2, #3
 801592c:	69b9      	ldr	r1, [r7, #24]
 801592e:	6878      	ldr	r0, [r7, #4]
 8015930:	f000 fdca 	bl	80164c8 <dhcp_create_msg>
 8015934:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8015936:	697b      	ldr	r3, [r7, #20]
 8015938:	2b00      	cmp	r3, #0
 801593a:	d066      	beq.n	8015a0a <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801593c:	697b      	ldr	r3, [r7, #20]
 801593e:	685b      	ldr	r3, [r3, #4]
 8015940:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8015942:	89b8      	ldrh	r0, [r7, #12]
 8015944:	693b      	ldr	r3, [r7, #16]
 8015946:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801594a:	2302      	movs	r3, #2
 801594c:	2239      	movs	r2, #57	; 0x39
 801594e:	f000 f949 	bl	8015be4 <dhcp_option>
 8015952:	4603      	mov	r3, r0
 8015954:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8015956:	89b8      	ldrh	r0, [r7, #12]
 8015958:	693b      	ldr	r3, [r7, #16]
 801595a:	33f0      	adds	r3, #240	; 0xf0
 801595c:	f44f 7210 	mov.w	r2, #576	; 0x240
 8015960:	4619      	mov	r1, r3
 8015962:	f000 f999 	bl	8015c98 <dhcp_option_short>
 8015966:	4603      	mov	r3, r0
 8015968:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801596a:	89b8      	ldrh	r0, [r7, #12]
 801596c:	693b      	ldr	r3, [r7, #16]
 801596e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015972:	2304      	movs	r3, #4
 8015974:	2232      	movs	r2, #50	; 0x32
 8015976:	f000 f935 	bl	8015be4 <dhcp_option>
 801597a:	4603      	mov	r3, r0
 801597c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801597e:	89bc      	ldrh	r4, [r7, #12]
 8015980:	693b      	ldr	r3, [r7, #16]
 8015982:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8015986:	69bb      	ldr	r3, [r7, #24]
 8015988:	69db      	ldr	r3, [r3, #28]
 801598a:	4618      	mov	r0, r3
 801598c:	f7f7 fa55 	bl	800ce3a <lwip_htonl>
 8015990:	4603      	mov	r3, r0
 8015992:	461a      	mov	r2, r3
 8015994:	4629      	mov	r1, r5
 8015996:	4620      	mov	r0, r4
 8015998:	f000 f9b0 	bl	8015cfc <dhcp_option_long>
 801599c:	4603      	mov	r3, r0
 801599e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80159a0:	89b8      	ldrh	r0, [r7, #12]
 80159a2:	693b      	ldr	r3, [r7, #16]
 80159a4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80159a8:	2303      	movs	r3, #3
 80159aa:	2237      	movs	r2, #55	; 0x37
 80159ac:	f000 f91a 	bl	8015be4 <dhcp_option>
 80159b0:	4603      	mov	r3, r0
 80159b2:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80159b4:	2300      	movs	r3, #0
 80159b6:	77bb      	strb	r3, [r7, #30]
 80159b8:	e00e      	b.n	80159d8 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80159ba:	89b8      	ldrh	r0, [r7, #12]
 80159bc:	693b      	ldr	r3, [r7, #16]
 80159be:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80159c2:	7fbb      	ldrb	r3, [r7, #30]
 80159c4:	4a29      	ldr	r2, [pc, #164]	; (8015a6c <dhcp_reboot+0x15c>)
 80159c6:	5cd3      	ldrb	r3, [r2, r3]
 80159c8:	461a      	mov	r2, r3
 80159ca:	f000 f93f 	bl	8015c4c <dhcp_option_byte>
 80159ce:	4603      	mov	r3, r0
 80159d0:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80159d2:	7fbb      	ldrb	r3, [r7, #30]
 80159d4:	3301      	adds	r3, #1
 80159d6:	77bb      	strb	r3, [r7, #30]
 80159d8:	7fbb      	ldrb	r3, [r7, #30]
 80159da:	2b02      	cmp	r3, #2
 80159dc:	d9ed      	bls.n	80159ba <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80159de:	89b8      	ldrh	r0, [r7, #12]
 80159e0:	693b      	ldr	r3, [r7, #16]
 80159e2:	33f0      	adds	r3, #240	; 0xf0
 80159e4:	697a      	ldr	r2, [r7, #20]
 80159e6:	4619      	mov	r1, r3
 80159e8:	f000 fe44 	bl	8016674 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80159ec:	4b20      	ldr	r3, [pc, #128]	; (8015a70 <dhcp_reboot+0x160>)
 80159ee:	6818      	ldr	r0, [r3, #0]
 80159f0:	687b      	ldr	r3, [r7, #4]
 80159f2:	9300      	str	r3, [sp, #0]
 80159f4:	2343      	movs	r3, #67	; 0x43
 80159f6:	4a1f      	ldr	r2, [pc, #124]	; (8015a74 <dhcp_reboot+0x164>)
 80159f8:	6979      	ldr	r1, [r7, #20]
 80159fa:	f7fe fd03 	bl	8014404 <udp_sendto_if>
 80159fe:	4603      	mov	r3, r0
 8015a00:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8015a02:	6978      	ldr	r0, [r7, #20]
 8015a04:	f7f8 fdbc 	bl	800e580 <pbuf_free>
 8015a08:	e001      	b.n	8015a0e <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8015a0a:	23ff      	movs	r3, #255	; 0xff
 8015a0c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8015a0e:	69bb      	ldr	r3, [r7, #24]
 8015a10:	799b      	ldrb	r3, [r3, #6]
 8015a12:	2bff      	cmp	r3, #255	; 0xff
 8015a14:	d005      	beq.n	8015a22 <dhcp_reboot+0x112>
    dhcp->tries++;
 8015a16:	69bb      	ldr	r3, [r7, #24]
 8015a18:	799b      	ldrb	r3, [r3, #6]
 8015a1a:	3301      	adds	r3, #1
 8015a1c:	b2da      	uxtb	r2, r3
 8015a1e:	69bb      	ldr	r3, [r7, #24]
 8015a20:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8015a22:	69bb      	ldr	r3, [r7, #24]
 8015a24:	799b      	ldrb	r3, [r3, #6]
 8015a26:	2b09      	cmp	r3, #9
 8015a28:	d80a      	bhi.n	8015a40 <dhcp_reboot+0x130>
 8015a2a:	69bb      	ldr	r3, [r7, #24]
 8015a2c:	799b      	ldrb	r3, [r3, #6]
 8015a2e:	b29b      	uxth	r3, r3
 8015a30:	461a      	mov	r2, r3
 8015a32:	0152      	lsls	r2, r2, #5
 8015a34:	1ad2      	subs	r2, r2, r3
 8015a36:	0092      	lsls	r2, r2, #2
 8015a38:	4413      	add	r3, r2
 8015a3a:	00db      	lsls	r3, r3, #3
 8015a3c:	b29b      	uxth	r3, r3
 8015a3e:	e001      	b.n	8015a44 <dhcp_reboot+0x134>
 8015a40:	f242 7310 	movw	r3, #10000	; 0x2710
 8015a44:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8015a46:	89fb      	ldrh	r3, [r7, #14]
 8015a48:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8015a4c:	4a0a      	ldr	r2, [pc, #40]	; (8015a78 <dhcp_reboot+0x168>)
 8015a4e:	fb82 1203 	smull	r1, r2, r2, r3
 8015a52:	1152      	asrs	r2, r2, #5
 8015a54:	17db      	asrs	r3, r3, #31
 8015a56:	1ad3      	subs	r3, r2, r3
 8015a58:	b29a      	uxth	r2, r3
 8015a5a:	69bb      	ldr	r3, [r7, #24]
 8015a5c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8015a5e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015a62:	4618      	mov	r0, r3
 8015a64:	3720      	adds	r7, #32
 8015a66:	46bd      	mov	sp, r7
 8015a68:	bdb0      	pop	{r4, r5, r7, pc}
 8015a6a:	bf00      	nop
 8015a6c:	2000001c 	.word	0x2000001c
 8015a70:	2001387c 	.word	0x2001387c
 8015a74:	0801d25c 	.word	0x0801d25c
 8015a78:	10624dd3 	.word	0x10624dd3

08015a7c <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8015a7c:	b5b0      	push	{r4, r5, r7, lr}
 8015a7e:	b08a      	sub	sp, #40	; 0x28
 8015a80:	af02      	add	r7, sp, #8
 8015a82:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015a84:	687b      	ldr	r3, [r7, #4]
 8015a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a88:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8015a8a:	69fb      	ldr	r3, [r7, #28]
 8015a8c:	2b00      	cmp	r3, #0
 8015a8e:	f000 8084 	beq.w	8015b9a <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8015a92:	69fb      	ldr	r3, [r7, #28]
 8015a94:	795b      	ldrb	r3, [r3, #5]
 8015a96:	2b00      	cmp	r3, #0
 8015a98:	f000 8081 	beq.w	8015b9e <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8015a9c:	69fb      	ldr	r3, [r7, #28]
 8015a9e:	699b      	ldr	r3, [r3, #24]
 8015aa0:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8015aa2:	69fb      	ldr	r3, [r7, #28]
 8015aa4:	2200      	movs	r2, #0
 8015aa6:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8015aa8:	69fb      	ldr	r3, [r7, #28]
 8015aaa:	2200      	movs	r2, #0
 8015aac:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8015aae:	69fb      	ldr	r3, [r7, #28]
 8015ab0:	2200      	movs	r2, #0
 8015ab2:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8015ab4:	69fb      	ldr	r3, [r7, #28]
 8015ab6:	2200      	movs	r2, #0
 8015ab8:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8015aba:	69fb      	ldr	r3, [r7, #28]
 8015abc:	2200      	movs	r2, #0
 8015abe:	631a      	str	r2, [r3, #48]	; 0x30
 8015ac0:	69fb      	ldr	r3, [r7, #28]
 8015ac2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015ac4:	69fb      	ldr	r3, [r7, #28]
 8015ac6:	62da      	str	r2, [r3, #44]	; 0x2c
 8015ac8:	69fb      	ldr	r3, [r7, #28]
 8015aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015acc:	69fb      	ldr	r3, [r7, #28]
 8015ace:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8015ad0:	69fb      	ldr	r3, [r7, #28]
 8015ad2:	2200      	movs	r2, #0
 8015ad4:	829a      	strh	r2, [r3, #20]
 8015ad6:	69fb      	ldr	r3, [r7, #28]
 8015ad8:	8a9a      	ldrh	r2, [r3, #20]
 8015ada:	69fb      	ldr	r3, [r7, #28]
 8015adc:	825a      	strh	r2, [r3, #18]
 8015ade:	69fb      	ldr	r3, [r7, #28]
 8015ae0:	8a5a      	ldrh	r2, [r3, #18]
 8015ae2:	69fb      	ldr	r3, [r7, #28]
 8015ae4:	821a      	strh	r2, [r3, #16]
 8015ae6:	69fb      	ldr	r3, [r7, #28]
 8015ae8:	8a1a      	ldrh	r2, [r3, #16]
 8015aea:	69fb      	ldr	r3, [r7, #28]
 8015aec:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8015aee:	6878      	ldr	r0, [r7, #4]
 8015af0:	f000 fdee 	bl	80166d0 <dhcp_supplied_address>
 8015af4:	4603      	mov	r3, r0
 8015af6:	2b00      	cmp	r3, #0
 8015af8:	d03b      	beq.n	8015b72 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8015afa:	f107 030e 	add.w	r3, r7, #14
 8015afe:	2207      	movs	r2, #7
 8015b00:	69f9      	ldr	r1, [r7, #28]
 8015b02:	6878      	ldr	r0, [r7, #4]
 8015b04:	f000 fce0 	bl	80164c8 <dhcp_create_msg>
 8015b08:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8015b0a:	69bb      	ldr	r3, [r7, #24]
 8015b0c:	2b00      	cmp	r3, #0
 8015b0e:	d030      	beq.n	8015b72 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015b10:	69bb      	ldr	r3, [r7, #24]
 8015b12:	685b      	ldr	r3, [r3, #4]
 8015b14:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8015b16:	89f8      	ldrh	r0, [r7, #14]
 8015b18:	697b      	ldr	r3, [r7, #20]
 8015b1a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015b1e:	2304      	movs	r3, #4
 8015b20:	2236      	movs	r2, #54	; 0x36
 8015b22:	f000 f85f 	bl	8015be4 <dhcp_option>
 8015b26:	4603      	mov	r3, r0
 8015b28:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8015b2a:	89fc      	ldrh	r4, [r7, #14]
 8015b2c:	697b      	ldr	r3, [r7, #20]
 8015b2e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8015b32:	693b      	ldr	r3, [r7, #16]
 8015b34:	4618      	mov	r0, r3
 8015b36:	f7f7 f980 	bl	800ce3a <lwip_htonl>
 8015b3a:	4603      	mov	r3, r0
 8015b3c:	461a      	mov	r2, r3
 8015b3e:	4629      	mov	r1, r5
 8015b40:	4620      	mov	r0, r4
 8015b42:	f000 f8db 	bl	8015cfc <dhcp_option_long>
 8015b46:	4603      	mov	r3, r0
 8015b48:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8015b4a:	89f8      	ldrh	r0, [r7, #14]
 8015b4c:	697b      	ldr	r3, [r7, #20]
 8015b4e:	33f0      	adds	r3, #240	; 0xf0
 8015b50:	69ba      	ldr	r2, [r7, #24]
 8015b52:	4619      	mov	r1, r3
 8015b54:	f000 fd8e 	bl	8016674 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8015b58:	4b13      	ldr	r3, [pc, #76]	; (8015ba8 <dhcp_release_and_stop+0x12c>)
 8015b5a:	6818      	ldr	r0, [r3, #0]
 8015b5c:	f107 0210 	add.w	r2, r7, #16
 8015b60:	687b      	ldr	r3, [r7, #4]
 8015b62:	9300      	str	r3, [sp, #0]
 8015b64:	2343      	movs	r3, #67	; 0x43
 8015b66:	69b9      	ldr	r1, [r7, #24]
 8015b68:	f7fe fc4c 	bl	8014404 <udp_sendto_if>
      pbuf_free(p_out);
 8015b6c:	69b8      	ldr	r0, [r7, #24]
 8015b6e:	f7f8 fd07 	bl	800e580 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8015b72:	4b0e      	ldr	r3, [pc, #56]	; (8015bac <dhcp_release_and_stop+0x130>)
 8015b74:	4a0d      	ldr	r2, [pc, #52]	; (8015bac <dhcp_release_and_stop+0x130>)
 8015b76:	490d      	ldr	r1, [pc, #52]	; (8015bac <dhcp_release_and_stop+0x130>)
 8015b78:	6878      	ldr	r0, [r7, #4]
 8015b7a:	f7f7 fff3 	bl	800db64 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8015b7e:	2100      	movs	r1, #0
 8015b80:	69f8      	ldr	r0, [r7, #28]
 8015b82:	f000 f815 	bl	8015bb0 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8015b86:	69fb      	ldr	r3, [r7, #28]
 8015b88:	791b      	ldrb	r3, [r3, #4]
 8015b8a:	2b00      	cmp	r3, #0
 8015b8c:	d008      	beq.n	8015ba0 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8015b8e:	f7fe ff85 	bl	8014a9c <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8015b92:	69fb      	ldr	r3, [r7, #28]
 8015b94:	2200      	movs	r2, #0
 8015b96:	711a      	strb	r2, [r3, #4]
 8015b98:	e002      	b.n	8015ba0 <dhcp_release_and_stop+0x124>
    return;
 8015b9a:	bf00      	nop
 8015b9c:	e000      	b.n	8015ba0 <dhcp_release_and_stop+0x124>
    return;
 8015b9e:	bf00      	nop
  }
}
 8015ba0:	3720      	adds	r7, #32
 8015ba2:	46bd      	mov	sp, r7
 8015ba4:	bdb0      	pop	{r4, r5, r7, pc}
 8015ba6:	bf00      	nop
 8015ba8:	2001387c 	.word	0x2001387c
 8015bac:	0801d258 	.word	0x0801d258

08015bb0 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8015bb0:	b480      	push	{r7}
 8015bb2:	b083      	sub	sp, #12
 8015bb4:	af00      	add	r7, sp, #0
 8015bb6:	6078      	str	r0, [r7, #4]
 8015bb8:	460b      	mov	r3, r1
 8015bba:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8015bbc:	687b      	ldr	r3, [r7, #4]
 8015bbe:	795b      	ldrb	r3, [r3, #5]
 8015bc0:	78fa      	ldrb	r2, [r7, #3]
 8015bc2:	429a      	cmp	r2, r3
 8015bc4:	d008      	beq.n	8015bd8 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8015bc6:	687b      	ldr	r3, [r7, #4]
 8015bc8:	78fa      	ldrb	r2, [r7, #3]
 8015bca:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8015bcc:	687b      	ldr	r3, [r7, #4]
 8015bce:	2200      	movs	r2, #0
 8015bd0:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8015bd2:	687b      	ldr	r3, [r7, #4]
 8015bd4:	2200      	movs	r2, #0
 8015bd6:	811a      	strh	r2, [r3, #8]
  }
}
 8015bd8:	bf00      	nop
 8015bda:	370c      	adds	r7, #12
 8015bdc:	46bd      	mov	sp, r7
 8015bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015be2:	4770      	bx	lr

08015be4 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8015be4:	b580      	push	{r7, lr}
 8015be6:	b082      	sub	sp, #8
 8015be8:	af00      	add	r7, sp, #0
 8015bea:	6039      	str	r1, [r7, #0]
 8015bec:	4611      	mov	r1, r2
 8015bee:	461a      	mov	r2, r3
 8015bf0:	4603      	mov	r3, r0
 8015bf2:	80fb      	strh	r3, [r7, #6]
 8015bf4:	460b      	mov	r3, r1
 8015bf6:	717b      	strb	r3, [r7, #5]
 8015bf8:	4613      	mov	r3, r2
 8015bfa:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8015bfc:	88fa      	ldrh	r2, [r7, #6]
 8015bfe:	793b      	ldrb	r3, [r7, #4]
 8015c00:	4413      	add	r3, r2
 8015c02:	3302      	adds	r3, #2
 8015c04:	2b44      	cmp	r3, #68	; 0x44
 8015c06:	d906      	bls.n	8015c16 <dhcp_option+0x32>
 8015c08:	4b0d      	ldr	r3, [pc, #52]	; (8015c40 <dhcp_option+0x5c>)
 8015c0a:	f240 529a 	movw	r2, #1434	; 0x59a
 8015c0e:	490d      	ldr	r1, [pc, #52]	; (8015c44 <dhcp_option+0x60>)
 8015c10:	480d      	ldr	r0, [pc, #52]	; (8015c48 <dhcp_option+0x64>)
 8015c12:	f003 fd8f 	bl	8019734 <iprintf>
  options[options_out_len++] = option_type;
 8015c16:	88fb      	ldrh	r3, [r7, #6]
 8015c18:	1c5a      	adds	r2, r3, #1
 8015c1a:	80fa      	strh	r2, [r7, #6]
 8015c1c:	461a      	mov	r2, r3
 8015c1e:	683b      	ldr	r3, [r7, #0]
 8015c20:	4413      	add	r3, r2
 8015c22:	797a      	ldrb	r2, [r7, #5]
 8015c24:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8015c26:	88fb      	ldrh	r3, [r7, #6]
 8015c28:	1c5a      	adds	r2, r3, #1
 8015c2a:	80fa      	strh	r2, [r7, #6]
 8015c2c:	461a      	mov	r2, r3
 8015c2e:	683b      	ldr	r3, [r7, #0]
 8015c30:	4413      	add	r3, r2
 8015c32:	793a      	ldrb	r2, [r7, #4]
 8015c34:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8015c36:	88fb      	ldrh	r3, [r7, #6]
}
 8015c38:	4618      	mov	r0, r3
 8015c3a:	3708      	adds	r7, #8
 8015c3c:	46bd      	mov	sp, r7
 8015c3e:	bd80      	pop	{r7, pc}
 8015c40:	0801c648 	.word	0x0801c648
 8015c44:	0801c7dc 	.word	0x0801c7dc
 8015c48:	0801c6a8 	.word	0x0801c6a8

08015c4c <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8015c4c:	b580      	push	{r7, lr}
 8015c4e:	b082      	sub	sp, #8
 8015c50:	af00      	add	r7, sp, #0
 8015c52:	4603      	mov	r3, r0
 8015c54:	6039      	str	r1, [r7, #0]
 8015c56:	80fb      	strh	r3, [r7, #6]
 8015c58:	4613      	mov	r3, r2
 8015c5a:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8015c5c:	88fb      	ldrh	r3, [r7, #6]
 8015c5e:	2b43      	cmp	r3, #67	; 0x43
 8015c60:	d906      	bls.n	8015c70 <dhcp_option_byte+0x24>
 8015c62:	4b0a      	ldr	r3, [pc, #40]	; (8015c8c <dhcp_option_byte+0x40>)
 8015c64:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8015c68:	4909      	ldr	r1, [pc, #36]	; (8015c90 <dhcp_option_byte+0x44>)
 8015c6a:	480a      	ldr	r0, [pc, #40]	; (8015c94 <dhcp_option_byte+0x48>)
 8015c6c:	f003 fd62 	bl	8019734 <iprintf>
  options[options_out_len++] = value;
 8015c70:	88fb      	ldrh	r3, [r7, #6]
 8015c72:	1c5a      	adds	r2, r3, #1
 8015c74:	80fa      	strh	r2, [r7, #6]
 8015c76:	461a      	mov	r2, r3
 8015c78:	683b      	ldr	r3, [r7, #0]
 8015c7a:	4413      	add	r3, r2
 8015c7c:	797a      	ldrb	r2, [r7, #5]
 8015c7e:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8015c80:	88fb      	ldrh	r3, [r7, #6]
}
 8015c82:	4618      	mov	r0, r3
 8015c84:	3708      	adds	r7, #8
 8015c86:	46bd      	mov	sp, r7
 8015c88:	bd80      	pop	{r7, pc}
 8015c8a:	bf00      	nop
 8015c8c:	0801c648 	.word	0x0801c648
 8015c90:	0801c820 	.word	0x0801c820
 8015c94:	0801c6a8 	.word	0x0801c6a8

08015c98 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8015c98:	b580      	push	{r7, lr}
 8015c9a:	b082      	sub	sp, #8
 8015c9c:	af00      	add	r7, sp, #0
 8015c9e:	4603      	mov	r3, r0
 8015ca0:	6039      	str	r1, [r7, #0]
 8015ca2:	80fb      	strh	r3, [r7, #6]
 8015ca4:	4613      	mov	r3, r2
 8015ca6:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8015ca8:	88fb      	ldrh	r3, [r7, #6]
 8015caa:	3302      	adds	r3, #2
 8015cac:	2b44      	cmp	r3, #68	; 0x44
 8015cae:	d906      	bls.n	8015cbe <dhcp_option_short+0x26>
 8015cb0:	4b0f      	ldr	r3, [pc, #60]	; (8015cf0 <dhcp_option_short+0x58>)
 8015cb2:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8015cb6:	490f      	ldr	r1, [pc, #60]	; (8015cf4 <dhcp_option_short+0x5c>)
 8015cb8:	480f      	ldr	r0, [pc, #60]	; (8015cf8 <dhcp_option_short+0x60>)
 8015cba:	f003 fd3b 	bl	8019734 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8015cbe:	88bb      	ldrh	r3, [r7, #4]
 8015cc0:	0a1b      	lsrs	r3, r3, #8
 8015cc2:	b29a      	uxth	r2, r3
 8015cc4:	88fb      	ldrh	r3, [r7, #6]
 8015cc6:	1c59      	adds	r1, r3, #1
 8015cc8:	80f9      	strh	r1, [r7, #6]
 8015cca:	4619      	mov	r1, r3
 8015ccc:	683b      	ldr	r3, [r7, #0]
 8015cce:	440b      	add	r3, r1
 8015cd0:	b2d2      	uxtb	r2, r2
 8015cd2:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8015cd4:	88fb      	ldrh	r3, [r7, #6]
 8015cd6:	1c5a      	adds	r2, r3, #1
 8015cd8:	80fa      	strh	r2, [r7, #6]
 8015cda:	461a      	mov	r2, r3
 8015cdc:	683b      	ldr	r3, [r7, #0]
 8015cde:	4413      	add	r3, r2
 8015ce0:	88ba      	ldrh	r2, [r7, #4]
 8015ce2:	b2d2      	uxtb	r2, r2
 8015ce4:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8015ce6:	88fb      	ldrh	r3, [r7, #6]
}
 8015ce8:	4618      	mov	r0, r3
 8015cea:	3708      	adds	r7, #8
 8015cec:	46bd      	mov	sp, r7
 8015cee:	bd80      	pop	{r7, pc}
 8015cf0:	0801c648 	.word	0x0801c648
 8015cf4:	0801c858 	.word	0x0801c858
 8015cf8:	0801c6a8 	.word	0x0801c6a8

08015cfc <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8015cfc:	b580      	push	{r7, lr}
 8015cfe:	b084      	sub	sp, #16
 8015d00:	af00      	add	r7, sp, #0
 8015d02:	4603      	mov	r3, r0
 8015d04:	60b9      	str	r1, [r7, #8]
 8015d06:	607a      	str	r2, [r7, #4]
 8015d08:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8015d0a:	89fb      	ldrh	r3, [r7, #14]
 8015d0c:	3304      	adds	r3, #4
 8015d0e:	2b44      	cmp	r3, #68	; 0x44
 8015d10:	d906      	bls.n	8015d20 <dhcp_option_long+0x24>
 8015d12:	4b19      	ldr	r3, [pc, #100]	; (8015d78 <dhcp_option_long+0x7c>)
 8015d14:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8015d18:	4918      	ldr	r1, [pc, #96]	; (8015d7c <dhcp_option_long+0x80>)
 8015d1a:	4819      	ldr	r0, [pc, #100]	; (8015d80 <dhcp_option_long+0x84>)
 8015d1c:	f003 fd0a 	bl	8019734 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8015d20:	687b      	ldr	r3, [r7, #4]
 8015d22:	0e1a      	lsrs	r2, r3, #24
 8015d24:	89fb      	ldrh	r3, [r7, #14]
 8015d26:	1c59      	adds	r1, r3, #1
 8015d28:	81f9      	strh	r1, [r7, #14]
 8015d2a:	4619      	mov	r1, r3
 8015d2c:	68bb      	ldr	r3, [r7, #8]
 8015d2e:	440b      	add	r3, r1
 8015d30:	b2d2      	uxtb	r2, r2
 8015d32:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8015d34:	687b      	ldr	r3, [r7, #4]
 8015d36:	0c1a      	lsrs	r2, r3, #16
 8015d38:	89fb      	ldrh	r3, [r7, #14]
 8015d3a:	1c59      	adds	r1, r3, #1
 8015d3c:	81f9      	strh	r1, [r7, #14]
 8015d3e:	4619      	mov	r1, r3
 8015d40:	68bb      	ldr	r3, [r7, #8]
 8015d42:	440b      	add	r3, r1
 8015d44:	b2d2      	uxtb	r2, r2
 8015d46:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8015d48:	687b      	ldr	r3, [r7, #4]
 8015d4a:	0a1a      	lsrs	r2, r3, #8
 8015d4c:	89fb      	ldrh	r3, [r7, #14]
 8015d4e:	1c59      	adds	r1, r3, #1
 8015d50:	81f9      	strh	r1, [r7, #14]
 8015d52:	4619      	mov	r1, r3
 8015d54:	68bb      	ldr	r3, [r7, #8]
 8015d56:	440b      	add	r3, r1
 8015d58:	b2d2      	uxtb	r2, r2
 8015d5a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8015d5c:	89fb      	ldrh	r3, [r7, #14]
 8015d5e:	1c5a      	adds	r2, r3, #1
 8015d60:	81fa      	strh	r2, [r7, #14]
 8015d62:	461a      	mov	r2, r3
 8015d64:	68bb      	ldr	r3, [r7, #8]
 8015d66:	4413      	add	r3, r2
 8015d68:	687a      	ldr	r2, [r7, #4]
 8015d6a:	b2d2      	uxtb	r2, r2
 8015d6c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8015d6e:	89fb      	ldrh	r3, [r7, #14]
}
 8015d70:	4618      	mov	r0, r3
 8015d72:	3710      	adds	r7, #16
 8015d74:	46bd      	mov	sp, r7
 8015d76:	bd80      	pop	{r7, pc}
 8015d78:	0801c648 	.word	0x0801c648
 8015d7c:	0801c894 	.word	0x0801c894
 8015d80:	0801c6a8 	.word	0x0801c6a8

08015d84 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8015d84:	b580      	push	{r7, lr}
 8015d86:	b090      	sub	sp, #64	; 0x40
 8015d88:	af00      	add	r7, sp, #0
 8015d8a:	6078      	str	r0, [r7, #4]
 8015d8c:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8015d8e:	2300      	movs	r3, #0
 8015d90:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 8015d92:	2300      	movs	r3, #0
 8015d94:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8015d96:	2208      	movs	r2, #8
 8015d98:	2100      	movs	r1, #0
 8015d9a:	48b5      	ldr	r0, [pc, #724]	; (8016070 <dhcp_parse_reply+0x2ec>)
 8015d9c:	f003 f8f4 	bl	8018f88 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8015da0:	687b      	ldr	r3, [r7, #4]
 8015da2:	895b      	ldrh	r3, [r3, #10]
 8015da4:	2b2b      	cmp	r3, #43	; 0x2b
 8015da6:	d802      	bhi.n	8015dae <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8015da8:	f06f 0301 	mvn.w	r3, #1
 8015dac:	e2a7      	b.n	80162fe <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8015dae:	687b      	ldr	r3, [r7, #4]
 8015db0:	685b      	ldr	r3, [r3, #4]
 8015db2:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8015db4:	23f0      	movs	r3, #240	; 0xf0
 8015db6:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8015db8:	687b      	ldr	r3, [r7, #4]
 8015dba:	891b      	ldrh	r3, [r3, #8]
 8015dbc:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 8015dbe:	687b      	ldr	r3, [r7, #4]
 8015dc0:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8015dc2:	e00c      	b.n	8015dde <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8015dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dc6:	895b      	ldrh	r3, [r3, #10]
 8015dc8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8015dca:	1ad3      	subs	r3, r2, r3
 8015dcc:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8015dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dd0:	895b      	ldrh	r3, [r3, #10]
 8015dd2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8015dd4:	1ad3      	subs	r3, r2, r3
 8015dd6:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 8015dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dda:	681b      	ldr	r3, [r3, #0]
 8015ddc:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8015dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015de0:	2b00      	cmp	r3, #0
 8015de2:	d004      	beq.n	8015dee <dhcp_parse_reply+0x6a>
 8015de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015de6:	895b      	ldrh	r3, [r3, #10]
 8015de8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8015dea:	429a      	cmp	r2, r3
 8015dec:	d2ea      	bcs.n	8015dc4 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8015dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015df0:	2b00      	cmp	r3, #0
 8015df2:	d102      	bne.n	8015dfa <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8015df4:	f06f 0301 	mvn.w	r3, #1
 8015df8:	e281      	b.n	80162fe <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 8015dfa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8015dfc:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 8015dfe:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8015e00:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 8015e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e04:	685b      	ldr	r3, [r3, #4]
 8015e06:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8015e08:	e239      	b.n	801627e <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 8015e0a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015e0c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015e0e:	4413      	add	r3, r2
 8015e10:	781b      	ldrb	r3, [r3, #0]
 8015e12:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8015e14:	2300      	movs	r3, #0
 8015e16:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 8015e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8015e1e:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8015e20:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015e22:	3302      	adds	r3, #2
 8015e24:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 8015e26:	8bfa      	ldrh	r2, [r7, #30]
 8015e28:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015e2a:	429a      	cmp	r2, r3
 8015e2c:	d202      	bcs.n	8015e34 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8015e2e:	f06f 0301 	mvn.w	r3, #1
 8015e32:	e264      	b.n	80162fe <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8015e34:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015e36:	3301      	adds	r3, #1
 8015e38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015e3a:	8952      	ldrh	r2, [r2, #10]
 8015e3c:	4293      	cmp	r3, r2
 8015e3e:	da07      	bge.n	8015e50 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8015e40:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015e42:	3301      	adds	r3, #1
 8015e44:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015e46:	4413      	add	r3, r2
 8015e48:	781b      	ldrb	r3, [r3, #0]
 8015e4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015e4e:	e00b      	b.n	8015e68 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8015e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e52:	681b      	ldr	r3, [r3, #0]
 8015e54:	2b00      	cmp	r3, #0
 8015e56:	d004      	beq.n	8015e62 <dhcp_parse_reply+0xde>
 8015e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e5a:	681b      	ldr	r3, [r3, #0]
 8015e5c:	685b      	ldr	r3, [r3, #4]
 8015e5e:	781b      	ldrb	r3, [r3, #0]
 8015e60:	e000      	b.n	8015e64 <dhcp_parse_reply+0xe0>
 8015e62:	2300      	movs	r3, #0
 8015e64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8015e68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015e6c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 8015e70:	7dfb      	ldrb	r3, [r7, #23]
 8015e72:	2b3b      	cmp	r3, #59	; 0x3b
 8015e74:	f200 812c 	bhi.w	80160d0 <dhcp_parse_reply+0x34c>
 8015e78:	a201      	add	r2, pc, #4	; (adr r2, 8015e80 <dhcp_parse_reply+0xfc>)
 8015e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015e7e:	bf00      	nop
 8015e80:	08015f71 	.word	0x08015f71
 8015e84:	08015f81 	.word	0x08015f81
 8015e88:	080160d1 	.word	0x080160d1
 8015e8c:	08015fa3 	.word	0x08015fa3
 8015e90:	080160d1 	.word	0x080160d1
 8015e94:	080160d1 	.word	0x080160d1
 8015e98:	080160d1 	.word	0x080160d1
 8015e9c:	080160d1 	.word	0x080160d1
 8015ea0:	080160d1 	.word	0x080160d1
 8015ea4:	080160d1 	.word	0x080160d1
 8015ea8:	080160d1 	.word	0x080160d1
 8015eac:	080160d1 	.word	0x080160d1
 8015eb0:	080160d1 	.word	0x080160d1
 8015eb4:	080160d1 	.word	0x080160d1
 8015eb8:	080160d1 	.word	0x080160d1
 8015ebc:	080160d1 	.word	0x080160d1
 8015ec0:	080160d1 	.word	0x080160d1
 8015ec4:	080160d1 	.word	0x080160d1
 8015ec8:	080160d1 	.word	0x080160d1
 8015ecc:	080160d1 	.word	0x080160d1
 8015ed0:	080160d1 	.word	0x080160d1
 8015ed4:	080160d1 	.word	0x080160d1
 8015ed8:	080160d1 	.word	0x080160d1
 8015edc:	080160d1 	.word	0x080160d1
 8015ee0:	080160d1 	.word	0x080160d1
 8015ee4:	080160d1 	.word	0x080160d1
 8015ee8:	080160d1 	.word	0x080160d1
 8015eec:	080160d1 	.word	0x080160d1
 8015ef0:	080160d1 	.word	0x080160d1
 8015ef4:	080160d1 	.word	0x080160d1
 8015ef8:	080160d1 	.word	0x080160d1
 8015efc:	080160d1 	.word	0x080160d1
 8015f00:	080160d1 	.word	0x080160d1
 8015f04:	080160d1 	.word	0x080160d1
 8015f08:	080160d1 	.word	0x080160d1
 8015f0c:	080160d1 	.word	0x080160d1
 8015f10:	080160d1 	.word	0x080160d1
 8015f14:	080160d1 	.word	0x080160d1
 8015f18:	080160d1 	.word	0x080160d1
 8015f1c:	080160d1 	.word	0x080160d1
 8015f20:	080160d1 	.word	0x080160d1
 8015f24:	080160d1 	.word	0x080160d1
 8015f28:	080160d1 	.word	0x080160d1
 8015f2c:	080160d1 	.word	0x080160d1
 8015f30:	080160d1 	.word	0x080160d1
 8015f34:	080160d1 	.word	0x080160d1
 8015f38:	080160d1 	.word	0x080160d1
 8015f3c:	080160d1 	.word	0x080160d1
 8015f40:	080160d1 	.word	0x080160d1
 8015f44:	080160d1 	.word	0x080160d1
 8015f48:	080160d1 	.word	0x080160d1
 8015f4c:	08015fcf 	.word	0x08015fcf
 8015f50:	08015ff1 	.word	0x08015ff1
 8015f54:	0801602d 	.word	0x0801602d
 8015f58:	0801604f 	.word	0x0801604f
 8015f5c:	080160d1 	.word	0x080160d1
 8015f60:	080160d1 	.word	0x080160d1
 8015f64:	080160d1 	.word	0x080160d1
 8015f68:	0801608d 	.word	0x0801608d
 8015f6c:	080160af 	.word	0x080160af
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8015f70:	2300      	movs	r3, #0
 8015f72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015f76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015f7a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 8015f7e:	e0ab      	b.n	80160d8 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8015f80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015f84:	2b04      	cmp	r3, #4
 8015f86:	d009      	beq.n	8015f9c <dhcp_parse_reply+0x218>
 8015f88:	4b3a      	ldr	r3, [pc, #232]	; (8016074 <dhcp_parse_reply+0x2f0>)
 8015f8a:	f240 622e 	movw	r2, #1582	; 0x62e
 8015f8e:	493a      	ldr	r1, [pc, #232]	; (8016078 <dhcp_parse_reply+0x2f4>)
 8015f90:	483a      	ldr	r0, [pc, #232]	; (801607c <dhcp_parse_reply+0x2f8>)
 8015f92:	f003 fbcf 	bl	8019734 <iprintf>
 8015f96:	f06f 0305 	mvn.w	r3, #5
 8015f9a:	e1b0      	b.n	80162fe <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8015f9c:	2306      	movs	r3, #6
 8015f9e:	623b      	str	r3, [r7, #32]
        break;
 8015fa0:	e09a      	b.n	80160d8 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8015fa2:	2304      	movs	r3, #4
 8015fa4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8015fa8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8015fac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015fb0:	429a      	cmp	r2, r3
 8015fb2:	d209      	bcs.n	8015fc8 <dhcp_parse_reply+0x244>
 8015fb4:	4b2f      	ldr	r3, [pc, #188]	; (8016074 <dhcp_parse_reply+0x2f0>)
 8015fb6:	f240 6233 	movw	r2, #1587	; 0x633
 8015fba:	4931      	ldr	r1, [pc, #196]	; (8016080 <dhcp_parse_reply+0x2fc>)
 8015fbc:	482f      	ldr	r0, [pc, #188]	; (801607c <dhcp_parse_reply+0x2f8>)
 8015fbe:	f003 fbb9 	bl	8019734 <iprintf>
 8015fc2:	f06f 0305 	mvn.w	r3, #5
 8015fc6:	e19a      	b.n	80162fe <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8015fc8:	2307      	movs	r3, #7
 8015fca:	623b      	str	r3, [r7, #32]
        break;
 8015fcc:	e084      	b.n	80160d8 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8015fce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015fd2:	2b04      	cmp	r3, #4
 8015fd4:	d009      	beq.n	8015fea <dhcp_parse_reply+0x266>
 8015fd6:	4b27      	ldr	r3, [pc, #156]	; (8016074 <dhcp_parse_reply+0x2f0>)
 8015fd8:	f240 6241 	movw	r2, #1601	; 0x641
 8015fdc:	4926      	ldr	r1, [pc, #152]	; (8016078 <dhcp_parse_reply+0x2f4>)
 8015fde:	4827      	ldr	r0, [pc, #156]	; (801607c <dhcp_parse_reply+0x2f8>)
 8015fe0:	f003 fba8 	bl	8019734 <iprintf>
 8015fe4:	f06f 0305 	mvn.w	r3, #5
 8015fe8:	e189      	b.n	80162fe <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8015fea:	2303      	movs	r3, #3
 8015fec:	623b      	str	r3, [r7, #32]
        break;
 8015fee:	e073      	b.n	80160d8 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8015ff0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015ff4:	2b01      	cmp	r3, #1
 8015ff6:	d009      	beq.n	801600c <dhcp_parse_reply+0x288>
 8015ff8:	4b1e      	ldr	r3, [pc, #120]	; (8016074 <dhcp_parse_reply+0x2f0>)
 8015ffa:	f240 624f 	movw	r2, #1615	; 0x64f
 8015ffe:	4921      	ldr	r1, [pc, #132]	; (8016084 <dhcp_parse_reply+0x300>)
 8016000:	481e      	ldr	r0, [pc, #120]	; (801607c <dhcp_parse_reply+0x2f8>)
 8016002:	f003 fb97 	bl	8019734 <iprintf>
 8016006:	f06f 0305 	mvn.w	r3, #5
 801600a:	e178      	b.n	80162fe <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 801600c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801600e:	2bf0      	cmp	r3, #240	; 0xf0
 8016010:	d009      	beq.n	8016026 <dhcp_parse_reply+0x2a2>
 8016012:	4b18      	ldr	r3, [pc, #96]	; (8016074 <dhcp_parse_reply+0x2f0>)
 8016014:	f240 6251 	movw	r2, #1617	; 0x651
 8016018:	491b      	ldr	r1, [pc, #108]	; (8016088 <dhcp_parse_reply+0x304>)
 801601a:	4818      	ldr	r0, [pc, #96]	; (801607c <dhcp_parse_reply+0x2f8>)
 801601c:	f003 fb8a 	bl	8019734 <iprintf>
 8016020:	f06f 0305 	mvn.w	r3, #5
 8016024:	e16b      	b.n	80162fe <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8016026:	2300      	movs	r3, #0
 8016028:	623b      	str	r3, [r7, #32]
        break;
 801602a:	e055      	b.n	80160d8 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801602c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016030:	2b01      	cmp	r3, #1
 8016032:	d009      	beq.n	8016048 <dhcp_parse_reply+0x2c4>
 8016034:	4b0f      	ldr	r3, [pc, #60]	; (8016074 <dhcp_parse_reply+0x2f0>)
 8016036:	f240 6255 	movw	r2, #1621	; 0x655
 801603a:	4912      	ldr	r1, [pc, #72]	; (8016084 <dhcp_parse_reply+0x300>)
 801603c:	480f      	ldr	r0, [pc, #60]	; (801607c <dhcp_parse_reply+0x2f8>)
 801603e:	f003 fb79 	bl	8019734 <iprintf>
 8016042:	f06f 0305 	mvn.w	r3, #5
 8016046:	e15a      	b.n	80162fe <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8016048:	2301      	movs	r3, #1
 801604a:	623b      	str	r3, [r7, #32]
        break;
 801604c:	e044      	b.n	80160d8 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801604e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016052:	2b04      	cmp	r3, #4
 8016054:	d009      	beq.n	801606a <dhcp_parse_reply+0x2e6>
 8016056:	4b07      	ldr	r3, [pc, #28]	; (8016074 <dhcp_parse_reply+0x2f0>)
 8016058:	f240 6259 	movw	r2, #1625	; 0x659
 801605c:	4906      	ldr	r1, [pc, #24]	; (8016078 <dhcp_parse_reply+0x2f4>)
 801605e:	4807      	ldr	r0, [pc, #28]	; (801607c <dhcp_parse_reply+0x2f8>)
 8016060:	f003 fb68 	bl	8019734 <iprintf>
 8016064:	f06f 0305 	mvn.w	r3, #5
 8016068:	e149      	b.n	80162fe <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 801606a:	2302      	movs	r3, #2
 801606c:	623b      	str	r3, [r7, #32]
        break;
 801606e:	e033      	b.n	80160d8 <dhcp_parse_reply+0x354>
 8016070:	2001b67c 	.word	0x2001b67c
 8016074:	0801c648 	.word	0x0801c648
 8016078:	0801c8d0 	.word	0x0801c8d0
 801607c:	0801c6a8 	.word	0x0801c6a8
 8016080:	0801c8dc 	.word	0x0801c8dc
 8016084:	0801c8f0 	.word	0x0801c8f0
 8016088:	0801c8fc 	.word	0x0801c8fc
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801608c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016090:	2b04      	cmp	r3, #4
 8016092:	d009      	beq.n	80160a8 <dhcp_parse_reply+0x324>
 8016094:	4b9c      	ldr	r3, [pc, #624]	; (8016308 <dhcp_parse_reply+0x584>)
 8016096:	f240 625d 	movw	r2, #1629	; 0x65d
 801609a:	499c      	ldr	r1, [pc, #624]	; (801630c <dhcp_parse_reply+0x588>)
 801609c:	489c      	ldr	r0, [pc, #624]	; (8016310 <dhcp_parse_reply+0x58c>)
 801609e:	f003 fb49 	bl	8019734 <iprintf>
 80160a2:	f06f 0305 	mvn.w	r3, #5
 80160a6:	e12a      	b.n	80162fe <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 80160a8:	2304      	movs	r3, #4
 80160aa:	623b      	str	r3, [r7, #32]
        break;
 80160ac:	e014      	b.n	80160d8 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80160ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80160b2:	2b04      	cmp	r3, #4
 80160b4:	d009      	beq.n	80160ca <dhcp_parse_reply+0x346>
 80160b6:	4b94      	ldr	r3, [pc, #592]	; (8016308 <dhcp_parse_reply+0x584>)
 80160b8:	f240 6261 	movw	r2, #1633	; 0x661
 80160bc:	4993      	ldr	r1, [pc, #588]	; (801630c <dhcp_parse_reply+0x588>)
 80160be:	4894      	ldr	r0, [pc, #592]	; (8016310 <dhcp_parse_reply+0x58c>)
 80160c0:	f003 fb38 	bl	8019734 <iprintf>
 80160c4:	f06f 0305 	mvn.w	r3, #5
 80160c8:	e119      	b.n	80162fe <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 80160ca:	2305      	movs	r3, #5
 80160cc:	623b      	str	r3, [r7, #32]
        break;
 80160ce:	e003      	b.n	80160d8 <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 80160d0:	2300      	movs	r3, #0
 80160d2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 80160d6:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 80160d8:	7dfb      	ldrb	r3, [r7, #23]
 80160da:	2b00      	cmp	r3, #0
 80160dc:	d103      	bne.n	80160e6 <dhcp_parse_reply+0x362>
      offset++;
 80160de:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80160e0:	3301      	adds	r3, #1
 80160e2:	877b      	strh	r3, [r7, #58]	; 0x3a
 80160e4:	e0a1      	b.n	801622a <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 80160e6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80160e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80160ec:	4413      	add	r3, r2
 80160ee:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 80160f2:	4293      	cmp	r3, r2
 80160f4:	dd02      	ble.n	80160fc <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 80160f6:	f06f 0301 	mvn.w	r3, #1
 80160fa:	e100      	b.n	80162fe <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 80160fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016100:	b29a      	uxth	r2, r3
 8016102:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016104:	4413      	add	r3, r2
 8016106:	b29b      	uxth	r3, r3
 8016108:	3302      	adds	r3, #2
 801610a:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 801610c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016110:	2b00      	cmp	r3, #0
 8016112:	f000 808a 	beq.w	801622a <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 8016116:	2300      	movs	r3, #0
 8016118:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 801611a:	6a3b      	ldr	r3, [r7, #32]
 801611c:	2b00      	cmp	r3, #0
 801611e:	db02      	blt.n	8016126 <dhcp_parse_reply+0x3a2>
 8016120:	6a3b      	ldr	r3, [r7, #32]
 8016122:	2b07      	cmp	r3, #7
 8016124:	dd06      	ble.n	8016134 <dhcp_parse_reply+0x3b0>
 8016126:	4b78      	ldr	r3, [pc, #480]	; (8016308 <dhcp_parse_reply+0x584>)
 8016128:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 801612c:	4979      	ldr	r1, [pc, #484]	; (8016314 <dhcp_parse_reply+0x590>)
 801612e:	4878      	ldr	r0, [pc, #480]	; (8016310 <dhcp_parse_reply+0x58c>)
 8016130:	f003 fb00 	bl	8019734 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8016134:	4a78      	ldr	r2, [pc, #480]	; (8016318 <dhcp_parse_reply+0x594>)
 8016136:	6a3b      	ldr	r3, [r7, #32]
 8016138:	4413      	add	r3, r2
 801613a:	781b      	ldrb	r3, [r3, #0]
 801613c:	2b00      	cmp	r3, #0
 801613e:	d174      	bne.n	801622a <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 8016140:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016144:	2b04      	cmp	r3, #4
 8016146:	bf28      	it	cs
 8016148:	2304      	movcs	r3, #4
 801614a:	b2db      	uxtb	r3, r3
 801614c:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 801614e:	8bfb      	ldrh	r3, [r7, #30]
 8016150:	8aba      	ldrh	r2, [r7, #20]
 8016152:	f107 0108 	add.w	r1, r7, #8
 8016156:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016158:	f7f8 fc18 	bl	800e98c <pbuf_copy_partial>
 801615c:	4603      	mov	r3, r0
 801615e:	461a      	mov	r2, r3
 8016160:	8abb      	ldrh	r3, [r7, #20]
 8016162:	4293      	cmp	r3, r2
 8016164:	d002      	beq.n	801616c <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 8016166:	f06f 0301 	mvn.w	r3, #1
 801616a:	e0c8      	b.n	80162fe <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 801616c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016170:	2b04      	cmp	r3, #4
 8016172:	d933      	bls.n	80161dc <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8016174:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016178:	f003 0303 	and.w	r3, r3, #3
 801617c:	b2db      	uxtb	r3, r3
 801617e:	2b00      	cmp	r3, #0
 8016180:	d009      	beq.n	8016196 <dhcp_parse_reply+0x412>
 8016182:	4b61      	ldr	r3, [pc, #388]	; (8016308 <dhcp_parse_reply+0x584>)
 8016184:	f240 6281 	movw	r2, #1665	; 0x681
 8016188:	4964      	ldr	r1, [pc, #400]	; (801631c <dhcp_parse_reply+0x598>)
 801618a:	4861      	ldr	r0, [pc, #388]	; (8016310 <dhcp_parse_reply+0x58c>)
 801618c:	f003 fad2 	bl	8019734 <iprintf>
 8016190:	f06f 0305 	mvn.w	r3, #5
 8016194:	e0b3      	b.n	80162fe <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 8016196:	4a60      	ldr	r2, [pc, #384]	; (8016318 <dhcp_parse_reply+0x594>)
 8016198:	6a3b      	ldr	r3, [r7, #32]
 801619a:	4413      	add	r3, r2
 801619c:	2201      	movs	r2, #1
 801619e:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 80161a0:	68bb      	ldr	r3, [r7, #8]
 80161a2:	4618      	mov	r0, r3
 80161a4:	f7f6 fe49 	bl	800ce3a <lwip_htonl>
 80161a8:	4602      	mov	r2, r0
 80161aa:	495d      	ldr	r1, [pc, #372]	; (8016320 <dhcp_parse_reply+0x59c>)
 80161ac:	6a3b      	ldr	r3, [r7, #32]
 80161ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 80161b2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80161b6:	3b04      	subs	r3, #4
 80161b8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 80161bc:	8bfb      	ldrh	r3, [r7, #30]
 80161be:	3304      	adds	r3, #4
 80161c0:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 80161c2:	8a7a      	ldrh	r2, [r7, #18]
 80161c4:	8bfb      	ldrh	r3, [r7, #30]
 80161c6:	429a      	cmp	r2, r3
 80161c8:	d202      	bcs.n	80161d0 <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 80161ca:	f06f 0301 	mvn.w	r3, #1
 80161ce:	e096      	b.n	80162fe <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 80161d0:	8a7b      	ldrh	r3, [r7, #18]
 80161d2:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 80161d4:	6a3b      	ldr	r3, [r7, #32]
 80161d6:	3301      	adds	r3, #1
 80161d8:	623b      	str	r3, [r7, #32]
            goto decode_next;
 80161da:	e79e      	b.n	801611a <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 80161dc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80161e0:	2b04      	cmp	r3, #4
 80161e2:	d106      	bne.n	80161f2 <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 80161e4:	68bb      	ldr	r3, [r7, #8]
 80161e6:	4618      	mov	r0, r3
 80161e8:	f7f6 fe27 	bl	800ce3a <lwip_htonl>
 80161ec:	4603      	mov	r3, r0
 80161ee:	60bb      	str	r3, [r7, #8]
 80161f0:	e011      	b.n	8016216 <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 80161f2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80161f6:	2b01      	cmp	r3, #1
 80161f8:	d009      	beq.n	801620e <dhcp_parse_reply+0x48a>
 80161fa:	4b43      	ldr	r3, [pc, #268]	; (8016308 <dhcp_parse_reply+0x584>)
 80161fc:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8016200:	4948      	ldr	r1, [pc, #288]	; (8016324 <dhcp_parse_reply+0x5a0>)
 8016202:	4843      	ldr	r0, [pc, #268]	; (8016310 <dhcp_parse_reply+0x58c>)
 8016204:	f003 fa96 	bl	8019734 <iprintf>
 8016208:	f06f 0305 	mvn.w	r3, #5
 801620c:	e077      	b.n	80162fe <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 801620e:	f107 0308 	add.w	r3, r7, #8
 8016212:	781b      	ldrb	r3, [r3, #0]
 8016214:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 8016216:	4a40      	ldr	r2, [pc, #256]	; (8016318 <dhcp_parse_reply+0x594>)
 8016218:	6a3b      	ldr	r3, [r7, #32]
 801621a:	4413      	add	r3, r2
 801621c:	2201      	movs	r2, #1
 801621e:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8016220:	68ba      	ldr	r2, [r7, #8]
 8016222:	493f      	ldr	r1, [pc, #252]	; (8016320 <dhcp_parse_reply+0x59c>)
 8016224:	6a3b      	ldr	r3, [r7, #32]
 8016226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 801622a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801622c:	895b      	ldrh	r3, [r3, #10]
 801622e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016230:	429a      	cmp	r2, r3
 8016232:	d324      	bcc.n	801627e <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 8016234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016236:	895b      	ldrh	r3, [r3, #10]
 8016238:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801623a:	1ad3      	subs	r3, r2, r3
 801623c:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 801623e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016240:	895b      	ldrh	r3, [r3, #10]
 8016242:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8016244:	1ad3      	subs	r3, r2, r3
 8016246:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 8016248:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801624a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801624c:	429a      	cmp	r2, r3
 801624e:	d213      	bcs.n	8016278 <dhcp_parse_reply+0x4f4>
        q = q->next;
 8016250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016252:	681b      	ldr	r3, [r3, #0]
 8016254:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8016256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016258:	2b00      	cmp	r3, #0
 801625a:	d109      	bne.n	8016270 <dhcp_parse_reply+0x4ec>
 801625c:	4b2a      	ldr	r3, [pc, #168]	; (8016308 <dhcp_parse_reply+0x584>)
 801625e:	f240 629d 	movw	r2, #1693	; 0x69d
 8016262:	4931      	ldr	r1, [pc, #196]	; (8016328 <dhcp_parse_reply+0x5a4>)
 8016264:	482a      	ldr	r0, [pc, #168]	; (8016310 <dhcp_parse_reply+0x58c>)
 8016266:	f003 fa65 	bl	8019734 <iprintf>
 801626a:	f06f 0305 	mvn.w	r3, #5
 801626e:	e046      	b.n	80162fe <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 8016270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016272:	685b      	ldr	r3, [r3, #4]
 8016274:	63fb      	str	r3, [r7, #60]	; 0x3c
 8016276:	e002      	b.n	801627e <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8016278:	f06f 0301 	mvn.w	r3, #1
 801627c:	e03f      	b.n	80162fe <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801627e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016280:	2b00      	cmp	r3, #0
 8016282:	d00a      	beq.n	801629a <dhcp_parse_reply+0x516>
 8016284:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016286:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8016288:	429a      	cmp	r2, r3
 801628a:	d206      	bcs.n	801629a <dhcp_parse_reply+0x516>
 801628c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801628e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016290:	4413      	add	r3, r2
 8016292:	781b      	ldrb	r3, [r3, #0]
 8016294:	2bff      	cmp	r3, #255	; 0xff
 8016296:	f47f adb8 	bne.w	8015e0a <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 801629a:	4b1f      	ldr	r3, [pc, #124]	; (8016318 <dhcp_parse_reply+0x594>)
 801629c:	781b      	ldrb	r3, [r3, #0]
 801629e:	2b00      	cmp	r3, #0
 80162a0:	d018      	beq.n	80162d4 <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80162a2:	4b1f      	ldr	r3, [pc, #124]	; (8016320 <dhcp_parse_reply+0x59c>)
 80162a4:	681b      	ldr	r3, [r3, #0]
 80162a6:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80162a8:	4b1b      	ldr	r3, [pc, #108]	; (8016318 <dhcp_parse_reply+0x594>)
 80162aa:	2200      	movs	r2, #0
 80162ac:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 80162ae:	68fb      	ldr	r3, [r7, #12]
 80162b0:	2b01      	cmp	r3, #1
 80162b2:	d102      	bne.n	80162ba <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 80162b4:	2301      	movs	r3, #1
 80162b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80162b8:	e00c      	b.n	80162d4 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 80162ba:	68fb      	ldr	r3, [r7, #12]
 80162bc:	2b02      	cmp	r3, #2
 80162be:	d102      	bne.n	80162c6 <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 80162c0:	2301      	movs	r3, #1
 80162c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80162c4:	e006      	b.n	80162d4 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 80162c6:	68fb      	ldr	r3, [r7, #12]
 80162c8:	2b03      	cmp	r3, #3
 80162ca:	d103      	bne.n	80162d4 <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 80162cc:	2301      	movs	r3, #1
 80162ce:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 80162d0:	2301      	movs	r3, #1
 80162d2:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 80162d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162d6:	2b00      	cmp	r3, #0
 80162d8:	d006      	beq.n	80162e8 <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 80162da:	2300      	movs	r3, #0
 80162dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 80162de:	236c      	movs	r3, #108	; 0x6c
 80162e0:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 80162e2:	23ec      	movs	r3, #236	; 0xec
 80162e4:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 80162e6:	e56a      	b.n	8015dbe <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 80162e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80162ea:	2b00      	cmp	r3, #0
 80162ec:	d006      	beq.n	80162fc <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 80162ee:	2300      	movs	r3, #0
 80162f0:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 80162f2:	232c      	movs	r3, #44	; 0x2c
 80162f4:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 80162f6:	236c      	movs	r3, #108	; 0x6c
 80162f8:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 80162fa:	e560      	b.n	8015dbe <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 80162fc:	2300      	movs	r3, #0
}
 80162fe:	4618      	mov	r0, r3
 8016300:	3740      	adds	r7, #64	; 0x40
 8016302:	46bd      	mov	sp, r7
 8016304:	bd80      	pop	{r7, pc}
 8016306:	bf00      	nop
 8016308:	0801c648 	.word	0x0801c648
 801630c:	0801c8d0 	.word	0x0801c8d0
 8016310:	0801c6a8 	.word	0x0801c6a8
 8016314:	0801c914 	.word	0x0801c914
 8016318:	2001b67c 	.word	0x2001b67c
 801631c:	0801c928 	.word	0x0801c928
 8016320:	2001b684 	.word	0x2001b684
 8016324:	0801c940 	.word	0x0801c940
 8016328:	0801c954 	.word	0x0801c954

0801632c <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 801632c:	b580      	push	{r7, lr}
 801632e:	b08a      	sub	sp, #40	; 0x28
 8016330:	af00      	add	r7, sp, #0
 8016332:	60f8      	str	r0, [r7, #12]
 8016334:	60b9      	str	r1, [r7, #8]
 8016336:	607a      	str	r2, [r7, #4]
 8016338:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 801633a:	4b60      	ldr	r3, [pc, #384]	; (80164bc <dhcp_recv+0x190>)
 801633c:	685b      	ldr	r3, [r3, #4]
 801633e:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016340:	6a3b      	ldr	r3, [r7, #32]
 8016342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016344:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8016346:	687b      	ldr	r3, [r7, #4]
 8016348:	685b      	ldr	r3, [r3, #4]
 801634a:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 801634c:	69fb      	ldr	r3, [r7, #28]
 801634e:	2b00      	cmp	r3, #0
 8016350:	f000 809d 	beq.w	801648e <dhcp_recv+0x162>
 8016354:	69fb      	ldr	r3, [r7, #28]
 8016356:	791b      	ldrb	r3, [r3, #4]
 8016358:	2b00      	cmp	r3, #0
 801635a:	f000 8098 	beq.w	801648e <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 801635e:	687b      	ldr	r3, [r7, #4]
 8016360:	895b      	ldrh	r3, [r3, #10]
 8016362:	2b2b      	cmp	r3, #43	; 0x2b
 8016364:	f240 8095 	bls.w	8016492 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8016368:	69bb      	ldr	r3, [r7, #24]
 801636a:	781b      	ldrb	r3, [r3, #0]
 801636c:	2b02      	cmp	r3, #2
 801636e:	f040 8092 	bne.w	8016496 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8016372:	2300      	movs	r3, #0
 8016374:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016378:	e012      	b.n	80163a0 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 801637a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801637e:	6a3a      	ldr	r2, [r7, #32]
 8016380:	4413      	add	r3, r2
 8016382:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8016386:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801638a:	69b9      	ldr	r1, [r7, #24]
 801638c:	440b      	add	r3, r1
 801638e:	7f1b      	ldrb	r3, [r3, #28]
 8016390:	429a      	cmp	r2, r3
 8016392:	f040 8082 	bne.w	801649a <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8016396:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801639a:	3301      	adds	r3, #1
 801639c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80163a0:	6a3b      	ldr	r3, [r7, #32]
 80163a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80163a6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80163aa:	429a      	cmp	r2, r3
 80163ac:	d203      	bcs.n	80163b6 <dhcp_recv+0x8a>
 80163ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80163b2:	2b05      	cmp	r3, #5
 80163b4:	d9e1      	bls.n	801637a <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 80163b6:	69bb      	ldr	r3, [r7, #24]
 80163b8:	685b      	ldr	r3, [r3, #4]
 80163ba:	4618      	mov	r0, r3
 80163bc:	f7f6 fd3d 	bl	800ce3a <lwip_htonl>
 80163c0:	4602      	mov	r2, r0
 80163c2:	69fb      	ldr	r3, [r7, #28]
 80163c4:	681b      	ldr	r3, [r3, #0]
 80163c6:	429a      	cmp	r2, r3
 80163c8:	d169      	bne.n	801649e <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 80163ca:	69f9      	ldr	r1, [r7, #28]
 80163cc:	6878      	ldr	r0, [r7, #4]
 80163ce:	f7ff fcd9 	bl	8015d84 <dhcp_parse_reply>
 80163d2:	4603      	mov	r3, r0
 80163d4:	2b00      	cmp	r3, #0
 80163d6:	d164      	bne.n	80164a2 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 80163d8:	4b39      	ldr	r3, [pc, #228]	; (80164c0 <dhcp_recv+0x194>)
 80163da:	785b      	ldrb	r3, [r3, #1]
 80163dc:	2b00      	cmp	r3, #0
 80163de:	d062      	beq.n	80164a6 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 80163e0:	687b      	ldr	r3, [r7, #4]
 80163e2:	685b      	ldr	r3, [r3, #4]
 80163e4:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 80163e6:	4b37      	ldr	r3, [pc, #220]	; (80164c4 <dhcp_recv+0x198>)
 80163e8:	685b      	ldr	r3, [r3, #4]
 80163ea:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 80163ec:	7cfb      	ldrb	r3, [r7, #19]
 80163ee:	2b05      	cmp	r3, #5
 80163f0:	d12a      	bne.n	8016448 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 80163f2:	69fb      	ldr	r3, [r7, #28]
 80163f4:	795b      	ldrb	r3, [r3, #5]
 80163f6:	2b01      	cmp	r3, #1
 80163f8:	d112      	bne.n	8016420 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 80163fa:	6979      	ldr	r1, [r7, #20]
 80163fc:	6a38      	ldr	r0, [r7, #32]
 80163fe:	f7fe fe17 	bl	8015030 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8016402:	6a3b      	ldr	r3, [r7, #32]
 8016404:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016408:	f003 0308 	and.w	r3, r3, #8
 801640c:	2b00      	cmp	r3, #0
 801640e:	d003      	beq.n	8016418 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8016410:	6a38      	ldr	r0, [r7, #32]
 8016412:	f7fe fb87 	bl	8014b24 <dhcp_check>
 8016416:	e049      	b.n	80164ac <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8016418:	6a38      	ldr	r0, [r7, #32]
 801641a:	f7ff f867 	bl	80154ec <dhcp_bind>
 801641e:	e045      	b.n	80164ac <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8016420:	69fb      	ldr	r3, [r7, #28]
 8016422:	795b      	ldrb	r3, [r3, #5]
 8016424:	2b03      	cmp	r3, #3
 8016426:	d007      	beq.n	8016438 <dhcp_recv+0x10c>
 8016428:	69fb      	ldr	r3, [r7, #28]
 801642a:	795b      	ldrb	r3, [r3, #5]
 801642c:	2b04      	cmp	r3, #4
 801642e:	d003      	beq.n	8016438 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8016430:	69fb      	ldr	r3, [r7, #28]
 8016432:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8016434:	2b05      	cmp	r3, #5
 8016436:	d139      	bne.n	80164ac <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 8016438:	6979      	ldr	r1, [r7, #20]
 801643a:	6a38      	ldr	r0, [r7, #32]
 801643c:	f7fe fdf8 	bl	8015030 <dhcp_handle_ack>
      dhcp_bind(netif);
 8016440:	6a38      	ldr	r0, [r7, #32]
 8016442:	f7ff f853 	bl	80154ec <dhcp_bind>
 8016446:	e031      	b.n	80164ac <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8016448:	7cfb      	ldrb	r3, [r7, #19]
 801644a:	2b06      	cmp	r3, #6
 801644c:	d113      	bne.n	8016476 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801644e:	69fb      	ldr	r3, [r7, #28]
 8016450:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8016452:	2b03      	cmp	r3, #3
 8016454:	d00b      	beq.n	801646e <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8016456:	69fb      	ldr	r3, [r7, #28]
 8016458:	795b      	ldrb	r3, [r3, #5]
 801645a:	2b01      	cmp	r3, #1
 801645c:	d007      	beq.n	801646e <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801645e:	69fb      	ldr	r3, [r7, #28]
 8016460:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8016462:	2b04      	cmp	r3, #4
 8016464:	d003      	beq.n	801646e <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8016466:	69fb      	ldr	r3, [r7, #28]
 8016468:	795b      	ldrb	r3, [r3, #5]
 801646a:	2b05      	cmp	r3, #5
 801646c:	d103      	bne.n	8016476 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 801646e:	6a38      	ldr	r0, [r7, #32]
 8016470:	f7fe fb3e 	bl	8014af0 <dhcp_handle_nak>
 8016474:	e01a      	b.n	80164ac <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8016476:	7cfb      	ldrb	r3, [r7, #19]
 8016478:	2b02      	cmp	r3, #2
 801647a:	d116      	bne.n	80164aa <dhcp_recv+0x17e>
 801647c:	69fb      	ldr	r3, [r7, #28]
 801647e:	795b      	ldrb	r3, [r3, #5]
 8016480:	2b06      	cmp	r3, #6
 8016482:	d112      	bne.n	80164aa <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8016484:	6979      	ldr	r1, [r7, #20]
 8016486:	6a38      	ldr	r0, [r7, #32]
 8016488:	f7fe fb80 	bl	8014b8c <dhcp_handle_offer>
 801648c:	e00e      	b.n	80164ac <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801648e:	bf00      	nop
 8016490:	e00c      	b.n	80164ac <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8016492:	bf00      	nop
 8016494:	e00a      	b.n	80164ac <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8016496:	bf00      	nop
 8016498:	e008      	b.n	80164ac <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 801649a:	bf00      	nop
 801649c:	e006      	b.n	80164ac <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801649e:	bf00      	nop
 80164a0:	e004      	b.n	80164ac <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80164a2:	bf00      	nop
 80164a4:	e002      	b.n	80164ac <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80164a6:	bf00      	nop
 80164a8:	e000      	b.n	80164ac <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 80164aa:	bf00      	nop
  pbuf_free(p);
 80164ac:	6878      	ldr	r0, [r7, #4]
 80164ae:	f7f8 f867 	bl	800e580 <pbuf_free>
}
 80164b2:	bf00      	nop
 80164b4:	3728      	adds	r7, #40	; 0x28
 80164b6:	46bd      	mov	sp, r7
 80164b8:	bd80      	pop	{r7, pc}
 80164ba:	bf00      	nop
 80164bc:	2001716c 	.word	0x2001716c
 80164c0:	2001b67c 	.word	0x2001b67c
 80164c4:	2001b684 	.word	0x2001b684

080164c8 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 80164c8:	b580      	push	{r7, lr}
 80164ca:	b088      	sub	sp, #32
 80164cc:	af00      	add	r7, sp, #0
 80164ce:	60f8      	str	r0, [r7, #12]
 80164d0:	60b9      	str	r1, [r7, #8]
 80164d2:	603b      	str	r3, [r7, #0]
 80164d4:	4613      	mov	r3, r2
 80164d6:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 80164d8:	68fb      	ldr	r3, [r7, #12]
 80164da:	2b00      	cmp	r3, #0
 80164dc:	d108      	bne.n	80164f0 <dhcp_create_msg+0x28>
 80164de:	4b5f      	ldr	r3, [pc, #380]	; (801665c <dhcp_create_msg+0x194>)
 80164e0:	f240 7269 	movw	r2, #1897	; 0x769
 80164e4:	495e      	ldr	r1, [pc, #376]	; (8016660 <dhcp_create_msg+0x198>)
 80164e6:	485f      	ldr	r0, [pc, #380]	; (8016664 <dhcp_create_msg+0x19c>)
 80164e8:	f003 f924 	bl	8019734 <iprintf>
 80164ec:	2300      	movs	r3, #0
 80164ee:	e0b1      	b.n	8016654 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 80164f0:	68bb      	ldr	r3, [r7, #8]
 80164f2:	2b00      	cmp	r3, #0
 80164f4:	d108      	bne.n	8016508 <dhcp_create_msg+0x40>
 80164f6:	4b59      	ldr	r3, [pc, #356]	; (801665c <dhcp_create_msg+0x194>)
 80164f8:	f240 726a 	movw	r2, #1898	; 0x76a
 80164fc:	495a      	ldr	r1, [pc, #360]	; (8016668 <dhcp_create_msg+0x1a0>)
 80164fe:	4859      	ldr	r0, [pc, #356]	; (8016664 <dhcp_create_msg+0x19c>)
 8016500:	f003 f918 	bl	8019734 <iprintf>
 8016504:	2300      	movs	r3, #0
 8016506:	e0a5      	b.n	8016654 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8016508:	f44f 7220 	mov.w	r2, #640	; 0x280
 801650c:	f44f 719a 	mov.w	r1, #308	; 0x134
 8016510:	2036      	movs	r0, #54	; 0x36
 8016512:	f7f7 fd51 	bl	800dfb8 <pbuf_alloc>
 8016516:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8016518:	69bb      	ldr	r3, [r7, #24]
 801651a:	2b00      	cmp	r3, #0
 801651c:	d101      	bne.n	8016522 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 801651e:	2300      	movs	r3, #0
 8016520:	e098      	b.n	8016654 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8016522:	69bb      	ldr	r3, [r7, #24]
 8016524:	895b      	ldrh	r3, [r3, #10]
 8016526:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 801652a:	d206      	bcs.n	801653a <dhcp_create_msg+0x72>
 801652c:	4b4b      	ldr	r3, [pc, #300]	; (801665c <dhcp_create_msg+0x194>)
 801652e:	f240 7271 	movw	r2, #1905	; 0x771
 8016532:	494e      	ldr	r1, [pc, #312]	; (801666c <dhcp_create_msg+0x1a4>)
 8016534:	484b      	ldr	r0, [pc, #300]	; (8016664 <dhcp_create_msg+0x19c>)
 8016536:	f003 f8fd 	bl	8019734 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 801653a:	79fb      	ldrb	r3, [r7, #7]
 801653c:	2b03      	cmp	r3, #3
 801653e:	d103      	bne.n	8016548 <dhcp_create_msg+0x80>
 8016540:	68bb      	ldr	r3, [r7, #8]
 8016542:	795b      	ldrb	r3, [r3, #5]
 8016544:	2b03      	cmp	r3, #3
 8016546:	d10d      	bne.n	8016564 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8016548:	68bb      	ldr	r3, [r7, #8]
 801654a:	799b      	ldrb	r3, [r3, #6]
 801654c:	2b00      	cmp	r3, #0
 801654e:	d105      	bne.n	801655c <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8016550:	f003 f97e 	bl	8019850 <rand>
 8016554:	4603      	mov	r3, r0
 8016556:	461a      	mov	r2, r3
 8016558:	4b45      	ldr	r3, [pc, #276]	; (8016670 <dhcp_create_msg+0x1a8>)
 801655a:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 801655c:	4b44      	ldr	r3, [pc, #272]	; (8016670 <dhcp_create_msg+0x1a8>)
 801655e:	681a      	ldr	r2, [r3, #0]
 8016560:	68bb      	ldr	r3, [r7, #8]
 8016562:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8016564:	69bb      	ldr	r3, [r7, #24]
 8016566:	685b      	ldr	r3, [r3, #4]
 8016568:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 801656a:	f44f 729a 	mov.w	r2, #308	; 0x134
 801656e:	2100      	movs	r1, #0
 8016570:	6978      	ldr	r0, [r7, #20]
 8016572:	f002 fd09 	bl	8018f88 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8016576:	697b      	ldr	r3, [r7, #20]
 8016578:	2201      	movs	r2, #1
 801657a:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 801657c:	697b      	ldr	r3, [r7, #20]
 801657e:	2201      	movs	r2, #1
 8016580:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 8016582:	68fb      	ldr	r3, [r7, #12]
 8016584:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8016588:	697b      	ldr	r3, [r7, #20]
 801658a:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 801658c:	68bb      	ldr	r3, [r7, #8]
 801658e:	681b      	ldr	r3, [r3, #0]
 8016590:	4618      	mov	r0, r3
 8016592:	f7f6 fc52 	bl	800ce3a <lwip_htonl>
 8016596:	4602      	mov	r2, r0
 8016598:	697b      	ldr	r3, [r7, #20]
 801659a:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 801659c:	79fb      	ldrb	r3, [r7, #7]
 801659e:	2b08      	cmp	r3, #8
 80165a0:	d010      	beq.n	80165c4 <dhcp_create_msg+0xfc>
 80165a2:	79fb      	ldrb	r3, [r7, #7]
 80165a4:	2b04      	cmp	r3, #4
 80165a6:	d00d      	beq.n	80165c4 <dhcp_create_msg+0xfc>
 80165a8:	79fb      	ldrb	r3, [r7, #7]
 80165aa:	2b07      	cmp	r3, #7
 80165ac:	d00a      	beq.n	80165c4 <dhcp_create_msg+0xfc>
 80165ae:	79fb      	ldrb	r3, [r7, #7]
 80165b0:	2b03      	cmp	r3, #3
 80165b2:	d10c      	bne.n	80165ce <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 80165b4:	68bb      	ldr	r3, [r7, #8]
 80165b6:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 80165b8:	2b05      	cmp	r3, #5
 80165ba:	d003      	beq.n	80165c4 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 80165bc:	68bb      	ldr	r3, [r7, #8]
 80165be:	795b      	ldrb	r3, [r3, #5]
 80165c0:	2b04      	cmp	r3, #4
 80165c2:	d104      	bne.n	80165ce <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 80165c4:	68fb      	ldr	r3, [r7, #12]
 80165c6:	3304      	adds	r3, #4
 80165c8:	681a      	ldr	r2, [r3, #0]
 80165ca:	697b      	ldr	r3, [r7, #20]
 80165cc:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80165ce:	2300      	movs	r3, #0
 80165d0:	83fb      	strh	r3, [r7, #30]
 80165d2:	e00c      	b.n	80165ee <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 80165d4:	8bfa      	ldrh	r2, [r7, #30]
 80165d6:	8bfb      	ldrh	r3, [r7, #30]
 80165d8:	68f9      	ldr	r1, [r7, #12]
 80165da:	440a      	add	r2, r1
 80165dc:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 80165e0:	697a      	ldr	r2, [r7, #20]
 80165e2:	4413      	add	r3, r2
 80165e4:	460a      	mov	r2, r1
 80165e6:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80165e8:	8bfb      	ldrh	r3, [r7, #30]
 80165ea:	3301      	adds	r3, #1
 80165ec:	83fb      	strh	r3, [r7, #30]
 80165ee:	8bfb      	ldrh	r3, [r7, #30]
 80165f0:	2b05      	cmp	r3, #5
 80165f2:	d9ef      	bls.n	80165d4 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 80165f4:	697b      	ldr	r3, [r7, #20]
 80165f6:	2200      	movs	r2, #0
 80165f8:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 80165fc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8016600:	2200      	movs	r2, #0
 8016602:	f062 027d 	orn	r2, r2, #125	; 0x7d
 8016606:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 801660a:	2200      	movs	r2, #0
 801660c:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8016610:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8016614:	2200      	movs	r2, #0
 8016616:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 801661a:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 801661e:	697b      	ldr	r3, [r7, #20]
 8016620:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016624:	2301      	movs	r3, #1
 8016626:	2235      	movs	r2, #53	; 0x35
 8016628:	2000      	movs	r0, #0
 801662a:	f7ff fadb 	bl	8015be4 <dhcp_option>
 801662e:	4603      	mov	r3, r0
 8016630:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8016632:	697b      	ldr	r3, [r7, #20]
 8016634:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016638:	79fa      	ldrb	r2, [r7, #7]
 801663a:	8a7b      	ldrh	r3, [r7, #18]
 801663c:	4618      	mov	r0, r3
 801663e:	f7ff fb05 	bl	8015c4c <dhcp_option_byte>
 8016642:	4603      	mov	r3, r0
 8016644:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 8016646:	683b      	ldr	r3, [r7, #0]
 8016648:	2b00      	cmp	r3, #0
 801664a:	d002      	beq.n	8016652 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 801664c:	683b      	ldr	r3, [r7, #0]
 801664e:	8a7a      	ldrh	r2, [r7, #18]
 8016650:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 8016652:	69bb      	ldr	r3, [r7, #24]
}
 8016654:	4618      	mov	r0, r3
 8016656:	3720      	adds	r7, #32
 8016658:	46bd      	mov	sp, r7
 801665a:	bd80      	pop	{r7, pc}
 801665c:	0801c648 	.word	0x0801c648
 8016660:	0801c968 	.word	0x0801c968
 8016664:	0801c6a8 	.word	0x0801c6a8
 8016668:	0801c988 	.word	0x0801c988
 801666c:	0801c9a8 	.word	0x0801c9a8
 8016670:	20013884 	.word	0x20013884

08016674 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8016674:	b580      	push	{r7, lr}
 8016676:	b084      	sub	sp, #16
 8016678:	af00      	add	r7, sp, #0
 801667a:	4603      	mov	r3, r0
 801667c:	60b9      	str	r1, [r7, #8]
 801667e:	607a      	str	r2, [r7, #4]
 8016680:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 8016682:	89fb      	ldrh	r3, [r7, #14]
 8016684:	1c5a      	adds	r2, r3, #1
 8016686:	81fa      	strh	r2, [r7, #14]
 8016688:	461a      	mov	r2, r3
 801668a:	68bb      	ldr	r3, [r7, #8]
 801668c:	4413      	add	r3, r2
 801668e:	22ff      	movs	r2, #255	; 0xff
 8016690:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8016692:	e007      	b.n	80166a4 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8016694:	89fb      	ldrh	r3, [r7, #14]
 8016696:	1c5a      	adds	r2, r3, #1
 8016698:	81fa      	strh	r2, [r7, #14]
 801669a:	461a      	mov	r2, r3
 801669c:	68bb      	ldr	r3, [r7, #8]
 801669e:	4413      	add	r3, r2
 80166a0:	2200      	movs	r2, #0
 80166a2:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80166a4:	89fb      	ldrh	r3, [r7, #14]
 80166a6:	2b43      	cmp	r3, #67	; 0x43
 80166a8:	d904      	bls.n	80166b4 <dhcp_option_trailer+0x40>
 80166aa:	89fb      	ldrh	r3, [r7, #14]
 80166ac:	f003 0303 	and.w	r3, r3, #3
 80166b0:	2b00      	cmp	r3, #0
 80166b2:	d002      	beq.n	80166ba <dhcp_option_trailer+0x46>
 80166b4:	89fb      	ldrh	r3, [r7, #14]
 80166b6:	2b43      	cmp	r3, #67	; 0x43
 80166b8:	d9ec      	bls.n	8016694 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 80166ba:	89fb      	ldrh	r3, [r7, #14]
 80166bc:	33f0      	adds	r3, #240	; 0xf0
 80166be:	b29b      	uxth	r3, r3
 80166c0:	4619      	mov	r1, r3
 80166c2:	6878      	ldr	r0, [r7, #4]
 80166c4:	f7f7 fdd6 	bl	800e274 <pbuf_realloc>
}
 80166c8:	bf00      	nop
 80166ca:	3710      	adds	r7, #16
 80166cc:	46bd      	mov	sp, r7
 80166ce:	bd80      	pop	{r7, pc}

080166d0 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 80166d0:	b480      	push	{r7}
 80166d2:	b085      	sub	sp, #20
 80166d4:	af00      	add	r7, sp, #0
 80166d6:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 80166d8:	687b      	ldr	r3, [r7, #4]
 80166da:	2b00      	cmp	r3, #0
 80166dc:	d017      	beq.n	801670e <dhcp_supplied_address+0x3e>
 80166de:	687b      	ldr	r3, [r7, #4]
 80166e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80166e2:	2b00      	cmp	r3, #0
 80166e4:	d013      	beq.n	801670e <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80166e6:	687b      	ldr	r3, [r7, #4]
 80166e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80166ea:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80166ec:	68fb      	ldr	r3, [r7, #12]
 80166ee:	795b      	ldrb	r3, [r3, #5]
 80166f0:	2b0a      	cmp	r3, #10
 80166f2:	d007      	beq.n	8016704 <dhcp_supplied_address+0x34>
 80166f4:	68fb      	ldr	r3, [r7, #12]
 80166f6:	795b      	ldrb	r3, [r3, #5]
 80166f8:	2b05      	cmp	r3, #5
 80166fa:	d003      	beq.n	8016704 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 80166fc:	68fb      	ldr	r3, [r7, #12]
 80166fe:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8016700:	2b04      	cmp	r3, #4
 8016702:	d101      	bne.n	8016708 <dhcp_supplied_address+0x38>
 8016704:	2301      	movs	r3, #1
 8016706:	e000      	b.n	801670a <dhcp_supplied_address+0x3a>
 8016708:	2300      	movs	r3, #0
 801670a:	b2db      	uxtb	r3, r3
 801670c:	e000      	b.n	8016710 <dhcp_supplied_address+0x40>
  }
  return 0;
 801670e:	2300      	movs	r3, #0
}
 8016710:	4618      	mov	r0, r3
 8016712:	3714      	adds	r7, #20
 8016714:	46bd      	mov	sp, r7
 8016716:	f85d 7b04 	ldr.w	r7, [sp], #4
 801671a:	4770      	bx	lr

0801671c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801671c:	b580      	push	{r7, lr}
 801671e:	b082      	sub	sp, #8
 8016720:	af00      	add	r7, sp, #0
 8016722:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8016724:	4915      	ldr	r1, [pc, #84]	; (801677c <etharp_free_entry+0x60>)
 8016726:	687a      	ldr	r2, [r7, #4]
 8016728:	4613      	mov	r3, r2
 801672a:	005b      	lsls	r3, r3, #1
 801672c:	4413      	add	r3, r2
 801672e:	00db      	lsls	r3, r3, #3
 8016730:	440b      	add	r3, r1
 8016732:	681b      	ldr	r3, [r3, #0]
 8016734:	2b00      	cmp	r3, #0
 8016736:	d013      	beq.n	8016760 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8016738:	4910      	ldr	r1, [pc, #64]	; (801677c <etharp_free_entry+0x60>)
 801673a:	687a      	ldr	r2, [r7, #4]
 801673c:	4613      	mov	r3, r2
 801673e:	005b      	lsls	r3, r3, #1
 8016740:	4413      	add	r3, r2
 8016742:	00db      	lsls	r3, r3, #3
 8016744:	440b      	add	r3, r1
 8016746:	681b      	ldr	r3, [r3, #0]
 8016748:	4618      	mov	r0, r3
 801674a:	f7f7 ff19 	bl	800e580 <pbuf_free>
    arp_table[i].q = NULL;
 801674e:	490b      	ldr	r1, [pc, #44]	; (801677c <etharp_free_entry+0x60>)
 8016750:	687a      	ldr	r2, [r7, #4]
 8016752:	4613      	mov	r3, r2
 8016754:	005b      	lsls	r3, r3, #1
 8016756:	4413      	add	r3, r2
 8016758:	00db      	lsls	r3, r3, #3
 801675a:	440b      	add	r3, r1
 801675c:	2200      	movs	r2, #0
 801675e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8016760:	4906      	ldr	r1, [pc, #24]	; (801677c <etharp_free_entry+0x60>)
 8016762:	687a      	ldr	r2, [r7, #4]
 8016764:	4613      	mov	r3, r2
 8016766:	005b      	lsls	r3, r3, #1
 8016768:	4413      	add	r3, r2
 801676a:	00db      	lsls	r3, r3, #3
 801676c:	440b      	add	r3, r1
 801676e:	3314      	adds	r3, #20
 8016770:	2200      	movs	r2, #0
 8016772:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8016774:	bf00      	nop
 8016776:	3708      	adds	r7, #8
 8016778:	46bd      	mov	sp, r7
 801677a:	bd80      	pop	{r7, pc}
 801677c:	20013888 	.word	0x20013888

08016780 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8016780:	b580      	push	{r7, lr}
 8016782:	b082      	sub	sp, #8
 8016784:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016786:	2300      	movs	r3, #0
 8016788:	607b      	str	r3, [r7, #4]
 801678a:	e096      	b.n	80168ba <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801678c:	494f      	ldr	r1, [pc, #316]	; (80168cc <etharp_tmr+0x14c>)
 801678e:	687a      	ldr	r2, [r7, #4]
 8016790:	4613      	mov	r3, r2
 8016792:	005b      	lsls	r3, r3, #1
 8016794:	4413      	add	r3, r2
 8016796:	00db      	lsls	r3, r3, #3
 8016798:	440b      	add	r3, r1
 801679a:	3314      	adds	r3, #20
 801679c:	781b      	ldrb	r3, [r3, #0]
 801679e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80167a0:	78fb      	ldrb	r3, [r7, #3]
 80167a2:	2b00      	cmp	r3, #0
 80167a4:	f000 8086 	beq.w	80168b4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80167a8:	4948      	ldr	r1, [pc, #288]	; (80168cc <etharp_tmr+0x14c>)
 80167aa:	687a      	ldr	r2, [r7, #4]
 80167ac:	4613      	mov	r3, r2
 80167ae:	005b      	lsls	r3, r3, #1
 80167b0:	4413      	add	r3, r2
 80167b2:	00db      	lsls	r3, r3, #3
 80167b4:	440b      	add	r3, r1
 80167b6:	3312      	adds	r3, #18
 80167b8:	881b      	ldrh	r3, [r3, #0]
 80167ba:	3301      	adds	r3, #1
 80167bc:	b298      	uxth	r0, r3
 80167be:	4943      	ldr	r1, [pc, #268]	; (80168cc <etharp_tmr+0x14c>)
 80167c0:	687a      	ldr	r2, [r7, #4]
 80167c2:	4613      	mov	r3, r2
 80167c4:	005b      	lsls	r3, r3, #1
 80167c6:	4413      	add	r3, r2
 80167c8:	00db      	lsls	r3, r3, #3
 80167ca:	440b      	add	r3, r1
 80167cc:	3312      	adds	r3, #18
 80167ce:	4602      	mov	r2, r0
 80167d0:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80167d2:	493e      	ldr	r1, [pc, #248]	; (80168cc <etharp_tmr+0x14c>)
 80167d4:	687a      	ldr	r2, [r7, #4]
 80167d6:	4613      	mov	r3, r2
 80167d8:	005b      	lsls	r3, r3, #1
 80167da:	4413      	add	r3, r2
 80167dc:	00db      	lsls	r3, r3, #3
 80167de:	440b      	add	r3, r1
 80167e0:	3312      	adds	r3, #18
 80167e2:	881b      	ldrh	r3, [r3, #0]
 80167e4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80167e8:	d215      	bcs.n	8016816 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80167ea:	4938      	ldr	r1, [pc, #224]	; (80168cc <etharp_tmr+0x14c>)
 80167ec:	687a      	ldr	r2, [r7, #4]
 80167ee:	4613      	mov	r3, r2
 80167f0:	005b      	lsls	r3, r3, #1
 80167f2:	4413      	add	r3, r2
 80167f4:	00db      	lsls	r3, r3, #3
 80167f6:	440b      	add	r3, r1
 80167f8:	3314      	adds	r3, #20
 80167fa:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80167fc:	2b01      	cmp	r3, #1
 80167fe:	d10e      	bne.n	801681e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8016800:	4932      	ldr	r1, [pc, #200]	; (80168cc <etharp_tmr+0x14c>)
 8016802:	687a      	ldr	r2, [r7, #4]
 8016804:	4613      	mov	r3, r2
 8016806:	005b      	lsls	r3, r3, #1
 8016808:	4413      	add	r3, r2
 801680a:	00db      	lsls	r3, r3, #3
 801680c:	440b      	add	r3, r1
 801680e:	3312      	adds	r3, #18
 8016810:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8016812:	2b04      	cmp	r3, #4
 8016814:	d903      	bls.n	801681e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8016816:	6878      	ldr	r0, [r7, #4]
 8016818:	f7ff ff80 	bl	801671c <etharp_free_entry>
 801681c:	e04a      	b.n	80168b4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801681e:	492b      	ldr	r1, [pc, #172]	; (80168cc <etharp_tmr+0x14c>)
 8016820:	687a      	ldr	r2, [r7, #4]
 8016822:	4613      	mov	r3, r2
 8016824:	005b      	lsls	r3, r3, #1
 8016826:	4413      	add	r3, r2
 8016828:	00db      	lsls	r3, r3, #3
 801682a:	440b      	add	r3, r1
 801682c:	3314      	adds	r3, #20
 801682e:	781b      	ldrb	r3, [r3, #0]
 8016830:	2b03      	cmp	r3, #3
 8016832:	d10a      	bne.n	801684a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8016834:	4925      	ldr	r1, [pc, #148]	; (80168cc <etharp_tmr+0x14c>)
 8016836:	687a      	ldr	r2, [r7, #4]
 8016838:	4613      	mov	r3, r2
 801683a:	005b      	lsls	r3, r3, #1
 801683c:	4413      	add	r3, r2
 801683e:	00db      	lsls	r3, r3, #3
 8016840:	440b      	add	r3, r1
 8016842:	3314      	adds	r3, #20
 8016844:	2204      	movs	r2, #4
 8016846:	701a      	strb	r2, [r3, #0]
 8016848:	e034      	b.n	80168b4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801684a:	4920      	ldr	r1, [pc, #128]	; (80168cc <etharp_tmr+0x14c>)
 801684c:	687a      	ldr	r2, [r7, #4]
 801684e:	4613      	mov	r3, r2
 8016850:	005b      	lsls	r3, r3, #1
 8016852:	4413      	add	r3, r2
 8016854:	00db      	lsls	r3, r3, #3
 8016856:	440b      	add	r3, r1
 8016858:	3314      	adds	r3, #20
 801685a:	781b      	ldrb	r3, [r3, #0]
 801685c:	2b04      	cmp	r3, #4
 801685e:	d10a      	bne.n	8016876 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8016860:	491a      	ldr	r1, [pc, #104]	; (80168cc <etharp_tmr+0x14c>)
 8016862:	687a      	ldr	r2, [r7, #4]
 8016864:	4613      	mov	r3, r2
 8016866:	005b      	lsls	r3, r3, #1
 8016868:	4413      	add	r3, r2
 801686a:	00db      	lsls	r3, r3, #3
 801686c:	440b      	add	r3, r1
 801686e:	3314      	adds	r3, #20
 8016870:	2202      	movs	r2, #2
 8016872:	701a      	strb	r2, [r3, #0]
 8016874:	e01e      	b.n	80168b4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8016876:	4915      	ldr	r1, [pc, #84]	; (80168cc <etharp_tmr+0x14c>)
 8016878:	687a      	ldr	r2, [r7, #4]
 801687a:	4613      	mov	r3, r2
 801687c:	005b      	lsls	r3, r3, #1
 801687e:	4413      	add	r3, r2
 8016880:	00db      	lsls	r3, r3, #3
 8016882:	440b      	add	r3, r1
 8016884:	3314      	adds	r3, #20
 8016886:	781b      	ldrb	r3, [r3, #0]
 8016888:	2b01      	cmp	r3, #1
 801688a:	d113      	bne.n	80168b4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801688c:	490f      	ldr	r1, [pc, #60]	; (80168cc <etharp_tmr+0x14c>)
 801688e:	687a      	ldr	r2, [r7, #4]
 8016890:	4613      	mov	r3, r2
 8016892:	005b      	lsls	r3, r3, #1
 8016894:	4413      	add	r3, r2
 8016896:	00db      	lsls	r3, r3, #3
 8016898:	440b      	add	r3, r1
 801689a:	3308      	adds	r3, #8
 801689c:	6818      	ldr	r0, [r3, #0]
 801689e:	687a      	ldr	r2, [r7, #4]
 80168a0:	4613      	mov	r3, r2
 80168a2:	005b      	lsls	r3, r3, #1
 80168a4:	4413      	add	r3, r2
 80168a6:	00db      	lsls	r3, r3, #3
 80168a8:	4a08      	ldr	r2, [pc, #32]	; (80168cc <etharp_tmr+0x14c>)
 80168aa:	4413      	add	r3, r2
 80168ac:	3304      	adds	r3, #4
 80168ae:	4619      	mov	r1, r3
 80168b0:	f000 fe72 	bl	8017598 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80168b4:	687b      	ldr	r3, [r7, #4]
 80168b6:	3301      	adds	r3, #1
 80168b8:	607b      	str	r3, [r7, #4]
 80168ba:	687b      	ldr	r3, [r7, #4]
 80168bc:	2b09      	cmp	r3, #9
 80168be:	f77f af65 	ble.w	801678c <etharp_tmr+0xc>
      }
    }
  }
}
 80168c2:	bf00      	nop
 80168c4:	bf00      	nop
 80168c6:	3708      	adds	r7, #8
 80168c8:	46bd      	mov	sp, r7
 80168ca:	bd80      	pop	{r7, pc}
 80168cc:	20013888 	.word	0x20013888

080168d0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80168d0:	b580      	push	{r7, lr}
 80168d2:	b08a      	sub	sp, #40	; 0x28
 80168d4:	af00      	add	r7, sp, #0
 80168d6:	60f8      	str	r0, [r7, #12]
 80168d8:	460b      	mov	r3, r1
 80168da:	607a      	str	r2, [r7, #4]
 80168dc:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80168de:	230a      	movs	r3, #10
 80168e0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80168e2:	230a      	movs	r3, #10
 80168e4:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80168e6:	230a      	movs	r3, #10
 80168e8:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 80168ea:	2300      	movs	r3, #0
 80168ec:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80168ee:	230a      	movs	r3, #10
 80168f0:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80168f2:	2300      	movs	r3, #0
 80168f4:	83bb      	strh	r3, [r7, #28]
 80168f6:	2300      	movs	r3, #0
 80168f8:	837b      	strh	r3, [r7, #26]
 80168fa:	2300      	movs	r3, #0
 80168fc:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80168fe:	2300      	movs	r3, #0
 8016900:	843b      	strh	r3, [r7, #32]
 8016902:	e0ae      	b.n	8016a62 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8016904:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016908:	49a6      	ldr	r1, [pc, #664]	; (8016ba4 <etharp_find_entry+0x2d4>)
 801690a:	4613      	mov	r3, r2
 801690c:	005b      	lsls	r3, r3, #1
 801690e:	4413      	add	r3, r2
 8016910:	00db      	lsls	r3, r3, #3
 8016912:	440b      	add	r3, r1
 8016914:	3314      	adds	r3, #20
 8016916:	781b      	ldrb	r3, [r3, #0]
 8016918:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801691a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801691e:	2b0a      	cmp	r3, #10
 8016920:	d105      	bne.n	801692e <etharp_find_entry+0x5e>
 8016922:	7dfb      	ldrb	r3, [r7, #23]
 8016924:	2b00      	cmp	r3, #0
 8016926:	d102      	bne.n	801692e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8016928:	8c3b      	ldrh	r3, [r7, #32]
 801692a:	847b      	strh	r3, [r7, #34]	; 0x22
 801692c:	e095      	b.n	8016a5a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801692e:	7dfb      	ldrb	r3, [r7, #23]
 8016930:	2b00      	cmp	r3, #0
 8016932:	f000 8092 	beq.w	8016a5a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8016936:	7dfb      	ldrb	r3, [r7, #23]
 8016938:	2b01      	cmp	r3, #1
 801693a:	d009      	beq.n	8016950 <etharp_find_entry+0x80>
 801693c:	7dfb      	ldrb	r3, [r7, #23]
 801693e:	2b01      	cmp	r3, #1
 8016940:	d806      	bhi.n	8016950 <etharp_find_entry+0x80>
 8016942:	4b99      	ldr	r3, [pc, #612]	; (8016ba8 <etharp_find_entry+0x2d8>)
 8016944:	f240 1223 	movw	r2, #291	; 0x123
 8016948:	4998      	ldr	r1, [pc, #608]	; (8016bac <etharp_find_entry+0x2dc>)
 801694a:	4899      	ldr	r0, [pc, #612]	; (8016bb0 <etharp_find_entry+0x2e0>)
 801694c:	f002 fef2 	bl	8019734 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8016950:	68fb      	ldr	r3, [r7, #12]
 8016952:	2b00      	cmp	r3, #0
 8016954:	d020      	beq.n	8016998 <etharp_find_entry+0xc8>
 8016956:	68fb      	ldr	r3, [r7, #12]
 8016958:	6819      	ldr	r1, [r3, #0]
 801695a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801695e:	4891      	ldr	r0, [pc, #580]	; (8016ba4 <etharp_find_entry+0x2d4>)
 8016960:	4613      	mov	r3, r2
 8016962:	005b      	lsls	r3, r3, #1
 8016964:	4413      	add	r3, r2
 8016966:	00db      	lsls	r3, r3, #3
 8016968:	4403      	add	r3, r0
 801696a:	3304      	adds	r3, #4
 801696c:	681b      	ldr	r3, [r3, #0]
 801696e:	4299      	cmp	r1, r3
 8016970:	d112      	bne.n	8016998 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8016972:	687b      	ldr	r3, [r7, #4]
 8016974:	2b00      	cmp	r3, #0
 8016976:	d00c      	beq.n	8016992 <etharp_find_entry+0xc2>
 8016978:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801697c:	4989      	ldr	r1, [pc, #548]	; (8016ba4 <etharp_find_entry+0x2d4>)
 801697e:	4613      	mov	r3, r2
 8016980:	005b      	lsls	r3, r3, #1
 8016982:	4413      	add	r3, r2
 8016984:	00db      	lsls	r3, r3, #3
 8016986:	440b      	add	r3, r1
 8016988:	3308      	adds	r3, #8
 801698a:	681b      	ldr	r3, [r3, #0]
 801698c:	687a      	ldr	r2, [r7, #4]
 801698e:	429a      	cmp	r2, r3
 8016990:	d102      	bne.n	8016998 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8016992:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016996:	e100      	b.n	8016b9a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8016998:	7dfb      	ldrb	r3, [r7, #23]
 801699a:	2b01      	cmp	r3, #1
 801699c:	d140      	bne.n	8016a20 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801699e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80169a2:	4980      	ldr	r1, [pc, #512]	; (8016ba4 <etharp_find_entry+0x2d4>)
 80169a4:	4613      	mov	r3, r2
 80169a6:	005b      	lsls	r3, r3, #1
 80169a8:	4413      	add	r3, r2
 80169aa:	00db      	lsls	r3, r3, #3
 80169ac:	440b      	add	r3, r1
 80169ae:	681b      	ldr	r3, [r3, #0]
 80169b0:	2b00      	cmp	r3, #0
 80169b2:	d01a      	beq.n	80169ea <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80169b4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80169b8:	497a      	ldr	r1, [pc, #488]	; (8016ba4 <etharp_find_entry+0x2d4>)
 80169ba:	4613      	mov	r3, r2
 80169bc:	005b      	lsls	r3, r3, #1
 80169be:	4413      	add	r3, r2
 80169c0:	00db      	lsls	r3, r3, #3
 80169c2:	440b      	add	r3, r1
 80169c4:	3312      	adds	r3, #18
 80169c6:	881b      	ldrh	r3, [r3, #0]
 80169c8:	8bba      	ldrh	r2, [r7, #28]
 80169ca:	429a      	cmp	r2, r3
 80169cc:	d845      	bhi.n	8016a5a <etharp_find_entry+0x18a>
            old_queue = i;
 80169ce:	8c3b      	ldrh	r3, [r7, #32]
 80169d0:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80169d2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80169d6:	4973      	ldr	r1, [pc, #460]	; (8016ba4 <etharp_find_entry+0x2d4>)
 80169d8:	4613      	mov	r3, r2
 80169da:	005b      	lsls	r3, r3, #1
 80169dc:	4413      	add	r3, r2
 80169de:	00db      	lsls	r3, r3, #3
 80169e0:	440b      	add	r3, r1
 80169e2:	3312      	adds	r3, #18
 80169e4:	881b      	ldrh	r3, [r3, #0]
 80169e6:	83bb      	strh	r3, [r7, #28]
 80169e8:	e037      	b.n	8016a5a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80169ea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80169ee:	496d      	ldr	r1, [pc, #436]	; (8016ba4 <etharp_find_entry+0x2d4>)
 80169f0:	4613      	mov	r3, r2
 80169f2:	005b      	lsls	r3, r3, #1
 80169f4:	4413      	add	r3, r2
 80169f6:	00db      	lsls	r3, r3, #3
 80169f8:	440b      	add	r3, r1
 80169fa:	3312      	adds	r3, #18
 80169fc:	881b      	ldrh	r3, [r3, #0]
 80169fe:	8b7a      	ldrh	r2, [r7, #26]
 8016a00:	429a      	cmp	r2, r3
 8016a02:	d82a      	bhi.n	8016a5a <etharp_find_entry+0x18a>
            old_pending = i;
 8016a04:	8c3b      	ldrh	r3, [r7, #32]
 8016a06:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8016a08:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016a0c:	4965      	ldr	r1, [pc, #404]	; (8016ba4 <etharp_find_entry+0x2d4>)
 8016a0e:	4613      	mov	r3, r2
 8016a10:	005b      	lsls	r3, r3, #1
 8016a12:	4413      	add	r3, r2
 8016a14:	00db      	lsls	r3, r3, #3
 8016a16:	440b      	add	r3, r1
 8016a18:	3312      	adds	r3, #18
 8016a1a:	881b      	ldrh	r3, [r3, #0]
 8016a1c:	837b      	strh	r3, [r7, #26]
 8016a1e:	e01c      	b.n	8016a5a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8016a20:	7dfb      	ldrb	r3, [r7, #23]
 8016a22:	2b01      	cmp	r3, #1
 8016a24:	d919      	bls.n	8016a5a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8016a26:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016a2a:	495e      	ldr	r1, [pc, #376]	; (8016ba4 <etharp_find_entry+0x2d4>)
 8016a2c:	4613      	mov	r3, r2
 8016a2e:	005b      	lsls	r3, r3, #1
 8016a30:	4413      	add	r3, r2
 8016a32:	00db      	lsls	r3, r3, #3
 8016a34:	440b      	add	r3, r1
 8016a36:	3312      	adds	r3, #18
 8016a38:	881b      	ldrh	r3, [r3, #0]
 8016a3a:	8b3a      	ldrh	r2, [r7, #24]
 8016a3c:	429a      	cmp	r2, r3
 8016a3e:	d80c      	bhi.n	8016a5a <etharp_find_entry+0x18a>
            old_stable = i;
 8016a40:	8c3b      	ldrh	r3, [r7, #32]
 8016a42:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8016a44:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016a48:	4956      	ldr	r1, [pc, #344]	; (8016ba4 <etharp_find_entry+0x2d4>)
 8016a4a:	4613      	mov	r3, r2
 8016a4c:	005b      	lsls	r3, r3, #1
 8016a4e:	4413      	add	r3, r2
 8016a50:	00db      	lsls	r3, r3, #3
 8016a52:	440b      	add	r3, r1
 8016a54:	3312      	adds	r3, #18
 8016a56:	881b      	ldrh	r3, [r3, #0]
 8016a58:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016a5a:	8c3b      	ldrh	r3, [r7, #32]
 8016a5c:	3301      	adds	r3, #1
 8016a5e:	b29b      	uxth	r3, r3
 8016a60:	843b      	strh	r3, [r7, #32]
 8016a62:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016a66:	2b09      	cmp	r3, #9
 8016a68:	f77f af4c 	ble.w	8016904 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8016a6c:	7afb      	ldrb	r3, [r7, #11]
 8016a6e:	f003 0302 	and.w	r3, r3, #2
 8016a72:	2b00      	cmp	r3, #0
 8016a74:	d108      	bne.n	8016a88 <etharp_find_entry+0x1b8>
 8016a76:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8016a7a:	2b0a      	cmp	r3, #10
 8016a7c:	d107      	bne.n	8016a8e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8016a7e:	7afb      	ldrb	r3, [r7, #11]
 8016a80:	f003 0301 	and.w	r3, r3, #1
 8016a84:	2b00      	cmp	r3, #0
 8016a86:	d102      	bne.n	8016a8e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8016a88:	f04f 33ff 	mov.w	r3, #4294967295
 8016a8c:	e085      	b.n	8016b9a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8016a8e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8016a92:	2b09      	cmp	r3, #9
 8016a94:	dc02      	bgt.n	8016a9c <etharp_find_entry+0x1cc>
    i = empty;
 8016a96:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016a98:	843b      	strh	r3, [r7, #32]
 8016a9a:	e039      	b.n	8016b10 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8016a9c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8016aa0:	2b09      	cmp	r3, #9
 8016aa2:	dc14      	bgt.n	8016ace <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8016aa4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016aa6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8016aa8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016aac:	493d      	ldr	r1, [pc, #244]	; (8016ba4 <etharp_find_entry+0x2d4>)
 8016aae:	4613      	mov	r3, r2
 8016ab0:	005b      	lsls	r3, r3, #1
 8016ab2:	4413      	add	r3, r2
 8016ab4:	00db      	lsls	r3, r3, #3
 8016ab6:	440b      	add	r3, r1
 8016ab8:	681b      	ldr	r3, [r3, #0]
 8016aba:	2b00      	cmp	r3, #0
 8016abc:	d018      	beq.n	8016af0 <etharp_find_entry+0x220>
 8016abe:	4b3a      	ldr	r3, [pc, #232]	; (8016ba8 <etharp_find_entry+0x2d8>)
 8016ac0:	f240 126d 	movw	r2, #365	; 0x16d
 8016ac4:	493b      	ldr	r1, [pc, #236]	; (8016bb4 <etharp_find_entry+0x2e4>)
 8016ac6:	483a      	ldr	r0, [pc, #232]	; (8016bb0 <etharp_find_entry+0x2e0>)
 8016ac8:	f002 fe34 	bl	8019734 <iprintf>
 8016acc:	e010      	b.n	8016af0 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8016ace:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8016ad2:	2b09      	cmp	r3, #9
 8016ad4:	dc02      	bgt.n	8016adc <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8016ad6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8016ad8:	843b      	strh	r3, [r7, #32]
 8016ada:	e009      	b.n	8016af0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8016adc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8016ae0:	2b09      	cmp	r3, #9
 8016ae2:	dc02      	bgt.n	8016aea <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8016ae4:	8bfb      	ldrh	r3, [r7, #30]
 8016ae6:	843b      	strh	r3, [r7, #32]
 8016ae8:	e002      	b.n	8016af0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8016aea:	f04f 33ff 	mov.w	r3, #4294967295
 8016aee:	e054      	b.n	8016b9a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8016af0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016af4:	2b09      	cmp	r3, #9
 8016af6:	dd06      	ble.n	8016b06 <etharp_find_entry+0x236>
 8016af8:	4b2b      	ldr	r3, [pc, #172]	; (8016ba8 <etharp_find_entry+0x2d8>)
 8016afa:	f240 127f 	movw	r2, #383	; 0x17f
 8016afe:	492e      	ldr	r1, [pc, #184]	; (8016bb8 <etharp_find_entry+0x2e8>)
 8016b00:	482b      	ldr	r0, [pc, #172]	; (8016bb0 <etharp_find_entry+0x2e0>)
 8016b02:	f002 fe17 	bl	8019734 <iprintf>
    etharp_free_entry(i);
 8016b06:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016b0a:	4618      	mov	r0, r3
 8016b0c:	f7ff fe06 	bl	801671c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8016b10:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016b14:	2b09      	cmp	r3, #9
 8016b16:	dd06      	ble.n	8016b26 <etharp_find_entry+0x256>
 8016b18:	4b23      	ldr	r3, [pc, #140]	; (8016ba8 <etharp_find_entry+0x2d8>)
 8016b1a:	f240 1283 	movw	r2, #387	; 0x183
 8016b1e:	4926      	ldr	r1, [pc, #152]	; (8016bb8 <etharp_find_entry+0x2e8>)
 8016b20:	4823      	ldr	r0, [pc, #140]	; (8016bb0 <etharp_find_entry+0x2e0>)
 8016b22:	f002 fe07 	bl	8019734 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8016b26:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016b2a:	491e      	ldr	r1, [pc, #120]	; (8016ba4 <etharp_find_entry+0x2d4>)
 8016b2c:	4613      	mov	r3, r2
 8016b2e:	005b      	lsls	r3, r3, #1
 8016b30:	4413      	add	r3, r2
 8016b32:	00db      	lsls	r3, r3, #3
 8016b34:	440b      	add	r3, r1
 8016b36:	3314      	adds	r3, #20
 8016b38:	781b      	ldrb	r3, [r3, #0]
 8016b3a:	2b00      	cmp	r3, #0
 8016b3c:	d006      	beq.n	8016b4c <etharp_find_entry+0x27c>
 8016b3e:	4b1a      	ldr	r3, [pc, #104]	; (8016ba8 <etharp_find_entry+0x2d8>)
 8016b40:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8016b44:	491d      	ldr	r1, [pc, #116]	; (8016bbc <etharp_find_entry+0x2ec>)
 8016b46:	481a      	ldr	r0, [pc, #104]	; (8016bb0 <etharp_find_entry+0x2e0>)
 8016b48:	f002 fdf4 	bl	8019734 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8016b4c:	68fb      	ldr	r3, [r7, #12]
 8016b4e:	2b00      	cmp	r3, #0
 8016b50:	d00b      	beq.n	8016b6a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8016b52:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016b56:	68fb      	ldr	r3, [r7, #12]
 8016b58:	6819      	ldr	r1, [r3, #0]
 8016b5a:	4812      	ldr	r0, [pc, #72]	; (8016ba4 <etharp_find_entry+0x2d4>)
 8016b5c:	4613      	mov	r3, r2
 8016b5e:	005b      	lsls	r3, r3, #1
 8016b60:	4413      	add	r3, r2
 8016b62:	00db      	lsls	r3, r3, #3
 8016b64:	4403      	add	r3, r0
 8016b66:	3304      	adds	r3, #4
 8016b68:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8016b6a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016b6e:	490d      	ldr	r1, [pc, #52]	; (8016ba4 <etharp_find_entry+0x2d4>)
 8016b70:	4613      	mov	r3, r2
 8016b72:	005b      	lsls	r3, r3, #1
 8016b74:	4413      	add	r3, r2
 8016b76:	00db      	lsls	r3, r3, #3
 8016b78:	440b      	add	r3, r1
 8016b7a:	3312      	adds	r3, #18
 8016b7c:	2200      	movs	r2, #0
 8016b7e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8016b80:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016b84:	4907      	ldr	r1, [pc, #28]	; (8016ba4 <etharp_find_entry+0x2d4>)
 8016b86:	4613      	mov	r3, r2
 8016b88:	005b      	lsls	r3, r3, #1
 8016b8a:	4413      	add	r3, r2
 8016b8c:	00db      	lsls	r3, r3, #3
 8016b8e:	440b      	add	r3, r1
 8016b90:	3308      	adds	r3, #8
 8016b92:	687a      	ldr	r2, [r7, #4]
 8016b94:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8016b96:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8016b9a:	4618      	mov	r0, r3
 8016b9c:	3728      	adds	r7, #40	; 0x28
 8016b9e:	46bd      	mov	sp, r7
 8016ba0:	bd80      	pop	{r7, pc}
 8016ba2:	bf00      	nop
 8016ba4:	20013888 	.word	0x20013888
 8016ba8:	0801c9e8 	.word	0x0801c9e8
 8016bac:	0801ca20 	.word	0x0801ca20
 8016bb0:	0801ca60 	.word	0x0801ca60
 8016bb4:	0801ca88 	.word	0x0801ca88
 8016bb8:	0801caa0 	.word	0x0801caa0
 8016bbc:	0801cab4 	.word	0x0801cab4

08016bc0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8016bc0:	b580      	push	{r7, lr}
 8016bc2:	b088      	sub	sp, #32
 8016bc4:	af02      	add	r7, sp, #8
 8016bc6:	60f8      	str	r0, [r7, #12]
 8016bc8:	60b9      	str	r1, [r7, #8]
 8016bca:	607a      	str	r2, [r7, #4]
 8016bcc:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8016bce:	68fb      	ldr	r3, [r7, #12]
 8016bd0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016bd4:	2b06      	cmp	r3, #6
 8016bd6:	d006      	beq.n	8016be6 <etharp_update_arp_entry+0x26>
 8016bd8:	4b48      	ldr	r3, [pc, #288]	; (8016cfc <etharp_update_arp_entry+0x13c>)
 8016bda:	f240 12a9 	movw	r2, #425	; 0x1a9
 8016bde:	4948      	ldr	r1, [pc, #288]	; (8016d00 <etharp_update_arp_entry+0x140>)
 8016be0:	4848      	ldr	r0, [pc, #288]	; (8016d04 <etharp_update_arp_entry+0x144>)
 8016be2:	f002 fda7 	bl	8019734 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8016be6:	68bb      	ldr	r3, [r7, #8]
 8016be8:	2b00      	cmp	r3, #0
 8016bea:	d012      	beq.n	8016c12 <etharp_update_arp_entry+0x52>
 8016bec:	68bb      	ldr	r3, [r7, #8]
 8016bee:	681b      	ldr	r3, [r3, #0]
 8016bf0:	2b00      	cmp	r3, #0
 8016bf2:	d00e      	beq.n	8016c12 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8016bf4:	68bb      	ldr	r3, [r7, #8]
 8016bf6:	681b      	ldr	r3, [r3, #0]
 8016bf8:	68f9      	ldr	r1, [r7, #12]
 8016bfa:	4618      	mov	r0, r3
 8016bfc:	f001 f920 	bl	8017e40 <ip4_addr_isbroadcast_u32>
 8016c00:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8016c02:	2b00      	cmp	r3, #0
 8016c04:	d105      	bne.n	8016c12 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8016c06:	68bb      	ldr	r3, [r7, #8]
 8016c08:	681b      	ldr	r3, [r3, #0]
 8016c0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8016c0e:	2be0      	cmp	r3, #224	; 0xe0
 8016c10:	d102      	bne.n	8016c18 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8016c12:	f06f 030f 	mvn.w	r3, #15
 8016c16:	e06c      	b.n	8016cf2 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8016c18:	78fb      	ldrb	r3, [r7, #3]
 8016c1a:	68fa      	ldr	r2, [r7, #12]
 8016c1c:	4619      	mov	r1, r3
 8016c1e:	68b8      	ldr	r0, [r7, #8]
 8016c20:	f7ff fe56 	bl	80168d0 <etharp_find_entry>
 8016c24:	4603      	mov	r3, r0
 8016c26:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8016c28:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8016c2c:	2b00      	cmp	r3, #0
 8016c2e:	da02      	bge.n	8016c36 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8016c30:	8afb      	ldrh	r3, [r7, #22]
 8016c32:	b25b      	sxtb	r3, r3
 8016c34:	e05d      	b.n	8016cf2 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8016c36:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016c3a:	4933      	ldr	r1, [pc, #204]	; (8016d08 <etharp_update_arp_entry+0x148>)
 8016c3c:	4613      	mov	r3, r2
 8016c3e:	005b      	lsls	r3, r3, #1
 8016c40:	4413      	add	r3, r2
 8016c42:	00db      	lsls	r3, r3, #3
 8016c44:	440b      	add	r3, r1
 8016c46:	3314      	adds	r3, #20
 8016c48:	2202      	movs	r2, #2
 8016c4a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8016c4c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016c50:	492d      	ldr	r1, [pc, #180]	; (8016d08 <etharp_update_arp_entry+0x148>)
 8016c52:	4613      	mov	r3, r2
 8016c54:	005b      	lsls	r3, r3, #1
 8016c56:	4413      	add	r3, r2
 8016c58:	00db      	lsls	r3, r3, #3
 8016c5a:	440b      	add	r3, r1
 8016c5c:	3308      	adds	r3, #8
 8016c5e:	68fa      	ldr	r2, [r7, #12]
 8016c60:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8016c62:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016c66:	4613      	mov	r3, r2
 8016c68:	005b      	lsls	r3, r3, #1
 8016c6a:	4413      	add	r3, r2
 8016c6c:	00db      	lsls	r3, r3, #3
 8016c6e:	3308      	adds	r3, #8
 8016c70:	4a25      	ldr	r2, [pc, #148]	; (8016d08 <etharp_update_arp_entry+0x148>)
 8016c72:	4413      	add	r3, r2
 8016c74:	3304      	adds	r3, #4
 8016c76:	2206      	movs	r2, #6
 8016c78:	6879      	ldr	r1, [r7, #4]
 8016c7a:	4618      	mov	r0, r3
 8016c7c:	f002 f976 	bl	8018f6c <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8016c80:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016c84:	4920      	ldr	r1, [pc, #128]	; (8016d08 <etharp_update_arp_entry+0x148>)
 8016c86:	4613      	mov	r3, r2
 8016c88:	005b      	lsls	r3, r3, #1
 8016c8a:	4413      	add	r3, r2
 8016c8c:	00db      	lsls	r3, r3, #3
 8016c8e:	440b      	add	r3, r1
 8016c90:	3312      	adds	r3, #18
 8016c92:	2200      	movs	r2, #0
 8016c94:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8016c96:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016c9a:	491b      	ldr	r1, [pc, #108]	; (8016d08 <etharp_update_arp_entry+0x148>)
 8016c9c:	4613      	mov	r3, r2
 8016c9e:	005b      	lsls	r3, r3, #1
 8016ca0:	4413      	add	r3, r2
 8016ca2:	00db      	lsls	r3, r3, #3
 8016ca4:	440b      	add	r3, r1
 8016ca6:	681b      	ldr	r3, [r3, #0]
 8016ca8:	2b00      	cmp	r3, #0
 8016caa:	d021      	beq.n	8016cf0 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8016cac:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016cb0:	4915      	ldr	r1, [pc, #84]	; (8016d08 <etharp_update_arp_entry+0x148>)
 8016cb2:	4613      	mov	r3, r2
 8016cb4:	005b      	lsls	r3, r3, #1
 8016cb6:	4413      	add	r3, r2
 8016cb8:	00db      	lsls	r3, r3, #3
 8016cba:	440b      	add	r3, r1
 8016cbc:	681b      	ldr	r3, [r3, #0]
 8016cbe:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8016cc0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016cc4:	4910      	ldr	r1, [pc, #64]	; (8016d08 <etharp_update_arp_entry+0x148>)
 8016cc6:	4613      	mov	r3, r2
 8016cc8:	005b      	lsls	r3, r3, #1
 8016cca:	4413      	add	r3, r2
 8016ccc:	00db      	lsls	r3, r3, #3
 8016cce:	440b      	add	r3, r1
 8016cd0:	2200      	movs	r2, #0
 8016cd2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8016cd4:	68fb      	ldr	r3, [r7, #12]
 8016cd6:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8016cda:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016cde:	9300      	str	r3, [sp, #0]
 8016ce0:	687b      	ldr	r3, [r7, #4]
 8016ce2:	6939      	ldr	r1, [r7, #16]
 8016ce4:	68f8      	ldr	r0, [r7, #12]
 8016ce6:	f001 ffb9 	bl	8018c5c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8016cea:	6938      	ldr	r0, [r7, #16]
 8016cec:	f7f7 fc48 	bl	800e580 <pbuf_free>
  }
  return ERR_OK;
 8016cf0:	2300      	movs	r3, #0
}
 8016cf2:	4618      	mov	r0, r3
 8016cf4:	3718      	adds	r7, #24
 8016cf6:	46bd      	mov	sp, r7
 8016cf8:	bd80      	pop	{r7, pc}
 8016cfa:	bf00      	nop
 8016cfc:	0801c9e8 	.word	0x0801c9e8
 8016d00:	0801cae0 	.word	0x0801cae0
 8016d04:	0801ca60 	.word	0x0801ca60
 8016d08:	20013888 	.word	0x20013888

08016d0c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8016d0c:	b580      	push	{r7, lr}
 8016d0e:	b084      	sub	sp, #16
 8016d10:	af00      	add	r7, sp, #0
 8016d12:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016d14:	2300      	movs	r3, #0
 8016d16:	60fb      	str	r3, [r7, #12]
 8016d18:	e01e      	b.n	8016d58 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8016d1a:	4913      	ldr	r1, [pc, #76]	; (8016d68 <etharp_cleanup_netif+0x5c>)
 8016d1c:	68fa      	ldr	r2, [r7, #12]
 8016d1e:	4613      	mov	r3, r2
 8016d20:	005b      	lsls	r3, r3, #1
 8016d22:	4413      	add	r3, r2
 8016d24:	00db      	lsls	r3, r3, #3
 8016d26:	440b      	add	r3, r1
 8016d28:	3314      	adds	r3, #20
 8016d2a:	781b      	ldrb	r3, [r3, #0]
 8016d2c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8016d2e:	7afb      	ldrb	r3, [r7, #11]
 8016d30:	2b00      	cmp	r3, #0
 8016d32:	d00e      	beq.n	8016d52 <etharp_cleanup_netif+0x46>
 8016d34:	490c      	ldr	r1, [pc, #48]	; (8016d68 <etharp_cleanup_netif+0x5c>)
 8016d36:	68fa      	ldr	r2, [r7, #12]
 8016d38:	4613      	mov	r3, r2
 8016d3a:	005b      	lsls	r3, r3, #1
 8016d3c:	4413      	add	r3, r2
 8016d3e:	00db      	lsls	r3, r3, #3
 8016d40:	440b      	add	r3, r1
 8016d42:	3308      	adds	r3, #8
 8016d44:	681b      	ldr	r3, [r3, #0]
 8016d46:	687a      	ldr	r2, [r7, #4]
 8016d48:	429a      	cmp	r2, r3
 8016d4a:	d102      	bne.n	8016d52 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8016d4c:	68f8      	ldr	r0, [r7, #12]
 8016d4e:	f7ff fce5 	bl	801671c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016d52:	68fb      	ldr	r3, [r7, #12]
 8016d54:	3301      	adds	r3, #1
 8016d56:	60fb      	str	r3, [r7, #12]
 8016d58:	68fb      	ldr	r3, [r7, #12]
 8016d5a:	2b09      	cmp	r3, #9
 8016d5c:	dddd      	ble.n	8016d1a <etharp_cleanup_netif+0xe>
    }
  }
}
 8016d5e:	bf00      	nop
 8016d60:	bf00      	nop
 8016d62:	3710      	adds	r7, #16
 8016d64:	46bd      	mov	sp, r7
 8016d66:	bd80      	pop	{r7, pc}
 8016d68:	20013888 	.word	0x20013888

08016d6c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8016d6c:	b5b0      	push	{r4, r5, r7, lr}
 8016d6e:	b08a      	sub	sp, #40	; 0x28
 8016d70:	af04      	add	r7, sp, #16
 8016d72:	6078      	str	r0, [r7, #4]
 8016d74:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8016d76:	683b      	ldr	r3, [r7, #0]
 8016d78:	2b00      	cmp	r3, #0
 8016d7a:	d107      	bne.n	8016d8c <etharp_input+0x20>
 8016d7c:	4b3f      	ldr	r3, [pc, #252]	; (8016e7c <etharp_input+0x110>)
 8016d7e:	f240 228a 	movw	r2, #650	; 0x28a
 8016d82:	493f      	ldr	r1, [pc, #252]	; (8016e80 <etharp_input+0x114>)
 8016d84:	483f      	ldr	r0, [pc, #252]	; (8016e84 <etharp_input+0x118>)
 8016d86:	f002 fcd5 	bl	8019734 <iprintf>
 8016d8a:	e074      	b.n	8016e76 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8016d8c:	687b      	ldr	r3, [r7, #4]
 8016d8e:	685b      	ldr	r3, [r3, #4]
 8016d90:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8016d92:	693b      	ldr	r3, [r7, #16]
 8016d94:	881b      	ldrh	r3, [r3, #0]
 8016d96:	b29b      	uxth	r3, r3
 8016d98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016d9c:	d10c      	bne.n	8016db8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8016d9e:	693b      	ldr	r3, [r7, #16]
 8016da0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8016da2:	2b06      	cmp	r3, #6
 8016da4:	d108      	bne.n	8016db8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8016da6:	693b      	ldr	r3, [r7, #16]
 8016da8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8016daa:	2b04      	cmp	r3, #4
 8016dac:	d104      	bne.n	8016db8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8016dae:	693b      	ldr	r3, [r7, #16]
 8016db0:	885b      	ldrh	r3, [r3, #2]
 8016db2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8016db4:	2b08      	cmp	r3, #8
 8016db6:	d003      	beq.n	8016dc0 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8016db8:	6878      	ldr	r0, [r7, #4]
 8016dba:	f7f7 fbe1 	bl	800e580 <pbuf_free>
    return;
 8016dbe:	e05a      	b.n	8016e76 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8016dc0:	693b      	ldr	r3, [r7, #16]
 8016dc2:	330e      	adds	r3, #14
 8016dc4:	681b      	ldr	r3, [r3, #0]
 8016dc6:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8016dc8:	693b      	ldr	r3, [r7, #16]
 8016dca:	3318      	adds	r3, #24
 8016dcc:	681b      	ldr	r3, [r3, #0]
 8016dce:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8016dd0:	683b      	ldr	r3, [r7, #0]
 8016dd2:	3304      	adds	r3, #4
 8016dd4:	681b      	ldr	r3, [r3, #0]
 8016dd6:	2b00      	cmp	r3, #0
 8016dd8:	d102      	bne.n	8016de0 <etharp_input+0x74>
    for_us = 0;
 8016dda:	2300      	movs	r3, #0
 8016ddc:	75fb      	strb	r3, [r7, #23]
 8016dde:	e009      	b.n	8016df4 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8016de0:	68ba      	ldr	r2, [r7, #8]
 8016de2:	683b      	ldr	r3, [r7, #0]
 8016de4:	3304      	adds	r3, #4
 8016de6:	681b      	ldr	r3, [r3, #0]
 8016de8:	429a      	cmp	r2, r3
 8016dea:	bf0c      	ite	eq
 8016dec:	2301      	moveq	r3, #1
 8016dee:	2300      	movne	r3, #0
 8016df0:	b2db      	uxtb	r3, r3
 8016df2:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8016df4:	693b      	ldr	r3, [r7, #16]
 8016df6:	f103 0208 	add.w	r2, r3, #8
 8016dfa:	7dfb      	ldrb	r3, [r7, #23]
 8016dfc:	2b00      	cmp	r3, #0
 8016dfe:	d001      	beq.n	8016e04 <etharp_input+0x98>
 8016e00:	2301      	movs	r3, #1
 8016e02:	e000      	b.n	8016e06 <etharp_input+0x9a>
 8016e04:	2302      	movs	r3, #2
 8016e06:	f107 010c 	add.w	r1, r7, #12
 8016e0a:	6838      	ldr	r0, [r7, #0]
 8016e0c:	f7ff fed8 	bl	8016bc0 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8016e10:	693b      	ldr	r3, [r7, #16]
 8016e12:	88db      	ldrh	r3, [r3, #6]
 8016e14:	b29b      	uxth	r3, r3
 8016e16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016e1a:	d003      	beq.n	8016e24 <etharp_input+0xb8>
 8016e1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016e20:	d01e      	beq.n	8016e60 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8016e22:	e025      	b.n	8016e70 <etharp_input+0x104>
      if (for_us) {
 8016e24:	7dfb      	ldrb	r3, [r7, #23]
 8016e26:	2b00      	cmp	r3, #0
 8016e28:	d021      	beq.n	8016e6e <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8016e2a:	683b      	ldr	r3, [r7, #0]
 8016e2c:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8016e30:	693b      	ldr	r3, [r7, #16]
 8016e32:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8016e36:	683b      	ldr	r3, [r7, #0]
 8016e38:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 8016e3c:	683b      	ldr	r3, [r7, #0]
 8016e3e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8016e40:	693a      	ldr	r2, [r7, #16]
 8016e42:	3208      	adds	r2, #8
        etharp_raw(netif,
 8016e44:	2102      	movs	r1, #2
 8016e46:	9103      	str	r1, [sp, #12]
 8016e48:	f107 010c 	add.w	r1, r7, #12
 8016e4c:	9102      	str	r1, [sp, #8]
 8016e4e:	9201      	str	r2, [sp, #4]
 8016e50:	9300      	str	r3, [sp, #0]
 8016e52:	462b      	mov	r3, r5
 8016e54:	4622      	mov	r2, r4
 8016e56:	4601      	mov	r1, r0
 8016e58:	6838      	ldr	r0, [r7, #0]
 8016e5a:	f000 faef 	bl	801743c <etharp_raw>
      break;
 8016e5e:	e006      	b.n	8016e6e <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8016e60:	f107 030c 	add.w	r3, r7, #12
 8016e64:	4619      	mov	r1, r3
 8016e66:	6838      	ldr	r0, [r7, #0]
 8016e68:	f7fe f9fc 	bl	8015264 <dhcp_arp_reply>
      break;
 8016e6c:	e000      	b.n	8016e70 <etharp_input+0x104>
      break;
 8016e6e:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8016e70:	6878      	ldr	r0, [r7, #4]
 8016e72:	f7f7 fb85 	bl	800e580 <pbuf_free>
}
 8016e76:	3718      	adds	r7, #24
 8016e78:	46bd      	mov	sp, r7
 8016e7a:	bdb0      	pop	{r4, r5, r7, pc}
 8016e7c:	0801c9e8 	.word	0x0801c9e8
 8016e80:	0801cb38 	.word	0x0801cb38
 8016e84:	0801ca60 	.word	0x0801ca60

08016e88 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8016e88:	b580      	push	{r7, lr}
 8016e8a:	b086      	sub	sp, #24
 8016e8c:	af02      	add	r7, sp, #8
 8016e8e:	60f8      	str	r0, [r7, #12]
 8016e90:	60b9      	str	r1, [r7, #8]
 8016e92:	4613      	mov	r3, r2
 8016e94:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8016e96:	79fa      	ldrb	r2, [r7, #7]
 8016e98:	4944      	ldr	r1, [pc, #272]	; (8016fac <etharp_output_to_arp_index+0x124>)
 8016e9a:	4613      	mov	r3, r2
 8016e9c:	005b      	lsls	r3, r3, #1
 8016e9e:	4413      	add	r3, r2
 8016ea0:	00db      	lsls	r3, r3, #3
 8016ea2:	440b      	add	r3, r1
 8016ea4:	3314      	adds	r3, #20
 8016ea6:	781b      	ldrb	r3, [r3, #0]
 8016ea8:	2b01      	cmp	r3, #1
 8016eaa:	d806      	bhi.n	8016eba <etharp_output_to_arp_index+0x32>
 8016eac:	4b40      	ldr	r3, [pc, #256]	; (8016fb0 <etharp_output_to_arp_index+0x128>)
 8016eae:	f240 22ee 	movw	r2, #750	; 0x2ee
 8016eb2:	4940      	ldr	r1, [pc, #256]	; (8016fb4 <etharp_output_to_arp_index+0x12c>)
 8016eb4:	4840      	ldr	r0, [pc, #256]	; (8016fb8 <etharp_output_to_arp_index+0x130>)
 8016eb6:	f002 fc3d 	bl	8019734 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8016eba:	79fa      	ldrb	r2, [r7, #7]
 8016ebc:	493b      	ldr	r1, [pc, #236]	; (8016fac <etharp_output_to_arp_index+0x124>)
 8016ebe:	4613      	mov	r3, r2
 8016ec0:	005b      	lsls	r3, r3, #1
 8016ec2:	4413      	add	r3, r2
 8016ec4:	00db      	lsls	r3, r3, #3
 8016ec6:	440b      	add	r3, r1
 8016ec8:	3314      	adds	r3, #20
 8016eca:	781b      	ldrb	r3, [r3, #0]
 8016ecc:	2b02      	cmp	r3, #2
 8016ece:	d153      	bne.n	8016f78 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8016ed0:	79fa      	ldrb	r2, [r7, #7]
 8016ed2:	4936      	ldr	r1, [pc, #216]	; (8016fac <etharp_output_to_arp_index+0x124>)
 8016ed4:	4613      	mov	r3, r2
 8016ed6:	005b      	lsls	r3, r3, #1
 8016ed8:	4413      	add	r3, r2
 8016eda:	00db      	lsls	r3, r3, #3
 8016edc:	440b      	add	r3, r1
 8016ede:	3312      	adds	r3, #18
 8016ee0:	881b      	ldrh	r3, [r3, #0]
 8016ee2:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8016ee6:	d919      	bls.n	8016f1c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8016ee8:	79fa      	ldrb	r2, [r7, #7]
 8016eea:	4613      	mov	r3, r2
 8016eec:	005b      	lsls	r3, r3, #1
 8016eee:	4413      	add	r3, r2
 8016ef0:	00db      	lsls	r3, r3, #3
 8016ef2:	4a2e      	ldr	r2, [pc, #184]	; (8016fac <etharp_output_to_arp_index+0x124>)
 8016ef4:	4413      	add	r3, r2
 8016ef6:	3304      	adds	r3, #4
 8016ef8:	4619      	mov	r1, r3
 8016efa:	68f8      	ldr	r0, [r7, #12]
 8016efc:	f000 fb4c 	bl	8017598 <etharp_request>
 8016f00:	4603      	mov	r3, r0
 8016f02:	2b00      	cmp	r3, #0
 8016f04:	d138      	bne.n	8016f78 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8016f06:	79fa      	ldrb	r2, [r7, #7]
 8016f08:	4928      	ldr	r1, [pc, #160]	; (8016fac <etharp_output_to_arp_index+0x124>)
 8016f0a:	4613      	mov	r3, r2
 8016f0c:	005b      	lsls	r3, r3, #1
 8016f0e:	4413      	add	r3, r2
 8016f10:	00db      	lsls	r3, r3, #3
 8016f12:	440b      	add	r3, r1
 8016f14:	3314      	adds	r3, #20
 8016f16:	2203      	movs	r2, #3
 8016f18:	701a      	strb	r2, [r3, #0]
 8016f1a:	e02d      	b.n	8016f78 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8016f1c:	79fa      	ldrb	r2, [r7, #7]
 8016f1e:	4923      	ldr	r1, [pc, #140]	; (8016fac <etharp_output_to_arp_index+0x124>)
 8016f20:	4613      	mov	r3, r2
 8016f22:	005b      	lsls	r3, r3, #1
 8016f24:	4413      	add	r3, r2
 8016f26:	00db      	lsls	r3, r3, #3
 8016f28:	440b      	add	r3, r1
 8016f2a:	3312      	adds	r3, #18
 8016f2c:	881b      	ldrh	r3, [r3, #0]
 8016f2e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8016f32:	d321      	bcc.n	8016f78 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8016f34:	79fa      	ldrb	r2, [r7, #7]
 8016f36:	4613      	mov	r3, r2
 8016f38:	005b      	lsls	r3, r3, #1
 8016f3a:	4413      	add	r3, r2
 8016f3c:	00db      	lsls	r3, r3, #3
 8016f3e:	4a1b      	ldr	r2, [pc, #108]	; (8016fac <etharp_output_to_arp_index+0x124>)
 8016f40:	4413      	add	r3, r2
 8016f42:	1d19      	adds	r1, r3, #4
 8016f44:	79fa      	ldrb	r2, [r7, #7]
 8016f46:	4613      	mov	r3, r2
 8016f48:	005b      	lsls	r3, r3, #1
 8016f4a:	4413      	add	r3, r2
 8016f4c:	00db      	lsls	r3, r3, #3
 8016f4e:	3308      	adds	r3, #8
 8016f50:	4a16      	ldr	r2, [pc, #88]	; (8016fac <etharp_output_to_arp_index+0x124>)
 8016f52:	4413      	add	r3, r2
 8016f54:	3304      	adds	r3, #4
 8016f56:	461a      	mov	r2, r3
 8016f58:	68f8      	ldr	r0, [r7, #12]
 8016f5a:	f000 fafb 	bl	8017554 <etharp_request_dst>
 8016f5e:	4603      	mov	r3, r0
 8016f60:	2b00      	cmp	r3, #0
 8016f62:	d109      	bne.n	8016f78 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8016f64:	79fa      	ldrb	r2, [r7, #7]
 8016f66:	4911      	ldr	r1, [pc, #68]	; (8016fac <etharp_output_to_arp_index+0x124>)
 8016f68:	4613      	mov	r3, r2
 8016f6a:	005b      	lsls	r3, r3, #1
 8016f6c:	4413      	add	r3, r2
 8016f6e:	00db      	lsls	r3, r3, #3
 8016f70:	440b      	add	r3, r1
 8016f72:	3314      	adds	r3, #20
 8016f74:	2203      	movs	r2, #3
 8016f76:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8016f78:	68fb      	ldr	r3, [r7, #12]
 8016f7a:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 8016f7e:	79fa      	ldrb	r2, [r7, #7]
 8016f80:	4613      	mov	r3, r2
 8016f82:	005b      	lsls	r3, r3, #1
 8016f84:	4413      	add	r3, r2
 8016f86:	00db      	lsls	r3, r3, #3
 8016f88:	3308      	adds	r3, #8
 8016f8a:	4a08      	ldr	r2, [pc, #32]	; (8016fac <etharp_output_to_arp_index+0x124>)
 8016f8c:	4413      	add	r3, r2
 8016f8e:	3304      	adds	r3, #4
 8016f90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8016f94:	9200      	str	r2, [sp, #0]
 8016f96:	460a      	mov	r2, r1
 8016f98:	68b9      	ldr	r1, [r7, #8]
 8016f9a:	68f8      	ldr	r0, [r7, #12]
 8016f9c:	f001 fe5e 	bl	8018c5c <ethernet_output>
 8016fa0:	4603      	mov	r3, r0
}
 8016fa2:	4618      	mov	r0, r3
 8016fa4:	3710      	adds	r7, #16
 8016fa6:	46bd      	mov	sp, r7
 8016fa8:	bd80      	pop	{r7, pc}
 8016faa:	bf00      	nop
 8016fac:	20013888 	.word	0x20013888
 8016fb0:	0801c9e8 	.word	0x0801c9e8
 8016fb4:	0801cb58 	.word	0x0801cb58
 8016fb8:	0801ca60 	.word	0x0801ca60

08016fbc <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8016fbc:	b580      	push	{r7, lr}
 8016fbe:	b08a      	sub	sp, #40	; 0x28
 8016fc0:	af02      	add	r7, sp, #8
 8016fc2:	60f8      	str	r0, [r7, #12]
 8016fc4:	60b9      	str	r1, [r7, #8]
 8016fc6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8016fc8:	687b      	ldr	r3, [r7, #4]
 8016fca:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8016fcc:	68fb      	ldr	r3, [r7, #12]
 8016fce:	2b00      	cmp	r3, #0
 8016fd0:	d106      	bne.n	8016fe0 <etharp_output+0x24>
 8016fd2:	4b73      	ldr	r3, [pc, #460]	; (80171a0 <etharp_output+0x1e4>)
 8016fd4:	f240 321e 	movw	r2, #798	; 0x31e
 8016fd8:	4972      	ldr	r1, [pc, #456]	; (80171a4 <etharp_output+0x1e8>)
 8016fda:	4873      	ldr	r0, [pc, #460]	; (80171a8 <etharp_output+0x1ec>)
 8016fdc:	f002 fbaa 	bl	8019734 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8016fe0:	68bb      	ldr	r3, [r7, #8]
 8016fe2:	2b00      	cmp	r3, #0
 8016fe4:	d106      	bne.n	8016ff4 <etharp_output+0x38>
 8016fe6:	4b6e      	ldr	r3, [pc, #440]	; (80171a0 <etharp_output+0x1e4>)
 8016fe8:	f240 321f 	movw	r2, #799	; 0x31f
 8016fec:	496f      	ldr	r1, [pc, #444]	; (80171ac <etharp_output+0x1f0>)
 8016fee:	486e      	ldr	r0, [pc, #440]	; (80171a8 <etharp_output+0x1ec>)
 8016ff0:	f002 fba0 	bl	8019734 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8016ff4:	687b      	ldr	r3, [r7, #4]
 8016ff6:	2b00      	cmp	r3, #0
 8016ff8:	d106      	bne.n	8017008 <etharp_output+0x4c>
 8016ffa:	4b69      	ldr	r3, [pc, #420]	; (80171a0 <etharp_output+0x1e4>)
 8016ffc:	f44f 7248 	mov.w	r2, #800	; 0x320
 8017000:	496b      	ldr	r1, [pc, #428]	; (80171b0 <etharp_output+0x1f4>)
 8017002:	4869      	ldr	r0, [pc, #420]	; (80171a8 <etharp_output+0x1ec>)
 8017004:	f002 fb96 	bl	8019734 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8017008:	687b      	ldr	r3, [r7, #4]
 801700a:	681b      	ldr	r3, [r3, #0]
 801700c:	68f9      	ldr	r1, [r7, #12]
 801700e:	4618      	mov	r0, r3
 8017010:	f000 ff16 	bl	8017e40 <ip4_addr_isbroadcast_u32>
 8017014:	4603      	mov	r3, r0
 8017016:	2b00      	cmp	r3, #0
 8017018:	d002      	beq.n	8017020 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801701a:	4b66      	ldr	r3, [pc, #408]	; (80171b4 <etharp_output+0x1f8>)
 801701c:	61fb      	str	r3, [r7, #28]
 801701e:	e0af      	b.n	8017180 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8017020:	687b      	ldr	r3, [r7, #4]
 8017022:	681b      	ldr	r3, [r3, #0]
 8017024:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017028:	2be0      	cmp	r3, #224	; 0xe0
 801702a:	d118      	bne.n	801705e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801702c:	2301      	movs	r3, #1
 801702e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8017030:	2300      	movs	r3, #0
 8017032:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8017034:	235e      	movs	r3, #94	; 0x5e
 8017036:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8017038:	687b      	ldr	r3, [r7, #4]
 801703a:	3301      	adds	r3, #1
 801703c:	781b      	ldrb	r3, [r3, #0]
 801703e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017042:	b2db      	uxtb	r3, r3
 8017044:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8017046:	687b      	ldr	r3, [r7, #4]
 8017048:	3302      	adds	r3, #2
 801704a:	781b      	ldrb	r3, [r3, #0]
 801704c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801704e:	687b      	ldr	r3, [r7, #4]
 8017050:	3303      	adds	r3, #3
 8017052:	781b      	ldrb	r3, [r3, #0]
 8017054:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8017056:	f107 0310 	add.w	r3, r7, #16
 801705a:	61fb      	str	r3, [r7, #28]
 801705c:	e090      	b.n	8017180 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801705e:	687b      	ldr	r3, [r7, #4]
 8017060:	681a      	ldr	r2, [r3, #0]
 8017062:	68fb      	ldr	r3, [r7, #12]
 8017064:	3304      	adds	r3, #4
 8017066:	681b      	ldr	r3, [r3, #0]
 8017068:	405a      	eors	r2, r3
 801706a:	68fb      	ldr	r3, [r7, #12]
 801706c:	3308      	adds	r3, #8
 801706e:	681b      	ldr	r3, [r3, #0]
 8017070:	4013      	ands	r3, r2
 8017072:	2b00      	cmp	r3, #0
 8017074:	d012      	beq.n	801709c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8017076:	687b      	ldr	r3, [r7, #4]
 8017078:	681b      	ldr	r3, [r3, #0]
 801707a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801707c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8017080:	4293      	cmp	r3, r2
 8017082:	d00b      	beq.n	801709c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8017084:	68fb      	ldr	r3, [r7, #12]
 8017086:	330c      	adds	r3, #12
 8017088:	681b      	ldr	r3, [r3, #0]
 801708a:	2b00      	cmp	r3, #0
 801708c:	d003      	beq.n	8017096 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801708e:	68fb      	ldr	r3, [r7, #12]
 8017090:	330c      	adds	r3, #12
 8017092:	61bb      	str	r3, [r7, #24]
 8017094:	e002      	b.n	801709c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8017096:	f06f 0303 	mvn.w	r3, #3
 801709a:	e07d      	b.n	8017198 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801709c:	4b46      	ldr	r3, [pc, #280]	; (80171b8 <etharp_output+0x1fc>)
 801709e:	781b      	ldrb	r3, [r3, #0]
 80170a0:	4619      	mov	r1, r3
 80170a2:	4a46      	ldr	r2, [pc, #280]	; (80171bc <etharp_output+0x200>)
 80170a4:	460b      	mov	r3, r1
 80170a6:	005b      	lsls	r3, r3, #1
 80170a8:	440b      	add	r3, r1
 80170aa:	00db      	lsls	r3, r3, #3
 80170ac:	4413      	add	r3, r2
 80170ae:	3314      	adds	r3, #20
 80170b0:	781b      	ldrb	r3, [r3, #0]
 80170b2:	2b01      	cmp	r3, #1
 80170b4:	d925      	bls.n	8017102 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80170b6:	4b40      	ldr	r3, [pc, #256]	; (80171b8 <etharp_output+0x1fc>)
 80170b8:	781b      	ldrb	r3, [r3, #0]
 80170ba:	4619      	mov	r1, r3
 80170bc:	4a3f      	ldr	r2, [pc, #252]	; (80171bc <etharp_output+0x200>)
 80170be:	460b      	mov	r3, r1
 80170c0:	005b      	lsls	r3, r3, #1
 80170c2:	440b      	add	r3, r1
 80170c4:	00db      	lsls	r3, r3, #3
 80170c6:	4413      	add	r3, r2
 80170c8:	3308      	adds	r3, #8
 80170ca:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80170cc:	68fa      	ldr	r2, [r7, #12]
 80170ce:	429a      	cmp	r2, r3
 80170d0:	d117      	bne.n	8017102 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80170d2:	69bb      	ldr	r3, [r7, #24]
 80170d4:	681a      	ldr	r2, [r3, #0]
 80170d6:	4b38      	ldr	r3, [pc, #224]	; (80171b8 <etharp_output+0x1fc>)
 80170d8:	781b      	ldrb	r3, [r3, #0]
 80170da:	4618      	mov	r0, r3
 80170dc:	4937      	ldr	r1, [pc, #220]	; (80171bc <etharp_output+0x200>)
 80170de:	4603      	mov	r3, r0
 80170e0:	005b      	lsls	r3, r3, #1
 80170e2:	4403      	add	r3, r0
 80170e4:	00db      	lsls	r3, r3, #3
 80170e6:	440b      	add	r3, r1
 80170e8:	3304      	adds	r3, #4
 80170ea:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80170ec:	429a      	cmp	r2, r3
 80170ee:	d108      	bne.n	8017102 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80170f0:	4b31      	ldr	r3, [pc, #196]	; (80171b8 <etharp_output+0x1fc>)
 80170f2:	781b      	ldrb	r3, [r3, #0]
 80170f4:	461a      	mov	r2, r3
 80170f6:	68b9      	ldr	r1, [r7, #8]
 80170f8:	68f8      	ldr	r0, [r7, #12]
 80170fa:	f7ff fec5 	bl	8016e88 <etharp_output_to_arp_index>
 80170fe:	4603      	mov	r3, r0
 8017100:	e04a      	b.n	8017198 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8017102:	2300      	movs	r3, #0
 8017104:	75fb      	strb	r3, [r7, #23]
 8017106:	e031      	b.n	801716c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8017108:	7dfa      	ldrb	r2, [r7, #23]
 801710a:	492c      	ldr	r1, [pc, #176]	; (80171bc <etharp_output+0x200>)
 801710c:	4613      	mov	r3, r2
 801710e:	005b      	lsls	r3, r3, #1
 8017110:	4413      	add	r3, r2
 8017112:	00db      	lsls	r3, r3, #3
 8017114:	440b      	add	r3, r1
 8017116:	3314      	adds	r3, #20
 8017118:	781b      	ldrb	r3, [r3, #0]
 801711a:	2b01      	cmp	r3, #1
 801711c:	d923      	bls.n	8017166 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801711e:	7dfa      	ldrb	r2, [r7, #23]
 8017120:	4926      	ldr	r1, [pc, #152]	; (80171bc <etharp_output+0x200>)
 8017122:	4613      	mov	r3, r2
 8017124:	005b      	lsls	r3, r3, #1
 8017126:	4413      	add	r3, r2
 8017128:	00db      	lsls	r3, r3, #3
 801712a:	440b      	add	r3, r1
 801712c:	3308      	adds	r3, #8
 801712e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8017130:	68fa      	ldr	r2, [r7, #12]
 8017132:	429a      	cmp	r2, r3
 8017134:	d117      	bne.n	8017166 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8017136:	69bb      	ldr	r3, [r7, #24]
 8017138:	6819      	ldr	r1, [r3, #0]
 801713a:	7dfa      	ldrb	r2, [r7, #23]
 801713c:	481f      	ldr	r0, [pc, #124]	; (80171bc <etharp_output+0x200>)
 801713e:	4613      	mov	r3, r2
 8017140:	005b      	lsls	r3, r3, #1
 8017142:	4413      	add	r3, r2
 8017144:	00db      	lsls	r3, r3, #3
 8017146:	4403      	add	r3, r0
 8017148:	3304      	adds	r3, #4
 801714a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801714c:	4299      	cmp	r1, r3
 801714e:	d10a      	bne.n	8017166 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8017150:	4a19      	ldr	r2, [pc, #100]	; (80171b8 <etharp_output+0x1fc>)
 8017152:	7dfb      	ldrb	r3, [r7, #23]
 8017154:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8017156:	7dfb      	ldrb	r3, [r7, #23]
 8017158:	461a      	mov	r2, r3
 801715a:	68b9      	ldr	r1, [r7, #8]
 801715c:	68f8      	ldr	r0, [r7, #12]
 801715e:	f7ff fe93 	bl	8016e88 <etharp_output_to_arp_index>
 8017162:	4603      	mov	r3, r0
 8017164:	e018      	b.n	8017198 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8017166:	7dfb      	ldrb	r3, [r7, #23]
 8017168:	3301      	adds	r3, #1
 801716a:	75fb      	strb	r3, [r7, #23]
 801716c:	7dfb      	ldrb	r3, [r7, #23]
 801716e:	2b09      	cmp	r3, #9
 8017170:	d9ca      	bls.n	8017108 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8017172:	68ba      	ldr	r2, [r7, #8]
 8017174:	69b9      	ldr	r1, [r7, #24]
 8017176:	68f8      	ldr	r0, [r7, #12]
 8017178:	f000 f822 	bl	80171c0 <etharp_query>
 801717c:	4603      	mov	r3, r0
 801717e:	e00b      	b.n	8017198 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8017180:	68fb      	ldr	r3, [r7, #12]
 8017182:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8017186:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801718a:	9300      	str	r3, [sp, #0]
 801718c:	69fb      	ldr	r3, [r7, #28]
 801718e:	68b9      	ldr	r1, [r7, #8]
 8017190:	68f8      	ldr	r0, [r7, #12]
 8017192:	f001 fd63 	bl	8018c5c <ethernet_output>
 8017196:	4603      	mov	r3, r0
}
 8017198:	4618      	mov	r0, r3
 801719a:	3720      	adds	r7, #32
 801719c:	46bd      	mov	sp, r7
 801719e:	bd80      	pop	{r7, pc}
 80171a0:	0801c9e8 	.word	0x0801c9e8
 80171a4:	0801cb38 	.word	0x0801cb38
 80171a8:	0801ca60 	.word	0x0801ca60
 80171ac:	0801cb88 	.word	0x0801cb88
 80171b0:	0801cb28 	.word	0x0801cb28
 80171b4:	0801d260 	.word	0x0801d260
 80171b8:	20013978 	.word	0x20013978
 80171bc:	20013888 	.word	0x20013888

080171c0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80171c0:	b580      	push	{r7, lr}
 80171c2:	b08c      	sub	sp, #48	; 0x30
 80171c4:	af02      	add	r7, sp, #8
 80171c6:	60f8      	str	r0, [r7, #12]
 80171c8:	60b9      	str	r1, [r7, #8]
 80171ca:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80171cc:	68fb      	ldr	r3, [r7, #12]
 80171ce:	332a      	adds	r3, #42	; 0x2a
 80171d0:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80171d2:	23ff      	movs	r3, #255	; 0xff
 80171d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80171d8:	2300      	movs	r3, #0
 80171da:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80171dc:	68bb      	ldr	r3, [r7, #8]
 80171de:	681b      	ldr	r3, [r3, #0]
 80171e0:	68f9      	ldr	r1, [r7, #12]
 80171e2:	4618      	mov	r0, r3
 80171e4:	f000 fe2c 	bl	8017e40 <ip4_addr_isbroadcast_u32>
 80171e8:	4603      	mov	r3, r0
 80171ea:	2b00      	cmp	r3, #0
 80171ec:	d10c      	bne.n	8017208 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80171ee:	68bb      	ldr	r3, [r7, #8]
 80171f0:	681b      	ldr	r3, [r3, #0]
 80171f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80171f6:	2be0      	cmp	r3, #224	; 0xe0
 80171f8:	d006      	beq.n	8017208 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80171fa:	68bb      	ldr	r3, [r7, #8]
 80171fc:	2b00      	cmp	r3, #0
 80171fe:	d003      	beq.n	8017208 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8017200:	68bb      	ldr	r3, [r7, #8]
 8017202:	681b      	ldr	r3, [r3, #0]
 8017204:	2b00      	cmp	r3, #0
 8017206:	d102      	bne.n	801720e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8017208:	f06f 030f 	mvn.w	r3, #15
 801720c:	e101      	b.n	8017412 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801720e:	68fa      	ldr	r2, [r7, #12]
 8017210:	2101      	movs	r1, #1
 8017212:	68b8      	ldr	r0, [r7, #8]
 8017214:	f7ff fb5c 	bl	80168d0 <etharp_find_entry>
 8017218:	4603      	mov	r3, r0
 801721a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801721c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8017220:	2b00      	cmp	r3, #0
 8017222:	da02      	bge.n	801722a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8017224:	8a7b      	ldrh	r3, [r7, #18]
 8017226:	b25b      	sxtb	r3, r3
 8017228:	e0f3      	b.n	8017412 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801722a:	8a7b      	ldrh	r3, [r7, #18]
 801722c:	2b7e      	cmp	r3, #126	; 0x7e
 801722e:	d906      	bls.n	801723e <etharp_query+0x7e>
 8017230:	4b7a      	ldr	r3, [pc, #488]	; (801741c <etharp_query+0x25c>)
 8017232:	f240 32c1 	movw	r2, #961	; 0x3c1
 8017236:	497a      	ldr	r1, [pc, #488]	; (8017420 <etharp_query+0x260>)
 8017238:	487a      	ldr	r0, [pc, #488]	; (8017424 <etharp_query+0x264>)
 801723a:	f002 fa7b 	bl	8019734 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801723e:	8a7b      	ldrh	r3, [r7, #18]
 8017240:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8017242:	7c7a      	ldrb	r2, [r7, #17]
 8017244:	4978      	ldr	r1, [pc, #480]	; (8017428 <etharp_query+0x268>)
 8017246:	4613      	mov	r3, r2
 8017248:	005b      	lsls	r3, r3, #1
 801724a:	4413      	add	r3, r2
 801724c:	00db      	lsls	r3, r3, #3
 801724e:	440b      	add	r3, r1
 8017250:	3314      	adds	r3, #20
 8017252:	781b      	ldrb	r3, [r3, #0]
 8017254:	2b00      	cmp	r3, #0
 8017256:	d115      	bne.n	8017284 <etharp_query+0xc4>
    is_new_entry = 1;
 8017258:	2301      	movs	r3, #1
 801725a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801725c:	7c7a      	ldrb	r2, [r7, #17]
 801725e:	4972      	ldr	r1, [pc, #456]	; (8017428 <etharp_query+0x268>)
 8017260:	4613      	mov	r3, r2
 8017262:	005b      	lsls	r3, r3, #1
 8017264:	4413      	add	r3, r2
 8017266:	00db      	lsls	r3, r3, #3
 8017268:	440b      	add	r3, r1
 801726a:	3314      	adds	r3, #20
 801726c:	2201      	movs	r2, #1
 801726e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8017270:	7c7a      	ldrb	r2, [r7, #17]
 8017272:	496d      	ldr	r1, [pc, #436]	; (8017428 <etharp_query+0x268>)
 8017274:	4613      	mov	r3, r2
 8017276:	005b      	lsls	r3, r3, #1
 8017278:	4413      	add	r3, r2
 801727a:	00db      	lsls	r3, r3, #3
 801727c:	440b      	add	r3, r1
 801727e:	3308      	adds	r3, #8
 8017280:	68fa      	ldr	r2, [r7, #12]
 8017282:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8017284:	7c7a      	ldrb	r2, [r7, #17]
 8017286:	4968      	ldr	r1, [pc, #416]	; (8017428 <etharp_query+0x268>)
 8017288:	4613      	mov	r3, r2
 801728a:	005b      	lsls	r3, r3, #1
 801728c:	4413      	add	r3, r2
 801728e:	00db      	lsls	r3, r3, #3
 8017290:	440b      	add	r3, r1
 8017292:	3314      	adds	r3, #20
 8017294:	781b      	ldrb	r3, [r3, #0]
 8017296:	2b01      	cmp	r3, #1
 8017298:	d011      	beq.n	80172be <etharp_query+0xfe>
 801729a:	7c7a      	ldrb	r2, [r7, #17]
 801729c:	4962      	ldr	r1, [pc, #392]	; (8017428 <etharp_query+0x268>)
 801729e:	4613      	mov	r3, r2
 80172a0:	005b      	lsls	r3, r3, #1
 80172a2:	4413      	add	r3, r2
 80172a4:	00db      	lsls	r3, r3, #3
 80172a6:	440b      	add	r3, r1
 80172a8:	3314      	adds	r3, #20
 80172aa:	781b      	ldrb	r3, [r3, #0]
 80172ac:	2b01      	cmp	r3, #1
 80172ae:	d806      	bhi.n	80172be <etharp_query+0xfe>
 80172b0:	4b5a      	ldr	r3, [pc, #360]	; (801741c <etharp_query+0x25c>)
 80172b2:	f240 32cd 	movw	r2, #973	; 0x3cd
 80172b6:	495d      	ldr	r1, [pc, #372]	; (801742c <etharp_query+0x26c>)
 80172b8:	485a      	ldr	r0, [pc, #360]	; (8017424 <etharp_query+0x264>)
 80172ba:	f002 fa3b 	bl	8019734 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80172be:	6a3b      	ldr	r3, [r7, #32]
 80172c0:	2b00      	cmp	r3, #0
 80172c2:	d102      	bne.n	80172ca <etharp_query+0x10a>
 80172c4:	687b      	ldr	r3, [r7, #4]
 80172c6:	2b00      	cmp	r3, #0
 80172c8:	d10c      	bne.n	80172e4 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80172ca:	68b9      	ldr	r1, [r7, #8]
 80172cc:	68f8      	ldr	r0, [r7, #12]
 80172ce:	f000 f963 	bl	8017598 <etharp_request>
 80172d2:	4603      	mov	r3, r0
 80172d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80172d8:	687b      	ldr	r3, [r7, #4]
 80172da:	2b00      	cmp	r3, #0
 80172dc:	d102      	bne.n	80172e4 <etharp_query+0x124>
      return result;
 80172de:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80172e2:	e096      	b.n	8017412 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80172e4:	687b      	ldr	r3, [r7, #4]
 80172e6:	2b00      	cmp	r3, #0
 80172e8:	d106      	bne.n	80172f8 <etharp_query+0x138>
 80172ea:	4b4c      	ldr	r3, [pc, #304]	; (801741c <etharp_query+0x25c>)
 80172ec:	f240 32e1 	movw	r2, #993	; 0x3e1
 80172f0:	494f      	ldr	r1, [pc, #316]	; (8017430 <etharp_query+0x270>)
 80172f2:	484c      	ldr	r0, [pc, #304]	; (8017424 <etharp_query+0x264>)
 80172f4:	f002 fa1e 	bl	8019734 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80172f8:	7c7a      	ldrb	r2, [r7, #17]
 80172fa:	494b      	ldr	r1, [pc, #300]	; (8017428 <etharp_query+0x268>)
 80172fc:	4613      	mov	r3, r2
 80172fe:	005b      	lsls	r3, r3, #1
 8017300:	4413      	add	r3, r2
 8017302:	00db      	lsls	r3, r3, #3
 8017304:	440b      	add	r3, r1
 8017306:	3314      	adds	r3, #20
 8017308:	781b      	ldrb	r3, [r3, #0]
 801730a:	2b01      	cmp	r3, #1
 801730c:	d917      	bls.n	801733e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801730e:	4a49      	ldr	r2, [pc, #292]	; (8017434 <etharp_query+0x274>)
 8017310:	7c7b      	ldrb	r3, [r7, #17]
 8017312:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8017314:	7c7a      	ldrb	r2, [r7, #17]
 8017316:	4613      	mov	r3, r2
 8017318:	005b      	lsls	r3, r3, #1
 801731a:	4413      	add	r3, r2
 801731c:	00db      	lsls	r3, r3, #3
 801731e:	3308      	adds	r3, #8
 8017320:	4a41      	ldr	r2, [pc, #260]	; (8017428 <etharp_query+0x268>)
 8017322:	4413      	add	r3, r2
 8017324:	3304      	adds	r3, #4
 8017326:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801732a:	9200      	str	r2, [sp, #0]
 801732c:	697a      	ldr	r2, [r7, #20]
 801732e:	6879      	ldr	r1, [r7, #4]
 8017330:	68f8      	ldr	r0, [r7, #12]
 8017332:	f001 fc93 	bl	8018c5c <ethernet_output>
 8017336:	4603      	mov	r3, r0
 8017338:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801733c:	e067      	b.n	801740e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801733e:	7c7a      	ldrb	r2, [r7, #17]
 8017340:	4939      	ldr	r1, [pc, #228]	; (8017428 <etharp_query+0x268>)
 8017342:	4613      	mov	r3, r2
 8017344:	005b      	lsls	r3, r3, #1
 8017346:	4413      	add	r3, r2
 8017348:	00db      	lsls	r3, r3, #3
 801734a:	440b      	add	r3, r1
 801734c:	3314      	adds	r3, #20
 801734e:	781b      	ldrb	r3, [r3, #0]
 8017350:	2b01      	cmp	r3, #1
 8017352:	d15c      	bne.n	801740e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8017354:	2300      	movs	r3, #0
 8017356:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8017358:	687b      	ldr	r3, [r7, #4]
 801735a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801735c:	e01c      	b.n	8017398 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801735e:	69fb      	ldr	r3, [r7, #28]
 8017360:	895a      	ldrh	r2, [r3, #10]
 8017362:	69fb      	ldr	r3, [r7, #28]
 8017364:	891b      	ldrh	r3, [r3, #8]
 8017366:	429a      	cmp	r2, r3
 8017368:	d10a      	bne.n	8017380 <etharp_query+0x1c0>
 801736a:	69fb      	ldr	r3, [r7, #28]
 801736c:	681b      	ldr	r3, [r3, #0]
 801736e:	2b00      	cmp	r3, #0
 8017370:	d006      	beq.n	8017380 <etharp_query+0x1c0>
 8017372:	4b2a      	ldr	r3, [pc, #168]	; (801741c <etharp_query+0x25c>)
 8017374:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8017378:	492f      	ldr	r1, [pc, #188]	; (8017438 <etharp_query+0x278>)
 801737a:	482a      	ldr	r0, [pc, #168]	; (8017424 <etharp_query+0x264>)
 801737c:	f002 f9da 	bl	8019734 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8017380:	69fb      	ldr	r3, [r7, #28]
 8017382:	7b1b      	ldrb	r3, [r3, #12]
 8017384:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017388:	2b00      	cmp	r3, #0
 801738a:	d002      	beq.n	8017392 <etharp_query+0x1d2>
        copy_needed = 1;
 801738c:	2301      	movs	r3, #1
 801738e:	61bb      	str	r3, [r7, #24]
        break;
 8017390:	e005      	b.n	801739e <etharp_query+0x1de>
      }
      p = p->next;
 8017392:	69fb      	ldr	r3, [r7, #28]
 8017394:	681b      	ldr	r3, [r3, #0]
 8017396:	61fb      	str	r3, [r7, #28]
    while (p) {
 8017398:	69fb      	ldr	r3, [r7, #28]
 801739a:	2b00      	cmp	r3, #0
 801739c:	d1df      	bne.n	801735e <etharp_query+0x19e>
    }
    if (copy_needed) {
 801739e:	69bb      	ldr	r3, [r7, #24]
 80173a0:	2b00      	cmp	r3, #0
 80173a2:	d007      	beq.n	80173b4 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80173a4:	687a      	ldr	r2, [r7, #4]
 80173a6:	f44f 7120 	mov.w	r1, #640	; 0x280
 80173aa:	200e      	movs	r0, #14
 80173ac:	f7f7 fb60 	bl	800ea70 <pbuf_clone>
 80173b0:	61f8      	str	r0, [r7, #28]
 80173b2:	e004      	b.n	80173be <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80173b4:	687b      	ldr	r3, [r7, #4]
 80173b6:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80173b8:	69f8      	ldr	r0, [r7, #28]
 80173ba:	f7f7 f987 	bl	800e6cc <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80173be:	69fb      	ldr	r3, [r7, #28]
 80173c0:	2b00      	cmp	r3, #0
 80173c2:	d021      	beq.n	8017408 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80173c4:	7c7a      	ldrb	r2, [r7, #17]
 80173c6:	4918      	ldr	r1, [pc, #96]	; (8017428 <etharp_query+0x268>)
 80173c8:	4613      	mov	r3, r2
 80173ca:	005b      	lsls	r3, r3, #1
 80173cc:	4413      	add	r3, r2
 80173ce:	00db      	lsls	r3, r3, #3
 80173d0:	440b      	add	r3, r1
 80173d2:	681b      	ldr	r3, [r3, #0]
 80173d4:	2b00      	cmp	r3, #0
 80173d6:	d00a      	beq.n	80173ee <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80173d8:	7c7a      	ldrb	r2, [r7, #17]
 80173da:	4913      	ldr	r1, [pc, #76]	; (8017428 <etharp_query+0x268>)
 80173dc:	4613      	mov	r3, r2
 80173de:	005b      	lsls	r3, r3, #1
 80173e0:	4413      	add	r3, r2
 80173e2:	00db      	lsls	r3, r3, #3
 80173e4:	440b      	add	r3, r1
 80173e6:	681b      	ldr	r3, [r3, #0]
 80173e8:	4618      	mov	r0, r3
 80173ea:	f7f7 f8c9 	bl	800e580 <pbuf_free>
      }
      arp_table[i].q = p;
 80173ee:	7c7a      	ldrb	r2, [r7, #17]
 80173f0:	490d      	ldr	r1, [pc, #52]	; (8017428 <etharp_query+0x268>)
 80173f2:	4613      	mov	r3, r2
 80173f4:	005b      	lsls	r3, r3, #1
 80173f6:	4413      	add	r3, r2
 80173f8:	00db      	lsls	r3, r3, #3
 80173fa:	440b      	add	r3, r1
 80173fc:	69fa      	ldr	r2, [r7, #28]
 80173fe:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8017400:	2300      	movs	r3, #0
 8017402:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017406:	e002      	b.n	801740e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8017408:	23ff      	movs	r3, #255	; 0xff
 801740a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801740e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8017412:	4618      	mov	r0, r3
 8017414:	3728      	adds	r7, #40	; 0x28
 8017416:	46bd      	mov	sp, r7
 8017418:	bd80      	pop	{r7, pc}
 801741a:	bf00      	nop
 801741c:	0801c9e8 	.word	0x0801c9e8
 8017420:	0801cb94 	.word	0x0801cb94
 8017424:	0801ca60 	.word	0x0801ca60
 8017428:	20013888 	.word	0x20013888
 801742c:	0801cba4 	.word	0x0801cba4
 8017430:	0801cb88 	.word	0x0801cb88
 8017434:	20013978 	.word	0x20013978
 8017438:	0801cbcc 	.word	0x0801cbcc

0801743c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801743c:	b580      	push	{r7, lr}
 801743e:	b08a      	sub	sp, #40	; 0x28
 8017440:	af02      	add	r7, sp, #8
 8017442:	60f8      	str	r0, [r7, #12]
 8017444:	60b9      	str	r1, [r7, #8]
 8017446:	607a      	str	r2, [r7, #4]
 8017448:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801744a:	2300      	movs	r3, #0
 801744c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801744e:	68fb      	ldr	r3, [r7, #12]
 8017450:	2b00      	cmp	r3, #0
 8017452:	d106      	bne.n	8017462 <etharp_raw+0x26>
 8017454:	4b3a      	ldr	r3, [pc, #232]	; (8017540 <etharp_raw+0x104>)
 8017456:	f240 4257 	movw	r2, #1111	; 0x457
 801745a:	493a      	ldr	r1, [pc, #232]	; (8017544 <etharp_raw+0x108>)
 801745c:	483a      	ldr	r0, [pc, #232]	; (8017548 <etharp_raw+0x10c>)
 801745e:	f002 f969 	bl	8019734 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8017462:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017466:	211c      	movs	r1, #28
 8017468:	200e      	movs	r0, #14
 801746a:	f7f6 fda5 	bl	800dfb8 <pbuf_alloc>
 801746e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8017470:	69bb      	ldr	r3, [r7, #24]
 8017472:	2b00      	cmp	r3, #0
 8017474:	d102      	bne.n	801747c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8017476:	f04f 33ff 	mov.w	r3, #4294967295
 801747a:	e05d      	b.n	8017538 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801747c:	69bb      	ldr	r3, [r7, #24]
 801747e:	895b      	ldrh	r3, [r3, #10]
 8017480:	2b1b      	cmp	r3, #27
 8017482:	d806      	bhi.n	8017492 <etharp_raw+0x56>
 8017484:	4b2e      	ldr	r3, [pc, #184]	; (8017540 <etharp_raw+0x104>)
 8017486:	f240 4262 	movw	r2, #1122	; 0x462
 801748a:	4930      	ldr	r1, [pc, #192]	; (801754c <etharp_raw+0x110>)
 801748c:	482e      	ldr	r0, [pc, #184]	; (8017548 <etharp_raw+0x10c>)
 801748e:	f002 f951 	bl	8019734 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8017492:	69bb      	ldr	r3, [r7, #24]
 8017494:	685b      	ldr	r3, [r3, #4]
 8017496:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8017498:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801749a:	4618      	mov	r0, r3
 801749c:	f7f5 fcb8 	bl	800ce10 <lwip_htons>
 80174a0:	4603      	mov	r3, r0
 80174a2:	461a      	mov	r2, r3
 80174a4:	697b      	ldr	r3, [r7, #20]
 80174a6:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80174a8:	68fb      	ldr	r3, [r7, #12]
 80174aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80174ae:	2b06      	cmp	r3, #6
 80174b0:	d006      	beq.n	80174c0 <etharp_raw+0x84>
 80174b2:	4b23      	ldr	r3, [pc, #140]	; (8017540 <etharp_raw+0x104>)
 80174b4:	f240 4269 	movw	r2, #1129	; 0x469
 80174b8:	4925      	ldr	r1, [pc, #148]	; (8017550 <etharp_raw+0x114>)
 80174ba:	4823      	ldr	r0, [pc, #140]	; (8017548 <etharp_raw+0x10c>)
 80174bc:	f002 f93a 	bl	8019734 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80174c0:	697b      	ldr	r3, [r7, #20]
 80174c2:	3308      	adds	r3, #8
 80174c4:	2206      	movs	r2, #6
 80174c6:	6839      	ldr	r1, [r7, #0]
 80174c8:	4618      	mov	r0, r3
 80174ca:	f001 fd4f 	bl	8018f6c <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80174ce:	697b      	ldr	r3, [r7, #20]
 80174d0:	3312      	adds	r3, #18
 80174d2:	2206      	movs	r2, #6
 80174d4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80174d6:	4618      	mov	r0, r3
 80174d8:	f001 fd48 	bl	8018f6c <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80174dc:	697b      	ldr	r3, [r7, #20]
 80174de:	330e      	adds	r3, #14
 80174e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80174e2:	6812      	ldr	r2, [r2, #0]
 80174e4:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80174e6:	697b      	ldr	r3, [r7, #20]
 80174e8:	3318      	adds	r3, #24
 80174ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80174ec:	6812      	ldr	r2, [r2, #0]
 80174ee:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80174f0:	697b      	ldr	r3, [r7, #20]
 80174f2:	2200      	movs	r2, #0
 80174f4:	701a      	strb	r2, [r3, #0]
 80174f6:	2200      	movs	r2, #0
 80174f8:	f042 0201 	orr.w	r2, r2, #1
 80174fc:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80174fe:	697b      	ldr	r3, [r7, #20]
 8017500:	2200      	movs	r2, #0
 8017502:	f042 0208 	orr.w	r2, r2, #8
 8017506:	709a      	strb	r2, [r3, #2]
 8017508:	2200      	movs	r2, #0
 801750a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801750c:	697b      	ldr	r3, [r7, #20]
 801750e:	2206      	movs	r2, #6
 8017510:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8017512:	697b      	ldr	r3, [r7, #20]
 8017514:	2204      	movs	r2, #4
 8017516:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8017518:	f640 0306 	movw	r3, #2054	; 0x806
 801751c:	9300      	str	r3, [sp, #0]
 801751e:	687b      	ldr	r3, [r7, #4]
 8017520:	68ba      	ldr	r2, [r7, #8]
 8017522:	69b9      	ldr	r1, [r7, #24]
 8017524:	68f8      	ldr	r0, [r7, #12]
 8017526:	f001 fb99 	bl	8018c5c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801752a:	69b8      	ldr	r0, [r7, #24]
 801752c:	f7f7 f828 	bl	800e580 <pbuf_free>
  p = NULL;
 8017530:	2300      	movs	r3, #0
 8017532:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8017534:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8017538:	4618      	mov	r0, r3
 801753a:	3720      	adds	r7, #32
 801753c:	46bd      	mov	sp, r7
 801753e:	bd80      	pop	{r7, pc}
 8017540:	0801c9e8 	.word	0x0801c9e8
 8017544:	0801cb38 	.word	0x0801cb38
 8017548:	0801ca60 	.word	0x0801ca60
 801754c:	0801cbe8 	.word	0x0801cbe8
 8017550:	0801cc1c 	.word	0x0801cc1c

08017554 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8017554:	b580      	push	{r7, lr}
 8017556:	b088      	sub	sp, #32
 8017558:	af04      	add	r7, sp, #16
 801755a:	60f8      	str	r0, [r7, #12]
 801755c:	60b9      	str	r1, [r7, #8]
 801755e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8017560:	68fb      	ldr	r3, [r7, #12]
 8017562:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8017566:	68fb      	ldr	r3, [r7, #12]
 8017568:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 801756c:	68fb      	ldr	r3, [r7, #12]
 801756e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8017570:	2201      	movs	r2, #1
 8017572:	9203      	str	r2, [sp, #12]
 8017574:	68ba      	ldr	r2, [r7, #8]
 8017576:	9202      	str	r2, [sp, #8]
 8017578:	4a06      	ldr	r2, [pc, #24]	; (8017594 <etharp_request_dst+0x40>)
 801757a:	9201      	str	r2, [sp, #4]
 801757c:	9300      	str	r3, [sp, #0]
 801757e:	4603      	mov	r3, r0
 8017580:	687a      	ldr	r2, [r7, #4]
 8017582:	68f8      	ldr	r0, [r7, #12]
 8017584:	f7ff ff5a 	bl	801743c <etharp_raw>
 8017588:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801758a:	4618      	mov	r0, r3
 801758c:	3710      	adds	r7, #16
 801758e:	46bd      	mov	sp, r7
 8017590:	bd80      	pop	{r7, pc}
 8017592:	bf00      	nop
 8017594:	0801d268 	.word	0x0801d268

08017598 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8017598:	b580      	push	{r7, lr}
 801759a:	b082      	sub	sp, #8
 801759c:	af00      	add	r7, sp, #0
 801759e:	6078      	str	r0, [r7, #4]
 80175a0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80175a2:	4a05      	ldr	r2, [pc, #20]	; (80175b8 <etharp_request+0x20>)
 80175a4:	6839      	ldr	r1, [r7, #0]
 80175a6:	6878      	ldr	r0, [r7, #4]
 80175a8:	f7ff ffd4 	bl	8017554 <etharp_request_dst>
 80175ac:	4603      	mov	r3, r0
}
 80175ae:	4618      	mov	r0, r3
 80175b0:	3708      	adds	r7, #8
 80175b2:	46bd      	mov	sp, r7
 80175b4:	bd80      	pop	{r7, pc}
 80175b6:	bf00      	nop
 80175b8:	0801d260 	.word	0x0801d260

080175bc <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80175bc:	b580      	push	{r7, lr}
 80175be:	b08e      	sub	sp, #56	; 0x38
 80175c0:	af04      	add	r7, sp, #16
 80175c2:	6078      	str	r0, [r7, #4]
 80175c4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80175c6:	4b79      	ldr	r3, [pc, #484]	; (80177ac <icmp_input+0x1f0>)
 80175c8:	689b      	ldr	r3, [r3, #8]
 80175ca:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80175cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175ce:	781b      	ldrb	r3, [r3, #0]
 80175d0:	f003 030f 	and.w	r3, r3, #15
 80175d4:	b2db      	uxtb	r3, r3
 80175d6:	009b      	lsls	r3, r3, #2
 80175d8:	b2db      	uxtb	r3, r3
 80175da:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80175dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80175de:	2b13      	cmp	r3, #19
 80175e0:	f240 80cd 	bls.w	801777e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80175e4:	687b      	ldr	r3, [r7, #4]
 80175e6:	895b      	ldrh	r3, [r3, #10]
 80175e8:	2b03      	cmp	r3, #3
 80175ea:	f240 80ca 	bls.w	8017782 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80175ee:	687b      	ldr	r3, [r7, #4]
 80175f0:	685b      	ldr	r3, [r3, #4]
 80175f2:	781b      	ldrb	r3, [r3, #0]
 80175f4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80175f8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80175fc:	2b00      	cmp	r3, #0
 80175fe:	f000 80b7 	beq.w	8017770 <icmp_input+0x1b4>
 8017602:	2b08      	cmp	r3, #8
 8017604:	f040 80b7 	bne.w	8017776 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8017608:	4b69      	ldr	r3, [pc, #420]	; (80177b0 <icmp_input+0x1f4>)
 801760a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801760c:	4b67      	ldr	r3, [pc, #412]	; (80177ac <icmp_input+0x1f0>)
 801760e:	695b      	ldr	r3, [r3, #20]
 8017610:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017614:	2be0      	cmp	r3, #224	; 0xe0
 8017616:	f000 80bb 	beq.w	8017790 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801761a:	4b64      	ldr	r3, [pc, #400]	; (80177ac <icmp_input+0x1f0>)
 801761c:	695b      	ldr	r3, [r3, #20]
 801761e:	4a63      	ldr	r2, [pc, #396]	; (80177ac <icmp_input+0x1f0>)
 8017620:	6812      	ldr	r2, [r2, #0]
 8017622:	4611      	mov	r1, r2
 8017624:	4618      	mov	r0, r3
 8017626:	f000 fc0b 	bl	8017e40 <ip4_addr_isbroadcast_u32>
 801762a:	4603      	mov	r3, r0
 801762c:	2b00      	cmp	r3, #0
 801762e:	f040 80b1 	bne.w	8017794 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8017632:	687b      	ldr	r3, [r7, #4]
 8017634:	891b      	ldrh	r3, [r3, #8]
 8017636:	2b07      	cmp	r3, #7
 8017638:	f240 80a5 	bls.w	8017786 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801763c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801763e:	330e      	adds	r3, #14
 8017640:	4619      	mov	r1, r3
 8017642:	6878      	ldr	r0, [r7, #4]
 8017644:	f7f6 ff06 	bl	800e454 <pbuf_add_header>
 8017648:	4603      	mov	r3, r0
 801764a:	2b00      	cmp	r3, #0
 801764c:	d04b      	beq.n	80176e6 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801764e:	687b      	ldr	r3, [r7, #4]
 8017650:	891a      	ldrh	r2, [r3, #8]
 8017652:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017654:	4413      	add	r3, r2
 8017656:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8017658:	687b      	ldr	r3, [r7, #4]
 801765a:	891b      	ldrh	r3, [r3, #8]
 801765c:	8b7a      	ldrh	r2, [r7, #26]
 801765e:	429a      	cmp	r2, r3
 8017660:	f0c0 809a 	bcc.w	8017798 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8017664:	8b7b      	ldrh	r3, [r7, #26]
 8017666:	f44f 7220 	mov.w	r2, #640	; 0x280
 801766a:	4619      	mov	r1, r3
 801766c:	200e      	movs	r0, #14
 801766e:	f7f6 fca3 	bl	800dfb8 <pbuf_alloc>
 8017672:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8017674:	697b      	ldr	r3, [r7, #20]
 8017676:	2b00      	cmp	r3, #0
 8017678:	f000 8090 	beq.w	801779c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801767c:	697b      	ldr	r3, [r7, #20]
 801767e:	895b      	ldrh	r3, [r3, #10]
 8017680:	461a      	mov	r2, r3
 8017682:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017684:	3308      	adds	r3, #8
 8017686:	429a      	cmp	r2, r3
 8017688:	d203      	bcs.n	8017692 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801768a:	6978      	ldr	r0, [r7, #20]
 801768c:	f7f6 ff78 	bl	800e580 <pbuf_free>
          goto icmperr;
 8017690:	e085      	b.n	801779e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8017692:	697b      	ldr	r3, [r7, #20]
 8017694:	685b      	ldr	r3, [r3, #4]
 8017696:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8017698:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801769a:	4618      	mov	r0, r3
 801769c:	f001 fc66 	bl	8018f6c <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80176a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80176a2:	4619      	mov	r1, r3
 80176a4:	6978      	ldr	r0, [r7, #20]
 80176a6:	f7f6 fee5 	bl	800e474 <pbuf_remove_header>
 80176aa:	4603      	mov	r3, r0
 80176ac:	2b00      	cmp	r3, #0
 80176ae:	d009      	beq.n	80176c4 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80176b0:	4b40      	ldr	r3, [pc, #256]	; (80177b4 <icmp_input+0x1f8>)
 80176b2:	22b6      	movs	r2, #182	; 0xb6
 80176b4:	4940      	ldr	r1, [pc, #256]	; (80177b8 <icmp_input+0x1fc>)
 80176b6:	4841      	ldr	r0, [pc, #260]	; (80177bc <icmp_input+0x200>)
 80176b8:	f002 f83c 	bl	8019734 <iprintf>
          pbuf_free(r);
 80176bc:	6978      	ldr	r0, [r7, #20]
 80176be:	f7f6 ff5f 	bl	800e580 <pbuf_free>
          goto icmperr;
 80176c2:	e06c      	b.n	801779e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80176c4:	6879      	ldr	r1, [r7, #4]
 80176c6:	6978      	ldr	r0, [r7, #20]
 80176c8:	f7f7 f88e 	bl	800e7e8 <pbuf_copy>
 80176cc:	4603      	mov	r3, r0
 80176ce:	2b00      	cmp	r3, #0
 80176d0:	d003      	beq.n	80176da <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80176d2:	6978      	ldr	r0, [r7, #20]
 80176d4:	f7f6 ff54 	bl	800e580 <pbuf_free>
          goto icmperr;
 80176d8:	e061      	b.n	801779e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 80176da:	6878      	ldr	r0, [r7, #4]
 80176dc:	f7f6 ff50 	bl	800e580 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80176e0:	697b      	ldr	r3, [r7, #20]
 80176e2:	607b      	str	r3, [r7, #4]
 80176e4:	e00f      	b.n	8017706 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80176e6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80176e8:	330e      	adds	r3, #14
 80176ea:	4619      	mov	r1, r3
 80176ec:	6878      	ldr	r0, [r7, #4]
 80176ee:	f7f6 fec1 	bl	800e474 <pbuf_remove_header>
 80176f2:	4603      	mov	r3, r0
 80176f4:	2b00      	cmp	r3, #0
 80176f6:	d006      	beq.n	8017706 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80176f8:	4b2e      	ldr	r3, [pc, #184]	; (80177b4 <icmp_input+0x1f8>)
 80176fa:	22c7      	movs	r2, #199	; 0xc7
 80176fc:	4930      	ldr	r1, [pc, #192]	; (80177c0 <icmp_input+0x204>)
 80176fe:	482f      	ldr	r0, [pc, #188]	; (80177bc <icmp_input+0x200>)
 8017700:	f002 f818 	bl	8019734 <iprintf>
          goto icmperr;
 8017704:	e04b      	b.n	801779e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8017706:	687b      	ldr	r3, [r7, #4]
 8017708:	685b      	ldr	r3, [r3, #4]
 801770a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801770c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801770e:	4619      	mov	r1, r3
 8017710:	6878      	ldr	r0, [r7, #4]
 8017712:	f7f6 fe9f 	bl	800e454 <pbuf_add_header>
 8017716:	4603      	mov	r3, r0
 8017718:	2b00      	cmp	r3, #0
 801771a:	d12b      	bne.n	8017774 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801771c:	687b      	ldr	r3, [r7, #4]
 801771e:	685b      	ldr	r3, [r3, #4]
 8017720:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8017722:	69fb      	ldr	r3, [r7, #28]
 8017724:	681a      	ldr	r2, [r3, #0]
 8017726:	68fb      	ldr	r3, [r7, #12]
 8017728:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801772a:	4b20      	ldr	r3, [pc, #128]	; (80177ac <icmp_input+0x1f0>)
 801772c:	691a      	ldr	r2, [r3, #16]
 801772e:	68fb      	ldr	r3, [r7, #12]
 8017730:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8017732:	693b      	ldr	r3, [r7, #16]
 8017734:	2200      	movs	r2, #0
 8017736:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8017738:	693b      	ldr	r3, [r7, #16]
 801773a:	2200      	movs	r2, #0
 801773c:	709a      	strb	r2, [r3, #2]
 801773e:	2200      	movs	r2, #0
 8017740:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8017742:	68fb      	ldr	r3, [r7, #12]
 8017744:	22ff      	movs	r2, #255	; 0xff
 8017746:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8017748:	68fb      	ldr	r3, [r7, #12]
 801774a:	2200      	movs	r2, #0
 801774c:	729a      	strb	r2, [r3, #10]
 801774e:	2200      	movs	r2, #0
 8017750:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8017752:	683b      	ldr	r3, [r7, #0]
 8017754:	9302      	str	r3, [sp, #8]
 8017756:	2301      	movs	r3, #1
 8017758:	9301      	str	r3, [sp, #4]
 801775a:	2300      	movs	r3, #0
 801775c:	9300      	str	r3, [sp, #0]
 801775e:	23ff      	movs	r3, #255	; 0xff
 8017760:	2200      	movs	r2, #0
 8017762:	69f9      	ldr	r1, [r7, #28]
 8017764:	6878      	ldr	r0, [r7, #4]
 8017766:	f000 fa93 	bl	8017c90 <ip4_output_if>
 801776a:	4603      	mov	r3, r0
 801776c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801776e:	e001      	b.n	8017774 <icmp_input+0x1b8>
      break;
 8017770:	bf00      	nop
 8017772:	e000      	b.n	8017776 <icmp_input+0x1ba>
      break;
 8017774:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8017776:	6878      	ldr	r0, [r7, #4]
 8017778:	f7f6 ff02 	bl	800e580 <pbuf_free>
  return;
 801777c:	e013      	b.n	80177a6 <icmp_input+0x1ea>
    goto lenerr;
 801777e:	bf00      	nop
 8017780:	e002      	b.n	8017788 <icmp_input+0x1cc>
    goto lenerr;
 8017782:	bf00      	nop
 8017784:	e000      	b.n	8017788 <icmp_input+0x1cc>
        goto lenerr;
 8017786:	bf00      	nop
lenerr:
  pbuf_free(p);
 8017788:	6878      	ldr	r0, [r7, #4]
 801778a:	f7f6 fef9 	bl	800e580 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801778e:	e00a      	b.n	80177a6 <icmp_input+0x1ea>
        goto icmperr;
 8017790:	bf00      	nop
 8017792:	e004      	b.n	801779e <icmp_input+0x1e2>
        goto icmperr;
 8017794:	bf00      	nop
 8017796:	e002      	b.n	801779e <icmp_input+0x1e2>
          goto icmperr;
 8017798:	bf00      	nop
 801779a:	e000      	b.n	801779e <icmp_input+0x1e2>
          goto icmperr;
 801779c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801779e:	6878      	ldr	r0, [r7, #4]
 80177a0:	f7f6 feee 	bl	800e580 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80177a4:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80177a6:	3728      	adds	r7, #40	; 0x28
 80177a8:	46bd      	mov	sp, r7
 80177aa:	bd80      	pop	{r7, pc}
 80177ac:	2001716c 	.word	0x2001716c
 80177b0:	20017180 	.word	0x20017180
 80177b4:	0801cc60 	.word	0x0801cc60
 80177b8:	0801cc98 	.word	0x0801cc98
 80177bc:	0801ccd0 	.word	0x0801ccd0
 80177c0:	0801ccf8 	.word	0x0801ccf8

080177c4 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80177c4:	b580      	push	{r7, lr}
 80177c6:	b082      	sub	sp, #8
 80177c8:	af00      	add	r7, sp, #0
 80177ca:	6078      	str	r0, [r7, #4]
 80177cc:	460b      	mov	r3, r1
 80177ce:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80177d0:	78fb      	ldrb	r3, [r7, #3]
 80177d2:	461a      	mov	r2, r3
 80177d4:	2103      	movs	r1, #3
 80177d6:	6878      	ldr	r0, [r7, #4]
 80177d8:	f000 f814 	bl	8017804 <icmp_send_response>
}
 80177dc:	bf00      	nop
 80177de:	3708      	adds	r7, #8
 80177e0:	46bd      	mov	sp, r7
 80177e2:	bd80      	pop	{r7, pc}

080177e4 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80177e4:	b580      	push	{r7, lr}
 80177e6:	b082      	sub	sp, #8
 80177e8:	af00      	add	r7, sp, #0
 80177ea:	6078      	str	r0, [r7, #4]
 80177ec:	460b      	mov	r3, r1
 80177ee:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80177f0:	78fb      	ldrb	r3, [r7, #3]
 80177f2:	461a      	mov	r2, r3
 80177f4:	210b      	movs	r1, #11
 80177f6:	6878      	ldr	r0, [r7, #4]
 80177f8:	f000 f804 	bl	8017804 <icmp_send_response>
}
 80177fc:	bf00      	nop
 80177fe:	3708      	adds	r7, #8
 8017800:	46bd      	mov	sp, r7
 8017802:	bd80      	pop	{r7, pc}

08017804 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8017804:	b580      	push	{r7, lr}
 8017806:	b08c      	sub	sp, #48	; 0x30
 8017808:	af04      	add	r7, sp, #16
 801780a:	6078      	str	r0, [r7, #4]
 801780c:	460b      	mov	r3, r1
 801780e:	70fb      	strb	r3, [r7, #3]
 8017810:	4613      	mov	r3, r2
 8017812:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8017814:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017818:	2124      	movs	r1, #36	; 0x24
 801781a:	2022      	movs	r0, #34	; 0x22
 801781c:	f7f6 fbcc 	bl	800dfb8 <pbuf_alloc>
 8017820:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8017822:	69fb      	ldr	r3, [r7, #28]
 8017824:	2b00      	cmp	r3, #0
 8017826:	d04c      	beq.n	80178c2 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8017828:	69fb      	ldr	r3, [r7, #28]
 801782a:	895b      	ldrh	r3, [r3, #10]
 801782c:	2b23      	cmp	r3, #35	; 0x23
 801782e:	d806      	bhi.n	801783e <icmp_send_response+0x3a>
 8017830:	4b26      	ldr	r3, [pc, #152]	; (80178cc <icmp_send_response+0xc8>)
 8017832:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8017836:	4926      	ldr	r1, [pc, #152]	; (80178d0 <icmp_send_response+0xcc>)
 8017838:	4826      	ldr	r0, [pc, #152]	; (80178d4 <icmp_send_response+0xd0>)
 801783a:	f001 ff7b 	bl	8019734 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801783e:	687b      	ldr	r3, [r7, #4]
 8017840:	685b      	ldr	r3, [r3, #4]
 8017842:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8017844:	69fb      	ldr	r3, [r7, #28]
 8017846:	685b      	ldr	r3, [r3, #4]
 8017848:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801784a:	697b      	ldr	r3, [r7, #20]
 801784c:	78fa      	ldrb	r2, [r7, #3]
 801784e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8017850:	697b      	ldr	r3, [r7, #20]
 8017852:	78ba      	ldrb	r2, [r7, #2]
 8017854:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8017856:	697b      	ldr	r3, [r7, #20]
 8017858:	2200      	movs	r2, #0
 801785a:	711a      	strb	r2, [r3, #4]
 801785c:	2200      	movs	r2, #0
 801785e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8017860:	697b      	ldr	r3, [r7, #20]
 8017862:	2200      	movs	r2, #0
 8017864:	719a      	strb	r2, [r3, #6]
 8017866:	2200      	movs	r2, #0
 8017868:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801786a:	69fb      	ldr	r3, [r7, #28]
 801786c:	685b      	ldr	r3, [r3, #4]
 801786e:	f103 0008 	add.w	r0, r3, #8
 8017872:	687b      	ldr	r3, [r7, #4]
 8017874:	685b      	ldr	r3, [r3, #4]
 8017876:	221c      	movs	r2, #28
 8017878:	4619      	mov	r1, r3
 801787a:	f001 fb77 	bl	8018f6c <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801787e:	69bb      	ldr	r3, [r7, #24]
 8017880:	68db      	ldr	r3, [r3, #12]
 8017882:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8017884:	f107 030c 	add.w	r3, r7, #12
 8017888:	4618      	mov	r0, r3
 801788a:	f000 f825 	bl	80178d8 <ip4_route>
 801788e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8017890:	693b      	ldr	r3, [r7, #16]
 8017892:	2b00      	cmp	r3, #0
 8017894:	d011      	beq.n	80178ba <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8017896:	697b      	ldr	r3, [r7, #20]
 8017898:	2200      	movs	r2, #0
 801789a:	709a      	strb	r2, [r3, #2]
 801789c:	2200      	movs	r2, #0
 801789e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80178a0:	f107 020c 	add.w	r2, r7, #12
 80178a4:	693b      	ldr	r3, [r7, #16]
 80178a6:	9302      	str	r3, [sp, #8]
 80178a8:	2301      	movs	r3, #1
 80178aa:	9301      	str	r3, [sp, #4]
 80178ac:	2300      	movs	r3, #0
 80178ae:	9300      	str	r3, [sp, #0]
 80178b0:	23ff      	movs	r3, #255	; 0xff
 80178b2:	2100      	movs	r1, #0
 80178b4:	69f8      	ldr	r0, [r7, #28]
 80178b6:	f000 f9eb 	bl	8017c90 <ip4_output_if>
  }
  pbuf_free(q);
 80178ba:	69f8      	ldr	r0, [r7, #28]
 80178bc:	f7f6 fe60 	bl	800e580 <pbuf_free>
 80178c0:	e000      	b.n	80178c4 <icmp_send_response+0xc0>
    return;
 80178c2:	bf00      	nop
}
 80178c4:	3720      	adds	r7, #32
 80178c6:	46bd      	mov	sp, r7
 80178c8:	bd80      	pop	{r7, pc}
 80178ca:	bf00      	nop
 80178cc:	0801cc60 	.word	0x0801cc60
 80178d0:	0801cd2c 	.word	0x0801cd2c
 80178d4:	0801ccd0 	.word	0x0801ccd0

080178d8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80178d8:	b480      	push	{r7}
 80178da:	b085      	sub	sp, #20
 80178dc:	af00      	add	r7, sp, #0
 80178de:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80178e0:	4b33      	ldr	r3, [pc, #204]	; (80179b0 <ip4_route+0xd8>)
 80178e2:	681b      	ldr	r3, [r3, #0]
 80178e4:	60fb      	str	r3, [r7, #12]
 80178e6:	e036      	b.n	8017956 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80178e8:	68fb      	ldr	r3, [r7, #12]
 80178ea:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80178ee:	f003 0301 	and.w	r3, r3, #1
 80178f2:	b2db      	uxtb	r3, r3
 80178f4:	2b00      	cmp	r3, #0
 80178f6:	d02b      	beq.n	8017950 <ip4_route+0x78>
 80178f8:	68fb      	ldr	r3, [r7, #12]
 80178fa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80178fe:	089b      	lsrs	r3, r3, #2
 8017900:	f003 0301 	and.w	r3, r3, #1
 8017904:	b2db      	uxtb	r3, r3
 8017906:	2b00      	cmp	r3, #0
 8017908:	d022      	beq.n	8017950 <ip4_route+0x78>
 801790a:	68fb      	ldr	r3, [r7, #12]
 801790c:	3304      	adds	r3, #4
 801790e:	681b      	ldr	r3, [r3, #0]
 8017910:	2b00      	cmp	r3, #0
 8017912:	d01d      	beq.n	8017950 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8017914:	687b      	ldr	r3, [r7, #4]
 8017916:	681a      	ldr	r2, [r3, #0]
 8017918:	68fb      	ldr	r3, [r7, #12]
 801791a:	3304      	adds	r3, #4
 801791c:	681b      	ldr	r3, [r3, #0]
 801791e:	405a      	eors	r2, r3
 8017920:	68fb      	ldr	r3, [r7, #12]
 8017922:	3308      	adds	r3, #8
 8017924:	681b      	ldr	r3, [r3, #0]
 8017926:	4013      	ands	r3, r2
 8017928:	2b00      	cmp	r3, #0
 801792a:	d101      	bne.n	8017930 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801792c:	68fb      	ldr	r3, [r7, #12]
 801792e:	e038      	b.n	80179a2 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8017930:	68fb      	ldr	r3, [r7, #12]
 8017932:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017936:	f003 0302 	and.w	r3, r3, #2
 801793a:	2b00      	cmp	r3, #0
 801793c:	d108      	bne.n	8017950 <ip4_route+0x78>
 801793e:	687b      	ldr	r3, [r7, #4]
 8017940:	681a      	ldr	r2, [r3, #0]
 8017942:	68fb      	ldr	r3, [r7, #12]
 8017944:	330c      	adds	r3, #12
 8017946:	681b      	ldr	r3, [r3, #0]
 8017948:	429a      	cmp	r2, r3
 801794a:	d101      	bne.n	8017950 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801794c:	68fb      	ldr	r3, [r7, #12]
 801794e:	e028      	b.n	80179a2 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8017950:	68fb      	ldr	r3, [r7, #12]
 8017952:	681b      	ldr	r3, [r3, #0]
 8017954:	60fb      	str	r3, [r7, #12]
 8017956:	68fb      	ldr	r3, [r7, #12]
 8017958:	2b00      	cmp	r3, #0
 801795a:	d1c5      	bne.n	80178e8 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801795c:	4b15      	ldr	r3, [pc, #84]	; (80179b4 <ip4_route+0xdc>)
 801795e:	681b      	ldr	r3, [r3, #0]
 8017960:	2b00      	cmp	r3, #0
 8017962:	d01a      	beq.n	801799a <ip4_route+0xc2>
 8017964:	4b13      	ldr	r3, [pc, #76]	; (80179b4 <ip4_route+0xdc>)
 8017966:	681b      	ldr	r3, [r3, #0]
 8017968:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801796c:	f003 0301 	and.w	r3, r3, #1
 8017970:	2b00      	cmp	r3, #0
 8017972:	d012      	beq.n	801799a <ip4_route+0xc2>
 8017974:	4b0f      	ldr	r3, [pc, #60]	; (80179b4 <ip4_route+0xdc>)
 8017976:	681b      	ldr	r3, [r3, #0]
 8017978:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801797c:	f003 0304 	and.w	r3, r3, #4
 8017980:	2b00      	cmp	r3, #0
 8017982:	d00a      	beq.n	801799a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8017984:	4b0b      	ldr	r3, [pc, #44]	; (80179b4 <ip4_route+0xdc>)
 8017986:	681b      	ldr	r3, [r3, #0]
 8017988:	3304      	adds	r3, #4
 801798a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801798c:	2b00      	cmp	r3, #0
 801798e:	d004      	beq.n	801799a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8017990:	687b      	ldr	r3, [r7, #4]
 8017992:	681b      	ldr	r3, [r3, #0]
 8017994:	b2db      	uxtb	r3, r3
 8017996:	2b7f      	cmp	r3, #127	; 0x7f
 8017998:	d101      	bne.n	801799e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801799a:	2300      	movs	r3, #0
 801799c:	e001      	b.n	80179a2 <ip4_route+0xca>
  }

  return netif_default;
 801799e:	4b05      	ldr	r3, [pc, #20]	; (80179b4 <ip4_route+0xdc>)
 80179a0:	681b      	ldr	r3, [r3, #0]
}
 80179a2:	4618      	mov	r0, r3
 80179a4:	3714      	adds	r7, #20
 80179a6:	46bd      	mov	sp, r7
 80179a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179ac:	4770      	bx	lr
 80179ae:	bf00      	nop
 80179b0:	2001b650 	.word	0x2001b650
 80179b4:	2001b654 	.word	0x2001b654

080179b8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80179b8:	b580      	push	{r7, lr}
 80179ba:	b082      	sub	sp, #8
 80179bc:	af00      	add	r7, sp, #0
 80179be:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80179c0:	687b      	ldr	r3, [r7, #4]
 80179c2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80179c6:	f003 0301 	and.w	r3, r3, #1
 80179ca:	b2db      	uxtb	r3, r3
 80179cc:	2b00      	cmp	r3, #0
 80179ce:	d016      	beq.n	80179fe <ip4_input_accept+0x46>
 80179d0:	687b      	ldr	r3, [r7, #4]
 80179d2:	3304      	adds	r3, #4
 80179d4:	681b      	ldr	r3, [r3, #0]
 80179d6:	2b00      	cmp	r3, #0
 80179d8:	d011      	beq.n	80179fe <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80179da:	4b0b      	ldr	r3, [pc, #44]	; (8017a08 <ip4_input_accept+0x50>)
 80179dc:	695a      	ldr	r2, [r3, #20]
 80179de:	687b      	ldr	r3, [r7, #4]
 80179e0:	3304      	adds	r3, #4
 80179e2:	681b      	ldr	r3, [r3, #0]
 80179e4:	429a      	cmp	r2, r3
 80179e6:	d008      	beq.n	80179fa <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80179e8:	4b07      	ldr	r3, [pc, #28]	; (8017a08 <ip4_input_accept+0x50>)
 80179ea:	695b      	ldr	r3, [r3, #20]
 80179ec:	6879      	ldr	r1, [r7, #4]
 80179ee:	4618      	mov	r0, r3
 80179f0:	f000 fa26 	bl	8017e40 <ip4_addr_isbroadcast_u32>
 80179f4:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80179f6:	2b00      	cmp	r3, #0
 80179f8:	d001      	beq.n	80179fe <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80179fa:	2301      	movs	r3, #1
 80179fc:	e000      	b.n	8017a00 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80179fe:	2300      	movs	r3, #0
}
 8017a00:	4618      	mov	r0, r3
 8017a02:	3708      	adds	r7, #8
 8017a04:	46bd      	mov	sp, r7
 8017a06:	bd80      	pop	{r7, pc}
 8017a08:	2001716c 	.word	0x2001716c

08017a0c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8017a0c:	b580      	push	{r7, lr}
 8017a0e:	b088      	sub	sp, #32
 8017a10:	af00      	add	r7, sp, #0
 8017a12:	6078      	str	r0, [r7, #4]
 8017a14:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8017a16:	2301      	movs	r3, #1
 8017a18:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8017a1a:	687b      	ldr	r3, [r7, #4]
 8017a1c:	685b      	ldr	r3, [r3, #4]
 8017a1e:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8017a20:	69fb      	ldr	r3, [r7, #28]
 8017a22:	781b      	ldrb	r3, [r3, #0]
 8017a24:	091b      	lsrs	r3, r3, #4
 8017a26:	b2db      	uxtb	r3, r3
 8017a28:	2b04      	cmp	r3, #4
 8017a2a:	d004      	beq.n	8017a36 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8017a2c:	6878      	ldr	r0, [r7, #4]
 8017a2e:	f7f6 fda7 	bl	800e580 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8017a32:	2300      	movs	r3, #0
 8017a34:	e123      	b.n	8017c7e <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8017a36:	69fb      	ldr	r3, [r7, #28]
 8017a38:	781b      	ldrb	r3, [r3, #0]
 8017a3a:	f003 030f 	and.w	r3, r3, #15
 8017a3e:	b2db      	uxtb	r3, r3
 8017a40:	009b      	lsls	r3, r3, #2
 8017a42:	b2db      	uxtb	r3, r3
 8017a44:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8017a46:	69fb      	ldr	r3, [r7, #28]
 8017a48:	885b      	ldrh	r3, [r3, #2]
 8017a4a:	b29b      	uxth	r3, r3
 8017a4c:	4618      	mov	r0, r3
 8017a4e:	f7f5 f9df 	bl	800ce10 <lwip_htons>
 8017a52:	4603      	mov	r3, r0
 8017a54:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8017a56:	687b      	ldr	r3, [r7, #4]
 8017a58:	891b      	ldrh	r3, [r3, #8]
 8017a5a:	8a3a      	ldrh	r2, [r7, #16]
 8017a5c:	429a      	cmp	r2, r3
 8017a5e:	d204      	bcs.n	8017a6a <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8017a60:	8a3b      	ldrh	r3, [r7, #16]
 8017a62:	4619      	mov	r1, r3
 8017a64:	6878      	ldr	r0, [r7, #4]
 8017a66:	f7f6 fc05 	bl	800e274 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8017a6a:	687b      	ldr	r3, [r7, #4]
 8017a6c:	895b      	ldrh	r3, [r3, #10]
 8017a6e:	8a7a      	ldrh	r2, [r7, #18]
 8017a70:	429a      	cmp	r2, r3
 8017a72:	d807      	bhi.n	8017a84 <ip4_input+0x78>
 8017a74:	687b      	ldr	r3, [r7, #4]
 8017a76:	891b      	ldrh	r3, [r3, #8]
 8017a78:	8a3a      	ldrh	r2, [r7, #16]
 8017a7a:	429a      	cmp	r2, r3
 8017a7c:	d802      	bhi.n	8017a84 <ip4_input+0x78>
 8017a7e:	8a7b      	ldrh	r3, [r7, #18]
 8017a80:	2b13      	cmp	r3, #19
 8017a82:	d804      	bhi.n	8017a8e <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8017a84:	6878      	ldr	r0, [r7, #4]
 8017a86:	f7f6 fd7b 	bl	800e580 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8017a8a:	2300      	movs	r3, #0
 8017a8c:	e0f7      	b.n	8017c7e <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8017a8e:	69fb      	ldr	r3, [r7, #28]
 8017a90:	691b      	ldr	r3, [r3, #16]
 8017a92:	4a7d      	ldr	r2, [pc, #500]	; (8017c88 <ip4_input+0x27c>)
 8017a94:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8017a96:	69fb      	ldr	r3, [r7, #28]
 8017a98:	68db      	ldr	r3, [r3, #12]
 8017a9a:	4a7b      	ldr	r2, [pc, #492]	; (8017c88 <ip4_input+0x27c>)
 8017a9c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017a9e:	4b7a      	ldr	r3, [pc, #488]	; (8017c88 <ip4_input+0x27c>)
 8017aa0:	695b      	ldr	r3, [r3, #20]
 8017aa2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017aa6:	2be0      	cmp	r3, #224	; 0xe0
 8017aa8:	d112      	bne.n	8017ad0 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8017aaa:	683b      	ldr	r3, [r7, #0]
 8017aac:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017ab0:	f003 0301 	and.w	r3, r3, #1
 8017ab4:	b2db      	uxtb	r3, r3
 8017ab6:	2b00      	cmp	r3, #0
 8017ab8:	d007      	beq.n	8017aca <ip4_input+0xbe>
 8017aba:	683b      	ldr	r3, [r7, #0]
 8017abc:	3304      	adds	r3, #4
 8017abe:	681b      	ldr	r3, [r3, #0]
 8017ac0:	2b00      	cmp	r3, #0
 8017ac2:	d002      	beq.n	8017aca <ip4_input+0xbe>
      netif = inp;
 8017ac4:	683b      	ldr	r3, [r7, #0]
 8017ac6:	61bb      	str	r3, [r7, #24]
 8017ac8:	e02a      	b.n	8017b20 <ip4_input+0x114>
    } else {
      netif = NULL;
 8017aca:	2300      	movs	r3, #0
 8017acc:	61bb      	str	r3, [r7, #24]
 8017ace:	e027      	b.n	8017b20 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8017ad0:	6838      	ldr	r0, [r7, #0]
 8017ad2:	f7ff ff71 	bl	80179b8 <ip4_input_accept>
 8017ad6:	4603      	mov	r3, r0
 8017ad8:	2b00      	cmp	r3, #0
 8017ada:	d002      	beq.n	8017ae2 <ip4_input+0xd6>
      netif = inp;
 8017adc:	683b      	ldr	r3, [r7, #0]
 8017ade:	61bb      	str	r3, [r7, #24]
 8017ae0:	e01e      	b.n	8017b20 <ip4_input+0x114>
    } else {
      netif = NULL;
 8017ae2:	2300      	movs	r3, #0
 8017ae4:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8017ae6:	4b68      	ldr	r3, [pc, #416]	; (8017c88 <ip4_input+0x27c>)
 8017ae8:	695b      	ldr	r3, [r3, #20]
 8017aea:	b2db      	uxtb	r3, r3
 8017aec:	2b7f      	cmp	r3, #127	; 0x7f
 8017aee:	d017      	beq.n	8017b20 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8017af0:	4b66      	ldr	r3, [pc, #408]	; (8017c8c <ip4_input+0x280>)
 8017af2:	681b      	ldr	r3, [r3, #0]
 8017af4:	61bb      	str	r3, [r7, #24]
 8017af6:	e00e      	b.n	8017b16 <ip4_input+0x10a>
          if (netif == inp) {
 8017af8:	69ba      	ldr	r2, [r7, #24]
 8017afa:	683b      	ldr	r3, [r7, #0]
 8017afc:	429a      	cmp	r2, r3
 8017afe:	d006      	beq.n	8017b0e <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8017b00:	69b8      	ldr	r0, [r7, #24]
 8017b02:	f7ff ff59 	bl	80179b8 <ip4_input_accept>
 8017b06:	4603      	mov	r3, r0
 8017b08:	2b00      	cmp	r3, #0
 8017b0a:	d108      	bne.n	8017b1e <ip4_input+0x112>
 8017b0c:	e000      	b.n	8017b10 <ip4_input+0x104>
            continue;
 8017b0e:	bf00      	nop
        NETIF_FOREACH(netif) {
 8017b10:	69bb      	ldr	r3, [r7, #24]
 8017b12:	681b      	ldr	r3, [r3, #0]
 8017b14:	61bb      	str	r3, [r7, #24]
 8017b16:	69bb      	ldr	r3, [r7, #24]
 8017b18:	2b00      	cmp	r3, #0
 8017b1a:	d1ed      	bne.n	8017af8 <ip4_input+0xec>
 8017b1c:	e000      	b.n	8017b20 <ip4_input+0x114>
            break;
 8017b1e:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8017b20:	69bb      	ldr	r3, [r7, #24]
 8017b22:	2b00      	cmp	r3, #0
 8017b24:	d111      	bne.n	8017b4a <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8017b26:	69fb      	ldr	r3, [r7, #28]
 8017b28:	7a5b      	ldrb	r3, [r3, #9]
 8017b2a:	2b11      	cmp	r3, #17
 8017b2c:	d10d      	bne.n	8017b4a <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8017b2e:	8a7b      	ldrh	r3, [r7, #18]
 8017b30:	69fa      	ldr	r2, [r7, #28]
 8017b32:	4413      	add	r3, r2
 8017b34:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8017b36:	68fb      	ldr	r3, [r7, #12]
 8017b38:	885b      	ldrh	r3, [r3, #2]
 8017b3a:	b29b      	uxth	r3, r3
 8017b3c:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8017b40:	d103      	bne.n	8017b4a <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8017b42:	683b      	ldr	r3, [r7, #0]
 8017b44:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8017b46:	2300      	movs	r3, #0
 8017b48:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8017b4a:	697b      	ldr	r3, [r7, #20]
 8017b4c:	2b00      	cmp	r3, #0
 8017b4e:	d017      	beq.n	8017b80 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8017b50:	4b4d      	ldr	r3, [pc, #308]	; (8017c88 <ip4_input+0x27c>)
 8017b52:	691b      	ldr	r3, [r3, #16]
 8017b54:	2b00      	cmp	r3, #0
 8017b56:	d013      	beq.n	8017b80 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8017b58:	4b4b      	ldr	r3, [pc, #300]	; (8017c88 <ip4_input+0x27c>)
 8017b5a:	691b      	ldr	r3, [r3, #16]
 8017b5c:	6839      	ldr	r1, [r7, #0]
 8017b5e:	4618      	mov	r0, r3
 8017b60:	f000 f96e 	bl	8017e40 <ip4_addr_isbroadcast_u32>
 8017b64:	4603      	mov	r3, r0
 8017b66:	2b00      	cmp	r3, #0
 8017b68:	d105      	bne.n	8017b76 <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8017b6a:	4b47      	ldr	r3, [pc, #284]	; (8017c88 <ip4_input+0x27c>)
 8017b6c:	691b      	ldr	r3, [r3, #16]
 8017b6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8017b72:	2be0      	cmp	r3, #224	; 0xe0
 8017b74:	d104      	bne.n	8017b80 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8017b76:	6878      	ldr	r0, [r7, #4]
 8017b78:	f7f6 fd02 	bl	800e580 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8017b7c:	2300      	movs	r3, #0
 8017b7e:	e07e      	b.n	8017c7e <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8017b80:	69bb      	ldr	r3, [r7, #24]
 8017b82:	2b00      	cmp	r3, #0
 8017b84:	d104      	bne.n	8017b90 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8017b86:	6878      	ldr	r0, [r7, #4]
 8017b88:	f7f6 fcfa 	bl	800e580 <pbuf_free>
    return ERR_OK;
 8017b8c:	2300      	movs	r3, #0
 8017b8e:	e076      	b.n	8017c7e <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8017b90:	69fb      	ldr	r3, [r7, #28]
 8017b92:	88db      	ldrh	r3, [r3, #6]
 8017b94:	b29b      	uxth	r3, r3
 8017b96:	461a      	mov	r2, r3
 8017b98:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8017b9c:	4013      	ands	r3, r2
 8017b9e:	2b00      	cmp	r3, #0
 8017ba0:	d00b      	beq.n	8017bba <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8017ba2:	6878      	ldr	r0, [r7, #4]
 8017ba4:	f000 fc92 	bl	80184cc <ip4_reass>
 8017ba8:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8017baa:	687b      	ldr	r3, [r7, #4]
 8017bac:	2b00      	cmp	r3, #0
 8017bae:	d101      	bne.n	8017bb4 <ip4_input+0x1a8>
      return ERR_OK;
 8017bb0:	2300      	movs	r3, #0
 8017bb2:	e064      	b.n	8017c7e <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8017bb4:	687b      	ldr	r3, [r7, #4]
 8017bb6:	685b      	ldr	r3, [r3, #4]
 8017bb8:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8017bba:	4a33      	ldr	r2, [pc, #204]	; (8017c88 <ip4_input+0x27c>)
 8017bbc:	69bb      	ldr	r3, [r7, #24]
 8017bbe:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8017bc0:	4a31      	ldr	r2, [pc, #196]	; (8017c88 <ip4_input+0x27c>)
 8017bc2:	683b      	ldr	r3, [r7, #0]
 8017bc4:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8017bc6:	4a30      	ldr	r2, [pc, #192]	; (8017c88 <ip4_input+0x27c>)
 8017bc8:	69fb      	ldr	r3, [r7, #28]
 8017bca:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8017bcc:	69fb      	ldr	r3, [r7, #28]
 8017bce:	781b      	ldrb	r3, [r3, #0]
 8017bd0:	f003 030f 	and.w	r3, r3, #15
 8017bd4:	b2db      	uxtb	r3, r3
 8017bd6:	009b      	lsls	r3, r3, #2
 8017bd8:	b2db      	uxtb	r3, r3
 8017bda:	b29a      	uxth	r2, r3
 8017bdc:	4b2a      	ldr	r3, [pc, #168]	; (8017c88 <ip4_input+0x27c>)
 8017bde:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8017be0:	8a7b      	ldrh	r3, [r7, #18]
 8017be2:	4619      	mov	r1, r3
 8017be4:	6878      	ldr	r0, [r7, #4]
 8017be6:	f7f6 fc45 	bl	800e474 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8017bea:	69fb      	ldr	r3, [r7, #28]
 8017bec:	7a5b      	ldrb	r3, [r3, #9]
 8017bee:	2b11      	cmp	r3, #17
 8017bf0:	d006      	beq.n	8017c00 <ip4_input+0x1f4>
 8017bf2:	2b11      	cmp	r3, #17
 8017bf4:	dc13      	bgt.n	8017c1e <ip4_input+0x212>
 8017bf6:	2b01      	cmp	r3, #1
 8017bf8:	d00c      	beq.n	8017c14 <ip4_input+0x208>
 8017bfa:	2b06      	cmp	r3, #6
 8017bfc:	d005      	beq.n	8017c0a <ip4_input+0x1fe>
 8017bfe:	e00e      	b.n	8017c1e <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8017c00:	6839      	ldr	r1, [r7, #0]
 8017c02:	6878      	ldr	r0, [r7, #4]
 8017c04:	f7fc faea 	bl	80141dc <udp_input>
        break;
 8017c08:	e026      	b.n	8017c58 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8017c0a:	6839      	ldr	r1, [r7, #0]
 8017c0c:	6878      	ldr	r0, [r7, #4]
 8017c0e:	f7f8 fafb 	bl	8010208 <tcp_input>
        break;
 8017c12:	e021      	b.n	8017c58 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8017c14:	6839      	ldr	r1, [r7, #0]
 8017c16:	6878      	ldr	r0, [r7, #4]
 8017c18:	f7ff fcd0 	bl	80175bc <icmp_input>
        break;
 8017c1c:	e01c      	b.n	8017c58 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8017c1e:	4b1a      	ldr	r3, [pc, #104]	; (8017c88 <ip4_input+0x27c>)
 8017c20:	695b      	ldr	r3, [r3, #20]
 8017c22:	69b9      	ldr	r1, [r7, #24]
 8017c24:	4618      	mov	r0, r3
 8017c26:	f000 f90b 	bl	8017e40 <ip4_addr_isbroadcast_u32>
 8017c2a:	4603      	mov	r3, r0
 8017c2c:	2b00      	cmp	r3, #0
 8017c2e:	d10f      	bne.n	8017c50 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017c30:	4b15      	ldr	r3, [pc, #84]	; (8017c88 <ip4_input+0x27c>)
 8017c32:	695b      	ldr	r3, [r3, #20]
 8017c34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8017c38:	2be0      	cmp	r3, #224	; 0xe0
 8017c3a:	d009      	beq.n	8017c50 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8017c3c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8017c40:	4619      	mov	r1, r3
 8017c42:	6878      	ldr	r0, [r7, #4]
 8017c44:	f7f6 fc89 	bl	800e55a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8017c48:	2102      	movs	r1, #2
 8017c4a:	6878      	ldr	r0, [r7, #4]
 8017c4c:	f7ff fdba 	bl	80177c4 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8017c50:	6878      	ldr	r0, [r7, #4]
 8017c52:	f7f6 fc95 	bl	800e580 <pbuf_free>
        break;
 8017c56:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8017c58:	4b0b      	ldr	r3, [pc, #44]	; (8017c88 <ip4_input+0x27c>)
 8017c5a:	2200      	movs	r2, #0
 8017c5c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8017c5e:	4b0a      	ldr	r3, [pc, #40]	; (8017c88 <ip4_input+0x27c>)
 8017c60:	2200      	movs	r2, #0
 8017c62:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8017c64:	4b08      	ldr	r3, [pc, #32]	; (8017c88 <ip4_input+0x27c>)
 8017c66:	2200      	movs	r2, #0
 8017c68:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8017c6a:	4b07      	ldr	r3, [pc, #28]	; (8017c88 <ip4_input+0x27c>)
 8017c6c:	2200      	movs	r2, #0
 8017c6e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8017c70:	4b05      	ldr	r3, [pc, #20]	; (8017c88 <ip4_input+0x27c>)
 8017c72:	2200      	movs	r2, #0
 8017c74:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8017c76:	4b04      	ldr	r3, [pc, #16]	; (8017c88 <ip4_input+0x27c>)
 8017c78:	2200      	movs	r2, #0
 8017c7a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8017c7c:	2300      	movs	r3, #0
}
 8017c7e:	4618      	mov	r0, r3
 8017c80:	3720      	adds	r7, #32
 8017c82:	46bd      	mov	sp, r7
 8017c84:	bd80      	pop	{r7, pc}
 8017c86:	bf00      	nop
 8017c88:	2001716c 	.word	0x2001716c
 8017c8c:	2001b650 	.word	0x2001b650

08017c90 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8017c90:	b580      	push	{r7, lr}
 8017c92:	b08a      	sub	sp, #40	; 0x28
 8017c94:	af04      	add	r7, sp, #16
 8017c96:	60f8      	str	r0, [r7, #12]
 8017c98:	60b9      	str	r1, [r7, #8]
 8017c9a:	607a      	str	r2, [r7, #4]
 8017c9c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8017c9e:	68bb      	ldr	r3, [r7, #8]
 8017ca0:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8017ca2:	687b      	ldr	r3, [r7, #4]
 8017ca4:	2b00      	cmp	r3, #0
 8017ca6:	d009      	beq.n	8017cbc <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8017ca8:	68bb      	ldr	r3, [r7, #8]
 8017caa:	2b00      	cmp	r3, #0
 8017cac:	d003      	beq.n	8017cb6 <ip4_output_if+0x26>
 8017cae:	68bb      	ldr	r3, [r7, #8]
 8017cb0:	681b      	ldr	r3, [r3, #0]
 8017cb2:	2b00      	cmp	r3, #0
 8017cb4:	d102      	bne.n	8017cbc <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8017cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017cb8:	3304      	adds	r3, #4
 8017cba:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8017cbc:	78fa      	ldrb	r2, [r7, #3]
 8017cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017cc0:	9302      	str	r3, [sp, #8]
 8017cc2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8017cc6:	9301      	str	r3, [sp, #4]
 8017cc8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8017ccc:	9300      	str	r3, [sp, #0]
 8017cce:	4613      	mov	r3, r2
 8017cd0:	687a      	ldr	r2, [r7, #4]
 8017cd2:	6979      	ldr	r1, [r7, #20]
 8017cd4:	68f8      	ldr	r0, [r7, #12]
 8017cd6:	f000 f805 	bl	8017ce4 <ip4_output_if_src>
 8017cda:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8017cdc:	4618      	mov	r0, r3
 8017cde:	3718      	adds	r7, #24
 8017ce0:	46bd      	mov	sp, r7
 8017ce2:	bd80      	pop	{r7, pc}

08017ce4 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8017ce4:	b580      	push	{r7, lr}
 8017ce6:	b088      	sub	sp, #32
 8017ce8:	af00      	add	r7, sp, #0
 8017cea:	60f8      	str	r0, [r7, #12]
 8017cec:	60b9      	str	r1, [r7, #8]
 8017cee:	607a      	str	r2, [r7, #4]
 8017cf0:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8017cf2:	68fb      	ldr	r3, [r7, #12]
 8017cf4:	7b9b      	ldrb	r3, [r3, #14]
 8017cf6:	2b01      	cmp	r3, #1
 8017cf8:	d006      	beq.n	8017d08 <ip4_output_if_src+0x24>
 8017cfa:	4b4b      	ldr	r3, [pc, #300]	; (8017e28 <ip4_output_if_src+0x144>)
 8017cfc:	f44f 7255 	mov.w	r2, #852	; 0x354
 8017d00:	494a      	ldr	r1, [pc, #296]	; (8017e2c <ip4_output_if_src+0x148>)
 8017d02:	484b      	ldr	r0, [pc, #300]	; (8017e30 <ip4_output_if_src+0x14c>)
 8017d04:	f001 fd16 	bl	8019734 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8017d08:	687b      	ldr	r3, [r7, #4]
 8017d0a:	2b00      	cmp	r3, #0
 8017d0c:	d060      	beq.n	8017dd0 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8017d0e:	2314      	movs	r3, #20
 8017d10:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8017d12:	2114      	movs	r1, #20
 8017d14:	68f8      	ldr	r0, [r7, #12]
 8017d16:	f7f6 fb9d 	bl	800e454 <pbuf_add_header>
 8017d1a:	4603      	mov	r3, r0
 8017d1c:	2b00      	cmp	r3, #0
 8017d1e:	d002      	beq.n	8017d26 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8017d20:	f06f 0301 	mvn.w	r3, #1
 8017d24:	e07c      	b.n	8017e20 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8017d26:	68fb      	ldr	r3, [r7, #12]
 8017d28:	685b      	ldr	r3, [r3, #4]
 8017d2a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8017d2c:	68fb      	ldr	r3, [r7, #12]
 8017d2e:	895b      	ldrh	r3, [r3, #10]
 8017d30:	2b13      	cmp	r3, #19
 8017d32:	d806      	bhi.n	8017d42 <ip4_output_if_src+0x5e>
 8017d34:	4b3c      	ldr	r3, [pc, #240]	; (8017e28 <ip4_output_if_src+0x144>)
 8017d36:	f44f 7262 	mov.w	r2, #904	; 0x388
 8017d3a:	493e      	ldr	r1, [pc, #248]	; (8017e34 <ip4_output_if_src+0x150>)
 8017d3c:	483c      	ldr	r0, [pc, #240]	; (8017e30 <ip4_output_if_src+0x14c>)
 8017d3e:	f001 fcf9 	bl	8019734 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8017d42:	69fb      	ldr	r3, [r7, #28]
 8017d44:	78fa      	ldrb	r2, [r7, #3]
 8017d46:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8017d48:	69fb      	ldr	r3, [r7, #28]
 8017d4a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8017d4e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8017d50:	687b      	ldr	r3, [r7, #4]
 8017d52:	681a      	ldr	r2, [r3, #0]
 8017d54:	69fb      	ldr	r3, [r7, #28]
 8017d56:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8017d58:	8b7b      	ldrh	r3, [r7, #26]
 8017d5a:	089b      	lsrs	r3, r3, #2
 8017d5c:	b29b      	uxth	r3, r3
 8017d5e:	b2db      	uxtb	r3, r3
 8017d60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017d64:	b2da      	uxtb	r2, r3
 8017d66:	69fb      	ldr	r3, [r7, #28]
 8017d68:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8017d6a:	69fb      	ldr	r3, [r7, #28]
 8017d6c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8017d70:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8017d72:	68fb      	ldr	r3, [r7, #12]
 8017d74:	891b      	ldrh	r3, [r3, #8]
 8017d76:	4618      	mov	r0, r3
 8017d78:	f7f5 f84a 	bl	800ce10 <lwip_htons>
 8017d7c:	4603      	mov	r3, r0
 8017d7e:	461a      	mov	r2, r3
 8017d80:	69fb      	ldr	r3, [r7, #28]
 8017d82:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8017d84:	69fb      	ldr	r3, [r7, #28]
 8017d86:	2200      	movs	r2, #0
 8017d88:	719a      	strb	r2, [r3, #6]
 8017d8a:	2200      	movs	r2, #0
 8017d8c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8017d8e:	4b2a      	ldr	r3, [pc, #168]	; (8017e38 <ip4_output_if_src+0x154>)
 8017d90:	881b      	ldrh	r3, [r3, #0]
 8017d92:	4618      	mov	r0, r3
 8017d94:	f7f5 f83c 	bl	800ce10 <lwip_htons>
 8017d98:	4603      	mov	r3, r0
 8017d9a:	461a      	mov	r2, r3
 8017d9c:	69fb      	ldr	r3, [r7, #28]
 8017d9e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8017da0:	4b25      	ldr	r3, [pc, #148]	; (8017e38 <ip4_output_if_src+0x154>)
 8017da2:	881b      	ldrh	r3, [r3, #0]
 8017da4:	3301      	adds	r3, #1
 8017da6:	b29a      	uxth	r2, r3
 8017da8:	4b23      	ldr	r3, [pc, #140]	; (8017e38 <ip4_output_if_src+0x154>)
 8017daa:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8017dac:	68bb      	ldr	r3, [r7, #8]
 8017dae:	2b00      	cmp	r3, #0
 8017db0:	d104      	bne.n	8017dbc <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8017db2:	4b22      	ldr	r3, [pc, #136]	; (8017e3c <ip4_output_if_src+0x158>)
 8017db4:	681a      	ldr	r2, [r3, #0]
 8017db6:	69fb      	ldr	r3, [r7, #28]
 8017db8:	60da      	str	r2, [r3, #12]
 8017dba:	e003      	b.n	8017dc4 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8017dbc:	68bb      	ldr	r3, [r7, #8]
 8017dbe:	681a      	ldr	r2, [r3, #0]
 8017dc0:	69fb      	ldr	r3, [r7, #28]
 8017dc2:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8017dc4:	69fb      	ldr	r3, [r7, #28]
 8017dc6:	2200      	movs	r2, #0
 8017dc8:	729a      	strb	r2, [r3, #10]
 8017dca:	2200      	movs	r2, #0
 8017dcc:	72da      	strb	r2, [r3, #11]
 8017dce:	e00f      	b.n	8017df0 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8017dd0:	68fb      	ldr	r3, [r7, #12]
 8017dd2:	895b      	ldrh	r3, [r3, #10]
 8017dd4:	2b13      	cmp	r3, #19
 8017dd6:	d802      	bhi.n	8017dde <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8017dd8:	f06f 0301 	mvn.w	r3, #1
 8017ddc:	e020      	b.n	8017e20 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8017dde:	68fb      	ldr	r3, [r7, #12]
 8017de0:	685b      	ldr	r3, [r3, #4]
 8017de2:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8017de4:	69fb      	ldr	r3, [r7, #28]
 8017de6:	691b      	ldr	r3, [r3, #16]
 8017de8:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8017dea:	f107 0314 	add.w	r3, r7, #20
 8017dee:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8017df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017df2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017df4:	2b00      	cmp	r3, #0
 8017df6:	d00c      	beq.n	8017e12 <ip4_output_if_src+0x12e>
 8017df8:	68fb      	ldr	r3, [r7, #12]
 8017dfa:	891a      	ldrh	r2, [r3, #8]
 8017dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017dfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017e00:	429a      	cmp	r2, r3
 8017e02:	d906      	bls.n	8017e12 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8017e04:	687a      	ldr	r2, [r7, #4]
 8017e06:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8017e08:	68f8      	ldr	r0, [r7, #12]
 8017e0a:	f000 fd53 	bl	80188b4 <ip4_frag>
 8017e0e:	4603      	mov	r3, r0
 8017e10:	e006      	b.n	8017e20 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8017e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e14:	695b      	ldr	r3, [r3, #20]
 8017e16:	687a      	ldr	r2, [r7, #4]
 8017e18:	68f9      	ldr	r1, [r7, #12]
 8017e1a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017e1c:	4798      	blx	r3
 8017e1e:	4603      	mov	r3, r0
}
 8017e20:	4618      	mov	r0, r3
 8017e22:	3720      	adds	r7, #32
 8017e24:	46bd      	mov	sp, r7
 8017e26:	bd80      	pop	{r7, pc}
 8017e28:	0801cd58 	.word	0x0801cd58
 8017e2c:	0801cd8c 	.word	0x0801cd8c
 8017e30:	0801cd98 	.word	0x0801cd98
 8017e34:	0801cdc0 	.word	0x0801cdc0
 8017e38:	2001397a 	.word	0x2001397a
 8017e3c:	0801d258 	.word	0x0801d258

08017e40 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8017e40:	b480      	push	{r7}
 8017e42:	b085      	sub	sp, #20
 8017e44:	af00      	add	r7, sp, #0
 8017e46:	6078      	str	r0, [r7, #4]
 8017e48:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8017e4a:	687b      	ldr	r3, [r7, #4]
 8017e4c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8017e4e:	687b      	ldr	r3, [r7, #4]
 8017e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017e54:	d002      	beq.n	8017e5c <ip4_addr_isbroadcast_u32+0x1c>
 8017e56:	687b      	ldr	r3, [r7, #4]
 8017e58:	2b00      	cmp	r3, #0
 8017e5a:	d101      	bne.n	8017e60 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8017e5c:	2301      	movs	r3, #1
 8017e5e:	e02a      	b.n	8017eb6 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8017e60:	683b      	ldr	r3, [r7, #0]
 8017e62:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017e66:	f003 0302 	and.w	r3, r3, #2
 8017e6a:	2b00      	cmp	r3, #0
 8017e6c:	d101      	bne.n	8017e72 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8017e6e:	2300      	movs	r3, #0
 8017e70:	e021      	b.n	8017eb6 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8017e72:	683b      	ldr	r3, [r7, #0]
 8017e74:	3304      	adds	r3, #4
 8017e76:	681b      	ldr	r3, [r3, #0]
 8017e78:	687a      	ldr	r2, [r7, #4]
 8017e7a:	429a      	cmp	r2, r3
 8017e7c:	d101      	bne.n	8017e82 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8017e7e:	2300      	movs	r3, #0
 8017e80:	e019      	b.n	8017eb6 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8017e82:	68fa      	ldr	r2, [r7, #12]
 8017e84:	683b      	ldr	r3, [r7, #0]
 8017e86:	3304      	adds	r3, #4
 8017e88:	681b      	ldr	r3, [r3, #0]
 8017e8a:	405a      	eors	r2, r3
 8017e8c:	683b      	ldr	r3, [r7, #0]
 8017e8e:	3308      	adds	r3, #8
 8017e90:	681b      	ldr	r3, [r3, #0]
 8017e92:	4013      	ands	r3, r2
 8017e94:	2b00      	cmp	r3, #0
 8017e96:	d10d      	bne.n	8017eb4 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8017e98:	683b      	ldr	r3, [r7, #0]
 8017e9a:	3308      	adds	r3, #8
 8017e9c:	681b      	ldr	r3, [r3, #0]
 8017e9e:	43da      	mvns	r2, r3
 8017ea0:	687b      	ldr	r3, [r7, #4]
 8017ea2:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8017ea4:	683b      	ldr	r3, [r7, #0]
 8017ea6:	3308      	adds	r3, #8
 8017ea8:	681b      	ldr	r3, [r3, #0]
 8017eaa:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8017eac:	429a      	cmp	r2, r3
 8017eae:	d101      	bne.n	8017eb4 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8017eb0:	2301      	movs	r3, #1
 8017eb2:	e000      	b.n	8017eb6 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8017eb4:	2300      	movs	r3, #0
  }
}
 8017eb6:	4618      	mov	r0, r3
 8017eb8:	3714      	adds	r7, #20
 8017eba:	46bd      	mov	sp, r7
 8017ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ec0:	4770      	bx	lr
	...

08017ec4 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8017ec4:	b580      	push	{r7, lr}
 8017ec6:	b084      	sub	sp, #16
 8017ec8:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8017eca:	2300      	movs	r3, #0
 8017ecc:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8017ece:	4b12      	ldr	r3, [pc, #72]	; (8017f18 <ip_reass_tmr+0x54>)
 8017ed0:	681b      	ldr	r3, [r3, #0]
 8017ed2:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8017ed4:	e018      	b.n	8017f08 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8017ed6:	68fb      	ldr	r3, [r7, #12]
 8017ed8:	7fdb      	ldrb	r3, [r3, #31]
 8017eda:	2b00      	cmp	r3, #0
 8017edc:	d00b      	beq.n	8017ef6 <ip_reass_tmr+0x32>
      r->timer--;
 8017ede:	68fb      	ldr	r3, [r7, #12]
 8017ee0:	7fdb      	ldrb	r3, [r3, #31]
 8017ee2:	3b01      	subs	r3, #1
 8017ee4:	b2da      	uxtb	r2, r3
 8017ee6:	68fb      	ldr	r3, [r7, #12]
 8017ee8:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8017eea:	68fb      	ldr	r3, [r7, #12]
 8017eec:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8017eee:	68fb      	ldr	r3, [r7, #12]
 8017ef0:	681b      	ldr	r3, [r3, #0]
 8017ef2:	60fb      	str	r3, [r7, #12]
 8017ef4:	e008      	b.n	8017f08 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8017ef6:	68fb      	ldr	r3, [r7, #12]
 8017ef8:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8017efa:	68fb      	ldr	r3, [r7, #12]
 8017efc:	681b      	ldr	r3, [r3, #0]
 8017efe:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8017f00:	68b9      	ldr	r1, [r7, #8]
 8017f02:	6878      	ldr	r0, [r7, #4]
 8017f04:	f000 f80a 	bl	8017f1c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8017f08:	68fb      	ldr	r3, [r7, #12]
 8017f0a:	2b00      	cmp	r3, #0
 8017f0c:	d1e3      	bne.n	8017ed6 <ip_reass_tmr+0x12>
    }
  }
}
 8017f0e:	bf00      	nop
 8017f10:	bf00      	nop
 8017f12:	3710      	adds	r7, #16
 8017f14:	46bd      	mov	sp, r7
 8017f16:	bd80      	pop	{r7, pc}
 8017f18:	2001397c 	.word	0x2001397c

08017f1c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8017f1c:	b580      	push	{r7, lr}
 8017f1e:	b088      	sub	sp, #32
 8017f20:	af00      	add	r7, sp, #0
 8017f22:	6078      	str	r0, [r7, #4]
 8017f24:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8017f26:	2300      	movs	r3, #0
 8017f28:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8017f2a:	683a      	ldr	r2, [r7, #0]
 8017f2c:	687b      	ldr	r3, [r7, #4]
 8017f2e:	429a      	cmp	r2, r3
 8017f30:	d105      	bne.n	8017f3e <ip_reass_free_complete_datagram+0x22>
 8017f32:	4b45      	ldr	r3, [pc, #276]	; (8018048 <ip_reass_free_complete_datagram+0x12c>)
 8017f34:	22ab      	movs	r2, #171	; 0xab
 8017f36:	4945      	ldr	r1, [pc, #276]	; (801804c <ip_reass_free_complete_datagram+0x130>)
 8017f38:	4845      	ldr	r0, [pc, #276]	; (8018050 <ip_reass_free_complete_datagram+0x134>)
 8017f3a:	f001 fbfb 	bl	8019734 <iprintf>
  if (prev != NULL) {
 8017f3e:	683b      	ldr	r3, [r7, #0]
 8017f40:	2b00      	cmp	r3, #0
 8017f42:	d00a      	beq.n	8017f5a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8017f44:	683b      	ldr	r3, [r7, #0]
 8017f46:	681b      	ldr	r3, [r3, #0]
 8017f48:	687a      	ldr	r2, [r7, #4]
 8017f4a:	429a      	cmp	r2, r3
 8017f4c:	d005      	beq.n	8017f5a <ip_reass_free_complete_datagram+0x3e>
 8017f4e:	4b3e      	ldr	r3, [pc, #248]	; (8018048 <ip_reass_free_complete_datagram+0x12c>)
 8017f50:	22ad      	movs	r2, #173	; 0xad
 8017f52:	4940      	ldr	r1, [pc, #256]	; (8018054 <ip_reass_free_complete_datagram+0x138>)
 8017f54:	483e      	ldr	r0, [pc, #248]	; (8018050 <ip_reass_free_complete_datagram+0x134>)
 8017f56:	f001 fbed 	bl	8019734 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8017f5a:	687b      	ldr	r3, [r7, #4]
 8017f5c:	685b      	ldr	r3, [r3, #4]
 8017f5e:	685b      	ldr	r3, [r3, #4]
 8017f60:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8017f62:	697b      	ldr	r3, [r7, #20]
 8017f64:	889b      	ldrh	r3, [r3, #4]
 8017f66:	b29b      	uxth	r3, r3
 8017f68:	2b00      	cmp	r3, #0
 8017f6a:	d12a      	bne.n	8017fc2 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8017f6c:	687b      	ldr	r3, [r7, #4]
 8017f6e:	685b      	ldr	r3, [r3, #4]
 8017f70:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8017f72:	697b      	ldr	r3, [r7, #20]
 8017f74:	681a      	ldr	r2, [r3, #0]
 8017f76:	687b      	ldr	r3, [r7, #4]
 8017f78:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8017f7a:	69bb      	ldr	r3, [r7, #24]
 8017f7c:	6858      	ldr	r0, [r3, #4]
 8017f7e:	687b      	ldr	r3, [r7, #4]
 8017f80:	3308      	adds	r3, #8
 8017f82:	2214      	movs	r2, #20
 8017f84:	4619      	mov	r1, r3
 8017f86:	f000 fff1 	bl	8018f6c <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8017f8a:	2101      	movs	r1, #1
 8017f8c:	69b8      	ldr	r0, [r7, #24]
 8017f8e:	f7ff fc29 	bl	80177e4 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8017f92:	69b8      	ldr	r0, [r7, #24]
 8017f94:	f7f6 fb82 	bl	800e69c <pbuf_clen>
 8017f98:	4603      	mov	r3, r0
 8017f9a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8017f9c:	8bfa      	ldrh	r2, [r7, #30]
 8017f9e:	8a7b      	ldrh	r3, [r7, #18]
 8017fa0:	4413      	add	r3, r2
 8017fa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017fa6:	db05      	blt.n	8017fb4 <ip_reass_free_complete_datagram+0x98>
 8017fa8:	4b27      	ldr	r3, [pc, #156]	; (8018048 <ip_reass_free_complete_datagram+0x12c>)
 8017faa:	22bc      	movs	r2, #188	; 0xbc
 8017fac:	492a      	ldr	r1, [pc, #168]	; (8018058 <ip_reass_free_complete_datagram+0x13c>)
 8017fae:	4828      	ldr	r0, [pc, #160]	; (8018050 <ip_reass_free_complete_datagram+0x134>)
 8017fb0:	f001 fbc0 	bl	8019734 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8017fb4:	8bfa      	ldrh	r2, [r7, #30]
 8017fb6:	8a7b      	ldrh	r3, [r7, #18]
 8017fb8:	4413      	add	r3, r2
 8017fba:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8017fbc:	69b8      	ldr	r0, [r7, #24]
 8017fbe:	f7f6 fadf 	bl	800e580 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8017fc2:	687b      	ldr	r3, [r7, #4]
 8017fc4:	685b      	ldr	r3, [r3, #4]
 8017fc6:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8017fc8:	e01f      	b.n	801800a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8017fca:	69bb      	ldr	r3, [r7, #24]
 8017fcc:	685b      	ldr	r3, [r3, #4]
 8017fce:	617b      	str	r3, [r7, #20]
    pcur = p;
 8017fd0:	69bb      	ldr	r3, [r7, #24]
 8017fd2:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8017fd4:	697b      	ldr	r3, [r7, #20]
 8017fd6:	681b      	ldr	r3, [r3, #0]
 8017fd8:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8017fda:	68f8      	ldr	r0, [r7, #12]
 8017fdc:	f7f6 fb5e 	bl	800e69c <pbuf_clen>
 8017fe0:	4603      	mov	r3, r0
 8017fe2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8017fe4:	8bfa      	ldrh	r2, [r7, #30]
 8017fe6:	8a7b      	ldrh	r3, [r7, #18]
 8017fe8:	4413      	add	r3, r2
 8017fea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017fee:	db05      	blt.n	8017ffc <ip_reass_free_complete_datagram+0xe0>
 8017ff0:	4b15      	ldr	r3, [pc, #84]	; (8018048 <ip_reass_free_complete_datagram+0x12c>)
 8017ff2:	22cc      	movs	r2, #204	; 0xcc
 8017ff4:	4918      	ldr	r1, [pc, #96]	; (8018058 <ip_reass_free_complete_datagram+0x13c>)
 8017ff6:	4816      	ldr	r0, [pc, #88]	; (8018050 <ip_reass_free_complete_datagram+0x134>)
 8017ff8:	f001 fb9c 	bl	8019734 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8017ffc:	8bfa      	ldrh	r2, [r7, #30]
 8017ffe:	8a7b      	ldrh	r3, [r7, #18]
 8018000:	4413      	add	r3, r2
 8018002:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8018004:	68f8      	ldr	r0, [r7, #12]
 8018006:	f7f6 fabb 	bl	800e580 <pbuf_free>
  while (p != NULL) {
 801800a:	69bb      	ldr	r3, [r7, #24]
 801800c:	2b00      	cmp	r3, #0
 801800e:	d1dc      	bne.n	8017fca <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8018010:	6839      	ldr	r1, [r7, #0]
 8018012:	6878      	ldr	r0, [r7, #4]
 8018014:	f000 f8c2 	bl	801819c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8018018:	4b10      	ldr	r3, [pc, #64]	; (801805c <ip_reass_free_complete_datagram+0x140>)
 801801a:	881b      	ldrh	r3, [r3, #0]
 801801c:	8bfa      	ldrh	r2, [r7, #30]
 801801e:	429a      	cmp	r2, r3
 8018020:	d905      	bls.n	801802e <ip_reass_free_complete_datagram+0x112>
 8018022:	4b09      	ldr	r3, [pc, #36]	; (8018048 <ip_reass_free_complete_datagram+0x12c>)
 8018024:	22d2      	movs	r2, #210	; 0xd2
 8018026:	490e      	ldr	r1, [pc, #56]	; (8018060 <ip_reass_free_complete_datagram+0x144>)
 8018028:	4809      	ldr	r0, [pc, #36]	; (8018050 <ip_reass_free_complete_datagram+0x134>)
 801802a:	f001 fb83 	bl	8019734 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801802e:	4b0b      	ldr	r3, [pc, #44]	; (801805c <ip_reass_free_complete_datagram+0x140>)
 8018030:	881a      	ldrh	r2, [r3, #0]
 8018032:	8bfb      	ldrh	r3, [r7, #30]
 8018034:	1ad3      	subs	r3, r2, r3
 8018036:	b29a      	uxth	r2, r3
 8018038:	4b08      	ldr	r3, [pc, #32]	; (801805c <ip_reass_free_complete_datagram+0x140>)
 801803a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801803c:	8bfb      	ldrh	r3, [r7, #30]
}
 801803e:	4618      	mov	r0, r3
 8018040:	3720      	adds	r7, #32
 8018042:	46bd      	mov	sp, r7
 8018044:	bd80      	pop	{r7, pc}
 8018046:	bf00      	nop
 8018048:	0801cdf0 	.word	0x0801cdf0
 801804c:	0801ce2c 	.word	0x0801ce2c
 8018050:	0801ce38 	.word	0x0801ce38
 8018054:	0801ce60 	.word	0x0801ce60
 8018058:	0801ce74 	.word	0x0801ce74
 801805c:	20013980 	.word	0x20013980
 8018060:	0801ce94 	.word	0x0801ce94

08018064 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8018064:	b580      	push	{r7, lr}
 8018066:	b08a      	sub	sp, #40	; 0x28
 8018068:	af00      	add	r7, sp, #0
 801806a:	6078      	str	r0, [r7, #4]
 801806c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801806e:	2300      	movs	r3, #0
 8018070:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8018072:	2300      	movs	r3, #0
 8018074:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8018076:	2300      	movs	r3, #0
 8018078:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801807a:	2300      	movs	r3, #0
 801807c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801807e:	2300      	movs	r3, #0
 8018080:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8018082:	4b28      	ldr	r3, [pc, #160]	; (8018124 <ip_reass_remove_oldest_datagram+0xc0>)
 8018084:	681b      	ldr	r3, [r3, #0]
 8018086:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8018088:	e030      	b.n	80180ec <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801808a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801808c:	695a      	ldr	r2, [r3, #20]
 801808e:	687b      	ldr	r3, [r7, #4]
 8018090:	68db      	ldr	r3, [r3, #12]
 8018092:	429a      	cmp	r2, r3
 8018094:	d10c      	bne.n	80180b0 <ip_reass_remove_oldest_datagram+0x4c>
 8018096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018098:	699a      	ldr	r2, [r3, #24]
 801809a:	687b      	ldr	r3, [r7, #4]
 801809c:	691b      	ldr	r3, [r3, #16]
 801809e:	429a      	cmp	r2, r3
 80180a0:	d106      	bne.n	80180b0 <ip_reass_remove_oldest_datagram+0x4c>
 80180a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180a4:	899a      	ldrh	r2, [r3, #12]
 80180a6:	687b      	ldr	r3, [r7, #4]
 80180a8:	889b      	ldrh	r3, [r3, #4]
 80180aa:	b29b      	uxth	r3, r3
 80180ac:	429a      	cmp	r2, r3
 80180ae:	d014      	beq.n	80180da <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80180b0:	693b      	ldr	r3, [r7, #16]
 80180b2:	3301      	adds	r3, #1
 80180b4:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80180b6:	6a3b      	ldr	r3, [r7, #32]
 80180b8:	2b00      	cmp	r3, #0
 80180ba:	d104      	bne.n	80180c6 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80180bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180be:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80180c0:	69fb      	ldr	r3, [r7, #28]
 80180c2:	61bb      	str	r3, [r7, #24]
 80180c4:	e009      	b.n	80180da <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80180c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180c8:	7fda      	ldrb	r2, [r3, #31]
 80180ca:	6a3b      	ldr	r3, [r7, #32]
 80180cc:	7fdb      	ldrb	r3, [r3, #31]
 80180ce:	429a      	cmp	r2, r3
 80180d0:	d803      	bhi.n	80180da <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80180d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180d4:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80180d6:	69fb      	ldr	r3, [r7, #28]
 80180d8:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80180da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180dc:	681b      	ldr	r3, [r3, #0]
 80180de:	2b00      	cmp	r3, #0
 80180e0:	d001      	beq.n	80180e6 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80180e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180e4:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80180e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180e8:	681b      	ldr	r3, [r3, #0]
 80180ea:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80180ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180ee:	2b00      	cmp	r3, #0
 80180f0:	d1cb      	bne.n	801808a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80180f2:	6a3b      	ldr	r3, [r7, #32]
 80180f4:	2b00      	cmp	r3, #0
 80180f6:	d008      	beq.n	801810a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80180f8:	69b9      	ldr	r1, [r7, #24]
 80180fa:	6a38      	ldr	r0, [r7, #32]
 80180fc:	f7ff ff0e 	bl	8017f1c <ip_reass_free_complete_datagram>
 8018100:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8018102:	697a      	ldr	r2, [r7, #20]
 8018104:	68fb      	ldr	r3, [r7, #12]
 8018106:	4413      	add	r3, r2
 8018108:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801810a:	697a      	ldr	r2, [r7, #20]
 801810c:	683b      	ldr	r3, [r7, #0]
 801810e:	429a      	cmp	r2, r3
 8018110:	da02      	bge.n	8018118 <ip_reass_remove_oldest_datagram+0xb4>
 8018112:	693b      	ldr	r3, [r7, #16]
 8018114:	2b01      	cmp	r3, #1
 8018116:	dcac      	bgt.n	8018072 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8018118:	697b      	ldr	r3, [r7, #20]
}
 801811a:	4618      	mov	r0, r3
 801811c:	3728      	adds	r7, #40	; 0x28
 801811e:	46bd      	mov	sp, r7
 8018120:	bd80      	pop	{r7, pc}
 8018122:	bf00      	nop
 8018124:	2001397c 	.word	0x2001397c

08018128 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8018128:	b580      	push	{r7, lr}
 801812a:	b084      	sub	sp, #16
 801812c:	af00      	add	r7, sp, #0
 801812e:	6078      	str	r0, [r7, #4]
 8018130:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8018132:	2004      	movs	r0, #4
 8018134:	f7f5 fb22 	bl	800d77c <memp_malloc>
 8018138:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801813a:	68fb      	ldr	r3, [r7, #12]
 801813c:	2b00      	cmp	r3, #0
 801813e:	d110      	bne.n	8018162 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8018140:	6839      	ldr	r1, [r7, #0]
 8018142:	6878      	ldr	r0, [r7, #4]
 8018144:	f7ff ff8e 	bl	8018064 <ip_reass_remove_oldest_datagram>
 8018148:	4602      	mov	r2, r0
 801814a:	683b      	ldr	r3, [r7, #0]
 801814c:	4293      	cmp	r3, r2
 801814e:	dc03      	bgt.n	8018158 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8018150:	2004      	movs	r0, #4
 8018152:	f7f5 fb13 	bl	800d77c <memp_malloc>
 8018156:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8018158:	68fb      	ldr	r3, [r7, #12]
 801815a:	2b00      	cmp	r3, #0
 801815c:	d101      	bne.n	8018162 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801815e:	2300      	movs	r3, #0
 8018160:	e016      	b.n	8018190 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8018162:	2220      	movs	r2, #32
 8018164:	2100      	movs	r1, #0
 8018166:	68f8      	ldr	r0, [r7, #12]
 8018168:	f000 ff0e 	bl	8018f88 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801816c:	68fb      	ldr	r3, [r7, #12]
 801816e:	220f      	movs	r2, #15
 8018170:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8018172:	4b09      	ldr	r3, [pc, #36]	; (8018198 <ip_reass_enqueue_new_datagram+0x70>)
 8018174:	681a      	ldr	r2, [r3, #0]
 8018176:	68fb      	ldr	r3, [r7, #12]
 8018178:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801817a:	4a07      	ldr	r2, [pc, #28]	; (8018198 <ip_reass_enqueue_new_datagram+0x70>)
 801817c:	68fb      	ldr	r3, [r7, #12]
 801817e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8018180:	68fb      	ldr	r3, [r7, #12]
 8018182:	3308      	adds	r3, #8
 8018184:	2214      	movs	r2, #20
 8018186:	6879      	ldr	r1, [r7, #4]
 8018188:	4618      	mov	r0, r3
 801818a:	f000 feef 	bl	8018f6c <memcpy>
  return ipr;
 801818e:	68fb      	ldr	r3, [r7, #12]
}
 8018190:	4618      	mov	r0, r3
 8018192:	3710      	adds	r7, #16
 8018194:	46bd      	mov	sp, r7
 8018196:	bd80      	pop	{r7, pc}
 8018198:	2001397c 	.word	0x2001397c

0801819c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801819c:	b580      	push	{r7, lr}
 801819e:	b082      	sub	sp, #8
 80181a0:	af00      	add	r7, sp, #0
 80181a2:	6078      	str	r0, [r7, #4]
 80181a4:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80181a6:	4b10      	ldr	r3, [pc, #64]	; (80181e8 <ip_reass_dequeue_datagram+0x4c>)
 80181a8:	681b      	ldr	r3, [r3, #0]
 80181aa:	687a      	ldr	r2, [r7, #4]
 80181ac:	429a      	cmp	r2, r3
 80181ae:	d104      	bne.n	80181ba <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80181b0:	687b      	ldr	r3, [r7, #4]
 80181b2:	681b      	ldr	r3, [r3, #0]
 80181b4:	4a0c      	ldr	r2, [pc, #48]	; (80181e8 <ip_reass_dequeue_datagram+0x4c>)
 80181b6:	6013      	str	r3, [r2, #0]
 80181b8:	e00d      	b.n	80181d6 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80181ba:	683b      	ldr	r3, [r7, #0]
 80181bc:	2b00      	cmp	r3, #0
 80181be:	d106      	bne.n	80181ce <ip_reass_dequeue_datagram+0x32>
 80181c0:	4b0a      	ldr	r3, [pc, #40]	; (80181ec <ip_reass_dequeue_datagram+0x50>)
 80181c2:	f240 1245 	movw	r2, #325	; 0x145
 80181c6:	490a      	ldr	r1, [pc, #40]	; (80181f0 <ip_reass_dequeue_datagram+0x54>)
 80181c8:	480a      	ldr	r0, [pc, #40]	; (80181f4 <ip_reass_dequeue_datagram+0x58>)
 80181ca:	f001 fab3 	bl	8019734 <iprintf>
    prev->next = ipr->next;
 80181ce:	687b      	ldr	r3, [r7, #4]
 80181d0:	681a      	ldr	r2, [r3, #0]
 80181d2:	683b      	ldr	r3, [r7, #0]
 80181d4:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80181d6:	6879      	ldr	r1, [r7, #4]
 80181d8:	2004      	movs	r0, #4
 80181da:	f7f5 fb21 	bl	800d820 <memp_free>
}
 80181de:	bf00      	nop
 80181e0:	3708      	adds	r7, #8
 80181e2:	46bd      	mov	sp, r7
 80181e4:	bd80      	pop	{r7, pc}
 80181e6:	bf00      	nop
 80181e8:	2001397c 	.word	0x2001397c
 80181ec:	0801cdf0 	.word	0x0801cdf0
 80181f0:	0801ceb8 	.word	0x0801ceb8
 80181f4:	0801ce38 	.word	0x0801ce38

080181f8 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80181f8:	b580      	push	{r7, lr}
 80181fa:	b08c      	sub	sp, #48	; 0x30
 80181fc:	af00      	add	r7, sp, #0
 80181fe:	60f8      	str	r0, [r7, #12]
 8018200:	60b9      	str	r1, [r7, #8]
 8018202:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8018204:	2300      	movs	r3, #0
 8018206:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8018208:	2301      	movs	r3, #1
 801820a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801820c:	68bb      	ldr	r3, [r7, #8]
 801820e:	685b      	ldr	r3, [r3, #4]
 8018210:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8018212:	69fb      	ldr	r3, [r7, #28]
 8018214:	885b      	ldrh	r3, [r3, #2]
 8018216:	b29b      	uxth	r3, r3
 8018218:	4618      	mov	r0, r3
 801821a:	f7f4 fdf9 	bl	800ce10 <lwip_htons>
 801821e:	4603      	mov	r3, r0
 8018220:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8018222:	69fb      	ldr	r3, [r7, #28]
 8018224:	781b      	ldrb	r3, [r3, #0]
 8018226:	f003 030f 	and.w	r3, r3, #15
 801822a:	b2db      	uxtb	r3, r3
 801822c:	009b      	lsls	r3, r3, #2
 801822e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8018230:	7e7b      	ldrb	r3, [r7, #25]
 8018232:	b29b      	uxth	r3, r3
 8018234:	8b7a      	ldrh	r2, [r7, #26]
 8018236:	429a      	cmp	r2, r3
 8018238:	d202      	bcs.n	8018240 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801823a:	f04f 33ff 	mov.w	r3, #4294967295
 801823e:	e135      	b.n	80184ac <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8018240:	7e7b      	ldrb	r3, [r7, #25]
 8018242:	b29b      	uxth	r3, r3
 8018244:	8b7a      	ldrh	r2, [r7, #26]
 8018246:	1ad3      	subs	r3, r2, r3
 8018248:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801824a:	69fb      	ldr	r3, [r7, #28]
 801824c:	88db      	ldrh	r3, [r3, #6]
 801824e:	b29b      	uxth	r3, r3
 8018250:	4618      	mov	r0, r3
 8018252:	f7f4 fddd 	bl	800ce10 <lwip_htons>
 8018256:	4603      	mov	r3, r0
 8018258:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801825c:	b29b      	uxth	r3, r3
 801825e:	00db      	lsls	r3, r3, #3
 8018260:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8018262:	68bb      	ldr	r3, [r7, #8]
 8018264:	685b      	ldr	r3, [r3, #4]
 8018266:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8018268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801826a:	2200      	movs	r2, #0
 801826c:	701a      	strb	r2, [r3, #0]
 801826e:	2200      	movs	r2, #0
 8018270:	705a      	strb	r2, [r3, #1]
 8018272:	2200      	movs	r2, #0
 8018274:	709a      	strb	r2, [r3, #2]
 8018276:	2200      	movs	r2, #0
 8018278:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801827a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801827c:	8afa      	ldrh	r2, [r7, #22]
 801827e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8018280:	8afa      	ldrh	r2, [r7, #22]
 8018282:	8b7b      	ldrh	r3, [r7, #26]
 8018284:	4413      	add	r3, r2
 8018286:	b29a      	uxth	r2, r3
 8018288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801828a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801828c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801828e:	88db      	ldrh	r3, [r3, #6]
 8018290:	b29b      	uxth	r3, r3
 8018292:	8afa      	ldrh	r2, [r7, #22]
 8018294:	429a      	cmp	r2, r3
 8018296:	d902      	bls.n	801829e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018298:	f04f 33ff 	mov.w	r3, #4294967295
 801829c:	e106      	b.n	80184ac <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801829e:	68fb      	ldr	r3, [r7, #12]
 80182a0:	685b      	ldr	r3, [r3, #4]
 80182a2:	627b      	str	r3, [r7, #36]	; 0x24
 80182a4:	e068      	b.n	8018378 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80182a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80182a8:	685b      	ldr	r3, [r3, #4]
 80182aa:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80182ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80182ae:	889b      	ldrh	r3, [r3, #4]
 80182b0:	b29a      	uxth	r2, r3
 80182b2:	693b      	ldr	r3, [r7, #16]
 80182b4:	889b      	ldrh	r3, [r3, #4]
 80182b6:	b29b      	uxth	r3, r3
 80182b8:	429a      	cmp	r2, r3
 80182ba:	d235      	bcs.n	8018328 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80182bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80182be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80182c0:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80182c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80182c4:	2b00      	cmp	r3, #0
 80182c6:	d020      	beq.n	801830a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80182c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80182ca:	889b      	ldrh	r3, [r3, #4]
 80182cc:	b29a      	uxth	r2, r3
 80182ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80182d0:	88db      	ldrh	r3, [r3, #6]
 80182d2:	b29b      	uxth	r3, r3
 80182d4:	429a      	cmp	r2, r3
 80182d6:	d307      	bcc.n	80182e8 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80182d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80182da:	88db      	ldrh	r3, [r3, #6]
 80182dc:	b29a      	uxth	r2, r3
 80182de:	693b      	ldr	r3, [r7, #16]
 80182e0:	889b      	ldrh	r3, [r3, #4]
 80182e2:	b29b      	uxth	r3, r3
 80182e4:	429a      	cmp	r2, r3
 80182e6:	d902      	bls.n	80182ee <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80182e8:	f04f 33ff 	mov.w	r3, #4294967295
 80182ec:	e0de      	b.n	80184ac <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80182ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80182f0:	68ba      	ldr	r2, [r7, #8]
 80182f2:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80182f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80182f6:	88db      	ldrh	r3, [r3, #6]
 80182f8:	b29a      	uxth	r2, r3
 80182fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80182fc:	889b      	ldrh	r3, [r3, #4]
 80182fe:	b29b      	uxth	r3, r3
 8018300:	429a      	cmp	r2, r3
 8018302:	d03d      	beq.n	8018380 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8018304:	2300      	movs	r3, #0
 8018306:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8018308:	e03a      	b.n	8018380 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801830a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801830c:	88db      	ldrh	r3, [r3, #6]
 801830e:	b29a      	uxth	r2, r3
 8018310:	693b      	ldr	r3, [r7, #16]
 8018312:	889b      	ldrh	r3, [r3, #4]
 8018314:	b29b      	uxth	r3, r3
 8018316:	429a      	cmp	r2, r3
 8018318:	d902      	bls.n	8018320 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801831a:	f04f 33ff 	mov.w	r3, #4294967295
 801831e:	e0c5      	b.n	80184ac <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8018320:	68fb      	ldr	r3, [r7, #12]
 8018322:	68ba      	ldr	r2, [r7, #8]
 8018324:	605a      	str	r2, [r3, #4]
      break;
 8018326:	e02b      	b.n	8018380 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8018328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801832a:	889b      	ldrh	r3, [r3, #4]
 801832c:	b29a      	uxth	r2, r3
 801832e:	693b      	ldr	r3, [r7, #16]
 8018330:	889b      	ldrh	r3, [r3, #4]
 8018332:	b29b      	uxth	r3, r3
 8018334:	429a      	cmp	r2, r3
 8018336:	d102      	bne.n	801833e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018338:	f04f 33ff 	mov.w	r3, #4294967295
 801833c:	e0b6      	b.n	80184ac <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801833e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018340:	889b      	ldrh	r3, [r3, #4]
 8018342:	b29a      	uxth	r2, r3
 8018344:	693b      	ldr	r3, [r7, #16]
 8018346:	88db      	ldrh	r3, [r3, #6]
 8018348:	b29b      	uxth	r3, r3
 801834a:	429a      	cmp	r2, r3
 801834c:	d202      	bcs.n	8018354 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801834e:	f04f 33ff 	mov.w	r3, #4294967295
 8018352:	e0ab      	b.n	80184ac <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8018354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018356:	2b00      	cmp	r3, #0
 8018358:	d009      	beq.n	801836e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801835a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801835c:	88db      	ldrh	r3, [r3, #6]
 801835e:	b29a      	uxth	r2, r3
 8018360:	693b      	ldr	r3, [r7, #16]
 8018362:	889b      	ldrh	r3, [r3, #4]
 8018364:	b29b      	uxth	r3, r3
 8018366:	429a      	cmp	r2, r3
 8018368:	d001      	beq.n	801836e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801836a:	2300      	movs	r3, #0
 801836c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801836e:	693b      	ldr	r3, [r7, #16]
 8018370:	681b      	ldr	r3, [r3, #0]
 8018372:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8018374:	693b      	ldr	r3, [r7, #16]
 8018376:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8018378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801837a:	2b00      	cmp	r3, #0
 801837c:	d193      	bne.n	80182a6 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801837e:	e000      	b.n	8018382 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8018380:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8018382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018384:	2b00      	cmp	r3, #0
 8018386:	d12d      	bne.n	80183e4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8018388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801838a:	2b00      	cmp	r3, #0
 801838c:	d01c      	beq.n	80183c8 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801838e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018390:	88db      	ldrh	r3, [r3, #6]
 8018392:	b29a      	uxth	r2, r3
 8018394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018396:	889b      	ldrh	r3, [r3, #4]
 8018398:	b29b      	uxth	r3, r3
 801839a:	429a      	cmp	r2, r3
 801839c:	d906      	bls.n	80183ac <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801839e:	4b45      	ldr	r3, [pc, #276]	; (80184b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80183a0:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80183a4:	4944      	ldr	r1, [pc, #272]	; (80184b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80183a6:	4845      	ldr	r0, [pc, #276]	; (80184bc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80183a8:	f001 f9c4 	bl	8019734 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80183ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80183ae:	68ba      	ldr	r2, [r7, #8]
 80183b0:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80183b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80183b4:	88db      	ldrh	r3, [r3, #6]
 80183b6:	b29a      	uxth	r2, r3
 80183b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80183ba:	889b      	ldrh	r3, [r3, #4]
 80183bc:	b29b      	uxth	r3, r3
 80183be:	429a      	cmp	r2, r3
 80183c0:	d010      	beq.n	80183e4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80183c2:	2300      	movs	r3, #0
 80183c4:	623b      	str	r3, [r7, #32]
 80183c6:	e00d      	b.n	80183e4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80183c8:	68fb      	ldr	r3, [r7, #12]
 80183ca:	685b      	ldr	r3, [r3, #4]
 80183cc:	2b00      	cmp	r3, #0
 80183ce:	d006      	beq.n	80183de <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80183d0:	4b38      	ldr	r3, [pc, #224]	; (80184b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80183d2:	f44f 72df 	mov.w	r2, #446	; 0x1be
 80183d6:	493a      	ldr	r1, [pc, #232]	; (80184c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80183d8:	4838      	ldr	r0, [pc, #224]	; (80184bc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80183da:	f001 f9ab 	bl	8019734 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80183de:	68fb      	ldr	r3, [r7, #12]
 80183e0:	68ba      	ldr	r2, [r7, #8]
 80183e2:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80183e4:	687b      	ldr	r3, [r7, #4]
 80183e6:	2b00      	cmp	r3, #0
 80183e8:	d105      	bne.n	80183f6 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80183ea:	68fb      	ldr	r3, [r7, #12]
 80183ec:	7f9b      	ldrb	r3, [r3, #30]
 80183ee:	f003 0301 	and.w	r3, r3, #1
 80183f2:	2b00      	cmp	r3, #0
 80183f4:	d059      	beq.n	80184aa <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80183f6:	6a3b      	ldr	r3, [r7, #32]
 80183f8:	2b00      	cmp	r3, #0
 80183fa:	d04f      	beq.n	801849c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80183fc:	68fb      	ldr	r3, [r7, #12]
 80183fe:	685b      	ldr	r3, [r3, #4]
 8018400:	2b00      	cmp	r3, #0
 8018402:	d006      	beq.n	8018412 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8018404:	68fb      	ldr	r3, [r7, #12]
 8018406:	685b      	ldr	r3, [r3, #4]
 8018408:	685b      	ldr	r3, [r3, #4]
 801840a:	889b      	ldrh	r3, [r3, #4]
 801840c:	b29b      	uxth	r3, r3
 801840e:	2b00      	cmp	r3, #0
 8018410:	d002      	beq.n	8018418 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8018412:	2300      	movs	r3, #0
 8018414:	623b      	str	r3, [r7, #32]
 8018416:	e041      	b.n	801849c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8018418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801841a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801841c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801841e:	681b      	ldr	r3, [r3, #0]
 8018420:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8018422:	e012      	b.n	801844a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8018424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018426:	685b      	ldr	r3, [r3, #4]
 8018428:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801842a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801842c:	88db      	ldrh	r3, [r3, #6]
 801842e:	b29a      	uxth	r2, r3
 8018430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018432:	889b      	ldrh	r3, [r3, #4]
 8018434:	b29b      	uxth	r3, r3
 8018436:	429a      	cmp	r2, r3
 8018438:	d002      	beq.n	8018440 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801843a:	2300      	movs	r3, #0
 801843c:	623b      	str	r3, [r7, #32]
            break;
 801843e:	e007      	b.n	8018450 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8018440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018442:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8018444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018446:	681b      	ldr	r3, [r3, #0]
 8018448:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801844a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801844c:	2b00      	cmp	r3, #0
 801844e:	d1e9      	bne.n	8018424 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8018450:	6a3b      	ldr	r3, [r7, #32]
 8018452:	2b00      	cmp	r3, #0
 8018454:	d022      	beq.n	801849c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8018456:	68fb      	ldr	r3, [r7, #12]
 8018458:	685b      	ldr	r3, [r3, #4]
 801845a:	2b00      	cmp	r3, #0
 801845c:	d106      	bne.n	801846c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801845e:	4b15      	ldr	r3, [pc, #84]	; (80184b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018460:	f240 12df 	movw	r2, #479	; 0x1df
 8018464:	4917      	ldr	r1, [pc, #92]	; (80184c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8018466:	4815      	ldr	r0, [pc, #84]	; (80184bc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018468:	f001 f964 	bl	8019734 <iprintf>
          LWIP_ASSERT("sanity check",
 801846c:	68fb      	ldr	r3, [r7, #12]
 801846e:	685b      	ldr	r3, [r3, #4]
 8018470:	685b      	ldr	r3, [r3, #4]
 8018472:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018474:	429a      	cmp	r2, r3
 8018476:	d106      	bne.n	8018486 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8018478:	4b0e      	ldr	r3, [pc, #56]	; (80184b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801847a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801847e:	4911      	ldr	r1, [pc, #68]	; (80184c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8018480:	480e      	ldr	r0, [pc, #56]	; (80184bc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018482:	f001 f957 	bl	8019734 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8018486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018488:	681b      	ldr	r3, [r3, #0]
 801848a:	2b00      	cmp	r3, #0
 801848c:	d006      	beq.n	801849c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801848e:	4b09      	ldr	r3, [pc, #36]	; (80184b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018490:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8018494:	490c      	ldr	r1, [pc, #48]	; (80184c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8018496:	4809      	ldr	r0, [pc, #36]	; (80184bc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018498:	f001 f94c 	bl	8019734 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801849c:	6a3b      	ldr	r3, [r7, #32]
 801849e:	2b00      	cmp	r3, #0
 80184a0:	bf14      	ite	ne
 80184a2:	2301      	movne	r3, #1
 80184a4:	2300      	moveq	r3, #0
 80184a6:	b2db      	uxtb	r3, r3
 80184a8:	e000      	b.n	80184ac <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80184aa:	2300      	movs	r3, #0
}
 80184ac:	4618      	mov	r0, r3
 80184ae:	3730      	adds	r7, #48	; 0x30
 80184b0:	46bd      	mov	sp, r7
 80184b2:	bd80      	pop	{r7, pc}
 80184b4:	0801cdf0 	.word	0x0801cdf0
 80184b8:	0801ced4 	.word	0x0801ced4
 80184bc:	0801ce38 	.word	0x0801ce38
 80184c0:	0801cef4 	.word	0x0801cef4
 80184c4:	0801cf2c 	.word	0x0801cf2c
 80184c8:	0801cf3c 	.word	0x0801cf3c

080184cc <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80184cc:	b580      	push	{r7, lr}
 80184ce:	b08e      	sub	sp, #56	; 0x38
 80184d0:	af00      	add	r7, sp, #0
 80184d2:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80184d4:	687b      	ldr	r3, [r7, #4]
 80184d6:	685b      	ldr	r3, [r3, #4]
 80184d8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80184da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80184dc:	781b      	ldrb	r3, [r3, #0]
 80184de:	f003 030f 	and.w	r3, r3, #15
 80184e2:	b2db      	uxtb	r3, r3
 80184e4:	009b      	lsls	r3, r3, #2
 80184e6:	b2db      	uxtb	r3, r3
 80184e8:	2b14      	cmp	r3, #20
 80184ea:	f040 8171 	bne.w	80187d0 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80184ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80184f0:	88db      	ldrh	r3, [r3, #6]
 80184f2:	b29b      	uxth	r3, r3
 80184f4:	4618      	mov	r0, r3
 80184f6:	f7f4 fc8b 	bl	800ce10 <lwip_htons>
 80184fa:	4603      	mov	r3, r0
 80184fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018500:	b29b      	uxth	r3, r3
 8018502:	00db      	lsls	r3, r3, #3
 8018504:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8018506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018508:	885b      	ldrh	r3, [r3, #2]
 801850a:	b29b      	uxth	r3, r3
 801850c:	4618      	mov	r0, r3
 801850e:	f7f4 fc7f 	bl	800ce10 <lwip_htons>
 8018512:	4603      	mov	r3, r0
 8018514:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8018516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018518:	781b      	ldrb	r3, [r3, #0]
 801851a:	f003 030f 	and.w	r3, r3, #15
 801851e:	b2db      	uxtb	r3, r3
 8018520:	009b      	lsls	r3, r3, #2
 8018522:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8018526:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801852a:	b29b      	uxth	r3, r3
 801852c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801852e:	429a      	cmp	r2, r3
 8018530:	f0c0 8150 	bcc.w	80187d4 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8018534:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018538:	b29b      	uxth	r3, r3
 801853a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801853c:	1ad3      	subs	r3, r2, r3
 801853e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8018540:	6878      	ldr	r0, [r7, #4]
 8018542:	f7f6 f8ab 	bl	800e69c <pbuf_clen>
 8018546:	4603      	mov	r3, r0
 8018548:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801854a:	4b8c      	ldr	r3, [pc, #560]	; (801877c <ip4_reass+0x2b0>)
 801854c:	881b      	ldrh	r3, [r3, #0]
 801854e:	461a      	mov	r2, r3
 8018550:	8c3b      	ldrh	r3, [r7, #32]
 8018552:	4413      	add	r3, r2
 8018554:	2b0a      	cmp	r3, #10
 8018556:	dd10      	ble.n	801857a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8018558:	8c3b      	ldrh	r3, [r7, #32]
 801855a:	4619      	mov	r1, r3
 801855c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801855e:	f7ff fd81 	bl	8018064 <ip_reass_remove_oldest_datagram>
 8018562:	4603      	mov	r3, r0
 8018564:	2b00      	cmp	r3, #0
 8018566:	f000 8137 	beq.w	80187d8 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801856a:	4b84      	ldr	r3, [pc, #528]	; (801877c <ip4_reass+0x2b0>)
 801856c:	881b      	ldrh	r3, [r3, #0]
 801856e:	461a      	mov	r2, r3
 8018570:	8c3b      	ldrh	r3, [r7, #32]
 8018572:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8018574:	2b0a      	cmp	r3, #10
 8018576:	f300 812f 	bgt.w	80187d8 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801857a:	4b81      	ldr	r3, [pc, #516]	; (8018780 <ip4_reass+0x2b4>)
 801857c:	681b      	ldr	r3, [r3, #0]
 801857e:	633b      	str	r3, [r7, #48]	; 0x30
 8018580:	e015      	b.n	80185ae <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8018582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018584:	695a      	ldr	r2, [r3, #20]
 8018586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018588:	68db      	ldr	r3, [r3, #12]
 801858a:	429a      	cmp	r2, r3
 801858c:	d10c      	bne.n	80185a8 <ip4_reass+0xdc>
 801858e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018590:	699a      	ldr	r2, [r3, #24]
 8018592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018594:	691b      	ldr	r3, [r3, #16]
 8018596:	429a      	cmp	r2, r3
 8018598:	d106      	bne.n	80185a8 <ip4_reass+0xdc>
 801859a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801859c:	899a      	ldrh	r2, [r3, #12]
 801859e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80185a0:	889b      	ldrh	r3, [r3, #4]
 80185a2:	b29b      	uxth	r3, r3
 80185a4:	429a      	cmp	r2, r3
 80185a6:	d006      	beq.n	80185b6 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80185a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80185aa:	681b      	ldr	r3, [r3, #0]
 80185ac:	633b      	str	r3, [r7, #48]	; 0x30
 80185ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80185b0:	2b00      	cmp	r3, #0
 80185b2:	d1e6      	bne.n	8018582 <ip4_reass+0xb6>
 80185b4:	e000      	b.n	80185b8 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80185b6:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80185b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80185ba:	2b00      	cmp	r3, #0
 80185bc:	d109      	bne.n	80185d2 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80185be:	8c3b      	ldrh	r3, [r7, #32]
 80185c0:	4619      	mov	r1, r3
 80185c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80185c4:	f7ff fdb0 	bl	8018128 <ip_reass_enqueue_new_datagram>
 80185c8:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80185ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80185cc:	2b00      	cmp	r3, #0
 80185ce:	d11c      	bne.n	801860a <ip4_reass+0x13e>
      goto nullreturn;
 80185d0:	e105      	b.n	80187de <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80185d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80185d4:	88db      	ldrh	r3, [r3, #6]
 80185d6:	b29b      	uxth	r3, r3
 80185d8:	4618      	mov	r0, r3
 80185da:	f7f4 fc19 	bl	800ce10 <lwip_htons>
 80185de:	4603      	mov	r3, r0
 80185e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80185e4:	2b00      	cmp	r3, #0
 80185e6:	d110      	bne.n	801860a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80185e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80185ea:	89db      	ldrh	r3, [r3, #14]
 80185ec:	4618      	mov	r0, r3
 80185ee:	f7f4 fc0f 	bl	800ce10 <lwip_htons>
 80185f2:	4603      	mov	r3, r0
 80185f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80185f8:	2b00      	cmp	r3, #0
 80185fa:	d006      	beq.n	801860a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80185fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80185fe:	3308      	adds	r3, #8
 8018600:	2214      	movs	r2, #20
 8018602:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8018604:	4618      	mov	r0, r3
 8018606:	f000 fcb1 	bl	8018f6c <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801860a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801860c:	88db      	ldrh	r3, [r3, #6]
 801860e:	b29b      	uxth	r3, r3
 8018610:	f003 0320 	and.w	r3, r3, #32
 8018614:	2b00      	cmp	r3, #0
 8018616:	bf0c      	ite	eq
 8018618:	2301      	moveq	r3, #1
 801861a:	2300      	movne	r3, #0
 801861c:	b2db      	uxtb	r3, r3
 801861e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8018620:	69fb      	ldr	r3, [r7, #28]
 8018622:	2b00      	cmp	r3, #0
 8018624:	d00e      	beq.n	8018644 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8018626:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8018628:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801862a:	4413      	add	r3, r2
 801862c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801862e:	8b7a      	ldrh	r2, [r7, #26]
 8018630:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8018632:	429a      	cmp	r2, r3
 8018634:	f0c0 80a0 	bcc.w	8018778 <ip4_reass+0x2ac>
 8018638:	8b7b      	ldrh	r3, [r7, #26]
 801863a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801863e:	4293      	cmp	r3, r2
 8018640:	f200 809a 	bhi.w	8018778 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8018644:	69fa      	ldr	r2, [r7, #28]
 8018646:	6879      	ldr	r1, [r7, #4]
 8018648:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801864a:	f7ff fdd5 	bl	80181f8 <ip_reass_chain_frag_into_datagram_and_validate>
 801864e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8018650:	697b      	ldr	r3, [r7, #20]
 8018652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018656:	f000 809b 	beq.w	8018790 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801865a:	4b48      	ldr	r3, [pc, #288]	; (801877c <ip4_reass+0x2b0>)
 801865c:	881a      	ldrh	r2, [r3, #0]
 801865e:	8c3b      	ldrh	r3, [r7, #32]
 8018660:	4413      	add	r3, r2
 8018662:	b29a      	uxth	r2, r3
 8018664:	4b45      	ldr	r3, [pc, #276]	; (801877c <ip4_reass+0x2b0>)
 8018666:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8018668:	69fb      	ldr	r3, [r7, #28]
 801866a:	2b00      	cmp	r3, #0
 801866c:	d00d      	beq.n	801868a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801866e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8018670:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018672:	4413      	add	r3, r2
 8018674:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8018676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018678:	8a7a      	ldrh	r2, [r7, #18]
 801867a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801867c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801867e:	7f9b      	ldrb	r3, [r3, #30]
 8018680:	f043 0301 	orr.w	r3, r3, #1
 8018684:	b2da      	uxtb	r2, r3
 8018686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018688:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801868a:	697b      	ldr	r3, [r7, #20]
 801868c:	2b01      	cmp	r3, #1
 801868e:	d171      	bne.n	8018774 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8018690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018692:	8b9b      	ldrh	r3, [r3, #28]
 8018694:	3314      	adds	r3, #20
 8018696:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8018698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801869a:	685b      	ldr	r3, [r3, #4]
 801869c:	685b      	ldr	r3, [r3, #4]
 801869e:	681b      	ldr	r3, [r3, #0]
 80186a0:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80186a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80186a4:	685b      	ldr	r3, [r3, #4]
 80186a6:	685b      	ldr	r3, [r3, #4]
 80186a8:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80186aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80186ac:	3308      	adds	r3, #8
 80186ae:	2214      	movs	r2, #20
 80186b0:	4619      	mov	r1, r3
 80186b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80186b4:	f000 fc5a 	bl	8018f6c <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80186b8:	8a3b      	ldrh	r3, [r7, #16]
 80186ba:	4618      	mov	r0, r3
 80186bc:	f7f4 fba8 	bl	800ce10 <lwip_htons>
 80186c0:	4603      	mov	r3, r0
 80186c2:	461a      	mov	r2, r3
 80186c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80186c6:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80186c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80186ca:	2200      	movs	r2, #0
 80186cc:	719a      	strb	r2, [r3, #6]
 80186ce:	2200      	movs	r2, #0
 80186d0:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80186d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80186d4:	2200      	movs	r2, #0
 80186d6:	729a      	strb	r2, [r3, #10]
 80186d8:	2200      	movs	r2, #0
 80186da:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80186dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80186de:	685b      	ldr	r3, [r3, #4]
 80186e0:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80186e2:	e00d      	b.n	8018700 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80186e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80186e6:	685b      	ldr	r3, [r3, #4]
 80186e8:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80186ea:	2114      	movs	r1, #20
 80186ec:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80186ee:	f7f5 fec1 	bl	800e474 <pbuf_remove_header>
      pbuf_cat(p, r);
 80186f2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80186f4:	6878      	ldr	r0, [r7, #4]
 80186f6:	f7f6 f811 	bl	800e71c <pbuf_cat>
      r = iprh->next_pbuf;
 80186fa:	68fb      	ldr	r3, [r7, #12]
 80186fc:	681b      	ldr	r3, [r3, #0]
 80186fe:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8018700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018702:	2b00      	cmp	r3, #0
 8018704:	d1ee      	bne.n	80186e4 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8018706:	4b1e      	ldr	r3, [pc, #120]	; (8018780 <ip4_reass+0x2b4>)
 8018708:	681b      	ldr	r3, [r3, #0]
 801870a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801870c:	429a      	cmp	r2, r3
 801870e:	d102      	bne.n	8018716 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8018710:	2300      	movs	r3, #0
 8018712:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018714:	e010      	b.n	8018738 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8018716:	4b1a      	ldr	r3, [pc, #104]	; (8018780 <ip4_reass+0x2b4>)
 8018718:	681b      	ldr	r3, [r3, #0]
 801871a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801871c:	e007      	b.n	801872e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801871e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018720:	681b      	ldr	r3, [r3, #0]
 8018722:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018724:	429a      	cmp	r2, r3
 8018726:	d006      	beq.n	8018736 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8018728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801872a:	681b      	ldr	r3, [r3, #0]
 801872c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801872e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018730:	2b00      	cmp	r3, #0
 8018732:	d1f4      	bne.n	801871e <ip4_reass+0x252>
 8018734:	e000      	b.n	8018738 <ip4_reass+0x26c>
          break;
 8018736:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8018738:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801873a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801873c:	f7ff fd2e 	bl	801819c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8018740:	6878      	ldr	r0, [r7, #4]
 8018742:	f7f5 ffab 	bl	800e69c <pbuf_clen>
 8018746:	4603      	mov	r3, r0
 8018748:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801874a:	4b0c      	ldr	r3, [pc, #48]	; (801877c <ip4_reass+0x2b0>)
 801874c:	881b      	ldrh	r3, [r3, #0]
 801874e:	8c3a      	ldrh	r2, [r7, #32]
 8018750:	429a      	cmp	r2, r3
 8018752:	d906      	bls.n	8018762 <ip4_reass+0x296>
 8018754:	4b0b      	ldr	r3, [pc, #44]	; (8018784 <ip4_reass+0x2b8>)
 8018756:	f240 229b 	movw	r2, #667	; 0x29b
 801875a:	490b      	ldr	r1, [pc, #44]	; (8018788 <ip4_reass+0x2bc>)
 801875c:	480b      	ldr	r0, [pc, #44]	; (801878c <ip4_reass+0x2c0>)
 801875e:	f000 ffe9 	bl	8019734 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8018762:	4b06      	ldr	r3, [pc, #24]	; (801877c <ip4_reass+0x2b0>)
 8018764:	881a      	ldrh	r2, [r3, #0]
 8018766:	8c3b      	ldrh	r3, [r7, #32]
 8018768:	1ad3      	subs	r3, r2, r3
 801876a:	b29a      	uxth	r2, r3
 801876c:	4b03      	ldr	r3, [pc, #12]	; (801877c <ip4_reass+0x2b0>)
 801876e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8018770:	687b      	ldr	r3, [r7, #4]
 8018772:	e038      	b.n	80187e6 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8018774:	2300      	movs	r3, #0
 8018776:	e036      	b.n	80187e6 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8018778:	bf00      	nop
 801877a:	e00a      	b.n	8018792 <ip4_reass+0x2c6>
 801877c:	20013980 	.word	0x20013980
 8018780:	2001397c 	.word	0x2001397c
 8018784:	0801cdf0 	.word	0x0801cdf0
 8018788:	0801cf60 	.word	0x0801cf60
 801878c:	0801ce38 	.word	0x0801ce38
    goto nullreturn_ipr;
 8018790:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8018792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018794:	2b00      	cmp	r3, #0
 8018796:	d106      	bne.n	80187a6 <ip4_reass+0x2da>
 8018798:	4b15      	ldr	r3, [pc, #84]	; (80187f0 <ip4_reass+0x324>)
 801879a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801879e:	4915      	ldr	r1, [pc, #84]	; (80187f4 <ip4_reass+0x328>)
 80187a0:	4815      	ldr	r0, [pc, #84]	; (80187f8 <ip4_reass+0x32c>)
 80187a2:	f000 ffc7 	bl	8019734 <iprintf>
  if (ipr->p == NULL) {
 80187a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187a8:	685b      	ldr	r3, [r3, #4]
 80187aa:	2b00      	cmp	r3, #0
 80187ac:	d116      	bne.n	80187dc <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80187ae:	4b13      	ldr	r3, [pc, #76]	; (80187fc <ip4_reass+0x330>)
 80187b0:	681b      	ldr	r3, [r3, #0]
 80187b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80187b4:	429a      	cmp	r2, r3
 80187b6:	d006      	beq.n	80187c6 <ip4_reass+0x2fa>
 80187b8:	4b0d      	ldr	r3, [pc, #52]	; (80187f0 <ip4_reass+0x324>)
 80187ba:	f240 22ab 	movw	r2, #683	; 0x2ab
 80187be:	4910      	ldr	r1, [pc, #64]	; (8018800 <ip4_reass+0x334>)
 80187c0:	480d      	ldr	r0, [pc, #52]	; (80187f8 <ip4_reass+0x32c>)
 80187c2:	f000 ffb7 	bl	8019734 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80187c6:	2100      	movs	r1, #0
 80187c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80187ca:	f7ff fce7 	bl	801819c <ip_reass_dequeue_datagram>
 80187ce:	e006      	b.n	80187de <ip4_reass+0x312>
    goto nullreturn;
 80187d0:	bf00      	nop
 80187d2:	e004      	b.n	80187de <ip4_reass+0x312>
    goto nullreturn;
 80187d4:	bf00      	nop
 80187d6:	e002      	b.n	80187de <ip4_reass+0x312>
      goto nullreturn;
 80187d8:	bf00      	nop
 80187da:	e000      	b.n	80187de <ip4_reass+0x312>
  }

nullreturn:
 80187dc:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80187de:	6878      	ldr	r0, [r7, #4]
 80187e0:	f7f5 fece 	bl	800e580 <pbuf_free>
  return NULL;
 80187e4:	2300      	movs	r3, #0
}
 80187e6:	4618      	mov	r0, r3
 80187e8:	3738      	adds	r7, #56	; 0x38
 80187ea:	46bd      	mov	sp, r7
 80187ec:	bd80      	pop	{r7, pc}
 80187ee:	bf00      	nop
 80187f0:	0801cdf0 	.word	0x0801cdf0
 80187f4:	0801cf7c 	.word	0x0801cf7c
 80187f8:	0801ce38 	.word	0x0801ce38
 80187fc:	2001397c 	.word	0x2001397c
 8018800:	0801cf88 	.word	0x0801cf88

08018804 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8018804:	b580      	push	{r7, lr}
 8018806:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8018808:	2005      	movs	r0, #5
 801880a:	f7f4 ffb7 	bl	800d77c <memp_malloc>
 801880e:	4603      	mov	r3, r0
}
 8018810:	4618      	mov	r0, r3
 8018812:	bd80      	pop	{r7, pc}

08018814 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8018814:	b580      	push	{r7, lr}
 8018816:	b082      	sub	sp, #8
 8018818:	af00      	add	r7, sp, #0
 801881a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801881c:	687b      	ldr	r3, [r7, #4]
 801881e:	2b00      	cmp	r3, #0
 8018820:	d106      	bne.n	8018830 <ip_frag_free_pbuf_custom_ref+0x1c>
 8018822:	4b07      	ldr	r3, [pc, #28]	; (8018840 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8018824:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8018828:	4906      	ldr	r1, [pc, #24]	; (8018844 <ip_frag_free_pbuf_custom_ref+0x30>)
 801882a:	4807      	ldr	r0, [pc, #28]	; (8018848 <ip_frag_free_pbuf_custom_ref+0x34>)
 801882c:	f000 ff82 	bl	8019734 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8018830:	6879      	ldr	r1, [r7, #4]
 8018832:	2005      	movs	r0, #5
 8018834:	f7f4 fff4 	bl	800d820 <memp_free>
}
 8018838:	bf00      	nop
 801883a:	3708      	adds	r7, #8
 801883c:	46bd      	mov	sp, r7
 801883e:	bd80      	pop	{r7, pc}
 8018840:	0801cdf0 	.word	0x0801cdf0
 8018844:	0801cfa8 	.word	0x0801cfa8
 8018848:	0801ce38 	.word	0x0801ce38

0801884c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801884c:	b580      	push	{r7, lr}
 801884e:	b084      	sub	sp, #16
 8018850:	af00      	add	r7, sp, #0
 8018852:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8018854:	687b      	ldr	r3, [r7, #4]
 8018856:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8018858:	68fb      	ldr	r3, [r7, #12]
 801885a:	2b00      	cmp	r3, #0
 801885c:	d106      	bne.n	801886c <ipfrag_free_pbuf_custom+0x20>
 801885e:	4b11      	ldr	r3, [pc, #68]	; (80188a4 <ipfrag_free_pbuf_custom+0x58>)
 8018860:	f240 22ce 	movw	r2, #718	; 0x2ce
 8018864:	4910      	ldr	r1, [pc, #64]	; (80188a8 <ipfrag_free_pbuf_custom+0x5c>)
 8018866:	4811      	ldr	r0, [pc, #68]	; (80188ac <ipfrag_free_pbuf_custom+0x60>)
 8018868:	f000 ff64 	bl	8019734 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801886c:	68fa      	ldr	r2, [r7, #12]
 801886e:	687b      	ldr	r3, [r7, #4]
 8018870:	429a      	cmp	r2, r3
 8018872:	d006      	beq.n	8018882 <ipfrag_free_pbuf_custom+0x36>
 8018874:	4b0b      	ldr	r3, [pc, #44]	; (80188a4 <ipfrag_free_pbuf_custom+0x58>)
 8018876:	f240 22cf 	movw	r2, #719	; 0x2cf
 801887a:	490d      	ldr	r1, [pc, #52]	; (80188b0 <ipfrag_free_pbuf_custom+0x64>)
 801887c:	480b      	ldr	r0, [pc, #44]	; (80188ac <ipfrag_free_pbuf_custom+0x60>)
 801887e:	f000 ff59 	bl	8019734 <iprintf>
  if (pcr->original != NULL) {
 8018882:	68fb      	ldr	r3, [r7, #12]
 8018884:	695b      	ldr	r3, [r3, #20]
 8018886:	2b00      	cmp	r3, #0
 8018888:	d004      	beq.n	8018894 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801888a:	68fb      	ldr	r3, [r7, #12]
 801888c:	695b      	ldr	r3, [r3, #20]
 801888e:	4618      	mov	r0, r3
 8018890:	f7f5 fe76 	bl	800e580 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8018894:	68f8      	ldr	r0, [r7, #12]
 8018896:	f7ff ffbd 	bl	8018814 <ip_frag_free_pbuf_custom_ref>
}
 801889a:	bf00      	nop
 801889c:	3710      	adds	r7, #16
 801889e:	46bd      	mov	sp, r7
 80188a0:	bd80      	pop	{r7, pc}
 80188a2:	bf00      	nop
 80188a4:	0801cdf0 	.word	0x0801cdf0
 80188a8:	0801cfb4 	.word	0x0801cfb4
 80188ac:	0801ce38 	.word	0x0801ce38
 80188b0:	0801cfc0 	.word	0x0801cfc0

080188b4 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80188b4:	b580      	push	{r7, lr}
 80188b6:	b094      	sub	sp, #80	; 0x50
 80188b8:	af02      	add	r7, sp, #8
 80188ba:	60f8      	str	r0, [r7, #12]
 80188bc:	60b9      	str	r1, [r7, #8]
 80188be:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80188c0:	2300      	movs	r3, #0
 80188c2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80188c6:	68bb      	ldr	r3, [r7, #8]
 80188c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80188ca:	3b14      	subs	r3, #20
 80188cc:	2b00      	cmp	r3, #0
 80188ce:	da00      	bge.n	80188d2 <ip4_frag+0x1e>
 80188d0:	3307      	adds	r3, #7
 80188d2:	10db      	asrs	r3, r3, #3
 80188d4:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80188d6:	2314      	movs	r3, #20
 80188d8:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80188da:	68fb      	ldr	r3, [r7, #12]
 80188dc:	685b      	ldr	r3, [r3, #4]
 80188de:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80188e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80188e2:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80188e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80188e6:	781b      	ldrb	r3, [r3, #0]
 80188e8:	f003 030f 	and.w	r3, r3, #15
 80188ec:	b2db      	uxtb	r3, r3
 80188ee:	009b      	lsls	r3, r3, #2
 80188f0:	b2db      	uxtb	r3, r3
 80188f2:	2b14      	cmp	r3, #20
 80188f4:	d002      	beq.n	80188fc <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80188f6:	f06f 0305 	mvn.w	r3, #5
 80188fa:	e110      	b.n	8018b1e <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80188fc:	68fb      	ldr	r3, [r7, #12]
 80188fe:	895b      	ldrh	r3, [r3, #10]
 8018900:	2b13      	cmp	r3, #19
 8018902:	d809      	bhi.n	8018918 <ip4_frag+0x64>
 8018904:	4b88      	ldr	r3, [pc, #544]	; (8018b28 <ip4_frag+0x274>)
 8018906:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801890a:	4988      	ldr	r1, [pc, #544]	; (8018b2c <ip4_frag+0x278>)
 801890c:	4888      	ldr	r0, [pc, #544]	; (8018b30 <ip4_frag+0x27c>)
 801890e:	f000 ff11 	bl	8019734 <iprintf>
 8018912:	f06f 0305 	mvn.w	r3, #5
 8018916:	e102      	b.n	8018b1e <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8018918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801891a:	88db      	ldrh	r3, [r3, #6]
 801891c:	b29b      	uxth	r3, r3
 801891e:	4618      	mov	r0, r3
 8018920:	f7f4 fa76 	bl	800ce10 <lwip_htons>
 8018924:	4603      	mov	r3, r0
 8018926:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8018928:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801892a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801892e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8018932:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018934:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8018938:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801893a:	68fb      	ldr	r3, [r7, #12]
 801893c:	891b      	ldrh	r3, [r3, #8]
 801893e:	3b14      	subs	r3, #20
 8018940:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8018944:	e0e1      	b.n	8018b0a <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8018946:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018948:	00db      	lsls	r3, r3, #3
 801894a:	b29b      	uxth	r3, r3
 801894c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018950:	4293      	cmp	r3, r2
 8018952:	bf28      	it	cs
 8018954:	4613      	movcs	r3, r2
 8018956:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8018958:	f44f 7220 	mov.w	r2, #640	; 0x280
 801895c:	2114      	movs	r1, #20
 801895e:	200e      	movs	r0, #14
 8018960:	f7f5 fb2a 	bl	800dfb8 <pbuf_alloc>
 8018964:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8018966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018968:	2b00      	cmp	r3, #0
 801896a:	f000 80d5 	beq.w	8018b18 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801896e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018970:	895b      	ldrh	r3, [r3, #10]
 8018972:	2b13      	cmp	r3, #19
 8018974:	d806      	bhi.n	8018984 <ip4_frag+0xd0>
 8018976:	4b6c      	ldr	r3, [pc, #432]	; (8018b28 <ip4_frag+0x274>)
 8018978:	f44f 7249 	mov.w	r2, #804	; 0x324
 801897c:	496d      	ldr	r1, [pc, #436]	; (8018b34 <ip4_frag+0x280>)
 801897e:	486c      	ldr	r0, [pc, #432]	; (8018b30 <ip4_frag+0x27c>)
 8018980:	f000 fed8 	bl	8019734 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8018984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018986:	685b      	ldr	r3, [r3, #4]
 8018988:	2214      	movs	r2, #20
 801898a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801898c:	4618      	mov	r0, r3
 801898e:	f000 faed 	bl	8018f6c <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8018992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018994:	685b      	ldr	r3, [r3, #4]
 8018996:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8018998:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801899a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801899e:	e064      	b.n	8018a6a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80189a0:	68fb      	ldr	r3, [r7, #12]
 80189a2:	895a      	ldrh	r2, [r3, #10]
 80189a4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80189a6:	1ad3      	subs	r3, r2, r3
 80189a8:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80189aa:	68fb      	ldr	r3, [r7, #12]
 80189ac:	895b      	ldrh	r3, [r3, #10]
 80189ae:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80189b0:	429a      	cmp	r2, r3
 80189b2:	d906      	bls.n	80189c2 <ip4_frag+0x10e>
 80189b4:	4b5c      	ldr	r3, [pc, #368]	; (8018b28 <ip4_frag+0x274>)
 80189b6:	f240 322d 	movw	r2, #813	; 0x32d
 80189ba:	495f      	ldr	r1, [pc, #380]	; (8018b38 <ip4_frag+0x284>)
 80189bc:	485c      	ldr	r0, [pc, #368]	; (8018b30 <ip4_frag+0x27c>)
 80189be:	f000 feb9 	bl	8019734 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80189c2:	8bfa      	ldrh	r2, [r7, #30]
 80189c4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80189c8:	4293      	cmp	r3, r2
 80189ca:	bf28      	it	cs
 80189cc:	4613      	movcs	r3, r2
 80189ce:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80189d2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80189d6:	2b00      	cmp	r3, #0
 80189d8:	d105      	bne.n	80189e6 <ip4_frag+0x132>
        poff = 0;
 80189da:	2300      	movs	r3, #0
 80189dc:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80189de:	68fb      	ldr	r3, [r7, #12]
 80189e0:	681b      	ldr	r3, [r3, #0]
 80189e2:	60fb      	str	r3, [r7, #12]
        continue;
 80189e4:	e041      	b.n	8018a6a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80189e6:	f7ff ff0d 	bl	8018804 <ip_frag_alloc_pbuf_custom_ref>
 80189ea:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80189ec:	69bb      	ldr	r3, [r7, #24]
 80189ee:	2b00      	cmp	r3, #0
 80189f0:	d103      	bne.n	80189fa <ip4_frag+0x146>
        pbuf_free(rambuf);
 80189f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80189f4:	f7f5 fdc4 	bl	800e580 <pbuf_free>
        goto memerr;
 80189f8:	e08f      	b.n	8018b1a <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80189fa:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80189fc:	68fb      	ldr	r3, [r7, #12]
 80189fe:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8018a00:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8018a02:	4413      	add	r3, r2
 8018a04:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8018a08:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8018a0c:	9201      	str	r2, [sp, #4]
 8018a0e:	9300      	str	r3, [sp, #0]
 8018a10:	4603      	mov	r3, r0
 8018a12:	2241      	movs	r2, #65	; 0x41
 8018a14:	2000      	movs	r0, #0
 8018a16:	f7f5 fbf9 	bl	800e20c <pbuf_alloced_custom>
 8018a1a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8018a1c:	697b      	ldr	r3, [r7, #20]
 8018a1e:	2b00      	cmp	r3, #0
 8018a20:	d106      	bne.n	8018a30 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8018a22:	69b8      	ldr	r0, [r7, #24]
 8018a24:	f7ff fef6 	bl	8018814 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8018a28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018a2a:	f7f5 fda9 	bl	800e580 <pbuf_free>
        goto memerr;
 8018a2e:	e074      	b.n	8018b1a <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8018a30:	68f8      	ldr	r0, [r7, #12]
 8018a32:	f7f5 fe4b 	bl	800e6cc <pbuf_ref>
      pcr->original = p;
 8018a36:	69bb      	ldr	r3, [r7, #24]
 8018a38:	68fa      	ldr	r2, [r7, #12]
 8018a3a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8018a3c:	69bb      	ldr	r3, [r7, #24]
 8018a3e:	4a3f      	ldr	r2, [pc, #252]	; (8018b3c <ip4_frag+0x288>)
 8018a40:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8018a42:	6979      	ldr	r1, [r7, #20]
 8018a44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018a46:	f7f5 fe69 	bl	800e71c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8018a4a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8018a4e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018a52:	1ad3      	subs	r3, r2, r3
 8018a54:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8018a58:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8018a5c:	2b00      	cmp	r3, #0
 8018a5e:	d004      	beq.n	8018a6a <ip4_frag+0x1b6>
        poff = 0;
 8018a60:	2300      	movs	r3, #0
 8018a62:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8018a64:	68fb      	ldr	r3, [r7, #12]
 8018a66:	681b      	ldr	r3, [r3, #0]
 8018a68:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8018a6a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8018a6e:	2b00      	cmp	r3, #0
 8018a70:	d196      	bne.n	80189a0 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8018a72:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8018a74:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018a78:	4413      	add	r3, r2
 8018a7a:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8018a7c:	68bb      	ldr	r3, [r7, #8]
 8018a7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018a80:	f1a3 0213 	sub.w	r2, r3, #19
 8018a84:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018a88:	429a      	cmp	r2, r3
 8018a8a:	bfcc      	ite	gt
 8018a8c:	2301      	movgt	r3, #1
 8018a8e:	2300      	movle	r3, #0
 8018a90:	b2db      	uxtb	r3, r3
 8018a92:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8018a94:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8018a98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018a9c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8018a9e:	6a3b      	ldr	r3, [r7, #32]
 8018aa0:	2b00      	cmp	r3, #0
 8018aa2:	d002      	beq.n	8018aaa <ip4_frag+0x1f6>
 8018aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018aa6:	2b00      	cmp	r3, #0
 8018aa8:	d003      	beq.n	8018ab2 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8018aaa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018aac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8018ab0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8018ab2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018ab4:	4618      	mov	r0, r3
 8018ab6:	f7f4 f9ab 	bl	800ce10 <lwip_htons>
 8018aba:	4603      	mov	r3, r0
 8018abc:	461a      	mov	r2, r3
 8018abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ac0:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8018ac2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018ac4:	3314      	adds	r3, #20
 8018ac6:	b29b      	uxth	r3, r3
 8018ac8:	4618      	mov	r0, r3
 8018aca:	f7f4 f9a1 	bl	800ce10 <lwip_htons>
 8018ace:	4603      	mov	r3, r0
 8018ad0:	461a      	mov	r2, r3
 8018ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ad4:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8018ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ad8:	2200      	movs	r2, #0
 8018ada:	729a      	strb	r2, [r3, #10]
 8018adc:	2200      	movs	r2, #0
 8018ade:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8018ae0:	68bb      	ldr	r3, [r7, #8]
 8018ae2:	695b      	ldr	r3, [r3, #20]
 8018ae4:	687a      	ldr	r2, [r7, #4]
 8018ae6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018ae8:	68b8      	ldr	r0, [r7, #8]
 8018aea:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8018aec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018aee:	f7f5 fd47 	bl	800e580 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8018af2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018af6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018af8:	1ad3      	subs	r3, r2, r3
 8018afa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8018afe:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8018b02:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018b04:	4413      	add	r3, r2
 8018b06:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8018b0a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018b0e:	2b00      	cmp	r3, #0
 8018b10:	f47f af19 	bne.w	8018946 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8018b14:	2300      	movs	r3, #0
 8018b16:	e002      	b.n	8018b1e <ip4_frag+0x26a>
      goto memerr;
 8018b18:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8018b1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8018b1e:	4618      	mov	r0, r3
 8018b20:	3748      	adds	r7, #72	; 0x48
 8018b22:	46bd      	mov	sp, r7
 8018b24:	bd80      	pop	{r7, pc}
 8018b26:	bf00      	nop
 8018b28:	0801cdf0 	.word	0x0801cdf0
 8018b2c:	0801cfcc 	.word	0x0801cfcc
 8018b30:	0801ce38 	.word	0x0801ce38
 8018b34:	0801cfe8 	.word	0x0801cfe8
 8018b38:	0801d008 	.word	0x0801d008
 8018b3c:	0801884d 	.word	0x0801884d

08018b40 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8018b40:	b580      	push	{r7, lr}
 8018b42:	b086      	sub	sp, #24
 8018b44:	af00      	add	r7, sp, #0
 8018b46:	6078      	str	r0, [r7, #4]
 8018b48:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8018b4a:	230e      	movs	r3, #14
 8018b4c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8018b4e:	687b      	ldr	r3, [r7, #4]
 8018b50:	895b      	ldrh	r3, [r3, #10]
 8018b52:	2b0e      	cmp	r3, #14
 8018b54:	d96e      	bls.n	8018c34 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8018b56:	687b      	ldr	r3, [r7, #4]
 8018b58:	7bdb      	ldrb	r3, [r3, #15]
 8018b5a:	2b00      	cmp	r3, #0
 8018b5c:	d106      	bne.n	8018b6c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8018b5e:	683b      	ldr	r3, [r7, #0]
 8018b60:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8018b64:	3301      	adds	r3, #1
 8018b66:	b2da      	uxtb	r2, r3
 8018b68:	687b      	ldr	r3, [r7, #4]
 8018b6a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8018b6c:	687b      	ldr	r3, [r7, #4]
 8018b6e:	685b      	ldr	r3, [r3, #4]
 8018b70:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8018b72:	693b      	ldr	r3, [r7, #16]
 8018b74:	7b1a      	ldrb	r2, [r3, #12]
 8018b76:	7b5b      	ldrb	r3, [r3, #13]
 8018b78:	021b      	lsls	r3, r3, #8
 8018b7a:	4313      	orrs	r3, r2
 8018b7c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8018b7e:	693b      	ldr	r3, [r7, #16]
 8018b80:	781b      	ldrb	r3, [r3, #0]
 8018b82:	f003 0301 	and.w	r3, r3, #1
 8018b86:	2b00      	cmp	r3, #0
 8018b88:	d023      	beq.n	8018bd2 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8018b8a:	693b      	ldr	r3, [r7, #16]
 8018b8c:	781b      	ldrb	r3, [r3, #0]
 8018b8e:	2b01      	cmp	r3, #1
 8018b90:	d10f      	bne.n	8018bb2 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8018b92:	693b      	ldr	r3, [r7, #16]
 8018b94:	785b      	ldrb	r3, [r3, #1]
 8018b96:	2b00      	cmp	r3, #0
 8018b98:	d11b      	bne.n	8018bd2 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8018b9a:	693b      	ldr	r3, [r7, #16]
 8018b9c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8018b9e:	2b5e      	cmp	r3, #94	; 0x5e
 8018ba0:	d117      	bne.n	8018bd2 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8018ba2:	687b      	ldr	r3, [r7, #4]
 8018ba4:	7b5b      	ldrb	r3, [r3, #13]
 8018ba6:	f043 0310 	orr.w	r3, r3, #16
 8018baa:	b2da      	uxtb	r2, r3
 8018bac:	687b      	ldr	r3, [r7, #4]
 8018bae:	735a      	strb	r2, [r3, #13]
 8018bb0:	e00f      	b.n	8018bd2 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8018bb2:	693b      	ldr	r3, [r7, #16]
 8018bb4:	2206      	movs	r2, #6
 8018bb6:	4928      	ldr	r1, [pc, #160]	; (8018c58 <ethernet_input+0x118>)
 8018bb8:	4618      	mov	r0, r3
 8018bba:	f000 f9c7 	bl	8018f4c <memcmp>
 8018bbe:	4603      	mov	r3, r0
 8018bc0:	2b00      	cmp	r3, #0
 8018bc2:	d106      	bne.n	8018bd2 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8018bc4:	687b      	ldr	r3, [r7, #4]
 8018bc6:	7b5b      	ldrb	r3, [r3, #13]
 8018bc8:	f043 0308 	orr.w	r3, r3, #8
 8018bcc:	b2da      	uxtb	r2, r3
 8018bce:	687b      	ldr	r3, [r7, #4]
 8018bd0:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8018bd2:	89fb      	ldrh	r3, [r7, #14]
 8018bd4:	2b08      	cmp	r3, #8
 8018bd6:	d003      	beq.n	8018be0 <ethernet_input+0xa0>
 8018bd8:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8018bdc:	d014      	beq.n	8018c08 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8018bde:	e032      	b.n	8018c46 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8018be0:	683b      	ldr	r3, [r7, #0]
 8018be2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018be6:	f003 0308 	and.w	r3, r3, #8
 8018bea:	2b00      	cmp	r3, #0
 8018bec:	d024      	beq.n	8018c38 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8018bee:	8afb      	ldrh	r3, [r7, #22]
 8018bf0:	4619      	mov	r1, r3
 8018bf2:	6878      	ldr	r0, [r7, #4]
 8018bf4:	f7f5 fc3e 	bl	800e474 <pbuf_remove_header>
 8018bf8:	4603      	mov	r3, r0
 8018bfa:	2b00      	cmp	r3, #0
 8018bfc:	d11e      	bne.n	8018c3c <ethernet_input+0xfc>
        ip4_input(p, netif);
 8018bfe:	6839      	ldr	r1, [r7, #0]
 8018c00:	6878      	ldr	r0, [r7, #4]
 8018c02:	f7fe ff03 	bl	8017a0c <ip4_input>
      break;
 8018c06:	e013      	b.n	8018c30 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8018c08:	683b      	ldr	r3, [r7, #0]
 8018c0a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018c0e:	f003 0308 	and.w	r3, r3, #8
 8018c12:	2b00      	cmp	r3, #0
 8018c14:	d014      	beq.n	8018c40 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8018c16:	8afb      	ldrh	r3, [r7, #22]
 8018c18:	4619      	mov	r1, r3
 8018c1a:	6878      	ldr	r0, [r7, #4]
 8018c1c:	f7f5 fc2a 	bl	800e474 <pbuf_remove_header>
 8018c20:	4603      	mov	r3, r0
 8018c22:	2b00      	cmp	r3, #0
 8018c24:	d10e      	bne.n	8018c44 <ethernet_input+0x104>
        etharp_input(p, netif);
 8018c26:	6839      	ldr	r1, [r7, #0]
 8018c28:	6878      	ldr	r0, [r7, #4]
 8018c2a:	f7fe f89f 	bl	8016d6c <etharp_input>
      break;
 8018c2e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8018c30:	2300      	movs	r3, #0
 8018c32:	e00c      	b.n	8018c4e <ethernet_input+0x10e>
    goto free_and_return;
 8018c34:	bf00      	nop
 8018c36:	e006      	b.n	8018c46 <ethernet_input+0x106>
        goto free_and_return;
 8018c38:	bf00      	nop
 8018c3a:	e004      	b.n	8018c46 <ethernet_input+0x106>
        goto free_and_return;
 8018c3c:	bf00      	nop
 8018c3e:	e002      	b.n	8018c46 <ethernet_input+0x106>
        goto free_and_return;
 8018c40:	bf00      	nop
 8018c42:	e000      	b.n	8018c46 <ethernet_input+0x106>
        goto free_and_return;
 8018c44:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8018c46:	6878      	ldr	r0, [r7, #4]
 8018c48:	f7f5 fc9a 	bl	800e580 <pbuf_free>
  return ERR_OK;
 8018c4c:	2300      	movs	r3, #0
}
 8018c4e:	4618      	mov	r0, r3
 8018c50:	3718      	adds	r7, #24
 8018c52:	46bd      	mov	sp, r7
 8018c54:	bd80      	pop	{r7, pc}
 8018c56:	bf00      	nop
 8018c58:	0801d260 	.word	0x0801d260

08018c5c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8018c5c:	b580      	push	{r7, lr}
 8018c5e:	b086      	sub	sp, #24
 8018c60:	af00      	add	r7, sp, #0
 8018c62:	60f8      	str	r0, [r7, #12]
 8018c64:	60b9      	str	r1, [r7, #8]
 8018c66:	607a      	str	r2, [r7, #4]
 8018c68:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8018c6a:	8c3b      	ldrh	r3, [r7, #32]
 8018c6c:	4618      	mov	r0, r3
 8018c6e:	f7f4 f8cf 	bl	800ce10 <lwip_htons>
 8018c72:	4603      	mov	r3, r0
 8018c74:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8018c76:	210e      	movs	r1, #14
 8018c78:	68b8      	ldr	r0, [r7, #8]
 8018c7a:	f7f5 fbeb 	bl	800e454 <pbuf_add_header>
 8018c7e:	4603      	mov	r3, r0
 8018c80:	2b00      	cmp	r3, #0
 8018c82:	d125      	bne.n	8018cd0 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8018c84:	68bb      	ldr	r3, [r7, #8]
 8018c86:	685b      	ldr	r3, [r3, #4]
 8018c88:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8018c8a:	693b      	ldr	r3, [r7, #16]
 8018c8c:	8afa      	ldrh	r2, [r7, #22]
 8018c8e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8018c90:	693b      	ldr	r3, [r7, #16]
 8018c92:	2206      	movs	r2, #6
 8018c94:	6839      	ldr	r1, [r7, #0]
 8018c96:	4618      	mov	r0, r3
 8018c98:	f000 f968 	bl	8018f6c <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8018c9c:	693b      	ldr	r3, [r7, #16]
 8018c9e:	3306      	adds	r3, #6
 8018ca0:	2206      	movs	r2, #6
 8018ca2:	6879      	ldr	r1, [r7, #4]
 8018ca4:	4618      	mov	r0, r3
 8018ca6:	f000 f961 	bl	8018f6c <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8018caa:	68fb      	ldr	r3, [r7, #12]
 8018cac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018cb0:	2b06      	cmp	r3, #6
 8018cb2:	d006      	beq.n	8018cc2 <ethernet_output+0x66>
 8018cb4:	4b0a      	ldr	r3, [pc, #40]	; (8018ce0 <ethernet_output+0x84>)
 8018cb6:	f44f 7299 	mov.w	r2, #306	; 0x132
 8018cba:	490a      	ldr	r1, [pc, #40]	; (8018ce4 <ethernet_output+0x88>)
 8018cbc:	480a      	ldr	r0, [pc, #40]	; (8018ce8 <ethernet_output+0x8c>)
 8018cbe:	f000 fd39 	bl	8019734 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8018cc2:	68fb      	ldr	r3, [r7, #12]
 8018cc4:	699b      	ldr	r3, [r3, #24]
 8018cc6:	68b9      	ldr	r1, [r7, #8]
 8018cc8:	68f8      	ldr	r0, [r7, #12]
 8018cca:	4798      	blx	r3
 8018ccc:	4603      	mov	r3, r0
 8018cce:	e002      	b.n	8018cd6 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8018cd0:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8018cd2:	f06f 0301 	mvn.w	r3, #1
}
 8018cd6:	4618      	mov	r0, r3
 8018cd8:	3718      	adds	r7, #24
 8018cda:	46bd      	mov	sp, r7
 8018cdc:	bd80      	pop	{r7, pc}
 8018cde:	bf00      	nop
 8018ce0:	0801d018 	.word	0x0801d018
 8018ce4:	0801d050 	.word	0x0801d050
 8018ce8:	0801d084 	.word	0x0801d084

08018cec <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8018cec:	b580      	push	{r7, lr}
 8018cee:	b082      	sub	sp, #8
 8018cf0:	af00      	add	r7, sp, #0
 8018cf2:	6078      	str	r0, [r7, #4]
 8018cf4:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 8018cf6:	683b      	ldr	r3, [r7, #0]
 8018cf8:	2200      	movs	r2, #0
 8018cfa:	2104      	movs	r1, #4
 8018cfc:	4618      	mov	r0, r3
 8018cfe:	f7f0 fb85 	bl	800940c <osMessageQueueNew>
 8018d02:	4602      	mov	r2, r0
 8018d04:	687b      	ldr	r3, [r7, #4]
 8018d06:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8018d08:	687b      	ldr	r3, [r7, #4]
 8018d0a:	681b      	ldr	r3, [r3, #0]
 8018d0c:	2b00      	cmp	r3, #0
 8018d0e:	d102      	bne.n	8018d16 <sys_mbox_new+0x2a>
    return ERR_MEM;
 8018d10:	f04f 33ff 	mov.w	r3, #4294967295
 8018d14:	e000      	b.n	8018d18 <sys_mbox_new+0x2c>

  return ERR_OK;
 8018d16:	2300      	movs	r3, #0
}
 8018d18:	4618      	mov	r0, r3
 8018d1a:	3708      	adds	r7, #8
 8018d1c:	46bd      	mov	sp, r7
 8018d1e:	bd80      	pop	{r7, pc}

08018d20 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8018d20:	b580      	push	{r7, lr}
 8018d22:	b084      	sub	sp, #16
 8018d24:	af00      	add	r7, sp, #0
 8018d26:	6078      	str	r0, [r7, #4]
 8018d28:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 8018d2a:	687b      	ldr	r3, [r7, #4]
 8018d2c:	6818      	ldr	r0, [r3, #0]
 8018d2e:	4639      	mov	r1, r7
 8018d30:	2300      	movs	r3, #0
 8018d32:	2200      	movs	r2, #0
 8018d34:	f7f0 fbde 	bl	80094f4 <osMessageQueuePut>
 8018d38:	4603      	mov	r3, r0
 8018d3a:	2b00      	cmp	r3, #0
 8018d3c:	d102      	bne.n	8018d44 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 8018d3e:	2300      	movs	r3, #0
 8018d40:	73fb      	strb	r3, [r7, #15]
 8018d42:	e001      	b.n	8018d48 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8018d44:	23ff      	movs	r3, #255	; 0xff
 8018d46:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8018d48:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8018d4c:	4618      	mov	r0, r3
 8018d4e:	3710      	adds	r7, #16
 8018d50:	46bd      	mov	sp, r7
 8018d52:	bd80      	pop	{r7, pc}

08018d54 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8018d54:	b580      	push	{r7, lr}
 8018d56:	b086      	sub	sp, #24
 8018d58:	af00      	add	r7, sp, #0
 8018d5a:	60f8      	str	r0, [r7, #12]
 8018d5c:	60b9      	str	r1, [r7, #8]
 8018d5e:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8018d60:	f7f0 f864 	bl	8008e2c <osKernelGetTickCount>
 8018d64:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 8018d66:	687b      	ldr	r3, [r7, #4]
 8018d68:	2b00      	cmp	r3, #0
 8018d6a:	d013      	beq.n	8018d94 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 8018d6c:	68fb      	ldr	r3, [r7, #12]
 8018d6e:	6818      	ldr	r0, [r3, #0]
 8018d70:	687b      	ldr	r3, [r7, #4]
 8018d72:	2200      	movs	r2, #0
 8018d74:	68b9      	ldr	r1, [r7, #8]
 8018d76:	f7f0 fc1d 	bl	80095b4 <osMessageQueueGet>
 8018d7a:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 8018d7c:	693b      	ldr	r3, [r7, #16]
 8018d7e:	2b00      	cmp	r3, #0
 8018d80:	d105      	bne.n	8018d8e <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 8018d82:	f7f0 f853 	bl	8008e2c <osKernelGetTickCount>
 8018d86:	4602      	mov	r2, r0
 8018d88:	697b      	ldr	r3, [r7, #20]
 8018d8a:	1ad3      	subs	r3, r2, r3
 8018d8c:	e00f      	b.n	8018dae <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8018d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8018d92:	e00c      	b.n	8018dae <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 8018d94:	68fb      	ldr	r3, [r7, #12]
 8018d96:	6818      	ldr	r0, [r3, #0]
 8018d98:	f04f 33ff 	mov.w	r3, #4294967295
 8018d9c:	2200      	movs	r2, #0
 8018d9e:	68b9      	ldr	r1, [r7, #8]
 8018da0:	f7f0 fc08 	bl	80095b4 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 8018da4:	f7f0 f842 	bl	8008e2c <osKernelGetTickCount>
 8018da8:	4602      	mov	r2, r0
 8018daa:	697b      	ldr	r3, [r7, #20]
 8018dac:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8018dae:	4618      	mov	r0, r3
 8018db0:	3718      	adds	r7, #24
 8018db2:	46bd      	mov	sp, r7
 8018db4:	bd80      	pop	{r7, pc}

08018db6 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8018db6:	b480      	push	{r7}
 8018db8:	b083      	sub	sp, #12
 8018dba:	af00      	add	r7, sp, #0
 8018dbc:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8018dbe:	687b      	ldr	r3, [r7, #4]
 8018dc0:	681b      	ldr	r3, [r3, #0]
 8018dc2:	2b00      	cmp	r3, #0
 8018dc4:	d101      	bne.n	8018dca <sys_mbox_valid+0x14>
    return 0;
 8018dc6:	2300      	movs	r3, #0
 8018dc8:	e000      	b.n	8018dcc <sys_mbox_valid+0x16>
  else
    return 1;
 8018dca:	2301      	movs	r3, #1
}
 8018dcc:	4618      	mov	r0, r3
 8018dce:	370c      	adds	r7, #12
 8018dd0:	46bd      	mov	sp, r7
 8018dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018dd6:	4770      	bx	lr

08018dd8 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8018dd8:	b580      	push	{r7, lr}
 8018dda:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 8018ddc:	2000      	movs	r0, #0
 8018dde:	f7f0 f8e8 	bl	8008fb2 <osMutexNew>
 8018de2:	4603      	mov	r3, r0
 8018de4:	4a01      	ldr	r2, [pc, #4]	; (8018dec <sys_init+0x14>)
 8018de6:	6013      	str	r3, [r2, #0]
#endif
}
 8018de8:	bf00      	nop
 8018dea:	bd80      	pop	{r7, pc}
 8018dec:	2001b6a4 	.word	0x2001b6a4

08018df0 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8018df0:	b580      	push	{r7, lr}
 8018df2:	b082      	sub	sp, #8
 8018df4:	af00      	add	r7, sp, #0
 8018df6:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 8018df8:	2000      	movs	r0, #0
 8018dfa:	f7f0 f8da 	bl	8008fb2 <osMutexNew>
 8018dfe:	4602      	mov	r2, r0
 8018e00:	687b      	ldr	r3, [r7, #4]
 8018e02:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 8018e04:	687b      	ldr	r3, [r7, #4]
 8018e06:	681b      	ldr	r3, [r3, #0]
 8018e08:	2b00      	cmp	r3, #0
 8018e0a:	d102      	bne.n	8018e12 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8018e0c:	f04f 33ff 	mov.w	r3, #4294967295
 8018e10:	e000      	b.n	8018e14 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8018e12:	2300      	movs	r3, #0
}
 8018e14:	4618      	mov	r0, r3
 8018e16:	3708      	adds	r7, #8
 8018e18:	46bd      	mov	sp, r7
 8018e1a:	bd80      	pop	{r7, pc}

08018e1c <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8018e1c:	b580      	push	{r7, lr}
 8018e1e:	b082      	sub	sp, #8
 8018e20:	af00      	add	r7, sp, #0
 8018e22:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 8018e24:	687b      	ldr	r3, [r7, #4]
 8018e26:	681b      	ldr	r3, [r3, #0]
 8018e28:	f04f 31ff 	mov.w	r1, #4294967295
 8018e2c:	4618      	mov	r0, r3
 8018e2e:	f7f0 f946 	bl	80090be <osMutexAcquire>
#endif
}
 8018e32:	bf00      	nop
 8018e34:	3708      	adds	r7, #8
 8018e36:	46bd      	mov	sp, r7
 8018e38:	bd80      	pop	{r7, pc}

08018e3a <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8018e3a:	b580      	push	{r7, lr}
 8018e3c:	b082      	sub	sp, #8
 8018e3e:	af00      	add	r7, sp, #0
 8018e40:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8018e42:	687b      	ldr	r3, [r7, #4]
 8018e44:	681b      	ldr	r3, [r3, #0]
 8018e46:	4618      	mov	r0, r3
 8018e48:	f7f0 f984 	bl	8009154 <osMutexRelease>
}
 8018e4c:	bf00      	nop
 8018e4e:	3708      	adds	r7, #8
 8018e50:	46bd      	mov	sp, r7
 8018e52:	bd80      	pop	{r7, pc}

08018e54 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8018e54:	b580      	push	{r7, lr}
 8018e56:	b08e      	sub	sp, #56	; 0x38
 8018e58:	af00      	add	r7, sp, #0
 8018e5a:	60f8      	str	r0, [r7, #12]
 8018e5c:	60b9      	str	r1, [r7, #8]
 8018e5e:	607a      	str	r2, [r7, #4]
 8018e60:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 8018e62:	f107 0314 	add.w	r3, r7, #20
 8018e66:	2224      	movs	r2, #36	; 0x24
 8018e68:	2100      	movs	r1, #0
 8018e6a:	4618      	mov	r0, r3
 8018e6c:	f000 f88c 	bl	8018f88 <memset>
 8018e70:	68fb      	ldr	r3, [r7, #12]
 8018e72:	617b      	str	r3, [r7, #20]
 8018e74:	683b      	ldr	r3, [r7, #0]
 8018e76:	62bb      	str	r3, [r7, #40]	; 0x28
 8018e78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8018e7c:	f107 0314 	add.w	r3, r7, #20
 8018e80:	461a      	mov	r2, r3
 8018e82:	6879      	ldr	r1, [r7, #4]
 8018e84:	68b8      	ldr	r0, [r7, #8]
 8018e86:	f7ef ffe6 	bl	8008e56 <osThreadNew>
 8018e8a:	4603      	mov	r3, r0
#endif
}
 8018e8c:	4618      	mov	r0, r3
 8018e8e:	3738      	adds	r7, #56	; 0x38
 8018e90:	46bd      	mov	sp, r7
 8018e92:	bd80      	pop	{r7, pc}

08018e94 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8018e94:	b580      	push	{r7, lr}
 8018e96:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 8018e98:	4b04      	ldr	r3, [pc, #16]	; (8018eac <sys_arch_protect+0x18>)
 8018e9a:	681b      	ldr	r3, [r3, #0]
 8018e9c:	f04f 31ff 	mov.w	r1, #4294967295
 8018ea0:	4618      	mov	r0, r3
 8018ea2:	f7f0 f90c 	bl	80090be <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 8018ea6:	2301      	movs	r3, #1
}
 8018ea8:	4618      	mov	r0, r3
 8018eaa:	bd80      	pop	{r7, pc}
 8018eac:	2001b6a4 	.word	0x2001b6a4

08018eb0 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8018eb0:	b580      	push	{r7, lr}
 8018eb2:	b082      	sub	sp, #8
 8018eb4:	af00      	add	r7, sp, #0
 8018eb6:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8018eb8:	4b04      	ldr	r3, [pc, #16]	; (8018ecc <sys_arch_unprotect+0x1c>)
 8018eba:	681b      	ldr	r3, [r3, #0]
 8018ebc:	4618      	mov	r0, r3
 8018ebe:	f7f0 f949 	bl	8009154 <osMutexRelease>
}
 8018ec2:	bf00      	nop
 8018ec4:	3708      	adds	r7, #8
 8018ec6:	46bd      	mov	sp, r7
 8018ec8:	bd80      	pop	{r7, pc}
 8018eca:	bf00      	nop
 8018ecc:	2001b6a4 	.word	0x2001b6a4

08018ed0 <fiprintf>:
 8018ed0:	b40e      	push	{r1, r2, r3}
 8018ed2:	b503      	push	{r0, r1, lr}
 8018ed4:	4601      	mov	r1, r0
 8018ed6:	ab03      	add	r3, sp, #12
 8018ed8:	4805      	ldr	r0, [pc, #20]	; (8018ef0 <fiprintf+0x20>)
 8018eda:	f853 2b04 	ldr.w	r2, [r3], #4
 8018ede:	6800      	ldr	r0, [r0, #0]
 8018ee0:	9301      	str	r3, [sp, #4]
 8018ee2:	f000 f963 	bl	80191ac <_vfiprintf_r>
 8018ee6:	b002      	add	sp, #8
 8018ee8:	f85d eb04 	ldr.w	lr, [sp], #4
 8018eec:	b003      	add	sp, #12
 8018eee:	4770      	bx	lr
 8018ef0:	20000020 	.word	0x20000020

08018ef4 <__libc_init_array>:
 8018ef4:	b570      	push	{r4, r5, r6, lr}
 8018ef6:	4d0d      	ldr	r5, [pc, #52]	; (8018f2c <__libc_init_array+0x38>)
 8018ef8:	4c0d      	ldr	r4, [pc, #52]	; (8018f30 <__libc_init_array+0x3c>)
 8018efa:	1b64      	subs	r4, r4, r5
 8018efc:	10a4      	asrs	r4, r4, #2
 8018efe:	2600      	movs	r6, #0
 8018f00:	42a6      	cmp	r6, r4
 8018f02:	d109      	bne.n	8018f18 <__libc_init_array+0x24>
 8018f04:	4d0b      	ldr	r5, [pc, #44]	; (8018f34 <__libc_init_array+0x40>)
 8018f06:	4c0c      	ldr	r4, [pc, #48]	; (8018f38 <__libc_init_array+0x44>)
 8018f08:	f001 f8f2 	bl	801a0f0 <_init>
 8018f0c:	1b64      	subs	r4, r4, r5
 8018f0e:	10a4      	asrs	r4, r4, #2
 8018f10:	2600      	movs	r6, #0
 8018f12:	42a6      	cmp	r6, r4
 8018f14:	d105      	bne.n	8018f22 <__libc_init_array+0x2e>
 8018f16:	bd70      	pop	{r4, r5, r6, pc}
 8018f18:	f855 3b04 	ldr.w	r3, [r5], #4
 8018f1c:	4798      	blx	r3
 8018f1e:	3601      	adds	r6, #1
 8018f20:	e7ee      	b.n	8018f00 <__libc_init_array+0xc>
 8018f22:	f855 3b04 	ldr.w	r3, [r5], #4
 8018f26:	4798      	blx	r3
 8018f28:	3601      	adds	r6, #1
 8018f2a:	e7f2      	b.n	8018f12 <__libc_init_array+0x1e>
 8018f2c:	0801d3c0 	.word	0x0801d3c0
 8018f30:	0801d3c0 	.word	0x0801d3c0
 8018f34:	0801d3c0 	.word	0x0801d3c0
 8018f38:	0801d3c4 	.word	0x0801d3c4

08018f3c <malloc>:
 8018f3c:	4b02      	ldr	r3, [pc, #8]	; (8018f48 <malloc+0xc>)
 8018f3e:	4601      	mov	r1, r0
 8018f40:	6818      	ldr	r0, [r3, #0]
 8018f42:	f000 b895 	b.w	8019070 <_malloc_r>
 8018f46:	bf00      	nop
 8018f48:	20000020 	.word	0x20000020

08018f4c <memcmp>:
 8018f4c:	b510      	push	{r4, lr}
 8018f4e:	3901      	subs	r1, #1
 8018f50:	4402      	add	r2, r0
 8018f52:	4290      	cmp	r0, r2
 8018f54:	d101      	bne.n	8018f5a <memcmp+0xe>
 8018f56:	2000      	movs	r0, #0
 8018f58:	e005      	b.n	8018f66 <memcmp+0x1a>
 8018f5a:	7803      	ldrb	r3, [r0, #0]
 8018f5c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8018f60:	42a3      	cmp	r3, r4
 8018f62:	d001      	beq.n	8018f68 <memcmp+0x1c>
 8018f64:	1b18      	subs	r0, r3, r4
 8018f66:	bd10      	pop	{r4, pc}
 8018f68:	3001      	adds	r0, #1
 8018f6a:	e7f2      	b.n	8018f52 <memcmp+0x6>

08018f6c <memcpy>:
 8018f6c:	440a      	add	r2, r1
 8018f6e:	4291      	cmp	r1, r2
 8018f70:	f100 33ff 	add.w	r3, r0, #4294967295
 8018f74:	d100      	bne.n	8018f78 <memcpy+0xc>
 8018f76:	4770      	bx	lr
 8018f78:	b510      	push	{r4, lr}
 8018f7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018f7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018f82:	4291      	cmp	r1, r2
 8018f84:	d1f9      	bne.n	8018f7a <memcpy+0xe>
 8018f86:	bd10      	pop	{r4, pc}

08018f88 <memset>:
 8018f88:	4402      	add	r2, r0
 8018f8a:	4603      	mov	r3, r0
 8018f8c:	4293      	cmp	r3, r2
 8018f8e:	d100      	bne.n	8018f92 <memset+0xa>
 8018f90:	4770      	bx	lr
 8018f92:	f803 1b01 	strb.w	r1, [r3], #1
 8018f96:	e7f9      	b.n	8018f8c <memset+0x4>

08018f98 <_free_r>:
 8018f98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018f9a:	2900      	cmp	r1, #0
 8018f9c:	d044      	beq.n	8019028 <_free_r+0x90>
 8018f9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018fa2:	9001      	str	r0, [sp, #4]
 8018fa4:	2b00      	cmp	r3, #0
 8018fa6:	f1a1 0404 	sub.w	r4, r1, #4
 8018faa:	bfb8      	it	lt
 8018fac:	18e4      	addlt	r4, r4, r3
 8018fae:	f001 f813 	bl	8019fd8 <__malloc_lock>
 8018fb2:	4a1e      	ldr	r2, [pc, #120]	; (801902c <_free_r+0x94>)
 8018fb4:	9801      	ldr	r0, [sp, #4]
 8018fb6:	6813      	ldr	r3, [r2, #0]
 8018fb8:	b933      	cbnz	r3, 8018fc8 <_free_r+0x30>
 8018fba:	6063      	str	r3, [r4, #4]
 8018fbc:	6014      	str	r4, [r2, #0]
 8018fbe:	b003      	add	sp, #12
 8018fc0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018fc4:	f001 b80e 	b.w	8019fe4 <__malloc_unlock>
 8018fc8:	42a3      	cmp	r3, r4
 8018fca:	d908      	bls.n	8018fde <_free_r+0x46>
 8018fcc:	6825      	ldr	r5, [r4, #0]
 8018fce:	1961      	adds	r1, r4, r5
 8018fd0:	428b      	cmp	r3, r1
 8018fd2:	bf01      	itttt	eq
 8018fd4:	6819      	ldreq	r1, [r3, #0]
 8018fd6:	685b      	ldreq	r3, [r3, #4]
 8018fd8:	1949      	addeq	r1, r1, r5
 8018fda:	6021      	streq	r1, [r4, #0]
 8018fdc:	e7ed      	b.n	8018fba <_free_r+0x22>
 8018fde:	461a      	mov	r2, r3
 8018fe0:	685b      	ldr	r3, [r3, #4]
 8018fe2:	b10b      	cbz	r3, 8018fe8 <_free_r+0x50>
 8018fe4:	42a3      	cmp	r3, r4
 8018fe6:	d9fa      	bls.n	8018fde <_free_r+0x46>
 8018fe8:	6811      	ldr	r1, [r2, #0]
 8018fea:	1855      	adds	r5, r2, r1
 8018fec:	42a5      	cmp	r5, r4
 8018fee:	d10b      	bne.n	8019008 <_free_r+0x70>
 8018ff0:	6824      	ldr	r4, [r4, #0]
 8018ff2:	4421      	add	r1, r4
 8018ff4:	1854      	adds	r4, r2, r1
 8018ff6:	42a3      	cmp	r3, r4
 8018ff8:	6011      	str	r1, [r2, #0]
 8018ffa:	d1e0      	bne.n	8018fbe <_free_r+0x26>
 8018ffc:	681c      	ldr	r4, [r3, #0]
 8018ffe:	685b      	ldr	r3, [r3, #4]
 8019000:	6053      	str	r3, [r2, #4]
 8019002:	4421      	add	r1, r4
 8019004:	6011      	str	r1, [r2, #0]
 8019006:	e7da      	b.n	8018fbe <_free_r+0x26>
 8019008:	d902      	bls.n	8019010 <_free_r+0x78>
 801900a:	230c      	movs	r3, #12
 801900c:	6003      	str	r3, [r0, #0]
 801900e:	e7d6      	b.n	8018fbe <_free_r+0x26>
 8019010:	6825      	ldr	r5, [r4, #0]
 8019012:	1961      	adds	r1, r4, r5
 8019014:	428b      	cmp	r3, r1
 8019016:	bf04      	itt	eq
 8019018:	6819      	ldreq	r1, [r3, #0]
 801901a:	685b      	ldreq	r3, [r3, #4]
 801901c:	6063      	str	r3, [r4, #4]
 801901e:	bf04      	itt	eq
 8019020:	1949      	addeq	r1, r1, r5
 8019022:	6021      	streq	r1, [r4, #0]
 8019024:	6054      	str	r4, [r2, #4]
 8019026:	e7ca      	b.n	8018fbe <_free_r+0x26>
 8019028:	b003      	add	sp, #12
 801902a:	bd30      	pop	{r4, r5, pc}
 801902c:	20013984 	.word	0x20013984

08019030 <sbrk_aligned>:
 8019030:	b570      	push	{r4, r5, r6, lr}
 8019032:	4e0e      	ldr	r6, [pc, #56]	; (801906c <sbrk_aligned+0x3c>)
 8019034:	460c      	mov	r4, r1
 8019036:	6831      	ldr	r1, [r6, #0]
 8019038:	4605      	mov	r5, r0
 801903a:	b911      	cbnz	r1, 8019042 <sbrk_aligned+0x12>
 801903c:	f000 fc46 	bl	80198cc <_sbrk_r>
 8019040:	6030      	str	r0, [r6, #0]
 8019042:	4621      	mov	r1, r4
 8019044:	4628      	mov	r0, r5
 8019046:	f000 fc41 	bl	80198cc <_sbrk_r>
 801904a:	1c43      	adds	r3, r0, #1
 801904c:	d00a      	beq.n	8019064 <sbrk_aligned+0x34>
 801904e:	1cc4      	adds	r4, r0, #3
 8019050:	f024 0403 	bic.w	r4, r4, #3
 8019054:	42a0      	cmp	r0, r4
 8019056:	d007      	beq.n	8019068 <sbrk_aligned+0x38>
 8019058:	1a21      	subs	r1, r4, r0
 801905a:	4628      	mov	r0, r5
 801905c:	f000 fc36 	bl	80198cc <_sbrk_r>
 8019060:	3001      	adds	r0, #1
 8019062:	d101      	bne.n	8019068 <sbrk_aligned+0x38>
 8019064:	f04f 34ff 	mov.w	r4, #4294967295
 8019068:	4620      	mov	r0, r4
 801906a:	bd70      	pop	{r4, r5, r6, pc}
 801906c:	20013988 	.word	0x20013988

08019070 <_malloc_r>:
 8019070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019074:	1ccd      	adds	r5, r1, #3
 8019076:	f025 0503 	bic.w	r5, r5, #3
 801907a:	3508      	adds	r5, #8
 801907c:	2d0c      	cmp	r5, #12
 801907e:	bf38      	it	cc
 8019080:	250c      	movcc	r5, #12
 8019082:	2d00      	cmp	r5, #0
 8019084:	4607      	mov	r7, r0
 8019086:	db01      	blt.n	801908c <_malloc_r+0x1c>
 8019088:	42a9      	cmp	r1, r5
 801908a:	d905      	bls.n	8019098 <_malloc_r+0x28>
 801908c:	230c      	movs	r3, #12
 801908e:	603b      	str	r3, [r7, #0]
 8019090:	2600      	movs	r6, #0
 8019092:	4630      	mov	r0, r6
 8019094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019098:	4e2e      	ldr	r6, [pc, #184]	; (8019154 <_malloc_r+0xe4>)
 801909a:	f000 ff9d 	bl	8019fd8 <__malloc_lock>
 801909e:	6833      	ldr	r3, [r6, #0]
 80190a0:	461c      	mov	r4, r3
 80190a2:	bb34      	cbnz	r4, 80190f2 <_malloc_r+0x82>
 80190a4:	4629      	mov	r1, r5
 80190a6:	4638      	mov	r0, r7
 80190a8:	f7ff ffc2 	bl	8019030 <sbrk_aligned>
 80190ac:	1c43      	adds	r3, r0, #1
 80190ae:	4604      	mov	r4, r0
 80190b0:	d14d      	bne.n	801914e <_malloc_r+0xde>
 80190b2:	6834      	ldr	r4, [r6, #0]
 80190b4:	4626      	mov	r6, r4
 80190b6:	2e00      	cmp	r6, #0
 80190b8:	d140      	bne.n	801913c <_malloc_r+0xcc>
 80190ba:	6823      	ldr	r3, [r4, #0]
 80190bc:	4631      	mov	r1, r6
 80190be:	4638      	mov	r0, r7
 80190c0:	eb04 0803 	add.w	r8, r4, r3
 80190c4:	f000 fc02 	bl	80198cc <_sbrk_r>
 80190c8:	4580      	cmp	r8, r0
 80190ca:	d13a      	bne.n	8019142 <_malloc_r+0xd2>
 80190cc:	6821      	ldr	r1, [r4, #0]
 80190ce:	3503      	adds	r5, #3
 80190d0:	1a6d      	subs	r5, r5, r1
 80190d2:	f025 0503 	bic.w	r5, r5, #3
 80190d6:	3508      	adds	r5, #8
 80190d8:	2d0c      	cmp	r5, #12
 80190da:	bf38      	it	cc
 80190dc:	250c      	movcc	r5, #12
 80190de:	4629      	mov	r1, r5
 80190e0:	4638      	mov	r0, r7
 80190e2:	f7ff ffa5 	bl	8019030 <sbrk_aligned>
 80190e6:	3001      	adds	r0, #1
 80190e8:	d02b      	beq.n	8019142 <_malloc_r+0xd2>
 80190ea:	6823      	ldr	r3, [r4, #0]
 80190ec:	442b      	add	r3, r5
 80190ee:	6023      	str	r3, [r4, #0]
 80190f0:	e00e      	b.n	8019110 <_malloc_r+0xa0>
 80190f2:	6822      	ldr	r2, [r4, #0]
 80190f4:	1b52      	subs	r2, r2, r5
 80190f6:	d41e      	bmi.n	8019136 <_malloc_r+0xc6>
 80190f8:	2a0b      	cmp	r2, #11
 80190fa:	d916      	bls.n	801912a <_malloc_r+0xba>
 80190fc:	1961      	adds	r1, r4, r5
 80190fe:	42a3      	cmp	r3, r4
 8019100:	6025      	str	r5, [r4, #0]
 8019102:	bf18      	it	ne
 8019104:	6059      	strne	r1, [r3, #4]
 8019106:	6863      	ldr	r3, [r4, #4]
 8019108:	bf08      	it	eq
 801910a:	6031      	streq	r1, [r6, #0]
 801910c:	5162      	str	r2, [r4, r5]
 801910e:	604b      	str	r3, [r1, #4]
 8019110:	4638      	mov	r0, r7
 8019112:	f104 060b 	add.w	r6, r4, #11
 8019116:	f000 ff65 	bl	8019fe4 <__malloc_unlock>
 801911a:	f026 0607 	bic.w	r6, r6, #7
 801911e:	1d23      	adds	r3, r4, #4
 8019120:	1af2      	subs	r2, r6, r3
 8019122:	d0b6      	beq.n	8019092 <_malloc_r+0x22>
 8019124:	1b9b      	subs	r3, r3, r6
 8019126:	50a3      	str	r3, [r4, r2]
 8019128:	e7b3      	b.n	8019092 <_malloc_r+0x22>
 801912a:	6862      	ldr	r2, [r4, #4]
 801912c:	42a3      	cmp	r3, r4
 801912e:	bf0c      	ite	eq
 8019130:	6032      	streq	r2, [r6, #0]
 8019132:	605a      	strne	r2, [r3, #4]
 8019134:	e7ec      	b.n	8019110 <_malloc_r+0xa0>
 8019136:	4623      	mov	r3, r4
 8019138:	6864      	ldr	r4, [r4, #4]
 801913a:	e7b2      	b.n	80190a2 <_malloc_r+0x32>
 801913c:	4634      	mov	r4, r6
 801913e:	6876      	ldr	r6, [r6, #4]
 8019140:	e7b9      	b.n	80190b6 <_malloc_r+0x46>
 8019142:	230c      	movs	r3, #12
 8019144:	603b      	str	r3, [r7, #0]
 8019146:	4638      	mov	r0, r7
 8019148:	f000 ff4c 	bl	8019fe4 <__malloc_unlock>
 801914c:	e7a1      	b.n	8019092 <_malloc_r+0x22>
 801914e:	6025      	str	r5, [r4, #0]
 8019150:	e7de      	b.n	8019110 <_malloc_r+0xa0>
 8019152:	bf00      	nop
 8019154:	20013984 	.word	0x20013984

08019158 <__sfputc_r>:
 8019158:	6893      	ldr	r3, [r2, #8]
 801915a:	3b01      	subs	r3, #1
 801915c:	2b00      	cmp	r3, #0
 801915e:	b410      	push	{r4}
 8019160:	6093      	str	r3, [r2, #8]
 8019162:	da08      	bge.n	8019176 <__sfputc_r+0x1e>
 8019164:	6994      	ldr	r4, [r2, #24]
 8019166:	42a3      	cmp	r3, r4
 8019168:	db01      	blt.n	801916e <__sfputc_r+0x16>
 801916a:	290a      	cmp	r1, #10
 801916c:	d103      	bne.n	8019176 <__sfputc_r+0x1e>
 801916e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019172:	f000 bbff 	b.w	8019974 <__swbuf_r>
 8019176:	6813      	ldr	r3, [r2, #0]
 8019178:	1c58      	adds	r0, r3, #1
 801917a:	6010      	str	r0, [r2, #0]
 801917c:	7019      	strb	r1, [r3, #0]
 801917e:	4608      	mov	r0, r1
 8019180:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019184:	4770      	bx	lr

08019186 <__sfputs_r>:
 8019186:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019188:	4606      	mov	r6, r0
 801918a:	460f      	mov	r7, r1
 801918c:	4614      	mov	r4, r2
 801918e:	18d5      	adds	r5, r2, r3
 8019190:	42ac      	cmp	r4, r5
 8019192:	d101      	bne.n	8019198 <__sfputs_r+0x12>
 8019194:	2000      	movs	r0, #0
 8019196:	e007      	b.n	80191a8 <__sfputs_r+0x22>
 8019198:	f814 1b01 	ldrb.w	r1, [r4], #1
 801919c:	463a      	mov	r2, r7
 801919e:	4630      	mov	r0, r6
 80191a0:	f7ff ffda 	bl	8019158 <__sfputc_r>
 80191a4:	1c43      	adds	r3, r0, #1
 80191a6:	d1f3      	bne.n	8019190 <__sfputs_r+0xa>
 80191a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080191ac <_vfiprintf_r>:
 80191ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80191b0:	460d      	mov	r5, r1
 80191b2:	b09d      	sub	sp, #116	; 0x74
 80191b4:	4614      	mov	r4, r2
 80191b6:	4698      	mov	r8, r3
 80191b8:	4606      	mov	r6, r0
 80191ba:	b118      	cbz	r0, 80191c4 <_vfiprintf_r+0x18>
 80191bc:	6983      	ldr	r3, [r0, #24]
 80191be:	b90b      	cbnz	r3, 80191c4 <_vfiprintf_r+0x18>
 80191c0:	f000 fdf2 	bl	8019da8 <__sinit>
 80191c4:	4b89      	ldr	r3, [pc, #548]	; (80193ec <_vfiprintf_r+0x240>)
 80191c6:	429d      	cmp	r5, r3
 80191c8:	d11b      	bne.n	8019202 <_vfiprintf_r+0x56>
 80191ca:	6875      	ldr	r5, [r6, #4]
 80191cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80191ce:	07d9      	lsls	r1, r3, #31
 80191d0:	d405      	bmi.n	80191de <_vfiprintf_r+0x32>
 80191d2:	89ab      	ldrh	r3, [r5, #12]
 80191d4:	059a      	lsls	r2, r3, #22
 80191d6:	d402      	bmi.n	80191de <_vfiprintf_r+0x32>
 80191d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80191da:	f000 fe83 	bl	8019ee4 <__retarget_lock_acquire_recursive>
 80191de:	89ab      	ldrh	r3, [r5, #12]
 80191e0:	071b      	lsls	r3, r3, #28
 80191e2:	d501      	bpl.n	80191e8 <_vfiprintf_r+0x3c>
 80191e4:	692b      	ldr	r3, [r5, #16]
 80191e6:	b9eb      	cbnz	r3, 8019224 <_vfiprintf_r+0x78>
 80191e8:	4629      	mov	r1, r5
 80191ea:	4630      	mov	r0, r6
 80191ec:	f000 fc26 	bl	8019a3c <__swsetup_r>
 80191f0:	b1c0      	cbz	r0, 8019224 <_vfiprintf_r+0x78>
 80191f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80191f4:	07dc      	lsls	r4, r3, #31
 80191f6:	d50e      	bpl.n	8019216 <_vfiprintf_r+0x6a>
 80191f8:	f04f 30ff 	mov.w	r0, #4294967295
 80191fc:	b01d      	add	sp, #116	; 0x74
 80191fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019202:	4b7b      	ldr	r3, [pc, #492]	; (80193f0 <_vfiprintf_r+0x244>)
 8019204:	429d      	cmp	r5, r3
 8019206:	d101      	bne.n	801920c <_vfiprintf_r+0x60>
 8019208:	68b5      	ldr	r5, [r6, #8]
 801920a:	e7df      	b.n	80191cc <_vfiprintf_r+0x20>
 801920c:	4b79      	ldr	r3, [pc, #484]	; (80193f4 <_vfiprintf_r+0x248>)
 801920e:	429d      	cmp	r5, r3
 8019210:	bf08      	it	eq
 8019212:	68f5      	ldreq	r5, [r6, #12]
 8019214:	e7da      	b.n	80191cc <_vfiprintf_r+0x20>
 8019216:	89ab      	ldrh	r3, [r5, #12]
 8019218:	0598      	lsls	r0, r3, #22
 801921a:	d4ed      	bmi.n	80191f8 <_vfiprintf_r+0x4c>
 801921c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801921e:	f000 fe62 	bl	8019ee6 <__retarget_lock_release_recursive>
 8019222:	e7e9      	b.n	80191f8 <_vfiprintf_r+0x4c>
 8019224:	2300      	movs	r3, #0
 8019226:	9309      	str	r3, [sp, #36]	; 0x24
 8019228:	2320      	movs	r3, #32
 801922a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801922e:	f8cd 800c 	str.w	r8, [sp, #12]
 8019232:	2330      	movs	r3, #48	; 0x30
 8019234:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80193f8 <_vfiprintf_r+0x24c>
 8019238:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801923c:	f04f 0901 	mov.w	r9, #1
 8019240:	4623      	mov	r3, r4
 8019242:	469a      	mov	sl, r3
 8019244:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019248:	b10a      	cbz	r2, 801924e <_vfiprintf_r+0xa2>
 801924a:	2a25      	cmp	r2, #37	; 0x25
 801924c:	d1f9      	bne.n	8019242 <_vfiprintf_r+0x96>
 801924e:	ebba 0b04 	subs.w	fp, sl, r4
 8019252:	d00b      	beq.n	801926c <_vfiprintf_r+0xc0>
 8019254:	465b      	mov	r3, fp
 8019256:	4622      	mov	r2, r4
 8019258:	4629      	mov	r1, r5
 801925a:	4630      	mov	r0, r6
 801925c:	f7ff ff93 	bl	8019186 <__sfputs_r>
 8019260:	3001      	adds	r0, #1
 8019262:	f000 80aa 	beq.w	80193ba <_vfiprintf_r+0x20e>
 8019266:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019268:	445a      	add	r2, fp
 801926a:	9209      	str	r2, [sp, #36]	; 0x24
 801926c:	f89a 3000 	ldrb.w	r3, [sl]
 8019270:	2b00      	cmp	r3, #0
 8019272:	f000 80a2 	beq.w	80193ba <_vfiprintf_r+0x20e>
 8019276:	2300      	movs	r3, #0
 8019278:	f04f 32ff 	mov.w	r2, #4294967295
 801927c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019280:	f10a 0a01 	add.w	sl, sl, #1
 8019284:	9304      	str	r3, [sp, #16]
 8019286:	9307      	str	r3, [sp, #28]
 8019288:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801928c:	931a      	str	r3, [sp, #104]	; 0x68
 801928e:	4654      	mov	r4, sl
 8019290:	2205      	movs	r2, #5
 8019292:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019296:	4858      	ldr	r0, [pc, #352]	; (80193f8 <_vfiprintf_r+0x24c>)
 8019298:	f7e6 ff9a 	bl	80001d0 <memchr>
 801929c:	9a04      	ldr	r2, [sp, #16]
 801929e:	b9d8      	cbnz	r0, 80192d8 <_vfiprintf_r+0x12c>
 80192a0:	06d1      	lsls	r1, r2, #27
 80192a2:	bf44      	itt	mi
 80192a4:	2320      	movmi	r3, #32
 80192a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80192aa:	0713      	lsls	r3, r2, #28
 80192ac:	bf44      	itt	mi
 80192ae:	232b      	movmi	r3, #43	; 0x2b
 80192b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80192b4:	f89a 3000 	ldrb.w	r3, [sl]
 80192b8:	2b2a      	cmp	r3, #42	; 0x2a
 80192ba:	d015      	beq.n	80192e8 <_vfiprintf_r+0x13c>
 80192bc:	9a07      	ldr	r2, [sp, #28]
 80192be:	4654      	mov	r4, sl
 80192c0:	2000      	movs	r0, #0
 80192c2:	f04f 0c0a 	mov.w	ip, #10
 80192c6:	4621      	mov	r1, r4
 80192c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80192cc:	3b30      	subs	r3, #48	; 0x30
 80192ce:	2b09      	cmp	r3, #9
 80192d0:	d94e      	bls.n	8019370 <_vfiprintf_r+0x1c4>
 80192d2:	b1b0      	cbz	r0, 8019302 <_vfiprintf_r+0x156>
 80192d4:	9207      	str	r2, [sp, #28]
 80192d6:	e014      	b.n	8019302 <_vfiprintf_r+0x156>
 80192d8:	eba0 0308 	sub.w	r3, r0, r8
 80192dc:	fa09 f303 	lsl.w	r3, r9, r3
 80192e0:	4313      	orrs	r3, r2
 80192e2:	9304      	str	r3, [sp, #16]
 80192e4:	46a2      	mov	sl, r4
 80192e6:	e7d2      	b.n	801928e <_vfiprintf_r+0xe2>
 80192e8:	9b03      	ldr	r3, [sp, #12]
 80192ea:	1d19      	adds	r1, r3, #4
 80192ec:	681b      	ldr	r3, [r3, #0]
 80192ee:	9103      	str	r1, [sp, #12]
 80192f0:	2b00      	cmp	r3, #0
 80192f2:	bfbb      	ittet	lt
 80192f4:	425b      	neglt	r3, r3
 80192f6:	f042 0202 	orrlt.w	r2, r2, #2
 80192fa:	9307      	strge	r3, [sp, #28]
 80192fc:	9307      	strlt	r3, [sp, #28]
 80192fe:	bfb8      	it	lt
 8019300:	9204      	strlt	r2, [sp, #16]
 8019302:	7823      	ldrb	r3, [r4, #0]
 8019304:	2b2e      	cmp	r3, #46	; 0x2e
 8019306:	d10c      	bne.n	8019322 <_vfiprintf_r+0x176>
 8019308:	7863      	ldrb	r3, [r4, #1]
 801930a:	2b2a      	cmp	r3, #42	; 0x2a
 801930c:	d135      	bne.n	801937a <_vfiprintf_r+0x1ce>
 801930e:	9b03      	ldr	r3, [sp, #12]
 8019310:	1d1a      	adds	r2, r3, #4
 8019312:	681b      	ldr	r3, [r3, #0]
 8019314:	9203      	str	r2, [sp, #12]
 8019316:	2b00      	cmp	r3, #0
 8019318:	bfb8      	it	lt
 801931a:	f04f 33ff 	movlt.w	r3, #4294967295
 801931e:	3402      	adds	r4, #2
 8019320:	9305      	str	r3, [sp, #20]
 8019322:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8019408 <_vfiprintf_r+0x25c>
 8019326:	7821      	ldrb	r1, [r4, #0]
 8019328:	2203      	movs	r2, #3
 801932a:	4650      	mov	r0, sl
 801932c:	f7e6 ff50 	bl	80001d0 <memchr>
 8019330:	b140      	cbz	r0, 8019344 <_vfiprintf_r+0x198>
 8019332:	2340      	movs	r3, #64	; 0x40
 8019334:	eba0 000a 	sub.w	r0, r0, sl
 8019338:	fa03 f000 	lsl.w	r0, r3, r0
 801933c:	9b04      	ldr	r3, [sp, #16]
 801933e:	4303      	orrs	r3, r0
 8019340:	3401      	adds	r4, #1
 8019342:	9304      	str	r3, [sp, #16]
 8019344:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019348:	482c      	ldr	r0, [pc, #176]	; (80193fc <_vfiprintf_r+0x250>)
 801934a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801934e:	2206      	movs	r2, #6
 8019350:	f7e6 ff3e 	bl	80001d0 <memchr>
 8019354:	2800      	cmp	r0, #0
 8019356:	d03f      	beq.n	80193d8 <_vfiprintf_r+0x22c>
 8019358:	4b29      	ldr	r3, [pc, #164]	; (8019400 <_vfiprintf_r+0x254>)
 801935a:	bb1b      	cbnz	r3, 80193a4 <_vfiprintf_r+0x1f8>
 801935c:	9b03      	ldr	r3, [sp, #12]
 801935e:	3307      	adds	r3, #7
 8019360:	f023 0307 	bic.w	r3, r3, #7
 8019364:	3308      	adds	r3, #8
 8019366:	9303      	str	r3, [sp, #12]
 8019368:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801936a:	443b      	add	r3, r7
 801936c:	9309      	str	r3, [sp, #36]	; 0x24
 801936e:	e767      	b.n	8019240 <_vfiprintf_r+0x94>
 8019370:	fb0c 3202 	mla	r2, ip, r2, r3
 8019374:	460c      	mov	r4, r1
 8019376:	2001      	movs	r0, #1
 8019378:	e7a5      	b.n	80192c6 <_vfiprintf_r+0x11a>
 801937a:	2300      	movs	r3, #0
 801937c:	3401      	adds	r4, #1
 801937e:	9305      	str	r3, [sp, #20]
 8019380:	4619      	mov	r1, r3
 8019382:	f04f 0c0a 	mov.w	ip, #10
 8019386:	4620      	mov	r0, r4
 8019388:	f810 2b01 	ldrb.w	r2, [r0], #1
 801938c:	3a30      	subs	r2, #48	; 0x30
 801938e:	2a09      	cmp	r2, #9
 8019390:	d903      	bls.n	801939a <_vfiprintf_r+0x1ee>
 8019392:	2b00      	cmp	r3, #0
 8019394:	d0c5      	beq.n	8019322 <_vfiprintf_r+0x176>
 8019396:	9105      	str	r1, [sp, #20]
 8019398:	e7c3      	b.n	8019322 <_vfiprintf_r+0x176>
 801939a:	fb0c 2101 	mla	r1, ip, r1, r2
 801939e:	4604      	mov	r4, r0
 80193a0:	2301      	movs	r3, #1
 80193a2:	e7f0      	b.n	8019386 <_vfiprintf_r+0x1da>
 80193a4:	ab03      	add	r3, sp, #12
 80193a6:	9300      	str	r3, [sp, #0]
 80193a8:	462a      	mov	r2, r5
 80193aa:	4b16      	ldr	r3, [pc, #88]	; (8019404 <_vfiprintf_r+0x258>)
 80193ac:	a904      	add	r1, sp, #16
 80193ae:	4630      	mov	r0, r6
 80193b0:	f3af 8000 	nop.w
 80193b4:	4607      	mov	r7, r0
 80193b6:	1c78      	adds	r0, r7, #1
 80193b8:	d1d6      	bne.n	8019368 <_vfiprintf_r+0x1bc>
 80193ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80193bc:	07d9      	lsls	r1, r3, #31
 80193be:	d405      	bmi.n	80193cc <_vfiprintf_r+0x220>
 80193c0:	89ab      	ldrh	r3, [r5, #12]
 80193c2:	059a      	lsls	r2, r3, #22
 80193c4:	d402      	bmi.n	80193cc <_vfiprintf_r+0x220>
 80193c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80193c8:	f000 fd8d 	bl	8019ee6 <__retarget_lock_release_recursive>
 80193cc:	89ab      	ldrh	r3, [r5, #12]
 80193ce:	065b      	lsls	r3, r3, #25
 80193d0:	f53f af12 	bmi.w	80191f8 <_vfiprintf_r+0x4c>
 80193d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80193d6:	e711      	b.n	80191fc <_vfiprintf_r+0x50>
 80193d8:	ab03      	add	r3, sp, #12
 80193da:	9300      	str	r3, [sp, #0]
 80193dc:	462a      	mov	r2, r5
 80193de:	4b09      	ldr	r3, [pc, #36]	; (8019404 <_vfiprintf_r+0x258>)
 80193e0:	a904      	add	r1, sp, #16
 80193e2:	4630      	mov	r0, r6
 80193e4:	f000 f880 	bl	80194e8 <_printf_i>
 80193e8:	e7e4      	b.n	80193b4 <_vfiprintf_r+0x208>
 80193ea:	bf00      	nop
 80193ec:	0801d378 	.word	0x0801d378
 80193f0:	0801d398 	.word	0x0801d398
 80193f4:	0801d358 	.word	0x0801d358
 80193f8:	0801d274 	.word	0x0801d274
 80193fc:	0801d27e 	.word	0x0801d27e
 8019400:	00000000 	.word	0x00000000
 8019404:	08019187 	.word	0x08019187
 8019408:	0801d27a 	.word	0x0801d27a

0801940c <_printf_common>:
 801940c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019410:	4616      	mov	r6, r2
 8019412:	4699      	mov	r9, r3
 8019414:	688a      	ldr	r2, [r1, #8]
 8019416:	690b      	ldr	r3, [r1, #16]
 8019418:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801941c:	4293      	cmp	r3, r2
 801941e:	bfb8      	it	lt
 8019420:	4613      	movlt	r3, r2
 8019422:	6033      	str	r3, [r6, #0]
 8019424:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8019428:	4607      	mov	r7, r0
 801942a:	460c      	mov	r4, r1
 801942c:	b10a      	cbz	r2, 8019432 <_printf_common+0x26>
 801942e:	3301      	adds	r3, #1
 8019430:	6033      	str	r3, [r6, #0]
 8019432:	6823      	ldr	r3, [r4, #0]
 8019434:	0699      	lsls	r1, r3, #26
 8019436:	bf42      	ittt	mi
 8019438:	6833      	ldrmi	r3, [r6, #0]
 801943a:	3302      	addmi	r3, #2
 801943c:	6033      	strmi	r3, [r6, #0]
 801943e:	6825      	ldr	r5, [r4, #0]
 8019440:	f015 0506 	ands.w	r5, r5, #6
 8019444:	d106      	bne.n	8019454 <_printf_common+0x48>
 8019446:	f104 0a19 	add.w	sl, r4, #25
 801944a:	68e3      	ldr	r3, [r4, #12]
 801944c:	6832      	ldr	r2, [r6, #0]
 801944e:	1a9b      	subs	r3, r3, r2
 8019450:	42ab      	cmp	r3, r5
 8019452:	dc26      	bgt.n	80194a2 <_printf_common+0x96>
 8019454:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8019458:	1e13      	subs	r3, r2, #0
 801945a:	6822      	ldr	r2, [r4, #0]
 801945c:	bf18      	it	ne
 801945e:	2301      	movne	r3, #1
 8019460:	0692      	lsls	r2, r2, #26
 8019462:	d42b      	bmi.n	80194bc <_printf_common+0xb0>
 8019464:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019468:	4649      	mov	r1, r9
 801946a:	4638      	mov	r0, r7
 801946c:	47c0      	blx	r8
 801946e:	3001      	adds	r0, #1
 8019470:	d01e      	beq.n	80194b0 <_printf_common+0xa4>
 8019472:	6823      	ldr	r3, [r4, #0]
 8019474:	68e5      	ldr	r5, [r4, #12]
 8019476:	6832      	ldr	r2, [r6, #0]
 8019478:	f003 0306 	and.w	r3, r3, #6
 801947c:	2b04      	cmp	r3, #4
 801947e:	bf08      	it	eq
 8019480:	1aad      	subeq	r5, r5, r2
 8019482:	68a3      	ldr	r3, [r4, #8]
 8019484:	6922      	ldr	r2, [r4, #16]
 8019486:	bf0c      	ite	eq
 8019488:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801948c:	2500      	movne	r5, #0
 801948e:	4293      	cmp	r3, r2
 8019490:	bfc4      	itt	gt
 8019492:	1a9b      	subgt	r3, r3, r2
 8019494:	18ed      	addgt	r5, r5, r3
 8019496:	2600      	movs	r6, #0
 8019498:	341a      	adds	r4, #26
 801949a:	42b5      	cmp	r5, r6
 801949c:	d11a      	bne.n	80194d4 <_printf_common+0xc8>
 801949e:	2000      	movs	r0, #0
 80194a0:	e008      	b.n	80194b4 <_printf_common+0xa8>
 80194a2:	2301      	movs	r3, #1
 80194a4:	4652      	mov	r2, sl
 80194a6:	4649      	mov	r1, r9
 80194a8:	4638      	mov	r0, r7
 80194aa:	47c0      	blx	r8
 80194ac:	3001      	adds	r0, #1
 80194ae:	d103      	bne.n	80194b8 <_printf_common+0xac>
 80194b0:	f04f 30ff 	mov.w	r0, #4294967295
 80194b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80194b8:	3501      	adds	r5, #1
 80194ba:	e7c6      	b.n	801944a <_printf_common+0x3e>
 80194bc:	18e1      	adds	r1, r4, r3
 80194be:	1c5a      	adds	r2, r3, #1
 80194c0:	2030      	movs	r0, #48	; 0x30
 80194c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80194c6:	4422      	add	r2, r4
 80194c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80194cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80194d0:	3302      	adds	r3, #2
 80194d2:	e7c7      	b.n	8019464 <_printf_common+0x58>
 80194d4:	2301      	movs	r3, #1
 80194d6:	4622      	mov	r2, r4
 80194d8:	4649      	mov	r1, r9
 80194da:	4638      	mov	r0, r7
 80194dc:	47c0      	blx	r8
 80194de:	3001      	adds	r0, #1
 80194e0:	d0e6      	beq.n	80194b0 <_printf_common+0xa4>
 80194e2:	3601      	adds	r6, #1
 80194e4:	e7d9      	b.n	801949a <_printf_common+0x8e>
	...

080194e8 <_printf_i>:
 80194e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80194ec:	7e0f      	ldrb	r7, [r1, #24]
 80194ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80194f0:	2f78      	cmp	r7, #120	; 0x78
 80194f2:	4691      	mov	r9, r2
 80194f4:	4680      	mov	r8, r0
 80194f6:	460c      	mov	r4, r1
 80194f8:	469a      	mov	sl, r3
 80194fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80194fe:	d807      	bhi.n	8019510 <_printf_i+0x28>
 8019500:	2f62      	cmp	r7, #98	; 0x62
 8019502:	d80a      	bhi.n	801951a <_printf_i+0x32>
 8019504:	2f00      	cmp	r7, #0
 8019506:	f000 80d8 	beq.w	80196ba <_printf_i+0x1d2>
 801950a:	2f58      	cmp	r7, #88	; 0x58
 801950c:	f000 80a3 	beq.w	8019656 <_printf_i+0x16e>
 8019510:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019514:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8019518:	e03a      	b.n	8019590 <_printf_i+0xa8>
 801951a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801951e:	2b15      	cmp	r3, #21
 8019520:	d8f6      	bhi.n	8019510 <_printf_i+0x28>
 8019522:	a101      	add	r1, pc, #4	; (adr r1, 8019528 <_printf_i+0x40>)
 8019524:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019528:	08019581 	.word	0x08019581
 801952c:	08019595 	.word	0x08019595
 8019530:	08019511 	.word	0x08019511
 8019534:	08019511 	.word	0x08019511
 8019538:	08019511 	.word	0x08019511
 801953c:	08019511 	.word	0x08019511
 8019540:	08019595 	.word	0x08019595
 8019544:	08019511 	.word	0x08019511
 8019548:	08019511 	.word	0x08019511
 801954c:	08019511 	.word	0x08019511
 8019550:	08019511 	.word	0x08019511
 8019554:	080196a1 	.word	0x080196a1
 8019558:	080195c5 	.word	0x080195c5
 801955c:	08019683 	.word	0x08019683
 8019560:	08019511 	.word	0x08019511
 8019564:	08019511 	.word	0x08019511
 8019568:	080196c3 	.word	0x080196c3
 801956c:	08019511 	.word	0x08019511
 8019570:	080195c5 	.word	0x080195c5
 8019574:	08019511 	.word	0x08019511
 8019578:	08019511 	.word	0x08019511
 801957c:	0801968b 	.word	0x0801968b
 8019580:	682b      	ldr	r3, [r5, #0]
 8019582:	1d1a      	adds	r2, r3, #4
 8019584:	681b      	ldr	r3, [r3, #0]
 8019586:	602a      	str	r2, [r5, #0]
 8019588:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801958c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8019590:	2301      	movs	r3, #1
 8019592:	e0a3      	b.n	80196dc <_printf_i+0x1f4>
 8019594:	6820      	ldr	r0, [r4, #0]
 8019596:	6829      	ldr	r1, [r5, #0]
 8019598:	0606      	lsls	r6, r0, #24
 801959a:	f101 0304 	add.w	r3, r1, #4
 801959e:	d50a      	bpl.n	80195b6 <_printf_i+0xce>
 80195a0:	680e      	ldr	r6, [r1, #0]
 80195a2:	602b      	str	r3, [r5, #0]
 80195a4:	2e00      	cmp	r6, #0
 80195a6:	da03      	bge.n	80195b0 <_printf_i+0xc8>
 80195a8:	232d      	movs	r3, #45	; 0x2d
 80195aa:	4276      	negs	r6, r6
 80195ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80195b0:	485e      	ldr	r0, [pc, #376]	; (801972c <_printf_i+0x244>)
 80195b2:	230a      	movs	r3, #10
 80195b4:	e019      	b.n	80195ea <_printf_i+0x102>
 80195b6:	680e      	ldr	r6, [r1, #0]
 80195b8:	602b      	str	r3, [r5, #0]
 80195ba:	f010 0f40 	tst.w	r0, #64	; 0x40
 80195be:	bf18      	it	ne
 80195c0:	b236      	sxthne	r6, r6
 80195c2:	e7ef      	b.n	80195a4 <_printf_i+0xbc>
 80195c4:	682b      	ldr	r3, [r5, #0]
 80195c6:	6820      	ldr	r0, [r4, #0]
 80195c8:	1d19      	adds	r1, r3, #4
 80195ca:	6029      	str	r1, [r5, #0]
 80195cc:	0601      	lsls	r1, r0, #24
 80195ce:	d501      	bpl.n	80195d4 <_printf_i+0xec>
 80195d0:	681e      	ldr	r6, [r3, #0]
 80195d2:	e002      	b.n	80195da <_printf_i+0xf2>
 80195d4:	0646      	lsls	r6, r0, #25
 80195d6:	d5fb      	bpl.n	80195d0 <_printf_i+0xe8>
 80195d8:	881e      	ldrh	r6, [r3, #0]
 80195da:	4854      	ldr	r0, [pc, #336]	; (801972c <_printf_i+0x244>)
 80195dc:	2f6f      	cmp	r7, #111	; 0x6f
 80195de:	bf0c      	ite	eq
 80195e0:	2308      	moveq	r3, #8
 80195e2:	230a      	movne	r3, #10
 80195e4:	2100      	movs	r1, #0
 80195e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80195ea:	6865      	ldr	r5, [r4, #4]
 80195ec:	60a5      	str	r5, [r4, #8]
 80195ee:	2d00      	cmp	r5, #0
 80195f0:	bfa2      	ittt	ge
 80195f2:	6821      	ldrge	r1, [r4, #0]
 80195f4:	f021 0104 	bicge.w	r1, r1, #4
 80195f8:	6021      	strge	r1, [r4, #0]
 80195fa:	b90e      	cbnz	r6, 8019600 <_printf_i+0x118>
 80195fc:	2d00      	cmp	r5, #0
 80195fe:	d04d      	beq.n	801969c <_printf_i+0x1b4>
 8019600:	4615      	mov	r5, r2
 8019602:	fbb6 f1f3 	udiv	r1, r6, r3
 8019606:	fb03 6711 	mls	r7, r3, r1, r6
 801960a:	5dc7      	ldrb	r7, [r0, r7]
 801960c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8019610:	4637      	mov	r7, r6
 8019612:	42bb      	cmp	r3, r7
 8019614:	460e      	mov	r6, r1
 8019616:	d9f4      	bls.n	8019602 <_printf_i+0x11a>
 8019618:	2b08      	cmp	r3, #8
 801961a:	d10b      	bne.n	8019634 <_printf_i+0x14c>
 801961c:	6823      	ldr	r3, [r4, #0]
 801961e:	07de      	lsls	r6, r3, #31
 8019620:	d508      	bpl.n	8019634 <_printf_i+0x14c>
 8019622:	6923      	ldr	r3, [r4, #16]
 8019624:	6861      	ldr	r1, [r4, #4]
 8019626:	4299      	cmp	r1, r3
 8019628:	bfde      	ittt	le
 801962a:	2330      	movle	r3, #48	; 0x30
 801962c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8019630:	f105 35ff 	addle.w	r5, r5, #4294967295
 8019634:	1b52      	subs	r2, r2, r5
 8019636:	6122      	str	r2, [r4, #16]
 8019638:	f8cd a000 	str.w	sl, [sp]
 801963c:	464b      	mov	r3, r9
 801963e:	aa03      	add	r2, sp, #12
 8019640:	4621      	mov	r1, r4
 8019642:	4640      	mov	r0, r8
 8019644:	f7ff fee2 	bl	801940c <_printf_common>
 8019648:	3001      	adds	r0, #1
 801964a:	d14c      	bne.n	80196e6 <_printf_i+0x1fe>
 801964c:	f04f 30ff 	mov.w	r0, #4294967295
 8019650:	b004      	add	sp, #16
 8019652:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019656:	4835      	ldr	r0, [pc, #212]	; (801972c <_printf_i+0x244>)
 8019658:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801965c:	6829      	ldr	r1, [r5, #0]
 801965e:	6823      	ldr	r3, [r4, #0]
 8019660:	f851 6b04 	ldr.w	r6, [r1], #4
 8019664:	6029      	str	r1, [r5, #0]
 8019666:	061d      	lsls	r5, r3, #24
 8019668:	d514      	bpl.n	8019694 <_printf_i+0x1ac>
 801966a:	07df      	lsls	r7, r3, #31
 801966c:	bf44      	itt	mi
 801966e:	f043 0320 	orrmi.w	r3, r3, #32
 8019672:	6023      	strmi	r3, [r4, #0]
 8019674:	b91e      	cbnz	r6, 801967e <_printf_i+0x196>
 8019676:	6823      	ldr	r3, [r4, #0]
 8019678:	f023 0320 	bic.w	r3, r3, #32
 801967c:	6023      	str	r3, [r4, #0]
 801967e:	2310      	movs	r3, #16
 8019680:	e7b0      	b.n	80195e4 <_printf_i+0xfc>
 8019682:	6823      	ldr	r3, [r4, #0]
 8019684:	f043 0320 	orr.w	r3, r3, #32
 8019688:	6023      	str	r3, [r4, #0]
 801968a:	2378      	movs	r3, #120	; 0x78
 801968c:	4828      	ldr	r0, [pc, #160]	; (8019730 <_printf_i+0x248>)
 801968e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8019692:	e7e3      	b.n	801965c <_printf_i+0x174>
 8019694:	0659      	lsls	r1, r3, #25
 8019696:	bf48      	it	mi
 8019698:	b2b6      	uxthmi	r6, r6
 801969a:	e7e6      	b.n	801966a <_printf_i+0x182>
 801969c:	4615      	mov	r5, r2
 801969e:	e7bb      	b.n	8019618 <_printf_i+0x130>
 80196a0:	682b      	ldr	r3, [r5, #0]
 80196a2:	6826      	ldr	r6, [r4, #0]
 80196a4:	6961      	ldr	r1, [r4, #20]
 80196a6:	1d18      	adds	r0, r3, #4
 80196a8:	6028      	str	r0, [r5, #0]
 80196aa:	0635      	lsls	r5, r6, #24
 80196ac:	681b      	ldr	r3, [r3, #0]
 80196ae:	d501      	bpl.n	80196b4 <_printf_i+0x1cc>
 80196b0:	6019      	str	r1, [r3, #0]
 80196b2:	e002      	b.n	80196ba <_printf_i+0x1d2>
 80196b4:	0670      	lsls	r0, r6, #25
 80196b6:	d5fb      	bpl.n	80196b0 <_printf_i+0x1c8>
 80196b8:	8019      	strh	r1, [r3, #0]
 80196ba:	2300      	movs	r3, #0
 80196bc:	6123      	str	r3, [r4, #16]
 80196be:	4615      	mov	r5, r2
 80196c0:	e7ba      	b.n	8019638 <_printf_i+0x150>
 80196c2:	682b      	ldr	r3, [r5, #0]
 80196c4:	1d1a      	adds	r2, r3, #4
 80196c6:	602a      	str	r2, [r5, #0]
 80196c8:	681d      	ldr	r5, [r3, #0]
 80196ca:	6862      	ldr	r2, [r4, #4]
 80196cc:	2100      	movs	r1, #0
 80196ce:	4628      	mov	r0, r5
 80196d0:	f7e6 fd7e 	bl	80001d0 <memchr>
 80196d4:	b108      	cbz	r0, 80196da <_printf_i+0x1f2>
 80196d6:	1b40      	subs	r0, r0, r5
 80196d8:	6060      	str	r0, [r4, #4]
 80196da:	6863      	ldr	r3, [r4, #4]
 80196dc:	6123      	str	r3, [r4, #16]
 80196de:	2300      	movs	r3, #0
 80196e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80196e4:	e7a8      	b.n	8019638 <_printf_i+0x150>
 80196e6:	6923      	ldr	r3, [r4, #16]
 80196e8:	462a      	mov	r2, r5
 80196ea:	4649      	mov	r1, r9
 80196ec:	4640      	mov	r0, r8
 80196ee:	47d0      	blx	sl
 80196f0:	3001      	adds	r0, #1
 80196f2:	d0ab      	beq.n	801964c <_printf_i+0x164>
 80196f4:	6823      	ldr	r3, [r4, #0]
 80196f6:	079b      	lsls	r3, r3, #30
 80196f8:	d413      	bmi.n	8019722 <_printf_i+0x23a>
 80196fa:	68e0      	ldr	r0, [r4, #12]
 80196fc:	9b03      	ldr	r3, [sp, #12]
 80196fe:	4298      	cmp	r0, r3
 8019700:	bfb8      	it	lt
 8019702:	4618      	movlt	r0, r3
 8019704:	e7a4      	b.n	8019650 <_printf_i+0x168>
 8019706:	2301      	movs	r3, #1
 8019708:	4632      	mov	r2, r6
 801970a:	4649      	mov	r1, r9
 801970c:	4640      	mov	r0, r8
 801970e:	47d0      	blx	sl
 8019710:	3001      	adds	r0, #1
 8019712:	d09b      	beq.n	801964c <_printf_i+0x164>
 8019714:	3501      	adds	r5, #1
 8019716:	68e3      	ldr	r3, [r4, #12]
 8019718:	9903      	ldr	r1, [sp, #12]
 801971a:	1a5b      	subs	r3, r3, r1
 801971c:	42ab      	cmp	r3, r5
 801971e:	dcf2      	bgt.n	8019706 <_printf_i+0x21e>
 8019720:	e7eb      	b.n	80196fa <_printf_i+0x212>
 8019722:	2500      	movs	r5, #0
 8019724:	f104 0619 	add.w	r6, r4, #25
 8019728:	e7f5      	b.n	8019716 <_printf_i+0x22e>
 801972a:	bf00      	nop
 801972c:	0801d285 	.word	0x0801d285
 8019730:	0801d296 	.word	0x0801d296

08019734 <iprintf>:
 8019734:	b40f      	push	{r0, r1, r2, r3}
 8019736:	4b0a      	ldr	r3, [pc, #40]	; (8019760 <iprintf+0x2c>)
 8019738:	b513      	push	{r0, r1, r4, lr}
 801973a:	681c      	ldr	r4, [r3, #0]
 801973c:	b124      	cbz	r4, 8019748 <iprintf+0x14>
 801973e:	69a3      	ldr	r3, [r4, #24]
 8019740:	b913      	cbnz	r3, 8019748 <iprintf+0x14>
 8019742:	4620      	mov	r0, r4
 8019744:	f000 fb30 	bl	8019da8 <__sinit>
 8019748:	ab05      	add	r3, sp, #20
 801974a:	9a04      	ldr	r2, [sp, #16]
 801974c:	68a1      	ldr	r1, [r4, #8]
 801974e:	9301      	str	r3, [sp, #4]
 8019750:	4620      	mov	r0, r4
 8019752:	f7ff fd2b 	bl	80191ac <_vfiprintf_r>
 8019756:	b002      	add	sp, #8
 8019758:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801975c:	b004      	add	sp, #16
 801975e:	4770      	bx	lr
 8019760:	20000020 	.word	0x20000020

08019764 <_puts_r>:
 8019764:	b570      	push	{r4, r5, r6, lr}
 8019766:	460e      	mov	r6, r1
 8019768:	4605      	mov	r5, r0
 801976a:	b118      	cbz	r0, 8019774 <_puts_r+0x10>
 801976c:	6983      	ldr	r3, [r0, #24]
 801976e:	b90b      	cbnz	r3, 8019774 <_puts_r+0x10>
 8019770:	f000 fb1a 	bl	8019da8 <__sinit>
 8019774:	69ab      	ldr	r3, [r5, #24]
 8019776:	68ac      	ldr	r4, [r5, #8]
 8019778:	b913      	cbnz	r3, 8019780 <_puts_r+0x1c>
 801977a:	4628      	mov	r0, r5
 801977c:	f000 fb14 	bl	8019da8 <__sinit>
 8019780:	4b2c      	ldr	r3, [pc, #176]	; (8019834 <_puts_r+0xd0>)
 8019782:	429c      	cmp	r4, r3
 8019784:	d120      	bne.n	80197c8 <_puts_r+0x64>
 8019786:	686c      	ldr	r4, [r5, #4]
 8019788:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801978a:	07db      	lsls	r3, r3, #31
 801978c:	d405      	bmi.n	801979a <_puts_r+0x36>
 801978e:	89a3      	ldrh	r3, [r4, #12]
 8019790:	0598      	lsls	r0, r3, #22
 8019792:	d402      	bmi.n	801979a <_puts_r+0x36>
 8019794:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019796:	f000 fba5 	bl	8019ee4 <__retarget_lock_acquire_recursive>
 801979a:	89a3      	ldrh	r3, [r4, #12]
 801979c:	0719      	lsls	r1, r3, #28
 801979e:	d51d      	bpl.n	80197dc <_puts_r+0x78>
 80197a0:	6923      	ldr	r3, [r4, #16]
 80197a2:	b1db      	cbz	r3, 80197dc <_puts_r+0x78>
 80197a4:	3e01      	subs	r6, #1
 80197a6:	68a3      	ldr	r3, [r4, #8]
 80197a8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80197ac:	3b01      	subs	r3, #1
 80197ae:	60a3      	str	r3, [r4, #8]
 80197b0:	bb39      	cbnz	r1, 8019802 <_puts_r+0x9e>
 80197b2:	2b00      	cmp	r3, #0
 80197b4:	da38      	bge.n	8019828 <_puts_r+0xc4>
 80197b6:	4622      	mov	r2, r4
 80197b8:	210a      	movs	r1, #10
 80197ba:	4628      	mov	r0, r5
 80197bc:	f000 f8da 	bl	8019974 <__swbuf_r>
 80197c0:	3001      	adds	r0, #1
 80197c2:	d011      	beq.n	80197e8 <_puts_r+0x84>
 80197c4:	250a      	movs	r5, #10
 80197c6:	e011      	b.n	80197ec <_puts_r+0x88>
 80197c8:	4b1b      	ldr	r3, [pc, #108]	; (8019838 <_puts_r+0xd4>)
 80197ca:	429c      	cmp	r4, r3
 80197cc:	d101      	bne.n	80197d2 <_puts_r+0x6e>
 80197ce:	68ac      	ldr	r4, [r5, #8]
 80197d0:	e7da      	b.n	8019788 <_puts_r+0x24>
 80197d2:	4b1a      	ldr	r3, [pc, #104]	; (801983c <_puts_r+0xd8>)
 80197d4:	429c      	cmp	r4, r3
 80197d6:	bf08      	it	eq
 80197d8:	68ec      	ldreq	r4, [r5, #12]
 80197da:	e7d5      	b.n	8019788 <_puts_r+0x24>
 80197dc:	4621      	mov	r1, r4
 80197de:	4628      	mov	r0, r5
 80197e0:	f000 f92c 	bl	8019a3c <__swsetup_r>
 80197e4:	2800      	cmp	r0, #0
 80197e6:	d0dd      	beq.n	80197a4 <_puts_r+0x40>
 80197e8:	f04f 35ff 	mov.w	r5, #4294967295
 80197ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80197ee:	07da      	lsls	r2, r3, #31
 80197f0:	d405      	bmi.n	80197fe <_puts_r+0x9a>
 80197f2:	89a3      	ldrh	r3, [r4, #12]
 80197f4:	059b      	lsls	r3, r3, #22
 80197f6:	d402      	bmi.n	80197fe <_puts_r+0x9a>
 80197f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80197fa:	f000 fb74 	bl	8019ee6 <__retarget_lock_release_recursive>
 80197fe:	4628      	mov	r0, r5
 8019800:	bd70      	pop	{r4, r5, r6, pc}
 8019802:	2b00      	cmp	r3, #0
 8019804:	da04      	bge.n	8019810 <_puts_r+0xac>
 8019806:	69a2      	ldr	r2, [r4, #24]
 8019808:	429a      	cmp	r2, r3
 801980a:	dc06      	bgt.n	801981a <_puts_r+0xb6>
 801980c:	290a      	cmp	r1, #10
 801980e:	d004      	beq.n	801981a <_puts_r+0xb6>
 8019810:	6823      	ldr	r3, [r4, #0]
 8019812:	1c5a      	adds	r2, r3, #1
 8019814:	6022      	str	r2, [r4, #0]
 8019816:	7019      	strb	r1, [r3, #0]
 8019818:	e7c5      	b.n	80197a6 <_puts_r+0x42>
 801981a:	4622      	mov	r2, r4
 801981c:	4628      	mov	r0, r5
 801981e:	f000 f8a9 	bl	8019974 <__swbuf_r>
 8019822:	3001      	adds	r0, #1
 8019824:	d1bf      	bne.n	80197a6 <_puts_r+0x42>
 8019826:	e7df      	b.n	80197e8 <_puts_r+0x84>
 8019828:	6823      	ldr	r3, [r4, #0]
 801982a:	250a      	movs	r5, #10
 801982c:	1c5a      	adds	r2, r3, #1
 801982e:	6022      	str	r2, [r4, #0]
 8019830:	701d      	strb	r5, [r3, #0]
 8019832:	e7db      	b.n	80197ec <_puts_r+0x88>
 8019834:	0801d378 	.word	0x0801d378
 8019838:	0801d398 	.word	0x0801d398
 801983c:	0801d358 	.word	0x0801d358

08019840 <puts>:
 8019840:	4b02      	ldr	r3, [pc, #8]	; (801984c <puts+0xc>)
 8019842:	4601      	mov	r1, r0
 8019844:	6818      	ldr	r0, [r3, #0]
 8019846:	f7ff bf8d 	b.w	8019764 <_puts_r>
 801984a:	bf00      	nop
 801984c:	20000020 	.word	0x20000020

08019850 <rand>:
 8019850:	4b16      	ldr	r3, [pc, #88]	; (80198ac <rand+0x5c>)
 8019852:	b510      	push	{r4, lr}
 8019854:	681c      	ldr	r4, [r3, #0]
 8019856:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8019858:	b9b3      	cbnz	r3, 8019888 <rand+0x38>
 801985a:	2018      	movs	r0, #24
 801985c:	f7ff fb6e 	bl	8018f3c <malloc>
 8019860:	63a0      	str	r0, [r4, #56]	; 0x38
 8019862:	b928      	cbnz	r0, 8019870 <rand+0x20>
 8019864:	4602      	mov	r2, r0
 8019866:	4b12      	ldr	r3, [pc, #72]	; (80198b0 <rand+0x60>)
 8019868:	4812      	ldr	r0, [pc, #72]	; (80198b4 <rand+0x64>)
 801986a:	214e      	movs	r1, #78	; 0x4e
 801986c:	f000 f954 	bl	8019b18 <__assert_func>
 8019870:	4a11      	ldr	r2, [pc, #68]	; (80198b8 <rand+0x68>)
 8019872:	4b12      	ldr	r3, [pc, #72]	; (80198bc <rand+0x6c>)
 8019874:	e9c0 2300 	strd	r2, r3, [r0]
 8019878:	4b11      	ldr	r3, [pc, #68]	; (80198c0 <rand+0x70>)
 801987a:	6083      	str	r3, [r0, #8]
 801987c:	230b      	movs	r3, #11
 801987e:	8183      	strh	r3, [r0, #12]
 8019880:	2201      	movs	r2, #1
 8019882:	2300      	movs	r3, #0
 8019884:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8019888:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 801988a:	4a0e      	ldr	r2, [pc, #56]	; (80198c4 <rand+0x74>)
 801988c:	6920      	ldr	r0, [r4, #16]
 801988e:	6963      	ldr	r3, [r4, #20]
 8019890:	490d      	ldr	r1, [pc, #52]	; (80198c8 <rand+0x78>)
 8019892:	4342      	muls	r2, r0
 8019894:	fb01 2203 	mla	r2, r1, r3, r2
 8019898:	fba0 0101 	umull	r0, r1, r0, r1
 801989c:	1c43      	adds	r3, r0, #1
 801989e:	eb42 0001 	adc.w	r0, r2, r1
 80198a2:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80198a6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80198aa:	bd10      	pop	{r4, pc}
 80198ac:	20000020 	.word	0x20000020
 80198b0:	0801d2a7 	.word	0x0801d2a7
 80198b4:	0801d2be 	.word	0x0801d2be
 80198b8:	abcd330e 	.word	0xabcd330e
 80198bc:	e66d1234 	.word	0xe66d1234
 80198c0:	0005deec 	.word	0x0005deec
 80198c4:	5851f42d 	.word	0x5851f42d
 80198c8:	4c957f2d 	.word	0x4c957f2d

080198cc <_sbrk_r>:
 80198cc:	b538      	push	{r3, r4, r5, lr}
 80198ce:	4d06      	ldr	r5, [pc, #24]	; (80198e8 <_sbrk_r+0x1c>)
 80198d0:	2300      	movs	r3, #0
 80198d2:	4604      	mov	r4, r0
 80198d4:	4608      	mov	r0, r1
 80198d6:	602b      	str	r3, [r5, #0]
 80198d8:	f7e8 fdae 	bl	8002438 <_sbrk>
 80198dc:	1c43      	adds	r3, r0, #1
 80198de:	d102      	bne.n	80198e6 <_sbrk_r+0x1a>
 80198e0:	682b      	ldr	r3, [r5, #0]
 80198e2:	b103      	cbz	r3, 80198e6 <_sbrk_r+0x1a>
 80198e4:	6023      	str	r3, [r4, #0]
 80198e6:	bd38      	pop	{r3, r4, r5, pc}
 80198e8:	2001398c 	.word	0x2001398c

080198ec <__sread>:
 80198ec:	b510      	push	{r4, lr}
 80198ee:	460c      	mov	r4, r1
 80198f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80198f4:	f000 fb7c 	bl	8019ff0 <_read_r>
 80198f8:	2800      	cmp	r0, #0
 80198fa:	bfab      	itete	ge
 80198fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80198fe:	89a3      	ldrhlt	r3, [r4, #12]
 8019900:	181b      	addge	r3, r3, r0
 8019902:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8019906:	bfac      	ite	ge
 8019908:	6563      	strge	r3, [r4, #84]	; 0x54
 801990a:	81a3      	strhlt	r3, [r4, #12]
 801990c:	bd10      	pop	{r4, pc}

0801990e <__swrite>:
 801990e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019912:	461f      	mov	r7, r3
 8019914:	898b      	ldrh	r3, [r1, #12]
 8019916:	05db      	lsls	r3, r3, #23
 8019918:	4605      	mov	r5, r0
 801991a:	460c      	mov	r4, r1
 801991c:	4616      	mov	r6, r2
 801991e:	d505      	bpl.n	801992c <__swrite+0x1e>
 8019920:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019924:	2302      	movs	r3, #2
 8019926:	2200      	movs	r2, #0
 8019928:	f000 fade 	bl	8019ee8 <_lseek_r>
 801992c:	89a3      	ldrh	r3, [r4, #12]
 801992e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019932:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8019936:	81a3      	strh	r3, [r4, #12]
 8019938:	4632      	mov	r2, r6
 801993a:	463b      	mov	r3, r7
 801993c:	4628      	mov	r0, r5
 801993e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019942:	f000 b869 	b.w	8019a18 <_write_r>

08019946 <__sseek>:
 8019946:	b510      	push	{r4, lr}
 8019948:	460c      	mov	r4, r1
 801994a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801994e:	f000 facb 	bl	8019ee8 <_lseek_r>
 8019952:	1c43      	adds	r3, r0, #1
 8019954:	89a3      	ldrh	r3, [r4, #12]
 8019956:	bf15      	itete	ne
 8019958:	6560      	strne	r0, [r4, #84]	; 0x54
 801995a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801995e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8019962:	81a3      	strheq	r3, [r4, #12]
 8019964:	bf18      	it	ne
 8019966:	81a3      	strhne	r3, [r4, #12]
 8019968:	bd10      	pop	{r4, pc}

0801996a <__sclose>:
 801996a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801996e:	f000 b8f1 	b.w	8019b54 <_close_r>
	...

08019974 <__swbuf_r>:
 8019974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019976:	460e      	mov	r6, r1
 8019978:	4614      	mov	r4, r2
 801997a:	4605      	mov	r5, r0
 801997c:	b118      	cbz	r0, 8019986 <__swbuf_r+0x12>
 801997e:	6983      	ldr	r3, [r0, #24]
 8019980:	b90b      	cbnz	r3, 8019986 <__swbuf_r+0x12>
 8019982:	f000 fa11 	bl	8019da8 <__sinit>
 8019986:	4b21      	ldr	r3, [pc, #132]	; (8019a0c <__swbuf_r+0x98>)
 8019988:	429c      	cmp	r4, r3
 801998a:	d12b      	bne.n	80199e4 <__swbuf_r+0x70>
 801998c:	686c      	ldr	r4, [r5, #4]
 801998e:	69a3      	ldr	r3, [r4, #24]
 8019990:	60a3      	str	r3, [r4, #8]
 8019992:	89a3      	ldrh	r3, [r4, #12]
 8019994:	071a      	lsls	r2, r3, #28
 8019996:	d52f      	bpl.n	80199f8 <__swbuf_r+0x84>
 8019998:	6923      	ldr	r3, [r4, #16]
 801999a:	b36b      	cbz	r3, 80199f8 <__swbuf_r+0x84>
 801999c:	6923      	ldr	r3, [r4, #16]
 801999e:	6820      	ldr	r0, [r4, #0]
 80199a0:	1ac0      	subs	r0, r0, r3
 80199a2:	6963      	ldr	r3, [r4, #20]
 80199a4:	b2f6      	uxtb	r6, r6
 80199a6:	4283      	cmp	r3, r0
 80199a8:	4637      	mov	r7, r6
 80199aa:	dc04      	bgt.n	80199b6 <__swbuf_r+0x42>
 80199ac:	4621      	mov	r1, r4
 80199ae:	4628      	mov	r0, r5
 80199b0:	f000 f966 	bl	8019c80 <_fflush_r>
 80199b4:	bb30      	cbnz	r0, 8019a04 <__swbuf_r+0x90>
 80199b6:	68a3      	ldr	r3, [r4, #8]
 80199b8:	3b01      	subs	r3, #1
 80199ba:	60a3      	str	r3, [r4, #8]
 80199bc:	6823      	ldr	r3, [r4, #0]
 80199be:	1c5a      	adds	r2, r3, #1
 80199c0:	6022      	str	r2, [r4, #0]
 80199c2:	701e      	strb	r6, [r3, #0]
 80199c4:	6963      	ldr	r3, [r4, #20]
 80199c6:	3001      	adds	r0, #1
 80199c8:	4283      	cmp	r3, r0
 80199ca:	d004      	beq.n	80199d6 <__swbuf_r+0x62>
 80199cc:	89a3      	ldrh	r3, [r4, #12]
 80199ce:	07db      	lsls	r3, r3, #31
 80199d0:	d506      	bpl.n	80199e0 <__swbuf_r+0x6c>
 80199d2:	2e0a      	cmp	r6, #10
 80199d4:	d104      	bne.n	80199e0 <__swbuf_r+0x6c>
 80199d6:	4621      	mov	r1, r4
 80199d8:	4628      	mov	r0, r5
 80199da:	f000 f951 	bl	8019c80 <_fflush_r>
 80199de:	b988      	cbnz	r0, 8019a04 <__swbuf_r+0x90>
 80199e0:	4638      	mov	r0, r7
 80199e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80199e4:	4b0a      	ldr	r3, [pc, #40]	; (8019a10 <__swbuf_r+0x9c>)
 80199e6:	429c      	cmp	r4, r3
 80199e8:	d101      	bne.n	80199ee <__swbuf_r+0x7a>
 80199ea:	68ac      	ldr	r4, [r5, #8]
 80199ec:	e7cf      	b.n	801998e <__swbuf_r+0x1a>
 80199ee:	4b09      	ldr	r3, [pc, #36]	; (8019a14 <__swbuf_r+0xa0>)
 80199f0:	429c      	cmp	r4, r3
 80199f2:	bf08      	it	eq
 80199f4:	68ec      	ldreq	r4, [r5, #12]
 80199f6:	e7ca      	b.n	801998e <__swbuf_r+0x1a>
 80199f8:	4621      	mov	r1, r4
 80199fa:	4628      	mov	r0, r5
 80199fc:	f000 f81e 	bl	8019a3c <__swsetup_r>
 8019a00:	2800      	cmp	r0, #0
 8019a02:	d0cb      	beq.n	801999c <__swbuf_r+0x28>
 8019a04:	f04f 37ff 	mov.w	r7, #4294967295
 8019a08:	e7ea      	b.n	80199e0 <__swbuf_r+0x6c>
 8019a0a:	bf00      	nop
 8019a0c:	0801d378 	.word	0x0801d378
 8019a10:	0801d398 	.word	0x0801d398
 8019a14:	0801d358 	.word	0x0801d358

08019a18 <_write_r>:
 8019a18:	b538      	push	{r3, r4, r5, lr}
 8019a1a:	4d07      	ldr	r5, [pc, #28]	; (8019a38 <_write_r+0x20>)
 8019a1c:	4604      	mov	r4, r0
 8019a1e:	4608      	mov	r0, r1
 8019a20:	4611      	mov	r1, r2
 8019a22:	2200      	movs	r2, #0
 8019a24:	602a      	str	r2, [r5, #0]
 8019a26:	461a      	mov	r2, r3
 8019a28:	f7e8 fcb5 	bl	8002396 <_write>
 8019a2c:	1c43      	adds	r3, r0, #1
 8019a2e:	d102      	bne.n	8019a36 <_write_r+0x1e>
 8019a30:	682b      	ldr	r3, [r5, #0]
 8019a32:	b103      	cbz	r3, 8019a36 <_write_r+0x1e>
 8019a34:	6023      	str	r3, [r4, #0]
 8019a36:	bd38      	pop	{r3, r4, r5, pc}
 8019a38:	2001398c 	.word	0x2001398c

08019a3c <__swsetup_r>:
 8019a3c:	4b32      	ldr	r3, [pc, #200]	; (8019b08 <__swsetup_r+0xcc>)
 8019a3e:	b570      	push	{r4, r5, r6, lr}
 8019a40:	681d      	ldr	r5, [r3, #0]
 8019a42:	4606      	mov	r6, r0
 8019a44:	460c      	mov	r4, r1
 8019a46:	b125      	cbz	r5, 8019a52 <__swsetup_r+0x16>
 8019a48:	69ab      	ldr	r3, [r5, #24]
 8019a4a:	b913      	cbnz	r3, 8019a52 <__swsetup_r+0x16>
 8019a4c:	4628      	mov	r0, r5
 8019a4e:	f000 f9ab 	bl	8019da8 <__sinit>
 8019a52:	4b2e      	ldr	r3, [pc, #184]	; (8019b0c <__swsetup_r+0xd0>)
 8019a54:	429c      	cmp	r4, r3
 8019a56:	d10f      	bne.n	8019a78 <__swsetup_r+0x3c>
 8019a58:	686c      	ldr	r4, [r5, #4]
 8019a5a:	89a3      	ldrh	r3, [r4, #12]
 8019a5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019a60:	0719      	lsls	r1, r3, #28
 8019a62:	d42c      	bmi.n	8019abe <__swsetup_r+0x82>
 8019a64:	06dd      	lsls	r5, r3, #27
 8019a66:	d411      	bmi.n	8019a8c <__swsetup_r+0x50>
 8019a68:	2309      	movs	r3, #9
 8019a6a:	6033      	str	r3, [r6, #0]
 8019a6c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8019a70:	81a3      	strh	r3, [r4, #12]
 8019a72:	f04f 30ff 	mov.w	r0, #4294967295
 8019a76:	e03e      	b.n	8019af6 <__swsetup_r+0xba>
 8019a78:	4b25      	ldr	r3, [pc, #148]	; (8019b10 <__swsetup_r+0xd4>)
 8019a7a:	429c      	cmp	r4, r3
 8019a7c:	d101      	bne.n	8019a82 <__swsetup_r+0x46>
 8019a7e:	68ac      	ldr	r4, [r5, #8]
 8019a80:	e7eb      	b.n	8019a5a <__swsetup_r+0x1e>
 8019a82:	4b24      	ldr	r3, [pc, #144]	; (8019b14 <__swsetup_r+0xd8>)
 8019a84:	429c      	cmp	r4, r3
 8019a86:	bf08      	it	eq
 8019a88:	68ec      	ldreq	r4, [r5, #12]
 8019a8a:	e7e6      	b.n	8019a5a <__swsetup_r+0x1e>
 8019a8c:	0758      	lsls	r0, r3, #29
 8019a8e:	d512      	bpl.n	8019ab6 <__swsetup_r+0x7a>
 8019a90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019a92:	b141      	cbz	r1, 8019aa6 <__swsetup_r+0x6a>
 8019a94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019a98:	4299      	cmp	r1, r3
 8019a9a:	d002      	beq.n	8019aa2 <__swsetup_r+0x66>
 8019a9c:	4630      	mov	r0, r6
 8019a9e:	f7ff fa7b 	bl	8018f98 <_free_r>
 8019aa2:	2300      	movs	r3, #0
 8019aa4:	6363      	str	r3, [r4, #52]	; 0x34
 8019aa6:	89a3      	ldrh	r3, [r4, #12]
 8019aa8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8019aac:	81a3      	strh	r3, [r4, #12]
 8019aae:	2300      	movs	r3, #0
 8019ab0:	6063      	str	r3, [r4, #4]
 8019ab2:	6923      	ldr	r3, [r4, #16]
 8019ab4:	6023      	str	r3, [r4, #0]
 8019ab6:	89a3      	ldrh	r3, [r4, #12]
 8019ab8:	f043 0308 	orr.w	r3, r3, #8
 8019abc:	81a3      	strh	r3, [r4, #12]
 8019abe:	6923      	ldr	r3, [r4, #16]
 8019ac0:	b94b      	cbnz	r3, 8019ad6 <__swsetup_r+0x9a>
 8019ac2:	89a3      	ldrh	r3, [r4, #12]
 8019ac4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8019ac8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019acc:	d003      	beq.n	8019ad6 <__swsetup_r+0x9a>
 8019ace:	4621      	mov	r1, r4
 8019ad0:	4630      	mov	r0, r6
 8019ad2:	f000 fa41 	bl	8019f58 <__smakebuf_r>
 8019ad6:	89a0      	ldrh	r0, [r4, #12]
 8019ad8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019adc:	f010 0301 	ands.w	r3, r0, #1
 8019ae0:	d00a      	beq.n	8019af8 <__swsetup_r+0xbc>
 8019ae2:	2300      	movs	r3, #0
 8019ae4:	60a3      	str	r3, [r4, #8]
 8019ae6:	6963      	ldr	r3, [r4, #20]
 8019ae8:	425b      	negs	r3, r3
 8019aea:	61a3      	str	r3, [r4, #24]
 8019aec:	6923      	ldr	r3, [r4, #16]
 8019aee:	b943      	cbnz	r3, 8019b02 <__swsetup_r+0xc6>
 8019af0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8019af4:	d1ba      	bne.n	8019a6c <__swsetup_r+0x30>
 8019af6:	bd70      	pop	{r4, r5, r6, pc}
 8019af8:	0781      	lsls	r1, r0, #30
 8019afa:	bf58      	it	pl
 8019afc:	6963      	ldrpl	r3, [r4, #20]
 8019afe:	60a3      	str	r3, [r4, #8]
 8019b00:	e7f4      	b.n	8019aec <__swsetup_r+0xb0>
 8019b02:	2000      	movs	r0, #0
 8019b04:	e7f7      	b.n	8019af6 <__swsetup_r+0xba>
 8019b06:	bf00      	nop
 8019b08:	20000020 	.word	0x20000020
 8019b0c:	0801d378 	.word	0x0801d378
 8019b10:	0801d398 	.word	0x0801d398
 8019b14:	0801d358 	.word	0x0801d358

08019b18 <__assert_func>:
 8019b18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019b1a:	4614      	mov	r4, r2
 8019b1c:	461a      	mov	r2, r3
 8019b1e:	4b09      	ldr	r3, [pc, #36]	; (8019b44 <__assert_func+0x2c>)
 8019b20:	681b      	ldr	r3, [r3, #0]
 8019b22:	4605      	mov	r5, r0
 8019b24:	68d8      	ldr	r0, [r3, #12]
 8019b26:	b14c      	cbz	r4, 8019b3c <__assert_func+0x24>
 8019b28:	4b07      	ldr	r3, [pc, #28]	; (8019b48 <__assert_func+0x30>)
 8019b2a:	9100      	str	r1, [sp, #0]
 8019b2c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019b30:	4906      	ldr	r1, [pc, #24]	; (8019b4c <__assert_func+0x34>)
 8019b32:	462b      	mov	r3, r5
 8019b34:	f7ff f9cc 	bl	8018ed0 <fiprintf>
 8019b38:	f000 fa6c 	bl	801a014 <abort>
 8019b3c:	4b04      	ldr	r3, [pc, #16]	; (8019b50 <__assert_func+0x38>)
 8019b3e:	461c      	mov	r4, r3
 8019b40:	e7f3      	b.n	8019b2a <__assert_func+0x12>
 8019b42:	bf00      	nop
 8019b44:	20000020 	.word	0x20000020
 8019b48:	0801d319 	.word	0x0801d319
 8019b4c:	0801d326 	.word	0x0801d326
 8019b50:	0801d354 	.word	0x0801d354

08019b54 <_close_r>:
 8019b54:	b538      	push	{r3, r4, r5, lr}
 8019b56:	4d06      	ldr	r5, [pc, #24]	; (8019b70 <_close_r+0x1c>)
 8019b58:	2300      	movs	r3, #0
 8019b5a:	4604      	mov	r4, r0
 8019b5c:	4608      	mov	r0, r1
 8019b5e:	602b      	str	r3, [r5, #0]
 8019b60:	f7e8 fc35 	bl	80023ce <_close>
 8019b64:	1c43      	adds	r3, r0, #1
 8019b66:	d102      	bne.n	8019b6e <_close_r+0x1a>
 8019b68:	682b      	ldr	r3, [r5, #0]
 8019b6a:	b103      	cbz	r3, 8019b6e <_close_r+0x1a>
 8019b6c:	6023      	str	r3, [r4, #0]
 8019b6e:	bd38      	pop	{r3, r4, r5, pc}
 8019b70:	2001398c 	.word	0x2001398c

08019b74 <__sflush_r>:
 8019b74:	898a      	ldrh	r2, [r1, #12]
 8019b76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019b7a:	4605      	mov	r5, r0
 8019b7c:	0710      	lsls	r0, r2, #28
 8019b7e:	460c      	mov	r4, r1
 8019b80:	d458      	bmi.n	8019c34 <__sflush_r+0xc0>
 8019b82:	684b      	ldr	r3, [r1, #4]
 8019b84:	2b00      	cmp	r3, #0
 8019b86:	dc05      	bgt.n	8019b94 <__sflush_r+0x20>
 8019b88:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8019b8a:	2b00      	cmp	r3, #0
 8019b8c:	dc02      	bgt.n	8019b94 <__sflush_r+0x20>
 8019b8e:	2000      	movs	r0, #0
 8019b90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019b94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019b96:	2e00      	cmp	r6, #0
 8019b98:	d0f9      	beq.n	8019b8e <__sflush_r+0x1a>
 8019b9a:	2300      	movs	r3, #0
 8019b9c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8019ba0:	682f      	ldr	r7, [r5, #0]
 8019ba2:	602b      	str	r3, [r5, #0]
 8019ba4:	d032      	beq.n	8019c0c <__sflush_r+0x98>
 8019ba6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8019ba8:	89a3      	ldrh	r3, [r4, #12]
 8019baa:	075a      	lsls	r2, r3, #29
 8019bac:	d505      	bpl.n	8019bba <__sflush_r+0x46>
 8019bae:	6863      	ldr	r3, [r4, #4]
 8019bb0:	1ac0      	subs	r0, r0, r3
 8019bb2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019bb4:	b10b      	cbz	r3, 8019bba <__sflush_r+0x46>
 8019bb6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019bb8:	1ac0      	subs	r0, r0, r3
 8019bba:	2300      	movs	r3, #0
 8019bbc:	4602      	mov	r2, r0
 8019bbe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019bc0:	6a21      	ldr	r1, [r4, #32]
 8019bc2:	4628      	mov	r0, r5
 8019bc4:	47b0      	blx	r6
 8019bc6:	1c43      	adds	r3, r0, #1
 8019bc8:	89a3      	ldrh	r3, [r4, #12]
 8019bca:	d106      	bne.n	8019bda <__sflush_r+0x66>
 8019bcc:	6829      	ldr	r1, [r5, #0]
 8019bce:	291d      	cmp	r1, #29
 8019bd0:	d82c      	bhi.n	8019c2c <__sflush_r+0xb8>
 8019bd2:	4a2a      	ldr	r2, [pc, #168]	; (8019c7c <__sflush_r+0x108>)
 8019bd4:	40ca      	lsrs	r2, r1
 8019bd6:	07d6      	lsls	r6, r2, #31
 8019bd8:	d528      	bpl.n	8019c2c <__sflush_r+0xb8>
 8019bda:	2200      	movs	r2, #0
 8019bdc:	6062      	str	r2, [r4, #4]
 8019bde:	04d9      	lsls	r1, r3, #19
 8019be0:	6922      	ldr	r2, [r4, #16]
 8019be2:	6022      	str	r2, [r4, #0]
 8019be4:	d504      	bpl.n	8019bf0 <__sflush_r+0x7c>
 8019be6:	1c42      	adds	r2, r0, #1
 8019be8:	d101      	bne.n	8019bee <__sflush_r+0x7a>
 8019bea:	682b      	ldr	r3, [r5, #0]
 8019bec:	b903      	cbnz	r3, 8019bf0 <__sflush_r+0x7c>
 8019bee:	6560      	str	r0, [r4, #84]	; 0x54
 8019bf0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019bf2:	602f      	str	r7, [r5, #0]
 8019bf4:	2900      	cmp	r1, #0
 8019bf6:	d0ca      	beq.n	8019b8e <__sflush_r+0x1a>
 8019bf8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019bfc:	4299      	cmp	r1, r3
 8019bfe:	d002      	beq.n	8019c06 <__sflush_r+0x92>
 8019c00:	4628      	mov	r0, r5
 8019c02:	f7ff f9c9 	bl	8018f98 <_free_r>
 8019c06:	2000      	movs	r0, #0
 8019c08:	6360      	str	r0, [r4, #52]	; 0x34
 8019c0a:	e7c1      	b.n	8019b90 <__sflush_r+0x1c>
 8019c0c:	6a21      	ldr	r1, [r4, #32]
 8019c0e:	2301      	movs	r3, #1
 8019c10:	4628      	mov	r0, r5
 8019c12:	47b0      	blx	r6
 8019c14:	1c41      	adds	r1, r0, #1
 8019c16:	d1c7      	bne.n	8019ba8 <__sflush_r+0x34>
 8019c18:	682b      	ldr	r3, [r5, #0]
 8019c1a:	2b00      	cmp	r3, #0
 8019c1c:	d0c4      	beq.n	8019ba8 <__sflush_r+0x34>
 8019c1e:	2b1d      	cmp	r3, #29
 8019c20:	d001      	beq.n	8019c26 <__sflush_r+0xb2>
 8019c22:	2b16      	cmp	r3, #22
 8019c24:	d101      	bne.n	8019c2a <__sflush_r+0xb6>
 8019c26:	602f      	str	r7, [r5, #0]
 8019c28:	e7b1      	b.n	8019b8e <__sflush_r+0x1a>
 8019c2a:	89a3      	ldrh	r3, [r4, #12]
 8019c2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019c30:	81a3      	strh	r3, [r4, #12]
 8019c32:	e7ad      	b.n	8019b90 <__sflush_r+0x1c>
 8019c34:	690f      	ldr	r7, [r1, #16]
 8019c36:	2f00      	cmp	r7, #0
 8019c38:	d0a9      	beq.n	8019b8e <__sflush_r+0x1a>
 8019c3a:	0793      	lsls	r3, r2, #30
 8019c3c:	680e      	ldr	r6, [r1, #0]
 8019c3e:	bf08      	it	eq
 8019c40:	694b      	ldreq	r3, [r1, #20]
 8019c42:	600f      	str	r7, [r1, #0]
 8019c44:	bf18      	it	ne
 8019c46:	2300      	movne	r3, #0
 8019c48:	eba6 0807 	sub.w	r8, r6, r7
 8019c4c:	608b      	str	r3, [r1, #8]
 8019c4e:	f1b8 0f00 	cmp.w	r8, #0
 8019c52:	dd9c      	ble.n	8019b8e <__sflush_r+0x1a>
 8019c54:	6a21      	ldr	r1, [r4, #32]
 8019c56:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8019c58:	4643      	mov	r3, r8
 8019c5a:	463a      	mov	r2, r7
 8019c5c:	4628      	mov	r0, r5
 8019c5e:	47b0      	blx	r6
 8019c60:	2800      	cmp	r0, #0
 8019c62:	dc06      	bgt.n	8019c72 <__sflush_r+0xfe>
 8019c64:	89a3      	ldrh	r3, [r4, #12]
 8019c66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019c6a:	81a3      	strh	r3, [r4, #12]
 8019c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8019c70:	e78e      	b.n	8019b90 <__sflush_r+0x1c>
 8019c72:	4407      	add	r7, r0
 8019c74:	eba8 0800 	sub.w	r8, r8, r0
 8019c78:	e7e9      	b.n	8019c4e <__sflush_r+0xda>
 8019c7a:	bf00      	nop
 8019c7c:	20400001 	.word	0x20400001

08019c80 <_fflush_r>:
 8019c80:	b538      	push	{r3, r4, r5, lr}
 8019c82:	690b      	ldr	r3, [r1, #16]
 8019c84:	4605      	mov	r5, r0
 8019c86:	460c      	mov	r4, r1
 8019c88:	b913      	cbnz	r3, 8019c90 <_fflush_r+0x10>
 8019c8a:	2500      	movs	r5, #0
 8019c8c:	4628      	mov	r0, r5
 8019c8e:	bd38      	pop	{r3, r4, r5, pc}
 8019c90:	b118      	cbz	r0, 8019c9a <_fflush_r+0x1a>
 8019c92:	6983      	ldr	r3, [r0, #24]
 8019c94:	b90b      	cbnz	r3, 8019c9a <_fflush_r+0x1a>
 8019c96:	f000 f887 	bl	8019da8 <__sinit>
 8019c9a:	4b14      	ldr	r3, [pc, #80]	; (8019cec <_fflush_r+0x6c>)
 8019c9c:	429c      	cmp	r4, r3
 8019c9e:	d11b      	bne.n	8019cd8 <_fflush_r+0x58>
 8019ca0:	686c      	ldr	r4, [r5, #4]
 8019ca2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019ca6:	2b00      	cmp	r3, #0
 8019ca8:	d0ef      	beq.n	8019c8a <_fflush_r+0xa>
 8019caa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8019cac:	07d0      	lsls	r0, r2, #31
 8019cae:	d404      	bmi.n	8019cba <_fflush_r+0x3a>
 8019cb0:	0599      	lsls	r1, r3, #22
 8019cb2:	d402      	bmi.n	8019cba <_fflush_r+0x3a>
 8019cb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019cb6:	f000 f915 	bl	8019ee4 <__retarget_lock_acquire_recursive>
 8019cba:	4628      	mov	r0, r5
 8019cbc:	4621      	mov	r1, r4
 8019cbe:	f7ff ff59 	bl	8019b74 <__sflush_r>
 8019cc2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019cc4:	07da      	lsls	r2, r3, #31
 8019cc6:	4605      	mov	r5, r0
 8019cc8:	d4e0      	bmi.n	8019c8c <_fflush_r+0xc>
 8019cca:	89a3      	ldrh	r3, [r4, #12]
 8019ccc:	059b      	lsls	r3, r3, #22
 8019cce:	d4dd      	bmi.n	8019c8c <_fflush_r+0xc>
 8019cd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019cd2:	f000 f908 	bl	8019ee6 <__retarget_lock_release_recursive>
 8019cd6:	e7d9      	b.n	8019c8c <_fflush_r+0xc>
 8019cd8:	4b05      	ldr	r3, [pc, #20]	; (8019cf0 <_fflush_r+0x70>)
 8019cda:	429c      	cmp	r4, r3
 8019cdc:	d101      	bne.n	8019ce2 <_fflush_r+0x62>
 8019cde:	68ac      	ldr	r4, [r5, #8]
 8019ce0:	e7df      	b.n	8019ca2 <_fflush_r+0x22>
 8019ce2:	4b04      	ldr	r3, [pc, #16]	; (8019cf4 <_fflush_r+0x74>)
 8019ce4:	429c      	cmp	r4, r3
 8019ce6:	bf08      	it	eq
 8019ce8:	68ec      	ldreq	r4, [r5, #12]
 8019cea:	e7da      	b.n	8019ca2 <_fflush_r+0x22>
 8019cec:	0801d378 	.word	0x0801d378
 8019cf0:	0801d398 	.word	0x0801d398
 8019cf4:	0801d358 	.word	0x0801d358

08019cf8 <std>:
 8019cf8:	2300      	movs	r3, #0
 8019cfa:	b510      	push	{r4, lr}
 8019cfc:	4604      	mov	r4, r0
 8019cfe:	e9c0 3300 	strd	r3, r3, [r0]
 8019d02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8019d06:	6083      	str	r3, [r0, #8]
 8019d08:	8181      	strh	r1, [r0, #12]
 8019d0a:	6643      	str	r3, [r0, #100]	; 0x64
 8019d0c:	81c2      	strh	r2, [r0, #14]
 8019d0e:	6183      	str	r3, [r0, #24]
 8019d10:	4619      	mov	r1, r3
 8019d12:	2208      	movs	r2, #8
 8019d14:	305c      	adds	r0, #92	; 0x5c
 8019d16:	f7ff f937 	bl	8018f88 <memset>
 8019d1a:	4b05      	ldr	r3, [pc, #20]	; (8019d30 <std+0x38>)
 8019d1c:	6263      	str	r3, [r4, #36]	; 0x24
 8019d1e:	4b05      	ldr	r3, [pc, #20]	; (8019d34 <std+0x3c>)
 8019d20:	62a3      	str	r3, [r4, #40]	; 0x28
 8019d22:	4b05      	ldr	r3, [pc, #20]	; (8019d38 <std+0x40>)
 8019d24:	62e3      	str	r3, [r4, #44]	; 0x2c
 8019d26:	4b05      	ldr	r3, [pc, #20]	; (8019d3c <std+0x44>)
 8019d28:	6224      	str	r4, [r4, #32]
 8019d2a:	6323      	str	r3, [r4, #48]	; 0x30
 8019d2c:	bd10      	pop	{r4, pc}
 8019d2e:	bf00      	nop
 8019d30:	080198ed 	.word	0x080198ed
 8019d34:	0801990f 	.word	0x0801990f
 8019d38:	08019947 	.word	0x08019947
 8019d3c:	0801996b 	.word	0x0801996b

08019d40 <_cleanup_r>:
 8019d40:	4901      	ldr	r1, [pc, #4]	; (8019d48 <_cleanup_r+0x8>)
 8019d42:	f000 b8af 	b.w	8019ea4 <_fwalk_reent>
 8019d46:	bf00      	nop
 8019d48:	08019c81 	.word	0x08019c81

08019d4c <__sfmoreglue>:
 8019d4c:	b570      	push	{r4, r5, r6, lr}
 8019d4e:	2268      	movs	r2, #104	; 0x68
 8019d50:	1e4d      	subs	r5, r1, #1
 8019d52:	4355      	muls	r5, r2
 8019d54:	460e      	mov	r6, r1
 8019d56:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8019d5a:	f7ff f989 	bl	8019070 <_malloc_r>
 8019d5e:	4604      	mov	r4, r0
 8019d60:	b140      	cbz	r0, 8019d74 <__sfmoreglue+0x28>
 8019d62:	2100      	movs	r1, #0
 8019d64:	e9c0 1600 	strd	r1, r6, [r0]
 8019d68:	300c      	adds	r0, #12
 8019d6a:	60a0      	str	r0, [r4, #8]
 8019d6c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8019d70:	f7ff f90a 	bl	8018f88 <memset>
 8019d74:	4620      	mov	r0, r4
 8019d76:	bd70      	pop	{r4, r5, r6, pc}

08019d78 <__sfp_lock_acquire>:
 8019d78:	4801      	ldr	r0, [pc, #4]	; (8019d80 <__sfp_lock_acquire+0x8>)
 8019d7a:	f000 b8b3 	b.w	8019ee4 <__retarget_lock_acquire_recursive>
 8019d7e:	bf00      	nop
 8019d80:	20013991 	.word	0x20013991

08019d84 <__sfp_lock_release>:
 8019d84:	4801      	ldr	r0, [pc, #4]	; (8019d8c <__sfp_lock_release+0x8>)
 8019d86:	f000 b8ae 	b.w	8019ee6 <__retarget_lock_release_recursive>
 8019d8a:	bf00      	nop
 8019d8c:	20013991 	.word	0x20013991

08019d90 <__sinit_lock_acquire>:
 8019d90:	4801      	ldr	r0, [pc, #4]	; (8019d98 <__sinit_lock_acquire+0x8>)
 8019d92:	f000 b8a7 	b.w	8019ee4 <__retarget_lock_acquire_recursive>
 8019d96:	bf00      	nop
 8019d98:	20013992 	.word	0x20013992

08019d9c <__sinit_lock_release>:
 8019d9c:	4801      	ldr	r0, [pc, #4]	; (8019da4 <__sinit_lock_release+0x8>)
 8019d9e:	f000 b8a2 	b.w	8019ee6 <__retarget_lock_release_recursive>
 8019da2:	bf00      	nop
 8019da4:	20013992 	.word	0x20013992

08019da8 <__sinit>:
 8019da8:	b510      	push	{r4, lr}
 8019daa:	4604      	mov	r4, r0
 8019dac:	f7ff fff0 	bl	8019d90 <__sinit_lock_acquire>
 8019db0:	69a3      	ldr	r3, [r4, #24]
 8019db2:	b11b      	cbz	r3, 8019dbc <__sinit+0x14>
 8019db4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019db8:	f7ff bff0 	b.w	8019d9c <__sinit_lock_release>
 8019dbc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8019dc0:	6523      	str	r3, [r4, #80]	; 0x50
 8019dc2:	4b13      	ldr	r3, [pc, #76]	; (8019e10 <__sinit+0x68>)
 8019dc4:	4a13      	ldr	r2, [pc, #76]	; (8019e14 <__sinit+0x6c>)
 8019dc6:	681b      	ldr	r3, [r3, #0]
 8019dc8:	62a2      	str	r2, [r4, #40]	; 0x28
 8019dca:	42a3      	cmp	r3, r4
 8019dcc:	bf04      	itt	eq
 8019dce:	2301      	moveq	r3, #1
 8019dd0:	61a3      	streq	r3, [r4, #24]
 8019dd2:	4620      	mov	r0, r4
 8019dd4:	f000 f820 	bl	8019e18 <__sfp>
 8019dd8:	6060      	str	r0, [r4, #4]
 8019dda:	4620      	mov	r0, r4
 8019ddc:	f000 f81c 	bl	8019e18 <__sfp>
 8019de0:	60a0      	str	r0, [r4, #8]
 8019de2:	4620      	mov	r0, r4
 8019de4:	f000 f818 	bl	8019e18 <__sfp>
 8019de8:	2200      	movs	r2, #0
 8019dea:	60e0      	str	r0, [r4, #12]
 8019dec:	2104      	movs	r1, #4
 8019dee:	6860      	ldr	r0, [r4, #4]
 8019df0:	f7ff ff82 	bl	8019cf8 <std>
 8019df4:	68a0      	ldr	r0, [r4, #8]
 8019df6:	2201      	movs	r2, #1
 8019df8:	2109      	movs	r1, #9
 8019dfa:	f7ff ff7d 	bl	8019cf8 <std>
 8019dfe:	68e0      	ldr	r0, [r4, #12]
 8019e00:	2202      	movs	r2, #2
 8019e02:	2112      	movs	r1, #18
 8019e04:	f7ff ff78 	bl	8019cf8 <std>
 8019e08:	2301      	movs	r3, #1
 8019e0a:	61a3      	str	r3, [r4, #24]
 8019e0c:	e7d2      	b.n	8019db4 <__sinit+0xc>
 8019e0e:	bf00      	nop
 8019e10:	0801d270 	.word	0x0801d270
 8019e14:	08019d41 	.word	0x08019d41

08019e18 <__sfp>:
 8019e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019e1a:	4607      	mov	r7, r0
 8019e1c:	f7ff ffac 	bl	8019d78 <__sfp_lock_acquire>
 8019e20:	4b1e      	ldr	r3, [pc, #120]	; (8019e9c <__sfp+0x84>)
 8019e22:	681e      	ldr	r6, [r3, #0]
 8019e24:	69b3      	ldr	r3, [r6, #24]
 8019e26:	b913      	cbnz	r3, 8019e2e <__sfp+0x16>
 8019e28:	4630      	mov	r0, r6
 8019e2a:	f7ff ffbd 	bl	8019da8 <__sinit>
 8019e2e:	3648      	adds	r6, #72	; 0x48
 8019e30:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8019e34:	3b01      	subs	r3, #1
 8019e36:	d503      	bpl.n	8019e40 <__sfp+0x28>
 8019e38:	6833      	ldr	r3, [r6, #0]
 8019e3a:	b30b      	cbz	r3, 8019e80 <__sfp+0x68>
 8019e3c:	6836      	ldr	r6, [r6, #0]
 8019e3e:	e7f7      	b.n	8019e30 <__sfp+0x18>
 8019e40:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8019e44:	b9d5      	cbnz	r5, 8019e7c <__sfp+0x64>
 8019e46:	4b16      	ldr	r3, [pc, #88]	; (8019ea0 <__sfp+0x88>)
 8019e48:	60e3      	str	r3, [r4, #12]
 8019e4a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8019e4e:	6665      	str	r5, [r4, #100]	; 0x64
 8019e50:	f000 f847 	bl	8019ee2 <__retarget_lock_init_recursive>
 8019e54:	f7ff ff96 	bl	8019d84 <__sfp_lock_release>
 8019e58:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8019e5c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8019e60:	6025      	str	r5, [r4, #0]
 8019e62:	61a5      	str	r5, [r4, #24]
 8019e64:	2208      	movs	r2, #8
 8019e66:	4629      	mov	r1, r5
 8019e68:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8019e6c:	f7ff f88c 	bl	8018f88 <memset>
 8019e70:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8019e74:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8019e78:	4620      	mov	r0, r4
 8019e7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019e7c:	3468      	adds	r4, #104	; 0x68
 8019e7e:	e7d9      	b.n	8019e34 <__sfp+0x1c>
 8019e80:	2104      	movs	r1, #4
 8019e82:	4638      	mov	r0, r7
 8019e84:	f7ff ff62 	bl	8019d4c <__sfmoreglue>
 8019e88:	4604      	mov	r4, r0
 8019e8a:	6030      	str	r0, [r6, #0]
 8019e8c:	2800      	cmp	r0, #0
 8019e8e:	d1d5      	bne.n	8019e3c <__sfp+0x24>
 8019e90:	f7ff ff78 	bl	8019d84 <__sfp_lock_release>
 8019e94:	230c      	movs	r3, #12
 8019e96:	603b      	str	r3, [r7, #0]
 8019e98:	e7ee      	b.n	8019e78 <__sfp+0x60>
 8019e9a:	bf00      	nop
 8019e9c:	0801d270 	.word	0x0801d270
 8019ea0:	ffff0001 	.word	0xffff0001

08019ea4 <_fwalk_reent>:
 8019ea4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019ea8:	4606      	mov	r6, r0
 8019eaa:	4688      	mov	r8, r1
 8019eac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8019eb0:	2700      	movs	r7, #0
 8019eb2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019eb6:	f1b9 0901 	subs.w	r9, r9, #1
 8019eba:	d505      	bpl.n	8019ec8 <_fwalk_reent+0x24>
 8019ebc:	6824      	ldr	r4, [r4, #0]
 8019ebe:	2c00      	cmp	r4, #0
 8019ec0:	d1f7      	bne.n	8019eb2 <_fwalk_reent+0xe>
 8019ec2:	4638      	mov	r0, r7
 8019ec4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019ec8:	89ab      	ldrh	r3, [r5, #12]
 8019eca:	2b01      	cmp	r3, #1
 8019ecc:	d907      	bls.n	8019ede <_fwalk_reent+0x3a>
 8019ece:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019ed2:	3301      	adds	r3, #1
 8019ed4:	d003      	beq.n	8019ede <_fwalk_reent+0x3a>
 8019ed6:	4629      	mov	r1, r5
 8019ed8:	4630      	mov	r0, r6
 8019eda:	47c0      	blx	r8
 8019edc:	4307      	orrs	r7, r0
 8019ede:	3568      	adds	r5, #104	; 0x68
 8019ee0:	e7e9      	b.n	8019eb6 <_fwalk_reent+0x12>

08019ee2 <__retarget_lock_init_recursive>:
 8019ee2:	4770      	bx	lr

08019ee4 <__retarget_lock_acquire_recursive>:
 8019ee4:	4770      	bx	lr

08019ee6 <__retarget_lock_release_recursive>:
 8019ee6:	4770      	bx	lr

08019ee8 <_lseek_r>:
 8019ee8:	b538      	push	{r3, r4, r5, lr}
 8019eea:	4d07      	ldr	r5, [pc, #28]	; (8019f08 <_lseek_r+0x20>)
 8019eec:	4604      	mov	r4, r0
 8019eee:	4608      	mov	r0, r1
 8019ef0:	4611      	mov	r1, r2
 8019ef2:	2200      	movs	r2, #0
 8019ef4:	602a      	str	r2, [r5, #0]
 8019ef6:	461a      	mov	r2, r3
 8019ef8:	f7e8 fa90 	bl	800241c <_lseek>
 8019efc:	1c43      	adds	r3, r0, #1
 8019efe:	d102      	bne.n	8019f06 <_lseek_r+0x1e>
 8019f00:	682b      	ldr	r3, [r5, #0]
 8019f02:	b103      	cbz	r3, 8019f06 <_lseek_r+0x1e>
 8019f04:	6023      	str	r3, [r4, #0]
 8019f06:	bd38      	pop	{r3, r4, r5, pc}
 8019f08:	2001398c 	.word	0x2001398c

08019f0c <__swhatbuf_r>:
 8019f0c:	b570      	push	{r4, r5, r6, lr}
 8019f0e:	460e      	mov	r6, r1
 8019f10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019f14:	2900      	cmp	r1, #0
 8019f16:	b096      	sub	sp, #88	; 0x58
 8019f18:	4614      	mov	r4, r2
 8019f1a:	461d      	mov	r5, r3
 8019f1c:	da08      	bge.n	8019f30 <__swhatbuf_r+0x24>
 8019f1e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8019f22:	2200      	movs	r2, #0
 8019f24:	602a      	str	r2, [r5, #0]
 8019f26:	061a      	lsls	r2, r3, #24
 8019f28:	d410      	bmi.n	8019f4c <__swhatbuf_r+0x40>
 8019f2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019f2e:	e00e      	b.n	8019f4e <__swhatbuf_r+0x42>
 8019f30:	466a      	mov	r2, sp
 8019f32:	f000 f877 	bl	801a024 <_fstat_r>
 8019f36:	2800      	cmp	r0, #0
 8019f38:	dbf1      	blt.n	8019f1e <__swhatbuf_r+0x12>
 8019f3a:	9a01      	ldr	r2, [sp, #4]
 8019f3c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8019f40:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8019f44:	425a      	negs	r2, r3
 8019f46:	415a      	adcs	r2, r3
 8019f48:	602a      	str	r2, [r5, #0]
 8019f4a:	e7ee      	b.n	8019f2a <__swhatbuf_r+0x1e>
 8019f4c:	2340      	movs	r3, #64	; 0x40
 8019f4e:	2000      	movs	r0, #0
 8019f50:	6023      	str	r3, [r4, #0]
 8019f52:	b016      	add	sp, #88	; 0x58
 8019f54:	bd70      	pop	{r4, r5, r6, pc}
	...

08019f58 <__smakebuf_r>:
 8019f58:	898b      	ldrh	r3, [r1, #12]
 8019f5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019f5c:	079d      	lsls	r5, r3, #30
 8019f5e:	4606      	mov	r6, r0
 8019f60:	460c      	mov	r4, r1
 8019f62:	d507      	bpl.n	8019f74 <__smakebuf_r+0x1c>
 8019f64:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8019f68:	6023      	str	r3, [r4, #0]
 8019f6a:	6123      	str	r3, [r4, #16]
 8019f6c:	2301      	movs	r3, #1
 8019f6e:	6163      	str	r3, [r4, #20]
 8019f70:	b002      	add	sp, #8
 8019f72:	bd70      	pop	{r4, r5, r6, pc}
 8019f74:	ab01      	add	r3, sp, #4
 8019f76:	466a      	mov	r2, sp
 8019f78:	f7ff ffc8 	bl	8019f0c <__swhatbuf_r>
 8019f7c:	9900      	ldr	r1, [sp, #0]
 8019f7e:	4605      	mov	r5, r0
 8019f80:	4630      	mov	r0, r6
 8019f82:	f7ff f875 	bl	8019070 <_malloc_r>
 8019f86:	b948      	cbnz	r0, 8019f9c <__smakebuf_r+0x44>
 8019f88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019f8c:	059a      	lsls	r2, r3, #22
 8019f8e:	d4ef      	bmi.n	8019f70 <__smakebuf_r+0x18>
 8019f90:	f023 0303 	bic.w	r3, r3, #3
 8019f94:	f043 0302 	orr.w	r3, r3, #2
 8019f98:	81a3      	strh	r3, [r4, #12]
 8019f9a:	e7e3      	b.n	8019f64 <__smakebuf_r+0xc>
 8019f9c:	4b0d      	ldr	r3, [pc, #52]	; (8019fd4 <__smakebuf_r+0x7c>)
 8019f9e:	62b3      	str	r3, [r6, #40]	; 0x28
 8019fa0:	89a3      	ldrh	r3, [r4, #12]
 8019fa2:	6020      	str	r0, [r4, #0]
 8019fa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019fa8:	81a3      	strh	r3, [r4, #12]
 8019faa:	9b00      	ldr	r3, [sp, #0]
 8019fac:	6163      	str	r3, [r4, #20]
 8019fae:	9b01      	ldr	r3, [sp, #4]
 8019fb0:	6120      	str	r0, [r4, #16]
 8019fb2:	b15b      	cbz	r3, 8019fcc <__smakebuf_r+0x74>
 8019fb4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019fb8:	4630      	mov	r0, r6
 8019fba:	f000 f845 	bl	801a048 <_isatty_r>
 8019fbe:	b128      	cbz	r0, 8019fcc <__smakebuf_r+0x74>
 8019fc0:	89a3      	ldrh	r3, [r4, #12]
 8019fc2:	f023 0303 	bic.w	r3, r3, #3
 8019fc6:	f043 0301 	orr.w	r3, r3, #1
 8019fca:	81a3      	strh	r3, [r4, #12]
 8019fcc:	89a0      	ldrh	r0, [r4, #12]
 8019fce:	4305      	orrs	r5, r0
 8019fd0:	81a5      	strh	r5, [r4, #12]
 8019fd2:	e7cd      	b.n	8019f70 <__smakebuf_r+0x18>
 8019fd4:	08019d41 	.word	0x08019d41

08019fd8 <__malloc_lock>:
 8019fd8:	4801      	ldr	r0, [pc, #4]	; (8019fe0 <__malloc_lock+0x8>)
 8019fda:	f7ff bf83 	b.w	8019ee4 <__retarget_lock_acquire_recursive>
 8019fde:	bf00      	nop
 8019fe0:	20013990 	.word	0x20013990

08019fe4 <__malloc_unlock>:
 8019fe4:	4801      	ldr	r0, [pc, #4]	; (8019fec <__malloc_unlock+0x8>)
 8019fe6:	f7ff bf7e 	b.w	8019ee6 <__retarget_lock_release_recursive>
 8019fea:	bf00      	nop
 8019fec:	20013990 	.word	0x20013990

08019ff0 <_read_r>:
 8019ff0:	b538      	push	{r3, r4, r5, lr}
 8019ff2:	4d07      	ldr	r5, [pc, #28]	; (801a010 <_read_r+0x20>)
 8019ff4:	4604      	mov	r4, r0
 8019ff6:	4608      	mov	r0, r1
 8019ff8:	4611      	mov	r1, r2
 8019ffa:	2200      	movs	r2, #0
 8019ffc:	602a      	str	r2, [r5, #0]
 8019ffe:	461a      	mov	r2, r3
 801a000:	f7e8 f9ac 	bl	800235c <_read>
 801a004:	1c43      	adds	r3, r0, #1
 801a006:	d102      	bne.n	801a00e <_read_r+0x1e>
 801a008:	682b      	ldr	r3, [r5, #0]
 801a00a:	b103      	cbz	r3, 801a00e <_read_r+0x1e>
 801a00c:	6023      	str	r3, [r4, #0]
 801a00e:	bd38      	pop	{r3, r4, r5, pc}
 801a010:	2001398c 	.word	0x2001398c

0801a014 <abort>:
 801a014:	b508      	push	{r3, lr}
 801a016:	2006      	movs	r0, #6
 801a018:	f000 f84e 	bl	801a0b8 <raise>
 801a01c:	2001      	movs	r0, #1
 801a01e:	f7e8 f993 	bl	8002348 <_exit>
	...

0801a024 <_fstat_r>:
 801a024:	b538      	push	{r3, r4, r5, lr}
 801a026:	4d07      	ldr	r5, [pc, #28]	; (801a044 <_fstat_r+0x20>)
 801a028:	2300      	movs	r3, #0
 801a02a:	4604      	mov	r4, r0
 801a02c:	4608      	mov	r0, r1
 801a02e:	4611      	mov	r1, r2
 801a030:	602b      	str	r3, [r5, #0]
 801a032:	f7e8 f9d8 	bl	80023e6 <_fstat>
 801a036:	1c43      	adds	r3, r0, #1
 801a038:	d102      	bne.n	801a040 <_fstat_r+0x1c>
 801a03a:	682b      	ldr	r3, [r5, #0]
 801a03c:	b103      	cbz	r3, 801a040 <_fstat_r+0x1c>
 801a03e:	6023      	str	r3, [r4, #0]
 801a040:	bd38      	pop	{r3, r4, r5, pc}
 801a042:	bf00      	nop
 801a044:	2001398c 	.word	0x2001398c

0801a048 <_isatty_r>:
 801a048:	b538      	push	{r3, r4, r5, lr}
 801a04a:	4d06      	ldr	r5, [pc, #24]	; (801a064 <_isatty_r+0x1c>)
 801a04c:	2300      	movs	r3, #0
 801a04e:	4604      	mov	r4, r0
 801a050:	4608      	mov	r0, r1
 801a052:	602b      	str	r3, [r5, #0]
 801a054:	f7e8 f9d7 	bl	8002406 <_isatty>
 801a058:	1c43      	adds	r3, r0, #1
 801a05a:	d102      	bne.n	801a062 <_isatty_r+0x1a>
 801a05c:	682b      	ldr	r3, [r5, #0]
 801a05e:	b103      	cbz	r3, 801a062 <_isatty_r+0x1a>
 801a060:	6023      	str	r3, [r4, #0]
 801a062:	bd38      	pop	{r3, r4, r5, pc}
 801a064:	2001398c 	.word	0x2001398c

0801a068 <_raise_r>:
 801a068:	291f      	cmp	r1, #31
 801a06a:	b538      	push	{r3, r4, r5, lr}
 801a06c:	4604      	mov	r4, r0
 801a06e:	460d      	mov	r5, r1
 801a070:	d904      	bls.n	801a07c <_raise_r+0x14>
 801a072:	2316      	movs	r3, #22
 801a074:	6003      	str	r3, [r0, #0]
 801a076:	f04f 30ff 	mov.w	r0, #4294967295
 801a07a:	bd38      	pop	{r3, r4, r5, pc}
 801a07c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801a07e:	b112      	cbz	r2, 801a086 <_raise_r+0x1e>
 801a080:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801a084:	b94b      	cbnz	r3, 801a09a <_raise_r+0x32>
 801a086:	4620      	mov	r0, r4
 801a088:	f000 f830 	bl	801a0ec <_getpid_r>
 801a08c:	462a      	mov	r2, r5
 801a08e:	4601      	mov	r1, r0
 801a090:	4620      	mov	r0, r4
 801a092:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a096:	f000 b817 	b.w	801a0c8 <_kill_r>
 801a09a:	2b01      	cmp	r3, #1
 801a09c:	d00a      	beq.n	801a0b4 <_raise_r+0x4c>
 801a09e:	1c59      	adds	r1, r3, #1
 801a0a0:	d103      	bne.n	801a0aa <_raise_r+0x42>
 801a0a2:	2316      	movs	r3, #22
 801a0a4:	6003      	str	r3, [r0, #0]
 801a0a6:	2001      	movs	r0, #1
 801a0a8:	e7e7      	b.n	801a07a <_raise_r+0x12>
 801a0aa:	2400      	movs	r4, #0
 801a0ac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801a0b0:	4628      	mov	r0, r5
 801a0b2:	4798      	blx	r3
 801a0b4:	2000      	movs	r0, #0
 801a0b6:	e7e0      	b.n	801a07a <_raise_r+0x12>

0801a0b8 <raise>:
 801a0b8:	4b02      	ldr	r3, [pc, #8]	; (801a0c4 <raise+0xc>)
 801a0ba:	4601      	mov	r1, r0
 801a0bc:	6818      	ldr	r0, [r3, #0]
 801a0be:	f7ff bfd3 	b.w	801a068 <_raise_r>
 801a0c2:	bf00      	nop
 801a0c4:	20000020 	.word	0x20000020

0801a0c8 <_kill_r>:
 801a0c8:	b538      	push	{r3, r4, r5, lr}
 801a0ca:	4d07      	ldr	r5, [pc, #28]	; (801a0e8 <_kill_r+0x20>)
 801a0cc:	2300      	movs	r3, #0
 801a0ce:	4604      	mov	r4, r0
 801a0d0:	4608      	mov	r0, r1
 801a0d2:	4611      	mov	r1, r2
 801a0d4:	602b      	str	r3, [r5, #0]
 801a0d6:	f7e8 f925 	bl	8002324 <_kill>
 801a0da:	1c43      	adds	r3, r0, #1
 801a0dc:	d102      	bne.n	801a0e4 <_kill_r+0x1c>
 801a0de:	682b      	ldr	r3, [r5, #0]
 801a0e0:	b103      	cbz	r3, 801a0e4 <_kill_r+0x1c>
 801a0e2:	6023      	str	r3, [r4, #0]
 801a0e4:	bd38      	pop	{r3, r4, r5, pc}
 801a0e6:	bf00      	nop
 801a0e8:	2001398c 	.word	0x2001398c

0801a0ec <_getpid_r>:
 801a0ec:	f7e8 b912 	b.w	8002314 <_getpid>

0801a0f0 <_init>:
 801a0f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a0f2:	bf00      	nop
 801a0f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a0f6:	bc08      	pop	{r3}
 801a0f8:	469e      	mov	lr, r3
 801a0fa:	4770      	bx	lr

0801a0fc <_fini>:
 801a0fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a0fe:	bf00      	nop
 801a100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a102:	bc08      	pop	{r3}
 801a104:	469e      	mov	lr, r3
 801a106:	4770      	bx	lr
